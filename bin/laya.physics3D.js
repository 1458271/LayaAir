window.Physics3D = function (pages, interactive) {
  function init(initialMemory,interactive,exports){
  var getWorldTransform=interactive.getWorldTransform;
  var setWorldTransform=interactive.setWorldTransform;
  var fd_close=() => { console.log('fd_close')};
  var fd_write=() => { console.log('fd_write')};
  var fd_seek=() => { console.log('fd_seek')};


  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[0];
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var fimport$1 = env.fd_close;
 var fimport$2 = env.fd_write;
 var fimport$4 = env.getWorldTransform;
 var fimport$5 = env.setWorldTransform;
 var legalimport$fimport$3 = env.fd_seek;
 var global$0 = 90416;
 var i64toi32_i32$HIGH_BITS = 0;
 function $0($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = fimport$1($0_1 | 0) | 0;
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[(0 + 1024 | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $1($0_1) {
  $0_1 = $0_1 | 0;
  return $0(HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = -1;
  label$1 : {
   label$2 : {
    if (($2_1 | 0) > (-1 | 0)) {
     break label$2
    }
    HEAP32[(0 + 1024 | 0) >> 2] = 28;
    break label$1;
   }
   label$3 : {
    $2_1 = fimport$2($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 + 12 | 0 | 0) | 0;
    if (!$2_1) {
     break label$3
    }
    HEAP32[(0 + 1024 | 0) >> 2] = $2_1;
    $4_1 = -1;
    break label$1;
   }
   $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $3($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $3_1 = 0, $7_1 = 0, $8_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
  $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[$3_1 >> 2] = $1_1;
  $1_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - $1_1 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
  $4_1 = 2;
  label$1 : {
   label$2 : {
    $5_1 = $1_1 + $2_1 | 0;
    $6_1 = $2(HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0, $3_1 | 0, 2 | 0) | 0;
    if (($5_1 | 0) == ($6_1 | 0)) {
     break label$2
    }
    $1_1 = $3_1;
    label$3 : while (1) {
     label$4 : {
      if (($6_1 | 0) > (-1 | 0)) {
       break label$4
      }
      $6_1 = 0;
      HEAP32[($0_1 + 24 | 0) >> 2] = 0;
      HEAP32[($0_1 + 16 | 0) >> 2] = 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = 0;
      HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
      if (($4_1 | 0) == (2 | 0)) {
       break label$1
      }
      $6_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
      break label$1;
     }
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $8_1 = $6_1 >>> 0 > $7_1 >>> 0;
     $1_1 = $8_1 ? $1_1 + 8 | 0 : $1_1;
     $7_1 = $6_1 - ($8_1 ? $7_1 : 0) | 0;
     HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + $7_1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - $7_1 | 0;
     $5_1 = $5_1 - $6_1 | 0;
     $4_1 = $4_1 - $8_1 | 0;
     $8_1 = $2(HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0, $1_1 | 0, $4_1 | 0) | 0;
     $6_1 = $8_1;
     if (($5_1 | 0) != ($6_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
   $6_1 = $2_1;
  }
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $4($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    $0_1 = legalfunc$fimport$3($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    if (!$0_1) {
     break label$2
    }
    HEAP32[(0 + 1024 | 0) >> 2] = ($0_1 | 0) == (76 | 0) ? 70 : $0_1;
    i64toi32_i32$0 = -1;
    $1_1 = -1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$1;
  }
  global$0 = $3_1 + 16 | 0;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $5($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4(HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $6($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  HEAP32[($0_1 + 60 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $7($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    if (!($1_1 & 3 | 0)) {
     break label$2
    }
    $3_1 = $0_1;
    label$3 : while (1) {
     HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
     $4_1 = $2_1 + -1 | 0;
     $3_1 = $3_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     if (($2_1 | 0) == (1 | 0)) {
      break label$1
     }
     $2_1 = $4_1;
     if ($1_1 & 3 | 0) {
      continue label$3
     }
     break label$1;
    };
   }
   $4_1 = $2_1;
   $3_1 = $0_1;
  }
  label$4 : {
   label$5 : {
    $2_1 = $3_1 & 3 | 0;
    if ($2_1) {
     break label$5
    }
    label$6 : {
     label$7 : {
      if ($4_1 >>> 0 >= 16 >>> 0) {
       break label$7
      }
      $2_1 = $4_1;
      break label$6;
     }
     $2_1 = $4_1 + -16 | 0;
     label$8 : while (1) {
      HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      $3_1 = $3_1 + 16 | 0;
      $1_1 = $1_1 + 16 | 0;
      $4_1 = $4_1 + -16 | 0;
      if ($4_1 >>> 0 > 15 >>> 0) {
       continue label$8
      }
      break label$8;
     };
    }
    label$9 : {
     if (!($2_1 & 8 | 0)) {
      break label$9
     }
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     $1_1 = $1_1 + 8 | 0;
     $3_1 = $3_1 + 8 | 0;
    }
    label$10 : {
     if (!($2_1 & 4 | 0)) {
      break label$10
     }
     HEAP32[$3_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 4 | 0;
    }
    label$11 : {
     if (!($2_1 & 2 | 0)) {
      break label$11
     }
     HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
     HEAP8[($3_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
     $3_1 = $3_1 + 2 | 0;
     $1_1 = $1_1 + 2 | 0;
    }
    if (!($2_1 & 1 | 0)) {
     break label$4
    }
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    return $0_1 | 0;
   }
   label$12 : {
    if ($4_1 >>> 0 < 32 >>> 0) {
     break label$12
    }
    $2_1 = $2_1 + -1 | 0;
    if ($2_1 >>> 0 > 2 >>> 0) {
     break label$12
    }
    label$13 : {
     switch ($2_1 | 0) {
     default:
      HEAP8[($3_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      $5_1 = HEAP32[$1_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = $5_1;
      HEAP8[($3_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
      $6_1 = $4_1 + -3 | 0;
      $7_1 = $3_1 + 3 | 0;
      $8_1 = ($4_1 + -20 | 0) & -16 | 0;
      $2_1 = 0;
      label$16 : while (1) {
       $3_1 = $7_1 + $2_1 | 0;
       $9_1 = $1_1 + $2_1 | 0;
       $10_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
       HEAP32[$3_1 >> 2] = $10_1 << 8 | 0 | ($5_1 >>> 24 | 0) | 0;
       $5_1 = HEAP32[($9_1 + 8 | 0) >> 2] | 0;
       HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 << 8 | 0 | ($10_1 >>> 24 | 0) | 0;
       $10_1 = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
       HEAP32[($3_1 + 8 | 0) >> 2] = $10_1 << 8 | 0 | ($5_1 >>> 24 | 0) | 0;
       $5_1 = HEAP32[($9_1 + 16 | 0) >> 2] | 0;
       HEAP32[($3_1 + 12 | 0) >> 2] = $5_1 << 8 | 0 | ($10_1 >>> 24 | 0) | 0;
       $2_1 = $2_1 + 16 | 0;
       $6_1 = $6_1 + -16 | 0;
       if ($6_1 >>> 0 > 16 >>> 0) {
        continue label$16
       }
       break label$16;
      };
      $3_1 = $7_1 + $2_1 | 0;
      $1_1 = ($1_1 + $2_1 | 0) + 3 | 0;
      $4_1 = ($4_1 - $8_1 | 0) + -19 | 0;
      break label$12;
     case 1:
      $5_1 = HEAP32[$1_1 >> 2] | 0;
      HEAP8[$3_1 >> 0] = $5_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      $6_1 = $4_1 + -2 | 0;
      $7_1 = $3_1 + 2 | 0;
      $8_1 = ($4_1 + -20 | 0) & -16 | 0;
      $2_1 = 0;
      label$17 : while (1) {
       $3_1 = $7_1 + $2_1 | 0;
       $9_1 = $1_1 + $2_1 | 0;
       $10_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
       HEAP32[$3_1 >> 2] = $10_1 << 16 | 0 | ($5_1 >>> 16 | 0) | 0;
       $5_1 = HEAP32[($9_1 + 8 | 0) >> 2] | 0;
       HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 << 16 | 0 | ($10_1 >>> 16 | 0) | 0;
       $10_1 = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
       HEAP32[($3_1 + 8 | 0) >> 2] = $10_1 << 16 | 0 | ($5_1 >>> 16 | 0) | 0;
       $5_1 = HEAP32[($9_1 + 16 | 0) >> 2] | 0;
       HEAP32[($3_1 + 12 | 0) >> 2] = $5_1 << 16 | 0 | ($10_1 >>> 16 | 0) | 0;
       $2_1 = $2_1 + 16 | 0;
       $6_1 = $6_1 + -16 | 0;
       if ($6_1 >>> 0 > 17 >>> 0) {
        continue label$17
       }
       break label$17;
      };
      $3_1 = $7_1 + $2_1 | 0;
      $1_1 = ($1_1 + $2_1 | 0) + 2 | 0;
      $4_1 = ($4_1 - $8_1 | 0) + -18 | 0;
      break label$12;
     case 2:
      break label$13;
     };
    }
    $5_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP8[$3_1 >> 0] = $5_1;
    $6_1 = $4_1 + -1 | 0;
    $7_1 = $3_1 + 1 | 0;
    $8_1 = ($4_1 + -20 | 0) & -16 | 0;
    $2_1 = 0;
    label$18 : while (1) {
     $3_1 = $7_1 + $2_1 | 0;
     $9_1 = $1_1 + $2_1 | 0;
     $10_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = $10_1 << 24 | 0 | ($5_1 >>> 8 | 0) | 0;
     $5_1 = HEAP32[($9_1 + 8 | 0) >> 2] | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 << 24 | 0 | ($10_1 >>> 8 | 0) | 0;
     $10_1 = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
     HEAP32[($3_1 + 8 | 0) >> 2] = $10_1 << 24 | 0 | ($5_1 >>> 8 | 0) | 0;
     $5_1 = HEAP32[($9_1 + 16 | 0) >> 2] | 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = $5_1 << 24 | 0 | ($10_1 >>> 8 | 0) | 0;
     $2_1 = $2_1 + 16 | 0;
     $6_1 = $6_1 + -16 | 0;
     if ($6_1 >>> 0 > 18 >>> 0) {
      continue label$18
     }
     break label$18;
    };
    $3_1 = $7_1 + $2_1 | 0;
    $1_1 = ($1_1 + $2_1 | 0) + 1 | 0;
    $4_1 = ($4_1 - $8_1 | 0) + -17 | 0;
   }
   label$19 : {
    if (!($4_1 & 16 | 0)) {
     break label$19
    }
    $12_1 = HEAPU8[$1_1 >> 0] | 0 | ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0;
    HEAP8[$3_1 >> 0] = $12_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    HEAP8[($3_1 + 4 | 0) >> 0] = HEAPU8[($1_1 + 4 | 0) >> 0] | 0;
    HEAP8[($3_1 + 5 | 0) >> 0] = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
    HEAP8[($3_1 + 6 | 0) >> 0] = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
    HEAP8[($3_1 + 7 | 0) >> 0] = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
    HEAP8[($3_1 + 8 | 0) >> 0] = HEAPU8[($1_1 + 8 | 0) >> 0] | 0;
    HEAP8[($3_1 + 9 | 0) >> 0] = HEAPU8[($1_1 + 9 | 0) >> 0] | 0;
    HEAP8[($3_1 + 10 | 0) >> 0] = HEAPU8[($1_1 + 10 | 0) >> 0] | 0;
    HEAP8[($3_1 + 11 | 0) >> 0] = HEAPU8[($1_1 + 11 | 0) >> 0] | 0;
    HEAP8[($3_1 + 12 | 0) >> 0] = HEAPU8[($1_1 + 12 | 0) >> 0] | 0;
    HEAP8[($3_1 + 13 | 0) >> 0] = HEAPU8[($1_1 + 13 | 0) >> 0] | 0;
    HEAP8[($3_1 + 14 | 0) >> 0] = HEAPU8[($1_1 + 14 | 0) >> 0] | 0;
    HEAP8[($3_1 + 15 | 0) >> 0] = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
    $3_1 = $3_1 + 16 | 0;
    $1_1 = $1_1 + 16 | 0;
   }
   label$20 : {
    if (!($4_1 & 8 | 0)) {
     break label$20
    }
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($3_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    HEAP8[($3_1 + 4 | 0) >> 0] = HEAPU8[($1_1 + 4 | 0) >> 0] | 0;
    HEAP8[($3_1 + 5 | 0) >> 0] = HEAPU8[($1_1 + 5 | 0) >> 0] | 0;
    HEAP8[($3_1 + 6 | 0) >> 0] = HEAPU8[($1_1 + 6 | 0) >> 0] | 0;
    HEAP8[($3_1 + 7 | 0) >> 0] = HEAPU8[($1_1 + 7 | 0) >> 0] | 0;
    $3_1 = $3_1 + 8 | 0;
    $1_1 = $1_1 + 8 | 0;
   }
   label$21 : {
    if (!($4_1 & 4 | 0)) {
     break label$21
    }
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($3_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
   }
   label$22 : {
    if (!($4_1 & 2 | 0)) {
     break label$22
    }
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($3_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = $3_1 + 2 | 0;
    $1_1 = $1_1 + 2 | 0;
   }
   if (!($4_1 & 1 | 0)) {
    break label$4
   }
   HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
  }
  return $0_1 | 0;
 }
 
 function $8($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0, $8_1 = 0, $7_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($6($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 32 | 0) >> 2] | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   $6_1 = 0;
   label$4 : {
    if ((HEAP32[($2_1 + 64 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$4
    }
    $6_1 = 0;
    $4_1 = $0_1;
    $3_1 = 0;
    label$5 : while (1) {
     if (($1_1 | 0) == ($3_1 | 0)) {
      break label$4
     }
     $3_1 = $3_1 + 1 | 0;
     $7_1 = $4_1 + $1_1 | 0;
     $8_1 = $4_1 + -1 | 0;
     $4_1 = $8_1;
     if ((HEAPU8[($7_1 + -1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $6_1 = ($1_1 - $3_1 | 0) + 1 | 0;
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 32 | 0) >> 2] | 0]($2_1, $0_1, $6_1) | 0;
    if ($4_1 >>> 0 < $6_1 >>> 0) {
     break label$1
    }
    $0_1 = ($8_1 + $1_1 | 0) + 1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    $1_1 = $3_1 + -1 | 0;
   }
   $7($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $6_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $9($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  label$1 : {
   $4_1 = Math_imul($2_1, $1_1);
   $0_1 = $8($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (($0_1 | 0) != ($4_1 | 0)) {
    break label$1
   }
   return ($1_1 ? $2_1 : 0) | 0;
  }
  return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
 }
 
 function $10($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $11($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $10($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $12($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   $2_1 = HEAP32[(0 + 1060 | 0) >> 2] | 0;
   if ($2_1) {
    break label$1
   }
   $2_1 = 1036;
   HEAP32[(0 + 1060 | 0) >> 2] = 1036;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : while (1) {
      if ((HEAPU8[($1_1 + 3024 | 0) >> 0] | 0 | 0) == ($0_1 | 0)) {
       break label$4
      }
      $3_1 = 77;
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != (77 | 0)) {
       continue label$5
      }
      break label$3;
     };
    }
    $3_1 = $1_1;
    if ($1_1) {
     break label$3
    }
    $4_1 = 3104;
    break label$2;
   }
   $1_1 = 3104;
   label$6 : while (1) {
    $0_1 = HEAPU8[$1_1 >> 0] | 0;
    $4_1 = $1_1 + 1 | 0;
    $1_1 = $4_1;
    if ($0_1) {
     continue label$6
    }
    $1_1 = $4_1;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $11($4_1 | 0, HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $13($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($2_1) {
       break label$4
      }
      $4_1 = $2_1;
      break label$3;
     }
     label$5 : {
      if ($0_1 & 3 | 0) {
       break label$5
      }
      $4_1 = $2_1;
      break label$3;
     }
     $5_1 = $1_1 & 255 | 0;
     label$6 : while (1) {
      label$7 : {
       if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($5_1 | 0)) {
        break label$7
       }
       $4_1 = $2_1;
       break label$2;
      }
      $3_1 = ($2_1 | 0) != (1 | 0);
      $4_1 = $2_1 + -1 | 0;
      $0_1 = $0_1 + 1 | 0;
      if (($2_1 | 0) == (1 | 0)) {
       break label$3
      }
      $2_1 = $4_1;
      if ($0_1 & 3 | 0) {
       continue label$6
      }
      break label$6;
     };
    }
    if (!$3_1) {
     break label$1
    }
   }
   label$8 : {
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$8
    }
    if ($4_1 >>> 0 < 4 >>> 0) {
     break label$8
    }
    $3_1 = Math_imul($1_1 & 255 | 0, 16843009);
    label$9 : while (1) {
     $2_1 = (HEAP32[$0_1 >> 2] | 0) ^ $3_1 | 0;
     if ((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$8
     }
     $0_1 = $0_1 + 4 | 0;
     $4_1 = $4_1 + -4 | 0;
     if ($4_1 >>> 0 > 3 >>> 0) {
      continue label$9
     }
     break label$9;
    };
   }
   if (!$4_1) {
    break label$1
   }
   $2_1 = $1_1 & 255 | 0;
   label$10 : while (1) {
    label$11 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($2_1 | 0)) {
      break label$11
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$10
    }
    break label$10;
   };
  }
  return 0 | 0;
 }
 
 function $14($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $13($0_1 | 0, 0 | 0, $1_1 | 0) | 0;
  return ($2_1 ? $2_1 - $0_1 | 0 : $1_1) | 0;
 }
 
 function $15($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    if ($1_1 >>> 0 > 127 >>> 0) {
     break label$2
    }
    HEAP8[$0_1 >> 0] = $1_1;
    return 1 | 0;
   }
   label$3 : {
    label$4 : {
     if (HEAP32[(0 + 1036 | 0) >> 2] | 0) {
      break label$4
     }
     label$5 : {
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$5
      }
      HEAP32[(0 + 1024 | 0) >> 2] = 25;
      break label$3;
     }
     HEAP8[$0_1 >> 0] = $1_1;
     return 1 | 0;
    }
    label$6 : {
     if ($1_1 >>> 0 > 2047 >>> 0) {
      break label$6
     }
     HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
     HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
     return 2 | 0;
    }
    label$7 : {
     label$8 : {
      if ($1_1 >>> 0 < 55296 >>> 0) {
       break label$8
      }
      if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
       break label$7
      }
     }
     HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
     HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
     HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
     return 3 | 0;
    }
    label$9 : {
     if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
      break label$9
     }
     HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
     HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
     HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
     HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
     return 4 | 0;
    }
    HEAP32[(0 + 1024 | 0) >> 2] = 25;
   }
   $3_1 = -1;
  }
  return $3_1 | 0;
 }
 
 function $16($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $15($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $17($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $6$hi = 0, i64toi32_i32$3 = 0, $5_1 = 0, $14_1 = 0, $104$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP8[$0_1 >> 0] = $1_1;
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $6_1 = $1_1;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $14_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $14_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $104$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $104$hi;
   i64toi32_i32$0 = $14_1;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $6_1 = i64toi32_i32$0 | $6_1 | 0;
   $6$hi = i64toi32_i32$2;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$0 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1 + 24 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $6_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1 + 16 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $6_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
    i64toi32_i32$0 = $1_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $6_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $18($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $2_1 = 0, $10_1 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $10_1 & 2047 | 0;
   if (($3_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : {
     if ($0_1 != 0.0) {
      break label$3
     }
     HEAP32[$1_1 >> 2] = 0;
     return +$0_1;
    }
    $0_1 = +$18(+($0_1 * 18446744073709551615.0), $1_1 | 0);
    HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $3_1 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $19($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($1_1 & 3 | 0)) {
      break label$3
     }
     label$4 : {
      if (HEAPU8[$0_1 >> 0] | 0) {
       break label$4
      }
      return $0_1 - $0_1 | 0 | 0;
     }
     $1_1 = $0_1 + 1 | 0;
     label$5 : while (1) {
      if (!($1_1 & 3 | 0)) {
       break label$3
      }
      $2_1 = HEAPU8[$1_1 >> 0] | 0;
      $3_1 = $1_1 + 1 | 0;
      $1_1 = $3_1;
      if (!$2_1) {
       break label$2
      }
      continue label$5;
     };
    }
    $1_1 = $1_1 + -4 | 0;
    label$6 : while (1) {
     $1_1 = $1_1 + 4 | 0;
     $2_1 = HEAP32[$1_1 >> 2] | 0;
     if (!((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
      continue label$6
     }
     break label$6;
    };
    label$7 : {
     if ($2_1 & 255 | 0) {
      break label$7
     }
     return $1_1 - $0_1 | 0 | 0;
    }
    label$8 : while (1) {
     $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
     $3_1 = $1_1 + 1 | 0;
     $1_1 = $3_1;
     if ($2_1) {
      continue label$8
     }
     break label$1;
    };
   }
   $3_1 = $3_1 + -1 | 0;
  }
  return $3_1 - $0_1 | 0 | 0;
 }
 
 function $20($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $19($0_1 | 0) | 0;
  return (($2_1 | 0) != ($9($0_1 | 0, 1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) ? -1 : 0) | 0;
 }
 
 function $21() {
  abort();
 }
 
 function $22($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 208 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 204 | 0) >> 2] = $2_1;
  i64toi32_i32$1 = ($3_1 + 160 | 0) + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 184 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 176 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 168 | 0) >> 2] = 0;
  HEAP32[($3_1 + 172 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 160 | 0) >> 2] = 0;
  HEAP32[($3_1 + 164 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 200 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (($23(0 | 0, $1_1 | 0, $3_1 + 200 | 0 | 0, $3_1 + 80 | 0 | 0, $3_1 + 160 | 0 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $0_1 = -1;
    break label$1;
   }
   $4_1 = HEAP32[$0_1 >> 2] | 0;
   label$3 : {
    if ((HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) > (0 | 0)) {
     break label$3
    }
    HEAP32[$0_1 >> 2] = $4_1 & -33 | 0;
   }
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       if (HEAP32[($0_1 + 44 | 0) >> 2] | 0) {
        break label$7
       }
       HEAP32[($0_1 + 44 | 0) >> 2] = 80;
       HEAP32[($0_1 + 24 | 0) >> 2] = 0;
       i64toi32_i32$1 = $0_1;
       i64toi32_i32$0 = 0;
       HEAP32[($0_1 + 16 | 0) >> 2] = 0;
       HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       $5_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       HEAP32[($0_1 + 40 | 0) >> 2] = $3_1;
       break label$6;
      }
      $5_1 = 0;
      if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
       break label$5
      }
     }
     $2_1 = -1;
     if ($6($0_1 | 0) | 0) {
      break label$4
     }
    }
    $2_1 = $23($0_1 | 0, $1_1 | 0, $3_1 + 200 | 0 | 0, $3_1 + 80 | 0 | 0, $3_1 + 160 | 0 | 0) | 0;
   }
   $1_1 = $4_1 & 32 | 0;
   label$8 : {
    if (!$5_1) {
     break label$8
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = 0;
    HEAP32[($0_1 + 40 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $2_1 = $5_1 ? $2_1 : -1;
   }
   $5_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $5_1 | $1_1 | 0;
   $0_1 = $5_1 & 32 | 0 ? -1 : $2_1;
  }
  global$0 = $3_1 + 208 | 0;
  return $0_1 | 0;
 }
 
 function $23($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $15_1 = 0, $18_1 = 0, $17_1 = 0, $16_1 = 0, $5_1 = 0, $19_1 = 0, $22_1 = 0, $23_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $35_1 = 0, $20_1 = 0, $25_1 = 0, i64toi32_i32$0 = 0, $21_1 = 0, i64toi32_i32$4 = 0, $31_1 = 0.0, $27_1 = 0, $24_1 = 0, i64toi32_i32$5 = 0, $26_1 = 0, $28_1 = 0, $29_1 = 0, $29$hi = 0, $14_1 = 0, $34_1 = 0.0, $12_1 = 0, $32_1 = 0, $13_1 = 0, $11_1 = 0, $33_1 = 0, $9_1 = 0, $30_1 = 0, $30$hi = 0, $36_1 = 0, i64toi32_i32$6 = 0, $38_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $37_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $344_1 = 0, $502_1 = 0, $502$hi = 0, $1377 = 0, $1379$hi = 0, $1381$hi = 0, $1383 = 0, $1383$hi = 0, $1385$hi = 0, $1389 = 0, $1389$hi = 0;
  $5_1 = global$0 - 880 | 0;
  global$0 = $5_1;
  $6_1 = $5_1 + 336 | 0 | 8 | 0;
  $7_1 = $5_1 + 55 | 0;
  $8_1 = -2 - ($5_1 + 336 | 0) | 0;
  $9_1 = $5_1 + 336 | 0 | 9 | 0;
  $10_1 = $5_1 + 656 | 0;
  $11_1 = ($5_1 + 324 | 0) + 12 | 0;
  $12_1 = $5_1 + 56 | 0;
  $13_1 = 0;
  $14_1 = 0;
  $15_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      $16_1 = $1_1;
      if (($15_1 | 0) > (2147483647 - $14_1 | 0 | 0)) {
       break label$3
      }
      $14_1 = $15_1 + $14_1 | 0;
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          $15_1 = HEAPU8[$16_1 >> 0] | 0;
          if (!$15_1) {
           break label$8
          }
          $1_1 = $16_1;
          label$9 : while (1) {
           label$10 : {
            label$11 : {
             label$12 : {
              $15_1 = $15_1 & 255 | 0;
              if (!$15_1) {
               break label$12
              }
              if (($15_1 | 0) != (37 | 0)) {
               break label$10
              }
              $17_1 = $1_1;
              $15_1 = $17_1;
              label$13 : while (1) {
               label$14 : {
                if ((HEAPU8[($15_1 + 1 | 0) >> 0] | 0 | 0) == (37 | 0)) {
                 break label$14
                }
                $1_1 = $15_1;
                break label$11;
               }
               $17_1 = $17_1 + 1 | 0;
               $18_1 = HEAPU8[($15_1 + 2 | 0) >> 0] | 0;
               $1_1 = $15_1 + 2 | 0;
               $15_1 = $1_1;
               if (($18_1 | 0) == (37 | 0)) {
                continue label$13
               }
               break label$11;
              };
             }
             $17_1 = $1_1;
            }
            $15_1 = $17_1 - $16_1 | 0;
            $17_1 = 2147483647 - $14_1 | 0;
            if (($15_1 | 0) > ($17_1 | 0)) {
             break label$3
            }
            label$15 : {
             if (!$0_1) {
              break label$15
             }
             if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
              break label$15
             }
             $8($16_1 | 0, $15_1 | 0, $0_1 | 0) | 0;
            }
            if ($15_1) {
             continue label$4
            }
            $15_1 = $1_1 + 1 | 0;
            label$16 : {
             label$17 : {
              $19_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
              $20_1 = $19_1 + -48 | 0;
              if ($20_1 >>> 0 <= 9 >>> 0) {
               break label$17
              }
              $21_1 = -1;
              break label$16;
             }
             $18_1 = (HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) == (36 | 0);
             $15_1 = $18_1 ? $1_1 + 3 | 0 : $15_1;
             $21_1 = $18_1 ? $20_1 : -1;
             $13_1 = $18_1 ? 1 : $13_1;
             $19_1 = HEAP8[($1_1 + ($18_1 ? 3 : 1) | 0) >> 0] | 0;
            }
            $22_1 = 0;
            label$18 : {
             $1_1 = $19_1 + -32 | 0;
             if ($1_1 >>> 0 > 31 >>> 0) {
              break label$18
             }
             $1_1 = 1 << $1_1 | 0;
             if (!($1_1 & 75913 | 0)) {
              break label$18
             }
             $18_1 = $15_1 + 1 | 0;
             $22_1 = 0;
             label$19 : while (1) {
              $22_1 = $1_1 | $22_1 | 0;
              $15_1 = $18_1;
              $19_1 = HEAP8[$15_1 >> 0] | 0;
              $1_1 = $19_1 + -32 | 0;
              if ($1_1 >>> 0 >= 32 >>> 0) {
               break label$18
              }
              $18_1 = $15_1 + 1 | 0;
              $1_1 = 1 << $1_1 | 0;
              if ($1_1 & 75913 | 0) {
               continue label$19
              }
              break label$19;
             };
            }
            label$20 : {
             label$21 : {
              if (($19_1 | 0) != (42 | 0)) {
               break label$21
              }
              label$22 : {
               label$23 : {
                $1_1 = (HEAP8[($15_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                if ($1_1 >>> 0 > 9 >>> 0) {
                 break label$23
                }
                if ((HEAPU8[($15_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                 break label$23
                }
                HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] = 10;
                $23_1 = $15_1 + 3 | 0;
                $20_1 = HEAP32[((((HEAP8[($15_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                $13_1 = 1;
                break label$22;
               }
               if ($13_1) {
                break label$7
               }
               $23_1 = $15_1 + 1 | 0;
               label$24 : {
                if ($0_1) {
                 break label$24
                }
                $13_1 = 0;
                $20_1 = 0;
                break label$20;
               }
               $1_1 = HEAP32[$2_1 >> 2] | 0;
               HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
               $20_1 = HEAP32[$1_1 >> 2] | 0;
               $13_1 = 0;
              }
              if (($20_1 | 0) > (-1 | 0)) {
               break label$20
              }
              $20_1 = 0 - $20_1 | 0;
              $22_1 = $22_1 | 8192 | 0;
              break label$20;
             }
             $20_1 = 0;
             label$25 : {
              $18_1 = $19_1 + -48 | 0;
              if ($18_1 >>> 0 <= 9 >>> 0) {
               break label$25
              }
              $23_1 = $15_1;
              break label$20;
             }
             $1_1 = 0;
             label$26 : while (1) {
              $20_1 = -1;
              label$27 : {
               if ($1_1 >>> 0 > 214748364 >>> 0) {
                break label$27
               }
               $1_1 = Math_imul($1_1, 10);
               $20_1 = ($18_1 | 0) > (2147483647 - $1_1 | 0 | 0) ? -1 : $1_1 + $18_1 | 0;
              }
              $18_1 = HEAP8[($15_1 + 1 | 0) >> 0] | 0;
              $23_1 = $15_1 + 1 | 0;
              $15_1 = $23_1;
              $1_1 = $20_1;
              $18_1 = $18_1 + -48 | 0;
              if ($18_1 >>> 0 < 10 >>> 0) {
               continue label$26
              }
              break label$26;
             };
             if (($20_1 | 0) < (0 | 0)) {
              break label$3
             }
            }
            $15_1 = 0;
            $19_1 = -1;
            label$28 : {
             label$29 : {
              if ((HEAPU8[$23_1 >> 0] | 0 | 0) == (46 | 0)) {
               break label$29
              }
              $1_1 = $23_1;
              $24_1 = 0;
              break label$28;
             }
             label$30 : {
              $18_1 = HEAP8[($23_1 + 1 | 0) >> 0] | 0;
              if (($18_1 | 0) != (42 | 0)) {
               break label$30
              }
              label$31 : {
               label$32 : {
                $1_1 = (HEAP8[($23_1 + 2 | 0) >> 0] | 0) + -48 | 0;
                if ($1_1 >>> 0 > 9 >>> 0) {
                 break label$32
                }
                if ((HEAPU8[($23_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                 break label$32
                }
                HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] = 10;
                $1_1 = $23_1 + 4 | 0;
                $19_1 = HEAP32[((((HEAP8[($23_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
                break label$31;
               }
               if ($13_1) {
                break label$7
               }
               $1_1 = $23_1 + 2 | 0;
               label$33 : {
                if ($0_1) {
                 break label$33
                }
                $19_1 = 0;
                break label$31;
               }
               $18_1 = HEAP32[$2_1 >> 2] | 0;
               HEAP32[$2_1 >> 2] = $18_1 + 4 | 0;
               $19_1 = HEAP32[$18_1 >> 2] | 0;
              }
              $24_1 = ($19_1 ^ -1 | 0) >>> 31 | 0;
              break label$28;
             }
             $1_1 = $23_1 + 1 | 0;
             label$34 : {
              $25_1 = $18_1 + -48 | 0;
              if ($25_1 >>> 0 <= 9 >>> 0) {
               break label$34
              }
              $24_1 = 1;
              $19_1 = 0;
              break label$28;
             }
             $23_1 = 0;
             $18_1 = $1_1;
             label$35 : while (1) {
              $19_1 = -1;
              label$36 : {
               if ($23_1 >>> 0 > 214748364 >>> 0) {
                break label$36
               }
               $1_1 = Math_imul($23_1, 10);
               $19_1 = ($25_1 | 0) > (2147483647 - $1_1 | 0 | 0) ? -1 : $1_1 + $25_1 | 0;
              }
              $24_1 = 1;
              $25_1 = HEAP8[($18_1 + 1 | 0) >> 0] | 0;
              $1_1 = $18_1 + 1 | 0;
              $18_1 = $1_1;
              $23_1 = $19_1;
              $25_1 = $25_1 + -48 | 0;
              if ($25_1 >>> 0 < 10 >>> 0) {
               continue label$35
              }
              break label$35;
             };
            }
            label$37 : while (1) {
             $18_1 = $15_1;
             $15_1 = (HEAP8[$1_1 >> 0] | 0) + -65 | 0;
             if ($15_1 >>> 0 > 57 >>> 0) {
              break label$7
             }
             $1_1 = $1_1 + 1 | 0;
             $15_1 = HEAPU8[((Math_imul($18_1, 58) + $15_1 | 0) + 4704 | 0) >> 0] | 0;
             if (($15_1 + -1 | 0) >>> 0 < 8 >>> 0) {
              continue label$37
             }
             break label$37;
            };
            if (!$15_1) {
             break label$7
            }
            label$38 : {
             label$39 : {
              label$40 : {
               label$41 : {
                if (($15_1 | 0) != (27 | 0)) {
                 break label$41
                }
                if (($21_1 | 0) <= (-1 | 0)) {
                 break label$40
                }
                break label$7;
               }
               if (($21_1 | 0) < (0 | 0)) {
                break label$39
               }
               HEAP32[($4_1 + ($21_1 << 2 | 0) | 0) >> 2] = $15_1;
               i64toi32_i32$2 = $3_1 + ($21_1 << 3 | 0) | 0;
               i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $344_1 = i64toi32_i32$0;
               i64toi32_i32$0 = $5_1;
               HEAP32[($5_1 + 56 | 0) >> 2] = $344_1;
               HEAP32[($5_1 + 60 | 0) >> 2] = i64toi32_i32$1;
              }
              $15_1 = 0;
              if (!$0_1) {
               continue label$4
              }
              break label$38;
             }
             label$42 : {
              if ($0_1) {
               break label$42
              }
              $14_1 = 0;
              break label$1;
             }
             $24($5_1 + 56 | 0 | 0, $15_1 | 0, $2_1 | 0);
            }
            $23_1 = $22_1 & -65537 | 0;
            $21_1 = $22_1 & 8192 | 0 ? $23_1 : $22_1;
            label$43 : {
             label$44 : {
              label$45 : {
               $15_1 = HEAP8[($1_1 + -1 | 0) >> 0] | 0;
               $26_1 = $18_1 ? (($15_1 & 15 | 0 | 0) == (3 | 0) ? $15_1 & -33 | 0 : $15_1) : $15_1;
               $15_1 = $26_1 + -65 | 0;
               if ($15_1 >>> 0 > 55 >>> 0) {
                break label$45
               }
               label$46 : {
                label$47 : {
                 label$48 : {
                  label$49 : {
                   label$50 : {
                    label$51 : {
                     label$52 : {
                      label$53 : {
                       label$54 : {
                        label$55 : {
                         label$56 : {
                          label$57 : {
                           switch ($15_1 | 0) {
                           case 52:
                            $27_1 = 0;
                            $28_1 = 4678;
                            i64toi32_i32$2 = $5_1;
                            i64toi32_i32$1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
                            i64toi32_i32$0 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
                            $29_1 = i64toi32_i32$1;
                            $29$hi = i64toi32_i32$0;
                            break label$56;
                           case 45:
                            $15_1 = 0;
                            $17_1 = $18_1 & 255 | 0;
                            if ($17_1 >>> 0 > 7 >>> 0) {
                             continue label$4
                            }
                            label$63 : {
                             switch ($17_1 | 0) {
                             default:
                              HEAP32[(HEAP32[($5_1 + 56 | 0) >> 2] | 0) >> 2] = $14_1;
                              continue label$4;
                             case 1:
                              HEAP32[(HEAP32[($5_1 + 56 | 0) >> 2] | 0) >> 2] = $14_1;
                              continue label$4;
                             case 2:
                              i64toi32_i32$1 = $14_1;
                              i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                              i64toi32_i32$1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
                              HEAP32[i64toi32_i32$1 >> 2] = $14_1;
                              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                              continue label$4;
                             case 3:
                              HEAP16[(HEAP32[($5_1 + 56 | 0) >> 2] | 0) >> 1] = $14_1;
                              continue label$4;
                             case 4:
                              HEAP8[(HEAP32[($5_1 + 56 | 0) >> 2] | 0) >> 0] = $14_1;
                              continue label$4;
                             case 6:
                              HEAP32[(HEAP32[($5_1 + 56 | 0) >> 2] | 0) >> 2] = $14_1;
                              continue label$4;
                             case 5:
                              continue label$4;
                             case 7:
                              break label$63;
                             };
                            }
                            i64toi32_i32$1 = $14_1;
                            i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                            i64toi32_i32$1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
                            HEAP32[i64toi32_i32$1 >> 2] = $14_1;
                            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                            continue label$4;
                           case 47:
                            $19_1 = $19_1 >>> 0 > 8 >>> 0 ? $19_1 : 8;
                            $21_1 = $21_1 | 8 | 0;
                            $26_1 = 120;
                           case 23:
                           case 55:
                            $27_1 = 0;
                            $28_1 = 4678;
                            label$70 : {
                             i64toi32_i32$2 = $5_1;
                             i64toi32_i32$0 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
                             i64toi32_i32$1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
                             $29_1 = i64toi32_i32$0;
                             $29$hi = i64toi32_i32$1;
                             if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
                              break label$70
                             }
                             $16_1 = $12_1;
                             break label$55;
                            }
                            $15_1 = $26_1 & 32 | 0;
                            $16_1 = $12_1;
                            label$71 : while (1) {
                             $16_1 = $16_1 + -1 | 0;
                             i64toi32_i32$1 = $29$hi;
                             HEAP8[$16_1 >> 0] = HEAPU8[(($29_1 & 15 | 0) + 5312 | 0) >> 0] | 0 | $15_1 | 0;
                             i64toi32_i32$2 = $29_1;
                             i64toi32_i32$0 = 0;
                             i64toi32_i32$3 = 4;
                             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
                             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                              i64toi32_i32$0 = 0;
                              $59_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                             } else {
                              i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                              $59_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
                             }
                             $29_1 = $59_1;
                             $29$hi = i64toi32_i32$0;
                             i64toi32_i32$1 = $29_1;
                             i64toi32_i32$2 = 0;
                             i64toi32_i32$3 = 0;
                             if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
                              continue label$71
                             }
                             break label$71;
                            };
                            if (!($21_1 & 8 | 0)) {
                             break label$55
                            }
                            i64toi32_i32$3 = $5_1;
                            i64toi32_i32$1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
                            i64toi32_i32$0 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
                            if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                             break label$55
                            }
                            $28_1 = ($26_1 >> 4 | 0) + 4678 | 0;
                            $27_1 = 2;
                            break label$55;
                           case 46:
                            $16_1 = $12_1;
                            label$72 : {
                             i64toi32_i32$3 = $5_1;
                             i64toi32_i32$0 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
                             i64toi32_i32$1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
                             $29_1 = i64toi32_i32$0;
                             $29$hi = i64toi32_i32$1;
                             if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
                              break label$72
                             }
                             $16_1 = $12_1;
                             label$73 : while (1) {
                              $16_1 = $16_1 + -1 | 0;
                              i64toi32_i32$1 = $29$hi;
                              HEAP8[$16_1 >> 0] = $29_1 & 7 | 0 | 48 | 0;
                              i64toi32_i32$3 = $29_1;
                              i64toi32_i32$0 = 0;
                              i64toi32_i32$2 = 3;
                              i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
                              if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                               i64toi32_i32$0 = 0;
                               $60_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                              } else {
                               i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                               $60_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
                              }
                              $29_1 = $60_1;
                              $29$hi = i64toi32_i32$0;
                              i64toi32_i32$1 = $29_1;
                              i64toi32_i32$3 = 0;
                              i64toi32_i32$2 = 0;
                              if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
                               continue label$73
                              }
                              break label$73;
                             };
                            }
                            $27_1 = 0;
                            $28_1 = 4678;
                            if (!($21_1 & 8 | 0)) {
                             break label$55
                            }
                            $15_1 = $12_1 - $16_1 | 0;
                            $19_1 = ($19_1 | 0) > ($15_1 | 0) ? $19_1 : $15_1 + 1 | 0;
                            break label$55;
                           case 1:
                           case 3:
                           case 7:
                           case 8:
                           case 9:
                           case 10:
                           case 11:
                           case 12:
                           case 13:
                           case 14:
                           case 15:
                           case 16:
                           case 17:
                           case 19:
                           case 20:
                           case 21:
                           case 22:
                           case 24:
                           case 25:
                           case 26:
                           case 27:
                           case 28:
                           case 29:
                           case 30:
                           case 31:
                           case 33:
                           case 39:
                           case 41:
                           case 42:
                           case 43:
                           case 48:
                           case 49:
                           case 51:
                           case 53:
                           case 54:
                            break label$45;
                           case 2:
                            break label$49;
                           case 18:
                            break label$50;
                           case 50:
                            break label$52;
                           case 44:
                            break label$53;
                           case 34:
                            break label$54;
                           case 35:
                           case 40:
                            break label$57;
                           default:
                            break label$46;
                           };
                          }
                          label$74 : {
                           i64toi32_i32$2 = $5_1;
                           i64toi32_i32$1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
                           i64toi32_i32$0 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
                           $29_1 = i64toi32_i32$1;
                           $29$hi = i64toi32_i32$0;
                           i64toi32_i32$2 = i64toi32_i32$1;
                           i64toi32_i32$1 = -1;
                           i64toi32_i32$3 = -1;
                           if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                            $61_1 = 1
                           } else {
                            if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                             if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                              $62_1 = 0
                             } else {
                              $62_1 = 1
                             }
                             $63_1 = $62_1;
                            } else {
                             $63_1 = 0
                            }
                            $61_1 = $63_1;
                           }
                           if ($61_1) {
                            break label$74
                           }
                           i64toi32_i32$2 = $29$hi;
                           i64toi32_i32$2 = 0;
                           i64toi32_i32$3 = 0;
                           i64toi32_i32$0 = $29$hi;
                           i64toi32_i32$1 = $29_1;
                           i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                           i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
                           i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
                           i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                           $29_1 = i64toi32_i32$4;
                           $29$hi = i64toi32_i32$5;
                           i64toi32_i32$3 = $5_1;
                           HEAP32[($5_1 + 56 | 0) >> 2] = i64toi32_i32$4;
                           HEAP32[($5_1 + 60 | 0) >> 2] = i64toi32_i32$5;
                           $27_1 = 1;
                           $28_1 = 4678;
                           break label$56;
                          }
                          label$75 : {
                           if (!($21_1 & 2048 | 0)) {
                            break label$75
                           }
                           $27_1 = 1;
                           $28_1 = 4679;
                           break label$56;
                          }
                          $27_1 = $21_1 & 1 | 0;
                          $28_1 = $27_1 ? 4680 : 4678;
                         }
                         label$76 : {
                          label$77 : {
                           i64toi32_i32$5 = $29$hi;
                           i64toi32_i32$2 = $29_1;
                           i64toi32_i32$3 = 1;
                           i64toi32_i32$1 = 0;
                           if (i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
                            break label$77
                           }
                           i64toi32_i32$2 = $29$hi;
                           $30_1 = $29_1;
                           $30$hi = i64toi32_i32$2;
                           $16_1 = $12_1;
                           break label$76;
                          }
                          $16_1 = $12_1;
                          label$78 : while (1) {
                           $16_1 = $16_1 + -1 | 0;
                           i64toi32_i32$2 = $29$hi;
                           i64toi32_i32$5 = 0;
                           i64toi32_i32$5 = __wasm_i64_udiv($29_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
                           i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                           $30_1 = i64toi32_i32$5;
                           $30$hi = i64toi32_i32$2;
                           i64toi32_i32$5 = 0;
                           i64toi32_i32$5 = __wasm_i64_mul($30_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
                           i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
                           $502_1 = i64toi32_i32$5;
                           $502$hi = i64toi32_i32$2;
                           i64toi32_i32$2 = $29$hi;
                           i64toi32_i32$1 = $29_1;
                           i64toi32_i32$5 = $502$hi;
                           i64toi32_i32$3 = $502_1;
                           i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
                           i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
                           i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                           i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
                           HEAP8[$16_1 >> 0] = i64toi32_i32$0 | 48 | 0;
                           i64toi32_i32$4 = i64toi32_i32$2;
                           i64toi32_i32$4 = i64toi32_i32$2;
                           i64toi32_i32$2 = i64toi32_i32$1;
                           i64toi32_i32$1 = 9;
                           i64toi32_i32$3 = -1;
                           $15_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
                           i64toi32_i32$2 = $30$hi;
                           $29_1 = $30_1;
                           $29$hi = i64toi32_i32$2;
                           if ($15_1) {
                            continue label$78
                           }
                           break label$78;
                          };
                         }
                         i64toi32_i32$2 = $30$hi;
                         $15_1 = $30_1;
                         if (!$15_1) {
                          break label$55
                         }
                         label$79 : while (1) {
                          $16_1 = $16_1 + -1 | 0;
                          $18_1 = ($15_1 >>> 0) / (10 >>> 0) | 0;
                          HEAP8[$16_1 >> 0] = $15_1 - Math_imul($18_1, 10) | 0 | 48 | 0;
                          $22_1 = $15_1 >>> 0 > 9 >>> 0;
                          $15_1 = $18_1;
                          if ($22_1) {
                           continue label$79
                          }
                          break label$79;
                         };
                        }
                        label$80 : {
                         if (!$24_1) {
                          break label$80
                         }
                         if (($19_1 | 0) < (0 | 0)) {
                          break label$3
                         }
                        }
                        $21_1 = $24_1 ? $21_1 & -65537 | 0 : $21_1;
                        i64toi32_i32$3 = $5_1;
                        i64toi32_i32$2 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
                        i64toi32_i32$4 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
                        $29_1 = i64toi32_i32$2;
                        $29$hi = i64toi32_i32$4;
                        label$81 : {
                         if ($19_1) {
                          break label$81
                         }
                         i64toi32_i32$4 = $29$hi;
                         if (!!($29_1 | i64toi32_i32$4 | 0)) {
                          break label$81
                         }
                         $16_1 = $12_1;
                         $15_1 = $16_1;
                         $19_1 = 0;
                         break label$5;
                        }
                        i64toi32_i32$4 = $29$hi;
                        $15_1 = ($12_1 - $16_1 | 0) + !($29_1 | i64toi32_i32$4 | 0) | 0;
                        $19_1 = ($19_1 | 0) > ($15_1 | 0) ? $19_1 : $15_1;
                        break label$44;
                       }
                       i64toi32_i32$3 = $5_1;
                       i64toi32_i32$4 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
                       i64toi32_i32$2 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
                       HEAP8[($5_1 + 55 | 0) >> 0] = i64toi32_i32$4;
                       $27_1 = 0;
                       $28_1 = 4678;
                       $19_1 = 1;
                       $16_1 = $7_1;
                       $15_1 = $12_1;
                       $21_1 = $23_1;
                       break label$5;
                      }
                      $16_1 = $12(HEAP32[(0 + 1024 | 0) >> 2] | 0 | 0) | 0;
                      break label$51;
                     }
                     $15_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
                     $16_1 = $15_1 ? $15_1 : 4688;
                    }
                    $27_1 = 0;
                    $18_1 = $14($16_1 | 0, (($19_1 | 0) < (0 | 0) ? 2147483647 : $19_1) | 0) | 0;
                    $15_1 = $16_1 + $18_1 | 0;
                    $28_1 = 4678;
                    if (($19_1 | 0) <= (-1 | 0)) {
                     break label$43
                    }
                    $21_1 = $23_1;
                    $19_1 = $18_1;
                    break label$5;
                   }
                   $16_1 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
                   if ($19_1) {
                    break label$48
                   }
                   $15_1 = 0;
                   break label$47;
                  }
                  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
                  i64toi32_i32$3 = $5_1;
                  i64toi32_i32$2 = HEAP32[($5_1 + 56 | 0) >> 2] | 0;
                  i64toi32_i32$4 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
                  HEAP32[($5_1 + 8 | 0) >> 2] = i64toi32_i32$2;
                  HEAP32[($5_1 + 56 | 0) >> 2] = $5_1 + 8 | 0;
                  $19_1 = -1;
                  $16_1 = $5_1 + 8 | 0;
                 }
                 $15_1 = 0;
                 $17_1 = $16_1;
                 label$82 : {
                  label$83 : while (1) {
                   $18_1 = HEAP32[$17_1 >> 2] | 0;
                   if (!$18_1) {
                    break label$82
                   }
                   label$84 : {
                    $18_1 = $16($5_1 + 4 | 0 | 0, $18_1 | 0) | 0;
                    $22_1 = ($18_1 | 0) < (0 | 0);
                    if ($22_1) {
                     break label$84
                    }
                    if ($18_1 >>> 0 > ($19_1 - $15_1 | 0) >>> 0) {
                     break label$84
                    }
                    $17_1 = $17_1 + 4 | 0;
                    $15_1 = $18_1 + $15_1 | 0;
                    if ($19_1 >>> 0 > $15_1 >>> 0) {
                     continue label$83
                    }
                    break label$82;
                   }
                   break label$83;
                  };
                  if ($22_1) {
                   break label$2
                  }
                 }
                 if (($15_1 | 0) < (0 | 0)) {
                  break label$3
                 }
                }
                label$85 : {
                 $23_1 = $21_1 & 73728 | 0;
                 if ($23_1) {
                  break label$85
                 }
                 if (($20_1 | 0) <= ($15_1 | 0)) {
                  break label$85
                 }
                 $25_1 = $20_1 - $15_1 | 0;
                 $17_1 = $25_1 >>> 0 < 256 >>> 0;
                 $17($5_1 + 64 | 0 | 0, 32 | 0, ($17_1 ? $25_1 : 256) | 0) | 0;
                 $19_1 = HEAP32[$0_1 >> 2] | 0;
                 $18_1 = $19_1 & 32 | 0;
                 label$86 : {
                  label$87 : {
                   if ($17_1) {
                    break label$87
                   }
                   $17_1 = !$18_1;
                   $18_1 = $25_1;
                   label$88 : while (1) {
                    label$89 : {
                     if (!($17_1 & 1 | 0)) {
                      break label$89
                     }
                     $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
                     $19_1 = HEAP32[$0_1 >> 2] | 0;
                    }
                    $22_1 = $19_1 & 32 | 0;
                    $17_1 = !$22_1;
                    $18_1 = $18_1 + -256 | 0;
                    if ($18_1 >>> 0 > 255 >>> 0) {
                     continue label$88
                    }
                    break label$88;
                   };
                   if ($22_1) {
                    break label$85
                   }
                   $25_1 = $25_1 & 255 | 0;
                   break label$86;
                  }
                  if ($18_1) {
                   break label$85
                  }
                 }
                 $8($5_1 + 64 | 0 | 0, $25_1 | 0, $0_1 | 0) | 0;
                }
                label$90 : {
                 if (!$15_1) {
                  break label$90
                 }
                 $17_1 = 0;
                 label$91 : while (1) {
                  $18_1 = HEAP32[$16_1 >> 2] | 0;
                  if (!$18_1) {
                   break label$90
                  }
                  $18_1 = $16($5_1 + 4 | 0 | 0, $18_1 | 0) | 0;
                  $17_1 = $18_1 + $17_1 | 0;
                  if ($17_1 >>> 0 > $15_1 >>> 0) {
                   break label$90
                  }
                  label$92 : {
                   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                    break label$92
                   }
                   $8($5_1 + 4 | 0 | 0, $18_1 | 0, $0_1 | 0) | 0;
                  }
                  $16_1 = $16_1 + 4 | 0;
                  if ($17_1 >>> 0 < $15_1 >>> 0) {
                   continue label$91
                  }
                  break label$91;
                 };
                }
                label$93 : {
                 if (($23_1 | 0) != (8192 | 0)) {
                  break label$93
                 }
                 if (($20_1 | 0) <= ($15_1 | 0)) {
                  break label$93
                 }
                 $22_1 = $20_1 - $15_1 | 0;
                 $17_1 = $22_1 >>> 0 < 256 >>> 0;
                 $17($5_1 + 64 | 0 | 0, 32 | 0, ($17_1 ? $22_1 : 256) | 0) | 0;
                 $16_1 = HEAP32[$0_1 >> 2] | 0;
                 $18_1 = $16_1 & 32 | 0;
                 label$94 : {
                  label$95 : {
                   if ($17_1) {
                    break label$95
                   }
                   $17_1 = !$18_1;
                   $18_1 = $22_1;
                   label$96 : while (1) {
                    label$97 : {
                     if (!($17_1 & 1 | 0)) {
                      break label$97
                     }
                     $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
                     $16_1 = HEAP32[$0_1 >> 2] | 0;
                    }
                    $19_1 = $16_1 & 32 | 0;
                    $17_1 = !$19_1;
                    $18_1 = $18_1 + -256 | 0;
                    if ($18_1 >>> 0 > 255 >>> 0) {
                     continue label$96
                    }
                    break label$96;
                   };
                   if ($19_1) {
                    break label$93
                   }
                   $22_1 = $22_1 & 255 | 0;
                   break label$94;
                  }
                  if ($18_1) {
                   break label$93
                  }
                 }
                 $8($5_1 + 64 | 0 | 0, $22_1 | 0, $0_1 | 0) | 0;
                }
                $15_1 = ($20_1 | 0) > ($15_1 | 0) ? $20_1 : $15_1;
                continue label$4;
               }
               label$98 : {
                if (($19_1 | 0) > (-1 | 0)) {
                 break label$98
                }
                if ($24_1) {
                 break label$3
                }
               }
               $31_1 = +HEAPF64[($5_1 + 56 | 0) >> 3];
               HEAP32[($5_1 + 364 | 0) >> 2] = 0;
               label$99 : {
                label$100 : {
                 wasm2js_scratch_store_f64(+$31_1);
                 i64toi32_i32$4 = wasm2js_scratch_load_i32(1 | 0) | 0;
                 i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
                 i64toi32_i32$2 = -1;
                 i64toi32_i32$1 = -1;
                 if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
                  $64_1 = 1
                 } else {
                  if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
                   if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$1 >>> 0) {
                    $65_1 = 0
                   } else {
                    $65_1 = 1
                   }
                   $66_1 = $65_1;
                  } else {
                   $66_1 = 0
                  }
                  $64_1 = $66_1;
                 }
                 if ($64_1) {
                  break label$100
                 }
                 $31_1 = -$31_1;
                 $32_1 = 1;
                 $33_1 = 5328;
                 break label$99;
                }
                label$101 : {
                 if (!($21_1 & 2048 | 0)) {
                  break label$101
                 }
                 $32_1 = 1;
                 $33_1 = 5331;
                 break label$99;
                }
                $32_1 = $21_1 & 1 | 0;
                $33_1 = $32_1 ? 5334 : 5329;
               }
               label$102 : {
                label$103 : {
                 $34_1 = Math_abs($31_1);
                 if ($34_1 != infinity & $34_1 == $34_1 | 0) {
                  break label$103
                 }
                 $19_1 = $32_1 + 3 | 0;
                 label$104 : {
                  if ($21_1 & 8192 | 0) {
                   break label$104
                  }
                  if (($20_1 | 0) <= ($19_1 | 0)) {
                   break label$104
                  }
                  $22_1 = $20_1 - $19_1 | 0;
                  $15_1 = $22_1 >>> 0 < 256 >>> 0;
                  $17($5_1 + 64 | 0 | 0, 32 | 0, ($15_1 ? $22_1 : 256) | 0) | 0;
                  $18_1 = HEAP32[$0_1 >> 2] | 0;
                  $17_1 = $18_1 & 32 | 0;
                  label$105 : {
                   label$106 : {
                    if ($15_1) {
                     break label$106
                    }
                    $15_1 = !$17_1;
                    $17_1 = $22_1;
                    label$107 : while (1) {
                     label$108 : {
                      if (!($15_1 & 1 | 0)) {
                       break label$108
                      }
                      $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
                      $18_1 = HEAP32[$0_1 >> 2] | 0;
                     }
                     $16_1 = $18_1 & 32 | 0;
                     $15_1 = !$16_1;
                     $17_1 = $17_1 + -256 | 0;
                     if ($17_1 >>> 0 > 255 >>> 0) {
                      continue label$107
                     }
                     break label$107;
                    };
                    if ($16_1) {
                     break label$104
                    }
                    $22_1 = $22_1 & 255 | 0;
                    break label$105;
                   }
                   if ($17_1) {
                    break label$104
                   }
                  }
                  $8($5_1 + 64 | 0 | 0, $22_1 | 0, $0_1 | 0) | 0;
                 }
                 label$109 : {
                  $15_1 = HEAP32[$0_1 >> 2] | 0;
                  if ($15_1 & 32 | 0) {
                   break label$109
                  }
                  $8($33_1 | 0, $32_1 | 0, $0_1 | 0) | 0;
                  $15_1 = HEAP32[$0_1 >> 2] | 0;
                 }
                 label$110 : {
                  if ($15_1 & 32 | 0) {
                   break label$110
                  }
                  $15_1 = ($26_1 & 32 | 0) >>> 5 | 0;
                  $8(($31_1 != $31_1 ? ($15_1 ? 5355 : 5359) : $15_1 ? 5347 : 5351) | 0, 3 | 0, $0_1 | 0) | 0;
                 }
                 label$111 : {
                  if (($21_1 & 73728 | 0 | 0) != (8192 | 0)) {
                   break label$111
                  }
                  if (($20_1 | 0) <= ($19_1 | 0)) {
                   break label$111
                  }
                  $22_1 = $20_1 - $19_1 | 0;
                  $15_1 = $22_1 >>> 0 < 256 >>> 0;
                  $17($5_1 + 64 | 0 | 0, 32 | 0, ($15_1 ? $22_1 : 256) | 0) | 0;
                  $18_1 = HEAP32[$0_1 >> 2] | 0;
                  $17_1 = $18_1 & 32 | 0;
                  label$112 : {
                   label$113 : {
                    if ($15_1) {
                     break label$113
                    }
                    $15_1 = !$17_1;
                    $17_1 = $22_1;
                    label$114 : while (1) {
                     label$115 : {
                      if (!($15_1 & 1 | 0)) {
                       break label$115
                      }
                      $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
                      $18_1 = HEAP32[$0_1 >> 2] | 0;
                     }
                     $16_1 = $18_1 & 32 | 0;
                     $15_1 = !$16_1;
                     $17_1 = $17_1 + -256 | 0;
                     if ($17_1 >>> 0 > 255 >>> 0) {
                      continue label$114
                     }
                     break label$114;
                    };
                    if ($16_1) {
                     break label$111
                    }
                    $22_1 = $22_1 & 255 | 0;
                    break label$112;
                   }
                   if ($17_1) {
                    break label$111
                   }
                  }
                  $8($5_1 + 64 | 0 | 0, $22_1 | 0, $0_1 | 0) | 0;
                 }
                 $15_1 = ($20_1 | 0) > ($19_1 | 0) ? $20_1 : $19_1;
                 break label$102;
                }
                label$116 : {
                 $31_1 = +$18(+$31_1, $5_1 + 364 | 0 | 0);
                 $31_1 = $31_1 + $31_1;
                 if ($31_1 == 0.0) {
                  break label$116
                 }
                 HEAP32[($5_1 + 364 | 0) >> 2] = (HEAP32[($5_1 + 364 | 0) >> 2] | 0) + -1 | 0;
                }
                label$117 : {
                 $28_1 = $26_1 | 32 | 0;
                 if (($28_1 | 0) != (97 | 0)) {
                  break label$117
                 }
                 $22_1 = $26_1 & 32 | 0;
                 $27_1 = $22_1 ? $33_1 + 9 | 0 : $33_1;
                 label$118 : {
                  if ($19_1 >>> 0 > 11 >>> 0) {
                   break label$118
                  }
                  if (!(12 - $19_1 | 0)) {
                   break label$118
                  }
                  $15_1 = $19_1 + -12 | 0;
                  $34_1 = 16.0;
                  label$119 : while (1) {
                   $34_1 = $34_1 * 16.0;
                   $17_1 = $15_1 + 1 | 0;
                   $18_1 = $17_1 >>> 0 >= $15_1 >>> 0;
                   $15_1 = $17_1;
                   if ($18_1) {
                    continue label$119
                   }
                   break label$119;
                  };
                  label$120 : {
                   if ((HEAPU8[$27_1 >> 0] | 0 | 0) != (45 | 0)) {
                    break label$120
                   }
                   $31_1 = -($34_1 + (-$31_1 - $34_1));
                   break label$118;
                  }
                  $31_1 = $31_1 + $34_1 - $34_1;
                 }
                 $18_1 = $11_1;
                 label$121 : {
                  label$122 : {
                   $23_1 = HEAP32[($5_1 + 364 | 0) >> 2] | 0;
                   $15_1 = $23_1 >> 31 | 0;
                   $15_1 = ($23_1 + $15_1 | 0) ^ $15_1 | 0;
                   if (!$15_1) {
                    break label$122
                   }
                   $17_1 = 0;
                   label$123 : while (1) {
                    $18_1 = ($15_1 >>> 0) / (10 >>> 0) | 0;
                    HEAP8[((($5_1 + 324 | 0) + $17_1 | 0) + 11 | 0) >> 0] = $15_1 - Math_imul($18_1, 10) | 0 | 48 | 0;
                    $17_1 = $17_1 + -1 | 0;
                    $16_1 = $15_1 >>> 0 > 9 >>> 0;
                    $15_1 = $18_1;
                    if ($16_1) {
                     continue label$123
                    }
                    break label$123;
                   };
                   $18_1 = (($5_1 + 324 | 0) + $17_1 | 0) + 12 | 0;
                   if ($17_1) {
                    break label$121
                   }
                  }
                  $18_1 = $18_1 + -1 | 0;
                  HEAP8[$18_1 >> 0] = 48;
                 }
                 $25_1 = $32_1 | 2 | 0;
                 $24_1 = $18_1 + -2 | 0;
                 HEAP8[$24_1 >> 0] = $26_1 + 15 | 0;
                 HEAP8[($18_1 + -1 | 0) >> 0] = ($23_1 | 0) < (0 | 0) ? 45 : 43;
                 $18_1 = $21_1 & 8 | 0;
                 $17_1 = $5_1 + 336 | 0;
                 label$124 : while (1) {
                  $15_1 = $17_1;
                  label$125 : {
                   label$126 : {
                    if (!(Math_abs($31_1) < 2147483648.0)) {
                     break label$126
                    }
                    $17_1 = ~~$31_1;
                    break label$125;
                   }
                   $17_1 = -2147483648;
                  }
                  HEAP8[$15_1 >> 0] = HEAPU8[($17_1 + 5312 | 0) >> 0] | 0 | $22_1 | 0;
                  $31_1 = ($31_1 - +($17_1 | 0)) * 16.0;
                  label$127 : {
                   $17_1 = $15_1 + 1 | 0;
                   if (($17_1 - ($5_1 + 336 | 0) | 0 | 0) != (1 | 0)) {
                    break label$127
                   }
                   label$128 : {
                    if ($18_1) {
                     break label$128
                    }
                    if (($19_1 | 0) > (0 | 0)) {
                     break label$128
                    }
                    if ($31_1 == 0.0) {
                     break label$127
                    }
                   }
                   HEAP8[($15_1 + 1 | 0) >> 0] = 46;
                   $17_1 = $15_1 + 2 | 0;
                  }
                  if ($31_1 != 0.0) {
                   continue label$124
                  }
                  break label$124;
                 };
                 $15_1 = -1;
                 $26_1 = $11_1 - $24_1 | 0;
                 $18_1 = $25_1 + $26_1 | 0;
                 if ((2147483645 - $18_1 | 0 | 0) < ($19_1 | 0)) {
                  break label$102
                 }
                 $22_1 = $17_1 - ($5_1 + 336 | 0) | 0;
                 $35_1 = $19_1 ? (($8_1 + $17_1 | 0 | 0) < ($19_1 | 0) ? $19_1 + 2 | 0 : $22_1) : $22_1;
                 $19_1 = $18_1 + $35_1 | 0;
                 label$129 : {
                  $23_1 = $21_1 & 73728 | 0;
                  if ($23_1) {
                   break label$129
                  }
                  if (($20_1 | 0) <= ($19_1 | 0)) {
                   break label$129
                  }
                  $21_1 = $20_1 - $19_1 | 0;
                  $15_1 = $21_1 >>> 0 < 256 >>> 0;
                  $17($5_1 + 64 | 0 | 0, 32 | 0, ($15_1 ? $21_1 : 256) | 0) | 0;
                  $18_1 = HEAP32[$0_1 >> 2] | 0;
                  $17_1 = $18_1 & 32 | 0;
                  label$130 : {
                   label$131 : {
                    if ($15_1) {
                     break label$131
                    }
                    $15_1 = !$17_1;
                    $17_1 = $21_1;
                    label$132 : while (1) {
                     label$133 : {
                      if (!($15_1 & 1 | 0)) {
                       break label$133
                      }
                      $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
                      $18_1 = HEAP32[$0_1 >> 2] | 0;
                     }
                     $16_1 = $18_1 & 32 | 0;
                     $15_1 = !$16_1;
                     $17_1 = $17_1 + -256 | 0;
                     if ($17_1 >>> 0 > 255 >>> 0) {
                      continue label$132
                     }
                     break label$132;
                    };
                    if ($16_1) {
                     break label$129
                    }
                    $21_1 = $21_1 & 255 | 0;
                    break label$130;
                   }
                   if ($17_1) {
                    break label$129
                   }
                  }
                  $8($5_1 + 64 | 0 | 0, $21_1 | 0, $0_1 | 0) | 0;
                 }
                 label$134 : {
                  if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                   break label$134
                  }
                  $8($27_1 | 0, $25_1 | 0, $0_1 | 0) | 0;
                 }
                 label$135 : {
                  if (($23_1 | 0) != (65536 | 0)) {
                   break label$135
                  }
                  if (($20_1 | 0) <= ($19_1 | 0)) {
                   break label$135
                  }
                  $25_1 = $20_1 - $19_1 | 0;
                  $15_1 = $25_1 >>> 0 < 256 >>> 0;
                  $17($5_1 + 64 | 0 | 0, 48 | 0, ($15_1 ? $25_1 : 256) | 0) | 0;
                  $18_1 = HEAP32[$0_1 >> 2] | 0;
                  $17_1 = $18_1 & 32 | 0;
                  label$136 : {
                   label$137 : {
                    if ($15_1) {
                     break label$137
                    }
                    $15_1 = !$17_1;
                    $17_1 = $25_1;
                    label$138 : while (1) {
                     label$139 : {
                      if (!($15_1 & 1 | 0)) {
                       break label$139
                      }
                      $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
                      $18_1 = HEAP32[$0_1 >> 2] | 0;
                     }
                     $16_1 = $18_1 & 32 | 0;
                     $15_1 = !$16_1;
                     $17_1 = $17_1 + -256 | 0;
                     if ($17_1 >>> 0 > 255 >>> 0) {
                      continue label$138
                     }
                     break label$138;
                    };
                    if ($16_1) {
                     break label$135
                    }
                    $25_1 = $25_1 & 255 | 0;
                    break label$136;
                   }
                   if ($17_1) {
                    break label$135
                   }
                  }
                  $8($5_1 + 64 | 0 | 0, $25_1 | 0, $0_1 | 0) | 0;
                 }
                 label$140 : {
                  if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                   break label$140
                  }
                  $8($5_1 + 336 | 0 | 0, $22_1 | 0, $0_1 | 0) | 0;
                 }
                 label$141 : {
                  $22_1 = $35_1 - $22_1 | 0;
                  if (($22_1 | 0) < (1 | 0)) {
                   break label$141
                  }
                  $15_1 = $22_1 >>> 0 < 256 >>> 0;
                  $17($5_1 + 64 | 0 | 0, 48 | 0, ($15_1 ? $22_1 : 256) | 0) | 0;
                  $18_1 = HEAP32[$0_1 >> 2] | 0;
                  $17_1 = $18_1 & 32 | 0;
                  label$142 : {
                   label$143 : {
                    if ($15_1) {
                     break label$143
                    }
                    $15_1 = !$17_1;
                    $17_1 = $22_1;
                    label$144 : while (1) {
                     label$145 : {
                      if (!($15_1 & 1 | 0)) {
                       break label$145
                      }
                      $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
                      $18_1 = HEAP32[$0_1 >> 2] | 0;
                     }
                     $16_1 = $18_1 & 32 | 0;
                     $15_1 = !$16_1;
                     $17_1 = $17_1 + -256 | 0;
                     if ($17_1 >>> 0 > 255 >>> 0) {
                      continue label$144
                     }
                     break label$144;
                    };
                    if ($16_1) {
                     break label$141
                    }
                    $22_1 = $22_1 & 255 | 0;
                    break label$142;
                   }
                   if ($17_1) {
                    break label$141
                   }
                  }
                  $8($5_1 + 64 | 0 | 0, $22_1 | 0, $0_1 | 0) | 0;
                 }
                 label$146 : {
                  if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                   break label$146
                  }
                  $8($24_1 | 0, $26_1 | 0, $0_1 | 0) | 0;
                 }
                 label$147 : {
                  if (($23_1 | 0) != (8192 | 0)) {
                   break label$147
                  }
                  if (($20_1 | 0) <= ($19_1 | 0)) {
                   break label$147
                  }
                  $22_1 = $20_1 - $19_1 | 0;
                  $15_1 = $22_1 >>> 0 < 256 >>> 0;
                  $17($5_1 + 64 | 0 | 0, 32 | 0, ($15_1 ? $22_1 : 256) | 0) | 0;
                  $18_1 = HEAP32[$0_1 >> 2] | 0;
                  $17_1 = $18_1 & 32 | 0;
                  label$148 : {
                   label$149 : {
                    if ($15_1) {
                     break label$149
                    }
                    $15_1 = !$17_1;
                    $17_1 = $22_1;
                    label$150 : while (1) {
                     label$151 : {
                      if (!($15_1 & 1 | 0)) {
                       break label$151
                      }
                      $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
                      $18_1 = HEAP32[$0_1 >> 2] | 0;
                     }
                     $16_1 = $18_1 & 32 | 0;
                     $15_1 = !$16_1;
                     $17_1 = $17_1 + -256 | 0;
                     if ($17_1 >>> 0 > 255 >>> 0) {
                      continue label$150
                     }
                     break label$150;
                    };
                    if ($16_1) {
                     break label$147
                    }
                    $22_1 = $22_1 & 255 | 0;
                    break label$148;
                   }
                   if ($17_1) {
                    break label$147
                   }
                  }
                  $8($5_1 + 64 | 0 | 0, $22_1 | 0, $0_1 | 0) | 0;
                 }
                 $15_1 = ($20_1 | 0) > ($19_1 | 0) ? $20_1 : $19_1;
                 break label$102;
                }
                $15_1 = ($19_1 | 0) < (0 | 0);
                label$152 : {
                 label$153 : {
                  if ($31_1 != 0.0) {
                   break label$153
                  }
                  $16_1 = HEAP32[($5_1 + 364 | 0) >> 2] | 0;
                  break label$152;
                 }
                 $16_1 = (HEAP32[($5_1 + 364 | 0) >> 2] | 0) + -28 | 0;
                 HEAP32[($5_1 + 364 | 0) >> 2] = $16_1;
                 $31_1 = $31_1 * 268435456.0;
                }
                $35_1 = $15_1 ? 6 : $19_1;
                $27_1 = ($16_1 | 0) < (0 | 0) ? $5_1 + 368 | 0 : $10_1;
                $18_1 = $27_1;
                label$154 : while (1) {
                 label$155 : {
                  label$156 : {
                   if (!($31_1 < 4294967296.0 & $31_1 >= 0.0 | 0)) {
                    break label$156
                   }
                   $15_1 = ~~$31_1 >>> 0;
                   break label$155;
                  }
                  $15_1 = 0;
                 }
                 HEAP32[$18_1 >> 2] = $15_1;
                 $18_1 = $18_1 + 4 | 0;
                 $31_1 = ($31_1 - +($15_1 >>> 0)) * 1.0e9;
                 if ($31_1 != 0.0) {
                  continue label$154
                 }
                 break label$154;
                };
                label$157 : {
                 label$158 : {
                  if (($16_1 | 0) >= (1 | 0)) {
                   break label$158
                  }
                  $15_1 = $18_1;
                  $17_1 = $27_1;
                  break label$157;
                 }
                 $17_1 = $27_1;
                 label$159 : while (1) {
                  $16_1 = ($16_1 | 0) < (29 | 0) ? $16_1 : 29;
                  label$160 : {
                   $15_1 = $18_1 + -4 | 0;
                   if ($15_1 >>> 0 < $17_1 >>> 0) {
                    break label$160
                   }
                   i64toi32_i32$3 = 0;
                   $30_1 = $16_1;
                   $30$hi = i64toi32_i32$3;
                   i64toi32_i32$3 = 0;
                   $29_1 = 0;
                   $29$hi = i64toi32_i32$3;
                   label$161 : while (1) {
                    $1377 = $15_1;
                    i64toi32_i32$1 = $15_1;
                    i64toi32_i32$3 = HEAP32[$15_1 >> 2] | 0;
                    i64toi32_i32$4 = 0;
                    $1379$hi = i64toi32_i32$4;
                    i64toi32_i32$4 = $30$hi;
                    i64toi32_i32$4 = $1379$hi;
                    i64toi32_i32$1 = i64toi32_i32$3;
                    i64toi32_i32$3 = $30$hi;
                    i64toi32_i32$2 = $30_1;
                    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
                    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
                     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
                     $67_1 = 0;
                    } else {
                     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
                     $67_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
                    }
                    $1381$hi = i64toi32_i32$3;
                    i64toi32_i32$3 = $29$hi;
                    i64toi32_i32$4 = $29_1;
                    i64toi32_i32$1 = 0;
                    i64toi32_i32$2 = -1;
                    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
                    $1383 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
                    $1383$hi = i64toi32_i32$1;
                    i64toi32_i32$1 = $1381$hi;
                    i64toi32_i32$3 = $67_1;
                    i64toi32_i32$4 = $1383$hi;
                    i64toi32_i32$2 = $1383;
                    i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
                    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
                    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
                     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
                    }
                    $29_1 = i64toi32_i32$5;
                    $29$hi = i64toi32_i32$0;
                    $1385$hi = i64toi32_i32$0;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$3 = __wasm_i64_udiv(i64toi32_i32$5 | 0, i64toi32_i32$0 | 0, 1e9 | 0, i64toi32_i32$3 | 0) | 0;
                    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                    $29_1 = i64toi32_i32$3;
                    $29$hi = i64toi32_i32$0;
                    i64toi32_i32$3 = 0;
                    i64toi32_i32$3 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$0 | 0, 1e9 | 0, i64toi32_i32$3 | 0) | 0;
                    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                    $1389 = i64toi32_i32$3;
                    $1389$hi = i64toi32_i32$0;
                    i64toi32_i32$0 = $1385$hi;
                    i64toi32_i32$1 = i64toi32_i32$5;
                    i64toi32_i32$3 = $1389$hi;
                    i64toi32_i32$2 = $1389;
                    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
                    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
                    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
                    HEAP32[$1377 >> 2] = i64toi32_i32$4;
                    $15_1 = $15_1 + -4 | 0;
                    if ($15_1 >>> 0 >= $17_1 >>> 0) {
                     continue label$161
                    }
                    break label$161;
                   };
                   i64toi32_i32$5 = $29$hi;
                   $15_1 = $29_1;
                   if (!$15_1) {
                    break label$160
                   }
                   $17_1 = $17_1 + -4 | 0;
                   HEAP32[$17_1 >> 2] = $15_1;
                  }
                  label$162 : {
                   label$163 : while (1) {
                    $15_1 = $18_1;
                    if ($15_1 >>> 0 <= $17_1 >>> 0) {
                     break label$162
                    }
                    $18_1 = $15_1 + -4 | 0;
                    if (!(HEAP32[$18_1 >> 2] | 0)) {
                     continue label$163
                    }
                    break label$163;
                   };
                  }
                  $16_1 = (HEAP32[($5_1 + 364 | 0) >> 2] | 0) - $16_1 | 0;
                  HEAP32[($5_1 + 364 | 0) >> 2] = $16_1;
                  $18_1 = $15_1;
                  if (($16_1 | 0) > (0 | 0)) {
                   continue label$159
                  }
                  break label$159;
                 };
                }
                label$164 : {
                 if (($16_1 | 0) > (-1 | 0)) {
                  break label$164
                 }
                 $24_1 = ((($35_1 + 25 | 0) >>> 0) / (9 >>> 0) | 0) + 1 | 0;
                 label$165 : while (1) {
                  $18_1 = 0 - $16_1 | 0;
                  $22_1 = ($18_1 | 0) < (9 | 0) ? $18_1 : 9;
                  label$166 : {
                   label$167 : {
                    if ($17_1 >>> 0 < $15_1 >>> 0) {
                     break label$167
                    }
                    $17_1 = HEAP32[$17_1 >> 2] | 0 ? $17_1 : $17_1 + 4 | 0;
                    break label$166;
                   }
                   $23_1 = 1e9 >>> $22_1 | 0;
                   $25_1 = (-1 << $22_1 | 0) ^ -1 | 0;
                   $16_1 = 0;
                   $18_1 = $17_1;
                   label$168 : while (1) {
                    $19_1 = HEAP32[$18_1 >> 2] | 0;
                    HEAP32[$18_1 >> 2] = ($19_1 >>> $22_1 | 0) + $16_1 | 0;
                    $16_1 = Math_imul($19_1 & $25_1 | 0, $23_1);
                    $18_1 = $18_1 + 4 | 0;
                    if ($18_1 >>> 0 < $15_1 >>> 0) {
                     continue label$168
                    }
                    break label$168;
                   };
                   $17_1 = HEAP32[$17_1 >> 2] | 0 ? $17_1 : $17_1 + 4 | 0;
                   if (!$16_1) {
                    break label$166
                   }
                   HEAP32[$15_1 >> 2] = $16_1;
                   $15_1 = $15_1 + 4 | 0;
                  }
                  $16_1 = (HEAP32[($5_1 + 364 | 0) >> 2] | 0) + $22_1 | 0;
                  HEAP32[($5_1 + 364 | 0) >> 2] = $16_1;
                  $18_1 = ($28_1 | 0) == (102 | 0) ? $27_1 : $17_1;
                  $15_1 = (($15_1 - $18_1 | 0) >> 2 | 0 | 0) > ($24_1 | 0) ? $18_1 + ($24_1 << 2 | 0) | 0 : $15_1;
                  if (($16_1 | 0) < (0 | 0)) {
                   continue label$165
                  }
                  break label$165;
                 };
                }
                $18_1 = 0;
                label$169 : {
                 if ($17_1 >>> 0 >= $15_1 >>> 0) {
                  break label$169
                 }
                 $18_1 = Math_imul(($27_1 - $17_1 | 0) >> 2 | 0, 9);
                 $19_1 = HEAP32[$17_1 >> 2] | 0;
                 if ($19_1 >>> 0 < 10 >>> 0) {
                  break label$169
                 }
                 $16_1 = 10;
                 label$170 : while (1) {
                  $18_1 = $18_1 + 1 | 0;
                  $16_1 = Math_imul($16_1, 10);
                  if ($19_1 >>> 0 >= $16_1 >>> 0) {
                   continue label$170
                  }
                  break label$170;
                 };
                }
                label$171 : {
                 $19_1 = ($28_1 | 0) == (102 | 0) ? 0 : $18_1;
                 $23_1 = ($28_1 | 0) == (103 | 0);
                 $25_1 = ($35_1 | 0) != (0 | 0) & $23_1 | 0;
                 $16_1 = ($35_1 - $19_1 | 0) - $25_1 | 0;
                 if (($16_1 | 0) >= (Math_imul(($15_1 - $27_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
                  break label$171
                 }
                 $24_1 = $16_1 + 9216 | 0;
                 $28_1 = ($24_1 | 0) / (9 | 0) | 0;
                 $36_1 = ($28_1 << 2 | 0) + $27_1 | 0;
                 $22_1 = $36_1 + -4092 | 0;
                 $16_1 = 10;
                 label$172 : {
                  $28_1 = Math_imul($28_1, 9);
                  if ((($24_1 - $28_1 | 0) + 1 | 0 | 0) > (8 | 0)) {
                   break label$172
                  }
                  $19_1 = ((($19_1 + $28_1 | 0) + $25_1 | 0) - $35_1 | 0) + -9208 | 0;
                  $16_1 = 10;
                  label$173 : while (1) {
                   $16_1 = Math_imul($16_1, 10);
                   $19_1 = $19_1 + -1 | 0;
                   if ($19_1) {
                    continue label$173
                   }
                   break label$173;
                  };
                 }
                 $25_1 = HEAP32[$22_1 >> 2] | 0;
                 $24_1 = ($25_1 >>> 0) / ($16_1 >>> 0) | 0;
                 $19_1 = $25_1 - Math_imul($24_1, $16_1) | 0;
                 label$174 : {
                  label$175 : {
                   $28_1 = $22_1 + 4 | 0;
                   if (($28_1 | 0) != ($15_1 | 0)) {
                    break label$175
                   }
                   if (!$19_1) {
                    break label$174
                   }
                  }
                  label$176 : {
                   label$177 : {
                    if ($24_1 & 1 | 0) {
                     break label$177
                    }
                    $31_1 = 9007199254740992.0;
                    if ($22_1 >>> 0 <= $17_1 >>> 0) {
                     break label$176
                    }
                    if (($16_1 | 0) != (1e9 | 0)) {
                     break label$176
                    }
                    if (!((HEAPU8[($22_1 + -4 | 0) >> 0] | 0) & 1 | 0)) {
                     break label$176
                    }
                   }
                   $31_1 = 9007199254740994.0;
                  }
                  $34_1 = .5;
                  label$178 : {
                   $24_1 = $16_1 >>> 1 | 0;
                   if ($19_1 >>> 0 < $24_1 >>> 0) {
                    break label$178
                   }
                   $34_1 = ($28_1 | 0) == ($15_1 | 0) ? (($19_1 | 0) == ($24_1 | 0) ? 1.0 : 1.5) : 1.5;
                  }
                  label$179 : {
                   if (!$32_1) {
                    break label$179
                   }
                   if ((HEAPU8[$33_1 >> 0] | 0 | 0) != (45 | 0)) {
                    break label$179
                   }
                   $34_1 = -$34_1;
                   $31_1 = -$31_1;
                  }
                  $19_1 = $25_1 - $19_1 | 0;
                  HEAP32[$22_1 >> 2] = $19_1;
                  if ($31_1 + $34_1 == $31_1) {
                   break label$174
                  }
                  $18_1 = $19_1 + $16_1 | 0;
                  HEAP32[$22_1 >> 2] = $18_1;
                  label$180 : {
                   if ($18_1 >>> 0 < 1e9 >>> 0) {
                    break label$180
                   }
                   $18_1 = $36_1 + -4096 | 0;
                   label$181 : while (1) {
                    HEAP32[($18_1 + 4 | 0) >> 2] = 0;
                    label$182 : {
                     if ($18_1 >>> 0 >= $17_1 >>> 0) {
                      break label$182
                     }
                     $17_1 = $17_1 + -4 | 0;
                     HEAP32[$17_1 >> 2] = 0;
                    }
                    $16_1 = (HEAP32[$18_1 >> 2] | 0) + 1 | 0;
                    HEAP32[$18_1 >> 2] = $16_1;
                    $18_1 = $18_1 + -4 | 0;
                    if ($16_1 >>> 0 > 999999999 >>> 0) {
                     continue label$181
                    }
                    break label$181;
                   };
                   $22_1 = $18_1 + 4 | 0;
                  }
                  $18_1 = Math_imul(($27_1 - $17_1 | 0) >> 2 | 0, 9);
                  $19_1 = HEAP32[$17_1 >> 2] | 0;
                  if ($19_1 >>> 0 < 10 >>> 0) {
                   break label$174
                  }
                  $16_1 = 10;
                  label$183 : while (1) {
                   $18_1 = $18_1 + 1 | 0;
                   $16_1 = Math_imul($16_1, 10);
                   if ($19_1 >>> 0 >= $16_1 >>> 0) {
                    continue label$183
                   }
                   break label$183;
                  };
                 }
                 $16_1 = $22_1 + 4 | 0;
                 $15_1 = $15_1 >>> 0 > $16_1 >>> 0 ? $16_1 : $15_1;
                }
                label$184 : {
                 label$185 : while (1) {
                  label$186 : {
                   $19_1 = $15_1;
                   if ($15_1 >>> 0 > $17_1 >>> 0) {
                    break label$186
                   }
                   $28_1 = 0;
                   break label$184;
                  }
                  $15_1 = $19_1 + -4 | 0;
                  if (!(HEAP32[$15_1 >> 2] | 0)) {
                   continue label$185
                  }
                  break label$185;
                 };
                 $28_1 = 1;
                }
                label$187 : {
                 label$188 : {
                  if ($23_1) {
                   break label$188
                  }
                  $25_1 = $21_1 & 8 | 0;
                  break label$187;
                 }
                 $15_1 = $35_1 ? $35_1 : 1;
                 $16_1 = ($15_1 | 0) > ($18_1 | 0) & ($18_1 | 0) > (-5 | 0) | 0;
                 $35_1 = ($16_1 ? $18_1 ^ -1 | 0 : -1) + $15_1 | 0;
                 $26_1 = ($16_1 ? -1 : -2) + $26_1 | 0;
                 $25_1 = $21_1 & 8 | 0;
                 if ($25_1) {
                  break label$187
                 }
                 $15_1 = 9;
                 label$189 : {
                  if (!$28_1) {
                   break label$189
                  }
                  $22_1 = HEAP32[($19_1 + -4 | 0) >> 2] | 0;
                  if (!$22_1) {
                   break label$189
                  }
                  $15_1 = 0;
                  if (($22_1 >>> 0) % (10 >>> 0) | 0) {
                   break label$189
                  }
                  $16_1 = 10;
                  $15_1 = 0;
                  label$190 : while (1) {
                   $15_1 = $15_1 + 1 | 0;
                   $16_1 = Math_imul($16_1, 10);
                   if (!(($22_1 >>> 0) % ($16_1 >>> 0) | 0)) {
                    continue label$190
                   }
                   break label$190;
                  };
                 }
                 $16_1 = Math_imul(($19_1 - $27_1 | 0) >> 2 | 0, 9) + -9 | 0;
                 label$191 : {
                  if (($26_1 | 32 | 0 | 0) != (102 | 0)) {
                   break label$191
                  }
                  $25_1 = 0;
                  $15_1 = $16_1 - $15_1 | 0;
                  $15_1 = ($15_1 | 0) > (0 | 0) ? $15_1 : 0;
                  $35_1 = ($35_1 | 0) < ($15_1 | 0) ? $35_1 : $15_1;
                  break label$187;
                 }
                 $25_1 = 0;
                 $15_1 = ($16_1 + $18_1 | 0) - $15_1 | 0;
                 $15_1 = ($15_1 | 0) > (0 | 0) ? $15_1 : 0;
                 $35_1 = ($35_1 | 0) < ($15_1 | 0) ? $35_1 : $15_1;
                }
                $15_1 = -1;
                $24_1 = $35_1 | $25_1 | 0;
                if (($35_1 | 0) > (($24_1 ? 2147483645 : 2147483646) | 0)) {
                 break label$102
                }
                $36_1 = ($35_1 + (($24_1 | 0) != (0 | 0)) | 0) + 1 | 0;
                label$192 : {
                 label$193 : {
                  $37_1 = ($26_1 | 32 | 0 | 0) != (102 | 0);
                  if ($37_1) {
                   break label$193
                  }
                  if (($18_1 | 0) > (2147483647 - $36_1 | 0 | 0)) {
                   break label$102
                  }
                  $18_1 = ($18_1 | 0) > (0 | 0) ? $18_1 : 0;
                  break label$192;
                 }
                 $16_1 = $11_1;
                 label$194 : {
                  $15_1 = $18_1 >> 31 | 0;
                  $15_1 = ($18_1 + $15_1 | 0) ^ $15_1 | 0;
                  if (!$15_1) {
                   break label$194
                  }
                  label$195 : while (1) {
                   $16_1 = $16_1 + -1 | 0;
                   $22_1 = ($15_1 >>> 0) / (10 >>> 0) | 0;
                   HEAP8[$16_1 >> 0] = $15_1 - Math_imul($22_1, 10) | 0 | 48 | 0;
                   $23_1 = $15_1 >>> 0 > 9 >>> 0;
                   $15_1 = $22_1;
                   if ($23_1) {
                    continue label$195
                   }
                   break label$195;
                  };
                 }
                 label$196 : {
                  if (($11_1 - $16_1 | 0 | 0) > (1 | 0)) {
                   break label$196
                  }
                  $15_1 = $16_1 + -1 | 0;
                  label$197 : while (1) {
                   HEAP8[$15_1 >> 0] = 48;
                   $16_1 = $11_1 - $15_1 | 0;
                   $22_1 = $15_1 + -1 | 0;
                   $15_1 = $22_1;
                   if (($16_1 | 0) < (2 | 0)) {
                    continue label$197
                   }
                   break label$197;
                  };
                  $16_1 = $22_1 + 1 | 0;
                 }
                 $38_1 = $16_1 + -2 | 0;
                 HEAP8[$38_1 >> 0] = $26_1;
                 $15_1 = -1;
                 HEAP8[($16_1 + -1 | 0) >> 0] = ($18_1 | 0) < (0 | 0) ? 45 : 43;
                 $18_1 = $11_1 - $38_1 | 0;
                 if (($18_1 | 0) > (2147483647 - $36_1 | 0 | 0)) {
                  break label$102
                 }
                }
                $15_1 = -1;
                $18_1 = $18_1 + $36_1 | 0;
                if (($18_1 | 0) > ($32_1 ^ 2147483647 | 0 | 0)) {
                 break label$102
                }
                $26_1 = $18_1 + $32_1 | 0;
                label$198 : {
                 $21_1 = $21_1 & 73728 | 0;
                 if ($21_1) {
                  break label$198
                 }
                 if (($20_1 | 0) <= ($26_1 | 0)) {
                  break label$198
                 }
                 $23_1 = $20_1 - $26_1 | 0;
                 $15_1 = $23_1 >>> 0 < 256 >>> 0;
                 $17($5_1 + 64 | 0 | 0, 32 | 0, ($15_1 ? $23_1 : 256) | 0) | 0;
                 $16_1 = HEAP32[$0_1 >> 2] | 0;
                 $18_1 = $16_1 & 32 | 0;
                 label$199 : {
                  label$200 : {
                   if ($15_1) {
                    break label$200
                   }
                   $15_1 = !$18_1;
                   $18_1 = $23_1;
                   label$201 : while (1) {
                    label$202 : {
                     if (!($15_1 & 1 | 0)) {
                      break label$202
                     }
                     $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
                     $16_1 = HEAP32[$0_1 >> 2] | 0;
                    }
                    $22_1 = $16_1 & 32 | 0;
                    $15_1 = !$22_1;
                    $18_1 = $18_1 + -256 | 0;
                    if ($18_1 >>> 0 > 255 >>> 0) {
                     continue label$201
                    }
                    break label$201;
                   };
                   if ($22_1) {
                    break label$198
                   }
                   $23_1 = $23_1 & 255 | 0;
                   break label$199;
                  }
                  if ($18_1) {
                   break label$198
                  }
                 }
                 $8($5_1 + 64 | 0 | 0, $23_1 | 0, $0_1 | 0) | 0;
                }
                label$203 : {
                 if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                  break label$203
                 }
                 $8($33_1 | 0, $32_1 | 0, $0_1 | 0) | 0;
                }
                label$204 : {
                 if (($21_1 | 0) != (65536 | 0)) {
                  break label$204
                 }
                 if (($20_1 | 0) <= ($26_1 | 0)) {
                  break label$204
                 }
                 $23_1 = $20_1 - $26_1 | 0;
                 $15_1 = $23_1 >>> 0 < 256 >>> 0;
                 $17($5_1 + 64 | 0 | 0, 48 | 0, ($15_1 ? $23_1 : 256) | 0) | 0;
                 $16_1 = HEAP32[$0_1 >> 2] | 0;
                 $18_1 = $16_1 & 32 | 0;
                 label$205 : {
                  label$206 : {
                   if ($15_1) {
                    break label$206
                   }
                   $15_1 = !$18_1;
                   $18_1 = $23_1;
                   label$207 : while (1) {
                    label$208 : {
                     if (!($15_1 & 1 | 0)) {
                      break label$208
                     }
                     $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
                     $16_1 = HEAP32[$0_1 >> 2] | 0;
                    }
                    $22_1 = $16_1 & 32 | 0;
                    $15_1 = !$22_1;
                    $18_1 = $18_1 + -256 | 0;
                    if ($18_1 >>> 0 > 255 >>> 0) {
                     continue label$207
                    }
                    break label$207;
                   };
                   if ($22_1) {
                    break label$204
                   }
                   $23_1 = $23_1 & 255 | 0;
                   break label$205;
                  }
                  if ($18_1) {
                   break label$204
                  }
                 }
                 $8($5_1 + 64 | 0 | 0, $23_1 | 0, $0_1 | 0) | 0;
                }
                label$209 : {
                 label$210 : {
                  if ($37_1) {
                   break label$210
                  }
                  $23_1 = $17_1 >>> 0 > $27_1 >>> 0 ? $27_1 : $17_1;
                  $22_1 = $23_1;
                  label$211 : while (1) {
                   label$212 : {
                    label$213 : {
                     $15_1 = HEAP32[$22_1 >> 2] | 0;
                     if ($15_1) {
                      break label$213
                     }
                     $17_1 = 0;
                     break label$212;
                    }
                    $17_1 = 0;
                    label$214 : while (1) {
                     $18_1 = ($15_1 >>> 0) / (10 >>> 0) | 0;
                     HEAP8[($6_1 + $17_1 | 0) >> 0] = $15_1 - Math_imul($18_1, 10) | 0 | 48 | 0;
                     $17_1 = $17_1 + -1 | 0;
                     $16_1 = $15_1 >>> 0 > 9 >>> 0;
                     $15_1 = $18_1;
                     if ($16_1) {
                      continue label$214
                     }
                     break label$214;
                    };
                   }
                   $15_1 = $9_1 + $17_1 | 0;
                   label$215 : {
                    label$216 : {
                     if (($22_1 | 0) == ($23_1 | 0)) {
                      break label$216
                     }
                     if ($15_1 >>> 0 <= ($5_1 + 336 | 0) >>> 0) {
                      break label$215
                     }
                     label$217 : while (1) {
                      $15_1 = $15_1 + -1 | 0;
                      HEAP8[$15_1 >> 0] = 48;
                      if ($15_1 >>> 0 > ($5_1 + 336 | 0) >>> 0) {
                       continue label$217
                      }
                      break label$217;
                     };
                     $15_1 = $5_1 + 336 | 0;
                     break label$215;
                    }
                    if ($17_1) {
                     break label$215
                    }
                    $15_1 = $15_1 + -1 | 0;
                    HEAP8[$15_1 >> 0] = 48;
                   }
                   label$218 : {
                    if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                     break label$218
                    }
                    $8($15_1 | 0, $9_1 - $15_1 | 0 | 0, $0_1 | 0) | 0;
                   }
                   $22_1 = $22_1 + 4 | 0;
                   if ($22_1 >>> 0 <= $27_1 >>> 0) {
                    continue label$211
                   }
                   break label$211;
                  };
                  label$219 : {
                   if (!$24_1) {
                    break label$219
                   }
                   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                    break label$219
                   }
                   $8(5363 | 0, 1 | 0, $0_1 | 0) | 0;
                  }
                  label$220 : {
                   if (($35_1 | 0) < (1 | 0)) {
                    break label$220
                   }
                   if ($22_1 >>> 0 >= $19_1 >>> 0) {
                    break label$220
                   }
                   label$221 : while (1) {
                    $15_1 = $9_1;
                    label$222 : {
                     label$223 : {
                      $17_1 = HEAP32[$22_1 >> 2] | 0;
                      if (!$17_1) {
                       break label$223
                      }
                      $15_1 = $9_1;
                      label$224 : while (1) {
                       $15_1 = $15_1 + -1 | 0;
                       $18_1 = ($17_1 >>> 0) / (10 >>> 0) | 0;
                       HEAP8[$15_1 >> 0] = $17_1 - Math_imul($18_1, 10) | 0 | 48 | 0;
                       $16_1 = $17_1 >>> 0 > 9 >>> 0;
                       $17_1 = $18_1;
                       if ($16_1) {
                        continue label$224
                       }
                       break label$224;
                      };
                      if ($15_1 >>> 0 <= ($5_1 + 336 | 0) >>> 0) {
                       break label$222
                      }
                     }
                     label$225 : while (1) {
                      $15_1 = $15_1 + -1 | 0;
                      HEAP8[$15_1 >> 0] = 48;
                      if ($15_1 >>> 0 > ($5_1 + 336 | 0) >>> 0) {
                       continue label$225
                      }
                      break label$225;
                     };
                    }
                    label$226 : {
                     if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                      break label$226
                     }
                     $8($15_1 | 0, (($35_1 | 0) < (9 | 0) ? $35_1 : 9) | 0, $0_1 | 0) | 0;
                    }
                    $35_1 = $35_1 + -9 | 0;
                    if (($35_1 | 0) < (1 | 0)) {
                     break label$220
                    }
                    $22_1 = $22_1 + 4 | 0;
                    if ($22_1 >>> 0 < $19_1 >>> 0) {
                     continue label$221
                    }
                    break label$221;
                   };
                  }
                  if (($35_1 | 0) < (1 | 0)) {
                   break label$209
                  }
                  $15_1 = $35_1 >>> 0 < 256 >>> 0;
                  $17($5_1 + 64 | 0 | 0, 48 | 0, ($15_1 ? $35_1 : 256) | 0) | 0;
                  $18_1 = HEAP32[$0_1 >> 2] | 0;
                  $17_1 = $18_1 & 32 | 0;
                  label$227 : {
                   label$228 : {
                    if ($15_1) {
                     break label$228
                    }
                    $15_1 = !$17_1;
                    $17_1 = $35_1;
                    label$229 : while (1) {
                     label$230 : {
                      if (!($15_1 & 1 | 0)) {
                       break label$230
                      }
                      $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
                      $18_1 = HEAP32[$0_1 >> 2] | 0;
                     }
                     $16_1 = $18_1 & 32 | 0;
                     $15_1 = !$16_1;
                     $17_1 = $17_1 + -256 | 0;
                     if ($17_1 >>> 0 > 255 >>> 0) {
                      continue label$229
                     }
                     break label$229;
                    };
                    if ($16_1) {
                     break label$209
                    }
                    $35_1 = $35_1 & 255 | 0;
                    break label$227;
                   }
                   if ($17_1) {
                    break label$209
                   }
                  }
                  $8($5_1 + 64 | 0 | 0, $35_1 | 0, $0_1 | 0) | 0;
                  break label$209;
                 }
                 label$231 : {
                  if (($35_1 | 0) <= (-1 | 0)) {
                   break label$231
                  }
                  $23_1 = $28_1 ? $19_1 : $17_1 + 4 | 0;
                  $22_1 = $17_1;
                  label$232 : while (1) {
                   $16_1 = $9_1;
                   label$233 : {
                    label$234 : {
                     $15_1 = HEAP32[$22_1 >> 2] | 0;
                     if (!$15_1) {
                      break label$234
                     }
                     $18_1 = 0;
                     label$235 : while (1) {
                      $16_1 = ($15_1 >>> 0) / (10 >>> 0) | 0;
                      HEAP8[((($5_1 + 336 | 0) + $18_1 | 0) + 8 | 0) >> 0] = $15_1 - Math_imul($16_1, 10) | 0 | 48 | 0;
                      $18_1 = $18_1 + -1 | 0;
                      $19_1 = $15_1 >>> 0 > 9 >>> 0;
                      $15_1 = $16_1;
                      if ($19_1) {
                       continue label$235
                      }
                      break label$235;
                     };
                     $16_1 = (($5_1 + 336 | 0) + $18_1 | 0) + 9 | 0;
                     if ($18_1) {
                      break label$233
                     }
                    }
                    $16_1 = $16_1 + -1 | 0;
                    HEAP8[$16_1 >> 0] = 48;
                   }
                   label$236 : {
                    label$237 : {
                     if (($22_1 | 0) == ($17_1 | 0)) {
                      break label$237
                     }
                     if ($16_1 >>> 0 <= ($5_1 + 336 | 0) >>> 0) {
                      break label$236
                     }
                     label$238 : while (1) {
                      $16_1 = $16_1 + -1 | 0;
                      HEAP8[$16_1 >> 0] = 48;
                      if ($16_1 >>> 0 > ($5_1 + 336 | 0) >>> 0) {
                       continue label$238
                      }
                      break label$236;
                     };
                    }
                    label$239 : {
                     if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                      break label$239
                     }
                     $8($16_1 | 0, 1 | 0, $0_1 | 0) | 0;
                    }
                    $16_1 = $16_1 + 1 | 0;
                    label$240 : {
                     if ($25_1) {
                      break label$240
                     }
                     if (($35_1 | 0) < (1 | 0)) {
                      break label$236
                     }
                    }
                    if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                     break label$236
                    }
                    $8(5363 | 0, 1 | 0, $0_1 | 0) | 0;
                   }
                   $15_1 = $9_1 - $16_1 | 0;
                   label$241 : {
                    if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                     break label$241
                    }
                    $8($16_1 | 0, (($35_1 | 0) > ($15_1 | 0) ? $15_1 : $35_1) | 0, $0_1 | 0) | 0;
                   }
                   $35_1 = $35_1 - $15_1 | 0;
                   label$242 : {
                    $22_1 = $22_1 + 4 | 0;
                    if ($22_1 >>> 0 >= $23_1 >>> 0) {
                     break label$242
                    }
                    if (($35_1 | 0) > (-1 | 0)) {
                     continue label$232
                    }
                   }
                   break label$232;
                  };
                  if (($35_1 | 0) < (1 | 0)) {
                   break label$231
                  }
                  $15_1 = $35_1 >>> 0 < 256 >>> 0;
                  $17($5_1 + 64 | 0 | 0, 48 | 0, ($15_1 ? $35_1 : 256) | 0) | 0;
                  $18_1 = HEAP32[$0_1 >> 2] | 0;
                  $17_1 = $18_1 & 32 | 0;
                  label$243 : {
                   label$244 : {
                    if ($15_1) {
                     break label$244
                    }
                    $15_1 = !$17_1;
                    $17_1 = $35_1;
                    label$245 : while (1) {
                     label$246 : {
                      if (!($15_1 & 1 | 0)) {
                       break label$246
                      }
                      $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
                      $18_1 = HEAP32[$0_1 >> 2] | 0;
                     }
                     $16_1 = $18_1 & 32 | 0;
                     $15_1 = !$16_1;
                     $17_1 = $17_1 + -256 | 0;
                     if ($17_1 >>> 0 > 255 >>> 0) {
                      continue label$245
                     }
                     break label$245;
                    };
                    if ($16_1) {
                     break label$231
                    }
                    $35_1 = $35_1 & 255 | 0;
                    break label$243;
                   }
                   if ($17_1) {
                    break label$231
                   }
                  }
                  $8($5_1 + 64 | 0 | 0, $35_1 | 0, $0_1 | 0) | 0;
                 }
                 if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                  break label$209
                 }
                 $8($38_1 | 0, $11_1 - $38_1 | 0 | 0, $0_1 | 0) | 0;
                }
                label$247 : {
                 if (($21_1 | 0) != (8192 | 0)) {
                  break label$247
                 }
                 if (($20_1 | 0) <= ($26_1 | 0)) {
                  break label$247
                 }
                 $19_1 = $20_1 - $26_1 | 0;
                 $15_1 = $19_1 >>> 0 < 256 >>> 0;
                 $17($5_1 + 64 | 0 | 0, 32 | 0, ($15_1 ? $19_1 : 256) | 0) | 0;
                 $18_1 = HEAP32[$0_1 >> 2] | 0;
                 $17_1 = $18_1 & 32 | 0;
                 label$248 : {
                  label$249 : {
                   if ($15_1) {
                    break label$249
                   }
                   $15_1 = !$17_1;
                   $17_1 = $19_1;
                   label$250 : while (1) {
                    label$251 : {
                     if (!($15_1 & 1 | 0)) {
                      break label$251
                     }
                     $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
                     $18_1 = HEAP32[$0_1 >> 2] | 0;
                    }
                    $16_1 = $18_1 & 32 | 0;
                    $15_1 = !$16_1;
                    $17_1 = $17_1 + -256 | 0;
                    if ($17_1 >>> 0 > 255 >>> 0) {
                     continue label$250
                    }
                    break label$250;
                   };
                   if ($16_1) {
                    break label$247
                   }
                   $19_1 = $19_1 & 255 | 0;
                   break label$248;
                  }
                  if ($17_1) {
                   break label$247
                  }
                 }
                 $8($5_1 + 64 | 0 | 0, $19_1 | 0, $0_1 | 0) | 0;
                }
                $15_1 = ($20_1 | 0) > ($26_1 | 0) ? $20_1 : $26_1;
               }
               if (($15_1 | 0) >= (0 | 0)) {
                continue label$4
               }
               break label$3;
              }
              $27_1 = 0;
              $28_1 = 4678;
             }
             $15_1 = $12_1;
             break label$5;
            }
            $21_1 = $23_1;
            $19_1 = $18_1;
            if (!(HEAPU8[$15_1 >> 0] | 0)) {
             break label$5
            }
            break label$3;
           }
           $15_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
           $1_1 = $1_1 + 1 | 0;
           continue label$9;
          };
         }
         if ($0_1) {
          break label$1
         }
         label$252 : {
          if ($13_1) {
           break label$252
          }
          $14_1 = 0;
          break label$1;
         }
         label$253 : {
          label$254 : {
           $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
           if ($1_1) {
            break label$254
           }
           $1_1 = 1;
           break label$253;
          }
          $24($3_1 + 8 | 0 | 0, $1_1 | 0, $2_1 | 0);
          label$255 : {
           $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
           if ($1_1) {
            break label$255
           }
           $1_1 = 2;
           break label$253;
          }
          $24($3_1 + 16 | 0 | 0, $1_1 | 0, $2_1 | 0);
          label$256 : {
           $1_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
           if ($1_1) {
            break label$256
           }
           $1_1 = 3;
           break label$253;
          }
          $24($3_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
          label$257 : {
           $1_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
           if ($1_1) {
            break label$257
           }
           $1_1 = 4;
           break label$253;
          }
          $24($3_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0);
          label$258 : {
           $1_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
           if ($1_1) {
            break label$258
           }
           $1_1 = 5;
           break label$253;
          }
          $24($3_1 + 40 | 0 | 0, $1_1 | 0, $2_1 | 0);
          label$259 : {
           $1_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
           if ($1_1) {
            break label$259
           }
           $1_1 = 6;
           break label$253;
          }
          $24($3_1 + 48 | 0 | 0, $1_1 | 0, $2_1 | 0);
          label$260 : {
           $1_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
           if ($1_1) {
            break label$260
           }
           $1_1 = 7;
           break label$253;
          }
          $24($3_1 + 56 | 0 | 0, $1_1 | 0, $2_1 | 0);
          label$261 : {
           $1_1 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
           if ($1_1) {
            break label$261
           }
           $1_1 = 8;
           break label$253;
          }
          $24($3_1 + 64 | 0 | 0, $1_1 | 0, $2_1 | 0);
          $1_1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
          if ($1_1) {
           break label$6
          }
          $1_1 = 9;
         }
         $1_1 = $1_1 << 2 | 0;
         label$262 : while (1) {
          if (HEAP32[($4_1 + $1_1 | 0) >> 2] | 0) {
           break label$7
          }
          $1_1 = $1_1 + 4 | 0;
          if (($1_1 | 0) != (40 | 0)) {
           continue label$262
          }
          break label$262;
         };
         $14_1 = 1;
         break label$1;
        }
        HEAP32[(0 + 1024 | 0) >> 2] = 28;
        break label$2;
       }
       $24($3_1 + 72 | 0 | 0, $1_1 | 0, $2_1 | 0);
       $14_1 = 1;
       break label$1;
      }
      $24_1 = $15_1 - $16_1 | 0;
      $26_1 = ($19_1 | 0) < ($24_1 | 0) ? $24_1 : $19_1;
      if (($26_1 | 0) > (2147483647 - $27_1 | 0 | 0)) {
       break label$3
      }
      $25_1 = $27_1 + $26_1 | 0;
      $15_1 = ($20_1 | 0) < ($25_1 | 0) ? $25_1 : $20_1;
      if (($15_1 | 0) > ($17_1 | 0)) {
       break label$3
      }
      label$263 : {
       $21_1 = $21_1 & 73728 | 0;
       if ($21_1) {
        break label$263
       }
       if (($25_1 | 0) >= ($20_1 | 0)) {
        break label$263
       }
       $35_1 = $15_1 - $25_1 | 0;
       $17_1 = $35_1 >>> 0 < 256 >>> 0;
       $17($5_1 + 64 | 0 | 0, 32 | 0, ($17_1 ? $35_1 : 256) | 0) | 0;
       $22_1 = HEAP32[$0_1 >> 2] | 0;
       $18_1 = $22_1 & 32 | 0;
       label$264 : {
        label$265 : {
         if ($17_1) {
          break label$265
         }
         $17_1 = !$18_1;
         $18_1 = $35_1;
         label$266 : while (1) {
          label$267 : {
           if (!($17_1 & 1 | 0)) {
            break label$267
           }
           $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
           $22_1 = HEAP32[$0_1 >> 2] | 0;
          }
          $23_1 = $22_1 & 32 | 0;
          $17_1 = !$23_1;
          $18_1 = $18_1 + -256 | 0;
          if ($18_1 >>> 0 > 255 >>> 0) {
           continue label$266
          }
          break label$266;
         };
         if ($23_1) {
          break label$263
         }
         $35_1 = $35_1 & 255 | 0;
         break label$264;
        }
        if ($18_1) {
         break label$263
        }
       }
       $8($5_1 + 64 | 0 | 0, $35_1 | 0, $0_1 | 0) | 0;
      }
      label$268 : {
       if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
        break label$268
       }
       $8($28_1 | 0, $27_1 | 0, $0_1 | 0) | 0;
      }
      label$269 : {
       if (($21_1 | 0) != (65536 | 0)) {
        break label$269
       }
       if (($25_1 | 0) >= ($20_1 | 0)) {
        break label$269
       }
       $27_1 = $15_1 - $25_1 | 0;
       $17_1 = $27_1 >>> 0 < 256 >>> 0;
       $17($5_1 + 64 | 0 | 0, 48 | 0, ($17_1 ? $27_1 : 256) | 0) | 0;
       $22_1 = HEAP32[$0_1 >> 2] | 0;
       $18_1 = $22_1 & 32 | 0;
       label$270 : {
        label$271 : {
         if ($17_1) {
          break label$271
         }
         $17_1 = !$18_1;
         $18_1 = $27_1;
         label$272 : while (1) {
          label$273 : {
           if (!($17_1 & 1 | 0)) {
            break label$273
           }
           $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
           $22_1 = HEAP32[$0_1 >> 2] | 0;
          }
          $23_1 = $22_1 & 32 | 0;
          $17_1 = !$23_1;
          $18_1 = $18_1 + -256 | 0;
          if ($18_1 >>> 0 > 255 >>> 0) {
           continue label$272
          }
          break label$272;
         };
         if ($23_1) {
          break label$269
         }
         $27_1 = $27_1 & 255 | 0;
         break label$270;
        }
        if ($18_1) {
         break label$269
        }
       }
       $8($5_1 + 64 | 0 | 0, $27_1 | 0, $0_1 | 0) | 0;
      }
      label$274 : {
       if (($24_1 | 0) >= ($19_1 | 0)) {
        break label$274
       }
       $23_1 = $26_1 - $24_1 | 0;
       $17_1 = $23_1 >>> 0 < 256 >>> 0;
       $17($5_1 + 64 | 0 | 0, 48 | 0, ($17_1 ? $23_1 : 256) | 0) | 0;
       $19_1 = HEAP32[$0_1 >> 2] | 0;
       $18_1 = $19_1 & 32 | 0;
       label$275 : {
        label$276 : {
         if ($17_1) {
          break label$276
         }
         $17_1 = !$18_1;
         $18_1 = $23_1;
         label$277 : while (1) {
          label$278 : {
           if (!($17_1 & 1 | 0)) {
            break label$278
           }
           $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
           $19_1 = HEAP32[$0_1 >> 2] | 0;
          }
          $22_1 = $19_1 & 32 | 0;
          $17_1 = !$22_1;
          $18_1 = $18_1 + -256 | 0;
          if ($18_1 >>> 0 > 255 >>> 0) {
           continue label$277
          }
          break label$277;
         };
         if ($22_1) {
          break label$274
         }
         $23_1 = $23_1 & 255 | 0;
         break label$275;
        }
        if ($18_1) {
         break label$274
        }
       }
       $8($5_1 + 64 | 0 | 0, $23_1 | 0, $0_1 | 0) | 0;
      }
      label$279 : {
       if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
        break label$279
       }
       $8($16_1 | 0, $24_1 | 0, $0_1 | 0) | 0;
      }
      if (($21_1 | 0) != (8192 | 0)) {
       continue label$4
      }
      if (($25_1 | 0) >= ($20_1 | 0)) {
       continue label$4
      }
      $19_1 = $15_1 - $25_1 | 0;
      $17_1 = $19_1 >>> 0 < 256 >>> 0;
      $17($5_1 + 64 | 0 | 0, 32 | 0, ($17_1 ? $19_1 : 256) | 0) | 0;
      $16_1 = HEAP32[$0_1 >> 2] | 0;
      $18_1 = $16_1 & 32 | 0;
      label$280 : {
       label$281 : {
        if ($17_1) {
         break label$281
        }
        $17_1 = !$18_1;
        $18_1 = $19_1;
        label$282 : while (1) {
         label$283 : {
          if (!($17_1 & 1 | 0)) {
           break label$283
          }
          $8($5_1 + 64 | 0 | 0, 256 | 0, $0_1 | 0) | 0;
          $16_1 = HEAP32[$0_1 >> 2] | 0;
         }
         $20_1 = $16_1 & 32 | 0;
         $17_1 = !$20_1;
         $18_1 = $18_1 + -256 | 0;
         if ($18_1 >>> 0 > 255 >>> 0) {
          continue label$282
         }
         break label$282;
        };
        if ($20_1) {
         continue label$4
        }
        $19_1 = $19_1 & 255 | 0;
        break label$280;
       }
       if ($18_1) {
        continue label$4
       }
      }
      $8($5_1 + 64 | 0 | 0, $19_1 | 0, $0_1 | 0) | 0;
      continue label$4;
     };
    }
    HEAP32[(0 + 1024 | 0) >> 2] = 61;
   }
   $14_1 = -1;
  }
  global$0 = $5_1 + 880 | 0;
  return $14_1 | 0;
 }
 
 function $24($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $15_1 = 0, $23_1 = 0, $31_1 = 0, $39_1 = 0, $49_1 = 0, $57_1 = 0, $65_1 = 0, $73_1 = 0, $81_1 = 0, $91_1 = 0, $99_1 = 0, $109_1 = 0, $119_1 = 0, $127_1 = 0, $135_1 = 0, $145_1 = 0;
  label$1 : {
   $1_1 = $1_1 + -9 | 0;
   if ($1_1 >>> 0 > 17 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 | 0) {
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $15_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $15_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $23_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $23_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $31_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $31_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $39_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $39_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $49_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $49_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $57_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $57_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $65_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $65_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $73_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $73_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 9:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $81_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $81_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 10:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $91_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $91_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 11:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = 0;
     $99_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $99_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 12:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $109_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $109_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 13:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $119_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $119_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 14:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $127_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $127_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 15:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = 0;
     $135_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $135_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 16:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $145_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $145_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 17:
     $25();
     abort();
    default:
     break label$2;
    };
   }
   $1_1 = HEAP32[$2_1 >> 2] | 0;
   HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  }
 }
 
 function $25() {
  $20(5168 | 0, 2848 | 0) | 0;
  $21();
  abort();
 }
 
 function $26($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $22($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $27($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $22(HEAP32[(0 + 3008 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $26(HEAP32[(0 + 3008 | 0) >> 2] | 0 | 0, 5365 | 0, 0 | 0) | 0;
  $21();
  abort();
 }
 
 function $28() {
  $27(5367 | 0, 0 | 0);
  abort();
 }
 
 function $29($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 & 65535 | 0) {
    break label$1
   }
   if (($0_1 | 0) <= (-1 | 0)) {
    break label$1
   }
   label$2 : {
    $0_1 = __wasm_memory_grow($0_1 >>> 16 | 0 | 0);
    if (($0_1 | 0) != (-1 | 0)) {
     break label$2
    }
    HEAP32[(0 + 1024 | 0) >> 2] = 48;
    return -1 | 0;
   }
   return $0_1 << 16 | 0 | 0;
  }
  $21();
  abort();
 }
 
 function $30($0_1) {
  $0_1 = $0_1 | 0;
  return $31($0_1 | 0) | 0 | 0;
 }
 
 function $31($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0, $8_1 = 0, $2_1 = 0, $11_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $1_1 = 0, $82_1 = 0, $95_1 = 0, $106_1 = 0, $114_1 = 0, $122_1 = 0, $168_1 = 0, $216_1 = 0, $227_1 = 0, $235_1 = 0, $243_1 = 0, $278_1 = 0, $356_1 = 0, $363_1 = 0, $456_1 = 0, $467_1 = 0, $475_1 = 0, $483_1 = 0, $1192_1 = 0, $1199_1 = 0, $1325 = 0, $1327 = 0, $1395 = 0, $1402 = 0, $1649 = 0, $1656 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if ($0_1 >>> 0 > 236 >>> 0) {
               break label$12
              }
              label$13 : {
               $2_1 = HEAP32[(0 + 1064 | 0) >> 2] | 0;
               $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 19 | 0) & -16 | 0;
               $4_1 = $3_1 >>> 3 | 0;
               $0_1 = $2_1 >>> $4_1 | 0;
               if (!($0_1 & 3 | 0)) {
                break label$13
               }
               $3_1 = ($0_1 & 1 | 0 | $4_1 | 0) ^ 1 | 0;
               $5_1 = $3_1 << 3 | 0;
               $4_1 = HEAP32[($5_1 + 1112 | 0) >> 2] | 0;
               $0_1 = $4_1 + 8 | 0;
               label$14 : {
                label$15 : {
                 $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $5_1 = $5_1 + 1104 | 0;
                 if (($6_1 | 0) != ($5_1 | 0)) {
                  break label$15
                 }
                 (wasm2js_i32$0 = 0, wasm2js_i32$1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 1064 | 0) >> 2] = wasm2js_i32$1;
                 break label$14;
                }
                HEAP32[(0 + 1080 | 0) >> 2] | 0;
                HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
                HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
               }
               $6_1 = $3_1 << 3 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 3 | 0;
               $4_1 = $4_1 + $6_1 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
               break label$1;
              }
              $7_1 = HEAP32[(0 + 1072 | 0) >> 2] | 0;
              if ($3_1 >>> 0 <= $7_1 >>> 0) {
               break label$11
              }
              label$16 : {
               if (!$0_1) {
                break label$16
               }
               label$17 : {
                label$18 : {
                 $82_1 = $0_1 << $4_1 | 0;
                 $0_1 = 2 << $4_1 | 0;
                 $0_1 = $82_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $95_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $4_1 = $95_1 >>> $0_1 | 0;
                 $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                 $106_1 = $6_1 | $0_1 | 0;
                 $0_1 = $4_1 >>> $6_1 | 0;
                 $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $114_1 = $106_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $122_1 = $114_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $6_1 = ($122_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                 $5_1 = $6_1 << 3 | 0;
                 $4_1 = HEAP32[($5_1 + 1112 | 0) >> 2] | 0;
                 $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $5_1 = $5_1 + 1104 | 0;
                 if (($0_1 | 0) != ($5_1 | 0)) {
                  break label$18
                 }
                 $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
                 HEAP32[(0 + 1064 | 0) >> 2] = $2_1;
                 break label$17;
                }
                HEAP32[(0 + 1080 | 0) >> 2] | 0;
                HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
                HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
               }
               $0_1 = $4_1 + 8 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               $6_1 = $6_1 << 3 | 0;
               $168_1 = $4_1 + $6_1 | 0;
               $6_1 = $6_1 - $3_1 | 0;
               HEAP32[$168_1 >> 2] = $6_1;
               $5_1 = $4_1 + $3_1 | 0;
               HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
               label$19 : {
                if (!$7_1) {
                 break label$19
                }
                $8_1 = $7_1 >>> 3 | 0;
                $3_1 = ($8_1 << 3 | 0) + 1104 | 0;
                $4_1 = HEAP32[(0 + 1084 | 0) >> 2] | 0;
                label$20 : {
                 label$21 : {
                  $8_1 = 1 << $8_1 | 0;
                  if ($2_1 & $8_1 | 0) {
                   break label$21
                  }
                  HEAP32[(0 + 1064 | 0) >> 2] = $2_1 | $8_1 | 0;
                  $8_1 = $3_1;
                  break label$20;
                 }
                 $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                }
                HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
               }
               HEAP32[(0 + 1084 | 0) >> 2] = $5_1;
               HEAP32[(0 + 1072 | 0) >> 2] = $6_1;
               break label$1;
              }
              $9_1 = HEAP32[(0 + 1068 | 0) >> 2] | 0;
              if (!$9_1) {
               break label$11
              }
              $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
              $216_1 = $0_1;
              $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
              $4_1 = $216_1 >>> $0_1 | 0;
              $6_1 = ($4_1 >>> 5 | 0) & 8 | 0;
              $227_1 = $6_1 | $0_1 | 0;
              $0_1 = $4_1 >>> $6_1 | 0;
              $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
              $235_1 = $227_1 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
              $243_1 = $235_1 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
              $5_1 = HEAP32[(((($243_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 1368 | 0) >> 2] | 0;
              $4_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
              $6_1 = $5_1;
              label$22 : {
               label$23 : while (1) {
                label$24 : {
                 $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
                 if ($0_1) {
                  break label$24
                 }
                 $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
                 if (!$0_1) {
                  break label$22
                 }
                }
                $6_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $278_1 = $6_1;
                $6_1 = $6_1 >>> 0 < $4_1 >>> 0;
                $4_1 = $6_1 ? $278_1 : $4_1;
                $5_1 = $6_1 ? $0_1 : $5_1;
                $6_1 = $0_1;
                continue label$23;
               };
              }
              $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
              label$25 : {
               $8_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
               if (($8_1 | 0) == ($5_1 | 0)) {
                break label$25
               }
               label$26 : {
                $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                if ((HEAP32[(0 + 1080 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                 break label$26
                }
                HEAP32[($0_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
               HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
               break label$2;
              }
              label$27 : {
               $6_1 = $5_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                break label$27
               }
               $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$10
               }
               $6_1 = $5_1 + 16 | 0;
              }
              label$28 : while (1) {
               $11_1 = $6_1;
               $8_1 = $0_1;
               $6_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$6_1 >> 2] | 0;
               if ($0_1) {
                continue label$28
               }
               $6_1 = $8_1 + 16 | 0;
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$28
               }
               break label$28;
              };
              HEAP32[$11_1 >> 2] = 0;
              break label$2;
             }
             $3_1 = -1;
             if ($0_1 >>> 0 > -65 >>> 0) {
              break label$11
             }
             $0_1 = $0_1 + 19 | 0;
             $3_1 = $0_1 & -16 | 0;
             $7_1 = HEAP32[(0 + 1068 | 0) >> 2] | 0;
             if (!$7_1) {
              break label$11
             }
             $11_1 = 0;
             label$29 : {
              $0_1 = $0_1 >>> 8 | 0;
              if (!$0_1) {
               break label$29
              }
              $11_1 = 31;
              if ($3_1 >>> 0 > 16777215 >>> 0) {
               break label$29
              }
              $4_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
              $0_1 = $0_1 << $4_1 | 0;
              $356_1 = $0_1;
              $0_1 = (($0_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
              $6_1 = $356_1 << $0_1 | 0;
              $363_1 = $6_1;
              $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
              $0_1 = (($363_1 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $6_1 | 0) | 0;
              $11_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
             }
             $6_1 = 0 - $3_1 | 0;
             label$30 : {
              label$31 : {
               label$32 : {
                label$33 : {
                 $4_1 = HEAP32[(($11_1 << 2 | 0) + 1368 | 0) >> 2] | 0;
                 if ($4_1) {
                  break label$33
                 }
                 $0_1 = 0;
                 $8_1 = 0;
                 break label$32;
                }
                $5_1 = $3_1 << (($11_1 | 0) == (31 | 0) ? 0 : 25 - ($11_1 >>> 1 | 0) | 0) | 0;
                $0_1 = 0;
                $8_1 = 0;
                label$34 : while (1) {
                 label$35 : {
                  $2_1 = ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                  if ($2_1 >>> 0 >= $6_1 >>> 0) {
                   break label$35
                  }
                  $6_1 = $2_1;
                  $8_1 = $4_1;
                  if ($6_1) {
                   break label$35
                  }
                  $6_1 = 0;
                  $8_1 = $4_1;
                  $0_1 = $4_1;
                  break label$31;
                 }
                 $2_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
                 $4_1 = HEAP32[(($4_1 + (($5_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                 $0_1 = $2_1 ? (($2_1 | 0) == ($4_1 | 0) ? $0_1 : $2_1) : $0_1;
                 $5_1 = $5_1 << (($4_1 | 0) != (0 | 0)) | 0;
                 if ($4_1) {
                  continue label$34
                 }
                 break label$34;
                };
               }
               label$36 : {
                if ($0_1 | $8_1 | 0) {
                 break label$36
                }
                $0_1 = 2 << $11_1 | 0;
                $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                if (!$0_1) {
                 break label$11
                }
                $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                $456_1 = $0_1;
                $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                $4_1 = $456_1 >>> $0_1 | 0;
                $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                $467_1 = $5_1 | $0_1 | 0;
                $0_1 = $4_1 >>> $5_1 | 0;
                $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                $475_1 = $467_1 | $4_1 | 0;
                $0_1 = $0_1 >>> $4_1 | 0;
                $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                $483_1 = $475_1 | $4_1 | 0;
                $0_1 = $0_1 >>> $4_1 | 0;
                $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                $0_1 = HEAP32[(((($483_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 1368 | 0) >> 2] | 0;
               }
               if (!$0_1) {
                break label$30
               }
              }
              label$37 : while (1) {
               $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $5_1 = $2_1 >>> 0 < $6_1 >>> 0;
               label$38 : {
                $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                if ($4_1) {
                 break label$38
                }
                $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
               }
               $6_1 = $5_1 ? $2_1 : $6_1;
               $8_1 = $5_1 ? $0_1 : $8_1;
               $0_1 = $4_1;
               if ($0_1) {
                continue label$37
               }
               break label$37;
              };
             }
             if (!$8_1) {
              break label$11
             }
             if ($6_1 >>> 0 >= ((HEAP32[(0 + 1072 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
              break label$11
             }
             $11_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
             label$39 : {
              $5_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
              if (($5_1 | 0) == ($8_1 | 0)) {
               break label$39
              }
              label$40 : {
               $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
               if ((HEAP32[(0 + 1080 | 0) >> 2] | 0) >>> 0 > $0_1 >>> 0) {
                break label$40
               }
               HEAP32[($0_1 + 12 | 0) >> 2] | 0;
              }
              HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
              break label$3;
             }
             label$41 : {
              $4_1 = $8_1 + 20 | 0;
              $0_1 = HEAP32[$4_1 >> 2] | 0;
              if ($0_1) {
               break label$41
              }
              $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$9
              }
              $4_1 = $8_1 + 16 | 0;
             }
             label$42 : while (1) {
              $2_1 = $4_1;
              $5_1 = $0_1;
              $4_1 = $0_1 + 20 | 0;
              $0_1 = HEAP32[$4_1 >> 2] | 0;
              if ($0_1) {
               continue label$42
              }
              $4_1 = $5_1 + 16 | 0;
              $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
              if ($0_1) {
               continue label$42
              }
              break label$42;
             };
             HEAP32[$2_1 >> 2] = 0;
             break label$3;
            }
            label$43 : {
             $0_1 = HEAP32[(0 + 1072 | 0) >> 2] | 0;
             if ($0_1 >>> 0 < $3_1 >>> 0) {
              break label$43
             }
             $4_1 = HEAP32[(0 + 1084 | 0) >> 2] | 0;
             label$44 : {
              label$45 : {
               $6_1 = $0_1 - $3_1 | 0;
               if ($6_1 >>> 0 < 16 >>> 0) {
                break label$45
               }
               $5_1 = $4_1 + $3_1 | 0;
               HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
               HEAP32[(0 + 1072 | 0) >> 2] = $6_1;
               HEAP32[(0 + 1084 | 0) >> 2] = $5_1;
               HEAP32[($4_1 + $0_1 | 0) >> 2] = $6_1;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               break label$44;
              }
              HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
              $0_1 = $4_1 + $0_1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
              HEAP32[(0 + 1084 | 0) >> 2] = 0;
              HEAP32[(0 + 1072 | 0) >> 2] = 0;
             }
             $0_1 = $4_1 + 8 | 0;
             break label$1;
            }
            label$46 : {
             $5_1 = HEAP32[(0 + 1076 | 0) >> 2] | 0;
             if ($5_1 >>> 0 <= $3_1 >>> 0) {
              break label$46
             }
             $0_1 = HEAP32[(0 + 1088 | 0) >> 2] | 0;
             $4_1 = $0_1 + $3_1 | 0;
             $6_1 = $5_1 - $3_1 | 0;
             HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
             HEAP32[(0 + 1076 | 0) >> 2] = $6_1;
             HEAP32[(0 + 1088 | 0) >> 2] = $4_1;
             HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
             $0_1 = $0_1 + 8 | 0;
             break label$1;
            }
            label$47 : {
             label$48 : {
              if (!(HEAP32[(0 + 1536 | 0) >> 2] | 0)) {
               break label$48
              }
              $4_1 = HEAP32[(0 + 1544 | 0) >> 2] | 0;
              break label$47;
             }
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = -1;
             HEAP32[(i64toi32_i32$1 + 1548 | 0) >> 2] = -1;
             HEAP32[(i64toi32_i32$1 + 1552 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = 65536;
             HEAP32[(i64toi32_i32$1 + 1540 | 0) >> 2] = 65536;
             HEAP32[(i64toi32_i32$1 + 1544 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(0 + 1536 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
             HEAP32[(0 + 1556 | 0) >> 2] = 0;
             HEAP32[(0 + 1508 | 0) >> 2] = 0;
             $4_1 = 65536;
            }
            $0_1 = 0;
            label$49 : {
             $7_1 = $3_1 + 71 | 0;
             $2_1 = $4_1 + $7_1 | 0;
             $11_1 = 0 - $4_1 | 0;
             $8_1 = $2_1 & $11_1 | 0;
             if ($8_1 >>> 0 > $3_1 >>> 0) {
              break label$49
             }
             HEAP32[(0 + 1024 | 0) >> 2] = 48;
             break label$1;
            }
            label$50 : {
             $0_1 = HEAP32[(0 + 1504 | 0) >> 2] | 0;
             if (!$0_1) {
              break label$50
             }
             label$51 : {
              $4_1 = HEAP32[(0 + 1496 | 0) >> 2] | 0;
              $6_1 = $4_1 + $8_1 | 0;
              if ($6_1 >>> 0 <= $4_1 >>> 0) {
               break label$51
              }
              if ($6_1 >>> 0 <= $0_1 >>> 0) {
               break label$50
              }
             }
             $0_1 = 0;
             HEAP32[(0 + 1024 | 0) >> 2] = 48;
             break label$1;
            }
            if ((HEAPU8[(0 + 1508 | 0) >> 0] | 0) & 4 | 0) {
             break label$6
            }
            label$52 : {
             label$53 : {
              label$54 : {
               $4_1 = HEAP32[(0 + 1088 | 0) >> 2] | 0;
               if (!$4_1) {
                break label$54
               }
               $0_1 = 1512;
               label$55 : while (1) {
                label$56 : {
                 $6_1 = HEAP32[$0_1 >> 2] | 0;
                 if ($6_1 >>> 0 > $4_1 >>> 0) {
                  break label$56
                 }
                 if (($6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                  break label$53
                 }
                }
                $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$55
                }
                break label$55;
               };
              }
              $5_1 = $29(0 | 0) | 0;
              if (($5_1 | 0) == (-1 | 0)) {
               break label$7
              }
              $2_1 = $8_1;
              label$57 : {
               $0_1 = HEAP32[(0 + 1540 | 0) >> 2] | 0;
               $4_1 = $0_1 + -1 | 0;
               if (!($4_1 & $5_1 | 0)) {
                break label$57
               }
               $2_1 = ($8_1 - $5_1 | 0) + (($4_1 + $5_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
              }
              if ($2_1 >>> 0 <= $3_1 >>> 0) {
               break label$7
              }
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              label$58 : {
               $0_1 = HEAP32[(0 + 1504 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$58
               }
               $4_1 = HEAP32[(0 + 1496 | 0) >> 2] | 0;
               $6_1 = $4_1 + $2_1 | 0;
               if ($6_1 >>> 0 <= $4_1 >>> 0) {
                break label$7
               }
               if ($6_1 >>> 0 > $0_1 >>> 0) {
                break label$7
               }
              }
              $0_1 = $29($2_1 | 0) | 0;
              if (($0_1 | 0) != ($5_1 | 0)) {
               break label$52
              }
              break label$5;
             }
             $2_1 = ($2_1 - $5_1 | 0) & $11_1 | 0;
             if ($2_1 >>> 0 > 2147483646 >>> 0) {
              break label$7
             }
             $5_1 = $29($2_1 | 0) | 0;
             if (($5_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
              break label$8
             }
             $0_1 = $5_1;
            }
            $5_1 = $0_1;
            label$59 : {
             if (($3_1 + 72 | 0) >>> 0 <= $2_1 >>> 0) {
              break label$59
             }
             if ($2_1 >>> 0 > 2147483646 >>> 0) {
              break label$59
             }
             if (($5_1 | 0) == (-1 | 0)) {
              break label$59
             }
             $0_1 = HEAP32[(0 + 1544 | 0) >> 2] | 0;
             $0_1 = (($7_1 - $2_1 | 0) + $0_1 | 0) & (0 - $0_1 | 0) | 0;
             if ($0_1 >>> 0 > 2147483646 >>> 0) {
              break label$5
             }
             label$60 : {
              if (($29($0_1 | 0) | 0 | 0) == (-1 | 0)) {
               break label$60
              }
              $2_1 = $0_1 + $2_1 | 0;
              break label$5;
             }
             $29(0 - $2_1 | 0 | 0) | 0;
             break label$7;
            }
            if (($5_1 | 0) != (-1 | 0)) {
             break label$5
            }
            break label$7;
           }
           $8_1 = 0;
           break label$2;
          }
          $5_1 = 0;
          break label$3;
         }
         if (($5_1 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 1508 | 0) >> 2] = HEAP32[(0 + 1508 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $5_1 = $29($8_1 | 0) | 0;
       $0_1 = $29(0 | 0) | 0;
       if ($5_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       if (($5_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$4
       }
       $2_1 = $0_1 - $5_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 56 | 0) >>> 0) {
        break label$4
       }
      }
      $0_1 = (HEAP32[(0 + 1496 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 1496 | 0) >> 2] = $0_1;
      label$61 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 1500 | 0) >> 2] | 0) >>> 0) {
        break label$61
       }
       HEAP32[(0 + 1500 | 0) >> 2] = $0_1;
      }
      label$62 : {
       label$63 : {
        label$64 : {
         label$65 : {
          $4_1 = HEAP32[(0 + 1088 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$65
          }
          $0_1 = 1512;
          label$66 : while (1) {
           $6_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == ($6_1 + $8_1 | 0 | 0)) {
            break label$64
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$66
           }
           break label$63;
          };
         }
         label$67 : {
          label$68 : {
           $0_1 = HEAP32[(0 + 1080 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$68
           }
           if ($5_1 >>> 0 >= $0_1 >>> 0) {
            break label$67
           }
          }
          HEAP32[(0 + 1080 | 0) >> 2] = $5_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 1516 | 0) >> 2] = $2_1;
         HEAP32[(0 + 1512 | 0) >> 2] = $5_1;
         HEAP32[(0 + 1096 | 0) >> 2] = -1;
         HEAP32[(0 + 1100 | 0) >> 2] = HEAP32[(0 + 1536 | 0) >> 2] | 0;
         HEAP32[(0 + 1524 | 0) >> 2] = 0;
         label$69 : while (1) {
          $4_1 = $0_1 + 1104 | 0;
          HEAP32[($0_1 + 1112 | 0) >> 2] = $4_1;
          HEAP32[($0_1 + 1116 | 0) >> 2] = $4_1;
          $0_1 = $0_1 + 8 | 0;
          if (($0_1 | 0) != (256 | 0)) {
           continue label$69
          }
          break label$69;
         };
         $0_1 = ($5_1 + 8 | 0) & 15 | 0 ? (-8 - $5_1 | 0) & 15 | 0 : 0;
         $4_1 = $5_1 + $0_1 | 0;
         $6_1 = $2_1 + -56 | 0;
         $0_1 = $6_1 - $0_1 | 0;
         HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
         HEAP32[(0 + 1092 | 0) >> 2] = HEAP32[(0 + 1552 | 0) >> 2] | 0;
         HEAP32[(0 + 1076 | 0) >> 2] = $0_1;
         HEAP32[(0 + 1088 | 0) >> 2] = $4_1;
         HEAP32[(($5_1 + $6_1 | 0) + 4 | 0) >> 2] = 56;
         break label$62;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$63
        }
        if ($5_1 >>> 0 <= $4_1 >>> 0) {
         break label$63
        }
        if ($6_1 >>> 0 > $4_1 >>> 0) {
         break label$63
        }
        $6_1 = ($4_1 + 8 | 0) & 15 | 0 ? (-8 - $4_1 | 0) & 15 | 0 : 0;
        $5_1 = $4_1 + $6_1 | 0;
        $11_1 = (HEAP32[(0 + 1076 | 0) >> 2] | 0) + $2_1 | 0;
        $6_1 = $11_1 - $6_1 | 0;
        HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        HEAP32[(0 + 1092 | 0) >> 2] = HEAP32[(0 + 1552 | 0) >> 2] | 0;
        HEAP32[(0 + 1076 | 0) >> 2] = $6_1;
        HEAP32[(0 + 1088 | 0) >> 2] = $5_1;
        HEAP32[(($4_1 + $11_1 | 0) + 4 | 0) >> 2] = 56;
        break label$62;
       }
       label$70 : {
        $8_1 = HEAP32[(0 + 1080 | 0) >> 2] | 0;
        if ($5_1 >>> 0 >= $8_1 >>> 0) {
         break label$70
        }
        HEAP32[(0 + 1080 | 0) >> 2] = $5_1;
        $8_1 = $5_1;
       }
       $6_1 = $5_1 + $2_1 | 0;
       $0_1 = 1512;
       label$71 : {
        label$72 : {
         label$73 : {
          label$74 : {
           label$75 : {
            label$76 : {
             label$77 : {
              label$78 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($6_1 | 0)) {
                break label$77
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$78
               }
               break label$76;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$75
             }
            }
            $0_1 = 1512;
            label$79 : while (1) {
             label$80 : {
              $6_1 = HEAP32[$0_1 >> 2] | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$80
              }
              $6_1 = $6_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($6_1 >>> 0 > $4_1 >>> 0) {
               break label$74
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$79;
            };
           }
           HEAP32[$0_1 >> 2] = $5_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $11_1 = $5_1 + (($5_1 + 8 | 0) & 15 | 0 ? (-8 - $5_1 | 0) & 15 | 0 : 0) | 0;
           HEAP32[($11_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $5_1 = $6_1 + (($6_1 + 8 | 0) & 15 | 0 ? (-8 - $6_1 | 0) & 15 | 0 : 0) | 0;
           $0_1 = ($5_1 - $11_1 | 0) - $3_1 | 0;
           $6_1 = $11_1 + $3_1 | 0;
           label$81 : {
            if (($4_1 | 0) != ($5_1 | 0)) {
             break label$81
            }
            HEAP32[(0 + 1088 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 1076 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 1076 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$72;
           }
           label$82 : {
            if ((HEAP32[(0 + 1084 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
             break label$82
            }
            HEAP32[(0 + 1084 | 0) >> 2] = $6_1;
            $0_1 = (HEAP32[(0 + 1072 | 0) >> 2] | 0) + $0_1 | 0;
            HEAP32[(0 + 1072 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
            break label$72;
           }
           label$83 : {
            $4_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
            if (($4_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$83
            }
            $7_1 = $4_1 & -8 | 0;
            label$84 : {
             label$85 : {
              if ($4_1 >>> 0 > 255 >>> 0) {
               break label$85
              }
              $3_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
              label$86 : {
               $2_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
               $9_1 = $4_1 >>> 3 | 0;
               $4_1 = ($9_1 << 3 | 0) + 1104 | 0;
               if (($2_1 | 0) == ($4_1 | 0)) {
                break label$86
               }
              }
              label$87 : {
               if (($3_1 | 0) != ($2_1 | 0)) {
                break label$87
               }
               (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 1064 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 1064 | 0) >> 2] = wasm2js_i32$1;
               break label$84;
              }
              label$88 : {
               if (($3_1 | 0) == ($4_1 | 0)) {
                break label$88
               }
              }
              HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
              HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
              break label$84;
             }
             $9_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
             label$89 : {
              label$90 : {
               $2_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
               if (($2_1 | 0) == ($5_1 | 0)) {
                break label$90
               }
               label$91 : {
                $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
                if ($8_1 >>> 0 > $4_1 >>> 0) {
                 break label$91
                }
                HEAP32[($4_1 + 12 | 0) >> 2] | 0;
               }
               HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
               HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
               break label$89;
              }
              label$92 : {
               $4_1 = $5_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$92
               }
               $4_1 = $5_1 + 16 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                break label$92
               }
               $2_1 = 0;
               break label$89;
              }
              label$93 : while (1) {
               $8_1 = $4_1;
               $2_1 = $3_1;
               $4_1 = $3_1 + 20 | 0;
               $3_1 = HEAP32[$4_1 >> 2] | 0;
               if ($3_1) {
                continue label$93
               }
               $4_1 = $2_1 + 16 | 0;
               $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
               if ($3_1) {
                continue label$93
               }
               break label$93;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$84
             }
             label$94 : {
              label$95 : {
               $3_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
               $4_1 = ($3_1 << 2 | 0) + 1368 | 0;
               if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($5_1 | 0)) {
                break label$95
               }
               HEAP32[$4_1 >> 2] = $2_1;
               if ($2_1) {
                break label$94
               }
               (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 1068 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 1068 | 0) >> 2] = wasm2js_i32$1;
               break label$84;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $2_1;
              if (!$2_1) {
               break label$84
              }
             }
             HEAP32[($2_1 + 24 | 0) >> 2] = $9_1;
             label$96 : {
              $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
              if (!$4_1) {
               break label$96
              }
              HEAP32[($2_1 + 16 | 0) >> 2] = $4_1;
              HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
             }
             $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$84
             }
             HEAP32[($2_1 + 20 | 0) >> 2] = $4_1;
             HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
            }
            $0_1 = $7_1 + $0_1 | 0;
            $5_1 = $5_1 + $7_1 | 0;
           }
           HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($6_1 + $0_1 | 0) >> 2] = $0_1;
           HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
           label$97 : {
            if ($0_1 >>> 0 > 255 >>> 0) {
             break label$97
            }
            $4_1 = $0_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 1104 | 0;
            label$98 : {
             label$99 : {
              $3_1 = HEAP32[(0 + 1064 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($3_1 & $4_1 | 0) {
               break label$99
              }
              HEAP32[(0 + 1064 | 0) >> 2] = $3_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$98;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
            HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
            HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
            break label$72;
           }
           $4_1 = 0;
           label$100 : {
            $3_1 = $0_1 >>> 8 | 0;
            if (!$3_1) {
             break label$100
            }
            $4_1 = 31;
            if ($0_1 >>> 0 > 16777215 >>> 0) {
             break label$100
            }
            $4_1 = (($3_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $3_1 = $3_1 << $4_1 | 0;
            $1192_1 = $3_1;
            $3_1 = (($3_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $5_1 = $1192_1 << $3_1 | 0;
            $1199_1 = $5_1;
            $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $4_1 = (($1199_1 << $5_1 | 0) >>> 15 | 0) - ($3_1 | $4_1 | 0 | $5_1 | 0) | 0;
            $4_1 = ($4_1 << 1 | 0 | (($0_1 >>> ($4_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($6_1 + 28 | 0) >> 2] = $4_1;
           i64toi32_i32$1 = $6_1;
           i64toi32_i32$0 = 0;
           HEAP32[($6_1 + 16 | 0) >> 2] = 0;
           HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $3_1 = ($4_1 << 2 | 0) + 1368 | 0;
           label$101 : {
            $5_1 = HEAP32[(0 + 1068 | 0) >> 2] | 0;
            $8_1 = 1 << $4_1 | 0;
            if ($5_1 & $8_1 | 0) {
             break label$101
            }
            HEAP32[$3_1 >> 2] = $6_1;
            HEAP32[(0 + 1068 | 0) >> 2] = $5_1 | $8_1 | 0;
            HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
            HEAP32[($6_1 + 8 | 0) >> 2] = $6_1;
            HEAP32[($6_1 + 12 | 0) >> 2] = $6_1;
            break label$72;
           }
           $4_1 = $0_1 << (($4_1 | 0) == (31 | 0) ? 0 : 25 - ($4_1 >>> 1 | 0) | 0) | 0;
           $5_1 = HEAP32[$3_1 >> 2] | 0;
           label$102 : while (1) {
            $3_1 = $5_1;
            if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
             break label$73
            }
            $5_1 = $4_1 >>> 29 | 0;
            $4_1 = $4_1 << 1 | 0;
            $8_1 = ($3_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
            $5_1 = HEAP32[$8_1 >> 2] | 0;
            if ($5_1) {
             continue label$102
            }
            break label$102;
           };
           HEAP32[$8_1 >> 2] = $6_1;
           HEAP32[($6_1 + 24 | 0) >> 2] = $3_1;
           HEAP32[($6_1 + 12 | 0) >> 2] = $6_1;
           HEAP32[($6_1 + 8 | 0) >> 2] = $6_1;
           break label$72;
          }
          $0_1 = ($5_1 + 8 | 0) & 15 | 0 ? (-8 - $5_1 | 0) & 15 | 0 : 0;
          $11_1 = $5_1 + $0_1 | 0;
          $8_1 = $2_1 + -56 | 0;
          $0_1 = $8_1 - $0_1 | 0;
          HEAP32[($11_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
          HEAP32[(($5_1 + $8_1 | 0) + 4 | 0) >> 2] = 56;
          $8_1 = ($6_1 + (($6_1 + -55 | 0) & 15 | 0 ? (55 - $6_1 | 0) & 15 | 0 : 0) | 0) + -63 | 0;
          $8_1 = $8_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 35;
          HEAP32[(0 + 1092 | 0) >> 2] = HEAP32[(0 + 1552 | 0) >> 2] | 0;
          HEAP32[(0 + 1076 | 0) >> 2] = $0_1;
          HEAP32[(0 + 1088 | 0) >> 2] = $11_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 1520 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 1524 | 0) >> 2] | 0;
          $1325 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1325;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 1512 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 1516 | 0) >> 2] | 0;
          $1327 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1327;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 1520 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 1516 | 0) >> 2] = $2_1;
          HEAP32[(0 + 1512 | 0) >> 2] = $5_1;
          HEAP32[(0 + 1524 | 0) >> 2] = 0;
          $0_1 = $8_1 + 36 | 0;
          label$103 : while (1) {
           HEAP32[$0_1 >> 2] = 7;
           $0_1 = $0_1 + 4 | 0;
           if ($0_1 >>> 0 < $6_1 >>> 0) {
            continue label$103
           }
           break label$103;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$62
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          label$104 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$104
           }
           $6_1 = $2_1 >>> 3 | 0;
           $0_1 = ($6_1 << 3 | 0) + 1104 | 0;
           label$105 : {
            label$106 : {
             $5_1 = HEAP32[(0 + 1064 | 0) >> 2] | 0;
             $6_1 = 1 << $6_1 | 0;
             if ($5_1 & $6_1 | 0) {
              break label$106
             }
             HEAP32[(0 + 1064 | 0) >> 2] = $5_1 | $6_1 | 0;
             $6_1 = $0_1;
             break label$105;
            }
            $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($6_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $6_1;
           break label$62;
          }
          $0_1 = 0;
          label$107 : {
           $6_1 = $2_1 >>> 8 | 0;
           if (!$6_1) {
            break label$107
           }
           $0_1 = 31;
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$107
           }
           $0_1 = (($6_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $6_1 = $6_1 << $0_1 | 0;
           $1395 = $6_1;
           $6_1 = (($6_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $5_1 = $1395 << $6_1 | 0;
           $1402 = $5_1;
           $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1402 << $5_1 | 0) >>> 15 | 0) - ($6_1 | $0_1 | 0 | $5_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $6_1 = ($0_1 << 2 | 0) + 1368 | 0;
          label$108 : {
           $5_1 = HEAP32[(0 + 1068 | 0) >> 2] | 0;
           $8_1 = 1 << $0_1 | 0;
           if ($5_1 & $8_1 | 0) {
            break label$108
           }
           HEAP32[$6_1 >> 2] = $4_1;
           HEAP32[(0 + 1068 | 0) >> 2] = $5_1 | $8_1 | 0;
           HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
           break label$62;
          }
          $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
          $5_1 = HEAP32[$6_1 >> 2] | 0;
          label$109 : while (1) {
           $6_1 = $5_1;
           if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
            break label$71
           }
           $5_1 = $0_1 >>> 29 | 0;
           $0_1 = $0_1 << 1 | 0;
           $8_1 = ($6_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
           $5_1 = HEAP32[$8_1 >> 2] | 0;
           if ($5_1) {
            continue label$109
           }
           break label$109;
          };
          HEAP32[$8_1 >> 2] = $4_1;
          HEAP32[($4_1 + 24 | 0) >> 2] = $6_1;
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$62;
         }
         $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
         HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
         HEAP32[($6_1 + 24 | 0) >> 2] = 0;
         HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
         HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
        }
        $0_1 = $11_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
       HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
      }
      $0_1 = HEAP32[(0 + 1076 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = HEAP32[(0 + 1088 | 0) >> 2] | 0;
      $6_1 = $4_1 + $3_1 | 0;
      $0_1 = $0_1 - $3_1 | 0;
      HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[(0 + 1076 | 0) >> 2] = $0_1;
      HEAP32[(0 + 1088 | 0) >> 2] = $6_1;
      HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $4_1 + 8 | 0;
      break label$1;
     }
     $0_1 = 0;
     HEAP32[(0 + 1024 | 0) >> 2] = 48;
     break label$1;
    }
    label$110 : {
     if (!$11_1) {
      break label$110
     }
     label$111 : {
      label$112 : {
       $4_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($4_1 << 2 | 0) + 1368 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$112
       }
       HEAP32[$0_1 >> 2] = $5_1;
       if ($5_1) {
        break label$111
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       HEAP32[(0 + 1068 | 0) >> 2] = $7_1;
       break label$110;
      }
      HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$110
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $11_1;
     label$113 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$113
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$110
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
    }
    label$114 : {
     label$115 : {
      if ($6_1 >>> 0 > 15 >>> 0) {
       break label$115
      }
      $0_1 = $6_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$114;
     }
     $5_1 = $8_1 + $3_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $6_1 | 1 | 0;
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     HEAP32[($5_1 + $6_1 | 0) >> 2] = $6_1;
     label$116 : {
      if ($6_1 >>> 0 > 255 >>> 0) {
       break label$116
      }
      $4_1 = $6_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 1104 | 0;
      label$117 : {
       label$118 : {
        $6_1 = HEAP32[(0 + 1064 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($6_1 & $4_1 | 0) {
         break label$118
        }
        HEAP32[(0 + 1064 | 0) >> 2] = $6_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$117;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
      break label$114;
     }
     label$119 : {
      label$120 : {
       $4_1 = $6_1 >>> 8 | 0;
       if ($4_1) {
        break label$120
       }
       $0_1 = 0;
       break label$119;
      }
      $0_1 = 31;
      if ($6_1 >>> 0 > 16777215 >>> 0) {
       break label$119
      }
      $0_1 = (($4_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $4_1 = $4_1 << $0_1 | 0;
      $1649 = $4_1;
      $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1649 << $4_1 | 0;
      $1656 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1656 << $3_1 | 0) >>> 15 | 0) - ($4_1 | $0_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($6_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$0 = 0;
     HEAP32[($5_1 + 16 | 0) >> 2] = 0;
     HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = ($0_1 << 2 | 0) + 1368 | 0;
     label$121 : {
      $3_1 = 1 << $0_1 | 0;
      if ($7_1 & $3_1 | 0) {
       break label$121
      }
      HEAP32[$4_1 >> 2] = $5_1;
      HEAP32[(0 + 1068 | 0) >> 2] = $7_1 | $3_1 | 0;
      HEAP32[($5_1 + 24 | 0) >> 2] = $4_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 12 | 0) >> 2] = $5_1;
      break label$114;
     }
     $0_1 = $6_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
     $3_1 = HEAP32[$4_1 >> 2] | 0;
     label$122 : {
      label$123 : while (1) {
       $4_1 = $3_1;
       if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($6_1 | 0)) {
        break label$122
       }
       $3_1 = $0_1 >>> 29 | 0;
       $0_1 = $0_1 << 1 | 0;
       $2_1 = ($4_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
       $3_1 = HEAP32[$2_1 >> 2] | 0;
       if ($3_1) {
        continue label$123
       }
       break label$123;
      };
      HEAP32[$2_1 >> 2] = $5_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = $4_1;
      HEAP32[($5_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $5_1;
      break label$114;
     }
     $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 24 | 0) >> 2] = 0;
     HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$124 : {
    if (!$10_1) {
     break label$124
    }
    label$125 : {
     label$126 : {
      $6_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($6_1 << 2 | 0) + 1368 | 0;
      if (($5_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$126
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$125
      }
      (wasm2js_i32$0 = 0, wasm2js_i32$1 = $9_1 & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 1068 | 0) >> 2] = wasm2js_i32$1;
      break label$124;
     }
     HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($5_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$124
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $10_1;
    label$127 : {
     $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$127
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$124
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$128 : {
    label$129 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$129
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $5_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$128;
    }
    $6_1 = $5_1 + $3_1 | 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    HEAP32[($6_1 + $4_1 | 0) >> 2] = $4_1;
    label$130 : {
     if (!$7_1) {
      break label$130
     }
     $8_1 = $7_1 >>> 3 | 0;
     $3_1 = ($8_1 << 3 | 0) + 1104 | 0;
     $0_1 = HEAP32[(0 + 1084 | 0) >> 2] | 0;
     label$131 : {
      label$132 : {
       $8_1 = 1 << $8_1 | 0;
       if ($8_1 & $2_1 | 0) {
        break label$132
       }
       HEAP32[(0 + 1064 | 0) >> 2] = $8_1 | $2_1 | 0;
       $8_1 = $3_1;
       break label$131;
      }
      $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
    }
    HEAP32[(0 + 1084 | 0) >> 2] = $6_1;
    HEAP32[(0 + 1072 | 0) >> 2] = $4_1;
   }
   $0_1 = $5_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $32($0_1) {
  $0_1 = $0_1 | 0;
  $33($0_1 | 0);
 }
 
 function $33($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $5_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $6_1 = 0, $408_1 = 0, $415_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 1080 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 1084 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      label$5 : {
       $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       $7_1 = $2_1 >>> 3 | 0;
       $2_1 = ($7_1 << 3 | 0) + 1104 | 0;
       if (($6_1 | 0) == ($2_1 | 0)) {
        break label$5
       }
      }
      label$6 : {
       if (($5_1 | 0) != ($6_1 | 0)) {
        break label$6
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 1064 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 1064 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      label$7 : {
       if (($5_1 | 0) == ($2_1 | 0)) {
        break label$7
       }
      }
      HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($5_1 | 0) == ($1_1 | 0)) {
        break label$9
       }
       label$10 : {
        $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        if ($4_1 >>> 0 > $2_1 >>> 0) {
         break label$10
        }
        HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       }
       HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
       break label$8;
      }
      label$11 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$11
       }
       $5_1 = 0;
       break label$8;
      }
      label$12 : while (1) {
       $6_1 = $2_1;
       $5_1 = $4_1;
       $2_1 = $5_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       $2_1 = $5_1 + 16 | 0;
       $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$12
       }
       break label$12;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$13 : {
      label$14 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 1368 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$14
       }
       HEAP32[$2_1 >> 2] = $5_1;
       if ($5_1) {
        break label$13
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 1068 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 1068 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
      if (!$5_1) {
       break label$2
      }
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
     label$15 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$15
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[(0 + 1072 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$16 : {
    label$17 : {
     if ($2_1 & 2 | 0) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[(0 + 1088 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$18
      }
      HEAP32[(0 + 1088 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 1076 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 1076 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 1084 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 1072 | 0) >> 2] = 0;
      HEAP32[(0 + 1084 | 0) >> 2] = 0;
      return;
     }
     label$19 : {
      if ((HEAP32[(0 + 1084 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$19
      }
      HEAP32[(0 + 1084 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 1072 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 1072 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$20 : {
      label$21 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$21
       }
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       label$22 : {
        $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        $3_1 = $2_1 >>> 3 | 0;
        $2_1 = ($3_1 << 3 | 0) + 1104 | 0;
        if (($5_1 | 0) == ($2_1 | 0)) {
         break label$22
        }
        HEAP32[(0 + 1080 | 0) >> 2] | 0;
       }
       label$23 : {
        if (($4_1 | 0) != ($5_1 | 0)) {
         break label$23
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 1064 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 1064 | 0) >> 2] = wasm2js_i32$1;
        break label$20;
       }
       label$24 : {
        if (($4_1 | 0) == ($2_1 | 0)) {
         break label$24
        }
        HEAP32[(0 + 1080 | 0) >> 2] | 0;
       }
       HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
       break label$20;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$25 : {
       label$26 : {
        $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($5_1 | 0) == ($3_1 | 0)) {
         break label$26
        }
        label$27 : {
         $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         if ((HEAP32[(0 + 1080 | 0) >> 2] | 0) >>> 0 > $2_1 >>> 0) {
          break label$27
         }
         HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        }
        HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
        HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
        break label$25;
       }
       label$28 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$28
        }
        $5_1 = 0;
        break label$25;
       }
       label$29 : while (1) {
        $6_1 = $2_1;
        $5_1 = $4_1;
        $2_1 = $5_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        $2_1 = $5_1 + 16 | 0;
        $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$29
        }
        break label$29;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$20
      }
      label$30 : {
       label$31 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 1368 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$31
        }
        HEAP32[$2_1 >> 2] = $5_1;
        if ($5_1) {
         break label$30
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 1068 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 1068 | 0) >> 2] = wasm2js_i32$1;
        break label$20;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $5_1;
       if (!$5_1) {
        break label$20
       }
      }
      HEAP32[($5_1 + 24 | 0) >> 2] = $7_1;
      label$32 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$32
       }
       HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$20
      }
      HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $5_1;
     }
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     if (($1_1 | 0) != (HEAP32[(0 + 1084 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     HEAP32[(0 + 1072 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
   }
   label$33 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$33
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 1104 | 0;
    label$34 : {
     label$35 : {
      $4_1 = HEAP32[(0 + 1064 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$35
      }
      HEAP32[(0 + 1064 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$34;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 0;
   label$36 : {
    $4_1 = $0_1 >>> 8 | 0;
    if (!$4_1) {
     break label$36
    }
    $2_1 = 31;
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$36
    }
    $2_1 = (($4_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $4_1 << $2_1 | 0;
    $408_1 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $5_1 = $408_1 << $4_1 | 0;
    $415_1 = $5_1;
    $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($415_1 << $5_1 | 0) >>> 15 | 0) - ($4_1 | $2_1 | 0 | $5_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 1368 | 0;
   label$37 : {
    label$38 : {
     $5_1 = HEAP32[(0 + 1068 | 0) >> 2] | 0;
     $3_1 = 1 << $2_1 | 0;
     if ($5_1 & $3_1 | 0) {
      break label$38
     }
     HEAP32[$4_1 >> 2] = $1_1;
     HEAP32[(0 + 1068 | 0) >> 2] = $5_1 | $3_1 | 0;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     break label$37;
    }
    $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    label$39 : {
     label$40 : while (1) {
      $4_1 = $5_1;
      if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
       break label$39
      }
      $5_1 = $2_1 >>> 29 | 0;
      $2_1 = $2_1 << 1 | 0;
      $3_1 = ($4_1 + ($5_1 & 4 | 0) | 0) + 16 | 0;
      $5_1 = HEAP32[$3_1 >> 2] | 0;
      if ($5_1) {
       continue label$40
      }
      break label$40;
     };
     HEAP32[$3_1 >> 2] = $1_1;
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$37;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
   }
   $1_1 = (HEAP32[(0 + 1096 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 1096 | 0) >> 2] = $1_1;
   if ($1_1) {
    break label$1
   }
   $1_1 = 1520;
   label$41 : while (1) {
    $0_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $0_1 + 8 | 0;
    if ($0_1) {
     continue label$41
    }
    break label$41;
   };
   HEAP32[(0 + 1096 | 0) >> 2] = -1;
  }
 }
 
 function $34($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $35() {
  return $34(1560 | 0, 2 | 0) | 0 | 0;
 }
 
 function $36($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $23_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (HEAP32[($3_1 + 12 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 1;
  }
  label$2 : {
   label$3 : while (1) {
    $8_1 = $30(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $8_1;
    if (!(($8_1 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $35() | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
    label$4 : {
     label$5 : {
      if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$5
      }
      FUNCTION_TABLE[HEAP32[($3_1 + 4 | 0) >> 2] | 0]();
      break label$4;
     }
     break label$2;
    }
    continue label$3;
   };
  }
  $23_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $23_1 | 0;
 }
 
 function $37($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $32(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $38($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $39($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   $0_1 = $0_1 + 1 | 0;
   $1_1 = $1_1 + 1 | 0;
   label$2 : while (1) {
    $2_1 = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $40($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $38($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $41($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $42($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $43($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $40($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $44($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[4]($5_1) | 0;
  $37($5_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $45($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $43($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $46($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[5]($5_1) | 0;
  $37($5_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $47($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $43($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $48($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[6]($5_1) | 0;
  $37($5_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $49($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $23_1 = 0, $38_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 3 | 0) >> 0] = $2_1;
  label$1 : {
   label$2 : {
    if ((HEAPU8[($5_1 + 3 | 0) >> 0] | 0) & 1 | 0) {
     break label$2
    }
    (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = ($50(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0), HEAP8[(wasm2js_i32$0 + 15 | 0) >> 0] = wasm2js_i32$1;
    break label$1;
   }
   $23_1 = 1;
   label$3 : {
    if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0) {
     break label$3
    }
    $23_1 = ($39($51(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $51(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) == (0 | 0);
   }
   HEAP8[($5_1 + 15 | 0) >> 0] = $23_1 & 1 | 0;
  }
  $38_1 = (HEAPU8[($5_1 + 15 | 0) >> 0] | 0) & 1 | 0;
  global$0 = $5_1 + 16 | 0;
  return $38_1 | 0;
 }
 
 function $50($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = $1_1;
  $9_1 = HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $9_1;
  $17_1 = 1;
  label$1 : {
   if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0) {
    break label$1
   }
   $17_1 = ($39(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) == (0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return $17_1 & 1 | 0 | 0;
 }
 
 function $51($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $52($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $44_1 = 0, $41_1 = 0, $43_1 = 0, $7_1 = 0, $18_1 = 0, $28_1 = 0, $47_1 = 0, $68_1 = 0;
  $5_1 = global$0 - 80 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 72 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 68 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 64 | 0) >> 2] = $2_1;
  $7_1 = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($49($7_1 | 0, HEAP32[($5_1 + 68 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    HEAP8[($5_1 + 79 | 0) >> 0] = 1 & 1 | 0;
    break label$1;
   }
   $18_1 = HEAP32[($5_1 + 68 | 0) >> 2] | 0;
   label$3 : {
    label$4 : {
     if (($18_1 | 0) == (0 | 0) & 1 | 0) {
      break label$4
     }
     $28_1 = $53($18_1 | 0, 5456 | 0, 5504 | 0, 0 | 0) | 0;
     break label$3;
    }
    $28_1 = 0;
   }
   HEAP32[($5_1 + 60 | 0) >> 2] = $28_1;
   label$5 : {
    if (!((HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP8[($5_1 + 79 | 0) >> 0] = 0 & 1 | 0;
    break label$1;
   }
   $41_1 = 1;
   $43_1 = 0;
   $44_1 = 0;
   HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $44_1;
   HEAP32[($5_1 + 8 | 0) >> 2] = $7_1;
   HEAP32[($5_1 + 12 | 0) >> 2] = -1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $44_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = $44_1;
   HEAP32[($5_1 + 24 | 0) >> 2] = $44_1;
   HEAP32[($5_1 + 28 | 0) >> 2] = $44_1;
   HEAP32[($5_1 + 32 | 0) >> 2] = $44_1;
   HEAP32[($5_1 + 36 | 0) >> 2] = $44_1;
   HEAP32[($5_1 + 40 | 0) >> 2] = $44_1;
   HEAP32[($5_1 + 44 | 0) >> 2] = $44_1;
   HEAP32[($5_1 + 48 | 0) >> 2] = $44_1;
   HEAP8[($5_1 + 52 | 0) >> 0] = $43_1;
   HEAP8[($5_1 + 53 | 0) >> 0] = $43_1;
   HEAP8[($5_1 + 54 | 0) >> 0] = $43_1;
   HEAP32[($5_1 + 48 | 0) >> 2] = $41_1;
   $47_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$47_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($47_1, $5_1, HEAP32[(HEAP32[($5_1 + 64 | 0) >> 2] | 0) >> 2] | 0, $41_1);
   label$6 : {
    if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) == ($41_1 | 0) & 1 | 0)) {
     break label$6
    }
    HEAP32[(HEAP32[($5_1 + 64 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
    HEAP8[($5_1 + 79 | 0) >> 0] = 1 & 1 | 0;
    break label$1;
   }
   HEAP8[($5_1 + 79 | 0) >> 0] = 0 & 1 | 0;
  }
  $68_1 = (HEAPU8[($5_1 + 79 | 0) >> 0] | 0) & 1 | 0;
  global$0 = $5_1 + 80 | 0;
  return $68_1 | 0;
 }
 
 function $53($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $9_1 = 0, $8_1 = 0, $34_1 = 0, $37_1 = 0, $51_1 = 0, $56_1 = 0, $57_1 = 0, $104_1 = 0;
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  $8_1 = 0;
  $9_1 = 0;
  HEAP32[($6_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 84 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 80 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 76 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 92 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 72 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + -8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 68 | 0) >> 2] = (HEAP32[($6_1 + 92 | 0) >> 2] | 0) + (HEAP32[($6_1 + 72 | 0) >> 2] | 0) | 0;
  HEAP32[($6_1 + 64 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + -4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 60 | 0) >> 2] = $9_1;
  HEAP32[$6_1 >> 2] = HEAP32[($6_1 + 84 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 88 | 0) >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 80 | 0) >> 2] | 0;
  HEAP32[($6_1 + 16 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 48 | 0) >> 2] = $9_1;
  HEAP8[($6_1 + 52 | 0) >> 0] = $8_1;
  HEAP8[($6_1 + 53 | 0) >> 0] = $8_1;
  HEAP8[($6_1 + 54 | 0) >> 0] = $8_1;
  label$1 : {
   label$2 : {
    if (!(($49(HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $34_1 = 1;
    HEAP32[($6_1 + 48 | 0) >> 2] = $34_1;
    $37_1 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$37_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($37_1, $6_1, HEAP32[($6_1 + 68 | 0) >> 2] | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0, $34_1, 0 & 1 | 0);
    label$3 : {
     if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) == ($34_1 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
    }
    break label$1;
   }
   $51_1 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
   $56_1 = 1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$51_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($51_1, $6_1, HEAP32[($6_1 + 68 | 0) >> 2] | 0, $56_1, 0);
   $57_1 = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
   label$4 : {
    if ($57_1 >>> 0 > $56_1 >>> 0) {
     break label$4
    }
    label$5 : {
     switch ($57_1 | 0) {
     default:
      label$7 : {
       if (!((HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$7
       }
       if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$7
       }
       if (!((HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$7
       }
       HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
      }
      break label$4;
     case 1:
      break label$5;
     };
    }
    label$8 : {
     label$9 : {
      if ((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0) {
       break label$9
      }
      if (HEAP32[($6_1 + 40 | 0) >> 2] | 0) {
       break label$8
      }
      if (!((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$8
      }
      if (!((HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$8
      }
     }
     HEAP32[($6_1 + 60 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
    }
   }
  }
  $104_1 = HEAP32[($6_1 + 60 | 0) >> 2] | 0;
  global$0 = $6_1 + 96 | 0;
  return $104_1 | 0;
 }
 
 function $54($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $41_1 = 0;
  $6_1 = global$0 - 16 | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
    HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 36 | 0) >> 2] = 1;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     label$5 : {
      if (!((HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
     }
     break label$3;
    }
    $41_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    HEAP32[($41_1 + 36 | 0) >> 2] = (HEAP32[($41_1 + 36 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] = 2;
    HEAP8[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 54 | 0) >> 0] = 1;
   }
  }
  return;
 }
 
 function $55($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $8_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   if (!(($49($8_1 | 0, HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $54($8_1 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0);
  }
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $56($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $19_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $8_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($49($8_1 | 0, HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $54($8_1 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0);
    break label$1;
   }
   $19_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$19_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($19_1, HEAP32[($6_1 + 8 | 0) >> 2] | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0);
  }
  global$0 = $6_1 + 16 | 0;
  return;
 }
 
 function $57($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $27_1 = 0, $36_1 = 0, $28_1 = 0, $31_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  $8_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $7_1;
  label$1 : {
   if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) != ($7_1 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) >> 8 | 0;
   label$2 : {
    if (!((HEAP32[($8_1 + 4 | 0) >> 2] | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0) >> 2] | 0;
   }
  }
  $27_1 = HEAP32[$8_1 >> 2] | 0;
  $28_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  $31_1 = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) + (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0;
  label$3 : {
   label$4 : {
    if (!((HEAP32[($8_1 + 4 | 0) >> 2] | 0) & 2 | 0)) {
     break label$4
    }
    $36_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
    break label$3;
   }
   $36_1 = 2;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$27_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($27_1, $28_1, $31_1, $36_1);
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $58($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $33_1 = 0, $50_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  $8_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($49($8_1 | 0, HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, 0 & 1 | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $54($8_1 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = ($8_1 + 16 | 0) + ((HEAP32[($8_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[($6_1 + 8 | 0) >> 2] = $8_1 + 16 | 0;
   $57(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
   $33_1 = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 8 | 0;
   HEAP32[($6_1 + 8 | 0) >> 2] = $33_1;
   label$3 : {
    if (!($33_1 >>> 0 < (HEAP32[($6_1 + 12 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : while (1) {
      $57(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
      label$6 : {
       if (!((HEAPU8[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 54 | 0) >> 0] | 0) & 1 | 0)) {
        break label$6
       }
       break label$4;
      }
      $50_1 = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 8 | 0;
      HEAP32[($6_1 + 8 | 0) >> 2] = $50_1;
      if ($50_1 >>> 0 < (HEAP32[($6_1 + 12 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
       continue label$5
      }
      break label$5;
     };
    }
   }
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $59($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $28_1 = 0, $88_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAP8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 53 | 0) >> 0] = 1;
  label$1 : {
   if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 0] = 1;
   label$2 : {
    label$3 : {
     if (!((HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
      break label$3
     }
     $28_1 = 1;
     HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2] = $28_1;
     label$4 : {
      if (!((HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) == ($28_1 | 0) & 1 | 0)) {
       break label$4
      }
      if (!((HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 54 | 0) >> 0] = 1;
     }
     break label$2;
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      label$7 : {
       if (!((HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
        break label$7
       }
       HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
      }
      label$8 : {
       if (!((HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$8
       }
       if (!((HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$8
       }
       HEAP8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 54 | 0) >> 0] = 1;
      }
      break label$5;
     }
     $88_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
     HEAP32[($88_1 + 36 | 0) >> 2] = (HEAP32[($88_1 + 36 | 0) >> 2] | 0) + 1 | 0;
     HEAP8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 54 | 0) >> 0] = 1;
    }
   }
  }
  return;
 }
 
 function $60($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  label$1 : {
   if (!((HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!((HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
   }
  }
  return;
 }
 
 function $61($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $9_1 = 0, $82_1 = 0, $136_1 = 0, $174_1 = 0, $205_1 = 0, $244_1 = 0, $272_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP8[($7_1 + 31 | 0) >> 0] = $4_1;
  $9_1 = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($49($9_1 | 0, HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, (HEAPU8[($7_1 + 31 | 0) >> 0] | 0) & 1 | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $60($9_1 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!(($49($9_1 | 0, HEAP32[(HEAP32[($7_1 + 40 | 0) >> 2] | 0) >> 2] | 0 | 0, (HEAPU8[($7_1 + 31 | 0) >> 0] | 0) & 1 | 0 | 0) | 0) & 1 | 0)) {
      break label$4
     }
     label$5 : {
      label$6 : {
       label$7 : {
        if ((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0) {
         break label$7
        }
        if (!((HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$6
        }
       }
       label$8 : {
        if (!((HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$8
        }
        HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 32 | 0) >> 2] = 1;
       }
       break label$5;
      }
      HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
      HEAP8[($7_1 + 30 | 0) >> 0] = 0;
      label$9 : {
       if (!((HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0) != (4 | 0) & 1 | 0)) {
        break label$9
       }
       HEAP8[($7_1 + 29 | 0) >> 0] = 0;
       HEAP32[($7_1 + 24 | 0) >> 2] = ($9_1 + 16 | 0) + ((HEAP32[($9_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
       HEAP32[($7_1 + 20 | 0) >> 2] = $9_1 + 16 | 0;
       label$10 : {
        label$11 : while (1) {
         if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0) >>> 0 < (HEAP32[($7_1 + 24 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
          break label$10
         }
         $82_1 = 0;
         HEAP8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 52 | 0) >> 0] = $82_1;
         HEAP8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 53 | 0) >> 0] = $82_1;
         $62(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, 1 | 0, (HEAPU8[($7_1 + 31 | 0) >> 0] | 0) & 1 | 0 | 0);
         label$12 : {
          if (!((HEAPU8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 54 | 0) >> 0] | 0) & 1 | 0)) {
           break label$12
          }
          break label$10;
         }
         label$13 : {
          if (!((HEAPU8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 53 | 0) >> 0] | 0) & 1 | 0)) {
           break label$13
          }
          HEAP8[($7_1 + 29 | 0) >> 0] = 1;
          label$14 : {
           label$15 : {
            if (!((HEAPU8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 52 | 0) >> 0] | 0) & 1 | 0)) {
             break label$15
            }
            HEAP8[($7_1 + 30 | 0) >> 0] = 1;
            label$16 : {
             if (!((HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
              break label$16
             }
             break label$10;
            }
            label$17 : {
             if ((HEAP32[($9_1 + 8 | 0) >> 2] | 0) & 2 | 0) {
              break label$17
             }
             break label$10;
            }
            break label$14;
           }
           label$18 : {
            if ((HEAP32[($9_1 + 8 | 0) >> 2] | 0) & 1 | 0) {
             break label$18
            }
            break label$10;
           }
          }
         }
         HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 8 | 0;
         continue label$11;
        };
       }
       label$19 : {
        label$20 : {
         if (!((HEAPU8[($7_1 + 29 | 0) >> 0] | 0) & 1 | 0)) {
          break label$20
         }
         HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2] = 3;
         break label$19;
        }
        HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 44 | 0) >> 2] = 4;
       }
      }
      label$21 : {
       if ((HEAPU8[($7_1 + 30 | 0) >> 0] | 0) & 1 | 0) {
        break label$21
       }
       HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
       $136_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
       HEAP32[($136_1 + 40 | 0) >> 2] = (HEAP32[($136_1 + 40 | 0) >> 2] | 0) + 1 | 0;
       label$22 : {
        if (!((HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$22
        }
        if (!((HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
         break label$22
        }
        HEAP8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 54 | 0) >> 0] = 1;
       }
      }
     }
     break label$3;
    }
    HEAP32[($7_1 + 16 | 0) >> 2] = ($9_1 + 16 | 0) + ((HEAP32[($9_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
    HEAP32[($7_1 + 12 | 0) >> 2] = $9_1 + 16 | 0;
    $63(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, (HEAPU8[($7_1 + 31 | 0) >> 0] | 0) & 1 | 0 | 0);
    $174_1 = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 8 | 0;
    HEAP32[($7_1 + 12 | 0) >> 2] = $174_1;
    label$23 : {
     if (!($174_1 >>> 0 < (HEAP32[($7_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$23
     }
     label$24 : {
      label$25 : {
       label$26 : {
        if ((HEAP32[($9_1 + 8 | 0) >> 2] | 0) & 2 | 0) {
         break label$26
        }
        if (!((HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$25
        }
       }
       label$27 : {
        label$28 : while (1) {
         label$29 : {
          if (!((HEAPU8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 54 | 0) >> 0] | 0) & 1 | 0)) {
           break label$29
          }
          break label$27;
         }
         $63(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, (HEAPU8[($7_1 + 31 | 0) >> 0] | 0) & 1 | 0 | 0);
         $205_1 = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 8 | 0;
         HEAP32[($7_1 + 12 | 0) >> 2] = $205_1;
         if ($205_1 >>> 0 < (HEAP32[($7_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
          continue label$28
         }
         break label$28;
        };
       }
       break label$24;
      }
      label$30 : {
       label$31 : {
        if (!((HEAP32[($9_1 + 8 | 0) >> 2] | 0) & 1 | 0)) {
         break label$31
        }
        label$32 : {
         label$33 : while (1) {
          label$34 : {
           if (!((HEAPU8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 54 | 0) >> 0] | 0) & 1 | 0)) {
            break label$34
           }
           break label$32;
          }
          label$35 : {
           if (!((HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
            break label$35
           }
           if (!((HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
            break label$35
           }
           break label$32;
          }
          $63(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, (HEAPU8[($7_1 + 31 | 0) >> 0] | 0) & 1 | 0 | 0);
          $244_1 = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 8 | 0;
          HEAP32[($7_1 + 12 | 0) >> 2] = $244_1;
          if ($244_1 >>> 0 < (HEAP32[($7_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
           continue label$33
          }
          break label$33;
         };
        }
        break label$30;
       }
       label$36 : {
        label$37 : while (1) {
         label$38 : {
          if (!((HEAPU8[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 54 | 0) >> 0] | 0) & 1 | 0)) {
           break label$38
          }
          break label$36;
         }
         label$39 : {
          if (!((HEAP32[((HEAP32[($7_1 + 40 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
           break label$39
          }
          break label$36;
         }
         $63(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, (HEAPU8[($7_1 + 31 | 0) >> 0] | 0) & 1 | 0 | 0);
         $272_1 = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + 8 | 0;
         HEAP32[($7_1 + 12 | 0) >> 2] = $272_1;
         if ($272_1 >>> 0 < (HEAP32[($7_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
          continue label$37
         }
         break label$37;
        };
       }
      }
     }
    }
   }
  }
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $62($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $10_1 = 0, $23_1 = 0, $33_1 = 0, $24_1 = 0, $25_1 = 0, $28_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
  HEAP8[($8_1 + 11 | 0) >> 0] = $5_1;
  $10_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
  HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($10_1 + 4 | 0) >> 2] | 0) >> 8 | 0;
  label$1 : {
   if (!((HEAP32[($10_1 + 4 | 0) >> 2] | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[$8_1 >> 2] = HEAP32[(HEAP32[($8_1 + 16 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($8_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[$8_1 >> 2] | 0) + (HEAP32[($8_1 + 4 | 0) >> 2] | 0) | 0) >> 2] | 0;
  }
  $23_1 = HEAP32[$10_1 >> 2] | 0;
  $24_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
  $25_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
  $28_1 = (HEAP32[($8_1 + 16 | 0) >> 2] | 0) + (HEAP32[($8_1 + 4 | 0) >> 2] | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($10_1 + 4 | 0) >> 2] | 0) & 2 | 0)) {
     break label$3
    }
    $33_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    break label$2;
   }
   $33_1 = 2;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$23_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($23_1, $24_1, $25_1, $28_1, $33_1, (HEAPU8[($8_1 + 11 | 0) >> 0] | 0) & 1 | 0);
  global$0 = $8_1 + 32 | 0;
  return;
 }
 
 function $63($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $9_1 = 0, $22_1 = 0, $31_1 = 0, $23_1 = 0, $26_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP8[($7_1 + 15 | 0) >> 0] = $4_1;
  $9_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = (HEAP32[($9_1 + 4 | 0) >> 2] | 0) >> 8 | 0;
  label$1 : {
   if (!((HEAP32[($9_1 + 4 | 0) >> 2] | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($7_1 + 20 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 4 | 0) >> 2] | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0) >> 2] | 0;
  }
  $22_1 = HEAP32[$9_1 >> 2] | 0;
  $23_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
  $26_1 = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + (HEAP32[($7_1 + 8 | 0) >> 2] | 0) | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[($9_1 + 4 | 0) >> 2] | 0) & 2 | 0)) {
     break label$3
    }
    $31_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    break label$2;
   }
   $31_1 = 2;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$22_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($22_1, $23_1, $26_1, $31_1, (HEAPU8[($7_1 + 15 | 0) >> 0] | 0) & 1 | 0);
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $64($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $9_1 = 0, $66_1 = 0, $69_1 = 0, $101_1 = 0, $122_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP8[($7_1 + 15 | 0) >> 0] = $4_1;
  $9_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($49($9_1 | 0, HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, (HEAPU8[($7_1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $60($9_1 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!(($49($9_1 | 0, HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0, (HEAPU8[($7_1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0) | 0) & 1 | 0)) {
      break label$4
     }
     label$5 : {
      label$6 : {
       label$7 : {
        if ((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0) {
         break label$7
        }
        if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
         break label$6
        }
       }
       label$8 : {
        if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$8
        }
        HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] = 1;
       }
       break label$5;
      }
      HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
      HEAP8[($7_1 + 14 | 0) >> 0] = 0;
      label$9 : {
       if (!((HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0 | 0) != (4 | 0) & 1 | 0)) {
        break label$9
       }
       $66_1 = 0;
       HEAP8[($7_1 + 13 | 0) >> 0] = $66_1;
       HEAP8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 0] = $66_1;
       HEAP8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 53 | 0) >> 0] = $66_1;
       $69_1 = HEAP32[($9_1 + 8 | 0) >> 2] | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$69_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($69_1, HEAP32[($7_1 + 24 | 0) >> 2] | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0, 1, (HEAPU8[($7_1 + 15 | 0) >> 0] | 0) & 1 | 0);
       label$10 : {
        if (!((HEAPU8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 53 | 0) >> 0] | 0) & 1 | 0)) {
         break label$10
        }
        HEAP8[($7_1 + 13 | 0) >> 0] = 1;
        label$11 : {
         if (!((HEAPU8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 0] | 0) & 1 | 0)) {
          break label$11
         }
         HEAP8[($7_1 + 14 | 0) >> 0] = 1;
        }
       }
       label$12 : {
        label$13 : {
         if (!((HEAPU8[($7_1 + 13 | 0) >> 0] | 0) & 1 | 0)) {
          break label$13
         }
         HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 44 | 0) >> 2] = 3;
         break label$12;
        }
        HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 44 | 0) >> 2] = 4;
       }
      }
      label$14 : {
       if ((HEAPU8[($7_1 + 14 | 0) >> 0] | 0) & 1 | 0) {
        break label$14
       }
       HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
       $101_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
       HEAP32[($101_1 + 40 | 0) >> 2] = (HEAP32[($101_1 + 40 | 0) >> 2] | 0) + 1 | 0;
       label$15 : {
        if (!((HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$15
        }
        if (!((HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
         break label$15
        }
        HEAP8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 54 | 0) >> 0] = 1;
       }
      }
     }
     break label$3;
    }
    $122_1 = HEAP32[($9_1 + 8 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$122_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($122_1, HEAP32[($7_1 + 24 | 0) >> 2] | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0, (HEAPU8[($7_1 + 15 | 0) >> 0] | 0) & 1 | 0);
   }
  }
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $65($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $9_1 = 0, $59_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP8[($7_1 + 15 | 0) >> 0] = $4_1;
  $9_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($49($9_1 | 0, HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, (HEAPU8[($7_1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $60($9_1 | 0, HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   label$3 : {
    if (!(($49($9_1 | 0, HEAP32[(HEAP32[($7_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0, (HEAPU8[($7_1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0) | 0) & 1 | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      label$6 : {
       if ((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) & 1 | 0) {
        break label$6
       }
       if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$5
       }
      }
      label$7 : {
       if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$7
       }
       HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] = 1;
      }
      break label$4;
     }
     HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
     HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
     $59_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
     HEAP32[($59_1 + 40 | 0) >> 2] = (HEAP32[($59_1 + 40 | 0) >> 2] | 0) + 1 | 0;
     label$8 : {
      if (!((HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 36 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$8
      }
      if (!((HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$8
      }
      HEAP8[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 54 | 0) >> 0] = 1;
     }
     HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 44 | 0) >> 2] = 4;
    }
   }
  }
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $66($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $10_1 = 0, $23_1 = 0, $24_1 = 0, $79_1 = 0, $112_1 = 0, $113_1 = 0, $152_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
  HEAP8[($8_1 + 11 | 0) >> 0] = $5_1;
  $10_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($49($10_1 | 0, HEAP32[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, (HEAPU8[($8_1 + 11 | 0) >> 0] | 0) & 1 | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $59($10_1 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $23_1 = 0;
   $24_1 = 0;
   HEAP8[($8_1 + 10 | 0) >> 0] = (HEAPU8[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 0] | 0) & 1 | 0;
   HEAP8[($8_1 + 9 | 0) >> 0] = (HEAPU8[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 53 | 0) >> 0] | 0) & 1 | 0;
   HEAP32[($8_1 + 4 | 0) >> 2] = ($10_1 + 16 | 0) + ((HEAP32[($10_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
   HEAP32[$8_1 >> 2] = $10_1 + 16 | 0;
   HEAP8[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 0] = $24_1;
   HEAP8[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 53 | 0) >> 0] = $24_1;
   $62(HEAP32[$8_1 >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, (HEAPU8[($8_1 + 11 | 0) >> 0] | 0) & 1 | 0 | 0);
   HEAP8[($8_1 + 10 | 0) >> 0] = ((HEAPU8[($8_1 + 10 | 0) >> 0] | 0) & 1 | 0 | ((HEAPU8[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 0] | 0) & 1 | 0) | 0 | 0) != ($23_1 | 0) & 1 | 0;
   HEAP8[($8_1 + 9 | 0) >> 0] = ((HEAPU8[($8_1 + 9 | 0) >> 0] | 0) & 1 | 0 | ((HEAPU8[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 53 | 0) >> 0] | 0) & 1 | 0) | 0 | 0) != ($23_1 | 0) & 1 | 0;
   $79_1 = (HEAP32[$8_1 >> 2] | 0) + 8 | 0;
   HEAP32[$8_1 >> 2] = $79_1;
   label$3 : {
    if (!($79_1 >>> 0 < (HEAP32[($8_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : while (1) {
      label$6 : {
       if (!((HEAPU8[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 54 | 0) >> 0] | 0) & 1 | 0)) {
        break label$6
       }
       break label$4;
      }
      label$7 : {
       label$8 : {
        if (!((HEAPU8[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 0] | 0) & 1 | 0)) {
         break label$8
        }
        label$9 : {
         if (!((HEAP32[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
          break label$9
         }
         break label$4;
        }
        label$10 : {
         if ((HEAP32[($10_1 + 8 | 0) >> 2] | 0) & 2 | 0) {
          break label$10
         }
         break label$4;
        }
        break label$7;
       }
       label$11 : {
        if (!((HEAPU8[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 53 | 0) >> 0] | 0) & 1 | 0)) {
         break label$11
        }
        label$12 : {
         if ((HEAP32[($10_1 + 8 | 0) >> 2] | 0) & 1 | 0) {
          break label$12
         }
         break label$4;
        }
       }
      }
      $112_1 = 0;
      $113_1 = 0;
      HEAP8[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 0] = $113_1;
      HEAP8[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 53 | 0) >> 0] = $113_1;
      $62(HEAP32[$8_1 >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, (HEAPU8[($8_1 + 11 | 0) >> 0] | 0) & 1 | 0 | 0);
      HEAP8[($8_1 + 10 | 0) >> 0] = ((HEAPU8[($8_1 + 10 | 0) >> 0] | 0) & 1 | 0 | ((HEAPU8[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 0] | 0) & 1 | 0) | 0 | 0) != ($112_1 | 0) & 1 | 0;
      HEAP8[($8_1 + 9 | 0) >> 0] = ((HEAPU8[($8_1 + 9 | 0) >> 0] | 0) & 1 | 0 | ((HEAPU8[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 53 | 0) >> 0] | 0) & 1 | 0) | 0 | 0) != ($112_1 | 0) & 1 | 0;
      $152_1 = (HEAP32[$8_1 >> 2] | 0) + 8 | 0;
      HEAP32[$8_1 >> 2] = $152_1;
      if ($152_1 >>> 0 < (HEAP32[($8_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0) {
       continue label$5
      }
      break label$5;
     };
    }
   }
   HEAP8[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 52 | 0) >> 0] = (HEAPU8[($8_1 + 10 | 0) >> 0] | 0) & 1 | 0;
   HEAP8[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 53 | 0) >> 0] = (HEAPU8[($8_1 + 9 | 0) >> 0] | 0) & 1 | 0;
  }
  global$0 = $8_1 + 32 | 0;
  return;
 }
 
 function $67($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $10_1 = 0, $23_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
  HEAP8[($8_1 + 11 | 0) >> 0] = $5_1;
  $10_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(($49($10_1 | 0, HEAP32[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, (HEAPU8[($8_1 + 11 | 0) >> 0] | 0) & 1 | 0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $59($10_1 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $23_1 = HEAP32[($10_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$23_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($23_1, HEAP32[($8_1 + 24 | 0) >> 2] | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0, (HEAPU8[($8_1 + 11 | 0) >> 0] | 0) & 1 | 0);
  }
  global$0 = $8_1 + 32 | 0;
  return;
 }
 
 function $68($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
  HEAP8[($8_1 + 11 | 0) >> 0] = $5_1;
  $10_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if (!(($49($10_1 | 0, HEAP32[((HEAP32[($8_1 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, (HEAPU8[($8_1 + 11 | 0) >> 0] | 0) & 1 | 0 | 0) | 0) & 1 | 0)) {
    break label$1
   }
   $59($10_1 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0);
  }
  global$0 = $8_1 + 32 | 0;
  return;
 }
 
 function $69($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = 5748;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $70($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $71($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $72($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $69($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 5776;
  return $0_1 | 0;
 }
 
 function $73($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $74($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $75($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[(0 + 2972 | 0) >> 2] | 0](HEAP32[($0_1 + -4 | 0) >> 2] | 0);
  }
 }
 
 function $76($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  label$1 : {
   $0_1 = FUNCTION_TABLE[HEAP32[(0 + 2968 | 0) >> 2] | 0](($0_1 + $1_1 | 0) + 3 | 0) | 0;
   if (!$0_1) {
    break label$1
   }
   $2_1 = (($0_1 + $1_1 | 0) + 3 | 0) & (0 - $1_1 | 0) | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $0_1;
  }
  return $2_1 | 0;
 }
 
 function $77($0_1) {
  $0_1 = $0_1 | 0;
  $32($0_1 | 0);
 }
 
 function $78($0_1) {
  $0_1 = $0_1 | 0;
  return $30($0_1 | 0) | 0 | 0;
 }
 
 function $79($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(0 + 1564 | 0) >> 2] = (HEAP32[(0 + 1564 | 0) >> 2] | 0) + 1 | 0;
  return FUNCTION_TABLE[HEAP32[(0 + 2960 | 0) >> 2] | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $80($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   HEAP32[(0 + 1568 | 0) >> 2] = (HEAP32[(0 + 1568 | 0) >> 2] | 0) + 1 | 0;
   FUNCTION_TABLE[HEAP32[(0 + 2964 | 0) >> 2] | 0]($0_1);
  }
 }
 
 function $81($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $3_1 = 0, $5_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), $13_1 = 0, i64toi32_i32$0 = 0, $12_1 = 0, $4_1 = 0, $11_1 = 0, $14_1 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 32 | 0;
  HEAP32[($3_1 + 24 | 0) >> 2] = -8388609;
  i64toi32_i32$0 = -8388609;
  HEAP32[($3_1 + 16 | 0) >> 2] = -8388609;
  HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 2139095039;
  i64toi32_i32$0 = 2139095039;
  HEAP32[$3_1 >> 2] = 2139095039;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($4_1 | 0) >= (1 | 0)) {
     break label$2
    }
    $5_1 = Math_fround(3402823466385288598117041.0e14);
    $6_1 = Math_fround(-3402823466385288598117041.0e14);
    $7_1 = Math_fround(-3402823466385288598117041.0e14);
    $8_1 = Math_fround(-3402823466385288598117041.0e14);
    $9_1 = Math_fround(3402823466385288598117041.0e14);
    $10_1 = Math_fround(3402823466385288598117041.0e14);
    break label$1;
   }
   $11_1 = $3_1 + 16 | 0;
   $1_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 16 | 0;
   $12_1 = 0;
   $5_1 = Math_fround(3402823466385288598117041.0e14);
   $6_1 = Math_fround(-3402823466385288598117041.0e14);
   $7_1 = Math_fround(-3402823466385288598117041.0e14);
   $8_1 = Math_fround(-3402823466385288598117041.0e14);
   $9_1 = Math_fround(3402823466385288598117041.0e14);
   $10_1 = Math_fround(3402823466385288598117041.0e14);
   label$3 : while (1) {
    $13_1 = $1_1 + -16 | 0;
    $14_1 = Math_fround(HEAPF32[$13_1 >> 2]);
    $10_1 = $10_1 > $14_1 ? $14_1 : $10_1;
    HEAPF32[$3_1 >> 2] = $10_1;
    $15_1 = HEAP32[(($9_1 > Math_fround(HEAPF32[($1_1 + -12 | 0) >> 2]) ? $13_1 : $3_1) + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $15_1;
    $13_1 = HEAP32[(($5_1 > Math_fround(HEAPF32[($1_1 + -8 | 0) >> 2]) ? $13_1 : $3_1) + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $13_1;
    $5_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $8_1 = $8_1 < $5_1 ? $5_1 : $8_1;
    HEAPF32[($3_1 + 16 | 0) >> 2] = $8_1;
    $16_1 = HEAP32[(($7_1 < Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) ? $1_1 : $11_1) + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 20 | 0) >> 2] = $16_1;
    $17_1 = HEAP32[(($6_1 < Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) ? $1_1 : $11_1) + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 24 | 0) >> 2] = $17_1;
    $9_1 = (wasm2js_scratch_store_i32(0, $15_1), wasm2js_scratch_load_f32());
    $5_1 = (wasm2js_scratch_store_i32(0, $13_1), wasm2js_scratch_load_f32());
    $1_1 = $1_1 + 36 | 0;
    $7_1 = (wasm2js_scratch_store_i32(0, $16_1), wasm2js_scratch_load_f32());
    $6_1 = (wasm2js_scratch_store_i32(0, $17_1), wasm2js_scratch_load_f32());
    $12_1 = $12_1 + 1 | 0;
    if (($12_1 | 0) < ($4_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = 0;
  $6_1 = Math_fround($6_1 + $2_1);
  HEAPF32[($0_1 + 48 | 0) >> 2] = $6_1;
  $7_1 = Math_fround($7_1 + $2_1);
  HEAPF32[($0_1 + 44 | 0) >> 2] = $7_1;
  $8_1 = Math_fround($8_1 + $2_1);
  HEAPF32[($0_1 + 40 | 0) >> 2] = $8_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  $5_1 = Math_fround($5_1 - $2_1);
  HEAPF32[($0_1 + 32 | 0) >> 2] = $5_1;
  $9_1 = Math_fround($9_1 - $2_1);
  HEAPF32[($0_1 + 28 | 0) >> 2] = $9_1;
  $10_1 = Math_fround($10_1 - $2_1);
  HEAPF32[($0_1 + 24 | 0) >> 2] = $10_1;
  HEAPF32[($0_1 + 64 | 0) >> 2] = Math_fround(Math_fround(65535.0) / Math_fround($6_1 - $5_1));
  HEAPF32[($0_1 + 60 | 0) >> 2] = Math_fround(Math_fround(65535.0) / Math_fround($7_1 - $9_1));
  HEAPF32[($0_1 + 56 | 0) >> 2] = Math_fround(Math_fround(65535.0) / Math_fround($8_1 - $10_1));
 }
 
 function $82($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $11_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $10_1 = Math_fround(0), $6_1 = Math_fround(0), $9_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0);
  $4_1 = $3_1 - $2_1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($3_1 | 0) > ($2_1 | 0)) {
       break label$4
      }
      $5_1 = Math_fround($4_1 | 0);
      $6_1 = Math_fround(0.0);
      break label$3;
     }
     $7_1 = ((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + Math_imul($2_1, 36) | 0) + 24 | 0;
     $8_1 = Math_fround(0.0);
     $9_1 = $4_1;
     $10_1 = Math_fround(0.0);
     $11_1 = Math_fround(0.0);
     label$5 : while (1) {
      $10_1 = Math_fround($10_1 + Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + -4 | 0) >> 2]) + Math_fround(HEAPF32[($7_1 + -20 | 0) >> 2])) * Math_fround(.5)));
      $11_1 = Math_fround($11_1 + Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + -8 | 0) >> 2]) + Math_fround(HEAPF32[($7_1 + -24 | 0) >> 2])) * Math_fround(.5)));
      $8_1 = Math_fround($8_1 + Math_fround(Math_fround(Math_fround(HEAPF32[$7_1 >> 2]) + Math_fround(HEAPF32[($7_1 + -16 | 0) >> 2])) * Math_fround(.5)));
      $7_1 = $7_1 + 36 | 0;
      $9_1 = $9_1 + -1 | 0;
      if ($9_1) {
       continue label$5
      }
      break label$5;
     };
     $5_1 = Math_fround($4_1 | 0);
     $6_1 = Math_fround(0.0);
     if (($3_1 | 0) > ($2_1 | 0)) {
      break label$2
     }
    }
    $8_1 = Math_fround(0.0);
    $10_1 = Math_fround(0.0);
    break label$1;
   }
   $6_1 = Math_fround(Math_fround(1.0) / $5_1);
   $12_1 = Math_fround($6_1 * $8_1);
   $13_1 = Math_fround($6_1 * $10_1);
   $14_1 = Math_fround($6_1 * $11_1);
   $9_1 = $3_1 - $2_1 | 0;
   $7_1 = ((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + Math_imul($2_1, 36) | 0) + 24 | 0;
   $10_1 = Math_fround(0.0);
   $8_1 = Math_fround(0.0);
   $6_1 = Math_fround(0.0);
   label$6 : while (1) {
    $11_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + -4 | 0) >> 2]) + Math_fround(HEAPF32[($7_1 + -20 | 0) >> 2])) * Math_fround(.5)) - $13_1);
    $8_1 = Math_fround($8_1 + Math_fround($11_1 * $11_1));
    $11_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + -8 | 0) >> 2]) + Math_fround(HEAPF32[($7_1 + -24 | 0) >> 2])) * Math_fround(.5)) - $14_1);
    $6_1 = Math_fround($6_1 + Math_fround($11_1 * $11_1));
    $11_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$7_1 >> 2]) + Math_fround(HEAPF32[($7_1 + -16 | 0) >> 2])) * Math_fround(.5)) - $12_1);
    $10_1 = Math_fround($10_1 + Math_fround($11_1 * $11_1));
    $7_1 = $7_1 + 36 | 0;
    $9_1 = $9_1 + -1 | 0;
    if ($9_1) {
     continue label$6
    }
    break label$6;
   };
  }
  $11_1 = Math_fround(Math_fround(1.0) / Math_fround($5_1 + Math_fround(-1.0)));
  $8_1 = Math_fround($11_1 * $8_1);
  $10_1 = Math_fround($11_1 * $10_1);
  $11_1 = Math_fround($11_1 * $6_1);
  return ($11_1 < $8_1 ? ($8_1 < $10_1 ? 2 : 1) : ($11_1 < $10_1) << 1 | 0) | 0;
 }
 
 function $83($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$1 = 0, $12_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $10_1 = 0, $14_1 = 0, $7_1 = Math_fround(0), $11_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $18_1 = 0, $6_1 = 0, $13_1 = Math_fround(0), $17_1 = 0, $16_1 = 0, $20_1 = 0, $15_1 = 0, $19_1 = 0, $19$hi = 0, $168_1 = 0, $21_1 = 0, $21$hi = 0, $174_1 = 0, $22_1 = 0, $22$hi = 0, $180_1 = 0, $23_1 = 0, $23$hi = 0, $196_1 = 0, $217_1 = 0, $221_1 = 0, $225_1 = 0, $231_1 = 0;
  $5_1 = global$0 - 64 | 0;
  i64toi32_i32$1 = $5_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $6_1 = $3_1 - $2_1 | 0;
  $7_1 = Math_fround(0.0);
  $8_1 = Math_fround(0.0);
  $9_1 = Math_fround(0.0);
  label$1 : {
   $10_1 = ($3_1 | 0) <= ($2_1 | 0);
   if ($10_1) {
    break label$1
   }
   $11_1 = $3_1 - $2_1 | 0;
   $12_1 = ((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + Math_imul($2_1, 36) | 0) + 24 | 0;
   $7_1 = Math_fround(0.0);
   $8_1 = Math_fround(0.0);
   $9_1 = Math_fround(0.0);
   label$2 : while (1) {
    $8_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($12_1 + -4 | 0) >> 2]) + Math_fround(HEAPF32[($12_1 + -20 | 0) >> 2])) * Math_fround(.5)) + $8_1);
    $9_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($12_1 + -8 | 0) >> 2]) + Math_fround(HEAPF32[($12_1 + -24 | 0) >> 2])) * Math_fround(.5)) + $9_1);
    $7_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$12_1 >> 2]) + Math_fround(HEAPF32[($12_1 + -16 | 0) >> 2])) * Math_fround(.5)) + $7_1);
    $12_1 = $12_1 + 36 | 0;
    $11_1 = $11_1 + -1 | 0;
    if ($11_1) {
     continue label$2
    }
    break label$2;
   };
   HEAPF32[($5_1 + 24 | 0) >> 2] = $7_1;
   HEAPF32[($5_1 + 20 | 0) >> 2] = $8_1;
   HEAPF32[($5_1 + 16 | 0) >> 2] = $9_1;
  }
  $13_1 = Math_fround(Math_fround(1.0) / Math_fround($6_1 | 0));
  HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround($13_1 * $7_1);
  HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround($13_1 * $8_1);
  HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround($13_1 * $9_1);
  $14_1 = $2_1;
  label$3 : {
   if ($10_1) {
    break label$3
   }
   $12_1 = $4_1 << 2 | 0;
   $7_1 = Math_fround(HEAPF32[(($5_1 + 16 | 0) + $12_1 | 0) >> 2]);
   $11_1 = Math_imul($2_1, 36) + 16 | 0;
   $15_1 = $5_1 + $12_1 | 0;
   $16_1 = ($5_1 + 32 | 0) + 16 | 0;
   $17_1 = $6_1;
   $14_1 = $2_1;
   label$4 : while (1) {
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    $12_1 = $4_1 + $11_1 | 0;
    $18_1 = $12_1 + 8 | 0;
    HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$18_1 >> 2]) + Math_fround(HEAPF32[($12_1 + -8 | 0) >> 2])) * Math_fround(.5));
    HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($12_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($12_1 + -12 | 0) >> 2])) * Math_fround(.5));
    $10_1 = $12_1 + -16 | 0;
    HEAPF32[$5_1 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$12_1 >> 2]) + Math_fround(HEAPF32[$10_1 >> 2])) * Math_fround(.5));
    label$5 : {
     if (Math_fround(HEAPF32[$15_1 >> 2]) > $7_1 ^ 1 | 0) {
      break label$5
     }
     i64toi32_i32$2 = $10_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$0;
     $19$hi = i64toi32_i32$1;
     $20_1 = Math_imul($14_1, 36);
     $4_1 = $4_1 + $20_1 | 0;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $168_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $10_1;
     HEAP32[i64toi32_i32$1 >> 2] = $168_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = HEAP32[$12_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$0;
     $21$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1 + 16 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $174_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $12_1;
     HEAP32[i64toi32_i32$1 >> 2] = $174_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $22_1 = i64toi32_i32$0;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1 + 24 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $180_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $18_1;
     HEAP32[i64toi32_i32$1 >> 2] = $180_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $12_1 = $12_1 + 16 | 0;
     $18_1 = HEAP32[$12_1 >> 2] | 0;
     HEAP32[$12_1 >> 2] = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
     $12_1 = $10_1 + 8 | 0;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = HEAP32[$12_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
     $23_1 = i64toi32_i32$0;
     $23$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $196_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $12_1;
     HEAP32[i64toi32_i32$1 >> 2] = $196_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$1 = $16_1;
     HEAP32[i64toi32_i32$1 >> 2] = $21_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $22_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $10_1 = ($5_1 + 32 | 0) + 8 | 0;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$1 = $10_1;
     HEAP32[i64toi32_i32$1 >> 2] = $23_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $12_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $20_1 | 0;
     HEAP32[($12_1 + 32 | 0) >> 2] = $18_1;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$1 = $5_1;
     HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $19_1;
     HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
     $217_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $12_1;
     HEAP32[$12_1 >> 2] = $217_1;
     HEAP32[($12_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $10_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $221_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $12_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $221_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $16_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $225_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $12_1 + 16 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $225_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = ($5_1 + 32 | 0) + 24 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $231_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $12_1 + 24 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $231_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $14_1 = $14_1 + 1 | 0;
    }
    $11_1 = $11_1 + 36 | 0;
    $17_1 = $17_1 + -1 | 0;
    if ($17_1) {
     continue label$4
    }
    break label$4;
   };
  }
  label$6 : {
   label$7 : {
    $12_1 = ($6_1 | 0) / (3 | 0) | 0;
    if (($14_1 | 0) <= ($12_1 + $2_1 | 0 | 0)) {
     break label$7
    }
    if (($14_1 | 0) < (($12_1 ^ -1 | 0) + $3_1 | 0 | 0)) {
     break label$6
    }
   }
   $14_1 = ($6_1 >> 1 | 0) + $2_1 | 0;
  }
  return $14_1 | 0;
 }
 
 function $84($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $8_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $9_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $20_1 = 0, $4_1 = 0, $14_1 = 0, $15_1 = Math_fround(0), $11_1 = Math_fround(0), $17_1 = Math_fround(0), $16_1 = Math_fround(0), $5_1 = 0, i64toi32_i32$0 = 0, $18_1 = Math_fround(0), $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $5_1 + 1 | 0;
  label$1 : {
   label$2 : {
    $6_1 = $3_1 - $2_1 | 0;
    if (($6_1 | 0) != (1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      $7_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
      $8_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
      $9_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + Math_imul($2_1, 36) | 0;
      $10_1 = Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]);
      $10_1 = $10_1 < $8_1 ? $8_1 : $10_1;
      $11_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
      $10_1 = Math_fround(Math_fround(Math_fround(($7_1 < $10_1 ? $7_1 : $10_1) - $8_1) * $11_1) + Math_fround(.5));
      if (!($10_1 < Math_fround(4294967296.0) & $10_1 >= Math_fround(0.0) | 0)) {
       break label$4
      }
      $6_1 = ~~$10_1 >>> 0;
      break label$3;
     }
     $6_1 = 0;
    }
    $12_1 = Math_fround(HEAPF32[$9_1 >> 2]);
    $13_1 = Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]);
    $14_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($5_1 << 4 | 0) | 0;
    HEAP16[($14_1 + 4 | 0) >> 1] = $6_1;
    label$5 : {
     label$6 : {
      $15_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
      $10_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
      $13_1 = $13_1 < $10_1 ? $10_1 : $13_1;
      $16_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
      $13_1 = Math_fround(Math_fround(Math_fround(($15_1 < $13_1 ? $15_1 : $13_1) - $10_1) * $16_1) + Math_fround(.5));
      if (!($13_1 < Math_fround(4294967296.0) & $13_1 >= Math_fround(0.0) | 0)) {
       break label$6
      }
      $6_1 = ~~$13_1 >>> 0;
      break label$5;
     }
     $6_1 = 0;
    }
    HEAP16[($14_1 + 2 | 0) >> 1] = $6_1;
    label$7 : {
     label$8 : {
      $17_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
      $13_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
      $12_1 = $12_1 < $13_1 ? $13_1 : $12_1;
      $18_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
      $12_1 = Math_fround(Math_fround(Math_fround(($17_1 < $12_1 ? $17_1 : $12_1) - $13_1) * $18_1) + Math_fround(.5));
      if (!($12_1 < Math_fround(4294967296.0) & $12_1 >= Math_fround(0.0) | 0)) {
       break label$8
      }
      $6_1 = ~~$12_1 >>> 0;
      break label$7;
     }
     $6_1 = 0;
    }
    HEAP16[$14_1 >> 1] = $6_1;
    label$9 : {
     label$10 : {
      $12_1 = Math_fround(HEAPF32[($9_1 + 24 | 0) >> 2]);
      $12_1 = $12_1 < $8_1 ? $8_1 : $12_1;
      $8_1 = Math_fround(Math_fround($11_1 * Math_fround(($7_1 < $12_1 ? $7_1 : $12_1) - $8_1)) + Math_fround(.5));
      if (!($8_1 < Math_fround(4294967296.0) & $8_1 >= Math_fround(0.0) | 0)) {
       break label$10
      }
      $6_1 = ~~$8_1 >>> 0;
      break label$9;
     }
     $6_1 = 0;
    }
    $8_1 = Math_fround(HEAPF32[($9_1 + 16 | 0) >> 2]);
    $7_1 = Math_fround(HEAPF32[($9_1 + 20 | 0) >> 2]);
    HEAP16[($14_1 + 10 | 0) >> 1] = $6_1;
    label$11 : {
     label$12 : {
      $7_1 = $7_1 < $10_1 ? $10_1 : $7_1;
      $10_1 = Math_fround(Math_fround($16_1 * Math_fround(($15_1 < $7_1 ? $15_1 : $7_1) - $10_1)) + Math_fround(.5));
      if (!($10_1 < Math_fround(4294967296.0) & $10_1 >= Math_fround(0.0) | 0)) {
       break label$12
      }
      $6_1 = ~~$10_1 >>> 0;
      break label$11;
     }
     $6_1 = 0;
    }
    HEAP16[($14_1 + 8 | 0) >> 1] = $6_1;
    label$13 : {
     label$14 : {
      $8_1 = $8_1 < $13_1 ? $13_1 : $8_1;
      $8_1 = Math_fround(Math_fround($18_1 * Math_fround(($17_1 < $8_1 ? $17_1 : $8_1) - $13_1)) + Math_fround(.5));
      if (!($8_1 < Math_fround(4294967296.0) & $8_1 >= Math_fround(0.0) | 0)) {
       break label$14
      }
      $6_1 = ~~$8_1 >>> 0;
      break label$13;
     }
     $6_1 = 0;
    }
    HEAP16[($14_1 + 6 | 0) >> 1] = $6_1;
    HEAP32[($14_1 + 12 | 0) >> 2] = HEAP32[($9_1 + 32 | 0) >> 2] | 0;
    break label$1;
   }
   $19_1 = $83($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $82($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0) | 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = -8388609;
   i64toi32_i32$0 = -8388609;
   HEAP32[($4_1 + 16 | 0) >> 2] = -8388609;
   HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 8 | 0) >> 2] = 2139095039;
   i64toi32_i32$0 = 2139095039;
   HEAP32[$4_1 >> 2] = 2139095039;
   HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   label$15 : {
    label$16 : {
     if (($3_1 | 0) > ($2_1 | 0)) {
      break label$16
     }
     $13_1 = Math_fround(3402823466385288598117041.0e14);
     $7_1 = Math_fround(-3402823466385288598117041.0e14);
     $15_1 = Math_fround(-3402823466385288598117041.0e14);
     $8_1 = Math_fround(-3402823466385288598117041.0e14);
     $17_1 = Math_fround(3402823466385288598117041.0e14);
     $10_1 = Math_fround(3402823466385288598117041.0e14);
     break label$15;
    }
    $20_1 = $4_1 + 16 | 0;
    $9_1 = ((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + Math_imul($2_1, 36) | 0) + 16 | 0;
    $13_1 = Math_fround(3402823466385288598117041.0e14);
    $7_1 = Math_fround(-3402823466385288598117041.0e14);
    $15_1 = Math_fround(-3402823466385288598117041.0e14);
    $8_1 = Math_fround(-3402823466385288598117041.0e14);
    $17_1 = Math_fround(3402823466385288598117041.0e14);
    $10_1 = Math_fround(3402823466385288598117041.0e14);
    label$17 : while (1) {
     $14_1 = $9_1 + -16 | 0;
     $12_1 = Math_fround(HEAPF32[$14_1 >> 2]);
     $10_1 = $10_1 > $12_1 ? $12_1 : $10_1;
     HEAPF32[$4_1 >> 2] = $10_1;
     $21_1 = HEAP32[(($17_1 > Math_fround(HEAPF32[($9_1 + -12 | 0) >> 2]) ? $14_1 : $4_1) + 4 | 0) >> 2] | 0;
     HEAP32[($4_1 + 4 | 0) >> 2] = $21_1;
     $14_1 = HEAP32[(($13_1 > Math_fround(HEAPF32[($9_1 + -8 | 0) >> 2]) ? $14_1 : $4_1) + 8 | 0) >> 2] | 0;
     HEAP32[($4_1 + 8 | 0) >> 2] = $14_1;
     $13_1 = Math_fround(HEAPF32[$9_1 >> 2]);
     $8_1 = $8_1 < $13_1 ? $13_1 : $8_1;
     HEAPF32[($4_1 + 16 | 0) >> 2] = $8_1;
     $22_1 = HEAP32[(($15_1 < Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]) ? $9_1 : $20_1) + 4 | 0) >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $22_1;
     $23_1 = HEAP32[(($7_1 < Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]) ? $9_1 : $20_1) + 8 | 0) >> 2] | 0;
     HEAP32[($4_1 + 24 | 0) >> 2] = $23_1;
     $17_1 = (wasm2js_scratch_store_i32(0, $21_1), wasm2js_scratch_load_f32());
     $13_1 = (wasm2js_scratch_store_i32(0, $14_1), wasm2js_scratch_load_f32());
     $9_1 = $9_1 + 36 | 0;
     $15_1 = (wasm2js_scratch_store_i32(0, $22_1), wasm2js_scratch_load_f32());
     $7_1 = (wasm2js_scratch_store_i32(0, $23_1), wasm2js_scratch_load_f32());
     $6_1 = $6_1 + -1 | 0;
     if ($6_1) {
      continue label$17
     }
     break label$17;
    };
   }
   $14_1 = $0_1 + 16 | 0;
   $6_1 = $5_1 << 4 | 0;
   $9_1 = (HEAP32[$14_1 >> 2] | 0) + $6_1 | 0;
   label$18 : {
    label$19 : {
     $16_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
     $8_1 = $8_1 < $12_1 ? $12_1 : $8_1;
     $8_1 = Math_fround(Math_fround($16_1 * Math_fround(($11_1 < $8_1 ? $11_1 : $8_1) - $12_1)) + Math_fround(.5));
     if (!($8_1 < Math_fround(4294967296.0) & $8_1 >= Math_fround(0.0) | 0)) {
      break label$19
     }
     $20_1 = ~~$8_1 >>> 0;
     break label$18;
    }
    $20_1 = 0;
   }
   HEAP16[($9_1 + 6 | 0) >> 1] = $20_1;
   label$20 : {
    label$21 : {
     $8_1 = $10_1 < $12_1 ? $12_1 : $10_1;
     $8_1 = Math_fround(Math_fround(Math_fround(($11_1 < $8_1 ? $11_1 : $8_1) - $12_1) * $16_1) + Math_fround(.5));
     if (!($8_1 < Math_fround(4294967296.0) & $8_1 >= Math_fround(0.0) | 0)) {
      break label$21
     }
     $20_1 = ~~$8_1 >>> 0;
     break label$20;
    }
    $20_1 = 0;
   }
   HEAP16[$9_1 >> 1] = $20_1;
   label$22 : {
    label$23 : {
     $11_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
     $8_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
     $10_1 = $7_1 < $8_1 ? $8_1 : $7_1;
     $10_1 = Math_fround(Math_fround($11_1 * Math_fround(($12_1 < $10_1 ? $12_1 : $10_1) - $8_1)) + Math_fround(.5));
     if (!($10_1 < Math_fround(4294967296.0) & $10_1 >= Math_fround(0.0) | 0)) {
      break label$23
     }
     $20_1 = ~~$10_1 >>> 0;
     break label$22;
    }
    $20_1 = 0;
   }
   HEAP16[($9_1 + 10 | 0) >> 1] = $20_1;
   label$24 : {
    label$25 : {
     $16_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
     $7_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
     $10_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
     $15_1 = $15_1 < $10_1 ? $10_1 : $15_1;
     $15_1 = Math_fround(Math_fround($16_1 * Math_fround(($7_1 < $15_1 ? $7_1 : $15_1) - $10_1)) + Math_fround(.5));
     if (!($15_1 < Math_fround(4294967296.0) & $15_1 >= Math_fround(0.0) | 0)) {
      break label$25
     }
     $20_1 = ~~$15_1 >>> 0;
     break label$24;
    }
    $20_1 = 0;
   }
   HEAP16[($9_1 + 8 | 0) >> 1] = $20_1;
   label$26 : {
    label$27 : {
     $13_1 = $13_1 < $8_1 ? $8_1 : $13_1;
     $8_1 = Math_fround(Math_fround(Math_fround(($12_1 < $13_1 ? $12_1 : $13_1) - $8_1) * $11_1) + Math_fround(.5));
     if (!($8_1 < Math_fround(4294967296.0) & $8_1 >= Math_fround(0.0) | 0)) {
      break label$27
     }
     $20_1 = ~~$8_1 >>> 0;
     break label$26;
    }
    $20_1 = 0;
   }
   HEAP16[($9_1 + 4 | 0) >> 1] = $20_1;
   label$28 : {
    label$29 : {
     $8_1 = $17_1 < $10_1 ? $10_1 : $17_1;
     $8_1 = Math_fround(Math_fround(Math_fround(($7_1 < $8_1 ? $7_1 : $8_1) - $10_1) * $16_1) + Math_fround(.5));
     if (!($8_1 < Math_fround(4294967296.0) & $8_1 >= Math_fround(0.0) | 0)) {
      break label$29
     }
     $20_1 = ~~$8_1 >>> 0;
     break label$28;
    }
    $20_1 = 0;
   }
   HEAP16[($9_1 + 2 | 0) >> 1] = $20_1;
   $84($0_1 | 0, $1_1 | 0, $2_1 | 0, $19_1 | 0);
   $84($0_1 | 0, $1_1 | 0, $19_1 | 0, $3_1 | 0);
   HEAP32[(((HEAP32[$14_1 >> 2] | 0) + $6_1 | 0) + 12 | 0) >> 2] = $5_1 - (HEAP32[$0_1 >> 2] | 0) | 0;
  }
  global$0 = $4_1 + 32 | 0;
 }
 
 function $85($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, $8_1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $6_1 = 0, $10_1 = 0, $50_1 = 0, $55_1 = 0, $90_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $81($0_1 | 0, $1_1 | 0, Math_fround(Math_fround(1.0)));
  HEAP32[$0_1 >> 2] = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $5_1 = $4_1 << 1 | 0;
   if (($3_1 | 0) >= ($5_1 | 0)) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) >= ($5_1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($4_1) {
       break label$4
      }
      $6_1 = 0;
      $7_1 = $3_1;
      break label$3;
     }
     $6_1 = $79($4_1 << 5 | 0 | 0, 16 | 0) | 0;
     $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    label$5 : {
     if (($7_1 | 0) < (1 | 0)) {
      break label$5
     }
     $8_1 = 0;
     label$6 : while (1) {
      $9_1 = $6_1 + $8_1 | 0;
      $10_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $8_1 | 0;
      i64toi32_i32$2 = $10_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $50_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $9_1;
      HEAP32[i64toi32_i32$0 >> 2] = $50_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $55_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $9_1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $55_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $8_1 = $8_1 + 16 | 0;
      $7_1 = $7_1 + -1 | 0;
      if ($7_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     $8_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$7
     }
     label$8 : {
      if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
       break label$8
      }
      $80($8_1 | 0);
     }
     HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
    HEAP8[($0_1 + 20 | 0) >> 0] = 1;
   }
   $8_1 = $3_1 << 4 | 0;
   $7_1 = $3_1 - ($4_1 << 1 | 0) | 0;
   label$9 : while (1) {
    $9_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $8_1 | 0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $90_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $9_1;
    HEAP32[i64toi32_i32$0 >> 2] = $90_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = 0;
    $8_1 = $8_1 + 16 | 0;
    $9_1 = $7_1 + 1 | 0;
    $10_1 = $9_1 >>> 0 >= $7_1 >>> 0;
    $7_1 = $9_1;
    if ($10_1) {
     continue label$9
    }
    break label$9;
   };
   $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
  $84($0_1 | 0, $1_1 | 0, 0 | 0, $4_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $86($0_1) {
  $0_1 = $0_1 | 0;
  var $8_1 = 0, $1_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $14_1 = Math_fround(0), $2_1 = 0, $13_1 = Math_fround(0), $12_1 = Math_fround(0), $19_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $17_1 = Math_fround(0), $9_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $18_1 = Math_fround(0), $20_1 = 0, $24_1 = Math_fround(0), $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $29_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $23_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  label$1 : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 << 4 | 0;
   $4_1 = $2_1 + 1 | 0;
   $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $6_1 = $1_1 + 16 | 0;
   $7_1 = ($1_1 + 32 | 0) + 16 | 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $2_1 = $5_1 + $3_1 | 0;
      $8_1 = HEAP32[($2_1 + -4 | 0) >> 2] | 0;
      if (($8_1 | 0) < (0 | 0)) {
       break label$4
      }
      $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $8_1, $1_1 + 32 | 0);
      label$5 : {
       label$6 : {
        $9_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
        $10_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
        $11_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
        $11_1 = $11_1 < $10_1 ? $10_1 : $11_1;
        $12_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
        $11_1 = Math_fround(Math_fround(Math_fround(($9_1 < $11_1 ? $9_1 : $11_1) - $10_1) * $12_1) + Math_fround(.5));
        if (!($11_1 < Math_fround(4294967296.0) & $11_1 >= Math_fround(0.0) | 0)) {
         break label$6
        }
        $8_1 = ~~$11_1 >>> 0;
        break label$5;
       }
       $8_1 = 0;
      }
      $13_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
      $14_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
      $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      $2_1 = $5_1 + $3_1 | 0;
      HEAP16[($2_1 + -12 | 0) >> 1] = $8_1;
      label$7 : {
       label$8 : {
        $15_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
        $11_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
        $14_1 = $14_1 < $11_1 ? $11_1 : $14_1;
        $16_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
        $14_1 = Math_fround(Math_fround(Math_fround(($15_1 < $14_1 ? $15_1 : $14_1) - $11_1) * $16_1) + Math_fround(.5));
        if (!($14_1 < Math_fround(4294967296.0) & $14_1 >= Math_fround(0.0) | 0)) {
         break label$8
        }
        $8_1 = ~~$14_1 >>> 0;
        break label$7;
       }
       $8_1 = 0;
      }
      HEAP16[($2_1 + -14 | 0) >> 1] = $8_1;
      label$9 : {
       label$10 : {
        $17_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
        $14_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
        $13_1 = $13_1 < $14_1 ? $14_1 : $13_1;
        $18_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
        $13_1 = Math_fround(Math_fround(Math_fround(($17_1 < $13_1 ? $17_1 : $13_1) - $14_1) * $18_1) + Math_fround(.5));
        if (!($13_1 < Math_fround(4294967296.0) & $13_1 >= Math_fround(0.0) | 0)) {
         break label$10
        }
        $8_1 = ~~$13_1 >>> 0;
        break label$9;
       }
       $8_1 = 0;
      }
      HEAP16[($2_1 + -16 | 0) >> 1] = $8_1;
      label$11 : {
       label$12 : {
        $13_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
        $13_1 = $13_1 < $14_1 ? $14_1 : $13_1;
        $14_1 = Math_fround(Math_fround($18_1 * Math_fround(($17_1 < $13_1 ? $17_1 : $13_1) - $14_1)) + Math_fround(.5));
        if (!($14_1 < Math_fround(4294967296.0) & $14_1 >= Math_fround(0.0) | 0)) {
         break label$12
        }
        $8_1 = ~~$14_1 >>> 0;
        break label$11;
       }
       $8_1 = 0;
      }
      $14_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
      $17_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
      HEAP16[($2_1 + -10 | 0) >> 1] = $8_1;
      label$13 : {
       label$14 : {
        $17_1 = $17_1 < $11_1 ? $11_1 : $17_1;
        $11_1 = Math_fround(Math_fround($16_1 * Math_fround(($15_1 < $17_1 ? $15_1 : $17_1) - $11_1)) + Math_fround(.5));
        if (!($11_1 < Math_fround(4294967296.0) & $11_1 >= Math_fround(0.0) | 0)) {
         break label$14
        }
        $8_1 = ~~$11_1 >>> 0;
        break label$13;
       }
       $8_1 = 0;
      }
      HEAP16[($2_1 + -8 | 0) >> 1] = $8_1;
      label$15 : {
       label$16 : {
        $11_1 = $14_1 < $10_1 ? $10_1 : $14_1;
        $10_1 = Math_fround(Math_fround($12_1 * Math_fround(($9_1 < $11_1 ? $9_1 : $11_1) - $10_1)) + Math_fround(.5));
        if (!($10_1 < Math_fround(4294967296.0) & $10_1 >= Math_fround(0.0) | 0)) {
         break label$16
        }
        $8_1 = ~~$10_1 >>> 0;
        break label$15;
       }
       $8_1 = 0;
      }
      HEAP16[($2_1 + -6 | 0) >> 1] = $8_1;
      break label$3;
     }
     HEAP32[($1_1 + 56 | 0) >> 2] = -8388609;
     i64toi32_i32$0 = -8388609;
     HEAP32[($1_1 + 48 | 0) >> 2] = -8388609;
     HEAP32[($1_1 + 52 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = 2139095039;
     HEAP32[($1_1 + 36 | 0) >> 2] = 2139095039;
     HEAP32[($1_1 + 40 | 0) >> 2] = i64toi32_i32$0;
     $8_1 = HEAPU16[$2_1 >> 1] | 0;
     $19_1 = HEAPU16[($2_1 + 2 | 0) >> 1] | 0;
     $20_1 = HEAPU16[($2_1 + 4 | 0) >> 1] | 0;
     HEAP32[($1_1 + 12 | 0) >> 2] = 0;
     $9_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
     $10_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
     $16_1 = Math_fround(Math_fround(Math_fround($20_1 >>> 0) / $9_1) + $10_1);
     HEAPF32[($1_1 + 8 | 0) >> 2] = $16_1;
     $15_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
     $18_1 = Math_fround(Math_fround(Math_fround($19_1 >>> 0) / $15_1) + $11_1);
     HEAPF32[($1_1 + 4 | 0) >> 2] = $18_1;
     $17_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
     $13_1 = Math_fround(Math_fround(Math_fround($8_1 >>> 0) / $17_1) + $14_1);
     HEAPF32[$1_1 >> 2] = $13_1;
     $8_1 = HEAPU16[($2_1 + 6 | 0) >> 1] | 0;
     $19_1 = HEAPU16[($2_1 + 8 | 0) >> 1] | 0;
     $20_1 = HEAPU16[($2_1 + 10 | 0) >> 1] | 0;
     HEAP32[($1_1 + 28 | 0) >> 2] = 0;
     $21_1 = Math_fround($10_1 + Math_fround(Math_fround($20_1 >>> 0) / $9_1));
     HEAPF32[($1_1 + 24 | 0) >> 2] = $21_1;
     $22_1 = Math_fround($11_1 + Math_fround(Math_fround($19_1 >>> 0) / $15_1));
     HEAPF32[($1_1 + 20 | 0) >> 2] = $22_1;
     $12_1 = Math_fround($14_1 + Math_fround(Math_fround($8_1 >>> 0) / $17_1));
     HEAPF32[($1_1 + 16 | 0) >> 2] = $12_1;
     $13_1 = $13_1 < Math_fround(3402823466385288598117041.0e14) ? $13_1 : Math_fround(3402823466385288598117041.0e14);
     HEAPF32[($1_1 + 32 | 0) >> 2] = $13_1;
     $19_1 = HEAP32[(($18_1 < Math_fround(3402823466385288598117041.0e14) ? $1_1 : $1_1 + 32 | 0) + 4 | 0) >> 2] | 0;
     $20_1 = HEAP32[(($16_1 < Math_fround(3402823466385288598117041.0e14) ? $1_1 : $1_1 + 32 | 0) + 8 | 0) >> 2] | 0;
     HEAP32[($1_1 + 40 | 0) >> 2] = $20_1;
     $12_1 = $12_1 > Math_fround(-3402823466385288598117041.0e14) ? $12_1 : Math_fround(-3402823466385288598117041.0e14);
     HEAPF32[($1_1 + 48 | 0) >> 2] = $12_1;
     HEAP32[($1_1 + 36 | 0) >> 2] = $19_1;
     $8_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
     $16_1 = (wasm2js_scratch_store_i32(0, $20_1), wasm2js_scratch_load_f32());
     $18_1 = (wasm2js_scratch_store_i32(0, $19_1), wasm2js_scratch_load_f32());
     $19_1 = HEAP32[(($22_1 > Math_fround(-3402823466385288598117041.0e14) ? $6_1 : $7_1) + 4 | 0) >> 2] | 0;
     HEAP32[($1_1 + 52 | 0) >> 2] = $19_1;
     $22_1 = (wasm2js_scratch_store_i32(0, $19_1), wasm2js_scratch_load_f32());
     $19_1 = HEAP32[(($21_1 > Math_fround(-3402823466385288598117041.0e14) ? $6_1 : $7_1) + 8 | 0) >> 2] | 0;
     HEAP32[($1_1 + 56 | 0) >> 2] = $19_1;
     $21_1 = (wasm2js_scratch_store_i32(0, $19_1), wasm2js_scratch_load_f32());
     label$17 : {
      $8_1 = $4_1 + ((($8_1 | 0) > (-1 | 0) ? $8_1 : -1) - $8_1 | 0) | 0;
      if (!$8_1) {
       break label$17
      }
      $8_1 = $5_1 + ($8_1 << 4 | 0) | 0;
      $19_1 = HEAPU16[($8_1 + 2 | 0) >> 1] | 0;
      $20_1 = HEAPU16[($8_1 + 4 | 0) >> 1] | 0;
      $23_1 = HEAPU16[$8_1 >> 1] | 0;
      HEAP32[($1_1 + 12 | 0) >> 2] = 0;
      $24_1 = Math_fround(Math_fround(Math_fround($23_1 >>> 0) / $17_1) + $14_1);
      HEAPF32[$1_1 >> 2] = $24_1;
      $25_1 = Math_fround(Math_fround(Math_fround($20_1 >>> 0) / $9_1) + $10_1);
      HEAPF32[($1_1 + 8 | 0) >> 2] = $25_1;
      $26_1 = Math_fround(Math_fround(Math_fround($19_1 >>> 0) / $15_1) + $11_1);
      HEAPF32[($1_1 + 4 | 0) >> 2] = $26_1;
      $19_1 = HEAPU16[($8_1 + 6 | 0) >> 1] | 0;
      $20_1 = HEAPU16[($8_1 + 8 | 0) >> 1] | 0;
      $8_1 = HEAPU16[($8_1 + 10 | 0) >> 1] | 0;
      HEAP32[($1_1 + 28 | 0) >> 2] = 0;
      $27_1 = Math_fround($10_1 + Math_fround(Math_fround($8_1 >>> 0) / $9_1));
      HEAPF32[($1_1 + 24 | 0) >> 2] = $27_1;
      $28_1 = Math_fround($11_1 + Math_fround(Math_fround($20_1 >>> 0) / $15_1));
      HEAPF32[($1_1 + 20 | 0) >> 2] = $28_1;
      $29_1 = Math_fround($14_1 + Math_fround(Math_fround($19_1 >>> 0) / $17_1));
      HEAPF32[($1_1 + 16 | 0) >> 2] = $29_1;
      $8_1 = HEAP32[(($26_1 < $18_1 ? $1_1 : $1_1 + 32 | 0) + 4 | 0) >> 2] | 0;
      $19_1 = HEAP32[(($25_1 < $16_1 ? $1_1 : $1_1 + 32 | 0) + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 40 | 0) >> 2] = $19_1;
      $12_1 = $12_1 < $29_1 ? $29_1 : $12_1;
      HEAPF32[($1_1 + 48 | 0) >> 2] = $12_1;
      $13_1 = $13_1 > $24_1 ? $24_1 : $13_1;
      HEAPF32[($1_1 + 32 | 0) >> 2] = $13_1;
      HEAP32[($1_1 + 36 | 0) >> 2] = $8_1;
      $16_1 = (wasm2js_scratch_store_i32(0, $19_1), wasm2js_scratch_load_f32());
      $18_1 = (wasm2js_scratch_store_i32(0, $8_1), wasm2js_scratch_load_f32());
      $8_1 = HEAP32[(($28_1 > $22_1 ? $6_1 : $7_1) + 4 | 0) >> 2] | 0;
      HEAP32[($1_1 + 52 | 0) >> 2] = $8_1;
      $22_1 = (wasm2js_scratch_store_i32(0, $8_1), wasm2js_scratch_load_f32());
      $8_1 = HEAP32[(($27_1 > $21_1 ? $6_1 : $7_1) + 8 | 0) >> 2] | 0;
      HEAP32[($1_1 + 56 | 0) >> 2] = $8_1;
      $21_1 = (wasm2js_scratch_store_i32(0, $8_1), wasm2js_scratch_load_f32());
     }
     label$18 : {
      label$19 : {
       $24_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
       $21_1 = $21_1 < $10_1 ? $10_1 : $21_1;
       $21_1 = Math_fround(Math_fround($9_1 * Math_fround(($24_1 < $21_1 ? $24_1 : $21_1) - $10_1)) + Math_fround(.5));
       if (!($21_1 < Math_fround(4294967296.0) & $21_1 >= Math_fround(0.0) | 0)) {
        break label$19
       }
       $8_1 = ~~$21_1 >>> 0;
       break label$18;
      }
      $8_1 = 0;
     }
     HEAP16[($2_1 + -6 | 0) >> 1] = $8_1;
     label$20 : {
      label$21 : {
       $21_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
       $22_1 = $22_1 < $11_1 ? $11_1 : $22_1;
       $22_1 = Math_fround(Math_fround($15_1 * Math_fround(($21_1 < $22_1 ? $21_1 : $22_1) - $11_1)) + Math_fround(.5));
       if (!($22_1 < Math_fround(4294967296.0) & $22_1 >= Math_fround(0.0) | 0)) {
        break label$21
       }
       $8_1 = ~~$22_1 >>> 0;
       break label$20;
      }
      $8_1 = 0;
     }
     HEAP16[($2_1 + -8 | 0) >> 1] = $8_1;
     label$22 : {
      label$23 : {
       $22_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
       $12_1 = $12_1 < $14_1 ? $14_1 : $12_1;
       $12_1 = Math_fround(Math_fround($17_1 * Math_fround(($22_1 < $12_1 ? $22_1 : $12_1) - $14_1)) + Math_fround(.5));
       if (!($12_1 < Math_fround(4294967296.0) & $12_1 >= Math_fround(0.0) | 0)) {
        break label$23
       }
       $8_1 = ~~$12_1 >>> 0;
       break label$22;
      }
      $8_1 = 0;
     }
     HEAP16[($2_1 + -10 | 0) >> 1] = $8_1;
     label$24 : {
      label$25 : {
       $12_1 = $16_1 < $10_1 ? $10_1 : $16_1;
       $10_1 = Math_fround(Math_fround(Math_fround(($24_1 < $12_1 ? $24_1 : $12_1) - $10_1) * $9_1) + Math_fround(.5));
       if (!($10_1 < Math_fround(4294967296.0) & $10_1 >= Math_fround(0.0) | 0)) {
        break label$25
       }
       $8_1 = ~~$10_1 >>> 0;
       break label$24;
      }
      $8_1 = 0;
     }
     HEAP16[($2_1 + -12 | 0) >> 1] = $8_1;
     label$26 : {
      label$27 : {
       $10_1 = $18_1 < $11_1 ? $11_1 : $18_1;
       $10_1 = Math_fround(Math_fround(Math_fround(($21_1 < $10_1 ? $21_1 : $10_1) - $11_1) * $15_1) + Math_fround(.5));
       if (!($10_1 < Math_fround(4294967296.0) & $10_1 >= Math_fround(0.0) | 0)) {
        break label$27
       }
       $8_1 = ~~$10_1 >>> 0;
       break label$26;
      }
      $8_1 = 0;
     }
     HEAP16[($2_1 + -14 | 0) >> 1] = $8_1;
     label$28 : {
      label$29 : {
       $10_1 = $13_1 < $14_1 ? $14_1 : $13_1;
       $10_1 = Math_fround(Math_fround(Math_fround(($22_1 < $10_1 ? $22_1 : $10_1) - $14_1) * $17_1) + Math_fround(.5));
       if (!($10_1 < Math_fround(4294967296.0) & $10_1 >= Math_fround(0.0) | 0)) {
        break label$29
       }
       $8_1 = ~~$10_1 >>> 0;
       break label$28;
      }
      $8_1 = 0;
     }
     HEAP16[($2_1 + -16 | 0) >> 1] = $8_1;
    }
    $3_1 = $3_1 + -16 | 0;
    $4_1 = $4_1 + -1 | 0;
    if (($4_1 | 0) != (1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $1_1 + 64 | 0;
 }
 
 function $87($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0, $49_1 = 0, $52_1 = 0, $55_1 = 0, $59_1 = 0, $70_1 = 0, $76_1 = 0, $80_1 = 0, $85_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  HEAP8[($1_1 + 56 | 0) >> 0] = 1;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($2_1) | 0;
  $4_1 = (i64toi32_i32$1 + 8 | 0) + 24 | 0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($1_1 + 8 | 0) + 16 | 0;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $6_1 = ($1_1 + 8 | 0) + 8 | 0;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if (($3_1 | 0) > (0 | 0)) {
     break label$2
    }
    HEAP32[($1_1 + 44 | 0) >> 2] = $3_1;
    break label$1;
   }
   $2_1 = $79(Math_imul($3_1, 36) | 0, 16 | 0) | 0;
   HEAP32[($2_1 + 32 | 0) >> 2] = 0;
   HEAP32[($1_1 + 52 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 48 | 0) >> 2] = $3_1;
   HEAP8[($1_1 + 56 | 0) >> 0] = 1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $49_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $49_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   $52_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[i64toi32_i32$1 >> 2] = $52_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
   $55_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $55_1;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $59_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $59_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   label$3 : {
    if (($3_1 | 0) == (1 | 0)) {
     break label$3
    }
    $6_1 = $3_1 + -1 | 0;
    $4_1 = 36;
    label$4 : while (1) {
     $2_1 = (HEAP32[($1_1 + 52 | 0) >> 2] | 0) + $4_1 | 0;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     $70_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1;
     HEAP32[i64toi32_i32$0 >> 2] = $70_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = ($1_1 + 8 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $76_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $76_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $80_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + 16 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $80_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $85_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1 + 24 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $85_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($2_1 + 32 | 0) >> 2] = 0;
     $4_1 = $4_1 + 36 | 0;
     $6_1 = $6_1 + -1 | 0;
     if ($6_1) {
      continue label$4
     }
     break label$4;
    };
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = $3_1;
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $2_1 = 0;
   $4_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
   label$5 : while (1) {
    $5_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($5_1, $2_1, $4_1);
    HEAP32[($4_1 + 32 | 0) >> 2] = $2_1;
    $4_1 = $4_1 + 36 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) < ($3_1 | 0)) {
     continue label$5
    }
    break label$5;
   };
  }
  $85($0_1 | 0, $1_1 + 40 | 0 | 0);
  label$6 : {
   $2_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$6
   }
   label$7 : {
    if (!(HEAPU8[($1_1 + 56 | 0) >> 0] | 0)) {
     break label$7
    }
    $80($2_1 | 0);
   }
   HEAP32[($1_1 + 52 | 0) >> 2] = 0;
  }
  global$0 = $1_1 + 64 | 0;
 }
 
 function $88($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = Math_fround(0), $6_1 = Math_fround(0), $4_1 = Math_fround(0), $10_1 = Math_fround(0), $18_1 = 0, $22_1 = 0, $9_1 = Math_fround(0), $21_1 = 0, $23_1 = 0, $12_1 = 0, $20_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $3_1 = Math_fround(0), $7_1 = 0, $8_1 = Math_fround(0), $11_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $19_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
    $4_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
    $6_1 = $6_1 < $5_1 ? $5_1 : $6_1;
    $6_1 = Math_fround(Math_fround($3_1 * Math_fround(($4_1 < $6_1 ? $4_1 : $6_1) - $5_1)) + Math_fround(.5));
    if (!($6_1 < Math_fround(4294967296.0) & $6_1 >= Math_fround(0.0) | 0)) {
     break label$2
    }
    $7_1 = ~~$6_1 >>> 0;
    break label$1;
   }
   $7_1 = 0;
  }
  label$3 : {
   label$4 : {
    $8_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
    $9_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
    $10_1 = $10_1 < $6_1 ? $6_1 : $10_1;
    $10_1 = Math_fround(Math_fround($8_1 * Math_fround(($9_1 < $10_1 ? $9_1 : $10_1) - $6_1)) + Math_fround(.5));
    if (!($10_1 < Math_fround(4294967296.0) & $10_1 >= Math_fround(0.0) | 0)) {
     break label$4
    }
    $11_1 = ~~$10_1 >>> 0;
    break label$3;
   }
   $11_1 = 0;
  }
  label$5 : {
   label$6 : {
    $10_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $10_1 = $10_1 < $5_1 ? $5_1 : $10_1;
    $5_1 = Math_fround(Math_fround(Math_fround(($4_1 < $10_1 ? $4_1 : $10_1) - $5_1) * $3_1) + Math_fround(.5));
    if (!($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0) | 0)) {
     break label$6
    }
    $12_1 = ~~$5_1 >>> 0;
    break label$5;
   }
   $12_1 = 0;
  }
  label$7 : {
   label$8 : {
    $5_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    $5_1 = $5_1 < $6_1 ? $6_1 : $5_1;
    $5_1 = Math_fround(Math_fround(Math_fround(($9_1 < $5_1 ? $9_1 : $5_1) - $6_1) * $8_1) + Math_fround(.5));
    if (!($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0) | 0)) {
     break label$8
    }
    $13_1 = ~~$5_1 >>> 0;
    break label$7;
   }
   $13_1 = 0;
  }
  label$9 : {
   label$10 : {
    $9_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
    $4_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
    $4_1 = $4_1 < $5_1 ? $5_1 : $4_1;
    $4_1 = Math_fround(Math_fround($9_1 * Math_fround(($6_1 < $4_1 ? $6_1 : $4_1) - $5_1)) + Math_fround(.5));
    if (!($4_1 < Math_fround(4294967296.0) & $4_1 >= Math_fround(0.0) | 0)) {
     break label$10
    }
    $14_1 = ~~$4_1 >>> 0;
    break label$9;
   }
   $14_1 = 0;
  }
  label$11 : {
   label$12 : {
    $4_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $4_1 = $4_1 < $5_1 ? $5_1 : $4_1;
    $5_1 = Math_fround(Math_fround(Math_fround(($6_1 < $4_1 ? $6_1 : $4_1) - $5_1) * $9_1) + Math_fround(.5));
    if (!($5_1 < Math_fround(4294967296.0) & $5_1 >= Math_fround(0.0) | 0)) {
     break label$12
    }
    $15_1 = ~~$5_1 >>> 0;
    break label$11;
   }
   $15_1 = 0;
  }
  label$13 : {
   $16_1 = HEAP32[$0_1 >> 2] | 0;
   if (($16_1 | 0) < (1 | 0)) {
    break label$13
   }
   $1_1 = 0;
   label$14 : while (1) {
    label$15 : {
     label$16 : {
      label$17 : {
       $17_1 = $1_1 << 4 | 0;
       $18_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $17_1 | 0;
       if ((HEAPU16[$18_1 >> 1] | 0) >>> 0 > $14_1 >>> 0) {
        break label$17
       }
       if ((HEAPU16[($18_1 + 6 | 0) >> 1] | 0) >>> 0 < $15_1 >>> 0) {
        break label$17
       }
       if ((HEAPU16[($18_1 + 2 | 0) >> 1] | 0) >>> 0 > $11_1 >>> 0) {
        break label$17
       }
       if ((HEAPU16[($18_1 + 8 | 0) >> 1] | 0) >>> 0 < $13_1 >>> 0) {
        break label$17
       }
       if ((HEAPU16[($18_1 + 4 | 0) >> 1] | 0) >>> 0 <= $7_1 >>> 0) {
        break label$16
       }
      }
      $19_1 = (HEAP32[($18_1 + 12 | 0) >> 2] | 0 | 0) > (-1 | 0);
      $18_1 = 0;
      break label$15;
     }
     $20_1 = HEAP32[($18_1 + 12 | 0) >> 2] | 0;
     $19_1 = ($20_1 | 0) > (-1 | 0);
     $21_1 = HEAPU16[($18_1 + 10 | 0) >> 1] | 0;
     $18_1 = $21_1 >>> 0 >= $12_1 >>> 0;
     if ($21_1 >>> 0 < $12_1 >>> 0) {
      break label$15
     }
     if (($20_1 | 0) < (0 | 0)) {
      break label$15
     }
     label$18 : {
      $22_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      if (($22_1 | 0) != (HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0)) {
       break label$18
      }
      $23_1 = $22_1 ? $22_1 << 1 | 0 : 1;
      if (($22_1 | 0) >= ($23_1 | 0)) {
       break label$18
      }
      label$19 : {
       label$20 : {
        if ($23_1) {
         break label$20
        }
        $24_1 = 0;
        break label$19;
       }
       $24_1 = $79($23_1 << 2 | 0 | 0, 16 | 0) | 0;
       $22_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      }
      $25_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      label$21 : {
       label$22 : {
        label$23 : {
         if (($22_1 | 0) < (1 | 0)) {
          break label$23
         }
         $21_1 = $24_1;
         $26_1 = $25_1;
         label$24 : while (1) {
          HEAP32[$21_1 >> 2] = HEAP32[$26_1 >> 2] | 0;
          $21_1 = $21_1 + 4 | 0;
          $26_1 = $26_1 + 4 | 0;
          $22_1 = $22_1 + -1 | 0;
          if ($22_1) {
           continue label$24
          }
          break label$22;
         };
        }
        if (!$25_1) {
         break label$21
        }
       }
       label$25 : {
        if (!(HEAPU8[($2_1 + 16 | 0) >> 0] | 0)) {
         break label$25
        }
        $80($25_1 | 0);
       }
       HEAP32[($2_1 + 12 | 0) >> 2] = 0;
       $22_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      }
      HEAP32[($2_1 + 12 | 0) >> 2] = $24_1;
      HEAP8[($2_1 + 16 | 0) >> 0] = 1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $23_1;
     }
     HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + ($22_1 << 2 | 0) | 0) >> 2] = $20_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    }
    label$26 : {
     label$27 : {
      label$28 : {
       if ($18_1) {
        break label$28
       }
       if (!$19_1) {
        break label$27
       }
      }
      $1_1 = $1_1 + 1 | 0;
      break label$26;
     }
     $1_1 = $1_1 - (HEAP32[(((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $17_1 | 0) + 12 | 0) >> 2] | 0) | 0;
    }
    if (($1_1 | 0) < ($16_1 | 0)) {
     continue label$14
    }
    break label$14;
   };
  }
  return (HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) > (0 | 0) | 0;
 }
 
 function $89($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $15_1 = 0, $7_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $16_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $17_1 = Math_fround(0), $12_1 = 0, $5_1 = 0, $6_1 = 0, $11_1 = 0, $8_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $22_1 = 0, $4_1 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $63_1 = Math_fround(0), $96_1 = Math_fround(0), $130_1 = Math_fround(0), $178_1 = Math_fround(0), $185_1 = Math_fround(0);
  label$1 : {
   $4_1 = HEAP32[$0_1 >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = 0;
   label$2 : while (1) {
    $6_1 = $5_1 << 4 | 0;
    $7_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $6_1 | 0;
    $8_1 = HEAPU16[($7_1 + 4 | 0) >> 1] | 0;
    $9_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
    $11_1 = HEAPU16[($7_1 + 10 | 0) >> 1] | 0;
    $12_1 = HEAPU16[($7_1 + 2 | 0) >> 1] | 0;
    $13_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
    $14_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
    $15_1 = HEAPU16[($7_1 + 8 | 0) >> 1] | 0;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          $16_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
          $17_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
          $63_1 = Math_fround(Math_fround(Math_fround((HEAPU16[$7_1 >> 1] | 0) >>> 0) / $16_1) + $17_1);
          $16_1 = Math_fround($17_1 + Math_fround(Math_fround((HEAPU16[($7_1 + 6 | 0) >> 1] | 0) >>> 0) / $16_1));
          $17_1 = Math_fround(Math_fround($63_1 + $16_1) * Math_fround(.5));
          $18_1 = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) - $17_1);
          $17_1 = Math_fround($16_1 - $17_1);
          if (Math_fround(Math_abs($18_1)) > $17_1 ^ 1 | 0) {
           break label$8
          }
          if (Math_fround($18_1 * Math_fround(HEAPF32[$1_1 >> 2])) >= Math_fround(0.0)) {
           break label$7
          }
         }
         label$9 : {
          $96_1 = Math_fround(Math_fround(Math_fround($12_1 >>> 0) / $13_1) + $14_1);
          $13_1 = Math_fround($14_1 + Math_fround(Math_fround($15_1 >>> 0) / $13_1));
          $14_1 = Math_fround(Math_fround($96_1 + $13_1) * Math_fround(.5));
          $16_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) - $14_1);
          $19_1 = Math_fround($13_1 - $14_1);
          if (Math_fround(Math_abs($16_1)) > $19_1 ^ 1 | 0) {
           break label$9
          }
          if (Math_fround($16_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2])) >= Math_fround(0.0)) {
           break label$7
          }
         }
         $13_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
         label$10 : {
          $130_1 = Math_fround(Math_fround(Math_fround($8_1 >>> 0) / $9_1) + $10_1);
          $9_1 = Math_fround($10_1 + Math_fround(Math_fround($11_1 >>> 0) / $9_1));
          $10_1 = Math_fround(Math_fround($130_1 + $9_1) * Math_fround(.5));
          $14_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) - $10_1);
          $9_1 = Math_fround($9_1 - $10_1);
          if (Math_fround(Math_abs($14_1)) > $9_1 ^ 1 | 0) {
           break label$10
          }
          if (Math_fround($14_1 * $13_1) >= Math_fround(0.0)) {
           break label$7
          }
         }
         $10_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
         $20_1 = Math_fround(Math_abs($13_1));
         $21_1 = Math_fround(Math_abs($10_1));
         if (Math_fround(Math_abs(Math_fround(Math_fround($14_1 * $10_1) - Math_fround($16_1 * $13_1)))) > Math_fround(Math_fround($19_1 * $20_1) + Math_fround($9_1 * $21_1))) {
          break label$7
         }
         $178_1 = Math_fround($18_1 * $13_1);
         $13_1 = Math_fround(HEAPF32[$1_1 >> 2]);
         $185_1 = Math_fround(Math_abs(Math_fround($178_1 - Math_fround($14_1 * $13_1))));
         $14_1 = Math_fround(Math_abs($13_1));
         if ($185_1 > Math_fround(Math_fround($17_1 * $20_1) + Math_fround($9_1 * $14_1)) ^ 1 | 0) {
          break label$6
         }
        }
        $7_1 = (HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) > (-1 | 0);
        $12_1 = 0;
        break label$5;
       }
       $15_1 = Math_fround(Math_abs(Math_fround(Math_fround($16_1 * $13_1) - Math_fround($18_1 * $10_1)))) > Math_fround(Math_fround($17_1 * $21_1) + Math_fround($19_1 * $14_1));
       $12_1 = $15_1 ^ 1 | 0;
       $8_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
       $7_1 = ($8_1 | 0) > (-1 | 0);
       if ($15_1) {
        break label$5
       }
       if (($8_1 | 0) < (0 | 0)) {
        break label$5
       }
       label$11 : {
        $15_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        if (($15_1 | 0) != (HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0)) {
         break label$11
        }
        $11_1 = $15_1 ? $15_1 << 1 | 0 : 1;
        if (($15_1 | 0) >= ($11_1 | 0)) {
         break label$11
        }
        label$12 : {
         label$13 : {
          if ($11_1) {
           break label$13
          }
          $6_1 = 0;
          break label$12;
         }
         $6_1 = $79($11_1 << 2 | 0 | 0, 16 | 0) | 0;
         $15_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        }
        $22_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        label$14 : {
         label$15 : {
          label$16 : {
           if (($15_1 | 0) < (1 | 0)) {
            break label$16
           }
           $7_1 = $6_1;
           $12_1 = $22_1;
           label$17 : while (1) {
            HEAP32[$7_1 >> 2] = HEAP32[$12_1 >> 2] | 0;
            $7_1 = $7_1 + 4 | 0;
            $12_1 = $12_1 + 4 | 0;
            $15_1 = $15_1 + -1 | 0;
            if ($15_1) {
             continue label$17
            }
            break label$15;
           };
          }
          if (!$22_1) {
           break label$14
          }
         }
         label$18 : {
          if (!(HEAPU8[($3_1 + 16 | 0) >> 0] | 0)) {
           break label$18
          }
          $80($22_1 | 0);
         }
         HEAP32[($3_1 + 12 | 0) >> 2] = 0;
         $15_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
        HEAP8[($3_1 + 16 | 0) >> 0] = 1;
        HEAP32[($3_1 + 8 | 0) >> 2] = $11_1;
       }
       HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + ($15_1 << 2 | 0) | 0) >> 2] = $8_1;
       HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
       break label$4;
      }
      if ($7_1) {
       break label$4
      }
      if ($12_1) {
       break label$4
      }
      $5_1 = $5_1 - (HEAP32[(((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $6_1 | 0) + 12 | 0) >> 2] | 0) | 0;
      break label$3;
     }
     $5_1 = $5_1 + 1 | 0;
    }
    if (($5_1 | 0) < ($4_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return (HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) > (0 | 0) | 0;
 }
 
 function $90($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  label$1 : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break label$1
   }
   if (!(HEAP32[$2_1 >> 2] | 0)) {
    break label$1
   }
   $91($5_1 | 0, $1_1 | 0, $3_1 | 0);
   $92($0_1 | 0, $2_1 | 0, $4_1 | 0, $5_1 | 0, 0 | 0, 0 | 0, 1 | 0);
  }
  global$0 = $5_1 + 112 | 0;
 }
 
 function $91($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $21_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = Math_fround(0), $17_1 = Math_fround(0), $20_1 = Math_fround(0), $22_1 = Math_fround(0), $24_1 = Math_fround(0), $26_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $13_1 = Math_fround(0), $16_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $23_1 = Math_fround(0), $25_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $15_1 = Math_fround(0);
  $3_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $24_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $25_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  $27_1 = Math_fround(Math_fround(Math_fround($24_1 * $23_1) + Math_fround($26_1 * $25_1)) + Math_fround($22_1 * $21_1));
  HEAPF32[($0_1 + 16 | 0) >> 2] = $27_1;
  $28_1 = Math_fround(Math_fround(Math_fround($20_1 * $19_1) + Math_fround($12_1 * $11_1)) + Math_fround($14_1 * $13_1));
  HEAPF32[($0_1 + 56 | 0) >> 2] = $28_1;
  $29_1 = Math_fround(Math_fround(Math_fround($20_1 * $18_1) + Math_fround($12_1 * $9_1)) + Math_fround($14_1 * $10_1));
  HEAPF32[($0_1 + 52 | 0) >> 2] = $29_1;
  $30_1 = Math_fround(Math_fround(Math_fround($20_1 * $23_1) + Math_fround($12_1 * $25_1)) + Math_fround($14_1 * $21_1));
  HEAPF32[($0_1 + 48 | 0) >> 2] = $30_1;
  $31_1 = Math_fround(Math_fround(Math_fround($17_1 * $19_1) + Math_fround($7_1 * $11_1)) + Math_fround($8_1 * $13_1));
  HEAPF32[($0_1 + 40 | 0) >> 2] = $31_1;
  $32_1 = Math_fround(Math_fround(Math_fround($17_1 * $18_1) + Math_fround($7_1 * $9_1)) + Math_fround($8_1 * $10_1));
  HEAPF32[($0_1 + 36 | 0) >> 2] = $32_1;
  $21_1 = Math_fround(Math_fround(Math_fround($17_1 * $23_1) + Math_fround($7_1 * $25_1)) + Math_fround($8_1 * $21_1));
  HEAPF32[($0_1 + 32 | 0) >> 2] = $21_1;
  $11_1 = Math_fround(Math_fround(Math_fround($24_1 * $19_1) + Math_fround($26_1 * $11_1)) + Math_fround($22_1 * $13_1));
  HEAPF32[($0_1 + 24 | 0) >> 2] = $11_1;
  $10_1 = Math_fround(Math_fround(Math_fround($24_1 * $18_1) + Math_fround($26_1 * $9_1)) + Math_fround($22_1 * $10_1));
  HEAPF32[($0_1 + 20 | 0) >> 2] = $10_1;
  HEAPF32[($0_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_abs($27_1)) + Math_fround(9.999999974752427e-07));
  $9_1 = Math_fround(-$15_1);
  HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($20_1 * $9_1) - Math_fround($12_1 * $3_1)) - Math_fround($14_1 * $4_1)) + Math_fround(Math_fround(Math_fround($20_1 * $16_1) + Math_fround($12_1 * $5_1)) + Math_fround($14_1 * $6_1)));
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($17_1 * $9_1) - Math_fround($7_1 * $3_1)) - Math_fround($8_1 * $4_1)) + Math_fround(Math_fround(Math_fround($17_1 * $16_1) + Math_fround($7_1 * $5_1)) + Math_fround($8_1 * $6_1)));
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($24_1 * $9_1) - Math_fround($26_1 * $3_1)) - Math_fround($22_1 * $4_1)) + Math_fround(Math_fround(Math_fround($24_1 * $16_1) + Math_fround($26_1 * $5_1)) + Math_fround($22_1 * $6_1)));
  HEAPF32[($0_1 + 104 | 0) >> 2] = Math_fround(Math_fround(Math_abs($28_1)) + Math_fround(9.999999974752427e-07));
  HEAPF32[($0_1 + 100 | 0) >> 2] = Math_fround(Math_fround(Math_abs($29_1)) + Math_fround(9.999999974752427e-07));
  HEAPF32[($0_1 + 96 | 0) >> 2] = Math_fround(Math_fround(Math_abs($30_1)) + Math_fround(9.999999974752427e-07));
  HEAPF32[($0_1 + 88 | 0) >> 2] = Math_fround(Math_fround(Math_abs($31_1)) + Math_fround(9.999999974752427e-07));
  HEAPF32[($0_1 + 84 | 0) >> 2] = Math_fround(Math_fround(Math_abs($32_1)) + Math_fround(9.999999974752427e-07));
  HEAPF32[($0_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_abs($21_1)) + Math_fround(9.999999974752427e-07));
  HEAPF32[($0_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_abs($11_1)) + Math_fround(9.999999974752427e-07));
  HEAPF32[($0_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_abs($10_1)) + Math_fround(9.999999974752427e-07));
 }
 
 function $92($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $9_1 = 0, $7_1 = 0, $11_1 = 0, $10_1 = 0, $12_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $8_1 = 0, $19_1 = 0, i64toi32_i32$1 = 0, $291_1 = 0, $319_1 = 0, $398_1 = 0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  $8_1 = $4_1 << 4 | 0;
  $9_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $8_1 | 0;
  $10_1 = HEAPU16[$9_1 >> 1] | 0;
  $11_1 = HEAPU16[($9_1 + 2 | 0) >> 1] | 0;
  $12_1 = HEAPU16[($9_1 + 4 | 0) >> 1] | 0;
  HEAP32[($7_1 + 44 | 0) >> 2] = 0;
  $13_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
  HEAPF32[($7_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($12_1 >>> 0) / $13_1) + $14_1);
  $15_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
  HEAPF32[($7_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 >>> 0) / $15_1) + $16_1);
  $17_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
  HEAPF32[($7_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround($10_1 >>> 0) / $17_1) + $18_1);
  $10_1 = HEAPU16[($9_1 + 6 | 0) >> 1] | 0;
  $11_1 = HEAPU16[($9_1 + 10 | 0) >> 1] | 0;
  $9_1 = HEAPU16[($9_1 + 8 | 0) >> 1] | 0;
  HEAP32[(($7_1 + 32 | 0) + 28 | 0) >> 2] = 0;
  HEAPF32[(($7_1 + 32 | 0) + 20 | 0) >> 2] = Math_fround($16_1 + Math_fround(Math_fround($9_1 >>> 0) / $15_1));
  HEAPF32[(($7_1 + 32 | 0) + 24 | 0) >> 2] = Math_fround($14_1 + Math_fround(Math_fround($11_1 >>> 0) / $13_1));
  HEAPF32[($7_1 + 48 | 0) >> 2] = Math_fround($18_1 + Math_fround(Math_fround($10_1 >>> 0) / $17_1));
  $19_1 = $5_1 << 4 | 0;
  $9_1 = (HEAP32[($1_1 + 16 | 0) >> 2] | 0) + $19_1 | 0;
  $10_1 = HEAPU16[$9_1 >> 1] | 0;
  $11_1 = HEAPU16[($9_1 + 2 | 0) >> 1] | 0;
  $12_1 = HEAPU16[($9_1 + 4 | 0) >> 1] | 0;
  HEAP32[($7_1 + 12 | 0) >> 2] = 0;
  $13_1 = Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  HEAPF32[($7_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround($12_1 >>> 0) / $13_1) + $14_1);
  $15_1 = Math_fround(HEAPF32[($1_1 + 60 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($1_1 + 28 | 0) >> 2]);
  HEAPF32[($7_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 >>> 0) / $15_1) + $16_1);
  $17_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  HEAPF32[$7_1 >> 2] = Math_fround(Math_fround(Math_fround($10_1 >>> 0) / $17_1) + $18_1);
  $10_1 = HEAPU16[($9_1 + 6 | 0) >> 1] | 0;
  $11_1 = HEAPU16[($9_1 + 10 | 0) >> 1] | 0;
  $9_1 = HEAPU16[($9_1 + 8 | 0) >> 1] | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = 0;
  HEAPF32[($7_1 + 20 | 0) >> 2] = Math_fround($16_1 + Math_fround(Math_fround($9_1 >>> 0) / $15_1));
  HEAPF32[($7_1 + 24 | 0) >> 2] = Math_fround($14_1 + Math_fround(Math_fround($11_1 >>> 0) / $13_1));
  HEAPF32[($7_1 + 16 | 0) >> 2] = Math_fround($18_1 + Math_fround(Math_fround($10_1 >>> 0) / $17_1));
  label$1 : {
   if (!($93($7_1 + 32 | 0 | 0, $7_1 | 0, $3_1 | 0, $6_1 | 0) | 0)) {
    break label$1
   }
   $6_1 = HEAP32[(((HEAP32[($1_1 + 16 | 0) >> 2] | 0) + $19_1 | 0) + 12 | 0) >> 2] | 0;
   label$2 : {
    $10_1 = HEAP32[(((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $8_1 | 0) + 12 | 0) >> 2] | 0;
    if (($10_1 | 0) < (0 | 0)) {
     break label$2
    }
    label$3 : {
     if (($6_1 | 0) < (0 | 0)) {
      break label$3
     }
     label$4 : {
      $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      if (($3_1 | 0) != (HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $5_1 = $3_1 ? $3_1 << 1 | 0 : 1;
      if (($3_1 | 0) >= ($5_1 | 0)) {
       break label$4
      }
      label$5 : {
       label$6 : {
        if ($5_1) {
         break label$6
        }
        $4_1 = 0;
        break label$5;
       }
       $4_1 = $79($5_1 << 3 | 0 | 0, 16 | 0) | 0;
       $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      }
      $11_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      label$7 : {
       label$8 : {
        label$9 : {
         if (($3_1 | 0) < (1 | 0)) {
          break label$9
         }
         $1_1 = $11_1;
         $0_1 = $4_1;
         $9_1 = $3_1;
         label$10 : while (1) {
          i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
          HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
          $1_1 = $1_1 + 8 | 0;
          $0_1 = $0_1 + 8 | 0;
          $9_1 = $9_1 + -1 | 0;
          if ($9_1) {
           continue label$10
          }
          break label$8;
         };
        }
        if (!$11_1) {
         break label$7
        }
       }
       label$11 : {
        if (!(HEAPU8[($2_1 + 16 | 0) >> 0] | 0)) {
         break label$11
        }
        $80($11_1 | 0);
        $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
       }
       HEAP32[($2_1 + 12 | 0) >> 2] = 0;
      }
      HEAP32[($2_1 + 12 | 0) >> 2] = $4_1;
      HEAP8[($2_1 + 16 | 0) >> 0] = 1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
     }
     HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
     $1_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + ($3_1 << 3 | 0) | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $6_1;
     HEAP32[$1_1 >> 2] = $10_1;
     break label$1;
    }
    $9_1 = $5_1 + 1 | 0;
    $92($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $9_1 | 0, 0 | 0);
    $291_1 = $5_1 + 2 | 0;
    $5_1 = HEAP32[(((HEAP32[($1_1 + 16 | 0) >> 2] | 0) + ($9_1 << 4 | 0) | 0) + 12 | 0) >> 2] | 0;
    $92($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, (($5_1 | 0) > (-1 | 0) ? $291_1 : $9_1 - $5_1 | 0) | 0, 0 | 0);
    break label$1;
   }
   $9_1 = $4_1 + 1 | 0;
   label$12 : {
    if (($6_1 | 0) < (0 | 0)) {
     break label$12
    }
    $92($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $9_1 | 0, $5_1 | 0, 0 | 0);
    $319_1 = $4_1 + 2 | 0;
    $4_1 = HEAP32[(((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($9_1 << 4 | 0) | 0) + 12 | 0) >> 2] | 0;
    $92($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, (($4_1 | 0) > (-1 | 0) ? $319_1 : $9_1 - $4_1 | 0) | 0, $5_1 | 0, 0 | 0);
    break label$1;
   }
   $6_1 = $5_1 + 1 | 0;
   $92($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $9_1 | 0, $6_1 | 0, 0 | 0);
   $5_1 = $5_1 + 2 | 0;
   $10_1 = $6_1 << 4 | 0;
   $11_1 = HEAP32[(((HEAP32[($1_1 + 16 | 0) >> 2] | 0) + $10_1 | 0) + 12 | 0) >> 2] | 0;
   $92($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $9_1 | 0, (($11_1 | 0) > (-1 | 0) ? $5_1 : $6_1 - $11_1 | 0) | 0, 0 | 0);
   $4_1 = $4_1 + 2 | 0;
   $11_1 = $9_1 << 4 | 0;
   $12_1 = HEAP32[(((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $11_1 | 0) + 12 | 0) >> 2] | 0;
   $92($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, (($12_1 | 0) > (-1 | 0) ? $4_1 : $9_1 - $12_1 | 0) | 0, $6_1 | 0, 0 | 0);
   $11_1 = HEAP32[(((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $11_1 | 0) + 12 | 0) >> 2] | 0;
   $398_1 = ($11_1 | 0) > (-1 | 0) ? $4_1 : $9_1 - $11_1 | 0;
   $9_1 = HEAP32[(((HEAP32[($1_1 + 16 | 0) >> 2] | 0) + $10_1 | 0) + 12 | 0) >> 2] | 0;
   $92($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $398_1 | 0, (($9_1 | 0) > (-1 | 0) ? $5_1 : $6_1 - $9_1 | 0) | 0, 0 | 0);
  }
  global$0 = $7_1 + 64 | 0;
 }
 
 function $93($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = Math_fround(0), $11_1 = Math_fround(0), $8_1 = Math_fround(0), $4_1 = Math_fround(0), $7_1 = Math_fround(0), $10_1 = Math_fround(0), $13_1 = Math_fround(0), $21_1 = Math_fround(0), $15_1 = Math_fround(0), $23_1 = Math_fround(0), $14_1 = Math_fround(0), $22_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $6_1 = Math_fround(0), $9_1 = Math_fround(0), $12_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $204_1 = Math_fround(0);
  label$1 : {
   label$2 : {
    $4_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
    $5_1 = Math_fround(Math_fround($4_1 + Math_fround(HEAPF32[$1_1 >> 2])) * Math_fround(.5));
    $6_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
    $7_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
    $8_1 = Math_fround(Math_fround($7_1 + Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2])) * Math_fround(.5));
    $9_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
    $11_1 = Math_fround(Math_fround($10_1 + Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])) * Math_fround(.5));
    $12_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]);
    $14_1 = Math_fround(Math_fround($13_1 + Math_fround(HEAPF32[$0_1 >> 2])) * Math_fround(.5));
    $15_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) + Math_fround(Math_fround(Math_fround($5_1 * $6_1) + Math_fround($8_1 * $9_1)) + Math_fround($11_1 * $12_1))) - $14_1);
    $13_1 = Math_fround($13_1 - $14_1);
    $4_1 = Math_fround($4_1 - $5_1);
    $14_1 = Math_fround(HEAPF32[($2_1 + 64 | 0) >> 2]);
    $7_1 = Math_fround($7_1 - $8_1);
    $16_1 = Math_fround(HEAPF32[($2_1 + 68 | 0) >> 2]);
    $10_1 = Math_fround($10_1 - $11_1);
    $17_1 = Math_fround(HEAPF32[($2_1 + 72 | 0) >> 2]);
    if (Math_fround(Math_abs($15_1)) > Math_fround($13_1 + Math_fround(Math_fround(Math_fround($4_1 * $14_1) + Math_fround($7_1 * $16_1)) + Math_fround($10_1 * $17_1)))) {
     break label$2
    }
    $18_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
    $19_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
    $22_1 = Math_fround(Math_fround($21_1 + Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2])) * Math_fround(.5));
    $23_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) + Math_fround(Math_fround(Math_fround($5_1 * $18_1) + Math_fround($8_1 * $19_1)) + Math_fround($11_1 * $20_1))) - $22_1);
    $21_1 = Math_fround($21_1 - $22_1);
    $22_1 = Math_fround(HEAPF32[($2_1 + 80 | 0) >> 2]);
    $24_1 = Math_fround(HEAPF32[($2_1 + 84 | 0) >> 2]);
    $25_1 = Math_fround(HEAPF32[($2_1 + 88 | 0) >> 2]);
    if (Math_fround(Math_abs($23_1)) > Math_fround($21_1 + Math_fround(Math_fround(Math_fround($4_1 * $22_1) + Math_fround($7_1 * $24_1)) + Math_fround($10_1 * $25_1)))) {
     break label$2
    }
    $26_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
    $27_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
    $28_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
    $204_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) + Math_fround(Math_fround(Math_fround($5_1 * $26_1) + Math_fround($8_1 * $27_1)) + Math_fround($11_1 * $28_1)));
    $5_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
    $8_1 = Math_fround(Math_fround($5_1 + Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2])) * Math_fround(.5));
    $11_1 = Math_fround($204_1 - $8_1);
    $5_1 = Math_fround($5_1 - $8_1);
    $8_1 = Math_fround(HEAPF32[($2_1 + 96 | 0) >> 2]);
    $29_1 = Math_fround(HEAPF32[($2_1 + 100 | 0) >> 2]);
    $30_1 = Math_fround(HEAPF32[($2_1 + 104 | 0) >> 2]);
    if (Math_fround(Math_abs($11_1)) > Math_fround($5_1 + Math_fround(Math_fround(Math_fround($4_1 * $8_1) + Math_fround($7_1 * $29_1)) + Math_fround($10_1 * $30_1)))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround(Math_fround($15_1 * $6_1) + Math_fround($23_1 * $18_1)) + Math_fround($11_1 * $26_1)))) > Math_fround($4_1 + Math_fround(Math_fround(Math_fround($13_1 * $14_1) + Math_fround($21_1 * $22_1)) + Math_fround($5_1 * $8_1)))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround(Math_fround($15_1 * $9_1) + Math_fround($23_1 * $19_1)) + Math_fround($11_1 * $27_1)))) > Math_fround($7_1 + Math_fround(Math_fround(Math_fround($13_1 * $16_1) + Math_fround($21_1 * $24_1)) + Math_fround($5_1 * $29_1)))) {
     break label$2
    }
    $1_1 = Math_fround(Math_abs(Math_fround(Math_fround(Math_fround($15_1 * $12_1) + Math_fround($23_1 * $20_1)) + Math_fround($11_1 * $28_1)))) > Math_fround($10_1 + Math_fround(Math_fround(Math_fround($13_1 * $17_1) + Math_fround($21_1 * $25_1)) + Math_fround($5_1 * $30_1)));
    $2_1 = $1_1 ^ 1 | 0;
    if ($1_1) {
     break label$1
    }
    if (!$3_1) {
     break label$1
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround($11_1 * $18_1) - Math_fround($23_1 * $26_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($21_1 * $8_1) + Math_fround($5_1 * $22_1)) + Math_fround($7_1 * $17_1)) + Math_fround($10_1 * $16_1))) {
     break label$2
    }
    if (!(Math_fround(Math_abs(Math_fround(Math_fround($11_1 * $19_1) - Math_fround($23_1 * $27_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($21_1 * $29_1) + Math_fround($5_1 * $24_1)) + Math_fround($4_1 * $17_1)) + Math_fround($10_1 * $14_1)) ^ 1 | 0)) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround($11_1 * $20_1) - Math_fround($23_1 * $28_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($21_1 * $30_1) + Math_fround($5_1 * $25_1)) + Math_fround($4_1 * $16_1)) + Math_fround($7_1 * $14_1))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround($15_1 * $26_1) - Math_fround($11_1 * $6_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $8_1) + Math_fround($5_1 * $14_1)) + Math_fround($7_1 * $25_1)) + Math_fround($10_1 * $24_1))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround($15_1 * $27_1) - Math_fround($11_1 * $9_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $29_1) + Math_fround($5_1 * $16_1)) + Math_fround($4_1 * $25_1)) + Math_fround($10_1 * $22_1))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround($15_1 * $28_1) - Math_fround($11_1 * $12_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $30_1) + Math_fround($5_1 * $17_1)) + Math_fround($4_1 * $24_1)) + Math_fround($7_1 * $22_1))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround($23_1 * $6_1) - Math_fround($15_1 * $18_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $22_1) + Math_fround($21_1 * $14_1)) + Math_fround($7_1 * $30_1)) + Math_fround($10_1 * $29_1))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround($23_1 * $9_1) - Math_fround($15_1 * $19_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $24_1) + Math_fround($21_1 * $16_1)) + Math_fround($4_1 * $30_1)) + Math_fround($10_1 * $8_1))) {
     break label$2
    }
    $2_1 = 0;
    if (Math_fround(Math_abs(Math_fround(Math_fround($23_1 * $12_1) - Math_fround($15_1 * $20_1)))) > Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $25_1) + Math_fround($21_1 * $17_1)) + Math_fround($4_1 * $29_1)) + Math_fround($7_1 * $8_1))) {
     break label$1
    }
    return 1 | 0;
   }
   $2_1 = 0;
  }
  return $2_1 | 0;
 }
 
 function $94($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = Math_fround(0), $8_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $50_1 = Math_fround(0), $61_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  i64toi32_i32$1 = $3_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 52 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $3_1 + 76 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 72 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $3_1 + 84 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 92 | 0) >> 2] = 0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = 0;
  HEAP32[($3_1 + 40 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 32 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 64 | 0) >> 2] = 0;
  HEAP32[($3_1 + 68 | 0) >> 2] = i64toi32_i32$0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  $4_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $5_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
  $6_1 = Math_fround($4_1 - $5_1);
  $50_1 = Math_fround($6_1 * $6_1);
  $6_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
  $8_1 = Math_fround($6_1 - $7_1);
  $61_1 = Math_fround($50_1 + Math_fround($8_1 * $8_1));
  $8_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
  $10_1 = Math_fround($8_1 - $9_1);
  HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(Math_sqrt(Math_fround($61_1 + Math_fround($10_1 * $10_1)))) * Math_fround(.5));
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($1_1 + 8 | 0) >> 2] = Math_fround(Math_fround($8_1 + $9_1) * Math_fround(.5));
  HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround(Math_fround($6_1 + $7_1) * Math_fround(.5));
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround($4_1 + $5_1) * Math_fround(.5));
  global$0 = $3_1 + 96 | 0;
 }
 
 function $95($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  return Math_fround(Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1)) * $1_1));
 }
 
 function $96($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0);
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1, $1_1 + 16 | 0, $1_1 + 12 | 0);
  $2_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $3_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
  global$0 = $1_1 + 32 | 0;
  return Math_fround(Math_fround($5_1 + Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($3_1 * $3_1) + Math_fround($2_1 * $2_1)) + Math_fround($4_1 * $4_1))))));
 }
 
 function $97($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = Math_fround($4_1);
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = Math_fround(0), $8_1 = Math_fround(0), $14_1 = Math_fround(0), $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = Math_fround(0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $1_1, $5_1, $6_1);
  $7_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $8_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) * $4_1);
  $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $9_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $10_1 = HEAP32[$5_1 >> 2] | 0;
  $11_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  $12_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $13_1 = HEAP32[$6_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    $14_1 = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) * $4_1);
    if ($14_1 > Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    $13_1 = (wasm2js_scratch_store_f32(Math_fround($14_1 + (wasm2js_scratch_store_i32(0, $13_1), wasm2js_scratch_load_f32()))), wasm2js_scratch_load_i32(0));
    break label$1;
   }
   $10_1 = (wasm2js_scratch_store_f32(Math_fround($14_1 + (wasm2js_scratch_store_i32(0, $10_1), wasm2js_scratch_load_f32()))), wasm2js_scratch_load_i32(0));
  }
  $7_1 = Math_fround($7_1 * $4_1);
  label$3 : {
   label$4 : {
    if ($8_1 > Math_fround(0.0) ^ 1 | 0) {
     break label$4
    }
    $12_1 = (wasm2js_scratch_store_f32(Math_fround($8_1 + (wasm2js_scratch_store_i32(0, $12_1), wasm2js_scratch_load_f32()))), wasm2js_scratch_load_i32(0));
    break label$3;
   }
   $9_1 = (wasm2js_scratch_store_f32(Math_fround($8_1 + (wasm2js_scratch_store_i32(0, $9_1), wasm2js_scratch_load_f32()))), wasm2js_scratch_load_i32(0));
  }
  label$5 : {
   label$6 : {
    if ($7_1 > Math_fround(0.0) ^ 1 | 0) {
     break label$6
    }
    $11_1 = (wasm2js_scratch_store_f32(Math_fround($7_1 + (wasm2js_scratch_store_i32(0, $11_1), wasm2js_scratch_load_f32()))), wasm2js_scratch_load_i32(0));
    break label$5;
   }
   $1_1 = (wasm2js_scratch_store_f32(Math_fround($7_1 + (wasm2js_scratch_store_i32(0, $1_1), wasm2js_scratch_load_f32()))), wasm2js_scratch_load_i32(0));
  }
  $8_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $14_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
  $15_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1));
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $9_1;
  HEAP32[$5_1 >> 2] = $10_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = $11_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $12_1;
  HEAP32[$6_1 >> 2] = $13_1;
  $4_1 = Math_fround(Math_fround($15_1 * Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($14_1 * $14_1)) + Math_fround($8_1 * $8_1))))) * $4_1);
  HEAPF32[$5_1 >> 2] = Math_fround(Math_fround(HEAPF32[$5_1 >> 2]) - $4_1);
  HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]) - $4_1);
  HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]) - $4_1);
  HEAPF32[$6_1 >> 2] = Math_fround($4_1 + Math_fround(HEAPF32[$6_1 >> 2]));
  HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround($4_1 + Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]));
  HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround($4_1 + Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]));
 }
 
 function $98($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($2_1, $0_1) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($2_1, $3_1) | 0;
  HEAP32[$1_1 >> 2] = $4_1;
  label$1 : {
   if (!$4_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($2_1, $3_1);
  }
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
  return 5872 | 0;
 }
 
 function $99($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0]($0_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($0_1, HEAP32[($2_1 + 8 | 0) >> 2] | 0, $1_1) | 0), wasm2js_i32$4 = 1346455635), wasm2js_i32$5 = $0_1), wasm2js_i32$0 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function $100($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = -1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 35;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 5928;
  return $0_1 | 0;
 }
 
 function $101($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $102($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $103($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0), $20_1 = Math_fround(0), $24_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $19_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0);
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = 0;
  $8_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $9_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  HEAPF32[($7_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * $8_1) + Math_fround(Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]) * $9_1)) + Math_fround(Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]) * $10_1));
  $11_1 = $1_1 + 24 | 0;
  $12_1 = $1_1 + 40 | 0;
  HEAPF32[($7_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])) + Math_fround($9_1 * Math_fround(HEAPF32[$11_1 >> 2]))) + Math_fround($10_1 * Math_fround(HEAPF32[$12_1 >> 2])));
  $13_1 = $1_1 + 20 | 0;
  $14_1 = $1_1 + 36 | 0;
  HEAPF32[($7_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2])) + Math_fround($9_1 * Math_fround(HEAPF32[$13_1 >> 2]))) + Math_fround($10_1 * Math_fround(HEAPF32[$14_1 >> 2])));
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($7_1 + 16 | 0, $0_1, $7_1 + 32 | 0);
  $15_1 = $1_1 + 56 | 0;
  $16_1 = Math_fround(HEAPF32[$15_1 >> 2]);
  $17_1 = Math_fround(HEAPF32[$12_1 >> 2]);
  $18_1 = Math_fround(HEAPF32[$14_1 >> 2]);
  $19_1 = $1_1 + 52 | 0;
  $20_1 = Math_fround(HEAPF32[$19_1 >> 2]);
  $21_1 = Math_fround(HEAPF32[$11_1 >> 2]);
  $22_1 = Math_fround(HEAPF32[$13_1 >> 2]);
  $23_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $25_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $27_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $28_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
  HEAP32[($7_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($7_1 + 8 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($7_1 + 40 | 0) >> 2]));
  HEAPF32[($7_1 + 4 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($7_1 + 36 | 0) >> 2]));
  HEAPF32[$7_1 >> 2] = Math_fround(-Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]));
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($7_1 + 16 | 0, $0_1, $7_1);
  $29_1 = Math_fround(HEAPF32[$15_1 >> 2]);
  $30_1 = Math_fround(HEAPF32[$12_1 >> 2]);
  $31_1 = Math_fround(HEAPF32[$14_1 >> 2]);
  $32_1 = Math_fround(HEAPF32[$19_1 >> 2]);
  $33_1 = Math_fround(HEAPF32[$11_1 >> 2]);
  $34_1 = Math_fround(HEAPF32[$13_1 >> 2]);
  $35_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $36_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $37_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $38_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $39_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $40_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $41_1 = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
  $42_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
  $43_1 = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
  $24_1 = Math_fround($24_1 + Math_fround(Math_fround(Math_fround($9_1 * $26_1) + Math_fround($10_1 * $27_1)) + Math_fround($8_1 * $25_1)));
  $20_1 = Math_fround($20_1 + Math_fround(Math_fround(Math_fround($9_1 * $28_1) + Math_fround($10_1 * $22_1)) + Math_fround($8_1 * $21_1)));
  $8_1 = Math_fround($16_1 + Math_fround(Math_fround(Math_fround($9_1 * $23_1) + Math_fround($10_1 * $18_1)) + Math_fround($8_1 * $17_1)));
  HEAPF32[$3_1 >> 2] = Math_fround(Math_fround(Math_fround($24_1 * Math_fround(HEAPF32[$2_1 >> 2])) + Math_fround($20_1 * Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]))) + Math_fround($8_1 * Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2])));
  $9_1 = Math_fround($36_1 + Math_fround(Math_fround(Math_fround($42_1 * $38_1) + Math_fround($43_1 * $39_1)) + Math_fround($41_1 * $37_1)));
  $10_1 = Math_fround($32_1 + Math_fround(Math_fround(Math_fround($42_1 * $40_1) + Math_fround($43_1 * $34_1)) + Math_fround($41_1 * $33_1)));
  $41_1 = Math_fround($29_1 + Math_fround(Math_fround(Math_fround($42_1 * $35_1) + Math_fround($43_1 * $31_1)) + Math_fround($41_1 * $30_1)));
  HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[$2_1 >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]))) + Math_fround($41_1 * Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2])));
  HEAP32[($6_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($6_1 + 8 | 0) >> 2] = $41_1;
  HEAPF32[($6_1 + 4 | 0) >> 2] = $10_1;
  HEAPF32[$6_1 >> 2] = $9_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($5_1 + 8 | 0) >> 2] = $8_1;
  HEAPF32[($5_1 + 4 | 0) >> 2] = $20_1;
  HEAPF32[$5_1 >> 2] = $24_1;
  label$1 : {
   $42_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $43_1 = Math_fround(HEAPF32[$4_1 >> 2]);
   if ($42_1 > $43_1 ^ 1 | 0) {
    break label$1
   }
   HEAPF32[$3_1 >> 2] = $43_1;
   HEAPF32[$4_1 >> 2] = $42_1;
   HEAP32[($6_1 + 12 | 0) >> 2] = 0;
   HEAPF32[($6_1 + 8 | 0) >> 2] = $8_1;
   HEAPF32[($6_1 + 4 | 0) >> 2] = $20_1;
   HEAPF32[$6_1 >> 2] = $24_1;
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   HEAPF32[($5_1 + 8 | 0) >> 2] = $41_1;
   HEAPF32[($5_1 + 4 | 0) >> 2] = $10_1;
   HEAPF32[$5_1 >> 2] = $9_1;
  }
  global$0 = $7_1 + 48 | 0;
 }
 
 function $104($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = Math_fround(0), $4_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = Math_fround(0), $8_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $10_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), i64toi32_i32$2 = 0, $16_1 = 0, $15_1 = Math_fround(0), $140_1 = 0, $145_1 = 0, $148_1 = 0, $260_1 = 0, $350_1 = Math_fround(0), $356_1 = Math_fround(0);
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($4_1 >>> 0 > 13 >>> 0) {
     break label$2
    }
    label$3 : {
     switch ($4_1 | 0) {
     case 8:
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$0 = 0;
      HEAP32[$0_1 >> 2] = 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $0_1 + 8 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      break label$1;
     default:
      HEAP32[($0_1 + 12 | 0) >> 2] = 0;
      $5_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
      HEAPF32[$0_1 >> 2] = Math_fround(HEAPF32[$2_1 >> 2]) >= Math_fround(0.0) ? $5_1 : Math_fround(-$5_1);
      $5_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
      HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) >= Math_fround(0.0) ? $5_1 : Math_fround(-$5_1);
      $5_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
      HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) >= Math_fround(0.0) ? $5_1 : Math_fround(-$5_1);
      break label$1;
     case 1:
      HEAP32[($0_1 + 12 | 0) >> 2] = 0;
      $4_1 = $1_1 + 60 | 0;
      $5_1 = Math_fround(HEAPF32[$2_1 >> 2]);
      $6_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
      $7_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
      $8_1 = Math_fround(Math_fround(Math_fround($5_1 * Math_fround(HEAPF32[($1_1 + 76 | 0) >> 2])) + Math_fround($6_1 * Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]))) + Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 84 | 0) >> 2])));
      $9_1 = Math_fround(Math_fround(Math_fround($5_1 * Math_fround(HEAPF32[($1_1 + 92 | 0) >> 2])) + Math_fround($6_1 * Math_fround(HEAPF32[($1_1 + 96 | 0) >> 2]))) + Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 100 | 0) >> 2])));
      $5_1 = Math_fround(Math_fround(Math_fround($5_1 * Math_fround(HEAPF32[$4_1 >> 2])) + Math_fround($6_1 * Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]))) + Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2])));
      $1_1 = $4_1 + (($5_1 < $8_1 ? ($8_1 < $9_1 ? 2 : 1) : ($5_1 < $9_1) << 1 | 0) << 4 | 0) | 0;
      HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      $140_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $0_1;
      HEAP32[$0_1 >> 2] = $140_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      break label$1;
     case 13:
      i64toi32_i32$2 = $1_1 + 40 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $145_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $3_1 + 40 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $145_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$0 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      $148_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1;
      HEAP32[($3_1 + 32 | 0) >> 2] = $148_1;
      HEAP32[($3_1 + 36 | 0) >> 2] = i64toi32_i32$1;
      $4_1 = 0;
      HEAP32[($3_1 + 28 | 0) >> 2] = 0;
      HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
      $10_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      HEAP32[($3_1 + 20 | 0) >> 2] = $10_1;
      $11_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      HEAP32[($3_1 + 24 | 0) >> 2] = $11_1;
      $2_1 = 1;
      $5_1 = (wasm2js_scratch_store_i32(0, $11_1), wasm2js_scratch_load_f32());
      label$10 : {
       label$11 : {
        $1_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
        $11_1 = $1_1 + -1 | 0;
        if ($11_1 >>> 0 <= 1 >>> 0) {
         break label$11
        }
        $11_1 = 2;
        break label$10;
       }
       label$12 : {
        switch ($11_1 | 0) {
        default:
         $2_1 = 0;
         $4_1 = 1;
         $11_1 = 2;
         break label$10;
        case 1:
         break label$12;
        };
       }
       $5_1 = (wasm2js_scratch_store_i32(0, $10_1), wasm2js_scratch_load_f32());
       $2_1 = 0;
       $4_1 = 2;
       $11_1 = 1;
      }
      $7_1 = Math_fround(0.0);
      $6_1 = Math_fround(HEAPF32[(($3_1 + 32 | 0) + ($1_1 << 2 | 0) | 0) >> 2]);
      $1_1 = $2_1 << 2 | 0;
      $9_1 = Math_fround(HEAPF32[($3_1 + 32 | 0 | $1_1 | 0) >> 2]);
      label$14 : {
       label$15 : {
        $8_1 = Math_fround(HEAPF32[($3_1 + 16 | 0 | $1_1 | 0) >> 2]);
        $12_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($5_1 * $5_1))));
        if ($12_1 == Math_fround(0.0)) {
         break label$15
        }
        $7_1 = Math_fround($9_1 / $12_1);
        HEAPF32[($3_1 | ($2_1 << 2 | 0) | 0) >> 2] = Math_fround($8_1 * $7_1);
        $1_1 = $4_1 << 2 | 0;
        HEAPF32[($3_1 + $1_1 | 0) >> 2] = Math_fround(HEAPF32[(($3_1 + 16 | 0) + $1_1 | 0) >> 2]) < Math_fround(0.0) ? Math_fround(-$6_1) : $6_1;
        $7_1 = Math_fround($5_1 * $7_1);
        break label$14;
       }
       HEAPF32[($3_1 | ($2_1 << 2 | 0) | 0) >> 2] = $9_1;
       $1_1 = $4_1 << 2 | 0;
       HEAPF32[($3_1 + $1_1 | 0) >> 2] = Math_fround(HEAPF32[(($3_1 + 16 | 0) + $1_1 | 0) >> 2]) < Math_fround(0.0) ? Math_fround(-$6_1) : $6_1;
      }
      HEAPF32[($3_1 + ($11_1 << 2 | 0) | 0) >> 2] = $7_1;
      HEAP32[($0_1 + 12 | 0) >> 2] = 0;
      HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      $260_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $0_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $260_1;
      HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
      break label$1;
     case 10:
      $11_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      $4_1 = $11_1 << 2 | 0;
      $5_1 = Math_fround(HEAPF32[(($1_1 + $4_1 | 0) + 32 | 0) >> 2]);
      label$16 : {
       label$17 : {
        $7_1 = Math_fround(HEAPF32[$2_1 >> 2]);
        $6_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
        $8_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
        $9_1 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($6_1 * $6_1)) + Math_fround($8_1 * $8_1));
        if (!($9_1 < Math_fround(1.4210854715202004e-14))) {
         break label$17
        }
        $6_1 = Math_fround(0.0);
        $7_1 = Math_fround(1.0);
        $8_1 = Math_fround(0.0);
        break label$16;
       }
       $9_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($9_1)));
       $8_1 = Math_fround($8_1 * $9_1);
       $6_1 = Math_fround($6_1 * $9_1);
       $7_1 = Math_fround($7_1 * $9_1);
      }
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = 0;
      HEAP32[($3_1 + 40 | 0) >> 2] = 0;
      HEAP32[($3_1 + 44 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = 0;
      HEAP32[($3_1 + 32 | 0) >> 2] = 0;
      HEAP32[($3_1 + 36 | 0) >> 2] = i64toi32_i32$0;
      HEAPF32[(($3_1 + 32 | 0) + $4_1 | 0) >> 2] = $5_1;
      $9_1 = Math_fround(-999999984306749440.0);
      $1_1 = 0;
      $2_1 = 0;
      $4_1 = 0;
      label$18 : {
       $12_1 = Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]);
       $13_1 = Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]);
       $14_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
       $15_1 = Math_fround(Math_fround(Math_fround($7_1 * $12_1) + Math_fround($6_1 * $13_1)) + Math_fround($8_1 * $14_1));
       if ($15_1 > Math_fround(-999999984306749440.0) ^ 1 | 0) {
        break label$18
       }
       $4_1 = (wasm2js_scratch_store_f32($14_1), wasm2js_scratch_load_i32(0));
       $2_1 = (wasm2js_scratch_store_f32($13_1), wasm2js_scratch_load_i32(0));
       $1_1 = (wasm2js_scratch_store_f32($12_1), wasm2js_scratch_load_i32(0));
       $9_1 = $15_1;
      }
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = 0;
      HEAP32[($3_1 + 40 | 0) >> 2] = 0;
      HEAP32[($3_1 + 44 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = 0;
      HEAP32[($3_1 + 32 | 0) >> 2] = 0;
      HEAP32[($3_1 + 36 | 0) >> 2] = i64toi32_i32$0;
      HEAPF32[(($3_1 + 32 | 0) + ($11_1 << 2 | 0) | 0) >> 2] = Math_fround(-$5_1);
      label$19 : {
       $5_1 = Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]);
       $350_1 = Math_fround($7_1 * $5_1);
       $7_1 = Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]);
       $356_1 = Math_fround($350_1 + Math_fround($6_1 * $7_1));
       $6_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
       if (Math_fround($356_1 + Math_fround($8_1 * $6_1)) > $9_1 ^ 1 | 0) {
        break label$19
       }
       $4_1 = (wasm2js_scratch_store_f32($6_1), wasm2js_scratch_load_i32(0));
       $2_1 = (wasm2js_scratch_store_f32($7_1), wasm2js_scratch_load_i32(0));
       $1_1 = (wasm2js_scratch_store_f32($5_1), wasm2js_scratch_load_i32(0));
      }
      HEAP32[($0_1 + 12 | 0) >> 2] = 0;
      HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
      HEAP32[$0_1 >> 2] = $1_1;
      break label$1;
     case 5:
      $12_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
      $13_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
      $14_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
      $16_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $10_1 = HEAP32[($1_1 + 100 | 0) >> 2] | 0;
        if (($10_1 | 0) >= (1 | 0)) {
         break label$21
        }
        $4_1 = -1;
        break label$20;
       }
       $7_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) * $12_1);
       $8_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) * $13_1);
       $9_1 = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) * $14_1);
       $2_1 = 0;
       $4_1 = -1;
       $5_1 = Math_fround(-3402823466385288598117041.0e14);
       $1_1 = $16_1;
       label$22 : while (1) {
        $6_1 = Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[$1_1 >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]))) + Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])));
        $11_1 = $6_1 > $5_1;
        $5_1 = $11_1 ? $6_1 : $5_1;
        $4_1 = $11_1 ? $2_1 : $4_1;
        $1_1 = $1_1 + 16 | 0;
        $2_1 = $2_1 + 1 | 0;
        if (($10_1 | 0) != ($2_1 | 0)) {
         continue label$22
        }
        break label$22;
       };
      }
      HEAP32[($0_1 + 12 | 0) >> 2] = 0;
      $1_1 = $16_1 + ($4_1 << 4 | 0) | 0;
      HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround($12_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]));
      HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround($13_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]));
      HEAPF32[$0_1 >> 2] = Math_fround($14_1 * Math_fround(HEAPF32[$1_1 >> 2]));
      break label$1;
     case 2:
     case 3:
     case 6:
     case 7:
     case 9:
     case 11:
     case 12:
      break label$2;
     case 4:
      break label$3;
     };
    }
    $12_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
    $14_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
    $16_1 = HEAP32[($1_1 + 108 | 0) >> 2] | 0;
    label$23 : {
     label$24 : {
      $10_1 = HEAP32[($1_1 + 100 | 0) >> 2] | 0;
      if (($10_1 | 0) >= (1 | 0)) {
       break label$24
      }
      $4_1 = -1;
      break label$23;
     }
     $7_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) * $12_1);
     $8_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) * $13_1);
     $9_1 = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) * $14_1);
     $2_1 = 0;
     $4_1 = -1;
     $5_1 = Math_fround(-3402823466385288598117041.0e14);
     $1_1 = $16_1;
     label$25 : while (1) {
      $6_1 = Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[$1_1 >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]))) + Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])));
      $11_1 = $6_1 > $5_1;
      $5_1 = $11_1 ? $6_1 : $5_1;
      $4_1 = $11_1 ? $2_1 : $4_1;
      $1_1 = $1_1 + 16 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (($10_1 | 0) != ($2_1 | 0)) {
       continue label$25
      }
      break label$25;
     };
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = 0;
    $1_1 = $16_1 + ($4_1 << 4 | 0) | 0;
    HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround($12_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]));
    HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround($13_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]));
    HEAPF32[$0_1 >> 2] = Math_fround($14_1 * Math_fround(HEAPF32[$1_1 >> 2]));
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($0_1, $1_1, $2_1);
  }
  global$0 = $3_1 + 48 | 0;
 }
 
 function $105($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), i64toi32_i32$2 = 0, $8_1 = Math_fround(0), $4_1 = 0, $18_1 = 0, $21_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = ($3_1 + 16 | 0) + 8 | 0;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $18_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[i64toi32_i32$0 >> 2] = $18_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $21_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $21_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $5_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[$4_1 >> 2]);
   if (Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1)) < Math_fround(1.4210854715202004e-14) ^ 1 | 0) {
    break label$1
   }
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[($3_1 + 24 | 0) >> 2] = -1082130432;
   HEAP32[($3_1 + 28 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = -1082130432;
   HEAP32[($3_1 + 16 | 0) >> 2] = -1082130432;
   HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   $7_1 = Math_fround(-1.0);
   $6_1 = Math_fround(-1.0);
   $5_1 = Math_fround(-1.0);
  }
  $8_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1)))));
  HEAPF32[($3_1 + 24 | 0) >> 2] = Math_fround($7_1 * $8_1);
  HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround($6_1 * $8_1);
  HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround($5_1 * $8_1);
  $104($3_1 | 0, $1_1 | 0, $3_1 + 16 | 0 | 0);
  label$2 : {
   label$3 : {
    $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if ($2_1 >>> 0 > 13 >>> 0) {
     break label$3
    }
    label$4 : {
     switch ($2_1 | 0) {
     case 8:
      $5_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]));
      break label$2;
     case 2:
     case 3:
     case 6:
     case 7:
     case 9:
     case 12:
      break label$3;
     default:
      break label$4;
     };
    }
    $5_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
    break label$2;
   }
   $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($1_1));
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(Math_fround($5_1 * Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]));
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround($5_1 * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])) + Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]));
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($5_1 * Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2])) + Math_fround(HEAPF32[$3_1 >> 2]));
  global$0 = $3_1 + 32 | 0;
 }
 
 function $106($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if ($1_1 >>> 0 > 13 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 | 0) {
    case 8:
     return Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2])));
    case 2:
    case 3:
    case 6:
    case 7:
    case 9:
    case 12:
     break label$1;
    default:
     break label$2;
    };
   }
   return Math_fround(Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]));
  }
  return Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1)));
 }
 
 function $107($0_1) {
  $0_1 = $0_1 | 0;
  return 12 | 0;
 }
 
 function $108($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $145($0_1 | 0) | 0;
  HEAPF32[($0_1 + 48 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 6056;
  HEAP32[($0_1 + 56 | 0) >> 2] = 1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 10;
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 40 | 0) >> 2] = $1_1;
  HEAPF32[($0_1 + 36 | 0) >> 2] = Math_fround($2_1 * Math_fround(.5));
  HEAPF32[($0_1 + 32 | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $109($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $7_1 = Math_fround(0), $6_1 = Math_fround(0), $9_1 = Math_fround(0), $8_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $105_1 = Math_fround(0), $111_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    $4_1 = Math_fround(HEAPF32[$2_1 >> 2]);
    $5_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    $7_1 = Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)) + Math_fround($6_1 * $6_1));
    if (!($7_1 < Math_fround(9.999999747378752e-05))) {
     break label$2
    }
    $5_1 = Math_fround(0.0);
    $4_1 = Math_fround(1.0);
    $6_1 = Math_fround(0.0);
    break label$1;
   }
   $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($7_1)));
   $6_1 = Math_fround($6_1 * $7_1);
   $5_1 = Math_fround($5_1 * $7_1);
   $4_1 = Math_fround($4_1 * $7_1);
  }
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = (HEAP32[($1_1 + 56 | 0) >> 2] | 0) << 2 | 0;
  $8_1 = $3_1 + $2_1 | 0;
  $9_1 = Math_fround(HEAPF32[(($1_1 + $2_1 | 0) + 32 | 0) >> 2]);
  HEAPF32[$8_1 >> 2] = $9_1;
  $7_1 = Math_fround(-999999984306749440.0);
  label$3 : {
   $10_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $11_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   $13_1 = Math_fround(Math_fround(Math_fround($4_1 * $10_1) + Math_fround($5_1 * $11_1)) + Math_fround($6_1 * $12_1));
   if ($13_1 > Math_fround(-999999984306749440.0) ^ 1 | 0) {
    break label$3
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   HEAPF32[($0_1 + 8 | 0) >> 2] = $12_1;
   HEAPF32[($0_1 + 4 | 0) >> 2] = $11_1;
   HEAPF32[$0_1 >> 2] = $10_1;
   $7_1 = $13_1;
  }
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[$8_1 >> 2] = Math_fround(-$9_1);
  label$4 : {
   $9_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $105_1 = Math_fround($4_1 * $9_1);
   $4_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
   $111_1 = Math_fround($105_1 + Math_fround($5_1 * $4_1));
   $5_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   if (Math_fround($111_1 + Math_fround($6_1 * $5_1)) > $7_1 ^ 1 | 0) {
    break label$4
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
   HEAPF32[($0_1 + 8 | 0) >> 2] = $5_1;
   HEAPF32[($0_1 + 4 | 0) >> 2] = $4_1;
   HEAPF32[$0_1 >> 2] = $9_1;
  }
 }
 
 function $110($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $7_1 = 0, $11_1 = Math_fround(0), i64toi32_i32$0 = 0, $8_1 = 0, $12_1 = Math_fround(0), $15_1 = Math_fround(0), $5_1 = 0, $18_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $19_1 = Math_fround(0), $119_1 = Math_fround(0), $125_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = 0;
   label$2 : while (1) {
    $6_1 = $4_1 + 8 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $7_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    $8_1 = $7_1 << 2 | 0;
    $9_1 = HEAP32[(($0_1 + $8_1 | 0) + 32 | 0) >> 2] | 0;
    HEAP32[($4_1 + $8_1 | 0) >> 2] = $9_1;
    $10_1 = Math_fround(-999999984306749440.0);
    label$3 : {
     label$4 : {
      $11_1 = Math_fround(HEAPF32[$4_1 >> 2]);
      $8_1 = $1_1 + $5_1 | 0;
      $12_1 = Math_fround(HEAPF32[$8_1 >> 2]);
      $13_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
      $14_1 = $8_1 + 4 | 0;
      $15_1 = Math_fround(HEAPF32[$14_1 >> 2]);
      $16_1 = Math_fround(HEAPF32[$6_1 >> 2]);
      $17_1 = $8_1 + 8 | 0;
      $18_1 = Math_fround(HEAPF32[$17_1 >> 2]);
      $19_1 = Math_fround(Math_fround(Math_fround($11_1 * $12_1) + Math_fround($13_1 * $15_1)) + Math_fround($16_1 * $18_1));
      if (!($19_1 > Math_fround(-999999984306749440.0) ^ 1 | 0)) {
       break label$4
      }
      $11_1 = (wasm2js_scratch_store_i32(0, $9_1), wasm2js_scratch_load_f32());
      break label$3;
     }
     $7_1 = $2_1 + $5_1 | 0;
     HEAPF32[$7_1 >> 2] = $11_1;
     HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     HEAPF32[($7_1 + 8 | 0) >> 2] = $16_1;
     HEAPF32[($7_1 + 4 | 0) >> 2] = $13_1;
     $18_1 = Math_fround(HEAPF32[$17_1 >> 2]);
     $15_1 = Math_fround(HEAPF32[$14_1 >> 2]);
     $7_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     $11_1 = Math_fround(HEAPF32[(($0_1 + ($7_1 << 2 | 0) | 0) + 32 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[$8_1 >> 2]);
     $10_1 = $19_1;
    }
    i64toi32_i32$0 = 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAPF32[($4_1 + ($7_1 << 2 | 0) | 0) >> 2] = Math_fround(-$11_1);
    label$5 : {
     $11_1 = Math_fround(HEAPF32[$4_1 >> 2]);
     $119_1 = Math_fround($11_1 * $12_1);
     $12_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
     $125_1 = Math_fround($119_1 + Math_fround($12_1 * $15_1));
     $15_1 = Math_fround(HEAPF32[$6_1 >> 2]);
     if (Math_fround($125_1 + Math_fround($15_1 * $18_1)) > $10_1 ^ 1 | 0) {
      break label$5
     }
     $6_1 = $2_1 + $5_1 | 0;
     HEAPF32[$6_1 >> 2] = $11_1;
     HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     HEAPF32[($6_1 + 8 | 0) >> 2] = $15_1;
     HEAPF32[($6_1 + 4 | 0) >> 2] = $12_1;
    }
    $5_1 = $5_1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $111($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $6_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0;
  $4_1 = $0_1 + 32 | 0;
  $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + ((($5_1 + 2 | 0 | 0) % (3 | 0) | 0) << 2 | 0) | 0) >> 2] | 0;
  $0_1 = $3_1 - 16 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
  HEAP32[$0_1 >> 2] = $6_1;
  $6_1 = $5_1 << 2 | 0;
  $3_1 = $0_1 + $6_1 | 0;
  HEAPF32[$3_1 >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + $6_1 | 0) >> 2]) + Math_fround(HEAPF32[$3_1 >> 2]));
  $1_1 = Math_fround($1_1 * Math_fround(.0833333283662796));
  $7_1 = Math_fround(HEAPF32[$0_1 >> 2]);
  $7_1 = Math_fround($7_1 + $7_1);
  $7_1 = Math_fround($7_1 * $7_1);
  $8_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
  $8_1 = Math_fround($8_1 + $8_1);
  $8_1 = Math_fround($8_1 * $8_1);
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($1_1 * Math_fround($7_1 + $8_1));
  $9_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
  $9_1 = Math_fround($9_1 + $9_1);
  $9_1 = Math_fround($9_1 * $9_1);
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($1_1 * Math_fround($7_1 + $9_1));
  HEAPF32[$2_1 >> 2] = Math_fround($1_1 * Math_fround($8_1 + $9_1));
 }
 
 function $112($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $145($0_1 | 0) | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 48 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 6156;
  HEAP32[($0_1 + 4 | 0) >> 2] = 10;
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 40 | 0) >> 2] = $1_1;
  HEAPF32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAPF32[($0_1 + 32 | 0) >> 2] = Math_fround($2_1 * Math_fround(.5));
  return $0_1 | 0;
 }
 
 function $113($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $145($0_1 | 0) | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = 2;
  HEAPF32[($0_1 + 48 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 6256;
  HEAP32[($0_1 + 4 | 0) >> 2] = 10;
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 40 | 0) >> 2] = Math_fround($2_1 * Math_fround(.5));
  HEAPF32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAPF32[($0_1 + 32 | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $114($0_1) {
  $0_1 = $0_1 | 0;
  $101($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $115($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $16_1 = Math_fround(0), $6_1 = Math_fround(0), $15_1 = Math_fround(0), $17_1 = Math_fround(0), $10_1 = Math_fround(0), $5_1 = 0, $9_1 = Math_fround(0), $14_1 = Math_fround(0), $18_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $84_1 = Math_fround(0), $90_1 = Math_fround(0), $97_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  $5_1 = $0_1 + 32 | 0;
  $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  $6_1 = Math_fround(HEAPF32[($5_1 + ((($0_1 + 2 | 0 | 0) % (3 | 0) | 0) << 2 | 0) | 0) >> 2]);
  HEAPF32[($4_1 + 8 | 0) >> 2] = $6_1;
  HEAPF32[($4_1 + 4 | 0) >> 2] = $6_1;
  HEAPF32[$4_1 >> 2] = $6_1;
  $0_1 = $0_1 << 2 | 0;
  HEAPF32[($4_1 + $0_1 | 0) >> 2] = Math_fround($6_1 + Math_fround(HEAPF32[($5_1 + $0_1 | 0) >> 2]));
  $6_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $17_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $84_1 = Math_fround(Math_abs($16_1));
  $16_1 = Math_fround(HEAPF32[$4_1 >> 2]);
  $90_1 = Math_fround(Math_abs($17_1));
  $17_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
  $97_1 = Math_fround(Math_abs($15_1));
  $15_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  $18_1 = Math_fround(Math_fround(Math_fround($84_1 * $16_1) + Math_fround($90_1 * $17_1)) + Math_fround($97_1 * $15_1));
  HEAPF32[$2_1 >> 2] = Math_fround($14_1 - $18_1);
  $10_1 = Math_fround(Math_fround(Math_fround($16_1 * Math_fround(Math_abs($13_1))) + Math_fround($17_1 * Math_fround(Math_abs($11_1)))) + Math_fround($15_1 * Math_fround(Math_abs($10_1))));
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($9_1 - $10_1);
  $16_1 = Math_fround(Math_fround(Math_fround($16_1 * Math_fround(Math_abs($12_1))) + Math_fround($17_1 * Math_fround(Math_abs($8_1)))) + Math_fround($15_1 * Math_fround(Math_abs($7_1))));
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($6_1 - $16_1);
  HEAPF32[$3_1 >> 2] = Math_fround($14_1 + $18_1);
  HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($9_1 + $10_1);
  HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($6_1 + $16_1);
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
 }
 
 function $116($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $6_1 = 0, $2_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $2_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
  $3_1 = $0_1 + 36 | 0;
  $4_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $5_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
  $6_1 = $0_1 + 40 | 0;
  $7_1 = Math_fround(HEAPF32[$6_1 >> 2]);
  $8_1 = Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
  $146($0_1 | 0, $1_1 | 0);
  $10_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $11_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAPF32[$6_1 >> 2] = Math_fround($12_1 * Math_fround($7_1 / $5_1));
  HEAPF32[$3_1 >> 2] = Math_fround($11_1 * Math_fround($4_1 / $2_1));
  HEAPF32[($0_1 + 32 | 0) >> 2] = Math_fround($10_1 * Math_fround($9_1 / $8_1));
  HEAP32[($0_1 + 48 | 0) >> 2] = HEAP32[(($0_1 + 32 | 0) + ((((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 2 | 0 | 0) % (3 | 0) | 0) << 2 | 0) | 0) >> 2] | 0;
 }
 
 function $117($0_1) {
  $0_1 = $0_1 | 0;
  return 6444 | 0;
 }
 
 function $118($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + ((HEAP32[($1_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 1065353216;
 }
 
 function $119($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
 }
 
 function $120($0_1) {
  $0_1 = $0_1 | 0;
  return 60 | 0;
 }
 
 function $121($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $98($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($1_1 + 28 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP32[($1_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  HEAP32[($1_1 + 36 | 0) >> 2] = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  HEAP32[($1_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[($1_1 + 24 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($1_1 + 48 | 0) >> 2] = 0;
  HEAP32[($1_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  HEAP32[($1_1 + 56 | 0) >> 2] = 0;
  HEAP32[($1_1 + 52 | 0) >> 2] = $0_1;
  return 6457 | 0;
 }
 
 function $122($0_1) {
  $0_1 = $0_1 | 0;
  $101($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $123($0_1) {
  $0_1 = $0_1 | 0;
  return 6476 | 0;
 }
 
 function $124($0_1) {
  $0_1 = $0_1 | 0;
  $101($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $125($0_1) {
  $0_1 = $0_1 | 0;
  return 6485 | 0;
 }
 
 function $126($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $145($0_1 | 0) | 0;
  HEAPF32[($0_1 + 64 | 0) >> 2] = $2_1;
  HEAPF32[($0_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 6504;
  HEAP32[($0_1 + 76 | 0) >> 2] = 2;
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = 1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 11;
  HEAPF32[($0_1 + 40 | 0) >> 2] = $1_1;
  HEAPF32[($0_1 + 36 | 0) >> 2] = $2_1;
  HEAPF32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAPF32[($0_1 + 56 | 0) >> 2] = Math_fround($1_1 / Math_fround(Math_sqrt(Math_fround(Math_fround($1_1 * $1_1) + Math_fround($2_1 * $2_1)))));
  return $0_1 | 0;
 }
 
 function $127($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $145($0_1 | 0) | 0;
  HEAPF32[($0_1 + 64 | 0) >> 2] = $2_1;
  HEAPF32[($0_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 11;
  HEAP32[($0_1 + 76 | 0) >> 2] = 1;
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = 2;
  HEAP32[$0_1 >> 2] = 6604;
  HEAPF32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAPF32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAPF32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAPF32[($0_1 + 56 | 0) >> 2] = Math_fround($1_1 / Math_fround(Math_sqrt(Math_fround(Math_fround($1_1 * $1_1) + Math_fround($2_1 * $2_1)))));
  return $0_1 | 0;
 }
 
 function $128($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $145($0_1 | 0) | 0;
  HEAPF32[($0_1 + 64 | 0) >> 2] = $2_1;
  HEAPF32[($0_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 11;
  HEAP32[($0_1 + 76 | 0) >> 2] = 2;
  HEAP32[($0_1 + 68 | 0) >> 2] = 1;
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 6704;
  HEAPF32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAPF32[($0_1 + 40 | 0) >> 2] = $1_1;
  HEAPF32[($0_1 + 32 | 0) >> 2] = $2_1;
  HEAPF32[($0_1 + 56 | 0) >> 2] = Math_fround($1_1 / Math_fround(Math_sqrt(Math_fround(Math_fround($1_1 * $1_1) + Math_fround($2_1 * $2_1)))));
  return $0_1 | 0;
 }
 
 function $129($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = Math_fround(0), $3_1 = Math_fround(0), $6_1 = 0, $9_1 = Math_fround(0), $4_1 = 0, $5_1 = 0, $8_1 = Math_fround(0), $30_1 = Math_fround(0), $36_1 = Math_fround(0);
  $3_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]) * Math_fround(.5));
  $4_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $5_1 = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
     $6_1 = $5_1 << 2 | 0;
     $7_1 = Math_fround(HEAPF32[$2_1 >> 2]);
     $30_1 = Math_fround($7_1 * $7_1);
     $7_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
     $36_1 = Math_fround($30_1 + Math_fround($7_1 * $7_1));
     $7_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
     if (Math_fround(HEAPF32[($2_1 + $6_1 | 0) >> 2]) > Math_fround(Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]) * Math_fround(Math_sqrt(Math_fround($36_1 + Math_fround($7_1 * $7_1))))) ^ 1 | 0) {
      break label$3
     }
     HEAP32[($0_1 + ($4_1 << 2 | 0) | 0) >> 2] = 0;
     HEAPF32[($0_1 + $6_1 | 0) >> 2] = $3_1;
     $6_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
     break label$2;
    }
    label$4 : {
     $7_1 = Math_fround(HEAPF32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2]);
     $6_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
     $8_1 = Math_fround(HEAPF32[($2_1 + ($6_1 << 2 | 0) | 0) >> 2]);
     $9_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($8_1 * $8_1))));
     if ($9_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
      break label$4
     }
     $9_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 60 | 0) >> 2]) / $9_1);
     HEAPF32[($0_1 + ($4_1 << 2 | 0) | 0) >> 2] = Math_fround($7_1 * $9_1);
     HEAPF32[($0_1 + ($5_1 << 2 | 0) | 0) >> 2] = Math_fround(-$3_1);
     $3_1 = Math_fround($8_1 * $9_1);
     break label$1;
    }
    HEAP32[($0_1 + ($4_1 << 2 | 0) | 0) >> 2] = 0;
    HEAPF32[($0_1 + ($5_1 << 2 | 0) | 0) >> 2] = Math_fround(-$3_1);
   }
   $3_1 = Math_fround(0.0);
  }
  HEAPF32[($0_1 + ($6_1 << 2 | 0) | 0) >> 2] = $3_1;
 }
 
 function $130($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $8_1 = Math_fround(0), $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $11_1 = Math_fround(0), $7_1 = 0, $5_1 = Math_fround(0), $9_1 = 0, $10_1 = Math_fround(0), i64toi32_i32$2 = 0, $34_1 = Math_fround(0), $41_1 = Math_fround(0), $122_1 = 0, $125_1 = 0;
  $4_1 = global$0 - 16 | 0;
  label$1 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $5_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]) * Math_fround(.5));
    $6_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      label$5 : {
       $7_1 = (HEAP32[($0_1 + 72 | 0) >> 2] | 0) << 2 | 0;
       $8_1 = Math_fround(HEAPF32[$1_1 >> 2]);
       $34_1 = Math_fround($8_1 * $8_1);
       $8_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
       $41_1 = Math_fround($34_1 + Math_fround($8_1 * $8_1));
       $8_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
       if (Math_fround(HEAPF32[($1_1 + $7_1 | 0) >> 2]) > Math_fround(Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]) * Math_fround(Math_sqrt(Math_fround($41_1 + Math_fround($8_1 * $8_1))))) ^ 1 | 0) {
        break label$5
       }
       HEAP32[($4_1 + ($6_1 << 2 | 0) | 0) >> 2] = 0;
       HEAPF32[($4_1 + $7_1 | 0) >> 2] = $5_1;
       $6_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
       break label$4;
      }
      label$6 : {
       $9_1 = $6_1 << 2 | 0;
       $8_1 = Math_fround(HEAPF32[($1_1 + $9_1 | 0) >> 2]);
       $6_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
       $10_1 = Math_fround(HEAPF32[($1_1 + ($6_1 << 2 | 0) | 0) >> 2]);
       $11_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($10_1 * $10_1))));
       if ($11_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
        break label$6
       }
       $11_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]) / $11_1);
       HEAPF32[($4_1 + $9_1 | 0) >> 2] = Math_fround($8_1 * $11_1);
       HEAPF32[($4_1 + $7_1 | 0) >> 2] = Math_fround(-$5_1);
       $8_1 = Math_fround($10_1 * $11_1);
       break label$3;
      }
      HEAP32[($4_1 + $9_1 | 0) >> 2] = 0;
      HEAPF32[($4_1 + $7_1 | 0) >> 2] = Math_fround(-$5_1);
     }
     $8_1 = Math_fround(0.0);
    }
    HEAPF32[($4_1 + ($6_1 << 2 | 0) | 0) >> 2] = $8_1;
    i64toi32_i32$2 = $4_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $122_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $122_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    $125_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[i64toi32_i32$1 >> 2] = $125_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 16 | 0;
    $2_1 = i64toi32_i32$1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $131($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = Math_fround(0), $3_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $6_1 = 0, $4_1 = 0, $5_1 = 0, $30_1 = Math_fround(0), $36_1 = Math_fround(0), $153_1 = Math_fround(0);
  $3_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]) * Math_fround(.5));
  $4_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $5_1 = HEAP32[($1_1 + 72 | 0) >> 2] | 0;
     $6_1 = $5_1 << 2 | 0;
     $7_1 = Math_fround(HEAPF32[$2_1 >> 2]);
     $30_1 = Math_fround($7_1 * $7_1);
     $7_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
     $36_1 = Math_fround($30_1 + Math_fround($7_1 * $7_1));
     $7_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
     if (Math_fround(HEAPF32[($2_1 + $6_1 | 0) >> 2]) > Math_fround(Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]) * Math_fround(Math_sqrt(Math_fround($36_1 + Math_fround($7_1 * $7_1))))) ^ 1 | 0) {
      break label$3
     }
     HEAP32[($0_1 + ($4_1 << 2 | 0) | 0) >> 2] = 0;
     HEAPF32[($0_1 + $6_1 | 0) >> 2] = $3_1;
     $6_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
     break label$2;
    }
    label$4 : {
     $7_1 = Math_fround(HEAPF32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2]);
     $6_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
     $8_1 = Math_fround(HEAPF32[($2_1 + ($6_1 << 2 | 0) | 0) >> 2]);
     $9_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($8_1 * $8_1))));
     if ($9_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
      break label$4
     }
     $9_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 60 | 0) >> 2]) / $9_1);
     HEAPF32[($0_1 + ($4_1 << 2 | 0) | 0) >> 2] = Math_fround($7_1 * $9_1);
     HEAPF32[($0_1 + ($5_1 << 2 | 0) | 0) >> 2] = Math_fround(-$3_1);
     $3_1 = Math_fround($8_1 * $9_1);
     break label$1;
    }
    HEAP32[($0_1 + ($4_1 << 2 | 0) | 0) >> 2] = 0;
    HEAPF32[($0_1 + ($5_1 << 2 | 0) | 0) >> 2] = Math_fround(-$3_1);
   }
   $3_1 = Math_fround(0.0);
  }
  HEAPF32[($0_1 + ($6_1 << 2 | 0) | 0) >> 2] = $3_1;
  label$5 : {
   if (Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($1_1)) == Math_fround(0.0)) {
    break label$5
   }
   $3_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $8_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($1_1));
   $1_1 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($3_1 * $3_1)) + Math_fround($8_1 * $8_1)) < Math_fround(1.4210854715202004e-14);
   $7_1 = $1_1 ? Math_fround(-1.0) : $7_1;
   $153_1 = $7_1;
   $8_1 = $1_1 ? Math_fround(-1.0) : $8_1;
   $3_1 = $1_1 ? Math_fround(-1.0) : $3_1;
   $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($8_1 * $8_1) + Math_fround(Math_fround($7_1 * $7_1) + Math_fround($3_1 * $3_1))))));
   HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) + Math_fround($9_1 * Math_fround($153_1 * $7_1)));
   HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]) + Math_fround($9_1 * Math_fround($3_1 * $7_1)));
   HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]) + Math_fround($9_1 * Math_fround($8_1 * $7_1)));
  }
 }
 
 function $132($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $40_1 = Math_fround(0);
  $2_1 = (HEAP32[($0_1 + 72 | 0) >> 2] | 0) << 2 | 0;
  $3_1 = $0_1 + 16 | 0;
  $4_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]) * Math_fround(Math_fround(HEAPF32[($1_1 + $2_1 | 0) >> 2]) / Math_fround(HEAPF32[($3_1 + $2_1 | 0) >> 2])));
  HEAPF32[($0_1 + 64 | 0) >> 2] = $4_1;
  $2_1 = (HEAP32[($0_1 + 68 | 0) >> 2] | 0) << 2 | 0;
  $40_1 = Math_fround(Math_fround(HEAPF32[($1_1 + $2_1 | 0) >> 2]) / Math_fround(HEAPF32[($3_1 + $2_1 | 0) >> 2]));
  $2_1 = (HEAP32[($0_1 + 76 | 0) >> 2] | 0) << 2 | 0;
  $5_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]) * Math_fround(Math_fround($40_1 + Math_fround(Math_fround(HEAPF32[($1_1 + $2_1 | 0) >> 2]) / Math_fround(HEAPF32[($3_1 + $2_1 | 0) >> 2]))) * Math_fround(.5)));
  HEAPF32[($0_1 + 60 | 0) >> 2] = $5_1;
  HEAPF32[($0_1 + 56 | 0) >> 2] = Math_fround($5_1 / Math_fround(Math_sqrt(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)))));
  $146($0_1 | 0, $1_1 | 0);
 }
 
 function $133($0_1) {
  $0_1 = $0_1 | 0;
  $101($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $134($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, $10_1 = Math_fround(0), i64toi32_i32$0 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  i64toi32_i32$1 = $3_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 52 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $3_1 + 76 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 72 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $3_1 + 84 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 92 | 0) >> 2] = 0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = 0;
  HEAP32[($3_1 + 40 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 32 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 64 | 0) >> 2] = 0;
  HEAP32[($3_1 + 68 | 0) >> 2] = i64toi32_i32$0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  $4_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $8_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
  $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $1_1 = Math_fround($1_1 * Math_fround(.0833333283662796));
  $6_1 = Math_fround($10_1 + Math_fround(Math_fround($7_1 - $6_1) * Math_fround(.5)));
  $6_1 = Math_fround($6_1 + $6_1);
  $6_1 = Math_fround($6_1 * $6_1);
  $7_1 = Math_fround($10_1 + Math_fround(Math_fround($9_1 - $8_1) * Math_fround(.5)));
  $7_1 = Math_fround($7_1 + $7_1);
  $7_1 = Math_fround($7_1 * $7_1);
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($1_1 * Math_fround($6_1 + $7_1));
  $10_1 = Math_fround($10_1 + Math_fround(Math_fround($5_1 - $4_1) * Math_fround(.5)));
  $10_1 = Math_fround($10_1 + $10_1);
  $10_1 = Math_fround($10_1 * $10_1);
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($1_1 * Math_fround($6_1 + $10_1));
  HEAPF32[$2_1 >> 2] = Math_fround($1_1 * Math_fround($7_1 + $10_1));
  global$0 = $3_1 + 96 | 0;
 }
 
 function $135($0_1) {
  $0_1 = $0_1 | 0;
  return 6880 | 0;
 }
 
 function $136($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $137($0_1) {
  $0_1 = $0_1 | 0;
  return 60 | 0;
 }
 
 function $138($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $98($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($1_1 + 28 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP32[($1_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  HEAP32[($1_1 + 36 | 0) >> 2] = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  HEAP32[($1_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[($1_1 + 24 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($1_1 + 48 | 0) >> 2] = 0;
  HEAP32[($1_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $0_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($1_1 + 56 | 0) >> 2] = 0;
  HEAP32[($1_1 + 52 | 0) >> 2] = $0_1;
  return 6885 | 0;
 }
 
 function $139($0_1) {
  $0_1 = $0_1 | 0;
  $101($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $140($0_1) {
  $0_1 = $0_1 | 0;
  return 6901 | 0;
 }
 
 function $141($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $142($0_1) {
  $0_1 = $0_1 | 0;
  $101($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $143($0_1) {
  $0_1 = $0_1 | 0;
  return 6907 | 0;
 }
 
 function $144($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $145($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $100($0_1 | 0) | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 1025758986;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[($0_1 + 16 | 0) >> 2] = 1065353216;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = 6924;
  return $0_1 | 0;
 }
 
 function $146($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0);
  $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $3_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 24 | 0) >> 2] = Math_fround(Math_abs($4_1));
  HEAPF32[($0_1 + 20 | 0) >> 2] = Math_fround(Math_abs($3_1));
  HEAPF32[($0_1 + 16 | 0) >> 2] = Math_fround(Math_abs($2_1));
 }
 
 function $147($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = Math_fround(0);
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $6_1 = $4_1 + 72 | 0;
  $7_1 = 0;
  label$1 : while (1) {
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 64 | 0) >> 2] = 0;
   HEAP32[($4_1 + 68 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = ($4_1 + 64 | 0) + $7_1 | 0;
   HEAP32[$8_1 >> 2] = 1065353216;
   HEAP32[($4_1 + 44 | 0) >> 2] = 0;
   $9_1 = Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[$6_1 >> 2]);
   HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2])));
   HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2])));
   HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[$1_1 >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2])));
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($4_1 + 48 | 0, $0_1, $4_1 + 32 | 0);
   HEAP32[($4_1 + 44 | 0) >> 2] = 0;
   $9_1 = Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]);
   HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]));
   HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]));
   HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[$1_1 >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]));
   HEAP32[$8_1 >> 2] = -1082130432;
   $8_1 = ($4_1 + 32 | 0) + $7_1 | 0;
   HEAPF32[($3_1 + $7_1 | 0) >> 2] = Math_fround($5_1 + Math_fround(HEAPF32[$8_1 >> 2]));
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
   $9_1 = Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[$6_1 >> 2]);
   HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2])));
   HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2])));
   HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[$1_1 >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2])));
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($4_1 + 16 | 0, $0_1, $4_1);
   HEAP32[($4_1 + 44 | 0) >> 2] = 0;
   $9_1 = Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
   HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]));
   HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]));
   HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[$1_1 >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]));
   HEAPF32[($2_1 + $7_1 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$8_1 >> 2]) - $5_1);
   $7_1 = $7_1 + 4 | 0;
   if (($7_1 | 0) != (12 | 0)) {
    continue label$1
   }
   break label$1;
  };
  global$0 = $4_1 + 80 | 0;
 }
 
 function $148($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = Math_fround(0), $3_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $49_1 = Math_fround(0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($0_1, $1_1, $2_1);
  label$1 : {
   if (Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($1_1)) == Math_fround(0.0)) {
    break label$1
   }
   $3_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $4_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $5_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($1_1));
   $1_1 = Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($3_1 * $3_1)) + Math_fround($5_1 * $5_1)) < Math_fround(1.4210854715202004e-14);
   $4_1 = $1_1 ? Math_fround(-1.0) : $4_1;
   $49_1 = $4_1;
   $5_1 = $1_1 ? Math_fround(-1.0) : $5_1;
   $3_1 = $1_1 ? Math_fround(-1.0) : $3_1;
   $4_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround(Math_fround($4_1 * $4_1) + Math_fround($3_1 * $3_1))))));
   HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) + Math_fround($6_1 * Math_fround($49_1 * $4_1)));
   HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]) + Math_fround($6_1 * Math_fround($3_1 * $4_1)));
   HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]) + Math_fround($6_1 * Math_fround($5_1 * $4_1)));
  }
 }
 
 function $149($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $150($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 7060;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP8[($0_1 + 40 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 28 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $151($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0;
  HEAP32[$0_1 >> 2] = 7060;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  label$3 : {
   $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$3
   }
   $3_1 = 8;
   label$4 : while (1) {
    $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $3_1 | 0;
    $4_1 = $1_1 + -4 | 0;
    label$5 : {
     $5_1 = $1_1 + 4 | 0;
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     if (!$6_1) {
      break label$5
     }
     label$6 : {
      if (!(HEAPU8[($1_1 + 8 | 0) >> 0] | 0)) {
       break label$6
      }
      $80($6_1 | 0);
     }
     HEAP32[$5_1 >> 2] = 0;
    }
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP8[($1_1 + 8 | 0) >> 0] = 1;
    $3_1 = $3_1 + 36 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$4
    }
    break label$4;
   };
  }
  label$7 : {
   $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$7
   }
   label$8 : {
    if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
     break label$8
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 40 | 0) >> 0] = 1;
  label$9 : {
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$9
   }
   label$10 : {
    if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
     break label$10
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  return $0_1 | 0;
 }
 
 function $152($0_1) {
  $0_1 = $0_1 | 0;
  $80($151($0_1 | 0) | 0 | 0);
 }
 
 function $153($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $1_1 = 0, $9_1 = 0, $2_1 = 0, $8_1 = 0, $3_1 = 0;
  $1_1 = 0;
  $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $3_1 = ($2_1 | 0) < (1 | 0);
  label$1 : while (1) {
   label$2 : {
    if ($1_1 >>> 0 > 7 >>> 0) {
     break label$2
    }
    label$3 : {
     switch ($1_1 | 0) {
     default:
      $4_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]));
      $5_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]));
      $6_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]));
      break label$2;
     case 1:
      $4_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]));
      $5_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]));
      $6_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]));
      break label$2;
     case 2:
      $4_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]));
      $5_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]));
      $6_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]));
      break label$2;
     case 3:
      $4_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]));
      $5_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]));
      $6_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]));
      break label$2;
     case 4:
      $4_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]));
      $5_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]));
      $6_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]));
      break label$2;
     case 5:
      $4_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]));
      $5_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]));
      $6_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]));
      break label$2;
     case 6:
      $4_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]));
      $5_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]));
      $6_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]));
      break label$2;
     case 7:
      break label$3;
     };
    }
    $4_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]));
    $5_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]));
    $6_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]));
   }
   label$11 : {
    label$12 : {
     if ($3_1) {
      break label$12
     }
     $7_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + 20 | 0;
     $8_1 = 0;
     $9_1 = 0;
     label$13 : while (1) {
      if (!(Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]) + Math_fround(Math_fround(Math_fround($6_1 * Math_fround(HEAPF32[$7_1 >> 2])) + Math_fround($5_1 * Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]))) + Math_fround($4_1 * Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2])))) > Math_fround(0.0) ^ 1 | 0)) {
       break label$11
      }
      $7_1 = $7_1 + 36 | 0;
      $9_1 = $9_1 + 1 | 0;
      if (($9_1 | 0) < ($2_1 | 0)) {
       continue label$13
      }
      break label$13;
     };
    }
    $8_1 = 1;
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != (8 | 0)) {
     continue label$1
    }
   }
   break label$1;
  };
  return $8_1 | 0;
 }
 
 function $154($0_1) {
  $0_1 = $0_1 | 0;
  var $6_1 = 0, $17_1 = Math_fround(0), $1_1 = 0, $9_1 = 0, $12_1 = 0, $19_1 = Math_fround(0), $18_1 = Math_fround(0), i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $16_1 = 0, $20_1 = Math_fround(0), $11_1 = 0, $4_1 = 0, $15_1 = 0, $3_1 = Math_fround(0), $5_1 = 0, $23_1 = Math_fround(0), $8_1 = 0, $24_1 = Math_fround(0), $13_1 = 0, $2_1 = 0, $25_1 = Math_fround(0), $7_1 = 0, $10_1 = 0, $14_1 = 0, i64toi32_i32$2 = 0, $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $187_1 = Math_fround(0), $306_1 = 0, $311_1 = 0, $436_1 = Math_fround(0);
  $1_1 = global$0 - 96 | 0;
  global$0 = $1_1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(($1_1 + 16 | 0) + 36 | 0) >> 0] = 1;
  $2_1 = 0;
  HEAP32[($1_1 + 48 | 0) >> 2] = 0;
  HEAP8[($1_1 + 72 | 0) >> 0] = 1;
  i64toi32_i32$1 = $1_1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 68 | 0) >> 2] = 0;
  HEAP8[($1_1 + 92 | 0) >> 0] = 1;
  i64toi32_i32$1 = $1_1 + 60 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(($1_1 + 16 | 0) + 72 | 0) >> 2] = 0;
  i64toi32_i32$1 = $1_1 + 80 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 72 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 28 | 0) >> 2] = 0;
  HEAP8[($1_1 + 32 | 0) >> 0] = 1;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = 0;
  HEAP32[($1_1 + 24 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = Math_fround(0.0);
  label$1 : {
   $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $6_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
     $7_1 = Math_imul($5_1, 36);
     $2_1 = HEAP32[(($6_1 + $7_1 | 0) + 4 | 0) >> 2] | 0;
     if (($2_1 | 0) < (1 | 0)) {
      break label$3
     }
     $8_1 = 0;
     label$4 : while (1) {
      $9_1 = HEAP32[(($6_1 + $7_1 | 0) + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($9_1 + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      HEAP16[($1_1 + 8 | 0) >> 1] = $6_1;
      $8_1 = $8_1 + 1 | 0;
      $10_1 = ($8_1 | 0) == ($2_1 | 0);
      $9_1 = HEAP32[($9_1 + (($10_1 ? 0 : $8_1) << 2 | 0) | 0) >> 2] | 0;
      HEAP16[($1_1 + 10 | 0) >> 1] = $9_1;
      label$5 : {
       $11_1 = ($9_1 << 16 | 0) >> 16 | 0;
       $12_1 = ($6_1 << 16 | 0) >> 16 | 0;
       if (($11_1 | 0) <= ($12_1 | 0)) {
        break label$5
       }
       HEAP16[($1_1 + 10 | 0) >> 1] = $6_1;
       HEAP16[($1_1 + 8 | 0) >> 1] = $9_1;
       $11_1 = $6_1;
       $12_1 = $9_1;
      }
      $13_1 = 0;
      label$6 : {
       $14_1 = $11_1 << 16 | 0;
       $4_1 = ($12_1 << 16 | 0) >> 16 | 0;
       $6_1 = ($14_1 + $4_1 | 0) & ((HEAP32[($1_1 + 64 | 0) >> 2] | 0) + -1 | 0) | 0;
       if ($6_1 >>> 0 >= (HEAP32[($1_1 + 20 | 0) >> 2] | 0) >>> 0) {
        break label$6
       }
       $6_1 = HEAP32[((HEAP32[($1_1 + 28 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0;
       if (($6_1 | 0) == (-1 | 0)) {
        break label$6
       }
       $15_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
       $16_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
       label$7 : {
        label$8 : while (1) {
         label$9 : {
          $6_1 = $6_1 << 2 | 0;
          $9_1 = $16_1 + $6_1 | 0;
          if (($12_1 & 65535 | 0 | 0) != (HEAPU16[$9_1 >> 1] | 0 | 0)) {
           break label$9
          }
          if (($11_1 & 65535 | 0 | 0) == (HEAPU16[($9_1 + 2 | 0) >> 1] | 0 | 0)) {
           break label$7
          }
         }
         $6_1 = HEAP32[($15_1 + $6_1 | 0) >> 2] | 0;
         if (($6_1 | 0) != (-1 | 0)) {
          continue label$8
         }
         break label$6;
        };
       }
       $13_1 = (HEAP32[($1_1 + 68 | 0) >> 2] | 0) + $6_1 | 0;
      }
      $9_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      $6_1 = $9_1 + (($14_1 >> 16 | 0) << 4 | 0) | 0;
      $9_1 = $9_1 + ($4_1 << 4 | 0) | 0;
      $17_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]) - Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]));
      $187_1 = $17_1;
      $18_1 = Math_fround(Math_fround(HEAPF32[$6_1 >> 2]) - Math_fround(HEAPF32[$9_1 >> 2]));
      $19_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]));
      $17_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($18_1 * $18_1) + Math_fround($19_1 * $19_1)) + Math_fround($17_1 * $17_1)))));
      $20_1 = Math_fround($187_1 * $17_1);
      $21_1 = Math_fround($19_1 * $17_1);
      $17_1 = Math_fround($18_1 * $17_1);
      label$10 : {
       label$11 : {
        $12_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
        if (($12_1 | 0) < (1 | 0)) {
         break label$11
        }
        $6_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
        $9_1 = 0;
        label$12 : while (1) {
         $22_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
         $18_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
         label$13 : {
          $19_1 = Math_fround(HEAPF32[$6_1 >> 2]);
          if (+Math_fround(Math_abs(Math_fround($19_1 - $17_1))) > 1.0e-06) {
           break label$13
          }
          if (+Math_fround(Math_abs(Math_fround($18_1 - $21_1))) > 1.0e-06) {
           break label$13
          }
          if (+Math_fround(Math_abs(Math_fround($22_1 - $20_1))) > 1.0e-06 ^ 1 | 0) {
           break label$10
          }
         }
         label$14 : {
          if (+Math_fround(Math_abs(Math_fround($17_1 + $19_1))) > 1.0e-06) {
           break label$14
          }
          if (+Math_fround(Math_abs(Math_fround($21_1 + $18_1))) > 1.0e-06) {
           break label$14
          }
          if (+Math_fround(Math_abs(Math_fround($20_1 + $22_1))) > 1.0e-06 ^ 1 | 0) {
           break label$10
          }
         }
         $6_1 = $6_1 + 16 | 0;
         $9_1 = $9_1 + 1 | 0;
         if (($9_1 | 0) < ($12_1 | 0)) {
          continue label$12
         }
         break label$12;
        };
       }
       label$15 : {
        if (($12_1 | 0) != (HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0)) {
         break label$15
        }
        $11_1 = $12_1 ? $12_1 << 1 | 0 : 1;
        if (($12_1 | 0) >= ($11_1 | 0)) {
         break label$15
        }
        label$16 : {
         label$17 : {
          if ($11_1) {
           break label$17
          }
          $15_1 = 0;
          break label$16;
         }
         $15_1 = $79($11_1 << 4 | 0 | 0, 16 | 0) | 0;
         $12_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
        }
        label$18 : {
         if (($12_1 | 0) < (1 | 0)) {
          break label$18
         }
         $6_1 = 0;
         label$19 : while (1) {
          $9_1 = $15_1 + $6_1 | 0;
          $16_1 = (HEAP32[($0_1 + 56 | 0) >> 2] | 0) + $6_1 | 0;
          i64toi32_i32$2 = $16_1;
          i64toi32_i32$0 = HEAP32[$16_1 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($16_1 + 4 | 0) >> 2] | 0;
          $306_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $9_1;
          HEAP32[$9_1 >> 2] = $306_1;
          HEAP32[($9_1 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = $16_1 + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $311_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $9_1 + 8 | 0;
          HEAP32[i64toi32_i32$1 >> 2] = $311_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          $6_1 = $6_1 + 16 | 0;
          $12_1 = $12_1 + -1 | 0;
          if ($12_1) {
           continue label$19
          }
          break label$19;
         };
        }
        label$20 : {
         $6_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
         if (!$6_1) {
          break label$20
         }
         label$21 : {
          if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
           break label$21
          }
          $80($6_1 | 0);
         }
         HEAP32[($0_1 + 56 | 0) >> 2] = 0;
        }
        HEAP32[($0_1 + 56 | 0) >> 2] = $15_1;
        HEAP8[($0_1 + 60 | 0) >> 0] = 1;
        HEAP32[($0_1 + 52 | 0) >> 2] = $11_1;
        $12_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       }
       $6_1 = (HEAP32[($0_1 + 56 | 0) >> 2] | 0) + ($12_1 << 4 | 0) | 0;
       HEAP32[($6_1 + 12 | 0) >> 2] = 0;
       HEAPF32[($6_1 + 8 | 0) >> 2] = $20_1;
       HEAPF32[($6_1 + 4 | 0) >> 2] = $21_1;
       HEAPF32[$6_1 >> 2] = $17_1;
       HEAP32[($0_1 + 48 | 0) >> 2] = (HEAP32[($0_1 + 48 | 0) >> 2] | 0) + 1 | 0;
      }
      label$22 : {
       label$23 : {
        if (!$13_1) {
         break label$23
        }
        HEAP16[($13_1 + 2 | 0) >> 1] = $5_1;
        break label$22;
       }
       HEAP16[$1_1 >> 1] = $5_1;
       HEAP16[($1_1 + 2 | 0) >> 1] = 65535;
       $155($1_1 + 16 | 0 | 0, $1_1 + 8 | 0 | 0, $1_1 | 0);
      }
      label$24 : {
       if ($10_1) {
        break label$24
       }
       $6_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
       continue label$4;
      }
      break label$4;
     };
     $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < ($4_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $2_1 = 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $2_1 = ($4_1 | 0) > (0 | 0);
   $11_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $3_1 = Math_fround(0.0);
   $5_1 = 0;
   label$25 : while (1) {
    label$26 : {
     $6_1 = $7_1 + Math_imul($5_1, 36) | 0;
     $15_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     if (($15_1 | 0) < (3 | 0)) {
      break label$26
     }
     $8_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
     $6_1 = $8_1 + 4 | 0;
     $13_1 = $11_1 + ((HEAP32[$8_1 >> 2] | 0) << 4 | 0) | 0;
     $10_1 = $13_1 + 8 | 0;
     $14_1 = $13_1 + 4 | 0;
     $22_1 = Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]);
     $21_1 = Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]);
     $20_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
     $9_1 = 2;
     label$27 : while (1) {
      $17_1 = Math_fround(HEAPF32[$10_1 >> 2]);
      $12_1 = $11_1 + ((HEAP32[$6_1 >> 2] | 0) << 4 | 0) | 0;
      $23_1 = Math_fround(HEAPF32[($12_1 + 8 | 0) >> 2]);
      $16_1 = $11_1 + ((HEAP32[($8_1 + ((($9_1 | 0) % ($15_1 | 0) | 0) << 2 | 0) | 0) >> 2] | 0) << 4 | 0) | 0;
      $24_1 = Math_fround(HEAPF32[($16_1 + 8 | 0) >> 2]);
      $436_1 = Math_fround(Math_fround(Math_fround($17_1 + $23_1) + $24_1) * Math_fround(.3333333432674408));
      $18_1 = Math_fround(HEAPF32[$13_1 >> 2]);
      $25_1 = Math_fround(HEAPF32[$12_1 >> 2]);
      $26_1 = Math_fround($18_1 - $25_1);
      $19_1 = Math_fround(HEAPF32[$14_1 >> 2]);
      $27_1 = Math_fround(HEAPF32[($16_1 + 4 | 0) >> 2]);
      $28_1 = Math_fround($19_1 - $27_1);
      $29_1 = Math_fround(HEAPF32[($12_1 + 4 | 0) >> 2]);
      $30_1 = Math_fround($19_1 - $29_1);
      $31_1 = Math_fround(HEAPF32[$16_1 >> 2]);
      $32_1 = Math_fround($18_1 - $31_1);
      $33_1 = Math_fround(Math_fround($26_1 * $28_1) - Math_fround($30_1 * $32_1));
      $24_1 = Math_fround($17_1 - $24_1);
      $17_1 = Math_fround($17_1 - $23_1);
      $23_1 = Math_fround(Math_fround($30_1 * $24_1) - Math_fround($17_1 * $28_1));
      $17_1 = Math_fround(Math_fround($17_1 * $32_1) - Math_fround($26_1 * $24_1));
      $17_1 = Math_fround(Math_fround(Math_sqrt(Math_fround(Math_fround($33_1 * $33_1) + Math_fround(Math_fround($23_1 * $23_1) + Math_fround($17_1 * $17_1))))) * Math_fround(.5));
      $22_1 = Math_fround($22_1 + Math_fround($436_1 * $17_1));
      HEAPF32[($0_1 + 72 | 0) >> 2] = $22_1;
      $21_1 = Math_fround($21_1 + Math_fround(Math_fround(Math_fround($27_1 + Math_fround($19_1 + $29_1)) * Math_fround(.3333333432674408)) * $17_1));
      HEAPF32[($0_1 + 68 | 0) >> 2] = $21_1;
      $20_1 = Math_fround($20_1 + Math_fround(Math_fround(Math_fround($31_1 + Math_fround($18_1 + $25_1)) * Math_fround(.3333333432674408)) * $17_1));
      HEAPF32[($0_1 + 64 | 0) >> 2] = $20_1;
      $3_1 = Math_fround($3_1 + $17_1);
      $6_1 = $6_1 + 4 | 0;
      $9_1 = $9_1 + 1 | 0;
      if (($15_1 | 0) != ($9_1 | 0)) {
       continue label$27
      }
      break label$27;
     };
    }
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != ($4_1 | 0)) {
     continue label$25
    }
    break label$25;
   };
  }
  HEAP32[($0_1 + 96 | 0) >> 2] = 2139095039;
  $17_1 = Math_fround(Math_fround(1.0) / $3_1);
  $19_1 = Math_fround($17_1 * Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]));
  HEAPF32[($0_1 + 64 | 0) >> 2] = $19_1;
  $22_1 = Math_fround($17_1 * Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]));
  HEAPF32[($0_1 + 68 | 0) >> 2] = $22_1;
  $21_1 = Math_fround($17_1 * Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]));
  HEAPF32[($0_1 + 72 | 0) >> 2] = $21_1;
  $18_1 = Math_fround(3402823466385288598117041.0e14);
  $23_1 = Math_fround(3402823466385288598117041.0e14);
  label$28 : {
   if (!$2_1) {
    break label$28
   }
   $6_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + 20 | 0;
   $23_1 = Math_fround(3402823466385288598117041.0e14);
   label$29 : while (1) {
    label$30 : {
     $17_1 = Math_fround(Math_abs(Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) + Math_fround(Math_fround(Math_fround($19_1 * Math_fround(HEAPF32[$6_1 >> 2])) + Math_fround($22_1 * Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]))) + Math_fround($21_1 * Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]))))));
     if ($17_1 < $23_1 ^ 1 | 0) {
      break label$30
     }
     HEAPF32[($0_1 + 96 | 0) >> 2] = $17_1;
     $23_1 = $17_1;
    }
    $6_1 = $6_1 + 36 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$29
    }
    break label$29;
   };
  }
  label$31 : {
   label$32 : {
    $12_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($12_1 | 0) >= (1 | 0)) {
     break label$32
    }
    $19_1 = Math_fround(-3402823466385288598117041.0e14);
    $22_1 = Math_fround(3402823466385288598117041.0e14);
    $21_1 = Math_fround(-3402823466385288598117041.0e14);
    $20_1 = Math_fround(-3402823466385288598117041.0e14);
    $3_1 = Math_fround(3402823466385288598117041.0e14);
    break label$31;
   }
   $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $20_1 = Math_fround(-3402823466385288598117041.0e14);
   $9_1 = 0;
   $3_1 = Math_fround(3402823466385288598117041.0e14);
   $21_1 = Math_fround(-3402823466385288598117041.0e14);
   $19_1 = Math_fround(-3402823466385288598117041.0e14);
   $22_1 = Math_fround(3402823466385288598117041.0e14);
   $18_1 = Math_fround(3402823466385288598117041.0e14);
   label$33 : while (1) {
    $17_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
    $20_1 = $17_1 > $20_1 ? $17_1 : $20_1;
    $22_1 = $17_1 < $22_1 ? $17_1 : $22_1;
    $17_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
    $21_1 = $17_1 > $21_1 ? $17_1 : $21_1;
    $18_1 = $17_1 < $18_1 ? $17_1 : $18_1;
    $17_1 = Math_fround(HEAPF32[$6_1 >> 2]);
    $19_1 = $17_1 > $19_1 ? $17_1 : $19_1;
    $3_1 = $17_1 < $3_1 ? $17_1 : $3_1;
    $6_1 = $6_1 + 16 | 0;
    $9_1 = $9_1 + 1 | 0;
    if (($9_1 | 0) < ($12_1 | 0)) {
     continue label$33
    }
    break label$33;
   };
  }
  HEAP32[($0_1 + 128 | 0) >> 2] = 0;
  $17_1 = Math_fround($20_1 - $22_1);
  HEAPF32[($0_1 + 124 | 0) >> 2] = $17_1;
  $24_1 = Math_fround($21_1 - $18_1);
  HEAPF32[($0_1 + 120 | 0) >> 2] = $24_1;
  $25_1 = Math_fround($19_1 - $3_1);
  HEAPF32[($0_1 + 116 | 0) >> 2] = $25_1;
  HEAP32[($0_1 + 112 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 108 | 0) >> 2] = Math_fround($22_1 + $20_1);
  HEAPF32[($0_1 + 104 | 0) >> 2] = Math_fround($18_1 + $21_1);
  HEAPF32[($0_1 + 100 | 0) >> 2] = Math_fround($19_1 + $3_1);
  $12_1 = $25_1 < $24_1 ? ($24_1 < $17_1 ? 2 : 1) : ($25_1 < $17_1) << 1 | 0;
  $6_1 = $12_1 << 2 | 0;
  $17_1 = Math_fround(HEAPF32[(($0_1 + 116 | 0) + $6_1 | 0) >> 2]);
  $19_1 = Math_fround($23_1 / Math_fround(1.7320507764816284));
  HEAPF32[($0_1 + 88 | 0) >> 2] = $19_1;
  HEAPF32[($0_1 + 80 | 0) >> 2] = $19_1;
  HEAPF32[($0_1 + 84 | 0) >> 2] = $19_1;
  $9_1 = ($0_1 + 80 | 0) + $6_1 | 0;
  $17_1 = Math_fround($17_1 * Math_fround(.5));
  HEAPF32[$9_1 >> 2] = $17_1;
  $18_1 = Math_fround(Math_fround($17_1 - $19_1) * Math_fround(.0009765625));
  $6_1 = 1024;
  label$34 : {
   label$35 : {
    label$36 : while (1) {
     if ($153($0_1 | 0) | 0) {
      break label$35
     }
     $17_1 = Math_fround($17_1 - $18_1);
     HEAPF32[$9_1 >> 2] = $17_1;
     $6_1 = $6_1 + -1 | 0;
     if ($6_1) {
      continue label$36
     }
     break label$36;
    };
    HEAPF32[($0_1 + 84 | 0) >> 2] = $19_1;
    HEAPF32[($0_1 + 88 | 0) >> 2] = $19_1;
    HEAPF32[($0_1 + 80 | 0) >> 2] = $19_1;
    break label$34;
   }
   $9_1 = $0_1 + 80 | 0;
   $12_1 = (1 << $12_1 | 0) & 3 | 0;
   $6_1 = $9_1 + (((1 << $12_1 | 0) & 3 | 0) << 2 | 0) | 0;
   $15_1 = HEAP32[$6_1 >> 2] | 0;
   $9_1 = $9_1 + ($12_1 << 2 | 0) | 0;
   $17_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2]) - $19_1) * Math_fround(.0009765625));
   $16_1 = HEAP32[$9_1 >> 2] | 0;
   HEAPF32[$9_1 >> 2] = Math_fround($17_1 + (wasm2js_scratch_store_i32(0, $16_1), wasm2js_scratch_load_f32()));
   $18_1 = Math_fround($17_1 + Math_fround(HEAPF32[$6_1 >> 2]));
   HEAPF32[$6_1 >> 2] = $18_1;
   label$37 : {
    if (!($153($0_1 | 0) | 0)) {
     break label$37
    }
    $12_1 = 1024;
    label$38 : while (1) {
     $19_1 = $18_1;
     $12_1 = $12_1 + -1 | 0;
     if (!$12_1) {
      break label$34
     }
     $16_1 = HEAP32[$9_1 >> 2] | 0;
     HEAPF32[$9_1 >> 2] = Math_fround($17_1 + (wasm2js_scratch_store_i32(0, $16_1), wasm2js_scratch_load_f32()));
     $18_1 = Math_fround($17_1 + Math_fround(HEAPF32[$6_1 >> 2]));
     HEAPF32[$6_1 >> 2] = $18_1;
     if ($153($0_1 | 0) | 0) {
      continue label$38
     }
     break label$38;
    };
    $15_1 = (wasm2js_scratch_store_f32($19_1), wasm2js_scratch_load_i32(0));
   }
   HEAP32[$9_1 >> 2] = $16_1;
   HEAP32[$6_1 >> 2] = $15_1;
  }
  label$39 : {
   $6_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
   if (!$6_1) {
    break label$39
   }
   label$40 : {
    if (!(HEAPU8[($1_1 + 92 | 0) >> 0] | 0)) {
     break label$40
    }
    $80($6_1 | 0);
   }
   HEAP32[($1_1 + 88 | 0) >> 2] = 0;
  }
  HEAP32[($1_1 + 88 | 0) >> 2] = 0;
  HEAP8[($1_1 + 92 | 0) >> 0] = 1;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[($1_1 + 80 | 0) >> 2] = 0;
  HEAP32[($1_1 + 84 | 0) >> 2] = i64toi32_i32$0;
  label$41 : {
   $6_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
   if (!$6_1) {
    break label$41
   }
   label$42 : {
    if (!(HEAPU8[($1_1 + 72 | 0) >> 0] | 0)) {
     break label$42
    }
    $80($6_1 | 0);
   }
   HEAP32[($1_1 + 68 | 0) >> 2] = 0;
  }
  HEAP32[($1_1 + 68 | 0) >> 2] = 0;
  HEAP8[($1_1 + 72 | 0) >> 0] = 1;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[($1_1 + 60 | 0) >> 2] = 0;
  HEAP32[($1_1 + 64 | 0) >> 2] = i64toi32_i32$0;
  label$43 : {
   $6_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
   if (!$6_1) {
    break label$43
   }
   label$44 : {
    if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
     break label$44
    }
    $80($6_1 | 0);
   }
   HEAP32[($1_1 + 48 | 0) >> 2] = 0;
  }
  HEAP32[($1_1 + 48 | 0) >> 2] = 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = 1;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[($1_1 + 40 | 0) >> 2] = 0;
  HEAP32[($1_1 + 44 | 0) >> 2] = i64toi32_i32$0;
  label$45 : {
   $6_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
   if (!$6_1) {
    break label$45
   }
   label$46 : {
    if (!(HEAPU8[($1_1 + 32 | 0) >> 0] | 0)) {
     break label$46
    }
    $80($6_1 | 0);
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = 0;
  }
  global$0 = $1_1 + 96 | 0;
 }
 
 function $155($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = 0, $4_1 = 0, $9_1 = 0, $10_1 = 0, $5_1 = 0, $8_1 = 0, $6_1 = 0, $3_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $219_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAPU16[($1_1 + 2 | 0) >> 1] | 0;
    $4_1 = HEAP16[$1_1 >> 1] | 0;
    $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    $6_1 = (($3_1 << 16 | 0) + $4_1 | 0) & ($5_1 + -1 | 0) | 0;
    if ($6_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    $7_1 = HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0;
    if (($7_1 | 0) == (-1 | 0)) {
     break label$2
    }
    $8_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    $9_1 = $4_1 & 65535 | 0;
    label$3 : while (1) {
     label$4 : {
      $4_1 = $7_1 << 2 | 0;
      $10_1 = $8_1 + $4_1 | 0;
      if (($9_1 | 0) != (HEAPU16[$10_1 >> 1] | 0 | 0)) {
       break label$4
      }
      if (($3_1 & 65535 | 0 | 0) == (HEAPU16[($10_1 + 2 | 0) >> 1] | 0 | 0)) {
       break label$1
      }
     }
     $7_1 = HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $4_1 | 0) >> 2] | 0;
     if (($7_1 | 0) != (-1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   $7_1 = $8_1;
   label$5 : {
    if (($7_1 | 0) != ($5_1 | 0)) {
     break label$5
    }
    $7_1 = $5_1;
    $9_1 = $7_1 ? $7_1 << 1 | 0 : 1;
    if (($7_1 | 0) >= ($9_1 | 0)) {
     break label$5
    }
    label$6 : {
     label$7 : {
      if ($9_1) {
       break label$7
      }
      $10_1 = 0;
      $4_1 = $5_1;
      break label$6;
     }
     $10_1 = $79($9_1 << 2 | 0 | 0, 16 | 0) | 0;
     $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    }
    label$8 : {
     if (($4_1 | 0) < (1 | 0)) {
      break label$8
     }
     $7_1 = 0;
     label$9 : while (1) {
      $12_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) + $7_1 | 0;
      $13_1 = $10_1 + $7_1 | 0;
      $14_1 = HEAPU16[$12_1 >> 1] | 0 | ((HEAPU16[($12_1 + 2 | 0) >> 1] | 0) << 16 | 0) | 0;
      HEAP16[$13_1 >> 1] = $14_1;
      HEAP16[($13_1 + 2 | 0) >> 1] = $14_1 >>> 16 | 0;
      $7_1 = $7_1 + 4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue label$9
      }
      break label$9;
     };
    }
    label$10 : {
     $7_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$10
     }
     label$11 : {
      if (!(HEAPU8[($0_1 + 56 | 0) >> 0] | 0)) {
       break label$11
      }
      $80($7_1 | 0);
     }
     HEAP32[($0_1 + 52 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 52 | 0) >> 2] = $10_1;
    HEAP32[($0_1 + 48 | 0) >> 2] = $9_1;
    HEAP8[($0_1 + 56 | 0) >> 0] = 1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   }
   $15_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0;
   $16_1 = HEAPU16[$2_1 >> 1] | 0 | ((HEAPU16[($2_1 + 2 | 0) >> 1] | 0) << 16 | 0) | 0;
   HEAP16[$15_1 >> 1] = $16_1;
   HEAP16[($15_1 + 2 | 0) >> 1] = $16_1 >>> 16 | 0;
   HEAP32[($0_1 + 44 | 0) >> 2] = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + 1 | 0;
   label$12 : {
    $4_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
    if (($4_1 | 0) != (HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0)) {
     break label$12
    }
    $9_1 = $4_1 ? $4_1 << 1 | 0 : 1;
    if (($4_1 | 0) >= ($9_1 | 0)) {
     break label$12
    }
    label$13 : {
     label$14 : {
      if ($9_1) {
       break label$14
      }
      $10_1 = 0;
      break label$13;
     }
     $10_1 = $79($9_1 << 2 | 0 | 0, 16 | 0) | 0;
     $4_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
    }
    label$15 : {
     if (($4_1 | 0) < (1 | 0)) {
      break label$15
     }
     $7_1 = 0;
     label$16 : while (1) {
      $17_1 = (HEAP32[($0_1 + 72 | 0) >> 2] | 0) + $7_1 | 0;
      $18_1 = $10_1 + $7_1 | 0;
      $19_1 = HEAPU16[$17_1 >> 1] | 0 | ((HEAPU16[($17_1 + 2 | 0) >> 1] | 0) << 16 | 0) | 0;
      HEAP16[$18_1 >> 1] = $19_1;
      HEAP16[($18_1 + 2 | 0) >> 1] = $19_1 >>> 16 | 0;
      $7_1 = $7_1 + 4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue label$16
      }
      break label$16;
     };
    }
    label$17 : {
     $7_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$17
     }
     label$18 : {
      if (!(HEAPU8[($0_1 + 76 | 0) >> 0] | 0)) {
       break label$18
      }
      $80($7_1 | 0);
     }
     HEAP32[($0_1 + 72 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 72 | 0) >> 2] = $10_1;
    HEAP32[($0_1 + 68 | 0) >> 2] = $9_1;
    HEAP8[($0_1 + 76 | 0) >> 0] = 1;
    $4_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
   }
   $20_1 = (HEAP32[($0_1 + 72 | 0) >> 2] | 0) + ($4_1 << 2 | 0) | 0;
   $21_1 = HEAPU16[$1_1 >> 1] | 0 | ((HEAPU16[($1_1 + 2 | 0) >> 1] | 0) << 16 | 0) | 0;
   HEAP16[$20_1 >> 1] = $21_1;
   HEAP16[($20_1 + 2 | 0) >> 1] = $21_1 >>> 16 | 0;
   HEAP32[($0_1 + 64 | 0) >> 2] = (HEAP32[($0_1 + 64 | 0) >> 2] | 0) + 1 | 0;
   label$19 : {
    if (($5_1 | 0) >= (HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0)) {
     break label$19
    }
    $156($0_1 | 0, $1_1 | 0);
    $6_1 = (((HEAPU16[($1_1 + 2 | 0) >> 1] | 0) << 16 | 0) + (HEAP16[$1_1 >> 1] | 0) | 0) & ((HEAP32[($0_1 + 48 | 0) >> 2] | 0) + -1 | 0) | 0;
   }
   $219_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($8_1 << 2 | 0) | 0;
   $0_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0;
   HEAP32[$219_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $8_1;
   return;
  }
  $22_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0;
  $23_1 = HEAPU16[$2_1 >> 1] | 0 | ((HEAPU16[($2_1 + 2 | 0) >> 1] | 0) << 16 | 0) | 0;
  HEAP16[$22_1 >> 1] = $23_1;
  HEAP16[($22_1 + 2 | 0) >> 1] = $23_1 >>> 16 | 0;
 }
 
 function $156($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $7_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0, $2_1 = 0, $10_1 = 0, $65_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if (($2_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) < ($3_1 | 0)) {
      break label$3
     }
     $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     break label$2;
    }
    label$4 : {
     label$5 : {
      if ($3_1) {
       break label$5
      }
      $4_1 = 0;
      $5_1 = $2_1;
      break label$4;
     }
     $4_1 = $79($3_1 << 2 | 0 | 0, 16 | 0) | 0;
     $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    }
    $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    label$6 : {
     label$7 : {
      label$8 : {
       if (($5_1 | 0) < (1 | 0)) {
        break label$8
       }
       $7_1 = $4_1;
       $8_1 = $6_1;
       label$9 : while (1) {
        HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2] | 0;
        $7_1 = $7_1 + 4 | 0;
        $8_1 = $8_1 + 4 | 0;
        $5_1 = $5_1 + -1 | 0;
        if ($5_1) {
         continue label$9
        }
        break label$7;
       };
      }
      if ($6_1) {
       break label$7
      }
      HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
      HEAP8[($0_1 + 16 | 0) >> 0] = 1;
      break label$6;
     }
     label$10 : {
      if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
       break label$10
      }
      $80($6_1 | 0);
     }
     HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
     HEAP8[($0_1 + 16 | 0) >> 0] = 1;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
   }
   $7_1 = $2_1 << 2 | 0;
   $65_1 = $4_1 + $7_1 | 0;
   $4_1 = $3_1 << 2 | 0;
   $17($65_1 | 0, 0 | 0, $4_1 - $7_1 | 0 | 0) | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
   label$11 : {
    $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (($6_1 | 0) >= ($3_1 | 0)) {
     break label$11
    }
    label$12 : {
     label$13 : {
      if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) < ($3_1 | 0)) {
       break label$13
      }
      $9_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      break label$12;
     }
     label$14 : {
      label$15 : {
       if ($3_1) {
        break label$15
       }
       $9_1 = 0;
       $5_1 = $6_1;
       break label$14;
      }
      $9_1 = $79($4_1 | 0, 16 | 0) | 0;
      $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     }
     $10_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     label$16 : {
      label$17 : {
       if (($5_1 | 0) < (1 | 0)) {
        break label$17
       }
       $7_1 = $9_1;
       $8_1 = $10_1;
       label$18 : while (1) {
        HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2] | 0;
        $7_1 = $7_1 + 4 | 0;
        $8_1 = $8_1 + 4 | 0;
        $5_1 = $5_1 + -1 | 0;
        if ($5_1) {
         continue label$18
        }
        break label$16;
       };
      }
      if ($10_1) {
       break label$16
      }
      HEAP32[($0_1 + 32 | 0) >> 2] = $9_1;
      HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
      HEAP8[($0_1 + 36 | 0) >> 0] = 1;
      break label$12;
     }
     label$19 : {
      if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
       break label$19
      }
      $80($10_1 | 0);
     }
     HEAP32[($0_1 + 32 | 0) >> 2] = $9_1;
     HEAP8[($0_1 + 36 | 0) >> 0] = 1;
     HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
    }
    $7_1 = $6_1 << 2 | 0;
    $17($9_1 + $7_1 | 0 | 0, 0 | 0, $4_1 - $7_1 | 0 | 0) | 0;
   }
   HEAP32[($0_1 + 24 | 0) >> 2] = $3_1;
   label$20 : {
    if (($3_1 | 0) < (1 | 0)) {
     break label$20
    }
    $17(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 255 | 0, $4_1 | 0) | 0;
    $17(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, 255 | 0, $4_1 | 0) | 0;
   }
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $8_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $5_1 = 0;
   label$21 : while (1) {
    $3_1 = $4_1 + (((((HEAPU16[($7_1 + 2 | 0) >> 1] | 0) << 16 | 0) + (HEAP16[$7_1 >> 1] | 0) | 0) & ((HEAP32[($0_1 + 48 | 0) >> 2] | 0) + -1 | 0) | 0) << 2 | 0) | 0;
    HEAP32[$8_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $5_1;
    $7_1 = $7_1 + 4 | 0;
    $8_1 = $8_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($2_1 | 0) != ($5_1 | 0)) {
     continue label$21
    }
    break label$21;
   };
  }
 }
 
 function $157($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$1 = 0, $9_1 = Math_fround(0), i64toi32_i32$0 = 0, $11_1 = Math_fround(0), $7_1 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $10_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = 0, $15$hi = 0, $158_1 = 0, $16_1 = 0, $16$hi = 0, $163_1 = 0;
  HEAP32[$3_1 >> 2] = 2139095039;
  $7_1 = -8388609;
  HEAP32[$4_1 >> 2] = -8388609;
  label$1 : {
   label$2 : {
    $8_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($8_1 | 0) >= (1 | 0)) {
     break label$2
    }
    $9_1 = Math_fround(-3402823466385288598117041.0e14);
    break label$1;
   }
   $7_1 = 4;
   label$3 : while (1) {
    label$4 : {
     $10_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $7_1 | 0;
     $9_1 = Math_fround(HEAPF32[($10_1 + -4 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[$10_1 >> 2]);
     $12_1 = Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]);
     $13_1 = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[$1_1 >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]))) + Math_fround($12_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]));
     $14_1 = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]))) + Math_fround($12_1 * Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]));
     $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]))) + Math_fround($12_1 * Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]));
     $9_1 = Math_fround(Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[$2_1 >> 2])) + Math_fround($14_1 * Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2])));
     if ($9_1 < Math_fround(HEAPF32[$3_1 >> 2]) ^ 1 | 0) {
      break label$4
     }
     HEAPF32[$3_1 >> 2] = $9_1;
     HEAP32[($5_1 + 12 | 0) >> 2] = 0;
     HEAPF32[($5_1 + 8 | 0) >> 2] = $11_1;
     HEAPF32[($5_1 + 4 | 0) >> 2] = $14_1;
     HEAPF32[$5_1 >> 2] = $13_1;
    }
    label$5 : {
     if ($9_1 > Math_fround(HEAPF32[$4_1 >> 2]) ^ 1 | 0) {
      break label$5
     }
     HEAPF32[$4_1 >> 2] = $9_1;
     HEAP32[($6_1 + 12 | 0) >> 2] = 0;
     HEAPF32[($6_1 + 8 | 0) >> 2] = $11_1;
     HEAPF32[($6_1 + 4 | 0) >> 2] = $14_1;
     HEAPF32[$6_1 >> 2] = $13_1;
    }
    $7_1 = $7_1 + 16 | 0;
    $8_1 = $8_1 + -1 | 0;
    if ($8_1) {
     continue label$3
    }
    break label$3;
   };
   $9_1 = Math_fround(HEAPF32[$4_1 >> 2]);
   $7_1 = (wasm2js_scratch_store_f32($9_1), wasm2js_scratch_load_i32(0));
  }
  label$6 : {
   $11_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   if (!($11_1 > $9_1)) {
    break label$6
   }
   HEAP32[$3_1 >> 2] = $7_1;
   HEAPF32[$4_1 >> 2] = $11_1;
   $1_1 = $5_1 + 8 | 0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $15_1 = i64toi32_i32$0;
   $15$hi = i64toi32_i32$1;
   $2_1 = $6_1 + 8 | 0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $158_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1;
   HEAP32[$1_1 >> 2] = $158_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$0;
   $16$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = HEAP32[$6_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
   $163_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1;
   HEAP32[i64toi32_i32$1 >> 2] = $163_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $6_1;
   HEAP32[i64toi32_i32$1 >> 2] = $16_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$1 = $2_1;
   HEAP32[i64toi32_i32$1 >> 2] = $15_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $158($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $5$hi = 0, $5_1 = 0, $6$hi = 0, $4$hi = 0, $6_1 = 0, $4_1 = 0, $3_1 = 0, $7$hi = 0, $7_1 = 0, $9$hi = 0, $2_1 = 0, $8_1 = 0, $8$hi = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $9_1 = 0, $10$hi = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $34_1 = 0, $34$hi = 0, $35_1 = 0, $35$hi = 0, $39_1 = 0, $39$hi = 0, $40_1 = 0, $40$hi = 0, $47$hi = 0, $48_1 = 0, $48$hi = 0, $50_1 = 0, $50$hi = 0, $52_1 = 0, $52$hi = 0, $55$hi = 0, $56_1 = 0, $56$hi = 0, $62_1 = 0, $62$hi = 0, $66_1 = 0, $67$hi = 0, $10_1 = 0, $69_1 = 0, $69$hi = 0, $82_1 = 0, $82$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $88_1 = 0, $88$hi = 0, $95$hi = 0, $96_1 = 0, $96$hi = 0, $98_1 = 0, $98$hi = 0, $100_1 = 0, $100$hi = 0, $103$hi = 0, $104_1 = 0, $104$hi = 0, $110_1 = 0, $110$hi = 0, $114_1 = 0, $115$hi = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   if (($2_1 | 0) == ($3_1 | 0)) {
    break label$1
   }
   return $2_1 - $3_1 | 0 | 0;
  }
  label$2 : {
   if ($2_1) {
    break label$2
   }
   return 0 | 0;
  }
  $3_1 = -1;
  label$3 : {
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $70_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $70_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $5_1 = $70_1;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$2;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $7_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$1 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $8_1 = i64toi32_i32$1;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $71_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $71_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $34_1 = $71_1;
   $34$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   $35_1 = $5_1;
   $35$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $72_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $72_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $6_1 = $72_1;
   $6$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $35$hi;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$0 = __wasm_i64_mul($35_1 | 0, i64toi32_i32$2 | 0, $6_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $39_1 = i64toi32_i32$0;
   $39$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $34$hi;
   i64toi32_i32$1 = $34_1;
   i64toi32_i32$0 = $39$hi;
   i64toi32_i32$3 = $39_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $40_1 = i64toi32_i32$4;
   $40$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$2 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $5_1 = i64toi32_i32$2;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $73_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $73_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
   }
   $47$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $40$hi;
   i64toi32_i32$1 = $40_1;
   i64toi32_i32$5 = $47$hi;
   i64toi32_i32$3 = $73_1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $48_1 = i64toi32_i32$0;
   $48$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$2 = $8_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $50_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   $50$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $52_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   $52$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $50$hi;
   i64toi32_i32$1 = $50_1;
   i64toi32_i32$4 = $52$hi;
   i64toi32_i32$3 = $52_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $74_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $74_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $55$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $48$hi;
   i64toi32_i32$0 = $48_1;
   i64toi32_i32$2 = $55$hi;
   i64toi32_i32$3 = $74_1;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $56_1 = i64toi32_i32$4;
   $56$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $75_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $75_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $5_1 = $75_1;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $62_1 = i64toi32_i32$1;
   $62$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = $62$hi;
   i64toi32_i32$3 = $62_1;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $9_1 = i64toi32_i32$2;
   $9$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$4 = $9$hi;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$3 = $5_1;
   $66_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $67$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $56$hi;
   i64toi32_i32$3 = $56_1;
   i64toi32_i32$4 = $67$hi;
   i64toi32_i32$5 = $66_1;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$2;
   $69_1 = i64toi32_i32$1;
   $69$hi = i64toi32_i32$2;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $76_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    $76_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $5_1 = $76_1;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$2;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $7_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $7$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$3 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $8_1 = i64toi32_i32$3;
   $8$hi = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $77_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $77_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $82_1 = $77_1;
   $82$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $5$hi;
   $83_1 = $5_1;
   $83$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $78_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    $78_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $6_1 = $78_1;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $83$hi;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$2 = __wasm_i64_mul($83_1 | 0, i64toi32_i32$0 | 0, $6_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $87_1 = i64toi32_i32$2;
   $87$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $82$hi;
   i64toi32_i32$3 = $82_1;
   i64toi32_i32$2 = $87$hi;
   i64toi32_i32$5 = $87_1;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $88_1 = i64toi32_i32$4;
   $88$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $4_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$3 | 0, $6_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $5_1 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $79_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    $79_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $95$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $88$hi;
   i64toi32_i32$3 = $88_1;
   i64toi32_i32$1 = $95$hi;
   i64toi32_i32$5 = $79_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $96_1 = i64toi32_i32$2;
   $96$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$0 = $8_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   $98_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $98$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $100_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $100$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $98$hi;
   i64toi32_i32$3 = $98_1;
   i64toi32_i32$4 = $100$hi;
   i64toi32_i32$5 = $100_1;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $80_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $80_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $103$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $96$hi;
   i64toi32_i32$2 = $96_1;
   i64toi32_i32$0 = $103$hi;
   i64toi32_i32$5 = $80_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $104_1 = i64toi32_i32$4;
   $104$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $81_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
    $81_1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   $5_1 = $81_1;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$3 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $110_1 = i64toi32_i32$3;
   $110$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$3 = $110$hi;
   i64toi32_i32$5 = $110_1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$4 = $6$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$5 = $5_1;
   $114_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   $115$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $104$hi;
   i64toi32_i32$5 = $104_1;
   i64toi32_i32$4 = $115$hi;
   i64toi32_i32$1 = $114_1;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $69$hi;
   i64toi32_i32$2 = $69_1;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
    break label$3
   }
   $3_1 = 1;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0) {
    break label$3
   }
   $3_1 = -1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$5 = $9_1;
   i64toi32_i32$2 = $6$hi;
   i64toi32_i32$0 = $6_1;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
    break label$3
   }
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$5 = $6$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$2 = $6_1;
   $3_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
  }
  return Math_imul($3_1, $2_1) | 0;
 }
 
 function $159($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $5$hi = 0, $6$hi = 0, $5_1 = 0, $6_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $26_1 = 0, $26$hi = 0, $28$hi = 0, $54_1 = 0, $57_1 = 0, $87_1 = 0, $90_1 = 0;
  $2_1 = global$0 - 160 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    $4_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
    if (($3_1 | 0) == ($4_1 | 0)) {
     break label$2
    }
    $0_1 = $3_1 - $4_1 | 0;
    break label$1;
   }
   label$3 : {
    if ($3_1) {
     break label$3
    }
    $0_1 = 0;
    break label$1;
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
     break label$4
    }
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $26_1 = i64toi32_i32$0;
    $26$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $28$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $26$hi;
    i64toi32_i32$0 = $28$hi;
    i64toi32_i32$0 = __wasm_i64_mul($26_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $0_1 = 0 - ($160($1_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0) | 0;
    break label$1;
   }
   i64toi32_i32$2 = $0_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$1 = ($2_1 + 80 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $5_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$0 = ($2_1 + 48 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $5_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$0 = $2_1;
   HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] = $6_1;
   HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $6_1;
   HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 24 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $54_1 = i64toi32_i32$1;
   i64toi32_i32$1 = ($2_1 + 32 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $54_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $57_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = $57_1;
   HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$1;
   $161(i64toi32_i32$0 + 48 | 0 | 0, i64toi32_i32$0 + 32 | 0 | 0, i64toi32_i32$0 + 144 | 0 | 0, i64toi32_i32$0 + 128 | 0 | 0);
   i64toi32_i32$2 = $0_1 + 24 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$1 = ($2_1 + 64 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $5_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$0 = ($2_1 + 16 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $5_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$0 = $2_1;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $6_1;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = $6_1;
   HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $87_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $87_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $90_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[i64toi32_i32$0 >> 2] = $90_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $161(i64toi32_i32$0 + 16 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$0 + 112 | 0 | 0, i64toi32_i32$0 + 96 | 0 | 0);
   label$5 : {
    label$6 : {
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 136 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$0 + 140 | 0) >> 2] | 0;
     $6_1 = i64toi32_i32$1;
     $6$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 108 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$6
     }
     $1_1 = -1;
     break label$5;
    }
    $1_1 = 1;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$0 = $5_1;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    label$7 : {
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] | 0;
     $6_1 = i64toi32_i32$3;
     $6$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$2;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$1 = $5_1;
     if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$7
     }
     $1_1 = -1;
     break label$5;
    }
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$2 = $5_1;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$5
    }
    label$8 : {
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 152 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 156 | 0) >> 2] | 0;
     $6_1 = i64toi32_i32$1;
     $6$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$8
     }
     $1_1 = -1;
     break label$5;
    }
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$0 = $5_1;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    $1_1 = -1;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$3;
    $6$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
    $5_1 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$2 = $5$hi;
    i64toi32_i32$1 = $5_1;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$2 = $5_1;
    $1_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   }
   $0_1 = Math_imul(HEAP32[($0_1 + 32 | 0) >> 2] | 0, $1_1);
  }
  global$0 = $2_1 + 160 | 0;
  return $0_1 | 0;
 }
 
 function $160($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $5$hi = 0, $2$hi = 0, $5_1 = 0, $2_1 = 0, $7$hi = 0, $7_1 = 0, $6$hi = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, i64toi32_i32$6 = 0, $8$hi = 0, $8_1 = 0, $65_1 = 0, $67_1 = 0, $68_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $87_1 = 0, $88_1 = 0, $89_1 = 0, $91_1 = 0, $93_1 = 0, $95_1 = 0, $96_1 = 0, $97_1 = 0, $99_1 = 0, $100_1 = 0, $101_1 = 0, $13_1 = 0, $13$hi = 0, $15_1 = 0, $15$hi = 0, $20_1 = 0, $52_1 = 0, $53$hi = 0, $55_1 = 0, $55$hi = 0, $57_1 = 0, $57$hi = 0, $58_1 = 0, $58$hi = 0, $62$hi = 0, $66_1 = 0, $66$hi = 0, $69_1 = 0, $69$hi = 0, $73_1 = 0, $73$hi = 0, $74_1 = 0, $74$hi = 0, $81$hi = 0, $82_1 = 0, $82$hi = 0, $89$hi = 0, $90_1 = 0, $90$hi = 0, $92_1 = 0, $92$hi = 0, $94_1 = 0, $94$hi = 0, $97$hi = 0, $98_1 = 0, $98$hi = 0, $104_1 = 0, $104$hi = 0, $108_1 = 0, $109$hi = 0, $112_1 = 0, $120$hi = 0, $122_1 = 0, $123$hi = 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
    break label$1
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $13_1 = i64toi32_i32$0;
   $13$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $15_1 = i64toi32_i32$1;
   $15$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $13$hi;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$1 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $65_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $67_1 = 0
     } else {
      $67_1 = 1
     }
     $68_1 = $67_1;
    } else {
     $68_1 = 0
    }
    $65_1 = $68_1;
   }
   $20_1 = $65_1 ? -1 : 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $1_1;
   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
    $70_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$1 >>> 0) {
      $71_1 = 0
     } else {
      $71_1 = 1
     }
     $72_1 = $71_1;
    } else {
     $72_1 = 0
    }
    $70_1 = $72_1;
   }
   return ($70_1 ? 1 : $20_1) | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 1;
     if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
      $75_1 = 1
     } else {
      if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
        $76_1 = 0
       } else {
        $76_1 = 1
       }
       $77_1 = $76_1;
      } else {
       $77_1 = 0
      }
      $75_1 = $77_1;
     }
     if ($75_1) {
      break label$4
     }
     $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     if (($3_1 | 0) >= (1 | 0)) {
      break label$3
     }
     return -1 | 0;
    }
    $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    label$5 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
      $78_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0) {
        $79_1 = 0
       } else {
        $79_1 = 1
       }
       $80_1 = $79_1;
      } else {
       $80_1 = 0
      }
      $78_1 = $80_1;
     }
     if ($78_1) {
      break label$5
     }
     return $3_1 | 0;
    }
    $4_1 = 1;
    if (($3_1 | 0) > (-1 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    $1_1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$5;
   }
   i64toi32_i32$0 = $0_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$2;
   label$6 : {
    label$7 : {
     i64toi32_i32$0 = i64toi32_i32$0 + 24 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $6_1 = i64toi32_i32$2;
     $6$hi = i64toi32_i32$5;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$5 | 0) < (i64toi32_i32$2 | 0)) {
      $81_1 = 1
     } else {
      if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0) {
        $83_1 = 0
       } else {
        $83_1 = 1
       }
       $84_1 = $83_1;
      } else {
       $84_1 = 0
      }
      $81_1 = $84_1;
     }
     if ($81_1) {
      break label$7
     }
     i64toi32_i32$0 = $5$hi;
     $2_1 = $5_1;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $6$hi;
     $7_1 = $6_1;
     $7$hi = i64toi32_i32$0;
     break label$6;
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
    $2_1 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$5;
    $52_1 = !(i64toi32_i32$2 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = 0;
    $53$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
    $55_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $55$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$4 = $52_1;
    i64toi32_i32$0 = $55$hi;
    i64toi32_i32$2 = $55_1;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $7_1 = i64toi32_i32$5;
    $7$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $7$hi;
   $57_1 = $7_1;
   $57$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   $58_1 = $1_1;
   $58$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 63;
   i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
    $85_1 = i64toi32_i32$1 >> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$1 >> i64toi32_i32$0 | 0;
    $85_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
   }
   $5_1 = $85_1;
   $5$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $58$hi;
   i64toi32_i32$1 = $58_1;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $62$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$5 = $62$hi;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $57$hi;
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$4 = __wasm_i64_mul($57_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $66_1 = i64toi32_i32$4;
   $66$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $86_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    $86_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $7_1 = $86_1;
   $7$hi = i64toi32_i32$4;
   $69_1 = $7_1;
   $69$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $87_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $87_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
   }
   $8_1 = $87_1;
   $8$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $69$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$1 = __wasm_i64_mul($69_1 | 0, i64toi32_i32$5 | 0, $8_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $73_1 = i64toi32_i32$1;
   $73$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $66$hi;
   i64toi32_i32$4 = $66_1;
   i64toi32_i32$1 = $73$hi;
   i64toi32_i32$2 = $73_1;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $74_1 = i64toi32_i32$3;
   $74$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $2_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $8_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
   $8_1 = i64toi32_i32$5;
   $8$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $88_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    $88_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   $81$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $74$hi;
   i64toi32_i32$4 = $74_1;
   i64toi32_i32$0 = $81$hi;
   i64toi32_i32$2 = $88_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $82_1 = i64toi32_i32$1;
   $82$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   $5_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   $5$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$5 = $5$hi;
   i64toi32_i32$5 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$4 | 0, $5_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
   $7_1 = i64toi32_i32$5;
   $7$hi = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $89_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
    $89_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
   }
   $89$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $82$hi;
   i64toi32_i32$4 = $82_1;
   i64toi32_i32$3 = $89$hi;
   i64toi32_i32$2 = $89_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $90_1 = i64toi32_i32$0;
   $90$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$5 = $8_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
   $92_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   $92$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = -1;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $94_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $94$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $92$hi;
   i64toi32_i32$4 = $92_1;
   i64toi32_i32$1 = $94$hi;
   i64toi32_i32$2 = $94_1;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $7_1 = i64toi32_i32$3;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$5 = i64toi32_i32$3;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $91_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
    $91_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
   }
   $97$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $90$hi;
   i64toi32_i32$0 = $90_1;
   i64toi32_i32$5 = $97$hi;
   i64toi32_i32$2 = $91_1;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $98_1 = i64toi32_i32$1;
   $98$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
    $93_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
    $93_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
   }
   $7_1 = $93_1;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $5_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $104_1 = i64toi32_i32$4;
   $104$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$4 = $104$hi;
   i64toi32_i32$2 = $104_1;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$2 = $7_1;
   $108_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $109$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $98$hi;
   i64toi32_i32$2 = $98_1;
   i64toi32_i32$1 = $109$hi;
   i64toi32_i32$3 = $108_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $2_1 = i64toi32_i32$4;
   $2$hi = i64toi32_i32$5;
   label$8 : {
    label$9 : {
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$5 | 0) < (i64toi32_i32$2 | 0)) {
      $95_1 = 1
     } else {
      if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $96_1 = 0
       } else {
        $96_1 = 1
       }
       $97_1 = $96_1;
      } else {
       $97_1 = 0
      }
      $95_1 = $97_1;
     }
     $112_1 = $95_1;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$3 = $6_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) < (i64toi32_i32$5 | 0)) {
      $99_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
        $100_1 = 0
       } else {
        $100_1 = 1
       }
       $101_1 = $100_1;
      } else {
       $101_1 = 0
      }
      $99_1 = $101_1;
     }
     if (($112_1 | 0) != ($99_1 | 0)) {
      break label$9
     }
     i64toi32_i32$3 = $5$hi;
     $6_1 = $5_1;
     $6$hi = i64toi32_i32$3;
     break label$8;
    }
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
    $6_1 = i64toi32_i32$1;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$2 = -1;
    i64toi32_i32$5 = -1;
    i64toi32_i32$2 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
    $120$hi = i64toi32_i32$2;
    i64toi32_i32$2 = i64toi32_i32$0;
    $122_1 = !($5_1 | i64toi32_i32$2 | 0);
    i64toi32_i32$2 = 0;
    $123$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $120$hi;
    i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$3 = $123$hi;
    i64toi32_i32$5 = $122_1;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
   }
   $4_1 = -1;
   label$10 : {
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$5 = $2_1;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0) {
     break label$10
    }
    $4_1 = 1;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$1 = $2_1;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$10
    }
    $4_1 = -1;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$5;
    $1$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$4 = $6_1;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0) {
     break label$10
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = $6_1;
    $4_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
   }
   $4_1 = Math_imul($3_1, $4_1);
  }
  return $4_1 | 0;
 }
 
 function $161($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $7$hi = 0, $7_1 = 0, $4$hi = 0, $6$hi = 0, $4_1 = 0, $10$hi = 0, $5$hi = 0, $6_1 = 0, $8$hi = 0, $5_1 = 0, $8_1 = 0, $9$hi = 0, $10_1 = 0, $11$hi = 0, $9_1 = 0, $11_1 = 0, $12$hi = 0, $133_1 = 0, $134_1 = 0, $135_1 = 0, $137_1 = 0, $138_1 = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $143_1 = 0, $144_1 = 0, $145_1 = 0, $147_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $151_1 = 0, $152_1 = 0, $153_1 = 0, $155_1 = 0, $158_1 = 0, $17_1 = 0, $17$hi = 0, $25_1 = 0, $25$hi = 0, $30_1 = 0, $30$hi = 0, $31_1 = 0, $31$hi = 0, $38$hi = 0, $39_1 = 0, $39$hi = 0, $41_1 = 0, $41$hi = 0, $43_1 = 0, $43$hi = 0, $46$hi = 0, $47_1 = 0, $47$hi = 0, $53_1 = 0, $53$hi = 0, $57_1 = 0, $58$hi = 0, $59_1 = 0, $59$hi = 0, $68_1 = 0, $68$hi = 0, $69_1 = 0, $69$hi = 0, $73_1 = 0, $73$hi = 0, $74_1 = 0, $74$hi = 0, $79$hi = 0, $80_1 = 0, $80$hi = 0, $82_1 = 0, $82$hi = 0, $84_1 = 0, $84$hi = 0, $87$hi = 0, $88$hi = 0, $90_1 = 0, $90$hi = 0, $96_1 = 0, $96$hi = 0, $100_1 = 0, $101$hi = 0, $12_1 = 0, $105_1 = 0, $106$hi = 0, $107_1 = 0, $107$hi = 0, $108_1 = 0, $108$hi = 0, $116$hi = 0, $119_1 = 0, $119$hi = 0, $120_1 = 0, $120$hi = 0, $127$hi = 0, $128_1 = 0, $128$hi = 0, $130_1 = 0, $130$hi = 0, $132_1 = 0, $132$hi = 0, $135$hi = 0, $136_1 = 0, $136$hi = 0, $142_1 = 0, $142$hi = 0, $146_1 = 0, $147$hi = 0, $154_1 = 0, $155$hi = 0, $156_1 = 0, $156$hi = 0, $157_1 = 0, $157$hi = 0, $163_1 = 0, $164$hi = 0, $168_1 = 0, $169$hi = 0, $175$hi = 0, $178_1 = 0, $178$hi = 0, $179_1 = 0, $179$hi = 0, $184$hi = 0, $185_1 = 0, $185$hi = 0, $187_1 = 0, $187$hi = 0, $189_1 = 0, $189$hi = 0, $192$hi = 0, $193_1 = 0, $193$hi = 0, $199_1 = 0, $199$hi = 0, $203_1 = 0, $204$hi = 0, $213_1 = 0, $213$hi = 0, $218_1 = 0, $219$hi = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
  $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$0;
  $17_1 = $5_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $133_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $133_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $7_1 = $133_1;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $17$hi;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $8_1 = i64toi32_i32$1;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $134_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $134_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $25_1 = $134_1;
  $25$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $135_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $135_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $4_1 = $135_1;
  $4$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $30_1 = i64toi32_i32$0;
  $30$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $25$hi;
  i64toi32_i32$1 = $25_1;
  i64toi32_i32$0 = $30$hi;
  i64toi32_i32$3 = $30_1;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $31_1 = i64toi32_i32$4;
  $31$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $6_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$2 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$2;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$5 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $137_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $137_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  $38$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $31$hi;
  i64toi32_i32$1 = $31_1;
  i64toi32_i32$5 = $38$hi;
  i64toi32_i32$3 = $137_1;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $39_1 = i64toi32_i32$0;
  $39$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $8$hi;
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
  $41_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $41$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$4 = $9_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $43_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $43$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $41$hi;
  i64toi32_i32$1 = $41_1;
  i64toi32_i32$4 = $43$hi;
  i64toi32_i32$3 = $43_1;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $8_1 = i64toi32_i32$5;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $138_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $138_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $46$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$0 = $39_1;
  i64toi32_i32$2 = $46$hi;
  i64toi32_i32$3 = $138_1;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $47_1 = i64toi32_i32$4;
  $47$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   $139_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $139_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
  }
  $8_1 = $139_1;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$1 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$0 | 0, $6_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $53_1 = i64toi32_i32$1;
  $53$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$5 = $8_1;
  i64toi32_i32$1 = $53$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $10_1 = i64toi32_i32$2;
  $10$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $8$hi;
  i64toi32_i32$4 = $10$hi;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$3 = $8_1;
  $57_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
  i64toi32_i32$0 = 0;
  $58$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $47$hi;
  i64toi32_i32$3 = $47_1;
  i64toi32_i32$4 = $58$hi;
  i64toi32_i32$5 = $57_1;
  i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $59_1 = i64toi32_i32$1;
  $59$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$2;
  $9$hi = i64toi32_i32$3;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$5 = -1;
  i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
  $8_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
  $8$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$2 | 0, $8_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$3 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$5 = 32;
  i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $140_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $140_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
  }
  $68_1 = $140_1;
  $68$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  $69_1 = $7_1;
  $69$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = 32;
  i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
   i64toi32_i32$3 = 0;
   $141_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $141_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $9_1 = $141_1;
  $9$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $69$hi;
  i64toi32_i32$2 = $9$hi;
  i64toi32_i32$2 = __wasm_i64_mul($69_1 | 0, i64toi32_i32$3 | 0, $9_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
  $73_1 = i64toi32_i32$2;
  $73$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $68$hi;
  i64toi32_i32$0 = $68_1;
  i64toi32_i32$2 = $73$hi;
  i64toi32_i32$5 = $73_1;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $74_1 = i64toi32_i32$4;
  $74$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$0 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$1 | 0, $9_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$3 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$5 = 32;
  i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $143_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $143_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
  }
  $79$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $74$hi;
  i64toi32_i32$1 = $74_1;
  i64toi32_i32$3 = $79$hi;
  i64toi32_i32$5 = $143_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $80_1 = i64toi32_i32$2;
  $80$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $11$hi;
  i64toi32_i32$0 = $11_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$5 = -1;
  i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
  $82_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
  $82$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$4 = $7_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$5 = -1;
  i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
  $84_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
  $84$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $82$hi;
  i64toi32_i32$1 = $82_1;
  i64toi32_i32$4 = $84$hi;
  i64toi32_i32$5 = $84_1;
  i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $7_1 = i64toi32_i32$3;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$0 = i64toi32_i32$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$5 = 32;
  i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $144_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $144_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $87$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $80$hi;
  i64toi32_i32$2 = $80_1;
  i64toi32_i32$0 = $87$hi;
  i64toi32_i32$5 = $144_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  $88$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $10$hi;
  i64toi32_i32$3 = $88$hi;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$2 = $10$hi;
  i64toi32_i32$5 = $10_1;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $90_1 = i64toi32_i32$0;
  $90$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$5 = 32;
  i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
   $145_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
   $145_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
  }
  $7_1 = $145_1;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $8$hi;
  i64toi32_i32$3 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$1 | 0, $8_1 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $96_1 = i64toi32_i32$3;
  $96$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$4 = $7_1;
  i64toi32_i32$3 = $96$hi;
  i64toi32_i32$5 = $96_1;
  i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $11_1 = i64toi32_i32$2;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$5 = $7_1;
  $100_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
  i64toi32_i32$1 = 0;
  $101$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $90$hi;
  i64toi32_i32$5 = $90_1;
  i64toi32_i32$0 = $101$hi;
  i64toi32_i32$4 = $100_1;
  i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $12_1 = i64toi32_i32$3;
  $12$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $10$hi;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$1 = i64toi32_i32$3;
  i64toi32_i32$5 = $10$hi;
  i64toi32_i32$4 = $10_1;
  $105_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
  i64toi32_i32$1 = 0;
  $106$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $59$hi;
  i64toi32_i32$4 = $59_1;
  i64toi32_i32$2 = $106$hi;
  i64toi32_i32$5 = $105_1;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  $107_1 = i64toi32_i32$0;
  $107$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $5$hi;
  $108_1 = $5_1;
  $108$hi = i64toi32_i32$3;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$3;
  $6$hi = i64toi32_i32$4;
  i64toi32_i32$1 = i64toi32_i32$3;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = 32;
  i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
   i64toi32_i32$3 = 0;
   $147_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
   $147_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
  }
  $7_1 = $147_1;
  $7$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $108$hi;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = __wasm_i64_mul($108_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
  $10_1 = i64toi32_i32$1;
  $10$hi = i64toi32_i32$3;
  i64toi32_i32$4 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$5 = 32;
  i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $148_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
   $148_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $116$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$4 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $119_1 = i64toi32_i32$4;
  $119$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $116$hi;
  i64toi32_i32$3 = $148_1;
  i64toi32_i32$4 = $119$hi;
  i64toi32_i32$5 = $119_1;
  i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $120_1 = i64toi32_i32$2;
  $120$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = -1;
  i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $6_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
  $6$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$3 | 0, $6_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
  $4_1 = i64toi32_i32$1;
  $4$hi = i64toi32_i32$3;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$5 = 32;
  i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $149_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
   $149_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $127$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $120$hi;
  i64toi32_i32$3 = $120_1;
  i64toi32_i32$0 = $127$hi;
  i64toi32_i32$5 = $149_1;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $128_1 = i64toi32_i32$4;
  $128$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $10$hi;
  i64toi32_i32$1 = $10_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = -1;
  i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $130_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
  $130$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$5 = -1;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $132_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $132$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $130$hi;
  i64toi32_i32$3 = $130_1;
  i64toi32_i32$2 = $132$hi;
  i64toi32_i32$5 = $132_1;
  i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$4;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = 32;
  i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
   i64toi32_i32$3 = 0;
   $150_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
   $150_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
  }
  $135$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $128$hi;
  i64toi32_i32$4 = $128_1;
  i64toi32_i32$1 = $135$hi;
  i64toi32_i32$5 = $150_1;
  i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $136_1 = i64toi32_i32$2;
  $136$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$3 = $4_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$5 = 32;
  i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   $151_1 = 0;
  } else {
   i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
   $151_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
  }
  $4_1 = $151_1;
  $4$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$3 = $6$hi;
  i64toi32_i32$3 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$4 | 0, $6_1 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $142_1 = i64toi32_i32$3;
  $142$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$3 = $142$hi;
  i64toi32_i32$5 = $142_1;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $5_1 = i64toi32_i32$1;
  $5$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$5 = $4_1;
  $146_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
  i64toi32_i32$4 = 0;
  $147$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $136$hi;
  i64toi32_i32$5 = $136_1;
  i64toi32_i32$2 = $147$hi;
  i64toi32_i32$0 = $146_1;
  i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $10_1 = i64toi32_i32$3;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$4 = i64toi32_i32$3;
  i64toi32_i32$5 = $12$hi;
  i64toi32_i32$0 = $12_1;
  i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
  i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  $4_1 = i64toi32_i32$2;
  $4$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $10$hi;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$4 = $10$hi;
  i64toi32_i32$0 = $10_1;
  $154_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
  i64toi32_i32$1 = 0;
  $155$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $107$hi;
  i64toi32_i32$0 = $107_1;
  i64toi32_i32$3 = $155$hi;
  i64toi32_i32$4 = $154_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $156_1 = i64toi32_i32$5;
  $156$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  $157_1 = $4_1;
  $157$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$2 = $11$hi;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$4 = $11_1;
  i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $11_1 = i64toi32_i32$3;
  $11$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$5 = $11$hi;
  i64toi32_i32$2 = i64toi32_i32$3;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$4 = $5_1;
  $163_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
  i64toi32_i32$2 = 0;
  $164$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $157$hi;
  i64toi32_i32$4 = $157_1;
  i64toi32_i32$5 = $164$hi;
  i64toi32_i32$1 = $163_1;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
  i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  $10_1 = i64toi32_i32$0;
  $10$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$3 = $10$hi;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$1 = $4_1;
  $168_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
  i64toi32_i32$2 = 0;
  $169$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $156$hi;
  i64toi32_i32$1 = $156_1;
  i64toi32_i32$3 = $169$hi;
  i64toi32_i32$4 = $168_1;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $5_1 = i64toi32_i32$5;
  $5$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$1 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$0 | 0, $8_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 32;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $152_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     $152_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
    }
    $175$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$2 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$1 | 0, $9_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $178_1 = i64toi32_i32$2;
    $178$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $175$hi;
    i64toi32_i32$0 = $152_1;
    i64toi32_i32$2 = $178$hi;
    i64toi32_i32$4 = $178_1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $179_1 = i64toi32_i32$3;
    $179$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$0 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $7_1 = i64toi32_i32$0;
    $7$hi = i64toi32_i32$5;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 32;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $153_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $153_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    $184$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $179$hi;
    i64toi32_i32$5 = $179_1;
    i64toi32_i32$1 = $184$hi;
    i64toi32_i32$4 = $153_1;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $185_1 = i64toi32_i32$2;
    $185$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
    $187_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $187$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $189_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $189$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $187$hi;
    i64toi32_i32$5 = $187_1;
    i64toi32_i32$3 = $189$hi;
    i64toi32_i32$4 = $189_1;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $7_1 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 32;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $155_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $155_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $192$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $185$hi;
    i64toi32_i32$2 = $185_1;
    i64toi32_i32$0 = $192$hi;
    i64toi32_i32$4 = $155_1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $193_1 = i64toi32_i32$3;
    $193$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 32;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $158_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $158_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $7_1 = $158_1;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$5 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$2 | 0, $8_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $199_1 = i64toi32_i32$5;
    $199$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = $199$hi;
    i64toi32_i32$4 = $199_1;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$4 = $7_1;
    $203_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
    i64toi32_i32$2 = 0;
    $204$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $193$hi;
    i64toi32_i32$4 = $193_1;
    i64toi32_i32$3 = $204$hi;
    i64toi32_i32$1 = $203_1;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $7_1 = i64toi32_i32$5;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $6_1 = i64toi32_i32$3;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$0 = i64toi32_i32$3;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$0 = $10$hi;
    $7_1 = $10_1;
    $7$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = $5$hi;
   $213_1 = $5_1;
   $213$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $7_1 = i64toi32_i32$4;
   $7$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $218_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $219$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $213$hi;
   i64toi32_i32$2 = $213_1;
   i64toi32_i32$3 = $219$hi;
   i64toi32_i32$1 = $218_1;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$2 = $2_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $6_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$2 = $3_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $7$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $162($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $8_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if ($3_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$3
     }
     HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     break label$2;
    }
    $4_1 = $79(12 | 0, 16 | 0) | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = 0;
    $5_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $5_1;
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $79(Math_imul($5_1, 24) | 0, 16 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
   }
   $3_1 = HEAP32[$4_1 >> 2] | 0;
   $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   if (($6_1 | 0) < (1 | 0)) {
    break label$1
   }
   $4_1 = 0;
   $5_1 = $3_1;
   label$4 : while (1) {
    $7_1 = $5_1 + 24 | 0;
    $4_1 = $4_1 + 1 | 0;
    HEAP32[$5_1 >> 2] = ($4_1 | 0) < ($6_1 | 0) ? $7_1 : 0;
    $5_1 = $7_1;
    if (($6_1 | 0) != ($4_1 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  HEAP32[($0_1 + 56 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = $3_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$5 : {
   $8_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if ($8_1) {
    break label$5
   }
   label$6 : {
    label$7 : {
     $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$7
     }
     HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     break label$6;
    }
    $4_1 = $79(12 | 0, 16 | 0) | 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = 0;
    $5_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $5_1;
    (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $79(Math_imul($5_1, 24) | 0, 16 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
   }
   $8_1 = HEAP32[$4_1 >> 2] | 0;
   $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   if (($6_1 | 0) < (1 | 0)) {
    break label$5
   }
   $4_1 = 0;
   $5_1 = $8_1;
   label$8 : while (1) {
    $7_1 = $5_1 + 24 | 0;
    $4_1 = $4_1 + 1 | 0;
    HEAP32[$5_1 >> 2] = ($4_1 | 0) < ($6_1 | 0) ? $7_1 : 0;
    $5_1 = $7_1;
    if (($6_1 | 0) != ($4_1 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
  HEAP32[($0_1 + 56 | 0) >> 2] = HEAP32[$8_1 >> 2] | 0;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$0 = 0;
  HEAP32[$8_1 >> 2] = 0;
  HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $8_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = 0;
  $4_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = 0;
  HEAP32[($8_1 + 20 | 0) >> 2] = $4_1;
  $4_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
  $5_1 = $4_1 + 1 | 0;
  HEAP32[($0_1 + 116 | 0) >> 2] = $5_1;
  label$9 : {
   if (($4_1 | 0) < (HEAP32[($0_1 + 120 | 0) >> 2] | 0 | 0)) {
    break label$9
   }
   HEAP32[($0_1 + 120 | 0) >> 2] = $5_1;
  }
  return $3_1 | 0;
 }
 
 function $163($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $7_1 = 0, $10_1 = 0, $5_1 = 0, $20_1 = 0, $18_1 = 0, $8_1 = 0, $22_1 = 0, $6_1 = 0, $17_1 = 0, $16_1 = 0, $21_1 = 0, $15_1 = 0, $19_1 = 0, $11_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0, $23_1 = 0;
  label$1 : {
   label$2 : {
    $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    $6_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    if ((HEAP32[($5_1 + 88 | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    if ((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    label$3 : {
     $7_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     if (($7_1 | 0) != ($6_1 | 0)) {
      break label$3
     }
     HEAP32[$3_1 >> 2] = $5_1;
     $5_1 = 0;
     $7_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$1
     }
     HEAP32[$4_1 >> 2] = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
     return 0 | 0;
    }
    $5_1 = HEAP32[$6_1 >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $7_1;
    HEAP32[$7_1 >> 2] = $5_1;
    label$4 : {
     if (($6_1 | 0) != (HEAP32[$2_1 >> 2] | 0 | 0)) {
      break label$4
     }
     $8_1 = $5_1;
     label$5 : {
      $9_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
      $10_1 = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
      if (($9_1 | 0) < ($10_1 | 0)) {
       break label$5
      }
      label$6 : {
       if (($9_1 | 0) != ($10_1 | 0)) {
        break label$6
       }
       $8_1 = $5_1;
       if ((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
      }
      $8_1 = $7_1;
     }
     HEAP32[$2_1 >> 2] = $8_1;
    }
    if (($6_1 | 0) != (HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    label$7 : {
     label$8 : {
      $8_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
      $9_1 = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
      if (($8_1 | 0) > ($9_1 | 0)) {
       break label$8
      }
      if (($8_1 | 0) != ($9_1 | 0)) {
       break label$7
      }
      if ((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) <= (HEAP32[($7_1 + 92 | 0) >> 2] | 0 | 0)) {
       break label$7
      }
     }
     HEAP32[($2_1 + 4 | 0) >> 2] = $5_1;
     break label$2;
    }
    HEAP32[($2_1 + 4 | 0) >> 2] = $7_1;
   }
   $11_1 = HEAP32[$2_1 >> 2] | 0;
   $12_1 = HEAP32[$1_1 >> 2] | 0;
   $13_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $10_1 = $13_1;
   $14_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $7_1 = $14_1;
   $15_1 = 0;
   $6_1 = 0;
   $8_1 = 1;
   $16_1 = 0;
   label$9 : while (1) {
    label$10 : {
     label$11 : {
      $17_1 = HEAP32[($10_1 + 88 | 0) >> 2] | 0;
      $9_1 = Math_imul((HEAP32[($7_1 + 88 | 0) >> 2] | 0) - $17_1 | 0, $8_1);
      if (($9_1 | 0) < (1 | 0)) {
       break label$11
      }
      $5_1 = $10_1;
      label$12 : while (1) {
       $18_1 = $7_1;
       $19_1 = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
       $17_1 = $9_1;
       label$13 : {
        label$14 : while (1) {
         $9_1 = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
         $20_1 = $19_1 - $9_1 | 0;
         $21_1 = !$16_1 << 2 | 0;
         $7_1 = HEAP32[($5_1 + $21_1 | 0) >> 2] | 0;
         if (($7_1 | 0) == ($5_1 | 0)) {
          break label$13
         }
         $22_1 = (HEAP32[($7_1 + 92 | 0) >> 2] | 0) - $9_1 | 0;
         if (($22_1 | 0) > (0 | 0)) {
          break label$13
         }
         label$15 : {
          $10_1 = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
          $9_1 = Math_imul($10_1 - (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0, $8_1);
          if (!$9_1) {
           break label$15
          }
          if (($9_1 | 0) > (-1 | 0)) {
           break label$13
          }
          if ((Math_imul($22_1, $17_1) | 0) > (Math_imul($9_1, $20_1) | 0)) {
           break label$13
          }
         }
         $17_1 = Math_imul((HEAP32[($18_1 + 88 | 0) >> 2] | 0) - $10_1 | 0, $8_1);
         $5_1 = $7_1;
         continue label$14;
        };
       }
       $7_1 = HEAP32[($18_1 + $21_1 | 0) >> 2] | 0;
       if (($7_1 | 0) == ($18_1 | 0)) {
        break label$10
       }
       $22_1 = (HEAP32[($7_1 + 92 | 0) >> 2] | 0) - $19_1 | 0;
       if (($22_1 | 0) > (-1 | 0)) {
        break label$10
       }
       $10_1 = HEAP32[($7_1 + 88 | 0) >> 2] | 0;
       $9_1 = Math_imul($10_1 - (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0, $8_1);
       if (($9_1 | 0) < (1 | 0)) {
        break label$10
       }
       $10_1 = Math_imul($10_1 - (HEAP32[($18_1 + 88 | 0) >> 2] | 0) | 0, $8_1);
       if (!$10_1) {
        continue label$12
       }
       if (($10_1 | 0) > (-1 | 0)) {
        break label$10
       }
       if ((Math_imul($22_1, $17_1) | 0) < (Math_imul($10_1, $20_1) | 0)) {
        continue label$12
       }
       break label$10;
      };
     }
     label$16 : {
      if (($9_1 | 0) > (-1 | 0)) {
       break label$16
      }
      label$17 : while (1) {
       $22_1 = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
       $23_1 = (($16_1 | 0) != (0 | 0)) << 2 | 0;
       $17_1 = HEAP32[($7_1 + $23_1 | 0) >> 2] | 0;
       label$18 : while (1) {
        $18_1 = $9_1;
        $5_1 = $10_1;
        $9_1 = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
        $19_1 = $22_1 - $9_1 | 0;
        label$19 : {
         if (($17_1 | 0) == ($7_1 | 0)) {
          break label$19
         }
         $20_1 = (HEAP32[($17_1 + 92 | 0) >> 2] | 0) - $22_1 | 0;
         if (($20_1 | 0) < (0 | 0)) {
          break label$19
         }
         label$20 : {
          $21_1 = HEAP32[($17_1 + 88 | 0) >> 2] | 0;
          $10_1 = Math_imul($21_1 - (HEAP32[($7_1 + 88 | 0) >> 2] | 0) | 0, $8_1);
          if (!$10_1) {
           break label$20
          }
          if (($10_1 | 0) > (-1 | 0)) {
           break label$19
          }
          if ((Math_imul($20_1, $18_1) | 0) > (Math_imul($10_1, $19_1) | 0)) {
           break label$19
          }
         }
         $9_1 = Math_imul($21_1 - (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0, $8_1);
         $7_1 = $17_1;
         $10_1 = $5_1;
         continue label$17;
        }
        label$21 : {
         $10_1 = HEAP32[($5_1 + $23_1 | 0) >> 2] | 0;
         if (($10_1 | 0) != ($5_1 | 0)) {
          break label$21
         }
         $18_1 = $7_1;
         break label$10;
        }
        label$22 : {
         $21_1 = (HEAP32[($10_1 + 92 | 0) >> 2] | 0) - $9_1 | 0;
         if (($21_1 | 0) >= (1 | 0)) {
          break label$22
         }
         $18_1 = $7_1;
         break label$10;
        }
        label$23 : {
         $20_1 = HEAP32[($10_1 + 88 | 0) >> 2] | 0;
         $9_1 = Math_imul((HEAP32[($7_1 + 88 | 0) >> 2] | 0) - $20_1 | 0, $8_1);
         if (($9_1 | 0) <= (-1 | 0)) {
          break label$23
         }
         $18_1 = $7_1;
         break label$10;
        }
        $20_1 = Math_imul($20_1 - (HEAP32[($5_1 + 88 | 0) >> 2] | 0) | 0, $8_1);
        if (!$20_1) {
         continue label$18
        }
        label$24 : {
         if (($20_1 | 0) <= (-1 | 0)) {
          break label$24
         }
         $18_1 = $7_1;
         break label$10;
        }
        if ((Math_imul($21_1, $18_1) | 0) < (Math_imul($20_1, $19_1) | 0)) {
         continue label$18
        }
        break label$18;
       };
       break label$17;
      };
      $18_1 = $7_1;
      break label$10;
     }
     $20_1 = HEAP32[($10_1 + 92 | 0) >> 2] | 0;
     label$25 : {
      label$26 : {
       if ($16_1) {
        break label$26
       }
       $9_1 = $10_1;
       label$27 : while (1) {
        $5_1 = $9_1;
        $9_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
        if (($9_1 | 0) == ($10_1 | 0)) {
         break label$25
        }
        if ((HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0) != ($17_1 | 0)) {
         break label$25
        }
        $22_1 = HEAP32[($9_1 + 92 | 0) >> 2] | 0;
        $18_1 = ($22_1 | 0) <= ($20_1 | 0);
        $20_1 = $22_1;
        if ($18_1) {
         continue label$27
        }
        break label$25;
       };
      }
      $9_1 = $10_1;
      label$28 : while (1) {
       $5_1 = $9_1;
       $9_1 = HEAP32[$9_1 >> 2] | 0;
       if (($9_1 | 0) == ($10_1 | 0)) {
        break label$25
       }
       if ((HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0) != ($17_1 | 0)) {
        break label$25
       }
       $22_1 = HEAP32[($9_1 + 92 | 0) >> 2] | 0;
       $18_1 = ($22_1 | 0) > ($20_1 | 0);
       $20_1 = $22_1;
       if (!$18_1) {
        continue label$28
       }
       break label$28;
      };
     }
     $10_1 = HEAP32[($7_1 + 92 | 0) >> 2] | 0;
     label$29 : {
      if ($16_1) {
       break label$29
      }
      $9_1 = $7_1;
      label$30 : while (1) {
       $18_1 = $9_1;
       $9_1 = HEAP32[$9_1 >> 2] | 0;
       if (($9_1 | 0) == ($7_1 | 0)) {
        break label$10
       }
       if ((HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0) != ($17_1 | 0)) {
        break label$10
       }
       $20_1 = HEAP32[($9_1 + 92 | 0) >> 2] | 0;
       $22_1 = ($20_1 | 0) >= ($10_1 | 0);
       $10_1 = $20_1;
       if ($22_1) {
        continue label$30
       }
       break label$10;
      };
     }
     $9_1 = $7_1;
     label$31 : while (1) {
      $18_1 = $9_1;
      $9_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
      if (($9_1 | 0) == ($7_1 | 0)) {
       break label$10
      }
      if ((HEAP32[($9_1 + 88 | 0) >> 2] | 0 | 0) != ($17_1 | 0)) {
       break label$10
      }
      $20_1 = HEAP32[($9_1 + 92 | 0) >> 2] | 0;
      $22_1 = ($20_1 | 0) < ($10_1 | 0);
      $10_1 = $20_1;
      if (!$22_1) {
       continue label$31
      }
      break label$31;
     };
    }
    $10_1 = $16_1 ? $5_1 : $12_1;
    $7_1 = $16_1 ? $18_1 : $11_1;
    $15_1 = $16_1 ? $15_1 : $5_1;
    $6_1 = $16_1 ? $6_1 : $18_1;
    $8_1 = $16_1 ? $8_1 : -1;
    $16_1 = $16_1 + 1 | 0;
    if (($16_1 | 0) != (2 | 0)) {
     continue label$9
    }
    break label$9;
   };
   HEAP32[$7_1 >> 2] = $10_1;
   HEAP32[($10_1 + 4 | 0) >> 2] = $7_1;
   HEAP32[$15_1 >> 2] = $6_1;
   HEAP32[($6_1 + 4 | 0) >> 2] = $15_1;
   label$32 : {
    if ((HEAP32[($11_1 + 88 | 0) >> 2] | 0 | 0) >= (HEAP32[($12_1 + 88 | 0) >> 2] | 0 | 0)) {
     break label$32
    }
    HEAP32[$1_1 >> 2] = $11_1;
   }
   label$33 : {
    if ((HEAP32[($14_1 + 88 | 0) >> 2] | 0 | 0) < (HEAP32[($13_1 + 88 | 0) >> 2] | 0 | 0)) {
     break label$33
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $14_1;
   }
   HEAP32[($1_1 + 12 | 0) >> 2] = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   HEAP32[$3_1 >> 2] = $15_1;
   $5_1 = 1;
  }
  HEAP32[$4_1 >> 2] = $6_1;
  return $5_1 | 0;
 }
 
 function $164($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $9_1 = 0, $109_1 = 0, $10_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    $5_1 = $2_1 - $1_1 | 0;
    if ($5_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    label$3 : {
     switch ($5_1 | 0) {
     default:
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = 0;
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $3_1 + 8 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      break label$1;
     case 2:
      $2_1 = HEAP32[((HEAP32[($0_1 + 92 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
      $5_1 = HEAP32[($2_1 + 204 | 0) >> 2] | 0;
      $6_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        $7_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
        $8_1 = HEAP32[($2_1 + 200 | 0) >> 2] | 0;
        if (($7_1 | 0) != ($8_1 | 0)) {
         break label$7
        }
        if (($6_1 | 0) != ($5_1 | 0)) {
         break label$7
        }
        $5_1 = $6_1;
        if ((HEAP32[($2_1 + 96 | 0) >> 2] | 0 | 0) == (HEAP32[($2_1 + 208 | 0) >> 2] | 0 | 0)) {
         break label$6
        }
       }
       $1_1 = $2_1 + 112 | 0;
       label$8 : {
        label$9 : {
         $6_1 = $6_1 - $5_1 | 0;
         $5_1 = $7_1 - $8_1 | 0;
         if ($6_1 | $5_1 | 0) {
          break label$9
         }
         $6_1 = (HEAP32[($2_1 + 96 | 0) >> 2] | 0 | 0) > (HEAP32[($2_1 + 208 | 0) >> 2] | 0 | 0);
         $5_1 = $6_1 ? $1_1 : $2_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
         HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
         HEAP32[$3_1 >> 2] = $5_1;
         HEAP32[($5_1 + 4 | 0) >> 2] = $5_1;
         HEAP32[$5_1 >> 2] = $5_1;
         $1_1 = $6_1 ? $2_1 : $1_1;
         $2_1 = $5_1;
         break label$8;
        }
        HEAP32[($2_1 + 4 | 0) >> 2] = $1_1;
        HEAP32[$2_1 >> 2] = $1_1;
        HEAP32[($2_1 + 116 | 0) >> 2] = $2_1;
        HEAP32[($2_1 + 112 | 0) >> 2] = $2_1;
        $8_1 = ($5_1 | 0) < (0 | 0);
        $109_1 = !$5_1;
        $5_1 = ($6_1 | 0) < (0 | 0);
        $7_1 = $8_1 | ($109_1 & $5_1 | 0) | 0;
        HEAP32[($3_1 + 4 | 0) >> 2] = $7_1 ? $1_1 : $2_1;
        HEAP32[$3_1 >> 2] = $7_1 ? $2_1 : $1_1;
        label$10 : {
         label$11 : {
          if ($5_1) {
           break label$11
          }
          if (!($8_1 & !$6_1 | 0)) {
           break label$10
          }
         }
         HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
         $5_1 = $1_1;
         break label$8;
        }
        HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
        $5_1 = $2_1;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $5_1;
       $3_1 = $162($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0;
       HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
       $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
       HEAP32[($3_1 + 4 | 0) >> 2] = $3_1;
       HEAP32[$3_1 >> 2] = $3_1;
       HEAP32[($2_1 + 4 | 0) >> 2] = $2_1;
       HEAP32[$2_1 >> 2] = $2_1;
       break label$1;
      }
      HEAP32[($2_1 + 8 | 0) >> 2] = 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
      HEAP32[$3_1 >> 2] = $2_1;
      HEAP32[($2_1 + 4 | 0) >> 2] = $2_1;
      HEAP32[$2_1 >> 2] = $2_1;
      break label$1;
     case 1:
      break label$3;
     };
    }
    $2_1 = HEAP32[((HEAP32[($0_1 + 92 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = 0;
    HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
    HEAP32[$3_1 >> 2] = $2_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $2_1;
    HEAP32[$2_1 >> 2] = $2_1;
    break label$1;
   }
   $5_1 = ($5_1 | 0) / (2 | 0) | 0;
   $9_1 = $5_1 + $1_1 | 0;
   $7_1 = $9_1;
   label$12 : {
    if (($7_1 | 0) >= ($2_1 | 0)) {
     break label$12
    }
    $7_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
    $6_1 = HEAP32[((($9_1 << 2 | 0) + $7_1 | 0) + -4 | 0) >> 2] | 0;
    $8_1 = HEAP32[($6_1 + 88 | 0) >> 2] | 0;
    $10_1 = HEAP32[($6_1 + 96 | 0) >> 2] | 0;
    $11_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
    $5_1 = $7_1 + (($5_1 + $1_1 | 0) << 2 | 0) | 0;
    $7_1 = $9_1;
    label$13 : while (1) {
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     if ((HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0) != ($8_1 | 0)) {
      break label$12
     }
     if ((HEAP32[($6_1 + 92 | 0) >> 2] | 0 | 0) != ($11_1 | 0)) {
      break label$12
     }
     if ((HEAP32[($6_1 + 96 | 0) >> 2] | 0 | 0) != ($10_1 | 0)) {
      break label$12
     }
     $5_1 = $5_1 + 4 | 0;
     $7_1 = $7_1 + 1 | 0;
     if (($2_1 | 0) != ($7_1 | 0)) {
      continue label$13
     }
     break label$13;
    };
    $7_1 = $2_1;
   }
   $164($0_1 | 0, $1_1 | 0, $9_1 | 0, $3_1 | 0);
   i64toi32_i32$1 = $4_1 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $164($0_1 | 0, $7_1 | 0, $2_1 | 0, $4_1 | 0);
   $165($0_1 | 0, $3_1 | 0, $4_1 | 0);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $165($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $9_1 = 0, $4_1 = 0, $11_1 = 0, $23_1 = 0, $20_1 = 0, $12_1 = 0, $10_1 = 0, $24_1 = 0, $7_1 = 0, $14$hi = 0, $17$hi = 0, $5_1 = 0, $15$hi = 0, $25_1 = 0, $26_1 = 0, $21_1 = 0, $13_1 = 0, i64toi32_i32$6 = 0, $31_1 = 0, $40_1 = 0, $8_1 = 0, $14_1 = 0, $34_1 = 0, $15_1 = 0, $22$hi = 0, $6_1 = 0, $17_1 = 0, $16$hi = 0, $18$hi = 0, $33_1 = 0, $39_1 = 0, $22_1 = 0, $30_1 = 0, $19$hi = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, $117_1 = 0, $118_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $124_1 = 0, $125_1 = 0, $126_1 = 0, $127_1 = 0, $128_1 = 0, $129_1 = 0, $130_1 = 0, $32_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $51_1 = 0, $56_1 = 0, $115$hi = 0, $116_1 = 0, $116$hi = 0, $119_1 = 0, $119$hi = 0, $123_1 = 0, $123$hi = 0, $139_1 = 0, $139$hi = 0, $148_1 = 0, $148$hi = 0, $149$hi = 0, $153_1 = 0, $153$hi = 0, $156_1 = 0, $156$hi = 0, $157$hi = 0, $165_1 = 0, $165$hi = 0, $166_1 = 0, $166$hi = 0, $212$hi = 0, $131_1 = 0, $214_1 = 0, $214$hi = 0, $229$hi = 0, $132_1 = 0, $231_1 = 0, $231$hi = 0, $262_1 = 0, $262$hi = 0, $271_1 = 0, $271$hi = 0, $272$hi = 0, $276_1 = 0, $276$hi = 0, $279_1 = 0, $279$hi = 0, $280$hi = 0, $288_1 = 0, $288$hi = 0, $289_1 = 0, $289$hi = 0, $334$hi = 0, $133_1 = 0, $336_1 = 0, $336$hi = 0, $351$hi = 0, $134_1 = 0, $353_1 = 0, $353$hi = 0, $465_1 = 0, $490_1 = 0, $490$hi = 0, $495_1 = 0, $495$hi = 0, $502_1 = 0, $502$hi = 0, $505_1 = 0, $505$hi = 0, $510_1 = 0, $510$hi = 0, $513_1 = 0, $513$hi = 0;
  $3_1 = global$0 - 128 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!(HEAP32[($2_1 + 4 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
     break label$2
    }
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $51_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1;
    HEAP32[i64toi32_i32$0 >> 2] = $51_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $56_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $56_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   HEAP32[($0_1 + 100 | 0) >> 2] = (HEAP32[($0_1 + 100 | 0) >> 2] | 0) + -1 | 0;
   $4_1 = 0;
   HEAP32[($3_1 + 124 | 0) >> 2] = 0;
   HEAP32[($3_1 + 120 | 0) >> 2] = 0;
   $2_1 = $163($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 + 124 | 0 | 0, $3_1 + 120 | 0 | 0) | 0;
   $5_1 = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
   label$3 : {
    label$4 : {
     if (!$2_1) {
      break label$4
     }
     $6_1 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
     $7_1 = HEAP32[($6_1 + 96 | 0) >> 2] | 0;
     $8_1 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
     $9_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
     $10_1 = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
     $11_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     $12_1 = HEAP32[($6_1 + 88 | 0) >> 2] | 0;
     $13_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
     HEAP32[($3_1 + 80 | 0) >> 2] = 0;
     i64toi32_i32$1 = $8_1 - $7_1 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $14_1 = i64toi32_i32$1;
     $14$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $10_1 - $9_1 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $15_1 = i64toi32_i32$1;
     $15$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$0;
     $2_1 = $13_1 - $12_1 | 0;
     i64toi32_i32$1 = 0 - $2_1 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $17_1 = i64toi32_i32$1;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = $2_1 >> 31 | 0;
     $115$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = $115$hi;
     i64toi32_i32$1 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $116_1 = i64toi32_i32$1;
     $116$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$1 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $119_1 = i64toi32_i32$1;
     $119$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $116$hi;
     i64toi32_i32$2 = $116_1;
     i64toi32_i32$1 = $119$hi;
     i64toi32_i32$3 = $119_1;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $123_1 = i64toi32_i32$2;
     $123$hi = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $123$hi;
     i64toi32_i32$3 = $123_1;
     i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     label$5 : {
      if (!$11_1) {
       break label$5
      }
      $4_1 = 0;
      $2_1 = $11_1;
      label$6 : while (1) {
       label$7 : {
        $1_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        $20_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
        i64toi32_i32$0 = $20_1 - $9_1 | 0;
        i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
        $14_1 = i64toi32_i32$0;
        $14$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $17$hi;
        i64toi32_i32$4 = $14$hi;
        i64toi32_i32$0 = $17$hi;
        i64toi32_i32$0 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$4 | 0, $17_1 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $139_1 = i64toi32_i32$0;
        $139$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $15$hi;
        $21_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
        i64toi32_i32$0 = $21_1 - $12_1 | 0;
        i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
        $22_1 = i64toi32_i32$0;
        $22$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $15$hi;
        i64toi32_i32$0 = $22$hi;
        i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $148_1 = i64toi32_i32$0;
        $148$hi = i64toi32_i32$4;
        i64toi32_i32$4 = 0;
        i64toi32_i32$5 = 0;
        i64toi32_i32$0 = $148$hi;
        i64toi32_i32$3 = $148_1;
        i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
        $149$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $139$hi;
        i64toi32_i32$4 = $139_1;
        i64toi32_i32$5 = $149$hi;
        i64toi32_i32$3 = i64toi32_i32$2;
        if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0) {
         break label$7
        }
        i64toi32_i32$4 = $16$hi;
        i64toi32_i32$4 = $14$hi;
        i64toi32_i32$4 = $16$hi;
        i64toi32_i32$1 = $14$hi;
        i64toi32_i32$1 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $153_1 = i64toi32_i32$1;
        $153$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $22$hi;
        i64toi32_i32$4 = $19$hi;
        i64toi32_i32$4 = $22$hi;
        i64toi32_i32$1 = $19$hi;
        i64toi32_i32$1 = __wasm_i64_mul($22_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $156_1 = i64toi32_i32$1;
        $156$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $153$hi;
        i64toi32_i32$3 = $153_1;
        i64toi32_i32$1 = $156$hi;
        i64toi32_i32$5 = $156_1;
        i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
        i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $157$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $18$hi;
        $1_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
        i64toi32_i32$3 = $1_1 - $7_1 | 0;
        i64toi32_i32$2 = i64toi32_i32$3 >> 31 | 0;
        $165_1 = i64toi32_i32$3;
        $165$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $18$hi;
        i64toi32_i32$3 = $165$hi;
        i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$2 | 0, $165_1 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $166_1 = i64toi32_i32$3;
        $166$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $157$hi;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$3 = $166$hi;
        i64toi32_i32$5 = $166_1;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$4 = 0;
        i64toi32_i32$5 = 1;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
         $117_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$5 >>> 0) {
           $118_1 = 0
          } else {
           $118_1 = 1
          }
          $120_1 = $118_1;
         } else {
          $120_1 = 0
         }
         $117_1 = $120_1;
        }
        if ($117_1) {
         break label$7
        }
        label$8 : {
         if (!$4_1) {
          break label$8
         }
         $23_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         label$9 : {
          if ((HEAP32[$4_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
           break label$9
          }
          if (($23_1 | 0) != ($2_1 | 0)) {
           break label$7
          }
          $23_1 = HEAP32[((HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
          $24_1 = HEAP32[($23_1 + 96 | 0) >> 2] | 0;
          $25_1 = $1_1 - $24_1 | 0;
          $1_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
          $26_1 = HEAP32[($23_1 + 92 | 0) >> 2] | 0;
          $24_1 = (HEAP32[($1_1 + 96 | 0) >> 2] | 0) - $24_1 | 0;
          i64toi32_i32$0 = Math_imul($25_1, (HEAP32[($1_1 + 92 | 0) >> 2] | 0) - $26_1 | 0) - Math_imul($24_1, $20_1 - $26_1 | 0) | 0;
          i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
          $212$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $15$hi;
          i64toi32_i32$2 = $212$hi;
          $131_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $15$hi;
          i64toi32_i32$0 = __wasm_i64_mul($131_1 | 0, i64toi32_i32$2 | 0, $15_1 | 0, i64toi32_i32$0 | 0) | 0;
          i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
          $214_1 = i64toi32_i32$0;
          $214$hi = i64toi32_i32$2;
          $20_1 = HEAP32[($23_1 + 88 | 0) >> 2] | 0;
          i64toi32_i32$0 = Math_imul($24_1, $21_1 - $20_1 | 0) - Math_imul($25_1, (HEAP32[($1_1 + 88 | 0) >> 2] | 0) - $20_1 | 0) | 0;
          i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
          $229$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $17$hi;
          i64toi32_i32$2 = $229$hi;
          $132_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $17$hi;
          i64toi32_i32$0 = __wasm_i64_mul($132_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$0 | 0) | 0;
          i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
          $231_1 = i64toi32_i32$0;
          $231$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $214$hi;
          i64toi32_i32$5 = $214_1;
          i64toi32_i32$0 = $231$hi;
          i64toi32_i32$4 = $231_1;
          i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
          i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
          if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          i64toi32_i32$2 = i64toi32_i32$3;
          i64toi32_i32$5 = 0;
          i64toi32_i32$4 = 0;
          if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
           $121_1 = 1
          } else {
           if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
            if (i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0) {
             $122_1 = 0
            } else {
             $122_1 = 1
            }
            $124_1 = $122_1;
           } else {
            $124_1 = 0
           }
           $121_1 = $124_1;
          }
          if ($121_1) {
           break label$8
          }
          break label$7;
         }
         if (($23_1 | 0) != ($2_1 | 0)) {
          break label$7
         }
        }
        $4_1 = $2_1;
       }
       $2_1 = HEAP32[$2_1 >> 2] | 0;
       if (($2_1 | 0) != ($11_1 | 0)) {
        continue label$6
       }
       break label$6;
      };
      HEAP32[($3_1 + 80 | 0) >> 2] = $4_1;
     }
     $11_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     $20_1 = 0;
     HEAP32[($3_1 + 56 | 0) >> 2] = 0;
     label$10 : {
      if (!$11_1) {
       break label$10
      }
      $20_1 = 0;
      $2_1 = $11_1;
      label$11 : while (1) {
       label$12 : {
        $1_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        $9_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
        i64toi32_i32$1 = $9_1 - $10_1 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
        $14_1 = i64toi32_i32$1;
        $14$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $17$hi;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$1 = $17$hi;
        i64toi32_i32$1 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $262_1 = i64toi32_i32$1;
        $262$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $15$hi;
        $12_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
        i64toi32_i32$1 = $12_1 - $13_1 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
        $22_1 = i64toi32_i32$1;
        $22$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $15$hi;
        i64toi32_i32$1 = $22$hi;
        i64toi32_i32$1 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $22_1 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $271_1 = i64toi32_i32$1;
        $271$hi = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$4 = 0;
        i64toi32_i32$1 = $271$hi;
        i64toi32_i32$5 = $271_1;
        i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
        i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
        $272$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $262$hi;
        i64toi32_i32$2 = $262_1;
        i64toi32_i32$4 = $272$hi;
        i64toi32_i32$5 = i64toi32_i32$0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | 0) {
         break label$12
        }
        i64toi32_i32$2 = $16$hi;
        i64toi32_i32$2 = $14$hi;
        i64toi32_i32$2 = $16$hi;
        i64toi32_i32$3 = $14$hi;
        i64toi32_i32$3 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $276_1 = i64toi32_i32$3;
        $276$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $22$hi;
        i64toi32_i32$2 = $19$hi;
        i64toi32_i32$2 = $22$hi;
        i64toi32_i32$3 = $19$hi;
        i64toi32_i32$3 = __wasm_i64_mul($22_1 | 0, i64toi32_i32$2 | 0, $19_1 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $279_1 = i64toi32_i32$3;
        $279$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $276$hi;
        i64toi32_i32$5 = $276_1;
        i64toi32_i32$3 = $279$hi;
        i64toi32_i32$4 = $279_1;
        i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $280$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $18$hi;
        $1_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
        i64toi32_i32$5 = $1_1 - $8_1 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
        $288_1 = i64toi32_i32$5;
        $288$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $18$hi;
        i64toi32_i32$5 = $288$hi;
        i64toi32_i32$5 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$0 | 0, $288_1 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
        $289_1 = i64toi32_i32$5;
        $289$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $280$hi;
        i64toi32_i32$2 = i64toi32_i32$1;
        i64toi32_i32$5 = $289$hi;
        i64toi32_i32$4 = $289_1;
        i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        i64toi32_i32$0 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$4 = 1;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $125_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$4 >>> 0) {
           $126_1 = 0
          } else {
           $126_1 = 1
          }
          $127_1 = $126_1;
         } else {
          $127_1 = 0
         }
         $125_1 = $127_1;
        }
        if ($125_1) {
         break label$12
        }
        label$13 : {
         if (!$20_1) {
          break label$13
         }
         if ((HEAP32[$20_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
          break label$12
         }
         if ((HEAP32[($20_1 + 4 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
          break label$13
         }
         $21_1 = HEAP32[((HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
         $7_1 = HEAP32[($21_1 + 96 | 0) >> 2] | 0;
         $23_1 = $1_1 - $7_1 | 0;
         $1_1 = HEAP32[($20_1 + 12 | 0) >> 2] | 0;
         $24_1 = HEAP32[($21_1 + 92 | 0) >> 2] | 0;
         $7_1 = (HEAP32[($1_1 + 96 | 0) >> 2] | 0) - $7_1 | 0;
         i64toi32_i32$1 = Math_imul($23_1, (HEAP32[($1_1 + 92 | 0) >> 2] | 0) - $24_1 | 0) - Math_imul($7_1, $9_1 - $24_1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
         $334$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $15$hi;
         i64toi32_i32$0 = $334$hi;
         $133_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $15$hi;
         i64toi32_i32$1 = __wasm_i64_mul($133_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $336_1 = i64toi32_i32$1;
         $336$hi = i64toi32_i32$0;
         $9_1 = HEAP32[($21_1 + 88 | 0) >> 2] | 0;
         i64toi32_i32$1 = Math_imul($7_1, $12_1 - $9_1 | 0) - Math_imul($23_1, (HEAP32[($1_1 + 88 | 0) >> 2] | 0) - $9_1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
         $351$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $17$hi;
         i64toi32_i32$0 = $351$hi;
         $134_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $17$hi;
         i64toi32_i32$1 = __wasm_i64_mul($134_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $353_1 = i64toi32_i32$1;
         $353$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $336$hi;
         i64toi32_i32$4 = $336_1;
         i64toi32_i32$1 = $353$hi;
         i64toi32_i32$2 = $353_1;
         i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
         i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
         if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
         }
         i64toi32_i32$0 = i64toi32_i32$5;
         i64toi32_i32$4 = 0;
         i64toi32_i32$2 = 1;
         if ((i64toi32_i32$3 | 0) < (i64toi32_i32$4 | 0)) {
          $128_1 = 1
         } else {
          if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$4 | 0)) {
           if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
            $129_1 = 0
           } else {
            $129_1 = 1
           }
           $130_1 = $129_1;
          } else {
           $130_1 = 0
          }
          $128_1 = $130_1;
         }
         if ($128_1) {
          break label$12
         }
        }
        $20_1 = $2_1;
       }
       $2_1 = HEAP32[$2_1 >> 2] | 0;
       if (($2_1 | 0) != ($11_1 | 0)) {
        continue label$11
       }
       break label$11;
      };
      HEAP32[($3_1 + 56 | 0) >> 2] = $20_1;
     }
     label$14 : {
      if (!($4_1 | $20_1 | 0)) {
       break label$14
      }
      $166($0_1 | 0, $6_1 | 0, $5_1 | 0, $3_1 + 80 | 0 | 0, $3_1 + 56 | 0 | 0, 0 | 0, 0 | 0);
      label$15 : {
       $2_1 = HEAP32[($3_1 + 80 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$15
       }
       $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       HEAP32[($3_1 + 124 | 0) >> 2] = $6_1;
      }
      $2_1 = HEAP32[($3_1 + 56 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$14
      }
      $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      HEAP32[($3_1 + 120 | 0) >> 2] = $5_1;
     }
     $27_1 = (HEAP32[($5_1 + 96 | 0) >> 2] | 0) + 1 | 0;
     $28_1 = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
     $29_1 = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
     break label$3;
    }
    $29_1 = (HEAP32[($5_1 + 88 | 0) >> 2] | 0) + 1 | 0;
    $27_1 = HEAP32[($5_1 + 96 | 0) >> 2] | 0;
    $28_1 = HEAP32[($5_1 + 92 | 0) >> 2] | 0;
    $6_1 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
   }
   $20_1 = $6_1;
   $10_1 = $5_1;
   $23_1 = 0;
   $30_1 = 0;
   $21_1 = 0;
   $31_1 = 0;
   $32_1 = 1;
   $25_1 = 0;
   $33_1 = 0;
   $7_1 = 0;
   $34_1 = 0;
   label$16 : while (1) {
    HEAP32[($3_1 + 116 | 0) >> 2] = -1;
    $35_1 = $10_1 + 92 | 0;
    $36_1 = $20_1 + 92 | 0;
    $4_1 = HEAP32[$36_1 >> 2] | 0;
    $2_1 = (HEAP32[$35_1 >> 2] | 0) - $4_1 | 0;
    HEAP32[($3_1 + 108 | 0) >> 2] = $2_1;
    $37_1 = $10_1 + 96 | 0;
    $38_1 = $20_1 + 96 | 0;
    $9_1 = HEAP32[$38_1 >> 2] | 0;
    $1_1 = (HEAP32[$37_1 >> 2] | 0) - $9_1 | 0;
    HEAP32[($3_1 + 112 | 0) >> 2] = $1_1;
    $12_1 = HEAP32[($20_1 + 88 | 0) >> 2] | 0;
    $11_1 = (HEAP32[($10_1 + 88 | 0) >> 2] | 0) - $12_1 | 0;
    HEAP32[($3_1 + 104 | 0) >> 2] = $11_1;
    $4_1 = $28_1 - $4_1 | 0;
    $9_1 = $27_1 - $9_1 | 0;
    i64toi32_i32$3 = Math_imul($4_1, $1_1) - Math_imul($9_1, $2_1) | 0;
    i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
    $15_1 = i64toi32_i32$3;
    $15$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $3_1;
    HEAP32[(i64toi32_i32$3 + 80 | 0) >> 2] = $15_1;
    HEAP32[(i64toi32_i32$3 + 84 | 0) >> 2] = i64toi32_i32$0;
    $465_1 = Math_imul($9_1, $11_1);
    $9_1 = $29_1 - $12_1 | 0;
    i64toi32_i32$3 = $465_1 - Math_imul($9_1, $1_1) | 0;
    i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
    $17_1 = i64toi32_i32$3;
    $17$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $3_1;
    HEAP32[(i64toi32_i32$3 + 88 | 0) >> 2] = $17_1;
    HEAP32[(i64toi32_i32$3 + 92 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$3 = Math_imul($9_1, $2_1) - Math_imul($4_1, $11_1) | 0;
    i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
    $14_1 = i64toi32_i32$3;
    $14$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $3_1;
    HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] = $14_1;
    HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
    $22_1 = i64toi32_i32$3;
    $22$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $490_1 = i64toi32_i32$3;
    $490$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $15$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$0 = $2_1 >> 31 | 0;
    $16_1 = $2_1;
    $16$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $15$hi;
    i64toi32_i32$3 = $16$hi;
    i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $495_1 = i64toi32_i32$3;
    $495$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $490$hi;
    i64toi32_i32$2 = $490_1;
    i64toi32_i32$3 = $495$hi;
    i64toi32_i32$4 = $495_1;
    i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$2 = $3_1;
    HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$2 + 76 | 0) >> 2] = i64toi32_i32$5;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$5 = $1_1 >> 31 | 0;
    $18_1 = $1_1;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$2 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $502_1 = i64toi32_i32$2;
    $502$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$5 = $22$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$2 = $22$hi;
    i64toi32_i32$2 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$5 | 0, $11_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $505_1 = i64toi32_i32$2;
    $505$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $502$hi;
    i64toi32_i32$0 = $502_1;
    i64toi32_i32$2 = $505$hi;
    i64toi32_i32$4 = $505_1;
    i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    i64toi32_i32$0 = $3_1;
    HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = i64toi32_i32$3;
    HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$0 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $510_1 = i64toi32_i32$0;
    $510$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$0 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $513_1 = i64toi32_i32$0;
    $513$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $510$hi;
    i64toi32_i32$5 = $510_1;
    i64toi32_i32$0 = $513$hi;
    i64toi32_i32$4 = $513_1;
    i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    i64toi32_i32$5 = $3_1;
    HEAP32[(i64toi32_i32$5 + 56 | 0) >> 2] = i64toi32_i32$2;
    HEAP32[(i64toi32_i32$5 + 60 | 0) >> 2] = i64toi32_i32$3;
    HEAP32[((i64toi32_i32$5 + 32 | 0) + 16 | 0) >> 2] = 0;
    i64toi32_i32$5 = (i64toi32_i32$5 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = 0;
    HEAP32[i64toi32_i32$5 >> 2] = 0;
    HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$3 = 0;
    HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] = i64toi32_i32$3;
    $13_1 = $167($0_1 | 0, 0 | 0, $20_1 | 0, i64toi32_i32$5 + 104 | 0 | 0, i64toi32_i32$5 + 80 | 0 | 0, i64toi32_i32$5 + 56 | 0 | 0, i64toi32_i32$5 + 32 | 0 | 0) | 0;
    HEAP32[((i64toi32_i32$5 + 8 | 0) + 16 | 0) >> 2] = 0;
    i64toi32_i32$5 = (i64toi32_i32$5 + 8 | 0) + 8 | 0;
    i64toi32_i32$3 = 0;
    HEAP32[i64toi32_i32$5 >> 2] = 0;
    HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
    i64toi32_i32$5 = $3_1;
    i64toi32_i32$3 = 0;
    HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$3;
    label$17 : {
     label$18 : {
      $12_1 = $167($0_1 | 0, 1 | 0, $10_1 | 0, i64toi32_i32$5 + 104 | 0 | 0, i64toi32_i32$5 + 80 | 0 | 0, i64toi32_i32$5 + 56 | 0 | 0, i64toi32_i32$5 + 8 | 0 | 0) | 0;
      if ($13_1 | $12_1 | 0) {
       break label$18
      }
      $2_1 = $162($0_1 | 0, $20_1 | 0, $10_1 | 0) | 0;
      HEAP32[($20_1 + 8 | 0) >> 2] = $2_1;
      $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      HEAP32[($10_1 + 8 | 0) >> 2] = $1_1;
      HEAP32[($2_1 + 4 | 0) >> 2] = $2_1;
      HEAP32[$2_1 >> 2] = $2_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $1_1;
      HEAP32[$1_1 >> 2] = $1_1;
      $2_1 = 0;
      break label$17;
     }
     $8_1 = $13_1 ? -1 : 1;
     label$19 : {
      if (!$13_1) {
       break label$19
      }
      if (!$12_1) {
       break label$19
      }
      $8_1 = $158($3_1 + 32 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
     }
     label$20 : {
      label$21 : {
       if ($32_1 & 1 | 0) {
        break label$21
       }
       label$22 : {
        label$23 : {
         if (($8_1 | 0) < (0 | 0)) {
          break label$23
         }
         if ((HEAP32[($3_1 + 24 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
          break label$21
         }
         i64toi32_i32$1 = $3_1;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
         if (!(i64toi32_i32$3 | i64toi32_i32$5 | 0)) {
          break label$22
         }
         break label$21;
        }
        if ((HEAP32[($3_1 + 48 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
         break label$21
        }
        i64toi32_i32$1 = $3_1;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0;
        if (!!(i64toi32_i32$5 | i64toi32_i32$3 | 0)) {
         break label$21
        }
       }
       $39_1 = $23_1;
       $40_1 = $30_1;
       $24_1 = $25_1;
       $26_1 = $33_1;
       break label$20;
      }
      $24_1 = $162($0_1 | 0, $20_1 | 0, $10_1 | 0) | 0;
      $26_1 = $24_1;
      label$24 : {
       if (!$25_1) {
        break label$24
       }
       HEAP32[($25_1 + 4 | 0) >> 2] = $24_1;
       $26_1 = $33_1;
      }
      HEAP32[$24_1 >> 2] = $25_1;
      $39_1 = HEAP32[($24_1 + 8 | 0) >> 2] | 0;
      $40_1 = $39_1;
      label$25 : {
       if (!$23_1) {
        break label$25
       }
       HEAP32[$23_1 >> 2] = $39_1;
       $40_1 = $30_1;
      }
      HEAP32[($39_1 + 4 | 0) >> 2] = $23_1;
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = $13_1;
     HEAP32[$3_1 >> 2] = $12_1;
     $23_1 = $12_1;
     label$26 : {
      if ($8_1) {
       break label$26
      }
      $166($0_1 | 0, $20_1 | 0, $10_1 | 0, $3_1 + 4 | 0 | 0, $3_1 | 0, 0 | 0, 0 | 0);
      $23_1 = HEAP32[$3_1 >> 2] | 0;
     }
     label$27 : {
      label$28 : {
       if (($8_1 | 0) < (0 | 0)) {
        break label$28
       }
       if (!$23_1) {
        break label$28
       }
       label$29 : {
        if (!$31_1) {
         break label$29
        }
        $2_1 = HEAP32[$31_1 >> 2] | 0;
        if (($2_1 | 0) == ($12_1 | 0)) {
         break label$29
        }
        label$30 : while (1) {
         $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         $9_1 = 0;
         $4_1 = 0;
         label$31 : {
          $11_1 = HEAP32[$2_1 >> 2] | 0;
          if (($11_1 | 0) == ($2_1 | 0)) {
           break label$31
          }
          HEAP32[($11_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
          HEAP32[(HEAP32[($2_1 + 4 | 0) >> 2] | 0) >> 2] = $11_1;
          $4_1 = $11_1;
         }
         HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = $4_1;
         label$32 : {
          $4_1 = HEAP32[$1_1 >> 2] | 0;
          if (($4_1 | 0) == ($1_1 | 0)) {
           break label$32
          }
          HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          HEAP32[(HEAP32[($1_1 + 4 | 0) >> 2] | 0) >> 2] = $4_1;
          $9_1 = $4_1;
         }
         HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = $9_1;
         i64toi32_i32$5 = $2_1;
         i64toi32_i32$3 = 0;
         HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = 0;
         HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] = i64toi32_i32$3;
         i64toi32_i32$3 = 0;
         HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = 0;
         HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = i64toi32_i32$3;
         HEAP32[i64toi32_i32$5 >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
         HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$5;
         i64toi32_i32$5 = $1_1 + 12 | 0;
         i64toi32_i32$3 = 0;
         HEAP32[i64toi32_i32$5 >> 2] = 0;
         HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
         i64toi32_i32$5 = $1_1;
         i64toi32_i32$3 = 0;
         HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = 0;
         HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = i64toi32_i32$3;
         HEAP32[i64toi32_i32$5 >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
         HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$5;
         HEAP32[($0_1 + 116 | 0) >> 2] = (HEAP32[($0_1 + 116 | 0) >> 2] | 0) + -1 | 0;
         $2_1 = $11_1;
         if (($2_1 | 0) != ($12_1 | 0)) {
          continue label$30
         }
         break label$30;
        };
       }
       label$33 : {
        label$34 : {
         if (!$39_1) {
          break label$34
         }
         label$35 : {
          if ($31_1) {
           break label$35
          }
          $31_1 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
          $21_1 = $40_1;
         }
         HEAP32[$31_1 >> 2] = $40_1;
         HEAP32[($40_1 + 4 | 0) >> 2] = $31_1;
         HEAP32[($12_1 + 4 | 0) >> 2] = $39_1;
         HEAP32[$39_1 >> 2] = $12_1;
         $40_1 = 0;
         break label$33;
        }
        $21_1 = $31_1 ? $21_1 : $12_1;
       }
       $33_1 = HEAP32[($23_1 + 12 | 0) >> 2] | 0;
       HEAP32[($3_1 + 120 | 0) >> 2] = $33_1;
       $27_1 = HEAP32[$37_1 >> 2] | 0;
       $28_1 = HEAP32[$35_1 >> 2] | 0;
       $31_1 = HEAP32[($23_1 + 8 | 0) >> 2] | 0;
       $29_1 = HEAP32[($10_1 + 88 | 0) >> 2] | 0;
       $23_1 = 0;
       break label$27;
      }
      $33_1 = $10_1;
      $23_1 = $39_1;
     }
     label$36 : {
      label$37 : {
       if (($8_1 | 0) > (0 | 0)) {
        break label$37
       }
       $8_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       if (!$8_1) {
        break label$37
       }
       label$38 : {
        if (!$34_1) {
         break label$38
        }
        $1_1 = HEAP32[($34_1 + 4 | 0) >> 2] | 0;
        if (($1_1 | 0) == ($13_1 | 0)) {
         break label$38
        }
        label$39 : while (1) {
         $11_1 = $1_1 + 4 | 0;
         $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
         $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
         $10_1 = 0;
         $12_1 = 0;
         label$40 : {
          $9_1 = HEAP32[$1_1 >> 2] | 0;
          if (($9_1 | 0) == ($1_1 | 0)) {
           break label$40
          }
          HEAP32[($9_1 + 4 | 0) >> 2] = $4_1;
          HEAP32[(HEAP32[$11_1 >> 2] | 0) >> 2] = $9_1;
          $12_1 = $9_1;
         }
         HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = $12_1;
         label$41 : {
          $9_1 = HEAP32[$2_1 >> 2] | 0;
          if (($9_1 | 0) == ($2_1 | 0)) {
           break label$41
          }
          HEAP32[($9_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
          HEAP32[(HEAP32[($2_1 + 4 | 0) >> 2] | 0) >> 2] = $9_1;
          $10_1 = $9_1;
         }
         HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = $10_1;
         i64toi32_i32$5 = $11_1 + 8 | 0;
         i64toi32_i32$3 = 0;
         HEAP32[i64toi32_i32$5 >> 2] = 0;
         HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
         i64toi32_i32$5 = $11_1;
         i64toi32_i32$3 = 0;
         HEAP32[i64toi32_i32$5 >> 2] = 0;
         HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
         HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
         HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
         i64toi32_i32$5 = $2_1 + 12 | 0;
         i64toi32_i32$3 = 0;
         HEAP32[i64toi32_i32$5 >> 2] = 0;
         HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
         i64toi32_i32$5 = $2_1;
         i64toi32_i32$3 = 0;
         HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = 0;
         HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = i64toi32_i32$3;
         HEAP32[i64toi32_i32$5 >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
         HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$5;
         HEAP32[($0_1 + 116 | 0) >> 2] = (HEAP32[($0_1 + 116 | 0) >> 2] | 0) + -1 | 0;
         $1_1 = $4_1;
         if (($1_1 | 0) != ($13_1 | 0)) {
          continue label$39
         }
         break label$39;
        };
       }
       label$42 : {
        label$43 : {
         if (!$24_1) {
          break label$43
         }
         label$44 : {
          if ($34_1) {
           break label$44
          }
          $34_1 = HEAP32[$13_1 >> 2] | 0;
          $7_1 = $26_1;
         }
         HEAP32[($34_1 + 4 | 0) >> 2] = $26_1;
         HEAP32[$26_1 >> 2] = $34_1;
         HEAP32[($24_1 + 4 | 0) >> 2] = $13_1;
         HEAP32[$13_1 >> 2] = $24_1;
         $26_1 = 0;
         break label$42;
        }
        $7_1 = $34_1 ? $7_1 : $13_1;
       }
       $1_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
       HEAP32[($3_1 + 124 | 0) >> 2] = $1_1;
       $27_1 = HEAP32[$38_1 >> 2] | 0;
       $28_1 = HEAP32[$36_1 >> 2] | 0;
       $34_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
       $29_1 = HEAP32[($20_1 + 88 | 0) >> 2] | 0;
       $25_1 = 0;
       break label$36;
      }
      $1_1 = $20_1;
      $25_1 = $24_1;
     }
     $2_1 = 1;
     label$45 : {
      label$46 : {
       if (($1_1 | 0) != ($6_1 | 0)) {
        break label$46
       }
       if (($33_1 | 0) != ($5_1 | 0)) {
        break label$46
       }
       label$47 : {
        label$48 : {
         if ($34_1) {
          break label$48
         }
         HEAP32[($25_1 + 4 | 0) >> 2] = $26_1;
         HEAP32[$26_1 >> 2] = $25_1;
         HEAP32[($1_1 + 8 | 0) >> 2] = $25_1;
         break label$47;
        }
        label$49 : {
         $1_1 = HEAP32[($34_1 + 4 | 0) >> 2] | 0;
         if (($1_1 | 0) == ($7_1 | 0)) {
          break label$49
         }
         label$50 : while (1) {
          $11_1 = $1_1 + 4 | 0;
          $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
          $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          $10_1 = 0;
          $12_1 = 0;
          label$51 : {
           $9_1 = HEAP32[$1_1 >> 2] | 0;
           if (($9_1 | 0) == ($1_1 | 0)) {
            break label$51
           }
           HEAP32[($9_1 + 4 | 0) >> 2] = $4_1;
           HEAP32[(HEAP32[$11_1 >> 2] | 0) >> 2] = $9_1;
           $12_1 = $9_1;
          }
          HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = $12_1;
          label$52 : {
           $9_1 = HEAP32[$2_1 >> 2] | 0;
           if (($9_1 | 0) == ($2_1 | 0)) {
            break label$52
           }
           HEAP32[($9_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
           HEAP32[(HEAP32[($2_1 + 4 | 0) >> 2] | 0) >> 2] = $9_1;
           $10_1 = $9_1;
          }
          HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = $10_1;
          i64toi32_i32$5 = $11_1 + 8 | 0;
          i64toi32_i32$3 = 0;
          HEAP32[i64toi32_i32$5 >> 2] = 0;
          HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
          i64toi32_i32$5 = $11_1;
          i64toi32_i32$3 = 0;
          HEAP32[i64toi32_i32$5 >> 2] = 0;
          HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
          HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
          HEAP32[($0_1 + 56 | 0) >> 2] = $1_1;
          i64toi32_i32$5 = $2_1 + 12 | 0;
          i64toi32_i32$3 = 0;
          HEAP32[i64toi32_i32$5 >> 2] = 0;
          HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
          i64toi32_i32$5 = $2_1;
          i64toi32_i32$3 = 0;
          HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = 0;
          HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = i64toi32_i32$3;
          HEAP32[i64toi32_i32$5 >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
          HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$5;
          HEAP32[($0_1 + 116 | 0) >> 2] = (HEAP32[($0_1 + 116 | 0) >> 2] | 0) + -1 | 0;
          $1_1 = $4_1;
          if (($1_1 | 0) != ($7_1 | 0)) {
           continue label$50
          }
          break label$50;
         };
        }
        if (!$25_1) {
         break label$47
        }
        HEAP32[($34_1 + 4 | 0) >> 2] = $26_1;
        HEAP32[$26_1 >> 2] = $34_1;
        HEAP32[($25_1 + 4 | 0) >> 2] = $7_1;
        HEAP32[$7_1 >> 2] = $25_1;
       }
       label$53 : {
        if ($31_1) {
         break label$53
        }
        HEAP32[$23_1 >> 2] = $40_1;
        HEAP32[($40_1 + 4 | 0) >> 2] = $23_1;
        HEAP32[((HEAP32[($3_1 + 120 | 0) >> 2] | 0) + 8 | 0) >> 2] = $23_1;
        $31_1 = 0;
        $30_1 = $40_1;
        $33_1 = $26_1;
        $2_1 = 0;
        break label$17;
       }
       label$54 : {
        $2_1 = HEAP32[$31_1 >> 2] | 0;
        if (($2_1 | 0) == ($21_1 | 0)) {
         break label$54
        }
        label$55 : while (1) {
         $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         $9_1 = 0;
         $4_1 = 0;
         label$56 : {
          $11_1 = HEAP32[$2_1 >> 2] | 0;
          if (($11_1 | 0) == ($2_1 | 0)) {
           break label$56
          }
          HEAP32[($11_1 + 4 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
          HEAP32[(HEAP32[($2_1 + 4 | 0) >> 2] | 0) >> 2] = $11_1;
          $4_1 = $11_1;
         }
         HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = $4_1;
         label$57 : {
          $4_1 = HEAP32[$1_1 >> 2] | 0;
          if (($4_1 | 0) == ($1_1 | 0)) {
           break label$57
          }
          HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          HEAP32[(HEAP32[($1_1 + 4 | 0) >> 2] | 0) >> 2] = $4_1;
          $9_1 = $4_1;
         }
         HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = $9_1;
         i64toi32_i32$5 = $2_1;
         i64toi32_i32$3 = 0;
         HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = 0;
         HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] = i64toi32_i32$3;
         i64toi32_i32$3 = 0;
         HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = 0;
         HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = i64toi32_i32$3;
         HEAP32[i64toi32_i32$5 >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
         HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$5;
         i64toi32_i32$5 = $1_1 + 12 | 0;
         i64toi32_i32$3 = 0;
         HEAP32[i64toi32_i32$5 >> 2] = 0;
         HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$3;
         i64toi32_i32$5 = $1_1;
         i64toi32_i32$3 = 0;
         HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = 0;
         HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = i64toi32_i32$3;
         HEAP32[i64toi32_i32$5 >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
         HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$5;
         HEAP32[($0_1 + 116 | 0) >> 2] = (HEAP32[($0_1 + 116 | 0) >> 2] | 0) + -1 | 0;
         $2_1 = $11_1;
         if (($2_1 | 0) != ($21_1 | 0)) {
          continue label$55
         }
         break label$55;
        };
       }
       $2_1 = 0;
       label$58 : {
        label$59 : {
         if ($23_1) {
          break label$59
         }
         $23_1 = 0;
         break label$58;
        }
        HEAP32[($40_1 + 4 | 0) >> 2] = $31_1;
        HEAP32[$31_1 >> 2] = $40_1;
        HEAP32[($21_1 + 4 | 0) >> 2] = $23_1;
        HEAP32[$23_1 >> 2] = $21_1;
       }
       $30_1 = $40_1;
       break label$45;
      }
      $30_1 = $40_1;
      $32_1 = 0;
     }
     $33_1 = $26_1;
    }
    if (!$2_1) {
     break label$1
    }
    $20_1 = HEAP32[($3_1 + 124 | 0) >> 2] | 0;
    $10_1 = HEAP32[($3_1 + 120 | 0) >> 2] | 0;
    continue label$16;
   };
  }
  global$0 = $3_1 + 128 | 0;
 }
 
 function $166($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $27$hi = 0, $27_1 = 0, $7_1 = 0, $31$hi = 0, i64toi32_i32$6 = 0, $13_1 = 0, $31_1 = 0, $22$hi = 0, $22_1 = 0, $11_1 = 0, $25$hi = 0, $15_1 = 0, $30$hi = 0, $9_1 = 0, $26$hi = 0, $29$hi = 0, $14_1 = 0, $17_1 = 0, $32$hi = 0, $30_1 = 0, $21$hi = 0, $24$hi = 0, $28$hi = 0, $25_1 = 0, $12_1 = 0, $16_1 = 0, $19_1 = 0, $8_1 = 0, $32_1 = 0, $10_1 = 0, $34_1 = 0, $26_1 = 0, $29_1 = 0, $20_1 = 0, $21_1 = 0, $24_1 = 0, $28_1 = 0, $33$hi = 0, $18_1 = 0, $23_1 = 0, $33_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $250_1 = 0, $251_1 = 0, $252_1 = 0, $253_1 = 0, $254_1 = 0, $255_1 = 0, $256_1 = 0, $257_1 = 0, $258_1 = 0, $259_1 = 0, $260_1 = 0, $261_1 = 0, $262_1 = 0, $263_1 = 0, $264_1 = 0, $265_1 = 0, $266_1 = 0, $267_1 = 0, $268_1 = 0, $269_1 = 0, $270_1 = 0, $271_1 = 0, $272_1 = 0, $274_1 = 0, $275_1 = 0, $276_1 = 0, $277_1 = 0, $279_1 = 0, $280_1 = 0, $281_1 = 0, $282_1 = 0, $283_1 = 0, $284_1 = 0, $286_1 = 0, $287_1 = 0, $288_1 = 0, $289_1 = 0, $290_1 = 0, $291_1 = 0, $292_1 = 0, $293_1 = 0, $294_1 = 0, $296_1 = 0, $297_1 = 0, $298_1 = 0, $300_1 = 0, $301_1 = 0, $302_1 = 0, $303_1 = 0, $305_1 = 0, $306_1 = 0, $307_1 = 0, $308_1 = 0, $309_1 = 0, $310_1 = 0, $311_1 = 0, $312_1 = 0, $313_1 = 0, $314_1 = 0, $315_1 = 0, $316_1 = 0, $317_1 = 0, $318_1 = 0, $319_1 = 0, $320_1 = 0, $322_1 = 0, $106_1 = 0, $106$hi = 0, $129_1 = 0, $129$hi = 0, $133$hi = 0, $134_1 = 0, $134$hi = 0, $139_1 = 0, $139$hi = 0, $150_1 = 0, $150$hi = 0, $154$hi = 0, $155_1 = 0, $155$hi = 0, $156_1 = 0, $156$hi = 0, $159_1 = 0, $159$hi = 0, $162_1 = 0, $162$hi = 0, $166$hi = 0, $167_1 = 0, $167$hi = 0, $171$hi = 0, $172_1 = 0, $172$hi = 0, $175$hi = 0, $176_1 = 0, $176$hi = 0, $177$hi = 0, $180$hi = 0, $181_1 = 0, $181$hi = 0, $208_1 = 0, $208$hi = 0, $213_1 = 0, $213$hi = 0, $214$hi = 0, $220_1 = 0, $220$hi = 0, $221$hi = 0, $233_1 = 0, $233$hi = 0, $236_1 = 0, $236$hi = 0, $237$hi = 0, $240_1 = 0, $240$hi = 0, $273_1 = 0, $273$hi = 0, $278_1 = 0, $278$hi = 0, $279$hi = 0, $285_1 = 0, $285$hi = 0, $286$hi = 0, $294$hi = 0, $295_1 = 0, $295$hi = 0, $298$hi = 0, $299_1 = 0, $299$hi = 0, $300$hi = 0, $303$hi = 0, $304_1 = 0, $304$hi = 0, $321_1 = 0, $321$hi = 0, $326_1 = 0, $326$hi = 0, $327$hi = 0, $333_1 = 0, $333$hi = 0, $334$hi = 0, $347_1 = 0, $347$hi = 0, $350_1 = 0, $350$hi = 0, $351$hi = 0, $354_1 = 0, $354$hi = 0, $388_1 = 0, $388$hi = 0, $393_1 = 0, $393$hi = 0, $394$hi = 0, $400_1 = 0, $400$hi = 0, $401$hi = 0, $478$hi = 0, $479_1 = 0, $479$hi = 0, $482$hi = 0, $483_1 = 0, $483$hi = 0, $484$hi = 0, $487$hi = 0, $488_1 = 0, $488$hi = 0, $552_1 = 0, $552$hi = 0, $553_1 = 0, $553$hi = 0, $558_1 = 0, $558$hi = 0, $559_1 = 0, $559$hi = 0, $560$hi = 0, $565_1 = 0, $565$hi = 0, $566_1 = 0, $566$hi = 0, $599_1 = 0, $599$hi = 0, $609_1 = 0, $609$hi = 0, $610_1 = 0, $610$hi = 0, $621_1 = 0, $621$hi = 0, $622$hi = 0, $628_1 = 0, $628$hi = 0, $629_1 = 0, $629$hi = 0, $634_1 = 0, $634$hi = 0, $635_1 = 0, $635$hi = 0, $636$hi = 0, $641_1 = 0, $641$hi = 0, $642_1 = 0, $642$hi = 0, $659_1 = 0, $659$hi = 0, $662_1 = 0, $662$hi = 0, $663$hi = 0, $666_1 = 0, $666$hi = 0, $799$hi = 0, $800_1 = 0, $800$hi = 0, $803$hi = 0, $804_1 = 0, $804$hi = 0, $805$hi = 0, $808$hi = 0, $809_1 = 0, $809$hi = 0, $874_1 = 0, $874$hi = 0, $875_1 = 0, $875$hi = 0, $880_1 = 0, $880$hi = 0, $881_1 = 0, $881$hi = 0, $882$hi = 0, $887_1 = 0, $887$hi = 0, $888_1 = 0, $888$hi = 0, $921_1 = 0, $921$hi = 0, $931_1 = 0, $931$hi = 0, $932_1 = 0, $932$hi = 0, $943_1 = 0, $943$hi = 0, $944$hi = 0, $950_1 = 0, $950$hi = 0, $951_1 = 0, $951$hi = 0, $956_1 = 0, $956$hi = 0, $957_1 = 0, $957$hi = 0, $958$hi = 0, $963_1 = 0, $963$hi = 0, $964_1 = 0, $964$hi = 0, $981_1 = 0, $981$hi = 0, $984_1 = 0, $984$hi = 0, $985$hi = 0, $988_1 = 0, $988$hi = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $8_1 = HEAP32[$4_1 >> 2] | 0;
  $9_1 = $1_1;
  label$1 : {
   $10_1 = HEAP32[$3_1 >> 2] | 0;
   if (!$10_1) {
    break label$1
   }
   $9_1 = HEAP32[($10_1 + 12 | 0) >> 2] | 0;
  }
  $11_1 = HEAP32[($9_1 + 96 | 0) >> 2] | 0;
  $12_1 = HEAP32[($9_1 + 92 | 0) >> 2] | 0;
  $9_1 = HEAP32[($9_1 + 88 | 0) >> 2] | 0;
  $13_1 = $2_1;
  label$2 : {
   if (!$8_1) {
    break label$2
   }
   $13_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  }
  $14_1 = HEAP32[(($10_1 ? $10_1 : $8_1) + 12 | 0) >> 2] | 0;
  $15_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
  $16_1 = (HEAP32[($14_1 + 92 | 0) >> 2] | 0) - $15_1 | 0;
  $17_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
  $18_1 = (HEAP32[($2_1 + 96 | 0) >> 2] | 0) - $17_1 | 0;
  $19_1 = (HEAP32[($14_1 + 96 | 0) >> 2] | 0) - $17_1 | 0;
  $20_1 = (HEAP32[($2_1 + 92 | 0) >> 2] | 0) - $15_1 | 0;
  i64toi32_i32$1 = Math_imul($16_1, $18_1) - Math_imul($19_1, $20_1) | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $18_1;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $22_1 = i64toi32_i32$1;
  $22$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $22$hi;
  i64toi32_i32$1 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$0 | 0, $22_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $106_1 = i64toi32_i32$1;
  $106$hi = i64toi32_i32$0;
  $1_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
  $14_1 = (HEAP32[($14_1 + 88 | 0) >> 2] | 0) - $1_1 | 0;
  $23_1 = (HEAP32[($2_1 + 88 | 0) >> 2] | 0) - $1_1 | 0;
  i64toi32_i32$1 = Math_imul($14_1, $20_1) - Math_imul($16_1, $23_1) | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $24_1 = i64toi32_i32$1;
  $24$hi = i64toi32_i32$0;
  i64toi32_i32$1 = $23_1;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $25_1 = i64toi32_i32$1;
  $25$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $24$hi;
  i64toi32_i32$1 = $25$hi;
  i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$0 | 0, $25_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $129_1 = i64toi32_i32$1;
  $129$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $106$hi;
  i64toi32_i32$2 = $106_1;
  i64toi32_i32$1 = $129$hi;
  i64toi32_i32$3 = $129_1;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
  $26_1 = i64toi32_i32$4;
  $26$hi = i64toi32_i32$5;
  i64toi32_i32$2 = $12_1;
  i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
  $133$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $26$hi;
  i64toi32_i32$2 = $133$hi;
  i64toi32_i32$2 = __wasm_i64_mul(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $134_1 = i64toi32_i32$2;
  $134$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $24$hi;
  i64toi32_i32$2 = $20_1;
  i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
  $27_1 = i64toi32_i32$2;
  $27$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $24$hi;
  i64toi32_i32$2 = $27$hi;
  i64toi32_i32$2 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, $27_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $139_1 = i64toi32_i32$2;
  $139$hi = i64toi32_i32$5;
  i64toi32_i32$2 = Math_imul($19_1, $25_1) - Math_imul($14_1, $22_1) | 0;
  i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
  $28_1 = i64toi32_i32$2;
  $28$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $22$hi;
  i64toi32_i32$5 = $28$hi;
  i64toi32_i32$2 = $22$hi;
  i64toi32_i32$2 = __wasm_i64_mul($28_1 | 0, i64toi32_i32$5 | 0, $22_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $150_1 = i64toi32_i32$2;
  $150$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $139$hi;
  i64toi32_i32$0 = $139_1;
  i64toi32_i32$2 = $150$hi;
  i64toi32_i32$3 = $150_1;
  i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
  $29_1 = i64toi32_i32$1;
  $29$hi = i64toi32_i32$4;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
  $154$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $29$hi;
  i64toi32_i32$0 = $154$hi;
  i64toi32_i32$0 = __wasm_i64_mul(i64toi32_i32$1 | 0, i64toi32_i32$4 | 0, $9_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $155_1 = i64toi32_i32$0;
  $155$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $134$hi;
  i64toi32_i32$5 = $134_1;
  i64toi32_i32$0 = $155$hi;
  i64toi32_i32$3 = $155_1;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $156_1 = i64toi32_i32$2;
  $156$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $28$hi;
  i64toi32_i32$1 = $25$hi;
  i64toi32_i32$1 = $28$hi;
  i64toi32_i32$5 = $25$hi;
  i64toi32_i32$5 = __wasm_i64_mul($28_1 | 0, i64toi32_i32$1 | 0, $25_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $159_1 = i64toi32_i32$5;
  $159$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$1 = $27$hi;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$5 = $27$hi;
  i64toi32_i32$5 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$1 | 0, $27_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $162_1 = i64toi32_i32$5;
  $162$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $159$hi;
  i64toi32_i32$4 = $159_1;
  i64toi32_i32$5 = $162$hi;
  i64toi32_i32$3 = $162_1;
  i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
  $25_1 = i64toi32_i32$0;
  $25$hi = i64toi32_i32$2;
  i64toi32_i32$4 = $11_1;
  i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
  $166$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $25$hi;
  i64toi32_i32$4 = $166$hi;
  i64toi32_i32$4 = __wasm_i64_mul(i64toi32_i32$0 | 0, i64toi32_i32$2 | 0, $11_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $167_1 = i64toi32_i32$4;
  $167$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $156$hi;
  i64toi32_i32$1 = $156_1;
  i64toi32_i32$4 = $167$hi;
  i64toi32_i32$3 = $167_1;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $22_1 = i64toi32_i32$5;
  $22$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $171$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $171$hi;
  i64toi32_i32$1 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $172_1 = i64toi32_i32$1;
  $172$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $24$hi;
  i64toi32_i32$1 = $17_1;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $175$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $24$hi;
  i64toi32_i32$1 = $175$hi;
  i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $176_1 = i64toi32_i32$1;
  $176$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $172$hi;
  i64toi32_i32$2 = $172_1;
  i64toi32_i32$1 = $176$hi;
  i64toi32_i32$3 = $176_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $177$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $28$hi;
  i64toi32_i32$2 = $15_1;
  i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
  $180$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $28$hi;
  i64toi32_i32$2 = $180$hi;
  i64toi32_i32$2 = __wasm_i64_mul($28_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $181_1 = i64toi32_i32$2;
  $181$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $177$hi;
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$2 = $181$hi;
  i64toi32_i32$3 = $181_1;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $30_1 = i64toi32_i32$1;
  $30$hi = i64toi32_i32$4;
  $17_1 = HEAP32[($13_1 + 96 | 0) >> 2] | 0;
  $16_1 = HEAP32[($13_1 + 92 | 0) >> 2] | 0;
  $19_1 = HEAP32[($13_1 + 88 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    if ($10_1) {
     break label$4
    }
    $1_1 = $8_1;
    break label$3;
   }
   label$5 : {
    if ((HEAP32[($10_1 + 12 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
     break label$5
    }
    $1_1 = $8_1;
    break label$3;
   }
   label$6 : {
    $1_1 = HEAP32[((HEAP32[($10_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$5 = $2_1 + 92 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
    $27_1 = i64toi32_i32$4;
    $27$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $28$hi;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$4 = $28$hi;
    i64toi32_i32$4 = __wasm_i64_mul($27_1 | 0, i64toi32_i32$0 | 0, $28_1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $208_1 = i64toi32_i32$4;
    $208$hi = i64toi32_i32$0;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 88 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
    $31_1 = i64toi32_i32$0;
    $31$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$4 = $31$hi;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$0 = __wasm_i64_mul($31_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $213_1 = i64toi32_i32$0;
    $213$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $208$hi;
    i64toi32_i32$5 = $208_1;
    i64toi32_i32$0 = $213$hi;
    i64toi32_i32$3 = $213_1;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $214$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $2_1 + 96 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $32_1 = i64toi32_i32$1;
    $32$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $24$hi;
    i64toi32_i32$5 = $32$hi;
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$1 = __wasm_i64_mul($32_1 | 0, i64toi32_i32$5 | 0, $24_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $220_1 = i64toi32_i32$1;
    $220$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $214$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$1 = $220$hi;
    i64toi32_i32$3 = $220_1;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $221$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$2 = $221$hi;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$4 = $30$hi;
    i64toi32_i32$3 = $30_1;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$4 | 0)) {
     $250_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $251_1 = 0
      } else {
       $251_1 = 1
      }
      $252_1 = $251_1;
     } else {
      $252_1 = 0
     }
     $250_1 = $252_1;
    }
    if ($250_1) {
     break label$6
    }
    $13_1 = $1_1 + 12 | 0;
    label$7 : while (1) {
     if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 100 | 0) >> 2] | 0 | 0)) {
      break label$6
     }
     i64toi32_i32$5 = $26$hi;
     i64toi32_i32$5 = $27$hi;
     i64toi32_i32$5 = $26$hi;
     i64toi32_i32$2 = $27$hi;
     i64toi32_i32$2 = __wasm_i64_mul($26_1 | 0, i64toi32_i32$5 | 0, $27_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $233_1 = i64toi32_i32$2;
     $233$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $29$hi;
     i64toi32_i32$5 = $31$hi;
     i64toi32_i32$5 = $29$hi;
     i64toi32_i32$2 = $31$hi;
     i64toi32_i32$2 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$5 | 0, $31_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $236_1 = i64toi32_i32$2;
     $236$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $233$hi;
     i64toi32_i32$3 = $233_1;
     i64toi32_i32$2 = $236$hi;
     i64toi32_i32$4 = $236_1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $237$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $25$hi;
     i64toi32_i32$0 = $32$hi;
     i64toi32_i32$0 = $25$hi;
     i64toi32_i32$3 = $32$hi;
     i64toi32_i32$3 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$0 | 0, $32_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $240_1 = i64toi32_i32$3;
     $240$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $237$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$3 = $240$hi;
     i64toi32_i32$4 = $240_1;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $27_1 = i64toi32_i32$2;
     $27$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$1 = $27$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$4 = $22_1;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
      $253_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0) {
        $254_1 = 0
       } else {
        $254_1 = 1
       }
       $255_1 = $254_1;
      } else {
       $255_1 = 0
      }
      $253_1 = $255_1;
     }
     if ($253_1) {
      break label$6
     }
     HEAP32[$3_1 >> 2] = $1_1;
     $2_1 = HEAP32[$13_1 >> 2] | 0;
     $11_1 = HEAP32[($2_1 + 96 | 0) >> 2] | 0;
     $12_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
     $9_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
     label$8 : {
      if (($2_1 | 0) == ($5_1 | 0)) {
       break label$8
      }
      $1_1 = HEAP32[((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      $13_1 = $1_1 + 12 | 0;
      i64toi32_i32$0 = $27$hi;
      $22_1 = $27_1;
      $22$hi = i64toi32_i32$0;
      $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$4 = $2_1 + 92 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $27_1 = i64toi32_i32$0;
      $27$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $28$hi;
      i64toi32_i32$1 = $27$hi;
      i64toi32_i32$0 = $28$hi;
      i64toi32_i32$0 = __wasm_i64_mul($27_1 | 0, i64toi32_i32$1 | 0, $28_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $273_1 = i64toi32_i32$0;
      $273$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $2_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 88 | 0) >> 2] | 0;
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $31_1 = i64toi32_i32$1;
      $31$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $21$hi;
      i64toi32_i32$0 = $31$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$1 = __wasm_i64_mul($31_1 | 0, i64toi32_i32$0 | 0, $21_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $278_1 = i64toi32_i32$1;
      $278$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $273$hi;
      i64toi32_i32$4 = $273_1;
      i64toi32_i32$1 = $278$hi;
      i64toi32_i32$5 = $278_1;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
      i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
      }
      $279$hi = i64toi32_i32$2;
      i64toi32_i32$0 = $2_1 + 96 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
      $32_1 = i64toi32_i32$2;
      $32$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $24$hi;
      i64toi32_i32$4 = $32$hi;
      i64toi32_i32$2 = $24$hi;
      i64toi32_i32$2 = __wasm_i64_mul($32_1 | 0, i64toi32_i32$4 | 0, $24_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $285_1 = i64toi32_i32$2;
      $285$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $279$hi;
      i64toi32_i32$0 = i64toi32_i32$3;
      i64toi32_i32$2 = $285$hi;
      i64toi32_i32$5 = $285_1;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $286$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $30$hi;
      i64toi32_i32$3 = $286$hi;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$0 = $30$hi;
      i64toi32_i32$5 = $30_1;
      if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
       $256_1 = 1
      } else {
       if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$5 >>> 0) {
         $257_1 = 0
        } else {
         $257_1 = 1
        }
        $258_1 = $257_1;
       } else {
        $258_1 = 0
       }
       $256_1 = $258_1;
      }
      if ($256_1) {
       break label$6
      }
      continue label$7;
     }
     break label$7;
    };
    i64toi32_i32$4 = $27$hi;
    $22_1 = $27_1;
    $22$hi = i64toi32_i32$4;
   }
   $1_1 = HEAP32[$4_1 >> 2] | 0;
  }
  i64toi32_i32$4 = $26$hi;
  i64toi32_i32$3 = $16_1;
  i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
  $294$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $26$hi;
  i64toi32_i32$3 = $294$hi;
  i64toi32_i32$3 = __wasm_i64_mul($26_1 | 0, i64toi32_i32$4 | 0, $16_1 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $295_1 = i64toi32_i32$3;
  $295$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $29$hi;
  i64toi32_i32$3 = $19_1;
  i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
  $298$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $29$hi;
  i64toi32_i32$3 = $298$hi;
  i64toi32_i32$3 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $299_1 = i64toi32_i32$3;
  $299$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $295$hi;
  i64toi32_i32$5 = $295_1;
  i64toi32_i32$3 = $299$hi;
  i64toi32_i32$0 = $299_1;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $300$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $25$hi;
  i64toi32_i32$5 = $17_1;
  i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
  $303$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $25$hi;
  i64toi32_i32$5 = $303$hi;
  i64toi32_i32$5 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $304_1 = i64toi32_i32$5;
  $304$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $300$hi;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$5 = $304$hi;
  i64toi32_i32$0 = $304_1;
  i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $27_1 = i64toi32_i32$3;
  $27$hi = i64toi32_i32$2;
  label$9 : {
   label$10 : {
    if ($1_1) {
     break label$10
    }
    $1_1 = 0;
    break label$9;
   }
   if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) {
    break label$9
   }
   $13_1 = HEAP32[(HEAP32[($1_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
   $2_1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$1 = $2_1 + 92 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
   $31_1 = i64toi32_i32$2;
   $31$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $28$hi;
   i64toi32_i32$4 = $31$hi;
   i64toi32_i32$2 = $28$hi;
   i64toi32_i32$2 = __wasm_i64_mul($31_1 | 0, i64toi32_i32$4 | 0, $28_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
   $321_1 = i64toi32_i32$2;
   $321$hi = i64toi32_i32$4;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
   $32_1 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $21$hi;
   i64toi32_i32$2 = $32$hi;
   i64toi32_i32$4 = $21$hi;
   i64toi32_i32$4 = __wasm_i64_mul($32_1 | 0, i64toi32_i32$2 | 0, $21_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $326_1 = i64toi32_i32$4;
   $326$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $321$hi;
   i64toi32_i32$1 = $321_1;
   i64toi32_i32$4 = $326$hi;
   i64toi32_i32$0 = $326_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $327$hi = i64toi32_i32$3;
   i64toi32_i32$2 = $2_1 + 96 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$3 >> 31 | 0;
   $33_1 = i64toi32_i32$3;
   $33$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$1 = $33$hi;
   i64toi32_i32$3 = $24$hi;
   i64toi32_i32$3 = __wasm_i64_mul($33_1 | 0, i64toi32_i32$1 | 0, $24_1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $333_1 = i64toi32_i32$3;
   $333$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $327$hi;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$3 = $333$hi;
   i64toi32_i32$0 = $333_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $334$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $30$hi;
   i64toi32_i32$5 = $334$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$2 = $30$hi;
   i64toi32_i32$0 = $30_1;
   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$2 | 0)) {
    $259_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
      $260_1 = 0
     } else {
      $260_1 = 1
     }
     $261_1 = $260_1;
    } else {
     $261_1 = 0
    }
    $259_1 = $261_1;
   }
   if ($259_1) {
    break label$9
   }
   $14_1 = $13_1 + 12 | 0;
   label$11 : while (1) {
    $2_1 = $13_1;
    if ((HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 100 | 0) >> 2] | 0 | 0)) {
     break label$9
    }
    i64toi32_i32$1 = $26$hi;
    i64toi32_i32$1 = $31$hi;
    i64toi32_i32$1 = $26$hi;
    i64toi32_i32$5 = $31$hi;
    i64toi32_i32$5 = __wasm_i64_mul($26_1 | 0, i64toi32_i32$1 | 0, $31_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $347_1 = i64toi32_i32$5;
    $347$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $29$hi;
    i64toi32_i32$1 = $32$hi;
    i64toi32_i32$1 = $29$hi;
    i64toi32_i32$5 = $32$hi;
    i64toi32_i32$5 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$1 | 0, $32_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $350_1 = i64toi32_i32$5;
    $350$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $347$hi;
    i64toi32_i32$0 = $347_1;
    i64toi32_i32$5 = $350$hi;
    i64toi32_i32$2 = $350_1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $351$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $25$hi;
    i64toi32_i32$4 = $33$hi;
    i64toi32_i32$4 = $25$hi;
    i64toi32_i32$0 = $33$hi;
    i64toi32_i32$0 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$4 | 0, $33_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $354_1 = i64toi32_i32$0;
    $354$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $351$hi;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$0 = $354$hi;
    i64toi32_i32$2 = $354_1;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $31_1 = i64toi32_i32$5;
    $31$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $27$hi;
    i64toi32_i32$3 = $31$hi;
    i64toi32_i32$4 = i64toi32_i32$5;
    i64toi32_i32$1 = $27$hi;
    i64toi32_i32$2 = $27_1;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$1 | 0)) {
     $262_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$4 >>> 0 > i64toi32_i32$2 >>> 0) {
       $263_1 = 0
      } else {
       $263_1 = 1
      }
      $264_1 = $263_1;
     } else {
      $264_1 = 0
     }
     $262_1 = $264_1;
    }
    if ($262_1) {
     break label$9
    }
    HEAP32[$4_1 >> 2] = $2_1;
    $1_1 = HEAP32[$14_1 >> 2] | 0;
    $17_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
    $16_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    $19_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
    label$12 : {
     if (($1_1 | 0) == ($6_1 | 0)) {
      break label$12
     }
     $13_1 = HEAP32[(HEAP32[($2_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
     $14_1 = $13_1 + 12 | 0;
     i64toi32_i32$4 = $31$hi;
     $27_1 = $31_1;
     $27$hi = i64toi32_i32$4;
     $1_1 = $2_1;
     $2_1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
     i64toi32_i32$2 = $2_1 + 92 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$3 = i64toi32_i32$4 >> 31 | 0;
     $31_1 = i64toi32_i32$4;
     $31$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $28$hi;
     i64toi32_i32$3 = $31$hi;
     i64toi32_i32$4 = $28$hi;
     i64toi32_i32$4 = __wasm_i64_mul($31_1 | 0, i64toi32_i32$3 | 0, $28_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $388_1 = i64toi32_i32$4;
     $388$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
     $32_1 = i64toi32_i32$3;
     $32$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $32$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = __wasm_i64_mul($32_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $393_1 = i64toi32_i32$3;
     $393$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $388$hi;
     i64toi32_i32$2 = $388_1;
     i64toi32_i32$3 = $393$hi;
     i64toi32_i32$1 = $393_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $394$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $2_1 + 96 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $33_1 = i64toi32_i32$5;
     $33$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$2 = $33$hi;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$5 = __wasm_i64_mul($33_1 | 0, i64toi32_i32$2 | 0, $24_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $400_1 = i64toi32_i32$5;
     $400$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $394$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$5 = $400$hi;
     i64toi32_i32$1 = $400_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $401$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $30$hi;
     i64toi32_i32$0 = $401$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$4 = $30$hi;
     i64toi32_i32$1 = $30_1;
     if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
      $265_1 = 1
     } else {
      if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
       if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
        $266_1 = 0
       } else {
        $266_1 = 1
       }
       $267_1 = $266_1;
      } else {
       $267_1 = 0
      }
      $265_1 = $267_1;
     }
     if ($265_1) {
      break label$9
     }
     continue label$11;
    }
    break label$11;
   };
   $1_1 = $2_1;
   i64toi32_i32$2 = $31$hi;
   $27_1 = $31_1;
   $27$hi = i64toi32_i32$2;
  }
  label$13 : {
   label$14 : {
    i64toi32_i32$2 = $27$hi;
    i64toi32_i32$2 = $22$hi;
    i64toi32_i32$2 = $27$hi;
    i64toi32_i32$1 = $27_1;
    i64toi32_i32$0 = $22$hi;
    i64toi32_i32$4 = $22_1;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
    $22_1 = i64toi32_i32$5;
    $22$hi = i64toi32_i32$3;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 1;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$1 | 0)) {
     $268_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0) {
       $269_1 = 0
      } else {
       $269_1 = 1
      }
      $270_1 = $269_1;
     } else {
      $270_1 = 0
     }
     $268_1 = $270_1;
    }
    if ($268_1) {
     break label$14
    }
    label$15 : while (1) {
     $34_1 = (Math_imul($16_1 - $12_1 | 0, $20_1) + Math_imul($19_1 - $9_1 | 0, $23_1) | 0) + Math_imul($17_1 - $11_1 | 0, $18_1) | 0;
     i64toi32_i32$3 = $34_1;
     i64toi32_i32$2 = i64toi32_i32$3 >> 31 | 0;
     $30_1 = i64toi32_i32$3;
     $30$hi = i64toi32_i32$2;
     label$16 : {
      $1_1 = HEAP32[$3_1 >> 2] | 0;
      if (!$1_1) {
       break label$16
      }
      if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
       break label$16
      }
      $13_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0;
      if ((HEAP32[($13_1 + 20 | 0) >> 2] | 0 | 0) <= (HEAP32[($0_1 + 100 | 0) >> 2] | 0 | 0)) {
       break label$16
      }
      $2_1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
      $8_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
      $35_1 = $8_1 - $12_1 | 0;
      $14_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
      $36_1 = $14_1 - $9_1 | 0;
      $2_1 = HEAP32[($2_1 + 96 | 0) >> 2] | 0;
      $37_1 = $2_1 - $11_1 | 0;
      $15_1 = (Math_imul($35_1, $20_1) + Math_imul($36_1, $23_1) | 0) + Math_imul($37_1, $18_1) | 0;
      label$17 : {
       label$18 : {
        i64toi32_i32$2 = $26$hi;
        i64toi32_i32$3 = $35_1;
        i64toi32_i32$2 = i64toi32_i32$3 >> 31 | 0;
        $478$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $26$hi;
        i64toi32_i32$3 = $478$hi;
        i64toi32_i32$3 = __wasm_i64_mul($26_1 | 0, i64toi32_i32$2 | 0, $35_1 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $479_1 = i64toi32_i32$3;
        $479$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $29$hi;
        i64toi32_i32$3 = $36_1;
        i64toi32_i32$2 = i64toi32_i32$3 >> 31 | 0;
        $482$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $29$hi;
        i64toi32_i32$3 = $482$hi;
        i64toi32_i32$3 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$2 | 0, $36_1 | 0, i64toi32_i32$3 | 0) | 0;
        i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
        $483_1 = i64toi32_i32$3;
        $483$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $479$hi;
        i64toi32_i32$4 = $479_1;
        i64toi32_i32$3 = $483$hi;
        i64toi32_i32$1 = $483_1;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $484$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $25$hi;
        i64toi32_i32$4 = $37_1;
        i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
        $487$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $25$hi;
        i64toi32_i32$4 = $487$hi;
        i64toi32_i32$4 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$5 | 0, $37_1 | 0, i64toi32_i32$4 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $488_1 = i64toi32_i32$4;
        $488$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $484$hi;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$4 = $488$hi;
        i64toi32_i32$1 = $488_1;
        i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $27_1 = i64toi32_i32$3;
        $27$hi = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
         break label$18
        }
        if (($15_1 | 0) < (0 | 0)) {
         break label$17
        }
        break label$16;
       }
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$1 = $27_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$2 = -1;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
        $271_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $272_1 = 0
         } else {
          $272_1 = 1
         }
         $274_1 = $272_1;
        } else {
         $274_1 = 0
        }
        $271_1 = $274_1;
       }
       if ($271_1) {
        break label$16
       }
       i64toi32_i32$5 = $15_1;
       i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
       $31_1 = i64toi32_i32$5;
       $31$hi = i64toi32_i32$1;
       label$19 : {
        label$20 : {
         if ((i64toi32_i32$5 | 0) < (1 | 0)) {
          break label$20
         }
         HEAP32[($7_1 + 40 | 0) >> 2] = 1;
         $15_1 = -1;
         break label$19;
        }
        label$21 : {
         if (($15_1 | 0) > (-1 | 0)) {
          break label$21
         }
         HEAP32[($7_1 + 40 | 0) >> 2] = -1;
         i64toi32_i32$1 = $31$hi;
         i64toi32_i32$1 = 0;
         i64toi32_i32$2 = 0;
         i64toi32_i32$5 = $31$hi;
         i64toi32_i32$0 = $31_1;
         i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
         i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
         i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
         i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
         $31_1 = i64toi32_i32$4;
         $31$hi = i64toi32_i32$3;
         $15_1 = 1;
         break label$19;
        }
        $15_1 = 0;
        HEAP32[($7_1 + 40 | 0) >> 2] = 0;
        i64toi32_i32$3 = 0;
        $31_1 = 0;
        $31$hi = i64toi32_i32$3;
       }
       HEAP32[($7_1 + 40 | 0) >> 2] = $15_1;
       i64toi32_i32$3 = $31$hi;
       i64toi32_i32$2 = $7_1;
       HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $31_1;
       HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$3;
       i64toi32_i32$3 = $27$hi;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$0 = $27_1;
       i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
       i64toi32_i32$1 = $7_1;
       HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$5;
       HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$4;
       label$22 : {
        label$23 : {
         if (($34_1 | 0) < (1 | 0)) {
          break label$23
         }
         HEAP32[($7_1 + 16 | 0) >> 2] = 1;
         $15_1 = -1;
         i64toi32_i32$4 = $30$hi;
         $27_1 = $30_1;
         $27$hi = i64toi32_i32$4;
         break label$22;
        }
        label$24 : {
         if (($34_1 | 0) > (-1 | 0)) {
          break label$24
         }
         HEAP32[($7_1 + 16 | 0) >> 2] = -1;
         i64toi32_i32$4 = $30$hi;
         i64toi32_i32$4 = 0;
         i64toi32_i32$3 = 0;
         i64toi32_i32$1 = $30$hi;
         i64toi32_i32$0 = $30_1;
         i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
         i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
         i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
         i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
         $27_1 = i64toi32_i32$2;
         $27$hi = i64toi32_i32$5;
         $15_1 = 1;
         break label$22;
        }
        $15_1 = 0;
        HEAP32[($7_1 + 16 | 0) >> 2] = 0;
        i64toi32_i32$5 = 0;
        $27_1 = 0;
        $27$hi = i64toi32_i32$5;
       }
       i64toi32_i32$5 = $27$hi;
       i64toi32_i32$3 = $7_1;
       HEAP32[i64toi32_i32$3 >> 2] = $27_1;
       HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$5;
       i64toi32_i32$5 = $22$hi;
       $27_1 = $22_1;
       $27$hi = i64toi32_i32$5;
       label$25 : {
        i64toi32_i32$4 = $27_1;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        if ((i64toi32_i32$5 | 0) > (i64toi32_i32$3 | 0)) {
         $275_1 = 1
        } else {
         if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$3 | 0)) {
          if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$0 >>> 0) {
           $276_1 = 0
          } else {
           $276_1 = 1
          }
          $277_1 = $276_1;
         } else {
          $277_1 = 0
         }
         $275_1 = $277_1;
        }
        if ($275_1) {
         break label$25
        }
        i64toi32_i32$4 = 0;
        $27_1 = 0;
        $27$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $22$hi;
        i64toi32_i32$0 = $22_1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$3 = -1;
        if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
         $279_1 = 1
        } else {
         if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
          if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $280_1 = 0
          } else {
           $280_1 = 1
          }
          $281_1 = $280_1;
         } else {
          $281_1 = 0
         }
         $279_1 = $281_1;
        }
        if ($279_1) {
         break label$25
        }
        HEAP32[($7_1 + 16 | 0) >> 2] = $15_1;
        i64toi32_i32$0 = $22$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$4 = $22$hi;
        i64toi32_i32$5 = $22_1;
        i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
        i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $27_1 = i64toi32_i32$1;
        $27$hi = i64toi32_i32$2;
       }
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$3 = $7_1;
       HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $27_1;
       HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$2;
       if (($158(i64toi32_i32$3 + 24 | 0 | 0, i64toi32_i32$3 | 0) | 0 | 0) <= (-1 | 0)) {
        break label$16
       }
      }
      HEAP32[$3_1 >> 2] = ($1_1 | 0) == ($10_1 | 0) ? 0 : $13_1;
      i64toi32_i32$2 = $26$hi;
      i64toi32_i32$3 = $16_1 - $8_1 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 >> 31 | 0;
      $552_1 = i64toi32_i32$3;
      $552$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $26$hi;
      i64toi32_i32$3 = $552$hi;
      i64toi32_i32$3 = __wasm_i64_mul($26_1 | 0, i64toi32_i32$2 | 0, $552_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $553_1 = i64toi32_i32$3;
      $553$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $29$hi;
      i64toi32_i32$3 = $19_1 - $14_1 | 0;
      i64toi32_i32$2 = i64toi32_i32$3 >> 31 | 0;
      $558_1 = i64toi32_i32$3;
      $558$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $29$hi;
      i64toi32_i32$3 = $558$hi;
      i64toi32_i32$3 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$2 | 0, $558_1 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $559_1 = i64toi32_i32$3;
      $559$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $553$hi;
      i64toi32_i32$0 = $553_1;
      i64toi32_i32$3 = $559$hi;
      i64toi32_i32$5 = $559_1;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
      }
      $560$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $25$hi;
      i64toi32_i32$0 = $17_1 - $2_1 | 0;
      i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
      $565_1 = i64toi32_i32$0;
      $565$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $25$hi;
      i64toi32_i32$0 = $565$hi;
      i64toi32_i32$0 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$1 | 0, $565_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $566_1 = i64toi32_i32$0;
      $566$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $560$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$0 = $566$hi;
      i64toi32_i32$5 = $566_1;
      i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $22_1 = i64toi32_i32$3;
      $22$hi = i64toi32_i32$4;
      $9_1 = $14_1;
      $12_1 = $8_1;
      $11_1 = $2_1;
      continue label$15;
     }
     $1_1 = HEAP32[$4_1 >> 2] | 0;
     if (!$1_1) {
      break label$13
     }
     if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) {
      break label$13
     }
     $1_1 = HEAP32[(HEAP32[($1_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
     if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) <= (HEAP32[($0_1 + 100 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     $13_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
     $14_1 = $13_1 - $16_1 | 0;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
     $27_1 = i64toi32_i32$2;
     $27$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $28$hi;
     i64toi32_i32$4 = $27$hi;
     i64toi32_i32$2 = $28$hi;
     i64toi32_i32$2 = __wasm_i64_mul($27_1 | 0, i64toi32_i32$4 | 0, $28_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $599_1 = i64toi32_i32$2;
     $599$hi = i64toi32_i32$4;
     $8_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
     $15_1 = $8_1 - $19_1 | 0;
     i64toi32_i32$2 = $15_1;
     i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
     $31_1 = i64toi32_i32$2;
     $31$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $31$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = __wasm_i64_mul($31_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $609_1 = i64toi32_i32$2;
     $609$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $599$hi;
     i64toi32_i32$1 = $599_1;
     i64toi32_i32$2 = $609$hi;
     i64toi32_i32$5 = $609_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $610_1 = i64toi32_i32$0;
     $610$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $24$hi;
     $2_1 = HEAP32[($2_1 + 96 | 0) >> 2] | 0;
     $17_1 = $2_1 - $17_1 | 0;
     i64toi32_i32$1 = $17_1;
     i64toi32_i32$3 = i64toi32_i32$1 >> 31 | 0;
     $32_1 = i64toi32_i32$1;
     $32$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $24$hi;
     i64toi32_i32$1 = $32$hi;
     i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $621_1 = i64toi32_i32$1;
     $621$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = $621$hi;
     i64toi32_i32$5 = $621_1;
     i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
     $622$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $610$hi;
     i64toi32_i32$3 = $610_1;
     i64toi32_i32$4 = $622$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$13
     }
     i64toi32_i32$3 = $26$hi;
     i64toi32_i32$0 = $13_1 - $12_1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 >> 31 | 0;
     $628_1 = i64toi32_i32$0;
     $628$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $26$hi;
     i64toi32_i32$0 = $628$hi;
     i64toi32_i32$0 = __wasm_i64_mul($26_1 | 0, i64toi32_i32$3 | 0, $628_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $629_1 = i64toi32_i32$0;
     $629$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $29$hi;
     i64toi32_i32$0 = $8_1 - $9_1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 >> 31 | 0;
     $634_1 = i64toi32_i32$0;
     $634$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $29$hi;
     i64toi32_i32$0 = $634$hi;
     i64toi32_i32$0 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$3 | 0, $634_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $635_1 = i64toi32_i32$0;
     $635$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $629$hi;
     i64toi32_i32$5 = $629_1;
     i64toi32_i32$0 = $635$hi;
     i64toi32_i32$4 = $635_1;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $636$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $25$hi;
     i64toi32_i32$5 = $2_1 - $11_1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $641_1 = i64toi32_i32$5;
     $641$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $25$hi;
     i64toi32_i32$5 = $641$hi;
     i64toi32_i32$5 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$2 | 0, $641_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $642_1 = i64toi32_i32$5;
     $642$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $636$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$5 = $642$hi;
     i64toi32_i32$4 = $642_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $33_1 = i64toi32_i32$0;
     $33$hi = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 1;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
      $282_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
       if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0) {
        $283_1 = 0
       } else {
        $283_1 = 1
       }
       $284_1 = $283_1;
      } else {
       $284_1 = 0
      }
      $282_1 = $284_1;
     }
     if ($282_1) {
      break label$13
     }
     $2_1 = (Math_imul($14_1, $20_1) + Math_imul($15_1, $23_1) | 0) + Math_imul($17_1, $18_1) | 0;
     label$26 : {
      label$27 : {
       i64toi32_i32$2 = $26$hi;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$2 = $26$hi;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$1 = __wasm_i64_mul($26_1 | 0, i64toi32_i32$2 | 0, $27_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $659_1 = i64toi32_i32$1;
       $659$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $29$hi;
       i64toi32_i32$2 = $31$hi;
       i64toi32_i32$2 = $29$hi;
       i64toi32_i32$1 = $31$hi;
       i64toi32_i32$1 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$2 | 0, $31_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $662_1 = i64toi32_i32$1;
       $662$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $659$hi;
       i64toi32_i32$4 = $659_1;
       i64toi32_i32$1 = $662$hi;
       i64toi32_i32$3 = $662_1;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $663$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $25$hi;
       i64toi32_i32$0 = $32$hi;
       i64toi32_i32$0 = $25$hi;
       i64toi32_i32$4 = $32$hi;
       i64toi32_i32$4 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$0 | 0, $32_1 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $666_1 = i64toi32_i32$4;
       $666$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $663$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$4 = $666$hi;
       i64toi32_i32$3 = $666_1;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $27_1 = i64toi32_i32$1;
       $27$hi = i64toi32_i32$5;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
        break label$27
       }
       if (($2_1 | 0) < (0 | 0)) {
        break label$26
       }
       break label$13;
      }
      i64toi32_i32$0 = $27$hi;
      i64toi32_i32$3 = $27_1;
      i64toi32_i32$5 = -1;
      i64toi32_i32$2 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$5 | 0)) {
       $286_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
         $287_1 = 0
        } else {
         $287_1 = 1
        }
        $288_1 = $287_1;
       } else {
        $288_1 = 0
       }
       $286_1 = $288_1;
      }
      if ($286_1) {
       break label$13
      }
      i64toi32_i32$0 = $2_1;
      i64toi32_i32$3 = i64toi32_i32$0 >> 31 | 0;
      $31_1 = i64toi32_i32$0;
      $31$hi = i64toi32_i32$3;
      label$28 : {
       label$29 : {
        if ((i64toi32_i32$0 | 0) < (1 | 0)) {
         break label$29
        }
        HEAP32[($7_1 + 40 | 0) >> 2] = 1;
        $2_1 = -1;
        break label$28;
       }
       label$30 : {
        if (($2_1 | 0) > (-1 | 0)) {
         break label$30
        }
        HEAP32[($7_1 + 40 | 0) >> 2] = -1;
        i64toi32_i32$3 = $31$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = $31$hi;
        i64toi32_i32$5 = $31_1;
        i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
        i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
        i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
        $31_1 = i64toi32_i32$4;
        $31$hi = i64toi32_i32$1;
        $2_1 = 1;
        break label$28;
       }
       $2_1 = 0;
       HEAP32[($7_1 + 40 | 0) >> 2] = 0;
       i64toi32_i32$1 = 0;
       $31_1 = 0;
       $31$hi = i64toi32_i32$1;
      }
      HEAP32[($7_1 + 40 | 0) >> 2] = $2_1;
      i64toi32_i32$1 = $31$hi;
      i64toi32_i32$2 = $7_1;
      HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] = $31_1;
      HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = $27$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = $27$hi;
      i64toi32_i32$5 = $27_1;
      i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
      i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
      i64toi32_i32$3 = $7_1;
      HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] = i64toi32_i32$4;
      label$31 : {
       label$32 : {
        if (($34_1 | 0) < (1 | 0)) {
         break label$32
        }
        HEAP32[($7_1 + 16 | 0) >> 2] = 1;
        $2_1 = -1;
        break label$31;
       }
       label$33 : {
        if (($34_1 | 0) > (-1 | 0)) {
         break label$33
        }
        HEAP32[($7_1 + 16 | 0) >> 2] = -1;
        i64toi32_i32$4 = $30$hi;
        i64toi32_i32$4 = 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = $30$hi;
        i64toi32_i32$5 = $30_1;
        i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
        i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
        $30_1 = i64toi32_i32$2;
        $30$hi = i64toi32_i32$0;
        $2_1 = 1;
        break label$31;
       }
       $2_1 = 0;
       HEAP32[($7_1 + 16 | 0) >> 2] = 0;
       i64toi32_i32$0 = 0;
       $30_1 = 0;
       $30$hi = i64toi32_i32$0;
      }
      i64toi32_i32$0 = $30$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[i64toi32_i32$1 >> 2] = $30_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      label$34 : {
       label$35 : {
        i64toi32_i32$0 = $22$hi;
        i64toi32_i32$4 = $22_1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = 0;
        if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
         $289_1 = 1
        } else {
         if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
          if (i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0) {
           $290_1 = 0
          } else {
           $290_1 = 1
          }
          $291_1 = $290_1;
         } else {
          $291_1 = 0
         }
         $289_1 = $291_1;
        }
        if ($289_1) {
         break label$35
        }
        i64toi32_i32$4 = $22$hi;
        $27_1 = $22_1;
        $27$hi = i64toi32_i32$4;
        break label$34;
       }
       i64toi32_i32$4 = 0;
       $27_1 = 0;
       $27$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $22$hi;
       i64toi32_i32$5 = $22_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$1 = -1;
       if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
        $292_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$1 >>> 0) {
          $293_1 = 0
         } else {
          $293_1 = 1
         }
         $294_1 = $293_1;
        } else {
         $294_1 = 0
        }
        $292_1 = $294_1;
       }
       if ($292_1) {
        break label$34
       }
       HEAP32[($7_1 + 16 | 0) >> 2] = $2_1;
       i64toi32_i32$5 = $22$hi;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 0;
       i64toi32_i32$4 = $22$hi;
       i64toi32_i32$0 = $22_1;
       i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
       $27_1 = i64toi32_i32$3;
       $27$hi = i64toi32_i32$2;
      }
      i64toi32_i32$2 = $27$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $27_1;
      HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
      if (($158(i64toi32_i32$1 + 24 | 0 | 0, i64toi32_i32$1 | 0) | 0 | 0) <= (0 | 0)) {
       break label$13
      }
     }
     HEAP32[$4_1 >> 2] = $1_1;
     $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     $17_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
     $16_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
     $19_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
     i64toi32_i32$2 = $33$hi;
     $22_1 = $33_1;
     $22$hi = i64toi32_i32$2;
     continue label$15;
    };
   }
   i64toi32_i32$2 = $22$hi;
   i64toi32_i32$5 = $22_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = -1;
   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
    $296_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$0 >>> 0) {
      $297_1 = 0
     } else {
      $297_1 = 1
     }
     $298_1 = $297_1;
    } else {
     $298_1 = 0
    }
    $296_1 = $298_1;
   }
   if ($296_1) {
    break label$13
   }
   label$36 : while (1) {
    $14_1 = (Math_imul($16_1 - $12_1 | 0, $20_1) + Math_imul($19_1 - $9_1 | 0, $23_1) | 0) + Math_imul($17_1 - $11_1 | 0, $18_1) | 0;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
    $30_1 = i64toi32_i32$2;
    $30$hi = i64toi32_i32$5;
    label$37 : {
     if (!$1_1) {
      break label$37
     }
     if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) {
      break label$37
     }
     $2_1 = HEAP32[((HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     if ((HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) <= (HEAP32[($0_1 + 100 | 0) >> 2] | 0 | 0)) {
      break label$37
     }
     $13_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
     $36_1 = HEAP32[($13_1 + 92 | 0) >> 2] | 0;
     $15_1 = $36_1 - $16_1 | 0;
     $37_1 = HEAP32[($13_1 + 88 | 0) >> 2] | 0;
     $34_1 = $37_1 - $19_1 | 0;
     $10_1 = HEAP32[($13_1 + 96 | 0) >> 2] | 0;
     $13_1 = $10_1 - $17_1 | 0;
     $35_1 = (Math_imul($15_1, $20_1) + Math_imul($34_1, $23_1) | 0) + Math_imul($13_1, $18_1) | 0;
     label$38 : {
      label$39 : {
       i64toi32_i32$5 = $26$hi;
       i64toi32_i32$2 = $15_1;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $799$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $26$hi;
       i64toi32_i32$2 = $799$hi;
       i64toi32_i32$2 = __wasm_i64_mul($26_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $800_1 = i64toi32_i32$2;
       $800$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $29$hi;
       i64toi32_i32$2 = $34_1;
       i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
       $803$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $29$hi;
       i64toi32_i32$2 = $803$hi;
       i64toi32_i32$2 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$5 | 0, $34_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $804_1 = i64toi32_i32$2;
       $804$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $800$hi;
       i64toi32_i32$0 = $800_1;
       i64toi32_i32$2 = $804$hi;
       i64toi32_i32$1 = $804_1;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $805$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $25$hi;
       i64toi32_i32$0 = $13_1;
       i64toi32_i32$3 = i64toi32_i32$0 >> 31 | 0;
       $808$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $25$hi;
       i64toi32_i32$0 = $808$hi;
       i64toi32_i32$0 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$3 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $809_1 = i64toi32_i32$0;
       $809$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $805$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$0 = $809$hi;
       i64toi32_i32$1 = $809_1;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $27_1 = i64toi32_i32$2;
       $27$hi = i64toi32_i32$4;
       i64toi32_i32$3 = i64toi32_i32$2;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | 0) {
        break label$39
       }
       if (($35_1 | 0) > (0 | 0)) {
        break label$38
       }
       break label$37;
      }
      i64toi32_i32$3 = $27$hi;
      i64toi32_i32$1 = $27_1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$5 = -1;
      if ((i64toi32_i32$3 | 0) > (i64toi32_i32$4 | 0)) {
       $300_1 = 1
      } else {
       if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$4 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$5 >>> 0) {
         $301_1 = 0
        } else {
         $301_1 = 1
        }
        $302_1 = $301_1;
       } else {
        $302_1 = 0
       }
       $300_1 = $302_1;
      }
      if ($300_1) {
       break label$37
      }
      i64toi32_i32$3 = $35_1;
      i64toi32_i32$1 = i64toi32_i32$3 >> 31 | 0;
      $31_1 = i64toi32_i32$3;
      $31$hi = i64toi32_i32$1;
      label$40 : {
       label$41 : {
        if ((i64toi32_i32$3 | 0) < (1 | 0)) {
         break label$41
        }
        HEAP32[($7_1 + 40 | 0) >> 2] = 1;
        $13_1 = -1;
        break label$40;
       }
       label$42 : {
        if (($35_1 | 0) > (-1 | 0)) {
         break label$42
        }
        HEAP32[($7_1 + 40 | 0) >> 2] = -1;
        i64toi32_i32$1 = $31$hi;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = $31$hi;
        i64toi32_i32$4 = $31_1;
        i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
        $31_1 = i64toi32_i32$0;
        $31$hi = i64toi32_i32$2;
        $13_1 = 1;
        break label$40;
       }
       $13_1 = 0;
       HEAP32[($7_1 + 40 | 0) >> 2] = 0;
       i64toi32_i32$2 = 0;
       $31_1 = 0;
       $31$hi = i64toi32_i32$2;
      }
      HEAP32[($7_1 + 40 | 0) >> 2] = $13_1;
      i64toi32_i32$2 = $31$hi;
      i64toi32_i32$5 = $7_1;
      HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] = $31_1;
      HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] = i64toi32_i32$2;
      i64toi32_i32$2 = $27$hi;
      i64toi32_i32$2 = 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$5 = $27$hi;
      i64toi32_i32$4 = $27_1;
      i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
      i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
      i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
      i64toi32_i32$1 = $7_1;
      HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$3;
      HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
      label$43 : {
       label$44 : {
        if (($14_1 | 0) < (1 | 0)) {
         break label$44
        }
        HEAP32[($7_1 + 16 | 0) >> 2] = 1;
        $13_1 = -1;
        i64toi32_i32$0 = $30$hi;
        $27_1 = $30_1;
        $27$hi = i64toi32_i32$0;
        break label$43;
       }
       label$45 : {
        if (($14_1 | 0) > (-1 | 0)) {
         break label$45
        }
        HEAP32[($7_1 + 16 | 0) >> 2] = -1;
        i64toi32_i32$0 = $30$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = $30$hi;
        i64toi32_i32$4 = $30_1;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        $27_1 = i64toi32_i32$5;
        $27$hi = i64toi32_i32$3;
        $13_1 = 1;
        break label$43;
       }
       $13_1 = 0;
       HEAP32[($7_1 + 16 | 0) >> 2] = 0;
       i64toi32_i32$3 = 0;
       $27_1 = 0;
       $27$hi = i64toi32_i32$3;
      }
      i64toi32_i32$3 = $27$hi;
      i64toi32_i32$2 = $7_1;
      HEAP32[i64toi32_i32$2 >> 2] = $27_1;
      HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$3;
      i64toi32_i32$3 = $22$hi;
      $27_1 = $22_1;
      $27$hi = i64toi32_i32$3;
      label$46 : {
       i64toi32_i32$0 = $27_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$3 | 0) > (i64toi32_i32$2 | 0)) {
        $303_1 = 1
       } else {
        if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$4 >>> 0) {
          $305_1 = 0
         } else {
          $305_1 = 1
         }
         $306_1 = $305_1;
        } else {
         $306_1 = 0
        }
        $303_1 = $306_1;
       }
       if ($303_1) {
        break label$46
       }
       i64toi32_i32$0 = 0;
       $27_1 = 0;
       $27$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $22$hi;
       i64toi32_i32$4 = $22_1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$2 = -1;
       if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
        $307_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$2 >>> 0) {
          $308_1 = 0
         } else {
          $308_1 = 1
         }
         $309_1 = $308_1;
        } else {
         $309_1 = 0
        }
        $307_1 = $309_1;
       }
       if ($307_1) {
        break label$46
       }
       HEAP32[($7_1 + 16 | 0) >> 2] = $13_1;
       i64toi32_i32$4 = $22$hi;
       i64toi32_i32$4 = 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = $22$hi;
       i64toi32_i32$3 = $22_1;
       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
       $27_1 = i64toi32_i32$1;
       $27$hi = i64toi32_i32$5;
      }
      i64toi32_i32$5 = $27$hi;
      i64toi32_i32$2 = $7_1;
      HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $27_1;
      HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
      if (($158(i64toi32_i32$2 + 24 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0) >= (1 | 0)) {
       break label$37
      }
     }
     $1_1 = ($1_1 | 0) == ($8_1 | 0) ? 0 : $2_1;
     HEAP32[$4_1 >> 2] = $1_1;
     i64toi32_i32$5 = $26$hi;
     i64toi32_i32$2 = $36_1 - $12_1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $874_1 = i64toi32_i32$2;
     $874$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $26$hi;
     i64toi32_i32$2 = $874$hi;
     i64toi32_i32$2 = __wasm_i64_mul($26_1 | 0, i64toi32_i32$5 | 0, $874_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $875_1 = i64toi32_i32$2;
     $875$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $29$hi;
     i64toi32_i32$2 = $37_1 - $9_1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $880_1 = i64toi32_i32$2;
     $880$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $29$hi;
     i64toi32_i32$2 = $880$hi;
     i64toi32_i32$2 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$5 | 0, $880_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $881_1 = i64toi32_i32$2;
     $881$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $875$hi;
     i64toi32_i32$4 = $875_1;
     i64toi32_i32$2 = $881$hi;
     i64toi32_i32$3 = $881_1;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $882$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$4 = $10_1 - $11_1 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
     $887_1 = i64toi32_i32$4;
     $887$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$4 = $887$hi;
     i64toi32_i32$4 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$1 | 0, $887_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $888_1 = i64toi32_i32$4;
     $888$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $882$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$4 = $888$hi;
     i64toi32_i32$3 = $888_1;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $22_1 = i64toi32_i32$2;
     $22$hi = i64toi32_i32$0;
     $19_1 = $37_1;
     $16_1 = $36_1;
     $17_1 = $10_1;
     continue label$36;
    }
    $1_1 = HEAP32[$3_1 >> 2] | 0;
    if (!$1_1) {
     break label$13
    }
    if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
     break label$13
    }
    $1_1 = HEAP32[((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) <= (HEAP32[($0_1 + 100 | 0) >> 2] | 0 | 0)) {
     break label$13
    }
    $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    $13_1 = HEAP32[($2_1 + 92 | 0) >> 2] | 0;
    $15_1 = $13_1 - $12_1 | 0;
    i64toi32_i32$5 = $15_1;
    i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
    $27_1 = i64toi32_i32$5;
    $27$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $28$hi;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$5 = $28$hi;
    i64toi32_i32$5 = __wasm_i64_mul($27_1 | 0, i64toi32_i32$0 | 0, $28_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $921_1 = i64toi32_i32$5;
    $921$hi = i64toi32_i32$0;
    $12_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
    $34_1 = $12_1 - $9_1 | 0;
    i64toi32_i32$5 = $34_1;
    i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
    $31_1 = i64toi32_i32$5;
    $31$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$0 = $31$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = __wasm_i64_mul($31_1 | 0, i64toi32_i32$0 | 0, $21_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $931_1 = i64toi32_i32$5;
    $931$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $921$hi;
    i64toi32_i32$1 = $921_1;
    i64toi32_i32$5 = $931$hi;
    i64toi32_i32$3 = $931_1;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $932_1 = i64toi32_i32$4;
    $932$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $24$hi;
    $9_1 = HEAP32[($2_1 + 96 | 0) >> 2] | 0;
    $11_1 = $9_1 - $11_1 | 0;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $32_1 = i64toi32_i32$1;
    $32$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $24$hi;
    i64toi32_i32$1 = $32$hi;
    i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$2 | 0, $11_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $943_1 = i64toi32_i32$1;
    $943$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $943$hi;
    i64toi32_i32$3 = $943_1;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    $944$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $932$hi;
    i64toi32_i32$2 = $932_1;
    i64toi32_i32$0 = $944$hi;
    i64toi32_i32$3 = i64toi32_i32$5;
    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | 0) {
     break label$13
    }
    i64toi32_i32$2 = $26$hi;
    i64toi32_i32$4 = $16_1 - $13_1 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
    $950_1 = i64toi32_i32$4;
    $950$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $26$hi;
    i64toi32_i32$4 = $950$hi;
    i64toi32_i32$4 = __wasm_i64_mul($26_1 | 0, i64toi32_i32$2 | 0, $950_1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $951_1 = i64toi32_i32$4;
    $951$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $29$hi;
    i64toi32_i32$4 = $19_1 - $12_1 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
    $956_1 = i64toi32_i32$4;
    $956$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $29$hi;
    i64toi32_i32$4 = $956$hi;
    i64toi32_i32$4 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$2 | 0, $956_1 | 0, i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $957_1 = i64toi32_i32$4;
    $957$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $951$hi;
    i64toi32_i32$3 = $951_1;
    i64toi32_i32$4 = $957$hi;
    i64toi32_i32$0 = $957_1;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $958$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $25$hi;
    i64toi32_i32$3 = $17_1 - $9_1 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
    $963_1 = i64toi32_i32$3;
    $963$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $25$hi;
    i64toi32_i32$3 = $963$hi;
    i64toi32_i32$3 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$5 | 0, $963_1 | 0, i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $964_1 = i64toi32_i32$3;
    $964$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $958$hi;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$3 = $964$hi;
    i64toi32_i32$0 = $964_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $33_1 = i64toi32_i32$4;
    $33$hi = i64toi32_i32$1;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = -1;
    i64toi32_i32$0 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
     $310_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$0 >>> 0) {
       $311_1 = 0
      } else {
       $311_1 = 1
      }
      $312_1 = $311_1;
     } else {
      $312_1 = 0
     }
     $310_1 = $312_1;
    }
    if ($310_1) {
     break label$13
    }
    $11_1 = (Math_imul($15_1, $20_1) + Math_imul($34_1, $23_1) | 0) + Math_imul($11_1, $18_1) | 0;
    label$47 : {
     label$48 : {
      i64toi32_i32$5 = $26$hi;
      i64toi32_i32$5 = $27$hi;
      i64toi32_i32$5 = $26$hi;
      i64toi32_i32$1 = $27$hi;
      i64toi32_i32$1 = __wasm_i64_mul($26_1 | 0, i64toi32_i32$5 | 0, $27_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $981_1 = i64toi32_i32$1;
      $981$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $29$hi;
      i64toi32_i32$5 = $31$hi;
      i64toi32_i32$5 = $29$hi;
      i64toi32_i32$1 = $31$hi;
      i64toi32_i32$1 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$5 | 0, $31_1 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
      $984_1 = i64toi32_i32$1;
      $984$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $981$hi;
      i64toi32_i32$0 = $981_1;
      i64toi32_i32$1 = $984$hi;
      i64toi32_i32$2 = $984_1;
      i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $985$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $25$hi;
      i64toi32_i32$4 = $32$hi;
      i64toi32_i32$4 = $25$hi;
      i64toi32_i32$0 = $32$hi;
      i64toi32_i32$0 = __wasm_i64_mul($25_1 | 0, i64toi32_i32$4 | 0, $32_1 | 0, i64toi32_i32$0 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
      $988_1 = i64toi32_i32$0;
      $988$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $985$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$0 = $988$hi;
      i64toi32_i32$2 = $988_1;
      i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
      }
      $27_1 = i64toi32_i32$1;
      $27$hi = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
       break label$48
      }
      if (($11_1 | 0) <= (0 | 0)) {
       break label$13
      }
      break label$47;
     }
     i64toi32_i32$4 = $27$hi;
     i64toi32_i32$2 = $27_1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$3 | 0)) {
      $313_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$3 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$5 >>> 0) {
        $314_1 = 0
       } else {
        $314_1 = 1
       }
       $315_1 = $314_1;
      } else {
       $315_1 = 0
      }
      $313_1 = $315_1;
     }
     if ($313_1) {
      break label$13
     }
     i64toi32_i32$4 = $11_1;
     i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
     $31_1 = i64toi32_i32$4;
     $31$hi = i64toi32_i32$2;
     label$49 : {
      label$50 : {
       if ((i64toi32_i32$4 | 0) < (1 | 0)) {
        break label$50
       }
       HEAP32[($7_1 + 40 | 0) >> 2] = 1;
       $11_1 = -1;
       break label$49;
      }
      label$51 : {
       if (($11_1 | 0) > (-1 | 0)) {
        break label$51
       }
       HEAP32[($7_1 + 40 | 0) >> 2] = -1;
       i64toi32_i32$2 = $31$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = $31$hi;
       i64toi32_i32$3 = $31_1;
       i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
       $31_1 = i64toi32_i32$0;
       $31$hi = i64toi32_i32$1;
       $11_1 = 1;
       break label$49;
      }
      $11_1 = 0;
      HEAP32[($7_1 + 40 | 0) >> 2] = 0;
      i64toi32_i32$1 = 0;
      $31_1 = 0;
      $31$hi = i64toi32_i32$1;
     }
     HEAP32[($7_1 + 40 | 0) >> 2] = $11_1;
     i64toi32_i32$1 = $31$hi;
     i64toi32_i32$5 = $7_1;
     HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] = $31_1;
     HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = $27$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = $27$hi;
     i64toi32_i32$3 = $27_1;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
     i64toi32_i32$2 = $7_1;
     HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] = i64toi32_i32$4;
     HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] = i64toi32_i32$0;
     label$52 : {
      label$53 : {
       if (($14_1 | 0) < (1 | 0)) {
        break label$53
       }
       HEAP32[($7_1 + 16 | 0) >> 2] = 1;
       $11_1 = -1;
       break label$52;
      }
      label$54 : {
       if (($14_1 | 0) > (-1 | 0)) {
        break label$54
       }
       HEAP32[($7_1 + 16 | 0) >> 2] = -1;
       i64toi32_i32$0 = $30$hi;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = $30$hi;
       i64toi32_i32$3 = $30_1;
       i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       $30_1 = i64toi32_i32$5;
       $30$hi = i64toi32_i32$4;
       $11_1 = 1;
       break label$52;
      }
      $11_1 = 0;
      HEAP32[($7_1 + 16 | 0) >> 2] = 0;
      i64toi32_i32$4 = 0;
      $30_1 = 0;
      $30$hi = i64toi32_i32$4;
     }
     i64toi32_i32$4 = $30$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[i64toi32_i32$1 >> 2] = $30_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
     label$55 : {
      label$56 : {
       i64toi32_i32$4 = $22$hi;
       i64toi32_i32$0 = $22_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
        $316_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0) {
          $317_1 = 0
         } else {
          $317_1 = 1
         }
         $318_1 = $317_1;
        } else {
         $318_1 = 0
        }
        $316_1 = $318_1;
       }
       if ($316_1) {
        break label$56
       }
       i64toi32_i32$0 = $22$hi;
       $27_1 = $22_1;
       $27$hi = i64toi32_i32$0;
       break label$55;
      }
      i64toi32_i32$0 = 0;
      $27_1 = 0;
      $27$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$3 = $22_1;
      i64toi32_i32$4 = -1;
      i64toi32_i32$1 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$4 | 0)) {
       $319_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$4 | 0)) {
        if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$1 >>> 0) {
         $320_1 = 0
        } else {
         $320_1 = 1
        }
        $322_1 = $320_1;
       } else {
        $322_1 = 0
       }
       $319_1 = $322_1;
      }
      if ($319_1) {
       break label$55
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = $11_1;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $22$hi;
      i64toi32_i32$4 = $22_1;
      i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
      i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
      i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
      $27_1 = i64toi32_i32$2;
      $27$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $27$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $27_1;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$5;
     if (($158(i64toi32_i32$1 + 24 | 0 | 0, i64toi32_i32$1 | 0) | 0 | 0) >= (0 | 0)) {
      break label$13
     }
    }
    HEAP32[$3_1 >> 2] = $1_1;
    $9_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    $11_1 = HEAP32[($9_1 + 96 | 0) >> 2] | 0;
    $12_1 = HEAP32[($9_1 + 92 | 0) >> 2] | 0;
    $1_1 = HEAP32[$4_1 >> 2] | 0;
    $9_1 = HEAP32[($9_1 + 88 | 0) >> 2] | 0;
    i64toi32_i32$5 = $33$hi;
    $22_1 = $33_1;
    $22$hi = i64toi32_i32$5;
    continue label$36;
   };
  }
  global$0 = $7_1 + 48 | 0;
 }
 
 function $167($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $7_1 = 0, $13$hi = 0, $10_1 = 0, $9_1 = 0, $13_1 = 0, $11_1 = 0, $16$hi = 0, $16_1 = 0, $14$hi = 0, $15$hi = 0, i64toi32_i32$6 = 0, $12_1 = 0, $55_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $61_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $67_1 = 0, $68_1 = 0, $70_1 = 0, $71_1 = 0, $56_1 = 0, $56$hi = 0, $60_1 = 0, $60$hi = 0, $62_1 = 0, $62$hi = 0, $14_1 = 0, $66_1 = 0, $66$hi = 0, $67$hi = 0, $69_1 = 0, $69$hi = 0, $15_1 = 0, $73_1 = 0, $73$hi = 0, $76$hi = 0, $72_1 = 0, $78_1 = 0, $78$hi = 0, $80$hi = 0, $74_1 = 0, $82_1 = 0, $82$hi = 0, $83$hi = 0, $85$hi = 0, $75_1 = 0, $87_1 = 0, $87$hi = 0, $116_1 = 0, $128_1 = 0, $138_1 = 0, $150_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  label$1 : {
   label$2 : {
    $8_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    if ($8_1) {
     break label$2
    }
    $9_1 = 0;
    break label$1;
   }
   $9_1 = 0;
   $10_1 = $8_1;
   label$3 : while (1) {
    label$4 : {
     if ((HEAP32[($10_1 + 20 | 0) >> 2] | 0 | 0) <= (HEAP32[($0_1 + 100 | 0) >> 2] | 0 | 0)) {
      break label$4
     }
     HEAP32[($7_1 + 44 | 0) >> 2] = -1;
     $8_1 = HEAP32[($10_1 + 12 | 0) >> 2] | 0;
     $11_1 = (HEAP32[($8_1 + 96 | 0) >> 2] | 0) - (HEAP32[($2_1 + 96 | 0) >> 2] | 0) | 0;
     HEAP32[($7_1 + 40 | 0) >> 2] = $11_1;
     $12_1 = (HEAP32[($8_1 + 92 | 0) >> 2] | 0) - (HEAP32[($2_1 + 92 | 0) >> 2] | 0) | 0;
     HEAP32[($7_1 + 36 | 0) >> 2] = $12_1;
     $8_1 = (HEAP32[($8_1 + 88 | 0) >> 2] | 0) - (HEAP32[($2_1 + 88 | 0) >> 2] | 0) | 0;
     HEAP32[($7_1 + 32 | 0) >> 2] = $8_1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
     $56_1 = i64toi32_i32$0;
     $56$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $12_1;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $13_1 = i64toi32_i32$0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $56$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = __wasm_i64_mul($56_1 | 0, i64toi32_i32$1 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $60_1 = i64toi32_i32$0;
     $60$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $62_1 = i64toi32_i32$1;
     $62$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $8_1;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $14_1 = i64toi32_i32$1;
     $14$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $62$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = __wasm_i64_mul($62_1 | 0, i64toi32_i32$0 | 0, $8_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $66_1 = i64toi32_i32$1;
     $66$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $60$hi;
     i64toi32_i32$2 = $60_1;
     i64toi32_i32$1 = $66$hi;
     i64toi32_i32$3 = $66_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $67$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     $69_1 = i64toi32_i32$5;
     $69$hi = i64toi32_i32$2;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
     $15_1 = i64toi32_i32$5;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $69$hi;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = __wasm_i64_mul($69_1 | 0, i64toi32_i32$2 | 0, $11_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $73_1 = i64toi32_i32$5;
     $73$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $67$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = $73$hi;
     i64toi32_i32$3 = $73_1;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $16_1 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$4;
     label$5 : {
      label$6 : {
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       $76$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $13$hi;
       i64toi32_i32$0 = $76$hi;
       $72_1 = i64toi32_i32$4;
       i64toi32_i32$4 = $13$hi;
       i64toi32_i32$4 = __wasm_i64_mul($72_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $78_1 = i64toi32_i32$4;
       $78$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $80$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $14$hi;
       i64toi32_i32$4 = $80$hi;
       $74_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $14$hi;
       i64toi32_i32$0 = __wasm_i64_mul($74_1 | 0, i64toi32_i32$4 | 0, $14_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $82_1 = i64toi32_i32$0;
       $82$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $78$hi;
       i64toi32_i32$2 = $78_1;
       i64toi32_i32$0 = $82$hi;
       i64toi32_i32$3 = $82_1;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $83$hi = i64toi32_i32$1;
       i64toi32_i32$4 = $5_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
       $85$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $15$hi;
       i64toi32_i32$2 = $85$hi;
       $75_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $15$hi;
       i64toi32_i32$1 = __wasm_i64_mul($75_1 | 0, i64toi32_i32$2 | 0, $15_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $87_1 = i64toi32_i32$1;
       $87$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $83$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$1 = $87$hi;
       i64toi32_i32$3 = $87_1;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $13_1 = i64toi32_i32$0;
       $13$hi = i64toi32_i32$5;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$4 = 0;
       i64toi32_i32$3 = 1;
       if ((i64toi32_i32$5 | 0) < (i64toi32_i32$4 | 0)) {
        $55_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$4 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $57_1 = 0
         } else {
          $57_1 = 1
         }
         $58_1 = $57_1;
        } else {
         $58_1 = 0
        }
        $55_1 = $58_1;
       }
       if ($55_1) {
        break label$6
       }
       HEAP32[($7_1 + 24 | 0) >> 2] = 1;
       $8_1 = -1;
       $11_1 = -1;
       break label$5;
      }
      label$7 : {
       i64toi32_i32$2 = $13$hi;
       i64toi32_i32$3 = $13_1;
       i64toi32_i32$5 = -1;
       i64toi32_i32$4 = -1;
       if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
        $59_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
         if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
          $61_1 = 0
         } else {
          $61_1 = 1
         }
         $63_1 = $61_1;
        } else {
         $63_1 = 0
        }
        $59_1 = $63_1;
       }
       if ($59_1) {
        break label$7
       }
       $8_1 = -1;
       HEAP32[($7_1 + 24 | 0) >> 2] = -1;
       i64toi32_i32$3 = $13$hi;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 0;
       i64toi32_i32$2 = $13$hi;
       i64toi32_i32$5 = $13_1;
       i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
       i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
       i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
       $13_1 = i64toi32_i32$1;
       $13$hi = i64toi32_i32$0;
       $11_1 = 1;
       break label$5;
      }
      $8_1 = 0;
      HEAP32[($7_1 + 24 | 0) >> 2] = 0;
      i64toi32_i32$0 = 0;
      $13_1 = 0;
      $13$hi = i64toi32_i32$0;
      $11_1 = 0;
     }
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$4 = $7_1;
     HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $13_1;
     HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$0;
     label$8 : {
      label$9 : {
       label$10 : {
        label$11 : {
         i64toi32_i32$0 = $16$hi;
         i64toi32_i32$3 = $16_1;
         i64toi32_i32$4 = 0;
         i64toi32_i32$5 = 0;
         if ((i64toi32_i32$0 | 0) > (i64toi32_i32$4 | 0)) {
          $64_1 = 1
         } else {
          if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$4 | 0)) {
           if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$5 >>> 0) {
            $65_1 = 0
           } else {
            $65_1 = 1
           }
           $67_1 = $65_1;
          } else {
           $67_1 = 0
          }
          $64_1 = $67_1;
         }
         if ($64_1) {
          break label$11
         }
         i64toi32_i32$3 = $16$hi;
         i64toi32_i32$5 = $16_1;
         i64toi32_i32$0 = -1;
         i64toi32_i32$4 = -1;
         if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
          $68_1 = 1
         } else {
          if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
           if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0) {
            $70_1 = 0
           } else {
            $70_1 = 1
           }
           $71_1 = $70_1;
          } else {
           $71_1 = 0
          }
          $68_1 = $71_1;
         }
         if ($68_1) {
          break label$10
         }
         HEAP32[($7_1 + 24 | 0) >> 2] = $11_1;
         i64toi32_i32$5 = $16$hi;
         i64toi32_i32$5 = 0;
         i64toi32_i32$4 = 0;
         i64toi32_i32$3 = $16$hi;
         i64toi32_i32$0 = $16_1;
         i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
         i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
         i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
         i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
         $16_1 = i64toi32_i32$2;
         $16$hi = i64toi32_i32$1;
        }
        i64toi32_i32$1 = $16$hi;
        i64toi32_i32$4 = $7_1;
        HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] = $16_1;
        HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] = i64toi32_i32$1;
        break label$9;
       }
       i64toi32_i32$4 = $7_1;
       i64toi32_i32$1 = 0;
       HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] = i64toi32_i32$1;
       if (!$8_1) {
        break label$8
       }
      }
      label$12 : {
       if ($9_1) {
        break label$12
       }
       i64toi32_i32$5 = $7_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
       $116_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $6_1;
       HEAP32[i64toi32_i32$1 >> 2] = $116_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = HEAP32[((i64toi32_i32$5 + 8 | 0) + 16 | 0) >> 2] | 0;
       i64toi32_i32$5 = (i64toi32_i32$5 + 8 | 0) + 8 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $128_1 = i64toi32_i32$4;
       i64toi32_i32$4 = $6_1 + 8 | 0;
       HEAP32[i64toi32_i32$4 >> 2] = $128_1;
       HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
       $9_1 = $10_1;
       break label$8;
      }
      label$13 : {
       $8_1 = $158($7_1 + 8 | 0 | 0, $6_1 | 0) | 0;
       if (($8_1 | 0) > (-1 | 0)) {
        break label$13
       }
       i64toi32_i32$5 = $7_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
       $138_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $6_1;
       HEAP32[i64toi32_i32$1 >> 2] = $138_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$4;
       HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = HEAP32[((i64toi32_i32$5 + 8 | 0) + 16 | 0) >> 2] | 0;
       i64toi32_i32$5 = (i64toi32_i32$5 + 8 | 0) + 8 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
       $150_1 = i64toi32_i32$4;
       i64toi32_i32$4 = $6_1 + 8 | 0;
       HEAP32[i64toi32_i32$4 >> 2] = $150_1;
       HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
       $9_1 = $10_1;
       break label$8;
      }
      if ($8_1) {
       break label$8
      }
      $9_1 = ($168($9_1 | 0, $10_1 | 0, $3_1 | 0, $7_1 + 32 | 0 | 0) | 0 | 0) != (2 | 0) ^ $1_1 | 0 ? $10_1 : $9_1;
     }
     $8_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    }
    $10_1 = HEAP32[$10_1 >> 2] | 0;
    if (($10_1 | 0) != ($8_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  global$0 = $7_1 + 48 | 0;
  return $9_1 | 0;
 }
 
 function $168($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $62_1 = 0, $62$hi = 0, $78_1 = 0, $78$hi = 0, $79_1 = 0, $79$hi = 0, $97_1 = 0, $97$hi = 0, $109_1 = 0, $109$hi = 0, $110_1 = 0, $110$hi = 0, $111$hi = 0, $119_1 = 0, $119$hi = 0, $127_1 = 0, $127$hi = 0, $128_1 = 0, $128$hi = 0;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
     break label$2
    }
    $5_1 = 2;
    if (($4_1 | 0) != ($1_1 | 0)) {
     break label$1
    }
    $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    $1_1 = HEAP32[((HEAP32[($1_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
    $5_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
    $6_1 = (HEAP32[($4_1 + 96 | 0) >> 2] | 0) - $5_1 | 0;
    $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $7_1 = HEAP32[($1_1 + 92 | 0) >> 2] | 0;
    $8_1 = (HEAP32[($0_1 + 92 | 0) >> 2] | 0) - $7_1 | 0;
    $7_1 = (HEAP32[($4_1 + 92 | 0) >> 2] | 0) - $7_1 | 0;
    $5_1 = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) - $5_1 | 0;
    i64toi32_i32$1 = Math_imul($6_1, $8_1) - Math_imul($7_1, $5_1) | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $62_1 = i64toi32_i32$1;
    $62$hi = i64toi32_i32$0;
    $9_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    $10_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $11_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $12_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = Math_imul($9_1, $10_1) - Math_imul($11_1, $12_1) | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $78_1 = i64toi32_i32$1;
    $78$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $62$hi;
    i64toi32_i32$1 = $78$hi;
    i64toi32_i32$1 = __wasm_i64_mul($62_1 | 0, i64toi32_i32$0 | 0, $78_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $79_1 = i64toi32_i32$1;
    $79$hi = i64toi32_i32$0;
    $1_1 = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
    $0_1 = (HEAP32[($0_1 + 88 | 0) >> 2] | 0) - $1_1 | 0;
    $1_1 = (HEAP32[($4_1 + 88 | 0) >> 2] | 0) - $1_1 | 0;
    i64toi32_i32$1 = Math_imul($7_1, $0_1) - Math_imul($1_1, $8_1) | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $97_1 = i64toi32_i32$1;
    $97$hi = i64toi32_i32$0;
    $4_1 = HEAP32[$3_1 >> 2] | 0;
    $2_1 = HEAP32[$2_1 >> 2] | 0;
    i64toi32_i32$1 = Math_imul($4_1, $11_1) - Math_imul($2_1, $10_1) | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $109_1 = i64toi32_i32$1;
    $109$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $97$hi;
    i64toi32_i32$1 = $109$hi;
    i64toi32_i32$1 = __wasm_i64_mul($97_1 | 0, i64toi32_i32$0 | 0, $109_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $110_1 = i64toi32_i32$1;
    $110$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $79$hi;
    i64toi32_i32$2 = $79_1;
    i64toi32_i32$1 = $110$hi;
    i64toi32_i32$3 = $110_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $111$hi = i64toi32_i32$5;
    i64toi32_i32$2 = Math_imul($1_1, $5_1) - Math_imul($6_1, $0_1) | 0;
    i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
    $119_1 = i64toi32_i32$2;
    $119$hi = i64toi32_i32$5;
    i64toi32_i32$2 = Math_imul($2_1, $12_1) - Math_imul($4_1, $9_1) | 0;
    i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
    $127_1 = i64toi32_i32$2;
    $127$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $119$hi;
    i64toi32_i32$2 = $127$hi;
    i64toi32_i32$2 = __wasm_i64_mul($119_1 | 0, i64toi32_i32$5 | 0, $127_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $128_1 = i64toi32_i32$2;
    $128$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $111$hi;
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$2 = $128$hi;
    i64toi32_i32$3 = $128_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $40_1 = $39_1;
     } else {
      $40_1 = 0
     }
     $38_1 = $40_1;
    }
    return ($38_1 ? 2 : 1) | 0;
   }
   $5_1 = ($4_1 | 0) == ($1_1 | 0);
  }
  return $5_1 | 0;
 }
 
 function $169($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $11_1 = 0, $5_1 = 0, $6_1 = 0, $13_1 = 0, $12_1 = 0, i64toi32_i32$0 = 0, $14_1 = Math_fround(0), i64toi32_i32$1 = 0, $18_1 = Math_fround(0), $10_1 = 0, $16_1 = Math_fround(0), $9_1 = 0, $7_1 = 0, $24_1 = Math_fround(0), $8_1 = 0, $15_1 = 0, $19_1 = Math_fround(0), $20_1 = Math_fround(0), i64toi32_i32$2 = 0, $17_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $300_1 = 0, $303_1 = 0, $314_1 = 0, $318_1 = 0, $25_1 = 0.0, $26_1 = 0.0, $27_1 = 0.0, $698_1 = 0, $703_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($2_1) {
       break label$4
      }
      if (($4_1 | 0) >= (1 | 0)) {
       break label$3
      }
      break label$2;
     }
     if (($4_1 | 0) < (1 | 0)) {
      break label$2
     }
     $6_1 = -246811958;
     $7_1 = 1900671690;
     $8_1 = $4_1;
     $9_1 = $1_1;
     $10_1 = 1900671690;
     $11_1 = 1900671690;
     $12_1 = -246811958;
     $13_1 = -246811958;
     label$5 : while (1) {
      $14_1 = Math_fround(+HEAPF64[($9_1 + 16 | 0) >> 3]);
      $15_1 = (wasm2js_scratch_store_f32($14_1), wasm2js_scratch_load_i32(0));
      $6_1 = (wasm2js_scratch_store_i32(0, $6_1), wasm2js_scratch_load_f32()) < $14_1 ? $15_1 : $6_1;
      $16_1 = Math_fround(+HEAPF64[($9_1 + 8 | 0) >> 3]);
      $17_1 = (wasm2js_scratch_store_f32($16_1), wasm2js_scratch_load_i32(0));
      $12_1 = (wasm2js_scratch_store_i32(0, $12_1), wasm2js_scratch_load_f32()) < $16_1 ? $17_1 : $12_1;
      $7_1 = $14_1 < (wasm2js_scratch_store_i32(0, $7_1), wasm2js_scratch_load_f32()) ? $15_1 : $7_1;
      $10_1 = $16_1 < (wasm2js_scratch_store_i32(0, $10_1), wasm2js_scratch_load_f32()) ? $17_1 : $10_1;
      $14_1 = Math_fround(+HEAPF64[$9_1 >> 3]);
      $15_1 = (wasm2js_scratch_store_f32($14_1), wasm2js_scratch_load_i32(0));
      $13_1 = (wasm2js_scratch_store_i32(0, $13_1), wasm2js_scratch_load_f32()) < $14_1 ? $15_1 : $13_1;
      $11_1 = $14_1 < (wasm2js_scratch_store_i32(0, $11_1), wasm2js_scratch_load_f32()) ? $15_1 : $11_1;
      $9_1 = $9_1 + $3_1 | 0;
      $8_1 = $8_1 + -1 | 0;
      if ($8_1) {
       continue label$5
      }
      break label$1;
     };
    }
    $6_1 = -246811958;
    $7_1 = 1900671690;
    $17_1 = $4_1;
    $9_1 = $1_1;
    $10_1 = 1900671690;
    $11_1 = 1900671690;
    $12_1 = -246811958;
    $13_1 = -246811958;
    label$6 : while (1) {
     $8_1 = HEAP32[($9_1 + 8 | 0) >> 2] | 0;
     $14_1 = (wasm2js_scratch_store_i32(0, $8_1), wasm2js_scratch_load_f32());
     $6_1 = (wasm2js_scratch_store_i32(0, $6_1), wasm2js_scratch_load_f32()) < $14_1 ? $8_1 : $6_1;
     $15_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
     $16_1 = (wasm2js_scratch_store_i32(0, $15_1), wasm2js_scratch_load_f32());
     $12_1 = (wasm2js_scratch_store_i32(0, $12_1), wasm2js_scratch_load_f32()) < $16_1 ? $15_1 : $12_1;
     $7_1 = $14_1 < (wasm2js_scratch_store_i32(0, $7_1), wasm2js_scratch_load_f32()) ? $8_1 : $7_1;
     $10_1 = $16_1 < (wasm2js_scratch_store_i32(0, $10_1), wasm2js_scratch_load_f32()) ? $15_1 : $10_1;
     $8_1 = HEAP32[$9_1 >> 2] | 0;
     $14_1 = (wasm2js_scratch_store_i32(0, $8_1), wasm2js_scratch_load_f32());
     $13_1 = (wasm2js_scratch_store_i32(0, $13_1), wasm2js_scratch_load_f32()) < $14_1 ? $8_1 : $13_1;
     $11_1 = $14_1 < (wasm2js_scratch_store_i32(0, $11_1), wasm2js_scratch_load_f32()) ? $8_1 : $11_1;
     $9_1 = $9_1 + $3_1 | 0;
     $17_1 = $17_1 + -1 | 0;
     if ($17_1) {
      continue label$6
     }
     break label$1;
    };
   }
   $11_1 = 1900671690;
   $13_1 = -246811958;
   $12_1 = -246811958;
   $6_1 = -246811958;
   $10_1 = 1900671690;
   $7_1 = 1900671690;
  }
  $18_1 = (wasm2js_scratch_store_i32(0, $12_1), wasm2js_scratch_load_f32());
  $19_1 = (wasm2js_scratch_store_i32(0, $10_1), wasm2js_scratch_load_f32());
  $16_1 = Math_fround($18_1 - $19_1);
  $20_1 = (wasm2js_scratch_store_i32(0, $6_1), wasm2js_scratch_load_f32());
  $21_1 = (wasm2js_scratch_store_i32(0, $7_1), wasm2js_scratch_load_f32());
  $14_1 = Math_fround($20_1 - $21_1);
  $12_1 = $16_1 < $14_1;
  $22_1 = (wasm2js_scratch_store_i32(0, $13_1), wasm2js_scratch_load_f32());
  $23_1 = (wasm2js_scratch_store_i32(0, $11_1), wasm2js_scratch_load_f32());
  $24_1 = Math_fround($22_1 - $23_1);
  $13_1 = $24_1 < $14_1;
  $6_1 = $24_1 < $16_1;
  $11_1 = $6_1 ? ($12_1 ? 2 : 1) : $13_1 << 1 | 0;
  HEAP32[($0_1 + 112 | 0) >> 2] = $11_1;
  label$7 : {
   $13_1 = $6_1 ? ($13_1 ^ 1 | 0) << 1 | 0 : $12_1 ? 1 : 2;
   if (($13_1 | 0) != ($11_1 | 0)) {
    break label$7
   }
   $13_1 = (($11_1 + 1 | 0) >>> 0) % (3 >>> 0) | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $13_1;
  $13_1 = ($11_1 ^ 3 | 0) - $13_1 | 0;
  HEAP32[($0_1 + 108 | 0) >> 2] = $13_1;
  $14_1 = Math_fround($14_1 * Math_fround(9.788566967472434e-05));
  $16_1 = Math_fround($16_1 * Math_fround(9.788566967472434e-05));
  $24_1 = Math_fround($24_1 * Math_fround(9.788566967472434e-05));
  label$8 : {
   if ((($13_1 + 1 | 0 | 0) % (3 | 0) | 0 | 0) == ($11_1 | 0)) {
    break label$8
   }
   $14_1 = Math_fround(-$14_1);
   $16_1 = Math_fround(-$16_1);
   $24_1 = Math_fround(-$24_1);
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 8 | 0) >> 2] = $14_1;
  HEAPF32[($0_1 + 4 | 0) >> 2] = $16_1;
  HEAPF32[$0_1 >> 2] = $24_1;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 24 | 0) >> 2] = Math_fround(Math_fround($20_1 + $21_1) * Math_fround(.5));
  HEAPF32[($0_1 + 20 | 0) >> 2] = Math_fround(Math_fround($18_1 + $19_1) * Math_fround(.5));
  HEAPF32[($0_1 + 16 | 0) >> 2] = Math_fround(Math_fround($22_1 + $23_1) * Math_fround(.5));
  HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = $14_1 != Math_fround(0.0);
  $18_1 = Math_fround(Math_fround(1.0) / $14_1);
  $7_1 = $16_1 != Math_fround(0.0);
  $19_1 = Math_fround(Math_fround(1.0) / $16_1);
  $9_1 = $24_1 != Math_fround(0.0);
  $20_1 = Math_fround(Math_fround(1.0) / $24_1);
  HEAP8[($5_1 + 40 | 0) >> 0] = 1;
  label$9 : {
   if (($4_1 | 0) < (1 | 0)) {
    break label$9
   }
   $11_1 = $79($4_1 << 4 | 0 | 0, 16 | 0) | 0;
   HEAP32[($5_1 + 36 | 0) >> 2] = $11_1;
   HEAP32[($5_1 + 32 | 0) >> 2] = $4_1;
   HEAP8[($5_1 + 40 | 0) >> 0] = 1;
   $6_1 = ($5_1 + 8 | 0) + 8 | 0;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
   $300_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $11_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $300_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $303_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $11_1;
   HEAP32[$11_1 >> 2] = $303_1;
   HEAP32[($11_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   if (($4_1 | 0) == (1 | 0)) {
    break label$9
   }
   $13_1 = $4_1 + -1 | 0;
   $11_1 = 16;
   label$10 : while (1) {
    $12_1 = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + $11_1 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $314_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $12_1;
    HEAP32[i64toi32_i32$0 >> 2] = $314_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = HEAP32[$6_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    $318_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $12_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $318_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $11_1 = $11_1 + 16 | 0;
    $13_1 = $13_1 + -1 | 0;
    if ($13_1) {
     continue label$10
    }
    break label$10;
   };
  }
  $14_1 = $10_1 ? $18_1 : $14_1;
  $16_1 = $7_1 ? $19_1 : $16_1;
  $24_1 = $9_1 ? $20_1 : $24_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $4_1;
  label$11 : {
   label$12 : {
    label$13 : {
     if ($2_1) {
      break label$13
     }
     if (($4_1 | 0) < (1 | 0)) {
      break label$11
     }
     $11_1 = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 8 | 0;
     $10_1 = ($5_1 + 8 | 0) + ((HEAP32[($0_1 + 104 | 0) >> 2] | 0) << 2 | 0) | 0;
     $7_1 = ($5_1 + 8 | 0) + ((HEAP32[($0_1 + 112 | 0) >> 2] | 0) << 2 | 0) | 0;
     $9_1 = ($5_1 + 8 | 0) + ((HEAP32[($0_1 + 108 | 0) >> 2] | 0) << 2 | 0) | 0;
     $21_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
     $22_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
     $23_1 = Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]);
     $13_1 = 0;
     label$14 : while (1) {
      $18_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
      $19_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
      $20_1 = Math_fround(HEAPF32[$1_1 >> 2]);
      HEAP32[($5_1 + 20 | 0) >> 2] = 0;
      HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround($24_1 * Math_fround($20_1 - $23_1));
      HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround($14_1 * Math_fround($19_1 - $21_1));
      HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround($16_1 * Math_fround($18_1 - $22_1));
      HEAP32[($11_1 + 4 | 0) >> 2] = $13_1;
      $12_1 = $11_1 + -8 | 0;
      label$15 : {
       label$16 : {
        $18_1 = Math_fround(HEAPF32[$9_1 >> 2]);
        if (!(Math_fround(Math_abs($18_1)) < Math_fround(2147483648.0))) {
         break label$16
        }
        $6_1 = ~~$18_1;
        break label$15;
       }
       $6_1 = -2147483648;
      }
      HEAP32[$12_1 >> 2] = $6_1;
      $12_1 = $11_1 + -4 | 0;
      label$17 : {
       label$18 : {
        $18_1 = Math_fround(HEAPF32[$7_1 >> 2]);
        if (!(Math_fround(Math_abs($18_1)) < Math_fround(2147483648.0))) {
         break label$18
        }
        $6_1 = ~~$18_1;
        break label$17;
       }
       $6_1 = -2147483648;
      }
      HEAP32[$12_1 >> 2] = $6_1;
      label$19 : {
       label$20 : {
        $18_1 = Math_fround(HEAPF32[$10_1 >> 2]);
        if (!(Math_fround(Math_abs($18_1)) < Math_fround(2147483648.0))) {
         break label$20
        }
        $12_1 = ~~$18_1;
        break label$19;
       }
       $12_1 = -2147483648;
      }
      HEAP32[$11_1 >> 2] = $12_1;
      $11_1 = $11_1 + 16 | 0;
      $1_1 = $1_1 + $3_1 | 0;
      $13_1 = $13_1 + 1 | 0;
      if (($4_1 | 0) != ($13_1 | 0)) {
       continue label$14
      }
      break label$12;
     };
    }
    if (($4_1 | 0) < (1 | 0)) {
     break label$11
    }
    $11_1 = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 8 | 0;
    $10_1 = ($5_1 + 8 | 0) + ((HEAP32[($0_1 + 104 | 0) >> 2] | 0) << 2 | 0) | 0;
    $7_1 = ($5_1 + 8 | 0) + ((HEAP32[($0_1 + 112 | 0) >> 2] | 0) << 2 | 0) | 0;
    $9_1 = ($5_1 + 8 | 0) + ((HEAP32[($0_1 + 108 | 0) >> 2] | 0) << 2 | 0) | 0;
    $19_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]);
    $13_1 = 0;
    label$21 : while (1) {
     $25_1 = +HEAPF64[($1_1 + 8 | 0) >> 3];
     $26_1 = +HEAPF64[($1_1 + 16 | 0) >> 3];
     $27_1 = +HEAPF64[$1_1 >> 3];
     HEAP32[($5_1 + 20 | 0) >> 2] = 0;
     HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround($24_1 * Math_fround(Math_fround($27_1) - $21_1));
     HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround($14_1 * Math_fround(Math_fround($26_1) - $19_1));
     HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround($16_1 * Math_fround(Math_fround($25_1) - $20_1));
     HEAP32[($11_1 + 4 | 0) >> 2] = $13_1;
     $12_1 = $11_1 + -8 | 0;
     label$22 : {
      label$23 : {
       $18_1 = Math_fround(HEAPF32[$9_1 >> 2]);
       if (!(Math_fround(Math_abs($18_1)) < Math_fround(2147483648.0))) {
        break label$23
       }
       $6_1 = ~~$18_1;
       break label$22;
      }
      $6_1 = -2147483648;
     }
     HEAP32[$12_1 >> 2] = $6_1;
     $12_1 = $11_1 + -4 | 0;
     label$24 : {
      label$25 : {
       $18_1 = Math_fround(HEAPF32[$7_1 >> 2]);
       if (!(Math_fround(Math_abs($18_1)) < Math_fround(2147483648.0))) {
        break label$25
       }
       $6_1 = ~~$18_1;
       break label$24;
      }
      $6_1 = -2147483648;
     }
     HEAP32[$12_1 >> 2] = $6_1;
     label$26 : {
      label$27 : {
       $18_1 = Math_fround(HEAPF32[$10_1 >> 2]);
       if (!(Math_fround(Math_abs($18_1)) < Math_fround(2147483648.0))) {
        break label$27
       }
       $12_1 = ~~$18_1;
       break label$26;
      }
      $12_1 = -2147483648;
     }
     HEAP32[$11_1 >> 2] = $12_1;
     $11_1 = $11_1 + 16 | 0;
     $1_1 = $1_1 + $3_1 | 0;
     $13_1 = $13_1 + 1 | 0;
     if (($4_1 | 0) != ($13_1 | 0)) {
      continue label$21
     }
     break label$21;
    };
   }
   if (($4_1 | 0) < (2 | 0)) {
    break label$11
   }
   $170($5_1 + 24 | 0 | 0, $5_1 + 8 | 0 | 0, 0 | 0, $4_1 + -1 | 0 | 0);
  }
  HEAP32[($0_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  label$28 : {
   $12_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
   if (($12_1 | 0) >= ($4_1 | 0)) {
    break label$28
   }
   label$29 : {
    if ((HEAP32[($0_1 + 88 | 0) >> 2] | 0 | 0) >= ($4_1 | 0)) {
     break label$29
    }
    label$30 : {
     label$31 : {
      if ($4_1) {
       break label$31
      }
      $13_1 = 0;
      $11_1 = $12_1;
      break label$30;
     }
     $13_1 = $79($4_1 << 2 | 0 | 0, 16 | 0) | 0;
     $11_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
    }
    label$32 : {
     if (($11_1 | 0) < (1 | 0)) {
      break label$32
     }
     $1_1 = 0;
     label$33 : while (1) {
      HEAP32[($13_1 + $1_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 92 | 0) >> 2] | 0) + $1_1 | 0) >> 2] | 0;
      $1_1 = $1_1 + 4 | 0;
      $11_1 = $11_1 + -1 | 0;
      if ($11_1) {
       continue label$33
      }
      break label$33;
     };
    }
    label$34 : {
     $1_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$34
     }
     label$35 : {
      if (!(HEAPU8[($0_1 + 96 | 0) >> 0] | 0)) {
       break label$35
      }
      $80($1_1 | 0);
     }
     HEAP32[($0_1 + 92 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 92 | 0) >> 2] = $13_1;
    HEAP32[($0_1 + 88 | 0) >> 2] = $4_1;
    HEAP8[($0_1 + 96 | 0) >> 0] = 1;
   }
   $1_1 = $12_1 << 2 | 0;
   $11_1 = $4_1 - $12_1 | 0;
   label$36 : while (1) {
    HEAP32[((HEAP32[($0_1 + 92 | 0) >> 2] | 0) + $1_1 | 0) >> 2] = 0;
    $1_1 = $1_1 + 4 | 0;
    $11_1 = $11_1 + -1 | 0;
    if ($11_1) {
     continue label$36
    }
    break label$36;
   };
  }
  HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
  label$37 : {
   if (($4_1 | 0) < (1 | 0)) {
    break label$37
   }
   $10_1 = 0;
   label$38 : while (1) {
    label$39 : {
     $6_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
     if ($6_1) {
      break label$39
     }
     label$40 : {
      label$41 : {
       $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$41
       }
       HEAP32[($0_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       break label$40;
      }
      $1_1 = $79(12 | 0, 16 | 0) | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = 0;
      $11_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $11_1;
      (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $79(Math_imul($11_1, 112) | 0, 16 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      $11_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
      HEAP32[($1_1 + 8 | 0) >> 2] = $11_1;
     }
     $6_1 = HEAP32[$1_1 >> 2] | 0;
     $13_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if (($13_1 | 0) < (1 | 0)) {
      break label$39
     }
     $1_1 = 0;
     $11_1 = $6_1;
     label$42 : while (1) {
      $12_1 = $11_1 + 112 | 0;
      $1_1 = $1_1 + 1 | 0;
      HEAP32[$11_1 >> 2] = ($1_1 | 0) < ($13_1 | 0) ? $12_1 : 0;
      $11_1 = $12_1;
      if (($13_1 | 0) != ($1_1 | 0)) {
       continue label$42
      }
      break label$42;
     };
    }
    HEAP32[($0_1 + 40 | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
    $1_1 = $6_1 + 8 | 0;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 16 | 0) >> 2] = 0;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$0 = 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 104 | 0) >> 2] = -1;
    HEAP32[$1_1 >> 2] = 0;
    $1_1 = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + ($10_1 << 4 | 0) | 0;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $698_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1;
    HEAP32[($6_1 + 88 | 0) >> 2] = $698_1;
    HEAP32[($6_1 + 92 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $703_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $6_1 + 96 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $703_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 104 | 0) >> 2] = -1;
    HEAP32[((HEAP32[($0_1 + 92 | 0) >> 2] | 0) + ($10_1 << 2 | 0) | 0) >> 2] = $6_1;
    $10_1 = $10_1 + 1 | 0;
    if (($10_1 | 0) != ($4_1 | 0)) {
     continue label$38
    }
    break label$38;
   };
  }
  label$43 : {
   $1_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$43
   }
   label$44 : {
    if (!(HEAPU8[($5_1 + 40 | 0) >> 0] | 0)) {
     break label$44
    }
    $80($1_1 | 0);
   }
   HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  }
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 116 | 0) >> 2] = 0;
  HEAP32[($0_1 + 120 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 100 | 0) >> 2] = -3;
  HEAP32[($0_1 + 60 | 0) >> 2] = Math_imul($4_1, 6);
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  HEAP8[($5_1 + 40 | 0) >> 0] = 1;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $164($0_1 | 0, 0 | 0, $4_1 | 0, $5_1 + 8 | 0 | 0);
  HEAP32[($0_1 + 124 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  label$45 : {
   $1_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$45
   }
   label$46 : {
    if (!(HEAPU8[($5_1 + 40 | 0) >> 0] | 0)) {
     break label$46
    }
    $80($1_1 | 0);
   }
   HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  }
  global$0 = $5_1 + 48 | 0;
 }
 
 function $170($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $10_1 = 0, $11_1 = 0, $14_1 = 0, $5_1 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $13_1 = 0, $7_1 = 0, $105_1 = 0, $108_1 = 0, $111_1 = 0, $115_1 = 0, $122_1 = 0, $126_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $6_1 = $5_1 + ((($3_1 + $2_1 | 0 | 0) / (2 | 0) | 0) << 4 | 0) | 0;
  $7_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  $8_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  $9_1 = HEAP32[$6_1 >> 2] | 0;
  $10_1 = $2_1;
  $11_1 = $3_1;
  label$1 : while (1) {
   $6_1 = $5_1 + ($10_1 << 4 | 0) | 0;
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      $12_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      if (($12_1 | 0) < ($8_1 | 0)) {
       break label$4
      }
      if (($12_1 | 0) != ($8_1 | 0)) {
       break label$2
      }
      $12_1 = HEAP32[$6_1 >> 2] | 0;
      if (($12_1 | 0) < ($9_1 | 0)) {
       break label$4
      }
      if (($12_1 | 0) != ($9_1 | 0)) {
       break label$2
      }
      if ((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) >= ($7_1 | 0)) {
       break label$2
      }
     }
     $6_1 = $6_1 + 16 | 0;
     $10_1 = $10_1 + 1 | 0;
     continue label$3;
    };
   }
   $12_1 = $11_1 << 4 | 0;
   label$5 : {
    label$6 : while (1) {
     label$7 : {
      $13_1 = $5_1 + $12_1 | 0;
      $14_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
      if (($8_1 | 0) < ($14_1 | 0)) {
       break label$7
      }
      if (($8_1 | 0) != ($14_1 | 0)) {
       break label$5
      }
      $14_1 = HEAP32[$13_1 >> 2] | 0;
      if (($9_1 | 0) < ($14_1 | 0)) {
       break label$7
      }
      if (($9_1 | 0) != ($14_1 | 0)) {
       break label$5
      }
      if (($7_1 | 0) >= (HEAP32[($13_1 + 8 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
     }
     $12_1 = $12_1 + -16 | 0;
     $11_1 = $11_1 + -1 | 0;
     continue label$6;
    };
   }
   label$8 : {
    if (($10_1 | 0) > ($11_1 | 0)) {
     break label$8
    }
    $14_1 = $4_1 + 8 | 0;
    $5_1 = $6_1 + 8 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $105_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $14_1;
    HEAP32[i64toi32_i32$0 >> 2] = $105_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = HEAP32[$6_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    $108_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1;
    HEAP32[i64toi32_i32$1 >> 2] = $108_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $13_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $111_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1;
    HEAP32[i64toi32_i32$0 >> 2] = $111_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $115_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1;
    HEAP32[i64toi32_i32$1 >> 2] = $115_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $6_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $12_1 | 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $122_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1;
    HEAP32[i64toi32_i32$0 >> 2] = $122_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $126_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $6_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $126_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $11_1 = $11_1 + -1 | 0;
    $10_1 = $10_1 + 1 | 0;
   }
   label$9 : {
    if (($10_1 | 0) > ($11_1 | 0)) {
     break label$9
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    continue label$1;
   }
   break label$1;
  };
  label$10 : {
   if (($11_1 | 0) <= ($2_1 | 0)) {
    break label$10
   }
   $170($0_1 | 0, $1_1 | 0, $2_1 | 0, $11_1 | 0);
  }
  label$11 : {
   if (($10_1 | 0) >= ($3_1 | 0)) {
    break label$11
   }
   $170($0_1 | 0, $1_1 | 0, $10_1 | 0, $3_1 | 0);
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $171($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $6_1 = Math_fround(0), $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if ((HEAP32[($2_1 + 100 | 0) >> 2] | 0 | 0) < (0 | 0)) {
         break label$6
        }
        HEAPF32[($3_1 + ((HEAP32[($1_1 + 108 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAP32[($2_1 + 88 | 0) >> 2] | 0 | 0);
        break label$5;
       }
       $4_1 = Math_fround($172($2_1 + 24 | 0 | 0));
       $5_1 = $2_1 + 72 | 0;
       $6_1 = Math_fround($172($5_1 | 0));
       HEAPF32[($3_1 + ((HEAP32[($1_1 + 108 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround($4_1 / $6_1);
       if ((HEAP32[($2_1 + 100 | 0) >> 2] | 0 | 0) < (0 | 0)) {
        break label$4
       }
      }
      HEAPF32[($3_1 + ((HEAP32[($1_1 + 112 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround(HEAP32[($2_1 + 92 | 0) >> 2] | 0 | 0);
      break label$3;
     }
     $4_1 = Math_fround($172($2_1 + 40 | 0 | 0));
     $6_1 = Math_fround($172($5_1 | 0));
     HEAPF32[($3_1 + ((HEAP32[($1_1 + 112 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = Math_fround($4_1 / $6_1);
     if ((HEAP32[($2_1 + 100 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break label$2
     }
    }
    $4_1 = Math_fround(HEAP32[($2_1 + 96 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $4_1 = Math_fround(Math_fround($172($2_1 + 56 | 0 | 0)) / Math_fround($172($2_1 + 72 | 0 | 0)));
  }
  HEAPF32[($3_1 + ((HEAP32[($1_1 + 104 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])) + Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]));
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2])) + Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]));
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 >> 2]) * Math_fround(HEAPF32[$1_1 >> 2])) + Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]));
  global$0 = $3_1 + 16 | 0;
 }
 
 function $172($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $1_1 = 0, $2_1 = 0, $2$hi = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $3_1 = Math_fround(0), $14_1 = Math_fround(0), $4_1 = 0, $4$hi = 0, $24_1 = 0, $26_1 = 0, $27$hi = 0, $29_1 = 0, $29$hi = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $19_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $20_1 = 0
      } else {
       $20_1 = 1
      }
      $21_1 = $20_1;
     } else {
      $21_1 = 0
     }
     $19_1 = $21_1;
    }
    if ($19_1) {
     break label$2
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$3 = 0;
    $14_1 = Math_fround(Math_fround(+(i64toi32_i32$1 >>> 0) + 4294967296.0 * +(i64toi32_i32$2 >>> 0)) * Math_fround(18446744073709551615.0));
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    i64toi32_i32$3 = 0;
    $3_1 = Math_fround($14_1 + Math_fround(+(i64toi32_i32$2 >>> 0) + 4294967296.0 * +(i64toi32_i32$1 >>> 0)));
    break label$1;
   }
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   i64toi32_i32$3 = $1_1;
   HEAP32[i64toi32_i32$3 >> 2] = i64toi32_i32$4;
   HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$5;
   $24_1 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$5 = i64toi32_i32$1;
   $26_1 = !(i64toi32_i32$0 | i64toi32_i32$1 | 0);
   i64toi32_i32$5 = 0;
   $27$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
   $29_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $29$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $27$hi;
   i64toi32_i32$5 = $26_1;
   i64toi32_i32$2 = $29$hi;
   i64toi32_i32$0 = $29_1;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$5 = $24_1;
   HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$4;
   $3_1 = Math_fround(-Math_fround($172($1_1 | 0)));
  }
  global$0 = $1_1 + 16 | 0;
  return Math_fround($3_1);
 }
 
 function $173($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $3_1 = 0, $29_1 = 0, $28_1 = 0, $45_1 = Math_fround(0), $25_1 = 0, $31_1 = 0, $21_1 = 0, $5_1 = Math_fround(0), $16$hi = 0, $32_1 = 0, $42$hi = 0, $51_1 = Math_fround(0), $8_1 = 0, $22_1 = 0, $27_1 = 0, $30_1 = 0, $43$hi = 0, $7_1 = 0, $34_1 = 0, $9_1 = 0, $11$hi = 0, $14$hi = 0, $16_1 = 0, $23_1 = 0, $26_1 = 0, $44$hi = 0, $52_1 = Math_fround(0), $53_1 = Math_fround(0), $33_1 = 0, $36_1 = 0, $42_1 = 0, $43_1 = 0, $6_1 = 0, $11_1 = 0, $20_1 = 0, $24_1 = 0, $37_1 = 0, $12$hi = 0, $13$hi = 0, $14_1 = 0, $15$hi = 0, $17$hi = 0, $18$hi = 0, $44_1 = 0, $10_1 = 0, $13_1 = 0, $15_1 = 0, $17_1 = 0, $35_1 = 0, $47_1 = Math_fround(0), $49_1 = Math_fround(0), $54_1 = Math_fround(0), $56_1 = Math_fround(0), $12_1 = 0, $18_1 = 0, $19_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $46_1 = Math_fround(0), $48_1 = Math_fround(0), $50_1 = Math_fround(0), $57_1 = Math_fround(0), $58_1 = Math_fround(0), $234_1 = 0, $237_1 = 0, $387_1 = 0, $387$hi = 0, $393_1 = 0, $393$hi = 0, $394_1 = 0, $394$hi = 0, $402_1 = 0, $412_1 = 0, $412$hi = 0, $418_1 = 0, $418$hi = 0, $419_1 = 0, $419$hi = 0, $420$hi = 0, $428_1 = 0, $428$hi = 0, $434_1 = 0, $434$hi = 0, $435_1 = 0, $435$hi = 0, $445_1 = 0, $445$hi = 0, $467_1 = 0, $476_1 = 0, $483$hi = 0, $493_1 = 0, $499_1 = 0, $506$hi = 0, $516_1 = 0, $522_1 = 0, $535_1 = 0, $541_1 = 0, $577_1 = 0, $577$hi = 0, $55_1 = Math_fround(0), $746_1 = Math_fround(0), $765_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 128 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
    if ($4_1) {
     break label$2
    }
    $5_1 = Math_fround(0.0);
    break label$1;
   }
   $6_1 = (HEAP32[($0_1 + 100 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($4_1 + 104 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 100 | 0) >> 2] = $6_1;
   $7_1 = $79(4 | 0, 16 | 0) | 0;
   HEAP32[$7_1 >> 2] = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
   $8_1 = HEAP32[($4_1 + 96 | 0) >> 2] | 0;
   $9_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
   $10_1 = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
   i64toi32_i32$0 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$1 = ($3_1 + 96 | 0) + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = (i64toi32_i32$1 + 80 | 0) + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = (i64toi32_i32$1 + 64 | 0) + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $12_1 = 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $13_1 = 0;
   $13$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $15_1 = 0;
   $15$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $16_1 = 0;
   $16$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $17_1 = 0;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $18_1 = 0;
   $18$hi = i64toi32_i32$0;
   $19_1 = $7_1;
   $20_1 = 1;
   $21_1 = 1;
   $22_1 = 0;
   $23_1 = 0;
   $24_1 = 0;
   $25_1 = 0;
   label$3 : while (1) {
    label$4 : {
     $21_1 = $21_1 + -1 | 0;
     $26_1 = HEAP32[($7_1 + ($21_1 << 2 | 0) | 0) >> 2] | 0;
     $27_1 = HEAP32[($26_1 + 8 | 0) >> 2] | 0;
     if (!$27_1) {
      break label$4
     }
     label$5 : while (1) {
      label$6 : {
       $4_1 = HEAP32[($27_1 + 12 | 0) >> 2] | 0;
       if ((HEAP32[($4_1 + 104 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) {
        break label$6
       }
       HEAP32[($4_1 + 104 | 0) >> 2] = $6_1;
       label$7 : {
        if (($21_1 | 0) != ($20_1 | 0)) {
         break label$7
        }
        label$8 : {
         $20_1 = $21_1 ? $21_1 << 1 | 0 : 1;
         if (($21_1 | 0) < ($20_1 | 0)) {
          break label$8
         }
         $20_1 = $21_1;
         break label$7;
        }
        label$9 : {
         label$10 : {
          if ($20_1) {
           break label$10
          }
          $28_1 = 0;
          break label$9;
         }
         $28_1 = $79($20_1 << 2 | 0 | 0, 16 | 0) | 0;
        }
        label$11 : {
         label$12 : {
          label$13 : {
           if (($21_1 | 0) < (1 | 0)) {
            break label$13
           }
           $4_1 = $28_1;
           $29_1 = $21_1;
           label$14 : while (1) {
            HEAP32[$4_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
            $4_1 = $4_1 + 4 | 0;
            $7_1 = $7_1 + 4 | 0;
            $29_1 = $29_1 + -1 | 0;
            if ($29_1) {
             continue label$14
            }
            break label$12;
           };
          }
          if (!$7_1) {
           break label$11
          }
         }
         $80($19_1 | 0);
        }
        $19_1 = $28_1;
        $7_1 = $28_1;
       }
       HEAP32[($7_1 + ($21_1 << 2 | 0) | 0) >> 2] = HEAP32[($27_1 + 12 | 0) >> 2] | 0;
       $21_1 = $21_1 + 1 | 0;
      }
      label$15 : {
       if ((HEAP32[($27_1 + 20 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) {
        break label$15
       }
       label$16 : {
        $30_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
        if ($30_1) {
         break label$16
        }
        label$17 : {
         label$18 : {
          $4_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$18
          }
          HEAP32[($0_1 + 68 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
          break label$17;
         }
         $4_1 = $79(12 | 0, 16 | 0) | 0;
         HEAP32[($4_1 + 8 | 0) >> 2] = 0;
         $29_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
         HEAP32[($4_1 + 4 | 0) >> 2] = $29_1;
         (wasm2js_i32$0 = $4_1, wasm2js_i32$1 = $79(Math_imul($29_1, 60) | 0, 16 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         $29_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
         HEAP32[($0_1 + 64 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = $29_1;
        }
        $30_1 = HEAP32[$4_1 >> 2] | 0;
        $28_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
        if (($28_1 | 0) < (1 | 0)) {
         break label$16
        }
        $4_1 = 0;
        $29_1 = $30_1;
        label$19 : while (1) {
         $31_1 = $29_1 + 60 | 0;
         $4_1 = $4_1 + 1 | 0;
         HEAP32[$29_1 >> 2] = ($4_1 | 0) < ($28_1 | 0) ? $31_1 : 0;
         $29_1 = $31_1;
         if (($28_1 | 0) != ($4_1 | 0)) {
          continue label$19
         }
         break label$19;
        };
       }
       HEAP32[($30_1 + 8 | 0) >> 2] = 0;
       $4_1 = HEAP32[$30_1 >> 2] | 0;
       HEAP32[$30_1 >> 2] = 0;
       HEAP32[($0_1 + 72 | 0) >> 2] = $4_1;
       $4_1 = HEAP32[($27_1 + 12 | 0) >> 2] | 0;
       HEAP32[($30_1 + 4 | 0) >> 2] = $4_1;
       $29_1 = HEAP32[((HEAP32[((HEAP32[($27_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
       $28_1 = $4_1 + 96 | 0;
       i64toi32_i32$2 = $28_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $234_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $30_1 + 20 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $234_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 92 | 0) >> 2] | 0;
       $237_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $30_1;
       HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = $237_1;
       HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
       $31_1 = HEAP32[$28_1 >> 2] | 0;
       $32_1 = HEAP32[($29_1 + 96 | 0) >> 2] | 0;
       $33_1 = i64toi32_i32$2 + 92 | 0;
       $34_1 = HEAP32[$33_1 >> 2] | 0;
       $35_1 = HEAP32[($29_1 + 92 | 0) >> 2] | 0;
       $36_1 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
       $29_1 = HEAP32[($29_1 + 88 | 0) >> 2] | 0;
       HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = -1;
       HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $35_1 - $34_1 | 0;
       HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = $32_1 - $31_1 | 0;
       HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = $29_1 - $36_1 | 0;
       $29_1 = HEAP32[$33_1 >> 2] | 0;
       $28_1 = HEAP32[$28_1 >> 2] | 0;
       $31_1 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
       $32_1 = HEAP32[($26_1 + 88 | 0) >> 2] | 0;
       $33_1 = HEAP32[($26_1 + 92 | 0) >> 2] | 0;
       $34_1 = HEAP32[($26_1 + 96 | 0) >> 2] | 0;
       HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = -1;
       HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = $34_1 - $28_1 | 0;
       HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $33_1 - $29_1 | 0;
       HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = $32_1 - $31_1 | 0;
       $29_1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
       HEAP32[($29_1 ? $29_1 + 8 | 0 : i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] = i64toi32_i32$1;
       label$20 : {
        label$21 : {
         if (($25_1 | 0) == ($24_1 | 0)) {
          break label$21
         }
         $37_1 = $23_1;
         break label$20;
        }
        label$22 : {
         $24_1 = $25_1 ? $25_1 << 1 | 0 : 1;
         if (($25_1 | 0) < ($24_1 | 0)) {
          break label$22
         }
         $24_1 = $25_1;
         $37_1 = $23_1;
         break label$20;
        }
        label$23 : {
         label$24 : {
          if ($24_1) {
           break label$24
          }
          $37_1 = 0;
          break label$23;
         }
         $37_1 = $79($24_1 << 2 | 0 | 0, 16 | 0) | 0;
        }
        label$25 : {
         label$26 : {
          label$27 : {
           if (($25_1 | 0) < (1 | 0)) {
            break label$27
           }
           $4_1 = $37_1;
           $29_1 = $25_1;
           label$28 : while (1) {
            HEAP32[$4_1 >> 2] = HEAP32[$22_1 >> 2] | 0;
            $4_1 = $4_1 + 4 | 0;
            $22_1 = $22_1 + 4 | 0;
            $29_1 = $29_1 + -1 | 0;
            if ($29_1) {
             continue label$28
            }
            break label$26;
           };
          }
          if (!$22_1) {
           break label$25
          }
         }
         $80($23_1 | 0);
        }
        $22_1 = $37_1;
       }
       HEAP32[($22_1 + ($25_1 << 2 | 0) | 0) >> 2] = $30_1;
       $28_1 = 0;
       $31_1 = 0;
       $4_1 = $27_1;
       label$29 : while (1) {
        $29_1 = $31_1;
        label$30 : {
         if (!$28_1) {
          break label$30
         }
         if (!$29_1) {
          break label$30
         }
         $31_1 = HEAP32[($29_1 + 96 | 0) >> 2] | 0;
         $32_1 = $31_1 - $8_1 | 0;
         $33_1 = HEAP32[($28_1 + 92 | 0) >> 2] | 0;
         $34_1 = $33_1 - $9_1 | 0;
         $35_1 = HEAP32[($29_1 + 92 | 0) >> 2] | 0;
         $36_1 = $35_1 - $9_1 | 0;
         $23_1 = HEAP32[($28_1 + 96 | 0) >> 2] | 0;
         $38_1 = $23_1 - $8_1 | 0;
         i64toi32_i32$1 = Math_imul($32_1, $34_1) - Math_imul($36_1, $38_1) | 0;
         i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
         $387_1 = i64toi32_i32$1;
         $387$hi = i64toi32_i32$0;
         $39_1 = HEAP32[($26_1 + 88 | 0) >> 2] | 0;
         i64toi32_i32$1 = $39_1 - $10_1 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
         $393_1 = i64toi32_i32$1;
         $393$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $387$hi;
         i64toi32_i32$1 = $393$hi;
         i64toi32_i32$1 = __wasm_i64_mul($387_1 | 0, i64toi32_i32$0 | 0, $393_1 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $394_1 = i64toi32_i32$1;
         $394$hi = i64toi32_i32$0;
         $28_1 = HEAP32[($28_1 + 88 | 0) >> 2] | 0;
         $40_1 = $28_1 - $10_1 | 0;
         $402_1 = Math_imul($36_1, $40_1);
         $36_1 = HEAP32[($29_1 + 88 | 0) >> 2] | 0;
         $41_1 = $36_1 - $10_1 | 0;
         i64toi32_i32$1 = $402_1 - Math_imul($41_1, $34_1) | 0;
         i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
         $412_1 = i64toi32_i32$1;
         $412$hi = i64toi32_i32$0;
         $34_1 = HEAP32[($26_1 + 96 | 0) >> 2] | 0;
         i64toi32_i32$1 = $34_1 - $8_1 | 0;
         i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
         $418_1 = i64toi32_i32$1;
         $418$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $412$hi;
         i64toi32_i32$1 = $418$hi;
         i64toi32_i32$1 = __wasm_i64_mul($412_1 | 0, i64toi32_i32$0 | 0, $418_1 | 0, i64toi32_i32$1 | 0) | 0;
         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
         $419_1 = i64toi32_i32$1;
         $419$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $394$hi;
         i64toi32_i32$2 = $394_1;
         i64toi32_i32$1 = $419$hi;
         i64toi32_i32$3 = $419_1;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         $420$hi = i64toi32_i32$5;
         i64toi32_i32$2 = Math_imul($41_1, $38_1) - Math_imul($32_1, $40_1) | 0;
         i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
         $428_1 = i64toi32_i32$2;
         $428$hi = i64toi32_i32$5;
         $32_1 = HEAP32[($26_1 + 92 | 0) >> 2] | 0;
         i64toi32_i32$2 = $32_1 - $9_1 | 0;
         i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
         $434_1 = i64toi32_i32$2;
         $434$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $428$hi;
         i64toi32_i32$2 = $434$hi;
         i64toi32_i32$2 = __wasm_i64_mul($428_1 | 0, i64toi32_i32$5 | 0, $434_1 | 0, i64toi32_i32$2 | 0) | 0;
         i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
         $435_1 = i64toi32_i32$2;
         $435$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $420$hi;
         i64toi32_i32$0 = i64toi32_i32$4;
         i64toi32_i32$2 = $435$hi;
         i64toi32_i32$3 = $435_1;
         i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
         i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         $42_1 = i64toi32_i32$1;
         $42$hi = i64toi32_i32$4;
         i64toi32_i32$0 = (($39_1 + $10_1 | 0) + $28_1 | 0) + $36_1 | 0;
         i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
         $445_1 = i64toi32_i32$0;
         $445$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $42$hi;
         i64toi32_i32$0 = $445$hi;
         i64toi32_i32$0 = __wasm_i64_mul(i64toi32_i32$1 | 0, i64toi32_i32$4 | 0, $445_1 | 0, i64toi32_i32$0 | 0) | 0;
         i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
         $43_1 = i64toi32_i32$0;
         $43$hi = i64toi32_i32$4;
         i64toi32_i32$5 = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 63;
         i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
          $114_1 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
         } else {
          i64toi32_i32$0 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
          $114_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
         }
         $44_1 = $114_1;
         $44$hi = i64toi32_i32$0;
         $28_1 = ($34_1 + $8_1 | 0) + $23_1 | 0;
         $32_1 = (($32_1 + $9_1 | 0) + $33_1 | 0) + $35_1 | 0;
         label$31 : {
          i64toi32_i32$0 = $43$hi;
          i64toi32_i32$0 = $18$hi;
          i64toi32_i32$0 = $43$hi;
          i64toi32_i32$4 = $43_1;
          i64toi32_i32$5 = $18$hi;
          i64toi32_i32$3 = $18_1;
          i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          $18_1 = i64toi32_i32$2;
          $18$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $43$hi;
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$0 = i64toi32_i32$2;
          i64toi32_i32$4 = $43$hi;
          i64toi32_i32$3 = $43_1;
          if (i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
           break label$31
          }
          $467_1 = $3_1;
          i64toi32_i32$0 = $17$hi;
          i64toi32_i32$3 = $17_1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$4 = 1;
          i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
          i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
           i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
          }
          $17_1 = i64toi32_i32$5;
          $17$hi = i64toi32_i32$2;
          i64toi32_i32$3 = $467_1;
          HEAP32[(i64toi32_i32$3 + 104 | 0) >> 2] = i64toi32_i32$5;
          HEAP32[(i64toi32_i32$3 + 108 | 0) >> 2] = i64toi32_i32$2;
         }
         $28_1 = $28_1 + $31_1 | 0;
         i64toi32_i32$2 = $18$hi;
         i64toi32_i32$3 = $3_1;
         HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] = $18_1;
         HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] = i64toi32_i32$2;
         $476_1 = i64toi32_i32$3;
         i64toi32_i32$2 = $17$hi;
         i64toi32_i32$2 = $44$hi;
         i64toi32_i32$2 = $17$hi;
         i64toi32_i32$0 = $17_1;
         i64toi32_i32$3 = $44$hi;
         i64toi32_i32$4 = $44_1;
         i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
         i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
         }
         $17_1 = i64toi32_i32$1;
         $17$hi = i64toi32_i32$5;
         i64toi32_i32$0 = $476_1;
         HEAP32[(i64toi32_i32$0 + 104 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[(i64toi32_i32$0 + 108 | 0) >> 2] = i64toi32_i32$5;
         i64toi32_i32$5 = $42$hi;
         i64toi32_i32$0 = $32_1;
         i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
         $483$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $42$hi;
         i64toi32_i32$0 = $483$hi;
         i64toi32_i32$0 = __wasm_i64_mul($42_1 | 0, i64toi32_i32$5 | 0, $32_1 | 0, i64toi32_i32$0 | 0) | 0;
         i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
         $43_1 = i64toi32_i32$0;
         $43$hi = i64toi32_i32$5;
         i64toi32_i32$2 = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$4 = 63;
         i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
          $115_1 = i64toi32_i32$5 >> i64toi32_i32$3 | 0;
         } else {
          i64toi32_i32$0 = i64toi32_i32$5 >> i64toi32_i32$3 | 0;
          $115_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
         }
         $44_1 = $115_1;
         $44$hi = i64toi32_i32$0;
         label$32 : {
          i64toi32_i32$0 = $16$hi;
          i64toi32_i32$0 = $43$hi;
          i64toi32_i32$0 = $16$hi;
          i64toi32_i32$5 = $16_1;
          i64toi32_i32$2 = $43$hi;
          i64toi32_i32$4 = $43_1;
          i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          $43_1 = i64toi32_i32$3;
          $43$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $16$hi;
          i64toi32_i32$1 = $43$hi;
          i64toi32_i32$0 = i64toi32_i32$3;
          i64toi32_i32$5 = $16$hi;
          i64toi32_i32$4 = $16_1;
          if (i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$4 >>> 0 | 0) | 0) {
           break label$32
          }
          $493_1 = $3_1;
          i64toi32_i32$0 = $15$hi;
          i64toi32_i32$4 = $15_1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$5 = 1;
          i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
          i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
           i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
          }
          $15_1 = i64toi32_i32$2;
          $15$hi = i64toi32_i32$3;
          i64toi32_i32$4 = $493_1;
          HEAP32[(i64toi32_i32$4 + 88 | 0) >> 2] = i64toi32_i32$2;
          HEAP32[(i64toi32_i32$4 + 92 | 0) >> 2] = i64toi32_i32$3;
         }
         i64toi32_i32$3 = $43$hi;
         i64toi32_i32$4 = $3_1;
         HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] = $43_1;
         HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] = i64toi32_i32$3;
         $499_1 = i64toi32_i32$4;
         i64toi32_i32$3 = $15$hi;
         i64toi32_i32$3 = $44$hi;
         i64toi32_i32$3 = $15$hi;
         i64toi32_i32$0 = $15_1;
         i64toi32_i32$4 = $44$hi;
         i64toi32_i32$5 = $44_1;
         i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
         i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
         if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
         }
         $15_1 = i64toi32_i32$1;
         $15$hi = i64toi32_i32$2;
         i64toi32_i32$0 = $499_1;
         HEAP32[(i64toi32_i32$0 + 88 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[(i64toi32_i32$0 + 92 | 0) >> 2] = i64toi32_i32$2;
         i64toi32_i32$2 = $42$hi;
         i64toi32_i32$0 = $28_1;
         i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
         $506$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $42$hi;
         i64toi32_i32$0 = $506$hi;
         i64toi32_i32$0 = __wasm_i64_mul($42_1 | 0, i64toi32_i32$2 | 0, $28_1 | 0, i64toi32_i32$0 | 0) | 0;
         i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
         $16_1 = i64toi32_i32$0;
         $16$hi = i64toi32_i32$2;
         i64toi32_i32$3 = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$5 = 63;
         i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
          $116_1 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
         } else {
          i64toi32_i32$0 = i64toi32_i32$2 >> i64toi32_i32$4 | 0;
          $116_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
         }
         $44_1 = $116_1;
         $44$hi = i64toi32_i32$0;
         label$33 : {
          i64toi32_i32$0 = $14$hi;
          i64toi32_i32$0 = $16$hi;
          i64toi32_i32$0 = $14$hi;
          i64toi32_i32$2 = $14_1;
          i64toi32_i32$3 = $16$hi;
          i64toi32_i32$5 = $16_1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          $16_1 = i64toi32_i32$4;
          $16$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $14$hi;
          i64toi32_i32$1 = $16$hi;
          i64toi32_i32$0 = i64toi32_i32$4;
          i64toi32_i32$2 = $14$hi;
          i64toi32_i32$5 = $14_1;
          if (i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0 | 0) | 0) {
           break label$33
          }
          $516_1 = $3_1;
          i64toi32_i32$0 = $13$hi;
          i64toi32_i32$5 = $13_1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$2 = 1;
          i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $13_1 = i64toi32_i32$3;
          $13$hi = i64toi32_i32$4;
          i64toi32_i32$5 = $516_1;
          HEAP32[(i64toi32_i32$5 + 72 | 0) >> 2] = i64toi32_i32$3;
          HEAP32[(i64toi32_i32$5 + 76 | 0) >> 2] = i64toi32_i32$4;
         }
         i64toi32_i32$4 = $16$hi;
         i64toi32_i32$5 = $3_1;
         HEAP32[(i64toi32_i32$5 + 64 | 0) >> 2] = $16_1;
         HEAP32[(i64toi32_i32$5 + 68 | 0) >> 2] = i64toi32_i32$4;
         $522_1 = i64toi32_i32$5;
         i64toi32_i32$4 = $13$hi;
         i64toi32_i32$4 = $44$hi;
         i64toi32_i32$4 = $13$hi;
         i64toi32_i32$0 = $13_1;
         i64toi32_i32$5 = $44$hi;
         i64toi32_i32$2 = $44_1;
         i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
         i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
         }
         $13_1 = i64toi32_i32$1;
         $13$hi = i64toi32_i32$3;
         i64toi32_i32$0 = $522_1;
         HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] = i64toi32_i32$3;
         i64toi32_i32$3 = $42$hi;
         i64toi32_i32$4 = $42_1;
         i64toi32_i32$0 = 0;
         i64toi32_i32$2 = 63;
         i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
          $117_1 = i64toi32_i32$3 >> i64toi32_i32$5 | 0;
         } else {
          i64toi32_i32$0 = i64toi32_i32$3 >> i64toi32_i32$5 | 0;
          $117_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
         }
         $14_1 = $117_1;
         $14$hi = i64toi32_i32$0;
         label$34 : {
          i64toi32_i32$0 = $12$hi;
          i64toi32_i32$0 = $42$hi;
          i64toi32_i32$0 = $12$hi;
          i64toi32_i32$3 = $12_1;
          i64toi32_i32$4 = $42$hi;
          i64toi32_i32$2 = $42_1;
          i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
          }
          $42_1 = i64toi32_i32$5;
          $42$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $12$hi;
          i64toi32_i32$1 = $42$hi;
          i64toi32_i32$0 = i64toi32_i32$5;
          i64toi32_i32$3 = $12$hi;
          i64toi32_i32$2 = $12_1;
          if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
           break label$34
          }
          $535_1 = $3_1;
          i64toi32_i32$0 = $11$hi;
          i64toi32_i32$2 = $11_1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $11_1 = i64toi32_i32$4;
          $11$hi = i64toi32_i32$5;
          i64toi32_i32$2 = $535_1;
          HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] = i64toi32_i32$4;
          HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] = i64toi32_i32$5;
         }
         i64toi32_i32$5 = $42$hi;
         i64toi32_i32$2 = $3_1;
         HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] = $42_1;
         HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] = i64toi32_i32$5;
         $541_1 = i64toi32_i32$2;
         i64toi32_i32$5 = $11$hi;
         i64toi32_i32$5 = $14$hi;
         i64toi32_i32$5 = $11$hi;
         i64toi32_i32$0 = $11_1;
         i64toi32_i32$2 = $14$hi;
         i64toi32_i32$3 = $14_1;
         i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
         i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         $11_1 = i64toi32_i32$1;
         $11$hi = i64toi32_i32$4;
         i64toi32_i32$0 = $541_1;
         HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$4;
         i64toi32_i32$4 = $42$hi;
         $12_1 = $42_1;
         $12$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $16$hi;
         $14_1 = $16_1;
         $14$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $43$hi;
         $16_1 = $43_1;
         $16$hi = i64toi32_i32$4;
        }
        HEAP32[($4_1 + 16 | 0) >> 2] = $30_1;
        HEAP32[($4_1 + 20 | 0) >> 2] = $6_1;
        $31_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
        $28_1 = $29_1;
        $4_1 = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
        if (($4_1 | 0) != ($27_1 | 0)) {
         continue label$29
        }
        break label$29;
       };
       $25_1 = $25_1 + 1 | 0;
       $23_1 = $37_1;
      }
      $27_1 = HEAP32[$27_1 >> 2] | 0;
      if (($27_1 | 0) != (HEAP32[($26_1 + 8 | 0) >> 2] | 0 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    if (($21_1 | 0) > (0 | 0)) {
     continue label$3
    }
    break label$3;
   };
   $5_1 = Math_fround(0.0);
   label$35 : {
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$5 = $11_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
     $118_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $119_1 = 0
      } else {
       $119_1 = 1
      }
      $120_1 = $119_1;
     } else {
      $120_1 = 0
     }
     $118_1 = $120_1;
    }
    if ($118_1) {
     break label$35
    }
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
    $577_1 = i64toi32_i32$5;
    $577$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$5 = $577$hi;
    i64toi32_i32$0 = $577_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    if (!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$5 | 0)) {
     break label$35
    }
    $45_1 = Math_fround($172($3_1 + 96 | 0 | 0));
    HEAPF32[(($3_1 + 32 | 0) + ((HEAP32[($0_1 + 108 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $45_1;
    $45_1 = Math_fround($172($3_1 + 80 | 0 | 0));
    HEAPF32[(($3_1 + 32 | 0) + ((HEAP32[($0_1 + 112 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $45_1;
    $45_1 = Math_fround($172($3_1 + 64 | 0 | 0));
    HEAPF32[(($3_1 + 32 | 0) + ((HEAP32[($0_1 + 104 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $45_1;
    $45_1 = Math_fround($172($3_1 + 48 | 0 | 0));
    $45_1 = Math_fround(Math_fround(1.0) / Math_fround($45_1 * Math_fround(4.0)));
    $5_1 = Math_fround(HEAPF32[$0_1 >> 2]);
    $46_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]) * $45_1) * $5_1);
    HEAPF32[($3_1 + 32 | 0) >> 2] = $46_1;
    $47_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
    $48_1 = Math_fround(Math_fround($45_1 * Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2])) * $47_1);
    HEAPF32[($3_1 + 36 | 0) >> 2] = $48_1;
    $49_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
    $50_1 = Math_fround(Math_fround($45_1 * Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2])) * $49_1);
    HEAPF32[($3_1 + 40 | 0) >> 2] = $50_1;
    label$36 : {
     if ($2_1 > Math_fround(0.0) ^ 1 | 0) {
      break label$36
     }
     label$37 : {
      label$38 : {
       if (($25_1 | 0) >= (1 | 0)) {
        break label$38
       }
       $45_1 = Math_fround(3402823466385288598117041.0e14);
       break label$37;
      }
      $29_1 = ($3_1 + 112 | 0) + ((HEAP32[($0_1 + 104 | 0) >> 2] | 0) << 2 | 0) | 0;
      $28_1 = ($3_1 + 112 | 0) + ((HEAP32[($0_1 + 112 | 0) >> 2] | 0) << 2 | 0) | 0;
      $31_1 = ($3_1 + 112 | 0) + ((HEAP32[($0_1 + 108 | 0) >> 2] | 0) << 2 | 0) | 0;
      $45_1 = Math_fround(3402823466385288598117041.0e14);
      $8_1 = $22_1;
      $9_1 = $25_1;
      label$39 : while (1) {
       $4_1 = HEAP32[$8_1 >> 2] | 0;
       HEAPF32[$31_1 >> 2] = Math_fround(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0);
       HEAPF32[$28_1 >> 2] = Math_fround(HEAP32[($4_1 + 32 | 0) >> 2] | 0 | 0);
       HEAPF32[$29_1 >> 2] = Math_fround(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0);
       $51_1 = Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2]);
       $52_1 = Math_fround(HEAPF32[($3_1 + 120 | 0) >> 2]);
       $53_1 = Math_fround(HEAPF32[($3_1 + 112 | 0) >> 2]);
       HEAPF32[$31_1 >> 2] = Math_fround(HEAP32[($4_1 + 44 | 0) >> 2] | 0 | 0);
       HEAPF32[$28_1 >> 2] = Math_fround(HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0);
       HEAPF32[$29_1 >> 2] = Math_fround(HEAP32[($4_1 + 52 | 0) >> 2] | 0 | 0);
       $54_1 = Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2]);
       $55_1 = Math_fround(HEAPF32[($3_1 + 112 | 0) >> 2]);
       $56_1 = Math_fround(HEAPF32[($3_1 + 120 | 0) >> 2]);
       HEAPF32[$31_1 >> 2] = Math_fround(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
       HEAPF32[$28_1 >> 2] = Math_fround(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
       HEAPF32[$29_1 >> 2] = Math_fround(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
       $57_1 = Math_fround($51_1 * $47_1);
       $56_1 = Math_fround($49_1 * $56_1);
       $58_1 = Math_fround($52_1 * $49_1);
       $52_1 = Math_fround($47_1 * $54_1);
       $51_1 = Math_fround(Math_fround($57_1 * $56_1) - Math_fround($58_1 * $52_1));
       $746_1 = $51_1;
       $53_1 = Math_fround($53_1 * $5_1);
       $54_1 = Math_fround($5_1 * $55_1);
       $52_1 = Math_fround(Math_fround($53_1 * $52_1) - Math_fround($57_1 * $54_1));
       $765_1 = Math_fround($51_1 * $51_1);
       $51_1 = Math_fround(Math_fround($58_1 * $54_1) - Math_fround($53_1 * $56_1));
       $53_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($52_1 * $52_1) + Math_fround($765_1 + Math_fround($51_1 * $51_1))))));
       $51_1 = Math_fround(Math_fround(Math_fround(Math_fround($746_1 * $53_1) * Math_fround(Math_fround($5_1 * Math_fround(HEAPF32[($3_1 + 112 | 0) >> 2])) - $46_1)) + Math_fround(Math_fround($51_1 * $53_1) * Math_fround(Math_fround($47_1 * Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2])) - $48_1))) + Math_fround(Math_fround($52_1 * $53_1) * Math_fround(Math_fround($49_1 * Math_fround(HEAPF32[($3_1 + 120 | 0) >> 2])) - $50_1)));
       $45_1 = $51_1 < $45_1 ? $51_1 : $45_1;
       $8_1 = $8_1 + 4 | 0;
       $9_1 = $9_1 + -1 | 0;
       if ($9_1) {
        continue label$39
       }
       break label$39;
      };
      $5_1 = Math_fround(0.0);
      if (!($45_1 <= Math_fround(0.0) ^ 1 | 0)) {
       break label$35
      }
     }
     $45_1 = Math_fround($45_1 * $2_1);
     $1_1 = $45_1 > $1_1 ? $1_1 : $45_1;
    }
    label$40 : {
     if (($25_1 | 0) >= (1 | 0)) {
      break label$40
     }
     $5_1 = $1_1;
     break label$35;
    }
    $29_1 = 243703;
    $4_1 = $22_1;
    $28_1 = $25_1;
    label$41 : while (1) {
     $31_1 = HEAP32[$4_1 >> 2] | 0;
     $8_1 = $22_1 + ((($29_1 >>> 0) % ($25_1 >>> 0) | 0) << 2 | 0) | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$8_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $31_1;
     $4_1 = $4_1 + 4 | 0;
     $29_1 = Math_imul($29_1, 1664525) + 1013904223 | 0;
     $28_1 = $28_1 + -1 | 0;
     if ($28_1) {
      continue label$41
     }
     break label$41;
    };
    label$42 : {
     if (($25_1 | 0) >= (1 | 0)) {
      break label$42
     }
     $5_1 = $1_1;
     break label$35;
    }
    $4_1 = $22_1;
    label$43 : {
     label$44 : while (1) {
      HEAP8[($3_1 + 24 | 0) >> 0] = 1;
      HEAP32[($3_1 + 16 | 0) >> 2] = 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = $21_1;
      $29_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[($3_1 + 20 | 0) >> 2] = 0;
      $29_1 = $174($0_1 | 0, $29_1 | 0, Math_fround($1_1), $3_1 + 8 | 0 | 0) | 0;
      label$45 : {
       $28_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
       if (!$28_1) {
        break label$45
       }
       label$46 : {
        if (!(HEAPU8[($3_1 + 24 | 0) >> 0] | 0)) {
         break label$46
        }
        $80($28_1 | 0);
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = 0;
      }
      HEAP32[($3_1 + 20 | 0) >> 2] = 0;
      HEAP8[($3_1 + 24 | 0) >> 0] = 1;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$5 = 0;
      HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] = i64toi32_i32$5;
      if (!$29_1) {
       break label$43
      }
      $4_1 = $4_1 + 4 | 0;
      $25_1 = $25_1 + -1 | 0;
      if ($25_1) {
       continue label$44
      }
      break label$44;
     };
     $5_1 = $1_1;
     break label$35;
    }
    $5_1 = Math_fround(-$1_1);
   }
   label$47 : {
    if (!$22_1) {
     break label$47
    }
    $80($23_1 | 0);
   }
   if (!$7_1) {
    break label$1
   }
   $80($19_1 | 0);
  }
  global$0 = $3_1 + 128 | 0;
  return Math_fround($5_1);
 }
 
 function $174($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $6_1 = 0, $10_1 = 0, $5_1 = 0, $20_1 = 0, $13_1 = 0, $67$hi = 0, $65$hi = 0, $8_1 = 0, $7_1 = 0, $67_1 = 0, $11_1 = 0, $65_1 = 0, $4_1 = 0, $28$hi = 0, $51$hi = 0, $66$hi = 0, $53$hi = 0, $28_1 = 0, $26$hi = 0, $60$hi = 0, i64toi32_i32$6 = 0, $21_1 = 0, $30$hi = 0, $64$hi = 0, $53_1 = 0, $26_1 = 0, $66_1 = 0, $51_1 = 0, $34$hi = 0, $60_1 = 0, $32$hi = 0, $64_1 = 0, $30_1 = 0, $32_1 = 0, $34_1 = 0, $68$hi = 0, $62$hi = 0, $55$hi = 0, $27$hi = 0, $59$hi = 0, $70$hi = 0, $58$hi = 0, $9_1 = 0, $27_1 = 0, $56$hi = 0, $72$hi = 0, $12_1 = 0, $52$hi = 0, $57$hi = 0, $68_1 = 0, $45_1 = 0, $63$hi = 0, $70_1 = 0, $14_1 = Math_fround(0), $62_1 = 0, $71$hi = 0, $58_1 = 0, $59_1 = 0, $72_1 = 0, $55_1 = 0, $56_1 = 0, $52_1 = 0, $63_1 = 0, $57_1 = 0, $75$hi = 0, $71_1 = 0, $49_1 = 0, $54_1 = 0, $48_1 = 0, $75_1 = 0, $77$hi = 0, $17_1 = Math_fround(0), $78$hi = 0, $18_1 = Math_fround(0), $46_1 = 0, $61_1 = 0, $76$hi = 0, $77_1 = 0, $79$hi = 0, $69$hi = 0, $78_1 = 0, $19_1 = Math_fround(0), $79_1 = 0, $22_1 = Math_fround(0), $35_1 = 0, $35$hi = 0, $69_1 = 0, $76_1 = 0, $15_1 = Math_fround(0), $73_1 = 0, $29_1 = 0, $31_1 = 0, $33_1 = 0, $47_1 = 0, $80$hi = 0, $81$hi = 0, $16_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $695_1 = 0, $696_1 = 0, $37$hi = 0, $38$hi = 0, $40$hi = 0, $41$hi = 0, $43$hi = 0, $44$hi = 0, $74_1 = 0, $36_1 = 0, $36$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $50_1 = 0, $80_1 = 0, $81_1 = 0, $25_1 = Math_fround(0), $697_1 = 0, $699_1 = 0, $700_1 = 0, $701_1 = 0, $702_1 = 0, $37_1 = 0, $38_1 = 0, $703_1 = 0, $704_1 = 0, $40_1 = 0, $41_1 = 0, $705_1 = 0, $706_1 = 0, $43_1 = 0, $44_1 = 0, $708_1 = 0, $709_1 = 0, $710_1 = 0, $711_1 = 0, $712_1 = 0, $713_1 = 0, $714_1 = 0, $715_1 = 0, $716_1 = 0, $718_1 = 0, $719_1 = 0, $720_1 = 0, $721_1 = 0, $722_1 = 0, $723_1 = 0, $724_1 = 0, $725_1 = 0, $726_1 = 0, $727_1 = 0, $728_1 = 0, $729_1 = 0, $730_1 = 0, $732_1 = 0, $734_1 = 0, $735_1 = 0, $736_1 = 0, $737_1 = 0, $738_1 = 0, $739_1 = 0, $740_1 = 0, $741_1 = 0, $743_1 = 0, $744_1 = 0, $745_1 = 0, $746_1 = 0, $747_1 = 0, $748_1 = 0, $749_1 = 0, $750_1 = 0, $751_1 = 0, $752_1 = 0, $753_1 = 0, $754_1 = 0, $755_1 = 0, $756_1 = 0, $757_1 = 0, $758_1 = 0, $759_1 = 0, $760_1 = 0, $761_1 = 0, $762_1 = 0, $763_1 = 0, $764_1 = 0, $765_1 = 0, $766_1 = 0, $768_1 = 0, $769_1 = 0, $770_1 = 0, $771_1 = 0, $772_1 = 0, $773_1 = 0, $774_1 = 0, $775_1 = 0, $777_1 = 0, $778_1 = 0, $779_1 = 0, $780_1 = 0, $781_1 = 0, $782_1 = 0, $783_1 = 0, $784_1 = 0, $785_1 = 0, $787_1 = 0, $788_1 = 0, $789_1 = 0, $790_1 = 0, $791_1 = 0, $792_1 = 0, $793_1 = 0, $794_1 = 0, $795_1 = 0, $796_1 = 0, $797_1 = 0, $798_1 = 0, $799_1 = 0, $801_1 = 0, $803_1 = 0, $804_1 = 0, $805_1 = 0, $806_1 = 0, $807_1 = 0, $808_1 = 0, $809_1 = 0, $810_1 = 0, $811_1 = 0, $812_1 = 0, $813_1 = 0, $816_1 = 0, $817_1 = 0, $818_1 = 0, $821_1 = 0, $822_1 = 0, $823_1 = 0, $824_1 = 0, $825_1 = 0, $826_1 = 0, $827_1 = 0, $829_1 = 0, $831_1 = 0, $833_1 = 0, $834_1 = 0, $835_1 = 0, $837_1 = 0, $838_1 = 0, $839_1 = 0, $840_1 = 0, $841_1 = 0, $843_1 = 0, $844_1 = 0, $845_1 = 0, $847_1 = 0, $848_1 = 0, $849_1 = 0, $850_1 = 0, $851_1 = 0, $852_1 = 0, $853_1 = 0, $854_1 = 0, $855_1 = 0, $856_1 = 0, $857_1 = 0, $858_1 = 0, $859_1 = 0, $860_1 = 0, $861_1 = 0, $862_1 = 0, $863_1 = 0, $864_1 = 0, $865_1 = 0, $866_1 = 0, $867_1 = 0, $868_1 = 0, $869_1 = 0, $870_1 = 0, $871_1 = 0, $872_1 = 0, $873_1 = 0, $874_1 = 0, $875_1 = 0, $876_1 = 0, $877_1 = 0, $878_1 = 0, $879_1 = 0, $880_1 = 0, $881_1 = 0, $882_1 = 0, $883_1 = 0, $182_1 = Math_fround(0), $185_1 = Math_fround(0), $340_1 = 0, $340$hi = 0, $348_1 = 0, $348$hi = 0, $349$hi = 0, $360_1 = 0, $360$hi = 0, $362_1 = 0, $362$hi = 0, $364$hi = 0, $366_1 = 0, $366$hi = 0, $368$hi = 0, $370_1 = 0, $370$hi = 0, $371$hi = 0, $373$hi = 0, $375_1 = 0, $375$hi = 0, $376$hi = 0, $418_1 = 0, $425_1 = 0, $432_1 = 0, $439_1 = 0, $442_1 = 0, $475_1 = 0, $482_1 = 0, $489_1 = 0, $496_1 = 0, $499_1 = 0, $544_1 = 0, $544$hi = 0, $548$hi = 0, $555_1 = 0, $555$hi = 0, $559$hi = 0, $566_1 = 0, $566$hi = 0, $570$hi = 0, $698_1 = 0, $698$hi = 0, $707_1 = 0, $717_1 = 0, $717$hi = 0, $718$hi = 0, $731_1 = 0, $731$hi = 0, $733_1 = 0, $733$hi = 0, $737$hi = 0, $742_1 = 0, $742$hi = 0, $767_1 = 0, $767$hi = 0, $776_1 = 0, $786_1 = 0, $786$hi = 0, $787$hi = 0, $800_1 = 0, $800$hi = 0, $802_1 = 0, $802$hi = 0, $806$hi = 0, $814_1 = 0, $814$hi = 0, $815_1 = 0, $815$hi = 0, $819_1 = 0, $819$hi = 0, $820_1 = 0, $820$hi = 0, $827$hi = 0, $828_1 = 0, $828$hi = 0, $830_1 = 0, $830$hi = 0, $832_1 = 0, $832$hi = 0, $835$hi = 0, $836_1 = 0, $836$hi = 0, $842_1 = 0, $842$hi = 0, $846_1 = 0, $847$hi = 0, $869$hi = 0, $884_1 = 0, $877$hi = 0, $885_1 = 0, $888_1 = 0, $888$hi = 0, $891_1 = 0, $891$hi = 0, $892$hi = 0, $895_1 = 0, $895$hi = 0, $899_1 = 0, $899$hi = 0, $902_1 = 0, $902$hi = 0, $903$hi = 0, $906_1 = 0, $906$hi = 0, $910_1 = 0, $919$hi = 0, $921_1 = 0, $922$hi = 0, $938_1 = 0, $938$hi = 0, $942$hi = 0, $947_1 = 0, $947$hi = 0, $948_1 = 0, $948$hi = 0, $952$hi = 0, $960_1 = 0, $960$hi = 0, $965_1 = 0, $965$hi = 0, $966_1 = 0, $966$hi = 0, $973$hi = 0, $974_1 = 0, $974$hi = 0, $976_1 = 0, $976$hi = 0, $978_1 = 0, $978$hi = 0, $981$hi = 0, $982_1 = 0, $982$hi = 0, $988_1 = 0, $988$hi = 0, $992_1 = 0, $993$hi = 0, $997_1 = 0, $1006$hi = 0, $1008_1 = 0, $1009$hi = 0, $1092_1 = 0, $1092$hi = 0, $1096$hi = 0, $1105_1 = 0, $1105$hi = 0, $1110_1 = 0, $1110$hi = 0, $1111_1 = 0, $1111$hi = 0, $1116$hi = 0, $1117_1 = 0, $1117$hi = 0, $1119_1 = 0, $1119$hi = 0, $1121_1 = 0, $1121$hi = 0, $1124$hi = 0, $1125_1 = 0, $1125$hi = 0, $1131_1 = 0, $1131$hi = 0, $1135_1 = 0, $1136$hi = 0, $1138_1 = 0, $1146$hi = 0, $1149$hi = 0, $1162_1 = 0, $1162$hi = 0, $1166$hi = 0, $1175_1 = 0, $1175$hi = 0, $1180_1 = 0, $1180$hi = 0, $1181_1 = 0, $1181$hi = 0, $1186$hi = 0, $1187_1 = 0, $1187$hi = 0, $1189_1 = 0, $1189$hi = 0, $1191_1 = 0, $1191$hi = 0, $1194$hi = 0, $1195_1 = 0, $1195$hi = 0, $1201_1 = 0, $1201$hi = 0, $1205_1 = 0, $1206$hi = 0, $1208_1 = 0, $1216$hi = 0, $1218_1 = 0, $1219$hi = 0, $1231_1 = 0, $1231$hi = 0, $1235$hi = 0, $1244 = 0, $1244$hi = 0, $1249 = 0, $1249$hi = 0, $1250 = 0, $1250$hi = 0, $1255$hi = 0, $1256 = 0, $1256$hi = 0, $1258 = 0, $1258$hi = 0, $1260 = 0, $1260$hi = 0, $1263$hi = 0, $1264 = 0, $1264$hi = 0, $1270 = 0, $1270$hi = 0, $1274 = 0, $1275$hi = 0, $1277 = 0, $1285$hi = 0, $1287 = 0, $1288$hi = 0, $1296 = 0, $1296$hi = 0, $1300$hi = 0, $1309 = 0, $1309$hi = 0, $1314 = 0, $1314$hi = 0, $1315 = 0, $1315$hi = 0, $1320$hi = 0, $1321 = 0, $1321$hi = 0, $1323 = 0, $1323$hi = 0, $1325 = 0, $1325$hi = 0, $1328$hi = 0, $1329 = 0, $1329$hi = 0, $1335 = 0, $1335$hi = 0, $1339 = 0, $1340$hi = 0, $1342 = 0, $1350$hi = 0, $1353$hi = 0, $1363$hi = 0, $1366$hi = 0, $1370 = 0, $1370$hi = 0, $1375 = 0, $1375$hi = 0, $1376 = 0, $1376$hi = 0, $1383$hi = 0, $1384 = 0, $1384$hi = 0, $1389$hi = 0, $1390 = 0, $1390$hi = 0, $1392 = 0, $1392$hi = 0, $1394 = 0, $1394$hi = 0, $1397$hi = 0, $1398 = 0, $1398$hi = 0, $1404 = 0, $1404$hi = 0, $1408 = 0, $1409$hi = 0, $1412 = 0, $1421$hi = 0, $1424$hi = 0, $1431 = 0, $1431$hi = 0, $1435$hi = 0, $1444 = 0, $1444$hi = 0, $1449 = 0, $1449$hi = 0, $1450 = 0, $1450$hi = 0, $1455$hi = 0, $1456 = 0, $1456$hi = 0, $1458 = 0, $1458$hi = 0, $1460 = 0, $1460$hi = 0, $1463$hi = 0, $1464 = 0, $1464$hi = 0, $1470 = 0, $1470$hi = 0, $1474 = 0, $1475$hi = 0, $1477 = 0, $1485$hi = 0, $1488$hi = 0, $1500 = 0, $1500$hi = 0, $1504$hi = 0, $1513 = 0, $1513$hi = 0, $1518 = 0, $1518$hi = 0, $1519 = 0, $1519$hi = 0, $1524$hi = 0, $1525 = 0, $1525$hi = 0, $1527 = 0, $1527$hi = 0, $1529 = 0, $1529$hi = 0, $1532$hi = 0, $1533 = 0, $1533$hi = 0, $1539 = 0, $1539$hi = 0, $1543 = 0, $1544$hi = 0, $1546 = 0, $1554$hi = 0, $1556 = 0, $1557$hi = 0, $1572 = 0, $1572$hi = 0, $1576$hi = 0, $1585 = 0, $1585$hi = 0, $1590 = 0, $1590$hi = 0, $1591 = 0, $1591$hi = 0, $1596$hi = 0, $1597 = 0, $1597$hi = 0, $1599 = 0, $1599$hi = 0, $1601 = 0, $1601$hi = 0, $1604$hi = 0, $1605 = 0, $1605$hi = 0, $1611 = 0, $1611$hi = 0, $1615 = 0, $1616$hi = 0, $1621 = 0, $1629$hi = 0, $1632$hi = 0, $1645 = 0, $1645$hi = 0, $1649$hi = 0, $1658 = 0, $1658$hi = 0, $1663 = 0, $1663$hi = 0, $1664 = 0, $1664$hi = 0, $1669$hi = 0, $1670 = 0, $1670$hi = 0, $1672 = 0, $1672$hi = 0, $1674 = 0, $1674$hi = 0, $1677$hi = 0, $1678 = 0, $1678$hi = 0, $1684 = 0, $1684$hi = 0, $1688 = 0, $1689$hi = 0, $1694 = 0, $1702$hi = 0, $1704 = 0, $1705$hi = 0, $82_1 = 0, $83_1 = 0, $1727$hi = 0, $1729 = 0, $1730$hi = 0, $1747 = 0, $1747$hi = 0, $1752 = 0, $1752$hi = 0, $1753 = 0, $1753$hi = 0, $1760$hi = 0, $1761 = 0, $1761$hi = 0, $1766$hi = 0, $1767 = 0, $1767$hi = 0, $1769 = 0, $1769$hi = 0, $1771 = 0, $1771$hi = 0, $1774$hi = 0, $1775 = 0, $1775$hi = 0, $1781 = 0, $1781$hi = 0, $1785 = 0, $1786$hi = 0, $1796$hi = 0, $1798 = 0, $1799$hi = 0, $1823 = 0, $1823$hi = 0, $1827$hi = 0, $84_1 = 0, $84$hi = 0, $1836 = 0, $1836$hi = 0, $1841 = 0, $1841$hi = 0, $1842 = 0, $1842$hi = 0, $1847$hi = 0, $1848 = 0, $1848$hi = 0, $1850 = 0, $1850$hi = 0, $1852 = 0, $1852$hi = 0, $1855$hi = 0, $1856 = 0, $1856$hi = 0, $1862 = 0, $1862$hi = 0, $1866 = 0, $1867$hi = 0, $1871$hi = 0, $1873$hi = 0, $1875$hi = 0, $1877$hi = 0, $1880 = 0, $1888$hi = 0, $1890 = 0, $1891$hi = 0, $1912 = 0, $1912$hi = 0, $1916$hi = 0, $1925 = 0, $1925$hi = 0, $1930 = 0, $1930$hi = 0, $1931 = 0, $1931$hi = 0, $1936$hi = 0, $1937 = 0, $1937$hi = 0, $1939 = 0, $1939$hi = 0, $1941 = 0, $1941$hi = 0, $1944$hi = 0, $1945 = 0, $1945$hi = 0, $1951 = 0, $1951$hi = 0, $1955 = 0, $1956$hi = 0, $1958 = 0, $1966$hi = 0, $1968 = 0, $1969$hi = 0, $1992 = 0, $1992$hi = 0, $1996$hi = 0, $2005 = 0, $2005$hi = 0, $2010 = 0, $2010$hi = 0, $2011 = 0, $2011$hi = 0, $2016$hi = 0, $2017 = 0, $2017$hi = 0, $2019 = 0, $2019$hi = 0, $2021 = 0, $2021$hi = 0, $2024$hi = 0, $2025 = 0, $2025$hi = 0, $2031 = 0, $2031$hi = 0, $2035 = 0, $2036$hi = 0, $2041 = 0, $2049$hi = 0, $2052$hi = 0, $2069 = 0, $2069$hi = 0, $2073$hi = 0, $2082 = 0, $2082$hi = 0, $2087 = 0, $2087$hi = 0, $2088 = 0, $2088$hi = 0, $2093$hi = 0, $2094 = 0, $2094$hi = 0, $2096 = 0, $2096$hi = 0, $2098 = 0, $2098$hi = 0, $2101$hi = 0, $2102 = 0, $2102$hi = 0, $2108 = 0, $2108$hi = 0, $2112 = 0, $2113$hi = 0, $2118 = 0, $2126$hi = 0, $2129$hi = 0, $2163$hi = 0, $2165 = 0, $2166$hi = 0, $2190 = 0, $2190$hi = 0, $2195 = 0, $2195$hi = 0, $2196 = 0, $2196$hi = 0, $2203$hi = 0, $2204 = 0, $2204$hi = 0, $2209$hi = 0, $2210 = 0, $2210$hi = 0, $2212 = 0, $2212$hi = 0, $2214 = 0, $2214$hi = 0, $2217$hi = 0, $2218 = 0, $2218$hi = 0, $2224 = 0, $2224$hi = 0, $2228 = 0, $2229$hi = 0, $2239$hi = 0, $2242$hi = 0, $2255 = 0, $2271 = 0, $2274$hi = 0, $2276$hi = 0, $2278$hi = 0, $2280$hi = 0, $2282$hi = 0, $2284$hi = 0, $2286$hi = 0, $2288$hi = 0, $2290$hi = 0, $2293 = 0, $2294$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
  $6_1 = ($4_1 + 48 | 0) + ($5_1 << 2 | 0) | 0;
  $7_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
  HEAPF32[$6_1 >> 2] = Math_fround($7_1 | 0);
  $8_1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
  $9_1 = ($4_1 + 48 | 0) + ($8_1 << 2 | 0) | 0;
  $10_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
  HEAPF32[$9_1 >> 2] = Math_fround($10_1 | 0);
  $11_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
  $12_1 = ($4_1 + 48 | 0) + ($11_1 << 2 | 0) | 0;
  $13_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
  HEAPF32[$12_1 >> 2] = Math_fround($13_1 | 0);
  $14_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[$0_1 >> 2]);
  $17_1 = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]);
  $20_1 = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
  HEAPF32[$6_1 >> 2] = Math_fround($20_1 | 0);
  $21_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
  HEAPF32[$9_1 >> 2] = Math_fround($21_1 | 0);
  $9_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
  HEAPF32[$12_1 >> 2] = Math_fround($9_1 | 0);
  $22_1 = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]);
  HEAP32[($4_1 + 124 | 0) >> 2] = 0;
  $19_1 = Math_fround($19_1 * $16_1);
  $22_1 = Math_fround($14_1 * $22_1);
  $25_1 = Math_fround($17_1 * $14_1);
  $23_1 = Math_fround($16_1 * $23_1);
  $17_1 = Math_fround(Math_fround($19_1 * $22_1) - Math_fround($25_1 * $23_1));
  $182_1 = $17_1;
  $185_1 = Math_fround($17_1 * $17_1);
  $24_1 = Math_fround($15_1 * $24_1);
  $18_1 = Math_fround($18_1 * $15_1);
  $17_1 = Math_fround(Math_fround($25_1 * $24_1) - Math_fround($18_1 * $22_1));
  $18_1 = Math_fround(Math_fround($18_1 * $23_1) - Math_fround($19_1 * $24_1));
  $19_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($185_1 + Math_fround(Math_fround($17_1 * $17_1) + Math_fround($18_1 * $18_1))))));
  $2_1 = Math_fround(-$2_1);
  $22_1 = Math_fround(Math_fround($182_1 * $19_1) * $2_1);
  HEAPF32[($4_1 + 120 | 0) >> 2] = $22_1;
  $18_1 = Math_fround(Math_fround($18_1 * $19_1) * $2_1);
  HEAPF32[($4_1 + 116 | 0) >> 2] = $18_1;
  $17_1 = Math_fround(Math_fround($17_1 * $19_1) * $2_1);
  HEAPF32[($4_1 + 112 | 0) >> 2] = $17_1;
  label$1 : {
   if ($16_1 == Math_fround(0.0)) {
    break label$1
   }
   HEAPF32[($4_1 + 112 | 0) >> 2] = Math_fround($17_1 / $16_1);
  }
  label$2 : {
   if ($14_1 == Math_fround(0.0)) {
    break label$2
   }
   HEAPF32[($4_1 + 116 | 0) >> 2] = Math_fround($18_1 / $14_1);
  }
  label$3 : {
   if ($15_1 == Math_fround(0.0)) {
    break label$3
   }
   HEAPF32[($4_1 + 120 | 0) >> 2] = Math_fround($22_1 / $15_1);
  }
  label$4 : {
   label$5 : {
    $14_1 = Math_fround(HEAPF32[(($4_1 + 112 | 0) + ($5_1 << 2 | 0) | 0) >> 2]);
    if (!(Math_fround(Math_abs($14_1)) < Math_fround(2147483648.0))) {
     break label$5
    }
    $5_1 = ~~$14_1;
    break label$4;
   }
   $5_1 = -2147483648;
  }
  label$6 : {
   label$7 : {
    $14_1 = Math_fround(HEAPF32[(($4_1 + 112 | 0) + ($8_1 << 2 | 0) | 0) >> 2]);
    if (!(Math_fround(Math_abs($14_1)) < Math_fround(2147483648.0))) {
     break label$7
    }
    $6_1 = ~~$14_1;
    break label$6;
   }
   $6_1 = -2147483648;
  }
  $12_1 = $6_1 | $5_1 | 0;
  label$8 : {
   label$9 : {
    $14_1 = Math_fround(HEAPF32[(($4_1 + 112 | 0) + ($11_1 << 2 | 0) | 0) >> 2]);
    if (!(Math_fround(Math_abs($14_1)) < Math_fround(2147483648.0))) {
     break label$9
    }
    $8_1 = ~~$14_1;
    break label$8;
   }
   $8_1 = -2147483648;
  }
  label$10 : {
   label$11 : {
    if (!($12_1 | $8_1 | 0)) {
     break label$11
    }
    i64toi32_i32$1 = Math_imul($9_1, $10_1) - Math_imul($21_1, $13_1) | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $26_1 = i64toi32_i32$1;
    $26$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $4_1;
    HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] = $26_1;
    HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] = i64toi32_i32$0;
    $11_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    i64toi32_i32$1 = Math_imul($20_1, $13_1) - Math_imul($9_1, $7_1) | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $27_1 = i64toi32_i32$1;
    $27$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $4_1;
    HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] = $27_1;
    HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] = i64toi32_i32$0;
    $13_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = Math_imul($21_1, $7_1) - Math_imul($20_1, $10_1) | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $28_1 = i64toi32_i32$1;
    $28$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $4_1;
    HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] = $28_1;
    HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = i64toi32_i32$0;
    $7_1 = 0;
    $29_1 = $13_1 + $6_1 | 0;
    i64toi32_i32$1 = $29_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $30_1 = i64toi32_i32$1;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$0 = $30$hi;
    i64toi32_i32$1 = $27$hi;
    i64toi32_i32$1 = __wasm_i64_mul($30_1 | 0, i64toi32_i32$0 | 0, $27_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $340_1 = i64toi32_i32$1;
    $340$hi = i64toi32_i32$0;
    $31_1 = $11_1 + $5_1 | 0;
    i64toi32_i32$1 = $31_1;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $32_1 = i64toi32_i32$1;
    $32$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $26$hi;
    i64toi32_i32$0 = $32$hi;
    i64toi32_i32$1 = $26$hi;
    i64toi32_i32$1 = __wasm_i64_mul($32_1 | 0, i64toi32_i32$0 | 0, $26_1 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $348_1 = i64toi32_i32$1;
    $348$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $340$hi;
    i64toi32_i32$2 = $340_1;
    i64toi32_i32$1 = $348$hi;
    i64toi32_i32$3 = $348_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $349$hi = i64toi32_i32$5;
    $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    $33_1 = $5_1 + $8_1 | 0;
    i64toi32_i32$2 = $33_1;
    i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
    $34_1 = i64toi32_i32$2;
    $34$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $28$hi;
    i64toi32_i32$5 = $34$hi;
    i64toi32_i32$2 = $28$hi;
    i64toi32_i32$2 = __wasm_i64_mul($34_1 | 0, i64toi32_i32$5 | 0, $28_1 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
    $360_1 = i64toi32_i32$2;
    $360$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $349$hi;
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$2 = $360$hi;
    i64toi32_i32$3 = $360_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $35_1 = i64toi32_i32$1;
    $35$hi = i64toi32_i32$4;
    $362_1 = i64toi32_i32$1;
    $362$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $13_1;
    i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
    $364$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $27$hi;
    i64toi32_i32$4 = $364$hi;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$0 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$4 | 0, $27_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $366_1 = i64toi32_i32$0;
    $366$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $11_1;
    i64toi32_i32$4 = i64toi32_i32$0 >> 31 | 0;
    $368$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $26$hi;
    i64toi32_i32$4 = $368$hi;
    i64toi32_i32$0 = $26$hi;
    i64toi32_i32$0 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$4 | 0, $26_1 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
    $370_1 = i64toi32_i32$0;
    $370$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $366$hi;
    i64toi32_i32$5 = $366_1;
    i64toi32_i32$0 = $370$hi;
    i64toi32_i32$3 = $370_1;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $371$hi = i64toi32_i32$1;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
    $373$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $28$hi;
    i64toi32_i32$1 = $373$hi;
    i64toi32_i32$5 = $28$hi;
    i64toi32_i32$5 = __wasm_i64_mul($5_1 | 0, i64toi32_i32$1 | 0, $28_1 | 0, i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $375_1 = i64toi32_i32$5;
    $375$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $371$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$5 = $375$hi;
    i64toi32_i32$3 = $375_1;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $376$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $362$hi;
    i64toi32_i32$1 = $362_1;
    i64toi32_i32$4 = $376$hi;
    i64toi32_i32$3 = i64toi32_i32$0;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$4 | 0)) {
     $697_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       $699_1 = 0
      } else {
       $699_1 = 1
      }
      $700_1 = $699_1;
     } else {
      $700_1 = 0
     }
     $697_1 = $700_1;
    }
    if ($697_1) {
     break label$10
    }
    $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $5_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    $175($4_1 + 48 | 0 | 0, $6_1 | 0, $4_1 + 88 | 0 | 0);
    label$12 : {
     label$13 : {
      label$14 : {
       i64toi32_i32$1 = $35$hi;
       $7_1 = $160($4_1 + 48 | 0 | 0, $35_1 | 0, i64toi32_i32$1 | 0) | 0;
       if (($7_1 | 0) > (-1 | 0)) {
        break label$14
       }
       $6_1 = $5_1;
       label$15 : while (1) {
        $175($4_1 + 8 | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $4_1 + 88 | 0 | 0);
        label$16 : {
         if (($159($4_1 + 8 | 0 | 0, $4_1 + 48 | 0 | 0) | 0 | 0) < (1 | 0)) {
          break label$16
         }
         i64toi32_i32$1 = $35$hi;
         $7_1 = $160($4_1 + 8 | 0 | 0, $35_1 | 0, i64toi32_i32$1 | 0) | 0;
         if (($7_1 | 0) > (-1 | 0)) {
          break label$13
         }
         i64toi32_i32$3 = ($4_1 + 8 | 0) + 29 | 0;
         i64toi32_i32$1 = HEAPU8[i64toi32_i32$3 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$3 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$3 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$3 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         i64toi32_i32$2 = HEAPU8[(i64toi32_i32$3 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$3 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$3 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$3 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         $418_1 = i64toi32_i32$1;
         i64toi32_i32$1 = ($4_1 + 48 | 0) + 29 | 0;
         $695_1 = $418_1;
         HEAP8[i64toi32_i32$1 >> 0] = $695_1;
         HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $695_1 >>> 8 | 0;
         HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $695_1 >>> 16 | 0;
         HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $695_1 >>> 24 | 0;
         HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$2;
         HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$2 >>> 8 | 0;
         HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$2 >>> 16 | 0;
         HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$2 >>> 24 | 0;
         i64toi32_i32$3 = ($4_1 + 8 | 0) + 24 | 0;
         i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
         $425_1 = i64toi32_i32$2;
         i64toi32_i32$2 = ($4_1 + 48 | 0) + 24 | 0;
         HEAP32[i64toi32_i32$2 >> 2] = $425_1;
         HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$3 = ($4_1 + 8 | 0) + 16 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
         $432_1 = i64toi32_i32$1;
         i64toi32_i32$1 = ($4_1 + 48 | 0) + 16 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $432_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
         i64toi32_i32$3 = ($4_1 + 8 | 0) + 8 | 0;
         i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
         $439_1 = i64toi32_i32$2;
         i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
         HEAP32[i64toi32_i32$2 >> 2] = $439_1;
         HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$3 = $4_1;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
         $442_1 = i64toi32_i32$1;
         i64toi32_i32$1 = i64toi32_i32$3;
         HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $442_1;
         HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$2;
         $5_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
         $6_1 = $5_1;
        }
        $5_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
        if (($5_1 | 0) != ($6_1 | 0)) {
         continue label$15
        }
        break label$11;
       };
      }
      $6_1 = $5_1;
      $8_1 = $6_1;
      $5_1 = 0;
      label$17 : {
       label$18 : while (1) {
        $175($4_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 + 88 | 0 | 0);
        label$19 : {
         if (($159($4_1 + 8 | 0 | 0, $4_1 + 48 | 0 | 0) | 0 | 0) > (-1 | 0)) {
          break label$19
         }
         i64toi32_i32$2 = $35$hi;
         $8_1 = $160($4_1 + 8 | 0 | 0, $35_1 | 0, i64toi32_i32$2 | 0) | 0;
         i64toi32_i32$3 = ($4_1 + 8 | 0) + 29 | 0;
         i64toi32_i32$2 = HEAPU8[i64toi32_i32$3 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$3 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$3 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$3 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         i64toi32_i32$1 = HEAPU8[(i64toi32_i32$3 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$3 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$3 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$3 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
         $475_1 = i64toi32_i32$2;
         i64toi32_i32$2 = ($4_1 + 48 | 0) + 29 | 0;
         $696_1 = $475_1;
         HEAP8[i64toi32_i32$2 >> 0] = $696_1;
         HEAP8[(i64toi32_i32$2 + 1 | 0) >> 0] = $696_1 >>> 8 | 0;
         HEAP8[(i64toi32_i32$2 + 2 | 0) >> 0] = $696_1 >>> 16 | 0;
         HEAP8[(i64toi32_i32$2 + 3 | 0) >> 0] = $696_1 >>> 24 | 0;
         HEAP8[(i64toi32_i32$2 + 4 | 0) >> 0] = i64toi32_i32$1;
         HEAP8[(i64toi32_i32$2 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
         HEAP8[(i64toi32_i32$2 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
         HEAP8[(i64toi32_i32$2 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
         i64toi32_i32$3 = ($4_1 + 8 | 0) + 24 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
         $482_1 = i64toi32_i32$1;
         i64toi32_i32$1 = ($4_1 + 48 | 0) + 24 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $482_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
         i64toi32_i32$3 = ($4_1 + 8 | 0) + 16 | 0;
         i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
         $489_1 = i64toi32_i32$2;
         i64toi32_i32$2 = ($4_1 + 48 | 0) + 16 | 0;
         HEAP32[i64toi32_i32$2 >> 2] = $489_1;
         HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$3 = ($4_1 + 8 | 0) + 8 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
         $496_1 = i64toi32_i32$1;
         i64toi32_i32$1 = ($4_1 + 48 | 0) + 8 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $496_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
         i64toi32_i32$3 = $4_1;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
         $499_1 = i64toi32_i32$2;
         i64toi32_i32$2 = i64toi32_i32$3;
         HEAP32[(i64toi32_i32$3 + 48 | 0) >> 2] = $499_1;
         HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] = i64toi32_i32$1;
         $10_1 = ($8_1 | 0) < (0 | 0);
         $7_1 = $10_1 ? $7_1 : $8_1;
         $6_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
         $5_1 = $10_1 ? $6_1 : $5_1;
         if (($8_1 | 0) <= (-1 | 0)) {
          break label$17
         }
         $8_1 = $6_1;
        }
        $6_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
        if (($6_1 | 0) != ($8_1 | 0)) {
         continue label$18
        }
        break label$18;
       };
      }
      if ($5_1) {
       break label$12
      }
      $7_1 = 0;
      break label$10;
     }
     if (!$5_1) {
      break label$11
     }
    }
    label$20 : {
     if ($7_1) {
      break label$20
     }
     $6_1 = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
     label$21 : while (1) {
      $175($4_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 + 88 | 0 | 0);
      i64toi32_i32$1 = $35$hi;
      if (($160($4_1 + 8 | 0 | 0, $35_1 | 0, i64toi32_i32$1 | 0) | 0 | 0) > (0 | 0)) {
       break label$20
      }
      $6_1 = HEAP32[$6_1 >> 2] | 0;
      if (($6_1 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0)) {
       continue label$21
      }
      break label$11;
     };
    }
    i64toi32_i32$1 = $34$hi;
    $544_1 = $34_1;
    $544$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $34_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $701_1 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
     $701_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
    }
    $26_1 = $701_1;
    $26$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $544$hi;
    i64toi32_i32$1 = $544_1;
    i64toi32_i32$3 = $26$hi;
    i64toi32_i32$4 = $26_1;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $548$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $26$hi;
    i64toi32_i32$0 = $548$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$1 = $26$hi;
    i64toi32_i32$4 = $26_1;
    i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
    $36_1 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
    $36$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $36_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 32;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $702_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     $702_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $37_1 = $702_1;
    $37$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $36$hi;
    i64toi32_i32$1 = $36_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $38_1 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
    $38$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $30$hi;
    $555_1 = $30_1;
    $555$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $30_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $703_1 = i64toi32_i32$0 >> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$3 | 0;
     $703_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
    }
    $26_1 = $703_1;
    $26$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $555$hi;
    i64toi32_i32$0 = $555_1;
    i64toi32_i32$2 = $26$hi;
    i64toi32_i32$4 = $26_1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $559$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $26$hi;
    i64toi32_i32$5 = $559$hi;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$0 = $26$hi;
    i64toi32_i32$4 = $26_1;
    i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
    $39_1 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $39$hi = i64toi32_i32$0;
    i64toi32_i32$5 = $39_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 32;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $704_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     $704_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
    }
    $40_1 = $704_1;
    $40$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $39$hi;
    i64toi32_i32$0 = $39_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $41_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $41$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $32$hi;
    $566_1 = $32_1;
    $566$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $32_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
     $705_1 = i64toi32_i32$5 >> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >> i64toi32_i32$2 | 0;
     $705_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    $26_1 = $705_1;
    $26$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $566$hi;
    i64toi32_i32$5 = $566_1;
    i64toi32_i32$1 = $26$hi;
    i64toi32_i32$4 = $26_1;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $570$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $26$hi;
    i64toi32_i32$3 = $570$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$5 = $26$hi;
    i64toi32_i32$4 = $26_1;
    i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
    $42_1 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
    $42$hi = i64toi32_i32$5;
    i64toi32_i32$3 = $42_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 32;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $706_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     $706_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    $43_1 = $706_1;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $42$hi;
    i64toi32_i32$5 = $42_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $44_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
    $44$hi = i64toi32_i32$3;
    $45_1 = $3_1 + 16 | 0;
    $8_1 = $3_1 + 12 | 0;
    $9_1 = $3_1 + 8 | 0;
    $21_1 = $3_1 + 4 | 0;
    $46_1 = 0;
    $11_1 = 0;
    $47_1 = 0;
    label$22 : while (1) {
     $48_1 = $11_1;
     label$23 : {
      label$24 : {
       $49_1 = $7_1;
       if (!$7_1) {
        break label$24
       }
       $12_1 = $5_1;
       break label$23;
      }
      $7_1 = HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
      $175($4_1 + 8 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $4_1 + 88 | 0 | 0);
      $6_1 = $7_1;
      $12_1 = $5_1;
      i64toi32_i32$3 = $35$hi;
      if (($160($4_1 + 8 | 0 | 0, $35_1 | 0, i64toi32_i32$3 | 0) | 0 | 0) > (-1 | 0)) {
       break label$23
      }
      label$25 : while (1) {
       $5_1 = HEAP32[$6_1 >> 2] | 0;
       if (($5_1 | 0) == ($7_1 | 0)) {
        break label$11
       }
       $12_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       $175($4_1 + 8 | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $4_1 + 88 | 0 | 0);
       $6_1 = $5_1;
       i64toi32_i32$3 = $35$hi;
       if (($160($4_1 + 8 | 0 | 0, $35_1 | 0, i64toi32_i32$3 | 0) | 0 | 0) <= (-1 | 0)) {
        continue label$25
       }
       break label$25;
      };
     }
     $5_1 = $12_1;
     label$26 : {
      label$27 : {
       if (!$47_1) {
        break label$27
       }
       if (($12_1 | 0) == ($47_1 | 0)) {
        break label$26
       }
       $5_1 = $47_1;
      }
      $47_1 = $5_1;
      $5_1 = HEAP32[($12_1 + 8 | 0) >> 2] | 0;
      label$28 : while (1) {
       $5_1 = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
       $175($4_1 + 8 | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, $4_1 + 88 | 0 | 0);
       i64toi32_i32$3 = $35$hi;
       $7_1 = $160($4_1 + 8 | 0 | 0, $35_1 | 0, i64toi32_i32$3 | 0) | 0;
       if (($7_1 | 0) < (0 | 0)) {
        continue label$28
       }
       break label$28;
      };
      label$29 : {
       if (!$7_1) {
        break label$29
       }
       $50_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       label$30 : {
        label$31 : {
         $3_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
         $6_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
         if (($6_1 | 0) != ($3_1 | 0)) {
          break label$31
         }
         HEAP32[($50_1 + 8 | 0) >> 2] = 0;
         break label$30;
        }
        $10_1 = HEAP32[$3_1 >> 2] | 0;
        HEAP32[($10_1 + 4 | 0) >> 2] = $6_1;
        HEAP32[$6_1 >> 2] = $10_1;
        HEAP32[($50_1 + 8 | 0) >> 2] = $6_1;
        HEAP32[($3_1 + 4 | 0) >> 2] = $3_1;
        HEAP32[$3_1 >> 2] = $3_1;
       }
       i64toi32_i32$0 = $1_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
       $51_1 = i64toi32_i32$3;
       $51$hi = i64toi32_i32$5;
       $6_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       $13_1 = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
       $20_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
       $11_1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
       i64toi32_i32$3 = Math_imul($10_1, $13_1) - Math_imul($20_1, $11_1) | 0;
       i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
       $52_1 = i64toi32_i32$3;
       $52$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $51$hi;
       i64toi32_i32$3 = $52$hi;
       i64toi32_i32$3 = __wasm_i64_mul($51_1 | 0, i64toi32_i32$5 | 0, $52_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $698_1 = i64toi32_i32$3;
       $698$hi = i64toi32_i32$5;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
       i64toi32_i32$3 = i64toi32_i32$5 >> 31 | 0;
       $53_1 = i64toi32_i32$5;
       $53$hi = i64toi32_i32$3;
       $54_1 = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
       $707_1 = Math_imul($11_1, $54_1);
       $11_1 = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
       i64toi32_i32$5 = $707_1 - Math_imul($11_1, $13_1) | 0;
       i64toi32_i32$3 = i64toi32_i32$5 >> 31 | 0;
       $55_1 = i64toi32_i32$5;
       $55$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $53$hi;
       i64toi32_i32$5 = $55$hi;
       i64toi32_i32$5 = __wasm_i64_mul($53_1 | 0, i64toi32_i32$3 | 0, $55_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $717_1 = i64toi32_i32$5;
       $717$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $698$hi;
       i64toi32_i32$0 = $698_1;
       i64toi32_i32$5 = $717$hi;
       i64toi32_i32$4 = $717_1;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $718$hi = i64toi32_i32$2;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $56_1 = i64toi32_i32$2;
       $56$hi = i64toi32_i32$0;
       i64toi32_i32$2 = Math_imul($20_1, $11_1) - Math_imul($10_1, $54_1) | 0;
       i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
       $57_1 = i64toi32_i32$2;
       $57$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $56$hi;
       i64toi32_i32$2 = $57$hi;
       i64toi32_i32$2 = __wasm_i64_mul($56_1 | 0, i64toi32_i32$0 | 0, $57_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $731_1 = i64toi32_i32$2;
       $731$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $718$hi;
       i64toi32_i32$3 = i64toi32_i32$1;
       i64toi32_i32$2 = $731$hi;
       i64toi32_i32$4 = $731_1;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $58_1 = i64toi32_i32$5;
       $58$hi = i64toi32_i32$1;
       $733_1 = i64toi32_i32$5;
       $733$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 63;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$1 >> 31 | 0;
        $708_1 = i64toi32_i32$1 >> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$1 >> i64toi32_i32$2 | 0;
        $708_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
       }
       $26_1 = $708_1;
       $26$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $733$hi;
       i64toi32_i32$1 = $733_1;
       i64toi32_i32$0 = $26$hi;
       i64toi32_i32$4 = $26_1;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $737$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $26$hi;
       i64toi32_i32$5 = $737$hi;
       i64toi32_i32$3 = i64toi32_i32$2;
       i64toi32_i32$1 = $26$hi;
       i64toi32_i32$4 = $26_1;
       i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
       $26_1 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
       $26$hi = i64toi32_i32$1;
       i64toi32_i32$5 = $26_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $709_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
        $709_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
       }
       $28_1 = $709_1;
       $28$hi = i64toi32_i32$3;
       $742_1 = $28_1;
       $742$hi = i64toi32_i32$3;
       i64toi32_i32$1 = $1_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
       $59_1 = i64toi32_i32$3;
       $59$hi = i64toi32_i32$5;
       $10_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       $13_1 = HEAP32[($10_1 + 44 | 0) >> 2] | 0;
       $20_1 = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
       $11_1 = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
       $54_1 = HEAP32[($10_1 + 52 | 0) >> 2] | 0;
       i64toi32_i32$3 = Math_imul($13_1, $20_1) - Math_imul($11_1, $54_1) | 0;
       i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
       $27_1 = i64toi32_i32$3;
       $27$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $59$hi;
       i64toi32_i32$3 = $27$hi;
       i64toi32_i32$3 = __wasm_i64_mul($59_1 | 0, i64toi32_i32$5 | 0, $27_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $767_1 = i64toi32_i32$3;
       $767$hi = i64toi32_i32$5;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
       i64toi32_i32$3 = i64toi32_i32$5 >> 31 | 0;
       $60_1 = i64toi32_i32$5;
       $60$hi = i64toi32_i32$3;
       $61_1 = HEAP32[($10_1 + 32 | 0) >> 2] | 0;
       $776_1 = Math_imul($54_1, $61_1);
       $54_1 = HEAP32[($10_1 + 48 | 0) >> 2] | 0;
       i64toi32_i32$5 = $776_1 - Math_imul($54_1, $20_1) | 0;
       i64toi32_i32$3 = i64toi32_i32$5 >> 31 | 0;
       $62_1 = i64toi32_i32$5;
       $62$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $60$hi;
       i64toi32_i32$5 = $62$hi;
       i64toi32_i32$5 = __wasm_i64_mul($60_1 | 0, i64toi32_i32$3 | 0, $62_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $786_1 = i64toi32_i32$5;
       $786$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $767$hi;
       i64toi32_i32$1 = $767_1;
       i64toi32_i32$5 = $786$hi;
       i64toi32_i32$4 = $786_1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $787$hi = i64toi32_i32$2;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
       $63_1 = i64toi32_i32$2;
       $63$hi = i64toi32_i32$1;
       i64toi32_i32$2 = Math_imul($11_1, $54_1) - Math_imul($13_1, $61_1) | 0;
       i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
       $64_1 = i64toi32_i32$2;
       $64$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $63$hi;
       i64toi32_i32$2 = $64$hi;
       i64toi32_i32$2 = __wasm_i64_mul($63_1 | 0, i64toi32_i32$1 | 0, $64_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $800_1 = i64toi32_i32$2;
       $800$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $787$hi;
       i64toi32_i32$3 = i64toi32_i32$0;
       i64toi32_i32$2 = $800$hi;
       i64toi32_i32$4 = $800_1;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $65_1 = i64toi32_i32$5;
       $65$hi = i64toi32_i32$0;
       $802_1 = i64toi32_i32$5;
       $802$hi = i64toi32_i32$0;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 63;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$0 >> 31 | 0;
        $710_1 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$0 >> i64toi32_i32$2 | 0;
        $710_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
       }
       $30_1 = $710_1;
       $30$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $802$hi;
       i64toi32_i32$0 = $802_1;
       i64toi32_i32$1 = $30$hi;
       i64toi32_i32$4 = $30_1;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $806$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $30$hi;
       i64toi32_i32$5 = $806$hi;
       i64toi32_i32$3 = i64toi32_i32$2;
       i64toi32_i32$0 = $30$hi;
       i64toi32_i32$4 = $30_1;
       i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
       $32_1 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
       $32$hi = i64toi32_i32$0;
       i64toi32_i32$5 = $32_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
       $30_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
       $30$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $742$hi;
       i64toi32_i32$5 = $30$hi;
       i64toi32_i32$5 = __wasm_i64_mul($742_1 | 0, i64toi32_i32$3 | 0, $30_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $66_1 = i64toi32_i32$5;
       $66$hi = i64toi32_i32$3;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $711_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
        $711_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
       }
       $814_1 = $711_1;
       $814$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $28$hi;
       $815_1 = $28_1;
       $815$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $32$hi;
       i64toi32_i32$3 = $32_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $712_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
        $712_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
       }
       $32_1 = $712_1;
       $32$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $815$hi;
       i64toi32_i32$3 = $32$hi;
       i64toi32_i32$3 = __wasm_i64_mul($815_1 | 0, i64toi32_i32$0 | 0, $32_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $819_1 = i64toi32_i32$3;
       $819$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $814$hi;
       i64toi32_i32$5 = $814_1;
       i64toi32_i32$3 = $819$hi;
       i64toi32_i32$4 = $819_1;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $820_1 = i64toi32_i32$1;
       $820$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $26$hi;
       i64toi32_i32$0 = $26_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $34_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
       $34$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $32$hi;
       i64toi32_i32$5 = $34$hi;
       i64toi32_i32$0 = $32$hi;
       i64toi32_i32$0 = __wasm_i64_mul($34_1 | 0, i64toi32_i32$5 | 0, $32_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $26_1 = i64toi32_i32$0;
       $26$hi = i64toi32_i32$5;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $713_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
        $713_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
       }
       $827$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $820$hi;
       i64toi32_i32$5 = $820_1;
       i64toi32_i32$2 = $827$hi;
       i64toi32_i32$4 = $713_1;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $828_1 = i64toi32_i32$3;
       $828$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $66$hi;
       i64toi32_i32$0 = $66_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
       $830_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
       $830$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $26$hi;
       i64toi32_i32$1 = $26_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $832_1 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
       $832$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $830$hi;
       i64toi32_i32$5 = $830_1;
       i64toi32_i32$1 = $832$hi;
       i64toi32_i32$4 = $832_1;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $26_1 = i64toi32_i32$2;
       $26$hi = i64toi32_i32$3;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $714_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
        $714_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
       }
       $835$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $828$hi;
       i64toi32_i32$3 = $828_1;
       i64toi32_i32$0 = $835$hi;
       i64toi32_i32$4 = $714_1;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $836_1 = i64toi32_i32$1;
       $836$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $26$hi;
       i64toi32_i32$5 = $26_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
        $715_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
        $715_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
       }
       $26_1 = $715_1;
       $26$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $34$hi;
       i64toi32_i32$3 = $30$hi;
       i64toi32_i32$3 = $34$hi;
       i64toi32_i32$5 = $30$hi;
       i64toi32_i32$5 = __wasm_i64_mul($34_1 | 0, i64toi32_i32$3 | 0, $30_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $842_1 = i64toi32_i32$5;
       $842$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $26$hi;
       i64toi32_i32$2 = $26_1;
       i64toi32_i32$5 = $842$hi;
       i64toi32_i32$4 = $842_1;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $67_1 = i64toi32_i32$0;
       $67$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $26$hi;
       i64toi32_i32$1 = $67$hi;
       i64toi32_i32$3 = i64toi32_i32$0;
       i64toi32_i32$2 = $26$hi;
       i64toi32_i32$4 = $26_1;
       $846_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
       i64toi32_i32$3 = 0;
       $847$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $836$hi;
       i64toi32_i32$4 = $836_1;
       i64toi32_i32$1 = $847$hi;
       i64toi32_i32$2 = $846_1;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $66_1 = i64toi32_i32$5;
       $66$hi = i64toi32_i32$0;
       i64toi32_i32$4 = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) - $31_1 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $68_1 = i64toi32_i32$4;
       $68$hi = i64toi32_i32$0;
       i64toi32_i32$4 = (HEAP32[($6_1 + 16 | 0) >> 2] | 0) - $29_1 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $69_1 = i64toi32_i32$4;
       $69$hi = i64toi32_i32$0;
       $6_1 = (HEAP32[($6_1 + 20 | 0) >> 2] | 0) - $33_1 | 0;
       i64toi32_i32$4 = (HEAP32[($10_1 + 12 | 0) >> 2] | 0) - $31_1 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $869$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $62$hi;
       i64toi32_i32$0 = $869$hi;
       $884_1 = i64toi32_i32$4;
       i64toi32_i32$4 = $62$hi;
       i64toi32_i32$4 = __wasm_i64_mul($884_1 | 0, i64toi32_i32$0 | 0, $62_1 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $70_1 = i64toi32_i32$4;
       $70$hi = i64toi32_i32$0;
       i64toi32_i32$4 = (HEAP32[($10_1 + 16 | 0) >> 2] | 0) - $29_1 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $877$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$0 = $877$hi;
       $885_1 = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       i64toi32_i32$4 = __wasm_i64_mul($885_1 | 0, i64toi32_i32$0 | 0, $27_1 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $71_1 = i64toi32_i32$4;
       $71$hi = i64toi32_i32$0;
       i64toi32_i32$4 = (HEAP32[($10_1 + 20 | 0) >> 2] | 0) - $33_1 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
       $72_1 = i64toi32_i32$4;
       $72$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $52$hi;
       i64toi32_i32$0 = $59$hi;
       i64toi32_i32$0 = $52$hi;
       i64toi32_i32$4 = $59$hi;
       i64toi32_i32$4 = __wasm_i64_mul($52_1 | 0, i64toi32_i32$0 | 0, $59_1 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $888_1 = i64toi32_i32$4;
       $888$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $60$hi;
       i64toi32_i32$0 = $55$hi;
       i64toi32_i32$0 = $60$hi;
       i64toi32_i32$4 = $55$hi;
       i64toi32_i32$4 = __wasm_i64_mul($60_1 | 0, i64toi32_i32$0 | 0, $55_1 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $891_1 = i64toi32_i32$4;
       $891$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $888$hi;
       i64toi32_i32$3 = $888_1;
       i64toi32_i32$4 = $891$hi;
       i64toi32_i32$2 = $891_1;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $892$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $63$hi;
       i64toi32_i32$5 = $57$hi;
       i64toi32_i32$5 = $63$hi;
       i64toi32_i32$3 = $57$hi;
       i64toi32_i32$3 = __wasm_i64_mul($63_1 | 0, i64toi32_i32$5 | 0, $57_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $895_1 = i64toi32_i32$3;
       $895$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $892$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$3 = $895$hi;
       i64toi32_i32$2 = $895_1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $26_1 = i64toi32_i32$4;
       $26$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $51$hi;
       i64toi32_i32$1 = $27$hi;
       i64toi32_i32$1 = $51$hi;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$0 = __wasm_i64_mul($51_1 | 0, i64toi32_i32$1 | 0, $27_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $899_1 = i64toi32_i32$0;
       $899$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $53$hi;
       i64toi32_i32$1 = $62$hi;
       i64toi32_i32$1 = $53$hi;
       i64toi32_i32$0 = $62$hi;
       i64toi32_i32$0 = __wasm_i64_mul($53_1 | 0, i64toi32_i32$1 | 0, $62_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $902_1 = i64toi32_i32$0;
       $902$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $899$hi;
       i64toi32_i32$5 = $899_1;
       i64toi32_i32$0 = $902$hi;
       i64toi32_i32$2 = $902_1;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $903$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $56$hi;
       i64toi32_i32$4 = $64$hi;
       i64toi32_i32$4 = $56$hi;
       i64toi32_i32$5 = $64$hi;
       i64toi32_i32$5 = __wasm_i64_mul($56_1 | 0, i64toi32_i32$4 | 0, $64_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $906_1 = i64toi32_i32$5;
       $906$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $903$hi;
       i64toi32_i32$1 = i64toi32_i32$3;
       i64toi32_i32$5 = $906$hi;
       i64toi32_i32$2 = $906_1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $27_1 = i64toi32_i32$0;
       $27$hi = i64toi32_i32$3;
       label$32 : {
        label$33 : {
         i64toi32_i32$3 = $65$hi;
         i64toi32_i32$4 = $65_1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$2 = 0;
         if ((i64toi32_i32$3 | 0) < (i64toi32_i32$1 | 0)) {
          $716_1 = 1
         } else {
          if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$1 | 0)) {
           if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
            $718_1 = 0
           } else {
            $718_1 = 1
           }
           $719_1 = $718_1;
          } else {
           $719_1 = 0
          }
          $716_1 = $719_1;
         }
         $54_1 = $716_1;
         $910_1 = $54_1;
         i64toi32_i32$4 = $58$hi;
         i64toi32_i32$2 = $58_1;
         i64toi32_i32$3 = 0;
         i64toi32_i32$1 = 0;
         if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
          $720_1 = 1
         } else {
          if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
           if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
            $721_1 = 0
           } else {
            $721_1 = 1
           }
           $722_1 = $721_1;
          } else {
           $722_1 = 0
          }
          $720_1 = $722_1;
         }
         $61_1 = $720_1;
         if (($910_1 | 0) != ($61_1 | 0)) {
          break label$33
         }
         i64toi32_i32$2 = $67$hi;
         $65_1 = $67_1;
         $65$hi = i64toi32_i32$2;
         break label$32;
        }
        i64toi32_i32$2 = $67$hi;
        i64toi32_i32$2 = 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$4 = $67$hi;
        i64toi32_i32$3 = $67_1;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        $65_1 = i64toi32_i32$5;
        $65$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $66$hi;
        i64toi32_i32$2 = $66_1;
        i64toi32_i32$1 = -1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
        $919$hi = i64toi32_i32$1;
        i64toi32_i32$1 = i64toi32_i32$4;
        $921_1 = !($67_1 | i64toi32_i32$1 | 0);
        i64toi32_i32$1 = 0;
        $922$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $919$hi;
        i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
        i64toi32_i32$2 = $922$hi;
        i64toi32_i32$3 = $921_1;
        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $66_1 = i64toi32_i32$4;
        $66$hi = i64toi32_i32$5;
       }
       i64toi32_i32$5 = $68$hi;
       i64toi32_i32$5 = $55$hi;
       i64toi32_i32$5 = $68$hi;
       i64toi32_i32$0 = $55$hi;
       i64toi32_i32$0 = __wasm_i64_mul($68_1 | 0, i64toi32_i32$5 | 0, $55_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $51_1 = i64toi32_i32$0;
       $51$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $69$hi;
       i64toi32_i32$5 = $52$hi;
       i64toi32_i32$5 = $69$hi;
       i64toi32_i32$0 = $52$hi;
       i64toi32_i32$0 = __wasm_i64_mul($69_1 | 0, i64toi32_i32$5 | 0, $52_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $53_1 = i64toi32_i32$0;
       $53$hi = i64toi32_i32$5;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
       $56_1 = i64toi32_i32$0;
       $56$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $71$hi;
       i64toi32_i32$5 = $70$hi;
       i64toi32_i32$5 = $71$hi;
       i64toi32_i32$1 = $71_1;
       i64toi32_i32$0 = $70$hi;
       i64toi32_i32$3 = $70_1;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $59_1 = i64toi32_i32$2;
       $59$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $72$hi;
       i64toi32_i32$4 = $64$hi;
       i64toi32_i32$4 = $72$hi;
       i64toi32_i32$1 = $64$hi;
       i64toi32_i32$1 = __wasm_i64_mul($72_1 | 0, i64toi32_i32$4 | 0, $64_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $60_1 = i64toi32_i32$1;
       $60$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $27$hi;
       $938_1 = $27_1;
       $938$hi = i64toi32_i32$4;
       i64toi32_i32$5 = $27_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 63;
       i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
        $723_1 = i64toi32_i32$4 >> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$4 >> i64toi32_i32$0 | 0;
        $723_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
       }
       $52_1 = $723_1;
       $52$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $938$hi;
       i64toi32_i32$4 = $938_1;
       i64toi32_i32$5 = $52$hi;
       i64toi32_i32$3 = $52_1;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $942$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $52$hi;
       i64toi32_i32$2 = $942$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$4 = $52$hi;
       i64toi32_i32$3 = $52_1;
       i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
       $58_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
       $58$hi = i64toi32_i32$4;
       i64toi32_i32$2 = $58_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = -1;
       i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
       $52_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
       $52$hi = i64toi32_i32$1;
       $947_1 = $52_1;
       $947$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $26$hi;
       $948_1 = $26_1;
       $948$hi = i64toi32_i32$1;
       i64toi32_i32$4 = $26_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 63;
       i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
        $724_1 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
        $724_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
       }
       $55_1 = $724_1;
       $55$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $948$hi;
       i64toi32_i32$1 = $948_1;
       i64toi32_i32$4 = $55$hi;
       i64toi32_i32$3 = $55_1;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $952$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $55$hi;
       i64toi32_i32$0 = $952$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$1 = $55$hi;
       i64toi32_i32$3 = $55_1;
       i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
       $62_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
       $62$hi = i64toi32_i32$1;
       i64toi32_i32$0 = $62_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $725_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
        $725_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       $55_1 = $725_1;
       $55$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $947$hi;
       i64toi32_i32$0 = $55$hi;
       i64toi32_i32$0 = __wasm_i64_mul($947_1 | 0, i64toi32_i32$2 | 0, $55_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $64_1 = i64toi32_i32$0;
       $64$hi = i64toi32_i32$2;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $726_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        $726_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $960_1 = $726_1;
       $960$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $58$hi;
       i64toi32_i32$2 = $58_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $727_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $727_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
       }
       $58_1 = $727_1;
       $58$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $55$hi;
       i64toi32_i32$1 = $58$hi;
       i64toi32_i32$2 = $55$hi;
       i64toi32_i32$2 = __wasm_i64_mul($58_1 | 0, i64toi32_i32$1 | 0, $55_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $965_1 = i64toi32_i32$2;
       $965$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $960$hi;
       i64toi32_i32$0 = $960_1;
       i64toi32_i32$2 = $965$hi;
       i64toi32_i32$3 = $965_1;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $966_1 = i64toi32_i32$4;
       $966$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $58$hi;
       i64toi32_i32$5 = $62$hi;
       i64toi32_i32$1 = $62_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $62_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
       $62$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $58$hi;
       i64toi32_i32$1 = $62$hi;
       i64toi32_i32$1 = __wasm_i64_mul($58_1 | 0, i64toi32_i32$0 | 0, $62_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $67_1 = i64toi32_i32$1;
       $67$hi = i64toi32_i32$0;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $728_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
        $728_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
       }
       $973$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $966$hi;
       i64toi32_i32$0 = $966_1;
       i64toi32_i32$5 = $973$hi;
       i64toi32_i32$3 = $728_1;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $974_1 = i64toi32_i32$2;
       $974$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $64$hi;
       i64toi32_i32$1 = $64_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
       $976_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
       $976$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $67$hi;
       i64toi32_i32$4 = $67_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$3 = -1;
       i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
       $978_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
       $978$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $976$hi;
       i64toi32_i32$0 = $976_1;
       i64toi32_i32$4 = $978$hi;
       i64toi32_i32$3 = $978_1;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $64_1 = i64toi32_i32$5;
       $64$hi = i64toi32_i32$2;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $729_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
        $729_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $981$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $974$hi;
       i64toi32_i32$2 = $974_1;
       i64toi32_i32$1 = $981$hi;
       i64toi32_i32$3 = $729_1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $982_1 = i64toi32_i32$4;
       $982$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $64$hi;
       i64toi32_i32$0 = $64_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 32;
       i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
        $730_1 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
        $730_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
       }
       $64_1 = $730_1;
       $64$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $52$hi;
       i64toi32_i32$2 = $62$hi;
       i64toi32_i32$2 = $52$hi;
       i64toi32_i32$0 = $62$hi;
       i64toi32_i32$0 = __wasm_i64_mul($52_1 | 0, i64toi32_i32$2 | 0, $62_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $988_1 = i64toi32_i32$0;
       $988$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $64$hi;
       i64toi32_i32$5 = $64_1;
       i64toi32_i32$0 = $988$hi;
       i64toi32_i32$3 = $988_1;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $67_1 = i64toi32_i32$1;
       $67$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $64$hi;
       i64toi32_i32$4 = $67$hi;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$5 = $64$hi;
       i64toi32_i32$3 = $64_1;
       $992_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$2 = 0;
       $993$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $982$hi;
       i64toi32_i32$3 = $982_1;
       i64toi32_i32$4 = $993$hi;
       i64toi32_i32$5 = $992_1;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $64_1 = i64toi32_i32$0;
       $64$hi = i64toi32_i32$1;
       label$34 : {
        label$35 : {
         i64toi32_i32$1 = $26$hi;
         i64toi32_i32$2 = $26_1;
         i64toi32_i32$3 = 0;
         i64toi32_i32$5 = 0;
         if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
          $732_1 = 1
         } else {
          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
           if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$5 >>> 0) {
            $734_1 = 0
           } else {
            $734_1 = 1
           }
           $735_1 = $734_1;
          } else {
           $735_1 = 0
          }
          $732_1 = $735_1;
         }
         $73_1 = $732_1;
         $997_1 = $73_1;
         i64toi32_i32$2 = $27$hi;
         i64toi32_i32$5 = $27_1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
          $736_1 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
           if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
            $737_1 = 0
           } else {
            $737_1 = 1
           }
           $738_1 = $737_1;
          } else {
           $738_1 = 0
          }
          $736_1 = $738_1;
         }
         $74_1 = $736_1;
         if (($997_1 | 0) != ($74_1 | 0)) {
          break label$35
         }
         i64toi32_i32$5 = $67$hi;
         $26_1 = $67_1;
         $26$hi = i64toi32_i32$5;
         break label$34;
        }
        i64toi32_i32$5 = $67$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = $67$hi;
        i64toi32_i32$1 = $67_1;
        i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
        i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
        i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
        $26_1 = i64toi32_i32$4;
        $26$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $64$hi;
        i64toi32_i32$5 = $64_1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$1 = -1;
        i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
        $1006$hi = i64toi32_i32$3;
        i64toi32_i32$3 = i64toi32_i32$2;
        $1008_1 = !($67_1 | i64toi32_i32$3 | 0);
        i64toi32_i32$3 = 0;
        $1009$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $1006$hi;
        i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
        i64toi32_i32$5 = $1009$hi;
        i64toi32_i32$1 = $1008_1;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $64_1 = i64toi32_i32$2;
        $64$hi = i64toi32_i32$4;
       }
       i64toi32_i32$4 = $53$hi;
       i64toi32_i32$4 = $51$hi;
       i64toi32_i32$4 = $53$hi;
       i64toi32_i32$3 = $53_1;
       i64toi32_i32$0 = $51$hi;
       i64toi32_i32$1 = $51_1;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $27_1 = i64toi32_i32$5;
       $27$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $56$hi;
       i64toi32_i32$2 = $57$hi;
       i64toi32_i32$2 = $56$hi;
       i64toi32_i32$3 = $57$hi;
       i64toi32_i32$3 = __wasm_i64_mul($56_1 | 0, i64toi32_i32$2 | 0, $57_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $67_1 = i64toi32_i32$3;
       $67$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $59$hi;
       i64toi32_i32$2 = $60$hi;
       i64toi32_i32$2 = $59$hi;
       i64toi32_i32$4 = $59_1;
       i64toi32_i32$3 = $60$hi;
       i64toi32_i32$1 = $60_1;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $57_1 = i64toi32_i32$0;
       $57$hi = i64toi32_i32$5;
       label$36 : {
        $13_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
        if ($13_1) {
         break label$36
        }
        label$37 : {
         label$38 : {
          $6_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
          if (!$6_1) {
           break label$38
          }
          HEAP32[($0_1 + 36 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
          break label$37;
         }
         $6_1 = $79(12 | 0, 16 | 0) | 0;
         HEAP32[($6_1 + 8 | 0) >> 2] = 0;
         $10_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
         HEAP32[($6_1 + 4 | 0) >> 2] = $10_1;
         (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = $79(Math_imul($10_1, 112) | 0, 16 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
         $10_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
         HEAP32[($0_1 + 32 | 0) >> 2] = $6_1;
         HEAP32[($6_1 + 8 | 0) >> 2] = $10_1;
        }
        $13_1 = HEAP32[$6_1 >> 2] | 0;
        $20_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
        if (($20_1 | 0) < (1 | 0)) {
         break label$36
        }
        $6_1 = 0;
        $10_1 = $13_1;
        label$39 : while (1) {
         $11_1 = $10_1 + 112 | 0;
         $6_1 = $6_1 + 1 | 0;
         HEAP32[$10_1 >> 2] = ($6_1 | 0) < ($20_1 | 0) ? $11_1 : 0;
         $10_1 = $11_1;
         if (($20_1 | 0) != ($6_1 | 0)) {
          continue label$39
         }
         break label$39;
        };
       }
       i64toi32_i32$5 = $64$hi;
       i64toi32_i32$2 = $64_1;
       i64toi32_i32$4 = -1;
       i64toi32_i32$1 = -1;
       i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
       $56_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
       $56$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $26$hi;
       $6_1 = !($26_1 | i64toi32_i32$4 | 0);
       i64toi32_i32$4 = $65$hi;
       i64toi32_i32$4 = $26$hi;
       i64toi32_i32$4 = $65$hi;
       i64toi32_i32$5 = $65_1;
       i64toi32_i32$2 = $26$hi;
       i64toi32_i32$1 = $26_1;
       i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
       i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0;
       i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
       $26_1 = i64toi32_i32$3;
       $26$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$0 = $67$hi;
       i64toi32_i32$0 = $27$hi;
       i64toi32_i32$4 = $27_1;
       i64toi32_i32$5 = $67$hi;
       i64toi32_i32$1 = $67_1;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $64_1 = i64toi32_i32$2;
       $64$hi = i64toi32_i32$3;
       HEAP32[($0_1 + 40 | 0) >> 2] = HEAP32[$13_1 >> 2] | 0;
       i64toi32_i32$4 = $13_1 + 8 | 0;
       i64toi32_i32$3 = 0;
       HEAP32[i64toi32_i32$4 >> 2] = 0;
       HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
       HEAP32[($13_1 + 16 | 0) >> 2] = 0;
       i64toi32_i32$4 = $13_1 + 100 | 0;
       i64toi32_i32$3 = -1;
       HEAP32[i64toi32_i32$4 >> 2] = -1;
       HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
       i64toi32_i32$4 = $13_1;
       i64toi32_i32$3 = 0;
       HEAP32[i64toi32_i32$4 >> 2] = 0;
       HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
       i64toi32_i32$3 = $57$hi;
       i64toi32_i32$0 = $1_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] | 0;
       i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
       $59_1 = i64toi32_i32$3;
       $59$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $57$hi;
       i64toi32_i32$3 = $59$hi;
       i64toi32_i32$3 = __wasm_i64_mul($57_1 | 0, i64toi32_i32$4 | 0, $59_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $27_1 = i64toi32_i32$3;
       $27$hi = i64toi32_i32$4;
       $1092_1 = i64toi32_i32$3;
       $1092$hi = i64toi32_i32$4;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 63;
       i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$4 >> 31 | 0;
        $739_1 = i64toi32_i32$4 >> i64toi32_i32$5 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$4 >> i64toi32_i32$5 | 0;
        $739_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
       }
       $67_1 = $739_1;
       $67$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1092$hi;
       i64toi32_i32$4 = $1092_1;
       i64toi32_i32$0 = $67$hi;
       i64toi32_i32$1 = $67_1;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1096$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $67$hi;
       i64toi32_i32$2 = $1096$hi;
       i64toi32_i32$3 = i64toi32_i32$5;
       i64toi32_i32$4 = $67$hi;
       i64toi32_i32$1 = $67_1;
       i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
       $67_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
       $67$hi = i64toi32_i32$4;
       i64toi32_i32$2 = $67_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = -1;
       i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
       $51_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
       $51$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $28$hi;
       i64toi32_i32$3 = $51$hi;
       i64toi32_i32$2 = $28$hi;
       i64toi32_i32$2 = __wasm_i64_mul($51_1 | 0, i64toi32_i32$3 | 0, $28_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $53_1 = i64toi32_i32$2;
       $53$hi = i64toi32_i32$3;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = 32;
       i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $740_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
        $740_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
       }
       $1105_1 = $740_1;
       $1105$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $67$hi;
       i64toi32_i32$3 = $67_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$1 = 32;
       i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = 0;
        $741_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
        $741_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
       }
       $67_1 = $741_1;
       $67$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $28$hi;
       i64toi32_i32$4 = $67$hi;
       i64toi32_i32$3 = $28$hi;
       i64toi32_i32$3 = __wasm_i64_mul($67_1 | 0, i64toi32_i32$4 | 0, $28_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $1110_1 = i64toi32_i32$3;
       $1110$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $1105$hi;
       i64toi32_i32$2 = $1105_1;
       i64toi32_i32$3 = $1110$hi;
       i64toi32_i32$1 = $1110_1;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1111_1 = i64toi32_i32$0;
       $1111$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $67$hi;
       i64toi32_i32$5 = $34$hi;
       i64toi32_i32$5 = $67$hi;
       i64toi32_i32$2 = $34$hi;
       i64toi32_i32$2 = __wasm_i64_mul($67_1 | 0, i64toi32_i32$5 | 0, $34_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $67_1 = i64toi32_i32$2;
       $67$hi = i64toi32_i32$5;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = 32;
       i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $743_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
        $743_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
       }
       $1116$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1111$hi;
       i64toi32_i32$5 = $1111_1;
       i64toi32_i32$4 = $1116$hi;
       i64toi32_i32$1 = $743_1;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1117_1 = i64toi32_i32$3;
       $1117$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $53$hi;
       i64toi32_i32$2 = $53_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = -1;
       i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
       $1119_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
       $1119$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $67$hi;
       i64toi32_i32$0 = $67_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = -1;
       i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
       $1121_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
       $1121$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1119$hi;
       i64toi32_i32$5 = $1119_1;
       i64toi32_i32$0 = $1121$hi;
       i64toi32_i32$1 = $1121_1;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $67_1 = i64toi32_i32$4;
       $67$hi = i64toi32_i32$3;
       i64toi32_i32$2 = i64toi32_i32$4;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 32;
       i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $744_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
        $744_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
       }
       $1124$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1117$hi;
       i64toi32_i32$3 = $1117_1;
       i64toi32_i32$2 = $1124$hi;
       i64toi32_i32$1 = $744_1;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $1125_1 = i64toi32_i32$0;
       $1125$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $67$hi;
       i64toi32_i32$5 = $67_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 32;
       i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
        $745_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
        $745_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
       }
       $67_1 = $745_1;
       $67$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $51$hi;
       i64toi32_i32$3 = $34$hi;
       i64toi32_i32$3 = $51$hi;
       i64toi32_i32$5 = $34$hi;
       i64toi32_i32$5 = __wasm_i64_mul($51_1 | 0, i64toi32_i32$3 | 0, $34_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $1131_1 = i64toi32_i32$5;
       $1131$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $67$hi;
       i64toi32_i32$4 = $67_1;
       i64toi32_i32$5 = $1131$hi;
       i64toi32_i32$1 = $1131_1;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $53_1 = i64toi32_i32$2;
       $53$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $67$hi;
       i64toi32_i32$0 = $53$hi;
       i64toi32_i32$3 = i64toi32_i32$2;
       i64toi32_i32$4 = $67$hi;
       i64toi32_i32$1 = $67_1;
       $1135_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
       i64toi32_i32$3 = 0;
       $1136$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1125$hi;
       i64toi32_i32$1 = $1125_1;
       i64toi32_i32$0 = $1136$hi;
       i64toi32_i32$4 = $1135_1;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $67_1 = i64toi32_i32$5;
       $67$hi = i64toi32_i32$2;
       label$40 : {
        label$41 : {
         $1138_1 = $61_1;
         i64toi32_i32$2 = $27$hi;
         i64toi32_i32$3 = $27_1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
          $746_1 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
           if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$4 >>> 0) {
            $747_1 = 0
           } else {
            $747_1 = 1
           }
           $748_1 = $747_1;
          } else {
           $748_1 = 0
          }
          $746_1 = $748_1;
         }
         if (($1138_1 | 0) != ($746_1 | 0)) {
          break label$41
         }
         i64toi32_i32$3 = $53$hi;
         $51_1 = $53_1;
         $51$hi = i64toi32_i32$3;
         break label$40;
        }
        i64toi32_i32$3 = $53$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$4 = 0;
        i64toi32_i32$2 = $53$hi;
        i64toi32_i32$1 = $53_1;
        i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
        i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
        $51_1 = i64toi32_i32$0;
        $51$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $67$hi;
        i64toi32_i32$3 = $67_1;
        i64toi32_i32$4 = -1;
        i64toi32_i32$1 = -1;
        i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
        $1146$hi = i64toi32_i32$4;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$4 = 0;
        $1149$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $1146$hi;
        i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
        i64toi32_i32$3 = $1149$hi;
        i64toi32_i32$1 = !($53_1 | i64toi32_i32$2 | 0);
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $67_1 = i64toi32_i32$2;
        $67$hi = i64toi32_i32$0;
       }
       i64toi32_i32$0 = $66$hi;
       i64toi32_i32$0 = $56$hi;
       i64toi32_i32$0 = $66$hi;
       i64toi32_i32$4 = $66_1;
       i64toi32_i32$5 = $56$hi;
       i64toi32_i32$1 = $56_1;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $56_1 = i64toi32_i32$3;
       $56$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       $60_1 = $6_1;
       $60$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $26$hi;
       i64toi32_i32$2 = $65$hi;
       i64toi32_i32$2 = $26$hi;
       i64toi32_i32$0 = $26_1;
       i64toi32_i32$4 = $65$hi;
       i64toi32_i32$1 = $65_1;
       $6_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
       i64toi32_i32$0 = $64$hi;
       i64toi32_i32$0 = $59$hi;
       i64toi32_i32$0 = $64$hi;
       i64toi32_i32$2 = $59$hi;
       i64toi32_i32$2 = __wasm_i64_mul($64_1 | 0, i64toi32_i32$0 | 0, $59_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $27_1 = i64toi32_i32$2;
       $27$hi = i64toi32_i32$0;
       $1162_1 = i64toi32_i32$2;
       $1162$hi = i64toi32_i32$0;
       i64toi32_i32$1 = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = 63;
       i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
        $749_1 = i64toi32_i32$0 >> i64toi32_i32$5 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$0 >> i64toi32_i32$5 | 0;
        $749_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
       }
       $65_1 = $749_1;
       $65$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1162$hi;
       i64toi32_i32$0 = $1162_1;
       i64toi32_i32$1 = $65$hi;
       i64toi32_i32$4 = $65_1;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $1166$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $65$hi;
       i64toi32_i32$3 = $1166$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$0 = $65$hi;
       i64toi32_i32$4 = $65_1;
       i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
       $65_1 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
       $65$hi = i64toi32_i32$0;
       i64toi32_i32$3 = $65_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
       $66_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $66$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $58$hi;
       i64toi32_i32$2 = $66$hi;
       i64toi32_i32$3 = $58$hi;
       i64toi32_i32$3 = __wasm_i64_mul($66_1 | 0, i64toi32_i32$2 | 0, $58_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $53_1 = i64toi32_i32$3;
       $53$hi = i64toi32_i32$2;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $750_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
        $750_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
       }
       $1175_1 = $750_1;
       $1175$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $65$hi;
       i64toi32_i32$2 = $65_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $751_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
        $751_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
       }
       $65_1 = $751_1;
       $65$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $58$hi;
       i64toi32_i32$0 = $65$hi;
       i64toi32_i32$2 = $58$hi;
       i64toi32_i32$2 = __wasm_i64_mul($65_1 | 0, i64toi32_i32$0 | 0, $58_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $1180_1 = i64toi32_i32$2;
       $1180$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1175$hi;
       i64toi32_i32$3 = $1175_1;
       i64toi32_i32$2 = $1180$hi;
       i64toi32_i32$4 = $1180_1;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1181_1 = i64toi32_i32$1;
       $1181$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $65$hi;
       i64toi32_i32$5 = $52$hi;
       i64toi32_i32$5 = $65$hi;
       i64toi32_i32$3 = $52$hi;
       i64toi32_i32$3 = __wasm_i64_mul($65_1 | 0, i64toi32_i32$5 | 0, $52_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $65_1 = i64toi32_i32$3;
       $65$hi = i64toi32_i32$5;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $752_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
        $752_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
       }
       $1186$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1181$hi;
       i64toi32_i32$5 = $1181_1;
       i64toi32_i32$0 = $1186$hi;
       i64toi32_i32$4 = $752_1;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $1187_1 = i64toi32_i32$2;
       $1187$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $53$hi;
       i64toi32_i32$3 = $53_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
       $1189_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $1189$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $65$hi;
       i64toi32_i32$1 = $65_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       $1191_1 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
       $1191$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1189$hi;
       i64toi32_i32$5 = $1189_1;
       i64toi32_i32$1 = $1191$hi;
       i64toi32_i32$4 = $1191_1;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $65_1 = i64toi32_i32$0;
       $65$hi = i64toi32_i32$2;
       i64toi32_i32$3 = i64toi32_i32$0;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $753_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
        $753_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
       }
       $1194$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1187$hi;
       i64toi32_i32$2 = $1187_1;
       i64toi32_i32$3 = $1194$hi;
       i64toi32_i32$4 = $753_1;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1195_1 = i64toi32_i32$1;
       $1195$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $65$hi;
       i64toi32_i32$5 = $65_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
        $754_1 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
        $754_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
       }
       $53_1 = $754_1;
       $53$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $66$hi;
       i64toi32_i32$2 = $52$hi;
       i64toi32_i32$2 = $66$hi;
       i64toi32_i32$5 = $52$hi;
       i64toi32_i32$5 = __wasm_i64_mul($66_1 | 0, i64toi32_i32$2 | 0, $52_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $1201_1 = i64toi32_i32$5;
       $1201$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $53$hi;
       i64toi32_i32$0 = $53_1;
       i64toi32_i32$5 = $1201$hi;
       i64toi32_i32$4 = $1201_1;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $65_1 = i64toi32_i32$3;
       $65$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $53$hi;
       i64toi32_i32$1 = $65$hi;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$0 = $53$hi;
       i64toi32_i32$4 = $53_1;
       $1205_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
       i64toi32_i32$2 = 0;
       $1206$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1195$hi;
       i64toi32_i32$4 = $1195_1;
       i64toi32_i32$1 = $1206$hi;
       i64toi32_i32$0 = $1205_1;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $66_1 = i64toi32_i32$5;
       $66$hi = i64toi32_i32$3;
       label$42 : {
        label$43 : {
         $1208_1 = $74_1;
         i64toi32_i32$3 = $27$hi;
         i64toi32_i32$2 = $27_1;
         i64toi32_i32$4 = 0;
         i64toi32_i32$0 = 0;
         if ((i64toi32_i32$3 | 0) < (i64toi32_i32$4 | 0)) {
          $755_1 = 1
         } else {
          if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$4 | 0)) {
           if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$0 >>> 0) {
            $756_1 = 0
           } else {
            $756_1 = 1
           }
           $757_1 = $756_1;
          } else {
           $757_1 = 0
          }
          $755_1 = $757_1;
         }
         if (($1208_1 | 0) != ($755_1 | 0)) {
          break label$43
         }
         i64toi32_i32$2 = $65$hi;
         $53_1 = $65_1;
         $53$hi = i64toi32_i32$2;
         break label$42;
        }
        i64toi32_i32$2 = $65$hi;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = $65$hi;
        i64toi32_i32$4 = $65_1;
        i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
        $53_1 = i64toi32_i32$1;
        $53$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $66$hi;
        i64toi32_i32$2 = $66_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$4 = -1;
        i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
        $1216$hi = i64toi32_i32$0;
        i64toi32_i32$0 = i64toi32_i32$3;
        $1218_1 = !($65_1 | i64toi32_i32$0 | 0);
        i64toi32_i32$0 = 0;
        $1219$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $1216$hi;
        i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
        i64toi32_i32$2 = $1219$hi;
        i64toi32_i32$4 = $1218_1;
        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $66_1 = i64toi32_i32$3;
        $66$hi = i64toi32_i32$1;
       }
       i64toi32_i32$1 = $56$hi;
       i64toi32_i32$1 = $60$hi;
       i64toi32_i32$1 = $56$hi;
       i64toi32_i32$0 = $56_1;
       i64toi32_i32$5 = $60$hi;
       i64toi32_i32$4 = $60_1;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $60_1 = i64toi32_i32$2;
       $60$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       $63_1 = $6_1;
       $63$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $64$hi;
       i64toi32_i32$1 = $1_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0;
       i64toi32_i32$0 = i64toi32_i32$3 >> 31 | 0;
       $68_1 = i64toi32_i32$3;
       $68$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $64$hi;
       i64toi32_i32$3 = $68$hi;
       i64toi32_i32$3 = __wasm_i64_mul($64_1 | 0, i64toi32_i32$0 | 0, $68_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $27_1 = i64toi32_i32$3;
       $27$hi = i64toi32_i32$0;
       $1231_1 = i64toi32_i32$3;
       $1231$hi = i64toi32_i32$0;
       i64toi32_i32$1 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 63;
       i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$0 >> 31 | 0;
        $758_1 = i64toi32_i32$0 >> i64toi32_i32$5 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$0 >> i64toi32_i32$5 | 0;
        $758_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
       }
       $65_1 = $758_1;
       $65$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1231$hi;
       i64toi32_i32$0 = $1231_1;
       i64toi32_i32$1 = $65$hi;
       i64toi32_i32$4 = $65_1;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1235$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $65$hi;
       i64toi32_i32$2 = $1235$hi;
       i64toi32_i32$3 = i64toi32_i32$5;
       i64toi32_i32$0 = $65$hi;
       i64toi32_i32$4 = $65_1;
       i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
       $65_1 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
       $65$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $65_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
       $56_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
       $56$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $32$hi;
       i64toi32_i32$3 = $56$hi;
       i64toi32_i32$2 = $32$hi;
       i64toi32_i32$2 = __wasm_i64_mul($56_1 | 0, i64toi32_i32$3 | 0, $32_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $59_1 = i64toi32_i32$2;
       $59$hi = i64toi32_i32$3;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $759_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
        $759_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
       }
       $1244 = $759_1;
       $1244$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $65$hi;
       i64toi32_i32$3 = $65_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $760_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
        $760_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
       }
       $65_1 = $760_1;
       $65$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $32$hi;
       i64toi32_i32$0 = $65$hi;
       i64toi32_i32$3 = $32$hi;
       i64toi32_i32$3 = __wasm_i64_mul($65_1 | 0, i64toi32_i32$0 | 0, $32_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $1249 = i64toi32_i32$3;
       $1249$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1244$hi;
       i64toi32_i32$2 = $1244;
       i64toi32_i32$3 = $1249$hi;
       i64toi32_i32$4 = $1249;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1250 = i64toi32_i32$1;
       $1250$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $65$hi;
       i64toi32_i32$5 = $30$hi;
       i64toi32_i32$5 = $65$hi;
       i64toi32_i32$2 = $30$hi;
       i64toi32_i32$2 = __wasm_i64_mul($65_1 | 0, i64toi32_i32$5 | 0, $30_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $65_1 = i64toi32_i32$2;
       $65$hi = i64toi32_i32$5;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $761_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
        $761_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
       }
       $1255$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1250$hi;
       i64toi32_i32$5 = $1250;
       i64toi32_i32$0 = $1255$hi;
       i64toi32_i32$4 = $761_1;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $1256 = i64toi32_i32$3;
       $1256$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $59$hi;
       i64toi32_i32$2 = $59_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
       $1258 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
       $1258$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $65$hi;
       i64toi32_i32$1 = $65_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
       $1260 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
       $1260$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1258$hi;
       i64toi32_i32$5 = $1258;
       i64toi32_i32$1 = $1260$hi;
       i64toi32_i32$4 = $1260;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $65_1 = i64toi32_i32$0;
       $65$hi = i64toi32_i32$3;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $762_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
        $762_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
       }
       $1263$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1256$hi;
       i64toi32_i32$3 = $1256;
       i64toi32_i32$2 = $1263$hi;
       i64toi32_i32$4 = $762_1;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1264 = i64toi32_i32$1;
       $1264$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $65$hi;
       i64toi32_i32$5 = $65_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
        $763_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
        $763_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
       }
       $59_1 = $763_1;
       $59$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $56$hi;
       i64toi32_i32$3 = $30$hi;
       i64toi32_i32$3 = $56$hi;
       i64toi32_i32$5 = $30$hi;
       i64toi32_i32$5 = __wasm_i64_mul($56_1 | 0, i64toi32_i32$3 | 0, $30_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $1270 = i64toi32_i32$5;
       $1270$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $59$hi;
       i64toi32_i32$0 = $59_1;
       i64toi32_i32$5 = $1270$hi;
       i64toi32_i32$4 = $1270;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $65_1 = i64toi32_i32$2;
       $65$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $59$hi;
       i64toi32_i32$1 = $65$hi;
       i64toi32_i32$3 = i64toi32_i32$2;
       i64toi32_i32$0 = $59$hi;
       i64toi32_i32$4 = $59_1;
       $1274 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
       i64toi32_i32$3 = 0;
       $1275$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1264$hi;
       i64toi32_i32$4 = $1264;
       i64toi32_i32$1 = $1275$hi;
       i64toi32_i32$0 = $1274;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $56_1 = i64toi32_i32$5;
       $56$hi = i64toi32_i32$2;
       label$44 : {
        label$45 : {
         $1277 = $54_1;
         i64toi32_i32$2 = $27$hi;
         i64toi32_i32$3 = $27_1;
         i64toi32_i32$4 = 0;
         i64toi32_i32$0 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$4 | 0)) {
          $764_1 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$4 | 0)) {
           if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
            $765_1 = 0
           } else {
            $765_1 = 1
           }
           $766_1 = $765_1;
          } else {
           $766_1 = 0
          }
          $764_1 = $766_1;
         }
         if (($1277 | 0) != ($764_1 | 0)) {
          break label$45
         }
         i64toi32_i32$3 = $65$hi;
         $59_1 = $65_1;
         $59$hi = i64toi32_i32$3;
         break label$44;
        }
        i64toi32_i32$3 = $65$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = $65$hi;
        i64toi32_i32$4 = $65_1;
        i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
        $59_1 = i64toi32_i32$1;
        $59$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $56$hi;
        i64toi32_i32$3 = $56_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$4 = -1;
        i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
        $1285$hi = i64toi32_i32$0;
        i64toi32_i32$0 = i64toi32_i32$2;
        $1287 = !($65_1 | i64toi32_i32$0 | 0);
        i64toi32_i32$0 = 0;
        $1288$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $1285$hi;
        i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
        i64toi32_i32$3 = $1288$hi;
        i64toi32_i32$4 = $1287;
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $56_1 = i64toi32_i32$2;
        $56$hi = i64toi32_i32$1;
       }
       i64toi32_i32$1 = $60$hi;
       i64toi32_i32$1 = $63$hi;
       i64toi32_i32$1 = $60$hi;
       i64toi32_i32$0 = $60_1;
       i64toi32_i32$5 = $63$hi;
       i64toi32_i32$4 = $63_1;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $27_1 = i64toi32_i32$3;
       $27$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $57$hi;
       i64toi32_i32$2 = $68$hi;
       i64toi32_i32$2 = $57$hi;
       i64toi32_i32$0 = $68$hi;
       i64toi32_i32$0 = __wasm_i64_mul($57_1 | 0, i64toi32_i32$2 | 0, $68_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $65_1 = i64toi32_i32$0;
       $65$hi = i64toi32_i32$2;
       $1296 = i64toi32_i32$0;
       $1296$hi = i64toi32_i32$2;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 63;
       i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
        $768_1 = i64toi32_i32$2 >> i64toi32_i32$5 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$2 >> i64toi32_i32$5 | 0;
        $768_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
       }
       $60_1 = $768_1;
       $60$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1296$hi;
       i64toi32_i32$2 = $1296;
       i64toi32_i32$1 = $60$hi;
       i64toi32_i32$4 = $60_1;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $1300$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $60$hi;
       i64toi32_i32$3 = $1300$hi;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$2 = $60$hi;
       i64toi32_i32$4 = $60_1;
       i64toi32_i32$2 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
       $60_1 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
       $60$hi = i64toi32_i32$2;
       i64toi32_i32$3 = $60_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       $63_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $63$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $55$hi;
       i64toi32_i32$0 = $63$hi;
       i64toi32_i32$3 = $55$hi;
       i64toi32_i32$3 = __wasm_i64_mul($63_1 | 0, i64toi32_i32$0 | 0, $55_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $68_1 = i64toi32_i32$3;
       $68$hi = i64toi32_i32$0;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $769_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
        $769_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
       }
       $1309 = $769_1;
       $1309$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $60$hi;
       i64toi32_i32$0 = $60_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $770_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
        $770_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
       }
       $60_1 = $770_1;
       $60$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $55$hi;
       i64toi32_i32$2 = $60$hi;
       i64toi32_i32$0 = $55$hi;
       i64toi32_i32$0 = __wasm_i64_mul($60_1 | 0, i64toi32_i32$2 | 0, $55_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $1314 = i64toi32_i32$0;
       $1314$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1309$hi;
       i64toi32_i32$3 = $1309;
       i64toi32_i32$0 = $1314$hi;
       i64toi32_i32$4 = $1314;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1315 = i64toi32_i32$1;
       $1315$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $60$hi;
       i64toi32_i32$5 = $62$hi;
       i64toi32_i32$5 = $60$hi;
       i64toi32_i32$3 = $62$hi;
       i64toi32_i32$3 = __wasm_i64_mul($60_1 | 0, i64toi32_i32$5 | 0, $62_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $60_1 = i64toi32_i32$3;
       $60$hi = i64toi32_i32$5;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $771_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
        $771_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
       }
       $1320$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1315$hi;
       i64toi32_i32$5 = $1315;
       i64toi32_i32$2 = $1320$hi;
       i64toi32_i32$4 = $771_1;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $1321 = i64toi32_i32$0;
       $1321$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $68$hi;
       i64toi32_i32$3 = $68_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
       $1323 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $1323$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $60$hi;
       i64toi32_i32$1 = $60_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       $1325 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
       $1325$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1323$hi;
       i64toi32_i32$5 = $1323;
       i64toi32_i32$1 = $1325$hi;
       i64toi32_i32$4 = $1325;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $60_1 = i64toi32_i32$2;
       $60$hi = i64toi32_i32$0;
       i64toi32_i32$3 = i64toi32_i32$2;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $772_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
        $772_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
       }
       $1328$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1321$hi;
       i64toi32_i32$0 = $1321;
       i64toi32_i32$3 = $1328$hi;
       i64toi32_i32$4 = $772_1;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1329 = i64toi32_i32$1;
       $1329$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $60$hi;
       i64toi32_i32$5 = $60_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
        $773_1 = 0;
       } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
        $773_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
       }
       $60_1 = $773_1;
       $60$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $63$hi;
       i64toi32_i32$0 = $62$hi;
       i64toi32_i32$0 = $63$hi;
       i64toi32_i32$5 = $62$hi;
       i64toi32_i32$5 = __wasm_i64_mul($63_1 | 0, i64toi32_i32$0 | 0, $62_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $1335 = i64toi32_i32$5;
       $1335$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $60$hi;
       i64toi32_i32$2 = $60_1;
       i64toi32_i32$5 = $1335$hi;
       i64toi32_i32$4 = $1335;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $68_1 = i64toi32_i32$3;
       $68$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $60$hi;
       i64toi32_i32$1 = $68$hi;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$2 = $60$hi;
       i64toi32_i32$4 = $60_1;
       $1339 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $1340$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1329$hi;
       i64toi32_i32$4 = $1329;
       i64toi32_i32$1 = $1340$hi;
       i64toi32_i32$2 = $1339;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $60_1 = i64toi32_i32$5;
       $60$hi = i64toi32_i32$3;
       label$46 : {
        label$47 : {
         $1342 = $73_1;
         i64toi32_i32$3 = $65$hi;
         i64toi32_i32$0 = $65_1;
         i64toi32_i32$4 = 0;
         i64toi32_i32$2 = 0;
         if ((i64toi32_i32$3 | 0) < (i64toi32_i32$4 | 0)) {
          $774_1 = 1
         } else {
          if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$4 | 0)) {
           if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
            $775_1 = 0
           } else {
            $775_1 = 1
           }
           $777_1 = $775_1;
          } else {
           $777_1 = 0
          }
          $774_1 = $777_1;
         }
         if (($1342 | 0) != ($774_1 | 0)) {
          break label$47
         }
         i64toi32_i32$0 = $68$hi;
         $63_1 = $68_1;
         $63$hi = i64toi32_i32$0;
         break label$46;
        }
        i64toi32_i32$0 = $68$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = $68$hi;
        i64toi32_i32$4 = $68_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
        $63_1 = i64toi32_i32$1;
        $63$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $60$hi;
        i64toi32_i32$0 = $60_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$4 = -1;
        i64toi32_i32$2 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
        $1350$hi = i64toi32_i32$2;
        i64toi32_i32$2 = i64toi32_i32$3;
        i64toi32_i32$2 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        $1353$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $1350$hi;
        i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
        i64toi32_i32$0 = $1353$hi;
        i64toi32_i32$4 = !($68_1 | i64toi32_i32$3 | 0);
        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $60_1 = i64toi32_i32$3;
        $60$hi = i64toi32_i32$1;
       }
       i64toi32_i32$1 = $26$hi;
       $65_1 = $26_1;
       $65$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       $68_1 = $27_1;
       $68$hi = i64toi32_i32$1;
       label$48 : {
        i64toi32_i32$2 = $27_1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$4 = -1;
        if ((i64toi32_i32$1 | 0) > (i64toi32_i32$5 | 0)) {
         $778_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$5 | 0)) {
          if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$4 >>> 0) {
           $779_1 = 0
          } else {
           $779_1 = 1
          }
          $780_1 = $779_1;
         } else {
          $780_1 = 0
         }
         $778_1 = $780_1;
        }
        $6_1 = $778_1;
        if ($6_1) {
         break label$48
        }
        i64toi32_i32$2 = $26$hi;
        i64toi32_i32$2 = 0;
        i64toi32_i32$4 = 0;
        i64toi32_i32$1 = $26$hi;
        i64toi32_i32$5 = $26_1;
        i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
        i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
        $65_1 = i64toi32_i32$0;
        $65$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $27$hi;
        i64toi32_i32$2 = $27_1;
        i64toi32_i32$4 = -1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
        $1363$hi = i64toi32_i32$4;
        i64toi32_i32$4 = i64toi32_i32$1;
        i64toi32_i32$4 = i64toi32_i32$1;
        i64toi32_i32$4 = 0;
        $1366$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $1363$hi;
        i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
        i64toi32_i32$2 = $1366$hi;
        i64toi32_i32$5 = !($26_1 | i64toi32_i32$1 | 0);
        i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $68_1 = i64toi32_i32$1;
        $68$hi = i64toi32_i32$0;
       }
       i64toi32_i32$0 = $68$hi;
       i64toi32_i32$0 = $42$hi;
       i64toi32_i32$0 = $68$hi;
       i64toi32_i32$3 = $42$hi;
       i64toi32_i32$3 = __wasm_i64_mul($68_1 | 0, i64toi32_i32$0 | 0, $42_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $1370 = i64toi32_i32$3;
       $1370$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $65$hi;
       i64toi32_i32$4 = $65_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $781_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
        $781_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
       }
       $68_1 = $781_1;
       $68$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $43$hi;
       i64toi32_i32$3 = $68$hi;
       i64toi32_i32$4 = $43$hi;
       i64toi32_i32$4 = __wasm_i64_mul($68_1 | 0, i64toi32_i32$3 | 0, $43_1 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $1375 = i64toi32_i32$4;
       $1375$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1370$hi;
       i64toi32_i32$0 = $1370;
       i64toi32_i32$4 = $1375$hi;
       i64toi32_i32$5 = $1375;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $1376 = i64toi32_i32$2;
       $1376$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $65$hi;
       i64toi32_i32$3 = $65_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$5 = -1;
       i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
       $65_1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $65$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $43$hi;
       i64toi32_i32$0 = $65$hi;
       i64toi32_i32$3 = $43$hi;
       i64toi32_i32$3 = __wasm_i64_mul($65_1 | 0, i64toi32_i32$0 | 0, $43_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $69_1 = i64toi32_i32$3;
       $69$hi = i64toi32_i32$0;
       i64toi32_i32$1 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $782_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $782_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $1383$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1376$hi;
       i64toi32_i32$0 = $1376;
       i64toi32_i32$1 = $1383$hi;
       i64toi32_i32$5 = $782_1;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1384 = i64toi32_i32$4;
       $1384$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $68$hi;
       i64toi32_i32$2 = $44$hi;
       i64toi32_i32$2 = $68$hi;
       i64toi32_i32$0 = $44$hi;
       i64toi32_i32$0 = __wasm_i64_mul($68_1 | 0, i64toi32_i32$2 | 0, $44_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $68_1 = i64toi32_i32$0;
       $68$hi = i64toi32_i32$2;
       i64toi32_i32$3 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $783_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
        $783_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
       }
       $1389$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1384$hi;
       i64toi32_i32$2 = $1384;
       i64toi32_i32$3 = $1389$hi;
       i64toi32_i32$5 = $783_1;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $1390 = i64toi32_i32$1;
       $1390$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $69$hi;
       i64toi32_i32$0 = $69_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = -1;
       i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
       $1392 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
       $1392$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $68$hi;
       i64toi32_i32$4 = $68_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$5 = -1;
       i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       $1394 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
       $1394$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1392$hi;
       i64toi32_i32$2 = $1392;
       i64toi32_i32$4 = $1394$hi;
       i64toi32_i32$5 = $1394;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $68_1 = i64toi32_i32$3;
       $68$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $784_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
        $784_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       $1397$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1390$hi;
       i64toi32_i32$1 = $1390;
       i64toi32_i32$0 = $1397$hi;
       i64toi32_i32$5 = $784_1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $1398 = i64toi32_i32$4;
       $1398$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $68$hi;
       i64toi32_i32$2 = $68_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
        $785_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
        $785_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
       }
       $68_1 = $785_1;
       $68$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $65$hi;
       i64toi32_i32$1 = $44$hi;
       i64toi32_i32$1 = $65$hi;
       i64toi32_i32$2 = $44$hi;
       i64toi32_i32$2 = __wasm_i64_mul($65_1 | 0, i64toi32_i32$1 | 0, $44_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $1404 = i64toi32_i32$2;
       $1404$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $68$hi;
       i64toi32_i32$3 = $68_1;
       i64toi32_i32$2 = $1404$hi;
       i64toi32_i32$5 = $1404;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $65_1 = i64toi32_i32$0;
       $65$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $68$hi;
       i64toi32_i32$4 = $65$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$3 = $68$hi;
       i64toi32_i32$5 = $68_1;
       $1408 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$1 = 0;
       $1409$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1398$hi;
       i64toi32_i32$5 = $1398;
       i64toi32_i32$4 = $1409$hi;
       i64toi32_i32$3 = $1408;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $68_1 = i64toi32_i32$2;
       $68$hi = i64toi32_i32$0;
       label$49 : {
        label$50 : {
         $1412 = ($31_1 | 0) < (0 | 0);
         i64toi32_i32$0 = $27$hi;
         i64toi32_i32$1 = $27_1;
         i64toi32_i32$5 = 0;
         i64toi32_i32$3 = 0;
         if ((i64toi32_i32$0 | 0) < (i64toi32_i32$5 | 0)) {
          $787_1 = 1
         } else {
          if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$5 | 0)) {
           if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
            $788_1 = 0
           } else {
            $788_1 = 1
           }
           $789_1 = $788_1;
          } else {
           $789_1 = 0
          }
          $787_1 = $789_1;
         }
         $10_1 = $787_1;
         if (($1412 | 0) != ($10_1 | 0)) {
          break label$50
         }
         i64toi32_i32$1 = $65$hi;
         $69_1 = $65_1;
         $69$hi = i64toi32_i32$1;
         break label$49;
        }
        i64toi32_i32$1 = $65$hi;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = $65$hi;
        i64toi32_i32$5 = $65_1;
        i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
        i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
        $69_1 = i64toi32_i32$4;
        $69$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $68$hi;
        i64toi32_i32$1 = $68_1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
        $1421$hi = i64toi32_i32$3;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$3 = i64toi32_i32$0;
        i64toi32_i32$3 = 0;
        $1424$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $1421$hi;
        i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
        i64toi32_i32$1 = $1424$hi;
        i64toi32_i32$5 = !($65_1 | i64toi32_i32$0 | 0);
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $68_1 = i64toi32_i32$0;
        $68$hi = i64toi32_i32$4;
       }
       i64toi32_i32$4 = $57$hi;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
       $75_1 = i64toi32_i32$4;
       $75$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $57$hi;
       i64toi32_i32$4 = $75$hi;
       i64toi32_i32$4 = __wasm_i64_mul($57_1 | 0, i64toi32_i32$2 | 0, $75_1 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $65_1 = i64toi32_i32$4;
       $65$hi = i64toi32_i32$2;
       $1431 = i64toi32_i32$4;
       $1431$hi = i64toi32_i32$2;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       i64toi32_i32$5 = 63;
       i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
        $790_1 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$4 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
        $790_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
       }
       $70_1 = $790_1;
       $70$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $1431$hi;
       i64toi32_i32$2 = $1431;
       i64toi32_i32$3 = $70$hi;
       i64toi32_i32$5 = $70_1;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1435$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $70$hi;
       i64toi32_i32$0 = $1435$hi;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$2 = $70$hi;
       i64toi32_i32$5 = $70_1;
       i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
       $70_1 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
       $70$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $70_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$5 = -1;
       i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
       $71_1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
       $71$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $28$hi;
       i64toi32_i32$4 = $71$hi;
       i64toi32_i32$0 = $28$hi;
       i64toi32_i32$0 = __wasm_i64_mul($71_1 | 0, i64toi32_i32$4 | 0, $28_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $72_1 = i64toi32_i32$0;
       $72$hi = i64toi32_i32$4;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $791_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
        $791_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
       }
       $1444 = $791_1;
       $1444$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $70$hi;
       i64toi32_i32$4 = $70_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $792_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
        $792_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
       }
       $70_1 = $792_1;
       $70$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $28$hi;
       i64toi32_i32$2 = $70$hi;
       i64toi32_i32$4 = $28$hi;
       i64toi32_i32$4 = __wasm_i64_mul($70_1 | 0, i64toi32_i32$2 | 0, $28_1 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $1449 = i64toi32_i32$4;
       $1449$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1444$hi;
       i64toi32_i32$0 = $1444;
       i64toi32_i32$4 = $1449$hi;
       i64toi32_i32$5 = $1449;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $1450 = i64toi32_i32$3;
       $1450$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $70$hi;
       i64toi32_i32$1 = $34$hi;
       i64toi32_i32$1 = $70$hi;
       i64toi32_i32$0 = $34$hi;
       i64toi32_i32$0 = __wasm_i64_mul($70_1 | 0, i64toi32_i32$1 | 0, $34_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $70_1 = i64toi32_i32$0;
       $70$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $793_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
        $793_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
       }
       $1455$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1450$hi;
       i64toi32_i32$1 = $1450;
       i64toi32_i32$2 = $1455$hi;
       i64toi32_i32$5 = $793_1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $1456 = i64toi32_i32$4;
       $1456$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $72$hi;
       i64toi32_i32$0 = $72_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$5 = -1;
       i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
       $1458 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
       $1458$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $70$hi;
       i64toi32_i32$3 = $70_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$5 = -1;
       i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
       $1460 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $1460$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1458$hi;
       i64toi32_i32$1 = $1458;
       i64toi32_i32$3 = $1460$hi;
       i64toi32_i32$5 = $1460;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $70_1 = i64toi32_i32$2;
       $70$hi = i64toi32_i32$4;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$1 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $794_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
        $794_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
       }
       $1463$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1456$hi;
       i64toi32_i32$4 = $1456;
       i64toi32_i32$0 = $1463$hi;
       i64toi32_i32$5 = $794_1;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1464 = i64toi32_i32$3;
       $1464$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $70$hi;
       i64toi32_i32$1 = $70_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
        $795_1 = 0;
       } else {
        i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
        $795_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
       }
       $70_1 = $795_1;
       $70$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $71$hi;
       i64toi32_i32$4 = $34$hi;
       i64toi32_i32$4 = $71$hi;
       i64toi32_i32$1 = $34$hi;
       i64toi32_i32$1 = __wasm_i64_mul($71_1 | 0, i64toi32_i32$4 | 0, $34_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $1470 = i64toi32_i32$1;
       $1470$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $70$hi;
       i64toi32_i32$2 = $70_1;
       i64toi32_i32$1 = $1470$hi;
       i64toi32_i32$5 = $1470;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $72_1 = i64toi32_i32$0;
       $72$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $70$hi;
       i64toi32_i32$3 = $72$hi;
       i64toi32_i32$4 = i64toi32_i32$0;
       i64toi32_i32$2 = $70$hi;
       i64toi32_i32$5 = $70_1;
       $1474 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $1475$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $1464$hi;
       i64toi32_i32$5 = $1464;
       i64toi32_i32$3 = $1475$hi;
       i64toi32_i32$2 = $1474;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $70_1 = i64toi32_i32$1;
       $70$hi = i64toi32_i32$0;
       label$51 : {
        label$52 : {
         $1477 = $61_1;
         i64toi32_i32$0 = $65$hi;
         i64toi32_i32$4 = $65_1;
         i64toi32_i32$5 = 0;
         i64toi32_i32$2 = 0;
         if ((i64toi32_i32$0 | 0) < (i64toi32_i32$5 | 0)) {
          $796_1 = 1
         } else {
          if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$5 | 0)) {
           if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
            $797_1 = 0
           } else {
            $797_1 = 1
           }
           $798_1 = $797_1;
          } else {
           $798_1 = 0
          }
          $796_1 = $798_1;
         }
         if (($1477 | 0) != ($796_1 | 0)) {
          break label$52
         }
         i64toi32_i32$4 = $72$hi;
         $71_1 = $72_1;
         $71$hi = i64toi32_i32$4;
         break label$51;
        }
        i64toi32_i32$4 = $72$hi;
        i64toi32_i32$4 = 0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = $72$hi;
        i64toi32_i32$5 = $72_1;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
        i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
        $71_1 = i64toi32_i32$3;
        $71$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $70$hi;
        i64toi32_i32$4 = $70_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
        $1485$hi = i64toi32_i32$2;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$2 = 0;
        $1488$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $1485$hi;
        i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
        i64toi32_i32$4 = $1488$hi;
        i64toi32_i32$5 = !($72_1 | i64toi32_i32$0 | 0);
        i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
        }
        $70_1 = i64toi32_i32$0;
        $70$hi = i64toi32_i32$3;
       }
       i64toi32_i32$3 = $51$hi;
       i64toi32_i32$3 = $53$hi;
       i64toi32_i32$3 = $51$hi;
       i64toi32_i32$2 = $51_1;
       i64toi32_i32$1 = $53$hi;
       i64toi32_i32$5 = $53_1;
       i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
       i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
       $65_1 = i64toi32_i32$4;
       $65$hi = i64toi32_i32$0;
       i64toi32_i32$0 = i64toi32_i32$1;
       $20_1 = !(i64toi32_i32$5 | i64toi32_i32$1 | 0);
       i64toi32_i32$0 = $66$hi;
       i64toi32_i32$3 = $66_1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$5 = -1;
       i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
       $76_1 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
       $76$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $64$hi;
       i64toi32_i32$2 = $75$hi;
       i64toi32_i32$2 = $64$hi;
       i64toi32_i32$3 = $75$hi;
       i64toi32_i32$3 = __wasm_i64_mul($64_1 | 0, i64toi32_i32$2 | 0, $75_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $66_1 = i64toi32_i32$3;
       $66$hi = i64toi32_i32$2;
       $1500 = i64toi32_i32$3;
       $1500$hi = i64toi32_i32$2;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$5 = 63;
       i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 >> 31 | 0;
        $799_1 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$2 >> i64toi32_i32$1 | 0;
        $799_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
       }
       $53_1 = $799_1;
       $53$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1500$hi;
       i64toi32_i32$2 = $1500;
       i64toi32_i32$0 = $53$hi;
       i64toi32_i32$5 = $53_1;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $1504$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $53$hi;
       i64toi32_i32$4 = $1504$hi;
       i64toi32_i32$3 = i64toi32_i32$1;
       i64toi32_i32$2 = $53$hi;
       i64toi32_i32$5 = $53_1;
       i64toi32_i32$2 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
       $53_1 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
       $53$hi = i64toi32_i32$2;
       i64toi32_i32$4 = $53_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$5 = -1;
       i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
       $72_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
       $72$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $58$hi;
       i64toi32_i32$3 = $72$hi;
       i64toi32_i32$4 = $58$hi;
       i64toi32_i32$4 = __wasm_i64_mul($72_1 | 0, i64toi32_i32$3 | 0, $58_1 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $75_1 = i64toi32_i32$4;
       $75$hi = i64toi32_i32$3;
       i64toi32_i32$2 = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = 0;
        $801_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
        $801_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
       }
       $1513 = $801_1;
       $1513$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $53$hi;
       i64toi32_i32$3 = $53_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $803_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
        $803_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
       }
       $53_1 = $803_1;
       $53$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $58$hi;
       i64toi32_i32$2 = $53$hi;
       i64toi32_i32$3 = $58$hi;
       i64toi32_i32$3 = __wasm_i64_mul($53_1 | 0, i64toi32_i32$2 | 0, $58_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $1518 = i64toi32_i32$3;
       $1518$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1513$hi;
       i64toi32_i32$4 = $1513;
       i64toi32_i32$3 = $1518$hi;
       i64toi32_i32$5 = $1518;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $1519 = i64toi32_i32$0;
       $1519$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $53$hi;
       i64toi32_i32$1 = $52$hi;
       i64toi32_i32$1 = $53$hi;
       i64toi32_i32$4 = $52$hi;
       i64toi32_i32$4 = __wasm_i64_mul($53_1 | 0, i64toi32_i32$1 | 0, $52_1 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $53_1 = i64toi32_i32$4;
       $53$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = 0;
        $804_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $804_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
       }
       $1524$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $1519$hi;
       i64toi32_i32$1 = $1519;
       i64toi32_i32$2 = $1524$hi;
       i64toi32_i32$5 = $804_1;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1525 = i64toi32_i32$3;
       $1525$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $75$hi;
       i64toi32_i32$4 = $75_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$5 = -1;
       i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
       $1527 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
       $1527$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $53$hi;
       i64toi32_i32$0 = $53_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$5 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
       $1529 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
       $1529$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $1527$hi;
       i64toi32_i32$1 = $1527;
       i64toi32_i32$0 = $1529$hi;
       i64toi32_i32$5 = $1529;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $53_1 = i64toi32_i32$2;
       $53$hi = i64toi32_i32$3;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$1 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $805_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
        $805_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
       }
       $1532$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1525$hi;
       i64toi32_i32$3 = $1525;
       i64toi32_i32$4 = $1532$hi;
       i64toi32_i32$5 = $805_1;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1533 = i64toi32_i32$0;
       $1533$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $53$hi;
       i64toi32_i32$1 = $53_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $806_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
        $806_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $53_1 = $806_1;
       $53$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $72$hi;
       i64toi32_i32$3 = $52$hi;
       i64toi32_i32$3 = $72$hi;
       i64toi32_i32$1 = $52$hi;
       i64toi32_i32$1 = __wasm_i64_mul($72_1 | 0, i64toi32_i32$3 | 0, $52_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $1539 = i64toi32_i32$1;
       $1539$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $53$hi;
       i64toi32_i32$2 = $53_1;
       i64toi32_i32$1 = $1539$hi;
       i64toi32_i32$5 = $1539;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $75_1 = i64toi32_i32$4;
       $75$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $53$hi;
       i64toi32_i32$0 = $75$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$2 = $53$hi;
       i64toi32_i32$5 = $53_1;
       $1543 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$3 = 0;
       $1544$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1533$hi;
       i64toi32_i32$5 = $1533;
       i64toi32_i32$0 = $1544$hi;
       i64toi32_i32$2 = $1543;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $53_1 = i64toi32_i32$1;
       $53$hi = i64toi32_i32$4;
       label$53 : {
        label$54 : {
         $1546 = $74_1;
         i64toi32_i32$4 = $66$hi;
         i64toi32_i32$3 = $66_1;
         i64toi32_i32$5 = 0;
         i64toi32_i32$2 = 0;
         if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
          $807_1 = 1
         } else {
          if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
           if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
            $808_1 = 0
           } else {
            $808_1 = 1
           }
           $809_1 = $808_1;
          } else {
           $809_1 = 0
          }
          $807_1 = $809_1;
         }
         if (($1546 | 0) != ($807_1 | 0)) {
          break label$54
         }
         i64toi32_i32$3 = $75$hi;
         $72_1 = $75_1;
         $72$hi = i64toi32_i32$3;
         break label$53;
        }
        i64toi32_i32$3 = $75$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$4 = $75$hi;
        i64toi32_i32$5 = $75_1;
        i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
        i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
        $72_1 = i64toi32_i32$0;
        $72$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $53$hi;
        i64toi32_i32$3 = $53_1;
        i64toi32_i32$2 = -1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
        $1554$hi = i64toi32_i32$2;
        i64toi32_i32$2 = i64toi32_i32$4;
        $1556 = !($75_1 | i64toi32_i32$2 | 0);
        i64toi32_i32$2 = 0;
        $1557$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $1554$hi;
        i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
        i64toi32_i32$3 = $1557$hi;
        i64toi32_i32$5 = $1556;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $53_1 = i64toi32_i32$4;
        $53$hi = i64toi32_i32$0;
       }
       i64toi32_i32$0 = $65$hi;
       i64toi32_i32$0 = $51$hi;
       i64toi32_i32$0 = $65$hi;
       i64toi32_i32$2 = $65_1;
       i64toi32_i32$1 = $51$hi;
       i64toi32_i32$5 = $51_1;
       $11_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$2 = 0;
       $77_1 = $20_1;
       $77$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $67$hi;
       i64toi32_i32$2 = $76$hi;
       i64toi32_i32$2 = $67$hi;
       i64toi32_i32$5 = $67_1;
       i64toi32_i32$0 = $76$hi;
       i64toi32_i32$1 = $76_1;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $78_1 = i64toi32_i32$3;
       $78$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $64$hi;
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
       $79_1 = i64toi32_i32$4;
       $79$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $64$hi;
       i64toi32_i32$4 = $79$hi;
       i64toi32_i32$4 = __wasm_i64_mul($64_1 | 0, i64toi32_i32$5 | 0, $79_1 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $66_1 = i64toi32_i32$4;
       $66$hi = i64toi32_i32$5;
       $1572 = i64toi32_i32$4;
       $1572$hi = i64toi32_i32$5;
       i64toi32_i32$2 = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       i64toi32_i32$1 = 63;
       i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$5 >> 31 | 0;
        $810_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$4 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
        $810_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
       }
       $67_1 = $810_1;
       $67$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $1572$hi;
       i64toi32_i32$5 = $1572;
       i64toi32_i32$2 = $67$hi;
       i64toi32_i32$1 = $67_1;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $1576$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $67$hi;
       i64toi32_i32$3 = $1576$hi;
       i64toi32_i32$4 = i64toi32_i32$0;
       i64toi32_i32$5 = $67$hi;
       i64toi32_i32$1 = $67_1;
       i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
       $67_1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
       $67$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $67_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$1 = -1;
       i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
       $51_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
       $51$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $32$hi;
       i64toi32_i32$4 = $51$hi;
       i64toi32_i32$3 = $32$hi;
       i64toi32_i32$3 = __wasm_i64_mul($51_1 | 0, i64toi32_i32$4 | 0, $32_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $75_1 = i64toi32_i32$3;
       $75$hi = i64toi32_i32$4;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 32;
       i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $811_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
        $811_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
       }
       $1585 = $811_1;
       $1585$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $67$hi;
       i64toi32_i32$4 = $67_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$1 = 32;
       i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $812_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
        $812_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
       }
       $67_1 = $812_1;
       $67$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $32$hi;
       i64toi32_i32$5 = $67$hi;
       i64toi32_i32$4 = $32$hi;
       i64toi32_i32$4 = __wasm_i64_mul($67_1 | 0, i64toi32_i32$5 | 0, $32_1 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $1590 = i64toi32_i32$4;
       $1590$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1585$hi;
       i64toi32_i32$3 = $1585;
       i64toi32_i32$4 = $1590$hi;
       i64toi32_i32$1 = $1590;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1591 = i64toi32_i32$2;
       $1591$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $67$hi;
       i64toi32_i32$0 = $30$hi;
       i64toi32_i32$0 = $67$hi;
       i64toi32_i32$3 = $30$hi;
       i64toi32_i32$3 = __wasm_i64_mul($67_1 | 0, i64toi32_i32$0 | 0, $30_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $67_1 = i64toi32_i32$3;
       $67$hi = i64toi32_i32$0;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 32;
       i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $813_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
        $813_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
       }
       $1596$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1591$hi;
       i64toi32_i32$0 = $1591;
       i64toi32_i32$5 = $1596$hi;
       i64toi32_i32$1 = $813_1;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1597 = i64toi32_i32$4;
       $1597$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $75$hi;
       i64toi32_i32$3 = $75_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = -1;
       i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       $1599 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
       $1599$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $67$hi;
       i64toi32_i32$2 = $67_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = -1;
       i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
       $1601 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
       $1601$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1599$hi;
       i64toi32_i32$0 = $1599;
       i64toi32_i32$2 = $1601$hi;
       i64toi32_i32$1 = $1601;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $67_1 = i64toi32_i32$5;
       $67$hi = i64toi32_i32$4;
       i64toi32_i32$3 = i64toi32_i32$5;
       i64toi32_i32$0 = 0;
       i64toi32_i32$1 = 32;
       i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $816_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
        $816_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
       }
       $1604$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1597$hi;
       i64toi32_i32$4 = $1597;
       i64toi32_i32$3 = $1604$hi;
       i64toi32_i32$1 = $816_1;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1605 = i64toi32_i32$2;
       $1605$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $67$hi;
       i64toi32_i32$0 = $67_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$1 = 32;
       i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
        $817_1 = 0;
       } else {
        i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
        $817_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
       }
       $67_1 = $817_1;
       $67$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $51$hi;
       i64toi32_i32$4 = $30$hi;
       i64toi32_i32$4 = $51$hi;
       i64toi32_i32$0 = $30$hi;
       i64toi32_i32$0 = __wasm_i64_mul($51_1 | 0, i64toi32_i32$4 | 0, $30_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $1611 = i64toi32_i32$0;
       $1611$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $67$hi;
       i64toi32_i32$5 = $67_1;
       i64toi32_i32$0 = $1611$hi;
       i64toi32_i32$1 = $1611;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $51_1 = i64toi32_i32$3;
       $51$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $67$hi;
       i64toi32_i32$2 = $51$hi;
       i64toi32_i32$4 = i64toi32_i32$3;
       i64toi32_i32$5 = $67$hi;
       i64toi32_i32$1 = $67_1;
       $1615 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $1616$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $1605$hi;
       i64toi32_i32$1 = $1605;
       i64toi32_i32$2 = $1616$hi;
       i64toi32_i32$5 = $1615;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $75_1 = i64toi32_i32$0;
       $75$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $71$hi;
       i64toi32_i32$3 = $72$hi;
       i64toi32_i32$3 = $71$hi;
       i64toi32_i32$4 = $71_1;
       i64toi32_i32$1 = $72$hi;
       i64toi32_i32$5 = $72_1;
       i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
       i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
       i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
       $67_1 = i64toi32_i32$2;
       $67$hi = i64toi32_i32$0;
       label$55 : {
        label$56 : {
         $1621 = $54_1;
         i64toi32_i32$0 = $66$hi;
         i64toi32_i32$3 = $66_1;
         i64toi32_i32$4 = 0;
         i64toi32_i32$5 = 0;
         if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
          $818_1 = 1
         } else {
          if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
           if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0) {
            $821_1 = 0
           } else {
            $821_1 = 1
           }
           $822_1 = $821_1;
          } else {
           $822_1 = 0
          }
          $818_1 = $822_1;
         }
         if (($1621 | 0) != ($818_1 | 0)) {
          break label$56
         }
         i64toi32_i32$3 = $51$hi;
         $76_1 = $51_1;
         $76$hi = i64toi32_i32$3;
         break label$55;
        }
        i64toi32_i32$3 = $51$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = 0;
        i64toi32_i32$0 = $51$hi;
        i64toi32_i32$4 = $51_1;
        i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
        i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
        $76_1 = i64toi32_i32$1;
        $76$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $75$hi;
        i64toi32_i32$3 = $75_1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$4 = -1;
        i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
        $1629$hi = i64toi32_i32$5;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$5 = i64toi32_i32$0;
        i64toi32_i32$5 = 0;
        $1632$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $1629$hi;
        i64toi32_i32$2 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
        i64toi32_i32$3 = $1632$hi;
        i64toi32_i32$4 = !($51_1 | i64toi32_i32$0 | 0);
        i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $75_1 = i64toi32_i32$0;
        $75$hi = i64toi32_i32$1;
       }
       i64toi32_i32$1 = $59$hi;
       i64toi32_i32$1 = $65$hi;
       i64toi32_i32$1 = $59$hi;
       i64toi32_i32$5 = $59_1;
       i64toi32_i32$2 = $65$hi;
       i64toi32_i32$4 = $65_1;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $65_1 = i64toi32_i32$3;
       $65$hi = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       $80_1 = $11_1;
       $80$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $78$hi;
       i64toi32_i32$0 = $77$hi;
       i64toi32_i32$0 = $78$hi;
       i64toi32_i32$1 = $78_1;
       i64toi32_i32$5 = $77$hi;
       i64toi32_i32$4 = $77_1;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $81_1 = i64toi32_i32$2;
       $81$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $57$hi;
       i64toi32_i32$3 = $79$hi;
       i64toi32_i32$3 = $57$hi;
       i64toi32_i32$1 = $79$hi;
       i64toi32_i32$1 = __wasm_i64_mul($57_1 | 0, i64toi32_i32$3 | 0, $79_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $51_1 = i64toi32_i32$1;
       $51$hi = i64toi32_i32$3;
       $1645 = i64toi32_i32$1;
       $1645$hi = i64toi32_i32$3;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$4 = 63;
       i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$3 >> 31 | 0;
        $823_1 = i64toi32_i32$3 >> i64toi32_i32$5 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$3 >> i64toi32_i32$5 | 0;
        $823_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
       }
       $66_1 = $823_1;
       $66$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1645$hi;
       i64toi32_i32$3 = $1645;
       i64toi32_i32$0 = $66$hi;
       i64toi32_i32$4 = $66_1;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1649$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $66$hi;
       i64toi32_i32$2 = $1649$hi;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$3 = $66$hi;
       i64toi32_i32$4 = $66_1;
       i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
       $66_1 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
       $66$hi = i64toi32_i32$3;
       i64toi32_i32$2 = $66_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
       $77_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
       $77$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $55$hi;
       i64toi32_i32$1 = $77$hi;
       i64toi32_i32$2 = $55$hi;
       i64toi32_i32$2 = __wasm_i64_mul($77_1 | 0, i64toi32_i32$1 | 0, $55_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $78_1 = i64toi32_i32$2;
       $78$hi = i64toi32_i32$1;
       i64toi32_i32$3 = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $824_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
        $824_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
       }
       $1658 = $824_1;
       $1658$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $66$hi;
       i64toi32_i32$1 = $66_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $825_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
        $825_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
       }
       $66_1 = $825_1;
       $66$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $55$hi;
       i64toi32_i32$3 = $66$hi;
       i64toi32_i32$1 = $55$hi;
       i64toi32_i32$1 = __wasm_i64_mul($66_1 | 0, i64toi32_i32$3 | 0, $55_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $1663 = i64toi32_i32$1;
       $1663$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1658$hi;
       i64toi32_i32$2 = $1658;
       i64toi32_i32$1 = $1663$hi;
       i64toi32_i32$4 = $1663;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1664 = i64toi32_i32$0;
       $1664$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $66$hi;
       i64toi32_i32$5 = $62$hi;
       i64toi32_i32$5 = $66$hi;
       i64toi32_i32$2 = $62$hi;
       i64toi32_i32$2 = __wasm_i64_mul($66_1 | 0, i64toi32_i32$5 | 0, $62_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $66_1 = i64toi32_i32$2;
       $66$hi = i64toi32_i32$5;
       i64toi32_i32$3 = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $826_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
        $826_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
       }
       $1669$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1664$hi;
       i64toi32_i32$5 = $1664;
       i64toi32_i32$3 = $1669$hi;
       i64toi32_i32$4 = $826_1;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1670 = i64toi32_i32$1;
       $1670$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $78$hi;
       i64toi32_i32$2 = $78_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
       $1672 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
       $1672$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $66$hi;
       i64toi32_i32$0 = $66_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
       $1674 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
       $1674$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1672$hi;
       i64toi32_i32$5 = $1672;
       i64toi32_i32$0 = $1674$hi;
       i64toi32_i32$4 = $1674;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $66_1 = i64toi32_i32$3;
       $66$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $827_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
        $827_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
       }
       $1677$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1670$hi;
       i64toi32_i32$1 = $1670;
       i64toi32_i32$2 = $1677$hi;
       i64toi32_i32$4 = $827_1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $1678 = i64toi32_i32$0;
       $1678$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $66$hi;
       i64toi32_i32$5 = $66_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
        $829_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
        $829_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
       }
       $66_1 = $829_1;
       $66$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $77$hi;
       i64toi32_i32$1 = $62$hi;
       i64toi32_i32$1 = $77$hi;
       i64toi32_i32$5 = $62$hi;
       i64toi32_i32$5 = __wasm_i64_mul($77_1 | 0, i64toi32_i32$1 | 0, $62_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $1684 = i64toi32_i32$5;
       $1684$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $66$hi;
       i64toi32_i32$3 = $66_1;
       i64toi32_i32$5 = $1684$hi;
       i64toi32_i32$4 = $1684;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $79_1 = i64toi32_i32$2;
       $79$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $66$hi;
       i64toi32_i32$0 = $79$hi;
       i64toi32_i32$1 = i64toi32_i32$2;
       i64toi32_i32$3 = $66$hi;
       i64toi32_i32$4 = $66_1;
       $1688 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
       i64toi32_i32$1 = 0;
       $1689$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1678$hi;
       i64toi32_i32$4 = $1678;
       i64toi32_i32$0 = $1689$hi;
       i64toi32_i32$3 = $1688;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $77_1 = i64toi32_i32$5;
       $77$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $76$hi;
       i64toi32_i32$2 = $67$hi;
       i64toi32_i32$2 = $76$hi;
       i64toi32_i32$1 = $76_1;
       i64toi32_i32$4 = $67$hi;
       i64toi32_i32$3 = $67_1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $66_1 = i64toi32_i32$0;
       $66$hi = i64toi32_i32$5;
       label$57 : {
        label$58 : {
         $1694 = $73_1;
         i64toi32_i32$5 = $51$hi;
         i64toi32_i32$2 = $51_1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$3 = 0;
         if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
          $831_1 = 1
         } else {
          if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
           if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
            $833_1 = 0
           } else {
            $833_1 = 1
           }
           $834_1 = $833_1;
          } else {
           $834_1 = 0
          }
          $831_1 = $834_1;
         }
         if (($1694 | 0) != ($831_1 | 0)) {
          break label$58
         }
         i64toi32_i32$2 = $79$hi;
         $78_1 = $79_1;
         $78$hi = i64toi32_i32$2;
         break label$57;
        }
        i64toi32_i32$2 = $79$hi;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = $79$hi;
        i64toi32_i32$1 = $79_1;
        i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
        i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
        i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        $78_1 = i64toi32_i32$4;
        $78$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $77$hi;
        i64toi32_i32$2 = $77_1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$1 = -1;
        i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
        $1702$hi = i64toi32_i32$3;
        i64toi32_i32$3 = i64toi32_i32$5;
        $1704 = !($79_1 | i64toi32_i32$3 | 0);
        i64toi32_i32$3 = 0;
        $1705$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $1702$hi;
        i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
        i64toi32_i32$2 = $1705$hi;
        i64toi32_i32$1 = $1704;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $77_1 = i64toi32_i32$5;
        $77$hi = i64toi32_i32$4;
       }
       i64toi32_i32$4 = $65$hi;
       i64toi32_i32$4 = $59$hi;
       i64toi32_i32$4 = $65$hi;
       i64toi32_i32$3 = $65_1;
       i64toi32_i32$0 = $59$hi;
       i64toi32_i32$1 = $59_1;
       $20_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
       i64toi32_i32$3 = $81$hi;
       i64toi32_i32$3 = $80$hi;
       i64toi32_i32$3 = $81$hi;
       i64toi32_i32$1 = $81_1;
       i64toi32_i32$4 = $80$hi;
       i64toi32_i32$0 = $80_1;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $59_1 = i64toi32_i32$2;
       $59$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $67$hi;
       i64toi32_i32$5 = $71$hi;
       i64toi32_i32$5 = $67$hi;
       i64toi32_i32$3 = $67_1;
       i64toi32_i32$1 = $71$hi;
       i64toi32_i32$0 = $71_1;
       $11_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$3 = $72$hi;
       $82_1 = !($72_1 | i64toi32_i32$3 | 0);
       i64toi32_i32$3 = $66$hi;
       i64toi32_i32$3 = $76$hi;
       i64toi32_i32$3 = $66$hi;
       i64toi32_i32$0 = $66_1;
       i64toi32_i32$5 = $76$hi;
       i64toi32_i32$1 = $76_1;
       $83_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
       i64toi32_i32$0 = $26$hi;
       $67_1 = $26_1;
       $67$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $27$hi;
       $51_1 = $27_1;
       $51$hi = i64toi32_i32$0;
       label$59 : {
        if ($6_1) {
         break label$59
        }
        i64toi32_i32$0 = $26$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = $26$hi;
        i64toi32_i32$5 = $26_1;
        i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $67_1 = i64toi32_i32$4;
        $67$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $27$hi;
        i64toi32_i32$0 = $27_1;
        i64toi32_i32$1 = -1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
        $1727$hi = i64toi32_i32$1;
        i64toi32_i32$1 = i64toi32_i32$3;
        $1729 = !($26_1 | i64toi32_i32$1 | 0);
        i64toi32_i32$1 = 0;
        $1730$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $1727$hi;
        i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
        i64toi32_i32$0 = $1730$hi;
        i64toi32_i32$5 = $1729;
        i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $51_1 = i64toi32_i32$3;
        $51$hi = i64toi32_i32$4;
       }
       i64toi32_i32$4 = 0;
       $71_1 = $20_1;
       $71$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $59$hi;
       i64toi32_i32$4 = $56$hi;
       i64toi32_i32$4 = $59$hi;
       i64toi32_i32$1 = $59_1;
       i64toi32_i32$2 = $56$hi;
       i64toi32_i32$5 = $56_1;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $72_1 = i64toi32_i32$0;
       $72$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $53$hi;
       i64toi32_i32$4 = $53_1;
       i64toi32_i32$1 = -1;
       i64toi32_i32$5 = -1;
       i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
       $76_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
       $76$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $79_1 = $11_1;
       $79$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $80_1 = $82_1;
       $80$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $81_1 = $83_1;
       $81$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $51$hi;
       i64toi32_i32$1 = $39$hi;
       i64toi32_i32$1 = $51$hi;
       i64toi32_i32$4 = $39$hi;
       i64toi32_i32$4 = __wasm_i64_mul($51_1 | 0, i64toi32_i32$1 | 0, $39_1 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $1747 = i64toi32_i32$4;
       $1747$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $67$hi;
       i64toi32_i32$3 = $67_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = 0;
        $835_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
        $835_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
       }
       $51_1 = $835_1;
       $51$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $40$hi;
       i64toi32_i32$4 = $51$hi;
       i64toi32_i32$3 = $40$hi;
       i64toi32_i32$3 = __wasm_i64_mul($51_1 | 0, i64toi32_i32$4 | 0, $40_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $1752 = i64toi32_i32$3;
       $1752$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $1747$hi;
       i64toi32_i32$1 = $1747;
       i64toi32_i32$3 = $1752$hi;
       i64toi32_i32$5 = $1752;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1753 = i64toi32_i32$2;
       $1753$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $67$hi;
       i64toi32_i32$4 = $67_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$5 = -1;
       i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
       $67_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
       $67$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $40$hi;
       i64toi32_i32$1 = $67$hi;
       i64toi32_i32$4 = $40$hi;
       i64toi32_i32$4 = __wasm_i64_mul($67_1 | 0, i64toi32_i32$1 | 0, $40_1 | 0, i64toi32_i32$4 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $53_1 = i64toi32_i32$4;
       $53$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = 0;
        $837_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $837_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
       }
       $1760$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $1753$hi;
       i64toi32_i32$1 = $1753;
       i64toi32_i32$0 = $1760$hi;
       i64toi32_i32$5 = $837_1;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1761 = i64toi32_i32$3;
       $1761$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $51$hi;
       i64toi32_i32$2 = $41$hi;
       i64toi32_i32$2 = $51$hi;
       i64toi32_i32$1 = $41$hi;
       i64toi32_i32$1 = __wasm_i64_mul($51_1 | 0, i64toi32_i32$2 | 0, $41_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $51_1 = i64toi32_i32$1;
       $51$hi = i64toi32_i32$2;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $838_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
        $838_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
       }
       $1766$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1761$hi;
       i64toi32_i32$2 = $1761;
       i64toi32_i32$4 = $1766$hi;
       i64toi32_i32$5 = $838_1;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $1767 = i64toi32_i32$0;
       $1767$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $53$hi;
       i64toi32_i32$1 = $53_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = -1;
       i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
       $1769 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
       $1769$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $51$hi;
       i64toi32_i32$3 = $51_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$5 = -1;
       i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
       $1771 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $1771$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1769$hi;
       i64toi32_i32$2 = $1769;
       i64toi32_i32$3 = $1771$hi;
       i64toi32_i32$5 = $1771;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $51_1 = i64toi32_i32$4;
       $51$hi = i64toi32_i32$0;
       i64toi32_i32$1 = i64toi32_i32$4;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $839_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
        $839_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
       }
       $1774$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1767$hi;
       i64toi32_i32$0 = $1767;
       i64toi32_i32$1 = $1774$hi;
       i64toi32_i32$5 = $839_1;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $1775 = i64toi32_i32$3;
       $1775$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $51$hi;
       i64toi32_i32$2 = $51_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$5 = 32;
       i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
        $840_1 = 0;
       } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
        $840_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       }
       $51_1 = $840_1;
       $51$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $67$hi;
       i64toi32_i32$0 = $41$hi;
       i64toi32_i32$0 = $67$hi;
       i64toi32_i32$2 = $41$hi;
       i64toi32_i32$2 = __wasm_i64_mul($67_1 | 0, i64toi32_i32$0 | 0, $41_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $1781 = i64toi32_i32$2;
       $1781$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $51$hi;
       i64toi32_i32$4 = $51_1;
       i64toi32_i32$2 = $1781$hi;
       i64toi32_i32$5 = $1781;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $67_1 = i64toi32_i32$1;
       $67$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $51$hi;
       i64toi32_i32$3 = $67$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$4 = $51$hi;
       i64toi32_i32$5 = $51_1;
       $1785 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $1786$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1775$hi;
       i64toi32_i32$5 = $1775;
       i64toi32_i32$3 = $1786$hi;
       i64toi32_i32$4 = $1785;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $56_1 = i64toi32_i32$2;
       $56$hi = i64toi32_i32$1;
       label$60 : {
        label$61 : {
         if ((($29_1 | 0) < (0 | 0) | 0) != ($10_1 | 0)) {
          break label$61
         }
         i64toi32_i32$1 = $67$hi;
         $59_1 = $67_1;
         $59$hi = i64toi32_i32$1;
         break label$60;
        }
        i64toi32_i32$1 = $67$hi;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$5 = $67$hi;
        i64toi32_i32$4 = $67_1;
        i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
        $59_1 = i64toi32_i32$3;
        $59$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $56$hi;
        i64toi32_i32$1 = $56_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$4 = -1;
        i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
        $1796$hi = i64toi32_i32$0;
        i64toi32_i32$0 = i64toi32_i32$5;
        $1798 = !($67_1 | i64toi32_i32$0 | 0);
        i64toi32_i32$0 = 0;
        $1799$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $1796$hi;
        i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
        i64toi32_i32$1 = $1799$hi;
        i64toi32_i32$4 = $1798;
        i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
        }
        $56_1 = i64toi32_i32$5;
        $56$hi = i64toi32_i32$3;
       }
       i64toi32_i32$3 = $65$hi;
       i64toi32_i32$3 = $63$hi;
       i64toi32_i32$3 = $65$hi;
       i64toi32_i32$0 = $65_1;
       i64toi32_i32$2 = $63$hi;
       i64toi32_i32$4 = $63_1;
       i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
       $67_1 = i64toi32_i32$1;
       $67$hi = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$5 = i64toi32_i32$2;
       $20_1 = !(i64toi32_i32$4 | i64toi32_i32$2 | 0);
       i64toi32_i32$5 = $60$hi;
       i64toi32_i32$3 = $60_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = -1;
       i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
       $63_1 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
       $63$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $72$hi;
       i64toi32_i32$0 = $71$hi;
       i64toi32_i32$0 = $72$hi;
       i64toi32_i32$5 = $72_1;
       i64toi32_i32$3 = $71$hi;
       i64toi32_i32$4 = $71_1;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $71_1 = i64toi32_i32$2;
       $71$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $66$hi;
       i64toi32_i32$1 = $78$hi;
       i64toi32_i32$1 = $66$hi;
       i64toi32_i32$0 = $66_1;
       i64toi32_i32$5 = $78$hi;
       i64toi32_i32$4 = $78_1;
       i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
       i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
       $51_1 = i64toi32_i32$3;
       $51$hi = i64toi32_i32$2;
       i64toi32_i32$2 = i64toi32_i32$5;
       $11_1 = !(i64toi32_i32$4 | i64toi32_i32$2 | 0);
       i64toi32_i32$2 = $77$hi;
       i64toi32_i32$1 = $77_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = -1;
       i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
       $72_1 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
       $72$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $57$hi;
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
       i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
       $77_1 = i64toi32_i32$0;
       $77$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $57$hi;
       i64toi32_i32$0 = $77$hi;
       i64toi32_i32$0 = __wasm_i64_mul($57_1 | 0, i64toi32_i32$1 | 0, $77_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $53_1 = i64toi32_i32$0;
       $53$hi = i64toi32_i32$1;
       $1823 = i64toi32_i32$0;
       $1823$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 63;
       i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
        $841_1 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
        $841_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
       }
       $60_1 = $841_1;
       $60$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1823$hi;
       i64toi32_i32$1 = $1823;
       i64toi32_i32$2 = $60$hi;
       i64toi32_i32$4 = $60_1;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $1827$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $60$hi;
       i64toi32_i32$3 = $1827$hi;
       i64toi32_i32$0 = i64toi32_i32$5;
       i64toi32_i32$1 = $60$hi;
       i64toi32_i32$4 = $60_1;
       i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
       $60_1 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
       $60$hi = i64toi32_i32$1;
       i64toi32_i32$3 = $60_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
       $78_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $78$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $28$hi;
       i64toi32_i32$0 = $78$hi;
       i64toi32_i32$3 = $28$hi;
       i64toi32_i32$3 = __wasm_i64_mul($78_1 | 0, i64toi32_i32$0 | 0, $28_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $84_1 = i64toi32_i32$3;
       $84$hi = i64toi32_i32$0;
       i64toi32_i32$1 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $843_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
        $843_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
       }
       $1836 = $843_1;
       $1836$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $60$hi;
       i64toi32_i32$0 = $60_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $844_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
        $844_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
       }
       $60_1 = $844_1;
       $60$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $28$hi;
       i64toi32_i32$1 = $60$hi;
       i64toi32_i32$0 = $28$hi;
       i64toi32_i32$0 = __wasm_i64_mul($60_1 | 0, i64toi32_i32$1 | 0, $28_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $1841 = i64toi32_i32$0;
       $1841$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $1836$hi;
       i64toi32_i32$3 = $1836;
       i64toi32_i32$0 = $1841$hi;
       i64toi32_i32$4 = $1841;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1842 = i64toi32_i32$2;
       $1842$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $60$hi;
       i64toi32_i32$5 = $34$hi;
       i64toi32_i32$5 = $60$hi;
       i64toi32_i32$3 = $34$hi;
       i64toi32_i32$3 = __wasm_i64_mul($60_1 | 0, i64toi32_i32$5 | 0, $34_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $28_1 = i64toi32_i32$3;
       $28$hi = i64toi32_i32$5;
       i64toi32_i32$1 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $845_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
        $845_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
       }
       $1847$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1842$hi;
       i64toi32_i32$5 = $1842;
       i64toi32_i32$1 = $1847$hi;
       i64toi32_i32$4 = $845_1;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1848 = i64toi32_i32$0;
       $1848$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $84$hi;
       i64toi32_i32$3 = $84_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $1850 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $1850$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $28$hi;
       i64toi32_i32$2 = $28_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       $1852 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
       $1852$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1850$hi;
       i64toi32_i32$5 = $1850;
       i64toi32_i32$2 = $1852$hi;
       i64toi32_i32$4 = $1852;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $28_1 = i64toi32_i32$1;
       $28$hi = i64toi32_i32$0;
       i64toi32_i32$3 = i64toi32_i32$1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $847_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
        $847_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
       }
       $1855$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1848$hi;
       i64toi32_i32$0 = $1848;
       i64toi32_i32$3 = $1855$hi;
       i64toi32_i32$4 = $847_1;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $1856 = i64toi32_i32$2;
       $1856$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $28$hi;
       i64toi32_i32$5 = $28_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
        $848_1 = 0;
       } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
        $848_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
       }
       $60_1 = $848_1;
       $60$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $78$hi;
       i64toi32_i32$0 = $34$hi;
       i64toi32_i32$0 = $78$hi;
       i64toi32_i32$5 = $34$hi;
       i64toi32_i32$5 = __wasm_i64_mul($78_1 | 0, i64toi32_i32$0 | 0, $34_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $1862 = i64toi32_i32$5;
       $1862$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $60$hi;
       i64toi32_i32$1 = $60_1;
       i64toi32_i32$5 = $1862$hi;
       i64toi32_i32$4 = $1862;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $28_1 = i64toi32_i32$3;
       $28$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $60$hi;
       i64toi32_i32$2 = $28$hi;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$1 = $60$hi;
       i64toi32_i32$4 = $60_1;
       $1866 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $1867$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1856$hi;
       i64toi32_i32$4 = $1856;
       i64toi32_i32$2 = $1867$hi;
       i64toi32_i32$1 = $1866;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $60_1 = i64toi32_i32$5;
       $60$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $70$hi;
       i64toi32_i32$3 = $76$hi;
       i64toi32_i32$3 = $70$hi;
       i64toi32_i32$0 = $70_1;
       i64toi32_i32$4 = $76$hi;
       i64toi32_i32$1 = $76_1;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $1871$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $80$hi;
       i64toi32_i32$5 = $1871$hi;
       i64toi32_i32$3 = i64toi32_i32$2;
       i64toi32_i32$0 = $80$hi;
       i64toi32_i32$1 = $80_1;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1873$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $79$hi;
       i64toi32_i32$2 = $1873$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$3 = $79$hi;
       i64toi32_i32$1 = $79_1;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $1875$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $75$hi;
       i64toi32_i32$4 = $1875$hi;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$5 = $75$hi;
       i64toi32_i32$1 = $75_1;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1877$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $81$hi;
       i64toi32_i32$0 = $1877$hi;
       i64toi32_i32$4 = i64toi32_i32$3;
       i64toi32_i32$2 = $81$hi;
       i64toi32_i32$1 = $81_1;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $34_1 = i64toi32_i32$5;
       $34$hi = i64toi32_i32$3;
       label$62 : {
        label$63 : {
         $1880 = $61_1;
         i64toi32_i32$3 = $53$hi;
         i64toi32_i32$0 = $53_1;
         i64toi32_i32$4 = 0;
         i64toi32_i32$1 = 0;
         if ((i64toi32_i32$3 | 0) < (i64toi32_i32$4 | 0)) {
          $849_1 = 1
         } else {
          if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$4 | 0)) {
           if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
            $850_1 = 0
           } else {
            $850_1 = 1
           }
           $851_1 = $850_1;
          } else {
           $851_1 = 0
          }
          $849_1 = $851_1;
         }
         if (($1880 | 0) != ($849_1 | 0)) {
          break label$63
         }
         i64toi32_i32$0 = $28$hi;
         $53_1 = $28_1;
         $53$hi = i64toi32_i32$0;
         break label$62;
        }
        i64toi32_i32$0 = $28$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = $28$hi;
        i64toi32_i32$4 = $28_1;
        i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
        $53_1 = i64toi32_i32$2;
        $53$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $60$hi;
        i64toi32_i32$0 = $60_1;
        i64toi32_i32$1 = -1;
        i64toi32_i32$4 = -1;
        i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
        $1888$hi = i64toi32_i32$1;
        i64toi32_i32$1 = i64toi32_i32$3;
        $1890 = !($28_1 | i64toi32_i32$1 | 0);
        i64toi32_i32$1 = 0;
        $1891$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $1888$hi;
        i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
        i64toi32_i32$0 = $1891$hi;
        i64toi32_i32$4 = $1890;
        i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $60_1 = i64toi32_i32$3;
        $60$hi = i64toi32_i32$2;
       }
       i64toi32_i32$2 = $67$hi;
       i64toi32_i32$2 = $65$hi;
       i64toi32_i32$2 = $67$hi;
       i64toi32_i32$1 = $67_1;
       i64toi32_i32$5 = $65$hi;
       i64toi32_i32$4 = $65_1;
       $61_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
       i64toi32_i32$1 = 0;
       $70_1 = $20_1;
       $70$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $71$hi;
       i64toi32_i32$1 = $63$hi;
       i64toi32_i32$1 = $71$hi;
       i64toi32_i32$4 = $71_1;
       i64toi32_i32$2 = $63$hi;
       i64toi32_i32$5 = $63_1;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $63_1 = i64toi32_i32$0;
       $63$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $51$hi;
       i64toi32_i32$3 = $66$hi;
       i64toi32_i32$3 = $51$hi;
       i64toi32_i32$1 = $51_1;
       i64toi32_i32$4 = $66$hi;
       i64toi32_i32$5 = $66_1;
       $20_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$1 = 0;
       $66_1 = $11_1;
       $66$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $34$hi;
       i64toi32_i32$1 = $72$hi;
       i64toi32_i32$1 = $34$hi;
       i64toi32_i32$5 = $34_1;
       i64toi32_i32$3 = $72$hi;
       i64toi32_i32$4 = $72_1;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $71_1 = i64toi32_i32$2;
       $71$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $64$hi;
       i64toi32_i32$0 = $77$hi;
       i64toi32_i32$0 = $64$hi;
       i64toi32_i32$5 = $77$hi;
       i64toi32_i32$5 = __wasm_i64_mul($64_1 | 0, i64toi32_i32$0 | 0, $77_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $28_1 = i64toi32_i32$5;
       $28$hi = i64toi32_i32$0;
       $1912 = i64toi32_i32$5;
       $1912$hi = i64toi32_i32$0;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = 63;
       i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
        $852_1 = i64toi32_i32$0 >> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$0 >> i64toi32_i32$3 | 0;
        $852_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
       }
       $34_1 = $852_1;
       $34$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1912$hi;
       i64toi32_i32$0 = $1912;
       i64toi32_i32$1 = $34$hi;
       i64toi32_i32$4 = $34_1;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $1916$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $34$hi;
       i64toi32_i32$2 = $1916$hi;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$0 = $34$hi;
       i64toi32_i32$4 = $34_1;
       i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
       $34_1 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
       $34$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $34_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
       $65_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
       $65$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $58$hi;
       i64toi32_i32$5 = $65$hi;
       i64toi32_i32$2 = $58$hi;
       i64toi32_i32$2 = __wasm_i64_mul($65_1 | 0, i64toi32_i32$5 | 0, $58_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $72_1 = i64toi32_i32$2;
       $72$hi = i64toi32_i32$5;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $853_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
        $853_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
       }
       $1925 = $853_1;
       $1925$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $34$hi;
       i64toi32_i32$5 = $34_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = 0;
        $854_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
        $854_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       $34_1 = $854_1;
       $34$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $58$hi;
       i64toi32_i32$0 = $34$hi;
       i64toi32_i32$5 = $58$hi;
       i64toi32_i32$5 = __wasm_i64_mul($34_1 | 0, i64toi32_i32$0 | 0, $58_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $1930 = i64toi32_i32$5;
       $1930$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1925$hi;
       i64toi32_i32$2 = $1925;
       i64toi32_i32$5 = $1930$hi;
       i64toi32_i32$4 = $1930;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $1931 = i64toi32_i32$1;
       $1931$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $34$hi;
       i64toi32_i32$3 = $52$hi;
       i64toi32_i32$3 = $34$hi;
       i64toi32_i32$2 = $52$hi;
       i64toi32_i32$2 = __wasm_i64_mul($34_1 | 0, i64toi32_i32$3 | 0, $52_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $34_1 = i64toi32_i32$2;
       $34$hi = i64toi32_i32$3;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $855_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
        $855_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
       }
       $1936$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1931$hi;
       i64toi32_i32$3 = $1931;
       i64toi32_i32$0 = $1936$hi;
       i64toi32_i32$4 = $855_1;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $1937 = i64toi32_i32$5;
       $1937$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $72$hi;
       i64toi32_i32$2 = $72_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
       $1939 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
       $1939$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $34$hi;
       i64toi32_i32$1 = $34_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
       $1941 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
       $1941$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $1939$hi;
       i64toi32_i32$3 = $1939;
       i64toi32_i32$1 = $1941$hi;
       i64toi32_i32$4 = $1941;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $34_1 = i64toi32_i32$0;
       $34$hi = i64toi32_i32$5;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $856_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
        $856_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
       }
       $1944$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $1937$hi;
       i64toi32_i32$5 = $1937;
       i64toi32_i32$2 = $1944$hi;
       i64toi32_i32$4 = $856_1;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $1945 = i64toi32_i32$1;
       $1945$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $34$hi;
       i64toi32_i32$3 = $34_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
        $857_1 = 0;
       } else {
        i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
        $857_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
       }
       $58_1 = $857_1;
       $58$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $65$hi;
       i64toi32_i32$5 = $52$hi;
       i64toi32_i32$5 = $65$hi;
       i64toi32_i32$3 = $52$hi;
       i64toi32_i32$3 = __wasm_i64_mul($65_1 | 0, i64toi32_i32$5 | 0, $52_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $1951 = i64toi32_i32$3;
       $1951$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $58$hi;
       i64toi32_i32$0 = $58_1;
       i64toi32_i32$3 = $1951$hi;
       i64toi32_i32$4 = $1951;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $34_1 = i64toi32_i32$2;
       $34$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $58$hi;
       i64toi32_i32$1 = $34$hi;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$0 = $58$hi;
       i64toi32_i32$4 = $58_1;
       $1955 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $1956$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1945$hi;
       i64toi32_i32$4 = $1945;
       i64toi32_i32$1 = $1956$hi;
       i64toi32_i32$0 = $1955;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $58_1 = i64toi32_i32$3;
       $58$hi = i64toi32_i32$2;
       label$64 : {
        label$65 : {
         $1958 = $74_1;
         i64toi32_i32$2 = $28$hi;
         i64toi32_i32$5 = $28_1;
         i64toi32_i32$4 = 0;
         i64toi32_i32$0 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$4 | 0)) {
          $858_1 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$4 | 0)) {
           if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
            $859_1 = 0
           } else {
            $859_1 = 1
           }
           $860_1 = $859_1;
          } else {
           $860_1 = 0
          }
          $858_1 = $860_1;
         }
         if (($1958 | 0) != ($858_1 | 0)) {
          break label$65
         }
         i64toi32_i32$5 = $34$hi;
         $65_1 = $34_1;
         $65$hi = i64toi32_i32$5;
         break label$64;
        }
        i64toi32_i32$5 = $34$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$2 = $34$hi;
        i64toi32_i32$4 = $34_1;
        i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
        i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        $65_1 = i64toi32_i32$1;
        $65$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $58$hi;
        i64toi32_i32$5 = $58_1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$4 = -1;
        i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
        $1966$hi = i64toi32_i32$0;
        i64toi32_i32$0 = i64toi32_i32$2;
        $1968 = !($34_1 | i64toi32_i32$0 | 0);
        i64toi32_i32$0 = 0;
        $1969$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $1966$hi;
        i64toi32_i32$3 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
        i64toi32_i32$5 = $1969$hi;
        i64toi32_i32$4 = $1968;
        i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
        i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $58_1 = i64toi32_i32$2;
        $58$hi = i64toi32_i32$1;
       }
       i64toi32_i32$1 = 0;
       $72_1 = $61_1;
       $72$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $63$hi;
       i64toi32_i32$1 = $70$hi;
       i64toi32_i32$1 = $63$hi;
       i64toi32_i32$0 = $63_1;
       i64toi32_i32$3 = $70$hi;
       i64toi32_i32$4 = $70_1;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $63_1 = i64toi32_i32$5;
       $63$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $69$hi;
       i64toi32_i32$2 = $67$hi;
       i64toi32_i32$2 = $69$hi;
       i64toi32_i32$1 = $69_1;
       i64toi32_i32$0 = $67$hi;
       i64toi32_i32$4 = $67_1;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $34_1 = i64toi32_i32$3;
       $34$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       $67_1 = $20_1;
       $67$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $71$hi;
       i64toi32_i32$5 = $66$hi;
       i64toi32_i32$5 = $71$hi;
       i64toi32_i32$2 = $71_1;
       i64toi32_i32$1 = $66$hi;
       i64toi32_i32$4 = $66_1;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $70_1 = i64toi32_i32$0;
       $70$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $59$hi;
       i64toi32_i32$3 = $51$hi;
       i64toi32_i32$3 = $59$hi;
       i64toi32_i32$5 = $59_1;
       i64toi32_i32$2 = $51$hi;
       i64toi32_i32$4 = $51_1;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $52_1 = i64toi32_i32$1;
       $52$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $64$hi;
       i64toi32_i32$3 = $1_1;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 52 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$0 >> 31 | 0;
       $51_1 = i64toi32_i32$0;
       $51$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $64$hi;
       i64toi32_i32$0 = $51$hi;
       i64toi32_i32$0 = __wasm_i64_mul($64_1 | 0, i64toi32_i32$5 | 0, $51_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $28_1 = i64toi32_i32$0;
       $28$hi = i64toi32_i32$5;
       $1992 = i64toi32_i32$0;
       $1992$hi = i64toi32_i32$5;
       i64toi32_i32$3 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 63;
       i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
        $861_1 = i64toi32_i32$5 >> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$0 = i64toi32_i32$5 >> i64toi32_i32$2 | 0;
        $861_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
       }
       $64_1 = $861_1;
       $64$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $1992$hi;
       i64toi32_i32$5 = $1992;
       i64toi32_i32$3 = $64$hi;
       i64toi32_i32$4 = $64_1;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $1996$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $64$hi;
       i64toi32_i32$1 = $1996$hi;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$5 = $64$hi;
       i64toi32_i32$4 = $64_1;
       i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
       $64_1 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
       $64$hi = i64toi32_i32$5;
       i64toi32_i32$1 = $64_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $66_1 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
       $66$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $32$hi;
       i64toi32_i32$0 = $66$hi;
       i64toi32_i32$1 = $32$hi;
       i64toi32_i32$1 = __wasm_i64_mul($66_1 | 0, i64toi32_i32$0 | 0, $32_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $71_1 = i64toi32_i32$1;
       $71$hi = i64toi32_i32$0;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $862_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
        $862_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
       }
       $2005 = $862_1;
       $2005$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $64$hi;
       i64toi32_i32$0 = $64_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $863_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $863_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
       }
       $64_1 = $863_1;
       $64$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $32$hi;
       i64toi32_i32$5 = $64$hi;
       i64toi32_i32$0 = $32$hi;
       i64toi32_i32$0 = __wasm_i64_mul($64_1 | 0, i64toi32_i32$5 | 0, $32_1 | 0, i64toi32_i32$0 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $2010 = i64toi32_i32$0;
       $2010$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $2005$hi;
       i64toi32_i32$1 = $2005;
       i64toi32_i32$0 = $2010$hi;
       i64toi32_i32$4 = $2010;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $2011 = i64toi32_i32$3;
       $2011$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $64$hi;
       i64toi32_i32$2 = $30$hi;
       i64toi32_i32$2 = $64$hi;
       i64toi32_i32$1 = $30$hi;
       i64toi32_i32$1 = __wasm_i64_mul($64_1 | 0, i64toi32_i32$2 | 0, $30_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $32_1 = i64toi32_i32$1;
       $32$hi = i64toi32_i32$2;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $864_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
        $864_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
       }
       $2016$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $2011$hi;
       i64toi32_i32$2 = $2011;
       i64toi32_i32$5 = $2016$hi;
       i64toi32_i32$4 = $864_1;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $2017 = i64toi32_i32$0;
       $2017$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $71$hi;
       i64toi32_i32$1 = $71_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
       $2019 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
       $2019$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $32$hi;
       i64toi32_i32$3 = $32_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$4 = -1;
       i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
       $2021 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $2021$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $2019$hi;
       i64toi32_i32$2 = $2019;
       i64toi32_i32$3 = $2021$hi;
       i64toi32_i32$4 = $2021;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $32_1 = i64toi32_i32$5;
       $32$hi = i64toi32_i32$0;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$2 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $865_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
        $865_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
       }
       $2024$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $2017$hi;
       i64toi32_i32$0 = $2017;
       i64toi32_i32$1 = $2024$hi;
       i64toi32_i32$4 = $865_1;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $2025 = i64toi32_i32$3;
       $2025$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $32$hi;
       i64toi32_i32$2 = $32_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$4 = 32;
       i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
        $866_1 = 0;
       } else {
        i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
        $866_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
       }
       $64_1 = $866_1;
       $64$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $66$hi;
       i64toi32_i32$0 = $30$hi;
       i64toi32_i32$0 = $66$hi;
       i64toi32_i32$2 = $30$hi;
       i64toi32_i32$2 = __wasm_i64_mul($66_1 | 0, i64toi32_i32$0 | 0, $30_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
       $2031 = i64toi32_i32$2;
       $2031$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $64$hi;
       i64toi32_i32$5 = $64_1;
       i64toi32_i32$2 = $2031$hi;
       i64toi32_i32$4 = $2031;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $32_1 = i64toi32_i32$1;
       $32$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $64$hi;
       i64toi32_i32$3 = $32$hi;
       i64toi32_i32$0 = i64toi32_i32$1;
       i64toi32_i32$5 = $64$hi;
       i64toi32_i32$4 = $64_1;
       $2035 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $2036$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $2025$hi;
       i64toi32_i32$4 = $2025;
       i64toi32_i32$3 = $2036$hi;
       i64toi32_i32$5 = $2035;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $64_1 = i64toi32_i32$2;
       $64$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $53$hi;
       i64toi32_i32$1 = $65$hi;
       i64toi32_i32$1 = $53$hi;
       i64toi32_i32$0 = $53_1;
       i64toi32_i32$4 = $65$hi;
       i64toi32_i32$5 = $65_1;
       i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
       i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
       i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
       $30_1 = i64toi32_i32$3;
       $30$hi = i64toi32_i32$2;
       label$66 : {
        label$67 : {
         $2041 = $54_1;
         i64toi32_i32$2 = $28$hi;
         i64toi32_i32$1 = $28_1;
         i64toi32_i32$0 = 0;
         i64toi32_i32$5 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
          $867_1 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
           if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0) {
            $868_1 = 0
           } else {
            $868_1 = 1
           }
           $869_1 = $868_1;
          } else {
           $869_1 = 0
          }
          $867_1 = $869_1;
         }
         if (($2041 | 0) != ($867_1 | 0)) {
          break label$67
         }
         i64toi32_i32$1 = $32$hi;
         $66_1 = $32_1;
         $66$hi = i64toi32_i32$1;
         break label$66;
        }
        i64toi32_i32$1 = $32$hi;
        i64toi32_i32$1 = 0;
        i64toi32_i32$5 = 0;
        i64toi32_i32$2 = $32$hi;
        i64toi32_i32$0 = $32_1;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
        i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        $66_1 = i64toi32_i32$4;
        $66$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $64$hi;
        i64toi32_i32$1 = $64_1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
        $2049$hi = i64toi32_i32$5;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$5 = i64toi32_i32$2;
        i64toi32_i32$5 = 0;
        $2052$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $2049$hi;
        i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
        i64toi32_i32$1 = $2052$hi;
        i64toi32_i32$0 = !($32_1 | i64toi32_i32$2 | 0);
        i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        $64_1 = i64toi32_i32$2;
        $64$hi = i64toi32_i32$4;
       }
       i64toi32_i32$4 = $63$hi;
       i64toi32_i32$4 = $72$hi;
       i64toi32_i32$4 = $63$hi;
       i64toi32_i32$5 = $63_1;
       i64toi32_i32$3 = $72$hi;
       i64toi32_i32$0 = $72_1;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $63_1 = i64toi32_i32$1;
       $63$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $34$hi;
       i64toi32_i32$2 = $69$hi;
       i64toi32_i32$2 = $34$hi;
       i64toi32_i32$4 = $34_1;
       i64toi32_i32$5 = $69$hi;
       i64toi32_i32$0 = $69_1;
       $20_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = $70$hi;
       i64toi32_i32$4 = $67$hi;
       i64toi32_i32$4 = $70$hi;
       i64toi32_i32$0 = $70_1;
       i64toi32_i32$2 = $67$hi;
       i64toi32_i32$5 = $67_1;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $67_1 = i64toi32_i32$3;
       $67$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $52$hi;
       i64toi32_i32$1 = $59$hi;
       i64toi32_i32$1 = $52$hi;
       i64toi32_i32$4 = $52_1;
       i64toi32_i32$0 = $59$hi;
       i64toi32_i32$5 = $59_1;
       $11_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
       i64toi32_i32$4 = $57$hi;
       i64toi32_i32$4 = $51$hi;
       i64toi32_i32$4 = $57$hi;
       i64toi32_i32$1 = $51$hi;
       i64toi32_i32$1 = __wasm_i64_mul($57_1 | 0, i64toi32_i32$4 | 0, $51_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $32_1 = i64toi32_i32$1;
       $32$hi = i64toi32_i32$4;
       $2069 = i64toi32_i32$1;
       $2069$hi = i64toi32_i32$4;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
        $870_1 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$4 >> i64toi32_i32$2 | 0;
        $870_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
       }
       $28_1 = $870_1;
       $28$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $2069$hi;
       i64toi32_i32$4 = $2069;
       i64toi32_i32$5 = $28$hi;
       i64toi32_i32$0 = $28_1;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $2073$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $28$hi;
       i64toi32_i32$3 = $2073$hi;
       i64toi32_i32$1 = i64toi32_i32$2;
       i64toi32_i32$4 = $28$hi;
       i64toi32_i32$0 = $28_1;
       i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
       $28_1 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
       $28$hi = i64toi32_i32$4;
       i64toi32_i32$3 = $28_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = -1;
       i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
       $57_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
       $57$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $55$hi;
       i64toi32_i32$1 = $57$hi;
       i64toi32_i32$3 = $55$hi;
       i64toi32_i32$3 = __wasm_i64_mul($57_1 | 0, i64toi32_i32$1 | 0, $55_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $51_1 = i64toi32_i32$3;
       $51$hi = i64toi32_i32$1;
       i64toi32_i32$4 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 32;
       i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $871_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
        $871_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
       }
       $2082 = $871_1;
       $2082$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $28$hi;
       i64toi32_i32$1 = $28_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 32;
       i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = 0;
        $872_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
       } else {
        i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
        $872_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
       }
       $28_1 = $872_1;
       $28$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $55$hi;
       i64toi32_i32$4 = $28$hi;
       i64toi32_i32$1 = $55$hi;
       i64toi32_i32$1 = __wasm_i64_mul($28_1 | 0, i64toi32_i32$4 | 0, $55_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $2087 = i64toi32_i32$1;
       $2087$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $2082$hi;
       i64toi32_i32$3 = $2082;
       i64toi32_i32$1 = $2087$hi;
       i64toi32_i32$0 = $2087;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $2088 = i64toi32_i32$5;
       $2088$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $28$hi;
       i64toi32_i32$2 = $62$hi;
       i64toi32_i32$2 = $28$hi;
       i64toi32_i32$3 = $62$hi;
       i64toi32_i32$3 = __wasm_i64_mul($28_1 | 0, i64toi32_i32$2 | 0, $62_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
       $28_1 = i64toi32_i32$3;
       $28$hi = i64toi32_i32$2;
       i64toi32_i32$4 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 32;
       i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $873_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
        $873_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
       }
       $2093$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $2088$hi;
       i64toi32_i32$2 = $2088;
       i64toi32_i32$4 = $2093$hi;
       i64toi32_i32$0 = $873_1;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $2094 = i64toi32_i32$1;
       $2094$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $51$hi;
       i64toi32_i32$3 = $51_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = -1;
       i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
       $2096 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
       $2096$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $28$hi;
       i64toi32_i32$5 = $28_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = -1;
       i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
       $2098 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $2098$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $2096$hi;
       i64toi32_i32$2 = $2096;
       i64toi32_i32$5 = $2098$hi;
       i64toi32_i32$0 = $2098;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $28_1 = i64toi32_i32$4;
       $28$hi = i64toi32_i32$1;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 32;
       i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $874_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
        $874_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
       }
       $2101$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $2094$hi;
       i64toi32_i32$1 = $2094;
       i64toi32_i32$3 = $2101$hi;
       i64toi32_i32$0 = $874_1;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $2102 = i64toi32_i32$5;
       $2102$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $28$hi;
       i64toi32_i32$2 = $28_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 32;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        $875_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
        $875_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       }
       $28_1 = $875_1;
       $28$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $57$hi;
       i64toi32_i32$1 = $62$hi;
       i64toi32_i32$1 = $57$hi;
       i64toi32_i32$2 = $62$hi;
       i64toi32_i32$2 = __wasm_i64_mul($57_1 | 0, i64toi32_i32$1 | 0, $62_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $2108 = i64toi32_i32$2;
       $2108$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $28$hi;
       i64toi32_i32$4 = $28_1;
       i64toi32_i32$2 = $2108$hi;
       i64toi32_i32$0 = $2108;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $62_1 = i64toi32_i32$3;
       $62$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $28$hi;
       i64toi32_i32$5 = $62$hi;
       i64toi32_i32$1 = i64toi32_i32$3;
       i64toi32_i32$4 = $28$hi;
       i64toi32_i32$0 = $28_1;
       $2112 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$1 = 0;
       $2113$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $2102$hi;
       i64toi32_i32$0 = $2102;
       i64toi32_i32$5 = $2113$hi;
       i64toi32_i32$4 = $2112;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $55_1 = i64toi32_i32$2;
       $55$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $66$hi;
       i64toi32_i32$3 = $30$hi;
       i64toi32_i32$3 = $66$hi;
       i64toi32_i32$1 = $66_1;
       i64toi32_i32$0 = $30$hi;
       i64toi32_i32$4 = $30_1;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $28_1 = i64toi32_i32$5;
       $28$hi = i64toi32_i32$2;
       label$68 : {
        label$69 : {
         $2118 = $73_1;
         i64toi32_i32$2 = $32$hi;
         i64toi32_i32$3 = $32_1;
         i64toi32_i32$1 = 0;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
          $876_1 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
           if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$4 >>> 0) {
            $877_1 = 0
           } else {
            $877_1 = 1
           }
           $878_1 = $877_1;
          } else {
           $878_1 = 0
          }
          $876_1 = $878_1;
         }
         if (($2118 | 0) != ($876_1 | 0)) {
          break label$69
         }
         i64toi32_i32$3 = $62$hi;
         $32_1 = $62_1;
         $32$hi = i64toi32_i32$3;
         break label$68;
        }
        i64toi32_i32$3 = $62$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$4 = 0;
        i64toi32_i32$2 = $62$hi;
        i64toi32_i32$1 = $62_1;
        i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
        i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0;
        i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
        $32_1 = i64toi32_i32$0;
        $32$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $55$hi;
        i64toi32_i32$3 = $55_1;
        i64toi32_i32$4 = -1;
        i64toi32_i32$1 = -1;
        i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
        $2126$hi = i64toi32_i32$4;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$4 = i64toi32_i32$2;
        i64toi32_i32$4 = 0;
        $2129$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $2126$hi;
        i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
        i64toi32_i32$3 = $2129$hi;
        i64toi32_i32$1 = !($62_1 | i64toi32_i32$2 | 0);
        i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $55_1 = i64toi32_i32$2;
        $55$hi = i64toi32_i32$0;
       }
       i64toi32_i32$0 = $63$hi;
       i64toi32_i32$0 = $68$hi;
       i64toi32_i32$0 = $63$hi;
       i64toi32_i32$4 = $63_1;
       i64toi32_i32$5 = $68$hi;
       i64toi32_i32$1 = $68_1;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $62_1 = i64toi32_i32$3;
       $62$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       $57_1 = $20_1;
       $57$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $67$hi;
       i64toi32_i32$2 = $56$hi;
       i64toi32_i32$2 = $67$hi;
       i64toi32_i32$0 = $67_1;
       i64toi32_i32$4 = $56$hi;
       i64toi32_i32$1 = $56_1;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $67_1 = i64toi32_i32$5;
       $67$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       $51_1 = $11_1;
       $51$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $30$hi;
       i64toi32_i32$3 = $53$hi;
       i64toi32_i32$3 = $30$hi;
       i64toi32_i32$2 = $30_1;
       i64toi32_i32$0 = $53$hi;
       i64toi32_i32$1 = $53_1;
       $20_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
       i64toi32_i32$2 = $65$hi;
       $11_1 = !($65_1 | i64toi32_i32$2 | 0);
       i64toi32_i32$2 = $28$hi;
       i64toi32_i32$2 = $66$hi;
       i64toi32_i32$2 = $28$hi;
       i64toi32_i32$1 = $28_1;
       i64toi32_i32$3 = $66$hi;
       i64toi32_i32$0 = $66_1;
       $54_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$2;
       i64toi32_i32$1 = $32$hi;
       i64toi32_i32$1 = i64toi32_i32$2;
       i64toi32_i32$0 = $28_1;
       i64toi32_i32$2 = $32$hi;
       i64toi32_i32$3 = $32_1;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
       $65_1 = i64toi32_i32$4;
       $65$hi = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$5 = $65$hi;
       i64toi32_i32$1 = i64toi32_i32$4;
       i64toi32_i32$0 = $28$hi;
       i64toi32_i32$3 = $28_1;
       $61_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$2;
       $73_1 = !($32_1 | i64toi32_i32$1 | 0);
       i64toi32_i32$1 = $26$hi;
       $28_1 = $26_1;
       $28$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $27$hi;
       $30_1 = $27_1;
       $30$hi = i64toi32_i32$1;
       label$70 : {
        if ($6_1) {
         break label$70
        }
        i64toi32_i32$1 = $26$hi;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$5 = $26$hi;
        i64toi32_i32$0 = $26_1;
        i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
        i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
        $28_1 = i64toi32_i32$2;
        $28$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $27$hi;
        i64toi32_i32$1 = $27_1;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
        $2163$hi = i64toi32_i32$3;
        i64toi32_i32$3 = i64toi32_i32$5;
        $2165 = !($26_1 | i64toi32_i32$3 | 0);
        i64toi32_i32$3 = 0;
        $2166$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $2163$hi;
        i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
        i64toi32_i32$1 = $2166$hi;
        i64toi32_i32$0 = $2165;
        i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
        i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $30_1 = i64toi32_i32$5;
        $30$hi = i64toi32_i32$2;
       }
       i64toi32_i32$2 = $62$hi;
       i64toi32_i32$2 = $57$hi;
       i64toi32_i32$2 = $62$hi;
       i64toi32_i32$3 = $62_1;
       i64toi32_i32$4 = $57$hi;
       i64toi32_i32$0 = $57_1;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $62_1 = i64toi32_i32$1;
       $62$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $67$hi;
       i64toi32_i32$5 = $51$hi;
       i64toi32_i32$5 = $67$hi;
       i64toi32_i32$2 = $67_1;
       i64toi32_i32$3 = $51$hi;
       i64toi32_i32$0 = $51_1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $57_1 = i64toi32_i32$4;
       $57$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $58$hi;
       i64toi32_i32$5 = $58_1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
       $58_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
       $58$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       $66_1 = $20_1;
       $66$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       $67_1 = $11_1;
       $67$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       $51_1 = $54_1;
       $51$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $55$hi;
       i64toi32_i32$1 = $55_1;
       i64toi32_i32$5 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
       $55_1 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
       $55$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       $53_1 = $61_1;
       $53$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       $56_1 = $73_1;
       $56$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $30$hi;
       i64toi32_i32$5 = $36$hi;
       i64toi32_i32$5 = $30$hi;
       i64toi32_i32$1 = $36$hi;
       i64toi32_i32$1 = __wasm_i64_mul($30_1 | 0, i64toi32_i32$5 | 0, $36_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $2190 = i64toi32_i32$1;
       $2190$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $28$hi;
       i64toi32_i32$2 = $28_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 32;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $879_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
        $879_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
       }
       $30_1 = $879_1;
       $30$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $37$hi;
       i64toi32_i32$1 = $30$hi;
       i64toi32_i32$2 = $37$hi;
       i64toi32_i32$2 = __wasm_i64_mul($30_1 | 0, i64toi32_i32$1 | 0, $37_1 | 0, i64toi32_i32$2 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $2195 = i64toi32_i32$2;
       $2195$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $2190$hi;
       i64toi32_i32$5 = $2190;
       i64toi32_i32$2 = $2195$hi;
       i64toi32_i32$0 = $2195;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $2196 = i64toi32_i32$3;
       $2196$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $28$hi;
       i64toi32_i32$1 = $28_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$0 = -1;
       i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
       $28_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
       $28$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $37$hi;
       i64toi32_i32$5 = $28$hi;
       i64toi32_i32$1 = $37$hi;
       i64toi32_i32$1 = __wasm_i64_mul($28_1 | 0, i64toi32_i32$5 | 0, $37_1 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
       $32_1 = i64toi32_i32$1;
       $32$hi = i64toi32_i32$5;
       i64toi32_i32$4 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 32;
       i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $880_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
        $880_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
       }
       $2203$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $2196$hi;
       i64toi32_i32$5 = $2196;
       i64toi32_i32$4 = $2203$hi;
       i64toi32_i32$0 = $880_1;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $2204 = i64toi32_i32$2;
       $2204$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $30$hi;
       i64toi32_i32$3 = $38$hi;
       i64toi32_i32$3 = $30$hi;
       i64toi32_i32$5 = $38$hi;
       i64toi32_i32$5 = __wasm_i64_mul($30_1 | 0, i64toi32_i32$3 | 0, $38_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $30_1 = i64toi32_i32$5;
       $30$hi = i64toi32_i32$3;
       i64toi32_i32$1 = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       i64toi32_i32$0 = 32;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$5 = 0;
        $881_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $881_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $2209$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $2204$hi;
       i64toi32_i32$3 = $2204;
       i64toi32_i32$1 = $2209$hi;
       i64toi32_i32$0 = $881_1;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $2210 = i64toi32_i32$4;
       $2210$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $32$hi;
       i64toi32_i32$5 = $32_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = -1;
       i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
       $2212 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
       $2212$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $30$hi;
       i64toi32_i32$2 = $30_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$0 = -1;
       i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $2214 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       $2214$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $2212$hi;
       i64toi32_i32$3 = $2212;
       i64toi32_i32$2 = $2214$hi;
       i64toi32_i32$0 = $2214;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $30_1 = i64toi32_i32$1;
       $30$hi = i64toi32_i32$4;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 32;
       i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = 0;
        $882_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
       } else {
        i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
        $882_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
       }
       $2217$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $2210$hi;
       i64toi32_i32$4 = $2210;
       i64toi32_i32$5 = $2217$hi;
       i64toi32_i32$0 = $882_1;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $2218 = i64toi32_i32$2;
       $2218$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $30$hi;
       i64toi32_i32$3 = $30_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 32;
       i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
        $883_1 = 0;
       } else {
        i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
        $883_1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
       }
       $30_1 = $883_1;
       $30$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $28$hi;
       i64toi32_i32$4 = $38$hi;
       i64toi32_i32$4 = $28$hi;
       i64toi32_i32$3 = $38$hi;
       i64toi32_i32$3 = __wasm_i64_mul($28_1 | 0, i64toi32_i32$4 | 0, $38_1 | 0, i64toi32_i32$3 | 0) | 0;
       i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
       $2224 = i64toi32_i32$3;
       $2224$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $30$hi;
       i64toi32_i32$1 = $30_1;
       i64toi32_i32$3 = $2224$hi;
       i64toi32_i32$0 = $2224;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $32_1 = i64toi32_i32$5;
       $32$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $30$hi;
       i64toi32_i32$2 = $32$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$1 = $30$hi;
       i64toi32_i32$0 = $30_1;
       $2228 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $2229$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $2218$hi;
       i64toi32_i32$0 = $2218;
       i64toi32_i32$2 = $2229$hi;
       i64toi32_i32$1 = $2228;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $28_1 = i64toi32_i32$3;
       $28$hi = i64toi32_i32$5;
       label$71 : {
        label$72 : {
         if ((($33_1 | 0) < (0 | 0) | 0) != ($10_1 | 0)) {
          break label$72
         }
         i64toi32_i32$5 = $32$hi;
         $30_1 = $32_1;
         $30$hi = i64toi32_i32$5;
         break label$71;
        }
        i64toi32_i32$5 = $32$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$4 = 0;
        i64toi32_i32$0 = $32$hi;
        i64toi32_i32$1 = $32_1;
        i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
        i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        $30_1 = i64toi32_i32$2;
        $30$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $28$hi;
        i64toi32_i32$5 = $28_1;
        i64toi32_i32$4 = -1;
        i64toi32_i32$1 = -1;
        i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
        $2239$hi = i64toi32_i32$4;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$4 = 0;
        $2242$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $2239$hi;
        i64toi32_i32$3 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
        i64toi32_i32$5 = $2242$hi;
        i64toi32_i32$1 = !($32_1 | i64toi32_i32$0 | 0);
        i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $28_1 = i64toi32_i32$0;
        $28$hi = i64toi32_i32$2;
       }
       i64toi32_i32$2 = $34$hi;
       i64toi32_i32$3 = $13_1;
       HEAP32[(i64toi32_i32$3 + 24 | 0) >> 2] = $34_1;
       HEAP32[(i64toi32_i32$3 + 28 | 0) >> 2] = i64toi32_i32$2;
       i64toi32_i32$2 = $27$hi;
       i64toi32_i32$3 = i64toi32_i32$3 + 80 | 0;
       HEAP32[i64toi32_i32$3 >> 2] = $27_1;
       HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$2;
       $6_1 = $13_1 + 72 | 0;
       i64toi32_i32$2 = $26$hi;
       i64toi32_i32$3 = $6_1;
       HEAP32[i64toi32_i32$3 >> 2] = $26_1;
       HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$2;
       $10_1 = $13_1 + 56 | 0;
       $2255 = $10_1;
       i64toi32_i32$2 = $30$hi;
       i64toi32_i32$2 = $65$hi;
       i64toi32_i32$2 = $30$hi;
       i64toi32_i32$4 = $30_1;
       i64toi32_i32$3 = $65$hi;
       i64toi32_i32$1 = $65_1;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $26_1 = i64toi32_i32$5;
       $26$hi = i64toi32_i32$0;
       i64toi32_i32$4 = $2255;
       HEAP32[i64toi32_i32$4 >> 2] = i64toi32_i32$5;
       HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = $57$hi;
       i64toi32_i32$4 = $13_1 + 48 | 0;
       HEAP32[i64toi32_i32$4 >> 2] = $57_1;
       HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
       $20_1 = $13_1 + 40 | 0;
       i64toi32_i32$0 = $52$hi;
       i64toi32_i32$4 = $20_1;
       HEAP32[i64toi32_i32$4 >> 2] = $52_1;
       HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = $62$hi;
       i64toi32_i32$4 = $13_1 + 32 | 0;
       HEAP32[i64toi32_i32$4 >> 2] = $62_1;
       HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$0;
       $2271 = $13_1 + 64 | 0;
       i64toi32_i32$0 = $60$hi;
       i64toi32_i32$0 = $58$hi;
       i64toi32_i32$0 = $60$hi;
       i64toi32_i32$2 = $60_1;
       i64toi32_i32$4 = $58$hi;
       i64toi32_i32$1 = $58_1;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $2274$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $67$hi;
       i64toi32_i32$5 = $2274$hi;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$2 = $67$hi;
       i64toi32_i32$1 = $67_1;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $2276$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $66$hi;
       i64toi32_i32$3 = $2276$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$0 = $66$hi;
       i64toi32_i32$1 = $66_1;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $2278$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $64$hi;
       i64toi32_i32$4 = $2278$hi;
       i64toi32_i32$3 = i64toi32_i32$2;
       i64toi32_i32$5 = $64$hi;
       i64toi32_i32$1 = $64_1;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $2280$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $51$hi;
       i64toi32_i32$2 = $2280$hi;
       i64toi32_i32$4 = i64toi32_i32$0;
       i64toi32_i32$3 = $51$hi;
       i64toi32_i32$1 = $51_1;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $2282$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $55$hi;
       i64toi32_i32$0 = $2282$hi;
       i64toi32_i32$2 = i64toi32_i32$5;
       i64toi32_i32$4 = $55$hi;
       i64toi32_i32$1 = $55_1;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $2284$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $56$hi;
       i64toi32_i32$5 = $2284$hi;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$2 = $56$hi;
       i64toi32_i32$1 = $56_1;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $2286$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $53$hi;
       i64toi32_i32$3 = $2286$hi;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$0 = $53$hi;
       i64toi32_i32$1 = $53_1;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $2288$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $28$hi;
       i64toi32_i32$4 = $2288$hi;
       i64toi32_i32$3 = i64toi32_i32$2;
       i64toi32_i32$5 = $28$hi;
       i64toi32_i32$1 = $28_1;
       i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $2290$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $26$hi;
       i64toi32_i32$2 = $30$hi;
       i64toi32_i32$2 = $26$hi;
       i64toi32_i32$4 = $26_1;
       i64toi32_i32$3 = $30$hi;
       i64toi32_i32$1 = $30_1;
       $2293 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $2294$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $2290$hi;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$2 = $2294$hi;
       i64toi32_i32$3 = $2293;
       i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       i64toi32_i32$1 = $2271;
       HEAP32[i64toi32_i32$1 >> 2] = i64toi32_i32$5;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       label$73 : {
        label$74 : {
         $14_1 = Math_fround(Math_fround($172($13_1 + 24 | 0 | 0)) / Math_fround($172($6_1 | 0)));
         if (!(Math_fround(Math_abs($14_1)) < Math_fround(2147483648.0))) {
          break label$74
         }
         $11_1 = ~~$14_1;
         break label$73;
        }
        $11_1 = -2147483648;
       }
       HEAP32[($13_1 + 88 | 0) >> 2] = $11_1;
       label$75 : {
        label$76 : {
         $14_1 = Math_fround(Math_fround($172($20_1 | 0)) / Math_fround($172($6_1 | 0)));
         if (!(Math_fround(Math_abs($14_1)) < Math_fround(2147483648.0))) {
          break label$76
         }
         $20_1 = ~~$14_1;
         break label$75;
        }
        $20_1 = -2147483648;
       }
       HEAP32[($13_1 + 92 | 0) >> 2] = $20_1;
       $14_1 = Math_fround($172($10_1 | 0));
       $15_1 = Math_fround($172($6_1 | 0));
       HEAP32[($5_1 + 12 | 0) >> 2] = $13_1;
       HEAP32[($13_1 + 8 | 0) >> 2] = $3_1;
       label$77 : {
        label$78 : {
         $14_1 = Math_fround($14_1 / $15_1);
         if (!(Math_fround(Math_abs($14_1)) < Math_fround(2147483648.0))) {
          break label$78
         }
         $6_1 = ~~$14_1;
         break label$77;
        }
        $6_1 = -2147483648;
       }
       HEAP32[($13_1 + 96 | 0) >> 2] = $6_1;
       label$79 : {
        $3_1 = HEAP32[$21_1 >> 2] | 0;
        $20_1 = HEAP32[$9_1 >> 2] | 0;
        if (($3_1 | 0) != ($20_1 | 0)) {
         break label$79
        }
        label$80 : {
         $20_1 = $3_1 ? $3_1 << 1 | 0 : 1;
         if (($3_1 | 0) < ($20_1 | 0)) {
          break label$80
         }
         $20_1 = $3_1;
         break label$79;
        }
        label$81 : {
         label$82 : {
          if ($20_1) {
           break label$82
          }
          $11_1 = 0;
          break label$81;
         }
         $11_1 = $79($20_1 << 2 | 0 | 0, 16 | 0) | 0;
         $3_1 = HEAP32[$21_1 >> 2] | 0;
        }
        label$83 : {
         if (($3_1 | 0) < (1 | 0)) {
          break label$83
         }
         $6_1 = 0;
         $10_1 = $3_1;
         label$84 : while (1) {
          HEAP32[($11_1 + $6_1 | 0) >> 2] = HEAP32[((HEAP32[$8_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0;
          $6_1 = $6_1 + 4 | 0;
          $10_1 = $10_1 + -1 | 0;
          if ($10_1) {
           continue label$84
          }
          break label$84;
         };
        }
        label$85 : {
         $6_1 = HEAP32[$8_1 >> 2] | 0;
         if (!$6_1) {
          break label$85
         }
         label$86 : {
          if (!(HEAPU8[$45_1 >> 0] | 0)) {
           break label$86
          }
          $80($6_1 | 0);
          $3_1 = HEAP32[$21_1 >> 2] | 0;
         }
         HEAP32[$8_1 >> 2] = 0;
        }
        HEAP32[$8_1 >> 2] = $11_1;
        HEAP8[$45_1 >> 0] = 1;
        HEAP32[$9_1 >> 2] = $20_1;
       }
       $6_1 = $3_1 + 1 | 0;
       HEAP32[$21_1 >> 2] = $6_1;
       HEAP32[((HEAP32[$8_1 >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = $13_1;
       label$87 : {
        label$88 : {
         if (($6_1 | 0) == ($20_1 | 0)) {
          break label$88
         }
         $3_1 = $20_1;
         $20_1 = $6_1;
         break label$87;
        }
        label$89 : {
         $3_1 = $20_1 ? $20_1 << 1 | 0 : 1;
         if (($20_1 | 0) < ($3_1 | 0)) {
          break label$89
         }
         $3_1 = $20_1;
         break label$87;
        }
        label$90 : {
         label$91 : {
          if ($3_1) {
           break label$91
          }
          $13_1 = 0;
          break label$90;
         }
         $13_1 = $79($3_1 << 2 | 0 | 0, 16 | 0) | 0;
         $20_1 = HEAP32[$21_1 >> 2] | 0;
        }
        label$92 : {
         if (($20_1 | 0) < (1 | 0)) {
          break label$92
         }
         $6_1 = 0;
         $10_1 = $20_1;
         label$93 : while (1) {
          HEAP32[($13_1 + $6_1 | 0) >> 2] = HEAP32[((HEAP32[$8_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0;
          $6_1 = $6_1 + 4 | 0;
          $10_1 = $10_1 + -1 | 0;
          if ($10_1) {
           continue label$93
          }
          break label$93;
         };
        }
        label$94 : {
         $6_1 = HEAP32[$8_1 >> 2] | 0;
         if (!$6_1) {
          break label$94
         }
         label$95 : {
          if (!(HEAPU8[$45_1 >> 0] | 0)) {
           break label$95
          }
          $80($6_1 | 0);
          $20_1 = HEAP32[$21_1 >> 2] | 0;
         }
         HEAP32[$8_1 >> 2] = 0;
        }
        HEAP32[$8_1 >> 2] = $13_1;
        HEAP8[$45_1 >> 0] = 1;
        HEAP32[$9_1 >> 2] = $3_1;
       }
       $11_1 = $20_1 + 1 | 0;
       HEAP32[$21_1 >> 2] = $11_1;
       HEAP32[((HEAP32[$8_1 >> 2] | 0) + ($20_1 << 2 | 0) | 0) >> 2] = $50_1;
       label$96 : {
        if (($11_1 | 0) != ($3_1 | 0)) {
         break label$96
        }
        label$97 : {
         $20_1 = $3_1 ? $3_1 << 1 | 0 : 1;
         if (($3_1 | 0) < ($20_1 | 0)) {
          break label$97
         }
         $11_1 = $3_1;
         break label$96;
        }
        label$98 : {
         label$99 : {
          if ($20_1) {
           break label$99
          }
          $13_1 = 0;
          $11_1 = $3_1;
          break label$98;
         }
         $13_1 = $79($20_1 << 2 | 0 | 0, 16 | 0) | 0;
         $11_1 = HEAP32[$21_1 >> 2] | 0;
        }
        label$100 : {
         if (($11_1 | 0) < (1 | 0)) {
          break label$100
         }
         $6_1 = 0;
         $10_1 = $11_1;
         label$101 : while (1) {
          HEAP32[($13_1 + $6_1 | 0) >> 2] = HEAP32[((HEAP32[$8_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0;
          $6_1 = $6_1 + 4 | 0;
          $10_1 = $10_1 + -1 | 0;
          if ($10_1) {
           continue label$101
          }
          break label$101;
         };
        }
        label$102 : {
         $6_1 = HEAP32[$8_1 >> 2] | 0;
         if (!$6_1) {
          break label$102
         }
         label$103 : {
          if (!(HEAPU8[$45_1 >> 0] | 0)) {
           break label$103
          }
          $80($6_1 | 0);
          $11_1 = HEAP32[$21_1 >> 2] | 0;
         }
         HEAP32[$8_1 >> 2] = 0;
        }
        HEAP32[$8_1 >> 2] = $13_1;
        HEAP8[$45_1 >> 0] = 1;
        HEAP32[$9_1 >> 2] = $20_1;
       }
       HEAP32[$21_1 >> 2] = $11_1 + 1 | 0;
       HEAP32[((HEAP32[$8_1 >> 2] | 0) + ($11_1 << 2 | 0) | 0) >> 2] = 0;
      }
      label$104 : {
       label$105 : {
        label$106 : {
         if (!($7_1 | $49_1 | 0)) {
          break label$106
         }
         $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
         break label$105;
        }
        $11_1 = HEAP32[(HEAP32[($12_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
        $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
        if ((HEAP32[($11_1 + 12 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) {
         break label$104
        }
       }
       $11_1 = $162($0_1 | 0, HEAP32[($12_1 + 12 | 0) >> 2] | 0 | 0, $6_1 | 0) | 0;
       label$107 : {
        label$108 : {
         label$109 : {
          if ($49_1) {
           break label$109
          }
          $6_1 = HEAP32[($12_1 + 8 | 0) >> 2] | 0;
          $10_1 = HEAP32[$6_1 >> 2] | 0;
          HEAP32[$11_1 >> 2] = $10_1;
          HEAP32[($10_1 + 4 | 0) >> 2] = $11_1;
          break label$108;
         }
         if (!$48_1) {
          break label$107
         }
         $6_1 = HEAP32[($12_1 + 8 | 0) >> 2] | 0;
        }
        HEAP32[($11_1 + 4 | 0) >> 2] = $6_1;
        HEAP32[$6_1 >> 2] = $11_1;
       }
       label$110 : {
        label$111 : {
         if (!$7_1) {
          break label$111
         }
         $10_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
         $6_1 = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
         break label$110;
        }
        $10_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
        $13_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
        $6_1 = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
        HEAP32[$13_1 >> 2] = $6_1;
        HEAP32[($6_1 + 4 | 0) >> 2] = $13_1;
       }
       HEAP32[($10_1 + 4 | 0) >> 2] = $6_1;
       HEAP32[$6_1 >> 2] = $10_1;
      }
      label$112 : {
       if (!$48_1) {
        break label$112
       }
       $6_1 = HEAP32[($48_1 + 8 | 0) >> 2] | 0;
       label$113 : {
        if (($49_1 | 0) < (1 | 0)) {
         break label$113
        }
        HEAP32[($6_1 + 4 | 0) >> 2] = $11_1;
        HEAP32[$11_1 >> 2] = $6_1;
        break label$112;
       }
       if (($11_1 | 0) == ($6_1 | 0)) {
        break label$112
       }
       label$114 : {
        $20_1 = HEAP32[$21_1 >> 2] | 0;
        $3_1 = HEAP32[$9_1 >> 2] | 0;
        if (($20_1 | 0) != ($3_1 | 0)) {
         break label$114
        }
        label$115 : {
         $3_1 = $20_1 ? $20_1 << 1 | 0 : 1;
         if (($20_1 | 0) < ($3_1 | 0)) {
          break label$115
         }
         $3_1 = $20_1;
         break label$114;
        }
        label$116 : {
         label$117 : {
          if ($3_1) {
           break label$117
          }
          $13_1 = 0;
          break label$116;
         }
         $13_1 = $79($3_1 << 2 | 0 | 0, 16 | 0) | 0;
         $20_1 = HEAP32[$21_1 >> 2] | 0;
        }
        label$118 : {
         if (($20_1 | 0) < (1 | 0)) {
          break label$118
         }
         $6_1 = 0;
         $10_1 = $20_1;
         label$119 : while (1) {
          HEAP32[($13_1 + $6_1 | 0) >> 2] = HEAP32[((HEAP32[$8_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0;
          $6_1 = $6_1 + 4 | 0;
          $10_1 = $10_1 + -1 | 0;
          if ($10_1) {
           continue label$119
          }
          break label$119;
         };
        }
        label$120 : {
         $6_1 = HEAP32[$8_1 >> 2] | 0;
         if (!$6_1) {
          break label$120
         }
         label$121 : {
          if (!(HEAPU8[$45_1 >> 0] | 0)) {
           break label$121
          }
          $80($6_1 | 0);
          $20_1 = HEAP32[$21_1 >> 2] | 0;
         }
         HEAP32[$8_1 >> 2] = 0;
        }
        HEAP32[$8_1 >> 2] = $13_1;
        HEAP8[$45_1 >> 0] = 1;
        HEAP32[$9_1 >> 2] = $3_1;
       }
       HEAP32[((HEAP32[$8_1 >> 2] | 0) + ($20_1 << 2 | 0) | 0) >> 2] = HEAP32[($48_1 + 12 | 0) >> 2] | 0;
       $10_1 = $20_1 + 1 | 0;
       HEAP32[$21_1 >> 2] = $10_1;
       label$122 : {
        $6_1 = HEAP32[$11_1 >> 2] | 0;
        if (($6_1 | 0) == (HEAP32[($48_1 + 8 | 0) >> 2] | 0 | 0)) {
         break label$122
        }
        label$123 : while (1) {
         $10_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
         $12_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
         $20_1 = 0;
         $3_1 = 0;
         label$124 : {
          $13_1 = HEAP32[$6_1 >> 2] | 0;
          if (($13_1 | 0) == ($6_1 | 0)) {
           break label$124
          }
          HEAP32[($13_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
          HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] = $13_1;
          $3_1 = $13_1;
         }
         HEAP32[((HEAP32[($10_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = $3_1;
         label$125 : {
          $13_1 = HEAP32[$10_1 >> 2] | 0;
          if (($13_1 | 0) == ($10_1 | 0)) {
           break label$125
          }
          HEAP32[($13_1 + 4 | 0) >> 2] = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
          HEAP32[(HEAP32[($10_1 + 4 | 0) >> 2] | 0) >> 2] = $13_1;
          $20_1 = $13_1;
         }
         HEAP32[($12_1 + 8 | 0) >> 2] = $20_1;
         i64toi32_i32$1 = $6_1 + 12 | 0;
         i64toi32_i32$0 = 0;
         HEAP32[i64toi32_i32$1 >> 2] = 0;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         i64toi32_i32$1 = $6_1;
         i64toi32_i32$0 = 0;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
         HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
         HEAP32[i64toi32_i32$1 >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
         HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$1 = $10_1 + 12 | 0;
         i64toi32_i32$0 = 0;
         HEAP32[i64toi32_i32$1 >> 2] = 0;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         i64toi32_i32$1 = $10_1;
         i64toi32_i32$0 = 0;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
         HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
         HEAP32[i64toi32_i32$1 >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
         HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$1;
         HEAP32[($0_1 + 116 | 0) >> 2] = (HEAP32[($0_1 + 116 | 0) >> 2] | 0) + -1 | 0;
         label$126 : {
          $20_1 = HEAP32[$21_1 >> 2] | 0;
          $3_1 = HEAP32[$9_1 >> 2] | 0;
          if (($20_1 | 0) != ($3_1 | 0)) {
           break label$126
          }
          label$127 : {
           $3_1 = $20_1 ? $20_1 << 1 | 0 : 1;
           if (($20_1 | 0) < ($3_1 | 0)) {
            break label$127
           }
           $3_1 = $20_1;
           break label$126;
          }
          label$128 : {
           label$129 : {
            if ($3_1) {
             break label$129
            }
            $13_1 = 0;
            break label$128;
           }
           $13_1 = $79($3_1 << 2 | 0 | 0, 16 | 0) | 0;
           $20_1 = HEAP32[$21_1 >> 2] | 0;
          }
          label$130 : {
           if (($20_1 | 0) < (1 | 0)) {
            break label$130
           }
           $6_1 = 0;
           $10_1 = $20_1;
           label$131 : while (1) {
            HEAP32[($13_1 + $6_1 | 0) >> 2] = HEAP32[((HEAP32[$8_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0;
            $6_1 = $6_1 + 4 | 0;
            $10_1 = $10_1 + -1 | 0;
            if ($10_1) {
             continue label$131
            }
            break label$131;
           };
          }
          label$132 : {
           $6_1 = HEAP32[$8_1 >> 2] | 0;
           if (!$6_1) {
            break label$132
           }
           label$133 : {
            if (!(HEAPU8[$45_1 >> 0] | 0)) {
             break label$133
            }
            $80($6_1 | 0);
            $20_1 = HEAP32[$21_1 >> 2] | 0;
           }
           HEAP32[$8_1 >> 2] = 0;
          }
          HEAP32[$8_1 >> 2] = $13_1;
          HEAP8[$45_1 >> 0] = 1;
          HEAP32[$9_1 >> 2] = $3_1;
         }
         HEAP32[((HEAP32[$8_1 >> 2] | 0) + ($20_1 << 2 | 0) | 0) >> 2] = $12_1;
         $10_1 = $20_1 + 1 | 0;
         HEAP32[$21_1 >> 2] = $10_1;
         $6_1 = HEAP32[$11_1 >> 2] | 0;
         if (($6_1 | 0) != (HEAP32[($48_1 + 8 | 0) >> 2] | 0 | 0)) {
          continue label$123
         }
         break label$123;
        };
       }
       label$134 : {
        if (($10_1 | 0) != ($3_1 | 0)) {
         break label$134
        }
        label$135 : {
         $12_1 = $3_1 ? $3_1 << 1 | 0 : 1;
         if (($3_1 | 0) < ($12_1 | 0)) {
          break label$135
         }
         $10_1 = $3_1;
         break label$134;
        }
        label$136 : {
         label$137 : {
          if ($12_1) {
           break label$137
          }
          $20_1 = 0;
          $10_1 = $3_1;
          break label$136;
         }
         $20_1 = $79($12_1 << 2 | 0 | 0, 16 | 0) | 0;
         $10_1 = HEAP32[$21_1 >> 2] | 0;
        }
        label$138 : {
         if (($10_1 | 0) < (1 | 0)) {
          break label$138
         }
         $6_1 = 0;
         $13_1 = $10_1;
         label$139 : while (1) {
          HEAP32[($20_1 + $6_1 | 0) >> 2] = HEAP32[((HEAP32[$8_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0;
          $6_1 = $6_1 + 4 | 0;
          $13_1 = $13_1 + -1 | 0;
          if ($13_1) {
           continue label$139
          }
          break label$139;
         };
        }
        label$140 : {
         $6_1 = HEAP32[$8_1 >> 2] | 0;
         if (!$6_1) {
          break label$140
         }
         label$141 : {
          if (!(HEAPU8[$45_1 >> 0] | 0)) {
           break label$141
          }
          $80($6_1 | 0);
          $10_1 = HEAP32[$21_1 >> 2] | 0;
         }
         HEAP32[$8_1 >> 2] = 0;
        }
        HEAP32[$8_1 >> 2] = $20_1;
        HEAP8[$45_1 >> 0] = 1;
        HEAP32[$9_1 >> 2] = $12_1;
       }
       HEAP32[$21_1 >> 2] = $10_1 + 1 | 0;
       HEAP32[((HEAP32[$8_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0) >> 2] = 0;
      }
      HEAP32[($11_1 + 16 | 0) >> 2] = $1_1;
      HEAP32[((HEAP32[($11_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      $46_1 = $46_1 ? $46_1 : $11_1;
      continue label$22;
     }
     break label$22;
    };
    label$142 : {
     label$143 : {
      if (($49_1 | 0) < (1 | 0)) {
       break label$143
      }
      $5_1 = HEAP32[($47_1 + 8 | 0) >> 2] | 0;
      HEAP32[($46_1 + 4 | 0) >> 2] = $5_1;
      HEAP32[$5_1 >> 2] = $46_1;
      HEAP32[((HEAP32[($46_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($48_1 + 12 | 0) >> 2] | 0;
      $5_1 = HEAP32[($48_1 + 8 | 0) >> 2] | 0;
      HEAP32[($5_1 + 4 | 0) >> 2] = $46_1;
      HEAP32[$46_1 >> 2] = $5_1;
      break label$142;
     }
     if (($46_1 | 0) == (HEAP32[($48_1 + 8 | 0) >> 2] | 0 | 0)) {
      break label$142
     }
     label$144 : {
      $10_1 = HEAP32[$21_1 >> 2] | 0;
      $20_1 = HEAP32[$9_1 >> 2] | 0;
      if (($10_1 | 0) != ($20_1 | 0)) {
       break label$144
      }
      label$145 : {
       $20_1 = $10_1 ? $10_1 << 1 | 0 : 1;
       if (($10_1 | 0) < ($20_1 | 0)) {
        break label$145
       }
       $20_1 = $10_1;
       break label$144;
      }
      label$146 : {
       label$147 : {
        if ($20_1) {
         break label$147
        }
        $7_1 = 0;
        break label$146;
       }
       $7_1 = $79($20_1 << 2 | 0 | 0, 16 | 0) | 0;
       $10_1 = HEAP32[$21_1 >> 2] | 0;
      }
      label$148 : {
       if (($10_1 | 0) < (1 | 0)) {
        break label$148
       }
       $5_1 = 0;
       $6_1 = $10_1;
       label$149 : while (1) {
        HEAP32[($7_1 + $5_1 | 0) >> 2] = HEAP32[((HEAP32[$8_1 >> 2] | 0) + $5_1 | 0) >> 2] | 0;
        $5_1 = $5_1 + 4 | 0;
        $6_1 = $6_1 + -1 | 0;
        if ($6_1) {
         continue label$149
        }
        break label$149;
       };
      }
      label$150 : {
       $5_1 = HEAP32[$8_1 >> 2] | 0;
       if (!$5_1) {
        break label$150
       }
       label$151 : {
        if (!(HEAPU8[$45_1 >> 0] | 0)) {
         break label$151
        }
        $80($5_1 | 0);
        $10_1 = HEAP32[$21_1 >> 2] | 0;
       }
       HEAP32[$8_1 >> 2] = 0;
      }
      HEAP32[$8_1 >> 2] = $7_1;
      HEAP8[$45_1 >> 0] = 1;
      HEAP32[$9_1 >> 2] = $20_1;
     }
     HEAP32[((HEAP32[$8_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0) >> 2] = HEAP32[($48_1 + 12 | 0) >> 2] | 0;
     $6_1 = $10_1 + 1 | 0;
     HEAP32[$21_1 >> 2] = $6_1;
     label$152 : {
      $5_1 = HEAP32[$46_1 >> 2] | 0;
      if (($5_1 | 0) == (HEAP32[($48_1 + 8 | 0) >> 2] | 0 | 0)) {
       break label$152
      }
      label$153 : while (1) {
       $6_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       $13_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       $10_1 = 0;
       label$154 : {
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        if (($7_1 | 0) == ($5_1 | 0)) {
         break label$154
        }
        HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
        HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] = $7_1;
        $10_1 = $7_1;
       }
       HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = $10_1;
       label$155 : {
        label$156 : {
         $7_1 = HEAP32[$6_1 >> 2] | 0;
         if (($7_1 | 0) != ($6_1 | 0)) {
          break label$156
         }
         $7_1 = 0;
         break label$155;
        }
        HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
        HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] = $7_1;
       }
       HEAP32[($13_1 + 8 | 0) >> 2] = $7_1;
       i64toi32_i32$1 = $5_1 + 12 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $5_1;
       i64toi32_i32$0 = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[i64toi32_i32$1 >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$1 = $6_1 + 12 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $6_1;
       i64toi32_i32$0 = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[i64toi32_i32$1 >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($0_1 + 116 | 0) >> 2] = (HEAP32[($0_1 + 116 | 0) >> 2] | 0) + -1 | 0;
       label$157 : {
        $10_1 = HEAP32[$21_1 >> 2] | 0;
        $20_1 = HEAP32[$9_1 >> 2] | 0;
        if (($10_1 | 0) != ($20_1 | 0)) {
         break label$157
        }
        label$158 : {
         $20_1 = $10_1 ? $10_1 << 1 | 0 : 1;
         if (($10_1 | 0) < ($20_1 | 0)) {
          break label$158
         }
         $20_1 = $10_1;
         break label$157;
        }
        label$159 : {
         label$160 : {
          if ($20_1) {
           break label$160
          }
          $7_1 = 0;
          break label$159;
         }
         $7_1 = $79($20_1 << 2 | 0 | 0, 16 | 0) | 0;
         $10_1 = HEAP32[$21_1 >> 2] | 0;
        }
        label$161 : {
         if (($10_1 | 0) < (1 | 0)) {
          break label$161
         }
         $5_1 = 0;
         $6_1 = $10_1;
         label$162 : while (1) {
          HEAP32[($7_1 + $5_1 | 0) >> 2] = HEAP32[((HEAP32[$8_1 >> 2] | 0) + $5_1 | 0) >> 2] | 0;
          $5_1 = $5_1 + 4 | 0;
          $6_1 = $6_1 + -1 | 0;
          if ($6_1) {
           continue label$162
          }
          break label$162;
         };
        }
        label$163 : {
         $5_1 = HEAP32[$8_1 >> 2] | 0;
         if (!$5_1) {
          break label$163
         }
         label$164 : {
          if (!(HEAPU8[$45_1 >> 0] | 0)) {
           break label$164
          }
          $80($5_1 | 0);
          $10_1 = HEAP32[$21_1 >> 2] | 0;
         }
         HEAP32[$8_1 >> 2] = 0;
        }
        HEAP32[$8_1 >> 2] = $7_1;
        HEAP8[$45_1 >> 0] = 1;
        HEAP32[$9_1 >> 2] = $20_1;
       }
       HEAP32[((HEAP32[$8_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0) >> 2] = $13_1;
       $6_1 = $10_1 + 1 | 0;
       HEAP32[$21_1 >> 2] = $6_1;
       $5_1 = HEAP32[$46_1 >> 2] | 0;
       if (($5_1 | 0) != (HEAP32[($48_1 + 8 | 0) >> 2] | 0 | 0)) {
        continue label$153
       }
       break label$153;
      };
     }
     label$165 : {
      if (($6_1 | 0) != ($20_1 | 0)) {
       break label$165
      }
      label$166 : {
       $13_1 = $20_1 ? $20_1 << 1 | 0 : 1;
       if (($20_1 | 0) < ($13_1 | 0)) {
        break label$166
       }
       $6_1 = $20_1;
       break label$165;
      }
      label$167 : {
       label$168 : {
        if ($13_1) {
         break label$168
        }
        $10_1 = 0;
        $6_1 = $20_1;
        break label$167;
       }
       $10_1 = $79($13_1 << 2 | 0 | 0, 16 | 0) | 0;
       $6_1 = HEAP32[$21_1 >> 2] | 0;
      }
      label$169 : {
       if (($6_1 | 0) < (1 | 0)) {
        break label$169
       }
       $5_1 = 0;
       $7_1 = $6_1;
       label$170 : while (1) {
        HEAP32[($10_1 + $5_1 | 0) >> 2] = HEAP32[((HEAP32[$8_1 >> 2] | 0) + $5_1 | 0) >> 2] | 0;
        $5_1 = $5_1 + 4 | 0;
        $7_1 = $7_1 + -1 | 0;
        if ($7_1) {
         continue label$170
        }
        break label$170;
       };
      }
      label$171 : {
       $5_1 = HEAP32[$8_1 >> 2] | 0;
       if (!$5_1) {
        break label$171
       }
       label$172 : {
        if (!(HEAPU8[$45_1 >> 0] | 0)) {
         break label$172
        }
        $80($5_1 | 0);
        $6_1 = HEAP32[$21_1 >> 2] | 0;
       }
       HEAP32[$8_1 >> 2] = 0;
      }
      HEAP32[$8_1 >> 2] = $10_1;
      HEAP8[$45_1 >> 0] = 1;
      HEAP32[$9_1 >> 2] = $13_1;
     }
     HEAP32[$21_1 >> 2] = $6_1 + 1 | 0;
     HEAP32[((HEAP32[$8_1 >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 124 | 0) >> 2] = HEAP32[(HEAP32[$8_1 >> 2] | 0) >> 2] | 0;
    label$173 : {
     $49_1 = HEAP32[$21_1 >> 2] | 0;
     if (($49_1 | 0) < (1 | 0)) {
      break label$173
     }
     $5_1 = 0;
     label$174 : while (1) {
      label$175 : {
       if (($5_1 | 0) >= ($49_1 | 0)) {
        break label$175
       }
       label$176 : while (1) {
        $10_1 = $5_1 + 2 | 0;
        label$177 : {
         label$178 : {
          $6_1 = HEAP32[$8_1 >> 2] | 0;
          $5_1 = $6_1 + ($5_1 << 2 | 0) | 0;
          $20_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
          if ($20_1) {
           break label$178
          }
          $5_1 = $10_1;
          break label$177;
         }
         $12_1 = HEAP32[$5_1 >> 2] | 0;
         $48_1 = $12_1 + 12 | 0;
         $7_1 = 0;
         $5_1 = $10_1;
         label$179 : while (1) {
          $3_1 = $5_1;
          $5_1 = HEAP32[($12_1 + 16 | 0) >> 2] | 0;
          HEAP32[($5_1 ? $5_1 + 8 | 0 : $48_1) >> 2] = HEAP32[($20_1 + 12 | 0) >> 2] | 0;
          label$180 : {
           $5_1 = HEAP32[($20_1 + 16 | 0) >> 2] | 0;
           if (!$5_1) {
            break label$180
           }
           HEAP32[($12_1 + 16 | 0) >> 2] = $5_1;
          }
          label$181 : {
           $5_1 = HEAP32[($20_1 + 12 | 0) >> 2] | 0;
           if (!$5_1) {
            break label$181
           }
           label$182 : while (1) {
            HEAP32[($5_1 + 4 | 0) >> 2] = $12_1;
            $5_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
            if ($5_1) {
             continue label$182
            }
            break label$182;
           };
          }
          i64toi32_i32$1 = $20_1;
          i64toi32_i32$0 = 0;
          HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
          HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
          label$183 : {
           $13_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
           if (!$13_1) {
            break label$183
           }
           label$184 : {
            if ($7_1 & 1 | 0) {
             break label$184
            }
            label$185 : {
             $10_1 = HEAP32[$21_1 >> 2] | 0;
             if (($10_1 | 0) != (HEAP32[$9_1 >> 2] | 0 | 0)) {
              break label$185
             }
             $13_1 = $10_1 ? $10_1 << 1 | 0 : 1;
             if (($10_1 | 0) >= ($13_1 | 0)) {
              break label$185
             }
             label$186 : {
              label$187 : {
               if ($13_1) {
                break label$187
               }
               $6_1 = 0;
               break label$186;
              }
              $6_1 = $79($13_1 << 2 | 0 | 0, 16 | 0) | 0;
              $10_1 = HEAP32[$21_1 >> 2] | 0;
             }
             label$188 : {
              if (($10_1 | 0) < (1 | 0)) {
               break label$188
              }
              $5_1 = 0;
              $7_1 = $10_1;
              label$189 : while (1) {
               HEAP32[($6_1 + $5_1 | 0) >> 2] = HEAP32[((HEAP32[$8_1 >> 2] | 0) + $5_1 | 0) >> 2] | 0;
               $5_1 = $5_1 + 4 | 0;
               $7_1 = $7_1 + -1 | 0;
               if ($7_1) {
                continue label$189
               }
               break label$189;
              };
             }
             label$190 : {
              $5_1 = HEAP32[$8_1 >> 2] | 0;
              if (!$5_1) {
               break label$190
              }
              label$191 : {
               if (!(HEAPU8[$45_1 >> 0] | 0)) {
                break label$191
               }
               $80($5_1 | 0);
               $10_1 = HEAP32[$21_1 >> 2] | 0;
              }
              HEAP32[$8_1 >> 2] = 0;
             }
             HEAP32[$8_1 >> 2] = $6_1;
             HEAP8[$45_1 >> 0] = 1;
             HEAP32[$9_1 >> 2] = $13_1;
            }
            HEAP32[($6_1 + ($10_1 << 2 | 0) | 0) >> 2] = $12_1;
            HEAP32[$21_1 >> 2] = $10_1 + 1 | 0;
            $13_1 = HEAP32[($20_1 + 8 | 0) >> 2] | 0;
           }
           label$192 : while (1) {
            label$193 : {
             $10_1 = HEAP32[$21_1 >> 2] | 0;
             if (($10_1 | 0) != (HEAP32[$9_1 >> 2] | 0 | 0)) {
              break label$193
             }
             $11_1 = $10_1 ? $10_1 << 1 | 0 : 1;
             if (($10_1 | 0) >= ($11_1 | 0)) {
              break label$193
             }
             label$194 : {
              label$195 : {
               if ($11_1) {
                break label$195
               }
               $7_1 = 0;
               break label$194;
              }
              $7_1 = $79($11_1 << 2 | 0 | 0, 16 | 0) | 0;
              $10_1 = HEAP32[$21_1 >> 2] | 0;
             }
             label$196 : {
              if (($10_1 | 0) < (1 | 0)) {
               break label$196
              }
              $5_1 = 0;
              $6_1 = $10_1;
              label$197 : while (1) {
               HEAP32[($7_1 + $5_1 | 0) >> 2] = HEAP32[((HEAP32[$8_1 >> 2] | 0) + $5_1 | 0) >> 2] | 0;
               $5_1 = $5_1 + 4 | 0;
               $6_1 = $6_1 + -1 | 0;
               if ($6_1) {
                continue label$197
               }
               break label$197;
              };
             }
             label$198 : {
              $5_1 = HEAP32[$8_1 >> 2] | 0;
              if (!$5_1) {
               break label$198
              }
              label$199 : {
               if (!(HEAPU8[$45_1 >> 0] | 0)) {
                break label$199
               }
               $80($5_1 | 0);
               $10_1 = HEAP32[$21_1 >> 2] | 0;
              }
              HEAP32[$8_1 >> 2] = 0;
             }
             HEAP32[$8_1 >> 2] = $7_1;
             HEAP8[$45_1 >> 0] = 1;
             HEAP32[$9_1 >> 2] = $11_1;
            }
            HEAP32[((HEAP32[$8_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0) >> 2] = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
            HEAP32[$21_1 >> 2] = $10_1 + 1 | 0;
            $6_1 = HEAP32[($20_1 + 8 | 0) >> 2] | 0;
            $5_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
            $10_1 = 0;
            $13_1 = 0;
            label$200 : {
             $7_1 = HEAP32[$6_1 >> 2] | 0;
             if (($7_1 | 0) == ($6_1 | 0)) {
              break label$200
             }
             HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
             HEAP32[(HEAP32[($6_1 + 4 | 0) >> 2] | 0) >> 2] = $7_1;
             $13_1 = $7_1;
            }
            HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = $13_1;
            label$201 : {
             $7_1 = HEAP32[$5_1 >> 2] | 0;
             if (($7_1 | 0) == ($5_1 | 0)) {
              break label$201
             }
             HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
             HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] = $7_1;
             $10_1 = $7_1;
            }
            HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = $10_1;
            i64toi32_i32$1 = $6_1;
            i64toi32_i32$0 = 0;
            HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
            HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
            HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
            HEAP32[i64toi32_i32$1 >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
            HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$1 = $5_1 + 12 | 0;
            i64toi32_i32$0 = 0;
            HEAP32[i64toi32_i32$1 >> 2] = 0;
            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
            i64toi32_i32$1 = $5_1;
            i64toi32_i32$0 = 0;
            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
            HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
            HEAP32[i64toi32_i32$1 >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
            HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$1;
            HEAP32[($0_1 + 116 | 0) >> 2] = (HEAP32[($0_1 + 116 | 0) >> 2] | 0) + -1 | 0;
            $13_1 = HEAP32[($20_1 + 8 | 0) >> 2] | 0;
            if ($13_1) {
             continue label$192
            }
            break label$192;
           };
           $6_1 = HEAP32[$8_1 >> 2] | 0;
           $7_1 = 1;
          }
          $5_1 = $3_1 + 1 | 0;
          $20_1 = HEAP32[($6_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
          if ($20_1) {
           continue label$179
          }
          break label$179;
         };
         if (!($7_1 & 1 | 0)) {
          break label$177
         }
         label$202 : {
          $13_1 = HEAP32[$21_1 >> 2] | 0;
          if (($13_1 | 0) != (HEAP32[$9_1 >> 2] | 0 | 0)) {
           break label$202
          }
          $20_1 = $13_1 ? $13_1 << 1 | 0 : 1;
          if (($13_1 | 0) >= ($20_1 | 0)) {
           break label$202
          }
          label$203 : {
           label$204 : {
            if ($20_1) {
             break label$204
            }
            $6_1 = 0;
            break label$203;
           }
           $6_1 = $79($20_1 << 2 | 0 | 0, 16 | 0) | 0;
           $13_1 = HEAP32[$21_1 >> 2] | 0;
          }
          label$205 : {
           if (($13_1 | 0) < (1 | 0)) {
            break label$205
           }
           $7_1 = 0;
           $10_1 = $13_1;
           label$206 : while (1) {
            HEAP32[($6_1 + $7_1 | 0) >> 2] = HEAP32[((HEAP32[$8_1 >> 2] | 0) + $7_1 | 0) >> 2] | 0;
            $7_1 = $7_1 + 4 | 0;
            $10_1 = $10_1 + -1 | 0;
            if ($10_1) {
             continue label$206
            }
            break label$206;
           };
          }
          label$207 : {
           $7_1 = HEAP32[$8_1 >> 2] | 0;
           if (!$7_1) {
            break label$207
           }
           label$208 : {
            if (!(HEAPU8[$45_1 >> 0] | 0)) {
             break label$208
            }
            $80($7_1 | 0);
            $13_1 = HEAP32[$21_1 >> 2] | 0;
           }
           HEAP32[$8_1 >> 2] = 0;
          }
          HEAP32[$8_1 >> 2] = $6_1;
          HEAP8[$45_1 >> 0] = 1;
          HEAP32[$9_1 >> 2] = $20_1;
         }
         HEAP32[$21_1 >> 2] = $13_1 + 1 | 0;
         HEAP32[($6_1 + ($13_1 << 2 | 0) | 0) >> 2] = 0;
        }
        if (($5_1 | 0) < ($49_1 | 0)) {
         continue label$176
        }
        break label$176;
       };
       $49_1 = HEAP32[$21_1 >> 2] | 0;
      }
      if (($5_1 | 0) < ($49_1 | 0)) {
       continue label$174
      }
      break label$174;
     };
    }
    label$209 : {
     if (($49_1 | 0) > (-1 | 0)) {
      break label$209
     }
     label$210 : {
      if ((HEAP32[$9_1 >> 2] | 0 | 0) > (-1 | 0)) {
       break label$210
      }
      label$211 : {
       $5_1 = HEAP32[$8_1 >> 2] | 0;
       if (!$5_1) {
        break label$211
       }
       label$212 : {
        if (!(HEAPU8[$45_1 >> 0] | 0)) {
         break label$212
        }
        $80($5_1 | 0);
       }
       HEAP32[$8_1 >> 2] = 0;
      }
      HEAP32[$8_1 >> 2] = 0;
      HEAP8[$45_1 >> 0] = 1;
      HEAP32[$9_1 >> 2] = 0;
     }
     $5_1 = $49_1 << 2 | 0;
     label$213 : while (1) {
      HEAP32[((HEAP32[$8_1 >> 2] | 0) + $5_1 | 0) >> 2] = 0;
      $5_1 = $5_1 + 4 | 0;
      $6_1 = $49_1 + 1 | 0;
      $0_1 = $6_1 >>> 0 >= $49_1 >>> 0;
      $49_1 = $6_1;
      if ($0_1) {
       continue label$213
      }
      break label$213;
     };
    }
    HEAP32[$21_1 >> 2] = 0;
    HEAP32[($1_1 + 24 | 0) >> 2] = -1;
    HEAP32[($1_1 + 20 | 0) >> 2] = $33_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $29_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $31_1;
   }
   $7_1 = 1;
  }
  global$0 = $4_1 + 128 | 0;
  return $7_1 | 0;
 }
 
 function $175($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $4$hi = 0, $4_1 = 0, $5$hi = 0, $7$hi = 0, $3$hi = 0, $3_1 = 0, $6$hi = 0, $5_1 = 0, $7_1 = 0, $9$hi = 0, $6_1 = 0, $9_1 = 0, i64toi32_i32$6 = 0, $10$hi = 0, $8$hi = 0, $10_1 = 0, $8_1 = 0, $173_1 = 0, $174_1 = 0, $175_1 = 0, $176_1 = 0, $178_1 = 0, $179_1 = 0, $181_1 = 0, $182_1 = 0, $183_1 = 0, $186_1 = 0, $187_1 = 0, $188_1 = 0, $189_1 = 0, $190_1 = 0, $191_1 = 0, $192_1 = 0, $194_1 = 0, $195_1 = 0, $196_1 = 0, $197_1 = 0, $198_1 = 0, $199_1 = 0, $200_1 = 0, $202_1 = 0, $204_1 = 0, $206_1 = 0, $207_1 = 0, $208_1 = 0, $210_1 = 0, $211_1 = 0, $212_1 = 0, $213_1 = 0, $214_1 = 0, $216_1 = 0, $217_1 = 0, $218_1 = 0, $220_1 = 0, $221_1 = 0, $222_1 = 0, $224_1 = 0, $225_1 = 0, $226_1 = 0, $227_1 = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $231_1 = 0, $232_1 = 0, $233_1 = 0, $234_1 = 0, $235_1 = 0, $236_1 = 0, $237_1 = 0, $238_1 = 0, $239_1 = 0, $240_1 = 0, $241_1 = 0, $242_1 = 0, $243_1 = 0, $11_1 = 0, $244_1 = 0, $245_1 = 0, $246_1 = 0, $17_1 = 0, $17$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $23_1 = 0, $23$hi = 0, $25_1 = 0, $25$hi = 0, $26_1 = 0, $26$hi = 0, $27$hi = 0, $29_1 = 0, $29$hi = 0, $32_1 = 0, $32$hi = 0, $33_1 = 0, $33$hi = 0, $40_1 = 0, $50_1 = 0, $75_1 = 0, $76$hi = 0, $78_1 = 0, $78$hi = 0, $80_1 = 0, $80$hi = 0, $81_1 = 0, $81$hi = 0, $85$hi = 0, $89_1 = 0, $89$hi = 0, $92_1 = 0, $92$hi = 0, $96_1 = 0, $96$hi = 0, $97_1 = 0, $97$hi = 0, $104$hi = 0, $105_1 = 0, $105$hi = 0, $112$hi = 0, $113_1 = 0, $113$hi = 0, $115_1 = 0, $115$hi = 0, $117_1 = 0, $117$hi = 0, $120$hi = 0, $121_1 = 0, $121$hi = 0, $127_1 = 0, $127$hi = 0, $131_1 = 0, $132$hi = 0, $135_1 = 0, $143$hi = 0, $146$hi = 0, $163_1 = 0, $164$hi = 0, $166_1 = 0, $166$hi = 0, $168_1 = 0, $168$hi = 0, $169_1 = 0, $169$hi = 0, $173$hi = 0, $177_1 = 0, $177$hi = 0, $180_1 = 0, $180$hi = 0, $184_1 = 0, $184$hi = 0, $185_1 = 0, $185$hi = 0, $192$hi = 0, $193_1 = 0, $193$hi = 0, $200$hi = 0, $201_1 = 0, $201$hi = 0, $203_1 = 0, $203$hi = 0, $205_1 = 0, $205$hi = 0, $208$hi = 0, $209_1 = 0, $209$hi = 0, $215_1 = 0, $215$hi = 0, $219_1 = 0, $220$hi = 0, $223_1 = 0, $231$hi = 0, $234$hi = 0, $261_1 = 0, $262$hi = 0, $264_1 = 0, $264$hi = 0, $269_1 = 0, $269$hi = 0, $270_1 = 0, $270$hi = 0, $274$hi = 0, $278_1 = 0, $278$hi = 0, $281_1 = 0, $281$hi = 0, $285_1 = 0, $285$hi = 0, $286_1 = 0, $286$hi = 0, $293$hi = 0, $294_1 = 0, $294$hi = 0, $301$hi = 0, $302_1 = 0, $302$hi = 0, $304_1 = 0, $304$hi = 0, $306_1 = 0, $306$hi = 0, $309$hi = 0, $310_1 = 0, $310$hi = 0, $316_1 = 0, $316$hi = 0, $320_1 = 0, $321$hi = 0, $324_1 = 0, $332$hi = 0, $335$hi = 0, $339_1 = 0, $339$hi = 0, $345_1 = 0, $346$hi = 0, $360$hi = 0, $362_1 = 0, $363$hi = 0, $382_1 = 0, $387_1 = 0, $396_1 = 0, $398_1 = 0, $399$hi = 0, $401_1 = 0, $401$hi = 0;
  label$1 : {
   if ((HEAP32[($1_1 + 100 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 92 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $20_1 = i64toi32_i32$1;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = __wasm_i64_mul($17_1 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $23_1 = i64toi32_i32$0;
     $23$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $25_1 = i64toi32_i32$1;
     $25$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$1 = $25$hi;
     i64toi32_i32$1 = __wasm_i64_mul($23_1 | 0, i64toi32_i32$0 | 0, $25_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $26_1 = i64toi32_i32$1;
     $26$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$2 = $21_1;
     i64toi32_i32$1 = $26$hi;
     i64toi32_i32$3 = $26_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $27$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     $29_1 = i64toi32_i32$5;
     $29$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $1_1 + 96 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $32_1 = i64toi32_i32$2;
     $32$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $29$hi;
     i64toi32_i32$2 = $32$hi;
     i64toi32_i32$2 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$5 | 0, $32_1 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $33_1 = i64toi32_i32$2;
     $33$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $27$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$2 = $33$hi;
     i64toi32_i32$3 = $33_1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 1;
     if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
      $173_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $174_1 = 0
       } else {
        $174_1 = 1
       }
       $175_1 = $174_1;
      } else {
       $175_1 = 0
      }
      $173_1 = $175_1;
     }
     if ($173_1) {
      break label$3
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $0_1;
     HEAP32[i64toi32_i32$4 >> 2] = $3_1;
     HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$5;
     HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] = 1;
     $40_1 = i64toi32_i32$4;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $176_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $176_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     i64toi32_i32$3 = $40_1;
     HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $176_1;
     HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$4;
     break label$2;
    }
    label$4 : {
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$3 | 0)) {
      $178_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$3 | 0)) {
       if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $179_1 = 0
       } else {
        $179_1 = 1
       }
       $181_1 = $179_1;
      } else {
       $181_1 = 0
      }
      $178_1 = $181_1;
     }
     if ($178_1) {
      break label$4
     }
     HEAP32[($0_1 + 32 | 0) >> 2] = -1;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
     $3_1 = i64toi32_i32$2;
     $3$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = i64toi32_i32$2;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $50_1 = i64toi32_i32$0;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 63;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
      $182_1 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
      $182_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
     }
     i64toi32_i32$5 = $50_1;
     HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $182_1;
     HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
     break label$2;
    }
    i64toi32_i32$5 = $0_1;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$5 >> 2] = 0;
    HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] = 0;
    i64toi32_i32$5 = i64toi32_i32$5 + 8 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$5 >> 2] = 0;
    HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
   }
   i64toi32_i32$5 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] = 1;
   HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$5 = i64toi32_i32$5 + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$5 >> 2] = 0;
   HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($0_1 + 36 | 0) >> 0] = 1;
   return;
  }
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$5;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$0;
  label$5 : {
   label$6 : {
    i64toi32_i32$1 = $1_1 + 32 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
     $183_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0) {
       $186_1 = 0
      } else {
       $186_1 = 1
      }
      $187_1 = $186_1;
     } else {
      $187_1 = 0
     }
     $183_1 = $187_1;
    }
    if ($183_1) {
     break label$6
    }
    i64toi32_i32$1 = $4$hi;
    $6_1 = $4_1;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $5$hi;
    $7_1 = $5_1;
    $7$hi = i64toi32_i32$1;
    break label$5;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
   $6_1 = i64toi32_i32$4;
   $6$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = i64toi32_i32$5;
   $75_1 = !(i64toi32_i32$0 | i64toi32_i32$5 | 0);
   i64toi32_i32$2 = 0;
   $76$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $78_1 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   $78$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $76$hi;
   i64toi32_i32$2 = $75_1;
   i64toi32_i32$1 = $78$hi;
   i64toi32_i32$0 = $78_1;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $7_1 = i64toi32_i32$5;
   $7$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $7$hi;
  $80_1 = $7_1;
  $80$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  $81_1 = $3_1;
  $81$hi = i64toi32_i32$4;
  i64toi32_i32$3 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = 63;
  i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
   $188_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
   $188_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $188_1;
  $4$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $81$hi;
  i64toi32_i32$4 = $81_1;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $85$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$5 = $85$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
  $4_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  $4$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $80$hi;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = __wasm_i64_mul($80_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $89_1 = i64toi32_i32$2;
  $89$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = 32;
  i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $189_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   $189_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
  }
  $7_1 = $189_1;
  $7$hi = i64toi32_i32$2;
  $92_1 = $7_1;
  $92$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$4 = $4_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = 32;
  i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $190_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   $190_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
  }
  $8_1 = $190_1;
  $8$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $92$hi;
  i64toi32_i32$4 = $8$hi;
  i64toi32_i32$4 = __wasm_i64_mul($92_1 | 0, i64toi32_i32$5 | 0, $8_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $96_1 = i64toi32_i32$4;
  $96$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $89$hi;
  i64toi32_i32$2 = $89_1;
  i64toi32_i32$4 = $96$hi;
  i64toi32_i32$0 = $96_1;
  i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $97_1 = i64toi32_i32$3;
  $97$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$5 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $6_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $6$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $8$hi;
  i64toi32_i32$2 = $6$hi;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$5 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$2 | 0, $8_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $8_1 = i64toi32_i32$5;
  $8$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = 32;
  i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $191_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $191_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $104$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $97$hi;
  i64toi32_i32$2 = $97_1;
  i64toi32_i32$1 = $104$hi;
  i64toi32_i32$0 = $191_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  $105_1 = i64toi32_i32$4;
  $105$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
  $4_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $4$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$5 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $7_1 = i64toi32_i32$5;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = 32;
  i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $192_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $192_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
  }
  $112$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $105$hi;
  i64toi32_i32$2 = $105_1;
  i64toi32_i32$3 = $112$hi;
  i64toi32_i32$0 = $192_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $113_1 = i64toi32_i32$1;
  $113$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $8$hi;
  i64toi32_i32$5 = $8_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $115_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $115$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$4 = $7_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $117_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
  $117$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $115$hi;
  i64toi32_i32$2 = $115_1;
  i64toi32_i32$4 = $117$hi;
  i64toi32_i32$0 = $117_1;
  i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $7_1 = i64toi32_i32$3;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$5 = i64toi32_i32$3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = 32;
  i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $194_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $194_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
  }
  $120$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $113$hi;
  i64toi32_i32$1 = $113_1;
  i64toi32_i32$5 = $120$hi;
  i64toi32_i32$0 = $194_1;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  $121_1 = i64toi32_i32$4;
  $121$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 32;
  i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
   $195_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
   $195_1 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
  }
  $7_1 = $195_1;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $127_1 = i64toi32_i32$2;
  $127$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$2 = $127$hi;
  i64toi32_i32$0 = $127_1;
  i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
  i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $6_1 = i64toi32_i32$5;
  $6$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$1 = i64toi32_i32$5;
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$0 = $7_1;
  $131_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
  i64toi32_i32$1 = 0;
  $132$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $121$hi;
  i64toi32_i32$0 = $121_1;
  i64toi32_i32$4 = $132$hi;
  i64toi32_i32$3 = $131_1;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $4_1 = i64toi32_i32$2;
  $4$hi = i64toi32_i32$5;
  label$7 : {
   label$8 : {
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
     $196_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $197_1 = 0
      } else {
       $197_1 = 1
      }
      $198_1 = $197_1;
     } else {
      $198_1 = 0
     }
     $196_1 = $198_1;
    }
    $135_1 = $196_1;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$5 | 0)) {
     $199_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
       $200_1 = 0
      } else {
       $200_1 = 1
      }
      $202_1 = $200_1;
     } else {
      $202_1 = 0
     }
     $199_1 = $202_1;
    }
    if (($135_1 | 0) != ($199_1 | 0)) {
     break label$8
    }
    i64toi32_i32$3 = $6$hi;
    $8_1 = $6_1;
    $8$hi = i64toi32_i32$3;
    break label$7;
   }
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$5 = $6_1;
   i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
   $8_1 = i64toi32_i32$4;
   $8$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$5 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $143$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = 0;
   $146$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $143$hi;
   i64toi32_i32$2 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
   i64toi32_i32$3 = $146$hi;
   i64toi32_i32$5 = !($6_1 | i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4_1 = i64toi32_i32$1;
   $4$hi = i64toi32_i32$4;
  }
  i64toi32_i32$0 = $1_1 + 40 | 0;
  i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$2;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
  i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
  $3_1 = i64toi32_i32$2;
  $3$hi = i64toi32_i32$4;
  label$9 : {
   label$10 : {
    i64toi32_i32$0 = $1_1 + 48 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $6_1 = i64toi32_i32$4;
    $6$hi = i64toi32_i32$2;
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = -1;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$4 | 0)) {
     $204_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0) {
       $206_1 = 0
      } else {
       $206_1 = 1
      }
      $207_1 = $206_1;
     } else {
      $207_1 = 0
     }
     $204_1 = $207_1;
    }
    if ($204_1) {
     break label$10
    }
    i64toi32_i32$0 = $5$hi;
    $7_1 = $5_1;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    $9_1 = $6_1;
    $9$hi = i64toi32_i32$0;
    break label$9;
   }
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
   $7_1 = i64toi32_i32$3;
   $7$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$1 = i64toi32_i32$2;
   $163_1 = !(i64toi32_i32$4 | i64toi32_i32$2 | 0);
   i64toi32_i32$1 = 0;
   $164$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$0 = $6_1;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = -1;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $166_1 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
   $166$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $164$hi;
   i64toi32_i32$1 = $163_1;
   i64toi32_i32$0 = $166$hi;
   i64toi32_i32$4 = $166_1;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $9_1 = i64toi32_i32$2;
   $9$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $9$hi;
  $168_1 = $9_1;
  $168$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $3$hi;
  $169_1 = $3_1;
  $169$hi = i64toi32_i32$3;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$4 = 63;
  i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$3 >> 31 | 0;
   $208_1 = i64toi32_i32$3 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$3 >> i64toi32_i32$0 | 0;
   $208_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  $5_1 = $208_1;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $169$hi;
  i64toi32_i32$3 = $169_1;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $173$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$2 = $173$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $5_1 = i64toi32_i32$0 ^ i64toi32_i32$4 | 0;
  $5$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $168$hi;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = __wasm_i64_mul($168_1 | 0, i64toi32_i32$3 | 0, $5_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
  $177_1 = i64toi32_i32$1;
  $177$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$4 = 32;
  i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $210_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
   $210_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $9_1 = $210_1;
  $9$hi = i64toi32_i32$1;
  $180_1 = $9_1;
  $180$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = 32;
  i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $211_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
   $211_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
  }
  $10_1 = $211_1;
  $10$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $180$hi;
  i64toi32_i32$3 = $10$hi;
  i64toi32_i32$3 = __wasm_i64_mul($180_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $184_1 = i64toi32_i32$3;
  $184$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $177$hi;
  i64toi32_i32$1 = $177_1;
  i64toi32_i32$3 = $184$hi;
  i64toi32_i32$4 = $184_1;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $185_1 = i64toi32_i32$5;
  $185$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$4 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $7_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$2 = $10$hi;
  i64toi32_i32$2 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $10_1 = i64toi32_i32$2;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = 32;
  i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $212_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
   $212_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
  }
  $192$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $185$hi;
  i64toi32_i32$1 = $185_1;
  i64toi32_i32$0 = $192$hi;
  i64toi32_i32$4 = $212_1;
  i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $193_1 = i64toi32_i32$3;
  $193$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $9$hi;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$4 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$2 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$2;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$5 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = 32;
  i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $213_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $213_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  $200$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $193$hi;
  i64toi32_i32$1 = $193_1;
  i64toi32_i32$5 = $200$hi;
  i64toi32_i32$4 = $213_1;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  $201_1 = i64toi32_i32$0;
  $201$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $10$hi;
  i64toi32_i32$2 = $10_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$4 = -1;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $203_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
  $203$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$3 = $9_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $205_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
  $205$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $203$hi;
  i64toi32_i32$1 = $203_1;
  i64toi32_i32$3 = $205$hi;
  i64toi32_i32$4 = $205_1;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $9_1 = i64toi32_i32$5;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$1 = 0;
  i64toi32_i32$4 = 32;
  i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $214_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   $214_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
  }
  $208$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $201$hi;
  i64toi32_i32$0 = $201_1;
  i64toi32_i32$2 = $208$hi;
  i64toi32_i32$4 = $214_1;
  i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $209_1 = i64toi32_i32$3;
  $209$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $9$hi;
  i64toi32_i32$1 = $9_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$4 = 32;
  i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   $216_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $216_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
  }
  $9_1 = $216_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$1 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$0 | 0, $5_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $215_1 = i64toi32_i32$1;
  $215$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$5 = $9_1;
  i64toi32_i32$1 = $215$hi;
  i64toi32_i32$4 = $215_1;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
  i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  $7_1 = i64toi32_i32$2;
  $7$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $9$hi;
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$5 = $9$hi;
  i64toi32_i32$4 = $9_1;
  $219_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
  i64toi32_i32$0 = 0;
  $220$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $209$hi;
  i64toi32_i32$4 = $209_1;
  i64toi32_i32$3 = $220$hi;
  i64toi32_i32$5 = $219_1;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $5_1 = i64toi32_i32$1;
  $5$hi = i64toi32_i32$2;
  label$11 : {
   label$12 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$4 | 0)) {
     $217_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
       $218_1 = 0
      } else {
       $218_1 = 1
      }
      $220_1 = $218_1;
     } else {
      $220_1 = 0
     }
     $217_1 = $220_1;
    }
    $223_1 = $217_1;
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$2 | 0)) {
     $221_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$4 >>> 0) {
       $222_1 = 0
      } else {
       $222_1 = 1
      }
      $224_1 = $222_1;
     } else {
      $224_1 = 0
     }
     $221_1 = $224_1;
    }
    if (($223_1 | 0) != ($221_1 | 0)) {
     break label$12
    }
    i64toi32_i32$5 = $7$hi;
    $3_1 = $7_1;
    $3$hi = i64toi32_i32$5;
    break label$11;
   }
   i64toi32_i32$5 = $7$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$4 = -1;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
   $231$hi = i64toi32_i32$4;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$4 = 0;
   $234$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $231$hi;
   i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$5 = $234$hi;
   i64toi32_i32$2 = !($7_1 | i64toi32_i32$0 | 0);
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $7_1 = i64toi32_i32$5;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $3_1;
  i64toi32_i32$4 = $8$hi;
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $8_1 = i64toi32_i32$1;
  $8$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$5 = $8$hi;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$3 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = 0;
  $9_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$5;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$0;
  label$13 : {
   label$14 : {
    i64toi32_i32$2 = $1_1 + 64 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $5_1 = i64toi32_i32$0;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
     $225_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
       $226_1 = 0
      } else {
       $226_1 = 1
      }
      $227_1 = $226_1;
     } else {
      $227_1 = 0
     }
     $225_1 = $227_1;
    }
    if ($225_1) {
     break label$14
    }
    i64toi32_i32$2 = $4$hi;
    $6_1 = $4_1;
    $6$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $5$hi;
    $10_1 = $5_1;
    $10$hi = i64toi32_i32$2;
    break label$13;
   }
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$4;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = i64toi32_i32$5;
   $261_1 = !(i64toi32_i32$0 | i64toi32_i32$5 | 0);
   i64toi32_i32$1 = 0;
   $262$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
   $264_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $264$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $262$hi;
   i64toi32_i32$1 = $261_1;
   i64toi32_i32$2 = $264$hi;
   i64toi32_i32$0 = $264_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $10_1 = i64toi32_i32$5;
   $10$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$4 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $7_1 = i64toi32_i32$2;
  $7$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $10$hi;
  $269_1 = $10_1;
  $269$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  $270_1 = $3_1;
  $270$hi = i64toi32_i32$5;
  i64toi32_i32$4 = $3_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = 63;
  i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$5 >> 31 | 0;
   $228_1 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$3 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
   $228_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $228_1;
  $4$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $270$hi;
  i64toi32_i32$5 = $270_1;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $274$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = $274$hi;
  i64toi32_i32$3 = i64toi32_i32$1;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
  $4_1 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
  $4$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $269$hi;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$3 = __wasm_i64_mul($269_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
  $278_1 = i64toi32_i32$3;
  $278$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = 32;
  i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$3 = 0;
   $229_1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
   $229_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $9_1 = $229_1;
  $9$hi = i64toi32_i32$3;
  $281_1 = $9_1;
  $281$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = 32;
  i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $230_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
   $230_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
  }
  $10_1 = $230_1;
  $10$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $281$hi;
  i64toi32_i32$5 = $10$hi;
  i64toi32_i32$5 = __wasm_i64_mul($281_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $285_1 = i64toi32_i32$5;
  $285$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $278$hi;
  i64toi32_i32$3 = $278_1;
  i64toi32_i32$5 = $285$hi;
  i64toi32_i32$0 = $285_1;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $286_1 = i64toi32_i32$4;
  $286$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $6_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $6$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $10$hi;
  i64toi32_i32$3 = $6$hi;
  i64toi32_i32$2 = $10$hi;
  i64toi32_i32$2 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
  $10_1 = i64toi32_i32$2;
  $10$hi = i64toi32_i32$3;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = 32;
  i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $231_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
   $231_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
  }
  $293$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $286$hi;
  i64toi32_i32$3 = $286_1;
  i64toi32_i32$1 = $293$hi;
  i64toi32_i32$0 = $231_1;
  i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $294_1 = i64toi32_i32$5;
  $294$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $4_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $4$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $9$hi;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = __wasm_i64_mul($9_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$2;
  $9$hi = i64toi32_i32$3;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = 32;
  i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $232_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   $232_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
  }
  $301$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $294$hi;
  i64toi32_i32$3 = $294_1;
  i64toi32_i32$4 = $301$hi;
  i64toi32_i32$0 = $232_1;
  i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $302_1 = i64toi32_i32$1;
  $302$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $10$hi;
  i64toi32_i32$2 = $10_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
  $304_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $304$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $9$hi;
  i64toi32_i32$5 = $9_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
  $306_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $306$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $304$hi;
  i64toi32_i32$3 = $304_1;
  i64toi32_i32$5 = $306$hi;
  i64toi32_i32$0 = $306_1;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = 32;
  i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$3 = 0;
   $233_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
   $233_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $309$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $302$hi;
  i64toi32_i32$1 = $302_1;
  i64toi32_i32$2 = $309$hi;
  i64toi32_i32$0 = $233_1;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $310_1 = i64toi32_i32$5;
  $310$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$3 = $9_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = 32;
  i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
   $234_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
   $234_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
  }
  $9_1 = $234_1;
  $9$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $6$hi;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$3 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $316_1 = i64toi32_i32$3;
  $316$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$4 = $9_1;
  i64toi32_i32$3 = $316$hi;
  i64toi32_i32$0 = $316_1;
  i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $6_1 = i64toi32_i32$2;
  $6$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $9$hi;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$0 = $9_1;
  $320_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
  i64toi32_i32$1 = 0;
  $321$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $310$hi;
  i64toi32_i32$0 = $310_1;
  i64toi32_i32$5 = $321$hi;
  i64toi32_i32$4 = $320_1;
  i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $4_1 = i64toi32_i32$3;
  $4$hi = i64toi32_i32$2;
  label$15 : {
   label$16 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
     $235_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$4 >>> 0) {
       $236_1 = 0
      } else {
       $236_1 = 1
      }
      $237_1 = $236_1;
     } else {
      $237_1 = 0
     }
     $235_1 = $237_1;
    }
    $324_1 = $235_1;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $238_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$0 >>> 0) {
       $239_1 = 0
      } else {
       $239_1 = 1
      }
      $240_1 = $239_1;
     } else {
      $240_1 = 0
     }
     $238_1 = $240_1;
    }
    if (($324_1 | 0) != ($238_1 | 0)) {
     break label$16
    }
    i64toi32_i32$4 = $6$hi;
    $5_1 = $6_1;
    $5$hi = i64toi32_i32$4;
    break label$15;
   }
   i64toi32_i32$4 = $6$hi;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $332$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = 0;
   $335$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $332$hi;
   i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = $335$hi;
   i64toi32_i32$2 = !($6_1 | i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$1;
   $4$hi = i64toi32_i32$5;
  }
  label$17 : {
   label$18 : {
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $339_1 = i64toi32_i32$4;
    $339$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$2 = $5_1;
    $345_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $346$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $339$hi;
    i64toi32_i32$2 = $339_1;
    i64toi32_i32$4 = $346$hi;
    i64toi32_i32$5 = $345_1;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
     $241_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$5 >>> 0) {
       $242_1 = 0
      } else {
       $242_1 = 1
      }
      $243_1 = $242_1;
     } else {
      $243_1 = 0
     }
     $241_1 = $243_1;
    }
    if ($241_1) {
     break label$18
    }
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 0;
    $2_1 = (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0;
    HEAP32[($0_1 + 32 | 0) >> 2] = $2_1;
    $11_1 = $2_1 ? -1 : 0;
    break label$17;
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = -1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
   $360$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   $362_1 = !($3_1 | i64toi32_i32$3 | 0);
   i64toi32_i32$3 = 0;
   $363$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $360$hi;
   i64toi32_i32$1 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
   i64toi32_i32$2 = $363$hi;
   i64toi32_i32$5 = $362_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$0;
   $11_1 = 1;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
   i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
   $3_1 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$4;
  }
  $2_1 = $1_1 + 72 | 0;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  HEAP32[i64toi32_i32$3 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  label$19 : {
   label$20 : {
    i64toi32_i32$0 = $1_1 + 80 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$3;
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$4 | 0)) {
     $244_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$5 >>> 0) {
       $245_1 = 0
      } else {
       $245_1 = 1
      }
      $246_1 = $245_1;
     } else {
      $246_1 = 0
     }
     $244_1 = $246_1;
    }
    if ($244_1) {
     break label$20
    }
    $1_1 = $0_1 + 16 | 0;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $382_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1;
    HEAP32[i64toi32_i32$0 >> 2] = $382_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$5 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $387_1 = i64toi32_i32$3;
    i64toi32_i32$3 = $1_1 + 8 | 0;
    HEAP32[i64toi32_i32$3 >> 2] = $387_1;
    HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$19;
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = $11_1;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
   i64toi32_i32$5 = $0_1;
   HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] = i64toi32_i32$2;
   $396_1 = i64toi32_i32$5 + 24 | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   $398_1 = !(i64toi32_i32$4 | i64toi32_i32$0 | 0);
   i64toi32_i32$2 = 0;
   $399$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = -1;
   i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
   $401_1 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $401$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $399$hi;
   i64toi32_i32$2 = $398_1;
   i64toi32_i32$3 = $401$hi;
   i64toi32_i32$4 = $401_1;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   i64toi32_i32$2 = $396_1;
   HEAP32[i64toi32_i32$2 >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  HEAP8[($0_1 + 36 | 0) >> 0] = 0;
 }
 
 function $176($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = Math_fround($6_1);
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$2 = 0, $14_1 = 0, $21_1 = 0, $12_1 = 0, $20_1 = 0, $16_1 = 0, $15_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = 0, $17_1 = 0, $8_1 = Math_fround(0), $13_1 = 0, $18_1 = 0, $19_1 = 0, $169_1 = 0, $174_1 = 0, $219_1 = 0, $313_1 = 0, $318_1 = 0, $347_1 = 0, $353_1 = 0, $402_1 = 0, $436_1 = 0, $476_1 = 0, $510_1 = 0;
  $7_1 = global$0 - 144 | 0;
  global$0 = $7_1;
  label$1 : {
   label$2 : {
    if (($4_1 | 0) > (0 | 0)) {
     break label$2
    }
    label$3 : {
     $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$3
     }
     label$4 : {
      if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
       break label$4
      }
      $80($4_1 | 0);
     }
     HEAP32[($0_1 + 12 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = 0;
    HEAP8[($0_1 + 16 | 0) >> 0] = 1;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
    label$5 : {
     $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$5
     }
     label$6 : {
      if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
       break label$6
      }
      $80($4_1 | 0);
     }
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 32 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($0_1 + 36 | 0) >> 0] = 1;
    label$7 : {
     $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$7
     }
     label$8 : {
      if (!(HEAPU8[($0_1 + 56 | 0) >> 0] | 0)) {
       break label$8
      }
      $80($4_1 | 0);
     }
     HEAP32[($0_1 + 52 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 52 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($0_1 + 56 | 0) >> 0] = 1;
    $8_1 = Math_fround(0.0);
    break label$1;
   }
   HEAP8[($7_1 + 112 | 0) >> 0] = 1;
   i64toi32_i32$1 = $7_1 + 88 | 0;
   i64toi32_i32$0 = 256;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $7_1 + 72 | 0;
   i64toi32_i32$0 = 256;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $7_1 + 56 | 0;
   i64toi32_i32$0 = 256;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($7_1 + 108 | 0) >> 2] = 0;
   i64toi32_i32$1 = $7_1 + 100 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
   $169(i64toi32_i32$1 + 16 | 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   $8_1 = Math_fround(0.0);
   label$9 : {
    label$10 : {
     if ($5_1 > Math_fround(0.0) ^ 1 | 0) {
      break label$10
     }
     $8_1 = Math_fround($173($7_1 + 16 | 0 | 0, Math_fround($5_1), Math_fround($6_1)));
     if ($8_1 < Math_fround(0.0) ^ 1 | 0) {
      break label$10
     }
     label$11 : {
      $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$11
      }
      label$12 : {
       if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
        break label$12
       }
       $80($4_1 | 0);
      }
      HEAP32[($0_1 + 12 | 0) >> 2] = 0;
     }
     HEAP32[($0_1 + 12 | 0) >> 2] = 0;
     HEAP8[($0_1 + 16 | 0) >> 0] = 1;
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$0 = 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = 0;
     HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
     label$13 : {
      $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$13
      }
      label$14 : {
       if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
        break label$14
       }
       $80($4_1 | 0);
      }
      HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     }
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$0 = 0;
     HEAP32[($0_1 + 24 | 0) >> 2] = 0;
     HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$0;
     HEAP8[($0_1 + 36 | 0) >> 0] = 1;
     label$15 : {
      $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$15
      }
      label$16 : {
       if (!(HEAPU8[($0_1 + 56 | 0) >> 0] | 0)) {
        break label$16
       }
       $80($4_1 | 0);
      }
      HEAP32[($0_1 + 52 | 0) >> 2] = 0;
     }
     HEAP32[($0_1 + 52 | 0) >> 2] = 0;
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$0 = 0;
     HEAP32[($0_1 + 44 | 0) >> 2] = 0;
     HEAP32[($0_1 + 48 | 0) >> 2] = i64toi32_i32$0;
     HEAP8[($0_1 + 56 | 0) >> 0] = 1;
     break label$9;
    }
    label$17 : {
     $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($4_1 | 0) > (-1 | 0)) {
      break label$17
     }
     label$18 : {
      if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
       break label$18
      }
      label$19 : {
       $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$19
       }
       label$20 : {
        if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
         break label$20
        }
        $80($1_1 | 0);
       }
       HEAP32[($0_1 + 12 | 0) >> 2] = 0;
      }
      HEAP8[($0_1 + 16 | 0) >> 0] = 1;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$0 = 0;
      HEAP32[($0_1 + 8 | 0) >> 2] = 0;
      HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
     }
     $1_1 = $4_1 << 4 | 0;
     label$21 : while (1) {
      $2_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $1_1 | 0;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$0 = HEAP32[$7_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
      $169_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $2_1;
      HEAP32[i64toi32_i32$0 >> 2] = $169_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $7_1 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $174_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $2_1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $174_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $1_1 = $1_1 + 16 | 0;
      $2_1 = $4_1 + 1 | 0;
      $3_1 = $2_1 >>> 0 >= $4_1 >>> 0;
      $4_1 = $2_1;
      if ($3_1) {
       continue label$21
      }
      break label$21;
     };
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    HEAP32[($7_1 + 8 | 0) >> 2] = 0;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    label$22 : {
     $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (($4_1 | 0) > (-1 | 0)) {
      break label$22
     }
     label$23 : {
      if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
       break label$23
      }
      label$24 : {
       $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
       if (!$1_1) {
        break label$24
       }
       label$25 : {
        if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
         break label$25
        }
        $80($1_1 | 0);
       }
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      }
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$0 = 0;
      HEAP32[($0_1 + 28 | 0) >> 2] = 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
      HEAP8[($0_1 + 36 | 0) >> 0] = 1;
     }
     $1_1 = Math_imul($4_1, 12);
     label$26 : while (1) {
      $2_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $1_1 | 0;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$0 = HEAP32[$7_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
      $219_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $2_1;
      HEAP32[i64toi32_i32$0 >> 2] = $219_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
      $1_1 = $1_1 + 12 | 0;
      $2_1 = $4_1 + 1 | 0;
      $3_1 = $2_1 >>> 0 >= $4_1 >>> 0;
      $4_1 = $2_1;
      if ($3_1) {
       continue label$26
      }
      break label$26;
     };
    }
    HEAP32[($0_1 + 24 | 0) >> 2] = 0;
    label$27 : {
     $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
     if (($4_1 | 0) > (-1 | 0)) {
      break label$27
     }
     $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     label$28 : {
      if ((HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
       break label$28
      }
      label$29 : {
       if (!$1_1) {
        break label$29
       }
       if (!(HEAPU8[($0_1 + 56 | 0) >> 0] | 0)) {
        break label$29
       }
       $80($1_1 | 0);
      }
      HEAP8[($0_1 + 56 | 0) >> 0] = 1;
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$1 = 0;
      HEAP32[($0_1 + 48 | 0) >> 2] = 0;
      HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$1;
      $1_1 = 0;
     }
     $4_1 = $4_1 << 2 | 0;
     $17($1_1 + $4_1 | 0 | 0, 0 | 0, 0 - $4_1 | 0 | 0) | 0;
    }
    HEAP32[($0_1 + 44 | 0) >> 2] = 0;
    $4_1 = HEAP32[($7_1 + 140 | 0) >> 2] | 0;
    if ((HEAP32[($4_1 + 104 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$9
    }
    HEAP32[($4_1 + 104 | 0) >> 2] = 0;
    $9_1 = $79(4 | 0, 16 | 0) | 0;
    HEAP32[$9_1 >> 2] = $4_1;
    $10_1 = 0;
    $11_1 = 1;
    $12_1 = 1;
    $13_1 = $9_1;
    label$30 : while (1) {
     $14_1 = HEAP32[($9_1 + ($10_1 << 2 | 0) | 0) >> 2] | 0;
     $171($7_1 | 0, $7_1 + 16 | 0 | 0, $14_1 | 0);
     label$31 : {
      $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($1_1 | 0) != (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
       break label$31
      }
      $15_1 = $1_1 ? $1_1 << 1 | 0 : 1;
      if (($1_1 | 0) >= ($15_1 | 0)) {
       break label$31
      }
      label$32 : {
       label$33 : {
        if ($15_1) {
         break label$33
        }
        $16_1 = 0;
        break label$32;
       }
       $16_1 = $79($15_1 << 4 | 0 | 0, 16 | 0) | 0;
       $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      }
      label$34 : {
       if (($1_1 | 0) < (1 | 0)) {
        break label$34
       }
       $4_1 = 0;
       label$35 : while (1) {
        $2_1 = $16_1 + $4_1 | 0;
        $3_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $4_1 | 0;
        i64toi32_i32$2 = $3_1;
        i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        $313_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $2_1;
        HEAP32[i64toi32_i32$1 >> 2] = $313_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $3_1 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $318_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $2_1 + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $318_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        $4_1 = $4_1 + 16 | 0;
        $1_1 = $1_1 + -1 | 0;
        if ($1_1) {
         continue label$35
        }
        break label$35;
       };
      }
      label$36 : {
       $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if (!$4_1) {
        break label$36
       }
       label$37 : {
        if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
         break label$37
        }
        $80($4_1 | 0);
       }
       HEAP32[($0_1 + 12 | 0) >> 2] = 0;
      }
      HEAP32[($0_1 + 12 | 0) >> 2] = $16_1;
      HEAP8[($0_1 + 16 | 0) >> 0] = 1;
      HEAP32[($0_1 + 8 | 0) >> 2] = $15_1;
      $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     }
     $4_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[$7_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
     $347_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $4_1;
     HEAP32[$4_1 >> 2] = $347_1;
     HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $17_1 = $7_1 + 8 | 0;
     i64toi32_i32$2 = $17_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $353_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $4_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $353_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     label$38 : {
      $18_1 = HEAP32[($14_1 + 8 | 0) >> 2] | 0;
      if (!$18_1) {
       break label$38
      }
      $15_1 = -1;
      $2_1 = $18_1;
      $19_1 = -1;
      label$39 : while (1) {
       label$40 : {
        $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        if (($4_1 | 0) > (-1 | 0)) {
         break label$40
        }
        $14_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
        HEAP32[$17_1 >> 2] = 0;
        i64toi32_i32$0 = $7_1;
        i64toi32_i32$1 = 0;
        HEAP32[i64toi32_i32$0 >> 2] = 0;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        $4_1 = $14_1;
        label$41 : {
         if (($4_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
          break label$41
         }
         $4_1 = $14_1;
         $20_1 = $4_1 ? $4_1 << 1 | 0 : 1;
         if (($4_1 | 0) >= ($20_1 | 0)) {
          break label$41
         }
         label$42 : {
          label$43 : {
           if ($20_1) {
            break label$43
           }
           $21_1 = 0;
           $1_1 = $14_1;
           break label$42;
          }
          $21_1 = $79(Math_imul($20_1, 12) | 0, 16 | 0) | 0;
          $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
         }
         label$44 : {
          if (($1_1 | 0) < (1 | 0)) {
           break label$44
          }
          $4_1 = 0;
          label$45 : while (1) {
           $3_1 = $21_1 + $4_1 | 0;
           $16_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $4_1 | 0;
           i64toi32_i32$2 = $16_1;
           i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $402_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $3_1;
           HEAP32[i64toi32_i32$1 >> 2] = $402_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
           $4_1 = $4_1 + 12 | 0;
           $1_1 = $1_1 + -1 | 0;
           if ($1_1) {
            continue label$45
           }
           break label$45;
          };
         }
         label$46 : {
          $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$46
          }
          label$47 : {
           if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
            break label$47
           }
           $80($4_1 | 0);
          }
          HEAP32[($0_1 + 32 | 0) >> 2] = 0;
         }
         HEAP32[($0_1 + 32 | 0) >> 2] = $21_1;
         HEAP8[($0_1 + 36 | 0) >> 0] = 1;
         HEAP32[($0_1 + 28 | 0) >> 2] = $20_1;
         $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
        }
        $4_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + Math_imul($4_1, 12) | 0;
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$0 = HEAP32[$7_1 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
        $436_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $4_1;
        HEAP32[$4_1 >> 2] = $436_1;
        HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[$17_1 >> 2] | 0;
        $1_1 = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
        HEAP32[$17_1 >> 2] = 0;
        i64toi32_i32$0 = $7_1;
        i64toi32_i32$1 = 0;
        HEAP32[i64toi32_i32$0 >> 2] = 0;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        label$48 : {
         if (($1_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
          break label$48
         }
         $20_1 = $1_1 ? $1_1 << 1 | 0 : 1;
         if (($1_1 | 0) >= ($20_1 | 0)) {
          break label$48
         }
         label$49 : {
          label$50 : {
           if ($20_1) {
            break label$50
           }
           $21_1 = 0;
           break label$49;
          }
          $21_1 = $79(Math_imul($20_1, 12) | 0, 16 | 0) | 0;
          $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
         }
         label$51 : {
          if (($1_1 | 0) < (1 | 0)) {
           break label$51
          }
          $4_1 = 0;
          label$52 : while (1) {
           $3_1 = $21_1 + $4_1 | 0;
           $16_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $4_1 | 0;
           i64toi32_i32$2 = $16_1;
           i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $476_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $3_1;
           HEAP32[i64toi32_i32$1 >> 2] = $476_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
           $4_1 = $4_1 + 12 | 0;
           $1_1 = $1_1 + -1 | 0;
           if ($1_1) {
            continue label$52
           }
           break label$52;
          };
         }
         label$53 : {
          $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$53
          }
          label$54 : {
           if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
            break label$54
           }
           $80($4_1 | 0);
          }
          HEAP32[($0_1 + 32 | 0) >> 2] = 0;
         }
         HEAP32[($0_1 + 32 | 0) >> 2] = $21_1;
         HEAP8[($0_1 + 36 | 0) >> 0] = 1;
         HEAP32[($0_1 + 28 | 0) >> 2] = $20_1;
         $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
        }
        $4_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + Math_imul($1_1, 12) | 0;
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$0 = HEAP32[$7_1 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
        $510_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $4_1;
        HEAP32[$4_1 >> 2] = $510_1;
        HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[$17_1 >> 2] | 0;
        HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 1 | 0;
        HEAP32[($2_1 + 20 | 0) >> 2] = $14_1;
        $3_1 = $14_1 + 1 | 0;
        HEAP32[((HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] = $3_1;
        $16_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        $1_1 = $16_1 + Math_imul($14_1, 12) | 0;
        HEAP32[($1_1 + 4 | 0) >> 2] = 1;
        HEAP32[($1_1 + 16 | 0) >> 2] = -1;
        label$55 : {
         label$56 : {
          $14_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
          $4_1 = HEAP32[($14_1 + 104 | 0) >> 2] | 0;
          if (($4_1 | 0) <= (-1 | 0)) {
           break label$56
          }
          $14_1 = $11_1;
          $11_1 = $4_1;
          break label$55;
         }
         HEAP32[($14_1 + 104 | 0) >> 2] = $11_1;
         label$57 : {
          label$58 : {
           if (($11_1 | 0) != ($12_1 | 0)) {
            break label$58
           }
           $21_1 = $12_1 ? $12_1 << 1 | 0 : 1;
           if (($12_1 | 0) >= ($21_1 | 0)) {
            break label$58
           }
           label$59 : {
            label$60 : {
             if ($21_1) {
              break label$60
             }
             $20_1 = 0;
             break label$59;
            }
            $20_1 = $79($21_1 << 2 | 0 | 0, 16 | 0) | 0;
           }
           label$61 : {
            label$62 : {
             label$63 : {
              if (($12_1 | 0) < (1 | 0)) {
               break label$63
              }
              $4_1 = $20_1;
              label$64 : while (1) {
               HEAP32[$4_1 >> 2] = HEAP32[$9_1 >> 2] | 0;
               $4_1 = $4_1 + 4 | 0;
               $9_1 = $9_1 + 4 | 0;
               $12_1 = $12_1 + -1 | 0;
               if ($12_1) {
                continue label$64
               }
               break label$62;
              };
             }
             if (!$9_1) {
              break label$61
             }
            }
            $80($13_1 | 0);
           }
           $9_1 = $20_1;
           break label$57;
          }
          $20_1 = $13_1;
          $21_1 = $12_1;
         }
         HEAP32[($9_1 + ($11_1 << 2 | 0) | 0) >> 2] = $14_1;
         $14_1 = $11_1 + 1 | 0;
         $13_1 = $20_1;
         $12_1 = $21_1;
        }
        HEAP32[(($16_1 + Math_imul($3_1, 12) | 0) + 8 | 0) >> 2] = $10_1;
        HEAP32[($1_1 + 8 | 0) >> 2] = $11_1;
        $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
        $11_1 = $14_1;
       }
       $1_1 = $4_1;
       label$65 : {
        if (($15_1 | 0) < (0 | 0)) {
         break label$65
        }
        HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + Math_imul($4_1, 12) | 0) >> 2] = $15_1 - $4_1 | 0;
        $1_1 = $19_1;
       }
       $15_1 = $4_1;
       $19_1 = $1_1;
       $2_1 = HEAP32[$2_1 >> 2] | 0;
       if (($2_1 | 0) != ($18_1 | 0)) {
        continue label$39
       }
       break label$39;
      };
      HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + Math_imul($1_1, 12) | 0) >> 2] = $4_1 - $1_1 | 0;
     }
     $10_1 = $10_1 + 1 | 0;
     if (($10_1 | 0) < ($11_1 | 0)) {
      continue label$30
     }
     break label$30;
    };
    $12_1 = 0;
    label$66 : while (1) {
     label$67 : {
      $16_1 = HEAP32[((HEAP32[($9_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      if (!$16_1) {
       break label$67
      }
      $1_1 = $16_1;
      label$68 : while (1) {
       label$69 : {
        $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
        if (($4_1 | 0) < (0 | 0)) {
         break label$69
        }
        label$70 : {
         $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
         if (($3_1 | 0) != (HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0)) {
          break label$70
         }
         $14_1 = $3_1 ? $3_1 << 1 | 0 : 1;
         if (($3_1 | 0) >= ($14_1 | 0)) {
          break label$70
         }
         label$71 : {
          label$72 : {
           if ($14_1) {
            break label$72
           }
           $15_1 = 0;
           break label$71;
          }
          $15_1 = $79($14_1 << 2 | 0 | 0, 16 | 0) | 0;
          $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
         }
         $21_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
         label$73 : {
          label$74 : {
           label$75 : {
            if (($3_1 | 0) < (1 | 0)) {
             break label$75
            }
            $4_1 = $15_1;
            $2_1 = $21_1;
            label$76 : while (1) {
             HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
             $4_1 = $4_1 + 4 | 0;
             $2_1 = $2_1 + 4 | 0;
             $3_1 = $3_1 + -1 | 0;
             if ($3_1) {
              continue label$76
             }
             break label$74;
            };
           }
           if (!$21_1) {
            break label$73
           }
          }
          label$77 : {
           if (!(HEAPU8[($0_1 + 56 | 0) >> 0] | 0)) {
            break label$77
           }
           $80($21_1 | 0);
          }
          HEAP32[($0_1 + 52 | 0) >> 2] = 0;
          $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
         }
         HEAP32[($0_1 + 48 | 0) >> 2] = $14_1;
         HEAP32[($0_1 + 52 | 0) >> 2] = $15_1;
         HEAP8[($0_1 + 56 | 0) >> 0] = 1;
         $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
        }
        HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = $4_1;
        HEAP32[($0_1 + 44 | 0) >> 2] = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + 1 | 0;
        $4_1 = $1_1;
        label$78 : while (1) {
         HEAP32[($4_1 + 20 | 0) >> 2] = -1;
         $4_1 = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
         if (($4_1 | 0) != ($1_1 | 0)) {
          continue label$78
         }
         break label$78;
        };
       }
       $1_1 = HEAP32[$1_1 >> 2] | 0;
       if (($1_1 | 0) != ($16_1 | 0)) {
        continue label$68
       }
       break label$68;
      };
     }
     $12_1 = $12_1 + 1 | 0;
     if (($12_1 | 0) != ($10_1 | 0)) {
      continue label$66
     }
     break label$66;
    };
    if (!$9_1) {
     break label$9
    }
    $80($13_1 | 0);
   }
   label$79 : {
    $4_1 = HEAP32[($7_1 + 108 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$79
    }
    label$80 : {
     if (!(HEAPU8[($7_1 + 112 | 0) >> 0] | 0)) {
      break label$80
     }
     $80($4_1 | 0);
    }
    HEAP32[($7_1 + 108 | 0) >> 2] = 0;
   }
   HEAP32[($7_1 + 108 | 0) >> 2] = 0;
   HEAP8[($7_1 + 112 | 0) >> 0] = 1;
   i64toi32_i32$0 = $7_1;
   i64toi32_i32$1 = 0;
   HEAP32[($7_1 + 100 | 0) >> 2] = 0;
   HEAP32[($7_1 + 104 | 0) >> 2] = i64toi32_i32$1;
   label$81 : {
    label$82 : while (1) {
     $4_1 = HEAP32[($7_1 + 80 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$81
     }
     HEAP32[($7_1 + 80 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     $80(HEAP32[$4_1 >> 2] | 0 | 0);
     $80($4_1 | 0);
     continue label$82;
    };
   }
   label$83 : {
    label$84 : while (1) {
     $4_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$83
     }
     HEAP32[($7_1 + 64 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
     $80(HEAP32[$4_1 >> 2] | 0 | 0);
     $80($4_1 | 0);
     continue label$84;
    };
   }
   label$85 : while (1) {
    $4_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$1
    }
    HEAP32[($7_1 + 48 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $80(HEAP32[$4_1 >> 2] | 0 | 0);
    $80($4_1 | 0);
    continue label$85;
   };
  }
  global$0 = $7_1 + 144 | 0;
  return Math_fround($8_1);
 }
 
 function $177($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $18_1 = Math_fround(0), $26_1 = 0, $25_1 = 0, $14_1 = Math_fround(0), i64toi32_i32$1 = 0, $15_1 = Math_fround(0), $17_1 = Math_fround(0), i64toi32_i32$0 = 0, $28_1 = 0, $19_1 = Math_fround(0), i64toi32_i32$2 = 0, $2_1 = 0, $22_1 = Math_fround(0), $24_1 = 0, $3_1 = 0, $6_1 = 0, $9_1 = 0, $13_1 = 0, $20_1 = Math_fround(0), $23_1 = Math_fround(0), $27_1 = 0, $10_1 = 0, $16_1 = Math_fround(0), $21_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, $106_1 = Math_fround(0), $249_1 = 0, $254_1 = 0, $413_1 = 0, $418_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $4_1 = $3_1;
     $3_1 = $4_1 + 1 | 0;
     if (($3_1 | 0) >= ($2_1 | 0)) {
      break label$3
     }
     $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     $6_1 = $5_1 + ($4_1 << 4 | 0) | 0;
     $7_1 = $6_1 + 8 | 0;
     $8_1 = $6_1 + 4 | 0;
     $4_1 = $3_1;
     label$4 : while (1) {
      label$5 : {
       $9_1 = $4_1 + 1 | 0;
       if (($9_1 | 0) >= ($2_1 | 0)) {
        break label$5
       }
       $10_1 = $5_1 + ($4_1 << 4 | 0) | 0;
       $11_1 = $10_1 + 8 | 0;
       $12_1 = $10_1 + 4 | 0;
       $13_1 = $9_1;
       label$6 : while (1) {
        label$7 : {
         $14_1 = Math_fround(HEAPF32[$6_1 >> 2]);
         $15_1 = Math_fround(Math_fround(HEAPF32[$10_1 >> 2]) - $14_1);
         $4_1 = $5_1 + ($13_1 << 4 | 0) | 0;
         $16_1 = Math_fround(HEAPF32[$8_1 >> 2]);
         $17_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) - $16_1);
         $18_1 = Math_fround(Math_fround(HEAPF32[$12_1 >> 2]) - $16_1);
         $19_1 = Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) - $14_1);
         $20_1 = Math_fround(Math_fround($15_1 * $17_1) - Math_fround($18_1 * $19_1));
         $21_1 = Math_fround(HEAPF32[$7_1 >> 2]);
         $22_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) - $21_1);
         $106_1 = Math_fround($18_1 * $22_1);
         $18_1 = Math_fround(Math_fround(HEAPF32[$11_1 >> 2]) - $21_1);
         $23_1 = Math_fround($106_1 - Math_fround($18_1 * $17_1));
         $19_1 = Math_fround(Math_fround($18_1 * $19_1) - Math_fround($15_1 * $22_1));
         $22_1 = Math_fround(Math_fround($20_1 * $20_1) + Math_fround(Math_fround($23_1 * $23_1) + Math_fround($19_1 * $19_1)));
         $24_1 = $22_1 > Math_fround(9.999999747378752e-05) ^ 1 | 0;
         if ($24_1) {
          break label$7
         }
         $18_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($22_1)));
         $15_1 = Math_fround($20_1 * $18_1);
         $17_1 = Math_fround($19_1 * $18_1);
         $18_1 = Math_fround($23_1 * $18_1);
         label$8 : {
          $25_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($25_1 | 0) < (1 | 0)) {
           break label$8
          }
          $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
          $26_1 = $25_1;
          label$9 : while (1) {
           if (!(Math_fround(Math_fround(Math_fround($18_1 * Math_fround(HEAPF32[$4_1 >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]))) + Math_fround($15_1 * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))) > Math_fround(.9990000128746033) ^ 1 | 0)) {
            break label$7
           }
           $4_1 = $4_1 + 16 | 0;
           $26_1 = $26_1 + -1 | 0;
           if ($26_1) {
            continue label$9
           }
           break label$9;
          };
         }
         $14_1 = Math_fround(Math_fround(Math_fround($18_1 * $14_1) + Math_fround($17_1 * $16_1)) + Math_fround($15_1 * $21_1));
         label$10 : {
          $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($4_1 | 0) < (1 | 0)) {
           break label$10
          }
          label$11 : while (1) {
           if (!(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($18_1 * Math_fround(HEAPF32[$5_1 >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]))) + Math_fround($15_1 * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]))) - $14_1) + Math_fround(-.009999999776482582)) > Math_fround(0.0) ^ 1 | 0)) {
            break label$7
           }
           $5_1 = $5_1 + 16 | 0;
           $4_1 = $4_1 + -1 | 0;
           if ($4_1) {
            continue label$11
           }
           break label$11;
          };
         }
         $14_1 = Math_fround(-$14_1);
         label$12 : {
          if (($25_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
           break label$12
          }
          $27_1 = $25_1 ? $25_1 << 1 | 0 : 1;
          if (($25_1 | 0) >= ($27_1 | 0)) {
           break label$12
          }
          label$13 : {
           label$14 : {
            if ($27_1) {
             break label$14
            }
            $28_1 = 0;
            break label$13;
           }
           $28_1 = $79($27_1 << 4 | 0 | 0, 16 | 0) | 0;
           $25_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          }
          label$15 : {
           if (($25_1 | 0) < (1 | 0)) {
            break label$15
           }
           $4_1 = 0;
           label$16 : while (1) {
            $5_1 = $28_1 + $4_1 | 0;
            $26_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $4_1 | 0;
            i64toi32_i32$2 = $26_1;
            i64toi32_i32$0 = HEAP32[$26_1 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[($26_1 + 4 | 0) >> 2] | 0;
            $249_1 = i64toi32_i32$0;
            i64toi32_i32$0 = $5_1;
            HEAP32[$5_1 >> 2] = $249_1;
            HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$2 = $26_1 + 8 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $254_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $5_1 + 8 | 0;
            HEAP32[i64toi32_i32$1 >> 2] = $254_1;
            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
            $4_1 = $4_1 + 16 | 0;
            $25_1 = $25_1 + -1 | 0;
            if ($25_1) {
             continue label$16
            }
            break label$16;
           };
          }
          label$17 : {
           $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
           if (!$4_1) {
            break label$17
           }
           label$18 : {
            if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
             break label$18
            }
            $80($4_1 | 0);
           }
           HEAP32[($1_1 + 12 | 0) >> 2] = 0;
          }
          HEAP32[($1_1 + 12 | 0) >> 2] = $28_1;
          HEAP8[($1_1 + 16 | 0) >> 0] = 1;
          HEAP32[($1_1 + 8 | 0) >> 2] = $27_1;
          $25_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
         }
         $4_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($25_1 << 4 | 0) | 0;
         HEAPF32[($4_1 + 12 | 0) >> 2] = $14_1;
         HEAPF32[($4_1 + 8 | 0) >> 2] = $15_1;
         HEAPF32[($4_1 + 4 | 0) >> 2] = $17_1;
         HEAPF32[$4_1 >> 2] = $18_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 1 | 0;
        }
        label$19 : {
         if ($24_1) {
          break label$19
         }
         $18_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($22_1)));
         $15_1 = Math_fround(-Math_fround($20_1 * $18_1));
         $17_1 = Math_fround(-Math_fround($19_1 * $18_1));
         $18_1 = Math_fround(-Math_fround($23_1 * $18_1));
         label$20 : {
          $26_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($26_1 | 0) < (1 | 0)) {
           break label$20
          }
          $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
          $5_1 = $26_1;
          label$21 : while (1) {
           if (Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) * $18_1) + Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * $17_1)) + Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * $15_1)) > Math_fround(.9990000128746033)) {
            break label$19
           }
           $4_1 = $4_1 + 16 | 0;
           $5_1 = $5_1 + -1 | 0;
           if ($5_1) {
            continue label$21
           }
           break label$21;
          };
         }
         $14_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 >> 2]) * $18_1) + Math_fround(Math_fround(HEAPF32[$8_1 >> 2]) * $17_1)) + Math_fround(Math_fround(HEAPF32[$7_1 >> 2]) * $15_1));
         label$22 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) < (1 | 0)) {
           break label$22
          }
          $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
          label$23 : while (1) {
           if (Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) * $18_1) + Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * $17_1)) + Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * $15_1)) - $14_1) + Math_fround(-.009999999776482582)) > Math_fround(0.0)) {
            break label$19
           }
           $4_1 = $4_1 + 16 | 0;
           $5_1 = $5_1 + -1 | 0;
           if ($5_1) {
            continue label$23
           }
           break label$23;
          };
         }
         $14_1 = Math_fround(-$14_1);
         label$24 : {
          if (($26_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
           break label$24
          }
          $28_1 = $26_1 ? $26_1 << 1 | 0 : 1;
          if (($26_1 | 0) >= ($28_1 | 0)) {
           break label$24
          }
          label$25 : {
           label$26 : {
            if ($28_1) {
             break label$26
            }
            $24_1 = 0;
            break label$25;
           }
           $24_1 = $79($28_1 << 4 | 0 | 0, 16 | 0) | 0;
           $26_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          }
          label$27 : {
           if (($26_1 | 0) < (1 | 0)) {
            break label$27
           }
           $4_1 = 0;
           label$28 : while (1) {
            $5_1 = $24_1 + $4_1 | 0;
            $25_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $4_1 | 0;
            i64toi32_i32$2 = $25_1;
            i64toi32_i32$0 = HEAP32[$25_1 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[($25_1 + 4 | 0) >> 2] | 0;
            $413_1 = i64toi32_i32$0;
            i64toi32_i32$0 = $5_1;
            HEAP32[$5_1 >> 2] = $413_1;
            HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$2 = $25_1 + 8 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $418_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $5_1 + 8 | 0;
            HEAP32[i64toi32_i32$1 >> 2] = $418_1;
            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
            $4_1 = $4_1 + 16 | 0;
            $26_1 = $26_1 + -1 | 0;
            if ($26_1) {
             continue label$28
            }
            break label$28;
           };
          }
          label$29 : {
           $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
           if (!$4_1) {
            break label$29
           }
           label$30 : {
            if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
             break label$30
            }
            $80($4_1 | 0);
           }
           HEAP32[($1_1 + 12 | 0) >> 2] = 0;
          }
          HEAP32[($1_1 + 12 | 0) >> 2] = $24_1;
          HEAP8[($1_1 + 16 | 0) >> 0] = 1;
          HEAP32[($1_1 + 8 | 0) >> 2] = $28_1;
          $26_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
         }
         $4_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($26_1 << 4 | 0) | 0;
         HEAPF32[($4_1 + 12 | 0) >> 2] = $14_1;
         HEAPF32[($4_1 + 8 | 0) >> 2] = $15_1;
         HEAPF32[($4_1 + 4 | 0) >> 2] = $17_1;
         HEAPF32[$4_1 >> 2] = $18_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 1 | 0;
        }
        $13_1 = $13_1 + 1 | 0;
        if (($13_1 | 0) == ($2_1 | 0)) {
         break label$5
        }
        $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        continue label$6;
       };
      }
      if (($9_1 | 0) == ($2_1 | 0)) {
       break label$3
      }
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $4_1 = $9_1;
      continue label$4;
     };
    }
    if (($3_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $178($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $16_1 = Math_fround(0), $19_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $20_1 = Math_fround(0), $2_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $28_1 = Math_fround(0), $6_1 = 0, $10_1 = 0, $11_1 = 0, $15_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $29_1 = 0, $27_1 = Math_fround(0), $30_1 = 0, $31_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $223_1 = Math_fround(0), $321_1 = 0, $326_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $4_1 = $3_1;
     $3_1 = $4_1 + 1 | 0;
     if (($3_1 | 0) >= ($2_1 | 0)) {
      break label$3
     }
     $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     $6_1 = $5_1 + ($4_1 << 4 | 0) | 0;
     $7_1 = $6_1 + 12 | 0;
     $8_1 = $6_1 + 4 | 0;
     $9_1 = $6_1 + 8 | 0;
     $4_1 = $3_1;
     label$4 : while (1) {
      label$5 : {
       $10_1 = $4_1 + 1 | 0;
       if (($10_1 | 0) >= ($2_1 | 0)) {
        break label$5
       }
       $11_1 = $5_1 + ($4_1 << 4 | 0) | 0;
       $12_1 = $11_1 + 12 | 0;
       $13_1 = $11_1 + 8 | 0;
       $14_1 = $11_1 + 4 | 0;
       $15_1 = $10_1;
       label$6 : while (1) {
        label$7 : {
         $4_1 = $5_1 + ($15_1 << 4 | 0) | 0;
         $16_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
         $17_1 = Math_fround(HEAPF32[$11_1 >> 2]);
         $18_1 = Math_fround(HEAPF32[$14_1 >> 2]);
         $19_1 = Math_fround(HEAPF32[$4_1 >> 2]);
         $20_1 = Math_fround(Math_fround($16_1 * $17_1) - Math_fround($18_1 * $19_1));
         $21_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
         $22_1 = Math_fround(HEAPF32[$13_1 >> 2]);
         $23_1 = Math_fround(Math_fround($18_1 * $21_1) - Math_fround($22_1 * $16_1));
         $24_1 = Math_fround(Math_fround($22_1 * $19_1) - Math_fround($21_1 * $17_1));
         if (Math_fround(Math_fround($20_1 * $20_1) + Math_fround(Math_fround($23_1 * $23_1) + Math_fround($24_1 * $24_1))) > Math_fround(9.999999747378752e-05) ^ 1 | 0) {
          break label$7
         }
         $25_1 = Math_fround(HEAPF32[$8_1 >> 2]);
         $26_1 = Math_fround(HEAPF32[$6_1 >> 2]);
         $27_1 = Math_fround(Math_fround($19_1 * $25_1) - Math_fround($16_1 * $26_1));
         $28_1 = Math_fround(HEAPF32[$9_1 >> 2]);
         $16_1 = Math_fround(Math_fround($16_1 * $28_1) - Math_fround($21_1 * $25_1));
         $19_1 = Math_fround(Math_fround($21_1 * $26_1) - Math_fround($19_1 * $28_1));
         if (Math_fround(Math_fround($27_1 * $27_1) + Math_fround(Math_fround($16_1 * $16_1) + Math_fround($19_1 * $19_1))) > Math_fround(9.999999747378752e-05) ^ 1 | 0) {
          break label$7
         }
         $21_1 = Math_fround(Math_fround($18_1 * $26_1) - Math_fround($17_1 * $25_1));
         $18_1 = Math_fround(Math_fround($22_1 * $25_1) - Math_fround($18_1 * $28_1));
         $17_1 = Math_fround(Math_fround($17_1 * $28_1) - Math_fround($22_1 * $26_1));
         if (Math_fround(Math_fround($21_1 * $21_1) + Math_fround(Math_fround($18_1 * $18_1) + Math_fround($17_1 * $17_1))) > Math_fround(9.999999747378752e-05) ^ 1 | 0) {
          break label$7
         }
         $22_1 = Math_fround(Math_fround($28_1 * $20_1) + Math_fround(Math_fround($25_1 * $24_1) + Math_fround($23_1 * $26_1)));
         if (Math_fround(Math_abs($22_1)) > Math_fround(9.999999974752427e-07) ^ 1 | 0) {
          break label$7
         }
         $22_1 = Math_fround(Math_fround(-1.0) / $22_1);
         $25_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
         $26_1 = Math_fround(HEAPF32[$7_1 >> 2]);
         $223_1 = Math_fround($20_1 * $26_1);
         $20_1 = Math_fround(HEAPF32[$12_1 >> 2]);
         $21_1 = Math_fround($22_1 * Math_fround(Math_fround($21_1 * $25_1) + Math_fround($223_1 + Math_fround($27_1 * $20_1))));
         $19_1 = Math_fround($22_1 * Math_fround(Math_fround($17_1 * $25_1) + Math_fround(Math_fround($24_1 * $26_1) + Math_fround($19_1 * $20_1))));
         $16_1 = Math_fround($22_1 * Math_fround(Math_fround($18_1 * $25_1) + Math_fround(Math_fround($23_1 * $26_1) + Math_fround($16_1 * $20_1))));
         label$8 : {
          $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($4_1 | 0) < (1 | 0)) {
           break label$8
          }
          label$9 : while (1) {
           if (!(Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]) + Math_fround(Math_fround(Math_fround($16_1 * Math_fround(HEAPF32[$5_1 >> 2])) + Math_fround($19_1 * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]))) + Math_fround($21_1 * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])))) + Math_fround(-.009999999776482582)) > Math_fround(0.0) ^ 1 | 0)) {
            break label$7
           }
           $5_1 = $5_1 + 16 | 0;
           $4_1 = $4_1 + -1 | 0;
           if ($4_1) {
            continue label$9
           }
           break label$9;
          };
         }
         label$10 : {
          $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($4_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
           break label$10
          }
          $29_1 = $4_1 ? $4_1 << 1 | 0 : 1;
          if (($4_1 | 0) >= ($29_1 | 0)) {
           break label$10
          }
          label$11 : {
           label$12 : {
            if ($29_1) {
             break label$12
            }
            $30_1 = 0;
            break label$11;
           }
           $30_1 = $79($29_1 << 4 | 0 | 0, 16 | 0) | 0;
           $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          }
          label$13 : {
           if (($4_1 | 0) < (1 | 0)) {
            break label$13
           }
           $5_1 = 0;
           label$14 : while (1) {
            $31_1 = $30_1 + $5_1 | 0;
            i64toi32_i32$2 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $5_1 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $321_1 = i64toi32_i32$0;
            i64toi32_i32$0 = $31_1;
            HEAP32[i64toi32_i32$0 >> 2] = $321_1;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $326_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $31_1 + 8 | 0;
            HEAP32[i64toi32_i32$1 >> 2] = $326_1;
            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
            $5_1 = $5_1 + 16 | 0;
            $4_1 = $4_1 + -1 | 0;
            if ($4_1) {
             continue label$14
            }
            break label$14;
           };
          }
          label$15 : {
           $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
           if (!$5_1) {
            break label$15
           }
           label$16 : {
            if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
             break label$16
            }
            $80($5_1 | 0);
           }
           HEAP32[($1_1 + 12 | 0) >> 2] = 0;
          }
          HEAP32[($1_1 + 12 | 0) >> 2] = $30_1;
          HEAP8[($1_1 + 16 | 0) >> 0] = 1;
          HEAP32[($1_1 + 8 | 0) >> 2] = $29_1;
          $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
         }
         $5_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($4_1 << 4 | 0) | 0;
         HEAP32[($5_1 + 12 | 0) >> 2] = 0;
         HEAPF32[($5_1 + 8 | 0) >> 2] = $21_1;
         HEAPF32[($5_1 + 4 | 0) >> 2] = $19_1;
         HEAPF32[$5_1 >> 2] = $16_1;
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 1 | 0;
        }
        $15_1 = $15_1 + 1 | 0;
        if (($15_1 | 0) == ($2_1 | 0)) {
         break label$5
        }
        $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        continue label$6;
       };
      }
      if (($10_1 | 0) == ($2_1 | 0)) {
       break label$3
      }
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $4_1 = $10_1;
      continue label$4;
     };
    }
    if (($3_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  $145($0_1 | 0) | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 7108;
  return $0_1 | 0;
 }
 
 function $180($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $181($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $8_1 = 0, $4_1 = 0, $9_1 = 0, $11_1 = Math_fround(0), $16_1 = 0, $15_1 = 0, $24_1 = Math_fround(0), $22_1 = Math_fround(0), $12_1 = 0, $21_1 = 0, $23_1 = Math_fround(0), $19_1 = 0, $25_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $20_1 = 0, $14_1 = 0, $13_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $26_1 = Math_fround(0), $30_1 = 0, $27_1 = 0, $28_1 = 0, $81_1 = 0, $86_1 = 0, $116_1 = 0, $122_1 = 0, $195_1 = 0, $234_1 = 0, $239_1 = 0, $268_1 = 0, $337_1 = 0, $343_1 = 0, $411_1 = 0, $421_1 = 0, $464_1 = 0, $469_1 = 0, $503_1 = 0, $509_1 = 0, $531_1 = 0, $536_1 = 0, $667_1 = Math_fround(0), $735_1 = Math_fround(0), $738_1 = Math_fround(0), $743_1 = Math_fround(0), $29_1 = 0, $1121_1 = 0, $1124_1 = 0, $1147_1 = 0, $1150_1 = 0, $1179_1 = 0, $1184_1 = 0, $1189_1 = 0, $1218_1 = 0, $1230_1 = 0, $1637 = 0, $1642 = 0;
  $2_1 = global$0 - 240 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[(HEAP32[$3_1 >> 2] | 0) >> 2] | 0]($3_1) | 0;
   $80(HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0);
  }
  $3_1 = $79(132 | 0, 16 | 0) | 0;
  $150($3_1 | 0) | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 228 | 0) >> 2] = 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 220 | 0) >> 2] = 0;
  HEAP32[($2_1 + 224 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($2_1 + 232 | 0) >> 0] = 1;
  $4_1 = 0;
  label$2 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 96 | 0) >> 2] | 0]($0_1) | 0 | 0) < (1 | 0)) {
    break label$2
   }
   $4_1 = 0;
   $5_1 = 0;
   $6_1 = 0;
   $7_1 = 0;
   label$3 : while (1) {
    label$4 : {
     label$5 : {
      if (($6_1 | 0) == ($5_1 | 0)) {
       break label$5
      }
      $8_1 = $4_1;
      break label$4;
     }
     label$6 : {
      $9_1 = $5_1 ? $5_1 << 1 | 0 : 1;
      if (($5_1 | 0) < ($9_1 | 0)) {
       break label$6
      }
      $8_1 = $4_1;
      break label$4;
     }
     label$7 : {
      label$8 : {
       if ($9_1) {
        break label$8
       }
       $8_1 = 0;
       break label$7;
      }
      $8_1 = $79($9_1 << 4 | 0 | 0, 16 | 0) | 0;
     }
     label$9 : {
      label$10 : {
       label$11 : {
        if (($5_1 | 0) < (1 | 0)) {
         break label$11
        }
        $3_1 = $8_1;
        $10_1 = $4_1;
        label$12 : while (1) {
         i64toi32_i32$2 = $10_1;
         i64toi32_i32$0 = HEAP32[$10_1 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
         $81_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $3_1;
         HEAP32[$3_1 >> 2] = $81_1;
         HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = $10_1 + 8 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $86_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $3_1 + 8 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $86_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $3_1 = $3_1 + 16 | 0;
         $10_1 = $10_1 + 16 | 0;
         $5_1 = $5_1 + -1 | 0;
         if ($5_1) {
          continue label$12
         }
         break label$10;
        };
       }
       if (!$4_1) {
        break label$9
       }
      }
      label$13 : {
       if (!(HEAPU8[($2_1 + 232 | 0) >> 0] | 0)) {
        break label$13
       }
       $80($4_1 | 0);
      }
      HEAP32[($2_1 + 228 | 0) >> 2] = 0;
     }
     HEAP32[($2_1 + 228 | 0) >> 2] = $8_1;
     HEAP8[($2_1 + 232 | 0) >> 0] = 1;
     HEAP32[($2_1 + 224 | 0) >> 2] = $9_1;
    }
    HEAP32[($2_1 + 220 | 0) >> 2] = $6_1 + 1 | 0;
    $3_1 = $6_1 << 4 | 0;
    $10_1 = $8_1 + $3_1 | 0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[($2_1 + 152 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 156 | 0) >> 2] | 0;
    $116_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $10_1;
    HEAP32[i64toi32_i32$0 >> 2] = $116_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = ($2_1 + 152 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $122_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $10_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $122_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $4_1 = HEAP32[($2_1 + 228 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 108 | 0) >> 2] | 0]($0_1, $7_1, $4_1 + $3_1 | 0);
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) >= (FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 96 | 0) >> 2] | 0]($0_1) | 0 | 0)) {
     break label$2
    }
    $5_1 = HEAP32[($2_1 + 224 | 0) >> 2] | 0;
    $6_1 = HEAP32[($2_1 + 220 | 0) >> 2] | 0;
    continue label$3;
   };
  }
  HEAP8[($2_1 + 188 | 0) >> 0] = 1;
  HEAP32[($2_1 + 184 | 0) >> 2] = 0;
  HEAP8[($2_1 + 208 | 0) >> 0] = 1;
  i64toi32_i32$1 = $2_1 + 176 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 204 | 0) >> 2] = 0;
  i64toi32_i32$1 = $2_1 + 196 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 164 | 0) >> 2] = 0;
  HEAP8[($2_1 + 168 | 0) >> 0] = 1;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 156 | 0) >> 2] = 0;
  HEAP32[($2_1 + 160 | 0) >> 2] = i64toi32_i32$0;
  label$14 : {
   label$15 : {
    if ($1_1) {
     break label$15
    }
    Math_fround($176($2_1 + 152 | 0 | 0, $4_1 | 0, 0 | 0, 16 | 0, HEAP32[($2_1 + 220 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0))));
    break label$14;
   }
   HEAP32[($2_1 + 60 | 0) >> 2] = 0;
   HEAP8[($2_1 + 64 | 0) >> 0] = 1;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   HEAP32[($2_1 + 52 | 0) >> 2] = 0;
   HEAP32[($2_1 + 56 | 0) >> 2] = i64toi32_i32$0;
   $177($2_1 + 216 | 0 | 0, $2_1 + 48 | 0 | 0);
   HEAP32[($2_1 + 140 | 0) >> 2] = 0;
   HEAP8[($2_1 + 144 | 0) >> 0] = 1;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   HEAP32[($2_1 + 132 | 0) >> 2] = 0;
   HEAP32[($2_1 + 136 | 0) >> 2] = i64toi32_i32$0;
   label$16 : {
    if ((HEAP32[($2_1 + 52 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$16
    }
    $8_1 = 0;
    label$17 : while (1) {
     $4_1 = ($2_1 + 104 | 0) + 8 | 0;
     $3_1 = (HEAP32[($2_1 + 60 | 0) >> 2] | 0) + ($8_1 << 4 | 0) | 0;
     HEAP32[$4_1 >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     $195_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1;
     HEAP32[($2_1 + 104 | 0) >> 2] = $195_1;
     HEAP32[($2_1 + 108 | 0) >> 2] = i64toi32_i32$1;
     $11_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]) - Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1)));
     label$18 : {
      $10_1 = HEAP32[($2_1 + 132 | 0) >> 2] | 0;
      if (($10_1 | 0) != (HEAP32[($2_1 + 136 | 0) >> 2] | 0 | 0)) {
       break label$18
      }
      $9_1 = $10_1 ? $10_1 << 1 | 0 : 1;
      if (($10_1 | 0) >= ($9_1 | 0)) {
       break label$18
      }
      label$19 : {
       label$20 : {
        if ($9_1) {
         break label$20
        }
        $7_1 = 0;
        break label$19;
       }
       $7_1 = $79($9_1 << 4 | 0 | 0, 16 | 0) | 0;
       $10_1 = HEAP32[($2_1 + 132 | 0) >> 2] | 0;
      }
      label$21 : {
       if (($10_1 | 0) < (1 | 0)) {
        break label$21
       }
       $3_1 = 0;
       label$22 : while (1) {
        $5_1 = $7_1 + $3_1 | 0;
        $6_1 = (HEAP32[($2_1 + 140 | 0) >> 2] | 0) + $3_1 | 0;
        i64toi32_i32$2 = $6_1;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $234_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $5_1;
        HEAP32[i64toi32_i32$1 >> 2] = $234_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $239_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $5_1 + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $239_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        $3_1 = $3_1 + 16 | 0;
        $10_1 = $10_1 + -1 | 0;
        if ($10_1) {
         continue label$22
        }
        break label$22;
       };
      }
      label$23 : {
       $3_1 = HEAP32[($2_1 + 140 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$23
       }
       label$24 : {
        if (!(HEAPU8[($2_1 + 144 | 0) >> 0] | 0)) {
         break label$24
        }
        $80($3_1 | 0);
       }
       HEAP32[($2_1 + 140 | 0) >> 2] = 0;
      }
      HEAP32[($2_1 + 140 | 0) >> 2] = $7_1;
      HEAP8[($2_1 + 144 | 0) >> 0] = 1;
      HEAP32[($2_1 + 136 | 0) >> 2] = $9_1;
      $10_1 = HEAP32[($2_1 + 132 | 0) >> 2] | 0;
     }
     $3_1 = (HEAP32[($2_1 + 140 | 0) >> 2] | 0) + ($10_1 << 4 | 0) | 0;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = HEAP32[($2_1 + 104 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($2_1 + 108 | 0) >> 2] | 0;
     $268_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[$3_1 >> 2] = $268_1;
     HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAPF32[($3_1 + 12 | 0) >> 2] = $11_1;
     HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($2_1 + 132 | 0) >> 2] = (HEAP32[($2_1 + 132 | 0) >> 2] | 0) + 1 | 0;
     $8_1 = $8_1 + 1 | 0;
     if (($8_1 | 0) < (HEAP32[($2_1 + 52 | 0) >> 2] | 0 | 0)) {
      continue label$17
     }
     break label$17;
    };
   }
   HEAP32[($2_1 + 116 | 0) >> 2] = 0;
   HEAP8[($2_1 + 120 | 0) >> 0] = 1;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   HEAP32[($2_1 + 108 | 0) >> 2] = 0;
   HEAP32[($2_1 + 112 | 0) >> 2] = i64toi32_i32$0;
   $178($2_1 + 128 | 0 | 0, $2_1 + 104 | 0 | 0);
   Math_fround($176($2_1 + 152 | 0 | 0, HEAP32[($2_1 + 116 | 0) >> 2] | 0 | 0, 0 | 0, 16 | 0, HEAP32[($2_1 + 108 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0))));
   label$25 : {
    $3_1 = HEAP32[($2_1 + 116 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$25
    }
    label$26 : {
     if (!(HEAPU8[($2_1 + 120 | 0) >> 0] | 0)) {
      break label$26
     }
     $80($3_1 | 0);
    }
    HEAP32[($2_1 + 116 | 0) >> 2] = 0;
   }
   label$27 : {
    $3_1 = HEAP32[($2_1 + 140 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$27
    }
    label$28 : {
     if (!(HEAPU8[($2_1 + 144 | 0) >> 0] | 0)) {
      break label$28
     }
     $80($3_1 | 0);
    }
    HEAP32[($2_1 + 140 | 0) >> 2] = 0;
   }
   $3_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$14
   }
   label$29 : {
    if (!(HEAPU8[($2_1 + 64 | 0) >> 0] | 0)) {
     break label$29
    }
    $80($3_1 | 0);
   }
   HEAP32[($2_1 + 60 | 0) >> 2] = 0;
  }
  label$30 : {
   label$31 : {
    $12_1 = HEAP32[($2_1 + 196 | 0) >> 2] | 0;
    if (($12_1 | 0) >= (1 | 0)) {
     break label$31
    }
    $13_1 = 0;
    $14_1 = 0;
    break label$30;
   }
   $13_1 = $79($12_1 << 4 | 0 | 0, 16 | 0) | 0;
   $3_1 = $13_1;
   $10_1 = $12_1;
   label$32 : while (1) {
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
    $337_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[$3_1 >> 2] = $337_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = ($2_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $343_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $3_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $343_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $3_1 = $3_1 + 16 | 0;
    $10_1 = $10_1 + -1 | 0;
    if ($10_1) {
     continue label$32
    }
    break label$32;
   };
   $14_1 = $13_1;
  }
  HEAP32[($2_1 + 140 | 0) >> 2] = 0;
  HEAP8[($2_1 + 144 | 0) >> 0] = 1;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 132 | 0) >> 2] = 0;
  HEAP32[($2_1 + 136 | 0) >> 2] = i64toi32_i32$0;
  $67_1 = $2_1 + 63 | 0;
  $68_1 = 0;
  HEAP8[$67_1 >> 0] = $68_1;
  HEAP8[($67_1 + 1 | 0) >> 0] = $68_1 >>> 8 | 0;
  HEAP8[($67_1 + 2 | 0) >> 0] = $68_1 >>> 16 | 0;
  HEAP8[($67_1 + 3 | 0) >> 0] = $68_1 >>> 24 | 0;
  i64toi32_i32$1 = ($2_1 + 48 | 0) + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 48 | 0) >> 2] = 0;
  HEAP32[($2_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  label$33 : {
   label$34 : {
    if (($12_1 | 0) > (-1 | 0)) {
     break label$34
    }
    $10_1 = $12_1 + 1 | 0;
    $5_1 = Math_imul($12_1, 36) + 8 | 0;
    $3_1 = 0;
    label$35 : while (1) {
     $3_1 = $3_1 + $5_1 | 0;
     $7_1 = $3_1 + -4 | 0;
     label$36 : {
      $6_1 = $3_1 + 4 | 0;
      $8_1 = HEAP32[$6_1 >> 2] | 0;
      if (!$8_1) {
       break label$36
      }
      label$37 : {
       if (!(HEAPU8[($3_1 + 8 | 0) >> 0] | 0)) {
        break label$37
       }
       $80($8_1 | 0);
      }
      HEAP32[$6_1 >> 2] = 0;
     }
     HEAP32[$7_1 >> 2] = 0;
     HEAP32[$6_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP8[($3_1 + 8 | 0) >> 0] = 1;
     if (!$10_1) {
      break label$33
     }
     $5_1 = $5_1 + 36 | 0;
     $10_1 = $10_1 + 1 | 0;
     $3_1 = HEAP32[($2_1 + 140 | 0) >> 2] | 0;
     continue label$35;
    };
   }
   if (!$12_1) {
    break label$33
   }
   $182($2_1 + 128 | 0 | 0, $12_1 | 0);
   $5_1 = $2_1 + 48 | 0 | 3 | 0;
   $10_1 = 20;
   $6_1 = $12_1;
   label$38 : while (1) {
    $3_1 = (HEAP32[($2_1 + 140 | 0) >> 2] | 0) + $10_1 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAPU8[$5_1 >> 0] | 0 | ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$1 = HEAPU8[($5_1 + 4 | 0) >> 0] | 0 | ((HEAPU8[($5_1 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($5_1 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($5_1 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $411_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    $69_1 = $411_1;
    HEAP8[$3_1 >> 0] = $69_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $69_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $69_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $69_1 >>> 24 | 0;
    HEAP8[($3_1 + 4 | 0) >> 0] = i64toi32_i32$1;
    HEAP8[($3_1 + 5 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
    HEAP8[($3_1 + 6 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
    HEAP8[($3_1 + 7 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
    HEAP8[($3_1 + -4 | 0) >> 0] = 1;
    $7_1 = $3_1 + -16 | 0;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1 + 8 | 0;
    i64toi32_i32$1 = HEAPU8[i64toi32_i32$2 >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 4 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 5 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 6 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 7 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $421_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $3_1 + 8 | 0;
    $70_1 = $421_1;
    HEAP8[i64toi32_i32$1 >> 0] = $70_1;
    HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $70_1 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $70_1 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $70_1 >>> 24 | 0;
    HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
    HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
    HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
    HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
    HEAP32[($7_1 + 8 | 0) >> 2] = 0;
    $10_1 = $10_1 + 36 | 0;
    $6_1 = $6_1 + -1 | 0;
    if ($6_1) {
     continue label$38
    }
    break label$38;
   };
  }
  HEAP32[($2_1 + 132 | 0) >> 2] = $12_1;
  label$39 : {
   $7_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $9_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
   $10_1 = HEAP32[($2_1 + 156 | 0) >> 2] | 0;
   if (($9_1 | 0) >= ($10_1 | 0)) {
    break label$39
   }
   label$40 : {
    if ((HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) >= ($10_1 | 0)) {
     break label$40
    }
    label$41 : {
     label$42 : {
      if ($10_1) {
       break label$42
      }
      $4_1 = 0;
      $5_1 = $9_1;
      break label$41;
     }
     $4_1 = $79($10_1 << 4 | 0 | 0, 16 | 0) | 0;
     $5_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
    }
    label$43 : {
     if (($5_1 | 0) < (1 | 0)) {
      break label$43
     }
     $3_1 = 0;
     label$44 : while (1) {
      $6_1 = $4_1 + $3_1 | 0;
      $8_1 = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + $3_1 | 0;
      i64toi32_i32$2 = $8_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $464_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $6_1;
      HEAP32[i64toi32_i32$0 >> 2] = $464_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $469_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $6_1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $469_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $3_1 = $3_1 + 16 | 0;
      $5_1 = $5_1 + -1 | 0;
      if ($5_1) {
       continue label$44
      }
      break label$44;
     };
    }
    label$45 : {
     $3_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$45
     }
     label$46 : {
      if (!(HEAPU8[($7_1 + 20 | 0) >> 0] | 0)) {
       break label$46
      }
      $80($3_1 | 0);
     }
     HEAP32[($7_1 + 16 | 0) >> 2] = 0;
    }
    HEAP32[($7_1 + 16 | 0) >> 2] = $4_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = $10_1;
    HEAP8[($7_1 + 20 | 0) >> 0] = 1;
   }
   $3_1 = $9_1 << 4 | 0;
   $5_1 = $10_1 - $9_1 | 0;
   label$47 : while (1) {
    $6_1 = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) + $3_1 | 0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
    $503_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1;
    HEAP32[i64toi32_i32$0 >> 2] = $503_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = ($2_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $509_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $6_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $509_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $3_1 = $3_1 + 16 | 0;
    $5_1 = $5_1 + -1 | 0;
    if ($5_1) {
     continue label$47
    }
    break label$47;
   };
  }
  HEAP32[($7_1 + 8 | 0) >> 2] = $10_1;
  label$48 : {
   if (($10_1 | 0) < (1 | 0)) {
    break label$48
   }
   $3_1 = 0;
   label$49 : while (1) {
    $5_1 = (HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + $3_1 | 0;
    $6_1 = (HEAP32[($2_1 + 164 | 0) >> 2] | 0) + $3_1 | 0;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $531_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[i64toi32_i32$0 >> 2] = $531_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $536_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $536_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $3_1 = $3_1 + 16 | 0;
    $10_1 = $10_1 + -1 | 0;
    if ($10_1) {
     continue label$49
    }
    break label$49;
   };
  }
  label$50 : {
   if (($12_1 | 0) < (1 | 0)) {
    break label$50
   }
   $15_1 = 0;
   label$51 : while (1) {
    $4_1 = 0;
    $16_1 = (HEAP32[($2_1 + 184 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($2_1 + 204 | 0) >> 2] | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0, 12) | 0;
    $6_1 = $16_1;
    label$52 : while (1) {
     $17_1 = Math_imul($15_1, 36);
     $7_1 = (HEAP32[($2_1 + 140 | 0) >> 2] | 0) + $17_1 | 0;
     $8_1 = $7_1 + 4 | 0;
     $9_1 = HEAP32[(($6_1 + Math_imul(HEAP32[($6_1 + 4 | 0) >> 2] | 0, 12) | 0) + 8 | 0) >> 2] | 0;
     label$53 : {
      $5_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
      if (($5_1 | 0) != (HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0)) {
       break label$53
      }
      $1_1 = $5_1 ? $5_1 << 1 | 0 : 1;
      if (($5_1 | 0) >= ($1_1 | 0)) {
       break label$53
      }
      label$54 : {
       label$55 : {
        if ($1_1) {
         break label$55
        }
        $18_1 = 0;
        break label$54;
       }
       $18_1 = $79($1_1 << 2 | 0 | 0, 16 | 0) | 0;
       $5_1 = HEAP32[$8_1 >> 2] | 0;
      }
      $19_1 = $7_1 + 8 | 0;
      $20_1 = $7_1 + 12 | 0;
      $21_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
      label$56 : {
       label$57 : {
        label$58 : {
         if (($5_1 | 0) < (1 | 0)) {
          break label$58
         }
         $3_1 = $18_1;
         $10_1 = $21_1;
         label$59 : while (1) {
          HEAP32[$3_1 >> 2] = HEAP32[$10_1 >> 2] | 0;
          $3_1 = $3_1 + 4 | 0;
          $10_1 = $10_1 + 4 | 0;
          $5_1 = $5_1 + -1 | 0;
          if ($5_1) {
           continue label$59
          }
          break label$57;
         };
        }
        if (!$21_1) {
         break label$56
        }
       }
       label$60 : {
        if (!(HEAPU8[($7_1 + 16 | 0) >> 0] | 0)) {
         break label$60
        }
        $80($21_1 | 0);
       }
       HEAP32[$20_1 >> 2] = 0;
       $5_1 = HEAP32[$8_1 >> 2] | 0;
      }
      HEAP32[$20_1 >> 2] = $18_1;
      HEAP32[$19_1 >> 2] = $1_1;
      HEAP8[($7_1 + 16 | 0) >> 0] = 1;
     }
     HEAP32[((HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ($5_1 << 2 | 0) | 0) >> 2] = $9_1;
     HEAP32[$8_1 >> 2] = (HEAP32[$8_1 >> 2] | 0) + 1 | 0;
     label$61 : {
      if (($4_1 | 0) > (1 | 0)) {
       break label$61
      }
      $10_1 = HEAP32[($2_1 + 164 | 0) >> 2] | 0;
      $3_1 = $10_1 + ($9_1 << 4 | 0) | 0;
      $22_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
      $10_1 = $10_1 + ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) << 4 | 0) | 0;
      $23_1 = Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]);
      $24_1 = Math_fround(HEAPF32[$3_1 >> 2]);
      $25_1 = Math_fround(HEAPF32[$10_1 >> 2]);
      $11_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
      $26_1 = Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]);
      $3_1 = ($2_1 + 48 | 0) + ($4_1 << 4 | 0) | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = 0;
      $11_1 = Math_fround($26_1 - $11_1);
      $667_1 = $11_1;
      $24_1 = Math_fround($25_1 - $24_1);
      $22_1 = Math_fround($23_1 - $22_1);
      $11_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($24_1 * $24_1) + Math_fround($22_1 * $22_1)) + Math_fround($11_1 * $11_1)))));
      HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($667_1 * $11_1);
      HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($22_1 * $11_1);
      HEAPF32[$3_1 >> 2] = Math_fround($24_1 * $11_1);
      $4_1 = $4_1 + 1 | 0;
     }
     $3_1 = $6_1 + Math_imul(HEAP32[($6_1 + 4 | 0) >> 2] | 0, 12) | 0;
     $6_1 = $3_1 + Math_imul(HEAP32[$3_1 >> 2] | 0, 12) | 0;
     if (($6_1 | 0) != ($16_1 | 0)) {
      continue label$52
     }
     break label$52;
    };
    label$62 : {
     label$63 : {
      if (($4_1 | 0) != (2 | 0)) {
       break label$63
      }
      $3_1 = $14_1 + ($15_1 << 4 | 0) | 0;
      HEAP32[($3_1 + 12 | 0) >> 2] = 0;
      $24_1 = Math_fround(HEAPF32[($2_1 + 68 | 0) >> 2]);
      $22_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
      $23_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
      $25_1 = Math_fround(HEAPF32[($2_1 + 64 | 0) >> 2]);
      $11_1 = Math_fround(Math_fround($24_1 * $22_1) - Math_fround($23_1 * $25_1));
      $735_1 = $11_1;
      $738_1 = Math_fround($11_1 * $11_1);
      $26_1 = Math_fround(HEAPF32[($2_1 + 72 | 0) >> 2]);
      $743_1 = Math_fround($23_1 * $26_1);
      $23_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
      $11_1 = Math_fround($743_1 - Math_fround($23_1 * $24_1));
      $24_1 = Math_fround(Math_fround($23_1 * $25_1) - Math_fround($26_1 * $22_1));
      $22_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($738_1 + Math_fround(Math_fround($11_1 * $11_1) + Math_fround($24_1 * $24_1))))));
      HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($735_1 * $22_1);
      HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($24_1 * $22_1);
      $11_1 = Math_fround($11_1 * $22_1);
      HEAPF32[$3_1 >> 2] = $11_1;
      $10_1 = HEAP32[($2_1 + 140 | 0) >> 2] | 0;
      $5_1 = $10_1 + $17_1 | 0;
      HEAPF32[($5_1 + 20 | 0) >> 2] = $11_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
      HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      HEAP32[($5_1 + 32 | 0) >> 2] = 1900671690;
      break label$62;
     }
     $3_1 = $14_1 + ($15_1 << 4 | 0) | 0;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $3_1 + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $10_1 = HEAP32[($2_1 + 140 | 0) >> 2] | 0;
    }
    label$64 : {
     label$65 : {
      $8_1 = $10_1 + $17_1 | 0;
      $6_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
      if (($6_1 | 0) >= (1 | 0)) {
       break label$65
      }
      $11_1 = Math_fround(1000000015047466219876688.0e6);
      break label$64;
     }
     $3_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
     $10_1 = $14_1 + ($15_1 << 4 | 0) | 0;
     $22_1 = Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]);
     $23_1 = Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]);
     $25_1 = Math_fround(HEAPF32[$10_1 >> 2]);
     $7_1 = HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     $11_1 = Math_fround(1000000015047466219876688.0e6);
     $5_1 = 0;
     label$66 : while (1) {
      $10_1 = $7_1 + ((HEAP32[$3_1 >> 2] | 0) << 4 | 0) | 0;
      $24_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$10_1 >> 2]) * $25_1) + Math_fround(Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]) * $23_1)) + Math_fround(Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]) * $22_1));
      $11_1 = $11_1 > $24_1 ? $24_1 : $11_1;
      $3_1 = $3_1 + 4 | 0;
      $5_1 = $5_1 + 1 | 0;
      if (($5_1 | 0) < ($6_1 | 0)) {
       continue label$66
      }
      break label$66;
     };
    }
    HEAPF32[($8_1 + 32 | 0) >> 2] = Math_fround(-$11_1);
    $15_1 = $15_1 + 1 | 0;
    if (($15_1 | 0) != ($12_1 | 0)) {
     continue label$51
    }
    break label$51;
   };
  }
  label$67 : {
   label$68 : {
    if ((HEAP32[($2_1 + 132 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$68
    }
    $16_1 = 0;
    $19_1 = 0;
    $27_1 = 0;
    $5_1 = 0;
    label$69 : while (1) {
     label$70 : {
      if (($16_1 | 0) != ($5_1 | 0)) {
       break label$70
      }
      label$71 : {
       $5_1 = $16_1 ? $16_1 << 1 | 0 : 1;
       if (($16_1 | 0) < ($5_1 | 0)) {
        break label$71
       }
       $5_1 = $16_1;
       break label$70;
      }
      label$72 : {
       label$73 : {
        if ($5_1) {
         break label$73
        }
        $6_1 = 0;
        break label$72;
       }
       $6_1 = $79($5_1 << 2 | 0 | 0, 16 | 0) | 0;
      }
      label$74 : {
       label$75 : {
        label$76 : {
         if (!$16_1) {
          break label$76
         }
         $3_1 = $6_1;
         $10_1 = $16_1;
         label$77 : while (1) {
          HEAP32[$3_1 >> 2] = HEAP32[$19_1 >> 2] | 0;
          $3_1 = $3_1 + 4 | 0;
          $19_1 = $19_1 + 4 | 0;
          $10_1 = $10_1 + -1 | 0;
          if ($10_1) {
           continue label$77
          }
          break label$75;
         };
        }
        if ($19_1) {
         break label$75
        }
        $5_1 = 1;
        break label$74;
       }
       $80($27_1 | 0);
      }
      $27_1 = $6_1;
      $19_1 = $6_1;
     }
     HEAP32[($19_1 + ($16_1 << 2 | 0) | 0) >> 2] = $16_1;
     $16_1 = $16_1 + 1 | 0;
     if (($16_1 | 0) < (HEAP32[($2_1 + 132 | 0) >> 2] | 0 | 0)) {
      continue label$69
     }
     break label$69;
    };
    $28_1 = ($2_1 + 48 | 0) + 20 | 0;
    $29_1 = ($2_1 + 32 | 0) + 8 | 0;
    label$78 : while (1) {
     $5_1 = $16_1 + -1 | 0;
     $3_1 = HEAP32[($19_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
     $15_1 = $79(4 | 0, 16 | 0) | 0;
     HEAP32[$15_1 >> 2] = $3_1;
     label$79 : {
      label$80 : {
       label$81 : {
        if (($5_1 | 0) >= (1 | 0)) {
         break label$81
        }
        $21_1 = 1;
        $12_1 = $15_1;
        $16_1 = $5_1;
        break label$80;
       }
       $10_1 = HEAP32[($2_1 + 140 | 0) >> 2] | 0;
       $3_1 = $10_1 + Math_imul($3_1, 36) | 0;
       $11_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
       $24_1 = Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]);
       $22_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
       $6_1 = $16_1 + -2 | 0;
       $3_1 = 1;
       $16_1 = $5_1;
       $8_1 = $15_1;
       $21_1 = 1;
       label$82 : while (1) {
        label$83 : {
         label$84 : {
          $5_1 = HEAP32[($19_1 + ($6_1 << 2 | 0) | 0) >> 2] | 0;
          $10_1 = $10_1 + Math_imul($5_1, 36) | 0;
          if (!(Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2])) + Math_fround($22_1 * Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]))) + Math_fround($24_1 * Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]))) > Math_fround(.9990000128746033) ^ 1 | 0)) {
           break label$84
          }
          $7_1 = $3_1;
          $12_1 = $8_1;
          break label$83;
         }
         label$85 : {
          label$86 : {
           if (($21_1 | 0) != ($3_1 | 0)) {
            break label$86
           }
           $7_1 = $3_1 ? $3_1 << 1 | 0 : 1;
           if (($3_1 | 0) >= ($7_1 | 0)) {
            break label$86
           }
           label$87 : {
            label$88 : {
             if ($7_1) {
              break label$88
             }
             $12_1 = 0;
             break label$87;
            }
            $12_1 = $79($7_1 << 2 | 0 | 0, 16 | 0) | 0;
           }
           label$89 : {
            label$90 : {
             label$91 : {
              if (($3_1 | 0) < (1 | 0)) {
               break label$91
              }
              $10_1 = $12_1;
              label$92 : while (1) {
               HEAP32[$10_1 >> 2] = HEAP32[$15_1 >> 2] | 0;
               $10_1 = $10_1 + 4 | 0;
               $15_1 = $15_1 + 4 | 0;
               $3_1 = $3_1 + -1 | 0;
               if ($3_1) {
                continue label$92
               }
               break label$90;
              };
             }
             if (!$15_1) {
              break label$89
             }
            }
            $80($8_1 | 0);
           }
           $15_1 = $12_1;
           break label$85;
          }
          $7_1 = $3_1;
          $12_1 = $8_1;
         }
         HEAP32[($15_1 + ($21_1 << 2 | 0) | 0) >> 2] = $5_1;
         $21_1 = $21_1 + 1 | 0;
         if (($16_1 | 0) < (1 | 0)) {
          break label$83
         }
         $10_1 = 0;
         $3_1 = $19_1;
         label$93 : {
          label$94 : while (1) {
           if ((HEAP32[$3_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
            break label$93
           }
           $3_1 = $3_1 + 4 | 0;
           $10_1 = $10_1 + 1 | 0;
           if (($16_1 | 0) != ($10_1 | 0)) {
            continue label$94
           }
           break label$83;
          };
         }
         if (($16_1 | 0) <= ($10_1 | 0)) {
          break label$83
         }
         $16_1 = $16_1 + -1 | 0;
         $10_1 = $19_1 + ($16_1 << 2 | 0) | 0;
         HEAP32[$3_1 >> 2] = HEAP32[$10_1 >> 2] | 0;
         HEAP32[$10_1 >> 2] = $5_1;
        }
        label$95 : {
         if (($6_1 | 0) < (1 | 0)) {
          break label$95
         }
         $6_1 = $6_1 + -1 | 0;
         $10_1 = HEAP32[($2_1 + 140 | 0) >> 2] | 0;
         $8_1 = $12_1;
         $3_1 = $7_1;
         continue label$82;
        }
        break label$82;
       };
       label$96 : {
        if (($21_1 | 0) <= (1 | 0)) {
         break label$96
        }
        $5_1 = 0;
        HEAP32[($2_1 + 116 | 0) >> 2] = 0;
        HEAP8[($2_1 + 120 | 0) >> 0] = 1;
        i64toi32_i32$1 = $2_1;
        i64toi32_i32$0 = 0;
        HEAP32[($2_1 + 108 | 0) >> 2] = 0;
        HEAP32[($2_1 + 112 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = $29_1;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = $2_1;
        i64toi32_i32$0 = 0;
        HEAP32[($2_1 + 32 | 0) >> 2] = 0;
        HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
        $11_1 = Math_fround(0.0);
        $7_1 = 0;
        $24_1 = Math_fround(0.0);
        $22_1 = Math_fround(0.0);
        $30_1 = 0;
        label$97 : while (1) {
         $3_1 = (HEAP32[($2_1 + 140 | 0) >> 2] | 0) + Math_imul(HEAP32[($15_1 + ($30_1 << 2 | 0) | 0) >> 2] | 0, 36) | 0;
         $23_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
         $25_1 = Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]);
         HEAPF32[($2_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]) + $22_1);
         HEAPF32[($2_1 + 40 | 0) >> 2] = Math_fround($25_1 + $11_1);
         HEAPF32[($2_1 + 36 | 0) >> 2] = Math_fround($23_1 + $24_1);
         label$98 : {
          $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
          if (($4_1 | 0) < (1 | 0)) {
           break label$98
          }
          $17_1 = $3_1 + 4 | 0;
          $1_1 = $3_1 + 12 | 0;
          $8_1 = 0;
          label$99 : while (1) {
           $9_1 = ($2_1 + 8 | 0) + 8 | 0;
           $6_1 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
           $3_1 = (HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) + ($6_1 << 4 | 0) | 0;
           i64toi32_i32$2 = $3_1 + 8 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $1121_1 = i64toi32_i32$0;
           i64toi32_i32$0 = $9_1;
           HEAP32[i64toi32_i32$0 >> 2] = $1121_1;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$2 = $3_1;
           i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
           $1124_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $2_1;
           HEAP32[($2_1 + 8 | 0) >> 2] = $1124_1;
           HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$0;
           label$100 : {
            label$101 : {
             if (($7_1 | 0) < (1 | 0)) {
              break label$101
             }
             $3_1 = (HEAP32[($2_1 + 116 | 0) >> 2] | 0) + 20 | 0;
             $10_1 = 0;
             label$102 : while (1) {
              if ((HEAP32[$3_1 >> 2] | 0 | 0) == ($6_1 | 0)) {
               break label$100
              }
              $3_1 = $3_1 + 24 | 0;
              $10_1 = $10_1 + 1 | 0;
              if (($10_1 | 0) < ($5_1 | 0)) {
               continue label$102
              }
              break label$102;
             };
             $7_1 = $5_1;
            }
            $4_1 = ($2_1 + 48 | 0) + 8 | 0;
            i64toi32_i32$2 = $9_1;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $1147_1 = i64toi32_i32$0;
            i64toi32_i32$0 = $4_1;
            HEAP32[i64toi32_i32$0 >> 2] = $1147_1;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$2 = $2_1;
            i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
            $1150_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $2_1;
            HEAP32[($2_1 + 48 | 0) >> 2] = $1150_1;
            HEAP32[($2_1 + 52 | 0) >> 2] = i64toi32_i32$0;
            label$103 : {
             label$104 : {
              if (($7_1 | 0) == (HEAP32[($2_1 + 112 | 0) >> 2] | 0 | 0)) {
               break label$104
              }
              $5_1 = $7_1;
              break label$103;
             }
             label$105 : {
              $9_1 = $7_1 ? $7_1 << 1 | 0 : 1;
              if (($7_1 | 0) < ($9_1 | 0)) {
               break label$105
              }
              $5_1 = $7_1;
              break label$103;
             }
             label$106 : {
              label$107 : {
               if ($9_1) {
                break label$107
               }
               $20_1 = 0;
               break label$106;
              }
              $20_1 = $79(Math_imul($9_1, 24) | 0, 16 | 0) | 0;
              $5_1 = HEAP32[($2_1 + 108 | 0) >> 2] | 0;
              $7_1 = $5_1;
             }
             $18_1 = HEAP32[($2_1 + 116 | 0) >> 2] | 0;
             label$108 : {
              label$109 : {
               label$110 : {
                if (($7_1 | 0) < (1 | 0)) {
                 break label$110
                }
                $3_1 = $20_1;
                $10_1 = $18_1;
                label$111 : while (1) {
                 i64toi32_i32$2 = $10_1;
                 i64toi32_i32$0 = HEAP32[$10_1 >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
                 $1179_1 = i64toi32_i32$0;
                 i64toi32_i32$0 = $3_1;
                 HEAP32[$3_1 >> 2] = $1179_1;
                 HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
                 i64toi32_i32$2 = $10_1 + 16 | 0;
                 i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                 i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                 $1184_1 = i64toi32_i32$1;
                 i64toi32_i32$1 = $3_1 + 16 | 0;
                 HEAP32[i64toi32_i32$1 >> 2] = $1184_1;
                 HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                 i64toi32_i32$2 = $10_1 + 8 | 0;
                 i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                 $1189_1 = i64toi32_i32$0;
                 i64toi32_i32$0 = $3_1 + 8 | 0;
                 HEAP32[i64toi32_i32$0 >> 2] = $1189_1;
                 HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                 $3_1 = $3_1 + 24 | 0;
                 $10_1 = $10_1 + 24 | 0;
                 $7_1 = $7_1 + -1 | 0;
                 if ($7_1) {
                  continue label$111
                 }
                 break label$109;
                };
               }
               if (!$18_1) {
                break label$108
               }
              }
              label$112 : {
               if (!(HEAPU8[($2_1 + 120 | 0) >> 0] | 0)) {
                break label$112
               }
               $80($18_1 | 0);
               $5_1 = HEAP32[($2_1 + 108 | 0) >> 2] | 0;
              }
              HEAP32[($2_1 + 116 | 0) >> 2] = 0;
             }
             HEAP32[($2_1 + 116 | 0) >> 2] = $20_1;
             HEAP8[($2_1 + 120 | 0) >> 0] = 1;
             HEAP32[($2_1 + 112 | 0) >> 2] = $9_1;
            }
            $3_1 = (HEAP32[($2_1 + 116 | 0) >> 2] | 0) + Math_imul($5_1, 24) | 0;
            i64toi32_i32$2 = $2_1;
            i64toi32_i32$1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
            i64toi32_i32$0 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
            $1218_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $3_1;
            HEAP32[$3_1 >> 2] = $1218_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
            HEAP32[($3_1 + 20 | 0) >> 2] = $6_1;
            HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[(($2_1 + 48 | 0) + 16 | 0) >> 2] | 0;
            i64toi32_i32$2 = $4_1;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $1230_1 = i64toi32_i32$0;
            i64toi32_i32$0 = $3_1 + 8 | 0;
            HEAP32[i64toi32_i32$0 >> 2] = $1230_1;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            $5_1 = (HEAP32[($2_1 + 108 | 0) >> 2] | 0) + 1 | 0;
            HEAP32[($2_1 + 108 | 0) >> 2] = $5_1;
            $4_1 = HEAP32[$17_1 >> 2] | 0;
           }
           $7_1 = $5_1;
           $8_1 = $8_1 + 1 | 0;
           if (($8_1 | 0) < ($4_1 | 0)) {
            continue label$99
           }
           break label$99;
          };
         }
         $11_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
         $24_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
         $22_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
         $30_1 = $30_1 + 1 | 0;
         if (($30_1 | 0) != ($21_1 | 0)) {
          continue label$97
         }
         break label$97;
        };
        i64toi32_i32$0 = $2_1;
        i64toi32_i32$1 = 0;
        HEAP32[($2_1 + 52 | 0) >> 2] = 0;
        HEAP32[($2_1 + 56 | 0) >> 2] = i64toi32_i32$1;
        $3_1 = (HEAP32[($2_1 + 140 | 0) >> 2] | 0) + Math_imul(HEAP32[$15_1 >> 2] | 0, 36) | 0;
        HEAP32[($2_1 + 68 | 0) >> 2] = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
        HEAP32[($2_1 + 72 | 0) >> 2] = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
        HEAP32[($2_1 + 76 | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        HEAP32[($2_1 + 60 | 0) >> 2] = 0;
        HEAP8[($2_1 + 64 | 0) >> 0] = 1;
        HEAP32[($2_1 + 80 | 0) >> 2] = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
        $23_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($22_1 * $22_1) + Math_fround($24_1 * $24_1)) + Math_fround($11_1 * $11_1)))));
        HEAPF32[($2_1 + 40 | 0) >> 2] = Math_fround($11_1 * $23_1);
        HEAPF32[($2_1 + 36 | 0) >> 2] = Math_fround($24_1 * $23_1);
        HEAPF32[($2_1 + 32 | 0) >> 2] = Math_fround($22_1 * $23_1);
        HEAP32[($2_1 + 20 | 0) >> 2] = 0;
        HEAP8[($2_1 + 24 | 0) >> 0] = 1;
        i64toi32_i32$0 = $2_1;
        i64toi32_i32$1 = 0;
        HEAP32[($2_1 + 12 | 0) >> 2] = 0;
        HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$1;
        $183($2_1 + 104 | 0 | 0, $2_1 + 8 | 0 | 0, $2_1 + 32 | 0 | 0);
        label$113 : {
         label$114 : {
          if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) > (0 | 0)) {
           break label$114
          }
          $6_1 = HEAP32[($2_1 + 108 | 0) >> 2] | 0;
          break label$113;
         }
         $8_1 = 0;
         $5_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
         label$115 : while (1) {
          $7_1 = Math_imul($8_1, 24);
          $6_1 = ((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $7_1 | 0) + 20 | 0;
          label$116 : {
           if (($5_1 | 0) != (HEAP32[($2_1 + 56 | 0) >> 2] | 0 | 0)) {
            break label$116
           }
           $4_1 = $5_1 ? $5_1 << 1 | 0 : 1;
           if (($5_1 | 0) >= ($4_1 | 0)) {
            break label$116
           }
           label$117 : {
            label$118 : {
             if ($4_1) {
              break label$118
             }
             $9_1 = 0;
             break label$117;
            }
            $9_1 = $79($4_1 << 2 | 0 | 0, 16 | 0) | 0;
            $5_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
           }
           $1_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
           label$119 : {
            label$120 : {
             label$121 : {
              if (($5_1 | 0) < (1 | 0)) {
               break label$121
              }
              $3_1 = $9_1;
              $10_1 = $1_1;
              label$122 : while (1) {
               HEAP32[$3_1 >> 2] = HEAP32[$10_1 >> 2] | 0;
               $3_1 = $3_1 + 4 | 0;
               $10_1 = $10_1 + 4 | 0;
               $5_1 = $5_1 + -1 | 0;
               if ($5_1) {
                continue label$122
               }
               break label$120;
              };
             }
             if (!$1_1) {
              break label$119
             }
            }
            label$123 : {
             if (!(HEAPU8[($2_1 + 64 | 0) >> 0] | 0)) {
              break label$123
             }
             $80($1_1 | 0);
            }
            HEAP32[($2_1 + 60 | 0) >> 2] = 0;
            $5_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
           }
           HEAP32[($2_1 + 60 | 0) >> 2] = $9_1;
           HEAP8[($2_1 + 64 | 0) >> 0] = 1;
           HEAP32[($2_1 + 56 | 0) >> 2] = $4_1;
          }
          HEAP32[((HEAP32[($2_1 + 60 | 0) >> 2] | 0) + ($5_1 << 2 | 0) | 0) >> 2] = HEAP32[$6_1 >> 2] | 0;
          $5_1 = (HEAP32[($2_1 + 52 | 0) >> 2] | 0) + 1 | 0;
          HEAP32[($2_1 + 52 | 0) >> 2] = $5_1;
          label$124 : {
           $6_1 = HEAP32[($2_1 + 108 | 0) >> 2] | 0;
           if (($6_1 | 0) < (1 | 0)) {
            break label$124
           }
           $3_1 = (HEAP32[($2_1 + 116 | 0) >> 2] | 0) + 20 | 0;
           $7_1 = HEAP32[(((HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $7_1 | 0) + 20 | 0) >> 2] | 0;
           $10_1 = 0;
           label$125 : {
            label$126 : while (1) {
             if ((HEAP32[$3_1 >> 2] | 0 | 0) == ($7_1 | 0)) {
              break label$125
             }
             $3_1 = $3_1 + 24 | 0;
             $10_1 = $10_1 + 1 | 0;
             if (($10_1 | 0) >= ($6_1 | 0)) {
              break label$124
             }
             continue label$126;
            };
           }
           HEAP32[$3_1 >> 2] = -1;
          }
          $8_1 = $8_1 + 1 | 0;
          if (($8_1 | 0) < (HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0)) {
           continue label$115
          }
          break label$115;
         };
        }
        label$127 : {
         if (($6_1 | 0) < (1 | 0)) {
          break label$127
         }
         $4_1 = HEAP32[($2_1 + 132 | 0) >> 2] | 0;
         if (($4_1 | 0) < (1 | 0)) {
          break label$127
         }
         $1_1 = HEAP32[($2_1 + 140 | 0) >> 2] | 0;
         $17_1 = HEAP32[($2_1 + 116 | 0) >> 2] | 0;
         $9_1 = 0;
         label$128 : while (1) {
          label$129 : {
           $7_1 = HEAP32[(($17_1 + Math_imul($9_1, 24) | 0) + 20 | 0) >> 2] | 0;
           if (($7_1 | 0) == (-1 | 0)) {
            break label$129
           }
           label$130 : {
            label$131 : {
             if (($21_1 | 0) > (0 | 0)) {
              break label$131
             }
             $8_1 = 0;
             label$132 : while (1) {
              label$133 : {
               $3_1 = $1_1 + Math_imul($8_1, 36) | 0;
               $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
               if (($5_1 | 0) <= (0 | 0)) {
                break label$133
               }
               $3_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
               $10_1 = 0;
               label$134 : while (1) {
                if ((HEAP32[$3_1 >> 2] | 0 | 0) == ($7_1 | 0)) {
                 break label$130
                }
                $3_1 = $3_1 + 4 | 0;
                $10_1 = $10_1 + 1 | 0;
                if (($10_1 | 0) < ($5_1 | 0)) {
                 continue label$134
                }
                break label$134;
               };
              }
              $8_1 = $8_1 + 1 | 0;
              if (($8_1 | 0) == ($4_1 | 0)) {
               break label$129
              }
              continue label$132;
             };
            }
            $5_1 = 0;
            label$135 : while (1) {
             $3_1 = $15_1;
             $10_1 = $21_1;
             label$136 : {
              label$137 : while (1) {
               if ((HEAP32[$3_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
                break label$136
               }
               $3_1 = $3_1 + 4 | 0;
               $10_1 = $10_1 + -1 | 0;
               if ($10_1) {
                continue label$137
               }
               break label$137;
              };
              $3_1 = $1_1 + Math_imul($5_1, 36) | 0;
              $8_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
              if (($8_1 | 0) < (1 | 0)) {
               break label$136
              }
              $3_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
              $10_1 = 0;
              label$138 : while (1) {
               if ((HEAP32[$3_1 >> 2] | 0 | 0) == ($7_1 | 0)) {
                break label$130
               }
               $3_1 = $3_1 + 4 | 0;
               $10_1 = $10_1 + 1 | 0;
               if (($10_1 | 0) < ($8_1 | 0)) {
                continue label$138
               }
               break label$138;
              };
             }
             $5_1 = $5_1 + 1 | 0;
             if (($5_1 | 0) == ($4_1 | 0)) {
              break label$129
             }
             continue label$135;
            };
           }
           label$139 : {
            $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
            if (!$3_1) {
             break label$139
            }
            label$140 : {
             if (!(HEAPU8[($2_1 + 24 | 0) >> 0] | 0)) {
              break label$140
             }
             $80($3_1 | 0);
            }
            HEAP32[($2_1 + 20 | 0) >> 2] = 0;
           }
           label$141 : {
            $3_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
            if (!$3_1) {
             break label$141
            }
            label$142 : {
             if (!(HEAPU8[($2_1 + 64 | 0) >> 0] | 0)) {
              break label$142
             }
             $80($3_1 | 0);
            }
            HEAP32[($2_1 + 60 | 0) >> 2] = 0;
           }
           $3_1 = HEAP32[($2_1 + 116 | 0) >> 2] | 0;
           if (!$3_1) {
            break label$96
           }
           label$143 : {
            if (!(HEAPU8[($2_1 + 120 | 0) >> 0] | 0)) {
             break label$143
            }
            $80($3_1 | 0);
           }
           HEAP32[($2_1 + 116 | 0) >> 2] = 0;
           break label$96;
          }
          $9_1 = $9_1 + 1 | 0;
          if (($9_1 | 0) < ($6_1 | 0)) {
           continue label$128
          }
          break label$128;
         };
        }
        $184((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 24 | 0 | 0, $2_1 + 48 | 0 | 0);
        label$144 : {
         $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
         if (!$3_1) {
          break label$144
         }
         label$145 : {
          if (!(HEAPU8[($2_1 + 24 | 0) >> 0] | 0)) {
           break label$145
          }
          $80($3_1 | 0);
         }
         HEAP32[($2_1 + 20 | 0) >> 2] = 0;
        }
        label$146 : {
         $3_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
         if (!$3_1) {
          break label$146
         }
         label$147 : {
          if (!(HEAPU8[($2_1 + 64 | 0) >> 0] | 0)) {
           break label$147
          }
          $80($3_1 | 0);
         }
         HEAP32[($2_1 + 60 | 0) >> 2] = 0;
        }
        $3_1 = HEAP32[($2_1 + 116 | 0) >> 2] | 0;
        if (!$3_1) {
         break label$79
        }
        label$148 : {
         if (!(HEAPU8[($2_1 + 120 | 0) >> 0] | 0)) {
          break label$148
         }
         $80($3_1 | 0);
        }
        HEAP32[($2_1 + 116 | 0) >> 2] = 0;
        break label$79;
       }
       if (($21_1 | 0) < (1 | 0)) {
        break label$79
       }
      }
      $8_1 = 0;
      label$149 : while (1) {
       $3_1 = HEAP32[($15_1 + ($8_1 << 2 | 0) | 0) >> 2] | 0;
       i64toi32_i32$0 = $2_1;
       i64toi32_i32$1 = 0;
       HEAP32[($2_1 + 52 | 0) >> 2] = 0;
       HEAP32[($2_1 + 56 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($2_1 + 60 | 0) >> 2] = 0;
       $7_1 = (HEAP32[($2_1 + 140 | 0) >> 2] | 0) + Math_imul($3_1, 36) | 0;
       $5_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
       HEAP8[($2_1 + 64 | 0) >> 0] = 1;
       label$150 : {
        label$151 : {
         if (($5_1 | 0) < (1 | 0)) {
          break label$151
         }
         $1_1 = $5_1 << 2 | 0;
         $4_1 = $79($1_1 | 0, 16 | 0) | 0;
         $9_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
         label$152 : {
          label$153 : {
           label$154 : {
            $6_1 = HEAP32[($2_1 + 52 | 0) >> 2] | 0;
            if (($6_1 | 0) < (1 | 0)) {
             break label$154
            }
            $3_1 = $4_1;
            $10_1 = $9_1;
            label$155 : while (1) {
             HEAP32[$3_1 >> 2] = HEAP32[$10_1 >> 2] | 0;
             $3_1 = $3_1 + 4 | 0;
             $10_1 = $10_1 + 4 | 0;
             $6_1 = $6_1 + -1 | 0;
             if ($6_1) {
              continue label$155
             }
             break label$153;
            };
           }
           if (!$9_1) {
            break label$152
           }
          }
          if (!(HEAPU8[($2_1 + 64 | 0) >> 0] | 0)) {
           break label$152
          }
          $80($9_1 | 0);
         }
         HEAP32[($2_1 + 60 | 0) >> 2] = $4_1;
         HEAP8[($2_1 + 64 | 0) >> 0] = 1;
         HEAP32[($2_1 + 56 | 0) >> 2] = $5_1;
         $17($4_1 | 0, 0 | 0, $1_1 | 0) | 0;
         HEAP32[($2_1 + 52 | 0) >> 2] = $5_1;
         $3_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
         $10_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
         label$156 : while (1) {
          HEAP32[$10_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
          $10_1 = $10_1 + 4 | 0;
          $3_1 = $3_1 + 4 | 0;
          $5_1 = $5_1 + -1 | 0;
          if ($5_1) {
           continue label$156
          }
          break label$150;
         };
        }
        HEAP32[($2_1 + 52 | 0) >> 2] = $5_1;
       }
       i64toi32_i32$2 = $7_1;
       i64toi32_i32$1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
       $1637 = i64toi32_i32$1;
       i64toi32_i32$1 = $28_1;
       HEAP32[i64toi32_i32$1 >> 2] = $1637;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $7_1 + 28 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1642 = i64toi32_i32$0;
       i64toi32_i32$0 = $28_1 + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $1642;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $184((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + 24 | 0 | 0, $2_1 + 48 | 0 | 0);
       label$157 : {
        $3_1 = HEAP32[($2_1 + 60 | 0) >> 2] | 0;
        if (!$3_1) {
         break label$157
        }
        label$158 : {
         if (!(HEAPU8[($2_1 + 64 | 0) >> 0] | 0)) {
          break label$158
         }
         $80($3_1 | 0);
        }
        HEAP32[($2_1 + 60 | 0) >> 2] = 0;
       }
       $8_1 = $8_1 + 1 | 0;
       if (($8_1 | 0) != ($21_1 | 0)) {
        continue label$149
       }
       break label$149;
      };
     }
     label$159 : {
      if (!$15_1) {
       break label$159
      }
      $80($12_1 | 0);
     }
     if ($16_1) {
      continue label$78
     }
     break label$78;
    };
    $154(HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0);
    if (!$19_1) {
     break label$67
    }
    $80($27_1 | 0);
    break label$67;
   }
   $154(HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0);
  }
  label$160 : {
   $6_1 = HEAP32[($2_1 + 132 | 0) >> 2] | 0;
   if (($6_1 | 0) < (1 | 0)) {
    break label$160
   }
   $10_1 = 8;
   label$161 : while (1) {
    $3_1 = (HEAP32[($2_1 + 140 | 0) >> 2] | 0) + $10_1 | 0;
    $7_1 = $3_1 + -4 | 0;
    label$162 : {
     $5_1 = $3_1 + 4 | 0;
     $8_1 = HEAP32[$5_1 >> 2] | 0;
     if (!$8_1) {
      break label$162
     }
     label$163 : {
      if (!(HEAPU8[($3_1 + 8 | 0) >> 0] | 0)) {
       break label$163
      }
      $80($8_1 | 0);
     }
     HEAP32[$5_1 >> 2] = 0;
    }
    HEAP32[$7_1 >> 2] = 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$3_1 >> 2] = 0;
    HEAP8[($3_1 + 8 | 0) >> 0] = 1;
    $10_1 = $10_1 + 36 | 0;
    $6_1 = $6_1 + -1 | 0;
    if ($6_1) {
     continue label$161
    }
    break label$161;
   };
  }
  label$164 : {
   $3_1 = HEAP32[($2_1 + 140 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$164
   }
   label$165 : {
    if (!(HEAPU8[($2_1 + 144 | 0) >> 0] | 0)) {
     break label$165
    }
    $80($3_1 | 0);
   }
   HEAP32[($2_1 + 140 | 0) >> 2] = 0;
  }
  label$166 : {
   if (!$14_1) {
    break label$166
   }
   $80($13_1 | 0);
  }
  label$167 : {
   $3_1 = HEAP32[($2_1 + 204 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$167
   }
   label$168 : {
    if (!(HEAPU8[($2_1 + 208 | 0) >> 0] | 0)) {
     break label$168
    }
    $80($3_1 | 0);
   }
   HEAP32[($2_1 + 204 | 0) >> 2] = 0;
  }
  HEAP32[($2_1 + 204 | 0) >> 2] = 0;
  HEAP8[($2_1 + 208 | 0) >> 0] = 1;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$1 = 0;
  HEAP32[($2_1 + 196 | 0) >> 2] = 0;
  HEAP32[($2_1 + 200 | 0) >> 2] = i64toi32_i32$1;
  label$169 : {
   $3_1 = HEAP32[($2_1 + 184 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$169
   }
   label$170 : {
    if (!(HEAPU8[($2_1 + 188 | 0) >> 0] | 0)) {
     break label$170
    }
    $80($3_1 | 0);
   }
   HEAP32[($2_1 + 184 | 0) >> 2] = 0;
  }
  HEAP32[($2_1 + 184 | 0) >> 2] = 0;
  HEAP8[($2_1 + 188 | 0) >> 0] = 1;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$1 = 0;
  HEAP32[($2_1 + 176 | 0) >> 2] = 0;
  HEAP32[($2_1 + 180 | 0) >> 2] = i64toi32_i32$1;
  label$171 : {
   $3_1 = HEAP32[($2_1 + 164 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$171
   }
   label$172 : {
    if (!(HEAPU8[($2_1 + 168 | 0) >> 0] | 0)) {
     break label$172
    }
    $80($3_1 | 0);
   }
   HEAP32[($2_1 + 164 | 0) >> 2] = 0;
  }
  label$173 : {
   $3_1 = HEAP32[($2_1 + 228 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$173
   }
   label$174 : {
    if (!(HEAPU8[($2_1 + 232 | 0) >> 0] | 0)) {
     break label$174
    }
    $80($3_1 | 0);
   }
   HEAP32[($2_1 + 228 | 0) >> 2] = 0;
  }
  global$0 = $2_1 + 240 | 0;
  return 1 | 0;
 }
 
 function $182($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $6_1 = 0, $9_1 = 0, $17_1 = 0, $8_1 = 0, $16_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $2_1 = 0, $7_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $11_1 = 0, $12_1 = 0, $10_1 = 0, $110_1 = 0, $115_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($1_1) {
      break label$3
     }
     $2_1 = 0;
     break label$2;
    }
    $2_1 = $79(Math_imul($1_1, 36) | 0, 16 | 0) | 0;
   }
   label$4 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($3_1 | 0) < (1 | 0)) {
     break label$4
    }
    $4_1 = 0;
    label$5 : while (1) {
     $5_1 = Math_imul($4_1, 36);
     $6_1 = $2_1 + $5_1 | 0;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$0 = 0;
     HEAP32[($6_1 + 4 | 0) >> 2] = 0;
     HEAP32[($6_1 + 8 | 0) >> 2] = i64toi32_i32$0;
     HEAP8[($6_1 + 16 | 0) >> 0] = 1;
     HEAP32[($6_1 + 12 | 0) >> 2] = 0;
     $7_1 = $6_1 + 4 | 0;
     label$6 : {
      label$7 : {
       $8_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $5_1 | 0;
       $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
       if (($9_1 | 0) < (1 | 0)) {
        break label$7
       }
       $10_1 = $6_1 + 8 | 0;
       $11_1 = $6_1 + 16 | 0;
       $12_1 = $9_1 << 2 | 0;
       $13_1 = $79($12_1 | 0, 16 | 0) | 0;
       $14_1 = $6_1 + 12 | 0;
       $15_1 = HEAP32[$14_1 >> 2] | 0;
       label$8 : {
        label$9 : {
         label$10 : {
          $16_1 = HEAP32[$7_1 >> 2] | 0;
          if (($16_1 | 0) < (1 | 0)) {
           break label$10
          }
          $5_1 = $13_1;
          $17_1 = $15_1;
          label$11 : while (1) {
           HEAP32[$5_1 >> 2] = HEAP32[$17_1 >> 2] | 0;
           $5_1 = $5_1 + 4 | 0;
           $17_1 = $17_1 + 4 | 0;
           $16_1 = $16_1 + -1 | 0;
           if ($16_1) {
            continue label$11
           }
           break label$9;
          };
         }
         if (!$15_1) {
          break label$8
         }
        }
        if (!(HEAPU8[$11_1 >> 0] | 0)) {
         break label$8
        }
        $80($15_1 | 0);
       }
       HEAP32[$14_1 >> 2] = $13_1;
       HEAP8[$11_1 >> 0] = 1;
       HEAP32[$10_1 >> 2] = $9_1;
       $17($13_1 | 0, 0 | 0, $12_1 | 0) | 0;
       HEAP32[$7_1 >> 2] = $9_1;
       $5_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
       $17_1 = HEAP32[$14_1 >> 2] | 0;
       label$12 : while (1) {
        HEAP32[$17_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
        $17_1 = $17_1 + 4 | 0;
        $5_1 = $5_1 + 4 | 0;
        $9_1 = $9_1 + -1 | 0;
        if ($9_1) {
         continue label$12
        }
        break label$6;
       };
      }
      HEAP32[$7_1 >> 2] = $9_1;
     }
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$0 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
     $110_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $6_1;
     HEAP32[($6_1 + 20 | 0) >> 2] = $110_1;
     HEAP32[($6_1 + 24 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $8_1 + 28 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $115_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $6_1 + 28 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $115_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != ($3_1 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $16_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($16_1 | 0) < (1 | 0)) {
     break label$4
    }
    $17_1 = 8;
    label$13 : while (1) {
     $5_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $17_1 | 0;
     $6_1 = $5_1 + -4 | 0;
     label$14 : {
      $9_1 = $5_1 + 4 | 0;
      $8_1 = HEAP32[$9_1 >> 2] | 0;
      if (!$8_1) {
       break label$14
      }
      label$15 : {
       if (!(HEAPU8[($5_1 + 8 | 0) >> 0] | 0)) {
        break label$15
       }
       $80($8_1 | 0);
      }
      HEAP32[$9_1 >> 2] = 0;
     }
     HEAP32[$6_1 >> 2] = 0;
     HEAP32[$9_1 >> 2] = 0;
     HEAP32[$5_1 >> 2] = 0;
     HEAP8[($5_1 + 8 | 0) >> 0] = 1;
     $17_1 = $17_1 + 36 | 0;
     $16_1 = $16_1 + -1 | 0;
     if ($16_1) {
      continue label$13
     }
     break label$13;
    };
   }
   label$16 : {
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$16
    }
    label$17 : {
     if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
      break label$17
     }
     $80($5_1 | 0);
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
   HEAP8[($0_1 + 16 | 0) >> 0] = 1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $183($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $13_1 = 0, $16_1 = 0, $15_1 = 0, $7_1 = Math_fround(0), $12_1 = 0, $14_1 = 0, $18_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $17_1 = 0, $4_1 = Math_fround(0), $19_1 = 0, $24_1 = Math_fround(0), $9_1 = Math_fround(0), $3_1 = 0, $8_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $21_1 = Math_fround(0), $20_1 = 0, $78_1 = Math_fround(0), $147_1 = 0, $155_1 = 0, $158_1 = 0, $161_1 = 0, $164_1 = 0, $168_1 = 0, $175_1 = 0, $179_1 = 0, $183_1 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $294_1 = 0, $297_1 = 0, $335_1 = 0, $340_1 = 0, $345_1 = 0, $374_1 = 0, $379_1 = 0, $384_1 = 0, $421_1 = 0, $426_1 = 0, $431_1 = 0, $460_1 = 0, $465_1 = 0, $470_1 = 0, $538_1 = Math_fround(0), $548_1 = Math_fround(0), $607_1 = 0, $612_1 = 0, $617_1 = 0, $645_1 = 0, $650_1 = 0, $655_1 = 0, $685_1 = 0, $690_1 = 0, $695_1 = 0, $723_1 = 0, $728_1 = 0, $733_1 = 0, $779_1 = 0, $784_1 = 0, $789_1 = 0, $818_1 = 0, $823_1 = 0, $828_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    if (Math_fround(Math_abs($4_1)) > Math_fround(.7071067690849304) ^ 1 | 0) {
     break label$2
    }
    $5_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    $6_1 = Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1));
    $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($6_1)));
    $8_1 = Math_fround($6_1 * $7_1);
    $9_1 = Math_fround(HEAPF32[$2_1 >> 2]);
    $6_1 = Math_fround(-Math_fround($4_1 * $7_1));
    $10_1 = Math_fround($9_1 * $6_1);
    $4_1 = Math_fround($5_1 * $7_1);
    $11_1 = Math_fround(-Math_fround($9_1 * $4_1));
    $5_1 = Math_fround(0.0);
    break label$1;
   }
   $6_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $5_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $7_1 = Math_fround(Math_fround($6_1 * $6_1) + Math_fround($5_1 * $5_1));
   $78_1 = $7_1;
   $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($7_1)));
   $10_1 = Math_fround($78_1 * $7_1);
   $5_1 = Math_fround(-Math_fround($5_1 * $7_1));
   $11_1 = Math_fround($4_1 * $5_1);
   $6_1 = Math_fround($6_1 * $7_1);
   $8_1 = Math_fround(-Math_fround($4_1 * $6_1));
   $4_1 = Math_fround(0.0);
  }
  label$3 : {
   label$4 : {
    $12_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($12_1 | 0) < (2 | 0)) {
     break label$4
    }
    $13_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $14_1 = 0;
    $15_1 = 0;
    label$5 : while (1) {
     label$6 : {
      $16_1 = $13_1 + $14_1 | 0;
      $17_1 = $16_1 + 8 | 0;
      if (Math_fround(Math_fround(Math_fround($5_1 * Math_fround(HEAPF32[$16_1 >> 2])) + Math_fround($6_1 * Math_fround(HEAPF32[($16_1 + 4 | 0) >> 2]))) + Math_fround($4_1 * Math_fround(HEAPF32[$17_1 >> 2]))) < Math_fround(Math_fround(Math_fround($5_1 * Math_fround(HEAPF32[$13_1 >> 2])) + Math_fround($6_1 * Math_fround(HEAPF32[($13_1 + 4 | 0) >> 2]))) + Math_fround($4_1 * Math_fround(HEAPF32[($13_1 + 8 | 0) >> 2]))) ^ 1 | 0) {
       break label$6
      }
      $12_1 = ($3_1 + 8 | 0) + 16 | 0;
      $18_1 = $13_1 + 16 | 0;
      i64toi32_i32$2 = $18_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $147_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $12_1;
      HEAP32[i64toi32_i32$0 >> 2] = $147_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $19_1 = ($3_1 + 8 | 0) + 8 | 0;
      $20_1 = $13_1 + 8 | 0;
      i64toi32_i32$2 = $20_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $155_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $19_1;
      HEAP32[i64toi32_i32$1 >> 2] = $155_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $13_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $158_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1;
      HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $158_1;
      HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $16_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $161_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $13_1;
      HEAP32[i64toi32_i32$1 >> 2] = $161_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $17_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $164_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $20_1;
      HEAP32[i64toi32_i32$0 >> 2] = $164_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $16_1 + 16 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $168_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $18_1;
      HEAP32[i64toi32_i32$1 >> 2] = $168_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $13_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $14_1 | 0;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
      $175_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $13_1;
      HEAP32[i64toi32_i32$0 >> 2] = $175_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $12_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $179_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $13_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $179_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $19_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $183_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $13_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $183_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $13_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $12_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     }
     $14_1 = $14_1 + 24 | 0;
     $15_1 = $15_1 + 1 | 0;
     if (($15_1 | 0) < ($12_1 | 0)) {
      continue label$5
     }
     break label$5;
    };
    HEAP32[($13_1 + 16 | 0) >> 2] = -246811958;
    label$7 : {
     if (($12_1 | 0) < (2 | 0)) {
      break label$7
     }
     $14_1 = $12_1 + -1 | 0;
     $16_1 = $13_1 + 40 | 0;
     $21_1 = Math_fround(HEAPF32[($13_1 + 8 | 0) >> 2]);
     $22_1 = Math_fround(HEAPF32[$13_1 >> 2]);
     $23_1 = Math_fround(HEAPF32[($13_1 + 4 | 0) >> 2]);
     label$8 : while (1) {
      $24_1 = Math_fround(0.0);
      label$9 : {
       $7_1 = Math_fround(Math_fround(HEAPF32[($16_1 + -16 | 0) >> 2]) - $22_1);
       $25_1 = Math_fround(Math_fround(HEAPF32[($16_1 + -12 | 0) >> 2]) - $23_1);
       $26_1 = Math_fround(Math_fround(HEAPF32[($16_1 + -8 | 0) >> 2]) - $21_1);
       $9_1 = Math_fround(Math_fround(Math_fround($8_1 * $7_1) + Math_fround($11_1 * $25_1)) + Math_fround($10_1 * $26_1));
       $7_1 = Math_fround(Math_fround(Math_fround($5_1 * $7_1) + Math_fround($6_1 * $25_1)) + Math_fround($4_1 * $26_1));
       if (Math_fround(Math_fround($9_1 * $9_1) + Math_fround($7_1 * $7_1)) < Math_fround(1.1920928955078125e-07)) {
        break label$9
       }
       $24_1 = Math_fround(Math_abs($9_1));
       label$10 : {
        label$11 : {
         if ($7_1 >= Math_fround(0.0) ^ 1 | 0) {
          break label$11
         }
         $7_1 = Math_fround(Math_fround($7_1 - $24_1) / Math_fround($7_1 + $24_1));
         $24_1 = Math_fround(.7853981852531433);
         break label$10;
        }
        $7_1 = Math_fround(Math_fround($7_1 + $24_1) / Math_fround($24_1 - $7_1));
        $24_1 = Math_fround(2.356194496154785);
       }
       $7_1 = Math_fround($24_1 + Math_fround($7_1 * Math_fround(-.7853981852531433)));
       $24_1 = $9_1 < Math_fround(0.0) ? Math_fround(-$7_1) : $7_1;
      }
      HEAPF32[$16_1 >> 2] = $24_1;
      $16_1 = $16_1 + 24 | 0;
      $14_1 = $14_1 + -1 | 0;
      if ($14_1) {
       continue label$8
      }
      break label$8;
     };
    }
    i64toi32_i32$2 = $13_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $294_1 = i64toi32_i32$1;
    i64toi32_i32$1 = ($3_1 + 8 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $294_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $13_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $297_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $297_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
    $185($0_1 | 0, i64toi32_i32$0 + 8 | 0 | 0, 1 | 0, $12_1 + -1 | 0 | 0);
    $17_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    label$12 : {
     $15_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if (($15_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
      break label$12
     }
     $18_1 = $15_1 ? $15_1 << 1 | 0 : 1;
     if (($15_1 | 0) >= ($18_1 | 0)) {
      break label$12
     }
     label$13 : {
      label$14 : {
       if ($18_1) {
        break label$14
       }
       $12_1 = 0;
       break label$13;
      }
      $12_1 = $79(Math_imul($18_1, 24) | 0, 16 | 0) | 0;
      $15_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     }
     label$15 : {
      if (($15_1 | 0) < (1 | 0)) {
       break label$15
      }
      $13_1 = 0;
      label$16 : while (1) {
       $16_1 = $12_1 + $13_1 | 0;
       $14_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $13_1 | 0;
       i64toi32_i32$2 = $14_1;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $335_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $16_1;
       HEAP32[i64toi32_i32$1 >> 2] = $335_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = i64toi32_i32$2 + 16 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $340_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $16_1 + 16 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $340_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $14_1 + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $345_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $16_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $345_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $13_1 = $13_1 + 24 | 0;
       $15_1 = $15_1 + -1 | 0;
       if ($15_1) {
        continue label$16
       }
       break label$16;
      };
     }
     label$17 : {
      $13_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      if (!$13_1) {
       break label$17
      }
      label$18 : {
       if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
        break label$18
       }
       $80($13_1 | 0);
      }
      HEAP32[($1_1 + 12 | 0) >> 2] = 0;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $12_1;
     HEAP8[($1_1 + 16 | 0) >> 0] = 1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $18_1;
     $15_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    }
    $13_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + Math_imul($15_1, 24) | 0;
    i64toi32_i32$2 = $17_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $374_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $13_1;
    HEAP32[i64toi32_i32$0 >> 2] = $374_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $379_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $13_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $379_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $17_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $384_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $13_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $384_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $16_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $16_1;
    $17_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 24 | 0;
    label$19 : {
     if (($16_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
      break label$19
     }
     $18_1 = $16_1 ? $16_1 << 1 | 0 : 1;
     if (($16_1 | 0) >= ($18_1 | 0)) {
      break label$19
     }
     label$20 : {
      label$21 : {
       if ($18_1) {
        break label$21
       }
       $12_1 = 0;
       break label$20;
      }
      $12_1 = $79(Math_imul($18_1, 24) | 0, 16 | 0) | 0;
      $16_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     }
     label$22 : {
      if (($16_1 | 0) < (1 | 0)) {
       break label$22
      }
      $13_1 = 0;
      label$23 : while (1) {
       $14_1 = $12_1 + $13_1 | 0;
       $15_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $13_1 | 0;
       i64toi32_i32$2 = $15_1;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $421_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $14_1;
       HEAP32[i64toi32_i32$1 >> 2] = $421_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = i64toi32_i32$2 + 16 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $426_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $14_1 + 16 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $426_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $15_1 + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $431_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $14_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $431_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $13_1 = $13_1 + 24 | 0;
       $16_1 = $16_1 + -1 | 0;
       if ($16_1) {
        continue label$23
       }
       break label$23;
      };
     }
     label$24 : {
      $13_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      if (!$13_1) {
       break label$24
      }
      label$25 : {
       if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
        break label$25
       }
       $80($13_1 | 0);
      }
      HEAP32[($1_1 + 12 | 0) >> 2] = 0;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $12_1;
     HEAP8[($1_1 + 16 | 0) >> 0] = 1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $18_1;
     $16_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    }
    $13_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + Math_imul($16_1, 24) | 0;
    i64toi32_i32$2 = $17_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $460_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $13_1;
    HEAP32[i64toi32_i32$0 >> 2] = $460_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $465_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $13_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $465_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $17_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $470_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $13_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $470_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $16_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $16_1;
    if ((HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (2 | 0)) {
     break label$3
    }
    $17_1 = 2;
    label$26 : while (1) {
     label$27 : {
      if (($16_1 | 0) < (2 | 0)) {
       break label$27
      }
      $15_1 = Math_imul($16_1, 48);
      $14_1 = $16_1 << 1 | 0;
      $19_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      $13_1 = ($19_1 + Math_imul($16_1, 24) | 0) + -48 | 0;
      $18_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + Math_imul($17_1, 24) | 0;
      $8_1 = Math_fround(HEAPF32[($18_1 + 8 | 0) >> 2]);
      $26_1 = Math_fround(HEAPF32[($18_1 + 4 | 0) >> 2]);
      $25_1 = Math_fround(HEAPF32[$18_1 >> 2]);
      $21_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
      $11_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
      $10_1 = Math_fround(HEAPF32[$2_1 >> 2]);
      label$28 : {
       label$29 : while (1) {
        $6_1 = Math_fround(HEAPF32[$13_1 >> 2]);
        $4_1 = Math_fround($6_1 - Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]));
        $5_1 = Math_fround(HEAPF32[($13_1 + 4 | 0) >> 2]);
        $7_1 = Math_fround($5_1 - $26_1);
        $5_1 = Math_fround($5_1 - Math_fround(HEAPF32[($13_1 + 28 | 0) >> 2]));
        $6_1 = Math_fround($6_1 - $25_1);
        $538_1 = Math_fround(Math_fround(Math_fround($4_1 * $7_1) - Math_fround($5_1 * $6_1)) * $21_1);
        $9_1 = Math_fround(HEAPF32[($13_1 + 8 | 0) >> 2]);
        $24_1 = Math_fround($9_1 - $8_1);
        $548_1 = Math_fround($5_1 * $24_1);
        $5_1 = Math_fround($9_1 - Math_fround(HEAPF32[($13_1 + 32 | 0) >> 2]));
        if (!(Math_fround($538_1 + Math_fround(Math_fround($10_1 * Math_fround($548_1 - Math_fround($5_1 * $7_1))) + Math_fround($11_1 * Math_fround(Math_fround($5_1 * $6_1) - Math_fround($4_1 * $24_1))))) > Math_fround(0.0) ^ 1 | 0)) {
         break label$28
        }
        $16_1 = $16_1 + -1 | 0;
        HEAP32[($1_1 + 4 | 0) >> 2] = $16_1;
        $13_1 = $13_1 + -24 | 0;
        $15_1 = $15_1 + -48 | 0;
        $14_1 = $14_1 + -2 | 0;
        if (($16_1 | 0) <= (1 | 0)) {
         break label$27
        }
        continue label$29;
       };
      }
      label$30 : {
       if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != ($16_1 | 0)) {
        break label$30
       }
       if (($16_1 | 0) >= ($14_1 | 0)) {
        break label$30
       }
       $19_1 = $79($15_1 | 0, 16 | 0) | 0;
       label$31 : {
        $12_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($12_1 | 0) < (1 | 0)) {
         break label$31
        }
        $13_1 = 0;
        label$32 : while (1) {
         $16_1 = $19_1 + $13_1 | 0;
         $15_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $13_1 | 0;
         i64toi32_i32$2 = $15_1;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $607_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $16_1;
         HEAP32[i64toi32_i32$1 >> 2] = $607_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         i64toi32_i32$2 = i64toi32_i32$2 + 16 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $612_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $16_1 + 16 | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $612_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = $15_1 + 8 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $617_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $16_1 + 8 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $617_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $13_1 = $13_1 + 24 | 0;
         $12_1 = $12_1 + -1 | 0;
         if ($12_1) {
          continue label$32
         }
         break label$32;
        };
       }
       label$33 : {
        $13_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        if (!$13_1) {
         break label$33
        }
        label$34 : {
         if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
          break label$34
         }
         $80($13_1 | 0);
        }
        HEAP32[($1_1 + 12 | 0) >> 2] = 0;
       }
       HEAP32[($1_1 + 12 | 0) >> 2] = $19_1;
       HEAP8[($1_1 + 16 | 0) >> 0] = 1;
       HEAP32[($1_1 + 8 | 0) >> 2] = $14_1;
       $16_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      }
      $13_1 = $19_1 + Math_imul($16_1, 24) | 0;
      i64toi32_i32$2 = $18_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $645_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $13_1;
      HEAP32[i64toi32_i32$0 >> 2] = $645_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$2 + 16 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $650_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $13_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $650_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $18_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $655_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $13_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $655_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $16_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $16_1;
     }
     label$35 : {
      if (($16_1 | 0) != (1 | 0)) {
       break label$35
      }
      $18_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + Math_imul($17_1, 24) | 0;
      $13_1 = 1;
      label$36 : {
       if ((HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
        break label$36
       }
       $12_1 = $79(48 | 0, 16 | 0) | 0;
       label$37 : {
        $15_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($15_1 | 0) < (1 | 0)) {
         break label$37
        }
        $13_1 = 0;
        label$38 : while (1) {
         $16_1 = $12_1 + $13_1 | 0;
         $14_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $13_1 | 0;
         i64toi32_i32$2 = $14_1;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $685_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $16_1;
         HEAP32[i64toi32_i32$1 >> 2] = $685_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         i64toi32_i32$2 = i64toi32_i32$2 + 16 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $690_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $16_1 + 16 | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $690_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = $14_1 + 8 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $695_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $16_1 + 8 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $695_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $13_1 = $13_1 + 24 | 0;
         $15_1 = $15_1 + -1 | 0;
         if ($15_1) {
          continue label$38
         }
         break label$38;
        };
       }
       label$39 : {
        $13_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        if (!$13_1) {
         break label$39
        }
        label$40 : {
         if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
          break label$40
         }
         $80($13_1 | 0);
        }
        HEAP32[($1_1 + 12 | 0) >> 2] = 0;
       }
       HEAP32[($1_1 + 12 | 0) >> 2] = $12_1;
       HEAP8[($1_1 + 16 | 0) >> 0] = 1;
       HEAP32[($1_1 + 8 | 0) >> 2] = 2;
       $13_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      }
      $13_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + Math_imul($13_1, 24) | 0;
      i64toi32_i32$2 = $18_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $723_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $13_1;
      HEAP32[i64toi32_i32$0 >> 2] = $723_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$2 + 16 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $728_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $13_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $728_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $18_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $733_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $13_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $733_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $16_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $16_1;
     }
     $17_1 = $17_1 + 1 | 0;
     if (($17_1 | 0) != (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
      continue label$26
     }
     break label$3;
    };
   }
   if (($12_1 | 0) != (1 | 0)) {
    break label$3
   }
   $16_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $18_1 = 0;
   label$41 : while (1) {
    $17_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    label$42 : {
     if (($16_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
      break label$42
     }
     $19_1 = $16_1 ? $16_1 << 1 | 0 : 1;
     if (($16_1 | 0) >= ($19_1 | 0)) {
      break label$42
     }
     label$43 : {
      label$44 : {
       if ($19_1) {
        break label$44
       }
       $12_1 = 0;
       break label$43;
      }
      $12_1 = $79(Math_imul($19_1, 24) | 0, 16 | 0) | 0;
      $16_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     }
     label$45 : {
      if (($16_1 | 0) < (1 | 0)) {
       break label$45
      }
      $13_1 = 0;
      label$46 : while (1) {
       $14_1 = $12_1 + $13_1 | 0;
       $15_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $13_1 | 0;
       i64toi32_i32$2 = $15_1;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $779_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $14_1;
       HEAP32[i64toi32_i32$1 >> 2] = $779_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = i64toi32_i32$2 + 16 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $784_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $14_1 + 16 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $784_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $15_1 + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $789_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $14_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $789_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $13_1 = $13_1 + 24 | 0;
       $16_1 = $16_1 + -1 | 0;
       if ($16_1) {
        continue label$46
       }
       break label$46;
      };
     }
     label$47 : {
      $13_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      if (!$13_1) {
       break label$47
      }
      label$48 : {
       if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
        break label$48
       }
       $80($13_1 | 0);
      }
      HEAP32[($1_1 + 12 | 0) >> 2] = 0;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $12_1;
     HEAP8[($1_1 + 16 | 0) >> 0] = 1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $19_1;
     $16_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    }
    $13_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + Math_imul($16_1, 24) | 0;
    i64toi32_i32$2 = $17_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $818_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $13_1;
    HEAP32[i64toi32_i32$0 >> 2] = $818_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $823_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $13_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $823_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $17_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $828_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $13_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $828_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $16_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $16_1;
    $18_1 = $18_1 + 1 | 0;
    if (($18_1 | 0) < (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) {
     continue label$41
    }
    break label$41;
   };
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $184($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $13_1 = 0, $5_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $8_1 = 0, $9_1 = 0, $7_1 = 0, $109_1 = 0, $114_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $182($0_1 | 0, ($2_1 ? $2_1 << 1 | 0 : 1) | 0);
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  }
  $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $4_1 = $3_1 + Math_imul($2_1, 36) | 0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($4_1 + 16 | 0) >> 0] = 1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  $5_1 = $4_1 + 4 | 0;
  label$2 : {
   label$3 : {
    $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($6_1 | 0) < (1 | 0)) {
     break label$3
    }
    $7_1 = $4_1 + 8 | 0;
    $8_1 = $4_1 + 16 | 0;
    $9_1 = $6_1 << 2 | 0;
    $10_1 = $79($9_1 | 0, 16 | 0) | 0;
    $11_1 = $4_1 + 12 | 0;
    $12_1 = HEAP32[$11_1 >> 2] | 0;
    label$4 : {
     label$5 : {
      label$6 : {
       $13_1 = HEAP32[$5_1 >> 2] | 0;
       if (($13_1 | 0) < (1 | 0)) {
        break label$6
       }
       $4_1 = $10_1;
       $14_1 = $12_1;
       label$7 : while (1) {
        HEAP32[$4_1 >> 2] = HEAP32[$14_1 >> 2] | 0;
        $4_1 = $4_1 + 4 | 0;
        $14_1 = $14_1 + 4 | 0;
        $13_1 = $13_1 + -1 | 0;
        if ($13_1) {
         continue label$7
        }
        break label$5;
       };
      }
      if (!$12_1) {
       break label$4
      }
     }
     if (!(HEAPU8[$8_1 >> 0] | 0)) {
      break label$4
     }
     $80($12_1 | 0);
    }
    HEAP32[$11_1 >> 2] = $10_1;
    HEAP8[$8_1 >> 0] = 1;
    HEAP32[$7_1 >> 2] = $6_1;
    $17($10_1 | 0, 0 | 0, $9_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    $4_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    $14_1 = HEAP32[$11_1 >> 2] | 0;
    label$8 : while (1) {
     HEAP32[$14_1 >> 2] = HEAP32[$4_1 >> 2] | 0;
     $14_1 = $14_1 + 4 | 0;
     $4_1 = $4_1 + 4 | 0;
     $6_1 = $6_1 + -1 | 0;
     if ($6_1) {
      continue label$8
     }
     break label$2;
    };
   }
   HEAP32[$5_1 >> 2] = $6_1;
  }
  $4_1 = $3_1 + Math_imul($2_1, 36) | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
  $109_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $109_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 28 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $114_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + 28 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function $185($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $15_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $13_1 = 0, $5_1 = 0, $4_1 = 0, $20_1 = 0, $8_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = 0, $14_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $7_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $56_1 = Math_fround(0), $65_1 = Math_fround(0), $97_1 = Math_fround(0), $106_1 = Math_fround(0), $153_1 = Math_fround(0), $162_1 = Math_fround(0), $198_1 = 0, $206_1 = 0, $209_1 = 0, $212_1 = 0, $216_1 = 0, $219_1 = 0, $226_1 = 0, $230_1 = 0, $234_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $6_1 = $5_1 + Math_imul(($3_1 + $2_1 | 0 | 0) / (2 | 0) | 0, 24) | 0;
  $7_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  $8_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[$6_1 >> 2]);
  $12_1 = $2_1;
  $13_1 = $3_1;
  label$1 : while (1) {
   $14_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $15_1 = Math_fround($11_1 - $14_1);
   $56_1 = Math_fround($15_1 * $15_1);
   $16_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $15_1 = Math_fround($10_1 - $16_1);
   $65_1 = Math_fround($56_1 + Math_fround($15_1 * $15_1));
   $17_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $15_1 = Math_fround($9_1 - $17_1);
   $18_1 = Math_fround($65_1 + Math_fround($15_1 * $15_1));
   $6_1 = ($5_1 + Math_imul($12_1, 24) | 0) + 20 | 0;
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $15_1 = Math_fround(HEAPF32[($6_1 + -4 | 0) >> 2]);
       if ($15_1 == $8_1) {
        break label$5
       }
       if (!($15_1 < $8_1)) {
        break label$2
       }
       break label$4;
      }
      label$6 : {
       $15_1 = Math_fround(Math_fround(HEAPF32[($6_1 + -20 | 0) >> 2]) - $14_1);
       $97_1 = Math_fround($15_1 * $15_1);
       $15_1 = Math_fround(Math_fround(HEAPF32[($6_1 + -16 | 0) >> 2]) - $16_1);
       $106_1 = Math_fround($97_1 + Math_fround($15_1 * $15_1));
       $15_1 = Math_fround(Math_fround(HEAPF32[($6_1 + -12 | 0) >> 2]) - $17_1);
       $15_1 = Math_fround($106_1 + Math_fround($15_1 * $15_1));
       if ($15_1 == $18_1) {
        break label$6
       }
       if ($15_1 < $18_1) {
        break label$4
       }
       break label$2;
      }
      if ((HEAP32[$6_1 >> 2] | 0 | 0) >= ($7_1 | 0)) {
       break label$2
      }
     }
     $6_1 = $6_1 + 24 | 0;
     $12_1 = $12_1 + 1 | 0;
     continue label$3;
    };
   }
   $19_1 = Math_imul($13_1, 24);
   label$7 : {
    label$8 : while (1) {
     label$9 : {
      label$10 : {
       $20_1 = $5_1 + $19_1 | 0;
       $21_1 = $20_1 + 16 | 0;
       $15_1 = Math_fround(HEAPF32[$21_1 >> 2]);
       if ($8_1 == $15_1) {
        break label$10
       }
       if (!($8_1 < $15_1)) {
        break label$7
       }
       break label$9;
      }
      label$11 : {
       $15_1 = Math_fround(Math_fround(HEAPF32[$20_1 >> 2]) - $14_1);
       $153_1 = Math_fround($15_1 * $15_1);
       $15_1 = Math_fround(Math_fround(HEAPF32[($20_1 + 4 | 0) >> 2]) - $16_1);
       $162_1 = Math_fround($153_1 + Math_fround($15_1 * $15_1));
       $15_1 = Math_fround(Math_fround(HEAPF32[($20_1 + 8 | 0) >> 2]) - $17_1);
       $15_1 = Math_fround($162_1 + Math_fround($15_1 * $15_1));
       if ($18_1 == $15_1) {
        break label$11
       }
       if ($18_1 < $15_1) {
        break label$9
       }
       break label$7;
      }
      if (($7_1 | 0) >= (HEAP32[($20_1 + 20 | 0) >> 2] | 0 | 0)) {
       break label$7
      }
     }
     $19_1 = $19_1 + -24 | 0;
     $13_1 = $13_1 + -1 | 0;
     continue label$8;
    };
   }
   label$12 : {
    if (($12_1 | 0) > ($13_1 | 0)) {
     break label$12
    }
    $5_1 = ($4_1 + 8 | 0) + 16 | 0;
    $6_1 = $6_1 + -20 | 0;
    $22_1 = $6_1 + 16 | 0;
    i64toi32_i32$2 = $22_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $198_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[i64toi32_i32$0 >> 2] = $198_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $23_1 = ($4_1 + 8 | 0) + 8 | 0;
    $24_1 = $6_1 + 8 | 0;
    i64toi32_i32$2 = $24_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $206_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $23_1;
    HEAP32[i64toi32_i32$1 >> 2] = $206_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    $209_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $209_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $20_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $212_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $6_1;
    HEAP32[i64toi32_i32$1 >> 2] = $212_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $216_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $24_1;
    HEAP32[i64toi32_i32$0 >> 2] = $216_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $21_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $219_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $22_1;
    HEAP32[i64toi32_i32$1 >> 2] = $219_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $6_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $19_1 | 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $226_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1;
    HEAP32[i64toi32_i32$0 >> 2] = $226_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $230_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $6_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $230_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $23_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $234_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $234_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $13_1 = $13_1 + -1 | 0;
    $12_1 = $12_1 + 1 | 0;
   }
   label$13 : {
    if (($12_1 | 0) > ($13_1 | 0)) {
     break label$13
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    continue label$1;
   }
   break label$1;
  };
  label$14 : {
   if (($13_1 | 0) <= ($2_1 | 0)) {
    break label$14
   }
   $185($0_1 | 0, $1_1 | 0, $2_1 | 0, $13_1 | 0);
  }
  label$15 : {
   if (($12_1 | 0) >= ($3_1 | 0)) {
    break label$15
   }
   $185($0_1 | 0, $1_1 | 0, $12_1 | 0, $3_1 | 0);
  }
  global$0 = $4_1 + 32 | 0;
 }
 
 function $186($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = Math_fround(0), $7_1 = Math_fround(0), $13_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $3_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $14_1 = 0, $136_1 = 0, $139_1 = 0;
  $3_1 = global$0 - 2048 | 0;
  global$0 = $3_1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    $4_1 = Math_fround(HEAPF32[$2_1 >> 2]);
    $5_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    $7_1 = Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)) + Math_fround($6_1 * $6_1));
    if (!($7_1 < Math_fround(9.999999747378752e-05))) {
     break label$2
    }
    $6_1 = Math_fround(0.0);
    $7_1 = Math_fround(1.0);
    $8_1 = Math_fround(0.0);
    break label$1;
   }
   $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($7_1)));
   $8_1 = Math_fround($6_1 * $7_1);
   $6_1 = Math_fround($5_1 * $7_1);
   $7_1 = Math_fround($4_1 * $7_1);
  }
  label$3 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 96 | 0) >> 2] | 0]($1_1) | 0 | 0) < (1 | 0)) {
    break label$3
   }
   $9_1 = Math_fround(-999999984306749440.0);
   $10_1 = 0;
   label$4 : while (1) {
    $11_1 = 128;
    label$5 : {
     label$6 : {
      if (((FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 96 | 0) >> 2] | 0]($1_1) | 0) - $10_1 | 0 | 0) > (127 | 0)) {
       break label$6
      }
      $11_1 = (FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 96 | 0) >> 2] | 0]($1_1) | 0) - $10_1 | 0;
      if (($11_1 | 0) >= (1 | 0)) {
       break label$6
      }
      $4_1 = Math_fround(-3402823466385288598117041.0e14);
      $12_1 = -1;
      break label$5;
     }
     $2_1 = 0;
     $13_1 = $3_1;
     label$7 : while (1) {
      FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 108 | 0) >> 2] | 0]($1_1, $2_1, $13_1);
      $13_1 = $13_1 + 16 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (($11_1 | 0) != ($2_1 | 0)) {
       continue label$7
      }
      break label$7;
     };
     $13_1 = 0;
     $12_1 = -1;
     $4_1 = Math_fround(-3402823466385288598117041.0e14);
     $2_1 = $3_1;
     label$8 : while (1) {
      $5_1 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[$2_1 >> 2])) + Math_fround($6_1 * Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]))) + Math_fround($8_1 * Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2])));
      $14_1 = $5_1 > $4_1;
      $4_1 = $14_1 ? $5_1 : $4_1;
      $12_1 = $14_1 ? $13_1 : $12_1;
      $2_1 = $2_1 + 16 | 0;
      $13_1 = $13_1 + 1 | 0;
      if (($11_1 | 0) != ($13_1 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    label$9 : {
     if ($4_1 > $9_1 ^ 1 | 0) {
      break label$9
     }
     $2_1 = $3_1 + ($12_1 << 4 | 0) | 0;
     i64toi32_i32$0 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
     $136_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $136_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $139_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $139_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $9_1 = $4_1;
    }
    $10_1 = $10_1 + 128 | 0;
    if (($10_1 | 0) < (FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 96 | 0) >> 2] | 0]($1_1) | 0 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  global$0 = $3_1 + 2048 | 0;
 }
 
 function $187($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $6_1 = 0, $15_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $13_1 = 0, $7_1 = 0, $14_1 = 0, $16_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $20_1 = Math_fround(0), $21_1 = 0, $11_1 = 0, $12_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $142_1 = 0, $145_1 = 0;
  $4_1 = global$0 - 2048 | 0;
  global$0 = $4_1;
  label$1 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = $2_1 + 12 | 0;
   $6_1 = $3_1;
   label$2 : while (1) {
    HEAP32[$5_1 >> 2] = -581039253;
    $5_1 = $5_1 + 16 | 0;
    $6_1 = $6_1 + -1 | 0;
    if ($6_1) {
     continue label$2
    }
    break label$2;
   };
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $7_1 = 0;
   label$3 : while (1) {
    label$4 : {
     if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 96 | 0) >> 2] | 0]($0_1) | 0 | 0) < (1 | 0)) {
      break label$4
     }
     $5_1 = $7_1 << 4 | 0;
     $8_1 = $2_1 + $5_1 | 0;
     $9_1 = $8_1 + 12 | 0;
     $10_1 = $1_1 + $5_1 | 0;
     $11_1 = $10_1 + 8 | 0;
     $12_1 = $10_1 + 4 | 0;
     $13_1 = 0;
     label$5 : while (1) {
      $14_1 = 128;
      label$6 : {
       label$7 : {
        if (((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 96 | 0) >> 2] | 0]($0_1) | 0) - $13_1 | 0 | 0) > (127 | 0)) {
         break label$7
        }
        $14_1 = (FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 96 | 0) >> 2] | 0]($0_1) | 0) - $13_1 | 0;
        if (($14_1 | 0) >= (1 | 0)) {
         break label$7
        }
        $15_1 = Math_fround(-3402823466385288598117041.0e14);
        $16_1 = -1;
        break label$6;
       }
       $5_1 = 0;
       $6_1 = $4_1;
       label$8 : while (1) {
        FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 108 | 0) >> 2] | 0]($0_1, $5_1, $6_1);
        $6_1 = $6_1 + 16 | 0;
        $5_1 = $5_1 + 1 | 0;
        if (($14_1 | 0) != ($5_1 | 0)) {
         continue label$8
        }
        break label$8;
       };
       $17_1 = Math_fround(HEAPF32[$11_1 >> 2]);
       $18_1 = Math_fround(HEAPF32[$12_1 >> 2]);
       $19_1 = Math_fround(HEAPF32[$10_1 >> 2]);
       $6_1 = 0;
       $16_1 = -1;
       $15_1 = Math_fround(-3402823466385288598117041.0e14);
       $5_1 = $4_1;
       label$9 : while (1) {
        $20_1 = Math_fround(Math_fround(Math_fround($19_1 * Math_fround(HEAPF32[$5_1 >> 2])) + Math_fround($18_1 * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]))) + Math_fround($17_1 * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])));
        $21_1 = $20_1 > $15_1;
        $15_1 = $21_1 ? $20_1 : $15_1;
        $16_1 = $21_1 ? $6_1 : $16_1;
        $5_1 = $5_1 + 16 | 0;
        $6_1 = $6_1 + 1 | 0;
        if (($14_1 | 0) != ($6_1 | 0)) {
         continue label$9
        }
        break label$9;
       };
      }
      label$10 : {
       if ($15_1 > Math_fround(HEAPF32[$9_1 >> 2]) ^ 1 | 0) {
        break label$10
       }
       $5_1 = $4_1 + ($16_1 << 4 | 0) | 0;
       i64toi32_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       $142_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $142_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[$5_1 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
       $145_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[i64toi32_i32$1 >> 2] = $145_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAPF32[$9_1 >> 2] = $15_1;
      }
      $13_1 = $13_1 + 128 | 0;
      if (($13_1 | 0) < (FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 96 | 0) >> 2] | 0]($0_1) | 0 | 0)) {
       continue label$5
      }
      break label$5;
     };
    }
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) != ($3_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  global$0 = $4_1 + 2048 | 0;
 }
 
 function $188($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, $4_1 = Math_fround(0), i64toi32_i32$0 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  i64toi32_i32$1 = $3_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 52 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $3_1 + 76 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 72 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $3_1 + 84 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 92 | 0) >> 2] = 0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = 0;
  HEAP32[($3_1 + 40 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 32 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 64 | 0) >> 2] = 0;
  HEAP32[($3_1 + 68 | 0) >> 2] = i64toi32_i32$0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $1_1 = Math_fround($1_1 * Math_fround(.0833333283662796));
  $5_1 = Math_fround($4_1 + Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 >> 2]) - Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2])) * Math_fround(.5)));
  $5_1 = Math_fround($5_1 + $5_1);
  $5_1 = Math_fround($5_1 * $5_1);
  $6_1 = Math_fround($4_1 + Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])) * Math_fround(.5)));
  $6_1 = Math_fround($6_1 + $6_1);
  $6_1 = Math_fround($6_1 * $6_1);
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($1_1 * Math_fround($5_1 + $6_1));
  $4_1 = Math_fround($4_1 + Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2])) * Math_fround(.5)));
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($1_1 * Math_fround($5_1 + $4_1));
  HEAPF32[$2_1 >> 2] = Math_fround($1_1 * Math_fround($6_1 + $4_1));
  global$0 = $3_1 + 96 | 0;
 }
 
 function $189($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = Math_fround(0), $2_1 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  $146($0_1 | 0, $1_1 | 0);
  HEAP8[($0_1 + 92 | 0) >> 0] = 1;
  label$1 : {
   if (HEAPU8[(0 + 1680 | 0) >> 0] | 0) {
    break label$1
   }
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1588 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 1592 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(0 + 1584 | 0) >> 2] = 1065353216;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1596 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 1600 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1608 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 1612 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(0 + 1604 | 0) >> 2] = 1065353216;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1616 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 1620 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1636 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 1640 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(0 + 1632 | 0) >> 2] = -1082130432;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1624 | 0) >> 2] = 1065353216;
   HEAP32[(i64toi32_i32$1 + 1628 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1644 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 1648 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1656 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 1660 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(0 + 1652 | 0) >> 2] = -1082130432;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1664 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 1668 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1672 | 0) >> 2] = -1082130432;
   HEAP32[(i64toi32_i32$1 + 1676 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[(0 + 1680 | 0) >> 0] = 1;
  }
  $1_1 = $17($2_1 | 0, 0 | 0, 96 | 0) | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 76 | 0) >> 2] | 0]($0_1, 1584, $1_1, 6);
  $3_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
  HEAPF32[($0_1 + 76 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) + $3_1);
  HEAPF32[($0_1 + 60 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]) - $3_1);
  HEAPF32[($0_1 + 80 | 0) >> 2] = Math_fround($3_1 + Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]));
  HEAPF32[($0_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]) - $3_1);
  HEAPF32[($0_1 + 84 | 0) >> 2] = Math_fround($3_1 + Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]));
  HEAPF32[($0_1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 88 | 0) >> 2]) - $3_1);
  global$0 = $1_1 + 96 | 0;
 }
 
 function $190($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $145($0_1 | 0) | 0;
  HEAP8[($0_1 + 92 | 0) >> 0] = 0;
  HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 80 | 0;
  i64toi32_i32$0 = -1082130432;
  HEAP32[i64toi32_i32$1 >> 2] = -1082130432;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 72 | 0;
  i64toi32_i32$0 = -1082130432;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 64 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = 7240;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  HEAP32[($0_1 + 60 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $191($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $13_1 = Math_fround(0), $21_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $8_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $22_1 = Math_fround(0), $5_1 = Math_fround(0), $15_1 = Math_fround(0);
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $5_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $18_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($0_1 + 76 | 0) >> 2]);
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $23_1 = Math_fround(Math_fround($22_1 + $21_1) * Math_fround(.5));
  $24_1 = Math_fround(Math_fround($14_1 + $13_1) * Math_fround(.5));
  $25_1 = Math_fround(Math_fround($11_1 + $10_1) * Math_fround(.5));
  $8_1 = Math_fround($8_1 + Math_fround(Math_fround(Math_fround($20_1 * $23_1) + Math_fround($12_1 * $24_1)) + Math_fround($9_1 * $25_1)));
  $21_1 = Math_fround($4_1 + Math_fround(Math_fround($22_1 - $21_1) * Math_fround(.5)));
  $13_1 = Math_fround($4_1 + Math_fround(Math_fround($14_1 - $13_1) * Math_fround(.5)));
  $4_1 = Math_fround($4_1 + Math_fround(Math_fround($11_1 - $10_1) * Math_fround(.5)));
  $9_1 = Math_fround(Math_fround(Math_fround($21_1 * Math_fround(Math_abs($20_1))) + Math_fround($13_1 * Math_fround(Math_abs($12_1)))) + Math_fround($4_1 * Math_fround(Math_abs($9_1))));
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($8_1 - $9_1);
  $10_1 = Math_fround($5_1 + Math_fround(Math_fround(Math_fround($23_1 * $19_1) + Math_fround($24_1 * $7_1)) + Math_fround($25_1 * $6_1)));
  $6_1 = Math_fround(Math_fround(Math_fround($21_1 * Math_fround(Math_abs($19_1))) + Math_fround($13_1 * Math_fround(Math_abs($7_1)))) + Math_fround($4_1 * Math_fround(Math_abs($6_1))));
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($10_1 - $6_1);
  $7_1 = Math_fround($15_1 + Math_fround(Math_fround(Math_fround($23_1 * $17_1) + Math_fround($24_1 * $18_1)) + Math_fround($25_1 * $16_1)));
  $4_1 = Math_fround(Math_fround(Math_fround($21_1 * Math_fround(Math_abs($17_1))) + Math_fround($13_1 * Math_fround(Math_abs($18_1)))) + Math_fround($4_1 * Math_fround(Math_abs($16_1))));
  HEAPF32[$2_1 >> 2] = Math_fround($7_1 - $4_1);
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($9_1 + $8_1);
  HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($6_1 + $10_1);
  HEAPF32[$3_1 >> 2] = Math_fround($4_1 + $7_1);
 }
 
 function $192($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 80 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $193($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 7108;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
   $80(HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0);
  }
  $101($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $194($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $195($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
    $3_1 = Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]);
    $4_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
    $6_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]) + Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]));
    if (Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * $2_1) + Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * $3_1)) + Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * $4_1)) - $5_1) - $6_1) > Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    if (Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2_1 * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2])) + Math_fround($3_1 * Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]))) + Math_fround($4_1 * Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]))) - $5_1) - $6_1) > Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    $7_1 = 0;
    if (Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2_1 * Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2])) + Math_fround($3_1 * Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]))) + Math_fround($4_1 * Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]))) - $5_1) - $6_1) > Math_fround(0.0)) {
     break label$1
    }
   }
   $2_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
   $3_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
   $4_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($1_1 + 60 | 0) >> 2]);
   $7_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) * $2_1) + Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]) * $3_1)) + Math_fround(Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]) * $4_1)) - $5_1) - $6_1) > Math_fround(0.0) ^ 1 | 0 | (Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2_1 * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2])) + Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]))) + Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]))) - $5_1) - $6_1) > Math_fround(0.0) ^ 1 | 0) | 0 | (Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2_1 * Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2])) + Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]))) + Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]))) - $5_1) - $6_1) > Math_fround(0.0) ^ 1 | 0) | 0;
  }
  return $7_1 | 0;
 }
 
 function $196($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $10_1 = Math_fround(0), $6_1 = Math_fround(0), $5_1 = Math_fround(0), $3_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $4_1 = Math_fround(0), $7_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $44_1 = Math_fround(0), $53_1 = Math_fround(0), $65_1 = Math_fround(0), $141_1 = Math_fround(0), $146_1 = Math_fround(0), $235_1 = Math_fround(0), $240_1 = Math_fround(0);
  $3_1 = global$0 - 528 | 0;
  global$0 = $3_1;
  $4_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
  $5_1 = Math_fround($4_1 - Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]));
  $6_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
  $8_1 = Math_fround($7_1 - Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]));
  $9_1 = Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]);
  $10_1 = Math_fround(Math_fround($5_1 * $6_1) - Math_fround($8_1 * $9_1));
  $44_1 = $10_1;
  $11_1 = Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]);
  $12_1 = Math_fround($11_1 - Math_fround(HEAPF32[$0_1 >> 2]));
  $53_1 = Math_fround($12_1 * $9_1);
  $9_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
  $5_1 = Math_fround($53_1 - Math_fround($5_1 * $9_1));
  $65_1 = Math_fround($10_1 * $10_1);
  $10_1 = Math_fround(Math_fround($8_1 * $9_1) - Math_fround($12_1 * $6_1));
  $6_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($65_1 + Math_fround($10_1 * $10_1))))));
  $8_1 = Math_fround($44_1 * $6_1);
  HEAPF32[($3_1 + 256 | 0) >> 2] = $8_1;
  $10_1 = Math_fround($10_1 * $6_1);
  HEAPF32[($3_1 + 260 | 0) >> 2] = $10_1;
  $5_1 = Math_fround($5_1 * $6_1);
  HEAPF32[($3_1 + 264 | 0) >> 2] = $5_1;
  HEAPF32[($3_1 + 268 | 0) >> 2] = Math_fround(Math_fround($7_1 * $5_1) + Math_fround(Math_fround($11_1 * $8_1) + Math_fround($4_1 * $10_1)));
  label$1 : {
   label$2 : {
    $1_1 = $197($3_1 + 256 | 0 | 0, $1_1 | 0, $1_1 + 16 | 0 | 0, $1_1 + 32 | 0 | 0, $3_1 + 272 | 0 | 0) | 0;
    if ($1_1) {
     break label$2
    }
    $0_1 = 0;
    break label$1;
   }
   $4_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
   $6_1 = Math_fround($4_1 - Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]));
   $5_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
   $8_1 = Math_fround($7_1 - Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]));
   $9_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
   $10_1 = Math_fround(Math_fround($6_1 * $5_1) - Math_fround($8_1 * $9_1));
   $141_1 = $10_1;
   $11_1 = Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]);
   $146_1 = Math_fround($8_1 * $11_1);
   $8_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
   $12_1 = Math_fround($8_1 - Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]));
   $5_1 = Math_fround($146_1 - Math_fround($12_1 * $5_1));
   $6_1 = Math_fround(Math_fround($12_1 * $9_1) - Math_fround($6_1 * $11_1));
   $10_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround(Math_fround($6_1 * $6_1) + Math_fround($10_1 * $10_1))))));
   $9_1 = Math_fround($141_1 * $10_1);
   HEAPF32[($3_1 + 260 | 0) >> 2] = $9_1;
   $6_1 = Math_fround($6_1 * $10_1);
   HEAPF32[($3_1 + 256 | 0) >> 2] = $6_1;
   $10_1 = Math_fround($5_1 * $10_1);
   HEAPF32[($3_1 + 264 | 0) >> 2] = $10_1;
   HEAPF32[($3_1 + 268 | 0) >> 2] = Math_fround(Math_fround($4_1 * $10_1) + Math_fround(Math_fround($7_1 * $6_1) + Math_fround($8_1 * $9_1)));
   label$3 : {
    $1_1 = $198($3_1 + 256 | 0 | 0, $3_1 + 272 | 0 | 0, $1_1 | 0, $3_1 | 0) | 0;
    if ($1_1) {
     break label$3
    }
    $0_1 = 0;
    break label$1;
   }
   $4_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
   $6_1 = Math_fround($4_1 - Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]));
   $5_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[$0_1 >> 2]);
   $8_1 = Math_fround($7_1 - Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]));
   $9_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
   $10_1 = Math_fround(Math_fround($6_1 * $5_1) - Math_fround($8_1 * $9_1));
   $235_1 = $10_1;
   $11_1 = Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]);
   $240_1 = Math_fround($8_1 * $11_1);
   $8_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   $12_1 = Math_fround($8_1 - Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]));
   $5_1 = Math_fround($240_1 - Math_fround($12_1 * $5_1));
   $6_1 = Math_fround(Math_fround($12_1 * $9_1) - Math_fround($6_1 * $11_1));
   $10_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround(Math_fround($6_1 * $6_1) + Math_fround($10_1 * $10_1))))));
   $9_1 = Math_fround($235_1 * $10_1);
   HEAPF32[($3_1 + 260 | 0) >> 2] = $9_1;
   $6_1 = Math_fround($6_1 * $10_1);
   HEAPF32[($3_1 + 256 | 0) >> 2] = $6_1;
   $10_1 = Math_fround($5_1 * $10_1);
   HEAPF32[($3_1 + 264 | 0) >> 2] = $10_1;
   HEAPF32[($3_1 + 268 | 0) >> 2] = Math_fround(Math_fround($4_1 * $10_1) + Math_fround(Math_fround($7_1 * $6_1) + Math_fround($8_1 * $9_1)));
   $0_1 = $198($3_1 + 256 | 0 | 0, $3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  global$0 = $3_1 + 528 | 0;
  return $0_1 | 0;
 }
 
 function $197($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $6_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = 0, $11_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $17_1 = 0, $48_1 = 0, $53_1 = 0, $16_1 = Math_fround(0), $137_1 = 0, $142_1 = 0, $192_1 = Math_fround(0), $225_1 = 0, $230_1 = 0, $296_1 = 0, $301_1 = 0;
  $5_1 = 0;
  label$1 : {
   $6_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $7_1 = Math_fround(HEAPF32[$0_1 >> 2]);
   $8_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
   $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $7_1) + Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * $8_1)) + Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * $9_1)) - $10_1);
   $12_1 = $11_1 > Math_fround(1.1920928955078125e-07);
   if ($12_1) {
    break label$1
   }
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $48_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1;
   HEAP32[i64toi32_i32$0 >> 2] = $48_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $53_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $53_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $10_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[$0_1 >> 2]);
   $5_1 = 1;
  }
  label$2 : {
   $13_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $14_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $7_1 = Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $7_1) + Math_fround($14_1 * $8_1)) + Math_fround($15_1 * $9_1)) - $10_1);
   if (($12_1 | 0) == ($7_1 > Math_fround(1.1920928955078125e-07) | 0)) {
    break label$2
   }
   $10_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $16_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $12_1 = $4_1 + ($5_1 << 4 | 0) | 0;
   HEAP32[($12_1 + 12 | 0) >> 2] = 0;
   $8_1 = Math_fround(Math_fround(-$11_1) / Math_fround($7_1 - $11_1));
   $9_1 = Math_fround(Math_fround(1.0) - $8_1);
   HEAPF32[($12_1 + 8 | 0) >> 2] = Math_fround(Math_fround($15_1 * $8_1) + Math_fround($16_1 * $9_1));
   HEAPF32[($12_1 + 4 | 0) >> 2] = Math_fround(Math_fround($14_1 * $8_1) + Math_fround($9_1 * $10_1));
   HEAPF32[$12_1 >> 2] = Math_fround(Math_fround($13_1 * $8_1) + Math_fround($6_1 * $9_1));
   $5_1 = $5_1 + 1 | 0;
  }
  label$3 : {
   $12_1 = $7_1 > Math_fround(1.1920928955078125e-07);
   if ($12_1) {
    break label$3
   }
   $17_1 = $4_1 + ($5_1 << 4 | 0) | 0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $137_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $17_1;
   HEAP32[i64toi32_i32$0 >> 2] = $137_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $142_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $17_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $142_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $5_1 = $5_1 + 1 | 0;
  }
  label$4 : {
   $9_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $10_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   $8_1 = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[$0_1 >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]))) + Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]))) - Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
   if (($12_1 | 0) == ($8_1 > Math_fround(1.1920928955078125e-07) | 0)) {
    break label$4
   }
   $13_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $14_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $0_1 = $4_1 + ($5_1 << 4 | 0) | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   $7_1 = Math_fround(Math_fround(-$7_1) / Math_fround($8_1 - $7_1));
   $192_1 = Math_fround($6_1 * $7_1);
   $6_1 = Math_fround(Math_fround(1.0) - $7_1);
   HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround($192_1 + Math_fround($15_1 * $6_1));
   HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround($10_1 * $7_1) + Math_fround($6_1 * $14_1));
   HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($9_1 * $7_1) + Math_fround($6_1 * $13_1));
   $5_1 = $5_1 + 1 | 0;
  }
  label$5 : {
   label$6 : {
    label$7 : {
     label$8 : {
      if ($8_1 > Math_fround(1.1920928955078125e-07)) {
       break label$8
      }
      $0_1 = $4_1 + ($5_1 << 4 | 0) | 0;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $225_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $0_1;
      HEAP32[$0_1 >> 2] = $225_1;
      HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $230_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $0_1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $230_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $5_1 = $5_1 + 1 | 0;
      if ($11_1 > Math_fround(1.1920928955078125e-07)) {
       break label$7
      }
      break label$6;
     }
     if ($11_1 > Math_fround(1.1920928955078125e-07)) {
      break label$5
     }
    }
    $9_1 = Math_fround(HEAPF32[$3_1 >> 2]);
    $10_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $6_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    $14_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
    $15_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $0_1 = $4_1 + ($5_1 << 4 | 0) | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = 0;
    $7_1 = Math_fround(Math_fround(-$8_1) / Math_fround($11_1 - $8_1));
    $8_1 = Math_fround(Math_fround(1.0) - $7_1);
    HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(Math_fround($14_1 * $8_1) + Math_fround($7_1 * $15_1));
    HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround($8_1 * $6_1) + Math_fround($7_1 * $13_1));
    HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($8_1 * $9_1) + Math_fround($7_1 * $10_1));
    $5_1 = $5_1 + 1 | 0;
    if ($11_1 > Math_fround(1.1920928955078125e-07)) {
     break label$5
    }
   }
   $0_1 = $4_1 + ($5_1 << 4 | 0) | 0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $296_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[$0_1 >> 2] = $296_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $301_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $301_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $5_1 = $5_1 + 1 | 0;
  }
  return $5_1 | 0;
 }
 
 function $198($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $8_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $9_1 = Math_fround(0), i64toi32_i32$2 = 0, $6_1 = Math_fround(0), $14_1 = Math_fround(0), $5_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $7_1 = 0, $10_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $13_1 = 0, $15_1 = 0, $43_1 = 0, $48_1 = 0, $112_1 = Math_fround(0), $144_1 = 0, $148_1 = 0, $225_1 = 0, $230_1 = 0;
  $4_1 = 0;
  label$1 : {
   $5_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * Math_fround(HEAPF32[$0_1 >> 2])) + Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]))) + Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]))) - Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
   if ($5_1 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $43_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1;
   HEAP32[i64toi32_i32$0 >> 2] = $43_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $48_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $48_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $4_1 = 1;
  }
  label$2 : {
   label$3 : {
    if (($2_1 | 0) >= (2 | 0)) {
     break label$3
    }
    $6_1 = $5_1;
    break label$2;
   }
   $7_1 = $2_1 + -1 | 0;
   $8_1 = $1_1;
   $9_1 = $5_1;
   label$4 : while (1) {
    label$5 : {
     $10_1 = $8_1 + 16 | 0;
     $11_1 = Math_fround(HEAPF32[$10_1 >> 2]);
     $12_1 = Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]);
     $13_1 = $8_1 + 24 | 0;
     $14_1 = Math_fround(HEAPF32[$13_1 >> 2]);
     $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[$0_1 >> 2])) + Math_fround($12_1 * Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]))) + Math_fround($14_1 * Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]))) - Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
     $15_1 = $6_1 > Math_fround(1.1920928955078125e-07);
     if (($9_1 > Math_fround(1.1920928955078125e-07) | 0) == ($15_1 | 0)) {
      break label$5
     }
     $16_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
     $18_1 = Math_fround(HEAPF32[$8_1 >> 2]);
     $8_1 = $3_1 + ($4_1 << 4 | 0) | 0;
     HEAP32[($8_1 + 12 | 0) >> 2] = 0;
     $9_1 = Math_fround(Math_fround(-$9_1) / Math_fround($6_1 - $9_1));
     $112_1 = Math_fround($14_1 * $9_1);
     $14_1 = Math_fround(Math_fround(1.0) - $9_1);
     HEAPF32[($8_1 + 8 | 0) >> 2] = Math_fround($112_1 + Math_fround($17_1 * $14_1));
     HEAPF32[($8_1 + 4 | 0) >> 2] = Math_fround(Math_fround($12_1 * $9_1) + Math_fround($14_1 * $16_1));
     HEAPF32[$8_1 >> 2] = Math_fround(Math_fround($11_1 * $9_1) + Math_fround($14_1 * $18_1));
     $4_1 = $4_1 + 1 | 0;
    }
    label$6 : {
     if ($15_1) {
      break label$6
     }
     $8_1 = $3_1 + ($4_1 << 4 | 0) | 0;
     i64toi32_i32$2 = $10_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $144_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $8_1;
     HEAP32[$8_1 >> 2] = $144_1;
     HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $13_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $148_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $8_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $148_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = $4_1 + 1 | 0;
    }
    $8_1 = $10_1;
    $9_1 = $6_1;
    $7_1 = $7_1 + -1 | 0;
    if ($7_1) {
     continue label$4
    }
    break label$4;
   };
  }
  label$7 : {
   $8_1 = $5_1 > Math_fround(1.1920928955078125e-07);
   if (($8_1 | 0) == ($6_1 > Math_fround(1.1920928955078125e-07) | 0)) {
    break label$7
   }
   $0_1 = $1_1 + (($2_1 + -1 | 0) << 4 | 0) | 0;
   $11_1 = Math_fround(HEAPF32[$0_1 >> 2]);
   $12_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
   $16_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $17_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $0_1 = $3_1 + ($4_1 << 4 | 0) | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   $9_1 = Math_fround(Math_fround(-$6_1) / Math_fround($5_1 - $6_1));
   $6_1 = Math_fround(Math_fround(1.0) - $9_1);
   HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(Math_fround($14_1 * $6_1) + Math_fround($9_1 * $18_1));
   HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround($6_1 * $12_1) + Math_fround($9_1 * $17_1));
   HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($6_1 * $11_1) + Math_fround($9_1 * $16_1));
   $4_1 = $4_1 + 1 | 0;
  }
  label$8 : {
   if ($8_1) {
    break label$8
   }
   $8_1 = $3_1 + ($4_1 << 4 | 0) | 0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $225_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $8_1;
   HEAP32[$8_1 >> 2] = $225_1;
   HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $230_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $8_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $230_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $4_1 = $4_1 + 1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $199($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $3_1 = 0, $15_1 = 0, $6_1 = 0, $12_1 = 0, $4_1 = Math_fround(0), $16_1 = 0, $9_1 = Math_fround(0), $13_1 = Math_fround(0), $5_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $14_1 = Math_fround(0), $29_1 = 0, $32_1 = 0, $8_1 = 0, $130_1 = 0, $134_1 = 0, $164_1 = 0, $167_1 = 0, $17_1 = Math_fround(0), $261_1 = 0, $265_1 = 0, $284_1 = 0, $289_1 = 0, $302_1 = 0, $307_1 = 0, $321_1 = 0, $326_1 = 0, $340_1 = 0, $345_1 = 0;
  $3_1 = global$0 - 880 | 0;
  global$0 = $3_1;
  $4_1 = Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
  i64toi32_i32$2 = $0_1 + 56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $29_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1 + 296 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $29_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $32_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 288 | 0) >> 2] = $32_1;
  HEAP32[(i64toi32_i32$1 + 292 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    $6_1 = $196(i64toi32_i32$2 | 0, $1_1 | 0, i64toi32_i32$1 + 560 | 0 | 0) | 0;
    if ($6_1) {
     break label$2
    }
    $7_1 = 0;
    break label$1;
   }
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 280 | 0) >> 2] = -998637568;
   HEAP32[(i64toi32_i32$1 + 284 | 0) >> 2] = i64toi32_i32$0;
   $7_1 = 0;
   if (($6_1 | 0) <= (0 | 0)) {
    break label$1
   }
   $5_1 = Math_fround($5_1 + $4_1);
   $8_1 = $3_1 + 288 | 0;
   $9_1 = Math_fround(HEAPF32[($3_1 + 300 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[(($3_1 + 280 | 0) + 16 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($3_1 + 292 | 0) >> 2]);
   $12_1 = 0;
   $13_1 = Math_fround(-1.0e3);
   $7_1 = $3_1 + 560 | 0;
   $14_1 = Math_fround(HEAPF32[($3_1 + 288 | 0) >> 2]);
   $15_1 = 0;
   label$3 : while (1) {
    label$4 : {
     $4_1 = Math_fround($5_1 - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$7_1 >> 2]) * $14_1) + Math_fround(Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]) * $11_1)) + Math_fround(Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]) * $10_1)) - $9_1));
     if ($4_1 >= Math_fround(0.0) ^ 1 | 0) {
      break label$4
     }
     label$5 : {
      if ($4_1 > $13_1 ^ 1 | 0) {
       break label$5
      }
      HEAP32[($3_1 + 816 | 0) >> 2] = $15_1;
      $12_1 = 1;
      $13_1 = $4_1;
      break label$4;
     }
     if (Math_fround($4_1 + Math_fround(1.1920928955078125e-07)) >= $13_1 ^ 1 | 0) {
      break label$4
     }
     HEAP32[(($3_1 + 816 | 0) + ($12_1 << 2 | 0) | 0) >> 2] = $15_1;
     $12_1 = $12_1 + 1 | 0;
    }
    $7_1 = $7_1 + 16 | 0;
    $15_1 = $15_1 + 1 | 0;
    if (($6_1 | 0) != ($15_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
   HEAPF32[($3_1 + 280 | 0) >> 2] = $13_1;
   HEAP32[($3_1 + 284 | 0) >> 2] = $12_1;
   label$6 : {
    if (($12_1 | 0) < (1 | 0)) {
     break label$6
    }
    $7_1 = $3_1 + 304 | 0;
    $15_1 = $3_1 + 816 | 0;
    $6_1 = $12_1;
    label$7 : while (1) {
     $16_1 = ($3_1 + 560 | 0) + ((HEAP32[$15_1 >> 2] | 0) << 4 | 0) | 0;
     i64toi32_i32$2 = $16_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $130_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $7_1;
     HEAP32[i64toi32_i32$0 >> 2] = $130_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
     $134_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $134_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $15_1 = $15_1 + 4 | 0;
     $7_1 = $7_1 + 16 | 0;
     $6_1 = $6_1 + -1 | 0;
     if ($6_1) {
      continue label$7
     }
     break label$7;
    };
   }
   label$8 : {
    if ($12_1) {
     break label$8
    }
    $7_1 = 0;
    break label$1;
   }
   $7_1 = $3_1 + 292 | 0;
   HEAPF32[$7_1 >> 2] = Math_fround(-Math_fround(HEAPF32[$7_1 >> 2]));
   $7_1 = ($3_1 + 280 | 0) + 16 | 0;
   HEAPF32[$7_1 >> 2] = Math_fround(-Math_fround(HEAPF32[$7_1 >> 2]));
   HEAPF32[($3_1 + 288 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($3_1 + 288 | 0) >> 2]));
   i64toi32_i32$2 = $1_1 + 56 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $164_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1 + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $164_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $167_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $167_1;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
   label$9 : {
    $16_1 = $196(i64toi32_i32$2 | 0, $0_1 | 0, i64toi32_i32$1 + 560 | 0 | 0) | 0;
    if ($16_1) {
     break label$9
    }
    $7_1 = 0;
    break label$1;
   }
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = -998637568;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $7_1 = 0;
   if (($16_1 | 0) <= (0 | 0)) {
    break label$1
   }
   $1_1 = $3_1 + 8 | 0;
   $10_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
   $6_1 = 0;
   $9_1 = Math_fround(-1.0e3);
   $7_1 = $3_1 + 560 | 0;
   $17_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   $15_1 = 0;
   label$10 : while (1) {
    label$11 : {
     $4_1 = Math_fround($5_1 - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$7_1 >> 2]) * $17_1) + Math_fround(Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]) * $14_1)) + Math_fround(Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]) * $11_1)) - $10_1));
     if ($4_1 >= Math_fround(0.0) ^ 1 | 0) {
      break label$11
     }
     label$12 : {
      if ($4_1 > $9_1 ^ 1 | 0) {
       break label$12
      }
      HEAP32[($3_1 + 816 | 0) >> 2] = $15_1;
      $6_1 = 1;
      $9_1 = $4_1;
      break label$11;
     }
     if (Math_fround($4_1 + Math_fround(1.1920928955078125e-07)) >= $9_1 ^ 1 | 0) {
      break label$11
     }
     HEAP32[(($3_1 + 816 | 0) + ($6_1 << 2 | 0) | 0) >> 2] = $15_1;
     $6_1 = $6_1 + 1 | 0;
    }
    $7_1 = $7_1 + 16 | 0;
    $15_1 = $15_1 + 1 | 0;
    if (($16_1 | 0) != ($15_1 | 0)) {
     continue label$10
    }
    break label$10;
   };
   HEAPF32[$3_1 >> 2] = $9_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $6_1;
   label$13 : {
    if (($6_1 | 0) < (1 | 0)) {
     break label$13
    }
    $7_1 = $3_1 + 24 | 0;
    $15_1 = $3_1 + 816 | 0;
    $16_1 = $6_1;
    label$14 : while (1) {
     $0_1 = ($3_1 + 560 | 0) + ((HEAP32[$15_1 >> 2] | 0) << 4 | 0) | 0;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $261_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $7_1;
     HEAP32[i64toi32_i32$0 >> 2] = $261_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
     $265_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $265_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $15_1 = $15_1 + 4 | 0;
     $7_1 = $7_1 + 16 | 0;
     $16_1 = $16_1 + -1 | 0;
     if ($16_1) {
      continue label$14
     }
     break label$14;
    };
   }
   label$15 : {
    if ($6_1) {
     break label$15
    }
    $7_1 = 0;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if ($9_1 < $13_1 ^ 1 | 0) {
      break label$17
     }
     HEAPF32[$2_1 >> 2] = $9_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $6_1;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $284_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1;
     HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $284_1;
     HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $289_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1 + 16 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $289_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $15_1 = $6_1 << 4 | 0;
     $7_1 = ($2_1 + 8 | 0) + $15_1 | 0;
     $15_1 = ($3_1 + $15_1 | 0) + 8 | 0;
     label$18 : while (1) {
      i64toi32_i32$2 = $15_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $302_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $7_1;
      HEAP32[i64toi32_i32$0 >> 2] = $302_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $307_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $7_1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $307_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $15_1 = $15_1 + -16 | 0;
      $7_1 = $7_1 + -16 | 0;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue label$18
      }
      break label$16;
     };
    }
    HEAPF32[$2_1 >> 2] = $13_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = $12_1;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $321_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $321_1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $326_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $326_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $15_1 = $12_1 << 4 | 0;
    $7_1 = ($2_1 + 8 | 0) + $15_1 | 0;
    $15_1 = (($3_1 + 280 | 0) + $15_1 | 0) + 8 | 0;
    label$19 : while (1) {
     i64toi32_i32$2 = $15_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $340_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $7_1;
     HEAP32[i64toi32_i32$0 >> 2] = $340_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $345_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $345_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $15_1 = $15_1 + -16 | 0;
     $7_1 = $7_1 + -16 | 0;
     $12_1 = $12_1 + -1 | 0;
     if ($12_1) {
      continue label$19
     }
     break label$19;
    };
   }
   $7_1 = 1;
  }
  global$0 = $3_1 + 880 | 0;
  return $7_1 | 0;
 }
 
 function $200($0_1) {
  $0_1 = $0_1 | 0;
  $190($0_1 | 0) | 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 7464;
  HEAP32[($0_1 + 4 | 0) >> 2] = 2;
  return $0_1 | 0;
 }
 
 function $201($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $191($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $202($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 96 | 0) >> 2] | 0 | 0;
 }
 
 function $203($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   $0_1 = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + -2 | 0;
   if ($0_1 >>> 0 > 2 >>> 0) {
    break label$1
   }
   return HEAP32[(($0_1 << 2 | 0) + 7624 | 0) >> 2] | 0 | 0;
  }
  return 0 | 0;
 }
 
 function $204($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $13_1 = 0, $18_1 = 0, $23_1 = 0, $27_1 = 0, $33_1 = 0, $38_1 = 0, $43_1 = 0, $47_1 = 0, $52_1 = 0, $56_1 = 0, $61_1 = 0, $65_1 = 0, $70_1 = 0, $74_1 = 0, $79_1 = 0, $82_1 = 0, $88_1 = 0, $93_1 = 0, $98_1 = 0, $102_1 = 0, $107_1 = 0, $111_1 = 0, $116_1 = 0, $120_1 = 0, $125_1 = 0, $129_1 = 0, $134_1 = 0, $137_1 = 0, $140_1 = 0, $145_1 = 0, $150_1 = 0, $154_1 = 0, $159_1 = 0, $163_1 = 0, $168_1 = 0, $172_1 = 0, $177_1 = 0, $181_1 = 0, $186_1 = 0, $190_1 = 0;
  label$1 : {
   $4_1 = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + -2 | 0;
   if ($4_1 >>> 0 > 2 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($4_1 | 0) {
    default:
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] | 0;
     $13_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1;
     HEAP32[i64toi32_i32$0 >> 2] = $13_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$2 + 108 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $18_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $0_1 + 124 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $23_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $23_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1 + 116 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $27_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[i64toi32_i32$1 >> 2] = $27_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 1:
     if ($1_1 >>> 0 > 2 >>> 0) {
      break label$1
     }
     label$5 : {
      switch ($1_1 | 0) {
      default:
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] | 0;
       $33_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $2_1;
       HEAP32[i64toi32_i32$0 >> 2] = $33_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$2 + 108 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $38_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $2_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $38_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $0_1 + 124 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $43_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $3_1 + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $43_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $0_1 + 116 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $47_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $3_1;
       HEAP32[i64toi32_i32$1 >> 2] = $47_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       return;
      case 1:
       i64toi32_i32$2 = $0_1 + 124 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $52_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $2_1 + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $52_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $0_1 + 116 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $56_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $2_1;
       HEAP32[i64toi32_i32$1 >> 2] = $56_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $0_1 + 140 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $61_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $3_1 + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $61_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $0_1 + 132 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $65_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $3_1;
       HEAP32[i64toi32_i32$1 >> 2] = $65_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       return;
      case 2:
       break label$5;
      };
     }
     i64toi32_i32$2 = $0_1 + 140 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $70_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $70_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1 + 132 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $74_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[i64toi32_i32$1 >> 2] = $74_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $0_1 + 108 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $79_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $79_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] | 0;
     $82_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[i64toi32_i32$1 >> 2] = $82_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 2:
     break label$2;
    };
   }
   if ($1_1 >>> 0 > 5 >>> 0) {
    break label$1
   }
   label$8 : {
    switch ($1_1 | 0) {
    default:
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] | 0;
     $88_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1;
     HEAP32[i64toi32_i32$0 >> 2] = $88_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$2 + 108 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $93_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $93_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $0_1 + 124 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $98_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $98_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1 + 116 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $102_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[i64toi32_i32$1 >> 2] = $102_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 1:
     i64toi32_i32$2 = $0_1 + 124 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $107_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $107_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1 + 116 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $111_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[i64toi32_i32$1 >> 2] = $111_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $0_1 + 140 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $116_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $116_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1 + 132 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $120_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[i64toi32_i32$1 >> 2] = $120_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 2:
     i64toi32_i32$2 = $0_1 + 140 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $125_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $125_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1 + 132 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $129_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[i64toi32_i32$1 >> 2] = $129_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $0_1 + 108 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $134_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $134_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] | 0;
     $137_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[i64toi32_i32$1 >> 2] = $137_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] | 0;
     $140_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1;
     HEAP32[i64toi32_i32$0 >> 2] = $140_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$2 + 108 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $145_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $145_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $0_1 + 156 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $150_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $150_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1 + 148 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $154_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[i64toi32_i32$1 >> 2] = $154_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 4:
     i64toi32_i32$2 = $0_1 + 124 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $159_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $159_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1 + 116 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $163_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[i64toi32_i32$1 >> 2] = $163_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $0_1 + 156 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $168_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $168_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1 + 148 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $172_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[i64toi32_i32$1 >> 2] = $172_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     break label$8;
    };
   }
   i64toi32_i32$2 = $0_1 + 140 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $177_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $177_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1 + 132 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $181_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[i64toi32_i32$1 >> 2] = $181_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $0_1 + 156 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $186_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $186_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1 + 148 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $190_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1;
   HEAP32[i64toi32_i32$1 >> 2] = $190_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $205($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $15_1 = 0;
  $0_1 = $0_1 + ($1_1 << 4 | 0) | 0;
  i64toi32_i32$2 = $0_1 + 108 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $11_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1 + 100 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[i64toi32_i32$1 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $206($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
  return (($0_1 | 0) == (4 | 0) ? 4 : (($0_1 | 0) == (3 | 0)) << 1 | 0) | 0;
 }
 
 function $207($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
 }
 
 function $208($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $209($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  return 0 | 0;
 }
 
 function $210($0_1) {
  $0_1 = $0_1 | 0;
  $193($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $211($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $212($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $213($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 1025;
  i64toi32_i32$1 = $0_1 + 120 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 128 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 136 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 144 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 152 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 160 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 312 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 320 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 328 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 336 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 344 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 352 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 504 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 512 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 520 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 528 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 536 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 544 | 0) >> 2] = 0;
  HEAP32[($0_1 + 736 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 728 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 720 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 712 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 704 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 696 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 772 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 776 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 800 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 780 | 0) >> 2] = 0;
  return i64toi32_i32$1 | 0;
 }
 
 function $214($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = HEAP32[(0 + 1684 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   FUNCTION_TABLE[$3_1]($2_1) | 0;
   HEAP32[($1_1 + 116 | 0) >> 2] = 0;
  }
 }
 
 function $215($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $9_1 = Math_fround(0), $3_1 = Math_fround(0), $2_1 = Math_fround(0), $14_1 = Math_fround(0), $5_1 = Math_fround(0), $19_1 = Math_fround(0), $12_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $32_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $4_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $25_1 = Math_fround(0), $13_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $24_1 = Math_fround(0), $26_1 = Math_fround(0), $29_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $37_1 = Math_fround(0), $39_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $36_1 = Math_fround(0), $38_1 = Math_fround(0), $40_1 = Math_fround(0), $6_1 = 0, $50_1 = 0, $62_1 = 0, $162_1 = Math_fround(0), $174_1 = Math_fround(0), $309_1 = Math_fround(0), $334_1 = Math_fround(0), $369_1 = Math_fround(0), $385_1 = Math_fround(0), $425_1 = Math_fround(0), $441_1 = Math_fround(0), $507_1 = Math_fround(0), $552_1 = Math_fround(0), $565_1 = Math_fround(0), $599_1 = Math_fround(0), $612_1 = Math_fround(0), $677_1 = Math_fround(0), $687_1 = Math_fround(0), $710_1 = Math_fround(0), $720_1 = Math_fround(0), $754_1 = Math_fround(0), $819_1 = Math_fround(0), $832_1 = Math_fround(0), $855_1 = Math_fround(0), $865_1 = Math_fround(0), $893_1 = Math_fround(0), $903_1 = Math_fround(0), $1006_1 = Math_fround(0), $1066_1 = 0, $1076_1 = 0;
  $2_1 = Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]);
  $3_1 = Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]);
  $4_1 = $2_1 < $3_1;
  $50_1 = $4_1 ? 0 : -1;
  $5_1 = Math_fround(HEAPF32[($0_1 + 276 | 0) >> 2]);
  $2_1 = $4_1 ? $2_1 : $3_1;
  $4_1 = $5_1 < $2_1;
  $62_1 = $4_1 ? 1 : $50_1;
  $3_1 = Math_fround(HEAPF32[($0_1 + 468 | 0) >> 2]);
  $2_1 = $4_1 ? $5_1 : $2_1;
  $4_1 = $3_1 < $2_1;
  $6_1 = Math_fround(HEAPF32[($0_1 + 660 | 0) >> 2]) < ($4_1 ? $3_1 : $2_1);
  $4_1 = $6_1 ? 3 : $4_1 ? 2 : $62_1;
  $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (!(HEAPU8[(0 + 2980 | 0) >> 0] | 0)) {
        break label$5
       }
       label$6 : {
        if ($4_1) {
         break label$6
        }
        $7_1 = Math_fround(HEAPF32[($0_1 + 588 | 0) >> 2]);
        $8_1 = Math_fround(HEAPF32[($0_1 + 396 | 0) >> 2]);
        $9_1 = Math_fround($7_1 - $8_1);
        $10_1 = Math_fround(HEAPF32[($0_1 + 584 | 0) >> 2]);
        $11_1 = Math_fround(HEAPF32[($0_1 + 392 | 0) >> 2]);
        $12_1 = Math_fround($10_1 - $11_1);
        $13_1 = Math_fround(HEAPF32[($0_1 + 580 | 0) >> 2]);
        $14_1 = Math_fround(HEAPF32[($0_1 + 388 | 0) >> 2]);
        $15_1 = Math_fround($13_1 - $14_1);
        $5_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
        $3_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
        $16_1 = Math_fround(0.0);
        break label$4;
       }
       $17_1 = Math_fround(HEAPF32[($0_1 + 196 | 0) >> 2]);
       $16_1 = Math_fround($2_1 - $17_1);
       $10_1 = Math_fround(HEAPF32[($0_1 + 584 | 0) >> 2]);
       $11_1 = Math_fround(HEAPF32[($0_1 + 392 | 0) >> 2]);
       $12_1 = Math_fround($10_1 - $11_1);
       $3_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
       $18_1 = Math_fround(HEAPF32[($0_1 + 200 | 0) >> 2]);
       $5_1 = Math_fround($3_1 - $18_1);
       $13_1 = Math_fround(HEAPF32[($0_1 + 580 | 0) >> 2]);
       $14_1 = Math_fround(HEAPF32[($0_1 + 388 | 0) >> 2]);
       $15_1 = Math_fround($13_1 - $14_1);
       $9_1 = Math_fround(Math_fround($16_1 * $12_1) - Math_fround($5_1 * $15_1));
       $162_1 = Math_fround($9_1 * $9_1);
       $7_1 = Math_fround(HEAPF32[($0_1 + 588 | 0) >> 2]);
       $8_1 = Math_fround(HEAPF32[($0_1 + 396 | 0) >> 2]);
       $9_1 = Math_fround($7_1 - $8_1);
       $174_1 = Math_fround($5_1 * $9_1);
       $5_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
       $19_1 = Math_fround(HEAPF32[($0_1 + 204 | 0) >> 2]);
       $20_1 = Math_fround($5_1 - $19_1);
       $21_1 = Math_fround($174_1 - Math_fround($20_1 * $12_1));
       $16_1 = Math_fround(Math_fround($20_1 * $15_1) - Math_fround($16_1 * $9_1));
       $16_1 = Math_fround($162_1 + Math_fround(Math_fround($21_1 * $21_1) + Math_fround($16_1 * $16_1)));
       if (($4_1 | 0) != (1 | 0)) {
        break label$4
       }
       $2_1 = Math_fround($2_1 - Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]));
       $5_1 = Math_fround($5_1 - Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
       $3_1 = Math_fround($3_1 - Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]));
       $15_1 = Math_fround(0.0);
       break label$3;
      }
      $3_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
      $5_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
      label$7 : {
       label$8 : {
        label$9 : {
         label$10 : {
          if ($4_1) {
           break label$10
          }
          $17_1 = Math_fround(HEAPF32[($0_1 + 396 | 0) >> 2]);
          $22_1 = Math_fround(HEAPF32[($0_1 + 588 | 0) >> 2]);
          $15_1 = Math_fround($17_1 - $22_1);
          $8_1 = Math_fround(HEAPF32[($0_1 + 392 | 0) >> 2]);
          $23_1 = Math_fround(HEAPF32[($0_1 + 584 | 0) >> 2]);
          $24_1 = Math_fround($8_1 - $23_1);
          $11_1 = Math_fround(HEAPF32[($0_1 + 388 | 0) >> 2]);
          $25_1 = Math_fround(HEAPF32[($0_1 + 580 | 0) >> 2]);
          $26_1 = Math_fround($11_1 - $25_1);
          $12_1 = Math_fround($3_1 - $22_1);
          $27_1 = Math_fround($5_1 - $23_1);
          $28_1 = Math_fround($2_1 - $25_1);
          $9_1 = Math_fround($3_1 - $17_1);
          $19_1 = Math_fround($5_1 - $8_1);
          $18_1 = Math_fround($2_1 - $11_1);
          $16_1 = Math_fround(0.0);
          break label$9;
         }
         $21_1 = Math_fround(HEAPF32[($0_1 + 196 | 0) >> 2]);
         $10_1 = Math_fround($2_1 - $21_1);
         $8_1 = Math_fround(HEAPF32[($0_1 + 392 | 0) >> 2]);
         $23_1 = Math_fround(HEAPF32[($0_1 + 584 | 0) >> 2]);
         $24_1 = Math_fround($8_1 - $23_1);
         $20_1 = Math_fround(HEAPF32[($0_1 + 200 | 0) >> 2]);
         $7_1 = Math_fround($5_1 - $20_1);
         $11_1 = Math_fround(HEAPF32[($0_1 + 388 | 0) >> 2]);
         $25_1 = Math_fround(HEAPF32[($0_1 + 580 | 0) >> 2]);
         $26_1 = Math_fround($11_1 - $25_1);
         $9_1 = Math_fround(Math_fround($10_1 * $24_1) - Math_fround($7_1 * $26_1));
         $309_1 = Math_fround($9_1 * $9_1);
         $17_1 = Math_fround(HEAPF32[($0_1 + 396 | 0) >> 2]);
         $22_1 = Math_fround(HEAPF32[($0_1 + 588 | 0) >> 2]);
         $15_1 = Math_fround($17_1 - $22_1);
         $13_1 = Math_fround(HEAPF32[($0_1 + 204 | 0) >> 2]);
         $14_1 = Math_fround($3_1 - $13_1);
         $9_1 = Math_fround(Math_fround($7_1 * $15_1) - Math_fround($14_1 * $24_1));
         $334_1 = Math_fround($9_1 * $9_1);
         $9_1 = Math_fround(Math_fround($14_1 * $26_1) - Math_fround($10_1 * $15_1));
         $12_1 = Math_fround($309_1 + Math_fround($334_1 + Math_fround($9_1 * $9_1)));
         $18_1 = Math_fround($2_1 - $11_1);
         $29_1 = Math_fround($20_1 - $23_1);
         $19_1 = Math_fround($5_1 - $8_1);
         $30_1 = Math_fround($21_1 - $25_1);
         $9_1 = Math_fround(Math_fround($18_1 * $29_1) - Math_fround($19_1 * $30_1));
         $369_1 = Math_fround($9_1 * $9_1);
         $31_1 = Math_fround($13_1 - $22_1);
         $9_1 = Math_fround($3_1 - $17_1);
         $16_1 = Math_fround(Math_fround($19_1 * $31_1) - Math_fround($9_1 * $29_1));
         $385_1 = Math_fround($16_1 * $16_1);
         $16_1 = Math_fround(Math_fround($9_1 * $30_1) - Math_fround($18_1 * $31_1));
         $16_1 = Math_fround($369_1 + Math_fround($385_1 + Math_fround($16_1 * $16_1)));
         $16_1 = $12_1 > $16_1 ? $12_1 : $16_1;
         $32_1 = Math_fround($20_1 - $8_1);
         $28_1 = Math_fround($2_1 - $25_1);
         $33_1 = Math_fround($21_1 - $11_1);
         $27_1 = Math_fround($5_1 - $23_1);
         $12_1 = Math_fround(Math_fround($32_1 * $28_1) - Math_fround($33_1 * $27_1));
         $425_1 = Math_fround($12_1 * $12_1);
         $34_1 = Math_fround($13_1 - $17_1);
         $12_1 = Math_fround($3_1 - $22_1);
         $32_1 = Math_fround(Math_fround($34_1 * $27_1) - Math_fround($32_1 * $12_1));
         $441_1 = Math_fround($32_1 * $32_1);
         $32_1 = Math_fround(Math_fround($33_1 * $12_1) - Math_fround($34_1 * $28_1));
         $32_1 = Math_fround($425_1 + Math_fround($441_1 + Math_fround($32_1 * $32_1)));
         $16_1 = $16_1 > $32_1 ? $16_1 : $32_1;
         if (($4_1 | 0) != (1 | 0)) {
          break label$9
         }
         $35_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
         $36_1 = Math_fround($35_1 - $25_1);
         $32_1 = Math_fround($2_1 - $35_1);
         $37_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
         $38_1 = Math_fround($37_1 - $22_1);
         $39_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
         $40_1 = Math_fround($39_1 - $23_1);
         $34_1 = Math_fround($3_1 - $37_1);
         $33_1 = Math_fround($5_1 - $39_1);
         $15_1 = Math_fround(0.0);
         break label$8;
        }
        $35_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
        $32_1 = Math_fround($2_1 - $35_1);
        $39_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
        $33_1 = Math_fround($5_1 - $39_1);
        $14_1 = Math_fround(Math_fround($32_1 * $24_1) - Math_fround($33_1 * $26_1));
        $507_1 = Math_fround($14_1 * $14_1);
        $37_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
        $34_1 = Math_fround($3_1 - $37_1);
        $14_1 = Math_fround(Math_fround($33_1 * $15_1) - Math_fround($34_1 * $24_1));
        $15_1 = Math_fround(Math_fround($34_1 * $26_1) - Math_fround($32_1 * $15_1));
        $15_1 = Math_fround($507_1 + Math_fround(Math_fround($14_1 * $14_1) + Math_fround($15_1 * $15_1)));
        $40_1 = Math_fround($39_1 - $23_1);
        $36_1 = Math_fround($35_1 - $25_1);
        $14_1 = Math_fround(Math_fround($18_1 * $40_1) - Math_fround($19_1 * $36_1));
        $552_1 = Math_fround($14_1 * $14_1);
        $38_1 = Math_fround($37_1 - $22_1);
        $14_1 = Math_fround(Math_fround($19_1 * $38_1) - Math_fround($9_1 * $40_1));
        $565_1 = Math_fround($14_1 * $14_1);
        $14_1 = Math_fround(Math_fround($9_1 * $36_1) - Math_fround($18_1 * $38_1));
        $14_1 = Math_fround($552_1 + Math_fround($565_1 + Math_fround($14_1 * $14_1)));
        $15_1 = $15_1 > $14_1 ? $15_1 : $14_1;
        $24_1 = Math_fround($39_1 - $8_1);
        $26_1 = Math_fround($35_1 - $11_1);
        $14_1 = Math_fround(Math_fround($24_1 * $28_1) - Math_fround($26_1 * $27_1));
        $599_1 = Math_fround($14_1 * $14_1);
        $29_1 = Math_fround($37_1 - $17_1);
        $14_1 = Math_fround(Math_fround($29_1 * $27_1) - Math_fround($24_1 * $12_1));
        $612_1 = Math_fround($14_1 * $14_1);
        $14_1 = Math_fround(Math_fround($26_1 * $12_1) - Math_fround($29_1 * $28_1));
        $14_1 = Math_fround($599_1 + Math_fround($612_1 + Math_fround($14_1 * $14_1)));
        $15_1 = $15_1 > $14_1 ? $15_1 : $14_1;
        $13_1 = Math_fround(HEAPF32[($0_1 + 204 | 0) >> 2]);
        $14_1 = Math_fround($3_1 - $13_1);
        $20_1 = Math_fround(HEAPF32[($0_1 + 200 | 0) >> 2]);
        $7_1 = Math_fround($5_1 - $20_1);
        $21_1 = Math_fround(HEAPF32[($0_1 + 196 | 0) >> 2]);
        $10_1 = Math_fround($2_1 - $21_1);
        label$11 : {
         if (($4_1 | 0) != (2 | 0)) {
          break label$11
         }
         $22_1 = Math_fround($37_1 - $13_1);
         $23_1 = Math_fround($39_1 - $20_1);
         $25_1 = Math_fround($35_1 - $21_1);
         $12_1 = Math_fround(0.0);
         break label$7;
        }
        $31_1 = Math_fround($13_1 - $22_1);
        $29_1 = Math_fround($20_1 - $23_1);
        $30_1 = Math_fround($21_1 - $25_1);
       }
       $9_1 = Math_fround(Math_fround($32_1 * $29_1) - Math_fround($33_1 * $30_1));
       $677_1 = Math_fround($9_1 * $9_1);
       $9_1 = Math_fround(Math_fround($33_1 * $31_1) - Math_fround($34_1 * $29_1));
       $687_1 = Math_fround($9_1 * $9_1);
       $9_1 = Math_fround(Math_fround($34_1 * $30_1) - Math_fround($32_1 * $31_1));
       $9_1 = Math_fround($677_1 + Math_fround($687_1 + Math_fround($9_1 * $9_1)));
       $19_1 = Math_fround(Math_fround($10_1 * $40_1) - Math_fround($7_1 * $36_1));
       $710_1 = Math_fround($19_1 * $19_1);
       $19_1 = Math_fround(Math_fround($7_1 * $38_1) - Math_fround($14_1 * $40_1));
       $720_1 = Math_fround($19_1 * $19_1);
       $19_1 = Math_fround(Math_fround($14_1 * $36_1) - Math_fround($10_1 * $38_1));
       $19_1 = Math_fround($710_1 + Math_fround($720_1 + Math_fround($19_1 * $19_1)));
       $9_1 = $9_1 > $19_1 ? $9_1 : $19_1;
       $23_1 = Math_fround($39_1 - $20_1);
       $25_1 = Math_fround($35_1 - $21_1);
       $19_1 = Math_fround(Math_fround($23_1 * $28_1) - Math_fround($25_1 * $27_1));
       $754_1 = Math_fround($19_1 * $19_1);
       $22_1 = Math_fround($37_1 - $13_1);
       $19_1 = Math_fround(Math_fround($22_1 * $27_1) - Math_fround($23_1 * $12_1));
       $12_1 = Math_fround(Math_fround($25_1 * $12_1) - Math_fround($22_1 * $28_1));
       $12_1 = Math_fround($754_1 + Math_fround(Math_fround($19_1 * $19_1) + Math_fround($12_1 * $12_1)));
       $12_1 = $9_1 > $12_1 ? $9_1 : $12_1;
       $9_1 = Math_fround(0.0);
       if ($6_1) {
        break label$1
       }
       $29_1 = Math_fround($37_1 - $17_1);
       $24_1 = Math_fround($39_1 - $8_1);
       $26_1 = Math_fround($35_1 - $11_1);
       $9_1 = Math_fround($3_1 - $17_1);
       $19_1 = Math_fround($5_1 - $8_1);
       $18_1 = Math_fround($2_1 - $11_1);
      }
      $2_1 = Math_fround($20_1 - $8_1);
      $3_1 = Math_fround($21_1 - $11_1);
      $5_1 = Math_fround(Math_fround($32_1 * $2_1) - Math_fround($33_1 * $3_1));
      $819_1 = Math_fround($5_1 * $5_1);
      $5_1 = Math_fround($13_1 - $17_1);
      $2_1 = Math_fround(Math_fround($33_1 * $5_1) - Math_fround($34_1 * $2_1));
      $832_1 = Math_fround($2_1 * $2_1);
      $2_1 = Math_fround(Math_fround($34_1 * $3_1) - Math_fround($32_1 * $5_1));
      $2_1 = Math_fround($819_1 + Math_fround($832_1 + Math_fround($2_1 * $2_1)));
      $3_1 = Math_fround(Math_fround($10_1 * $24_1) - Math_fround($7_1 * $26_1));
      $855_1 = Math_fround($3_1 * $3_1);
      $3_1 = Math_fround(Math_fround($7_1 * $29_1) - Math_fround($14_1 * $24_1));
      $865_1 = Math_fround($3_1 * $3_1);
      $3_1 = Math_fround(Math_fround($14_1 * $26_1) - Math_fround($10_1 * $29_1));
      $3_1 = Math_fround($855_1 + Math_fround($865_1 + Math_fround($3_1 * $3_1)));
      $2_1 = $2_1 > $3_1 ? $2_1 : $3_1;
      $3_1 = Math_fround(Math_fround($23_1 * $18_1) - Math_fround($25_1 * $19_1));
      $893_1 = Math_fround($3_1 * $3_1);
      $3_1 = Math_fround(Math_fround($22_1 * $19_1) - Math_fround($23_1 * $9_1));
      $903_1 = Math_fround($3_1 * $3_1);
      $3_1 = Math_fround(Math_fround($25_1 * $9_1) - Math_fround($22_1 * $18_1));
      $3_1 = Math_fround($893_1 + Math_fround($903_1 + Math_fround($3_1 * $3_1)));
      $9_1 = $2_1 > $3_1 ? $2_1 : $3_1;
      break label$1;
     }
     $2_1 = Math_fround($2_1 - Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]));
     $3_1 = Math_fround($3_1 - Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]));
     $19_1 = Math_fround(Math_fround($2_1 * $12_1) - Math_fround($3_1 * $15_1));
     $5_1 = Math_fround($5_1 - Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
     $12_1 = Math_fround(Math_fround($3_1 * $9_1) - Math_fround($5_1 * $12_1));
     $9_1 = Math_fround(Math_fround($5_1 * $15_1) - Math_fround($2_1 * $9_1));
     $15_1 = Math_fround(Math_fround($19_1 * $19_1) + Math_fround(Math_fround($12_1 * $12_1) + Math_fround($9_1 * $9_1)));
     $19_1 = Math_fround(HEAPF32[($0_1 + 204 | 0) >> 2]);
     $18_1 = Math_fround(HEAPF32[($0_1 + 200 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($0_1 + 196 | 0) >> 2]);
     $12_1 = Math_fround(0.0);
     if (($4_1 | 0) == (2 | 0)) {
      break label$2
     }
    }
    $9_1 = Math_fround($10_1 - $18_1);
    $12_1 = Math_fround($13_1 - $17_1);
    $10_1 = Math_fround(Math_fround($2_1 * $9_1) - Math_fround($3_1 * $12_1));
    $7_1 = Math_fround($7_1 - $19_1);
    $9_1 = Math_fround(Math_fround($3_1 * $7_1) - Math_fround($5_1 * $9_1));
    $1006_1 = Math_fround($9_1 * $9_1);
    $9_1 = Math_fround(Math_fround($5_1 * $12_1) - Math_fround($2_1 * $7_1));
    $12_1 = Math_fround(Math_fround($10_1 * $10_1) + Math_fround($1006_1 + Math_fround($9_1 * $9_1)));
    $9_1 = Math_fround(0.0);
    if ($6_1) {
     break label$1
    }
   }
   $9_1 = Math_fround($11_1 - $18_1);
   $18_1 = Math_fround($14_1 - $17_1);
   $17_1 = Math_fround(Math_fround($2_1 * $9_1) - Math_fround($3_1 * $18_1));
   $19_1 = Math_fround($8_1 - $19_1);
   $3_1 = Math_fround(Math_fround($3_1 * $19_1) - Math_fround($5_1 * $9_1));
   $2_1 = Math_fround(Math_fround($5_1 * $18_1) - Math_fround($2_1 * $19_1));
   $9_1 = Math_fround(Math_fround($17_1 * $17_1) + Math_fround(Math_fround($3_1 * $3_1) + Math_fround($2_1 * $2_1)));
  }
  $2_1 = Math_fround(Math_abs($16_1));
  $0_1 = $2_1 > Math_fround(-999999984306749440.0);
  $1066_1 = $0_1 ? 0 : -1;
  $3_1 = Math_fround(Math_abs($15_1));
  $2_1 = $0_1 ? $2_1 : Math_fround(-999999984306749440.0);
  $0_1 = $3_1 > $2_1;
  $1076_1 = $0_1 ? 1 : $1066_1;
  $5_1 = Math_fround(Math_abs($12_1));
  $2_1 = $0_1 ? $3_1 : $2_1;
  $0_1 = $5_1 > $2_1;
  return (Math_fround(Math_abs($9_1)) > ($0_1 ? $5_1 : $2_1) ? 3 : $0_1 ? 2 : $1076_1) | 0;
 }
 
 function $216($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $8_1 = Math_fround(0), $7_1 = Math_fround(0), $3_1 = 0, $2_1 = 0, $9_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $34_1 = Math_fround(0), $42_1 = Math_fround(0);
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 780 | 0) >> 2] | 0;
    if (($2_1 | 0) >= (1 | 0)) {
     break label$2
    }
    $1_1 = -1;
    break label$1;
   }
   $3_1 = $0_1 + 8 | 0;
   $4_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $7_1 = Math_fround(HEAPF32[($0_1 + 784 | 0) >> 2]);
   $7_1 = Math_fround($7_1 * $7_1);
   $0_1 = 0;
   $1_1 = -1;
   label$3 : while (1) {
    $8_1 = Math_fround(Math_fround(HEAPF32[($3_1 + -4 | 0) >> 2]) - $6_1);
    $34_1 = Math_fround($8_1 * $8_1);
    $8_1 = Math_fround(Math_fround(HEAPF32[$3_1 >> 2]) - $5_1);
    $42_1 = Math_fround($34_1 + Math_fround($8_1 * $8_1));
    $8_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) - $4_1);
    $8_1 = Math_fround($42_1 + Math_fround($8_1 * $8_1));
    $9_1 = $8_1 < $7_1;
    $7_1 = $9_1 ? $8_1 : $7_1;
    $1_1 = $9_1 ? $0_1 : $1_1;
    $3_1 = $3_1 + 192 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($2_1 | 0) != ($0_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  return $1_1 | 0;
 }
 
 function $217($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 784 | 0) >> 2]));
 }
 
 function $218($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 780 | 0) >> 2] | 0;
    if (($3_1 | 0) != (4 | 0)) {
     break label$2
    }
    $3_1 = $215($0_1 | 0, $1_1 | 0) | 0;
    $4_1 = ($0_1 + Math_imul($3_1, 192) | 0) + 120 | 0;
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    if (!$5_1) {
     break label$1
    }
    $6_1 = HEAP32[(0 + 1684 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$1
    }
    FUNCTION_TABLE[$6_1]($5_1) | 0;
    HEAP32[$4_1 >> 2] = 0;
    break label$1;
   }
   HEAP32[($0_1 + 780 | 0) >> 2] = $3_1 + 1 | 0;
  }
  $3_1 = ($3_1 | 0) > (0 | 0) ? $3_1 : 0;
  $7(($0_1 + Math_imul($3_1, 192) | 0) + 4 | 0 | 0, $1_1 | 0, 192 | 0) | 0;
  return $3_1 | 0;
 }
 
 function $219($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $19_1 = Math_fround(0), $17_1 = Math_fround(0), $6_1 = 0, $18_1 = Math_fround(0), i64toi32_i32$1 = 0, $4_1 = 0, $23_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $13_1 = Math_fround(0), $7_1 = Math_fround(0), $11_1 = Math_fround(0), $15_1 = Math_fround(0), $21_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = Math_fround(0), $16_1 = Math_fround(0), $70_1 = Math_fround(0), $77_1 = Math_fround(0), $20_1 = Math_fround(0), $22_1 = Math_fround(0), $153_1 = Math_fround(0), $160_1 = Math_fround(0), $324_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 780 | 0) >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = (Math_imul($4_1, 192) + $0_1 | 0) + -188 | 0;
   $6_1 = $4_1;
   label$2 : while (1) {
    $7_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
    $8_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $9_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $11_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
    $12_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
    $14_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
    $15_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
    $16_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
    $18_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
    HEAP32[($5_1 + 60 | 0) >> 2] = 0;
    $19_1 = Math_fround(HEAPF32[$5_1 >> 2]);
    $70_1 = Math_fround($18_1 * $19_1);
    $18_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
    $77_1 = Math_fround($70_1 + Math_fround($17_1 * $18_1));
    $17_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
    $15_1 = Math_fround($15_1 + Math_fround($77_1 + Math_fround($16_1 * $17_1)));
    HEAPF32[($5_1 + 56 | 0) >> 2] = $15_1;
    $11_1 = Math_fround($11_1 + Math_fround(Math_fround(Math_fround($19_1 * $14_1) + Math_fround($18_1 * $13_1)) + Math_fround($17_1 * $12_1)));
    HEAPF32[($5_1 + 52 | 0) >> 2] = $11_1;
    $7_1 = Math_fround($7_1 + Math_fround(Math_fround(Math_fround($19_1 * $10_1) + Math_fround($18_1 * $9_1)) + Math_fround($17_1 * $8_1)));
    HEAPF32[($5_1 + 48 | 0) >> 2] = $7_1;
    $8_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
    $9_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
    $12_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
    $14_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
    $16_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    $18_1 = Math_fround(HEAPF32[$2_1 >> 2]);
    $17_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    HEAP32[($5_1 + 44 | 0) >> 2] = 0;
    $19_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
    $153_1 = Math_fround($18_1 * $19_1);
    $18_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
    $160_1 = Math_fround($153_1 + Math_fround($17_1 * $18_1));
    $17_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
    $21_1 = Math_fround($21_1 + Math_fround($160_1 + Math_fround($22_1 * $17_1)));
    HEAPF32[($5_1 + 32 | 0) >> 2] = $21_1;
    $13_1 = Math_fround($13_1 + Math_fround(Math_fround(Math_fround($19_1 * $16_1) + Math_fround($18_1 * $20_1)) + Math_fround($17_1 * $14_1)));
    HEAPF32[($5_1 + 36 | 0) >> 2] = $13_1;
    $19_1 = Math_fround($8_1 + Math_fround(Math_fround(Math_fround($19_1 * $10_1) + Math_fround($18_1 * $12_1)) + Math_fround($17_1 * $9_1)));
    HEAPF32[($5_1 + 40 | 0) >> 2] = $19_1;
    HEAPF32[($5_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($7_1 - $21_1) * Math_fround(HEAPF32[($5_1 + 64 | 0) >> 2])) + Math_fround(Math_fround($11_1 - $13_1) * Math_fround(HEAPF32[($5_1 + 68 | 0) >> 2]))) + Math_fround(Math_fround($15_1 - $19_1) * Math_fround(HEAPF32[($5_1 + 72 | 0) >> 2])));
    $23_1 = $5_1 + 156 | 0;
    HEAP32[$23_1 >> 2] = (HEAP32[$23_1 >> 2] | 0) + 1 | 0;
    $5_1 = $5_1 + -192 | 0;
    $6_1 = $6_1 + -1 | 0;
    if (($6_1 | 0) > (0 | 0)) {
     continue label$2
    }
    break label$2;
   };
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $1_1 = Math_imul($4_1, 192);
   label$3 : while (1) {
    $4_1 = $4_1 + -1 | 0;
    $5_1 = $0_1 + $1_1 | 0;
    $2_1 = $5_1 + -188 | 0;
    label$4 : {
     label$5 : {
      $19_1 = Math_fround(HEAPF32[($5_1 + -108 | 0) >> 2]);
      $18_1 = Math_fround(HEAPF32[($0_1 + 784 | 0) >> 2]);
      if ($19_1 <= $18_1) {
       break label$5
      }
      label$6 : {
       $5_1 = $5_1 + -72 | 0;
       $6_1 = HEAP32[$5_1 >> 2] | 0;
       if (!$6_1) {
        break label$6
       }
       $23_1 = HEAP32[(0 + 1684 | 0) >> 2] | 0;
       if (!$23_1) {
        break label$6
       }
       FUNCTION_TABLE[$23_1]($6_1) | 0;
       HEAP32[$5_1 >> 2] = 0;
      }
      label$7 : {
       $5_1 = HEAP32[($0_1 + 780 | 0) >> 2] | 0;
       $6_1 = $5_1 + -1 | 0;
       if (($4_1 | 0) == ($6_1 | 0)) {
        break label$7
       }
       $5_1 = $0_1 + Math_imul($6_1, 192) | 0;
       $7($2_1 | 0, $5_1 + 4 | 0 | 0, 192 | 0) | 0;
       i64toi32_i32$1 = $5_1 + 120 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($5_1 + 160 | 0) >> 2] = 0;
       i64toi32_i32$1 = $5_1 + 128 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($5_1 + 136 | 0) >> 2] = 0;
       $5_1 = HEAP32[($0_1 + 780 | 0) >> 2] | 0;
      }
      $5_1 = $5_1 + -1 | 0;
      HEAP32[($0_1 + 780 | 0) >> 2] = $5_1;
      if ($5_1) {
       break label$4
      }
      $5_1 = HEAP32[(0 + 1696 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$4
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
      FUNCTION_TABLE[$5_1]($3_1 + 12 | 0);
      break label$4;
     }
     label$8 : {
      $17_1 = Math_fround(Math_fround(HEAPF32[($5_1 + -156 | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[($5_1 + -140 | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[($5_1 + -124 | 0) >> 2]) * $19_1)));
      $324_1 = Math_fround($17_1 * $17_1);
      $17_1 = Math_fround(Math_fround(HEAPF32[($5_1 + -152 | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[($5_1 + -136 | 0) >> 2]) - Math_fround($19_1 * Math_fround(HEAPF32[($5_1 + -120 | 0) >> 2]))));
      $19_1 = Math_fround(Math_fround(HEAPF32[($5_1 + -148 | 0) >> 2]) - Math_fround(Math_fround(HEAPF32[($5_1 + -132 | 0) >> 2]) - Math_fround($19_1 * Math_fround(HEAPF32[($5_1 + -116 | 0) >> 2]))));
      if (Math_fround(Math_fround($324_1 + Math_fround($17_1 * $17_1)) + Math_fround($19_1 * $19_1)) > Math_fround($18_1 * $18_1) ^ 1 | 0) {
       break label$8
      }
      label$9 : {
       $5_1 = $5_1 + -72 | 0;
       $6_1 = HEAP32[$5_1 >> 2] | 0;
       if (!$6_1) {
        break label$9
       }
       $23_1 = HEAP32[(0 + 1684 | 0) >> 2] | 0;
       if (!$23_1) {
        break label$9
       }
       FUNCTION_TABLE[$23_1]($6_1) | 0;
       HEAP32[$5_1 >> 2] = 0;
      }
      label$10 : {
       $5_1 = HEAP32[($0_1 + 780 | 0) >> 2] | 0;
       $6_1 = $5_1 + -1 | 0;
       if (($4_1 | 0) == ($6_1 | 0)) {
        break label$10
       }
       $5_1 = $0_1 + Math_imul($6_1, 192) | 0;
       $7($2_1 | 0, $5_1 + 4 | 0 | 0, 192 | 0) | 0;
       i64toi32_i32$1 = $5_1 + 120 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($5_1 + 160 | 0) >> 2] = 0;
       i64toi32_i32$1 = $5_1 + 128 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($5_1 + 136 | 0) >> 2] = 0;
       $5_1 = HEAP32[($0_1 + 780 | 0) >> 2] | 0;
      }
      $5_1 = $5_1 + -1 | 0;
      HEAP32[($0_1 + 780 | 0) >> 2] = $5_1;
      if ($5_1) {
       break label$4
      }
      $5_1 = HEAP32[(0 + 1696 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$4
      }
      HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
      FUNCTION_TABLE[$5_1]($3_1 + 8 | 0);
      break label$4;
     }
     $5_1 = HEAP32[(0 + 1688 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$4
     }
     FUNCTION_TABLE[$5_1]($2_1, HEAP32[($0_1 + 772 | 0) >> 2] | 0, HEAP32[($0_1 + 776 | 0) >> 2] | 0) | 0;
    }
    $1_1 = $1_1 + -192 | 0;
    if (($4_1 | 0) > (0 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $220($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(Math_fround(Math_min(Math_fround(Math_max(Math_fround(Math_fround(HEAPF32[($0_1 + 228 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 228 | 0) >> 2])), Math_fround(-10.0))), Math_fround(10.0))));
 }
 
 function $221($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 232 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 232 | 0) >> 2])));
 }
 
 function $222($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 7720;
  return $0_1 | 0;
 }
 
 function $223($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $16_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = Math_fround(0), $11_1 = 0, $8_1 = Math_fround(0), $7_1 = Math_fround(0), $13_1 = 0, $5_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $33_1 = 0, $32_1 = 0, i64toi32_i32$2 = 0, $15_1 = 0, $14_1 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $34_1 = 0, $35_1 = 0, $12_1 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $270_1 = 0, $320_1 = 0, $345_1 = 0, $350_1 = 0, $36_1 = 0, $654_1 = 0;
  $4_1 = global$0 - 192 | 0;
  global$0 = $4_1;
  label$1 : {
   if (Math_fround($217(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0)) < $3_1) {
    break label$1
   }
   $5_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $6_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * $3_1) + $5_1);
   $7_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $8_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * $3_1) + $7_1);
   $9_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $10_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * $3_1) + $9_1);
   $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $12_1 = HEAP32[($11_1 + 780 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     $13_1 = HEAP32[($11_1 + 772 | 0) >> 2] | 0;
     $14_1 = HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     $15_1 = ($13_1 | 0) == ($14_1 | 0);
     if ($15_1) {
      break label$3
     }
     $16_1 = HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     $17_1 = Math_fround($10_1 - Math_fround(HEAPF32[($16_1 + 52 | 0) >> 2]));
     $18_1 = Math_fround($8_1 - Math_fround(HEAPF32[($16_1 + 56 | 0) >> 2]));
     $19_1 = Math_fround($6_1 - Math_fround(HEAPF32[($16_1 + 60 | 0) >> 2]));
     $20_1 = Math_fround(Math_fround(Math_fround($17_1 * Math_fround(HEAPF32[($16_1 + 12 | 0) >> 2])) + Math_fround($18_1 * Math_fround(HEAPF32[($16_1 + 28 | 0) >> 2]))) + Math_fround($19_1 * Math_fround(HEAPF32[($16_1 + 44 | 0) >> 2])));
     $21_1 = Math_fround(Math_fround(Math_fround($17_1 * Math_fround(HEAPF32[($16_1 + 8 | 0) >> 2])) + Math_fround($18_1 * Math_fround(HEAPF32[($16_1 + 24 | 0) >> 2]))) + Math_fround($19_1 * Math_fround(HEAPF32[($16_1 + 40 | 0) >> 2])));
     $17_1 = Math_fround(Math_fround(Math_fround($17_1 * Math_fround(HEAPF32[($16_1 + 4 | 0) >> 2])) + Math_fround($18_1 * Math_fround(HEAPF32[($16_1 + 20 | 0) >> 2]))) + Math_fround($19_1 * Math_fround(HEAPF32[($16_1 + 36 | 0) >> 2])));
     $16_1 = $14_1;
     break label$2;
    }
    $17_1 = Math_fround($10_1 - Math_fround(HEAPF32[($13_1 + 52 | 0) >> 2]));
    $18_1 = Math_fround($8_1 - Math_fround(HEAPF32[($13_1 + 56 | 0) >> 2]));
    $19_1 = Math_fround($6_1 - Math_fround(HEAPF32[($13_1 + 60 | 0) >> 2]));
    $20_1 = Math_fround(Math_fround(Math_fround($17_1 * Math_fround(HEAPF32[($13_1 + 12 | 0) >> 2])) + Math_fround($18_1 * Math_fround(HEAPF32[($13_1 + 28 | 0) >> 2]))) + Math_fround($19_1 * Math_fround(HEAPF32[($13_1 + 44 | 0) >> 2])));
    $21_1 = Math_fround(Math_fround(Math_fround($17_1 * Math_fround(HEAPF32[($13_1 + 8 | 0) >> 2])) + Math_fround($18_1 * Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]))) + Math_fround($19_1 * Math_fround(HEAPF32[($13_1 + 40 | 0) >> 2])));
    $17_1 = Math_fround(Math_fround(Math_fround($17_1 * Math_fround(HEAPF32[($13_1 + 4 | 0) >> 2])) + Math_fround($18_1 * Math_fround(HEAPF32[($13_1 + 20 | 0) >> 2]))) + Math_fround($19_1 * Math_fround(HEAPF32[($13_1 + 36 | 0) >> 2])));
    $16_1 = HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   }
   $18_1 = Math_fround(HEAPF32[($16_1 + 20 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[($16_1 + 36 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[($16_1 + 40 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($16_1 + 8 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($16_1 + 24 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[($16_1 + 44 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[($16_1 + 60 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[($16_1 + 12 | 0) >> 2]);
   $28_1 = Math_fround(HEAPF32[($16_1 + 52 | 0) >> 2]);
   $29_1 = Math_fround(HEAPF32[($16_1 + 28 | 0) >> 2]);
   $30_1 = Math_fround(HEAPF32[($16_1 + 56 | 0) >> 2]);
   $31_1 = Math_fround(HEAPF32[($16_1 + 4 | 0) >> 2]);
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
   i64toi32_i32$1 = $4_1 + 124 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 132 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 140 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 148 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 156 | 0) >> 2] = 0;
   i64toi32_i32$2 = $1_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $270_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1 + 72 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $270_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $9_1 = Math_fround($9_1 - $28_1);
   $7_1 = Math_fround($7_1 - $30_1);
   $5_1 = Math_fround($5_1 - $26_1);
   HEAPF32[($4_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($27_1 * $9_1) + Math_fround($29_1 * $7_1)) + Math_fround($25_1 * $5_1));
   HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $23_1) + Math_fround($7_1 * $24_1)) + Math_fround($5_1 * $22_1));
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
   HEAPF32[($4_1 + 8 | 0) >> 2] = $20_1;
   HEAPF32[($4_1 + 4 | 0) >> 2] = $21_1;
   HEAPF32[$4_1 >> 2] = $17_1;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$1 = 0;
   HEAP32[($4_1 + 84 | 0) >> 2] = 0;
   HEAP32[($4_1 + 88 | 0) >> 2] = i64toi32_i32$1;
   HEAPF32[($4_1 + 80 | 0) >> 2] = $3_1;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$1 = 0;
   HEAP32[($4_1 + 92 | 0) >> 2] = 0;
   HEAP32[($4_1 + 96 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$1 = 0;
   HEAP32[($4_1 + 116 | 0) >> 2] = 0;
   HEAP32[($4_1 + 120 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $320_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1;
   HEAP32[($4_1 + 64 | 0) >> 2] = $320_1;
   HEAP32[($4_1 + 68 | 0) >> 2] = i64toi32_i32$0;
   HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $31_1) + Math_fround($7_1 * $18_1)) + Math_fround($5_1 * $19_1));
   HEAP32[($4_1 + 60 | 0) >> 2] = 0;
   HEAPF32[($4_1 + 56 | 0) >> 2] = $6_1;
   HEAPF32[($4_1 + 52 | 0) >> 2] = $8_1;
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $345_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1 + 40 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $345_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAPF32[($4_1 + 48 | 0) >> 2] = $10_1;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[$2_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $350_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1;
   HEAP32[($4_1 + 32 | 0) >> 2] = $350_1;
   HEAP32[($4_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   $2_1 = $216($11_1 | 0, $4_1 | 0) | 0;
   $32_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $16_1 = HEAP32[($32_1 + 8 | 0) >> 2] | 0;
   $33_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $1_1 = HEAP32[($33_1 + 8 | 0) >> 2] | 0;
   HEAPF32[($4_1 + 96 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($16_1 + 232 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 232 | 0) >> 2]));
   $3_1 = Math_fround(HEAPF32[($16_1 + 228 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($1_1 + 228 | 0) >> 2]);
   HEAPF32[($4_1 + 84 | 0) >> 2] = Math_fround(Math_min(Math_fround(Math_max(Math_fround($3_1 * $6_1), Math_fround(-10.0))), Math_fround(10.0)));
   HEAPF32[($4_1 + 88 | 0) >> 2] = Math_fround(Math_min(Math_fround(Math_max(Math_fround(Math_fround($6_1 * Math_fround(HEAPF32[($16_1 + 236 | 0) >> 2])) + Math_fround($3_1 * Math_fround(HEAPF32[($1_1 + 236 | 0) >> 2]))), Math_fround(-10.0))), Math_fround(10.0)));
   HEAPF32[($4_1 + 92 | 0) >> 2] = Math_fround(Math_min(Math_fround(Math_max(Math_fround(Math_fround($6_1 * Math_fround(HEAPF32[($16_1 + 240 | 0) >> 2])) + Math_fround($3_1 * Math_fround(HEAPF32[($1_1 + 240 | 0) >> 2]))), Math_fround(-10.0))), Math_fround(10.0)));
   label$4 : {
    label$5 : {
     $11_1 = HEAP32[($16_1 + 204 | 0) >> 2] | 0;
     if ($11_1 & 128 | 0) {
      break label$5
     }
     if (!((HEAPU8[($1_1 + 204 | 0) >> 0] | 0) & 128 | 0)) {
      break label$4
     }
    }
    HEAPF32[($4_1 + 148 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($16_1 + 244 | 0) >> 2]) + Math_fround(HEAPF32[($1_1 + 244 | 0) >> 2]));
    HEAPF32[($4_1 + 144 | 0) >> 2] = Math_fround(Math_fround(1.0) / Math_fround(Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[((HEAP32[($32_1 + 8 | 0) >> 2] | 0) + 248 | 0) >> 2])) + Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[((HEAP32[($33_1 + 8 | 0) >> 2] | 0) + 248 | 0) >> 2]))));
    HEAP32[($4_1 + 120 | 0) >> 2] = HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 8 | 0;
    $11_1 = HEAP32[((HEAP32[($32_1 + 8 | 0) >> 2] | 0) + 204 | 0) >> 2] | 0;
   }
   label$6 : {
    label$7 : {
     if ($11_1 & 512 | 0) {
      break label$7
     }
     if (!((HEAPU8[((HEAP32[($33_1 + 8 | 0) >> 2] | 0) + 205 | 0) >> 0] | 0) & 2 | 0)) {
      break label$6
     }
    }
    HEAP32[($4_1 + 120 | 0) >> 2] = HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 16 | 0;
   }
   label$8 : {
    label$9 : {
     $3_1 = Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]);
     if (Math_fround(Math_abs($3_1)) > Math_fround(.7071067690849304) ^ 1 | 0) {
      break label$9
     }
     $9_1 = Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]);
     $6_1 = Math_fround(Math_fround($3_1 * $3_1) + Math_fround($9_1 * $9_1));
     $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($6_1)));
     $6_1 = Math_fround($6_1 * $7_1);
     $5_1 = Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]);
     $8_1 = Math_fround(-Math_fround($3_1 * $7_1));
     $10_1 = Math_fround($5_1 * $8_1);
     $3_1 = Math_fround($9_1 * $7_1);
     $9_1 = Math_fround(-Math_fround($5_1 * $3_1));
     $7_1 = Math_fround(0.0);
     break label$8;
    }
    $6_1 = Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]);
    $8_1 = Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]);
    $10_1 = Math_fround(Math_fround($6_1 * $6_1) + Math_fround($8_1 * $8_1));
    $5_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($10_1)));
    $10_1 = Math_fround($10_1 * $5_1);
    $7_1 = Math_fround(-Math_fround($8_1 * $5_1));
    $9_1 = Math_fround($3_1 * $7_1);
    $8_1 = Math_fround($6_1 * $5_1);
    $6_1 = Math_fround(-Math_fround($3_1 * $8_1));
    $3_1 = Math_fround(0.0);
   }
   $1_1 = $0_1 + 4 | 0;
   HEAPF32[($4_1 + 184 | 0) >> 2] = $10_1;
   HEAPF32[($4_1 + 180 | 0) >> 2] = $9_1;
   HEAPF32[($4_1 + 168 | 0) >> 2] = $3_1;
   HEAPF32[($4_1 + 164 | 0) >> 2] = $8_1;
   HEAPF32[($4_1 + 176 | 0) >> 2] = $6_1;
   HEAPF32[($4_1 + 160 | 0) >> 2] = $7_1;
   label$10 : {
    label$11 : {
     if ($15_1) {
      break label$11
     }
     $16_1 = $0_1 + 24 | 0;
     $11_1 = $0_1 + 28 | 0;
     $32_1 = $0_1 + 16 | 0;
     $33_1 = $0_1 + 20 | 0;
     break label$10;
    }
    $16_1 = $0_1 + 28 | 0;
    $11_1 = $0_1 + 24 | 0;
    $32_1 = $0_1 + 20 | 0;
    $33_1 = $0_1 + 16 | 0;
   }
   HEAP32[($4_1 + 112 | 0) >> 2] = HEAP32[$16_1 >> 2] | 0;
   HEAP32[($4_1 + 108 | 0) >> 2] = HEAP32[$11_1 >> 2] | 0;
   HEAP32[($4_1 + 104 | 0) >> 2] = HEAP32[$32_1 >> 2] | 0;
   HEAP32[($4_1 + 100 | 0) >> 2] = HEAP32[$33_1 >> 2] | 0;
   $16_1 = HEAP32[$1_1 >> 2] | 0;
   label$12 : {
    label$13 : {
     if (($2_1 | 0) < (0 | 0)) {
      break label$13
     }
     $16_1 = $16_1 + Math_imul($2_1, 192) | 0;
     $33_1 = $16_1 + 136 | 0;
     $3_1 = Math_fround(HEAPF32[$33_1 >> 2]);
     $15_1 = $16_1 + 132 | 0;
     $6_1 = Math_fround(HEAPF32[$15_1 >> 2]);
     $34_1 = $16_1 + 128 | 0;
     $8_1 = Math_fround(HEAPF32[$34_1 >> 2]);
     $11_1 = $16_1 + 160 | 0;
     $32_1 = HEAP32[$11_1 >> 2] | 0;
     label$14 : {
      label$15 : {
       if (!((HEAPU8[($4_1 + 120 | 0) >> 0] | 0) & 16 | 0)) {
        break label$15
       }
       $10_1 = Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($16_1 + 88 | 0) >> 2])) + Math_fround(0.0));
       if (Math_fround(Math_fround($6_1 * $6_1) + Math_fround($3_1 * $3_1)) > Math_fround($10_1 * $10_1) ^ 1 | 0) {
        break label$14
       }
      }
      $35_1 = $16_1 + 120 | 0;
      $36_1 = HEAP32[$35_1 >> 2] | 0;
      $7($16_1 + 4 | 0 | 0, $4_1 | 0, 192 | 0) | 0;
      HEAPF32[$34_1 >> 2] = $8_1;
      HEAP32[$35_1 >> 2] = $36_1;
      HEAPF32[$15_1 >> 2] = $6_1;
      HEAPF32[$33_1 >> 2] = $3_1;
     }
     HEAP32[$11_1 >> 2] = $32_1;
     break label$12;
    }
    $2_1 = $218($16_1 | 0, $4_1 | 0, 0 | 0) | 0;
   }
   label$16 : {
    $11_1 = HEAP32[(0 + 1700 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$16
    }
    $16_1 = $0_1 + 12 | 0;
    label$17 : {
     $0_1 = $0_1 + 8 | 0;
     if ((HEAPU8[((HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0) + 204 | 0) >> 0] | 0) & 8 | 0) {
      break label$17
     }
     if (!((HEAPU8[((HEAP32[((HEAP32[$16_1 >> 2] | 0) + 8 | 0) >> 2] | 0) + 204 | 0) >> 0] | 0) & 8 | 0)) {
      break label$16
     }
    }
    $654_1 = ((HEAP32[$1_1 >> 2] | 0) + Math_imul($2_1, 192) | 0) + 4 | 0;
    $2_1 = ($13_1 | 0) != ($14_1 | 0);
    FUNCTION_TABLE[$11_1]($654_1, HEAP32[($2_1 ? $16_1 : $0_1) >> 2] | 0, HEAP32[($4_1 + 100 | 0) >> 2] | 0, HEAP32[($4_1 + 108 | 0) >> 2] | 0, HEAP32[($2_1 ? $0_1 : $16_1) >> 2] | 0, HEAP32[($4_1 + 104 | 0) >> 2] | 0, HEAP32[($4_1 + 112 | 0) >> 2] | 0) | 0;
   }
   if ($12_1) {
    break label$1
   }
   $0_1 = HEAP32[(0 + 1692 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   FUNCTION_TABLE[$0_1]($1_1);
  }
  global$0 = $4_1 + 192 | 0;
 }
 
 function $224($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $225($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $226($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
 }
 
 function $227($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
 }
 
 function $228($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $229($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $5_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 7720;
  HEAP32[$0_1 >> 2] = 7860;
  HEAP32[($0_1 + 4 | 0) >> 2] = 2;
  HEAP32[($0_1 + 10444 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 64 | 0) >> 2] = 111;
  HEAP8[($0_1 + 24 | 0) >> 0] = 1;
  $2_1 = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($1_1) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1) | 0), HEAP32[(wasm2js_i32$0 + 72 | 0) >> 2] = wasm2js_i32$1;
  $3_1 = $0_1 + 5260 | 0;
  label$1 : while (1) {
   $1_1 = $3_1;
   $4_1 = 0;
   label$2 : while (1) {
    $5_1 = HEAP32[($0_1 + 10444 | 0) >> 2] | 0;
    (wasm2js_i32$0 = $1_1 + -5184 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($5_1, $2_1, $4_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $5_1 = HEAP32[($0_1 + 10444 | 0) >> 2] | 0;
    (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($5_1, $2_1, $4_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $1_1 = $1_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != (36 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $3_1 = $3_1 + 144 | 0;
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != (36 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return $0_1 | 0;
 }
 
 function $230($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $6_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = HEAP32[(HEAP32[$0_1 >> 2] | 0) >> 2] | 0;
   $5_1 = HEAP32[(HEAP32[($0_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($1_1, $4_1, $5_1) | 0)) {
    break label$1
   }
   i64toi32_i32$0 = -1;
   HEAP32[($3_1 + 88 | 0) >> 2] = -1;
   HEAP32[($3_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 72 | 0) >> 2] = 0;
   HEAP32[($3_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($3_1 + 84 | 0) >> 2] = $4_1 + 4 | 0;
   HEAP32[($3_1 + 76 | 0) >> 2] = HEAP32[($4_1 + 192 | 0) >> 2] | 0;
   i64toi32_i32$0 = -1;
   HEAP32[($3_1 + 64 | 0) >> 2] = -1;
   HEAP32[($3_1 + 68 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 48 | 0) >> 2] = 0;
   HEAP32[($3_1 + 56 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 60 | 0) >> 2] = $5_1 + 4 | 0;
   HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[($5_1 + 192 | 0) >> 2] | 0;
   label$2 : {
    if (HEAP32[($0_1 + 8 | 0) >> 2] | 0) {
     break label$2
    }
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $3_1 + 72 | 0, $3_1 + 48 | 0, 0, 1) | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    if (!$1_1) {
     break label$1
    }
   }
   $1_1 = $222($3_1 + 8 | 0 | 0, $3_1 + 72 | 0 | 0, $3_1 + 48 | 0 | 0) | 0;
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   label$3 : {
    if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $3_1 + 72 | 0, $3_1 + 48 | 0, $2_1, $1_1);
    break label$1;
   }
   $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1, $4_1, $5_1, $2_1, $1_1));
   if (Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2]) > $6_1 ^ 1 | 0) {
    break label$1
   }
   HEAPF32[($2_1 + 12 | 0) >> 2] = $6_1;
  }
  global$0 = $3_1 + 96 | 0;
 }
 
 function $231($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP32[((($0_1 + Math_imul($1_1, 144) | 0) + ($2_1 << 2 | 0) | 0) + 76 | 0) >> 2] = $3_1;
 }
 
 function $232($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 7860;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 24 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP8[($0_1 + 24 | 0) >> 0] = 1;
  $228($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $233($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 7860;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 24 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP8[($0_1 + 24 | 0) >> 0] = 1;
  $228($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $234($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $3_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[(0 + 1704 | 0) >> 2] = (HEAP32[(0 + 1704 | 0) >> 2] | 0) + 1 | 0;
  $4_1 = 2976;
  label$1 : {
   if (!((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & 2 | 0)) {
    break label$1
   }
   $4_1 = HEAP32[($1_1 + 192 | 0) >> 2] | 0;
   $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($4_1, Math_fround(HEAPF32[(0 + 2976 | 0) >> 2])));
   HEAPF32[($3_1 + 12 | 0) >> 2] = $5_1;
   $4_1 = HEAP32[($2_1 + 192 | 0) >> 2] | 0;
   $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($4_1, Math_fround(HEAPF32[(0 + 2976 | 0) >> 2])));
   HEAPF32[($3_1 + 8 | 0) >> 2] = $6_1;
   $4_1 = $5_1 < $6_1 ? $3_1 + 12 | 0 : $3_1 + 8 | 0;
  }
  $7_1 = HEAP32[$4_1 >> 2] | 0;
  $5_1 = Math_fround(HEAPF32[($2_1 + 184 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($1_1 + 184 | 0) >> 2]);
  label$2 : {
   label$3 : {
    label$4 : {
     $8_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
     $4_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$4
     }
     HEAP32[($8_1 + 12 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
     HEAP32[($8_1 + 8 | 0) >> 2] = (HEAP32[($8_1 + 8 | 0) >> 2] | 0) + -1 | 0;
     break label$3;
    }
    $4_1 = 0;
    if ((HEAPU8[($0_1 + 4 | 0) >> 0] | 0) & 4 | 0) {
     break label$2
    }
    $4_1 = $79(804 | 0, 16 | 0) | 0;
   }
   HEAP32[$4_1 >> 2] = 1025;
   HEAP32[($4_1 + 160 | 0) >> 2] = 0;
   i64toi32_i32$1 = $4_1 + 152 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 144 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 136 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 128 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 120 | 0) >> 2] = 0;
   HEAP32[($4_1 + 124 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 312 | 0) >> 2] = 0;
   HEAP32[($4_1 + 316 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 320 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 328 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 336 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 344 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 352 | 0) >> 2] = 0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 504 | 0) >> 2] = 0;
   HEAP32[($4_1 + 508 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 512 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 520 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 528 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 536 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 544 | 0) >> 2] = 0;
   HEAP32[($4_1 + 736 | 0) >> 2] = 0;
   i64toi32_i32$1 = $4_1 + 728 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 720 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 712 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1 + 704 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 696 | 0) >> 2] = 0;
   HEAP32[($4_1 + 700 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 772 | 0) >> 2] = $1_1;
   HEAP32[($4_1 + 776 | 0) >> 2] = $2_1;
   HEAP32[($4_1 + 780 | 0) >> 2] = 0;
   HEAP32[($4_1 + 784 | 0) >> 2] = $7_1;
   HEAPF32[($4_1 + 788 | 0) >> 2] = $6_1 < $5_1 ? $6_1 : $5_1;
   $8_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($4_1 + 800 | 0) >> 2] = $8_1;
   label$5 : {
    if (($8_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
     break label$5
    }
    $9_1 = $8_1 ? $8_1 << 1 | 0 : 1;
    if (($8_1 | 0) >= ($9_1 | 0)) {
     break label$5
    }
    label$6 : {
     label$7 : {
      if ($9_1) {
       break label$7
      }
      $7_1 = 0;
      break label$6;
     }
     $7_1 = $79($9_1 << 2 | 0 | 0, 16 | 0) | 0;
     $8_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    }
    label$8 : {
     if (($8_1 | 0) < (1 | 0)) {
      break label$8
     }
     $1_1 = 0;
     $2_1 = $8_1;
     label$9 : while (1) {
      HEAP32[($7_1 + $1_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + $1_1 | 0) >> 2] | 0;
      $1_1 = $1_1 + 4 | 0;
      $2_1 = $2_1 + -1 | 0;
      if ($2_1) {
       continue label$9
      }
      break label$9;
     };
    }
    label$10 : {
     $1_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$10
     }
     label$11 : {
      if (!(HEAPU8[($0_1 + 24 | 0) >> 0] | 0)) {
       break label$11
      }
      $80($1_1 | 0);
      $8_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     }
     HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $9_1;
    HEAP8[($0_1 + 24 | 0) >> 0] = 1;
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = $8_1 + 1 | 0;
   HEAP32[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] = $4_1;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $235($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = HEAP32[($1_1 + 780 | 0) >> 2] | 0;
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $4_1 = $1_1 + 4 | 0;
   $5_1 = 0;
   label$2 : while (1) {
    $214($1_1 | 0, $4_1 | 0);
    $4_1 = $4_1 + 192 | 0;
    $5_1 = $5_1 + 1 | 0;
    $3_1 = HEAP32[($1_1 + 780 | 0) >> 2] | 0;
    if (($5_1 | 0) < ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   if (!$3_1) {
    break label$3
   }
   $4_1 = HEAP32[(0 + 1696 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$3
   }
   HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
   FUNCTION_TABLE[$4_1]($2_1 + 12 | 0);
  }
  HEAP32[($1_1 + 780 | 0) >> 2] = 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $236($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $7_1 = 0;
  HEAP32[(0 + 1704 | 0) >> 2] = (HEAP32[(0 + 1704 | 0) >> 2] | 0) + -1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1);
  $2_1 = $0_1 + 20 | 0;
  $3_1 = HEAP32[$2_1 >> 2] | 0;
  $4_1 = HEAP32[($1_1 + 800 | 0) >> 2] | 0;
  $5_1 = $4_1 << 2 | 0;
  $6_1 = $3_1 + $5_1 | 0;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  $8_1 = $0_1 + 12 | 0;
  $9_1 = (HEAP32[$8_1 >> 2] | 0) + -1 | 0;
  $10_1 = $9_1 << 2 | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($3_1 + $10_1 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$2_1 >> 2] | 0) + $10_1 | 0) >> 2] = $7_1;
  HEAP32[$8_1 >> 2] = $9_1;
  HEAP32[((HEAP32[((HEAP32[$2_1 >> 2] | 0) + $5_1 | 0) >> 2] | 0) + 800 | 0) >> 2] = $4_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $0_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if ($2_1 >>> 0 > $1_1 >>> 0) {
    break label$1
   }
   if (($2_1 + Math_imul(HEAP32[$0_1 >> 2] | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 1 | 0;
   return;
  }
  $80($1_1 | 0);
 }
 
 function $237($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  $3_1 = HEAP32[((HEAP32[($2_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $6_1 = HEAP32[((HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($4_1 | 0) != (1 | 0)) {
     break label$2
    }
    $0_1 = HEAP32[((($0_1 + Math_imul($6_1, 144) | 0) + ($3_1 << 2 | 0) | 0) + 76 | 0) >> 2] | 0;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $5_1 + 8 | 0, $1_1, $2_1) | 0;
    break label$1;
   }
   $0_1 = HEAP32[((($0_1 + Math_imul($6_1, 144) | 0) + ($3_1 << 2 | 0) | 0) + 5260 | 0) >> 2] | 0;
   $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $5_1 + 8 | 0, $1_1, $2_1) | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $238($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($1_1 + 204 | 0) >> 2] | 0;
   if ($1_1 & 4 | 0) {
    break label$1
   }
   $2_1 = HEAP32[($2_1 + 204 | 0) >> 2] | 0;
   if ($2_1 & 4 | 0) {
    break label$1
   }
   label$2 : {
    if ($1_1 & 3 | 0) {
     break label$2
    }
    return 1 | 0;
   }
   $3_1 = !($2_1 & 3 | 0);
  }
  return $3_1 | 0;
 }
 
 function $239($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = (HEAP32[($1_1 + 220 | 0) >> 2] | 0) + -2 | 0;
    if ($3_1 >>> 0 > 3 >>> 0) {
     break label$2
    }
    label$3 : {
     switch ($3_1 | 0) {
     case 1:
     case 2:
      break label$2;
     default:
      break label$3;
     };
    }
    $4_1 = (HEAP32[($2_1 + 220 | 0) >> 2] | 0) + -2 | 0;
    if ($4_1 >>> 0 > 3 >>> 0) {
     break label$2
    }
    $3_1 = 0;
    switch ($4_1 | 0) {
    case 1:
    case 2:
     break label$2;
    default:
     break label$1;
    };
   }
   label$4 : {
    label$5 : {
     if (!(HEAP32[($1_1 + 280 | 0) >> 2] | 0)) {
      break label$5
     }
     if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($1_1, $2_1) | 0)) {
      break label$4
     }
    }
    $3_1 = 1;
    if (!(HEAP32[($2_1 + 280 | 0) >> 2] | 0)) {
     break label$1
    }
    if (FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($2_1, $1_1) | 0) {
     break label$1
    }
   }
   $3_1 = 0;
  }
  return $3_1 | 0;
 }
 
 function $240($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = 7968;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($1_1, $4_1, $3_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $241($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -1 | 0;
   return $2_1 | 0;
  }
  return $79($1_1 | 0, 16 | 0) | 0 | 0;
 }
 
 function $242($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $0_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if ($2_1 >>> 0 > $1_1 >>> 0) {
    break label$1
   }
   if (($2_1 + Math_imul(HEAP32[$0_1 >> 2] | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 1 | 0;
   return;
  }
  $80($1_1 | 0);
 }
 
 function $243($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $244($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $245($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAP32[($0_1 + 12 | 0) >> 2] | 0) {
    break label$1
   }
   return 0 | 0;
  }
  return HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0;
 }
 
 function $246($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $247($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $248($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $249($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[($2_1 + 64 | 0) >> 2] | 0]($1_1, $2_1, HEAP32[($0_1 + 4 | 0) >> 2] | 0);
  return 0 | 0;
 }
 
 function $250($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $251($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 8056;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $1_1);
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 60 | 0) >> 2] | 0]($1_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0);
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  }
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = -1;
  HEAP32[($0_1 + 24 | 0) >> 2] = -1;
  HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $73($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $252($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 8056;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $1_1);
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 60 | 0) >> 2] | 0]($1_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0);
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  }
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = -1;
  HEAP32[($0_1 + 24 | 0) >> 2] = -1;
  HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $73($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $253($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  label$1 : {
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if ($5_1) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($5_1, HEAP32[($1_1 + 8 | 0) >> 2] | 0, HEAP32[($2_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
  }
  HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] = $5_1;
  $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($6_1, $1_1, $2_1, $5_1, 1) | 0;
  $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($6_1, HEAP32[($0_1 + 28 | 0) >> 2] | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
  $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($6_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($5_1, $1_1, $2_1, HEAP32[($0_1 + 20 | 0) >> 2] | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0);
  FUNCTION_TABLE[HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0]($5_1) | 0;
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 60 | 0) >> 2] | 0]($0_1, $5_1);
 }
 
 function $254($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($6_1, HEAP32[($0_1 + 28 | 0) >> 2] | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
  $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($6_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0);
  HEAP32[($5_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  $1_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($2_1) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if ($2_1) {
     break label$2
    }
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($2_1, $1_1, $4_1) | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
   }
   HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] = $2_1;
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $5_1 + 24 | 0, $5_1, $2_1, 1) | 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($2_1, $5_1 + 24 | 0, $5_1, HEAP32[($0_1 + 20 | 0) >> 2] | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0);
  global$0 = $5_1 + 48 | 0;
 }
 
 function $255($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $11_1 = 0, $7_1 = 0, $15_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $17_1 = 0, $16_1 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$1 = 0, $132_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($3_1 + 72 | 0) >> 2] | 0)) {
     break label$2
    }
    if (!(HEAP32[($4_1 + 72 | 0) >> 2] | 0)) {
     break label$2
    }
    $90($3_1 + 72 | 0 | 0, $1_1 | 0, $4_1 + 72 | 0 | 0, $2_1 | 0, $5_1 | 0);
    break label$1;
   }
   $7_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 88 | 0) >> 2] | 0]($3_1) | 0;
   if (!$7_1) {
    break label$1
   }
   $8_1 = $6_1 + 16 | 0;
   $9_1 = ($6_1 + 32 | 0) + 16 | 0;
   label$3 : while (1) {
    $7_1 = $7_1 + -1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 120 | 0) >> 2] | 0]($3_1, $7_1, $1_1, $6_1 + 32 | 0, $9_1);
    label$4 : {
     $10_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 88 | 0) >> 2] | 0]($4_1) | 0;
     if (!$10_1) {
      break label$4
     }
     label$5 : while (1) {
      FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 120 | 0) >> 2] | 0]($4_1, $7_1, $2_1, $6_1, $8_1);
      $10_1 = $10_1 + -1 | 0;
      label$6 : {
       if (Math_fround(HEAPF32[$6_1 >> 2]) > Math_fround(HEAPF32[($6_1 + 48 | 0) >> 2])) {
        break label$6
       }
       if (Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]) < Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2])) {
        break label$6
       }
       if (Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) > Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2])) {
        break label$6
       }
       if (Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]) < Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2])) {
        break label$6
       }
       if (Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]) > Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2])) {
        break label$6
       }
       if (Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) < Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2])) {
        break label$6
       }
       label$7 : {
        $11_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
        if (($11_1 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0)) {
         break label$7
        }
        $12_1 = $11_1 ? $11_1 << 1 | 0 : 1;
        if (($11_1 | 0) >= ($12_1 | 0)) {
         break label$7
        }
        label$8 : {
         label$9 : {
          if ($12_1) {
           break label$9
          }
          $13_1 = 0;
          break label$8;
         }
         $13_1 = $79($12_1 << 3 | 0 | 0, 16 | 0) | 0;
         $11_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
        }
        $14_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
        label$10 : {
         label$11 : {
          label$12 : {
           if (($11_1 | 0) < (1 | 0)) {
            break label$12
           }
           $15_1 = $14_1;
           $16_1 = $13_1;
           $17_1 = $11_1;
           label$13 : while (1) {
            i64toi32_i32$0 = HEAP32[$15_1 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[($15_1 + 4 | 0) >> 2] | 0;
            $132_1 = i64toi32_i32$0;
            i64toi32_i32$0 = $16_1;
            HEAP32[i64toi32_i32$0 >> 2] = $132_1;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            $15_1 = $15_1 + 8 | 0;
            $16_1 = i64toi32_i32$0 + 8 | 0;
            $17_1 = $17_1 + -1 | 0;
            if ($17_1) {
             continue label$13
            }
            break label$11;
           };
          }
          if (!$14_1) {
           break label$10
          }
         }
         label$14 : {
          if (!(HEAPU8[($5_1 + 16 | 0) >> 0] | 0)) {
           break label$14
          }
          $80($14_1 | 0);
          $11_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
         }
         HEAP32[($5_1 + 12 | 0) >> 2] = 0;
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $13_1;
        HEAP8[($5_1 + 16 | 0) >> 0] = 1;
        HEAP32[($5_1 + 8 | 0) >> 2] = $12_1;
       }
       HEAP32[($5_1 + 4 | 0) >> 2] = $11_1 + 1 | 0;
       $15_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ($11_1 << 3 | 0) | 0;
       HEAP32[($15_1 + 4 | 0) >> 2] = $10_1;
       HEAP32[$15_1 >> 2] = $7_1;
      }
      if ($10_1) {
       continue label$5
      }
      break label$5;
     };
    }
    if ($7_1) {
     continue label$3
    }
    break label$3;
   };
  }
  global$0 = $6_1 + 64 | 0;
 }
 
 function $256($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $17_1 = 0, $19_1 = Math_fround(0), $24_1 = Math_fround(0), $15_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $7_1 = 0, $9_1 = 0, $16_1 = Math_fround(0), $18_1 = 0, $20_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $8_1 = 0, $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $128_1 = Math_fround(0), $133_1 = Math_fround(0), $187_1 = Math_fround(0), $193_1 = Math_fround(0);
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($3_1 + 72 | 0) >> 2] | 0)) {
     break label$2
    }
    $7_1 = $6_1 + 20 | 0;
    $8_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    HEAP32[$7_1 >> 2] = $8_1;
    $9_1 = $6_1 + 24 | 0;
    $10_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
    HEAP32[$9_1 >> 2] = $10_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = 0;
    $11_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    HEAP32[($6_1 + 16 | 0) >> 2] = $11_1;
    $12_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = $12_1;
    $13_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = $13_1;
    $14_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP32[$6_1 >> 2] = $14_1;
    $15_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
    $16_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
    $17_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
    $18_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    $19_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
    $20_1 = $6_1 + 40 | 0;
    $21_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
    HEAP32[$20_1 >> 2] = $21_1;
    $1_1 = $6_1 + 36 | 0;
    HEAP32[$1_1 >> 2] = $17_1;
    $22_1 = $6_1 + 28 | 0;
    HEAP32[$22_1 >> 2] = 0;
    $23_1 = $6_1 + 44 | 0;
    HEAP32[$23_1 >> 2] = 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = 0;
    $24_1 = (wasm2js_scratch_store_i32(0, $18_1), wasm2js_scratch_load_f32());
    $25_1 = Math_fround(-$19_1);
    $19_1 = (wasm2js_scratch_store_i32(0, $17_1), wasm2js_scratch_load_f32());
    $26_1 = (wasm2js_scratch_store_i32(0, $21_1), wasm2js_scratch_load_f32());
    $128_1 = Math_fround(Math_fround(Math_fround($24_1 * $25_1) - Math_fround($15_1 * $19_1)) - Math_fround($16_1 * $26_1));
    $27_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
    $133_1 = Math_fround($27_1 * $24_1);
    $24_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
    $28_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
    HEAPF32[($6_1 + 56 | 0) >> 2] = Math_fround($128_1 + Math_fround(Math_fround($133_1 + Math_fround($24_1 * $19_1)) + Math_fround($28_1 * $26_1)));
    $19_1 = (wasm2js_scratch_store_i32(0, $11_1), wasm2js_scratch_load_f32());
    $26_1 = (wasm2js_scratch_store_i32(0, $8_1), wasm2js_scratch_load_f32());
    $29_1 = (wasm2js_scratch_store_i32(0, $10_1), wasm2js_scratch_load_f32());
    HEAPF32[($6_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($19_1 * $25_1) - Math_fround($15_1 * $26_1)) - Math_fround($16_1 * $29_1)) + Math_fround(Math_fround(Math_fround($27_1 * $19_1) + Math_fround($24_1 * $26_1)) + Math_fround($28_1 * $29_1)));
    HEAP32[($6_1 + 32 | 0) >> 2] = $18_1;
    $19_1 = (wasm2js_scratch_store_i32(0, $14_1), wasm2js_scratch_load_f32());
    $187_1 = Math_fround($19_1 * $25_1);
    $25_1 = (wasm2js_scratch_store_i32(0, $13_1), wasm2js_scratch_load_f32());
    $193_1 = Math_fround($187_1 - Math_fround($15_1 * $25_1));
    $15_1 = (wasm2js_scratch_store_i32(0, $12_1), wasm2js_scratch_load_f32());
    HEAPF32[($6_1 + 48 | 0) >> 2] = Math_fround(Math_fround($193_1 - Math_fround($16_1 * $15_1)) + Math_fround(Math_fround(Math_fround($27_1 * $19_1) + Math_fround($24_1 * $25_1)) + Math_fround($28_1 * $15_1)));
    $16_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
    $27_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
    $24_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
    $28_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
    $26_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
    $29_1 = Math_fround(HEAPF32[$2_1 >> 2]);
    $30_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
    $31_1 = Math_fround(HEAPF32[$9_1 >> 2]);
    $32_1 = Math_fround(HEAPF32[$7_1 >> 2]);
    $33_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    $34_1 = Math_fround(HEAPF32[$20_1 >> 2]);
    $35_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    $36_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $37_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
    $38_1 = Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2]);
    HEAP32[$23_1 >> 2] = 0;
    HEAPF32[$20_1 >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $38_1) + Math_fround($28_1 * $36_1)) + Math_fround($24_1 * $34_1));
    HEAPF32[$1_1 >> 2] = Math_fround(Math_fround(Math_fround($33_1 * $38_1) + Math_fround($27_1 * $36_1)) + Math_fround($16_1 * $34_1));
    HEAP32[$22_1 >> 2] = 0;
    HEAPF32[$9_1 >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $37_1) + Math_fround($28_1 * $32_1)) + Math_fround($24_1 * $31_1));
    HEAPF32[$7_1 >> 2] = Math_fround(Math_fround(Math_fround($33_1 * $37_1) + Math_fround($27_1 * $32_1)) + Math_fround($16_1 * $31_1));
    HEAPF32[($6_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround($29_1 * $38_1) + Math_fround($30_1 * $36_1)) + Math_fround($26_1 * $34_1));
    HEAPF32[($6_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround($29_1 * $37_1) + Math_fround($30_1 * $32_1)) + Math_fround($26_1 * $31_1));
    HEAP32[($6_1 + 12 | 0) >> 2] = 0;
    HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $19_1) + Math_fround($28_1 * $25_1)) + Math_fround($24_1 * $15_1));
    HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround($33_1 * $19_1) + Math_fround($27_1 * $25_1)) + Math_fround($16_1 * $15_1));
    HEAPF32[$6_1 >> 2] = Math_fround(Math_fround(Math_fround($29_1 * $19_1) + Math_fround($30_1 * $25_1)) + Math_fround($26_1 * $15_1));
    FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($4_1, $6_1, $6_1 + 64 | 0, $6_1 + 80 | 0);
    $88($3_1 + 72 | 0 | 0, $6_1 + 64 | 0 | 0, $5_1 | 0) | 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($4_1, $2_1, $6_1 + 64 | 0, ($6_1 + 64 | 0) + 16 | 0);
   $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 88 | 0) >> 2] | 0]($3_1) | 0;
   if (!$2_1) {
    break label$1
   }
   $4_1 = $6_1 + 16 | 0;
   label$3 : while (1) {
    $2_1 = $2_1 + -1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 120 | 0) >> 2] | 0]($3_1, $2_1, $1_1, $6_1, $4_1);
    label$4 : {
     if (Math_fround(HEAPF32[($6_1 + 64 | 0) >> 2]) > Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2])) {
      break label$4
     }
     if (Math_fround(HEAPF32[($6_1 + 80 | 0) >> 2]) < Math_fround(HEAPF32[$6_1 >> 2])) {
      break label$4
     }
     if (Math_fround(HEAPF32[($6_1 + 68 | 0) >> 2]) > Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2])) {
      break label$4
     }
     if (Math_fround(HEAPF32[($6_1 + 84 | 0) >> 2]) < Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2])) {
      break label$4
     }
     if (Math_fround(HEAPF32[($6_1 + 72 | 0) >> 2]) > Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2])) {
      break label$4
     }
     if (Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]) < Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2])) {
      break label$4
     }
     label$5 : {
      $17_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      if (($17_1 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      $18_1 = $17_1 ? $17_1 << 1 | 0 : 1;
      if (($17_1 | 0) >= ($18_1 | 0)) {
       break label$5
      }
      label$6 : {
       label$7 : {
        if ($18_1) {
         break label$7
        }
        $20_1 = 0;
        break label$6;
       }
       $20_1 = $79($18_1 << 2 | 0 | 0, 16 | 0) | 0;
       $17_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      }
      $8_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      label$8 : {
       label$9 : {
        label$10 : {
         if (($17_1 | 0) < (1 | 0)) {
          break label$10
         }
         $7_1 = $20_1;
         $9_1 = $8_1;
         label$11 : while (1) {
          HEAP32[$7_1 >> 2] = HEAP32[$9_1 >> 2] | 0;
          $7_1 = $7_1 + 4 | 0;
          $9_1 = $9_1 + 4 | 0;
          $17_1 = $17_1 + -1 | 0;
          if ($17_1) {
           continue label$11
          }
          break label$9;
         };
        }
        if (!$8_1) {
         break label$8
        }
       }
       label$12 : {
        if (!(HEAPU8[($5_1 + 16 | 0) >> 0] | 0)) {
         break label$12
        }
        $80($8_1 | 0);
       }
       HEAP32[($5_1 + 12 | 0) >> 2] = 0;
       $17_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = $20_1;
      HEAP8[($5_1 + 16 | 0) >> 0] = 1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $18_1;
     }
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ($17_1 << 2 | 0) | 0) >> 2] = $2_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    }
    if ($2_1) {
     continue label$3
    }
    break label$3;
   };
  }
  global$0 = $6_1 + 96 | 0;
 }
 
 function $257($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $37_1 = Math_fround(0), $39_1 = Math_fround(0), $43_1 = Math_fround(0), $8_1 = 0, $15_1 = 0, $42_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $44_1 = Math_fround(0), $56_1 = 0, $49_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $45_1 = Math_fround(0), $38_1 = Math_fround(0), $46_1 = Math_fround(0), $47_1 = Math_fround(0), $57_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = 0, $48_1 = Math_fround(0), $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54_1 = Math_fround(0), $55_1 = Math_fround(0), $505_1 = Math_fround(0), $584_1 = Math_fround(0), $590_1 = Math_fround(0);
  $7_1 = global$0 - 432 | 0;
  global$0 = $7_1;
  $8_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $9_1 = Math_fround(HEAPF32[($8_1 + 56 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($8_1 + 52 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]);
  $15_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  $16_1 = Math_fround(HEAPF32[($15_1 + 56 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($15_1 + 52 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($15_1 + 40 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($15_1 + 36 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($15_1 + 24 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($15_1 + 20 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
  $25_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
  $27_1 = Math_fround(HEAPF32[$8_1 >> 2]);
  $28_1 = Math_fround(HEAPF32[($15_1 + 48 | 0) >> 2]);
  $29_1 = Math_fround(HEAPF32[($15_1 + 32 | 0) >> 2]);
  $30_1 = Math_fround(HEAPF32[($15_1 + 16 | 0) >> 2]);
  $31_1 = Math_fround(HEAPF32[($15_1 + 8 | 0) >> 2]);
  $32_1 = Math_fround(HEAPF32[($15_1 + 4 | 0) >> 2]);
  $33_1 = Math_fround(HEAPF32[$15_1 >> 2]);
  HEAP32[($7_1 + 424 | 0) >> 2] = 1008981770;
  HEAP32[($7_1 + 352 | 0) >> 2] = 1008981770;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 112 | 0) >> 2] | 0]($3_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 112 | 0) >> 2] | 0]($4_1);
  label$1 : {
   if (!$6_1) {
    break label$1
   }
   $34_1 = ($7_1 + 8 | 0) + 8 | 0;
   label$2 : while (1) {
    $8_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    HEAP32[($0_1 + 32 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    $15_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 84 | 0) >> 2] | 0]($3_1) | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$15_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($15_1, $8_1, $7_1 + 360 | 0);
    $8_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    $15_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 84 | 0) >> 2] | 0]($4_1) | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$15_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($15_1, $8_1, $7_1 + 288 | 0);
    HEAP32[($7_1 + 372 | 0) >> 2] = 0;
    HEAP32[($7_1 + 388 | 0) >> 2] = 0;
    HEAP32[($7_1 + 404 | 0) >> 2] = 0;
    $35_1 = Math_fround(HEAPF32[($7_1 + 376 | 0) >> 2]);
    $36_1 = Math_fround(HEAPF32[($7_1 + 380 | 0) >> 2]);
    $37_1 = Math_fround(HEAPF32[($7_1 + 384 | 0) >> 2]);
    $38_1 = Math_fround($17_1 + Math_fround(Math_fround(Math_fround($30_1 * $35_1) + Math_fround($21_1 * $36_1)) + Math_fround($20_1 * $37_1)));
    HEAPF32[($7_1 + 380 | 0) >> 2] = $38_1;
    $39_1 = Math_fround(HEAPF32[($7_1 + 360 | 0) >> 2]);
    $40_1 = Math_fround(HEAPF32[($7_1 + 364 | 0) >> 2]);
    $41_1 = Math_fround(HEAPF32[($7_1 + 368 | 0) >> 2]);
    $42_1 = Math_fround($17_1 + Math_fround(Math_fround(Math_fround($30_1 * $39_1) + Math_fround($21_1 * $40_1)) + Math_fround($20_1 * $41_1)));
    HEAPF32[($7_1 + 364 | 0) >> 2] = $42_1;
    $43_1 = Math_fround(HEAPF32[($7_1 + 392 | 0) >> 2]);
    $44_1 = Math_fround(HEAPF32[($7_1 + 396 | 0) >> 2]);
    $45_1 = Math_fround(HEAPF32[($7_1 + 400 | 0) >> 2]);
    $46_1 = Math_fround($17_1 + Math_fround(Math_fround(Math_fround($30_1 * $43_1) + Math_fround($21_1 * $44_1)) + Math_fround($20_1 * $45_1)));
    HEAPF32[($7_1 + 396 | 0) >> 2] = $46_1;
    $47_1 = Math_fround($16_1 + Math_fround(Math_fround(Math_fround($29_1 * $35_1) + Math_fround($19_1 * $36_1)) + Math_fround($18_1 * $37_1)));
    HEAPF32[($7_1 + 384 | 0) >> 2] = $47_1;
    $48_1 = Math_fround($28_1 + Math_fround(Math_fround(Math_fround($33_1 * $43_1) + Math_fround($32_1 * $44_1)) + Math_fround($31_1 * $45_1)));
    HEAPF32[($7_1 + 392 | 0) >> 2] = $48_1;
    $49_1 = Math_fround($28_1 + Math_fround(Math_fround(Math_fround($33_1 * $39_1) + Math_fround($32_1 * $40_1)) + Math_fround($31_1 * $41_1)));
    HEAPF32[($7_1 + 360 | 0) >> 2] = $49_1;
    $50_1 = Math_fround($28_1 + Math_fround(Math_fround(Math_fround($33_1 * $35_1) + Math_fround($32_1 * $36_1)) + Math_fround($31_1 * $37_1)));
    HEAPF32[($7_1 + 376 | 0) >> 2] = $50_1;
    $35_1 = Math_fround($16_1 + Math_fround(Math_fround(Math_fround($29_1 * $39_1) + Math_fround($19_1 * $40_1)) + Math_fround($18_1 * $41_1)));
    HEAPF32[($7_1 + 368 | 0) >> 2] = $35_1;
    $44_1 = Math_fround($16_1 + Math_fround(Math_fround(Math_fround($29_1 * $43_1) + Math_fround($19_1 * $44_1)) + Math_fround($18_1 * $45_1)));
    HEAPF32[($7_1 + 400 | 0) >> 2] = $44_1;
    $36_1 = Math_fround(HEAPF32[($7_1 + 296 | 0) >> 2]);
    $37_1 = Math_fround(HEAPF32[($7_1 + 288 | 0) >> 2]);
    $39_1 = Math_fround(HEAPF32[($7_1 + 292 | 0) >> 2]);
    HEAP32[($7_1 + 300 | 0) >> 2] = 0;
    $40_1 = Math_fround($10_1 + Math_fround(Math_fround(Math_fround($24_1 * $37_1) + Math_fround($14_1 * $39_1)) + Math_fround($13_1 * $36_1)));
    HEAPF32[($7_1 + 292 | 0) >> 2] = $40_1;
    $41_1 = Math_fround($9_1 + Math_fround(Math_fround(Math_fround($23_1 * $37_1) + Math_fround($12_1 * $39_1)) + Math_fround($11_1 * $36_1)));
    HEAPF32[($7_1 + 296 | 0) >> 2] = $41_1;
    $36_1 = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($27_1 * $37_1) + Math_fround($26_1 * $39_1)) + Math_fround($25_1 * $36_1)));
    HEAPF32[($7_1 + 288 | 0) >> 2] = $36_1;
    $37_1 = Math_fround(HEAPF32[($7_1 + 312 | 0) >> 2]);
    $39_1 = Math_fround(HEAPF32[($7_1 + 304 | 0) >> 2]);
    $43_1 = Math_fround(HEAPF32[($7_1 + 308 | 0) >> 2]);
    HEAP32[($7_1 + 316 | 0) >> 2] = 0;
    $45_1 = Math_fround($10_1 + Math_fround(Math_fround(Math_fround($24_1 * $39_1) + Math_fround($14_1 * $43_1)) + Math_fround($13_1 * $37_1)));
    HEAPF32[($7_1 + 308 | 0) >> 2] = $45_1;
    $51_1 = Math_fround($9_1 + Math_fround(Math_fround(Math_fround($23_1 * $39_1) + Math_fround($12_1 * $43_1)) + Math_fround($11_1 * $37_1)));
    HEAPF32[($7_1 + 312 | 0) >> 2] = $51_1;
    $52_1 = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($27_1 * $39_1) + Math_fround($26_1 * $43_1)) + Math_fround($25_1 * $37_1)));
    HEAPF32[($7_1 + 304 | 0) >> 2] = $52_1;
    $37_1 = Math_fround(HEAPF32[($7_1 + 328 | 0) >> 2]);
    $39_1 = Math_fround(HEAPF32[($7_1 + 320 | 0) >> 2]);
    $43_1 = Math_fround(HEAPF32[($7_1 + 324 | 0) >> 2]);
    HEAP32[($7_1 + 332 | 0) >> 2] = 0;
    $53_1 = Math_fround($10_1 + Math_fround(Math_fround(Math_fround($24_1 * $39_1) + Math_fround($14_1 * $43_1)) + Math_fround($13_1 * $37_1)));
    HEAPF32[($7_1 + 324 | 0) >> 2] = $53_1;
    $54_1 = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($27_1 * $39_1) + Math_fround($26_1 * $43_1)) + Math_fround($25_1 * $37_1)));
    HEAPF32[($7_1 + 320 | 0) >> 2] = $54_1;
    $55_1 = Math_fround($9_1 + Math_fround(Math_fround(Math_fround($23_1 * $39_1) + Math_fround($12_1 * $43_1)) + Math_fround($11_1 * $37_1)));
    HEAPF32[($7_1 + 328 | 0) >> 2] = $55_1;
    $43_1 = Math_fround($47_1 - $35_1);
    $39_1 = Math_fround($48_1 - $49_1);
    $47_1 = Math_fround($50_1 - $49_1);
    $44_1 = Math_fround($44_1 - $35_1);
    $37_1 = Math_fround(Math_fround($43_1 * $39_1) - Math_fround($47_1 * $44_1));
    $505_1 = $37_1;
    $46_1 = Math_fround($46_1 - $42_1);
    $38_1 = Math_fround($38_1 - $42_1);
    $39_1 = Math_fround(Math_fround($47_1 * $46_1) - Math_fround($38_1 * $39_1));
    $43_1 = Math_fround(Math_fround($38_1 * $44_1) - Math_fround($43_1 * $46_1));
    $37_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($39_1 * $39_1) + Math_fround(Math_fround($43_1 * $43_1) + Math_fround($37_1 * $37_1))))));
    $44_1 = Math_fround($505_1 * $37_1);
    HEAPF32[($7_1 + 412 | 0) >> 2] = $44_1;
    $43_1 = Math_fround($43_1 * $37_1);
    HEAPF32[($7_1 + 408 | 0) >> 2] = $43_1;
    $37_1 = Math_fround($39_1 * $37_1);
    HEAPF32[($7_1 + 416 | 0) >> 2] = $37_1;
    HEAPF32[($7_1 + 420 | 0) >> 2] = Math_fround(Math_fround($35_1 * $37_1) + Math_fround(Math_fround($49_1 * $43_1) + Math_fround($42_1 * $44_1)));
    $35_1 = Math_fround($51_1 - $41_1);
    $49_1 = Math_fround($54_1 - $36_1);
    $37_1 = Math_fround($52_1 - $36_1);
    $39_1 = Math_fround($55_1 - $41_1);
    $42_1 = Math_fround(Math_fround($35_1 * $49_1) - Math_fround($37_1 * $39_1));
    $584_1 = $42_1;
    $43_1 = Math_fround($53_1 - $40_1);
    $590_1 = Math_fround($37_1 * $43_1);
    $37_1 = Math_fround($45_1 - $40_1);
    $49_1 = Math_fround($590_1 - Math_fround($37_1 * $49_1));
    $35_1 = Math_fround(Math_fround($37_1 * $39_1) - Math_fround($35_1 * $43_1));
    $42_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($49_1 * $49_1) + Math_fround(Math_fround($35_1 * $35_1) + Math_fround($42_1 * $42_1))))));
    $37_1 = Math_fround($584_1 * $42_1);
    HEAPF32[($7_1 + 340 | 0) >> 2] = $37_1;
    $35_1 = Math_fround($35_1 * $42_1);
    HEAPF32[($7_1 + 336 | 0) >> 2] = $35_1;
    $42_1 = Math_fround($49_1 * $42_1);
    HEAPF32[($7_1 + 344 | 0) >> 2] = $42_1;
    HEAPF32[($7_1 + 348 | 0) >> 2] = Math_fround(Math_fround($41_1 * $42_1) + Math_fround(Math_fround($36_1 * $35_1) + Math_fround($40_1 * $37_1)));
    $6_1 = $6_1 + -1 | 0;
    label$3 : {
     if (!($195($7_1 + 360 | 0 | 0, $7_1 + 288 | 0 | 0) | 0)) {
      break label$3
     }
     if (!($199($7_1 + 360 | 0 | 0, $7_1 + 288 | 0 | 0, $7_1 + 8 | 0 | 0) | 0)) {
      break label$3
     }
     $8_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$3
     }
     $15_1 = $34_1 + ($8_1 << 4 | 0) | 0;
     label$4 : while (1) {
      $42_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
      $56_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$56_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($56_1, HEAP32[($0_1 + 28 | 0) >> 2] | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
      $56_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$56_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($56_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0);
      $8_1 = $8_1 + -1 | 0;
      $42_1 = Math_fround(-$42_1);
      label$5 : {
       $57_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if ($57_1) {
        break label$5
       }
       $56_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $57_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$56_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($56_1, HEAP32[($1_1 + 8 | 0) >> 2] | 0, HEAP32[($2_1 + 8 | 0) >> 2] | 0) | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $57_1;
      }
      $56_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      HEAP32[($56_1 + 4 | 0) >> 2] = $57_1;
      FUNCTION_TABLE[HEAP32[((HEAP32[$56_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($56_1, $34_1, $15_1, $42_1);
      $15_1 = $15_1 + -16 | 0;
      if ($8_1) {
       continue label$4
      }
      break label$4;
     };
    }
    $5_1 = $5_1 + 8 | 0;
    if ($6_1) {
     continue label$2
    }
    break label$2;
   };
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 116 | 0) >> 2] | 0]($3_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 116 | 0) >> 2] | 0]($4_1);
  global$0 = $7_1 + 432 | 0;
 }
 
 function $258($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $8$hi = 0, $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $40_1 = Math_fround(0), $42_1 = Math_fround(0), $44_1 = Math_fround(0), $9_1 = 0, $9$hi = 0, $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $41_1 = Math_fround(0), $43_1 = Math_fround(0), $45_1 = Math_fround(0), $10_1 = 0, $10$hi = 0, $20_1 = 0, $13_1 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $21_1 = 0, $125_1 = 0, $137_1 = 0, $145_1 = 0, $154_1 = 0, $167_1 = 0, $179_1 = 0, $187_1 = 0, $196_1 = 0, $11_1 = 0, $12_1 = 0, $428_1 = 0, $437_1 = 0, $445_1 = 0, $448_1 = 0, $467_1 = 0, $470_1 = 0, $479_1 = 0, $482_1 = 0, $487_1 = 0, $490_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 976 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 80 | 0) >> 2] | 0]($3_1) | 0 | 0) != (2 | 0)) {
     break label$2
    }
    $6_1 = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
    $7_1 = $6_1 + -1 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $7_1;
    if (!$6_1) {
     break label$1
    }
    label$3 : while (1) {
     $258($0_1 | 0, $1_1 | 0, $2_1 | 0, HEAP32[((HEAP32[($3_1 + 164 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0) >> 2] | 0 | 0, $4_1 | 0);
     $6_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     $7_1 = $6_1 + -1 | 0;
     HEAP32[($0_1 + 28 | 0) >> 2] = $7_1;
     if ($6_1) {
      continue label$3
     }
     break label$1;
    };
   }
   label$4 : {
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 80 | 0) >> 2] | 0]($4_1) | 0 | 0) != (2 | 0)) {
     break label$4
    }
    $6_1 = HEAP32[($4_1 + 156 | 0) >> 2] | 0;
    $7_1 = $6_1 + -1 | 0;
    HEAP32[($0_1 + 36 | 0) >> 2] = $7_1;
    if (!$6_1) {
     break label$1
    }
    label$5 : while (1) {
     $258($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, HEAP32[((HEAP32[($4_1 + 164 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0) >> 2] | 0 | 0);
     $6_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
     $7_1 = $6_1 + -1 | 0;
     HEAP32[($0_1 + 36 | 0) >> 2] = $7_1;
     if ($6_1) {
      continue label$5
     }
     break label$1;
    };
   }
   $7_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $7_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $9_1 = i64toi32_i32$1;
   $9$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $125_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 912 | 0) + 24 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $125_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$0 = ($5_1 + 912 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $8_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$1;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $137_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 912 | 0) + 40 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $137_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $145_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 912 | 0) + 56 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $145_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$0 = $5_1;
   HEAP32[($5_1 + 912 | 0) >> 2] = $9_1;
   HEAP32[($5_1 + 916 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$0 = $5_1;
   HEAP32[($5_1 + 928 | 0) >> 2] = $8_1;
   HEAP32[($5_1 + 932 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = $5_1;
   HEAP32[($5_1 + 944 | 0) >> 2] = $10_1;
   HEAP32[($5_1 + 948 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $154_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1;
   HEAP32[($5_1 + 960 | 0) >> 2] = $154_1;
   HEAP32[($5_1 + 964 | 0) >> 2] = i64toi32_i32$0;
   $7_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $7_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $9_1 = i64toi32_i32$1;
   $9$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $167_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 848 | 0) + 24 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $167_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$0 = ($5_1 + 848 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $8_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$1;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $179_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 848 | 0) + 40 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $179_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $187_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 848 | 0) + 56 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $187_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$0 = $5_1;
   HEAP32[($5_1 + 848 | 0) >> 2] = $9_1;
   HEAP32[($5_1 + 852 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$0 = $5_1;
   HEAP32[($5_1 + 864 | 0) >> 2] = $8_1;
   HEAP32[($5_1 + 868 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = $5_1;
   HEAP32[($5_1 + 880 | 0) >> 2] = $10_1;
   HEAP32[($5_1 + 884 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $196_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1;
   HEAP32[($5_1 + 896 | 0) >> 2] = $196_1;
   HEAP32[($5_1 + 900 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($5_1 + 828 | 0) >> 2] = 0;
   (wasm2js_i32$0 = $5_1, wasm2js_i32$1 = $79(256 | 0, 16 | 0) | 0), HEAP32[(wasm2js_i32$0 + 836 | 0) >> 2] = wasm2js_i32$1;
   HEAP8[($5_1 + 840 | 0) >> 0] = 1;
   HEAP32[($5_1 + 832 | 0) >> 2] = 32;
   $255($5_1 | 0, $5_1 + 912 | 0 | 0, $5_1 + 848 | 0 | 0, $3_1 | 0, $4_1 | 0, $5_1 + 824 | 0 | 0);
   label$6 : {
    if (!(HEAP32[($5_1 + 828 | 0) >> 2] | 0)) {
     break label$6
    }
    label$7 : {
     if ((FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 80 | 0) >> 2] | 0]($3_1) | 0 | 0) != (1 | 0)) {
      break label$7
     }
     if ((FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 80 | 0) >> 2] | 0]($4_1) | 0 | 0) != (1 | 0)) {
      break label$7
     }
     $257($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, HEAP32[($5_1 + 836 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 828 | 0) >> 2] | 0 | 0);
     break label$6;
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 112 | 0) >> 2] | 0]($3_1);
    FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 112 | 0) >> 2] | 0]($4_1);
    $179($5_1 + 520 | 0 | 4 | 0 | 0) | 0;
    i64toi32_i32$1 = $5_1 + 584 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($5_1 + 528 | 0) >> 2] = 1;
    i64toi32_i32$1 = $5_1 + 592 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 600 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 608 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 616 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 624 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($5_1 + 524 | 0) >> 2] = 8128;
    $200($5_1 + 632 | 0 | 0) | 0;
    HEAP32[($5_1 + 728 | 0) >> 2] = 4;
    HEAP32[($5_1 + 812 | 0) >> 2] = 8708;
    HEAP32[($5_1 + 804 | 0) >> 2] = 8628;
    HEAP32[($5_1 + 796 | 0) >> 2] = 8556;
    HEAP32[($5_1 + 632 | 0) >> 2] = 8364;
    HEAP32[($5_1 + 520 | 0) >> 2] = $3_1;
    label$8 : {
     label$9 : {
      if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 96 | 0) >> 2] | 0]($3_1) | 0)) {
       break label$9
      }
      $7_1 = $5_1 + 804 | 0;
      break label$8;
     }
     $7_1 = HEAP32[($5_1 + 520 | 0) >> 2] | 0;
     $7_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 100 | 0) >> 2] | 0]($7_1) | 0 ? $5_1 + 812 | 0 : $5_1 + 796 | 0;
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = $5_1 + 520 | 0;
    HEAP32[($5_1 + 820 | 0) >> 2] = $7_1;
    $179($5_1 + 216 | 0 | 4 | 0 | 0) | 0;
    i64toi32_i32$1 = $5_1 + 280 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($5_1 + 224 | 0) >> 2] = 1;
    i64toi32_i32$1 = $5_1 + 288 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 296 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 304 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 312 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 320 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($5_1 + 220 | 0) >> 2] = 8128;
    $200($5_1 + 328 | 0 | 0) | 0;
    HEAP32[($5_1 + 424 | 0) >> 2] = 4;
    HEAP32[($5_1 + 508 | 0) >> 2] = 8708;
    HEAP32[($5_1 + 500 | 0) >> 2] = 8628;
    HEAP32[($5_1 + 492 | 0) >> 2] = 8556;
    HEAP32[($5_1 + 328 | 0) >> 2] = 8364;
    HEAP32[($5_1 + 216 | 0) >> 2] = $4_1;
    label$10 : {
     label$11 : {
      if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 96 | 0) >> 2] | 0]($4_1) | 0)) {
       break label$11
      }
      $7_1 = $5_1 + 500 | 0;
      break label$10;
     }
     $7_1 = HEAP32[($5_1 + 216 | 0) >> 2] | 0;
     $7_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 100 | 0) >> 2] | 0]($7_1) | 0 ? $5_1 + 508 | 0 : $5_1 + 492 | 0;
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = $5_1 + 216 | 0;
    HEAP32[($5_1 + 516 | 0) >> 2] = $7_1;
    $11_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 92 | 0) >> 2] | 0]($3_1) | 0;
    $12_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 92 | 0) >> 2] | 0]($4_1) | 0;
    label$12 : {
     $6_1 = HEAP32[($5_1 + 828 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$12
     }
     $13_1 = ($6_1 << 3 | 0) + -4 | 0;
     $14_1 = ($5_1 + 88 | 0) + 48 | 0;
     $15_1 = ($5_1 + 88 | 0) + 32 | 0;
     $16_1 = ($5_1 + 88 | 0) + 16 | 0;
     $17_1 = ($5_1 + 152 | 0) + 48 | 0;
     $18_1 = ($5_1 + 152 | 0) + 32 | 0;
     $19_1 = ($5_1 + 152 | 0) + 16 | 0;
     label$13 : while (1) {
      $7_1 = (HEAP32[($5_1 + 836 | 0) >> 2] | 0) + $13_1 | 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = HEAP32[$7_1 >> 2] | 0;
      $7_1 = HEAP32[($7_1 + -4 | 0) >> 2] | 0;
      HEAP32[($0_1 + 24 | 0) >> 2] = $7_1;
      $20_1 = HEAP32[($5_1 + 820 | 0) >> 2] | 0;
      $20_1 = FUNCTION_TABLE[HEAP32[(HEAP32[$20_1 >> 2] | 0) >> 2] | 0]($20_1, $7_1) | 0;
      $7_1 = HEAP32[($5_1 + 516 | 0) >> 2] | 0;
      $21_1 = FUNCTION_TABLE[HEAP32[(HEAP32[$7_1 >> 2] | 0) >> 2] | 0]($7_1, HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
      $7_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$2 = $7_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $8_1 = i64toi32_i32$0;
      $8$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $9_1 = i64toi32_i32$1;
      $9$hi = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $428_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $19_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $428_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = $8$hi;
      i64toi32_i32$0 = ($5_1 + 152 | 0) + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $8_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      $8_1 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
      $437_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $18_1;
      HEAP32[i64toi32_i32$0 >> 2] = $437_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $10_1 = i64toi32_i32$1;
      $10$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $7_1 + 56 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $445_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $17_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $445_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
      $448_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $17_1;
      HEAP32[i64toi32_i32$1 >> 2] = $448_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $10$hi;
      i64toi32_i32$1 = $18_1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $10_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$1 = $19_1;
      HEAP32[i64toi32_i32$1 >> 2] = $8_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $5_1;
      HEAP32[($5_1 + 152 | 0) >> 2] = $9_1;
      HEAP32[($5_1 + 156 | 0) >> 2] = i64toi32_i32$0;
      $7_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$2 = $7_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $8_1 = i64toi32_i32$0;
      $8$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $9_1 = i64toi32_i32$1;
      $9$hi = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $467_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $16_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $467_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
      $470_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $16_1;
      HEAP32[i64toi32_i32$1 >> 2] = $470_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $8$hi;
      i64toi32_i32$1 = ($5_1 + 88 | 0) + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $8_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $479_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $15_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $479_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
      $482_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $15_1;
      HEAP32[i64toi32_i32$1 >> 2] = $482_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $487_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $14_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $487_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
      $490_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $14_1;
      HEAP32[i64toi32_i32$1 >> 2] = $490_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $5_1;
      HEAP32[($5_1 + 88 | 0) >> 2] = $9_1;
      HEAP32[($5_1 + 92 | 0) >> 2] = i64toi32_i32$0;
      label$14 : {
       if (!$11_1) {
        break label$14
       }
       FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 132 | 0) >> 2] | 0]($5_1 + 24 | 0, $3_1, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
       $22_1 = Math_fround(HEAPF32[($5_1 + 960 | 0) >> 2]);
       $23_1 = Math_fround(HEAPF32[($5_1 + 964 | 0) >> 2]);
       $24_1 = Math_fround(HEAPF32[($5_1 + 968 | 0) >> 2]);
       $25_1 = Math_fround(HEAPF32[($5_1 + 80 | 0) >> 2]);
       $26_1 = Math_fround(HEAPF32[($5_1 + 72 | 0) >> 2]);
       $27_1 = Math_fround(HEAPF32[($5_1 + 76 | 0) >> 2]);
       $28_1 = Math_fround(HEAPF32[($5_1 + 920 | 0) >> 2]);
       $29_1 = Math_fround(HEAPF32[($5_1 + 912 | 0) >> 2]);
       $30_1 = Math_fround(HEAPF32[($5_1 + 916 | 0) >> 2]);
       $31_1 = Math_fround(HEAPF32[($5_1 + 936 | 0) >> 2]);
       $32_1 = Math_fround(HEAPF32[($5_1 + 928 | 0) >> 2]);
       $33_1 = Math_fround(HEAPF32[($5_1 + 932 | 0) >> 2]);
       $34_1 = Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]);
       $35_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
       $36_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
       $37_1 = Math_fround(HEAPF32[($5_1 + 60 | 0) >> 2]);
       $38_1 = Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]);
       $39_1 = Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2]);
       $40_1 = Math_fround(HEAPF32[($5_1 + 952 | 0) >> 2]);
       $41_1 = Math_fround(HEAPF32[($5_1 + 64 | 0) >> 2]);
       $42_1 = Math_fround(HEAPF32[($5_1 + 944 | 0) >> 2]);
       $43_1 = Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]);
       $44_1 = Math_fround(HEAPF32[($5_1 + 948 | 0) >> 2]);
       $45_1 = Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]);
       HEAP32[($5_1 + 212 | 0) >> 2] = 0;
       HEAP32[($5_1 + 196 | 0) >> 2] = 0;
       HEAP32[($5_1 + 180 | 0) >> 2] = 0;
       HEAP32[($5_1 + 164 | 0) >> 2] = 0;
       HEAPF32[($5_1 + 192 | 0) >> 2] = Math_fround(Math_fround(Math_fround($43_1 * $42_1) + Math_fround($45_1 * $44_1)) + Math_fround($41_1 * $40_1));
       HEAPF32[($5_1 + 188 | 0) >> 2] = Math_fround(Math_fround(Math_fround($38_1 * $42_1) + Math_fround($39_1 * $44_1)) + Math_fround($37_1 * $40_1));
       HEAPF32[($5_1 + 184 | 0) >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $42_1) + Math_fround($36_1 * $44_1)) + Math_fround($34_1 * $40_1));
       HEAPF32[($5_1 + 176 | 0) >> 2] = Math_fround(Math_fround(Math_fround($43_1 * $32_1) + Math_fround($45_1 * $33_1)) + Math_fround($41_1 * $31_1));
       HEAPF32[($5_1 + 172 | 0) >> 2] = Math_fround(Math_fround(Math_fround($38_1 * $32_1) + Math_fround($39_1 * $33_1)) + Math_fround($37_1 * $31_1));
       HEAPF32[($5_1 + 168 | 0) >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $32_1) + Math_fround($36_1 * $33_1)) + Math_fround($34_1 * $31_1));
       HEAPF32[($5_1 + 160 | 0) >> 2] = Math_fround(Math_fround(Math_fround($29_1 * $43_1) + Math_fround($30_1 * $45_1)) + Math_fround($28_1 * $41_1));
       HEAPF32[($5_1 + 156 | 0) >> 2] = Math_fround(Math_fround(Math_fround($29_1 * $38_1) + Math_fround($30_1 * $39_1)) + Math_fround($28_1 * $37_1));
       HEAPF32[($5_1 + 152 | 0) >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $29_1) + Math_fround($36_1 * $30_1)) + Math_fround($34_1 * $28_1));
       HEAPF32[($5_1 + 208 | 0) >> 2] = Math_fround($24_1 + Math_fround(Math_fround(Math_fround($42_1 * $26_1) + Math_fround($44_1 * $27_1)) + Math_fround($40_1 * $25_1)));
       HEAPF32[($5_1 + 204 | 0) >> 2] = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($32_1 * $26_1) + Math_fround($33_1 * $27_1)) + Math_fround($31_1 * $25_1)));
       HEAPF32[($5_1 + 200 | 0) >> 2] = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($29_1 * $26_1) + Math_fround($30_1 * $27_1)) + Math_fround($28_1 * $25_1)));
      }
      $6_1 = $6_1 + -1 | 0;
      label$15 : {
       if (!$12_1) {
        break label$15
       }
       FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 132 | 0) >> 2] | 0]($5_1 + 24 | 0, $4_1, HEAP32[($0_1 + 32 | 0) >> 2] | 0);
       $22_1 = Math_fround(HEAPF32[($5_1 + 896 | 0) >> 2]);
       $23_1 = Math_fround(HEAPF32[($5_1 + 900 | 0) >> 2]);
       $24_1 = Math_fround(HEAPF32[($5_1 + 904 | 0) >> 2]);
       $25_1 = Math_fround(HEAPF32[($5_1 + 80 | 0) >> 2]);
       $26_1 = Math_fround(HEAPF32[($5_1 + 72 | 0) >> 2]);
       $27_1 = Math_fround(HEAPF32[($5_1 + 76 | 0) >> 2]);
       $28_1 = Math_fround(HEAPF32[($5_1 + 856 | 0) >> 2]);
       $29_1 = Math_fround(HEAPF32[($5_1 + 848 | 0) >> 2]);
       $30_1 = Math_fround(HEAPF32[($5_1 + 852 | 0) >> 2]);
       $31_1 = Math_fround(HEAPF32[($5_1 + 872 | 0) >> 2]);
       $32_1 = Math_fround(HEAPF32[($5_1 + 864 | 0) >> 2]);
       $33_1 = Math_fround(HEAPF32[($5_1 + 868 | 0) >> 2]);
       $34_1 = Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]);
       $35_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
       $36_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
       $37_1 = Math_fround(HEAPF32[($5_1 + 60 | 0) >> 2]);
       $38_1 = Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]);
       $39_1 = Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2]);
       $40_1 = Math_fround(HEAPF32[($5_1 + 888 | 0) >> 2]);
       $41_1 = Math_fround(HEAPF32[($5_1 + 64 | 0) >> 2]);
       $42_1 = Math_fround(HEAPF32[($5_1 + 880 | 0) >> 2]);
       $43_1 = Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]);
       $44_1 = Math_fround(HEAPF32[($5_1 + 884 | 0) >> 2]);
       $45_1 = Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]);
       HEAP32[($5_1 + 148 | 0) >> 2] = 0;
       HEAP32[($5_1 + 132 | 0) >> 2] = 0;
       HEAP32[($5_1 + 116 | 0) >> 2] = 0;
       HEAP32[($5_1 + 100 | 0) >> 2] = 0;
       HEAPF32[($5_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround($43_1 * $42_1) + Math_fround($45_1 * $44_1)) + Math_fround($41_1 * $40_1));
       HEAPF32[($5_1 + 124 | 0) >> 2] = Math_fround(Math_fround(Math_fround($38_1 * $42_1) + Math_fround($39_1 * $44_1)) + Math_fround($37_1 * $40_1));
       HEAPF32[($5_1 + 120 | 0) >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $42_1) + Math_fround($36_1 * $44_1)) + Math_fround($34_1 * $40_1));
       HEAPF32[($5_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround($43_1 * $32_1) + Math_fround($45_1 * $33_1)) + Math_fround($41_1 * $31_1));
       HEAPF32[($5_1 + 108 | 0) >> 2] = Math_fround(Math_fround(Math_fround($38_1 * $32_1) + Math_fround($39_1 * $33_1)) + Math_fround($37_1 * $31_1));
       HEAPF32[($5_1 + 104 | 0) >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $32_1) + Math_fround($36_1 * $33_1)) + Math_fround($34_1 * $31_1));
       HEAPF32[($5_1 + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround($29_1 * $43_1) + Math_fround($30_1 * $45_1)) + Math_fround($28_1 * $41_1));
       HEAPF32[($5_1 + 92 | 0) >> 2] = Math_fround(Math_fround(Math_fround($29_1 * $38_1) + Math_fround($30_1 * $39_1)) + Math_fround($28_1 * $37_1));
       HEAPF32[($5_1 + 88 | 0) >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $29_1) + Math_fround($36_1 * $30_1)) + Math_fround($34_1 * $28_1));
       HEAPF32[($5_1 + 144 | 0) >> 2] = Math_fround($24_1 + Math_fround(Math_fround(Math_fround($42_1 * $26_1) + Math_fround($44_1 * $27_1)) + Math_fround($40_1 * $25_1)));
       HEAPF32[($5_1 + 140 | 0) >> 2] = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($32_1 * $26_1) + Math_fround($33_1 * $27_1)) + Math_fround($31_1 * $25_1)));
       HEAPF32[($5_1 + 136 | 0) >> 2] = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($29_1 * $26_1) + Math_fround($30_1 * $27_1)) + Math_fround($28_1 * $25_1)));
      }
      HEAP32[($5_1 + 28 | 0) >> 2] = $20_1;
      HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
      HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($5_1 + 36 | 0) >> 2] = $5_1 + 152 | 0;
      HEAP32[($5_1 + 4 | 0) >> 2] = $21_1;
      HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
      HEAP32[$5_1 >> 2] = $2_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $5_1 + 88 | 0;
      $254($0_1 | 0, $5_1 + 24 | 0 | 0, $5_1 | 0, $20_1 | 0, $21_1 | 0);
      $13_1 = $13_1 + -8 | 0;
      if ($6_1) {
       continue label$13
      }
      break label$13;
     };
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 116 | 0) >> 2] | 0]($3_1);
    FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 116 | 0) >> 2] | 0]($4_1);
    $193(($5_1 + 216 | 0) + 112 | 0 | 0) | 0;
    $193($5_1 + 216 | 0 | 4 | 0 | 0) | 0;
    $193(($5_1 + 520 | 0) + 112 | 0 | 0) | 0;
    $193($5_1 + 520 | 0 | 4 | 0 | 0) | 0;
   }
   $0_1 = HEAP32[($5_1 + 836 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   label$16 : {
    if (!(HEAPU8[($5_1 + 840 | 0) >> 0] | 0)) {
     break label$16
    }
    $80($0_1 | 0);
   }
   HEAP32[($5_1 + 836 | 0) >> 2] = 0;
  }
  global$0 = $5_1 + 976 | 0;
 }
 
 function $259($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $10$hi = 0, $11_1 = 0, $11$hi = 0, $12_1 = 0, $12$hi = 0, $99_1 = 0, $111_1 = 0, $119_1 = 0, $128_1 = 0, $141_1 = 0, $153_1 = 0, $161_1 = 0, $170_1 = 0, $301_1 = 0, $372_1 = 0;
  $6_1 = global$0 - 528 | 0;
  global$0 = $6_1;
  label$1 : {
   label$2 : {
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 80 | 0) >> 2] | 0]($3_1) | 0 | 0) != (2 | 0)) {
     break label$2
    }
    $7_1 = $0_1 + ($5_1 ? 36 : 28) | 0;
    $8_1 = HEAP32[($3_1 + 156 | 0) >> 2] | 0;
    $9_1 = $8_1 + -1 | 0;
    HEAP32[$7_1 >> 2] = $9_1;
    if (!$8_1) {
     break label$1
    }
    label$3 : while (1) {
     $259($0_1 | 0, $1_1 | 0, $2_1 | 0, HEAP32[((HEAP32[($3_1 + 164 | 0) >> 2] | 0) + ($9_1 << 2 | 0) | 0) >> 2] | 0 | 0, $4_1 | 0, $5_1 | 0);
     $8_1 = HEAP32[$7_1 >> 2] | 0;
     $9_1 = $8_1 + -1 | 0;
     HEAP32[$7_1 >> 2] = $9_1;
     if ($8_1) {
      continue label$3
     }
     break label$1;
    };
   }
   $9_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 80 | 0) >> 2] | 0]($3_1) | 0;
   $7_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   label$4 : {
    if (($9_1 | 0) != (1 | 0)) {
     break label$4
    }
    if (($7_1 | 0) != (28 | 0)) {
     break label$4
    }
    $260($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    break label$1;
   }
   label$5 : {
    if (($7_1 | 0) != (31 | 0)) {
     break label$5
    }
    $261($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    break label$1;
   }
   label$6 : {
    if (($7_1 + -21 | 0) >>> 0 > 8 >>> 0) {
     break label$6
    }
    $262($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    break label$1;
   }
   $7_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $7_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[$7_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $7_1 + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $99_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($6_1 + 464 | 0) + 24 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $99_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = ($6_1 + 464 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $10_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $7_1 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $111_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($6_1 + 464 | 0) + 40 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $111_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
   $12_1 = i64toi32_i32$1;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $7_1 + 56 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $119_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($6_1 + 464 | 0) + 56 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $119_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$0 = $6_1;
   HEAP32[($6_1 + 464 | 0) >> 2] = $11_1;
   HEAP32[($6_1 + 468 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = $6_1;
   HEAP32[($6_1 + 480 | 0) >> 2] = $10_1;
   HEAP32[($6_1 + 484 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$0 = $6_1;
   HEAP32[($6_1 + 496 | 0) >> 2] = $12_1;
   HEAP32[($6_1 + 500 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
   $128_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 512 | 0) >> 2] = $128_1;
   HEAP32[($6_1 + 516 | 0) >> 2] = i64toi32_i32$0;
   $7_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $7_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[$7_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $7_1 + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $141_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($6_1 + 400 | 0) + 24 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $141_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = ($6_1 + 400 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $10_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $7_1 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $153_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($6_1 + 400 | 0) + 40 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $153_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
   $12_1 = i64toi32_i32$1;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $7_1 + 56 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $161_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($6_1 + 400 | 0) + 56 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $161_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$0 = $6_1;
   HEAP32[($6_1 + 400 | 0) >> 2] = $11_1;
   HEAP32[($6_1 + 404 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = $6_1;
   HEAP32[($6_1 + 416 | 0) >> 2] = $10_1;
   HEAP32[($6_1 + 420 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$0 = $6_1;
   HEAP32[($6_1 + 432 | 0) >> 2] = $12_1;
   HEAP32[($6_1 + 436 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
   $170_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 448 | 0) >> 2] = $170_1;
   HEAP32[($6_1 + 452 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($6_1 + 388 | 0) >> 2] = 0;
   HEAP8[($6_1 + 392 | 0) >> 0] = 1;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[($6_1 + 380 | 0) >> 2] = 0;
   HEAP32[($6_1 + 384 | 0) >> 2] = i64toi32_i32$0;
   $256($7_1 | 0, $6_1 + 464 | 0 | 0, $6_1 + 400 | 0 | 0, $3_1 | 0, $4_1 | 0, $6_1 + 376 | 0 | 0);
   label$7 : {
    if (!(HEAP32[($6_1 + 380 | 0) >> 2] | 0)) {
     break label$7
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 112 | 0) >> 2] | 0]($3_1);
    $179($6_1 + 72 | 0 | 4 | 0 | 0) | 0;
    i64toi32_i32$1 = $6_1 + 136 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 80 | 0) >> 2] = 1;
    i64toi32_i32$1 = $6_1 + 144 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $6_1 + 152 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $6_1 + 160 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $6_1 + 168 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $6_1 + 176 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($6_1 + 76 | 0) >> 2] = 8128;
    $200($6_1 + 184 | 0 | 0) | 0;
    HEAP32[($6_1 + 280 | 0) >> 2] = 4;
    HEAP32[($6_1 + 364 | 0) >> 2] = 8708;
    HEAP32[($6_1 + 356 | 0) >> 2] = 8628;
    HEAP32[($6_1 + 348 | 0) >> 2] = 8556;
    HEAP32[($6_1 + 184 | 0) >> 2] = 8364;
    HEAP32[($6_1 + 72 | 0) >> 2] = $3_1;
    label$8 : {
     label$9 : {
      if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 96 | 0) >> 2] | 0]($3_1) | 0)) {
       break label$9
      }
      $7_1 = $6_1 + 356 | 0;
      break label$8;
     }
     $7_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
     $7_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 100 | 0) >> 2] | 0]($7_1) | 0 ? $6_1 + 364 | 0 : $6_1 + 348 | 0;
    }
    HEAP32[($7_1 + 4 | 0) >> 2] = $6_1 + 72 | 0;
    HEAP32[($6_1 + 372 | 0) >> 2] = $7_1;
    $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 92 | 0) >> 2] | 0]($3_1) | 0;
    label$10 : {
     $7_1 = HEAP32[($6_1 + 380 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$10
     }
     label$11 : {
      if ($5_1) {
       break label$11
      }
      $9_1 = ($7_1 << 2 | 0) + -4 | 0;
      label$12 : while (1) {
       $8_1 = HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + $9_1 | 0) >> 2] | 0;
       HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
       $5_1 = HEAP32[($6_1 + 372 | 0) >> 2] | 0;
       $5_1 = FUNCTION_TABLE[HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0]($5_1, $8_1) | 0;
       label$13 : {
        if (!$4_1) {
         break label$13
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 132 | 0) >> 2] | 0]($6_1 + 8 | 0, $3_1, $8_1);
       }
       HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
       HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       $8_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       HEAP32[($6_1 + 16 | 0) >> 2] = $8_1;
       HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
       HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
       $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       $301_1 = $5_1;
       $5_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[($301_1 + (($8_1 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) ? 8 : 12) | 0) >> 2] = $6_1 + 8 | 0;
       $253($0_1 | 0, $6_1 + 8 | 0 | 0, $2_1 | 0, $7_1 | 0, $7_1 | 0);
       HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 2] = $5_1;
       $9_1 = $9_1 + -4 | 0;
       $7_1 = $7_1 + -1 | 0;
       if ($7_1) {
        continue label$12
       }
       break label$10;
      };
     }
     $9_1 = ($7_1 << 2 | 0) + -4 | 0;
     label$14 : while (1) {
      $8_1 = HEAP32[((HEAP32[($6_1 + 388 | 0) >> 2] | 0) + $9_1 | 0) >> 2] | 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = $8_1;
      $5_1 = HEAP32[($6_1 + 372 | 0) >> 2] | 0;
      $5_1 = FUNCTION_TABLE[HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0]($5_1, $8_1) | 0;
      label$15 : {
       if (!$4_1) {
        break label$15
       }
       FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 132 | 0) >> 2] | 0]($6_1 + 8 | 0, $3_1, $8_1);
      }
      HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
      HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      $8_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($6_1 + 16 | 0) >> 2] = $8_1;
      HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      $372_1 = $5_1;
      $5_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
      HEAP32[($372_1 + (($8_1 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) ? 8 : 12) | 0) >> 2] = $6_1 + 8 | 0;
      $253($0_1 | 0, $2_1 | 0, $6_1 + 8 | 0 | 0, $7_1 | 0, $7_1 | 0);
      HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 2] = $5_1;
      $9_1 = $9_1 + -4 | 0;
      $7_1 = $7_1 + -1 | 0;
      if ($7_1) {
       continue label$14
      }
      break label$14;
     };
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 116 | 0) >> 2] | 0]($3_1);
    $193($6_1 + 184 | 0 | 0) | 0;
    $193($6_1 + 72 | 0 | 4 | 0 | 0) | 0;
   }
   $7_1 = HEAP32[($6_1 + 388 | 0) >> 2] | 0;
   if (!$7_1) {
    break label$1
   }
   label$16 : {
    if (!(HEAPU8[($6_1 + 392 | 0) >> 0] | 0)) {
     break label$16
    }
    $80($7_1 | 0);
   }
   HEAP32[($6_1 + 388 | 0) >> 2] = 0;
  }
  global$0 = $6_1 + 528 | 0;
 }
 
 function $260($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, $20_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21_1 = Math_fround(0), i64toi32_i32$2 = 0, $22_1 = Math_fround(0), $24_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $23_1 = Math_fround(0), $17_1 = Math_fround(0), $35_1 = 0, $8_1 = 0, $8$hi = 0, $43_1 = 0, $9_1 = 0, $9$hi = 0, $51_1 = 0, $10_1 = 0, $10$hi = 0, $59_1 = 0, $68_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0);
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  $7_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = $7_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 80 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $35_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[$7_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  $8_1 = i64toi32_i32$1;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $7_1 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $43_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 80 | 0) + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $43_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $7_1 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $51_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 80 | 0) + 40 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $51_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
  $10_1 = i64toi32_i32$1;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $7_1 + 56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $59_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 80 | 0) + 56 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $59_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$0 = $6_1;
  HEAP32[($6_1 + 80 | 0) >> 2] = $8_1;
  HEAP32[($6_1 + 84 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $6_1;
  HEAP32[($6_1 + 96 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 100 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$0 = $6_1;
  HEAP32[($6_1 + 112 | 0) >> 2] = $10_1;
  HEAP32[($6_1 + 116 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
  $68_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[($6_1 + 128 | 0) >> 2] = $68_1;
  HEAP32[($6_1 + 132 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $11_1 = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($7_1 + 36 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($7_1 + 40 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[$7_1 >> 2]);
  $17_1 = Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($4_1 + 60 | 0) >> 2]);
  $23_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 48 | 0) >> 2]) * $20_1) + Math_fround(Math_fround(HEAPF32[($7_1 + 52 | 0) >> 2]) * $21_1)) + Math_fround(Math_fround(HEAPF32[($7_1 + 56 | 0) >> 2]) * $22_1)) + Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]));
  HEAPF32[($6_1 + 76 | 0) >> 2] = $23_1;
  $13_1 = Math_fround(Math_fround(Math_fround($19_1 * $20_1) + Math_fround($13_1 * $21_1)) + Math_fround($14_1 * $22_1));
  HEAPF32[($6_1 + 72 | 0) >> 2] = $13_1;
  $11_1 = Math_fround(Math_fround(Math_fround($18_1 * $20_1) + Math_fround($11_1 * $21_1)) + Math_fround($12_1 * $22_1));
  HEAPF32[($6_1 + 68 | 0) >> 2] = $11_1;
  $21_1 = Math_fround(Math_fround(Math_fround($16_1 * $20_1) + Math_fround($17_1 * $21_1)) + Math_fround($15_1 * $22_1));
  HEAPF32[($6_1 + 64 | 0) >> 2] = $21_1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($3_1, $6_1 + 80 | 0, $6_1 + 32 | 0, $6_1 + 48 | 0);
  $7_1 = ($6_1 + 32 | 0) + 20 | 0;
  $20_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($4_1));
  $22_1 = Math_fround($20_1 + Math_fround(HEAPF32[$7_1 >> 2]));
  HEAPF32[$7_1 >> 2] = $22_1;
  $7_1 = ($6_1 + 32 | 0) + 24 | 0;
  $12_1 = Math_fround($20_1 + Math_fround(HEAPF32[$7_1 >> 2]));
  HEAPF32[$7_1 >> 2] = $12_1;
  $15_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]) - $20_1);
  HEAPF32[($6_1 + 36 | 0) >> 2] = $15_1;
  $14_1 = Math_fround($20_1 + Math_fround(HEAPF32[($6_1 + 48 | 0) >> 2]));
  HEAPF32[($6_1 + 48 | 0) >> 2] = $14_1;
  $16_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2]) - $20_1);
  HEAPF32[($6_1 + 32 | 0) >> 2] = $16_1;
  $20_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2]) - $20_1);
  HEAPF32[($6_1 + 40 | 0) >> 2] = $20_1;
  label$1 : {
   $16_1 = Math_fround(Math_fround($16_1 + $14_1) * Math_fround(.5));
   $15_1 = Math_fround(Math_fround($15_1 + $22_1) * Math_fround(.5));
   $20_1 = Math_fround(Math_fround($20_1 + $12_1) * Math_fround(.5));
   $17_1 = Math_fround(Math_fround(Math_fround($16_1 * $21_1) + Math_fround($15_1 * $11_1)) + Math_fround($20_1 * $13_1));
   $20_1 = Math_fround(Math_fround(Math_fround(Math_fround($14_1 - $16_1) * Math_fround(Math_abs($21_1))) + Math_fround(Math_fround($22_1 - $15_1) * Math_fround(Math_abs($11_1)))) + Math_fround(Math_fround($12_1 - $20_1) * Math_fround(Math_abs($13_1))));
   if ($23_1 > Math_fround(Math_fround($17_1 + $20_1) + Math_fround(9.999999974752427e-07))) {
    break label$1
   }
   if (Math_fround($23_1 + Math_fround(9.999999974752427e-07)) >= Math_fround($17_1 - $20_1) ^ 1 | 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 112 | 0) >> 2] | 0]($3_1);
   $20_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($3_1));
   $21_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($4_1));
   label$2 : {
    $7_1 = HEAP32[($3_1 + 188 | 0) >> 2] | 0;
    if (!$7_1) {
     break label$2
    }
    $23_1 = Math_fround($20_1 + $21_1);
    $4_1 = $7_1 + -1 | 0;
    label$3 : while (1) {
     $7_1 = (HEAP32[($3_1 + 184 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 196 | 0) >> 2] | 0, $4_1) | 0;
     label$4 : {
      label$5 : {
       if ((HEAP32[($3_1 + 192 | 0) >> 2] | 0 | 0) != (1 | 0)) {
        break label$5
       }
       $20_1 = Math_fround(+HEAPF64[$7_1 >> 3] * +Math_fround(HEAPF32[($3_1 + 160 | 0) >> 2]));
       HEAPF32[($6_1 + 16 | 0) >> 2] = $20_1;
       $21_1 = Math_fround(+HEAPF64[($7_1 + 8 | 0) >> 3] * +Math_fround(HEAPF32[($3_1 + 164 | 0) >> 2]));
       HEAPF32[($6_1 + 20 | 0) >> 2] = $21_1;
       $22_1 = Math_fround(+HEAPF64[($7_1 + 16 | 0) >> 3] * +Math_fround(HEAPF32[($3_1 + 168 | 0) >> 2]));
       break label$4;
      }
      $20_1 = Math_fround(Math_fround(HEAPF32[$7_1 >> 2]) * Math_fround(HEAPF32[($3_1 + 160 | 0) >> 2]));
      HEAPF32[($6_1 + 16 | 0) >> 2] = $20_1;
      $21_1 = Math_fround(Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 164 | 0) >> 2]));
      HEAPF32[($6_1 + 20 | 0) >> 2] = $21_1;
      $22_1 = Math_fround(Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($3_1 + 168 | 0) >> 2]));
     }
     HEAP32[($6_1 + 28 | 0) >> 2] = 0;
     $12_1 = Math_fround(Math_fround(Math_fround(Math_fround($20_1 * Math_fround(HEAPF32[($6_1 + 96 | 0) >> 2])) + Math_fround($21_1 * Math_fround(HEAPF32[($6_1 + 100 | 0) >> 2]))) + Math_fround($22_1 * Math_fround(HEAPF32[($6_1 + 104 | 0) >> 2]))) + Math_fround(HEAPF32[($6_1 + 132 | 0) >> 2]));
     HEAPF32[($6_1 + 20 | 0) >> 2] = $12_1;
     $13_1 = Math_fround(HEAPF32[($6_1 + 68 | 0) >> 2]);
     $14_1 = Math_fround(Math_fround(Math_fround(Math_fround($20_1 * Math_fround(HEAPF32[($6_1 + 80 | 0) >> 2])) + Math_fround($21_1 * Math_fround(HEAPF32[($6_1 + 84 | 0) >> 2]))) + Math_fround($22_1 * Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]))) + Math_fround(HEAPF32[($6_1 + 128 | 0) >> 2]));
     HEAPF32[($6_1 + 16 | 0) >> 2] = $14_1;
     $11_1 = Math_fround(HEAPF32[($6_1 + 64 | 0) >> 2]);
     $20_1 = Math_fround(Math_fround(Math_fround(Math_fround($20_1 * Math_fround(HEAPF32[($6_1 + 112 | 0) >> 2])) + Math_fround($21_1 * Math_fround(HEAPF32[($6_1 + 116 | 0) >> 2]))) + Math_fround($22_1 * Math_fround(HEAPF32[($6_1 + 120 | 0) >> 2]))) + Math_fround(HEAPF32[($6_1 + 136 | 0) >> 2]));
     HEAPF32[($6_1 + 24 | 0) >> 2] = $20_1;
     label$6 : {
      $21_1 = Math_fround(HEAPF32[($6_1 + 72 | 0) >> 2]);
      $20_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($14_1 * $11_1) + Math_fround($12_1 * $13_1)) + Math_fround($20_1 * $21_1)) - Math_fround(HEAPF32[($6_1 + 76 | 0) >> 2])) - $23_1);
      if ($20_1 < Math_fround(0.0) ^ 1 | 0) {
       break label$6
      }
      label$7 : {
       if (!$5_1) {
        break label$7
       }
       HEAP32[($6_1 + 12 | 0) >> 2] = 0;
       HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(-$21_1);
       HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(-$13_1);
       HEAPF32[$6_1 >> 2] = Math_fround(-$11_1);
       $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($7_1, HEAP32[($0_1 + 28 | 0) >> 2] | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
       $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($7_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0);
       label$8 : {
        $24_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
        if ($24_1) {
         break label$8
        }
        $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        $24_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($7_1, HEAP32[($2_1 + 8 | 0) >> 2] | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0) | 0;
        HEAP32[($0_1 + 12 | 0) >> 2] = $24_1;
       }
       $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       HEAP32[($7_1 + 4 | 0) >> 2] = $24_1;
       FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($7_1, $6_1, $6_1 + 16 | 0, $20_1);
       break label$6;
      }
      $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($7_1, HEAP32[($0_1 + 28 | 0) >> 2] | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
      $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($7_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0);
      label$9 : {
       $24_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       if ($24_1) {
        break label$9
       }
       $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $24_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($7_1, HEAP32[($1_1 + 8 | 0) >> 2] | 0, HEAP32[($2_1 + 8 | 0) >> 2] | 0) | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $24_1;
      }
      $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      HEAP32[($7_1 + 4 | 0) >> 2] = $24_1;
      FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($7_1, $6_1 + 64 | 0, $6_1 + 16 | 0, $20_1);
     }
     $4_1 = $4_1 + -1 | 0;
     if (($4_1 | 0) != (-1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 116 | 0) >> 2] | 0]($3_1);
  }
  global$0 = $6_1 + 144 | 0;
 }
 
 function $261($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $6_1 = 0, $7_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $32_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = 0, $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $33_1 = 0, $22_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $15_1 = Math_fround(0);
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  label$1 : {
   $7_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   if (!$7_1) {
    break label$1
   }
   $8_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   $9_1 = Math_fround(HEAPF32[($8_1 + 56 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($8_1 + 52 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]);
   $16_1 = Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]);
   $17_1 = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[$8_1 >> 2]);
   $21_1 = $7_1 + -1 | 0;
   $7_1 = Math_imul($7_1, 80) + -80 | 0;
   label$2 : while (1) {
    $8_1 = (HEAP32[($4_1 + 28 | 0) >> 2] | 0) + $7_1 | 0;
    $22_1 = HEAP32[($8_1 + 64 | 0) >> 2] | 0;
    HEAP32[($6_1 + 92 | 0) >> 2] = 0;
    HEAP32[($6_1 + 76 | 0) >> 2] = 0;
    HEAP32[($6_1 + 60 | 0) >> 2] = 0;
    HEAP32[($6_1 + 44 | 0) >> 2] = 0;
    $23_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
    $24_1 = Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]);
    $25_1 = Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]);
    HEAPF32[($6_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $23_1) + Math_fround($12_1 * $24_1)) + Math_fround($11_1 * $25_1));
    $26_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
    $27_1 = Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]);
    $28_1 = Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]);
    HEAPF32[($6_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $26_1) + Math_fround($12_1 * $27_1)) + Math_fround($11_1 * $28_1));
    $29_1 = Math_fround(HEAPF32[$8_1 >> 2]);
    $30_1 = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
    $31_1 = Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]);
    HEAPF32[($6_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $29_1) + Math_fround($12_1 * $30_1)) + Math_fround($11_1 * $31_1));
    HEAPF32[($6_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $23_1) + Math_fround($14_1 * $24_1)) + Math_fround($13_1 * $25_1));
    HEAPF32[($6_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $26_1) + Math_fround($14_1 * $27_1)) + Math_fround($13_1 * $28_1));
    HEAPF32[($6_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $29_1) + Math_fround($14_1 * $30_1)) + Math_fround($13_1 * $31_1));
    HEAPF32[($6_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $23_1) + Math_fround($19_1 * $24_1)) + Math_fround($18_1 * $25_1));
    HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $26_1) + Math_fround($19_1 * $27_1)) + Math_fround($18_1 * $28_1));
    HEAPF32[($6_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $29_1) + Math_fround($19_1 * $30_1)) + Math_fround($18_1 * $31_1));
    $23_1 = Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]);
    $24_1 = Math_fround(HEAPF32[($8_1 + 52 | 0) >> 2]);
    $25_1 = Math_fround(HEAPF32[($8_1 + 56 | 0) >> 2]);
    HEAPF32[($6_1 + 88 | 0) >> 2] = Math_fround($9_1 + Math_fround(Math_fround(Math_fround($16_1 * $23_1) + Math_fround($12_1 * $24_1)) + Math_fround($11_1 * $25_1)));
    HEAPF32[($6_1 + 84 | 0) >> 2] = Math_fround($10_1 + Math_fround(Math_fround(Math_fround($17_1 * $23_1) + Math_fround($14_1 * $24_1)) + Math_fround($13_1 * $25_1)));
    HEAPF32[($6_1 + 80 | 0) >> 2] = Math_fround($15_1 + Math_fround(Math_fround(Math_fround($20_1 * $23_1) + Math_fround($19_1 * $24_1)) + Math_fround($18_1 * $25_1)));
    HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
    $32_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    HEAP32[($6_1 + 16 | 0) >> 2] = $32_1;
    HEAP32[($6_1 + 12 | 0) >> 2] = $22_1;
    HEAP32[($6_1 + 28 | 0) >> 2] = $21_1;
    HEAP32[($6_1 + 24 | 0) >> 2] = -1;
    $8_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    HEAP32[($6_1 + 20 | 0) >> 2] = $6_1 + 32 | 0;
    label$3 : {
     label$4 : {
      $33_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
      if (($32_1 | 0) != (HEAP32[($33_1 + 8 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $32_1 = $8_1 + 8 | 0;
      break label$3;
     }
     $32_1 = $8_1 + 12 | 0;
     $33_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
    }
    HEAP32[$32_1 >> 2] = $6_1 + 8 | 0;
    $259($0_1 | 0, $1_1 | 0, $6_1 + 8 | 0 | 0, $3_1 | 0, $22_1 | 0, $5_1 | 0);
    $8_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    HEAP32[($8_1 + ((HEAP32[((HEAP32[($8_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) ? 8 : 12) | 0) >> 2] = $33_1;
    $7_1 = $7_1 + -80 | 0;
    $21_1 = $21_1 + -1 | 0;
    if (($21_1 | 0) != (-1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $6_1 + 96 | 0;
 }
 
 function $262($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $16_1 = Math_fround(0), $18_1 = Math_fround(0), $20_1 = Math_fround(0), $22_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $27_1 = Math_fround(0), $30_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $17_1 = Math_fround(0), $19_1 = Math_fround(0), $21_1 = Math_fround(0), $23_1 = Math_fround(0), $26_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $6_1 = global$0 - 128 | 0;
  global$0 = $6_1;
  HEAP8[($6_1 + 116 | 0) >> 0] = $5_1;
  HEAP32[($6_1 + 112 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 100 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 96 | 0) >> 2] = 8784;
  HEAP32[($6_1 + 104 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 108 | 0) >> 2] = $2_1;
  (wasm2js_i32$0 = $6_1, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($4_1))), HEAPF32[(wasm2js_i32$0 + 120 | 0) >> 2] = wasm2js_f32$0;
  $2_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $7_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
  $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  $9_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $22_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $23_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
  $25_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $27_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $28_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $29_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $30_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  HEAP32[($6_1 + 92 | 0) >> 2] = 0;
  HEAP32[($6_1 + 76 | 0) >> 2] = 0;
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  HEAPF32[(($6_1 + 32 | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($30_1 * $29_1) + Math_fround($16_1 * $15_1)) + Math_fround($18_1 * $17_1));
  HEAPF32[(($6_1 + 32 | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($30_1 * $28_1) + Math_fround($16_1 * $13_1)) + Math_fround($18_1 * $14_1));
  HEAPF32[(($6_1 + 32 | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($27_1 * $29_1) + Math_fround($11_1 * $15_1)) + Math_fround($12_1 * $17_1));
  HEAPF32[(($6_1 + 32 | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($27_1 * $28_1) + Math_fround($11_1 * $13_1)) + Math_fround($12_1 * $14_1));
  $25_1 = Math_fround(-$25_1);
  HEAPF32[(($6_1 + 32 | 0) + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($30_1 * $25_1) - Math_fround($16_1 * $7_1)) - Math_fround($18_1 * $8_1)) + Math_fround(Math_fround(Math_fround($30_1 * $26_1) + Math_fround($16_1 * $9_1)) + Math_fround($18_1 * $10_1)));
  HEAPF32[(($6_1 + 32 | 0) + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($27_1 * $25_1) - Math_fround($11_1 * $7_1)) - Math_fround($12_1 * $8_1)) + Math_fround(Math_fround(Math_fround($27_1 * $26_1) + Math_fround($11_1 * $9_1)) + Math_fround($12_1 * $10_1)));
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  HEAPF32[($6_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround($22_1 * $21_1) + Math_fround($24_1 * $23_1)) + Math_fround($20_1 * $19_1));
  HEAPF32[($6_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround($30_1 * $21_1) + Math_fround($16_1 * $23_1)) + Math_fround($18_1 * $19_1));
  HEAPF32[($6_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround($27_1 * $21_1) + Math_fround($11_1 * $23_1)) + Math_fround($12_1 * $19_1));
  HEAPF32[($6_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($22_1 * $29_1) + Math_fround($24_1 * $15_1)) + Math_fround($20_1 * $17_1));
  HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($22_1 * $28_1) + Math_fround($24_1 * $13_1)) + Math_fround($20_1 * $14_1));
  HEAPF32[($6_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($22_1 * $25_1) - Math_fround($24_1 * $7_1)) - Math_fround($20_1 * $8_1)) + Math_fround(Math_fround(Math_fround($22_1 * $26_1) + Math_fround($24_1 * $9_1)) + Math_fround($20_1 * $10_1)));
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($3_1, $6_1 + 32 | 0, $6_1 + 16 | 0, $6_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($4_1, $6_1 + 96 | 0, $6_1 + 16 | 0, $6_1);
  $211($6_1 + 96 | 0 | 0) | 0;
  global$0 = $6_1 + 128 | 0;
 }
 
 function $263($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0;
  label$1 : {
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$1
   }
   $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($6_1, $5_1);
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  }
  label$2 : {
   $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$2
   }
   FUNCTION_TABLE[HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0]($5_1) | 0;
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 60 | 0) >> 2] | 0]($5_1, HEAP32[($0_1 + 8 | 0) >> 2] | 0);
   HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  }
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = -1;
  HEAP32[($0_1 + 24 | 0) >> 2] = -1;
  HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = -1;
  HEAP32[i64toi32_i32$1 >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $4_1;
  label$3 : {
   $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if ((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (25 | 0)) {
    break label$3
   }
   label$4 : {
    $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != (25 | 0)) {
     break label$4
    }
    $258($0_1 | 0, $1_1 | 0, $2_1 | 0, $5_1 | 0, $3_1 | 0);
    return;
   }
   $259($0_1 | 0, $1_1 | 0, $2_1 | 0, $5_1 | 0, $3_1 | 0, 0 | 0);
   return;
  }
  label$5 : {
   $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) != (25 | 0)) {
    break label$5
   }
   $259($0_1 | 0, $2_1 | 0, $1_1 | 0, $3_1 | 0, $5_1 | 0, 1 | 0);
  }
 }
 
 function $264($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return Math_fround(Math_fround(1.0));
 }
 
 function $265($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (HEAPU8[(0 + 1716 | 0) >> 0] | 0) {
    break label$1
   }
   HEAP32[(0 + 1708 | 0) >> 2] = 8844;
   HEAP8[(0 + 1716 | 0) >> 0] = 1;
   HEAP8[(0 + 1712 | 0) >> 0] = 0;
  }
  $231($0_1 | 0, 25 | 0, 0 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 1 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 2 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 3 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 4 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 5 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 6 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 7 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 8 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 9 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 10 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 11 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 12 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 13 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 14 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 15 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 16 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 17 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 18 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 19 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 20 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 21 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 22 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 23 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 24 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 26 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 27 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 28 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 29 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 30 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 31 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 32 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 33 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 34 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 35 | 0, 1708 | 0);
  $231($0_1 | 0, 0 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 1 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 2 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 3 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 4 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 5 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 6 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 7 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 8 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 9 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 10 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 11 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 12 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 13 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 14 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 15 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 16 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 17 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 18 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 19 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 20 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 21 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 22 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 23 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 24 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 25 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 26 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 27 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 28 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 29 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 30 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 31 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 32 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 33 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 34 | 0, 25 | 0, 1708 | 0);
  $231($0_1 | 0, 35 | 0, 25 | 0, 1708 | 0);
 }
 
 function $266($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $267($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($3_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $4_1 = $3_1 ? $3_1 << 1 | 0 : 1;
    if (($3_1 | 0) >= ($4_1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($4_1) {
       break label$4
      }
      $5_1 = 0;
      break label$3;
     }
     $5_1 = $79($4_1 << 2 | 0 | 0, 16 | 0) | 0;
     $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    }
    label$5 : {
     if (($3_1 | 0) < (1 | 0)) {
      break label$5
     }
     $2_1 = 0;
     $6_1 = $3_1;
     label$6 : while (1) {
      HEAP32[($5_1 + $2_1 | 0) >> 2] = HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
      $2_1 = $2_1 + 4 | 0;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$7
     }
     label$8 : {
      if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
       break label$8
      }
      $80($2_1 | 0);
      $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    }
    HEAP32[($1_1 + 12 | 0) >> 2] = $5_1;
    HEAP8[($1_1 + 16 | 0) >> 0] = 1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
   HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
 }
 
 function $268($0_1) {
  $0_1 = $0_1 | 0;
  $193($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $269($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), $25_1 = 0, $26_1 = 0, $6_1 = Math_fround(0), $13_1 = Math_fround(0), $18_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $27_1 = 0, $28_1 = 0, $29_1 = 0, $97_1 = Math_fround(0), $109_1 = Math_fround(0), $177_1 = Math_fround(0);
  $4_1 = global$0 - 48 | 0;
  $5_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $12_1 = Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $6_1) + Math_fround($7_1 * $8_1)) + Math_fround($9_1 * $10_1)) + $11_1);
  HEAPF32[($4_1 + 40 | 0) >> 2] = $12_1;
  $13_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $17_1 = Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $13_1) + Math_fround($7_1 * $14_1)) + Math_fround($9_1 * $15_1)) + $16_1);
  HEAPF32[($4_1 + 36 | 0) >> 2] = $17_1;
  $18_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $97_1 = Math_fround($5_1 * $18_1);
  $5_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $109_1 = Math_fround(Math_fround($97_1 + Math_fround($7_1 * $5_1)) + Math_fround($9_1 * $19_1));
  $9_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $20_1 = Math_fround($109_1 + $9_1);
  HEAPF32[($4_1 + 44 | 0) >> 2] = $20_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  $7_1 = Math_fround(HEAPF32[($0_1 + 76 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]);
  $23_1 = Math_fround($11_1 + Math_fround(Math_fround(Math_fround($6_1 * $7_1) + Math_fround($8_1 * $21_1)) + Math_fround($10_1 * $22_1)));
  HEAPF32[($4_1 + 20 | 0) >> 2] = $23_1;
  $24_1 = Math_fround($16_1 + Math_fround(Math_fround(Math_fround($13_1 * $7_1) + Math_fround($14_1 * $21_1)) + Math_fround($15_1 * $22_1)));
  HEAPF32[($4_1 + 24 | 0) >> 2] = $24_1;
  $7_1 = Math_fround($9_1 + Math_fround(Math_fround(Math_fround($18_1 * $7_1) + Math_fround($5_1 * $21_1)) + Math_fround($19_1 * $22_1)));
  HEAPF32[($4_1 + 16 | 0) >> 2] = $7_1;
  $21_1 = Math_fround(HEAPF32[($0_1 + 92 | 0) >> 2]);
  $177_1 = Math_fround($18_1 * $21_1);
  $18_1 = Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]);
  $9_1 = Math_fround($9_1 + Math_fround(Math_fround($177_1 + Math_fround($5_1 * $18_1)) + Math_fround($19_1 * $22_1)));
  HEAPF32[$4_1 >> 2] = $9_1;
  $1_1 = $7_1 > $9_1;
  $25_1 = $20_1 > ($1_1 ? $9_1 : $7_1);
  $26_1 = $25_1 ? $4_1 : $4_1 + 44 | 0;
  $5_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
  HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 ? $26_1 : $25_1 ? $4_1 + 16 | 0 : $26_1) >> 2]) - $5_1);
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  $13_1 = Math_fround($16_1 + Math_fround(Math_fround(Math_fround($13_1 * $21_1) + Math_fround($14_1 * $18_1)) + Math_fround($15_1 * $22_1)));
  HEAPF32[($4_1 + 8 | 0) >> 2] = $13_1;
  $1_1 = $4_1 + 8 | 0;
  $0_1 = $24_1 > $13_1;
  $25_1 = $17_1 > Math_fround(HEAPF32[(($0_1 ? $4_1 : $4_1 + 16 | 0) + 8 | 0) >> 2]);
  $26_1 = $25_1 ? $1_1 : $4_1 + 36 | 0;
  $27_1 = ($4_1 + 16 | 0) + 8 | 0;
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 ? $26_1 : $25_1 ? $27_1 : $26_1) >> 2]) - $5_1);
  $6_1 = Math_fround($11_1 + Math_fround(Math_fround(Math_fround($6_1 * $21_1) + Math_fround($8_1 * $18_1)) + Math_fround($10_1 * $22_1)));
  HEAPF32[($4_1 + 4 | 0) >> 2] = $6_1;
  $0_1 = $4_1 | 4 | 0;
  $25_1 = $23_1 > $6_1;
  $26_1 = $12_1 > Math_fround(HEAPF32[(($25_1 ? $4_1 : $4_1 + 16 | 0) + 4 | 0) >> 2]);
  $28_1 = $26_1 ? $0_1 : $4_1 + 40 | 0;
  $29_1 = $4_1 + 16 | 0 | 4 | 0;
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($25_1 ? $28_1 : $26_1 ? $29_1 : $28_1) >> 2]) - $5_1);
  $2_1 = $24_1 < $13_1;
  $25_1 = $17_1 < Math_fround(HEAPF32[(($2_1 ? $4_1 : $4_1 + 16 | 0) + 8 | 0) >> 2]);
  $1_1 = $25_1 ? $1_1 : $4_1 + 36 | 0;
  HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($5_1 + Math_fround(HEAPF32[($2_1 ? $1_1 : $25_1 ? $27_1 : $1_1) >> 2]));
  $1_1 = $23_1 < $6_1;
  $2_1 = $12_1 < Math_fround(HEAPF32[(($1_1 ? $4_1 : $4_1 + 16 | 0) + 4 | 0) >> 2]);
  $0_1 = $2_1 ? $0_1 : $4_1 + 40 | 0;
  HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($5_1 + Math_fround(HEAPF32[($1_1 ? $0_1 : $2_1 ? $29_1 : $0_1) >> 2]));
  $1_1 = $7_1 < $9_1;
  $0_1 = $20_1 < ($1_1 ? $9_1 : $7_1);
  $2_1 = $0_1 ? $4_1 : $4_1 + 44 | 0;
  HEAPF32[$3_1 >> 2] = Math_fround($5_1 + Math_fround(HEAPF32[($1_1 ? $2_1 : $0_1 ? $4_1 + 16 | 0 : $2_1) >> 2]));
 }
 
 function $270($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 16 | 0 | 0;
 }
 
 function $271($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $272($0_1) {
  $0_1 = $0_1 | 0;
  return 8320 | 0;
 }
 
 function $273($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $274($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[($0_1 + 48 | 0) >> 2] = $1_1;
 }
 
 function $275($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]));
 }
 
 function $276($0_1) {
  $0_1 = $0_1 | 0;
  return 52 | 0;
 }
 
 function $277($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $98($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($1_1 + 28 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP32[($1_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  HEAP32[($1_1 + 36 | 0) >> 2] = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  HEAP32[($1_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[($1_1 + 24 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($1_1 + 48 | 0) >> 2] = 0;
  HEAP32[($1_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  return 8329 | 0;
 }
 
 function $278($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), i64toi32_i32$2 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $82_1 = 0, $87_1 = 0;
  $3_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $4_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $6_1 = Math_fround(Math_fround(Math_fround($3_1 * Math_fround(HEAPF32[($1_1 + 76 | 0) >> 2])) + Math_fround($4_1 * Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]))) + Math_fround($5_1 * Math_fround(HEAPF32[($1_1 + 84 | 0) >> 2])));
  $7_1 = Math_fround(Math_fround(Math_fround($3_1 * Math_fround(HEAPF32[($1_1 + 92 | 0) >> 2])) + Math_fround($4_1 * Math_fround(HEAPF32[($1_1 + 96 | 0) >> 2]))) + Math_fround($5_1 * Math_fround(HEAPF32[($1_1 + 100 | 0) >> 2])));
  $3_1 = Math_fround(Math_fround(Math_fround($3_1 * Math_fround(HEAPF32[($1_1 + 60 | 0) >> 2])) + Math_fround($4_1 * Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]))) + Math_fround($5_1 * Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2])));
  $1_1 = ($1_1 + 60 | 0) + (($3_1 < $6_1 ? ($6_1 < $7_1 ? 2 : 1) : ($3_1 < $7_1) << 1 | 0) << 4 | 0) | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $82_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $82_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $87_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $87_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $279($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = Math_fround(0), i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $4_1 = 0, $82_1 = 0, $87_1 = 0;
  label$1 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $4_1 = $0_1 + 60 | 0;
   label$2 : while (1) {
    $5_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $6_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    $7_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $8_1 = Math_fround(Math_fround(Math_fround($5_1 * Math_fround(HEAPF32[($0_1 + 76 | 0) >> 2])) + Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]))) + Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2])));
    $9_1 = Math_fround(Math_fround(Math_fround($5_1 * Math_fround(HEAPF32[($0_1 + 92 | 0) >> 2])) + Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2]))) + Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2])));
    $5_1 = Math_fround(Math_fround(Math_fround($5_1 * Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2])) + Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]))) + Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2])));
    i64toi32_i32$2 = $4_1 + (($5_1 < $8_1 ? ($8_1 < $9_1 ? 2 : 1) : ($5_1 < $9_1) << 1 | 0) << 4 | 0) | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $82_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[i64toi32_i32$0 >> 2] = $82_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $87_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 16 | 0;
    $2_1 = $2_1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $280($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $281($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $10_1 = Math_fround(0), $7_1 = Math_fround(0), $11_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $9_1 = Math_fround(0), $6_1 = Math_fround(0), $8_1 = Math_fround(0), $59_1 = Math_fround(0), $62_1 = Math_fround(0);
  $3_1 = Math_fround(HEAPF32[($0_1 + 92 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($0_1 + 76 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $4_1 = Math_fround($4_1 - $11_1);
  $9_1 = Math_fround($9_1 - $10_1);
  $5_1 = Math_fround($5_1 - $10_1);
  $11_1 = Math_fround($3_1 - $11_1);
  $10_1 = Math_fround(Math_fround($4_1 * $9_1) - Math_fround($5_1 * $11_1));
  $59_1 = $10_1;
  $62_1 = Math_fround($10_1 * $10_1);
  $10_1 = Math_fround($6_1 - $7_1);
  $3_1 = Math_fround($8_1 - $7_1);
  $7_1 = Math_fround(Math_fround($5_1 * $10_1) - Math_fround($3_1 * $9_1));
  $10_1 = Math_fround(Math_fround($3_1 * $11_1) - Math_fround($4_1 * $10_1));
  $11_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($62_1 + Math_fround(Math_fround($7_1 * $7_1) + Math_fround($10_1 * $10_1))))));
  $3_1 = Math_fround($59_1 * $11_1);
  HEAPF32[($2_1 + 8 | 0) >> 2] = $3_1;
  $10_1 = Math_fround($10_1 * $11_1);
  HEAPF32[($2_1 + 4 | 0) >> 2] = $10_1;
  $7_1 = Math_fround($7_1 * $11_1);
  HEAPF32[$2_1 >> 2] = $7_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround(-$3_1);
   HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround(-$10_1);
   HEAPF32[$2_1 >> 2] = Math_fround(-$7_1);
  }
 }
 
 function $282($0_1) {
  $0_1 = $0_1 | 0;
  return 3 | 0;
 }
 
 function $283($0_1) {
  $0_1 = $0_1 | 0;
  return 3 | 0;
 }
 
 function $284($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 108 | 0) >> 2] | 0]($0_1, $1_1, $2_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 108 | 0) >> 2] | 0]($0_1, ($1_1 + 1 | 0 | 0) % (3 | 0) | 0, $3_1);
 }
 
 function $285($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $15_1 = 0;
  $0_1 = $0_1 + ($1_1 << 4 | 0) | 0;
  i64toi32_i32$2 = $0_1 + 68 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $11_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1 + 60 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[i64toi32_i32$1 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $286($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $287($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 124 | 0) >> 2] | 0]($0_1, $3_1, $1_1, $2_1);
 }
 
 function $288($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $7_1 = Math_fround(0), $9_1 = Math_fround(0), $3_1 = 0, $12_1 = Math_fround(0), $6_1 = Math_fround(0), $11_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $5_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $4_1 = 0, $52_1 = Math_fround(0), $55_1 = Math_fround(0), $66_1 = Math_fround(0), $163_1 = Math_fround(0), $166_1 = Math_fround(0), $169_1 = Math_fround(0), $259_1 = Math_fround(0), $262_1 = Math_fround(0), $265_1 = Math_fround(0), $357_1 = Math_fround(0), $360_1 = Math_fround(0), $363_1 = Math_fround(0);
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  label$1 : {
   $5_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
   $6_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 76 | 0) >> 2]) - $5_1);
   $7_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
   $8_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2]) - $7_1);
   $9_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]) - $7_1);
   $10_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 92 | 0) >> 2]) - $5_1);
   $11_1 = Math_fround(Math_fround($6_1 * $8_1) - Math_fround($9_1 * $10_1));
   $52_1 = $11_1;
   $55_1 = Math_fround($11_1 * $11_1);
   $12_1 = Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]);
   $11_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]) - $12_1);
   $66_1 = Math_fround($9_1 * $11_1);
   $9_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]) - $12_1);
   $8_1 = Math_fround($66_1 - Math_fround($9_1 * $8_1));
   $6_1 = Math_fround(Math_fround($9_1 * $10_1) - Math_fround($6_1 * $11_1));
   $9_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($55_1 + Math_fround(Math_fround($8_1 * $8_1) + Math_fround($6_1 * $6_1))))));
   $11_1 = Math_fround($52_1 * $9_1);
   $8_1 = Math_fround($8_1 * $9_1);
   $6_1 = Math_fround($6_1 * $9_1);
   $7_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * $11_1) + Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * $8_1) + Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * $6_1))) - Math_fround(Math_fround($12_1 * $11_1) + Math_fround(Math_fround($5_1 * $8_1) + Math_fround($7_1 * $6_1))));
   $5_1 = Math_fround(-$2_1);
   if ($7_1 >= $5_1 ^ 1 | 0) {
    break label$1
   }
   if ($7_1 <= $2_1 ^ 1 | 0) {
    break label$1
   }
   $4_1 = 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 104 | 0) >> 2] | 0]($0_1, 0, $3_1 + 16 | 0, $3_1);
   $2_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
   $12_1 = Math_fround(Math_fround(HEAPF32[$3_1 >> 2]) - $2_1);
   $10_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
   $9_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) - $10_1);
   $7_1 = Math_fround(Math_fround($6_1 * $12_1) - Math_fround($8_1 * $9_1));
   $163_1 = $7_1;
   $166_1 = Math_fround($7_1 * $7_1);
   $169_1 = Math_fround($11_1 * $9_1);
   $13_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
   $9_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) - $13_1);
   $7_1 = Math_fround($169_1 - Math_fround($6_1 * $9_1));
   $12_1 = Math_fround(Math_fround($8_1 * $9_1) - Math_fround($11_1 * $12_1));
   $9_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($166_1 + Math_fround(Math_fround($7_1 * $7_1) + Math_fround($12_1 * $12_1))))));
   $14_1 = Math_fround($163_1 * $9_1);
   $7_1 = Math_fround($7_1 * $9_1);
   $12_1 = Math_fround($12_1 * $9_1);
   if (Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * $14_1) + Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * $7_1) + Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * $12_1))) - Math_fround(Math_fround($13_1 * $14_1) + Math_fround(Math_fround($2_1 * $7_1) + Math_fround($10_1 * $12_1)))) < $5_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 104 | 0) >> 2] | 0]($0_1, 1, $3_1 + 16 | 0, $3_1);
   $2_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
   $12_1 = Math_fround(Math_fround(HEAPF32[$3_1 >> 2]) - $2_1);
   $10_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
   $9_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) - $10_1);
   $7_1 = Math_fround(Math_fround($6_1 * $12_1) - Math_fround($8_1 * $9_1));
   $259_1 = $7_1;
   $262_1 = Math_fround($7_1 * $7_1);
   $265_1 = Math_fround($11_1 * $9_1);
   $13_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
   $9_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) - $13_1);
   $7_1 = Math_fround($265_1 - Math_fround($6_1 * $9_1));
   $12_1 = Math_fround(Math_fround($8_1 * $9_1) - Math_fround($11_1 * $12_1));
   $9_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($262_1 + Math_fround(Math_fround($7_1 * $7_1) + Math_fround($12_1 * $12_1))))));
   $14_1 = Math_fround($259_1 * $9_1);
   $7_1 = Math_fround($7_1 * $9_1);
   $12_1 = Math_fround($12_1 * $9_1);
   if (!(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * $14_1) + Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * $7_1) + Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * $12_1))) - Math_fround(Math_fround($13_1 * $14_1) + Math_fround(Math_fround($2_1 * $7_1) + Math_fround($10_1 * $12_1)))) < $5_1 ^ 1 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 104 | 0) >> 2] | 0]($0_1, 2, $3_1 + 16 | 0, $3_1);
   $12_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
   $9_1 = Math_fround(Math_fround(HEAPF32[$3_1 >> 2]) - $12_1);
   $2_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
   $10_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) - $2_1);
   $7_1 = Math_fround(Math_fround($6_1 * $9_1) - Math_fround($8_1 * $10_1));
   $357_1 = $7_1;
   $360_1 = Math_fround($7_1 * $7_1);
   $363_1 = Math_fround($11_1 * $10_1);
   $7_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
   $10_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) - $7_1);
   $6_1 = Math_fround($363_1 - Math_fround($6_1 * $10_1));
   $11_1 = Math_fround(Math_fround($8_1 * $10_1) - Math_fround($11_1 * $9_1));
   $8_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($360_1 + Math_fround(Math_fround($6_1 * $6_1) + Math_fround($11_1 * $11_1))))));
   $9_1 = Math_fround($357_1 * $8_1);
   $6_1 = Math_fround($6_1 * $8_1);
   $11_1 = Math_fround($11_1 * $8_1);
   if (Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * $9_1) + Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * $6_1) + Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * $11_1))) - Math_fround(Math_fround($7_1 * $9_1) + Math_fround(Math_fround($12_1 * $6_1) + Math_fround($2_1 * $11_1)))) < $5_1) {
    break label$1
   }
   $4_1 = 1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $289($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $12_1 = Math_fround(0), $13_1 = Math_fround(0), $9_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $11_1 = Math_fround(0), i64toi32_i32$2 = 0, $8_1 = 0, $7_1 = Math_fround(0), $10_1 = Math_fround(0), $62_1 = Math_fround(0), $65_1 = Math_fround(0), $109_1 = 0, $112_1 = 0;
  $4_1 = Math_fround(HEAPF32[($0_1 + 92 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($0_1 + 76 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]);
  $8_1 = $0_1 + 68 | 0;
  $9_1 = Math_fround(HEAPF32[$8_1 >> 2]);
  $10_1 = Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $5_1 = Math_fround($5_1 - $13_1);
  $11_1 = Math_fround($11_1 - $12_1);
  $6_1 = Math_fround($6_1 - $12_1);
  $13_1 = Math_fround($4_1 - $13_1);
  $12_1 = Math_fround(Math_fround($5_1 * $11_1) - Math_fround($6_1 * $13_1));
  $62_1 = $12_1;
  $65_1 = Math_fround($12_1 * $12_1);
  $12_1 = Math_fround($7_1 - $9_1);
  $4_1 = Math_fround($10_1 - $9_1);
  $9_1 = Math_fround(Math_fround($6_1 * $12_1) - Math_fround($4_1 * $11_1));
  $12_1 = Math_fround(Math_fround($4_1 * $13_1) - Math_fround($5_1 * $12_1));
  $13_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($65_1 + Math_fround(Math_fround($9_1 * $9_1) + Math_fround($12_1 * $12_1))))));
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($62_1 * $13_1);
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($12_1 * $13_1);
  HEAPF32[$2_1 >> 2] = Math_fround($9_1 * $13_1);
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $109_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $109_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
  $112_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[i64toi32_i32$1 >> 2] = $112_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $290($0_1) {
  $0_1 = $0_1 | 0;
  $193($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $291($0_1) {
  $0_1 = $0_1 | 0;
  return 8528 | 0;
 }
 
 function $292($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $293($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $294($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[(HEAP32[($0_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 128 | 0) >> 2] | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $295($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $296($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $297($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = HEAP32[$2_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 104 | 0) >> 2] | 0]($3_1, $1_1, $2_1 + 4 | 0);
  return (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0 | 0;
 }
 
 function $298($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = HEAP32[$2_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 108 | 0) >> 2] | 0]($3_1, $1_1, $2_1 + 112 | 0);
  return (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 112 | 0 | 0;
 }
 
 function $300($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $301($0_1) {
  $0_1 = $0_1 | 0;
  $211($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $302($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $5_1 = 0, $19_1 = 0, $23_1 = 0, $28_1 = 0, $32_1 = 0, $37_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  $5_1 = $179($4_1 + 32 | 0 | 0) | 0;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + 100 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + 108 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + 116 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $28_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
  $32_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + 124 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $32_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $37_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + 132 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $37_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($4_1 + 36 | 0) >> 2] = 1;
  HEAP32[($4_1 + 32 | 0) >> 2] = 8128;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $42_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[($4_1 + 92 | 0) >> 2] = $42_1;
  HEAP32[($4_1 + 96 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 80 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $6_1 = HEAPU8[($0_1 + 20 | 0) >> 0] | 0;
    if (!$6_1) {
     break label$2
    }
    HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
    $7_1 = $1_1 + 24 | 0;
    break label$1;
   }
   HEAP32[($1_1 + 36 | 0) >> 2] = $2_1;
   $7_1 = $1_1 + 32 | 0;
  }
  HEAP32[$7_1 >> 2] = $3_1;
  $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $8_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $8_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $2_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $7_1;
  $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $4_1 + 32 | 0;
  label$3 : {
   label$4 : {
    if (($7_1 | 0) != ($8_1 | 0)) {
     break label$4
    }
    $7_1 = $2_1 + 8 | 0;
    break label$3;
   }
   $7_1 = $2_1 + 12 | 0;
   $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  }
  HEAP32[$7_1 >> 2] = $4_1 + 8 | 0;
  $259($1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, $4_1 + 8 | 0 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $4_1 + 32 | 0 | 0, ($6_1 | 0) != (0 | 0) | 0);
  $0_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP32[($0_1 + ((HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) ? 8 : 12) | 0) >> 2] = $3_1;
  $193($5_1 | 0) | 0;
  global$0 = $4_1 + 144 | 0;
 }
 
 function $303($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $304($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($4_1, 40) | 0;
  $72($4_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = 8056;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $305($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 136 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 8964;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 188 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1566444395;
  HEAP32[(i64toi32_i32$1 + 180 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 184 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 168 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 276 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 280 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 268 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 272 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 260 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 264 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 252 | 0) >> 2] = 1;
  HEAP32[(i64toi32_i32$1 + 256 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1176256512;
  HEAP32[(i64toi32_i32$1 + 244 | 0) >> 2] = 1036831949;
  HEAP32[(i64toi32_i32$1 + 248 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 236 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 240 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 228 | 0) >> 2] = 1056964608;
  HEAP32[(i64toi32_i32$1 + 232 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 220 | 0) >> 2] = 1;
  HEAP32[(i64toi32_i32$1 + 224 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 212 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 216 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 204 | 0) >> 2] = 1;
  HEAP32[(i64toi32_i32$1 + 208 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 140 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 148 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 156 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 172 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 196 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 300 | 0) >> 0] = 1;
  HEAP32[($0_1 + 304 | 0) >> 2] = 0;
  HEAP32[($0_1 + 296 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 288 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 28 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 24 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 36 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 44 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 72 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 64 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 80 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 88 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 100 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 92 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 128 | 0) >> 2] = 0;
  HEAP32[($0_1 + 108 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 120 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 112 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $306($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 8964;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 296 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 300 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 296 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 296 | 0) >> 2] = 0;
  HEAP32[($0_1 + 288 | 0) >> 2] = 0;
  HEAP32[($0_1 + 292 | 0) >> 2] = 0;
  HEAP8[($0_1 + 300 | 0) >> 0] = 1;
  return $0_1 | 0;
 }
 
 function $307($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 8964;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 296 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 300 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 296 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 296 | 0) >> 2] = 0;
  HEAP32[($0_1 + 288 | 0) >> 2] = 0;
  HEAP32[($0_1 + 292 | 0) >> 2] = 0;
  HEAP8[($0_1 + 300 | 0) >> 0] = 1;
  $80($0_1 | 0);
 }
 
 function $308($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (((HEAP32[($0_1 + 220 | 0) >> 2] | 0) & -2 | 0 | 0) == (4 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 220 | 0) >> 2] = $1_1;
  }
 }
 
 function $309($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 220 | 0) >> 2] = $1_1;
 }
 
 function $310($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    if ((HEAPU8[($0_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
     break label$1
    }
   }
   label$3 : {
    if (((HEAP32[($0_1 + 220 | 0) >> 2] | 0) & -2 | 0 | 0) == (4 | 0)) {
     break label$3
    }
    HEAP32[($0_1 + 220 | 0) >> 2] = 1;
   }
   HEAP32[($0_1 + 224 | 0) >> 2] = 0;
  }
 }
 
 function $311($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $4_1 = 0, $193_1 = 0, $196_1 = 0, $251_1 = 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  HEAP32[($1_1 + 24 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($1_1 + 28 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($1_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($1_1 + 36 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[($1_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($1_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP32[($1_1 + 48 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  HEAP32[($1_1 + 52 | 0) >> 2] = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  HEAP32[($1_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($1_1 + 60 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($1_1 + 64 | 0) >> 2] = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  HEAP32[($1_1 + 68 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  HEAP32[($1_1 + 72 | 0) >> 2] = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  HEAP32[($1_1 + 76 | 0) >> 2] = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
  HEAP32[($1_1 + 80 | 0) >> 2] = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  HEAP32[($1_1 + 84 | 0) >> 2] = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($1_1 + 88 | 0) >> 2] = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
  HEAP32[($1_1 + 92 | 0) >> 2] = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
  HEAP32[($1_1 + 96 | 0) >> 2] = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  HEAP32[($1_1 + 100 | 0) >> 2] = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
  HEAP32[($1_1 + 104 | 0) >> 2] = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
  HEAP32[($1_1 + 108 | 0) >> 2] = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
  HEAP32[($1_1 + 112 | 0) >> 2] = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
  HEAP32[($1_1 + 116 | 0) >> 2] = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
  HEAP32[($1_1 + 120 | 0) >> 2] = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
  HEAP32[($1_1 + 124 | 0) >> 2] = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
  HEAP32[($1_1 + 128 | 0) >> 2] = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
  HEAP32[($1_1 + 132 | 0) >> 2] = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
  HEAP32[($1_1 + 136 | 0) >> 2] = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
  HEAP32[($1_1 + 140 | 0) >> 2] = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
  HEAP32[($1_1 + 144 | 0) >> 2] = HEAP32[($0_1 + 132 | 0) >> 2] | 0;
  HEAP32[($1_1 + 148 | 0) >> 2] = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
  HEAP32[($1_1 + 152 | 0) >> 2] = HEAP32[($0_1 + 140 | 0) >> 2] | 0;
  HEAP32[($1_1 + 156 | 0) >> 2] = HEAP32[($0_1 + 144 | 0) >> 2] | 0;
  HEAP32[($1_1 + 160 | 0) >> 2] = HEAP32[($0_1 + 148 | 0) >> 2] | 0;
  HEAP32[($1_1 + 164 | 0) >> 2] = HEAP32[($0_1 + 152 | 0) >> 2] | 0;
  HEAP32[($1_1 + 168 | 0) >> 2] = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
  HEAP32[($1_1 + 172 | 0) >> 2] = HEAP32[($0_1 + 160 | 0) >> 2] | 0;
  HEAP32[($1_1 + 176 | 0) >> 2] = HEAP32[($0_1 + 164 | 0) >> 2] | 0;
  HEAP32[($1_1 + 180 | 0) >> 2] = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
  HEAP32[($1_1 + 184 | 0) >> 2] = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
  HEAP32[($1_1 + 188 | 0) >> 2] = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
  HEAP32[($1_1 + 232 | 0) >> 2] = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
  HEAP32[($1_1 + 192 | 0) >> 2] = HEAP32[($0_1 + 184 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = 0;
  $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($2_1, HEAP32[($0_1 + 192 | 0) >> 2] | 0) | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 224 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 228 | 0) >> 2] | 0;
  $193_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[($1_1 + 196 | 0) >> 2] = $193_1;
  HEAP32[($1_1 + 200 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($0_1 + 208 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
  $196_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[($1_1 + 240 | 0) >> 2] = $196_1;
  HEAP32[($1_1 + 244 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $3_1;
  HEAP32[($1_1 + 236 | 0) >> 2] = HEAP32[($0_1 + 204 | 0) >> 2] | 0;
  HEAP32[($1_1 + 248 | 0) >> 2] = HEAP32[($0_1 + 220 | 0) >> 2] | 0;
  HEAP32[($1_1 + 204 | 0) >> 2] = HEAP32[($0_1 + 236 | 0) >> 2] | 0;
  HEAP32[($1_1 + 208 | 0) >> 2] = HEAP32[($0_1 + 244 | 0) >> 2] | 0;
  HEAP32[($1_1 + 212 | 0) >> 2] = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
  HEAP32[($1_1 + 216 | 0) >> 2] = HEAP32[($0_1 + 232 | 0) >> 2] | 0;
  HEAP32[($1_1 + 252 | 0) >> 2] = HEAP32[($0_1 + 252 | 0) >> 2] | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($2_1, $0_1) | 0;
  $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($2_1, $4_1) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = $3_1;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($2_1, $4_1);
  }
  HEAP32[($1_1 + 220 | 0) >> 2] = HEAP32[($0_1 + 268 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 280 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 272 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 276 | 0) >> 2] | 0;
  HEAP32[($1_1 + 260 | 0) >> 2] = 0;
  $251_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[($1_1 + 224 | 0) >> 2] = $251_1;
  HEAP32[($1_1 + 228 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($1_1 + 256 | 0) >> 2] = $2_1;
  return 8992 | 0;
 }
 
 function $312($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, HEAP32[($2_1 + 8 | 0) >> 2] | 0, $1_1) | 0), wasm2js_i32$4 = 1245859651), wasm2js_i32$5 = $0_1), wasm2js_i32$0 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function $313($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 200 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 192 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 304 | 0) >> 2] = (HEAP32[($0_1 + 304 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function $314($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 288 | 0) >> 2] | 0;
  $3_1 = $2_1;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $0_1 = HEAP32[($0_1 + 296 | 0) >> 2] | 0;
   $3_1 = 0;
   label$2 : while (1) {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
     break label$1
    }
    $0_1 = $0_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $3_1 = $2_1;
  }
  return ($3_1 | 0) >= ($2_1 | 0) | 0;
 }
 
 function $315($0_1) {
  $0_1 = $0_1 | 0;
  return 264 | 0;
 }
 
 function $316($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $4_1 = Math_fround(0), $3_1 = Math_fround(0), $5_1 = Math_fround(0), $22_1 = Math_fround(0);
  $179($0_1 | 0) | 0;
  $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $3_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  $22_1 = Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]));
  $4_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
  HEAPF32[($0_1 + 40 | 0) >> 2] = Math_fround($22_1 - $4_1);
  HEAPF32[($0_1 + 36 | 0) >> 2] = Math_fround(Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2])) - $4_1);
  HEAPF32[($0_1 + 32 | 0) >> 2] = Math_fround(Math_fround($2_1 * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2])) - $4_1);
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 9056;
  label$1 : {
   $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $3_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $2_1 = Math_fround(Math_fround(HEAPF32[($1_1 + (($2_1 < $5_1 ? ($2_1 < $3_1 ^ 1 | 0) << 1 | 0 : $5_1 < $3_1 ? 1 : 2) << 2 | 0) | 0) >> 2]) * Math_fround(.10000000149011612));
   if ($2_1 < $4_1 ^ 1 | 0) {
    break label$1
   }
   $317($0_1 | 0, Math_fround($2_1));
  }
  return $0_1 | 0;
 }
 
 function $317($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $5_1 = 0, $6_1 = 0, $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  HEAPF32[($0_1 + 48 | 0) >> 2] = $1_1;
  $5_1 = $0_1 + 40 | 0;
  $1_1 = Math_fround(HEAPF32[$5_1 >> 2]);
  $6_1 = $0_1 + 36 | 0;
  $7_1 = Math_fround(HEAPF32[$6_1 >> 2]);
  $8_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
  $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $11_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAPF32[$6_1 >> 2] = Math_fround(Math_fround($3_1 + $7_1) - $10_1);
  HEAPF32[($0_1 + 32 | 0) >> 2] = Math_fround(Math_fround($2_1 + $8_1) - $9_1);
  HEAPF32[$5_1 >> 2] = Math_fround(Math_fround($4_1 + $1_1) - $11_1);
 }
 
 function $318($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $10_1 = Math_fround(0), $19_1 = Math_fround(0), $6_1 = Math_fround(0), $9_1 = Math_fround(0), $5_1 = Math_fround(0), $8_1 = Math_fround(0), $13_1 = Math_fround(0), $7_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0);
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $5_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $19_1 = Math_fround($4_1 + $19_1);
  $10_1 = Math_fround($4_1 + $10_1);
  $4_1 = Math_fround($4_1 + $12_1);
  $9_1 = Math_fround(Math_fround(Math_fround($19_1 * Math_fround(Math_abs($18_1))) + Math_fround($10_1 * Math_fround(Math_abs($9_1)))) + Math_fround($4_1 * Math_fround(Math_abs($11_1))));
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($8_1 - $9_1);
  $6_1 = Math_fround(Math_fround(Math_fround($19_1 * Math_fround(Math_abs($17_1))) + Math_fround($10_1 * Math_fround(Math_abs($6_1)))) + Math_fround($4_1 * Math_fround(Math_abs($7_1))));
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($5_1 - $6_1);
  $4_1 = Math_fround(Math_fround(Math_fround($19_1 * Math_fround(Math_abs($14_1))) + Math_fround($10_1 * Math_fround(Math_abs($15_1)))) + Math_fround($4_1 * Math_fround(Math_abs($16_1))));
  HEAPF32[$2_1 >> 2] = Math_fround($13_1 - $4_1);
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($8_1 + $9_1);
  HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($6_1 + $5_1);
  HEAPF32[$3_1 >> 2] = Math_fround($4_1 + $13_1);
 }
 
 function $319($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $3_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $1_1 = Math_fround($1_1 / Math_fround(12.0));
  $5_1 = Math_fround($5_1 + $6_1);
  $5_1 = Math_fround($5_1 + $5_1);
  $5_1 = Math_fround($5_1 * $5_1);
  $4_1 = Math_fround($4_1 + $7_1);
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($1_1 * Math_fround($5_1 + $4_1));
  $3_1 = Math_fround($3_1 + $8_1);
  $3_1 = Math_fround($3_1 + $3_1);
  $3_1 = Math_fround($3_1 * $3_1);
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($1_1 * Math_fround($5_1 + $3_1));
  HEAPF32[$2_1 >> 2] = Math_fround($1_1 * Math_fround($4_1 + $3_1));
 }
 
 function $320($0_1) {
  $0_1 = $0_1 | 0;
  $193($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $321($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $7_1 = 0, $9_1 = 0, $11_1 = 0, $6_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0);
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $5_1 = $0_1 + 20 | 0;
  $6_1 = Math_fround(HEAPF32[$5_1 >> 2]);
  $7_1 = $0_1 + 36 | 0;
  $8_1 = Math_fround(HEAPF32[$7_1 >> 2]);
  $9_1 = $0_1 + 24 | 0;
  $10_1 = Math_fround(HEAPF32[$9_1 >> 2]);
  $11_1 = $0_1 + 40 | 0;
  $12_1 = Math_fround(HEAPF32[$11_1 >> 2]);
  $13_1 = Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
  $146($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAPF32[$11_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($4_1 + $12_1) / $10_1) * Math_fround(HEAPF32[$9_1 >> 2])) - $4_1);
  HEAPF32[$7_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($3_1 + $8_1) / $6_1) * Math_fround(HEAPF32[$5_1 >> 2])) - $3_1);
  HEAPF32[($0_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($2_1 + $14_1) / $13_1) * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2])) - $2_1);
 }
 
 function $322($0_1) {
  $0_1 = $0_1 | 0;
  return 9212 | 0;
 }
 
 function $323($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $3_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($1_1));
  $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($1_1));
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($1_1));
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  $4_1 = Math_fround($4_1 + $8_1);
  HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) >= Math_fround(0.0) ? $4_1 : Math_fround(-$4_1);
  $3_1 = Math_fround($3_1 + $7_1);
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
  $3_1 = Math_fround($5_1 + $6_1);
  HEAPF32[$0_1 >> 2] = Math_fround(HEAPF32[$2_1 >> 2]) >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
 }
 
 function $324($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0);
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  $3_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  HEAPF32[$0_1 >> 2] = Math_fround(HEAPF32[$2_1 >> 2]) >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
  $3_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
  $3_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) >= Math_fround(0.0) ? $3_1 : Math_fround(-$3_1);
 }
 
 function $325($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  label$1 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $4_1 = 0;
   label$2 : while (1) {
    $5_1 = $1_1 + $4_1 | 0;
    $6_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
    $7_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
    $8_1 = Math_fround(HEAPF32[$5_1 >> 2]);
    $9_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
    $5_1 = $2_1 + $4_1 | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    HEAPF32[$5_1 >> 2] = $8_1 >= Math_fround(0.0) ? $11_1 : Math_fround(-$11_1);
    HEAPF32[($5_1 + 8 | 0) >> 2] = $7_1 >= Math_fround(0.0) ? $10_1 : Math_fround(-$10_1);
    HEAPF32[($5_1 + 4 | 0) >> 2] = $6_1 >= Math_fround(0.0) ? $9_1 : Math_fround(-$9_1);
    $4_1 = $4_1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $326($0_1) {
  $0_1 = $0_1 | 0;
  return 6 | 0;
 }
 
 function $327($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ($1_1 >>> 0 > 5 >>> 0) {
    break label$1
   }
   HEAP32[($2_1 + 12 | 0) >> 2] = 0;
   $1_1 = $1_1 << 2 | 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 9264 | 0) >> 2] | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 9240 | 0) >> 2] | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($1_1 + 9216 | 0) >> 2] | 0;
  }
 }
 
 function $328($0_1) {
  $0_1 = $0_1 | 0;
  return 8 | 0;
 }
 
 function $329($0_1) {
  $0_1 = $0_1 | 0;
  return 12 | 0;
 }
 
 function $330($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = 0;
  $5_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 11 >>> 0) {
    break label$1
   }
   $1_1 = $1_1 << 2 | 0;
   $5_1 = HEAP32[($1_1 + 9336 | 0) >> 2] | 0;
   $4_1 = HEAP32[($1_1 + 9288 | 0) >> 2] | 0;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 108 | 0) >> 2] | 0]($0_1, $4_1, $2_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 108 | 0) >> 2] | 0]($0_1, $5_1, $3_1);
 }
 
 function $331($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = Math_fround(0), $3_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0);
  $3_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $4_1 = Math_fround($4_1 + $7_1);
  $0_1 = ($1_1 >>> 1 | 0) & 1 | 0;
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround(Math_fround($4_1 * Math_fround($0_1 ^ 1 | 0 | 0)) - Math_fround($4_1 * Math_fround($0_1 | 0)));
  $4_1 = Math_fround($5_1 + $6_1);
  $0_1 = $1_1 & 1 | 0;
  HEAPF32[$2_1 >> 2] = Math_fround(Math_fround($4_1 * Math_fround($0_1 ^ 1 | 0 | 0)) - Math_fround($4_1 * Math_fround($0_1 | 0)));
  $3_1 = Math_fround($3_1 + $8_1);
  $0_1 = ($1_1 >>> 2 | 0) & 1 | 0;
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround(Math_fround($3_1 * Math_fround($0_1 ^ 1 | 0 | 0)) - Math_fround($3_1 * Math_fround($0_1 | 0)));
 }
 
 function $332($0_1) {
  $0_1 = $0_1 | 0;
  return 6 | 0;
 }
 
 function $333($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $6_1 = 0, $52_1 = 0, $55_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 124 | 0) >> 2] | 0]($0_1, $4_1 + 32 | 0, $3_1);
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  $3_1 = HEAP32[($4_1 + 40 | 0) >> 2] | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $3_1;
  $5_1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = $5_1;
  $6_1 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = $6_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1 ^ -2147483648 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 ^ -2147483648 | 0;
  HEAP32[$4_1 >> 2] = $6_1 ^ -2147483648 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($4_1 + 16 | 0, $0_1, $4_1);
  i64toi32_i32$2 = ($4_1 + 16 | 0) + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $52_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  $55_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[i64toi32_i32$1 >> 2] = $55_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $334($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $3_1 = 0;
  $3_1 = 0;
  label$1 : {
   $4_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $5_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
   if ($4_1 <= Math_fround($5_1 + $2_1) ^ 1 | 0) {
    break label$1
   }
   if ($4_1 >= Math_fround(Math_fround(-$5_1) - $2_1) ^ 1 | 0) {
    break label$1
   }
   $4_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
   if ($4_1 <= Math_fround($5_1 + $2_1) ^ 1 | 0) {
    break label$1
   }
   if ($4_1 >= Math_fround(Math_fround(-$5_1) - $2_1) ^ 1 | 0) {
    break label$1
   }
   $4_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
   if ($4_1 <= Math_fround($5_1 + $2_1) ^ 1 | 0) {
    break label$1
   }
   $3_1 = $4_1 >= Math_fround(Math_fround(-$5_1) - $2_1);
  }
  return $3_1 | 0;
 }
 
 function $335($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $5_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0);
  label$1 : {
   if ($2_1 >>> 0 > 5 >>> 0) {
    break label$1
   }
   $3_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
   $4_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
   $0_1 = 1065353216;
   $6_1 = $2_1;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       switch ($2_1 | 0) {
       case 1:
        $2_1 = 0;
        $0_1 = -1082130432;
        $6_1 = 0;
        break label$2;
       case 2:
        $2_1 = 1065353216;
        break label$3;
       case 3:
        $2_1 = -1082130432;
        break label$3;
       case 4:
        $6_1 = 1065353216;
        break label$4;
       case 5:
        break label$5;
       default:
        break label$2;
       };
      }
      $6_1 = -1082130432;
     }
     $0_1 = 0;
     $5_1 = $3_1;
     $2_1 = 0;
     break label$2;
    }
    $0_1 = 0;
    $5_1 = $4_1;
    $6_1 = 0;
   }
   HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   HEAP32[$1_1 >> 2] = $0_1;
   HEAPF32[($1_1 + 12 | 0) >> 2] = Math_fround(-$5_1);
  }
 }
 
 function $336($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $4_1 = Math_fround(0), $3_1 = Math_fround(0), $5_1 = Math_fround(0), $22_1 = Math_fround(0);
  $145($0_1 | 0) | 0;
  $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $3_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  $22_1 = Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]));
  $4_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
  HEAPF32[($0_1 + 40 | 0) >> 2] = Math_fround($22_1 - $4_1);
  HEAPF32[($0_1 + 36 | 0) >> 2] = Math_fround(Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2])) - $4_1);
  HEAPF32[($0_1 + 32 | 0) >> 2] = Math_fround(Math_fround($2_1 * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2])) - $4_1);
  HEAP32[($0_1 + 56 | 0) >> 2] = 1;
  HEAP32[$0_1 >> 2] = 9392;
  label$1 : {
   $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $3_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $2_1 = Math_fround(Math_fround(HEAPF32[($1_1 + (($2_1 < $5_1 ? ($2_1 < $3_1 ^ 1 | 0) << 1 | 0 : $5_1 < $3_1 ? 1 : 2) << 2 | 0) | 0) >> 2]) * Math_fround(.10000000149011612));
   if ($2_1 < $4_1 ^ 1 | 0) {
    break label$1
   }
   $337($0_1 | 0, Math_fround($2_1));
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 13;
  return $0_1 | 0;
 }
 
 function $337($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $5_1 = 0, $6_1 = 0, $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  HEAPF32[($0_1 + 48 | 0) >> 2] = $1_1;
  $5_1 = $0_1 + 40 | 0;
  $1_1 = Math_fround(HEAPF32[$5_1 >> 2]);
  $6_1 = $0_1 + 36 | 0;
  $7_1 = Math_fround(HEAPF32[$6_1 >> 2]);
  $8_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
  $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $11_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAPF32[$6_1 >> 2] = Math_fround(Math_fround($3_1 + $7_1) - $10_1);
  HEAPF32[($0_1 + 32 | 0) >> 2] = Math_fround(Math_fround($2_1 + $8_1) - $9_1);
  HEAPF32[$5_1 >> 2] = Math_fround(Math_fround($4_1 + $1_1) - $11_1);
 }
 
 function $338($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $4_1 = Math_fround(0), $3_1 = Math_fround(0), $5_1 = Math_fround(0), $22_1 = Math_fround(0);
  $145($0_1 | 0) | 0;
  $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $3_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  $22_1 = Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]));
  $4_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
  HEAPF32[($0_1 + 40 | 0) >> 2] = Math_fround($22_1 - $4_1);
  HEAPF32[($0_1 + 36 | 0) >> 2] = Math_fround(Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2])) - $4_1);
  HEAPF32[($0_1 + 32 | 0) >> 2] = Math_fround(Math_fround($2_1 * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2])) - $4_1);
  HEAP32[($0_1 + 56 | 0) >> 2] = 1;
  HEAP32[$0_1 >> 2] = 9392;
  label$1 : {
   $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $3_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $2_1 = Math_fround(Math_fround(HEAPF32[($1_1 + (($2_1 < $5_1 ? ($2_1 < $3_1 ^ 1 | 0) << 1 | 0 : $5_1 < $3_1 ? 1 : 2) << 2 | 0) | 0) >> 2]) * Math_fround(.10000000149011612));
   if ($2_1 < $4_1 ^ 1 | 0) {
    break label$1
   }
   $337($0_1 | 0, Math_fround($2_1));
  }
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 9496;
  HEAP32[($0_1 + 4 | 0) >> 2] = 13;
  return $0_1 | 0;
 }
 
 function $339($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $4_1 = Math_fround(0), $3_1 = Math_fround(0), $5_1 = Math_fround(0), $22_1 = Math_fround(0);
  $145($0_1 | 0) | 0;
  $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $3_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  $22_1 = Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]));
  $4_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
  HEAPF32[($0_1 + 40 | 0) >> 2] = Math_fround($22_1 - $4_1);
  HEAPF32[($0_1 + 36 | 0) >> 2] = Math_fround(Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2])) - $4_1);
  HEAPF32[($0_1 + 32 | 0) >> 2] = Math_fround(Math_fround($2_1 * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2])) - $4_1);
  HEAP32[($0_1 + 56 | 0) >> 2] = 1;
  HEAP32[$0_1 >> 2] = 9392;
  label$1 : {
   $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $3_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $2_1 = Math_fround(Math_fround(HEAPF32[($1_1 + (($2_1 < $5_1 ? ($2_1 < $3_1 ^ 1 | 0) << 1 | 0 : $5_1 < $3_1 ? 1 : 2) << 2 | 0) | 0) >> 2]) * Math_fround(.10000000149011612));
   if ($2_1 < $4_1 ^ 1 | 0) {
    break label$1
   }
   $337($0_1 | 0, Math_fround($2_1));
  }
  HEAP32[($0_1 + 56 | 0) >> 2] = 2;
  HEAP32[$0_1 >> 2] = 9600;
  HEAP32[($0_1 + 4 | 0) >> 2] = 13;
  return $0_1 | 0;
 }
 
 function $340($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $10_1 = Math_fround(0), $19_1 = Math_fround(0), $6_1 = Math_fround(0), $9_1 = Math_fround(0), $5_1 = Math_fround(0), $8_1 = Math_fround(0), $13_1 = Math_fround(0), $7_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0);
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $5_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $19_1 = Math_fround($4_1 + $19_1);
  $10_1 = Math_fround($4_1 + $10_1);
  $4_1 = Math_fround($4_1 + $12_1);
  $9_1 = Math_fround(Math_fround(Math_fround($19_1 * Math_fround(Math_abs($18_1))) + Math_fround($10_1 * Math_fround(Math_abs($9_1)))) + Math_fround($4_1 * Math_fround(Math_abs($11_1))));
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($8_1 - $9_1);
  $6_1 = Math_fround(Math_fround(Math_fround($19_1 * Math_fround(Math_abs($17_1))) + Math_fround($10_1 * Math_fround(Math_abs($6_1)))) + Math_fround($4_1 * Math_fround(Math_abs($7_1))));
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($5_1 - $6_1);
  $4_1 = Math_fround(Math_fround(Math_fround($19_1 * Math_fround(Math_abs($14_1))) + Math_fround($10_1 * Math_fround(Math_abs($15_1)))) + Math_fround($4_1 * Math_fround(Math_abs($16_1))));
  HEAPF32[$2_1 >> 2] = Math_fround($13_1 - $4_1);
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($8_1 + $9_1);
  HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($6_1 + $5_1);
  HEAPF32[$3_1 >> 2] = Math_fround($4_1 + $13_1);
 }
 
 function $341($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $7_1 = Math_fround(0), $5_1 = Math_fround(0), $3_1 = 0, $6_1 = Math_fround(0), i64toi32_i32$0 = 0, $8_1 = Math_fround(0), i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $17_1 = 0, $20_1 = 0, $71_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $3_1 + 8 | 0;
  i64toi32_i32$2 = $0_1 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[i64toi32_i32$0 >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[$3_1 >> 2] = $20_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  (wasm2js_i32$0 = $4_1, wasm2js_f32$0 = Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1)) + Math_fround(HEAPF32[$4_1 >> 2]))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  HEAPF32[$3_1 >> 2] = Math_fround($5_1 + Math_fround(HEAPF32[$3_1 >> 2]));
  HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($6_1 + Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]));
  $5_1 = Math_fround($1_1 * Math_fround(.5));
  $6_1 = Math_fround($1_1 * Math_fround(.25));
  $1_1 = Math_fround($1_1 / Math_fround(12.0));
  label$1 : {
   label$2 : {
    $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if ($0_1 >>> 0 > 2 >>> 0) {
     break label$2
    }
    label$3 : {
     switch ($0_1 | 0) {
     default:
      $7_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
      $7_1 = Math_fround($7_1 * $7_1);
      $5_1 = Math_fround($5_1 * $7_1);
      $71_1 = Math_fround($6_1 * $7_1);
      $6_1 = Math_fround(HEAPF32[$3_1 >> 2]);
      $7_1 = Math_fround($71_1 + Math_fround($1_1 * Math_fround($6_1 * Math_fround($6_1 * Math_fround(4.0)))));
      $8_1 = $7_1;
      break label$1;
     case 1:
      break label$2;
     case 2:
      break label$3;
     };
    }
    $7_1 = Math_fround(HEAPF32[$3_1 >> 2]);
    $7_1 = Math_fround($7_1 * $7_1);
    $8_1 = Math_fround($5_1 * $7_1);
    $5_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
    $5_1 = Math_fround(Math_fround($6_1 * $7_1) + Math_fround($1_1 * Math_fround($5_1 * Math_fround($5_1 * Math_fround(4.0)))));
    $7_1 = $5_1;
    break label$1;
   }
   $7_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $8_1 = Math_fround($7_1 * $7_1);
   $7_1 = Math_fround($5_1 * $8_1);
   $5_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
   $5_1 = Math_fround(Math_fround($6_1 * $8_1) + Math_fround($1_1 * Math_fround($5_1 * Math_fround($5_1 * Math_fround(4.0)))));
   $8_1 = $5_1;
  }
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($2_1 + 8 | 0) >> 2] = $8_1;
  HEAPF32[($2_1 + 4 | 0) >> 2] = $7_1;
  HEAPF32[$2_1 >> 2] = $5_1;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $342($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = Math_fround(0), $4_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $3_1 = Math_fround(0), $8_1 = Math_fround(0);
  $3_1 = Math_fround(0.0);
  $4_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  label$1 : {
   label$2 : {
    $6_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    $7_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    $8_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1))));
    if ($8_1 == Math_fround(0.0)) {
     break label$2
    }
    $5_1 = Math_fround(HEAPF32[$2_1 >> 2]) < Math_fround(0.0) ? Math_fround(-$5_1) : $5_1;
    $4_1 = Math_fround($4_1 / $8_1);
    $3_1 = Math_fround($7_1 * $4_1);
    $4_1 = Math_fround($6_1 * $4_1);
    break label$1;
   }
   $5_1 = Math_fround(HEAPF32[$2_1 >> 2]) < Math_fround(0.0) ? Math_fround(-$5_1) : $5_1;
  }
  HEAPF32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAPF32[$0_1 >> 2] = $5_1;
  HEAPF32[($0_1 + 4 | 0) >> 2] = $4_1;
 }
 
 function $343($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $3_1 = Math_fround(0), $8_1 = Math_fround(0);
  $3_1 = Math_fround(0.0);
  $4_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  label$1 : {
   label$2 : {
    $6_1 = Math_fround(HEAPF32[$2_1 >> 2]);
    $7_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    $8_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1))));
    if ($8_1 == Math_fround(0.0)) {
     break label$2
    }
    $4_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
    $5_1 = Math_fround($5_1 / $8_1);
    $3_1 = Math_fround($7_1 * $5_1);
    $5_1 = Math_fround($6_1 * $5_1);
    break label$1;
   }
   $4_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
  }
  HEAPF32[($0_1 + 8 | 0) >> 2] = $4_1;
  HEAPF32[$0_1 >> 2] = $5_1;
  HEAPF32[($0_1 + 4 | 0) >> 2] = $3_1;
 }
 
 function $344($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $3_1 = Math_fround(0), $8_1 = Math_fround(0);
  $3_1 = Math_fround(0.0);
  $4_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  label$1 : {
   label$2 : {
    $6_1 = Math_fround(HEAPF32[$2_1 >> 2]);
    $7_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    $8_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1))));
    if ($8_1 == Math_fround(0.0)) {
     break label$2
    }
    $4_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
    $5_1 = Math_fround($5_1 / $8_1);
    $3_1 = Math_fround($7_1 * $5_1);
    $5_1 = Math_fround($6_1 * $5_1);
    break label$1;
   }
   $4_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
  }
  HEAPF32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAPF32[($0_1 + 4 | 0) >> 2] = $4_1;
  HEAPF32[$0_1 >> 2] = $5_1;
 }
 
 function $345($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $7_1 = Math_fround(0), $6_1 = Math_fround(0), $8_1 = Math_fround(0);
  label$1 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $4_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
    label$3 : {
     label$4 : {
      $6_1 = Math_fround(HEAPF32[$1_1 >> 2]);
      $7_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
      $8_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1))));
      if ($8_1 == Math_fround(0.0)) {
       break label$4
      }
      $4_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
      $5_1 = Math_fround($5_1 / $8_1);
      $7_1 = Math_fround($7_1 * $5_1);
      $5_1 = Math_fround($6_1 * $5_1);
      break label$3;
     }
     $7_1 = Math_fround(0.0);
     $4_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
    }
    HEAPF32[$2_1 >> 2] = $5_1;
    HEAPF32[($2_1 + 8 | 0) >> 2] = $7_1;
    HEAPF32[($2_1 + 4 | 0) >> 2] = $4_1;
    $2_1 = $2_1 + 16 | 0;
    $1_1 = $1_1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $346($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $7_1 = Math_fround(0), $6_1 = Math_fround(0), $8_1 = Math_fround(0);
  label$1 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $4_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
    label$3 : {
     label$4 : {
      $6_1 = Math_fround(HEAPF32[$1_1 >> 2]);
      $7_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
      $8_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1))));
      if ($8_1 == Math_fround(0.0)) {
       break label$4
      }
      $4_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
      $5_1 = Math_fround($5_1 / $8_1);
      $7_1 = Math_fround($7_1 * $5_1);
      $5_1 = Math_fround($6_1 * $5_1);
      break label$3;
     }
     $7_1 = Math_fround(0.0);
     $4_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
    }
    HEAPF32[$2_1 >> 2] = $5_1;
    HEAPF32[($2_1 + 8 | 0) >> 2] = $4_1;
    HEAPF32[($2_1 + 4 | 0) >> 2] = $7_1;
    $2_1 = $2_1 + 16 | 0;
    $1_1 = $1_1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $347($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $7_1 = Math_fround(0), $6_1 = Math_fround(0), $8_1 = Math_fround(0);
  label$1 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $4_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
    label$3 : {
     label$4 : {
      $6_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
      $7_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
      $8_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1))));
      if ($8_1 == Math_fround(0.0)) {
       break label$4
      }
      $4_1 = Math_fround(HEAPF32[$1_1 >> 2]) < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
      $5_1 = Math_fround($5_1 / $8_1);
      $7_1 = Math_fround($7_1 * $5_1);
      $5_1 = Math_fround($6_1 * $5_1);
      break label$3;
     }
     $7_1 = Math_fround(0.0);
     $4_1 = Math_fround(HEAPF32[$1_1 >> 2]) < Math_fround(0.0) ? Math_fround(-$4_1) : $4_1;
    }
    HEAPF32[$2_1 >> 2] = $4_1;
    HEAPF32[($2_1 + 8 | 0) >> 2] = $7_1;
    HEAPF32[($2_1 + 4 | 0) >> 2] = $5_1;
    $2_1 = $2_1 + 16 | 0;
    $1_1 = $1_1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $348($0_1) {
  $0_1 = $0_1 | 0;
  $101($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $349($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $7_1 = 0, $9_1 = 0, $11_1 = 0, $6_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0);
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $5_1 = $0_1 + 20 | 0;
  $6_1 = Math_fround(HEAPF32[$5_1 >> 2]);
  $7_1 = $0_1 + 36 | 0;
  $8_1 = Math_fround(HEAPF32[$7_1 >> 2]);
  $9_1 = $0_1 + 24 | 0;
  $10_1 = Math_fround(HEAPF32[$9_1 >> 2]);
  $11_1 = $0_1 + 40 | 0;
  $12_1 = Math_fround(HEAPF32[$11_1 >> 2]);
  $13_1 = Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
  $146($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAPF32[$11_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($4_1 + $12_1) / $10_1) * Math_fround(HEAPF32[$9_1 >> 2])) - $4_1);
  HEAPF32[$7_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($3_1 + $8_1) / $6_1) * Math_fround(HEAPF32[$5_1 >> 2])) - $3_1);
  HEAPF32[($0_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($2_1 + $14_1) / $13_1) * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2])) - $2_1);
 }
 
 function $350($0_1) {
  $0_1 = $0_1 | 0;
  return 9792 | 0;
 }
 
 function $351($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + ((HEAP32[($1_1 + 56 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 1065353216;
 }
 
 function $352($0_1) {
  $0_1 = $0_1 | 0;
  return 60 | 0;
 }
 
 function $353($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $98($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($1_1 + 28 | 0) >> 2] = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP32[($1_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  HEAP32[($1_1 + 36 | 0) >> 2] = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  HEAP32[($1_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[($1_1 + 24 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($1_1 + 48 | 0) >> 2] = 0;
  HEAP32[($1_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  HEAP32[($1_1 + 56 | 0) >> 2] = 0;
  HEAP32[($1_1 + 52 | 0) >> 2] = $0_1;
  return 9802 | 0;
 }
 
 function $354($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $6_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = Math_fround(0), $21_1 = 0, $24_1 = 0, $61_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($3_1, $1_1, $2_1);
  i64toi32_i32$2 = $3_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $21_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $24_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[$0_1 >> 2] = $24_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   if (Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($1_1)) == Math_fround(0.0)) {
    break label$1
   }
   $4_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $6_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $7_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($1_1));
   $1_1 = Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($4_1 * $4_1)) + Math_fround($6_1 * $6_1)) < Math_fround(1.4210854715202004e-14);
   $5_1 = $1_1 ? Math_fround(-1.0) : $5_1;
   $61_1 = $5_1;
   $6_1 = $1_1 ? Math_fround(-1.0) : $6_1;
   $4_1 = $1_1 ? Math_fround(-1.0) : $4_1;
   $5_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($6_1 * $6_1) + Math_fround(Math_fround($5_1 * $5_1) + Math_fround($4_1 * $4_1))))));
   HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) + Math_fround($7_1 * Math_fround($61_1 * $5_1)));
   HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]) + Math_fround($7_1 * Math_fround($4_1 * $5_1)));
   HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]) + Math_fround($7_1 * Math_fround($6_1 * $5_1)));
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $355($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0);
  $1_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  return Math_fround(Math_fround($1_1 + $2_1));
 }
 
 function $356($0_1) {
  $0_1 = $0_1 | 0;
  $101($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $357($0_1) {
  $0_1 = $0_1 | 0;
  return 9822 | 0;
 }
 
 function $358($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0);
  $1_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
  Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  return Math_fround(Math_fround($1_1 + $2_1));
 }
 
 function $359($0_1) {
  $0_1 = $0_1 | 0;
  $101($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $360($0_1) {
  $0_1 = $0_1 | 0;
  return 9832 | 0;
 }
 
 function $361($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0);
  $1_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
  $2_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  return Math_fround(Math_fround($1_1 + $2_1));
 }
 
 function $362($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $363($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $17($2_1 | 0, 0 | 0, $3_1 << 4 | 0 | 0) | 0;
  }
 }
 
 function $364($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = Math_fround(0), $3_1 = 0, $5_1 = Math_fround(0), $7_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $8_1 = Math_fround(0), $23_1 = 0, $26_1 = 0, $57_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($3_1, $1_1, $2_1);
  $4_1 = $0_1 + 8 | 0;
  i64toi32_i32$2 = $3_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[i64toi32_i32$0 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $26_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[$0_1 >> 2] = $26_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $7_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $8_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($1_1));
  $2_1 = Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($5_1 * $5_1)) + Math_fround($7_1 * $7_1)) < Math_fround(1.4210854715202004e-14);
  $6_1 = $2_1 ? Math_fround(-1.0) : $6_1;
  $57_1 = $6_1;
  $7_1 = $2_1 ? Math_fround(-1.0) : $7_1;
  $5_1 = $2_1 ? Math_fround(-1.0) : $5_1;
  $6_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($7_1 * $7_1) + Math_fround(Math_fround($6_1 * $6_1) + Math_fround($5_1 * $5_1))))));
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) + Math_fround($8_1 * Math_fround($57_1 * $6_1)));
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]) + Math_fround($8_1 * Math_fround($5_1 * $6_1)));
  HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) + Math_fround($8_1 * Math_fround($7_1 * $6_1)));
  global$0 = $3_1 + 16 | 0;
 }
 
 function $365($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $7_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $8_1 = 0;
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $6_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $0_1 = $1_1 + 52 | 0;
  $7_1 = Math_fround(HEAPF32[$0_1 >> 2]);
  $8_1 = $1_1 + 56 | 0;
  $9_1 = Math_fround(HEAPF32[$8_1 >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($9_1 - $6_1);
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($7_1 - $5_1);
  HEAPF32[$2_1 >> 2] = Math_fround($10_1 - $4_1);
  $7_1 = Math_fround(HEAPF32[$0_1 >> 2]);
  $9_1 = Math_fround(HEAPF32[$8_1 >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($6_1 + $9_1);
  HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($5_1 + $7_1);
  HEAPF32[$3_1 >> 2] = Math_fround($4_1 + $10_1);
 }
 
 function $366($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0);
  $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $1_1 = Math_fround($4_1 * Math_fround($3_1 * Math_fround($1_1 * Math_fround(.4000000059604645))));
  HEAPF32[($2_1 + 8 | 0) >> 2] = $1_1;
  HEAPF32[($2_1 + 4 | 0) >> 2] = $1_1;
  HEAPF32[$2_1 >> 2] = $1_1;
 }
 
 function $367($0_1) {
  $0_1 = $0_1 | 0;
  $101($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $368($0_1) {
  $0_1 = $0_1 | 0;
  return 9972 | 0;
 }
 
 function $369($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[($0_1 + 48 | 0) >> 2] = $1_1;
 }
 
 function $370($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2])));
 }
 
 function $371($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $15_1 = Math_fround(0), $18_1 = Math_fround(0), $12_1 = Math_fround(0), i64toi32_i32$0 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $13_1 = Math_fround(0), i64toi32_i32$1 = 0, $28_1 = 0, $38_1 = 0, $17_1 = Math_fround(0), $9_1 = 0, $14_1 = Math_fround(0), $16_1 = Math_fround(0), $20_1 = Math_fround(0), $39_1 = 0, $19_1 = Math_fround(0), i64toi32_i32$2 = 0, $40_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $27_1 = Math_fround(0), $35_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $136_1 = Math_fround(0), $156_1 = Math_fround(0), $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $36_1 = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $225_1 = 0, $231_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  $9_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $10_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $12_1 = Math_fround($10_1 - $11_1);
   $13_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $14_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $15_1 = Math_fround($13_1 - $14_1);
   $16_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
   $17_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $18_1 = Math_fround($16_1 - $17_1);
   $19_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($15_1 * $15_1) + Math_fround($18_1 * $18_1)) + Math_fround($12_1 * $12_1)))));
   $20_1 = Math_fround($12_1 * $19_1);
   $21_1 = Math_fround($15_1 * $19_1);
   $22_1 = Math_fround($18_1 * $19_1);
   $23_1 = Math_fround(Math_fround($12_1 * $20_1) + Math_fround(Math_fround($15_1 * $21_1) + Math_fround($18_1 * $22_1)));
   $12_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
   $24_1 = Math_fround(($11_1 < $10_1 ? $10_1 : $11_1) + $12_1);
   $15_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
   $25_1 = Math_fround(($17_1 < $16_1 ? $16_1 : $17_1) + $15_1);
   $18_1 = Math_fround(HEAPF32[$5_1 >> 2]);
   $26_1 = Math_fround(($14_1 < $13_1 ? $13_1 : $14_1) + $18_1);
   $136_1 = $10_1 < $11_1 ? $10_1 : $11_1;
   $10_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
   $19_1 = Math_fround($136_1 + $10_1);
   $11_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
   $16_1 = Math_fround(($16_1 < $17_1 ? $16_1 : $17_1) + $11_1);
   $156_1 = $13_1 < $14_1 ? $13_1 : $14_1;
   $13_1 = Math_fround(HEAPF32[$4_1 >> 2]);
   $14_1 = Math_fround($156_1 + $13_1);
   $3_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   $27_1 = $20_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $20_1);
   $28_1 = $27_1 < Math_fround(0.0);
   $29_1 = $8_1 + ($28_1 << 4 | 0) | 0 | 8 | 0;
   $17_1 = $22_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $22_1);
   $9_1 = $17_1 < Math_fround(0.0);
   $30_1 = $8_1 + ($9_1 << 4 | 0) | 0 | 4 | 0;
   $31_1 = $8_1 + (($28_1 ^ 1 | 0) << 4 | 0) | 0 | 8 | 0;
   $32_1 = $8_1 + (($9_1 ^ 1 | 0) << 4 | 0) | 0 | 4 | 0;
   $20_1 = $21_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $21_1);
   $28_1 = $20_1 < Math_fround(0.0);
   $33_1 = $8_1 + ($28_1 << 4 | 0) | 0;
   $34_1 = $8_1 + (($28_1 ^ 1 | 0) << 4 | 0) | 0;
   $35_1 = $8_1 + 16 | 0;
   $28_1 = 0;
   $9_1 = 1;
   label$2 : while (1) {
    i64toi32_i32$2 = $3_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $36_1 = i64toi32_i32$0;
    $36$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $37_1 = i64toi32_i32$1;
    $37$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
    $225_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $35_1;
    HEAP32[i64toi32_i32$0 >> 2] = $225_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $38_1 = $3_1 + 24 | 0;
    i64toi32_i32$2 = $38_1;
    i64toi32_i32$1 = HEAP32[$38_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($38_1 + 4 | 0) >> 2] | 0;
    $231_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $35_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $231_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $37$hi;
    i64toi32_i32$1 = $8_1;
    HEAP32[$8_1 >> 2] = $37_1;
    HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $36$hi;
    i64toi32_i32$1 = $8_1;
    HEAP32[($8_1 + 8 | 0) >> 2] = $36_1;
    HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAPF32[$8_1 >> 2] = Math_fround(Math_fround(HEAPF32[$8_1 >> 2]) - $18_1);
    HEAPF32[($8_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]) - $15_1);
    HEAPF32[($8_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]) - $13_1);
    HEAPF32[($8_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]) - $11_1);
    HEAPF32[($8_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]) - $12_1);
    HEAPF32[($8_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]) - $10_1);
    $39_1 = 0;
    label$3 : {
     if ($14_1 > Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2])) {
      break label$3
     }
     $39_1 = 0;
     if ($26_1 < Math_fround(HEAPF32[$3_1 >> 2])) {
      break label$3
     }
     $39_1 = 1;
    }
    $40_1 = 0;
    label$4 : {
     if ($19_1 > Math_fround(HEAPF32[$38_1 >> 2])) {
      break label$4
     }
     if ($24_1 < Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2])) {
      break label$4
     }
     $40_1 = $39_1;
    }
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         if ($16_1 > Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])) {
          break label$9
         }
         if ($25_1 < Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2])) {
          break label$9
         }
         if ($40_1 ^ 1 | 0) {
          break label$9
         }
         $15_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
         $10_1 = Math_fround($17_1 * Math_fround(Math_fround(HEAPF32[$30_1 >> 2]) - $15_1));
         $18_1 = Math_fround(HEAPF32[$2_1 >> 2]);
         $12_1 = Math_fround($20_1 * Math_fround(Math_fround(HEAPF32[$34_1 >> 2]) - $18_1));
         if ($10_1 > $12_1) {
          break label$9
         }
         $18_1 = Math_fround($20_1 * Math_fround(Math_fround(HEAPF32[$33_1 >> 2]) - $18_1));
         $15_1 = Math_fround($17_1 * Math_fround(Math_fround(HEAPF32[$32_1 >> 2]) - $15_1));
         if ($18_1 > $15_1) {
          break label$9
         }
         $13_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
         $11_1 = Math_fround($27_1 * Math_fround(Math_fround(HEAPF32[$29_1 >> 2]) - $13_1));
         $12_1 = $15_1 < $12_1 ? $15_1 : $12_1;
         if ($11_1 > $12_1) {
          break label$9
         }
         $15_1 = $10_1 > $18_1 ? $10_1 : $18_1;
         $18_1 = Math_fround($27_1 * Math_fround(Math_fround(HEAPF32[$31_1 >> 2]) - $13_1));
         if ($15_1 > $18_1) {
          break label$9
         }
         $40_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
         $38_1 = ($40_1 | 0) == (-1 | 0);
         $39_1 = ($11_1 > $15_1 ? $11_1 : $15_1) < $23_1 & ($18_1 < $12_1 ? $18_1 : $12_1) > Math_fround(0.0) | 0;
         if (($39_1 | 0) != (1 | 0)) {
          break label$8
         }
         if (($40_1 | 0) != (-1 | 0)) {
          break label$8
         }
         FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, HEAP32[($3_1 + 36 | 0) >> 2] | 0, HEAP32[($3_1 + 40 | 0) >> 2] | 0);
         break label$7;
        }
        $38_1 = (HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) == (-1 | 0);
        $39_1 = 0;
       }
       if ($38_1) {
        break label$7
       }
       if (!$39_1) {
        break label$6
       }
      }
      $28_1 = $28_1 + 1 | 0;
      $3_1 = $3_1 + 64 | 0;
      break label$5;
     }
     $38_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
     $28_1 = $38_1 + $28_1 | 0;
     $3_1 = $3_1 + ($38_1 << 6 | 0) | 0;
    }
    if (($28_1 | 0) >= (HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 1 | 0;
    $10_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[$4_1 >> 2]);
    $12_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
    $15_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
    $18_1 = Math_fround(HEAPF32[$5_1 >> 2]);
    continue label$2;
   };
  }
  label$10 : {
   if ((HEAP32[(0 + 1720 | 0) >> 2] | 0 | 0) >= ($9_1 | 0)) {
    break label$10
   }
   HEAP32[(0 + 1720 | 0) >> 2] = $9_1;
  }
  global$0 = $8_1 + 32 | 0;
 }
 
 function $372($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $14_1 = Math_fround(0), $17_1 = Math_fround(0), $20_1 = Math_fround(0), $22_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $24_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $30_1 = 0, $13_1 = Math_fround(0), $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $19_1 = Math_fround(0), $23_1 = Math_fround(0), $18_1 = Math_fround(0), $21_1 = Math_fround(0), $25_1 = Math_fround(0), $291_1 = Math_fround(0), $321_1 = Math_fround(0), $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  $9_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $12_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  label$1 : {
   label$2 : {
    $13_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
    $14_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
    $15_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
    $16_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    $17_1 = Math_fround(($15_1 < $16_1 ? $15_1 : $16_1) + Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
    $17_1 = $17_1 < $14_1 ? $14_1 : $17_1;
    $18_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
    $17_1 = Math_fround(Math_fround(($13_1 < $17_1 ? $13_1 : $17_1) - $14_1) * $18_1);
    if (!($17_1 < Math_fround(4294967296.0) & $17_1 >= Math_fround(0.0) | 0)) {
     break label$2
    }
    $3_1 = ~~$17_1 >>> 0;
    break label$1;
   }
   $3_1 = 0;
  }
  label$3 : {
   label$4 : {
    $19_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
    $20_1 = Math_fround(($10_1 < $9_1 ? $10_1 : $9_1) + Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
    $20_1 = $20_1 < $17_1 ? $17_1 : $20_1;
    $21_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
    $20_1 = Math_fround(Math_fround(($19_1 < $20_1 ? $19_1 : $20_1) - $17_1) * $21_1);
    if (!($20_1 < Math_fround(4294967296.0) & $20_1 >= Math_fround(0.0) | 0)) {
     break label$4
    }
    $22_1 = ~~$20_1 >>> 0;
    break label$3;
   }
   $22_1 = 0;
  }
  label$5 : {
   label$6 : {
    $23_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
    $24_1 = Math_fround(($12_1 < $11_1 ? $12_1 : $11_1) + Math_fround(HEAPF32[$4_1 >> 2]));
    $24_1 = $24_1 < $20_1 ? $20_1 : $24_1;
    $25_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
    $24_1 = Math_fround(Math_fround(($23_1 < $24_1 ? $23_1 : $24_1) - $20_1) * $25_1);
    if (!($24_1 < Math_fround(4294967296.0) & $24_1 >= Math_fround(0.0) | 0)) {
     break label$6
    }
    $26_1 = ~~$24_1 >>> 0;
    break label$5;
   }
   $26_1 = 0;
  }
  label$7 : {
   label$8 : {
    $24_1 = Math_fround(($16_1 < $15_1 ? $15_1 : $16_1) + Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]));
    $24_1 = $24_1 < $14_1 ? $14_1 : $24_1;
    $14_1 = Math_fround(Math_fround(Math_fround(($13_1 < $24_1 ? $13_1 : $24_1) - $14_1) * $18_1) + Math_fround(1.0));
    if (!($14_1 < Math_fround(4294967296.0) & $14_1 >= Math_fround(0.0) | 0)) {
     break label$8
    }
    $27_1 = ~~$14_1 >>> 0;
    break label$7;
   }
   $27_1 = 0;
  }
  label$9 : {
   label$10 : {
    $14_1 = Math_fround(($9_1 < $10_1 ? $10_1 : $9_1) + Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]));
    $14_1 = $14_1 < $17_1 ? $17_1 : $14_1;
    $14_1 = Math_fround(Math_fround(Math_fround(($19_1 < $14_1 ? $19_1 : $14_1) - $17_1) * $21_1) + Math_fround(1.0));
    if (!($14_1 < Math_fround(4294967296.0) & $14_1 >= Math_fround(0.0) | 0)) {
     break label$10
    }
    $28_1 = ~~$14_1 >>> 0;
    break label$9;
   }
   $28_1 = 0;
  }
  label$11 : {
   label$12 : {
    $14_1 = Math_fround(($11_1 < $12_1 ? $12_1 : $11_1) + Math_fround(HEAPF32[$5_1 >> 2]));
    $14_1 = $14_1 < $20_1 ? $20_1 : $14_1;
    $14_1 = Math_fround(Math_fround(Math_fround(($23_1 < $14_1 ? $23_1 : $14_1) - $20_1) * $25_1) + Math_fround(1.0));
    if (!($14_1 < Math_fround(4294967296.0) & $14_1 >= Math_fround(0.0) | 0)) {
     break label$12
    }
    $29_1 = ~~$14_1 >>> 0;
    break label$11;
   }
   $29_1 = 0;
  }
  $30_1 = 0;
  label$13 : {
   if (($6_1 | 0) >= ($7_1 | 0)) {
    break label$13
   }
   $14_1 = Math_fround($15_1 - $16_1);
   $291_1 = $14_1;
   $17_1 = Math_fround($12_1 - $11_1);
   $20_1 = Math_fround($10_1 - $9_1);
   $9_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($17_1 * $17_1) + Math_fround($20_1 * $20_1)) + Math_fround($14_1 * $14_1)))));
   $14_1 = Math_fround($14_1 * $9_1);
   $10_1 = Math_fround($17_1 * $9_1);
   $321_1 = Math_fround($17_1 * $10_1);
   $17_1 = Math_fround($20_1 * $9_1);
   $13_1 = Math_fround(Math_fround($291_1 * $14_1) + Math_fround($321_1 + Math_fround($20_1 * $17_1)));
   $31_1 = $3_1 & 65534 | 0;
   $32_1 = $22_1 & 65534 | 0;
   $33_1 = $26_1 & 65534 | 0;
   $34_1 = $27_1 | 1 | 0;
   $35_1 = $28_1 | 1 | 0;
   $36_1 = $29_1 | 1 | 0;
   $3_1 = (HEAP32[($0_1 + 136 | 0) >> 2] | 0) + ($6_1 << 4 | 0) | 0;
   $16_1 = $14_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $14_1);
   $22_1 = $16_1 < Math_fround(0.0);
   $37_1 = $8_1 + ($22_1 << 4 | 0) | 0 | 8 | 0;
   $12_1 = $17_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $17_1);
   $30_1 = $12_1 < Math_fround(0.0);
   $38_1 = $8_1 + ($30_1 << 4 | 0) | 0 | 4 | 0;
   $39_1 = $8_1 + (($22_1 ^ 1 | 0) << 4 | 0) | 0 | 8 | 0;
   $40_1 = $8_1 + (($30_1 ^ 1 | 0) << 4 | 0) | 0 | 4 | 0;
   $15_1 = $10_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $10_1);
   $22_1 = $15_1 < Math_fround(0.0);
   $41_1 = $8_1 + ($22_1 << 4 | 0) | 0;
   $42_1 = $8_1 + (($22_1 ^ 1 | 0) << 4 | 0) | 0;
   $30_1 = 0;
   label$14 : while (1) {
    $26_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $22_1 = 0;
    label$15 : {
     label$16 : {
      label$17 : {
       label$18 : {
        if ($33_1 >>> 0 > (HEAPU16[($3_1 + 6 | 0) >> 1] | 0) >>> 0) {
         break label$18
        }
        $22_1 = 0;
        $27_1 = (HEAPU16[$3_1 >> 1] | 0) & 65535 | 0;
        if ($36_1 >>> 0 < $27_1 >>> 0) {
         break label$18
        }
        $22_1 = 0;
        if ($31_1 >>> 0 > ((HEAPU16[($3_1 + 10 | 0) >> 1] | 0) & 65535 | 0) >>> 0) {
         break label$18
        }
        $22_1 = 0;
        $28_1 = (HEAPU16[($3_1 + 4 | 0) >> 1] | 0) & 65535 | 0;
        if ($34_1 >>> 0 < $28_1 >>> 0) {
         break label$18
        }
        $22_1 = 0;
        if ($32_1 >>> 0 > ((HEAPU16[($3_1 + 8 | 0) >> 1] | 0) & 65535 | 0) >>> 0) {
         break label$18
        }
        $22_1 = 0;
        $29_1 = (HEAPU16[($3_1 + 2 | 0) >> 1] | 0) & 65535 | 0;
        if ($35_1 >>> 0 < $29_1 >>> 0) {
         break label$18
        }
        HEAP32[($8_1 + 12 | 0) >> 2] = 0;
        $22_1 = HEAPU16[($3_1 + 10 | 0) >> 1] | 0;
        $43_1 = HEAPU16[($3_1 + 8 | 0) >> 1] | 0;
        $44_1 = HEAPU16[($3_1 + 6 | 0) >> 1] | 0;
        HEAP32[($8_1 + 28 | 0) >> 2] = 0;
        $14_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
        $17_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
        HEAPF32[$8_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($27_1 >>> 0) / $14_1) + $17_1) - Math_fround(HEAPF32[$5_1 >> 2]));
        $20_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
        $9_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
        HEAPF32[($8_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($29_1 >>> 0) / $20_1) + $9_1) - Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]));
        $10_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
        $11_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
        HEAPF32[($8_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($28_1 >>> 0) / $10_1) + $11_1) - Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]));
        HEAPF32[($8_1 + 16 | 0) >> 2] = Math_fround(Math_fround($17_1 + Math_fround(Math_fround($44_1 >>> 0) / $14_1)) - Math_fround(HEAPF32[$4_1 >> 2]));
        HEAPF32[($8_1 + 20 | 0) >> 2] = Math_fround(Math_fround($9_1 + Math_fround(Math_fround($43_1 >>> 0) / $20_1)) - Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
        HEAPF32[($8_1 + 24 | 0) >> 2] = Math_fround(Math_fround($11_1 + Math_fround(Math_fround($22_1 >>> 0) / $10_1)) - Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
        label$19 : {
         $17_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
         $9_1 = Math_fround($12_1 * Math_fround(Math_fround(HEAPF32[$38_1 >> 2]) - $17_1));
         $20_1 = Math_fround(HEAPF32[$2_1 >> 2]);
         $14_1 = Math_fround($15_1 * Math_fround(Math_fround(HEAPF32[$42_1 >> 2]) - $20_1));
         if ($9_1 > $14_1) {
          break label$19
         }
         $20_1 = Math_fround($15_1 * Math_fround(Math_fround(HEAPF32[$41_1 >> 2]) - $20_1));
         $17_1 = Math_fround($12_1 * Math_fround(Math_fround(HEAPF32[$40_1 >> 2]) - $17_1));
         if ($20_1 > $17_1) {
          break label$19
         }
         $11_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
         $10_1 = Math_fround($16_1 * Math_fround(Math_fround(HEAPF32[$37_1 >> 2]) - $11_1));
         $14_1 = $17_1 < $14_1 ? $17_1 : $14_1;
         if ($10_1 > $14_1) {
          break label$19
         }
         $17_1 = $9_1 > $20_1 ? $9_1 : $20_1;
         $20_1 = Math_fround($16_1 * Math_fround(Math_fround(HEAPF32[$39_1 >> 2]) - $11_1));
         if ($17_1 > $20_1) {
          break label$19
         }
         $22_1 = ($10_1 > $17_1 ? $10_1 : $17_1) < $13_1 & ($20_1 < $14_1 ? $20_1 : $14_1) > Math_fround(0.0) | 0;
         if (($26_1 | 0) < (0 | 0)) {
          break label$18
         }
         if (!$22_1) {
          break label$18
         }
         $22_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
         FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $22_1 >> 21 | 0, $22_1 & 2097151 | 0);
         break label$17;
        }
        $22_1 = 0;
       }
       if (($26_1 | 0) > (-1 | 0)) {
        break label$17
       }
       if (!$22_1) {
        break label$16
       }
      }
      $6_1 = $6_1 + 1 | 0;
      $3_1 = $3_1 + 16 | 0;
      break label$15;
     }
     $22_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     $6_1 = $6_1 - $22_1 | 0;
     $3_1 = $3_1 - ($22_1 << 4 | 0) | 0;
    }
    $30_1 = $30_1 + 1 | 0;
    if (($6_1 | 0) < ($7_1 | 0)) {
     continue label$14
    }
    break label$14;
   };
  }
  label$20 : {
   if ((HEAP32[(0 + 1720 | 0) >> 2] | 0 | 0) >= ($30_1 | 0)) {
    break label$20
   }
   HEAP32[(0 + 1720 | 0) >> 2] = $30_1;
  }
  global$0 = $8_1 + 32 | 0;
 }
 
 function $373($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  i64toi32_i32$1 = ($4_1 + 16 | 0) + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
     break label$2
    }
    $372($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 16 | 0 | 0, $4_1 | 0, 0 | 0, HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $371($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 + 16 | 0 | 0, $4_1 | 0, $4_1 | 0, $4_1 | 0);
  }
  global$0 = $4_1 + 32 | 0;
 }
 
 function $374($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
    break label$1
   }
   $372($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 0 | 0, HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0);
   return;
  }
  $371($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $0_1 | 0, $0_1 | 0);
 }
 
 function $375($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 9988;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $373(HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0, $4_1 | 0, $2_1 | 0, $3_1 | 0);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $376($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$6_1 >> 2] = 10156;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  $374(HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0, $6_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  global$0 = $6_1 + 16 | 0;
 }
 
 function $377($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $378($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $10_1 = 0, $6_1 = 0, $14_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $11_1 = 0, $5_1 = 0, $9_1 = 0, $15_1 = Math_fround(0), $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($4_1, $3_1 + 28 | 0, $3_1 + 24 | 0, $3_1 + 20 | 0, $3_1 + 16 | 0, $3_1 + 12 | 0, $3_1 + 8 | 0, $3_1 + 4 | 0, $3_1, $1_1);
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $5_1 = $4_1 + 12 | 0;
  $6_1 = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, $2_1) | 0;
  $7_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  $8_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          if ((HEAP32[$3_1 >> 2] | 0 | 0) == (3 | 0)) {
           break label$8
          }
          $9_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
          $10_1 = $7_1 + Math_imul($9_1, HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0;
          if ($8_1) {
           break label$7
          }
          $11_1 = $10_1 + 8 | 0;
          $12_1 = Math_fround(Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
          $13_1 = Math_fround(Math_fround(HEAPF32[$10_1 >> 2]) * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
          $14_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
          break label$6;
         }
         $9_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         $10_1 = $7_1 + Math_imul($9_1, HEAPU16[($6_1 + 4 | 0) >> 1] | 0) | 0;
         label$9 : {
          label$10 : {
           if (!$8_1) {
            break label$10
           }
           $12_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * Math_fround(+HEAPF64[($10_1 + 8 | 0) >> 3]));
           $13_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * Math_fround(+HEAPF64[$10_1 >> 3]));
           $14_1 = Math_fround(+HEAPF64[($10_1 + 16 | 0) >> 3]);
           $11_1 = $5_1;
           break label$9;
          }
          $11_1 = $10_1 + 8 | 0;
          $12_1 = Math_fround(Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
          $13_1 = Math_fround(Math_fround(HEAPF32[$10_1 >> 2]) * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
          $14_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
         }
         $15_1 = Math_fround(HEAPF32[$11_1 >> 2]);
         HEAP32[($3_1 + 76 | 0) >> 2] = 0;
         HEAPF32[($3_1 + 68 | 0) >> 2] = $12_1;
         HEAPF32[($3_1 + 72 | 0) >> 2] = Math_fround($15_1 * $14_1);
         HEAPF32[($3_1 + 64 | 0) >> 2] = $13_1;
         $10_1 = $7_1 + Math_imul($9_1, HEAPU16[($6_1 + 2 | 0) >> 1] | 0) | 0;
         if (!$8_1) {
          break label$5
         }
         $12_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * Math_fround(+HEAPF64[($10_1 + 8 | 0) >> 3]));
         $13_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * Math_fround(+HEAPF64[$10_1 >> 3]));
         $14_1 = Math_fround(+HEAPF64[($10_1 + 16 | 0) >> 3]);
         $11_1 = $5_1;
         break label$4;
        }
        $12_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * Math_fround(+HEAPF64[($10_1 + 8 | 0) >> 3]));
        $13_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * Math_fround(+HEAPF64[$10_1 >> 3]));
        $14_1 = Math_fround(+HEAPF64[($10_1 + 16 | 0) >> 3]);
        $11_1 = $5_1;
       }
       $15_1 = Math_fround(HEAPF32[$11_1 >> 2]);
       HEAP32[($3_1 + 76 | 0) >> 2] = 0;
       HEAPF32[($3_1 + 68 | 0) >> 2] = $12_1;
       HEAPF32[($3_1 + 72 | 0) >> 2] = Math_fround($15_1 * $14_1);
       HEAPF32[($3_1 + 64 | 0) >> 2] = $13_1;
       $10_1 = $7_1 + Math_imul($9_1, HEAP32[($6_1 + 4 | 0) >> 2] | 0) | 0;
       if (!$8_1) {
        break label$3
       }
       $12_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * Math_fround(+HEAPF64[($10_1 + 8 | 0) >> 3]));
       $13_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * Math_fround(+HEAPF64[$10_1 >> 3]));
       $14_1 = Math_fround(+HEAPF64[($10_1 + 16 | 0) >> 3]);
       $11_1 = $5_1;
       break label$2;
      }
      $11_1 = $10_1 + 8 | 0;
      $12_1 = Math_fround(Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
      $13_1 = Math_fround(Math_fround(HEAPF32[$10_1 >> 2]) * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
      $14_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
     }
     $15_1 = Math_fround(HEAPF32[$11_1 >> 2]);
     HEAP32[($3_1 + 60 | 0) >> 2] = 0;
     HEAPF32[($3_1 + 52 | 0) >> 2] = $12_1;
     HEAPF32[($3_1 + 56 | 0) >> 2] = Math_fround($15_1 * $14_1);
     HEAPF32[($3_1 + 48 | 0) >> 2] = $13_1;
     $6_1 = $7_1 + Math_imul($9_1, HEAPU16[$6_1 >> 1] | 0) | 0;
     label$11 : {
      label$12 : {
       if (!$8_1) {
        break label$12
       }
       $12_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * Math_fround(+HEAPF64[($6_1 + 8 | 0) >> 3]));
       $13_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * Math_fround(+HEAPF64[$6_1 >> 3]));
       $14_1 = Math_fround(+HEAPF64[($6_1 + 16 | 0) >> 3]);
       break label$11;
      }
      $5_1 = $6_1 + 8 | 0;
      $12_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
      $13_1 = Math_fround(Math_fround(HEAPF32[$6_1 >> 2]) * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
      $14_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
     }
     $14_1 = Math_fround(Math_fround(HEAPF32[$5_1 >> 2]) * $14_1);
     break label$1;
    }
    $11_1 = $10_1 + 8 | 0;
    $12_1 = Math_fround(Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
    $13_1 = Math_fround(Math_fround(HEAPF32[$10_1 >> 2]) * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
    $14_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
   }
   $15_1 = Math_fround(HEAPF32[$11_1 >> 2]);
   HEAP32[($3_1 + 60 | 0) >> 2] = 0;
   HEAPF32[($3_1 + 52 | 0) >> 2] = $12_1;
   HEAPF32[($3_1 + 56 | 0) >> 2] = Math_fround($15_1 * $14_1);
   HEAPF32[($3_1 + 48 | 0) >> 2] = $13_1;
   $6_1 = $7_1 + Math_imul($9_1, HEAP32[$6_1 >> 2] | 0) | 0;
   label$13 : {
    label$14 : {
     if (!$8_1) {
      break label$14
     }
     $12_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * Math_fround(+HEAPF64[($6_1 + 8 | 0) >> 3]));
     $13_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * Math_fround(+HEAPF64[$6_1 >> 3]));
     $14_1 = Math_fround(+HEAPF64[($6_1 + 16 | 0) >> 3]);
     break label$13;
    }
    $5_1 = $6_1 + 8 | 0;
    $12_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
    $13_1 = Math_fround(Math_fround(HEAPF32[$6_1 >> 2]) * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
    $14_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
   }
   $14_1 = Math_fround(Math_fround(HEAPF32[$5_1 >> 2]) * $14_1);
  }
  HEAP32[($3_1 + 44 | 0) >> 2] = 0;
  HEAPF32[($3_1 + 40 | 0) >> 2] = $14_1;
  HEAPF32[($3_1 + 36 | 0) >> 2] = $12_1;
  HEAPF32[($3_1 + 32 | 0) >> 2] = $13_1;
  $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($4_1, $3_1 + 32 | 0, $1_1, $2_1);
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($4_1, $1_1);
  global$0 = $3_1 + 80 | 0;
 }
 
 function $379($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $380($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $381($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $10_1 = 0, $6_1 = 0, $14_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $11_1 = 0, $5_1 = 0, $9_1 = 0, $15_1 = Math_fround(0), $7_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($4_1, $3_1 + 28 | 0, $3_1 + 24 | 0, $3_1 + 20 | 0, $3_1 + 16 | 0, $3_1 + 12 | 0, $3_1 + 8 | 0, $3_1 + 4 | 0, $3_1, $1_1);
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $5_1 = $4_1 + 12 | 0;
  $6_1 = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, $2_1) | 0;
  $7_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
  $8_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          if ((HEAP32[$3_1 >> 2] | 0 | 0) == (3 | 0)) {
           break label$8
          }
          $9_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
          $10_1 = $7_1 + Math_imul($9_1, HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0;
          if ($8_1) {
           break label$7
          }
          $11_1 = $10_1 + 8 | 0;
          $12_1 = Math_fround(Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
          $13_1 = Math_fround(Math_fround(HEAPF32[$10_1 >> 2]) * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
          $14_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
          break label$6;
         }
         $9_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         $10_1 = $7_1 + Math_imul($9_1, HEAPU16[($6_1 + 4 | 0) >> 1] | 0) | 0;
         label$9 : {
          label$10 : {
           if (!$8_1) {
            break label$10
           }
           $12_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * Math_fround(+HEAPF64[($10_1 + 8 | 0) >> 3]));
           $13_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * Math_fround(+HEAPF64[$10_1 >> 3]));
           $14_1 = Math_fround(+HEAPF64[($10_1 + 16 | 0) >> 3]);
           $11_1 = $5_1;
           break label$9;
          }
          $11_1 = $10_1 + 8 | 0;
          $12_1 = Math_fround(Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
          $13_1 = Math_fround(Math_fround(HEAPF32[$10_1 >> 2]) * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
          $14_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
         }
         $15_1 = Math_fround(HEAPF32[$11_1 >> 2]);
         HEAP32[($3_1 + 76 | 0) >> 2] = 0;
         HEAPF32[($3_1 + 68 | 0) >> 2] = $12_1;
         HEAPF32[($3_1 + 72 | 0) >> 2] = Math_fround($15_1 * $14_1);
         HEAPF32[($3_1 + 64 | 0) >> 2] = $13_1;
         $10_1 = $7_1 + Math_imul($9_1, HEAPU16[($6_1 + 2 | 0) >> 1] | 0) | 0;
         if (!$8_1) {
          break label$5
         }
         $12_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * Math_fround(+HEAPF64[($10_1 + 8 | 0) >> 3]));
         $13_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * Math_fround(+HEAPF64[$10_1 >> 3]));
         $14_1 = Math_fround(+HEAPF64[($10_1 + 16 | 0) >> 3]);
         $11_1 = $5_1;
         break label$4;
        }
        $12_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * Math_fround(+HEAPF64[($10_1 + 8 | 0) >> 3]));
        $13_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * Math_fround(+HEAPF64[$10_1 >> 3]));
        $14_1 = Math_fround(+HEAPF64[($10_1 + 16 | 0) >> 3]);
        $11_1 = $5_1;
       }
       $15_1 = Math_fround(HEAPF32[$11_1 >> 2]);
       HEAP32[($3_1 + 76 | 0) >> 2] = 0;
       HEAPF32[($3_1 + 68 | 0) >> 2] = $12_1;
       HEAPF32[($3_1 + 72 | 0) >> 2] = Math_fround($15_1 * $14_1);
       HEAPF32[($3_1 + 64 | 0) >> 2] = $13_1;
       $10_1 = $7_1 + Math_imul($9_1, HEAP32[($6_1 + 4 | 0) >> 2] | 0) | 0;
       if (!$8_1) {
        break label$3
       }
       $12_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * Math_fround(+HEAPF64[($10_1 + 8 | 0) >> 3]));
       $13_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * Math_fround(+HEAPF64[$10_1 >> 3]));
       $14_1 = Math_fround(+HEAPF64[($10_1 + 16 | 0) >> 3]);
       $11_1 = $5_1;
       break label$2;
      }
      $11_1 = $10_1 + 8 | 0;
      $12_1 = Math_fround(Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
      $13_1 = Math_fround(Math_fround(HEAPF32[$10_1 >> 2]) * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
      $14_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
     }
     $15_1 = Math_fround(HEAPF32[$11_1 >> 2]);
     HEAP32[($3_1 + 60 | 0) >> 2] = 0;
     HEAPF32[($3_1 + 52 | 0) >> 2] = $12_1;
     HEAPF32[($3_1 + 56 | 0) >> 2] = Math_fround($15_1 * $14_1);
     HEAPF32[($3_1 + 48 | 0) >> 2] = $13_1;
     $6_1 = $7_1 + Math_imul($9_1, HEAPU16[$6_1 >> 1] | 0) | 0;
     label$11 : {
      label$12 : {
       if (!$8_1) {
        break label$12
       }
       $12_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * Math_fround(+HEAPF64[($6_1 + 8 | 0) >> 3]));
       $13_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * Math_fround(+HEAPF64[$6_1 >> 3]));
       $14_1 = Math_fround(+HEAPF64[($6_1 + 16 | 0) >> 3]);
       break label$11;
      }
      $5_1 = $6_1 + 8 | 0;
      $12_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
      $13_1 = Math_fround(Math_fround(HEAPF32[$6_1 >> 2]) * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
      $14_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
     }
     $14_1 = Math_fround(Math_fround(HEAPF32[$5_1 >> 2]) * $14_1);
     break label$1;
    }
    $11_1 = $10_1 + 8 | 0;
    $12_1 = Math_fround(Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
    $13_1 = Math_fround(Math_fround(HEAPF32[$10_1 >> 2]) * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
    $14_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
   }
   $15_1 = Math_fround(HEAPF32[$11_1 >> 2]);
   HEAP32[($3_1 + 60 | 0) >> 2] = 0;
   HEAPF32[($3_1 + 52 | 0) >> 2] = $12_1;
   HEAPF32[($3_1 + 56 | 0) >> 2] = Math_fround($15_1 * $14_1);
   HEAPF32[($3_1 + 48 | 0) >> 2] = $13_1;
   $6_1 = $7_1 + Math_imul($9_1, HEAP32[$6_1 >> 2] | 0) | 0;
   label$13 : {
    label$14 : {
     if (!$8_1) {
      break label$14
     }
     $12_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * Math_fround(+HEAPF64[($6_1 + 8 | 0) >> 3]));
     $13_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * Math_fround(+HEAPF64[$6_1 >> 3]));
     $14_1 = Math_fround(+HEAPF64[($6_1 + 16 | 0) >> 3]);
     break label$13;
    }
    $5_1 = $6_1 + 8 | 0;
    $12_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
    $13_1 = Math_fround(Math_fround(HEAPF32[$6_1 >> 2]) * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
    $14_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
   }
   $14_1 = Math_fround(Math_fround(HEAPF32[$5_1 >> 2]) * $14_1);
  }
  HEAP32[($3_1 + 44 | 0) >> 2] = 0;
  HEAPF32[($3_1 + 40 | 0) >> 2] = $14_1;
  HEAPF32[($3_1 + 36 | 0) >> 2] = $12_1;
  HEAPF32[($3_1 + 32 | 0) >> 2] = $13_1;
  $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($4_1, $3_1 + 32 | 0, $1_1, $2_1);
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($4_1, $1_1);
  global$0 = $3_1 + 80 | 0;
 }
 
 function $382($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 35;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = -1;
  HEAP32[($0_1 + 16 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = 10304;
  return $0_1 | 0;
 }
 
 function $383($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $384($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $385($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $382($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 10412;
  $3_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$1 = $0_1 + 80 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[($0_1 + 72 | 0) >> 2] = 1065353216;
  HEAP32[($0_1 + 76 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[($0_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 64 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 28;
  $2_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)) + Math_fround($3_1 * $3_1)))));
  HEAPF32[($0_1 + 60 | 0) >> 2] = Math_fround($3_1 * $2_1);
  HEAPF32[($0_1 + 56 | 0) >> 2] = Math_fround($5_1 * $2_1);
  HEAPF32[($0_1 + 52 | 0) >> 2] = Math_fround($4_1 * $2_1);
  return $0_1 | 0;
 }
 
 function $386($0_1) {
  $0_1 = $0_1 | 0;
  $383($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $387($0_1) {
  $0_1 = $0_1 | 0;
  $383($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $388($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = -581039253;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -581039253;
  HEAP32[i64toi32_i32$1 >> 2] = -581039253;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 1566444395;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1566444395;
  HEAP32[i64toi32_i32$1 >> 2] = 1566444395;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $389($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $8_1 = Math_fround(0), $4_1 = 0, $7_1 = Math_fround(0), $12_1 = Math_fround(0), $6_1 = Math_fround(0), $5_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $16_1 = Math_fround(0), $14_1 = Math_fround(0), $13_1 = Math_fround(0), $15_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = 0, $21_1 = Math_fround(0), $22_1 = 0, $23_1 = 0, $37_1 = Math_fround(0), $49_1 = Math_fround(0), $126_1 = Math_fround(0);
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $5_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $6_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $7_1 = Math_fround(Math_fround($5_1 - $6_1) * Math_fround(.5));
  $37_1 = Math_fround($7_1 * $7_1);
  $8_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $7_1 = Math_fround(Math_fround($8_1 - $9_1) * Math_fround(.5));
  $49_1 = Math_fround($37_1 + Math_fround($7_1 * $7_1));
  $10_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $7_1 = Math_fround(Math_fround($10_1 - $11_1) * Math_fround(.5));
  $7_1 = Math_fround(Math_sqrt(Math_fround($49_1 + Math_fround($7_1 * $7_1))));
  $10_1 = Math_fround(Math_fround($10_1 + $11_1) * Math_fround(.5));
  $9_1 = Math_fround(Math_fround($8_1 + $9_1) * Math_fround(.5));
  $11_1 = Math_fround(Math_fround($5_1 + $6_1) * Math_fround(.5));
  label$1 : {
   label$2 : {
    $5_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
    if (Math_fround(Math_abs($5_1)) > Math_fround(.7071067690849304) ^ 1 | 0) {
     break label$2
    }
    $6_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
    $8_1 = Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1));
    $12_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($8_1)));
    $13_1 = Math_fround($8_1 * $12_1);
    $8_1 = Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]);
    $14_1 = Math_fround($6_1 * $12_1);
    $15_1 = Math_fround(-Math_fround($8_1 * $14_1));
    $16_1 = Math_fround(-Math_fround($5_1 * $12_1));
    $17_1 = Math_fround($8_1 * $16_1);
    $18_1 = Math_fround(0.0);
    break label$1;
   }
   $8_1 = Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
   $12_1 = Math_fround(Math_fround($8_1 * $8_1) + Math_fround($6_1 * $6_1));
   $126_1 = $12_1;
   $12_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($12_1)));
   $17_1 = Math_fround($126_1 * $12_1);
   $18_1 = Math_fround(-Math_fround($6_1 * $12_1));
   $15_1 = Math_fround($5_1 * $18_1);
   $16_1 = Math_fround($8_1 * $12_1);
   $13_1 = Math_fround(-Math_fround($5_1 * $16_1));
   $14_1 = Math_fround(0.0);
  }
  $12_1 = Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]);
  $0_1 = $4_1 + 44 | 0;
  HEAP32[$0_1 >> 2] = 0;
  $3_1 = $4_1 + 28 | 0;
  HEAP32[$3_1 >> 2] = 0;
  $2_1 = $4_1 + 40 | 0;
  $12_1 = Math_fround(Math_fround(Math_fround($5_1 * $10_1) + Math_fround(Math_fround($11_1 * $8_1) + Math_fround($9_1 * $6_1))) - $12_1);
  $10_1 = Math_fround($10_1 - Math_fround($5_1 * $12_1));
  $14_1 = Math_fround($7_1 * $14_1);
  $19_1 = Math_fround($10_1 - $14_1);
  $5_1 = Math_fround($7_1 * $17_1);
  $17_1 = Math_fround($19_1 - $5_1);
  HEAPF32[$2_1 >> 2] = $17_1;
  $20_1 = $4_1 + 36 | 0;
  $9_1 = Math_fround($9_1 - Math_fround($6_1 * $12_1));
  $16_1 = Math_fround($7_1 * $16_1);
  $21_1 = Math_fround($9_1 - $16_1);
  $6_1 = Math_fround($7_1 * $15_1);
  $15_1 = Math_fround($21_1 - $6_1);
  HEAPF32[$20_1 >> 2] = $15_1;
  $22_1 = $4_1 + 24 | 0;
  $10_1 = Math_fround($14_1 + $10_1);
  HEAPF32[$22_1 >> 2] = Math_fround($10_1 - $5_1);
  $23_1 = $4_1 + 20 | 0;
  $9_1 = Math_fround($16_1 + $9_1);
  HEAPF32[$23_1 >> 2] = Math_fround($9_1 - $6_1);
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  $8_1 = Math_fround($11_1 - Math_fround($8_1 * $12_1));
  $11_1 = Math_fround($7_1 * $18_1);
  $12_1 = Math_fround($8_1 - $11_1);
  $7_1 = Math_fround($7_1 * $13_1);
  $13_1 = Math_fround($12_1 - $7_1);
  HEAPF32[($4_1 + 32 | 0) >> 2] = $13_1;
  $8_1 = Math_fround($11_1 + $8_1);
  HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround($8_1 - $7_1);
  $10_1 = Math_fround($5_1 + $10_1);
  HEAPF32[($4_1 + 8 | 0) >> 2] = $10_1;
  $9_1 = Math_fround($6_1 + $9_1);
  HEAPF32[($4_1 + 4 | 0) >> 2] = $9_1;
  $8_1 = Math_fround($7_1 + $8_1);
  HEAPF32[$4_1 >> 2] = $8_1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $4_1, 0, 0);
  HEAP32[$0_1 >> 2] = 0;
  HEAPF32[$2_1 >> 2] = $10_1;
  HEAPF32[$20_1 >> 2] = $9_1;
  HEAP32[$3_1 >> 2] = 0;
  HEAPF32[$22_1 >> 2] = Math_fround($5_1 + $19_1);
  HEAPF32[$23_1 >> 2] = Math_fround($6_1 + $21_1);
  HEAPF32[($4_1 + 32 | 0) >> 2] = $8_1;
  HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround($7_1 + $12_1);
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $17_1;
  HEAPF32[($4_1 + 4 | 0) >> 2] = $15_1;
  HEAPF32[$4_1 >> 2] = $13_1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $4_1, 0, 1);
  global$0 = $4_1 + 48 | 0;
 }
 
 function $390($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $391($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $9_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 80 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $9_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $392($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 72 | 0 | 0;
 }
 
 function $393($0_1) {
  $0_1 = $0_1 | 0;
  return 10516 | 0;
 }
 
 function $394($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[($0_1 + 16 | 0) >> 2] = $1_1;
 }
 
 function $395($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]));
 }
 
 function $396($0_1) {
  $0_1 = $0_1 | 0;
  return 52 | 0;
 }
 
 function $397($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $98($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
  HEAP32[($1_1 + 24 | 0) >> 2] = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  HEAP32[($1_1 + 28 | 0) >> 2] = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  HEAP32[($1_1 + 32 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  HEAP32[($1_1 + 36 | 0) >> 2] = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  HEAP32[($1_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
  $0_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  HEAP32[($1_1 + 48 | 0) >> 2] = 0;
  HEAP32[($1_1 + 44 | 0) >> 2] = $0_1;
  return 10528 | 0;
 }
 
 function $398($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $382($0_1 | 0) | 0;
  HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  HEAP8[($0_1 + 92 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 80 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 64 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[($0_1 + 56 | 0) >> 2] = 1065353216;
  HEAP32[($0_1 + 60 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 1;
  HEAP32[($0_1 + 44 | 0) >> 2] = -8388609;
  i64toi32_i32$1 = $0_1 + 36 | 0;
  i64toi32_i32$0 = -8388609;
  HEAP32[i64toi32_i32$1 >> 2] = -8388609;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 2139095039;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 2139095039;
  HEAP32[($0_1 + 20 | 0) >> 2] = 2139095039;
  HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 25;
  HEAP32[($0_1 + 188 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 180 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 168 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 160 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 152 | 0) >> 2] = 1008981770;
  HEAP32[($0_1 + 148 | 0) >> 2] = 11168;
  HEAP32[$0_1 >> 2] = 10560;
  i64toi32_i32$1 = $0_1 + 204 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 196 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 156 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 176 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 144 | 0) >> 2] = $0_1 + 148 | 0;
  return $0_1 | 0;
 }
 
 function $399($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 11012;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 92 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = 0;
  HEAP8[($0_1 + 92 | 0) >> 0] = 1;
  $383($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $400($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 11012;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 92 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = 0;
  HEAP8[($0_1 + 92 | 0) >> 0] = 1;
  $383($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $401($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 144 | 0) >> 2] | 0;
   $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (($1_1 | 0) < (1 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = $1_1 + 1 | 0;
   return;
  }
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($1_1, $0_1 + 36 | 0, $0_1 + 40 | 0, $0_1 + 44 | 0, $0_1 + 48 | 0, $0_1 + 52 | 0, $0_1 + 56 | 0, $0_1 + 60 | 0, $0_1 + 64 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0);
  HEAP32[($0_1 + 32 | 0) >> 2] = 1;
 }
 
 function $402($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 144 | 0) >> 2] | 0;
   $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (($1_1 | 0) < (2 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + -1 | 0;
     break label$2;
    }
    $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($1_1, HEAP32[($0_1 + 28 | 0) >> 2] | 0);
    $1_1 = 0;
    HEAP32[($0_1 + 36 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  }
 }
 
 function $403($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $10_1 = Math_fround(0), $12_1 = Math_fround(0), $3_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $11_1 = Math_fround(0), $13_1 = Math_fround(0), i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $5_1 = 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 112 | 0) >> 2] | 0]($0_1);
  i64toi32_i32$1 = $2_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 188 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $1_1 = Math_fround($1_1 / Math_fround($3_1 | 0));
   $4_1 = HEAP32[($0_1 + 196 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 184 | 0) >> 2] | 0;
   label$2 : {
    if ((HEAP32[($0_1 + 192 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$2
    }
    $6_1 = 0 - $4_1 | 0;
    $4_1 = $5_1 + Math_imul($4_1, $3_1 + -1 | 0) | 0;
    $7_1 = Math_fround(0.0);
    $8_1 = Math_fround(0.0);
    $9_1 = Math_fround(0.0);
    label$3 : while (1) {
     $10_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]);
     $12_1 = Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) * Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2]));
     $12_1 = Math_fround($12_1 * $12_1);
     $13_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 164 | 0) >> 2]));
     $13_1 = Math_fround($13_1 * $13_1);
     $7_1 = Math_fround(Math_fround($1_1 * Math_fround($12_1 + $13_1)) + $7_1);
     HEAPF32[($2_1 + 8 | 0) >> 2] = $7_1;
     $10_1 = Math_fround($10_1 * $11_1);
     $10_1 = Math_fround($10_1 * $10_1);
     $8_1 = Math_fround(Math_fround($1_1 * Math_fround($12_1 + $10_1)) + $8_1);
     HEAPF32[($2_1 + 4 | 0) >> 2] = $8_1;
     $9_1 = Math_fround($9_1 + Math_fround($1_1 * Math_fround($13_1 + $10_1)));
     HEAPF32[$2_1 >> 2] = $9_1;
     $4_1 = $4_1 + $6_1 | 0;
     $3_1 = $3_1 + -1 | 0;
     if ($3_1) {
      continue label$3
     }
     break label$1;
    };
   }
   $6_1 = 0 - $4_1 | 0;
   $4_1 = $5_1 + Math_imul($4_1, $3_1 + -1 | 0) | 0;
   $7_1 = Math_fround(0.0);
   $8_1 = Math_fround(0.0);
   $9_1 = Math_fround(0.0);
   label$4 : while (1) {
    $10_1 = Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]);
    $11_1 = Math_fround(+HEAPF64[$4_1 >> 3] * +Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2]));
    $11_1 = Math_fround($11_1 * $11_1);
    $12_1 = Math_fround(+HEAPF64[($4_1 + 8 | 0) >> 3] * +Math_fround(HEAPF32[($0_1 + 164 | 0) >> 2]));
    $12_1 = Math_fround($12_1 * $12_1);
    $7_1 = Math_fround(Math_fround($1_1 * Math_fround($11_1 + $12_1)) + $7_1);
    HEAPF32[($2_1 + 8 | 0) >> 2] = $7_1;
    $10_1 = Math_fround(+HEAPF64[($4_1 + 16 | 0) >> 3] * +$10_1);
    $10_1 = Math_fround($10_1 * $10_1);
    $8_1 = Math_fround(Math_fround($1_1 * Math_fround($11_1 + $10_1)) + $8_1);
    HEAPF32[($2_1 + 4 | 0) >> 2] = $8_1;
    $9_1 = Math_fround($9_1 + Math_fround($1_1 * Math_fround($12_1 + $10_1)));
    HEAPF32[$2_1 >> 2] = $9_1;
    $4_1 = $4_1 + $6_1 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$4
    }
    break label$4;
   };
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 116 | 0) >> 2] | 0]($0_1);
 }
 
 function $404($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   $1_1 = Math_fround($1_1 / Math_fround($4_1 | 0));
   $5_1 = ($4_1 << 2 | 0) + -4 | 0;
   label$2 : while (1) {
    $6_1 = HEAP32[((HEAP32[($0_1 + 164 | 0) >> 2] | 0) + $5_1 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($6_1, $1_1, $3_1);
    HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(HEAPF32[$3_1 >> 2]) + Math_fround(HEAPF32[$2_1 >> 2]));
    HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]));
    HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]));
    $5_1 = $5_1 + -4 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $405($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
 }
 
 function $406($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $10_1 = 0, $28_1 = Math_fround(0), $8_1 = 0, $9_1 = 0;
  $4_1 = global$0 - 112 | 0;
  global$0 = $4_1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 112 | 0) >> 2] | 0]($0_1);
  HEAP32[($4_1 + 100 | 0) >> 2] = 0;
  HEAP8[($4_1 + 104 | 0) >> 0] = 1;
  HEAP32[($4_1 + 92 | 0) >> 2] = 0;
  HEAP32[($4_1 + 96 | 0) >> 2] = 0;
  HEAP32[($4_1 + 84 | 0) >> 2] = 0;
  $5_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) - Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]));
  $28_1 = $5_1;
  $6_1 = Math_fround(Math_fround(HEAPF32[$3_1 >> 2]) - Math_fround(HEAPF32[$2_1 >> 2]));
  $7_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]));
  $5_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1)) + Math_fround($5_1 * $5_1)))));
  HEAPF32[($4_1 + 80 | 0) >> 2] = Math_fround($28_1 * $5_1);
  HEAPF32[($4_1 + 76 | 0) >> 2] = Math_fround($7_1 * $5_1);
  HEAPF32[($4_1 + 72 | 0) >> 2] = Math_fround($6_1 * $5_1);
  $89($0_1 + 72 | 0 | 0, $4_1 + 72 | 0 | 0, $2_1 | 0, $4_1 + 88 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($4_1 + 92 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 116 | 0) >> 2] | 0]($0_1);
    break label$1;
   }
   $8_1 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
   HEAP32[($4_1 + 64 | 0) >> 2] = 1008981770;
   $2_1 = ($3_1 << 2 | 0) + -4 | 0;
   label$3 : while (1) {
    $9_1 = HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
    $10_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 84 | 0) >> 2] | 0]($0_1) | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$10_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($10_1, $9_1, $4_1);
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $4_1, $8_1, HEAP32[((HEAP32[($4_1 + 100 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0);
    $2_1 = $2_1 + -4 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$3
    }
    break label$3;
   };
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 116 | 0) >> 2] | 0]($0_1);
  }
  label$4 : {
   $2_1 = HEAP32[($4_1 + 100 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$4
   }
   label$5 : {
    if (!(HEAPU8[($4_1 + 104 | 0) >> 0] | 0)) {
     break label$5
    }
    $80($2_1 | 0);
   }
   HEAP32[($4_1 + 100 | 0) >> 2] = 0;
  }
  global$0 = $4_1 + 112 | 0;
 }
 
 function $407($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $20_1 = 0, $25_1 = 0, $28_1 = 0, $31_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 128 | 0;
  global$0 = $4_1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 112 | 0) >> 2] | 0]($0_1);
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 96 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $20_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $25_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + 120 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $25_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 96 | 0) >> 2] = $28_1;
  HEAP32[($4_1 + 100 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $31_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[($4_1 + 112 | 0) >> 2] = $31_1;
  HEAP32[($4_1 + 116 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 84 | 0) >> 2] = 0;
  HEAP8[($4_1 + 88 | 0) >> 0] = 1;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[($4_1 + 76 | 0) >> 2] = 0;
  HEAP32[($4_1 + 80 | 0) >> 2] = i64toi32_i32$0;
  $88($0_1 + 72 | 0 | 0, $4_1 + 96 | 0 | 0, $4_1 + 72 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
    if ($2_1) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 116 | 0) >> 2] | 0]($0_1);
    break label$1;
   }
   $5_1 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
   HEAP32[($4_1 + 64 | 0) >> 2] = 1008981770;
   $3_1 = ($2_1 << 2 | 0) + -4 | 0;
   label$3 : while (1) {
    $6_1 = HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
    $7_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 84 | 0) >> 2] | 0]($0_1) | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($7_1, $6_1, $4_1);
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $4_1, $5_1, HEAP32[((HEAP32[($4_1 + 84 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0);
    $3_1 = $3_1 + -4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$3
    }
    break label$3;
   };
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 116 | 0) >> 2] | 0]($0_1);
  }
  label$4 : {
   $3_1 = HEAP32[($4_1 + 84 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$4
   }
   label$5 : {
    if (!(HEAPU8[($4_1 + 88 | 0) >> 0] | 0)) {
     break label$5
    }
    $80($3_1 | 0);
   }
   HEAP32[($4_1 + 84 | 0) >> 2] = 0;
  }
  global$0 = $4_1 + 128 | 0;
 }
 
 function $408($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   $5_1 = ($4_1 << 2 | 0) + -4 | 0;
   label$2 : while (1) {
    $6_1 = HEAP32[((HEAP32[($0_1 + 164 | 0) >> 2] | 0) + $5_1 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($6_1, $1_1, $2_1, $3_1);
    $5_1 = $5_1 + -4 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $409($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   $5_1 = ($4_1 << 2 | 0) + -4 | 0;
   label$2 : while (1) {
    $6_1 = HEAP32[((HEAP32[($0_1 + 164 | 0) >> 2] | 0) + $5_1 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 144 | 0) >> 2] | 0]($6_1, $1_1, $2_1, $3_1);
    $5_1 = $5_1 + -4 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $410($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $98($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $3_1 = HEAP32[($0_1 + 148 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($3_1, $1_1 + 12 | 0, $2_1) | 0;
  HEAP32[($1_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[($1_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  HEAP32[($1_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  HEAP32[($1_1 + 48 | 0) >> 2] = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
  HEAP32[($1_1 + 52 | 0) >> 2] = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 80 | 0) >> 2] | 0]($0_1) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
  return 10708 | 0;
 }
 
 function $411($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $14_1 = Math_fround(0), $21_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $13_1 = Math_fround(0), $5_1 = Math_fround(0), $8_1 = Math_fround(0), $12_1 = Math_fround(0), $7_1 = Math_fround(0), $6_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $4_1 = Math_fround(0), $15_1 = Math_fround(0);
  $4_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $18_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $21_1 = Math_fround(Math_fround($21_1 + $11_1) * Math_fround(.5));
  $14_1 = Math_fround(Math_fround($14_1 + $13_1) * Math_fround(.5));
  $10_1 = Math_fround(Math_fround($10_1 + $9_1) * Math_fround(.5));
  $7_1 = Math_fround($7_1 + Math_fround(Math_fround(Math_fround($20_1 * $21_1) + Math_fround($12_1 * $14_1)) + Math_fround($8_1 * $10_1)));
  $11_1 = Math_fround($11_1 - $21_1);
  $13_1 = Math_fround($13_1 - $14_1);
  $9_1 = Math_fround($9_1 - $10_1);
  $8_1 = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(Math_abs($20_1))) + Math_fround($13_1 * Math_fround(Math_abs($12_1)))) + Math_fround($9_1 * Math_fround(Math_abs($8_1))));
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($7_1 - $8_1);
  $12_1 = Math_fround($4_1 + Math_fround(Math_fround(Math_fround($21_1 * $19_1) + Math_fround($14_1 * $6_1)) + Math_fround($10_1 * $5_1)));
  $5_1 = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(Math_abs($19_1))) + Math_fround($13_1 * Math_fround(Math_abs($6_1)))) + Math_fround($9_1 * Math_fround(Math_abs($5_1))));
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($12_1 - $5_1);
  $21_1 = Math_fround($15_1 + Math_fround(Math_fround(Math_fround($21_1 * $17_1) + Math_fround($14_1 * $18_1)) + Math_fround($10_1 * $16_1)));
  $14_1 = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(Math_abs($17_1))) + Math_fround($13_1 * Math_fround(Math_abs($18_1)))) + Math_fround($9_1 * Math_fround(Math_abs($16_1))));
  HEAPF32[$2_1 >> 2] = Math_fround($21_1 - $14_1);
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($8_1 + $7_1);
  HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($5_1 + $12_1);
  HEAPF32[$3_1 >> 2] = Math_fround($14_1 + $21_1);
 }
 
 function $412($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $9_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 64 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $9_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 72 | 0) >> 2] | 0]($0_1);
 }
 
 function $413($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 56 | 0 | 0;
 }
 
 function $414($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0;
  HEAPF32[($0_1 + 16 | 0) >> 2] = $1_1;
  label$1 : {
   $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 88 | 0) >> 2] | 0]($0_1) | 0;
   if (!$2_1) {
    break label$1
   }
   $2_1 = $2_1 + -1 | 0;
   label$2 : while (1) {
    $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 124 | 0) >> 2] | 0]($0_1, $2_1) | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($3_1, $1_1);
    $2_1 = $2_1 + -1 | 0;
    if (($2_1 | 0) != (-1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP8[($0_1 + 52 | 0) >> 0] = 1;
 }
 
 function $415($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
 }
 
 function $416($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 112 | 0) >> 2] | 0]($0_1);
  $1_1 = $0_1 + 72 | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($0_1 + 72 | 0) >> 2] | 0) {
     break label$2
    }
    $87($1_1 | 0);
    break label$1;
   }
   $86($1_1 | 0);
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 116 | 0) >> 2] | 0]($0_1);
  $1_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
  $2_1 = HEAPU16[($1_1 + 8 | 0) >> 1] | 0;
  $3_1 = HEAPU16[($1_1 + 10 | 0) >> 1] | 0;
  $4_1 = HEAPU16[$1_1 >> 1] | 0;
  $5_1 = HEAPU16[($1_1 + 2 | 0) >> 1] | 0;
  $6_1 = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
  $1_1 = HEAPU16[($1_1 + 6 | 0) >> 1] | 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  $7_1 = Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
  HEAPF32[($0_1 + 36 | 0) >> 2] = Math_fround($7_1 + Math_fround(Math_fround($1_1 >>> 0) / $8_1));
  $9_1 = Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]);
  HEAPF32[($0_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround($6_1 >>> 0) / $9_1) + $10_1);
  $11_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]);
  HEAPF32[($0_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($5_1 >>> 0) / $11_1) + $12_1);
  HEAPF32[($0_1 + 20 | 0) >> 2] = Math_fround($7_1 + Math_fround(Math_fround($4_1 >>> 0) / $8_1));
  HEAPF32[($0_1 + 44 | 0) >> 2] = Math_fround($10_1 + Math_fround(Math_fround($3_1 >>> 0) / $9_1));
  HEAPF32[($0_1 + 40 | 0) >> 2] = Math_fround($12_1 + Math_fround(Math_fround($2_1 >>> 0) / $11_1));
 }
 
 function $417($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 1;
 }
 
 function $418($0_1) {
  $0_1 = $0_1 | 0;
  return 25 | 0;
 }
 
 function $419($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $420($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $421($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
 }
 
 function $422($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
 }
 
 function $423($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $10_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 160 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 168 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 72 | 0) >> 2] | 0]($0_1);
 }
 
 function $424($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 160 | 0 | 0;
 }
 
 function $425($0_1) {
  $0_1 = $0_1 | 0;
  return 11292 | 0;
 }
 
 function $426($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[($0_1 + 152 | 0) >> 2] = $1_1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 72 | 0) >> 2] | 0]($0_1);
 }
 
 function $427($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2]));
 }
 
 function $428($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $429($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 148 | 0 | 0;
 }
 
 function $430($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 208 | 0) >> 2] | 0 | 0;
 }
 
 function $431($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $432($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $433($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $434($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $435($0_1 + 148 | 0 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $435($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = Math_fround(0), $3_1 = 0, $4_1 = 0;
  $1_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) + Math_imul(HEAP32[($0_1 + 56 | 0) >> 2] | 0, $1_1) | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) != (3 | 0)) {
     break label$2
    }
    $3_1 = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
    $4_1 = HEAPU16[($1_1 + 2 | 0) >> 1] | 0;
    $1_1 = HEAPU16[$1_1 >> 1] | 0;
    break label$1;
   }
   $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $1_1 = HEAP32[$1_1 >> 2] | 0;
  }
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($0_1 + 48 | 0) >> 2] | 0, $1_1) | 0;
  label$3 : {
   label$4 : {
    if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$4
    }
    HEAPF32[($2_1 + 60 | 0) >> 2] = Math_fround(+HEAPF64[$1_1 >> 3] * +Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
    HEAPF32[($2_1 + 64 | 0) >> 2] = Math_fround(+HEAPF64[($1_1 + 8 | 0) >> 3] * +Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]));
    $5_1 = Math_fround(+HEAPF64[($1_1 + 16 | 0) >> 3] * +Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]));
    break label$3;
   }
   HEAPF32[($2_1 + 60 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
   HEAPF32[($2_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]));
   $5_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]));
  }
  HEAPF32[($2_1 + 68 | 0) >> 2] = $5_1;
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($0_1 + 48 | 0) >> 2] | 0, $4_1) | 0;
  label$5 : {
   label$6 : {
    if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$6
    }
    HEAPF32[($2_1 + 76 | 0) >> 2] = Math_fround(+HEAPF64[$1_1 >> 3] * +Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
    HEAPF32[($2_1 + 80 | 0) >> 2] = Math_fround(+HEAPF64[($1_1 + 8 | 0) >> 3] * +Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]));
    $5_1 = Math_fround(+HEAPF64[($1_1 + 16 | 0) >> 3] * +Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]));
    break label$5;
   }
   HEAPF32[($2_1 + 76 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
   HEAPF32[($2_1 + 80 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]));
   $5_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]));
  }
  HEAPF32[($2_1 + 84 | 0) >> 2] = $5_1;
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($0_1 + 48 | 0) >> 2] | 0, $3_1) | 0;
  label$7 : {
   label$8 : {
    if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$8
    }
    HEAPF32[($2_1 + 92 | 0) >> 2] = Math_fround(+HEAPF64[$1_1 >> 3] * +Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
    HEAPF32[($2_1 + 96 | 0) >> 2] = Math_fround(+HEAPF64[($1_1 + 8 | 0) >> 3] * +Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]));
    $5_1 = Math_fround(+HEAPF64[($1_1 + 16 | 0) >> 3] * +Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]));
    break label$7;
   }
   HEAPF32[($2_1 + 92 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
   HEAPF32[($2_1 + 96 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]));
   $5_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]));
  }
  HEAPF32[($2_1 + 100 | 0) >> 2] = $5_1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($2_1, Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]));
 }
 
 function $436($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $437($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $14_1 = Math_fround(0), $17_1 = Math_fround(0), $20_1 = Math_fround(0), $11_1 = Math_fround(0), $16_1 = Math_fround(0), $10_1 = Math_fround(0), $15_1 = Math_fround(0), $18_1 = Math_fround(0), $21_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $19_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $6_1 = Math_fround(0), $59_1 = 0, $62_1 = Math_fround(0), $78_1 = Math_fround(0), $98_1 = Math_fround(0), $169_1 = 0, $205_1 = 0, $218_1 = 0, $222_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 84 | 0) >> 2] | 0]($0_1) | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1, $1_1, $5_1);
  $6_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $13_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $0_1 = $5_1 + 20 | 0;
  $59_1 = $0_1;
  $14_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
  $62_1 = $14_1;
  $14_1 = Math_fround(Math_fround($14_1 + Math_fround(HEAPF32[$5_1 >> 2])) * Math_fround(.5));
  $15_1 = Math_fround($62_1 - $14_1);
  $16_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[$0_1 >> 2]);
  $78_1 = $17_1;
  $17_1 = Math_fround(Math_fround($17_1 + Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])) * Math_fround(.5));
  $18_1 = Math_fround($78_1 - $17_1);
  $19_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
  $0_1 = $5_1 + 24 | 0;
  $20_1 = Math_fround(HEAPF32[$0_1 >> 2]);
  $98_1 = $20_1;
  $20_1 = Math_fround(Math_fround($20_1 + Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])) * Math_fround(.5));
  $21_1 = Math_fround($98_1 - $20_1);
  $22_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
  $23_1 = Math_fround(Math_fround(Math_fround($15_1 * Math_fround(Math_abs($16_1))) + Math_fround($18_1 * Math_fround(Math_abs($19_1)))) + Math_fround($21_1 * Math_fround(Math_abs($22_1))));
  $16_1 = Math_fround(Math_fround(Math_fround(Math_fround($14_1 * $16_1) + Math_fround($17_1 * $19_1)) + Math_fround($20_1 * $22_1)) + Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]));
  HEAPF32[$59_1 >> 2] = Math_fround($23_1 + $16_1);
  HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround($16_1 - $23_1);
  $10_1 = Math_fround($10_1 + Math_fround(Math_fround(Math_fround($14_1 * $12_1) + Math_fround($17_1 * $13_1)) + Math_fround($20_1 * $11_1)));
  $11_1 = Math_fround(Math_fround(Math_fround($15_1 * Math_fround(Math_abs($12_1))) + Math_fround($18_1 * Math_fround(Math_abs($13_1)))) + Math_fround($21_1 * Math_fround(Math_abs($11_1))));
  HEAPF32[$5_1 >> 2] = Math_fround($10_1 - $11_1);
  i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $169_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[i64toi32_i32$0 >> 2] = $169_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  $14_1 = Math_fround($6_1 + Math_fround(Math_fround(Math_fround($14_1 * $9_1) + Math_fround($17_1 * $7_1)) + Math_fround($20_1 * $8_1)));
  $17_1 = Math_fround(Math_fround(Math_fround($15_1 * Math_fround(Math_abs($9_1))) + Math_fround($18_1 * Math_fround(Math_abs($7_1)))) + Math_fround($21_1 * Math_fround(Math_abs($8_1))));
  HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround($14_1 - $17_1);
  i64toi32_i32$1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $205_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $205_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($5_1 + 28 | 0) >> 2] = 0;
  HEAPF32[$0_1 >> 2] = Math_fround($17_1 + $14_1);
  HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround($11_1 + $10_1);
  i64toi32_i32$0 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  $218_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[i64toi32_i32$0 >> 2] = $218_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[$0_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $222_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $222_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $5_1 + 32 | 0;
 }
 
 function $438($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $439($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $440($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $441($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $442($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 10820;
  $1_1 = HEAP32[($0_1 + 164 | 0) >> 2] | 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = ($2_1 << 2 | 0) + -4 | 0;
   label$2 : while (1) {
    $2_1 = $2_1 + -1 | 0;
    label$3 : {
     $4_1 = HEAP32[($1_1 + $3_1 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] | 0]($4_1);
     $1_1 = HEAP32[($0_1 + 164 | 0) >> 2] | 0;
    }
    $3_1 = $3_1 + -4 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  label$4 : {
   if (!$1_1) {
    break label$4
   }
   label$5 : {
    if (!(HEAPU8[($0_1 + 168 | 0) >> 0] | 0)) {
     break label$5
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 164 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 164 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 156 | 0) >> 2] = 0;
  HEAP32[($0_1 + 160 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = 11012;
  HEAP8[($0_1 + 168 | 0) >> 0] = 1;
  label$6 : {
   $2_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$6
   }
   label$7 : {
    if (!(HEAPU8[($0_1 + 92 | 0) >> 0] | 0)) {
     break label$7
    }
    $80($2_1 | 0);
   }
   HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 92 | 0) >> 0] = 1;
  $383($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $443($0_1) {
  $0_1 = $0_1 | 0;
  $80($442($0_1 | 0) | 0 | 0);
 }
 
 function $444($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $4_1 = 0, $7_1 = 0, $12_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 56 | 0) >> 2] = $7_1;
  HEAP32[($0_1 + 60 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 64 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = ($2_1 << 2 | 0) + -4 | 0;
   label$2 : while (1) {
    $4_1 = HEAP32[((HEAP32[($0_1 + 164 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($4_1, $1_1);
    $3_1 = $3_1 + -4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP8[($0_1 + 52 | 0) >> 0] = 1;
 }
 
 function $445($0_1) {
  $0_1 = $0_1 | 0;
  return 11313 | 0;
 }
 
 function $446($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  HEAPF32[($0_1 + 16 | 0) >> 2] = $1_1;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = ($2_1 << 2 | 0) + -4 | 0;
   label$2 : while (1) {
    $4_1 = HEAP32[((HEAP32[($0_1 + 164 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($4_1, $1_1);
    $3_1 = $3_1 + -4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP8[($0_1 + 52 | 0) >> 0] = 1;
 }
 
 function $447($0_1) {
  $0_1 = $0_1 | 0;
  return 64 | 0;
 }
 
 function $448($0_1) {
  $0_1 = $0_1 | 0;
  var $12_1 = 0, $6_1 = Math_fround(0), $14_1 = 0, $2_1 = 0, $9_1 = Math_fround(0), $11_1 = Math_fround(0), $1_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $3_1 = 0, $13_1 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = 0;
  i64toi32_i32$0 = 2139095039;
  HEAP32[($0_1 + 20 | 0) >> 2] = 2139095039;
  HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 44 | 0) >> 2] = -8388609;
  $1_1 = $0_1 + 36 | 0;
  i64toi32_i32$0 = -8388609;
  HEAP32[$1_1 >> 2] = -8388609;
  HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 2139095039;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = $0_1 + 20 | 0;
   $4_1 = ($2_1 << 2 | 0) + -4 | 0;
   $5_1 = HEAP32[($0_1 + 164 | 0) >> 2] | 0;
   $6_1 = Math_fround(3402823466385288598117041.0e14);
   $7_1 = Math_fround(-3402823466385288598117041.0e14);
   $8_1 = Math_fround(-3402823466385288598117041.0e14);
   $9_1 = Math_fround(-3402823466385288598117041.0e14);
   $10_1 = Math_fround(3402823466385288598117041.0e14);
   $11_1 = Math_fround(3402823466385288598117041.0e14);
   label$2 : while (1) {
    $2_1 = $2_1 + -1 | 0;
    label$3 : {
     $12_1 = HEAP32[($5_1 + $4_1 | 0) >> 2] | 0;
     if (!(HEAPU8[($12_1 + 52 | 0) >> 0] | 0)) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$12_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($12_1);
     HEAP8[($12_1 + 52 | 0) >> 0] = 0;
     $7_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
     $8_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
     $6_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
     $10_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
     $5_1 = HEAP32[($0_1 + 164 | 0) >> 2] | 0;
     $9_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
    }
    $12_1 = HEAP32[($5_1 + $4_1 | 0) >> 2] | 0;
    $13_1 = Math_fround(HEAPF32[($12_1 + 20 | 0) >> 2]);
    $11_1 = $11_1 > $13_1 ? $13_1 : $11_1;
    HEAPF32[($0_1 + 20 | 0) >> 2] = $11_1;
    $14_1 = $12_1 + 20 | 0;
    $15_1 = HEAP32[(($10_1 > Math_fround(HEAPF32[($12_1 + 24 | 0) >> 2]) ? $14_1 : $3_1) + 4 | 0) >> 2] | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = $15_1;
    $16_1 = HEAP32[(($6_1 > Math_fround(HEAPF32[($12_1 + 28 | 0) >> 2]) ? $14_1 : $3_1) + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $16_1;
    $14_1 = $12_1 + 36 | 0;
    $6_1 = Math_fround(HEAPF32[$14_1 >> 2]);
    $9_1 = $9_1 < $6_1 ? $6_1 : $9_1;
    HEAPF32[($0_1 + 36 | 0) >> 2] = $9_1;
    $17_1 = HEAP32[(($8_1 < Math_fround(HEAPF32[($12_1 + 40 | 0) >> 2]) ? $14_1 : $1_1) + 4 | 0) >> 2] | 0;
    HEAP32[($0_1 + 40 | 0) >> 2] = $17_1;
    $12_1 = HEAP32[(($7_1 < Math_fround(HEAPF32[($12_1 + 44 | 0) >> 2]) ? $14_1 : $1_1) + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $12_1;
    $10_1 = (wasm2js_scratch_store_i32(0, $15_1), wasm2js_scratch_load_f32());
    $6_1 = (wasm2js_scratch_store_i32(0, $16_1), wasm2js_scratch_load_f32());
    $8_1 = (wasm2js_scratch_store_i32(0, $17_1), wasm2js_scratch_load_f32());
    $7_1 = (wasm2js_scratch_store_i32(0, $12_1), wasm2js_scratch_load_f32());
    $4_1 = $4_1 + -4 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $449($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = ($1_1 << 2 | 0) + -4 | 0;
   label$2 : while (1) {
    $3_1 = HEAP32[((HEAP32[($0_1 + 164 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 72 | 0) >> 2] | 0]($3_1);
    $2_1 = $2_1 + -4 | 0;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  HEAP8[($0_1 + 52 | 0) >> 0] = 1;
 }
 
 function $450($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $451($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $452($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $453($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $454($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $455($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $456($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $457($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $458($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $459($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $460($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
 }
 
 function $461($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $462($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $463($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $464($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $465($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 11012;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 92 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = 0;
  HEAP8[($0_1 + 92 | 0) >> 0] = 1;
  $383($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $466($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $467($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $468($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $469($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0;
 }
 
 function $470($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $7_1 = 0, $4_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $12_1 = Math_fround(0), $11_1 = Math_fround(0), $13_1 = Math_fround(0), $10_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0);
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 72 | 0) >> 2] = 1008981770;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, $1_1, $3_1 + 8 | 0);
  $4_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
  $0_1 = $3_1 + 40 | 0;
  $1_1 = ($3_1 + 8 | 0) + 16 | 0;
  $5_1 = Math_fround(HEAPF32[(($3_1 + 8 | 0) + 20 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[(($3_1 + 8 | 0) + 36 | 0) >> 2]);
  $7_1 = $5_1 > $6_1;
  $8_1 = $4_1 > Math_fround(HEAPF32[(($7_1 ? $0_1 : $1_1) + 4 | 0) >> 2]);
  $9_1 = $8_1 ? 36 : 4;
  $10_1 = Math_fround(HEAPF32[(($3_1 + 8 | 0) + ($7_1 ? $9_1 : $8_1 ? 20 : $9_1) | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[(($3_1 + 8 | 0) + 24 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[(($3_1 + 8 | 0) + 40 | 0) >> 2]);
  $7_1 = $12_1 > $13_1;
  $8_1 = $11_1 > Math_fround(HEAPF32[(($7_1 ? $0_1 : $1_1) + 8 | 0) >> 2]);
  $9_1 = $8_1 ? 40 : 8;
  $14_1 = Math_fround(HEAPF32[(($3_1 + 8 | 0) + ($7_1 ? $9_1 : $8_1 ? 24 : $9_1) | 0) >> 2]);
  $7_1 = $5_1 < $6_1;
  $8_1 = $4_1 < Math_fround(HEAPF32[(($7_1 ? $0_1 : $1_1) + 4 | 0) >> 2]);
  $9_1 = $8_1 ? 36 : 4;
  $15_1 = Math_fround(HEAPF32[(($3_1 + 8 | 0) + ($7_1 ? $9_1 : $8_1 ? 20 : $9_1) | 0) >> 2]);
  $7_1 = $12_1 < $13_1;
  $0_1 = $11_1 < Math_fround(HEAPF32[(($7_1 ? $0_1 : $1_1) + 8 | 0) >> 2]);
  $1_1 = $0_1 ? 40 : 8;
  $11_1 = Math_fround(HEAPF32[(($3_1 + 8 | 0) + ($7_1 ? $1_1 : $0_1 ? 24 : $1_1) | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
  $0_1 = $6_1 > $5_1;
  $1_1 = $12_1 > ($0_1 ? $5_1 : $6_1);
  $7_1 = $1_1 << 5 | 0;
  $13_1 = Math_fround(HEAPF32[(($3_1 + 8 | 0) + ($0_1 ? $7_1 : $1_1 ? 16 : $7_1) | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($3_1 + 72 | 0) >> 2]);
  $0_1 = $6_1 < $5_1;
  $1_1 = $12_1 < ($0_1 ? $5_1 : $6_1);
  $7_1 = $1_1 << 5 | 0;
  HEAPF32[($2_1 + 16 | 0) >> 2] = Math_fround($4_1 + Math_fround(HEAPF32[(($3_1 + 8 | 0) + ($0_1 ? $7_1 : $1_1 ? 16 : $7_1) | 0) >> 2]));
  HEAPF32[$2_1 >> 2] = Math_fround($13_1 - $4_1);
  HEAPF32[($2_1 + 24 | 0) >> 2] = Math_fround($4_1 + $11_1);
  HEAPF32[($2_1 + 20 | 0) >> 2] = Math_fround($4_1 + $15_1);
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($14_1 - $4_1);
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($10_1 - $4_1);
  global$0 = $3_1 + 80 | 0;
 }
 
 function $471($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = Math_fround(0), $3_1 = 0, $4_1 = 0;
  $1_1 = (HEAP32[($0_1 + 52 | 0) >> 2] | 0) + Math_imul(HEAP32[($0_1 + 56 | 0) >> 2] | 0, $1_1) | 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($0_1 + 64 | 0) >> 2] | 0 | 0) != (3 | 0)) {
     break label$2
    }
    $3_1 = HEAPU16[($1_1 + 4 | 0) >> 1] | 0;
    $4_1 = HEAPU16[($1_1 + 2 | 0) >> 1] | 0;
    $1_1 = HEAPU16[$1_1 >> 1] | 0;
    break label$1;
   }
   $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $1_1 = HEAP32[$1_1 >> 2] | 0;
  }
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($0_1 + 48 | 0) >> 2] | 0, $1_1) | 0;
  label$3 : {
   label$4 : {
    if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$4
    }
    HEAPF32[$2_1 >> 2] = Math_fround(+HEAPF64[$1_1 >> 3] * +Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
    HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround(+HEAPF64[($1_1 + 8 | 0) >> 3] * +Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]));
    $5_1 = Math_fround(+HEAPF64[($1_1 + 16 | 0) >> 3] * +Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]));
    break label$3;
   }
   HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
   HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]));
   $5_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]));
  }
  HEAPF32[($2_1 + 8 | 0) >> 2] = $5_1;
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($0_1 + 48 | 0) >> 2] | 0, $4_1) | 0;
  label$5 : {
   label$6 : {
    if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$6
    }
    HEAPF32[($2_1 + 16 | 0) >> 2] = Math_fround(+HEAPF64[$1_1 >> 3] * +Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
    HEAPF32[($2_1 + 20 | 0) >> 2] = Math_fround(+HEAPF64[($1_1 + 8 | 0) >> 3] * +Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]));
    $5_1 = Math_fround(+HEAPF64[($1_1 + 16 | 0) >> 3] * +Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]));
    break label$5;
   }
   HEAPF32[($2_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
   HEAPF32[($2_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]));
   $5_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]));
  }
  HEAPF32[($2_1 + 24 | 0) >> 2] = $5_1;
  $1_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($0_1 + 48 | 0) >> 2] | 0, $3_1) | 0;
  label$7 : {
   label$8 : {
    if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$8
    }
    HEAPF32[($2_1 + 32 | 0) >> 2] = Math_fround(+HEAPF64[$1_1 >> 3] * +Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
    HEAPF32[($2_1 + 36 | 0) >> 2] = Math_fround(+HEAPF64[($1_1 + 8 | 0) >> 3] * +Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]));
    $5_1 = Math_fround(+HEAPF64[($1_1 + 16 | 0) >> 3] * +Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]));
    break label$7;
   }
   HEAPF32[($2_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
   HEAPF32[($2_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]));
   $5_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]));
  }
  HEAPF32[($2_1 + 40 | 0) >> 2] = $5_1;
  HEAP32[($2_1 + 64 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
 }
 
 function $472($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $473($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = -1;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP8[($0_1 + 36 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $474($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $475($0_1 | 0, $1_1 | 0);
  }
  $80(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  i64toi32_i32$0 = -1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  label$2 : {
   $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   label$3 : {
    if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
     break label$3
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 36 | 0) >> 0] = 1;
  return $0_1 | 0;
 }
 
 function $475($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!(HEAP32[($1_1 + 40 | 0) >> 2] | 0)) {
    break label$1
   }
   $475($0_1 | 0, HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0);
   $475($0_1 | 0, HEAP32[($1_1 + 40 | 0) >> 2] | 0 | 0);
  }
  label$2 : {
   if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  $80(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $476($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $475($0_1 | 0, $1_1 | 0);
  }
  $80(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  i64toi32_i32$0 = -1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  label$2 : {
   $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   label$3 : {
    if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
     break label$3
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP8[($0_1 + 36 | 0) >> 0] = 1;
 }
 
 function $477($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $7_1 = 0, $2_1 = 0, $10_1 = 0, $8_1 = 0, $5_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $12$hi = 0, $13$hi = 0, $14$hi = 0, $15$hi = 0, $128_1 = 0, $133_1 = 0, $138_1 = 0, $141_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   if (($1_1 | 0) > (-1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  }
  label$2 : {
   if (($1_1 | 0) < (1 | 0)) {
    break label$2
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$3_1) {
    break label$2
   }
   label$3 : while (1) {
    label$4 : {
     $4_1 = $3_1 + 40 | 0;
     if (!(HEAP32[$4_1 >> 2] | 0)) {
      break label$4
     }
     $5_1 = 0;
     label$5 : while (1) {
      label$6 : {
       label$7 : {
        $6_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
        if ($6_1 >>> 0 > $3_1 >>> 0) {
         break label$7
        }
        $6_1 = $3_1;
        break label$6;
       }
       $7_1 = HEAP32[($6_1 + 40 | 0) >> 2] | 0;
       $8_1 = ($7_1 | 0) == ($3_1 | 0);
       $9_1 = (($7_1 | 0) != ($3_1 | 0)) << 2 | 0;
       $10_1 = HEAP32[(($6_1 + $9_1 | 0) + 36 | 0) >> 2] | 0;
       label$8 : {
        label$9 : {
         $7_1 = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
         if ($7_1) {
          break label$9
         }
         $11_1 = $0_1;
         break label$8;
        }
        $11_1 = ($7_1 + (((HEAP32[($7_1 + 40 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) << 2 | 0) | 0) + 36 | 0;
       }
       HEAP32[$11_1 >> 2] = $3_1;
       HEAP32[($10_1 + 32 | 0) >> 2] = $3_1;
       HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 32 | 0) >> 2] = $7_1;
       HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
       HEAP32[($6_1 + 40 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
       HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 32 | 0) >> 2] = $6_1;
       HEAP32[((HEAP32[$4_1 >> 2] | 0) + 32 | 0) >> 2] = $6_1;
       $4_1 = $3_1 + 36 | 0;
       HEAP32[($4_1 + ($8_1 << 2 | 0) | 0) >> 2] = $6_1;
       HEAP32[($4_1 + $9_1 | 0) >> 2] = $10_1;
       $4_1 = $6_1 + 24 | 0;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $12_1 = i64toi32_i32$0;
       $12$hi = i64toi32_i32$1;
       i64toi32_i32$0 = $2_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $12_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $7_1 = $6_1 + 16 | 0;
       i64toi32_i32$2 = $7_1;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $13_1 = i64toi32_i32$1;
       $13$hi = i64toi32_i32$0;
       i64toi32_i32$1 = $2_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $13_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $10_1 = $6_1 + 8 | 0;
       i64toi32_i32$2 = $10_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $14_1 = i64toi32_i32$0;
       $14$hi = i64toi32_i32$1;
       i64toi32_i32$0 = $2_1 + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $14_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$1 = HEAP32[$6_1 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$1;
       $15$hi = i64toi32_i32$0;
       i64toi32_i32$1 = $2_1;
       HEAP32[i64toi32_i32$1 >> 2] = $15_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $8_1 = $3_1 + 24 | 0;
       i64toi32_i32$2 = $8_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $128_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $4_1;
       HEAP32[i64toi32_i32$0 >> 2] = $128_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       $4_1 = $3_1 + 16 | 0;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $133_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $7_1;
       HEAP32[i64toi32_i32$1 >> 2] = $133_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $7_1 = $3_1 + 8 | 0;
       i64toi32_i32$2 = $7_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $138_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $10_1;
       HEAP32[i64toi32_i32$0 >> 2] = $138_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $141_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $6_1;
       HEAP32[i64toi32_i32$1 >> 2] = $141_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$1 = $8_1;
       HEAP32[i64toi32_i32$1 >> 2] = $12_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = $13$hi;
       i64toi32_i32$1 = $4_1;
       HEAP32[i64toi32_i32$1 >> 2] = $13_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = $14$hi;
       i64toi32_i32$1 = $7_1;
       HEAP32[i64toi32_i32$1 >> 2] = $14_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$1 = $3_1;
       HEAP32[i64toi32_i32$1 >> 2] = $15_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      }
      $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) >>> $5_1 | 0;
      $5_1 = ($5_1 + 1 | 0) & 31 | 0;
      $3_1 = HEAP32[(($6_1 + (($3_1 & 1 | 0) << 2 | 0) | 0) + 36 | 0) >> 2] | 0;
      $4_1 = $3_1 + 40 | 0;
      if (HEAP32[$4_1 >> 2] | 0) {
       continue label$5
      }
      break label$5;
     };
    }
    label$10 : {
     label$11 : {
      if ($478($0_1 | 0, $3_1 | 0) | 0) {
       break label$11
      }
      $6_1 = 0;
      break label$10;
     }
     $6_1 = HEAP32[$0_1 >> 2] | 0;
    }
    $479($0_1 | 0, $6_1 | 0, $3_1 | 0);
    HEAP32[($0_1 + 16 | 0) >> 2] = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    $1_1 = $1_1 + -1 | 0;
    if (!$1_1) {
     break label$2
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
    continue label$3;
   };
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $478($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $6_1 = Math_fround(0), $2_1 = 0, $3_1 = 0, $13_1 = Math_fround(0), $5_1 = Math_fround(0), $12_1 = 0, $15_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), $11_1 = Math_fround(0), $16_1 = Math_fround(0), $4_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $14_1 = Math_fround(0), $17_1 = Math_fround(0);
  label$1 : {
   if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = 0;
   return 0 | 0;
  }
  $2_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
  $3_1 = HEAP32[(($2_1 + (((HEAP32[($2_1 + 40 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) << 2 | 0) | 0) + 36 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     $1_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$4
     }
     HEAP32[(($1_1 + (((HEAP32[($1_1 + 40 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) << 2 | 0) | 0) + 36 | 0) >> 2] = $3_1;
     HEAP32[($3_1 + 32 | 0) >> 2] = $1_1;
     $80(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
     HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
     label$5 : while (1) {
      $4_1 = Math_fround(HEAPF32[$1_1 >> 2]);
      $2_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      $5_1 = Math_fround(HEAPF32[$2_1 >> 2]);
      $3_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      $6_1 = Math_fround(HEAPF32[$3_1 >> 2]);
      $7_1 = $5_1 < $6_1 ? $5_1 : $6_1;
      HEAPF32[$1_1 >> 2] = $7_1;
      $8_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
      $5_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
      $6_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
      $9_1 = $5_1 > $6_1 ? $5_1 : $6_1;
      HEAPF32[($1_1 + 16 | 0) >> 2] = $9_1;
      $10_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
      $5_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
      $6_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
      $11_1 = $5_1 < $6_1 ? $5_1 : $6_1;
      HEAPF32[($1_1 + 4 | 0) >> 2] = $11_1;
      $12_1 = $1_1 + 20 | 0;
      $5_1 = Math_fround(HEAPF32[$12_1 >> 2]);
      $6_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
      $13_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
      $6_1 = $6_1 > $13_1 ? $6_1 : $13_1;
      HEAPF32[$12_1 >> 2] = $6_1;
      $14_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
      $13_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
      $15_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
      $16_1 = $13_1 < $15_1 ? $13_1 : $15_1;
      HEAPF32[($1_1 + 8 | 0) >> 2] = $16_1;
      $12_1 = $1_1 + 24 | 0;
      $17_1 = Math_fround(HEAPF32[$12_1 >> 2]);
      $13_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
      $15_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
      $13_1 = $13_1 > $15_1 ? $13_1 : $15_1;
      HEAPF32[$12_1 >> 2] = $13_1;
      label$6 : {
       if ($5_1 != $6_1) {
        break label$6
       }
       if ($8_1 != $9_1) {
        break label$6
       }
       if ($4_1 != $7_1) {
        break label$6
       }
       if ($10_1 != $11_1) {
        break label$6
       }
       if ($14_1 != $16_1) {
        break label$6
       }
       if ($17_1 == $13_1) {
        break label$2
       }
      }
      $1_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      if ($1_1) {
       continue label$5
      }
      break label$3;
     };
    }
    HEAP32[($3_1 + 32 | 0) >> 2] = 0;
    HEAP32[$0_1 >> 2] = $3_1;
    $80(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
   }
   $1_1 = HEAP32[$0_1 >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $479($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = Math_fround(0), $4_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $36_1 = 0;
  label$1 : {
   if (HEAP32[$0_1 >> 2] | 0) {
    break label$1
   }
   HEAP32[($2_1 + 32 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = $2_1;
   return;
  }
  label$2 : {
   $3_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$2
   }
   $4_1 = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) + Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]));
   $5_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]));
   $6_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]));
   label$3 : while (1) {
    $36_1 = $1_1 + 36 | 0;
    $1_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
    $1_1 = HEAP32[($36_1 + ((Math_fround(Math_fround(Math_fround(Math_abs(Math_fround($4_1 - Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) + Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]))))) + Math_fround(Math_abs(Math_fround($6_1 - Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2])))))) + Math_fround(Math_abs(Math_fround($5_1 - Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2])))))) < Math_fround(Math_fround(Math_fround(Math_abs(Math_fround($4_1 - Math_fround(Math_fround(HEAPF32[$3_1 >> 2]) + Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]))))) + Math_fround(Math_abs(Math_fround($6_1 - Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])))))) + Math_fround(Math_abs(Math_fround($5_1 - Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2])))))) ^ 1 | 0) << 2 | 0) | 0) >> 2] | 0;
    $3_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
    if ($3_1) {
     continue label$3
    }
    break label$3;
   };
  }
  $7_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
  label$4 : {
   label$5 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$5
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    break label$4;
   }
   $3_1 = $79(44 | 0, 16 | 0) | 0;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 40 | 0) >> 2] = 0;
   i64toi32_i32$1 = $3_1 + 32 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $3_1 + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $3_1 + 16 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $3_1 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = 0;
  HEAP32[($3_1 + 40 | 0) >> 2] = i64toi32_i32$0;
  $4_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $5_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  HEAPF32[$3_1 >> 2] = $4_1 < $5_1 ? $4_1 : $5_1;
  $4_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  HEAPF32[($3_1 + 16 | 0) >> 2] = $4_1 > $5_1 ? $4_1 : $5_1;
  $4_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  HEAPF32[($3_1 + 4 | 0) >> 2] = $4_1 < $5_1 ? $4_1 : $5_1;
  $4_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  HEAPF32[($3_1 + 20 | 0) >> 2] = $4_1 > $5_1 ? $4_1 : $5_1;
  $4_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAPF32[($3_1 + 8 | 0) >> 2] = $4_1 < $5_1 ? $4_1 : $5_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = $7_1;
  $4_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  HEAPF32[($3_1 + 24 | 0) >> 2] = $4_1 > $5_1 ? $4_1 : $5_1;
  label$6 : {
   label$7 : {
    if (!$7_1) {
     break label$7
    }
    HEAP32[(($7_1 + (((HEAP32[((HEAP32[($1_1 + 32 | 0) >> 2] | 0) + 40 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) << 2 | 0) | 0) + 36 | 0) >> 2] = $3_1;
    HEAP32[($3_1 + 36 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    HEAP32[($3_1 + 40 | 0) >> 2] = $2_1;
    HEAP32[($2_1 + 32 | 0) >> 2] = $3_1;
    $4_1 = Math_fround(HEAPF32[$3_1 >> 2]);
    label$8 : while (1) {
     $1_1 = $3_1;
     label$9 : {
      $3_1 = $7_1;
      if (Math_fround(HEAPF32[$3_1 >> 2]) <= $4_1 ^ 1 | 0) {
       break label$9
      }
      if (Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) <= Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) ^ 1 | 0) {
       break label$9
      }
      if (Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) <= Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) ^ 1 | 0) {
       break label$9
      }
      if (Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) >= Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]) ^ 1 | 0) {
       break label$9
      }
      if (Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]) >= Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]) ^ 1 | 0) {
       break label$9
      }
      if (Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) >= Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2])) {
       break label$6
      }
     }
     $1_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
     $4_1 = Math_fround(HEAPF32[$1_1 >> 2]);
     $7_1 = HEAP32[($3_1 + 40 | 0) >> 2] | 0;
     $5_1 = Math_fround(HEAPF32[$7_1 >> 2]);
     $4_1 = $4_1 < $5_1 ? $4_1 : $5_1;
     HEAPF32[$3_1 >> 2] = $4_1;
     $5_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
     $6_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
     HEAPF32[($3_1 + 16 | 0) >> 2] = $5_1 > $6_1 ? $5_1 : $6_1;
     $5_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
     $6_1 = Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]);
     HEAPF32[($3_1 + 4 | 0) >> 2] = $5_1 < $6_1 ? $5_1 : $6_1;
     $5_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
     $6_1 = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
     HEAPF32[($3_1 + 20 | 0) >> 2] = $5_1 > $6_1 ? $5_1 : $6_1;
     $5_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
     $6_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
     HEAPF32[($3_1 + 8 | 0) >> 2] = $5_1 < $6_1 ? $5_1 : $6_1;
     $5_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
     $6_1 = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
     HEAPF32[($3_1 + 24 | 0) >> 2] = $5_1 > $6_1 ? $5_1 : $6_1;
     $7_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
     if ($7_1) {
      continue label$8
     }
     break label$6;
    };
   }
   HEAP32[($3_1 + 36 | 0) >> 2] = $1_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($3_1 + 40 | 0) >> 2] = $2_1;
   HEAP32[$0_1 >> 2] = $3_1;
   HEAP32[($2_1 + 32 | 0) >> 2] = $3_1;
  }
 }
 
 function $480($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $28_1 = 0, $33_1 = 0, $38_1 = 0, $43_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    break label$1;
   }
   $3_1 = $79(44 | 0, 16 | 0) | 0;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = 0;
   i64toi32_i32$1 = i64toi32_i32$1 + 32 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $3_1 + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $3_1 + 16 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $3_1 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  HEAP32[($3_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 0;
  HEAP32[($3_1 + 40 | 0) >> 2] = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[i64toi32_i32$0 >> 2] = $28_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $33_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $33_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $38_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $38_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $43_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $43_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $479($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $3_1 | 0);
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 1 | 0;
  return $3_1 | 0;
 }
 
 function $481($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $29_1 = 0, $34_1 = 0, $39_1 = 0, $44_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = $478($0_1 | 0, $1_1 | 0) | 0;
    if ($3_1) {
     break label$2
    }
    $3_1 = 0;
    break label$1;
   }
   label$3 : {
    $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($4_1 | 0) < (0 | 0)) {
     break label$3
    }
    if (!$4_1) {
     break label$1
    }
    label$4 : while (1) {
     $5_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$1
     }
     $3_1 = $5_1;
     $4_1 = $4_1 + -1 | 0;
     if (!$4_1) {
      break label$1
     }
     continue label$4;
    };
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
  }
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $29_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[i64toi32_i32$0 >> 2] = $29_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $34_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $34_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $39_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $39_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $44_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $44_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $479($0_1 | 0, $3_1 | 0, $1_1 | 0);
 }
 
 function $482($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = Math_fround($4_1);
  var $7_1 = 0, i64toi32_i32$1 = 0, $5_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = Math_fround(0), $11_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $159_1 = 0, $163_1 = 0, $168_1 = 0, $173_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $5_1 = Math_fround(HEAPF32[$2_1 >> 2]);
     if (Math_fround(HEAPF32[$1_1 >> 2]) <= $5_1) {
      break label$3
     }
     $6_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
     break label$2;
    }
    $6_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    if (Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) <= $6_1 ^ 1 | 0) {
     break label$2
    }
    if (Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) <= Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) ^ 1 | 0) {
     break label$2
    }
    if (Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]) >= Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]) ^ 1 | 0) {
     break label$2
    }
    if (Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]) >= Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]) ^ 1 | 0) {
     break label$2
    }
    $7_1 = 0;
    if (Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]) >= Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2])) {
     break label$1
    }
   }
   $6_1 = Math_fround($6_1 - $4_1);
   HEAPF32[($2_1 + 4 | 0) >> 2] = $6_1;
   $5_1 = Math_fround($5_1 - $4_1);
   HEAPF32[$2_1 >> 2] = $5_1;
   $8_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) - $4_1);
   HEAPF32[($2_1 + 8 | 0) >> 2] = $8_1;
   $9_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]) + $4_1);
   HEAPF32[($2_1 + 16 | 0) >> 2] = $9_1;
   $7_1 = $2_1 + 20 | 0;
   $10_1 = Math_fround(Math_fround(HEAPF32[$7_1 >> 2]) + $4_1);
   HEAPF32[$7_1 >> 2] = $10_1;
   $11_1 = $2_1 + 24 | 0;
   $4_1 = Math_fround(Math_fround(HEAPF32[$11_1 >> 2]) + $4_1);
   HEAPF32[$11_1 >> 2] = $4_1;
   $12_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $7_1 = $12_1 > Math_fround(0.0);
   HEAPF32[($2_1 + ($7_1 << 4 | 0) | 0) >> 2] = Math_fround(($7_1 ? $9_1 : $5_1) + $12_1);
   $5_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
   $7_1 = $5_1 > Math_fround(0.0);
   HEAPF32[($2_1 + ($7_1 ? 20 : 4) | 0) >> 2] = Math_fround(($7_1 ? $10_1 : $6_1) + $5_1);
   $5_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   $3_1 = $5_1 > Math_fround(0.0);
   HEAPF32[($2_1 + ($3_1 ? 24 : 8) | 0) >> 2] = Math_fround(($3_1 ? $4_1 : $8_1) + $5_1);
   label$4 : {
    label$5 : {
     $3_1 = $478($0_1 | 0, $1_1 | 0) | 0;
     if ($3_1) {
      break label$5
     }
     $3_1 = 0;
     break label$4;
    }
    label$6 : {
     $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (($7_1 | 0) < (0 | 0)) {
      break label$6
     }
     if (!$7_1) {
      break label$4
     }
     label$7 : while (1) {
      $13_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
      if (!$13_1) {
       break label$4
      }
      $3_1 = $13_1;
      $7_1 = $7_1 + -1 | 0;
      if (!$7_1) {
       break label$4
      }
      continue label$7;
     };
    }
    $3_1 = HEAP32[$0_1 >> 2] | 0;
   }
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $159_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[$1_1 >> 2] = $159_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $163_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $163_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1 + 16 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $168_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1 + 16 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $168_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $173_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $173_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $479($0_1 | 0, $3_1 | 0, $1_1 | 0);
   $7_1 = 1;
  }
  return $7_1 | 0;
 }
 
 function $483($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $478($0_1 | 0, $1_1 | 0) | 0;
  $80(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -1 | 0;
 }
 
 function $484($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $485($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $486($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 1 | 0;
 }
 
 function $487($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 1 | 0;
 }
 
 function $488($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0.0, $2_1 = 0.0;
  $1_1 = $0_1 * $0_1;
  $2_1 = $1_1 * $0_1;
  return Math_fround(Math_fround($2_1 * ($1_1 * $1_1) * ($1_1 * 2.718311493989822e-06 + -1.9839334836096632e-04) + ($2_1 * ($1_1 * .008333329385889463 + -.16666666641626524) + $0_1)));
 }
 
 function $489($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0.0;
  $0_1 = $0_1 * $0_1;
  $1_1 = $0_1 * $0_1;
  return Math_fround(Math_fround($0_1 * -.499999997251031 + 1.0 + $1_1 * .04166662332373906 + $0_1 * $1_1 * ($0_1 * 2.439044879627741e-05 + -.001388676377460993)));
 }
 
 function $490($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $35_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     $2_1 = $1_1 + -1023 | 0;
     if (($2_1 | 0) >= (1024 | 0)) {
      break label$3
     }
     $1_1 = $2_1;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   label$4 : {
    $2_1 = $1_1 + 969 | 0;
    if (($2_1 | 0) <= (-1023 | 0)) {
     break label$4
    }
    $1_1 = $2_1;
    break label$1;
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   $1_1 = (($1_1 | 0) > (-2960 | 0) ? $1_1 : -2960) + 1938 | 0;
  }
  $35_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $9_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $9_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $9_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($35_1 * +wasm2js_scratch_load_f64());
 }
 
 function $491($0_1) {
  $0_1 = Math_fround($0_1);
  return Math_fround(Math_fround(Math_abs($0_1)));
 }
 
 function $492($0_1) {
  $0_1 = Math_fround($0_1);
  return Math_fround(Math_fround(Math_sqrt($0_1)));
 }
 
 function $493($0_1) {
  $0_1 = +$0_1;
  return +Math_floor($0_1);
 }
 
 function $494($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $13_1 = 0.0, $7_1 = 0, $6_1 = 0, $5_1 = 0, $12_1 = 0, $11_1 = 0, $15_1 = 0, $21_1 = 0.0, $14_1 = 0, $24_1 = 0, $10_1 = 0, $22_1 = 0, $9_1 = 0, $25_1 = 0.0, $26_1 = 0.0, $8_1 = 0, $17_1 = 0, $23_1 = 0, $16_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $213_1 = 0, $216_1 = 0, $366_1 = 0, i64toi32_i32$1 = 0;
  $5_1 = global$0 - 560 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  $7_1 = ($2_1 + -3 | 0 | 0) / (24 | 0) | 0;
  $8_1 = ($7_1 | 0) > (0 | 0) ? $7_1 : 0;
  $9_1 = $2_1 + Math_imul($8_1, -24) | 0;
  label$1 : {
   $10_1 = HEAP32[(($4_1 << 2 | 0) + 11360 | 0) >> 2] | 0;
   $2_1 = $3_1 + -1 | 0;
   if (($10_1 + $2_1 | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $11_1 = $10_1 + $3_1 | 0;
   $2_1 = $8_1 - $2_1 | 0;
   $12_1 = (($8_1 - $3_1 | 0) << 2 | 0) + 11380 | 0;
   $7_1 = $5_1 + 320 | 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (($2_1 | 0) >= (0 | 0)) {
       break label$4
      }
      $13_1 = 0.0;
      break label$3;
     }
     $13_1 = +(HEAP32[$12_1 >> 2] | 0 | 0);
    }
    HEAPF64[$7_1 >> 3] = $13_1;
    $7_1 = $7_1 + 8 | 0;
    $12_1 = $12_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    $11_1 = $11_1 + -1 | 0;
    if ($11_1) {
     continue label$2
    }
    break label$2;
   };
  }
  $14_1 = $9_1 + -24 | 0;
  $11_1 = (($3_1 << 3 | 0) + ($5_1 + 320 | 0) | 0) + -8 | 0;
  $15_1 = ($3_1 | 0) < (1 | 0);
  label$5 : while (1) {
   $13_1 = 0.0;
   label$6 : {
    if ($15_1) {
     break label$6
    }
    $2_1 = $0_1;
    $12_1 = $3_1;
    $7_1 = $11_1;
    label$7 : while (1) {
     $13_1 = $13_1 + +HEAPF64[$2_1 >> 3] * +HEAPF64[$7_1 >> 3];
     $2_1 = $2_1 + 8 | 0;
     $7_1 = $7_1 + -8 | 0;
     $12_1 = $12_1 + -1 | 0;
     if ($12_1) {
      continue label$7
     }
     break label$7;
    };
   }
   HEAPF64[($5_1 + ($6_1 << 3 | 0) | 0) >> 3] = $13_1;
   $11_1 = $11_1 + 8 | 0;
   $2_1 = ($6_1 | 0) < ($10_1 | 0);
   $6_1 = $6_1 + 1 | 0;
   if ($2_1) {
    continue label$5
   }
   break label$5;
  };
  $16_1 = 23 - $14_1 | 0;
  $17_1 = 24 - $14_1 | 0;
  $18_1 = (($10_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
  $19_1 = ($5_1 + 480 | 0) + -4 | 0;
  $20_1 = $5_1 + -8 | 0;
  $6_1 = $10_1;
  label$8 : {
   label$9 : while (1) {
    $2_1 = $6_1 << 3 | 0;
    $13_1 = +HEAPF64[($5_1 + $2_1 | 0) >> 3];
    label$10 : {
     $15_1 = ($6_1 | 0) < (1 | 0);
     if ($15_1) {
      break label$10
     }
     $2_1 = $20_1 + $2_1 | 0;
     $7_1 = $5_1 + 480 | 0;
     $12_1 = $6_1;
     label$11 : while (1) {
      label$12 : {
       label$13 : {
        $21_1 = $13_1 * 5.960464477539063e-08;
        if (!(Math_abs($21_1) < 2147483648.0)) {
         break label$13
        }
        $11_1 = ~~$21_1;
        break label$12;
       }
       $11_1 = -2147483648;
      }
      label$14 : {
       label$15 : {
        $21_1 = +($11_1 | 0);
        $13_1 = $13_1 + $21_1 * -16777216.0;
        if (!(Math_abs($13_1) < 2147483648.0)) {
         break label$15
        }
        $11_1 = ~~$13_1;
        break label$14;
       }
       $11_1 = -2147483648;
      }
      HEAP32[$7_1 >> 2] = $11_1;
      $7_1 = $7_1 + 4 | 0;
      $13_1 = +HEAPF64[$2_1 >> 3] + $21_1;
      $2_1 = $2_1 + -8 | 0;
      $12_1 = $12_1 + -1 | 0;
      if ($12_1) {
       continue label$11
      }
      break label$11;
     };
    }
    label$16 : {
     label$17 : {
      $13_1 = +$490(+$13_1, $14_1 | 0);
      $13_1 = $13_1 + +$493(+($13_1 * .125)) * -8.0;
      if (!(Math_abs($13_1) < 2147483648.0)) {
       break label$17
      }
      $22_1 = ~~$13_1;
      break label$16;
     }
     $22_1 = -2147483648;
    }
    $13_1 = $13_1 - +($22_1 | 0);
    label$18 : {
     label$19 : {
      label$20 : {
       label$21 : {
        label$22 : {
         $23_1 = ($14_1 | 0) < (1 | 0);
         if ($23_1) {
          break label$22
         }
         $2_1 = (($6_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
         $213_1 = $2_1;
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         $216_1 = $2_1;
         $2_1 = $2_1 >> $17_1 | 0;
         $7_1 = $216_1 - ($2_1 << $17_1 | 0) | 0;
         HEAP32[$213_1 >> 2] = $7_1;
         $24_1 = $7_1 >> $16_1 | 0;
         $22_1 = $2_1 + $22_1 | 0;
         break label$21;
        }
        if ($14_1) {
         break label$20
        }
        $24_1 = (HEAP32[((($6_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($24_1 | 0) < (1 | 0)) {
        break label$18
       }
       break label$19;
      }
      $24_1 = 2;
      if (!($13_1 >= .5 ^ 1 | 0)) {
       break label$19
      }
      $24_1 = 0;
      break label$18;
     }
     label$23 : {
      label$24 : {
       if (!$15_1) {
        break label$24
       }
       $15_1 = 0;
       break label$23;
      }
      $15_1 = 0;
      $2_1 = $5_1 + 480 | 0;
      $11_1 = $6_1;
      label$25 : while (1) {
       $7_1 = HEAP32[$2_1 >> 2] | 0;
       $12_1 = 16777215;
       label$26 : {
        label$27 : {
         label$28 : {
          if ($15_1) {
           break label$28
          }
          if (!$7_1) {
           break label$27
          }
          $15_1 = 1;
          $12_1 = 16777216;
         }
         HEAP32[$2_1 >> 2] = $12_1 - $7_1 | 0;
         break label$26;
        }
        $15_1 = 0;
       }
       $2_1 = $2_1 + 4 | 0;
       $11_1 = $11_1 + -1 | 0;
       if ($11_1) {
        continue label$25
       }
       break label$25;
      };
     }
     label$29 : {
      if ($23_1) {
       break label$29
      }
      $2_1 = $14_1 + -1 | 0;
      if ($2_1 >>> 0 > 1 >>> 0) {
       break label$29
      }
      label$30 : {
       switch ($2_1 | 0) {
       default:
        $2_1 = (($6_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
        HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) & 8388607 | 0;
        break label$29;
       case 1:
        break label$30;
       };
      }
      $2_1 = (($6_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) & 4194303 | 0;
     }
     $22_1 = $22_1 + 1 | 0;
     if (($24_1 | 0) != (2 | 0)) {
      break label$18
     }
     $13_1 = 1.0 - $13_1;
     $24_1 = 2;
     if (!$15_1) {
      break label$18
     }
     $13_1 = $13_1 - +$490(+(1.0), $14_1 | 0);
    }
    label$32 : {
     if ($13_1 != 0.0) {
      break label$32
     }
     label$33 : {
      if (($6_1 | 0) <= ($10_1 | 0)) {
       break label$33
      }
      $2_1 = $19_1 + ($6_1 << 2 | 0) | 0;
      $7_1 = 0;
      $12_1 = $6_1;
      label$34 : while (1) {
       $7_1 = HEAP32[$2_1 >> 2] | 0 | $7_1 | 0;
       $2_1 = $2_1 + -4 | 0;
       $12_1 = $12_1 + -1 | 0;
       if (($12_1 | 0) > ($10_1 | 0)) {
        continue label$34
       }
       break label$34;
      };
      if (!$7_1) {
       break label$33
      }
      $2_1 = (($5_1 + 480 | 0) + ($6_1 << 2 | 0) | 0) + -4 | 0;
      $9_1 = $14_1;
      label$35 : while (1) {
       $6_1 = $6_1 + -1 | 0;
       $9_1 = $9_1 + -24 | 0;
       $7_1 = HEAP32[$2_1 >> 2] | 0;
       $2_1 = $2_1 + -4 | 0;
       if (!$7_1) {
        continue label$35
       }
       break label$8;
      };
     }
     $2_1 = $18_1;
     $11_1 = $6_1;
     label$36 : while (1) {
      $11_1 = $11_1 + 1 | 0;
      $7_1 = HEAP32[$2_1 >> 2] | 0;
      $2_1 = $2_1 + -4 | 0;
      if (!$7_1) {
       continue label$36
      }
      break label$36;
     };
     $15_1 = ($5_1 + 320 | 0) + (($3_1 + $6_1 | 0) << 3 | 0) | 0;
     label$37 : while (1) {
      $366_1 = ($5_1 + 320 | 0) + (($6_1 + $3_1 | 0) << 3 | 0) | 0;
      $6_1 = $6_1 + 1 | 0;
      HEAPF64[$366_1 >> 3] = +(HEAP32[((($6_1 + $8_1 | 0) << 2 | 0) + 11376 | 0) >> 2] | 0 | 0);
      $13_1 = 0.0;
      label$38 : {
       if (($3_1 | 0) < (1 | 0)) {
        break label$38
       }
       $2_1 = $0_1;
       $7_1 = $15_1;
       $12_1 = $3_1;
       label$39 : while (1) {
        $13_1 = $13_1 + +HEAPF64[$2_1 >> 3] * +HEAPF64[$7_1 >> 3];
        $2_1 = $2_1 + 8 | 0;
        $7_1 = $7_1 + -8 | 0;
        $12_1 = $12_1 + -1 | 0;
        if ($12_1) {
         continue label$39
        }
        break label$39;
       };
      }
      HEAPF64[($5_1 + ($6_1 << 3 | 0) | 0) >> 3] = $13_1;
      $15_1 = $15_1 + 8 | 0;
      if (($6_1 | 0) < ($11_1 | 0)) {
       continue label$37
      }
      break label$37;
     };
     $6_1 = $11_1;
     continue label$9;
    }
    break label$9;
   };
   label$40 : {
    label$41 : {
     $13_1 = +$490(+$13_1, 0 - $14_1 | 0 | 0);
     if ($13_1 >= 16777216.0 ^ 1 | 0) {
      break label$41
     }
     $7_1 = $6_1 << 2 | 0;
     label$42 : {
      label$43 : {
       $21_1 = $13_1 * 5.960464477539063e-08;
       if (!(Math_abs($21_1) < 2147483648.0)) {
        break label$43
       }
       $2_1 = ~~$21_1;
       break label$42;
      }
      $2_1 = -2147483648;
     }
     $7_1 = ($5_1 + 480 | 0) + $7_1 | 0;
     label$44 : {
      label$45 : {
       $13_1 = $13_1 + +($2_1 | 0) * -16777216.0;
       if (!(Math_abs($13_1) < 2147483648.0)) {
        break label$45
       }
       $12_1 = ~~$13_1;
       break label$44;
      }
      $12_1 = -2147483648;
     }
     HEAP32[$7_1 >> 2] = $12_1;
     $6_1 = $6_1 + 1 | 0;
     break label$40;
    }
    label$46 : {
     label$47 : {
      if (!(Math_abs($13_1) < 2147483648.0)) {
       break label$47
      }
      $2_1 = ~~$13_1;
      break label$46;
     }
     $2_1 = -2147483648;
    }
    $9_1 = $14_1;
   }
   HEAP32[(($5_1 + 480 | 0) + ($6_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
  $13_1 = +$490(+(1.0), $9_1 | 0);
  label$48 : {
   if (($6_1 | 0) < (0 | 0)) {
    break label$48
   }
   $12_1 = $6_1 + 1 | 0;
   $2_1 = ($5_1 + 480 | 0) + ($6_1 << 2 | 0) | 0;
   $7_1 = $5_1 + ($6_1 << 3 | 0) | 0;
   label$49 : while (1) {
    HEAPF64[$7_1 >> 3] = $13_1 * +(HEAP32[$2_1 >> 2] | 0 | 0);
    $2_1 = $2_1 + -4 | 0;
    $7_1 = $7_1 + -8 | 0;
    $13_1 = $13_1 * 5.960464477539063e-08;
    $12_1 = $12_1 + -1 | 0;
    if (($12_1 | 0) > (0 | 0)) {
     continue label$49
    }
    break label$49;
   };
   if (($6_1 | 0) < (0 | 0)) {
    break label$48
   }
   $11_1 = $5_1 + ($6_1 << 3 | 0) | 0;
   $2_1 = $6_1;
   label$50 : while (1) {
    $15_1 = $2_1;
    $3_1 = $6_1 - $2_1 | 0;
    $13_1 = 0.0;
    $2_1 = 0;
    $7_1 = 0;
    label$51 : {
     label$52 : while (1) {
      $13_1 = $13_1 + +HEAPF64[($2_1 + 14144 | 0) >> 3] * +HEAPF64[($11_1 + $2_1 | 0) >> 3];
      if (($7_1 | 0) >= ($10_1 | 0)) {
       break label$51
      }
      $2_1 = $2_1 + 8 | 0;
      $12_1 = $7_1 >>> 0 < $3_1 >>> 0;
      $7_1 = $7_1 + 1 | 0;
      if ($12_1) {
       continue label$52
      }
      break label$52;
     };
    }
    HEAPF64[(($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0) >> 3] = $13_1;
    $11_1 = $11_1 + -8 | 0;
    $2_1 = $15_1 + -1 | 0;
    if (($15_1 | 0) > (0 | 0)) {
     continue label$50
    }
    break label$50;
   };
  }
  label$53 : {
   if ($4_1 >>> 0 > 3 >>> 0) {
    break label$53
   }
   label$54 : {
    label$55 : {
     switch ($4_1 | 0) {
     case 3:
      $25_1 = 0.0;
      label$58 : {
       if (($6_1 | 0) < (1 | 0)) {
        break label$58
       }
       $7_1 = ($5_1 + 160 | 0) + ($6_1 << 3 | 0) | 0;
       $2_1 = $7_1 + -8 | 0;
       $13_1 = +HEAPF64[$7_1 >> 3];
       $7_1 = $6_1;
       label$59 : while (1) {
        $26_1 = +HEAPF64[$2_1 >> 3];
        $21_1 = $26_1 + $13_1;
        HEAPF64[$2_1 >> 3] = $21_1;
        HEAPF64[($2_1 + 8 | 0) >> 3] = $13_1 + ($26_1 - $21_1);
        $2_1 = $2_1 + -8 | 0;
        $13_1 = $21_1;
        $7_1 = $7_1 + -1 | 0;
        if (($7_1 | 0) > (0 | 0)) {
         continue label$59
        }
        break label$59;
       };
       if (($6_1 | 0) < (2 | 0)) {
        break label$58
       }
       $7_1 = ($5_1 + 160 | 0) + ($6_1 << 3 | 0) | 0;
       $2_1 = $7_1 + -8 | 0;
       $13_1 = +HEAPF64[$7_1 >> 3];
       $7_1 = $6_1;
       label$60 : while (1) {
        $26_1 = +HEAPF64[$2_1 >> 3];
        $21_1 = $26_1 + $13_1;
        HEAPF64[$2_1 >> 3] = $21_1;
        HEAPF64[($2_1 + 8 | 0) >> 3] = $13_1 + ($26_1 - $21_1);
        $2_1 = $2_1 + -8 | 0;
        $13_1 = $21_1;
        $7_1 = $7_1 + -1 | 0;
        if (($7_1 | 0) > (1 | 0)) {
         continue label$60
        }
        break label$60;
       };
       if (($6_1 | 0) < (2 | 0)) {
        break label$58
       }
       $2_1 = ($5_1 + 160 | 0) + ($6_1 << 3 | 0) | 0;
       $25_1 = 0.0;
       label$61 : while (1) {
        $25_1 = $25_1 + +HEAPF64[$2_1 >> 3];
        $2_1 = $2_1 + -8 | 0;
        $6_1 = $6_1 + -1 | 0;
        if (($6_1 | 0) > (1 | 0)) {
         continue label$61
        }
        break label$61;
       };
      }
      $13_1 = +HEAPF64[($5_1 + 160 | 0) >> 3];
      if ($24_1) {
       break label$54
      }
      HEAPF64[$1_1 >> 3] = $13_1;
      HEAPF64[($1_1 + 16 | 0) >> 3] = $25_1;
      i64toi32_i32$1 = HEAP32[($5_1 + 172 | 0) >> 2] | 0;
      HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 168 | 0) >> 2] | 0;
      HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      break label$53;
     default:
      label$62 : {
       label$63 : {
        if (($6_1 | 0) >= (0 | 0)) {
         break label$63
        }
        $13_1 = 0.0;
        break label$62;
       }
       $7_1 = $6_1 + 1 | 0;
       $2_1 = ($5_1 + 160 | 0) + ($6_1 << 3 | 0) | 0;
       $13_1 = 0.0;
       label$64 : while (1) {
        $13_1 = $13_1 + +HEAPF64[$2_1 >> 3];
        $2_1 = $2_1 + -8 | 0;
        $7_1 = $7_1 + -1 | 0;
        if (($7_1 | 0) > (0 | 0)) {
         continue label$64
        }
        break label$64;
       };
      }
      HEAPF64[$1_1 >> 3] = $24_1 ? -$13_1 : $13_1;
      break label$53;
     case 1:
     case 2:
      break label$55;
     };
    }
    label$65 : {
     label$66 : {
      if (($6_1 | 0) >= (0 | 0)) {
       break label$66
      }
      $13_1 = 0.0;
      break label$65;
     }
     $7_1 = $6_1 + 1 | 0;
     $2_1 = ($5_1 + 160 | 0) + ($6_1 << 3 | 0) | 0;
     $13_1 = 0.0;
     label$67 : while (1) {
      $13_1 = $13_1 + +HEAPF64[$2_1 >> 3];
      $2_1 = $2_1 + -8 | 0;
      $7_1 = $7_1 + -1 | 0;
      if (($7_1 | 0) > (0 | 0)) {
       continue label$67
      }
      break label$67;
     };
    }
    HEAPF64[$1_1 >> 3] = $24_1 ? -$13_1 : $13_1;
    $13_1 = +HEAPF64[($5_1 + 160 | 0) >> 3] - $13_1;
    label$68 : {
     if (($6_1 | 0) < (1 | 0)) {
      break label$68
     }
     $2_1 = $5_1 + 160 | 0 | 8 | 0;
     label$69 : while (1) {
      $13_1 = $13_1 + +HEAPF64[$2_1 >> 3];
      $2_1 = $2_1 + 8 | 0;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue label$69
      }
      break label$69;
     };
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $24_1 ? -$13_1 : $13_1;
    break label$53;
   }
   HEAPF64[$1_1 >> 3] = -$13_1;
   HEAPF64[($1_1 + 16 | 0) >> 3] = -$25_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = -+HEAPF64[($5_1 + 168 | 0) >> 3];
  }
  global$0 = $5_1 + 560 | 0;
  return $22_1 & 7 | 0 | 0;
 }
 
 function $495($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0.0, $2_1 = 0, $3_1 = 0, $6_1 = 0, $19_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    $3_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(0));
    $4_1 = $3_1 & 2147483647 | 0;
    if ($4_1 >>> 0 > 1305022426 >>> 0) {
     break label$2
    }
    $5_1 = +$0_1;
    $19_1 = $5_1;
    $5_1 = $5_1 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    HEAPF64[$1_1 >> 3] = $19_1 + $5_1 * -1.5707963109016418 + $5_1 * -1.5893254773528196e-08;
    label$3 : {
     if (!(Math_abs($5_1) < 2147483648.0)) {
      break label$3
     }
     $4_1 = ~~$5_1;
     break label$1;
    }
    $4_1 = -2147483648;
    break label$1;
   }
   label$4 : {
    if ($4_1 >>> 0 < 2139095040 >>> 0) {
     break label$4
    }
    HEAPF64[$1_1 >> 3] = +Math_fround($0_1 - $0_1);
    $4_1 = 0;
    break label$1;
   }
   $6_1 = ($4_1 >>> 23 | 0) + -150 | 0;
   HEAPF64[($2_1 + 8 | 0) >> 3] = +(wasm2js_scratch_store_i32(0, $4_1 - ($6_1 << 23 | 0) | 0), wasm2js_scratch_load_f32());
   $4_1 = $494($2_1 + 8 | 0 | 0, $2_1 | 0, $6_1 | 0, 1 | 0, 0 | 0) | 0;
   $5_1 = +HEAPF64[$2_1 >> 3];
   label$5 : {
    if (($3_1 | 0) > (-1 | 0)) {
     break label$5
    }
    HEAPF64[$1_1 >> 3] = -$5_1;
    $4_1 = 0 - $4_1 | 0;
    break label$1;
   }
   HEAPF64[$1_1 >> 3] = $5_1;
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $496($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(0));
    $3_1 = $2_1 & 2147483647 | 0;
    if ($3_1 >>> 0 > 1061752794 >>> 0) {
     break label$2
    }
    if ($3_1 >>> 0 < 964689920 >>> 0) {
     break label$1
    }
    $0_1 = Math_fround($488(+(+$0_1)));
    break label$1;
   }
   $2_1 = $2_1 >>> 31 | 0;
   label$3 : {
    if ($3_1 >>> 0 > 1081824209 >>> 0) {
     break label$3
    }
    $4_1 = +$0_1;
    label$4 : {
     if ($3_1 >>> 0 > 1075235811 >>> 0) {
      break label$4
     }
     label$5 : {
      if (!$2_1) {
       break label$5
      }
      $0_1 = Math_fround(-Math_fround($489(+($4_1 + 1.5707963267948966))));
      break label$1;
     }
     $0_1 = Math_fround($489(+($4_1 + -1.5707963267948966)));
     break label$1;
    }
    $0_1 = Math_fround($488(+-(($2_1 ? 3.141592653589793 : -3.141592653589793) + $4_1)));
    break label$1;
   }
   label$6 : {
    if ($3_1 >>> 0 > 1088565717 >>> 0) {
     break label$6
    }
    $4_1 = +$0_1;
    label$7 : {
     if ($3_1 >>> 0 > 1085271519 >>> 0) {
      break label$7
     }
     label$8 : {
      if (!$2_1) {
       break label$8
      }
      $0_1 = Math_fround($489(+($4_1 + 4.71238898038469)));
      break label$1;
     }
     $0_1 = Math_fround(-Math_fround($489(+($4_1 + -4.71238898038469))));
     break label$1;
    }
    $0_1 = Math_fround($488(+(($2_1 ? 6.283185307179586 : -6.283185307179586) + $4_1)));
    break label$1;
   }
   label$9 : {
    if ($3_1 >>> 0 < 2139095040 >>> 0) {
     break label$9
    }
    $0_1 = Math_fround($0_1 - $0_1);
    break label$1;
   }
   label$10 : {
    $3_1 = ($495(Math_fround($0_1), $1_1 + 8 | 0 | 0) | 0) & 3 | 0;
    if ($3_1 >>> 0 > 2 >>> 0) {
     break label$10
    }
    label$11 : {
     switch ($3_1 | 0) {
     default:
      $0_1 = Math_fround($488(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
      break label$1;
     case 1:
      $0_1 = Math_fround($489(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
      break label$1;
     case 2:
      break label$11;
     };
    }
    $0_1 = Math_fround($488(+-+HEAPF64[($1_1 + 8 | 0) >> 3]));
    break label$1;
   }
   $0_1 = Math_fround(-Math_fround($489(+(+HEAPF64[($1_1 + 8 | 0) >> 3]))));
  }
  global$0 = $1_1 + 16 | 0;
  return Math_fround($0_1);
 }
 
 function $497($0_1) {
  $0_1 = Math_fround($0_1);
  var $4_1 = Math_fround(0), $3_1 = 0, $1_1 = 0, $2_1 = 0, $5_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    $2_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(0));
    $3_1 = $2_1 & 2147483647 | 0;
    if ($3_1 >>> 0 > 1061752794 >>> 0) {
     break label$2
    }
    $4_1 = Math_fround(1.0);
    if ($3_1 >>> 0 < 964689920 >>> 0) {
     break label$1
    }
    $4_1 = Math_fround($489(+(+$0_1)));
    break label$1;
   }
   $2_1 = $2_1 >>> 31 | 0;
   label$3 : {
    if ($3_1 >>> 0 > 1081824209 >>> 0) {
     break label$3
    }
    $5_1 = +$0_1;
    label$4 : {
     if ($3_1 >>> 0 < 1075235812 >>> 0) {
      break label$4
     }
     $4_1 = Math_fround(-Math_fround($489(+(($2_1 ? 3.141592653589793 : -3.141592653589793) + $5_1))));
     break label$1;
    }
    label$5 : {
     if (!$2_1) {
      break label$5
     }
     $4_1 = Math_fround($488(+($5_1 + 1.5707963267948966)));
     break label$1;
    }
    $4_1 = Math_fround($488(+(1.5707963267948966 - $5_1)));
    break label$1;
   }
   label$6 : {
    if ($3_1 >>> 0 > 1088565717 >>> 0) {
     break label$6
    }
    label$7 : {
     if ($3_1 >>> 0 < 1085271520 >>> 0) {
      break label$7
     }
     $4_1 = Math_fround($489(+(($2_1 ? 6.283185307179586 : -6.283185307179586) + +$0_1)));
     break label$1;
    }
    label$8 : {
     if (!$2_1) {
      break label$8
     }
     $4_1 = Math_fround($488(+(-4.71238898038469 - +$0_1)));
     break label$1;
    }
    $4_1 = Math_fround($488(+(+$0_1 + -4.71238898038469)));
    break label$1;
   }
   label$9 : {
    if ($3_1 >>> 0 < 2139095040 >>> 0) {
     break label$9
    }
    $4_1 = Math_fround($0_1 - $0_1);
    break label$1;
   }
   label$10 : {
    $3_1 = ($495(Math_fround($0_1), $1_1 + 8 | 0 | 0) | 0) & 3 | 0;
    if ($3_1 >>> 0 > 2 >>> 0) {
     break label$10
    }
    label$11 : {
     switch ($3_1 | 0) {
     default:
      $4_1 = Math_fround($489(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
      break label$1;
     case 1:
      $4_1 = Math_fround($488(+-+HEAPF64[($1_1 + 8 | 0) >> 3]));
      break label$1;
     case 2:
      break label$11;
     };
    }
    $4_1 = Math_fround(-Math_fround($489(+(+HEAPF64[($1_1 + 8 | 0) >> 3]))));
    break label$1;
   }
   $4_1 = Math_fround($488(+(+HEAPF64[($1_1 + 8 | 0) >> 3])));
  }
  global$0 = $1_1 + 16 | 0;
  return Math_fround($4_1);
 }
 
 function $498($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $7_1 = 0, $8_1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $63_1 = 0, $68_1 = 0, $77_1 = 0, $80_1 = 0, $89_1 = 0, $92_1 = 0, $101_1 = 0, $104_1 = 0, $107_1 = 0, $112_1 = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = -1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 31;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 14216;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = -581039253;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = -581039253;
  HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1566444395;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 1566444395;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 32 | 0) >> 0] = 1;
  $3_1 = 0;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] = 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 84 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 60 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = -581039253;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1566444395;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3_1 = $79(40 | 0, 16 | 0) | 0;
   $473($3_1 | 0) | 0;
   HEAP32[($0_1 + 68 | 0) >> 2] = $3_1;
   $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  }
  label$2 : {
   if (($3_1 | 0) >= ($2_1 | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ($2_1) {
      break label$4
     }
     $4_1 = 0;
     break label$3;
    }
    $4_1 = $79(Math_imul($2_1, 80) | 0, 16 | 0) | 0;
   }
   label$5 : {
    $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if (($5_1 | 0) < (1 | 0)) {
     break label$5
    }
    $6_1 = 64;
    label$6 : while (1) {
     $3_1 = $4_1 + $6_1 | 0;
     $7_1 = $3_1 + -64 | 0;
     $1_1 = (HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $6_1 | 0;
     $8_1 = $1_1 + -64 | 0;
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $63_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $7_1;
     HEAP32[i64toi32_i32$0 >> 2] = $63_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $68_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $68_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $7_1 = $3_1 + -48 | 0;
     $8_1 = $1_1 + -48 | 0;
     i64toi32_i32$2 = $8_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $77_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $7_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $77_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $80_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1;
     HEAP32[i64toi32_i32$1 >> 2] = $80_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $7_1 = $3_1 + -32 | 0;
     $8_1 = $1_1 + -32 | 0;
     i64toi32_i32$2 = $8_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $89_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $7_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $89_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $92_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1;
     HEAP32[i64toi32_i32$1 >> 2] = $92_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $7_1 = $3_1 + -16 | 0;
     $8_1 = $1_1 + -16 | 0;
     i64toi32_i32$2 = $8_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $101_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $7_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $101_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $104_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1;
     HEAP32[i64toi32_i32$1 >> 2] = $104_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $107_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $3_1;
     HEAP32[i64toi32_i32$0 >> 2] = $107_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $112_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $112_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $6_1 + 80 | 0;
     $5_1 = $5_1 + -1 | 0;
     if ($5_1) {
      continue label$6
     }
     break label$6;
    };
   }
   label$7 : {
    $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$7
    }
    label$8 : {
     if (!(HEAPU8[($0_1 + 32 | 0) >> 0] | 0)) {
      break label$8
     }
     $80($3_1 | 0);
    }
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = $4_1;
   HEAP8[($0_1 + 32 | 0) >> 0] = 1;
   HEAP32[($0_1 + 24 | 0) >> 2] = $2_1;
  }
  return $0_1 | 0;
 }
 
 function $499($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 14216;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $474($1_1 | 0) | 0;
   $80(HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0);
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   label$3 : {
    if (!(HEAPU8[($0_1 + 32 | 0) >> 0] | 0)) {
     break label$3
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = 0;
  HEAP8[($0_1 + 32 | 0) >> 0] = 1;
  return $0_1 | 0;
 }
 
 function $500($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 14216;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $474($1_1 | 0) | 0;
   $80(HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0);
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   label$3 : {
    if (!(HEAPU8[($0_1 + 32 | 0) >> 0] | 0)) {
     break label$3
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = 0;
  HEAP8[($0_1 + 32 | 0) >> 0] = 1;
  $80($0_1 | 0);
 }
 
 function $501($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = Math_fround(0), $17_1 = 0, $23_1 = 0, $29_1 = 0, $35_1 = 0, $41_1 = 0, $44_1 = 0, $47_1 = 0, $50_1 = 0, $136_1 = 0, $142_1 = 0, $145_1 = 0, $148_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_i32$1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  HEAP32[($0_1 + 72 | 0) >> 2] = (HEAP32[($0_1 + 72 | 0) >> 2] | 0) + 1 | 0;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 64 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 64 | 0) + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $29_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($3_1 + 64 | 0) + 40 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $29_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 56 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($3_1 + 64 | 0) + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $35_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 140 | 0) >> 2] = 0;
  HEAP32[($3_1 + 128 | 0) >> 2] = $2_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $41_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 64 | 0) >> 2] = $41_1;
  HEAP32[($3_1 + 68 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $44_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 80 | 0) >> 2] = $44_1;
  HEAP32[($3_1 + 84 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $47_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 96 | 0) >> 2] = $47_1;
  HEAP32[($3_1 + 100 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $50_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 112 | 0) >> 2] = $50_1;
  HEAP32[($3_1 + 116 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 132 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $3_1, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($2_1))), HEAPF32[(wasm2js_i32$0 + 136 | 0) >> 2] = wasm2js_f32$0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($2_1, i64toi32_i32$2, $3_1 + 48 | 0, $3_1 + 32 | 0);
  label$1 : {
   $4_1 = Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]);
   if (Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]) > $4_1 ^ 1 | 0) {
    break label$1
   }
   HEAPF32[($0_1 + 36 | 0) >> 2] = $4_1;
  }
  label$2 : {
   $4_1 = Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]);
   if (Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]) < $4_1 ^ 1 | 0) {
    break label$2
   }
   HEAPF32[($0_1 + 52 | 0) >> 2] = $4_1;
  }
  label$3 : {
   $4_1 = Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]);
   if (!(Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]) > $4_1)) {
    break label$3
   }
   HEAPF32[($0_1 + 40 | 0) >> 2] = $4_1;
  }
  label$4 : {
   $4_1 = Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]);
   if (Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]) < $4_1 ^ 1 | 0) {
    break label$4
   }
   HEAPF32[($0_1 + 56 | 0) >> 2] = $4_1;
  }
  label$5 : {
   $4_1 = Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]);
   if (Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]) > $4_1 ^ 1 | 0) {
    break label$5
   }
   HEAPF32[($0_1 + 44 | 0) >> 2] = $4_1;
  }
  label$6 : {
   $4_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
   if (Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]) < $4_1 ^ 1 | 0) {
    break label$6
   }
   HEAPF32[($0_1 + 60 | 0) >> 2] = $4_1;
  }
  label$7 : {
   $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$7
   }
   i64toi32_i32$2 = ($3_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $136_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $136_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = ($3_1 + 32 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $142_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $142_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
   $145_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1;
   HEAP32[$3_1 >> 2] = $145_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
   $148_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $148_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   (wasm2js_i32$0 = $3_1, wasm2js_i32$1 = $480($1_1 | 0, $3_1 | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 140 | 0) >> 2] = wasm2js_i32$1;
  }
  $502($0_1 + 16 | 0 | 0, $3_1 + 64 | 0 | 0);
  global$0 = $3_1 + 144 | 0;
 }
 
 function $502($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $2_1 = 0, $7_1 = 0, $9_1 = 0, $8_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $44_1 = 0, $49_1 = 0, $58_1 = 0, $61_1 = 0, $70_1 = 0, $73_1 = 0, $82_1 = 0, $85_1 = 0, $88_1 = 0, $93_1 = 0, $122_1 = 0, $127_1 = 0, $132_1 = 0, $135_1 = 0, $140_1 = 0, $143_1 = 0, $148_1 = 0, $151_1 = 0, $156_1 = 0, $159_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $3_1 = $2_1 ? $2_1 << 1 | 0 : 1;
   if (($2_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($3_1) {
      break label$3
     }
     $4_1 = 0;
     break label$2;
    }
    $4_1 = $79(Math_imul($3_1, 80) | 0, 16 | 0) | 0;
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   }
   label$4 : {
    if (($2_1 | 0) < (1 | 0)) {
     break label$4
    }
    $5_1 = 64;
    label$5 : while (1) {
     $6_1 = $4_1 + $5_1 | 0;
     $7_1 = $6_1 + -64 | 0;
     $8_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $5_1 | 0;
     $9_1 = $8_1 + -64 | 0;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $44_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $7_1;
     HEAP32[i64toi32_i32$0 >> 2] = $44_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $49_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $49_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $7_1 = $6_1 + -48 | 0;
     $9_1 = $8_1 + -48 | 0;
     i64toi32_i32$2 = $9_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $58_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $7_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $58_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $61_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1;
     HEAP32[i64toi32_i32$1 >> 2] = $61_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $7_1 = $6_1 + -32 | 0;
     $9_1 = $8_1 + -32 | 0;
     i64toi32_i32$2 = $9_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $70_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $7_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $70_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $73_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1;
     HEAP32[i64toi32_i32$1 >> 2] = $73_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $7_1 = $6_1 + -16 | 0;
     $9_1 = $8_1 + -16 | 0;
     i64toi32_i32$2 = $9_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $82_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $7_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $82_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $85_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1;
     HEAP32[i64toi32_i32$1 >> 2] = $85_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $88_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $6_1;
     HEAP32[i64toi32_i32$0 >> 2] = $88_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $93_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $6_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $93_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $5_1 = $5_1 + 80 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$5
     }
     break label$5;
    };
   }
   label$6 : {
    $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$6
    }
    label$7 : {
     if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
      break label$7
     }
     $80($6_1 | 0);
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
   HEAP8[($0_1 + 16 | 0) >> 0] = 1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  }
  $6_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + Math_imul($2_1, 80) | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $122_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[i64toi32_i32$0 >> 2] = $122_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $127_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $127_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $132_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $132_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $135_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $135_1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $140_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 40 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $140_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $143_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $143_1;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $148_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 56 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $148_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $151_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $151_1;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 72 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $156_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 72 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $156_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
  $159_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $159_1;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function $503($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $18_1 = 0, $23_1 = 0, $28_1 = 0, $31_1 = 0, $36_1 = 0, $39_1 = 0, $44_1 = 0, $47_1 = 0, $70_1 = 0, $76_1 = 0, $79_1 = 0, $82_1 = 0;
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $5_1 = Math_imul($1_1, 80);
  $1_1 = (HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $5_1 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $18_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[i64toi32_i32$0 >> 2] = $18_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $28_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $31_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $31_1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $36_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 40 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $36_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $39_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $39_1;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $44_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 56 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $44_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $47_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $47_1;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   if (!(HEAP32[($0_1 + 68 | 0) >> 2] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[(((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $5_1 | 0) + 64 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $2_1, $4_1 + 48 | 0, $4_1 + 32 | 0);
   i64toi32_i32$2 = ($4_1 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $70_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $70_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = ($4_1 + 32 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $76_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $76_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   $79_1 = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$2;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $79_1;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
   $82_1 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$2;
   HEAP32[i64toi32_i32$1 >> 2] = $82_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $481(HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[(((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $5_1 | 0) + 76 | 0) >> 2] | 0 | 0, i64toi32_i32$1 | 0);
  }
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($0_1);
  }
  global$0 = $4_1 + 64 | 0;
 }
 
 function $504($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $56_1 = 0, $63_1 = 0, $70_1 = 0, $77_1 = 0, $84_1 = 0, $87_1 = 0, $90_1 = 0, $93_1 = 0, $96_1 = 0, $99_1 = 0, $109_1 = 0, $112_1 = 0, $116_1 = 0, $119_1 = 0, $123_1 = 0, $126_1 = 0, $130_1 = 0, $133_1 = 0, $136_1 = 0, $140_1 = 0, $147_1 = 0, $151_1 = 0, $154_1 = 0, $158_1 = 0, $161_1 = 0, $165_1 = 0, $168_1 = 0, $172_1 = 0, $176_1 = 0, $179_1 = 0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  HEAP32[($0_1 + 72 | 0) >> 2] = (HEAP32[($0_1 + 72 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $483($3_1 | 0, HEAP32[(((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + Math_imul($1_1, 80) | 0) + 76 | 0) >> 2] | 0 | 0);
  }
  $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $5_1 = $2_1 + 8 | 0;
  $6_1 = $0_1 + 28 | 0;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  $8_1 = Math_imul($1_1, 80);
  $3_1 = $7_1 + $8_1 | 0;
  $9_1 = $3_1 + 8 | 0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $56_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $56_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $10_1 = $2_1 + 24 | 0;
  $11_1 = $3_1 + 24 | 0;
  i64toi32_i32$2 = $11_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $63_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $10_1;
  HEAP32[i64toi32_i32$1 >> 2] = $63_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $12_1 = $2_1 + 40 | 0;
  $13_1 = $3_1 + 40 | 0;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $70_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $12_1;
  HEAP32[i64toi32_i32$0 >> 2] = $70_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $14_1 = $2_1 + 56 | 0;
  $15_1 = $3_1 + 56 | 0;
  i64toi32_i32$2 = $15_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $77_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $14_1;
  HEAP32[i64toi32_i32$1 >> 2] = $77_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $16_1 = $2_1 + 72 | 0;
  $17_1 = $3_1 + 72 | 0;
  i64toi32_i32$2 = $17_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $84_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $16_1;
  HEAP32[i64toi32_i32$0 >> 2] = $84_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $87_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[i64toi32_i32$1 >> 2] = $87_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $90_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $90_1;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $93_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $93_1;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $96_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $96_1;
  HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
  $99_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $99_1;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  $18_1 = Math_imul($4_1, 80) + -80 | 0;
  $4_1 = $7_1 + $18_1 | 0;
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $109_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $9_1;
  HEAP32[i64toi32_i32$0 >> 2] = $109_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $112_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[i64toi32_i32$1 >> 2] = $112_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $116_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $11_1;
  HEAP32[i64toi32_i32$0 >> 2] = $116_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $119_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $119_1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $123_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $13_1;
  HEAP32[i64toi32_i32$0 >> 2] = $123_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $126_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $126_1;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $130_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $15_1;
  HEAP32[i64toi32_i32$0 >> 2] = $130_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $133_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $133_1;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
  $136_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = $136_1;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 72 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $140_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $17_1;
  HEAP32[i64toi32_i32$1 >> 2] = $140_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = (HEAP32[$6_1 >> 2] | 0) + $18_1 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $147_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[i64toi32_i32$0 >> 2] = $147_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $151_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $151_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $154_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $154_1;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $10_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $158_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $158_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $161_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = $161_1;
  HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $12_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $165_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $165_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $168_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $168_1;
  HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $14_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $172_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1 + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $172_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $16_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $176_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1 + 72 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $176_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
  $179_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $179_1;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  label$2 : {
   if (!(HEAP32[($0_1 + 68 | 0) >> 2] | 0)) {
    break label$2
   }
   HEAP32[((HEAP32[(((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $8_1 | 0) + 76 | 0) >> 2] | 0) + 36 | 0) >> 2] = $1_1;
  }
  HEAP32[($0_1 + 20 | 0) >> 2] = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) + -1 | 0;
  global$0 = $2_1 + 80 | 0;
 }
 
 function $505($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = (HEAP32[($0_1 + 72 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = Math_imul($2_1, 80) + -16 | 0;
   label$2 : while (1) {
    $2_1 = $2_1 + -1 | 0;
    label$3 : {
     if ((HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
      break label$3
     }
     $504($0_1 | 0, $2_1 | 0);
    }
    $3_1 = $3_1 + -80 | 0;
    if (($2_1 | 0) > (0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($0_1);
 }
 
 function $506($0_1) {
  $0_1 = $0_1 | 0;
  var $6_1 = Math_fround(0), $1_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = -581039253;
  HEAP32[($0_1 + 52 | 0) >> 2] = -581039253;
  HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1566444395;
  HEAP32[($0_1 + 36 | 0) >> 2] = 1566444395;
  HEAP32[($0_1 + 40 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 60 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = -581039253;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1566444395;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $2_1 = 0;
   $3_1 = 64;
   label$2 : while (1) {
    $4_1 = (HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $3_1 | 0;
    $5_1 = HEAP32[$4_1 >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($5_1, $4_1 + -64 | 0, $1_1 + 16 | 0, $1_1);
    label$3 : {
     $6_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
     if (Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]) > $6_1 ^ 1 | 0) {
      break label$3
     }
     HEAPF32[($0_1 + 36 | 0) >> 2] = $6_1;
    }
    label$4 : {
     $6_1 = Math_fround(HEAPF32[$1_1 >> 2]);
     if (Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]) < $6_1 ^ 1 | 0) {
      break label$4
     }
     HEAPF32[($0_1 + 52 | 0) >> 2] = $6_1;
    }
    label$5 : {
     $6_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
     if (Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]) > $6_1 ^ 1 | 0) {
      break label$5
     }
     HEAPF32[($0_1 + 40 | 0) >> 2] = $6_1;
    }
    label$6 : {
     $6_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
     if (Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]) < $6_1 ^ 1 | 0) {
      break label$6
     }
     HEAPF32[($0_1 + 56 | 0) >> 2] = $6_1;
    }
    label$7 : {
     $6_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
     if (Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]) > $6_1 ^ 1 | 0) {
      break label$7
     }
     HEAPF32[($0_1 + 44 | 0) >> 2] = $6_1;
    }
    label$8 : {
     $6_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
     if (Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]) < $6_1 ^ 1 | 0) {
      break label$8
     }
     HEAPF32[($0_1 + 60 | 0) >> 2] = $6_1;
    }
    $3_1 = $3_1 + 80 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) < (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $1_1 + 32 | 0;
 }
 
 function $507($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $9_1 = Math_fround(0), $5_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $15_1 = Math_fround(0), $17_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $16_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $20_1 = Math_fround(0);
  $4_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
  $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  $7_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]);
  $11_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $12_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $13_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1));
  $14_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $23_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $25_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $26_1 = $6_1 ? Math_fround(Math_fround($10_1 + $9_1) * Math_fround(.5)) : Math_fround(0.0);
  $27_1 = $6_1 ? Math_fround(Math_fround($8_1 + $7_1) * Math_fround(.5)) : Math_fround(0.0);
  $28_1 = $6_1 ? Math_fround(Math_fround($5_1 + $4_1) * Math_fround(.5)) : Math_fround(0.0);
  $17_1 = Math_fround($17_1 + Math_fround(Math_fround(Math_fround($25_1 * $26_1) + Math_fround($19_1 * $27_1)) + Math_fround($18_1 * $28_1)));
  $9_1 = Math_fround($11_1 + ($6_1 ? Math_fround(Math_fround($10_1 - $9_1) * Math_fround(.5)) : Math_fround(0.0)));
  $7_1 = Math_fround($12_1 + ($6_1 ? Math_fround(Math_fround($8_1 - $7_1) * Math_fround(.5)) : Math_fround(0.0)));
  $4_1 = Math_fround($13_1 + ($6_1 ? Math_fround(Math_fround($5_1 - $4_1) * Math_fround(.5)) : Math_fround(0.0)));
  $5_1 = Math_fround(Math_fround(Math_fround($9_1 * Math_fround(Math_abs($25_1))) + Math_fround($7_1 * Math_fround(Math_abs($19_1)))) + Math_fround($4_1 * Math_fround(Math_abs($18_1))));
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($17_1 - $5_1);
  $8_1 = Math_fround($14_1 + Math_fround(Math_fround(Math_fround($26_1 * $24_1) + Math_fround($27_1 * $16_1)) + Math_fround($28_1 * $15_1)));
  $10_1 = Math_fround(Math_fround(Math_fround($9_1 * Math_fround(Math_abs($24_1))) + Math_fround($7_1 * Math_fround(Math_abs($16_1)))) + Math_fround($4_1 * Math_fround(Math_abs($15_1))));
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($8_1 - $10_1);
  $15_1 = Math_fround($20_1 + Math_fround(Math_fround(Math_fround($26_1 * $22_1) + Math_fround($27_1 * $23_1)) + Math_fround($28_1 * $21_1)));
  $4_1 = Math_fround(Math_fround(Math_fround($9_1 * Math_fround(Math_abs($22_1))) + Math_fround($7_1 * Math_fround(Math_abs($23_1)))) + Math_fround($4_1 * Math_fround(Math_abs($21_1))));
  HEAPF32[$2_1 >> 2] = Math_fround($15_1 - $4_1);
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($5_1 + $17_1);
  HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($10_1 + $8_1);
  HEAPF32[$3_1 >> 2] = Math_fround($4_1 + $15_1);
 }
 
 function $508($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  i64toi32_i32$1 = $3_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1 + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 52 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $3_1 + 76 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 72 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $3_1 + 84 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 92 | 0) >> 2] = 0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = 0;
  HEAP32[($3_1 + 40 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 32 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 64 | 0) >> 2] = 0;
  HEAP32[($3_1 + 68 | 0) >> 2] = i64toi32_i32$0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $3_1 + 32 | 0, $3_1 + 16 | 0, $3_1);
  $1_1 = Math_fround($1_1 / Math_fround(12.0));
  $4_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 >> 2]) - Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2])) * Math_fround(.5));
  $4_1 = Math_fround($4_1 + $4_1);
  $4_1 = Math_fround($4_1 * $4_1);
  $5_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2])) * Math_fround(.5));
  $5_1 = Math_fround($5_1 + $5_1);
  $5_1 = Math_fround($5_1 * $5_1);
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($1_1 * Math_fround($4_1 + $5_1));
  $6_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2])) * Math_fround(.5));
  $6_1 = Math_fround($6_1 + $6_1);
  $6_1 = Math_fround($6_1 * $6_1);
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($1_1 * Math_fround($4_1 + $6_1));
  HEAPF32[$2_1 >> 2] = Math_fround($1_1 * Math_fround($5_1 + $6_1));
  global$0 = $3_1 + 96 | 0;
 }
 
 function $509($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $2_1 = 0, $7_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $14_1 = 0, $3_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $45_1 = 0, $48_1 = 0, $54_1 = 0, $58_1 = 0, $64_1 = 0, $68_1 = 0, $74_1 = 0, $78_1 = 0, $105_1 = 0, $171_1 = 0, $174_1 = 0, $178_1 = 0, $182_1 = 0, $186_1 = 0, $190_1 = 0, $194_1 = 0, $198_1 = 0, $220_1 = 0, $227_1 = 0, $233_1 = 0, $236_1 = 0, $257_1 = 0, $262_1 = 0;
  $2_1 = global$0 - 144 | 0;
  global$0 = $2_1;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = ($2_1 + 80 | 0) + 16 | 0;
   $4_1 = ($2_1 + 16 | 0) + 48 | 0;
   $5_1 = ($2_1 + 16 | 0) + 32 | 0;
   $6_1 = ($2_1 + 16 | 0) + 16 | 0;
   $7_1 = 0;
   $8_1 = 0;
   label$2 : while (1) {
    $9_1 = ($2_1 + 16 | 0) + 8 | 0;
    $10_1 = (HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $7_1 | 0;
    i64toi32_i32$2 = $10_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $45_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $9_1;
    HEAP32[i64toi32_i32$0 >> 2] = $45_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $48_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $48_1;
    HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
    $11_1 = $6_1 + 8 | 0;
    i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $54_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $11_1;
    HEAP32[i64toi32_i32$0 >> 2] = $54_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $10_1 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $58_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $6_1;
    HEAP32[i64toi32_i32$1 >> 2] = $58_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $12_1 = $5_1 + 8 | 0;
    i64toi32_i32$2 = $10_1 + 40 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $64_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $12_1;
    HEAP32[i64toi32_i32$0 >> 2] = $64_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $10_1 + 32 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $68_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1;
    HEAP32[i64toi32_i32$1 >> 2] = $68_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $13_1 = $4_1 + 8 | 0;
    i64toi32_i32$2 = $10_1 + 56 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $74_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $13_1;
    HEAP32[i64toi32_i32$0 >> 2] = $74_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $10_1 + 48 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $78_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1;
    HEAP32[i64toi32_i32$1 >> 2] = $78_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $14_1 = $2_1 + 8 | 0;
    $10_1 = HEAP32[($10_1 + 64 | 0) >> 2] | 0;
    $10_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$10_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($10_1) | 0;
    HEAP32[$14_1 >> 2] = HEAP32[($10_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    HEAPF32[$14_1 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$14_1 >> 2]) * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])) / Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]));
    $105_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[i64toi32_i32$0 >> 2] = $105_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = 0;
    HEAPF32[i64toi32_i32$0 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[i64toi32_i32$0 >> 2]) * Math_fround(HEAPF32[$1_1 >> 2])) / Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]));
    HEAPF32[(i64toi32_i32$0 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[(i64toi32_i32$0 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2])) / Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]));
    $10_1 = HEAP32[(((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $7_1 | 0) + 64 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$10_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($10_1, i64toi32_i32$0);
    HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] = 0;
    HEAPF32[(i64toi32_i32$0 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[(i64toi32_i32$0 + 72 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])) / Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]));
    HEAPF32[(i64toi32_i32$0 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[(i64toi32_i32$0 + 68 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2])) / Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]));
    HEAPF32[(i64toi32_i32$0 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[(i64toi32_i32$0 + 64 | 0) >> 2]) * Math_fround(HEAPF32[$1_1 >> 2])) / Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]));
    $10_1 = (HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $7_1 | 0;
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $171_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $10_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $171_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $174_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $10_1;
    HEAP32[i64toi32_i32$0 >> 2] = $174_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $11_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $178_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $10_1 + 24 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $178_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $182_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $10_1 + 16 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $182_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $186_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $10_1 + 40 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $186_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $190_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $10_1 + 32 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $190_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $194_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $10_1 + 48 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $194_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $13_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $198_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $10_1 + 56 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $198_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    label$3 : {
     if (!(HEAP32[($0_1 + 68 | 0) >> 2] | 0)) {
      break label$3
     }
     $10_1 = HEAP32[(((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $7_1 | 0) + 64 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$10_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($10_1, $2_1 + 16 | 0, $2_1 + 128 | 0, $2_1 + 112 | 0);
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
     $220_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1;
     HEAP32[i64toi32_i32$1 >> 2] = $220_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = (i64toi32_i32$2 + 128 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $227_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($2_1 + 80 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $227_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = ($2_1 + 112 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $233_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $3_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $233_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
     $236_1 = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$2;
     HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] = $236_1;
     HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] = i64toi32_i32$1;
     $481(HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[(((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $7_1 | 0) + 76 | 0) >> 2] | 0 | 0, i64toi32_i32$0 + 80 | 0 | 0);
    }
    $7_1 = $7_1 + 80 | 0;
    $8_1 = $8_1 + 1 | 0;
    if (($8_1 | 0) < (HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $257_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = $257_1;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $262_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 88 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $262_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($0_1);
  global$0 = $2_1 + 144 | 0;
 }
 
 function $510($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $7_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $8_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $98($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = $3_1;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, 76, $3_1) | 0;
   $3_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($2_1, $3_1) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
   label$2 : {
    if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) <= (0 | 0)) {
     break label$2
    }
    $5_1 = 72;
    $3_1 = $3_1 + 72 | 0;
    $6_1 = 0;
    label$3 : while (1) {
     $7_1 = (HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $5_1 | 0;
     HEAP32[$3_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
     (wasm2js_i32$0 = $3_1 + -8 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($2_1, HEAP32[($7_1 + -8 | 0) >> 2] | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     label$4 : {
      if (FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($2_1, HEAP32[(((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $5_1 | 0) + -8 | 0) >> 2] | 0) | 0) {
       break label$4
      }
      $7_1 = HEAP32[(((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $5_1 | 0) + -8 | 0) >> 2] | 0;
      $7_1 = ((((wasm2js_i32$1 = $2_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 52 | 0) >> 2] | 0]($7_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
      $8_1 = HEAP32[(((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $5_1 | 0) + -8 | 0) >> 2] | 0;
      (((((wasm2js_i32$3 = $2_1, wasm2js_i32$2 = $7_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($8_1, HEAP32[($7_1 + 8 | 0) >> 2] | 0, $2_1) | 0), wasm2js_i32$4 = 1346455635), wasm2js_i32$5 = HEAP32[(((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $5_1 | 0) + -8 | 0) >> 2] | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$2_1 >> 2] | 0) + 20 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
     }
     $7_1 = (HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $5_1 | 0;
     HEAP32[($3_1 + -72 | 0) >> 2] = HEAP32[($7_1 + -72 | 0) >> 2] | 0;
     HEAP32[($3_1 + -68 | 0) >> 2] = HEAP32[($7_1 + -68 | 0) >> 2] | 0;
     HEAP32[($3_1 + -64 | 0) >> 2] = HEAP32[($7_1 + -64 | 0) >> 2] | 0;
     HEAP32[($3_1 + -60 | 0) >> 2] = HEAP32[($7_1 + -60 | 0) >> 2] | 0;
     HEAP32[($3_1 + -56 | 0) >> 2] = HEAP32[($7_1 + -56 | 0) >> 2] | 0;
     HEAP32[($3_1 + -52 | 0) >> 2] = HEAP32[($7_1 + -52 | 0) >> 2] | 0;
     HEAP32[($3_1 + -48 | 0) >> 2] = HEAP32[($7_1 + -48 | 0) >> 2] | 0;
     HEAP32[($3_1 + -44 | 0) >> 2] = HEAP32[($7_1 + -44 | 0) >> 2] | 0;
     HEAP32[($3_1 + -40 | 0) >> 2] = HEAP32[($7_1 + -40 | 0) >> 2] | 0;
     HEAP32[($3_1 + -36 | 0) >> 2] = HEAP32[($7_1 + -36 | 0) >> 2] | 0;
     HEAP32[($3_1 + -32 | 0) >> 2] = HEAP32[($7_1 + -32 | 0) >> 2] | 0;
     HEAP32[($3_1 + -28 | 0) >> 2] = HEAP32[($7_1 + -28 | 0) >> 2] | 0;
     HEAP32[($3_1 + -24 | 0) >> 2] = HEAP32[($7_1 + -24 | 0) >> 2] | 0;
     HEAP32[($3_1 + -20 | 0) >> 2] = HEAP32[($7_1 + -20 | 0) >> 2] | 0;
     HEAP32[($3_1 + -16 | 0) >> 2] = HEAP32[($7_1 + -16 | 0) >> 2] | 0;
     HEAP32[($3_1 + -4 | 0) >> 2] = HEAP32[($7_1 + -4 | 0) >> 2] | 0;
     HEAP32[($3_1 + -12 | 0) >> 2] = HEAP32[($7_1 + -12 | 0) >> 2] | 0;
     $5_1 = $5_1 + 80 | 0;
     $3_1 = $3_1 + 76 | 0;
     $6_1 = $6_1 + 1 | 0;
     if (($6_1 | 0) < (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($2_1, $4_1, 14288, 1497453121, HEAP32[($4_1 + 8 | 0) >> 2] | 0);
  }
  return 14313 | 0;
 }
 
 function $511($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 80 | 0 | 0;
 }
 
 function $512($0_1) {
  $0_1 = $0_1 | 0;
  return 14364 | 0;
 }
 
 function $513($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[($0_1 + 76 | 0) >> 2] = $1_1;
 }
 
 function $514($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 76 | 0) >> 2]));
 }
 
 function $515($0_1) {
  $0_1 = $0_1 | 0;
  return 24 | 0;
 }
 
 function $516($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $517($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $14_1 = 0, $11_1 = 0, $10_1 = 0, $12_1 = 0, $13_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $9_1 = 0, $5_1 = 0, $18_1 = 0.0, $19_1 = 0.0, $20_1 = 0.0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  label$1 : {
   $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1) | 0;
   if (($5_1 | 0) < (1 | 0)) {
    break label$1
   }
   $6_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   $9_1 = 0;
   label$2 : while (1) {
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1, $4_1 + 76 | 0, $4_1 + 52 | 0, $4_1 + 64 | 0, $4_1 + 56 | 0, $4_1 + 72 | 0, $4_1 + 68 | 0, $4_1 + 48 | 0, $4_1 + 60 | 0, $9_1);
    label$3 : {
     $10_1 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
     if ($10_1 >>> 0 > 1 >>> 0) {
      break label$3
     }
     label$4 : {
      switch ($10_1 | 0) {
      default:
       $10_1 = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + -2 | 0;
       if ($10_1 >>> 0 > 3 >>> 0) {
        break label$3
       }
       label$6 : {
        switch ($10_1 | 0) {
        case 3:
         if ((HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$3
         }
         $10_1 = 0;
         label$9 : while (1) {
          $11_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
          $12_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
          $13_1 = (HEAP32[($4_1 + 72 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 68 | 0) >> 2] | 0, $10_1) | 0;
          $14_1 = $11_1 + Math_imul($12_1, HEAPU8[$13_1 >> 0] | 0) | 0;
          $15_1 = Math_fround(HEAPF32[$14_1 >> 2]);
          $16_1 = Math_fround(HEAPF32[($14_1 + 4 | 0) >> 2]);
          $17_1 = Math_fround(HEAPF32[($14_1 + 8 | 0) >> 2]);
          HEAP32[($4_1 + 12 | 0) >> 2] = 0;
          HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround($6_1 * $17_1);
          HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround($7_1 * $16_1);
          HEAPF32[$4_1 >> 2] = Math_fround($8_1 * $15_1);
          $14_1 = $11_1 + Math_imul($12_1, HEAPU8[($13_1 + 1 | 0) >> 0] | 0) | 0;
          $15_1 = Math_fround(HEAPF32[$14_1 >> 2]);
          $16_1 = Math_fround(HEAPF32[($14_1 + 4 | 0) >> 2]);
          $17_1 = Math_fround(HEAPF32[($14_1 + 8 | 0) >> 2]);
          HEAP32[($4_1 + 28 | 0) >> 2] = 0;
          HEAPF32[($4_1 + 24 | 0) >> 2] = Math_fround($6_1 * $17_1);
          HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround($7_1 * $16_1);
          HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround($8_1 * $15_1);
          $11_1 = $11_1 + Math_imul($12_1, HEAPU8[($13_1 + 2 | 0) >> 0] | 0) | 0;
          $15_1 = Math_fround(HEAPF32[$11_1 >> 2]);
          $16_1 = Math_fround(HEAPF32[($11_1 + 4 | 0) >> 2]);
          $17_1 = Math_fround(HEAPF32[($11_1 + 8 | 0) >> 2]);
          HEAP32[($4_1 + 44 | 0) >> 2] = 0;
          HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround($6_1 * $17_1);
          HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround($7_1 * $16_1);
          HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround($8_1 * $15_1);
          FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $4_1, $9_1, $10_1);
          $10_1 = $10_1 + 1 | 0;
          if (($10_1 | 0) < (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0)) {
           continue label$9
          }
          break label$3;
         };
        case 1:
         if ((HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$3
         }
         $10_1 = 0;
         label$10 : while (1) {
          $11_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
          $12_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
          $13_1 = (HEAP32[($4_1 + 72 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 68 | 0) >> 2] | 0, $10_1) | 0;
          $14_1 = $11_1 + Math_imul($12_1, HEAPU16[$13_1 >> 1] | 0) | 0;
          $15_1 = Math_fround(HEAPF32[$14_1 >> 2]);
          $16_1 = Math_fround(HEAPF32[($14_1 + 4 | 0) >> 2]);
          $17_1 = Math_fround(HEAPF32[($14_1 + 8 | 0) >> 2]);
          HEAP32[($4_1 + 12 | 0) >> 2] = 0;
          HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround($6_1 * $17_1);
          HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround($7_1 * $16_1);
          HEAPF32[$4_1 >> 2] = Math_fround($8_1 * $15_1);
          $14_1 = $11_1 + Math_imul($12_1, HEAPU16[($13_1 + 2 | 0) >> 1] | 0) | 0;
          $15_1 = Math_fround(HEAPF32[$14_1 >> 2]);
          $16_1 = Math_fround(HEAPF32[($14_1 + 4 | 0) >> 2]);
          $17_1 = Math_fround(HEAPF32[($14_1 + 8 | 0) >> 2]);
          HEAP32[($4_1 + 28 | 0) >> 2] = 0;
          HEAPF32[($4_1 + 24 | 0) >> 2] = Math_fround($6_1 * $17_1);
          HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround($7_1 * $16_1);
          HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround($8_1 * $15_1);
          $11_1 = $11_1 + Math_imul($12_1, HEAPU16[($13_1 + 4 | 0) >> 1] | 0) | 0;
          $15_1 = Math_fround(HEAPF32[($11_1 + 8 | 0) >> 2]);
          $16_1 = Math_fround(HEAPF32[($11_1 + 4 | 0) >> 2]);
          $17_1 = Math_fround(HEAPF32[$11_1 >> 2]);
          HEAP32[($4_1 + 44 | 0) >> 2] = 0;
          HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround($8_1 * $17_1);
          HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround($7_1 * $16_1);
          HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround($6_1 * $15_1);
          FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $4_1, $9_1, $10_1);
          $10_1 = $10_1 + 1 | 0;
          if (($10_1 | 0) < (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0)) {
           continue label$10
          }
          break label$3;
         };
        case 2:
         break label$3;
        default:
         break label$6;
        };
       }
       if ((HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) < (1 | 0)) {
        break label$3
       }
       $10_1 = 0;
       label$11 : while (1) {
        $11_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
        $12_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
        $13_1 = (HEAP32[($4_1 + 72 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 68 | 0) >> 2] | 0, $10_1) | 0;
        $14_1 = $11_1 + Math_imul($12_1, HEAP32[$13_1 >> 2] | 0) | 0;
        $15_1 = Math_fround(HEAPF32[$14_1 >> 2]);
        $16_1 = Math_fround(HEAPF32[($14_1 + 4 | 0) >> 2]);
        $17_1 = Math_fround(HEAPF32[($14_1 + 8 | 0) >> 2]);
        HEAP32[($4_1 + 12 | 0) >> 2] = 0;
        HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround($6_1 * $17_1);
        HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround($7_1 * $16_1);
        HEAPF32[$4_1 >> 2] = Math_fround($8_1 * $15_1);
        $14_1 = $11_1 + Math_imul($12_1, HEAP32[($13_1 + 4 | 0) >> 2] | 0) | 0;
        $15_1 = Math_fround(HEAPF32[$14_1 >> 2]);
        $16_1 = Math_fround(HEAPF32[($14_1 + 4 | 0) >> 2]);
        $17_1 = Math_fround(HEAPF32[($14_1 + 8 | 0) >> 2]);
        HEAP32[($4_1 + 28 | 0) >> 2] = 0;
        HEAPF32[($4_1 + 24 | 0) >> 2] = Math_fround($6_1 * $17_1);
        HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround($7_1 * $16_1);
        HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround($8_1 * $15_1);
        $11_1 = $11_1 + Math_imul($12_1, HEAP32[($13_1 + 8 | 0) >> 2] | 0) | 0;
        $15_1 = Math_fround(HEAPF32[($11_1 + 8 | 0) >> 2]);
        $16_1 = Math_fround(HEAPF32[($11_1 + 4 | 0) >> 2]);
        $17_1 = Math_fround(HEAPF32[$11_1 >> 2]);
        HEAP32[($4_1 + 44 | 0) >> 2] = 0;
        HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround($8_1 * $17_1);
        HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround($7_1 * $16_1);
        HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround($6_1 * $15_1);
        FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $4_1, $9_1, $10_1);
        $10_1 = $10_1 + 1 | 0;
        if (($10_1 | 0) < (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0)) {
         continue label$11
        }
        break label$3;
       };
      case 1:
       break label$4;
      };
     }
     $10_1 = (HEAP32[($4_1 + 60 | 0) >> 2] | 0) + -2 | 0;
     if ($10_1 >>> 0 > 3 >>> 0) {
      break label$3
     }
     label$12 : {
      switch ($10_1 | 0) {
      case 3:
       if ((HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) < (1 | 0)) {
        break label$3
       }
       $10_1 = 0;
       label$15 : while (1) {
        $11_1 = (HEAP32[($4_1 + 72 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 68 | 0) >> 2] | 0, $10_1) | 0;
        $14_1 = HEAPU8[$11_1 >> 0] | 0;
        HEAP32[($4_1 + 12 | 0) >> 2] = 0;
        $12_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
        $13_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
        $14_1 = $12_1 + Math_imul($14_1, $13_1) | 0;
        HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround($6_1 * Math_fround(+HEAPF64[($14_1 + 16 | 0) >> 3]));
        HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround($7_1 * Math_fround(+HEAPF64[($14_1 + 8 | 0) >> 3]));
        HEAPF32[$4_1 >> 2] = Math_fround($8_1 * Math_fround(+HEAPF64[$14_1 >> 3]));
        $14_1 = HEAPU8[($11_1 + 1 | 0) >> 0] | 0;
        HEAP32[($4_1 + 28 | 0) >> 2] = 0;
        $14_1 = $12_1 + Math_imul($13_1, $14_1) | 0;
        HEAPF32[($4_1 + 24 | 0) >> 2] = Math_fround($6_1 * Math_fround(+HEAPF64[($14_1 + 16 | 0) >> 3]));
        HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround($7_1 * Math_fround(+HEAPF64[($14_1 + 8 | 0) >> 3]));
        HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround($8_1 * Math_fround(+HEAPF64[$14_1 >> 3]));
        $11_1 = $12_1 + Math_imul($13_1, HEAPU8[($11_1 + 2 | 0) >> 0] | 0) | 0;
        $18_1 = +HEAPF64[$11_1 >> 3];
        $19_1 = +HEAPF64[($11_1 + 8 | 0) >> 3];
        $20_1 = +HEAPF64[($11_1 + 16 | 0) >> 3];
        HEAP32[($4_1 + 44 | 0) >> 2] = 0;
        HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround($6_1 * Math_fround($20_1));
        HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround($7_1 * Math_fround($19_1));
        HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround($8_1 * Math_fround($18_1));
        FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $4_1, $9_1, $10_1);
        $10_1 = $10_1 + 1 | 0;
        if (($10_1 | 0) < (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0)) {
         continue label$15
        }
        break label$3;
       };
      case 1:
       if ((HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) < (1 | 0)) {
        break label$3
       }
       $10_1 = 0;
       label$16 : while (1) {
        HEAP32[($4_1 + 12 | 0) >> 2] = 0;
        HEAP32[($4_1 + 28 | 0) >> 2] = 0;
        $11_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
        $12_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
        $13_1 = (HEAP32[($4_1 + 72 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 68 | 0) >> 2] | 0, $10_1) | 0;
        $14_1 = $11_1 + Math_imul($12_1, HEAPU16[$13_1 >> 1] | 0) | 0;
        HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround($6_1 * Math_fround(+HEAPF64[($14_1 + 16 | 0) >> 3]));
        HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround($7_1 * Math_fround(+HEAPF64[($14_1 + 8 | 0) >> 3]));
        HEAPF32[$4_1 >> 2] = Math_fround($8_1 * Math_fround(+HEAPF64[$14_1 >> 3]));
        $14_1 = $11_1 + Math_imul($12_1, HEAPU16[($13_1 + 2 | 0) >> 1] | 0) | 0;
        HEAPF32[($4_1 + 24 | 0) >> 2] = Math_fround($6_1 * Math_fround(+HEAPF64[($14_1 + 16 | 0) >> 3]));
        HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround($7_1 * Math_fround(+HEAPF64[($14_1 + 8 | 0) >> 3]));
        HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround($8_1 * Math_fround(+HEAPF64[$14_1 >> 3]));
        HEAP32[($4_1 + 44 | 0) >> 2] = 0;
        $11_1 = $11_1 + Math_imul($12_1, HEAPU16[($13_1 + 4 | 0) >> 1] | 0) | 0;
        HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround($8_1 * Math_fround(+HEAPF64[$11_1 >> 3]));
        HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround($7_1 * Math_fround(+HEAPF64[($11_1 + 8 | 0) >> 3]));
        HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround($6_1 * Math_fround(+HEAPF64[($11_1 + 16 | 0) >> 3]));
        FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $4_1, $9_1, $10_1);
        $10_1 = $10_1 + 1 | 0;
        if (($10_1 | 0) < (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0)) {
         continue label$16
        }
        break label$3;
       };
      case 2:
       break label$3;
      default:
       break label$12;
      };
     }
     if ((HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$3
     }
     $10_1 = 0;
     label$17 : while (1) {
      HEAP32[($4_1 + 12 | 0) >> 2] = 0;
      HEAP32[($4_1 + 28 | 0) >> 2] = 0;
      $11_1 = HEAP32[($4_1 + 76 | 0) >> 2] | 0;
      $12_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
      $13_1 = (HEAP32[($4_1 + 72 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 68 | 0) >> 2] | 0, $10_1) | 0;
      $14_1 = $11_1 + Math_imul($12_1, HEAP32[$13_1 >> 2] | 0) | 0;
      HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround($6_1 * Math_fround(+HEAPF64[($14_1 + 16 | 0) >> 3]));
      HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround($7_1 * Math_fround(+HEAPF64[($14_1 + 8 | 0) >> 3]));
      HEAPF32[$4_1 >> 2] = Math_fround($8_1 * Math_fround(+HEAPF64[$14_1 >> 3]));
      $14_1 = $11_1 + Math_imul($12_1, HEAP32[($13_1 + 4 | 0) >> 2] | 0) | 0;
      HEAPF32[($4_1 + 24 | 0) >> 2] = Math_fround($6_1 * Math_fround(+HEAPF64[($14_1 + 16 | 0) >> 3]));
      HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround($7_1 * Math_fround(+HEAPF64[($14_1 + 8 | 0) >> 3]));
      HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround($8_1 * Math_fround(+HEAPF64[$14_1 >> 3]));
      HEAP32[($4_1 + 44 | 0) >> 2] = 0;
      $11_1 = $11_1 + Math_imul($12_1, HEAP32[($13_1 + 8 | 0) >> 2] | 0) | 0;
      HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround($8_1 * Math_fround(+HEAPF64[$11_1 >> 3]));
      HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround($7_1 * Math_fround(+HEAPF64[($11_1 + 8 | 0) >> 3]));
      HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround($6_1 * Math_fround(+HEAPF64[($11_1 + 16 | 0) >> 3]));
      FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $4_1, $9_1, $10_1);
      $10_1 = $10_1 + 1 | 0;
      if (($10_1 | 0) < (HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0)) {
       continue label$17
      }
      break label$17;
     };
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $9_1);
    $9_1 = $9_1 + 1 | 0;
    if (($9_1 | 0) != ($5_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $4_1 + 80 | 0;
 }
 
 function $518($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $9_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $6_1 = 0, $10_1 = 0, $13_1 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $5_1 = 0, $7_1 = 0, $344_1 = 0, $349_1 = 0, $354_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1) | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = $4_1;
  label$1 : {
   if (!$4_1) {
    break label$1
   }
   $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, 32, $4_1) | 0;
   $6_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($2_1, $6_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   label$2 : {
    $7_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1) | 0;
    if (($7_1 | 0) <= (0 | 0)) {
     break label$2
    }
    $8_1 = 0;
    label$3 : while (1) {
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1, $3_1 + 28 | 0, $3_1 + 4 | 0, $3_1 + 16 | 0, $3_1 + 8 | 0, $3_1 + 24 | 0, $3_1 + 20 | 0, $3_1, $3_1 + 12 | 0, $8_1);
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $6_1 + 16 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = HEAP32[$3_1 >> 2] | 0;
     HEAP32[($6_1 + 24 | 0) >> 2] = $4_1;
     HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     label$4 : {
      $9_1 = (HEAP32[($3_1 + 12 | 0) >> 2] | 0) + -2 | 0;
      if ($9_1 >>> 0 > 3 >>> 0) {
       break label$4
      }
      label$5 : {
       switch ($9_1 | 0) {
       default:
        if (!$4_1) {
         break label$4
        }
        $10_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, 4, Math_imul($4_1, 3)) | 0;
        $4_1 = HEAP32[($10_1 + 8 | 0) >> 2] | 0;
        (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($2_1, $4_1) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
        label$8 : {
         if ((HEAP32[$3_1 >> 2] | 0 | 0) < (1 | 0)) {
          break label$8
         }
         $9_1 = 0;
         $11_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
         label$9 : while (1) {
          $12_1 = $11_1 + Math_imul(HEAP32[($3_1 + 20 | 0) >> 2] | 0, $9_1) | 0;
          HEAP32[$4_1 >> 2] = HEAP32[$12_1 >> 2] | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
          HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($12_1 + 8 | 0) >> 2] | 0;
          $4_1 = $4_1 + 12 | 0;
          $9_1 = $9_1 + 1 | 0;
          if (($9_1 | 0) < (HEAP32[$3_1 >> 2] | 0 | 0)) {
           continue label$9
          }
          break label$9;
         };
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($2_1, $10_1, 14373, 1497453121, HEAP32[($10_1 + 8 | 0) >> 2] | 0);
        break label$4;
       case 1:
        if (!$4_1) {
         break label$4
        }
        $11_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, 8, $4_1) | 0;
        $4_1 = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
        (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($2_1, $4_1) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
        label$10 : {
         if ((HEAP32[$3_1 >> 2] | 0 | 0) < (1 | 0)) {
          break label$10
         }
         $9_1 = 0;
         label$11 : while (1) {
          $12_1 = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 20 | 0) >> 2] | 0, $9_1) | 0;
          HEAP16[$4_1 >> 1] = HEAPU16[$12_1 >> 1] | 0;
          HEAP16[($4_1 + 2 | 0) >> 1] = HEAPU16[($12_1 + 2 | 0) >> 1] | 0;
          $12_1 = HEAPU16[($12_1 + 4 | 0) >> 1] | 0;
          HEAP16[($4_1 + 6 | 0) >> 1] = 0;
          HEAP16[($4_1 + 4 | 0) >> 1] = $12_1;
          $4_1 = $4_1 + 8 | 0;
          $9_1 = $9_1 + 1 | 0;
          if (($9_1 | 0) < (HEAP32[$3_1 >> 2] | 0 | 0)) {
           continue label$11
          }
          break label$11;
         };
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($2_1, $11_1, 14388, 1497453121, HEAP32[($11_1 + 8 | 0) >> 2] | 0);
        break label$4;
       case 2:
        break label$4;
       case 3:
        break label$5;
       };
      }
      if (!$4_1) {
       break label$4
      }
      $11_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, 4, $4_1) | 0;
      $4_1 = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
      (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($2_1, $4_1) | 0), HEAP32[(wasm2js_i32$0 + 16 | 0) >> 2] = wasm2js_i32$1;
      label$12 : {
       if ((HEAP32[$3_1 >> 2] | 0 | 0) < (1 | 0)) {
        break label$12
       }
       $9_1 = 0;
       label$13 : while (1) {
        $12_1 = (HEAP32[($3_1 + 24 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 20 | 0) >> 2] | 0, $9_1) | 0;
        HEAP8[$4_1 >> 0] = HEAPU8[$12_1 >> 0] | 0;
        HEAP8[($4_1 + 1 | 0) >> 0] = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
        HEAP8[($4_1 + 2 | 0) >> 0] = HEAPU8[($12_1 + 2 | 0) >> 0] | 0;
        HEAP8[($4_1 + 3 | 0) >> 0] = 0;
        $4_1 = $4_1 + 4 | 0;
        $9_1 = $9_1 + 1 | 0;
        if (($9_1 | 0) < (HEAP32[$3_1 >> 2] | 0 | 0)) {
         continue label$13
        }
        break label$13;
       };
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($2_1, $11_1, 14415, 1497453121, HEAP32[($11_1 + 8 | 0) >> 2] | 0);
     }
     label$14 : {
      $4_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
      if ($4_1 >>> 0 > 1 >>> 0) {
       break label$14
      }
      label$15 : {
       switch ($4_1 | 0) {
       default:
        $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        if (!$4_1) {
         break label$14
        }
        $13_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, 16, $4_1) | 0;
        $4_1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
        (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($2_1, $4_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        label$17 : {
         $11_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
         if (($11_1 | 0) < (1 | 0)) {
          break label$17
         }
         $12_1 = 0;
         $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
         $9_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
         label$18 : while (1) {
          HEAP32[$4_1 >> 2] = HEAP32[$9_1 >> 2] | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
          HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($9_1 + 8 | 0) >> 2] | 0;
          $9_1 = $9_1 + $10_1 | 0;
          $4_1 = $4_1 + 16 | 0;
          $12_1 = $12_1 + 1 | 0;
          if (($12_1 | 0) < ($11_1 | 0)) {
           continue label$18
          }
          break label$18;
         };
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($2_1, $13_1, 14438, 1497453121, HEAP32[($13_1 + 8 | 0) >> 2] | 0);
        break label$14;
       case 1:
        break label$15;
       };
      }
      $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
      if (!$4_1) {
       break label$14
      }
      $13_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, 32, $4_1) | 0;
      $4_1 = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
      (wasm2js_i32$0 = $6_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($2_1, $4_1) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
      label$19 : {
       $11_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       if (($11_1 | 0) < (1 | 0)) {
        break label$19
       }
       $12_1 = 0;
       $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       $9_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
       label$20 : while (1) {
        i64toi32_i32$2 = $9_1;
        i64toi32_i32$0 = HEAP32[$9_1 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
        $344_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $4_1;
        HEAP32[$4_1 >> 2] = $344_1;
        HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $9_1 + 8 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $349_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $4_1 + 8 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $349_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $9_1 + 16 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $354_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $4_1 + 16 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $354_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        $9_1 = $9_1 + $10_1 | 0;
        $4_1 = $4_1 + 32 | 0;
        $12_1 = $12_1 + 1 | 0;
        if (($12_1 | 0) < ($11_1 | 0)) {
         continue label$20
        }
        break label$20;
       };
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($2_1, $13_1, 14457, 1497453121, HEAP32[($13_1 + 8 | 0) >> 2] | 0);
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $8_1);
     $6_1 = $6_1 + 32 | 0;
     $8_1 = $8_1 + 1 | 0;
     if (($8_1 | 0) != ($7_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($2_1, $5_1, 14477, 1497453121, HEAP32[($5_1 + 8 | 0) >> 2] | 0);
  }
  HEAP32[($1_1 + 24 | 0) >> 2] = 0;
  HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  HEAP32[($1_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  global$0 = $3_1 + 32 | 0;
  return 14492 | 0;
 }
 
 function $519($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 14564;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP8[($0_1 + 36 | 0) >> 0] = 1;
  $516($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $520($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 14564;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP8[($0_1 + 36 | 0) >> 0] = 1;
  $516($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $521($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $0_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($9_1 << 5 | 0) | 0;
  HEAP32[$2_1 >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[$3_1 >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[$8_1 >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
 }
 
 function $522($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $0_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($9_1 << 5 | 0) | 0;
  HEAP32[$2_1 >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[$1_1 >> 2] = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  HEAP32[$3_1 >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[$8_1 >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
 }
 
 function $523($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0) | 0;
 }
 
 function $524($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $10_1 = 0, $13_1 = 0, $18_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 60 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = $13_1;
  HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $18_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 76 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $18_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 1;
 }
 
 function $525($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $10_1 = 0, $15_1 = 0, $18_1 = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 60 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0_1 + 76 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 72 | 0) >> 2] | 0;
  $18_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[i64toi32_i32$1 >> 2] = $18_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $526($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $527($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $528($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $61_1 = 0, $66_1 = 0, $71_1 = 0, $76_1 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[($0_1 + 4 | 0) >> 2] = 1065353216;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 14676;
  HEAP8[($0_1 + 36 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  $4_1 = $0_1 + 24 | 0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 100 | 0) >> 0] = 1;
  HEAP32[($0_1 + 96 | 0) >> 2] = 0;
  HEAP8[($0_1 + 120 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 88 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 116 | 0) >> 2] = 0;
  HEAP8[($0_1 + 140 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 108 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 136 | 0) >> 2] = 0;
  HEAP8[($0_1 + 160 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 128 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 168 | 0) >> 2] = 0;
  HEAP8[($0_1 + 164 | 0) >> 0] = $1_1;
  i64toi32_i32$1 = $0_1 + 148 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 156 | 0) >> 2] = 0;
  HEAP8[($0_1 + 165 | 0) >> 0] = $2_1;
  $5_1 = $79(32 | 0, 16 | 0) | 0;
  label$1 : {
   $4_1 = HEAP32[$4_1 >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = $5_1 + $3_1 | 0;
    $1_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $3_1 | 0;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $61_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[i64toi32_i32$0 >> 2] = $61_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $66_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1 + 24 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $66_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $1_1 + 16 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $71_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1 + 16 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $71_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $76_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $76_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $3_1 = $3_1 + 32 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($3_1 | 0);
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 32 | 0) >> 2] = $5_1;
  HEAP8[($0_1 + 36 | 0) >> 0] = 1;
  HEAP32[($0_1 + 28 | 0) >> 2] = 1;
  $3_1 = $5_1 + ((HEAP32[($0_1 + 24 | 0) >> 2] | 0) << 5 | 0) | 0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 2;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 16;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 12;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 1 | 0;
  $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  $2_1 = HEAPU8[($0_1 + 164 | 0) >> 0] | 0;
  HEAP32[($3_1 + 24 | 0) >> 2] = $2_1 ? 2 : 3;
  $4_1 = HEAP32[($0_1 + ($2_1 ? 128 : 148) | 0) >> 2] | 0;
  $1_1 = 12;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 ? 12 : 6;
  HEAP32[$3_1 >> 2] = ($4_1 | 0) / (3 | 0) | 0;
  label$5 : {
   label$6 : {
    if (!(HEAPU8[($0_1 + 165 | 0) >> 0] | 0)) {
     break label$6
    }
    $2_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
    $1_1 = 16;
    break label$5;
   }
   $2_1 = (HEAP32[($0_1 + 108 | 0) >> 2] | 0 | 0) / (3 | 0) | 0;
  }
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $529($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 164 | 0) >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
    if (($2_1 | 0) != (HEAP32[($0_1 + 132 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $3_1 = $2_1 ? $2_1 << 1 | 0 : 1;
    if (($2_1 | 0) >= ($3_1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($3_1) {
       break label$4
      }
      $4_1 = 0;
      break label$3;
     }
     $4_1 = $79($3_1 << 2 | 0 | 0, 16 | 0) | 0;
     $2_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
    }
    $5_1 = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
    label$5 : {
     label$6 : {
      label$7 : {
       if (($2_1 | 0) < (1 | 0)) {
        break label$7
       }
       $6_1 = $4_1;
       $7_1 = $5_1;
       label$8 : while (1) {
        HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
        $6_1 = $6_1 + 4 | 0;
        $7_1 = $7_1 + 4 | 0;
        $2_1 = $2_1 + -1 | 0;
        if ($2_1) {
         continue label$8
        }
        break label$6;
       };
      }
      if (!$5_1) {
       break label$5
      }
     }
     label$9 : {
      if (!(HEAPU8[($0_1 + 140 | 0) >> 0] | 0)) {
       break label$9
      }
      $80($5_1 | 0);
     }
     HEAP32[($0_1 + 136 | 0) >> 2] = 0;
     $2_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 136 | 0) >> 2] = $4_1;
    HEAP32[($0_1 + 132 | 0) >> 2] = $3_1;
    HEAP8[($0_1 + 140 | 0) >> 0] = 1;
   }
   $6_1 = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
   HEAP32[($6_1 + ($2_1 << 2 | 0) | 0) >> 2] = $1_1;
   HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 128 | 0) >> 2] = (HEAP32[($0_1 + 128 | 0) >> 2] | 0) + 1 | 0;
   return;
  }
  label$10 : {
   $3_1 = HEAP32[($0_1 + 148 | 0) >> 2] | 0;
   if (($3_1 | 0) != (HEAP32[($0_1 + 152 | 0) >> 2] | 0 | 0)) {
    break label$10
   }
   $4_1 = $3_1 ? $3_1 << 1 | 0 : 1;
   if (($3_1 | 0) >= ($4_1 | 0)) {
    break label$10
   }
   label$11 : {
    label$12 : {
     if ($4_1) {
      break label$12
     }
     $5_1 = 0;
     break label$11;
    }
    $5_1 = $79($4_1 << 1 | 0 | 0, 16 | 0) | 0;
    $3_1 = HEAP32[($0_1 + 148 | 0) >> 2] | 0;
   }
   $8_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
   label$13 : {
    label$14 : {
     label$15 : {
      if (($3_1 | 0) < (1 | 0)) {
       break label$15
      }
      $6_1 = $5_1;
      $7_1 = $8_1;
      $2_1 = $3_1;
      label$16 : while (1) {
       HEAP16[$6_1 >> 1] = HEAPU16[$7_1 >> 1] | 0;
       $6_1 = $6_1 + 2 | 0;
       $7_1 = $7_1 + 2 | 0;
       $2_1 = $2_1 + -1 | 0;
       if ($2_1) {
        continue label$16
       }
       break label$14;
      };
     }
     if (!$8_1) {
      break label$13
     }
    }
    label$17 : {
     if (!(HEAPU8[($0_1 + 160 | 0) >> 0] | 0)) {
      break label$17
     }
     $80($8_1 | 0);
     $3_1 = HEAP32[($0_1 + 148 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 156 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 156 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 152 | 0) >> 2] = $4_1;
   HEAP8[($0_1 + 160 | 0) >> 0] = 1;
  }
  HEAP32[($0_1 + 148 | 0) >> 2] = $3_1 + 1 | 0;
  $6_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] = $6_1;
  HEAP16[($6_1 + ($3_1 << 1 | 0) | 0) >> 1] = $1_1;
 }
 
 function $530($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $12_1 = 0, $8_1 = 0, $11_1 = 0, $3_1 = 0, $10_1 = 0, $9_1 = Math_fround(0), $13_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $41_1 = Math_fround(0), $50_1 = Math_fround(0), $105_1 = 0, $110_1 = 0, $144_1 = 0, $149_1 = 0, $184_1 = Math_fround(0), $193_1 = Math_fround(0);
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 165 | 0) >> 0] | 0)) {
     break label$2
    }
    label$3 : {
     $3_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
     if (($3_1 | 0) < (1 | 0)) {
      break label$3
     }
     if (!$2_1) {
      break label$3
     }
     $2_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
     $4_1 = Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]);
     $5_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
     $6_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
     $7_1 = Math_fround(HEAPF32[$1_1 >> 2]);
     $8_1 = 0;
     label$4 : while (1) {
      $9_1 = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) - $7_1);
      $41_1 = Math_fround($9_1 * $9_1);
      $9_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) - $6_1);
      $50_1 = Math_fround($41_1 + Math_fround($9_1 * $9_1));
      $9_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) - $5_1);
      if (Math_fround($50_1 + Math_fround($9_1 * $9_1)) <= $4_1) {
       break label$1
      }
      $2_1 = $2_1 + 16 | 0;
      $8_1 = $8_1 + 1 | 0;
      if (($8_1 | 0) < ($3_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    label$5 : {
     if (($3_1 | 0) != (HEAP32[($0_1 + 92 | 0) >> 2] | 0 | 0)) {
      break label$5
     }
     $10_1 = $3_1 ? $3_1 << 1 | 0 : 1;
     if (($3_1 | 0) >= ($10_1 | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       if ($10_1) {
        break label$7
       }
       $11_1 = 0;
       break label$6;
      }
      $11_1 = $79($10_1 << 4 | 0 | 0, 16 | 0) | 0;
      $3_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
     }
     label$8 : {
      if (($3_1 | 0) < (1 | 0)) {
       break label$8
      }
      $2_1 = 0;
      label$9 : while (1) {
       $8_1 = $11_1 + $2_1 | 0;
       $12_1 = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + $2_1 | 0;
       i64toi32_i32$2 = $12_1;
       i64toi32_i32$0 = HEAP32[$12_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
       $105_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[$8_1 >> 2] = $105_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $12_1 + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $110_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $110_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $2_1 = $2_1 + 16 | 0;
       $3_1 = $3_1 + -1 | 0;
       if ($3_1) {
        continue label$9
       }
       break label$9;
      };
     }
     label$10 : {
      $2_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$10
      }
      label$11 : {
       if (!(HEAPU8[($0_1 + 100 | 0) >> 0] | 0)) {
        break label$11
       }
       $80($2_1 | 0);
      }
      HEAP32[($0_1 + 96 | 0) >> 2] = 0;
     }
     HEAP32[($0_1 + 96 | 0) >> 2] = $11_1;
     HEAP32[($0_1 + 92 | 0) >> 2] = $10_1;
     HEAP8[($0_1 + 100 | 0) >> 0] = 1;
     $3_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
    }
    $2_1 = $0_1 + 96 | 0;
    $8_1 = (HEAP32[$2_1 >> 2] | 0) + ($3_1 << 4 | 0) | 0;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $144_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $8_1;
    HEAP32[$8_1 >> 2] = $144_1;
    HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $149_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $8_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $149_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
    HEAP32[($0_1 + 88 | 0) >> 2] = $2_1 + 1 | 0;
    return $2_1 | 0;
   }
   label$12 : {
    $12_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
    if (($12_1 | 0) < (1 | 0)) {
     break label$12
    }
    if (!$2_1) {
     break label$12
    }
    $2_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
    $4_1 = Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    $7_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $8_1 = 0;
    $3_1 = 0;
    label$13 : while (1) {
     $9_1 = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) - $7_1);
     $184_1 = Math_fround($9_1 * $9_1);
     $9_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) - $6_1);
     $193_1 = Math_fround($184_1 + Math_fround($9_1 * $9_1));
     $9_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) - $5_1);
     if (!(Math_fround($193_1 + Math_fround($9_1 * $9_1)) <= $4_1 ^ 1 | 0)) {
      break label$1
     }
     $2_1 = $2_1 + 12 | 0;
     $8_1 = $8_1 + 1 | 0;
     $3_1 = $3_1 + 3 | 0;
     if (($3_1 | 0) < ($12_1 | 0)) {
      continue label$13
     }
     break label$13;
    };
   }
   label$14 : {
    $11_1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
    if (($12_1 | 0) != ($11_1 | 0)) {
     break label$14
    }
    label$15 : {
     $11_1 = $12_1 ? $12_1 << 1 | 0 : 1;
     if (($12_1 | 0) < ($11_1 | 0)) {
      break label$15
     }
     $11_1 = $12_1;
     break label$14;
    }
    label$16 : {
     label$17 : {
      if ($11_1) {
       break label$17
      }
      $10_1 = 0;
      break label$16;
     }
     $10_1 = $79($11_1 << 2 | 0 | 0, 16 | 0) | 0;
     $12_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
    }
    $13_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
    label$18 : {
     label$19 : {
      label$20 : {
       if (($12_1 | 0) < (1 | 0)) {
        break label$20
       }
       $2_1 = $10_1;
       $8_1 = $13_1;
       $3_1 = $12_1;
       label$21 : while (1) {
        HEAP32[$2_1 >> 2] = HEAP32[$8_1 >> 2] | 0;
        $2_1 = $2_1 + 4 | 0;
        $8_1 = $8_1 + 4 | 0;
        $3_1 = $3_1 + -1 | 0;
        if ($3_1) {
         continue label$21
        }
        break label$19;
       };
      }
      if (!$13_1) {
       break label$18
      }
     }
     label$22 : {
      if (!(HEAPU8[($0_1 + 120 | 0) >> 0] | 0)) {
       break label$22
      }
      $80($13_1 | 0);
      $12_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
     }
     HEAP32[($0_1 + 116 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 116 | 0) >> 2] = $10_1;
    HEAP32[($0_1 + 112 | 0) >> 2] = $11_1;
    HEAP8[($0_1 + 120 | 0) >> 0] = 1;
   }
   $2_1 = $12_1 + 1 | 0;
   HEAP32[($0_1 + 108 | 0) >> 2] = $2_1;
   $13_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   HEAP32[($13_1 + ($12_1 << 2 | 0) | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
   label$23 : {
    label$24 : {
     if (($2_1 | 0) == ($11_1 | 0)) {
      break label$24
     }
     $10_1 = $13_1;
     $12_1 = $11_1;
     $11_1 = $2_1;
     break label$23;
    }
    label$25 : {
     $12_1 = $11_1 ? $11_1 << 1 | 0 : 1;
     if (($11_1 | 0) < ($12_1 | 0)) {
      break label$25
     }
     $10_1 = $13_1;
     $12_1 = $11_1;
     break label$23;
    }
    label$26 : {
     label$27 : {
      if ($12_1) {
       break label$27
      }
      $10_1 = 0;
      break label$26;
     }
     $10_1 = $79($12_1 << 2 | 0 | 0, 16 | 0) | 0;
     $13_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     $11_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
    }
    label$28 : {
     label$29 : {
      label$30 : {
       if (($11_1 | 0) < (1 | 0)) {
        break label$30
       }
       $2_1 = $10_1;
       $8_1 = $13_1;
       $3_1 = $11_1;
       label$31 : while (1) {
        HEAP32[$2_1 >> 2] = HEAP32[$8_1 >> 2] | 0;
        $2_1 = $2_1 + 4 | 0;
        $8_1 = $8_1 + 4 | 0;
        $3_1 = $3_1 + -1 | 0;
        if ($3_1) {
         continue label$31
        }
        break label$29;
       };
      }
      if (!$13_1) {
       break label$28
      }
     }
     label$32 : {
      if (!(HEAPU8[($0_1 + 120 | 0) >> 0] | 0)) {
       break label$32
      }
      $80($13_1 | 0);
      $11_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
     }
     HEAP32[($0_1 + 116 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 116 | 0) >> 2] = $10_1;
    HEAP32[($0_1 + 112 | 0) >> 2] = $12_1;
    HEAP8[($0_1 + 120 | 0) >> 0] = 1;
   }
   $2_1 = $11_1 + 1 | 0;
   HEAP32[($0_1 + 108 | 0) >> 2] = $2_1;
   HEAP32[($10_1 + ($11_1 << 2 | 0) | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   label$33 : {
    label$34 : {
     if (($2_1 | 0) == ($12_1 | 0)) {
      break label$34
     }
     $11_1 = $10_1;
     $12_1 = $2_1;
     break label$33;
    }
    label$35 : {
     $13_1 = $12_1 ? $12_1 << 1 | 0 : 1;
     if (($12_1 | 0) < ($13_1 | 0)) {
      break label$35
     }
     $11_1 = $10_1;
     break label$33;
    }
    label$36 : {
     label$37 : {
      if ($13_1) {
       break label$37
      }
      $11_1 = 0;
      break label$36;
     }
     $11_1 = $79($13_1 << 2 | 0 | 0, 16 | 0) | 0;
     $10_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     $12_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
    }
    label$38 : {
     label$39 : {
      label$40 : {
       if (($12_1 | 0) < (1 | 0)) {
        break label$40
       }
       $2_1 = $11_1;
       $8_1 = $10_1;
       $3_1 = $12_1;
       label$41 : while (1) {
        HEAP32[$2_1 >> 2] = HEAP32[$8_1 >> 2] | 0;
        $2_1 = $2_1 + 4 | 0;
        $8_1 = $8_1 + 4 | 0;
        $3_1 = $3_1 + -1 | 0;
        if ($3_1) {
         continue label$41
        }
        break label$39;
       };
      }
      if (!$10_1) {
       break label$38
      }
     }
     label$42 : {
      if (!(HEAPU8[($0_1 + 120 | 0) >> 0] | 0)) {
       break label$42
      }
      $80($10_1 | 0);
      $12_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
     }
     HEAP32[($0_1 + 116 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 116 | 0) >> 2] = $11_1;
    HEAP32[($0_1 + 112 | 0) >> 2] = $13_1;
    HEAP8[($0_1 + 120 | 0) >> 0] = 1;
   }
   $8_1 = $12_1 + 1 | 0;
   HEAP32[($0_1 + 108 | 0) >> 2] = $8_1;
   HEAP32[($11_1 + ($12_1 << 2 | 0) | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $11_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
   $8_1 = (($8_1 | 0) / (3 | 0) | 0) + -1 | 0;
  }
  return $8_1 | 0;
 }
 
 function $531($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 1 | 0;
  $529($0_1 | 0, $530($0_1 | 0, $1_1 | 0, $4_1 | 0) | 0 | 0);
  $529($0_1 | 0, $530($0_1 | 0, $2_1 | 0, $4_1 | 0) | 0 | 0);
  $529($0_1 | 0, $530($0_1 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0);
 }
 
 function $532($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0, $6_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $33_1 = 0, $38_1 = 0;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 165 | 0) >> 0] | 0)) {
     break label$2
    }
    if ((HEAP32[($0_1 + 92 | 0) >> 2] | 0 | 0) >= ($1_1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if ($1_1) {
       break label$4
      }
      $2_1 = 0;
      break label$3;
     }
     $2_1 = $79($1_1 << 4 | 0 | 0, 16 | 0) | 0;
    }
    label$5 : {
     $3_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
     if (($3_1 | 0) < (1 | 0)) {
      break label$5
     }
     $4_1 = 0;
     label$6 : while (1) {
      $5_1 = $2_1 + $4_1 | 0;
      $6_1 = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + $4_1 | 0;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      $33_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1;
      HEAP32[$5_1 >> 2] = $33_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $6_1 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $38_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $5_1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $38_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $4_1 = $4_1 + 16 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     $4_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$7
     }
     label$8 : {
      if (!(HEAPU8[($0_1 + 100 | 0) >> 0] | 0)) {
       break label$8
      }
      $80($4_1 | 0);
     }
     HEAP32[($0_1 + 96 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 96 | 0) >> 2] = $2_1;
    HEAP32[($0_1 + 92 | 0) >> 2] = $1_1;
    HEAP8[($0_1 + 100 | 0) >> 0] = 1;
    return;
   }
   if ((HEAP32[($0_1 + 112 | 0) >> 2] | 0 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   label$9 : {
    label$10 : {
     if ($1_1) {
      break label$10
     }
     $6_1 = 0;
     break label$9;
    }
    $6_1 = $79($1_1 << 2 | 0 | 0, 16 | 0) | 0;
   }
   $2_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   label$11 : {
    label$12 : {
     label$13 : {
      $5_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
      if (($5_1 | 0) < (1 | 0)) {
       break label$13
      }
      $4_1 = $6_1;
      $3_1 = $2_1;
      label$14 : while (1) {
       HEAP32[$4_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
       $4_1 = $4_1 + 4 | 0;
       $3_1 = $3_1 + 4 | 0;
       $5_1 = $5_1 + -1 | 0;
       if ($5_1) {
        continue label$14
       }
       break label$12;
      };
     }
     if (!$2_1) {
      break label$11
     }
    }
    label$15 : {
     if (!(HEAPU8[($0_1 + 120 | 0) >> 0] | 0)) {
      break label$15
     }
     $80($2_1 | 0);
    }
    HEAP32[($0_1 + 116 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 116 | 0) >> 2] = $6_1;
   HEAP32[($0_1 + 112 | 0) >> 2] = $1_1;
   HEAP8[($0_1 + 120 | 0) >> 0] = 1;
  }
 }
 
 function $533($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 164 | 0) >> 0] | 0)) {
     break label$2
    }
    if ((HEAP32[($0_1 + 132 | 0) >> 2] | 0 | 0) >= ($1_1 | 0)) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if ($1_1) {
       break label$4
      }
      $2_1 = 0;
      break label$3;
     }
     $2_1 = $79($1_1 << 2 | 0 | 0, 16 | 0) | 0;
    }
    $3_1 = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
    label$5 : {
     label$6 : {
      label$7 : {
       $4_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
       if (($4_1 | 0) < (1 | 0)) {
        break label$7
       }
       $5_1 = $2_1;
       $6_1 = $3_1;
       label$8 : while (1) {
        HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
        $5_1 = $5_1 + 4 | 0;
        $6_1 = $6_1 + 4 | 0;
        $4_1 = $4_1 + -1 | 0;
        if ($4_1) {
         continue label$8
        }
        break label$6;
       };
      }
      if (!$3_1) {
       break label$5
      }
     }
     label$9 : {
      if (!(HEAPU8[($0_1 + 140 | 0) >> 0] | 0)) {
       break label$9
      }
      $80($3_1 | 0);
     }
     HEAP32[($0_1 + 136 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 136 | 0) >> 2] = $2_1;
    HEAP32[($0_1 + 132 | 0) >> 2] = $1_1;
    HEAP8[($0_1 + 140 | 0) >> 0] = 1;
    return;
   }
   if ((HEAP32[($0_1 + 152 | 0) >> 2] | 0 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   label$10 : {
    label$11 : {
     if ($1_1) {
      break label$11
     }
     $2_1 = 0;
     break label$10;
    }
    $2_1 = $79($1_1 << 1 | 0 | 0, 16 | 0) | 0;
   }
   $3_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
   label$12 : {
    label$13 : {
     label$14 : {
      $4_1 = HEAP32[($0_1 + 148 | 0) >> 2] | 0;
      if (($4_1 | 0) < (1 | 0)) {
       break label$14
      }
      $5_1 = $2_1;
      $6_1 = $3_1;
      label$15 : while (1) {
       HEAP16[$5_1 >> 1] = HEAPU16[$6_1 >> 1] | 0;
       $5_1 = $5_1 + 2 | 0;
       $6_1 = $6_1 + 2 | 0;
       $4_1 = $4_1 + -1 | 0;
       if ($4_1) {
        continue label$15
       }
       break label$13;
      };
     }
     if (!$3_1) {
      break label$12
     }
    }
    label$16 : {
     if (!(HEAPU8[($0_1 + 160 | 0) >> 0] | 0)) {
      break label$16
     }
     $80($3_1 | 0);
    }
    HEAP32[($0_1 + 156 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 156 | 0) >> 2] = $2_1;
   HEAP32[($0_1 + 152 | 0) >> 2] = $1_1;
   HEAP8[($0_1 + 160 | 0) >> 0] = 1;
  }
 }
 
 function $534($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 14676;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 160 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 156 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 156 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 148 | 0) >> 2] = 0;
  HEAP32[($0_1 + 152 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 160 | 0) >> 0] = 1;
  label$3 : {
   $1_1 = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 140 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 136 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 136 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 128 | 0) >> 2] = 0;
  HEAP32[($0_1 + 132 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 140 | 0) >> 0] = 1;
  label$5 : {
   $1_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   label$6 : {
    if (!(HEAPU8[($0_1 + 120 | 0) >> 0] | 0)) {
     break label$6
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 116 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 116 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 108 | 0) >> 2] = 0;
  HEAP32[($0_1 + 112 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 120 | 0) >> 0] = 1;
  label$7 : {
   $1_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$7
   }
   label$8 : {
    if (!(HEAPU8[($0_1 + 100 | 0) >> 0] | 0)) {
     break label$8
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 96 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 96 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  HEAP32[($0_1 + 92 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 100 | 0) >> 0] = 1;
  $519($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $535($0_1) {
  $0_1 = $0_1 | 0;
  $80($534($0_1 | 0) | 0 | 0);
 }
 
 function $536($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $537($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $538($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $539($0_1) {
  $0_1 = $0_1 | 0;
  return 28 | 0;
 }
 
 function $540($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $8_1 = Math_fround(0), $7_1 = 0, i64toi32_i32$1 = 0, $14_1 = Math_fround(0), $17_1 = Math_fround(0), i64toi32_i32$0 = 0, $13_1 = Math_fround(0), $16_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $27_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $12_1 = 0, $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $15_1 = 0, $32_1 = Math_fround(0), $33_1 = Math_fround(0);
  $6_1 = global$0 - 544 | 0;
  global$0 = $6_1;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = 0;
  i64toi32_i32$1 = $5_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($6_1 + 388 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 384 | 0) >> 2] = $0_1;
  $8_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]);
  $0_1 = $1_1 + 20 | 0;
  $10_1 = Math_fround(HEAPF32[$0_1 >> 2]);
  $2_1 = $1_1 + 36 | 0;
  $11_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $12_1 = $1_1 + 24 | 0;
  $13_1 = Math_fround(HEAPF32[$12_1 >> 2]);
  $14_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
  $15_1 = $1_1 + 40 | 0;
  $16_1 = Math_fround(HEAPF32[$15_1 >> 2]);
  $17_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $20_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $24_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $25_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $27_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
  HEAP32[(($6_1 + 384 | 0) + 52 | 0) >> 2] = 0;
  HEAP32[(($6_1 + 384 | 0) + 36 | 0) >> 2] = 0;
  HEAP32[(($6_1 + 384 | 0) + 20 | 0) >> 2] = 0;
  $28_1 = Math_fround(Math_fround(Math_fround($26_1 * $27_1) + Math_fround($13_1 * $14_1)) + Math_fround($16_1 * $17_1));
  HEAPF32[($6_1 + 432 | 0) >> 2] = $28_1;
  $29_1 = Math_fround(Math_fround(Math_fround($25_1 * $27_1) + Math_fround($10_1 * $14_1)) + Math_fround($11_1 * $17_1));
  HEAPF32[($6_1 + 428 | 0) >> 2] = $29_1;
  $14_1 = Math_fround(Math_fround(Math_fround($23_1 * $27_1) + Math_fround($24_1 * $14_1)) + Math_fround($22_1 * $17_1));
  HEAPF32[(($6_1 + 384 | 0) + 40 | 0) >> 2] = $14_1;
  $17_1 = Math_fround(Math_fround(Math_fround($26_1 * $21_1) + Math_fround($13_1 * $8_1)) + Math_fround($16_1 * $9_1));
  HEAPF32[(($6_1 + 384 | 0) + 32 | 0) >> 2] = $17_1;
  $27_1 = Math_fround(Math_fround(Math_fround($25_1 * $21_1) + Math_fround($10_1 * $8_1)) + Math_fround($11_1 * $9_1));
  HEAPF32[($6_1 + 412 | 0) >> 2] = $27_1;
  $8_1 = Math_fround(Math_fround(Math_fround($23_1 * $21_1) + Math_fround($24_1 * $8_1)) + Math_fround($22_1 * $9_1));
  HEAPF32[(($6_1 + 384 | 0) + 24 | 0) >> 2] = $8_1;
  $9_1 = Math_fround(Math_fround(Math_fround($19_1 * $26_1) + Math_fround($20_1 * $13_1)) + Math_fround($18_1 * $16_1));
  HEAPF32[(($6_1 + 384 | 0) + 16 | 0) >> 2] = $9_1;
  $10_1 = Math_fround(Math_fround(Math_fround($19_1 * $25_1) + Math_fround($20_1 * $10_1)) + Math_fround($18_1 * $11_1));
  HEAPF32[($6_1 + 396 | 0) >> 2] = $10_1;
  $11_1 = Math_fround(Math_fround(Math_fround($19_1 * $23_1) + Math_fround($20_1 * $24_1)) + Math_fround($18_1 * $22_1));
  HEAPF32[($6_1 + 392 | 0) >> 2] = $11_1;
  $13_1 = Math_fround(HEAPF32[$0_1 >> 2]);
  $16_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $18_1 = Math_fround(HEAPF32[$12_1 >> 2]);
  $19_1 = Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[$15_1 >> 2]);
  $22_1 = Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $25_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $30_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $31_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $32_1 = Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]);
  $33_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  HEAP32[($6_1 + 508 | 0) >> 2] = 0;
  HEAP32[($6_1 + 500 | 0) >> 2] = 0;
  HEAP32[($6_1 + 484 | 0) >> 2] = 0;
  HEAPF32[($6_1 + 480 | 0) >> 2] = $28_1;
  HEAPF32[($6_1 + 476 | 0) >> 2] = $17_1;
  HEAPF32[($6_1 + 472 | 0) >> 2] = $9_1;
  HEAP32[($6_1 + 468 | 0) >> 2] = 0;
  HEAPF32[($6_1 + 464 | 0) >> 2] = $29_1;
  HEAPF32[($6_1 + 460 | 0) >> 2] = $27_1;
  HEAPF32[($6_1 + 456 | 0) >> 2] = $10_1;
  HEAP32[($6_1 + 452 | 0) >> 2] = 0;
  HEAPF32[($6_1 + 448 | 0) >> 2] = $14_1;
  HEAPF32[($6_1 + 444 | 0) >> 2] = $8_1;
  $8_1 = Math_fround($32_1 - $33_1);
  $9_1 = Math_fround($19_1 - $20_1);
  $10_1 = Math_fround($22_1 - $23_1);
  HEAPF32[($6_1 + 496 | 0) >> 2] = Math_fround(Math_fround(Math_fround($31_1 * $8_1) + Math_fround($18_1 * $9_1)) + Math_fround($21_1 * $10_1));
  HEAPF32[($6_1 + 492 | 0) >> 2] = Math_fround(Math_fround(Math_fround($8_1 * $30_1) + Math_fround($9_1 * $13_1)) + Math_fround($10_1 * $16_1));
  HEAPF32[($6_1 + 488 | 0) >> 2] = Math_fround(Math_fround(Math_fround($8_1 * $24_1) + Math_fround($9_1 * $25_1)) + Math_fround($10_1 * $26_1));
  HEAP32[($6_1 + 504 | 0) >> 2] = 348;
  HEAPF32[($6_1 + 440 | 0) >> 2] = $11_1;
  i64toi32_i32$1 = $6_1 + 136 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 128 | 0) >> 2] = 0;
  HEAP32[($6_1 + 132 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 364 | 0) >> 2] = 0;
  HEAP32[($6_1 + 368 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($6_1 + 376 | 0) >> 2] = 2;
  HEAP32[($6_1 + 144 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = $541($6_1 | 0, $6_1 + 384 | 0 | 0, $4_1 | 0) | 0;
     if ($3_1) {
      break label$3
     }
     label$4 : {
      $7_1 = HEAP32[($6_1 + 372 | 0) >> 2] | 0;
      if (HEAP32[($7_1 + 32 | 0) >> 2] | 0) {
       break label$4
      }
      $13_1 = Math_fround(0.0);
      $14_1 = Math_fround(0.0);
      $16_1 = Math_fround(0.0);
      $17_1 = Math_fround(0.0);
      $18_1 = Math_fround(0.0);
      $19_1 = Math_fround(0.0);
      break label$2;
     }
     $19_1 = Math_fround(0.0);
     $3_1 = 0;
     $0_1 = 0;
     $18_1 = Math_fround(0.0);
     $17_1 = Math_fround(0.0);
     $16_1 = Math_fround(0.0);
     $14_1 = Math_fround(0.0);
     $13_1 = Math_fround(0.0);
     label$5 : while (1) {
      $2_1 = HEAP32[($6_1 + 508 | 0) >> 2] | 0;
      $4_1 = (HEAP32[($6_1 + 384 | 0) >> 2] | 0) + ($2_1 >> 1 | 0) | 0;
      $7_1 = $7_1 + $3_1 | 0;
      $8_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
      $12_1 = HEAP32[$7_1 >> 2] | 0;
      $7_1 = HEAP32[($6_1 + 504 | 0) >> 2] | 0;
      label$6 : {
       if (!($2_1 & 1 | 0)) {
        break label$6
       }
       $7_1 = HEAP32[((HEAP32[$4_1 >> 2] | 0) + $7_1 | 0) >> 2] | 0;
      }
      FUNCTION_TABLE[$7_1]($6_1 + 528 | 0, $4_1, $12_1);
      $2_1 = HEAP32[($6_1 + 508 | 0) >> 2] | 0;
      $4_1 = (HEAP32[($6_1 + 388 | 0) >> 2] | 0) + ($2_1 >> 1 | 0) | 0;
      $20_1 = Math_fround($8_1 * Math_fround(HEAPF32[($6_1 + 536 | 0) >> 2]));
      $21_1 = Math_fround($8_1 * Math_fround(HEAPF32[($6_1 + 532 | 0) >> 2]));
      $22_1 = Math_fround($8_1 * Math_fround(HEAPF32[($6_1 + 528 | 0) >> 2]));
      $7_1 = HEAP32[((HEAP32[($6_1 + 372 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
      $9_1 = Math_fround(-Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]));
      $10_1 = Math_fround(-Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]));
      $11_1 = Math_fround(-Math_fround(HEAPF32[$7_1 >> 2]));
      $7_1 = HEAP32[($6_1 + 504 | 0) >> 2] | 0;
      label$7 : {
       if (!($2_1 & 1 | 0)) {
        break label$7
       }
       $7_1 = HEAP32[((HEAP32[$4_1 >> 2] | 0) + $7_1 | 0) >> 2] | 0;
      }
      $19_1 = Math_fround($19_1 + $20_1);
      $18_1 = Math_fround($18_1 + $21_1);
      $17_1 = Math_fround($17_1 + $22_1);
      HEAP32[($6_1 + 524 | 0) >> 2] = 0;
      HEAPF32[($6_1 + 520 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6_1 + 424 | 0) >> 2]) * $11_1) + Math_fround(Math_fround(HEAPF32[($6_1 + 428 | 0) >> 2]) * $10_1)) + Math_fround(Math_fround(HEAPF32[($6_1 + 432 | 0) >> 2]) * $9_1));
      HEAPF32[($6_1 + 516 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6_1 + 408 | 0) >> 2]) * $11_1) + Math_fround(Math_fround(HEAPF32[($6_1 + 412 | 0) >> 2]) * $10_1)) + Math_fround(Math_fround(HEAPF32[($6_1 + 416 | 0) >> 2]) * $9_1));
      HEAPF32[($6_1 + 512 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6_1 + 392 | 0) >> 2]) * $11_1) + Math_fround(Math_fround(HEAPF32[($6_1 + 396 | 0) >> 2]) * $10_1)) + Math_fround(Math_fround(HEAPF32[($6_1 + 400 | 0) >> 2]) * $9_1));
      FUNCTION_TABLE[$7_1]($6_1 + 528 | 0, $4_1, $6_1 + 512 | 0);
      $9_1 = Math_fround(HEAPF32[($6_1 + 528 | 0) >> 2]);
      $10_1 = Math_fround(HEAPF32[($6_1 + 532 | 0) >> 2]);
      $11_1 = Math_fround(HEAPF32[($6_1 + 536 | 0) >> 2]);
      $16_1 = Math_fround($16_1 + Math_fround($8_1 * Math_fround(Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($6_1 + 472 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($6_1 + 476 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 480 | 0) >> 2]))) + Math_fround(HEAPF32[($6_1 + 496 | 0) >> 2]))));
      $14_1 = Math_fround($14_1 + Math_fround($8_1 * Math_fround(Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($6_1 + 456 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($6_1 + 460 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 464 | 0) >> 2]))) + Math_fround(HEAPF32[($6_1 + 492 | 0) >> 2]))));
      $13_1 = Math_fround($13_1 + Math_fround($8_1 * Math_fround(Math_fround(Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($6_1 + 440 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($6_1 + 444 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 448 | 0) >> 2]))) + Math_fround(HEAPF32[($6_1 + 488 | 0) >> 2]))));
      $3_1 = $3_1 + 4 | 0;
      $0_1 = $0_1 + 1 | 0;
      $7_1 = HEAP32[($6_1 + 372 | 0) >> 2] | 0;
      if ($0_1 >>> 0 >= (HEAP32[($7_1 + 32 | 0) >> 2] | 0) >>> 0) {
       break label$2
      }
      continue label$5;
     };
    }
    HEAP32[$5_1 >> 2] = ($3_1 | 0) == (1 | 0) ? 1 : 2;
    break label$1;
   }
   $8_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $11_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
   HEAP32[($5_1 + 16 | 0) >> 2] = 0;
   HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround($24_1 + Math_fround(Math_fround(Math_fround($17_1 * $26_1) + Math_fround($18_1 * $27_1)) + Math_fround($19_1 * $25_1)));
   HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround($20_1 + Math_fround(Math_fround(Math_fround($17_1 * $22_1) + Math_fround($18_1 * $23_1)) + Math_fround($19_1 * $21_1)));
   HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround($8_1 + Math_fround(Math_fround(Math_fround($17_1 * $10_1) + Math_fround($18_1 * $11_1)) + Math_fround($19_1 * $9_1)));
   $20_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $23_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
   $28_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
   $29_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
   $30_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
   $31_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
   $8_1 = Math_fround($17_1 - $13_1);
   $9_1 = Math_fround($18_1 - $14_1);
   $10_1 = Math_fround($19_1 - $16_1);
   $11_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($9_1 * $9_1)) + Math_fround($10_1 * $10_1))));
   HEAPF32[($5_1 + 52 | 0) >> 2] = $11_1;
   HEAP32[($5_1 + 48 | 0) >> 2] = 0;
   HEAP32[($5_1 + 32 | 0) >> 2] = 0;
   $11_1 = $11_1 > Math_fround(9.999999747378752e-05) ? Math_fround(Math_fround(1.0) / $11_1) : Math_fround(1.0);
   HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround($10_1 * $11_1);
   HEAPF32[($5_1 + 40 | 0) >> 2] = Math_fround($9_1 * $11_1);
   HEAPF32[($5_1 + 36 | 0) >> 2] = Math_fround($8_1 * $11_1);
   HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround($28_1 + Math_fround(Math_fround(Math_fround($13_1 * $30_1) + Math_fround($14_1 * $31_1)) + Math_fround($16_1 * $29_1)));
   HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround($24_1 + Math_fround(Math_fround(Math_fround($13_1 * $26_1) + Math_fround($14_1 * $27_1)) + Math_fround($16_1 * $25_1)));
   HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround($20_1 + Math_fround(Math_fround(Math_fround($13_1 * $22_1) + Math_fround($14_1 * $23_1)) + Math_fround($16_1 * $21_1)));
   $7_1 = 1;
  }
  global$0 = $6_1 + 544 | 0;
  return $7_1 | 0;
 }
 
 function $541($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7_1 = Math_fround(0), $3_1 = 0, $15_1 = Math_fround(0), $4_1 = 0, $9_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $14_1 = 0, $21_1 = 0, $22_1 = 0, $19_1 = Math_fround(0), $27_1 = Math_fround(0), $20_1 = 0, $23_1 = 0, $5_1 = 0, $12_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $5$hi = 0, $6_1 = 0, $11_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $54_1 = 0, $59_1 = 0, $62_1 = 0, $67_1 = 0, $72_1 = 0, $77_1 = 0, $82_1 = 0, $87_1 = 0, $90_1 = 0, $95_1 = 0, $100_1 = 0, $105_1 = 0, $110_1 = 0, $115_1 = 0, $120_1 = 0, $133_1 = 0, $136_1 = 0, $188_1 = 0, $195_1 = 0, $13_1 = 0, $309_1 = Math_fround(0), $320_1 = Math_fround(0), $339_1 = Math_fround(0), $347_1 = Math_fround(0), $365_1 = Math_fround(0), $373_1 = Math_fround(0), $389_1 = Math_fround(0), $397_1 = Math_fround(0), $420_1 = 0, $423_1 = 0, $467_1 = 0, $600_1 = Math_fround(0), $690_1 = 0, $765_1 = 0, $812_1 = 0, $844_1 = Math_fround(0), $850_1 = Math_fround(0);
  $3_1 = global$0 - 96 | 0;
  global$0 = $3_1;
  HEAP32[($0_1 + 376 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 364 | 0) >> 2] = 4;
  HEAP32[($0_1 + 368 | 0) >> 2] = i64toi32_i32$0;
  $4_1 = $0_1 + 316 | 0;
  HEAP32[($0_1 + 360 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 356 | 0) >> 2] = $0_1 + 284 | 0;
  HEAP32[($0_1 + 352 | 0) >> 2] = $0_1 + 252 | 0;
  HEAP32[($0_1 + 348 | 0) >> 2] = $0_1 + 220 | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $54_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[$0_1 >> 2] = $54_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 16 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $59_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $59_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  $62_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $62_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 32 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $67_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $67_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $72_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $72_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 48 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $77_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $77_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $82_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 40 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $82_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 64 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $87_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 64 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $87_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
  $90_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 56 | 0) >> 2] = $90_1;
  HEAP32[($0_1 + 60 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 80 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $95_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 80 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $95_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 72 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $100_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 72 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $100_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 96 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $105_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 96 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $105_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 88 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $110_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 88 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $110_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 104 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $115_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 104 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $115_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 112 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $120_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 112 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $120_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[($1_1 + 120 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 124 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$1;
  $5$hi = i64toi32_i32$0;
  HEAP32[($0_1 + 180 | 0) >> 2] = 0;
  HEAP32[($0_1 + 144 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 120 | 0) >> 2] = $5_1;
  HEAP32[($0_1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $1_1 = $0_1 + 136 | 0;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $133_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[i64toi32_i32$0 >> 2] = $133_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $136_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 128 | 0) >> 2] = $136_1;
  HEAP32[($0_1 + 132 | 0) >> 2] = i64toi32_i32$0;
  $6_1 = $0_1 + 128 | 0;
  label$1 : {
   label$2 : {
    $7_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
    $8_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
    $9_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $10_1 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($8_1 * $8_1)) + Math_fround($9_1 * $9_1));
    if ($10_1 > Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    HEAPF32[($3_1 + 40 | 0) >> 2] = Math_fround(-$9_1);
    HEAPF32[($3_1 + 36 | 0) >> 2] = Math_fround(-$8_1);
    HEAPF32[($3_1 + 32 | 0) >> 2] = Math_fround(-$7_1);
    break label$1;
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = 0;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 1065353216;
   HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  }
  HEAP32[($0_1 + 364 | 0) >> 2] = 3;
  HEAP32[($0_1 + 180 | 0) >> 2] = 1;
  HEAP32[($0_1 + 148 | 0) >> 2] = $4_1;
  $1_1 = $0_1 + 164 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = 0;
  $542($0_1 | 0, $3_1 + 32 | 0 | 0, $4_1 | 0);
  HEAP32[$1_1 >> 2] = 1065353216;
  $1_1 = HEAP32[($0_1 + 148 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
  $188_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[i64toi32_i32$0 >> 2] = $188_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $11_1 = i64toi32_i32$0 + 8 | 0;
  $2_1 = $1_1 + 24 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $195_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $11_1;
  HEAP32[i64toi32_i32$1 >> 2] = $195_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $3_1 + 88 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $3_1 + 72 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = ($3_1 + 32 | 0) + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
  $13_1 = $0_1 + 148 | 0;
  $14_1 = HEAP32[($0_1 + 368 | 0) >> 2] | 0;
  $7_1 = Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
  $16_1 = Math_fround(0.0);
  $17_1 = 0;
  $18_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       $19_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($15_1 * $15_1) + Math_fround($9_1 * $9_1)) + Math_fround($7_1 * $7_1))));
       if ($19_1 < Math_fround(9.999999747378752e-05) ^ 1 | 0) {
        break label$7
       }
       HEAP32[($0_1 + 376 | 0) >> 2] = 1;
       break label$5;
      }
      $1_1 = (HEAP32[($0_1 + 364 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($0_1 + 364 | 0) >> 2] = $1_1;
      $20_1 = Math_imul($14_1, 36);
      $4_1 = $0_1 + $20_1 | 0;
      $2_1 = $4_1 + 180 | 0;
      $21_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
      $22_1 = $4_1 + 148 | 0;
      $21_1 = $22_1 + ($21_1 << 2 | 0) | 0;
      $1_1 = HEAP32[(($0_1 + ($1_1 << 2 | 0) | 0) + 348 | 0) >> 2] | 0;
      HEAP32[$21_1 >> 2] = $1_1;
      HEAP32[($21_1 + 16 | 0) >> 2] = 0;
      HEAP32[($3_1 + 28 | 0) >> 2] = 0;
      HEAPF32[($3_1 + 24 | 0) >> 2] = Math_fround(-$7_1);
      HEAPF32[($3_1 + 20 | 0) >> 2] = Math_fround(-$9_1);
      HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(-$15_1);
      $542($0_1 | 0, $3_1 + 16 | 0 | 0, $1_1 | 0);
      label$8 : {
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       $1_1 = HEAP32[((($21_1 << 2 | 0) + $22_1 | 0) + -4 | 0) >> 2] | 0;
       $7_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
       $8_1 = Math_fround($7_1 - Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]));
       $309_1 = Math_fround($8_1 * $8_1);
       $8_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
       $9_1 = Math_fround($8_1 - Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]));
       $320_1 = Math_fround($309_1 + Math_fround($9_1 * $9_1));
       $9_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
       $15_1 = Math_fround($9_1 - Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]));
       if (Math_fround($320_1 + Math_fround($15_1 * $15_1)) < Math_fround(9.999999747378752e-05)) {
        break label$8
       }
       $15_1 = Math_fround($7_1 - Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]));
       $339_1 = Math_fround($15_1 * $15_1);
       $15_1 = Math_fround($8_1 - Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]));
       $347_1 = Math_fround($339_1 + Math_fround($15_1 * $15_1));
       $15_1 = Math_fround($9_1 - Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]));
       if (!(Math_fround($347_1 + Math_fround($15_1 * $15_1)) < Math_fround(9.999999747378752e-05) ^ 1 | 0)) {
        break label$8
       }
       $15_1 = Math_fround($7_1 - Math_fround(HEAPF32[($3_1 + 64 | 0) >> 2]));
       $365_1 = Math_fround($15_1 * $15_1);
       $15_1 = Math_fround($8_1 - Math_fround(HEAPF32[($3_1 + 68 | 0) >> 2]));
       $373_1 = Math_fround($365_1 + Math_fround($15_1 * $15_1));
       $15_1 = Math_fround($9_1 - Math_fround(HEAPF32[($3_1 + 72 | 0) >> 2]));
       if (Math_fround($373_1 + Math_fround($15_1 * $15_1)) < Math_fround(9.999999747378752e-05)) {
        break label$8
       }
       $15_1 = Math_fround($7_1 - Math_fround(HEAPF32[($3_1 + 80 | 0) >> 2]));
       $389_1 = Math_fround($15_1 * $15_1);
       $15_1 = Math_fround($8_1 - Math_fround(HEAPF32[($3_1 + 84 | 0) >> 2]));
       $397_1 = Math_fround($389_1 + Math_fround($15_1 * $15_1));
       $15_1 = Math_fround($9_1 - Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2]));
       if (Math_fround($397_1 + Math_fround($15_1 * $15_1)) < Math_fround(9.999999747378752e-05)) {
        break label$8
       }
       $17_1 = ($17_1 + 1 | 0) & 3 | 0;
       $23_1 = ($3_1 + 32 | 0) + ($17_1 << 4 | 0) | 0;
       $1_1 = $1_1 + 16 | 0;
       i64toi32_i32$2 = $1_1 + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $420_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $23_1;
       HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $420_1;
       HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $423_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $23_1;
       HEAP32[i64toi32_i32$1 >> 2] = $423_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       label$9 : {
        $7_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]) * $7_1) + Math_fround(Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]) * $8_1)) + Math_fround(Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]) * $9_1)) / $19_1);
        $16_1 = $7_1 > $16_1 ? $7_1 : $16_1;
        if (Math_fround(Math_fround($19_1 - $16_1) + Math_fround($19_1 * Math_fround(-9.999999747378752e-05))) <= Math_fround(0.0) ^ 1 | 0) {
         break label$9
        }
        $1_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
        HEAP32[($0_1 + 364 | 0) >> 2] = $1_1 + 1 | 0;
        $14_1 = HEAP32[($0_1 + 368 | 0) >> 2] | 0;
        $2_1 = $0_1 + Math_imul($14_1, 36) | 0;
        $4_1 = $2_1 + 180 | 0;
        $467_1 = $4_1;
        $4_1 = (HEAP32[$4_1 >> 2] | 0) + -1 | 0;
        HEAP32[$467_1 >> 2] = $4_1;
        HEAP32[(($0_1 + ($1_1 << 2 | 0) | 0) + 348 | 0) >> 2] = HEAP32[(($2_1 + ($4_1 << 2 | 0) | 0) + 148 | 0) >> 2] | 0;
        break label$5;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = 0;
       label$10 : {
        label$11 : {
         label$12 : {
          $1_1 = $21_1 + -2 | 0;
          if ($1_1 >>> 0 > 2 >>> 0) {
           break label$12
          }
          label$13 : {
           switch ($1_1 | 0) {
           default:
            $1_1 = HEAP32[($4_1 + 152 | 0) >> 2] | 0;
            $24_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
            $4_1 = HEAP32[$22_1 >> 2] | 0;
            $15_1 = Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]);
            $7_1 = Math_fround($24_1 - $15_1);
            $25_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
            $19_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
            $8_1 = Math_fround($25_1 - $19_1);
            $26_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
            $10_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
            $9_1 = Math_fround($26_1 - $10_1);
            $27_1 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($8_1 * $8_1)) + Math_fround($9_1 * $9_1));
            if ($27_1 > Math_fround(0.0) ^ 1 | 0) {
             break label$11
            }
            label$16 : {
             $27_1 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($15_1 * $7_1) + Math_fround($19_1 * $8_1)) + Math_fround($10_1 * $9_1))) / $27_1);
             if ($27_1 >= Math_fround(1.0) ^ 1 | 0) {
              break label$16
             }
             i64toi32_i32$1 = $3_1;
             i64toi32_i32$0 = 1065353216;
             HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
             HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 2;
             $10_1 = Math_fround(Math_fround(Math_fround($24_1 * $24_1) + Math_fround($25_1 * $25_1)) + Math_fround($26_1 * $26_1));
             break label$12;
            }
            label$17 : {
             if ($27_1 <= Math_fround(0.0) ^ 1 | 0) {
              break label$17
             }
             i64toi32_i32$1 = $3_1;
             i64toi32_i32$0 = 0;
             HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 1065353216;
             HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 1;
             $10_1 = Math_fround(Math_fround(Math_fround($15_1 * $15_1) + Math_fround($19_1 * $19_1)) + Math_fround($10_1 * $10_1));
             break label$12;
            }
            HEAP32[($3_1 + 12 | 0) >> 2] = 3;
            HEAPF32[($3_1 + 20 | 0) >> 2] = $27_1;
            HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(Math_fround(1.0) - $27_1);
            $9_1 = Math_fround($10_1 + Math_fround($9_1 * $27_1));
            $7_1 = Math_fround($15_1 + Math_fround($7_1 * $27_1));
            $600_1 = Math_fround($7_1 * $7_1);
            $7_1 = Math_fround($19_1 + Math_fround($8_1 * $27_1));
            $10_1 = Math_fround(Math_fround($9_1 * $9_1) + Math_fround($600_1 + Math_fround($7_1 * $7_1)));
            break label$12;
           case 1:
            $10_1 = Math_fround($543((HEAP32[$22_1 >> 2] | 0) + 16 | 0 | 0, (HEAP32[($4_1 + 152 | 0) >> 2] | 0) + 16 | 0 | 0, (HEAP32[($4_1 + 156 | 0) >> 2] | 0) + 16 | 0 | 0, $3_1 + 16 | 0 | 0, $3_1 + 12 | 0 | 0));
            break label$12;
           case 2:
            break label$13;
           };
          }
          $10_1 = Math_fround($544((HEAP32[$22_1 >> 2] | 0) + 16 | 0 | 0, (HEAP32[($4_1 + 152 | 0) >> 2] | 0) + 16 | 0 | 0, (HEAP32[($4_1 + 156 | 0) >> 2] | 0) + 16 | 0 | 0, (HEAP32[($4_1 + 160 | 0) >> 2] | 0) + 16 | 0 | 0, $3_1 + 16 | 0 | 0, $3_1 + 12 | 0 | 0));
         }
         if ($10_1 >= Math_fround(0.0) ^ 1 | 0) {
          break label$11
         }
         $14_1 = 1 - $14_1 | 0;
         $28_1 = $0_1 + Math_imul($14_1, 36) | 0;
         $21_1 = $28_1 + 180 | 0;
         HEAP32[$21_1 >> 2] = 0;
         i64toi32_i32$1 = $11_1;
         i64toi32_i32$0 = 0;
         HEAP32[i64toi32_i32$1 >> 2] = 0;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         i64toi32_i32$1 = $6_1;
         i64toi32_i32$0 = 0;
         HEAP32[i64toi32_i32$1 >> 2] = 0;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         HEAP32[($0_1 + 368 | 0) >> 2] = $14_1;
         $29_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
         label$18 : {
          $30_1 = HEAP32[$2_1 >> 2] | 0;
          if ($30_1) {
           break label$18
          }
          $7_1 = Math_fround(0.0);
          $9_1 = Math_fround(0.0);
          $15_1 = Math_fround(0.0);
          break label$10;
         }
         $1_1 = $13_1 + $20_1 | 0;
         $2_1 = 0;
         $7_1 = Math_fround(0.0);
         $4_1 = $3_1 + 16 | 0;
         $9_1 = Math_fround(0.0);
         $15_1 = Math_fround(0.0);
         label$19 : while (1) {
          $22_1 = HEAP32[$1_1 >> 2] | 0;
          label$20 : {
           label$21 : {
            if (!($29_1 & (1 << $2_1 | 0) | 0)) {
             break label$21
            }
            $23_1 = HEAP32[$21_1 >> 2] | 0;
            $20_1 = $28_1 + ($23_1 << 2 | 0) | 0;
            HEAP32[($20_1 + 148 | 0) >> 2] = $22_1;
            $690_1 = $20_1 + 164 | 0;
            $20_1 = HEAP32[$4_1 >> 2] | 0;
            HEAP32[$690_1 >> 2] = $20_1;
            HEAP32[$21_1 >> 2] = $23_1 + 1 | 0;
            $22_1 = HEAP32[$1_1 >> 2] | 0;
            $8_1 = Math_fround(HEAPF32[($22_1 + 24 | 0) >> 2]);
            $9_1 = Math_fround(HEAPF32[($22_1 + 20 | 0) >> 2]);
            $7_1 = (wasm2js_scratch_store_i32(0, $20_1), wasm2js_scratch_load_f32());
            $15_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($22_1 + 16 | 0) >> 2]) * $7_1) + Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]));
            HEAPF32[($0_1 + 128 | 0) >> 2] = $15_1;
            $9_1 = Math_fround(Math_fround($9_1 * $7_1) + Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]));
            HEAPF32[($0_1 + 132 | 0) >> 2] = $9_1;
            $7_1 = Math_fround(Math_fround($8_1 * $7_1) + Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]));
            HEAPF32[($0_1 + 136 | 0) >> 2] = $7_1;
            break label$20;
           }
           $23_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
           HEAP32[($0_1 + 364 | 0) >> 2] = $23_1 + 1 | 0;
           HEAP32[(($0_1 + ($23_1 << 2 | 0) | 0) + 348 | 0) >> 2] = $22_1;
          }
          $1_1 = $1_1 + 4 | 0;
          $4_1 = $4_1 + 4 | 0;
          $2_1 = $2_1 + 1 | 0;
          if (($30_1 | 0) == ($2_1 | 0)) {
           break label$10
          }
          continue label$19;
         };
        }
        $1_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
        HEAP32[($0_1 + 364 | 0) >> 2] = $1_1 + 1 | 0;
        $14_1 = HEAP32[($0_1 + 368 | 0) >> 2] | 0;
        $2_1 = $0_1 + Math_imul($14_1, 36) | 0;
        $4_1 = $2_1 + 180 | 0;
        $765_1 = $4_1;
        $4_1 = (HEAP32[$4_1 >> 2] | 0) + -1 | 0;
        HEAP32[$765_1 >> 2] = $4_1;
        HEAP32[(($0_1 + ($1_1 << 2 | 0) | 0) + 348 | 0) >> 2] = HEAP32[(($2_1 + ($4_1 << 2 | 0) | 0) + 148 | 0) >> 2] | 0;
        break label$5;
       }
       label$22 : {
        if (($29_1 | 0) != (15 | 0)) {
         break label$22
        }
        HEAP32[($0_1 + 376 | 0) >> 2] = 1;
       }
       label$23 : {
        if (($18_1 | 0) != (127 | 0)) {
         break label$23
        }
        $1_1 = 2;
        HEAP32[($0_1 + 376 | 0) >> 2] = 2;
        HEAP32[($0_1 + 372 | 0) >> 2] = ($0_1 + Math_imul($14_1, 36) | 0) + 148 | 0;
        break label$3;
       }
       $18_1 = $18_1 + 1 | 0;
       $1_1 = HEAP32[($0_1 + 376 | 0) >> 2] | 0;
       if (!$1_1) {
        continue label$6
       }
       break label$4;
      }
      break label$6;
     };
     $1_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
     HEAP32[($0_1 + 364 | 0) >> 2] = $1_1 + 1 | 0;
     $14_1 = HEAP32[($0_1 + 368 | 0) >> 2] | 0;
     $2_1 = $0_1 + Math_imul($14_1, 36) | 0;
     $4_1 = $2_1 + 180 | 0;
     $812_1 = $4_1;
     $4_1 = (HEAP32[$4_1 >> 2] | 0) + -1 | 0;
     HEAP32[$812_1 >> 2] = $4_1;
     HEAP32[(($0_1 + ($1_1 << 2 | 0) | 0) + 348 | 0) >> 2] = HEAP32[(($2_1 + ($4_1 << 2 | 0) | 0) + 148 | 0) >> 2] | 0;
    }
    $1_1 = HEAP32[($0_1 + 376 | 0) >> 2] | 0;
   }
   HEAP32[($0_1 + 372 | 0) >> 2] = ($0_1 + Math_imul($14_1, 36) | 0) + 148 | 0;
   if ($1_1 >>> 0 > 1 >>> 0) {
    break label$3
   }
   label$24 : {
    switch ($1_1 | 0) {
    default:
     $7_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
     $844_1 = Math_fround($7_1 * $7_1);
     $7_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
     $850_1 = Math_fround($844_1 + Math_fround($7_1 * $7_1));
     $7_1 = Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]);
     HEAPF32[($0_1 + 144 | 0) >> 2] = Math_fround(Math_sqrt(Math_fround($850_1 + Math_fround($7_1 * $7_1))));
     $1_1 = 0;
     break label$3;
    case 1:
     break label$24;
    };
   }
   HEAP32[($0_1 + 144 | 0) >> 2] = 0;
   $1_1 = 1;
  }
  global$0 = $3_1 + 96 | 0;
  return $1_1 | 0;
 }
 
 function $542($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  $4_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $6_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $7_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1)) + Math_fround($4_1 * $4_1)))));
  HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($4_1 * $7_1);
  HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($6_1 * $7_1);
  HEAPF32[$2_1 >> 2] = Math_fround($5_1 * $7_1);
  $8_1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
  $9_1 = (HEAP32[$0_1 >> 2] | 0) + ($8_1 >> 1 | 0) | 0;
  $1_1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
  label$1 : {
   if (!($8_1 & 1 | 0)) {
    break label$1
   }
   $1_1 = HEAP32[((HEAP32[$9_1 >> 2] | 0) + $1_1 | 0) >> 2] | 0;
  }
  FUNCTION_TABLE[$1_1]($3_1 + 32 | 0, $9_1, $2_1);
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]));
  HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]));
  HEAPF32[$3_1 >> 2] = Math_fround(-Math_fround(HEAPF32[$2_1 >> 2]));
  $550($3_1 + 16 | 0 | 0, $0_1 | 0, $3_1 | 0);
  $4_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
  HEAP32[($2_1 + 28 | 0) >> 2] = 0;
  HEAPF32[($2_1 + 24 | 0) >> 2] = Math_fround($11_1 - $10_1);
  HEAPF32[($2_1 + 20 | 0) >> 2] = Math_fround($7_1 - $6_1);
  HEAPF32[($2_1 + 16 | 0) >> 2] = Math_fround($5_1 - $4_1);
  global$0 = $3_1 + 48 | 0;
 }
 
 function $543($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), $17_1 = Math_fround(0), $21_1 = Math_fround(0), $6_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $20_1 = Math_fround(0), $14_1 = Math_fround(0), $16_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $8_1 = Math_fround(0), $13_1 = Math_fround(0), $26_1 = 0, $27_1 = 0, $28_1 = 0, $11_1 = Math_fround(0), $25_1 = Math_fround(0), $18_1 = Math_fround(0), $29_1 = Math_fround(0), $15_1 = Math_fround(0), $19_1 = Math_fround(0), $24_1 = Math_fround(0), $213_1 = Math_fround(0), $360_1 = Math_fround(0), $368_1 = Math_fround(0), $523_1 = Math_fround(0), $631_1 = Math_fround(0), $656_1 = Math_fround(0), $670_1 = Math_fround(0);
  $5_1 = Math_fround(-1.0);
  label$1 : {
   $6_1 = Math_fround(HEAPF32[$0_1 >> 2]);
   $7_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $8_1 = Math_fround($6_1 - $7_1);
   $9_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $11_1 = Math_fround($9_1 - $10_1);
   $12_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   $13_1 = Math_fround($12_1 - $9_1);
   $14_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $15_1 = Math_fround($7_1 - $14_1);
   $16_1 = Math_fround(Math_fround($8_1 * $11_1) - Math_fround($13_1 * $15_1));
   $17_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $19_1 = Math_fround($17_1 - $18_1);
   $20_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
   $21_1 = Math_fround($20_1 - $17_1);
   $22_1 = Math_fround(Math_fround($13_1 * $19_1) - Math_fround($21_1 * $11_1));
   $23_1 = Math_fround(Math_fround($21_1 * $15_1) - Math_fround($8_1 * $19_1));
   $24_1 = Math_fround(Math_fround($16_1 * $16_1) + Math_fround(Math_fround($22_1 * $22_1) + Math_fround($23_1 * $23_1)));
   if ($24_1 > Math_fround(0.0) ^ 1 | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!(Math_fround(Math_fround(Math_fround($6_1 * Math_fround(Math_fround($16_1 * $13_1) - Math_fround($23_1 * $21_1))) + Math_fround($12_1 * Math_fround(Math_fround($22_1 * $21_1) - Math_fround($16_1 * $8_1)))) + Math_fround(Math_fround(Math_fround($23_1 * $8_1) - Math_fround($22_1 * $13_1)) * $20_1)) > Math_fround(0.0) ^ 1 | 0)) {
      break label$3
     }
     $25_1 = Math_fround(-1.0);
     $26_1 = 0;
     $27_1 = 0;
     $28_1 = 0;
     break label$2;
    }
    $25_1 = Math_fround(-1.0);
    $26_1 = 0;
    $27_1 = 0;
    $28_1 = 0;
    label$4 : {
     $5_1 = Math_fround($7_1 - $6_1);
     $8_1 = Math_fround($9_1 - $12_1);
     $13_1 = Math_fround($17_1 - $20_1);
     $21_1 = Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($8_1 * $8_1)) + Math_fround($13_1 * $13_1));
     if ($21_1 > Math_fround(0.0) ^ 1 | 0) {
      break label$4
     }
     label$5 : {
      $21_1 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($6_1 * $5_1) + Math_fround($12_1 * $8_1)) + Math_fround($20_1 * $13_1))) / $21_1);
      if ($21_1 >= Math_fround(1.0) ^ 1 | 0) {
       break label$5
      }
      $25_1 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($9_1 * $9_1)) + Math_fround($17_1 * $17_1));
      $28_1 = 1065353216;
      $26_1 = 2;
      $27_1 = 0;
      break label$4;
     }
     $26_1 = 1;
     label$6 : {
      if ($21_1 <= Math_fround(0.0) ^ 1 | 0) {
       break label$6
      }
      $25_1 = Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($12_1 * $12_1)) + Math_fround($20_1 * $20_1));
      $27_1 = 1065353216;
      $28_1 = 0;
      break label$4;
     }
     $7_1 = Math_fround($20_1 + Math_fround($13_1 * $21_1));
     $5_1 = Math_fround($6_1 + Math_fround($5_1 * $21_1));
     $213_1 = Math_fround($5_1 * $5_1);
     $5_1 = Math_fround($12_1 + Math_fround($8_1 * $21_1));
     $25_1 = Math_fround(Math_fround($7_1 * $7_1) + Math_fround($213_1 + Math_fround($5_1 * $5_1)));
     $27_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(1.0) - $21_1)), wasm2js_scratch_load_i32(0));
     $28_1 = (wasm2js_scratch_store_f32($21_1), wasm2js_scratch_load_i32(0));
     $26_1 = 3;
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $28_1;
    HEAP32[$3_1 >> 2] = $27_1;
    HEAP32[$4_1 >> 2] = $26_1;
    $17_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $9_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    $7_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   }
   $8_1 = Math_fround($18_1 - $20_1);
   $13_1 = Math_fround($10_1 - $12_1);
   $21_1 = Math_fround($14_1 - $6_1);
   label$7 : {
    label$8 : {
     if (Math_fround(Math_fround(Math_fround($7_1 * Math_fround(Math_fround($16_1 * $11_1) - Math_fround($23_1 * $19_1))) + Math_fround($9_1 * Math_fround(Math_fround($22_1 * $19_1) - Math_fround($16_1 * $15_1)))) + Math_fround(Math_fround(Math_fround($23_1 * $15_1) - Math_fround($22_1 * $11_1)) * $17_1)) > Math_fround(0.0)) {
      break label$8
     }
     $5_1 = $25_1;
     break label$7;
    }
    $5_1 = Math_fround(-1.0);
    label$9 : {
     $14_1 = Math_fround(HEAPF32[$2_1 >> 2]);
     $6_1 = Math_fround($14_1 - $7_1);
     $18_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
     $12_1 = Math_fround($18_1 - $9_1);
     $29_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
     $20_1 = Math_fround($29_1 - $17_1);
     $10_1 = Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($12_1 * $12_1)) + Math_fround($20_1 * $20_1));
     if ($10_1 > Math_fround(0.0) ^ 1 | 0) {
      break label$9
     }
     label$10 : {
      $10_1 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($7_1 * $6_1) + Math_fround($9_1 * $12_1)) + Math_fround($17_1 * $20_1))) / $10_1);
      if ($10_1 >= Math_fround(1.0) ^ 1 | 0) {
       break label$10
      }
      $5_1 = Math_fround(Math_fround(Math_fround($14_1 * $14_1) + Math_fround($18_1 * $18_1)) + Math_fround($29_1 * $29_1));
      $28_1 = 1065353216;
      $27_1 = 0;
      $26_1 = 2;
      break label$9;
     }
     $26_1 = 1;
     label$11 : {
      if ($10_1 <= Math_fround(0.0) ^ 1 | 0) {
       break label$11
      }
      $5_1 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($9_1 * $9_1)) + Math_fround($17_1 * $17_1));
      $28_1 = 0;
      $27_1 = 1065353216;
      break label$9;
     }
     $5_1 = Math_fround($17_1 + Math_fround($20_1 * $10_1));
     $360_1 = Math_fround($5_1 * $5_1);
     $5_1 = Math_fround($7_1 + Math_fround($6_1 * $10_1));
     $368_1 = Math_fround($5_1 * $5_1);
     $5_1 = Math_fround($9_1 + Math_fround($12_1 * $10_1));
     $5_1 = Math_fround($360_1 + Math_fround($368_1 + Math_fround($5_1 * $5_1)));
     $27_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(1.0) - $10_1)), wasm2js_scratch_load_i32(0));
     $28_1 = (wasm2js_scratch_store_f32($10_1), wasm2js_scratch_load_i32(0));
     $26_1 = 3;
    }
    label$12 : {
     if ($25_1 < Math_fround(0.0)) {
      break label$12
     }
     if (!($5_1 < $25_1 ^ 1 | 0)) {
      break label$12
     }
     $5_1 = $25_1;
     break label$7;
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = $28_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $27_1;
    HEAP32[$3_1 >> 2] = 0;
    HEAP32[$4_1 >> 2] = $26_1 << 1 | 0;
   }
   label$13 : {
    $7_1 = Math_fround(HEAPF32[$2_1 >> 2]);
    $9_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    if (Math_fround(Math_fround(Math_fround($7_1 * Math_fround(Math_fround($16_1 * $13_1) - Math_fround($23_1 * $8_1))) + Math_fround($9_1 * Math_fround(Math_fround($22_1 * $8_1) - Math_fround($16_1 * $21_1)))) + Math_fround(Math_fround(Math_fround($23_1 * $21_1) - Math_fround($22_1 * $13_1)) * $17_1)) > Math_fround(0.0) ^ 1 | 0) {
     break label$13
    }
    $6_1 = Math_fround(-1.0);
    label$14 : {
     $18_1 = Math_fround(HEAPF32[$0_1 >> 2]);
     $12_1 = Math_fround($18_1 - $7_1);
     $25_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
     $20_1 = Math_fround($25_1 - $9_1);
     $29_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
     $10_1 = Math_fround($29_1 - $17_1);
     $14_1 = Math_fround(Math_fround(Math_fround($12_1 * $12_1) + Math_fround($20_1 * $20_1)) + Math_fround($10_1 * $10_1));
     if ($14_1 > Math_fround(0.0) ^ 1 | 0) {
      break label$14
     }
     label$15 : {
      $14_1 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($7_1 * $12_1) + Math_fround($9_1 * $20_1)) + Math_fround($17_1 * $10_1))) / $14_1);
      if ($14_1 >= Math_fround(1.0) ^ 1 | 0) {
       break label$15
      }
      $6_1 = Math_fround(Math_fround(Math_fround($18_1 * $18_1) + Math_fround($25_1 * $25_1)) + Math_fround($29_1 * $29_1));
      $28_1 = 1065353216;
      $27_1 = 0;
      $26_1 = 2;
      break label$14;
     }
     label$16 : {
      if ($14_1 <= Math_fround(0.0) ^ 1 | 0) {
       break label$16
      }
      $6_1 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($9_1 * $9_1)) + Math_fround($17_1 * $17_1));
      $28_1 = 0;
      $27_1 = 1065353216;
      $26_1 = 1;
      break label$14;
     }
     $17_1 = Math_fround($17_1 + Math_fround($10_1 * $14_1));
     $7_1 = Math_fround($7_1 + Math_fround($12_1 * $14_1));
     $523_1 = Math_fround($7_1 * $7_1);
     $7_1 = Math_fround($9_1 + Math_fround($20_1 * $14_1));
     $6_1 = Math_fround(Math_fround($17_1 * $17_1) + Math_fround($523_1 + Math_fround($7_1 * $7_1)));
     $27_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(1.0) - $14_1)), wasm2js_scratch_load_i32(0));
     $28_1 = (wasm2js_scratch_store_f32($14_1), wasm2js_scratch_load_i32(0));
     $26_1 = 3;
    }
    label$17 : {
     if ($5_1 < Math_fround(0.0)) {
      break label$17
     }
     if ($6_1 < $5_1 ^ 1 | 0) {
      break label$13
     }
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = $27_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = 0;
    HEAP32[$3_1 >> 2] = $28_1;
    HEAP32[$4_1 >> 2] = ($26_1 << 2 | 0 | ($26_1 >>> 1 | 0) | 0) & 5 | 0;
    $5_1 = $6_1;
   }
   if (!($5_1 < Math_fround(0.0))) {
    break label$1
   }
   $5_1 = Math_fround(Math_fround(Math_fround(Math_fround($22_1 * Math_fround(HEAPF32[$0_1 >> 2])) + Math_fround($23_1 * Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]))) + Math_fround($16_1 * Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]))) / $24_1);
   $23_1 = Math_fround($23_1 * $5_1);
   $7_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) - $23_1);
   $22_1 = Math_fround($22_1 * $5_1);
   $9_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) - $22_1);
   $17_1 = Math_fround(Math_fround($15_1 * $7_1) - Math_fround($11_1 * $9_1));
   $16_1 = Math_fround($16_1 * $5_1);
   $5_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) - $16_1);
   $7_1 = Math_fround(Math_fround($11_1 * $5_1) - Math_fround($19_1 * $7_1));
   $5_1 = Math_fround(Math_fround($19_1 * $9_1) - Math_fround($15_1 * $5_1));
   $631_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($17_1 * $17_1) + Math_fround(Math_fround($7_1 * $7_1) + Math_fround($5_1 * $5_1)))));
   $5_1 = Math_fround(Math_sqrt($24_1));
   $7_1 = Math_fround($631_1 / $5_1);
   HEAPF32[$3_1 >> 2] = $7_1;
   HEAP32[$4_1 >> 2] = 7;
   $9_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) - $23_1);
   $17_1 = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) - $22_1);
   $11_1 = Math_fround(Math_fround($21_1 * $9_1) - Math_fround($13_1 * $17_1));
   $656_1 = Math_fround($11_1 * $11_1);
   $11_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) - $16_1);
   $9_1 = Math_fround(Math_fround($13_1 * $11_1) - Math_fround($8_1 * $9_1));
   $670_1 = Math_fround($9_1 * $9_1);
   $9_1 = Math_fround(Math_fround($8_1 * $17_1) - Math_fround($21_1 * $11_1));
   $5_1 = Math_fround(Math_fround(Math_sqrt(Math_fround($656_1 + Math_fround($670_1 + Math_fround($9_1 * $9_1))))) / $5_1);
   HEAPF32[($3_1 + 4 | 0) >> 2] = $5_1;
   HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($7_1 + $5_1));
   $5_1 = Math_fround(Math_fround($16_1 * $16_1) + Math_fround(Math_fround($22_1 * $22_1) + Math_fround($23_1 * $23_1)));
  }
  return Math_fround($5_1);
 }
 
 function $544($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $28_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $25_1 = Math_fround(0), $9_1 = Math_fround(0), $14_1 = Math_fround(0), $16_1 = Math_fround(0), $19_1 = Math_fround(0), $21_1 = Math_fround(0), $8_1 = Math_fround(0), $23_1 = Math_fround(0), $11_1 = Math_fround(0), $35_1 = 0, $10_1 = Math_fround(0), $12_1 = Math_fround(0), $20_1 = Math_fround(0), i64toi32_i32$0 = 0, $22_1 = Math_fround(0), i64toi32_i32$1 = 0, $18_1 = Math_fround(0), $7_1 = Math_fround(0), $13_1 = Math_fround(0), $15_1 = Math_fround(0), $17_1 = Math_fround(0), $24_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $193_1 = Math_fround(0), $200_1 = Math_fround(0), $262_1 = 0, $340_1 = 0, $458_1 = Math_fround(0), $461_1 = Math_fround(0), $515_1 = Math_fround(0), $518_1 = Math_fround(0), $573_1 = Math_fround(0), $576_1 = Math_fround(0);
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 92 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 88 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 84 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 80 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  $7_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
  $9_1 = Math_fround($7_1 - $8_1);
  HEAPF32[($6_1 + 56 | 0) >> 2] = $9_1;
  $10_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
  $12_1 = Math_fround($10_1 - $11_1);
  HEAPF32[($6_1 + 52 | 0) >> 2] = $12_1;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  $13_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
  $14_1 = Math_fround($13_1 - $8_1);
  HEAPF32[($6_1 + 40 | 0) >> 2] = $14_1;
  $15_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
  $16_1 = Math_fround($15_1 - $11_1);
  HEAPF32[($6_1 + 36 | 0) >> 2] = $16_1;
  $17_1 = Math_fround(HEAPF32[$0_1 >> 2]);
  $18_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $19_1 = Math_fround($17_1 - $18_1);
  HEAPF32[($6_1 + 32 | 0) >> 2] = $19_1;
  $20_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $21_1 = Math_fround($20_1 - $18_1);
  HEAPF32[($6_1 + 48 | 0) >> 2] = $21_1;
  $22_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $23_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  HEAP32[($6_1 + 76 | 0) >> 2] = 0;
  $25_1 = Math_fround($24_1 - $8_1);
  HEAPF32[($6_1 + 72 | 0) >> 2] = $25_1;
  $26_1 = Math_fround($23_1 - $11_1);
  HEAPF32[($6_1 + 68 | 0) >> 2] = $26_1;
  $27_1 = Math_fround($22_1 - $18_1);
  HEAPF32[($6_1 + 64 | 0) >> 2] = $27_1;
  $28_1 = Math_fround(-1.0);
  label$1 : {
   $29_1 = Math_fround($19_1 * $12_1);
   $30_1 = Math_fround($16_1 * $9_1);
   $31_1 = Math_fround($14_1 * $21_1);
   $32_1 = Math_fround($19_1 * $9_1);
   $33_1 = Math_fround($16_1 * $21_1);
   $34_1 = Math_fround($14_1 * $12_1);
   $9_1 = Math_fround(Math_fround(Math_fround($29_1 * $25_1) + Math_fround(Math_fround(Math_fround(Math_fround($30_1 * $27_1) + Math_fround($31_1 * $26_1)) - Math_fround($32_1 * $26_1)) - Math_fround($33_1 * $25_1))) - Math_fround($34_1 * $27_1));
   if ($9_1 == Math_fround(0.0) | $9_1 != $9_1 | 0) {
    break label$1
   }
   $12_1 = Math_fround($15_1 - $10_1);
   $22_1 = Math_fround($20_1 - $22_1);
   $20_1 = Math_fround($17_1 - $20_1);
   $23_1 = Math_fround($10_1 - $23_1);
   $193_1 = Math_fround($13_1 * Math_fround(Math_fround($12_1 * $22_1) - Math_fround($20_1 * $23_1)));
   $10_1 = Math_fround($13_1 - $7_1);
   $200_1 = Math_fround($10_1 * $23_1);
   $23_1 = Math_fround($7_1 - $24_1);
   if (Math_fround($9_1 * Math_fround($193_1 + Math_fround(Math_fround($17_1 * Math_fround($200_1 - Math_fround($12_1 * $23_1))) + Math_fround($15_1 * Math_fround(Math_fround($20_1 * $23_1) - Math_fround($10_1 * $22_1)))))) <= Math_fround(0.0) ^ 1 | 0) {
    break label$1
   }
   HEAP32[(($6_1 + 16 | 0) + 8 | 0) >> 2] = 0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[($6_1 + 16 | 0) >> 2] = 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($6_1 + 12 | 0) >> 2] = 0;
   $28_1 = Math_fround(-1.0);
   label$2 : {
    if (Math_fround($9_1 * Math_fround(Math_fround(Math_fround(Math_fround($30_1 - $34_1) * $18_1) + Math_fround($11_1 * Math_fround($31_1 - $32_1))) + Math_fround(Math_fround($29_1 - $33_1) * $8_1))) > Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    $28_1 = Math_fround($543(HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0, $3_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0));
    HEAP32[($4_1 + 8 | 0) >> 2] = 0;
    i64toi32_i32$0 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
    $262_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1;
    HEAP32[$4_1 >> 2] = $262_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
    $35_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    HEAP32[$5_1 >> 2] = $35_1 & 2 | 0 | (($35_1 << 1 | 0) & 8 | 0) | 0 | ($35_1 & 1 | 0) | 0;
   }
   label$3 : {
    $8_1 = Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]);
    if (!(Math_fround($9_1 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($8_1 * $25_1) - Math_fround($11_1 * $26_1)) * Math_fround(HEAPF32[$3_1 >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) * Math_fround(Math_fround($11_1 * $27_1) - Math_fround($25_1 * $21_1)))) + Math_fround(Math_fround(Math_fround($26_1 * $21_1) - Math_fround($8_1 * $27_1)) * Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2])))) > Math_fround(0.0))) {
     break label$3
    }
    $21_1 = Math_fround($543(HEAP32[($6_1 + 84 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0, $3_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0));
    label$4 : {
     if ($28_1 < Math_fround(0.0)) {
      break label$4
     }
     if ($21_1 < $28_1 ^ 1 | 0) {
      break label$3
     }
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
    HEAP32[$4_1 >> 2] = 0;
    i64toi32_i32$1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
    $340_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $340_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$5_1 >> 2] = ((HEAP32[($6_1 + 12 | 0) >> 2] | 0) << 1 | 0) & 14 | 0;
    $28_1 = $21_1;
   }
   label$5 : {
    if (Math_fround($9_1 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($26_1 * $14_1) - Math_fround($25_1 * $16_1)) * Math_fround(HEAPF32[$3_1 >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) * Math_fround(Math_fround($25_1 * $19_1) - Math_fround($14_1 * $27_1)))) + Math_fround(Math_fround(Math_fround($16_1 * $27_1) - Math_fround($26_1 * $19_1)) * Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2])))) > Math_fround(0.0) ^ 1 | 0) {
     break label$5
    }
    $25_1 = Math_fround($543(HEAP32[($6_1 + 88 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 80 | 0) >> 2] | 0 | 0, $3_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0));
    label$6 : {
     if ($28_1 < Math_fround(0.0)) {
      break label$6
     }
     if ($25_1 < $28_1 ^ 1 | 0) {
      break label$5
     }
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = 0;
    HEAP32[$4_1 >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
    $35_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    HEAP32[$5_1 >> 2] = ($35_1 >>> 1 | 0) & 1 | 0 | (($35_1 << 1 | 0) & 8 | 0) | 0 | (($35_1 << 2 | 0) & 4 | 0) | 0;
    $28_1 = $25_1;
   }
   if (!($28_1 < Math_fround(0.0))) {
    break label$1
   }
   $25_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $28_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $16_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $458_1 = Math_fround(Math_fround(Math_fround(Math_fround($25_1 * $26_1) * $27_1) + Math_fround(Math_fround($28_1 * $14_1) * $16_1)) - Math_fround($16_1 * Math_fround($26_1 * $19_1)));
   $461_1 = Math_fround($25_1 * $14_1);
   $25_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $25_1 = Math_fround(Math_fround(Math_fround(Math_fround($458_1 - Math_fround($461_1 * $25_1)) + Math_fround($25_1 * Math_fround($19_1 * $26_1))) - Math_fround($27_1 * Math_fround($28_1 * $26_1))) / $9_1);
   HEAPF32[$4_1 >> 2] = $25_1;
   $26_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $28_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $14_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
   $16_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $19_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[$0_1 >> 2]);
   $515_1 = Math_fround(Math_fround(Math_fround(Math_fround($26_1 * $27_1) * $28_1) + Math_fround(Math_fround($14_1 * $16_1) * $19_1)) - Math_fround($19_1 * Math_fround($27_1 * $21_1)));
   $518_1 = Math_fround($26_1 * $16_1);
   $26_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $26_1 = Math_fround(Math_fround(Math_fround(Math_fround($515_1 - Math_fround($518_1 * $26_1)) + Math_fround($26_1 * Math_fround($21_1 * $27_1))) - Math_fround($28_1 * Math_fround($14_1 * $27_1))) / $9_1);
   HEAPF32[($4_1 + 4 | 0) >> 2] = $26_1;
   HEAP32[$5_1 >> 2] = 15;
   $27_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $28_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $16_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[$0_1 >> 2]);
   $21_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $573_1 = Math_fround(Math_fround(Math_fround(Math_fround($27_1 * $28_1) * $14_1) + Math_fround(Math_fround($16_1 * $19_1) * $21_1)) - Math_fround($21_1 * Math_fround($28_1 * $8_1)));
   $576_1 = Math_fround($27_1 * $19_1);
   $27_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   $28_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   $9_1 = Math_fround(Math_fround(Math_fround(Math_fround($573_1 - Math_fround($576_1 * $27_1)) + Math_fround($27_1 * Math_fround($8_1 * $28_1))) - Math_fround($14_1 * Math_fround($16_1 * $28_1))) / $9_1);
   HEAPF32[($4_1 + 8 | 0) >> 2] = $9_1;
   HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround(Math_fround($25_1 + $26_1) + $9_1));
   $28_1 = Math_fround(0.0);
  }
  global$0 = $6_1 + 96 | 0;
  return Math_fround($28_1);
 }
 
 function $545($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, i64toi32_i32$1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), i64toi32_i32$0 = 0, $8_1 = 0, $12_1 = Math_fround(0), $15_1 = Math_fround(0), $18_1 = Math_fround(0), $14_1 = Math_fround(0), $17_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $28_1 = Math_fround(0), $27_1 = Math_fround(0), $26_1 = Math_fround(0), $29_1 = Math_fround(0), $13_1 = 0, $16_1 = 0, $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0);
  $7_1 = global$0 - 19040 | 0;
  global$0 = $7_1;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $8_1 = 0;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $5_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 18916 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 18912 | 0) >> 2] = $0_1;
  $9_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]);
  $0_1 = $1_1 + 20 | 0;
  $11_1 = Math_fround(HEAPF32[$0_1 >> 2]);
  $2_1 = $1_1 + 36 | 0;
  $12_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $13_1 = $1_1 + 24 | 0;
  $14_1 = Math_fround(HEAPF32[$13_1 >> 2]);
  $15_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
  $16_1 = $1_1 + 40 | 0;
  $17_1 = Math_fround(HEAPF32[$16_1 >> 2]);
  $18_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $21_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $25_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $27_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $28_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
  HEAP32[(($7_1 + 18912 | 0) + 52 | 0) >> 2] = 0;
  HEAP32[(($7_1 + 18912 | 0) + 36 | 0) >> 2] = 0;
  HEAP32[(($7_1 + 18912 | 0) + 20 | 0) >> 2] = 0;
  $29_1 = Math_fround(Math_fround(Math_fround($27_1 * $28_1) + Math_fround($14_1 * $15_1)) + Math_fround($17_1 * $18_1));
  HEAPF32[($7_1 + 18960 | 0) >> 2] = $29_1;
  $30_1 = Math_fround(Math_fround(Math_fround($26_1 * $28_1) + Math_fround($11_1 * $15_1)) + Math_fround($12_1 * $18_1));
  HEAPF32[($7_1 + 18956 | 0) >> 2] = $30_1;
  $15_1 = Math_fround(Math_fround(Math_fround($24_1 * $28_1) + Math_fround($25_1 * $15_1)) + Math_fround($23_1 * $18_1));
  HEAPF32[(($7_1 + 18912 | 0) + 40 | 0) >> 2] = $15_1;
  $18_1 = Math_fround(Math_fround(Math_fround($27_1 * $22_1) + Math_fround($14_1 * $9_1)) + Math_fround($17_1 * $10_1));
  HEAPF32[(($7_1 + 18912 | 0) + 32 | 0) >> 2] = $18_1;
  $28_1 = Math_fround(Math_fround(Math_fround($26_1 * $22_1) + Math_fround($11_1 * $9_1)) + Math_fround($12_1 * $10_1));
  HEAPF32[($7_1 + 18940 | 0) >> 2] = $28_1;
  $9_1 = Math_fround(Math_fround(Math_fround($24_1 * $22_1) + Math_fround($25_1 * $9_1)) + Math_fround($23_1 * $10_1));
  HEAPF32[(($7_1 + 18912 | 0) + 24 | 0) >> 2] = $9_1;
  $10_1 = Math_fround(Math_fround(Math_fround($20_1 * $27_1) + Math_fround($21_1 * $14_1)) + Math_fround($19_1 * $17_1));
  HEAPF32[(($7_1 + 18912 | 0) + 16 | 0) >> 2] = $10_1;
  $11_1 = Math_fround(Math_fround(Math_fround($20_1 * $26_1) + Math_fround($21_1 * $11_1)) + Math_fround($19_1 * $12_1));
  HEAPF32[($7_1 + 18924 | 0) >> 2] = $11_1;
  $12_1 = Math_fround(Math_fround(Math_fround($20_1 * $24_1) + Math_fround($21_1 * $25_1)) + Math_fround($19_1 * $23_1));
  HEAPF32[($7_1 + 18920 | 0) >> 2] = $12_1;
  $14_1 = Math_fround(HEAPF32[$0_1 >> 2]);
  $17_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $19_1 = Math_fround(HEAPF32[$13_1 >> 2]);
  $20_1 = Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[$16_1 >> 2]);
  $23_1 = Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $25_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $26_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $27_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $31_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $32_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $33_1 = Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]);
  $34_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  HEAP32[($7_1 + 19036 | 0) >> 2] = 0;
  HEAP32[($7_1 + 19028 | 0) >> 2] = 0;
  HEAP32[($7_1 + 19012 | 0) >> 2] = 0;
  HEAPF32[($7_1 + 19008 | 0) >> 2] = $29_1;
  HEAPF32[($7_1 + 19004 | 0) >> 2] = $18_1;
  HEAPF32[($7_1 + 19e3 | 0) >> 2] = $10_1;
  HEAP32[($7_1 + 18996 | 0) >> 2] = 0;
  HEAPF32[($7_1 + 18992 | 0) >> 2] = $30_1;
  HEAPF32[($7_1 + 18988 | 0) >> 2] = $28_1;
  HEAPF32[($7_1 + 18984 | 0) >> 2] = $11_1;
  HEAP32[($7_1 + 18980 | 0) >> 2] = 0;
  HEAPF32[($7_1 + 18976 | 0) >> 2] = $15_1;
  HEAPF32[($7_1 + 18972 | 0) >> 2] = $9_1;
  $9_1 = Math_fround($33_1 - $34_1);
  $10_1 = Math_fround($20_1 - $21_1);
  $11_1 = Math_fround($23_1 - $24_1);
  HEAPF32[($7_1 + 19024 | 0) >> 2] = Math_fround(Math_fround(Math_fround($32_1 * $9_1) + Math_fround($19_1 * $10_1)) + Math_fround($22_1 * $11_1));
  HEAPF32[($7_1 + 19020 | 0) >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $31_1) + Math_fround($10_1 * $14_1)) + Math_fround($11_1 * $17_1));
  HEAPF32[($7_1 + 19016 | 0) >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $25_1) + Math_fround($10_1 * $26_1)) + Math_fround($11_1 * $27_1));
  HEAP32[($7_1 + 19032 | 0) >> 2] = $6_1 ? 349 : 348;
  HEAPF32[($7_1 + 18968 | 0) >> 2] = $12_1;
  i64toi32_i32$1 = $7_1 + 18664 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 0;
  HEAP32[($7_1 + 18656 | 0) >> 2] = 0;
  HEAP32[($7_1 + 18660 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 0;
  HEAP32[($7_1 + 18892 | 0) >> 2] = 0;
  HEAP32[($7_1 + 18896 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 18904 | 0) >> 2] = 2;
  HEAP32[($7_1 + 18672 | 0) >> 2] = 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = 0;
  HEAPF32[($7_1 + 24 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
  HEAPF32[($7_1 + 20 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
  HEAPF32[($7_1 + 16 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[$4_1 >> 2]));
  label$1 : {
   $3_1 = ($541($7_1 + 18528 | 0 | 0, $7_1 + 18912 | 0 | 0, $7_1 + 16 | 0 | 0) | 0) + -1 | 0;
   if ($3_1 >>> 0 > 1 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     switch ($3_1 | 0) {
     default:
      i64toi32_i32$1 = $7_1 + 18520 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $7_1 + 64 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($7_1 + 72 | 0) >> 2] = 0;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$0 = 0;
      HEAP32[($7_1 + 18512 | 0) >> 2] = 0;
      HEAP32[($7_1 + 18516 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($7_1 + 18508 | 0) >> 2] = 0;
      HEAP32[($7_1 + 16 | 0) >> 2] = 9;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$0 = 0;
      HEAP32[($7_1 + 56 | 0) >> 2] = 0;
      HEAP32[($7_1 + 60 | 0) >> 2] = i64toi32_i32$0;
      $3_1 = 14336;
      label$5 : while (1) {
       $8_1 = ($7_1 + 16 | 0) + $3_1 | 0;
       HEAP32[($8_1 + 4144 | 0) >> 2] = 0;
       $6_1 = HEAP32[($7_1 + 18520 | 0) >> 2] | 0;
       HEAP32[($8_1 + 4148 | 0) >> 2] = $6_1;
       $8_1 = $8_1 + 4100 | 0;
       label$6 : {
        if (!$6_1) {
         break label$6
        }
        HEAP32[($6_1 + 44 | 0) >> 2] = $8_1;
       }
       HEAP32[($7_1 + 18520 | 0) >> 2] = $8_1;
       $3_1 = $3_1 + -56 | 0;
       if ($3_1) {
        continue label$5
       }
       break label$5;
      };
      HEAP32[($7_1 + 18524 | 0) >> 2] = 256;
      $8_1 = 0;
      HEAP32[($7_1 + 12 | 0) >> 2] = 0;
      HEAPF32[($7_1 + 8 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
      HEAPF32[($7_1 + 4 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
      HEAPF32[$7_1 >> 2] = Math_fround(-Math_fround(HEAPF32[$4_1 >> 2]));
      label$7 : {
       if (($546($7_1 + 16 | 0 | 0, $7_1 + 18528 | 0 | 0, $7_1 | 0) | 0 | 0) == (9 | 0)) {
        break label$7
       }
       label$8 : {
        if (HEAP32[($7_1 + 52 | 0) >> 2] | 0) {
         break label$8
        }
        $10_1 = Math_fround(0.0);
        $11_1 = Math_fround(0.0);
        $12_1 = Math_fround(0.0);
        break label$2;
       }
       $3_1 = $7_1 + 36 | 0;
       $12_1 = Math_fround(0.0);
       $4_1 = 0;
       $11_1 = Math_fround(0.0);
       $10_1 = Math_fround(0.0);
       label$9 : while (1) {
        $0_1 = HEAP32[($7_1 + 19036 | 0) >> 2] | 0;
        $6_1 = (HEAP32[($7_1 + 18912 | 0) >> 2] | 0) + ($0_1 >> 1 | 0) | 0;
        $2_1 = HEAP32[($3_1 + -16 | 0) >> 2] | 0;
        $8_1 = HEAP32[($7_1 + 19032 | 0) >> 2] | 0;
        label$10 : {
         if (!($0_1 & 1 | 0)) {
          break label$10
         }
         $8_1 = HEAP32[((HEAP32[$6_1 >> 2] | 0) + $8_1 | 0) >> 2] | 0;
        }
        FUNCTION_TABLE[$8_1]($7_1, $6_1, $2_1);
        $9_1 = Math_fround(HEAPF32[$3_1 >> 2]);
        $12_1 = Math_fround($12_1 + Math_fround($9_1 * Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2])));
        $11_1 = Math_fround($11_1 + Math_fround($9_1 * Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2])));
        $10_1 = Math_fround($10_1 + Math_fround(Math_fround(HEAPF32[$7_1 >> 2]) * $9_1));
        $3_1 = $3_1 + 4 | 0;
        $4_1 = $4_1 + 1 | 0;
        if ($4_1 >>> 0 >= (HEAP32[($7_1 + 52 | 0) >> 2] | 0) >>> 0) {
         break label$2
        }
        continue label$9;
       };
      }
      HEAP32[$5_1 >> 2] = 3;
      break label$1;
     case 1:
      break label$3;
     };
    }
    HEAP32[$5_1 >> 2] = 2;
    break label$1;
   }
   $9_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $17_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
   HEAP32[($5_1 + 16 | 0) >> 2] = 0;
   HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($10_1 * $24_1) + Math_fround($11_1 * $25_1)) + Math_fround($12_1 * $23_1)));
   HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround($18_1 + Math_fround(Math_fround(Math_fround($10_1 * $20_1) + Math_fround($11_1 * $21_1)) + Math_fround($12_1 * $19_1)));
   HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround($9_1 + Math_fround(Math_fround(Math_fround($10_1 * $15_1) + Math_fround($11_1 * $17_1)) + Math_fround($12_1 * $14_1)));
   $8_1 = 1;
   HEAP32[$5_1 >> 2] = 1;
   $14_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
   $17_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $26_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   HEAP32[($5_1 + 32 | 0) >> 2] = 0;
   HEAP32[($5_1 + 48 | 0) >> 2] = 0;
   $27_1 = Math_fround(HEAPF32[($7_1 + 56 | 0) >> 2]);
   HEAPF32[($5_1 + 36 | 0) >> 2] = Math_fround(-$27_1);
   $28_1 = Math_fround(HEAPF32[(($7_1 + 16 | 0) + 44 | 0) >> 2]);
   HEAPF32[($5_1 + 40 | 0) >> 2] = Math_fround(-$28_1);
   $29_1 = Math_fround(HEAPF32[(($7_1 + 16 | 0) + 48 | 0) >> 2]);
   HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround(-$29_1);
   $9_1 = Math_fround(HEAPF32[($7_1 + 72 | 0) >> 2]);
   HEAPF32[($5_1 + 52 | 0) >> 2] = Math_fround(-$9_1);
   $10_1 = Math_fround($10_1 - Math_fround($27_1 * $9_1));
   $11_1 = Math_fround($11_1 - Math_fround($9_1 * $28_1));
   $9_1 = Math_fround($12_1 - Math_fround($9_1 * $29_1));
   HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($25_1 * $10_1) + Math_fround($26_1 * $11_1)) + Math_fround($24_1 * $9_1)));
   HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround($19_1 + Math_fround(Math_fround(Math_fround($10_1 * $21_1) + Math_fround($11_1 * $22_1)) + Math_fround($9_1 * $20_1)));
   HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround($14_1 + Math_fround(Math_fround(Math_fround($10_1 * $17_1) + Math_fround($11_1 * $18_1)) + Math_fround($9_1 * $15_1)));
  }
  global$0 = $7_1 + 19040 | 0;
  return $8_1 | 0;
 }
 
 function $546($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $9_1 = Math_fround(0), $11_1 = Math_fround(0), $8_1 = 0, $4_1 = 0, $13_1 = Math_fround(0), $7_1 = 0, $12_1 = Math_fround(0), $14_1 = Math_fround(0), $10_1 = Math_fround(0), $18_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $3_1 = 0, $20_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, i64toi32_i32$0 = 0, $30_1 = 0, $31_1 = 0, $590_1 = Math_fround(0), $648_1 = Math_fround(0), $657_1 = Math_fround(0), $720_1 = Math_fround(0), $752_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($1_1 + 372 | 0) >> 2] | 0;
    if ((HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 0 < 2 >>> 0) {
     break label$2
    }
    if (!($547($1_1 | 0) | 0)) {
     break label$2
    }
    label$3 : {
     $5_1 = HEAP32[($0_1 + 18496 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$3
     }
     $6_1 = HEAP32[($0_1 + 18508 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 18500 | 0) >> 2] | 0;
     label$4 : while (1) {
      label$5 : {
       $8_1 = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
       if (!$8_1) {
        break label$5
       }
       HEAP32[($8_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
      }
      label$6 : {
       $8_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
       if (!$8_1) {
        break label$6
       }
       HEAP32[($8_1 + 48 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
      }
      label$7 : {
       if ((HEAP32[($0_1 + 18496 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
        break label$7
       }
       HEAP32[($0_1 + 18496 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
      }
      HEAP32[($5_1 + 44 | 0) >> 2] = 0;
      HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[($0_1 + 18504 | 0) >> 2] | 0;
      label$8 : {
       $8_1 = HEAP32[($0_1 + 18504 | 0) >> 2] | 0;
       if (!$8_1) {
        break label$8
       }
       HEAP32[($8_1 + 44 | 0) >> 2] = $5_1;
      }
      $7_1 = $7_1 + -1 | 0;
      HEAP32[($0_1 + 18504 | 0) >> 2] = $5_1;
      $6_1 = $6_1 + 1 | 0;
      $5_1 = HEAP32[($0_1 + 18496 | 0) >> 2] | 0;
      if ($5_1) {
       continue label$4
      }
      break label$4;
     };
     HEAP32[($0_1 + 18508 | 0) >> 2] = $6_1;
     HEAP32[($0_1 + 18500 | 0) >> 2] = $7_1;
    }
    HEAP32[($0_1 + 18492 | 0) >> 2] = 0;
    HEAP32[$0_1 >> 2] = 0;
    label$9 : {
     label$10 : {
      $6_1 = HEAP32[$4_1 >> 2] | 0;
      $8_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      $9_1 = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
      $10_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]) - $9_1);
      $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      $11_1 = Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]);
      $12_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) - $11_1);
      $7_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      $13_1 = Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]);
      $14_1 = Math_fround(Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]) - $13_1);
      $15_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]) - $11_1);
      $16_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) - $13_1);
      $17_1 = Math_fround(Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]) - $9_1);
      $13_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) - $13_1);
      $9_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) - $9_1);
      $11_1 = Math_fround(Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]) - $11_1);
      if (!(Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $12_1) * $14_1) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $16_1) * $17_1) + Math_fround(Math_fround($13_1 * $9_1) * $11_1)) - Math_fround(Math_fround($10_1 * $16_1) * $11_1)) - Math_fround(Math_fround($15_1 * $9_1) * $14_1))) - Math_fround(Math_fround($13_1 * $12_1) * $17_1)) < Math_fround(0.0) ^ 1 | 0)) {
       break label$10
      }
      $8_1 = $5_1;
      $5_1 = $6_1;
      break label$9;
     }
     HEAP32[($4_1 + 4 | 0) >> 2] = $6_1;
     HEAP32[$4_1 >> 2] = $5_1;
     $8_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
     $18_1 = $4_1 + 20 | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[$18_1 >> 2] | 0;
     HEAP32[$18_1 >> 2] = $8_1;
     $8_1 = $6_1;
    }
    $8_1 = $548($0_1 | 0, $5_1 | 0, $8_1 | 0, $7_1 | 0, 1 | 0) | 0;
    $18_1 = $548($0_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
    $19_1 = $548($0_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
    $20_1 = $548($0_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0) | 0;
    if ((HEAP32[($0_1 + 18500 | 0) >> 2] | 0 | 0) != (4 | 0)) {
     break label$2
    }
    $6_1 = HEAP32[($0_1 + 18496 | 0) >> 2] | 0;
    $9_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
    label$11 : {
     $5_1 = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$11
     }
     $9_1 = Math_fround($9_1 * $9_1);
     label$12 : while (1) {
      $11_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
      $11_1 = Math_fround($11_1 * $11_1);
      $7_1 = $11_1 < $9_1;
      $6_1 = $7_1 ? $5_1 : $6_1;
      $9_1 = $7_1 ? $11_1 : $9_1;
      $5_1 = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
      if ($5_1) {
       continue label$12
      }
      break label$12;
     };
     $9_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
    }
    $21_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
    $22_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
    $23_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
    $12_1 = Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[$6_1 >> 2]);
    HEAP32[($8_1 + 32 | 0) >> 2] = $18_1;
    HEAP8[($8_1 + 52 | 0) >> 0] = 0;
    HEAP32[($18_1 + 32 | 0) >> 2] = $8_1;
    HEAP8[($18_1 + 52 | 0) >> 0] = 0;
    HEAP32[($8_1 + 36 | 0) >> 2] = $19_1;
    HEAP8[($8_1 + 53 | 0) >> 0] = 0;
    HEAP32[($19_1 + 32 | 0) >> 2] = $8_1;
    HEAP8[($19_1 + 52 | 0) >> 0] = 1;
    HEAP32[($8_1 + 40 | 0) >> 2] = $20_1;
    HEAP8[($8_1 + 54 | 0) >> 0] = 0;
    HEAP32[($20_1 + 32 | 0) >> 2] = $8_1;
    HEAP8[($20_1 + 52 | 0) >> 0] = 2;
    HEAP32[($18_1 + 36 | 0) >> 2] = $20_1;
    HEAP8[($18_1 + 53 | 0) >> 0] = 2;
    HEAP32[($20_1 + 40 | 0) >> 2] = $18_1;
    HEAP8[($20_1 + 54 | 0) >> 0] = 1;
    HEAP32[($18_1 + 40 | 0) >> 2] = $19_1;
    HEAP8[($18_1 + 54 | 0) >> 0] = 1;
    HEAP32[($19_1 + 36 | 0) >> 2] = $18_1;
    $30_1 = $19_1 + 53 | 0;
    $31_1 = 258;
    HEAP8[$30_1 >> 0] = $31_1;
    HEAP8[($30_1 + 1 | 0) >> 0] = $31_1 >>> 8 | 0;
    HEAP32[($19_1 + 40 | 0) >> 2] = $20_1;
    HEAP8[($20_1 + 53 | 0) >> 0] = 2;
    HEAP32[($20_1 + 36 | 0) >> 2] = $19_1;
    HEAP32[$0_1 >> 2] = 0;
    $4_1 = 0;
    label$13 : {
     label$14 : while (1) {
      label$15 : {
       label$16 : {
        $5_1 = HEAP32[($0_1 + 18492 | 0) >> 2] | 0;
        if ($5_1 >>> 0 > 127 >>> 0) {
         break label$16
        }
        HEAP32[($0_1 + 18492 | 0) >> 2] = $5_1 + 1 | 0;
        $4_1 = $4_1 + 1 | 0;
        HEAP8[($6_1 + 55 | 0) >> 0] = $4_1;
        HEAP32[($3_1 + 8 | 0) >> 2] = 0;
        i64toi32_i32$0 = 0;
        HEAP32[$3_1 >> 2] = 0;
        HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
        $5_1 = $0_1 + ($5_1 << 5 | 0) | 0;
        $2_1 = $5_1 + 60 | 0;
        $542($1_1 | 0, $6_1 | 0, $2_1 | 0);
        label$17 : {
         if (!(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 >> 2]) * Math_fround(HEAPF32[($5_1 + 76 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 80 | 0) >> 2]))) + Math_fround(Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 84 | 0) >> 2]))) - Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2])) > Math_fround(9.999999747378752e-05) ^ 1 | 0)) {
          break label$17
         }
         HEAP32[$0_1 >> 2] = 7;
         break label$13;
        }
        $7_1 = $6_1 + 32 | 0;
        $5_1 = 52;
        label$18 : while (1) {
         $18_1 = $549($0_1 | 0, $4_1 | 0, $2_1 | 0, HEAP32[$7_1 >> 2] | 0 | 0, HEAPU8[($6_1 + $5_1 | 0) >> 0] | 0 | 0, $3_1 | 0) | 0;
         if (!$18_1) {
          break label$15
         }
         $8_1 = $5_1 + -51 | 0;
         $7_1 = $7_1 + 4 | 0;
         $5_1 = $5_1 + 1 | 0;
         if ($8_1 >>> 0 >= 3 >>> 0) {
          break label$15
         }
         continue label$18;
        };
       }
       HEAP32[$0_1 >> 2] = 6;
       break label$13;
      }
      label$19 : {
       if ($18_1 & (HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 > 2 >>> 0 | 0) {
        break label$19
       }
       HEAP32[$0_1 >> 2] = 4;
       break label$13;
      }
      $5_1 = HEAP32[$3_1 >> 2] | 0;
      HEAP8[($5_1 + 53 | 0) >> 0] = 2;
      $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
      HEAP32[($5_1 + 36 | 0) >> 2] = $7_1;
      HEAP32[($7_1 + 40 | 0) >> 2] = $5_1;
      HEAP8[($7_1 + 54 | 0) >> 0] = 1;
      label$20 : {
       $5_1 = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
       if (!$5_1) {
        break label$20
       }
       HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      }
      label$21 : {
       $5_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       if (!$5_1) {
        break label$21
       }
       HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
      }
      label$22 : {
       if ((HEAP32[($0_1 + 18496 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
        break label$22
       }
       HEAP32[($0_1 + 18496 | 0) >> 2] = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
      }
      HEAP32[($6_1 + 44 | 0) >> 2] = 0;
      HEAP32[($6_1 + 48 | 0) >> 2] = HEAP32[($0_1 + 18504 | 0) >> 2] | 0;
      HEAP32[($0_1 + 18500 | 0) >> 2] = (HEAP32[($0_1 + 18500 | 0) >> 2] | 0) + -1 | 0;
      label$23 : {
       $5_1 = HEAP32[($0_1 + 18504 | 0) >> 2] | 0;
       if (!$5_1) {
        break label$23
       }
       HEAP32[($5_1 + 44 | 0) >> 2] = $6_1;
      }
      HEAP32[($0_1 + 18504 | 0) >> 2] = $6_1;
      HEAP32[($0_1 + 18508 | 0) >> 2] = (HEAP32[($0_1 + 18508 | 0) >> 2] | 0) + 1 | 0;
      $6_1 = HEAP32[($0_1 + 18496 | 0) >> 2] | 0;
      $9_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
      label$24 : {
       $5_1 = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
       if (!$5_1) {
        break label$24
       }
       $9_1 = Math_fround($9_1 * $9_1);
       label$25 : while (1) {
        $11_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
        $11_1 = Math_fround($11_1 * $11_1);
        $7_1 = $11_1 < $9_1;
        $6_1 = $7_1 ? $5_1 : $6_1;
        $9_1 = $7_1 ? $11_1 : $9_1;
        $5_1 = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
        if ($5_1) {
         continue label$25
        }
        break label$25;
       };
       $9_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
      }
      $21_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
      $22_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
      $23_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
      $12_1 = Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]);
      $11_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
      $13_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
      $10_1 = Math_fround(HEAPF32[$6_1 >> 2]);
      if (($4_1 | 0) != (255 | 0)) {
       continue label$14
      }
      break label$14;
     };
    }
    HEAPF32[($0_1 + 56 | 0) >> 2] = $9_1;
    HEAPF32[($0_1 + 40 | 0) >> 2] = $10_1;
    HEAPF32[($0_1 + 52 | 0) >> 2] = $12_1;
    HEAPF32[($0_1 + 48 | 0) >> 2] = $11_1;
    HEAPF32[($0_1 + 44 | 0) >> 2] = $13_1;
    $5_1 = $0_1 + 20 | 0;
    $10_1 = Math_fround($10_1 * $9_1);
    $12_1 = Math_fround(Math_fround(HEAPF32[($22_1 + 16 | 0) >> 2]) - $10_1);
    $6_1 = $21_1 + 20 | 0;
    $13_1 = Math_fround($13_1 * $9_1);
    $14_1 = Math_fround(Math_fround(HEAPF32[$6_1 >> 2]) - $13_1);
    $7_1 = $22_1 + 20 | 0;
    $15_1 = Math_fround(Math_fround(HEAPF32[$7_1 >> 2]) - $13_1);
    $16_1 = Math_fround(Math_fround(HEAPF32[($21_1 + 16 | 0) >> 2]) - $10_1);
    $17_1 = Math_fround(Math_fround($12_1 * $14_1) - Math_fround($15_1 * $16_1));
    $8_1 = $21_1 + 24 | 0;
    $9_1 = Math_fround($11_1 * $9_1);
    $11_1 = Math_fround(Math_fround(HEAPF32[$8_1 >> 2]) - $9_1);
    $590_1 = Math_fround($15_1 * $11_1);
    $4_1 = $22_1 + 24 | 0;
    $15_1 = Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) - $9_1);
    $14_1 = Math_fround($590_1 - Math_fround($15_1 * $14_1));
    $11_1 = Math_fround(Math_fround($15_1 * $16_1) - Math_fround($12_1 * $11_1));
    $11_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($17_1 * $17_1) + Math_fround(Math_fround($14_1 * $14_1) + Math_fround($11_1 * $11_1)))));
    HEAPF32[$5_1 >> 2] = $11_1;
    $2_1 = $0_1 + 24 | 0;
    $12_1 = Math_fround(Math_fround(HEAPF32[($21_1 + 16 | 0) >> 2]) - $10_1);
    $18_1 = $23_1 + 20 | 0;
    $14_1 = Math_fround(Math_fround(HEAPF32[$18_1 >> 2]) - $13_1);
    $15_1 = Math_fround(Math_fround(HEAPF32[$6_1 >> 2]) - $13_1);
    $16_1 = Math_fround(Math_fround(HEAPF32[($23_1 + 16 | 0) >> 2]) - $10_1);
    $17_1 = Math_fround(Math_fround($12_1 * $14_1) - Math_fround($15_1 * $16_1));
    $648_1 = Math_fround($17_1 * $17_1);
    $6_1 = $23_1 + 24 | 0;
    $17_1 = Math_fround(Math_fround(HEAPF32[$6_1 >> 2]) - $9_1);
    $657_1 = Math_fround($15_1 * $17_1);
    $15_1 = Math_fround(Math_fround(HEAPF32[$8_1 >> 2]) - $9_1);
    $14_1 = Math_fround($657_1 - Math_fround($15_1 * $14_1));
    $12_1 = Math_fround(Math_fround($15_1 * $16_1) - Math_fround($12_1 * $17_1));
    $12_1 = Math_fround(Math_sqrt(Math_fround($648_1 + Math_fround(Math_fround($14_1 * $14_1) + Math_fround($12_1 * $12_1)))));
    HEAPF32[$2_1 >> 2] = $12_1;
    HEAP32[($0_1 + 4 | 0) >> 2] = $23_1;
    HEAP32[($0_1 + 36 | 0) >> 2] = 3;
    HEAP32[($0_1 + 12 | 0) >> 2] = $21_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $22_1;
    $14_1 = Math_fround(Math_fround(HEAPF32[($23_1 + 16 | 0) >> 2]) - $10_1);
    $15_1 = Math_fround(Math_fround(HEAPF32[$7_1 >> 2]) - $13_1);
    $13_1 = Math_fround(Math_fround(HEAPF32[$18_1 >> 2]) - $13_1);
    $10_1 = Math_fround(Math_fround(HEAPF32[($22_1 + 16 | 0) >> 2]) - $10_1);
    $16_1 = Math_fround(Math_fround($14_1 * $15_1) - Math_fround($13_1 * $10_1));
    $720_1 = Math_fround($16_1 * $16_1);
    $16_1 = Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) - $9_1);
    $9_1 = Math_fround(Math_fround(HEAPF32[$6_1 >> 2]) - $9_1);
    $13_1 = Math_fround(Math_fround($13_1 * $16_1) - Math_fround($9_1 * $15_1));
    $9_1 = Math_fround(Math_fround($9_1 * $10_1) - Math_fround($14_1 * $16_1));
    $9_1 = Math_fround(Math_sqrt(Math_fround($720_1 + Math_fround(Math_fround($13_1 * $13_1) + Math_fround($9_1 * $9_1)))));
    $752_1 = $9_1;
    $9_1 = Math_fround($9_1 + Math_fround($11_1 + $12_1));
    HEAPF32[($0_1 + 28 | 0) >> 2] = Math_fround($752_1 / $9_1);
    HEAPF32[$2_1 >> 2] = Math_fround($12_1 / $9_1);
    HEAPF32[$5_1 >> 2] = Math_fround($11_1 / $9_1);
    $5_1 = HEAP32[$0_1 >> 2] | 0;
    break label$1;
   }
   HEAP32[$0_1 >> 2] = 8;
   $9_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   HEAP32[($0_1 + 52 | 0) >> 2] = 0;
   $10_1 = Math_fround(-$13_1);
   HEAPF32[($0_1 + 40 | 0) >> 2] = $10_1;
   $12_1 = Math_fround(-$11_1);
   HEAPF32[($0_1 + 44 | 0) >> 2] = $12_1;
   $14_1 = Math_fround(-$9_1);
   HEAPF32[($0_1 + 48 | 0) >> 2] = $14_1;
   label$26 : {
    label$27 : {
     $9_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($11_1 * $11_1)) + Math_fround($9_1 * $9_1))));
     if ($9_1 > Math_fround(0.0) ^ 1 | 0) {
      break label$27
     }
     $9_1 = Math_fround(Math_fround(1.0) / $9_1);
     HEAPF32[($0_1 + 48 | 0) >> 2] = Math_fround($9_1 * $14_1);
     HEAPF32[($0_1 + 44 | 0) >> 2] = Math_fround($9_1 * $12_1);
     HEAPF32[($0_1 + 40 | 0) >> 2] = Math_fround($9_1 * $10_1);
     break label$26;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
    HEAP32[($0_1 + 44 | 0) >> 2] = i64toi32_i32$0;
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 52 | 0) >> 2] = 0;
   HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0_1 + 36 | 0) >> 2] = 1;
   HEAP32[($0_1 + 20 | 0) >> 2] = 1065353216;
   HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
   $5_1 = 8;
  }
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $547($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = Math_fround(0), $6_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $14_1 = Math_fround(0), i64toi32_i32$0 = 0, $13_1 = Math_fround(0), $15_1 = Math_fround(0), i64toi32_i32$1 = 0, $10_1 = Math_fround(0), $12_1 = Math_fround(0), $11_1 = Math_fround(0);
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
     $3_1 = (HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0;
     if ($3_1 >>> 0 > 3 >>> 0) {
      break label$3
     }
     label$4 : {
      label$5 : {
       switch ($3_1 | 0) {
       default:
        HEAP32[($1_1 + 28 | 0) >> 2] = 0;
        HEAP32[($2_1 + 32 | 0) >> 2] = 2;
        HEAP32[($2_1 + 20 | 0) >> 2] = 0;
        $3_1 = (HEAP32[($0_1 + 364 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($0_1 + 364 | 0) >> 2] = $3_1;
        i64toi32_i32$1 = $1_1;
        i64toi32_i32$0 = 0;
        HEAP32[($1_1 + 20 | 0) >> 2] = 0;
        HEAP32[($1_1 + 24 | 0) >> 2] = i64toi32_i32$0;
        $3_1 = HEAP32[(($0_1 + ($3_1 << 2 | 0) | 0) + 348 | 0) >> 2] | 0;
        HEAP32[($2_1 + 4 | 0) >> 2] = $3_1;
        HEAP32[($1_1 + 16 | 0) >> 2] = 1065353216;
        $542($0_1 | 0, $1_1 + 16 | 0 | 0, $3_1 | 0);
        if ($547($0_1 | 0) | 0) {
         break label$2
        }
        $4_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
        $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
        $5_1 = (HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0;
        $3_1 = HEAP32[($2_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
        HEAP32[(($0_1 + ($4_1 << 2 | 0) | 0) + 348 | 0) >> 2] = $3_1;
        HEAP32[($2_1 + 32 | 0) >> 2] = $5_1;
        $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
        HEAP32[($0_1 + 364 | 0) >> 2] = $4_1;
        $4_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
        HEAP32[($2_1 + 32 | 0) >> 2] = $4_1 + 1 | 0;
        $2_1 = $2_1 + ($4_1 << 2 | 0) | 0;
        HEAP32[$2_1 >> 2] = $3_1;
        HEAP32[($1_1 + 12 | 0) >> 2] = 0;
        HEAPF32[($1_1 + 8 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]));
        HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]));
        HEAPF32[$1_1 >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]));
        HEAP32[($2_1 + 16 | 0) >> 2] = 0;
        $542($0_1 | 0, $1_1 | 0, $3_1 | 0);
        if ($547($0_1 | 0) | 0) {
         break label$2
        }
        $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
        $3_1 = (HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($2_1 + 32 | 0) >> 2] = $3_1;
        $4_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
        $2_1 = HEAP32[($2_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
        HEAP32[(($0_1 + ($4_1 << 2 | 0) | 0) + 348 | 0) >> 2] = $2_1;
        i64toi32_i32$1 = $1_1 + 24 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($0_1 + 364 | 0) >> 2] = $4_1;
        $3_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
        $4_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
        HEAP32[($3_1 + 32 | 0) >> 2] = $4_1 + 1 | 0;
        i64toi32_i32$1 = $1_1;
        i64toi32_i32$0 = 0;
        HEAP32[($1_1 + 16 | 0) >> 2] = 0;
        HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        $3_1 = $3_1 + ($4_1 << 2 | 0) | 0;
        HEAP32[$3_1 >> 2] = $2_1;
        HEAP32[($1_1 + 20 | 0) >> 2] = 1065353216;
        HEAP32[($3_1 + 16 | 0) >> 2] = 0;
        $542($0_1 | 0, $1_1 + 16 | 0 | 0, $2_1 | 0);
        if (!($547($0_1 | 0) | 0)) {
         break label$4
        }
        break label$2;
       case 1:
        $3_1 = HEAP32[$2_1 >> 2] | 0;
        $6_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
        $4_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        $7_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
        $8_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
        $9_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
        $10_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
        $11_1 = Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]);
        HEAP32[($1_1 + 28 | 0) >> 2] = 0;
        $12_1 = Math_fround($7_1 - $6_1);
        $13_1 = Math_fround($12_1 * Math_fround(0.0));
        $14_1 = Math_fround($9_1 - $8_1);
        $15_1 = Math_fround($14_1 * Math_fround(0.0));
        $7_1 = Math_fround($13_1 - $15_1);
        HEAPF32[($1_1 + 16 | 0) >> 2] = $7_1;
        $10_1 = Math_fround($11_1 - $10_1);
        $6_1 = Math_fround($10_1 * Math_fround(0.0));
        $8_1 = Math_fround($14_1 - $6_1);
        HEAPF32[($1_1 + 20 | 0) >> 2] = $8_1;
        $9_1 = Math_fround($6_1 - $12_1);
        HEAPF32[($1_1 + 24 | 0) >> 2] = $9_1;
        label$9 : {
         if (Math_fround(Math_fround($9_1 * $9_1) + Math_fround(Math_fround($7_1 * $7_1) + Math_fround($8_1 * $8_1))) > Math_fround(0.0) ^ 1 | 0) {
          break label$9
         }
         HEAP32[($2_1 + 32 | 0) >> 2] = 3;
         HEAP32[($2_1 + 24 | 0) >> 2] = 0;
         $3_1 = (HEAP32[($0_1 + 364 | 0) >> 2] | 0) + -1 | 0;
         HEAP32[($0_1 + 364 | 0) >> 2] = $3_1;
         $3_1 = HEAP32[(($0_1 + ($3_1 << 2 | 0) | 0) + 348 | 0) >> 2] | 0;
         HEAP32[($2_1 + 8 | 0) >> 2] = $3_1;
         $542($0_1 | 0, $1_1 + 16 | 0 | 0, $3_1 | 0);
         if ($547($0_1 | 0) | 0) {
          break label$2
         }
         $4_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
         $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
         $5_1 = (HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0;
         $3_1 = HEAP32[($2_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
         HEAP32[(($0_1 + ($4_1 << 2 | 0) | 0) + 348 | 0) >> 2] = $3_1;
         HEAP32[($2_1 + 32 | 0) >> 2] = $5_1;
         $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
         HEAP32[($0_1 + 364 | 0) >> 2] = $4_1;
         $4_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
         HEAP32[($2_1 + 32 | 0) >> 2] = $4_1 + 1 | 0;
         $2_1 = $2_1 + ($4_1 << 2 | 0) | 0;
         HEAP32[$2_1 >> 2] = $3_1;
         HEAP32[($1_1 + 12 | 0) >> 2] = 0;
         HEAPF32[($1_1 + 8 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]));
         HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]));
         HEAPF32[$1_1 >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]));
         HEAP32[($2_1 + 16 | 0) >> 2] = 0;
         $542($0_1 | 0, $1_1 | 0, $3_1 | 0);
         if ($547($0_1 | 0) | 0) {
          break label$2
         }
         $3_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
         HEAP32[($0_1 + 364 | 0) >> 2] = $3_1 + 1 | 0;
         $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
         $4_1 = (HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0;
         HEAP32[($2_1 + 32 | 0) >> 2] = $4_1;
         HEAP32[(($0_1 + ($3_1 << 2 | 0) | 0) + 348 | 0) >> 2] = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
        }
        HEAP32[($1_1 + 28 | 0) >> 2] = 0;
        $7_1 = Math_fround($15_1 - $6_1);
        HEAPF32[($1_1 + 20 | 0) >> 2] = $7_1;
        $8_1 = Math_fround($13_1 - $14_1);
        HEAPF32[($1_1 + 16 | 0) >> 2] = $8_1;
        $9_1 = Math_fround($10_1 - $13_1);
        HEAPF32[($1_1 + 24 | 0) >> 2] = $9_1;
        label$10 : {
         if (!(Math_fround(Math_fround($9_1 * $9_1) + Math_fround(Math_fround($8_1 * $8_1) + Math_fround($7_1 * $7_1))) > Math_fround(0.0))) {
          break label$10
         }
         $3_1 = (HEAP32[($0_1 + 364 | 0) >> 2] | 0) + -1 | 0;
         HEAP32[($0_1 + 364 | 0) >> 2] = $3_1;
         $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
         $4_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
         HEAP32[($2_1 + 32 | 0) >> 2] = $4_1 + 1 | 0;
         $2_1 = $2_1 + ($4_1 << 2 | 0) | 0;
         HEAP32[($2_1 + 16 | 0) >> 2] = 0;
         $3_1 = HEAP32[(($0_1 + ($3_1 << 2 | 0) | 0) + 348 | 0) >> 2] | 0;
         HEAP32[$2_1 >> 2] = $3_1;
         $542($0_1 | 0, $1_1 + 16 | 0 | 0, $3_1 | 0);
         if ($547($0_1 | 0) | 0) {
          break label$2
         }
         $4_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
         $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
         $5_1 = (HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0;
         $3_1 = HEAP32[($2_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
         HEAP32[(($0_1 + ($4_1 << 2 | 0) | 0) + 348 | 0) >> 2] = $3_1;
         HEAP32[($2_1 + 32 | 0) >> 2] = $5_1;
         $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
         HEAP32[($0_1 + 364 | 0) >> 2] = $4_1;
         $4_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
         HEAP32[($2_1 + 32 | 0) >> 2] = $4_1 + 1 | 0;
         $2_1 = $2_1 + ($4_1 << 2 | 0) | 0;
         HEAP32[$2_1 >> 2] = $3_1;
         HEAP32[($1_1 + 12 | 0) >> 2] = 0;
         HEAPF32[($1_1 + 8 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]));
         HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]));
         HEAPF32[$1_1 >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]));
         HEAP32[($2_1 + 16 | 0) >> 2] = 0;
         $542($0_1 | 0, $1_1 | 0, $3_1 | 0);
         if ($547($0_1 | 0) | 0) {
          break label$2
         }
         $3_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
         HEAP32[($0_1 + 364 | 0) >> 2] = $3_1 + 1 | 0;
         $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
         $4_1 = (HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0;
         HEAP32[($2_1 + 32 | 0) >> 2] = $4_1;
         HEAP32[(($0_1 + ($3_1 << 2 | 0) | 0) + 348 | 0) >> 2] = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
        }
        HEAP32[($1_1 + 28 | 0) >> 2] = 0;
        $7_1 = Math_fround($15_1 - $10_1);
        HEAPF32[($1_1 + 20 | 0) >> 2] = $7_1;
        $8_1 = Math_fround($12_1 - $15_1);
        HEAPF32[($1_1 + 16 | 0) >> 2] = $8_1;
        $6_1 = Math_fround($6_1 - $13_1);
        HEAPF32[($1_1 + 24 | 0) >> 2] = $6_1;
        if (Math_fround(Math_fround($6_1 * $6_1) + Math_fround(Math_fround($8_1 * $8_1) + Math_fround($7_1 * $7_1))) > Math_fround(0.0) ^ 1 | 0) {
         break label$3
        }
        $3_1 = (HEAP32[($0_1 + 364 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($0_1 + 364 | 0) >> 2] = $3_1;
        $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
        $4_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
        HEAP32[($2_1 + 32 | 0) >> 2] = $4_1 + 1 | 0;
        $2_1 = $2_1 + ($4_1 << 2 | 0) | 0;
        HEAP32[($2_1 + 16 | 0) >> 2] = 0;
        $3_1 = HEAP32[(($0_1 + ($3_1 << 2 | 0) | 0) + 348 | 0) >> 2] | 0;
        HEAP32[$2_1 >> 2] = $3_1;
        $542($0_1 | 0, $1_1 + 16 | 0 | 0, $3_1 | 0);
        if ($547($0_1 | 0) | 0) {
         break label$2
        }
        $4_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
        $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
        $5_1 = (HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0;
        $3_1 = HEAP32[($2_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
        HEAP32[(($0_1 + ($4_1 << 2 | 0) | 0) + 348 | 0) >> 2] = $3_1;
        HEAP32[($2_1 + 32 | 0) >> 2] = $5_1;
        $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
        HEAP32[($0_1 + 364 | 0) >> 2] = $4_1;
        $4_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
        HEAP32[($2_1 + 32 | 0) >> 2] = $4_1 + 1 | 0;
        $2_1 = $2_1 + ($4_1 << 2 | 0) | 0;
        HEAP32[$2_1 >> 2] = $3_1;
        HEAP32[($1_1 + 12 | 0) >> 2] = 0;
        HEAPF32[($1_1 + 8 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]));
        HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]));
        HEAPF32[$1_1 >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]));
        HEAP32[($2_1 + 16 | 0) >> 2] = 0;
        $542($0_1 | 0, $1_1 | 0, $3_1 | 0);
        if ($547($0_1 | 0) | 0) {
         break label$2
        }
        $3_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
        HEAP32[($0_1 + 364 | 0) >> 2] = $3_1 + 1 | 0;
        $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
        $4_1 = (HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($2_1 + 32 | 0) >> 2] = $4_1;
        HEAP32[(($0_1 + ($3_1 << 2 | 0) | 0) + 348 | 0) >> 2] = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
        break label$3;
       case 2:
        HEAP32[($1_1 + 28 | 0) >> 2] = 0;
        $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        $6_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
        $8_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]) - $6_1);
        $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
        $7_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
        $9_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) - $7_1);
        $7_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]) - $7_1);
        $13_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) - $6_1);
        $6_1 = Math_fround(Math_fround($8_1 * $9_1) - Math_fround($7_1 * $13_1));
        HEAPF32[($1_1 + 16 | 0) >> 2] = $6_1;
        $14_1 = Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]);
        $15_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) - $14_1);
        $14_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]) - $14_1);
        $7_1 = Math_fround(Math_fround($7_1 * $15_1) - Math_fround($14_1 * $9_1));
        HEAPF32[($1_1 + 20 | 0) >> 2] = $7_1;
        $8_1 = Math_fround(Math_fround($14_1 * $13_1) - Math_fround($8_1 * $15_1));
        HEAPF32[($1_1 + 24 | 0) >> 2] = $8_1;
        if (Math_fround(Math_fround($8_1 * $8_1) + Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1))) > Math_fround(0.0) ^ 1 | 0) {
         break label$3
        }
        i64toi32_i32$1 = $2_1 + 28 | 0;
        i64toi32_i32$0 = 4;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        $3_1 = (HEAP32[($0_1 + 364 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($0_1 + 364 | 0) >> 2] = $3_1;
        $3_1 = HEAP32[(($0_1 + ($3_1 << 2 | 0) | 0) + 348 | 0) >> 2] | 0;
        HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
        $542($0_1 | 0, $1_1 + 16 | 0 | 0, $3_1 | 0);
        if ($547($0_1 | 0) | 0) {
         break label$2
        }
        $3_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
        $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
        $5_1 = (HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0;
        $4_1 = HEAP32[($2_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
        HEAP32[(($0_1 + ($3_1 << 2 | 0) | 0) + 348 | 0) >> 2] = $4_1;
        HEAP32[($2_1 + 32 | 0) >> 2] = $5_1;
        $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
        HEAP32[($0_1 + 364 | 0) >> 2] = $3_1;
        $3_1 = 1;
        $5_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
        HEAP32[($2_1 + 32 | 0) >> 2] = $5_1 + 1 | 0;
        $2_1 = $2_1 + ($5_1 << 2 | 0) | 0;
        HEAP32[$2_1 >> 2] = $4_1;
        HEAP32[($1_1 + 12 | 0) >> 2] = 0;
        HEAPF32[($1_1 + 8 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]));
        HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]));
        HEAPF32[$1_1 >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]));
        HEAP32[($2_1 + 16 | 0) >> 2] = 0;
        $542($0_1 | 0, $1_1 | 0, $4_1 | 0);
        if ($547($0_1 | 0) | 0) {
         break label$1
        }
        $3_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
        HEAP32[($0_1 + 364 | 0) >> 2] = $3_1 + 1 | 0;
        $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
        $4_1 = (HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($2_1 + 32 | 0) >> 2] = $4_1;
        HEAP32[(($0_1 + ($3_1 << 2 | 0) | 0) + 348 | 0) >> 2] = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
        break label$3;
       case 3:
        break label$5;
       };
      }
      $3_1 = 1;
      $0_1 = HEAP32[$2_1 >> 2] | 0;
      $4_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      $6_1 = Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]);
      $9_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]) - $6_1);
      $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      $7_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
      $13_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) - $7_1);
      $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      $8_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
      $14_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]) - $8_1);
      $15_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]) - $7_1);
      $12_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) - $8_1);
      $10_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]) - $6_1);
      $8_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]) - $8_1);
      $6_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) - $6_1);
      $7_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]) - $7_1);
      $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $13_1) * $14_1) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $12_1) * $10_1) + Math_fround(Math_fround($8_1 * $6_1) * $7_1)) - Math_fround(Math_fround($9_1 * $12_1) * $7_1)) - Math_fround(Math_fround($15_1 * $6_1) * $14_1))) - Math_fround(Math_fround($8_1 * $13_1) * $10_1));
      if ($6_1 != Math_fround(0.0) & $6_1 == $6_1 | 0) {
       break label$1
      }
      break label$3;
     }
     $4_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
     $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
     $5_1 = (HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0;
     $3_1 = HEAP32[($2_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
     HEAP32[(($0_1 + ($4_1 << 2 | 0) | 0) + 348 | 0) >> 2] = $3_1;
     HEAP32[($2_1 + 32 | 0) >> 2] = $5_1;
     $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
     HEAP32[($0_1 + 364 | 0) >> 2] = $4_1;
     $4_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
     HEAP32[($2_1 + 32 | 0) >> 2] = $4_1 + 1 | 0;
     $2_1 = $2_1 + ($4_1 << 2 | 0) | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     HEAP32[($1_1 + 12 | 0) >> 2] = 0;
     HEAPF32[($1_1 + 8 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]));
     HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]));
     HEAPF32[$1_1 >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]));
     HEAP32[($2_1 + 16 | 0) >> 2] = 0;
     $542($0_1 | 0, $1_1 | 0, $3_1 | 0);
     if ($547($0_1 | 0) | 0) {
      break label$2
     }
     $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
     $3_1 = (HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($2_1 + 32 | 0) >> 2] = $3_1;
     $4_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
     $2_1 = HEAP32[($2_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
     HEAP32[(($0_1 + ($4_1 << 2 | 0) | 0) + 348 | 0) >> 2] = $2_1;
     $3_1 = $1_1 + 24 | 0;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = 0;
     HEAP32[$3_1 >> 2] = 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[$3_1 >> 2] = 1065353216;
     HEAP32[($0_1 + 364 | 0) >> 2] = $4_1;
     $3_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
     $4_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
     HEAP32[($3_1 + 32 | 0) >> 2] = $4_1 + 1 | 0;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$0 = 0;
     HEAP32[($1_1 + 16 | 0) >> 2] = 0;
     HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $3_1 = $3_1 + ($4_1 << 2 | 0) | 0;
     HEAP32[$3_1 >> 2] = $2_1;
     HEAP32[($3_1 + 16 | 0) >> 2] = 0;
     $542($0_1 | 0, $1_1 + 16 | 0 | 0, $2_1 | 0);
     if ($547($0_1 | 0) | 0) {
      break label$2
     }
     $4_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
     $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
     $5_1 = (HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0;
     $3_1 = HEAP32[($2_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
     HEAP32[(($0_1 + ($4_1 << 2 | 0) | 0) + 348 | 0) >> 2] = $3_1;
     HEAP32[($2_1 + 32 | 0) >> 2] = $5_1;
     $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
     HEAP32[($0_1 + 364 | 0) >> 2] = $4_1;
     $4_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
     HEAP32[($2_1 + 32 | 0) >> 2] = $4_1 + 1 | 0;
     $2_1 = $2_1 + ($4_1 << 2 | 0) | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     HEAP32[($1_1 + 12 | 0) >> 2] = 0;
     HEAPF32[($1_1 + 8 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]));
     HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]));
     HEAPF32[$1_1 >> 2] = Math_fround(-Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]));
     HEAP32[($2_1 + 16 | 0) >> 2] = 0;
     $542($0_1 | 0, $1_1 | 0, $3_1 | 0);
     if ($547($0_1 | 0) | 0) {
      break label$2
     }
     $3_1 = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
     HEAP32[($0_1 + 364 | 0) >> 2] = $3_1 + 1 | 0;
     $2_1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
     $4_1 = (HEAP32[($2_1 + 32 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($2_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[(($0_1 + ($3_1 << 2 | 0) | 0) + 348 | 0) >> 2] = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
    }
    $3_1 = 0;
    break label$1;
   }
   $3_1 = 1;
  }
  global$0 = $1_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $548($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $10_1 = Math_fround(0), $15_1 = Math_fround(0), $11_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $16_1 = 0, $14_1 = Math_fround(0);
  label$1 : {
   $5_1 = HEAP32[($0_1 + 18504 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$1
   }
   label$2 : {
    $6_1 = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$2
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   }
   label$3 : {
    $6_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$3
    }
    HEAP32[($6_1 + 48 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
   }
   label$4 : {
    if ((HEAP32[($0_1 + 18504 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 18504 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
   }
   HEAP32[($5_1 + 44 | 0) >> 2] = 0;
   HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[($0_1 + 18496 | 0) >> 2] | 0;
   $6_1 = $0_1 + 18508 | 0;
   HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) + -1 | 0;
   label$5 : {
    $6_1 = HEAP32[($0_1 + 18496 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$5
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = $5_1;
   }
   HEAP32[($0_1 + 18496 | 0) >> 2] = $5_1;
   $6_1 = $0_1 + 18500 | 0;
   HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) + 1 | 0;
   HEAP8[($5_1 + 55 | 0) >> 0] = 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 24 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
   $7_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   $7_1 = Math_fround($7_1 - $11_1);
   $8_1 = Math_fround($8_1 - $10_1);
   $9_1 = Math_fround($9_1 - $10_1);
   $12_1 = Math_fround($12_1 - $11_1);
   $10_1 = Math_fround(Math_fround($7_1 * $8_1) - Math_fround($9_1 * $12_1));
   HEAPF32[$5_1 >> 2] = $10_1;
   $13_1 = Math_fround($13_1 - $15_1);
   $15_1 = Math_fround($14_1 - $15_1);
   $11_1 = Math_fround(Math_fround($9_1 * $13_1) - Math_fround($15_1 * $8_1));
   HEAPF32[($5_1 + 4 | 0) >> 2] = $11_1;
   $15_1 = Math_fround(Math_fround($15_1 * $12_1) - Math_fround($7_1 * $13_1));
   HEAPF32[($5_1 + 8 | 0) >> 2] = $15_1;
   $6_1 = 2;
   label$6 : {
    $10_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($10_1 * $10_1) + Math_fround($11_1 * $11_1)) + Math_fround($15_1 * $15_1))));
    if ($10_1 > Math_fround(9.999999747378752e-05) ^ 1 | 0) {
     break label$6
    }
    label$7 : {
     $16_1 = $5_1 + 16 | 0;
     if ($551($0_1 | 0, $5_1 | 0, $1_1 | 0, $2_1 | 0, $16_1 | 0) | 0) {
      break label$7
     }
     if ($551($0_1 | 0, $5_1 | 0, $2_1 | 0, $3_1 | 0, $16_1 | 0) | 0) {
      break label$7
     }
     if ($551($0_1 | 0, $5_1 | 0, $3_1 | 0, $1_1 | 0, $16_1 | 0) | 0) {
      break label$7
     }
     HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[$5_1 >> 2])) + Math_fround(Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]))) + Math_fround(Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]))) / $10_1);
    }
    $10_1 = Math_fround(Math_fround(1.0) / $10_1);
    HEAPF32[$5_1 >> 2] = Math_fround($10_1 * Math_fround(HEAPF32[$5_1 >> 2]));
    HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround($10_1 * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]));
    HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround($10_1 * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]));
    label$8 : {
     if (!$4_1) {
      break label$8
     }
     return $5_1 | 0;
    }
    $6_1 = 3;
    if (!(Math_fround(HEAPF32[$16_1 >> 2]) >= Math_fround(-9.999999747378752e-06))) {
     break label$6
    }
    return $5_1 | 0;
   }
   HEAP32[$0_1 >> 2] = $6_1;
   label$9 : {
    $1_1 = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$9
    }
    HEAP32[($1_1 + 44 | 0) >> 2] = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
   }
   label$10 : {
    $1_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$10
    }
    HEAP32[($1_1 + 48 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
   }
   label$11 : {
    if ((HEAP32[($0_1 + 18496 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
     break label$11
    }
    HEAP32[($0_1 + 18496 | 0) >> 2] = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
   }
   HEAP32[($5_1 + 44 | 0) >> 2] = 0;
   HEAP32[($5_1 + 48 | 0) >> 2] = HEAP32[($0_1 + 18504 | 0) >> 2] | 0;
   HEAP32[($0_1 + 18500 | 0) >> 2] = (HEAP32[($0_1 + 18500 | 0) >> 2] | 0) + -1 | 0;
   label$12 : {
    $1_1 = HEAP32[($0_1 + 18504 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$12
    }
    HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
   }
   HEAP32[($0_1 + 18504 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 18508 | 0) >> 2] = (HEAP32[($0_1 + 18508 | 0) >> 2] | 0) + 1 | 0;
   return 0 | 0;
  }
  HEAP32[$0_1 >> 2] = 5;
  return 0 | 0;
 }
 
 function $549($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $6_1 = 0;
  label$1 : {
   if ((HEAPU8[($3_1 + 55 | 0) >> 0] | 0 | 0) == ($1_1 | 0)) {
    break label$1
   }
   $7_1 = $4_1 << 2 | 0;
   $8_1 = HEAP32[($7_1 + 14768 | 0) >> 2] | 0;
   label$2 : {
    if (Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$3_1 >> 2]) * Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]))) + Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]))) - Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2])) < Math_fround(-9.999999747378752e-06) ^ 1 | 0) {
     break label$2
    }
    $6_1 = 0;
    $1_1 = $3_1 + 20 | 0;
    $2_1 = $548($0_1 | 0, HEAP32[($1_1 + ($8_1 << 2 | 0) | 0) >> 2] | 0 | 0, HEAP32[($1_1 + $7_1 | 0) >> 2] | 0 | 0, $2_1 | 0, 0 | 0) | 0;
    if (!$2_1) {
     break label$1
    }
    HEAP32[($2_1 + 32 | 0) >> 2] = $3_1;
    HEAP8[($2_1 + 52 | 0) >> 0] = $4_1;
    HEAP8[(($3_1 + $4_1 | 0) + 52 | 0) >> 0] = 0;
    HEAP32[(($3_1 + ($4_1 << 2 | 0) | 0) + 32 | 0) >> 2] = $2_1;
    label$3 : {
     label$4 : {
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      if (!$3_1) {
       break label$4
      }
      HEAP32[($3_1 + 36 | 0) >> 2] = $2_1;
      HEAP8[($3_1 + 53 | 0) >> 0] = 2;
      HEAP32[($2_1 + 40 | 0) >> 2] = $3_1;
      HEAP8[($2_1 + 54 | 0) >> 0] = 1;
      break label$3;
     }
     HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
    }
    HEAP32[$5_1 >> 2] = $2_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    return 1 | 0;
   }
   HEAP8[($3_1 + 55 | 0) >> 0] = $1_1;
   if (!($549($0_1 | 0, $1_1 | 0, $2_1 | 0, HEAP32[(($3_1 + ($8_1 << 2 | 0) | 0) + 32 | 0) >> 2] | 0 | 0, HEAPU8[(($3_1 + $8_1 | 0) + 52 | 0) >> 0] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   $4_1 = HEAP32[($7_1 + 14780 | 0) >> 2] | 0;
   if (!($549($0_1 | 0, $1_1 | 0, $2_1 | 0, HEAP32[(($3_1 + ($4_1 << 2 | 0) | 0) + 32 | 0) >> 2] | 0 | 0, HEAPU8[(($3_1 + $4_1 | 0) + 52 | 0) >> 0] | 0 | 0, $5_1 | 0) | 0)) {
    break label$1
   }
   label$5 : {
    $2_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$5
    }
    HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
   }
   label$6 : {
    $2_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$6
    }
    HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
   }
   label$7 : {
    if ((HEAP32[($0_1 + 18496 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
     break label$7
    }
    HEAP32[($0_1 + 18496 | 0) >> 2] = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
   }
   HEAP32[($3_1 + 44 | 0) >> 2] = 0;
   HEAP32[($3_1 + 48 | 0) >> 2] = HEAP32[($0_1 + 18504 | 0) >> 2] | 0;
   $2_1 = $0_1 + 18500 | 0;
   HEAP32[$2_1 >> 2] = (HEAP32[$2_1 >> 2] | 0) + -1 | 0;
   label$8 : {
    $2_1 = HEAP32[($0_1 + 18504 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$8
    }
    HEAP32[($2_1 + 44 | 0) >> 2] = $3_1;
   }
   HEAP32[($0_1 + 18504 | 0) >> 2] = $3_1;
   $6_1 = 1;
   $3_1 = $0_1 + 18508 | 0;
   HEAP32[$3_1 >> 2] = (HEAP32[$3_1 >> 2] | 0) + 1 | 0;
  }
  return $6_1 | 0;
 }
 
 function $550($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $6_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1_1 + 124 | 0) >> 2] | 0;
  $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + ($4_1 >> 1 | 0) | 0;
  $6_1 = HEAP32[($1_1 + 120 | 0) >> 2] | 0;
  label$1 : {
   if (!($4_1 & 1 | 0)) {
    break label$1
   }
   $6_1 = HEAP32[((HEAP32[$5_1 >> 2] | 0) + $6_1 | 0) >> 2] | 0;
  }
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  $7_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $8_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 44 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2])));
  HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 28 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2])));
  HEAPF32[$3_1 >> 2] = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2])));
  FUNCTION_TABLE[$6_1]($3_1 + 16 | 0, $5_1, $3_1);
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  $7_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
  HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 88 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 92 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 96 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 112 | 0) >> 2]));
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 76 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 108 | 0) >> 2]));
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 60 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 104 | 0) >> 2]));
  global$0 = $3_1 + 32 | 0;
 }
 
 function $551($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = Math_fround(0), $8_1 = Math_fround(0), $12_1 = Math_fround(0), $7_1 = Math_fround(0), $11_1 = Math_fround(0), $16_1 = Math_fround(0), $9_1 = Math_fround(0), $13_1 = Math_fround(0), $17_1 = Math_fround(0), $5_1 = 0, $10_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $150_1 = Math_fround(0);
  $5_1 = 0;
  label$1 : {
   $6_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
   $9_1 = Math_fround($7_1 - $8_1);
   $10_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
   $13_1 = Math_fround($11_1 - $12_1);
   $14_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $15_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $16_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
   $17_1 = Math_fround($16_1 - $6_1);
   if (Math_fround(Math_fround($6_1 * Math_fround(Math_fround($9_1 * $10_1) - Math_fround($13_1 * $14_1))) + Math_fround(Math_fround($8_1 * Math_fround(Math_fround($13_1 * $15_1) - Math_fround($17_1 * $10_1))) + Math_fround($12_1 * Math_fround(Math_fround($17_1 * $14_1) - Math_fround($9_1 * $15_1))))) < Math_fround(0.0) ^ 1 | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (Math_fround(Math_fround(Math_fround($8_1 * $9_1) + Math_fround($12_1 * $13_1)) + Math_fround($6_1 * $17_1)) > Math_fround(0.0) ^ 1 | 0) {
      break label$3
     }
     $6_1 = Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($12_1 * $12_1)) + Math_fround($6_1 * $6_1));
     break label$2;
    }
    label$4 : {
     if (Math_fround(Math_fround(Math_fround($7_1 * $9_1) + Math_fround($11_1 * $13_1)) + Math_fround($16_1 * $17_1)) < Math_fround(0.0) ^ 1 | 0) {
      break label$4
     }
     $6_1 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($11_1 * $11_1)) + Math_fround($16_1 * $16_1));
     break label$2;
    }
    $150_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($11_1 * $11_1)) + Math_fround($16_1 * $16_1)) * Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($12_1 * $12_1)) + Math_fround($6_1 * $6_1)));
    $6_1 = Math_fround(Math_fround(Math_fround($7_1 * $8_1) + Math_fround($11_1 * $12_1)) + Math_fround($16_1 * $6_1));
    $6_1 = Math_fround(Math_fround($150_1 - Math_fround($6_1 * $6_1)) / Math_fround(Math_fround(Math_fround($9_1 * $9_1) + Math_fround($13_1 * $13_1)) + Math_fround($17_1 * $17_1)));
    $6_1 = $6_1 > Math_fround(0.0) ? $6_1 : Math_fround(0.0);
   }
   HEAPF32[$4_1 >> 2] = Math_fround(Math_sqrt($6_1));
   $5_1 = 1;
  }
  return $5_1 | 0;
 }
 
 function $552($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $12_1 = 0, $60_1 = 0, $65_1 = 0, $69_1 = 0, $74_1 = 0, $77_1 = 0, $82_1 = 0;
  $10_1 = global$0 - 80 | 0;
  global$0 = $10_1;
  $11_1 = 0;
  HEAP32[($10_1 + 76 | 0) >> 2] = 0;
  HEAPF32[($10_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]));
  HEAPF32[($10_1 + 72 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]));
  HEAPF32[($10_1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 52 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]));
  $12_1 = 1;
  label$1 : {
   label$2 : {
    if ($545($2_1 | 0, $4_1 | 0, $3_1 | 0, $5_1 | 0, $10_1 + 64 | 0 | 0, $10_1 + 8 | 0 | 0, 1 | 0) | 0) {
     break label$2
    }
    $12_1 = 0;
    if (!($540($2_1 | 0, $4_1 | 0, $3_1 | 0, $5_1 | 0, $10_1 + 64 | 0 | 0, $10_1 + 8 | 0 | 0) | 0)) {
     break label$1
    }
   }
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = HEAP32[($10_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($10_1 + 16 | 0) >> 2] | 0;
   $60_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $7_1;
   HEAP32[i64toi32_i32$0 >> 2] = $60_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $10_1 + 20 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $65_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $7_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $65_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $10_1 + 28 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $69_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $8_1;
   HEAP32[i64toi32_i32$0 >> 2] = $69_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $10_1 + 36 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $74_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $8_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $74_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$0 = HEAP32[($10_1 + 44 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($10_1 + 48 | 0) >> 2] | 0;
   $77_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $6_1;
   HEAP32[i64toi32_i32$0 >> 2] = $77_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $10_1 + 52 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $82_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $6_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $82_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $11_1 = $12_1;
  }
  global$0 = $10_1 + 80 | 0;
  return $11_1 | 0;
 }
 
 function $553($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $554($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $555($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP8[($0_1 + 356 | 0) >> 0] = 1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP8[($0_1 + 312 | 0) >> 0] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1566444395;
  HEAP32[($0_1 + 292 | 0) >> 2] = 1566444395;
  HEAP32[($0_1 + 296 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 336 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 300 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1566444395;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 344 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 352 | 0) >> 0] = 0;
  $0_1 = $0_1 + 332 | 0;
  HEAP8[$0_1 >> 0] = (HEAPU8[$0_1 >> 0] | 0) & 240 | 0;
 }
 
 function $556($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $8_1 = 0, $14_1 = 0, $24_1 = 0, $28_1 = 0, $38_1 = 0, $42_1 = 0, $51_1 = 0, $56_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $8_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 292 | 0) >> 2] = $8_1;
  HEAP32[(i64toi32_i32$0 + 296 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 300 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $14_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 356 | 0) >> 0] = 1;
  $5_1 = $0_1 + ((HEAP32[$0_1 >> 2] | 0) << 4 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $24_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1 + 12 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $24_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + 4 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $28_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $1_1 = $0_1 + ((HEAP32[$0_1 >> 2] | 0) << 4 | 0) | 0;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $38_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 92 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $38_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $42_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1 + 84 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $42_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $1_1 = $0_1 + ((HEAP32[$0_1 >> 2] | 0) << 4 | 0) | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $51_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 164 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $51_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $56_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1 + 172 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $56_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
 }
 
 function $557($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $4_1 = 0, $7_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $24_1 = 0, $20_1 = 0, $22_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $19_1 = 0, $21_1 = 0, $23_1 = 0, $25_1 = 0, $1_1 = 0, $14_1 = Math_fround(0), $26_1 = Math_fround(0), $3_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $30_1 = 0, $31_1 = 0, $32_1 = 0, $72_1 = Math_fround(0), $85_1 = Math_fround(0), $90_1 = Math_fround(0), $17_1 = 0, $17$hi = 0, $18_1 = 0, $18$hi = 0, $268_1 = 0, $273_1 = 0, $279_1 = 0, $284_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $492_1 = 0, $497_1 = 0, $502_1 = 0, $507_1 = 0, $512_1 = 0, $517_1 = 0, $536_1 = 0, $540_1 = 0, $545_1 = 0, $549_1 = 0, $553_1 = 0, $558_1 = 0, $577_1 = 0, $581_1 = 0, $586_1 = 0, $590_1 = 0, $594_1 = 0, $599_1 = 0, $618_1 = 0, $622_1 = 0, $629_1 = 0, $633_1 = 0, $639_1 = 0, $644_1 = 0, $890_1 = 0, $894_1 = 0, $899_1 = 0, $903_1 = 0, $907_1 = 0, $912_1 = 0, $931_1 = 0, $935_1 = 0, $940_1 = 0, $944_1 = 0, $948_1 = 0, $953_1 = 0, $972_1 = 0, $976_1 = 0, $981_1 = 0, $985_1 = 0, $989_1 = 0, $994_1 = 0, $1013_1 = 0, $1017_1 = 0, $1024_1 = 0, $1028_1 = 0, $1034_1 = 0, $1039_1 = 0, $1064_1 = 0, $1067_1 = 0, $1073_1 = 0, $1079_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 356 | 0) >> 0] | 0) {
     break label$2
    }
    $2_1 = HEAPU8[($0_1 + 312 | 0) >> 0] | 0;
    break label$1;
   }
   $2_1 = 0;
   HEAP8[($0_1 + 356 | 0) >> 0] = 0;
   HEAP8[($0_1 + 352 | 0) >> 0] = 0;
   i64toi32_i32$1 = $0_1 + 344 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $3_1 = $0_1 + 336 | 0;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $4_1 = $0_1 + 332 | 0;
   $5_1 = (HEAPU8[$4_1 >> 0] | 0) & -16 | 0;
   HEAP8[$4_1 >> 0] = $5_1;
   label$3 : {
    $4_1 = HEAP32[$0_1 >> 2] | 0;
    if ($4_1 >>> 0 > 4 >>> 0) {
     break label$3
    }
    $2_1 = $0_1 + 316 | 0;
    label$4 : {
     label$5 : {
      label$6 : {
       switch ($4_1 | 0) {
       case 2:
        $6_1 = Math_fround(0.0);
        label$10 : {
         label$11 : {
          $7_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
          $8_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]) - $7_1);
          $72_1 = Math_fround(Math_fround(Math_fround(0.0) - $7_1) * $8_1);
          $7_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
          $9_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]) - $7_1);
          $85_1 = Math_fround($72_1 + Math_fround(Math_fround(Math_fround(0.0) - $7_1) * $9_1));
          $7_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
          $90_1 = Math_fround(Math_fround(0.0) - $7_1);
          $7_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]) - $7_1);
          $10_1 = Math_fround($85_1 + Math_fround($90_1 * $7_1));
          if ($10_1 > Math_fround(0.0) ^ 1 | 0) {
           break label$11
          }
          label$12 : {
           $6_1 = Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($9_1 * $9_1)) + Math_fround($7_1 * $7_1));
           if ($10_1 < $6_1 ^ 1 | 0) {
            break label$12
           }
           $2_1 = $5_1 | 3 | 0;
           $6_1 = Math_fround($10_1 / $6_1);
           break label$10;
          }
          $2_1 = $5_1 | 2 | 0;
          $6_1 = Math_fround(1.0);
          break label$10;
         }
         $2_1 = $5_1 | 1 | 0;
        }
        HEAP8[($0_1 + 332 | 0) >> 0] = $2_1;
        i64toi32_i32$1 = $0_1 + 344 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAPF32[($0_1 + 340 | 0) >> 2] = $6_1;
        $10_1 = Math_fround(Math_fround(1.0) - $6_1);
        HEAPF32[($0_1 + 336 | 0) >> 2] = $10_1;
        HEAP32[($0_1 + 256 | 0) >> 2] = 0;
        $7_1 = Math_fround(HEAPF32[($0_1 + 92 | 0) >> 2]);
        $11_1 = Math_fround($7_1 + Math_fround($6_1 * Math_fround(Math_fround(HEAPF32[($0_1 + 108 | 0) >> 2]) - $7_1)));
        HEAPF32[($0_1 + 252 | 0) >> 2] = $11_1;
        $7_1 = Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]);
        $12_1 = Math_fround($7_1 + Math_fround($6_1 * Math_fround(Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]) - $7_1)));
        HEAPF32[($0_1 + 248 | 0) >> 2] = $12_1;
        $7_1 = Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]);
        $13_1 = Math_fround($7_1 + Math_fround($6_1 * Math_fround(Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]) - $7_1)));
        HEAPF32[($0_1 + 244 | 0) >> 2] = $13_1;
        $14_1 = Math_fround(HEAPF32[($0_1 + 180 | 0) >> 2]);
        $15_1 = Math_fround(HEAPF32[($0_1 + 184 | 0) >> 2]);
        $7_1 = Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]);
        $16_1 = Math_fround(HEAPF32[($0_1 + 188 | 0) >> 2]);
        $8_1 = Math_fround(HEAPF32[($0_1 + 172 | 0) >> 2]);
        $9_1 = Math_fround(HEAPF32[($0_1 + 164 | 0) >> 2]);
        HEAP32[($0_1 + 288 | 0) >> 2] = 0;
        $8_1 = Math_fround($8_1 + Math_fround($6_1 * Math_fround($16_1 - $8_1)));
        HEAPF32[($0_1 + 284 | 0) >> 2] = Math_fround($11_1 - $8_1);
        $7_1 = Math_fround($7_1 + Math_fround($6_1 * Math_fround($15_1 - $7_1)));
        HEAPF32[($0_1 + 280 | 0) >> 2] = Math_fround($12_1 - $7_1);
        $9_1 = Math_fround($9_1 + Math_fround($6_1 * Math_fround($14_1 - $9_1)));
        HEAPF32[($0_1 + 276 | 0) >> 2] = Math_fround($13_1 - $9_1);
        HEAP32[($0_1 + 272 | 0) >> 2] = 0;
        HEAPF32[($0_1 + 268 | 0) >> 2] = $8_1;
        HEAPF32[($0_1 + 264 | 0) >> 2] = $7_1;
        HEAPF32[($0_1 + 260 | 0) >> 2] = $9_1;
        $4_1 = 1;
        label$13 : {
         if ($2_1 & 2 | 0) {
          break label$13
         }
         HEAP32[$0_1 >> 2] = 1;
         $4_1 = 0;
        }
        label$14 : {
         if ($2_1 & 1 | 0) {
          break label$14
         }
         HEAP32[$0_1 >> 2] = $4_1;
         $2_1 = $0_1 + ($4_1 << 4 | 0) | 0;
         i64toi32_i32$2 = $2_1 + 12 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $17_1 = i64toi32_i32$0;
         $17$hi = i64toi32_i32$1;
         i64toi32_i32$2 = $2_1 + 4 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $18_1 = i64toi32_i32$1;
         $18$hi = i64toi32_i32$0;
         $4_1 = $0_1 + 84 | 0;
         i64toi32_i32$2 = $2_1 + 84 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $268_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $4_1;
         HEAP32[i64toi32_i32$0 >> 2] = $268_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = $2_1 + 92 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $273_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $4_1 + 8 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $273_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $4_1 = $0_1 + 164 | 0;
         i64toi32_i32$2 = $2_1 + 164 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $279_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $4_1;
         HEAP32[i64toi32_i32$0 >> 2] = $279_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = $2_1 + 172 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $284_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $4_1 + 8 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $284_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $2_1 = $0_1 + 4 | 0;
         i64toi32_i32$0 = $18$hi;
         i64toi32_i32$1 = $2_1;
         HEAP32[i64toi32_i32$1 >> 2] = $18_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         i64toi32_i32$0 = $17$hi;
         i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $17_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        }
        $2_1 = $6_1 >= Math_fround(0.0) & $10_1 >= Math_fround(0.0) | 0;
        break label$3;
       case 3:
        i64toi32_i32$1 = $1_1 + 8 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = $1_1;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        $19_1 = $0_1 + 4 | 0;
        $20_1 = $0_1 + 20 | 0;
        $21_1 = $0_1 + 36 | 0;
        $558($0_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, $20_1 | 0, $21_1 | 0, $2_1 | 0) | 0;
        HEAP32[($0_1 + 256 | 0) >> 2] = 0;
        $8_1 = Math_fround(HEAPF32[($0_1 + 336 | 0) >> 2]);
        $6_1 = Math_fround(HEAPF32[($0_1 + 340 | 0) >> 2]);
        $7_1 = Math_fround(HEAPF32[($0_1 + 344 | 0) >> 2]);
        $9_1 = Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($0_1 + 92 | 0) >> 2])) + Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 108 | 0) >> 2]))) + Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2])));
        HEAPF32[($0_1 + 252 | 0) >> 2] = $9_1;
        $10_1 = Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2])) + Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]))) + Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 120 | 0) >> 2])));
        HEAPF32[($0_1 + 248 | 0) >> 2] = $10_1;
        $22_1 = $0_1 + 100 | 0;
        $23_1 = $0_1 + 116 | 0;
        $11_1 = Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2])) + Math_fround($6_1 * Math_fround(HEAPF32[$22_1 >> 2]))) + Math_fround($7_1 * Math_fround(HEAPF32[$23_1 >> 2])));
        HEAPF32[($0_1 + 244 | 0) >> 2] = $11_1;
        $24_1 = $0_1 + 180 | 0;
        $12_1 = Math_fround(HEAPF32[$24_1 >> 2]);
        $25_1 = $0_1 + 196 | 0;
        $13_1 = Math_fround(HEAPF32[$25_1 >> 2]);
        $14_1 = Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]);
        $15_1 = Math_fround(HEAPF32[($0_1 + 184 | 0) >> 2]);
        $16_1 = Math_fround(HEAPF32[($0_1 + 200 | 0) >> 2]);
        $26_1 = Math_fround(HEAPF32[($0_1 + 172 | 0) >> 2]);
        $27_1 = Math_fround(HEAPF32[($0_1 + 188 | 0) >> 2]);
        $28_1 = Math_fround(HEAPF32[($0_1 + 204 | 0) >> 2]);
        $29_1 = Math_fround(HEAPF32[($0_1 + 164 | 0) >> 2]);
        HEAP32[($0_1 + 288 | 0) >> 2] = 0;
        $26_1 = Math_fround(Math_fround(Math_fround($8_1 * $26_1) + Math_fround($6_1 * $27_1)) + Math_fround($7_1 * $28_1));
        HEAPF32[($0_1 + 284 | 0) >> 2] = Math_fround($9_1 - $26_1);
        $9_1 = Math_fround(Math_fround(Math_fround($8_1 * $14_1) + Math_fround($6_1 * $15_1)) + Math_fround($7_1 * $16_1));
        HEAPF32[($0_1 + 280 | 0) >> 2] = Math_fround($10_1 - $9_1);
        $8_1 = Math_fround(Math_fround(Math_fround($8_1 * $29_1) + Math_fround($6_1 * $12_1)) + Math_fround($7_1 * $13_1));
        HEAPF32[($0_1 + 276 | 0) >> 2] = Math_fround($11_1 - $8_1);
        HEAP32[($0_1 + 272 | 0) >> 2] = 0;
        HEAPF32[($0_1 + 268 | 0) >> 2] = $26_1;
        HEAPF32[($0_1 + 264 | 0) >> 2] = $9_1;
        HEAPF32[($0_1 + 260 | 0) >> 2] = $8_1;
        label$15 : {
         label$16 : {
          label$17 : {
           label$18 : {
            label$19 : {
             label$20 : {
              label$21 : {
               $5_1 = HEAP32[$0_1 >> 2] | 0;
               if (($5_1 | 0) < (4 | 0)) {
                break label$21
               }
               label$22 : {
                $4_1 = HEAPU8[($0_1 + 332 | 0) >> 0] | 0;
                if (!($4_1 & 8 | 0)) {
                 break label$22
                }
                $2_1 = $5_1;
                break label$20;
               }
               $2_1 = $5_1 + -1 | 0;
               HEAP32[$0_1 >> 2] = $2_1;
               $5_1 = $0_1 + ($2_1 << 4 | 0) | 0;
               i64toi32_i32$2 = $5_1 + 12 | 0;
               i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $492_1 = i64toi32_i32$0;
               i64toi32_i32$0 = $0_1 + 60 | 0;
               HEAP32[i64toi32_i32$0 >> 2] = $492_1;
               HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
               i64toi32_i32$2 = $5_1 + 4 | 0;
               i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $497_1 = i64toi32_i32$1;
               i64toi32_i32$1 = $0_1 + 52 | 0;
               HEAP32[i64toi32_i32$1 >> 2] = $497_1;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
               i64toi32_i32$2 = $5_1 + 92 | 0;
               i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $502_1 = i64toi32_i32$0;
               i64toi32_i32$0 = $0_1 + 140 | 0;
               HEAP32[i64toi32_i32$0 >> 2] = $502_1;
               HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
               i64toi32_i32$2 = $5_1 + 84 | 0;
               i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $507_1 = i64toi32_i32$1;
               i64toi32_i32$1 = $0_1 + 132 | 0;
               HEAP32[i64toi32_i32$1 >> 2] = $507_1;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
               i64toi32_i32$2 = $5_1 + 164 | 0;
               i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $512_1 = i64toi32_i32$0;
               i64toi32_i32$0 = $0_1 + 212 | 0;
               HEAP32[i64toi32_i32$0 >> 2] = $512_1;
               HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
               i64toi32_i32$2 = $5_1 + 172 | 0;
               i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $517_1 = i64toi32_i32$1;
               i64toi32_i32$1 = $0_1 + 220 | 0;
               HEAP32[i64toi32_i32$1 >> 2] = $517_1;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
               break label$20;
              }
              $2_1 = 3;
              if (($5_1 | 0) != (3 | 0)) {
               break label$19
              }
              $4_1 = HEAPU8[($0_1 + 332 | 0) >> 0] | 0;
             }
             if ($4_1 & 4 | 0) {
              break label$18
             }
             $2_1 = $2_1 + -1 | 0;
             HEAP32[$0_1 >> 2] = $2_1;
             $5_1 = $0_1 + ($2_1 << 4 | 0) | 0;
             i64toi32_i32$2 = $5_1 + 12 | 0;
             i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $536_1 = i64toi32_i32$0;
             i64toi32_i32$0 = $21_1 + 8 | 0;
             HEAP32[i64toi32_i32$0 >> 2] = $536_1;
             HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
             i64toi32_i32$2 = $5_1 + 4 | 0;
             i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $540_1 = i64toi32_i32$1;
             i64toi32_i32$1 = $21_1;
             HEAP32[i64toi32_i32$1 >> 2] = $540_1;
             HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$2 = $5_1 + 92 | 0;
             i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $545_1 = i64toi32_i32$0;
             i64toi32_i32$0 = $23_1 + 8 | 0;
             HEAP32[i64toi32_i32$0 >> 2] = $545_1;
             HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
             i64toi32_i32$2 = $5_1 + 84 | 0;
             i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $549_1 = i64toi32_i32$1;
             i64toi32_i32$1 = $23_1;
             HEAP32[i64toi32_i32$1 >> 2] = $549_1;
             HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$2 = $5_1 + 164 | 0;
             i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $553_1 = i64toi32_i32$0;
             i64toi32_i32$0 = $25_1;
             HEAP32[i64toi32_i32$0 >> 2] = $553_1;
             HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
             i64toi32_i32$2 = $5_1 + 172 | 0;
             i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
             i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
             $558_1 = i64toi32_i32$1;
             i64toi32_i32$1 = $25_1 + 8 | 0;
             HEAP32[i64toi32_i32$1 >> 2] = $558_1;
             HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
             break label$18;
            }
            $2_1 = 2;
            if (($5_1 | 0) < (2 | 0)) {
             break label$17
            }
            $4_1 = HEAPU8[($0_1 + 332 | 0) >> 0] | 0;
           }
           if ($4_1 & 2 | 0) {
            break label$16
           }
           $2_1 = $2_1 + -1 | 0;
           HEAP32[$0_1 >> 2] = $2_1;
           $5_1 = $0_1 + ($2_1 << 4 | 0) | 0;
           i64toi32_i32$2 = $5_1 + 12 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $577_1 = i64toi32_i32$0;
           i64toi32_i32$0 = $20_1 + 8 | 0;
           HEAP32[i64toi32_i32$0 >> 2] = $577_1;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$2 = $5_1 + 4 | 0;
           i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $581_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $20_1;
           HEAP32[i64toi32_i32$1 >> 2] = $581_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$2 = $5_1 + 92 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $586_1 = i64toi32_i32$0;
           i64toi32_i32$0 = $22_1 + 8 | 0;
           HEAP32[i64toi32_i32$0 >> 2] = $586_1;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$2 = $5_1 + 84 | 0;
           i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $590_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $22_1;
           HEAP32[i64toi32_i32$1 >> 2] = $590_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$2 = $5_1 + 164 | 0;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $594_1 = i64toi32_i32$0;
           i64toi32_i32$0 = $24_1;
           HEAP32[i64toi32_i32$0 >> 2] = $594_1;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$2 = $5_1 + 172 | 0;
           i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $599_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $24_1 + 8 | 0;
           HEAP32[i64toi32_i32$1 >> 2] = $599_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           break label$16;
          }
          $2_1 = 1;
          if (($5_1 | 0) != (1 | 0)) {
           break label$15
          }
          $4_1 = HEAPU8[($0_1 + 332 | 0) >> 0] | 0;
         }
         if ($4_1 & 1 | 0) {
          break label$15
         }
         $2_1 = $2_1 + -1 | 0;
         HEAP32[$0_1 >> 2] = $2_1;
         $2_1 = $0_1 + ($2_1 << 4 | 0) | 0;
         i64toi32_i32$2 = $2_1 + 12 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $618_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $19_1 + 8 | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $618_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = $2_1 + 4 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $622_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $19_1;
         HEAP32[i64toi32_i32$1 >> 2] = $622_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $4_1 = $0_1 + 84 | 0;
         i64toi32_i32$2 = $2_1 + 92 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $629_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $4_1 + 8 | 0;
         HEAP32[i64toi32_i32$0 >> 2] = $629_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = $2_1 + 84 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $633_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $4_1;
         HEAP32[i64toi32_i32$1 >> 2] = $633_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $4_1 = $0_1 + 164 | 0;
         i64toi32_i32$2 = $2_1 + 164 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $639_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $4_1;
         HEAP32[i64toi32_i32$0 >> 2] = $639_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = $2_1 + 172 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $644_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $4_1 + 8 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $644_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        }
        $2_1 = 0;
        if (Math_fround(HEAPF32[$3_1 >> 2]) >= Math_fround(0.0) ^ 1 | 0) {
         break label$3
        }
        if ($6_1 >= Math_fround(0.0) ^ 1 | 0) {
         break label$3
        }
        if ($7_1 >= Math_fround(0.0) ^ 1 | 0) {
         break label$3
        }
        $2_1 = Math_fround(HEAPF32[($0_1 + 348 | 0) >> 2]) >= Math_fround(0.0);
        break label$3;
       case 4:
        i64toi32_i32$1 = $1_1 + 8 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = $1_1;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        label$23 : {
         $5_1 = $0_1 + 4 | 0;
         $19_1 = $0_1 + 20 | 0;
         $20_1 = $0_1 + 36 | 0;
         $22_1 = $0_1 + 52 | 0;
         if (!($559($0_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, $19_1 | 0, $20_1 | 0, $22_1 | 0, $2_1 | 0) | 0)) {
          break label$23
         }
         HEAP32[($0_1 + 256 | 0) >> 2] = 0;
         $7_1 = Math_fround(HEAPF32[($0_1 + 336 | 0) >> 2]);
         $8_1 = Math_fround(HEAPF32[($0_1 + 340 | 0) >> 2]);
         $9_1 = Math_fround(HEAPF32[($0_1 + 344 | 0) >> 2]);
         $6_1 = Math_fround(HEAPF32[($0_1 + 348 | 0) >> 2]);
         $10_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 92 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($0_1 + 108 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]))) + Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 140 | 0) >> 2])));
         HEAPF32[($0_1 + 252 | 0) >> 2] = $10_1;
         $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($0_1 + 120 | 0) >> 2]))) + Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2])));
         HEAPF32[($0_1 + 248 | 0) >> 2] = $11_1;
         $21_1 = $0_1 + 100 | 0;
         $25_1 = $0_1 + 116 | 0;
         $30_1 = $0_1 + 132 | 0;
         $12_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[$21_1 >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[$25_1 >> 2]))) + Math_fround($6_1 * Math_fround(HEAPF32[$30_1 >> 2])));
         HEAPF32[($0_1 + 244 | 0) >> 2] = $12_1;
         HEAP32[($0_1 + 288 | 0) >> 2] = 0;
         HEAP32[($0_1 + 272 | 0) >> 2] = 0;
         $23_1 = $0_1 + 180 | 0;
         $31_1 = $0_1 + 196 | 0;
         $32_1 = $0_1 + 212 | 0;
         $13_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 164 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[$23_1 >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[$31_1 >> 2]))) + Math_fround($6_1 * Math_fround(HEAPF32[$32_1 >> 2])));
         HEAPF32[($0_1 + 260 | 0) >> 2] = $13_1;
         $14_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($0_1 + 184 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($0_1 + 200 | 0) >> 2]))) + Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 216 | 0) >> 2])));
         HEAPF32[($0_1 + 264 | 0) >> 2] = $14_1;
         $7_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 172 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($0_1 + 188 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($0_1 + 204 | 0) >> 2]))) + Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 220 | 0) >> 2])));
         HEAPF32[($0_1 + 268 | 0) >> 2] = $7_1;
         HEAPF32[($0_1 + 276 | 0) >> 2] = Math_fround($12_1 - $13_1);
         HEAPF32[($0_1 + 280 | 0) >> 2] = Math_fround($11_1 - $14_1);
         HEAPF32[($0_1 + 284 | 0) >> 2] = Math_fround($10_1 - $7_1);
         label$24 : {
          label$25 : {
           label$26 : {
            label$27 : {
             label$28 : {
              label$29 : {
               label$30 : {
                $24_1 = HEAP32[$0_1 >> 2] | 0;
                if (($24_1 | 0) < (4 | 0)) {
                 break label$30
                }
                label$31 : {
                 $4_1 = HEAPU8[($0_1 + 332 | 0) >> 0] | 0;
                 if (!($4_1 & 8 | 0)) {
                  break label$31
                 }
                 $2_1 = $24_1;
                 break label$29;
                }
                $2_1 = $24_1 + -1 | 0;
                HEAP32[$0_1 >> 2] = $2_1;
                $24_1 = $0_1 + ($2_1 << 4 | 0) | 0;
                i64toi32_i32$2 = $24_1 + 12 | 0;
                i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                $890_1 = i64toi32_i32$0;
                i64toi32_i32$0 = $22_1 + 8 | 0;
                HEAP32[i64toi32_i32$0 >> 2] = $890_1;
                HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                i64toi32_i32$2 = $24_1 + 4 | 0;
                i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                $894_1 = i64toi32_i32$1;
                i64toi32_i32$1 = $22_1;
                HEAP32[i64toi32_i32$1 >> 2] = $894_1;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                i64toi32_i32$2 = $24_1 + 92 | 0;
                i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                $899_1 = i64toi32_i32$0;
                i64toi32_i32$0 = $30_1 + 8 | 0;
                HEAP32[i64toi32_i32$0 >> 2] = $899_1;
                HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                i64toi32_i32$2 = $24_1 + 84 | 0;
                i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                $903_1 = i64toi32_i32$1;
                i64toi32_i32$1 = $30_1;
                HEAP32[i64toi32_i32$1 >> 2] = $903_1;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                i64toi32_i32$2 = $24_1 + 164 | 0;
                i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                $907_1 = i64toi32_i32$0;
                i64toi32_i32$0 = $32_1;
                HEAP32[i64toi32_i32$0 >> 2] = $907_1;
                HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                i64toi32_i32$2 = $24_1 + 172 | 0;
                i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                $912_1 = i64toi32_i32$1;
                i64toi32_i32$1 = $32_1 + 8 | 0;
                HEAP32[i64toi32_i32$1 >> 2] = $912_1;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                break label$29;
               }
               $2_1 = 3;
               if (($24_1 | 0) != (3 | 0)) {
                break label$28
               }
               $4_1 = HEAPU8[($0_1 + 332 | 0) >> 0] | 0;
              }
              if ($4_1 & 4 | 0) {
               break label$27
              }
              $2_1 = $2_1 + -1 | 0;
              HEAP32[$0_1 >> 2] = $2_1;
              $22_1 = $0_1 + ($2_1 << 4 | 0) | 0;
              i64toi32_i32$2 = $22_1 + 12 | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $931_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $20_1 + 8 | 0;
              HEAP32[i64toi32_i32$0 >> 2] = $931_1;
              HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$2 = $22_1 + 4 | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $935_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $20_1;
              HEAP32[i64toi32_i32$1 >> 2] = $935_1;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$2 = $22_1 + 92 | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $940_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $25_1 + 8 | 0;
              HEAP32[i64toi32_i32$0 >> 2] = $940_1;
              HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$2 = $22_1 + 84 | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $944_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $25_1;
              HEAP32[i64toi32_i32$1 >> 2] = $944_1;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$2 = $22_1 + 164 | 0;
              i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $948_1 = i64toi32_i32$0;
              i64toi32_i32$0 = $31_1;
              HEAP32[i64toi32_i32$0 >> 2] = $948_1;
              HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$2 = $22_1 + 172 | 0;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
              i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
              $953_1 = i64toi32_i32$1;
              i64toi32_i32$1 = $31_1 + 8 | 0;
              HEAP32[i64toi32_i32$1 >> 2] = $953_1;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              break label$27;
             }
             $2_1 = 2;
             if (($24_1 | 0) < (2 | 0)) {
              break label$26
             }
             $4_1 = HEAPU8[($0_1 + 332 | 0) >> 0] | 0;
            }
            if ($4_1 & 2 | 0) {
             break label$25
            }
            $2_1 = $2_1 + -1 | 0;
            HEAP32[$0_1 >> 2] = $2_1;
            $20_1 = $0_1 + ($2_1 << 4 | 0) | 0;
            i64toi32_i32$2 = $20_1 + 12 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $972_1 = i64toi32_i32$0;
            i64toi32_i32$0 = $19_1 + 8 | 0;
            HEAP32[i64toi32_i32$0 >> 2] = $972_1;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$2 = $20_1 + 4 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $976_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $19_1;
            HEAP32[i64toi32_i32$1 >> 2] = $976_1;
            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
            i64toi32_i32$2 = $20_1 + 92 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $981_1 = i64toi32_i32$0;
            i64toi32_i32$0 = $21_1 + 8 | 0;
            HEAP32[i64toi32_i32$0 >> 2] = $981_1;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$2 = $20_1 + 84 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $985_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $21_1;
            HEAP32[i64toi32_i32$1 >> 2] = $985_1;
            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
            i64toi32_i32$2 = $20_1 + 164 | 0;
            i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $989_1 = i64toi32_i32$0;
            i64toi32_i32$0 = $23_1;
            HEAP32[i64toi32_i32$0 >> 2] = $989_1;
            HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
            i64toi32_i32$2 = $20_1 + 172 | 0;
            i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
            i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
            $994_1 = i64toi32_i32$1;
            i64toi32_i32$1 = $23_1 + 8 | 0;
            HEAP32[i64toi32_i32$1 >> 2] = $994_1;
            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
            break label$25;
           }
           $2_1 = 1;
           if (($24_1 | 0) != (1 | 0)) {
            break label$24
           }
           $4_1 = HEAPU8[($0_1 + 332 | 0) >> 0] | 0;
          }
          if ($4_1 & 1 | 0) {
           break label$24
          }
          $2_1 = $2_1 + -1 | 0;
          HEAP32[$0_1 >> 2] = $2_1;
          $2_1 = $0_1 + ($2_1 << 4 | 0) | 0;
          i64toi32_i32$2 = $2_1 + 12 | 0;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $1013_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $5_1 + 8 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1013_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = $2_1 + 4 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $1017_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $5_1;
          HEAP32[i64toi32_i32$1 >> 2] = $1017_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          $4_1 = $0_1 + 84 | 0;
          i64toi32_i32$2 = $2_1 + 92 | 0;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $1024_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $4_1 + 8 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1024_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = $2_1 + 84 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $1028_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $4_1;
          HEAP32[i64toi32_i32$1 >> 2] = $1028_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          $4_1 = $0_1 + 164 | 0;
          i64toi32_i32$2 = $2_1 + 164 | 0;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $1034_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $4_1;
          HEAP32[i64toi32_i32$0 >> 2] = $1034_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = $2_1 + 172 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $1039_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $4_1 + 8 | 0;
          HEAP32[i64toi32_i32$1 >> 2] = $1039_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         }
         $2_1 = 0;
         if (Math_fround(HEAPF32[$3_1 >> 2]) >= Math_fround(0.0) ^ 1 | 0) {
          break label$3
         }
         if (Math_fround(HEAPF32[($0_1 + 340 | 0) >> 2]) >= Math_fround(0.0) ^ 1 | 0) {
          break label$3
         }
         if (Math_fround(HEAPF32[($0_1 + 344 | 0) >> 2]) >= Math_fround(0.0) ^ 1 | 0) {
          break label$3
         }
         $2_1 = $6_1 >= Math_fround(0.0);
         break label$3;
        }
        if (!(HEAPU8[($0_1 + 352 | 0) >> 0] | 0)) {
         break label$5
        }
        break;
       case 1:
        break label$4;
       default:
        break label$6;
       };
      }
      $2_1 = 0;
      break label$3;
     }
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$0 = 0;
     HEAP32[($0_1 + 276 | 0) >> 2] = 0;
     HEAP32[($0_1 + 280 | 0) >> 2] = i64toi32_i32$0;
     $2_1 = 1;
     HEAP8[($0_1 + 312 | 0) >> 0] = 1;
     i64toi32_i32$1 = $0_1 + 284 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     break label$1;
    }
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[($0_1 + 164 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
    $1064_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[($0_1 + 260 | 0) >> 2] = $1064_1;
    HEAP32[($0_1 + 264 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
    $1067_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[($0_1 + 244 | 0) >> 2] = $1067_1;
    HEAP32[($0_1 + 248 | 0) >> 2] = i64toi32_i32$0;
    $2_1 = $0_1 + 268 | 0;
    i64toi32_i32$2 = $0_1 + 172 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1073_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[i64toi32_i32$0 >> 2] = $1073_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $4_1 = $0_1 + 252 | 0;
    i64toi32_i32$2 = $0_1 + 92 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1079_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1;
    HEAP32[i64toi32_i32$1 >> 2] = $1079_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($0_1 + 352 | 0) >> 0] = 0;
    HEAP32[($0_1 + 288 | 0) >> 2] = 0;
    HEAPF32[($0_1 + 280 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 248 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 264 | 0) >> 2]));
    HEAPF32[($0_1 + 276 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 244 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 260 | 0) >> 2]));
    HEAPF32[($0_1 + 284 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[i64toi32_i32$1 >> 2]) - Math_fround(HEAPF32[$2_1 >> 2]));
    i64toi32_i32$1 = $0_1 + 344 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 336 | 0) >> 2] = 1065353216;
    HEAP32[($0_1 + 340 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($0_1 + 332 | 0) >> 0] = $5_1;
    $2_1 = 1;
   }
   HEAP8[($0_1 + 312 | 0) >> 0] = $2_1;
  }
  global$0 = $1_1 + 16 | 0;
  return ($2_1 & 255 | 0 | 0) != (0 | 0) | 0;
 }
 
 function $558($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $16_1 = Math_fround(0), $11_1 = Math_fround(0), i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $8_1 = Math_fround(0), i64toi32_i32$0 = 0, $21_1 = Math_fround(0), $15_1 = Math_fround(0), $22_1 = Math_fround(0), $6_1 = 0, $10_1 = Math_fround(0), $13_1 = Math_fround(0), $18_1 = Math_fround(0), $20_1 = Math_fround(0), $29_1 = Math_fround(0), $9_1 = Math_fround(0), $14_1 = Math_fround(0), $19_1 = Math_fround(0), $24_1 = Math_fround(0), $26_1 = Math_fround(0), $28_1 = Math_fround(0), $23_1 = Math_fround(0), $25_1 = Math_fround(0), $27_1 = Math_fround(0), $30_1 = Math_fround(0), $7_1 = Math_fround(0), $12_1 = Math_fround(0), $17_1 = Math_fround(0), $117_1 = 0, $122_1 = 0, $166_1 = 0, $171_1 = 0, $260_1 = 0, $265_1 = 0;
  $6_1 = (HEAPU8[($5_1 + 16 | 0) >> 0] | 0) & -16 | 0;
  HEAP8[($5_1 + 16 | 0) >> 0] = $6_1;
  $7_1 = Math_fround(HEAPF32[$4_1 >> 2]);
  $8_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $9_1 = Math_fround($7_1 - $8_1);
  $10_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $11_1 = Math_fround($10_1 - $8_1);
  $12_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $14_1 = Math_fround($12_1 - $13_1);
  $15_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $16_1 = Math_fround($15_1 - $13_1);
  $17_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $19_1 = Math_fround($17_1 - $18_1);
  $20_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $21_1 = Math_fround($20_1 - $18_1);
  $22_1 = Math_fround(Math_fround(Math_fround($9_1 * $11_1) + Math_fround($14_1 * $16_1)) + Math_fround($19_1 * $21_1));
  label$1 : {
   label$2 : {
    $23_1 = Math_fround(HEAPF32[$3_1 >> 2]);
    $24_1 = Math_fround($23_1 - $8_1);
    $25_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
    $26_1 = Math_fround($25_1 - $13_1);
    $27_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
    $28_1 = Math_fround($27_1 - $18_1);
    $11_1 = Math_fround(Math_fround(Math_fround($24_1 * $11_1) + Math_fround($26_1 * $16_1)) + Math_fround($28_1 * $21_1));
    if ($11_1 <= Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    if ($22_1 <= Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $117_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[$5_1 >> 2] = $117_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $122_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $122_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($5_1 + 16 | 0) >> 0] = $6_1 | 1 | 0;
    $11_1 = Math_fround(0.0);
    $8_1 = Math_fround(1.0);
    $16_1 = Math_fround(0.0);
    break label$1;
   }
   $16_1 = Math_fround($10_1 - $23_1);
   $21_1 = Math_fround($15_1 - $25_1);
   $29_1 = Math_fround($20_1 - $27_1);
   $30_1 = Math_fround(Math_fround(Math_fround($9_1 * $16_1) + Math_fround($14_1 * $21_1)) + Math_fround($19_1 * $29_1));
   label$3 : {
    $21_1 = Math_fround(Math_fround(Math_fround($24_1 * $16_1) + Math_fround($26_1 * $21_1)) + Math_fround($28_1 * $29_1));
    if ($21_1 >= Math_fround(0.0) ^ 1 | 0) {
     break label$3
    }
    if ($30_1 <= $21_1 ^ 1 | 0) {
     break label$3
    }
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $166_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[$5_1 >> 2] = $166_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $171_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $171_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($5_1 + 16 | 0) >> 0] = $6_1 | 2 | 0;
    $11_1 = Math_fround(1.0);
    $8_1 = Math_fround(0.0);
    $16_1 = Math_fround(0.0);
    break label$1;
   }
   $29_1 = Math_fround(Math_fround($11_1 * $30_1) - Math_fround($21_1 * $22_1));
   label$4 : {
    if ($21_1 <= Math_fround(0.0) ^ 1 | 0) {
     break label$4
    }
    if ($11_1 >= Math_fround(0.0) ^ 1 | 0) {
     break label$4
    }
    $16_1 = Math_fround(0.0);
    if ($29_1 <= Math_fround(0.0) ^ 1 | 0) {
     break label$4
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    HEAP8[($5_1 + 16 | 0) >> 0] = $6_1 | 3 | 0;
    $11_1 = Math_fround($11_1 / Math_fround($11_1 - $21_1));
    HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround($18_1 + Math_fround($28_1 * $11_1));
    HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround($13_1 + Math_fround($26_1 * $11_1));
    HEAPF32[$5_1 >> 2] = Math_fround($8_1 + Math_fround($24_1 * $11_1));
    $8_1 = Math_fround(Math_fround(1.0) - $11_1);
    break label$1;
   }
   $16_1 = Math_fround($10_1 - $7_1);
   $15_1 = Math_fround($15_1 - $12_1);
   $20_1 = Math_fround($20_1 - $17_1);
   $10_1 = Math_fround(Math_fround(Math_fround($24_1 * $16_1) + Math_fround($26_1 * $15_1)) + Math_fround($28_1 * $20_1));
   label$5 : {
    $16_1 = Math_fround(Math_fround(Math_fround($9_1 * $16_1) + Math_fround($14_1 * $15_1)) + Math_fround($19_1 * $20_1));
    if ($16_1 >= Math_fround(0.0) ^ 1 | 0) {
     break label$5
    }
    if ($10_1 <= $16_1 ^ 1 | 0) {
     break label$5
    }
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $260_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[$5_1 >> 2] = $260_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $265_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $265_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($5_1 + 16 | 0) >> 0] = $6_1 | 4 | 0;
    $16_1 = Math_fround(1.0);
    $8_1 = Math_fround(0.0);
    $11_1 = Math_fround(0.0);
    break label$1;
   }
   $15_1 = Math_fround(Math_fround($10_1 * $22_1) - Math_fround($11_1 * $16_1));
   label$6 : {
    if ($16_1 <= Math_fround(0.0) ^ 1 | 0) {
     break label$6
    }
    if ($22_1 >= Math_fround(0.0) ^ 1 | 0) {
     break label$6
    }
    $11_1 = Math_fround(0.0);
    if ($15_1 <= Math_fround(0.0) ^ 1 | 0) {
     break label$6
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    HEAP8[($5_1 + 16 | 0) >> 0] = $6_1 | 5 | 0;
    $16_1 = Math_fround($22_1 / Math_fround($22_1 - $16_1));
    HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround($18_1 + Math_fround($19_1 * $16_1));
    HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround($13_1 + Math_fround($14_1 * $16_1));
    HEAPF32[$5_1 >> 2] = Math_fround($8_1 + Math_fround($9_1 * $16_1));
    $8_1 = Math_fround(Math_fround(1.0) - $16_1);
    break label$1;
   }
   label$7 : {
    $11_1 = Math_fround(Math_fround($21_1 * $16_1) - Math_fround($10_1 * $30_1));
    if ($11_1 <= Math_fround(0.0) ^ 1 | 0) {
     break label$7
    }
    $22_1 = Math_fround($30_1 - $21_1);
    if ($22_1 >= Math_fround(0.0) ^ 1 | 0) {
     break label$7
    }
    $16_1 = Math_fround($10_1 - $16_1);
    if ($16_1 >= Math_fround(0.0) ^ 1 | 0) {
     break label$7
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    HEAP8[($5_1 + 16 | 0) >> 0] = $6_1 | 6 | 0;
    $16_1 = Math_fround($22_1 / Math_fround($22_1 + $16_1));
    HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround($27_1 + Math_fround(Math_fround($17_1 - $27_1) * $16_1));
    HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround($25_1 + Math_fround(Math_fround($12_1 - $25_1) * $16_1));
    HEAPF32[$5_1 >> 2] = Math_fround($23_1 + Math_fround(Math_fround($7_1 - $23_1) * $16_1));
    $11_1 = Math_fround(Math_fround(1.0) - $16_1);
    $8_1 = Math_fround(0.0);
    break label$1;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   HEAP8[($5_1 + 16 | 0) >> 0] = $6_1 | 7 | 0;
   $11_1 = Math_fround(Math_fround(1.0) / Math_fround($29_1 + Math_fround($11_1 + $15_1)));
   $16_1 = Math_fround($29_1 * $11_1);
   $11_1 = Math_fround($15_1 * $11_1);
   HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(Math_fround($19_1 * $16_1) + Math_fround($18_1 + Math_fround($28_1 * $11_1)));
   HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(Math_fround($14_1 * $16_1) + Math_fround($13_1 + Math_fround($26_1 * $11_1)));
   HEAPF32[$5_1 >> 2] = Math_fround(Math_fround($9_1 * $16_1) + Math_fround($8_1 + Math_fround($24_1 * $11_1)));
   $8_1 = Math_fround(Math_fround(Math_fround(1.0) - $11_1) - $16_1);
  }
  HEAPF32[($5_1 + 20 | 0) >> 2] = $8_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = 0;
  HEAPF32[($5_1 + 28 | 0) >> 2] = $16_1;
  HEAPF32[($5_1 + 24 | 0) >> 2] = $11_1;
  return 1 | 0;
 }
 
 function $559($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $15_1 = Math_fround(0), $7_1 = 0, $18_1 = Math_fround(0), $13_1 = Math_fround(0), $16_1 = Math_fround(0), $12_1 = Math_fround(0), $19_1 = Math_fround(0), i64toi32_i32$1 = 0, $35_1 = Math_fround(0), i64toi32_i32$0 = 0, $9_1 = 0, $21_1 = Math_fround(0), i64toi32_i32$2 = 0, $10_1 = 0, $14_1 = Math_fround(0), $20_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $26_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $34_1 = Math_fround(0), $36_1 = 0, $37_1 = 0, $11_1 = Math_fround(0), $17_1 = Math_fround(0), $22_1 = Math_fround(0), $25_1 = Math_fround(0), $27_1 = Math_fround(0), $33_1 = Math_fround(0), $38_1 = 0, $44_1 = 0, $54_1 = 0, $234_1 = Math_fround(0), $286_1 = Math_fround(0), $310_1 = Math_fround(0), $316_1 = Math_fround(0), $328_1 = Math_fround(0), $395_1 = Math_fround(0), $405_1 = Math_fround(0), $430_1 = 0, $473_1 = Math_fround(0), $483_1 = Math_fround(0), $517_1 = 0, $526_1 = 0, $554_1 = Math_fround(0), $564_1 = Math_fround(0), $640_1 = Math_fround(0), $650_1 = Math_fround(0);
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $44_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[$6_1 >> 2] = $44_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP8[($6_1 + 16 | 0) >> 0] = HEAPU8[($6_1 + 16 | 0) >> 0] | 0 | 15 | 0;
  $54_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $54_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($7_1 + 24 | 0) >> 0] = 0;
  $9_1 = -1;
  $10_1 = -1;
  label$1 : {
   $11_1 = Math_fround(HEAPF32[$5_1 >> 2]);
   $12_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $13_1 = Math_fround($11_1 - $12_1);
   $14_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $16_1 = Math_fround($14_1 - $15_1);
   $17_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $19_1 = Math_fround($17_1 - $18_1);
   $20_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   $21_1 = Math_fround($20_1 - $18_1);
   $22_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
   $23_1 = Math_fround($22_1 - $15_1);
   $24_1 = Math_fround(Math_fround($16_1 * $19_1) - Math_fround($21_1 * $23_1));
   $25_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
   $26_1 = Math_fround($25_1 - $15_1);
   $27_1 = Math_fround(HEAPF32[$4_1 >> 2]);
   $28_1 = Math_fround($27_1 - $12_1);
   $29_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $30_1 = Math_fround($29_1 - $12_1);
   $31_1 = Math_fround(Math_fround($21_1 * $28_1) - Math_fround($30_1 * $19_1));
   $32_1 = Math_fround(Math_fround($30_1 * $23_1) - Math_fround($16_1 * $28_1));
   $33_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
   $34_1 = Math_fround($33_1 - $18_1);
   $35_1 = Math_fround(Math_fround(Math_fround($13_1 * $24_1) + Math_fround($26_1 * $31_1)) + Math_fround($32_1 * $34_1));
   if (Math_fround($35_1 * $35_1) < Math_fround(9.99999905104687e-09)) {
    break label$1
   }
   $10_1 = Math_fround($35_1 * Math_fround(Math_fround(Math_fround($24_1 * Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) - $12_1)) + Math_fround($31_1 * Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) - $15_1))) + Math_fround($32_1 * Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) - $18_1)))) < Math_fround(0.0);
  }
  label$2 : {
   $24_1 = Math_fround(Math_fround($28_1 * $26_1) - Math_fround($23_1 * $13_1));
   $31_1 = Math_fround(Math_fround($23_1 * $34_1) - Math_fround($19_1 * $26_1));
   $32_1 = Math_fround(Math_fround($19_1 * $13_1) - Math_fround($28_1 * $34_1));
   $35_1 = Math_fround(Math_fround($21_1 * $24_1) + Math_fround(Math_fround($30_1 * $31_1) + Math_fround($16_1 * $32_1)));
   if (Math_fround($35_1 * $35_1) < Math_fround(9.99999905104687e-09)) {
    break label$2
   }
   $9_1 = Math_fround($35_1 * Math_fround(Math_fround(Math_fround($31_1 * Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) - $12_1)) + Math_fround($32_1 * Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) - $15_1))) + Math_fround($24_1 * Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) - $18_1)))) < Math_fround(0.0);
  }
  $36_1 = -1;
  $37_1 = -1;
  label$3 : {
   $35_1 = Math_fround(Math_fround($16_1 * $13_1) - Math_fround($30_1 * $26_1));
   $234_1 = Math_fround($19_1 * $35_1);
   $16_1 = Math_fround(Math_fround($21_1 * $26_1) - Math_fround($16_1 * $34_1));
   $19_1 = Math_fround(Math_fround($30_1 * $34_1) - Math_fround($21_1 * $13_1));
   $13_1 = Math_fround($234_1 + Math_fround(Math_fround($28_1 * $16_1) + Math_fround($23_1 * $19_1)));
   if (Math_fround($13_1 * $13_1) < Math_fround(9.99999905104687e-09)) {
    break label$3
   }
   $37_1 = Math_fround($13_1 * Math_fround(Math_fround(Math_fround($16_1 * Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) - $12_1)) + Math_fround($19_1 * Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) - $15_1))) + Math_fround($35_1 * Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) - $18_1)))) < Math_fround(0.0);
  }
  label$4 : {
   $286_1 = Math_fround($18_1 - $20_1);
   $18_1 = Math_fround($22_1 - $14_1);
   $13_1 = Math_fround($11_1 - $29_1);
   $16_1 = Math_fround($27_1 - $29_1);
   $19_1 = Math_fround($25_1 - $14_1);
   $21_1 = Math_fround(Math_fround($18_1 * $13_1) - Math_fround($16_1 * $19_1));
   $310_1 = Math_fround($12_1 - $29_1);
   $12_1 = Math_fround($17_1 - $20_1);
   $316_1 = Math_fround($12_1 * $19_1);
   $19_1 = Math_fround($33_1 - $20_1);
   $18_1 = Math_fround($316_1 - Math_fround($18_1 * $19_1));
   $328_1 = Math_fround($15_1 - $14_1);
   $15_1 = Math_fround(Math_fround($16_1 * $19_1) - Math_fround($12_1 * $13_1));
   $12_1 = Math_fround(Math_fround($286_1 * $21_1) + Math_fround(Math_fround($310_1 * $18_1) + Math_fround($328_1 * $15_1)));
   if (Math_fround($12_1 * $12_1) < Math_fround(9.99999905104687e-09)) {
    break label$4
   }
   $36_1 = Math_fround($12_1 * Math_fround(Math_fround(Math_fround($18_1 * Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) - $29_1)) + Math_fround($15_1 * Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) - $14_1))) + Math_fround($21_1 * Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) - $20_1)))) < Math_fround(0.0);
  }
  label$5 : {
   label$6 : {
    $38_1 = $9_1 | $10_1 | 0 | $37_1 | 0 | $36_1 | 0;
    if (($38_1 | 0) > (-1 | 0)) {
     break label$6
    }
    HEAP8[($6_1 + 36 | 0) >> 0] = 1;
    $5_1 = 0;
    break label$5;
   }
   label$7 : {
    if ($38_1) {
     break label$7
    }
    $5_1 = 0;
    break label$5;
   }
   label$8 : {
    label$9 : {
     if ($10_1) {
      break label$9
     }
     $12_1 = Math_fround(3402823466385288598117041.0e14);
     break label$8;
    }
    $558($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $7_1 + 8 | 0 | 0) | 0;
    $12_1 = Math_fround(3402823466385288598117041.0e14);
    $18_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
    $15_1 = Math_fround($18_1 - Math_fround(HEAPF32[$1_1 >> 2]));
    $395_1 = Math_fround($15_1 * $15_1);
    $13_1 = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
    $15_1 = Math_fround($13_1 - Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]));
    $405_1 = Math_fround($395_1 + Math_fround($15_1 * $15_1));
    $16_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
    $15_1 = Math_fround($16_1 - Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]));
    $15_1 = Math_fround($405_1 + Math_fround($15_1 * $15_1));
    if ($15_1 < Math_fround(3402823466385288598117041.0e14) ^ 1 | 0) {
     break label$8
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    HEAPF32[($6_1 + 8 | 0) >> 2] = $16_1;
    HEAPF32[($6_1 + 4 | 0) >> 2] = $13_1;
    HEAPF32[$6_1 >> 2] = $18_1;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
    $430_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1;
    HEAP32[($6_1 + 20 | 0) >> 2] = $430_1;
    HEAP32[($6_1 + 24 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($6_1 + 32 | 0) >> 2] = 0;
    HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[(($7_1 + 8 | 0) + 28 | 0) >> 2] | 0;
    $10_1 = HEAPU8[($7_1 + 24 | 0) >> 0] | 0;
    HEAP8[($6_1 + 16 | 0) >> 0] = $10_1 & 1 | 0 | ((HEAPU8[($6_1 + 16 | 0) >> 0] | 0) & 240 | 0) | 0 | ($10_1 & 2 | 0) | 0 | ($10_1 & 4 | 0) | 0;
    $12_1 = $15_1;
   }
   label$10 : {
    if (!$9_1) {
     break label$10
    }
    $558($1_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 | 0, $5_1 | 0, $7_1 + 8 | 0 | 0) | 0;
    $18_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
    $15_1 = Math_fround($18_1 - Math_fround(HEAPF32[$1_1 >> 2]));
    $473_1 = Math_fround($15_1 * $15_1);
    $13_1 = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
    $15_1 = Math_fround($13_1 - Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]));
    $483_1 = Math_fround($473_1 + Math_fround($15_1 * $15_1));
    $16_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
    $15_1 = Math_fround($16_1 - Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]));
    $15_1 = Math_fround($483_1 + Math_fround($15_1 * $15_1));
    if ($15_1 < $12_1 ^ 1 | 0) {
     break label$10
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    HEAPF32[($6_1 + 8 | 0) >> 2] = $16_1;
    HEAPF32[($6_1 + 4 | 0) >> 2] = $13_1;
    HEAPF32[$6_1 >> 2] = $18_1;
    HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = 0;
    i64toi32_i32$2 = ($7_1 + 8 | 0) + 24 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $517_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $6_1 + 28 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $517_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $9_1 = HEAPU8[($7_1 + 24 | 0) >> 0] | 0;
    $526_1 = $9_1 & 1 | 0 | ((HEAPU8[($6_1 + 16 | 0) >> 0] | 0) & 240 | 0) | 0;
    $9_1 = $9_1 << 1 | 0;
    HEAP8[($6_1 + 16 | 0) >> 0] = $526_1 | ($9_1 & 4 | 0) | 0 | ($9_1 & 8 | 0) | 0;
    $12_1 = $15_1;
   }
   label$11 : {
    if (!$37_1) {
     break label$11
    }
    $558($1_1 | 0, $1_1 | 0, $2_1 | 0, $5_1 | 0, $3_1 | 0, $7_1 + 8 | 0 | 0) | 0;
    $18_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
    $15_1 = Math_fround($18_1 - Math_fround(HEAPF32[$1_1 >> 2]));
    $554_1 = Math_fround($15_1 * $15_1);
    $13_1 = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
    $15_1 = Math_fround($13_1 - Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]));
    $564_1 = Math_fround($554_1 + Math_fround($15_1 * $15_1));
    $16_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
    $15_1 = Math_fround($16_1 - Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]));
    $15_1 = Math_fround($564_1 + Math_fround($15_1 * $15_1));
    if ($15_1 < $12_1 ^ 1 | 0) {
     break label$11
    }
    HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    HEAPF32[($6_1 + 8 | 0) >> 2] = $16_1;
    HEAPF32[($6_1 + 4 | 0) >> 2] = $13_1;
    HEAPF32[$6_1 >> 2] = $18_1;
    HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
    HEAP32[($6_1 + 28 | 0) >> 2] = 0;
    HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[(($7_1 + 8 | 0) + 24 | 0) >> 2] | 0;
    HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[(($7_1 + 8 | 0) + 28 | 0) >> 2] | 0;
    $2_1 = HEAPU8[($7_1 + 24 | 0) >> 0] | 0;
    HEAP8[($6_1 + 16 | 0) >> 0] = $2_1 & 1 | 0 | ((HEAPU8[($6_1 + 16 | 0) >> 0] | 0) & 240 | 0) | 0 | (($2_1 >>> 1 | 0) & 2 | 0) | 0 | (($2_1 << 2 | 0) & 8 | 0) | 0;
    $12_1 = $15_1;
   }
   label$12 : {
    if ($36_1) {
     break label$12
    }
    $5_1 = 1;
    break label$5;
   }
   $558($1_1 | 0, $1_1 | 0, $3_1 | 0, $5_1 | 0, $4_1 | 0, $7_1 + 8 | 0 | 0) | 0;
   $5_1 = 1;
   $18_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
   $15_1 = Math_fround($18_1 - Math_fround(HEAPF32[$1_1 >> 2]));
   $640_1 = Math_fround($15_1 * $15_1);
   $13_1 = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
   $15_1 = Math_fround($13_1 - Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]));
   $650_1 = Math_fround($640_1 + Math_fround($15_1 * $15_1));
   $16_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
   $15_1 = Math_fround($16_1 - Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]));
   if (Math_fround($650_1 + Math_fround($15_1 * $15_1)) < $12_1 ^ 1 | 0) {
    break label$5
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   HEAPF32[($6_1 + 8 | 0) >> 2] = $16_1;
   HEAPF32[($6_1 + 4 | 0) >> 2] = $13_1;
   HEAPF32[$6_1 >> 2] = $18_1;
   HEAP32[($6_1 + 20 | 0) >> 2] = 0;
   HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
   HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[(($7_1 + 8 | 0) + 24 | 0) >> 2] | 0;
   HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[(($7_1 + 8 | 0) + 28 | 0) >> 2] | 0;
   $5_1 = 1;
   $1_1 = HEAPU8[($7_1 + 24 | 0) >> 0] | 0;
   HEAP8[($6_1 + 16 | 0) >> 0] = $1_1 & 4 | 0 | ((HEAPU8[($6_1 + 16 | 0) >> 0] | 0) & 240 | 0) | 0 | (($1_1 << 1 | 0) & 2 | 0) | 0 | (($1_1 << 2 | 0) & 8 | 0) | 0;
  }
  global$0 = $7_1 + 48 | 0;
  return $5_1 | 0;
 }
 
 function $560($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $9_1 = 0, $12_1 = 0;
  $2_1 = $557($0_1 | 0) | 0;
  i64toi32_i32$2 = $0_1 + 284 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $9_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 276 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 280 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[i64toi32_i32$1 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $2_1 | 0;
 }
 
 function $561($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $9_1 = Math_fround(0), $4_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $31_1 = Math_fround(0), $39_1 = Math_fround(0);
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    if (($2_1 | 0) >= (1 | 0)) {
     break label$2
    }
    $3_1 = 0;
    break label$1;
   }
   $4_1 = $0_1 + 8 | 0;
   $5_1 = Math_fround(HEAPF32[($0_1 + 308 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   label$3 : while (1) {
    $3_1 = 1;
    $9_1 = Math_fround($8_1 - Math_fround(HEAPF32[($4_1 + -4 | 0) >> 2]));
    $31_1 = Math_fround($9_1 * $9_1);
    $9_1 = Math_fround($7_1 - Math_fround(HEAPF32[$4_1 >> 2]));
    $39_1 = Math_fround($31_1 + Math_fround($9_1 * $9_1));
    $9_1 = Math_fround($6_1 - Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
    if (!(Math_fround($39_1 + Math_fround($9_1 * $9_1)) <= $5_1 ^ 1 | 0)) {
     break label$1
    }
    $4_1 = $4_1 + 16 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$3
    }
    break label$3;
   };
   $3_1 = 0;
  }
  label$4 : {
   if (Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]) != Math_fround(HEAPF32[($0_1 + 304 | 0) >> 2])) {
    break label$4
   }
   if (Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) != Math_fround(HEAPF32[($0_1 + 300 | 0) >> 2])) {
    break label$4
   }
   if (Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) != Math_fround(HEAPF32[($0_1 + 296 | 0) >> 2])) {
    break label$4
   }
   if (Math_fround(HEAPF32[$1_1 >> 2]) != Math_fround(HEAPF32[($0_1 + 292 | 0) >> 2])) {
    break label$4
   }
   $3_1 = 1;
  }
  return $3_1 | 0;
 }
 
 function $562($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = 0, $12_1 = 0, $17_1 = 0, $20_1 = 0;
  $557($0_1 | 0) | 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 244 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 248 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[i64toi32_i32$0 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 252 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0_1 + 268 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 260 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 264 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[i64toi32_i32$1 >> 2] = $20_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $563($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  HEAP32[$0_1 >> 2] = 14908;
  HEAP32[($0_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 24 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $4_1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $0_1, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($1_1))), HEAPF32[(wasm2js_i32$0 + 44 | 0) >> 2] = wasm2js_f32$0;
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($2_1));
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1;
  HEAP32[($0_1 + 72 | 0) >> 2] = 1;
  HEAP32[($0_1 + 76 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = -1;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAPF32[($0_1 + 48 | 0) >> 2] = $5_1;
  return $0_1 | 0;
 }
 
 function $564($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = Math_fround($6_1);
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1;
  HEAP32[($0_1 + 72 | 0) >> 2] = 1;
  HEAP32[($0_1 + 76 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = -1;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAPF32[($0_1 + 48 | 0) >> 2] = $6_1;
  HEAPF32[($0_1 + 44 | 0) >> 2] = $5_1;
  HEAP32[($0_1 + 40 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 24 | 0) >> 2] = $7_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $8_1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = 14908;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $565($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $566($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $566($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $8_1 = Math_fround(0), $11_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $22_1 = Math_fround(0), $14_1 = Math_fround(0), $5_1 = 0, $13_1 = Math_fround(0), $21_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $9_1 = 0, $23_1 = Math_fround(0), $20_1 = Math_fround(0), $18_1 = Math_fround(0), $25_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $19_1 = 0, $24_1 = 0, $62_1 = 0, $68_1 = 0, $74_1 = 0, $81_1 = 0, $84_1 = 0, $87_1 = 0, $90_1 = 0, $93_1 = 0, $100_1 = 0, $106_1 = 0, $112_1 = 0, $118_1 = 0, $121_1 = 0, $125_1 = 0, $129_1 = 0, $133_1 = 0, $543_1 = Math_fround(0), $549_1 = Math_fround(0), $561_1 = 0, $567_1 = 0, $578_1 = 0, $583_1 = 0, $619_1 = 0, $622_1 = 0, $836_1 = Math_fround(0), $843_1 = Math_fround(0), $865_1 = 0, $872_1 = 0, $875_1 = 0, $878_1 = 0, $927_1 = Math_fround(0), $936_1 = Math_fround(0), $963_1 = 0, $971_1 = 0, $988_1 = 0, $991_1 = 0, $1026_1 = 0, $1029_1 = 0, $1033_1 = Math_fround(0), $1077_1 = 0, $1086_1 = 0, $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47_1 = Math_fround(0), $48_1 = Math_fround(0), $1459 = Math_fround(0), $1550 = Math_fround(0), $1585 = Math_fround(0);
  $4_1 = global$0 - 272 | 0;
  global$0 = $4_1;
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  i64toi32_i32$1 = ($4_1 + 256 | 0) + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[($4_1 + 256 | 0) >> 2] = 0;
  HEAP32[($4_1 + 260 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $62_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 160 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $62_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $68_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 160 | 0) + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $68_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $74_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 160 | 0) + 40 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $74_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $5_1 = ($4_1 + 160 | 0) + 56 | 0;
  i64toi32_i32$2 = $1_1 + 56 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $81_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $84_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 160 | 0) >> 2] = $84_1;
  HEAP32[($4_1 + 164 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
  $87_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[($4_1 + 176 | 0) >> 2] = $87_1;
  HEAP32[($4_1 + 180 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
  $90_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 192 | 0) >> 2] = $90_1;
  HEAP32[($4_1 + 196 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
  $93_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[($4_1 + 208 | 0) >> 2] = $93_1;
  HEAP32[($4_1 + 212 | 0) >> 2] = i64toi32_i32$0;
  $6_1 = ($4_1 + 96 | 0) + 56 | 0;
  i64toi32_i32$2 = $1_1 + 120 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $100_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[i64toi32_i32$0 >> 2] = $100_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 72 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $106_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 96 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $106_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 88 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $112_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 96 | 0) + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $112_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 104 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $118_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($4_1 + 96 | 0) + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $118_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
  $121_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 96 | 0) >> 2] = $121_1;
  HEAP32[($4_1 + 100 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 80 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $125_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[($4_1 + 112 | 0) >> 2] = $125_1;
  HEAP32[($4_1 + 116 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 96 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $129_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 128 | 0) >> 2] = $129_1;
  HEAP32[($4_1 + 132 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 112 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $133_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[($4_1 + 144 | 0) >> 2] = $133_1;
  HEAP32[($4_1 + 148 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = ($4_1 + 96 | 0) + 52 | 0;
  $8_1 = Math_fround(HEAPF32[$7_1 >> 2]);
  $9_1 = ($4_1 + 160 | 0) + 52 | 0;
  $10_1 = Math_fround(HEAPF32[$9_1 >> 2]);
  $11_1 = Math_fround(HEAPF32[($4_1 + 144 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($4_1 + 208 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[$5_1 >> 2]);
  $14_1 = Math_fround(HEAPF32[$6_1 >> 2]);
  $15_1 = Math_fround(Math_fround($13_1 + $14_1) * Math_fround(.5));
  HEAPF32[$5_1 >> 2] = Math_fround($13_1 - $15_1);
  $16_1 = Math_fround(Math_fround($10_1 + $8_1) * Math_fround(.5));
  HEAPF32[$9_1 >> 2] = Math_fround($10_1 - $16_1);
  $17_1 = Math_fround(Math_fround($12_1 + $11_1) * Math_fround(.5));
  HEAPF32[($4_1 + 208 | 0) >> 2] = Math_fround($12_1 - $17_1);
  HEAPF32[$6_1 >> 2] = Math_fround($14_1 - $15_1);
  HEAPF32[$7_1 >> 2] = Math_fround($8_1 - $16_1);
  HEAPF32[($4_1 + 144 | 0) >> 2] = Math_fround($11_1 - $17_1);
  $6_1 = 0;
  label$1 : {
   if (((HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + -17 | 0) >>> 0 > 1 >>> 0) {
    break label$1
   }
   $6_1 = ((HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + -17 | 0) >>> 0 < 2 >>> 0;
  }
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = -1;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(0 + 1728 | 0) >> 2] = (HEAP32[(0 + 1728 | 0) >> 2] | 0) + 1 | 0;
  $18_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
  $19_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
  $555(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
  $20_1 = $19_1 ? Math_fround(0.0) : $8_1;
  $9_1 = $0_1 + 4 | 0;
  $21_1 = Math_fround(999999984306749440.0);
  $7_1 = 0;
  label$2 : while (1) {
   HEAP32[($4_1 + 252 | 0) >> 2] = 0;
   $11_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   $12_1 = Math_fround(-$11_1);
   $8_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
   HEAPF32[($4_1 + 248 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * $12_1) - Math_fround(Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]) * $8_1)) - Math_fround(Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]) * $10_1));
   HEAPF32[($4_1 + 244 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * $12_1) - Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]))) - Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2])));
   HEAPF32[($4_1 + 240 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * $12_1) - Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]))) - Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2])));
   HEAP32[($4_1 + 236 | 0) >> 2] = 0;
   HEAPF32[($4_1 + 232 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 88 | 0) >> 2]))) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 104 | 0) >> 2])));
   HEAPF32[($4_1 + 228 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 84 | 0) >> 2]))) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 100 | 0) >> 2])));
   HEAPF32[($4_1 + 224 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]))) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 96 | 0) >> 2])));
   $104($4_1 + 80 | 0 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, $4_1 + 240 | 0 | 0);
   $104($4_1 + 64 | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $4_1 + 224 | 0 | 0);
   HEAP32[($4_1 + 60 | 0) >> 2] = 0;
   $8_1 = Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($4_1 + 84 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($4_1 + 88 | 0) >> 2]);
   $12_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($4_1 + 192 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($4_1 + 196 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 200 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 216 | 0) >> 2]));
   HEAPF32[($4_1 + 56 | 0) >> 2] = $12_1;
   $14_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($4_1 + 176 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($4_1 + 180 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 184 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 212 | 0) >> 2]));
   HEAPF32[($4_1 + 52 | 0) >> 2] = $14_1;
   $22_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($4_1 + 160 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($4_1 + 164 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 168 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 208 | 0) >> 2]));
   HEAPF32[($4_1 + 48 | 0) >> 2] = $22_1;
   HEAP32[($4_1 + 44 | 0) >> 2] = 0;
   $8_1 = Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]);
   $13_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 152 | 0) >> 2]));
   HEAPF32[($4_1 + 40 | 0) >> 2] = $13_1;
   $23_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($4_1 + 112 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($4_1 + 116 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 120 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 148 | 0) >> 2]));
   HEAPF32[($4_1 + 36 | 0) >> 2] = $23_1;
   $8_1 = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($4_1 + 100 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 104 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 144 | 0) >> 2]));
   HEAPF32[($4_1 + 32 | 0) >> 2] = $8_1;
   label$3 : {
    if (!$6_1) {
     break label$3
    }
    HEAP32[($4_1 + 40 | 0) >> 2] = 0;
    HEAP32[($4_1 + 56 | 0) >> 2] = 0;
    $13_1 = Math_fround(0.0);
    $12_1 = Math_fround(0.0);
   }
   HEAP32[($4_1 + 28 | 0) >> 2] = 0;
   $10_1 = Math_fround($14_1 - $23_1);
   HEAPF32[($4_1 + 20 | 0) >> 2] = $10_1;
   $11_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
   $8_1 = Math_fround($22_1 - $8_1);
   HEAPF32[($4_1 + 16 | 0) >> 2] = $8_1;
   $14_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   $12_1 = Math_fround($12_1 - $13_1);
   HEAPF32[($4_1 + 24 | 0) >> 2] = $12_1;
   label$4 : {
    label$5 : {
     label$6 : {
      $8_1 = Math_fround(Math_fround(Math_fround($8_1 * $14_1) + Math_fround($10_1 * $11_1)) + Math_fround($12_1 * Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2])));
      if ($8_1 > Math_fround(0.0) ^ 1 | 0) {
       break label$6
      }
      if (Math_fround($8_1 * $8_1) > Math_fround($21_1 * Math_fround(HEAPF32[($1_1 + 128 | 0) >> 2])) ^ 1 | 0) {
       break label$6
      }
      HEAP32[($0_1 + 68 | 0) >> 2] = 10;
      break label$5;
     }
     label$7 : {
      if (!($561(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $4_1 + 16 | 0 | 0) | 0)) {
       break label$7
      }
      $7_1 = 1;
      HEAP32[($0_1 + 68 | 0) >> 2] = 1;
      $5_1 = 2;
      break label$4;
     }
     label$8 : {
      $8_1 = Math_fround($21_1 - $8_1);
      if ($8_1 <= Math_fround($21_1 * Math_fround(9.999999974752427e-07)) ^ 1 | 0) {
       break label$8
      }
      $5_1 = 2;
      HEAP32[($0_1 + 68 | 0) >> 2] = $8_1 <= Math_fround(0.0) ? 2 : 11;
      $7_1 = 1;
      break label$4;
     }
     $556(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $4_1 + 16 | 0 | 0, $4_1 + 48 | 0 | 0, $4_1 + 32 | 0 | 0);
     label$9 : {
      if ($560(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0) {
       break label$9
      }
      HEAP32[($0_1 + 68 | 0) >> 2] = 3;
      break label$5;
     }
     label$10 : {
      $8_1 = Math_fround(HEAPF32[$4_1 >> 2]);
      $543_1 = Math_fround($8_1 * $8_1);
      $8_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
      $549_1 = Math_fround($543_1 + Math_fround($8_1 * $8_1));
      $8_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
      $8_1 = Math_fround($549_1 + Math_fround($8_1 * $8_1));
      if ($8_1 < Math_fround(9.999999974752427e-07) ^ 1 | 0) {
       break label$10
      }
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      $561_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $9_1;
      HEAP32[i64toi32_i32$0 >> 2] = $561_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($0_1 + 68 | 0) >> 2] = 6;
      i64toi32_i32$2 = $4_1 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $567_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $9_1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $567_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      break label$5;
     }
     label$11 : {
      label$12 : {
       if (Math_fround($21_1 - $8_1) <= Math_fround($21_1 * Math_fround(1.1920928955078125e-07)) ^ 1 | 0) {
        break label$12
       }
       HEAP32[($0_1 + 68 | 0) >> 2] = 12;
       $7_1 = 1;
       $5_1 = 2;
       break label$11;
      }
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      $578_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $9_1;
      HEAP32[i64toi32_i32$0 >> 2] = $578_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $4_1 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $583_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $9_1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $583_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $24_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
      HEAP32[($0_1 + 64 | 0) >> 2] = $24_1 + 1 | 0;
      $5_1 = 2;
      if (($24_1 | 0) > (1e3 | 0)) {
       break label$11
      }
      label$13 : {
       if ((HEAP32[(HEAP32[($0_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) == (4 | 0)) {
        break label$13
       }
       $5_1 = 0;
       break label$11;
      }
      HEAP32[($0_1 + 68 | 0) >> 2] = 13;
     }
     $21_1 = $8_1;
     break label$4;
    }
    $7_1 = 1;
    $5_1 = 2;
   }
   if (!$5_1) {
    continue label$2
   }
   break label$2;
  };
  $8_1 = Math_fround(0.0);
  $13_1 = $19_1 ? Math_fround(0.0) : $18_1;
  $10_1 = Math_fround($13_1 + $20_1);
  $6_1 = 0;
  $5_1 = 0;
  label$14 : {
   if (!($7_1 & 1 | 0)) {
    break label$14
   }
   $562(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $4_1 + 240 | 0 | 0, $4_1 + 224 | 0 | 0);
   i64toi32_i32$2 = $9_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $619_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($4_1 + 256 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $619_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $9_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $622_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1;
   HEAP32[($4_1 + 256 | 0) >> 2] = $622_1;
   HEAP32[($4_1 + 260 | 0) >> 2] = i64toi32_i32$0;
   label$15 : {
    $8_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
    $12_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
    $14_1 = Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($11_1 * $11_1)) + Math_fround($12_1 * $12_1));
    if ($14_1 < Math_fround(9.999999974752427e-07) ^ 1 | 0) {
     break label$15
    }
    HEAP32[($0_1 + 68 | 0) >> 2] = 5;
   }
   $7_1 = 1;
   label$16 : {
    label$17 : {
     if (!($14_1 > Math_fround(1.4210854715202004e-14) ^ 1 | 0)) {
      break label$17
     }
     $8_1 = Math_fround(0.0);
     $5_1 = 0;
     $7_1 = 2;
     break label$16;
    }
    $14_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($14_1)));
    HEAPF32[($4_1 + 256 | 0) >> 2] = Math_fround($14_1 * Math_fround(HEAPF32[($4_1 + 256 | 0) >> 2]));
    HEAPF32[($4_1 + 260 | 0) >> 2] = Math_fround($14_1 * Math_fround(HEAPF32[($4_1 + 260 | 0) >> 2]));
    HEAPF32[($4_1 + 264 | 0) >> 2] = Math_fround($14_1 * Math_fround(HEAPF32[($4_1 + 264 | 0) >> 2]));
    $23_1 = Math_fround(Math_sqrt($21_1));
    $22_1 = Math_fround($13_1 / $23_1);
    HEAPF32[($4_1 + 240 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 240 | 0) >> 2]) - Math_fround($22_1 * $8_1));
    HEAPF32[($4_1 + 244 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 244 | 0) >> 2]) - Math_fround($22_1 * $11_1));
    HEAPF32[($4_1 + 248 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 248 | 0) >> 2]) - Math_fround($22_1 * $12_1));
    $22_1 = Math_fround($20_1 / $23_1);
    HEAPF32[($4_1 + 224 | 0) >> 2] = Math_fround(Math_fround($22_1 * $8_1) + Math_fround(HEAPF32[($4_1 + 224 | 0) >> 2]));
    HEAPF32[($4_1 + 228 | 0) >> 2] = Math_fround(Math_fround($22_1 * $11_1) + Math_fround(HEAPF32[($4_1 + 228 | 0) >> 2]));
    HEAPF32[($4_1 + 232 | 0) >> 2] = Math_fround(Math_fround($22_1 * $12_1) + Math_fround(HEAPF32[($4_1 + 232 | 0) >> 2]));
    $8_1 = Math_fround(Math_fround(Math_fround(1.0) / $14_1) - $10_1);
    $5_1 = 1;
   }
   HEAP32[($0_1 + 60 | 0) >> 2] = $7_1;
  }
  label$18 : {
   if (!(HEAP32[($0_1 + 72 | 0) >> 2] | 0)) {
    break label$18
   }
   if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
    break label$18
   }
   if (!(HEAP32[($0_1 + 68 | 0) >> 2] | 0)) {
    break label$18
   }
   $6_1 = Math_fround($10_1 + $8_1) < Math_fround(HEAPF32[(0 + 2984 | 0) >> 2]);
  }
  $7_1 = $5_1 ^ 1 | 0;
  label$19 : {
   label$20 : {
    label$21 : {
     label$22 : {
      if ($6_1) {
       break label$22
      }
      if (!$7_1) {
       break label$21
      }
     }
     $6_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$21
     }
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[(0 + 1724 | 0) >> 2] = (HEAP32[(0 + 1724 | 0) >> 2] | 0) + 1 | 0;
     label$23 : {
      if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($6_1, HEAP32[($0_1 + 24 | 0) >> 2] | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0, $4_1 + 160 | 0, $4_1 + 96 | 0, $9_1, $4_1 + 80 | 0, $4_1 + 64 | 0, $3_1) | 0)) {
       break label$23
      }
      $14_1 = Math_fround(0.0);
      label$24 : {
       $22_1 = Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]);
       $23_1 = Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2]);
       $10_1 = Math_fround($22_1 - $23_1);
       $21_1 = Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]);
       $20_1 = Math_fround(HEAPF32[($4_1 + 84 | 0) >> 2]);
       $11_1 = Math_fround($21_1 - $20_1);
       $18_1 = Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]);
       $25_1 = Math_fround(HEAPF32[($4_1 + 88 | 0) >> 2]);
       $12_1 = Math_fround($18_1 - $25_1);
       $13_1 = Math_fround(Math_fround(Math_fround($10_1 * $10_1) + Math_fround($11_1 * $11_1)) + Math_fround($12_1 * $12_1));
       if ($13_1 <= Math_fround(1.4210854715202004e-14) ^ 1 | 0) {
        break label$24
       }
       $10_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
       $11_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
       $12_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
       $13_1 = Math_fround(Math_fround(Math_fround($10_1 * $10_1) + Math_fround($11_1 * $11_1)) + Math_fround($12_1 * $12_1));
       $14_1 = Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]);
      }
      label$25 : {
       if ($13_1 > Math_fround(1.4210854715202004e-14) ^ 1 | 0) {
        break label$25
       }
       HEAP32[($0_1 + 60 | 0) >> 2] = 3;
       label$26 : {
        $22_1 = Math_fround($23_1 - $22_1);
        $836_1 = Math_fround($22_1 * $22_1);
        $22_1 = Math_fround($20_1 - $21_1);
        $843_1 = Math_fround($836_1 + Math_fround($22_1 * $22_1));
        $22_1 = Math_fround($25_1 - $18_1);
        $22_1 = Math_fround(-Math_fround(Math_sqrt(Math_fround($843_1 + Math_fround($22_1 * $22_1)))));
        if (($8_1 > $22_1 ^ -1 | 0) & ($7_1 ^ 1 | 0) | 0) {
         break label$26
        }
        i64toi32_i32$2 = ($4_1 + 80 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $865_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($4_1 + 240 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $865_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = ($4_1 + 64 | 0) + 8 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $872_1 = i64toi32_i32$1;
        i64toi32_i32$1 = ($4_1 + 224 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $872_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$0 = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($4_1 + 84 | 0) >> 2] | 0;
        $875_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $4_1;
        HEAP32[($4_1 + 240 | 0) >> 2] = $875_1;
        HEAP32[($4_1 + 244 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$1 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
        $878_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $4_1;
        HEAP32[($4_1 + 224 | 0) >> 2] = $878_1;
        HEAP32[($4_1 + 228 | 0) >> 2] = i64toi32_i32$0;
        HEAPF32[($4_1 + 268 | 0) >> 2] = $14_1;
        $8_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($13_1)));
        HEAPF32[($4_1 + 264 | 0) >> 2] = Math_fround($12_1 * $8_1);
        HEAPF32[($4_1 + 260 | 0) >> 2] = Math_fround($11_1 * $8_1);
        HEAPF32[($4_1 + 256 | 0) >> 2] = Math_fround($10_1 * $8_1);
        $8_1 = $22_1;
        break label$20;
       }
       HEAP32[($0_1 + 60 | 0) >> 2] = 8;
       if ($5_1) {
        break label$20
       }
       break label$19;
      }
      HEAP32[($0_1 + 60 | 0) >> 2] = 9;
      if ($5_1) {
       break label$20
      }
      break label$19;
     }
     $11_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
     if (Math_fround(Math_fround(Math_fround($11_1 * $11_1) + Math_fround($12_1 * $12_1)) + Math_fround($14_1 * $14_1)) > Math_fround(0.0) ^ 1 | 0) {
      break label$21
     }
     label$27 : {
      $22_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]));
      $927_1 = Math_fround($22_1 * $22_1);
      $22_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 84 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]));
      $936_1 = Math_fround($927_1 + Math_fround($22_1 * $22_1));
      $22_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 88 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]));
      $10_1 = Math_fround(Math_fround(Math_sqrt(Math_fround($936_1 + Math_fround($22_1 * $22_1)))) - $10_1);
      if (($10_1 < $8_1 ^ -1 | 0) & ($7_1 ^ 1 | 0) | 0) {
       break label$27
      }
      $5_1 = ($4_1 + 240 | 0) + 8 | 0;
      i64toi32_i32$2 = ($4_1 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $963_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1;
      HEAP32[i64toi32_i32$0 >> 2] = $963_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $6_1 = ($4_1 + 224 | 0) + 8 | 0;
      i64toi32_i32$2 = ($4_1 + 64 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $971_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $6_1;
      HEAP32[i64toi32_i32$1 >> 2] = $971_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAPF32[$5_1 >> 2] = Math_fround(Math_fround(HEAPF32[$5_1 >> 2]) - Math_fround($13_1 * $14_1));
      HEAPF32[i64toi32_i32$1 >> 2] = Math_fround(Math_fround($20_1 * $14_1) + Math_fround(HEAPF32[i64toi32_i32$1 >> 2]));
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$0 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
      $988_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $4_1;
      HEAP32[($4_1 + 224 | 0) >> 2] = $988_1;
      HEAP32[($4_1 + 228 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$1 = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($4_1 + 84 | 0) >> 2] | 0;
      $991_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $4_1;
      HEAP32[($4_1 + 240 | 0) >> 2] = $991_1;
      HEAP32[($4_1 + 244 | 0) >> 2] = i64toi32_i32$0;
      HEAPF32[($4_1 + 224 | 0) >> 2] = Math_fround(Math_fround($20_1 * $11_1) + Math_fround(HEAPF32[($4_1 + 224 | 0) >> 2]));
      HEAPF32[($4_1 + 228 | 0) >> 2] = Math_fround(Math_fround($20_1 * $12_1) + Math_fround(HEAPF32[($4_1 + 228 | 0) >> 2]));
      HEAPF32[($4_1 + 240 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 240 | 0) >> 2]) - Math_fround($13_1 * $11_1));
      HEAPF32[($4_1 + 244 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 244 | 0) >> 2]) - Math_fround($13_1 * $12_1));
      $5_1 = ($4_1 + 256 | 0) + 8 | 0;
      i64toi32_i32$2 = $9_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $1026_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1;
      HEAP32[i64toi32_i32$0 >> 2] = $1026_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $9_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $1029_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $4_1;
      HEAP32[($4_1 + 256 | 0) >> 2] = $1029_1;
      HEAP32[($4_1 + 260 | 0) >> 2] = i64toi32_i32$0;
      $8_1 = Math_fround(HEAPF32[$5_1 >> 2]);
      $1033_1 = $8_1;
      $11_1 = Math_fround(HEAPF32[($4_1 + 256 | 0) >> 2]);
      $12_1 = Math_fround(HEAPF32[($4_1 + 260 | 0) >> 2]);
      $8_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($11_1 * $11_1) + Math_fround($12_1 * $12_1)) + Math_fround($8_1 * $8_1)))));
      HEAPF32[$5_1 >> 2] = Math_fround($1033_1 * $8_1);
      HEAPF32[($4_1 + 260 | 0) >> 2] = Math_fround($12_1 * $8_1);
      HEAPF32[($4_1 + 256 | 0) >> 2] = Math_fround($11_1 * $8_1);
      HEAP32[($0_1 + 60 | 0) >> 2] = 6;
      $8_1 = $10_1;
      break label$20;
     }
     HEAP32[($0_1 + 60 | 0) >> 2] = 5;
    }
    if (!$5_1) {
     break label$19
    }
   }
   label$28 : {
    if ($8_1 < Math_fround(0.0)) {
     break label$28
    }
    if (Math_fround($8_1 * $8_1) < Math_fround(HEAPF32[($1_1 + 128 | 0) >> 2]) ^ 1 | 0) {
     break label$19
    }
   }
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[($4_1 + 256 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4_1 + 260 | 0) >> 2] | 0;
   $1077_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $9_1;
   HEAP32[i64toi32_i32$0 >> 2] = $1077_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAPF32[($0_1 + 56 | 0) >> 2] = $8_1;
   $5_1 = ($4_1 + 256 | 0) + 8 | 0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1086_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $9_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $1086_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 92 | 0) >> 2] = 0;
   $12_1 = Math_fround(HEAPF32[($4_1 + 256 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($4_1 + 260 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[i64toi32_i32$2 >> 2]);
   HEAPF32[($4_1 + 88 | 0) >> 2] = Math_fround(Math_fround(Math_fround($12_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2])));
   HEAPF32[($4_1 + 84 | 0) >> 2] = Math_fround(Math_fround(Math_fround($12_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2])));
   HEAPF32[($4_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround($12_1 * Math_fround(HEAPF32[$1_1 >> 2])) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]))) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2])));
   HEAP32[($4_1 + 76 | 0) >> 2] = 0;
   $12_1 = Math_fround(-$12_1);
   HEAPF32[($4_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2]) * $12_1) - Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 88 | 0) >> 2]))) - Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 104 | 0) >> 2])));
   HEAPF32[($4_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]) * $12_1) - Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 84 | 0) >> 2]))) - Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 100 | 0) >> 2])));
   HEAPF32[($4_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]) * $12_1) - Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]))) - Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 96 | 0) >> 2])));
   $104($4_1 + 48 | 0 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, $4_1 + 80 | 0 | 0);
   $104($4_1 + 32 | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $4_1 + 64 | 0 | 0);
   $10_1 = Math_fround(HEAPF32[i64toi32_i32$2 >> 2]);
   $25_1 = Math_fround(HEAPF32[($4_1 + 216 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[($4_1 + 200 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[($4_1 + 192 | 0) >> 2]);
   $28_1 = Math_fround(HEAPF32[($4_1 + 196 | 0) >> 2]);
   $29_1 = Math_fround(HEAPF32[($4_1 + 152 | 0) >> 2]);
   $30_1 = Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2]);
   $31_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
   $32_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
   $33_1 = Math_fround(HEAPF32[($4_1 + 208 | 0) >> 2]);
   $34_1 = Math_fround(HEAPF32[($4_1 + 168 | 0) >> 2]);
   $35_1 = Math_fround(HEAPF32[($4_1 + 160 | 0) >> 2]);
   $36_1 = Math_fround(HEAPF32[($4_1 + 164 | 0) >> 2]);
   $37_1 = Math_fround(HEAPF32[($4_1 + 144 | 0) >> 2]);
   $38_1 = Math_fround(HEAPF32[($4_1 + 104 | 0) >> 2]);
   $39_1 = Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2]);
   $40_1 = Math_fround(HEAPF32[($4_1 + 100 | 0) >> 2]);
   $41_1 = Math_fround(HEAPF32[($4_1 + 212 | 0) >> 2]);
   $42_1 = Math_fround(HEAPF32[($4_1 + 184 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]);
   $43_1 = Math_fround(HEAPF32[($4_1 + 176 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]);
   $44_1 = Math_fround(HEAPF32[($4_1 + 180 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
   $45_1 = Math_fround(HEAPF32[($4_1 + 148 | 0) >> 2]);
   $46_1 = Math_fround(HEAPF32[($4_1 + 120 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
   $47_1 = Math_fround(HEAPF32[($4_1 + 112 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
   $48_1 = Math_fround(HEAPF32[($4_1 + 116 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[($4_1 + 256 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($4_1 + 260 | 0) >> 2]);
   HEAP32[($4_1 + 92 | 0) >> 2] = 0;
   $18_1 = Math_fround(-$12_1);
   HEAPF32[($4_1 + 88 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) * $18_1) - Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]))) - Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2])));
   HEAPF32[($4_1 + 84 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) * $18_1) - Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]))) - Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2])));
   HEAPF32[($4_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * $18_1) - Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]))) - Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2])));
   HEAP32[($4_1 + 76 | 0) >> 2] = 0;
   HEAPF32[($4_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround($12_1 * Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 88 | 0) >> 2]))) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 104 | 0) >> 2])));
   HEAPF32[($4_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround($12_1 * Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 84 | 0) >> 2]))) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 100 | 0) >> 2])));
   HEAPF32[($4_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround($12_1 * Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]))) + Math_fround($10_1 * Math_fround(HEAPF32[($1_1 + 96 | 0) >> 2])));
   $104($4_1 + 48 | 0 | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, $4_1 + 80 | 0 | 0);
   $104($4_1 + 32 | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $4_1 + 64 | 0 | 0);
   label$29 : {
    $1459 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($33_1 + Math_fround(Math_fround(Math_fround($14_1 * $35_1) + Math_fround($22_1 * $36_1)) + Math_fround($13_1 * $34_1))) - Math_fround($37_1 + Math_fround(Math_fround(Math_fround($21_1 * $39_1) + Math_fround($20_1 * $40_1)) + Math_fround($23_1 * $38_1)))) * $18_1) - Math_fround($11_1 * Math_fround(Math_fround($41_1 + Math_fround(Math_fround(Math_fround($14_1 * $43_1) + Math_fround($22_1 * $44_1)) + Math_fround($13_1 * $42_1))) - Math_fround($45_1 + Math_fround(Math_fround(Math_fround($21_1 * $47_1) + Math_fround($20_1 * $48_1)) + Math_fround($23_1 * $46_1)))))) - Math_fround($10_1 * Math_fround(Math_fround($25_1 + Math_fround(Math_fround(Math_fround($14_1 * $27_1) + Math_fround($22_1 * $28_1)) + Math_fround($13_1 * $26_1))) - Math_fround($29_1 + Math_fround(Math_fround(Math_fround($21_1 * $31_1) + Math_fround($20_1 * $32_1)) + Math_fround($23_1 * $30_1))))));
    $10_1 = Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
    $12_1 = Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
    $14_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
    $23_1 = Math_fround(HEAPF32[($4_1 + 256 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($4_1 + 260 | 0) >> 2]);
    $1550 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($10_1 * Math_fround(HEAPF32[($4_1 + 160 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 164 | 0) >> 2]))) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 168 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 208 | 0) >> 2])) - Math_fround(Math_fround(Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2])) + Math_fround($14_1 * Math_fround(HEAPF32[($4_1 + 100 | 0) >> 2]))) + Math_fround($22_1 * Math_fround(HEAPF32[($4_1 + 104 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 144 | 0) >> 2]))) * $23_1) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($10_1 * Math_fround(HEAPF32[($4_1 + 176 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 180 | 0) >> 2]))) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 184 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 212 | 0) >> 2])) - Math_fround(Math_fround(Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 112 | 0) >> 2])) + Math_fround($14_1 * Math_fround(HEAPF32[($4_1 + 116 | 0) >> 2]))) + Math_fround($22_1 * Math_fround(HEAPF32[($4_1 + 120 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 148 | 0) >> 2]))) * $21_1));
    $1585 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($10_1 * Math_fround(HEAPF32[($4_1 + 192 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 196 | 0) >> 2]))) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 200 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 216 | 0) >> 2])) - Math_fround(Math_fround(Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2])) + Math_fround($14_1 * Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]))) + Math_fround($22_1 * Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 152 | 0) >> 2])));
    $10_1 = Math_fround(HEAPF32[i64toi32_i32$2 >> 2]);
    if ($1459 > Math_fround($1550 + Math_fround($1585 * $10_1)) ^ 1 | 0) {
     break label$29
    }
    HEAP32[($0_1 + 60 | 0) >> 2] = 10;
    HEAPF32[($4_1 + 264 | 0) >> 2] = Math_fround(-$10_1);
    HEAPF32[($4_1 + 260 | 0) >> 2] = Math_fround(-$21_1);
    HEAPF32[($4_1 + 256 | 0) >> 2] = Math_fround(-$23_1);
   }
   HEAP32[($4_1 + 92 | 0) >> 2] = 0;
   HEAPF32[($4_1 + 88 | 0) >> 2] = Math_fround($15_1 + Math_fround(HEAPF32[($4_1 + 232 | 0) >> 2]));
   HEAPF32[($4_1 + 84 | 0) >> 2] = Math_fround($16_1 + Math_fround(HEAPF32[($4_1 + 228 | 0) >> 2]));
   HEAPF32[($4_1 + 80 | 0) >> 2] = Math_fround($17_1 + Math_fround(HEAPF32[($4_1 + 224 | 0) >> 2]));
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $4_1 + 256 | 0, $4_1 + 80 | 0, $8_1);
  }
  global$0 = $4_1 + 272 | 0;
 }
 
 function $567($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $568($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $569($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $13_1 = 0, i64toi32_i32$2 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $27_1 = 0, $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $28_1 = 0, $32_1 = Math_fround(0), $26_1 = 0, $11_1 = 0, $30_1 = 0, $31_1 = 0, $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $29_1 = 0, $249_1 = 0, $253_1 = 0, $458_1 = 0, $461_1 = 0, $833_1 = 0, $839_1 = 0, $845_1 = 0, $874_1 = 0, $877_1 = 0, $880_1 = 0, $892_1 = 0, $896_1 = 0, $901_1 = 0, $905_1 = 0, $910_1 = 0, $914_1 = 0, $919_1 = 0, $923_1 = 0, $982_1 = 0, $986_1 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $10_1 = global$0 - 4240 | 0;
  global$0 = $10_1;
  $11_1 = 0;
  label$1 : {
   if (((HEAP32[($2_1 + 4 | 0) >> 2] | 0) + -17 | 0) >>> 0 > 1 >>> 0) {
    break label$1
   }
   $11_1 = ((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + -17 | 0) >>> 0 < 2 >>> 0;
  }
  $12_1 = 0;
  label$2 : while (1) {
   $570() | 0;
   $13_1 = ($10_1 + 1264 | 0) + $12_1 | 0;
   HEAP32[($13_1 + 12 | 0) >> 2] = 0;
   $14_1 = Math_fround(HEAPF32[($12_1 + 1744 | 0) >> 2]);
   $15_1 = Math_fround(-$14_1);
   $16_1 = Math_fround(HEAPF32[($12_1 + 1748 | 0) >> 2]);
   $17_1 = Math_fround(HEAPF32[($12_1 + 1752 | 0) >> 2]);
   HEAPF32[($13_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * $15_1) - Math_fround(Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]) * $16_1)) - Math_fround(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]) * $17_1));
   HEAPF32[($13_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * $15_1) - Math_fround($16_1 * Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]))) - Math_fround($17_1 * Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2])));
   HEAPF32[$13_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) * $15_1) - Math_fround($16_1 * Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]))) - Math_fround($17_1 * Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2])));
   $15_1 = Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[$5_1 >> 2]);
   $19_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
   $13_1 = ($10_1 + 272 | 0) + $12_1 | 0;
   HEAP32[($13_1 + 12 | 0) >> 2] = 0;
   HEAPF32[($13_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $24_1) + Math_fround($16_1 * $25_1)) + Math_fround($17_1 * $23_1));
   HEAPF32[($13_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $21_1) + Math_fround($16_1 * $22_1)) + Math_fround($17_1 * $20_1));
   HEAPF32[$13_1 >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $18_1) + Math_fround($16_1 * $19_1)) + Math_fround($17_1 * $15_1));
   $12_1 = $12_1 + 16 | 0;
   if (($12_1 | 0) != (672 | 0)) {
    continue label$2
   }
   break label$2;
  };
  label$3 : {
   label$4 : {
    $26_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 84 | 0) >> 2] | 0]($2_1) | 0;
    if (($26_1 | 0) >= (1 | 0)) {
     break label$4
    }
    $27_1 = 42;
    break label$3;
   }
   $12_1 = 0;
   $28_1 = 0;
   label$5 : while (1) {
    FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 88 | 0) >> 2] | 0]($2_1, $28_1, $10_1 + 3248 | 0);
    HEAP32[($10_1 + 3260 | 0) >> 2] = 0;
    $16_1 = Math_fround(HEAPF32[($10_1 + 3248 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[($10_1 + 3252 | 0) >> 2]);
    $14_1 = Math_fround(HEAPF32[($10_1 + 3256 | 0) >> 2]);
    HEAPF32[($10_1 + 3256 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]))) + Math_fround($14_1 * Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2])));
    HEAPF32[($10_1 + 3252 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]))) + Math_fround($14_1 * Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2])));
    HEAPF32[($10_1 + 3248 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * Math_fround(HEAPF32[$4_1 >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]))) + Math_fround($14_1 * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2])));
    $570() | 0;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$0 = HEAP32[($10_1 + 3256 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($10_1 + 3260 | 0) >> 2] | 0;
    $249_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $12_1 + 2424 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $249_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$1 = HEAP32[($10_1 + 3248 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($10_1 + 3252 | 0) >> 2] | 0;
    $253_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $12_1 + 2416 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $253_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $13_1 = ($10_1 + 1264 | 0) + $12_1 | 0;
    HEAP32[($13_1 + 684 | 0) >> 2] = 0;
    $14_1 = Math_fround(HEAPF32[($10_1 + 3248 | 0) >> 2]);
    $15_1 = Math_fround(-$14_1);
    $16_1 = Math_fround(HEAPF32[($10_1 + 3252 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[($10_1 + 3256 | 0) >> 2]);
    HEAPF32[($13_1 + 680 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * $15_1) - Math_fround(Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]) * $16_1)) - Math_fround(Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]) * $17_1));
    HEAPF32[($13_1 + 676 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * $15_1) - Math_fround($16_1 * Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]))) - Math_fround($17_1 * Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2])));
    HEAPF32[($13_1 + 672 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) * $15_1) - Math_fround($16_1 * Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]))) - Math_fround($17_1 * Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2])));
    $13_1 = ($10_1 + 272 | 0) + $12_1 | 0;
    HEAP32[($13_1 + 684 | 0) >> 2] = 0;
    HEAPF32[($13_1 + 672 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * Math_fround(HEAPF32[$5_1 >> 2])) + Math_fround($16_1 * Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]))) + Math_fround($17_1 * Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2])));
    HEAPF32[($13_1 + 676 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])) + Math_fround($16_1 * Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]))) + Math_fround($17_1 * Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2])));
    HEAPF32[($13_1 + 680 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])) + Math_fround($16_1 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]))) + Math_fround($17_1 * Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2])));
    $12_1 = $12_1 + 16 | 0;
    $28_1 = $28_1 + 1 | 0;
    if (($26_1 | 0) != ($28_1 | 0)) {
     continue label$5
    }
    break label$5;
   };
   $27_1 = $28_1 + 42 | 0;
  }
  label$6 : {
   $29_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 84 | 0) >> 2] | 0]($3_1) | 0;
   if (($29_1 | 0) < (1 | 0)) {
    break label$6
   }
   $28_1 = $27_1 << 4 | 0;
   $26_1 = 1744;
   $30_1 = $10_1 + 1264 | 0;
   $31_1 = $10_1 + 272 | 0;
   $13_1 = 0;
   label$7 : while (1) {
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 88 | 0) >> 2] | 0]($3_1, $13_1, $10_1 + 3248 | 0);
    HEAP32[($10_1 + 3260 | 0) >> 2] = 0;
    $16_1 = Math_fround(HEAPF32[($10_1 + 3248 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[($10_1 + 3252 | 0) >> 2]);
    $14_1 = Math_fround(HEAPF32[($10_1 + 3256 | 0) >> 2]);
    HEAPF32[($10_1 + 3256 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]))) + Math_fround($14_1 * Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2])));
    HEAPF32[($10_1 + 3252 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]))) + Math_fround($14_1 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2])));
    HEAPF32[($10_1 + 3248 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * Math_fround(HEAPF32[$5_1 >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]))) + Math_fround($14_1 * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])));
    $570() | 0;
    $12_1 = $26_1 + $28_1 | 0;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$0 = HEAP32[($10_1 + 3256 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($10_1 + 3260 | 0) >> 2] | 0;
    $458_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $12_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $458_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$1 = HEAP32[($10_1 + 3248 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($10_1 + 3252 | 0) >> 2] | 0;
    $461_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $12_1;
    HEAP32[i64toi32_i32$1 >> 2] = $461_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $18_1 = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
    $19_1 = Math_fround(HEAPF32[$4_1 >> 2]);
    $20_1 = Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
    $23_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
    $24_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
    $25_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
    $32_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
    $16_1 = Math_fround(HEAPF32[($10_1 + 3256 | 0) >> 2]);
    $14_1 = Math_fround(HEAPF32[($10_1 + 3248 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[($10_1 + 3252 | 0) >> 2]);
    $12_1 = $30_1 + $28_1 | 0;
    HEAP32[($12_1 + 12 | 0) >> 2] = 0;
    $15_1 = Math_fround(-$14_1);
    HEAPF32[($12_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $15_1) - Math_fround($32_1 * $17_1)) - Math_fround($24_1 * $16_1));
    HEAPF32[($12_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround($22_1 * $15_1) - Math_fround($23_1 * $17_1)) - Math_fround($21_1 * $16_1));
    HEAPF32[$12_1 >> 2] = Math_fround(Math_fround(Math_fround($19_1 * $15_1) - Math_fround($20_1 * $17_1)) - Math_fround($18_1 * $16_1));
    $15_1 = Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]);
    $18_1 = Math_fround(HEAPF32[$5_1 >> 2]);
    $19_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
    $23_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
    $24_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
    $25_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
    $12_1 = $31_1 + $28_1 | 0;
    HEAP32[($12_1 + 12 | 0) >> 2] = 0;
    HEAPF32[($12_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $24_1) + Math_fround($17_1 * $25_1)) + Math_fround($16_1 * $23_1));
    HEAPF32[($12_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $21_1) + Math_fround($17_1 * $22_1)) + Math_fround($16_1 * $20_1));
    HEAPF32[$12_1 >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $18_1) + Math_fround($17_1 * $19_1)) + Math_fround($16_1 * $15_1));
    $31_1 = $31_1 + 16 | 0;
    $30_1 = $30_1 + 16 | 0;
    $26_1 = $26_1 + 16 | 0;
    $13_1 = $13_1 + 1 | 0;
    if (($29_1 | 0) != ($13_1 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $27_1 = $27_1 + $13_1 | 0;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 76 | 0) >> 2] | 0]($2_1, $10_1 + 1264 | 0, $10_1 + 3248 | 0, $27_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 76 | 0) >> 2] | 0]($3_1, $10_1 + 272 | 0, $10_1 + 2256 | 0, $27_1);
  label$8 : {
   label$9 : {
    if (($27_1 | 0) >= (1 | 0)) {
     break label$9
    }
    $23_1 = Math_fround(999999984306749440.0);
    $33_1 = Math_fround(0.0);
    $24_1 = Math_fround(0.0);
    $34_1 = Math_fround(0.0);
    $25_1 = Math_fround(0.0);
    $35_1 = Math_fround(0.0);
    $32_1 = Math_fround(0.0);
    $36_1 = Math_fround(0.0);
    break label$8;
   }
   $23_1 = Math_fround(999999984306749440.0);
   $12_1 = 0;
   $36_1 = Math_fround(0.0);
   $32_1 = Math_fround(0.0);
   $35_1 = Math_fround(0.0);
   $25_1 = Math_fround(0.0);
   $34_1 = Math_fround(0.0);
   $24_1 = Math_fround(0.0);
   $33_1 = Math_fround(0.0);
   label$10 : while (1) {
    $570() | 0;
    label$11 : {
     $16_1 = Math_fround(HEAPF32[($12_1 + 1744 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($12_1 + 1748 | 0) >> 2]);
     $14_1 = (wasm2js_f32$0 = Math_fround(0.0), wasm2js_f32$1 = Math_fround(HEAPF32[($12_1 + 1752 | 0) >> 2]), wasm2js_i32$0 = $11_1, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
     if (+Math_fround(Math_fround(Math_fround($16_1 * $16_1) + Math_fround($17_1 * $17_1)) + Math_fround($14_1 * $14_1)) > .01 ^ 1 | 0) {
      break label$11
     }
     $13_1 = ($10_1 + 2256 | 0) + $12_1 | 0;
     $15_1 = Math_fround(HEAPF32[$13_1 >> 2]);
     $18_1 = Math_fround(HEAPF32[($13_1 + 4 | 0) >> 2]);
     $19_1 = Math_fround(HEAPF32[($13_1 + 8 | 0) >> 2]);
     $13_1 = ($10_1 + 3248 | 0) + $12_1 | 0;
     $20_1 = Math_fround(HEAPF32[$13_1 >> 2]);
     $21_1 = Math_fround(HEAPF32[($13_1 + 4 | 0) >> 2]);
     $22_1 = Math_fround(HEAPF32[($13_1 + 8 | 0) >> 2]);
     $15_1 = Math_fround(Math_fround(Math_fround($16_1 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15_1 * Math_fround(HEAPF32[$5_1 >> 2])) + Math_fround($18_1 * Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]))) + Math_fround($19_1 * Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]))) + Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2])) - Math_fround(Math_fround(Math_fround(Math_fround($20_1 * Math_fround(HEAPF32[$4_1 >> 2])) + Math_fround($21_1 * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]))) + Math_fround($22_1 * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2])))) + Math_fround($17_1 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15_1 * Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2])) + Math_fround($18_1 * Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]))) + Math_fround($19_1 * Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]))) + Math_fround(HEAPF32[($5_1 + 52 | 0) >> 2])) - Math_fround(Math_fround(Math_fround(Math_fround($20_1 * Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2])) + Math_fround($21_1 * Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]))) + Math_fround($22_1 * Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]))))) + Math_fround($14_1 * (wasm2js_f32$0 = Math_fround(0.0), wasm2js_f32$1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15_1 * Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2])) + Math_fround($18_1 * Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]))) + Math_fround($19_1 * Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]))) + Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2])) - Math_fround(Math_fround(Math_fround(Math_fround($20_1 * Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2])) + Math_fround($21_1 * Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]))) + Math_fround($22_1 * Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]))), wasm2js_i32$0 = $11_1, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1)));
     if ($15_1 < $23_1 ^ 1 | 0) {
      break label$11
     }
     $36_1 = Math_fround(HEAPF32[($12_1 + 1756 | 0) >> 2]);
     $33_1 = $16_1;
     $24_1 = $16_1;
     $34_1 = $17_1;
     $25_1 = $17_1;
     $35_1 = $14_1;
     $32_1 = $14_1;
     $23_1 = $15_1;
    }
    $12_1 = $12_1 + 16 | 0;
    $27_1 = $27_1 + -1 | 0;
    if ($27_1) {
     continue label$10
    }
    break label$10;
   };
  }
  Math_fround($106($2_1 | 0));
  Math_fround($106($3_1 | 0));
  $12_1 = 0;
  label$12 : {
   if ($23_1 < Math_fround(0.0)) {
    break label$12
   }
   $16_1 = Math_fround($106($2_1 | 0));
   $17_1 = Math_fround($106($3_1 | 0));
   $12_1 = $563($10_1 + 192 | 0 | 0, $2_1 | 0, $3_1 | 0, $1_1 | 0, 0 | 0) | 0;
   HEAP32[($10_1 + 116 | 0) >> 2] = 0;
   i64toi32_i32$2 = $4_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $833_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($10_1 + 56 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $833_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1 + 24 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $839_1 = i64toi32_i32$1;
   i64toi32_i32$1 = ($10_1 + 56 | 0) + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $839_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4_1 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $845_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($10_1 + 56 | 0) + 40 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $845_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $16_1 = Math_fround($23_1 + Math_fround(Math_fround($16_1 + $17_1) + Math_fround(.5)));
   HEAPF32[(($10_1 + 56 | 0) + 56 | 0) >> 2] = Math_fround(Math_fround($32_1 * $16_1) + Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]));
   HEAPF32[(($10_1 + 56 | 0) + 52 | 0) >> 2] = Math_fround(Math_fround($25_1 * $16_1) + Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]));
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   $874_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $10_1;
   HEAP32[($10_1 + 56 | 0) >> 2] = $874_1;
   HEAP32[($10_1 + 60 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   $877_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $10_1;
   HEAP32[($10_1 + 72 | 0) >> 2] = $877_1;
   HEAP32[($10_1 + 76 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
   $880_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $10_1;
   HEAP32[($10_1 + 88 | 0) >> 2] = $880_1;
   HEAP32[($10_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   HEAPF32[($10_1 + 104 | 0) >> 2] = Math_fround(Math_fround($24_1 * $16_1) + Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]));
   i64toi32_i32$2 = $5_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $892_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $10_1 + 128 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $892_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
   $896_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $10_1 + 136 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $896_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1 + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $901_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $10_1 + 144 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $901_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
   $905_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $10_1 + 152 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $905_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $910_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $10_1 + 160 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $910_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
   $914_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $10_1 + 168 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $914_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1 + 56 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $919_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $10_1 + 176 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $919_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($10_1 + 184 | 0) >> 2] = 1566444395;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = HEAP32[$5_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   $923_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $10_1;
   HEAP32[($10_1 + 120 | 0) >> 2] = $923_1;
   HEAP32[($10_1 + 124 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($12_1 + 16 | 0) >> 2] = 0;
   HEAPF32[($12_1 + 12 | 0) >> 2] = Math_fround(-$32_1);
   HEAPF32[($12_1 + 8 | 0) >> 2] = Math_fround(-$25_1);
   HEAPF32[($12_1 + 4 | 0) >> 2] = Math_fround(-$24_1);
   HEAP8[($10_1 + 48 | 0) >> 0] = 0;
   HEAP32[($10_1 + 8 | 0) >> 2] = 15076;
   $565($12_1 | 0, $10_1 + 56 | 0 | 0, $10_1 + 8 | 0 | 0, $9_1 | 0, 0 | 0);
   label$13 : {
    $4_1 = HEAPU8[($10_1 + 48 | 0) >> 0] | 0;
    if (!$4_1) {
     break label$13
    }
    $17_1 = Math_fround(HEAPF32[($10_1 + 44 | 0) >> 2]);
    HEAP32[($7_1 + 12 | 0) >> 2] = 0;
    $16_1 = Math_fround($16_1 - $17_1);
    HEAPF32[$7_1 >> 2] = Math_fround(Math_fround(HEAPF32[($10_1 + 28 | 0) >> 2]) - Math_fround($24_1 * $16_1));
    $5_1 = $10_1 + 36 | 0;
    HEAPF32[($7_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$5_1 >> 2]) - Math_fround($32_1 * $16_1));
    HEAPF32[($7_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(($10_1 + 8 | 0) + 24 | 0) >> 2]) - Math_fround($25_1 * $16_1));
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$0 = HEAP32[($10_1 + 28 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($10_1 + 32 | 0) >> 2] | 0;
    $982_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $8_1;
    HEAP32[i64toi32_i32$0 >> 2] = $982_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[$5_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    $986_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $8_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $986_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAPF32[$6_1 >> 2] = $33_1;
    HEAPF32[($6_1 + 4 | 0) >> 2] = $34_1;
    HEAPF32[($6_1 + 8 | 0) >> 2] = $35_1;
    HEAPF32[($6_1 + 12 | 0) >> 2] = $36_1;
   }
   $12_1 = ($4_1 | 0) != (0 | 0);
  }
  global$0 = $10_1 + 4240 | 0;
  return $12_1 | 0;
 }
 
 function $570() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  label$1 : {
   if (HEAPU8[(0 + 2736 | 0) >> 0] | 0) {
    break label$1
   }
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2408 | 0) >> 2] = 1062847606;
   HEAP32[(i64toi32_i32$1 + 2412 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1056964440;
   HEAP32[(i64toi32_i32$1 + 2400 | 0) >> 2] = 1042701022;
   HEAP32[(i64toi32_i32$1 + 2404 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2392 | 0) >> 2] = 1062847606;
   HEAP32[(i64toi32_i32$1 + 2396 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1050556081;
   HEAP32[(i64toi32_i32$1 + 2384 | 0) >> 2] = -1093024784;
   HEAP32[(i64toi32_i32$1 + 2388 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2376 | 0) >> 2] = 1062847606;
   HEAP32[(i64toi32_i32$1 + 2380 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1096927567;
   HEAP32[(i64toi32_i32$1 + 2368 | 0) >> 2] = -1093024784;
   HEAP32[(i64toi32_i32$1 + 2372 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2360 | 0) >> 2] = 1062847606;
   HEAP32[(i64toi32_i32$1 + 2364 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1090519208;
   HEAP32[(i64toi32_i32$1 + 2352 | 0) >> 2] = 1042701022;
   HEAP32[(i64toi32_i32$1 + 2356 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2344 | 0) >> 2] = 1062847572;
   HEAP32[(i64toi32_i32$1 + 2348 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2336 | 0) >> 2] = 1057396286;
   HEAP32[(i64toi32_i32$1 + 2340 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2328 | 0) >> 2] = 1057396386;
   HEAP32[(i64toi32_i32$1 + 2332 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1056964507;
   HEAP32[(i64toi32_i32$1 + 2320 | 0) >> 2] = 1060121912;
   HEAP32[(i64toi32_i32$1 + 2324 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2312 | 0) >> 2] = 1057396420;
   HEAP32[(i64toi32_i32$1 + 2316 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1062148969;
   HEAP32[(i64toi32_i32$1 + 2304 | 0) >> 2] = -1098475836;
   HEAP32[(i64toi32_i32$1 + 2308 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2296 | 0) >> 2] = 1057396386;
   HEAP32[(i64toi32_i32$1 + 2300 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2288 | 0) >> 2] = -1084636143;
   HEAP32[(i64toi32_i32$1 + 2292 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2280 | 0) >> 2] = 1057396420;
   HEAP32[(i64toi32_i32$1 + 2284 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1085334679;
   HEAP32[(i64toi32_i32$1 + 2272 | 0) >> 2] = -1098475836;
   HEAP32[(i64toi32_i32$1 + 2276 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2264 | 0) >> 2] = 1057396386;
   HEAP32[(i64toi32_i32$1 + 2268 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1090519141;
   HEAP32[(i64toi32_i32$1 + 2256 | 0) >> 2] = 1060121912;
   HEAP32[(i64toi32_i32$1 + 2260 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2248 | 0) >> 2] = -2147483648;
   HEAP32[(i64toi32_i32$1 + 2252 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1062149053;
   HEAP32[(i64toi32_i32$1 + 2240 | 0) >> 2] = 1058437413;
   HEAP32[(i64toi32_i32$1 + 2244 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2232 | 0) >> 2] = -2147483648;
   HEAP32[(i64toi32_i32$1 + 2236 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1065353216;
   HEAP32[(i64toi32_i32$1 + 2224 | 0) >> 2] = -2147483648;
   HEAP32[(i64toi32_i32$1 + 2228 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2216 | 0) >> 2] = -2147483648;
   HEAP32[(i64toi32_i32$1 + 2220 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1062149053;
   HEAP32[(i64toi32_i32$1 + 2208 | 0) >> 2] = -1089046235;
   HEAP32[(i64toi32_i32$1 + 2212 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2200 | 0) >> 2] = -2147483648;
   HEAP32[(i64toi32_i32$1 + 2204 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1050556148;
   HEAP32[(i64toi32_i32$1 + 2192 | 0) >> 2] = -1082951543;
   HEAP32[(i64toi32_i32$1 + 2196 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2184 | 0) >> 2] = -2147483648;
   HEAP32[(i64toi32_i32$1 + 2188 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1096927500;
   HEAP32[(i64toi32_i32$1 + 2176 | 0) >> 2] = -1082951543;
   HEAP32[(i64toi32_i32$1 + 2180 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2168 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 2172 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1085334595;
   HEAP32[(i64toi32_i32$1 + 2160 | 0) >> 2] = -1089046235;
   HEAP32[(i64toi32_i32$1 + 2164 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2152 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 2156 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1082130432;
   HEAP32[(i64toi32_i32$1 + 2144 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 2148 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2136 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 2140 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1085334595;
   HEAP32[(i64toi32_i32$1 + 2128 | 0) >> 2] = 1058437413;
   HEAP32[(i64toi32_i32$1 + 2132 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2120 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 2124 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1096927500;
   HEAP32[(i64toi32_i32$1 + 2112 | 0) >> 2] = 1064532105;
   HEAP32[(i64toi32_i32$1 + 2116 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2104 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 2108 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1050556148;
   HEAP32[(i64toi32_i32$1 + 2096 | 0) >> 2] = 1064532105;
   HEAP32[(i64toi32_i32$1 + 2100 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2088 | 0) >> 2] = -1090087228;
   HEAP32[(i64toi32_i32$1 + 2092 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1062148969;
   HEAP32[(i64toi32_i32$1 + 2080 | 0) >> 2] = 1049007812;
   HEAP32[(i64toi32_i32$1 + 2084 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2072 | 0) >> 2] = -1090087262;
   HEAP32[(i64toi32_i32$1 + 2076 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1056964507;
   HEAP32[(i64toi32_i32$1 + 2064 | 0) >> 2] = -1087361736;
   HEAP32[(i64toi32_i32$1 + 2068 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2056 | 0) >> 2] = -1084636042;
   HEAP32[(i64toi32_i32$1 + 2060 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1056964440;
   HEAP32[(i64toi32_i32$1 + 2048 | 0) >> 2] = -1104782626;
   HEAP32[(i64toi32_i32$1 + 2052 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2040 | 0) >> 2] = -1090087262;
   HEAP32[(i64toi32_i32$1 + 2044 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1090519141;
   HEAP32[(i64toi32_i32$1 + 2032 | 0) >> 2] = -1087361736;
   HEAP32[(i64toi32_i32$1 + 2036 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2024 | 0) >> 2] = -1084636076;
   HEAP32[(i64toi32_i32$1 + 2028 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -2147483648;
   HEAP32[(i64toi32_i32$1 + 2016 | 0) >> 2] = -1090087362;
   HEAP32[(i64toi32_i32$1 + 2020 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 2008 | 0) >> 2] = -1090087262;
   HEAP32[(i64toi32_i32$1 + 2012 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -2147483648;
   HEAP32[(i64toi32_i32$1 + 2e3 | 0) >> 2] = 1062847505;
   HEAP32[(i64toi32_i32$1 + 2004 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1992 | 0) >> 2] = -1084636042;
   HEAP32[(i64toi32_i32$1 + 1996 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1050556081;
   HEAP32[(i64toi32_i32$1 + 1984 | 0) >> 2] = 1054458864;
   HEAP32[(i64toi32_i32$1 + 1988 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1976 | 0) >> 2] = -1090087228;
   HEAP32[(i64toi32_i32$1 + 1980 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1085334679;
   HEAP32[(i64toi32_i32$1 + 1968 | 0) >> 2] = 1049007812;
   HEAP32[(i64toi32_i32$1 + 1972 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1960 | 0) >> 2] = -1084636042;
   HEAP32[(i64toi32_i32$1 + 1964 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1090519208;
   HEAP32[(i64toi32_i32$1 + 1952 | 0) >> 2] = -1104782626;
   HEAP32[(i64toi32_i32$1 + 1956 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1944 | 0) >> 2] = -1084636042;
   HEAP32[(i64toi32_i32$1 + 1948 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1096927567;
   HEAP32[(i64toi32_i32$1 + 1936 | 0) >> 2] = 1054458864;
   HEAP32[(i64toi32_i32$1 + 1940 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1928 | 0) >> 2] = 1065353216;
   HEAP32[(i64toi32_i32$1 + 1932 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1920 | 0) >> 2] = -2147483648;
   HEAP32[(i64toi32_i32$1 + 1924 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1912 | 0) >> 2] = 1055193471;
   HEAP32[(i64toi32_i32$1 + 1916 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1904 | 0) >> 2] = 1063581978;
   HEAP32[(i64toi32_i32$1 + 1908 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1896 | 0) >> 2] = 1055193572;
   HEAP32[(i64toi32_i32$1 + 1900 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1062847522;
   HEAP32[(i64toi32_i32$1 + 1888 | 0) >> 2] = 1049461434;
   HEAP32[(i64toi32_i32$1 + 1892 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1880 | 0) >> 2] = 1055193572;
   HEAP32[(i64toi32_i32$1 + 1884 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1057396202;
   HEAP32[(i64toi32_i32$1 + 1872 | 0) >> 2] = -1086767520;
   HEAP32[(i64toi32_i32$1 + 1876 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1864 | 0) >> 2] = 1055193572;
   HEAP32[(i64toi32_i32$1 + 1868 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1090087446;
   HEAP32[(i64toi32_i32$1 + 1856 | 0) >> 2] = -1086767520;
   HEAP32[(i64toi32_i32$1 + 1860 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1848 | 0) >> 2] = 1055193605;
   HEAP32[(i64toi32_i32$1 + 1852 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1084636126;
   HEAP32[(i64toi32_i32$1 + 1840 | 0) >> 2] = 1049461434;
   HEAP32[(i64toi32_i32$1 + 1844 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1832 | 0) >> 2] = -1092290076;
   HEAP32[(i64toi32_i32$1 + 1836 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1057396202;
   HEAP32[(i64toi32_i32$1 + 1824 | 0) >> 2] = 1060716128;
   HEAP32[(i64toi32_i32$1 + 1828 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1816 | 0) >> 2] = -1092290043;
   HEAP32[(i64toi32_i32$1 + 1820 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1062847522;
   HEAP32[(i64toi32_i32$1 + 1808 | 0) >> 2] = -1098022214;
   HEAP32[(i64toi32_i32$1 + 1812 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1800 | 0) >> 2] = -1092290177;
   HEAP32[(i64toi32_i32$1 + 1804 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -2147483648;
   HEAP32[(i64toi32_i32$1 + 1792 | 0) >> 2] = -1083901670;
   HEAP32[(i64toi32_i32$1 + 1796 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1784 | 0) >> 2] = -1092290076;
   HEAP32[(i64toi32_i32$1 + 1788 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1084636126;
   HEAP32[(i64toi32_i32$1 + 1776 | 0) >> 2] = -1098022214;
   HEAP32[(i64toi32_i32$1 + 1780 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1768 | 0) >> 2] = -1092290076;
   HEAP32[(i64toi32_i32$1 + 1772 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -1090087446;
   HEAP32[(i64toi32_i32$1 + 1760 | 0) >> 2] = 1060716128;
   HEAP32[(i64toi32_i32$1 + 1764 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 1752 | 0) >> 2] = -1082130432;
   HEAP32[(i64toi32_i32$1 + 1756 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = -2147483648;
   HEAP32[(i64toi32_i32$1 + 1744 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 1748 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[(0 + 2736 | 0) >> 0] = 1;
  }
  return 1744 | 0;
 }
 
 function $571($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $572($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $573($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $574($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $575($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $11_1 = 0, $14_1 = 0, $19_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $6_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = $14_1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 28 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 40 | 0) >> 0] = 1;
  HEAPF32[($0_1 + 36 | 0) >> 2] = $3_1;
 }
 
 function $576($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $5_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = Math_fround(0), $21_1 = 0, $20_1 = 0, $22_1 = 0, $8_1 = Math_fround(0), $10_1 = Math_fround(0), $23_1 = 0, $7_1 = Math_fround(0), $9_1 = Math_fround(0), $11_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $19_1 = 0, $18_1 = Math_fround(0), $14_1 = 0, $4_1 = 0, $12_1 = Math_fround(0), $121_1 = 0, $126_1 = 0, $217_1 = 0, $222_1 = 0, $315_1 = 0, $320_1 = 0, $387_1 = 0, $392_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($4_1 | 0) < (2 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $6_1 = (($4_1 << 4 | 0) + $5_1 | 0) + -16 | 0;
   $7_1 = Math_fround(HEAPF32[$6_1 >> 2]);
   $8_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $9_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $13_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $8_1) + Math_fround($9_1 * $10_1)) + Math_fround($11_1 * $12_1)) + $3_1);
   $14_1 = 0;
   label$2 : while (1) {
    $5_1 = $5_1 + ($14_1 << 4 | 0) | 0;
    $15_1 = Math_fround(HEAPF32[$5_1 >> 2]);
    $16_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
    $18_1 = Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $8_1) + Math_fround($16_1 * $10_1)) + Math_fround($17_1 * $12_1)) + $3_1);
    $19_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      label$5 : {
       if ($13_1 < Math_fround(0.0) ^ 1 | 0) {
        break label$5
       }
       label$6 : {
        if ($18_1 < Math_fround(0.0) ^ 1 | 0) {
         break label$6
        }
        label$7 : {
         $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
         if (($6_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
          break label$7
         }
         $20_1 = $6_1 ? $6_1 << 1 | 0 : 1;
         if (($6_1 | 0) >= ($20_1 | 0)) {
          break label$7
         }
         label$8 : {
          label$9 : {
           if ($20_1) {
            break label$9
           }
           $21_1 = 0;
           break label$8;
          }
          $21_1 = $79($20_1 << 4 | 0 | 0, 16 | 0) | 0;
          $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
         }
         label$10 : {
          if (($6_1 | 0) < (1 | 0)) {
           break label$10
          }
          $5_1 = 0;
          label$11 : while (1) {
           $22_1 = $21_1 + $5_1 | 0;
           $23_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $5_1 | 0;
           i64toi32_i32$2 = $23_1;
           i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $121_1 = i64toi32_i32$0;
           i64toi32_i32$0 = $22_1;
           HEAP32[i64toi32_i32$0 >> 2] = $121_1;
           HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
           i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $126_1 = i64toi32_i32$1;
           i64toi32_i32$1 = $22_1 + 8 | 0;
           HEAP32[i64toi32_i32$1 >> 2] = $126_1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           $5_1 = $5_1 + 16 | 0;
           $6_1 = $6_1 + -1 | 0;
           if ($6_1) {
            continue label$11
           }
           break label$11;
          };
         }
         label$12 : {
          $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
          if (!$5_1) {
           break label$12
          }
          label$13 : {
           if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
            break label$13
           }
           $80($5_1 | 0);
          }
          HEAP32[($1_1 + 12 | 0) >> 2] = 0;
         }
         HEAP32[($1_1 + 12 | 0) >> 2] = $21_1;
         HEAP8[($1_1 + 16 | 0) >> 0] = 1;
         HEAP32[($1_1 + 8 | 0) >> 2] = $20_1;
         $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        }
        $5_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($6_1 << 4 | 0) | 0;
        HEAP32[($5_1 + 12 | 0) >> 2] = $19_1;
        HEAPF32[($5_1 + 8 | 0) >> 2] = $17_1;
        HEAPF32[($5_1 + 4 | 0) >> 2] = $16_1;
        HEAPF32[$5_1 >> 2] = $15_1;
        break label$4;
       }
       $13_1 = Math_fround($13_1 / Math_fround($13_1 - $18_1));
       $8_1 = Math_fround($11_1 + Math_fround(Math_fround($17_1 - $11_1) * $13_1));
       $10_1 = Math_fround($9_1 + Math_fround(Math_fround($16_1 - $9_1) * $13_1));
       $13_1 = Math_fround($7_1 + Math_fround(Math_fround($15_1 - $7_1) * $13_1));
       label$14 : {
        $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($6_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
         break label$14
        }
        $21_1 = $6_1 ? $6_1 << 1 | 0 : 1;
        if (($6_1 | 0) >= ($21_1 | 0)) {
         break label$14
        }
        label$15 : {
         label$16 : {
          if ($21_1) {
           break label$16
          }
          $19_1 = 0;
          break label$15;
         }
         $19_1 = $79($21_1 << 4 | 0 | 0, 16 | 0) | 0;
         $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        }
        label$17 : {
         if (($6_1 | 0) < (1 | 0)) {
          break label$17
         }
         $5_1 = 0;
         label$18 : while (1) {
          $22_1 = $19_1 + $5_1 | 0;
          $23_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $5_1 | 0;
          i64toi32_i32$2 = $23_1;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $217_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $22_1;
          HEAP32[i64toi32_i32$0 >> 2] = $217_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $222_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $22_1 + 8 | 0;
          HEAP32[i64toi32_i32$1 >> 2] = $222_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          $5_1 = $5_1 + 16 | 0;
          $6_1 = $6_1 + -1 | 0;
          if ($6_1) {
           continue label$18
          }
          break label$18;
         };
        }
        label$19 : {
         $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
         if (!$5_1) {
          break label$19
         }
         label$20 : {
          if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
           break label$20
          }
          $80($5_1 | 0);
         }
         HEAP32[($1_1 + 12 | 0) >> 2] = 0;
        }
        HEAP32[($1_1 + 12 | 0) >> 2] = $19_1;
        HEAP8[($1_1 + 16 | 0) >> 0] = 1;
        HEAP32[($1_1 + 8 | 0) >> 2] = $21_1;
        $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       }
       $5_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($6_1 << 4 | 0) | 0;
       HEAP32[($5_1 + 12 | 0) >> 2] = 0;
       HEAPF32[($5_1 + 8 | 0) >> 2] = $8_1;
       HEAPF32[($5_1 + 4 | 0) >> 2] = $10_1;
       HEAPF32[$5_1 >> 2] = $13_1;
       break label$4;
      }
      if ($18_1 < Math_fround(0.0) ^ 1 | 0) {
       break label$3
      }
      $13_1 = Math_fround($13_1 / Math_fround($13_1 - $18_1));
      $8_1 = Math_fround($11_1 + Math_fround(Math_fround($17_1 - $11_1) * $13_1));
      $10_1 = Math_fround($9_1 + Math_fround(Math_fround($16_1 - $9_1) * $13_1));
      $13_1 = Math_fround($7_1 + Math_fround(Math_fround($15_1 - $7_1) * $13_1));
      label$21 : {
       $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($6_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
        break label$21
       }
       $20_1 = $6_1 ? $6_1 << 1 | 0 : 1;
       if (($6_1 | 0) >= ($20_1 | 0)) {
        break label$21
       }
       label$22 : {
        label$23 : {
         if ($20_1) {
          break label$23
         }
         $21_1 = 0;
         break label$22;
        }
        $21_1 = $79($20_1 << 4 | 0 | 0, 16 | 0) | 0;
        $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       }
       label$24 : {
        if (($6_1 | 0) < (1 | 0)) {
         break label$24
        }
        $5_1 = 0;
        label$25 : while (1) {
         $22_1 = $21_1 + $5_1 | 0;
         $23_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $5_1 | 0;
         i64toi32_i32$2 = $23_1;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $315_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $22_1;
         HEAP32[i64toi32_i32$0 >> 2] = $315_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $320_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $22_1 + 8 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $320_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $5_1 = $5_1 + 16 | 0;
         $6_1 = $6_1 + -1 | 0;
         if ($6_1) {
          continue label$25
         }
         break label$25;
        };
       }
       label$26 : {
        $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        if (!$5_1) {
         break label$26
        }
        label$27 : {
         if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
          break label$27
         }
         $80($5_1 | 0);
        }
        HEAP32[($1_1 + 12 | 0) >> 2] = 0;
       }
       HEAP32[($1_1 + 12 | 0) >> 2] = $21_1;
       HEAP8[($1_1 + 16 | 0) >> 0] = 1;
       HEAP32[($1_1 + 8 | 0) >> 2] = $20_1;
       $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      }
      $5_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($6_1 << 4 | 0) | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = 0;
      HEAPF32[($5_1 + 8 | 0) >> 2] = $8_1;
      HEAPF32[($5_1 + 4 | 0) >> 2] = $10_1;
      HEAPF32[$5_1 >> 2] = $13_1;
      $6_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $6_1;
      label$28 : {
       if (($6_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
        break label$28
       }
       $20_1 = $6_1 ? $6_1 << 1 | 0 : 1;
       if (($6_1 | 0) >= ($20_1 | 0)) {
        break label$28
       }
       label$29 : {
        label$30 : {
         if ($20_1) {
          break label$30
         }
         $21_1 = 0;
         break label$29;
        }
        $21_1 = $79($20_1 << 4 | 0 | 0, 16 | 0) | 0;
        $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       }
       label$31 : {
        if (($6_1 | 0) < (1 | 0)) {
         break label$31
        }
        $5_1 = 0;
        label$32 : while (1) {
         $22_1 = $21_1 + $5_1 | 0;
         $23_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $5_1 | 0;
         i64toi32_i32$2 = $23_1;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $387_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $22_1;
         HEAP32[i64toi32_i32$0 >> 2] = $387_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $392_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $22_1 + 8 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $392_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $5_1 = $5_1 + 16 | 0;
         $6_1 = $6_1 + -1 | 0;
         if ($6_1) {
          continue label$32
         }
         break label$32;
        };
       }
       label$33 : {
        $5_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        if (!$5_1) {
         break label$33
        }
        label$34 : {
         if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
          break label$34
         }
         $80($5_1 | 0);
        }
        HEAP32[($1_1 + 12 | 0) >> 2] = 0;
       }
       HEAP32[($1_1 + 12 | 0) >> 2] = $21_1;
       HEAP8[($1_1 + 16 | 0) >> 0] = 1;
       HEAP32[($1_1 + 8 | 0) >> 2] = $20_1;
       $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      }
      $5_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($6_1 << 4 | 0) | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $19_1;
      HEAPF32[($5_1 + 8 | 0) >> 2] = $17_1;
      HEAPF32[($5_1 + 4 | 0) >> 2] = $16_1;
      HEAPF32[$5_1 >> 2] = $15_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    }
    $14_1 = $14_1 + 1 | 0;
    if (($14_1 | 0) == ($4_1 | 0)) {
     break label$1
    }
    $12_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    $8_1 = Math_fround(HEAPF32[$2_1 >> 2]);
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $13_1 = $18_1;
    $11_1 = $17_1;
    $9_1 = $16_1;
    $7_1 = $15_1;
    continue label$2;
   };
  }
 }
 
 function $577($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  var $7_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $57_1 = Math_fround(0), $85_1 = Math_fround(0), $121_1 = Math_fround(0), $145_1 = Math_fround(0);
  $7_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $8_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
  $10_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) * $7_1) + Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) * $8_1)) + Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) * $9_1));
  $11_1 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[$0_1 >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2])));
  $12_1 = Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2]);
  $57_1 = Math_fround($11_1 * ($11_1 < Math_fround(0.0) ? Math_fround(-$12_1) : $12_1));
  $11_1 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2])));
  $12_1 = Math_fround(HEAPF32[($4_1 + 84 | 0) >> 2]);
  $85_1 = Math_fround($57_1 + Math_fround($11_1 * ($11_1 < Math_fround(0.0) ? Math_fround(-$12_1) : $12_1)));
  $11_1 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2])));
  $12_1 = Math_fround(HEAPF32[($4_1 + 88 | 0) >> 2]);
  $11_1 = Math_fround($85_1 + Math_fround($11_1 * ($11_1 < Math_fround(0.0) ? Math_fround(-$12_1) : $12_1)));
  $12_1 = Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2]);
  $121_1 = $11_1 > $12_1 ? $11_1 : $12_1;
  $11_1 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[$1_1 >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2])));
  $12_1 = Math_fround(HEAPF32[($5_1 + 80 | 0) >> 2]);
  $145_1 = Math_fround($11_1 * ($11_1 < Math_fround(0.0) ? Math_fround(-$12_1) : $12_1));
  $11_1 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2])));
  $12_1 = Math_fround(HEAPF32[($5_1 + 84 | 0) >> 2]);
  $7_1 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2])));
  $8_1 = Math_fround(HEAPF32[($5_1 + 88 | 0) >> 2]);
  $7_1 = Math_fround(Math_fround($145_1 + Math_fround($11_1 * ($11_1 < Math_fround(0.0) ? Math_fround(-$12_1) : $12_1))) + Math_fround($7_1 * ($7_1 < Math_fround(0.0) ? Math_fround(-$8_1) : $8_1)));
  $8_1 = Math_fround(HEAPF32[($5_1 + 96 | 0) >> 2]);
  $7_1 = Math_fround($121_1 + ($7_1 > $8_1 ? $7_1 : $8_1));
  $8_1 = Math_fround($10_1 + $7_1);
  $7_1 = Math_fround($7_1 - $10_1);
  return ($8_1 < $7_1 ? $8_1 : $7_1) > $6_1 ^ 1 | 0 | 0;
 }
 
 function $578($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $15_1 = Math_fround(0), $17_1 = Math_fround(0), $20_1 = Math_fround(0), $16_1 = Math_fround(0), $22_1 = Math_fround(0), $38_1 = 0, $8_1 = 0, $9_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $10_1 = Math_fround(0), $18_1 = Math_fround(0), $39_1 = 0, i64toi32_i32$2 = 0, $34_1 = Math_fround(0), $25_1 = Math_fround(0), $32_1 = Math_fround(0), $35_1 = Math_fround(0), $7_1 = Math_fround(0), $14_1 = Math_fround(0), $36_1 = Math_fround(0), $21_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $33_1 = Math_fround(0), $37_1 = Math_fround(0), $48_1 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $19_1 = Math_fround(0), $40_1 = 0, $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47_1 = 0, $49_1 = Math_fround(0), $50_1 = Math_fround(0), $375_1 = 0, $380_1 = 0, $562_1 = 0, $567_1 = 0, $886_1 = 0, $891_1 = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  HEAP32[(0 + 2748 | 0) >> 2] = (HEAP32[(0 + 2748 | 0) >> 2] | 0) + 1 | 0;
  $7_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
  $8_1 = 20;
  $9_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
  $25_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $27_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $28_1 = Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]);
  $29_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
  $30_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
  $31_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $32_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
  $33_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
  $34_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
  $35_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
  $36_1 = Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]);
  $37_1 = Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]);
  HEAP32[($6_1 + 28 | 0) >> 2] = 0;
  $14_1 = Math_fround(Math_fround($14_1 + Math_fround(Math_fround(Math_fround($34_1 * $35_1) + Math_fround($15_1 * $16_1)) + Math_fround($17_1 * $18_1))) - Math_fround($19_1 + Math_fround(Math_fround(Math_fround($36_1 * $37_1) + Math_fround($20_1 * $21_1)) + Math_fround($22_1 * $23_1))));
  HEAPF32[($6_1 + 24 | 0) >> 2] = $14_1;
  $7_1 = Math_fround(Math_fround($7_1 + Math_fround(Math_fround(Math_fround($34_1 * $32_1) + Math_fround($15_1 * $9_1)) + Math_fround($17_1 * $10_1))) - Math_fround($11_1 + Math_fround(Math_fround(Math_fround($36_1 * $33_1) + Math_fround($20_1 * $12_1)) + Math_fround($22_1 * $13_1))));
  HEAPF32[($6_1 + 20 | 0) >> 2] = $7_1;
  $34_1 = Math_fround(Math_fround($24_1 + Math_fround(Math_fround(Math_fround($34_1 * $27_1) + Math_fround($15_1 * $26_1)) + Math_fround($17_1 * $25_1))) - Math_fround($28_1 + Math_fround(Math_fround(Math_fround($36_1 * $31_1) + Math_fround($20_1 * $30_1)) + Math_fround($22_1 * $29_1))));
  HEAPF32[($6_1 + 16 | 0) >> 2] = $34_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         $38_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
         if (($38_1 | 0) >= (1 | 0)) {
          break label$7
         }
         $22_1 = Math_fround(3402823466385288598117041.0e14);
         break label$6;
        }
        $39_1 = $38_1 + -1 | 0;
        $22_1 = Math_fround(3402823466385288598117041.0e14);
        label$8 : while (1) {
         $38_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $8_1 | 0;
         $15_1 = Math_fround(HEAPF32[($38_1 + 8 | 0) >> 2]);
         $17_1 = Math_fround(HEAPF32[($38_1 + 4 | 0) >> 2]);
         $20_1 = Math_fround(HEAPF32[$38_1 >> 2]);
         HEAP32[($6_1 + 12 | 0) >> 2] = 0;
         $16_1 = Math_fround(Math_fround(Math_fround($20_1 * $35_1) + Math_fround($17_1 * $16_1)) + Math_fround($15_1 * $18_1));
         HEAPF32[($6_1 + 8 | 0) >> 2] = $16_1;
         $9_1 = Math_fround(Math_fround(Math_fround($20_1 * $32_1) + Math_fround($17_1 * $9_1)) + Math_fround($15_1 * $10_1));
         HEAPF32[($6_1 + 4 | 0) >> 2] = $9_1;
         $15_1 = Math_fround(Math_fround(Math_fround($20_1 * Math_fround(HEAPF32[$2_1 >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]))) + Math_fround($15_1 * $25_1));
         HEAPF32[$6_1 >> 2] = $15_1;
         label$9 : {
          if (Math_fround(Math_fround(Math_fround($15_1 * $34_1) + Math_fround($9_1 * $7_1)) + Math_fround($16_1 * $14_1)) < Math_fround(0.0) ^ 1 | 0) {
           break label$9
          }
          HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(-$16_1);
          HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(-$9_1);
          HEAPF32[$6_1 >> 2] = Math_fround(-$15_1);
         }
         HEAP32[(0 + 2740 | 0) >> 2] = (HEAP32[(0 + 2740 | 0) >> 2] | 0) + 1 | 0;
         label$10 : {
          label$11 : {
           if (!(HEAPU8[(0 + 2988 | 0) >> 0] | 0)) {
            break label$11
           }
           if (!($577($2_1 | 0, $3_1 | 0, $6_1 + 16 | 0 | 0, $6_1 | 0, $0_1 | 0, $1_1 | 0, Math_fround($22_1)) | 0)) {
            break label$10
           }
          }
          $38_1 = 0;
          HEAP32[(0 + 2744 | 0) >> 2] = (HEAP32[(0 + 2744 | 0) >> 2] | 0) + 1 | 0;
          $157($0_1 | 0, $2_1 | 0, $6_1 | 0, $6_1 + 108 | 0 | 0, $6_1 + 104 | 0 | 0, $6_1 + 80 | 0 | 0, $6_1 + 64 | 0 | 0);
          $157($1_1 | 0, $3_1 | 0, $6_1 | 0, $6_1 + 100 | 0 | 0, $6_1 + 96 | 0 | 0, $6_1 + 48 | 0 | 0, $6_1 + 32 | 0 | 0);
          label$12 : {
           $15_1 = Math_fround(HEAPF32[($6_1 + 104 | 0) >> 2]);
           $17_1 = Math_fround(HEAPF32[($6_1 + 100 | 0) >> 2]);
           if ($15_1 < $17_1) {
            break label$12
           }
           $20_1 = Math_fround(HEAPF32[($6_1 + 96 | 0) >> 2]);
           $16_1 = Math_fround(HEAPF32[($6_1 + 108 | 0) >> 2]);
           if ($20_1 < $16_1) {
            break label$12
           }
           $15_1 = Math_fround($15_1 - $17_1);
           $17_1 = Math_fround($20_1 - $16_1);
           $36_1 = $15_1 < $17_1 ? $15_1 : $17_1;
           $38_1 = 1;
          }
          if (!$38_1) {
           break label$5
          }
          if ($36_1 < $22_1 ^ 1 | 0) {
           break label$10
          }
          i64toi32_i32$2 = $6_1;
          i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
          $375_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $4_1;
          HEAP32[i64toi32_i32$0 >> 2] = $375_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = $6_1 + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $380_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $4_1 + 8 | 0;
          HEAP32[i64toi32_i32$1 >> 2] = $380_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          $22_1 = $36_1;
         }
         if (!$39_1) {
          break label$6
         }
         $8_1 = $8_1 + 36 | 0;
         $39_1 = $39_1 + -1 | 0;
         $18_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
         $16_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
         $35_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
         $10_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
         $9_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
         $32_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
         $25_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
         continue label$8;
        };
       }
       label$13 : {
        $39_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
        if (($39_1 | 0) < (1 | 0)) {
         break label$13
        }
        $38_1 = 20;
        label$14 : while (1) {
         $8_1 = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + $38_1 | 0;
         $15_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
         $17_1 = Math_fround(HEAPF32[$8_1 >> 2]);
         $20_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
         HEAP32[($6_1 + 12 | 0) >> 2] = 0;
         $16_1 = Math_fround(Math_fround(Math_fround($17_1 * Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2])) + Math_fround($20_1 * Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]))) + Math_fround($15_1 * Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2])));
         HEAPF32[($6_1 + 8 | 0) >> 2] = $16_1;
         $9_1 = Math_fround(Math_fround(Math_fround($17_1 * Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2])) + Math_fround($20_1 * Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]))) + Math_fround($15_1 * Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2])));
         HEAPF32[($6_1 + 4 | 0) >> 2] = $9_1;
         $15_1 = Math_fround(Math_fround(Math_fround($17_1 * Math_fround(HEAPF32[$3_1 >> 2])) + Math_fround($20_1 * Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]))) + Math_fround($15_1 * Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2])));
         HEAPF32[$6_1 >> 2] = $15_1;
         label$15 : {
          if (Math_fround(Math_fround(Math_fround($15_1 * $34_1) + Math_fround($9_1 * $7_1)) + Math_fround($16_1 * $14_1)) < Math_fround(0.0) ^ 1 | 0) {
           break label$15
          }
          HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(-$16_1);
          HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(-$9_1);
          HEAPF32[$6_1 >> 2] = Math_fround(-$15_1);
         }
         HEAP32[(0 + 2740 | 0) >> 2] = (HEAP32[(0 + 2740 | 0) >> 2] | 0) + 1 | 0;
         label$16 : {
          label$17 : {
           if (!(HEAPU8[(0 + 2988 | 0) >> 0] | 0)) {
            break label$17
           }
           if (!($577($2_1 | 0, $3_1 | 0, $6_1 + 16 | 0 | 0, $6_1 | 0, $0_1 | 0, $1_1 | 0, Math_fround($22_1)) | 0)) {
            break label$16
           }
          }
          $8_1 = 0;
          HEAP32[(0 + 2744 | 0) >> 2] = (HEAP32[(0 + 2744 | 0) >> 2] | 0) + 1 | 0;
          $157($0_1 | 0, $2_1 | 0, $6_1 | 0, $6_1 + 108 | 0 | 0, $6_1 + 104 | 0 | 0, $6_1 + 80 | 0 | 0, $6_1 + 64 | 0 | 0);
          $157($1_1 | 0, $3_1 | 0, $6_1 | 0, $6_1 + 100 | 0 | 0, $6_1 + 96 | 0 | 0, $6_1 + 48 | 0 | 0, $6_1 + 32 | 0 | 0);
          label$18 : {
           $15_1 = Math_fround(HEAPF32[($6_1 + 104 | 0) >> 2]);
           $17_1 = Math_fround(HEAPF32[($6_1 + 100 | 0) >> 2]);
           if ($15_1 < $17_1) {
            break label$18
           }
           $20_1 = Math_fround(HEAPF32[($6_1 + 96 | 0) >> 2]);
           $16_1 = Math_fround(HEAPF32[($6_1 + 108 | 0) >> 2]);
           if ($20_1 < $16_1) {
            break label$18
           }
           $15_1 = Math_fround($15_1 - $17_1);
           $17_1 = Math_fround($20_1 - $16_1);
           $10_1 = $15_1 < $17_1 ? $15_1 : $17_1;
           $8_1 = 1;
          }
          if (!$8_1) {
           break label$5
          }
          if ($10_1 < $22_1 ^ 1 | 0) {
           break label$16
          }
          i64toi32_i32$2 = $6_1;
          i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
          $562_1 = i64toi32_i32$0;
          i64toi32_i32$0 = $4_1;
          HEAP32[i64toi32_i32$0 >> 2] = $562_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = $6_1 + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $567_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $4_1 + 8 | 0;
          HEAP32[i64toi32_i32$1 >> 2] = $567_1;
          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
          $22_1 = $10_1;
         }
         $38_1 = $38_1 + 36 | 0;
         $39_1 = $39_1 + -1 | 0;
         if ($39_1) {
          continue label$14
         }
         break label$14;
        };
       }
       $38_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       if (($38_1 | 0) >= (1 | 0)) {
        break label$4
       }
       $40_1 = -1;
       $41_1 = Math_fround(0.0);
       $42_1 = Math_fround(0.0);
       $43_1 = Math_fround(0.0);
       $44_1 = Math_fround(0.0);
       $45_1 = Math_fround(0.0);
       $46_1 = Math_fround(0.0);
       $47_1 = -1;
       break label$3;
      }
      $3_1 = 0;
      break label$1;
     }
     $8_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
     $47_1 = -1;
     $48_1 = 0;
     $40_1 = -1;
     $46_1 = Math_fround(0.0);
     $45_1 = Math_fround(0.0);
     $44_1 = Math_fround(0.0);
     $43_1 = Math_fround(0.0);
     $42_1 = Math_fround(0.0);
     $41_1 = Math_fround(0.0);
     label$19 : while (1) {
      label$20 : {
       if (($8_1 | 0) < (1 | 0)) {
        break label$20
       }
       $38_1 = (HEAP32[($0_1 + 56 | 0) >> 2] | 0) + ($48_1 << 4 | 0) | 0;
       $15_1 = Math_fround(HEAPF32[$38_1 >> 2]);
       $17_1 = Math_fround(HEAPF32[($38_1 + 4 | 0) >> 2]);
       $20_1 = Math_fround(HEAPF32[($38_1 + 8 | 0) >> 2]);
       $9_1 = Math_fround(Math_fround(Math_fround($15_1 * Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]))) + Math_fround($20_1 * Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2])));
       $10_1 = Math_fround(Math_fround(Math_fround($15_1 * Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]))) + Math_fround($20_1 * Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2])));
       $18_1 = Math_fround(Math_fround(Math_fround($15_1 * Math_fround(HEAPF32[$2_1 >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]))) + Math_fround($20_1 * Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2])));
       $39_1 = 0;
       $38_1 = 4;
       label$21 : while (1) {
        $8_1 = (HEAP32[($1_1 + 56 | 0) >> 2] | 0) + $38_1 | 0;
        $15_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
        $17_1 = Math_fround(HEAPF32[($8_1 + -4 | 0) >> 2]);
        $20_1 = Math_fround(HEAPF32[$8_1 >> 2]);
        $35_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
        $36_1 = Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]);
        $11_1 = Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]);
        $16_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
        $25_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
        $32_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
        $12_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
        $13_1 = Math_fround(HEAPF32[$3_1 >> 2]);
        $19_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
        HEAP32[($6_1 + 12 | 0) >> 2] = 0;
        $25_1 = Math_fround(Math_fround(Math_fround($17_1 * $25_1) + Math_fround($20_1 * $32_1)) + Math_fround($15_1 * $16_1));
        $32_1 = Math_fround(Math_fround(Math_fround($17_1 * $13_1) + Math_fround($20_1 * $19_1)) + Math_fround($15_1 * $12_1));
        $16_1 = Math_fround(Math_fround($18_1 * $25_1) - Math_fround($10_1 * $32_1));
        HEAPF32[($6_1 + 8 | 0) >> 2] = $16_1;
        $35_1 = Math_fround(Math_fround(Math_fround($17_1 * $36_1) + Math_fround($20_1 * $11_1)) + Math_fround($15_1 * $35_1));
        $17_1 = Math_fround(Math_fround($9_1 * $32_1) - Math_fround($18_1 * $35_1));
        HEAPF32[($6_1 + 4 | 0) >> 2] = $17_1;
        $15_1 = Math_fround(Math_fround($10_1 * $35_1) - Math_fround($9_1 * $25_1));
        HEAPF32[$6_1 >> 2] = $15_1;
        label$22 : {
         label$23 : {
          if (+Math_fround(Math_abs($15_1)) > 1.0e-06) {
           break label$23
          }
          if (+Math_fround(Math_abs($17_1)) > 1.0e-06) {
           break label$23
          }
          if (+Math_fround(Math_abs($16_1)) > 1.0e-06 ^ 1 | 0) {
           break label$22
          }
         }
         $20_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($16_1 * $16_1) + Math_fround(Math_fround($15_1 * $15_1) + Math_fround($17_1 * $17_1))))));
         $16_1 = Math_fround($16_1 * $20_1);
         HEAPF32[($6_1 + 8 | 0) >> 2] = $16_1;
         $17_1 = Math_fround($17_1 * $20_1);
         HEAPF32[($6_1 + 4 | 0) >> 2] = $17_1;
         $15_1 = Math_fround($15_1 * $20_1);
         HEAPF32[$6_1 >> 2] = $15_1;
         label$24 : {
          if (Math_fround(Math_fround(Math_fround($15_1 * $34_1) + Math_fround($17_1 * $7_1)) + Math_fround($14_1 * $16_1)) < Math_fround(0.0) ^ 1 | 0) {
           break label$24
          }
          HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(-$16_1);
          HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(-$17_1);
          HEAPF32[$6_1 >> 2] = Math_fround(-$15_1);
         }
         HEAP32[(0 + 2740 | 0) >> 2] = (HEAP32[(0 + 2740 | 0) >> 2] | 0) + 1 | 0;
         label$25 : {
          if (!(HEAPU8[(0 + 2988 | 0) >> 0] | 0)) {
           break label$25
          }
          if (!($577($2_1 | 0, $3_1 | 0, $6_1 + 16 | 0 | 0, $6_1 | 0, $0_1 | 0, $1_1 | 0, Math_fround($22_1)) | 0)) {
           break label$22
          }
         }
         $8_1 = 0;
         HEAP32[(0 + 2744 | 0) >> 2] = (HEAP32[(0 + 2744 | 0) >> 2] | 0) + 1 | 0;
         $157($0_1 | 0, $2_1 | 0, $6_1 | 0, $6_1 + 108 | 0 | 0, $6_1 + 104 | 0 | 0, $6_1 + 80 | 0 | 0, $6_1 + 64 | 0 | 0);
         $157($1_1 | 0, $3_1 | 0, $6_1 | 0, $6_1 + 100 | 0 | 0, $6_1 + 96 | 0 | 0, $6_1 + 48 | 0 | 0, $6_1 + 32 | 0 | 0);
         label$26 : {
          $15_1 = Math_fround(HEAPF32[($6_1 + 104 | 0) >> 2]);
          $17_1 = Math_fround(HEAPF32[($6_1 + 100 | 0) >> 2]);
          if ($15_1 < $17_1) {
           break label$26
          }
          $20_1 = Math_fround(HEAPF32[($6_1 + 96 | 0) >> 2]);
          $16_1 = Math_fround(HEAPF32[($6_1 + 108 | 0) >> 2]);
          if ($20_1 < $16_1) {
           break label$26
          }
          label$27 : {
           $21_1 = Math_fround($15_1 - $17_1);
           $15_1 = Math_fround($20_1 - $16_1);
           if ($21_1 < $15_1 ^ 1 | 0) {
            break label$27
           }
           $8_1 = 1;
           $27_1 = Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]);
           $28_1 = Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2]);
           $29_1 = Math_fround(HEAPF32[($6_1 + 48 | 0) >> 2]);
           $23_1 = Math_fround(HEAPF32[($6_1 + 72 | 0) >> 2]);
           $24_1 = Math_fround(HEAPF32[($6_1 + 68 | 0) >> 2]);
           $26_1 = Math_fround(HEAPF32[($6_1 + 64 | 0) >> 2]);
           break label$26;
          }
          $8_1 = 1;
          $27_1 = Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2]);
          $28_1 = Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]);
          $29_1 = Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2]);
          $23_1 = Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]);
          $24_1 = Math_fround(HEAPF32[($6_1 + 84 | 0) >> 2]);
          $26_1 = Math_fround(HEAPF32[($6_1 + 80 | 0) >> 2]);
          $21_1 = $15_1;
         }
         if (!$8_1) {
          break label$2
         }
         if ($21_1 < $22_1 ^ 1 | 0) {
          break label$22
         }
         i64toi32_i32$2 = $6_1;
         i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
         $886_1 = i64toi32_i32$0;
         i64toi32_i32$0 = $4_1;
         HEAP32[i64toi32_i32$0 >> 2] = $886_1;
         HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
         i64toi32_i32$2 = $6_1 + 8 | 0;
         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $891_1 = i64toi32_i32$1;
         i64toi32_i32$1 = $4_1 + 8 | 0;
         HEAP32[i64toi32_i32$1 >> 2] = $891_1;
         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
         $41_1 = $29_1;
         $42_1 = $28_1;
         $43_1 = $27_1;
         $44_1 = $26_1;
         $45_1 = $24_1;
         $46_1 = $23_1;
         $30_1 = $32_1;
         $31_1 = $25_1;
         $33_1 = $35_1;
         $37_1 = $18_1;
         $49_1 = $10_1;
         $50_1 = $9_1;
         $40_1 = $48_1;
         $47_1 = $39_1;
         $22_1 = $21_1;
        }
        $38_1 = $38_1 + 16 | 0;
        $39_1 = $39_1 + 1 | 0;
        $8_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
        if (($39_1 | 0) < ($8_1 | 0)) {
         continue label$21
        }
        break label$21;
       };
       $38_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      }
      $48_1 = $48_1 + 1 | 0;
      if (($48_1 | 0) < ($38_1 | 0)) {
       continue label$19
      }
      break label$19;
     };
    }
    label$28 : {
     if (($47_1 | $40_1 | 0 | 0) < (0 | 0)) {
      break label$28
     }
     $22_1 = Math_fround($41_1 - $44_1);
     $16_1 = Math_fround($42_1 - $45_1);
     $9_1 = Math_fround($43_1 - $46_1);
     $17_1 = Math_fround(Math_fround(Math_fround($22_1 * $30_1) + Math_fround($16_1 * $31_1)) + Math_fround($9_1 * $33_1));
     $10_1 = Math_fround(Math_fround(Math_fround($22_1 * $37_1) + Math_fround($16_1 * $49_1)) + Math_fround($9_1 * $50_1));
     $15_1 = Math_fround(0.0);
     label$29 : {
      $20_1 = Math_fround(Math_fround(Math_fround($30_1 * $37_1) + Math_fround($31_1 * $49_1)) + Math_fround($33_1 * $50_1));
      $18_1 = Math_fround(Math_fround(1.0) - Math_fround($20_1 * $20_1));
      if ($18_1 == Math_fround(0.0)) {
       break label$29
      }
      $15_1 = Math_fround(-1000000015047466219876688.0e6);
      $18_1 = Math_fround(Math_fround($10_1 - Math_fround($17_1 * $20_1)) / $18_1);
      if ($18_1 < Math_fround(-1000000015047466219876688.0e6)) {
       break label$29
      }
      $15_1 = $18_1;
      if ($15_1 > Math_fround(1000000015047466219876688.0e6) ^ 1 | 0) {
       break label$29
      }
      $15_1 = Math_fround(1000000015047466219876688.0e6);
     }
     label$30 : {
      label$31 : {
       $17_1 = Math_fround(Math_fround($20_1 * $15_1) - $17_1);
       if ($17_1 < Math_fround(-1000000015047466219876688.0e6) ^ 1 | 0) {
        break label$31
       }
       label$32 : {
        $20_1 = Math_fround($10_1 + Math_fround($20_1 * Math_fround(-1000000015047466219876688.0e6)));
        if (!($20_1 < Math_fround(-1000000015047466219876688.0e6))) {
         break label$32
        }
        $17_1 = Math_fround(-1000000015047466219876688.0e6);
        $15_1 = Math_fround(-1000000015047466219876688.0e6);
        break label$30;
       }
       $15_1 = Math_fround(1000000015047466219876688.0e6);
       label$33 : {
        if (!($20_1 > Math_fround(1000000015047466219876688.0e6) ^ 1 | 0)) {
         break label$33
        }
        $17_1 = Math_fround(-1000000015047466219876688.0e6);
        $15_1 = $20_1;
        break label$30;
       }
       $17_1 = Math_fround(-1000000015047466219876688.0e6);
       break label$30;
      }
      if ($17_1 > Math_fround(1000000015047466219876688.0e6) ^ 1 | 0) {
       break label$30
      }
      $15_1 = Math_fround(-1000000015047466219876688.0e6);
      $17_1 = Math_fround(1000000015047466219876688.0e6);
      $20_1 = Math_fround($10_1 + Math_fround($20_1 * Math_fround(1000000015047466219876688.0e6)));
      if ($20_1 < Math_fround(-1000000015047466219876688.0e6)) {
       break label$30
      }
      $17_1 = Math_fround(1000000015047466219876688.0e6);
      $15_1 = $20_1;
      if ($15_1 > Math_fround(1000000015047466219876688.0e6) ^ 1 | 0) {
       break label$30
      }
      $17_1 = Math_fround(1000000015047466219876688.0e6);
      $15_1 = Math_fround(1000000015047466219876688.0e6);
     }
     HEAP32[($6_1 + 92 | 0) >> 2] = 0;
     $10_1 = Math_fround($33_1 * $17_1);
     $20_1 = Math_fround($10_1 + Math_fround($9_1 - Math_fround($50_1 * $15_1)));
     HEAPF32[($6_1 + 88 | 0) >> 2] = $20_1;
     $9_1 = Math_fround($31_1 * $17_1);
     $16_1 = Math_fround($9_1 + Math_fround($16_1 - Math_fround($49_1 * $15_1)));
     HEAPF32[($6_1 + 84 | 0) >> 2] = $16_1;
     $17_1 = Math_fround($30_1 * $17_1);
     $15_1 = Math_fround($17_1 + Math_fround($22_1 - Math_fround($37_1 * $15_1)));
     HEAPF32[($6_1 + 80 | 0) >> 2] = $15_1;
     $22_1 = Math_fround(Math_fround($20_1 * $20_1) + Math_fround(Math_fround($15_1 * $15_1) + Math_fround($16_1 * $16_1)));
     if ($22_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
      break label$28
     }
     $18_1 = Math_fround(Math_sqrt($22_1));
     $22_1 = Math_fround(Math_fround(1.0) / $18_1);
     $20_1 = Math_fround($20_1 * $22_1);
     HEAPF32[($6_1 + 88 | 0) >> 2] = $20_1;
     $16_1 = Math_fround($16_1 * $22_1);
     HEAPF32[($6_1 + 84 | 0) >> 2] = $16_1;
     $15_1 = Math_fround($15_1 * $22_1);
     HEAPF32[($6_1 + 80 | 0) >> 2] = $15_1;
     label$34 : {
      if (Math_fround(Math_fround(Math_fround($15_1 * $34_1) + Math_fround($16_1 * $7_1)) + Math_fround($20_1 * $14_1)) < Math_fround(0.0) ^ 1 | 0) {
       break label$34
      }
      HEAPF32[($6_1 + 88 | 0) >> 2] = Math_fround(-$20_1);
      HEAPF32[($6_1 + 84 | 0) >> 2] = Math_fround(-$16_1);
      HEAPF32[($6_1 + 80 | 0) >> 2] = Math_fround(-$15_1);
     }
     HEAP32[($6_1 + 76 | 0) >> 2] = 0;
     HEAPF32[($6_1 + 72 | 0) >> 2] = Math_fround($43_1 + $10_1);
     HEAPF32[($6_1 + 68 | 0) >> 2] = Math_fround($42_1 + $9_1);
     HEAPF32[($6_1 + 64 | 0) >> 2] = Math_fround($41_1 + $17_1);
     FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($5_1, $6_1 + 80 | 0, $6_1 + 64 | 0, Math_fround(-$18_1));
    }
    $3_1 = 1;
    $15_1 = Math_fround(HEAPF32[$4_1 >> 2]);
    $17_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
    if (Math_fround(Math_fround(Math_fround($34_1 * $15_1) + Math_fround($7_1 * $17_1)) + Math_fround($14_1 * $20_1)) < Math_fround(0.0) ^ 1 | 0) {
     break label$1
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(-$20_1);
    HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(-$17_1);
    HEAPF32[$4_1 >> 2] = Math_fround(-$15_1);
    break label$1;
   }
   $3_1 = 0;
  }
  global$0 = $6_1 + 112 | 0;
  return $3_1 | 0;
 }
 
 function $579($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = Math_fround($6_1);
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, i64toi32_i32$2 = 0, $27_1 = Math_fround(0), $12_1 = 0, $28_1 = Math_fround(0), $30_1 = Math_fround(0), $13_1 = 0, $8_1 = 0, $15_1 = Math_fround(0), $17_1 = Math_fround(0), $29_1 = Math_fround(0), $26_1 = Math_fround(0), $31_1 = 0, $14_1 = 0, $19_1 = Math_fround(0), $16_1 = Math_fround(0), $18_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $32_1 = 0, $37_1 = 0, $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47_1 = Math_fround(0), $77_1 = 0, $83_1 = 0, $118_1 = 0, $123_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $523_1 = 0, $528_1 = 0, $658_1 = 0, $661_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  label$1 : {
   $9_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   if (($9_1 | 0) > (-1 | 0)) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    label$3 : {
     $10_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     if (!$10_1) {
      break label$3
     }
     label$4 : {
      if (!(HEAPU8[($4_1 + 16 | 0) >> 0] | 0)) {
       break label$4
      }
      $80($10_1 | 0);
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    }
    HEAP8[($4_1 + 16 | 0) >> 0] = 1;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = 0;
    HEAP32[($4_1 + 8 | 0) >> 2] = 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = i64toi32_i32$0;
   }
   $10_1 = $9_1 << 4 | 0;
   label$5 : while (1) {
    $11_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + $10_1 | 0;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $77_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $11_1;
    HEAP32[i64toi32_i32$0 >> 2] = $77_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $11_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $83_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $10_1 = $10_1 + 16 | 0;
    $11_1 = $9_1 + 1 | 0;
    $12_1 = $11_1 >>> 0 >= $9_1 >>> 0;
    $9_1 = $11_1;
    if ($12_1) {
     continue label$5
    }
    break label$5;
   };
  }
  $13_1 = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$6 : {
   $14_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) >= ($14_1 | 0)) {
    break label$6
   }
   label$7 : {
    if (!$14_1) {
     break label$7
    }
    $13_1 = $79($14_1 << 4 | 0 | 0, 16 | 0) | 0;
    $10_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    if (($10_1 | 0) < (1 | 0)) {
     break label$7
    }
    $9_1 = 0;
    label$8 : while (1) {
     $11_1 = $13_1 + $9_1 | 0;
     $12_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + $9_1 | 0;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $118_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $11_1;
     HEAP32[i64toi32_i32$0 >> 2] = $118_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $123_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $11_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $123_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $9_1 = $9_1 + 16 | 0;
     $10_1 = $10_1 + -1 | 0;
     if ($10_1) {
      continue label$8
     }
     break label$8;
    };
   }
   label$9 : {
    $9_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    if (!$9_1) {
     break label$9
    }
    label$10 : {
     if (!(HEAPU8[($4_1 + 16 | 0) >> 0] | 0)) {
      break label$10
     }
     $80($9_1 | 0);
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $13_1;
   HEAP8[($4_1 + 16 | 0) >> 0] = 1;
   HEAP32[($4_1 + 8 | 0) >> 2] = $14_1;
  }
  label$11 : {
   $13_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
   if (($13_1 | 0) < (1 | 0)) {
    break label$11
   }
   $9_1 = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 20 | 0;
   $15_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
   $16_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
   $17_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[$0_1 >> 2]);
   $22_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $10_1 = 0;
   $27_1 = Math_fround(3402823466385288598117041.0e14);
   $11_1 = -1;
   label$12 : while (1) {
    $28_1 = Math_fround(HEAPF32[$9_1 >> 2]);
    $29_1 = Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]);
    $30_1 = Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]);
    $28_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($28_1 * $26_1) + Math_fround($29_1 * $25_1)) + Math_fround($30_1 * $24_1)) * $21_1) + Math_fround(Math_fround(Math_fround(Math_fround($28_1 * $23_1) + Math_fround($29_1 * $18_1)) + Math_fround($30_1 * $17_1)) * $20_1)) + Math_fround(Math_fround(Math_fround(Math_fround($28_1 * $22_1) + Math_fround($29_1 * $16_1)) + Math_fround($30_1 * $15_1)) * $19_1));
    $12_1 = $28_1 < $27_1;
    $27_1 = $12_1 ? $28_1 : $27_1;
    $11_1 = $12_1 ? $10_1 : $11_1;
    $9_1 = $9_1 + 36 | 0;
    $10_1 = $10_1 + 1 | 0;
    if (($10_1 | 0) < ($13_1 | 0)) {
     continue label$12
    }
    break label$12;
   };
   if (($11_1 | 0) < (0 | 0)) {
    break label$11
   }
   label$13 : {
    label$14 : {
     $31_1 = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + Math_imul($11_1, 36) | 0;
     $32_1 = HEAP32[($31_1 + 4 | 0) >> 2] | 0;
     if (($32_1 | 0) >= (1 | 0)) {
      break label$14
     }
     $13_1 = $3_1;
     break label$13;
    }
    $33_1 = $31_1 + 28 | 0;
    $34_1 = $31_1 + 24 | 0;
    $35_1 = $31_1 + 20 | 0;
    $36_1 = $31_1 + 12 | 0;
    $9_1 = 0;
    label$15 : while (1) {
     $13_1 = $4_1;
     $11_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     $12_1 = HEAP32[$36_1 >> 2] | 0;
     $14_1 = $9_1 + 1 | 0;
     $37_1 = ($14_1 | 0) == ($32_1 | 0);
     $10_1 = $11_1 + ((HEAP32[($12_1 + (($37_1 ? 0 : $14_1) << 2 | 0) | 0) >> 2] | 0) << 4 | 0) | 0;
     $38_1 = Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]);
     $26_1 = Math_fround(HEAPF32[$10_1 >> 2]);
     $39_1 = Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]);
     $9_1 = $11_1 + ((HEAP32[($12_1 + ($9_1 << 2 | 0) | 0) >> 2] | 0) << 4 | 0) | 0;
     $27_1 = Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]);
     $28_1 = Math_fround(HEAPF32[$9_1 >> 2]);
     $29_1 = Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]);
     $40_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
     $41_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
     $42_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
     $30_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
     $16_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[$33_1 >> 2]);
     $18_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
     $19_1 = Math_fround(HEAPF32[$35_1 >> 2]);
     $20_1 = Math_fround(HEAPF32[$2_1 >> 2]);
     $21_1 = Math_fround(HEAPF32[$34_1 >> 2]);
     $22_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
     $23_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
     $24_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
     $25_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
     HEAP32[($8_1 + 28 | 0) >> 2] = 0;
     $26_1 = Math_fround($28_1 - $26_1);
     $39_1 = Math_fround($29_1 - $39_1);
     $38_1 = Math_fround($27_1 - $38_1);
     $43_1 = Math_fround(Math_fround(Math_fround($20_1 * $26_1) + Math_fround($22_1 * $39_1)) + Math_fround($18_1 * $38_1));
     $44_1 = Math_fround(Math_fround(Math_fround($24_1 * $19_1) + Math_fround($25_1 * $21_1)) + Math_fround($23_1 * $17_1));
     $45_1 = Math_fround(Math_fround(Math_fround($26_1 * $24_1) + Math_fround($39_1 * $25_1)) + Math_fround($38_1 * $23_1));
     $46_1 = Math_fround(Math_fround(Math_fround($20_1 * $19_1) + Math_fround($22_1 * $21_1)) + Math_fround($18_1 * $17_1));
     $47_1 = Math_fround(Math_fround($43_1 * $44_1) - Math_fround($45_1 * $46_1));
     HEAPF32[($8_1 + 24 | 0) >> 2] = Math_fround(-$47_1);
     $26_1 = Math_fround(Math_fround(Math_fround($26_1 * $15_1) + Math_fround($39_1 * $16_1)) + Math_fround($38_1 * $30_1));
     $17_1 = Math_fround(Math_fround(Math_fround($15_1 * $19_1) + Math_fround($16_1 * $21_1)) + Math_fround($30_1 * $17_1));
     $19_1 = Math_fround(Math_fround($26_1 * $46_1) - Math_fround($43_1 * $17_1));
     HEAPF32[($8_1 + 20 | 0) >> 2] = Math_fround(-$19_1);
     $17_1 = Math_fround(-Math_fround(Math_fround($45_1 * $17_1) - Math_fround($26_1 * $44_1)));
     HEAPF32[($8_1 + 16 | 0) >> 2] = $17_1;
     $4_1 = $3_1;
     $576($4_1 | 0, $13_1 | 0, $8_1 + 16 | 0 | 0, Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround(Math_fround($41_1 + Math_fround(Math_fround(Math_fround($28_1 * $20_1) + Math_fround($29_1 * $22_1)) + Math_fround($27_1 * $18_1))) * $17_1) - Math_fround(Math_fround($42_1 + Math_fround(Math_fround(Math_fround($28_1 * $24_1) + Math_fround($29_1 * $25_1)) + Math_fround($27_1 * $23_1))) * $19_1)) - Math_fround(Math_fround($40_1 + Math_fround(Math_fround(Math_fround($28_1 * $15_1) + Math_fround($29_1 * $16_1)) + Math_fround($27_1 * $30_1))) * $47_1)))));
     label$16 : {
      $9_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      if (($9_1 | 0) > (-1 | 0)) {
       break label$16
      }
      label$17 : {
       if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
        break label$17
       }
       label$18 : {
        $10_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
        if (!$10_1) {
         break label$18
        }
        label$19 : {
         if (!(HEAPU8[($4_1 + 16 | 0) >> 0] | 0)) {
          break label$19
         }
         $80($10_1 | 0);
        }
        HEAP32[($4_1 + 12 | 0) >> 2] = 0;
       }
       HEAP8[($4_1 + 16 | 0) >> 0] = 1;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$0 = 0;
       HEAP32[($4_1 + 8 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      }
      $10_1 = $9_1 << 4 | 0;
      label$20 : while (1) {
       $11_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + $10_1 | 0;
       i64toi32_i32$2 = $8_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $523_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $11_1;
       HEAP32[i64toi32_i32$0 >> 2] = $523_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $528_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $11_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $528_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $10_1 = $10_1 + 16 | 0;
       $11_1 = $9_1 + 1 | 0;
       $12_1 = $11_1 >>> 0 >= $9_1 >>> 0;
       $9_1 = $11_1;
       if ($12_1) {
        continue label$20
       }
       break label$20;
      };
     }
     HEAP32[($4_1 + 4 | 0) >> 2] = 0;
     $9_1 = $14_1;
     $3_1 = $13_1;
     if (!$37_1) {
      continue label$15
     }
     break label$15;
    };
   }
   $12_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
   if (($12_1 | 0) < (1 | 0)) {
    break label$11
   }
   $27_1 = Math_fround(HEAPF32[($31_1 + 20 | 0) >> 2]);
   $30_1 = Math_fround(HEAPF32[($31_1 + 24 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($31_1 + 28 | 0) >> 2]);
   $28_1 = Math_fround(Math_fround(Math_fround($27_1 * Math_fround(HEAPF32[$2_1 >> 2])) + Math_fround($30_1 * Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]))) + Math_fround($15_1 * Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2])));
   $29_1 = Math_fround(Math_fround(Math_fround($27_1 * Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2])) + Math_fround($30_1 * Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]))) + Math_fround($15_1 * Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2])));
   $30_1 = Math_fround(Math_fround(Math_fround($27_1 * Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2])) + Math_fround($30_1 * Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]))) + Math_fround($15_1 * Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2])));
   $15_1 = Math_fround(Math_fround(HEAPF32[($31_1 + 32 | 0) >> 2]) - Math_fround(Math_fround(Math_fround($28_1 * Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2])) + Math_fround($29_1 * Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]))) + Math_fround($30_1 * Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]))));
   $10_1 = 0;
   $11_1 = 0;
   label$21 : while (1) {
    label$22 : {
     $9_1 = (HEAP32[($13_1 + 12 | 0) >> 2] | 0) + $10_1 | 0;
     $4_1 = $9_1 + 8 | 0;
     $27_1 = Math_fround($15_1 + Math_fround(Math_fround(Math_fround($28_1 * Math_fround(HEAPF32[$9_1 >> 2])) + Math_fround($29_1 * Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]))) + Math_fround($30_1 * Math_fround(HEAPF32[$4_1 >> 2]))));
     $27_1 = $27_1 <= $5_1 ? $5_1 : $27_1;
     if ($27_1 <= $6_1 ^ 1 | 0) {
      break label$22
     }
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     $658_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($8_1 + 16 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $658_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$1 = HEAP32[$9_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
     $661_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $8_1;
     HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $661_1;
     HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($7_1, $0_1, i64toi32_i32$1 + 16 | 0, $27_1);
     $12_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
    }
    $10_1 = $10_1 + 16 | 0;
    $11_1 = $11_1 + 1 | 0;
    if (($11_1 | 0) < ($12_1 | 0)) {
     continue label$21
    }
    break label$21;
   };
  }
  global$0 = $8_1 + 32 | 0;
 }
 
 function $580($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = Math_fround($6_1);
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $28_1 = 0, $11_1 = Math_fround(0), i64toi32_i32$0 = 0, $12_1 = Math_fround(0), i64toi32_i32$1 = 0, $10_1 = 0, $13_1 = Math_fround(0), $30_1 = 0, i64toi32_i32$2 = 0, $18_1 = 0, $17_1 = 0, $29_1 = Math_fround(0), $14_1 = Math_fround(0), $33_1 = 0, $34_1 = 0, $35_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $31_1 = 0, $45_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $200_1 = 0, $205_1 = 0, $32_1 = 0, $323_1 = 0, $328_1 = 0;
  $10_1 = global$0 - 32 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 28 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $11_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
  $45_1 = $11_1;
  $12_1 = Math_fround(HEAPF32[$0_1 >> 2]);
  $13_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
  $11_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($12_1 * $12_1) + Math_fround($13_1 * $13_1)) + Math_fround($11_1 * $11_1)))));
  $14_1 = Math_fround($45_1 * $11_1);
  HEAPF32[($10_1 + 24 | 0) >> 2] = $14_1;
  $15_1 = Math_fround($13_1 * $11_1);
  HEAPF32[($10_1 + 20 | 0) >> 2] = $15_1;
  $16_1 = Math_fround($12_1 * $11_1);
  HEAPF32[($10_1 + 16 | 0) >> 2] = $16_1;
  $17_1 = -1;
  label$1 : {
   $18_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
   if (($18_1 | 0) < (1 | 0)) {
    break label$1
   }
   $0_1 = (HEAP32[($2_1 + 36 | 0) >> 2] | 0) + 20 | 0;
   $19_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[$4_1 >> 2]);
   $28_1 = 0;
   $11_1 = Math_fround(-3402823466385288598117041.0e14);
   $17_1 = -1;
   label$2 : while (1) {
    $12_1 = Math_fround(HEAPF32[$0_1 >> 2]);
    $13_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
    $29_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
    $12_1 = Math_fround(Math_fround(Math_fround($16_1 * Math_fround(Math_fround(Math_fround($12_1 * $27_1) + Math_fround($13_1 * $26_1)) + Math_fround($29_1 * $25_1))) + Math_fround($15_1 * Math_fround(Math_fround(Math_fround($12_1 * $24_1) + Math_fround($13_1 * $22_1)) + Math_fround($29_1 * $21_1)))) + Math_fround($14_1 * Math_fround(Math_fround(Math_fround($12_1 * $23_1) + Math_fround($13_1 * $20_1)) + Math_fround($29_1 * $19_1))));
    $30_1 = $12_1 > $11_1;
    $11_1 = $30_1 ? $12_1 : $11_1;
    $17_1 = $30_1 ? $28_1 : $17_1;
    $0_1 = $0_1 + 36 | 0;
    $28_1 = $28_1 + 1 | 0;
    if (($28_1 | 0) < ($18_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   $0_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   if (($0_1 | 0) > (-1 | 0)) {
    break label$3
   }
   label$4 : {
    if ((HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$4
    }
    label$5 : {
     $28_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
     if (!$28_1) {
      break label$5
     }
     label$6 : {
      if (!(HEAPU8[($7_1 + 16 | 0) >> 0] | 0)) {
       break label$6
      }
      $80($28_1 | 0);
     }
     HEAP32[($7_1 + 12 | 0) >> 2] = 0;
    }
    HEAP8[($7_1 + 16 | 0) >> 0] = 1;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = 0;
    HEAP32[($7_1 + 8 | 0) >> 2] = 0;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
   }
   $28_1 = $0_1 << 4 | 0;
   label$7 : while (1) {
    $30_1 = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + $28_1 | 0;
    i64toi32_i32$2 = $10_1;
    i64toi32_i32$0 = HEAP32[$10_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    $200_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $30_1;
    HEAP32[i64toi32_i32$0 >> 2] = $200_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $10_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $205_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $30_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $205_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $28_1 = $28_1 + 16 | 0;
    $30_1 = $0_1 + 1 | 0;
    $18_1 = $30_1 >>> 0 >= $0_1 >>> 0;
    $0_1 = $30_1;
    if ($18_1) {
     continue label$7
    }
    break label$7;
   };
  }
  HEAP32[($7_1 + 4 | 0) >> 2] = 0;
  label$8 : {
   $0_1 = (HEAP32[($2_1 + 36 | 0) >> 2] | 0) + Math_imul($17_1, 36) | 0;
   $31_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($31_1 | 0) < (1 | 0)) {
    break label$8
   }
   $32_1 = $0_1 + 12 | 0;
   $28_1 = 0;
   $33_1 = 0;
   label$9 : while (1) {
    $0_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) + ((HEAP32[((HEAP32[$32_1 >> 2] | 0) + ($33_1 << 2 | 0) | 0) >> 2] | 0) << 4 | 0) | 0;
    $11_1 = Math_fround(HEAPF32[$0_1 >> 2]);
    $12_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
    $29_1 = Math_fround(Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2])) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]))) + Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]));
    $14_1 = Math_fround(Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2])) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]))) + Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]));
    $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($11_1 * Math_fround(HEAPF32[$4_1 >> 2])) + Math_fround($12_1 * Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]))) + Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]))) + Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]));
    label$10 : {
     if (($28_1 | 0) != (HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0)) {
      break label$10
     }
     $34_1 = $28_1 ? $28_1 << 1 | 0 : 1;
     if (($28_1 | 0) >= ($34_1 | 0)) {
      break label$10
     }
     label$11 : {
      label$12 : {
       if ($34_1) {
        break label$12
       }
       $35_1 = 0;
       break label$11;
      }
      $35_1 = $79($34_1 << 4 | 0 | 0, 16 | 0) | 0;
      $28_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
     }
     label$13 : {
      if (($28_1 | 0) < (1 | 0)) {
       break label$13
      }
      $0_1 = 0;
      label$14 : while (1) {
       $30_1 = $35_1 + $0_1 | 0;
       $18_1 = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + $0_1 | 0;
       i64toi32_i32$2 = $18_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $323_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $30_1;
       HEAP32[i64toi32_i32$0 >> 2] = $323_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $328_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $30_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $328_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $0_1 = $0_1 + 16 | 0;
       $28_1 = $28_1 + -1 | 0;
       if ($28_1) {
        continue label$14
       }
       break label$14;
      };
     }
     label$15 : {
      $0_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$15
      }
      label$16 : {
       if (!(HEAPU8[($7_1 + 16 | 0) >> 0] | 0)) {
        break label$16
       }
       $80($0_1 | 0);
      }
      HEAP32[($7_1 + 12 | 0) >> 2] = 0;
     }
     HEAP32[($7_1 + 12 | 0) >> 2] = $35_1;
     HEAP8[($7_1 + 16 | 0) >> 0] = 1;
     HEAP32[($7_1 + 8 | 0) >> 2] = $34_1;
     $28_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    }
    $0_1 = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) + ($28_1 << 4 | 0) | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = 0;
    HEAPF32[($0_1 + 8 | 0) >> 2] = $29_1;
    HEAPF32[($0_1 + 4 | 0) >> 2] = $14_1;
    HEAPF32[$0_1 >> 2] = $11_1;
    $28_1 = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($7_1 + 4 | 0) >> 2] = $28_1;
    $33_1 = $33_1 + 1 | 0;
    if (($33_1 | 0) != ($31_1 | 0)) {
     continue label$9
    }
    break label$9;
   };
  }
  label$17 : {
   if (($17_1 | 0) <= (-1 | 0)) {
    break label$17
   }
   $579($10_1 + 16 | 0 | 0, $1_1 | 0, $3_1 | 0, $7_1 | 0, $8_1 | 0, Math_fround($5_1), Math_fround($6_1), $9_1 | 0);
  }
  global$0 = $10_1 + 32 | 0;
 }
 
 function $581($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $582($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = 15312;
  return $0_1 | 0;
 }
 
 function $583($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8_1 = Math_fround(0), $22_1 = 0, $11_1 = 0, $14_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $23_1 = 0, $24_1 = 0, $21_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $81_1 = 0, $87_1 = 0, $93_1 = 0, $98_1 = 0, $103_1 = 0, $107_1 = 0, $110_1 = 0, $113_1 = 0, $116_1 = 0, $119_1 = 0, $124_1 = 0, $128_1 = 0, $133_1 = 0, $137_1 = 0, $141_1 = 0, $145_1 = 0, $156_1 = 0, $159_1 = 0, $318_1 = 0, $322_1 = 0, $325_1 = 0, $330_1 = 0, $336_1 = 0, $339_1 = 0, $375_1 = 0, $389_1 = 0;
  $6_1 = global$0 - 288 | 0;
  global$0 = $6_1;
  $555(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $7_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
  $11_1 = $1_1 + 56 | 0;
  $12_1 = Math_fround(HEAPF32[$11_1 >> 2]);
  $13_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
  $14_1 = $3_1 + 56 | 0;
  $15_1 = Math_fround(HEAPF32[$14_1 >> 2]);
  $16_1 = Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]);
  HEAP8[($6_1 + 264 | 0) >> 0] = 0;
  HEAP32[($6_1 + 260 | 0) >> 2] = 1566444395;
  HEAP32[($6_1 + 224 | 0) >> 2] = 15364;
  $21_1 = $563($6_1 + 144 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $81_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 8 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $87_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($6_1 + 8 | 0) + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $87_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $93_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 8 | 0) + 40 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $93_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $11_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $98_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($6_1 + 8 | 0) + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $98_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $103_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 80 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $103_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($6_1 + 136 | 0) >> 2] = 1566444395;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $107_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $107_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $110_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $110_1;
  HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $113_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = $113_1;
  HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $116_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = $116_1;
  HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $119_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = $119_1;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $124_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 96 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $124_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $128_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 88 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $128_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $133_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 112 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $133_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $137_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 104 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $137_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $14_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $141_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 128 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $141_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $145_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 120 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $145_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $565($21_1 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0, 0 | 0, 0 | 0);
  i64toi32_i32$2 = $6_1 + 252 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $156_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 272 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $156_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 244 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 248 | 0) >> 2] | 0;
  $159_1 = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$2;
  HEAP32[(i64toi32_i32$1 + 272 | 0) >> 2] = $159_1;
  HEAP32[(i64toi32_i32$1 + 276 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if (HEAPU8[(i64toi32_i32$1 + 264 | 0) >> 0] | 0) {
     break label$2
    }
    $22_1 = 0;
    break label$1;
   }
   $12_1 = Math_fround(Math_fround($13_1 - $12_1) - Math_fround($16_1 - $15_1));
   $10_1 = Math_fround(Math_fround($8_1 - $7_1) - Math_fround($10_1 - $9_1));
   $13_1 = Math_fround(Math_fround($18_1 - $17_1) - Math_fround($20_1 - $19_1));
   $0_1 = HEAP32[(($6_1 + 224 | 0) + 8 | 0) >> 2] | 0;
   $11_1 = HEAP32[($6_1 + 236 | 0) >> 2] | 0;
   $14_1 = HEAP32[($6_1 + 228 | 0) >> 2] | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      $8_1 = Math_fround(HEAPF32[($6_1 + 260 | 0) >> 2]);
      if (!($8_1 > Math_fround(1.0000000474974513e-03) ^ 1 | 0)) {
       break label$5
      }
      $8_1 = Math_fround(HEAPF32[($6_1 + 240 | 0) >> 2]);
      $7_1 = Math_fround(0.0);
      break label$4;
     }
     $23_1 = $6_1 + 244 | 0;
     $24_1 = 33;
     $9_1 = Math_fround(0.0);
     label$6 : while (1) {
      label$7 : {
       $24_1 = $24_1 + -1 | 0;
       if ($24_1) {
        break label$7
       }
       $22_1 = 0;
       break label$1;
      }
      label$8 : {
       $7_1 = Math_fround($9_1 - Math_fround($8_1 / Math_fround(Math_fround($12_1 * (wasm2js_scratch_store_i32(0, $11_1), wasm2js_scratch_load_f32())) + Math_fround(Math_fround($10_1 * (wasm2js_scratch_store_i32(0, $0_1), wasm2js_scratch_load_f32())) + Math_fround($13_1 * (wasm2js_scratch_store_i32(0, $14_1), wasm2js_scratch_load_f32()))))));
       if (!($7_1 <= $9_1)) {
        break label$8
       }
       $22_1 = 0;
       break label$1;
      }
      label$9 : {
       if (!($7_1 < Math_fround(0.0))) {
        break label$9
       }
       $22_1 = 0;
       break label$1;
      }
      label$10 : {
       if (!($7_1 > Math_fround(1.0))) {
        break label$10
       }
       $22_1 = 0;
       break label$1;
      }
      FUNCTION_TABLE[HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0]($5_1, $7_1);
      $8_1 = Math_fround(Math_fround(1.0) - $7_1);
      HEAPF32[($6_1 + 56 | 0) >> 2] = Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2])) + Math_fround($7_1 * Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2])));
      HEAPF32[($6_1 + 60 | 0) >> 2] = Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2])) + Math_fround($7_1 * Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2])));
      HEAPF32[($6_1 + 64 | 0) >> 2] = Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2])) + Math_fround($7_1 * Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2])));
      HEAPF32[($6_1 + 120 | 0) >> 2] = Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2])) + Math_fround($7_1 * Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2])));
      HEAPF32[($6_1 + 124 | 0) >> 2] = Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2])) + Math_fround($7_1 * Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2])));
      HEAPF32[($6_1 + 128 | 0) >> 2] = Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2])) + Math_fround($7_1 * Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2])));
      $22_1 = 0;
      $565($21_1 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0, 0 | 0, 0 | 0);
      if (!(HEAPU8[($6_1 + 264 | 0) >> 0] | 0)) {
       break label$1
      }
      label$11 : {
       $8_1 = Math_fround(HEAPF32[($6_1 + 260 | 0) >> 2]);
       if ($8_1 < Math_fround(0.0) ^ 1 | 0) {
        break label$11
       }
       HEAPF32[($5_1 + 164 | 0) >> 2] = $7_1;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 228 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 232 | 0) >> 2] | 0;
       $318_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $5_1;
       HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] = $318_1;
       HEAP32[(i64toi32_i32$0 + 136 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 236 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 240 | 0) >> 2] | 0;
       $322_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $5_1 + 140 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $322_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $23_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $325_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $5_1;
       HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = $325_1;
       HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $330_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $5_1 + 156 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $330_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       break label$3;
      }
      i64toi32_i32$2 = $23_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $336_1 = i64toi32_i32$0;
      i64toi32_i32$0 = ($6_1 + 272 | 0) + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $336_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $23_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $339_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $6_1;
      HEAP32[(i64toi32_i32$1 + 272 | 0) >> 2] = $339_1;
      HEAP32[(i64toi32_i32$1 + 276 | 0) >> 2] = i64toi32_i32$0;
      $14_1 = HEAP32[(i64toi32_i32$1 + 228 | 0) >> 2] | 0;
      $0_1 = HEAP32[(i64toi32_i32$1 + 232 | 0) >> 2] | 0;
      $11_1 = HEAP32[(i64toi32_i32$1 + 236 | 0) >> 2] | 0;
      $9_1 = $7_1;
      if ($8_1 > Math_fround(1.0000000474974513e-03)) {
       continue label$6
      }
      break label$6;
     };
     $8_1 = Math_fround(HEAPF32[($6_1 + 240 | 0) >> 2]);
    }
    $22_1 = 0;
    if (Math_fround(Math_fround($12_1 * (wasm2js_scratch_store_i32(0, $11_1), wasm2js_scratch_load_f32())) + Math_fround(Math_fround($10_1 * (wasm2js_scratch_store_i32(0, $0_1), wasm2js_scratch_load_f32())) + Math_fround($13_1 * (wasm2js_scratch_store_i32(0, $14_1), wasm2js_scratch_load_f32())))) >= Math_fround(-Math_fround(HEAPF32[($5_1 + 172 | 0) >> 2]))) {
     break label$1
    }
    HEAP32[($5_1 + 132 | 0) >> 2] = $14_1;
    HEAPF32[($5_1 + 164 | 0) >> 2] = $7_1;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 272 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 276 | 0) >> 2] | 0;
    $375_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = $375_1;
    HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] = i64toi32_i32$1;
    HEAPF32[(i64toi32_i32$0 + 144 | 0) >> 2] = $8_1;
    HEAP32[(i64toi32_i32$0 + 140 | 0) >> 2] = $11_1;
    HEAP32[(i64toi32_i32$0 + 136 | 0) >> 2] = $0_1;
    i64toi32_i32$2 = i64toi32_i32$2 + 280 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $389_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1 + 156 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $389_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   }
   $22_1 = 1;
  }
  global$0 = $6_1 + 288 | 0;
  return $22_1 | 0;
 }
 
 function $584($0_1) {
  $0_1 = $0_1 | 0;
  $581($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $585($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $586($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $587($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $588($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $17_1 = 0, $20_1 = 0, $25_1 = 0;
  label$1 : {
   if (Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]) > $3_1 ^ 1 | 0) {
    break label$1
   }
   HEAP8[($0_1 + 40 | 0) >> 0] = 1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $12_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $12_1;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 12 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $17_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = $20_1;
   HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $25_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 28 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $25_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAPF32[($0_1 + 36 | 0) >> 2] = $3_1;
  }
 }
 
 function $589($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 3;
  HEAP32[$0_1 >> 2] = 15424;
  HEAP8[($0_1 + 4 | 0) >> 0] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $590($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $591($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $592($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 15444;
  label$1 : {
   if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $1_1);
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   label$3 : {
    if (!(HEAPU8[($0_1 + 48 | 0) >> 0] | 0)) {
     break label$3
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 48 | 0) >> 0] = 1;
  label$4 : {
   $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$4
   }
   label$5 : {
    if (!(HEAPU8[($0_1 + 28 | 0) >> 0] | 0)) {
     break label$5
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 28 | 0) >> 0] = 1;
  $73($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $593($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 15444;
  label$1 : {
   if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $1_1);
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   label$3 : {
    if (!(HEAPU8[($0_1 + 48 | 0) >> 0] | 0)) {
     break label$3
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 48 | 0) >> 0] = 1;
  label$4 : {
   $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$4
   }
   label$5 : {
    if (!(HEAPU8[($0_1 + 28 | 0) >> 0] | 0)) {
     break label$5
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 24 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 28 | 0) >> 0] = 1;
  $73($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $594($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $6_1 = 0, $10_1 = Math_fround(0), $8_1 = 0, $11_1 = Math_fround(0), $25_1 = Math_fround(0), $7_1 = 0, $19_1 = Math_fround(0), $9_1 = 0, $20_1 = Math_fround(0), $24_1 = Math_fround(0), $16_1 = 0, $26_1 = Math_fround(0), $18_1 = 0, $60_1 = Math_fround(0), $12_1 = 0, $61_1 = Math_fround(0), $62_1 = Math_fround(0), $63_1 = Math_fround(0), $17_1 = 0, $23_1 = Math_fround(0), $21_1 = Math_fround(0), $65_1 = Math_fround(0), $22_1 = Math_fround(0), $32_1 = 0, $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $34_1 = Math_fround(0), $64_1 = Math_fround(0), $36_1 = Math_fround(0), $38_1 = 0, $55_1 = Math_fround(0), $56_1 = Math_fround(0), $57_1 = Math_fround(0), $58_1 = Math_fround(0), $59_1 = Math_fround(0), $35_1 = Math_fround(0), $33_1 = 0, $39_1 = 0, $40_1 = 0, $66_1 = Math_fround(0), $67_1 = Math_fround(0), $27_1 = Math_fround(0), $13_1 = 0, $13$hi = 0, $14_1 = 0, $14$hi = 0, $37_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $282_1 = Math_fround(0), $393_1 = 0, $401_1 = 0, $409_1 = 0, $15_1 = 0, $15$hi = 0, $417_1 = 0, $426_1 = 0, $433_1 = 0, $436_1 = 0, $441_1 = 0, $446_1 = 0, $451_1 = 0, $456_1 = 0, $461_1 = 0, $466_1 = 0, $537_1 = 0, $540_1 = 0, $583_1 = 0, $589_1 = 0, $842_1 = 0, $847_1 = 0, $979_1 = 0, $984_1 = 0, $1116_1 = 0, $1122_1 = 0, $1303 = 0, $1313 = 0, $1323 = 0, $1333 = 0, $1336 = 0, $1339 = 0, $1342 = 0, $1345 = 0, $41_1 = Math_fround(0), $1797 = 0, $1802 = 0, $1807 = 0, $1810 = 0, $1815 = 0, $1818 = 0, $1823 = 0, $1826 = 0, $1836 = 0, $1841 = 0, $1848 = 0, $1853 = 0, $1858 = 0, $1861 = 0, $2203 = 0, $2206 = 0, $2209 = 0, $2212 = 0, $2218 = 0, $2223 = 0, $2228 = 0, $2233 = 0, $2244 = 0, $2247 = 0, $2252 = 0, $2255 = 0, $2260 = 0, $2263 = 0, $2268 = 0, $2271 = 0, $2275 = 0, $2278 = 0, $2283 = 0, $2286 = 0, $2291 = 0, $2294 = 0, $2299 = 0, $2302 = 0;
  $5_1 = global$0 - 928 | 0;
  global$0 = $5_1;
  label$1 : {
   $6_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if ($6_1) {
    break label$1
   }
   $7_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($7_1, HEAP32[($1_1 + 8 | 0) >> 2] | 0, HEAP32[($2_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP8[($0_1 + 52 | 0) >> 0] = 1;
   HEAP32[($0_1 + 56 | 0) >> 2] = $6_1;
  }
  HEAP32[($4_1 + 4 | 0) >> 2] = $6_1;
  $7_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $9_1 = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) + -8 | 0;
    if ($9_1 >>> 0 > 2 >>> 0) {
     break label$3
    }
    label$4 : {
     switch ($9_1 | 0) {
     case 2:
      $9_1 = (HEAP32[($7_1 + 4 | 0) >> 2] | 0) + -8 | 0;
      if ($9_1 >>> 0 > 2 >>> 0) {
       break label$3
      }
      label$6 : {
       switch ($9_1 | 0) {
       case 2:
        $10_1 = Math_fround($217($6_1 | 0));
        label$8 : {
         $6_1 = $8_1 + 32 | 0;
         $0_1 = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
         $8_1 = $7_1 + 32 | 0;
         $7_1 = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
         $11_1 = Math_fround($595($5_1 + 432 | 0 | 0, $5_1 + 8 | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + ($0_1 << 2 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + ((($0_1 + 2 | 0 | 0) % (3 | 0) | 0) << 2 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($8_1 + ($7_1 << 2 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($8_1 + ((($7_1 + 2 | 0 | 0) % (3 | 0) | 0) << 2 | 0) | 0) >> 2])), $0_1 | 0, $7_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, Math_fround($10_1)));
         if ($11_1 < $10_1 ^ 1 | 0) {
          break label$8
         }
         FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($4_1, $5_1 + 432 | 0, $5_1 + 8 | 0, $11_1);
        }
        $0_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
        if (!(HEAP32[($0_1 + 780 | 0) >> 2] | 0)) {
         break label$2
        }
        label$9 : {
         $8_1 = HEAP32[($0_1 + 772 | 0) >> 2] | 0;
         $7_1 = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
         if (($8_1 | 0) == ($7_1 | 0)) {
          break label$9
         }
         $219($0_1 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0, $7_1 + 4 | 0 | 0);
         break label$2;
        }
        $219($0_1 | 0, $8_1 + 4 | 0 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
        break label$2;
       case 1:
        break label$3;
       default:
        break label$6;
       };
      }
      $10_1 = Math_fround($217($6_1 | 0));
      label$10 : {
       $6_1 = $8_1 + 32 | 0;
       $0_1 = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
       $11_1 = Math_fround($595($5_1 + 432 | 0 | 0, $5_1 + 8 | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + ($0_1 << 2 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($6_1 + ((($0_1 + 2 | 0 | 0) % (3 | 0) | 0) << 2 | 0) | 0) >> 2])), Math_fround(Math_fround(0.0)), Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]))), $0_1 | 0, 1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, Math_fround($10_1)));
       if ($11_1 < $10_1 ^ 1 | 0) {
        break label$10
       }
       FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($4_1, $5_1 + 432 | 0, $5_1 + 8 | 0, $11_1);
      }
      $0_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      if (!(HEAP32[($0_1 + 780 | 0) >> 2] | 0)) {
       break label$2
      }
      label$11 : {
       $8_1 = HEAP32[($0_1 + 772 | 0) >> 2] | 0;
       $7_1 = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       if (($8_1 | 0) == ($7_1 | 0)) {
        break label$11
       }
       $219($0_1 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0, $7_1 + 4 | 0 | 0);
       break label$2;
      }
      $219($0_1 | 0, $8_1 + 4 | 0 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
      break label$2;
     case 1:
      break label$3;
     default:
      break label$4;
     };
    }
    if ((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) != (10 | 0)) {
     break label$3
    }
    $10_1 = Math_fround($217($6_1 | 0));
    label$12 : {
     $282_1 = Math_fround(Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]));
     $8_1 = $7_1 + 32 | 0;
     $0_1 = HEAP32[($7_1 + 56 | 0) >> 2] | 0;
     $11_1 = Math_fround($595($5_1 + 432 | 0 | 0, $5_1 + 8 | 0 | 0, Math_fround(Math_fround(0.0)), Math_fround($282_1), Math_fround(Math_fround(HEAPF32[($8_1 + ($0_1 << 2 | 0) | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($8_1 + ((($0_1 + 2 | 0 | 0) % (3 | 0) | 0) << 2 | 0) | 0) >> 2])), 1 | 0, $0_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, Math_fround($10_1)));
     if ($11_1 < $10_1 ^ 1 | 0) {
      break label$12
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($4_1, $5_1 + 432 | 0, $5_1 + 8 | 0, $11_1);
    }
    $0_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    if (!(HEAP32[($0_1 + 780 | 0) >> 2] | 0)) {
     break label$2
    }
    label$13 : {
     $8_1 = HEAP32[($0_1 + 772 | 0) >> 2] | 0;
     $7_1 = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     if (($8_1 | 0) == ($7_1 | 0)) {
      break label$13
     }
     $219($0_1 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0, $7_1 + 4 | 0 | 0);
     break label$2;
    }
    $219($0_1 | 0, $8_1 + 4 | 0 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
    break label$2;
   }
   HEAP32[($5_1 + 920 | 0) >> 2] = 1566444395;
   HEAP8[($5_1 + 764 | 0) >> 0] = 0;
   HEAP32[($5_1 + 740 | 0) >> 2] = 953267991;
   $12_1 = $563($5_1 + 352 | 0 | 0, $8_1 | 0, $7_1 | 0, $5_1 + 432 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($12_1 + 32 | 0) >> 2] = $7_1;
   HEAP32[($12_1 + 28 | 0) >> 2] = $8_1;
   $10_1 = Math_fround(Math_fround(Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($8_1)) + Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($7_1))) + Math_fround($217(HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0))) + Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]));
   HEAPF32[($5_1 + 920 | 0) >> 2] = Math_fround($10_1 * $10_1);
   $6_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $6_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $393_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 792 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $393_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $13_1 = i64toi32_i32$1;
   $13$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $401_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 792 | 0) + 24 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $401_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $14_1 = i64toi32_i32$1;
   $14$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $409_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 792 | 0) + 40 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $409_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   $15_1 = i64toi32_i32$1;
   $15$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $417_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 792 | 0) + 56 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $417_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$0 = $5_1;
   HEAP32[(i64toi32_i32$0 + 792 | 0) >> 2] = $13_1;
   HEAP32[(i64toi32_i32$0 + 796 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $14$hi;
   HEAP32[(i64toi32_i32$0 + 808 | 0) >> 2] = $14_1;
   HEAP32[(i64toi32_i32$0 + 812 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $15$hi;
   HEAP32[(i64toi32_i32$0 + 824 | 0) >> 2] = $15_1;
   HEAP32[(i64toi32_i32$0 + 828 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $426_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1;
   HEAP32[(i64toi32_i32$1 + 840 | 0) >> 2] = $426_1;
   HEAP32[(i64toi32_i32$1 + 844 | 0) >> 2] = i64toi32_i32$0;
   $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $6_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $433_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1 + 864 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $433_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $436_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1;
   HEAP32[(i64toi32_i32$1 + 856 | 0) >> 2] = $436_1;
   HEAP32[(i64toi32_i32$1 + 860 | 0) >> 2] = i64toi32_i32$0;
   $9_1 = i64toi32_i32$1 + 872 | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $441_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $9_1;
   HEAP32[i64toi32_i32$0 >> 2] = $441_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $446_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1 + 880 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $446_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $6_1 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $451_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1 + 896 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $451_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $16_1 = $5_1 + 888 | 0;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   $456_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $16_1;
   HEAP32[i64toi32_i32$1 >> 2] = $456_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $17_1 = $5_1 + 904 | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $461_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $17_1;
   HEAP32[i64toi32_i32$0 >> 2] = $461_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $466_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1 + 912 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $466_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   label$14 : {
    $6_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
    if (($6_1 | 0) > (6 | 0)) {
     break label$14
    }
    $18_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    if (($18_1 | 0) > (6 | 0)) {
     break label$14
    }
    HEAP32[($5_1 + 344 | 0) >> 2] = 15564;
    $10_1 = Math_fround(0.0);
    $11_1 = Math_fround(0.0);
    label$15 : {
     if (!$6_1) {
      break label$15
     }
     $11_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($8_1));
     $18_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    }
    label$16 : {
     if (!$18_1) {
      break label$16
     }
     $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($7_1));
    }
    HEAP8[($5_1 + 44 | 0) >> 0] = 0;
    HEAPF32[($5_1 + 36 | 0) >> 2] = $10_1;
    HEAPF32[($5_1 + 32 | 0) >> 2] = $11_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = 15740;
    if (!(HEAP32[($8_1 + 56 | 0) >> 2] | 0)) {
     break label$14
    }
    label$17 : {
     if (!(HEAP32[($7_1 + 56 | 0) >> 2] | 0)) {
      break label$17
     }
     $10_1 = Math_fround($217(HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0));
     label$18 : {
      label$19 : {
       label$20 : {
        if (!(HEAPU8[($3_1 + 24 | 0) >> 0] | 0)) {
         break label$20
        }
        $11_1 = Math_fround(-1000000015047466219876688.0e6);
        if ($578(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, $5_1 + 248 | 0 | 0, $4_1 | 0) | 0) {
         break label$19
        }
        break label$18;
       }
       $565($12_1 | 0, $5_1 + 792 | 0 | 0, $5_1 + 8 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, 0 | 0);
       i64toi32_i32$2 = $5_1 + 24 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $537_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $5_1 + 256 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $537_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
       $540_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $5_1;
       HEAP32[(i64toi32_i32$1 + 248 | 0) >> 2] = $540_1;
       HEAP32[(i64toi32_i32$1 + 252 | 0) >> 2] = i64toi32_i32$0;
       $11_1 = Math_fround(HEAPF32[(i64toi32_i32$1 + 40 | 0) >> 2]);
       if ($11_1 < Math_fround(0.0) ^ 1 | 0) {
        break label$18
       }
       if (!((HEAPU8[($5_1 + 44 | 0) >> 0] | 0) & 255 | 0)) {
        break label$18
       }
      }
      $12_1 = $0_1 + 12 | 0;
      label$21 : {
       $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if (($6_1 | 0) > (-1 | 0)) {
        break label$21
       }
       label$22 : {
        if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
         break label$22
        }
        label$23 : {
         $9_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
         if (!$9_1) {
          break label$23
         }
         label$24 : {
          if (!(HEAPU8[($0_1 + 28 | 0) >> 0] | 0)) {
           break label$24
          }
          $80($9_1 | 0);
         }
         HEAP32[($0_1 + 24 | 0) >> 2] = 0;
        }
        i64toi32_i32$1 = $0_1;
        i64toi32_i32$0 = 0;
        HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
        HEAP8[(i64toi32_i32$1 + 28 | 0) >> 0] = 1;
       }
       $9_1 = $6_1 << 4 | 0;
       label$25 : while (1) {
        $16_1 = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $9_1 | 0;
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$0 = HEAP32[($5_1 + 328 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($5_1 + 332 | 0) >> 2] | 0;
        $583_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $16_1;
        HEAP32[i64toi32_i32$0 >> 2] = $583_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = ($5_1 + 328 | 0) + 8 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $589_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $16_1 + 8 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $589_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        $9_1 = $9_1 + 16 | 0;
        $16_1 = $6_1 + 1 | 0;
        $17_1 = $16_1 >>> 0 >= $6_1 >>> 0;
        $6_1 = $16_1;
        if ($17_1) {
         continue label$25
        }
        break label$25;
       };
      }
      HEAP32[($0_1 + 16 | 0) >> 2] = 0;
      $580($5_1 + 248 | 0 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0, Math_fround(Math_fround($11_1 - $10_1)), Math_fround($10_1), $12_1 | 0, $0_1 + 32 | 0 | 0, $4_1 | 0);
     }
     if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
      break label$2
     }
     $0_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     if (!(HEAP32[($0_1 + 780 | 0) >> 2] | 0)) {
      break label$2
     }
     label$26 : {
      $8_1 = HEAP32[($0_1 + 772 | 0) >> 2] | 0;
      $7_1 = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      if (($8_1 | 0) == ($7_1 | 0)) {
       break label$26
      }
      $219($0_1 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0, $7_1 + 4 | 0 | 0);
      break label$2;
     }
     $219($0_1 | 0, $8_1 + 4 | 0 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
     break label$2;
    }
    if ((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$14
    }
    HEAP32[($5_1 + 252 | 0) >> 2] = 0;
    $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    $19_1 = Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2]);
    $23_1 = Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]);
    $24_1 = Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($7_1 + 68 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($7_1 + 60 | 0) >> 2]);
    $25_1 = Math_fround(HEAPF32[($7_1 + 64 | 0) >> 2]);
    $26_1 = Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2]);
    $27_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
    $28_1 = Math_fround(HEAPF32[($6_1 + 48 | 0) >> 2]);
    $29_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
    $30_1 = Math_fround(HEAPF32[$6_1 >> 2]);
    $31_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
    $6_1 = $79(16 | 0, 16 | 0) | 0;
    HEAP32[($5_1 + 256 | 0) >> 2] = 1;
    HEAP32[($5_1 + 260 | 0) >> 2] = $6_1;
    HEAP8[($5_1 + 264 | 0) >> 0] = 1;
    HEAPF32[$6_1 >> 2] = Math_fround($28_1 + Math_fround(Math_fround(Math_fround($11_1 * $30_1) + Math_fround($25_1 * $31_1)) + Math_fround($10_1 * $29_1)));
    HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($11_1 * $27_1) + Math_fround($25_1 * $23_1)) + Math_fround($10_1 * $24_1)));
    HEAP32[($6_1 + 12 | 0) >> 2] = 0;
    HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround($19_1 + Math_fround(Math_fround(Math_fround($11_1 * $26_1) + Math_fround($25_1 * $20_1)) + Math_fround($10_1 * $21_1)));
    $9_1 = (HEAP32[($5_1 + 252 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($5_1 + 252 | 0) >> 2] = $9_1;
    $10_1 = Math_fround(HEAPF32[($7_1 + 76 | 0) >> 2]);
    $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    $11_1 = Math_fround(HEAPF32[($7_1 + 80 | 0) >> 2]);
    $25_1 = Math_fround(HEAPF32[($7_1 + 84 | 0) >> 2]);
    $19_1 = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]))) + Math_fround($25_1 * Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2]))) + Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]));
    $20_1 = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]))) + Math_fround($25_1 * Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]))) + Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2]));
    $10_1 = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * Math_fround(HEAPF32[$6_1 >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]))) + Math_fround($25_1 * Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]))) + Math_fround(HEAPF32[($6_1 + 48 | 0) >> 2]));
    label$27 : {
     if (($9_1 | 0) != (HEAP32[($5_1 + 256 | 0) >> 2] | 0 | 0)) {
      break label$27
     }
     $32_1 = $9_1 ? $9_1 << 1 | 0 : 1;
     if (($9_1 | 0) >= ($32_1 | 0)) {
      break label$27
     }
     label$28 : {
      label$29 : {
       if ($32_1) {
        break label$29
       }
       $18_1 = 0;
       break label$28;
      }
      $18_1 = $79($32_1 << 4 | 0 | 0, 16 | 0) | 0;
      $9_1 = HEAP32[($5_1 + 252 | 0) >> 2] | 0;
     }
     label$30 : {
      if (($9_1 | 0) < (1 | 0)) {
       break label$30
      }
      $6_1 = 0;
      label$31 : while (1) {
       $16_1 = $18_1 + $6_1 | 0;
       $17_1 = (HEAP32[($5_1 + 260 | 0) >> 2] | 0) + $6_1 | 0;
       i64toi32_i32$2 = $17_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $842_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $16_1;
       HEAP32[i64toi32_i32$0 >> 2] = $842_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $847_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $16_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $847_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $6_1 = $6_1 + 16 | 0;
       $9_1 = $9_1 + -1 | 0;
       if ($9_1) {
        continue label$31
       }
       break label$31;
      };
     }
     label$32 : {
      $6_1 = HEAP32[($5_1 + 260 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$32
      }
      label$33 : {
       if (!(HEAPU8[($5_1 + 264 | 0) >> 0] | 0)) {
        break label$33
       }
       $80($6_1 | 0);
      }
      HEAP32[($5_1 + 260 | 0) >> 2] = 0;
     }
     HEAP32[($5_1 + 260 | 0) >> 2] = $18_1;
     HEAP8[($5_1 + 264 | 0) >> 0] = 1;
     HEAP32[($5_1 + 256 | 0) >> 2] = $32_1;
     $9_1 = HEAP32[($5_1 + 252 | 0) >> 2] | 0;
    }
    $6_1 = (HEAP32[($5_1 + 260 | 0) >> 2] | 0) + ($9_1 << 4 | 0) | 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = 0;
    HEAPF32[($6_1 + 8 | 0) >> 2] = $19_1;
    HEAPF32[($6_1 + 4 | 0) >> 2] = $20_1;
    HEAPF32[$6_1 >> 2] = $10_1;
    $9_1 = (HEAP32[($5_1 + 252 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($5_1 + 252 | 0) >> 2] = $9_1;
    $10_1 = Math_fround(HEAPF32[($7_1 + 92 | 0) >> 2]);
    $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    $11_1 = Math_fround(HEAPF32[($7_1 + 96 | 0) >> 2]);
    $25_1 = Math_fround(HEAPF32[($7_1 + 100 | 0) >> 2]);
    $19_1 = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * Math_fround(HEAPF32[$6_1 >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]))) + Math_fround($25_1 * Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]))) + Math_fround(HEAPF32[($6_1 + 48 | 0) >> 2]));
    $20_1 = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]))) + Math_fround($25_1 * Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2]))) + Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]));
    $10_1 = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]))) + Math_fround($25_1 * Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]))) + Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2]));
    label$34 : {
     if (($9_1 | 0) != (HEAP32[($5_1 + 256 | 0) >> 2] | 0 | 0)) {
      break label$34
     }
     $18_1 = $9_1 ? $9_1 << 1 | 0 : 1;
     if (($9_1 | 0) >= ($18_1 | 0)) {
      break label$34
     }
     label$35 : {
      label$36 : {
       if ($18_1) {
        break label$36
       }
       $17_1 = 0;
       break label$35;
      }
      $17_1 = $79($18_1 << 4 | 0 | 0, 16 | 0) | 0;
      $9_1 = HEAP32[($5_1 + 252 | 0) >> 2] | 0;
     }
     label$37 : {
      if (($9_1 | 0) < (1 | 0)) {
       break label$37
      }
      $6_1 = 0;
      label$38 : while (1) {
       $2_1 = $17_1 + $6_1 | 0;
       $16_1 = (HEAP32[($5_1 + 260 | 0) >> 2] | 0) + $6_1 | 0;
       i64toi32_i32$2 = $16_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $979_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $2_1;
       HEAP32[i64toi32_i32$0 >> 2] = $979_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $984_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $2_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $984_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $6_1 = $6_1 + 16 | 0;
       $9_1 = $9_1 + -1 | 0;
       if ($9_1) {
        continue label$38
       }
       break label$38;
      };
     }
     label$39 : {
      $6_1 = HEAP32[($5_1 + 260 | 0) >> 2] | 0;
      if (!$6_1) {
       break label$39
      }
      label$40 : {
       if (!(HEAPU8[($5_1 + 264 | 0) >> 0] | 0)) {
        break label$40
       }
       $80($6_1 | 0);
      }
      HEAP32[($5_1 + 260 | 0) >> 2] = 0;
     }
     HEAP32[($5_1 + 260 | 0) >> 2] = $17_1;
     HEAP8[($5_1 + 264 | 0) >> 0] = 1;
     HEAP32[($5_1 + 256 | 0) >> 2] = $18_1;
     $9_1 = HEAP32[($5_1 + 252 | 0) >> 2] | 0;
    }
    $6_1 = (HEAP32[($5_1 + 260 | 0) >> 2] | 0) + ($9_1 << 4 | 0) | 0;
    HEAP32[($6_1 + 12 | 0) >> 2] = 0;
    HEAPF32[($6_1 + 8 | 0) >> 2] = $20_1;
    HEAPF32[($6_1 + 4 | 0) >> 2] = $10_1;
    HEAPF32[$6_1 >> 2] = $19_1;
    HEAP32[($5_1 + 252 | 0) >> 2] = (HEAP32[($5_1 + 252 | 0) >> 2] | 0) + 1 | 0;
    $19_1 = Math_fround($217(HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0));
    $565($12_1 | 0, $5_1 + 792 | 0 | 0, $5_1 + 344 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, 0 | 0);
    label$41 : {
     $10_1 = Math_fround(HEAPF32[($12_1 + 4 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($12_1 + 8 | 0) >> 2]);
     $25_1 = Math_fround(HEAPF32[($12_1 + 12 | 0) >> 2]);
     $20_1 = Math_fround(Math_fround(Math_fround($10_1 * $10_1) + Math_fround($11_1 * $11_1)) + Math_fround($25_1 * $25_1));
     if ($20_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
      break label$41
     }
     HEAP32[($5_1 + 340 | 0) >> 2] = 0;
     $20_1 = Math_fround(Math_fround(1.0) / $20_1);
     HEAPF32[($5_1 + 336 | 0) >> 2] = Math_fround($25_1 * $20_1);
     HEAPF32[($5_1 + 332 | 0) >> 2] = Math_fround($11_1 * $20_1);
     HEAPF32[($5_1 + 328 | 0) >> 2] = Math_fround($10_1 * $20_1);
     $10_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($12_1 + 56 | 0) >> 2]) - Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($8_1))) - Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($7_1)));
     $16_1 = $0_1 + 32 | 0;
     label$42 : {
      $7_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
      if (($7_1 | 0) > (-1 | 0)) {
       break label$42
      }
      label$43 : {
       if ((HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
        break label$43
       }
       label$44 : {
        $6_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
        if (!$6_1) {
         break label$44
        }
        label$45 : {
         if (!(HEAPU8[($0_1 + 48 | 0) >> 0] | 0)) {
          break label$45
         }
         $80($6_1 | 0);
        }
        HEAP32[($0_1 + 44 | 0) >> 2] = 0;
       }
       i64toi32_i32$1 = $0_1;
       i64toi32_i32$0 = 0;
       HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$0;
       HEAP8[(i64toi32_i32$1 + 48 | 0) >> 0] = 1;
      }
      $6_1 = $7_1 << 4 | 0;
      label$46 : while (1) {
       $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + $6_1 | 0;
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$0 = HEAP32[($5_1 + 312 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($5_1 + 316 | 0) >> 2] | 0;
       $1116_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $2_1;
       HEAP32[i64toi32_i32$0 >> 2] = $1116_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = ($5_1 + 312 | 0) + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1122_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $2_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $1122_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $6_1 = $6_1 + 16 | 0;
       $2_1 = $7_1 + 1 | 0;
       $9_1 = $2_1 >>> 0 >= $7_1 >>> 0;
       $7_1 = $2_1;
       if ($9_1) {
        continue label$46
       }
       break label$46;
      };
     }
     HEAP32[($0_1 + 36 | 0) >> 2] = 0;
     $579($5_1 + 328 | 0 | 0, HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0, $5_1 + 248 | 0 | 0, $16_1 | 0, Math_fround(Math_fround($10_1 - $19_1)), Math_fround($19_1), $4_1 | 0);
    }
    label$47 : {
     if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
      break label$47
     }
     $0_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     if (!(HEAP32[($0_1 + 780 | 0) >> 2] | 0)) {
      break label$47
     }
     label$48 : {
      $8_1 = HEAP32[($0_1 + 772 | 0) >> 2] | 0;
      $7_1 = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      if (($8_1 | 0) == ($7_1 | 0)) {
       break label$48
      }
      $219($0_1 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0, $7_1 + 4 | 0 | 0);
      break label$47;
     }
     $219($0_1 | 0, $8_1 + 4 | 0 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
    }
    $0_1 = HEAP32[($5_1 + 260 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$2
    }
    label$49 : {
     if (!(HEAPU8[($5_1 + 264 | 0) >> 0] | 0)) {
      break label$49
     }
     $80($0_1 | 0);
    }
    HEAP32[($5_1 + 260 | 0) >> 2] = 0;
    break label$2;
   }
   $565($12_1 | 0, $5_1 + 792 | 0 | 0, $4_1 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, 0 | 0);
   label$50 : {
    if (!(HEAP32[($0_1 + 64 | 0) >> 2] | 0)) {
     break label$50
    }
    if ((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 780 | 0) >> 2] | 0 | 0) >= (HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0)) {
     break label$50
    }
    $10_1 = Math_fround(HEAPF32[($12_1 + 4 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($12_1 + 8 | 0) >> 2]);
    $25_1 = Math_fround(HEAPF32[($12_1 + 12 | 0) >> 2]);
    $19_1 = Math_fround(Math_fround(Math_fround($10_1 * $10_1) + Math_fround($11_1 * $11_1)) + Math_fround($25_1 * $25_1));
    if ($19_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
     break label$50
    }
    $6_1 = $5_1 + 856 | 0;
    $18_1 = $5_1 + 840 | 0;
    $32_1 = $5_1 + 824 | 0;
    $33_1 = $5_1 + 808 | 0;
    $19_1 = Math_fround(Math_fround(1.0) / $19_1);
    $34_1 = Math_fround($11_1 * $19_1);
    $35_1 = Math_fround($10_1 * $19_1);
    label$51 : {
     label$52 : {
      $36_1 = Math_fround($25_1 * $19_1);
      if (Math_fround(Math_abs($36_1)) > Math_fround(.7071067690849304) ^ 1 | 0) {
       break label$52
      }
      $11_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($36_1 * $36_1) + Math_fround($34_1 * $34_1)))));
      $10_1 = Math_fround($34_1 * $11_1);
      $11_1 = Math_fround(-Math_fround($36_1 * $11_1));
      $25_1 = Math_fround(0.0);
      break label$51;
     }
     $10_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($35_1 * $35_1) + Math_fround($34_1 * $34_1)))));
     $11_1 = Math_fround($35_1 * $10_1);
     $25_1 = Math_fround(-Math_fround($34_1 * $10_1));
     $10_1 = Math_fround(0.0);
    }
    $19_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($8_1));
    $20_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($7_1));
    $21_1 = Math_fround(HEAPF32[(0 + 2976 | 0) >> 2]);
    $37_1 = ($5_1 + 248 | 0) + 8 | 0;
    $38_1 = $19_1 < $20_1;
    $7_1 = $38_1 ? $5_1 + 792 | 0 : $6_1;
    i64toi32_i32$2 = $7_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1303 = i64toi32_i32$0;
    i64toi32_i32$0 = $37_1;
    HEAP32[i64toi32_i32$0 >> 2] = $1303;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $8_1 = $38_1 ? $33_1 : $9_1;
    i64toi32_i32$2 = $8_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1313 = i64toi32_i32$1;
    i64toi32_i32$1 = ($5_1 + 248 | 0) + 24 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $1313;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $39_1 = $38_1 ? $32_1 : $16_1;
    i64toi32_i32$2 = $39_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1323 = i64toi32_i32$0;
    i64toi32_i32$0 = ($5_1 + 248 | 0) + 40 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $1323;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $40_1 = $38_1 ? $18_1 : $17_1;
    i64toi32_i32$2 = $40_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1333 = i64toi32_i32$1;
    i64toi32_i32$1 = ($5_1 + 248 | 0) + 56 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $1333;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1336 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[(i64toi32_i32$0 + 248 | 0) >> 2] = $1336;
    HEAP32[(i64toi32_i32$0 + 252 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1339 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1;
    HEAP32[(i64toi32_i32$1 + 264 | 0) >> 2] = $1339;
    HEAP32[(i64toi32_i32$1 + 268 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $39_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1342 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[(i64toi32_i32$0 + 280 | 0) >> 2] = $1342;
    HEAP32[(i64toi32_i32$0 + 284 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $40_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1345 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1;
    HEAP32[(i64toi32_i32$1 + 296 | 0) >> 2] = $1345;
    HEAP32[(i64toi32_i32$1 + 300 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
    if (($8_1 | 0) < (1 | 0)) {
     break label$50
    }
    $23_1 = Math_fround(Math_fround(Math_min(Math_fround($21_1 / ($38_1 ? $19_1 : $20_1)), Math_fround(.39269909262657166))) * Math_fround(.5));
    $27_1 = Math_fround(Math_fround(Math_fround($25_1 * $25_1) + Math_fround($11_1 * $11_1)) + Math_fround($10_1 * $10_1));
    $19_1 = Math_fround(Math_fround($496(Math_fround($23_1))) / Math_fround(Math_sqrt($27_1)));
    $20_1 = Math_fround($10_1 * $19_1);
    $21_1 = Math_fround($11_1 * $19_1);
    $22_1 = Math_fround($25_1 * $19_1);
    $23_1 = Math_fround($497(Math_fround($23_1)));
    $41_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($36_1 * $36_1) + Math_fround(Math_fround($35_1 * $35_1) + Math_fround($34_1 * $34_1)))));
    $39_1 = $5_1 + 296 | 0;
    $40_1 = $5_1 + 224 | 0;
    $42_1 = $5_1 + 208 | 0;
    $43_1 = $5_1 + 280 | 0;
    $44_1 = $5_1 + 192 | 0;
    $45_1 = $5_1 + 264 | 0;
    $46_1 = $5_1 + 176 | 0;
    $47_1 = $5_1 + 160 | 0;
    $48_1 = $5_1 + 144 | 0;
    $49_1 = $5_1 + 128 | 0;
    $50_1 = $5_1 + 112 | 0;
    $51_1 = $5_1 + 96 | 0;
    $52_1 = $5_1 + 80 | 0;
    $53_1 = ($5_1 + 8 | 0) + 56 | 0;
    $54_1 = ($5_1 + 8 | 0) + 40 | 0;
    $7_1 = 0;
    label$53 : while (1) {
     label$54 : {
      if ($27_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
       break label$54
      }
      $19_1 = Math_fround(Math_fround(Math_fround(Math_fround(6.2831854820251465) / Math_fround($8_1 | 0)) * Math_fround($7_1 | 0)) * Math_fround(.5));
      $25_1 = Math_fround(Math_fround($496(Math_fround($19_1))) / $41_1);
      $10_1 = Math_fround($36_1 * $25_1);
      $11_1 = Math_fround($34_1 * $25_1);
      $25_1 = Math_fround($35_1 * $25_1);
      $19_1 = Math_fround($497(Math_fround($19_1)));
      label$55 : {
       label$56 : {
        if ($38_1 ^ 1 | 0) {
         break label$56
        }
        $8_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
        $28_1 = Math_fround(HEAPF32[$8_1 >> 2]);
        $29_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
        $30_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
        HEAP32[($5_1 + 804 | 0) >> 2] = 0;
        $31_1 = Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]);
        $55_1 = Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]);
        $56_1 = Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]);
        $57_1 = Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]);
        $58_1 = Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]);
        $59_1 = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
        HEAP32[($5_1 + 836 | 0) >> 2] = 0;
        HEAP32[($5_1 + 820 | 0) >> 2] = 0;
        $60_1 = Math_fround(Math_fround(Math_fround(Math_fround($21_1 * $19_1) - Math_fround($23_1 * $11_1)) - Math_fround($22_1 * $10_1)) + Math_fround($20_1 * $25_1));
        $61_1 = Math_fround(Math_fround(Math_fround(Math_fround($23_1 * $19_1) + Math_fround($22_1 * $25_1)) + Math_fround($21_1 * $11_1)) + Math_fround($20_1 * $10_1));
        $62_1 = Math_fround(Math_fround(Math_fround(Math_fround($22_1 * $19_1) - Math_fround($23_1 * $25_1)) - Math_fround($20_1 * $11_1)) + Math_fround($21_1 * $10_1));
        $63_1 = Math_fround(Math_fround(Math_fround(Math_fround($20_1 * $19_1) - Math_fround($23_1 * $10_1)) - Math_fround($21_1 * $25_1)) + Math_fround($22_1 * $11_1));
        $24_1 = Math_fround(Math_fround(Math_fround($10_1 * $60_1) + Math_fround(Math_fround($25_1 * $61_1) + Math_fround($19_1 * $62_1))) - Math_fround($11_1 * $63_1));
        $64_1 = Math_fround(Math_fround(Math_fround($11_1 * $62_1) + Math_fround(Math_fround($10_1 * $61_1) + Math_fround($19_1 * $63_1))) - Math_fround($25_1 * $60_1));
        $26_1 = Math_fround(Math_fround(Math_fround(Math_fround($19_1 * $61_1) - Math_fround($25_1 * $62_1)) - Math_fround($11_1 * $60_1)) - Math_fround($10_1 * $63_1));
        $10_1 = Math_fround(Math_fround(Math_fround($25_1 * $63_1) + Math_fround(Math_fround($19_1 * $60_1) + Math_fround($11_1 * $61_1))) - Math_fround($10_1 * $62_1));
        $25_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround($26_1 * $26_1) + Math_fround(Math_fround($64_1 * $64_1) + Math_fround(Math_fround($24_1 * $24_1) + Math_fround($10_1 * $10_1)))));
        $11_1 = Math_fround($64_1 * $25_1);
        $61_1 = Math_fround($24_1 * $11_1);
        $19_1 = Math_fround($10_1 * $25_1);
        $62_1 = Math_fround($26_1 * $19_1);
        $60_1 = Math_fround($61_1 - $62_1);
        $63_1 = Math_fround($10_1 * $11_1);
        $65_1 = Math_fround($24_1 * $25_1);
        $66_1 = Math_fround($26_1 * $65_1);
        $25_1 = Math_fround($63_1 + $66_1);
        $65_1 = Math_fround($24_1 * $65_1);
        $67_1 = Math_fround($10_1 * $19_1);
        $10_1 = Math_fround(Math_fround(1.0) - Math_fround($65_1 + $67_1));
        HEAPF32[($5_1 + 832 | 0) >> 2] = Math_fround(Math_fround(Math_fround($30_1 * $60_1) + Math_fround($57_1 * $25_1)) + Math_fround($56_1 * $10_1));
        HEAPF32[($5_1 + 828 | 0) >> 2] = Math_fround(Math_fround(Math_fround($60_1 * $29_1) + Math_fround($25_1 * $55_1)) + Math_fround($10_1 * $31_1));
        HEAPF32[($5_1 + 824 | 0) >> 2] = Math_fround(Math_fround(Math_fround($60_1 * $28_1) + Math_fround($25_1 * $59_1)) + Math_fround($10_1 * $58_1));
        $19_1 = Math_fround($24_1 * $19_1);
        $24_1 = Math_fround($26_1 * $11_1);
        $10_1 = Math_fround($19_1 + $24_1);
        $26_1 = Math_fround($64_1 * $11_1);
        $11_1 = Math_fround(Math_fround(1.0) - Math_fround($65_1 + $26_1));
        $25_1 = Math_fround($63_1 - $66_1);
        HEAPF32[($5_1 + 816 | 0) >> 2] = Math_fround(Math_fround(Math_fround($30_1 * $10_1) + Math_fround($57_1 * $11_1)) + Math_fround($56_1 * $25_1));
        HEAPF32[($5_1 + 812 | 0) >> 2] = Math_fround(Math_fround(Math_fround($10_1 * $29_1) + Math_fround($11_1 * $55_1)) + Math_fround($25_1 * $31_1));
        HEAPF32[($5_1 + 808 | 0) >> 2] = Math_fround(Math_fround(Math_fround($10_1 * $28_1) + Math_fround($11_1 * $59_1)) + Math_fround($25_1 * $58_1));
        $10_1 = Math_fround(Math_fround(1.0) - Math_fround($67_1 + $26_1));
        $11_1 = Math_fround($19_1 - $24_1);
        $25_1 = Math_fround($61_1 + $62_1);
        HEAPF32[($5_1 + 800 | 0) >> 2] = Math_fround(Math_fround(Math_fround($30_1 * $10_1) + Math_fround($57_1 * $11_1)) + Math_fround($56_1 * $25_1));
        HEAPF32[($5_1 + 796 | 0) >> 2] = Math_fround(Math_fround(Math_fround($10_1 * $29_1) + Math_fround($11_1 * $55_1)) + Math_fround($25_1 * $31_1));
        HEAPF32[($5_1 + 792 | 0) >> 2] = Math_fround(Math_fround(Math_fround($10_1 * $28_1) + Math_fround($11_1 * $59_1)) + Math_fround($25_1 * $58_1));
        $8_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $1797 = i64toi32_i32$0;
        i64toi32_i32$0 = $6_1;
        HEAP32[i64toi32_i32$0 >> 2] = $1797;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $1802 = i64toi32_i32$1;
        i64toi32_i32$1 = $6_1 + 8 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $1802;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $8_1 + 24 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $1807 = i64toi32_i32$0;
        i64toi32_i32$0 = $9_1 + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $1807;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
        $1810 = i64toi32_i32$1;
        i64toi32_i32$1 = $9_1;
        HEAP32[i64toi32_i32$1 >> 2] = $1810;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $1815 = i64toi32_i32$0;
        i64toi32_i32$0 = $16_1 + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $1815;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $1818 = i64toi32_i32$1;
        i64toi32_i32$1 = $16_1;
        HEAP32[i64toi32_i32$1 >> 2] = $1818;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $1823 = i64toi32_i32$0;
        i64toi32_i32$0 = $17_1 + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $1823;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $8_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
        $1826 = i64toi32_i32$1;
        i64toi32_i32$1 = $17_1;
        HEAP32[i64toi32_i32$1 >> 2] = $1826;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        break label$55;
       }
       $8_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       i64toi32_i32$2 = $8_1 + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $13_1 = i64toi32_i32$0;
       $13$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $8_1;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $14_1 = i64toi32_i32$1;
       $14$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       $1836 = i64toi32_i32$0;
       i64toi32_i32$0 = $33_1;
       HEAP32[i64toi32_i32$0 >> 2] = $1836;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1841 = i64toi32_i32$1;
       i64toi32_i32$1 = $33_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $1841;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = $13$hi;
       i64toi32_i32$1 = ($5_1 + 792 | 0) + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $13_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $8_1;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
       $1848 = i64toi32_i32$0;
       i64toi32_i32$0 = $32_1;
       HEAP32[i64toi32_i32$0 >> 2] = $1848;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1853 = i64toi32_i32$1;
       i64toi32_i32$1 = $32_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $1853;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $8_1 + 56 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $1858 = i64toi32_i32$0;
       i64toi32_i32$0 = $18_1 + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $1858;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $8_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
       $1861 = i64toi32_i32$1;
       i64toi32_i32$1 = $18_1;
       HEAP32[i64toi32_i32$1 >> 2] = $1861;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = $14$hi;
       i64toi32_i32$1 = $5_1;
       HEAP32[(i64toi32_i32$1 + 792 | 0) >> 2] = $14_1;
       HEAP32[(i64toi32_i32$1 + 796 | 0) >> 2] = i64toi32_i32$0;
       $8_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
       $28_1 = Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]);
       $29_1 = Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]);
       $30_1 = Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]);
       $31_1 = Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]);
       $55_1 = Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]);
       $56_1 = Math_fround(HEAPF32[$8_1 >> 2]);
       $57_1 = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
       $58_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
       $59_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
       HEAP32[(i64toi32_i32$1 + 900 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 884 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 868 | 0) >> 2] = 0;
       $60_1 = Math_fround(Math_fround(Math_fround(Math_fround($21_1 * $19_1) - Math_fround($23_1 * $11_1)) - Math_fround($22_1 * $10_1)) + Math_fround($20_1 * $25_1));
       $61_1 = Math_fround(Math_fround(Math_fround(Math_fround($23_1 * $19_1) + Math_fround($22_1 * $25_1)) + Math_fround($21_1 * $11_1)) + Math_fround($20_1 * $10_1));
       $62_1 = Math_fround(Math_fround(Math_fround(Math_fround($22_1 * $19_1) - Math_fround($23_1 * $25_1)) - Math_fround($20_1 * $11_1)) + Math_fround($21_1 * $10_1));
       $63_1 = Math_fround(Math_fround(Math_fround(Math_fround($20_1 * $19_1) - Math_fround($23_1 * $10_1)) - Math_fround($21_1 * $25_1)) + Math_fround($22_1 * $11_1));
       $24_1 = Math_fround(Math_fround(Math_fround($10_1 * $60_1) + Math_fround(Math_fround($25_1 * $61_1) + Math_fround($19_1 * $62_1))) - Math_fround($11_1 * $63_1));
       $64_1 = Math_fround(Math_fround(Math_fround($11_1 * $62_1) + Math_fround(Math_fround($10_1 * $61_1) + Math_fround($19_1 * $63_1))) - Math_fround($25_1 * $60_1));
       $26_1 = Math_fround(Math_fround(Math_fround(Math_fround($19_1 * $61_1) - Math_fround($25_1 * $62_1)) - Math_fround($11_1 * $60_1)) - Math_fround($10_1 * $63_1));
       $10_1 = Math_fround(Math_fround(Math_fround($25_1 * $63_1) + Math_fround(Math_fround($19_1 * $60_1) + Math_fround($11_1 * $61_1))) - Math_fround($10_1 * $62_1));
       $25_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround($26_1 * $26_1) + Math_fround(Math_fround($64_1 * $64_1) + Math_fround(Math_fround($24_1 * $24_1) + Math_fround($10_1 * $10_1)))));
       $11_1 = Math_fround($64_1 * $25_1);
       $61_1 = Math_fround($24_1 * $11_1);
       $19_1 = Math_fround($10_1 * $25_1);
       $62_1 = Math_fround($26_1 * $19_1);
       $60_1 = Math_fround($61_1 - $62_1);
       $63_1 = Math_fround($10_1 * $11_1);
       $65_1 = Math_fround($24_1 * $25_1);
       $66_1 = Math_fround($26_1 * $65_1);
       $25_1 = Math_fround($63_1 + $66_1);
       $65_1 = Math_fround($24_1 * $65_1);
       $67_1 = Math_fround($10_1 * $19_1);
       $10_1 = Math_fround(Math_fround(1.0) - Math_fround($65_1 + $67_1));
       HEAPF32[(i64toi32_i32$1 + 896 | 0) >> 2] = Math_fround(Math_fround(Math_fround($59_1 * $60_1) + Math_fround($31_1 * $25_1)) + Math_fround($30_1 * $10_1));
       HEAPF32[(i64toi32_i32$1 + 892 | 0) >> 2] = Math_fround(Math_fround(Math_fround($60_1 * $58_1) + Math_fround($25_1 * $29_1)) + Math_fround($10_1 * $28_1));
       HEAPF32[(i64toi32_i32$1 + 888 | 0) >> 2] = Math_fround(Math_fround(Math_fround($60_1 * $56_1) + Math_fround($25_1 * $57_1)) + Math_fround($10_1 * $55_1));
       $19_1 = Math_fround($24_1 * $19_1);
       $24_1 = Math_fround($26_1 * $11_1);
       $10_1 = Math_fround($19_1 + $24_1);
       $26_1 = Math_fround($64_1 * $11_1);
       $11_1 = Math_fround(Math_fround(1.0) - Math_fround($65_1 + $26_1));
       $25_1 = Math_fround($63_1 - $66_1);
       HEAPF32[(i64toi32_i32$1 + 880 | 0) >> 2] = Math_fround(Math_fround(Math_fround($59_1 * $10_1) + Math_fround($31_1 * $11_1)) + Math_fround($30_1 * $25_1));
       HEAPF32[(i64toi32_i32$1 + 876 | 0) >> 2] = Math_fround(Math_fround(Math_fround($10_1 * $58_1) + Math_fround($11_1 * $29_1)) + Math_fround($25_1 * $28_1));
       HEAPF32[(i64toi32_i32$1 + 872 | 0) >> 2] = Math_fround(Math_fround(Math_fround($10_1 * $56_1) + Math_fround($11_1 * $57_1)) + Math_fround($25_1 * $55_1));
       $10_1 = Math_fround(Math_fround(1.0) - Math_fround($67_1 + $26_1));
       $11_1 = Math_fround($19_1 - $24_1);
       $25_1 = Math_fround($61_1 + $62_1);
       HEAPF32[(i64toi32_i32$1 + 864 | 0) >> 2] = Math_fround(Math_fround(Math_fround($59_1 * $10_1) + Math_fround($31_1 * $11_1)) + Math_fround($30_1 * $25_1));
       HEAPF32[(i64toi32_i32$1 + 860 | 0) >> 2] = Math_fround(Math_fround(Math_fround($10_1 * $58_1) + Math_fround($11_1 * $29_1)) + Math_fround($25_1 * $28_1));
       HEAPF32[(i64toi32_i32$1 + 856 | 0) >> 2] = Math_fround(Math_fround(Math_fround($10_1 * $56_1) + Math_fround($11_1 * $57_1)) + Math_fround($25_1 * $55_1));
      }
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 792 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 796 | 0) >> 2] | 0;
      $2203 = i64toi32_i32$0;
      i64toi32_i32$0 = $54_1;
      HEAP32[i64toi32_i32$0 >> 2] = $2203;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $33_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2206 = i64toi32_i32$1;
      i64toi32_i32$1 = $53_1;
      HEAP32[i64toi32_i32$1 >> 2] = $2206;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $32_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2209 = i64toi32_i32$0;
      i64toi32_i32$0 = $52_1;
      HEAP32[i64toi32_i32$0 >> 2] = $2209;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $18_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2212 = i64toi32_i32$1;
      i64toi32_i32$1 = $51_1;
      HEAP32[i64toi32_i32$1 >> 2] = $2212;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = ($5_1 + 792 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2218 = i64toi32_i32$0;
      i64toi32_i32$0 = $54_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $2218;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $33_1 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2223 = i64toi32_i32$1;
      i64toi32_i32$1 = $53_1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $2223;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $32_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2228 = i64toi32_i32$0;
      i64toi32_i32$0 = $52_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $2228;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $18_1 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2233 = i64toi32_i32$1;
      i64toi32_i32$1 = $51_1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $2233;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($5_1 + 40 | 0) >> 2] = 0;
      HEAP32[($5_1 + 44 | 0) >> 2] = $4_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = 15924;
      $8_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      i64toi32_i32$2 = $6_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2244 = i64toi32_i32$0;
      i64toi32_i32$0 = $50_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $2244;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2247 = i64toi32_i32$1;
      i64toi32_i32$1 = $50_1;
      HEAP32[i64toi32_i32$1 >> 2] = $2247;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $9_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2252 = i64toi32_i32$0;
      i64toi32_i32$0 = $49_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $2252;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $9_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2255 = i64toi32_i32$1;
      i64toi32_i32$1 = $49_1;
      HEAP32[i64toi32_i32$1 >> 2] = $2255;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $16_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2260 = i64toi32_i32$0;
      i64toi32_i32$0 = $48_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $2260;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $16_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2263 = i64toi32_i32$1;
      i64toi32_i32$1 = $48_1;
      HEAP32[i64toi32_i32$1 >> 2] = $2263;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $17_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2268 = i64toi32_i32$0;
      i64toi32_i32$0 = $47_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $2268;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $17_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2271 = i64toi32_i32$1;
      i64toi32_i32$1 = $47_1;
      HEAP32[i64toi32_i32$1 >> 2] = $2271;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $37_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2275 = i64toi32_i32$0;
      i64toi32_i32$0 = $46_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $2275;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 248 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 252 | 0) >> 2] | 0;
      $2278 = i64toi32_i32$1;
      i64toi32_i32$1 = $46_1;
      HEAP32[i64toi32_i32$1 >> 2] = $2278;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $45_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2283 = i64toi32_i32$0;
      i64toi32_i32$0 = $44_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $2283;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $45_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2286 = i64toi32_i32$1;
      i64toi32_i32$1 = $44_1;
      HEAP32[i64toi32_i32$1 >> 2] = $2286;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $43_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2291 = i64toi32_i32$0;
      i64toi32_i32$0 = $42_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $2291;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $43_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2294 = i64toi32_i32$1;
      i64toi32_i32$1 = $42_1;
      HEAP32[i64toi32_i32$1 >> 2] = $2294;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $39_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2299 = i64toi32_i32$0;
      i64toi32_i32$0 = $40_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $2299;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $39_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2302 = i64toi32_i32$1;
      i64toi32_i32$1 = $40_1;
      HEAP32[i64toi32_i32$1 >> 2] = $2302;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($5_1 + 244 | 0) >> 2] = $8_1;
      HEAP8[($5_1 + 240 | 0) >> 0] = $38_1;
      $565($12_1 | 0, $5_1 + 792 | 0 | 0, $5_1 + 8 | 0 | 0, $8_1 | 0, 0 | 0);
      $8_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
     }
     $7_1 = $7_1 + 1 | 0;
     if (($7_1 | 0) < ($8_1 | 0)) {
      continue label$53
     }
     break label$53;
    };
   }
   if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
    break label$2
   }
   $0_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   if (!(HEAP32[($0_1 + 780 | 0) >> 2] | 0)) {
    break label$2
   }
   label$57 : {
    $8_1 = HEAP32[($0_1 + 772 | 0) >> 2] | 0;
    $7_1 = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    if (($8_1 | 0) == ($7_1 | 0)) {
     break label$57
    }
    $219($0_1 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0, $7_1 + 4 | 0 | 0);
    break label$2;
   }
   $219($0_1 | 0, $8_1 + 4 | 0 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  }
  global$0 = $5_1 + 928 | 0;
 }
 
 function $595($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = Math_fround($10_1);
  var $22_1 = Math_fround(0), $23_1 = Math_fround(0), $19_1 = Math_fround(0), $17_1 = Math_fround(0), $24_1 = Math_fround(0), $20_1 = Math_fround(0), $18_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $21_1 = Math_fround(0);
  $7_1 = $9_1 + ($7_1 << 2 | 0) | 0;
  $11_1 = Math_fround(HEAPF32[$7_1 >> 2]);
  $12_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]));
  $13_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
  $14_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 52 | 0) >> 2]));
  $15_1 = Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]);
  $16_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 56 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 56 | 0) >> 2]));
  $17_1 = Math_fround(Math_fround(Math_fround($11_1 * $12_1) + Math_fround($13_1 * $14_1)) + Math_fround($15_1 * $16_1));
  $8_1 = $8_1 + ($6_1 << 2 | 0) | 0;
  $18_1 = Math_fround(HEAPF32[$8_1 >> 2]);
  $19_1 = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]);
  $21_1 = Math_fround(Math_fround(Math_fround($18_1 * $12_1) + Math_fround($19_1 * $14_1)) + Math_fround($20_1 * $16_1));
  $22_1 = Math_fround(0.0);
  label$1 : {
   $23_1 = Math_fround(Math_fround(Math_fround($18_1 * $11_1) + Math_fround($19_1 * $13_1)) + Math_fround($20_1 * $15_1));
   $24_1 = Math_fround(Math_fround(1.0) - Math_fround($23_1 * $23_1));
   if ($24_1 == Math_fround(0.0)) {
    break label$1
   }
   $24_1 = Math_fround(Math_fround($21_1 - Math_fround($23_1 * $17_1)) / $24_1);
   $22_1 = Math_fround(-$2_1);
   if ($24_1 < $22_1) {
    break label$1
   }
   $22_1 = $24_1;
   if ($22_1 > $2_1 ^ 1 | 0) {
    break label$1
   }
   $22_1 = $2_1;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     $17_1 = Math_fround(Math_fround($23_1 * $22_1) - $17_1);
     $24_1 = Math_fround(-$4_1);
     if ($17_1 < $24_1 ^ 1 | 0) {
      break label$4
     }
     label$5 : {
      $23_1 = Math_fround(Math_fround($23_1 * $24_1) + $21_1);
      $22_1 = Math_fround(-$2_1);
      if (!($23_1 < $22_1)) {
       break label$5
      }
      $17_1 = $24_1;
      break label$2;
     }
     label$6 : {
      if (!($23_1 > $2_1 ^ 1 | 0)) {
       break label$6
      }
      $17_1 = $24_1;
      $22_1 = $23_1;
      break label$2;
     }
     $17_1 = $24_1;
     break label$3;
    }
    if ($17_1 > $4_1 ^ 1 | 0) {
     break label$2
    }
    label$7 : {
     $23_1 = Math_fround(Math_fround($23_1 * $4_1) + $21_1);
     $22_1 = Math_fround(-$2_1);
     if (!($23_1 < $22_1)) {
      break label$7
     }
     $17_1 = $4_1;
     break label$2;
    }
    label$8 : {
     if (!($23_1 > $2_1 ^ 1 | 0)) {
      break label$8
     }
     $17_1 = $4_1;
     $22_1 = $23_1;
     break label$2;
    }
    $17_1 = $4_1;
   }
   $22_1 = $2_1;
  }
  label$9 : {
   $15_1 = Math_fround($15_1 * $17_1);
   $23_1 = Math_fround($15_1 + Math_fround($16_1 - Math_fround($20_1 * $22_1)));
   $11_1 = Math_fround($11_1 * $17_1);
   $4_1 = Math_fround($11_1 + Math_fround($12_1 - Math_fround($18_1 * $22_1)));
   $12_1 = Math_fround($13_1 * $17_1);
   $22_1 = Math_fround($12_1 + Math_fround($14_1 - Math_fround($19_1 * $22_1)));
   $13_1 = Math_fround(Math_fround($23_1 * $23_1) + Math_fround(Math_fround($4_1 * $4_1) + Math_fround($22_1 * $22_1)));
   $14_1 = Math_fround(Math_sqrt($13_1));
   $17_1 = Math_fround(Math_fround($14_1 - $3_1) - $5_1);
   if ($17_1 > $10_1) {
    break label$9
   }
   label$10 : {
    label$11 : {
     if ($13_1 <= Math_fround(1.4210854715202004e-14) ^ 1 | 0) {
      break label$11
     }
     label$12 : {
      if (Math_fround(Math_abs($20_1)) > Math_fround(.7071067690849304) ^ 1 | 0) {
       break label$12
      }
      HEAP32[$0_1 >> 2] = 0;
      $22_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($19_1 * $19_1) + Math_fround($20_1 * $20_1)))));
      $23_1 = Math_fround($19_1 * $22_1);
      HEAPF32[($0_1 + 8 | 0) >> 2] = $23_1;
      $22_1 = Math_fround(-Math_fround($20_1 * $22_1));
      HEAPF32[($0_1 + 4 | 0) >> 2] = $22_1;
      $19_1 = Math_fround(0.0);
      break label$10;
     }
     HEAP32[($0_1 + 8 | 0) >> 2] = 0;
     $23_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($18_1 * $18_1) + Math_fround($19_1 * $19_1)))));
     $22_1 = Math_fround($18_1 * $23_1);
     HEAPF32[($0_1 + 4 | 0) >> 2] = $22_1;
     $19_1 = Math_fround(-Math_fround($19_1 * $23_1));
     HEAPF32[$0_1 >> 2] = $19_1;
     $23_1 = Math_fround(0.0);
     break label$10;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = 0;
    $19_1 = Math_fround(Math_fround(-1.0) / $14_1);
    $23_1 = Math_fround($23_1 * $19_1);
    HEAPF32[($0_1 + 8 | 0) >> 2] = $23_1;
    $22_1 = Math_fround($22_1 * $19_1);
    HEAPF32[($0_1 + 4 | 0) >> 2] = $22_1;
    $19_1 = Math_fround($4_1 * $19_1);
    HEAPF32[$0_1 >> 2] = $19_1;
   }
   $20_1 = Math_fround(HEAPF32[($9_1 + 48 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]);
   $4_1 = Math_fround(HEAPF32[($9_1 + 56 | 0) >> 2]);
   HEAP32[($1_1 + 12 | 0) >> 2] = 0;
   HEAPF32[($1_1 + 8 | 0) >> 2] = Math_fround(Math_fround($15_1 + $4_1) + Math_fround($23_1 * $5_1));
   HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround(Math_fround($12_1 + $18_1) + Math_fround($22_1 * $5_1));
   HEAPF32[$1_1 >> 2] = Math_fround(Math_fround($11_1 + $20_1) + Math_fround($19_1 * $5_1));
  }
  return Math_fround($17_1);
 }
 
 function $596($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = Math_fround(0), $6_1 = Math_fround(0), i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $31_1 = Math_fround(0), $42_1 = Math_fround(0), $53_1 = Math_fround(0), $70_1 = Math_fround(0), $81_1 = Math_fround(0), $92_1 = Math_fround(0), $18_1 = 0;
  $5_1 = global$0 - 608 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    $6_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 116 | 0) >> 2]) - Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]));
    $31_1 = Math_fround($6_1 * $6_1);
    $6_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 120 | 0) >> 2]) - Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]));
    $42_1 = Math_fround($31_1 + Math_fround($6_1 * $6_1));
    $6_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 124 | 0) >> 2]) - Math_fround(HEAPF32[($1_1 + 60 | 0) >> 2]));
    $53_1 = Math_fround($42_1 + Math_fround($6_1 * $6_1));
    $6_1 = Math_fround(HEAPF32[($1_1 + 276 | 0) >> 2]);
    if ($53_1 < Math_fround($6_1 * $6_1) ^ 1 | 0) {
     break label$2
    }
    $6_1 = Math_fround(1.0);
    $7_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 116 | 0) >> 2]) - Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]));
    $70_1 = Math_fround($7_1 * $7_1);
    $7_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 120 | 0) >> 2]) - Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]));
    $81_1 = Math_fround($70_1 + Math_fround($7_1 * $7_1));
    $7_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 124 | 0) >> 2]) - Math_fround(HEAPF32[($2_1 + 60 | 0) >> 2]));
    $92_1 = Math_fround($81_1 + Math_fround($7_1 * $7_1));
    $7_1 = Math_fround(HEAPF32[($2_1 + 276 | 0) >> 2]);
    if ($92_1 < Math_fround($7_1 * $7_1)) {
     break label$1
    }
   }
   $6_1 = Math_fround(1.0);
   if (HEAPU8[(0 + 2752 | 0) >> 0] | 0) {
    break label$1
   }
   $8_1 = HEAP32[($1_1 + 192 | 0) >> 2] | 0;
   $9_1 = HEAP32[($2_1 + 272 | 0) >> 2] | 0;
   $145($5_1 + 552 | 0 | 0) | 0;
   $10_1 = $5_1 + 580 | 0;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $11_1 = $5_1 + 576 | 0;
   HEAP32[$11_1 >> 2] = 1065353216;
   $12_1 = $5_1 + 588 | 0;
   i64toi32_i32$1 = $12_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $13_1 = $5_1 + 596 | 0;
   HEAP32[$13_1 >> 2] = 0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 1065353216;
   HEAP32[($5_1 + 568 | 0) >> 2] = 1065353216;
   HEAP32[($5_1 + 572 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($5_1 + 556 | 0) >> 2] = 8;
   HEAP32[($5_1 + 552 | 0) >> 2] = 9852;
   HEAP32[($5_1 + 604 | 0) >> 2] = 0;
   HEAP32[($5_1 + 600 | 0) >> 2] = $9_1;
   HEAP32[($5_1 + 584 | 0) >> 2] = $9_1;
   HEAP32[($5_1 + 548 | 0) >> 2] = 0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 0;
   HEAP32[($5_1 + 540 | 0) >> 2] = 1566444395;
   HEAP32[($5_1 + 544 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($5_1 + 376 | 0) >> 2] = 15992;
   $14_1 = $5_1 + 348 | 0;
   HEAP8[$14_1 >> 0] = 0;
   HEAP32[($5_1 + 324 | 0) >> 2] = 953267991;
   $6_1 = Math_fround(1.0);
   label$3 : {
    $9_1 = $582($5_1 | 0, $8_1 | 0, $5_1 + 552 | 0 | 0, $5_1 + 16 | 0 | 0) | 0;
    $8_1 = $1_1 + 4 | 0;
    $15_1 = $1_1 + 68 | 0;
    $16_1 = $2_1 + 4 | 0;
    $17_1 = $2_1 + 68 | 0;
    if (!($583($9_1 | 0, $8_1 | 0, $15_1 | 0, $16_1 | 0, $17_1 | 0, $5_1 + 376 | 0 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     $7_1 = Math_fround(HEAPF32[($5_1 + 540 | 0) >> 2]);
     if (Math_fround(HEAPF32[($1_1 + 268 | 0) >> 2]) > $7_1 ^ 1 | 0) {
      break label$4
     }
     HEAPF32[($1_1 + 268 | 0) >> 2] = $7_1;
    }
    label$5 : {
     if (Math_fround(HEAPF32[($2_1 + 268 | 0) >> 2]) > $7_1 ^ 1 | 0) {
      break label$5
     }
     HEAPF32[($2_1 + 268 | 0) >> 2] = $7_1;
    }
    $6_1 = Math_fround(1.0);
    if ($7_1 < Math_fround(1.0) ^ 1 | 0) {
     break label$3
    }
    $6_1 = $7_1;
   }
   $581($9_1 | 0) | 0;
   $101($5_1 + 552 | 0 | 0) | 0;
   $18_1 = HEAP32[($2_1 + 192 | 0) >> 2] | 0;
   $9_1 = HEAP32[($1_1 + 272 | 0) >> 2] | 0;
   $145($5_1 + 552 | 0 | 0) | 0;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$11_1 >> 2] = 1065353216;
   i64toi32_i32$1 = $12_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$13_1 >> 2] = 0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 1065353216;
   HEAP32[($5_1 + 568 | 0) >> 2] = 1065353216;
   HEAP32[($5_1 + 572 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($5_1 + 556 | 0) >> 2] = 8;
   HEAP32[($5_1 + 552 | 0) >> 2] = 9852;
   HEAP32[($5_1 + 604 | 0) >> 2] = 0;
   HEAP32[($5_1 + 600 | 0) >> 2] = $9_1;
   HEAP32[($5_1 + 584 | 0) >> 2] = $9_1;
   HEAP32[($5_1 + 548 | 0) >> 2] = 0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 0;
   HEAP32[($5_1 + 540 | 0) >> 2] = 1566444395;
   HEAP32[($5_1 + 544 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($5_1 + 376 | 0) >> 2] = 15992;
   HEAP8[$14_1 >> 0] = 0;
   HEAP32[($5_1 + 324 | 0) >> 2] = 953267991;
   label$6 : {
    $9_1 = $582($5_1 | 0, $5_1 + 552 | 0 | 0, $18_1 | 0, $5_1 + 16 | 0 | 0) | 0;
    if (!($583($9_1 | 0, $8_1 | 0, $15_1 | 0, $16_1 | 0, $17_1 | 0, $5_1 + 376 | 0 | 0) | 0)) {
     break label$6
    }
    label$7 : {
     $7_1 = Math_fround(HEAPF32[($5_1 + 540 | 0) >> 2]);
     if (Math_fround(HEAPF32[($1_1 + 268 | 0) >> 2]) > $7_1 ^ 1 | 0) {
      break label$7
     }
     HEAPF32[($1_1 + 268 | 0) >> 2] = $7_1;
    }
    label$8 : {
     if (Math_fround(HEAPF32[($2_1 + 268 | 0) >> 2]) > $7_1 ^ 1 | 0) {
      break label$8
     }
     HEAPF32[($2_1 + 268 | 0) >> 2] = $7_1;
    }
    if ($6_1 > $7_1 ^ 1 | 0) {
     break label$6
    }
    $6_1 = $7_1;
   }
   $581($9_1 | 0) | 0;
   $101($5_1 + 552 | 0 | 0) | 0;
  }
  global$0 = $5_1 + 608 | 0;
  return Math_fround($6_1);
 }
 
 function $597($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $598($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $6$hi = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($4_1, 72) | 0;
  $5_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $6$hi = i64toi32_i32$1;
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $72($4_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  HEAP8[($4_1 + 28 | 0) >> 0] = 1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[$4_1 >> 2] = 15444;
  HEAP32[($4_1 + 24 | 0) >> 2] = 0;
  HEAP8[($4_1 + 48 | 0) >> 0] = 1;
  i64toi32_i32$1 = 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($4_1 + 44 | 0) >> 2] = 0;
  i64toi32_i32$1 = $6$hi;
  HEAP32[($4_1 + 64 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 68 | 0) >> 2] = i64toi32_i32$1;
  HEAP8[($4_1 + 60 | 0) >> 0] = 0;
  HEAP32[($4_1 + 56 | 0) >> 2] = $5_1;
  HEAP8[($4_1 + 52 | 0) >> 0] = 0;
  i64toi32_i32$1 = 0;
  HEAP32[($4_1 + 36 | 0) >> 2] = 0;
  HEAP32[($4_1 + 40 | 0) >> 2] = i64toi32_i32$1;
  return $4_1 | 0;
 }
 
 function $599($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($3_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $4_1 = $3_1 ? $3_1 << 1 | 0 : 1;
    if (($3_1 | 0) >= ($4_1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($4_1) {
       break label$4
      }
      $5_1 = 0;
      break label$3;
     }
     $5_1 = $79($4_1 << 2 | 0 | 0, 16 | 0) | 0;
     $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    }
    label$5 : {
     if (($3_1 | 0) < (1 | 0)) {
      break label$5
     }
     $2_1 = 0;
     $6_1 = $3_1;
     label$6 : while (1) {
      HEAP32[($5_1 + $2_1 | 0) >> 2] = HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
      $2_1 = $2_1 + 4 | 0;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$7
     }
     label$8 : {
      if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
       break label$8
      }
      $80($2_1 | 0);
      $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    }
    HEAP32[($1_1 + 12 | 0) >> 2] = $5_1;
    HEAP8[($1_1 + 16 | 0) >> 0] = 1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
    $2_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
   HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
 }
 
 function $600($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $601($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $602($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $603($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
 }
 
 function $604($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $605($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $606($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $607($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $12_1 = Math_fround(0), $5_1 = 0, $20_1 = 0, $26_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[($0_1 + 32 | 0) >> 2] = $3_1;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $20_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  $5_1 = $1_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[$5_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $26_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $26_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $6_1 = Math_fround(HEAPF32[$5_1 >> 2]);
  $7_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $8_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $9_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
  $3_1 = Math_fround(Math_fround($12_1 + Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2])) + $3_1);
  HEAPF32[($0_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround($11_1 - Math_fround($12_1 * $6_1));
  HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround($9_1 - Math_fround($12_1 * $10_1));
  HEAPF32[$4_1 >> 2] = Math_fround($7_1 - Math_fround($8_1 * $12_1));
  label$1 : {
   if ($3_1 < Math_fround(0.0) ^ 1 | 0) {
    break label$1
   }
   HEAP8[($0_1 + 36 | 0) >> 0] = 1;
  }
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1, $1_1, $4_1, $3_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $608($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $609($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $20_1 = Math_fround(0), $18_1 = Math_fround(0), $25_1 = Math_fround(0), $14_1 = Math_fround(0), $17_1 = Math_fround(0), $16_1 = Math_fround(0), $4_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $15_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $26_1 = Math_fround(0), $6_1 = Math_fround(0), $19_1 = Math_fround(0), $24_1 = Math_fround(0), $27_1 = Math_fround(0), $7_1 = Math_fround(0), $28_1 = Math_fround(0), $9_1 = Math_fround(0), $5_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $138_1 = Math_fround(0), $145_1 = Math_fround(0), $277_1 = Math_fround(0), $285_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $470_1 = Math_fround(0), $494_1 = Math_fround(0), $509_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $7_1 = Math_fround(Math_fround($5_1 * $3_1) + $6_1);
  $8_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $10_1 = Math_fround(Math_fround($8_1 * $3_1) + $9_1);
  $11_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $12_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $3_1 = Math_fround(Math_fround($11_1 * $3_1) + $12_1);
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 232 | 0) >> 0] | 0)) {
     break label$2
    }
    $13_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
    $14_1 = Math_fround(-Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]));
    $15_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
    $16_1 = Math_fround(HEAPF32[($0_1 + 92 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]);
    $18_1 = Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2]);
    $19_1 = Math_fround(Math_fround(Math_fround($13_1 * $14_1) - Math_fround($15_1 * $16_1)) - Math_fround($17_1 * $18_1));
    $20_1 = Math_fround(HEAPF32[($0_1 + 200 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
    $23_1 = Math_fround(HEAPF32[($0_1 + 76 | 0) >> 2]);
    $24_1 = Math_fround(Math_fround(Math_fround($21_1 * $14_1) - Math_fround($22_1 * $16_1)) - Math_fround($23_1 * $18_1));
    $25_1 = Math_fround(HEAPF32[($0_1 + 204 | 0) >> 2]);
    $26_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
    $138_1 = Math_fround($26_1 * $14_1);
    $14_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
    $145_1 = Math_fround($138_1 - Math_fround($14_1 * $16_1));
    $16_1 = Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]);
    $27_1 = Math_fround($145_1 - Math_fround($16_1 * $18_1));
    $18_1 = Math_fround(HEAPF32[($0_1 + 208 | 0) >> 2]);
    $28_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($19_1 * $20_1) + Math_fround($24_1 * $25_1)) + Math_fround($27_1 * $18_1)) + Math_fround(HEAPF32[($0_1 + 224 | 0) >> 2])) + Math_fround(Math_fround($7_1 * Math_fround(Math_fround(Math_fround($17_1 * $20_1) + Math_fround($23_1 * $25_1)) + Math_fround($16_1 * $18_1))) + Math_fround(Math_fround($3_1 * Math_fround(Math_fround(Math_fround($13_1 * $20_1) + Math_fround($21_1 * $25_1)) + Math_fround($26_1 * $18_1))) + Math_fround($10_1 * Math_fround(Math_fround(Math_fround($15_1 * $20_1) + Math_fround($22_1 * $25_1)) + Math_fround($14_1 * $18_1))))));
    $20_1 = Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]);
    $25_1 = Math_fround(HEAPF32[($0_1 + 172 | 0) >> 2]);
    $18_1 = Math_fround(HEAPF32[($0_1 + 176 | 0) >> 2]);
    $25_1 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(Math_fround(Math_fround($17_1 * $20_1) + Math_fround($23_1 * $25_1)) + Math_fround($16_1 * $18_1))) + Math_fround(Math_fround($3_1 * Math_fround(Math_fround(Math_fround($13_1 * $20_1) + Math_fround($21_1 * $25_1)) + Math_fround($26_1 * $18_1))) + Math_fround($10_1 * Math_fround(Math_fround(Math_fround($15_1 * $20_1) + Math_fround($22_1 * $25_1)) + Math_fround($14_1 * $18_1))))) + Math_fround(Math_fround(Math_fround(Math_fround($20_1 * $19_1) + Math_fround($24_1 * $25_1)) + Math_fround($27_1 * $18_1)) + Math_fround(HEAPF32[($0_1 + 216 | 0) >> 2])));
    $277_1 = Math_fround($11_1 * Math_fround($25_1 - $12_1));
    $12_1 = Math_fround(HEAPF32[($0_1 + 184 | 0) >> 2]);
    $285_1 = Math_fround($17_1 * $12_1);
    $17_1 = Math_fround(HEAPF32[($0_1 + 188 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($0_1 + 192 | 0) >> 2]);
    $7_1 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(Math_fround($285_1 + Math_fround($23_1 * $17_1)) + Math_fround($16_1 * $20_1))) + Math_fround(Math_fround($3_1 * Math_fround(Math_fround(Math_fround($13_1 * $12_1) + Math_fround($21_1 * $17_1)) + Math_fround($26_1 * $20_1))) + Math_fround($10_1 * Math_fround(Math_fround(Math_fround($15_1 * $12_1) + Math_fround($22_1 * $17_1)) + Math_fround($14_1 * $20_1))))) + Math_fround(Math_fround(Math_fround(Math_fround($19_1 * $12_1) + Math_fround($24_1 * $17_1)) + Math_fround($27_1 * $20_1)) + Math_fround(HEAPF32[($0_1 + 220 | 0) >> 2])));
    $3_1 = Math_fround(Math_fround($277_1 + Math_fround($8_1 * Math_fround($7_1 - $9_1))) + Math_fround($5_1 * Math_fround($28_1 - $6_1)));
    HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround($28_1 + Math_fround($5_1 * $3_1));
    HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround($7_1 + Math_fround($8_1 * $3_1));
    HEAPF32[$4_1 >> 2] = Math_fround($25_1 + Math_fround($11_1 * $3_1));
    break label$1;
   }
   $29_1 = Math_fround(HEAPF32[($0_1 + 224 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($0_1 + 208 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($0_1 + 200 | 0) >> 2]);
   $17_1 = Math_fround(HEAPF32[($0_1 + 204 | 0) >> 2]);
   $30_1 = Math_fround(HEAPF32[($0_1 + 216 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[($0_1 + 172 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($0_1 + 176 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[($0_1 + 184 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[($0_1 + 140 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[($0_1 + 188 | 0) >> 2]);
   $16_1 = Math_fround(HEAPF32[($0_1 + 144 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[($0_1 + 192 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($0_1 + 108 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[($0_1 + 112 | 0) >> 2]);
   $28_1 = Math_fround(HEAPF32[($0_1 + 120 | 0) >> 2]);
   $31_1 = Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]);
   $32_1 = Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2]);
   $470_1 = Math_fround(Math_fround($6_1 * Math_fround(Math_fround(Math_fround($23_1 * $25_1) + Math_fround($26_1 * $14_1)) + Math_fround($16_1 * $18_1))) + Math_fround(Math_fround($12_1 * Math_fround(Math_fround(Math_fround($19_1 * $25_1) + Math_fround($24_1 * $14_1)) + Math_fround($27_1 * $18_1))) + Math_fround($9_1 * Math_fround(Math_fround(Math_fround($28_1 * $25_1) + Math_fround($31_1 * $14_1)) + Math_fround($32_1 * $18_1)))));
   $33_1 = Math_fround(-Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2]));
   $34_1 = Math_fround(HEAPF32[($0_1 + 156 | 0) >> 2]);
   $35_1 = Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2]);
   $36_1 = Math_fround(Math_fround(Math_fround($19_1 * $33_1) - Math_fround($28_1 * $34_1)) - Math_fround($23_1 * $35_1));
   $494_1 = Math_fround($36_1 * $25_1);
   $25_1 = Math_fround(Math_fround(Math_fround($24_1 * $33_1) - Math_fround($31_1 * $34_1)) - Math_fround($26_1 * $35_1));
   $509_1 = Math_fround($494_1 + Math_fround($25_1 * $14_1));
   $14_1 = Math_fround(Math_fround(Math_fround($27_1 * $33_1) - Math_fround($32_1 * $34_1)) - Math_fround($16_1 * $35_1));
   $18_1 = Math_fround($470_1 + Math_fround(Math_fround($509_1 + Math_fround($14_1 * $18_1)) + Math_fround(HEAPF32[($0_1 + 220 | 0) >> 2])));
   HEAPF32[($4_1 + 4 | 0) >> 2] = $18_1;
   $20_1 = Math_fround(Math_fround(Math_fround($6_1 * Math_fround(Math_fround(Math_fround($23_1 * $22_1) + Math_fround($26_1 * $20_1)) + Math_fround($16_1 * $21_1))) + Math_fround(Math_fround($12_1 * Math_fround(Math_fround(Math_fround($19_1 * $22_1) + Math_fround($24_1 * $20_1)) + Math_fround($27_1 * $21_1))) + Math_fround($9_1 * Math_fround(Math_fround(Math_fround($28_1 * $22_1) + Math_fround($31_1 * $20_1)) + Math_fround($32_1 * $21_1))))) + Math_fround($30_1 + Math_fround(Math_fround(Math_fround($22_1 * $36_1) + Math_fround($25_1 * $20_1)) + Math_fround($14_1 * $21_1))));
   HEAPF32[$4_1 >> 2] = $20_1;
   $6_1 = Math_fround(Math_fround($29_1 + Math_fround(Math_fround(Math_fround($36_1 * $15_1) + Math_fround($25_1 * $17_1)) + Math_fround($14_1 * $13_1))) + Math_fround(Math_fround($6_1 * Math_fround(Math_fround(Math_fround($23_1 * $15_1) + Math_fround($26_1 * $17_1)) + Math_fround($16_1 * $13_1))) + Math_fround(Math_fround($12_1 * Math_fround(Math_fround(Math_fround($19_1 * $15_1) + Math_fround($24_1 * $17_1)) + Math_fround($27_1 * $13_1))) + Math_fround($9_1 * Math_fround(Math_fround(Math_fround($28_1 * $15_1) + Math_fround($31_1 * $17_1)) + Math_fround($32_1 * $13_1))))));
   HEAPF32[($4_1 + 8 | 0) >> 2] = $6_1;
   $3_1 = Math_fround(Math_fround(Math_fround($11_1 * Math_fround($3_1 - $20_1)) + Math_fround($8_1 * Math_fround($10_1 - $18_1))) + Math_fround($5_1 * Math_fround($7_1 - $6_1)));
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  $0_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1, $1_1, $4_1, $3_1);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $610($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
 }
 
 function $611($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $612($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $613($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $614($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $615() {
  
 }
 
 function $616($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[(0 + 2992 | 0) >> 2] | 0]($1_1);
  return $0_1 | 0;
 }
 
 function $617($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[HEAP32[(0 + 2996 | 0) >> 2] | 0]();
  return $0_1 | 0;
 }
 
 function $618($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = 16060;
  return $0_1 | 0;
 }
 
 function $619($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $23_1 = Math_fround(0), $26_1 = Math_fround(0), $46_1 = Math_fround(0), $31_1 = Math_fround(0), $7_1 = 0, $34_1 = Math_fround(0), i64toi32_i32$0 = 0, $48_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), i64toi32_i32$1 = 0, $11_1 = 0, $9_1 = 0, $22_1 = Math_fround(0), $51_1 = Math_fround(0), $49_1 = 0, $54_1 = Math_fround(0), $55_1 = Math_fround(0), $56_1 = Math_fround(0), $13_1 = 0, $16_1 = Math_fround(0), $18_1 = Math_fround(0), $20_1 = Math_fround(0), $25_1 = Math_fround(0), $28_1 = Math_fround(0), $30_1 = Math_fround(0), $33_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $47_1 = Math_fround(0), $50_1 = 0, $57_1 = Math_fround(0), i64toi32_i32$2 = 0, $8_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = 0, $17_1 = 0, $19_1 = 0, $21_1 = 0, $24_1 = 0, $27_1 = 0, $29_1 = 0, $32_1 = 0, $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $58_1 = Math_fround(0), $797_1 = Math_fround(0), $803_1 = Math_fround(0), $877_1 = 0, $880_1 = 0;
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  $555(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
  $7_1 = $3_1 + 40 | 0;
  $8_1 = Math_fround(HEAPF32[$7_1 >> 2]);
  $9_1 = $3_1 + 36 | 0;
  $10_1 = Math_fround(HEAPF32[$9_1 >> 2]);
  $11_1 = $3_1 + 24 | 0;
  $12_1 = Math_fround(HEAPF32[$11_1 >> 2]);
  $13_1 = $3_1 + 20 | 0;
  $14_1 = Math_fround(HEAPF32[$13_1 >> 2]);
  $15_1 = $1_1 + 20 | 0;
  $16_1 = Math_fround(HEAPF32[$15_1 >> 2]);
  $17_1 = $1_1 + 36 | 0;
  $18_1 = Math_fround(HEAPF32[$17_1 >> 2]);
  $19_1 = $1_1 + 24 | 0;
  $20_1 = Math_fround(HEAPF32[$19_1 >> 2]);
  $21_1 = $1_1 + 52 | 0;
  $22_1 = Math_fround(HEAPF32[$21_1 >> 2]);
  $23_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
  $24_1 = $3_1 + 52 | 0;
  $25_1 = Math_fround(HEAPF32[$24_1 >> 2]);
  $26_1 = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
  $27_1 = $1_1 + 40 | 0;
  $28_1 = Math_fround(HEAPF32[$27_1 >> 2]);
  $29_1 = $1_1 + 56 | 0;
  $30_1 = Math_fround(HEAPF32[$29_1 >> 2]);
  $31_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
  $32_1 = $3_1 + 56 | 0;
  $33_1 = Math_fround(HEAPF32[$32_1 >> 2]);
  $34_1 = Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]);
  $35_1 = Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]);
  $36_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
  $37_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
  $38_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
  $39_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $40_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $41_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $42_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $43_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $44_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $45_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $46_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
  $47_1 = Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]);
  $48_1 = Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]);
  $49_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $50_1 = 0;
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  $51_1 = Math_fround(Math_fround($46_1 - $45_1) - Math_fround($48_1 - $47_1));
  $46_1 = Math_fround(-$51_1);
  $52_1 = Math_fround(Math_fround($23_1 - $22_1) - Math_fround($26_1 - $25_1));
  $53_1 = Math_fround(Math_fround($31_1 - $30_1) - Math_fround($34_1 - $33_1));
  HEAPF32[($6_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround($44_1 * $46_1) - Math_fround($20_1 * $52_1)) - Math_fround($28_1 * $53_1));
  HEAPF32[($6_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround($43_1 * $46_1) - Math_fround($16_1 * $52_1)) - Math_fround($18_1 * $53_1));
  HEAPF32[($6_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround($40_1 * $46_1) - Math_fround($41_1 * $52_1)) - Math_fround($42_1 * $53_1));
  FUNCTION_TABLE[HEAP32[((HEAP32[$49_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($6_1 + 80 | 0, $49_1, $6_1 + 48 | 0);
  HEAP32[($6_1 + 76 | 0) >> 2] = 0;
  $46_1 = Math_fround(HEAPF32[($6_1 + 80 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[($6_1 + 84 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]);
  HEAPF32[($6_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($46_1 * Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2])) + Math_fround($23_1 * Math_fround(HEAPF32[$17_1 >> 2]))) + Math_fround($26_1 * Math_fround(HEAPF32[$27_1 >> 2]))) + Math_fround(HEAPF32[$29_1 >> 2]));
  HEAPF32[($6_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($46_1 * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2])) + Math_fround($23_1 * Math_fround(HEAPF32[$15_1 >> 2]))) + Math_fround($26_1 * Math_fround(HEAPF32[$19_1 >> 2]))) + Math_fround(HEAPF32[$21_1 >> 2]));
  HEAPF32[($6_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($46_1 * Math_fround(HEAPF32[$1_1 >> 2])) + Math_fround($23_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]))) + Math_fround($26_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]));
  $49_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = 0;
  HEAPF32[($6_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($51_1 * Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2])) + Math_fround($52_1 * Math_fround(HEAPF32[$11_1 >> 2]))) + Math_fround($53_1 * Math_fround(HEAPF32[$7_1 >> 2])));
  HEAPF32[($6_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($51_1 * Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2])) + Math_fround($52_1 * Math_fround(HEAPF32[$13_1 >> 2]))) + Math_fround($53_1 * Math_fround(HEAPF32[$9_1 >> 2])));
  HEAPF32[($6_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround($51_1 * Math_fround(HEAPF32[$3_1 >> 2])) + Math_fround($52_1 * Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]))) + Math_fround($53_1 * Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2])));
  FUNCTION_TABLE[HEAP32[((HEAP32[$49_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($6_1 + 32 | 0, $49_1, $6_1 + 16 | 0);
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  $46_1 = Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2]);
  $31_1 = Math_fround(Math_fround(Math_fround(Math_fround($46_1 * Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2])) + Math_fround($23_1 * Math_fround(HEAPF32[$9_1 >> 2]))) + Math_fround($26_1 * Math_fround(HEAPF32[$7_1 >> 2]))) + Math_fround(HEAPF32[$32_1 >> 2]));
  HEAPF32[($6_1 + 56 | 0) >> 2] = $31_1;
  $34_1 = Math_fround(Math_fround(Math_fround(Math_fround($46_1 * Math_fround(HEAPF32[$3_1 >> 2])) + Math_fround($23_1 * Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]))) + Math_fround($26_1 * Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]))) + Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]));
  HEAPF32[($6_1 + 48 | 0) >> 2] = $34_1;
  $46_1 = Math_fround(Math_fround(Math_fround(Math_fround($46_1 * Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2])) + Math_fround($23_1 * Math_fround(HEAPF32[$13_1 >> 2]))) + Math_fround($26_1 * Math_fround(HEAPF32[$11_1 >> 2]))) + Math_fround(HEAPF32[$24_1 >> 2]));
  HEAPF32[($6_1 + 52 | 0) >> 2] = $46_1;
  HEAP32[($6_1 + 92 | 0) >> 2] = 0;
  $23_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 68 | 0) >> 2]) - $46_1);
  HEAPF32[($6_1 + 84 | 0) >> 2] = $23_1;
  $26_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 64 | 0) >> 2]) - $34_1);
  HEAPF32[($6_1 + 80 | 0) >> 2] = $26_1;
  $31_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 72 | 0) >> 2]) - $31_1);
  HEAPF32[($6_1 + 88 | 0) >> 2] = $31_1;
  $54_1 = Math_fround(0.0);
  $55_1 = Math_fround(0.0);
  $56_1 = Math_fround(0.0);
  $46_1 = Math_fround(0.0);
  label$1 : {
   label$2 : {
    if (Math_fround(Math_fround(Math_fround($26_1 * $26_1) + Math_fround($23_1 * $23_1)) + Math_fround($31_1 * $31_1)) > Math_fround(9.999999747378752e-05) ^ 1 | 0) {
     break label$2
    }
    $7_1 = -33;
    $46_1 = Math_fround(0.0);
    $50_1 = 0;
    $56_1 = Math_fround(0.0);
    $55_1 = Math_fround(0.0);
    $54_1 = Math_fround(0.0);
    label$3 : while (1) {
     $9_1 = $7_1 + 1 | 0;
     if ($9_1 >>> 0 < $7_1 >>> 0) {
      break label$2
     }
     $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     $11_1 = 0;
     HEAP32[($6_1 + 12 | 0) >> 2] = 0;
     $23_1 = Math_fround(-Math_fround(HEAPF32[($6_1 + 80 | 0) >> 2]));
     $26_1 = Math_fround(HEAPF32[($6_1 + 84 | 0) >> 2]);
     $31_1 = Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]);
     HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround($44_1 * $23_1) - Math_fround($20_1 * $26_1)) - Math_fround($28_1 * $31_1));
     HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround($43_1 * $23_1) - Math_fround($16_1 * $26_1)) - Math_fround($18_1 * $31_1));
     HEAPF32[$6_1 >> 2] = Math_fround(Math_fround(Math_fround($40_1 * $23_1) - Math_fround($41_1 * $26_1)) - Math_fround($42_1 * $31_1));
     FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($6_1 + 16 | 0, $7_1, $6_1);
     HEAP32[($6_1 + 76 | 0) >> 2] = 0;
     $23_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
     $26_1 = Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]);
     $31_1 = Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]);
     HEAPF32[($6_1 + 72 | 0) >> 2] = Math_fround($30_1 + Math_fround(Math_fround(Math_fround($42_1 * $23_1) + Math_fround($18_1 * $26_1)) + Math_fround($28_1 * $31_1)));
     HEAPF32[($6_1 + 68 | 0) >> 2] = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($41_1 * $23_1) + Math_fround($16_1 * $26_1)) + Math_fround($20_1 * $31_1)));
     HEAPF32[($6_1 + 64 | 0) >> 2] = Math_fround($45_1 + Math_fround(Math_fround(Math_fround($40_1 * $23_1) + Math_fround($43_1 * $26_1)) + Math_fround($44_1 * $31_1)));
     $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     HEAP32[($6_1 + 12 | 0) >> 2] = 0;
     $23_1 = Math_fround(HEAPF32[($6_1 + 80 | 0) >> 2]);
     $26_1 = Math_fround(HEAPF32[($6_1 + 84 | 0) >> 2]);
     $31_1 = Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]);
     HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround($37_1 * $23_1) + Math_fround($12_1 * $26_1)) + Math_fround($8_1 * $31_1));
     HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround($38_1 * $23_1) + Math_fround($14_1 * $26_1)) + Math_fround($10_1 * $31_1));
     HEAPF32[$6_1 >> 2] = Math_fround(Math_fround(Math_fround($39_1 * $23_1) + Math_fround($36_1 * $26_1)) + Math_fround($35_1 * $31_1));
     FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($6_1 + 16 | 0, $7_1, $6_1);
     HEAP32[($6_1 + 60 | 0) >> 2] = 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = 0;
     $23_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
     $26_1 = Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]);
     $31_1 = Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]);
     $34_1 = Math_fround($33_1 + Math_fround(Math_fround(Math_fround($35_1 * $23_1) + Math_fround($10_1 * $26_1)) + Math_fround($8_1 * $31_1)));
     HEAPF32[($6_1 + 56 | 0) >> 2] = $34_1;
     $34_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 72 | 0) >> 2]) - $34_1);
     HEAPF32[($6_1 + 40 | 0) >> 2] = $34_1;
     $48_1 = Math_fround($25_1 + Math_fround(Math_fround(Math_fround($36_1 * $23_1) + Math_fround($14_1 * $26_1)) + Math_fround($12_1 * $31_1)));
     HEAPF32[($6_1 + 52 | 0) >> 2] = $48_1;
     $48_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 68 | 0) >> 2]) - $48_1);
     HEAPF32[($6_1 + 36 | 0) >> 2] = $48_1;
     $23_1 = Math_fround($47_1 + Math_fround(Math_fround(Math_fround($39_1 * $23_1) + Math_fround($38_1 * $26_1)) + Math_fround($37_1 * $31_1)));
     HEAPF32[($6_1 + 48 | 0) >> 2] = $23_1;
     $23_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 64 | 0) >> 2]) - $23_1);
     HEAPF32[($6_1 + 32 | 0) >> 2] = $23_1;
     if ($46_1 > Math_fround(1.0)) {
      break label$1
     }
     label$4 : {
      $26_1 = Math_fround(HEAPF32[($6_1 + 80 | 0) >> 2]);
      $31_1 = Math_fround(HEAPF32[($6_1 + 84 | 0) >> 2]);
      $57_1 = Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]);
      $58_1 = Math_fround(Math_fround(Math_fround($23_1 * $26_1) + Math_fround($48_1 * $31_1)) + Math_fround($34_1 * $57_1));
      if ($58_1 > Math_fround(0.0) ^ 1 | 0) {
       break label$4
      }
      $22_1 = Math_fround(Math_fround(Math_fround($51_1 * $26_1) + Math_fround($52_1 * $31_1)) + Math_fround($53_1 * $57_1));
      if ($22_1 >= Math_fround(-1.4210854715202004e-14)) {
       break label$1
      }
      HEAP32[($6_1 + 44 | 0) >> 2] = 0;
      HEAPF32[($6_1 + 40 | 0) >> 2] = $34_1;
      HEAPF32[($6_1 + 36 | 0) >> 2] = $48_1;
      HEAPF32[($6_1 + 32 | 0) >> 2] = $23_1;
      $46_1 = Math_fround($46_1 - Math_fround($58_1 / $22_1));
      $23_1 = Math_fround(Math_fround(1.0) - $46_1);
      $33_1 = Math_fround(Math_fround($23_1 * Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2])) + Math_fround($46_1 * Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2])));
      $25_1 = Math_fround(Math_fround($23_1 * Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2])) + Math_fround($46_1 * Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2])));
      $47_1 = Math_fround(Math_fround($23_1 * Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2])) + Math_fround($46_1 * Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2])));
      $30_1 = Math_fround(Math_fround($23_1 * Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2])) + Math_fround($46_1 * Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2])));
      $22_1 = Math_fround(Math_fround($23_1 * Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2])) + Math_fround($46_1 * Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2])));
      $45_1 = Math_fround(Math_fround($23_1 * Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2])) + Math_fround($46_1 * Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2])));
      $50_1 = HEAP32[($6_1 + 92 | 0) >> 2] | 0;
      $54_1 = $26_1;
      $55_1 = $31_1;
      $56_1 = $57_1;
     }
     label$5 : {
      if ($561(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $6_1 + 32 | 0 | 0) | 0) {
       break label$5
      }
      $556(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 64 | 0 | 0, $6_1 + 48 | 0 | 0);
     }
     if (!($560(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $6_1 + 80 | 0 | 0) | 0)) {
      break label$2
     }
     $7_1 = $9_1;
     $23_1 = Math_fround(HEAPF32[($6_1 + 80 | 0) >> 2]);
     $797_1 = Math_fround($23_1 * $23_1);
     $23_1 = Math_fround(HEAPF32[($6_1 + 84 | 0) >> 2]);
     $803_1 = Math_fround($797_1 + Math_fround($23_1 * $23_1));
     $23_1 = Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]);
     if (Math_fround($803_1 + Math_fround($23_1 * $23_1)) > Math_fround(9.999999747378752e-05)) {
      continue label$3
     }
     break label$3;
    };
   }
   HEAPF32[($5_1 + 164 | 0) >> 2] = $46_1;
   label$6 : {
    label$7 : {
     $46_1 = Math_fround(Math_fround(Math_fround($54_1 * $54_1) + Math_fround($55_1 * $55_1)) + Math_fround($56_1 * $56_1));
     if ($46_1 >= Math_fround(1.4210854715202004e-14) ^ 1 | 0) {
      break label$7
     }
     HEAP32[($5_1 + 144 | 0) >> 2] = $50_1;
     $26_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($46_1)));
     $46_1 = Math_fround($56_1 * $26_1);
     HEAPF32[($5_1 + 140 | 0) >> 2] = $46_1;
     $23_1 = Math_fround($55_1 * $26_1);
     HEAPF32[($5_1 + 136 | 0) >> 2] = $23_1;
     $26_1 = Math_fround($54_1 * $26_1);
     HEAPF32[($5_1 + 132 | 0) >> 2] = $26_1;
     break label$6;
    }
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = 0;
    HEAP32[($5_1 + 132 | 0) >> 2] = 0;
    HEAP32[($5_1 + 136 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 140 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $46_1 = Math_fround(0.0);
    $23_1 = Math_fround(0.0);
    $26_1 = Math_fround(0.0);
   }
   $11_1 = 0;
   if (Math_fround(Math_fround(Math_fround($51_1 * $26_1) + Math_fround($52_1 * $23_1)) + Math_fround($53_1 * $46_1)) >= Math_fround(-Math_fround(HEAPF32[($5_1 + 172 | 0) >> 2]))) {
    break label$1
   }
   $562(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 | 0);
   i64toi32_i32$2 = $6_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $877_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1 + 156 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $877_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = HEAP32[$6_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
   $880_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1;
   HEAP32[($5_1 + 148 | 0) >> 2] = $880_1;
   HEAP32[($5_1 + 152 | 0) >> 2] = i64toi32_i32$0;
   $11_1 = 1;
  }
  global$0 = $6_1 + 96 | 0;
  return $11_1 | 0;
 }
 
 function $620($0_1) {
  $0_1 = $0_1 | 0;
  $581($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $621($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $72($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 16120;
  HEAP32[($0_1 + 8 | 0) >> 2] = 16148;
  HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  $5_1 = $4_1 ? $2_1 : $3_1;
  HEAP32[($0_1 + 48 | 0) >> 2] = $5_1;
  $3_1 = $4_1 ? $3_1 : $2_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $3_1;
  $6_1 = $0_1 + 56 | 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$6_1 >> 2] = $2_1;
  $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($2_1, HEAP32[($3_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[$6_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($3_1, $2_1);
  HEAP8[($0_1 + 76 | 0) >> 0] = $4_1;
  return $0_1 | 0;
 }
 
 function $622($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 16148;
  HEAP32[$0_1 >> 2] = 16120;
  $1_1 = $0_1 + 56 | 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  $3_1 = $0_1 + 72 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($2_1, HEAP32[$3_1 >> 2] | 0);
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($1_1, HEAP32[$3_1 >> 2] | 0);
  $211($0_1 + 8 | 0 | 0) | 0;
  $73($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $623($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 16148;
  HEAP32[$0_1 >> 2] = 16120;
  $1_1 = $0_1 + 56 | 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  $3_1 = $0_1 + 72 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($2_1, HEAP32[$3_1 >> 2] | 0);
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($1_1, HEAP32[$3_1 >> 2] | 0);
  $211($0_1 + 8 | 0 | 0) | 0;
  $73($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $624($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($3_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $4_1 = $3_1 ? $3_1 << 1 | 0 : 1;
    if (($3_1 | 0) >= ($4_1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($4_1) {
       break label$4
      }
      $5_1 = 0;
      break label$3;
     }
     $5_1 = $79($4_1 << 2 | 0 | 0, 16 | 0) | 0;
     $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    }
    label$5 : {
     if (($3_1 | 0) < (1 | 0)) {
      break label$5
     }
     $2_1 = 0;
     $6_1 = $3_1;
     label$6 : while (1) {
      HEAP32[($5_1 + $2_1 | 0) >> 2] = HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
      $2_1 = $2_1 + 4 | 0;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$7
     }
     label$8 : {
      if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
       break label$8
      }
      $80($2_1 | 0);
      $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    }
    HEAP32[($1_1 + 12 | 0) >> 2] = $5_1;
    HEAP8[($1_1 + 16 | 0) >> 0] = 1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
    $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
   HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
 }
 
 function $625($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 16148;
  $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($1_1, HEAP32[($0_1 + 64 | 0) >> 2] | 0);
  $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($1_1, HEAP32[($0_1 + 64 | 0) >> 2] | 0);
  $211($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $626($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 16148;
  $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($1_1, HEAP32[($0_1 + 64 | 0) >> 2] | 0);
  $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($1_1, HEAP32[($0_1 + 64 | 0) >> 2] | 0);
  $211($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $627($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), i64toi32_i32$2 = 0, $8_1 = Math_fround(0), $13_1 = 0, $5_1 = 0, $12_1 = 0, $164_1 = 0, $168_1 = 0, $173_1 = 0, $177_1 = 0, $182_1 = 0, $186_1 = 0;
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  $5_1 = $616($4_1 + 136 | 0 | 0, 16160 | 0) | 0;
  label$1 : {
   $6_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $7_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $8_1 = $6_1 < $7_1 ? $6_1 : $7_1;
   $9_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
   if (($8_1 < $9_1 ? $8_1 : $9_1) > Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2])) {
    break label$1
   }
   $10_1 = ($6_1 > $7_1 ^ 1 | 0) << 4 | 0;
   if (Math_fround(HEAPF32[($1_1 + (Math_fround(HEAPF32[($1_1 + $10_1 | 0) >> 2]) > $9_1 ? $10_1 : 32) | 0) >> 2]) < Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2])) {
    break label$1
   }
   $6_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $10_1 = $1_1 + 24 | 0;
   $7_1 = Math_fround(HEAPF32[$10_1 >> 2]);
   $8_1 = $6_1 < $7_1 ? $6_1 : $7_1;
   $11_1 = $1_1 + 40 | 0;
   $9_1 = Math_fround(HEAPF32[$11_1 >> 2]);
   if (($8_1 < $9_1 ? $8_1 : $9_1) > Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2])) {
    break label$1
   }
   $10_1 = $6_1 > $7_1 ? $1_1 + 8 | 0 : $10_1;
   if (Math_fround(HEAPF32[(Math_fround(HEAPF32[$10_1 >> 2]) > $9_1 ? $10_1 : $11_1) >> 2]) < Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2])) {
    break label$1
   }
   $6_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $10_1 = $1_1 + 20 | 0;
   $7_1 = Math_fround(HEAPF32[$10_1 >> 2]);
   $8_1 = $6_1 < $7_1 ? $6_1 : $7_1;
   $11_1 = $1_1 + 36 | 0;
   $9_1 = Math_fround(HEAPF32[$11_1 >> 2]);
   if (($8_1 < $9_1 ? $8_1 : $9_1) > Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2])) {
    break label$1
   }
   $10_1 = $6_1 > $7_1 ? $1_1 + 4 | 0 : $10_1;
   if (Math_fround(HEAPF32[(Math_fround(HEAPF32[$10_1 >> 2]) > $9_1 ? $10_1 : $11_1) >> 2]) < Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2])) {
    break label$1
   }
   if ((HEAP32[((HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) > (19 | 0)) {
    break label$1
   }
   $10_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   $12_1 = $179($4_1 + 24 | 0 | 0) | 0;
   i64toi32_i32$2 = $1_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $164_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1 + 92 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $164_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
   $168_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1 + 100 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $168_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $173_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1 + 108 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $173_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   $177_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1 + 116 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $177_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $182_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1 + 124 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $182_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($4_1 + 24 | 0) >> 2] = 16352;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $186_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1;
   HEAP32[($4_1 + 84 | 0) >> 2] = $186_1;
   HEAP32[($4_1 + 88 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 72 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = 1;
   HEAP32[($4_1 + 20 | 0) >> 2] = $3_1;
   HEAP32[($4_1 + 16 | 0) >> 2] = $2_1;
   $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   HEAP32[$4_1 >> 2] = $1_1;
   $11_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = $11_1;
   $6_1 = Math_fround(HEAPF32[((HEAP32[($0_1 + 44 | 0) >> 2] | 0) + 32 | 0) >> 2]);
   HEAP32[($4_1 + 4 | 0) >> 2] = $4_1 + 24 | 0;
   $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     if ($6_1 > Math_fround(0.0) ^ 1 | 0) {
      break label$3
     }
     $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$10_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($10_1, $1_1, $4_1, 0, 2) | 0;
     break label$2;
    }
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$10_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($10_1, $1_1, $4_1, HEAP32[($0_1 + 64 | 0) >> 2] | 0, 1) | 0;
   }
   label$4 : {
    label$5 : {
     $11_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
     $13_1 = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
     if ((HEAP32[($13_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0)) {
      break label$5
     }
     HEAP32[($11_1 + 8 | 0) >> 2] = $4_1;
     FUNCTION_TABLE[HEAP32[((HEAP32[$11_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($11_1, $2_1, $3_1);
     break label$4;
    }
    $13_1 = HEAP32[($11_1 + 12 | 0) >> 2] | 0;
    HEAP32[($11_1 + 12 | 0) >> 2] = $4_1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$11_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($11_1, $2_1, $3_1);
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, HEAP32[($0_1 + 36 | 0) >> 2] | 0, $4_1, HEAP32[($0_1 + 52 | 0) >> 2] | 0, HEAP32[($0_1 + 44 | 0) >> 2] | 0);
   $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($2_1 + ((HEAP32[((HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) ? 8 : 12) | 0) >> 2] = $13_1;
   FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$10_1 >> 2] | 0) + 60 | 0) >> 2] | 0]($10_1, $1_1);
   $193($12_1 | 0) | 0;
  }
  $617($5_1 | 0) | 0;
  global$0 = $4_1 + 144 | 0;
 }
 
 function $628($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $16_1 = Math_fround(0), $18_1 = Math_fround(0), $20_1 = Math_fround(0), $22_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $27_1 = Math_fround(0), $30_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $17_1 = Math_fround(0), $19_1 = Math_fround(0), $21_1 = Math_fround(0), $23_1 = Math_fround(0), $26_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0);
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAPF32[($0_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 40 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
  $4_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $7_1 = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $9_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $22_1 = Math_fround(HEAPF32[$4_1 >> 2]);
  $23_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]);
  $25_1 = Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
  $27_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
  $28_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $29_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $30_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = 0;
  HEAPF32[($6_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($30_1 * $29_1) + Math_fround($16_1 * $15_1)) + Math_fround($18_1 * $17_1));
  HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($30_1 * $28_1) + Math_fround($16_1 * $13_1)) + Math_fround($18_1 * $14_1));
  HEAPF32[($6_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($27_1 * $29_1) + Math_fround($11_1 * $15_1)) + Math_fround($12_1 * $17_1));
  HEAPF32[($6_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($27_1 * $28_1) + Math_fround($11_1 * $13_1)) + Math_fround($12_1 * $14_1));
  $25_1 = Math_fround(-$25_1);
  HEAPF32[($6_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($30_1 * $25_1) - Math_fround($16_1 * $7_1)) - Math_fround($18_1 * $8_1)) + Math_fround(Math_fround(Math_fround($30_1 * $26_1) + Math_fround($16_1 * $9_1)) + Math_fround($18_1 * $10_1)));
  HEAPF32[($6_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($27_1 * $25_1) - Math_fround($11_1 * $7_1)) - Math_fround($12_1 * $8_1)) + Math_fround(Math_fround(Math_fround($27_1 * $26_1) + Math_fround($11_1 * $9_1)) + Math_fround($12_1 * $10_1)));
  HEAP32[($6_1 + 12 | 0) >> 2] = 0;
  HEAPF32[$6_1 >> 2] = Math_fround(Math_fround(Math_fround($22_1 * $21_1) + Math_fround($24_1 * $23_1)) + Math_fround($20_1 * $19_1));
  HEAPF32[($6_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround($30_1 * $21_1) + Math_fround($16_1 * $23_1)) + Math_fround($18_1 * $19_1));
  HEAPF32[($6_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround($27_1 * $21_1) + Math_fround($11_1 * $23_1)) + Math_fround($12_1 * $19_1));
  HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround($22_1 * $29_1) + Math_fround($24_1 * $15_1)) + Math_fround($20_1 * $17_1));
  HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround($22_1 * $28_1) + Math_fround($24_1 * $13_1)) + Math_fround($20_1 * $14_1));
  HEAPF32[($6_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($22_1 * $25_1) - Math_fround($24_1 * $7_1)) - Math_fround($20_1 * $8_1)) + Math_fround(Math_fround(Math_fround($22_1 * $26_1) + Math_fround($24_1 * $9_1)) + Math_fround($20_1 * $10_1)));
  $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($4_1, $6_1, $0_1 + 4 | 0, $0_1 + 20 | 0);
  $11_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]) + $1_1);
  HEAPF32[($0_1 + 20 | 0) >> 2] = Math_fround($11_1 + Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]));
  $4_1 = $0_1 + 24 | 0;
  HEAPF32[$4_1 >> 2] = Math_fround($11_1 + Math_fround(HEAPF32[$4_1 >> 2]));
  $4_1 = $0_1 + 28 | 0;
  HEAPF32[$4_1 >> 2] = Math_fround($11_1 + Math_fround(HEAPF32[$4_1 >> 2]));
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]) - $11_1);
  $4_1 = $0_1 + 8 | 0;
  HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) - $11_1);
  $0_1 = $0_1 + 12 | 0;
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) - $11_1);
  global$0 = $6_1 + 64 | 0;
 }
 
 function $629($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $7_1 = 0, $5_1 = 0, $8_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $10_1 = Math_fround(0), $80_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = $616($5_1 + 8 | 0 | 0, 16202 | 0) | 0;
  label$1 : {
   $7_1 = HEAPU8[($0_1 + 76 | 0) >> 0] | 0;
   $8_1 = $7_1 ? $1_1 : $2_1;
   $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
   if (((HEAP32[($9_1 + 4 | 0) >> 2] | 0) + -21 | 0) >>> 0 > 8 >>> 0) {
    break label$1
   }
   $2_1 = $7_1 ? $2_1 : $1_1;
   if ((HEAP32[((HEAP32[($2_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) > (19 | 0)) {
    break label$1
   }
   $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$9_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($9_1));
   $1_1 = $0_1 + 72 | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
   $7_1 = $0_1 + 8 | 0;
   $628($7_1 | 0, Math_fround($10_1), $3_1 | 0, $2_1 | 0, $8_1 | 0, $4_1 | 0);
   $1_1 = HEAP32[$1_1 >> 2] | 0;
   HEAP32[($1_1 + 776 | 0) >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
   HEAP32[($1_1 + 772 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$9_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($9_1, $7_1, $0_1 + 12 | 0, $0_1 + 28 | 0);
   label$2 : {
    $2_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    if (!(HEAP32[($2_1 + 780 | 0) >> 2] | 0)) {
     break label$2
    }
    $1_1 = HEAP32[($2_1 + 772 | 0) >> 2] | 0;
    $80_1 = $1_1;
    $9_1 = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    $4_1 = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    $1_1 = ($1_1 | 0) == ($4_1 | 0);
    $219($2_1 | 0, ($1_1 ? $80_1 : $9_1) + 4 | 0 | 0, ($1_1 ? $9_1 : $4_1) + 4 | 0 | 0);
   }
   i64toi32_i32$1 = $0_1 + 44 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  }
  $617($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $630($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $8_1 = Math_fround(0), $29_1 = Math_fround(0), $19_1 = Math_fround(0), $31_1 = Math_fround(0), $36_1 = Math_fround(0), $38_1 = Math_fround(0), $18_1 = Math_fround(0), $33_1 = Math_fround(0), $40_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $39_1 = Math_fround(0), $44_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $34_1 = Math_fround(0), $42_1 = Math_fround(0), $11_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $41_1 = Math_fround(0), $43_1 = Math_fround(0), $30_1 = Math_fround(0), $32_1 = Math_fround(0), $37_1 = Math_fround(0), $47_1 = Math_fround(0), $48_1 = Math_fround(0), $22_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $35_1 = Math_fround(0), $49_1 = Math_fround(0), $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54_1 = Math_fround(0), $55_1 = Math_fround(0), $56_1 = Math_fround(0), $57_1 = Math_fround(0), $58_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $82_1 = Math_fround(0), $93_1 = Math_fround(0), $104_1 = Math_fround(0), $59_1 = Math_fround(0), $60_1 = Math_fround(0), $61_1 = Math_fround(0), $62_1 = Math_fround(0), $63_1 = Math_fround(0);
  $5_1 = global$0 - 240 | 0;
  global$0 = $5_1;
  $6_1 = Math_fround(1.0);
  label$1 : {
   $7_1 = HEAPU8[($0_1 + 76 | 0) >> 0] | 0;
   $0_1 = $7_1 ? $2_1 : $1_1;
   $8_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 116 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]));
   $82_1 = Math_fround($8_1 * $8_1);
   $8_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 120 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]));
   $93_1 = Math_fround($82_1 + Math_fround($8_1 * $8_1));
   $8_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]));
   $104_1 = Math_fround($93_1 + Math_fround($8_1 * $8_1));
   $8_1 = Math_fround(HEAPF32[($0_1 + 276 | 0) >> 2]);
   if ($104_1 < Math_fround($8_1 * $8_1)) {
    break label$1
   }
   $2_1 = $7_1 ? $1_1 : $2_1;
   $1_1 = HEAP32[($2_1 + 192 | 0) >> 2] | 0;
   if (((HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -21 | 0) >>> 0 > 8 >>> 0) {
    break label$1
   }
   $9_1 = Math_fround(HEAPF32[($0_1 + 92 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($0_1 + 76 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($0_1 + 108 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]);
   $16_1 = Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]);
   $17_1 = Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
   $28_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   $29_1 = Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2]);
   $30_1 = Math_fround(HEAPF32[($0_1 + 116 | 0) >> 2]);
   $31_1 = Math_fround(HEAPF32[($2_1 + 28 | 0) >> 2]);
   $32_1 = Math_fround(HEAPF32[($0_1 + 120 | 0) >> 2]);
   $33_1 = Math_fround(HEAPF32[($2_1 + 44 | 0) >> 2]);
   $34_1 = Math_fround(HEAPF32[($0_1 + 124 | 0) >> 2]);
   $35_1 = Math_fround(Math_fround(Math_fround($29_1 * $30_1) + Math_fround($31_1 * $32_1)) + Math_fround($33_1 * $34_1));
   $36_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $37_1 = Math_fround(-Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]));
   $38_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
   $39_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
   $40_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
   $41_1 = Math_fround(HEAPF32[($2_1 + 60 | 0) >> 2]);
   $42_1 = Math_fround(Math_fround(Math_fround($36_1 * $37_1) - Math_fround($38_1 * $39_1)) - Math_fround($40_1 * $41_1));
   $43_1 = Math_fround($42_1 + Math_fround(Math_fround(Math_fround($36_1 * $30_1) + Math_fround($38_1 * $32_1)) + Math_fround($40_1 * $34_1)));
   $44_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
   $45_1 = Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]);
   $46_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
   HEAP32[($5_1 + 236 | 0) >> 2] = 0;
   $47_1 = Math_fround(Math_fround(Math_fround($29_1 * $37_1) - Math_fround($31_1 * $39_1)) - Math_fround($33_1 * $41_1));
   $48_1 = Math_fround($47_1 + Math_fround(Math_fround(Math_fround($29_1 * $45_1) + Math_fround($31_1 * $44_1)) + Math_fround($33_1 * $46_1)));
   HEAPF32[($5_1 + 232 | 0) >> 2] = $48_1;
   $42_1 = Math_fround($42_1 + Math_fround(Math_fround(Math_fround($36_1 * $45_1) + Math_fround($38_1 * $44_1)) + Math_fround($40_1 * $46_1)));
   HEAPF32[($5_1 + 228 | 0) >> 2] = $42_1;
   $39_1 = Math_fround(Math_fround(Math_fround($19_1 * $37_1) - Math_fround($18_1 * $39_1)) - Math_fround($8_1 * $41_1));
   $44_1 = Math_fround($39_1 + Math_fround(Math_fround(Math_fround($19_1 * $45_1) + Math_fround($18_1 * $44_1)) + Math_fround($8_1 * $46_1)));
   HEAPF32[($5_1 + 224 | 0) >> 2] = $44_1;
   $37_1 = $44_1;
   label$2 : {
    $46_1 = Math_fround($39_1 + Math_fround(Math_fround(Math_fround($19_1 * $30_1) + Math_fround($18_1 * $32_1)) + Math_fround($8_1 * $34_1)));
    if ($46_1 < $44_1 ^ 1 | 0) {
     break label$2
    }
    HEAPF32[($5_1 + 224 | 0) >> 2] = $46_1;
    $37_1 = $46_1;
   }
   $45_1 = Math_fround($47_1 + $35_1);
   $30_1 = $42_1;
   label$3 : {
    if ($43_1 < $42_1 ^ 1 | 0) {
     break label$3
    }
    HEAPF32[($5_1 + 228 | 0) >> 2] = $43_1;
    $30_1 = $43_1;
   }
   $32_1 = $48_1;
   label$4 : {
    if ($45_1 < $48_1 ^ 1 | 0) {
     break label$4
    }
    HEAPF32[($5_1 + 232 | 0) >> 2] = $45_1;
    $32_1 = $45_1;
   }
   $34_1 = Math_fround($31_1 * $9_1);
   $39_1 = Math_fround($29_1 * $10_1);
   $41_1 = Math_fround($31_1 * $12_1);
   $35_1 = Math_fround($29_1 * $13_1);
   $47_1 = Math_fround($31_1 * $16_1);
   $49_1 = Math_fround($29_1 * $17_1);
   $50_1 = Math_fround($38_1 * $9_1);
   $51_1 = Math_fround($36_1 * $10_1);
   $52_1 = Math_fround($38_1 * $12_1);
   $53_1 = Math_fround($36_1 * $13_1);
   $54_1 = Math_fround($38_1 * $16_1);
   $55_1 = Math_fround($36_1 * $17_1);
   $9_1 = Math_fround($18_1 * $9_1);
   $10_1 = Math_fround($19_1 * $10_1);
   $12_1 = Math_fround($18_1 * $12_1);
   $13_1 = Math_fround($19_1 * $13_1);
   $16_1 = Math_fround($18_1 * $16_1);
   $17_1 = Math_fround($19_1 * $17_1);
   $56_1 = Math_fround($31_1 * $20_1);
   $57_1 = Math_fround($29_1 * $21_1);
   $58_1 = Math_fround($31_1 * $23_1);
   $59_1 = Math_fround($29_1 * $24_1);
   $31_1 = Math_fround($31_1 * $27_1);
   $29_1 = Math_fround($29_1 * $28_1);
   $60_1 = Math_fround($38_1 * $20_1);
   $61_1 = Math_fround($36_1 * $21_1);
   $62_1 = Math_fround($38_1 * $23_1);
   $63_1 = Math_fround($36_1 * $24_1);
   $38_1 = Math_fround($38_1 * $27_1);
   $36_1 = Math_fround($36_1 * $28_1);
   $20_1 = Math_fround($18_1 * $20_1);
   $21_1 = Math_fround($19_1 * $21_1);
   $23_1 = Math_fround($18_1 * $23_1);
   $24_1 = Math_fround($19_1 * $24_1);
   $27_1 = Math_fround($18_1 * $27_1);
   $19_1 = Math_fround($19_1 * $28_1);
   HEAP32[($5_1 + 220 | 0) >> 2] = 0;
   HEAPF32[($5_1 + 216 | 0) >> 2] = $48_1;
   HEAPF32[($5_1 + 212 | 0) >> 2] = $42_1;
   HEAPF32[($5_1 + 208 | 0) >> 2] = $44_1;
   $18_1 = $44_1;
   label$5 : {
    if ($18_1 < $46_1 ^ 1 | 0) {
     break label$5
    }
    HEAPF32[($5_1 + 208 | 0) >> 2] = $46_1;
    $18_1 = $46_1;
   }
   $28_1 = Math_fround($39_1 + $34_1);
   $34_1 = Math_fround($33_1 * $11_1);
   $39_1 = Math_fround($35_1 + $41_1);
   $41_1 = Math_fround($33_1 * $14_1);
   $35_1 = Math_fround($33_1 * $15_1);
   $47_1 = Math_fround($49_1 + $47_1);
   $49_1 = Math_fround($51_1 + $50_1);
   $50_1 = Math_fround($40_1 * $11_1);
   $51_1 = Math_fround($53_1 + $52_1);
   $52_1 = Math_fround($40_1 * $14_1);
   $53_1 = Math_fround($40_1 * $15_1);
   $54_1 = Math_fround($55_1 + $54_1);
   $11_1 = Math_fround($8_1 * $11_1);
   $9_1 = Math_fround($10_1 + $9_1);
   $10_1 = Math_fround($8_1 * $14_1);
   $12_1 = Math_fround($13_1 + $12_1);
   $13_1 = Math_fround($8_1 * $15_1);
   $14_1 = Math_fround($17_1 + $16_1);
   $15_1 = Math_fround($57_1 + $56_1);
   $16_1 = Math_fround($33_1 * $22_1);
   $17_1 = Math_fround($59_1 + $58_1);
   $55_1 = Math_fround($33_1 * $25_1);
   $33_1 = Math_fround($33_1 * $26_1);
   $29_1 = Math_fround($29_1 + $31_1);
   $31_1 = Math_fround($61_1 + $60_1);
   $56_1 = Math_fround($40_1 * $22_1);
   $57_1 = Math_fround($63_1 + $62_1);
   $58_1 = Math_fround($40_1 * $25_1);
   $40_1 = Math_fround($40_1 * $26_1);
   $36_1 = Math_fround($36_1 + $38_1);
   $38_1 = Math_fround($8_1 * $22_1);
   $20_1 = Math_fround($21_1 + $20_1);
   $21_1 = Math_fround($8_1 * $25_1);
   $22_1 = Math_fround($24_1 + $23_1);
   $8_1 = Math_fround($8_1 * $26_1);
   $23_1 = Math_fround($19_1 + $27_1);
   $19_1 = $42_1;
   label$6 : {
    if ($19_1 < $43_1 ^ 1 | 0) {
     break label$6
    }
    HEAPF32[($5_1 + 212 | 0) >> 2] = $43_1;
    $19_1 = $43_1;
   }
   $24_1 = Math_fround($28_1 + $34_1);
   $25_1 = Math_fround($39_1 + $41_1);
   $26_1 = Math_fround($47_1 + $35_1);
   $27_1 = Math_fround($49_1 + $50_1);
   $28_1 = Math_fround($51_1 + $52_1);
   $34_1 = Math_fround($54_1 + $53_1);
   $9_1 = Math_fround($9_1 + $11_1);
   $10_1 = Math_fround($12_1 + $10_1);
   $11_1 = Math_fround($14_1 + $13_1);
   $12_1 = Math_fround($15_1 + $16_1);
   $13_1 = Math_fround($17_1 + $55_1);
   $33_1 = Math_fround($29_1 + $33_1);
   $31_1 = Math_fround($31_1 + $56_1);
   $14_1 = Math_fround($57_1 + $58_1);
   $36_1 = Math_fround($36_1 + $40_1);
   $38_1 = Math_fround($20_1 + $38_1);
   $40_1 = Math_fround($22_1 + $21_1);
   $15_1 = Math_fround($23_1 + $8_1);
   $29_1 = $48_1;
   label$7 : {
    if ($29_1 < $45_1 ^ 1 | 0) {
     break label$7
    }
    HEAPF32[($5_1 + 216 | 0) >> 2] = $45_1;
    $29_1 = $45_1;
   }
   $8_1 = Math_fround(HEAPF32[($0_1 + 272 | 0) >> 2]);
   HEAPF32[($5_1 + 232 | 0) >> 2] = Math_fround($32_1 - $8_1);
   HEAPF32[($5_1 + 228 | 0) >> 2] = Math_fround($30_1 - $8_1);
   HEAPF32[($5_1 + 224 | 0) >> 2] = Math_fround($37_1 - $8_1);
   HEAPF32[($5_1 + 216 | 0) >> 2] = Math_fround($8_1 + $29_1);
   HEAPF32[($5_1 + 212 | 0) >> 2] = Math_fround($8_1 + $19_1);
   HEAPF32[($5_1 + 208 | 0) >> 2] = Math_fround($8_1 + $18_1);
   HEAP32[($5_1 + 128 | 0) >> 2] = 0;
   HEAPF32[($5_1 + 124 | 0) >> 2] = $45_1;
   HEAPF32[($5_1 + 120 | 0) >> 2] = $43_1;
   HEAPF32[($5_1 + 116 | 0) >> 2] = $46_1;
   HEAP32[($5_1 + 112 | 0) >> 2] = 0;
   HEAPF32[($5_1 + 108 | 0) >> 2] = $24_1;
   HEAPF32[($5_1 + 104 | 0) >> 2] = $25_1;
   HEAPF32[($5_1 + 100 | 0) >> 2] = $26_1;
   HEAP32[($5_1 + 96 | 0) >> 2] = 0;
   HEAPF32[($5_1 + 92 | 0) >> 2] = $27_1;
   HEAPF32[($5_1 + 88 | 0) >> 2] = $28_1;
   HEAPF32[($5_1 + 84 | 0) >> 2] = $34_1;
   HEAP32[($5_1 + 80 | 0) >> 2] = 0;
   HEAPF32[($5_1 + 76 | 0) >> 2] = $9_1;
   HEAPF32[($5_1 + 72 | 0) >> 2] = $10_1;
   HEAP32[($5_1 + 64 | 0) >> 2] = 0;
   HEAPF32[($5_1 + 60 | 0) >> 2] = $48_1;
   HEAPF32[($5_1 + 56 | 0) >> 2] = $42_1;
   HEAPF32[($5_1 + 52 | 0) >> 2] = $44_1;
   HEAP32[($5_1 + 48 | 0) >> 2] = 0;
   HEAPF32[($5_1 + 44 | 0) >> 2] = $12_1;
   HEAPF32[($5_1 + 40 | 0) >> 2] = $13_1;
   HEAPF32[($5_1 + 36 | 0) >> 2] = $33_1;
   HEAP32[($5_1 + 32 | 0) >> 2] = 0;
   HEAPF32[($5_1 + 28 | 0) >> 2] = $31_1;
   HEAPF32[($5_1 + 24 | 0) >> 2] = $14_1;
   HEAPF32[($5_1 + 20 | 0) >> 2] = $36_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = 0;
   HEAPF32[($5_1 + 12 | 0) >> 2] = $38_1;
   HEAPF32[($5_1 + 8 | 0) >> 2] = $40_1;
   HEAPF32[($5_1 + 196 | 0) >> 2] = $8_1;
   HEAPF32[($5_1 + 68 | 0) >> 2] = $11_1;
   HEAPF32[($5_1 + 4 | 0) >> 2] = $15_1;
   HEAP32[$5_1 >> 2] = 16488;
   HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($0_1 + 268 | 0) >> 2] | 0;
   label$8 : {
    if (!$1_1) {
     break label$8
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($1_1, $5_1, $5_1 + 224 | 0, $5_1 + 208 | 0);
    $8_1 = Math_fround(HEAPF32[($5_1 + 200 | 0) >> 2]);
    if ($8_1 < Math_fround(HEAPF32[($0_1 + 268 | 0) >> 2]) ^ 1 | 0) {
     break label$8
    }
    HEAPF32[($0_1 + 268 | 0) >> 2] = $8_1;
    $211($5_1 | 0) | 0;
    $6_1 = $8_1;
    break label$1;
   }
   $211($5_1 | 0) | 0;
  }
  global$0 = $5_1 + 240 | 0;
  return Math_fround($6_1);
 }
 
 function $631($0_1) {
  $0_1 = $0_1 | 0;
  $193($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $632($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 80 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $633($0_1) {
  $0_1 = $0_1 | 0;
  $211($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $634($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $7_1 = Math_fround(0), $5_1 = 0, $70_1 = 0, $74_1 = 0, $79_1 = 0, $83_1 = 0, $88_1 = 0, $93_1 = 0;
  $4_1 = global$0 - 800 | 0;
  global$0 = $4_1;
  $5_1 = $616($4_1 + 792 | 0 | 0, 16672 | 0) | 0;
  i64toi32_i32$1 = $4_1 + 740 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($4_1 + 728 | 0) + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 748 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = ($4_1 + 728 | 0) + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(($4_1 + 728 | 0) + 40 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $4_1 + 780 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 788 | 0) >> 2] = 0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[($4_1 + 732 | 0) >> 2] = 0;
  HEAP32[($4_1 + 736 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 728 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[($4_1 + 760 | 0) >> 2] = 0;
  HEAP32[($4_1 + 764 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[($4_1 + 720 | 0) >> 2] = 0;
  HEAP32[($4_1 + 724 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 552 | 0) >> 2] = 15992;
  HEAP32[($4_1 + 716 | 0) >> 2] = HEAP32[($0_1 + 200 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 196 | 0) >> 2] | 0;
  $145($4_1 + 496 | 0 | 0) | 0;
  i64toi32_i32$1 = $4_1 + 524 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(($4_1 + 496 | 0) + 24 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $4_1 + 532 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(($4_1 + 496 | 0) + 44 | 0) >> 2] = 0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[($4_1 + 512 | 0) >> 2] = 1065353216;
  HEAP32[($4_1 + 516 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 496 | 0) >> 2] = 9852;
  HEAP32[($4_1 + 548 | 0) >> 2] = 0;
  HEAP32[($4_1 + 544 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 528 | 0) >> 2] = $6_1;
  HEAP32[($4_1 + 500 | 0) >> 2] = 8;
  $6_1 = $179($4_1 + 384 | 0 | 0) | 0;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $70_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 384 | 0) + 68 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $70_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $74_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + 460 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $74_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $79_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + 468 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $79_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + 476 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $83_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $88_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + 484 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $88_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($4_1 + 388 | 0) >> 2] = 1;
  HEAP32[($4_1 + 384 | 0) >> 2] = 16352;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $93_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[($4_1 + 444 | 0) >> 2] = $93_1;
  HEAP32[($4_1 + 448 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($4_1 + 356 | 0) >> 0] = 0;
  HEAP32[($4_1 + 332 | 0) >> 2] = 953267991;
  label$1 : {
   $1_1 = $618($4_1 + 8 | 0 | 0, $4_1 + 496 | 0 | 0, $4_1 + 384 | 0 | 0, $4_1 + 24 | 0 | 0) | 0;
   if (!($619($1_1 | 0, $0_1 + 4 | 0 | 0, $0_1 + 68 | 0 | 0, $4_1 + 728 | 0 | 0, $4_1 + 728 | 0 | 0, $4_1 + 552 | 0 | 0) | 0)) {
    break label$1
   }
   $7_1 = Math_fround(HEAPF32[($4_1 + 716 | 0) >> 2]);
   if (Math_fround(HEAPF32[($0_1 + 200 | 0) >> 2]) > $7_1 ^ 1 | 0) {
    break label$1
   }
   HEAPF32[($0_1 + 200 | 0) >> 2] = $7_1;
  }
  $581($1_1 | 0) | 0;
  $193($6_1 | 0) | 0;
  $101($4_1 + 496 | 0 | 0) | 0;
  $617($5_1 | 0) | 0;
  global$0 = $4_1 + 800 | 0;
 }
 
 function $635($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $72($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  HEAP8[($0_1 + 24 | 0) >> 0] = 1;
  HEAP32[$0_1 >> 2] = 16696;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP8[($0_1 + 44 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  HEAP8[($0_1 + 64 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  HEAP8[($0_1 + 68 | 0) >> 0] = $4_1;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 76 | 0) >> 0] = 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 80 | 0) >> 2] = HEAP32[((HEAP32[(($4_1 ? $3_1 : $2_1) + 4 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
  $636($0_1 | 0, $2_1 | 0, $3_1 | 0);
  return $0_1 | 0;
 }
 
 function $636($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $11_1 = 0, $10_1 = 0, $3_1 = 0, $8_1 = 0, $9_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   $5_1 = HEAPU8[($0_1 + 68 | 0) >> 0] | 0;
   $6_1 = $5_1 ? $2_1 : $1_1;
   $7_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
   $8_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   if (($4_1 | 0) >= ($8_1 | 0)) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) >= ($8_1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($8_1) {
       break label$4
      }
      $9_1 = 0;
      $10_1 = $4_1;
      break label$3;
     }
     $9_1 = $79($8_1 << 2 | 0 | 0, 16 | 0) | 0;
     $10_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    }
    label$5 : {
     if (($10_1 | 0) < (1 | 0)) {
      break label$5
     }
     $11_1 = 0;
     label$6 : while (1) {
      HEAP32[($9_1 + $11_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $11_1 | 0) >> 2] | 0;
      $11_1 = $11_1 + 4 | 0;
      $10_1 = $10_1 + -1 | 0;
      if ($10_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     $11_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
     if (!$11_1) {
      break label$7
     }
     label$8 : {
      if (!(HEAPU8[($0_1 + 64 | 0) >> 0] | 0)) {
       break label$8
      }
      $80($11_1 | 0);
     }
     HEAP32[($0_1 + 60 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 60 | 0) >> 2] = $9_1;
    HEAP32[($0_1 + 56 | 0) >> 2] = $8_1;
    HEAP8[($0_1 + 64 | 0) >> 0] = 1;
   }
   $11_1 = $4_1 << 2 | 0;
   $10_1 = $8_1 - $4_1 | 0;
   label$9 : while (1) {
    HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $11_1 | 0) >> 2] = 0;
    $11_1 = $11_1 + 4 | 0;
    $10_1 = $10_1 + -1 | 0;
    if ($10_1) {
     continue label$9
    }
    break label$9;
   };
  }
  HEAP32[($0_1 + 52 | 0) >> 2] = $8_1;
  label$10 : {
   if (($8_1 | 0) < (1 | 0)) {
    break label$10
   }
   $2_1 = $5_1 ? $1_1 : $2_1;
   $10_1 = 64;
   $11_1 = 0;
   $9_1 = 0;
   label$11 : while (1) {
    label$12 : {
     label$13 : {
      if (!(HEAP32[($7_1 + 68 | 0) >> 2] | 0)) {
       break label$13
      }
      HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $11_1 | 0) >> 2] = 0;
      break label$12;
     }
     $1_1 = HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + $10_1 | 0) >> 2] | 0;
     HEAP32[($3_1 + 28 | 0) >> 2] = $9_1;
     HEAP32[($3_1 + 24 | 0) >> 2] = -1;
     HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
     i64toi32_i32$1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
     HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $3_1 + 8 | 0, $2_1, HEAP32[($0_1 + 72 | 0) >> 2] | 0, 1) | 0;
     HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $11_1 | 0) >> 2] = $1_1;
    }
    $10_1 = $10_1 + 80 | 0;
    $11_1 = $11_1 + 4 | 0;
    $9_1 = $9_1 + 1 | 0;
    if (($8_1 | 0) != ($9_1 | 0)) {
     continue label$11
    }
    break label$11;
   };
  }
  global$0 = $3_1 + 32 | 0;
 }
 
 function $637($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $1_1 = 0;
  HEAP32[$0_1 >> 2] = 16696;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (($1_1 | 0) < (1 | 0)) {
    break label$1
   }
   $2_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $3_1 = HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[(HEAP32[$3_1 >> 2] | 0) >> 2] | 0]($3_1) | 0;
     $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 60 | 0) >> 2] | 0]($3_1, HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0);
    }
    $2_1 = $2_1 + 4 | 0;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue label$2
    }
    break label$2;
   };
  }
  label$4 : {
   $2_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$4
   }
   label$5 : {
    if (!(HEAPU8[($0_1 + 64 | 0) >> 0] | 0)) {
     break label$5
    }
    $80($2_1 | 0);
   }
   HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 64 | 0) >> 0] = 1;
  label$6 : {
   $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$6
   }
   label$7 : {
    if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
     break label$7
    }
    $80($2_1 | 0);
   }
   HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 44 | 0) >> 0] = 1;
  label$8 : {
   $2_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$8
   }
   label$9 : {
    if (!(HEAPU8[($0_1 + 24 | 0) >> 0] | 0)) {
     break label$9
    }
    $80($2_1 | 0);
   }
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 24 | 0) >> 0] = 1;
  $73($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $638($0_1) {
  $0_1 = $0_1 | 0;
  $37($637($0_1 | 0) | 0 | 0);
 }
 
 function $639($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $10_1 = 0, $11_1 = 0, $9_1 = 0, i64toi32_i32$0 = 0, $19_1 = Math_fround(0), i64toi32_i32$1 = 0, $20_1 = Math_fround(0), $24_1 = Math_fround(0), $26_1 = Math_fround(0), $28_1 = Math_fround(0), $30_1 = Math_fround(0), $32_1 = Math_fround(0), $35_1 = Math_fround(0), $38_1 = Math_fround(0), $6_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $25_1 = Math_fround(0), $27_1 = Math_fround(0), $29_1 = Math_fround(0), $31_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $8_1 = 0, $13_1 = 0, $36_1 = Math_fround(0), $37_1 = Math_fround(0), $7_1 = 0, $12_1 = 0, $14_1 = 0, $199_1 = 0, $598_1 = 0, $603_1 = 0, $606_1 = 0, $609_1 = 0;
  $5_1 = global$0 - 176 | 0;
  global$0 = $5_1;
  label$1 : {
   $6_1 = HEAPU8[($0_1 + 68 | 0) >> 0] | 0;
   $7_1 = $6_1 ? $2_1 : $1_1;
   $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   if ((HEAP32[($8_1 + 72 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   label$2 : {
    $9_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (($9_1 | 0) < (1 | 0)) {
     break label$2
    }
    $10_1 = 0;
    label$3 : while (1) {
     label$4 : {
      $11_1 = HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $10_1 | 0) >> 2] | 0;
      if (!$11_1) {
       break label$4
      }
      FUNCTION_TABLE[HEAP32[(HEAP32[$11_1 >> 2] | 0) >> 2] | 0]($11_1) | 0;
      $11_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$11_1 >> 2] | 0) + 60 | 0) >> 2] | 0]($11_1, HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $10_1 | 0) >> 2] | 0);
     }
     $10_1 = $10_1 + 4 | 0;
     $9_1 = $9_1 + -1 | 0;
     if ($9_1) {
      continue label$3
     }
     break label$3;
    };
   }
   $636($0_1 | 0, $1_1 | 0, $2_1 | 0);
   HEAP32[($0_1 + 80 | 0) >> 2] = HEAP32[($8_1 + 72 | 0) >> 2] | 0;
  }
  label$5 : {
   $11_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (!$11_1) {
    break label$5
   }
   $12_1 = HEAP32[($8_1 + 68 | 0) >> 2] | 0;
   HEAP32[($5_1 + 164 | 0) >> 2] = $4_1;
   HEAP32[($5_1 + 160 | 0) >> 2] = $3_1;
   $13_1 = $6_1 ? $1_1 : $2_1;
   HEAP32[($5_1 + 152 | 0) >> 2] = $13_1;
   HEAP32[($5_1 + 148 | 0) >> 2] = $7_1;
   HEAP32[($5_1 + 144 | 0) >> 2] = 16768;
   HEAP32[($5_1 + 172 | 0) >> 2] = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   HEAP32[($5_1 + 168 | 0) >> 2] = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   HEAP32[($5_1 + 156 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   label$6 : {
    $10_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    if (($10_1 | 0) > (-1 | 0)) {
     break label$6
    }
    label$7 : {
     if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$7
     }
     label$8 : {
      $11_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
      if (!$11_1) {
       break label$8
      }
      label$9 : {
       if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
        break label$9
       }
       $80($11_1 | 0);
      }
      HEAP32[($0_1 + 40 | 0) >> 2] = 0;
     }
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$0 = 0;
     HEAP32[($0_1 + 36 | 0) >> 2] = 0;
     HEAP32[($0_1 + 40 | 0) >> 2] = i64toi32_i32$0;
     HEAP8[($0_1 + 44 | 0) >> 0] = 1;
    }
    $11_1 = $10_1 << 2 | 0;
    label$10 : while (1) {
     HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + $11_1 | 0) >> 2] = 0;
     $11_1 = $11_1 + 4 | 0;
     $9_1 = $10_1 + 1 | 0;
     $1_1 = $9_1 >>> 0 >= $10_1 >>> 0;
     $10_1 = $9_1;
     if ($1_1) {
      continue label$10
     }
     break label$10;
    };
    $11_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = 0;
   label$11 : {
    if (($11_1 | 0) < (1 | 0)) {
     break label$11
    }
    $14_1 = $0_1 + 28 | 0;
    $6_1 = 0;
    label$12 : while (1) {
     label$13 : {
      $10_1 = HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0;
      if (!$10_1) {
       break label$13
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[$10_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($10_1, $14_1);
      label$14 : {
       $10_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
       if (($10_1 | 0) < (1 | 0)) {
        break label$14
       }
       $11_1 = 0;
       $1_1 = 0;
       label$15 : while (1) {
        label$16 : {
         $9_1 = HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + $11_1 | 0) >> 2] | 0;
         if (!(HEAP32[($9_1 + 780 | 0) >> 2] | 0)) {
          break label$16
         }
         HEAP32[($4_1 + 4 | 0) >> 2] = $9_1;
         $10_1 = HEAP32[($9_1 + 772 | 0) >> 2] | 0;
         $199_1 = $10_1;
         $2_1 = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
         $3_1 = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
         $10_1 = ($10_1 | 0) == ($3_1 | 0);
         $219($9_1 | 0, ($10_1 ? $199_1 : $2_1) + 4 | 0 | 0, ($10_1 ? $2_1 : $3_1) + 4 | 0 | 0);
         HEAP32[($4_1 + 4 | 0) >> 2] = 0;
         $10_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        }
        $11_1 = $11_1 + 4 | 0;
        $1_1 = $1_1 + 1 | 0;
        if (($1_1 | 0) < ($10_1 | 0)) {
         continue label$15
        }
        break label$15;
       };
      }
      label$17 : {
       if (($10_1 | 0) > (-1 | 0)) {
        break label$17
       }
       label$18 : {
        if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
         break label$18
        }
        label$19 : {
         $11_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
         if (!$11_1) {
          break label$19
         }
         label$20 : {
          if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
           break label$20
          }
          $80($11_1 | 0);
         }
         HEAP32[($0_1 + 40 | 0) >> 2] = 0;
        }
        HEAP8[($0_1 + 44 | 0) >> 0] = 1;
        i64toi32_i32$1 = $0_1;
        i64toi32_i32$0 = 0;
        HEAP32[($0_1 + 36 | 0) >> 2] = 0;
        HEAP32[($0_1 + 40 | 0) >> 2] = i64toi32_i32$0;
       }
       $11_1 = $10_1 << 2 | 0;
       label$21 : while (1) {
        HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + $11_1 | 0) >> 2] = 0;
        $11_1 = $11_1 + 4 | 0;
        $9_1 = $10_1 + 1 | 0;
        $1_1 = $9_1 >>> 0 >= $10_1 >>> 0;
        $10_1 = $9_1;
        if ($1_1) {
         continue label$21
        }
        break label$21;
       };
      }
      HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      $11_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     }
     $6_1 = $6_1 + 1 | 0;
     if (($6_1 | 0) < ($11_1 | 0)) {
      continue label$12
     }
     break label$12;
    };
   }
   label$22 : {
    label$23 : {
     if ($12_1) {
      break label$23
     }
     if (($11_1 | 0) < (1 | 0)) {
      break label$22
     }
     $10_1 = 0;
     $9_1 = 64;
     label$24 : while (1) {
      $640($5_1 + 144 | 0 | 0, HEAP32[((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + $9_1 | 0) >> 2] | 0 | 0, $10_1 | 0);
      $9_1 = $9_1 + 80 | 0;
      $10_1 = $10_1 + 1 | 0;
      if (($11_1 | 0) != ($10_1 | 0)) {
       continue label$24
      }
      break label$22;
     };
    }
    $10_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
    $15_1 = Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2]);
    $16_1 = Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2]);
    $11_1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
    $17_1 = Math_fround(HEAPF32[($11_1 + 52 | 0) >> 2]);
    $18_1 = Math_fround(HEAPF32[($11_1 + 56 | 0) >> 2]);
    $19_1 = Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($11_1 + 20 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($11_1 + 36 | 0) >> 2]);
    $23_1 = Math_fround(HEAPF32[($11_1 + 24 | 0) >> 2]);
    $24_1 = Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]);
    $25_1 = Math_fround(HEAPF32[($11_1 + 40 | 0) >> 2]);
    $26_1 = Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]);
    $27_1 = Math_fround(HEAPF32[($11_1 + 32 | 0) >> 2]);
    $28_1 = Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]);
    $29_1 = Math_fround(HEAPF32[$11_1 >> 2]);
    $30_1 = Math_fround(HEAPF32[$10_1 >> 2]);
    $31_1 = Math_fround(HEAPF32[($11_1 + 16 | 0) >> 2]);
    $32_1 = Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]);
    $33_1 = Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]);
    $34_1 = Math_fround(HEAPF32[($11_1 + 48 | 0) >> 2]);
    $35_1 = Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]);
    $36_1 = Math_fround(HEAPF32[($11_1 + 4 | 0) >> 2]);
    $37_1 = Math_fround(HEAPF32[($11_1 + 8 | 0) >> 2]);
    $38_1 = Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]);
    HEAP32[($5_1 + 108 | 0) >> 2] = 0;
    HEAP32[($5_1 + 92 | 0) >> 2] = 0;
    HEAP32[($5_1 + 76 | 0) >> 2] = 0;
    HEAPF32[(($5_1 + 48 | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($38_1 * $37_1) + Math_fround($24_1 * $23_1)) + Math_fround($26_1 * $25_1));
    HEAPF32[(($5_1 + 48 | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($38_1 * $36_1) + Math_fround($24_1 * $21_1)) + Math_fround($26_1 * $22_1));
    HEAPF32[(($5_1 + 48 | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $37_1) + Math_fround($19_1 * $23_1)) + Math_fround($20_1 * $25_1));
    HEAPF32[(($5_1 + 48 | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $36_1) + Math_fround($19_1 * $21_1)) + Math_fround($20_1 * $22_1));
    $33_1 = Math_fround(-$33_1);
    HEAPF32[(($5_1 + 48 | 0) + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($38_1 * $33_1) - Math_fround($24_1 * $15_1)) - Math_fround($26_1 * $16_1)) + Math_fround(Math_fround(Math_fround($38_1 * $34_1) + Math_fround($24_1 * $17_1)) + Math_fround($26_1 * $18_1)));
    HEAPF32[(($5_1 + 48 | 0) + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($35_1 * $33_1) - Math_fround($19_1 * $15_1)) - Math_fround($20_1 * $16_1)) + Math_fround(Math_fround(Math_fround($35_1 * $34_1) + Math_fround($19_1 * $17_1)) + Math_fround($20_1 * $18_1)));
    HEAP32[($5_1 + 60 | 0) >> 2] = 0;
    HEAPF32[($5_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround($30_1 * $29_1) + Math_fround($32_1 * $31_1)) + Math_fround($28_1 * $27_1));
    HEAPF32[($5_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround($38_1 * $29_1) + Math_fround($24_1 * $31_1)) + Math_fround($26_1 * $27_1));
    HEAPF32[($5_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $29_1) + Math_fround($19_1 * $31_1)) + Math_fround($20_1 * $27_1));
    HEAPF32[($5_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround($30_1 * $37_1) + Math_fround($32_1 * $23_1)) + Math_fround($28_1 * $25_1));
    HEAPF32[($5_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround($30_1 * $36_1) + Math_fround($32_1 * $21_1)) + Math_fround($28_1 * $22_1));
    HEAPF32[($5_1 + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($30_1 * $33_1) - Math_fround($32_1 * $15_1)) - Math_fround($28_1 * $16_1)) + Math_fround(Math_fround(Math_fround($30_1 * $34_1) + Math_fround($32_1 * $17_1)) + Math_fround($28_1 * $18_1)));
    $10_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$10_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($10_1, $5_1 + 48 | 0, $5_1 + 128 | 0, $5_1 + 112 | 0);
    $19_1 = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
    HEAPF32[($5_1 + 128 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 128 | 0) >> 2]) - $19_1);
    HEAPF32[($5_1 + 132 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 132 | 0) >> 2]) - $19_1);
    HEAPF32[($5_1 + 136 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 136 | 0) >> 2]) - $19_1);
    HEAPF32[($5_1 + 112 | 0) >> 2] = Math_fround($19_1 + Math_fround(HEAPF32[($5_1 + 112 | 0) >> 2]));
    HEAPF32[($5_1 + 116 | 0) >> 2] = Math_fround($19_1 + Math_fround(HEAPF32[($5_1 + 116 | 0) >> 2]));
    HEAPF32[($5_1 + 120 | 0) >> 2] = Math_fround($19_1 + Math_fround(HEAPF32[($5_1 + 120 | 0) >> 2]));
    i64toi32_i32$0 = HEAP32[($5_1 + 136 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($5_1 + 140 | 0) >> 2] | 0;
    $598_1 = i64toi32_i32$0;
    i64toi32_i32$0 = ($5_1 + 16 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $598_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[($5_1 + 120 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
    $603_1 = i64toi32_i32$1;
    i64toi32_i32$1 = ($5_1 + 16 | 0) + 24 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $603_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[($5_1 + 112 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($5_1 + 116 | 0) >> 2] | 0;
    $606_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[($5_1 + 32 | 0) >> 2] = $606_1;
    HEAP32[($5_1 + 36 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[($5_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($5_1 + 132 | 0) >> 2] | 0;
    $609_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1;
    HEAP32[($5_1 + 16 | 0) >> 2] = $609_1;
    HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    $641($12_1 | 0, HEAP32[$12_1 >> 2] | 0 | 0, $5_1 + 16 | 0 | 0, $0_1 + 8 | 0 | 0, $5_1 + 144 | 0 | 0);
   }
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   label$25 : {
    $10_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    if (($10_1 | 0) > (-1 | 0)) {
     break label$25
    }
    label$26 : {
     if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$26
     }
     label$27 : {
      $11_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
      if (!$11_1) {
       break label$27
      }
      label$28 : {
       if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
        break label$28
       }
       $80($11_1 | 0);
      }
      HEAP32[($0_1 + 40 | 0) >> 2] = 0;
     }
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$0 = 0;
     HEAP32[($0_1 + 36 | 0) >> 2] = 0;
     HEAP32[($0_1 + 40 | 0) >> 2] = i64toi32_i32$0;
     HEAP8[($0_1 + 44 | 0) >> 0] = 1;
    }
    $11_1 = $10_1 << 2 | 0;
    label$29 : while (1) {
     HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + $11_1 | 0) >> 2] = 0;
     $11_1 = $11_1 + 4 | 0;
     $9_1 = $10_1 + 1 | 0;
     $4_1 = $9_1 >>> 0 >= $10_1 >>> 0;
     $10_1 = $9_1;
     if ($4_1) {
      continue label$29
     }
     break label$29;
    };
   }
   HEAP32[($0_1 + 32 | 0) >> 2] = 0;
   if (($1_1 | 0) < (1 | 0)) {
    break label$5
   }
   $4_1 = 64;
   $9_1 = 0;
   label$30 : while (1) {
    label$31 : {
     if (!(HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $9_1 | 0) >> 2] | 0)) {
      break label$31
     }
     $10_1 = (HEAP32[($8_1 + 28 | 0) >> 2] | 0) + $4_1 | 0;
     $2_1 = HEAP32[$10_1 >> 2] | 0;
     $11_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
     $36_1 = Math_fround(HEAPF32[($11_1 + 52 | 0) >> 2]);
     $37_1 = Math_fround(HEAPF32[($11_1 + 56 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[($10_1 + -16 | 0) >> 2]);
     $16_1 = Math_fround(HEAPF32[($10_1 + -12 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($10_1 + -8 | 0) >> 2]);
     $19_1 = Math_fround(HEAPF32[($11_1 + 20 | 0) >> 2]);
     $20_1 = Math_fround(HEAPF32[($11_1 + 24 | 0) >> 2]);
     $18_1 = Math_fround(HEAPF32[($10_1 + -64 | 0) >> 2]);
     $21_1 = Math_fround(HEAPF32[($10_1 + -48 | 0) >> 2]);
     $22_1 = Math_fround(HEAPF32[($10_1 + -32 | 0) >> 2]);
     $23_1 = Math_fround(HEAPF32[($10_1 + -60 | 0) >> 2]);
     $25_1 = Math_fround(HEAPF32[($10_1 + -44 | 0) >> 2]);
     $27_1 = Math_fround(HEAPF32[($10_1 + -28 | 0) >> 2]);
     $29_1 = Math_fround(HEAPF32[($10_1 + -56 | 0) >> 2]);
     $24_1 = Math_fround(HEAPF32[($11_1 + 36 | 0) >> 2]);
     $31_1 = Math_fround(HEAPF32[($10_1 + -40 | 0) >> 2]);
     $26_1 = Math_fround(HEAPF32[($11_1 + 40 | 0) >> 2]);
     $34_1 = Math_fround(HEAPF32[($10_1 + -24 | 0) >> 2]);
     $33_1 = Math_fround(HEAPF32[($11_1 + 48 | 0) >> 2]);
     $28_1 = Math_fround(HEAPF32[($11_1 + 8 | 0) >> 2]);
     $30_1 = Math_fround(HEAPF32[$11_1 >> 2]);
     $32_1 = Math_fround(HEAPF32[($11_1 + 4 | 0) >> 2]);
     $35_1 = Math_fround(HEAPF32[($11_1 + 16 | 0) >> 2]);
     $38_1 = Math_fround(HEAPF32[($11_1 + 32 | 0) >> 2]);
     $11_1 = 0;
     HEAP32[($5_1 + 108 | 0) >> 2] = 0;
     HEAP32[($5_1 + 92 | 0) >> 2] = 0;
     HEAP32[($5_1 + 76 | 0) >> 2] = 0;
     HEAP32[($5_1 + 60 | 0) >> 2] = 0;
     HEAPF32[($5_1 + 88 | 0) >> 2] = Math_fround(Math_fround(Math_fround($38_1 * $29_1) + Math_fround($24_1 * $31_1)) + Math_fround($26_1 * $34_1));
     HEAPF32[($5_1 + 84 | 0) >> 2] = Math_fround(Math_fround(Math_fround($38_1 * $23_1) + Math_fround($24_1 * $25_1)) + Math_fround($26_1 * $27_1));
     HEAPF32[($5_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround($38_1 * $18_1) + Math_fround($24_1 * $21_1)) + Math_fround($26_1 * $22_1));
     HEAPF32[($5_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $29_1) + Math_fround($19_1 * $31_1)) + Math_fround($20_1 * $34_1));
     HEAPF32[($5_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $23_1) + Math_fround($19_1 * $25_1)) + Math_fround($20_1 * $27_1));
     HEAPF32[($5_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $18_1) + Math_fround($19_1 * $21_1)) + Math_fround($20_1 * $22_1));
     HEAPF32[($5_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround($30_1 * $29_1) + Math_fround($32_1 * $31_1)) + Math_fround($28_1 * $34_1));
     HEAPF32[($5_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround($30_1 * $23_1) + Math_fround($32_1 * $25_1)) + Math_fround($28_1 * $27_1));
     HEAPF32[($5_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround($30_1 * $18_1) + Math_fround($32_1 * $21_1)) + Math_fround($28_1 * $22_1));
     HEAPF32[($5_1 + 104 | 0) >> 2] = Math_fround($37_1 + Math_fround(Math_fround(Math_fround($38_1 * $15_1) + Math_fround($24_1 * $16_1)) + Math_fround($26_1 * $17_1)));
     HEAPF32[($5_1 + 100 | 0) >> 2] = Math_fround($36_1 + Math_fround(Math_fround(Math_fround($35_1 * $15_1) + Math_fround($19_1 * $16_1)) + Math_fround($20_1 * $17_1)));
     HEAPF32[($5_1 + 96 | 0) >> 2] = Math_fround($33_1 + Math_fround(Math_fround(Math_fround($30_1 * $15_1) + Math_fround($32_1 * $16_1)) + Math_fround($28_1 * $17_1)));
     FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($2_1, $5_1 + 48 | 0, $5_1 + 16 | 0, $5_1 + 128 | 0);
     $10_1 = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$10_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($10_1, HEAP32[($13_1 + 12 | 0) >> 2] | 0, $5_1 + 112 | 0, $5_1);
     $10_1 = 0;
     label$32 : {
      if (Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) > Math_fround(HEAPF32[$5_1 >> 2])) {
       break label$32
      }
      $10_1 = 0;
      if (Math_fround(HEAPF32[($5_1 + 128 | 0) >> 2]) < Math_fround(HEAPF32[($5_1 + 112 | 0) >> 2])) {
       break label$32
      }
      $10_1 = 1;
     }
     label$33 : {
      if (Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) > Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2])) {
       break label$33
      }
      if (Math_fround(HEAPF32[($5_1 + 136 | 0) >> 2]) < Math_fround(HEAPF32[($5_1 + 120 | 0) >> 2])) {
       break label$33
      }
      $11_1 = $10_1;
     }
     label$34 : {
      if (Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) > Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2])) {
       break label$34
      }
      if (Math_fround(HEAPF32[($5_1 + 132 | 0) >> 2]) < Math_fround(HEAPF32[($5_1 + 116 | 0) >> 2])) {
       break label$34
      }
      if (!($11_1 ^ 1 | 0)) {
       break label$31
      }
     }
     $10_1 = HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $9_1 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[(HEAP32[$10_1 >> 2] | 0) >> 2] | 0]($10_1) | 0;
     $10_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$10_1 >> 2] | 0) + 60 | 0) >> 2] | 0]($10_1, HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $9_1 | 0) >> 2] | 0);
     HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $9_1 | 0) >> 2] = 0;
    }
    $4_1 = $4_1 + 80 | 0;
    $9_1 = $9_1 + 4 | 0;
    $1_1 = $1_1 + -1 | 0;
    if ($1_1) {
     continue label$30
    }
    break label$30;
   };
  }
  global$0 = $5_1 + 176 | 0;
 }
 
 function $640($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $8_1 = Math_fround(0), $4_1 = 0, $11_1 = Math_fround(0), $17_1 = Math_fround(0), $6_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $18_1 = 0, $7_1 = Math_fround(0), $12_1 = Math_fround(0), $198_1 = Math_fround(0), $204_1 = Math_fround(0);
  $3_1 = global$0 - 160 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = Math_fround(HEAPF32[($5_1 + 52 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
  $4_1 = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
  $12_1 = Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[$5_1 >> 2]);
  $15_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]);
  $18_1 = 0;
  HEAP32[($3_1 + 156 | 0) >> 2] = 0;
  HEAP32[($3_1 + 140 | 0) >> 2] = 0;
  HEAP32[(($3_1 + 96 | 0) + 28 | 0) >> 2] = 0;
  $5_1 = $4_1 + Math_imul($2_1, 80) | 0;
  $19_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
  HEAPF32[(($3_1 + 96 | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $19_1) + Math_fround($11_1 * $20_1)) + Math_fround($10_1 * $21_1));
  $22_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
  HEAPF32[(($3_1 + 96 | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $22_1) + Math_fround($11_1 * $23_1)) + Math_fround($10_1 * $24_1));
  HEAPF32[(($3_1 + 96 | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $19_1) + Math_fround($9_1 * $20_1)) + Math_fround($8_1 * $21_1));
  HEAPF32[(($3_1 + 96 | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $22_1) + Math_fround($9_1 * $23_1)) + Math_fround($8_1 * $24_1));
  $25_1 = Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[($5_1 + 52 | 0) >> 2]);
  $27_1 = Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]);
  HEAPF32[(($3_1 + 96 | 0) + 56 | 0) >> 2] = Math_fround($7_1 + Math_fround(Math_fround(Math_fround($17_1 * $25_1) + Math_fround($11_1 * $26_1)) + Math_fround($10_1 * $27_1)));
  HEAPF32[(($3_1 + 96 | 0) + 52 | 0) >> 2] = Math_fround($6_1 + Math_fround(Math_fround(Math_fround($16_1 * $25_1) + Math_fround($9_1 * $26_1)) + Math_fround($8_1 * $27_1)));
  HEAP32[($3_1 + 108 | 0) >> 2] = 0;
  $6_1 = Math_fround(HEAPF32[$5_1 >> 2]);
  $198_1 = Math_fround($17_1 * $6_1);
  $17_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
  $204_1 = Math_fround($198_1 + Math_fround($11_1 * $17_1));
  $11_1 = Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]);
  HEAPF32[($3_1 + 128 | 0) >> 2] = Math_fround($204_1 + Math_fround($10_1 * $11_1));
  HEAPF32[($3_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $6_1) + Math_fround($9_1 * $17_1)) + Math_fround($8_1 * $11_1));
  HEAPF32[($3_1 + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $6_1) + Math_fround($15_1 * $17_1)) + Math_fround($13_1 * $11_1));
  HEAPF32[($3_1 + 104 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $19_1) + Math_fround($15_1 * $20_1)) + Math_fround($13_1 * $21_1));
  HEAPF32[($3_1 + 100 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $22_1) + Math_fround($15_1 * $23_1)) + Math_fround($13_1 * $24_1));
  HEAPF32[($3_1 + 144 | 0) >> 2] = Math_fround($12_1 + Math_fround(Math_fround(Math_fround($14_1 * $25_1) + Math_fround($15_1 * $26_1)) + Math_fround($13_1 * $27_1)));
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $3_1 + 96 | 0, $3_1 + 80 | 0, $3_1 + 64 | 0);
  $8_1 = Math_fround(HEAPF32[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 32 | 0) >> 2]);
  HEAPF32[($3_1 + 80 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 80 | 0) >> 2]) - $8_1);
  HEAPF32[($3_1 + 84 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 84 | 0) >> 2]) - $8_1);
  HEAPF32[($3_1 + 88 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2]) - $8_1);
  HEAPF32[($3_1 + 64 | 0) >> 2] = Math_fround($8_1 + Math_fround(HEAPF32[($3_1 + 64 | 0) >> 2]));
  HEAPF32[($3_1 + 68 | 0) >> 2] = Math_fround($8_1 + Math_fround(HEAPF32[($3_1 + 68 | 0) >> 2]));
  HEAPF32[($3_1 + 72 | 0) >> 2] = Math_fround($8_1 + Math_fround(HEAPF32[($3_1 + 72 | 0) >> 2]));
  $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $4_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($4_1, HEAP32[($5_1 + 12 | 0) >> 2] | 0, $3_1 + 48 | 0, $3_1 + 32 | 0);
  label$1 : {
   label$2 : {
    $5_1 = HEAP32[(0 + 2756 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$2
    }
    if (!(FUNCTION_TABLE[$5_1](HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, $1_1) | 0)) {
     break label$1
    }
   }
   label$3 : {
    if (Math_fround(HEAPF32[($3_1 + 80 | 0) >> 2]) > Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2])) {
     break label$3
    }
    if (Math_fround(HEAPF32[($3_1 + 64 | 0) >> 2]) < Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2])) {
     break label$3
    }
    $18_1 = 1;
   }
   $5_1 = 0;
   label$4 : {
    if (Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2]) > Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2])) {
     break label$4
    }
    if (Math_fround(HEAPF32[($3_1 + 72 | 0) >> 2]) < Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2])) {
     break label$4
    }
    $5_1 = $18_1;
   }
   if (Math_fround(HEAPF32[($3_1 + 84 | 0) >> 2]) > Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2])) {
    break label$1
   }
   if (Math_fround(HEAPF32[($3_1 + 68 | 0) >> 2]) < Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2])) {
    break label$1
   }
   if ($5_1 ^ 1 | 0) {
    break label$1
   }
   HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = -1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   $8_1 = Math_fround(HEAPF32[((HEAP32[($0_1 + 20 | 0) >> 2] | 0) + 32 | 0) >> 2]);
   HEAP32[($3_1 + 20 | 0) >> 2] = $3_1 + 96 | 0;
   label$5 : {
    label$6 : {
     if ($8_1 > Math_fround(0.0) ^ 1 | 0) {
      break label$6
     }
     $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($5_1, $3_1 + 8 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0, 0, 2) | 0;
     break label$5;
    }
    $5_1 = $2_1 << 2 | 0;
    $1_1 = HEAP32[((HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $5_1 | 0) >> 2] | 0;
    if ($1_1) {
     break label$5
    }
    $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $3_1 + 8 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0, HEAP32[($0_1 + 28 | 0) >> 2] | 0, 1) | 0;
    HEAP32[((HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $5_1 | 0) >> 2] = $1_1;
    $1_1 = HEAP32[((HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $5_1 | 0) >> 2] | 0;
   }
   label$7 : {
    label$8 : {
     $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     $4_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0)) {
      break label$8
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = $3_1 + 8 | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($5_1, -1, $2_1);
     break label$7;
    }
    $4_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = $3_1 + 8 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($5_1, -1, $2_1);
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $3_1 + 8 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0);
   $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   HEAP32[($5_1 + ((HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) ? 8 : 12) | 0) >> 2] = $4_1;
  }
  global$0 = $3_1 + 160 | 0;
 }
 
 function $641($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $12_1 = 0, $7_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $5_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
   $7_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   $8_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   label$2 : {
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) > (-1 | 0)) {
     break label$2
    }
    label$3 : {
     if (($7_1 | 0) > (-1 | 0)) {
      break label$3
     }
     label$4 : {
      $12_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
      if (!$12_1) {
       break label$4
      }
      label$5 : {
       if (!(HEAPU8[($3_1 + 16 | 0) >> 0] | 0)) {
        break label$5
       }
       $80($12_1 | 0);
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 0;
     }
     HEAP8[($3_1 + 16 | 0) >> 0] = 1;
     HEAP32[($3_1 + 8 | 0) >> 2] = 0;
     HEAP32[($3_1 + 12 | 0) >> 2] = 0;
     $7_1 = 0;
    }
    $12_1 = $2_1 << 2 | 0;
    label$6 : while (1) {
     HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + $12_1 | 0) >> 2] = 0;
     $12_1 = $12_1 + 4 | 0;
     $13_1 = $2_1 + 1 | 0;
     $14_1 = $13_1 >>> 0 >= $2_1 >>> 0;
     $2_1 = $13_1;
     if ($14_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $14_1 = 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   label$7 : {
    if (($7_1 | 0) > (63 | 0)) {
     break label$7
    }
    $13_1 = $79(256 | 0, 16 | 0) | 0;
    label$8 : {
     $14_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     if (($14_1 | 0) < (1 | 0)) {
      break label$8
     }
     $2_1 = 0;
     $12_1 = $14_1;
     label$9 : while (1) {
      HEAP32[($13_1 + $2_1 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
      $2_1 = $2_1 + 4 | 0;
      $12_1 = $12_1 + -1 | 0;
      if ($12_1) {
       continue label$9
      }
      break label$9;
     };
    }
    label$10 : {
     $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$10
     }
     label$11 : {
      if (!(HEAPU8[($3_1 + 16 | 0) >> 0] | 0)) {
       break label$11
      }
      $80($2_1 | 0);
      $14_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = $13_1;
    HEAP8[($3_1 + 16 | 0) >> 0] = 1;
    $7_1 = 64;
    HEAP32[($3_1 + 8 | 0) >> 2] = 64;
   }
   label$12 : {
    if (($14_1 | 0) != ($7_1 | 0)) {
     break label$12
    }
    label$13 : {
     $15_1 = $7_1 << 1 | 0;
     if (($7_1 | 0) < ($15_1 | 0)) {
      break label$13
     }
     $14_1 = $7_1;
     break label$12;
    }
    $2_1 = 0;
    label$14 : {
     label$15 : {
      label$16 : {
       if ($7_1) {
        break label$16
       }
       $13_1 = 0;
       $14_1 = $7_1;
       break label$15;
      }
      $13_1 = $79($7_1 << 3 | 0 | 0, 16 | 0) | 0;
      $14_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
      if (($14_1 | 0) < (1 | 0)) {
       break label$14
      }
     }
     $12_1 = $14_1;
     label$17 : while (1) {
      HEAP32[($13_1 + $2_1 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
      $2_1 = $2_1 + 4 | 0;
      $12_1 = $12_1 + -1 | 0;
      if ($12_1) {
       continue label$17
      }
      break label$17;
     };
    }
    label$18 : {
     $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$18
     }
     label$19 : {
      if (!(HEAPU8[($3_1 + 16 | 0) >> 0] | 0)) {
       break label$19
      }
      $80($2_1 | 0);
      $14_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = $13_1;
    HEAP8[($3_1 + 16 | 0) >> 0] = 1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $15_1;
   }
   $2_1 = $14_1 + 1 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
   HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $1_1;
   label$20 : while (1) {
    $12_1 = $2_1 + -1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $12_1;
    label$21 : {
     label$22 : {
      $14_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
      $13_1 = HEAP32[($14_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0;
      if (!(Math_fround(HEAPF32[$13_1 >> 2]) <= $8_1 ^ 1 | 0)) {
       break label$22
      }
      $2_1 = $12_1;
      break label$21;
     }
     label$23 : {
      if (!(Math_fround(HEAPF32[($13_1 + 16 | 0) >> 2]) >= $11_1 ^ 1 | 0)) {
       break label$23
      }
      $2_1 = $12_1;
      break label$21;
     }
     label$24 : {
      if (!(Math_fround(HEAPF32[($13_1 + 4 | 0) >> 2]) <= $6_1 ^ 1 | 0)) {
       break label$24
      }
      $2_1 = $12_1;
      break label$21;
     }
     label$25 : {
      if (!(Math_fround(HEAPF32[($13_1 + 20 | 0) >> 2]) >= $10_1 ^ 1 | 0)) {
       break label$25
      }
      $2_1 = $12_1;
      break label$21;
     }
     label$26 : {
      if (!(Math_fround(HEAPF32[($13_1 + 8 | 0) >> 2]) <= $5_1 ^ 1 | 0)) {
       break label$26
      }
      $2_1 = $12_1;
      break label$21;
     }
     label$27 : {
      if (!(Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]) >= $9_1 ^ 1 | 0)) {
       break label$27
      }
      $2_1 = $12_1;
      break label$21;
     }
     label$28 : {
      if (!(HEAP32[($13_1 + 40 | 0) >> 2] | 0)) {
       break label$28
      }
      $15_1 = HEAP32[($13_1 + 36 | 0) >> 2] | 0;
      label$29 : {
       $1_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       if (($12_1 | 0) != ($1_1 | 0)) {
        break label$29
       }
       label$30 : {
        $1_1 = $12_1 ? $12_1 << 1 | 0 : 1;
        if (($2_1 | 0) <= ($1_1 | 0)) {
         break label$30
        }
        $1_1 = $12_1;
        break label$29;
       }
       label$31 : {
        label$32 : {
         if ($1_1) {
          break label$32
         }
         $14_1 = 0;
         break label$31;
        }
        $14_1 = $79($1_1 << 2 | 0 | 0, 16 | 0) | 0;
        $12_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       }
       label$33 : {
        if (($12_1 | 0) < (1 | 0)) {
         break label$33
        }
        $2_1 = 0;
        $7_1 = $12_1;
        label$34 : while (1) {
         HEAP32[($14_1 + $2_1 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
         $2_1 = $2_1 + 4 | 0;
         $7_1 = $7_1 + -1 | 0;
         if ($7_1) {
          continue label$34
         }
         break label$34;
        };
       }
       label$35 : {
        $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (!$2_1) {
         break label$35
        }
        label$36 : {
         if (!(HEAPU8[($3_1 + 16 | 0) >> 0] | 0)) {
          break label$36
         }
         $80($2_1 | 0);
         $12_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $14_1;
       HEAP8[($3_1 + 16 | 0) >> 0] = 1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
      }
      $7_1 = $12_1 + 1 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $7_1;
      HEAP32[($14_1 + ($12_1 << 2 | 0) | 0) >> 2] = $15_1;
      $14_1 = HEAP32[($13_1 + 40 | 0) >> 2] | 0;
      label$37 : {
       if (($7_1 | 0) != ($1_1 | 0)) {
        break label$37
       }
       label$38 : {
        $15_1 = $1_1 ? $1_1 << 1 | 0 : 1;
        if (($1_1 | 0) < ($15_1 | 0)) {
         break label$38
        }
        $7_1 = $1_1;
        break label$37;
       }
       label$39 : {
        label$40 : {
         if ($15_1) {
          break label$40
         }
         $13_1 = 0;
         $7_1 = $1_1;
         break label$39;
        }
        $13_1 = $79($15_1 << 2 | 0 | 0, 16 | 0) | 0;
        $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       }
       label$41 : {
        if (($7_1 | 0) < (1 | 0)) {
         break label$41
        }
        $2_1 = 0;
        $12_1 = $7_1;
        label$42 : while (1) {
         HEAP32[($13_1 + $2_1 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
         $2_1 = $2_1 + 4 | 0;
         $12_1 = $12_1 + -1 | 0;
         if ($12_1) {
          continue label$42
         }
         break label$42;
        };
       }
       label$43 : {
        $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (!$2_1) {
         break label$43
        }
        label$44 : {
         if (!(HEAPU8[($3_1 + 16 | 0) >> 0] | 0)) {
          break label$44
         }
         $80($2_1 | 0);
         $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
        }
        HEAP32[($3_1 + 12 | 0) >> 2] = 0;
       }
       HEAP32[($3_1 + 12 | 0) >> 2] = $13_1;
       HEAP8[($3_1 + 16 | 0) >> 0] = 1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $15_1;
      }
      $2_1 = $7_1 + 1 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
      HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0) >> 2] = $14_1;
      break label$21;
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($4_1, $13_1);
     $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    }
    if (($2_1 | 0) > (0 | 0)) {
     continue label$20
    }
    break label$20;
   };
  }
 }
 
 function $642($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $643($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $27_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $5_1 = 0, $25_1 = Math_fround(0), $26_1 = 0, $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $12_1 = 0, $16_1 = 0, $20_1 = 0, $24_1 = 0;
  label$1 : {
   $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (($5_1 | 0) >= (1 | 0)) {
    break label$1
   }
   return Math_fround(Math_fround(1.0));
  }
  $6_1 = HEAPU8[($0_1 + 68 | 0) >> 0] | 0;
  $7_1 = $6_1 ? $1_1 : $2_1;
  $1_1 = $6_1 ? $2_1 : $1_1;
  $8_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
  $9_1 = Math_fround(HEAPF32[($1_1 + 60 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $12_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
  $13_1 = Math_fround(HEAPF32[($1_1 + 44 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $6_1 = 32;
  $16_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
  $17_1 = Math_fround(HEAPF32[($1_1 + 28 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $20_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  $21_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $2_1 = HEAP32[($1_1 + 304 | 0) >> 2] | 0;
  $23_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $24_1 = HEAP32[($1_1 + 192 | 0) >> 2] | 0;
  $25_1 = Math_fround(1.0);
  $26_1 = 0;
  label$2 : while (1) {
   HEAP32[($1_1 + 304 | 0) >> 2] = $2_1 + 1 | 0;
   $2_1 = (HEAP32[($24_1 + 28 | 0) >> 2] | 0) + $6_1 | 0;
   $27_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
   $28_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
   $29_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
   $30_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $31_1 = Math_fround(HEAPF32[($2_1 + -32 | 0) >> 2]);
   $32_1 = Math_fround(HEAPF32[($2_1 + -16 | 0) >> 2]);
   $33_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $34_1 = Math_fround(HEAPF32[($2_1 + -28 | 0) >> 2]);
   $35_1 = Math_fround(HEAPF32[($2_1 + -12 | 0) >> 2]);
   $36_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $37_1 = Math_fround(HEAPF32[($2_1 + -24 | 0) >> 2]);
   $38_1 = Math_fround(HEAPF32[($2_1 + -8 | 0) >> 2]);
   HEAP32[($1_1 + 64 | 0) >> 2] = 0;
   HEAP32[($1_1 + 48 | 0) >> 2] = 0;
   HEAP32[($1_1 + 32 | 0) >> 2] = 0;
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAPF32[($1_1 + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $37_1) + Math_fround($14_1 * $38_1)) + Math_fround($13_1 * $36_1));
   HEAPF32[($1_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $34_1) + Math_fround($14_1 * $35_1)) + Math_fround($13_1 * $33_1));
   HEAPF32[($1_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $31_1) + Math_fround($14_1 * $32_1)) + Math_fround($13_1 * $30_1));
   HEAPF32[($1_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround($19_1 * $37_1) + Math_fround($18_1 * $38_1)) + Math_fround($17_1 * $36_1));
   HEAPF32[($1_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($19_1 * $34_1) + Math_fround($18_1 * $35_1)) + Math_fround($17_1 * $33_1));
   HEAPF32[($1_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($19_1 * $31_1) + Math_fround($18_1 * $32_1)) + Math_fround($17_1 * $30_1));
   HEAPF32[($1_1 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround($23_1 * $37_1) + Math_fround($22_1 * $38_1)) + Math_fround($21_1 * $36_1));
   HEAPF32[($1_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround($23_1 * $34_1) + Math_fround($22_1 * $35_1)) + Math_fround($21_1 * $33_1));
   HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround($23_1 * $31_1) + Math_fround($22_1 * $32_1)) + Math_fround($21_1 * $30_1));
   HEAPF32[($1_1 + 60 | 0) >> 2] = Math_fround($9_1 + Math_fround(Math_fround(Math_fround($15_1 * $28_1) + Math_fround($14_1 * $29_1)) + Math_fround($13_1 * $27_1)));
   HEAPF32[($1_1 + 56 | 0) >> 2] = Math_fround($10_1 + Math_fround(Math_fround(Math_fround($19_1 * $28_1) + Math_fround($18_1 * $29_1)) + Math_fround($17_1 * $27_1)));
   HEAPF32[($1_1 + 52 | 0) >> 2] = Math_fround($11_1 + Math_fround(Math_fround(Math_fround($23_1 * $28_1) + Math_fround($22_1 * $29_1)) + Math_fround($21_1 * $27_1)));
   $2_1 = HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $26_1 | 0) >> 2] | 0;
   $27_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($2_1, $1_1, $7_1, $3_1, $4_1));
   HEAP32[($1_1 + 64 | 0) >> 2] = $8_1;
   HEAPF32[($1_1 + 60 | 0) >> 2] = $9_1;
   HEAPF32[($1_1 + 56 | 0) >> 2] = $10_1;
   HEAPF32[($1_1 + 52 | 0) >> 2] = $11_1;
   HEAP32[($1_1 + 48 | 0) >> 2] = $12_1;
   HEAPF32[($1_1 + 44 | 0) >> 2] = $13_1;
   HEAPF32[($1_1 + 40 | 0) >> 2] = $14_1;
   HEAPF32[($1_1 + 36 | 0) >> 2] = $15_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $16_1;
   HEAPF32[($1_1 + 28 | 0) >> 2] = $17_1;
   HEAPF32[($1_1 + 24 | 0) >> 2] = $18_1;
   HEAPF32[($1_1 + 20 | 0) >> 2] = $19_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $20_1;
   HEAPF32[($1_1 + 12 | 0) >> 2] = $21_1;
   HEAPF32[($1_1 + 8 | 0) >> 2] = $22_1;
   HEAPF32[($1_1 + 4 | 0) >> 2] = $23_1;
   $2_1 = (HEAP32[($1_1 + 304 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($1_1 + 304 | 0) >> 2] = $2_1;
   $25_1 = $27_1 < $25_1 ? $27_1 : $25_1;
   $6_1 = $6_1 + 80 | 0;
   $26_1 = $26_1 + 4 | 0;
   $5_1 = $5_1 + -1 | 0;
   if ($5_1) {
    continue label$2
   }
   break label$2;
  };
  return Math_fround($25_1);
 }
 
 function $644($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   $4_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $5_1 = HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($5_1, $1_1);
     $2_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    }
    $3_1 = $3_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $645($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $646($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
  $640($0_1 | 0, HEAP32[(((HEAP32[((HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + Math_imul($1_1, 80) | 0) + 64 | 0) >> 2] | 0 | 0, $1_1 | 0);
 }
 
 function $647($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1_1 = 0, $2_1 = 0, $5_1 = 0, $3_1 = 0, $40_1 = 0;
  HEAP32[$0_1 >> 2] = 16844;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  $1_1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP8[($0_1 + 40 | 0) >> 0] = 1;
  $2_1 = $0_1 + 8 | 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 28 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = $79(24 | 0, 16 | 0) | 0;
  label$1 : {
   $2_1 = HEAP32[$2_1 >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $5_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $1_1 | 0;
    i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    $40_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1 + $1_1 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $40_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
    $1_1 = $1_1 + 12 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = $3_1;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 2;
  $648($0_1 | 0);
  return $0_1 | 0;
 }
 
 function $648($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, $8_1 = 0, $1_1 = 0, $9_1 = 0, $72_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) >= ($2_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ((HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) < ($2_1 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
     break label$2;
    }
    label$4 : {
     label$5 : {
      if ($2_1) {
       break label$5
      }
      $3_1 = 0;
      $4_1 = $1_1;
      break label$4;
     }
     $3_1 = $79($2_1 << 2 | 0 | 0, 16 | 0) | 0;
     $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    $5_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
    label$6 : {
     label$7 : {
      if (($4_1 | 0) < (1 | 0)) {
       break label$7
      }
      $6_1 = $3_1;
      $7_1 = $5_1;
      label$8 : while (1) {
       HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
       $6_1 = $6_1 + 4 | 0;
       $7_1 = $7_1 + 4 | 0;
       $4_1 = $4_1 + -1 | 0;
       if ($4_1) {
        continue label$8
       }
       break label$6;
      };
     }
     if ($5_1) {
      break label$6
     }
     HEAP32[($0_1 + 36 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 32 | 0) >> 2] = $2_1;
     HEAP8[($0_1 + 40 | 0) >> 0] = 1;
     break label$2;
    }
    label$9 : {
     if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
      break label$9
     }
     $80($5_1 | 0);
    }
    HEAP32[($0_1 + 36 | 0) >> 2] = $3_1;
    HEAP8[($0_1 + 40 | 0) >> 0] = 1;
    HEAP32[($0_1 + 32 | 0) >> 2] = $2_1;
   }
   $6_1 = $1_1 << 2 | 0;
   $72_1 = $3_1 + $6_1 | 0;
   $3_1 = $2_1 << 2 | 0;
   $17($72_1 | 0, 0 | 0, $3_1 - $6_1 | 0 | 0) | 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
   label$10 : {
    $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (($5_1 | 0) >= ($2_1 | 0)) {
     break label$10
    }
    label$11 : {
     label$12 : {
      if ((HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0) < ($2_1 | 0)) {
       break label$12
      }
      $8_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
      break label$11;
     }
     label$13 : {
      label$14 : {
       if ($2_1) {
        break label$14
       }
       $8_1 = 0;
       $4_1 = $5_1;
       break label$13;
      }
      $8_1 = $79($3_1 | 0, 16 | 0) | 0;
      $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     }
     $9_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     label$15 : {
      label$16 : {
       if (($4_1 | 0) < (1 | 0)) {
        break label$16
       }
       $6_1 = $8_1;
       $7_1 = $9_1;
       label$17 : while (1) {
        HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
        $6_1 = $6_1 + 4 | 0;
        $7_1 = $7_1 + 4 | 0;
        $4_1 = $4_1 + -1 | 0;
        if ($4_1) {
         continue label$17
        }
        break label$15;
       };
      }
      if ($9_1) {
       break label$15
      }
      HEAP32[($0_1 + 56 | 0) >> 2] = $8_1;
      HEAP32[($0_1 + 52 | 0) >> 2] = $2_1;
      HEAP8[($0_1 + 60 | 0) >> 0] = 1;
      break label$11;
     }
     label$18 : {
      if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
       break label$18
      }
      $80($9_1 | 0);
     }
     HEAP32[($0_1 + 56 | 0) >> 2] = $8_1;
     HEAP8[($0_1 + 60 | 0) >> 0] = 1;
     HEAP32[($0_1 + 52 | 0) >> 2] = $2_1;
    }
    $6_1 = $5_1 << 2 | 0;
    $17($8_1 + $6_1 | 0 | 0, 0 | 0, $3_1 - $6_1 | 0 | 0) | 0;
   }
   HEAP32[($0_1 + 48 | 0) >> 2] = $2_1;
   label$19 : {
    if (($2_1 | 0) < (1 | 0)) {
     break label$19
    }
    $17(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, 255 | 0, $3_1 | 0) | 0;
    $17(HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0, 255 | 0, $3_1 | 0) | 0;
   }
   if (($1_1 | 0) < (1 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $4_1 = 0;
   label$20 : while (1) {
    $2_1 = (HEAP32[($6_1 + 4 | 0) >> 2] | 0) << 16 | 0 | (HEAP32[$6_1 >> 2] | 0) | 0;
    $2_1 = $2_1 + (($2_1 << 15 | 0) ^ -1 | 0) | 0;
    $2_1 = Math_imul(($2_1 >>> 10 | 0) ^ $2_1 | 0, 9);
    $2_1 = ($2_1 >>> 6 | 0) ^ $2_1 | 0;
    $2_1 = $2_1 + (($2_1 << 11 | 0) ^ -1 | 0) | 0;
    $2_1 = $3_1 + (((($2_1 >>> 16 | 0) ^ $2_1 | 0) & ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -1 | 0) | 0) << 2 | 0) | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $4_1;
    $6_1 = $6_1 + 12 | 0;
    $7_1 = $7_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($1_1 | 0) != ($4_1 | 0)) {
     continue label$20
    }
    break label$20;
   };
  }
 }
 
 function $649($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 16844;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  label$3 : {
   $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 40 | 0) >> 0] = 1;
  label$5 : {
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   label$6 : {
    if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
     break label$6
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  return $0_1 | 0;
 }
 
 function $650($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 16844;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  label$3 : {
   $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 40 | 0) >> 0] = 1;
  label$5 : {
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
    break label$5
   }
   $80($1_1 | 0);
  }
  $37($0_1 | 0);
 }
 
 function $651($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $68_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  label$3 : {
   $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 40 | 0) >> 0] = 1;
  label$5 : {
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   label$6 : {
    if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
     break label$6
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  label$7 : {
   if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) > (1 | 0)) {
    break label$7
   }
   $2_1 = $79(24 | 0, 16 | 0) | 0;
   label$8 : {
    $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($3_1 | 0) < (1 | 0)) {
     break label$8
    }
    $1_1 = 0;
    label$9 : while (1) {
     $5_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $1_1 | 0;
     i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
     $68_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + $1_1 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $68_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     $1_1 = $1_1 + 12 | 0;
     $3_1 = $3_1 + -1 | 0;
     if ($3_1) {
      continue label$9
     }
     break label$9;
    };
   }
   label$10 : {
    $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$10
    }
    label$11 : {
     if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
      break label$11
     }
     $80($1_1 | 0);
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = $2_1;
   HEAP8[($0_1 + 20 | 0) >> 0] = 1;
   HEAP32[($0_1 + 12 | 0) >> 2] = 2;
  }
  $648($0_1 | 0);
 }
 
 function $652($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0;
  HEAP32[(0 + 2768 | 0) >> 2] = (HEAP32[(0 + 2768 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = $2_1 << 16 | 0 | $1_1 | 0;
    $3_1 = $3_1 + (($3_1 << 15 | 0) ^ -1 | 0) | 0;
    $3_1 = Math_imul(($3_1 >>> 10 | 0) ^ $3_1 | 0, 9);
    $3_1 = ($3_1 >>> 6 | 0) ^ $3_1 | 0;
    $3_1 = $3_1 + (($3_1 << 11 | 0) ^ -1 | 0) | 0;
    $3_1 = ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -1 | 0) & (($3_1 >>> 16 | 0) ^ $3_1 | 0) | 0;
    if (($3_1 | 0) >= (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $3_1 = HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] | 0;
    if (($3_1 | 0) == (-1 | 0)) {
     break label$2
    }
    $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      $5_1 = $4_1 + Math_imul($3_1, 12) | 0;
      if ((HEAP32[$5_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
       break label$4
      }
      if ((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$1
      }
     }
     $3_1 = HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] | 0;
     if (($3_1 | 0) != (-1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $5_1 = 0;
  }
  return $5_1 | 0;
 }
 
 function $653($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $8_1 = 0, $12_1 = 0, $9_1 = 0, $7_1 = 0, $10_1 = 0, $6_1 = 0, $5_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $4_1 = $2_1 << 16 | 0 | $1_1 | 0;
    $4_1 = $4_1 + (($4_1 << 15 | 0) ^ -1 | 0) | 0;
    $4_1 = Math_imul(($4_1 >>> 10 | 0) ^ $4_1 | 0, 9);
    $4_1 = ($4_1 >>> 6 | 0) ^ $4_1 | 0;
    $4_1 = $4_1 + (($4_1 << 11 | 0) ^ -1 | 0) | 0;
    $5_1 = ($4_1 >>> 16 | 0) ^ $4_1 | 0;
    $6_1 = ($3_1 + -1 | 0) & $5_1 | 0;
    $4_1 = HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0;
    if (($4_1 | 0) == (-1 | 0)) {
     break label$2
    }
    $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       $8_1 = $7_1 + Math_imul($4_1, 12) | 0;
       if ((HEAP32[$8_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$5
       }
       if ((HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
        break label$3
       }
      }
      $4_1 = HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + ($4_1 << 2 | 0) | 0) >> 2] | 0;
      if (($4_1 | 0) != (-1 | 0)) {
       continue label$4
      }
      break label$2;
     };
    }
    if ($8_1) {
     break label$1
    }
   }
   $9_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $4_1 = $9_1;
   label$6 : {
    label$7 : {
     label$8 : {
      if (($4_1 | 0) != ($3_1 | 0)) {
       break label$8
      }
      $10_1 = $3_1 ? $3_1 << 1 | 0 : 1;
      $11_1 = ($3_1 | 0) >= ($10_1 | 0);
      if (!$11_1) {
       break label$7
      }
      $4_1 = $3_1;
     }
     HEAP32[($0_1 + 8 | 0) >> 2] = $4_1 + 1 | 0;
     $12_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     $8_1 = $12_1 + Math_imul($9_1, 12) | 0;
     break label$6;
    }
    label$9 : {
     label$10 : {
      if ($10_1) {
       break label$10
      }
      $12_1 = 0;
      break label$9;
     }
     $12_1 = $79(Math_imul($10_1, 12) | 0, 16 | 0) | 0;
     $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    label$11 : {
     if (($3_1 | 0) < (1 | 0)) {
      break label$11
     }
     $4_1 = 0;
     label$12 : while (1) {
      $8_1 = $12_1 + $4_1 | 0;
      $7_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $4_1 | 0;
      i64toi32_i32$1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
      $4_1 = $4_1 + 12 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       continue label$12
      }
      break label$12;
     };
    }
    label$13 : {
     $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$13
     }
     label$14 : {
      if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
       break label$14
      }
      $80($4_1 | 0);
     }
     HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = $12_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $10_1;
    HEAP8[($0_1 + 20 | 0) >> 0] = 1;
    HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    $8_1 = $12_1 + Math_imul($9_1, 12) | 0;
    if ($11_1) {
     break label$6
    }
    $648($0_1 | 0);
    $6_1 = ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -1 | 0) & $5_1 | 0;
   }
   HEAP32[$8_1 >> 2] = $1_1;
   $4_1 = $12_1 + Math_imul($9_1, 12) | 0;
   HEAP32[($4_1 + 8 | 0) >> 2] = 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = $2_1;
   $4_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0;
   HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + ($9_1 << 2 | 0) | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
   HEAP32[$4_1 >> 2] = $9_1;
  }
  return $8_1 | 0;
 }
 
 function $654($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $8_1 = 0, $7_1 = 0, $6_1 = 0, $9_1 = 0, $4_1 = 0, $3_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0;
  $3_1 = 0;
  HEAP32[(0 + 2760 | 0) >> 2] = (HEAP32[(0 + 2760 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   $5_1 = $2_1 << 16 | 0 | $1_1 | 0;
   $5_1 = $5_1 + (($5_1 << 15 | 0) ^ -1 | 0) | 0;
   $5_1 = Math_imul(($5_1 >>> 10 | 0) ^ $5_1 | 0, 9);
   $5_1 = ($5_1 >>> 6 | 0) ^ $5_1 | 0;
   $5_1 = $5_1 + (($5_1 << 11 | 0) ^ -1 | 0) | 0;
   $6_1 = $4_1 + ((((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -1 | 0) & (($5_1 >>> 16 | 0) ^ $5_1 | 0) | 0) << 2 | 0) | 0;
   $7_1 = HEAP32[$6_1 >> 2] | 0;
   if (($7_1 | 0) == (-1 | 0)) {
    break label$1
   }
   $8_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $5_1 = $7_1;
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      $9_1 = $8_1 + Math_imul($5_1, 12) | 0;
      if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
       break label$4
      }
      if ((HEAP32[($9_1 + 4 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$2
      }
     }
     $5_1 = HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + ($5_1 << 2 | 0) | 0) >> 2] | 0;
     if (($5_1 | 0) != (-1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   if (!$9_1) {
    break label$1
   }
   $1_1 = Math_imul($5_1, 12);
   $3_1 = HEAP32[(($8_1 + $1_1 | 0) + 8 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   label$5 : {
    label$6 : {
     label$7 : {
      $1_1 = ($1_1 | 0) / (12 | 0) | 0;
      if (($7_1 | 0) == ($1_1 | 0)) {
       break label$7
      }
      label$8 : while (1) {
       $2_1 = $7_1;
       $7_1 = HEAP32[($5_1 + ($7_1 << 2 | 0) | 0) >> 2] | 0;
       if (($7_1 | 0) != ($1_1 | 0)) {
        continue label$8
       }
       break label$8;
      };
      $7_1 = HEAP32[($5_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
      if (($2_1 | 0) == (-1 | 0)) {
       break label$6
      }
      HEAP32[($5_1 + ($2_1 << 2 | 0) | 0) >> 2] = $7_1;
      break label$5;
     }
     $7_1 = HEAP32[($5_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$6_1 >> 2] = $7_1;
   }
   label$9 : {
    $7_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    if (($7_1 | 0) != ($1_1 | 0)) {
     break label$9
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    return $3_1 | 0;
   }
   label$10 : {
    label$11 : {
     label$12 : {
      $6_1 = $8_1 + Math_imul($7_1, 12) | 0;
      $8_1 = (HEAP32[($6_1 + 4 | 0) >> 2] | 0) << 16 | 0 | (HEAP32[$6_1 >> 2] | 0) | 0;
      $8_1 = $8_1 + (($8_1 << 15 | 0) ^ -1 | 0) | 0;
      $8_1 = Math_imul(($8_1 >>> 10 | 0) ^ $8_1 | 0, 9);
      $8_1 = ($8_1 >>> 6 | 0) ^ $8_1 | 0;
      $8_1 = $8_1 + (($8_1 << 11 | 0) ^ -1 | 0) | 0;
      $10_1 = (($8_1 >>> 16 | 0) ^ $8_1 | 0) & ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -1 | 0) | 0;
      $4_1 = $4_1 + ($10_1 << 2 | 0) | 0;
      $8_1 = HEAP32[$4_1 >> 2] | 0;
      if (($8_1 | 0) != ($7_1 | 0)) {
       break label$12
      }
      $8_1 = HEAP32[($5_1 + ($7_1 << 2 | 0) | 0) >> 2] | 0;
      break label$11;
     }
     label$13 : while (1) {
      $2_1 = $8_1;
      $8_1 = HEAP32[($5_1 + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      if (($8_1 | 0) != ($7_1 | 0)) {
       continue label$13
      }
      break label$13;
     };
     $8_1 = HEAP32[($5_1 + ($7_1 << 2 | 0) | 0) >> 2] | 0;
     if (($2_1 | 0) == (-1 | 0)) {
      break label$11
     }
     HEAP32[($5_1 + ($2_1 << 2 | 0) | 0) >> 2] = $8_1;
     break label$10;
    }
    HEAP32[$4_1 >> 2] = $8_1;
   }
   i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
   HEAP32[$9_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
   HEAP32[($9_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($9_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
   $5_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + ($10_1 << 2 | 0) | 0;
   HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $1_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -1 | 0;
  }
  return $3_1 | 0;
 }
 
 function $655($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[(0 + 2764 | 0) >> 2] = (HEAP32[(0 + 2764 | 0) >> 2] | 0) + 1 | 0;
  return $653($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $656($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0;
 }
 
 function $657($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$1 = 0;
  $635($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  HEAP8[($0_1 + 104 | 0) >> 0] = 1;
  HEAP32[$0_1 >> 2] = 16908;
  HEAP32[($0_1 + 100 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 92 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  $1_1 = $79(64 | 0, 16 | 0) | 0;
  $647($1_1 | 0) | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 108 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 4 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 112 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 72 | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $658($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  HEAP32[$0_1 >> 2] = 16908;
  $1_1 = 8;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
   $3_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    label$3 : {
     $4_1 = HEAP32[((HEAP32[($2_1 + 16 | 0) >> 2] | 0) + $1_1 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0]($4_1) | 0;
     $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 60 | 0) >> 2] | 0]($5_1, $4_1);
    }
    $1_1 = $1_1 + 12 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
   $2_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  }
  $651($2_1 | 0);
  $1_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 84 | 0) >> 2] | 0 | 0);
  label$4 : {
   $1_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$4
   }
   label$5 : {
    if (!(HEAPU8[($0_1 + 104 | 0) >> 0] | 0)) {
     break label$5
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 100 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 100 | 0) >> 2] = 0;
  HEAP32[($0_1 + 92 | 0) >> 2] = 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = 0;
  HEAP8[($0_1 + 104 | 0) >> 0] = 1;
  $637($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $659($0_1) {
  $0_1 = $0_1 | 0;
  $37($658($0_1 | 0) | 0 | 0);
 }
 
 function $660($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = 8;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
   $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $0_1 = HEAP32[((HEAP32[($3_1 + 16 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1, $1_1);
     $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    }
    $2_1 = $2_1 + 12 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < ($4_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $661($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $10_1 = 0, $5_1 = 0, $13_1 = 0, $12_1 = 0, $14_1 = 0, $19_1 = Math_fround(0), $11_1 = 0, $21_1 = Math_fround(0), $16_1 = 0, $23_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $18_1 = Math_fround(0), $37_1 = Math_fround(0), $36_1 = Math_fround(0), $38_1 = Math_fround(0), $7_1 = 0, $9_1 = 0, i64toi32_i32$0 = 0, $20_1 = Math_fround(0), $24_1 = Math_fround(0), $30_1 = Math_fround(0), $32_1 = Math_fround(0), $42_1 = Math_fround(0), $17_1 = 0, $22_1 = Math_fround(0), $25_1 = Math_fround(0), $31_1 = Math_fround(0), $33_1 = Math_fround(0), $15_1 = 0, $26_1 = Math_fround(0), $50_1 = Math_fround(0), i64toi32_i32$1 = 0, $51_1 = Math_fround(0), $55_1 = 0, $53_1 = Math_fround(0), $52_1 = Math_fround(0), $56_1 = 0, $6_1 = 0, $8_1 = 0, $34_1 = Math_fround(0), $35_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $54_1 = Math_fround(0), $44_1 = Math_fround(0), $46_1 = Math_fround(0), $48_1 = Math_fround(0), $195_1 = 0, $43_1 = Math_fround(0), $45_1 = Math_fround(0), $47_1 = Math_fround(0), $49_1 = Math_fround(0), $763_1 = 0, $1525 = 0;
  $5_1 = global$0 - 3328 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $6_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $7_1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$3
     }
     $8_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     $9_1 = HEAP32[($8_1 + 68 | 0) >> 2] | 0;
     if ($9_1) {
      break label$2
     }
    }
    $639($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    break label$1;
   }
   label$4 : {
    label$5 : {
     if ((HEAP32[($6_1 + 72 | 0) >> 2] | 0 | 0) != (HEAP32[($0_1 + 108 | 0) >> 2] | 0 | 0)) {
      break label$5
     }
     if ((HEAP32[($8_1 + 72 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 112 | 0) >> 2] | 0 | 0)) {
      break label$4
     }
    }
    $10_1 = 8;
    label$6 : {
     $11_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
     $12_1 = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
     if (($12_1 | 0) < (1 | 0)) {
      break label$6
     }
     label$7 : while (1) {
      label$8 : {
       $13_1 = HEAP32[((HEAP32[($11_1 + 16 | 0) >> 2] | 0) + $10_1 | 0) >> 2] | 0;
       if (!$13_1) {
        break label$8
       }
       FUNCTION_TABLE[HEAP32[(HEAP32[$13_1 >> 2] | 0) >> 2] | 0]($13_1) | 0;
       $14_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$14_1 >> 2] | 0) + 60 | 0) >> 2] | 0]($14_1, $13_1);
      }
      $10_1 = $10_1 + 12 | 0;
      $12_1 = $12_1 + -1 | 0;
      if ($12_1) {
       continue label$7
      }
      break label$7;
     };
     $11_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
    }
    $651($11_1 | 0);
    HEAP32[($0_1 + 108 | 0) >> 2] = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
    HEAP32[($0_1 + 112 | 0) >> 2] = HEAP32[($8_1 + 72 | 0) >> 2] | 0;
   }
   HEAP32[($5_1 + 84 | 0) >> 2] = 0;
   HEAP8[($5_1 + 88 | 0) >> 0] = 1;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 0;
   HEAP32[($5_1 + 76 | 0) >> 2] = 0;
   HEAP32[($5_1 + 80 | 0) >> 2] = i64toi32_i32$0;
   $213($5_1 + 112 | 0 | 0) | 0;
   $213($5_1 + 916 | 0 | 0) | 0;
   $213($5_1 + 1720 | 0 | 0) | 0;
   $213($5_1 + 2524 | 0 | 0) | 0;
   label$9 : {
    $10_1 = HEAP32[($5_1 + 84 | 0) >> 2] | 0;
    if (!$10_1) {
     break label$9
    }
    label$10 : {
     if (!(HEAPU8[($5_1 + 88 | 0) >> 0] | 0)) {
      break label$10
     }
     $80($10_1 | 0);
    }
    HEAP32[($5_1 + 84 | 0) >> 2] = 0;
   }
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 4;
   HEAP32[($5_1 + 76 | 0) >> 2] = 0;
   HEAP32[($5_1 + 80 | 0) >> 2] = i64toi32_i32$0;
   $15_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
   HEAP8[($5_1 + 88 | 0) >> 0] = 0;
   $13_1 = HEAP32[($15_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 84 | 0) >> 2] = $5_1 + 112 | 0;
   label$11 : {
    label$12 : {
     label$13 : {
      if (($13_1 | 0) > (0 | 0)) {
       break label$13
      }
      $10_1 = $5_1 + 112 | 0;
      break label$12;
     }
     $16_1 = 0;
     label$14 : while (1) {
      label$15 : {
       $10_1 = HEAP32[(((HEAP32[($15_1 + 16 | 0) >> 2] | 0) + Math_imul($16_1, 12) | 0) + 8 | 0) >> 2] | 0;
       if (!$10_1) {
        break label$15
       }
       FUNCTION_TABLE[HEAP32[((HEAP32[$10_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($10_1, $5_1 + 72 | 0);
       label$16 : {
        $10_1 = HEAP32[($5_1 + 76 | 0) >> 2] | 0;
        if (($10_1 | 0) < (1 | 0)) {
         break label$16
        }
        $13_1 = 0;
        $14_1 = 0;
        label$17 : while (1) {
         label$18 : {
          $12_1 = HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + $13_1 | 0) >> 2] | 0;
          if (!(HEAP32[($12_1 + 780 | 0) >> 2] | 0)) {
           break label$18
          }
          HEAP32[($4_1 + 4 | 0) >> 2] = $12_1;
          $10_1 = HEAP32[($12_1 + 772 | 0) >> 2] | 0;
          $195_1 = $10_1;
          $11_1 = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
          $17_1 = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
          $10_1 = ($10_1 | 0) == ($17_1 | 0);
          $219($12_1 | 0, ($10_1 ? $195_1 : $11_1) + 4 | 0 | 0, ($10_1 ? $11_1 : $17_1) + 4 | 0 | 0);
          HEAP32[($4_1 + 4 | 0) >> 2] = 0;
          $10_1 = HEAP32[($5_1 + 76 | 0) >> 2] | 0;
         }
         $13_1 = $13_1 + 4 | 0;
         $14_1 = $14_1 + 1 | 0;
         if (($14_1 | 0) < ($10_1 | 0)) {
          continue label$17
         }
         break label$17;
        };
       }
       label$19 : {
        if (($10_1 | 0) > (-1 | 0)) {
         break label$19
        }
        label$20 : {
         if ((HEAP32[($5_1 + 80 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
          break label$20
         }
         label$21 : {
          $13_1 = HEAP32[($5_1 + 84 | 0) >> 2] | 0;
          if (!$13_1) {
           break label$21
          }
          label$22 : {
           if (!(HEAPU8[($5_1 + 88 | 0) >> 0] | 0)) {
            break label$22
           }
           $80($13_1 | 0);
          }
          HEAP32[($5_1 + 84 | 0) >> 2] = 0;
         }
         HEAP8[($5_1 + 88 | 0) >> 0] = 1;
         i64toi32_i32$1 = $5_1;
         i64toi32_i32$0 = 0;
         HEAP32[($5_1 + 80 | 0) >> 2] = 0;
         HEAP32[($5_1 + 84 | 0) >> 2] = i64toi32_i32$0;
        }
        $13_1 = $10_1 << 2 | 0;
        label$23 : while (1) {
         HEAP32[((HEAP32[($5_1 + 84 | 0) >> 2] | 0) + $13_1 | 0) >> 2] = 0;
         $13_1 = $13_1 + 4 | 0;
         $12_1 = $10_1 + 1 | 0;
         $14_1 = $12_1 >>> 0 >= $10_1 >>> 0;
         $10_1 = $12_1;
         if ($14_1) {
          continue label$23
         }
         break label$23;
        };
       }
       HEAP32[($5_1 + 76 | 0) >> 2] = 0;
       $13_1 = HEAP32[($15_1 + 8 | 0) >> 2] | 0;
      }
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) < ($13_1 | 0)) {
       continue label$14
      }
      break label$14;
     };
     $10_1 = HEAP32[($5_1 + 84 | 0) >> 2] | 0;
     if (!$10_1) {
      break label$11
     }
    }
    label$24 : {
     if (!(HEAPU8[($5_1 + 88 | 0) >> 0] | 0)) {
      break label$24
     }
     $80($10_1 | 0);
    }
    HEAP32[($5_1 + 84 | 0) >> 2] = 0;
   }
   HEAP32[($5_1 + 92 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 76 | 0) >> 2] = 0;
   HEAP32[($5_1 + 72 | 0) >> 2] = 16988;
   HEAP32[($5_1 + 88 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 104 | 0) >> 2] = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   HEAP32[($5_1 + 100 | 0) >> 2] = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
   HEAP32[($5_1 + 84 | 0) >> 2] = $2_1;
   $10_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   $18_1 = Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2]);
   HEAP32[($5_1 + 80 | 0) >> 2] = $1_1;
   $13_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   $19_1 = Math_fround(HEAPF32[($13_1 + 40 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($13_1 + 8 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($13_1 + 56 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[($13_1 + 52 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[($13_1 + 48 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[($13_1 + 36 | 0) >> 2]);
   $28_1 = Math_fround(HEAPF32[($13_1 + 20 | 0) >> 2]);
   $29_1 = Math_fround(HEAPF32[($13_1 + 4 | 0) >> 2]);
   $30_1 = Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]);
   $31_1 = Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]);
   $32_1 = Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]);
   $33_1 = Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]);
   $34_1 = Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]);
   $35_1 = Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]);
   $36_1 = Math_fround(HEAPF32[$13_1 >> 2]);
   $37_1 = Math_fround(HEAPF32[($13_1 + 16 | 0) >> 2]);
   $38_1 = Math_fround(HEAPF32[($13_1 + 32 | 0) >> 2]);
   $39_1 = Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]);
   $40_1 = Math_fround(HEAPF32[$10_1 >> 2]);
   $41_1 = Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]);
   HEAP32[($5_1 + 96 | 0) >> 2] = $4_1;
   label$25 : {
    $10_1 = HEAP32[$7_1 >> 2] | 0;
    if (!$10_1) {
     break label$25
    }
    $13_1 = HEAP32[$9_1 >> 2] | 0;
    if (!$13_1) {
     break label$25
    }
    $42_1 = Math_fround(-$26_1);
    $43_1 = Math_fround(Math_fround(Math_fround(Math_fround($23_1 * $42_1) - Math_fround($21_1 * $25_1)) - Math_fround($19_1 * $24_1)) + Math_fround(Math_fround(Math_fround($23_1 * $22_1) + Math_fround($21_1 * $20_1)) + Math_fround($19_1 * $18_1)));
    $26_1 = Math_fround(Math_fround(Math_fround(Math_fround($29_1 * $42_1) - Math_fround($28_1 * $25_1)) - Math_fround($27_1 * $24_1)) + Math_fround(Math_fround(Math_fround($29_1 * $22_1) + Math_fround($28_1 * $20_1)) + Math_fround($27_1 * $18_1)));
    $22_1 = Math_fround(Math_fround(Math_fround(Math_fround($36_1 * $42_1) - Math_fround($37_1 * $25_1)) - Math_fround($38_1 * $24_1)) + Math_fround(Math_fround(Math_fround($36_1 * $22_1) + Math_fround($37_1 * $20_1)) + Math_fround($38_1 * $18_1)));
    $18_1 = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
    HEAP32[($5_1 + 116 | 0) >> 2] = $13_1;
    HEAP32[($5_1 + 112 | 0) >> 2] = $10_1;
    $44_1 = Math_fround(Math_fround(Math_fround($23_1 * $32_1) + Math_fround($21_1 * $31_1)) + Math_fround($19_1 * $30_1));
    $45_1 = Math_fround(Math_abs($44_1));
    $46_1 = Math_fround(Math_fround(Math_fround($23_1 * $35_1) + Math_fround($21_1 * $34_1)) + Math_fround($19_1 * $33_1));
    $47_1 = Math_fround(Math_abs($46_1));
    $48_1 = Math_fround(Math_fround(Math_fround($23_1 * $40_1) + Math_fround($21_1 * $39_1)) + Math_fround($19_1 * $41_1));
    $49_1 = Math_fround(Math_abs($48_1));
    $42_1 = Math_fround(Math_fround(Math_fround($29_1 * $32_1) + Math_fround($28_1 * $31_1)) + Math_fround($27_1 * $30_1));
    $50_1 = Math_fround(Math_abs($42_1));
    $51_1 = Math_fround(Math_fround(Math_fround($29_1 * $35_1) + Math_fround($28_1 * $34_1)) + Math_fround($27_1 * $33_1));
    $52_1 = Math_fround(Math_abs($51_1));
    $53_1 = Math_fround(Math_fround(Math_fround($29_1 * $40_1) + Math_fround($28_1 * $39_1)) + Math_fround($27_1 * $41_1));
    $54_1 = Math_fround(Math_abs($53_1));
    $24_1 = Math_fround(Math_fround(Math_fround($36_1 * $32_1) + Math_fround($37_1 * $31_1)) + Math_fround($38_1 * $30_1));
    $25_1 = Math_fround(Math_abs($24_1));
    $30_1 = Math_fround(Math_fround(Math_fround($36_1 * $35_1) + Math_fround($37_1 * $34_1)) + Math_fround($38_1 * $33_1));
    $31_1 = Math_fround(Math_abs($30_1));
    $32_1 = Math_fround(Math_fround(Math_fround($36_1 * $40_1) + Math_fround($37_1 * $39_1)) + Math_fround($38_1 * $41_1));
    $33_1 = Math_fround(Math_abs($32_1));
    $15_1 = 124;
    $7_1 = 0;
    $16_1 = 128;
    $11_1 = $5_1 + 112 | 0;
    $3_1 = 128;
    $13_1 = 1;
    label$26 : while (1) {
     label$27 : {
      label$28 : {
       label$29 : {
        label$30 : {
         $14_1 = $13_1 + -1 | 0;
         $17_1 = $14_1 << 3 | 0;
         $10_1 = $11_1 + $17_1 | 0;
         $12_1 = HEAP32[$10_1 >> 2] | 0;
         $10_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
         $19_1 = Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]);
         $21_1 = Math_fround(HEAPF32[$10_1 >> 2]);
         $37_1 = Math_fround(Math_fround(Math_fround($19_1 - $21_1) * Math_fround(.5)) + Math_fround(0.0));
         $23_1 = Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]);
         $27_1 = Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]);
         $38_1 = Math_fround(Math_fround(Math_fround($23_1 - $27_1) * Math_fround(.5)) + Math_fround(0.0));
         $28_1 = Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]);
         $29_1 = Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]);
         $20_1 = Math_fround(Math_fround(Math_fround($28_1 - $29_1) * Math_fround(.5)) + Math_fround(0.0));
         $36_1 = Math_fround(Math_fround(Math_fround($33_1 * $37_1) + Math_fround($31_1 * $38_1)) + Math_fround($25_1 * $20_1));
         $21_1 = Math_fround(Math_fround($19_1 + $21_1) * Math_fround(.5));
         $23_1 = Math_fround(Math_fround($23_1 + $27_1) * Math_fround(.5));
         $27_1 = Math_fround(Math_fround($28_1 + $29_1) * Math_fround(.5));
         $19_1 = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($32_1 * $21_1) + Math_fround($30_1 * $23_1)) + Math_fround($24_1 * $27_1)));
         if (Math_fround(HEAPF32[$12_1 >> 2]) <= Math_fround($18_1 + Math_fround($36_1 + $19_1)) ^ 1 | 0) {
          break label$30
         }
         if (Math_fround(HEAPF32[($12_1 + 16 | 0) >> 2]) >= Math_fround(Math_fround($19_1 - $36_1) - $18_1) ^ 1 | 0) {
          break label$30
         }
         $19_1 = Math_fround(Math_fround(Math_fround($54_1 * $37_1) + Math_fround($52_1 * $38_1)) + Math_fround($50_1 * $20_1));
         $28_1 = Math_fround($26_1 + Math_fround(Math_fround(Math_fround($53_1 * $21_1) + Math_fround($51_1 * $23_1)) + Math_fround($42_1 * $27_1)));
         if (Math_fround(HEAPF32[($12_1 + 4 | 0) >> 2]) <= Math_fround($18_1 + Math_fround($19_1 + $28_1)) ^ 1 | 0) {
          break label$30
         }
         if (Math_fround(HEAPF32[($12_1 + 20 | 0) >> 2]) >= Math_fround(Math_fround($28_1 - $19_1) - $18_1) ^ 1 | 0) {
          break label$30
         }
         $19_1 = Math_fround(Math_fround(Math_fround($49_1 * $37_1) + Math_fround($47_1 * $38_1)) + Math_fround($45_1 * $20_1));
         $21_1 = Math_fround($43_1 + Math_fround(Math_fround(Math_fround($48_1 * $21_1) + Math_fround($46_1 * $23_1)) + Math_fround($44_1 * $27_1)));
         if (Math_fround(HEAPF32[($12_1 + 8 | 0) >> 2]) <= Math_fround($18_1 + Math_fround($19_1 + $21_1)) ^ 1 | 0) {
          break label$30
         }
         if (Math_fround(HEAPF32[($12_1 + 24 | 0) >> 2]) >= Math_fround(Math_fround($21_1 - $19_1) - $18_1) ^ 1 | 0) {
          break label$30
         }
         label$31 : {
          label$32 : {
           if (($14_1 | 0) > ($15_1 | 0)) {
            break label$32
           }
           $55_1 = $16_1;
           $9_1 = $11_1;
           $56_1 = $7_1;
           break label$31;
          }
          label$33 : {
           label$34 : {
            $55_1 = $16_1 << 1 | 0;
            if (($16_1 | 0) >= ($55_1 | 0)) {
             break label$34
            }
            if (($3_1 | 0) >= ($55_1 | 0)) {
             break label$34
            }
            label$35 : {
             label$36 : {
              label$37 : {
               label$38 : {
                label$39 : {
                 if ($16_1) {
                  break label$39
                 }
                 $9_1 = 0;
                 break label$38;
                }
                $9_1 = $79($16_1 << 4 | 0 | 0, 16 | 0) | 0;
                if (($16_1 | 0) < (1 | 0)) {
                 break label$38
                }
                $15_1 = $9_1;
                $3_1 = $11_1;
                label$40 : while (1) {
                 i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
                 $763_1 = i64toi32_i32$0;
                 i64toi32_i32$0 = $15_1;
                 HEAP32[i64toi32_i32$0 >> 2] = $763_1;
                 HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
                 $15_1 = i64toi32_i32$0 + 8 | 0;
                 $3_1 = $3_1 + 8 | 0;
                 $16_1 = $16_1 + -1 | 0;
                 if ($16_1) {
                  continue label$40
                 }
                 break label$40;
                };
                if (!($7_1 & 255 | 0)) {
                 break label$36
                }
                break label$37;
               }
               $56_1 = 1;
               if (!$11_1) {
                break label$35
               }
               $3_1 = $55_1;
               if (!($7_1 & 255 | 0)) {
                break label$33
               }
              }
              $80($11_1 | 0);
             }
             $56_1 = 1;
            }
            $3_1 = $55_1;
            break label$33;
           }
           $9_1 = $11_1;
           $56_1 = $7_1;
          }
          $15_1 = $55_1 + -4 | 0;
         }
         $11_1 = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
         label$41 : {
          if (!(HEAP32[($12_1 + 40 | 0) >> 2] | 0)) {
           break label$41
          }
          $14_1 = HEAP32[($12_1 + 36 | 0) >> 2] | 0;
          label$42 : {
           if (!$11_1) {
            break label$42
           }
           $11_1 = $9_1 + $17_1 | 0;
           HEAP32[($11_1 + 4 | 0) >> 2] = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
           HEAP32[$11_1 >> 2] = $14_1;
           $11_1 = HEAP32[($12_1 + 40 | 0) >> 2] | 0;
           $14_1 = $9_1 + ($13_1 << 3 | 0) | 0;
           HEAP32[($14_1 + 4 | 0) >> 2] = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
           HEAP32[$14_1 >> 2] = $11_1;
           $11_1 = HEAP32[($12_1 + 36 | 0) >> 2] | 0;
           HEAP32[($14_1 + 12 | 0) >> 2] = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
           HEAP32[($14_1 + 8 | 0) >> 2] = $11_1;
           $12_1 = HEAP32[($12_1 + 40 | 0) >> 2] | 0;
           HEAP32[($14_1 + 20 | 0) >> 2] = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
           HEAP32[($14_1 + 16 | 0) >> 2] = $12_1;
           $13_1 = $13_1 + 3 | 0;
           break label$28;
          }
          $11_1 = $9_1 + $17_1 | 0;
          HEAP32[($11_1 + 4 | 0) >> 2] = $10_1;
          HEAP32[$11_1 >> 2] = $14_1;
          $12_1 = HEAP32[($12_1 + 40 | 0) >> 2] | 0;
          $14_1 = $9_1 + ($13_1 << 3 | 0) | 0;
          HEAP32[($14_1 + 4 | 0) >> 2] = $10_1;
          HEAP32[$14_1 >> 2] = $12_1;
          break label$29;
         }
         label$43 : {
          if (!$11_1) {
           break label$43
          }
          $14_1 = $9_1 + $17_1 | 0;
          HEAP32[($14_1 + 4 | 0) >> 2] = HEAP32[($10_1 + 36 | 0) >> 2] | 0;
          HEAP32[$14_1 >> 2] = $12_1;
          $14_1 = $9_1 + ($13_1 << 3 | 0) | 0;
          HEAP32[($14_1 + 4 | 0) >> 2] = HEAP32[($10_1 + 40 | 0) >> 2] | 0;
          HEAP32[$14_1 >> 2] = $12_1;
          break label$29;
         }
         FUNCTION_TABLE[HEAP32[((HEAP32[($5_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0]($5_1 + 72 | 0, $12_1, $10_1);
         $16_1 = $55_1;
         $11_1 = $9_1;
         $7_1 = $56_1;
        }
        $13_1 = $14_1;
        break label$27;
       }
       $13_1 = $13_1 + 1 | 0;
      }
      $16_1 = $55_1;
      $11_1 = $9_1;
      $7_1 = $56_1;
     }
     if ($13_1) {
      continue label$26
     }
     break label$26;
    };
    if (!$11_1) {
     break label$25
    }
    if (!($7_1 & 255 | 0)) {
     break label$25
    }
    $80($11_1 | 0);
   }
   label$44 : {
    $17_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
    if ((HEAP32[($17_1 + 8 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$44
    }
    $11_1 = 0;
    label$45 : while (1) {
     label$46 : {
      $12_1 = Math_imul($11_1, 12);
      $10_1 = (HEAP32[($17_1 + 16 | 0) >> 2] | 0) + $12_1 | 0;
      $14_1 = HEAP32[($10_1 + 8 | 0) >> 2] | 0;
      if (!$14_1) {
       break label$46
      }
      $10_1 = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[$10_1 >> 2] | 0, 80) | 0;
      $16_1 = HEAP32[($10_1 + 64 | 0) >> 2] | 0;
      $13_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      $51_1 = Math_fround(HEAPF32[($13_1 + 52 | 0) >> 2]);
      $52_1 = Math_fround(HEAPF32[($13_1 + 56 | 0) >> 2]);
      $38_1 = Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]);
      $20_1 = Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2]);
      $22_1 = Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2]);
      $24_1 = Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]);
      $25_1 = Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]);
      $30_1 = Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]);
      $31_1 = Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]);
      $32_1 = Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]);
      $33_1 = Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]);
      $19_1 = Math_fround(HEAPF32[($13_1 + 20 | 0) >> 2]);
      $21_1 = Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]);
      $26_1 = Math_fround(HEAPF32[$10_1 >> 2]);
      $23_1 = Math_fround(HEAPF32[($13_1 + 36 | 0) >> 2]);
      $42_1 = Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]);
      $27_1 = Math_fround(HEAPF32[($13_1 + 40 | 0) >> 2]);
      $50_1 = Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]);
      $53_1 = Math_fround(HEAPF32[($13_1 + 48 | 0) >> 2]);
      $28_1 = Math_fround(HEAPF32[($13_1 + 8 | 0) >> 2]);
      $29_1 = Math_fround(HEAPF32[$13_1 >> 2]);
      $18_1 = Math_fround(HEAPF32[($13_1 + 4 | 0) >> 2]);
      $36_1 = Math_fround(HEAPF32[($13_1 + 16 | 0) >> 2]);
      $37_1 = Math_fround(HEAPF32[($13_1 + 32 | 0) >> 2]);
      HEAP32[($5_1 + 172 | 0) >> 2] = 0;
      HEAP32[($5_1 + 156 | 0) >> 2] = 0;
      HEAP32[($5_1 + 140 | 0) >> 2] = 0;
      HEAP32[($5_1 + 124 | 0) >> 2] = 0;
      HEAPF32[($5_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround($37_1 * $26_1) + Math_fround($23_1 * $42_1)) + Math_fround($27_1 * $50_1));
      HEAPF32[($5_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround($36_1 * $26_1) + Math_fround($19_1 * $42_1)) + Math_fround($21_1 * $50_1));
      HEAPF32[($5_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround($29_1 * $26_1) + Math_fround($18_1 * $42_1)) + Math_fround($28_1 * $50_1));
      HEAPF32[($5_1 + 152 | 0) >> 2] = Math_fround(Math_fround(Math_fround($37_1 * $31_1) + Math_fround($23_1 * $32_1)) + Math_fround($27_1 * $33_1));
      HEAPF32[($5_1 + 148 | 0) >> 2] = Math_fround(Math_fround(Math_fround($37_1 * $24_1) + Math_fround($23_1 * $25_1)) + Math_fround($27_1 * $30_1));
      HEAPF32[($5_1 + 136 | 0) >> 2] = Math_fround(Math_fround(Math_fround($36_1 * $31_1) + Math_fround($19_1 * $32_1)) + Math_fround($21_1 * $33_1));
      HEAPF32[($5_1 + 132 | 0) >> 2] = Math_fround(Math_fround(Math_fround($36_1 * $24_1) + Math_fround($19_1 * $25_1)) + Math_fround($21_1 * $30_1));
      HEAPF32[($5_1 + 120 | 0) >> 2] = Math_fround(Math_fround(Math_fround($29_1 * $31_1) + Math_fround($18_1 * $32_1)) + Math_fround($28_1 * $33_1));
      HEAPF32[($5_1 + 116 | 0) >> 2] = Math_fround(Math_fround(Math_fround($29_1 * $24_1) + Math_fround($18_1 * $25_1)) + Math_fround($28_1 * $30_1));
      HEAPF32[($5_1 + 168 | 0) >> 2] = Math_fround($52_1 + Math_fround(Math_fround(Math_fround($37_1 * $38_1) + Math_fround($23_1 * $20_1)) + Math_fround($27_1 * $22_1)));
      HEAPF32[($5_1 + 164 | 0) >> 2] = Math_fround($51_1 + Math_fround(Math_fround(Math_fround($36_1 * $38_1) + Math_fround($19_1 * $20_1)) + Math_fround($21_1 * $22_1)));
      HEAPF32[($5_1 + 160 | 0) >> 2] = Math_fround($53_1 + Math_fround(Math_fround(Math_fround($29_1 * $38_1) + Math_fround($18_1 * $20_1)) + Math_fround($28_1 * $22_1)));
      FUNCTION_TABLE[HEAP32[((HEAP32[$16_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($16_1, $5_1 + 112 | 0, $5_1 + 56 | 0, $5_1 + 40 | 0);
      $19_1 = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
      HEAPF32[($5_1 + 56 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]) - $19_1);
      HEAPF32[($5_1 + 60 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 60 | 0) >> 2]) - $19_1);
      HEAPF32[($5_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($5_1 + 64 | 0) >> 2]) - $19_1);
      HEAPF32[($5_1 + 40 | 0) >> 2] = Math_fround($19_1 + Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]));
      HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround($19_1 + Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2]));
      HEAPF32[($5_1 + 48 | 0) >> 2] = Math_fround($19_1 + Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]));
      $10_1 = (HEAP32[($8_1 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[(((HEAP32[($17_1 + 16 | 0) >> 2] | 0) + $12_1 | 0) + 4 | 0) >> 2] | 0, 80) | 0;
      $16_1 = HEAP32[($10_1 + 64 | 0) >> 2] | 0;
      $13_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      $52_1 = Math_fround(HEAPF32[($13_1 + 52 | 0) >> 2]);
      $53_1 = Math_fround(HEAPF32[($13_1 + 56 | 0) >> 2]);
      $20_1 = Math_fround(HEAPF32[($10_1 + 48 | 0) >> 2]);
      $22_1 = Math_fround(HEAPF32[($10_1 + 52 | 0) >> 2]);
      $24_1 = Math_fround(HEAPF32[($10_1 + 56 | 0) >> 2]);
      $25_1 = Math_fround(HEAPF32[($10_1 + 4 | 0) >> 2]);
      $30_1 = Math_fround(HEAPF32[($10_1 + 20 | 0) >> 2]);
      $31_1 = Math_fround(HEAPF32[($10_1 + 36 | 0) >> 2]);
      $32_1 = Math_fround(HEAPF32[($10_1 + 8 | 0) >> 2]);
      $33_1 = Math_fround(HEAPF32[($10_1 + 24 | 0) >> 2]);
      $26_1 = Math_fround(HEAPF32[($10_1 + 40 | 0) >> 2]);
      $21_1 = Math_fround(HEAPF32[($13_1 + 20 | 0) >> 2]);
      $23_1 = Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]);
      $42_1 = Math_fround(HEAPF32[$10_1 >> 2]);
      $27_1 = Math_fround(HEAPF32[($13_1 + 36 | 0) >> 2]);
      $50_1 = Math_fround(HEAPF32[($10_1 + 16 | 0) >> 2]);
      $28_1 = Math_fround(HEAPF32[($13_1 + 40 | 0) >> 2]);
      $51_1 = Math_fround(HEAPF32[($10_1 + 32 | 0) >> 2]);
      $54_1 = Math_fround(HEAPF32[($13_1 + 48 | 0) >> 2]);
      $29_1 = Math_fround(HEAPF32[($13_1 + 8 | 0) >> 2]);
      $18_1 = Math_fround(HEAPF32[$13_1 >> 2]);
      $36_1 = Math_fround(HEAPF32[($13_1 + 4 | 0) >> 2]);
      $37_1 = Math_fround(HEAPF32[($13_1 + 16 | 0) >> 2]);
      $38_1 = Math_fround(HEAPF32[($13_1 + 32 | 0) >> 2]);
      HEAP32[($5_1 + 172 | 0) >> 2] = 0;
      HEAP32[($5_1 + 156 | 0) >> 2] = 0;
      HEAP32[($5_1 + 140 | 0) >> 2] = 0;
      HEAP32[($5_1 + 124 | 0) >> 2] = 0;
      HEAPF32[($5_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround($38_1 * $42_1) + Math_fround($27_1 * $50_1)) + Math_fround($28_1 * $51_1));
      HEAPF32[($5_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround($37_1 * $42_1) + Math_fround($21_1 * $50_1)) + Math_fround($23_1 * $51_1));
      HEAPF32[($5_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $42_1) + Math_fround($36_1 * $50_1)) + Math_fround($29_1 * $51_1));
      HEAPF32[($5_1 + 152 | 0) >> 2] = Math_fround(Math_fround(Math_fround($38_1 * $32_1) + Math_fround($27_1 * $33_1)) + Math_fround($28_1 * $26_1));
      HEAPF32[($5_1 + 148 | 0) >> 2] = Math_fround(Math_fround(Math_fround($38_1 * $25_1) + Math_fround($27_1 * $30_1)) + Math_fround($28_1 * $31_1));
      HEAPF32[($5_1 + 136 | 0) >> 2] = Math_fround(Math_fround(Math_fround($37_1 * $32_1) + Math_fround($21_1 * $33_1)) + Math_fround($23_1 * $26_1));
      HEAPF32[($5_1 + 132 | 0) >> 2] = Math_fround(Math_fround(Math_fround($37_1 * $25_1) + Math_fround($21_1 * $30_1)) + Math_fround($23_1 * $31_1));
      HEAPF32[($5_1 + 120 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $32_1) + Math_fround($36_1 * $33_1)) + Math_fround($29_1 * $26_1));
      HEAPF32[($5_1 + 116 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $25_1) + Math_fround($36_1 * $30_1)) + Math_fround($29_1 * $31_1));
      HEAPF32[($5_1 + 168 | 0) >> 2] = Math_fround($53_1 + Math_fround(Math_fround(Math_fround($38_1 * $20_1) + Math_fround($27_1 * $22_1)) + Math_fround($28_1 * $24_1)));
      HEAPF32[($5_1 + 164 | 0) >> 2] = Math_fround($52_1 + Math_fround(Math_fround(Math_fround($37_1 * $20_1) + Math_fround($21_1 * $22_1)) + Math_fround($23_1 * $24_1)));
      HEAPF32[($5_1 + 160 | 0) >> 2] = Math_fround($54_1 + Math_fround(Math_fround(Math_fround($18_1 * $20_1) + Math_fround($36_1 * $22_1)) + Math_fround($29_1 * $24_1)));
      FUNCTION_TABLE[HEAP32[((HEAP32[$16_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($16_1, $5_1 + 112 | 0, $5_1 + 24 | 0, $5_1 + 8 | 0);
      $27_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) - $19_1);
      HEAPF32[($5_1 + 24 | 0) >> 2] = $27_1;
      $21_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]) - $19_1);
      HEAPF32[($5_1 + 28 | 0) >> 2] = $21_1;
      $29_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]) - $19_1);
      HEAPF32[($5_1 + 32 | 0) >> 2] = $29_1;
      $23_1 = Math_fround($19_1 + Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]));
      HEAPF32[($5_1 + 8 | 0) >> 2] = $23_1;
      $28_1 = Math_fround($19_1 + Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]));
      HEAPF32[($5_1 + 16 | 0) >> 2] = $28_1;
      $19_1 = Math_fround($19_1 + Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]));
      HEAPF32[($5_1 + 12 | 0) >> 2] = $19_1;
      label$47 : {
       if (Math_fround(HEAPF32[($5_1 + 60 | 0) >> 2]) > $19_1) {
        break label$47
       }
       if (Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2]) < $21_1) {
        break label$47
       }
       if (Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]) > $23_1) {
        break label$47
       }
       if (Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]) < $27_1) {
        break label$47
       }
       if (Math_fround(HEAPF32[($5_1 + 64 | 0) >> 2]) > $28_1) {
        break label$47
       }
       if (Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]) < $29_1 ^ 1 | 0) {
        break label$46
       }
      }
      FUNCTION_TABLE[HEAP32[(HEAP32[$14_1 >> 2] | 0) >> 2] | 0]($14_1) | 0;
      $10_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$10_1 >> 2] | 0) + 60 | 0) >> 2] | 0]($10_1, $14_1);
      $10_1 = (HEAP32[($17_1 + 16 | 0) >> 2] | 0) + $12_1 | 0;
      $15_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      $3_1 = HEAP32[$10_1 >> 2] | 0;
      label$48 : {
       $13_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
       if (($13_1 | 0) != (HEAP32[($0_1 + 96 | 0) >> 2] | 0 | 0)) {
        break label$48
       }
       $7_1 = $13_1 ? $13_1 << 1 | 0 : 1;
       if (($13_1 | 0) >= ($7_1 | 0)) {
        break label$48
       }
       label$49 : {
        label$50 : {
         if ($7_1) {
          break label$50
         }
         $16_1 = 0;
         break label$49;
        }
        $16_1 = $79(Math_imul($7_1, 12) | 0, 16 | 0) | 0;
        $13_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
       }
       label$51 : {
        if (($13_1 | 0) < (1 | 0)) {
         break label$51
        }
        $10_1 = 0;
        label$52 : while (1) {
         $12_1 = $16_1 + $10_1 | 0;
         $14_1 = (HEAP32[($0_1 + 100 | 0) >> 2] | 0) + $10_1 | 0;
         i64toi32_i32$1 = HEAP32[$14_1 >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
         $1525 = i64toi32_i32$1;
         i64toi32_i32$1 = $12_1;
         HEAP32[$12_1 >> 2] = $1525;
         HEAP32[($12_1 + 4 | 0) >> 2] = i64toi32_i32$0;
         HEAP32[($12_1 + 8 | 0) >> 2] = HEAP32[($14_1 + 8 | 0) >> 2] | 0;
         $10_1 = $10_1 + 12 | 0;
         $13_1 = $13_1 + -1 | 0;
         if ($13_1) {
          continue label$52
         }
         break label$52;
        };
       }
       label$53 : {
        $10_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
        if (!$10_1) {
         break label$53
        }
        label$54 : {
         if (!(HEAPU8[($0_1 + 104 | 0) >> 0] | 0)) {
          break label$54
         }
         $80($10_1 | 0);
        }
        HEAP32[($0_1 + 100 | 0) >> 2] = 0;
       }
       HEAP32[($0_1 + 100 | 0) >> 2] = $16_1;
       HEAP8[($0_1 + 104 | 0) >> 0] = 1;
       HEAP32[($0_1 + 96 | 0) >> 2] = $7_1;
       $13_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
      }
      $10_1 = (HEAP32[($0_1 + 100 | 0) >> 2] | 0) + Math_imul($13_1, 12) | 0;
      HEAP32[($10_1 + 8 | 0) >> 2] = 0;
      HEAP32[($10_1 + 4 | 0) >> 2] = $15_1;
      HEAP32[$10_1 >> 2] = $3_1;
      HEAP32[($0_1 + 92 | 0) >> 2] = (HEAP32[($0_1 + 92 | 0) >> 2] | 0) + 1 | 0;
     }
     $11_1 = $11_1 + 1 | 0;
     if (($11_1 | 0) < (HEAP32[($17_1 + 8 | 0) >> 2] | 0 | 0)) {
      continue label$45
     }
     break label$45;
    };
   }
   label$55 : {
    if ((HEAP32[($0_1 + 92 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$55
    }
    $13_1 = 0;
    $10_1 = 4;
    label$56 : while (1) {
     $12_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
     $4_1 = (HEAP32[($0_1 + 100 | 0) >> 2] | 0) + $10_1 | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$12_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($12_1, HEAP32[($4_1 + -4 | 0) >> 2] | 0, HEAP32[$4_1 >> 2] | 0) | 0;
     $10_1 = $10_1 + 12 | 0;
     $13_1 = $13_1 + 1 | 0;
     if (($13_1 | 0) < (HEAP32[($0_1 + 92 | 0) >> 2] | 0 | 0)) {
      continue label$56
     }
     break label$56;
    };
   }
   label$57 : {
    $10_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
    if (!$10_1) {
     break label$57
    }
    label$58 : {
     if (!(HEAPU8[($0_1 + 104 | 0) >> 0] | 0)) {
      break label$58
     }
     $80($10_1 | 0);
    }
    HEAP32[($0_1 + 100 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 100 | 0) >> 2] = 0;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 92 | 0) >> 2] = 0;
   HEAP32[($0_1 + 96 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($0_1 + 104 | 0) >> 0] = 1;
  }
  global$0 = $5_1 + 3328 | 0;
 }
 
 function $662($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function $663($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $664($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $17_1 = Math_fround(0), $23_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $12_1 = Math_fround(0), $16_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $7_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0, i64toi32_i32$0 = 0, $13_1 = Math_fround(0), $18_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $8_1 = 0, $24_1 = 0, $4_1 = 0, $231_1 = Math_fround(0), $237_1 = Math_fround(0), $470_1 = Math_fround(0), $476_1 = Math_fround(0), i64toi32_i32$1 = 0, $755_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 256 | 0;
  global$0 = $3_1;
  $4_1 = $616($3_1 + 248 | 0 | 0, 17064 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 1 | 0;
  $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $6_1 = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 28 | 0;
  $7_1 = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
  $8_1 = Math_imul($7_1, 80);
  $9_1 = HEAP32[(((HEAP32[$6_1 >> 2] | 0) + $8_1 | 0) + 64 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $10_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
  $1_1 = (HEAP32[((HEAP32[($2_1 + 4 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + Math_imul($10_1, 80) | 0;
  $11_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
  $2_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $12_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $21_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
  $24_1 = 0;
  HEAP32[(($3_1 + 184 | 0) + 60 | 0) >> 2] = 0;
  HEAP32[(($3_1 + 184 | 0) + 44 | 0) >> 2] = 0;
  HEAP32[(($3_1 + 184 | 0) + 28 | 0) >> 2] = 0;
  $25_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $27_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  HEAPF32[(($3_1 + 184 | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($23_1 * $25_1) + Math_fround($17_1 * $26_1)) + Math_fround($16_1 * $27_1));
  $28_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $29_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $30_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  HEAPF32[(($3_1 + 184 | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($23_1 * $28_1) + Math_fround($17_1 * $29_1)) + Math_fround($16_1 * $30_1));
  HEAPF32[(($3_1 + 184 | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($22_1 * $25_1) + Math_fround($15_1 * $26_1)) + Math_fround($14_1 * $27_1));
  HEAPF32[(($3_1 + 184 | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($22_1 * $28_1) + Math_fround($15_1 * $29_1)) + Math_fround($14_1 * $30_1));
  $31_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $32_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $33_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  HEAPF32[(($3_1 + 184 | 0) + 56 | 0) >> 2] = Math_fround($13_1 + Math_fround(Math_fround(Math_fround($23_1 * $31_1) + Math_fround($17_1 * $32_1)) + Math_fround($16_1 * $33_1)));
  HEAPF32[(($3_1 + 184 | 0) + 52 | 0) >> 2] = Math_fround($12_1 + Math_fround(Math_fround(Math_fround($22_1 * $31_1) + Math_fround($15_1 * $32_1)) + Math_fround($14_1 * $33_1)));
  HEAP32[($3_1 + 196 | 0) >> 2] = 0;
  $12_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $231_1 = Math_fround($23_1 * $12_1);
  $23_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $237_1 = Math_fround($231_1 + Math_fround($17_1 * $23_1));
  $17_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  HEAPF32[($3_1 + 216 | 0) >> 2] = Math_fround($237_1 + Math_fround($16_1 * $17_1));
  HEAPF32[($3_1 + 200 | 0) >> 2] = Math_fround(Math_fround(Math_fround($22_1 * $12_1) + Math_fround($15_1 * $23_1)) + Math_fround($14_1 * $17_1));
  HEAPF32[($3_1 + 192 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $25_1) + Math_fround($21_1 * $26_1)) + Math_fround($19_1 * $27_1));
  HEAPF32[($3_1 + 188 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $28_1) + Math_fround($21_1 * $29_1)) + Math_fround($19_1 * $30_1));
  HEAPF32[($3_1 + 184 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $12_1) + Math_fround($21_1 * $23_1)) + Math_fround($19_1 * $17_1));
  HEAPF32[($3_1 + 232 | 0) >> 2] = Math_fround($18_1 + Math_fround(Math_fround(Math_fround($20_1 * $31_1) + Math_fround($21_1 * $32_1)) + Math_fround($19_1 * $33_1)));
  $1_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $12_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $2_1 = HEAP32[$6_1 >> 2] | 0;
  $18_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $21_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  HEAP32[(($3_1 + 120 | 0) + 60 | 0) >> 2] = 0;
  HEAP32[(($3_1 + 120 | 0) + 44 | 0) >> 2] = 0;
  HEAP32[(($3_1 + 120 | 0) + 28 | 0) >> 2] = 0;
  $1_1 = $2_1 + $8_1 | 0;
  $25_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $27_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  HEAPF32[(($3_1 + 120 | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($23_1 * $25_1) + Math_fround($17_1 * $26_1)) + Math_fround($16_1 * $27_1));
  $28_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $29_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $30_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  HEAPF32[(($3_1 + 120 | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($23_1 * $28_1) + Math_fround($17_1 * $29_1)) + Math_fround($16_1 * $30_1));
  HEAPF32[(($3_1 + 120 | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($22_1 * $25_1) + Math_fround($15_1 * $26_1)) + Math_fround($14_1 * $27_1));
  HEAPF32[(($3_1 + 120 | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($22_1 * $28_1) + Math_fround($15_1 * $29_1)) + Math_fround($14_1 * $30_1));
  $31_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $32_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $33_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  HEAPF32[(($3_1 + 120 | 0) + 56 | 0) >> 2] = Math_fround($13_1 + Math_fround(Math_fround(Math_fround($23_1 * $31_1) + Math_fround($17_1 * $32_1)) + Math_fround($16_1 * $33_1)));
  HEAPF32[(($3_1 + 120 | 0) + 52 | 0) >> 2] = Math_fround($12_1 + Math_fround(Math_fround(Math_fround($22_1 * $31_1) + Math_fround($15_1 * $32_1)) + Math_fround($14_1 * $33_1)));
  HEAP32[($3_1 + 132 | 0) >> 2] = 0;
  $12_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $470_1 = Math_fround($23_1 * $12_1);
  $23_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $476_1 = Math_fround($470_1 + Math_fround($17_1 * $23_1));
  $17_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  HEAPF32[($3_1 + 152 | 0) >> 2] = Math_fround($476_1 + Math_fround($16_1 * $17_1));
  HEAPF32[($3_1 + 136 | 0) >> 2] = Math_fround(Math_fround(Math_fround($22_1 * $12_1) + Math_fround($15_1 * $23_1)) + Math_fround($14_1 * $17_1));
  HEAPF32[($3_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $25_1) + Math_fround($21_1 * $26_1)) + Math_fround($19_1 * $27_1));
  HEAPF32[($3_1 + 124 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $28_1) + Math_fround($21_1 * $29_1)) + Math_fround($19_1 * $30_1));
  HEAPF32[($3_1 + 120 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $12_1) + Math_fround($21_1 * $23_1)) + Math_fround($19_1 * $17_1));
  HEAPF32[($3_1 + 168 | 0) >> 2] = Math_fround($18_1 + Math_fround(Math_fround(Math_fround($20_1 * $31_1) + Math_fround($21_1 * $32_1)) + Math_fround($19_1 * $33_1)));
  FUNCTION_TABLE[HEAP32[((HEAP32[$11_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($11_1, $3_1 + 184 | 0, $3_1 + 104 | 0, $3_1 + 88 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$9_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($9_1, $3_1 + 120 | 0, $3_1 + 72 | 0, $3_1 + 56 | 0);
  $14_1 = Math_fround(HEAPF32[((HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2]);
  $15_1 = Math_fround(Math_fround(HEAPF32[($3_1 + 104 | 0) >> 2]) - $14_1);
  HEAPF32[($3_1 + 104 | 0) >> 2] = $15_1;
  HEAPF32[($3_1 + 108 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 108 | 0) >> 2]) - $14_1);
  HEAPF32[($3_1 + 112 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($3_1 + 112 | 0) >> 2]) - $14_1);
  HEAPF32[($3_1 + 88 | 0) >> 2] = Math_fround($14_1 + Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2]));
  HEAPF32[($3_1 + 92 | 0) >> 2] = Math_fround($14_1 + Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2]));
  HEAPF32[($3_1 + 96 | 0) >> 2] = Math_fround($14_1 + Math_fround(HEAPF32[($3_1 + 96 | 0) >> 2]));
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[(0 + 2772 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$2
    }
    if (!(FUNCTION_TABLE[$1_1]($11_1, $9_1) | 0)) {
     break label$1
    }
    $15_1 = Math_fround(HEAPF32[($3_1 + 104 | 0) >> 2]);
   }
   label$3 : {
    if ($15_1 > Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2])) {
     break label$3
    }
    if (Math_fround(HEAPF32[($3_1 + 88 | 0) >> 2]) < Math_fround(HEAPF32[($3_1 + 72 | 0) >> 2])) {
     break label$3
    }
    $24_1 = 1;
   }
   $1_1 = 0;
   label$4 : {
    if (Math_fround(HEAPF32[($3_1 + 112 | 0) >> 2]) > Math_fround(HEAPF32[($3_1 + 64 | 0) >> 2])) {
     break label$4
    }
    if (Math_fround(HEAPF32[($3_1 + 96 | 0) >> 2]) < Math_fround(HEAPF32[($3_1 + 80 | 0) >> 2])) {
     break label$4
    }
    $1_1 = $24_1;
   }
   if (Math_fround(HEAPF32[($3_1 + 108 | 0) >> 2]) > Math_fround(HEAPF32[($3_1 + 60 | 0) >> 2])) {
    break label$1
   }
   if (Math_fround(HEAPF32[($3_1 + 92 | 0) >> 2]) < Math_fround(HEAPF32[($3_1 + 76 | 0) >> 2])) {
    break label$1
   }
   if ($1_1 ^ 1 | 0) {
    break label$1
   }
   HEAP32[($3_1 + 48 | 0) >> 2] = -1;
   HEAP32[($3_1 + 36 | 0) >> 2] = $11_1;
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   HEAP32[($3_1 + 32 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[($3_1 + 44 | 0) >> 2] = $3_1 + 184 | 0;
   HEAP32[($3_1 + 52 | 0) >> 2] = $10_1;
   HEAP32[($3_1 + 24 | 0) >> 2] = -1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $9_1;
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[($3_1 + 20 | 0) >> 2] = $3_1 + 120 | 0;
   HEAP32[($3_1 + 28 | 0) >> 2] = $7_1;
   $1_1 = $652(HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0, $10_1 | 0, $7_1 | 0) | 0;
   label$5 : {
    label$6 : {
     if (Math_fround(HEAPF32[((HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 32 | 0) >> 2]) > Math_fround(0.0) ^ 1 | 0) {
      break label$6
     }
     $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $3_1 + 32 | 0, $3_1 + 8 | 0, 0, 2) | 0;
     break label$5;
    }
    label$7 : {
     if (!$1_1) {
      break label$7
     }
     $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     break label$5;
    }
    $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $3_1 + 32 | 0, $3_1 + 8 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0, 1) | 0;
    $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    (wasm2js_i32$0 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($1_1, $10_1, $7_1) | 0, wasm2js_i32$1 = $2_1), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
   }
   $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   HEAP32[($1_1 + 12 | 0) >> 2] = $3_1 + 8 | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = $3_1 + 32 | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, -1, $10_1);
   $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($1_1, -1, $7_1);
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($2_1, $3_1 + 32 | 0, $3_1 + 8 | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
   $755_1 = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $755_1;
   HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  }
  $617($4_1 | 0) | 0;
  global$0 = $3_1 + 256 | 0;
 }
 
 function $665($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $666($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $69($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 17112;
  return $0_1 | 0;
 }
 
 function $667($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
 }
 
 function $668($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return Math_fround(Math_fround(1.0));
 }
 
 function $669($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $670($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $671($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $72($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 8 | 0) >> 0] = 0;
  HEAP32[$0_1 >> 2] = 17172;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($1_1, HEAP32[($3_1 + 8 | 0) >> 2] | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP8[($0_1 + 8 | 0) >> 0] = 1;
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  }
  return $0_1 | 0;
 }
 
 function $672($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 17172;
  label$1 : {
   if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $1_1);
  }
  $73($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $673($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 17172;
  label$1 : {
   if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $1_1);
  }
  $73($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $674($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $16_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $12_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $8_1 = Math_fround(0), i64toi32_i32$0 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0);
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  label$1 : {
   $0_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$0_1) {
    break label$1
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $0_1;
   $6_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   $7_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   $8_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($7_1 + 48 | 0) >> 2]));
   $9_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2]) - Math_fround(HEAPF32[($7_1 + 52 | 0) >> 2]));
   $10_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]) - Math_fround(HEAPF32[($7_1 + 56 | 0) >> 2]));
   $11_1 = Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($9_1 * $9_1)) + Math_fround($10_1 * $10_1));
   $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $12_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2]);
   $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $14_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
   label$2 : {
    $7_1 = HEAP32[($0_1 + 780 | 0) >> 2] | 0;
    if (($7_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = $0_1 + 4 | 0;
    $6_1 = 0;
    label$3 : while (1) {
     $214($0_1 | 0, $1_1 | 0);
     $1_1 = $1_1 + 192 | 0;
     $6_1 = $6_1 + 1 | 0;
     $7_1 = HEAP32[($0_1 + 780 | 0) >> 2] | 0;
     if (($6_1 | 0) < ($7_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $16_1 = Math_fround(Math_sqrt($11_1));
   $11_1 = Math_fround($13_1 * $12_1);
   $12_1 = Math_fround($15_1 * $14_1);
   label$4 : {
    if (!$7_1) {
     break label$4
    }
    $1_1 = HEAP32[(0 + 1696 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$4
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = $0_1;
    FUNCTION_TABLE[$1_1]($5_1 + 16 | 0);
   }
   HEAP32[($0_1 + 780 | 0) >> 2] = 0;
   $12_1 = Math_fround($12_1 + $11_1);
   if ($16_1 > Math_fround($12_1 + Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]))) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   HEAP32[($5_1 + 24 | 0) >> 2] = 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[($5_1 + 16 | 0) >> 2] = 1065353216;
   HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   $12_1 = Math_fround($16_1 - $12_1);
   label$5 : {
    label$6 : {
     if (!($16_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0)) {
      break label$6
     }
     $16_1 = Math_fround(1.0);
     $10_1 = Math_fround(0.0);
     $9_1 = Math_fround(0.0);
     break label$5;
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = 0;
    $16_1 = Math_fround(Math_fround(1.0) / $16_1);
    $10_1 = Math_fround($10_1 * $16_1);
    HEAPF32[($5_1 + 24 | 0) >> 2] = $10_1;
    $9_1 = Math_fround($9_1 * $16_1);
    HEAPF32[($5_1 + 20 | 0) >> 2] = $9_1;
    $16_1 = Math_fround($8_1 * $16_1);
    HEAPF32[($5_1 + 16 | 0) >> 2] = $16_1;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   $1_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   HEAPF32[$5_1 >> 2] = Math_fround(Math_fround($11_1 * $16_1) + Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]));
   HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(Math_fround($11_1 * $10_1) + Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]));
   HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(Math_fround($11_1 * $9_1) + Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]));
   FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($4_1, $5_1 + 16 | 0, $5_1, $12_1);
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $675($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return Math_fround(Math_fround(1.0));
 }
 
 function $676($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($3_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $4_1 = $3_1 ? $3_1 << 1 | 0 : 1;
    if (($3_1 | 0) >= ($4_1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($4_1) {
       break label$4
      }
      $5_1 = 0;
      break label$3;
     }
     $5_1 = $79($4_1 << 2 | 0 | 0, 16 | 0) | 0;
     $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    }
    label$5 : {
     if (($3_1 | 0) < (1 | 0)) {
      break label$5
     }
     $2_1 = 0;
     $6_1 = $3_1;
     label$6 : while (1) {
      HEAP32[($5_1 + $2_1 | 0) >> 2] = HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
      $2_1 = $2_1 + 4 | 0;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$7
     }
     label$8 : {
      if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
       break label$8
      }
      $80($2_1 | 0);
      $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    }
    HEAP32[($1_1 + 12 | 0) >> 2] = $5_1;
    HEAP8[($1_1 + 16 | 0) >> 0] = 1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
   HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
 }
 
 function $677($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  HEAPF32[($0_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 17248;
  return $0_1 | 0;
 }
 
 function $678($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $13_1 = Math_fround(0), $17_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $21_1 = Math_fround(0), $23_1 = Math_fround(0), $16_1 = Math_fround(0), $20_1 = Math_fround(0), $22_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $26_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $9_1 = Math_fround(0), $12_1 = Math_fround(0), $27_1 = Math_fround(0), $366_1 = Math_fround(0);
  $5_1 = global$0 - 144 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 108 | 0) >> 2] = 0;
  $6_1 = Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 96 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 120 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 112 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($1_1 + 116 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($1_1 + 84 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 100 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($1_1 + 88 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($1_1 + 104 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $25_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $26_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $27_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $28_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $29_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAP32[($5_1 + 100 | 0) >> 2] = 0;
  HEAP32[($5_1 + 84 | 0) >> 2] = 0;
  HEAP32[($5_1 + 68 | 0) >> 2] = 0;
  HEAPF32[(($5_1 + 40 | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($29_1 * $18_1) + Math_fround($20_1 * $19_1)) + Math_fround($22_1 * $21_1));
  HEAPF32[(($5_1 + 40 | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($28_1 * $18_1) + Math_fround($16_1 * $19_1)) + Math_fround($17_1 * $21_1));
  HEAPF32[(($5_1 + 40 | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($29_1 * $13_1) + Math_fround($20_1 * $14_1)) + Math_fround($22_1 * $15_1));
  HEAPF32[(($5_1 + 40 | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($28_1 * $13_1) + Math_fround($16_1 * $14_1)) + Math_fround($17_1 * $15_1));
  $10_1 = Math_fround($27_1 - $10_1);
  $11_1 = Math_fround($12_1 - $11_1);
  $8_1 = Math_fround($9_1 - $8_1);
  HEAPF32[(($5_1 + 40 | 0) + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $10_1) + Math_fround($19_1 * $11_1)) + Math_fround($21_1 * $8_1));
  HEAPF32[(($5_1 + 40 | 0) + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround($10_1 * $13_1) + Math_fround($11_1 * $14_1)) + Math_fround($8_1 * $15_1));
  HEAP32[($5_1 + 52 | 0) >> 2] = 0;
  HEAPF32[($5_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $18_1) + Math_fround($26_1 * $19_1)) + Math_fround($24_1 * $21_1));
  HEAPF32[($5_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $13_1) + Math_fround($26_1 * $14_1)) + Math_fround($24_1 * $15_1));
  HEAPF32[($5_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround($23_1 * $29_1) + Math_fround($6_1 * $20_1)) + Math_fround($7_1 * $22_1));
  HEAPF32[($5_1 + 44 | 0) >> 2] = Math_fround(Math_fround(Math_fround($23_1 * $28_1) + Math_fround($6_1 * $16_1)) + Math_fround($7_1 * $17_1));
  HEAPF32[($5_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($23_1 * $25_1) + Math_fround($6_1 * $26_1)) + Math_fround($7_1 * $24_1));
  HEAPF32[($5_1 + 88 | 0) >> 2] = Math_fround(Math_fround(Math_fround($10_1 * $23_1) + Math_fround($11_1 * $6_1)) + Math_fround($8_1 * $7_1));
  label$1 : {
   if (!($679($0_1 | 0, $5_1 + 88 | 0 | 0, $5_1 + 128 | 0 | 0, $5_1 + 112 | 0 | 0, $5_1 + 108 | 0 | 0, $5_1 | 0, Math_fround(Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]))) | 0)) {
    break label$1
   }
   label$2 : {
    if (!$4_1) {
     break label$2
    }
    $14_1 = Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2]);
    $15_1 = Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]);
    $18_1 = Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]);
    $19_1 = Math_fround(HEAPF32[($1_1 + 88 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]);
    $23_1 = Math_fround(HEAPF32[($1_1 + 84 | 0) >> 2]);
    $16_1 = Math_fround(HEAPF32[($1_1 + 104 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[($1_1 + 96 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($1_1 + 100 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($5_1 + 120 | 0) >> 2]);
    $7_1 = Math_fround(HEAPF32[($5_1 + 112 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($5_1 + 116 | 0) >> 2]);
    HEAP32[($5_1 + 36 | 0) >> 2] = 0;
    $22_1 = Math_fround(Math_fround(Math_fround($7_1 * $17_1) + Math_fround($13_1 * $20_1)) + Math_fround($6_1 * $16_1));
    HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround(-$22_1);
    $24_1 = Math_fround(Math_fround(Math_fround($7_1 * $21_1) + Math_fround($13_1 * $23_1)) + Math_fround($6_1 * $19_1));
    HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround(-$24_1);
    $25_1 = Math_fround(Math_fround(Math_fround($15_1 * $7_1) + Math_fround($18_1 * $13_1)) + Math_fround($14_1 * $6_1));
    HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(-$25_1);
    HEAP32[($5_1 + 20 | 0) >> 2] = 0;
    $7_1 = Math_fround(HEAPF32[($5_1 + 128 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($5_1 + 132 | 0) >> 2]);
    $366_1 = Math_fround(Math_fround($17_1 * $7_1) + Math_fround($20_1 * $13_1));
    $17_1 = Math_fround(HEAPF32[($5_1 + 136 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($5_1 + 108 | 0) >> 2]);
    HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround($366_1 + Math_fround($16_1 * $17_1)) + Math_fround(HEAPF32[($1_1 + 120 | 0) >> 2])) + Math_fround($22_1 * $6_1));
    HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $21_1) + Math_fround($13_1 * $23_1)) + Math_fround($17_1 * $19_1)) + Math_fround(HEAPF32[($1_1 + 116 | 0) >> 2])) + Math_fround($24_1 * $6_1));
    HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $15_1) + Math_fround($13_1 * $18_1)) + Math_fround($17_1 * $14_1)) + Math_fround(HEAPF32[($1_1 + 112 | 0) >> 2])) + Math_fround($25_1 * $6_1));
    FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $5_1 + 24 | 0, $5_1 + 8 | 0, $6_1);
    break label$1;
   }
   HEAP32[($5_1 + 36 | 0) >> 2] = 0;
   $6_1 = Math_fround(HEAPF32[($5_1 + 112 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[($1_1 + 96 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[($5_1 + 116 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($1_1 + 100 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($5_1 + 120 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[($1_1 + 104 | 0) >> 2]);
   HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround($6_1 * $14_1) + Math_fround($7_1 * $15_1)) + Math_fround($13_1 * $18_1));
   $19_1 = Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($1_1 + 84 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($1_1 + 88 | 0) >> 2]);
   HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround($6_1 * $19_1) + Math_fround($7_1 * $21_1)) + Math_fround($13_1 * $23_1));
   $16_1 = Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]);
   $17_1 = Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2]);
   HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($6_1 * $16_1) + Math_fround($7_1 * $17_1)) + Math_fround($13_1 * $20_1));
   HEAP32[($5_1 + 20 | 0) >> 2] = 0;
   $6_1 = Math_fround(HEAPF32[($5_1 + 128 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[($5_1 + 132 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($5_1 + 136 | 0) >> 2]);
   HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($14_1 * $6_1) + Math_fround($15_1 * $7_1)) + Math_fround($18_1 * $13_1)) + Math_fround(HEAPF32[($1_1 + 120 | 0) >> 2]));
   HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $19_1) + Math_fround($7_1 * $21_1)) + Math_fround($13_1 * $23_1)) + Math_fround(HEAPF32[($1_1 + 116 | 0) >> 2]));
   HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $16_1) + Math_fround($7_1 * $17_1)) + Math_fround($13_1 * $20_1)) + Math_fround(HEAPF32[($1_1 + 112 | 0) >> 2]));
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $5_1 + 24 | 0, $5_1 + 8 | 0, Math_fround(HEAPF32[($5_1 + 108 | 0) >> 2]));
  }
  global$0 = $5_1 + 144 | 0;
 }
 
 function $679($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  var $10_1 = Math_fround(0), $17_1 = Math_fround(0), $7_1 = 0, $13_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = Math_fround(0), $11_1 = Math_fround(0), $9_1 = 0, $16_1 = Math_fround(0), $15_1 = Math_fround(0), $8_1 = 0, $18_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), i64toi32_i32$0 = 0, $19_1 = 0, $20_1 = Math_fround(0), i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $79_1 = Math_fround(0), $140_1 = Math_fround(0), $172_1 = 0, $175_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  label$1 : {
   $9_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $10_1 = Math_fround(HEAPF32[($9_1 + 60 | 0) >> 2]);
   $11_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 76 | 0) >> 2]) - $10_1);
   $12_1 = Math_fround(HEAPF32[($9_1 + 64 | 0) >> 2]);
   $13_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 96 | 0) >> 2]) - $12_1);
   $14_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 80 | 0) >> 2]) - $12_1);
   $15_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 92 | 0) >> 2]) - $10_1);
   $16_1 = Math_fround(Math_fround($11_1 * $13_1) - Math_fround($14_1 * $15_1));
   $17_1 = Math_fround(HEAPF32[($9_1 + 68 | 0) >> 2]);
   $18_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 100 | 0) >> 2]) - $17_1);
   $79_1 = Math_fround($14_1 * $18_1);
   $14_1 = Math_fround(Math_fround(HEAPF32[($9_1 + 84 | 0) >> 2]) - $17_1);
   $13_1 = Math_fround($79_1 - Math_fround($14_1 * $13_1));
   $11_1 = Math_fround(Math_fround($14_1 * $15_1) - Math_fround($11_1 * $18_1));
   $14_1 = Math_fround(Math_fround($16_1 * $16_1) + Math_fround(Math_fround($13_1 * $13_1) + Math_fround($11_1 * $11_1)));
   if ($14_1 >= Math_fround(1.4210854715202004e-14) ^ 1 | 0) {
    break label$1
   }
   $19_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $20_1 = Math_fround(Math_fround(HEAPF32[($19_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($19_1 + 16 | 0) >> 2]));
   $15_1 = Math_fround($20_1 + $6_1);
   label$2 : {
    $14_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($14_1)));
    $21_1 = Math_fround($13_1 * $14_1);
    $13_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $22_1 = Math_fround($11_1 * $14_1);
    $11_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    $140_1 = Math_fround(Math_fround($21_1 * Math_fround($13_1 - $10_1)) + Math_fround($22_1 * Math_fround($11_1 - $12_1)));
    $23_1 = Math_fround($16_1 * $14_1);
    $12_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $10_1 = Math_fround($140_1 + Math_fround($23_1 * Math_fround($12_1 - $17_1)));
    if ($10_1 < Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    $23_1 = Math_fround(-$23_1);
    $22_1 = Math_fround(-$22_1);
    $21_1 = Math_fround(-$21_1);
    $10_1 = Math_fround(-$10_1);
   }
   if ($10_1 < $15_1 ^ 1 | 0) {
    break label$1
   }
   i64toi32_i32$2 = $1_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $172_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($7_1 + 16 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $172_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $175_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 16 | 0) >> 2] = $175_1;
   HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = 0;
   HEAP32[($7_1 + 12 | 0) >> 2] = 0;
   HEAPF32[($7_1 + 8 | 0) >> 2] = $23_1;
   HEAPF32[($7_1 + 4 | 0) >> 2] = $22_1;
   HEAPF32[$7_1 >> 2] = $21_1;
   label$3 : {
    label$4 : {
     if (!($680($7_1 | 0, $9_1 + 60 | 0 | 0, $7_1 | 0, $7_1 + 16 | 0 | 0) | 0)) {
      break label$4
     }
     $24_1 = Math_fround($12_1 - Math_fround($10_1 * $23_1));
     $25_1 = Math_fround($11_1 - Math_fround($10_1 * $22_1));
     $26_1 = Math_fround($13_1 - Math_fround($10_1 * $21_1));
     $27_1 = Math_fround($15_1 * $15_1);
     break label$3;
    }
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$9_1 >> 2] | 0) + 100 | 0) >> 2] | 0]($9_1) | 0 | 0) < (1 | 0)) {
     break label$1
    }
    $27_1 = Math_fround($15_1 * $15_1);
    $19_1 = 0;
    $9_1 = 0;
    label$5 : while (1) {
     $8_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 104 | 0) >> 2] | 0]($8_1, $9_1, $7_1 + 16 | 0, $7_1);
     $17_1 = Math_fround(0.0);
     label$6 : {
      $15_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
      $10_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) - $15_1);
      $13_1 = Math_fround(Math_fround(HEAPF32[$7_1 >> 2]) - $15_1);
      $18_1 = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
      $12_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) - $18_1);
      $11_1 = Math_fround(Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]) - $18_1);
      $6_1 = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
      $16_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) - $6_1);
      $14_1 = Math_fround(Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]) - $6_1);
      $28_1 = Math_fround(Math_fround(Math_fround($10_1 * $13_1) + Math_fround($12_1 * $11_1)) + Math_fround($16_1 * $14_1));
      if ($28_1 > Math_fround(0.0) ^ 1 | 0) {
       break label$6
      }
      label$7 : {
       $17_1 = Math_fround(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($11_1 * $11_1)) + Math_fround($14_1 * $14_1));
       if ($28_1 < $17_1 ^ 1 | 0) {
        break label$7
       }
       $17_1 = Math_fround($28_1 / $17_1);
       $16_1 = Math_fround($16_1 - Math_fround($14_1 * $17_1));
       $12_1 = Math_fround($12_1 - Math_fround($11_1 * $17_1));
       $10_1 = Math_fround($10_1 - Math_fround($13_1 * $17_1));
       break label$6;
      }
      $16_1 = Math_fround($16_1 - $14_1);
      $12_1 = Math_fround($12_1 - $11_1);
      $10_1 = Math_fround($10_1 - $13_1);
      $17_1 = Math_fround(1.0);
     }
     label$8 : {
      if (Math_fround(Math_fround(Math_fround($10_1 * $10_1) + Math_fround($12_1 * $12_1)) + Math_fround($16_1 * $16_1)) < $27_1 ^ 1 | 0) {
       break label$8
      }
      $26_1 = Math_fround($15_1 + Math_fround($13_1 * $17_1));
      $25_1 = Math_fround($18_1 + Math_fround($11_1 * $17_1));
      $24_1 = Math_fround($6_1 + Math_fround($14_1 * $17_1));
      $19_1 = 1;
     }
     $9_1 = $9_1 + 1 | 0;
     $8_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (($9_1 | 0) < (FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 100 | 0) >> 2] | 0]($8_1) | 0 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $8_1 = 0;
    if (!($19_1 & 1 | 0)) {
     break label$1
    }
    $12_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   }
   $8_1 = 0;
   $10_1 = Math_fround($13_1 - $26_1);
   $16_1 = Math_fround($11_1 - $25_1);
   $12_1 = Math_fround($12_1 - $24_1);
   $17_1 = Math_fround(Math_fround(Math_fround($10_1 * $10_1) + Math_fround($16_1 * $16_1)) + Math_fround($12_1 * $12_1));
   if ($17_1 < $27_1 ^ 1 | 0) {
    break label$1
   }
   label$9 : {
    label$10 : {
     if ($17_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
      break label$10
     }
     $13_1 = Math_fround(Math_sqrt($17_1));
     $17_1 = Math_fround(Math_fround(1.0) / $13_1);
     HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($12_1 * $17_1);
     HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($16_1 * $17_1);
     HEAPF32[$3_1 >> 2] = Math_fround($10_1 * $17_1);
     $20_1 = Math_fround($20_1 - $13_1);
     break label$9;
    }
    HEAPF32[($3_1 + 8 | 0) >> 2] = $23_1;
    HEAPF32[($3_1 + 4 | 0) >> 2] = $22_1;
    HEAPF32[$3_1 >> 2] = $21_1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = 0;
   HEAPF32[($2_1 + 8 | 0) >> 2] = $24_1;
   HEAPF32[($2_1 + 4 | 0) >> 2] = $25_1;
   HEAPF32[$2_1 >> 2] = $26_1;
   HEAPF32[$4_1 >> 2] = Math_fround(-$20_1);
   $8_1 = 1;
  }
  global$0 = $7_1 + 32 | 0;
  return $8_1 | 0;
 }
 
 function $680($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $7_1 = Math_fround(0), $5_1 = Math_fround(0), $9_1 = Math_fround(0), $4_1 = Math_fround(0), $6_1 = Math_fround(0), $8_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $10_1 = Math_fround(0), $14_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $55_1 = Math_fround(0), $65_1 = Math_fround(0), $144_1 = Math_fround(0), $161_1 = Math_fround(0);
  $4_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $8_1 = Math_fround($6_1 - $7_1);
  $9_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $12_1 = Math_fround($10_1 - $11_1);
  $13_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $55_1 = Math_fround(Math_fround($4_1 - $5_1) * Math_fround(Math_fround($8_1 * $9_1) - Math_fround($12_1 * $13_1)));
  $14_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $15_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $65_1 = Math_fround($12_1 * $15_1);
  $12_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $16_1 = Math_fround($12_1 - $5_1);
  $17_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
  $18_1 = Math_fround($55_1 + Math_fround(Math_fround(Math_fround($14_1 - $7_1) * Math_fround($65_1 - Math_fround($16_1 * $9_1))) + Math_fround(Math_fround($17_1 - $11_1) * Math_fround(Math_fround($16_1 * $13_1) - Math_fround($8_1 * $15_1)))));
  $8_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $19_1 = Math_fround($7_1 - $16_1);
  $7_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $11_1 = Math_fround($11_1 - $7_1);
  $5_1 = Math_fround($5_1 - $8_1);
  $5_1 = Math_fround(Math_fround(Math_fround($4_1 - $8_1) * Math_fround(Math_fround($19_1 * $9_1) - Math_fround($11_1 * $13_1))) + Math_fround(Math_fround(Math_fround($14_1 - $16_1) * Math_fround(Math_fround($11_1 * $15_1) - Math_fround($5_1 * $9_1))) + Math_fround(Math_fround($17_1 - $7_1) * Math_fround(Math_fround($5_1 * $13_1) - Math_fround($19_1 * $15_1)))));
  $1_1 = 1;
  label$1 : {
   label$2 : {
    $144_1 = Math_fround($4_1 - $12_1);
    $4_1 = Math_fround($16_1 - $6_1);
    $7_1 = Math_fround($7_1 - $10_1);
    $161_1 = Math_fround($14_1 - $6_1);
    $6_1 = Math_fround($8_1 - $12_1);
    $9_1 = Math_fround(Math_fround($144_1 * Math_fround(Math_fround($4_1 * $9_1) - Math_fround($7_1 * $13_1))) + Math_fround(Math_fround($161_1 * Math_fround(Math_fround($7_1 * $15_1) - Math_fround($6_1 * $9_1))) + Math_fround(Math_fround($17_1 - $10_1) * Math_fround(Math_fround($6_1 * $13_1) - Math_fround($4_1 * $15_1)))));
    if ($9_1 > Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    if ($5_1 > Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    if ($18_1 > Math_fround(0.0)) {
     break label$1
    }
   }
   $1_1 = $9_1 <= Math_fround(0.0) & ($5_1 <= Math_fround(0.0) & $18_1 <= Math_fround(0.0) | 0) | 0;
  }
  return $1_1 | 0;
 }
 
 function $681($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $682($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $72($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  HEAP8[($0_1 + 16 | 0) >> 0] = $5_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 8 | 0) >> 0] = 0;
  HEAP32[$0_1 >> 2] = 17308;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($1_1, HEAP32[($3_1 + 8 | 0) >> 2] | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP8[($0_1 + 8 | 0) >> 0] = 1;
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  }
  return $0_1 | 0;
 }
 
 function $683($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 17308;
  label$1 : {
   if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $1_1);
  }
  $73($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $684($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 17308;
  label$1 : {
   if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $1_1);
  }
  $73($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $685($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $10$hi = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $9$hi = 0, $56_1 = 0, $68_1 = 0, $11_1 = 0, $11$hi = 0, $76_1 = 0, $85_1 = 0, $92_1 = 0, $95_1 = 0, $100_1 = 0, $104_1 = 0, $109_1 = 0, $113_1 = 0, $117_1 = 0, $122_1 = 0;
  $5_1 = global$0 - 160 | 0;
  global$0 = $5_1;
  label$1 : {
   $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$6_1) {
    break label$1
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $6_1;
   $7_1 = HEAPU8[($0_1 + 16 | 0) >> 0] | 0;
   $8_1 = $7_1 ? $2_1 : $1_1;
   $2_1 = $7_1 ? $1_1 : $2_1;
   $6_1 = $677($5_1 + 144 | 0 | 0, HEAP32[($8_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(Math_fround($217($6_1 | 0)) + Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2])))) | 0;
   HEAP32[($5_1 + 136 | 0) >> 2] = 1566444395;
   $1_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $9_1 = i64toi32_i32$0;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $56_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 8 | 0) + 24 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $56_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = ($5_1 + 8 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $10_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $68_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 8 | 0) + 40 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $68_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $76_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 8 | 0) + 56 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $76_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$0 = $5_1;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $9_1;
   HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $10_1;
   HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $11$hi;
   HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = $11_1;
   HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $85_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1;
   HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = $85_1;
   HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = i64toi32_i32$0;
   $1_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $1_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $92_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1 + 80 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $92_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $95_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1;
   HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = $95_1;
   HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $100_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1 + 96 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $100_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $104_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1 + 88 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $104_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $109_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1 + 112 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $109_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   $113_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1 + 104 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $113_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $117_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1 + 120 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $117_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $122_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1 + 128 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $122_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $678($6_1 | 0, $5_1 + 8 | 0 | 0, $4_1 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, HEAPU8[($0_1 + 16 | 0) >> 0] | 0 | 0);
   if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   if (!(HEAP32[($1_1 + 780 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAP32[($1_1 + 772 | 0) >> 2] | 0;
    $0_1 = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    if (($2_1 | 0) == ($0_1 | 0)) {
     break label$2
    }
    $219($1_1 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0, $0_1 + 4 | 0 | 0);
    break label$1;
   }
   $219($1_1 | 0, $2_1 + 4 | 0 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  }
  global$0 = $5_1 + 160 | 0;
 }
 
 function $686($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return Math_fround(Math_fround(1.0));
 }
 
 function $687($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($3_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $4_1 = $3_1 ? $3_1 << 1 | 0 : 1;
    if (($3_1 | 0) >= ($4_1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($4_1) {
       break label$4
      }
      $5_1 = 0;
      break label$3;
     }
     $5_1 = $79($4_1 << 2 | 0 | 0, 16 | 0) | 0;
     $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    }
    label$5 : {
     if (($3_1 | 0) < (1 | 0)) {
      break label$5
     }
     $2_1 = 0;
     $6_1 = $3_1;
     label$6 : while (1) {
      HEAP32[($5_1 + $2_1 | 0) >> 2] = HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
      $2_1 = $2_1 + 4 | 0;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$7
     }
     label$8 : {
      if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
       break label$8
      }
      $80($2_1 | 0);
      $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    }
    HEAP32[($1_1 + 12 | 0) >> 2] = $5_1;
    HEAP8[($1_1 + 16 | 0) >> 0] = 1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
   HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
 }
 
 function $688($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0, $5_1 = Math_fround(0), $3_1 = 0, $4_1 = Math_fround(0), $2_1 = 0, $6_1 = Math_fround(0);
  $1_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(0));
  $2_1 = $1_1 >>> 31 | 0;
  label$1 : {
   label$2 : {
    $1_1 = $1_1 & 2147483647 | 0;
    if ($1_1 >>> 0 < 1283457024 >>> 0) {
     break label$2
    }
    if ($0_1 != $0_1) {
     break label$1
    }
    return Math_fround($2_1 ? Math_fround(-1.570796251296997) : Math_fround(1.570796251296997));
   }
   label$3 : {
    label$4 : {
     if ($1_1 >>> 0 > 1054867455 >>> 0) {
      break label$4
     }
     $3_1 = -1;
     if ($1_1 >>> 0 >= 964689920 >>> 0) {
      break label$3
     }
     break label$1;
    }
    $0_1 = Math_fround($491(Math_fround($0_1)));
    label$5 : {
     if ($1_1 >>> 0 > 1066926079 >>> 0) {
      break label$5
     }
     label$6 : {
      if ($1_1 >>> 0 > 1060110335 >>> 0) {
       break label$6
      }
      $0_1 = Math_fround(Math_fround(Math_fround($0_1 + $0_1) + Math_fround(-1.0)) / Math_fround($0_1 + Math_fround(2.0)));
      $3_1 = 0;
      break label$3;
     }
     $0_1 = Math_fround(Math_fround($0_1 + Math_fround(-1.0)) / Math_fround($0_1 + Math_fround(1.0)));
     $3_1 = 1;
     break label$3;
    }
    label$7 : {
     if ($1_1 >>> 0 > 1075576831 >>> 0) {
      break label$7
     }
     $0_1 = Math_fround(Math_fround($0_1 + Math_fround(-1.5)) / Math_fround(Math_fround($0_1 * Math_fround(1.5)) + Math_fround(1.0)));
     $3_1 = 2;
     break label$3;
    }
    $0_1 = Math_fround(Math_fround(-1.0) / $0_1);
    $3_1 = 3;
   }
   $4_1 = Math_fround($0_1 * $0_1);
   $5_1 = Math_fround($4_1 * $4_1);
   $6_1 = Math_fround($5_1 * Math_fround(Math_fround($5_1 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
   $5_1 = Math_fround($4_1 * Math_fround(Math_fround($5_1 * Math_fround(Math_fround($5_1 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
   label$8 : {
    if (($3_1 | 0) > (-1 | 0)) {
     break label$8
    }
    return Math_fround(Math_fround($0_1 - Math_fround($0_1 * Math_fround($6_1 + $5_1))));
   }
   $1_1 = $3_1 << 2 | 0;
   $0_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 17392 | 0) >> 2]) - Math_fround(Math_fround(Math_fround($0_1 * Math_fround($6_1 + $5_1)) - Math_fround(HEAPF32[($1_1 + 17408 | 0) >> 2])) - $0_1));
   $0_1 = $2_1 ? Math_fround(-$0_1) : $0_1;
  }
  return Math_fround($0_1);
 }
 
 function $689($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $5_1 = 0, $3_1 = 0;
  label$1 : {
   if ($1_1 == $1_1 & $0_1 == $0_1 | 0) {
    break label$1
   }
   return Math_fround(Math_fround($0_1 + $1_1));
  }
  label$2 : {
   $2_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(0));
   if (($2_1 | 0) != (1065353216 | 0)) {
    break label$2
   }
   return Math_fround(Math_fround($688(Math_fround($0_1))));
  }
  $3_1 = ($2_1 >>> 30 | 0) & 2 | 0;
  $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(0));
  $5_1 = $4_1 >>> 31 | 0;
  $6_1 = $3_1 | $5_1 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      $4_1 = $4_1 & 2147483647 | 0;
      if ($4_1) {
       break label$6
      }
      label$7 : {
       switch ($6_1 | 0) {
       case 2:
        break label$5;
       case 3:
        break label$7;
       default:
        break label$4;
       };
      }
      return Math_fround(Math_fround(-3.1415927410125732));
     }
     label$8 : {
      $2_1 = $2_1 & 2147483647 | 0;
      if (($2_1 | 0) == (2139095040 | 0)) {
       break label$8
      }
      label$9 : {
       if ($2_1) {
        break label$9
       }
       return Math_fround($5_1 ? Math_fround(-1.5707963705062866) : Math_fround(1.5707963705062866));
      }
      label$10 : {
       label$11 : {
        if (($4_1 | 0) == (2139095040 | 0)) {
         break label$11
        }
        if (($2_1 + 218103808 | 0) >>> 0 >= $4_1 >>> 0) {
         break label$10
        }
       }
       return Math_fround($5_1 ? Math_fround(-1.5707963705062866) : Math_fround(1.5707963705062866));
      }
      label$12 : {
       label$13 : {
        if (($4_1 + 218103808 | 0) >>> 0 >= $2_1 >>> 0) {
         break label$13
        }
        $7_1 = Math_fround(0.0);
        if ($3_1) {
         break label$12
        }
       }
       $7_1 = Math_fround($688(Math_fround(Math_fround($491(Math_fround(Math_fround($0_1 / $1_1)))))));
      }
      label$14 : {
       if ($6_1 >>> 0 > 2 >>> 0) {
        break label$14
       }
       $0_1 = $7_1;
       label$15 : {
        switch ($6_1 | 0) {
        case 1:
         return Math_fround(Math_fround(-$7_1));
        case 2:
         break label$15;
        default:
         break label$4;
        };
       }
       return Math_fround(Math_fround(Math_fround(3.1415927410125732) - Math_fround($7_1 + Math_fround(8.742277657347586e-08))));
      }
      return Math_fround(Math_fround(Math_fround($7_1 + Math_fround(8.742277657347586e-08)) + Math_fround(-3.1415927410125732)));
     }
     if (($4_1 | 0) == (2139095040 | 0)) {
      break label$3
     }
     return Math_fround(Math_fround(HEAPF32[(($6_1 << 2 | 0) + 17440 | 0) >> 2]));
    }
    $0_1 = Math_fround(3.1415927410125732);
   }
   return Math_fround($0_1);
  }
  return Math_fround(Math_fround(HEAPF32[(($6_1 << 2 | 0) + 17424 | 0) >> 2]));
 }
 
 function $690($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 17464;
  return $0_1 | 0;
 }
 
 function $691($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $10_1 = Math_fround(0), $11_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $5_1 = 0, $12_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $17_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $18_1 = 0, $51_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         $6_1 = $0_1 + -1 | 0;
         if ($6_1 >>> 0 > 1 >>> 0) {
          break label$7
         }
         switch ($6_1 | 0) {
         case 1:
          break label$6;
         default:
          break label$3;
         };
        }
        if (($6_1 | 0) >= (1 | 0)) {
         break label$5
        }
        $7_1 = Math_fround(0.0);
        $8_1 = Math_fround(0.0);
        $9_1 = Math_fround(0.0);
        break label$4;
       }
       $10_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2])) * Math_fround(.5));
       $7_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) + Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])) * Math_fround(.5));
       break label$2;
      }
      $9_1 = Math_fround(0.0);
      $11_1 = $1_1;
      $8_1 = Math_fround(0.0);
      $7_1 = Math_fround(0.0);
      label$8 : while (1) {
       $10_1 = Math_fround(HEAPF32[($11_1 + 12 | 0) >> 2]);
       $12_1 = Math_fround(HEAPF32[($11_1 + 4 | 0) >> 2]);
       $51_1 = Math_fround($10_1 + $12_1);
       $13_1 = Math_fround(HEAPF32[$11_1 >> 2]);
       $11_1 = $11_1 + 8 | 0;
       $14_1 = Math_fround(HEAPF32[$11_1 >> 2]);
       $10_1 = Math_fround(Math_fround($13_1 * $10_1) - Math_fround($14_1 * $12_1));
       $9_1 = Math_fround($9_1 + Math_fround($51_1 * $10_1));
       $7_1 = Math_fround($7_1 + $10_1);
       $8_1 = Math_fround($8_1 + Math_fround(Math_fround($13_1 + $14_1) * $10_1));
       $6_1 = $6_1 + -1 | 0;
       if ($6_1) {
        continue label$8
       }
       break label$8;
      };
     }
     $12_1 = Math_fround(999999984306749440.0);
     label$9 : {
      $11_1 = ($0_1 << 3 | 0) + $1_1 | 0;
      $14_1 = Math_fround(HEAPF32[($11_1 + -8 | 0) >> 2]);
      $10_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
      $15_1 = Math_fround(HEAPF32[$1_1 >> 2]);
      $16_1 = Math_fround(HEAPF32[($11_1 + -4 | 0) >> 2]);
      $13_1 = Math_fround(Math_fround($14_1 * $10_1) - Math_fround($15_1 * $16_1));
      $7_1 = Math_fround($7_1 + $13_1);
      if (Math_fround(Math_abs($7_1)) > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
       break label$9
      }
      $12_1 = Math_fround(Math_fround(1.0) / Math_fround($7_1 * Math_fround(3.0)));
     }
     $6_1 = 0;
     if (($0_1 | 0) <= (0 | 0)) {
      break label$1
     }
     $10_1 = Math_fround(Math_fround($9_1 + Math_fround(Math_fround($10_1 + $16_1) * $13_1)) * $12_1);
     $7_1 = Math_fround(Math_fround($8_1 + Math_fround(Math_fround($14_1 + $15_1) * $13_1)) * $12_1);
     break label$2;
    }
    $10_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    $7_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   }
   $11_1 = $5_1 + 32 | 0;
   $6_1 = $0_1;
   label$10 : while (1) {
    (wasm2js_i32$0 = $11_1, wasm2js_f32$0 = Math_fround($689(Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) - $10_1)), Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) - $7_1))))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $1_1 = $1_1 + 8 | 0;
    $11_1 = $11_1 + 4 | 0;
    $6_1 = $6_1 + -1 | 0;
    if ($6_1) {
     continue label$10
    }
    break label$10;
   };
   $1_1 = $5_1;
   $11_1 = $0_1;
   label$11 : while (1) {
    $6_1 = 1;
    HEAP32[$1_1 >> 2] = 1;
    $1_1 = $1_1 + 4 | 0;
    $11_1 = $11_1 + -1 | 0;
    if ($11_1) {
     continue label$11
    }
    break label$11;
   };
  }
  HEAP32[$4_1 >> 2] = $3_1;
  $1_1 = $3_1 << 2 | 0;
  $11_1 = $5_1 + $1_1 | 0;
  HEAP32[$11_1 >> 2] = 0;
  label$12 : {
   if (($2_1 | 0) < (2 | 0)) {
    break label$12
   }
   $4_1 = $4_1 + 4 | 0;
   label$13 : {
    if ($6_1) {
     break label$13
    }
    $1_1 = $2_1 + -1 | 0;
    label$14 : while (1) {
     HEAP32[$4_1 >> 2] = $3_1;
     HEAP32[$11_1 >> 2] = 0;
     $4_1 = $4_1 + 4 | 0;
     $1_1 = $1_1 + -1 | 0;
     if ($1_1) {
      continue label$14
     }
     break label$12;
    };
   }
   $9_1 = Math_fround(Math_fround(6.2831854820251465) / Math_fround($2_1 | 0));
   $12_1 = Math_fround(HEAPF32[(($5_1 + 32 | 0) + $1_1 | 0) >> 2]);
   $17_1 = 1;
   label$15 : while (1) {
    HEAP32[$4_1 >> 2] = $3_1;
    $10_1 = Math_fround(Math_fround($9_1 * Math_fround($17_1 | 0)) + $12_1);
    $8_1 = $10_1 > Math_fround(3.1415927410125732) ? Math_fround($10_1 + Math_fround(-6.2831854820251465)) : $10_1;
    $7_1 = Math_fround(1.0e9);
    $11_1 = $5_1 + 32 | 0;
    $1_1 = $5_1;
    $18_1 = $3_1;
    $6_1 = 0;
    label$16 : while (1) {
     label$17 : {
      if (!(HEAP32[$1_1 >> 2] | 0)) {
       break label$17
      }
      $10_1 = Math_fround(Math_abs(Math_fround(Math_fround(HEAPF32[$11_1 >> 2]) - $8_1)));
      $10_1 = $10_1 > Math_fround(3.1415927410125732) ? Math_fround(Math_fround(6.2831854820251465) - $10_1) : $10_1;
      if ($10_1 < $7_1 ^ 1 | 0) {
       break label$17
      }
      HEAP32[$4_1 >> 2] = $6_1;
      $18_1 = $6_1;
      $7_1 = $10_1;
     }
     $1_1 = $1_1 + 4 | 0;
     $11_1 = $11_1 + 4 | 0;
     $6_1 = $6_1 + 1 | 0;
     if (($0_1 | 0) != ($6_1 | 0)) {
      continue label$16
     }
     break label$16;
    };
    HEAP32[($5_1 + ($18_1 << 2 | 0) | 0) >> 2] = 0;
    $4_1 = $4_1 + 4 | 0;
    $17_1 = $17_1 + 1 | 0;
    if (($17_1 | 0) != ($2_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  global$0 = $5_1 + 64 | 0;
 }
 
 function $692($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  var $13_1 = 0, $24_1 = Math_fround(0), $23_1 = Math_fround(0), $31_1 = Math_fround(0), $15_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $17_1 = Math_fround(0), $19_1 = Math_fround(0), $16_1 = 0, $20_1 = 0, $18_1 = Math_fround(0), $27_1 = Math_fround(0), $21_1 = Math_fround(0), $29_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = Math_fround(0), $34_1 = Math_fround(0), $14_1 = Math_fround(0), $30_1 = Math_fround(0), $22_1 = Math_fround(0), $42_1 = Math_fround(0), $28_1 = Math_fround(0), $40_1 = Math_fround(0), $56_1 = 0, $41_1 = Math_fround(0), $55_1 = 0, $45_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $65_1 = 0, $39_1 = Math_fround(0), $46_1 = Math_fround(0), $37_1 = Math_fround(0), $49_1 = Math_fround(0), $57_1 = Math_fround(0), $38_1 = Math_fround(0), $43_1 = Math_fround(0), $47_1 = Math_fround(0), $50_1 = Math_fround(0), $52_1 = Math_fround(0), $54_1 = Math_fround(0), $58_1 = Math_fround(0), $60_1 = Math_fround(0), $44_1 = Math_fround(0), $48_1 = Math_fround(0), $53_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $51_1 = Math_fround(0), $59_1 = Math_fround(0), $61_1 = Math_fround(0), $62_1 = 0, $64_1 = 0, $63_1 = 0, $66_1 = 0, $67_1 = 0, $226_1 = Math_fround(0), $1154_1 = 0, $1199_1 = Math_fround(0), $1228_1 = Math_fround(0), $1321 = Math_fround(0), $1349 = Math_fround(0), $1361 = Math_fround(0), $1381 = 0, $1468 = Math_fround(0), $1476 = Math_fround(0), $1861 = Math_fround(0), $2077 = 0, $2289 = 0;
  $13_1 = global$0 - 368 | 0;
  global$0 = $13_1;
  $14_1 = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) * Math_fround(.5));
  HEAPF32[($13_1 + 356 | 0) >> 2] = $14_1;
  $15_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $16_1 = $1_1 + 4 | 0;
  $17_1 = Math_fround(HEAPF32[$16_1 >> 2]);
  $18_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $20_1 = $1_1 + 8 | 0;
  $21_1 = Math_fround(HEAPF32[$20_1 >> 2]);
  $22_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $25_1 = Math_fround(HEAPF32[$0_1 >> 2]);
  $26_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $27_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
  $28_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
  $29_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
  $30_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
  $31_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $32_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) * Math_fround(.5));
  HEAPF32[($13_1 + 360 | 0) >> 2] = $32_1;
  $33_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) * Math_fround(.5));
  HEAPF32[($13_1 + 364 | 0) >> 2] = $33_1;
  $34_1 = Math_fround(Math_fround(HEAPF32[$5_1 >> 2]) * Math_fround(.5));
  HEAPF32[($13_1 + 344 | 0) >> 2] = $34_1;
  $35_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]) * Math_fround(.5));
  HEAPF32[($13_1 + 348 | 0) >> 2] = $35_1;
  $36_1 = Math_fround(Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]) * Math_fround(.5));
  HEAPF32[($13_1 + 352 | 0) >> 2] = $36_1;
  $5_1 = 0;
  label$1 : {
   $25_1 = Math_fround($26_1 - $25_1);
   $26_1 = Math_fround($28_1 - $27_1);
   $27_1 = Math_fround($30_1 - $29_1);
   $37_1 = Math_fround(Math_fround(Math_fround($31_1 * $25_1) + Math_fround($23_1 * $26_1)) + Math_fround($24_1 * $27_1));
   $28_1 = Math_fround(HEAPF32[$4_1 >> 2]);
   $29_1 = Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]);
   $30_1 = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
   $38_1 = Math_fround(Math_fround(Math_fround($31_1 * $28_1) + Math_fround($23_1 * $29_1)) + Math_fround($24_1 * $30_1));
   $39_1 = Math_fround(Math_abs($38_1));
   $40_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
   $41_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
   $42_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
   $43_1 = Math_fround(Math_fround(Math_fround($31_1 * $40_1) + Math_fround($23_1 * $41_1)) + Math_fround($24_1 * $42_1));
   $44_1 = Math_fround(Math_abs($43_1));
   $45_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
   $46_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
   $226_1 = Math_fround(Math_fround($31_1 * $45_1) + Math_fround($23_1 * $46_1));
   $23_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
   $47_1 = Math_fround($226_1 + Math_fround($24_1 * $23_1));
   $48_1 = Math_fround(Math_abs($47_1));
   $24_1 = Math_fround(Math_fround(Math_abs($37_1)) - Math_fround(Math_fround(Math_fround($14_1 + Math_fround($34_1 * $39_1)) + Math_fround($35_1 * $44_1)) + Math_fround($36_1 * $48_1)));
   if ($24_1 > Math_fround(0.0)) {
    break label$1
   }
   $49_1 = Math_fround(Math_fround(Math_fround($25_1 * $17_1) + Math_fround($26_1 * $18_1)) + Math_fround($27_1 * $15_1));
   $50_1 = Math_fround(Math_fround(Math_fround($17_1 * $45_1) + Math_fround($18_1 * $46_1)) + Math_fround($15_1 * $23_1));
   $51_1 = Math_fround(Math_abs($50_1));
   $52_1 = Math_fround(Math_fround(Math_fround($17_1 * $40_1) + Math_fround($18_1 * $41_1)) + Math_fround($15_1 * $42_1));
   $53_1 = Math_fround(Math_abs($52_1));
   $54_1 = Math_fround(Math_fround(Math_fround($17_1 * $28_1) + Math_fround($18_1 * $29_1)) + Math_fround($15_1 * $30_1));
   $17_1 = Math_fround(Math_abs($54_1));
   $15_1 = Math_fround(-3402823466385288598117041.0e14);
   $5_1 = 0;
   $55_1 = 0;
   $2_1 = 0;
   $56_1 = 0;
   label$2 : {
    if ($24_1 > Math_fround(-3402823466385288598117041.0e14) ^ 1 | 0) {
     break label$2
    }
    $55_1 = $37_1 < Math_fround(0.0);
    $15_1 = $24_1;
    $2_1 = 1;
    $56_1 = $1_1;
   }
   $24_1 = Math_fround(Math_fround(Math_abs($49_1)) - Math_fround(Math_fround(Math_fround($32_1 + Math_fround($34_1 * $17_1)) + Math_fround($35_1 * $53_1)) + Math_fround($36_1 * $51_1)));
   if ($24_1 > Math_fround(0.0)) {
    break label$1
   }
   $57_1 = Math_fround(Math_fround(Math_fround($25_1 * $21_1) + Math_fround($26_1 * $22_1)) + Math_fround($27_1 * $19_1));
   $58_1 = Math_fround(Math_fround(Math_fround($21_1 * $45_1) + Math_fround($22_1 * $46_1)) + Math_fround($19_1 * $23_1));
   $59_1 = Math_fround(Math_abs($58_1));
   $60_1 = Math_fround(Math_fround(Math_fround($21_1 * $40_1) + Math_fround($22_1 * $41_1)) + Math_fround($19_1 * $42_1));
   $61_1 = Math_fround(Math_abs($60_1));
   $19_1 = Math_fround(Math_fround(Math_fround($21_1 * $28_1) + Math_fround($22_1 * $29_1)) + Math_fround($19_1 * $30_1));
   $18_1 = Math_fround(Math_abs($19_1));
   label$3 : {
    if ($24_1 > $15_1 ^ 1 | 0) {
     break label$3
    }
    $55_1 = $49_1 < Math_fround(0.0);
    $2_1 = 2;
    $15_1 = $24_1;
    $56_1 = $16_1;
   }
   $24_1 = Math_fround(Math_fround(Math_abs($57_1)) - Math_fround(Math_fround(Math_fround($33_1 + Math_fround($34_1 * $18_1)) + Math_fround($35_1 * $61_1)) + Math_fround($36_1 * $59_1)));
   if ($24_1 > Math_fround(0.0)) {
    break label$1
   }
   label$4 : {
    if ($24_1 > $15_1 ^ 1 | 0) {
     break label$4
    }
    $55_1 = $57_1 < Math_fround(0.0);
    $2_1 = 3;
    $15_1 = $24_1;
    $56_1 = $20_1;
   }
   $21_1 = Math_fround(Math_fround(Math_fround($25_1 * $28_1) + Math_fround($26_1 * $29_1)) + Math_fround($27_1 * $30_1));
   $24_1 = Math_fround(Math_fround(Math_abs($21_1)) - Math_fround($34_1 + Math_fround(Math_fround($33_1 * $18_1) + Math_fround(Math_fround($14_1 * $39_1) + Math_fround($32_1 * $17_1)))));
   if ($24_1 > Math_fround(0.0)) {
    break label$1
   }
   label$5 : {
    if ($24_1 > $15_1 ^ 1 | 0) {
     break label$5
    }
    $55_1 = $21_1 < Math_fround(0.0);
    $2_1 = 4;
    $15_1 = $24_1;
    $56_1 = $4_1;
   }
   $21_1 = Math_fround(Math_fround(Math_fround($25_1 * $40_1) + Math_fround($26_1 * $41_1)) + Math_fround($27_1 * $42_1));
   $24_1 = Math_fround(Math_fround(Math_abs($21_1)) - Math_fround($35_1 + Math_fround(Math_fround($33_1 * $61_1) + Math_fround(Math_fround($14_1 * $44_1) + Math_fround($32_1 * $53_1)))));
   if ($24_1 > Math_fround(0.0)) {
    break label$1
   }
   label$6 : {
    if ($24_1 > $15_1 ^ 1 | 0) {
     break label$6
    }
    $56_1 = $4_1 + 4 | 0;
    $55_1 = $21_1 < Math_fround(0.0);
    $2_1 = 5;
    $15_1 = $24_1;
   }
   $24_1 = Math_fround(Math_fround(Math_fround($25_1 * $45_1) + Math_fround($26_1 * $46_1)) + Math_fround($27_1 * $23_1));
   $23_1 = Math_fround(Math_fround(Math_abs($24_1)) - Math_fround($36_1 + Math_fround(Math_fround($33_1 * $59_1) + Math_fround(Math_fround($14_1 * $48_1) + Math_fround($32_1 * $51_1)))));
   if ($23_1 > Math_fround(0.0)) {
    break label$1
   }
   label$7 : {
    if ($23_1 > $15_1 ^ 1 | 0) {
     break label$7
    }
    $56_1 = $4_1 + 8 | 0;
    $55_1 = $24_1 < Math_fround(0.0);
    $2_1 = 6;
    $15_1 = $23_1;
   }
   $25_1 = Math_fround(Math_fround($57_1 * $54_1) - Math_fround($49_1 * $19_1));
   $21_1 = Math_fround($44_1 + Math_fround(9.999999747378752e-06));
   $22_1 = Math_fround($18_1 + Math_fround(9.999999747378752e-06));
   $27_1 = Math_fround($17_1 + Math_fround(9.999999747378752e-06));
   $23_1 = Math_fround($48_1 + Math_fround(9.999999747378752e-06));
   $17_1 = Math_fround(Math_fround(Math_abs($25_1)) - Math_fround(Math_fround($36_1 * $21_1) + Math_fround(Math_fround(Math_fround($32_1 * $22_1) + Math_fround($33_1 * $27_1)) + Math_fround($35_1 * $23_1))));
   if ($17_1 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $28_1 = Math_fround($61_1 + Math_fround(9.999999747378752e-06));
   $18_1 = Math_fround($53_1 + Math_fround(9.999999747378752e-06));
   $24_1 = Math_fround($39_1 + Math_fround(9.999999747378752e-06));
   $29_1 = Math_fround(0.0);
   label$8 : {
    label$9 : {
     $46_1 = Math_fround($54_1 * $54_1);
     $41_1 = Math_fround(Math_fround($19_1 * $19_1) + Math_fround(0.0));
     $26_1 = Math_fround(Math_sqrt(Math_fround($46_1 + $41_1)));
     if (!($26_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0)) {
      break label$9
     }
     $30_1 = Math_fround(0.0);
     $40_1 = Math_fround(0.0);
     break label$8;
    }
    $30_1 = Math_fround(0.0);
    $40_1 = Math_fround(0.0);
    $17_1 = Math_fround($17_1 / $26_1);
    if (Math_fround($17_1 * Math_fround(1.0499999523162842)) > $15_1 ^ 1 | 0) {
     break label$8
    }
    $55_1 = $25_1 < Math_fround(0.0);
    $40_1 = Math_fround($54_1 / $26_1);
    $30_1 = Math_fround(Math_fround(-$19_1) / $26_1);
    $29_1 = Math_fround(Math_fround(0.0) / $26_1);
    $56_1 = 0;
    $2_1 = 7;
    $15_1 = $17_1;
   }
   $26_1 = Math_fround(Math_fround($57_1 * $52_1) - Math_fround($49_1 * $60_1));
   $25_1 = Math_fround(Math_fround(Math_abs($26_1)) - Math_fround(Math_fround($36_1 * $24_1) + Math_fround(Math_fround(Math_fround($32_1 * $28_1) + Math_fround($33_1 * $18_1)) + Math_fround($34_1 * $23_1))));
   if ($25_1 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $45_1 = Math_fround($59_1 + Math_fround(9.999999747378752e-06));
   $17_1 = Math_fround($51_1 + Math_fround(9.999999747378752e-06));
   label$10 : {
    $44_1 = Math_fround($52_1 * $52_1);
    $39_1 = Math_fround(Math_fround($60_1 * $60_1) + Math_fround(0.0));
    $42_1 = Math_fround(Math_sqrt(Math_fround($44_1 + $39_1)));
    if ($42_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
     break label$10
    }
    $25_1 = Math_fround($25_1 / $42_1);
    if (Math_fround($25_1 * Math_fround(1.0499999523162842)) > $15_1 ^ 1 | 0) {
     break label$10
    }
    $55_1 = $26_1 < Math_fround(0.0);
    $40_1 = Math_fround($52_1 / $42_1);
    $30_1 = Math_fround(Math_fround(-$60_1) / $42_1);
    $29_1 = Math_fround(Math_fround(0.0) / $42_1);
    $56_1 = 0;
    $2_1 = 8;
    $15_1 = $25_1;
   }
   $26_1 = Math_fround(Math_fround($57_1 * $50_1) - Math_fround($49_1 * $58_1));
   $25_1 = Math_fround(Math_fround(Math_abs($26_1)) - Math_fround(Math_fround($35_1 * $24_1) + Math_fround(Math_fround($34_1 * $21_1) + Math_fround(Math_fround($32_1 * $45_1) + Math_fround($33_1 * $17_1)))));
   if ($25_1 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   label$11 : {
    $48_1 = Math_fround($50_1 * $50_1);
    $53_1 = Math_fround(Math_fround($58_1 * $58_1) + Math_fround(0.0));
    $42_1 = Math_fround(Math_sqrt(Math_fround($48_1 + $53_1)));
    if ($42_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
     break label$11
    }
    $25_1 = Math_fround($25_1 / $42_1);
    if (Math_fround($25_1 * Math_fround(1.0499999523162842)) > $15_1 ^ 1 | 0) {
     break label$11
    }
    $55_1 = $26_1 < Math_fround(0.0);
    $40_1 = Math_fround($50_1 / $42_1);
    $30_1 = Math_fround(Math_fround(-$58_1) / $42_1);
    $29_1 = Math_fround(Math_fround(0.0) / $42_1);
    $56_1 = 0;
    $2_1 = 9;
    $15_1 = $25_1;
   }
   $26_1 = Math_fround(Math_fround($37_1 * $19_1) - Math_fround($57_1 * $38_1));
   $25_1 = Math_fround(Math_fround(Math_abs($26_1)) - Math_fround(Math_fround($36_1 * $18_1) + Math_fround(Math_fround(Math_fround($14_1 * $22_1) + Math_fround($33_1 * $24_1)) + Math_fround($35_1 * $17_1))));
   if ($25_1 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   label$12 : {
    $42_1 = Math_fround($38_1 * $38_1);
    $41_1 = Math_fround(Math_sqrt(Math_fround($42_1 + $41_1)));
    if ($41_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
     break label$12
    }
    $25_1 = Math_fround($25_1 / $41_1);
    if (Math_fround($25_1 * Math_fround(1.0499999523162842)) > $15_1 ^ 1 | 0) {
     break label$12
    }
    $55_1 = $26_1 < Math_fround(0.0);
    $40_1 = Math_fround(Math_fround(-$38_1) / $41_1);
    $30_1 = Math_fround(Math_fround(0.0) / $41_1);
    $29_1 = Math_fround($19_1 / $41_1);
    $56_1 = 0;
    $2_1 = 10;
    $15_1 = $25_1;
   }
   $25_1 = Math_fround(Math_fround($37_1 * $60_1) - Math_fround($57_1 * $43_1));
   $19_1 = Math_fround(Math_fround(Math_abs($25_1)) - Math_fround(Math_fround($36_1 * $27_1) + Math_fround(Math_fround(Math_fround($14_1 * $28_1) + Math_fround($33_1 * $21_1)) + Math_fround($34_1 * $17_1))));
   if ($19_1 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   label$13 : {
    $41_1 = Math_fround($43_1 * $43_1);
    $26_1 = Math_fround(Math_sqrt(Math_fround($41_1 + $39_1)));
    if ($26_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
     break label$13
    }
    $19_1 = Math_fround($19_1 / $26_1);
    if (Math_fround($19_1 * Math_fround(1.0499999523162842)) > $15_1 ^ 1 | 0) {
     break label$13
    }
    $55_1 = $25_1 < Math_fround(0.0);
    $40_1 = Math_fround(Math_fround(-$43_1) / $26_1);
    $30_1 = Math_fround(Math_fround(0.0) / $26_1);
    $29_1 = Math_fround($60_1 / $26_1);
    $56_1 = 0;
    $2_1 = 11;
    $15_1 = $19_1;
   }
   $25_1 = Math_fround(Math_fround($37_1 * $58_1) - Math_fround($57_1 * $47_1));
   $19_1 = Math_fround(Math_fround(Math_abs($25_1)) - Math_fround(Math_fround($35_1 * $27_1) + Math_fround(Math_fround($34_1 * $18_1) + Math_fround(Math_fround($14_1 * $45_1) + Math_fround($33_1 * $23_1)))));
   if ($19_1 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   label$14 : {
    $39_1 = Math_fround($47_1 * $47_1);
    $26_1 = Math_fround(Math_sqrt(Math_fround($39_1 + $53_1)));
    if ($26_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
     break label$14
    }
    $19_1 = Math_fround($19_1 / $26_1);
    if (Math_fround($19_1 * Math_fround(1.0499999523162842)) > $15_1 ^ 1 | 0) {
     break label$14
    }
    $55_1 = $25_1 < Math_fround(0.0);
    $40_1 = Math_fround(Math_fround(-$47_1) / $26_1);
    $30_1 = Math_fround(Math_fround(0.0) / $26_1);
    $29_1 = Math_fround($58_1 / $26_1);
    $56_1 = 0;
    $2_1 = 12;
    $15_1 = $19_1;
   }
   $19_1 = Math_fround(Math_fround($49_1 * $38_1) - Math_fround($37_1 * $54_1));
   $24_1 = Math_fround(Math_fround(Math_abs($19_1)) - Math_fround(Math_fround($36_1 * $28_1) + Math_fround(Math_fround(Math_fround($14_1 * $27_1) + Math_fround($32_1 * $24_1)) + Math_fround($35_1 * $45_1))));
   if ($24_1 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   label$15 : {
    $25_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($46_1 + $42_1) + Math_fround(0.0))));
    if ($25_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
     break label$15
    }
    $24_1 = Math_fround($24_1 / $25_1);
    if (Math_fround($24_1 * Math_fround(1.0499999523162842)) > $15_1 ^ 1 | 0) {
     break label$15
    }
    $55_1 = $19_1 < Math_fround(0.0);
    $40_1 = Math_fround(Math_fround(0.0) / $25_1);
    $30_1 = Math_fround($38_1 / $25_1);
    $29_1 = Math_fround(Math_fround(-$54_1) / $25_1);
    $56_1 = 0;
    $2_1 = 13;
    $15_1 = $24_1;
   }
   $19_1 = Math_fround(Math_fround($49_1 * $43_1) - Math_fround($37_1 * $52_1));
   $24_1 = Math_fround(Math_fround(Math_abs($19_1)) - Math_fround(Math_fround($36_1 * $22_1) + Math_fround(Math_fround(Math_fround($14_1 * $18_1) + Math_fround($32_1 * $21_1)) + Math_fround($34_1 * $45_1))));
   if ($24_1 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   label$16 : {
    $18_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($44_1 + $41_1) + Math_fround(0.0))));
    if ($18_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
     break label$16
    }
    $24_1 = Math_fround($24_1 / $18_1);
    if (Math_fround($24_1 * Math_fround(1.0499999523162842)) > $15_1 ^ 1 | 0) {
     break label$16
    }
    $55_1 = $19_1 < Math_fround(0.0);
    $40_1 = Math_fround(Math_fround(0.0) / $18_1);
    $30_1 = Math_fround($43_1 / $18_1);
    $29_1 = Math_fround(Math_fround(-$52_1) / $18_1);
    $56_1 = 0;
    $2_1 = 14;
    $15_1 = $24_1;
   }
   $24_1 = Math_fround(Math_fround($49_1 * $47_1) - Math_fround($37_1 * $50_1));
   $23_1 = Math_fround(Math_fround(Math_abs($24_1)) - Math_fround(Math_fround($35_1 * $22_1) + Math_fround(Math_fround($34_1 * $28_1) + Math_fround(Math_fround($14_1 * $17_1) + Math_fround($32_1 * $23_1)))));
   if ($23_1 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   label$17 : {
    label$18 : {
     label$19 : {
      label$20 : {
       $17_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($48_1 + $39_1) + Math_fround(0.0))));
       if ($17_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
        break label$20
       }
       $18_1 = Math_fround($23_1 / $17_1);
       if (Math_fround($18_1 * Math_fround(1.0499999523162842)) > $15_1 ^ 1 | 0) {
        break label$20
       }
       $55_1 = $24_1 < Math_fround(0.0);
       $40_1 = Math_fround(Math_fround(0.0) / $17_1);
       $30_1 = Math_fround($47_1 / $17_1);
       $29_1 = Math_fround(Math_fround(-$50_1) / $17_1);
       $2_1 = 15;
       break label$19;
      }
      if (!$2_1) {
       break label$1
      }
      if ($56_1) {
       break label$18
      }
      $18_1 = $15_1;
     }
     $31_1 = Math_fround(Math_fround(Math_fround($31_1 * $29_1) + Math_fround($30_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]))) + Math_fround($40_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])));
     HEAPF32[$6_1 >> 2] = $31_1;
     $23_1 = Math_fround(Math_fround(Math_fround($29_1 * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2])) + Math_fround($30_1 * Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]))) + Math_fround($40_1 * Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2])));
     HEAPF32[($6_1 + 4 | 0) >> 2] = $23_1;
     $24_1 = Math_fround(Math_fround(Math_fround($29_1 * Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2])) + Math_fround($30_1 * Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]))) + Math_fround($40_1 * Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2])));
     HEAPF32[($6_1 + 8 | 0) >> 2] = $24_1;
     break label$17;
    }
    $5_1 = HEAP32[$56_1 >> 2] | 0;
    HEAP32[$6_1 >> 2] = $5_1;
    $16_1 = HEAP32[($56_1 + 16 | 0) >> 2] | 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = $16_1;
    $20_1 = HEAP32[($56_1 + 32 | 0) >> 2] | 0;
    HEAP32[($6_1 + 8 | 0) >> 2] = $20_1;
    $31_1 = (wasm2js_scratch_store_i32(0, $5_1), wasm2js_scratch_load_f32());
    $23_1 = (wasm2js_scratch_store_i32(0, $16_1), wasm2js_scratch_load_f32());
    $24_1 = (wasm2js_scratch_store_i32(0, $20_1), wasm2js_scratch_load_f32());
    $18_1 = $15_1;
   }
   label$21 : {
    if (!$55_1) {
     break label$21
    }
    HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(-$24_1);
    HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(-$23_1);
    HEAPF32[$6_1 >> 2] = Math_fround(-$31_1);
   }
   HEAPF32[$7_1 >> 2] = Math_fround(-$18_1);
   label$22 : {
    if (($2_1 | 0) < (7 | 0)) {
     break label$22
    }
    $5_1 = ($13_1 + 112 | 0) + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[$0_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $1154_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $13_1;
    HEAP32[($13_1 + 112 | 0) >> 2] = $1154_1;
    HEAP32[($13_1 + 116 | 0) >> 2] = i64toi32_i32$1;
    $15_1 = Math_fround(0.0);
    $14_1 = Math_fround(HEAPF32[($13_1 + 112 | 0) >> 2]);
    $19_1 = Math_fround(HEAPF32[($13_1 + 116 | 0) >> 2]);
    $31_1 = Math_fround(HEAPF32[$6_1 >> 2]);
    $21_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $16_1 = $6_1 + 4 | 0;
    $23_1 = Math_fround(HEAPF32[$16_1 >> 2]);
    $22_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
    $20_1 = $6_1 + 8 | 0;
    $24_1 = Math_fround(HEAPF32[$20_1 >> 2]);
    $35_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
    $17_1 = Math_fround((Math_fround(Math_fround(Math_fround($31_1 * $21_1) + Math_fround($23_1 * $22_1)) + Math_fround($24_1 * $35_1)) > Math_fround(0.0) ? Math_fround(1.0) : Math_fround(-1.0)) * Math_fround(HEAPF32[($13_1 + 356 | 0) >> 2]));
    $1199_1 = Math_fround(Math_fround(HEAPF32[$5_1 >> 2]) + Math_fround($17_1 * $35_1));
    $25_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    $26_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
    $36_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
    $35_1 = Math_fround((Math_fround(Math_fround(Math_fround($31_1 * $25_1) + Math_fround($23_1 * $26_1)) + Math_fround($24_1 * $36_1)) > Math_fround(0.0) ? Math_fround(1.0) : Math_fround(-1.0)) * Math_fround(HEAPF32[($13_1 + 360 | 0) >> 2]));
    $1228_1 = Math_fround($1199_1 + Math_fround($35_1 * $36_1));
    $27_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $28_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
    $29_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
    $36_1 = Math_fround((Math_fround(Math_fround(Math_fround($31_1 * $27_1) + Math_fround($23_1 * $28_1)) + Math_fround($24_1 * $29_1)) > Math_fround(0.0) ? Math_fround(1.0) : Math_fround(-1.0)) * $33_1);
    HEAPF32[$5_1 >> 2] = Math_fround($1228_1 + Math_fround($36_1 * $29_1));
    HEAPF32[($13_1 + 116 | 0) >> 2] = Math_fround(Math_fround(Math_fround($19_1 + Math_fround($17_1 * $22_1)) + Math_fround($35_1 * $26_1)) + Math_fround($36_1 * $28_1));
    HEAPF32[($13_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 + Math_fround($17_1 * $21_1)) + Math_fround($35_1 * $25_1)) + Math_fround($36_1 * $27_1));
    $0_1 = ($13_1 + 208 | 0) + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $35_1 = Math_fround(HEAPF32[$4_1 >> 2]);
    $36_1 = Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]);
    $14_1 = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
    $17_1 = Math_fround((Math_fround(Math_fround(Math_fround($31_1 * $35_1) + Math_fround($23_1 * $36_1)) + Math_fround($24_1 * $14_1)) > Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) * $34_1);
    $1321 = Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) + Math_fround($17_1 * $14_1));
    $14_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
    $19_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
    $34_1 = Math_fround((Math_fround(Math_fround(Math_fround($31_1 * $14_1) + Math_fround($23_1 * $19_1)) + Math_fround($24_1 * $21_1)) > Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) * Math_fround(HEAPF32[($13_1 + 348 | 0) >> 2]));
    $1349 = Math_fround($1321 + Math_fround($34_1 * $21_1));
    $21_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
    $1361 = Math_fround(Math_fround($31_1 * $21_1) + Math_fround($23_1 * $22_1));
    $23_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
    $31_1 = Math_fround((Math_fround($1361 + Math_fround($24_1 * $23_1)) > Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) * Math_fround(HEAPF32[($13_1 + 352 | 0) >> 2]));
    $23_1 = Math_fround($1349 + Math_fround($31_1 * $23_1));
    HEAPF32[$0_1 >> 2] = $23_1;
    i64toi32_i32$1 = HEAP32[$3_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $1381 = i64toi32_i32$1;
    i64toi32_i32$1 = $13_1;
    HEAP32[($13_1 + 208 | 0) >> 2] = $1381;
    HEAP32[($13_1 + 212 | 0) >> 2] = i64toi32_i32$0;
    $24_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($13_1 + 208 | 0) >> 2]) + Math_fround($17_1 * $35_1)) + Math_fround($34_1 * $14_1)) + Math_fround($31_1 * $21_1));
    HEAPF32[($13_1 + 208 | 0) >> 2] = $24_1;
    $31_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($13_1 + 212 | 0) >> 2]) + Math_fround($17_1 * $36_1)) + Math_fround($34_1 * $19_1)) + Math_fround($31_1 * $22_1));
    HEAPF32[($13_1 + 212 | 0) >> 2] = $31_1;
    label$23 : {
     $0_1 = $2_1 + -7 | 0;
     $3_1 = ($0_1 | 0) / (3 | 0) | 0;
     $1_1 = $1_1 + ($3_1 << 2 | 0) | 0;
     $14_1 = Math_fround(HEAPF32[$1_1 >> 2]);
     $4_1 = $4_1 + (($0_1 - Math_imul($3_1, 3) | 0) << 2 | 0) | 0;
     $17_1 = Math_fround(HEAPF32[$4_1 >> 2]);
     $19_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
     $34_1 = Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]);
     $21_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
     $35_1 = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
     $36_1 = Math_fround(Math_fround(Math_fround($14_1 * $17_1) + Math_fround($19_1 * $34_1)) + Math_fround($21_1 * $35_1));
     $22_1 = Math_fround(Math_fround(1.0) - Math_fround($36_1 * $36_1));
     if ($22_1 <= Math_fround(9.999999747378752e-05)) {
      break label$23
     }
     $15_1 = Math_fround($24_1 - Math_fround(HEAPF32[($13_1 + 112 | 0) >> 2]));
     $1468 = Math_fround($15_1 * $14_1);
     $14_1 = Math_fround($31_1 - Math_fround(HEAPF32[($13_1 + 116 | 0) >> 2]));
     $1476 = Math_fround($1468 + Math_fround($14_1 * $19_1));
     $19_1 = Math_fround($23_1 - Math_fround(HEAPF32[$5_1 >> 2]));
     $15_1 = Math_fround(Math_fround(Math_fround(Math_fround($1476 + Math_fround($19_1 * $21_1)) * $36_1) - Math_fround(Math_fround(Math_fround($15_1 * $17_1) + Math_fround($14_1 * $34_1)) + Math_fround($19_1 * $35_1))) * Math_fround(Math_fround(1.0) / $22_1));
    }
    HEAPF32[($13_1 + 216 | 0) >> 2] = Math_fround($23_1 + Math_fround($15_1 * $35_1));
    HEAPF32[($13_1 + 212 | 0) >> 2] = Math_fround($31_1 + Math_fround($15_1 * $34_1));
    HEAPF32[($13_1 + 208 | 0) >> 2] = Math_fround($24_1 + Math_fround($15_1 * $17_1));
    HEAP32[($13_1 + 284 | 0) >> 2] = 0;
    HEAPF32[($13_1 + 280 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[$20_1 >> 2]));
    HEAPF32[($13_1 + 276 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[$16_1 >> 2]));
    HEAPF32[($13_1 + 272 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[$6_1 >> 2]));
    FUNCTION_TABLE[HEAP32[((HEAP32[$12_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($12_1, $13_1 + 272 | 0, $13_1 + 208 | 0, $18_1);
    HEAP32[$8_1 >> 2] = $2_1;
    $5_1 = 1;
    break label$1;
   }
   $34_1 = Math_fround(HEAPF32[$6_1 >> 2]);
   label$24 : {
    label$25 : {
     if (($2_1 | 0) > (3 | 0)) {
      break label$25
     }
     $35_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
     $36_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
     $55_1 = $13_1 + 356 | 0;
     $5_1 = $13_1 + 344 | 0;
     $16_1 = $4_1;
     break label$24;
    }
    $34_1 = Math_fround(-$34_1);
    $35_1 = Math_fround(-Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]));
    $36_1 = Math_fround(-Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]));
    $16_1 = $3_1;
    $5_1 = $13_1 + 356 | 0;
    $55_1 = $13_1 + 344 | 0;
    $3_1 = $0_1;
    $0_1 = $16_1;
    $16_1 = $1_1;
    $1_1 = $4_1;
   }
   $31_1 = Math_fround(Math_fround(Math_fround($34_1 * Math_fround(HEAPF32[$16_1 >> 2])) + Math_fround($36_1 * Math_fround(HEAPF32[($16_1 + 16 | 0) >> 2]))) + Math_fround($35_1 * Math_fround(HEAPF32[($16_1 + 32 | 0) >> 2])));
   HEAPF32[($13_1 + 328 | 0) >> 2] = $31_1;
   $23_1 = Math_fround(Math_fround(Math_fround($34_1 * Math_fround(HEAPF32[($16_1 + 4 | 0) >> 2])) + Math_fround($36_1 * Math_fround(HEAPF32[($16_1 + 20 | 0) >> 2]))) + Math_fround($35_1 * Math_fround(HEAPF32[($16_1 + 36 | 0) >> 2])));
   HEAPF32[($13_1 + 332 | 0) >> 2] = $23_1;
   $24_1 = Math_fround(Math_fround(Math_fround($34_1 * Math_fround(HEAPF32[($16_1 + 8 | 0) >> 2])) + Math_fround($36_1 * Math_fround(HEAPF32[($16_1 + 24 | 0) >> 2]))) + Math_fround($35_1 * Math_fround(HEAPF32[($16_1 + 40 | 0) >> 2])));
   HEAPF32[($13_1 + 336 | 0) >> 2] = $24_1;
   $24_1 = Math_fround(Math_abs($24_1));
   label$26 : {
    label$27 : {
     $23_1 = Math_fround(Math_abs($23_1));
     $31_1 = Math_fround(Math_abs($31_1));
     if ($23_1 > $31_1 ^ 1 | 0) {
      break label$27
     }
     $20_1 = $23_1 > $24_1;
     $4_1 = $20_1 ? 1 : 2;
     $62_1 = 0;
     break label$26;
    }
    $20_1 = $31_1 > $24_1;
    $4_1 = ($20_1 ^ 1 | 0) << 1 | 0;
    $62_1 = $20_1;
   }
   $4_1 = $4_1 << 2 | 0;
   $31_1 = Math_fround(HEAPF32[($5_1 + $4_1 | 0) >> 2]);
   $23_1 = Math_fround($31_1 * Math_fround(HEAPF32[($16_1 + $4_1 | 0) >> 2]));
   $24_1 = Math_fround(Math_fround(HEAPF32[$3_1 >> 2]) - Math_fround(HEAPF32[$0_1 >> 2]));
   label$28 : {
    label$29 : {
     if (Math_fround(HEAPF32[(($13_1 + 328 | 0) + $4_1 | 0) >> 2]) < Math_fround(0.0)) {
      break label$29
     }
     $17_1 = Math_fround($24_1 - $23_1);
     HEAPF32[($13_1 + 312 | 0) >> 2] = $17_1;
     $18_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2])) - Math_fround($31_1 * Math_fround(HEAPF32[($16_1 + ($4_1 | 16 | 0) | 0) >> 2])));
     HEAPF32[($13_1 + 316 | 0) >> 2] = $18_1;
     $23_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2])) - Math_fround($31_1 * Math_fround(HEAPF32[($16_1 + ($4_1 | 32 | 0) | 0) >> 2])));
     break label$28;
    }
    $17_1 = Math_fround($24_1 + $23_1);
    HEAPF32[($13_1 + 312 | 0) >> 2] = $17_1;
    $18_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2])) + Math_fround($31_1 * Math_fround(HEAPF32[($16_1 + ($4_1 | 16 | 0) | 0) >> 2])));
    HEAPF32[($13_1 + 316 | 0) >> 2] = $18_1;
    $23_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2])) + Math_fround($31_1 * Math_fround(HEAPF32[($16_1 + ($4_1 | 32 | 0) | 0) >> 2])));
   }
   $63_1 = $20_1 ? 2 : 1;
   HEAPF32[($13_1 + 320 | 0) >> 2] = $23_1;
   $20_1 = 1;
   label$30 : {
    label$31 : {
     label$32 : {
      $64_1 = (($2_1 | 0) < (4 | 0) ? -1 : -4) + $2_1 | 0;
      if ($64_1 >>> 0 > 1 >>> 0) {
       break label$32
      }
      $4_1 = 2;
      switch ($64_1 | 0) {
      case 1:
       break label$31;
      default:
       break label$30;
      };
     }
     $4_1 = 1;
    }
    $20_1 = 0;
   }
   $3_1 = 2;
   $65_1 = $4_1 << 2 | 0;
   $4_1 = $1_1 + $65_1 | 0;
   $31_1 = Math_fround(HEAPF32[$4_1 >> 2]);
   $24_1 = Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
   $14_1 = Math_fround(Math_fround(Math_fround($17_1 * $31_1) + Math_fround($18_1 * $24_1)) + Math_fround($23_1 * $15_1));
   $4_1 = $62_1 << 2 | 0;
   $7_1 = $16_1 + $4_1 | 0;
   $25_1 = Math_fround(HEAPF32[$7_1 >> 2]);
   $26_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]);
   $22_1 = Math_fround(Math_fround(Math_fround($31_1 * $25_1) + Math_fround($24_1 * $26_1)) + Math_fround($15_1 * $27_1));
   $28_1 = Math_fround(HEAPF32[($5_1 + $4_1 | 0) >> 2]);
   $29_1 = Math_fround($22_1 * $28_1);
   $30_1 = Math_fround($14_1 + $29_1);
   $4_1 = $63_1 << 2 | 0;
   $56_1 = $16_1 + $4_1 | 0;
   $40_1 = Math_fround(HEAPF32[$56_1 >> 2]);
   $41_1 = Math_fround(HEAPF32[($56_1 + 16 | 0) >> 2]);
   $42_1 = Math_fround(HEAPF32[($56_1 + 32 | 0) >> 2]);
   $21_1 = Math_fround(Math_fround(Math_fround($31_1 * $40_1) + Math_fround($24_1 * $41_1)) + Math_fround($15_1 * $42_1));
   $45_1 = Math_fround(HEAPF32[($5_1 + $4_1 | 0) >> 2]);
   $31_1 = Math_fround($21_1 * $45_1);
   HEAPF32[($13_1 + 300 | 0) >> 2] = Math_fround($30_1 - $31_1);
   $4_1 = $20_1 << 2 | 0;
   $1_1 = $1_1 + $4_1 | 0;
   $24_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $15_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $1861 = Math_fround(Math_fround($17_1 * $24_1) + Math_fround($18_1 * $15_1));
   $17_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
   $19_1 = Math_fround($1861 + Math_fround($23_1 * $17_1));
   $18_1 = Math_fround(Math_fround(Math_fround($24_1 * $25_1) + Math_fround($15_1 * $26_1)) + Math_fround($17_1 * $27_1));
   $25_1 = Math_fround($28_1 * $18_1);
   $26_1 = Math_fround($19_1 + $25_1);
   $17_1 = Math_fround(Math_fround(Math_fround($24_1 * $40_1) + Math_fround($15_1 * $41_1)) + Math_fround($17_1 * $42_1));
   $23_1 = Math_fround($45_1 * $17_1);
   HEAPF32[($13_1 + 296 | 0) >> 2] = Math_fround($26_1 - $23_1);
   HEAPF32[($13_1 + 292 | 0) >> 2] = Math_fround($30_1 + $31_1);
   $26_1 = Math_fround($26_1 + $23_1);
   HEAPF32[($13_1 + 288 | 0) >> 2] = $26_1;
   $15_1 = Math_fround($14_1 - $29_1);
   $28_1 = Math_fround($15_1 + $31_1);
   HEAPF32[($13_1 + 284 | 0) >> 2] = $28_1;
   $27_1 = Math_fround($19_1 - $25_1);
   $24_1 = Math_fround($27_1 + $23_1);
   HEAPF32[($13_1 + 280 | 0) >> 2] = $24_1;
   $25_1 = Math_fround($15_1 - $31_1);
   HEAPF32[($13_1 + 276 | 0) >> 2] = $25_1;
   $23_1 = Math_fround($27_1 - $23_1);
   HEAPF32[($13_1 + 272 | 0) >> 2] = $23_1;
   $66_1 = HEAP32[($55_1 + $65_1 | 0) >> 2] | 0;
   $67_1 = HEAP32[($55_1 + $4_1 | 0) >> 2] | 0;
   $31_1 = (wasm2js_scratch_store_i32(0, $67_1), wasm2js_scratch_load_f32());
   $15_1 = Math_fround(-$31_1);
   label$33 : {
    label$34 : {
     label$35 : {
      label$36 : {
       label$37 : {
        label$38 : {
         $29_1 = Math_fround(-$23_1);
         $4_1 = $31_1 > $29_1;
         if ($4_1) {
          break label$38
         }
         $5_1 = 0;
         $3_1 = 1;
         $1_1 = $13_1 + 208 | 0;
         $27_1 = Math_fround(-$24_1);
         $20_1 = $31_1 > $27_1;
         if ($4_1 ^ $20_1 | 0) {
          break label$37
         }
         break label$36;
        }
        HEAPF32[($13_1 + 212 | 0) >> 2] = $25_1;
        HEAPF32[($13_1 + 208 | 0) >> 2] = $23_1;
        $1_1 = $13_1 + 208 | 0 | 8 | 0;
        $5_1 = 1;
        $27_1 = Math_fround(-$24_1);
        $20_1 = $31_1 > $27_1;
        if (($4_1 | 0) == ($20_1 | 0)) {
         break label$36
        }
       }
       HEAPF32[$1_1 >> 2] = $15_1;
       HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround($25_1 + Math_fround(Math_fround($15_1 - $23_1) * Math_fround(Math_fround($28_1 - $25_1) / Math_fround($24_1 - $23_1))));
       $1_1 = $1_1 + 8 | 0;
       if ($20_1) {
        break label$35
       }
       $5_1 = $3_1;
       break label$34;
      }
      $3_1 = $5_1;
      if (!$20_1) {
       break label$34
      }
     }
     HEAPF32[($1_1 + 4 | 0) >> 2] = $28_1;
     HEAPF32[$1_1 >> 2] = $24_1;
     $5_1 = $3_1 + 1 | 0;
     if (0) {
      break label$33
     }
     $1_1 = $1_1 + 8 | 0;
     $24_1 = Math_fround(HEAPF32[($13_1 + 280 | 0) >> 2]);
     $27_1 = Math_fround(-$24_1);
     $26_1 = Math_fround(HEAPF32[($13_1 + 288 | 0) >> 2]);
    }
    label$39 : {
     if (($27_1 < $31_1 | 0) == ($31_1 > Math_fround(-$26_1) | 0)) {
      break label$39
     }
     $27_1 = Math_fround(HEAPF32[($13_1 + 292 | 0) >> 2]);
     $25_1 = Math_fround(HEAPF32[($13_1 + 284 | 0) >> 2]);
     HEAPF32[$1_1 >> 2] = $15_1;
     HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround($25_1 + Math_fround(Math_fround($15_1 - $24_1) * Math_fround(Math_fround($27_1 - $25_1) / Math_fround($26_1 - $24_1))));
     $5_1 = $5_1 + 1 | 0;
     if ($5_1 & 8 | 0) {
      break label$33
     }
     $1_1 = $1_1 + 8 | 0;
    }
    label$40 : {
     $24_1 = Math_fround(HEAPF32[($13_1 + 288 | 0) >> 2]);
     $25_1 = Math_fround(-$24_1);
     if ($31_1 > $25_1 ^ 1 | 0) {
      break label$40
     }
     HEAPF32[$1_1 >> 2] = $24_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($13_1 + 292 | 0) >> 2] | 0;
     $5_1 = $5_1 + 1 | 0;
     if ($5_1 & 8 | 0) {
      break label$33
     }
     $1_1 = $1_1 + 8 | 0;
     $24_1 = Math_fround(HEAPF32[($13_1 + 288 | 0) >> 2]);
     $25_1 = Math_fround(-$24_1);
    }
    label$41 : {
     $2077 = $25_1 < $31_1;
     $25_1 = Math_fround(HEAPF32[($13_1 + 296 | 0) >> 2]);
     $26_1 = Math_fround(-$25_1);
     if (($2077 | 0) == ($31_1 > $26_1 | 0)) {
      break label$41
     }
     $27_1 = Math_fround(HEAPF32[($13_1 + 300 | 0) >> 2]);
     $26_1 = Math_fround(HEAPF32[($13_1 + 292 | 0) >> 2]);
     HEAPF32[$1_1 >> 2] = $15_1;
     HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround($26_1 + Math_fround(Math_fround($15_1 - $24_1) * Math_fround(Math_fround($27_1 - $26_1) / Math_fround($25_1 - $24_1))));
     $5_1 = $5_1 + 1 | 0;
     if ($5_1 & 8 | 0) {
      break label$33
     }
     $1_1 = $1_1 + 8 | 0;
     $25_1 = Math_fround(HEAPF32[($13_1 + 296 | 0) >> 2]);
     $26_1 = Math_fround(-$25_1);
    }
    label$42 : {
     if ($26_1 < $31_1 ^ 1 | 0) {
      break label$42
     }
     HEAPF32[$1_1 >> 2] = $25_1;
     HEAP32[($1_1 + 4 | 0) >> 2] = HEAP32[($13_1 + 300 | 0) >> 2] | 0;
     $5_1 = $5_1 + 1 | 0;
     if ($5_1 & 8 | 0) {
      break label$33
     }
     $1_1 = $1_1 + 8 | 0;
     $23_1 = Math_fround(HEAPF32[($13_1 + 272 | 0) >> 2]);
     $29_1 = Math_fround(-$23_1);
     $25_1 = Math_fround(HEAPF32[($13_1 + 296 | 0) >> 2]);
     $26_1 = Math_fround(-$25_1);
    }
    label$43 : {
     label$44 : {
      label$45 : {
       label$46 : {
        if (($26_1 < $31_1 | 0) == ($29_1 < $31_1 | 0)) {
         break label$46
        }
        $26_1 = Math_fround(HEAPF32[($13_1 + 276 | 0) >> 2]);
        $24_1 = Math_fround(HEAPF32[($13_1 + 300 | 0) >> 2]);
        HEAPF32[$1_1 >> 2] = $15_1;
        HEAPF32[($1_1 + 4 | 0) >> 2] = Math_fround($24_1 + Math_fround(Math_fround($15_1 - $25_1) * Math_fround(Math_fround($26_1 - $24_1) / Math_fround($23_1 - $25_1))));
        $5_1 = $5_1 + 1 | 0;
        if ($5_1 & 8 | 0) {
         break label$33
        }
        break label$45;
       }
       if (($5_1 | 0) >= (1 | 0)) {
        break label$45
       }
       $5_1 = 0;
       break label$44;
      }
      $1_1 = $13_1 + 208 | 0;
      $4_1 = $13_1 + 112 | 0;
      $3_1 = 0;
      label$47 : while (1) {
       label$48 : {
        $23_1 = Math_fround(HEAPF32[$1_1 >> 2]);
        if ($23_1 < $31_1 ^ 1 | 0) {
         break label$48
        }
        HEAPF32[$4_1 >> 2] = $23_1;
        HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        label$49 : {
         $3_1 = $3_1 + 1 | 0;
         if (!($3_1 & 8 | 0)) {
          break label$49
         }
         $5_1 = $3_1;
         break label$44;
        }
        $4_1 = $4_1 + 8 | 0;
        $23_1 = Math_fround(HEAPF32[$1_1 >> 2]);
       }
       label$50 : {
        $20_1 = $1_1 + 8 | 0;
        $65_1 = ($5_1 | 0) > (1 | 0) ? $20_1 : $13_1 + 208 | 0;
        $24_1 = Math_fround(HEAPF32[$65_1 >> 2]);
        if (($23_1 < $31_1 | 0) == ($24_1 < $31_1 | 0)) {
         break label$50
        }
        $15_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
        $25_1 = Math_fround(HEAPF32[($65_1 + 4 | 0) >> 2]);
        HEAP32[$4_1 >> 2] = $67_1;
        HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround($15_1 + Math_fround(Math_fround($31_1 - $23_1) * Math_fround(Math_fround($25_1 - $15_1) / Math_fround($24_1 - $23_1))));
        label$51 : {
         $3_1 = $3_1 + 1 | 0;
         if (!($3_1 & 8 | 0)) {
          break label$51
         }
         $5_1 = $3_1;
         break label$44;
        }
        $4_1 = $4_1 + 8 | 0;
       }
       $1_1 = $20_1;
       $5_1 = $5_1 + -1 | 0;
       if (($5_1 | 0) > (0 | 0)) {
        continue label$47
       }
       break label$47;
      };
      label$52 : {
       if (($3_1 | 0) >= (1 | 0)) {
        break label$52
       }
       $5_1 = 0;
       break label$44;
      }
      $31_1 = (wasm2js_scratch_store_i32(0, $66_1), wasm2js_scratch_load_f32());
      $25_1 = Math_fround(-$31_1);
      $4_1 = $13_1 + 208 | 0;
      $1_1 = $13_1 + 112 | 0;
      $20_1 = 0;
      label$53 : while (1) {
       label$54 : {
        $5_1 = $1_1 + 4 | 0;
        $24_1 = Math_fround(HEAPF32[$5_1 >> 2]);
        $23_1 = Math_fround(-$24_1);
        if ($31_1 > $23_1 ^ 1 | 0) {
         break label$54
        }
        HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
        HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
        label$55 : {
         $20_1 = $20_1 + 1 | 0;
         if (!($20_1 & 8 | 0)) {
          break label$55
         }
         $5_1 = $20_1;
         break label$43;
        }
        $4_1 = $4_1 + 8 | 0;
        $24_1 = Math_fround(HEAPF32[$5_1 >> 2]);
        $23_1 = Math_fround(-$24_1);
       }
       label$56 : {
        $2289 = $23_1 < $31_1;
        $5_1 = $1_1 + 8 | 0;
        $65_1 = ($3_1 | 0) > (1 | 0) ? $5_1 : $13_1 + 112 | 0;
        $23_1 = Math_fround(HEAPF32[($65_1 + 4 | 0) >> 2]);
        if (($2289 | 0) == ($31_1 > Math_fround(-$23_1) | 0)) {
         break label$56
        }
        $26_1 = Math_fround(HEAPF32[$65_1 >> 2]);
        $15_1 = Math_fround(HEAPF32[$1_1 >> 2]);
        HEAPF32[($4_1 + 4 | 0) >> 2] = $25_1;
        HEAPF32[$4_1 >> 2] = Math_fround($15_1 + Math_fround(Math_fround($25_1 - $24_1) * Math_fround(Math_fround($26_1 - $15_1) / Math_fround($23_1 - $24_1))));
        label$57 : {
         $20_1 = $20_1 + 1 | 0;
         if (!($20_1 & 8 | 0)) {
          break label$57
         }
         $5_1 = $20_1;
         break label$43;
        }
        $4_1 = $4_1 + 8 | 0;
       }
       $1_1 = $5_1;
       $3_1 = $3_1 + -1 | 0;
       if (($3_1 | 0) > (0 | 0)) {
        continue label$53
       }
       break label$53;
      };
      label$58 : {
       if (($20_1 | 0) >= (1 | 0)) {
        break label$58
       }
       $5_1 = 0;
       break label$44;
      }
      $1_1 = $13_1 + 208 | 0;
      $4_1 = $13_1 + 112 | 0;
      $5_1 = 0;
      label$59 : while (1) {
       label$60 : {
        $3_1 = $1_1 + 4 | 0;
        $23_1 = Math_fround(HEAPF32[$3_1 >> 2]);
        if ($23_1 < $31_1 ^ 1 | 0) {
         break label$60
        }
        HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
        HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
        $5_1 = $5_1 + 1 | 0;
        if ($5_1 & 8 | 0) {
         break label$44
        }
        $4_1 = $4_1 + 8 | 0;
        $23_1 = Math_fround(HEAPF32[$3_1 >> 2]);
       }
       label$61 : {
        $3_1 = $1_1 + 8 | 0;
        $65_1 = ($20_1 | 0) > (1 | 0) ? $3_1 : $13_1 + 208 | 0;
        $24_1 = Math_fround(HEAPF32[($65_1 + 4 | 0) >> 2]);
        if (($23_1 < $31_1 | 0) == ($24_1 < $31_1 | 0)) {
         break label$61
        }
        $25_1 = Math_fround(HEAPF32[$65_1 >> 2]);
        $15_1 = Math_fround(HEAPF32[$1_1 >> 2]);
        HEAP32[($4_1 + 4 | 0) >> 2] = $66_1;
        HEAPF32[$4_1 >> 2] = Math_fround($15_1 + Math_fround(Math_fround($31_1 - $23_1) * Math_fround(Math_fround($25_1 - $15_1) / Math_fround($24_1 - $23_1))));
        $5_1 = $5_1 + 1 | 0;
        if ($5_1 & 8 | 0) {
         break label$44
        }
        $4_1 = $4_1 + 8 | 0;
       }
       $1_1 = $3_1;
       $20_1 = $20_1 + -1 | 0;
       if (($20_1 | 0) > (0 | 0)) {
        continue label$59
       }
       break label$59;
      };
     }
     $7($13_1 + 208 | 0 | 0, $13_1 + 112 | 0 | 0, $5_1 << 3 | 0 | 0) | 0;
    }
    if (($5_1 | 0) >= (1 | 0)) {
     break label$33
    }
    $5_1 = 0;
    break label$1;
   }
   $31_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround($18_1 * $21_1) - Math_fround($22_1 * $17_1)));
   $21_1 = Math_fround($21_1 * $31_1);
   $22_1 = Math_fround($22_1 * $31_1);
   $25_1 = Math_fround($17_1 * $31_1);
   $26_1 = Math_fround($18_1 * $31_1);
   $27_1 = Math_fround(HEAPF32[($55_1 + ($64_1 << 2 | 0) | 0) >> 2]);
   $1_1 = $63_1 << 2 | 0;
   $28_1 = Math_fround(HEAPF32[($16_1 + ($1_1 | 32 | 0) | 0) >> 2]);
   $4_1 = $62_1 << 2 | 0;
   $29_1 = Math_fround(HEAPF32[($16_1 + ($4_1 | 32 | 0) | 0) >> 2]);
   $30_1 = Math_fround(HEAPF32[($16_1 + ($1_1 | 16 | 0) | 0) >> 2]);
   $40_1 = Math_fround(HEAPF32[($16_1 + ($4_1 | 16 | 0) | 0) >> 2]);
   $41_1 = Math_fround(HEAPF32[$56_1 >> 2]);
   $42_1 = Math_fround(HEAPF32[$7_1 >> 2]);
   $4_1 = 0;
   $1_1 = $13_1 + 208 | 0;
   $45_1 = Math_fround(HEAPF32[($13_1 + 320 | 0) >> 2]);
   $46_1 = Math_fround(HEAPF32[($13_1 + 316 | 0) >> 2]);
   $32_1 = Math_fround(HEAPF32[($13_1 + 312 | 0) >> 2]);
   label$62 : while (1) {
    $3_1 = ($13_1 + 112 | 0) + Math_imul($4_1, 12) | 0;
    $17_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $23_1 = Math_fround($17_1 - $19_1);
    $18_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    $24_1 = Math_fround($18_1 - $14_1);
    $31_1 = Math_fround(Math_fround($21_1 * $23_1) - Math_fround($25_1 * $24_1));
    $23_1 = Math_fround(Math_fround($26_1 * $24_1) - Math_fround($22_1 * $23_1));
    $24_1 = Math_fround(Math_fround($46_1 + Math_fround($31_1 * $40_1)) + Math_fround($23_1 * $30_1));
    HEAPF32[($3_1 + 4 | 0) >> 2] = $24_1;
    $15_1 = Math_fround(Math_fround($32_1 + Math_fround($31_1 * $42_1)) + Math_fround($23_1 * $41_1));
    HEAPF32[$3_1 >> 2] = $15_1;
    $31_1 = Math_fround(Math_fround($45_1 + Math_fround($31_1 * $29_1)) + Math_fround($23_1 * $28_1));
    HEAPF32[($3_1 + 8 | 0) >> 2] = $31_1;
    $31_1 = Math_fround($27_1 - Math_fround(Math_fround(Math_fround($34_1 * $15_1) + Math_fround($36_1 * $24_1)) + Math_fround($35_1 * $31_1)));
    HEAPF32[(($13_1 + 80 | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $31_1;
    label$63 : {
     if ($31_1 >= Math_fround(0.0) ^ 1 | 0) {
      break label$63
     }
     $3_1 = $4_1 << 3 | 0;
     HEAPF32[(($13_1 + 208 | 0) + $3_1 | 0) >> 2] = $17_1;
     HEAPF32[(($13_1 + 208 | 0) + ($3_1 | 4 | 0) | 0) >> 2] = $18_1;
     $4_1 = $4_1 + 1 | 0;
    }
    $1_1 = $1_1 + 8 | 0;
    $5_1 = $5_1 + -1 | 0;
    if ($5_1) {
     continue label$62
    }
    break label$62;
   };
   label$64 : {
    if (($4_1 | 0) >= (1 | 0)) {
     break label$64
    }
    $5_1 = 0;
    break label$1;
   }
   label$65 : {
    label$66 : {
     $1_1 = ($4_1 | 0) < ($9_1 | 0) ? $4_1 : $9_1;
     $5_1 = ($1_1 | 0) > (1 | 0) ? $1_1 : 1;
     if (($4_1 | 0) > ($5_1 | 0)) {
      break label$66
     }
     label$67 : {
      if (($2_1 | 0) < (4 | 0)) {
       break label$67
      }
      $3_1 = $13_1 + 80 | 0;
      $1_1 = $13_1 + 112 | 0;
      $5_1 = $4_1;
      label$68 : while (1) {
       $23_1 = Math_fround(HEAPF32[$6_1 >> 2]);
       $31_1 = Math_fround(HEAPF32[$3_1 >> 2]);
       HEAPF32[($13_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) + Math_fround(HEAPF32[$0_1 >> 2])) - Math_fround($23_1 * $31_1));
       $24_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
       HEAPF32[($13_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2])) - Math_fround($31_1 * $24_1));
       $15_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
       HEAPF32[($13_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2])) - Math_fround($31_1 * $15_1));
       HEAP32[($13_1 + 76 | 0) >> 2] = 0;
       HEAPF32[($13_1 + 72 | 0) >> 2] = Math_fround(-$15_1);
       HEAPF32[($13_1 + 68 | 0) >> 2] = Math_fround(-$24_1);
       HEAPF32[($13_1 + 64 | 0) >> 2] = Math_fround(-$23_1);
       FUNCTION_TABLE[HEAP32[((HEAP32[$12_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($12_1, $13_1 + 64 | 0, $13_1 + 32 | 0, Math_fround(-$31_1));
       $1_1 = $1_1 + 12 | 0;
       $3_1 = $3_1 + 4 | 0;
       $5_1 = $5_1 + -1 | 0;
       if ($5_1) {
        continue label$68
       }
       break label$68;
      };
      $5_1 = $4_1;
      break label$65;
     }
     $3_1 = $13_1 + 80 | 0;
     $1_1 = $13_1 + 112 | 0;
     $5_1 = $4_1;
     label$69 : while (1) {
      HEAPF32[($13_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) + Math_fround(HEAPF32[$0_1 >> 2]));
      HEAPF32[($13_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]));
      HEAPF32[($13_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]));
      HEAP32[($13_1 + 76 | 0) >> 2] = 0;
      HEAPF32[($13_1 + 72 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]));
      HEAPF32[($13_1 + 68 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]));
      HEAPF32[($13_1 + 64 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[$6_1 >> 2]));
      FUNCTION_TABLE[HEAP32[((HEAP32[$12_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($12_1, $13_1 + 64 | 0, $13_1 + 32 | 0, Math_fround(-Math_fround(HEAPF32[$3_1 >> 2])));
      $1_1 = $1_1 + 12 | 0;
      $3_1 = $3_1 + 4 | 0;
      $5_1 = $5_1 + -1 | 0;
      if ($5_1) {
       continue label$69
      }
      break label$69;
     };
     $5_1 = $4_1;
     break label$65;
    }
    $16_1 = 0;
    label$70 : {
     if (($4_1 | 0) < (2 | 0)) {
      break label$70
     }
     $1_1 = $13_1 + 80 | 0 | 4 | 0;
     $16_1 = 0;
     $31_1 = Math_fround(HEAPF32[($13_1 + 80 | 0) >> 2]);
     $3_1 = 1;
     label$71 : while (1) {
      $23_1 = Math_fround(HEAPF32[$1_1 >> 2]);
      $20_1 = $23_1 > $31_1;
      $31_1 = $20_1 ? $23_1 : $31_1;
      $16_1 = $20_1 ? $3_1 : $16_1;
      $1_1 = $1_1 + 4 | 0;
      $3_1 = $3_1 + 1 | 0;
      if (($4_1 | 0) != ($3_1 | 0)) {
       continue label$71
      }
      break label$71;
     };
    }
    $691($4_1 | 0, $13_1 + 208 | 0 | 0, $5_1 | 0, $16_1 | 0, $13_1 + 32 | 0 | 0);
    label$72 : {
     if (($2_1 | 0) < (4 | 0)) {
      break label$72
     }
     $1_1 = $13_1 + 32 | 0;
     $3_1 = 0;
     label$73 : while (1) {
      $16_1 = HEAP32[$1_1 >> 2] | 0;
      $4_1 = ($13_1 + 112 | 0) + Math_imul($16_1, 12) | 0;
      $23_1 = Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) + Math_fround(HEAPF32[$0_1 >> 2]));
      HEAPF32[($13_1 + 64 | 0) >> 2] = $23_1;
      $24_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]));
      HEAPF32[($13_1 + 68 | 0) >> 2] = $24_1;
      $15_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]));
      HEAPF32[($13_1 + 72 | 0) >> 2] = $15_1;
      HEAP32[($13_1 + 28 | 0) >> 2] = 0;
      $17_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
      HEAPF32[($13_1 + 24 | 0) >> 2] = Math_fround(-$17_1);
      $18_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
      HEAPF32[($13_1 + 20 | 0) >> 2] = Math_fround(-$18_1);
      $34_1 = Math_fround(HEAPF32[$6_1 >> 2]);
      HEAPF32[($13_1 + 16 | 0) >> 2] = Math_fround(-$34_1);
      HEAP32[($13_1 + 12 | 0) >> 2] = 0;
      $31_1 = Math_fround(HEAPF32[(($13_1 + 80 | 0) + ($16_1 << 2 | 0) | 0) >> 2]);
      HEAPF32[($13_1 + 8 | 0) >> 2] = Math_fround($15_1 - Math_fround($17_1 * $31_1));
      HEAPF32[($13_1 + 4 | 0) >> 2] = Math_fround($24_1 - Math_fround($18_1 * $31_1));
      HEAPF32[$13_1 >> 2] = Math_fround($23_1 - Math_fround($34_1 * $31_1));
      FUNCTION_TABLE[HEAP32[((HEAP32[$12_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($12_1, $13_1 + 16 | 0, $13_1, Math_fround(-$31_1));
      $1_1 = $1_1 + 4 | 0;
      $3_1 = $3_1 + 1 | 0;
      if ($3_1 >>> 0 < $5_1 >>> 0) {
       continue label$73
      }
      break label$65;
     };
    }
    $1_1 = $13_1 + 32 | 0;
    $3_1 = 0;
    label$74 : while (1) {
     $16_1 = HEAP32[$1_1 >> 2] | 0;
     $4_1 = ($13_1 + 112 | 0) + Math_imul($16_1, 12) | 0;
     HEAPF32[($13_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) + Math_fround(HEAPF32[$0_1 >> 2]));
     HEAPF32[($13_1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]));
     HEAPF32[($13_1 + 72 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]));
     HEAP32[($13_1 + 28 | 0) >> 2] = 0;
     HEAPF32[($13_1 + 24 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]));
     HEAPF32[($13_1 + 20 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]));
     HEAPF32[($13_1 + 16 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[$6_1 >> 2]));
     FUNCTION_TABLE[HEAP32[((HEAP32[$12_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($12_1, $13_1 + 16 | 0, $13_1 + 64 | 0, Math_fround(-Math_fround(HEAPF32[(($13_1 + 80 | 0) + ($16_1 << 2 | 0) | 0) >> 2])));
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     if ($3_1 >>> 0 < $5_1 >>> 0) {
      continue label$74
     }
     break label$74;
    };
   }
   HEAP32[$8_1 >> 2] = $2_1;
  }
  global$0 = $13_1 + 368 | 0;
  return $5_1 | 0;
 }
 
 function $693($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $8_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $7_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $24_1 = 0, $28_1 = 0, $31_1 = 0, $35_1 = 0, $58_1 = 0;
  $5_1 = global$0 - 160 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 112 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 64 | 0) >> 2] = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  $24_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[($5_1 + 116 | 0) >> 2] = $24_1;
  HEAP32[($5_1 + 120 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 68 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 68 | 0) >> 2] = $28_1;
  HEAP32[($5_1 + 72 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
  $31_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[($5_1 + 128 | 0) >> 2] = $31_1;
  HEAP32[($5_1 + 132 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 80 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 80 | 0) >> 2] = $35_1;
  HEAP32[($5_1 + 84 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($5_1 + 136 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
  HEAP32[($5_1 + 88 | 0) >> 2] = HEAP32[($1_1 + 88 | 0) >> 2] | 0;
  HEAP32[($5_1 + 144 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
  HEAP32[($5_1 + 96 | 0) >> 2] = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
  HEAP32[($5_1 + 100 | 0) >> 2] = HEAP32[($1_1 + 100 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1 + 36 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $58_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[($5_1 + 148 | 0) >> 2] = $58_1;
  HEAP32[($5_1 + 152 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($5_1 + 104 | 0) >> 2] = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
  $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $7_1 = Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2]);
  $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($6_1));
  $11_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($6_1));
  $12_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($6_1));
  HEAP32[($5_1 + 36 | 0) >> 2] = 0;
  $8_1 = Math_fround($8_1 + $11_1);
  HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround($8_1 + $8_1);
  $8_1 = Math_fround($9_1 + $10_1);
  HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround($8_1 + $8_1);
  $7_1 = Math_fround($7_1 + $12_1);
  HEAPF32[($5_1 + 32 | 0) >> 2] = Math_fround($7_1 + $7_1);
  $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $7_1 = Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2]);
  $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($6_1));
  $11_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($6_1));
  $12_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($6_1));
  HEAP32[($5_1 + 20 | 0) >> 2] = 0;
  $8_1 = Math_fround($8_1 + $11_1);
  HEAPF32[($5_1 + 12 | 0) >> 2] = Math_fround($8_1 + $8_1);
  $8_1 = Math_fround($9_1 + $10_1);
  HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround($8_1 + $8_1);
  $7_1 = Math_fround($7_1 + $12_1);
  HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround($7_1 + $7_1);
  $692($1_1 + 48 | 0 | 0, $5_1 + 112 | 0 | 0, $5_1 + 24 | 0 | 0, $1_1 + 112 | 0 | 0, $5_1 + 64 | 0 | 0, $5_1 + 8 | 0 | 0, $5_1 + 48 | 0 | 0, $5_1 + 44 | 0 | 0, $5_1 + 40 | 0 | 0, 4 | 0, $5_1 | 0, $5_1 | 0, $2_1 | 0) | 0;
  global$0 = $5_1 + 160 | 0;
 }
 
 function $694($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $695($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $72($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 8 | 0) >> 0] = 0;
  HEAP32[$0_1 >> 2] = 17516;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($1_1, HEAP32[($3_1 + 8 | 0) >> 2] | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($1_1, HEAP32[($3_1 + 8 | 0) >> 2] | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP8[($0_1 + 8 | 0) >> 0] = 1;
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  }
  return $0_1 | 0;
 }
 
 function $696($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 17516;
  label$1 : {
   if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $1_1);
  }
  $73($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $697($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 17516;
  label$1 : {
   if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $1_1);
  }
  $73($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $698($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $32_1 = 0, $8_1 = 0, $8$hi = 0, $40_1 = 0, $9_1 = 0, $9$hi = 0, $48_1 = 0, $10_1 = 0, $10$hi = 0, $56_1 = 0, $65_1 = 0, $72_1 = 0, $75_1 = 0, $79_1 = 0, $84_1 = 0, $89_1 = 0, $93_1 = 0, $97_1 = 0, $102_1 = 0;
  $5_1 = global$0 - 160 | 0;
  global$0 = $5_1;
  label$1 : {
   $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$6_1) {
    break label$1
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $6_1;
   $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 152 | 0) >> 2] = 1566444395;
   $1_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $1_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $32_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 24 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $32_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$1;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $40_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 24 | 0) + 24 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $40_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $9_1 = i64toi32_i32$1;
   $9$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $48_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 24 | 0) + 40 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $48_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $56_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($5_1 + 24 | 0) + 56 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $56_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$0 = $5_1;
   HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $8_1;
   HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $9$hi;
   HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = $9_1;
   HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] = $10_1;
   HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $65_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1;
   HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = $65_1;
   HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
   $1_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = $1_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $72_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1 + 96 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $72_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $75_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1;
   HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] = $75_1;
   HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $79_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1 + 104 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $79_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $84_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1 + 112 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $84_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 40 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $89_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1 + 128 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $89_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   $93_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1 + 120 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $93_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $97_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1 + 136 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $97_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $102_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1 + 144 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $102_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $693($690($5_1 + 8 | 0 | 0, $7_1 | 0, $6_1 | 0) | 0 | 0, $5_1 + 24 | 0 | 0, $4_1 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0, 0 | 0);
   if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   if (!(HEAP32[($1_1 + 780 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    $2_1 = HEAP32[($1_1 + 772 | 0) >> 2] | 0;
    $0_1 = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    if (($2_1 | 0) == ($0_1 | 0)) {
     break label$2
    }
    $219($1_1 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0, $0_1 + 4 | 0 | 0);
    break label$1;
   }
   $219($1_1 | 0, $2_1 + 4 | 0 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  }
  global$0 = $5_1 + 160 | 0;
 }
 
 function $699($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return Math_fround(Math_fround(1.0));
 }
 
 function $700($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($3_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $4_1 = $3_1 ? $3_1 << 1 | 0 : 1;
    if (($3_1 | 0) >= ($4_1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($4_1) {
       break label$4
      }
      $5_1 = 0;
      break label$3;
     }
     $5_1 = $79($4_1 << 2 | 0 | 0, 16 | 0) | 0;
     $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    }
    label$5 : {
     if (($3_1 | 0) < (1 | 0)) {
      break label$5
     }
     $2_1 = 0;
     $6_1 = $3_1;
     label$6 : while (1) {
      HEAP32[($5_1 + $2_1 | 0) >> 2] = HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
      $2_1 = $2_1 + 4 | 0;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$7
     }
     label$8 : {
      if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
       break label$8
      }
      $80($2_1 | 0);
      $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    }
    HEAP32[($1_1 + 12 | 0) >> 2] = $5_1;
    HEAP8[($1_1 + 16 | 0) >> 0] = 1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
   HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
 }
 
 function $701($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $69($0_1 | 0, $2_1 | 0) | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $7_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $6_1;
  HEAP8[($0_1 + 16 | 0) >> 0] = $5_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 8 | 0) >> 0] = 0;
  HEAP32[$0_1 >> 2] = 17588;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $6_1 = $5_1 ? $4_1 : $3_1;
   $5_1 = $5_1 ? $3_1 : $4_1;
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($1_1, HEAP32[($6_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($1_1, HEAP32[($6_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
   HEAP8[($0_1 + 8 | 0) >> 0] = 1;
   HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  }
  return $0_1 | 0;
 }
 
 function $702($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 17588;
  label$1 : {
   if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $1_1);
  }
  return $0_1 | 0;
 }
 
 function $703($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  HEAP32[$0_1 >> 2] = 17588;
  label$1 : {
   if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($2_1, $1_1);
  }
  $37($0_1 | 0);
 }
 
 function $704($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $9_1 = 0, $36_1 = Math_fround(0), $6_1 = 0, $37_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $39_1 = Math_fround(0), $16_1 = Math_fround(0), $38_1 = Math_fround(0), $41_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $45_1 = Math_fround(0), $43_1 = Math_fround(0), $26_1 = Math_fround(0), $30_1 = Math_fround(0), $49_1 = Math_fround(0), $7_1 = 0, $44_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $8_1 = 0, $40_1 = Math_fround(0), $42_1 = Math_fround(0), $46_1 = Math_fround(0), $47_1 = Math_fround(0), $48_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $15_1 = Math_fround(0), $14_1 = Math_fround(0), $265_1 = Math_fround(0), $276_1 = Math_fround(0), $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54_1 = Math_fround(0);
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  $7_1 = HEAPU8[($0_1 + 16 | 0) >> 0] | 0;
  $8_1 = $7_1 ? $3_1 : $2_1;
  $9_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  $10_1 = Math_fround(HEAPF32[($9_1 + 56 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($9_1 + 48 | 0) >> 2]);
  $7_1 = $7_1 ? $2_1 : $3_1;
  $3_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
  $13_1 = Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]);
  $8_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
  $16_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $21_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
  $2_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
  $22_1 = Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[($9_1 + 40 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($9_1 + 32 | 0) >> 2]);
  $25_1 = Math_fround(HEAPF32[($9_1 + 36 | 0) >> 2]);
  $26_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
  $27_1 = Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]);
  $28_1 = Math_fround(HEAPF32[$9_1 >> 2]);
  $29_1 = Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]);
  $30_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
  $31_1 = Math_fround(HEAPF32[($9_1 + 24 | 0) >> 2]);
  $32_1 = Math_fround(HEAPF32[($9_1 + 16 | 0) >> 2]);
  $33_1 = Math_fround(HEAPF32[($9_1 + 20 | 0) >> 2]);
  $34_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
  $35_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $36_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $37_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  HEAP32[($6_1 + 28 | 0) >> 2] = 0;
  $38_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($36_1 * $36_1) + Math_fround($37_1 * $37_1)) + Math_fround($35_1 * $35_1)) + Math_fround($34_1 * $34_1)));
  $39_1 = Math_fround($35_1 * $38_1);
  $40_1 = Math_fround($36_1 * $39_1);
  $41_1 = Math_fround($37_1 * $38_1);
  $42_1 = Math_fround($34_1 * $41_1);
  $43_1 = Math_fround($40_1 + $42_1);
  $44_1 = Math_fround($37_1 * $39_1);
  $45_1 = Math_fround($36_1 * $38_1);
  $46_1 = Math_fround($34_1 * $45_1);
  $38_1 = Math_fround($44_1 - $46_1);
  $47_1 = Math_fround($36_1 * $45_1);
  $48_1 = Math_fround($37_1 * $41_1);
  $37_1 = Math_fround(Math_fround(1.0) - Math_fround($47_1 + $48_1));
  $45_1 = Math_fround(Math_fround(Math_fround($24_1 * $43_1) + Math_fround($25_1 * $38_1)) + Math_fround($23_1 * $37_1));
  $49_1 = Math_fround(Math_fround(Math_fround($28_1 * $43_1) + Math_fround($29_1 * $38_1)) + Math_fround($27_1 * $37_1));
  $37_1 = Math_fround(Math_fround(Math_fround($32_1 * $43_1) + Math_fround($33_1 * $38_1)) + Math_fround($31_1 * $37_1));
  $38_1 = Math_fround(-Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]));
  $3_1 = $2_1 + 56 | 0;
  $43_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $265_1 = Math_fround(Math_fround(Math_fround(Math_fround($19_1 * $45_1) + Math_fround(Math_fround($20_1 * $49_1) + Math_fround($21_1 * $37_1))) * $38_1) - Math_fround(Math_fround(Math_fround($22_1 * $45_1) + Math_fround(Math_fround($26_1 * $49_1) + Math_fround($30_1 * $37_1))) * $43_1));
  $276_1 = Math_fround(Math_fround($16_1 * $45_1) + Math_fround(Math_fround($17_1 * $49_1) + Math_fround($18_1 * $37_1)));
  $1_1 = $2_1 + 60 | 0;
  $37_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  HEAPF32[($6_1 + 24 | 0) >> 2] = Math_fround($265_1 - Math_fround($276_1 * $37_1));
  $45_1 = Math_fround($44_1 + $46_1);
  $41_1 = Math_fround($36_1 * $41_1);
  $49_1 = Math_fround($34_1 * $39_1);
  $36_1 = Math_fround($41_1 - $49_1);
  $44_1 = Math_fround($35_1 * $39_1);
  $34_1 = Math_fround(Math_fround(1.0) - Math_fround($47_1 + $44_1));
  $35_1 = Math_fround(Math_fround($23_1 * $45_1) + Math_fround(Math_fround($24_1 * $36_1) + Math_fround($25_1 * $34_1)));
  $39_1 = Math_fround(Math_fround($27_1 * $45_1) + Math_fround(Math_fround($28_1 * $36_1) + Math_fround($29_1 * $34_1)));
  $36_1 = Math_fround(Math_fround($31_1 * $45_1) + Math_fround(Math_fround($32_1 * $36_1) + Math_fround($33_1 * $34_1)));
  HEAPF32[($6_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($19_1 * $35_1) + Math_fround(Math_fround($20_1 * $39_1) + Math_fround($21_1 * $36_1))) * $38_1) - Math_fround($43_1 * Math_fround(Math_fround($22_1 * $35_1) + Math_fround(Math_fround($26_1 * $39_1) + Math_fround($30_1 * $36_1))))) - Math_fround($37_1 * Math_fround(Math_fround($16_1 * $35_1) + Math_fround(Math_fround($17_1 * $39_1) + Math_fround($18_1 * $36_1)))));
  $36_1 = Math_fround($40_1 - $42_1);
  $34_1 = Math_fround($41_1 + $49_1);
  $35_1 = Math_fround(Math_fround(1.0) - Math_fround($48_1 + $44_1));
  $39_1 = Math_fround(Math_fround($23_1 * $36_1) + Math_fround(Math_fround($25_1 * $34_1) + Math_fround($24_1 * $35_1)));
  $41_1 = Math_fround(Math_fround($27_1 * $36_1) + Math_fround(Math_fround($29_1 * $34_1) + Math_fround($28_1 * $35_1)));
  $36_1 = Math_fround(Math_fround($31_1 * $36_1) + Math_fround(Math_fround($33_1 * $34_1) + Math_fround($32_1 * $35_1)));
  HEAPF32[($6_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($19_1 * $39_1) + Math_fround(Math_fround($20_1 * $41_1) + Math_fround($21_1 * $36_1))) * $38_1) - Math_fround($43_1 * Math_fround(Math_fround($22_1 * $39_1) + Math_fround(Math_fround($26_1 * $41_1) + Math_fround($30_1 * $36_1))))) - Math_fround($37_1 * Math_fround(Math_fround($16_1 * $39_1) + Math_fround(Math_fround($17_1 * $41_1) + Math_fround($18_1 * $36_1)))));
  FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($6_1 + 32 | 0, $8_1, $6_1 + 16 | 0);
  $9_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
  $49_1 = Math_fround(HEAPF32[($9_1 + 48 | 0) >> 2]);
  $40_1 = Math_fround(HEAPF32[($9_1 + 32 | 0) >> 2]);
  $42_1 = Math_fround(HEAPF32[($9_1 + 16 | 0) >> 2]);
  $44_1 = Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]);
  $46_1 = Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]);
  $47_1 = Math_fround(HEAPF32[$9_1 >> 2]);
  $48_1 = Math_fround(HEAPF32[($9_1 + 56 | 0) >> 2]);
  $50_1 = Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]);
  $51_1 = Math_fround(HEAPF32[($9_1 + 40 | 0) >> 2]);
  $52_1 = Math_fround(HEAPF32[($9_1 + 36 | 0) >> 2]);
  $53_1 = Math_fround(HEAPF32[($9_1 + 24 | 0) >> 2]);
  $54_1 = Math_fround(HEAPF32[($9_1 + 20 | 0) >> 2]);
  $43_1 = Math_fround(HEAPF32[($2_1 + 68 | 0) >> 2]);
  $39_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $38_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
  $41_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $36_1 = Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2]);
  $34_1 = Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2]);
  $37_1 = Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]);
  $45_1 = Math_fround($217(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0));
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   $35_1 = Math_fround(-$14_1);
   $17_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $17_1) + Math_fround($11_1 * $18_1)) + Math_fround($10_1 * $16_1)) + Math_fround(Math_fround(Math_fround($17_1 * $35_1) - Math_fround($18_1 * $15_1)) - Math_fround($16_1 * $13_1))) + Math_fround(Math_fround(Math_fround($34_1 * Math_fround(Math_fround(Math_fround($28_1 * $17_1) + Math_fround($32_1 * $18_1)) + Math_fround($24_1 * $16_1))) + Math_fround($37_1 * Math_fround(Math_fround(Math_fround($29_1 * $17_1) + Math_fround($33_1 * $18_1)) + Math_fround($25_1 * $16_1)))) + Math_fround($36_1 * Math_fround(Math_fround(Math_fround($27_1 * $17_1) + Math_fround($31_1 * $18_1)) + Math_fround($23_1 * $16_1)))));
   $18_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $20_1) + Math_fround($11_1 * $21_1)) + Math_fround($10_1 * $19_1)) + Math_fround(Math_fround(Math_fround($20_1 * $35_1) - Math_fround($21_1 * $15_1)) - Math_fround($19_1 * $13_1))) + Math_fround(Math_fround(Math_fround($34_1 * Math_fround(Math_fround(Math_fround($28_1 * $20_1) + Math_fround($32_1 * $21_1)) + Math_fround($24_1 * $19_1))) + Math_fround($37_1 * Math_fround(Math_fround(Math_fround($29_1 * $20_1) + Math_fround($33_1 * $21_1)) + Math_fround($25_1 * $19_1)))) + Math_fround($36_1 * Math_fround(Math_fround(Math_fround($27_1 * $20_1) + Math_fround($31_1 * $21_1)) + Math_fround($23_1 * $19_1)))));
   $19_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $26_1) + Math_fround($11_1 * $30_1)) + Math_fround($10_1 * $22_1)) + Math_fround(Math_fround(Math_fround($26_1 * $35_1) - Math_fround($30_1 * $15_1)) - Math_fround($22_1 * $13_1))) + Math_fround(Math_fround(Math_fround($34_1 * Math_fround(Math_fround(Math_fround($28_1 * $26_1) + Math_fround($32_1 * $30_1)) + Math_fround($24_1 * $22_1))) + Math_fround($37_1 * Math_fround(Math_fround(Math_fround($29_1 * $26_1) + Math_fround($33_1 * $30_1)) + Math_fround($25_1 * $22_1)))) + Math_fround($36_1 * Math_fround(Math_fround(Math_fround($27_1 * $26_1) + Math_fround($31_1 * $30_1)) + Math_fround($23_1 * $22_1)))));
   $16_1 = Math_fround(Math_fround(Math_fround($39_1 * $17_1) + Math_fround(Math_fround($38_1 * $18_1) + Math_fround($41_1 * $19_1))) - $43_1);
   if ($16_1 < $45_1 ^ 1 | 0) {
    break label$1
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = 0;
   $9_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
   $20_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[($2_1 + 60 | 0) >> 2]);
   HEAPF32[($6_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$9_1 >> 2]) * $20_1) + Math_fround(Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]) * $21_1)) + Math_fround(Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]) * $22_1));
   HEAPF32[($6_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * Math_fround(HEAPF32[($9_1 + 32 | 0) >> 2])) + Math_fround($21_1 * Math_fround(HEAPF32[($9_1 + 36 | 0) >> 2]))) + Math_fround($22_1 * Math_fround(HEAPF32[($9_1 + 40 | 0) >> 2])));
   HEAPF32[($6_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * Math_fround(HEAPF32[($9_1 + 16 | 0) >> 2])) + Math_fround($21_1 * Math_fround(HEAPF32[($9_1 + 20 | 0) >> 2]))) + Math_fround($22_1 * Math_fround(HEAPF32[($9_1 + 24 | 0) >> 2])));
   HEAP32[($6_1 + 12 | 0) >> 2] = 0;
   $18_1 = Math_fround($18_1 - Math_fround($38_1 * $16_1));
   $19_1 = Math_fround($19_1 - Math_fround($41_1 * $16_1));
   $17_1 = Math_fround($17_1 - Math_fround($39_1 * $16_1));
   HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($18_1 * $40_1) + Math_fround($19_1 * $52_1)) + Math_fround($17_1 * $51_1)) + $48_1);
   HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($18_1 * $42_1) + Math_fround($19_1 * $54_1)) + Math_fround($17_1 * $53_1)) + $50_1);
   HEAPF32[$6_1 >> 2] = Math_fround(Math_fround(Math_fround($44_1 * $17_1) + Math_fround(Math_fround($47_1 * $18_1) + Math_fround($46_1 * $19_1))) + $49_1);
   FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($5_1, $6_1 + 16 | 0, $6_1, $16_1);
  }
  global$0 = $6_1 + 48 | 0;
 }
 
 function $705($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $8_1 = 0, $23_1 = Math_fround(0), $25_1 = Math_fround(0), $24_1 = Math_fround(0), $26_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $13_1 = 0, $28_1 = Math_fround(0), $33_1 = Math_fround(0), $27_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $7_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $32_1 = Math_fround(0), $34_1 = Math_fround(0), $36_1 = Math_fround(0), $38_1 = Math_fround(0), $12_1 = 0, $14_1 = Math_fround(0), $16_1 = Math_fround(0), $35_1 = Math_fround(0), $37_1 = Math_fround(0), $39_1 = 0, $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $15_1 = Math_fround(0), $257_1 = Math_fround(0), $272_1 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47_1 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0), $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54_1 = Math_fround(0), $55_1 = Math_fround(0), $56_1 = Math_fround(0), $631_1 = Math_fround(0), $634_1 = Math_fround(0);
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  label$1 : {
   if (!(HEAP32[($0_1 + 12 | 0) >> 2] | 0)) {
    break label$1
   }
   $6_1 = HEAPU8[($0_1 + 16 | 0) >> 0] | 0;
   $7_1 = $6_1 ? $2_1 : $1_1;
   $8_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
   $9_1 = Math_fround(HEAPF32[($8_1 + 56 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($8_1 + 52 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]);
   $12_1 = $6_1 ? $1_1 : $2_1;
   $13_1 = HEAP32[($12_1 + 12 | 0) >> 2] | 0;
   $14_1 = Math_fround(HEAPF32[($13_1 + 56 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($13_1 + 48 | 0) >> 2]);
   $16_1 = Math_fround(HEAPF32[($13_1 + 52 | 0) >> 2]);
   $7_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   $17_1 = Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[$8_1 >> 2]);
   $20_1 = Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($13_1 + 40 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[($13_1 + 8 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[($13_1 + 32 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[($13_1 + 16 | 0) >> 2]);
   $28_1 = Math_fround(HEAPF32[$13_1 >> 2]);
   $6_1 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
   $29_1 = Math_fround(HEAPF32[($13_1 + 36 | 0) >> 2]);
   $30_1 = Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]);
   $31_1 = Math_fround(HEAPF32[($13_1 + 20 | 0) >> 2]);
   $32_1 = Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]);
   $33_1 = Math_fround(HEAPF32[($13_1 + 4 | 0) >> 2]);
   $34_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
   HEAP32[($5_1 + 28 | 0) >> 2] = 0;
   $35_1 = Math_fround(Math_fround(Math_fround($34_1 * $28_1) + Math_fround($32_1 * $27_1)) + Math_fround($30_1 * $26_1));
   $36_1 = Math_fround(-Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2]));
   $37_1 = Math_fround(Math_fround(Math_fround($34_1 * $33_1) + Math_fround($32_1 * $31_1)) + Math_fround($30_1 * $29_1));
   $13_1 = $6_1 + 56 | 0;
   $38_1 = Math_fround(HEAPF32[$13_1 >> 2]);
   $32_1 = Math_fround(Math_fround(Math_fround($34_1 * $25_1) + Math_fround($32_1 * $24_1)) + Math_fround($30_1 * $23_1));
   $39_1 = $6_1 + 60 | 0;
   $30_1 = Math_fround(HEAPF32[$39_1 >> 2]);
   HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($35_1 * $36_1) - Math_fround($37_1 * $38_1)) - Math_fround($32_1 * $30_1));
   $34_1 = Math_fround(Math_fround(Math_fround($22_1 * $28_1) + Math_fround($21_1 * $27_1)) + Math_fround($20_1 * $26_1));
   $40_1 = Math_fround(Math_fround(Math_fround($22_1 * $33_1) + Math_fround($21_1 * $31_1)) + Math_fround($20_1 * $29_1));
   $41_1 = Math_fround(Math_fround(Math_fround($22_1 * $25_1) + Math_fround($21_1 * $24_1)) + Math_fround($20_1 * $23_1));
   HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($34_1 * $36_1) - Math_fround($38_1 * $40_1)) - Math_fround($30_1 * $41_1));
   $42_1 = Math_fround(Math_fround(Math_fround($19_1 * $28_1) + Math_fround($18_1 * $27_1)) + Math_fround($17_1 * $26_1));
   $257_1 = Math_fround($42_1 * $36_1);
   $36_1 = Math_fround(Math_fround(Math_fround($19_1 * $33_1) + Math_fround($18_1 * $31_1)) + Math_fround($17_1 * $29_1));
   $272_1 = Math_fround($257_1 - Math_fround($38_1 * $36_1));
   $38_1 = Math_fround(Math_fround(Math_fround($19_1 * $25_1) + Math_fround($18_1 * $24_1)) + Math_fround($17_1 * $23_1));
   HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround($272_1 - Math_fround($30_1 * $38_1));
   FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($5_1 + 32 | 0, $7_1, $5_1 + 16 | 0);
   $8_1 = HEAP32[($12_1 + 12 | 0) >> 2] | 0;
   $43_1 = Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]);
   $44_1 = Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2]);
   $45_1 = Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2]);
   $46_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
   $47_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
   $48_1 = Math_fround(HEAPF32[$8_1 >> 2]);
   $49_1 = Math_fround(HEAPF32[($8_1 + 56 | 0) >> 2]);
   $50_1 = Math_fround(HEAPF32[($8_1 + 52 | 0) >> 2]);
   $51_1 = Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2]);
   $52_1 = Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]);
   $53_1 = Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2]);
   $54_1 = Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]);
   $55_1 = Math_fround(HEAPF32[($6_1 + 68 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[$39_1 >> 2]);
   $22_1 = Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2]);
   $30_1 = Math_fround(HEAPF32[$13_1 >> 2]);
   $17_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
   $56_1 = Math_fround($217(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0));
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   label$2 : {
    $20_1 = Math_fround(-$15_1);
    $24_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($11_1 * $25_1) + Math_fround($10_1 * $24_1)) + Math_fround($9_1 * $23_1)) + Math_fround(Math_fround(Math_fround($25_1 * $20_1) - Math_fround($24_1 * $16_1)) - Math_fround($23_1 * $14_1))) + Math_fround(Math_fround(Math_fround($38_1 * $18_1) + Math_fround($41_1 * $19_1)) + Math_fround($32_1 * $17_1)));
    $25_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($11_1 * $28_1) + Math_fround($10_1 * $27_1)) + Math_fround($9_1 * $26_1)) + Math_fround(Math_fround(Math_fround($28_1 * $20_1) - Math_fround($27_1 * $16_1)) - Math_fround($26_1 * $14_1))) + Math_fround(Math_fround(Math_fround($42_1 * $18_1) + Math_fround($34_1 * $19_1)) + Math_fround($35_1 * $17_1)));
    $26_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($11_1 * $33_1) + Math_fround($10_1 * $31_1)) + Math_fround($9_1 * $29_1)) + Math_fround(Math_fround(Math_fround($33_1 * $20_1) - Math_fround($31_1 * $16_1)) - Math_fround($29_1 * $14_1))) + Math_fround(Math_fround(Math_fround($36_1 * $18_1) + Math_fround($40_1 * $19_1)) + Math_fround($37_1 * $17_1)));
    $23_1 = Math_fround(Math_fround(Math_fround($21_1 * $24_1) + Math_fround(Math_fround($22_1 * $25_1) + Math_fround($30_1 * $26_1))) - $55_1);
    if ($23_1 < $56_1 ^ 1 | 0) {
     break label$2
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = 0;
    $8_1 = HEAP32[($12_1 + 12 | 0) >> 2] | 0;
    $27_1 = Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2]);
    $28_1 = Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]);
    $29_1 = Math_fround(HEAPF32[($6_1 + 60 | 0) >> 2]);
    HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$8_1 >> 2]) * $27_1) + Math_fround(Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]) * $28_1)) + Math_fround(Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]) * $29_1));
    HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($27_1 * Math_fround(HEAPF32[($8_1 + 32 | 0) >> 2])) + Math_fround($28_1 * Math_fround(HEAPF32[($8_1 + 36 | 0) >> 2]))) + Math_fround($29_1 * Math_fround(HEAPF32[($8_1 + 40 | 0) >> 2])));
    HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($27_1 * Math_fround(HEAPF32[($8_1 + 16 | 0) >> 2])) + Math_fround($28_1 * Math_fround(HEAPF32[($8_1 + 20 | 0) >> 2]))) + Math_fround($29_1 * Math_fround(HEAPF32[($8_1 + 24 | 0) >> 2])));
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    $25_1 = Math_fround($25_1 - Math_fround($22_1 * $23_1));
    $26_1 = Math_fround($26_1 - Math_fround($30_1 * $23_1));
    $24_1 = Math_fround($24_1 - Math_fround($21_1 * $23_1));
    HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($25_1 * $44_1) + Math_fround($26_1 * $52_1)) + Math_fround($24_1 * $51_1)) + $49_1);
    HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($25_1 * $45_1) + Math_fround($26_1 * $54_1)) + Math_fround($24_1 * $53_1)) + $50_1);
    HEAPF32[$5_1 >> 2] = Math_fround(Math_fround(Math_fround($46_1 * $24_1) + Math_fround(Math_fround($48_1 * $25_1) + Math_fround($47_1 * $26_1))) + $43_1);
    FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($4_1, $5_1 + 16 | 0, $5_1, $23_1);
   }
   label$3 : {
    if ((HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0) > (6 | 0)) {
     break label$3
    }
    if ((HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 780 | 0) >> 2] | 0 | 0) >= (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      $24_1 = Math_fround(HEAPF32[($6_1 + 60 | 0) >> 2]);
      if (Math_fround(Math_abs($24_1)) > Math_fround(.7071067690849304) ^ 1 | 0) {
       break label$5
      }
      $23_1 = Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]);
      $25_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($24_1 * $24_1) + Math_fround($23_1 * $23_1)))));
      $23_1 = Math_fround($23_1 * $25_1);
      $24_1 = Math_fround(-Math_fround($24_1 * $25_1));
      $25_1 = Math_fround(0.0);
      break label$4;
     }
     $23_1 = Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2]);
     $631_1 = $23_1;
     $634_1 = Math_fround($23_1 * $23_1);
     $23_1 = Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]);
     $25_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($634_1 + Math_fround($23_1 * $23_1)))));
     $24_1 = Math_fround($631_1 * $25_1);
     $25_1 = Math_fround(-Math_fround($23_1 * $25_1));
     $23_1 = Math_fround(0.0);
    }
    $26_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($7_1));
    $8_1 = 0;
    $26_1 = Math_fround(Math_fround(Math_min(Math_fround(Math_fround(HEAPF32[(0 + 2976 | 0) >> 2]) / $26_1), Math_fround(.39269909262657166))) * Math_fround(.5));
    $28_1 = Math_fround($496(Math_fround($26_1)));
    $13_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    $27_1 = Math_fround($497(Math_fround($26_1)));
    if (($13_1 | 0) < (1 | 0)) {
     break label$3
    }
    $26_1 = Math_fround($28_1 / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($25_1 * $25_1) + Math_fround($24_1 * $24_1)) + Math_fround($23_1 * $23_1)))));
    $28_1 = Math_fround($23_1 * $26_1);
    $29_1 = Math_fround($24_1 * $26_1);
    $31_1 = Math_fround($25_1 * $26_1);
    label$6 : while (1) {
     $25_1 = Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]);
     $24_1 = Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2]);
     $26_1 = Math_fround(HEAPF32[($6_1 + 60 | 0) >> 2]);
     $23_1 = Math_fround(Math_fround(Math_fround(Math_fround(6.2831854820251465) / Math_fround($13_1 | 0)) * Math_fround($8_1 | 0)) * Math_fround(.5));
     $33_1 = Math_fround($496(Math_fround($23_1)));
     $23_1 = Math_fround($497(Math_fround($23_1)));
     $33_1 = Math_fround($33_1 / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($24_1 * $24_1) + Math_fround($25_1 * $25_1)) + Math_fround($26_1 * $26_1)))));
     $24_1 = Math_fround($24_1 * $33_1);
     $25_1 = Math_fround($25_1 * $33_1);
     $26_1 = Math_fround($26_1 * $33_1);
     $33_1 = Math_fround(Math_fround(Math_fround(Math_fround($27_1 * $23_1) + Math_fround($31_1 * $24_1)) + Math_fround($29_1 * $25_1)) + Math_fround($28_1 * $26_1));
     $9_1 = Math_fround(Math_fround(Math_fround(Math_fround($31_1 * $23_1) - Math_fround($27_1 * $24_1)) - Math_fround($28_1 * $25_1)) + Math_fround($29_1 * $26_1));
     $10_1 = Math_fround(Math_fround(Math_fround(Math_fround($29_1 * $23_1) - Math_fround($27_1 * $25_1)) - Math_fround($31_1 * $26_1)) + Math_fround($28_1 * $24_1));
     $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($28_1 * $23_1) - Math_fround($27_1 * $26_1)) - Math_fround($29_1 * $24_1)) + Math_fround($31_1 * $25_1));
     HEAPF32[($5_1 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($23_1 * $33_1) - Math_fround($24_1 * $9_1)) - Math_fround($25_1 * $10_1)) - Math_fround($26_1 * $11_1));
     HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $9_1) + Math_fround(Math_fround($26_1 * $33_1) + Math_fround($23_1 * $11_1))) - Math_fround($24_1 * $10_1));
     HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($24_1 * $11_1) + Math_fround(Math_fround($23_1 * $10_1) + Math_fround($25_1 * $33_1))) - Math_fround($26_1 * $9_1));
     HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround($26_1 * $10_1) + Math_fround(Math_fround($24_1 * $33_1) + Math_fround($23_1 * $9_1))) - Math_fround($25_1 * $11_1));
     $704($0_1 | 0, $5_1 + 16 | 0 | 0, $1_1 | 0, $2_1 | 0, $5_1 | 0, $4_1 | 0);
     $8_1 = $8_1 + 1 | 0;
     $13_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
     if (($8_1 | 0) < ($13_1 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
    break label$1
   }
   if (!(HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + 780 | 0) >> 2] | 0)) {
    break label$1
   }
   $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   if (!(HEAP32[($6_1 + 780 | 0) >> 2] | 0)) {
    break label$1
   }
   label$7 : {
    $8_1 = HEAP32[($6_1 + 772 | 0) >> 2] | 0;
    $0_1 = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    if (($8_1 | 0) == ($0_1 | 0)) {
     break label$7
    }
    $219($6_1 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0, $0_1 + 4 | 0 | 0);
    break label$1;
   }
   $219($6_1 | 0, $8_1 + 4 | 0 | 0, (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  }
  global$0 = $5_1 + 48 | 0;
 }
 
 function $706($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return Math_fround(Math_fround(1.0));
 }
 
 function $707($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   if (!(HEAPU8[($0_1 + 8 | 0) >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($3_1 | 0) != (HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $4_1 = $3_1 ? $3_1 << 1 | 0 : 1;
    if (($3_1 | 0) >= ($4_1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($4_1) {
       break label$4
      }
      $5_1 = 0;
      break label$3;
     }
     $5_1 = $79($4_1 << 2 | 0 | 0, 16 | 0) | 0;
     $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    }
    label$5 : {
     if (($3_1 | 0) < (1 | 0)) {
      break label$5
     }
     $2_1 = 0;
     $6_1 = $3_1;
     label$6 : while (1) {
      HEAP32[($5_1 + $2_1 | 0) >> 2] = HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
      $2_1 = $2_1 + 4 | 0;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$7
     }
     label$8 : {
      if (!(HEAPU8[($1_1 + 16 | 0) >> 0] | 0)) {
       break label$8
      }
      $80($2_1 | 0);
      $3_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    }
    HEAP32[($1_1 + 12 | 0) >> 2] = $5_1;
    HEAP8[($1_1 + 16 | 0) >> 0] = 1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $4_1;
    $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
   HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
 }
 
 function $708($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, $4_1 = 0;
  HEAP32[$0_1 >> 2] = 17664;
  $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
  $3_1 = $79(4 | 0, 16 | 0) | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $3_1;
  HEAP32[$3_1 >> 2] = $2_1 ? 14800 : 15008;
  $2_1 = $79(20 | 0, 16 | 0) | 0;
  $589($2_1 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $2_1;
  $2_1 = $79(8 | 0, 16 | 0) | 0;
  HEAP32[$2_1 >> 2] = 17780;
  HEAP8[($2_1 + 4 | 0) >> 0] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $2_1;
  $2_1 = $79(8 | 0, 16 | 0) | 0;
  HEAP32[$2_1 >> 2] = 17864;
  HEAP8[($2_1 + 4 | 0) >> 0] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $2_1;
  $2_1 = $79(8 | 0, 16 | 0) | 0;
  HEAP32[$2_1 >> 2] = 17956;
  HEAP8[($2_1 + 4 | 0) >> 0] = 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  $2_1 = $79(8 | 0, 16 | 0) | 0;
  HEAP32[$2_1 >> 2] = 18036;
  HEAP8[($2_1 + 4 | 0) >> 0] = 0;
  HEAP32[($0_1 + 44 | 0) >> 2] = $2_1;
  $2_1 = $79(8 | 0, 16 | 0) | 0;
  HEAP32[$2_1 >> 2] = 18124;
  HEAP8[($2_1 + 4 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $2_1;
  $2_1 = $79(8 | 0, 16 | 0) | 0;
  HEAP32[$2_1 >> 2] = 18208;
  HEAP8[($2_1 + 4 | 0) >> 0] = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = $2_1;
  $2_1 = $79(8 | 0, 16 | 0) | 0;
  HEAP32[$2_1 >> 2] = 18276;
  HEAP8[($2_1 + 4 | 0) >> 0] = 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = $2_1;
  $2_1 = $79(8 | 0, 16 | 0) | 0;
  HEAP32[$2_1 >> 2] = 18360;
  HEAP8[($2_1 + 4 | 0) >> 0] = 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $2_1;
  $2_1 = $79(8 | 0, 16 | 0) | 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = $2_1;
  HEAP32[$2_1 >> 2] = 18360;
  HEAP8[($2_1 + 4 | 0) >> 0] = 1;
  $2_1 = $79(8 | 0, 16 | 0) | 0;
  HEAP32[$2_1 >> 2] = 18444;
  HEAP8[($2_1 + 4 | 0) >> 0] = 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = $2_1;
  $2_1 = $79(16 | 0, 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = 1;
  HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$2_1 >> 2] = 18520;
  HEAP8[($2_1 + 4 | 0) >> 0] = 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $2_1;
  $2_1 = $79(16 | 0, 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = 1;
  HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$2_1 >> 2] = 18520;
  HEAP32[($0_1 + 80 | 0) >> 2] = $2_1;
  HEAP8[($2_1 + 4 | 0) >> 0] = 1;
  $4_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
    HEAP8[($0_1 + 12 | 0) >> 0] = 0;
    break label$1;
   }
   HEAP8[($0_1 + 12 | 0) >> 0] = 1;
   $5_1 = $79(24 | 0, 16 | 0) | 0;
   HEAP32[($5_1 + 20 | 0) >> 2] = 0;
   HEAP32[$5_1 >> 2] = 804;
   $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
   $2_1 = $79(Math_imul($2_1, 804) | 0, 16 | 0) | 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
   $3_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
   HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
   label$3 : {
    label$4 : {
     $6_1 = $3_1 + -1 | 0;
     if ($6_1) {
      break label$4
     }
     $3_1 = $2_1;
     break label$3;
    }
    $7_1 = HEAP32[$5_1 >> 2] | 0;
    label$5 : while (1) {
     $3_1 = $2_1 + $7_1 | 0;
     HEAP32[$2_1 >> 2] = $3_1;
     $2_1 = $3_1;
     $6_1 = $6_1 + -1 | 0;
     if ($6_1) {
      continue label$5
     }
     break label$5;
    };
   }
   HEAP32[$3_1 >> 2] = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
  }
  label$6 : {
   $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$6
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = $2_1;
   HEAP8[($0_1 + 20 | 0) >> 0] = 0;
   return $0_1 | 0;
  }
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  $5_1 = $79(24 | 0, 16 | 0) | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = 0;
  $2_1 = ($4_1 | 0) > (80 | 0) ? $4_1 : 80;
  $2_1 = ($2_1 | 0) > (116 | 0) ? ($2_1 + 16 | 0) & -16 | 0 : 128;
  HEAP32[$5_1 >> 2] = $2_1;
  $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = $3_1;
  $2_1 = $79(Math_imul($3_1, $2_1) | 0, 16 | 0) | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  $3_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = $3_1;
  label$7 : {
   label$8 : {
    $6_1 = $3_1 + -1 | 0;
    if ($6_1) {
     break label$8
    }
    $3_1 = $2_1;
    break label$7;
   }
   $7_1 = HEAP32[$5_1 >> 2] | 0;
   label$9 : while (1) {
    $3_1 = $2_1 + $7_1 | 0;
    HEAP32[$2_1 >> 2] = $3_1;
    $2_1 = $3_1;
    $6_1 = $6_1 + -1 | 0;
    if ($6_1) {
     continue label$9
    }
    break label$9;
   };
  }
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $5_1;
  return $0_1 | 0;
 }
 
 function $709($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 17664;
  label$1 : {
   if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
    break label$1
   }
   $80(HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
   $80(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0);
  }
  label$2 : {
   if (!(HEAPU8[($0_1 + 12 | 0) >> 0] | 0)) {
    break label$2
   }
   $80(HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
   $80(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  }
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 84 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0);
  $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $710($0_1) {
  $0_1 = $0_1 | 0;
  $37($709($0_1 | 0) | 0 | 0);
 }
 
 function $711($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $3_1 = ($1_1 | 0) != (8 | 0);
   if ($3_1) {
    break label$1
   }
   if (($2_1 | 0) != (8 | 0)) {
    break label$1
   }
   return HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0;
  }
  label$2 : {
   if ($3_1) {
    break label$2
   }
   if (($2_1 | 0) != (1 | 0)) {
    break label$2
   }
   return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
  }
  label$3 : {
   if (($1_1 | 0) != (1 | 0)) {
    break label$3
   }
   if (($2_1 | 0) != (8 | 0)) {
    break label$3
   }
   return HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0;
  }
  label$4 : {
   if (($1_1 | 0) > (19 | 0)) {
    break label$4
   }
   if (($2_1 | 0) != (28 | 0)) {
    break label$4
   }
   return HEAP32[($0_1 + 84 | 0) >> 2] | 0 | 0;
  }
  label$5 : {
   if (($1_1 | 0) != (28 | 0)) {
    break label$5
   }
   if (($2_1 | 0) > (19 | 0)) {
    break label$5
   }
   return HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0;
  }
  label$6 : {
   label$7 : {
    if (($1_1 | 0) > (19 | 0)) {
     break label$7
    }
    label$8 : {
     if (($2_1 | 0) > (19 | 0)) {
      break label$8
     }
     return HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0;
    }
    if (($2_1 + -21 | 0) >>> 0 > 8 >>> 0) {
     break label$6
    }
    return HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0;
   }
   label$9 : {
    if (($2_1 | 0) > (19 | 0)) {
     break label$9
    }
    if (($1_1 + -21 | 0) >>> 0 > 8 >>> 0) {
     break label$9
    }
    return HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0;
   }
   if (($1_1 | 0) != (31 | 0)) {
    break label$6
   }
   label$10 : {
    if (($2_1 | 0) != (31 | 0)) {
     break label$10
    }
    return HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0;
   }
   return HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0;
  }
  label$11 : {
   if (($2_1 | 0) != (31 | 0)) {
    break label$11
   }
   return HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0;
  }
  return HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0;
 }
 
 function $712($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   $3_1 = ($1_1 | 0) != (8 | 0);
   if ($3_1) {
    break label$1
   }
   if (($2_1 | 0) != (8 | 0)) {
    break label$1
   }
   return HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0;
  }
  label$2 : {
   if ($3_1) {
    break label$2
   }
   if (($2_1 | 0) != (1 | 0)) {
    break label$2
   }
   return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
  }
  label$3 : {
   if (($1_1 | 0) != (1 | 0)) {
    break label$3
   }
   if (($2_1 | 0) != (8 | 0)) {
    break label$3
   }
   return HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0;
  }
  label$4 : {
   if ($2_1 | $1_1 | 0) {
    break label$4
   }
   return HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0;
  }
  label$5 : {
   if (($1_1 | 0) > (19 | 0)) {
    break label$5
   }
   if (($2_1 | 0) != (28 | 0)) {
    break label$5
   }
   return HEAP32[($0_1 + 84 | 0) >> 2] | 0 | 0;
  }
  label$6 : {
   if (($1_1 | 0) != (28 | 0)) {
    break label$6
   }
   if (($2_1 | 0) > (19 | 0)) {
    break label$6
   }
   return HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0;
  }
  label$7 : {
   label$8 : {
    if (($1_1 | 0) > (19 | 0)) {
     break label$8
    }
    label$9 : {
     if (($2_1 | 0) > (19 | 0)) {
      break label$9
     }
     return HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0;
    }
    if (($2_1 + -21 | 0) >>> 0 > 8 >>> 0) {
     break label$7
    }
    return HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0;
   }
   label$10 : {
    if (($2_1 | 0) > (19 | 0)) {
     break label$10
    }
    if (($1_1 + -21 | 0) >>> 0 > 8 >>> 0) {
     break label$10
    }
    return HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0;
   }
   if (($1_1 | 0) != (31 | 0)) {
    break label$7
   }
   label$11 : {
    if (($2_1 | 0) != (31 | 0)) {
     break label$11
    }
    return HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0;
   }
   return HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0;
  }
  label$12 : {
   if (($2_1 | 0) != (31 | 0)) {
    break label$12
   }
   return HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0;
  }
  return HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0;
 }
 
 function $713($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $714($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0;
 }
 
 function $715($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $716($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($4_1, 80) | 0;
  $621($4_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, 0 | 0) | 0;
  return $4_1 | 0;
 }
 
 function $717($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $718($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($4_1, 80) | 0;
  $621($4_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, 1 | 0) | 0;
  return $4_1 | 0;
 }
 
 function $719($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $720($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($4_1, 84) | 0;
  $635($4_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, 0 | 0) | 0;
  return $4_1 | 0;
 }
 
 function $721($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $722($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($4_1, 116) | 0;
  $657($4_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, 0 | 0) | 0;
  return $4_1 | 0;
 }
 
 function $723($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $724($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($4_1, 84) | 0;
  $635($4_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, 1 | 0) | 0;
  return $4_1 | 0;
 }
 
 function $725($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $726($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($4_1, 8) | 0;
  $666($4_1 | 0, $1_1 | 0) | 0;
  return $4_1 | 0;
 }
 
 function $727($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $728($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($4_1, 16) | 0;
  $671($4_1 | 0, 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  return $4_1 | 0;
 }
 
 function $729($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $730($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($4_1, 20) | 0;
  $682($4_1 | 0, HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, HEAPU8[($0_1 + 4 | 0) >> 0] | 0 | 0) | 0;
  return $4_1 | 0;
 }
 
 function $731($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $732($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($4_1, 16) | 0;
  $695($4_1 | 0, 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  return $4_1 | 0;
 }
 
 function $733($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $734($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($4_1, 28) | 0;
  $701($4_1 | 0, 0 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, HEAPU8[($0_1 + 4 | 0) >> 0] | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  return $4_1 | 0;
 }
 
 function $735($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $49_1 = 0;
  HEAP32[$0_1 >> 2] = 18600;
  HEAP32[($0_1 + 24 | 0) >> 2] = 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP8[($0_1 + 44 | 0) >> 0] = 1;
  $1_1 = $0_1 + 8 | 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  HEAP8[($0_1 + 64 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = $79(32 | 0, 16 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[$1_1 >> 2] | 0;
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $1_1 = 12;
   label$2 : while (1) {
    $4_1 = $2_1 + $1_1 | 0;
    $5_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $1_1 | 0;
    HEAP32[($4_1 + -12 | 0) >> 2] = HEAP32[($5_1 + -12 | 0) >> 2] | 0;
    i64toi32_i32$2 = $5_1 + -8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $49_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1 + -8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $49_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
    $1_1 = $1_1 + 16 | 0;
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = $2_1;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 2;
  $736($0_1 | 0);
  return $0_1 | 0;
 }
 
 function $736($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, $8_1 = 0, $1_1 = 0, $9_1 = 0, $72_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) >= ($2_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) < ($2_1 | 0)) {
      break label$3
     }
     $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
     break label$2;
    }
    label$4 : {
     label$5 : {
      if ($2_1) {
       break label$5
      }
      $3_1 = 0;
      $4_1 = $1_1;
      break label$4;
     }
     $3_1 = $79($2_1 << 2 | 0 | 0, 16 | 0) | 0;
     $4_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    }
    $5_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
    label$6 : {
     label$7 : {
      if (($4_1 | 0) < (1 | 0)) {
       break label$7
      }
      $6_1 = $3_1;
      $7_1 = $5_1;
      label$8 : while (1) {
       HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
       $6_1 = $6_1 + 4 | 0;
       $7_1 = $7_1 + 4 | 0;
       $4_1 = $4_1 + -1 | 0;
       if ($4_1) {
        continue label$8
       }
       break label$6;
      };
     }
     if ($5_1) {
      break label$6
     }
     HEAP32[($0_1 + 40 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 36 | 0) >> 2] = $2_1;
     HEAP8[($0_1 + 44 | 0) >> 0] = 1;
     break label$2;
    }
    label$9 : {
     if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
      break label$9
     }
     $80($5_1 | 0);
    }
    HEAP32[($0_1 + 40 | 0) >> 2] = $3_1;
    HEAP8[($0_1 + 44 | 0) >> 0] = 1;
    HEAP32[($0_1 + 36 | 0) >> 2] = $2_1;
   }
   $6_1 = $1_1 << 2 | 0;
   $72_1 = $3_1 + $6_1 | 0;
   $3_1 = $2_1 << 2 | 0;
   $17($72_1 | 0, 0 | 0, $3_1 - $6_1 | 0 | 0) | 0;
   HEAP32[($0_1 + 32 | 0) >> 2] = $2_1;
   label$10 : {
    $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (($5_1 | 0) >= ($2_1 | 0)) {
     break label$10
    }
    label$11 : {
     label$12 : {
      if ((HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) < ($2_1 | 0)) {
       break label$12
      }
      $8_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
      break label$11;
     }
     label$13 : {
      label$14 : {
       if ($2_1) {
        break label$14
       }
       $8_1 = 0;
       $4_1 = $5_1;
       break label$13;
      }
      $8_1 = $79($3_1 | 0, 16 | 0) | 0;
      $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     }
     $9_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
     label$15 : {
      label$16 : {
       if (($4_1 | 0) < (1 | 0)) {
        break label$16
       }
       $6_1 = $8_1;
       $7_1 = $9_1;
       label$17 : while (1) {
        HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
        $6_1 = $6_1 + 4 | 0;
        $7_1 = $7_1 + 4 | 0;
        $4_1 = $4_1 + -1 | 0;
        if ($4_1) {
         continue label$17
        }
        break label$15;
       };
      }
      if ($9_1) {
       break label$15
      }
      HEAP32[($0_1 + 60 | 0) >> 2] = $8_1;
      HEAP32[($0_1 + 56 | 0) >> 2] = $2_1;
      HEAP8[($0_1 + 64 | 0) >> 0] = 1;
      break label$11;
     }
     label$18 : {
      if (!(HEAPU8[($0_1 + 64 | 0) >> 0] | 0)) {
       break label$18
      }
      $80($9_1 | 0);
     }
     HEAP32[($0_1 + 60 | 0) >> 2] = $8_1;
     HEAP8[($0_1 + 64 | 0) >> 0] = 1;
     HEAP32[($0_1 + 56 | 0) >> 2] = $2_1;
    }
    $6_1 = $5_1 << 2 | 0;
    $17($8_1 + $6_1 | 0 | 0, 0 | 0, $3_1 - $6_1 | 0 | 0) | 0;
   }
   HEAP32[($0_1 + 52 | 0) >> 2] = $2_1;
   label$19 : {
    if (($2_1 | 0) < (1 | 0)) {
     break label$19
    }
    $17(HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, 255 | 0, $3_1 | 0) | 0;
    $17(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, 255 | 0, $3_1 | 0) | 0;
   }
   if (($1_1 | 0) < (1 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   $4_1 = 0;
   label$20 : while (1) {
    $2_1 = (HEAP32[((HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) << 16 | 0 | (HEAP32[((HEAP32[$6_1 >> 2] | 0) + 12 | 0) >> 2] | 0) | 0;
    $2_1 = $2_1 + (($2_1 << 15 | 0) ^ -1 | 0) | 0;
    $2_1 = Math_imul(($2_1 >>> 10 | 0) ^ $2_1 | 0, 9);
    $2_1 = ($2_1 >>> 6 | 0) ^ $2_1 | 0;
    $2_1 = $2_1 + (($2_1 << 11 | 0) ^ -1 | 0) | 0;
    $2_1 = $3_1 + (((($2_1 >>> 16 | 0) ^ $2_1 | 0) & ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -1 | 0) | 0) << 2 | 0) | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $4_1;
    $6_1 = $6_1 + 16 | 0;
    $7_1 = $7_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($1_1 | 0) != ($4_1 | 0)) {
     continue label$20
    }
    break label$20;
   };
  }
 }
 
 function $737($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 18600;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 64 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 64 | 0) >> 0] = 1;
  label$3 : {
   $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 44 | 0) >> 0] = 1;
  label$5 : {
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   label$6 : {
    if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
     break label$6
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  return $0_1 | 0;
 }
 
 function $738($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 18600;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 64 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 64 | 0) >> 0] = 1;
  label$3 : {
   $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 44 | 0) >> 0] = 1;
  label$5 : {
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   label$6 : {
    if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
     break label$6
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  $80($0_1 | 0);
 }
 
 function $739($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[(HEAP32[$3_1 >> 2] | 0) >> 2] | 0]($3_1) | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 60 | 0) >> 2] | 0]($2_1, HEAP32[($1_1 + 8 | 0) >> 2] | 0);
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
  }
 }
 
 function $740($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$3_1 >> 2] = 18816;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1, $3_1, $2_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $741($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 18960;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1, $3_1 + 8 | 0, $2_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $742($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0;
  HEAP32[(0 + 2788 | 0) >> 2] = (HEAP32[(0 + 2788 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   label$2 : {
    $3_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) > (HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0);
    $4_1 = HEAP32[(($3_1 ? $1_1 : $2_1) + 12 | 0) >> 2] | 0;
    $5_1 = HEAP32[(($3_1 ? $2_1 : $1_1) + 12 | 0) >> 2] | 0;
    $1_1 = $4_1 << 16 | 0 | $5_1 | 0;
    $1_1 = $1_1 + (($1_1 << 15 | 0) ^ -1 | 0) | 0;
    $1_1 = Math_imul(($1_1 >>> 10 | 0) ^ $1_1 | 0, 9);
    $1_1 = ($1_1 >>> 6 | 0) ^ $1_1 | 0;
    $1_1 = $1_1 + (($1_1 << 11 | 0) ^ -1 | 0) | 0;
    $1_1 = (($1_1 >>> 16 | 0) ^ $1_1 | 0) & ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -1 | 0) | 0;
    if (($1_1 | 0) >= (HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    $1_1 = HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
    if (($1_1 | 0) == (-1 | 0)) {
     break label$2
    }
    $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      $3_1 = $1_1 << 4 | 0;
      $6_1 = $2_1 + $3_1 | 0;
      if ((HEAP32[((HEAP32[$6_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
       break label$4
      }
      if ((HEAP32[((HEAP32[(($2_1 + $3_1 | 0) + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == ($4_1 | 0)) {
       break label$1
      }
     }
     $1_1 = HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
     if (($1_1 | 0) != (-1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $6_1 = 0;
  }
  return $6_1 | 0;
 }
 
 function $743($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $11_1 = 0, $7_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $9_1 = 0, $12_1 = 0, i64toi32_i32$0 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $8_1 = 0, i64toi32_i32$2 = 0, $143_1 = 0, $227_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) > (HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0);
    $4_1 = $3_1 ? $1_1 : $2_1;
    $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    $6_1 = $3_1 ? $2_1 : $1_1;
    $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    $1_1 = $5_1 << 16 | 0 | $7_1 | 0;
    $1_1 = $1_1 + (($1_1 << 15 | 0) ^ -1 | 0) | 0;
    $1_1 = Math_imul(($1_1 >>> 10 | 0) ^ $1_1 | 0, 9);
    $1_1 = ($1_1 >>> 6 | 0) ^ $1_1 | 0;
    $1_1 = $1_1 + (($1_1 << 11 | 0) ^ -1 | 0) | 0;
    $8_1 = ($1_1 >>> 16 | 0) ^ $1_1 | 0;
    $9_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $10_1 = $8_1 & ($9_1 + -1 | 0) | 0;
    $1_1 = HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + ($10_1 << 2 | 0) | 0) >> 2] | 0;
    if (($1_1 | 0) == (-1 | 0)) {
     break label$2
    }
    $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      $3_1 = $1_1 << 4 | 0;
      $11_1 = $2_1 + $3_1 | 0;
      if ((HEAP32[((HEAP32[$11_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
       break label$4
      }
      if ((HEAP32[((HEAP32[(($2_1 + $3_1 | 0) + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == ($5_1 | 0)) {
       break label$1
      }
     }
     $1_1 = HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
     if (($1_1 | 0) != (-1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $1_1 = $9_1;
   $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $2_1 = $7_1;
   label$5 : {
    if (($2_1 | 0) != ($1_1 | 0)) {
     break label$5
    }
    $1_1 = $9_1;
    $2_1 = $1_1;
    $12_1 = $1_1 ? $1_1 << 1 | 0 : 1;
    if (($1_1 | 0) >= ($12_1 | 0)) {
     break label$5
    }
    label$6 : {
     label$7 : {
      if ($12_1) {
       break label$7
      }
      $5_1 = 0;
      $11_1 = $9_1;
      break label$6;
     }
     $5_1 = $79($12_1 << 4 | 0 | 0, 16 | 0) | 0;
     $11_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    label$8 : {
     if (($11_1 | 0) < (1 | 0)) {
      break label$8
     }
     $1_1 = 12;
     label$9 : while (1) {
      $2_1 = $5_1 + $1_1 | 0;
      $3_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $1_1 | 0;
      HEAP32[($2_1 + -12 | 0) >> 2] = HEAP32[($3_1 + -12 | 0) >> 2] | 0;
      i64toi32_i32$2 = $3_1 + -8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $143_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $2_1 + -8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $143_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      HEAP32[$2_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
      $1_1 = $1_1 + 16 | 0;
      $11_1 = $11_1 + -1 | 0;
      if ($11_1) {
       continue label$9
      }
      break label$9;
     };
    }
    label$10 : {
     $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$10
     }
     label$11 : {
      if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
       break label$11
      }
      $80($1_1 | 0);
     }
     HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 12 | 0) >> 2] = $12_1;
    HEAP8[($0_1 + 20 | 0) >> 0] = 1;
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $1_1 = $12_1;
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = $2_1 + 1 | 0;
   $11_1 = $7_1 << 4 | 0;
   $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   label$12 : {
    $3_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$12
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($3_1, $6_1, $4_1) | 0;
    $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   }
   $11_1 = $2_1 + $11_1 | 0;
   label$13 : {
    if (($9_1 | 0) >= ($1_1 | 0)) {
     break label$13
    }
    $736($0_1 | 0);
    $10_1 = ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -1 | 0) & $8_1 | 0;
   }
   $1_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
   $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   $2_1 = $2_1 + ($7_1 << 4 | 0) | 0;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = 0;
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   $1_1 = ($3_1 | 0) < ($1_1 | 0);
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 ? $4_1 : $6_1;
   $227_1 = (HEAP32[($0_1 + 60 | 0) >> 2] | 0) + ($7_1 << 2 | 0) | 0;
   $0_1 = (HEAP32[($0_1 + 40 | 0) >> 2] | 0) + ($10_1 << 2 | 0) | 0;
   HEAP32[$227_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$11_1 >> 2] = $1_1 ? $6_1 : $4_1;
   HEAP32[$0_1 >> 2] = $7_1;
  }
  return $11_1 | 0;
 }
 
 function $744($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $10_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $263_1 = 0, $268_1 = 0;
  $4_1 = 0;
  HEAP32[(0 + 2780 | 0) >> 2] = (HEAP32[(0 + 2780 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   $5_1 = (HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) > (HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0);
   $6_1 = $5_1 ? $1_1 : $2_1;
   $7_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   $8_1 = $5_1 ? $2_1 : $1_1;
   $5_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
   $1_1 = $7_1 << 16 | 0 | $5_1 | 0;
   $1_1 = $1_1 + (($1_1 << 15 | 0) ^ -1 | 0) | 0;
   $1_1 = Math_imul(($1_1 >>> 10 | 0) ^ $1_1 | 0, 9);
   $1_1 = ($1_1 >>> 6 | 0) ^ $1_1 | 0;
   $1_1 = $1_1 + (($1_1 << 11 | 0) ^ -1 | 0) | 0;
   $9_1 = (($1_1 >>> 16 | 0) ^ $1_1 | 0) & ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -1 | 0) | 0;
   $1_1 = HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + ($9_1 << 2 | 0) | 0) >> 2] | 0;
   if (($1_1 | 0) == (-1 | 0)) {
    break label$1
   }
   $10_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      $2_1 = $10_1 + ($1_1 << 4 | 0) | 0;
      if ((HEAP32[((HEAP32[$2_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != ($5_1 | 0)) {
       break label$4
      }
      if ((HEAP32[((HEAP32[($2_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) == ($7_1 | 0)) {
       break label$2
      }
     }
     $1_1 = HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
     if (($1_1 | 0) != (-1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($0_1, $2_1, $3_1);
   $4_1 = HEAP32[(($10_1 + ($1_1 << 4 | 0) | 0) + 12 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   label$5 : {
    label$6 : {
     label$7 : {
      $7_1 = (HEAP32[($0_1 + 40 | 0) >> 2] | 0) + ($9_1 << 2 | 0) | 0;
      $1_1 = HEAP32[$7_1 >> 2] | 0;
      $2_1 = ($2_1 - (HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0) >> 4 | 0;
      if (($1_1 | 0) != ($2_1 | 0)) {
       break label$7
      }
      $1_1 = HEAP32[($5_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0;
      break label$6;
     }
     label$8 : while (1) {
      $10_1 = $1_1;
      $1_1 = HEAP32[($5_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
      if (($1_1 | 0) != ($2_1 | 0)) {
       continue label$8
      }
      break label$8;
     };
     $1_1 = HEAP32[($5_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0;
     if (($10_1 | 0) == (-1 | 0)) {
      break label$6
     }
     HEAP32[($5_1 + ($10_1 << 2 | 0) | 0) >> 2] = $1_1;
     break label$5;
    }
    HEAP32[$7_1 >> 2] = $1_1;
   }
   $5_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -1 | 0;
   label$9 : {
    $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
    if (!$1_1) {
     break label$9
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($1_1, $8_1, $6_1, $3_1) | 0;
   }
   label$10 : {
    if (($5_1 | 0) != ($2_1 | 0)) {
     break label$10
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -1 | 0;
    return $4_1 | 0;
   }
   $10_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   label$11 : {
    label$12 : {
     label$13 : {
      $9_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      $3_1 = $9_1 + ($5_1 << 4 | 0) | 0;
      $1_1 = (HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) << 16 | 0 | (HEAP32[((HEAP32[$3_1 >> 2] | 0) + 12 | 0) >> 2] | 0) | 0;
      $1_1 = $1_1 + (($1_1 << 15 | 0) ^ -1 | 0) | 0;
      $1_1 = Math_imul(($1_1 >>> 10 | 0) ^ $1_1 | 0, 9);
      $1_1 = ($1_1 >>> 6 | 0) ^ $1_1 | 0;
      $1_1 = $1_1 + (($1_1 << 11 | 0) ^ -1 | 0) | 0;
      $6_1 = (($1_1 >>> 16 | 0) ^ $1_1 | 0) & ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + -1 | 0) | 0;
      $8_1 = (HEAP32[($0_1 + 40 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0;
      $1_1 = HEAP32[$8_1 >> 2] | 0;
      if (($1_1 | 0) != ($5_1 | 0)) {
       break label$13
      }
      $1_1 = HEAP32[($10_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
      break label$12;
     }
     label$14 : while (1) {
      $7_1 = $1_1;
      $1_1 = HEAP32[($10_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
      if (($1_1 | 0) != ($5_1 | 0)) {
       continue label$14
      }
      break label$14;
     };
     $1_1 = HEAP32[($10_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
     if (($7_1 | 0) == (-1 | 0)) {
      break label$12
     }
     HEAP32[($10_1 + ($7_1 << 2 | 0) | 0) >> 2] = $1_1;
     break label$11;
    }
    HEAP32[$8_1 >> 2] = $1_1;
   }
   $1_1 = $9_1 + ($2_1 << 4 | 0) | 0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $263_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[$1_1 >> 2] = $263_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $3_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $268_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $268_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $1_1 = (HEAP32[($0_1 + 40 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0;
   HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
   HEAP32[$1_1 >> 2] = $2_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $745($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $616($3_1 + 8 | 0 | 0, 18668 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $6_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($5_1 << 4 | 0) | 0;
      if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $6_1) | 0)) {
       break label$4
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1, HEAP32[$6_1 >> 2] | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, $2_1) | 0;
      HEAP32[(0 + 2776 | 0) >> 2] = (HEAP32[(0 + 2776 | 0) >> 2] | 0) + -1 | 0;
      break label$3;
     }
     $5_1 = $5_1 + 1 | 0;
    }
    if (($5_1 | 0) < (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $617($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $746($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $10_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $7_1 = 0, $60_1 = 0, $95_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  HEAP32[($2_1 + 20 | 0) >> 2] = 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$0;
  $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  HEAP8[($2_1 + 24 | 0) >> 0] = 1;
  label$1 : {
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = 0;
   $3_1 = 0;
   $6_1 = 0;
   label$2 : while (1) {
    $7_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($6_1 << 4 | 0) | 0;
    label$3 : {
     if (($3_1 | 0) != ($5_1 | 0)) {
      break label$3
     }
     label$4 : {
      $8_1 = $5_1 ? $5_1 << 1 | 0 : 1;
      if (($5_1 | 0) < ($8_1 | 0)) {
       break label$4
      }
      $3_1 = $5_1;
      break label$3;
     }
     label$5 : {
      label$6 : {
       if ($8_1) {
        break label$6
       }
       $9_1 = 0;
       break label$5;
      }
      $9_1 = $79($8_1 << 4 | 0 | 0, 16 | 0) | 0;
     }
     label$7 : {
      if (($5_1 | 0) < (1 | 0)) {
       break label$7
      }
      $3_1 = 12;
      label$8 : while (1) {
       $4_1 = $9_1 + $3_1 | 0;
       $10_1 = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $3_1 | 0;
       HEAP32[($4_1 + -12 | 0) >> 2] = HEAP32[($10_1 + -12 | 0) >> 2] | 0;
       i64toi32_i32$2 = $10_1 + -8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $60_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $4_1 + -8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $60_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[$4_1 >> 2] = HEAP32[$10_1 >> 2] | 0;
       $3_1 = $3_1 + 16 | 0;
       $5_1 = $5_1 + -1 | 0;
       if ($5_1) {
        continue label$8
       }
       break label$8;
      };
     }
     label$9 : {
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$9
      }
      label$10 : {
       if (!(HEAPU8[($2_1 + 24 | 0) >> 0] | 0)) {
        break label$10
       }
       $80($3_1 | 0);
      }
      HEAP32[($2_1 + 20 | 0) >> 2] = 0;
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = $9_1;
     HEAP8[($2_1 + 24 | 0) >> 0] = 1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $8_1;
     $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    }
    $3_1 = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + ($3_1 << 4 | 0) | 0;
    HEAP32[$3_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $95_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $3_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $95_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $10_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
    $3_1 = $10_1 + 1 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $3_1;
    label$11 : {
     $6_1 = $6_1 + 1 | 0;
     if (($6_1 | 0) >= (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
      break label$11
     }
     $5_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   if (($10_1 | 0) < (0 | 0)) {
    break label$1
   }
   $5_1 = -1;
   $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
   label$12 : while (1) {
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1, HEAP32[$4_1 >> 2] | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0, $1_1) | 0;
    $4_1 = $4_1 + 16 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < ($10_1 | 0)) {
     continue label$12
    }
    break label$12;
   };
  }
  label$13 : {
   if ((HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$13
   }
   $3_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   $4_1 = 0;
   label$14 : while (1) {
    HEAP32[$3_1 >> 2] = -1;
    $3_1 = $3_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < (HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0)) {
     continue label$14
    }
    break label$14;
   };
   $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  }
  label$15 : {
   if (($3_1 | 0) < (2 | 0)) {
    break label$15
   }
   $776($2_1 + 8 | 0 | 0, $2_1 | 0, 0 | 0, $3_1 + -1 | 0 | 0);
   $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  }
  $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
  label$16 : {
   if (($3_1 | 0) < (1 | 0)) {
    break label$16
   }
   $10_1 = 0;
   $3_1 = 4;
   label$17 : while (1) {
    $4_1 = $4_1 + $3_1 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, HEAP32[($4_1 + -4 | 0) >> 2] | 0, HEAP32[$4_1 >> 2] | 0) | 0;
    $3_1 = $3_1 + 16 | 0;
    $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    $10_1 = $10_1 + 1 | 0;
    if (($10_1 | 0) < (HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0)) {
     continue label$17
    }
    break label$17;
   };
  }
  label$18 : {
   if (!$4_1) {
    break label$18
   }
   label$19 : {
    if (!(HEAPU8[($2_1 + 24 | 0) >> 0] | 0)) {
     break label$19
    }
    $80($4_1 | 0);
   }
   HEAP32[($2_1 + 20 | 0) >> 2] = 0;
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $747($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = 0;
  HEAP32[(0 + 2784 | 0) >> 2] = (HEAP32[(0 + 2784 | 0) >> 2] | 0) + 1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$3
     }
     if (FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($4_1, $1_1, $2_1) | 0) {
      break label$2
     }
     break label$1;
    }
    if (!((HEAP32[($2_1 + 8 | 0) >> 2] | 0) & (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0)) {
     break label$1
    }
    if (!((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & (HEAP32[($2_1 + 4 | 0) >> 2] | 0) | 0)) {
     break label$1
    }
   }
   $3_1 = $743($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $748($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0;
 }
 
 function $749($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0;
 }
 
 function $750($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 4 | 0 | 0;
 }
 
 function $751($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $752($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
 }
 
 function $753($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $754($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = $1_1;
 }
 
 function $755($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $756($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if ((HEAP32[$1_1 >> 2] | 0 | 0) == ($2_1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
     break label$1
    }
   }
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($2_1, $1_1, HEAP32[($0_1 + 12 | 0) >> 2] | 0);
  }
  return 0 | 0;
 }
 
 function $757($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $758($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) == ($0_1 | 0) | (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) == ($0_1 | 0) | 0 | 0;
 }
 
 function $759($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $4_1 = 0, $10_1 = 0, $7_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 19124;
  $473($0_1 + 4 | 0 | 0) | 0;
  $473($0_1 + 44 | 0 | 0) | 0;
  HEAP32[($0_1 + 168 | 0) >> 2] = 0;
  HEAP8[($0_1 + 172 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 160 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = 256;
  HEAP8[($0_1 + 153 | 0) >> 0] = $10_1;
  HEAP8[($0_1 + 154 | 0) >> 0] = $10_1 >>> 8 | 0;
  HEAP8[($0_1 + 152 | 0) >> 0] = !$1_1;
  HEAP32[($0_1 + 124 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 100 | 0) >> 2] = 0;
  HEAP32[($0_1 + 104 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 136 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 128 | 0) >> 2] = 0;
  HEAP32[($0_1 + 132 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1;
  HEAP32[($0_1 + 116 | 0) >> 2] = 10;
  HEAP32[($0_1 + 120 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 108 | 0) >> 2] = 1;
  HEAP32[($0_1 + 112 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = 0;
  label$1 : {
   if ($1_1) {
    break label$1
   }
   $1_1 = $79(72 | 0, 16 | 0) | 0;
   $735($1_1 | 0) | 0;
   $3_1 = HEAP32[($0_1 + 160 | 0) >> 2] | 0;
  }
  HEAP32[($0_1 + 148 | 0) >> 2] = 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = $1_1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 140 | 0) >> 2] = 0;
  HEAP32[($0_1 + 144 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 84 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 92 | 0) >> 2] = 0;
  HEAP32[($2_1 + 20 | 0) >> 2] = 0;
  HEAP8[($2_1 + 24 | 0) >> 0] = 1;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  HEAP32[($2_1 + 16 | 0) >> 2] = i64toi32_i32$0;
  label$2 : {
   label$3 : {
    if (($3_1 | 0) < (2 | 0)) {
     break label$3
    }
    $4_1 = $3_1 + -1 | 0;
    $3_1 = 36;
    label$4 : while (1) {
     $1_1 = (HEAP32[($0_1 + 168 | 0) >> 2] | 0) + $3_1 | 0;
     $5_1 = $1_1 + -12 | 0;
     label$5 : {
      $6_1 = $1_1 + -4 | 0;
      $7_1 = HEAP32[$6_1 >> 2] | 0;
      if (!$7_1) {
       break label$5
      }
      label$6 : {
       if (!(HEAPU8[$1_1 >> 0] | 0)) {
        break label$6
       }
       $80($7_1 | 0);
      }
      HEAP32[$6_1 >> 2] = 0;
     }
     HEAP32[$6_1 >> 2] = 0;
     HEAP32[$5_1 >> 2] = 0;
     HEAP8[$1_1 >> 0] = 1;
     HEAP32[($1_1 + -8 | 0) >> 2] = 0;
     $3_1 = $3_1 + 20 | 0;
     $4_1 = $4_1 + -1 | 0;
     if ($4_1) {
      continue label$4
     }
     break label$2;
    };
   }
   if (($3_1 | 0) == (1 | 0)) {
    break label$2
   }
   $760($0_1 + 156 | 0 | 0, 1 | 0);
   $1_1 = Math_imul($3_1, 20);
   $3_1 = $3_1 + -1 | 0;
   label$7 : while (1) {
    $761((HEAP32[($0_1 + 168 | 0) >> 2] | 0) + $1_1 | 0 | 0, $2_1 + 8 | 0 | 0) | 0;
    $1_1 = $1_1 + 20 | 0;
    $6_1 = $3_1 + 1 | 0;
    $4_1 = $6_1 >>> 0 >= $3_1 >>> 0;
    $3_1 = $6_1;
    if ($4_1) {
     continue label$7
    }
    break label$7;
   };
  }
  HEAP32[($0_1 + 160 | 0) >> 2] = 1;
  label$8 : {
   $1_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$8
   }
   label$9 : {
    if (!(HEAPU8[($2_1 + 24 | 0) >> 0] | 0)) {
     break label$9
    }
    $80($1_1 | 0);
   }
   HEAP32[($2_1 + 20 | 0) >> 2] = 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $760($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($1_1) {
      break label$3
     }
     $2_1 = 0;
     break label$2;
    }
    $2_1 = $79(Math_imul($1_1, 20) | 0, 16 | 0) | 0;
   }
   label$4 : {
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($3_1 | 0) < (1 | 0)) {
     break label$4
    }
    $4_1 = 0;
    label$5 : while (1) {
     $761($2_1 + $4_1 | 0 | 0, (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $4_1 | 0 | 0) | 0;
     $4_1 = $4_1 + 20 | 0;
     $3_1 = $3_1 + -1 | 0;
     if ($3_1) {
      continue label$5
     }
     break label$5;
    };
    $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($5_1 | 0) < (1 | 0)) {
     break label$4
    }
    $3_1 = 8;
    label$6 : while (1) {
     $4_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $3_1 | 0;
     $6_1 = $4_1 + -4 | 0;
     label$7 : {
      $7_1 = $4_1 + 4 | 0;
      $8_1 = HEAP32[$7_1 >> 2] | 0;
      if (!$8_1) {
       break label$7
      }
      label$8 : {
       if (!(HEAPU8[($4_1 + 8 | 0) >> 0] | 0)) {
        break label$8
       }
       $80($8_1 | 0);
      }
      HEAP32[$7_1 >> 2] = 0;
     }
     HEAP32[$6_1 >> 2] = 0;
     HEAP32[$7_1 >> 2] = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP8[($4_1 + 8 | 0) >> 0] = 1;
     $3_1 = $3_1 + 20 | 0;
     $5_1 = $5_1 + -1 | 0;
     if ($5_1) {
      continue label$6
     }
     break label$6;
    };
   }
   label$9 : {
    $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$9
    }
    label$10 : {
     if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
      break label$10
     }
     $80($4_1 | 0);
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
   HEAP8[($0_1 + 16 | 0) >> 0] = 1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  }
 }
 
 function $761($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, $4_1 = 0, $3_1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP8[($0_1 + 16 | 0) >> 0] = 1;
  label$1 : {
   $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if (($2_1 | 0) > (0 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
   return $0_1 | 0;
  }
  $3_1 = $79($2_1 << 2 | 0 | 0, 16 | 0) | 0;
  label$2 : {
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$2
   }
   $5_1 = 0;
   label$3 : while (1) {
    HEAP32[($3_1 + $5_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $5_1 | 0) >> 2] | 0;
    $5_1 = $5_1 + 4 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$4
   }
   label$5 : {
    if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
     break label$5
    }
    $80($5_1 | 0);
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
  HEAP8[($0_1 + 16 | 0) >> 0] = 1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  $5_1 = 0;
  $4_1 = $2_1;
  label$6 : while (1) {
   HEAP32[($3_1 + $5_1 | 0) >> 2] = 0;
   $5_1 = $5_1 + 4 | 0;
   $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $4_1 = $4_1 + -1 | 0;
   if ($4_1) {
    continue label$6
   }
   break label$6;
  };
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  label$7 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$7
   }
   $5_1 = 0;
   label$8 : while (1) {
    HEAP32[($3_1 + $5_1 | 0) >> 2] = HEAP32[((HEAP32[($1_1 + 12 | 0) >> 2] | 0) + $5_1 | 0) >> 2] | 0;
    $5_1 = $5_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$8
    }
    break label$8;
   };
  }
  return $0_1 | 0;
 }
 
 function $762($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0;
  HEAP32[$0_1 >> 2] = 19124;
  label$1 : {
   if (!(HEAPU8[($0_1 + 152 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
   $80(HEAP32[($0_1 + 96 | 0) >> 2] | 0 | 0);
  }
  label$2 : {
   $2_1 = HEAP32[($0_1 + 160 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$2
   }
   $3_1 = 8;
   label$3 : while (1) {
    $1_1 = (HEAP32[($0_1 + 168 | 0) >> 2] | 0) + $3_1 | 0;
    $4_1 = $1_1 + -4 | 0;
    label$4 : {
     $5_1 = $1_1 + 4 | 0;
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     if (!$6_1) {
      break label$4
     }
     label$5 : {
      if (!(HEAPU8[($1_1 + 8 | 0) >> 0] | 0)) {
       break label$5
      }
      $80($6_1 | 0);
     }
     HEAP32[$5_1 >> 2] = 0;
    }
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP8[($1_1 + 8 | 0) >> 0] = 1;
    $3_1 = $3_1 + 20 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$6 : {
   $1_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$6
   }
   label$7 : {
    if (!(HEAPU8[($0_1 + 172 | 0) >> 0] | 0)) {
     break label$7
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 168 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 168 | 0) >> 2] = 0;
  HEAP32[($0_1 + 160 | 0) >> 2] = 0;
  HEAP32[($0_1 + 164 | 0) >> 2] = 0;
  HEAP8[($0_1 + 172 | 0) >> 0] = 1;
  $474($0_1 + 44 | 0 | 0) | 0;
  $474($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $763($0_1) {
  $0_1 = $0_1 | 0;
  $37($762($0_1 | 0) | 0 | 0);
 }
 
 function $764($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $9_1 = 0, $8_1 = 0, $24_1 = 0, $30_1 = 0, $33_1 = 0, $39_1 = 0, $45_1 = 0, $50_1 = 0, $10_1 = 0, $10$hi = 0, $59_1 = 0;
  $8_1 = global$0 - 48 | 0;
  global$0 = $8_1;
  $9_1 = $79(64 | 0, 16 | 0) | 0;
  HEAP32[($9_1 + 8 | 0) >> 2] = $6_1;
  HEAP32[($9_1 + 4 | 0) >> 2] = $5_1;
  HEAP32[$9_1 >> 2] = $4_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $24_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $9_1;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $24_1;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
  $4_1 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $30_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $9_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $30_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $33_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $9_1;
  HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = $33_1;
  HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$1;
  $5_1 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $39_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $9_1 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $39_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $9_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $45_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($8_1 + 16 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $45_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $50_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($8_1 + 16 | 0) + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $50_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10_1 = i64toi32_i32$0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[($9_1 + 60 | 0) >> 2] = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
  $59_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $8_1;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $59_1;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = (HEAP32[($0_1 + 148 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($9_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 148 | 0) >> 2] = $2_1;
  i64toi32_i32$0 = $10$hi;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  $4_1 = $0_1 + 4 | 0;
  $2_1 = $480($4_1 | 0, i64toi32_i32$1 + 16 | 0 | 0, $9_1 | 0) | 0;
  HEAP32[($9_1 + 52 | 0) >> 2] = 0;
  HEAP32[($9_1 + 48 | 0) >> 2] = $2_1;
  $2_1 = ($0_1 + ((HEAP32[($0_1 + 104 | 0) >> 2] | 0) << 2 | 0) | 0) + 84 | 0;
  HEAP32[($9_1 + 56 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  label$1 : {
   $1_1 = HEAP32[$2_1 >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   HEAP32[($1_1 + 52 | 0) >> 2] = $9_1;
  }
  HEAP32[$2_1 >> 2] = $9_1;
  label$2 : {
   if (HEAPU8[($0_1 + 153 | 0) >> 0] | 0) {
    break label$2
   }
   HEAP32[($8_1 + 8 | 0) >> 2] = $9_1;
   HEAP32[$8_1 >> 2] = 19252;
   HEAP32[($8_1 + 4 | 0) >> 2] = $0_1;
   $765($4_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $8_1 + 16 | 0 | 0, $8_1 | 0);
   $0_1 = $0_1 + 44 | 0;
   $765($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $8_1 + 16 | 0 | 0, $8_1 | 0);
  }
  global$0 = $8_1 + 48 | 0;
  return $9_1 | 0;
 }
 
 function $765($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $11_1 = 0, $12_1 = 0, $14_1 = 0, $18_1 = 0, $13_1 = 0, $15_1 = 0, $17_1 = 0, $19_1 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $16_1 = 0;
  $4_1 = global$0 - 256 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $5_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   HEAP32[$4_1 >> 2] = $1_1;
   $11_1 = 64;
   $12_1 = $4_1;
   $2_1 = 1;
   $13_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $14_1 = $2_1 + -1 | 0;
        $15_1 = $14_1 << 2 | 0;
        $1_1 = HEAP32[($12_1 + $15_1 | 0) >> 2] | 0;
        if (Math_fround(HEAPF32[$1_1 >> 2]) <= $7_1 ^ 1 | 0) {
         break label$6
        }
        if (Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]) >= $10_1 ^ 1 | 0) {
         break label$6
        }
        if (Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) <= $6_1 ^ 1 | 0) {
         break label$6
        }
        if (Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]) >= $9_1 ^ 1 | 0) {
         break label$6
        }
        if (Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) <= $5_1 ^ 1 | 0) {
         break label$6
        }
        if (Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]) >= $8_1 ^ 1 | 0) {
         break label$6
        }
        label$7 : {
         if (!(HEAP32[($1_1 + 40 | 0) >> 2] | 0)) {
          break label$7
         }
         $16_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
         if (($14_1 | 0) != ($11_1 | 0)) {
          break label$5
         }
         $17_1 = $11_1 ? $11_1 << 1 | 0 : 1;
         if (($2_1 | 0) > ($17_1 | 0)) {
          break label$5
         }
         label$8 : {
          label$9 : {
           if ($17_1) {
            break label$9
           }
           $18_1 = 0;
           break label$8;
          }
          $18_1 = $79($17_1 << 2 | 0 | 0, 16 | 0) | 0;
         }
         label$10 : {
          label$11 : {
           label$12 : {
            if (($11_1 | 0) < (1 | 0)) {
             break label$12
            }
            $14_1 = $18_1;
            $19_1 = $12_1;
            label$13 : while (1) {
             HEAP32[$14_1 >> 2] = HEAP32[$19_1 >> 2] | 0;
             $14_1 = $14_1 + 4 | 0;
             $19_1 = $19_1 + 4 | 0;
             $11_1 = $11_1 + -1 | 0;
             if ($11_1) {
              continue label$13
             }
             break label$13;
            };
            if ($13_1 & 255 | 0) {
             break label$11
            }
            break label$10;
           }
           if (!$12_1) {
            break label$10
           }
           if (!($13_1 & 255 | 0)) {
            break label$10
           }
          }
          $80($12_1 | 0);
         }
         $13_1 = 1;
         break label$4;
        }
        FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($3_1, $1_1);
       }
       $2_1 = $14_1;
       break label$3;
      }
      $17_1 = $11_1;
      $18_1 = $12_1;
     }
     HEAP32[($18_1 + $15_1 | 0) >> 2] = $16_1;
     $19_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
     label$14 : {
      label$15 : {
       if (($2_1 | 0) == ($17_1 | 0)) {
        break label$15
       }
       $11_1 = $17_1;
       $12_1 = $18_1;
       break label$14;
      }
      label$16 : {
       $11_1 = $2_1 ? $2_1 << 1 | 0 : 1;
       if (($2_1 | 0) < ($11_1 | 0)) {
        break label$16
       }
       $11_1 = $2_1;
       $12_1 = $18_1;
       break label$14;
      }
      label$17 : {
       label$18 : {
        if ($11_1) {
         break label$18
        }
        $12_1 = 0;
        break label$17;
       }
       $12_1 = $79($11_1 << 2 | 0 | 0, 16 | 0) | 0;
      }
      label$19 : {
       label$20 : {
        label$21 : {
         if (($2_1 | 0) < (1 | 0)) {
          break label$21
         }
         $1_1 = $12_1;
         $14_1 = $18_1;
         $15_1 = $2_1;
         label$22 : while (1) {
          HEAP32[$1_1 >> 2] = HEAP32[$14_1 >> 2] | 0;
          $1_1 = $1_1 + 4 | 0;
          $14_1 = $14_1 + 4 | 0;
          $15_1 = $15_1 + -1 | 0;
          if ($15_1) {
           continue label$22
          }
          break label$22;
         };
         if ($13_1 & 255 | 0) {
          break label$20
         }
         break label$19;
        }
        if (!$18_1) {
         break label$19
        }
        if (!($13_1 & 255 | 0)) {
         break label$19
        }
       }
       $80($18_1 | 0);
      }
      $13_1 = 1;
     }
     HEAP32[($12_1 + ($2_1 << 2 | 0) | 0) >> 2] = $19_1;
     $2_1 = $2_1 + 1 | 0;
    }
    if (($2_1 | 0) > (0 | 0)) {
     continue label$2
    }
    break label$2;
   };
   if (!$12_1) {
    break label$1
   }
   if (!($13_1 & 255 | 0)) {
    break label$1
   }
   $80($12_1 | 0);
  }
  global$0 = $4_1 + 256 | 0;
 }
 
 function $766($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $483(((HEAP32[($1_1 + 60 | 0) >> 2] | 0 | 0) == (2 | 0) ? $0_1 + 44 | 0 : $0_1 + 4 | 0) | 0, HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0);
  $3_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$2
    }
    $4_1 = $4_1 + 56 | 0;
    break label$1;
   }
   $4_1 = ($0_1 + ((HEAP32[($1_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) + 84 | 0;
  }
  HEAP32[$4_1 >> 2] = $3_1;
  label$3 : {
   $3_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$3
   }
   HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
  }
  $3_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($3_1, $1_1, $2_1);
  $80($1_1 | 0);
  HEAP8[($0_1 + 154 | 0) >> 0] = 1;
 }
 
 function $767($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $11_1 = 0, $16_1 = 0, $19_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[i64toi32_i32$0 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $768($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 19324;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = $3_1 + 4 | 0;
  $8_1 = $3_1 + 20 | 0;
  $9_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
  $769($0_1 + 4 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $8_1 | 0, Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2])), $4_1 | 0, $5_1 | 0, $9_1 | 0, $6_1 + 8 | 0 | 0);
  $0_1 = $0_1 + 44 | 0;
  $769($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, $8_1 | 0, Math_fround(Math_fround(HEAPF32[($3_1 + 32 | 0) >> 2])), $4_1 | 0, $5_1 | 0, $9_1 | 0, $6_1 + 8 | 0 | 0);
  global$0 = $6_1 + 16 | 0;
 }
 
 function $769($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $15_1 = 0, $12_1 = 0, $11_1 = 0, $14_1 = 0, $13_1 = 0, $19_1 = Math_fround(0), $18_1 = Math_fround(0), $21_1 = Math_fround(0), $16_1 = 0, $20_1 = Math_fround(0), $23_1 = 0, $22_1 = Math_fround(0), $24_1 = Math_fround(0), $17_1 = 0, $25_1 = Math_fround(0);
  $11_1 = global$0 - 32 | 0;
  global$0 = $11_1;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    $12_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
    if (($12_1 | 0) > (127 | 0)) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0) > (127 | 0)) {
      break label$3
     }
     $13_1 = $79(512 | 0, 16 | 0) | 0;
     label$4 : {
      $14_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
      if (($14_1 | 0) < (1 | 0)) {
       break label$4
      }
      $15_1 = 0;
      label$5 : while (1) {
       HEAP32[($13_1 + $15_1 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + $15_1 | 0) >> 2] | 0;
       $15_1 = $15_1 + 4 | 0;
       $14_1 = $14_1 + -1 | 0;
       if ($14_1) {
        continue label$5
       }
       break label$5;
      };
     }
     label$6 : {
      $15_1 = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
      if (!$15_1) {
       break label$6
      }
      label$7 : {
       if (!(HEAPU8[($9_1 + 16 | 0) >> 0] | 0)) {
        break label$7
       }
       $80($15_1 | 0);
      }
      HEAP32[($9_1 + 12 | 0) >> 2] = 0;
     }
     HEAP32[($9_1 + 12 | 0) >> 2] = $13_1;
     HEAP8[($9_1 + 16 | 0) >> 0] = 1;
     HEAP32[($9_1 + 8 | 0) >> 2] = 128;
    }
    $15_1 = $12_1 << 2 | 0;
    $14_1 = $12_1 + -128 | 0;
    label$8 : while (1) {
     HEAP32[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + $15_1 | 0) >> 2] = 0;
     $15_1 = $15_1 + 4 | 0;
     $13_1 = $14_1 + 1 | 0;
     $12_1 = $13_1 >>> 0 >= $14_1 >>> 0;
     $14_1 = $13_1;
     if ($12_1) {
      continue label$8
     }
     break label$8;
    };
   }
   HEAP32[($9_1 + 4 | 0) >> 2] = 128;
   HEAP32[(HEAP32[($9_1 + 12 | 0) >> 2] | 0) >> 2] = $1_1;
   $16_1 = 126;
   $14_1 = 1;
   label$9 : while (1) {
    HEAP32[($11_1 + 12 | 0) >> 2] = 0;
    $13_1 = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
    $12_1 = $14_1 + -1 | 0;
    $17_1 = $12_1 << 2 | 0;
    $15_1 = HEAP32[($13_1 + $17_1 | 0) >> 2] | 0;
    HEAPF32[($11_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($15_1 + 8 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]));
    HEAPF32[($11_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($15_1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]));
    HEAPF32[$11_1 >> 2] = Math_fround(Math_fround(HEAPF32[$15_1 >> 2]) - Math_fround(HEAPF32[$8_1 >> 2]));
    $18_1 = Math_fround(HEAPF32[($15_1 + 24 | 0) >> 2]);
    $19_1 = Math_fround(HEAPF32[($15_1 + 16 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[$7_1 >> 2]);
    HEAPF32[($11_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($15_1 + 20 | 0) >> 2]) - Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]));
    HEAPF32[($11_1 + 16 | 0) >> 2] = Math_fround($19_1 - $21_1);
    HEAPF32[($11_1 + 24 | 0) >> 2] = Math_fround($18_1 - $20_1);
    HEAP32[($11_1 + 28 | 0) >> 2] = 0;
    label$10 : {
     label$11 : {
      $1_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      $19_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
      $20_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
      $21_1 = Math_fround(Math_fround(Math_fround(HEAPF32[(($11_1 + ($1_1 << 4 | 0) | 0) + 4 | 0) >> 2]) - $19_1) * $20_1);
      $22_1 = Math_fround(HEAPF32[$4_1 >> 2]);
      $23_1 = HEAP32[$5_1 >> 2] | 0;
      $24_1 = Math_fround(HEAPF32[$2_1 >> 2]);
      $18_1 = Math_fround($22_1 * Math_fround(Math_fround(HEAPF32[($11_1 + ((1 - $23_1 | 0) << 4 | 0) | 0) >> 2]) - $24_1));
      if ($21_1 > $18_1) {
       break label$11
      }
      $22_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($11_1 + ($23_1 << 4 | 0) | 0) >> 2]) - $24_1) * $22_1);
      $19_1 = Math_fround($20_1 * Math_fround(Math_fround(HEAPF32[(($11_1 + ((1 - $1_1 | 0) << 4 | 0) | 0) + 4 | 0) >> 2]) - $19_1));
      if ($22_1 > $19_1) {
       break label$11
      }
      $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
      $24_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
      $25_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
      $20_1 = Math_fround(Math_fround(Math_fround(HEAPF32[(($11_1 + ($1_1 << 4 | 0) | 0) + 8 | 0) >> 2]) - $24_1) * $25_1);
      $19_1 = $19_1 < $18_1 ? $19_1 : $18_1;
      if ($20_1 > $19_1) {
       break label$11
      }
      $18_1 = $21_1 > $22_1 ? $21_1 : $22_1;
      $21_1 = Math_fround($25_1 * Math_fround(Math_fround(HEAPF32[(($11_1 + ((1 - $1_1 | 0) << 4 | 0) | 0) + 8 | 0) >> 2]) - $24_1));
      if ($18_1 > $21_1) {
       break label$11
      }
      if (($20_1 > $18_1 ? $20_1 : $18_1) < $6_1 ^ 1 | 0) {
       break label$11
      }
      if (($21_1 < $19_1 ? $21_1 : $19_1) > Math_fround(0.0) ^ 1 | 0) {
       break label$11
      }
      label$12 : {
       if (!(HEAP32[($15_1 + 40 | 0) >> 2] | 0)) {
        break label$12
       }
       label$13 : {
        if (($12_1 | 0) <= ($16_1 | 0)) {
         break label$13
        }
        label$14 : {
         $1_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
         $16_1 = $1_1 << 1 | 0;
         if (($1_1 | 0) >= ($16_1 | 0)) {
          break label$14
         }
         label$15 : {
          if ((HEAP32[($9_1 + 8 | 0) >> 2] | 0 | 0) >= ($16_1 | 0)) {
           break label$15
          }
          label$16 : {
           label$17 : {
            if ($1_1) {
             break label$17
            }
            $13_1 = 0;
            break label$16;
           }
           $13_1 = $79($1_1 << 3 | 0 | 0, 16 | 0) | 0;
           $23_1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
           if (($23_1 | 0) < (1 | 0)) {
            break label$16
           }
           $12_1 = 0;
           label$18 : while (1) {
            HEAP32[($13_1 + $12_1 | 0) >> 2] = HEAP32[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + $12_1 | 0) >> 2] | 0;
            $12_1 = $12_1 + 4 | 0;
            $23_1 = $23_1 + -1 | 0;
            if ($23_1) {
             continue label$18
            }
            break label$18;
           };
          }
          label$19 : {
           $12_1 = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
           if (!$12_1) {
            break label$19
           }
           label$20 : {
            if (!(HEAPU8[($9_1 + 16 | 0) >> 0] | 0)) {
             break label$20
            }
            $80($12_1 | 0);
           }
           HEAP32[($9_1 + 12 | 0) >> 2] = 0;
          }
          HEAP32[($9_1 + 12 | 0) >> 2] = $13_1;
          HEAP8[($9_1 + 16 | 0) >> 0] = 1;
          HEAP32[($9_1 + 8 | 0) >> 2] = $16_1;
         }
         $12_1 = $1_1 << 2 | 0;
         label$21 : while (1) {
          HEAP32[($13_1 + $12_1 | 0) >> 2] = 0;
          $12_1 = $12_1 + 4 | 0;
          $13_1 = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
          $1_1 = $1_1 + -1 | 0;
          if ($1_1) {
           continue label$21
          }
          break label$21;
         };
        }
        HEAP32[($9_1 + 4 | 0) >> 2] = $16_1;
        $16_1 = $16_1 + -2 | 0;
       }
       HEAP32[($13_1 + $17_1 | 0) >> 2] = HEAP32[($15_1 + 36 | 0) >> 2] | 0;
       HEAP32[((HEAP32[($9_1 + 12 | 0) >> 2] | 0) + ($14_1 << 2 | 0) | 0) >> 2] = HEAP32[($15_1 + 40 | 0) >> 2] | 0;
       $14_1 = $14_1 + 1 | 0;
       break label$10;
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[$10_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($10_1, $15_1);
     }
     $14_1 = $12_1;
    }
    if ($14_1) {
     continue label$9
    }
    break label$9;
   };
  }
  global$0 = $11_1 + 32 | 0;
 }
 
 function $770($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $16_1 = 0, $21_1 = 0, $24_1 = 0, $27_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = 19396;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 8 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $21_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $21_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $24_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $24_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $27_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $27_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  $765($0_1 + 4 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $4_1 + 8 | 0 | 0, $4_1 + 40 | 0 | 0);
  $0_1 = $0_1 + 44 | 0;
  $765($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $4_1 + 8 | 0 | 0, $4_1 + 40 | 0 | 0);
  global$0 = $4_1 + 48 | 0;
 }
 
 function $771($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $14_1 = Math_fround(0), $17_1 = 0, $6_1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $13_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $26_1 = 0, $31_1 = 0, $34_1 = 0, $37_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $221_1 = 0, $226_1 = 0, $231_1 = 0, $234_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $26_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($5_1 + 16 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $26_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $31_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $31_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $34_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $34_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $37_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $5_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $37_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($1_1 + 60 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    $483($0_1 + 44 | 0 | 0, HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0);
    (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = $480($0_1 + 4 | 0 | 0, $5_1 + 16 | 0 | 0, $1_1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
    $6_1 = 1;
    break label$1;
   }
   $6_1 = 1;
   HEAP32[($0_1 + 128 | 0) >> 2] = (HEAP32[($0_1 + 128 | 0) >> 2] | 0) + 1 | 0;
   label$3 : {
    $7_1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
    if (Math_fround(HEAPF32[$7_1 >> 2]) <= Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]) ^ 1 | 0) {
     break label$3
    }
    if (Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]) >= Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) ^ 1 | 0) {
     break label$3
    }
    if (Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]) <= Math_fround(HEAPF32[(($5_1 + 16 | 0) + 20 | 0) >> 2]) ^ 1 | 0) {
     break label$3
    }
    if (Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]) >= Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) ^ 1 | 0) {
     break label$3
    }
    if (Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]) <= Math_fround(HEAPF32[(($5_1 + 16 | 0) + 24 | 0) >> 2]) ^ 1 | 0) {
     break label$3
    }
    if (Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]) >= Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) ^ 1 | 0) {
     break label$3
    }
    $8_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
    $9_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[$2_1 >> 2]);
    $11_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    $12_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    $14_1 = Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]);
    $15_1 = Math_fround($14_1 * Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]) - $9_1) * Math_fround(.5)));
    HEAPF32[($5_1 + 8 | 0) >> 2] = $15_1;
    $16_1 = Math_fround($14_1 * Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]) - $8_1) * Math_fround(.5)));
    HEAPF32[($5_1 + 4 | 0) >> 2] = $16_1;
    $14_1 = Math_fround($14_1 * Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]) - $13_1) * Math_fround(.5)));
    HEAPF32[$5_1 >> 2] = $14_1;
    $8_1 = Math_fround($11_1 - $8_1);
    label$4 : {
     if (Math_fround($10_1 - $13_1) < Math_fround(0.0) ^ 1 | 0) {
      break label$4
     }
     HEAPF32[$5_1 >> 2] = Math_fround(-$14_1);
    }
    $9_1 = Math_fround($12_1 - $9_1);
    label$5 : {
     if ($8_1 < Math_fround(0.0) ^ 1 | 0) {
      break label$5
     }
     HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(-$16_1);
    }
    label$6 : {
     if ($9_1 < Math_fround(0.0) ^ 1 | 0) {
      break label$6
     }
     HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(-$15_1);
    }
    $6_1 = 0;
    if (!($482($0_1 + 4 | 0 | 0, $7_1 | 0, $5_1 + 16 | 0 | 0, $5_1 | 0, Math_fround(Math_fround(.05000000074505806))) | 0)) {
     break label$1
    }
    $6_1 = 1;
    HEAP32[($0_1 + 132 | 0) >> 2] = (HEAP32[($0_1 + 132 | 0) >> 2] | 0) + 1 | 0;
    break label$1;
   }
   $481($0_1 + 4 | 0 | 0, $7_1 | 0, $5_1 + 16 | 0 | 0);
   HEAP32[($0_1 + 132 | 0) >> 2] = (HEAP32[($0_1 + 132 | 0) >> 2] | 0) + 1 | 0;
  }
  $7_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
  label$7 : {
   label$8 : {
    $17_1 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
    if (!$17_1) {
     break label$8
    }
    $17_1 = $17_1 + 56 | 0;
    break label$7;
   }
   $17_1 = ($0_1 + ((HEAP32[($1_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) + 84 | 0;
  }
  HEAP32[$17_1 >> 2] = $7_1;
  label$9 : {
   $7_1 = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
   if (!$7_1) {
    break label$9
   }
   HEAP32[($7_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
  }
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $221_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[($1_1 + 16 | 0) >> 2] = $221_1;
  HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $226_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $226_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $231_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 40 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $231_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $234_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[($1_1 + 32 | 0) >> 2] = $234_1;
  HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 52 | 0) >> 2] = 0;
  $3_1 = HEAP32[($0_1 + 104 | 0) >> 2] | 0;
  $2_1 = ($0_1 + ($3_1 << 2 | 0) | 0) + 84 | 0;
  HEAP32[($1_1 + 56 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  HEAP32[($1_1 + 60 | 0) >> 2] = $3_1;
  label$10 : {
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   if (!$3_1) {
    break label$10
   }
   HEAP32[($3_1 + 52 | 0) >> 2] = $1_1;
  }
  HEAP32[$2_1 >> 2] = $1_1;
  label$11 : {
   if (!$6_1) {
    break label$11
   }
   HEAP8[($0_1 + 154 | 0) >> 0] = 1;
   if (HEAPU8[($0_1 + 153 | 0) >> 0] | 0) {
    break label$11
   }
   HEAP32[$5_1 >> 2] = 19252;
   HEAP32[($5_1 + 4 | 0) >> 2] = $0_1;
   $2_1 = $0_1 + 44 | 0;
   $772($2_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0, $5_1 | 0);
   $772($0_1 + 4 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0, $5_1 | 0);
  }
  global$0 = $5_1 + 48 | 0;
 }
 
 function $772($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8_1 = 0, i64toi32_i32$2 = 0, $9_1 = 0, $10_1 = 0, $35_1 = 0, $108_1 = 0, $166_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   if (!$2_1) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0) > (127 | 0)) {
     break label$2
    }
    if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) > (127 | 0)) {
     break label$2
    }
    $4_1 = $79(1024 | 0, 16 | 0) | 0;
    label$3 : {
     $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     if (($5_1 | 0) < (1 | 0)) {
      break label$3
     }
     $6_1 = 0;
     label$4 : while (1) {
      i64toi32_i32$2 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $6_1 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $35_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $4_1 + $6_1 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $35_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $6_1 = $6_1 + 8 | 0;
      $5_1 = $5_1 + -1 | 0;
      if ($5_1) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $6_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$5
     }
     label$6 : {
      if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
       break label$6
      }
      $80($6_1 | 0);
     }
     HEAP32[($0_1 + 32 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 32 | 0) >> 2] = $4_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 128;
    HEAP8[($0_1 + 36 | 0) >> 0] = 1;
   }
   HEAP32[($0_1 + 24 | 0) >> 2] = 128;
   $6_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
   HEAP32[$6_1 >> 2] = $1_1;
   $2_1 = 124;
   $4_1 = 1;
   label$7 : while (1) {
    $7_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
    $8_1 = $4_1;
    $4_1 = $4_1 + -1 | 0;
    $9_1 = $4_1 << 3 | 0;
    $6_1 = $7_1 + $9_1 | 0;
    $1_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    $5_1 = HEAP32[$6_1 >> 2] | 0;
    label$8 : {
     if (($4_1 | 0) <= ($2_1 | 0)) {
      break label$8
     }
     label$9 : {
      $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      $10_1 = $6_1 << 1 | 0;
      if (($6_1 | 0) >= ($10_1 | 0)) {
       break label$9
      }
      if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) >= ($10_1 | 0)) {
       break label$9
      }
      label$10 : {
       label$11 : {
        if ($6_1) {
         break label$11
        }
        $7_1 = 0;
        break label$10;
       }
       $7_1 = $79($6_1 << 4 | 0 | 0, 16 | 0) | 0;
       $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
       if (($2_1 | 0) < (1 | 0)) {
        break label$10
       }
       $6_1 = 0;
       label$12 : while (1) {
        i64toi32_i32$2 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $6_1 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $108_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $7_1 + $6_1 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $108_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        $6_1 = $6_1 + 8 | 0;
        $2_1 = $2_1 + -1 | 0;
        if ($2_1) {
         continue label$12
        }
        break label$12;
       };
      }
      label$13 : {
       $6_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
       if (!$6_1) {
        break label$13
       }
       label$14 : {
        if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
         break label$14
        }
        $80($6_1 | 0);
       }
       HEAP32[($0_1 + 32 | 0) >> 2] = 0;
      }
      HEAP32[($0_1 + 32 | 0) >> 2] = $7_1;
      HEAP8[($0_1 + 36 | 0) >> 0] = 1;
      HEAP32[($0_1 + 28 | 0) >> 2] = $10_1;
     }
     HEAP32[($0_1 + 24 | 0) >> 2] = $10_1;
     $2_1 = $10_1 + -4 | 0;
    }
    label$15 : {
     label$16 : {
      if (($5_1 | 0) != ($1_1 | 0)) {
       break label$16
      }
      if (!(HEAP32[($5_1 + 40 | 0) >> 2] | 0)) {
       break label$15
      }
      $6_1 = $7_1 + $9_1 | 0;
      $4_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
      HEAP32[($6_1 + 4 | 0) >> 2] = $4_1;
      HEAP32[$6_1 >> 2] = $4_1;
      $6_1 = $8_1 << 3 | 0;
      $4_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $6_1 | 0;
      $1_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
      HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
      HEAP32[$4_1 >> 2] = $1_1;
      i64toi32_i32$2 = $5_1;
      i64toi32_i32$0 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
      $166_1 = i64toi32_i32$0;
      i64toi32_i32$0 = ($6_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0) + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $166_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $4_1 = $8_1 + 2 | 0;
      break label$15;
     }
     if (Math_fround(HEAPF32[$5_1 >> 2]) <= Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]) ^ 1 | 0) {
      break label$15
     }
     if (Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) >= Math_fround(HEAPF32[$1_1 >> 2]) ^ 1 | 0) {
      break label$15
     }
     if (Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]) <= Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]) ^ 1 | 0) {
      break label$15
     }
     if (Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) >= Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) ^ 1 | 0) {
      break label$15
     }
     if (Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]) <= Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]) ^ 1 | 0) {
      break label$15
     }
     if (Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) >= Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) ^ 1 | 0) {
      break label$15
     }
     $6_1 = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
     label$17 : {
      if (!(HEAP32[($5_1 + 40 | 0) >> 2] | 0)) {
       break label$17
      }
      $4_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
      label$18 : {
       if (!$6_1) {
        break label$18
       }
       $6_1 = $7_1 + $9_1 | 0;
       HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
       HEAP32[$6_1 >> 2] = $4_1;
       $4_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
       $6_1 = $8_1 << 3 | 0;
       $7_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $6_1 | 0;
       HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
       HEAP32[$7_1 >> 2] = $4_1;
       $4_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
       $7_1 = $6_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
       HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
       HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
       $5_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
       $6_1 = $6_1 + (HEAP32[($0_1 + 32 | 0) >> 2] | 0) | 0;
       HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
       HEAP32[($6_1 + 16 | 0) >> 2] = $5_1;
       $4_1 = $8_1 + 3 | 0;
       break label$15;
      }
      $6_1 = $7_1 + $9_1 | 0;
      HEAP32[($6_1 + 4 | 0) >> 2] = $1_1;
      HEAP32[$6_1 >> 2] = $4_1;
      $6_1 = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
      $5_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($8_1 << 3 | 0) | 0;
      HEAP32[($5_1 + 4 | 0) >> 2] = $1_1;
      HEAP32[$5_1 >> 2] = $6_1;
      $4_1 = $8_1 + 1 | 0;
      break label$15;
     }
     label$19 : {
      if (!$6_1) {
       break label$19
      }
      $6_1 = $7_1 + $9_1 | 0;
      HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[$6_1 >> 2] = $5_1;
      $6_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($8_1 << 3 | 0) | 0;
      HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[$6_1 >> 2] = $5_1;
      $4_1 = $8_1 + 1 | 0;
      break label$15;
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($3_1, $5_1, $1_1);
    }
    if ($4_1) {
     continue label$7
    }
    break label$7;
   };
  }
 }
 
 function $773($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $774($0_1 | 0, $1_1 | 0);
  $775($0_1 | 0, $1_1 | 0);
 }
 
 function $774($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $5_1 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $10_1 = 0, $12_1 = Math_fround(0), $111_1 = 0, $9_1 = 0, $9$hi = 0, $116_1 = 0, $121_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = $0_1 + 4 | 0;
  $477($3_1 | 0, ((Math_imul(HEAP32[($0_1 + 112 | 0) >> 2] | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0) / (100 | 0) | 0) + 1 | 0 | 0);
  label$1 : {
   if (!(HEAP32[($0_1 + 124 | 0) >> 2] | 0)) {
    break label$1
   }
   $4_1 = ((Math_imul(HEAP32[($0_1 + 108 | 0) >> 2] | 0, HEAP32[($0_1 + 56 | 0) >> 2] | 0) | 0) / (100 | 0) | 0) + 1 | 0;
   $477($0_1 + 44 | 0 | 0, $4_1 | 0);
   $4_1 = (HEAP32[($0_1 + 124 | 0) >> 2] | 0) - $4_1 | 0;
   HEAP32[($0_1 + 124 | 0) >> 2] = ($4_1 | 0) > (0 | 0) ? $4_1 : 0;
  }
  $4_1 = ((HEAP32[($0_1 + 104 | 0) >> 2] | 0) + 1 | 0 | 0) % (2 | 0) | 0;
  HEAP32[($0_1 + 104 | 0) >> 2] = $4_1;
  label$2 : {
   $4_1 = HEAP32[(($0_1 + ($4_1 << 2 | 0) | 0) + 84 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$2
   }
   $5_1 = $0_1 + 44 | 0;
   $6_1 = $2_1 + 16 | 0;
   label$3 : while (1) {
    $7_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
    label$4 : {
     label$5 : {
      $8_1 = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
      if (!$8_1) {
       break label$5
      }
      $8_1 = $8_1 + 56 | 0;
      break label$4;
     }
     $8_1 = ($0_1 + ((HEAP32[($4_1 + 60 | 0) >> 2] | 0) << 2 | 0) | 0) + 84 | 0;
    }
    HEAP32[$8_1 >> 2] = $7_1;
    label$6 : {
     $8_1 = HEAP32[($4_1 + 56 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$6
     }
     HEAP32[($8_1 + 52 | 0) >> 2] = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = 0;
    HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
    label$7 : {
     $8_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$7
     }
     HEAP32[($8_1 + 52 | 0) >> 2] = $4_1;
    }
    HEAP32[($0_1 + 92 | 0) >> 2] = $4_1;
    $483($3_1 | 0, HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0);
    i64toi32_i32$2 = $4_1 + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $111_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $111_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
    $116_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1;
    HEAP32[$6_1 >> 2] = $116_1;
    HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1 + 40 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $121_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $6_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $121_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$1 = $2_1;
    HEAP32[$2_1 >> 2] = $9_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $480($5_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
    HEAP32[($4_1 + 60 | 0) >> 2] = 2;
    HEAP32[($4_1 + 48 | 0) >> 2] = $8_1;
    $4_1 = $7_1;
    if ($4_1) {
     continue label$3
    }
    break label$3;
   };
   HEAP8[($0_1 + 154 | 0) >> 0] = 1;
   HEAP32[($0_1 + 124 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
  }
  HEAP32[$2_1 >> 2] = 19252;
  HEAP32[($2_1 + 4 | 0) >> 2] = $0_1;
  label$8 : {
   if (!(HEAPU8[($0_1 + 153 | 0) >> 0] | 0)) {
    break label$8
   }
   $772($3_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0, $2_1 | 0);
   if (!(HEAPU8[($0_1 + 153 | 0) >> 0] | 0)) {
    break label$8
   }
   $4_1 = HEAP32[$3_1 >> 2] | 0;
   $772($3_1 | 0, $4_1 | 0, $4_1 | 0, $2_1 | 0);
  }
  label$9 : {
   if (!(HEAPU8[($0_1 + 154 | 0) >> 0] | 0)) {
    break label$9
   }
   $4_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   $8_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($4_1) | 0;
   $6_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
   if (($6_1 | 0) < (1 | 0)) {
    break label$9
   }
   $10_1 = $0_1 + 144 | 0;
   label$10 : {
    label$11 : {
     $4_1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
     $7_1 = (Math_imul(HEAP32[($0_1 + 116 | 0) >> 2] | 0, $6_1) | 0) / (100 | 0) | 0;
     $4_1 = ($4_1 | 0) > ($7_1 | 0) ? $4_1 : $7_1;
     $7_1 = ($6_1 | 0) < ($4_1 | 0) ? $6_1 : $4_1;
     if (($7_1 | 0) < (1 | 0)) {
      break label$11
     }
     $4_1 = 0;
     label$12 : while (1) {
      label$13 : {
       label$14 : {
        $6_1 = (HEAP32[($8_1 + 12 | 0) >> 2] | 0) + ((((HEAP32[$10_1 >> 2] | 0) + $4_1 | 0 | 0) % ($6_1 | 0) | 0) << 4 | 0) | 0;
        $3_1 = HEAP32[$6_1 >> 2] | 0;
        $5_1 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
        $6_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
        $11_1 = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
        if (Math_fround(HEAPF32[$5_1 >> 2]) <= Math_fround(HEAPF32[($11_1 + 16 | 0) >> 2]) ^ 1 | 0) {
         break label$14
        }
        if (Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]) >= Math_fround(HEAPF32[$11_1 >> 2]) ^ 1 | 0) {
         break label$14
        }
        if (Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]) <= Math_fround(HEAPF32[($11_1 + 20 | 0) >> 2]) ^ 1 | 0) {
         break label$14
        }
        if (Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]) >= Math_fround(HEAPF32[($11_1 + 4 | 0) >> 2]) ^ 1 | 0) {
         break label$14
        }
        if (Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]) <= Math_fround(HEAPF32[($11_1 + 24 | 0) >> 2]) ^ 1 | 0) {
         break label$14
        }
        if (Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]) >= Math_fround(HEAPF32[($11_1 + 8 | 0) >> 2])) {
         break label$13
        }
       }
       $5_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($5_1, $3_1, $6_1, $1_1) | 0;
       $4_1 = $4_1 + -1 | 0;
       $7_1 = $7_1 + -1 | 0;
      }
      $6_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
      $4_1 = $4_1 + 1 | 0;
      if (($4_1 | 0) < ($7_1 | 0)) {
       continue label$12
      }
      break label$12;
     };
     $10_1 = $0_1 + 144 | 0;
     $4_1 = 0;
     if (($6_1 | 0) <= (0 | 0)) {
      break label$10
     }
    }
    $4_1 = ((HEAP32[$10_1 >> 2] | 0) + $7_1 | 0 | 0) % ($6_1 | 0) | 0;
   }
   HEAP32[$10_1 >> 2] = $4_1;
  }
  HEAP8[($0_1 + 154 | 0) >> 0] = 0;
  HEAP32[($0_1 + 120 | 0) >> 2] = 1;
  HEAP32[($0_1 + 140 | 0) >> 2] = (HEAP32[($0_1 + 140 | 0) >> 2] | 0) + 1 | 0;
  $4_1 = HEAP32[($0_1 + 132 | 0) >> 2] | 0;
  label$15 : {
   label$16 : {
    $7_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
    if ($7_1) {
     break label$16
    }
    $12_1 = Math_fround(0.0);
    break label$15;
   }
   $12_1 = Math_fround(Math_fround($4_1 >>> 0) / Math_fround($7_1 >>> 0));
  }
  HEAPF32[($0_1 + 136 | 0) >> 2] = $12_1;
  HEAP32[($0_1 + 132 | 0) >> 2] = $4_1 >>> 1 | 0;
  HEAP32[($0_1 + 128 | 0) >> 2] = $7_1 >>> 1 | 0;
  global$0 = $2_1 + 32 | 0;
 }
 
 function $775($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0, $9_1 = 0, $5_1 = 0, $11_1 = 0, i64toi32_i32$0 = 0, $12_1 = 0, $7_1 = 0, $8_1 = 0, $13_1 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $10_1 = 0, i64toi32_i32$2 = 0, $170_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($3_1) | 0)) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
    $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($3_1) | 0;
    $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    if (($5_1 | 0) < (2 | 0)) {
     break label$2
    }
    $776($4_1 | 0, $2_1 + 8 | 0 | 0, 0 | 0, $5_1 + -1 | 0 | 0);
    $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   }
   label$3 : {
    if (($5_1 | 0) < (1 | 0)) {
     break label$3
    }
    $6_1 = 0;
    $7_1 = 0;
    $8_1 = 0;
    $9_1 = 0;
    $10_1 = 0;
    label$4 : while (1) {
     $3_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + $6_1 | 0;
     $11_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     label$5 : {
      label$6 : {
       label$7 : {
        $12_1 = HEAP32[$3_1 >> 2] | 0;
        if (($12_1 | 0) != ($9_1 | 0)) {
         break label$7
        }
        if (($11_1 | 0) == ($10_1 | 0)) {
         break label$6
        }
       }
       label$8 : {
        $9_1 = HEAP32[($12_1 + 48 | 0) >> 2] | 0;
        $13_1 = HEAP32[($11_1 + 48 | 0) >> 2] | 0;
        if (Math_fround(HEAPF32[$9_1 >> 2]) <= Math_fround(HEAPF32[($13_1 + 16 | 0) >> 2]) ^ 1 | 0) {
         break label$8
        }
        if (Math_fround(HEAPF32[($9_1 + 16 | 0) >> 2]) >= Math_fround(HEAPF32[$13_1 >> 2]) ^ 1 | 0) {
         break label$8
        }
        if (Math_fround(HEAPF32[($9_1 + 4 | 0) >> 2]) <= Math_fround(HEAPF32[($13_1 + 20 | 0) >> 2]) ^ 1 | 0) {
         break label$8
        }
        if (Math_fround(HEAPF32[($9_1 + 20 | 0) >> 2]) >= Math_fround(HEAPF32[($13_1 + 4 | 0) >> 2]) ^ 1 | 0) {
         break label$8
        }
        if (Math_fround(HEAPF32[($9_1 + 8 | 0) >> 2]) <= Math_fround(HEAPF32[($13_1 + 24 | 0) >> 2]) ^ 1 | 0) {
         break label$8
        }
        $10_1 = $11_1;
        if (!(Math_fround(HEAPF32[($9_1 + 24 | 0) >> 2]) >= Math_fround(HEAPF32[($13_1 + 8 | 0) >> 2]))) {
         break label$6
        }
        $10_1 = $11_1;
        break label$5;
       }
       $10_1 = $11_1;
      }
      $11_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$11_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($11_1, $3_1, $1_1);
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = 0;
      HEAP32[$3_1 >> 2] = 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $7_1 = $7_1 + 1 | 0;
      $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     }
     $6_1 = $6_1 + 16 | 0;
     $9_1 = $12_1;
     $8_1 = $8_1 + 1 | 0;
     if (($8_1 | 0) < ($5_1 | 0)) {
      continue label$4
     }
     break label$4;
    };
    label$9 : {
     if (($5_1 | 0) < (2 | 0)) {
      break label$9
     }
     $776($4_1 | 0, $2_1 | 0, 0 | 0, $5_1 + -1 | 0 | 0);
     $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    }
    $9_1 = $5_1 - $7_1 | 0;
    label$10 : {
     if (($7_1 | 0) > (-1 | 0)) {
      break label$10
     }
     label$11 : {
      if ((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) >= ($9_1 | 0)) {
       break label$11
      }
      label$12 : {
       label$13 : {
        if ($9_1) {
         break label$13
        }
        $8_1 = 0;
        $12_1 = $5_1;
        break label$12;
       }
       $8_1 = $79($9_1 << 4 | 0 | 0, 16 | 0) | 0;
       $12_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      }
      label$14 : {
       if (($12_1 | 0) < (1 | 0)) {
        break label$14
       }
       $3_1 = 12;
       label$15 : while (1) {
        $6_1 = $8_1 + $3_1 | 0;
        $11_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + $3_1 | 0;
        HEAP32[($6_1 + -12 | 0) >> 2] = HEAP32[($11_1 + -12 | 0) >> 2] | 0;
        i64toi32_i32$2 = $11_1 + -8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $170_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $6_1 + -8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $170_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        HEAP32[$6_1 >> 2] = HEAP32[$11_1 >> 2] | 0;
        $3_1 = $3_1 + 16 | 0;
        $12_1 = $12_1 + -1 | 0;
        if ($12_1) {
         continue label$15
        }
        break label$15;
       };
      }
      label$16 : {
       $3_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$16
       }
       label$17 : {
        if (!(HEAPU8[($4_1 + 16 | 0) >> 0] | 0)) {
         break label$17
        }
        $80($3_1 | 0);
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = 0;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $8_1;
      HEAP8[($4_1 + 16 | 0) >> 0] = 1;
      HEAP32[($4_1 + 8 | 0) >> 2] = $9_1;
     }
     $3_1 = $5_1 << 4 | 0;
     label$18 : while (1) {
      $6_1 = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) + $3_1 | 0;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$1 = 0;
      HEAP32[$6_1 >> 2] = 0;
      HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$0 = $6_1 + 8 | 0;
      i64toi32_i32$1 = 0;
      HEAP32[i64toi32_i32$0 >> 2] = 0;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $3_1 = $3_1 + 16 | 0;
      $6_1 = $7_1 + 1 | 0;
      $11_1 = $6_1 >>> 0 >= $7_1 >>> 0;
      $7_1 = $6_1;
      if ($11_1) {
       continue label$18
      }
      break label$18;
     };
    }
    $5_1 = $9_1;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $5_1;
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $776($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $12_1 = 0, $11_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $10_1 = 0, $8_1 = 0, $16_1 = 0, i64toi32_i32$0 = 0, $9_1 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $7_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $17_1 = 0, $18_1 = 0, $18$hi = 0, $235_1 = 0, $240_1 = 0;
  label$1 : while (1) {
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $5_1 = $2_1;
   $6_1 = $4_1 + ((($2_1 + $3_1 | 0 | 0) / (2 | 0) | 0) << 4 | 0) | 0;
   $7_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
   $8_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
   $9_1 = HEAP32[$6_1 >> 2] | 0;
   $10_1 = $3_1;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if ($9_1) {
       break label$4
      }
      $6_1 = $4_1 + ($2_1 << 4 | 0) | 0;
      label$5 : while (1) {
       $11_1 = -1;
       $12_1 = -1;
       label$6 : {
        $13_1 = HEAP32[$6_1 >> 2] | 0;
        if (!$13_1) {
         break label$6
        }
        $12_1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
       }
       label$7 : {
        $14_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
        if (!$14_1) {
         break label$7
        }
        $11_1 = HEAP32[($14_1 + 12 | 0) >> 2] | 0;
       }
       label$8 : {
        label$9 : {
         if ($8_1) {
          break label$9
         }
         $15_1 = -1;
         break label$8;
        }
        $15_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
       }
       label$10 : {
        if (($12_1 | 0) > (-1 | 0)) {
         break label$10
        }
        label$11 : {
         if (($11_1 | 0) > ($15_1 | 0)) {
          break label$11
         }
         if ($13_1) {
          break label$11
         }
         if (($14_1 | 0) != ($8_1 | 0)) {
          break label$3
         }
         if ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 > $7_1 >>> 0) {
          break label$10
         }
         break label$3;
        }
        if ($13_1) {
         break label$3
        }
        if (($11_1 | 0) <= ($15_1 | 0)) {
         break label$3
        }
       }
       $6_1 = $6_1 + 16 | 0;
       $2_1 = $2_1 + 1 | 0;
       continue label$5;
      };
     }
     $6_1 = $4_1 + ($2_1 << 4 | 0) | 0;
     $16_1 = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
     label$12 : while (1) {
      $11_1 = -1;
      $12_1 = -1;
      label$13 : {
       $13_1 = HEAP32[$6_1 >> 2] | 0;
       if (!$13_1) {
        break label$13
       }
       $12_1 = HEAP32[($13_1 + 12 | 0) >> 2] | 0;
      }
      label$14 : {
       $14_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
       if (!$14_1) {
        break label$14
       }
       $11_1 = HEAP32[($14_1 + 12 | 0) >> 2] | 0;
      }
      label$15 : {
       label$16 : {
        if ($8_1) {
         break label$16
        }
        $15_1 = -1;
        break label$15;
       }
       $15_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
      }
      label$17 : {
       if (($12_1 | 0) > ($16_1 | 0)) {
        break label$17
       }
       label$18 : {
        if (($11_1 | 0) > ($15_1 | 0)) {
         break label$18
        }
        if (($13_1 | 0) != ($9_1 | 0)) {
         break label$18
        }
        if (($14_1 | 0) != ($8_1 | 0)) {
         break label$3
        }
        if ((HEAP32[($6_1 + 8 | 0) >> 2] | 0) >>> 0 <= $7_1 >>> 0) {
         break label$3
        }
        break label$17;
       }
       if (($13_1 | 0) != ($9_1 | 0)) {
        break label$3
       }
       if (($11_1 | 0) <= ($15_1 | 0)) {
        break label$3
       }
      }
      $6_1 = $6_1 + 16 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue label$12;
     };
    }
    label$19 : {
     label$20 : {
      if ($9_1) {
       break label$20
      }
      $12_1 = $4_1 + ($10_1 << 4 | 0) | 0;
      label$21 : while (1) {
       $13_1 = -1;
       $11_1 = -1;
       label$22 : {
        $14_1 = HEAP32[$12_1 >> 2] | 0;
        if (!$14_1) {
         break label$22
        }
        $11_1 = HEAP32[($14_1 + 12 | 0) >> 2] | 0;
       }
       label$23 : {
        if (!$8_1) {
         break label$23
        }
        $13_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
       }
       label$24 : {
        label$25 : {
         $15_1 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
         if ($15_1) {
          break label$25
         }
         $16_1 = -1;
         break label$24;
        }
        $16_1 = HEAP32[($15_1 + 12 | 0) >> 2] | 0;
       }
       label$26 : {
        if (($11_1 | 0) < (-1 | 0)) {
         break label$26
        }
        label$27 : {
         if (($13_1 | 0) > ($16_1 | 0)) {
          break label$27
         }
         if ($14_1) {
          break label$27
         }
         if (($8_1 | 0) != ($15_1 | 0)) {
          break label$19
         }
         if ((HEAP32[($12_1 + 8 | 0) >> 2] | 0) >>> 0 < $7_1 >>> 0) {
          break label$26
         }
         break label$19;
        }
        if ($14_1) {
         break label$19
        }
        if (($13_1 | 0) <= ($16_1 | 0)) {
         break label$19
        }
       }
       $12_1 = $12_1 + -16 | 0;
       $10_1 = $10_1 + -1 | 0;
       continue label$21;
      };
     }
     $12_1 = $4_1 + ($10_1 << 4 | 0) | 0;
     $17_1 = HEAP32[($9_1 + 12 | 0) >> 2] | 0;
     label$28 : while (1) {
      $13_1 = -1;
      $11_1 = -1;
      label$29 : {
       $14_1 = HEAP32[$12_1 >> 2] | 0;
       if (!$14_1) {
        break label$29
       }
       $11_1 = HEAP32[($14_1 + 12 | 0) >> 2] | 0;
      }
      label$30 : {
       if (!$8_1) {
        break label$30
       }
       $13_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
      }
      label$31 : {
       label$32 : {
        $15_1 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
        if ($15_1) {
         break label$32
        }
        $16_1 = -1;
        break label$31;
       }
       $16_1 = HEAP32[($15_1 + 12 | 0) >> 2] | 0;
      }
      label$33 : {
       if (($17_1 | 0) > ($11_1 | 0)) {
        break label$33
       }
       label$34 : {
        if (($13_1 | 0) > ($16_1 | 0)) {
         break label$34
        }
        if (($9_1 | 0) != ($14_1 | 0)) {
         break label$34
        }
        if (($8_1 | 0) != ($15_1 | 0)) {
         break label$19
        }
        if ((HEAP32[($12_1 + 8 | 0) >> 2] | 0) >>> 0 >= $7_1 >>> 0) {
         break label$19
        }
        break label$33;
       }
       if (($9_1 | 0) != ($14_1 | 0)) {
        break label$19
       }
       if (($13_1 | 0) <= ($16_1 | 0)) {
        break label$19
       }
      }
      $12_1 = $12_1 + -16 | 0;
      $10_1 = $10_1 + -1 | 0;
      continue label$28;
     };
    }
    label$35 : {
     if (($2_1 | 0) > ($10_1 | 0)) {
      break label$35
     }
     $11_1 = $4_1 + ($2_1 << 4 | 0) | 0;
     i64toi32_i32$2 = $11_1;
     i64toi32_i32$0 = HEAP32[($11_1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($11_1 + 8 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$0;
     $18$hi = i64toi32_i32$1;
     $11_1 = HEAP32[($11_1 + 12 | 0) >> 2] | 0;
     $13_1 = HEAP32[$6_1 >> 2] | 0;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$1 = HEAP32[$12_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
     $235_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $6_1;
     HEAP32[$6_1 >> 2] = $235_1;
     HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $12_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $240_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $6_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $240_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $6_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($10_1 << 4 | 0) | 0;
     HEAP32[($6_1 + 12 | 0) >> 2] = $11_1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$0 = $6_1;
     HEAP32[($6_1 + 4 | 0) >> 2] = $18_1;
     HEAP32[($6_1 + 8 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[$6_1 >> 2] = $13_1;
     $10_1 = $10_1 + -1 | 0;
     $2_1 = $2_1 + 1 | 0;
    }
    label$36 : {
     if (($2_1 | 0) > ($10_1 | 0)) {
      break label$36
     }
     $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   label$37 : {
    if (($10_1 | 0) <= ($5_1 | 0)) {
     break label$37
    }
    $776($0_1 | 0, $1_1 | 0, $5_1 | 0, $10_1 | 0);
   }
   if (($2_1 | 0) < ($3_1 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $777($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 96 | 0) >> 2] | 0 | 0;
 }
 
 function $778($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 96 | 0) >> 2] | 0 | 0;
 }
 
 function $779($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = Math_fround(0), $3_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $4_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$2
    }
    $4_1 = Math_fround(HEAPF32[$0_1 >> 2]);
    label$3 : {
     if (!$3_1) {
      break label$3
     }
     $5_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
     $6_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
     $6_1 = $5_1 > $6_1 ? $5_1 : $6_1;
     $5_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
     $7_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
     $7_1 = $5_1 < $7_1 ? $5_1 : $7_1;
     $5_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
     $8_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
     $8_1 = $5_1 < $8_1 ? $5_1 : $8_1;
     $5_1 = Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]);
     $9_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
     $9_1 = $5_1 > $9_1 ? $5_1 : $9_1;
     $5_1 = Math_fround(HEAPF32[$3_1 >> 2]);
     $4_1 = $4_1 < $5_1 ? $4_1 : $5_1;
     label$4 : {
      $5_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
      $10_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
      if (!($5_1 > $10_1 ^ 1 | 0)) {
       break label$4
      }
      $5_1 = $10_1;
      break label$1;
     }
     break label$1;
    }
    $10_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
    $9_1 = Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
    $7_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
    $8_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
    break label$1;
   }
   label$5 : {
    if ($3_1) {
     break label$5
    }
    $4_1 = Math_fround(0.0);
    $8_1 = Math_fround(0.0);
    $7_1 = Math_fround(0.0);
    $11_1 = Math_fround(0.0);
    $9_1 = Math_fround(0.0);
    $6_1 = Math_fround(0.0);
    $5_1 = Math_fround(0.0);
    $10_1 = Math_fround(0.0);
    break label$1;
   }
   $10_1 = Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[($3_1 + 16 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
   $4_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  }
  HEAPF32[($1_1 + 12 | 0) >> 2] = $11_1;
  HEAPF32[($1_1 + 8 | 0) >> 2] = $7_1;
  HEAPF32[($1_1 + 4 | 0) >> 2] = $8_1;
  HEAPF32[$1_1 >> 2] = $4_1;
  HEAPF32[($2_1 + 12 | 0) >> 2] = $10_1;
  HEAPF32[($2_1 + 8 | 0) >> 2] = $5_1;
  HEAPF32[($2_1 + 4 | 0) >> 2] = $6_1;
  HEAPF32[$2_1 >> 2] = $9_1;
 }
 
 function $780($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0) != (0 - (HEAP32[($0_1 + 56 | 0) >> 2] | 0) | 0 | 0)) {
    break label$1
   }
   $476($0_1 + 4 | 0 | 0);
   $476($0_1 + 44 | 0 | 0);
   $4_1 = 256;
   HEAP8[($0_1 + 153 | 0) >> 0] = $4_1;
   HEAP8[($0_1 + 154 | 0) >> 0] = $4_1 >>> 8 | 0;
   HEAP32[($0_1 + 124 | 0) >> 2] = 0;
   HEAP32[($0_1 + 104 | 0) >> 2] = 0;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 1;
   HEAP32[($0_1 + 116 | 0) >> 2] = 10;
   HEAP32[($0_1 + 120 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 108 | 0) >> 2] = 1;
   HEAP32[($0_1 + 112 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0_1 + 84 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0_1 + 92 | 0) >> 2] = 0;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 128 | 0) >> 2] = 0;
   HEAP32[($0_1 + 132 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0_1 + 136 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0_1 + 144 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $781($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $782($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $783($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   if (($1_1 | 0) == ($2_1 | 0)) {
    break label$1
   }
   $3_1 = HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($3_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0, HEAP32[($2_1 + 36 | 0) >> 2] | 0) | 0;
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   HEAP32[($1_1 + 120 | 0) >> 2] = (HEAP32[($1_1 + 120 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function $784($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $1_1, HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0);
 }
 
 function $785($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $786($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
 }
 
 function $787($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $788($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, HEAP32[($1_1 + 36 | 0) >> 2] | 0) | 0;
 }
 
 function $789($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  return Math_fround(Math_fround(($0_1 ? Math_fround(-$1_1) : $1_1) * $1_1));
 }
 
 function $790($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround($789($0_1 | 0, Math_fround(Math_fround(1584563250285286751870879.0e5)))));
 }
 
 function $791($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround($789($0_1 | 0, Math_fround(Math_fround(2.524354896707238e-29)))));
 }
 
 function $792($0_1) {
  $0_1 = Math_fround($0_1);
  $0_1 = Math_fround($0_1 - $0_1);
  return Math_fround(Math_fround($0_1 / $0_1));
 }
 
 function $793($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $5_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0.0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $7_1 = Math_fround(0), i64toi32_i32$5 = 0, $3_1 = 0, $6_1 = 0, $9_1 = 0.0, i64toi32_i32$4 = 0, $10_1 = 0.0, $11_1 = 0, $11$hi = 0, $24_1 = 0, $202_1 = 0.0, $207$hi = 0, $209$hi = 0, $215_1 = 0, $215$hi = 0;
  $2_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(0));
  $3_1 = $2_1 << 1 | 0;
  $4_1 = $3_1 + -1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $5_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(0));
        if (($5_1 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
         break label$6
        }
        $6_1 = 0;
        if ($4_1 >>> 0 > -16777218 >>> 0) {
         break label$5
        }
        break label$3;
       }
       if ($4_1 >>> 0 < -16777217 >>> 0) {
        break label$4
       }
      }
      $7_1 = Math_fround(1.0);
      if (($5_1 | 0) == (1065353216 | 0)) {
       break label$2
      }
      if (!$3_1) {
       break label$2
      }
      label$7 : {
       label$8 : {
        $5_1 = $5_1 << 1 | 0;
        if ($5_1 >>> 0 > -16777216 >>> 0) {
         break label$8
        }
        if ($3_1 >>> 0 < -16777215 >>> 0) {
         break label$7
        }
       }
       return Math_fround(Math_fround($0_1 + $1_1));
      }
      if (($5_1 | 0) == (2130706432 | 0)) {
       break label$2
      }
      return Math_fround((($2_1 ^ -1 | 0) >>> 31 | 0 | 0) == ($5_1 >>> 0 < 2130706432 >>> 0 | 0) ? Math_fround(0.0) : Math_fround($1_1 * $1_1));
     }
     label$9 : {
      if ((($5_1 << 1 | 0) + -1 | 0) >>> 0 < -16777217 >>> 0) {
       break label$9
      }
      $7_1 = Math_fround($0_1 * $0_1);
      label$10 : {
       if (($5_1 | 0) > (-1 | 0)) {
        break label$10
       }
       $5_1 = ($2_1 >>> 23 | 0) & 255 | 0;
       if (($5_1 + -127 | 0) >>> 0 > 23 >>> 0) {
        break label$10
       }
       $5_1 = 1 << (150 - $5_1 | 0) | 0;
       $7_1 = $5_1 & $2_1 | 0 ? (($5_1 + -1 | 0) & $2_1 | 0 ? $7_1 : Math_fround(-$7_1)) : $7_1;
      }
      if (($2_1 | 0) > (-1 | 0)) {
       break label$2
      }
      return Math_fround(Math_fround(Math_fround(1.0) / $7_1));
     }
     $6_1 = 0;
     label$11 : {
      if (($5_1 | 0) > (-1 | 0)) {
       break label$11
      }
      $4_1 = ($2_1 >>> 23 | 0) & 255 | 0;
      if ($4_1 >>> 0 < 127 >>> 0) {
       break label$1
      }
      label$12 : {
       label$13 : {
        if ($4_1 >>> 0 > 150 >>> 0) {
         break label$13
        }
        $4_1 = 1 << (150 - $4_1 | 0) | 0;
        if (($4_1 + -1 | 0) & $2_1 | 0) {
         break label$1
        }
        $6_1 = 65536;
        if ($4_1 & $2_1 | 0) {
         break label$12
        }
       }
       $6_1 = 0;
      }
      $5_1 = $5_1 & 2147483647 | 0;
     }
     if ($5_1 >>> 0 > 8388607 >>> 0) {
      break label$3
     }
     $5_1 = ((wasm2js_scratch_store_f32(Math_fround($0_1 * Math_fround(8388608.0))), wasm2js_scratch_load_i32(0)) & 2147483647 | 0) + -192937984 | 0;
    }
    label$14 : {
     $4_1 = $5_1 + -1060306944 | 0;
     $3_1 = ($4_1 >>> 15 | 0) & 240 | 0;
     $8_1 = +HEAPF64[($3_1 + 19464 | 0) >> 3] * +(wasm2js_scratch_store_i32(0, $5_1 - ($4_1 & -8388608 | 0) | 0), wasm2js_scratch_load_f32()) + -1.0;
     $9_1 = $8_1 * $8_1;
     $8_1 = ((+HEAPF64[(0 + 19728 | 0) >> 3] + +HEAPF64[(0 + 19720 | 0) >> 3] * $8_1) * ($9_1 * $9_1) + ($9_1 * (+HEAPF64[(0 + 19744 | 0) >> 3] + +HEAPF64[(0 + 19736 | 0) >> 3] * $8_1) + (+HEAPF64[($3_1 + 19472 | 0) >> 3] + +($4_1 >> 23 | 0 | 0) + $8_1 * +HEAPF64[(0 + 19752 | 0) >> 3]))) * +$1_1;
     wasm2js_scratch_store_f64(+$8_1);
     i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$1 = 2147450880;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     i64toi32_i32$2 = 1079967744;
     i64toi32_i32$3 = 1;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$14
     }
     label$15 : {
      if ($8_1 > 127.99999995700433 ^ 1 | 0) {
       break label$15
      }
      return Math_fround(Math_fround($790($6_1 | 0)));
     }
     if ($8_1 <= -150.0 ^ 1 | 0) {
      break label$14
     }
     return Math_fround(Math_fround($791($6_1 | 0)));
    }
    $9_1 = +HEAPF64[(0 + 20016 | 0) >> 3];
    $10_1 = $8_1 + $9_1;
    $8_1 = $8_1 - ($10_1 - $9_1);
    $202_1 = $8_1 * $8_1 * (+HEAPF64[(0 + 20032 | 0) >> 3] + +HEAPF64[(0 + 20024 | 0) >> 3] * $8_1) + ($8_1 * +HEAPF64[(0 + 20040 | 0) >> 3] + 1.0);
    wasm2js_scratch_store_f64(+$10_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $11_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $207$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$1 = $207$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 47;
    i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
     $24_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $209$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $11$hi;
    i64toi32_i32$5 = (($11_1 & 31 | 0) << 3 | 0) + 19760 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $215_1 = i64toi32_i32$3;
    $215$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $209$hi;
    i64toi32_i32$5 = $24_1;
    i64toi32_i32$3 = $215$hi;
    i64toi32_i32$2 = $215_1;
    i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
    $7_1 = Math_fround($202_1 * +wasm2js_scratch_load_f64());
   }
   return Math_fround($7_1);
  }
  return Math_fround(Math_fround($792(Math_fround($0_1))));
 }
 
 function $794($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = Math_fround(0), $2_1 = 0, $1_1 = 0, $4_1 = Math_fround(0);
  label$1 : {
   $1_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(0));
   $2_1 = $1_1 & 2147483647 | 0;
   if ($2_1 >>> 0 < 1065353216 >>> 0) {
    break label$1
   }
   label$2 : {
    if (($2_1 | 0) != (1065353216 | 0)) {
     break label$2
    }
    return Math_fround(($1_1 | 0) < (0 | 0) ? Math_fround(3.141592502593994) : Math_fround(0.0));
   }
   return Math_fround(Math_fround(Math_fround(0.0) / Math_fround($0_1 - $0_1)));
  }
  label$3 : {
   label$4 : {
    if ($2_1 >>> 0 > 1056964607 >>> 0) {
     break label$4
    }
    $3_1 = Math_fround(1.570796251296997);
    if ($2_1 >>> 0 < 847249409 >>> 0) {
     break label$3
    }
    $3_1 = Math_fround($0_1 * $0_1);
    return Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(7.549789415861596e-08) - Math_fround(Math_fround(Math_fround($3_1 * Math_fround(Math_fround($3_1 * Math_fround(Math_fround($3_1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($3_1 * Math_fround(-.7066296339035034)) + Math_fround(1.0))) * $0_1)) - $0_1) + Math_fround(1.570796251296997)));
   }
   label$5 : {
    if (($1_1 | 0) > (-1 | 0)) {
     break label$5
    }
    $0_1 = Math_fround(Math_fround($0_1 + Math_fround(1.0)) * Math_fround(.5));
    $3_1 = Math_fround($492(Math_fround($0_1)));
    $0_1 = Math_fround(Math_fround(1.570796251296997) - Math_fround($3_1 + Math_fround(Math_fround($3_1 * Math_fround(Math_fround($0_1 * Math_fround(Math_fround($0_1 * Math_fround(Math_fround($0_1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($0_1 * Math_fround(-.7066296339035034)) + Math_fround(1.0)))) + Math_fround(-7.549789415861596e-08))));
    return Math_fround(Math_fround($0_1 + $0_1));
   }
   $0_1 = Math_fround(Math_fround(Math_fround(1.0) - $0_1) * Math_fround(.5));
   $4_1 = Math_fround($492(Math_fround($0_1)));
   $3_1 = (wasm2js_scratch_store_i32(0, (wasm2js_scratch_store_f32($4_1), wasm2js_scratch_load_i32(0)) & -4096 | 0), wasm2js_scratch_load_f32());
   $0_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($0_1 * Math_fround(Math_fround($0_1 * Math_fround(Math_fround($0_1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($0_1 * Math_fround(-.7066296339035034)) + Math_fround(1.0))) * $4_1) + Math_fround(Math_fround($0_1 - Math_fround($3_1 * $3_1)) / Math_fround($4_1 + $3_1))) + $3_1);
   $3_1 = Math_fround($0_1 + $0_1);
  }
  return Math_fround($3_1);
 }
 
 function $795($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0;
  $305($0_1 | 0) | 0;
  HEAP8[($0_1 + 560 | 0) >> 0] = 1;
  HEAP32[$0_1 >> 2] = 20096;
  HEAP32[($0_1 + 556 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 548 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  $796($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $796($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = Math_fround(0), $2_1 = 0, $5_1 = 0, $3_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $6_1 = 0, $8_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $17_1 = Math_fround(0), $96_1 = 0, $106_1 = 0, $109_1 = 0, $121_1 = 0, $126_1 = 0, $131_1 = 0, $136_1 = 0, $141_1 = 0, $146_1 = 0, $151_1 = 0, $156_1 = 0, $162_1 = 0, $173_1 = 0, $178_1 = 0, $183_1 = 0, $188_1 = 0, $193_1 = 0, $198_1 = 0, $203_1 = 0, $450_1 = Math_fround(0), $457_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 372 | 0) >> 2] = 0;
  HEAP32[($0_1 + 376 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 252 | 0) >> 2] = 2;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[($0_1 + 604 | 0) >> 2] = 1065353216;
  HEAP32[($0_1 + 608 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[($0_1 + 408 | 0) >> 2] = 1065353216;
  HEAP32[($0_1 + 412 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 472 | 0) >> 2] = 0;
  HEAP32[($0_1 + 476 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 380 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 388 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 396 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 612 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 420 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 416 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $0_1 + 428 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 436 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 444 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 452 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 480 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 488 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 496 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = Math_fround(HEAPF32[($1_1 + 96 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 92 | 0) >> 2]);
  HEAPF32[($2_1 + 12 | 0) >> 2] = $4_1;
  HEAPF32[($2_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 4 | 0) >> 2] = 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[($0_1 + 504 | 0) >> 2] = HEAP32[($4_1 < Math_fround(0.0) ? $2_1 + 4 | 0 : $4_1 > Math_fround(1.0) ? $2_1 : $2_1 + 12 | 0) >> 2] | 0;
  HEAP32[($2_1 + 4 | 0) >> 2] = 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[($0_1 + 508 | 0) >> 2] = HEAP32[($3_1 < Math_fround(0.0) ? $2_1 + 4 | 0 : $3_1 > Math_fround(1.0) ? $2_1 : $2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 668 | 0) >> 2] = 0;
  HEAP32[($0_1 + 672 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
  $96_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 532 | 0) >> 2] = $96_1;
  HEAP32[($0_1 + 536 | 0) >> 2] = i64toi32_i32$1;
  $5_1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 540 | 0) >> 2] = $5_1;
  HEAP8[($0_1 + 512 | 0) >> 0] = HEAPU8[(i64toi32_i32$2 + 124 | 0) >> 0] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
  $106_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 516 | 0) >> 2] = $106_1;
  HEAP32[($0_1 + 520 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 136 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 140 | 0) >> 2] | 0;
  $109_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 524 | 0) >> 2] = $109_1;
  HEAP32[($0_1 + 528 | 0) >> 2] = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    if (!$5_1) {
     break label$2
    }
    $6_1 = $0_1 + 4 | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($5_1, $6_1);
    break label$1;
   }
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   $121_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = $121_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 16 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $126_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 12 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $126_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 32 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $131_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 28 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $131_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $136_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 20 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $136_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 40 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $141_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 36 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $141_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 48 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $146_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 44 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $146_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 64 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $151_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 60 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $151_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 56 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $156_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 52 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $156_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $6_1 = $0_1 + 4 | 0;
  }
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 132 | 0) >> 2] = 0;
  HEAP32[($0_1 + 136 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $162_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[($0_1 + 68 | 0) >> 2] = $162_1;
  HEAP32[($0_1 + 72 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 156 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 148 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 140 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0_1 + 20 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $173_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 84 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $173_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $6_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $178_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 76 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $178_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0_1 + 28 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $183_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 92 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $183_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1 + 36 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $188_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 100 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $188_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0_1 + 44 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $193_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 108 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $193_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1 + 52 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $198_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 116 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $198_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0_1 + 60 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $203_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 124 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $203_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 228 | 0) >> 2] = HEAP32[($1_1 + 100 | 0) >> 2] | 0;
  HEAP32[($0_1 + 236 | 0) >> 2] = HEAP32[($1_1 + 104 | 0) >> 2] | 0;
  HEAP32[($0_1 + 240 | 0) >> 2] = HEAP32[($1_1 + 108 | 0) >> 2] | 0;
  HEAP32[($0_1 + 232 | 0) >> 2] = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, HEAP32[($1_1 + 72 | 0) >> 2] | 0);
  $5_1 = HEAP32[(0 + 2796 | 0) >> 2] | 0;
  HEAP32[($0_1 + 568 | 0) >> 2] = $5_1;
  HEAP32[(0 + 2796 | 0) >> 2] = $5_1 + 1 | 0;
  $3_1 = Math_fround(0.0);
  $5_1 = HEAP32[($0_1 + 204 | 0) >> 2] | 0;
  label$3 : {
   label$4 : {
    $4_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    if ($4_1 != Math_fround(0.0)) {
     break label$4
    }
    HEAP32[($0_1 + 204 | 0) >> 2] = $5_1 | 1 | 0;
    break label$3;
   }
   HEAP32[($0_1 + 204 | 0) >> 2] = $5_1 & -2 | 0;
   $3_1 = Math_fround(Math_fround(1.0) / $4_1);
  }
  HEAP32[($0_1 + 436 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 404 | 0) >> 2] = $3_1;
  HEAPF32[($0_1 + 432 | 0) >> 2] = Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 448 | 0) >> 2]));
  HEAPF32[($0_1 + 428 | 0) >> 2] = Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 444 | 0) >> 2]));
  HEAPF32[($0_1 + 424 | 0) >> 2] = Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 440 | 0) >> 2]));
  $4_1 = Math_fround(HEAPF32[($1_1 + 84 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 76 | 0) >> 2]);
  HEAPF32[($0_1 + 620 | 0) >> 2] = Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 408 | 0) >> 2]));
  $1_1 = $0_1 + 624 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 412 | 0) >> 2]));
  $5_1 = $0_1 + 628 | 0;
  HEAPF32[$5_1 >> 2] = Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 416 | 0) >> 2]));
  $6_1 = $0_1 + 632 | 0;
  HEAP32[$6_1 >> 2] = 0;
  HEAP32[($0_1 + 468 | 0) >> 2] = 0;
  $9_1 = $8_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $8_1) : Math_fround(0.0);
  HEAPF32[($0_1 + 456 | 0) >> 2] = $9_1;
  $10_1 = $7_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $7_1) : Math_fround(0.0);
  HEAPF32[($0_1 + 460 | 0) >> 2] = $10_1;
  $11_1 = $4_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $4_1) : Math_fround(0.0);
  HEAPF32[($0_1 + 464 | 0) >> 2] = $11_1;
  $4_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
  HEAP32[($0_1 + 564 | 0) >> 2] = 8;
  HEAP32[($0_1 + 368 | 0) >> 2] = 0;
  HEAP32[($0_1 + 352 | 0) >> 2] = 0;
  HEAP32[($0_1 + 336 | 0) >> 2] = 0;
  $18_1 = Math_fround($9_1 * $15_1);
  $19_1 = Math_fround($10_1 * $16_1);
  $20_1 = Math_fround($11_1 * $14_1);
  HEAPF32[($0_1 + 364 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $18_1) + Math_fround($16_1 * $19_1)) + Math_fround($14_1 * $20_1));
  HEAPF32[($0_1 + 360 | 0) >> 2] = Math_fround(Math_fround(Math_fround($12_1 * $18_1) + Math_fround($13_1 * $19_1)) + Math_fround($8_1 * $20_1));
  HEAPF32[($0_1 + 356 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $18_1) + Math_fround($7_1 * $19_1)) + Math_fround($4_1 * $20_1));
  $18_1 = Math_fround($9_1 * $12_1);
  $19_1 = Math_fround($10_1 * $13_1);
  $20_1 = Math_fround($11_1 * $8_1);
  HEAPF32[($0_1 + 348 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $18_1) + Math_fround($16_1 * $19_1)) + Math_fround($14_1 * $20_1));
  HEAPF32[($0_1 + 344 | 0) >> 2] = Math_fround(Math_fround(Math_fround($12_1 * $18_1) + Math_fround($13_1 * $19_1)) + Math_fround($8_1 * $20_1));
  HEAPF32[($0_1 + 340 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $18_1) + Math_fround($7_1 * $19_1)) + Math_fround($4_1 * $20_1));
  $9_1 = Math_fround($9_1 * $17_1);
  $450_1 = Math_fround($15_1 * $9_1);
  $15_1 = Math_fround($10_1 * $7_1);
  $457_1 = Math_fround($450_1 + Math_fround($16_1 * $15_1));
  $16_1 = Math_fround($11_1 * $4_1);
  HEAPF32[($0_1 + 332 | 0) >> 2] = Math_fround($457_1 + Math_fround($14_1 * $16_1));
  HEAPF32[($0_1 + 328 | 0) >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $12_1) + Math_fround($15_1 * $13_1)) + Math_fround($16_1 * $8_1));
  HEAPF32[($0_1 + 324 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $9_1) + Math_fround($7_1 * $15_1)) + Math_fround($4_1 * $16_1));
  i64toi32_i32$0 = $0_1 + 596 | 0;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1 + 588 | 0;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1 + 580 | 0;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 572 | 0) >> 2] = 0;
  HEAP32[($0_1 + 576 | 0) >> 2] = i64toi32_i32$1;
  $4_1 = Math_fround(HEAPF32[($0_1 + 408 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($0_1 + 412 | 0) >> 2]);
  HEAPF32[$5_1 >> 2] = Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 416 | 0) >> 2]));
  HEAPF32[$1_1 >> 2] = Math_fround($3_1 * $7_1);
  HEAPF32[($0_1 + 620 | 0) >> 2] = Math_fround($3_1 * $4_1);
  HEAP32[($0_1 + 664 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1 + 656 | 0;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1 + 648 | 0;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1 + 640 | 0;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$1 = 0;
  HEAP32[i64toi32_i32$0 >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $797($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 8 | 0) >> 2] = $2_1;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  HEAP32[$3_1 >> 2] = 1065353216;
  HEAP32[($0_1 + 504 | 0) >> 2] = HEAP32[($1_1 < Math_fround(0.0) ? $3_1 + 4 | 0 : $1_1 > Math_fround(1.0) ? $3_1 : $3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  HEAP32[$3_1 >> 2] = 1065353216;
  HEAP32[($0_1 + 508 | 0) >> 2] = HEAP32[($2_1 < Math_fround(0.0) ? $3_1 + 4 | 0 : $2_1 > Math_fround(1.0) ? $3_1 : $3_1 + 8 | 0) >> 2] | 0;
 }
 
 function $798($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $3_1 = Math_fround(0.0);
  $4_1 = HEAP32[($0_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($1_1 != Math_fround(0.0)) {
     break label$2
    }
    HEAP32[($0_1 + 204 | 0) >> 2] = $4_1 | 1 | 0;
    break label$1;
   }
   HEAP32[($0_1 + 204 | 0) >> 2] = $4_1 & -2 | 0;
   $3_1 = Math_fround(Math_fround(1.0) / $1_1);
  }
  HEAPF32[($0_1 + 404 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 436 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 424 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 440 | 0) >> 2]) * $1_1);
  HEAPF32[($0_1 + 432 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 448 | 0) >> 2]) * $1_1);
  HEAPF32[($0_1 + 428 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 444 | 0) >> 2]) * $1_1);
  $1_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  HEAPF32[($0_1 + 620 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 408 | 0) >> 2]) * $3_1);
  HEAPF32[($0_1 + 624 | 0) >> 2] = Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 412 | 0) >> 2]));
  HEAPF32[($0_1 + 628 | 0) >> 2] = Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 416 | 0) >> 2]));
  HEAP32[($0_1 + 632 | 0) >> 2] = 0;
  HEAP32[($0_1 + 468 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 456 | 0) >> 2] = $6_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $6_1) : Math_fround(0.0);
  HEAPF32[($0_1 + 460 | 0) >> 2] = $5_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $5_1) : Math_fround(0.0);
  HEAPF32[($0_1 + 464 | 0) >> 2] = $1_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $1_1) : Math_fround(0.0);
 }
 
 function $799($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $1_1 = Math_fround(0), $9_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $4_1 = Math_fround(0), $7_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $89_1 = Math_fround(0), $96_1 = Math_fround(0), $159_1 = Math_fround(0), $166_1 = Math_fround(0);
  HEAP32[($0_1 + 368 | 0) >> 2] = 0;
  HEAP32[($0_1 + 352 | 0) >> 2] = 0;
  HEAP32[($0_1 + 336 | 0) >> 2] = 0;
  $1_1 = Math_fround(HEAPF32[($0_1 + 456 | 0) >> 2]);
  $2_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
  $3_1 = Math_fround($1_1 * $2_1);
  $4_1 = Math_fround(HEAPF32[($0_1 + 460 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
  $6_1 = Math_fround($4_1 * $5_1);
  $7_1 = Math_fround(HEAPF32[($0_1 + 464 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
  $9_1 = Math_fround($7_1 * $8_1);
  HEAPF32[($0_1 + 364 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3_1 * $2_1) + Math_fround($6_1 * $5_1)) + Math_fround($9_1 * $8_1));
  $10_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
  HEAPF32[($0_1 + 360 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3_1 * $10_1) + Math_fround($6_1 * $11_1)) + Math_fround($9_1 * $12_1));
  $13_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
  $89_1 = Math_fround($3_1 * $13_1);
  $3_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
  $96_1 = Math_fround($89_1 + Math_fround($6_1 * $3_1));
  $6_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
  HEAPF32[($0_1 + 356 | 0) >> 2] = Math_fround($96_1 + Math_fround($9_1 * $6_1));
  $9_1 = Math_fround($1_1 * $10_1);
  $14_1 = Math_fround($4_1 * $11_1);
  $15_1 = Math_fround($7_1 * $12_1);
  HEAPF32[($0_1 + 348 | 0) >> 2] = Math_fround(Math_fround(Math_fround($2_1 * $9_1) + Math_fround($5_1 * $14_1)) + Math_fround($8_1 * $15_1));
  HEAPF32[($0_1 + 344 | 0) >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $10_1) + Math_fround($14_1 * $11_1)) + Math_fround($15_1 * $12_1));
  HEAPF32[($0_1 + 340 | 0) >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $13_1) + Math_fround($14_1 * $3_1)) + Math_fround($15_1 * $6_1));
  $1_1 = Math_fround($13_1 * $1_1);
  $159_1 = Math_fround($2_1 * $1_1);
  $2_1 = Math_fround($3_1 * $4_1);
  $166_1 = Math_fround($159_1 + Math_fround($5_1 * $2_1));
  $5_1 = Math_fround($6_1 * $7_1);
  HEAPF32[($0_1 + 332 | 0) >> 2] = Math_fround($166_1 + Math_fround($8_1 * $5_1));
  HEAPF32[($0_1 + 328 | 0) >> 2] = Math_fround(Math_fround(Math_fround($1_1 * $10_1) + Math_fround($2_1 * $11_1)) + Math_fround($5_1 * $12_1));
  HEAPF32[($0_1 + 324 | 0) >> 2] = Math_fround(Math_fround(Math_fround($1_1 * $13_1) + Math_fround($2_1 * $3_1)) + Math_fround($5_1 * $6_1));
 }
 
 function $800($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  $801($0_1 + 4 | 0 | 0, $0_1 + 372 | 0 | 0, $0_1 + 388 | 0 | 0, Math_fround($1_1), $2_1 | 0);
 }
 
 function $801($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  var $6_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $8_1 = Math_fround(0), $10_1 = Math_fround(0), i64toi32_i32$0 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $5_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $331_1 = 0, $336_1 = 0, $339_1 = 0, $344_1 = 0, $347_1 = 0, $352_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAP32[($4_1 + 60 | 0) >> 2] = 0;
  HEAPF32[($4_1 + 56 | 0) >> 2] = Math_fround($7_1 + Math_fround($11_1 * $3_1));
  HEAPF32[($4_1 + 52 | 0) >> 2] = Math_fround($6_1 + Math_fround($10_1 * $3_1));
  HEAPF32[($4_1 + 48 | 0) >> 2] = Math_fround($8_1 + Math_fround($9_1 * $3_1));
  label$1 : {
   label$2 : {
    $8_1 = Math_fround(HEAPF32[$2_1 >> 2]);
    $12_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    $6_1 = Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($12_1 * $12_1)) + Math_fround($13_1 * $13_1));
    $6_1 = $6_1 > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_sqrt($6_1)) : Math_fround(0.0);
    $6_1 = Math_fround($6_1 * $3_1) > Math_fround(.7853981852531433) ? Math_fround(Math_fround(.7853981852531433) / $3_1) : $6_1;
    if ($6_1 < Math_fround(1.0000000474974513e-03) ^ 1 | 0) {
     break label$2
    }
    $7_1 = Math_fround(Math_fround($3_1 * Math_fround(.5)) + Math_fround($6_1 * Math_fround(Math_fround(Math_fround(Math_fround($3_1 * $3_1) * $3_1) * Math_fround(-.02083333395421505)) * $6_1)));
    break label$1;
   }
   $7_1 = Math_fround(Math_fround($496(Math_fround(Math_fround(Math_fround($6_1 * Math_fround(.5)) * $3_1)))) / $6_1);
  }
  $1043($0_1 | 0, $5_1 | 0);
  label$3 : {
   $9_1 = Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]);
   $10_1 = Math_fround($497(Math_fround(Math_fround(Math_fround($6_1 * $3_1) * Math_fround(.5)))));
   $11_1 = Math_fround($8_1 * $7_1);
   $14_1 = Math_fround(HEAPF32[$5_1 >> 2]);
   $12_1 = Math_fround($12_1 * $7_1);
   $15_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
   $7_1 = Math_fround($13_1 * $7_1);
   $13_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
   $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $10_1) - Math_fround($11_1 * $14_1)) - Math_fround($12_1 * $15_1)) - Math_fround($7_1 * $13_1));
   $8_1 = Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $9_1) + Math_fround($10_1 * $13_1)) + Math_fround($11_1 * $15_1)) - Math_fround($12_1 * $14_1));
   $3_1 = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $14_1) + Math_fround($11_1 * $9_1)) + Math_fround($12_1 * $13_1)) - Math_fround($7_1 * $15_1));
   $7_1 = Math_fround(Math_fround(Math_fround($7_1 * $14_1) + Math_fround(Math_fround($12_1 * $9_1) + Math_fround($10_1 * $15_1))) - Math_fround($11_1 * $13_1));
   $9_1 = Math_fround(Math_fround($6_1 * $6_1) + Math_fround(Math_fround($8_1 * $8_1) + Math_fround(Math_fround($3_1 * $3_1) + Math_fround($7_1 * $7_1))));
   if ($9_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
    break label$3
   }
   $9_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($9_1)));
   $6_1 = Math_fround($6_1 * $9_1);
   $8_1 = Math_fround($8_1 * $9_1);
   $7_1 = Math_fround($7_1 * $9_1);
   $3_1 = Math_fround($3_1 * $9_1);
   $9_1 = Math_fround(Math_fround($6_1 * $6_1) + Math_fround(Math_fround($8_1 * $8_1) + Math_fround(Math_fround($7_1 * $7_1) + Math_fround($3_1 * $3_1))));
  }
  label$4 : {
   label$5 : {
    if ($9_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
     break label$5
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    HEAP32[($4_1 + 44 | 0) >> 2] = 0;
    HEAP32[($4_1 + 28 | 0) >> 2] = 0;
    $10_1 = Math_fround(Math_fround(2.0) / $9_1);
    $9_1 = Math_fround($8_1 * $10_1);
    $11_1 = Math_fround($7_1 * $9_1);
    $14_1 = Math_fround($3_1 * $10_1);
    $12_1 = Math_fround($6_1 * $14_1);
    HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround($11_1 + $12_1);
    $15_1 = Math_fround($3_1 * $9_1);
    $10_1 = Math_fround($7_1 * $10_1);
    $13_1 = Math_fround($6_1 * $10_1);
    HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround($15_1 - $13_1);
    HEAPF32[($4_1 + 24 | 0) >> 2] = Math_fround($11_1 - $12_1);
    $11_1 = Math_fround($3_1 * $10_1);
    $6_1 = Math_fround($6_1 * $9_1);
    HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround($11_1 + $6_1);
    HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround($15_1 + $13_1);
    HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround($11_1 - $6_1);
    $3_1 = Math_fround($3_1 * $14_1);
    $6_1 = Math_fround($7_1 * $10_1);
    HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($3_1 + $6_1));
    $7_1 = Math_fround($8_1 * $9_1);
    HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($3_1 + $7_1));
    HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(1.0) - Math_fround($6_1 + $7_1));
    break label$4;
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $331_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1;
   HEAP32[$4_1 >> 2] = $331_1;
   HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $336_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $336_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $339_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1;
   HEAP32[($4_1 + 16 | 0) >> 2] = $339_1;
   HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $344_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $344_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   $347_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1;
   HEAP32[($4_1 + 32 | 0) >> 2] = $347_1;
   HEAP32[($4_1 + 36 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $352_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1 + 40 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $352_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $802($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $3_1 = 0, $9_1 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $105_1 = 0, $108_1 = 0, $111_1 = 0, $115_1 = 0, $118_1 = 0, $123_1 = 0, $128_1 = 0, $133_1 = 0, $138_1 = 0, $143_1 = 0, $146_1 = 0, $149_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   if ($1_1 == Math_fround(0.0)) {
    break label$1
   }
   label$2 : {
    $3_1 = HEAP32[($0_1 + 540 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($3_1, $0_1 + 4 | 0);
   }
   HEAP32[($0_1 + 384 | 0) >> 2] = 0;
   $3_1 = $0_1 + 380 | 0;
   $1_1 = Math_fround(Math_fround(1.0) / $1_1);
   $4_1 = $0_1 + 60 | 0;
   $5_1 = $0_1 + 124 | 0;
   HEAPF32[$3_1 >> 2] = Math_fround($1_1 * Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) - Math_fround(HEAPF32[$5_1 >> 2])));
   HEAPF32[($0_1 + 376 | 0) >> 2] = Math_fround($1_1 * Math_fround(Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 120 | 0) >> 2])));
   $6_1 = $0_1 + 52 | 0;
   $7_1 = $0_1 + 116 | 0;
   HEAPF32[($0_1 + 372 | 0) >> 2] = Math_fround($1_1 * Math_fround(Math_fround(HEAPF32[$6_1 >> 2]) - Math_fround(HEAPF32[$7_1 >> 2])));
   $803($0_1 + 68 | 0 | 0, $0_1 + 4 | 0 | 0, $2_1 + 16 | 0 | 0, $2_1 + 12 | 0 | 0);
   HEAP32[($0_1 + 400 | 0) >> 2] = 0;
   $8_1 = $0_1 + 396 | 0;
   $9_1 = Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2]);
   HEAPF32[$8_1 >> 2] = Math_fround($1_1 * Math_fround($9_1 * Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2])));
   HEAPF32[($0_1 + 392 | 0) >> 2] = Math_fround($1_1 * Math_fround($9_1 * Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2])));
   HEAPF32[($0_1 + 388 | 0) >> 2] = Math_fround($1_1 * Math_fround($9_1 * Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2])));
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $105_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 140 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $105_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 376 | 0) >> 2] | 0;
   $108_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[($0_1 + 132 | 0) >> 2] = $108_1;
   HEAP32[($0_1 + 136 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 388 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 392 | 0) >> 2] | 0;
   $111_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 148 | 0) >> 2] = $111_1;
   HEAP32[($0_1 + 152 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $8_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $115_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 156 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $115_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $118_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 68 | 0) >> 2] = $118_1;
   HEAP32[($0_1 + 72 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1 + 12 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $123_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 76 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $123_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $0_1 + 20 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $128_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 84 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $128_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1 + 28 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $133_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 92 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $133_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $0_1 + 44 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $138_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 108 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $138_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1 + 36 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $143_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 100 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $143_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $146_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1;
   HEAP32[i64toi32_i32$0 >> 2] = $146_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $149_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $7_1;
   HEAP32[i64toi32_i32$1 >> 2] = $149_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $803($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $22_1 = Math_fround(0), $4_1 = 0, $26_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $21_1 = Math_fround(0), $11_1 = Math_fround(0), $20_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $27_1 = Math_fround(0), i64toi32_i32$0 = 0, $23_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0);
  $4_1 = global$0 - 64 | 0;
  global$0 = $4_1;
  $5_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[$0_1 >> 2]);
  HEAP32[($4_1 + 60 | 0) >> 2] = 0;
  HEAP32[($4_1 + 44 | 0) >> 2] = 0;
  $23_1 = Math_fround(Math_fround($10_1 * $9_1) - Math_fround($12_1 * $11_1));
  $24_1 = Math_fround(Math_fround($12_1 * $20_1) - Math_fround($9_1 * $21_1));
  $25_1 = Math_fround(Math_fround($11_1 * $21_1) - Math_fround($10_1 * $20_1));
  $26_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround(Math_fround($22_1 * $23_1) + Math_fround($19_1 * $24_1)) + Math_fround($18_1 * $25_1)));
  $27_1 = Math_fround(Math_fround(Math_fround($12_1 * $19_1) - Math_fround($10_1 * $18_1)) * $26_1);
  $12_1 = Math_fround(Math_fround(Math_fround($21_1 * $18_1) - Math_fround($12_1 * $22_1)) * $26_1);
  $10_1 = Math_fround(Math_fround(Math_fround($10_1 * $22_1) - Math_fround($21_1 * $19_1)) * $26_1);
  HEAPF32[(($4_1 + 16 | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $27_1) + Math_fround($8_1 * $12_1)) + Math_fround($7_1 * $10_1));
  $21_1 = Math_fround(Math_fround(Math_fround($11_1 * $18_1) - Math_fround($9_1 * $19_1)) * $26_1);
  $18_1 = Math_fround(Math_fround(Math_fround($9_1 * $22_1) - Math_fround($20_1 * $18_1)) * $26_1);
  $19_1 = Math_fround(Math_fround(Math_fround($20_1 * $19_1) - Math_fround($11_1 * $22_1)) * $26_1);
  HEAPF32[(($4_1 + 16 | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $21_1) + Math_fround($8_1 * $18_1)) + Math_fround($7_1 * $19_1));
  HEAPF32[(($4_1 + 16 | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($27_1 * $16_1) + Math_fround($12_1 * $6_1)) + Math_fround($10_1 * $5_1));
  HEAPF32[(($4_1 + 16 | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($21_1 * $16_1) + Math_fround($18_1 * $6_1)) + Math_fround($19_1 * $5_1));
  HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  $22_1 = Math_fround($23_1 * $26_1);
  $9_1 = Math_fround($24_1 * $26_1);
  $26_1 = Math_fround($25_1 * $26_1);
  HEAPF32[($4_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $22_1) + Math_fround($8_1 * $9_1)) + Math_fround($7_1 * $26_1));
  HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround($22_1 * $16_1) + Math_fround($9_1 * $6_1)) + Math_fround($26_1 * $5_1));
  HEAPF32[($4_1 + 24 | 0) >> 2] = Math_fround(Math_fround($13_1 * $10_1) + Math_fround(Math_fround($14_1 * $27_1) + Math_fround($15_1 * $12_1)));
  HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(Math_fround($13_1 * $19_1) + Math_fround(Math_fround($14_1 * $21_1) + Math_fround($15_1 * $18_1)));
  HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround(Math_fround($13_1 * $26_1) + Math_fround(Math_fround($14_1 * $22_1) + Math_fround($15_1 * $9_1)));
  $1043($4_1 + 16 | 0 | 0, $4_1 | 0);
  $26_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[$4_1 >> 2]);
  $18_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
  $22_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround(Math_fround($19_1 * $19_1) + Math_fround($18_1 * $18_1)) + Math_fround($26_1 * $26_1)) + Math_fround($9_1 * $9_1)))));
  $26_1 = Math_fround($26_1 * $22_1);
  HEAPF32[($4_1 + 8 | 0) >> 2] = $26_1;
  $18_1 = Math_fround($18_1 * $22_1);
  HEAPF32[($4_1 + 4 | 0) >> 2] = $18_1;
  $19_1 = Math_fround($19_1 * $22_1);
  HEAPF32[$4_1 >> 2] = $19_1;
  $22_1 = Math_fround($9_1 * $22_1);
  HEAPF32[($4_1 + 12 | 0) >> 2] = $22_1;
  $22_1 = Math_fround($794(Math_fround(Math_fround(Math_min(Math_fround(Math_max($22_1, Math_fround(-1.0))), Math_fround(1.0))))));
  HEAPF32[$3_1 >> 2] = Math_fround($22_1 + $22_1);
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($2_1 + 8 | 0) >> 2] = $26_1;
  HEAPF32[($2_1 + 4 | 0) >> 2] = $18_1;
  HEAPF32[$2_1 >> 2] = $19_1;
  label$1 : {
   label$2 : {
    $22_1 = Math_fround(Math_fround(Math_fround($19_1 * $19_1) + Math_fround($18_1 * $18_1)) + Math_fround($26_1 * $26_1));
    if ($22_1 < Math_fround(1.4210854715202004e-14) ^ 1 | 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[$2_1 >> 2] = 1065353216;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   $22_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($22_1)));
   HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround($26_1 * $22_1);
   HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround($18_1 * $22_1);
   HEAPF32[$2_1 >> 2] = Math_fround($19_1 * $22_1);
  }
  global$0 = $4_1 + 64 | 0;
 }
 
 function $804($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $36_1 = 0, $41_1 = 0;
  label$1 : {
   $2_1 = Math_fround(HEAPF32[($0_1 + 404 | 0) >> 2]);
   if ($2_1 == Math_fround(0.0)) {
    break label$1
   }
   $3_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $4_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   HEAP32[($0_1 + 436 | 0) >> 2] = 0;
   $2_1 = Math_fround(Math_fround(1.0) / $2_1);
   HEAPF32[($0_1 + 432 | 0) >> 2] = Math_fround($5_1 * $2_1);
   HEAPF32[($0_1 + 428 | 0) >> 2] = Math_fround($2_1 * $4_1);
   HEAPF32[($0_1 + 424 | 0) >> 2] = Math_fround($2_1 * $3_1);
  }
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $36_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 440 | 0) >> 2] = $36_1;
  HEAP32[($0_1 + 444 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $41_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 448 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $41_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $805($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = Math_fround(0), $5_1 = 0, $3_1 = Math_fround(0), $9_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $10_1 = Math_fround(0), i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = Math_fround(0), $8_1 = Math_fround(0);
  $2_1 = Math_fround(HEAPF32[($0_1 + 504 | 0) >> 2]);
  $3_1 = Math_fround($793(Math_fround(Math_fround(Math_fround(1.0) - $2_1)), Math_fround($1_1)));
  $4_1 = Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 372 | 0) >> 2]));
  HEAPF32[($0_1 + 372 | 0) >> 2] = $4_1;
  $5_1 = $0_1 + 376 | 0;
  $6_1 = Math_fround($3_1 * Math_fround(HEAPF32[$5_1 >> 2]));
  HEAPF32[$5_1 >> 2] = $6_1;
  $5_1 = $0_1 + 380 | 0;
  $7_1 = Math_fround($3_1 * Math_fround(HEAPF32[$5_1 >> 2]));
  HEAPF32[$5_1 >> 2] = $7_1;
  $8_1 = Math_fround(HEAPF32[($0_1 + 508 | 0) >> 2]);
  $9_1 = Math_fround($793(Math_fround(Math_fround(Math_fround(1.0) - $8_1)), Math_fround($1_1)));
  $1_1 = Math_fround($9_1 * Math_fround(HEAPF32[($0_1 + 388 | 0) >> 2]));
  HEAPF32[($0_1 + 388 | 0) >> 2] = $1_1;
  $5_1 = $0_1 + 392 | 0;
  $3_1 = Math_fround($9_1 * Math_fround(HEAPF32[$5_1 >> 2]));
  HEAPF32[$5_1 >> 2] = $3_1;
  $5_1 = $0_1 + 396 | 0;
  $9_1 = Math_fround($9_1 * Math_fround(HEAPF32[$5_1 >> 2]));
  HEAPF32[$5_1 >> 2] = $9_1;
  label$1 : {
   if (!(HEAPU8[($0_1 + 512 | 0) >> 0] | 0)) {
    break label$1
   }
   label$2 : {
    if (Math_fround(Math_fround(Math_fround($1_1 * $1_1) + Math_fround($3_1 * $3_1)) + Math_fround($9_1 * $9_1)) < Math_fround(HEAPF32[($0_1 + 524 | 0) >> 2]) ^ 1 | 0) {
     break label$2
    }
    if (Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1)) < Math_fround(HEAPF32[($0_1 + 520 | 0) >> 2]) ^ 1 | 0) {
     break label$2
    }
    $10_1 = Math_fround(HEAPF32[($0_1 + 516 | 0) >> 2]);
    $9_1 = Math_fround($9_1 * $10_1);
    HEAPF32[($0_1 + 396 | 0) >> 2] = $9_1;
    $3_1 = Math_fround($3_1 * $10_1);
    HEAPF32[($0_1 + 392 | 0) >> 2] = $3_1;
    $1_1 = Math_fround($1_1 * $10_1);
    HEAPF32[($0_1 + 388 | 0) >> 2] = $1_1;
    $7_1 = Math_fround($7_1 * $10_1);
    HEAPF32[($0_1 + 380 | 0) >> 2] = $7_1;
    $6_1 = Math_fround($6_1 * $10_1);
    HEAPF32[($0_1 + 376 | 0) >> 2] = $6_1;
    $4_1 = Math_fround($4_1 * $10_1);
    HEAPF32[($0_1 + 372 | 0) >> 2] = $4_1;
   }
   label$3 : {
    $10_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($6_1 * $6_1)) + Math_fround($7_1 * $7_1))));
    if ($10_1 < $2_1 ^ 1 | 0) {
     break label$3
    }
    label$4 : {
     if ($10_1 > Math_fround(.004999999888241291) ^ 1 | 0) {
      break label$4
     }
     $2_1 = Math_fround(Math_fround(1.0) / $10_1);
     HEAPF32[($0_1 + 380 | 0) >> 2] = Math_fround($7_1 - Math_fround(Math_fround($7_1 * $2_1) * Math_fround(.004999999888241291)));
     HEAPF32[($0_1 + 376 | 0) >> 2] = Math_fround($6_1 - Math_fround(Math_fround($6_1 * $2_1) * Math_fround(.004999999888241291)));
     HEAPF32[($0_1 + 372 | 0) >> 2] = Math_fround($4_1 - Math_fround(Math_fround($4_1 * $2_1) * Math_fround(.004999999888241291)));
     break label$3;
    }
    $5_1 = $0_1 + 372 | 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $5_1 + 8 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   }
   $4_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($1_1 * $1_1) + Math_fround($3_1 * $3_1)) + Math_fround($9_1 * $9_1))));
   if ($4_1 < $8_1 ^ 1 | 0) {
    break label$1
   }
   label$5 : {
    if ($4_1 > Math_fround(.004999999888241291) ^ 1 | 0) {
     break label$5
    }
    $4_1 = Math_fround(Math_fround(1.0) / $4_1);
    HEAPF32[($0_1 + 396 | 0) >> 2] = Math_fround($9_1 - Math_fround(Math_fround($9_1 * $4_1) * Math_fround(.004999999888241291)));
    HEAPF32[($0_1 + 392 | 0) >> 2] = Math_fround($3_1 - Math_fround(Math_fround($3_1 * $4_1) * Math_fround(.004999999888241291)));
    HEAPF32[($0_1 + 388 | 0) >> 2] = Math_fround($1_1 - Math_fround(Math_fround($1_1 * $4_1) * Math_fround(.004999999888241291)));
    return;
   }
   $0_1 = $0_1 + 388 | 0;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $0_1 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $806($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   if ((HEAPU8[($0_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
    break label$1
   }
   HEAPF32[($0_1 + 472 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 424 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 408 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 472 | 0) >> 2]));
   $1_1 = $0_1 + 476 | 0;
   HEAPF32[$1_1 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 428 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 412 | 0) >> 2])) + Math_fround(HEAPF32[$1_1 >> 2]));
   $1_1 = $0_1 + 480 | 0;
   HEAPF32[$1_1 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 432 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 416 | 0) >> 2])) + Math_fround(HEAPF32[$1_1 >> 2]));
  }
 }
 
 function $807($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $808($0_1 | 0, $1_1 | 0);
 }
 
 function $808($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $17_1 = Math_fround(0), $13_1 = Math_fround(0), $16_1 = Math_fround(0), $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $28_1 = 0, $33_1 = 0, $38_1 = 0, $43_1 = 0, $48_1 = 0, $53_1 = 0, $58_1 = 0, $63_1 = 0, $66_1 = 0, $71_1 = 0, $76_1 = 0, $80_1 = 0, $84_1 = 0, $89_1 = 0, $94_1 = 0, $98_1 = 0, $101_1 = 0, $104_1 = 0, $109_1 = 0, $114_1 = 0, $120_1 = 0, $123_1 = 0, $129_1 = 0, $134_1 = 0, $140_1 = 0, $145_1 = 0, $150_1 = 0, $154_1 = 0, $293_1 = Math_fround(0), $300_1 = Math_fround(0);
  label$1 : {
   label$2 : {
    if (!((HEAPU8[($0_1 + 204 | 0) >> 0] | 0) & 2 | 0)) {
     break label$2
    }
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $28_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = $28_1;
    HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0 + 12 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $33_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 76 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $33_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $0_1 + 20 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $38_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1 + 84 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $38_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1 + 28 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $43_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 92 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $43_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $0_1 + 36 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $48_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1 + 100 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $48_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1 + 44 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $53_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 108 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $53_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $0_1 + 52 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $58_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1 + 116 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $58_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1 + 60 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $63_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 124 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $63_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $66_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = $66_1;
   HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $71_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 76 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $71_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 24 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $76_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 92 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $76_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $80_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 84 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $80_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   $84_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 100 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $84_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $89_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 108 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $89_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 56 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $94_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 124 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $94_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $98_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 116 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $98_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 388 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 392 | 0) >> 2] | 0;
  $101_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = $101_1;
  HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 372 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$0 + 376 | 0) >> 2] | 0;
  $104_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] = $104_1;
  HEAP32[(i64toi32_i32$1 + 136 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$1 + 396 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $109_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 156 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $109_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1 + 380 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $114_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 140 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = $0_1 + 12 | 0;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $120_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[i64toi32_i32$0 >> 2] = $120_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $123_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $123_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = i64toi32_i32$1 + 28 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $129_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[i64toi32_i32$0 >> 2] = $129_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $4_1 = $0_1 + 20 | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $134_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[i64toi32_i32$1 >> 2] = $134_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = $0_1 + 44 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $140_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $140_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $6_1 = $0_1 + 36 | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $145_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[i64toi32_i32$1 >> 2] = $145_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $150_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 60 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $150_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $154_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $154_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $9_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $10_1 = Math_fround(HEAPF32[$4_1 >> 2]);
  $11_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[$5_1 >> 2]);
  $13_1 = Math_fround(HEAPF32[($0_1 + 464 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[$6_1 >> 2]);
  $15_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($0_1 + 460 | 0) >> 2]);
  $17_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($0_1 + 456 | 0) >> 2]);
  HEAP32[($0_1 + 368 | 0) >> 2] = 0;
  HEAP32[($0_1 + 352 | 0) >> 2] = 0;
  HEAP32[($0_1 + 336 | 0) >> 2] = 0;
  $19_1 = Math_fround($18_1 * $14_1);
  $20_1 = Math_fround($16_1 * $15_1);
  $21_1 = Math_fround($13_1 * $12_1);
  HEAPF32[($0_1 + 364 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $19_1) + Math_fround($15_1 * $20_1)) + Math_fround($12_1 * $21_1));
  HEAPF32[($0_1 + 360 | 0) >> 2] = Math_fround(Math_fround(Math_fround($10_1 * $19_1) + Math_fround($11_1 * $20_1)) + Math_fround($9_1 * $21_1));
  HEAPF32[($0_1 + 356 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $19_1) + Math_fround($7_1 * $20_1)) + Math_fround($8_1 * $21_1));
  $19_1 = Math_fround($18_1 * $10_1);
  $20_1 = Math_fround($16_1 * $11_1);
  $21_1 = Math_fround($13_1 * $9_1);
  HEAPF32[($0_1 + 348 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $19_1) + Math_fround($15_1 * $20_1)) + Math_fround($12_1 * $21_1));
  HEAPF32[($0_1 + 344 | 0) >> 2] = Math_fround(Math_fround(Math_fround($10_1 * $19_1) + Math_fround($11_1 * $20_1)) + Math_fround($9_1 * $21_1));
  HEAPF32[($0_1 + 340 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $19_1) + Math_fround($7_1 * $20_1)) + Math_fround($8_1 * $21_1));
  $18_1 = Math_fround($17_1 * $18_1);
  $293_1 = Math_fround($14_1 * $18_1);
  $14_1 = Math_fround($7_1 * $16_1);
  $300_1 = Math_fround($293_1 + Math_fround($15_1 * $14_1));
  $15_1 = Math_fround($8_1 * $13_1);
  HEAPF32[($0_1 + 332 | 0) >> 2] = Math_fround($300_1 + Math_fround($12_1 * $15_1));
  HEAPF32[($0_1 + 328 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $10_1) + Math_fround($14_1 * $11_1)) + Math_fround($15_1 * $9_1));
  HEAPF32[($0_1 + 324 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * $18_1) + Math_fround($7_1 * $14_1)) + Math_fround($8_1 * $15_1));
 }
 
 function $809($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $4_1 = Math_fround(0), $7_1 = Math_fround(0), $15_1 = Math_fround(0), $3_1 = Math_fround(0), $8_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $20_1 = Math_fround(0), $10_1 = Math_fround(0), $14_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $9_1 = Math_fround(0), $13_1 = Math_fround(0), $21_1 = Math_fround(0), $19_1 = Math_fround(0), $105_1 = Math_fround(0), $118_1 = Math_fround(0), $200_1 = Math_fround(0), $207_1 = Math_fround(0);
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  $3_1 = Math_fround(HEAPF32[($1_1 + 388 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 456 | 0) >> 2]);
  $5_1 = $4_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $4_1) : Math_fround(0.0);
  $6_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $7_1 = Math_fround($5_1 * $6_1);
  $8_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 460 | 0) >> 2]);
  $9_1 = $4_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $4_1) : Math_fround(0.0);
  $10_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $11_1 = Math_fround($9_1 * $10_1);
  $12_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 464 | 0) >> 2]);
  $13_1 = $4_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $4_1) : Math_fround(0.0);
  $14_1 = Math_fround(HEAPF32[($1_1 + 28 | 0) >> 2]);
  $15_1 = Math_fround($13_1 * $14_1);
  $16_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 392 | 0) >> 2]);
  $105_1 = Math_fround(Math_fround($3_1 * Math_fround(Math_fround(Math_fround($7_1 * $8_1) + Math_fround($11_1 * $12_1)) + Math_fround($15_1 * $16_1))) + Math_fround(Math_fround(Math_fround(Math_fround($7_1 * $6_1) + Math_fround($11_1 * $10_1)) + Math_fround($15_1 * $14_1)) * $4_1));
  $17_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $118_1 = Math_fround(Math_fround($7_1 * $17_1) + Math_fround($11_1 * $18_1));
  $11_1 = Math_fround(HEAPF32[($1_1 + 44 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 396 | 0) >> 2]);
  $19_1 = Math_fround($105_1 + Math_fround(Math_fround($118_1 + Math_fround($15_1 * $11_1)) * $7_1));
  $15_1 = Math_fround($5_1 * $8_1);
  $20_1 = Math_fround($9_1 * $12_1);
  $21_1 = Math_fround($13_1 * $16_1);
  $20_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $8_1) + Math_fround($20_1 * $12_1)) + Math_fround($21_1 * $16_1)) * $3_1) + Math_fround($4_1 * Math_fround(Math_fround(Math_fround($15_1 * $6_1) + Math_fround($20_1 * $10_1)) + Math_fround($21_1 * $14_1)))) + Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $17_1) + Math_fround($20_1 * $18_1)) + Math_fround($21_1 * $11_1)) * $7_1));
  $15_1 = Math_fround(Math_fround($3_1 * $19_1) - Math_fround($4_1 * $20_1));
  HEAPF32[($0_1 + 8 | 0) >> 2] = $15_1;
  $5_1 = Math_fround($5_1 * $17_1);
  $200_1 = Math_fround($8_1 * $5_1);
  $8_1 = Math_fround($9_1 * $18_1);
  $207_1 = Math_fround($200_1 + Math_fround($12_1 * $8_1));
  $12_1 = Math_fround($13_1 * $11_1);
  $6_1 = Math_fround(Math_fround(Math_fround($3_1 * Math_fround($207_1 + Math_fround($16_1 * $12_1))) + Math_fround($4_1 * Math_fround(Math_fround(Math_fround($5_1 * $6_1) + Math_fround($8_1 * $10_1)) + Math_fround($12_1 * $14_1)))) + Math_fround($7_1 * Math_fround(Math_fround(Math_fround($5_1 * $17_1) + Math_fround($8_1 * $18_1)) + Math_fround($12_1 * $11_1))));
  $3_1 = Math_fround(Math_fround($7_1 * $20_1) - Math_fround($3_1 * $6_1));
  HEAPF32[($0_1 + 4 | 0) >> 2] = $3_1;
  $4_1 = Math_fround(Math_fround($4_1 * $6_1) - Math_fround($7_1 * $19_1));
  HEAPF32[$0_1 >> 2] = $4_1;
  label$1 : {
   $7_1 = Math_fround(Math_fround($15_1 * $15_1) + Math_fround(Math_fround($4_1 * $4_1) + Math_fround($3_1 * $3_1)));
   if ($7_1 > Math_fround($2_1 * $2_1) ^ 1 | 0) {
    break label$1
   }
   $7_1 = Math_fround(Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($7_1))) * $2_1);
   HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround($15_1 * $7_1);
   HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround($3_1 * $7_1);
   HEAPF32[$0_1 >> 2] = Math_fround($4_1 * $7_1);
  }
 }
 
 function $810($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $5_1 = Math_fround(0), $18_1 = Math_fround(0), $8_1 = Math_fround(0), $16_1 = Math_fround(0), $21_1 = Math_fround(0), $4_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = Math_fround(0), $19_1 = Math_fround(0), $17_1 = Math_fround(0), $13_1 = Math_fround(0), $15_1 = Math_fround(0), $24_1 = Math_fround(0), $3_1 = 0, $20_1 = Math_fround(0), $22_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $28_1 = Math_fround(0), $23_1 = Math_fround(0), $30_1 = Math_fround(0), $27_1 = Math_fround(0), $29_1 = Math_fround(0), $31_1 = Math_fround(0), $125_1 = Math_fround(0), $324_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = Math_fround(HEAPF32[($1_1 + 464 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 460 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($1_1 + 396 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 392 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 456 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($1_1 + 388 | 0) >> 2]);
  $1043($1_1 + 4 | 0 | 0, $3_1 | 0);
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  $10_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
  $13_1 = Math_fround(Math_fround(Math_fround($9_1 * $10_1) - Math_fround($6_1 * $11_1)) + Math_fround($7_1 * $12_1));
  $14_1 = Math_fround(HEAPF32[$3_1 >> 2]);
  $15_1 = Math_fround(Math_fround(Math_fround($7_1 * $11_1) + Math_fround($9_1 * $14_1)) + Math_fround($6_1 * $12_1));
  $16_1 = Math_fround(Math_fround(Math_fround($6_1 * $10_1) - Math_fround($7_1 * $14_1)) + Math_fround($9_1 * $11_1));
  $17_1 = Math_fround(Math_fround(Math_fround($7_1 * $10_1) - Math_fround($9_1 * $12_1)) + Math_fround($6_1 * $14_1));
  $18_1 = Math_fround(Math_fround(Math_fround($11_1 * $13_1) + Math_fround(Math_fround($12_1 * $15_1) + Math_fround($10_1 * $16_1))) - Math_fround($14_1 * $17_1));
  $125_1 = $18_1;
  $19_1 = Math_fround(Math_fround(Math_fround($12_1 * $17_1) + Math_fround(Math_fround($14_1 * $15_1) + Math_fround($10_1 * $13_1))) - Math_fround($11_1 * $16_1));
  $20_1 = Math_fround($19_1 * Math_fround(0.0));
  $21_1 = $8_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $8_1) : Math_fround(0.0);
  $8_1 = Math_fround(Math_fround(Math_fround($14_1 * $16_1) + Math_fround(Math_fround($11_1 * $15_1) + Math_fround($10_1 * $17_1))) - Math_fround($12_1 * $13_1));
  $17_1 = Math_fround($18_1 * Math_fround(0.0));
  $5_1 = $5_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $5_1) : Math_fround(0.0);
  $22_1 = Math_fround($17_1 + Math_fround($20_1 + Math_fround($5_1 * $8_1)));
  $23_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($20_1 - Math_fround($21_1 * $8_1)) + Math_fround(0.0)) + Math_fround($22_1 + Math_fround(0.0))) * $2_1) + Math_fround(0.0));
  $16_1 = Math_fround($8_1 * Math_fround(0.0));
  $4_1 = $4_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $4_1) : Math_fround(0.0);
  $24_1 = Math_fround(Math_fround($18_1 * $4_1) + Math_fround($20_1 + $16_1));
  $25_1 = Math_fround(Math_fround(Math_fround(Math_fround($16_1 + Math_fround(Math_fround(0.0) - Math_fround($5_1 * $18_1))) + $24_1) * $2_1) + Math_fround(0.0));
  $26_1 = Math_fround($17_1 + Math_fround(Math_fround($21_1 * $19_1) + $16_1));
  $13_1 = Math_fround(Math_fround(Math_fround($18_1 * $26_1) - Math_fround($19_1 * $24_1)) * $2_1);
  $27_1 = Math_fround($19_1 * Math_fround(-0.0));
  $28_1 = Math_fround($5_1 + Math_fround(Math_fround($27_1 + Math_fround(Math_fround($5_1 * Math_fround(0.0)) + $17_1)) * $2_1));
  $15_1 = Math_fround(Math_fround(Math_fround($8_1 * $24_1) - Math_fround($18_1 * $22_1)) * $2_1);
  $29_1 = Math_fround($18_1 * Math_fround(-0.0));
  $30_1 = Math_fround($21_1 + Math_fround(Math_fround($16_1 + Math_fround(Math_fround($21_1 * Math_fround(0.0)) + $29_1)) * $2_1));
  $16_1 = Math_fround(Math_fround(Math_fround($19_1 * $22_1) - Math_fround($8_1 * $26_1)) * $2_1);
  $31_1 = Math_fround($8_1 * Math_fround(-0.0));
  $5_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($31_1 + Math_fround($5_1 * $19_1)) + Math_fround(0.0)) - $26_1) * $2_1) + Math_fround(0.0));
  $24_1 = Math_fround(Math_fround(Math_fround(Math_fround($27_1 + Math_fround(Math_fround($21_1 * $18_1) + Math_fround(0.0))) - $24_1) * $2_1) + Math_fround(0.0));
  $324_1 = Math_fround(Math_fround($23_1 * Math_fround(Math_fround($25_1 * $13_1) - Math_fround($28_1 * $15_1))) + Math_fround(Math_fround($30_1 * Math_fround(Math_fround($28_1 * $16_1) - Math_fround($5_1 * $13_1))) + Math_fround($24_1 * Math_fround(Math_fround($5_1 * $15_1) - Math_fround($25_1 * $16_1)))));
  $18_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($17_1 + Math_fround(0.0)) - Math_fround($4_1 * $19_1)) + $26_1) * $2_1) + Math_fround(0.0));
  $21_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($4_1 * $8_1) + Math_fround($29_1 + Math_fround(0.0))) - $22_1) * $2_1) + Math_fround(0.0));
  $17_1 = Math_fround(Math_fround($25_1 * $18_1) - Math_fround($28_1 * $21_1));
  $2_1 = Math_fround($4_1 + Math_fround(Math_fround(Math_fround($4_1 * Math_fround(0.0)) + Math_fround($31_1 + $20_1)) * $2_1));
  $20_1 = Math_fround(Math_fround($28_1 * $2_1) - Math_fround($5_1 * $18_1));
  $22_1 = Math_fround(Math_fround($5_1 * $21_1) - Math_fround($2_1 * $25_1));
  $5_1 = Math_fround(Math_fround($23_1 * $17_1) + Math_fround(Math_fround($30_1 * $20_1) + Math_fround($24_1 * $22_1)));
  $4_1 = Math_fround(Math_abs($5_1)) > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_fround(1.0) / $5_1) : $5_1;
  $5_1 = Math_fround($125_1 - Math_fround($324_1 * $4_1));
  $2_1 = Math_fround($8_1 - Math_fround(Math_fround(Math_fround($23_1 * Math_fround(Math_fround($18_1 * $15_1) - Math_fround($21_1 * $13_1))) + Math_fround(Math_fround($30_1 * Math_fround(Math_fround($2_1 * $13_1) - Math_fround($18_1 * $16_1))) + Math_fround($24_1 * Math_fround(Math_fround($21_1 * $16_1) - Math_fround($2_1 * $15_1))))) * $4_1));
  $18_1 = Math_fround($19_1 - Math_fround(Math_fround(Math_fround($16_1 * $17_1) + Math_fround(Math_fround($15_1 * $20_1) + Math_fround($13_1 * $22_1))) * $4_1));
  $19_1 = Math_fround(Math_fround(Math_fround($10_1 * $5_1) + Math_fround($14_1 * $2_1)) - Math_fround($11_1 * $18_1));
  $8_1 = Math_fround(Math_fround(Math_fround(-Math_fround($14_1 * $18_1)) - Math_fround($11_1 * $2_1)) - Math_fround($12_1 * $5_1));
  $21_1 = Math_fround(Math_fround(Math_fround($10_1 * $18_1) + Math_fround($11_1 * $5_1)) - Math_fround($12_1 * $2_1));
  $2_1 = Math_fround(Math_fround(Math_fround($12_1 * $18_1) + Math_fround($10_1 * $2_1)) - Math_fround($14_1 * $5_1));
  HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $19_1) - Math_fround($8_1 * $12_1)) - Math_fround($21_1 * $11_1)) + Math_fround($2_1 * $14_1)) - $6_1);
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $2_1) - Math_fround($8_1 * $11_1)) - Math_fround($19_1 * $14_1)) + Math_fround($21_1 * $12_1)) - $7_1);
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $21_1) - Math_fround($8_1 * $14_1)) - Math_fround($2_1 * $12_1)) + Math_fround($19_1 * $11_1)) - $9_1);
  global$0 = $3_1 + 16 | 0;
 }
 
 function $811($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $4_1 = Math_fround(0), $6_1 = Math_fround(0), $9_1 = Math_fround(0), $8_1 = Math_fround(0), $12_1 = Math_fround(0), $16_1 = Math_fround(0), $5_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $22_1 = Math_fround(0), $3_1 = Math_fround(0), $10_1 = Math_fround(0), $14_1 = Math_fround(0), $17_1 = Math_fround(0), $7_1 = Math_fround(0), $13_1 = Math_fround(0), $11_1 = Math_fround(0), $15_1 = Math_fround(0), $21_1 = Math_fround(0), $23_1 = Math_fround(0), $26_1 = Math_fround(0), $25_1 = Math_fround(0), $24_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $414_1 = Math_fround(0);
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  $3_1 = Math_fround(HEAPF32[($1_1 + 396 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 456 | 0) >> 2]);
  $5_1 = $4_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $4_1) : Math_fround(0.0);
  $6_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $7_1 = Math_fround($5_1 * $6_1);
  $8_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 460 | 0) >> 2]);
  $9_1 = $4_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $4_1) : Math_fround(0.0);
  $10_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $11_1 = Math_fround($9_1 * $10_1);
  $12_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 464 | 0) >> 2]);
  $13_1 = $4_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $4_1) : Math_fround(0.0);
  $14_1 = Math_fround(HEAPF32[($1_1 + 44 | 0) >> 2]);
  $15_1 = Math_fround($13_1 * $14_1);
  $16_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
  $17_1 = Math_fround(Math_fround(Math_fround($7_1 * $8_1) + Math_fround($11_1 * $12_1)) + Math_fround($15_1 * $16_1));
  $4_1 = Math_fround(HEAPF32[($1_1 + 388 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $19_1 = Math_fround($5_1 * $18_1);
  $20_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $21_1 = Math_fround($9_1 * $20_1);
  $22_1 = Math_fround(HEAPF32[($1_1 + 28 | 0) >> 2]);
  $23_1 = Math_fround($13_1 * $22_1);
  $24_1 = Math_fround(Math_fround(Math_fround($19_1 * $8_1) + Math_fround($21_1 * $12_1)) + Math_fround($23_1 * $16_1));
  $25_1 = Math_fround($4_1 * $24_1);
  $26_1 = Math_fround($5_1 * $8_1);
  $27_1 = Math_fround($9_1 * $12_1);
  $28_1 = Math_fround($13_1 * $16_1);
  $5_1 = Math_fround(Math_fround(Math_fround($26_1 * $8_1) + Math_fround($27_1 * $12_1)) + Math_fround($28_1 * $16_1));
  $8_1 = Math_fround(HEAPF32[($1_1 + 392 | 0) >> 2]);
  $9_1 = Math_fround(Math_fround(Math_fround($19_1 * $18_1) + Math_fround($21_1 * $20_1)) + Math_fround($23_1 * $22_1));
  $13_1 = Math_fround(Math_fround(Math_fround($19_1 * $6_1) + Math_fround($21_1 * $10_1)) + Math_fround($23_1 * $14_1));
  $23_1 = Math_fround($3_1 * $13_1);
  $12_1 = Math_fround(Math_fround($25_1 + Math_fround($8_1 * $9_1)) + $23_1);
  $21_1 = Math_fround($17_1 + Math_fround(Math_fround(Math_fround(Math_fround($17_1 * Math_fround(0.0)) + Math_fround($25_1 - Math_fround($5_1 * $8_1))) + $12_1) * $2_1));
  $19_1 = Math_fround(Math_fround(Math_fround($26_1 * $18_1) + Math_fround($27_1 * $20_1)) + Math_fround($28_1 * $22_1));
  $25_1 = Math_fround($4_1 * $17_1);
  $20_1 = Math_fround(Math_fround(Math_fround($7_1 * $18_1) + Math_fround($11_1 * $20_1)) + Math_fround($15_1 * $22_1));
  $22_1 = Math_fround($8_1 * $20_1);
  $18_1 = Math_fround(Math_fround(Math_fround($7_1 * $6_1) + Math_fround($11_1 * $10_1)) + Math_fround($15_1 * $14_1));
  $16_1 = Math_fround(Math_fround($25_1 + $22_1) + Math_fround($3_1 * $18_1));
  $22_1 = Math_fround($19_1 + Math_fround(Math_fround($16_1 + Math_fround($22_1 + Math_fround(Math_fround($19_1 * Math_fround(0.0)) - Math_fround($9_1 * $3_1)))) * $2_1));
  $29_1 = Math_fround($8_1 * $19_1);
  $7_1 = Math_fround(Math_fround(Math_fround($26_1 * $6_1) + Math_fround($27_1 * $10_1)) + Math_fround($28_1 * $14_1));
  $26_1 = Math_fround($3_1 * $7_1);
  $6_1 = Math_fround(Math_fround(Math_fround($4_1 * $5_1) + $29_1) + $26_1);
  $11_1 = Math_fround($2_1 * Math_fround(0.0));
  $10_1 = Math_fround(Math_fround($12_1 + Math_fround(Math_fround(Math_fround($3_1 * $6_1) - Math_fround($4_1 * $16_1)) * $2_1)) - Math_fround($11_1 + $12_1));
  $19_1 = Math_fround($9_1 + Math_fround(Math_fround(Math_fround(Math_fround($9_1 * Math_fround(0.0)) + Math_fround($3_1 * $19_1)) - Math_fround($20_1 * $4_1)) * $2_1));
  $14_1 = Math_fround(Math_fround($6_1 + Math_fround(Math_fround(Math_fround($8_1 * $16_1) - Math_fround($3_1 * $12_1)) * $2_1)) - Math_fround($11_1 + $6_1));
  $15_1 = Math_fround($5_1 + Math_fround(Math_fround(Math_fround($8_1 * $17_1) + Math_fround(Math_fround($5_1 * Math_fround(0.0)) - Math_fround($24_1 * $3_1))) * $2_1));
  $17_1 = Math_fround(Math_fround($16_1 + Math_fround(Math_fround(Math_fround($4_1 * $12_1) - Math_fround($8_1 * $6_1)) * $2_1)) - Math_fround($11_1 + $16_1));
  $9_1 = Math_fround($20_1 + Math_fround(Math_fround(Math_fround(Math_fround($20_1 * Math_fround(0.0)) + Math_fround(Math_fround($4_1 * $9_1) - $29_1)) - $6_1) * $2_1));
  $5_1 = Math_fround($24_1 + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($24_1 * Math_fround(0.0)) + Math_fround($3_1 * $5_1)) - $25_1) - $16_1) * $2_1));
  $414_1 = Math_fround(Math_fround($21_1 * Math_fround(Math_fround($22_1 * $10_1) - Math_fround($19_1 * $14_1))) + Math_fround(Math_fround($15_1 * Math_fround(Math_fround($19_1 * $17_1) - Math_fround($9_1 * $10_1))) + Math_fround($5_1 * Math_fround(Math_fround($9_1 * $14_1) - Math_fround($22_1 * $17_1)))));
  $16_1 = Math_fround($13_1 + Math_fround(Math_fround($6_1 + Math_fround(Math_fround(Math_fround($13_1 * Math_fround(0.0)) + $26_1) - Math_fround($18_1 * $4_1))) * $2_1));
  $12_1 = Math_fround($7_1 + Math_fround(Math_fround(Math_fround(Math_fround($8_1 * $18_1) + Math_fround(Math_fround($7_1 * Math_fround(0.0)) - $23_1)) - $12_1) * $2_1));
  $20_1 = Math_fround(Math_fround($22_1 * $16_1) - Math_fround($19_1 * $12_1));
  $2_1 = Math_fround($18_1 + Math_fround(Math_fround(Math_fround($18_1 * Math_fround(0.0)) + Math_fround(Math_fround($4_1 * $13_1) - Math_fround($7_1 * $8_1))) * $2_1));
  $18_1 = Math_fround(Math_fround($19_1 * $2_1) - Math_fround($9_1 * $16_1));
  $9_1 = Math_fround(Math_fround($9_1 * $12_1) - Math_fround($22_1 * $2_1));
  $6_1 = Math_fround(Math_fround($21_1 * $20_1) + Math_fround(Math_fround($15_1 * $18_1) + Math_fround($5_1 * $9_1)));
  $6_1 = Math_fround(Math_abs($6_1)) > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_fround(1.0) / $6_1) : $6_1;
  HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(Math_fround($3_1 - Math_fround($414_1 * $6_1)) - $3_1);
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround($8_1 - Math_fround(Math_fround(Math_fround($21_1 * Math_fround(Math_fround($16_1 * $14_1) - Math_fround($12_1 * $10_1))) + Math_fround(Math_fround($15_1 * Math_fround(Math_fround($2_1 * $10_1) - Math_fround($16_1 * $17_1))) + Math_fround($5_1 * Math_fround(Math_fround($12_1 * $17_1) - Math_fround($2_1 * $14_1))))) * $6_1)) - $8_1);
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($4_1 - Math_fround(Math_fround(Math_fround($17_1 * $20_1) + Math_fround(Math_fround($14_1 * $18_1) + Math_fround($10_1 * $9_1))) * $6_1)) - $4_1);
 }
 
 function $812($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = HEAP32[($0_1 + 548 | 0) >> 2] | 0;
    if (($2_1 | 0) < (1 | 0)) {
     break label$2
    }
    $3_1 = HEAP32[($0_1 + 556 | 0) >> 2] | 0;
    $4_1 = $2_1;
    label$3 : {
     label$4 : while (1) {
      if ((HEAP32[$3_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$3
      }
      $3_1 = $3_1 + 4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue label$4
      }
      break label$2;
     };
    }
    if ($4_1) {
     break label$1
    }
   }
   label$5 : {
    if (($2_1 | 0) != (HEAP32[($0_1 + 552 | 0) >> 2] | 0 | 0)) {
     break label$5
    }
    $5_1 = $2_1 ? $2_1 << 1 | 0 : 1;
    if (($2_1 | 0) >= ($5_1 | 0)) {
     break label$5
    }
    label$6 : {
     label$7 : {
      if ($5_1) {
       break label$7
      }
      $6_1 = 0;
      break label$6;
     }
     $6_1 = $79($5_1 << 2 | 0 | 0, 16 | 0) | 0;
     $2_1 = HEAP32[($0_1 + 548 | 0) >> 2] | 0;
    }
    label$8 : {
     if (($2_1 | 0) < (1 | 0)) {
      break label$8
     }
     $3_1 = 0;
     $4_1 = $2_1;
     label$9 : while (1) {
      HEAP32[($6_1 + $3_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 556 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
      $3_1 = $3_1 + 4 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue label$9
      }
      break label$9;
     };
    }
    label$10 : {
     $3_1 = HEAP32[($0_1 + 556 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$10
     }
     label$11 : {
      if (!(HEAPU8[($0_1 + 560 | 0) >> 0] | 0)) {
       break label$11
      }
      $80($3_1 | 0);
      $2_1 = HEAP32[($0_1 + 548 | 0) >> 2] | 0;
     }
     HEAP32[($0_1 + 556 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 556 | 0) >> 2] = $6_1;
    HEAP32[($0_1 + 552 | 0) >> 2] = $5_1;
    HEAP8[($0_1 + 560 | 0) >> 0] = 1;
   }
   HEAP32[((HEAP32[($0_1 + 556 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $1_1;
   HEAP32[($0_1 + 548 | 0) >> 2] = $2_1 + 1 | 0;
   $4_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   label$12 : {
    label$13 : {
     $6_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
     if (($6_1 | 0) != ($0_1 | 0)) {
      break label$13
     }
     $1_1 = HEAP32[($0_1 + 288 | 0) >> 2] | 0;
     if (($1_1 | 0) != (HEAP32[($0_1 + 292 | 0) >> 2] | 0 | 0)) {
      break label$12
     }
     $5_1 = $1_1 ? $1_1 << 1 | 0 : 1;
     if (($1_1 | 0) >= ($5_1 | 0)) {
      break label$12
     }
     label$14 : {
      label$15 : {
       if ($5_1) {
        break label$15
       }
       $6_1 = 0;
       break label$14;
      }
      $6_1 = $79($5_1 << 2 | 0 | 0, 16 | 0) | 0;
      $1_1 = HEAP32[($0_1 + 288 | 0) >> 2] | 0;
     }
     label$16 : {
      if (($1_1 | 0) < (1 | 0)) {
       break label$16
      }
      $3_1 = 0;
      $2_1 = $1_1;
      label$17 : while (1) {
       HEAP32[($6_1 + $3_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 296 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
       $3_1 = $3_1 + 4 | 0;
       $2_1 = $2_1 + -1 | 0;
       if ($2_1) {
        continue label$17
       }
       break label$17;
      };
     }
     label$18 : {
      $3_1 = HEAP32[($0_1 + 296 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$18
      }
      label$19 : {
       if (!(HEAPU8[($0_1 + 300 | 0) >> 0] | 0)) {
        break label$19
       }
       $80($3_1 | 0);
       $1_1 = HEAP32[($0_1 + 288 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 296 | 0) >> 2] = 0;
     }
     HEAP32[($0_1 + 296 | 0) >> 2] = $6_1;
     HEAP32[($0_1 + 292 | 0) >> 2] = $5_1;
     HEAP8[($0_1 + 300 | 0) >> 0] = 1;
     break label$12;
    }
    label$20 : {
     $1_1 = HEAP32[($4_1 + 288 | 0) >> 2] | 0;
     if (($1_1 | 0) != (HEAP32[($4_1 + 292 | 0) >> 2] | 0 | 0)) {
      break label$20
     }
     $5_1 = $1_1 ? $1_1 << 1 | 0 : 1;
     if (($1_1 | 0) >= ($5_1 | 0)) {
      break label$20
     }
     label$21 : {
      label$22 : {
       if ($5_1) {
        break label$22
       }
       $2_1 = 0;
       break label$21;
      }
      $2_1 = $79($5_1 << 2 | 0 | 0, 16 | 0) | 0;
      $1_1 = HEAP32[($4_1 + 288 | 0) >> 2] | 0;
     }
     label$23 : {
      if (($1_1 | 0) < (1 | 0)) {
       break label$23
      }
      $3_1 = 0;
      $0_1 = $1_1;
      label$24 : while (1) {
       HEAP32[($2_1 + $3_1 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
       $3_1 = $3_1 + 4 | 0;
       $0_1 = $0_1 + -1 | 0;
       if ($0_1) {
        continue label$24
       }
       break label$24;
      };
     }
     label$25 : {
      $3_1 = HEAP32[($4_1 + 296 | 0) >> 2] | 0;
      if (!$3_1) {
       break label$25
      }
      label$26 : {
       if (!(HEAPU8[($4_1 + 300 | 0) >> 0] | 0)) {
        break label$26
       }
       $80($3_1 | 0);
       $1_1 = HEAP32[($4_1 + 288 | 0) >> 2] | 0;
      }
      HEAP32[($4_1 + 296 | 0) >> 2] = 0;
     }
     HEAP32[($4_1 + 296 | 0) >> 2] = $2_1;
     HEAP32[($4_1 + 292 | 0) >> 2] = $5_1;
     HEAP8[($4_1 + 300 | 0) >> 0] = 1;
    }
    $0_1 = $4_1;
    $4_1 = $6_1;
   }
   HEAP32[($0_1 + 288 | 0) >> 2] = $1_1 + 1 | 0;
   HEAP32[($0_1 + 280 | 0) >> 2] = ($1_1 ^ -1 | 0) >>> 31 | 0;
   HEAP32[((HEAP32[($0_1 + 296 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] = $4_1;
  }
 }
 
 function $813($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $5_1 = 0, $2_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 548 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   $4_1 = HEAP32[($0_1 + 556 | 0) >> 2] | 0;
   $5_1 = $4_1;
   label$2 : {
    label$3 : while (1) {
     if ((HEAP32[$5_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$2
     }
     $5_1 = $5_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     if (($2_1 | 0) != ($3_1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   if (($3_1 | 0) >= ($2_1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   $5_1 = $4_1;
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      if ((HEAP32[$5_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
       break label$5
      }
      $5_1 = $5_1 + 4 | 0;
      $3_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($3_1 | 0)) {
       continue label$6
      }
      break label$4;
     };
    }
    if (($2_1 | 0) <= ($3_1 | 0)) {
     break label$4
    }
    $3_1 = $2_1 + -1 | 0;
    $2_1 = $3_1 << 2 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[($4_1 + $2_1 | 0) >> 2] | 0;
    HEAP32[($0_1 + 548 | 0) >> 2] = $3_1;
    HEAP32[((HEAP32[($0_1 + 556 | 0) >> 2] | 0) + $2_1 | 0) >> 2] = $1_1;
   }
   $4_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   label$7 : {
    $2_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
    if (($2_1 | 0) != ($0_1 | 0)) {
     break label$7
    }
    label$8 : {
     $1_1 = HEAP32[($0_1 + 288 | 0) >> 2] | 0;
     if (($1_1 | 0) < (1 | 0)) {
      break label$8
     }
     $3_1 = 0;
     $2_1 = HEAP32[($0_1 + 296 | 0) >> 2] | 0;
     $5_1 = $2_1;
     label$9 : {
      label$10 : while (1) {
       if ((HEAP32[$5_1 >> 2] | 0 | 0) == ($4_1 | 0)) {
        break label$9
       }
       $5_1 = $5_1 + 4 | 0;
       $3_1 = $3_1 + 1 | 0;
       if (($1_1 | 0) != ($3_1 | 0)) {
        continue label$10
       }
       break label$8;
      };
     }
     if (($1_1 | 0) <= ($3_1 | 0)) {
      break label$8
     }
     $1_1 = $1_1 + -1 | 0;
     $3_1 = $1_1 << 2 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[($2_1 + $3_1 | 0) >> 2] | 0;
     HEAP32[($0_1 + 288 | 0) >> 2] = $1_1;
     HEAP32[((HEAP32[($0_1 + 296 | 0) >> 2] | 0) + $3_1 | 0) >> 2] = $4_1;
    }
    HEAP32[($0_1 + 280 | 0) >> 2] = ($1_1 | 0) > (0 | 0);
    return;
   }
   label$11 : {
    $1_1 = HEAP32[($4_1 + 288 | 0) >> 2] | 0;
    if (($1_1 | 0) < (1 | 0)) {
     break label$11
    }
    $3_1 = 0;
    $0_1 = HEAP32[($4_1 + 296 | 0) >> 2] | 0;
    $5_1 = $0_1;
    label$12 : {
     label$13 : while (1) {
      if ((HEAP32[$5_1 >> 2] | 0 | 0) == ($2_1 | 0)) {
       break label$12
      }
      $5_1 = $5_1 + 4 | 0;
      $3_1 = $3_1 + 1 | 0;
      if (($1_1 | 0) != ($3_1 | 0)) {
       continue label$13
      }
      break label$11;
     };
    }
    if (($1_1 | 0) <= ($3_1 | 0)) {
     break label$11
    }
    $1_1 = $1_1 + -1 | 0;
    $3_1 = $1_1 << 2 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[($0_1 + $3_1 | 0) >> 2] | 0;
    HEAP32[($4_1 + 288 | 0) >> 2] = $1_1;
    HEAP32[((HEAP32[($4_1 + 296 | 0) >> 2] | 0) + $3_1 | 0) >> 2] = $2_1;
   }
   HEAP32[($4_1 + 280 | 0) >> 2] = ($1_1 | 0) > (0 | 0);
  }
 }
 
 function $814($0_1) {
  $0_1 = $0_1 | 0;
  return 496 | 0;
 }
 
 function $815($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $194_1 = 0, $197_1 = 0, $200_1 = 0, $203_1 = 0;
  $311($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($1_1 + 264 | 0) >> 2] = HEAP32[($0_1 + 324 | 0) >> 2] | 0;
  HEAP32[($1_1 + 268 | 0) >> 2] = HEAP32[($0_1 + 328 | 0) >> 2] | 0;
  HEAP32[($1_1 + 272 | 0) >> 2] = HEAP32[($0_1 + 332 | 0) >> 2] | 0;
  HEAP32[($1_1 + 276 | 0) >> 2] = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
  HEAP32[($1_1 + 280 | 0) >> 2] = HEAP32[($0_1 + 340 | 0) >> 2] | 0;
  HEAP32[($1_1 + 284 | 0) >> 2] = HEAP32[($0_1 + 344 | 0) >> 2] | 0;
  HEAP32[($1_1 + 288 | 0) >> 2] = HEAP32[($0_1 + 348 | 0) >> 2] | 0;
  HEAP32[($1_1 + 292 | 0) >> 2] = HEAP32[($0_1 + 352 | 0) >> 2] | 0;
  HEAP32[($1_1 + 296 | 0) >> 2] = HEAP32[($0_1 + 356 | 0) >> 2] | 0;
  HEAP32[($1_1 + 300 | 0) >> 2] = HEAP32[($0_1 + 360 | 0) >> 2] | 0;
  HEAP32[($1_1 + 304 | 0) >> 2] = HEAP32[($0_1 + 364 | 0) >> 2] | 0;
  HEAP32[($1_1 + 308 | 0) >> 2] = HEAP32[($0_1 + 368 | 0) >> 2] | 0;
  HEAP32[($1_1 + 312 | 0) >> 2] = HEAP32[($0_1 + 372 | 0) >> 2] | 0;
  HEAP32[($1_1 + 316 | 0) >> 2] = HEAP32[($0_1 + 376 | 0) >> 2] | 0;
  HEAP32[($1_1 + 320 | 0) >> 2] = HEAP32[($0_1 + 380 | 0) >> 2] | 0;
  HEAP32[($1_1 + 324 | 0) >> 2] = HEAP32[($0_1 + 384 | 0) >> 2] | 0;
  HEAP32[($1_1 + 328 | 0) >> 2] = HEAP32[($0_1 + 388 | 0) >> 2] | 0;
  HEAP32[($1_1 + 332 | 0) >> 2] = HEAP32[($0_1 + 392 | 0) >> 2] | 0;
  HEAP32[($1_1 + 336 | 0) >> 2] = HEAP32[($0_1 + 396 | 0) >> 2] | 0;
  HEAP32[($1_1 + 340 | 0) >> 2] = HEAP32[($0_1 + 400 | 0) >> 2] | 0;
  HEAP32[($1_1 + 456 | 0) >> 2] = HEAP32[($0_1 + 404 | 0) >> 2] | 0;
  HEAP32[($1_1 + 344 | 0) >> 2] = HEAP32[($0_1 + 604 | 0) >> 2] | 0;
  HEAP32[($1_1 + 348 | 0) >> 2] = HEAP32[($0_1 + 608 | 0) >> 2] | 0;
  HEAP32[($1_1 + 352 | 0) >> 2] = HEAP32[($0_1 + 612 | 0) >> 2] | 0;
  HEAP32[($1_1 + 356 | 0) >> 2] = HEAP32[($0_1 + 616 | 0) >> 2] | 0;
  HEAP32[($1_1 + 360 | 0) >> 2] = HEAP32[($0_1 + 408 | 0) >> 2] | 0;
  HEAP32[($1_1 + 364 | 0) >> 2] = HEAP32[($0_1 + 412 | 0) >> 2] | 0;
  HEAP32[($1_1 + 368 | 0) >> 2] = HEAP32[($0_1 + 416 | 0) >> 2] | 0;
  HEAP32[($1_1 + 372 | 0) >> 2] = HEAP32[($0_1 + 420 | 0) >> 2] | 0;
  HEAP32[($1_1 + 376 | 0) >> 2] = HEAP32[($0_1 + 424 | 0) >> 2] | 0;
  HEAP32[($1_1 + 380 | 0) >> 2] = HEAP32[($0_1 + 428 | 0) >> 2] | 0;
  HEAP32[($1_1 + 384 | 0) >> 2] = HEAP32[($0_1 + 432 | 0) >> 2] | 0;
  HEAP32[($1_1 + 388 | 0) >> 2] = HEAP32[($0_1 + 436 | 0) >> 2] | 0;
  HEAP32[($1_1 + 392 | 0) >> 2] = HEAP32[($0_1 + 440 | 0) >> 2] | 0;
  HEAP32[($1_1 + 396 | 0) >> 2] = HEAP32[($0_1 + 444 | 0) >> 2] | 0;
  HEAP32[($1_1 + 400 | 0) >> 2] = HEAP32[($0_1 + 448 | 0) >> 2] | 0;
  HEAP32[($1_1 + 404 | 0) >> 2] = HEAP32[($0_1 + 452 | 0) >> 2] | 0;
  HEAP32[($1_1 + 408 | 0) >> 2] = HEAP32[($0_1 + 456 | 0) >> 2] | 0;
  HEAP32[($1_1 + 412 | 0) >> 2] = HEAP32[($0_1 + 460 | 0) >> 2] | 0;
  HEAP32[($1_1 + 416 | 0) >> 2] = HEAP32[($0_1 + 464 | 0) >> 2] | 0;
  HEAP32[($1_1 + 420 | 0) >> 2] = HEAP32[($0_1 + 468 | 0) >> 2] | 0;
  HEAP32[($1_1 + 424 | 0) >> 2] = HEAP32[($0_1 + 472 | 0) >> 2] | 0;
  HEAP32[($1_1 + 428 | 0) >> 2] = HEAP32[($0_1 + 476 | 0) >> 2] | 0;
  HEAP32[($1_1 + 432 | 0) >> 2] = HEAP32[($0_1 + 480 | 0) >> 2] | 0;
  HEAP32[($1_1 + 436 | 0) >> 2] = HEAP32[($0_1 + 484 | 0) >> 2] | 0;
  HEAP32[($1_1 + 440 | 0) >> 2] = HEAP32[($0_1 + 488 | 0) >> 2] | 0;
  HEAP32[($1_1 + 444 | 0) >> 2] = HEAP32[($0_1 + 492 | 0) >> 2] | 0;
  HEAP32[($1_1 + 448 | 0) >> 2] = HEAP32[($0_1 + 496 | 0) >> 2] | 0;
  HEAP32[($1_1 + 452 | 0) >> 2] = HEAP32[($0_1 + 500 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 504 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 508 | 0) >> 2] | 0;
  $194_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[($1_1 + 460 | 0) >> 2] = $194_1;
  HEAP32[($1_1 + 464 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($0_1 + 516 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 520 | 0) >> 2] | 0;
  $197_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[($1_1 + 468 | 0) >> 2] = $197_1;
  HEAP32[($1_1 + 472 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[($0_1 + 524 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 528 | 0) >> 2] | 0;
  $200_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[($1_1 + 476 | 0) >> 2] = $200_1;
  HEAP32[($1_1 + 480 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($0_1 + 532 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 536 | 0) >> 2] | 0;
  $203_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1;
  HEAP32[($1_1 + 484 | 0) >> 2] = $203_1;
  HEAP32[($1_1 + 488 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 492 | 0) >> 2] = HEAPU8[($0_1 + 512 | 0) >> 0] | 0;
  return 20124 | 0;
 }
 
 function $816($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1, HEAP32[($2_1 + 8 | 0) >> 2] | 0, $1_1) | 0), wasm2js_i32$4 = 1497645650), wasm2js_i32$5 = $0_1), wasm2js_i32$0 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function $817($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 20096;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 556 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 560 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 556 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 556 | 0) >> 2] = 0;
  HEAP32[($0_1 + 548 | 0) >> 2] = 0;
  HEAP32[($0_1 + 552 | 0) >> 2] = 0;
  HEAP8[($0_1 + 560 | 0) >> 0] = 1;
  $306($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $818($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 20096;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 556 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 560 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 556 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 556 | 0) >> 2] = 0;
  HEAP32[($0_1 + 548 | 0) >> 2] = 0;
  HEAP32[($0_1 + 552 | 0) >> 2] = 0;
  HEAP8[($0_1 + 560 | 0) >> 0] = 1;
  $306($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $819($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 20180;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP8[($0_1 + 40 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 28 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  HEAP8[($0_1 + 80 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 76 | 0) >> 2] = 0;
  HEAP8[($0_1 + 100 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 68 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 96 | 0) >> 2] = 0;
  HEAP8[($0_1 + 120 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 88 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 116 | 0) >> 2] = 0;
  HEAP8[($0_1 + 140 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 108 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 136 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 128 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 160 | 0) >> 0] = 1;
  HEAP32[($0_1 + 156 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 148 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 180 | 0) >> 0] = 1;
  HEAP32[($0_1 + 176 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 168 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 208 | 0) >> 0] = 1;
  HEAP32[($0_1 + 232 | 0) >> 2] = 0;
  HEAP32[($0_1 + 204 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 196 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 224 | 0) >> 2] = 0;
  HEAP32[($0_1 + 212 | 0) >> 2] = 534;
  HEAP32[($0_1 + 216 | 0) >> 2] = 535;
  HEAP32[($0_1 + 220 | 0) >> 2] = 536;
  return $0_1 | 0;
 }
 
 function $820($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  label$1 : {
   label$2 : {
    $3_1 = Math_fround(HEAPF32[($2_1 + 100 | 0) >> 2]);
    $4_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
    $7_1 = Math_fround(HEAPF32[($2_1 + 108 | 0) >> 2]);
    $7_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($2_1 + 112 | 0) >> 2]) - Math_fround($3_1 * Math_fround(HEAPF32[($2_1 + 116 | 0) >> 2]))) - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2])) + Math_fround($5_1 * Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]))) + Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]))) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) * Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]))) + Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2])))) * $7_1)) - Math_fround($7_1 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]))) + Math_fround(Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2]))) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 84 | 0) >> 2]))) + Math_fround(Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 88 | 0) >> 2]))))));
    $8_1 = Math_fround($3_1 + $7_1);
    $9_1 = Math_fround(HEAPF32[($2_1 + 120 | 0) >> 2]);
    if ($8_1 < $9_1 ^ 1 | 0) {
     break label$2
    }
    $7_1 = Math_fround($9_1 - $3_1);
    $8_1 = $9_1;
    break label$1;
   }
   $9_1 = Math_fround(HEAPF32[($2_1 + 124 | 0) >> 2]);
   if ($8_1 > $9_1 ^ 1 | 0) {
    break label$1
   }
   $7_1 = Math_fround($9_1 - $3_1);
   $8_1 = $9_1;
  }
  HEAPF32[($2_1 + 100 | 0) >> 2] = $8_1;
  label$3 : {
   if (!(HEAP32[($0_1 + 240 | 0) >> 2] | 0)) {
    break label$3
   }
   HEAPF32[($0_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 112 | 0) >> 2]) * Math_fround($7_1 * Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2])))) + Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]));
   HEAPF32[($0_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround($7_1 * Math_fround($5_1 * Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]))) * Math_fround(HEAPF32[($0_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]));
   HEAPF32[($0_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround($7_1 * Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]))) * Math_fround(HEAPF32[($0_1 + 120 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]));
   $8_1 = Math_fround(HEAPF32[($2_1 + 72 | 0) >> 2]);
   $3_1 = Math_fround(HEAPF32[($2_1 + 68 | 0) >> 2]);
   HEAPF32[($0_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2])) * Math_fround(HEAPF32[($2_1 + 64 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]));
   $9_1 = Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]);
   HEAPF32[($0_1 + 84 | 0) >> 2] = Math_fround(Math_fround($3_1 * Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]))) + Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]));
   HEAPF32[($0_1 + 88 | 0) >> 2] = Math_fround(Math_fround($8_1 * Math_fround($7_1 * $9_1)) + Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]));
  }
  label$4 : {
   if (!(HEAP32[($1_1 + 240 | 0) >> 2] | 0)) {
    break label$4
   }
   $8_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
   $3_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
   HEAPF32[($1_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 112 | 0) >> 2]) * Math_fround($7_1 * Math_fround(Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 128 | 0) >> 2])))) + Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]));
   HEAPF32[($1_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround($7_1 * Math_fround($3_1 * Math_fround(HEAPF32[($1_1 + 132 | 0) >> 2]))) * Math_fround(HEAPF32[($1_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]));
   HEAPF32[($1_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround($7_1 * Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 136 | 0) >> 2]))) * Math_fround(HEAPF32[($1_1 + 120 | 0) >> 2])) + Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2]));
   $8_1 = Math_fround(HEAPF32[($2_1 + 88 | 0) >> 2]);
   $3_1 = Math_fround(HEAPF32[($2_1 + 84 | 0) >> 2]);
   HEAPF32[($1_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 96 | 0) >> 2])) * Math_fround(HEAPF32[($2_1 + 80 | 0) >> 2])) + Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]));
   $9_1 = Math_fround(HEAPF32[($1_1 + 104 | 0) >> 2]);
   HEAPF32[($1_1 + 84 | 0) >> 2] = Math_fround(Math_fround($3_1 * Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 100 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 84 | 0) >> 2]));
   HEAPF32[($1_1 + 88 | 0) >> 2] = Math_fround(Math_fround($8_1 * Math_fround($7_1 * $9_1)) + Math_fround(HEAPF32[($1_1 + 88 | 0) >> 2]));
  }
  return Math_fround($7_1);
 }
 
 function $821($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $8_1 = Math_fround(0), $4_1 = Math_fround(0), $9_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $10_1 = 0;
  $3_1 = Math_fround(HEAPF32[($2_1 + 120 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($2_1 + 100 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($2_1 + 108 | 0) >> 2]);
  $8_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($2_1 + 112 | 0) >> 2]) - Math_fround($4_1 * Math_fround(HEAPF32[($2_1 + 116 | 0) >> 2]))) - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($5_1 * Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2])) + Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]))) + Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]))) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) * Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]))) + Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2])))) * $8_1)) - Math_fround($8_1 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]))) + Math_fround(Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2]))) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 84 | 0) >> 2]))) + Math_fround(Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 88 | 0) >> 2]))))));
  $9_1 = Math_fround($4_1 + $8_1);
  $10_1 = $9_1 < $3_1;
  HEAPF32[($2_1 + 100 | 0) >> 2] = $10_1 ? $3_1 : $9_1;
  $3_1 = $10_1 ? Math_fround($3_1 - $4_1) : $8_1;
  label$1 : {
   if (!(HEAP32[($0_1 + 240 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAPF32[($0_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 112 | 0) >> 2]) * Math_fround($3_1 * Math_fround($5_1 * Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2])))) + Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]));
   HEAPF32[($0_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3_1 * Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]))) * Math_fround(HEAPF32[($0_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]));
   HEAPF32[($0_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3_1 * Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]))) * Math_fround(HEAPF32[($0_1 + 120 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]));
   $4_1 = Math_fround(HEAPF32[($2_1 + 72 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($2_1 + 68 | 0) >> 2]);
   HEAPF32[($0_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2])) * Math_fround(HEAPF32[($2_1 + 64 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]));
   $9_1 = Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]);
   HEAPF32[($0_1 + 84 | 0) >> 2] = Math_fround(Math_fround($8_1 * Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]))) + Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]));
   HEAPF32[($0_1 + 88 | 0) >> 2] = Math_fround(Math_fround($4_1 * Math_fround($3_1 * $9_1)) + Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]));
  }
  label$2 : {
   if (!(HEAP32[($1_1 + 240 | 0) >> 2] | 0)) {
    break label$2
   }
   $4_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
   HEAPF32[($1_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 112 | 0) >> 2]) * Math_fround($3_1 * Math_fround(Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 128 | 0) >> 2])))) + Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]));
   HEAPF32[($1_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3_1 * Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 132 | 0) >> 2]))) * Math_fround(HEAPF32[($1_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]));
   HEAPF32[($1_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3_1 * Math_fround($4_1 * Math_fround(HEAPF32[($1_1 + 136 | 0) >> 2]))) * Math_fround(HEAPF32[($1_1 + 120 | 0) >> 2])) + Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2]));
   $4_1 = Math_fround(HEAPF32[($2_1 + 88 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($2_1 + 84 | 0) >> 2]);
   HEAPF32[($1_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3_1 * Math_fround(HEAPF32[($1_1 + 96 | 0) >> 2])) * Math_fround(HEAPF32[($2_1 + 80 | 0) >> 2])) + Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]));
   $9_1 = Math_fround(HEAPF32[($1_1 + 104 | 0) >> 2]);
   HEAPF32[($1_1 + 84 | 0) >> 2] = Math_fround(Math_fround($8_1 * Math_fround($3_1 * Math_fround(HEAPF32[($1_1 + 100 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 84 | 0) >> 2]));
   HEAPF32[($1_1 + 88 | 0) >> 2] = Math_fround(Math_fround($4_1 * Math_fround($3_1 * $9_1)) + Math_fround(HEAPF32[($1_1 + 88 | 0) >> 2]));
  }
  return Math_fround($3_1);
 }
 
 function $822($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $9_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = 0, $29_1 = Math_fround(0);
  $3_1 = Math_fround(0.0);
  label$1 : {
   $4_1 = Math_fround(HEAPF32[($2_1 + 128 | 0) >> 2]);
   if ($4_1 == Math_fround(0.0)) {
    break label$1
   }
   HEAP32[(0 + 2800 | 0) >> 2] = (HEAP32[(0 + 2800 | 0) >> 2] | 0) + 1 | 0;
   $3_1 = Math_fround(HEAPF32[($2_1 + 120 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($2_1 + 96 | 0) >> 2]);
   $29_1 = Math_fround($4_1 - Math_fround($5_1 * Math_fround(HEAPF32[($2_1 + 116 | 0) >> 2])));
   $6_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
   $4_1 = Math_fround(HEAPF32[($2_1 + 108 | 0) >> 2]);
   $4_1 = Math_fround(Math_fround($29_1 - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 144 | 0) >> 2])) + Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 148 | 0) >> 2]))) + Math_fround($8_1 * Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2]))) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) * Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 164 | 0) >> 2]))) + Math_fround(Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2])))) * $4_1)) - Math_fround($4_1 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 144 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 148 | 0) >> 2]))) + Math_fround(Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 152 | 0) >> 2]))) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 160 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 164 | 0) >> 2]))) + Math_fround(Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 168 | 0) >> 2]))))));
   $9_1 = Math_fround($5_1 + $4_1);
   $10_1 = $9_1 < $3_1;
   HEAPF32[($2_1 + 96 | 0) >> 2] = $10_1 ? $3_1 : $9_1;
   $3_1 = $10_1 ? Math_fround($3_1 - $5_1) : $4_1;
   label$2 : {
    if (!(HEAP32[($0_1 + 240 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAPF32[($0_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 112 | 0) >> 2]) * Math_fround($3_1 * Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 128 | 0) >> 2])))) + Math_fround(HEAPF32[($0_1 + 144 | 0) >> 2]));
    HEAPF32[($0_1 + 148 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3_1 * Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]))) * Math_fround(HEAPF32[($0_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 148 | 0) >> 2]));
    HEAPF32[($0_1 + 152 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3_1 * Math_fround($8_1 * Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]))) * Math_fround(HEAPF32[($0_1 + 120 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2]));
    $5_1 = Math_fround(HEAPF32[($2_1 + 72 | 0) >> 2]);
    $4_1 = Math_fround(HEAPF32[($2_1 + 68 | 0) >> 2]);
    HEAPF32[($0_1 + 160 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2])) * Math_fround(HEAPF32[($2_1 + 64 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2]));
    $9_1 = Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]);
    HEAPF32[($0_1 + 164 | 0) >> 2] = Math_fround(Math_fround($4_1 * Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]))) + Math_fround(HEAPF32[($0_1 + 164 | 0) >> 2]));
    HEAPF32[($0_1 + 168 | 0) >> 2] = Math_fround(Math_fround($5_1 * Math_fround($3_1 * $9_1)) + Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]));
   }
   if (!(HEAP32[($1_1 + 240 | 0) >> 2] | 0)) {
    break label$1
   }
   $5_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
   $4_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
   HEAPF32[($1_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 112 | 0) >> 2]) * Math_fround($3_1 * Math_fround(Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($1_1 + 128 | 0) >> 2])))) + Math_fround(HEAPF32[($1_1 + 144 | 0) >> 2]));
   HEAPF32[($1_1 + 148 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3_1 * Math_fround($4_1 * Math_fround(HEAPF32[($1_1 + 132 | 0) >> 2]))) * Math_fround(HEAPF32[($1_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[($1_1 + 148 | 0) >> 2]));
   HEAPF32[($1_1 + 152 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3_1 * Math_fround($5_1 * Math_fround(HEAPF32[($1_1 + 136 | 0) >> 2]))) * Math_fround(HEAPF32[($1_1 + 120 | 0) >> 2])) + Math_fround(HEAPF32[($1_1 + 152 | 0) >> 2]));
   $5_1 = Math_fround(HEAPF32[($2_1 + 88 | 0) >> 2]);
   $4_1 = Math_fround(HEAPF32[($2_1 + 84 | 0) >> 2]);
   HEAPF32[($1_1 + 160 | 0) >> 2] = Math_fround(Math_fround(Math_fround($3_1 * Math_fround(HEAPF32[($1_1 + 96 | 0) >> 2])) * Math_fround(HEAPF32[($2_1 + 80 | 0) >> 2])) + Math_fround(HEAPF32[($1_1 + 160 | 0) >> 2]));
   $9_1 = Math_fround(HEAPF32[($1_1 + 104 | 0) >> 2]);
   HEAPF32[($1_1 + 164 | 0) >> 2] = Math_fround(Math_fround($4_1 * Math_fround($3_1 * Math_fround(HEAPF32[($1_1 + 100 | 0) >> 2]))) + Math_fround(HEAPF32[($1_1 + 164 | 0) >> 2]));
   HEAPF32[($1_1 + 168 | 0) >> 2] = Math_fround(Math_fround($5_1 * Math_fround($3_1 * $9_1)) + Math_fround(HEAPF32[($1_1 + 168 | 0) >> 2]));
  }
  return Math_fround($3_1);
 }
 
 function $823($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 20180;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 204 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 208 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 204 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 204 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 196 | 0) >> 2] = 0;
  HEAP32[($0_1 + 200 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 208 | 0) >> 0] = 1;
  label$3 : {
   $1_1 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 180 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 176 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 176 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 168 | 0) >> 2] = 0;
  HEAP32[($0_1 + 172 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 180 | 0) >> 0] = 1;
  label$5 : {
   $1_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   label$6 : {
    if (!(HEAPU8[($0_1 + 160 | 0) >> 0] | 0)) {
     break label$6
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 156 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 156 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 148 | 0) >> 2] = 0;
  HEAP32[($0_1 + 152 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 160 | 0) >> 0] = 1;
  label$7 : {
   $1_1 = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$7
   }
   label$8 : {
    if (!(HEAPU8[($0_1 + 140 | 0) >> 0] | 0)) {
     break label$8
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 136 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 136 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 128 | 0) >> 2] = 0;
  HEAP32[($0_1 + 132 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 140 | 0) >> 0] = 1;
  label$9 : {
   $1_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$9
   }
   label$10 : {
    if (!(HEAPU8[($0_1 + 120 | 0) >> 0] | 0)) {
     break label$10
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 116 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 116 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 108 | 0) >> 2] = 0;
  HEAP32[($0_1 + 112 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 120 | 0) >> 0] = 1;
  label$11 : {
   $1_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$11
   }
   label$12 : {
    if (!(HEAPU8[($0_1 + 100 | 0) >> 0] | 0)) {
     break label$12
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 96 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 96 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  HEAP32[($0_1 + 92 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 100 | 0) >> 0] = 1;
  label$13 : {
   $1_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$13
   }
   label$14 : {
    if (!(HEAPU8[($0_1 + 80 | 0) >> 0] | 0)) {
     break label$14
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 76 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 76 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 80 | 0) >> 0] = 1;
  label$15 : {
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$15
   }
   label$16 : {
    if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
     break label$16
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  label$17 : {
   $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$17
   }
   label$18 : {
    if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
     break label$18
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 40 | 0) >> 0] = 1;
  label$19 : {
   $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$19
   }
   label$20 : {
    if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
     break label$20
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  return $0_1 | 0;
 }
 
 function $824($0_1) {
  $0_1 = $0_1 | 0;
  $80($823($0_1 | 0) | 0 | 0);
 }
 
 function $825($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $8_1 = Math_fround(0), $4_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $5_1 = 0, $39_1 = 0, $44_1 = 0, $49_1 = 0, $53_1 = 0, $58_1 = 0, $62_1 = 0, $66_1 = 0, $71_1 = 0, $105_1 = 0, $108_1 = 0, $112_1 = 0, $115_1 = 0, $120_1 = 0, $123_1 = 0, $126_1 = 0, $131_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0);
  label$1 : {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    $2_1 = 0;
    break label$1;
   }
   $2_1 = (((HEAP32[($2_1 + 252 | 0) >> 2] | 0) << 30 | 0) >> 31 | 0) & $2_1 | 0;
  }
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 88 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 80 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 72 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 152 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 160 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 168 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$3 : {
   label$4 : {
    if (!$2_1) {
     break label$4
    }
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    $39_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1;
    HEAP32[i64toi32_i32$0 >> 2] = $39_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1 + 12 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $44_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $44_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $2_1 + 28 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $49_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1 + 24 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $49_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1 + 20 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $53_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $53_1;
    HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $2_1 + 44 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $58_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1 + 40 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $58_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1 + 36 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $62_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $62_1;
    HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $2_1 + 52 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $66_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1;
    HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $66_1;
    HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1 + 60 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $71_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1 + 56 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $71_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $4_1 = Math_fround(HEAPF32[($2_1 + 412 | 0) >> 2]);
    $5_1 = $2_1 + 416 | 0;
    $6_1 = Math_fround(HEAPF32[$5_1 >> 2]);
    $7_1 = Math_fround(HEAPF32[($2_1 + 408 | 0) >> 2]);
    $8_1 = Math_fround(HEAPF32[($2_1 + 404 | 0) >> 2]);
    HEAP32[($1_1 + 140 | 0) >> 2] = 0;
    HEAPF32[($1_1 + 136 | 0) >> 2] = Math_fround($8_1 * $6_1);
    HEAPF32[($1_1 + 132 | 0) >> 2] = Math_fround($8_1 * $4_1);
    HEAPF32[($1_1 + 128 | 0) >> 2] = Math_fround($8_1 * $7_1);
    HEAP32[($1_1 + 240 | 0) >> 2] = $2_1;
    i64toi32_i32$2 = $2_1 + 612 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $105_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1 + 104 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $105_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = HEAP32[($2_1 + 604 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2_1 + 608 | 0) >> 2] | 0;
    $108_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] = $108_1;
    HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $112_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1 + 120 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $112_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = HEAP32[($2_1 + 408 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2_1 + 412 | 0) >> 2] | 0;
    $115_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $115_1;
    HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $2_1 + 380 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $120_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1 + 184 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $120_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = HEAP32[($2_1 + 372 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($2_1 + 376 | 0) >> 2] | 0;
    $123_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1;
    HEAP32[(i64toi32_i32$1 + 176 | 0) >> 2] = $123_1;
    HEAP32[(i64toi32_i32$1 + 180 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[($2_1 + 388 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 392 | 0) >> 2] | 0;
    $126_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $1_1;
    HEAP32[(i64toi32_i32$0 + 192 | 0) >> 2] = $126_1;
    HEAP32[(i64toi32_i32$0 + 196 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1 + 396 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $131_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $1_1 + 200 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $131_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $4_1 = Math_fround(HEAPF32[($2_1 + 476 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($2_1 + 480 | 0) >> 2]);
    $7_1 = Math_fround(HEAPF32[($2_1 + 472 | 0) >> 2]);
    $8_1 = Math_fround(HEAPF32[($2_1 + 404 | 0) >> 2]);
    HEAP32[($1_1 + 220 | 0) >> 2] = 0;
    HEAPF32[($1_1 + 216 | 0) >> 2] = Math_fround(Math_fround($8_1 * $6_1) * $3_1);
    HEAPF32[($1_1 + 212 | 0) >> 2] = Math_fround(Math_fround($8_1 * $4_1) * $3_1);
    HEAPF32[($1_1 + 208 | 0) >> 2] = Math_fround(Math_fround($8_1 * $7_1) * $3_1);
    $7_1 = Math_fround(HEAPF32[($2_1 + 340 | 0) >> 2]);
    $9_1 = Math_fround(HEAPF32[($2_1 + 356 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($2_1 + 328 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($2_1 + 344 | 0) >> 2]);
    $12_1 = Math_fround(HEAPF32[($2_1 + 360 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($2_1 + 324 | 0) >> 2]);
    $8_1 = Math_fround(HEAPF32[($2_1 + 488 | 0) >> 2]);
    $4_1 = Math_fround(HEAPF32[($2_1 + 492 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($2_1 + 496 | 0) >> 2]);
    HEAPF32[($1_1 + 232 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($2_1 + 332 | 0) >> 2])) + Math_fround($4_1 * Math_fround(HEAPF32[($2_1 + 348 | 0) >> 2]))) + Math_fround($6_1 * Math_fround(HEAPF32[($2_1 + 364 | 0) >> 2]))) * $3_1);
    HEAPF32[($1_1 + 228 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($8_1 * $10_1) + Math_fround($4_1 * $11_1)) + Math_fround($6_1 * $12_1)) * $3_1);
    HEAPF32[($1_1 + 224 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $8_1) + Math_fround($7_1 * $4_1)) + Math_fround($9_1 * $6_1)) * $3_1);
    break label$3;
   }
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 240 | 0) >> 2] = 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 128 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 1065353216;
   HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = 1065353216;
   HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 1065353216;
   HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] = 1065353216;
   HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 176 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 180 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 1065353216;
   i64toi32_i32$1 = $1_1 + 44 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 40 | 0) >> 2] = 1065353216;
   i64toi32_i32$1 = $1_1 + 52 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 60 | 0) >> 2] = 0;
   i64toi32_i32$1 = $1_1 + 136 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 120 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 104 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 232 | 0) >> 2] = 0;
   i64toi32_i32$1 = $1_1 + 224 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 216 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 208 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 200 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 192 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 184 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  HEAP32[($1_1 + 236 | 0) >> 2] = 0;
 }
 
 function $826($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = Math_fround($10_1);
  $11_1 = $11_1 | 0;
  $12_1 = Math_fround($12_1);
  $13_1 = Math_fround($13_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $19_1 = Math_fround(0), $18_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $32_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $31_1 = Math_fround(0), $33_1 = Math_fround(0), $24_1 = Math_fround(0), $34_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $35_1 = Math_fround(0), $15_1 = 0, $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $14_1 = 0, $17_1 = 0, i64toi32_i32$2 = 0, $74_1 = 0, $79_1 = 0, $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0), $44_1 = Math_fround(0), $428_1 = Math_fround(0), $431_1 = Math_fround(0);
  HEAP32[($1_1 + 148 | 0) >> 2] = $4_1;
  HEAP32[($1_1 + 144 | 0) >> 2] = $3_1;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[($1_1 + 96 | 0) >> 2] = 0;
  HEAP32[($1_1 + 100 | 0) >> 2] = i64toi32_i32$0;
  $14_1 = HEAP32[($5_1 + 84 | 0) >> 2] | 0;
  HEAP32[($1_1 + 104 | 0) >> 2] = $14_1;
  $15_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $0_1 = HEAP32[(($15_1 + Math_imul($4_1, 244) | 0) + 240 | 0) >> 2] | 0;
  $16_1 = HEAP32[(($15_1 + Math_imul($3_1, 244) | 0) + 240 | 0) >> 2] | 0;
  HEAP32[($1_1 + 132 | 0) >> 2] = 0;
  $17_1 = $1_1 + 16 | 0;
  label$1 : {
   label$2 : {
    if (!$16_1) {
     break label$2
    }
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $74_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $17_1;
    HEAP32[i64toi32_i32$0 >> 2] = $74_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $79_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $17_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $79_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $18_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
    $19_1 = Math_fround(HEAPF32[$6_1 >> 2]);
    $20_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
    HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    $21_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
    $23_1 = Math_fround(Math_fround($19_1 * $21_1) - Math_fround($20_1 * $22_1));
    HEAPF32[($1_1 + 8 | 0) >> 2] = $23_1;
    $24_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
    $19_1 = Math_fround(Math_fround($18_1 * $22_1) - Math_fround($19_1 * $24_1));
    HEAPF32[($1_1 + 4 | 0) >> 2] = $19_1;
    $18_1 = Math_fround(Math_fround($20_1 * $24_1) - Math_fround($18_1 * $21_1));
    HEAPF32[$1_1 >> 2] = $18_1;
    $20_1 = Math_fround(HEAPF32[($16_1 + 612 | 0) >> 2]);
    $25_1 = Math_fround(HEAPF32[($16_1 + 364 | 0) >> 2]);
    $26_1 = Math_fround(HEAPF32[($16_1 + 356 | 0) >> 2]);
    $27_1 = Math_fround(HEAPF32[($16_1 + 360 | 0) >> 2]);
    $28_1 = Math_fround(HEAPF32[($16_1 + 608 | 0) >> 2]);
    $29_1 = Math_fround(HEAPF32[($16_1 + 348 | 0) >> 2]);
    $30_1 = Math_fround(HEAPF32[($16_1 + 340 | 0) >> 2]);
    $31_1 = Math_fround(HEAPF32[($16_1 + 344 | 0) >> 2]);
    $32_1 = Math_fround(HEAPF32[($16_1 + 332 | 0) >> 2]);
    $33_1 = Math_fround(HEAPF32[($16_1 + 328 | 0) >> 2]);
    $34_1 = Math_fround(HEAPF32[($16_1 + 604 | 0) >> 2]);
    $35_1 = Math_fround(HEAPF32[($16_1 + 324 | 0) >> 2]);
    HEAP32[($1_1 + 76 | 0) >> 2] = 0;
    $32_1 = Math_fround($34_1 * Math_fround(Math_fround(Math_fround($18_1 * $35_1) + Math_fround($19_1 * $33_1)) + Math_fround($23_1 * $32_1)));
    HEAPF32[($1_1 + 64 | 0) >> 2] = $32_1;
    $29_1 = Math_fround($28_1 * Math_fround(Math_fround(Math_fround($18_1 * $30_1) + Math_fround($19_1 * $31_1)) + Math_fround($23_1 * $29_1)));
    HEAPF32[($1_1 + 68 | 0) >> 2] = $29_1;
    $30_1 = Math_fround($20_1 * Math_fround(Math_fround(Math_fround($18_1 * $26_1) + Math_fround($19_1 * $27_1)) + Math_fround($23_1 * $25_1)));
    HEAPF32[($1_1 + 72 | 0) >> 2] = $30_1;
    break label$1;
   }
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[($1_1 + 64 | 0) >> 2] = 0;
   HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 72 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $17_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $23_1 = Math_fround(0.0);
   $19_1 = Math_fround(0.0);
   $18_1 = Math_fround(0.0);
   $24_1 = Math_fround(0.0);
   $21_1 = Math_fround(0.0);
   $22_1 = Math_fround(0.0);
   $32_1 = Math_fround(0.0);
   $30_1 = Math_fround(0.0);
   $29_1 = Math_fround(0.0);
  }
  label$3 : {
   label$4 : {
    if (!$0_1) {
     break label$4
    }
    $25_1 = Math_fround(HEAPF32[$2_1 >> 2]);
    $26_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    $27_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    HEAP32[($1_1 + 60 | 0) >> 2] = 0;
    $35_1 = Math_fround(-$27_1);
    HEAPF32[($1_1 + 56 | 0) >> 2] = $35_1;
    $36_1 = Math_fround(-$26_1);
    HEAPF32[($1_1 + 52 | 0) >> 2] = $36_1;
    $37_1 = Math_fround(-$25_1);
    HEAPF32[($1_1 + 48 | 0) >> 2] = $37_1;
    $28_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
    $31_1 = Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]);
    $33_1 = Math_fround(HEAPF32[$7_1 >> 2]);
    HEAP32[($1_1 + 44 | 0) >> 2] = 0;
    $20_1 = Math_fround(Math_fround($31_1 * $25_1) - Math_fround($33_1 * $26_1));
    HEAPF32[($1_1 + 40 | 0) >> 2] = $20_1;
    $25_1 = Math_fround(Math_fround($33_1 * $27_1) - Math_fround($28_1 * $25_1));
    HEAPF32[($1_1 + 36 | 0) >> 2] = $25_1;
    $26_1 = Math_fround(Math_fround($28_1 * $26_1) - Math_fround($31_1 * $27_1));
    HEAPF32[($1_1 + 32 | 0) >> 2] = $26_1;
    $27_1 = Math_fround(HEAPF32[($0_1 + 332 | 0) >> 2]);
    $28_1 = Math_fround(HEAPF32[($0_1 + 328 | 0) >> 2]);
    $33_1 = Math_fround(HEAPF32[($0_1 + 608 | 0) >> 2]);
    $34_1 = Math_fround(HEAPF32[($0_1 + 348 | 0) >> 2]);
    $38_1 = Math_fround(HEAPF32[($0_1 + 340 | 0) >> 2]);
    $39_1 = Math_fround(HEAPF32[($0_1 + 344 | 0) >> 2]);
    $31_1 = Math_fround(HEAPF32[($0_1 + 612 | 0) >> 2]);
    $40_1 = Math_fround(HEAPF32[($0_1 + 364 | 0) >> 2]);
    $41_1 = Math_fround(HEAPF32[($0_1 + 356 | 0) >> 2]);
    $42_1 = Math_fround(HEAPF32[($0_1 + 360 | 0) >> 2]);
    $43_1 = Math_fround(HEAPF32[($0_1 + 604 | 0) >> 2]);
    $44_1 = Math_fround(HEAPF32[($0_1 + 324 | 0) >> 2]);
    HEAP32[($1_1 + 92 | 0) >> 2] = 0;
    $31_1 = Math_fround($31_1 * Math_fround(Math_fround(Math_fround($26_1 * $41_1) + Math_fround($25_1 * $42_1)) + Math_fround($20_1 * $40_1)));
    HEAPF32[($1_1 + 88 | 0) >> 2] = $31_1;
    $33_1 = Math_fround($33_1 * Math_fround(Math_fround(Math_fround($26_1 * $38_1) + Math_fround($25_1 * $39_1)) + Math_fround($20_1 * $34_1)));
    HEAPF32[($1_1 + 84 | 0) >> 2] = $33_1;
    $34_1 = Math_fround($43_1 * Math_fround(Math_fround(Math_fround($26_1 * $44_1) + Math_fround($25_1 * $28_1)) + Math_fround($20_1 * $27_1)));
    HEAPF32[($1_1 + 80 | 0) >> 2] = $34_1;
    break label$3;
   }
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[($1_1 + 80 | 0) >> 2] = 0;
   HEAP32[($1_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[($1_1 + 32 | 0) >> 2] = 0;
   HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 88 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 40 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 48 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 56 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $20_1 = Math_fround(0.0);
   $25_1 = Math_fround(0.0);
   $26_1 = Math_fround(0.0);
   $35_1 = Math_fround(0.0);
   $36_1 = Math_fround(0.0);
   $37_1 = Math_fround(0.0);
   $31_1 = Math_fround(0.0);
   $33_1 = Math_fround(0.0);
   $34_1 = Math_fround(0.0);
  }
  $27_1 = Math_fround(0.0);
  $28_1 = Math_fround(0.0);
  label$5 : {
   if (!$16_1) {
    break label$5
   }
   $28_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
   $38_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
   $39_1 = Math_fround(HEAPF32[$6_1 >> 2]);
   $28_1 = Math_fround(Math_fround(HEAPF32[($16_1 + 404 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($29_1 * $28_1) - Math_fround($30_1 * $38_1)) * Math_fround(HEAPF32[$2_1 >> 2])) + Math_fround(Math_fround(Math_fround($30_1 * $39_1) - Math_fround($28_1 * $32_1)) * Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]))) + Math_fround(Math_fround(Math_fround($38_1 * $32_1) - Math_fround($29_1 * $39_1)) * Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]))));
  }
  label$6 : {
   if (!$0_1) {
    break label$6
   }
   $27_1 = Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]);
   $32_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
   $428_1 = Math_fround(Math_fround(Math_fround($27_1 * $31_1) - Math_fround($32_1 * $33_1)) * Math_fround(HEAPF32[$2_1 >> 2]));
   $431_1 = Math_fround($32_1 * $34_1);
   $32_1 = Math_fround(HEAPF32[$7_1 >> 2]);
   $27_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 404 | 0) >> 2]) + Math_fround(Math_fround($428_1 + Math_fround(Math_fround($431_1 - Math_fround($32_1 * $31_1)) * Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]))) + Math_fround(Math_fround(Math_fround($32_1 * $33_1) - Math_fround($27_1 * $34_1)) * Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]))));
  }
  $27_1 = Math_fround($10_1 / Math_fround($28_1 + $27_1));
  HEAPF32[($1_1 + 108 | 0) >> 2] = $27_1;
  label$7 : {
   label$8 : {
    if ($16_1) {
     break label$8
    }
    $28_1 = Math_fround(0.0);
    $21_1 = Math_fround(Math_fround(Math_fround($22_1 * Math_fround(0.0)) + Math_fround($21_1 * Math_fround(0.0))) + Math_fround($24_1 * Math_fround(0.0)));
    $22_1 = Math_fround(0.0);
    $24_1 = Math_fround(0.0);
    break label$7;
   }
   $16_1 = $15_1 + Math_imul($3_1, 244) | 0;
   $21_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($16_1 + 176 | 0) >> 2]) + Math_fround(HEAPF32[($16_1 + 208 | 0) >> 2])) * $22_1) + Math_fround(Math_fround(Math_fround(HEAPF32[($16_1 + 180 | 0) >> 2]) + Math_fround(HEAPF32[($16_1 + 212 | 0) >> 2])) * $21_1)) + Math_fround(Math_fround(Math_fround(HEAPF32[($16_1 + 184 | 0) >> 2]) + Math_fround(HEAPF32[($16_1 + 216 | 0) >> 2])) * $24_1));
   $28_1 = Math_fround(HEAPF32[($16_1 + 192 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($16_1 + 200 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[($16_1 + 196 | 0) >> 2]);
  }
  $23_1 = Math_fround($21_1 + Math_fround(Math_fround(Math_fround($28_1 * $18_1) + Math_fround($22_1 * $19_1)) + Math_fround($24_1 * $23_1)));
  label$9 : {
   label$10 : {
    if ($0_1) {
     break label$10
    }
    $19_1 = Math_fround(0.0);
    $18_1 = Math_fround(Math_fround(Math_fround($37_1 * Math_fround(0.0)) + Math_fround($36_1 * Math_fround(0.0))) + Math_fround($35_1 * Math_fround(0.0)));
    $21_1 = Math_fround(0.0);
    $22_1 = Math_fround(0.0);
    break label$9;
   }
   $0_1 = $15_1 + Math_imul($4_1, 244) | 0;
   $18_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 176 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 208 | 0) >> 2])) * $37_1) + Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 180 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 212 | 0) >> 2])) * $36_1)) + Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 184 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 216 | 0) >> 2])) * $35_1));
   $22_1 = Math_fround(HEAPF32[($0_1 + 192 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[($0_1 + 200 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($0_1 + 196 | 0) >> 2]);
  }
  $24_1 = (wasm2js_scratch_store_i32(0, $14_1), wasm2js_scratch_load_f32());
  $19_1 = Math_fround($27_1 * Math_fround($12_1 - Math_fround($23_1 + Math_fround($18_1 + Math_fround(Math_fround(Math_fround($22_1 * $26_1) + Math_fround($21_1 * $25_1)) + Math_fround($19_1 * $20_1))))));
  $23_1 = Math_fround(0.0);
  label$11 : {
   if (!((HEAPU8[($5_1 + 120 | 0) >> 0] | 0) & 16 | 0)) {
    break label$11
   }
   $23_1 = Math_fround($27_1 * Math_fround(Math_fround(-Math_fround(Math_fround(HEAPF32[($11_1 + 44 | 0) >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2])) * Math_fround(HEAPF32[$2_1 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 52 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2])) * Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]))) + Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2])) * Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]))))) / Math_fround(HEAPF32[($11_1 + 12 | 0) >> 2])));
  }
  HEAP32[($1_1 + 128 | 0) >> 2] = 0;
  HEAP32[($1_1 + 124 | 0) >> 2] = $14_1;
  HEAPF32[($1_1 + 116 | 0) >> 2] = $13_1;
  HEAPF32[($1_1 + 112 | 0) >> 2] = Math_fround($19_1 + $23_1);
  HEAPF32[($1_1 + 120 | 0) >> 2] = Math_fround(-$24_1);
 }
 
 function $827($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = Math_fround($10_1);
  $11_1 = $11_1 | 0;
  $12_1 = Math_fround($12_1);
  $13_1 = Math_fround($13_1);
  var $15_1 = 0, $18_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0;
  $14_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  $15_1 = $14_1;
  label$1 : {
   if (($15_1 | 0) != (HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $15_1 = $14_1;
   $16_1 = $15_1 ? $15_1 << 1 | 0 : 1;
   if (($15_1 | 0) >= ($16_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($16_1) {
      break label$3
     }
     $17_1 = 0;
     $18_1 = $14_1;
     break label$2;
    }
    $17_1 = $79(Math_imul($16_1, 152) | 0, 16 | 0) | 0;
    $18_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   }
   label$4 : {
    if (($18_1 | 0) < (1 | 0)) {
     break label$4
    }
    $15_1 = 0;
    label$5 : while (1) {
     $7($17_1 + $15_1 | 0 | 0, (HEAP32[($0_1 + 76 | 0) >> 2] | 0) + $15_1 | 0 | 0, 152 | 0) | 0;
     $15_1 = $15_1 + 152 | 0;
     $18_1 = $18_1 + -1 | 0;
     if ($18_1) {
      continue label$5
     }
     break label$5;
    };
   }
   label$6 : {
    $15_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    if (!$15_1) {
     break label$6
    }
    label$7 : {
     if (!(HEAPU8[($0_1 + 80 | 0) >> 0] | 0)) {
      break label$7
     }
     $80($15_1 | 0);
    }
    HEAP32[($0_1 + 76 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 76 | 0) >> 2] = $17_1;
   HEAP32[($0_1 + 72 | 0) >> 2] = $16_1;
   HEAP8[($0_1 + 80 | 0) >> 0] = 1;
   $15_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  }
  HEAP32[($0_1 + 68 | 0) >> 2] = $15_1 + 1 | 0;
  $15_1 = (HEAP32[($0_1 + 76 | 0) >> 2] | 0) + Math_imul($14_1, 152) | 0;
  HEAP32[($15_1 + 140 | 0) >> 2] = $4_1;
  $826($0_1 | 0, $15_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $5_1 | 0, $6_1 | 0, $7_1 | 0, $15_1 | 0, $15_1 | 0, Math_fround($10_1), $11_1 | 0, Math_fround($12_1), Math_fround($13_1));
  return $15_1 | 0;
 }
 
 function $828($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = Math_fround($11_1);
  $12_1 = Math_fround($12_1);
  $13_1 = Math_fround($13_1);
  var $15_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $26_1 = Math_fround(0), $23_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $14_1 = 0, $16_1 = 0, $24_1 = 0, $25_1 = 0, $31_1 = Math_fround(0), $32_1 = Math_fround(0);
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = -2147483648;
  HEAP32[($1_1 + 48 | 0) >> 2] = -2147483648;
  HEAP32[($1_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[($1_1 + 16 | 0) >> 2] = 0;
  HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = -2147483648;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[($1_1 + 104 | 0) >> 2] = $6_1;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[($1_1 + 96 | 0) >> 2] = 0;
  HEAP32[($1_1 + 100 | 0) >> 2] = i64toi32_i32$0;
  $14_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $0_1 = HEAP32[(($14_1 + Math_imul($3_1, 244) | 0) + 240 | 0) >> 2] | 0;
  $15_1 = HEAP32[(($14_1 + Math_imul($4_1, 244) | 0) + 240 | 0) >> 2] | 0;
  $16_1 = 0;
  HEAP32[($1_1 + 132 | 0) >> 2] = 0;
  HEAP32[($1_1 + 148 | 0) >> 2] = $4_1;
  HEAP32[($1_1 + 144 | 0) >> 2] = $3_1;
  $17_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $18_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  HEAP32[($1_1 + 12 | 0) >> 2] = 0;
  $20_1 = Math_fround(-$19_1);
  HEAPF32[($1_1 + 8 | 0) >> 2] = $20_1;
  $21_1 = Math_fround(-$18_1);
  HEAPF32[($1_1 + 4 | 0) >> 2] = $21_1;
  $22_1 = Math_fround(-$17_1);
  HEAPF32[$1_1 >> 2] = $22_1;
  $23_1 = 0;
  $24_1 = 0;
  $25_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $25_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 356 | 0) >> 2]) * $22_1) + Math_fround(Math_fround(HEAPF32[($0_1 + 360 | 0) >> 2]) * $21_1)) + Math_fround(Math_fround(HEAPF32[($0_1 + 364 | 0) >> 2]) * $20_1)) * Math_fround(HEAPF32[($0_1 + 612 | 0) >> 2]))), wasm2js_scratch_load_i32(0));
   $24_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 340 | 0) >> 2]) * $22_1) + Math_fround(Math_fround(HEAPF32[($0_1 + 344 | 0) >> 2]) * $21_1)) + Math_fround(Math_fround(HEAPF32[($0_1 + 348 | 0) >> 2]) * $20_1)) * Math_fround(HEAPF32[($0_1 + 608 | 0) >> 2]))), wasm2js_scratch_load_i32(0));
   $23_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 324 | 0) >> 2]) * $22_1) + Math_fround(Math_fround(HEAPF32[($0_1 + 328 | 0) >> 2]) * $21_1)) + Math_fround(Math_fround(HEAPF32[($0_1 + 332 | 0) >> 2]) * $20_1)) * Math_fround(HEAPF32[($0_1 + 604 | 0) >> 2]))), wasm2js_scratch_load_i32(0));
  }
  HEAP32[($1_1 + 64 | 0) >> 2] = $23_1;
  HEAP32[($1_1 + 76 | 0) >> 2] = 0;
  HEAP32[($1_1 + 72 | 0) >> 2] = $25_1;
  HEAP32[($1_1 + 68 | 0) >> 2] = $24_1;
  $17_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $18_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  HEAP32[($1_1 + 44 | 0) >> 2] = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  HEAPF32[($1_1 + 40 | 0) >> 2] = $19_1;
  HEAPF32[($1_1 + 36 | 0) >> 2] = $18_1;
  HEAPF32[($1_1 + 32 | 0) >> 2] = $17_1;
  $2_1 = 0;
  $23_1 = 0;
  label$2 : {
   if (!$15_1) {
    break label$2
   }
   $23_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround($17_1 * Math_fround(HEAPF32[($15_1 + 356 | 0) >> 2])) + Math_fround($18_1 * Math_fround(HEAPF32[($15_1 + 360 | 0) >> 2]))) + Math_fround($19_1 * Math_fround(HEAPF32[($15_1 + 364 | 0) >> 2]))) * Math_fround(HEAPF32[($15_1 + 612 | 0) >> 2]))), wasm2js_scratch_load_i32(0));
   $2_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround($17_1 * Math_fround(HEAPF32[($15_1 + 340 | 0) >> 2])) + Math_fround($18_1 * Math_fround(HEAPF32[($15_1 + 344 | 0) >> 2]))) + Math_fround($19_1 * Math_fround(HEAPF32[($15_1 + 348 | 0) >> 2]))) * Math_fround(HEAPF32[($15_1 + 608 | 0) >> 2]))), wasm2js_scratch_load_i32(0));
   $16_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround($17_1 * Math_fround(HEAPF32[($15_1 + 324 | 0) >> 2])) + Math_fround($18_1 * Math_fround(HEAPF32[($15_1 + 328 | 0) >> 2]))) + Math_fround($19_1 * Math_fround(HEAPF32[($15_1 + 332 | 0) >> 2]))) * Math_fround(HEAPF32[($15_1 + 604 | 0) >> 2]))), wasm2js_scratch_load_i32(0));
  }
  HEAP32[($1_1 + 80 | 0) >> 2] = $16_1;
  HEAP32[($1_1 + 92 | 0) >> 2] = 0;
  HEAP32[($1_1 + 88 | 0) >> 2] = $23_1;
  HEAP32[($1_1 + 84 | 0) >> 2] = $2_1;
  $26_1 = Math_fround(0.0);
  $27_1 = Math_fround(0.0);
  $28_1 = Math_fround(0.0);
  $29_1 = Math_fround(0.0);
  label$3 : {
   if (!$0_1) {
    break label$3
   }
   $29_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 356 | 0) >> 2]) * $22_1) + Math_fround(Math_fround(HEAPF32[($0_1 + 360 | 0) >> 2]) * $21_1)) + Math_fround(Math_fround(HEAPF32[($0_1 + 364 | 0) >> 2]) * $20_1));
   $28_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 340 | 0) >> 2]) * $22_1) + Math_fround(Math_fround(HEAPF32[($0_1 + 344 | 0) >> 2]) * $21_1)) + Math_fround(Math_fround(HEAPF32[($0_1 + 348 | 0) >> 2]) * $20_1));
   $27_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 324 | 0) >> 2]) * $22_1) + Math_fround(Math_fround(HEAPF32[($0_1 + 328 | 0) >> 2]) * $21_1)) + Math_fround(Math_fround(HEAPF32[($0_1 + 332 | 0) >> 2]) * $20_1));
  }
  $30_1 = Math_fround(0.0);
  $31_1 = Math_fround(0.0);
  label$4 : {
   if (!$15_1) {
    break label$4
   }
   $31_1 = Math_fround(Math_fround(Math_fround($17_1 * Math_fround(HEAPF32[($15_1 + 356 | 0) >> 2])) + Math_fround($18_1 * Math_fround(HEAPF32[($15_1 + 360 | 0) >> 2]))) + Math_fround($19_1 * Math_fround(HEAPF32[($15_1 + 364 | 0) >> 2])));
   $30_1 = Math_fround(Math_fround(Math_fround($17_1 * Math_fround(HEAPF32[($15_1 + 340 | 0) >> 2])) + Math_fround($18_1 * Math_fround(HEAPF32[($15_1 + 344 | 0) >> 2]))) + Math_fround($19_1 * Math_fround(HEAPF32[($15_1 + 348 | 0) >> 2])));
   $26_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($15_1 + 324 | 0) >> 2]) * $17_1) + Math_fround(Math_fround(HEAPF32[($15_1 + 328 | 0) >> 2]) * $18_1)) + Math_fround(Math_fround(HEAPF32[($15_1 + 332 | 0) >> 2]) * $19_1));
  }
  $32_1 = Math_fround(0.0);
  $30_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($27_1 * $22_1) + Math_fround($28_1 * $21_1)) + Math_fround($29_1 * $20_1)) + Math_fround(0.0)) + Math_fround(Math_fround(Math_fround($26_1 * $17_1) + Math_fround($30_1 * $18_1)) + Math_fround($31_1 * $19_1))));
  HEAPF32[($1_1 + 108 | 0) >> 2] = $30_1;
  $26_1 = Math_fround(0.0);
  $27_1 = Math_fround(0.0);
  $28_1 = Math_fround(0.0);
  $29_1 = Math_fround(0.0);
  label$5 : {
   if (!$0_1) {
    break label$5
   }
   $0_1 = $14_1 + Math_imul($3_1, 244) | 0;
   $26_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 176 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 208 | 0) >> 2])) * Math_fround(0.0)) + Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 180 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 212 | 0) >> 2])) * Math_fround(0.0))) + Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 184 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 216 | 0) >> 2])) * Math_fround(0.0)));
   $29_1 = Math_fround(HEAPF32[($0_1 + 192 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[($0_1 + 200 | 0) >> 2]);
   $28_1 = Math_fround(HEAPF32[($0_1 + 196 | 0) >> 2]);
  }
  $20_1 = Math_fround($26_1 + Math_fround(Math_fround($27_1 * $20_1) + Math_fround(Math_fround($28_1 * $21_1) + Math_fround($29_1 * $22_1))));
  label$6 : {
   label$7 : {
    if ($15_1) {
     break label$7
    }
    $21_1 = Math_fround(-0.0);
    $22_1 = Math_fround(0.0);
    $26_1 = Math_fround(0.0);
    break label$6;
   }
   $0_1 = $14_1 + Math_imul($4_1, 244) | 0;
   $21_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 176 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 208 | 0) >> 2])) * Math_fround(-0.0)) + Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 180 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 212 | 0) >> 2])) * Math_fround(-0.0))) + Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 184 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 216 | 0) >> 2])) * Math_fround(-0.0)));
   $26_1 = Math_fround(HEAPF32[($0_1 + 192 | 0) >> 2]);
   $32_1 = Math_fround(HEAPF32[($0_1 + 200 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[($0_1 + 196 | 0) >> 2]);
  }
  HEAPF32[($1_1 + 124 | 0) >> 2] = $6_1;
  HEAPF32[($1_1 + 116 | 0) >> 2] = $13_1;
  HEAPF32[($1_1 + 120 | 0) >> 2] = Math_fround(-$6_1);
  HEAPF32[($1_1 + 112 | 0) >> 2] = Math_fround($30_1 * Math_fround($12_1 - Math_fround($20_1 + Math_fround($21_1 + Math_fround(Math_fround($19_1 * $32_1) + Math_fround(Math_fround($18_1 * $22_1) + Math_fround($17_1 * $26_1)))))));
 }
 
 function $829($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = Math_fround($11_1);
  $12_1 = Math_fround($12_1);
  $13_1 = Math_fround($13_1);
  var $15_1 = 0, $18_1 = 0, $14_1 = 0, $16_1 = 0, $17_1 = 0;
  $14_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
  $15_1 = $14_1;
  label$1 : {
   if (($15_1 | 0) != (HEAP32[($0_1 + 92 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $15_1 = $14_1;
   $16_1 = $15_1 ? $15_1 << 1 | 0 : 1;
   if (($15_1 | 0) >= ($16_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($16_1) {
      break label$3
     }
     $17_1 = 0;
     $18_1 = $14_1;
     break label$2;
    }
    $17_1 = $79(Math_imul($16_1, 152) | 0, 16 | 0) | 0;
    $18_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
   }
   label$4 : {
    if (($18_1 | 0) < (1 | 0)) {
     break label$4
    }
    $15_1 = 0;
    label$5 : while (1) {
     $7($17_1 + $15_1 | 0 | 0, (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + $15_1 | 0 | 0, 152 | 0) | 0;
     $15_1 = $15_1 + 152 | 0;
     $18_1 = $18_1 + -1 | 0;
     if ($18_1) {
      continue label$5
     }
     break label$5;
    };
   }
   label$6 : {
    $15_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
    if (!$15_1) {
     break label$6
    }
    label$7 : {
     if (!(HEAPU8[($0_1 + 100 | 0) >> 0] | 0)) {
      break label$7
     }
     $80($15_1 | 0);
    }
    HEAP32[($0_1 + 96 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 96 | 0) >> 2] = $17_1;
   HEAP32[($0_1 + 92 | 0) >> 2] = $16_1;
   HEAP8[($0_1 + 100 | 0) >> 0] = 1;
   $15_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
  }
  HEAP32[($0_1 + 88 | 0) >> 2] = $15_1 + 1 | 0;
  $15_1 = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + Math_imul($14_1, 152) | 0;
  HEAP32[($15_1 + 140 | 0) >> 2] = $4_1;
  $828($0_1 | 0, $15_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $15_1 | 0, Math_fround($6_1), $15_1 | 0, $15_1 | 0, $15_1 | 0, $15_1 | 0, Math_fround($6_1), Math_fround($12_1), Math_fround($13_1));
  return $15_1 | 0;
 }
 
 function $830($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 256 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = HEAP32[($1_1 + 212 | 0) >> 2] | 0;
   if (($4_1 | 0) > (-1 | 0)) {
    break label$1
   }
   label$2 : {
    $4_1 = HEAP32[($1_1 + 252 | 0) >> 2] | 0;
    if (!($4_1 & 2 | 0)) {
     break label$2
    }
    label$3 : {
     $4_1 = (($4_1 << 30 | 0) >> 31 | 0) & $1_1 | 0;
     if (Math_fround(HEAPF32[($4_1 + 404 | 0) >> 2]) != Math_fround(0.0)) {
      break label$3
     }
     if (!((HEAPU8[($4_1 + 204 | 0) >> 0] | 0) & 2 | 0)) {
      break label$2
     }
    }
    $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    $17($3_1 + 8 | 0 | 0, 0 | 0, 244 | 0) | 0;
    $825($1_1 | 0, $831($0_1 + 4 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0, $1_1 | 0, Math_fround($2_1));
    HEAP32[($1_1 + 212 | 0) >> 2] = $4_1;
    break label$1;
   }
   $4_1 = HEAP32[($0_1 + 188 | 0) >> 2] | 0;
   if (($4_1 | 0) > (-1 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 188 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $17($3_1 + 8 | 0 | 0, 0 | 0, 244 | 0) | 0;
   $1_1 = $831($0_1 + 4 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
   i64toi32_i32$1 = $1_1 + 88 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 80 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 72 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$1 + 152 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 160 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 168 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
   i64toi32_i32$1 = i64toi32_i32$1 + 12 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 1065353216;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$1 + 44 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 40 | 0) >> 2] = 1065353216;
   i64toi32_i32$1 = $1_1 + 52 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($1_1 + 60 | 0) >> 2] = 0;
   i64toi32_i32$1 = $1_1 + 136 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 128 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$1 + 120 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 1065353216;
   HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = 1065353216;
   HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$1 + 104 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 1065353216;
   HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] = 1065353216;
   HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$1 + 232 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 224 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 216 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 208 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 200 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 192 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 184 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 176 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 180 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 240 | 0) >> 2] = 0;
   $4_1 = HEAP32[($0_1 + 188 | 0) >> 2] | 0;
  }
  global$0 = $3_1 + 256 | 0;
  return $4_1 | 0;
 }
 
 function $831($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0, $6_1 = 0, $2_1 = 0, $4_1 = 0, $7_1 = 0, $5_1 = 0, $48_1 = 0, $53_1 = 0, $62_1 = 0, $65_1 = 0, $74_1 = 0, $77_1 = 0, $84_1 = 0, $89_1 = 0, $127_1 = 0, $130_1 = 0, $135_1 = 0, $138_1 = 0, $141_1 = 0, $146_1 = 0, $149_1 = 0, $154_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = $2_1;
  label$1 : {
   if (($3_1 | 0) != (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $3_1 = $2_1;
   $4_1 = $3_1 ? $3_1 << 1 | 0 : 1;
   if (($3_1 | 0) >= ($4_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1) {
      break label$3
     }
     $5_1 = 0;
     $6_1 = $2_1;
     break label$2;
    }
    $5_1 = $79(Math_imul($4_1, 244) | 0, 16 | 0) | 0;
    $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   }
   label$4 : {
    if (($6_1 | 0) < (1 | 0)) {
     break label$4
    }
    $7_1 = 64;
    label$5 : while (1) {
     $3_1 = $5_1 + $7_1 | 0;
     $8_1 = $3_1 + -64 | 0;
     $9_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $7_1 | 0;
     $10_1 = $9_1 + -64 | 0;
     i64toi32_i32$2 = $10_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $48_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $8_1;
     HEAP32[i64toi32_i32$0 >> 2] = $48_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $53_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $8_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $53_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $8_1 = $3_1 + -48 | 0;
     $10_1 = $9_1 + -48 | 0;
     i64toi32_i32$2 = $10_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $62_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $8_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $62_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $10_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $65_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $8_1;
     HEAP32[i64toi32_i32$1 >> 2] = $65_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $8_1 = $3_1 + -32 | 0;
     $10_1 = $9_1 + -32 | 0;
     i64toi32_i32$2 = $10_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $74_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $8_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $74_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $10_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $77_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $8_1;
     HEAP32[i64toi32_i32$1 >> 2] = $77_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $8_1 = $3_1 + -16 | 0;
     $10_1 = $9_1 + -16 | 0;
     i64toi32_i32$2 = $10_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $84_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $8_1;
     HEAP32[i64toi32_i32$0 >> 2] = $84_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $89_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $8_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $89_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $7($3_1 | 0, $9_1 | 0, 180 | 0) | 0;
     $7_1 = $7_1 + 244 | 0;
     $6_1 = $6_1 + -1 | 0;
     if ($6_1) {
      continue label$5
     }
     break label$5;
    };
   }
   label$6 : {
    $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    if (!$3_1) {
     break label$6
    }
    label$7 : {
     if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
      break label$7
     }
     $80($3_1 | 0);
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
   HEAP8[($0_1 + 16 | 0) >> 0] = 1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + 1 | 0;
  $9_1 = Math_imul($2_1, 244);
  $3_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $9_1 | 0;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $127_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $127_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $130_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[i64toi32_i32$1 >> 2] = $130_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $135_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $135_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $138_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $138_1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $141_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = $141_1;
  HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $146_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $146_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $149_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $149_1;
  HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $154_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1 + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $154_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7($3_1 + 64 | 0 | 0, $1_1 + 64 | 0 | 0, 180 | 0) | 0;
  return (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $9_1 | 0 | 0;
 }
 
 function $832($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $17_1 = Math_fround(0), $19_1 = Math_fround(0), $12_1 = 0, $18_1 = Math_fround(0), i64toi32_i32$1 = 0, $22_1 = Math_fround(0), $25_1 = Math_fround(0), i64toi32_i32$0 = 0, $21_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $28_1 = Math_fround(0), $20_1 = Math_fround(0), $27_1 = Math_fround(0), $29_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $9_1 = 0, $26_1 = Math_fround(0), $30_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), i64toi32_i32$2 = 0, $10_1 = 0, $11_1 = 0, $31_1 = Math_fround(0), $32_1 = Math_fround(0), $80_1 = Math_fround(0), $110_1 = Math_fround(0), $371_1 = Math_fround(0), $374_1 = Math_fround(0), $414_1 = 0, $419_1 = 0, $508_1 = Math_fround(0), $556_1 = Math_fround(0), $980_1 = Math_fround(0), wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  $9_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $10_1 = $9_1 + Math_imul($3_1, 244) | 0;
  $0_1 = HEAP32[($10_1 + 240 | 0) >> 2] | 0;
  $11_1 = $9_1 + Math_imul($2_1, 244) | 0;
  $12_1 = HEAP32[($11_1 + 240 | 0) >> 2] | 0;
  $13_1 = Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
  label$1 : {
   label$2 : {
    $16_1 = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
    if (!($16_1 & 6 | 0)) {
     break label$2
    }
    $15_1 = (wasm2js_f32$0 = Math_fround(HEAPF32[($4_1 + 144 | 0) >> 2]), wasm2js_f32$1 = $15_1, wasm2js_i32$0 = $16_1 & 2 | 0, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
    if (!($16_1 & 4 | 0)) {
     break label$1
    }
    $14_1 = Math_fround(HEAPF32[($4_1 + 148 | 0) >> 2]);
    break label$1;
   }
   if (!($16_1 & 8 | 0)) {
    break label$1
   }
   $17_1 = Math_fround($13_1 * Math_fround(HEAPF32[($4_1 + 144 | 0) >> 2]));
   $80_1 = $17_1;
   $17_1 = Math_fround(Math_max(Math_fround($17_1 + Math_fround(HEAPF32[($4_1 + 148 | 0) >> 2])), Math_fround(1.1920928955078125e-07)));
   $14_1 = Math_fround($80_1 / $17_1);
   $15_1 = Math_fround(Math_fround(1.0) / $17_1);
  }
  $17_1 = Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[$7_1 >> 2]);
  $19_1 = Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]);
  $21_1 = Math_fround(Math_fround($17_1 * $18_1) - Math_fround($19_1 * $20_1));
  $22_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
  $110_1 = Math_fround($22_1 * $20_1);
  $20_1 = Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]);
  $23_1 = Math_fround($110_1 - Math_fround($20_1 * $18_1));
  $24_1 = Math_fround(Math_fround($19_1 * $20_1) - Math_fround($22_1 * $17_1));
  $17_1 = Math_fround(0.0);
  $18_1 = Math_fround(0.0);
  $19_1 = Math_fround(0.0);
  $20_1 = Math_fround(0.0);
  label$3 : {
   if (!$12_1) {
    break label$3
   }
   $20_1 = Math_fround(Math_fround(Math_fround(Math_fround($24_1 * Math_fround(HEAPF32[($12_1 + 356 | 0) >> 2])) + Math_fround($23_1 * Math_fround(HEAPF32[($12_1 + 360 | 0) >> 2]))) + Math_fround($21_1 * Math_fround(HEAPF32[($12_1 + 364 | 0) >> 2]))) * Math_fround(HEAPF32[($12_1 + 612 | 0) >> 2]));
   $19_1 = Math_fround(Math_fround(Math_fround(Math_fround($24_1 * Math_fround(HEAPF32[($12_1 + 340 | 0) >> 2])) + Math_fround($23_1 * Math_fround(HEAPF32[($12_1 + 344 | 0) >> 2]))) + Math_fround($21_1 * Math_fround(HEAPF32[($12_1 + 348 | 0) >> 2]))) * Math_fround(HEAPF32[($12_1 + 608 | 0) >> 2]));
   $18_1 = Math_fround(Math_fround(Math_fround(Math_fround($24_1 * Math_fround(HEAPF32[($12_1 + 324 | 0) >> 2])) + Math_fround($23_1 * Math_fround(HEAPF32[($12_1 + 328 | 0) >> 2]))) + Math_fround($21_1 * Math_fround(HEAPF32[($12_1 + 332 | 0) >> 2]))) * Math_fround(HEAPF32[($12_1 + 604 | 0) >> 2]));
  }
  HEAPF32[($1_1 + 64 | 0) >> 2] = $18_1;
  HEAP32[($1_1 + 76 | 0) >> 2] = 0;
  HEAPF32[($1_1 + 72 | 0) >> 2] = $20_1;
  HEAPF32[($1_1 + 68 | 0) >> 2] = $19_1;
  $22_1 = Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]);
  $25_1 = Math_fround(HEAPF32[$8_1 >> 2]);
  $26_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
  $27_1 = Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]);
  $28_1 = Math_fround(Math_fround($22_1 * $25_1) - Math_fround($26_1 * $27_1));
  $29_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
  $30_1 = Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]);
  $27_1 = Math_fround(Math_fround($29_1 * $27_1) - Math_fround($30_1 * $25_1));
  $30_1 = Math_fround(Math_fround($26_1 * $30_1) - Math_fround($29_1 * $22_1));
  $22_1 = Math_fround(0.0);
  $25_1 = Math_fround(0.0);
  label$4 : {
   if (!$0_1) {
    break label$4
   }
   $17_1 = Math_fround(-$30_1);
   $25_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 356 | 0) >> 2]) * $17_1) - Math_fround(Math_fround(HEAPF32[($0_1 + 360 | 0) >> 2]) * $27_1)) - Math_fround(Math_fround(HEAPF32[($0_1 + 364 | 0) >> 2]) * $28_1)) * Math_fround(HEAPF32[($0_1 + 612 | 0) >> 2]));
   $22_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 340 | 0) >> 2]) * $17_1) - Math_fround(Math_fround(HEAPF32[($0_1 + 344 | 0) >> 2]) * $27_1)) - Math_fround(Math_fround(HEAPF32[($0_1 + 348 | 0) >> 2]) * $28_1)) * Math_fround(HEAPF32[($0_1 + 608 | 0) >> 2]));
   $17_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 324 | 0) >> 2]) * $17_1) - Math_fround(Math_fround(HEAPF32[($0_1 + 328 | 0) >> 2]) * $27_1)) - Math_fround(Math_fround(HEAPF32[($0_1 + 332 | 0) >> 2]) * $28_1)) * Math_fround(HEAPF32[($0_1 + 604 | 0) >> 2]));
  }
  $13_1 = Math_fround(Math_fround(1.0) / $13_1);
  HEAPF32[($1_1 + 80 | 0) >> 2] = $17_1;
  HEAP32[($1_1 + 92 | 0) >> 2] = 0;
  HEAPF32[($1_1 + 88 | 0) >> 2] = $25_1;
  HEAPF32[($1_1 + 84 | 0) >> 2] = $22_1;
  $26_1 = Math_fround(0.0);
  $29_1 = Math_fround(0.0);
  label$5 : {
   if (!$12_1) {
    break label$5
   }
   $29_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
   $31_1 = Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]);
   $32_1 = Math_fround(HEAPF32[$7_1 >> 2]);
   $29_1 = Math_fround(Math_fround(HEAPF32[($12_1 + 404 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($19_1 * $29_1) - Math_fround($20_1 * $31_1)) * Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2])) + Math_fround(Math_fround(Math_fround($20_1 * $32_1) - Math_fround($29_1 * $18_1)) * Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]))) + Math_fround(Math_fround(Math_fround($31_1 * $18_1) - Math_fround($19_1 * $32_1)) * Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]))));
  }
  $20_1 = Math_fround($13_1 * $15_1);
  label$6 : {
   if (!$0_1) {
    break label$6
   }
   $18_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
   $371_1 = Math_fround(Math_fround(Math_fround($18_1 * $25_1) - Math_fround($19_1 * $22_1)) * Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]));
   $374_1 = Math_fround($19_1 * $17_1);
   $19_1 = Math_fround(HEAPF32[$8_1 >> 2]);
   $26_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 404 | 0) >> 2]) + Math_fround(Math_fround($371_1 + Math_fround(Math_fround($374_1 - Math_fround($19_1 * $25_1)) * Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]))) + Math_fround(Math_fround(Math_fround($19_1 * $22_1) - Math_fround($18_1 * $17_1)) * Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]))));
  }
  HEAPF32[($1_1 + 108 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$6_1 >> 2]) / Math_fround($20_1 + Math_fround($29_1 + $26_1)));
  $6_1 = $1_1 + 16 | 0;
  label$7 : {
   label$8 : {
    if (!$12_1) {
     break label$8
    }
    $16_1 = $4_1 + 64 | 0;
    i64toi32_i32$2 = $16_1;
    i64toi32_i32$0 = HEAP32[$16_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($16_1 + 4 | 0) >> 2] | 0;
    $414_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1;
    HEAP32[i64toi32_i32$0 >> 2] = $414_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $16_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $419_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $6_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $419_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    HEAPF32[($1_1 + 8 | 0) >> 2] = $21_1;
    HEAPF32[($1_1 + 4 | 0) >> 2] = $23_1;
    HEAPF32[$1_1 >> 2] = $24_1;
    break label$7;
   }
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  label$9 : {
   label$10 : {
    if (!$0_1) {
     break label$10
    }
    $17_1 = Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]);
    $18_1 = Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]);
    $19_1 = Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]);
    HEAP32[($1_1 + 60 | 0) >> 2] = 0;
    HEAP32[($1_1 + 44 | 0) >> 2] = 0;
    HEAPF32[($1_1 + 40 | 0) >> 2] = Math_fround(-$28_1);
    HEAPF32[($1_1 + 36 | 0) >> 2] = Math_fround(-$27_1);
    HEAPF32[($1_1 + 32 | 0) >> 2] = Math_fround(-$30_1);
    HEAPF32[($1_1 + 56 | 0) >> 2] = Math_fround(-$19_1);
    HEAPF32[($1_1 + 52 | 0) >> 2] = Math_fround(-$18_1);
    HEAPF32[($1_1 + 48 | 0) >> 2] = Math_fround(-$17_1);
    break label$9;
   }
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 0;
   HEAP32[($1_1 + 32 | 0) >> 2] = 0;
   HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 56 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 48 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $1_1 + 40 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  $27_1 = Math_fround(HEAPF32[($5_1 + 64 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2]);
  $17_1 = Math_fround(0.0);
  $18_1 = Math_fround(0.0);
  $19_1 = Math_fround(0.0);
  $22_1 = Math_fround(0.0);
  label$11 : {
   if (!$12_1) {
    break label$11
   }
   $18_1 = Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[($12_1 + 388 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[($12_1 + 392 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[$7_1 >> 2]);
   $22_1 = Math_fround(Math_fround(Math_fround($18_1 * $19_1) - Math_fround($25_1 * $21_1)) + Math_fround(HEAPF32[($12_1 + 380 | 0) >> 2]));
   $23_1 = Math_fround(HEAPF32[($12_1 + 396 | 0) >> 2]);
   $508_1 = Math_fround($23_1 * $21_1);
   $21_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
   $19_1 = Math_fround(Math_fround(HEAPF32[($12_1 + 376 | 0) >> 2]) + Math_fround($508_1 - Math_fround($21_1 * $19_1)));
   $18_1 = Math_fround(Math_fround(Math_fround($25_1 * $21_1) - Math_fround($23_1 * $18_1)) + Math_fround(HEAPF32[($12_1 + 372 | 0) >> 2]));
  }
  $25_1 = Math_fround(0.0);
  $21_1 = Math_fround(0.0);
  label$12 : {
   if (!$0_1) {
    break label$12
   }
   $17_1 = Math_fround(HEAPF32[($8_1 + 4 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[($0_1 + 388 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($0_1 + 392 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[$8_1 >> 2]);
   $21_1 = Math_fround(Math_fround(Math_fround($17_1 * $25_1) - Math_fround($23_1 * $24_1)) + Math_fround(HEAPF32[($0_1 + 380 | 0) >> 2]));
   $28_1 = Math_fround(HEAPF32[($0_1 + 396 | 0) >> 2]);
   $556_1 = Math_fround($28_1 * $24_1);
   $24_1 = Math_fround(HEAPF32[($8_1 + 8 | 0) >> 2]);
   $25_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 376 | 0) >> 2]) + Math_fround($556_1 - Math_fround($24_1 * $25_1)));
   $17_1 = Math_fround(Math_fround(Math_fround($23_1 * $24_1) - Math_fround($28_1 * $17_1)) + Math_fround(HEAPF32[($0_1 + 372 | 0) >> 2]));
  }
  $7_1 = $10_1 + 240 | 0;
  $8_1 = $11_1 + 240 | 0;
  $23_1 = Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]);
  $28_1 = Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]);
  HEAP32[($1_1 + 104 | 0) >> 2] = HEAP32[($4_1 + 84 | 0) >> 2] | 0;
  $17_1 = Math_fround(Math_fround(Math_fround($24_1 * Math_fround($18_1 - $17_1)) + Math_fround($28_1 * Math_fround($19_1 - $25_1))) + Math_fround($23_1 * Math_fround($22_1 - $21_1)));
  $18_1 = (wasm2js_f32$0 = Math_fround(0.0), wasm2js_f32$1 = Math_fround(-Math_fround($17_1 * Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2]))), wasm2js_i32$0 = Math_fround(Math_abs($17_1)) < Math_fround(HEAPF32[($5_1 + 96 | 0) >> 2]), wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
  label$13 : {
   label$14 : {
    if (!((HEAPU8[($5_1 + 72 | 0) >> 0] | 0) & 4 | 0)) {
     break label$14
    }
    $17_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 124 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 68 | 0) >> 2]));
    HEAPF32[($1_1 + 100 | 0) >> 2] = $17_1;
    label$15 : {
     if (!$12_1) {
      break label$15
     }
     if (!(HEAP32[$8_1 >> 2] | 0)) {
      break label$15
     }
     $19_1 = Math_fround(HEAPF32[($12_1 + 416 | 0) >> 2]);
     $22_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
     $25_1 = Math_fround(HEAPF32[($12_1 + 412 | 0) >> 2]);
     $21_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
     $4_1 = $9_1 + Math_imul($2_1, 244) | 0;
     HEAPF32[($4_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 112 | 0) >> 2]) * Math_fround($17_1 * Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2])) * Math_fround(HEAPF32[($12_1 + 408 | 0) >> 2])))) + Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]));
     $12_1 = $4_1 + 68 | 0;
     HEAPF32[$12_1 >> 2] = Math_fround(Math_fround(Math_fround($17_1 * Math_fround($25_1 * Math_fround($21_1 * Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2])))) * Math_fround(HEAPF32[($4_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[$12_1 >> 2]));
     $12_1 = $4_1 + 72 | 0;
     HEAPF32[$12_1 >> 2] = Math_fround(Math_fround(Math_fround($17_1 * Math_fround($19_1 * Math_fround($22_1 * Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])))) * Math_fround(HEAPF32[($4_1 + 120 | 0) >> 2])) + Math_fround(HEAPF32[$12_1 >> 2]));
     $19_1 = Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2]);
     $22_1 = Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]);
     HEAPF32[($4_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2])) + Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2]));
     $25_1 = Math_fround(HEAPF32[($4_1 + 104 | 0) >> 2]);
     $12_1 = $4_1 + 84 | 0;
     HEAPF32[$12_1 >> 2] = Math_fround(Math_fround($22_1 * Math_fround($17_1 * Math_fround(HEAPF32[($4_1 + 100 | 0) >> 2]))) + Math_fround(HEAPF32[$12_1 >> 2]));
     $4_1 = $4_1 + 88 | 0;
     HEAPF32[$4_1 >> 2] = Math_fround(Math_fround($19_1 * Math_fround($17_1 * $25_1)) + Math_fround(HEAPF32[$4_1 >> 2]));
    }
    if (!$0_1) {
     break label$13
    }
    if (!(HEAP32[$7_1 >> 2] | 0)) {
     break label$13
    }
    $19_1 = Math_fround(HEAPF32[($0_1 + 416 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
    $25_1 = Math_fround(HEAPF32[($0_1 + 412 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
    $23_1 = Math_fround(HEAPF32[($1_1 + 88 | 0) >> 2]);
    $24_1 = Math_fround(HEAPF32[($1_1 + 84 | 0) >> 2]);
    $28_1 = Math_fround(HEAPF32[($1_1 + 80 | 0) >> 2]);
    $4_1 = $9_1 + Math_imul($3_1, 244) | 0;
    $17_1 = Math_fround(HEAPF32[($1_1 + 100 | 0) >> 2]);
    HEAPF32[($4_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 112 | 0) >> 2]) * Math_fround($17_1 * Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2])) * Math_fround(HEAPF32[($0_1 + 408 | 0) >> 2])))) + Math_fround(HEAPF32[($4_1 + 64 | 0) >> 2]));
    $0_1 = $4_1 + 68 | 0;
    HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(Math_fround($17_1 * Math_fround($25_1 * Math_fround($21_1 * Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2])))) * Math_fround(HEAPF32[($4_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[$0_1 >> 2]));
    $0_1 = $4_1 + 72 | 0;
    HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(Math_fround($17_1 * Math_fround($19_1 * Math_fround($22_1 * Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2])))) * Math_fround(HEAPF32[($4_1 + 120 | 0) >> 2])) + Math_fround(HEAPF32[$0_1 >> 2]));
    $17_1 = Math_fround(-$17_1);
    HEAPF32[($4_1 + 80 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2]) - Math_fround($28_1 * Math_fround(Math_fround(HEAPF32[($4_1 + 96 | 0) >> 2]) * $17_1)));
    $19_1 = Math_fround(HEAPF32[($4_1 + 104 | 0) >> 2]);
    $0_1 = $4_1 + 84 | 0;
    HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) - Math_fround($24_1 * Math_fround(Math_fround(HEAPF32[($4_1 + 100 | 0) >> 2]) * $17_1)));
    $4_1 = $4_1 + 88 | 0;
    HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) - Math_fround($23_1 * Math_fround($19_1 * $17_1)));
    break label$13;
   }
   HEAP32[($1_1 + 100 | 0) >> 2] = 0;
  }
  $0_1 = $18_1 <= Math_fround(0.0);
  HEAP32[($1_1 + 96 | 0) >> 2] = 0;
  $19_1 = Math_fround(0.0);
  $22_1 = Math_fround(0.0);
  $25_1 = Math_fround(0.0);
  $21_1 = Math_fround(0.0);
  $23_1 = Math_fround(0.0);
  $24_1 = Math_fround(0.0);
  $28_1 = Math_fround(0.0);
  label$16 : {
   if (!(HEAP32[$8_1 >> 2] | 0)) {
    break label$16
   }
   $4_1 = $9_1 + Math_imul($2_1, 244) | 0;
   $28_1 = Math_fround(HEAPF32[($4_1 + 224 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($4_1 + 208 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($4_1 + 232 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($4_1 + 228 | 0) >> 2]);
   $22_1 = Math_fround(HEAPF32[($4_1 + 216 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[($4_1 + 212 | 0) >> 2]);
  }
  $17_1 = Math_fround($15_1 + $27_1);
  $30_1 = $0_1 ? Math_fround(0.0) : $18_1;
  $18_1 = Math_fround(0.0);
  $27_1 = Math_fround(0.0);
  $15_1 = Math_fround(0.0);
  $26_1 = Math_fround(0.0);
  $29_1 = Math_fround(0.0);
  label$17 : {
   if (!(HEAP32[$7_1 >> 2] | 0)) {
    break label$17
   }
   $4_1 = $9_1 + Math_imul($3_1, 244) | 0;
   $29_1 = Math_fround(HEAPF32[($4_1 + 224 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[($4_1 + 208 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($4_1 + 232 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[($4_1 + 228 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[($4_1 + 216 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[($4_1 + 212 | 0) >> 2]);
  }
  $4_1 = $9_1 + Math_imul($2_1, 244) | 0;
  $980_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($21_1 + Math_fround(HEAPF32[($4_1 + 176 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2])) + Math_fround(Math_fround($25_1 + Math_fround(HEAPF32[($4_1 + 180 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]))) + Math_fround(Math_fround($22_1 + Math_fround(HEAPF32[($4_1 + 184 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]))) + Math_fround(Math_fround(Math_fround(Math_fround($28_1 + Math_fround(HEAPF32[($4_1 + 192 | 0) >> 2])) * Math_fround(HEAPF32[$1_1 >> 2])) + Math_fround(Math_fround($24_1 + Math_fround(HEAPF32[($4_1 + 196 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]))) + Math_fround(Math_fround($23_1 + Math_fround(HEAPF32[($4_1 + 200 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]))));
  $4_1 = $9_1 + Math_imul($3_1, 244) | 0;
  $18_1 = Math_fround($30_1 - Math_fround($980_1 + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($19_1 + Math_fround(HEAPF32[($4_1 + 176 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2])) + Math_fround(Math_fround($18_1 + Math_fround(HEAPF32[($4_1 + 180 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]))) + Math_fround(Math_fround($27_1 + Math_fround(HEAPF32[($4_1 + 184 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]))) + Math_fround(Math_fround(Math_fround(Math_fround($29_1 + Math_fround(HEAPF32[($4_1 + 192 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2])) + Math_fround(Math_fround($26_1 + Math_fround(HEAPF32[($4_1 + 196 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]))) + Math_fround(Math_fround($15_1 + Math_fround(HEAPF32[($4_1 + 200 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]))))));
  $19_1 = Math_fround(0.0);
  label$18 : {
   label$19 : {
    if ($17_1 > Math_fround(0.0) ^ 1 | 0) {
     break label$19
    }
    $18_1 = Math_fround($18_1 - Math_fround($13_1 * $17_1));
    break label$18;
   }
   $19_1 = Math_fround(-Math_fround($13_1 * Math_fround($14_1 * $17_1)));
  }
  $22_1 = Math_fround(HEAPF32[($1_1 + 108 | 0) >> 2]);
  $18_1 = Math_fround($18_1 * $22_1);
  $19_1 = Math_fround($19_1 * $22_1);
  label$20 : {
   label$21 : {
    if (!(HEAP32[($5_1 + 52 | 0) >> 2] | 0)) {
     break label$21
    }
    if ($17_1 > Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]) ^ 1 | 0) {
     break label$20
    }
   }
   $18_1 = Math_fround($19_1 + $18_1);
   $19_1 = Math_fround(0.0);
  }
  HEAPF32[($1_1 + 128 | 0) >> 2] = $19_1;
  HEAPF32[($1_1 + 112 | 0) >> 2] = $18_1;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 1343554297;
  HEAP32[($1_1 + 120 | 0) >> 2] = 0;
  HEAP32[($1_1 + 124 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[($1_1 + 116 | 0) >> 2] = Math_fround($20_1 * $22_1);
 }
 
 function $833($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $13_1 = Math_fround(0), $8_1 = 0, $18_1 = Math_fround(0), $12_1 = 0, $7_1 = 0, $19_1 = 0, $14_1 = Math_fround(0), $15_1 = Math_fround(0), $6_1 = 0, $9_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $20_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0);
  $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $7_1 = HEAP32[(($6_1 + Math_imul($3_1, 244) | 0) + 240 | 0) >> 2] | 0;
  $8_1 = HEAP32[(($6_1 + Math_imul($2_1, 244) | 0) + 240 | 0) >> 2] | 0;
  $9_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
  $1_1 = HEAP32[($1_1 + 140 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $10_1 = HEAP32[($5_1 + 72 | 0) >> 2] | 0;
    $11_1 = $10_1 & 4 | 0;
    if (!$11_1) {
     break label$2
    }
    $12_1 = $9_1 + Math_imul($1_1, 152) | 0;
    $13_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 68 | 0) >> 2]));
    HEAPF32[($12_1 + 100 | 0) >> 2] = $13_1;
    label$3 : {
     if (!$8_1) {
      break label$3
     }
     $14_1 = Math_fround(HEAPF32[($8_1 + 416 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[($12_1 + 24 | 0) >> 2]);
     $16_1 = Math_fround(HEAPF32[($8_1 + 412 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($12_1 + 20 | 0) >> 2]);
     $0_1 = $6_1 + Math_imul($2_1, 244) | 0;
     $18_1 = Math_fround(HEAPF32[($8_1 + 404 | 0) >> 2]);
     HEAPF32[($0_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround(Math_fround($18_1 * Math_fround(HEAPF32[($12_1 + 16 | 0) >> 2])) * Math_fround(HEAPF32[($8_1 + 408 | 0) >> 2]))) * Math_fround(HEAPF32[($0_1 + 112 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]));
     $19_1 = $0_1 + 68 | 0;
     HEAPF32[$19_1 >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround($16_1 * Math_fround($18_1 * $17_1))) * Math_fround(HEAPF32[($0_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[$19_1 >> 2]));
     $19_1 = $0_1 + 72 | 0;
     HEAPF32[$19_1 >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround($14_1 * Math_fround($18_1 * $15_1))) * Math_fround(HEAPF32[($0_1 + 120 | 0) >> 2])) + Math_fround(HEAPF32[$19_1 >> 2]));
     $18_1 = Math_fround(HEAPF32[($12_1 + 72 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($12_1 + 68 | 0) >> 2]);
     HEAPF32[($0_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2])) * Math_fround(HEAPF32[($12_1 + 64 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]));
     $15_1 = Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]);
     $19_1 = $0_1 + 84 | 0;
     HEAPF32[$19_1 >> 2] = Math_fround(Math_fround($14_1 * Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]))) + Math_fround(HEAPF32[$19_1 >> 2]));
     $0_1 = $0_1 + 88 | 0;
     HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($18_1 * Math_fround($13_1 * $15_1)) + Math_fround(HEAPF32[$0_1 >> 2]));
    }
    if (!$7_1) {
     break label$1
    }
    $19_1 = $9_1 + Math_imul($1_1, 152) | 0;
    $14_1 = Math_fround(HEAPF32[($19_1 + 88 | 0) >> 2]);
    $15_1 = Math_fround(HEAPF32[($19_1 + 84 | 0) >> 2]);
    $16_1 = Math_fround(HEAPF32[($19_1 + 80 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[($7_1 + 416 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($19_1 + 56 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($7_1 + 412 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($19_1 + 52 | 0) >> 2]);
    $0_1 = $6_1 + Math_imul($3_1, 244) | 0;
    $18_1 = Math_fround(HEAPF32[($7_1 + 404 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($12_1 + 100 | 0) >> 2]);
    HEAPF32[($0_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($19_1 + 48 | 0) >> 2]) * $18_1) * Math_fround(HEAPF32[($7_1 + 408 | 0) >> 2])) * $13_1) * Math_fround(HEAPF32[($0_1 + 112 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]));
    $12_1 = $0_1 + 68 | 0;
    HEAPF32[$12_1 >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround($21_1 * Math_fround($22_1 * $18_1))) * Math_fround(HEAPF32[($0_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[$12_1 >> 2]));
    $12_1 = $0_1 + 72 | 0;
    HEAPF32[$12_1 >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround($17_1 * Math_fround($20_1 * $18_1))) * Math_fround(HEAPF32[($0_1 + 120 | 0) >> 2])) + Math_fround(HEAPF32[$12_1 >> 2]));
    HEAPF32[($0_1 + 80 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]) + Math_fround($16_1 * Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2]))));
    $18_1 = Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]);
    $12_1 = $0_1 + 84 | 0;
    HEAPF32[$12_1 >> 2] = Math_fround(Math_fround(HEAPF32[$12_1 >> 2]) + Math_fround($15_1 * Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]))));
    $0_1 = $0_1 + 88 | 0;
    HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) + Math_fround($14_1 * Math_fround($18_1 * $13_1)));
    break label$1;
   }
   HEAP32[(($9_1 + Math_imul($1_1, 152) | 0) + 100 | 0) >> 2] = 0;
  }
  label$4 : {
   if (!($10_1 & 16 | 0)) {
    break label$4
   }
   $12_1 = $1_1 + 1 | 0;
   label$5 : {
    if (!$11_1) {
     break label$5
    }
    $1_1 = $9_1 + Math_imul($12_1, 152) | 0;
    $13_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 68 | 0) >> 2]));
    HEAPF32[($1_1 + 100 | 0) >> 2] = $13_1;
    label$6 : {
     if (!$8_1) {
      break label$6
     }
     $14_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
     $0_1 = $6_1 + Math_imul($2_1, 244) | 0;
     $18_1 = Math_fround(HEAPF32[($8_1 + 404 | 0) >> 2]);
     HEAPF32[($0_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround($18_1 * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]))) * Math_fround(HEAPF32[($0_1 + 112 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]));
     $8_1 = $0_1 + 68 | 0;
     HEAPF32[$8_1 >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround($18_1 * $15_1)) * Math_fround(HEAPF32[($0_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[$8_1 >> 2]));
     $8_1 = $0_1 + 72 | 0;
     HEAPF32[$8_1 >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround($18_1 * $14_1)) * Math_fround(HEAPF32[($0_1 + 120 | 0) >> 2])) + Math_fround(HEAPF32[$8_1 >> 2]));
     $18_1 = Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]);
     HEAPF32[($0_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]));
     $15_1 = Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]);
     $8_1 = $0_1 + 84 | 0;
     HEAPF32[$8_1 >> 2] = Math_fround(Math_fround($14_1 * Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]))) + Math_fround(HEAPF32[$8_1 >> 2]));
     $0_1 = $0_1 + 88 | 0;
     HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($18_1 * Math_fround($13_1 * $15_1)) + Math_fround(HEAPF32[$0_1 >> 2]));
    }
    if (!$7_1) {
     break label$4
    }
    $8_1 = $9_1 + Math_imul($12_1, 152) | 0;
    $14_1 = Math_fround(HEAPF32[($8_1 + 88 | 0) >> 2]);
    $15_1 = Math_fround(HEAPF32[($8_1 + 84 | 0) >> 2]);
    $16_1 = Math_fround(HEAPF32[($8_1 + 56 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[($8_1 + 52 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($8_1 + 48 | 0) >> 2]);
    $18_1 = Math_fround(HEAPF32[($7_1 + 404 | 0) >> 2]);
    $0_1 = $6_1 + Math_imul($3_1, 244) | 0;
    $13_1 = Math_fround(HEAPF32[($1_1 + 100 | 0) >> 2]);
    HEAPF32[($0_1 + 80 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]) + Math_fround(Math_fround(HEAPF32[($8_1 + 80 | 0) >> 2]) * Math_fround(Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2]) * $13_1)));
    HEAPF32[($0_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround($20_1 * $18_1)) * Math_fround(HEAPF32[($0_1 + 112 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]));
    $7_1 = $0_1 + 68 | 0;
    HEAPF32[$7_1 >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround($17_1 * $18_1)) * Math_fround(HEAPF32[($0_1 + 116 | 0) >> 2])) + Math_fround(HEAPF32[$7_1 >> 2]));
    $7_1 = $0_1 + 72 | 0;
    HEAPF32[$7_1 >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround($16_1 * $18_1)) * Math_fround(HEAPF32[($0_1 + 120 | 0) >> 2])) + Math_fround(HEAPF32[$7_1 >> 2]));
    $18_1 = Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]);
    $7_1 = $0_1 + 84 | 0;
    HEAPF32[$7_1 >> 2] = Math_fround(Math_fround(HEAPF32[$7_1 >> 2]) + Math_fround($15_1 * Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]))));
    $0_1 = $0_1 + 88 | 0;
    HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) + Math_fround($14_1 * Math_fround($18_1 * $13_1)));
    return;
   }
   HEAP32[(($9_1 + Math_imul($12_1, 152) | 0) + 100 | 0) >> 2] = 0;
  }
 }
 
 function $834($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $10_1 = Math_fround(0), $43_1 = Math_fround(0), $3_1 = 0, $44_1 = Math_fround(0), $4_1 = 0, $5_1 = 0, $45_1 = Math_fround(0), $58_1 = Math_fround(0), $47_1 = Math_fround(0), $11_1 = 0, $46_1 = Math_fround(0), $50_1 = Math_fround(0), $48_1 = Math_fround(0), $59_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $49_1 = Math_fround(0), $51_1 = Math_fround(0), $54_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), $42_1 = 0, $55_1 = Math_fround(0), $41_1 = 0, $6_1 = 0, $7_1 = 0, $40_1 = 0, $60_1 = 0, $68_1 = 0, $56_1 = 0, $61_1 = Math_fround(0), $62_1 = Math_fround(0), $63_1 = Math_fround(0), $64_1 = Math_fround(0), $65_1 = Math_fround(0), $66_1 = Math_fround(0), $67_1 = Math_fround(0), $39_1 = 0, $57_1 = Math_fround(0), $69_1 = 0, $38_1 = 0, $70_1 = 0, $99_1 = Math_fround(0), $106_1 = Math_fround(0), $124_1 = Math_fround(0), $131_1 = Math_fround(0), $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $552_1 = Math_fround(0), $555_1 = Math_fround(0), $653_1 = Math_fround(0), $676_1 = Math_fround(0), $758_1 = Math_fround(0), $781_1 = Math_fround(0), $860_1 = Math_fround(0), $883_1 = Math_fround(0), $962_1 = Math_fround(0), $985_1 = Math_fround(0), $1135_1 = Math_fround(0), $1262 = Math_fround(0), $1369 = Math_fround(0), $1564 = Math_fround(0), $1671 = Math_fround(0), $1870 = Math_fround(0), $1977 = Math_fround(0), $2110 = Math_fround(0), $2127 = Math_fround(0), $2221 = Math_fround(0), $2238 = Math_fround(0);
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1_1 + 776 | 0) >> 2] | 0;
  $5_1 = HEAP32[($1_1 + 772 | 0) >> 2] | 0;
  $6_1 = $830($0_1 | 0, $5_1 | 0, Math_fround(Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2]))) | 0;
  $7_1 = $830($0_1 | 0, $4_1 | 0, Math_fround(Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2]))) | 0;
  label$1 : {
   label$2 : {
    $8_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    $9_1 = $8_1 + Math_imul($6_1, 244) | 0;
    $10_1 = Math_fround(HEAPF32[($9_1 + 128 | 0) >> 2]);
    $99_1 = Math_fround($10_1 * $10_1);
    $10_1 = Math_fround(HEAPF32[($9_1 + 132 | 0) >> 2]);
    $106_1 = Math_fround($99_1 + Math_fround($10_1 * $10_1));
    $10_1 = Math_fround(HEAPF32[($9_1 + 136 | 0) >> 2]);
    if (Math_fround($106_1 + Math_fround($10_1 * $10_1)) < Math_fround(1.4210854715202004e-14) ^ 1 | 0) {
     break label$2
    }
    $9_1 = $8_1 + Math_imul($7_1, 244) | 0;
    $10_1 = Math_fround(HEAPF32[($9_1 + 128 | 0) >> 2]);
    $124_1 = Math_fround($10_1 * $10_1);
    $10_1 = Math_fround(HEAPF32[($9_1 + 132 | 0) >> 2]);
    $131_1 = Math_fround($124_1 + Math_fround($10_1 * $10_1));
    $10_1 = Math_fround(HEAPF32[($9_1 + 136 | 0) >> 2]);
    if (Math_fround($131_1 + Math_fround($10_1 * $10_1)) < Math_fround(1.4210854715202004e-14)) {
     break label$1
    }
   }
   $9_1 = HEAP32[($1_1 + 780 | 0) >> 2] | 0;
   if (($9_1 | 0) < (1 | 0)) {
    break label$1
   }
   $11_1 = $8_1 + Math_imul($7_1, 244) | 0;
   $12_1 = $11_1 + 232 | 0;
   $13_1 = $11_1 + 200 | 0;
   $14_1 = $11_1 + 228 | 0;
   $15_1 = $11_1 + 196 | 0;
   $16_1 = $11_1 + 224 | 0;
   $17_1 = $11_1 + 192 | 0;
   $18_1 = $11_1 + 216 | 0;
   $19_1 = $11_1 + 184 | 0;
   $20_1 = $11_1 + 212 | 0;
   $21_1 = $11_1 + 180 | 0;
   $22_1 = $11_1 + 208 | 0;
   $23_1 = $11_1 + 176 | 0;
   $24_1 = $11_1 + 240 | 0;
   $11_1 = $8_1 + Math_imul($6_1, 244) | 0;
   $25_1 = $11_1 + 232 | 0;
   $26_1 = $11_1 + 200 | 0;
   $27_1 = $11_1 + 228 | 0;
   $28_1 = $11_1 + 196 | 0;
   $29_1 = $11_1 + 224 | 0;
   $30_1 = $11_1 + 192 | 0;
   $31_1 = $11_1 + 216 | 0;
   $32_1 = $11_1 + 184 | 0;
   $33_1 = $11_1 + 212 | 0;
   $34_1 = $11_1 + 180 | 0;
   $35_1 = $11_1 + 208 | 0;
   $36_1 = $11_1 + 176 | 0;
   $37_1 = $11_1 + 240 | 0;
   $38_1 = 0;
   label$3 : while (1) {
    label$4 : {
     $11_1 = $1_1 + Math_imul($38_1, 192) | 0;
     if (Math_fround(HEAPF32[($11_1 + 84 | 0) >> 2]) <= Math_fround(HEAPF32[($1_1 + 788 | 0) >> 2]) ^ 1 | 0) {
      break label$4
     }
     $39_1 = $11_1 + 4 | 0;
     $40_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     $9_1 = $40_1;
     label$5 : {
      if (($9_1 | 0) != (HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      $9_1 = $40_1;
      $41_1 = $9_1 ? $9_1 << 1 | 0 : 1;
      if (($9_1 | 0) >= ($41_1 | 0)) {
       break label$5
      }
      label$6 : {
       label$7 : {
        if ($41_1) {
         break label$7
        }
        $42_1 = 0;
        $8_1 = $40_1;
        break label$6;
       }
       $42_1 = $79(Math_imul($41_1, 152) | 0, 16 | 0) | 0;
       $8_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      }
      label$8 : {
       if (($8_1 | 0) < (1 | 0)) {
        break label$8
       }
       $9_1 = 0;
       label$9 : while (1) {
        $7($42_1 + $9_1 | 0 | 0, (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $9_1 | 0 | 0, 152 | 0) | 0;
        $9_1 = $9_1 + 152 | 0;
        $8_1 = $8_1 + -1 | 0;
        if ($8_1) {
         continue label$9
        }
        break label$9;
       };
      }
      label$10 : {
       $9_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
       if (!$9_1) {
        break label$10
       }
       label$11 : {
        if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
         break label$11
        }
        $80($9_1 | 0);
       }
       HEAP32[($0_1 + 36 | 0) >> 2] = 0;
      }
      HEAP32[($0_1 + 36 | 0) >> 2] = $42_1;
      HEAP8[($0_1 + 40 | 0) >> 0] = 1;
      HEAP32[($0_1 + 32 | 0) >> 2] = $41_1;
      $9_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     }
     HEAP32[($0_1 + 28 | 0) >> 2] = $9_1 + 1 | 0;
     $9_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + Math_imul($40_1, 152) | 0;
     HEAP32[($9_1 + 132 | 0) >> 2] = $39_1;
     HEAP32[($9_1 + 148 | 0) >> 2] = $7_1;
     HEAP32[($9_1 + 144 | 0) >> 2] = $6_1;
     HEAP32[($3_1 + 76 | 0) >> 2] = 0;
     $10_1 = Math_fround(Math_fround(HEAPF32[($11_1 + 60 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 60 | 0) >> 2]));
     HEAPF32[($3_1 + 72 | 0) >> 2] = $10_1;
     $43_1 = Math_fround(Math_fround(HEAPF32[($11_1 + 56 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]));
     HEAPF32[($3_1 + 68 | 0) >> 2] = $43_1;
     $44_1 = Math_fround(Math_fround(HEAPF32[($11_1 + 52 | 0) >> 2]) - Math_fround(HEAPF32[($5_1 + 52 | 0) >> 2]));
     HEAPF32[($3_1 + 64 | 0) >> 2] = $44_1;
     $45_1 = Math_fround(HEAPF32[($11_1 + 36 | 0) >> 2]);
     $46_1 = Math_fround(HEAPF32[($11_1 + 40 | 0) >> 2]);
     $47_1 = Math_fround(HEAPF32[($11_1 + 44 | 0) >> 2]);
     $48_1 = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
     $49_1 = Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]);
     $50_1 = Math_fround(HEAPF32[($4_1 + 60 | 0) >> 2]);
     HEAP32[($3_1 + 60 | 0) >> 2] = 0;
     $47_1 = Math_fround($47_1 - $50_1);
     HEAPF32[($3_1 + 56 | 0) >> 2] = $47_1;
     $46_1 = Math_fround($46_1 - $49_1);
     HEAPF32[($3_1 + 52 | 0) >> 2] = $46_1;
     $45_1 = Math_fround($45_1 - $48_1);
     HEAPF32[($3_1 + 48 | 0) >> 2] = $45_1;
     $48_1 = Math_fround(0.0);
     $49_1 = Math_fround(0.0);
     $50_1 = Math_fround(0.0);
     $51_1 = Math_fround(0.0);
     label$12 : {
      if (!(HEAP32[$37_1 >> 2] | 0)) {
       break label$12
      }
      $49_1 = Math_fround(Math_fround(HEAPF32[$30_1 >> 2]) + Math_fround(HEAPF32[$29_1 >> 2]));
      $52_1 = Math_fround(Math_fround(HEAPF32[$28_1 >> 2]) + Math_fround(HEAPF32[$27_1 >> 2]));
      $51_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$32_1 >> 2]) + Math_fround(HEAPF32[$31_1 >> 2])) + Math_fround(Math_fround($43_1 * $49_1) - Math_fround($44_1 * $52_1)));
      $53_1 = Math_fround(Math_fround(HEAPF32[$26_1 >> 2]) + Math_fround(HEAPF32[$25_1 >> 2]));
      $50_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$34_1 >> 2]) + Math_fround(HEAPF32[$33_1 >> 2])) + Math_fround(Math_fround($44_1 * $53_1) - Math_fround($10_1 * $49_1)));
      $49_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$36_1 >> 2]) + Math_fround(HEAPF32[$35_1 >> 2])) + Math_fround(Math_fround($10_1 * $52_1) - Math_fround($43_1 * $53_1)));
     }
     $52_1 = Math_fround(0.0);
     $53_1 = Math_fround(0.0);
     label$13 : {
      if (!(HEAP32[$24_1 >> 2] | 0)) {
       break label$13
      }
      $10_1 = Math_fround(Math_fround(HEAPF32[$17_1 >> 2]) + Math_fround(HEAPF32[$16_1 >> 2]));
      $43_1 = Math_fround(Math_fround(HEAPF32[$15_1 >> 2]) + Math_fround(HEAPF32[$14_1 >> 2]));
      $53_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$19_1 >> 2]) + Math_fround(HEAPF32[$18_1 >> 2])) + Math_fround(Math_fround($46_1 * $10_1) - Math_fround($45_1 * $43_1)));
      $44_1 = Math_fround(Math_fround(HEAPF32[$13_1 >> 2]) + Math_fround(HEAPF32[$12_1 >> 2]));
      $52_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$21_1 >> 2]) + Math_fround(HEAPF32[$20_1 >> 2])) + Math_fround(Math_fround($45_1 * $44_1) - Math_fround($47_1 * $10_1)));
      $48_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$23_1 >> 2]) + Math_fround(HEAPF32[$22_1 >> 2])) + Math_fround(Math_fround($47_1 * $43_1) - Math_fround($46_1 * $44_1)));
     }
     $41_1 = $11_1 + 76 | 0;
     $54_1 = Math_fround(HEAPF32[$41_1 >> 2]);
     $42_1 = $11_1 + 68 | 0;
     $55_1 = Math_fround(HEAPF32[$42_1 >> 2]);
     $56_1 = $11_1 + 72 | 0;
     $57_1 = Math_fround(HEAPF32[$56_1 >> 2]);
     $832($0_1 | 0, $9_1 | 0, $6_1 | 0, $7_1 | 0, $39_1 | 0, $2_1 | 0, $3_1 + 44 | 0 | 0, $3_1 + 64 | 0 | 0, $3_1 + 48 | 0 | 0);
     HEAP32[($9_1 + 140 | 0) >> 2] = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
     label$14 : {
      $8_1 = $11_1 + 92 | 0;
      if (Math_fround(HEAPF32[$8_1 >> 2]) > Math_fround(0.0) ^ 1 | 0) {
       break label$14
      }
      $829($0_1 | 0, $42_1 | 0, $6_1 | 0, $7_1 | 0, $40_1 | 0, $3_1 | 0, Math_fround(Math_fround(HEAPF32[($11_1 + 96 | 0) >> 2])), $3_1 | 0, $3_1 | 0, $3_1 | 0, $3_1 | 0, Math_fround($10_1), Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0))) | 0;
      label$15 : {
       label$16 : {
        $44_1 = Math_fround(HEAPF32[$41_1 >> 2]);
        if (Math_fround(Math_abs($44_1)) > Math_fround(.7071067690849304) ^ 1 | 0) {
         break label$16
        }
        HEAP32[($3_1 + 24 | 0) >> 2] = 0;
        $10_1 = Math_fround(HEAPF32[$56_1 >> 2]);
        $47_1 = Math_fround(Math_fround($44_1 * $44_1) + Math_fround($10_1 * $10_1));
        $43_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($47_1)));
        $10_1 = Math_fround($10_1 * $43_1);
        HEAPF32[($3_1 + 32 | 0) >> 2] = $10_1;
        $45_1 = Math_fround($47_1 * $43_1);
        HEAPF32[($3_1 + 8 | 0) >> 2] = $45_1;
        $43_1 = Math_fround(-Math_fround($44_1 * $43_1));
        HEAPF32[($3_1 + 28 | 0) >> 2] = $43_1;
        $44_1 = Math_fround(HEAPF32[$42_1 >> 2]);
        $46_1 = Math_fround(-Math_fround($44_1 * $10_1));
        HEAPF32[($3_1 + 12 | 0) >> 2] = $46_1;
        $58_1 = Math_fround($44_1 * $43_1);
        $47_1 = Math_fround(0.0);
        break label$15;
       }
       HEAP32[($3_1 + 32 | 0) >> 2] = 0;
       $10_1 = Math_fround(HEAPF32[$42_1 >> 2]);
       $552_1 = $10_1;
       $555_1 = Math_fround($10_1 * $10_1);
       $10_1 = Math_fround(HEAPF32[$56_1 >> 2]);
       $59_1 = Math_fround($555_1 + Math_fround($10_1 * $10_1));
       $58_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($59_1)));
       $43_1 = Math_fround($552_1 * $58_1);
       HEAPF32[($3_1 + 28 | 0) >> 2] = $43_1;
       $47_1 = Math_fround(-Math_fround($10_1 * $58_1));
       HEAPF32[($3_1 + 24 | 0) >> 2] = $47_1;
       $46_1 = Math_fround($44_1 * $47_1);
       HEAPF32[($3_1 + 12 | 0) >> 2] = $46_1;
       $45_1 = Math_fround(-Math_fround($44_1 * $43_1));
       HEAPF32[($3_1 + 8 | 0) >> 2] = $45_1;
       $58_1 = Math_fround($59_1 * $58_1);
       $10_1 = Math_fround(0.0);
      }
      $59_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($47_1 * $47_1) + Math_fround($43_1 * $43_1)) + Math_fround($10_1 * $10_1)))));
      $10_1 = Math_fround($10_1 * $59_1);
      HEAPF32[($3_1 + 32 | 0) >> 2] = $10_1;
      $44_1 = Math_fround($43_1 * $59_1);
      HEAPF32[($3_1 + 28 | 0) >> 2] = $44_1;
      $47_1 = Math_fround($47_1 * $59_1);
      HEAPF32[($3_1 + 24 | 0) >> 2] = $47_1;
      $59_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($58_1 * $58_1) + Math_fround(Math_fround($45_1 * $45_1) + Math_fround($46_1 * $46_1))))));
      $43_1 = Math_fround($58_1 * $59_1);
      HEAPF32[($3_1 + 16 | 0) >> 2] = $43_1;
      $46_1 = Math_fround($46_1 * $59_1);
      HEAPF32[($3_1 + 12 | 0) >> 2] = $46_1;
      $45_1 = Math_fround($45_1 * $59_1);
      HEAPF32[($3_1 + 8 | 0) >> 2] = $45_1;
      label$17 : {
       $60_1 = (HEAP32[($5_1 + 180 | 0) >> 2] | 0) & 2 | 0;
       if (!$60_1) {
        break label$17
       }
       HEAP32[($3_1 + 36 | 0) >> 2] = 0;
       $58_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
       $653_1 = $58_1;
       $61_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
       $62_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
       $58_1 = Math_fround(Math_fround(Math_fround(Math_fround($47_1 * $61_1) + Math_fround($44_1 * $62_1)) + Math_fround($10_1 * $58_1)) * Math_fround(HEAPF32[($5_1 + 164 | 0) >> 2]));
       $59_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
       $676_1 = $59_1;
       $63_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
       $64_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
       $59_1 = Math_fround(Math_fround(Math_fround(Math_fround($47_1 * $63_1) + Math_fround($44_1 * $64_1)) + Math_fround($10_1 * $59_1)) * Math_fround(HEAPF32[($5_1 + 168 | 0) >> 2]));
       $65_1 = Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2]);
       $66_1 = Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]);
       $67_1 = Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]);
       $47_1 = Math_fround(Math_fround(Math_fround(Math_fround($47_1 * $66_1) + Math_fround($44_1 * $67_1)) + Math_fround($10_1 * $65_1)) * Math_fround(HEAPF32[($5_1 + 172 | 0) >> 2]));
       $10_1 = Math_fround(Math_fround(Math_fround($653_1 * $58_1) + Math_fround($676_1 * $59_1)) + Math_fround($65_1 * $47_1));
       HEAPF32[($3_1 + 32 | 0) >> 2] = $10_1;
       $44_1 = Math_fround(Math_fround(Math_fround($62_1 * $58_1) + Math_fround($64_1 * $59_1)) + Math_fround($67_1 * $47_1));
       HEAPF32[($3_1 + 28 | 0) >> 2] = $44_1;
       $47_1 = Math_fround(Math_fround(Math_fround($61_1 * $58_1) + Math_fround($63_1 * $59_1)) + Math_fround($66_1 * $47_1));
       HEAPF32[($3_1 + 24 | 0) >> 2] = $47_1;
      }
      label$18 : {
       $68_1 = (HEAP32[($4_1 + 180 | 0) >> 2] | 0) & 2 | 0;
       if (!$68_1) {
        break label$18
       }
       HEAP32[($3_1 + 36 | 0) >> 2] = 0;
       $58_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
       $758_1 = $58_1;
       $61_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
       $62_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
       $58_1 = Math_fround(Math_fround(Math_fround(Math_fround($61_1 * $47_1) + Math_fround($62_1 * $44_1)) + Math_fround($58_1 * $10_1)) * Math_fround(HEAPF32[($4_1 + 164 | 0) >> 2]));
       $59_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
       $781_1 = $59_1;
       $63_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
       $64_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
       $59_1 = Math_fround(Math_fround(Math_fround(Math_fround($47_1 * $63_1) + Math_fround($44_1 * $64_1)) + Math_fround($10_1 * $59_1)) * Math_fround(HEAPF32[($4_1 + 168 | 0) >> 2]));
       $65_1 = Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]);
       $66_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
       $67_1 = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
       $47_1 = Math_fround(Math_fround(Math_fround(Math_fround($47_1 * $66_1) + Math_fround($44_1 * $67_1)) + Math_fround($10_1 * $65_1)) * Math_fround(HEAPF32[($4_1 + 172 | 0) >> 2]));
       $10_1 = Math_fround(Math_fround(Math_fround($758_1 * $58_1) + Math_fround($781_1 * $59_1)) + Math_fround($65_1 * $47_1));
       HEAPF32[($3_1 + 32 | 0) >> 2] = $10_1;
       $44_1 = Math_fround(Math_fround(Math_fround($62_1 * $58_1) + Math_fround($64_1 * $59_1)) + Math_fround($67_1 * $47_1));
       HEAPF32[($3_1 + 28 | 0) >> 2] = $44_1;
       $47_1 = Math_fround(Math_fround(Math_fround($61_1 * $58_1) + Math_fround($63_1 * $59_1)) + Math_fround($66_1 * $47_1));
       HEAPF32[($3_1 + 24 | 0) >> 2] = $47_1;
      }
      label$19 : {
       if (!$60_1) {
        break label$19
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = 0;
       $58_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
       $860_1 = $58_1;
       $61_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
       $62_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
       $58_1 = Math_fround(Math_fround(Math_fround(Math_fround($45_1 * $61_1) + Math_fround($46_1 * $62_1)) + Math_fround($43_1 * $58_1)) * Math_fround(HEAPF32[($5_1 + 164 | 0) >> 2]));
       $59_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
       $883_1 = $59_1;
       $63_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
       $64_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
       $59_1 = Math_fround(Math_fround(Math_fround(Math_fround($45_1 * $63_1) + Math_fround($46_1 * $64_1)) + Math_fround($43_1 * $59_1)) * Math_fround(HEAPF32[($5_1 + 168 | 0) >> 2]));
       $65_1 = Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2]);
       $66_1 = Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]);
       $67_1 = Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]);
       $45_1 = Math_fround(Math_fround(Math_fround(Math_fround($45_1 * $66_1) + Math_fround($46_1 * $67_1)) + Math_fround($43_1 * $65_1)) * Math_fround(HEAPF32[($5_1 + 172 | 0) >> 2]));
       $43_1 = Math_fround(Math_fround(Math_fround($860_1 * $58_1) + Math_fround($883_1 * $59_1)) + Math_fround($65_1 * $45_1));
       HEAPF32[($3_1 + 16 | 0) >> 2] = $43_1;
       $46_1 = Math_fround(Math_fround(Math_fround($62_1 * $58_1) + Math_fround($64_1 * $59_1)) + Math_fround($67_1 * $45_1));
       HEAPF32[($3_1 + 12 | 0) >> 2] = $46_1;
       $45_1 = Math_fround(Math_fround(Math_fround($61_1 * $58_1) + Math_fround($63_1 * $59_1)) + Math_fround($66_1 * $45_1));
       HEAPF32[($3_1 + 8 | 0) >> 2] = $45_1;
      }
      label$20 : {
       if (!$68_1) {
        break label$20
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = 0;
       $58_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
       $962_1 = $58_1;
       $61_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
       $62_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
       $58_1 = Math_fround(Math_fround(Math_fround(Math_fround($61_1 * $45_1) + Math_fround($62_1 * $46_1)) + Math_fround($58_1 * $43_1)) * Math_fround(HEAPF32[($4_1 + 164 | 0) >> 2]));
       $59_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
       $985_1 = $59_1;
       $63_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
       $64_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
       $59_1 = Math_fround(Math_fround(Math_fround(Math_fround($45_1 * $63_1) + Math_fround($46_1 * $64_1)) + Math_fround($43_1 * $59_1)) * Math_fround(HEAPF32[($4_1 + 168 | 0) >> 2]));
       $65_1 = Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]);
       $66_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
       $67_1 = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
       $45_1 = Math_fround(Math_fround(Math_fround(Math_fround($45_1 * $66_1) + Math_fround($46_1 * $67_1)) + Math_fround($43_1 * $65_1)) * Math_fround(HEAPF32[($4_1 + 172 | 0) >> 2]));
       $43_1 = Math_fround(Math_fround(Math_fround($962_1 * $58_1) + Math_fround($985_1 * $59_1)) + Math_fround($65_1 * $45_1));
       HEAPF32[($3_1 + 16 | 0) >> 2] = $43_1;
       $46_1 = Math_fround(Math_fround(Math_fround($62_1 * $58_1) + Math_fround($64_1 * $59_1)) + Math_fround($67_1 * $45_1));
       HEAPF32[($3_1 + 12 | 0) >> 2] = $46_1;
       $45_1 = Math_fround(Math_fround(Math_fround($61_1 * $58_1) + Math_fround($63_1 * $59_1)) + Math_fround($66_1 * $45_1));
       HEAPF32[($3_1 + 8 | 0) >> 2] = $45_1;
      }
      label$21 : {
       if (+Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($47_1 * $47_1) + Math_fround($44_1 * $44_1)) + Math_fround($10_1 * $10_1)))) > .001 ^ 1 | 0) {
        break label$21
       }
       $829($0_1 | 0, $3_1 + 24 | 0 | 0, $6_1 | 0, $7_1 | 0, $40_1 | 0, $3_1 | 0, Math_fround(Math_fround(HEAPF32[$8_1 >> 2])), $3_1 | 0, $3_1 | 0, $3_1 | 0, $3_1 | 0, Math_fround($10_1), Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0))) | 0;
      }
      if (+Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($45_1 * $45_1) + Math_fround($46_1 * $46_1)) + Math_fround($43_1 * $43_1)))) > .001 ^ 1 | 0) {
       break label$14
      }
      $829($0_1 | 0, $3_1 + 8 | 0 | 0, $6_1 | 0, $7_1 | 0, $40_1 | 0, $3_1 | 0, Math_fround(Math_fround(HEAPF32[$8_1 >> 2])), $3_1 | 0, $3_1 | 0, $3_1 | 0, $3_1 | 0, Math_fround($10_1), Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0))) | 0;
     }
     label$22 : {
      label$23 : {
       label$24 : {
        if (!((HEAPU8[($2_1 + 72 | 0) >> 0] | 0) & 32 | 0)) {
         break label$24
        }
        if ((HEAPU8[($11_1 + 124 | 0) >> 0] | 0) & 1 | 0) {
         break label$23
        }
       }
       $69_1 = $11_1 + 176 | 0;
       HEAP32[$69_1 >> 2] = 0;
       $60_1 = $11_1 + 172 | 0;
       $10_1 = Math_fround($51_1 - $53_1);
       $1135_1 = $10_1;
       $48_1 = Math_fround($49_1 - $48_1);
       $44_1 = Math_fround($50_1 - $52_1);
       $10_1 = Math_fround(Math_fround(Math_fround($48_1 * $55_1) + Math_fround($44_1 * $57_1)) + Math_fround($10_1 * $54_1));
       $47_1 = Math_fround(HEAPF32[$41_1 >> 2]);
       $43_1 = Math_fround($1135_1 - Math_fround($10_1 * $47_1));
       HEAPF32[$60_1 >> 2] = $43_1;
       $68_1 = $11_1 + 168 | 0;
       $46_1 = Math_fround(HEAPF32[$56_1 >> 2]);
       $44_1 = Math_fround($44_1 - Math_fround($10_1 * $46_1));
       HEAPF32[$68_1 >> 2] = $44_1;
       $8_1 = $11_1 + 164 | 0;
       $45_1 = Math_fround(HEAPF32[$42_1 >> 2]);
       $10_1 = Math_fround($48_1 - Math_fround($10_1 * $45_1));
       HEAPF32[$8_1 >> 2] = $10_1;
       label$25 : {
        if ((HEAPU8[($2_1 + 72 | 0) >> 0] | 0) & 64 | 0) {
         break label$25
        }
        $48_1 = Math_fround(Math_fround(Math_fround($10_1 * $10_1) + Math_fround($44_1 * $44_1)) + Math_fround($43_1 * $43_1));
        if ($48_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
         break label$25
        }
        $47_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($48_1)));
        $44_1 = Math_fround($44_1 * $47_1);
        HEAPF32[$68_1 >> 2] = $44_1;
        $10_1 = Math_fround($10_1 * $47_1);
        HEAPF32[$8_1 >> 2] = $10_1;
        $43_1 = Math_fround($43_1 * $47_1);
        HEAPF32[$60_1 >> 2] = $43_1;
        label$26 : {
         if (!((HEAPU8[($5_1 + 180 | 0) >> 0] | 0) & 1 | 0)) {
          break label$26
         }
         $54_1 = Math_fround(HEAPF32[($5_1 + 172 | 0) >> 2]);
         $47_1 = Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2]);
         $46_1 = Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]);
         $45_1 = Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]);
         $58_1 = Math_fround(HEAPF32[($5_1 + 164 | 0) >> 2]);
         $48_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
         $49_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
         $50_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
         $55_1 = Math_fround(HEAPF32[($5_1 + 168 | 0) >> 2]);
         $51_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
         $52_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
         $53_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
         HEAP32[$69_1 >> 2] = 0;
         $58_1 = Math_fround($58_1 * Math_fround(Math_fround(Math_fround($10_1 * $49_1) + Math_fround($44_1 * $50_1)) + Math_fround($43_1 * $48_1)));
         $1262 = Math_fround($50_1 * $58_1);
         $50_1 = Math_fround($55_1 * Math_fround(Math_fround(Math_fround($10_1 * $52_1) + Math_fround($44_1 * $53_1)) + Math_fround($43_1 * $51_1)));
         $43_1 = Math_fround($54_1 * Math_fround(Math_fround(Math_fround($10_1 * $46_1) + Math_fround($44_1 * $45_1)) + Math_fround($43_1 * $47_1)));
         $44_1 = Math_fround(Math_fround($1262 + Math_fround($53_1 * $50_1)) + Math_fround($45_1 * $43_1));
         HEAPF32[$68_1 >> 2] = $44_1;
         $10_1 = Math_fround(Math_fround(Math_fround($49_1 * $58_1) + Math_fround($52_1 * $50_1)) + Math_fround($46_1 * $43_1));
         HEAPF32[$8_1 >> 2] = $10_1;
         $43_1 = Math_fround(Math_fround(Math_fround($48_1 * $58_1) + Math_fround($51_1 * $50_1)) + Math_fround($47_1 * $43_1));
         HEAPF32[$60_1 >> 2] = $43_1;
        }
        label$27 : {
         if (!((HEAPU8[($4_1 + 180 | 0) >> 0] | 0) & 1 | 0)) {
          break label$27
         }
         $54_1 = Math_fround(HEAPF32[($4_1 + 172 | 0) >> 2]);
         $47_1 = Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]);
         $46_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
         $45_1 = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
         $58_1 = Math_fround(HEAPF32[($4_1 + 164 | 0) >> 2]);
         $48_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
         $49_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
         $50_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
         $55_1 = Math_fround(HEAPF32[($4_1 + 168 | 0) >> 2]);
         $51_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
         $52_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
         $53_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
         HEAP32[$69_1 >> 2] = 0;
         $58_1 = Math_fround($58_1 * Math_fround(Math_fround(Math_fround($49_1 * $10_1) + Math_fround($50_1 * $44_1)) + Math_fround($48_1 * $43_1)));
         $1369 = Math_fround($50_1 * $58_1);
         $50_1 = Math_fround($55_1 * Math_fround(Math_fround(Math_fround($10_1 * $52_1) + Math_fround($44_1 * $53_1)) + Math_fround($43_1 * $51_1)));
         $10_1 = Math_fround($54_1 * Math_fround(Math_fround(Math_fround($10_1 * $46_1) + Math_fround($44_1 * $45_1)) + Math_fround($43_1 * $47_1)));
         HEAPF32[$68_1 >> 2] = Math_fround(Math_fround($1369 + Math_fround($53_1 * $50_1)) + Math_fround($45_1 * $10_1));
         HEAPF32[$8_1 >> 2] = Math_fround(Math_fround(Math_fround($49_1 * $58_1) + Math_fround($52_1 * $50_1)) + Math_fround($46_1 * $10_1));
         HEAPF32[$60_1 >> 2] = Math_fround(Math_fround(Math_fround($48_1 * $58_1) + Math_fround($51_1 * $50_1)) + Math_fround($47_1 * $10_1));
        }
        $47_1 = Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]);
        $827($0_1 | 0, $8_1 | 0, $6_1 | 0, $7_1 | 0, $40_1 | 0, $39_1 | 0, $3_1 + 64 | 0 | 0, $3_1 + 48 | 0 | 0, $3_1 | 0, $3_1 | 0, Math_fround($47_1), $2_1 | 0, Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0))) | 0;
        if (!((HEAPU8[($2_1 + 72 | 0) >> 0] | 0) & 16 | 0)) {
         break label$22
        }
        $69_1 = $11_1 + 192 | 0;
        HEAP32[$69_1 >> 2] = 0;
        $70_1 = $11_1 + 188 | 0;
        $43_1 = Math_fround(HEAPF32[$56_1 >> 2]);
        $46_1 = Math_fround(HEAPF32[$8_1 >> 2]);
        $44_1 = Math_fround(HEAPF32[$68_1 >> 2]);
        $45_1 = Math_fround(HEAPF32[$42_1 >> 2]);
        $10_1 = Math_fround(Math_fround($43_1 * $46_1) - Math_fround($44_1 * $45_1));
        $48_1 = Math_fround(HEAPF32[$41_1 >> 2]);
        $49_1 = Math_fround(HEAPF32[$60_1 >> 2]);
        $44_1 = Math_fround(Math_fround($44_1 * $48_1) - Math_fround($49_1 * $43_1));
        $43_1 = Math_fround(Math_fround($49_1 * $45_1) - Math_fround($48_1 * $46_1));
        $46_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($44_1 * $44_1) + Math_fround($43_1 * $43_1)) + Math_fround($10_1 * $10_1)))));
        $10_1 = Math_fround($10_1 * $46_1);
        HEAPF32[$70_1 >> 2] = $10_1;
        $8_1 = $11_1 + 184 | 0;
        $43_1 = Math_fround($43_1 * $46_1);
        HEAPF32[$8_1 >> 2] = $43_1;
        $11_1 = $11_1 + 180 | 0;
        $44_1 = Math_fround($44_1 * $46_1);
        HEAPF32[$11_1 >> 2] = $44_1;
        label$28 : {
         if (!((HEAPU8[($5_1 + 180 | 0) >> 0] | 0) & 1 | 0)) {
          break label$28
         }
         $55_1 = Math_fround(HEAPF32[($5_1 + 172 | 0) >> 2]);
         $46_1 = Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2]);
         $45_1 = Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]);
         $48_1 = Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]);
         $54_1 = Math_fround(HEAPF32[($5_1 + 164 | 0) >> 2]);
         $49_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
         $50_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
         $51_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
         $57_1 = Math_fround(HEAPF32[($5_1 + 168 | 0) >> 2]);
         $52_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
         $53_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
         $58_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
         HEAP32[$69_1 >> 2] = 0;
         $54_1 = Math_fround($54_1 * Math_fround(Math_fround(Math_fround($44_1 * $50_1) + Math_fround($43_1 * $51_1)) + Math_fround($10_1 * $49_1)));
         $1564 = Math_fround($51_1 * $54_1);
         $51_1 = Math_fround($57_1 * Math_fround(Math_fround(Math_fround($44_1 * $53_1) + Math_fround($43_1 * $58_1)) + Math_fround($10_1 * $52_1)));
         $10_1 = Math_fround($55_1 * Math_fround(Math_fround(Math_fround($44_1 * $45_1) + Math_fround($43_1 * $48_1)) + Math_fround($10_1 * $46_1)));
         $43_1 = Math_fround(Math_fround($1564 + Math_fround($58_1 * $51_1)) + Math_fround($48_1 * $10_1));
         HEAPF32[$8_1 >> 2] = $43_1;
         $44_1 = Math_fround(Math_fround(Math_fround($50_1 * $54_1) + Math_fround($53_1 * $51_1)) + Math_fround($45_1 * $10_1));
         HEAPF32[$11_1 >> 2] = $44_1;
         $10_1 = Math_fround(Math_fround(Math_fround($49_1 * $54_1) + Math_fround($52_1 * $51_1)) + Math_fround($46_1 * $10_1));
         HEAPF32[$70_1 >> 2] = $10_1;
        }
        label$29 : {
         if (!((HEAPU8[($4_1 + 180 | 0) >> 0] | 0) & 1 | 0)) {
          break label$29
         }
         $55_1 = Math_fround(HEAPF32[($4_1 + 172 | 0) >> 2]);
         $46_1 = Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]);
         $45_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
         $48_1 = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
         $54_1 = Math_fround(HEAPF32[($4_1 + 164 | 0) >> 2]);
         $49_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
         $50_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
         $51_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
         $57_1 = Math_fround(HEAPF32[($4_1 + 168 | 0) >> 2]);
         $52_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
         $53_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
         $58_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
         HEAP32[$69_1 >> 2] = 0;
         $54_1 = Math_fround($54_1 * Math_fround(Math_fround(Math_fround($50_1 * $44_1) + Math_fround($51_1 * $43_1)) + Math_fround($49_1 * $10_1)));
         $1671 = Math_fround($51_1 * $54_1);
         $51_1 = Math_fround($57_1 * Math_fround(Math_fround(Math_fround($44_1 * $53_1) + Math_fround($43_1 * $58_1)) + Math_fround($10_1 * $52_1)));
         $10_1 = Math_fround($55_1 * Math_fround(Math_fround(Math_fround($44_1 * $45_1) + Math_fround($43_1 * $48_1)) + Math_fround($10_1 * $46_1)));
         HEAPF32[$8_1 >> 2] = Math_fround(Math_fround($1671 + Math_fround($58_1 * $51_1)) + Math_fround($48_1 * $10_1));
         HEAPF32[$11_1 >> 2] = Math_fround(Math_fround(Math_fround($50_1 * $54_1) + Math_fround($53_1 * $51_1)) + Math_fround($45_1 * $10_1));
         HEAPF32[$70_1 >> 2] = Math_fround(Math_fround(Math_fround($49_1 * $54_1) + Math_fround($52_1 * $51_1)) + Math_fround($46_1 * $10_1));
        }
        $827($0_1 | 0, $11_1 | 0, $6_1 | 0, $7_1 | 0, $40_1 | 0, $39_1 | 0, $3_1 + 64 | 0 | 0, $3_1 + 48 | 0 | 0, $3_1 | 0, $3_1 | 0, Math_fround($47_1), $2_1 | 0, Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0))) | 0;
        break label$22;
       }
       $42_1 = $11_1 + 180 | 0;
       label$30 : {
        label$31 : {
         if (Math_fround(Math_abs($47_1)) > Math_fround(.7071067690849304) ^ 1 | 0) {
          break label$31
         }
         HEAP32[$8_1 >> 2] = 0;
         $48_1 = Math_fround(Math_fround($46_1 * $46_1) + Math_fround($47_1 * $47_1));
         $44_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($48_1)));
         $43_1 = Math_fround($46_1 * $44_1);
         HEAPF32[$60_1 >> 2] = $43_1;
         $10_1 = Math_fround(-Math_fround($47_1 * $44_1));
         HEAPF32[$68_1 >> 2] = $10_1;
         $47_1 = Math_fround($48_1 * $44_1);
         $46_1 = Math_fround($45_1 * $10_1);
         $45_1 = Math_fround(-Math_fround($45_1 * $43_1));
         $44_1 = Math_fround(0.0);
         break label$30;
        }
        HEAP32[$60_1 >> 2] = 0;
        $48_1 = Math_fround(Math_fround($45_1 * $45_1) + Math_fround($46_1 * $46_1));
        $43_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($48_1)));
        $10_1 = Math_fround($45_1 * $43_1);
        HEAPF32[$68_1 >> 2] = $10_1;
        $44_1 = Math_fround(-Math_fround($46_1 * $43_1));
        HEAPF32[$8_1 >> 2] = $44_1;
        $46_1 = Math_fround($48_1 * $43_1);
        $45_1 = Math_fround($47_1 * $44_1);
        $47_1 = Math_fround(-Math_fround($47_1 * $10_1));
        $43_1 = Math_fround(0.0);
       }
       HEAPF32[$42_1 >> 2] = $47_1;
       $41_1 = $11_1 + 188 | 0;
       HEAPF32[$41_1 >> 2] = $46_1;
       $56_1 = $11_1 + 184 | 0;
       HEAPF32[$56_1 >> 2] = $45_1;
       label$32 : {
        if (!((HEAPU8[($5_1 + 180 | 0) >> 0] | 0) & 1 | 0)) {
         break label$32
        }
        $54_1 = Math_fround(HEAPF32[($5_1 + 172 | 0) >> 2]);
        $47_1 = Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2]);
        $46_1 = Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]);
        $45_1 = Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]);
        $58_1 = Math_fround(HEAPF32[($5_1 + 164 | 0) >> 2]);
        $48_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
        $49_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
        $50_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
        $55_1 = Math_fround(HEAPF32[($5_1 + 168 | 0) >> 2]);
        $51_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
        $52_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
        $53_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
        HEAP32[$69_1 >> 2] = 0;
        $58_1 = Math_fround($58_1 * Math_fround(Math_fround(Math_fround($49_1 * $44_1) + Math_fround($50_1 * $10_1)) + Math_fround($48_1 * $43_1)));
        $1870 = Math_fround($50_1 * $58_1);
        $50_1 = Math_fround($55_1 * Math_fround(Math_fround(Math_fround($44_1 * $52_1) + Math_fround($10_1 * $53_1)) + Math_fround($43_1 * $51_1)));
        $43_1 = Math_fround($54_1 * Math_fround(Math_fround(Math_fround($44_1 * $46_1) + Math_fround($10_1 * $45_1)) + Math_fround($43_1 * $47_1)));
        $10_1 = Math_fround(Math_fround($1870 + Math_fround($53_1 * $50_1)) + Math_fround($45_1 * $43_1));
        HEAPF32[$68_1 >> 2] = $10_1;
        $44_1 = Math_fround(Math_fround(Math_fround($49_1 * $58_1) + Math_fround($52_1 * $50_1)) + Math_fround($46_1 * $43_1));
        HEAPF32[$8_1 >> 2] = $44_1;
        $43_1 = Math_fround(Math_fround(Math_fround($48_1 * $58_1) + Math_fround($51_1 * $50_1)) + Math_fround($47_1 * $43_1));
        HEAPF32[$60_1 >> 2] = $43_1;
       }
       label$33 : {
        if (!((HEAPU8[($4_1 + 180 | 0) >> 0] | 0) & 1 | 0)) {
         break label$33
        }
        $54_1 = Math_fround(HEAPF32[($4_1 + 172 | 0) >> 2]);
        $47_1 = Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]);
        $46_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
        $45_1 = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
        $58_1 = Math_fround(HEAPF32[($4_1 + 164 | 0) >> 2]);
        $48_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
        $49_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
        $50_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
        $55_1 = Math_fround(HEAPF32[($4_1 + 168 | 0) >> 2]);
        $51_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
        $52_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
        $53_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
        HEAP32[$69_1 >> 2] = 0;
        $58_1 = Math_fround($58_1 * Math_fround(Math_fround(Math_fround($49_1 * $44_1) + Math_fround($50_1 * $10_1)) + Math_fround($48_1 * $43_1)));
        $1977 = Math_fround($50_1 * $58_1);
        $50_1 = Math_fround($55_1 * Math_fround(Math_fround(Math_fround($44_1 * $52_1) + Math_fround($10_1 * $53_1)) + Math_fround($43_1 * $51_1)));
        $10_1 = Math_fround($54_1 * Math_fround(Math_fround(Math_fround($44_1 * $46_1) + Math_fround($10_1 * $45_1)) + Math_fround($43_1 * $47_1)));
        HEAPF32[$68_1 >> 2] = Math_fround(Math_fround($1977 + Math_fround($53_1 * $50_1)) + Math_fround($45_1 * $10_1));
        HEAPF32[$8_1 >> 2] = Math_fround(Math_fround(Math_fround($49_1 * $58_1) + Math_fround($52_1 * $50_1)) + Math_fround($46_1 * $10_1));
        HEAPF32[$60_1 >> 2] = Math_fround(Math_fround(Math_fround($48_1 * $58_1) + Math_fround($51_1 * $50_1)) + Math_fround($47_1 * $10_1));
       }
       $10_1 = Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]);
       $827($0_1 | 0, $8_1 | 0, $6_1 | 0, $7_1 | 0, $40_1 | 0, $39_1 | 0, $3_1 + 64 | 0 | 0, $3_1 + 48 | 0 | 0, $3_1 | 0, $3_1 | 0, Math_fround($10_1), $2_1 | 0, Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0))) | 0;
       label$34 : {
        $8_1 = HEAP32[($2_1 + 72 | 0) >> 2] | 0;
        if (!($8_1 & 16 | 0)) {
         break label$34
        }
        label$35 : {
         if (!((HEAPU8[($5_1 + 180 | 0) >> 0] | 0) & 1 | 0)) {
          break label$35
         }
         $55_1 = Math_fround(HEAPF32[($5_1 + 172 | 0) >> 2]);
         $43_1 = Math_fround(HEAPF32[($5_1 + 44 | 0) >> 2]);
         $44_1 = Math_fround(HEAPF32[($5_1 + 12 | 0) >> 2]);
         $47_1 = Math_fround(HEAPF32[($5_1 + 28 | 0) >> 2]);
         $54_1 = Math_fround(HEAPF32[($5_1 + 164 | 0) >> 2]);
         $46_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
         $45_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
         $48_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
         $57_1 = Math_fround(HEAPF32[($5_1 + 168 | 0) >> 2]);
         $49_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
         $50_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
         $51_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
         HEAP32[($11_1 + 192 | 0) >> 2] = 0;
         $52_1 = Math_fround(HEAPF32[$42_1 >> 2]);
         $53_1 = Math_fround(HEAPF32[$56_1 >> 2]);
         $58_1 = Math_fround(HEAPF32[$41_1 >> 2]);
         $54_1 = Math_fround($54_1 * Math_fround(Math_fround(Math_fround($45_1 * $52_1) + Math_fround($48_1 * $53_1)) + Math_fround($46_1 * $58_1)));
         $2110 = Math_fround($45_1 * $54_1);
         $45_1 = Math_fround($57_1 * Math_fround(Math_fround(Math_fround($52_1 * $50_1) + Math_fround($53_1 * $51_1)) + Math_fround($58_1 * $49_1)));
         $2127 = Math_fround($2110 + Math_fround($50_1 * $45_1));
         $50_1 = Math_fround($55_1 * Math_fround(Math_fround(Math_fround($52_1 * $44_1) + Math_fround($53_1 * $47_1)) + Math_fround($58_1 * $43_1)));
         HEAPF32[$42_1 >> 2] = Math_fround($2127 + Math_fround($44_1 * $50_1));
         HEAPF32[$56_1 >> 2] = Math_fround(Math_fround(Math_fround($48_1 * $54_1) + Math_fround($51_1 * $45_1)) + Math_fround($47_1 * $50_1));
         HEAPF32[$41_1 >> 2] = Math_fround(Math_fround(Math_fround($46_1 * $54_1) + Math_fround($49_1 * $45_1)) + Math_fround($43_1 * $50_1));
        }
        label$36 : {
         if (!((HEAPU8[($4_1 + 180 | 0) >> 0] | 0) & 1 | 0)) {
          break label$36
         }
         $55_1 = Math_fround(HEAPF32[($4_1 + 172 | 0) >> 2]);
         $43_1 = Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]);
         $44_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
         $47_1 = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
         $54_1 = Math_fround(HEAPF32[($4_1 + 164 | 0) >> 2]);
         $46_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
         $45_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
         $48_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
         $57_1 = Math_fround(HEAPF32[($4_1 + 168 | 0) >> 2]);
         $49_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
         $50_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
         $51_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
         HEAP32[($11_1 + 192 | 0) >> 2] = 0;
         $52_1 = Math_fround(HEAPF32[$42_1 >> 2]);
         $53_1 = Math_fround(HEAPF32[$56_1 >> 2]);
         $58_1 = Math_fround(HEAPF32[$41_1 >> 2]);
         $54_1 = Math_fround($54_1 * Math_fround(Math_fround(Math_fround($45_1 * $52_1) + Math_fround($48_1 * $53_1)) + Math_fround($46_1 * $58_1)));
         $2221 = Math_fround($45_1 * $54_1);
         $45_1 = Math_fround($57_1 * Math_fround(Math_fround(Math_fround($52_1 * $50_1) + Math_fround($53_1 * $51_1)) + Math_fround($58_1 * $49_1)));
         $2238 = Math_fround($2221 + Math_fround($50_1 * $45_1));
         $50_1 = Math_fround($55_1 * Math_fround(Math_fround(Math_fround($52_1 * $44_1) + Math_fround($53_1 * $47_1)) + Math_fround($58_1 * $43_1)));
         HEAPF32[$42_1 >> 2] = Math_fround($2238 + Math_fround($44_1 * $50_1));
         HEAPF32[$56_1 >> 2] = Math_fround(Math_fround(Math_fround($48_1 * $54_1) + Math_fround($51_1 * $45_1)) + Math_fround($47_1 * $50_1));
         HEAPF32[$41_1 >> 2] = Math_fround(Math_fround(Math_fround($46_1 * $54_1) + Math_fround($49_1 * $45_1)) + Math_fround($43_1 * $50_1));
        }
        $827($0_1 | 0, $42_1 | 0, $6_1 | 0, $7_1 | 0, $40_1 | 0, $39_1 | 0, $3_1 + 64 | 0 | 0, $3_1 + 48 | 0 | 0, $3_1 | 0, $3_1 | 0, Math_fround($10_1), $2_1 | 0, Math_fround(Math_fround(0.0)), Math_fround(Math_fround(0.0))) | 0;
        $8_1 = HEAP32[($2_1 + 72 | 0) >> 2] | 0;
       }
       if (($8_1 & 80 | 0 | 0) != (80 | 0)) {
        break label$22
       }
       $11_1 = $11_1 + 124 | 0;
       HEAP32[$11_1 >> 2] = HEAP32[$11_1 >> 2] | 0 | 1 | 0;
       break label$22;
      }
      $10_1 = Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]);
      $8_1 = $11_1 + 156 | 0;
      $827($0_1 | 0, $11_1 + 164 | 0 | 0, $6_1 | 0, $7_1 | 0, $40_1 | 0, $39_1 | 0, $3_1 + 64 | 0 | 0, $3_1 + 48 | 0 | 0, $3_1 | 0, $3_1 | 0, Math_fround($10_1), $2_1 | 0, Math_fround(Math_fround(HEAPF32[($11_1 + 140 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[$8_1 >> 2]))) | 0;
      if (!((HEAPU8[($2_1 + 72 | 0) >> 0] | 0) & 16 | 0)) {
       break label$22
      }
      $827($0_1 | 0, $11_1 + 180 | 0 | 0, $6_1 | 0, $7_1 | 0, $40_1 | 0, $39_1 | 0, $3_1 + 64 | 0 | 0, $3_1 + 48 | 0 | 0, $3_1 | 0, $3_1 | 0, Math_fround($10_1), $2_1 | 0, Math_fround(Math_fround(HEAPF32[($11_1 + 144 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[$8_1 >> 2]))) | 0;
     }
     $833($0_1 | 0, $9_1 | 0, $6_1 | 0, $7_1 | 0, $39_1 | 0, $2_1 | 0);
     $9_1 = HEAP32[($1_1 + 780 | 0) >> 2] | 0;
    }
    $38_1 = $38_1 + 1 | 0;
    if (($38_1 | 0) < ($9_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  global$0 = $3_1 + 80 | 0;
 }
 
 function $835($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $834($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $3_1 | 0);
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $836($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12_1 = 0, $17_1 = 0, $16_1 = 0, $18_1 = 0, $15_1 = 0, i64toi32_i32$2 = 0, $14_1 = 0, $25_1 = Math_fround(0), $26_1 = Math_fround(0), $9_1 = 0, $13_1 = 0, $19_1 = Math_fround(0), $20_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $44_1 = Math_fround(0), $22_1 = Math_fround(0), $35_1 = 0, $21_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $29_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $47_1 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0), $30_1 = 0, $31_1 = 0, $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54_1 = Math_fround(0), $55_1 = Math_fround(0), $56_1 = Math_fround(0), $57_1 = Math_fround(0), $58_1 = Math_fround(0), $10_1 = 0, $131_1 = 0, $136_1 = 0, $145_1 = 0, $148_1 = 0, $157_1 = 0, $160_1 = 0, $167_1 = 0, $172_1 = 0, $237_1 = 0, $242_1 = 0, $246_1 = 0, $251_1 = 0, $255_1 = 0, $260_1 = 0, $264_1 = 0, $269_1 = 0, $527_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $928_1 = Math_fround(0), $935_1 = Math_fround(0), $1020_1 = Math_fround(0), $1027_1 = Math_fround(0), $1146_1 = Math_fround(0), $59_1 = Math_fround(0), $60_1 = Math_fround(0), $61_1 = Math_fround(0), $62_1 = Math_fround(0), $63_1 = Math_fround(0), $64_1 = Math_fround(0), $65_1 = Math_fround(0), $66_1 = Math_fround(0), $67_1 = Math_fround(0), $68_1 = Math_fround(0), $69_1 = Math_fround(0), $70_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $9_1 = global$0 - 256 | 0;
  global$0 = $9_1;
  HEAP32[($0_1 + 188 | 0) >> 2] = -1;
  $10_1 = $616($9_1 + 248 | 0 | 0, 20232 | 0) | 0;
  label$1 : {
   $11_1 = HEAP32[($7_1 + 72 | 0) >> 2] | 0;
   if (($11_1 | 0) == (HEAP32[($0_1 + 224 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   HEAP32[($0_1 + 224 | 0) >> 2] = $11_1;
   HEAP32[($0_1 + 220 | 0) >> 2] = 536;
   HEAP32[($0_1 + 216 | 0) >> 2] = 535;
   HEAP32[($0_1 + 212 | 0) >> 2] = 534;
  }
  HEAP32[($0_1 + 184 | 0) >> 2] = 0;
  label$2 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$2
   }
   $11_1 = $1_1;
   $12_1 = $2_1;
   label$3 : while (1) {
    HEAP32[((HEAP32[$11_1 >> 2] | 0) + 212 | 0) >> 2] = -1;
    $11_1 = $11_1 + 4 | 0;
    $12_1 = $12_1 + -1 | 0;
    if ($12_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   $13_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($13_1 | 0) > ($2_1 | 0)) {
    break label$4
   }
   label$5 : {
    label$6 : {
     $13_1 = $2_1 + 1 | 0;
     if ($13_1) {
      break label$6
     }
     $14_1 = 0;
     break label$5;
    }
    $14_1 = $79(Math_imul($13_1, 244) | 0, 16 | 0) | 0;
   }
   label$7 : {
    $15_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($15_1 | 0) < (1 | 0)) {
     break label$7
    }
    $16_1 = 64;
    label$8 : while (1) {
     $11_1 = $14_1 + $16_1 | 0;
     $17_1 = $11_1 + -64 | 0;
     $12_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $16_1 | 0;
     $18_1 = $12_1 + -64 | 0;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$0 = HEAP32[$18_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($18_1 + 4 | 0) >> 2] | 0;
     $131_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $17_1;
     HEAP32[i64toi32_i32$0 >> 2] = $131_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $18_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $136_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $17_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $136_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $17_1 = $11_1 + -48 | 0;
     $18_1 = $12_1 + -48 | 0;
     i64toi32_i32$2 = $18_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $145_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $17_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $145_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = HEAP32[$18_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($18_1 + 4 | 0) >> 2] | 0;
     $148_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $17_1;
     HEAP32[i64toi32_i32$1 >> 2] = $148_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $17_1 = $11_1 + -32 | 0;
     $18_1 = $12_1 + -32 | 0;
     i64toi32_i32$2 = $18_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $157_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $17_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $157_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = HEAP32[$18_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($18_1 + 4 | 0) >> 2] | 0;
     $160_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $17_1;
     HEAP32[i64toi32_i32$1 >> 2] = $160_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $17_1 = $11_1 + -16 | 0;
     $18_1 = $12_1 + -16 | 0;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$0 = HEAP32[$18_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($18_1 + 4 | 0) >> 2] | 0;
     $167_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $17_1;
     HEAP32[i64toi32_i32$0 >> 2] = $167_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $18_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $172_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $17_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $172_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $7($11_1 | 0, $12_1 | 0, 180 | 0) | 0;
     $16_1 = $16_1 + 244 | 0;
     $15_1 = $15_1 + -1 | 0;
     if ($15_1) {
      continue label$8
     }
     break label$8;
    };
   }
   label$9 : {
    $11_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$9
    }
    label$10 : {
     if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
      break label$10
     }
     $80($11_1 | 0);
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = $14_1;
   HEAP32[($0_1 + 12 | 0) >> 2] = $13_1;
   HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  }
  $18_1 = $17($9_1 | 0, 0 | 0, 244 | 0) | 0;
  label$11 : {
   $12_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (($12_1 | 0) > (-1 | 0)) {
    break label$11
   }
   label$12 : {
    if (($13_1 | 0) > (-1 | 0)) {
     break label$12
    }
    label$13 : {
     $11_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     if (!$11_1) {
      break label$13
     }
     label$14 : {
      if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
       break label$14
      }
      $80($11_1 | 0);
     }
     HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    }
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($0_1 + 20 | 0) >> 0] = 1;
   }
   $16_1 = Math_imul($12_1, 244);
   $13_1 = $18_1 + 64 | 0;
   $15_1 = $18_1 + 48 | 0;
   $17_1 = $18_1 + 32 | 0;
   $14_1 = $18_1 + 16 | 0;
   label$15 : while (1) {
    $11_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $16_1 | 0;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$0 = HEAP32[$18_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($18_1 + 4 | 0) >> 2] | 0;
    $237_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $11_1;
    HEAP32[$11_1 >> 2] = $237_1;
    HEAP32[($11_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $18_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $242_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $11_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $242_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $246_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $11_1 + 16 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $246_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $251_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $11_1 + 24 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $251_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $17_1;
    i64toi32_i32$0 = HEAP32[$17_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($17_1 + 4 | 0) >> 2] | 0;
    $255_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $11_1 + 32 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $255_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $17_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $260_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $11_1 + 40 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $260_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $15_1;
    i64toi32_i32$0 = HEAP32[$15_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($15_1 + 4 | 0) >> 2] | 0;
    $264_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $11_1 + 48 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $264_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $15_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $269_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $11_1 + 56 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $269_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $7($11_1 + 64 | 0 | 0, $13_1 | 0, 180 | 0) | 0;
    $16_1 = $16_1 + 244 | 0;
    $11_1 = $12_1 + 1 | 0;
    $9_1 = $11_1 >>> 0 >= $12_1 >>> 0;
    $12_1 = $11_1;
    if ($9_1) {
     continue label$15
    }
    break label$15;
   };
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  label$16 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$16
   }
   label$17 : while (1) {
    $12_1 = $830($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]))) | 0;
    label$18 : {
     $11_1 = HEAP32[$1_1 >> 2] | 0;
     if (!$11_1) {
      break label$18
     }
     if (!((HEAP32[($11_1 + 252 | 0) >> 2] | 0) & 2 | 0)) {
      break label$18
     }
     if (Math_fround(HEAPF32[($11_1 + 404 | 0) >> 2]) == Math_fround(0.0)) {
      break label$18
     }
     $15_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     label$19 : {
      $16_1 = HEAP32[($11_1 + 564 | 0) >> 2] | 0;
      if (!($16_1 & 2 | 0)) {
       break label$19
      }
      $809($18_1 | 0, $11_1 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 84 | 0) >> 2])));
      $19_1 = Math_fround(HEAPF32[($11_1 + 364 | 0) >> 2]);
      $20_1 = Math_fround(HEAPF32[($11_1 + 332 | 0) >> 2]);
      $21_1 = Math_fround(HEAPF32[($11_1 + 348 | 0) >> 2]);
      $22_1 = Math_fround(HEAPF32[($11_1 + 360 | 0) >> 2]);
      $23_1 = Math_fround(HEAPF32[($11_1 + 328 | 0) >> 2]);
      $24_1 = Math_fround(HEAPF32[($11_1 + 344 | 0) >> 2]);
      $16_1 = $15_1 + Math_imul($12_1, 244) | 0;
      $25_1 = Math_fround(HEAPF32[$18_1 >> 2]);
      $26_1 = Math_fround(HEAPF32[($18_1 + 4 | 0) >> 2]);
      $27_1 = Math_fround(HEAPF32[($18_1 + 8 | 0) >> 2]);
      $28_1 = Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]);
      HEAPF32[($16_1 + 224 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($16_1 + 224 | 0) >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($25_1 * Math_fround(HEAPF32[($11_1 + 324 | 0) >> 2])) + Math_fround($26_1 * Math_fround(HEAPF32[($11_1 + 340 | 0) >> 2]))) + Math_fround($27_1 * Math_fround(HEAPF32[($11_1 + 356 | 0) >> 2]))) * $28_1));
      $17_1 = $16_1 + 228 | 0;
      HEAPF32[$17_1 >> 2] = Math_fround(Math_fround(HEAPF32[$17_1 >> 2]) - Math_fround($28_1 * Math_fround(Math_fround(Math_fround($25_1 * $23_1) + Math_fround($26_1 * $24_1)) + Math_fround($27_1 * $22_1))));
      $16_1 = $16_1 + 232 | 0;
      HEAPF32[$16_1 >> 2] = Math_fround(Math_fround(HEAPF32[$16_1 >> 2]) - Math_fround($28_1 * Math_fround(Math_fround(Math_fround($25_1 * $20_1) + Math_fround($26_1 * $21_1)) + Math_fround($27_1 * $19_1))));
      $16_1 = HEAP32[($11_1 + 564 | 0) >> 2] | 0;
     }
     label$20 : {
      if (!($16_1 & 4 | 0)) {
       break label$20
      }
      $811($18_1 | 0, $11_1 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2])));
      $25_1 = Math_fround(HEAPF32[($18_1 + 8 | 0) >> 2]);
      $26_1 = Math_fround(HEAPF32[($18_1 + 4 | 0) >> 2]);
      $16_1 = $15_1 + Math_imul($12_1, 244) | 0;
      HEAPF32[($16_1 + 224 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$18_1 >> 2]) + Math_fround(HEAPF32[($16_1 + 224 | 0) >> 2]));
      $17_1 = $16_1 + 228 | 0;
      HEAPF32[$17_1 >> 2] = Math_fround($26_1 + Math_fround(HEAPF32[$17_1 >> 2]));
      $16_1 = $16_1 + 232 | 0;
      HEAPF32[$16_1 >> 2] = Math_fround($25_1 + Math_fround(HEAPF32[$16_1 >> 2]));
      $16_1 = HEAP32[($11_1 + 564 | 0) >> 2] | 0;
     }
     if (!($16_1 & 8 | 0)) {
      break label$18
     }
     $810($18_1 | 0, $11_1 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2])));
     $25_1 = Math_fround(HEAPF32[($18_1 + 8 | 0) >> 2]);
     $26_1 = Math_fround(HEAPF32[($18_1 + 4 | 0) >> 2]);
     $11_1 = $15_1 + Math_imul($12_1, 244) | 0;
     HEAPF32[($11_1 + 224 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$18_1 >> 2]) + Math_fround(HEAPF32[($11_1 + 224 | 0) >> 2]));
     $12_1 = $11_1 + 228 | 0;
     HEAPF32[$12_1 >> 2] = Math_fround($26_1 + Math_fround(HEAPF32[$12_1 >> 2]));
     $11_1 = $11_1 + 232 | 0;
     HEAPF32[$11_1 >> 2] = Math_fround($25_1 + Math_fround(HEAPF32[$11_1 >> 2]));
    }
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$17
    }
    break label$17;
   };
  }
  label$21 : {
   if (($6_1 | 0) < (1 | 0)) {
    break label$21
   }
   $11_1 = $5_1;
   $12_1 = $6_1;
   label$22 : while (1) {
    $1_1 = HEAP32[$11_1 >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1);
    HEAP32[($1_1 + 36 | 0) >> 2] = 0;
    $11_1 = $11_1 + 4 | 0;
    $12_1 = $12_1 + -1 | 0;
    if ($12_1) {
     continue label$22
    }
    break label$22;
   };
  }
  label$23 : {
   $1_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
   if (($1_1 | 0) >= ($6_1 | 0)) {
    break label$23
   }
   if ((HEAP32[($0_1 + 172 | 0) >> 2] | 0 | 0) >= ($6_1 | 0)) {
    break label$23
   }
   label$24 : {
    label$25 : {
     if ($6_1) {
      break label$25
     }
     $12_1 = 0;
     break label$24;
    }
    $12_1 = $79($6_1 << 3 | 0 | 0, 16 | 0) | 0;
    $1_1 = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
   }
   label$26 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$26
    }
    $11_1 = 0;
    label$27 : while (1) {
     i64toi32_i32$2 = (HEAP32[($0_1 + 176 | 0) >> 2] | 0) + $11_1 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $527_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $12_1 + $11_1 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $527_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $11_1 = $11_1 + 8 | 0;
     $1_1 = $1_1 + -1 | 0;
     if ($1_1) {
      continue label$27
     }
     break label$27;
    };
   }
   label$28 : {
    $11_1 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$28
    }
    label$29 : {
     if (!(HEAPU8[($0_1 + 180 | 0) >> 0] | 0)) {
      break label$29
     }
     $80($11_1 | 0);
    }
    HEAP32[($0_1 + 176 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 176 | 0) >> 2] = $12_1;
   HEAP32[($0_1 + 172 | 0) >> 2] = $6_1;
   HEAP8[($0_1 + 180 | 0) >> 0] = 1;
  }
  HEAP32[($0_1 + 168 | 0) >> 2] = $6_1;
  label$30 : {
   label$31 : {
    if (($6_1 | 0) >= (1 | 0)) {
     break label$31
    }
    $16_1 = 0;
    break label$30;
   }
   $2_1 = 0;
   $12_1 = $5_1;
   $15_1 = $6_1;
   $16_1 = 0;
   label$32 : while (1) {
    $17_1 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
    label$33 : {
     $1_1 = HEAP32[$12_1 >> 2] | 0;
     $11_1 = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
     if (!$11_1) {
      break label$33
     }
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$1 = 0;
     HEAP32[$11_1 >> 2] = 0;
     HEAP32[($11_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $11_1 + 56 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $11_1 + 48 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $11_1 + 40 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $11_1 + 32 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $11_1 + 24 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $11_1 + 16 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $11_1 + 8 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $1_1 = HEAP32[$12_1 >> 2] | 0;
    }
    $11_1 = $17_1 + $2_1 | 0;
    label$34 : {
     label$35 : {
      if (!(HEAPU8[($1_1 + 20 | 0) >> 0] | 0)) {
       break label$35
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($1_1, $11_1);
      $11_1 = HEAP32[$11_1 >> 2] | 0;
      break label$34;
     }
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$1 = 0;
     HEAP32[$11_1 >> 2] = 0;
     HEAP32[($11_1 + 4 | 0) >> 2] = i64toi32_i32$1;
     $11_1 = 0;
    }
    $2_1 = $2_1 + 8 | 0;
    $12_1 = $12_1 + 4 | 0;
    $16_1 = $11_1 + $16_1 | 0;
    $15_1 = $15_1 + -1 | 0;
    if ($15_1) {
     continue label$32
    }
    break label$32;
   };
  }
  label$36 : {
   $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if (($1_1 | 0) >= ($16_1 | 0)) {
    break label$36
   }
   if ((HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0) >= ($16_1 | 0)) {
    break label$36
   }
   label$37 : {
    label$38 : {
     if ($16_1) {
      break label$38
     }
     $12_1 = 0;
     break label$37;
    }
    $12_1 = $79(Math_imul($16_1, 152) | 0, 16 | 0) | 0;
    $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   }
   label$39 : {
    if (($1_1 | 0) < (1 | 0)) {
     break label$39
    }
    $11_1 = 0;
    label$40 : while (1) {
     $7($12_1 + $11_1 | 0 | 0, (HEAP32[($0_1 + 56 | 0) >> 2] | 0) + $11_1 | 0 | 0, 152 | 0) | 0;
     $11_1 = $11_1 + 152 | 0;
     $1_1 = $1_1 + -1 | 0;
     if ($1_1) {
      continue label$40
     }
     break label$40;
    };
   }
   label$41 : {
    $11_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$11_1) {
     break label$41
    }
    label$42 : {
     if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
      break label$42
     }
     $80($11_1 | 0);
    }
    HEAP32[($0_1 + 56 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 56 | 0) >> 2] = $12_1;
   HEAP32[($0_1 + 52 | 0) >> 2] = $16_1;
   HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  }
  HEAP32[($0_1 + 48 | 0) >> 2] = $16_1;
  label$43 : {
   if (($6_1 | 0) < (1 | 0)) {
    break label$43
   }
   $11_1 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
   $29_1 = 0;
   $30_1 = 0;
   label$44 : while (1) {
    label$45 : {
     $31_1 = $29_1 << 3 | 0;
     $15_1 = $11_1 + $31_1 | 0;
     if (!(HEAP32[$15_1 >> 2] | 0)) {
      break label$45
     }
     $14_1 = $5_1 + ($29_1 << 2 | 0) | 0;
     $16_1 = HEAP32[$14_1 >> 2] | 0;
     $1_1 = HEAP32[($16_1 + 32 | 0) >> 2] | 0;
     $32_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     $12_1 = HEAP32[($16_1 + 28 | 0) >> 2] | 0;
     $17_1 = $830($0_1 | 0, $12_1 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]))) | 0;
     $9_1 = $830($0_1 | 0, $1_1 | 0, Math_fround(Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]))) | 0;
     $33_1 = Math_imul($30_1, 152);
     $34_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     label$46 : {
      $11_1 = HEAP32[($16_1 + 24 | 0) >> 2] | 0;
      $13_1 = (wasm2js_i32$0 = $11_1, wasm2js_i32$1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0, wasm2js_i32$2 = ($11_1 | 0) > (0 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      if (($13_1 | 0) <= (HEAP32[($0_1 + 184 | 0) >> 2] | 0 | 0)) {
       break label$46
      }
      HEAP32[($0_1 + 184 | 0) >> 2] = $13_1;
     }
     $35_1 = $32_1 + $33_1 | 0;
     label$47 : {
      if ((HEAP32[$15_1 >> 2] | 0 | 0) < (1 | 0)) {
       break label$47
      }
      $2_1 = 0;
      $11_1 = $35_1;
      label$48 : while (1) {
       $11_1 = $17($11_1 | 0, 0 | 0, 152 | 0) | 0;
       i64toi32_i32$0 = $11_1 + 120 | 0;
       i64toi32_i32$1 = 2139095039;
       HEAP32[i64toi32_i32$0 >> 2] = -8388609;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($11_1 + 148 | 0) >> 2] = $9_1;
       HEAP32[($11_1 + 144 | 0) >> 2] = $17_1;
       i64toi32_i32$0 = $11_1 + 96 | 0;
       i64toi32_i32$1 = 0;
       HEAP32[i64toi32_i32$0 >> 2] = 0;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($11_1 + 136 | 0) >> 2] = $13_1;
       $11_1 = $11_1 + 152 | 0;
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) < (HEAP32[$15_1 >> 2] | 0 | 0)) {
        continue label$48
       }
       break label$48;
      };
     }
     $2_1 = $34_1 + Math_imul($17_1, 244) | 0;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$0 + 152 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1 + 160 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1 + 168 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$0 + 88 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1 + 80 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1 + 72 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $17_1 = $34_1 + Math_imul($9_1, 244) | 0;
     i64toi32_i32$0 = $17_1;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$0 + 152 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $17_1 + 160 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $17_1 + 168 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $17_1;
     i64toi32_i32$1 = 0;
     HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$0 + 72 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $17_1 + 80 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$0 = $17_1 + 88 | 0;
     i64toi32_i32$1 = 0;
     HEAP32[i64toi32_i32$0 >> 2] = 0;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[($35_1 + 116 | 0) >> 2] = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
     HEAP32[($18_1 + 28 | 0) >> 2] = $35_1 + 112 | 0;
     HEAP32[($18_1 + 24 | 0) >> 2] = 38;
     HEAP32[($18_1 + 20 | 0) >> 2] = $35_1 + 32 | 0;
     HEAP32[($18_1 + 16 | 0) >> 2] = $35_1 + 48 | 0;
     HEAP32[($18_1 + 12 | 0) >> 2] = $35_1;
     HEAP32[($18_1 + 8 | 0) >> 2] = $35_1 + 16 | 0;
     HEAP32[($18_1 + 40 | 0) >> 2] = $35_1 + 124 | 0;
     HEAP32[($18_1 + 36 | 0) >> 2] = $35_1 + 120 | 0;
     HEAP32[($18_1 + 32 | 0) >> 2] = $35_1 + 116 | 0;
     HEAP32[($18_1 + 4 | 0) >> 2] = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
     HEAP32[($18_1 + 48 | 0) >> 2] = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
     HEAPF32[$18_1 >> 2] = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[($7_1 + 12 | 0) >> 2]));
     HEAP32[($18_1 + 44 | 0) >> 2] = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
     $11_1 = HEAP32[$14_1 >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$11_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($11_1, $18_1);
     label$49 : {
      if ((HEAP32[$15_1 >> 2] | 0 | 0) < (1 | 0)) {
       break label$49
      }
      $11_1 = ($32_1 + $33_1 | 0) + 132 | 0;
      $35_1 = $17_1 + 232 | 0;
      $34_1 = $17_1 + 228 | 0;
      $32_1 = $17_1 + 224 | 0;
      $33_1 = $17_1 + 216 | 0;
      $36_1 = $17_1 + 212 | 0;
      $37_1 = $17_1 + 208 | 0;
      $9_1 = $17_1 + 240 | 0;
      $38_1 = $2_1 + 232 | 0;
      $39_1 = $2_1 + 228 | 0;
      $40_1 = $2_1 + 224 | 0;
      $41_1 = $2_1 + 216 | 0;
      $42_1 = $2_1 + 212 | 0;
      $43_1 = $2_1 + 208 | 0;
      $13_1 = $2_1 + 240 | 0;
      $17_1 = 0;
      label$50 : while (1) {
       label$51 : {
        $2_1 = $11_1 + -8 | 0;
        $25_1 = Math_fround(HEAPF32[((HEAP32[$14_1 >> 2] | 0) + 16 | 0) >> 2]);
        if (Math_fround(HEAPF32[$2_1 >> 2]) >= $25_1 ^ 1 | 0) {
         break label$51
        }
        HEAPF32[$2_1 >> 2] = $25_1;
       }
       label$52 : {
        $2_1 = $11_1 + -12 | 0;
        $25_1 = Math_fround(-$25_1);
        if (Math_fround(HEAPF32[$2_1 >> 2]) <= $25_1 ^ 1 | 0) {
         break label$52
        }
        HEAPF32[$2_1 >> 2] = $25_1;
       }
       HEAP32[$11_1 >> 2] = $16_1;
       $2_1 = HEAP32[($16_1 + 28 | 0) >> 2] | 0;
       $28_1 = Math_fround(HEAPF32[($2_1 + 328 | 0) >> 2]);
       $19_1 = Math_fround(HEAPF32[($2_1 + 332 | 0) >> 2]);
       $20_1 = Math_fround(HEAPF32[($2_1 + 608 | 0) >> 2]);
       $21_1 = Math_fround(HEAPF32[($2_1 + 348 | 0) >> 2]);
       $22_1 = Math_fround(HEAPF32[($2_1 + 340 | 0) >> 2]);
       $23_1 = Math_fround(HEAPF32[($2_1 + 344 | 0) >> 2]);
       $24_1 = Math_fround(HEAPF32[($2_1 + 612 | 0) >> 2]);
       $44_1 = Math_fround(HEAPF32[($2_1 + 364 | 0) >> 2]);
       $26_1 = Math_fround(HEAPF32[($2_1 + 356 | 0) >> 2]);
       $27_1 = Math_fround(HEAPF32[($2_1 + 360 | 0) >> 2]);
       $45_1 = Math_fround(HEAPF32[($2_1 + 604 | 0) >> 2]);
       $46_1 = Math_fround(HEAPF32[($2_1 + 324 | 0) >> 2]);
       HEAP32[($11_1 + -56 | 0) >> 2] = 0;
       $25_1 = Math_fround(HEAPF32[($11_1 + -132 | 0) >> 2]);
       $928_1 = Math_fround($26_1 * $25_1);
       $26_1 = Math_fround(HEAPF32[($11_1 + -128 | 0) >> 2]);
       $935_1 = Math_fround($928_1 + Math_fround($27_1 * $26_1));
       $27_1 = Math_fround(HEAPF32[($11_1 + -124 | 0) >> 2]);
       HEAPF32[($11_1 + -60 | 0) >> 2] = Math_fround($24_1 * Math_fround($935_1 + Math_fround($44_1 * $27_1)));
       HEAPF32[($11_1 + -64 | 0) >> 2] = Math_fround($20_1 * Math_fround(Math_fround(Math_fround($25_1 * $22_1) + Math_fround($26_1 * $23_1)) + Math_fround($27_1 * $21_1)));
       HEAPF32[($11_1 + -68 | 0) >> 2] = Math_fround($45_1 * Math_fround(Math_fround(Math_fround($46_1 * $25_1) + Math_fround($28_1 * $26_1)) + Math_fround($19_1 * $27_1)));
       $2_1 = HEAP32[($16_1 + 32 | 0) >> 2] | 0;
       $21_1 = Math_fround(HEAPF32[($2_1 + 328 | 0) >> 2]);
       $22_1 = Math_fround(HEAPF32[($2_1 + 332 | 0) >> 2]);
       $23_1 = Math_fround(HEAPF32[($2_1 + 608 | 0) >> 2]);
       $24_1 = Math_fround(HEAPF32[($2_1 + 348 | 0) >> 2]);
       $44_1 = Math_fround(HEAPF32[($2_1 + 340 | 0) >> 2]);
       $45_1 = Math_fround(HEAPF32[($2_1 + 344 | 0) >> 2]);
       $46_1 = Math_fround(HEAPF32[($2_1 + 612 | 0) >> 2]);
       $47_1 = Math_fround(HEAPF32[($2_1 + 364 | 0) >> 2]);
       $19_1 = Math_fround(HEAPF32[($2_1 + 356 | 0) >> 2]);
       $20_1 = Math_fround(HEAPF32[($2_1 + 360 | 0) >> 2]);
       $48_1 = Math_fround(HEAPF32[($2_1 + 604 | 0) >> 2]);
       $49_1 = Math_fround(HEAPF32[($2_1 + 324 | 0) >> 2]);
       HEAP32[($11_1 + -40 | 0) >> 2] = 0;
       $28_1 = Math_fround(HEAPF32[($11_1 + -100 | 0) >> 2]);
       $1020_1 = Math_fround($19_1 * $28_1);
       $19_1 = Math_fround(HEAPF32[($11_1 + -96 | 0) >> 2]);
       $1027_1 = Math_fround($1020_1 + Math_fround($20_1 * $19_1));
       $20_1 = Math_fround(HEAPF32[($11_1 + -92 | 0) >> 2]);
       HEAPF32[($11_1 + -44 | 0) >> 2] = Math_fround($46_1 * Math_fround($1027_1 + Math_fround($47_1 * $20_1)));
       HEAPF32[($11_1 + -48 | 0) >> 2] = Math_fround($23_1 * Math_fround(Math_fround(Math_fround($28_1 * $44_1) + Math_fround($19_1 * $45_1)) + Math_fround($20_1 * $24_1)));
       HEAPF32[($11_1 + -52 | 0) >> 2] = Math_fround($48_1 * Math_fround(Math_fround(Math_fround($49_1 * $28_1) + Math_fround($21_1 * $19_1)) + Math_fround($22_1 * $20_1)));
       $47_1 = Math_fround(0.0);
       $21_1 = Math_fround(HEAPF32[($11_1 + -116 | 0) >> 2]);
       $22_1 = Math_fround(HEAPF32[($12_1 + 404 | 0) >> 2]);
       $23_1 = Math_fround(HEAPF32[($11_1 + -112 | 0) >> 2]);
       $24_1 = Math_fround(HEAPF32[($11_1 + -108 | 0) >> 2]);
       $1146_1 = Math_fround(Math_fround(Math_fround(Math_fround($21_1 * Math_fround($21_1 * $22_1)) + Math_fround($23_1 * Math_fround($22_1 * $23_1))) + Math_fround($24_1 * Math_fround($22_1 * $24_1))) + Math_fround(Math_fround(Math_fround($25_1 * Math_fround(Math_fround(Math_fround($25_1 * Math_fround(HEAPF32[($12_1 + 324 | 0) >> 2])) + Math_fround($26_1 * Math_fround(HEAPF32[($12_1 + 328 | 0) >> 2]))) + Math_fround($27_1 * Math_fround(HEAPF32[($12_1 + 332 | 0) >> 2])))) + Math_fround($26_1 * Math_fround(Math_fround(Math_fround($25_1 * Math_fround(HEAPF32[($12_1 + 340 | 0) >> 2])) + Math_fround($26_1 * Math_fround(HEAPF32[($12_1 + 344 | 0) >> 2]))) + Math_fround($27_1 * Math_fround(HEAPF32[($12_1 + 348 | 0) >> 2]))))) + Math_fround($27_1 * Math_fround(Math_fround(Math_fround($25_1 * Math_fround(HEAPF32[($12_1 + 356 | 0) >> 2])) + Math_fround($26_1 * Math_fround(HEAPF32[($12_1 + 360 | 0) >> 2]))) + Math_fround($27_1 * Math_fround(HEAPF32[($12_1 + 364 | 0) >> 2]))))));
       $22_1 = Math_fround(HEAPF32[($11_1 + -84 | 0) >> 2]);
       $44_1 = Math_fround(HEAPF32[($1_1 + 404 | 0) >> 2]);
       $45_1 = Math_fround(HEAPF32[($11_1 + -80 | 0) >> 2]);
       $46_1 = Math_fround(HEAPF32[($11_1 + -76 | 0) >> 2]);
       $44_1 = Math_fround(Math_fround($1146_1 + Math_fround(Math_fround(Math_fround($22_1 * Math_fround($22_1 * $44_1)) + Math_fround($45_1 * Math_fround($44_1 * $45_1))) + Math_fround($46_1 * Math_fround($44_1 * $46_1)))) + Math_fround(Math_fround(Math_fround($28_1 * Math_fround(Math_fround(Math_fround($28_1 * Math_fround(HEAPF32[($1_1 + 324 | 0) >> 2])) + Math_fround($19_1 * Math_fround(HEAPF32[($1_1 + 328 | 0) >> 2]))) + Math_fround($20_1 * Math_fround(HEAPF32[($1_1 + 332 | 0) >> 2])))) + Math_fround($19_1 * Math_fround(Math_fround(Math_fround($28_1 * Math_fround(HEAPF32[($1_1 + 340 | 0) >> 2])) + Math_fround($19_1 * Math_fround(HEAPF32[($1_1 + 344 | 0) >> 2]))) + Math_fround($20_1 * Math_fround(HEAPF32[($1_1 + 348 | 0) >> 2]))))) + Math_fround($20_1 * Math_fround(Math_fround(Math_fround($28_1 * Math_fround(HEAPF32[($1_1 + 356 | 0) >> 2])) + Math_fround($19_1 * Math_fround(HEAPF32[($1_1 + 360 | 0) >> 2]))) + Math_fround($20_1 * Math_fround(HEAPF32[($1_1 + 364 | 0) >> 2]))))));
       $44_1 = Math_fround(Math_abs($44_1)) > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_fround(1.0) / $44_1) : Math_fround(0.0);
       HEAPF32[($11_1 + -24 | 0) >> 2] = $44_1;
       $48_1 = Math_fround(0.0);
       $49_1 = Math_fround(0.0);
       $50_1 = Math_fround(0.0);
       $51_1 = Math_fround(0.0);
       $52_1 = Math_fround(0.0);
       $53_1 = Math_fround(0.0);
       label$53 : {
        if (!(HEAP32[$13_1 >> 2] | 0)) {
         break label$53
        }
        $53_1 = Math_fround(HEAPF32[$38_1 >> 2]);
        $52_1 = Math_fround(HEAPF32[$39_1 >> 2]);
        $51_1 = Math_fround(HEAPF32[$40_1 >> 2]);
        $48_1 = Math_fround(HEAPF32[$41_1 >> 2]);
        $49_1 = Math_fround(HEAPF32[$42_1 >> 2]);
        $50_1 = Math_fround(HEAPF32[$43_1 >> 2]);
       }
       $54_1 = Math_fround(0.0);
       $55_1 = Math_fround(0.0);
       $56_1 = Math_fround(0.0);
       $57_1 = Math_fround(0.0);
       $58_1 = Math_fround(0.0);
       label$54 : {
        if (!(HEAP32[$9_1 >> 2] | 0)) {
         break label$54
        }
        $58_1 = Math_fround(HEAPF32[$35_1 >> 2]);
        $57_1 = Math_fround(HEAPF32[$34_1 >> 2]);
        $56_1 = Math_fround(HEAPF32[$32_1 >> 2]);
        $47_1 = Math_fround(HEAPF32[$33_1 >> 2]);
        $54_1 = Math_fround(HEAPF32[$36_1 >> 2]);
        $55_1 = Math_fround(HEAPF32[$37_1 >> 2]);
       }
       $59_1 = Math_fround(HEAPF32[($12_1 + 380 | 0) >> 2]);
       $60_1 = Math_fround(HEAPF32[($12_1 + 372 | 0) >> 2]);
       $61_1 = Math_fround(HEAPF32[($12_1 + 376 | 0) >> 2]);
       $62_1 = Math_fround(HEAPF32[($12_1 + 396 | 0) >> 2]);
       $63_1 = Math_fround(HEAPF32[($12_1 + 388 | 0) >> 2]);
       $64_1 = Math_fround(HEAPF32[($12_1 + 392 | 0) >> 2]);
       $65_1 = Math_fround(HEAPF32[($1_1 + 380 | 0) >> 2]);
       $66_1 = Math_fround(HEAPF32[($1_1 + 372 | 0) >> 2]);
       $67_1 = Math_fround(HEAPF32[($1_1 + 376 | 0) >> 2]);
       $68_1 = Math_fround(HEAPF32[($1_1 + 396 | 0) >> 2]);
       $69_1 = Math_fround(HEAPF32[($1_1 + 388 | 0) >> 2]);
       $70_1 = Math_fround(HEAPF32[($1_1 + 392 | 0) >> 2]);
       HEAP32[($11_1 + -32 | 0) >> 2] = 0;
       $2_1 = $11_1 + -20 | 0;
       HEAPF32[$2_1 >> 2] = Math_fround(Math_fround($44_1 * Math_fround(HEAPF32[$2_1 >> 2])) + Math_fround($44_1 * Math_fround(Math_fround(0.0) - Math_fround(Math_fround(HEAPF32[($18_1 + 48 | 0) >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($21_1 * Math_fround($50_1 + $60_1)) + Math_fround($23_1 * Math_fround($49_1 + $61_1))) + Math_fround($24_1 * Math_fround($48_1 + $59_1))) + Math_fround(Math_fround(Math_fround($25_1 * Math_fround($51_1 + $63_1)) + Math_fround($26_1 * Math_fround($52_1 + $64_1))) + Math_fround($27_1 * Math_fround($53_1 + $62_1)))) + Math_fround(Math_fround(Math_fround(Math_fround($22_1 * Math_fround($55_1 + $66_1)) + Math_fround($45_1 * Math_fround($54_1 + $67_1))) + Math_fround($46_1 * Math_fround($47_1 + $65_1))) + Math_fround(Math_fround(Math_fround($28_1 * Math_fround($56_1 + $69_1)) + Math_fround($19_1 * Math_fround($57_1 + $70_1))) + Math_fround($20_1 * Math_fround($58_1 + $68_1)))))))));
       $11_1 = $11_1 + 152 | 0;
       $17_1 = $17_1 + 1 | 0;
       if (($17_1 | 0) < (HEAP32[$15_1 >> 2] | 0 | 0)) {
        continue label$50
       }
       break label$50;
      };
     }
     $11_1 = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
    }
    $30_1 = (HEAP32[($11_1 + $31_1 | 0) >> 2] | 0) + $30_1 | 0;
    $29_1 = $29_1 + 1 | 0;
    if (($29_1 | 0) != ($6_1 | 0)) {
     continue label$44
    }
    break label$44;
   };
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $3_1, $4_1, $7_1);
  $12_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  label$55 : {
   $15_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
   $16_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if (($15_1 | 0) >= ($16_1 | 0)) {
    break label$55
   }
   if ((HEAP32[($0_1 + 132 | 0) >> 2] | 0 | 0) >= ($16_1 | 0)) {
    break label$55
   }
   label$56 : {
    label$57 : {
     if ($16_1) {
      break label$57
     }
     $17_1 = 0;
     break label$56;
    }
    $17_1 = $79($16_1 << 2 | 0 | 0, 16 | 0) | 0;
    $15_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
   }
   $14_1 = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
   label$58 : {
    label$59 : {
     label$60 : {
      if (($15_1 | 0) < (1 | 0)) {
       break label$60
      }
      $11_1 = $17_1;
      $1_1 = $14_1;
      label$61 : while (1) {
       HEAP32[$11_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
       $11_1 = $11_1 + 4 | 0;
       $1_1 = $1_1 + 4 | 0;
       $15_1 = $15_1 + -1 | 0;
       if ($15_1) {
        continue label$61
       }
       break label$59;
      };
     }
     if (!$14_1) {
      break label$58
     }
    }
    label$62 : {
     if (!(HEAPU8[($0_1 + 140 | 0) >> 0] | 0)) {
      break label$62
     }
     $80($14_1 | 0);
    }
    HEAP32[($0_1 + 136 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 136 | 0) >> 2] = $17_1;
   HEAP32[($0_1 + 132 | 0) >> 2] = $16_1;
   HEAP8[($0_1 + 140 | 0) >> 0] = 1;
  }
  HEAP32[($0_1 + 128 | 0) >> 2] = $16_1;
  label$63 : {
   label$64 : {
    if (!((HEAPU8[($7_1 + 72 | 0) >> 0] | 0) & 16 | 0)) {
     break label$64
    }
    label$65 : {
     $15_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
     $17_1 = $2_1 << 1 | 0;
     if (($15_1 | 0) >= ($17_1 | 0)) {
      break label$65
     }
     if ((HEAP32[($0_1 + 112 | 0) >> 2] | 0 | 0) >= ($17_1 | 0)) {
      break label$65
     }
     label$66 : {
      label$67 : {
       if ($2_1) {
        break label$67
       }
       $14_1 = 0;
       break label$66;
      }
      $14_1 = $79($2_1 << 3 | 0 | 0, 16 | 0) | 0;
      $15_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
     }
     $9_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     label$68 : {
      label$69 : {
       label$70 : {
        if (($15_1 | 0) < (1 | 0)) {
         break label$70
        }
        $11_1 = $14_1;
        $1_1 = $9_1;
        label$71 : while (1) {
         HEAP32[$11_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
         $11_1 = $11_1 + 4 | 0;
         $1_1 = $1_1 + 4 | 0;
         $15_1 = $15_1 + -1 | 0;
         if ($15_1) {
          continue label$71
         }
         break label$69;
        };
       }
       if (!$9_1) {
        break label$68
       }
      }
      label$72 : {
       if (!(HEAPU8[($0_1 + 120 | 0) >> 0] | 0)) {
        break label$72
       }
       $80($9_1 | 0);
      }
      HEAP32[($0_1 + 116 | 0) >> 2] = 0;
     }
     HEAP32[($0_1 + 116 | 0) >> 2] = $14_1;
     HEAP32[($0_1 + 112 | 0) >> 2] = $17_1;
     HEAP8[($0_1 + 120 | 0) >> 0] = 1;
    }
    HEAP32[($0_1 + 108 | 0) >> 2] = $17_1;
    break label$63;
   }
   label$73 : {
    $15_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
    if (($15_1 | 0) >= ($2_1 | 0)) {
     break label$73
    }
    if ((HEAP32[($0_1 + 112 | 0) >> 2] | 0 | 0) >= ($2_1 | 0)) {
     break label$73
    }
    label$74 : {
     label$75 : {
      if ($2_1) {
       break label$75
      }
      $17_1 = 0;
      break label$74;
     }
     $17_1 = $79($2_1 << 2 | 0 | 0, 16 | 0) | 0;
     $15_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
    }
    $14_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
    label$76 : {
     label$77 : {
      label$78 : {
       if (($15_1 | 0) < (1 | 0)) {
        break label$78
       }
       $11_1 = $17_1;
       $1_1 = $14_1;
       label$79 : while (1) {
        HEAP32[$11_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
        $11_1 = $11_1 + 4 | 0;
        $1_1 = $1_1 + 4 | 0;
        $15_1 = $15_1 + -1 | 0;
        if ($15_1) {
         continue label$79
        }
        break label$77;
       };
      }
      if (!$14_1) {
       break label$76
      }
     }
     label$80 : {
      if (!(HEAPU8[($0_1 + 120 | 0) >> 0] | 0)) {
       break label$80
      }
      $80($14_1 | 0);
     }
     HEAP32[($0_1 + 116 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 116 | 0) >> 2] = $17_1;
    HEAP32[($0_1 + 112 | 0) >> 2] = $2_1;
    HEAP8[($0_1 + 120 | 0) >> 0] = 1;
   }
   HEAP32[($0_1 + 108 | 0) >> 2] = $2_1;
  }
  label$81 : {
   $15_1 = HEAP32[($0_1 + 148 | 0) >> 2] | 0;
   if (($15_1 | 0) >= ($12_1 | 0)) {
    break label$81
   }
   if ((HEAP32[($0_1 + 152 | 0) >> 2] | 0 | 0) >= ($12_1 | 0)) {
    break label$81
   }
   label$82 : {
    label$83 : {
     if ($12_1) {
      break label$83
     }
     $17_1 = 0;
     break label$82;
    }
    $17_1 = $79($12_1 << 2 | 0 | 0, 16 | 0) | 0;
    $15_1 = HEAP32[($0_1 + 148 | 0) >> 2] | 0;
   }
   $14_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
   label$84 : {
    label$85 : {
     label$86 : {
      if (($15_1 | 0) < (1 | 0)) {
       break label$86
      }
      $11_1 = $17_1;
      $1_1 = $14_1;
      label$87 : while (1) {
       HEAP32[$11_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
       $11_1 = $11_1 + 4 | 0;
       $1_1 = $1_1 + 4 | 0;
       $15_1 = $15_1 + -1 | 0;
       if ($15_1) {
        continue label$87
       }
       break label$85;
      };
     }
     if (!$14_1) {
      break label$84
     }
    }
    label$88 : {
     if (!(HEAPU8[($0_1 + 160 | 0) >> 0] | 0)) {
      break label$88
     }
     $80($14_1 | 0);
    }
    HEAP32[($0_1 + 156 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 156 | 0) >> 2] = $17_1;
   HEAP32[($0_1 + 152 | 0) >> 2] = $12_1;
   HEAP8[($0_1 + 160 | 0) >> 0] = 1;
  }
  HEAP32[($0_1 + 148 | 0) >> 2] = $12_1;
  label$89 : {
   if (($16_1 | 0) < (1 | 0)) {
    break label$89
   }
   $11_1 = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
   $1_1 = 0;
   label$90 : while (1) {
    HEAP32[$11_1 >> 2] = $1_1;
    $11_1 = $11_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    if (($16_1 | 0) != ($1_1 | 0)) {
     continue label$90
    }
    break label$90;
   };
  }
  label$91 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$91
   }
   $11_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   $1_1 = 0;
   label$92 : while (1) {
    HEAP32[$11_1 >> 2] = $1_1;
    $11_1 = $11_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    if (($2_1 | 0) != ($1_1 | 0)) {
     continue label$92
    }
    break label$92;
   };
  }
  label$93 : {
   if (($12_1 | 0) < (1 | 0)) {
    break label$93
   }
   $11_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
   $1_1 = 0;
   label$94 : while (1) {
    HEAP32[$11_1 >> 2] = $1_1;
    $11_1 = $11_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    if (($12_1 | 0) != ($1_1 | 0)) {
     continue label$94
    }
    break label$94;
   };
  }
  $617($10_1 | 0) | 0;
  global$0 = $18_1 + 256 | 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function $837($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $16_1 = 0, $13_1 = 0, $15_1 = 0, $18_1 = 0, $20_1 = Math_fround(0), $12_1 = 0, $14_1 = 0, $19_1 = Math_fround(0), $21_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $17_1 = 0;
  label$1 : {
   if (!((HEAPU8[($8_1 + 72 | 0) >> 0] | 0) & 1 | 0)) {
    break label$1
   }
   $10_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   $11_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   label$2 : {
    $12_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (($12_1 | 0) < (1 | 0)) {
     break label$2
    }
    $13_1 = Math_imul(HEAP32[($0_1 + 232 | 0) >> 2] | 0, 1664525) + 1013904223 | 0;
    label$3 : {
     if (($12_1 | 0) == (1 | 0)) {
      break label$3
     }
     $14_1 = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
     $15_1 = HEAP32[($14_1 + 4 | 0) >> 2] | 0;
     $13_1 = Math_imul($13_1, 1664525) + 1013904223 | 0;
     $16_1 = ($13_1 >>> 16 | 0) ^ $13_1 | 0;
     $16_1 = ($16_1 >>> 8 | 0) ^ $16_1 | 0;
     $16_1 = ($16_1 >>> 4 | 0) ^ $16_1 | 0;
     $16_1 = ($16_1 >>> 2 | 0) ^ $16_1 | 0;
     $16_1 = $14_1 + (((($16_1 >>> 1 | 0) ^ $16_1 | 0) & 1 | 0) << 2 | 0) | 0;
     HEAP32[($14_1 + 4 | 0) >> 2] = HEAP32[$16_1 >> 2] | 0;
     HEAP32[$16_1 >> 2] = $15_1;
     if (($12_1 | 0) == (2 | 0)) {
      break label$3
     }
     $15_1 = HEAP32[($14_1 + 8 | 0) >> 2] | 0;
     $13_1 = Math_imul($13_1, 1664525) + 1013904223 | 0;
     $16_1 = ($13_1 >>> 16 | 0) ^ $13_1 | 0;
     $16_1 = ($16_1 >>> 8 | 0) ^ $16_1 | 0;
     $16_1 = ($16_1 >>> 4 | 0) ^ $16_1 | 0;
     $16_1 = $14_1 + ((((($16_1 >>> 2 | 0) ^ $16_1 | 0) >>> 0) % (3 >>> 0) | 0) << 2 | 0) | 0;
     HEAP32[($14_1 + 8 | 0) >> 2] = HEAP32[$16_1 >> 2] | 0;
     HEAP32[$16_1 >> 2] = $15_1;
     if (($12_1 | 0) == (3 | 0)) {
      break label$3
     }
     $15_1 = HEAP32[($14_1 + 12 | 0) >> 2] | 0;
     $13_1 = Math_imul($13_1, 1664525) + 1013904223 | 0;
     $16_1 = ($13_1 >>> 16 | 0) ^ $13_1 | 0;
     $16_1 = ($16_1 >>> 8 | 0) ^ $16_1 | 0;
     $16_1 = ($16_1 >>> 4 | 0) ^ $16_1 | 0;
     $16_1 = $14_1 + (((($16_1 >>> 2 | 0) ^ $16_1 | 0) & 3 | 0) << 2 | 0) | 0;
     HEAP32[($14_1 + 12 | 0) >> 2] = HEAP32[$16_1 >> 2] | 0;
     HEAP32[$16_1 >> 2] = $15_1;
     if (($12_1 | 0) == (4 | 0)) {
      break label$3
     }
     $16_1 = $14_1 + 16 | 0;
     $15_1 = 4;
     label$4 : while (1) {
      $17_1 = HEAP32[$16_1 >> 2] | 0;
      $13_1 = Math_imul($13_1, 1664525) + 1013904223 | 0;
      $18_1 = $13_1;
      label$5 : {
       $15_1 = $15_1 + 1 | 0;
       if ($15_1 >>> 0 > 65536 >>> 0) {
        break label$5
       }
       $18_1 = ($13_1 >>> 16 | 0) ^ $13_1 | 0;
       if ($15_1 >>> 0 > 256 >>> 0) {
        break label$5
       }
       $18_1 = ($18_1 >>> 8 | 0) ^ $18_1 | 0;
       if ($15_1 >>> 0 > 16 >>> 0) {
        break label$5
       }
       $18_1 = ($18_1 >>> 4 | 0) ^ $18_1 | 0;
      }
      $18_1 = $14_1 + ((($18_1 >>> 0) % ($15_1 >>> 0) | 0) << 2 | 0) | 0;
      HEAP32[$16_1 >> 2] = HEAP32[$18_1 >> 2] | 0;
      HEAP32[$18_1 >> 2] = $17_1;
      $16_1 = $16_1 + 4 | 0;
      if (($12_1 | 0) != ($15_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    HEAP32[($0_1 + 232 | 0) >> 2] = $13_1;
   }
   if ((HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) <= ($1_1 | 0)) {
    break label$1
   }
   label$6 : {
    if (($11_1 | 0) < (1 | 0)) {
     break label$6
    }
    $13_1 = Math_imul(HEAP32[($0_1 + 232 | 0) >> 2] | 0, 1664525) + 1013904223 | 0;
    label$7 : {
     if (($11_1 | 0) == (1 | 0)) {
      break label$7
     }
     $12_1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     $15_1 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
     $13_1 = Math_imul($13_1, 1664525) + 1013904223 | 0;
     $16_1 = ($13_1 >>> 16 | 0) ^ $13_1 | 0;
     $16_1 = ($16_1 >>> 8 | 0) ^ $16_1 | 0;
     $16_1 = ($16_1 >>> 4 | 0) ^ $16_1 | 0;
     $16_1 = ($16_1 >>> 2 | 0) ^ $16_1 | 0;
     $16_1 = $12_1 + (((($16_1 >>> 1 | 0) ^ $16_1 | 0) & 1 | 0) << 2 | 0) | 0;
     HEAP32[($12_1 + 4 | 0) >> 2] = HEAP32[$16_1 >> 2] | 0;
     HEAP32[$16_1 >> 2] = $15_1;
     if (($11_1 | 0) == (2 | 0)) {
      break label$7
     }
     $15_1 = HEAP32[($12_1 + 8 | 0) >> 2] | 0;
     $13_1 = Math_imul($13_1, 1664525) + 1013904223 | 0;
     $16_1 = ($13_1 >>> 16 | 0) ^ $13_1 | 0;
     $16_1 = ($16_1 >>> 8 | 0) ^ $16_1 | 0;
     $16_1 = ($16_1 >>> 4 | 0) ^ $16_1 | 0;
     $16_1 = $12_1 + ((((($16_1 >>> 2 | 0) ^ $16_1 | 0) >>> 0) % (3 >>> 0) | 0) << 2 | 0) | 0;
     HEAP32[($12_1 + 8 | 0) >> 2] = HEAP32[$16_1 >> 2] | 0;
     HEAP32[$16_1 >> 2] = $15_1;
     if (($11_1 | 0) == (3 | 0)) {
      break label$7
     }
     $15_1 = HEAP32[($12_1 + 12 | 0) >> 2] | 0;
     $13_1 = Math_imul($13_1, 1664525) + 1013904223 | 0;
     $16_1 = ($13_1 >>> 16 | 0) ^ $13_1 | 0;
     $16_1 = ($16_1 >>> 8 | 0) ^ $16_1 | 0;
     $16_1 = ($16_1 >>> 4 | 0) ^ $16_1 | 0;
     $16_1 = $12_1 + (((($16_1 >>> 2 | 0) ^ $16_1 | 0) & 3 | 0) << 2 | 0) | 0;
     HEAP32[($12_1 + 12 | 0) >> 2] = HEAP32[$16_1 >> 2] | 0;
     HEAP32[$16_1 >> 2] = $15_1;
     if (($11_1 | 0) == (4 | 0)) {
      break label$7
     }
     $16_1 = $12_1 + 16 | 0;
     $15_1 = 4;
     label$8 : while (1) {
      $14_1 = HEAP32[$16_1 >> 2] | 0;
      $13_1 = Math_imul($13_1, 1664525) + 1013904223 | 0;
      $18_1 = $13_1;
      label$9 : {
       $15_1 = $15_1 + 1 | 0;
       if ($15_1 >>> 0 > 65536 >>> 0) {
        break label$9
       }
       $18_1 = ($13_1 >>> 16 | 0) ^ $13_1 | 0;
       if ($15_1 >>> 0 > 256 >>> 0) {
        break label$9
       }
       $18_1 = ($18_1 >>> 8 | 0) ^ $18_1 | 0;
       if ($15_1 >>> 0 > 16 >>> 0) {
        break label$9
       }
       $18_1 = ($18_1 >>> 4 | 0) ^ $18_1 | 0;
      }
      $18_1 = $12_1 + ((($18_1 >>> 0) % ($15_1 >>> 0) | 0) << 2 | 0) | 0;
      HEAP32[$16_1 >> 2] = HEAP32[$18_1 >> 2] | 0;
      HEAP32[$18_1 >> 2] = $14_1;
      $16_1 = $16_1 + 4 | 0;
      if (($11_1 | 0) != ($15_1 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    HEAP32[($0_1 + 232 | 0) >> 2] = $13_1;
   }
   if (($10_1 | 0) < (1 | 0)) {
    break label$1
   }
   $13_1 = Math_imul(HEAP32[($0_1 + 232 | 0) >> 2] | 0, 1664525) + 1013904223 | 0;
   label$10 : {
    if (($10_1 | 0) == (1 | 0)) {
     break label$10
    }
    $12_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
    $15_1 = HEAP32[($12_1 + 4 | 0) >> 2] | 0;
    $13_1 = Math_imul($13_1, 1664525) + 1013904223 | 0;
    $16_1 = ($13_1 >>> 16 | 0) ^ $13_1 | 0;
    $16_1 = ($16_1 >>> 8 | 0) ^ $16_1 | 0;
    $16_1 = ($16_1 >>> 4 | 0) ^ $16_1 | 0;
    $16_1 = ($16_1 >>> 2 | 0) ^ $16_1 | 0;
    $16_1 = $12_1 + (((($16_1 >>> 1 | 0) ^ $16_1 | 0) & 1 | 0) << 2 | 0) | 0;
    HEAP32[($12_1 + 4 | 0) >> 2] = HEAP32[$16_1 >> 2] | 0;
    HEAP32[$16_1 >> 2] = $15_1;
    if (($10_1 | 0) == (2 | 0)) {
     break label$10
    }
    $15_1 = HEAP32[($12_1 + 8 | 0) >> 2] | 0;
    $13_1 = Math_imul($13_1, 1664525) + 1013904223 | 0;
    $16_1 = ($13_1 >>> 16 | 0) ^ $13_1 | 0;
    $16_1 = ($16_1 >>> 8 | 0) ^ $16_1 | 0;
    $16_1 = ($16_1 >>> 4 | 0) ^ $16_1 | 0;
    $16_1 = $12_1 + ((((($16_1 >>> 2 | 0) ^ $16_1 | 0) >>> 0) % (3 >>> 0) | 0) << 2 | 0) | 0;
    HEAP32[($12_1 + 8 | 0) >> 2] = HEAP32[$16_1 >> 2] | 0;
    HEAP32[$16_1 >> 2] = $15_1;
    if (($10_1 | 0) == (3 | 0)) {
     break label$10
    }
    $15_1 = HEAP32[($12_1 + 12 | 0) >> 2] | 0;
    $13_1 = Math_imul($13_1, 1664525) + 1013904223 | 0;
    $16_1 = ($13_1 >>> 16 | 0) ^ $13_1 | 0;
    $16_1 = ($16_1 >>> 8 | 0) ^ $16_1 | 0;
    $16_1 = ($16_1 >>> 4 | 0) ^ $16_1 | 0;
    $16_1 = $12_1 + (((($16_1 >>> 2 | 0) ^ $16_1 | 0) & 3 | 0) << 2 | 0) | 0;
    HEAP32[($12_1 + 12 | 0) >> 2] = HEAP32[$16_1 >> 2] | 0;
    HEAP32[$16_1 >> 2] = $15_1;
    if (($10_1 | 0) == (4 | 0)) {
     break label$10
    }
    $16_1 = $12_1 + 16 | 0;
    $15_1 = 4;
    label$11 : while (1) {
     $14_1 = HEAP32[$16_1 >> 2] | 0;
     $13_1 = Math_imul($13_1, 1664525) + 1013904223 | 0;
     $18_1 = $13_1;
     label$12 : {
      $15_1 = $15_1 + 1 | 0;
      if ($15_1 >>> 0 > 65536 >>> 0) {
       break label$12
      }
      $18_1 = ($13_1 >>> 16 | 0) ^ $13_1 | 0;
      if ($15_1 >>> 0 > 256 >>> 0) {
       break label$12
      }
      $18_1 = ($18_1 >>> 8 | 0) ^ $18_1 | 0;
      if ($15_1 >>> 0 > 16 >>> 0) {
       break label$12
      }
      $18_1 = ($18_1 >>> 4 | 0) ^ $18_1 | 0;
     }
     $18_1 = $12_1 + ((($18_1 >>> 0) % ($15_1 >>> 0) | 0) << 2 | 0) | 0;
     HEAP32[$16_1 >> 2] = HEAP32[$18_1 >> 2] | 0;
     HEAP32[$18_1 >> 2] = $14_1;
     $16_1 = $16_1 + 4 | 0;
     if (($10_1 | 0) != ($15_1 | 0)) {
      continue label$11
     }
     break label$11;
    };
   }
   HEAP32[($0_1 + 232 | 0) >> 2] = $13_1;
  }
  $19_1 = Math_fround(0.0);
  label$13 : {
   $18_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if (($18_1 | 0) < (1 | 0)) {
    break label$13
   }
   $13_1 = 0;
   $16_1 = 0;
   label$14 : while (1) {
    label$15 : {
     $15_1 = (HEAP32[($0_1 + 56 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($0_1 + 136 | 0) >> 2] | 0) + $13_1 | 0) >> 2] | 0, 152) | 0;
     if ((HEAP32[($15_1 + 136 | 0) >> 2] | 0 | 0) <= ($1_1 | 0)) {
      break label$15
     }
     $18_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     $20_1 = Math_fround(FUNCTION_TABLE[HEAP32[($0_1 + 212 | 0) >> 2] | 0]($18_1 + Math_imul(HEAP32[($15_1 + 144 | 0) >> 2] | 0, 244) | 0, $18_1 + Math_imul(HEAP32[($15_1 + 148 | 0) >> 2] | 0, 244) | 0, $15_1));
     $19_1 = Math_fround($19_1 + Math_fround($20_1 * $20_1));
     $18_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    }
    $13_1 = $13_1 + 4 | 0;
    $16_1 = $16_1 + 1 | 0;
    if (($16_1 | 0) < ($18_1 | 0)) {
     continue label$14
    }
    break label$14;
   };
  }
  label$16 : {
   if ((HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) <= ($1_1 | 0)) {
    break label$16
   }
   label$17 : {
    if (($7_1 | 0) < (1 | 0)) {
     break label$17
    }
    label$18 : while (1) {
     label$19 : {
      $13_1 = HEAP32[$6_1 >> 2] | 0;
      if (!(HEAPU8[($13_1 + 20 | 0) >> 0] | 0)) {
       break label$19
      }
      $13_1 = $830($0_1 | 0, HEAP32[($13_1 + 28 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]))) | 0;
      $15_1 = $830($0_1 | 0, HEAP32[((HEAP32[$6_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0, Math_fround(Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]))) | 0;
      $16_1 = HEAP32[$6_1 >> 2] | 0;
      $18_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$16_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($16_1, $18_1 + Math_imul($13_1, 244) | 0, $18_1 + Math_imul($15_1, 244) | 0, Math_fround(HEAPF32[($8_1 + 12 | 0) >> 2]));
     }
     $6_1 = $6_1 + 4 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue label$18
     }
     break label$18;
    };
   }
   $13_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   label$20 : {
    label$21 : {
     $15_1 = HEAP32[($8_1 + 72 | 0) >> 2] | 0;
     if ($15_1 & 512 | 0) {
      break label$21
     }
     label$22 : {
      if (($13_1 | 0) < (1 | 0)) {
       break label$22
      }
      $15_1 = 0;
      label$23 : while (1) {
       $16_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       $6_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($0_1 + 116 | 0) >> 2] | 0) + $15_1 | 0) >> 2] | 0, 152) | 0;
       $20_1 = Math_fround(FUNCTION_TABLE[HEAP32[($0_1 + 216 | 0) >> 2] | 0]($16_1 + Math_imul(HEAP32[($6_1 + 144 | 0) >> 2] | 0, 244) | 0, $16_1 + Math_imul(HEAP32[($6_1 + 148 | 0) >> 2] | 0, 244) | 0, $6_1));
       $19_1 = Math_fround($19_1 + Math_fround($20_1 * $20_1));
       $15_1 = $15_1 + 4 | 0;
       $13_1 = $13_1 + -1 | 0;
       if ($13_1) {
        continue label$23
       }
       break label$23;
      };
     }
     $6_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
     if (($6_1 | 0) < (1 | 0)) {
      break label$20
     }
     $15_1 = 0;
     label$24 : while (1) {
      label$25 : {
       $13_1 = (HEAP32[($0_1 + 76 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($0_1 + 156 | 0) >> 2] | 0) + $15_1 | 0) >> 2] | 0, 152) | 0;
       $20_1 = Math_fround(HEAPF32[(((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($13_1 + 140 | 0) >> 2] | 0, 152) | 0) + 100 | 0) >> 2]);
       if ($20_1 > Math_fround(0.0) ^ 1 | 0) {
        break label$25
       }
       $20_1 = Math_fround($20_1 * Math_fround(HEAPF32[($13_1 + 104 | 0) >> 2]));
       HEAPF32[($13_1 + 124 | 0) >> 2] = $20_1;
       HEAPF32[($13_1 + 120 | 0) >> 2] = Math_fround(-$20_1);
       $16_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       $20_1 = Math_fround(FUNCTION_TABLE[HEAP32[($0_1 + 212 | 0) >> 2] | 0]($16_1 + Math_imul(HEAP32[($13_1 + 144 | 0) >> 2] | 0, 244) | 0, $16_1 + Math_imul(HEAP32[($13_1 + 148 | 0) >> 2] | 0, 244) | 0, $13_1));
       $19_1 = Math_fround($19_1 + Math_fround($20_1 * $20_1));
      }
      $15_1 = $15_1 + 4 | 0;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue label$24
      }
      break label$20;
     };
    }
    if (($13_1 | 0) < (1 | 0)) {
     break label$20
    }
    $1_1 = ($15_1 & 16 | 0 ? 2 : 1) << 2 | 0;
    $16_1 = 0;
    $6_1 = 0;
    label$26 : while (1) {
     $18_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     $15_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($0_1 + 116 | 0) >> 2] | 0) + $6_1 | 0) >> 2] | 0, 152) | 0;
     $20_1 = Math_fround(FUNCTION_TABLE[HEAP32[($0_1 + 216 | 0) >> 2] | 0]($18_1 + Math_imul(HEAP32[($15_1 + 144 | 0) >> 2] | 0, 244) | 0, $18_1 + Math_imul(HEAP32[($15_1 + 148 | 0) >> 2] | 0, 244) | 0, $15_1));
     $19_1 = Math_fround($19_1 + Math_fround($20_1 * $20_1));
     label$27 : {
      $20_1 = Math_fround(HEAPF32[($15_1 + 100 | 0) >> 2]);
      $18_1 = $20_1 > Math_fround(0.0) ^ 1 | 0;
      if ($18_1) {
       break label$27
      }
      $15_1 = (HEAP32[($0_1 + 76 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($0_1 + 156 | 0) >> 2] | 0) + $16_1 | 0) >> 2] | 0, 152) | 0;
      $21_1 = Math_fround($20_1 * Math_fround(HEAPF32[($15_1 + 104 | 0) >> 2]));
      HEAPF32[($15_1 + 124 | 0) >> 2] = $21_1;
      HEAPF32[($15_1 + 120 | 0) >> 2] = Math_fround(-$21_1);
      $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      $21_1 = Math_fround(FUNCTION_TABLE[HEAP32[($0_1 + 212 | 0) >> 2] | 0]($7_1 + Math_imul(HEAP32[($15_1 + 144 | 0) >> 2] | 0, 244) | 0, $7_1 + Math_imul(HEAP32[($15_1 + 148 | 0) >> 2] | 0, 244) | 0, $15_1));
      $19_1 = Math_fround($19_1 + Math_fround($21_1 * $21_1));
     }
     label$28 : {
      if (!((HEAPU8[($8_1 + 72 | 0) >> 0] | 0) & 16 | 0)) {
       break label$28
      }
      if ($18_1) {
       break label$28
      }
      $15_1 = (HEAP32[($0_1 + 76 | 0) >> 2] | 0) + Math_imul(HEAP32[(((HEAP32[($0_1 + 156 | 0) >> 2] | 0) + $16_1 | 0) + 4 | 0) >> 2] | 0, 152) | 0;
      $20_1 = Math_fround($20_1 * Math_fround(HEAPF32[($15_1 + 104 | 0) >> 2]));
      HEAPF32[($15_1 + 124 | 0) >> 2] = $20_1;
      HEAPF32[($15_1 + 120 | 0) >> 2] = Math_fround(-$20_1);
      $18_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      $20_1 = Math_fround(FUNCTION_TABLE[HEAP32[($0_1 + 212 | 0) >> 2] | 0]($18_1 + Math_imul(HEAP32[($15_1 + 144 | 0) >> 2] | 0, 244) | 0, $18_1 + Math_imul(HEAP32[($15_1 + 148 | 0) >> 2] | 0, 244) | 0, $15_1));
      $19_1 = Math_fround($19_1 + Math_fround($20_1 * $20_1));
     }
     $16_1 = $16_1 + $1_1 | 0;
     $6_1 = $6_1 + 4 | 0;
     $13_1 = $13_1 + -1 | 0;
     if ($13_1) {
      continue label$26
     }
     break label$26;
    };
   }
   $6_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
   if (($6_1 | 0) < (1 | 0)) {
    break label$16
   }
   $15_1 = 0;
   label$29 : while (1) {
    label$30 : {
     $13_1 = (HEAP32[($0_1 + 96 | 0) >> 2] | 0) + $15_1 | 0;
     $20_1 = Math_fround(HEAPF32[(((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[($13_1 + 140 | 0) >> 2] | 0, 152) | 0) + 100 | 0) >> 2]);
     if ($20_1 > Math_fround(0.0) ^ 1 | 0) {
      break label$30
     }
     $21_1 = Math_fround(HEAPF32[($13_1 + 104 | 0) >> 2]);
     $20_1 = Math_fround($20_1 * $21_1);
     $20_1 = $20_1 > $21_1 ? $21_1 : $20_1;
     HEAPF32[($13_1 + 124 | 0) >> 2] = $20_1;
     HEAPF32[($13_1 + 120 | 0) >> 2] = Math_fround(-$20_1);
     $16_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     $20_1 = Math_fround(FUNCTION_TABLE[HEAP32[($0_1 + 212 | 0) >> 2] | 0]($16_1 + Math_imul(HEAP32[($13_1 + 144 | 0) >> 2] | 0, 244) | 0, $16_1 + Math_imul(HEAP32[($13_1 + 148 | 0) >> 2] | 0, 244) | 0, $13_1));
     $19_1 = Math_fround($19_1 + Math_fround($20_1 * $20_1));
    }
    $15_1 = $15_1 + 152 | 0;
    $6_1 = $6_1 + -1 | 0;
    if ($6_1) {
     continue label$29
    }
    break label$29;
   };
  }
  return Math_fround($19_1);
 }
 
 function $838($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $12_1 = 0, $9_1 = 0, $11_1 = 0, $10_1 = Math_fround(0), $14_1 = 0, $13_1 = 0, $15_1 = Math_fround(0);
  label$1 : {
   if (!(HEAP32[($7_1 + 52 | 0) >> 2] | 0)) {
    break label$1
   }
   if ((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $9_1 = 0;
   label$2 : while (1) {
    $10_1 = Math_fround(0.0);
    label$3 : {
     $11_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if (($11_1 | 0) < (1 | 0)) {
      break label$3
     }
     $12_1 = 0;
     label$4 : while (1) {
      $13_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      $14_1 = (HEAP32[($0_1 + 36 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($0_1 + 116 | 0) >> 2] | 0) + $12_1 | 0) >> 2] | 0, 152) | 0;
      $15_1 = Math_fround(FUNCTION_TABLE[HEAP32[($0_1 + 220 | 0) >> 2] | 0]($13_1 + Math_imul(HEAP32[($14_1 + 144 | 0) >> 2] | 0, 244) | 0, $13_1 + Math_imul(HEAP32[($14_1 + 148 | 0) >> 2] | 0, 244) | 0, $14_1));
      $10_1 = Math_fround($10_1 + Math_fround($15_1 * $15_1));
      $12_1 = $12_1 + 4 | 0;
      $11_1 = $11_1 + -1 | 0;
      if ($11_1) {
       continue label$4
      }
      break label$4;
     };
    }
    if ($10_1 <= Math_fround(HEAPF32[($7_1 + 92 | 0) >> 2])) {
     break label$1
    }
    $12_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    if (($9_1 | 0) >= ($12_1 + -1 | 0 | 0)) {
     break label$1
    }
    $9_1 = $9_1 + 1 | 0;
    if (($9_1 | 0) < ($12_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $839($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, $12_1 = 0, $9_1 = 0, $14_1 = Math_fround(0), $10_1 = 0, $13_1 = 0;
  $9_1 = global$0 - 16 | 0;
  global$0 = $9_1;
  $10_1 = $616($9_1 + 8 | 0 | 0, 20261 | 0) | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1);
  label$1 : {
   $11_1 = HEAP32[($0_1 + 184 | 0) >> 2] | 0;
   $12_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $12_1 = ($11_1 | 0) > ($12_1 | 0) ? $11_1 : $12_1;
   if (($12_1 | 0) < (1 | 0)) {
    break label$1
   }
   $13_1 = $12_1 + -1 | 0;
   $11_1 = 0;
   label$2 : while (1) {
    $14_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($0_1, $11_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1));
    HEAPF32[($0_1 + 228 | 0) >> 2] = $14_1;
    if (($11_1 | 0) >= ($13_1 | 0)) {
     break label$1
    }
    if ($14_1 <= Math_fround(HEAPF32[($7_1 + 92 | 0) >> 2])) {
     break label$1
    }
    $11_1 = $11_1 + 1 | 0;
    if (($11_1 | 0) < ($12_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $617($10_1 | 0) | 0;
  global$0 = $9_1 + 16 | 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function $840($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $10_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), i64toi32_i32$2 = 0, $8_1 = 0, $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $11_1 = Math_fround(0), $17_1 = 0, $9_1 = 0, $537_1 = 0, $540_1 = 0, $547_1 = 0, $551_1 = 0, $557_1 = 0, $562_1 = 0, $569_1 = 0, $573_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($3_1 + 72 | 0) >> 2] | 0;
   if (!($4_1 & 4 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (($5_1 | 0) < (1 | 0)) {
    break label$1
   }
   $6_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
   $7_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   label$2 : {
    if (!($4_1 & 16 | 0)) {
     break label$2
    }
    $4_1 = $7_1 + 140 | 0;
    label$3 : while (1) {
     $7_1 = HEAP32[($4_1 + -8 | 0) >> 2] | 0;
     HEAP32[($7_1 + 124 | 0) >> 2] = HEAP32[($4_1 + -40 | 0) >> 2] | 0;
     $8_1 = $6_1 + Math_imul(HEAP32[$4_1 >> 2] | 0, 152) | 0;
     HEAP32[($7_1 + 128 | 0) >> 2] = HEAP32[($8_1 + 100 | 0) >> 2] | 0;
     HEAP32[($7_1 + 132 | 0) >> 2] = HEAP32[($8_1 + 252 | 0) >> 2] | 0;
     $4_1 = $4_1 + 152 | 0;
     $5_1 = $5_1 + -1 | 0;
     if ($5_1) {
      continue label$3
     }
     break label$1;
    };
   }
   $4_1 = $7_1 + 140 | 0;
   label$4 : while (1) {
    $7_1 = HEAP32[($4_1 + -8 | 0) >> 2] | 0;
    HEAP32[($7_1 + 124 | 0) >> 2] = HEAP32[($4_1 + -40 | 0) >> 2] | 0;
    HEAP32[($7_1 + 128 | 0) >> 2] = HEAP32[(($6_1 + Math_imul(HEAP32[$4_1 >> 2] | 0, 152) | 0) + 100 | 0) >> 2] | 0;
    $4_1 = $4_1 + 152 | 0;
    $5_1 = $5_1 + -1 | 0;
    if ($5_1) {
     continue label$4
    }
    break label$4;
   };
  }
  label$5 : {
   $9_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if (($9_1 | 0) < (1 | 0)) {
    break label$5
   }
   $10_1 = 100;
   label$6 : while (1) {
    label$7 : {
     $5_1 = (HEAP32[($0_1 + 56 | 0) >> 2] | 0) + $10_1 | 0;
     $7_1 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
     $4_1 = HEAP32[($7_1 + 44 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$7
     }
     $6_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
     $11_1 = Math_fround(HEAPF32[($6_1 + 416 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[($5_1 + -76 | 0) >> 2]);
     $13_1 = Math_fround(HEAPF32[($6_1 + 412 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($5_1 + -80 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[$5_1 >> 2]);
     $16_1 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]));
     HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(HEAPF32[$4_1 >> 2]) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + -84 | 0) >> 2]) * $15_1) * Math_fround(HEAPF32[($6_1 + 408 | 0) >> 2])) * $16_1));
     HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround($15_1 * $14_1)) * $16_1) + Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
     HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 * Math_fround($15_1 * $12_1)) * $16_1) + Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]));
     $8_1 = HEAP32[($7_1 + 32 | 0) >> 2] | 0;
     $11_1 = Math_fround(HEAPF32[($8_1 + 416 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[($5_1 + -44 | 0) >> 2]);
     $13_1 = Math_fround(HEAPF32[($8_1 + 412 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($5_1 + -48 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[$5_1 >> 2]);
     $16_1 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]));
     HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + -52 | 0) >> 2]) * $15_1) * Math_fround(HEAPF32[($8_1 + 408 | 0) >> 2])) * $16_1));
     $17_1 = $4_1 + 36 | 0;
     HEAPF32[$17_1 >> 2] = Math_fround(Math_fround(Math_fround($13_1 * Math_fround($15_1 * $14_1)) * $16_1) + Math_fround(HEAPF32[$17_1 >> 2]));
     $17_1 = $4_1 + 40 | 0;
     HEAPF32[$17_1 >> 2] = Math_fround(Math_fround(Math_fround($11_1 * Math_fround($15_1 * $12_1)) * $16_1) + Math_fround(HEAPF32[$17_1 >> 2]));
     $11_1 = Math_fround(HEAPF32[($6_1 + 612 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[($5_1 + -92 | 0) >> 2]);
     $13_1 = Math_fround(HEAPF32[($6_1 + 608 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($5_1 + -96 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[$5_1 >> 2]);
     $16_1 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]));
     HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + -100 | 0) >> 2]) * Math_fround(HEAPF32[($6_1 + 604 | 0) >> 2])) * $15_1) * $16_1));
     $6_1 = $4_1 + 20 | 0;
     HEAPF32[$6_1 >> 2] = Math_fround(Math_fround(Math_fround($15_1 * Math_fround($14_1 * $13_1)) * $16_1) + Math_fround(HEAPF32[$6_1 >> 2]));
     $6_1 = $4_1 + 24 | 0;
     HEAPF32[$6_1 >> 2] = Math_fround(Math_fround(Math_fround($15_1 * Math_fround($12_1 * $11_1)) * $16_1) + Math_fround(HEAPF32[$6_1 >> 2]));
     $11_1 = Math_fround(HEAPF32[($8_1 + 612 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[($5_1 + -60 | 0) >> 2]);
     $13_1 = Math_fround(HEAPF32[($8_1 + 608 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($5_1 + -64 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[$5_1 >> 2]);
     $16_1 = Math_fround(Math_fround(1.0) / Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]));
     HEAPF32[($4_1 + 48 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]) + Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($5_1 + -68 | 0) >> 2]) * Math_fround(HEAPF32[($8_1 + 604 | 0) >> 2])) * $15_1) * $16_1));
     $6_1 = $4_1 + 52 | 0;
     HEAPF32[$6_1 >> 2] = Math_fround(Math_fround(Math_fround($15_1 * Math_fround($14_1 * $13_1)) * $16_1) + Math_fround(HEAPF32[$6_1 >> 2]));
     $4_1 = $4_1 + 56 | 0;
     HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(Math_fround($15_1 * Math_fround($12_1 * $11_1)) * $16_1) + Math_fround(HEAPF32[$4_1 >> 2]));
    }
    $15_1 = Math_fround(HEAPF32[$5_1 >> 2]);
    HEAPF32[($7_1 + 36 | 0) >> 2] = $15_1;
    label$8 : {
     if (Math_fround(Math_abs($15_1)) >= Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]) ^ 1 | 0) {
      break label$8
     }
     HEAP8[($7_1 + 20 | 0) >> 0] = 0;
    }
    $10_1 = $10_1 + 152 | 0;
    $9_1 = $9_1 + -1 | 0;
    if ($9_1) {
     continue label$6
    }
    break label$6;
   };
  }
  label$9 : {
   $10_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (($10_1 | 0) < (1 | 0)) {
    break label$9
   }
   $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $4_1 = 176;
   $8_1 = 0;
   label$10 : while (1) {
    label$11 : {
     $7_1 = $6_1 + $4_1 | 0;
     $5_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$11
     }
     label$12 : {
      label$13 : {
       if (!(HEAP32[($3_1 + 52 | 0) >> 2] | 0)) {
        break label$13
       }
       $841($7_1 + -176 | 0 | 0, Math_fround(Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2])), Math_fround(Math_fround(HEAPF32[($3_1 + 60 | 0) >> 2])));
       $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       $5_1 = $6_1 + $4_1 | 0;
       $12_1 = Math_fround(HEAPF32[$5_1 >> 2]);
       $13_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
       $14_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
       $5_1 = HEAP32[($5_1 + 64 | 0) >> 2] | 0;
       break label$12;
      }
      $12_1 = Math_fround(Math_fround(HEAPF32[($7_1 + -112 | 0) >> 2]) + Math_fround(HEAPF32[$7_1 >> 2]));
      HEAPF32[$7_1 >> 2] = $12_1;
      $10_1 = $7_1 + 4 | 0;
      $14_1 = Math_fround(Math_fround(HEAPF32[($7_1 + -108 | 0) >> 2]) + Math_fround(HEAPF32[$10_1 >> 2]));
      HEAPF32[$10_1 >> 2] = $14_1;
      $10_1 = $7_1 + 8 | 0;
      $13_1 = Math_fround(Math_fround(HEAPF32[($7_1 + -104 | 0) >> 2]) + Math_fround(HEAPF32[$10_1 >> 2]));
      HEAPF32[$10_1 >> 2] = $13_1;
      $10_1 = $7_1 + 16 | 0;
      HEAPF32[$10_1 >> 2] = Math_fround(Math_fround(HEAPF32[($7_1 + -96 | 0) >> 2]) + Math_fround(HEAPF32[$10_1 >> 2]));
      $10_1 = $7_1 + 20 | 0;
      HEAPF32[$10_1 >> 2] = Math_fround(Math_fround(HEAPF32[($7_1 + -92 | 0) >> 2]) + Math_fround(HEAPF32[$10_1 >> 2]));
      $10_1 = $7_1 + 24 | 0;
      HEAPF32[$10_1 >> 2] = Math_fround(Math_fround(HEAPF32[($7_1 + -88 | 0) >> 2]) + Math_fround(HEAPF32[$10_1 >> 2]));
     }
     $7_1 = $6_1 + $4_1 | 0;
     $15_1 = Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]);
     $16_1 = Math_fround(HEAPF32[($7_1 + 36 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($7_1 + 40 | 0) >> 2]);
     HEAP32[($5_1 + 384 | 0) >> 2] = 0;
     HEAPF32[($5_1 + 380 | 0) >> 2] = Math_fround($13_1 + $11_1);
     HEAPF32[($5_1 + 376 | 0) >> 2] = Math_fround($14_1 + $16_1);
     HEAPF32[($5_1 + 372 | 0) >> 2] = Math_fround($12_1 + $15_1);
     HEAP32[($5_1 + 304 | 0) >> 2] = (HEAP32[($5_1 + 304 | 0) >> 2] | 0) + 1 | 0;
     $5_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $4_1 | 0;
     $15_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
     $16_1 = Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[($5_1 + 52 | 0) >> 2]);
     $13_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]);
     $5_1 = HEAP32[($5_1 + 64 | 0) >> 2] | 0;
     HEAP32[($5_1 + 400 | 0) >> 2] = 0;
     HEAPF32[($5_1 + 396 | 0) >> 2] = Math_fround($13_1 + $14_1);
     HEAPF32[($5_1 + 392 | 0) >> 2] = Math_fround($11_1 + $12_1);
     HEAPF32[($5_1 + 388 | 0) >> 2] = Math_fround($15_1 + $16_1);
     HEAP32[($5_1 + 304 | 0) >> 2] = (HEAP32[($5_1 + 304 | 0) >> 2] | 0) + 1 | 0;
     label$14 : {
      if (!(HEAP32[($3_1 + 52 | 0) >> 2] | 0)) {
       break label$14
      }
      $7_1 = (HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $4_1 | 0;
      $5_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
      HEAP32[($5_1 + 304 | 0) >> 2] = (HEAP32[($5_1 + 304 | 0) >> 2] | 0) + 1 | 0;
      $6_1 = $7_1 + -176 | 0;
      i64toi32_i32$2 = $6_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $537_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1 + 12 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $537_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$1 = HEAP32[$6_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      $540_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $540_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = i64toi32_i32$0;
      $6_1 = $7_1 + -160 | 0;
      i64toi32_i32$2 = $6_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $547_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1 + 28 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $547_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$1 = HEAP32[$6_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      $551_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $5_1 + 20 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $551_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $6_1 = $7_1 + -144 | 0;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      $557_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1 + 36 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $557_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $6_1 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $562_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $5_1 + 44 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $562_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $7_1 = $7_1 + -128 | 0;
      i64toi32_i32$2 = $7_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $569_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1 + 60 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $569_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = HEAP32[$7_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
      $573_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $5_1 + 52 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $573_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     }
     $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     HEAP32[((HEAP32[(($6_1 + $4_1 | 0) + 64 | 0) >> 2] | 0) + 212 | 0) >> 2] = -1;
     $10_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    $4_1 = $4_1 + 244 | 0;
    $8_1 = $8_1 + 1 | 0;
    if (($8_1 | 0) < ($10_1 | 0)) {
     continue label$10
    }
    break label$10;
   };
  }
  label$15 : {
   if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$15
   }
   if ((HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$15
   }
   label$16 : {
    $4_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$16
    }
    label$17 : {
     if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
      break label$17
     }
     $80($4_1 | 0);
    }
    HEAP32[($0_1 + 36 | 0) >> 2] = 0;
   }
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 32 | 0) >> 2] = 0;
   HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($0_1 + 40 | 0) >> 0] = 1;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  label$18 : {
   if ((HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$18
   }
   if ((HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$18
   }
   label$19 : {
    $4_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$19
    }
    label$20 : {
     if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
      break label$20
     }
     $80($4_1 | 0);
    }
    HEAP32[($0_1 + 56 | 0) >> 2] = 0;
   }
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 52 | 0) >> 2] = 0;
   HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  }
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  label$21 : {
   if ((HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$21
   }
   if ((HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$21
   }
   label$22 : {
    $4_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$22
    }
    label$23 : {
     if (!(HEAPU8[($0_1 + 80 | 0) >> 0] | 0)) {
      break label$23
     }
     $80($4_1 | 0);
    }
    HEAP32[($0_1 + 76 | 0) >> 2] = 0;
   }
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 72 | 0) >> 2] = 0;
   HEAP32[($0_1 + 76 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($0_1 + 80 | 0) >> 0] = 1;
  }
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  label$24 : {
   if ((HEAP32[($0_1 + 88 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$24
   }
   if ((HEAP32[($0_1 + 92 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$24
   }
   label$25 : {
    $4_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$25
    }
    label$26 : {
     if (!(HEAPU8[($0_1 + 100 | 0) >> 0] | 0)) {
      break label$26
     }
     $80($4_1 | 0);
    }
    HEAP32[($0_1 + 96 | 0) >> 2] = 0;
   }
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 92 | 0) >> 2] = 0;
   HEAP32[($0_1 + 96 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($0_1 + 100 | 0) >> 0] = 1;
  }
  HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  label$27 : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$27
   }
   if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$27
   }
   label$28 : {
    $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$28
    }
    label$29 : {
     if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
      break label$29
     }
     $80($4_1 | 0);
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   }
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function $841($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $111_1 = 0, $114_1 = 0, $117_1 = 0, $123_1 = 0, $126_1 = 0, $132_1 = 0, $135_1 = 0, $141_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  label$1 : {
   if (!(HEAP32[($0_1 + 240 | 0) >> 2] | 0)) {
    break label$1
   }
   HEAPF32[($0_1 + 176 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 176 | 0) >> 2]));
   HEAPF32[($0_1 + 192 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]) + Math_fround(HEAPF32[($0_1 + 192 | 0) >> 2]));
   $4_1 = $0_1 + 180 | 0;
   HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]) + Math_fround(HEAPF32[$4_1 >> 2]));
   $4_1 = $0_1 + 184 | 0;
   HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]) + Math_fround(HEAPF32[$4_1 >> 2]));
   $4_1 = $0_1 + 196 | 0;
   HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]) + Math_fround(HEAPF32[$4_1 >> 2]));
   $4_1 = $0_1 + 200 | 0;
   HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]) + Math_fround(HEAPF32[$4_1 >> 2]));
   label$2 : {
    if (Math_fround(HEAPF32[($0_1 + 144 | 0) >> 2]) != Math_fround(0.0)) {
     break label$2
    }
    if (Math_fround(HEAPF32[($0_1 + 148 | 0) >> 2]) != Math_fround(0.0)) {
     break label$2
    }
    if (Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2]) != Math_fround(0.0)) {
     break label$2
    }
    if (Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2]) != Math_fround(0.0)) {
     break label$2
    }
    if (Math_fround(HEAPF32[($0_1 + 164 | 0) >> 2]) != Math_fround(0.0)) {
     break label$2
    }
    if (Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]) == Math_fround(0.0)) {
     break label$1
    }
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
   HEAPF32[$3_1 >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2]) * $2_1);
   HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]) * $2_1);
   HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 164 | 0) >> 2]) * $2_1);
   $801($0_1 | 0, $0_1 + 144 | 0 | 0, $3_1 | 0, Math_fround($1_1), $3_1 + 16 | 0 | 0);
   i64toi32_i32$2 = ($3_1 + 16 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $111_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $111_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   $114_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[$0_1 >> 2] = $114_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
   $117_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 16 | 0) >> 2] = $117_1;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = ($3_1 + 16 | 0) + 24 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $123_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $123_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[($3_1 + 48 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 52 | 0) >> 2] | 0;
   $126_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 32 | 0) >> 2] = $126_1;
   HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = ($3_1 + 16 | 0) + 40 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $132_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 40 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $132_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[($3_1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3_1 + 68 | 0) >> 2] | 0;
   $135_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 48 | 0) >> 2] = $135_1;
   HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = ($3_1 + 16 | 0) + 56 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $141_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 56 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $141_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  global$0 = $3_1 + 80 | 0;
 }
 
 function $842($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  $11_1 = $616($10_1 + 8 | 0 | 0, 20295 | 0) | 0;
  Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1));
  Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1));
  Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $7_1));
  $617($11_1 | 0) | 0;
  global$0 = $10_1 + 16 | 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function $843($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 232 | 0) >> 2] = 0;
 }
 
 function $844($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $845($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $846($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $847($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = 20396;
  return $0_1 | 0;
 }
 
 function $848($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 20396;
  return $0_1 | 0;
 }
 
 function $849($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $22_1 = Math_fround(0), $20_1 = Math_fround(0), $17_1 = Math_fround(0), $19_1 = Math_fround(0), $30_1 = Math_fround(0), $5_1 = 0, $15_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $23_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $29_1 = Math_fround(0), $35_1 = Math_fround(0), $37_1 = Math_fround(0), $39_1 = Math_fround(0), $6_1 = 0, $9_1 = Math_fround(0), $11_1 = Math_fround(0), $24_1 = Math_fround(0), $10_1 = 0, $14_1 = 0, $16_1 = 0, $18_1 = 0, $21_1 = 0, $36_1 = Math_fround(0), $38_1 = Math_fround(0), $40_1 = 0, $41_1 = Math_fround(0), $42_1 = Math_fround(0), $43_1 = Math_fround(0), $57_1 = 0, $62_1 = 0, $64_1 = 0, $69_1 = Math_fround(0), $87_1 = 0, $93_1 = 0, $99_1 = 0, $105_1 = 0, $110_1 = 0, $114_1 = 0, $117_1 = 0, $120_1 = 0, $123_1 = 0, $126_1 = 0, $131_1 = 0, $135_1 = 0, $140_1 = 0, $144_1 = 0, $149_1 = 0, $153_1 = 0, $25_1 = Math_fround(0), $344_1 = Math_fround(0), $359_1 = Math_fround(0), $44_1 = Math_fround(0), $580_1 = Math_fround(0), $585_1 = Math_fround(0);
  $4_1 = global$0 - 240 | 0;
  global$0 = $4_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($0_1 + 16 | 0) >> 2] | 0)) {
     break label$2
    }
    $555(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $57_1 = $5_1;
    $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    $62_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    $64_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    $69_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($5_1));
    $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    $0_1 = $564($4_1 + 160 | 0 | 0, $57_1 | 0, $6_1 | 0, $62_1 | 0, $64_1 | 0, Math_fround($69_1), Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($5_1))), HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    i64toi32_i32$2 = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$0;
    i64toi32_i32$0 = ($4_1 + 24 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $87_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1 + 24 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $93_1 = i64toi32_i32$1;
    i64toi32_i32$1 = ($4_1 + 24 | 0) + 24 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $93_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $1_1 + 40 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $99_1 = i64toi32_i32$0;
    i64toi32_i32$0 = ($4_1 + 24 | 0) + 40 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $99_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1 + 56 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $105_1 = i64toi32_i32$1;
    i64toi32_i32$1 = ($4_1 + 24 | 0) + 56 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $105_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $2_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $110_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1 + 96 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $110_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($4_1 + 152 | 0) >> 2] = 1566444395;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $114_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $114_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $117_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1;
    HEAP32[($4_1 + 40 | 0) >> 2] = $117_1;
    HEAP32[($4_1 + 44 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
    $120_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1;
    HEAP32[($4_1 + 56 | 0) >> 2] = $120_1;
    HEAP32[($4_1 + 60 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
    $123_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1;
    HEAP32[($4_1 + 72 | 0) >> 2] = $123_1;
    HEAP32[($4_1 + 76 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $126_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1;
    HEAP32[($4_1 + 88 | 0) >> 2] = $126_1;
    HEAP32[($4_1 + 92 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $131_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1 + 112 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $131_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $135_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1 + 104 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $135_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $140_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1 + 128 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $140_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
    $144_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1 + 120 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $144_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $149_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1 + 144 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $149_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
    $153_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1 + 136 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $153_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $565($0_1 | 0, $4_1 + 24 | 0 | 0, $3_1 | 0, 0 | 0, 0 | 0);
    break label$1;
   }
   $7_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
   $6_1 = $2_1 + 52 | 0;
   $9_1 = Math_fround(HEAPF32[$6_1 >> 2]);
   $10_1 = $2_1 + 56 | 0;
   $11_1 = Math_fround(HEAPF32[$10_1 >> 2]);
   $12_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
   $14_1 = $2_1 + 20 | 0;
   $15_1 = Math_fround(HEAPF32[$14_1 >> 2]);
   $16_1 = $2_1 + 36 | 0;
   $17_1 = Math_fround(HEAPF32[$16_1 >> 2]);
   $18_1 = $2_1 + 24 | 0;
   $19_1 = Math_fround(HEAPF32[$18_1 >> 2]);
   $20_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
   $21_1 = $2_1 + 40 | 0;
   $22_1 = Math_fround(HEAPF32[$21_1 >> 2]);
   $23_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
   $25_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $26_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $28_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $29_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $30_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
   $31_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
   $32_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $33_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $0_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   $34_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $35_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   HEAP32[($4_1 + 172 | 0) >> 2] = 0;
   $36_1 = Math_fround(Math_fround(Math_fround($35_1 * $32_1) + Math_fround($20_1 * $31_1)) + Math_fround($23_1 * $30_1));
   $37_1 = Math_fround(-Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]));
   $38_1 = Math_fround(Math_fround(Math_fround($35_1 * $33_1) + Math_fround($20_1 * $15_1)) + Math_fround($23_1 * $17_1));
   $1_1 = $0_1 + 56 | 0;
   $39_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $35_1 = Math_fround(Math_fround(Math_fround($35_1 * $34_1) + Math_fround($20_1 * $19_1)) + Math_fround($23_1 * $22_1));
   $40_1 = $0_1 + 60 | 0;
   $20_1 = Math_fround(HEAPF32[$40_1 >> 2]);
   HEAPF32[($4_1 + 168 | 0) >> 2] = Math_fround(Math_fround(Math_fround($36_1 * $37_1) - Math_fround($38_1 * $39_1)) - Math_fround($35_1 * $20_1));
   $41_1 = Math_fround(Math_fround(Math_fround($29_1 * $32_1) + Math_fround($12_1 * $31_1)) + Math_fround($13_1 * $30_1));
   $42_1 = Math_fround(Math_fround(Math_fround($29_1 * $33_1) + Math_fround($12_1 * $15_1)) + Math_fround($13_1 * $17_1));
   $29_1 = Math_fround(Math_fround(Math_fround($29_1 * $34_1) + Math_fround($12_1 * $19_1)) + Math_fround($13_1 * $22_1));
   HEAPF32[($4_1 + 164 | 0) >> 2] = Math_fround(Math_fround(Math_fround($41_1 * $37_1) - Math_fround($39_1 * $42_1)) - Math_fround($20_1 * $29_1));
   $43_1 = Math_fround(Math_fround(Math_fround($28_1 * $32_1) + Math_fround($27_1 * $31_1)) + Math_fround($26_1 * $30_1));
   $344_1 = Math_fround($43_1 * $37_1);
   $37_1 = Math_fround(Math_fround(Math_fround($28_1 * $33_1) + Math_fround($27_1 * $15_1)) + Math_fround($26_1 * $17_1));
   $359_1 = Math_fround($344_1 - Math_fround($39_1 * $37_1));
   $39_1 = Math_fround(Math_fround(Math_fround($28_1 * $34_1) + Math_fround($27_1 * $19_1)) + Math_fround($26_1 * $22_1));
   HEAPF32[($4_1 + 160 | 0) >> 2] = Math_fround($359_1 - Math_fround($20_1 * $39_1));
   FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($4_1 + 24 | 0, $5_1, $4_1 + 160 | 0);
   $12_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $13_1 = Math_fround(HEAPF32[$40_1 >> 2]);
   $44_1 = Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
   $27_1 = Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]);
   HEAP32[($4_1 + 172 | 0) >> 2] = 0;
   $28_1 = Math_fround(-$25_1);
   $30_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($24_1 * $32_1) + Math_fround($7_1 * $31_1)) + Math_fround($8_1 * $30_1)) + Math_fround(Math_fround(Math_fround($32_1 * $28_1) - Math_fround($31_1 * $9_1)) - Math_fround($30_1 * $11_1))) + Math_fround(Math_fround(Math_fround($43_1 * $23_1) + Math_fround($41_1 * $26_1)) + Math_fround($36_1 * $27_1)));
   $22_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($24_1 * $34_1) + Math_fround($7_1 * $19_1)) + Math_fround($8_1 * $22_1)) + Math_fround(Math_fround(Math_fround($34_1 * $28_1) - Math_fround($19_1 * $9_1)) - Math_fround($22_1 * $11_1))) + Math_fround(Math_fround(Math_fround($39_1 * $23_1) + Math_fround($29_1 * $26_1)) + Math_fround($35_1 * $27_1)));
   $19_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($24_1 * $33_1) + Math_fround($7_1 * $15_1)) + Math_fround($8_1 * $17_1)) + Math_fround(Math_fround(Math_fround($33_1 * $28_1) - Math_fround($15_1 * $9_1)) - Math_fround($17_1 * $11_1))) + Math_fround(Math_fround(Math_fround($37_1 * $23_1) + Math_fround($42_1 * $26_1)) + Math_fround($38_1 * $27_1)));
   $15_1 = Math_fround(Math_fround(Math_fround($13_1 * $22_1) + Math_fround(Math_fround($20_1 * $30_1) + Math_fround($12_1 * $19_1))) - $44_1);
   $17_1 = Math_fround($30_1 - Math_fround($20_1 * $15_1));
   $30_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
   $19_1 = Math_fround($19_1 - Math_fround($12_1 * $15_1));
   $31_1 = Math_fround(HEAPF32[$16_1 >> 2]);
   $22_1 = Math_fround($22_1 - Math_fround($13_1 * $15_1));
   $32_1 = Math_fround(HEAPF32[$21_1 >> 2]);
   HEAPF32[($4_1 + 168 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($17_1 * $30_1) + Math_fround($19_1 * $31_1)) + Math_fround($22_1 * $32_1)) + Math_fround(HEAPF32[$10_1 >> 2]));
   $33_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
   $34_1 = Math_fround(HEAPF32[$14_1 >> 2]);
   $7_1 = Math_fround(HEAPF32[$18_1 >> 2]);
   HEAPF32[($4_1 + 164 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($17_1 * $33_1) + Math_fround($19_1 * $34_1)) + Math_fround($22_1 * $7_1)) + Math_fround(HEAPF32[$6_1 >> 2]));
   $8_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $580_1 = Math_fround($8_1 * $22_1);
   $22_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $585_1 = Math_fround($22_1 * $17_1);
   $17_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   HEAPF32[($4_1 + 160 | 0) >> 2] = Math_fround(Math_fround($580_1 + Math_fround($585_1 + Math_fround($17_1 * $19_1))) + Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]));
   HEAP32[($4_1 + 20 | 0) >> 2] = 0;
   HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $30_1) + Math_fround($12_1 * $31_1)) + Math_fround($13_1 * $32_1));
   HEAPF32[($4_1 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $33_1) + Math_fround($12_1 * $34_1)) + Math_fround($13_1 * $7_1));
   HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround($22_1 * $20_1) + Math_fround($17_1 * $12_1)) + Math_fround($8_1 * $13_1));
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($3_1, $4_1 + 8 | 0, $4_1 + 160 | 0, $15_1);
  }
  global$0 = $4_1 + 240 | 0;
 }
 
 function $850($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $12_1 = Math_fround(0), $11_1 = Math_fround(0), i64toi32_i32$2 = 0, $13_1 = Math_fround(0), $17_1 = Math_fround(0), $7_1 = 0, $18_1 = Math_fround(0), $8_1 = Math_fround(0), $19_1 = Math_fround(0), $22_1 = 0, $23_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $26_1 = 0, $21_1 = Math_fround(0), $24_1 = 0, $20_1 = Math_fround(0), $242_1 = 0, $245_1 = 0, $25_1 = 0, $389_1 = 0, $392_1 = 0, $425_1 = 0, $439_1 = 0;
  $6_1 = global$0 - 304 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 300 | 0) >> 2] = 0;
  $8_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]) - Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]));
  HEAPF32[($6_1 + 296 | 0) >> 2] = $8_1;
  $9_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]) - Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]));
  HEAPF32[($6_1 + 292 | 0) >> 2] = $9_1;
  $10_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]));
  HEAPF32[($6_1 + 288 | 0) >> 2] = $10_1;
  $803($1_1 | 0, $2_1 | 0, $6_1 + 112 | 0 | 0, $6_1 + 48 | 0 | 0);
  HEAP32[($6_1 + 284 | 0) >> 2] = 0;
  $11_1 = Math_fround(HEAPF32[($6_1 + 48 | 0) >> 2]);
  $12_1 = Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 120 | 0) >> 2]));
  HEAPF32[($6_1 + 280 | 0) >> 2] = $12_1;
  $13_1 = Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 116 | 0) >> 2]));
  HEAPF32[($6_1 + 276 | 0) >> 2] = $13_1;
  $11_1 = Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 112 | 0) >> 2]));
  HEAPF32[($6_1 + 272 | 0) >> 2] = $11_1;
  HEAP32[($6_1 + 268 | 0) >> 2] = 0;
  $14_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]));
  HEAPF32[($6_1 + 264 | 0) >> 2] = $14_1;
  $15_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]));
  HEAPF32[($6_1 + 260 | 0) >> 2] = $15_1;
  $16_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 48 | 0) >> 2]) - Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]));
  HEAPF32[($6_1 + 256 | 0) >> 2] = $16_1;
  $803($3_1 | 0, $4_1 | 0, $6_1 + 112 | 0 | 0, $6_1 + 48 | 0 | 0);
  HEAP32[($6_1 + 252 | 0) >> 2] = 0;
  $17_1 = Math_fround(HEAPF32[($6_1 + 48 | 0) >> 2]);
  $18_1 = Math_fround($17_1 * Math_fround(HEAPF32[($6_1 + 120 | 0) >> 2]));
  HEAPF32[($6_1 + 248 | 0) >> 2] = $18_1;
  $19_1 = Math_fround($17_1 * Math_fround(HEAPF32[($6_1 + 116 | 0) >> 2]));
  HEAPF32[($6_1 + 244 | 0) >> 2] = $19_1;
  $17_1 = Math_fround($17_1 * Math_fround(HEAPF32[($6_1 + 112 | 0) >> 2]));
  HEAPF32[($6_1 + 240 | 0) >> 2] = $17_1;
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $20_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($4_1));
  $21_1 = Math_fround(0.0);
  label$1 : {
   $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   $21_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($4_1));
   $8_1 = Math_fround(HEAPF32[($6_1 + 296 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[($6_1 + 264 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[($6_1 + 292 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($6_1 + 260 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($6_1 + 288 | 0) >> 2]);
   $16_1 = Math_fround(HEAPF32[($6_1 + 256 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[($6_1 + 248 | 0) >> 2]);
   $19_1 = Math_fround(HEAPF32[($6_1 + 244 | 0) >> 2]);
   $17_1 = Math_fround(HEAPF32[($6_1 + 240 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[($6_1 + 280 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($6_1 + 276 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($6_1 + 272 | 0) >> 2]);
  }
  label$2 : {
   $19_1 = Math_fround(Math_fround($20_1 * Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($11_1 * $11_1) + Math_fround($13_1 * $13_1)) + Math_fround($12_1 * $12_1))))) + Math_fround($21_1 * Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($17_1 * $17_1) + Math_fround($19_1 * $19_1)) + Math_fround($18_1 * $18_1))))));
   $13_1 = Math_fround($16_1 - $10_1);
   $11_1 = Math_fround($15_1 - $9_1);
   $18_1 = Math_fround($14_1 - $8_1);
   if (Math_fround($19_1 + Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($11_1 * $11_1)) + Math_fround($18_1 * $18_1))))) == Math_fround(0.0)) {
    break label$2
   }
   $7_1 = 0;
   HEAP8[($6_1 + 216 | 0) >> 0] = 0;
   HEAP32[($6_1 + 212 | 0) >> 2] = 1566444395;
   HEAP32[($6_1 + 176 | 0) >> 2] = 15364;
   $849($0_1 | 0, $1_1 | 0, $3_1 | 0, $6_1 + 176 | 0 | 0);
   i64toi32_i32$2 = $6_1 + 204 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $242_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($6_1 + 224 | 0) + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $242_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = HEAP32[($6_1 + 196 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($6_1 + 200 | 0) >> 2] | 0;
   $245_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 224 | 0) >> 2] = $245_1;
   HEAP32[($6_1 + 228 | 0) >> 2] = i64toi32_i32$0;
   if (!(HEAPU8[($6_1 + 216 | 0) >> 0] | 0)) {
    break label$2
   }
   $2_1 = HEAP32[($6_1 + 180 | 0) >> 2] | 0;
   $22_1 = HEAP32[(($6_1 + 176 | 0) + 8 | 0) >> 2] | 0;
   $23_1 = HEAP32[($6_1 + 188 | 0) >> 2] | 0;
   if (Math_fround($19_1 + Math_fround(Math_fround(Math_fround($13_1 * (wasm2js_scratch_store_i32(0, $2_1), wasm2js_scratch_load_f32())) + Math_fround($11_1 * (wasm2js_scratch_store_i32(0, $22_1), wasm2js_scratch_load_f32()))) + Math_fround($18_1 * (wasm2js_scratch_store_i32(0, $23_1), wasm2js_scratch_load_f32())))) <= Math_fround(1.1920928955078125e-07)) {
    break label$2
   }
   $7_1 = 1;
   label$3 : {
    label$4 : {
     label$5 : {
      $8_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 212 | 0) >> 2]) + Math_fround(HEAPF32[($5_1 + 172 | 0) >> 2]));
      if (!($8_1 > Math_fround(1.0000000474974513e-03) ^ 1 | 0)) {
       break label$5
      }
      $13_1 = Math_fround(HEAPF32[($6_1 + 192 | 0) >> 2]);
      $12_1 = Math_fround(0.0);
      break label$4;
     }
     $24_1 = $6_1 + 20 | 0;
     $25_1 = $6_1 + 160 | 0;
     $4_1 = 0;
     $17_1 = Math_fround(0.0);
     label$6 : while (1) {
      label$7 : {
       $26_1 = HEAP32[($5_1 + 168 | 0) >> 2] | 0;
       if (!$26_1) {
        break label$7
       }
       i64toi32_i32$1 = $6_1;
       i64toi32_i32$0 = 0;
       HEAP32[($6_1 + 120 | 0) >> 2] = 1065353216;
       HEAP32[($6_1 + 124 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $6_1;
       i64toi32_i32$0 = 1065353216;
       HEAP32[($6_1 + 112 | 0) >> 2] = 1065353216;
       HEAP32[($6_1 + 116 | 0) >> 2] = i64toi32_i32$0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$26_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($26_1, $6_1 + 224 | 0, Math_fround(.20000000298023224), $6_1 + 112 | 0);
      }
      label$8 : {
       $12_1 = Math_fround($19_1 + Math_fround(Math_fround(Math_fround($13_1 * (wasm2js_scratch_store_i32(0, $2_1), wasm2js_scratch_load_f32())) + Math_fround($11_1 * (wasm2js_scratch_store_i32(0, $22_1), wasm2js_scratch_load_f32()))) + Math_fround($18_1 * (wasm2js_scratch_store_i32(0, $23_1), wasm2js_scratch_load_f32()))));
       if (!($12_1 <= Math_fround(1.1920928955078125e-07))) {
        break label$8
       }
       $7_1 = 0;
       break label$2;
      }
      label$9 : {
       $12_1 = Math_fround($17_1 + Math_fround($8_1 / $12_1));
       if (!($12_1 <= $17_1)) {
        break label$9
       }
       $7_1 = 0;
       break label$2;
      }
      label$10 : {
       if (!($12_1 < Math_fround(0.0))) {
        break label$10
       }
       $7_1 = 0;
       break label$2;
      }
      label$11 : {
       if (!($12_1 > Math_fround(1.0))) {
        break label$11
       }
       $7_1 = 0;
       break label$2;
      }
      $801($1_1 | 0, $6_1 + 288 | 0 | 0, $6_1 + 272 | 0 | 0, Math_fround($12_1), $6_1 + 112 | 0 | 0);
      $801($3_1 | 0, $6_1 + 256 | 0 | 0, $6_1 + 240 | 0 | 0, Math_fround($12_1), $6_1 + 48 | 0 | 0);
      label$12 : {
       $2_1 = HEAP32[($5_1 + 168 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$12
       }
       i64toi32_i32$1 = $6_1;
       i64toi32_i32$0 = 0;
       HEAP32[($6_1 + 8 | 0) >> 2] = 0;
       HEAP32[($6_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $6_1;
       i64toi32_i32$0 = 0;
       HEAP32[$6_1 >> 2] = 1065353216;
       HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($2_1, $25_1, Math_fround(.20000000298023224), $6_1);
      }
      FUNCTION_TABLE[HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0]($5_1, $12_1);
      HEAP8[($6_1 + 40 | 0) >> 0] = 0;
      HEAP32[($6_1 + 36 | 0) >> 2] = 1566444395;
      HEAP32[$6_1 >> 2] = 15364;
      $849($0_1 | 0, $6_1 + 112 | 0 | 0, $6_1 + 48 | 0 | 0, $6_1 | 0);
      if (!(HEAPU8[($6_1 + 40 | 0) >> 0] | 0)) {
       break label$3
      }
      i64toi32_i32$2 = $24_1 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $389_1 = i64toi32_i32$0;
      i64toi32_i32$0 = ($6_1 + 224 | 0) + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $389_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $24_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $392_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $6_1;
      HEAP32[($6_1 + 224 | 0) >> 2] = $392_1;
      HEAP32[($6_1 + 228 | 0) >> 2] = i64toi32_i32$0;
      label$13 : {
       if ($4_1 >>> 0 <= 63 >>> 0) {
        break label$13
       }
       FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($5_1, -2, $4_1 + 1 | 0);
       $7_1 = 0;
       break label$2;
      }
      $4_1 = $4_1 + 1 | 0;
      $2_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
      $22_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
      $23_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
      $17_1 = $12_1;
      $8_1 = Math_fround(Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]) + Math_fround(HEAPF32[($5_1 + 172 | 0) >> 2]));
      if ($8_1 > Math_fround(1.0000000474974513e-03)) {
       continue label$6
      }
      break label$6;
     };
     $13_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
    }
    HEAP32[($5_1 + 132 | 0) >> 2] = $2_1;
    HEAPF32[($5_1 + 164 | 0) >> 2] = $12_1;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = HEAP32[($6_1 + 224 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($6_1 + 228 | 0) >> 2] | 0;
    $425_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $5_1;
    HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = $425_1;
    HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] = i64toi32_i32$1;
    HEAPF32[(i64toi32_i32$0 + 144 | 0) >> 2] = $13_1;
    HEAP32[(i64toi32_i32$0 + 140 | 0) >> 2] = $23_1;
    HEAP32[(i64toi32_i32$0 + 136 | 0) >> 2] = $22_1;
    i64toi32_i32$2 = $6_1 + 232 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $439_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $5_1 + 156 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $439_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$2;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($5_1, -1, $4_1);
   $7_1 = 0;
  }
  global$0 = $6_1 + 304 | 0;
  return $7_1 | 0;
 }
 
 function $851($0_1) {
  $0_1 = $0_1 | 0;
  $581($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $852($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $12_1 = 0, $15_1 = 0, $20_1 = 0;
  HEAP32[$0_1 >> 2] = 20460;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $7_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 12 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = $15_1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 28 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $20_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 40 | 0) >> 2] = 1065353216;
  HEAP32[($0_1 + 36 | 0) >> 2] = $3_1;
  return $0_1 | 0;
 }
 
 function $853($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $17_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $4_1 = 0, $9_1 = Math_fround(0), $18_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $13_1 = Math_fround(0), $19_1 = Math_fround(0), $16_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $12_1 = Math_fround(0), $22_1 = Math_fround(0), $5_1 = Math_fround(0), $20_1 = Math_fround(0), $23_1 = Math_fround(0), $21_1 = Math_fround(0), $25_1 = Math_fround(0), $6_1 = Math_fround(0), $24_1 = Math_fround(0), $79_1 = Math_fround(0), $175_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  HEAP32[($4_1 + 28 | 0) >> 2] = 0;
  $14_1 = Math_fround($10_1 - $13_1);
  $15_1 = Math_fround($7_1 - $11_1);
  $16_1 = Math_fround($8_1 - $11_1);
  $17_1 = Math_fround($12_1 - $13_1);
  $18_1 = Math_fround(Math_fround($14_1 * $15_1) - Math_fround($16_1 * $17_1));
  HEAPF32[($4_1 + 24 | 0) >> 2] = $18_1;
  $19_1 = Math_fround($5_1 - $9_1);
  $79_1 = Math_fround($19_1 * $17_1);
  $17_1 = Math_fround($6_1 - $9_1);
  $14_1 = Math_fround($79_1 - Math_fround($14_1 * $17_1));
  HEAPF32[($4_1 + 20 | 0) >> 2] = $14_1;
  $15_1 = Math_fround(Math_fround($16_1 * $17_1) - Math_fround($19_1 * $15_1));
  HEAPF32[($4_1 + 16 | 0) >> 2] = $15_1;
  label$1 : {
   $19_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]);
   $17_1 = Math_fround(Math_fround($9_1 * $18_1) + Math_fround(Math_fround($13_1 * $15_1) + Math_fround($11_1 * $14_1)));
   $16_1 = Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $19_1) + Math_fround($14_1 * $20_1)) + Math_fround($18_1 * $21_1)) - $17_1);
   $22_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
   $17_1 = Math_fround(Math_fround(Math_fround(Math_fround($15_1 * $22_1) + Math_fround($14_1 * $23_1)) + Math_fround($18_1 * $24_1)) - $17_1);
   if (Math_fround($16_1 * $17_1) >= Math_fround(0.0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   label$2 : {
    if ($16_1 <= Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    if ($1_1 & 1 | 0) {
     break label$1
    }
   }
   $17_1 = Math_fround($16_1 / Math_fround($16_1 - $17_1));
   if ($17_1 < Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]) ^ 1 | 0) {
    break label$1
   }
   $175_1 = Math_fround($23_1 * $17_1);
   $23_1 = Math_fround(Math_fround(1.0) - $17_1);
   $20_1 = Math_fround($175_1 + Math_fround($20_1 * $23_1));
   $8_1 = Math_fround($8_1 - $20_1);
   $19_1 = Math_fround(Math_fround($22_1 * $17_1) + Math_fround($19_1 * $23_1));
   $22_1 = Math_fround($13_1 - $19_1);
   $25_1 = Math_fround($11_1 - $20_1);
   $11_1 = Math_fround($10_1 - $19_1);
   $10_1 = Math_fround(Math_fround($24_1 * $17_1) + Math_fround($21_1 * $23_1));
   $13_1 = Math_fround($5_1 - $10_1);
   $9_1 = Math_fround($9_1 - $10_1);
   $21_1 = Math_fround(Math_fround($18_1 * $18_1) + Math_fround(Math_fround($15_1 * $15_1) + Math_fround($14_1 * $14_1)));
   $5_1 = Math_fround($21_1 * Math_fround(-9.999999747378752e-05));
   if (Math_fround(Math_fround($18_1 * Math_fround(Math_fround($8_1 * $22_1) - Math_fround($25_1 * $11_1))) + Math_fround(Math_fround($15_1 * Math_fround(Math_fround($25_1 * $13_1) - Math_fround($9_1 * $8_1))) + Math_fround($14_1 * Math_fround(Math_fround($9_1 * $11_1) - Math_fround($13_1 * $22_1))))) >= $5_1 ^ 1 | 0) {
    break label$1
   }
   $7_1 = Math_fround($7_1 - $20_1);
   $12_1 = Math_fround($12_1 - $19_1);
   $10_1 = Math_fround($6_1 - $10_1);
   if (Math_fround(Math_fround($18_1 * Math_fround(Math_fround($7_1 * $11_1) - Math_fround($8_1 * $12_1))) + Math_fround(Math_fround($15_1 * Math_fround(Math_fround($8_1 * $10_1) - Math_fround($13_1 * $7_1))) + Math_fround($14_1 * Math_fround(Math_fround($13_1 * $12_1) - Math_fround($10_1 * $11_1))))) >= $5_1 ^ 1 | 0) {
    break label$1
   }
   if (Math_fround(Math_fround($18_1 * Math_fround(Math_fround($25_1 * $12_1) - Math_fround($7_1 * $22_1))) + Math_fround(Math_fround($15_1 * Math_fround(Math_fround($7_1 * $9_1) - Math_fround($10_1 * $25_1))) + Math_fround($14_1 * Math_fround(Math_fround($10_1 * $22_1) - Math_fround($9_1 * $12_1))))) >= $5_1 ^ 1 | 0) {
    break label$1
   }
   $9_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($21_1)));
   $18_1 = Math_fround($18_1 * $9_1);
   HEAPF32[($4_1 + 24 | 0) >> 2] = $18_1;
   $14_1 = Math_fround($14_1 * $9_1);
   HEAPF32[($4_1 + 20 | 0) >> 2] = $14_1;
   $15_1 = Math_fround($15_1 * $9_1);
   HEAPF32[($4_1 + 16 | 0) >> 2] = $15_1;
   label$3 : {
    if ($16_1 <= Math_fround(0.0) ^ 1 | 0) {
     break label$3
    }
    if ($1_1 & 2 | 0) {
     break label$3
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(-$18_1);
    HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(-$14_1);
    HEAPF32[$4_1 >> 2] = Math_fround(-$15_1);
    (wasm2js_i32$0 = $0_1, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1, $4_1, $17_1, $2_1, $3_1))), HEAPF32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_f32$0;
    break label$1;
   }
   (wasm2js_i32$0 = $0_1, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1, $4_1 + 16 | 0, $17_1, $2_1, $3_1))), HEAPF32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_f32$0;
  }
  global$0 = $4_1 + 32 | 0;
 }
 
 function $854($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $13_1 = 0, $16_1 = 0, $21_1 = 0, $25_1 = 0, $30_1 = 0, $34_1 = 0, $39_1 = 0, $43_1 = 0, $48_1 = 0, $51_1 = 0, $56_1 = 0, $60_1 = 0, $65_1 = 0, $69_1 = 0, $74_1 = 0, $78_1 = 0, $83_1 = 0, $86_1 = 0, $91_1 = 0, $95_1 = 0, $100_1 = 0, $104_1 = 0, $109_1 = 0, $113_1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 20484;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $21_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 32 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $21_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $25_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $25_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $30_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 48 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $30_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $34_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $34_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $39_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 64 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $39_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $43_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $43_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $48_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 80 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $48_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $51_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = $51_1;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $56_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 96 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $56_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $60_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 88 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $60_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $65_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 112 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $65_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $69_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 104 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $69_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $74_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 128 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $74_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $78_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 120 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $78_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 144 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $83_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $86_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 136 | 0) >> 2] = $86_1;
  HEAP32[(i64toi32_i32$1 + 140 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $91_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 160 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $91_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $95_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 152 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $95_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $100_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 176 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $100_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $104_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 168 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $104_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $109_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 192 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $109_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $113_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 184 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 208 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 204 | 0) >> 2] = $5_1;
  HEAP32[($0_1 + 200 | 0) >> 2] = 1065353216;
  return $0_1 | 0;
 }
 
 function $855($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $10_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $6_1 = 0, $11_1 = Math_fround(0), $5_1 = 0, $22_1 = 0, $26_1 = 0, $31_1 = 0, $35_1 = 0, $40_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 688 | 0;
  global$0 = $4_1;
  $5_1 = $179($4_1 + 576 | 0 | 0) | 0;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $22_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + 644 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $26_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + 652 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $26_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $31_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + 660 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $31_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + 668 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $35_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $40_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + 676 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $40_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($4_1 + 580 | 0) >> 2] = 1;
  HEAP32[($4_1 + 576 | 0) >> 2] = 16352;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $45_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[($4_1 + 636 | 0) >> 2] = $45_1;
  HEAP32[($4_1 + 640 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 624 | 0) >> 2] = HEAP32[($0_1 + 204 | 0) >> 2] | 0;
  HEAP8[($4_1 + 548 | 0) >> 0] = 0;
  HEAP32[($4_1 + 524 | 0) >> 2] = 953267991;
  HEAP32[($4_1 + 208 | 0) >> 2] = 14800;
  $1_1 = $847($4_1 + 184 | 0 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $4_1 + 576 | 0 | 0, $4_1 + 216 | 0 | 0, $4_1 + 208 | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 15992;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[($4_1 + 172 | 0) >> 2] = 1065353216;
  HEAP32[($4_1 + 176 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 180 | 0) >> 2] = HEAP32[($0_1 + 208 | 0) >> 2] | 0;
  label$1 : {
   $6_1 = $0_1 + 136 | 0;
   if (!($850($1_1 | 0, $0_1 + 8 | 0 | 0, $0_1 + 72 | 0 | 0, $6_1 | 0, $6_1 | 0, $4_1 + 8 | 0 | 0) | 0)) {
    break label$1
   }
   $7_1 = Math_fround(HEAPF32[($4_1 + 140 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[(($4_1 + 8 | 0) + 136 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[($4_1 + 148 | 0) >> 2]);
   $10_1 = Math_fround(Math_fround(Math_fround($7_1 * $7_1) + Math_fround($8_1 * $8_1)) + Math_fround($9_1 * $9_1));
   if ($10_1 > Math_fround(9.999999747378752e-05) ^ 1 | 0) {
    break label$1
   }
   $11_1 = Math_fround(HEAPF32[($4_1 + 172 | 0) >> 2]);
   if ($11_1 < Math_fround(HEAPF32[($0_1 + 200 | 0) >> 2]) ^ 1 | 0) {
    break label$1
   }
   $10_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($10_1)));
   HEAPF32[($4_1 + 148 | 0) >> 2] = Math_fround($9_1 * $10_1);
   HEAPF32[($4_1 + 144 | 0) >> 2] = Math_fround($8_1 * $10_1);
   HEAPF32[($4_1 + 140 | 0) >> 2] = Math_fround($7_1 * $10_1);
   Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1, $4_1 + 140 | 0, $4_1 + 156 | 0, $11_1, $2_1, $3_1));
  }
  $581($1_1 | 0) | 0;
  $193($5_1 | 0) | 0;
  global$0 = $4_1 + 688 | 0;
 }
 
 function $856($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $857($0_1) {
  $0_1 = $0_1 | 0;
  abort();
 }
 
 function $858($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 20592;
  HEAP8[($0_1 + 76 | 0) >> 0] = 1;
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = $2_1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 64 | 0) >> 2] = 0;
  HEAP8[($0_1 + 60 | 0) >> 0] = 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = 1025758986;
  HEAP8[($0_1 + 54 | 0) >> 0] = 1;
  HEAP16[($0_1 + 52 | 0) >> 1] = 256;
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  HEAP8[($0_1 + 44 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 36 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $859($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  HEAP32[$0_1 >> 2] = 20592;
  $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   $4_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $5_1 = HEAP32[($1_1 + $3_1 | 0) >> 2] | 0;
     $6_1 = HEAP32[($5_1 + 188 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$3
     }
     $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
     $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($1_1) | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($1_1, $6_1, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
     $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($1_1, $6_1, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
     HEAP32[($5_1 + 188 | 0) >> 2] = 0;
     $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    $3_1 = $3_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$4 : {
   if (!$1_1) {
    break label$4
   }
   label$5 : {
    if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
     break label$5
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  return $0_1 | 0;
 }
 
 function $860($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0, $5_1 = 0;
  HEAP32[$0_1 >> 2] = 20592;
  $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   $4_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $5_1 = HEAP32[($1_1 + $3_1 | 0) >> 2] | 0;
     $6_1 = HEAP32[($5_1 + 188 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$3
     }
     $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
     $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($1_1) | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($1_1, $6_1, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
     $1_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($1_1, $6_1, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
     HEAP32[($5_1 + 188 | 0) >> 2] = 0;
     $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    $3_1 = $3_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$4 : {
   if (!$1_1) {
    break label$4
   }
   if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
    break label$4
   }
   $80($1_1 | 0);
  }
  $37($0_1 | 0);
 }
 
 function $861($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $86_1 = 0, $91_1 = 0, $96_1 = 0, $101_1 = 0, $104_1 = 0, $108_1 = 0, $112_1 = 0, $116_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  HEAP32[($1_1 + 216 | 0) >> 2] = $5_1;
  label$1 : {
   if (($5_1 | 0) != (HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $6_1 = $5_1 ? $5_1 << 1 | 0 : 1;
   if (($5_1 | 0) >= ($6_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($6_1) {
      break label$3
     }
     $7_1 = 0;
     break label$2;
    }
    $7_1 = $79($6_1 << 2 | 0 | 0, 16 | 0) | 0;
    $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   }
   label$4 : {
    if (($5_1 | 0) < (1 | 0)) {
     break label$4
    }
    $8_1 = 0;
    $9_1 = $5_1;
    label$5 : while (1) {
     HEAP32[($7_1 + $8_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $8_1 | 0) >> 2] | 0;
     $8_1 = $8_1 + 4 | 0;
     $9_1 = $9_1 + -1 | 0;
     if ($9_1) {
      continue label$5
     }
     break label$5;
    };
   }
   label$6 : {
    $8_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if (!$8_1) {
     break label$6
    }
    label$7 : {
     if (!(HEAPU8[($0_1 + 20 | 0) >> 0] | 0)) {
      break label$7
     }
     $80($8_1 | 0);
     $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 16 | 0) >> 2] = $7_1;
   HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
   HEAP8[($0_1 + 20 | 0) >> 0] = 1;
  }
  HEAP32[($0_1 + 8 | 0) >> 2] = $5_1 + 1 | 0;
  HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($5_1 << 2 | 0) | 0) >> 2] = $1_1;
  i64toi32_i32$2 = $1_1 + 12 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $86_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($4_1 + 32 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $86_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 28 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $91_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $91_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 44 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $96_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + 72 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $96_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 60 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $101_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + 88 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $101_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  $104_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = $104_1;
  HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 20 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $108_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $108_1;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1 + 36 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $112_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = $112_1;
  HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 52 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $116_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = $116_1;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  $8_1 = HEAP32[($1_1 + 192 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($8_1, i64toi32_i32$1 + 32 | 0, i64toi32_i32$1 + 16 | 0, i64toi32_i32$1);
  $8_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $1_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($8_1, i64toi32_i32$1 + 16 | 0, i64toi32_i32$1, HEAP32[((HEAP32[($1_1 + 192 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, $1_1, $2_1, $3_1, HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0), HEAP32[(wasm2js_i32$0 + 188 | 0) >> 2] = wasm2js_i32$1;
  global$0 = i64toi32_i32$1 + 96 | 0;
 }
 
 function $862($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = Math_fround(0), $8_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $3_1 = 0, $5_1 = Math_fround(0), $202_1 = Math_fround(0), $209_1 = Math_fround(0);
  $2_1 = global$0 - 64 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($1_1 + 192 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($3_1, $1_1 + 4 | 0, $2_1 + 48 | 0, $2_1 + 32 | 0);
  $4_1 = Math_fround(HEAPF32[(0 + 2976 | 0) >> 2]);
  $5_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]) - $4_1);
  HEAPF32[($2_1 + 48 | 0) >> 2] = $5_1;
  $6_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]) - $4_1);
  HEAPF32[($2_1 + 52 | 0) >> 2] = $6_1;
  $7_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]) - $4_1);
  HEAPF32[($2_1 + 56 | 0) >> 2] = $7_1;
  $8_1 = Math_fround($4_1 + Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]));
  HEAPF32[($2_1 + 32 | 0) >> 2] = $8_1;
  $9_1 = Math_fround($4_1 + Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]));
  HEAPF32[($2_1 + 36 | 0) >> 2] = $9_1;
  $10_1 = Math_fround($4_1 + Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]));
  HEAPF32[($2_1 + 40 | 0) >> 2] = $10_1;
  label$1 : {
   if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
    break label$1
   }
   if ((HEAP32[($1_1 + 252 | 0) >> 2] | 0 | 0) != (2 | 0)) {
    break label$1
   }
   if ((HEAPU8[($1_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
    break label$1
   }
   $3_1 = HEAP32[($1_1 + 192 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($3_1, $1_1 + 68 | 0, $2_1 + 16 | 0, $2_1);
   $6_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]) - $4_1);
   HEAPF32[($2_1 + 16 | 0) >> 2] = $6_1;
   $7_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]) - $4_1);
   HEAPF32[($2_1 + 20 | 0) >> 2] = $7_1;
   $8_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]) - $4_1);
   HEAPF32[($2_1 + 24 | 0) >> 2] = $8_1;
   $9_1 = Math_fround($4_1 + Math_fround(HEAPF32[$2_1 >> 2]));
   HEAPF32[$2_1 >> 2] = $9_1;
   $10_1 = Math_fround($4_1 + Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]));
   HEAPF32[($2_1 + 4 | 0) >> 2] = $10_1;
   $4_1 = Math_fround($4_1 + Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]));
   HEAPF32[($2_1 + 8 | 0) >> 2] = $4_1;
   label$2 : {
    $5_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
    if ($6_1 < $5_1 ^ 1 | 0) {
     break label$2
    }
    HEAPF32[($2_1 + 48 | 0) >> 2] = $6_1;
    $5_1 = $6_1;
   }
   label$3 : {
    $6_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
    if ($7_1 < $6_1 ^ 1 | 0) {
     break label$3
    }
    HEAPF32[($2_1 + 52 | 0) >> 2] = $7_1;
    $6_1 = $7_1;
   }
   label$4 : {
    $7_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
    if ($8_1 < $7_1 ^ 1 | 0) {
     break label$4
    }
    HEAPF32[($2_1 + 56 | 0) >> 2] = $8_1;
    $7_1 = $8_1;
   }
   label$5 : {
    $8_1 = Math_fround(HEAPF32[($2_1 + 28 | 0) >> 2]);
    if ($8_1 < Math_fround(HEAPF32[($2_1 + 60 | 0) >> 2]) ^ 1 | 0) {
     break label$5
    }
    HEAPF32[($2_1 + 60 | 0) >> 2] = $8_1;
   }
   label$6 : {
    $8_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
    if ($8_1 < $9_1 ^ 1 | 0) {
     break label$6
    }
    HEAPF32[($2_1 + 32 | 0) >> 2] = $9_1;
    $8_1 = $9_1;
   }
   label$7 : {
    $9_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
    if ($9_1 < $10_1 ^ 1 | 0) {
     break label$7
    }
    HEAPF32[($2_1 + 36 | 0) >> 2] = $10_1;
    $9_1 = $10_1;
   }
   label$8 : {
    $10_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
    if ($10_1 < $4_1 ^ 1 | 0) {
     break label$8
    }
    HEAPF32[($2_1 + 40 | 0) >> 2] = $4_1;
    $10_1 = $4_1;
   }
   $4_1 = Math_fround(HEAPF32[($2_1 + 12 | 0) >> 2]);
   if (Math_fround(HEAPF32[($2_1 + 44 | 0) >> 2]) < $4_1 ^ 1 | 0) {
    break label$1
   }
   HEAPF32[($2_1 + 44 | 0) >> 2] = $4_1;
  }
  $3_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  label$9 : {
   label$10 : {
    label$11 : {
     if ((HEAPU8[($1_1 + 204 | 0) >> 0] | 0) & 1 | 0) {
      break label$11
     }
     $4_1 = Math_fround($8_1 - $5_1);
     $202_1 = Math_fround($4_1 * $4_1);
     $4_1 = Math_fround($9_1 - $6_1);
     $209_1 = Math_fround($202_1 + Math_fround($4_1 * $4_1));
     $4_1 = Math_fround($10_1 - $7_1);
     if (Math_fround($209_1 + Math_fround($4_1 * $4_1)) < Math_fround(999999995904.0) ^ 1 | 0) {
      break label$10
     }
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($3_1, HEAP32[($1_1 + 188 | 0) >> 2] | 0, $2_1 + 48 | 0, $2_1 + 32 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
    break label$9;
   }
   $308($1_1 | 0, 5 | 0);
   if (HEAPU8[(0 + 2804 | 0) >> 0] | 0) {
    break label$9
   }
   $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$9
   }
   HEAP8[(0 + 2804 | 0) >> 0] = 1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($1_1, 20644);
   $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($1_1, 20693);
   $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($1_1, 20761);
   $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($1_1, 20826);
  }
  global$0 = $2_1 + 64 | 0;
 }
 
 function $863($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $616($1_1 + 8 | 0 | 0, 20835 | 0) | 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $4_1 = 0;
   $5_1 = 0;
   label$2 : while (1) {
    $6_1 = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $4_1 | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      if (HEAPU8[($0_1 + 76 | 0) >> 0] | 0) {
       break label$4
      }
      $7_1 = (HEAP32[($6_1 + 220 | 0) >> 2] | 0) + -2 | 0;
      if ($7_1 >>> 0 > 3 >>> 0) {
       break label$4
      }
      switch ($7_1 | 0) {
      case 1:
      case 2:
       break label$4;
      default:
       break label$3;
      };
     }
     $862($0_1 | 0, $6_1 | 0);
     $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    $4_1 = $4_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $617($2_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $864($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $616($1_1 + 8 | 0 | 0, 20847 | 0) | 0;
  $3_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($3_1, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
  $617($2_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $865($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $5_1 = 0, $2_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $616($1_1 + 8 | 0 | 0, 20873 | 0) | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1);
  $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $4_1 = $616($1_1 | 0, 20907 | 0) | 0;
  label$1 : {
   if (!$3_1) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   ((((wasm2js_i32$1 = $3_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($5_1) | 0), wasm2js_i32$3 = $0_1 + 28 | 0), wasm2js_i32$4 = HEAP32[($0_1 + 24 | 0) >> 2] | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$3_1 >> 2] | 0) + 32 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0);
  }
  $617($4_1 | 0) | 0;
  $617($2_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $866($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($1_1 + 188 | 0) >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($3_1) | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($3_1, $2_1, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
   $3_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($3_1, $2_1, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
   HEAP32[($1_1 + 188 | 0) >> 2] = 0;
  }
  $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    $2_1 = HEAP32[($1_1 + 216 | 0) >> 2] | 0;
    if (($2_1 | 0) < (0 | 0)) {
     break label$3
    }
    if (($2_1 | 0) >= ($4_1 | 0)) {
     break label$3
    }
    $5_1 = $0_1 + 16 | 0;
    $6_1 = HEAP32[$5_1 >> 2] | 0;
    $7_1 = $2_1 << 2 | 0;
    $8_1 = $6_1 + $7_1 | 0;
    $9_1 = HEAP32[$8_1 >> 2] | 0;
    $3_1 = $4_1 + -1 | 0;
    $4_1 = $3_1 << 2 | 0;
    HEAP32[$8_1 >> 2] = HEAP32[($6_1 + $4_1 | 0) >> 2] | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    HEAP32[((HEAP32[$5_1 >> 2] | 0) + $4_1 | 0) >> 2] = $9_1;
    if (($2_1 | 0) >= ($3_1 | 0)) {
     break label$2
    }
    HEAP32[((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $7_1 | 0) >> 2] | 0) + 216 | 0) >> 2] = $2_1;
    break label$2;
   }
   if (($4_1 | 0) < (1 | 0)) {
    break label$2
   }
   $3_1 = 0;
   $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   $2_1 = $5_1;
   label$4 : {
    label$5 : while (1) {
     if ((HEAP32[$2_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$4
     }
     $2_1 = $2_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     if (($4_1 | 0) != ($3_1 | 0)) {
      continue label$5
     }
     break label$2;
    };
   }
   if (($4_1 | 0) <= ($3_1 | 0)) {
    break label$2
   }
   $3_1 = $4_1 + -1 | 0;
   $4_1 = $3_1 << 2 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[($5_1 + $4_1 | 0) >> 2] | 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
   HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $4_1 | 0) >> 2] = $1_1;
  }
  HEAP32[($1_1 + 216 | 0) >> 2] = -1;
 }
 
 function $867($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $10_1 = Math_fround(0), $6_1 = 0, $9_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $21_1 = Math_fround(0), $14_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $20_1 = Math_fround(0), $7_1 = 0, $19_1 = Math_fround(0), $15_1 = Math_fround(0), $27_1 = Math_fround(0), $29_1 = Math_fround(0), $26_1 = Math_fround(0), $22_1 = Math_fround(0), $24_1 = Math_fround(0), $23_1 = Math_fround(0), $25_1 = Math_fround(0), $32_1 = Math_fround(0), $28_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $8_1 = 0, $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $155_1 = 0, $160_1 = 0, $313_1 = Math_fround(0), $339_1 = Math_fround(0), $389_1 = 0, $392_1 = 0, $397_1 = 0, $401_1 = 0, $406_1 = 0, $410_1 = 0, $414_1 = 0, $418_1 = 0, $494_1 = Math_fround(0), $566_1 = 0, $569_1 = 0, $573_1 = 0, $578_1 = 0, $583_1 = 0, $587_1 = 0, $591_1 = 0, $595_1 = 0, $603_1 = 0, $606_1 = 0, $649_1 = 0, $652_1 = 0, $731_1 = Math_fround(0), $765_1 = Math_fround(0), $783_1 = Math_fround(0), $810_1 = Math_fround(0);
  $4_1 = global$0 - 704 | 0;
  global$0 = $4_1;
  $145($4_1 + 624 | 0 | 0) | 0;
  i64toi32_i32$1 = $4_1 + 652 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 660 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 668 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 676 | 0) >> 2] = 0;
  HEAP32[($4_1 + 648 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[($4_1 + 640 | 0) >> 2] = 1065353216;
  HEAP32[($4_1 + 644 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 628 | 0) >> 2] = 8;
  HEAP32[($4_1 + 624 | 0) >> 2] = 9852;
  $5_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $6_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $7_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    if (($7_1 | 0) > (19 | 0)) {
     break label$2
    }
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = 0;
    HEAP32[($4_1 + 616 | 0) >> 2] = 0;
    HEAP32[($4_1 + 620 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($4_1 + 448 | 0) >> 2] = 15992;
    HEAP32[($4_1 + 612 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAP8[($4_1 + 420 | 0) >> 0] = 0;
    HEAP32[($4_1 + 396 | 0) >> 2] = 953267991;
    $7_1 = $618($4_1 + 680 | 0 | 0, $4_1 + 624 | 0 | 0, $6_1 | 0, $4_1 + 88 | 0 | 0) | 0;
    label$3 : {
     $6_1 = $582($4_1 + 72 | 0 | 0, $4_1 + 624 | 0 | 0, $6_1 | 0, $4_1 + 88 | 0 | 0) | 0;
     $8_1 = (HEAP32[($3_1 + 20 | 0) >> 2] | 0) & 8 | 0 ? $6_1 : $7_1;
     if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($8_1, $0_1, $1_1, $5_1, $5_1, $4_1 + 448 | 0) | 0)) {
      break label$3
     }
     $9_1 = Math_fround(HEAPF32[($4_1 + 580 | 0) >> 2]);
     $10_1 = Math_fround(HEAPF32[($4_1 + 584 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($4_1 + 588 | 0) >> 2]);
     $12_1 = Math_fround(Math_fround(Math_fround($9_1 * $9_1) + Math_fround($10_1 * $10_1)) + Math_fround($11_1 * $11_1));
     if ($12_1 > Math_fround(9.999999747378752e-05) ^ 1 | 0) {
      break label$3
     }
     $13_1 = Math_fround(HEAPF32[($4_1 + 612 | 0) >> 2]);
     if ($13_1 < Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) ^ 1 | 0) {
      break label$3
     }
     $12_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($12_1)));
     HEAPF32[($4_1 + 588 | 0) >> 2] = Math_fround($11_1 * $12_1);
     HEAPF32[($4_1 + 584 | 0) >> 2] = Math_fround($10_1 * $12_1);
     HEAPF32[($4_1 + 580 | 0) >> 2] = Math_fround($9_1 * $12_1);
     $5_1 = $4_1 + 580 | 0;
     i64toi32_i32$2 = $5_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $155_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $4_1 + 56 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $155_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAPF32[($4_1 + 64 | 0) >> 2] = $13_1;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$1 = HEAP32[$5_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
     $160_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $4_1;
     HEAP32[($4_1 + 48 | 0) >> 2] = $160_1;
     HEAP32[($4_1 + 52 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($4_1 + 44 | 0) >> 2] = 0;
     HEAP32[($4_1 + 40 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($3_1, $4_1 + 40 | 0, 1));
    }
    $581($6_1 | 0) | 0;
    $581($7_1 | 0) | 0;
    break label$1;
   }
   label$4 : {
    if (($7_1 + -21 | 0) >>> 0 > 8 >>> 0) {
     break label$4
    }
    $11_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
    $12_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($5_1 + 52 | 0) >> 2]);
    $14_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
    $7_1 = $5_1 + 56 | 0;
    $15_1 = Math_fround(HEAPF32[$7_1 >> 2]);
    $16_1 = Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[$5_1 >> 2]);
    $18_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
    $19_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
    HEAP32[($4_1 + 460 | 0) >> 2] = 0;
    $22_1 = Math_fround(-$10_1);
    $23_1 = Math_fround($13_1 * $22_1);
    $24_1 = Math_fround(-$15_1);
    $25_1 = Math_fround($14_1 * $24_1);
    $26_1 = Math_fround(Math_fround($23_1 - Math_fround($21_1 * $20_1)) + $25_1);
    $9_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
    $27_1 = Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]);
    $28_1 = Math_fround($13_1 * $27_1);
    $29_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
    $30_1 = Math_fround($14_1 * $29_1);
    HEAPF32[($4_1 + 456 | 0) >> 2] = Math_fround($26_1 + Math_fround(Math_fround(Math_fround($21_1 * $9_1) + $28_1) + $30_1));
    $20_1 = Math_fround(-$20_1);
    $31_1 = Math_fround($12_1 * $24_1);
    $32_1 = Math_fround(Math_fround(Math_fround($19_1 * $20_1) - Math_fround($11_1 * $10_1)) + $31_1);
    $33_1 = Math_fround($12_1 * $29_1);
    HEAPF32[($4_1 + 452 | 0) >> 2] = Math_fround($32_1 + Math_fround(Math_fround(Math_fround($19_1 * $9_1) + Math_fround($11_1 * $27_1)) + $33_1));
    $15_1 = Math_fround(Math_fround(Math_fround($17_1 * $20_1) - Math_fround($18_1 * $10_1)) - Math_fround($16_1 * $15_1));
    HEAPF32[($4_1 + 448 | 0) >> 2] = Math_fround($15_1 + Math_fround(Math_fround(Math_fround($17_1 * $9_1) + Math_fround($18_1 * $27_1)) + Math_fround($16_1 * $29_1)));
    HEAP32[($4_1 + 52 | 0) >> 2] = 0;
    $10_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
    $313_1 = Math_fround($21_1 * $10_1);
    $21_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
    $34_1 = Math_fround($13_1 * $21_1);
    $13_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
    $35_1 = Math_fround($14_1 * $13_1);
    HEAPF32[($4_1 + 48 | 0) >> 2] = Math_fround($26_1 + Math_fround(Math_fround($313_1 + $34_1) + $35_1));
    $339_1 = Math_fround(Math_fround($19_1 * $10_1) + Math_fround($11_1 * $21_1));
    $19_1 = Math_fround($12_1 * $13_1);
    HEAPF32[($4_1 + 44 | 0) >> 2] = Math_fround($32_1 + Math_fround($339_1 + $19_1));
    HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround($15_1 + Math_fround(Math_fround(Math_fround($17_1 * $10_1) + Math_fround($18_1 * $21_1)) + Math_fround($16_1 * $13_1)));
    $0_1 = $5_1 + 32 | 0;
    $1_1 = $5_1 + 16 | 0;
    label$5 : {
     if ((HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) != (21 | 0)) {
      break label$5
     }
     $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
     $852($4_1 + 88 | 0 | 0, $4_1 + 448 | 0 | 0, $4_1 + 40 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4_1 + 140 | 0) >> 2] = $6_1;
     HEAP32[($4_1 + 136 | 0) >> 2] = $2_1;
     HEAP32[($4_1 + 132 | 0) >> 2] = $3_1;
     HEAP32[($4_1 + 88 | 0) >> 2] = 21004;
     i64toi32_i32$2 = $5_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $389_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $4_1 + 152 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $389_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$1 = HEAP32[$5_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
     $392_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $4_1;
     HEAP32[($4_1 + 144 | 0) >> 2] = $392_1;
     HEAP32[($4_1 + 148 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $397_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $4_1 + 168 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $397_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $401_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $4_1 + 160 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $401_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $0_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $406_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $4_1 + 184 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $406_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $410_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $4_1 + 176 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $410_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $414_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $4_1 + 200 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $414_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$1 = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
     $418_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $4_1 + 192 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $418_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($4_1 + 128 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     $375($6_1 | 0, $4_1 + 88 | 0 | 0, $4_1 + 448 | 0 | 0, $4_1 + 40 | 0 | 0);
     $211($4_1 + 88 | 0 | 0) | 0;
     break label$1;
    }
    $11_1 = Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]);
    $12_1 = Math_fround(HEAPF32[$5_1 >> 2]);
    $14_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
    $16_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
    $18_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
    HEAP32[($4_1 + 692 | 0) >> 2] = 0;
    $15_1 = Math_fround(Math_fround(Math_fround($18_1 * $20_1) + $23_1) + $25_1);
    HEAPF32[($4_1 + 688 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $18_1) + $28_1) + $30_1) + $15_1);
    $26_1 = Math_fround(Math_fround(Math_fround($16_1 * $20_1) + Math_fround($17_1 * $22_1)) + $31_1);
    HEAPF32[($4_1 + 684 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $16_1) + Math_fround($27_1 * $17_1)) + $33_1) + $26_1);
    $494_1 = Math_fround(Math_fround(Math_fround($9_1 * $12_1) + Math_fround($27_1 * $14_1)) + Math_fround($29_1 * $11_1));
    $9_1 = Math_fround(Math_fround(Math_fround($12_1 * $20_1) + Math_fround($14_1 * $22_1)) + Math_fround($11_1 * $24_1));
    HEAPF32[($4_1 + 680 | 0) >> 2] = Math_fround($494_1 + $9_1);
    HEAP32[($4_1 + 84 | 0) >> 2] = 0;
    HEAPF32[($4_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $18_1) + $34_1) + $35_1) + $15_1);
    HEAPF32[($4_1 + 76 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $16_1) + Math_fround($21_1 * $17_1)) + $19_1) + $26_1);
    HEAPF32[($4_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $12_1) + Math_fround($21_1 * $14_1)) + Math_fround($13_1 * $11_1)) + $9_1);
    $2_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    $852($4_1 + 88 | 0 | 0, $4_1 + 680 | 0 | 0, $4_1 + 72 | 0 | 0, HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 140 | 0) >> 2] = $6_1;
    HEAP32[($4_1 + 136 | 0) >> 2] = $2_1;
    HEAP32[($4_1 + 132 | 0) >> 2] = $3_1;
    HEAP32[($4_1 + 88 | 0) >> 2] = 21188;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $566_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1 + 152 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $566_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[$5_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    $569_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1;
    HEAP32[($4_1 + 144 | 0) >> 2] = $569_1;
    HEAP32[($4_1 + 148 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $573_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1 + 160 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $573_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $578_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1 + 168 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $578_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $0_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $583_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1 + 184 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $583_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $587_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1 + 176 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $587_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$0 = HEAP32[($5_1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
    $591_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1 + 192 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $591_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $595_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1 + 200 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $595_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($4_1 + 128 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[($4_1 + 688 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4_1 + 692 | 0) >> 2] | 0;
    $603_1 = i64toi32_i32$0;
    i64toi32_i32$0 = ($4_1 + 24 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $603_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[($4_1 + 680 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4_1 + 684 | 0) >> 2] | 0;
    $606_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1;
    HEAP32[($4_1 + 24 | 0) >> 2] = $606_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    label$6 : {
     $9_1 = Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2]);
     if ($9_1 < Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]) ^ 1 | 0) {
      break label$6
     }
     HEAPF32[($4_1 + 24 | 0) >> 2] = $9_1;
    }
    label$7 : {
     $10_1 = Math_fround(HEAPF32[($4_1 + 76 | 0) >> 2]);
     if ($10_1 < Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]) ^ 1 | 0) {
      break label$7
     }
     HEAPF32[($4_1 + 28 | 0) >> 2] = $10_1;
    }
    label$8 : {
     $11_1 = Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2]);
     if ($11_1 < Math_fround(HEAPF32[($4_1 + 32 | 0) >> 2]) ^ 1 | 0) {
      break label$8
     }
     HEAPF32[($4_1 + 32 | 0) >> 2] = $11_1;
    }
    label$9 : {
     $12_1 = Math_fround(HEAPF32[($4_1 + 84 | 0) >> 2]);
     if ($12_1 < Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]) ^ 1 | 0) {
      break label$9
     }
     HEAPF32[($4_1 + 36 | 0) >> 2] = $12_1;
    }
    i64toi32_i32$2 = ($4_1 + 680 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $649_1 = i64toi32_i32$0;
    i64toi32_i32$0 = ($4_1 + 8 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $649_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[($4_1 + 680 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4_1 + 684 | 0) >> 2] | 0;
    $652_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $652_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    label$10 : {
     if (Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) < $9_1 ^ 1 | 0) {
      break label$10
     }
     HEAPF32[($4_1 + 8 | 0) >> 2] = $9_1;
    }
    label$11 : {
     if (Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]) < $10_1 ^ 1 | 0) {
      break label$11
     }
     HEAPF32[($4_1 + 12 | 0) >> 2] = $10_1;
    }
    label$12 : {
     if (Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]) < $11_1 ^ 1 | 0) {
      break label$12
     }
     HEAPF32[($4_1 + 16 | 0) >> 2] = $11_1;
    }
    label$13 : {
     if (Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]) < $12_1 ^ 1 | 0) {
      break label$13
     }
     HEAPF32[($4_1 + 20 | 0) >> 2] = $12_1;
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($6_1, $4_1 + 88 | 0, $4_1 + 24 | 0, $4_1 + 8 | 0);
    $211($4_1 + 88 | 0 | 0) | 0;
    break label$1;
   }
   if (($7_1 | 0) != (31 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
   HEAP32[($4_1 + 64 | 0) >> 2] = $3_1;
   HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
   HEAP32[($4_1 + 56 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 52 | 0) >> 2] = $5_1;
   HEAP32[($4_1 + 48 | 0) >> 2] = $6_1;
   HEAP32[($4_1 + 40 | 0) >> 2] = 21376;
   HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   label$14 : {
    if (!$7_1) {
     break label$14
    }
    $12_1 = Math_fround(HEAPF32[$5_1 >> 2]);
    $13_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
    HEAP32[($4_1 + 100 | 0) >> 2] = 0;
    $14_1 = Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]);
    $9_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]) - $14_1);
    $731_1 = Math_fround($10_1 * $9_1);
    $16_1 = Math_fround(HEAPF32[($5_1 + 52 | 0) >> 2]);
    $10_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]) - $16_1);
    $17_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
    $18_1 = Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]);
    $11_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]) - $18_1);
    $19_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
    HEAPF32[($4_1 + 96 | 0) >> 2] = Math_fround(Math_fround($731_1 + Math_fround($10_1 * $17_1)) + Math_fround($11_1 * $19_1));
    $765_1 = Math_fround($9_1 * $13_1);
    $13_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
    HEAPF32[($4_1 + 92 | 0) >> 2] = Math_fround(Math_fround($765_1 + Math_fround($10_1 * $13_1)) + Math_fround($11_1 * $21_1));
    $783_1 = Math_fround($9_1 * $12_1);
    $12_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
    $27_1 = Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]);
    HEAPF32[($4_1 + 88 | 0) >> 2] = Math_fround(Math_fround($783_1 + Math_fround($10_1 * $12_1)) + Math_fround($11_1 * $27_1));
    $29_1 = Math_fround(HEAPF32[$5_1 >> 2]);
    $20_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
    HEAP32[($4_1 + 460 | 0) >> 2] = 0;
    $9_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]) - $14_1);
    $810_1 = Math_fround($10_1 * $9_1);
    $10_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]) - $16_1);
    $11_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]) - $18_1);
    HEAPF32[($4_1 + 456 | 0) >> 2] = Math_fround(Math_fround($810_1 + Math_fround($17_1 * $10_1)) + Math_fround($19_1 * $11_1));
    HEAPF32[($4_1 + 452 | 0) >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $20_1) + Math_fround($10_1 * $13_1)) + Math_fround($11_1 * $21_1));
    HEAPF32[($4_1 + 448 | 0) >> 2] = Math_fround(Math_fround(Math_fround($9_1 * $29_1) + Math_fround($10_1 * $12_1)) + Math_fround($11_1 * $27_1));
    $868(HEAP32[$7_1 >> 2] | 0 | 0, $4_1 + 88 | 0 | 0, $4_1 + 448 | 0 | 0, $4_1 + 40 | 0 | 0);
    break label$1;
   }
   $2_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $1_1 = $2_1 + -1 | 0;
   $3_1 = 64;
   $2_1 = 0;
   label$15 : while (1) {
    $6_1 = (HEAP32[($6_1 + 28 | 0) >> 2] | 0) + $3_1 | 0;
    $0_1 = HEAP32[$6_1 >> 2] | 0;
    $28_1 = Math_fround(HEAPF32[($5_1 + 52 | 0) >> 2]);
    $30_1 = Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]);
    $19_1 = Math_fround(HEAPF32[($6_1 + -16 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($6_1 + -12 | 0) >> 2]);
    $27_1 = Math_fround(HEAPF32[($6_1 + -8 | 0) >> 2]);
    $9_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
    $29_1 = Math_fround(HEAPF32[($6_1 + -64 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($6_1 + -48 | 0) >> 2]);
    $15_1 = Math_fround(HEAPF32[($6_1 + -32 | 0) >> 2]);
    $24_1 = Math_fround(HEAPF32[($6_1 + -60 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($6_1 + -44 | 0) >> 2]);
    $26_1 = Math_fround(HEAPF32[($6_1 + -28 | 0) >> 2]);
    $32_1 = Math_fround(HEAPF32[($6_1 + -56 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
    $23_1 = Math_fround(HEAPF32[($6_1 + -40 | 0) >> 2]);
    $12_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
    $25_1 = Math_fround(HEAPF32[($6_1 + -24 | 0) >> 2]);
    $31_1 = Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
    $14_1 = Math_fround(HEAPF32[$5_1 >> 2]);
    $16_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
    $18_1 = Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]);
    HEAP32[($4_1 + 148 | 0) >> 2] = 0;
    HEAP32[($4_1 + 132 | 0) >> 2] = 0;
    HEAP32[($4_1 + 116 | 0) >> 2] = 0;
    HEAP32[($4_1 + 100 | 0) >> 2] = 0;
    HEAPF32[($4_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround($32_1 * $18_1) + Math_fround($23_1 * $11_1)) + Math_fround($25_1 * $12_1));
    HEAPF32[($4_1 + 124 | 0) >> 2] = Math_fround(Math_fround(Math_fround($24_1 * $18_1) + Math_fround($22_1 * $11_1)) + Math_fround($26_1 * $12_1));
    HEAPF32[($4_1 + 120 | 0) >> 2] = Math_fround(Math_fround(Math_fround($29_1 * $18_1) + Math_fround($20_1 * $11_1)) + Math_fround($15_1 * $12_1));
    HEAPF32[($4_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround($32_1 * $17_1) + Math_fround($23_1 * $9_1)) + Math_fround($25_1 * $10_1));
    HEAPF32[($4_1 + 108 | 0) >> 2] = Math_fround(Math_fround(Math_fround($24_1 * $17_1) + Math_fround($22_1 * $9_1)) + Math_fround($26_1 * $10_1));
    HEAPF32[($4_1 + 104 | 0) >> 2] = Math_fround(Math_fround(Math_fround($29_1 * $17_1) + Math_fround($20_1 * $9_1)) + Math_fround($15_1 * $10_1));
    HEAPF32[($4_1 + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $32_1) + Math_fround($16_1 * $23_1)) + Math_fround($13_1 * $25_1));
    HEAPF32[($4_1 + 92 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $24_1) + Math_fround($16_1 * $22_1)) + Math_fround($13_1 * $26_1));
    HEAPF32[($4_1 + 88 | 0) >> 2] = Math_fround(Math_fround(Math_fround($29_1 * $14_1) + Math_fround($20_1 * $16_1)) + Math_fround($15_1 * $13_1));
    HEAPF32[($4_1 + 144 | 0) >> 2] = Math_fround($30_1 + Math_fround(Math_fround(Math_fround($18_1 * $19_1) + Math_fround($11_1 * $21_1)) + Math_fround($12_1 * $27_1)));
    HEAPF32[($4_1 + 140 | 0) >> 2] = Math_fround($28_1 + Math_fround(Math_fround(Math_fround($17_1 * $19_1) + Math_fround($9_1 * $21_1)) + Math_fround($10_1 * $27_1)));
    HEAPF32[($4_1 + 136 | 0) >> 2] = Math_fround($31_1 + Math_fround(Math_fround(Math_fround($14_1 * $19_1) + Math_fround($16_1 * $21_1)) + Math_fround($13_1 * $27_1)));
    HEAP32[($4_1 + 700 | 0) >> 2] = $2_1;
    HEAP32[($4_1 + 696 | 0) >> 2] = -1;
    HEAP32[($4_1 + 688 | 0) >> 2] = HEAP32[($4_1 + 44 | 0) >> 2] | 0;
    HEAP32[($4_1 + 684 | 0) >> 2] = $0_1;
    HEAP32[($4_1 + 680 | 0) >> 2] = 0;
    HEAP32[($4_1 + 692 | 0) >> 2] = $4_1 + 88 | 0;
    HEAP32[($4_1 + 452 | 0) >> 2] = 1065353216;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = 0;
    HEAP32[($4_1 + 464 | 0) >> 2] = -1;
    HEAP32[($4_1 + 468 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = 1;
    HEAP32[($4_1 + 456 | 0) >> 2] = 0;
    HEAP32[($4_1 + 460 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($4_1 + 476 | 0) >> 2] = $2_1;
    HEAP32[($4_1 + 448 | 0) >> 2] = 21552;
    $5_1 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
    HEAP32[($4_1 + 472 | 0) >> 2] = $5_1;
    HEAP32[($4_1 + 452 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 468 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    $867(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0, $4_1 + 680 | 0 | 0, $4_1 + 448 | 0 | 0);
    if (($1_1 | 0) == ($2_1 | 0)) {
     break label$1
    }
    $2_1 = $2_1 + 1 | 0;
    $3_1 = $3_1 + 80 | 0;
    $5_1 = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
    $6_1 = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
    continue label$15;
   };
  }
  $101($4_1 + 624 | 0 | 0) | 0;
  global$0 = $4_1 + 704 | 0;
 }
 
 function $868($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = Math_fround(0), $4_1 = 0, $6_1 = Math_fround(0), $10_1 = Math_fround(0), $7_1 = Math_fround(0), $29_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8_1 = Math_fround(0), $25_1 = 0, $23_1 = 0, $9_1 = Math_fround(0), $30_1 = 0, $11_1 = Math_fround(0), $22_1 = 0, i64toi32_i32$2 = 0, $21_1 = 0, $24_1 = 0, $26_1 = 0, $13_1 = Math_fround(0), $20_1 = 0, $27_1 = 0, $28_1 = Math_fround(0), $53_1 = Math_fround(0), $83_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $158_1 = 0, $163_1 = 0, $166_1 = 0, $170_1 = 0;
  $4_1 = global$0 - 544 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $5_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $8_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $9_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   HEAP32[($4_1 + 32 | 0) >> 2] = $0_1;
   $5_1 = Math_fround($6_1 - $5_1);
   $53_1 = $5_1;
   $6_1 = Math_fround($8_1 - $7_1);
   $8_1 = Math_fround($10_1 - $9_1);
   $10_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($8_1 * $8_1)) + Math_fround($5_1 * $5_1)))));
   $5_1 = Math_fround($5_1 * $10_1);
   $11_1 = Math_fround($6_1 * $10_1);
   $83_1 = Math_fround($6_1 * $11_1);
   $6_1 = Math_fround($8_1 * $10_1);
   $12_1 = Math_fround(Math_fround($53_1 * $5_1) + Math_fround($83_1 + Math_fround($8_1 * $6_1)));
   $13_1 = $5_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $5_1);
   $2_1 = $13_1 < Math_fround(0.0);
   $14_1 = $4_1 + ($2_1 << 4 | 0) | 0 | 8 | 0;
   $6_1 = $6_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $6_1);
   $0_1 = $6_1 < Math_fround(0.0);
   $15_1 = $4_1 + ($0_1 << 4 | 0) | 0 | 4 | 0;
   $16_1 = $4_1 + (($2_1 ^ 1 | 0) << 4 | 0) | 0 | 8 | 0;
   $17_1 = $4_1 + (($0_1 ^ 1 | 0) << 4 | 0) | 0 | 4 | 0;
   $8_1 = $11_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $11_1);
   $2_1 = $8_1 < Math_fround(0.0);
   $18_1 = $4_1 + ($2_1 << 4 | 0) | 0;
   $19_1 = $4_1 + (($2_1 ^ 1 | 0) << 4 | 0) | 0;
   $20_1 = $4_1 + 16 | 0;
   $21_1 = 126;
   $22_1 = 128;
   $23_1 = $4_1 + 32 | 0;
   $24_1 = 0;
   $25_1 = 128;
   $26_1 = 1;
   label$2 : while (1) {
    $0_1 = $26_1 + -1 | 0;
    $27_1 = $0_1 << 2 | 0;
    $2_1 = HEAP32[($23_1 + $27_1 | 0) >> 2] | 0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    $158_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $20_1;
    HEAP32[i64toi32_i32$0 >> 2] = $158_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1 + 24 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $163_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $20_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $163_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    $166_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1;
    HEAP32[$4_1 >> 2] = $166_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $2_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $170_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $170_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             $10_1 = Math_fround($6_1 * Math_fround(Math_fround(HEAPF32[$15_1 >> 2]) - $9_1));
             $5_1 = Math_fround($8_1 * Math_fround(Math_fround(HEAPF32[$19_1 >> 2]) - $7_1));
             if ($10_1 > $5_1) {
              break label$11
             }
             $11_1 = Math_fround($8_1 * Math_fround(Math_fround(HEAPF32[$18_1 >> 2]) - $7_1));
             $7_1 = Math_fround($6_1 * Math_fround(Math_fround(HEAPF32[$17_1 >> 2]) - $9_1));
             if ($11_1 > $7_1) {
              break label$11
             }
             $28_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
             $9_1 = Math_fround($13_1 * Math_fround(Math_fround(HEAPF32[$14_1 >> 2]) - $28_1));
             $5_1 = $7_1 < $5_1 ? $7_1 : $5_1;
             if ($9_1 > $5_1) {
              break label$11
             }
             $7_1 = $10_1 > $11_1 ? $10_1 : $11_1;
             $10_1 = Math_fround($13_1 * Math_fround(Math_fround(HEAPF32[$16_1 >> 2]) - $28_1));
             if ($7_1 > $10_1) {
              break label$11
             }
             if (($9_1 > $7_1 ? $9_1 : $7_1) < $12_1 ^ 1 | 0) {
              break label$11
             }
             if (($10_1 < $5_1 ? $10_1 : $5_1) > Math_fround(0.0) ^ 1 | 0) {
              break label$11
             }
             label$12 : {
              if (!(HEAP32[($2_1 + 40 | 0) >> 2] | 0)) {
               break label$12
              }
              label$13 : {
               if (($0_1 | 0) > ($21_1 | 0)) {
                break label$13
               }
               $29_1 = $23_1;
               $30_1 = $25_1;
               break label$4;
              }
              label$14 : {
               $30_1 = $25_1 << 1 | 0;
               if (($25_1 | 0) < ($30_1 | 0)) {
                break label$14
               }
               $29_1 = $23_1;
               break label$5;
              }
              label$15 : {
               if (($22_1 | 0) < ($30_1 | 0)) {
                break label$15
               }
               $29_1 = $23_1;
               break label$6;
              }
              label$16 : {
               if ($25_1) {
                break label$16
               }
               $29_1 = 0;
               break label$10;
              }
              $29_1 = $79($25_1 << 3 | 0 | 0, 16 | 0) | 0;
              if (($25_1 | 0) < (1 | 0)) {
               break label$10
              }
              $0_1 = $29_1;
              $21_1 = $23_1;
              $22_1 = $25_1;
              label$17 : while (1) {
               HEAP32[$0_1 >> 2] = HEAP32[$21_1 >> 2] | 0;
               $0_1 = $0_1 + 4 | 0;
               $21_1 = $21_1 + 4 | 0;
               $22_1 = $22_1 + -1 | 0;
               if ($22_1) {
                continue label$17
               }
               break label$17;
              };
              if (!($24_1 & 255 | 0)) {
               break label$8
              }
              break label$9;
             }
             FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($3_1, $2_1);
            }
            $29_1 = $23_1;
            $30_1 = $25_1;
            break label$3;
           }
           $0_1 = $24_1 & 255 | 0;
           $24_1 = 1;
           if (!$0_1) {
            break label$7
           }
           $22_1 = $30_1;
           if (!$23_1) {
            break label$6
           }
          }
          $80($23_1 | 0);
         }
         $24_1 = 1;
        }
        $22_1 = $30_1;
       }
       $0_1 = $25_1 << 2 | 0;
       $17($29_1 + $0_1 | 0 | 0, 0 | 0, $0_1 | 0) | 0;
      }
      $21_1 = $30_1 + -2 | 0;
     }
     HEAP32[($29_1 + $27_1 | 0) >> 2] = HEAP32[($2_1 + 36 | 0) >> 2] | 0;
     HEAP32[($29_1 + ($26_1 << 2 | 0) | 0) >> 2] = HEAP32[($2_1 + 40 | 0) >> 2] | 0;
     $0_1 = $26_1 + 1 | 0;
    }
    label$18 : {
     if (!$0_1) {
      break label$18
     }
     $9_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
     $7_1 = Math_fround(HEAPF32[$1_1 >> 2]);
     $23_1 = $29_1;
     $25_1 = $30_1;
     $26_1 = $0_1;
     continue label$2;
    }
    break label$2;
   };
   if (!($24_1 & 255 | 0)) {
    break label$1
   }
   if (!$29_1) {
    break label$1
   }
   $80($29_1 | 0);
  }
  global$0 = $4_1 + 544 | 0;
 }
 
 function $869($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = Math_fround($7_1);
  var $8_1 = 0;
  $8_1 = global$0 - 32 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 24 | 0) >> 2] = -1;
  HEAP32[($8_1 + 28 | 0) >> 2] = -1;
  HEAP32[($8_1 + 20 | 0) >> 2] = $5_1;
  HEAP32[($8_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = 0;
  $870($0_1 | 0, $1_1 | 0, $2_1 | 0, $8_1 + 8 | 0 | 0, $6_1 | 0, Math_fround($7_1));
  global$0 = $8_1 + 32 | 0;
 }
 
 function $870($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  var $6_1 = 0, $7_1 = 0, $10_1 = Math_fround(0), $12_1 = Math_fround(0), i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $11_1 = Math_fround(0), $15_1 = Math_fround(0), $21_1 = Math_fround(0), $13_1 = Math_fround(0), $16_1 = Math_fround(0), $18_1 = Math_fround(0), $17_1 = Math_fround(0), $22_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $25_1 = Math_fround(0), $8_1 = 0, $24_1 = Math_fround(0), $26_1 = Math_fround(0), i64toi32_i32$2 = 0, $23_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $30_1 = Math_fround(0), $35_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $14_1 = 0, $9_1 = 0, $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $143_1 = 0, $150_1 = 0, $153_1 = 0, $158_1 = 0, $426_1 = Math_fround(0), $432_1 = Math_fround(0), $616_1 = 0, $623_1 = 0, $626_1 = 0, $631_1 = 0, $29_1 = Math_fround(0), $1868 = Math_fround(0), $1874 = Math_fround(0), $2009 = 0, $2015 = 0, $2018 = 0, $2021 = 0;
  $6_1 = global$0 - 688 | 0;
  global$0 = $6_1;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    $8_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
    if (($9_1 | 0) > (19 | 0)) {
     break label$2
    }
    HEAPF32[($6_1 + 660 | 0) >> 2] = $5_1;
    HEAP32[($6_1 + 656 | 0) >> 2] = 0;
    HEAP32[($6_1 + 488 | 0) >> 2] = 15992;
    HEAP32[($6_1 + 652 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    HEAP8[($6_1 + 460 | 0) >> 0] = 0;
    HEAP32[($6_1 + 436 | 0) >> 2] = 953267991;
    HEAP32[($6_1 + 64 | 0) >> 2] = 14800;
    label$3 : {
     $8_1 = $847($6_1 + 664 | 0 | 0, $0_1 | 0, $8_1 | 0, $6_1 + 128 | 0 | 0, $6_1 + 64 | 0 | 0) | 0;
     if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($8_1, $1_1, $2_1, $7_1, $7_1, $6_1 + 488 | 0) | 0)) {
      break label$3
     }
     $5_1 = Math_fround(HEAPF32[($6_1 + 620 | 0) >> 2]);
     $10_1 = Math_fround(HEAPF32[($6_1 + 624 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($6_1 + 628 | 0) >> 2]);
     $12_1 = Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($10_1 * $10_1)) + Math_fround($11_1 * $11_1));
     if ($12_1 > Math_fround(9.999999747378752e-05) ^ 1 | 0) {
      break label$3
     }
     $13_1 = Math_fround(HEAPF32[($6_1 + 652 | 0) >> 2]);
     if ($13_1 < Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) ^ 1 | 0) {
      break label$3
     }
     $12_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($12_1)));
     HEAPF32[($6_1 + 628 | 0) >> 2] = Math_fround($11_1 * $12_1);
     HEAPF32[($6_1 + 624 | 0) >> 2] = Math_fround($10_1 * $12_1);
     HEAPF32[($6_1 + 620 | 0) >> 2] = Math_fround($5_1 * $12_1);
     i64toi32_i32$2 = $6_1 + 644 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $143_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $6_1 + 112 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $143_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $7_1 = $6_1 + 620 | 0;
     i64toi32_i32$2 = $7_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $150_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $6_1 + 96 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $150_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$0 = HEAP32[($6_1 + 636 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($6_1 + 640 | 0) >> 2] | 0;
     $153_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $6_1;
     HEAP32[($6_1 + 104 | 0) >> 2] = $153_1;
     HEAP32[($6_1 + 108 | 0) >> 2] = i64toi32_i32$1;
     HEAPF32[($6_1 + 120 | 0) >> 2] = $13_1;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[$7_1 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
     $158_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $6_1;
     HEAP32[($6_1 + 88 | 0) >> 2] = $158_1;
     HEAP32[($6_1 + 92 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($6_1 + 84 | 0) >> 2] = 0;
     HEAP32[($6_1 + 80 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($4_1, $6_1 + 80 | 0, 1));
    }
    $581($8_1 | 0) | 0;
    break label$1;
   }
   label$4 : {
    $14_1 = $9_1 + -21 | 0;
    if ($14_1 >>> 0 > 8 >>> 0) {
     break label$4
    }
    label$5 : {
     if ($14_1 >>> 0 > 7 >>> 0) {
      break label$5
     }
     label$6 : {
      switch ($14_1 | 0) {
      default:
       $10_1 = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
       $11_1 = Math_fround(HEAPF32[($7_1 + 36 | 0) >> 2]);
       $15_1 = Math_fround(HEAPF32[($7_1 + 52 | 0) >> 2]);
       $12_1 = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
       $16_1 = Math_fround(HEAPF32[($7_1 + 56 | 0) >> 2]);
       $13_1 = Math_fround(HEAPF32[($7_1 + 40 | 0) >> 2]);
       $17_1 = Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]);
       $18_1 = Math_fround(HEAPF32[$7_1 >> 2]);
       $19_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
       $20_1 = Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]);
       $21_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
       $22_1 = Math_fround(HEAPF32[($7_1 + 48 | 0) >> 2]);
       HEAP32[($6_1 + 92 | 0) >> 2] = 0;
       $22_1 = Math_fround(-$22_1);
       $23_1 = Math_fround(Math_fround(Math_fround($21_1 * $22_1) - Math_fround($12_1 * $15_1)) - Math_fround($13_1 * $16_1));
       $24_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
       $25_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
       $26_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
       HEAPF32[($6_1 + 88 | 0) >> 2] = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($21_1 * $24_1) + Math_fround($12_1 * $25_1)) + Math_fround($13_1 * $26_1)));
       $27_1 = Math_fround(Math_fround(Math_fround($20_1 * $22_1) - Math_fround($10_1 * $15_1)) - Math_fround($11_1 * $16_1));
       HEAPF32[($6_1 + 84 | 0) >> 2] = Math_fround($27_1 + Math_fround(Math_fround(Math_fround($20_1 * $24_1) + Math_fround($10_1 * $25_1)) + Math_fround($11_1 * $26_1)));
       $28_1 = Math_fround(Math_fround(Math_fround($18_1 * $22_1) - Math_fround($19_1 * $15_1)) - Math_fround($17_1 * $16_1));
       HEAPF32[($6_1 + 80 | 0) >> 2] = Math_fround($28_1 + Math_fround(Math_fround(Math_fround($18_1 * $24_1) + Math_fround($19_1 * $25_1)) + Math_fround($17_1 * $26_1)));
       HEAP32[($6_1 + 676 | 0) >> 2] = 0;
       $15_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
       $16_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
       $22_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
       HEAPF32[($6_1 + 672 | 0) >> 2] = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($21_1 * $15_1) + Math_fround($12_1 * $16_1)) + Math_fround($13_1 * $22_1)));
       HEAPF32[($6_1 + 668 | 0) >> 2] = Math_fround($27_1 + Math_fround(Math_fround(Math_fround($20_1 * $15_1) + Math_fround($10_1 * $16_1)) + Math_fround($11_1 * $22_1)));
       HEAPF32[($6_1 + 664 | 0) >> 2] = Math_fround($28_1 + Math_fround(Math_fround(Math_fround($18_1 * $15_1) + Math_fround($19_1 * $16_1)) + Math_fround($17_1 * $22_1)));
       HEAP32[($6_1 + 516 | 0) >> 2] = 0;
       $15_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
       $16_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
       $22_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
       HEAPF32[(($6_1 + 488 | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($21_1 * $15_1) + Math_fround($12_1 * $16_1)) + Math_fround($13_1 * $22_1));
       $24_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
       $25_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
       $26_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
       HEAPF32[(($6_1 + 488 | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($21_1 * $24_1) + Math_fround($12_1 * $25_1)) + Math_fround($13_1 * $26_1));
       HEAPF32[(($6_1 + 488 | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $15_1) + Math_fround($10_1 * $16_1)) + Math_fround($11_1 * $22_1));
       HEAPF32[(($6_1 + 488 | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $24_1) + Math_fround($10_1 * $25_1)) + Math_fround($11_1 * $26_1));
       HEAP32[($6_1 + 500 | 0) >> 2] = 0;
       $23_1 = Math_fround(HEAPF32[$2_1 >> 2]);
       $426_1 = Math_fround($21_1 * $23_1);
       $21_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
       $432_1 = Math_fround($426_1 + Math_fround($12_1 * $21_1));
       $12_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
       HEAPF32[($6_1 + 520 | 0) >> 2] = Math_fround($432_1 + Math_fround($13_1 * $12_1));
       HEAPF32[($6_1 + 504 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $23_1) + Math_fround($10_1 * $21_1)) + Math_fround($11_1 * $12_1));
       HEAPF32[($6_1 + 496 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $15_1) + Math_fround($19_1 * $16_1)) + Math_fround($17_1 * $22_1));
       HEAPF32[($6_1 + 492 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $24_1) + Math_fround($19_1 * $25_1)) + Math_fround($17_1 * $26_1));
       HEAPF32[($6_1 + 488 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $23_1) + Math_fround($19_1 * $21_1)) + Math_fround($17_1 * $12_1));
       HEAP32[($6_1 + 548 | 0) >> 2] = 0;
       i64toi32_i32$1 = ($6_1 + 488 | 0) + 52 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $6_1 + 532 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $3_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       $854($6_1 + 128 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($8_1)))) | 0;
       HEAP32[($6_1 + 348 | 0) >> 2] = $8_1;
       HEAP32[($6_1 + 344 | 0) >> 2] = $3_1;
       HEAP32[($6_1 + 128 | 0) >> 2] = 21724;
       HEAPF32[($6_1 + 336 | 0) >> 2] = $5_1;
       HEAP32[($6_1 + 340 | 0) >> 2] = $4_1;
       HEAP32[($6_1 + 328 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $6_1 + 488 | 0, $6_1 + 64 | 0, $6_1 + 48 | 0);
       $376($8_1 | 0, $6_1 + 128 | 0 | 0, $6_1 + 80 | 0 | 0, $6_1 + 664 | 0 | 0, $6_1 + 64 | 0 | 0, $6_1 + 48 | 0 | 0);
       $211($6_1 + 128 | 0 | 0) | 0;
       break label$1;
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
       break label$5;
      case 7:
       break label$6;
      };
     }
     HEAPF32[($6_1 + 300 | 0) >> 2] = $5_1;
     HEAP32[($6_1 + 296 | 0) >> 2] = 0;
     HEAP32[($6_1 + 128 | 0) >> 2] = 15992;
     HEAP32[($6_1 + 292 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     label$8 : {
      $8_1 = $848($6_1 + 80 | 0 | 0, $0_1 | 0, $8_1 | 0) | 0;
      if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($8_1, $1_1, $2_1, $7_1, $7_1, $6_1 + 128 | 0) | 0)) {
       break label$8
      }
      $5_1 = Math_fround(HEAPF32[($6_1 + 260 | 0) >> 2]);
      $10_1 = Math_fround(HEAPF32[($6_1 + 264 | 0) >> 2]);
      $11_1 = Math_fround(HEAPF32[($6_1 + 268 | 0) >> 2]);
      $12_1 = Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($10_1 * $10_1)) + Math_fround($11_1 * $11_1));
      if ($12_1 > Math_fround(9.999999747378752e-05) ^ 1 | 0) {
       break label$8
      }
      $13_1 = Math_fround(HEAPF32[($6_1 + 292 | 0) >> 2]);
      if ($13_1 < Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) ^ 1 | 0) {
       break label$8
      }
      $12_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($12_1)));
      HEAPF32[($6_1 + 268 | 0) >> 2] = Math_fround($11_1 * $12_1);
      HEAPF32[($6_1 + 264 | 0) >> 2] = Math_fround($10_1 * $12_1);
      HEAPF32[($6_1 + 260 | 0) >> 2] = Math_fround($5_1 * $12_1);
      i64toi32_i32$2 = $6_1 + 284 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $616_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $6_1 + 520 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $616_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $7_1 = $6_1 + 260 | 0;
      i64toi32_i32$2 = $7_1 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $623_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $6_1 + 504 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $623_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$0 = HEAP32[($6_1 + 276 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($6_1 + 280 | 0) >> 2] | 0;
      $626_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $6_1;
      HEAP32[($6_1 + 512 | 0) >> 2] = $626_1;
      HEAP32[($6_1 + 516 | 0) >> 2] = i64toi32_i32$1;
      HEAPF32[($6_1 + 528 | 0) >> 2] = $13_1;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = HEAP32[$7_1 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
      $631_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $6_1;
      HEAP32[($6_1 + 496 | 0) >> 2] = $631_1;
      HEAP32[($6_1 + 500 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($6_1 + 492 | 0) >> 2] = 0;
      HEAP32[($6_1 + 488 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($4_1, $6_1 + 488 | 0, 1));
     }
     $581($8_1 | 0) | 0;
     break label$1;
    }
    $22_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
    $24_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
    $16_1 = Math_fround(HEAPF32[($7_1 + 52 | 0) >> 2]);
    $25_1 = Math_fround(HEAPF32[($7_1 + 56 | 0) >> 2]);
    $26_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
    $23_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($7_1 + 36 | 0) >> 2]);
    $12_1 = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($7_1 + 40 | 0) >> 2]);
    $27_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
    $29_1 = Math_fround(HEAPF32[($7_1 + 48 | 0) >> 2]);
    $28_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
    $17_1 = Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]);
    $18_1 = Math_fround(HEAPF32[$7_1 >> 2]);
    $19_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
    HEAP32[($6_1 + 516 | 0) >> 2] = 0;
    $15_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
    $30_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
    $31_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
    HEAPF32[(($6_1 + 488 | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($21_1 * $15_1) + Math_fround($12_1 * $30_1)) + Math_fround($13_1 * $31_1));
    $32_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
    $33_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
    $34_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
    HEAPF32[(($6_1 + 488 | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($21_1 * $32_1) + Math_fround($12_1 * $33_1)) + Math_fround($13_1 * $34_1));
    HEAPF32[(($6_1 + 488 | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $15_1) + Math_fround($10_1 * $30_1)) + Math_fround($11_1 * $31_1));
    HEAPF32[(($6_1 + 488 | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $32_1) + Math_fround($10_1 * $33_1)) + Math_fround($11_1 * $34_1));
    HEAP32[($6_1 + 500 | 0) >> 2] = 0;
    $35_1 = Math_fround(HEAPF32[$2_1 >> 2]);
    $36_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
    $37_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
    HEAPF32[($6_1 + 520 | 0) >> 2] = Math_fround(Math_fround(Math_fround($21_1 * $35_1) + Math_fround($12_1 * $36_1)) + Math_fround($13_1 * $37_1));
    HEAPF32[($6_1 + 504 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $35_1) + Math_fround($10_1 * $36_1)) + Math_fround($11_1 * $37_1));
    HEAPF32[($6_1 + 496 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $15_1) + Math_fround($19_1 * $30_1)) + Math_fround($17_1 * $31_1));
    HEAPF32[($6_1 + 492 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $32_1) + Math_fround($19_1 * $33_1)) + Math_fround($17_1 * $34_1));
    HEAPF32[($6_1 + 488 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $35_1) + Math_fround($19_1 * $36_1)) + Math_fround($17_1 * $37_1));
    HEAP32[($6_1 + 548 | 0) >> 2] = 0;
    i64toi32_i32$1 = ($6_1 + 488 | 0) + 52 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $6_1 + 532 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $3_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $854($6_1 + 128 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0, $7_1 | 0, Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($8_1)))) | 0;
    HEAP32[($6_1 + 348 | 0) >> 2] = $8_1;
    HEAP32[($6_1 + 344 | 0) >> 2] = $3_1;
    HEAP32[($6_1 + 128 | 0) >> 2] = 21936;
    HEAPF32[($6_1 + 336 | 0) >> 2] = $5_1;
    HEAP32[($6_1 + 340 | 0) >> 2] = $4_1;
    HEAP32[($6_1 + 328 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $6_1 + 488 | 0, $6_1 + 80 | 0, $6_1 + 664 | 0);
    HEAP32[($6_1 + 76 | 0) >> 2] = 0;
    $30_1 = Math_fround(-$29_1);
    $31_1 = Math_fround(Math_fround(Math_fround($21_1 * $30_1) - Math_fround($12_1 * $16_1)) - Math_fround($13_1 * $25_1));
    $5_1 = Math_fround($31_1 + Math_fround(Math_fround(Math_fround($21_1 * $28_1) + Math_fround($12_1 * $26_1)) + Math_fround($13_1 * $23_1)));
    HEAPF32[($6_1 + 72 | 0) >> 2] = $5_1;
    $32_1 = Math_fround(Math_fround(Math_fround($20_1 * $30_1) - Math_fround($10_1 * $16_1)) - Math_fround($11_1 * $25_1));
    $15_1 = Math_fround($32_1 + Math_fround(Math_fround(Math_fround($20_1 * $28_1) + Math_fround($10_1 * $26_1)) + Math_fround($11_1 * $23_1)));
    HEAPF32[($6_1 + 68 | 0) >> 2] = $15_1;
    $25_1 = Math_fround(Math_fround(Math_fround($18_1 * $30_1) - Math_fround($19_1 * $16_1)) - Math_fround($17_1 * $25_1));
    $16_1 = Math_fround($25_1 + Math_fround(Math_fround(Math_fround($18_1 * $28_1) + Math_fround($19_1 * $26_1)) + Math_fround($17_1 * $23_1)));
    HEAPF32[($6_1 + 64 | 0) >> 2] = $16_1;
    $21_1 = Math_fround(Math_fround(Math_fround($21_1 * $27_1) + Math_fround($12_1 * $22_1)) + Math_fround($13_1 * $24_1));
    $10_1 = Math_fround($32_1 + Math_fround(Math_fround(Math_fround($20_1 * $27_1) + Math_fround($10_1 * $22_1)) + Math_fround($11_1 * $24_1)));
    $13_1 = $16_1;
    label$9 : {
     $12_1 = Math_fround($25_1 + Math_fround(Math_fround(Math_fround($18_1 * $27_1) + Math_fround($19_1 * $22_1)) + Math_fround($17_1 * $24_1)));
     if ($12_1 < $13_1 ^ 1 | 0) {
      break label$9
     }
     HEAPF32[($6_1 + 64 | 0) >> 2] = $12_1;
     $13_1 = $12_1;
    }
    $11_1 = Math_fround($31_1 + $21_1);
    $17_1 = $15_1;
    label$10 : {
     if ($10_1 < $15_1 ^ 1 | 0) {
      break label$10
     }
     HEAPF32[($6_1 + 68 | 0) >> 2] = $10_1;
     $17_1 = $10_1;
    }
    $18_1 = $5_1;
    label$11 : {
     if ($11_1 < $18_1 ^ 1 | 0) {
      break label$11
     }
     HEAPF32[($6_1 + 72 | 0) >> 2] = $11_1;
     $18_1 = $11_1;
    }
    HEAP32[($6_1 + 60 | 0) >> 2] = 0;
    HEAPF32[($6_1 + 56 | 0) >> 2] = $5_1;
    HEAPF32[($6_1 + 52 | 0) >> 2] = $15_1;
    HEAPF32[($6_1 + 48 | 0) >> 2] = $16_1;
    label$12 : {
     if ($16_1 < $12_1 ^ 1 | 0) {
      break label$12
     }
     HEAPF32[($6_1 + 48 | 0) >> 2] = $12_1;
     $16_1 = $12_1;
    }
    label$13 : {
     if ($15_1 < $10_1 ^ 1 | 0) {
      break label$13
     }
     HEAPF32[($6_1 + 52 | 0) >> 2] = $10_1;
     $15_1 = $10_1;
    }
    label$14 : {
     if ($5_1 < $11_1 ^ 1 | 0) {
      break label$14
     }
     HEAPF32[($6_1 + 56 | 0) >> 2] = $11_1;
     $5_1 = $11_1;
    }
    HEAPF32[($6_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 80 | 0) >> 2]) + $13_1);
    HEAPF32[($6_1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 84 | 0) >> 2]) + $17_1);
    HEAPF32[($6_1 + 72 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]) + $18_1);
    HEAPF32[($6_1 + 48 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 664 | 0) >> 2]) + $16_1);
    HEAPF32[($6_1 + 52 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 668 | 0) >> 2]) + $15_1);
    HEAPF32[($6_1 + 56 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 672 | 0) >> 2]) + $5_1);
    FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($8_1, $6_1 + 128 | 0, $6_1 + 64 | 0, $6_1 + 48 | 0);
    $211($6_1 + 128 | 0 | 0) | 0;
    break label$1;
   }
   if (($9_1 | 0) != (31 | 0)) {
    break label$1
   }
   $9_1 = $616($6_1 + 40 | 0 | 0, 20933 | 0) | 0;
   $14_1 = $7_1 + 52 | 0;
   $15_1 = Math_fround(HEAPF32[$14_1 >> 2]);
   $38_1 = $7_1 + 56 | 0;
   $16_1 = Math_fround(HEAPF32[$38_1 >> 2]);
   $22_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
   $39_1 = $7_1 + 20 | 0;
   $10_1 = Math_fround(HEAPF32[$39_1 >> 2]);
   $40_1 = $7_1 + 36 | 0;
   $11_1 = Math_fround(HEAPF32[$40_1 >> 2]);
   $25_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
   $41_1 = $7_1 + 24 | 0;
   $12_1 = Math_fround(HEAPF32[$41_1 >> 2]);
   $27_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
   $42_1 = $7_1 + 40 | 0;
   $13_1 = Math_fround(HEAPF32[$42_1 >> 2]);
   $17_1 = Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[$7_1 >> 2]);
   $19_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
   $28_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
   $30_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $31_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $35_1 = Math_fround(HEAPF32[($7_1 + 48 | 0) >> 2]);
   $32_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]);
   $33_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $34_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
   $43_1 = $6_1 + 188 | 0;
   HEAP32[$43_1 >> 2] = 0;
   $44_1 = $6_1 + 172 | 0;
   HEAP32[$44_1 >> 2] = 0;
   $45_1 = $6_1 + 156 | 0;
   HEAP32[$45_1 >> 2] = 0;
   $46_1 = ($6_1 + 128 | 0) + 40 | 0;
   HEAPF32[$46_1 >> 2] = Math_fround(Math_fround(Math_fround($21_1 * $34_1) + Math_fround($12_1 * $23_1)) + Math_fround($13_1 * $27_1));
   $47_1 = ($6_1 + 128 | 0) + 36 | 0;
   HEAPF32[$47_1 >> 2] = Math_fround(Math_fround(Math_fround($21_1 * $33_1) + Math_fround($12_1 * $25_1)) + Math_fround($13_1 * $26_1));
   $48_1 = ($6_1 + 128 | 0) + 24 | 0;
   HEAPF32[$48_1 >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $34_1) + Math_fround($10_1 * $23_1)) + Math_fround($11_1 * $27_1));
   $49_1 = ($6_1 + 128 | 0) + 20 | 0;
   HEAPF32[$49_1 >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $33_1) + Math_fround($10_1 * $25_1)) + Math_fround($11_1 * $26_1));
   $50_1 = ($6_1 + 128 | 0) + 56 | 0;
   $35_1 = Math_fround(-$35_1);
   HEAPF32[$50_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21_1 * $35_1) - Math_fround($12_1 * $15_1)) - Math_fround($13_1 * $16_1)) + Math_fround(Math_fround(Math_fround($21_1 * $32_1) + Math_fround($12_1 * $22_1)) + Math_fround($13_1 * $24_1)));
   $51_1 = ($6_1 + 128 | 0) + 52 | 0;
   HEAPF32[$51_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($20_1 * $35_1) - Math_fround($10_1 * $15_1)) - Math_fround($11_1 * $16_1)) + Math_fround(Math_fround(Math_fround($20_1 * $32_1) + Math_fround($10_1 * $22_1)) + Math_fround($11_1 * $24_1)));
   HEAP32[($6_1 + 140 | 0) >> 2] = 0;
   HEAPF32[($6_1 + 160 | 0) >> 2] = Math_fround(Math_fround(Math_fround($21_1 * $30_1) + Math_fround($12_1 * $31_1)) + Math_fround($13_1 * $28_1));
   HEAPF32[($6_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $30_1) + Math_fround($10_1 * $31_1)) + Math_fround($11_1 * $28_1));
   HEAPF32[($6_1 + 136 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $34_1) + Math_fround($19_1 * $23_1)) + Math_fround($17_1 * $27_1));
   HEAPF32[($6_1 + 176 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($18_1 * $35_1) - Math_fround($19_1 * $15_1)) - Math_fround($17_1 * $16_1)) + Math_fround(Math_fround(Math_fround($18_1 * $32_1) + Math_fround($19_1 * $22_1)) + Math_fround($17_1 * $24_1)));
   HEAPF32[($6_1 + 132 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $33_1) + Math_fround($19_1 * $25_1)) + Math_fround($17_1 * $26_1));
   HEAPF32[($6_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $30_1) + Math_fround($19_1 * $31_1)) + Math_fround($17_1 * $28_1));
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $6_1 + 128 | 0, $6_1 + 64 | 0, $6_1 + 48 | 0);
   $15_1 = Math_fround(HEAPF32[$14_1 >> 2]);
   $16_1 = Math_fround(HEAPF32[$38_1 >> 2]);
   $22_1 = Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]);
   $24_1 = Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[$39_1 >> 2]);
   $11_1 = Math_fround(HEAPF32[$40_1 >> 2]);
   $25_1 = Math_fround(HEAPF32[($2_1 + 20 | 0) >> 2]);
   $26_1 = Math_fround(HEAPF32[($2_1 + 36 | 0) >> 2]);
   $23_1 = Math_fround(HEAPF32[($2_1 + 24 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[$41_1 >> 2]);
   $27_1 = Math_fround(HEAPF32[($2_1 + 40 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[$42_1 >> 2]);
   $17_1 = Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]);
   $18_1 = Math_fround(HEAPF32[$7_1 >> 2]);
   $19_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
   $28_1 = Math_fround(HEAPF32[($2_1 + 32 | 0) >> 2]);
   $30_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $31_1 = Math_fround(HEAPF32[($2_1 + 16 | 0) >> 2]);
   $35_1 = Math_fround(HEAPF32[($7_1 + 48 | 0) >> 2]);
   $32_1 = Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]);
   $33_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $34_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
   HEAP32[$43_1 >> 2] = 0;
   HEAP32[$44_1 >> 2] = 0;
   HEAP32[$45_1 >> 2] = 0;
   HEAPF32[$46_1 >> 2] = Math_fround(Math_fround(Math_fround($21_1 * $34_1) + Math_fround($12_1 * $23_1)) + Math_fround($13_1 * $27_1));
   HEAPF32[$47_1 >> 2] = Math_fround(Math_fround(Math_fround($21_1 * $33_1) + Math_fround($12_1 * $25_1)) + Math_fround($13_1 * $26_1));
   HEAPF32[$48_1 >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $34_1) + Math_fround($10_1 * $23_1)) + Math_fround($11_1 * $27_1));
   HEAPF32[$49_1 >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $33_1) + Math_fround($10_1 * $25_1)) + Math_fround($11_1 * $26_1));
   $35_1 = Math_fround(-$35_1);
   HEAPF32[$50_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21_1 * $35_1) - Math_fround($12_1 * $15_1)) - Math_fround($13_1 * $16_1)) + Math_fround(Math_fround(Math_fround($21_1 * $32_1) + Math_fround($12_1 * $22_1)) + Math_fround($13_1 * $24_1)));
   HEAPF32[$51_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($20_1 * $35_1) - Math_fround($10_1 * $15_1)) - Math_fround($11_1 * $16_1)) + Math_fround(Math_fround(Math_fround($20_1 * $32_1) + Math_fround($10_1 * $22_1)) + Math_fround($11_1 * $24_1)));
   HEAP32[($6_1 + 140 | 0) >> 2] = 0;
   HEAPF32[($6_1 + 160 | 0) >> 2] = Math_fround(Math_fround(Math_fround($21_1 * $30_1) + Math_fround($12_1 * $31_1)) + Math_fround($13_1 * $28_1));
   HEAPF32[($6_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround($20_1 * $30_1) + Math_fround($10_1 * $31_1)) + Math_fround($11_1 * $28_1));
   HEAPF32[($6_1 + 136 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $34_1) + Math_fround($19_1 * $23_1)) + Math_fround($17_1 * $27_1));
   HEAPF32[($6_1 + 176 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($18_1 * $35_1) - Math_fround($19_1 * $15_1)) - Math_fround($17_1 * $16_1)) + Math_fround(Math_fround(Math_fround($18_1 * $32_1) + Math_fround($19_1 * $22_1)) + Math_fround($17_1 * $24_1)));
   HEAPF32[($6_1 + 132 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $33_1) + Math_fround($19_1 * $25_1)) + Math_fround($17_1 * $26_1));
   HEAPF32[($6_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $30_1) + Math_fround($19_1 * $31_1)) + Math_fround($17_1 * $28_1));
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $6_1 + 128 | 0, $6_1 + 24 | 0, $6_1 + 8 | 0);
   label$15 : {
    $10_1 = Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]);
    if ($10_1 < Math_fround(HEAPF32[($6_1 + 64 | 0) >> 2]) ^ 1 | 0) {
     break label$15
    }
    HEAPF32[($6_1 + 64 | 0) >> 2] = $10_1;
   }
   label$16 : {
    $10_1 = Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2]);
    if ($10_1 < Math_fround(HEAPF32[($6_1 + 68 | 0) >> 2]) ^ 1 | 0) {
     break label$16
    }
    HEAPF32[($6_1 + 68 | 0) >> 2] = $10_1;
   }
   label$17 : {
    $10_1 = Math_fround(HEAPF32[($6_1 + 32 | 0) >> 2]);
    if ($10_1 < Math_fround(HEAPF32[($6_1 + 72 | 0) >> 2]) ^ 1 | 0) {
     break label$17
    }
    HEAPF32[($6_1 + 72 | 0) >> 2] = $10_1;
   }
   label$18 : {
    $10_1 = Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]);
    if ($10_1 < Math_fround(HEAPF32[($6_1 + 76 | 0) >> 2]) ^ 1 | 0) {
     break label$18
    }
    HEAPF32[($6_1 + 76 | 0) >> 2] = $10_1;
   }
   label$19 : {
    $10_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
    if (Math_fround(HEAPF32[($6_1 + 48 | 0) >> 2]) < $10_1 ^ 1 | 0) {
     break label$19
    }
    HEAPF32[($6_1 + 48 | 0) >> 2] = $10_1;
   }
   label$20 : {
    $10_1 = Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]);
    if (Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2]) < $10_1 ^ 1 | 0) {
     break label$20
    }
    HEAPF32[($6_1 + 52 | 0) >> 2] = $10_1;
   }
   label$21 : {
    $10_1 = Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]);
    if (Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]) < $10_1 ^ 1 | 0) {
     break label$21
    }
    HEAPF32[($6_1 + 56 | 0) >> 2] = $10_1;
   }
   label$22 : {
    $10_1 = Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]);
    if (Math_fround(HEAPF32[($6_1 + 60 | 0) >> 2]) < $10_1 ^ 1 | 0) {
     break label$22
    }
    HEAPF32[($6_1 + 60 | 0) >> 2] = $10_1;
   }
   HEAP32[($6_1 + 520 | 0) >> 2] = $4_1;
   HEAP32[($6_1 + 516 | 0) >> 2] = $7_1;
   HEAPF32[($6_1 + 508 | 0) >> 2] = $5_1;
   HEAP32[($6_1 + 504 | 0) >> 2] = $2_1;
   HEAP32[($6_1 + 500 | 0) >> 2] = $1_1;
   HEAP32[($6_1 + 496 | 0) >> 2] = $0_1;
   HEAP32[($6_1 + 492 | 0) >> 2] = $3_1;
   HEAP32[($6_1 + 488 | 0) >> 2] = 22152;
   HEAP32[($6_1 + 512 | 0) >> 2] = $8_1;
   label$23 : {
    label$24 : {
     $2_1 = HEAP32[($8_1 + 68 | 0) >> 2] | 0;
     if ($2_1) {
      break label$24
     }
     if ((HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$23
     }
     $3_1 = 64;
     $1_1 = 1;
     label$25 : while (1) {
      $2_1 = (HEAP32[($8_1 + 28 | 0) >> 2] | 0) + $3_1 | 0;
      $0_1 = HEAP32[$2_1 >> 2] | 0;
      $5_1 = Math_fround(HEAPF32[($2_1 + -16 | 0) >> 2]);
      $10_1 = Math_fround(HEAPF32[($2_1 + -12 | 0) >> 2]);
      $11_1 = Math_fround(HEAPF32[($2_1 + -8 | 0) >> 2]);
      $12_1 = Math_fround(HEAPF32[($2_1 + -64 | 0) >> 2]);
      $13_1 = Math_fround(HEAPF32[($2_1 + -48 | 0) >> 2]);
      $17_1 = Math_fround(HEAPF32[($2_1 + -32 | 0) >> 2]);
      $18_1 = Math_fround(HEAPF32[($2_1 + -60 | 0) >> 2]);
      $19_1 = Math_fround(HEAPF32[($2_1 + -44 | 0) >> 2]);
      $20_1 = Math_fround(HEAPF32[($2_1 + -28 | 0) >> 2]);
      $21_1 = Math_fround(HEAPF32[($2_1 + -56 | 0) >> 2]);
      $15_1 = Math_fround(HEAPF32[($2_1 + -40 | 0) >> 2]);
      $16_1 = Math_fround(HEAPF32[($2_1 + -24 | 0) >> 2]);
      HEAP32[($6_1 + 188 | 0) >> 2] = 0;
      HEAP32[($6_1 + 172 | 0) >> 2] = 0;
      HEAP32[($6_1 + 156 | 0) >> 2] = 0;
      HEAP32[($6_1 + 140 | 0) >> 2] = 0;
      $22_1 = Math_fround(HEAPF32[($7_1 + 32 | 0) >> 2]);
      $24_1 = Math_fround(HEAPF32[($7_1 + 36 | 0) >> 2]);
      $25_1 = Math_fround(HEAPF32[($7_1 + 40 | 0) >> 2]);
      HEAPF32[($6_1 + 168 | 0) >> 2] = Math_fround(Math_fround(Math_fround($21_1 * $22_1) + Math_fround($15_1 * $24_1)) + Math_fround($16_1 * $25_1));
      HEAPF32[($6_1 + 164 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $22_1) + Math_fround($19_1 * $24_1)) + Math_fround($20_1 * $25_1));
      HEAPF32[($6_1 + 160 | 0) >> 2] = Math_fround(Math_fround(Math_fround($12_1 * $22_1) + Math_fround($13_1 * $24_1)) + Math_fround($17_1 * $25_1));
      $26_1 = Math_fround(HEAPF32[($7_1 + 16 | 0) >> 2]);
      $23_1 = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
      $27_1 = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
      HEAPF32[($6_1 + 152 | 0) >> 2] = Math_fround(Math_fround(Math_fround($21_1 * $26_1) + Math_fround($15_1 * $23_1)) + Math_fround($16_1 * $27_1));
      HEAPF32[($6_1 + 148 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $26_1) + Math_fround($19_1 * $23_1)) + Math_fround($20_1 * $27_1));
      HEAPF32[($6_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround($12_1 * $26_1) + Math_fround($13_1 * $23_1)) + Math_fround($17_1 * $27_1));
      $28_1 = Math_fround(HEAPF32[$7_1 >> 2]);
      $1868 = Math_fround($21_1 * $28_1);
      $21_1 = Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]);
      $1874 = Math_fround($1868 + Math_fround($15_1 * $21_1));
      $15_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
      HEAPF32[($6_1 + 136 | 0) >> 2] = Math_fround($1874 + Math_fround($16_1 * $15_1));
      HEAPF32[($6_1 + 132 | 0) >> 2] = Math_fround(Math_fround(Math_fround($18_1 * $28_1) + Math_fround($19_1 * $21_1)) + Math_fround($20_1 * $15_1));
      HEAPF32[($6_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround($12_1 * $28_1) + Math_fround($13_1 * $21_1)) + Math_fround($17_1 * $15_1));
      HEAPF32[($6_1 + 184 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $22_1) + Math_fround($10_1 * $24_1)) + Math_fround($11_1 * $25_1)) + Math_fround(HEAPF32[($7_1 + 56 | 0) >> 2]));
      HEAPF32[($6_1 + 180 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $26_1) + Math_fround($10_1 * $23_1)) + Math_fround($11_1 * $27_1)) + Math_fround(HEAPF32[($7_1 + 52 | 0) >> 2]));
      HEAPF32[($6_1 + 176 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $28_1) + Math_fround($10_1 * $21_1)) + Math_fround($11_1 * $15_1)) + Math_fround(HEAPF32[($7_1 + 48 | 0) >> 2]));
      HEAP32[($6_1 + 84 | 0) >> 2] = 1065353216;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$0 = -1;
      HEAP32[($6_1 + 88 | 0) >> 2] = 1;
      HEAP32[($6_1 + 92 | 0) >> 2] = i64toi32_i32$0;
      $7_1 = $1_1 + -1 | 0;
      HEAP32[($6_1 + 100 | 0) >> 2] = $7_1;
      $2_1 = HEAP32[($6_1 + 520 | 0) >> 2] | 0;
      HEAP32[($6_1 + 96 | 0) >> 2] = $2_1;
      HEAP32[($6_1 + 80 | 0) >> 2] = 22368;
      HEAP32[($6_1 + 84 | 0) >> 2] = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      HEAP32[($6_1 + 684 | 0) >> 2] = $7_1;
      HEAP32[($6_1 + 680 | 0) >> 2] = -1;
      HEAP32[($6_1 + 668 | 0) >> 2] = $0_1;
      $7_1 = HEAP32[($6_1 + 492 | 0) >> 2] | 0;
      HEAP32[($6_1 + 664 | 0) >> 2] = $7_1;
      HEAP32[($6_1 + 672 | 0) >> 2] = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
      HEAP32[($6_1 + 676 | 0) >> 2] = $6_1 + 128 | 0;
      $870(HEAP32[($6_1 + 496 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 500 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 504 | 0) >> 2] | 0 | 0, $6_1 + 664 | 0 | 0, $6_1 + 80 | 0 | 0, Math_fround(Math_fround(HEAPF32[($6_1 + 508 | 0) >> 2])));
      if (($1_1 | 0) >= (HEAP32[($8_1 + 20 | 0) >> 2] | 0 | 0)) {
       break label$23
      }
      $3_1 = $3_1 + 80 | 0;
      $1_1 = $1_1 + 1 | 0;
      $7_1 = HEAP32[($6_1 + 516 | 0) >> 2] | 0;
      continue label$25;
     };
    }
    i64toi32_i32$2 = ($6_1 + 64 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2009 = i64toi32_i32$0;
    i64toi32_i32$0 = ($6_1 + 128 | 0) + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $2009;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = ($6_1 + 48 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2015 = i64toi32_i32$1;
    i64toi32_i32$1 = $6_1 + 152 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $2015;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = HEAP32[($6_1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($6_1 + 52 | 0) >> 2] | 0;
    $2018 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1;
    HEAP32[($6_1 + 144 | 0) >> 2] = $2018;
    HEAP32[($6_1 + 148 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$1 = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
    $2021 = i64toi32_i32$1;
    i64toi32_i32$1 = $6_1;
    HEAP32[($6_1 + 128 | 0) >> 2] = $2021;
    HEAP32[($6_1 + 132 | 0) >> 2] = i64toi32_i32$0;
    $765($2_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, $6_1 + 128 | 0 | 0, $6_1 + 488 | 0 | 0);
   }
   $617($9_1 | 0) | 0;
  }
  global$0 = $6_1 + 688 | 0;
 }
 
 function $871($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $11_1 = Math_fround(0), $13_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $7$hi = 0, $46_1 = 0, $10$hi = 0, $57_1 = 0, $81_1 = 0, $85_1 = 0, $94_1 = Math_fround(0);
  $4_1 = global$0 - 256 | 0;
  global$0 = $4_1;
  i64toi32_i32$1 = $4_1 + 104 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 112 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 124 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 120 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $4_1 + 132 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 140 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = $4_1 + 76 | 0;
  $6_1 = $1_1 + 8 | 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $8_1 = $4_1 + 92 | 0;
  $9_1 = $2_1 + 8 | 0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $46_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $8_1;
  HEAP32[i64toi32_i32$1 >> 2] = $46_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 32 | 0) >> 2] = 22628;
  HEAP32[($4_1 + 248 | 0) >> 2] = $3_1;
  HEAP32[($4_1 + 100 | 0) >> 2] = 1065353216;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10_1 = i64toi32_i32$0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 68 | 0) >> 2] = $10_1;
  HEAP32[($4_1 + 72 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $57_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = $57_1;
  HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 244 | 0) >> 2] = $0_1;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$1 + 156 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $10$hi;
  i64toi32_i32$1 = $4_1 + 148 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 168 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 176 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 188 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 184 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $4_1 + 196 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1 + 204 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $81_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1 + 212 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $85_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + 220 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $85_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 164 | 0) >> 2] = 1065353216;
  $11_1 = Math_fround(Math_fround(HEAPF32[i64toi32_i32$2 >> 2]) - Math_fround(HEAPF32[$6_1 >> 2]));
  $94_1 = $11_1;
  $12_1 = Math_fround(Math_fround(HEAPF32[$2_1 >> 2]) - Math_fround(HEAPF32[$1_1 >> 2]));
  $13_1 = Math_fround(Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) - Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]));
  $11_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($12_1 * $12_1) + Math_fround($13_1 * $13_1)) + Math_fround($11_1 * $11_1)))));
  $14_1 = Math_fround($94_1 * $11_1);
  $15_1 = $14_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $14_1);
  HEAPF32[($4_1 + 44 | 0) >> 2] = $15_1;
  $13_1 = Math_fround($13_1 * $11_1);
  $16_1 = $13_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $13_1);
  HEAPF32[(($4_1 + 32 | 0) + 8 | 0) >> 2] = $16_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $15_1 < Math_fround(0.0);
  HEAP32[($4_1 + 56 | 0) >> 2] = $16_1 < Math_fround(0.0);
  $11_1 = Math_fround($12_1 * $11_1);
  HEAPF32[($4_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround($11_1 * Math_fround(Math_fround(HEAPF32[($4_1 + 84 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 68 | 0) >> 2]))) + Math_fround($13_1 * Math_fround(Math_fround(HEAPF32[($4_1 + 88 | 0) >> 2]) - Math_fround(HEAPF32[($4_1 + 72 | 0) >> 2])))) + Math_fround($14_1 * Math_fround(Math_fround(HEAPF32[$8_1 >> 2]) - Math_fround(HEAPF32[$5_1 >> 2]))));
  $11_1 = $11_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $11_1);
  HEAPF32[($4_1 + 36 | 0) >> 2] = $11_1;
  HEAP32[($4_1 + 52 | 0) >> 2] = $11_1 < Math_fround(0.0);
  $0_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  i64toi32_i32$1 = ($4_1 + 16 | 0) + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1, $2_1, i64toi32_i32$1 + 32 | 0, i64toi32_i32$1 + 16 | 0, i64toi32_i32$1);
  global$0 = i64toi32_i32$1 + 256 | 0;
 }
 
 function $872($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  var $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $16_1 = Math_fround(0), $19_1 = Math_fround(0), $21_1 = Math_fround(0), $20_1 = Math_fround(0), $22_1 = Math_fround(0), $24_1 = Math_fround(0), $23_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10_1 = 0, $25_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $26_1 = Math_fround(0), $27_1 = 0, $7_1 = 0, $40_1 = 0, $47_1 = 0, $54_1 = 0, $61_1 = 0, $68_1 = 0, $71_1 = 0, $74_1 = 0, $77_1 = 0, $80_1 = 0, $83_1 = 0, $90_1 = 0, $97_1 = 0, $104_1 = 0, $107_1 = 0, $110_1 = 0, $113_1 = 0, $274_1 = 0, $278_1 = 0, $282_1 = 0, $286_1 = 0, $290_1 = 0, $295_1 = 0, $300_1 = 0, $304_1 = 0, $308_1 = 0, $311_1 = 0, $316_1 = 0, $321_1 = 0, $325_1 = 0, $329_1 = 0, $333_1 = 0, $337_1 = 0, $413_1 = Math_fround(0);
  $6_1 = global$0 - 400 | 0;
  global$0 = $6_1;
  $7_1 = $616($6_1 + 392 | 0 | 0, 20953 | 0) | 0;
  $8_1 = $2_1 + 8 | 0;
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $40_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 328 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $40_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $9_1 = $2_1 + 24 | 0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $47_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($6_1 + 328 | 0) + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $47_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $10_1 = $2_1 + 40 | 0;
  i64toi32_i32$2 = $10_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $54_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 328 | 0) + 40 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $54_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $11_1 = $2_1 + 56 | 0;
  i64toi32_i32$2 = $11_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $61_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($6_1 + 328 | 0) + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $61_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $12_1 = $3_1 + 8 | 0;
  i64toi32_i32$2 = $12_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $68_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 264 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $68_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $71_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $71_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $74_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $74_1;
  HEAP32[($6_1 + 348 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $77_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $77_1;
  HEAP32[($6_1 + 364 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $80_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[($6_1 + 376 | 0) >> 2] = $80_1;
  HEAP32[($6_1 + 380 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $83_1;
  HEAP32[($6_1 + 268 | 0) >> 2] = i64toi32_i32$0;
  $13_1 = i64toi32_i32$2 + 24 | 0;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $90_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 264 | 0) + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $90_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $14_1 = $3_1 + 40 | 0;
  i64toi32_i32$2 = $14_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $97_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($6_1 + 264 | 0) + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $97_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $15_1 = $3_1 + 56 | 0;
  i64toi32_i32$2 = $15_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $104_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 264 | 0) + 56 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $104_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $107_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[($6_1 + 280 | 0) >> 2] = $107_1;
  HEAP32[($6_1 + 284 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $110_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[($6_1 + 296 | 0) >> 2] = $110_1;
  HEAP32[($6_1 + 300 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $113_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[($6_1 + 312 | 0) >> 2] = $113_1;
  HEAP32[($6_1 + 316 | 0) >> 2] = i64toi32_i32$0;
  $803($6_1 + 328 | 0 | 0, $6_1 + 264 | 0 | 0, $6_1 | 0, $6_1 + 248 | 0 | 0);
  HEAP32[($6_1 + 228 | 0) >> 2] = 0;
  $16_1 = Math_fround(HEAPF32[($6_1 + 248 | 0) >> 2]);
  HEAPF32[($6_1 + 224 | 0) >> 2] = Math_fround($16_1 * Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]));
  HEAPF32[($6_1 + 220 | 0) >> 2] = Math_fround($16_1 * Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]));
  HEAPF32[($6_1 + 216 | 0) >> 2] = Math_fround($16_1 * Math_fround(HEAPF32[$6_1 >> 2]));
  i64toi32_i32$1 = ($6_1 + 200 | 0) + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 200 | 0) >> 2] = 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $6_1 + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $6_1 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $1043($6_1 + 328 | 0 | 0, $6_1 + 248 | 0 | 0);
  $17_1 = $6_1 + 44 | 0;
  HEAP32[$17_1 >> 2] = 0;
  $18_1 = $6_1 + 28 | 0;
  HEAP32[$18_1 >> 2] = 0;
  $19_1 = Math_fround(HEAPF32[($6_1 + 252 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($6_1 + 256 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($6_1 + 248 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($6_1 + 260 | 0) >> 2]);
  $22_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($16_1 * $16_1) + Math_fround($19_1 * $19_1)) + Math_fround($20_1 * $20_1)) + Math_fround($21_1 * $21_1)));
  $23_1 = Math_fround($20_1 * $22_1);
  $24_1 = Math_fround($19_1 * $23_1);
  $25_1 = Math_fround($16_1 * $22_1);
  $26_1 = Math_fround($21_1 * $25_1);
  HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround($24_1 + $26_1);
  $27_1 = $6_1 + 24 | 0;
  HEAPF32[$27_1 >> 2] = Math_fround($24_1 - $26_1);
  $24_1 = Math_fround($16_1 * $25_1);
  $22_1 = Math_fround($19_1 * $22_1);
  $19_1 = Math_fround($19_1 * $22_1);
  HEAPF32[($6_1 + 40 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($24_1 + $19_1));
  $20_1 = Math_fround($20_1 * $23_1);
  HEAPF32[($6_1 + 20 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($24_1 + $20_1));
  HEAP32[($6_1 + 12 | 0) >> 2] = 0;
  $24_1 = Math_fround($16_1 * $23_1);
  $25_1 = Math_fround($21_1 * $22_1);
  HEAPF32[($6_1 + 32 | 0) >> 2] = Math_fround($24_1 - $25_1);
  $16_1 = Math_fround($16_1 * $22_1);
  $21_1 = Math_fround($21_1 * $23_1);
  HEAPF32[($6_1 + 16 | 0) >> 2] = Math_fround($16_1 + $21_1);
  HEAPF32[($6_1 + 8 | 0) >> 2] = Math_fround($24_1 + $25_1);
  HEAPF32[($6_1 + 4 | 0) >> 2] = Math_fround($16_1 - $21_1);
  HEAPF32[$6_1 >> 2] = Math_fround(Math_fround(1.0) - Math_fround($19_1 + $20_1));
  $97($1_1 | 0, $6_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 216 | 0 | 0, Math_fround(Math_fround(1.0)), $6_1 + 248 | 0 | 0, $6_1 + 232 | 0 | 0);
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $274_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $17_1;
  HEAP32[i64toi32_i32$0 >> 2] = $274_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $278_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 52 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $278_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $282_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 60 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $282_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $286_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 68 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $286_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $10_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $290_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 76 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $290_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $8_1 = $6_1 + 84 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $295_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $8_1;
  HEAP32[i64toi32_i32$1 >> 2] = $295_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $9_1 = $6_1 + 92 | 0;
  i64toi32_i32$2 = $11_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $300_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $9_1;
  HEAP32[i64toi32_i32$0 >> 2] = $300_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $12_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $304_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 108 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $304_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$6_1 >> 2] = 22756;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $308_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $308_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $311_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[($6_1 + 100 | 0) >> 2] = $311_1;
  HEAP32[($6_1 + 104 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = $6_1 + 148 | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $316_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[i64toi32_i32$0 >> 2] = $316_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $10_1 = $6_1 + 156 | 0;
  i64toi32_i32$2 = $15_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $321_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $10_1;
  HEAP32[i64toi32_i32$1 >> 2] = $321_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $325_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 124 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $325_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $329_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 116 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $329_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $14_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $333_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 140 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $333_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $337_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 132 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $337_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($6_1 + 184 | 0) >> 2] = $4_1;
  HEAPF32[($6_1 + 188 | 0) >> 2] = $5_1;
  HEAP32[($6_1 + 192 | 0) >> 2] = $1_1;
  $21_1 = Math_fround(HEAPF32[($6_1 + 88 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($6_1 + 152 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[$8_1 >> 2]);
  $23_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $16_1 = Math_fround(HEAPF32[$9_1 >> 2]);
  $22_1 = Math_fround(HEAPF32[$10_1 >> 2]);
  HEAP32[($6_1 + 180 | 0) >> 2] = $0_1;
  $16_1 = Math_fround($22_1 - $16_1);
  $19_1 = Math_fround($23_1 - $19_1);
  $21_1 = Math_fround($20_1 - $21_1);
  $20_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($19_1 * $19_1) + Math_fround($21_1 * $21_1)) + Math_fround($16_1 * $16_1)))));
  $23_1 = Math_fround($16_1 * $20_1);
  $5_1 = $23_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $23_1);
  HEAP32[$18_1 >> 2] = $5_1 < Math_fround(0.0);
  $22_1 = Math_fround($21_1 * $20_1);
  $24_1 = $22_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $22_1);
  HEAP32[$27_1 >> 2] = $24_1 < Math_fround(0.0);
  HEAPF32[($6_1 + 12 | 0) >> 2] = $5_1;
  HEAPF32[($6_1 + 8 | 0) >> 2] = $24_1;
  $413_1 = Math_fround($16_1 * $23_1);
  $16_1 = Math_fround($19_1 * $20_1);
  HEAPF32[($6_1 + 32 | 0) >> 2] = Math_fround($413_1 + Math_fround(Math_fround($19_1 * $16_1) + Math_fround($21_1 * $22_1)));
  $16_1 = $16_1 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $16_1);
  HEAPF32[($6_1 + 4 | 0) >> 2] = $16_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $16_1 < Math_fround(0.0);
  $3_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($3_1, ($6_1 + 328 | 0) + 48 | 0, ($6_1 + 264 | 0) + 48 | 0, $6_1, $6_1 + 248 | 0, $6_1 + 232 | 0);
  $617($7_1 | 0) | 0;
  global$0 = $6_1 + 400 | 0;
 }
 
 function $873($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $874($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $7_1 = 0, $11_1 = Math_fround(0), $19_1 = Math_fround(0), $6_1 = 0, $18_1 = Math_fround(0), $20_1 = Math_fround(0), $15_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $22_1 = Math_fround(0), $12_1 = Math_fround(0), $16_1 = Math_fround(0), $23_1 = Math_fround(0), $21_1 = Math_fround(0), $17_1 = Math_fround(0), $8_1 = 0, $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = 0, $30_1 = 0, $29_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = Math_fround(0), $36_1 = Math_fround(0), $216_1 = Math_fround(0), $222_1 = Math_fround(0), $316_1 = 0, $319_1 = 0, $448_1 = Math_fround(0), $478_1 = Math_fround(0), $508_1 = Math_fround(0), $645_1 = 0, $648_1 = 0, $1282 = 0, $1287 = 0, $1291 = 0, $1296 = 0, $1300 = 0, $1305 = 0, $1312 = 0, $1315 = 0, $1320 = 0, $1324 = 0, $1356 = 0, $1361 = 0, $1365 = 0, $1370 = 0, $1374 = 0, $1379 = 0, $1386 = 0, $1389 = 0, $1394 = 0, $1398 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0)) {
    break label$1
   }
   $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
   if (!((FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($5_1) | 0) & 32768 | 0)) {
    break label$1
   }
   $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($5_1, $1_1, Math_fround(.10000000149011612));
  }
  label$2 : {
   label$3 : {
    $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    if ($5_1 >>> 0 > 31 >>> 0) {
     break label$3
    }
    label$4 : {
     switch ($5_1 | 0) {
     case 31:
      $6_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if (($6_1 | 0) < (1 | 0)) {
       break label$2
      }
      $7_1 = Math_imul($6_1, 80) + -80 | 0;
      label$12 : while (1) {
       $5_1 = (HEAP32[($2_1 + 28 | 0) >> 2] | 0) + $7_1 | 0;
       $8_1 = HEAP32[($5_1 + 64 | 0) >> 2] | 0;
       $9_1 = Math_fround(HEAPF32[($5_1 + 56 | 0) >> 2]);
       $10_1 = Math_fround(HEAPF32[($5_1 + 48 | 0) >> 2]);
       $11_1 = Math_fround(HEAPF32[($5_1 + 52 | 0) >> 2]);
       $12_1 = Math_fround(HEAPF32[($5_1 + 32 | 0) >> 2]);
       $13_1 = Math_fround(HEAPF32[$5_1 >> 2]);
       $14_1 = Math_fround(HEAPF32[($5_1 + 16 | 0) >> 2]);
       $15_1 = Math_fround(HEAPF32[($5_1 + 36 | 0) >> 2]);
       $16_1 = Math_fround(HEAPF32[($5_1 + 4 | 0) >> 2]);
       $17_1 = Math_fround(HEAPF32[($5_1 + 20 | 0) >> 2]);
       $18_1 = Math_fround(HEAPF32[($5_1 + 40 | 0) >> 2]);
       $19_1 = Math_fround(HEAPF32[($5_1 + 8 | 0) >> 2]);
       $20_1 = Math_fround(HEAPF32[($5_1 + 24 | 0) >> 2]);
       HEAP32[($4_1 + 60 | 0) >> 2] = 0;
       HEAP32[($4_1 + 44 | 0) >> 2] = 0;
       HEAP32[($4_1 + 28 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = 0;
       $21_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
       $22_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
       $23_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
       HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($19_1 * $21_1) + Math_fround($20_1 * $22_1)) + Math_fround($18_1 * $23_1));
       HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $21_1) + Math_fround($17_1 * $22_1)) + Math_fround($15_1 * $23_1));
       HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $21_1) + Math_fround($14_1 * $22_1)) + Math_fround($12_1 * $23_1));
       $24_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
       $25_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
       $26_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
       HEAPF32[($4_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($19_1 * $24_1) + Math_fround($20_1 * $25_1)) + Math_fround($18_1 * $26_1));
       HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $24_1) + Math_fround($17_1 * $25_1)) + Math_fround($15_1 * $26_1));
       HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $24_1) + Math_fround($14_1 * $25_1)) + Math_fround($12_1 * $26_1));
       $27_1 = Math_fround(HEAPF32[$1_1 >> 2]);
       $216_1 = Math_fround($19_1 * $27_1);
       $19_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
       $222_1 = Math_fround($216_1 + Math_fround($20_1 * $19_1));
       $20_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
       HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround($222_1 + Math_fround($18_1 * $20_1));
       HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $27_1) + Math_fround($17_1 * $19_1)) + Math_fround($15_1 * $20_1));
       HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $27_1) + Math_fround($14_1 * $19_1)) + Math_fround($12_1 * $20_1));
       HEAPF32[($4_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $21_1) + Math_fround($11_1 * $22_1)) + Math_fround($9_1 * $23_1)) + Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]));
       HEAPF32[($4_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $24_1) + Math_fround($11_1 * $25_1)) + Math_fround($9_1 * $26_1)) + Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]));
       HEAPF32[($4_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $27_1) + Math_fround($11_1 * $19_1)) + Math_fround($9_1 * $20_1)) + Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]));
       FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $4_1, $8_1, $3_1);
       $7_1 = $7_1 + -80 | 0;
       $6_1 = $6_1 + -1 | 0;
       if (($6_1 | 0) > (0 | 0)) {
        continue label$12
       }
       break label$2;
      };
     default:
      $5_1 = $4_1 + 8 | 0;
      i64toi32_i32$2 = $2_1 + 40 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $316_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $5_1;
      HEAP32[i64toi32_i32$0 >> 2] = $316_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
      $319_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $4_1;
      HEAP32[$4_1 >> 2] = $319_1;
      HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[i64toi32_i32$2 >> 2] | 0) + 48 | 0) >> 2] | 0](i64toi32_i32$2));
      $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[i64toi32_i32$2 >> 2] | 0) + 48 | 0) >> 2] | 0](i64toi32_i32$2));
      $11_1 = Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[i64toi32_i32$2 >> 2] | 0) + 48 | 0) >> 2] | 0](i64toi32_i32$2)) + Math_fround(HEAPF32[$5_1 >> 2]));
      HEAPF32[$5_1 >> 2] = $11_1;
      $9_1 = Math_fround($9_1 + Math_fround(HEAPF32[$4_1 >> 2]));
      HEAPF32[$4_1 >> 2] = $9_1;
      $10_1 = Math_fround($10_1 + Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
      HEAPF32[($4_1 + 4 | 0) >> 2] = $10_1;
      $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
      HEAP32[($4_1 + 140 | 0) >> 2] = 0;
      HEAPF32[($4_1 + 136 | 0) >> 2] = Math_fround(-$11_1);
      HEAPF32[($4_1 + 132 | 0) >> 2] = Math_fround(-$10_1);
      HEAPF32[($4_1 + 128 | 0) >> 2] = Math_fround(-$9_1);
      FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 80 | 0) >> 2] | 0]($0_1, $4_1 + 128 | 0, $4_1, $1_1, $3_1);
      break label$2;
     case 8:
      $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($2_1));
      $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $9_1, $1_1, $3_1);
      break label$2;
     case 9:
      $8_1 = HEAP32[($2_1 + 96 | 0) >> 2] | 0;
      if (($8_1 | 0) < (1 | 0)) {
       break label$2
      }
      $5_1 = ($8_1 << 2 | 0) + -4 | 0;
      $7_1 = ($8_1 << 4 | 0) + -8 | 0;
      label$13 : while (1) {
       $6_1 = (HEAP32[($2_1 + 104 | 0) >> 2] | 0) + $7_1 | 0;
       $9_1 = Math_fround(HEAPF32[$6_1 >> 2]);
       $10_1 = Math_fround(HEAPF32[($6_1 + -8 | 0) >> 2]);
       $11_1 = Math_fround(HEAPF32[($6_1 + -4 | 0) >> 2]);
       $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
       $21_1 = Math_fround(HEAPF32[((HEAP32[($2_1 + 124 | 0) >> 2] | 0) + $5_1 | 0) >> 2]);
       HEAP32[($4_1 + 60 | 0) >> 2] = 0;
       HEAP32[($4_1 + 44 | 0) >> 2] = 0;
       HEAP32[($4_1 + 28 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = 0;
       $12_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
       $13_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
       $15_1 = Math_fround($13_1 * Math_fround(0.0));
       $14_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
       $16_1 = Math_fround($14_1 * Math_fround(0.0));
       HEAPF32[($4_1 + 40 | 0) >> 2] = Math_fround($12_1 + Math_fround($15_1 + $16_1));
       $448_1 = Math_fround($15_1 + $14_1);
       $15_1 = Math_fround($12_1 * Math_fround(0.0));
       HEAPF32[($4_1 + 36 | 0) >> 2] = Math_fround($448_1 + $15_1);
       HEAPF32[($4_1 + 32 | 0) >> 2] = Math_fround(Math_fround($13_1 + $16_1) + $15_1);
       $15_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
       $16_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
       $18_1 = Math_fround($16_1 * Math_fround(0.0));
       $17_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
       $19_1 = Math_fround($17_1 * Math_fround(0.0));
       HEAPF32[($4_1 + 24 | 0) >> 2] = Math_fround($15_1 + Math_fround($18_1 + $19_1));
       $478_1 = Math_fround($18_1 + $17_1);
       $18_1 = Math_fround($15_1 * Math_fround(0.0));
       HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround($478_1 + $18_1);
       HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround(Math_fround($16_1 + $19_1) + $18_1);
       $18_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
       $19_1 = Math_fround(HEAPF32[$1_1 >> 2]);
       $22_1 = Math_fround($19_1 * Math_fround(0.0));
       $20_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
       $23_1 = Math_fround($20_1 * Math_fround(0.0));
       HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround($18_1 + Math_fround($22_1 + $23_1));
       $508_1 = Math_fround($22_1 + $20_1);
       $22_1 = Math_fround($18_1 * Math_fround(0.0));
       HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround($508_1 + $22_1);
       HEAPF32[$4_1 >> 2] = Math_fround(Math_fround($19_1 + $23_1) + $22_1);
       HEAPF32[($4_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $13_1) + Math_fround($11_1 * $14_1)) + Math_fround($9_1 * $12_1)) + Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]));
       HEAPF32[($4_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $16_1) + Math_fround($11_1 * $17_1)) + Math_fround($9_1 * $15_1)) + Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]));
       HEAPF32[($4_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $19_1) + Math_fround($11_1 * $20_1)) + Math_fround($9_1 * $18_1)) + Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]));
       FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($6_1, $21_1, $4_1, $3_1);
       $5_1 = $5_1 + -4 | 0;
       $7_1 = $7_1 + -16 | 0;
       $8_1 = $8_1 + -1 | 0;
       if (($8_1 | 0) > (0 | 0)) {
        continue label$13
       }
       break label$2;
      };
     case 10:
      $7_1 = $2_1 + 32 | 0;
      $5_1 = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
      $9_1 = Math_fround(HEAPF32[($7_1 + ($5_1 << 2 | 0) | 0) >> 2]);
      $10_1 = Math_fround(HEAPF32[($7_1 + ((($5_1 + 2 | 0 | 0) % (3 | 0) | 0) << 2 | 0) | 0) >> 2]);
      $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 84 | 0) >> 2] | 0]($0_1, $10_1, $9_1, $5_1, $1_1, $3_1);
      break label$2;
     case 11:
      $5_1 = HEAP32[($2_1 + 72 | 0) >> 2] | 0;
      $9_1 = Math_fround(HEAPF32[($2_1 + 60 | 0) >> 2]);
      $10_1 = Math_fround(HEAPF32[($2_1 + 64 | 0) >> 2]);
      $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 92 | 0) >> 2] | 0]($0_1, $9_1, $10_1, $5_1, $1_1, $3_1);
      break label$2;
     case 13:
      $5_1 = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
      $9_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 92 | 0) >> 2] | 0]($2_1));
      $7_1 = $4_1 + 8 | 0;
      i64toi32_i32$2 = $2_1 + 40 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $645_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $7_1;
      HEAP32[i64toi32_i32$0 >> 2] = $645_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
      $648_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $4_1;
      HEAP32[$4_1 >> 2] = $648_1;
      HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $10_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[i64toi32_i32$2 >> 2] | 0) + 48 | 0) >> 2] | 0](i64toi32_i32$2));
      $11_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[i64toi32_i32$2 >> 2] | 0) + 48 | 0) >> 2] | 0](i64toi32_i32$2));
      (wasm2js_i32$0 = $7_1, wasm2js_f32$0 = Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[i64toi32_i32$2 >> 2] | 0) + 48 | 0) >> 2] | 0](i64toi32_i32$2)) + Math_fround(HEAPF32[$7_1 >> 2]))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
      HEAPF32[$4_1 >> 2] = Math_fround($10_1 + Math_fround(HEAPF32[$4_1 >> 2]));
      HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround($11_1 + Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]));
      $10_1 = Math_fround(HEAPF32[($4_1 + ($5_1 << 2 | 0) | 0) >> 2]);
      $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 88 | 0) >> 2] | 0]($0_1, $9_1, $10_1, $5_1, $1_1, $3_1);
      break label$2;
     case 1:
     case 2:
     case 3:
     case 4:
     case 5:
     case 6:
     case 7:
     case 12:
     case 14:
     case 15:
     case 16:
     case 17:
     case 18:
     case 19:
     case 20:
     case 21:
     case 22:
     case 23:
     case 24:
     case 25:
     case 26:
     case 27:
     case 29:
     case 30:
      break label$3;
     case 28:
      break label$4;
     };
    }
    $9_1 = Math_fround(HEAPF32[($2_1 + 68 | 0) >> 2]);
    $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 96 | 0) >> 2] | 0]($0_1, $2_1 + 52 | 0, $9_1, $1_1, $3_1);
    break label$2;
   }
   label$14 : {
    if (($5_1 | 0) > (6 | 0)) {
     break label$14
    }
    label$15 : {
     $5_1 = HEAP32[($2_1 + 56 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$15
     }
     if ((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$14
     }
     $28_1 = 0;
     label$16 : while (1) {
      $12_1 = Math_fround(0.0);
      label$17 : {
       label$18 : {
        $29_1 = Math_imul($28_1, 36);
        $7_1 = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + $29_1 | 0;
        $30_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
        if ($30_1) {
         break label$18
        }
        $13_1 = Math_fround(0.0);
        $14_1 = Math_fround(0.0);
        break label$17;
       }
       $13_1 = Math_fround(0.0);
       $14_1 = Math_fround(0.0);
       if (($30_1 | 0) < (1 | 0)) {
        break label$17
       }
       $7_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
       $6_1 = HEAP32[((($30_1 << 2 | 0) + $7_1 | 0) + -4 | 0) >> 2] | 0;
       $14_1 = Math_fround(0.0);
       $8_1 = 1;
       $31_1 = 0;
       $13_1 = Math_fround(0.0);
       $12_1 = Math_fround(0.0);
       label$19 : while (1) {
        $32_1 = HEAP32[($7_1 + $31_1 | 0) >> 2] | 0;
        $33_1 = $32_1 << 4 | 0;
        $7_1 = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + $33_1 | 0;
        $15_1 = Math_fround(HEAPF32[$7_1 >> 2]);
        $16_1 = Math_fround(HEAPF32[($7_1 + 4 | 0) >> 2]);
        $17_1 = Math_fround(HEAPF32[($7_1 + 8 | 0) >> 2]);
        $7_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
        HEAP32[($4_1 + 12 | 0) >> 2] = 0;
        $34_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        $6_1 = $34_1 + ($6_1 << 4 | 0) | 0;
        $9_1 = Math_fround(HEAPF32[$6_1 >> 2]);
        $18_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
        $10_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
        $19_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
        $11_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
        $20_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
        $21_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
        HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $18_1) + Math_fround($10_1 * $19_1)) + Math_fround($11_1 * $20_1)) + $21_1);
        $22_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
        $23_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
        $24_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
        $25_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
        HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $22_1) + Math_fround($10_1 * $23_1)) + Math_fround($11_1 * $24_1)) + $25_1);
        $26_1 = Math_fround(HEAPF32[$1_1 >> 2]);
        $27_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
        $35_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
        $36_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
        HEAPF32[$4_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $26_1) + Math_fround($10_1 * $27_1)) + Math_fround($11_1 * $35_1)) + $36_1);
        HEAP32[($4_1 + 140 | 0) >> 2] = 0;
        $6_1 = $34_1 + $33_1 | 0;
        $9_1 = Math_fround(HEAPF32[$6_1 >> 2]);
        $10_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
        $11_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
        HEAPF32[($4_1 + 136 | 0) >> 2] = Math_fround($21_1 + Math_fround(Math_fround(Math_fround($18_1 * $9_1) + Math_fround($19_1 * $10_1)) + Math_fround($20_1 * $11_1)));
        HEAPF32[($4_1 + 132 | 0) >> 2] = Math_fround($25_1 + Math_fround(Math_fround(Math_fround($22_1 * $9_1) + Math_fround($23_1 * $10_1)) + Math_fround($24_1 * $11_1)));
        HEAPF32[($4_1 + 128 | 0) >> 2] = Math_fround($36_1 + Math_fround(Math_fround(Math_fround($26_1 * $9_1) + Math_fround($27_1 * $10_1)) + Math_fround($35_1 * $11_1)));
        FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($7_1, $4_1, $4_1 + 128 | 0, $3_1);
        $14_1 = Math_fround($14_1 + $17_1);
        $13_1 = Math_fround($13_1 + $16_1);
        $12_1 = Math_fround($12_1 + $15_1);
        $7_1 = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + $29_1 | 0;
        if (($8_1 | 0) >= (HEAP32[($7_1 + 4 | 0) >> 2] | 0 | 0)) {
         break label$17
        }
        $31_1 = $31_1 + 4 | 0;
        $8_1 = $8_1 + 1 | 0;
        $7_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
        $6_1 = $32_1;
        continue label$19;
       };
      }
      label$20 : {
       $7_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
       if (!((FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($7_1) | 0) & 16384 | 0)) {
        break label$20
       }
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$0 = 0;
       HEAP32[($4_1 + 8 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$0 = 1065353216;
       HEAP32[$4_1 >> 2] = 1065353216;
       HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $7_1 = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) + $29_1 | 0;
       $15_1 = Math_fround(HEAPF32[($7_1 + 28 | 0) >> 2]);
       $16_1 = Math_fround(HEAPF32[($7_1 + 20 | 0) >> 2]);
       $17_1 = Math_fround(HEAPF32[($7_1 + 24 | 0) >> 2]);
       $7_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
       HEAP32[($4_1 + 140 | 0) >> 2] = 0;
       $11_1 = Math_fround(Math_fround(1.0) / Math_fround($30_1 | 0));
       $9_1 = Math_fround($11_1 * $12_1);
       $12_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
       $10_1 = Math_fround($11_1 * $13_1);
       $13_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
       $11_1 = Math_fround($11_1 * $14_1);
       $14_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
       $18_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
       HEAPF32[($4_1 + 136 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $12_1) + Math_fround($10_1 * $13_1)) + Math_fround($11_1 * $14_1)) + $18_1);
       $19_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
       $20_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
       $21_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
       $22_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
       HEAPF32[($4_1 + 132 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $19_1) + Math_fround($10_1 * $20_1)) + Math_fround($11_1 * $21_1)) + $22_1);
       $23_1 = Math_fround(HEAPF32[$1_1 >> 2]);
       $24_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
       $25_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
       $26_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
       HEAPF32[($4_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $23_1) + Math_fround($10_1 * $24_1)) + Math_fround($11_1 * $25_1)) + $26_1);
       HEAP32[($4_1 + 124 | 0) >> 2] = 0;
       $9_1 = Math_fround($9_1 + $16_1);
       $10_1 = Math_fround($10_1 + $17_1);
       $11_1 = Math_fround($11_1 + $15_1);
       HEAPF32[($4_1 + 120 | 0) >> 2] = Math_fround($18_1 + Math_fround(Math_fround(Math_fround($12_1 * $9_1) + Math_fround($13_1 * $10_1)) + Math_fround($14_1 * $11_1)));
       HEAPF32[($4_1 + 116 | 0) >> 2] = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($9_1 * $19_1) + Math_fround($10_1 * $20_1)) + Math_fround($11_1 * $21_1)));
       HEAPF32[($4_1 + 112 | 0) >> 2] = Math_fround($26_1 + Math_fround(Math_fround(Math_fround($9_1 * $23_1) + Math_fround($10_1 * $24_1)) + Math_fround($11_1 * $25_1)));
       FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($7_1, $4_1 + 128 | 0, $4_1 + 112 | 0, $4_1);
      }
      $28_1 = $28_1 + 1 | 0;
      if (($28_1 | 0) < (HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0)) {
       continue label$16
      }
      break label$14;
     };
    }
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 100 | 0) >> 2] | 0]($2_1) | 0 | 0) < (1 | 0)) {
     break label$14
    }
    $5_1 = 0;
    label$21 : while (1) {
     FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 104 | 0) >> 2] | 0]($2_1, $5_1, $4_1, $4_1 + 128 | 0);
     HEAP32[($4_1 + 124 | 0) >> 2] = 0;
     $9_1 = Math_fround(HEAPF32[$4_1 >> 2]);
     $12_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
     $10_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
     $13_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
     HEAPF32[($4_1 + 120 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $12_1) + Math_fround($10_1 * $13_1)) + Math_fround($11_1 * $14_1)) + $15_1);
     $16_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
     $18_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
     $19_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
     HEAPF32[($4_1 + 116 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $16_1) + Math_fround($10_1 * $17_1)) + Math_fround($11_1 * $18_1)) + $19_1);
     $20_1 = Math_fround(HEAPF32[$1_1 >> 2]);
     $21_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
     $22_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
     $23_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
     HEAPF32[($4_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $20_1) + Math_fround($10_1 * $21_1)) + Math_fround($11_1 * $22_1)) + $23_1);
     HEAP32[($4_1 + 108 | 0) >> 2] = 0;
     $9_1 = Math_fround(HEAPF32[($4_1 + 128 | 0) >> 2]);
     $10_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($4_1 + 136 | 0) >> 2]);
     HEAPF32[($4_1 + 104 | 0) >> 2] = Math_fround($15_1 + Math_fround(Math_fround(Math_fround($12_1 * $9_1) + Math_fround($13_1 * $10_1)) + Math_fround($14_1 * $11_1)));
     HEAPF32[($4_1 + 100 | 0) >> 2] = Math_fround($19_1 + Math_fround(Math_fround(Math_fround($16_1 * $9_1) + Math_fround($17_1 * $10_1)) + Math_fround($18_1 * $11_1)));
     HEAPF32[($4_1 + 96 | 0) >> 2] = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($20_1 * $9_1) + Math_fround($21_1 * $10_1)) + Math_fround($22_1 * $11_1)));
     $7_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($7_1, $4_1 + 112 | 0, $4_1 + 96 | 0, $3_1);
     $5_1 = $5_1 + 1 | 0;
     if (($5_1 | 0) < (FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 100 | 0) >> 2] | 0]($2_1) | 0 | 0)) {
      continue label$21
     }
     break label$21;
    };
   }
   label$22 : {
    $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
    if (($5_1 + -21 | 0) >>> 0 > 8 >>> 0) {
     break label$22
    }
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = 0;
    HEAP32[($4_1 + 136 | 0) >> 2] = 1566444395;
    HEAP32[($4_1 + 140 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = 1566444395;
    HEAP32[($4_1 + 128 | 0) >> 2] = 1566444395;
    HEAP32[($4_1 + 132 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = 0;
    HEAP32[($4_1 + 120 | 0) >> 2] = -581039253;
    HEAP32[($4_1 + 124 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -581039253;
    HEAP32[($4_1 + 112 | 0) >> 2] = -581039253;
    HEAP32[($4_1 + 116 | 0) >> 2] = i64toi32_i32$0;
    $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
    i64toi32_i32$2 = $3_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1282 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1 + 20 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $1282;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1287 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1 + 36 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $1287;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    $1291 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1 + 44 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $1291;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1 + 24 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1296 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1 + 52 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $1296;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
    $1300 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1 + 60 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $1300;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1 + 40 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1305 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1 + 68 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $1305;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
    HEAP32[($4_1 + 4 | 0) >> 2] = 22836;
    HEAP32[$4_1 >> 2] = 22812;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1312 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1;
    HEAP32[($4_1 + 12 | 0) >> 2] = $1312;
    HEAP32[($4_1 + 16 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $1315 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1;
    HEAP32[($4_1 + 28 | 0) >> 2] = $1315;
    HEAP32[($4_1 + 32 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $1_1 + 56 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $1320 = i64toi32_i32$0;
    i64toi32_i32$0 = $4_1 + 84 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $1320;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
    $1324 = i64toi32_i32$1;
    i64toi32_i32$1 = $4_1 + 76 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $1324;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($2_1, $4_1, $4_1 + 112 | 0, $4_1 + 128 | 0);
    $212($4_1 | 4 | 0 | 0) | 0;
    $211($4_1 | 0) | 0;
    $5_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   }
   if (($5_1 | 0) != (3 | 0)) {
    break label$2
   }
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 136 | 0) >> 2] = 1566444395;
   HEAP32[($4_1 + 140 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 1566444395;
   HEAP32[($4_1 + 128 | 0) >> 2] = 1566444395;
   HEAP32[($4_1 + 132 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 120 | 0) >> 2] = -581039253;
   HEAP32[($4_1 + 124 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$0 = -581039253;
   HEAP32[($4_1 + 112 | 0) >> 2] = -581039253;
   HEAP32[($4_1 + 116 | 0) >> 2] = i64toi32_i32$0;
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
   i64toi32_i32$2 = $3_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1356 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1 + 20 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $1356;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1361 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1 + 36 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $1361;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
   $1365 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1 + 44 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $1365;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 24 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1370 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1 + 52 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $1370;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   $1374 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1 + 60 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $1374;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 40 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1379 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1 + 68 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $1379;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($4_1 + 4 | 0) >> 2] = 22836;
   HEAP32[$4_1 >> 2] = 22812;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1386 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1;
   HEAP32[($4_1 + 12 | 0) >> 2] = $1386;
   HEAP32[($4_1 + 16 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $1389 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1;
   HEAP32[($4_1 + 28 | 0) >> 2] = $1389;
   HEAP32[($4_1 + 32 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 56 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $1394 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1 + 84 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $1394;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
   $1398 = i64toi32_i32$1;
   i64toi32_i32$1 = $4_1 + 76 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $1398;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $1_1 = HEAP32[($2_1 + 96 | 0) >> 2] | 0;
   $0_1 = $4_1 | 4 | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1, $0_1, $4_1 + 112 | 0, $4_1 + 128 | 0);
   $212($0_1 | 0) | 0;
   $211($4_1 | 0) | 0;
  }
  global$0 = $4_1 + 144 | 0;
 }
 
 function $875($0_1) {
  $0_1 = $0_1 | 0;
  $212($0_1 + 4 | 0 | 0) | 0;
  $211($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $876($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $6_1 = 0, $11_1 = Math_fround(0), $4_1 = 0, $5_1 = 0, $7_1 = 0, $12_1 = Math_fround(0), $3_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $8_1 = 0, $9_1 = 0, $10_1 = 0, $181_1 = 0, $184_1 = 0, $190_1 = 0, $193_1 = 0, $199_1 = 0, $202_1 = 0, $208_1 = 0, $211_1 = 0, $217_1 = 0, $220_1 = 0, $233_1 = 0, $236_1 = 0, $263_1 = 0, $266_1 = 0;
  $1_1 = global$0 - 192 | 0;
  global$0 = $1_1;
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0)) {
    break label$1
   }
   $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 100 | 0) >> 2] | 0]($2_1);
   $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($1_1 + 80 | 0, $2_1);
   label$2 : {
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
    if (!((FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($2_1) | 0) & 8 | 0)) {
     break label$2
    }
    $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (!$2_1) {
     break label$2
    }
    $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($2_1) | 0;
    if (($3_1 | 0) < (1 | 0)) {
     break label$2
    }
    $4_1 = $1_1 + 176 | 0;
    $5_1 = 0;
    label$3 : while (1) {
     label$4 : {
      $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($2_1, $5_1) | 0;
      $6_1 = HEAP32[($2_1 + 780 | 0) >> 2] | 0;
      if (($6_1 | 0) < (1 | 0)) {
       break label$4
      }
      $2_1 = $2_1 + 160 | 0;
      label$5 : while (1) {
       $7_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($7_1, $2_1 + -124 | 0, $2_1 + -92 | 0, Math_fround(HEAPF32[($2_1 + -76 | 0) >> 2]), HEAP32[$2_1 >> 2] | 0, $4_1);
       $2_1 = $2_1 + 192 | 0;
       $6_1 = $6_1 + -1 | 0;
       if ($6_1) {
        continue label$5
       }
       break label$5;
      };
     }
     $5_1 = $5_1 + 1 | 0;
     if (($5_1 | 0) != ($3_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
   if (!((FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($2_1) | 0) & 3 | 0)) {
    break label$1
   }
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = $1_1 + 160 | 0;
   $3_1 = $1_1 + 96 | 0;
   $8_1 = ($1_1 + 80 | 0) + 32 | 0;
   $9_1 = $1_1 + 128 | 0;
   $10_1 = $1_1 + 144 | 0;
   $2_1 = 0;
   $7_1 = 0;
   label$6 : while (1) {
    label$7 : {
     $6_1 = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
     if ((HEAPU8[($6_1 + 204 | 0) >> 0] | 0) & 32 | 0) {
      break label$7
     }
     label$8 : {
      if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0)) {
       break label$8
      }
      $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
      if (!((FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($4_1) | 0) & 1 | 0)) {
       break label$8
      }
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$0 = 0;
      HEAP32[($1_1 + 72 | 0) >> 2] = 1053609165;
      HEAP32[($1_1 + 76 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $1_1;
      i64toi32_i32$0 = 1053609165;
      HEAP32[($1_1 + 64 | 0) >> 2] = 1053609165;
      HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
      label$9 : {
       label$10 : {
        $4_1 = (HEAP32[($6_1 + 220 | 0) >> 2] | 0) + -1 | 0;
        if ($4_1 >>> 0 > 4 >>> 0) {
         break label$10
        }
        label$11 : {
         switch ($4_1 | 0) {
         default:
          i64toi32_i32$2 = ($1_1 + 80 | 0) + 8 | 0;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $181_1 = i64toi32_i32$0;
          i64toi32_i32$0 = ($1_1 + 64 | 0) + 8 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $181_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = $1_1;
          i64toi32_i32$1 = HEAP32[($1_1 + 80 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[($1_1 + 84 | 0) >> 2] | 0;
          $184_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $1_1;
          HEAP32[($1_1 + 64 | 0) >> 2] = $184_1;
          HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
          break label$9;
         case 1:
          i64toi32_i32$2 = $3_1 + 8 | 0;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $190_1 = i64toi32_i32$0;
          i64toi32_i32$0 = ($1_1 + 64 | 0) + 8 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $190_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = $3_1;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $193_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $1_1;
          HEAP32[($1_1 + 64 | 0) >> 2] = $193_1;
          HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
          break label$9;
         case 2:
          i64toi32_i32$2 = $8_1 + 8 | 0;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $199_1 = i64toi32_i32$0;
          i64toi32_i32$0 = ($1_1 + 64 | 0) + 8 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $199_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = $8_1;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $202_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $1_1;
          HEAP32[($1_1 + 64 | 0) >> 2] = $202_1;
          HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
          break label$9;
         case 3:
          i64toi32_i32$2 = $9_1 + 8 | 0;
          i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $208_1 = i64toi32_i32$0;
          i64toi32_i32$0 = ($1_1 + 64 | 0) + 8 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $208_1;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = $9_1;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $211_1 = i64toi32_i32$1;
          i64toi32_i32$1 = $1_1;
          HEAP32[($1_1 + 64 | 0) >> 2] = $211_1;
          HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
          break label$9;
         case 4:
          break label$11;
         };
        }
        i64toi32_i32$2 = $10_1 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $217_1 = i64toi32_i32$0;
        i64toi32_i32$0 = ($1_1 + 64 | 0) + 8 | 0;
        HEAP32[i64toi32_i32$0 >> 2] = $217_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $10_1;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $220_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $1_1;
        HEAP32[($1_1 + 64 | 0) >> 2] = $220_1;
        HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
        break label$9;
       }
       i64toi32_i32$1 = $1_1;
       i64toi32_i32$0 = 0;
       HEAP32[($1_1 + 72 | 0) >> 2] = 1050253722;
       HEAP32[($1_1 + 76 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $1_1;
       i64toi32_i32$0 = 1050253722;
       HEAP32[($1_1 + 64 | 0) >> 2] = 1050253722;
       HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
      }
      label$16 : {
       if (!((HEAPU8[($6_1 + 205 | 0) >> 0] | 0) & 1 | 0)) {
        break label$16
       }
       i64toi32_i32$2 = $6_1 + 316 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $233_1 = i64toi32_i32$0;
       i64toi32_i32$0 = ($1_1 + 64 | 0) + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $233_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 308 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 312 | 0) >> 2] | 0;
       $236_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $1_1;
       HEAP32[($1_1 + 64 | 0) >> 2] = $236_1;
       HEAP32[($1_1 + 68 | 0) >> 2] = i64toi32_i32$0;
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $6_1 + 4 | 0, HEAP32[($6_1 + 192 | 0) >> 2] | 0, $1_1 + 64 | 0);
     }
     $4_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$7
     }
     if (!((FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($4_1) | 0) & 2 | 0)) {
      break label$7
     }
     i64toi32_i32$2 = $5_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $263_1 = i64toi32_i32$0;
     i64toi32_i32$0 = ($1_1 + 32 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $263_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $266_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $1_1;
     HEAP32[($1_1 + 32 | 0) >> 2] = $266_1;
     HEAP32[($1_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = HEAP32[($6_1 + 192 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($4_1, $6_1 + 4 | 0, $1_1 + 64 | 0, $1_1 + 48 | 0);
     $11_1 = Math_fround(HEAPF32[(0 + 2976 | 0) >> 2]);
     HEAPF32[($1_1 + 64 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]) - $11_1);
     HEAPF32[($1_1 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]) - $11_1);
     HEAPF32[($1_1 + 72 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2]) - $11_1);
     HEAPF32[($1_1 + 48 | 0) >> 2] = Math_fround($11_1 + Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]));
     HEAPF32[($1_1 + 52 | 0) >> 2] = Math_fround($11_1 + Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]));
     HEAPF32[($1_1 + 56 | 0) >> 2] = Math_fround($11_1 + Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]));
     label$17 : {
      if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
       break label$17
      }
      if ((HEAP32[($6_1 + 252 | 0) >> 2] | 0 | 0) != (2 | 0)) {
       break label$17
      }
      if ((HEAPU8[($6_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
       break label$17
      }
      $4_1 = HEAP32[($6_1 + 192 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($4_1, $6_1 + 68 | 0, $1_1 + 16 | 0, $1_1);
      $12_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]) - $11_1);
      HEAPF32[($1_1 + 16 | 0) >> 2] = $12_1;
      $13_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]) - $11_1);
      HEAPF32[($1_1 + 20 | 0) >> 2] = $13_1;
      $14_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]) - $11_1);
      HEAPF32[($1_1 + 24 | 0) >> 2] = $14_1;
      $15_1 = Math_fround($11_1 + Math_fround(HEAPF32[$1_1 >> 2]));
      HEAPF32[$1_1 >> 2] = $15_1;
      $16_1 = Math_fround($11_1 + Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]));
      HEAPF32[($1_1 + 4 | 0) >> 2] = $16_1;
      $11_1 = Math_fround($11_1 + Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]));
      HEAPF32[($1_1 + 8 | 0) >> 2] = $11_1;
      label$18 : {
       if ($12_1 < Math_fround(HEAPF32[($1_1 + 64 | 0) >> 2]) ^ 1 | 0) {
        break label$18
       }
       HEAPF32[($1_1 + 64 | 0) >> 2] = $12_1;
      }
      label$19 : {
       if ($13_1 < Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]) ^ 1 | 0) {
        break label$19
       }
       HEAPF32[($1_1 + 68 | 0) >> 2] = $13_1;
      }
      label$20 : {
       if ($14_1 < Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2]) ^ 1 | 0) {
        break label$20
       }
       HEAPF32[($1_1 + 72 | 0) >> 2] = $14_1;
      }
      label$21 : {
       $12_1 = Math_fround(HEAPF32[($1_1 + 28 | 0) >> 2]);
       if ($12_1 < Math_fround(HEAPF32[($1_1 + 76 | 0) >> 2]) ^ 1 | 0) {
        break label$21
       }
       HEAPF32[($1_1 + 76 | 0) >> 2] = $12_1;
      }
      label$22 : {
       if (Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]) < $15_1 ^ 1 | 0) {
        break label$22
       }
       HEAPF32[($1_1 + 48 | 0) >> 2] = $15_1;
      }
      label$23 : {
       if (Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]) < $16_1 ^ 1 | 0) {
        break label$23
       }
       HEAPF32[($1_1 + 52 | 0) >> 2] = $16_1;
      }
      label$24 : {
       if (Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]) < $11_1 ^ 1 | 0) {
        break label$24
       }
       HEAPF32[($1_1 + 56 | 0) >> 2] = $11_1;
      }
      $11_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
      if (Math_fround(HEAPF32[($1_1 + 60 | 0) >> 2]) < $11_1 ^ 1 | 0) {
       break label$17
      }
      HEAPF32[($1_1 + 60 | 0) >> 2] = $11_1;
     }
     $6_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 60 | 0) >> 2] | 0]($6_1, $1_1 + 64 | 0, $1_1 + 48 | 0, $1_1 + 32 | 0);
    }
    $2_1 = $2_1 + 4 | 0;
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) < (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $1_1 + 192 | 0;
 }
 
 function $877($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $8_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $5_1 = 0, $4_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 52 | 0) >> 0] = 1;
  $3_1 = 0;
  HEAP32[($2_1 + 48 | 0) >> 2] = 0;
  HEAP8[($2_1 + 72 | 0) >> 0] = 1;
  i64toi32_i32$1 = $2_1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 68 | 0) >> 2] = 0;
  HEAP8[($2_1 + 92 | 0) >> 0] = 1;
  i64toi32_i32$1 = $2_1 + 60 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 88 | 0) >> 2] = 0;
  i64toi32_i32$1 = $2_1 + 80 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 28 | 0) >> 2] = 0;
  HEAP8[($2_1 + 32 | 0) >> 0] = 1;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 20 | 0) >> 2] = 0;
  HEAP32[($2_1 + 24 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = 0;
   $6_1 = 0;
   label$2 : while (1) {
    $7_1 = HEAP32[((HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0) + 192 | 0) >> 2] | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $7_1;
    label$3 : {
     label$4 : {
      $8_1 = $7_1 + (($7_1 << 15 | 0) ^ -1 | 0) | 0;
      $8_1 = Math_imul(($8_1 >>> 10 | 0) ^ $8_1 | 0, 9);
      $8_1 = ($8_1 >>> 6 | 0) ^ $8_1 | 0;
      $8_1 = $8_1 + (($8_1 << 11 | 0) ^ -1 | 0) | 0;
      $8_1 = (($8_1 >>> 16 | 0) ^ $8_1 | 0) & ($5_1 + -1 | 0) | 0;
      if ($8_1 >>> 0 >= $3_1 >>> 0) {
       break label$4
      }
      $3_1 = HEAP32[((HEAP32[($2_1 + 28 | 0) >> 2] | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0;
      if (($3_1 | 0) == (-1 | 0)) {
       break label$4
      }
      $5_1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
      $8_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
      label$5 : {
       label$6 : while (1) {
        if ((HEAP32[($8_1 + ($3_1 << 3 | 0) | 0) >> 2] | 0 | 0) == ($7_1 | 0)) {
         break label$5
        }
        $3_1 = HEAP32[($5_1 + ($3_1 << 2 | 0) | 0) >> 2] | 0;
        if (($3_1 | 0) != (-1 | 0)) {
         continue label$6
        }
        break label$4;
       };
      }
      if ((HEAP32[($2_1 + 68 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) {
       break label$3
      }
     }
     HEAP32[$2_1 >> 2] = $7_1;
     $878($2_1 + 16 | 0 | 0, $2_1 | 0, $2_1 + 12 | 0 | 0);
     $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 60 | 0) >> 2] | 0]($3_1, $1_1);
     $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    label$7 : {
     $6_1 = $6_1 + 1 | 0;
     if (($6_1 | 0) >= ($4_1 | 0)) {
      break label$7
     }
     $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
     $5_1 = HEAP32[($2_1 + 64 | 0) >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   $8_1 = 0;
   label$8 : while (1) {
    label$9 : {
     label$10 : {
      $7_1 = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
      $5_1 = HEAP32[($7_1 + 252 | 0) >> 2] | 0;
      if (($5_1 | 0) == (64 | 0)) {
       break label$10
      }
      if (($5_1 | 0) != (1 | 0)) {
       break label$9
      }
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($7_1, $1_1);
     $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    $3_1 = $3_1 + 4 | 0;
    $8_1 = $8_1 + 1 | 0;
    if (($8_1 | 0) < ($4_1 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
  label$11 : {
   $3_1 = HEAP32[($2_1 + 88 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$11
   }
   label$12 : {
    if (!(HEAPU8[($2_1 + 92 | 0) >> 0] | 0)) {
     break label$12
    }
    $80($3_1 | 0);
   }
   HEAP32[($2_1 + 88 | 0) >> 2] = 0;
  }
  HEAP32[($2_1 + 88 | 0) >> 2] = 0;
  HEAP8[($2_1 + 92 | 0) >> 0] = 1;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 80 | 0) >> 2] = 0;
  HEAP32[($2_1 + 84 | 0) >> 2] = i64toi32_i32$0;
  label$13 : {
   $3_1 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$13
   }
   label$14 : {
    if (!(HEAPU8[($2_1 + 72 | 0) >> 0] | 0)) {
     break label$14
    }
    $80($3_1 | 0);
   }
   HEAP32[($2_1 + 68 | 0) >> 2] = 0;
  }
  HEAP32[($2_1 + 68 | 0) >> 2] = 0;
  HEAP8[($2_1 + 72 | 0) >> 0] = 1;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 60 | 0) >> 2] = 0;
  HEAP32[($2_1 + 64 | 0) >> 2] = i64toi32_i32$0;
  label$15 : {
   $3_1 = HEAP32[($2_1 + 48 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$15
   }
   label$16 : {
    if (!(HEAPU8[($2_1 + 52 | 0) >> 0] | 0)) {
     break label$16
    }
    $80($3_1 | 0);
   }
   HEAP32[($2_1 + 48 | 0) >> 2] = 0;
  }
  HEAP32[($2_1 + 48 | 0) >> 2] = 0;
  HEAP8[($2_1 + 52 | 0) >> 0] = 1;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 40 | 0) >> 2] = 0;
  HEAP32[($2_1 + 44 | 0) >> 2] = i64toi32_i32$0;
  label$17 : {
   $3_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$17
   }
   label$18 : {
    if (!(HEAPU8[($2_1 + 32 | 0) >> 0] | 0)) {
     break label$18
    }
    $80($3_1 | 0);
   }
   HEAP32[($2_1 + 28 | 0) >> 2] = 0;
  }
  global$0 = $2_1 + 96 | 0;
 }
 
 function $878($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $9_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $10_1 = 0, $8_1 = 0, i64toi32_i32$2 = 0, $170_1 = 0, $202_1 = 0, $247_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[$1_1 >> 2] | 0;
    $4_1 = $3_1 + (($3_1 << 15 | 0) ^ -1 | 0) | 0;
    $4_1 = Math_imul(($4_1 >>> 10 | 0) ^ $4_1 | 0, 9);
    $4_1 = ($4_1 >>> 6 | 0) ^ $4_1 | 0;
    $4_1 = $4_1 + (($4_1 << 11 | 0) ^ -1 | 0) | 0;
    $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    $6_1 = (($4_1 >>> 16 | 0) ^ $4_1 | 0) & ($5_1 + -1 | 0) | 0;
    if ($6_1 >>> 0 >= (HEAP32[($0_1 + 4 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    $4_1 = HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0;
    if (($4_1 | 0) == (-1 | 0)) {
     break label$2
    }
    $7_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    label$3 : while (1) {
     if ((HEAP32[($7_1 + ($4_1 << 3 | 0) | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
      break label$1
     }
     $4_1 = HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($4_1 << 2 | 0) | 0) >> 2] | 0;
     if (($4_1 | 0) != (-1 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   $9_1 = $8_1;
   label$4 : {
    if (($9_1 | 0) != ($5_1 | 0)) {
     break label$4
    }
    $9_1 = $5_1;
    $10_1 = $9_1 ? $9_1 << 1 | 0 : 1;
    if (($9_1 | 0) >= ($10_1 | 0)) {
     break label$4
    }
    label$5 : {
     label$6 : {
      if ($10_1) {
       break label$6
      }
      $7_1 = 0;
      $9_1 = $5_1;
      break label$5;
     }
     $7_1 = $79($10_1 << 2 | 0 | 0, 16 | 0) | 0;
     $9_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    }
    label$7 : {
     if (($9_1 | 0) < (1 | 0)) {
      break label$7
     }
     $4_1 = 0;
     $3_1 = $9_1;
     label$8 : while (1) {
      HEAP32[($7_1 + $4_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + $4_1 | 0) >> 2] | 0;
      $4_1 = $4_1 + 4 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       continue label$8
      }
      break label$8;
     };
    }
    label$9 : {
     $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$9
     }
     label$10 : {
      if (!(HEAPU8[($0_1 + 56 | 0) >> 0] | 0)) {
       break label$10
      }
      $80($4_1 | 0);
      $9_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
     }
     HEAP32[($0_1 + 52 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 52 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 48 | 0) >> 2] = $10_1;
    HEAP8[($0_1 + 56 | 0) >> 0] = 1;
   }
   HEAP32[($0_1 + 44 | 0) >> 2] = $9_1 + 1 | 0;
   HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + ($9_1 << 2 | 0) | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
   label$11 : {
    $3_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
    if (($3_1 | 0) != (HEAP32[($0_1 + 68 | 0) >> 2] | 0 | 0)) {
     break label$11
    }
    $9_1 = $3_1 ? $3_1 << 1 | 0 : 1;
    if (($3_1 | 0) >= ($9_1 | 0)) {
     break label$11
    }
    label$12 : {
     label$13 : {
      if ($9_1) {
       break label$13
      }
      $7_1 = 0;
      break label$12;
     }
     $7_1 = $79($9_1 << 3 | 0 | 0, 16 | 0) | 0;
     $3_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
    }
    label$14 : {
     if (($3_1 | 0) < (1 | 0)) {
      break label$14
     }
     $4_1 = 0;
     label$15 : while (1) {
      i64toi32_i32$2 = (HEAP32[($0_1 + 72 | 0) >> 2] | 0) + $4_1 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $170_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $7_1 + $4_1 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $170_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $4_1 = $4_1 + 8 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       continue label$15
      }
      break label$15;
     };
    }
    label$16 : {
     $4_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
     if (!$4_1) {
      break label$16
     }
     label$17 : {
      if (!(HEAPU8[($0_1 + 76 | 0) >> 0] | 0)) {
       break label$17
      }
      $80($4_1 | 0);
     }
     HEAP32[($0_1 + 72 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 72 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 68 | 0) >> 2] = $9_1;
    HEAP8[($0_1 + 76 | 0) >> 0] = 1;
    $3_1 = HEAP32[($0_1 + 64 | 0) >> 2] | 0;
   }
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   $202_1 = i64toi32_i32$1;
   i64toi32_i32$1 = (HEAP32[($0_1 + 72 | 0) >> 2] | 0) + ($3_1 << 3 | 0) | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $202_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0_1 + 64 | 0) >> 2] = (HEAP32[($0_1 + 64 | 0) >> 2] | 0) + 1 | 0;
   label$18 : {
    if (($5_1 | 0) >= (HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0)) {
     break label$18
    }
    $879($0_1 | 0, $1_1 | 0);
    $4_1 = HEAP32[$1_1 >> 2] | 0;
    $4_1 = $4_1 + (($4_1 << 15 | 0) ^ -1 | 0) | 0;
    $4_1 = Math_imul(($4_1 >>> 10 | 0) ^ $4_1 | 0, 9);
    $4_1 = ($4_1 >>> 6 | 0) ^ $4_1 | 0;
    $4_1 = $4_1 + (($4_1 << 11 | 0) ^ -1 | 0) | 0;
    $6_1 = (($4_1 >>> 16 | 0) ^ $4_1 | 0) & ((HEAP32[($0_1 + 48 | 0) >> 2] | 0) + -1 | 0) | 0;
   }
   $247_1 = (HEAP32[($0_1 + 32 | 0) >> 2] | 0) + ($8_1 << 2 | 0) | 0;
   $0_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0;
   HEAP32[$247_1 >> 2] = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $8_1;
   return;
  }
  HEAP32[((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + ($4_1 << 2 | 0) | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
 }
 
 function $879($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $7_1 = 0, $5_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0, $2_1 = 0, $10_1 = 0, $65_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   if (($2_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) < ($3_1 | 0)) {
      break label$3
     }
     $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     break label$2;
    }
    label$4 : {
     label$5 : {
      if ($3_1) {
       break label$5
      }
      $4_1 = 0;
      $5_1 = $2_1;
      break label$4;
     }
     $4_1 = $79($3_1 << 2 | 0 | 0, 16 | 0) | 0;
     $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    }
    $6_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    label$6 : {
     label$7 : {
      label$8 : {
       if (($5_1 | 0) < (1 | 0)) {
        break label$8
       }
       $7_1 = $4_1;
       $8_1 = $6_1;
       label$9 : while (1) {
        HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2] | 0;
        $7_1 = $7_1 + 4 | 0;
        $8_1 = $8_1 + 4 | 0;
        $5_1 = $5_1 + -1 | 0;
        if ($5_1) {
         continue label$9
        }
        break label$7;
       };
      }
      if ($6_1) {
       break label$7
      }
      HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
      HEAP8[($0_1 + 16 | 0) >> 0] = 1;
      break label$6;
     }
     label$10 : {
      if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
       break label$10
      }
      $80($6_1 | 0);
     }
     HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
     HEAP8[($0_1 + 16 | 0) >> 0] = 1;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
   }
   $7_1 = $2_1 << 2 | 0;
   $65_1 = $4_1 + $7_1 | 0;
   $4_1 = $3_1 << 2 | 0;
   $17($65_1 | 0, 0 | 0, $4_1 - $7_1 | 0 | 0) | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
   label$11 : {
    $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    if (($6_1 | 0) >= ($3_1 | 0)) {
     break label$11
    }
    label$12 : {
     label$13 : {
      if ((HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0) < ($3_1 | 0)) {
       break label$13
      }
      $9_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
      break label$12;
     }
     label$14 : {
      label$15 : {
       if ($3_1) {
        break label$15
       }
       $9_1 = 0;
       $5_1 = $6_1;
       break label$14;
      }
      $9_1 = $79($4_1 | 0, 16 | 0) | 0;
      $5_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     }
     $10_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     label$16 : {
      label$17 : {
       if (($5_1 | 0) < (1 | 0)) {
        break label$17
       }
       $7_1 = $9_1;
       $8_1 = $10_1;
       label$18 : while (1) {
        HEAP32[$7_1 >> 2] = HEAP32[$8_1 >> 2] | 0;
        $7_1 = $7_1 + 4 | 0;
        $8_1 = $8_1 + 4 | 0;
        $5_1 = $5_1 + -1 | 0;
        if ($5_1) {
         continue label$18
        }
        break label$16;
       };
      }
      if ($10_1) {
       break label$16
      }
      HEAP32[($0_1 + 32 | 0) >> 2] = $9_1;
      HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
      HEAP8[($0_1 + 36 | 0) >> 0] = 1;
      break label$12;
     }
     label$19 : {
      if (!(HEAPU8[($0_1 + 36 | 0) >> 0] | 0)) {
       break label$19
      }
      $80($10_1 | 0);
     }
     HEAP32[($0_1 + 32 | 0) >> 2] = $9_1;
     HEAP8[($0_1 + 36 | 0) >> 0] = 1;
     HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
    }
    $7_1 = $6_1 << 2 | 0;
    $17($9_1 + $7_1 | 0 | 0, 0 | 0, $4_1 - $7_1 | 0 | 0) | 0;
   }
   HEAP32[($0_1 + 24 | 0) >> 2] = $3_1;
   label$20 : {
    if (($3_1 | 0) < (1 | 0)) {
     break label$20
    }
    $17(HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, 255 | 0, $4_1 | 0) | 0;
    $17(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, 255 | 0, $4_1 | 0) | 0;
   }
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $7_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   $8_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $5_1 = 0;
   label$21 : while (1) {
    $3_1 = HEAP32[$8_1 >> 2] | 0;
    $3_1 = $3_1 + (($3_1 << 15 | 0) ^ -1 | 0) | 0;
    $3_1 = Math_imul(($3_1 >>> 10 | 0) ^ $3_1 | 0, 9);
    $3_1 = ($3_1 >>> 6 | 0) ^ $3_1 | 0;
    $3_1 = $3_1 + (($3_1 << 11 | 0) ^ -1 | 0) | 0;
    $3_1 = $4_1 + (((($3_1 >>> 16 | 0) ^ $3_1 | 0) & ((HEAP32[($0_1 + 48 | 0) >> 2] | 0) + -1 | 0) | 0) << 2 | 0) | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $5_1;
    $8_1 = $8_1 + 8 | 0;
    $7_1 = $7_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($2_1 | 0) != ($5_1 | 0)) {
     continue label$21
    }
    break label$21;
   };
  }
 }
 
 function $880($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($1_1);
  $877($0_1 | 0, $1_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($1_1);
 }
 
 function $881($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
 }
 
 function $882($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $883($0_1) {
  $0_1 = $0_1 | 0;
  $211($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $884($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0);
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $3_1;
  $6_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($0_1 + 76 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($0_1 + 92 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $17_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  HEAP32[($5_1 + 28 | 0) >> 2] = 0;
  HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $12_1) + Math_fround($17_1 * $13_1)) + Math_fround($15_1 * $11_1));
  HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $9_1) + Math_fround($17_1 * $10_1)) + Math_fround($15_1 * $8_1));
  HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $16_1) + Math_fround($7_1 * $17_1)) + Math_fround($6_1 * $15_1));
  HEAPF32[($5_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $5_1 + 40 | 0;
  $0_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  $15_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1, $5_1 + 8 | 0, 1));
  global$0 = $5_1 + 48 | 0;
  return Math_fround($15_1);
 }
 
 function $885($0_1) {
  $0_1 = $0_1 | 0;
  $211($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $886($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0);
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $3_1;
  $6_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($0_1 + 76 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($0_1 + 92 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($0_1 + 56 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $17_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  HEAP32[($5_1 + 28 | 0) >> 2] = 0;
  HEAPF32[($5_1 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $12_1) + Math_fround($17_1 * $13_1)) + Math_fround($15_1 * $11_1));
  HEAPF32[($5_1 + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $9_1) + Math_fround($17_1 * $10_1)) + Math_fround($15_1 * $8_1));
  HEAPF32[($5_1 + 16 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $16_1) + Math_fround($7_1 * $17_1)) + Math_fround($6_1 * $15_1));
  HEAPF32[($5_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $5_1 + 40 | 0;
  $0_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  $15_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($0_1, $5_1 + 8 | 0, 1));
  global$0 = $5_1 + 48 | 0;
  return Math_fround($15_1);
 }
 
 function $887($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $888($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $24_1 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $3_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), i64toi32_i32$0 = 0, $4_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $23_1 = Math_fround(0);
  $2_1 = global$0 - 128 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
  $1_1 = (HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + Math_imul($3_1, 80) | 0;
  $4_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
  $5_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $17_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $23_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $24_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $25_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $26_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $27_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $28_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  HEAP32[($2_1 + 124 | 0) >> 2] = 0;
  HEAP32[($2_1 + 108 | 0) >> 2] = 0;
  HEAP32[(($2_1 + 64 | 0) + 28 | 0) >> 2] = 0;
  HEAPF32[(($2_1 + 64 | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $28_1) + Math_fround($15_1 * $22_1)) + Math_fround($14_1 * $21_1));
  HEAPF32[(($2_1 + 64 | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $28_1) + Math_fround($12_1 * $22_1)) + Math_fround($11_1 * $21_1));
  HEAPF32[(($2_1 + 64 | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $27_1) + Math_fround($15_1 * $20_1)) + Math_fround($14_1 * $19_1));
  HEAPF32[(($2_1 + 64 | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $27_1) + Math_fround($12_1 * $20_1)) + Math_fround($11_1 * $19_1));
  HEAPF32[(($2_1 + 64 | 0) + 56 | 0) >> 2] = Math_fround($18_1 + Math_fround(Math_fround(Math_fround($28_1 * $10_1) + Math_fround($22_1 * $9_1)) + Math_fround($21_1 * $8_1)));
  HEAPF32[(($2_1 + 64 | 0) + 52 | 0) >> 2] = Math_fround($17_1 + Math_fround(Math_fround(Math_fround($27_1 * $10_1) + Math_fround($20_1 * $9_1)) + Math_fround($19_1 * $8_1)));
  HEAP32[($2_1 + 76 | 0) >> 2] = 0;
  HEAPF32[($2_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $16_1) + Math_fround($26_1 * $15_1)) + Math_fround($24_1 * $14_1));
  HEAPF32[($2_1 + 68 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $13_1) + Math_fround($26_1 * $12_1)) + Math_fround($24_1 * $11_1));
  HEAPF32[($2_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround($6_1 * $25_1) + Math_fround($7_1 * $26_1)) + Math_fround($5_1 * $24_1));
  HEAPF32[($2_1 + 112 | 0) >> 2] = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($25_1 * $10_1) + Math_fround($26_1 * $9_1)) + Math_fround($24_1 * $8_1)));
  HEAPF32[($2_1 + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround($6_1 * $28_1) + Math_fround($7_1 * $22_1)) + Math_fround($5_1 * $21_1));
  HEAPF32[($2_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround($6_1 * $27_1) + Math_fround($7_1 * $20_1)) + Math_fround($5_1 * $19_1));
  HEAP32[($2_1 + 60 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 56 | 0) >> 2] = -1;
  HEAP32[($2_1 + 44 | 0) >> 2] = $4_1;
  HEAP32[($2_1 + 40 | 0) >> 2] = 0;
  HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 52 | 0) >> 2] = $2_1 + 64 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 1065353216;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 24 | 0) >> 2] = -1;
  HEAP32[($2_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1;
  HEAP32[($2_1 + 16 | 0) >> 2] = 0;
  HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 36 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = 21552;
  $1_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  HEAP32[($2_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
  $867(HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0, $2_1 + 40 | 0 | 0, $2_1 + 8 | 0 | 0);
  global$0 = $2_1 + 128 | 0;
 }
 
 function $889($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $890($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $891($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = -1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 + 8 | 0;
  }
  $4_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($4_1, $1_1, $2_1));
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return Math_fround($5_1);
 }
 
 function $892($0_1) {
  $0_1 = $0_1 | 0;
  $211($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $893($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $25_1 = 0, $30_1 = 0, $33_1 = 0, $36_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $5_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $4_1;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
   if (Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) >= $3_1 ^ 1 | 0) {
    break label$1
   }
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $25_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $6_1 + 40 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $25_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $30_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $6_1 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $30_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $33_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $6_1;
   HEAP32[($6_1 + 32 | 0) >> 2] = $33_1;
   HEAP32[($6_1 + 36 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $36_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 16 | 0) >> 2] = $36_1;
   HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   HEAPF32[($6_1 + 48 | 0) >> 2] = $3_1;
   HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 216 | 0) >> 2] | 0;
   HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 56 | 0;
   $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($4_1, $6_1 + 8 | 0, 1));
  }
  global$0 = $6_1 + 64 | 0;
  return Math_fround($3_1);
 }
 
 function $894($0_1) {
  $0_1 = $0_1 | 0;
  $211($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $895($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $25_1 = 0, $30_1 = 0, $33_1 = 0, $36_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = $5_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = $4_1;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
   if (Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) >= $3_1 ^ 1 | 0) {
    break label$1
   }
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $25_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $6_1 + 40 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $25_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $30_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $6_1 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $30_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $33_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $6_1;
   HEAP32[($6_1 + 32 | 0) >> 2] = $33_1;
   HEAP32[($6_1 + 36 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $36_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $6_1;
   HEAP32[($6_1 + 16 | 0) >> 2] = $36_1;
   HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   HEAPF32[($6_1 + 48 | 0) >> 2] = $3_1;
   HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 216 | 0) >> 2] | 0;
   HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 56 | 0;
   $3_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($4_1, $6_1 + 8 | 0, 1));
  }
  global$0 = $6_1 + 64 | 0;
  return Math_fround($3_1);
 }
 
 function $896($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $897($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $3_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $4_1 = 0, $191_1 = Math_fround(0), $197_1 = Math_fround(0);
  $2_1 = global$0 - 112 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
  $1_1 = (HEAP32[((HEAP32[($0_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + Math_imul($3_1, 80) | 0;
  $4_1 = HEAP32[($1_1 + 64 | 0) >> 2] | 0;
  $5_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAP32[($2_1 + 108 | 0) >> 2] = 0;
  HEAP32[($2_1 + 92 | 0) >> 2] = 0;
  HEAP32[(($2_1 + 48 | 0) + 28 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  $17_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $18_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $19_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  HEAPF32[(($2_1 + 48 | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $17_1) + Math_fround($15_1 * $18_1)) + Math_fround($14_1 * $19_1));
  HEAPF32[(($2_1 + 48 | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $17_1) + Math_fround($12_1 * $18_1)) + Math_fround($11_1 * $19_1));
  $20_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  HEAPF32[(($2_1 + 48 | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($16_1 * $20_1) + Math_fround($15_1 * $21_1)) + Math_fround($14_1 * $22_1));
  HEAPF32[(($2_1 + 48 | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $20_1) + Math_fround($12_1 * $21_1)) + Math_fround($11_1 * $22_1));
  HEAPF32[(($2_1 + 48 | 0) + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $17_1) + Math_fround($9_1 * $18_1)) + Math_fround($8_1 * $19_1)) + Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2]));
  HEAPF32[(($2_1 + 48 | 0) + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $20_1) + Math_fround($9_1 * $21_1)) + Math_fround($8_1 * $22_1)) + Math_fround(HEAPF32[($1_1 + 52 | 0) >> 2]));
  HEAP32[($2_1 + 60 | 0) >> 2] = 0;
  $23_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $191_1 = Math_fround($16_1 * $23_1);
  $16_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $197_1 = Math_fround($191_1 + Math_fround($15_1 * $16_1));
  $15_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAPF32[($2_1 + 56 | 0) >> 2] = Math_fround($197_1 + Math_fround($14_1 * $15_1));
  HEAPF32[($2_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $23_1) + Math_fround($12_1 * $16_1)) + Math_fround($11_1 * $15_1));
  HEAPF32[($2_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround($6_1 * $23_1) + Math_fround($7_1 * $16_1)) + Math_fround($5_1 * $15_1));
  HEAPF32[($2_1 + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $23_1) + Math_fround($9_1 * $16_1)) + Math_fround($8_1 * $15_1)) + Math_fround(HEAPF32[($1_1 + 48 | 0) >> 2]));
  HEAPF32[($2_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround($6_1 * $17_1) + Math_fround($7_1 * $18_1)) + Math_fround($5_1 * $19_1));
  HEAPF32[($2_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround($6_1 * $20_1) + Math_fround($7_1 * $21_1)) + Math_fround($5_1 * $22_1));
  HEAP32[($2_1 + 28 | 0) >> 2] = 1065353216;
  HEAP32[($2_1 + 32 | 0) >> 2] = 1;
  HEAP32[($2_1 + 36 | 0) >> 2] = -1;
  HEAP32[($2_1 + 44 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 24 | 0) >> 2] = 22368;
  $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
  HEAP32[($2_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
  HEAP32[($2_1 + 16 | 0) >> 2] = -1;
  HEAP32[($2_1 + 4 | 0) >> 2] = $4_1;
  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $2_1 + 48 | 0;
  $870(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0, $2_1 | 0, $2_1 + 24 | 0 | 0, Math_fround(Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2])));
  global$0 = $2_1 + 112 | 0;
 }
 
 function $898($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $899($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $900($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = Math_fround(0);
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = -1;
  HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  label$1 : {
   if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[($1_1 + 4 | 0) >> 2] = $3_1 + 8 | 0;
  }
  $4_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
  $5_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($4_1, $1_1, $2_1));
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return Math_fround($5_1);
 }
 
 function $901($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $902($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 216 | 0) >> 2] | 0;
   if (Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) == Math_fround(0.0)) {
    break label$1
   }
   $3_1 = 1;
   $1_1 = HEAP32[$1_1 >> 2] | 0;
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($4_1, HEAP32[($1_1 + 188 | 0) >> 2] | 0) | 0)) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 216 | 0) >> 2] | 0;
   $5_1 = HEAP32[($1_1 + 192 | 0) >> 2] | 0;
   HEAP32[($2_1 + 24 | 0) >> 2] = -1;
   HEAP32[($2_1 + 28 | 0) >> 2] = -1;
   HEAP32[($2_1 + 20 | 0) >> 2] = $1_1 + 4 | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   $867($0_1 + 68 | 0 | 0, $0_1 + 132 | 0 | 0, $2_1 + 8 | 0 | 0, $4_1 | 0);
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $903($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $904($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 184 | 0) >> 2] | 0;
   if (Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) == Math_fround(0.0)) {
    break label$1
   }
   $3_1 = 1;
   $1_1 = HEAP32[$1_1 >> 2] | 0;
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($4_1, HEAP32[($1_1 + 188 | 0) >> 2] | 0) | 0)) {
    break label$1
   }
   $5_1 = Math_fround(HEAPF32[($0_1 + 188 | 0) >> 2]);
   $4_1 = HEAP32[($0_1 + 184 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 192 | 0) >> 2] | 0;
   $7_1 = HEAP32[($1_1 + 192 | 0) >> 2] | 0;
   HEAP32[($2_1 + 24 | 0) >> 2] = -1;
   HEAP32[($2_1 + 28 | 0) >> 2] = -1;
   HEAP32[($2_1 + 20 | 0) >> 2] = $1_1 + 4 | 0;
   HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + 12 | 0) >> 2] = $7_1;
   HEAP32[($2_1 + 8 | 0) >> 2] = 0;
   $870($6_1 | 0, $0_1 + 36 | 0 | 0, $0_1 + 100 | 0 | 0, $2_1 + 8 | 0 | 0, $4_1 | 0, Math_fround($5_1));
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $905($0_1) {
  $0_1 = $0_1 | 0;
  $212($0_1 + 4 | 0 | 0) | 0;
  $211($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $906($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $7_1 = Math_fround(0), $5_1 = Math_fround(0), $9_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $18_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $6_1 = Math_fround(0), $8_1 = Math_fround(0), $10_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $25_1 = 0, $17_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), i64toi32_i32$0 = 0, $19_1 = Math_fround(0), $95_1 = Math_fround(0), $102_1 = Math_fround(0), $109_1 = Math_fround(0), $177_1 = Math_fround(0), $184_1 = Math_fround(0), $285_1 = Math_fround(0), $288_1 = Math_fround(0);
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 92 | 0) >> 2] = 0;
  $5_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $6_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
  $7_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $8_1 = Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $10_1 = Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2]);
  $12_1 = Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $6_1) + Math_fround($7_1 * $8_1)) + Math_fround($9_1 * $10_1)) + $11_1);
  HEAPF32[($4_1 + 88 | 0) >> 2] = $12_1;
  $13_1 = Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2]);
  $14_1 = Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2]);
  $15_1 = Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]);
  $16_1 = Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]);
  $17_1 = Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $13_1) + Math_fround($7_1 * $14_1)) + Math_fround($9_1 * $15_1)) + $16_1);
  HEAPF32[($4_1 + 84 | 0) >> 2] = $17_1;
  $18_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
  $95_1 = Math_fround($5_1 * $18_1);
  $5_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
  $102_1 = Math_fround($95_1 + Math_fround($7_1 * $5_1));
  $7_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
  $109_1 = Math_fround($102_1 + Math_fround($9_1 * $7_1));
  $9_1 = Math_fround(HEAPF32[($0_1 + 76 | 0) >> 2]);
  $19_1 = Math_fround($109_1 + $9_1);
  HEAPF32[($4_1 + 80 | 0) >> 2] = $19_1;
  HEAP32[($4_1 + 76 | 0) >> 2] = 0;
  HEAP32[($4_1 + 60 | 0) >> 2] = 0;
  $20_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  $22_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $23_1 = Math_fround($9_1 + Math_fround(Math_fround(Math_fround($18_1 * $20_1) + Math_fround($5_1 * $21_1)) + Math_fround($7_1 * $22_1)));
  HEAPF32[($4_1 + 64 | 0) >> 2] = $23_1;
  $24_1 = Math_fround($16_1 + Math_fround(Math_fround(Math_fround($13_1 * $20_1) + Math_fround($14_1 * $21_1)) + Math_fround($15_1 * $22_1)));
  HEAPF32[($4_1 + 68 | 0) >> 2] = $24_1;
  $21_1 = Math_fround($11_1 + Math_fround(Math_fround(Math_fround($6_1 * $20_1) + Math_fround($8_1 * $21_1)) + Math_fround($10_1 * $22_1)));
  HEAPF32[($4_1 + 72 | 0) >> 2] = $21_1;
  $20_1 = Math_fround(HEAPF32[($1_1 + 32 | 0) >> 2]);
  $177_1 = Math_fround($18_1 * $20_1);
  $18_1 = Math_fround(HEAPF32[($1_1 + 36 | 0) >> 2]);
  $184_1 = Math_fround($177_1 + Math_fround($5_1 * $18_1));
  $5_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  $7_1 = Math_fround($9_1 + Math_fround($184_1 + Math_fround($7_1 * $5_1)));
  HEAPF32[($4_1 + 48 | 0) >> 2] = $7_1;
  $9_1 = Math_fround($16_1 + Math_fround(Math_fround(Math_fround($13_1 * $20_1) + Math_fround($14_1 * $18_1)) + Math_fround($15_1 * $5_1)));
  HEAPF32[($4_1 + 52 | 0) >> 2] = $9_1;
  $5_1 = Math_fround($11_1 + Math_fround(Math_fround(Math_fround($6_1 * $20_1) + Math_fround($8_1 * $18_1)) + Math_fround($10_1 * $5_1)));
  HEAPF32[($4_1 + 56 | 0) >> 2] = $5_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = 0;
  $6_1 = Math_fround(Math_fround(Math_fround($12_1 + $21_1) + $5_1) * Math_fround(.3333333432674408));
  HEAPF32[($4_1 + 40 | 0) >> 2] = $6_1;
  $8_1 = Math_fround(Math_fround(Math_fround($17_1 + $24_1) + $9_1) * Math_fround(.3333333432674408));
  HEAPF32[($4_1 + 36 | 0) >> 2] = $8_1;
  $10_1 = Math_fround(Math_fround(Math_fround($19_1 + $23_1) + $7_1) * Math_fround(.3333333432674408));
  HEAPF32[($4_1 + 32 | 0) >> 2] = $10_1;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!((FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($1_1) | 0) & 16384 | 0)) {
    break label$1
   }
   $11_1 = Math_fround(HEAPF32[($4_1 + 80 | 0) >> 2]);
   i64toi32_i32$0 = 0;
   HEAP32[($4_1 + 24 | 0) >> 2] = 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 1065353216;
   HEAP32[($4_1 + 16 | 0) >> 2] = 1065353216;
   HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
   $13_1 = Math_fround($23_1 - $11_1);
   $9_1 = Math_fround($9_1 - $17_1);
   $14_1 = Math_fround($24_1 - $17_1);
   $11_1 = Math_fround($7_1 - $11_1);
   $7_1 = Math_fround(Math_fround($13_1 * $9_1) - Math_fround($14_1 * $11_1));
   $285_1 = $7_1;
   $288_1 = Math_fround($7_1 * $7_1);
   $7_1 = Math_fround($5_1 - $12_1);
   $12_1 = Math_fround($21_1 - $12_1);
   $5_1 = Math_fround(Math_fround($14_1 * $7_1) - Math_fround($12_1 * $9_1));
   $7_1 = Math_fround(Math_fround($12_1 * $11_1) - Math_fround($13_1 * $7_1));
   $9_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($288_1 + Math_fround(Math_fround($5_1 * $5_1) + Math_fround($7_1 * $7_1))))));
   HEAPF32[($4_1 + 8 | 0) >> 2] = Math_fround(Math_fround($285_1 * $9_1) + $6_1);
   HEAPF32[($4_1 + 4 | 0) >> 2] = Math_fround($8_1 + Math_fround($7_1 * $9_1));
   HEAPF32[$4_1 >> 2] = Math_fround($10_1 + Math_fround($5_1 * $9_1));
   FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($1_1, $4_1 + 32 | 0, $4_1, $4_1 + 16 | 0);
  }
  $25_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $1_1 = $0_1 + 12 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$25_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($25_1, $4_1 + 80 | 0, $4_1 + 64 | 0, $1_1);
  $25_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$25_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($25_1, $4_1 + 64 | 0, $4_1 + 48 | 0, $1_1);
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1, $4_1 + 48 | 0, $4_1 + 80 | 0, $1_1);
  global$0 = $4_1 + 96 | 0;
 }
 
 function $907($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $908($0_1) {
  $0_1 = $0_1 | 0;
  $212($0_1 | 0) | 0;
  $0_1 = $0_1 + -4 | 0;
  $211($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $909($0_1) {
  $0_1 = $0_1 | 0;
  $212($0_1 | 0) | 0;
  $0_1 = $0_1 + -4 | 0;
  $211($0_1 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $910($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $0_1 + -4 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $911($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP8[($0_1 + 16 | 0) >> 0] = 1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $912($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP8[($0_1 + 16 | 0) >> 0] = 1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $913($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $31_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($2_1 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) >= ($1_1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($1_1) {
       break label$4
      }
      $3_1 = 0;
      $4_1 = $2_1;
      break label$3;
     }
     $3_1 = $79($1_1 << 3 | 0 | 0, 16 | 0) | 0;
     $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    }
    label$5 : {
     if (($4_1 | 0) < (1 | 0)) {
      break label$5
     }
     $5_1 = 0;
     label$6 : while (1) {
      i64toi32_i32$2 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $5_1 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $31_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1 + $5_1 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $31_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $5_1 = $5_1 + 8 | 0;
      $4_1 = $4_1 + -1 | 0;
      if ($4_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$7
     }
     label$8 : {
      if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
       break label$8
      }
      $80($5_1 | 0);
     }
     HEAP32[($0_1 + 12 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
    HEAP8[($0_1 + 16 | 0) >> 0] = 1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
   }
   $5_1 = $2_1 << 3 | 0;
   $4_1 = $1_1 - $2_1 | 0;
   label$9 : while (1) {
    i64toi32_i32$0 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $5_1 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $5_1 = $5_1 + 8 | 0;
    $4_1 = $4_1 + -1 | 0;
    if ($4_1) {
     continue label$9
    }
    break label$9;
   };
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  label$10 : {
   if (($1_1 | 0) < (1 | 0)) {
    break label$10
   }
   $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $4_1 = 0;
   label$11 : while (1) {
    HEAP32[$5_1 >> 2] = $4_1;
    HEAP32[($5_1 + 4 | 0) >> 2] = 1;
    $5_1 = $5_1 + 8 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($1_1 | 0) != ($4_1 | 0)) {
     continue label$11
    }
    break label$11;
   };
  }
 }
 
 function $914($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $2_1 = 0, $3_1 = 0, $7_1 = 0, $1_1 = 0, $4_1 = 0, $6_1 = 0, $8_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($3_1 | 0) <= (0 | 0)) {
    break label$1
   }
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   label$2 : while (1) {
    $5_1 = $2_1;
    label$3 : {
     $6_1 = $4_1 + ($5_1 << 3 | 0) | 0;
     $7_1 = HEAP32[$6_1 >> 2] | 0;
     if (($7_1 | 0) == ($5_1 | 0)) {
      break label$3
     }
     $8_1 = $6_1;
     label$4 : while (1) {
      $5_1 = $4_1 + ($7_1 << 3 | 0) | 0;
      HEAP32[$8_1 >> 2] = HEAP32[$5_1 >> 2] | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $8_1 = $4_1 + ($5_1 << 3 | 0) | 0;
      $7_1 = HEAP32[$8_1 >> 2] | 0;
      if (($5_1 | 0) != ($7_1 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    HEAP32[$6_1 >> 2] = $5_1;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
   if (($3_1 | 0) < (2 | 0)) {
    break label$1
   }
   $915($0_1 | 0, $1_1 + 8 | 0 | 0, 0 | 0, $3_1 + -1 | 0 | 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $915($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $10_1 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $12_1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $6_1 = 0, $11_1 = 0, $13_1 = 0, $13$hi = 0, $69_1 = 0;
  label$1 : while (1) {
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $5_1 = $2_1;
   $6_1 = HEAP32[($4_1 + ((($2_1 + $3_1 | 0 | 0) / (2 | 0) | 0) << 3 | 0) | 0) >> 2] | 0;
   $7_1 = $2_1;
   $8_1 = $3_1;
   label$2 : while (1) {
    $9_1 = ($4_1 + ($7_1 << 3 | 0) | 0) + -8 | 0;
    label$3 : while (1) {
     $7_1 = $7_1 + 1 | 0;
     $9_1 = $9_1 + 8 | 0;
     if ((HEAP32[$9_1 >> 2] | 0 | 0) < ($6_1 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $2_1 = $7_1 + -1 | 0;
    $10_1 = ($8_1 << 3 | 0) + 8 | 0;
    label$4 : while (1) {
     $8_1 = $8_1 + -1 | 0;
     $11_1 = $4_1 + $10_1 | 0;
     $12_1 = $10_1 + -8 | 0;
     $10_1 = $12_1;
     if ((HEAP32[($11_1 + -8 | 0) >> 2] | 0 | 0) > ($6_1 | 0)) {
      continue label$4
     }
     break label$4;
    };
    label$5 : {
     $10_1 = $8_1 + 1 | 0;
     if (($2_1 | 0) > ($10_1 | 0)) {
      break label$5
     }
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$0 = HEAP32[$9_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($9_1 + 4 | 0) >> 2] | 0;
     $13_1 = i64toi32_i32$0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1 + $12_1 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $69_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $9_1;
     HEAP32[i64toi32_i32$1 >> 2] = $69_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $12_1 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $13_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $2_1 = $7_1;
     $10_1 = $8_1;
    }
    label$6 : {
     if (($2_1 | 0) > ($10_1 | 0)) {
      break label$6
     }
     $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     $7_1 = $2_1;
     $8_1 = $10_1;
     continue label$2;
    }
    break label$2;
   };
   label$7 : {
    if (($10_1 | 0) <= ($5_1 | 0)) {
     break label$7
    }
    $915($0_1 | 0, $1_1 | 0, $5_1 | 0, $10_1 | 0);
   }
   if (($2_1 | 0) < ($3_1 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $916($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 22908;
  $912($0_1 + 4 | 0 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  HEAP8[($0_1 + 40 | 0) >> 0] = 1;
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 28 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  HEAP8[($0_1 + 64 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $917($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 22908;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  label$3 : {
   $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 40 | 0) >> 0] = 1;
  $911($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $918($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 22908;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 60 | 0) >> 0] = 1;
  label$3 : {
   $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 40 | 0) >> 0] = 1;
  $911($0_1 + 4 | 0 | 0) | 0;
  $37($0_1 | 0);
 }
 
 function $919($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($2_1 + 68 | 0) >> 2] | 0;
   $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($2_1) | 0;
   $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($2_1) | 0;
   if (!$3_1) {
    break label$1
   }
   $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$2_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($2_1) | 0;
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $2_1 = $4_1 + ($5_1 << 4 | 0) | 0;
     $6_1 = HEAP32[(HEAP32[$2_1 >> 2] | 0) >> 2] | 0;
     if (!$6_1) {
      break label$3
     }
     $2_1 = HEAP32[(HEAP32[($2_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
     if (!$2_1) {
      break label$3
     }
     if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0) & 7 | 0) {
      break label$3
     }
     if ((HEAPU8[($2_1 + 204 | 0) >> 0] | 0) & 7 | 0) {
      break label$3
     }
     $7_1 = HEAP32[($2_1 + 208 | 0) >> 2] | 0;
     label$4 : {
      $2_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      $6_1 = HEAP32[($6_1 + 208 | 0) >> 2] | 0;
      $8_1 = $2_1 + ($6_1 << 3 | 0) | 0;
      $9_1 = HEAP32[$8_1 >> 2] | 0;
      if (($9_1 | 0) == ($6_1 | 0)) {
       break label$4
      }
      label$5 : while (1) {
       $6_1 = $2_1 + ($9_1 << 3 | 0) | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
       $6_1 = HEAP32[$6_1 >> 2] | 0;
       $8_1 = $2_1 + ($6_1 << 3 | 0) | 0;
       $9_1 = HEAP32[$8_1 >> 2] | 0;
       if (($6_1 | 0) != ($9_1 | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     label$6 : {
      $8_1 = $2_1 + ($7_1 << 3 | 0) | 0;
      $9_1 = HEAP32[$8_1 >> 2] | 0;
      if (($9_1 | 0) == ($7_1 | 0)) {
       break label$6
      }
      label$7 : while (1) {
       $7_1 = $2_1 + ($9_1 << 3 | 0) | 0;
       HEAP32[$8_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
       $7_1 = HEAP32[$7_1 >> 2] | 0;
       $8_1 = $2_1 + ($7_1 << 3 | 0) | 0;
       $9_1 = HEAP32[$8_1 >> 2] | 0;
       if (($7_1 | 0) != ($9_1 | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     if (($6_1 | 0) == ($7_1 | 0)) {
      break label$3
     }
     $6_1 = $2_1 + ($6_1 << 3 | 0) | 0;
     HEAP32[$6_1 >> 2] = $7_1;
     $2_1 = $2_1 + ($7_1 << 3 | 0) | 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) + (HEAP32[($6_1 + 4 | 0) >> 2] | 0) | 0;
    }
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != ($3_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $920($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    if (($3_1 | 0) >= (1 | 0)) {
     break label$2
    }
    $4_1 = 0;
    break label$1;
   }
   $5_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   $4_1 = 0;
   $6_1 = 0;
   label$3 : while (1) {
    label$4 : {
     $7_1 = HEAP32[$5_1 >> 2] | 0;
     if ((HEAPU8[($7_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
      break label$4
     }
     HEAP32[($7_1 + 208 | 0) >> 2] = $4_1;
     $4_1 = $4_1 + 1 | 0;
    }
    HEAP32[($7_1 + 268 | 0) >> 2] = 1065353216;
    HEAP32[($7_1 + 212 | 0) >> 2] = -1;
    $5_1 = $5_1 + 4 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) < ($3_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  $913($0_1 + 4 | 0 | 0, $4_1 | 0);
  $919($0_1 | 0, $7_1 | 0, $1_1 | 0);
 }
 
 function $921($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $7_1 = 0, $5_1 = 0, $6_1 = 0, $9_1 = 0, $10_1 = 0, $4_1 = 0, $2_1 = 0, $8_1 = 0, $3_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
   $4_1 = 0;
   $5_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $6_1 = HEAP32[($3_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
      if ((HEAPU8[($6_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
       break label$4
      }
      $7_1 = $4_1;
      label$5 : {
       $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       $8_1 = $7_1 << 3 | 0;
       $9_1 = $1_1 + $8_1 | 0;
       $10_1 = HEAP32[$9_1 >> 2] | 0;
       if (($10_1 | 0) == ($7_1 | 0)) {
        break label$5
       }
       label$6 : while (1) {
        $7_1 = $1_1 + ($10_1 << 3 | 0) | 0;
        HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
        $7_1 = HEAP32[$7_1 >> 2] | 0;
        $9_1 = $1_1 + ($7_1 << 3 | 0) | 0;
        $10_1 = HEAP32[$9_1 >> 2] | 0;
        if (($7_1 | 0) != ($10_1 | 0)) {
         continue label$6
        }
        break label$6;
       };
      }
      HEAP32[($6_1 + 208 | 0) >> 2] = $7_1;
      HEAP32[($6_1 + 212 | 0) >> 2] = -1;
      HEAP32[(($1_1 + $8_1 | 0) + 4 | 0) >> 2] = $5_1;
      $4_1 = $4_1 + 1 | 0;
      break label$3;
     }
     HEAP32[($6_1 + 208 | 0) >> 2] = -1;
     HEAP32[($6_1 + 212 | 0) >> 2] = -2;
    }
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $922($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $11_1 = 0, $13_1 = 0, $7_1 = 0, $6_1 = 0, $14_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $3_1 = 0, $12_1 = 0, $15_1 = 0, $17_1 = 0, $4_1 = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $616($3_1 + 8 | 0 | 0, 22924 | 0) | 0;
  label$1 : {
   $5_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (($5_1 | 0) > (-1 | 0)) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    label$3 : {
     $6_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$3
     }
     label$4 : {
      if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
       break label$4
      }
      $80($6_1 | 0);
     }
     HEAP32[($0_1 + 36 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 32 | 0) >> 2] = 0;
    HEAP32[($0_1 + 36 | 0) >> 2] = 0;
    HEAP8[($0_1 + 40 | 0) >> 0] = 1;
   }
   $6_1 = $5_1 << 2 | 0;
   label$5 : while (1) {
    HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $6_1 | 0) >> 2] = 0;
    $6_1 = $6_1 + 4 | 0;
    $7_1 = $5_1 + 1 | 0;
    $8_1 = $7_1 >>> 0 >= $5_1 >>> 0;
    $5_1 = $7_1;
    if ($8_1) {
     continue label$5
    }
    break label$5;
   };
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  $914($0_1 + 4 | 0 | 0);
  label$6 : {
   $9_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (($9_1 | 0) < (1 | 0)) {
    break label$6
   }
   $8_1 = 0;
   label$7 : while (1) {
    $10_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    $11_1 = $8_1;
    $12_1 = $11_1 << 3 | 0;
    $13_1 = $10_1 + $12_1 | 0;
    $5_1 = $13_1 + 8 | 0;
    $7_1 = HEAP32[$13_1 >> 2] | 0;
    label$8 : {
     label$9 : while (1) {
      $6_1 = $8_1;
      $8_1 = $6_1 + 1 | 0;
      if (($8_1 | 0) >= ($9_1 | 0)) {
       break label$8
      }
      $14_1 = HEAP32[$5_1 >> 2] | 0;
      $5_1 = $5_1 + 8 | 0;
      if (($14_1 | 0) == ($7_1 | 0)) {
       continue label$9
      }
      break label$9;
     };
    }
    label$10 : {
     $15_1 = ($11_1 | 0) > ($6_1 | 0);
     if ($15_1) {
      break label$10
     }
     $14_1 = $11_1 + -1 | 0;
     $5_1 = $13_1 + 4 | 0;
     $16_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
     $17_1 = 1;
     label$11 : while (1) {
      label$12 : {
       $13_1 = HEAP32[($16_1 + ((HEAP32[$5_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
       if ((HEAP32[($13_1 + 208 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
        break label$12
       }
       $13_1 = HEAP32[($13_1 + 220 | 0) >> 2] | 0;
       $17_1 = ($13_1 | 0) != (4 | 0) & ($17_1 & ($13_1 | 0) != (1 | 0) | 0) | 0;
      }
      $5_1 = $5_1 + 8 | 0;
      $14_1 = $14_1 + 1 | 0;
      if (($14_1 | 0) < ($6_1 | 0)) {
       continue label$11
      }
      break label$11;
     };
     label$13 : {
      if ($17_1 & 1 | 0) {
       break label$13
      }
      if ($15_1) {
       break label$10
      }
      $5_1 = $12_1 | 4 | 0;
      label$14 : while (1) {
       label$15 : {
        $14_1 = HEAP32[((HEAP32[($2_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($10_1 + $5_1 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
        if ((HEAP32[($14_1 + 208 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
         break label$15
        }
        if ((HEAP32[($14_1 + 220 | 0) >> 2] | 0 | 0) != (2 | 0)) {
         break label$15
        }
        $308($14_1 | 0, 3 | 0);
        HEAP32[($14_1 + 224 | 0) >> 2] = 0;
       }
       if (($11_1 | 0) >= ($6_1 | 0)) {
        break label$10
       }
       $5_1 = $5_1 + 8 | 0;
       $11_1 = $11_1 + 1 | 0;
       $10_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       continue label$14;
      };
     }
     if ($15_1) {
      break label$10
     }
     $5_1 = $12_1 | 4 | 0;
     label$16 : while (1) {
      label$17 : {
       $14_1 = HEAP32[((HEAP32[($2_1 + 16 | 0) >> 2] | 0) + ((HEAP32[($10_1 + $5_1 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
       if ((HEAP32[($14_1 + 208 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
        break label$17
       }
       $308($14_1 | 0, 2 | 0);
      }
      if (($11_1 | 0) >= ($6_1 | 0)) {
       break label$10
      }
      $5_1 = $5_1 + 8 | 0;
      $11_1 = $11_1 + 1 | 0;
      $10_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      continue label$16;
     };
    }
    if (($8_1 | 0) < ($9_1 | 0)) {
     continue label$7
    }
    break label$7;
   };
  }
  label$18 : {
   $14_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($1_1) | 0;
   if (($14_1 | 0) < (1 | 0)) {
    break label$18
   }
   $6_1 = 0;
   label$19 : while (1) {
    $8_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($1_1, $6_1) | 0;
    $5_1 = HEAP32[($8_1 + 776 | 0) >> 2] | 0;
    label$20 : {
     label$21 : {
      label$22 : {
       label$23 : {
        $7_1 = HEAP32[($8_1 + 772 | 0) >> 2] | 0;
        if (!$7_1) {
         break label$23
        }
        if ((HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0) == (2 | 0)) {
         break label$23
        }
        $11_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
        if ($11_1 & 2 | 0) {
         break label$22
        }
        break label$21;
       }
       if (!$5_1) {
        break label$20
       }
       if ((HEAP32[($5_1 + 220 | 0) >> 2] | 0 | 0) == (2 | 0)) {
        break label$20
       }
       $11_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
       if (!($11_1 & 2 | 0)) {
        break label$21
       }
       if ((HEAP32[($7_1 + 220 | 0) >> 2] | 0 | 0) == (2 | 0)) {
        break label$21
       }
      }
      if ($11_1 & 4 | 0) {
       break label$21
      }
      $310($5_1 | 0, 0 | 0);
     }
     label$24 : {
      $11_1 = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
      if (!($11_1 & 2 | 0)) {
       break label$24
      }
      if ($11_1 & 4 | 0) {
       break label$24
      }
      if ((HEAP32[($5_1 + 220 | 0) >> 2] | 0 | 0) == (2 | 0)) {
       break label$24
      }
      $310($7_1 | 0, 0 | 0);
     }
     if (!(HEAPU8[($0_1 + 64 | 0) >> 0] | 0)) {
      break label$20
     }
     if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($1_1, $7_1, $5_1) | 0)) {
      break label$20
     }
     label$25 : {
      $13_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      if (($13_1 | 0) != (HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0)) {
       break label$25
      }
      $9_1 = $13_1 ? $13_1 << 1 | 0 : 1;
      if (($13_1 | 0) >= ($9_1 | 0)) {
       break label$25
      }
      label$26 : {
       label$27 : {
        if ($9_1) {
         break label$27
        }
        $11_1 = 0;
        break label$26;
       }
       $11_1 = $79($9_1 << 2 | 0 | 0, 16 | 0) | 0;
       $13_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
      }
      label$28 : {
       if (($13_1 | 0) < (1 | 0)) {
        break label$28
       }
       $5_1 = 0;
       $7_1 = $13_1;
       label$29 : while (1) {
        HEAP32[($11_1 + $5_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $5_1 | 0) >> 2] | 0;
        $5_1 = $5_1 + 4 | 0;
        $7_1 = $7_1 + -1 | 0;
        if ($7_1) {
         continue label$29
        }
        break label$29;
       };
      }
      label$30 : {
       $5_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
       if (!$5_1) {
        break label$30
       }
       label$31 : {
        if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
         break label$31
        }
        $80($5_1 | 0);
        $13_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
       }
       HEAP32[($0_1 + 36 | 0) >> 2] = 0;
      }
      HEAP32[($0_1 + 36 | 0) >> 2] = $11_1;
      HEAP8[($0_1 + 40 | 0) >> 0] = 1;
      HEAP32[($0_1 + 32 | 0) >> 2] = $9_1;
     }
     HEAP32[($0_1 + 28 | 0) >> 2] = $13_1 + 1 | 0;
     HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + ($13_1 << 2 | 0) | 0) >> 2] = $8_1;
    }
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($14_1 | 0)) {
     continue label$19
    }
    break label$19;
   };
  }
  $617($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $923($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $17_1 = 0, $16_1 = 0, $14_1 = 0, $8_1 = 0, $13_1 = 0, $15_1 = 0, $5_1 = 0, $9_1 = 0, $4_1 = 0, $7_1 = 0, $11_1 = 0, $12_1 = 0, $10_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $922($0_1 | 0, $1_1 | 0, $2_1 | 0);
  $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $6_1 = $616($4_1 + 8 | 0 | 0, 22952 | 0) | 0;
  label$1 : {
   label$2 : {
    if (HEAPU8[($0_1 + 64 | 0) >> 0] | 0) {
     break label$2
    }
    $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($1_1) | 0;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($1_1) | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($3_1, HEAP32[($2_1 + 16 | 0) >> 2] | 0, HEAP32[($2_1 + 8 | 0) >> 2] | 0, $0_1, $1_1, -1);
    break label$1;
   }
   label$3 : {
    $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    if (($7_1 | 0) < (2 | 0)) {
     break label$3
    }
    $924($0_1 + 24 | 0 | 0, $4_1 | 0, 0 | 0, $7_1 + -1 | 0 | 0);
   }
   if (($5_1 | 0) < (1 | 0)) {
    break label$1
   }
   $8_1 = 0;
   $9_1 = 0;
   $10_1 = 1;
   label$4 : while (1) {
    $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    $11_1 = HEAP32[($1_1 + ($8_1 << 3 | 0) | 0) >> 2] | 0;
    $12_1 = 1;
    label$5 : {
     if (($8_1 | 0) >= ($5_1 | 0)) {
      break label$5
     }
     $12_1 = 1;
     label$6 : while (1) {
      $13_1 = HEAP32[((HEAP32[($2_1 + 16 | 0) >> 2] | 0) + ((HEAP32[(($1_1 + ($8_1 << 3 | 0) | 0) + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      label$7 : {
       $14_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       if (($14_1 | 0) != (HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0)) {
        break label$7
       }
       $15_1 = $14_1 ? $14_1 << 1 | 0 : 1;
       if (($14_1 | 0) >= ($15_1 | 0)) {
        break label$7
       }
       label$8 : {
        label$9 : {
         if ($15_1) {
          break label$9
         }
         $16_1 = 0;
         break label$8;
        }
        $16_1 = $79($15_1 << 2 | 0 | 0, 16 | 0) | 0;
        $14_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       }
       label$10 : {
        if (($14_1 | 0) < (1 | 0)) {
         break label$10
        }
        $1_1 = 0;
        $17_1 = $14_1;
        label$11 : while (1) {
         HEAP32[($16_1 + $1_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + $1_1 | 0) >> 2] | 0;
         $1_1 = $1_1 + 4 | 0;
         $17_1 = $17_1 + -1 | 0;
         if ($17_1) {
          continue label$11
         }
         break label$11;
        };
       }
       label$12 : {
        $1_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
        if (!$1_1) {
         break label$12
        }
        label$13 : {
         if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
          break label$13
         }
         $80($1_1 | 0);
         $14_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
        }
        HEAP32[($0_1 + 56 | 0) >> 2] = 0;
       }
       HEAP32[($0_1 + 56 | 0) >> 2] = $16_1;
       HEAP8[($0_1 + 60 | 0) >> 0] = 1;
       HEAP32[($0_1 + 52 | 0) >> 2] = $15_1;
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $14_1 + 1 | 0;
      HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $13_1;
      $1_1 = HEAP32[($13_1 + 220 | 0) >> 2] | 0;
      $12_1 = $12_1 & (($1_1 | 0) == (5 | 0) | ($1_1 | 0) == (2 | 0) | 0) | 0;
      label$14 : {
       $8_1 = $8_1 + 1 | 0;
       if (($8_1 | 0) != ($5_1 | 0)) {
        break label$14
       }
       $8_1 = $5_1;
       break label$5;
      }
      $1_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ((HEAP32[($1_1 + ($8_1 << 3 | 0) | 0) >> 2] | 0 | 0) == ($11_1 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    $13_1 = 0;
    label$15 : {
     label$16 : {
      if (($9_1 | 0) < ($7_1 | 0)) {
       break label$16
      }
      $1_1 = 0;
      break label$15;
     }
     label$17 : {
      $16_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
      $14_1 = $9_1 << 2 | 0;
      $15_1 = $16_1 + $14_1 | 0;
      $1_1 = HEAP32[$15_1 >> 2] | 0;
      $17_1 = HEAP32[((HEAP32[($1_1 + 772 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
      if (($17_1 | 0) > (-1 | 0)) {
       break label$17
      }
      $17_1 = HEAP32[((HEAP32[($1_1 + 776 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
     }
     $13_1 = 0;
     $1_1 = 0;
     if (($17_1 | 0) != ($11_1 | 0)) {
      break label$15
     }
     $1_1 = ($16_1 + $14_1 | 0) + 4 | 0;
     $16_1 = 1;
     label$18 : {
      label$19 : while (1) {
       $13_1 = $16_1;
       $10_1 = $9_1 + $16_1 | 0;
       if (($10_1 | 0) >= ($7_1 | 0)) {
        break label$18
       }
       label$20 : {
        $16_1 = HEAP32[$1_1 >> 2] | 0;
        $17_1 = HEAP32[((HEAP32[($16_1 + 772 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
        if (($17_1 | 0) > (-1 | 0)) {
         break label$20
        }
        $17_1 = HEAP32[((HEAP32[($16_1 + 776 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
       }
       $1_1 = $1_1 + 4 | 0;
       $16_1 = $13_1 + 1 | 0;
       if (($11_1 | 0) == ($17_1 | 0)) {
        continue label$19
       }
       break label$19;
      };
     }
     $1_1 = $15_1;
    }
    label$21 : {
     if ($12_1) {
      break label$21
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($3_1, HEAP32[($0_1 + 56 | 0) >> 2] | 0, HEAP32[($0_1 + 48 | 0) >> 2] | 0, $1_1, $13_1, $11_1);
    }
    label$22 : {
     $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
     if (($1_1 | 0) > (-1 | 0)) {
      break label$22
     }
     label$23 : {
      if ((HEAP32[($0_1 + 52 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
       break label$23
      }
      label$24 : {
       $17_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
       if (!$17_1) {
        break label$24
       }
       label$25 : {
        if (!(HEAPU8[($0_1 + 60 | 0) >> 0] | 0)) {
         break label$25
        }
        $80($17_1 | 0);
       }
       HEAP32[($0_1 + 56 | 0) >> 2] = 0;
      }
      HEAP8[($0_1 + 60 | 0) >> 0] = 1;
      HEAP32[($0_1 + 52 | 0) >> 2] = 0;
      HEAP32[($0_1 + 56 | 0) >> 2] = 0;
     }
     $17_1 = $1_1 << 2 | 0;
     label$26 : while (1) {
      HEAP32[((HEAP32[($0_1 + 56 | 0) >> 2] | 0) + $17_1 | 0) >> 2] = 0;
      $17_1 = $17_1 + 4 | 0;
      $16_1 = $1_1 + 1 | 0;
      $14_1 = $16_1 >>> 0 >= $1_1 >>> 0;
      $1_1 = $16_1;
      if ($14_1) {
       continue label$26
      }
      break label$26;
     };
    }
    $9_1 = $13_1 ? $10_1 : $9_1;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    if (($8_1 | 0) < ($5_1 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  $617($6_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $924($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $12_1 = 0, $7_1 = 0, $13_1 = 0, $11_1 = 0, $10_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $5_1 = 0, $9_1 = 0;
  label$1 : while (1) {
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $5_1 = $2_1;
   $6_1 = HEAP32[($4_1 + ((($2_1 + $3_1 | 0 | 0) / (2 | 0) | 0) << 2 | 0) | 0) >> 2] | 0;
   $7_1 = $3_1;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $8_1 = HEAP32[((HEAP32[($6_1 + 772 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
      $9_1 = ($8_1 | 0) < (0 | 0);
      if ($9_1) {
       break label$4
      }
      $10_1 = $2_1 + -1 | 0;
      $11_1 = ($4_1 + ($2_1 << 2 | 0) | 0) + -4 | 0;
      label$5 : while (1) {
       label$6 : {
        $11_1 = $11_1 + 4 | 0;
        $12_1 = HEAP32[$11_1 >> 2] | 0;
        $2_1 = HEAP32[((HEAP32[($12_1 + 772 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
        if (($2_1 | 0) > (-1 | 0)) {
         break label$6
        }
        $2_1 = HEAP32[((HEAP32[($12_1 + 776 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
       }
       $10_1 = $10_1 + 1 | 0;
       if (($2_1 | 0) < ($8_1 | 0)) {
        continue label$5
       }
       break label$3;
      };
     }
     $10_1 = $2_1 + -1 | 0;
     $11_1 = ($4_1 + ($2_1 << 2 | 0) | 0) + -4 | 0;
     $13_1 = HEAP32[((HEAP32[($6_1 + 776 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
     label$7 : while (1) {
      label$8 : {
       $11_1 = $11_1 + 4 | 0;
       $12_1 = HEAP32[$11_1 >> 2] | 0;
       $2_1 = HEAP32[((HEAP32[($12_1 + 772 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
       if (($2_1 | 0) > (-1 | 0)) {
        break label$8
       }
       $2_1 = HEAP32[((HEAP32[($12_1 + 776 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
      }
      $10_1 = $10_1 + 1 | 0;
      if (($2_1 | 0) < ($13_1 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    label$9 : {
     label$10 : {
      if ($9_1) {
       break label$10
      }
      $2_1 = $7_1 + 1 | 0;
      $12_1 = $4_1 + ($7_1 << 2 | 0) | 0;
      label$11 : while (1) {
       label$12 : {
        $7_1 = HEAP32[$12_1 >> 2] | 0;
        $13_1 = HEAP32[((HEAP32[($7_1 + 772 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
        if (($13_1 | 0) > (-1 | 0)) {
         break label$12
        }
        $13_1 = HEAP32[((HEAP32[($7_1 + 776 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
       }
       $12_1 = $12_1 + -4 | 0;
       $2_1 = $2_1 + -1 | 0;
       if (($8_1 | 0) < ($13_1 | 0)) {
        continue label$11
       }
       break label$11;
      };
      $12_1 = $12_1 + 4 | 0;
      break label$9;
     }
     $2_1 = $7_1 + 1 | 0;
     $12_1 = $4_1 + ($7_1 << 2 | 0) | 0;
     $7_1 = HEAP32[((HEAP32[($6_1 + 776 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
     label$13 : while (1) {
      label$14 : {
       $8_1 = HEAP32[$12_1 >> 2] | 0;
       $13_1 = HEAP32[((HEAP32[($8_1 + 772 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
       if (($13_1 | 0) > (-1 | 0)) {
        break label$14
       }
       $13_1 = HEAP32[((HEAP32[($8_1 + 776 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
      }
      $12_1 = $12_1 + -4 | 0;
      $2_1 = $2_1 + -1 | 0;
      if (($7_1 | 0) < ($13_1 | 0)) {
       continue label$13
      }
      break label$13;
     };
     $12_1 = $12_1 + 4 | 0;
    }
    label$15 : {
     label$16 : {
      if (($10_1 | 0) <= ($2_1 | 0)) {
       break label$16
      }
      $7_1 = $2_1;
      $2_1 = $10_1;
      break label$15;
     }
     $13_1 = HEAP32[$11_1 >> 2] | 0;
     HEAP32[$11_1 >> 2] = HEAP32[$12_1 >> 2] | 0;
     HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $13_1;
     $7_1 = $2_1 + -1 | 0;
     $2_1 = $10_1 + 1 | 0;
    }
    label$17 : {
     if (($2_1 | 0) > ($7_1 | 0)) {
      break label$17
     }
     $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   label$18 : {
    if (($7_1 | 0) <= ($5_1 | 0)) {
     break label$18
    }
    $924($0_1 | 0, $1_1 | 0, $5_1 | 0, $7_1 | 0);
   }
   if (($2_1 | 0) < ($3_1 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $925($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $3_1 = 0, $5_1 = 0, $6_1 = 0, $2_1 = 0, $7_1 = 0, $4_1 = 0, $8_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(0));
    $3_1 = $2_1 << 1 | 0;
    if (!$3_1) {
     break label$2
    }
    if ($1_1 != $1_1) {
     break label$2
    }
    $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(0));
    $5_1 = ($4_1 >>> 23 | 0) & 255 | 0;
    if (($5_1 | 0) != (255 | 0)) {
     break label$1
    }
   }
   $1_1 = Math_fround($0_1 * $1_1);
   return Math_fround(Math_fround($1_1 / $1_1));
  }
  label$3 : {
   $6_1 = $4_1 << 1 | 0;
   if ($6_1 >>> 0 <= $3_1 >>> 0) {
    break label$3
   }
   $6_1 = ($2_1 >>> 23 | 0) & 255 | 0;
   label$4 : {
    label$5 : {
     if ($5_1) {
      break label$5
     }
     $5_1 = 0;
     label$6 : {
      $3_1 = $4_1 << 9 | 0;
      if (($3_1 | 0) < (0 | 0)) {
       break label$6
      }
      $5_1 = 0;
      label$7 : while (1) {
       $5_1 = $5_1 + -1 | 0;
       $3_1 = $3_1 << 1 | 0;
       if (($3_1 | 0) > (-1 | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     $3_1 = $4_1 << (1 - $5_1 | 0) | 0;
     break label$4;
    }
    $3_1 = $4_1 & 8388607 | 0 | 8388608 | 0;
   }
   label$8 : {
    label$9 : {
     if ($6_1) {
      break label$9
     }
     $6_1 = 0;
     label$10 : {
      $7_1 = $2_1 << 9 | 0;
      if (($7_1 | 0) < (0 | 0)) {
       break label$10
      }
      $6_1 = 0;
      label$11 : while (1) {
       $6_1 = $6_1 + -1 | 0;
       $7_1 = $7_1 << 1 | 0;
       if (($7_1 | 0) > (-1 | 0)) {
        continue label$11
       }
       break label$11;
      };
     }
     $8_1 = $2_1 << (1 - $6_1 | 0) | 0;
     break label$8;
    }
    $8_1 = $2_1 & 8388607 | 0 | 8388608 | 0;
   }
   $2_1 = $3_1 - $8_1 | 0;
   $7_1 = ($2_1 | 0) > (-1 | 0);
   label$12 : {
    if (($5_1 | 0) <= ($6_1 | 0)) {
     break label$12
    }
    label$13 : while (1) {
     label$14 : {
      if (!($7_1 & 1 | 0)) {
       break label$14
      }
      $3_1 = $2_1;
      if ($3_1) {
       break label$14
      }
      return Math_fround(Math_fround($0_1 * Math_fround(0.0)));
     }
     $3_1 = $3_1 << 1 | 0;
     $2_1 = $3_1 - $8_1 | 0;
     $7_1 = ($2_1 | 0) > (-1 | 0);
     $5_1 = $5_1 + -1 | 0;
     if (($5_1 | 0) > ($6_1 | 0)) {
      continue label$13
     }
     break label$13;
    };
   }
   label$15 : {
    if (!$7_1) {
     break label$15
    }
    $3_1 = $2_1;
    if ($3_1) {
     break label$15
    }
    return Math_fround(Math_fround($0_1 * Math_fround(0.0)));
   }
   label$16 : {
    if ($3_1 >>> 0 > 8388607 >>> 0) {
     break label$16
    }
    label$17 : while (1) {
     $5_1 = $5_1 + -1 | 0;
     $3_1 = $3_1 << 1 | 0;
     if ($3_1 >>> 0 < 8388608 >>> 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $6_1 = $4_1 & -2147483648 | 0;
   label$18 : {
    label$19 : {
     if (($5_1 | 0) < (1 | 0)) {
      break label$19
     }
     $5_1 = $3_1 + -8388608 | 0 | ($5_1 << 23 | 0) | 0;
     break label$18;
    }
    $5_1 = $3_1 >>> (1 - $5_1 | 0) | 0;
   }
   return Math_fround((wasm2js_scratch_store_i32(0, $5_1 | $6_1 | 0), wasm2js_scratch_load_f32()));
  }
  return Math_fround(($6_1 | 0) == ($3_1 | 0) ? Math_fround($0_1 * Math_fround(0.0)) : $0_1);
 }
 
 function $926($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = Math_fround(0);
  label$1 : {
   $1_1 = Math_fround($925(Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) + Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]))), Math_fround(Math_fround(6.2831854820251465))));
   if ($1_1 < Math_fround(-3.1415927410125732) ^ 1 | 0) {
    break label$1
   }
   return Math_fround(Math_fround($1_1 + Math_fround(6.2831854820251465)));
  }
  label$2 : {
   if ($1_1 > Math_fround(3.1415927410125732) ^ 1 | 0) {
    break label$2
   }
   $1_1 = Math_fround($1_1 + Math_fround(-6.2831854820251465));
  }
  return Math_fround($1_1);
 }
 
 function $927($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = Math_fround(0);
  label$1 : {
   $1_1 = Math_fround($925(Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) - Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]))), Math_fround(Math_fround(6.2831854820251465))));
   if ($1_1 < Math_fround(-3.1415927410125732) ^ 1 | 0) {
    break label$1
   }
   return Math_fround(Math_fround($1_1 + Math_fround(6.2831854820251465)));
  }
  label$2 : {
   if ($1_1 > Math_fround(3.1415927410125732) ^ 1 | 0) {
    break label$2
   }
   $1_1 = Math_fround($1_1 + Math_fround(-6.2831854820251465));
  }
  return Math_fround($1_1);
 }
 
 function $928($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $6_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $7_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $4_1 = Math_fround($497(Math_fround($2_1)));
  $5_1 = Math_fround(HEAPF32[($1_1 + 444 | 0) >> 2]);
  $2_1 = Math_fround($496(Math_fround($2_1)));
  label$1 : {
   label$2 : {
    if (Math_fround(Math_abs($4_1)) > Math_fround(1.1920928955078125e-07)) {
     break label$2
    }
    $6_1 = Math_fround($2_1 * $2_1);
    $7_1 = Math_fround($4_1 * $4_1);
    break label$1;
   }
   $6_1 = Math_fround($2_1 * $2_1);
   $7_1 = Math_fround($4_1 * $4_1);
   $8_1 = Math_fround($6_1 / $7_1);
   $9_1 = Math_fround(HEAPF32[($1_1 + 448 | 0) >> 2]);
   $5_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($8_1 + Math_fround(1.0)) / Math_fround(Math_fround(Math_fround(1.0) / Math_fround($9_1 * $9_1)) + Math_fround($8_1 / Math_fround($5_1 * $5_1))))));
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  $8_1 = Math_fround($5_1 * Math_fround(.5));
  $6_1 = Math_fround(Math_fround($496(Math_fround($8_1))) / Math_fround(Math_sqrt(Math_fround($6_1 + Math_fround($7_1 + Math_fround(0.0))))));
  $2_1 = Math_fround($2_1 * $6_1);
  $5_1 = Math_fround($6_1 * Math_fround(0.0));
  $4_1 = Math_fround($4_1 * $6_1);
  $9_1 = Math_fround($4_1 * Math_fround(0.0));
  $10_1 = Math_fround($2_1 * Math_fround(-0.0));
  $7_1 = Math_fround(Math_fround(Math_fround(-Math_fround($5_1 * $3_1)) - $9_1) - $10_1);
  $6_1 = Math_fround($497(Math_fround($8_1)));
  $11_1 = Math_fround($6_1 * Math_fround(0.0));
  $12_1 = Math_fround($5_1 * Math_fround(0.0));
  $8_1 = Math_fround(Math_fround($11_1 + $12_1) - Math_fround($4_1 * $3_1));
  $9_1 = Math_fround(Math_fround(Math_fround($6_1 * $3_1) + $9_1) - $10_1);
  $3_1 = Math_fround(Math_fround($11_1 - Math_fround($2_1 * $3_1)) - $12_1);
  HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($2_1 * $7_1) + Math_fround($6_1 * $8_1)) - Math_fround($9_1 * $4_1)) + Math_fround($3_1 * $5_1));
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($6_1 * $3_1) - Math_fround($7_1 * $4_1)) - Math_fround($8_1 * $5_1)) - Math_fround($2_1 * $9_1));
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(Math_fround($2_1 * $3_1) + Math_fround(Math_fround($6_1 * $9_1) - Math_fround($7_1 * $5_1))) + Math_fround($8_1 * $4_1));
 }
 
 function $929($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(Math_fround(HEAPF32[(($0_1 + ($1_1 << 2 | 0) | 0) + 1192 | 0) >> 2]));
 }
 
 function $930($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  $858($0_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 100 | 0;
  i64toi32_i32$0 = 1015580809;
  HEAP32[i64toi32_i32$1 >> 2] = 1050253722;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] = 1058642330;
  HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 132 | 0;
  i64toi32_i32$0 = 1045220557;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 124 | 0;
  i64toi32_i32$0 = 1045220557;
  HEAP32[i64toi32_i32$1 >> 2] = 1045220557;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 108 | 0;
  i64toi32_i32$0 = 10;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 184 | 0;
  i64toi32_i32$0 = 1045220557;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 176 | 0;
  i64toi32_i32$0 = 1900671690;
  HEAP32[i64toi32_i32$1 >> 2] = 1120403456;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 172 | 0) >> 2] = 128;
  i64toi32_i32$1 = $0_1 + 164 | 0;
  i64toi32_i32$0 = 2;
  HEAP32[i64toi32_i32$1 >> 2] = 260;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 156 | 0;
  i64toi32_i32$0 = 1062836634;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 148 | 0;
  i64toi32_i32$0 = 1036831949;
  HEAP32[i64toi32_i32$1 >> 2] = -1121724662;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 140 | 0;
  i64toi32_i32$0 = 1;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 116 | 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 1101004800;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = 23012;
  HEAP8[($0_1 + 208 | 0) >> 0] = 1;
  HEAP32[($0_1 + 204 | 0) >> 2] = 0;
  HEAP8[($0_1 + 240 | 0) >> 0] = 1;
  HEAP32[($0_1 + 216 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 212 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 196 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 236 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 228 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 260 | 0) >> 0] = 1;
  HEAP16[($0_1 + 290 | 0) >> 1] = 0;
  HEAP32[($0_1 + 256 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 248 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = -1054867456;
  HEAP32[(i64toi32_i32$1 + 264 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 268 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 272 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 280 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 308 | 0) >> 0] = 1;
  HEAP32[($0_1 + 312 | 0) >> 2] = 0;
  HEAP32[($0_1 + 304 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 296 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 336 | 0) >> 0] = 1;
  HEAP8[($0_1 + 316 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 324 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 332 | 0) >> 2] = 0;
  HEAP32[($0_1 + 340 | 0) >> 2] = 0;
  $2_1 = 0;
  label$1 : {
   if ($3_1) {
    break label$1
   }
   $3_1 = $79(236 | 0, 16 | 0) | 0;
   $819($3_1 | 0) | 0;
   HEAP32[($0_1 + 216 | 0) >> 2] = $3_1;
   $2_1 = 1;
  }
  HEAP8[($0_1 + 289 | 0) >> 0] = $2_1;
  $3_1 = $79(68 | 0, 16 | 0) | 0;
  $916($3_1 | 0) | 0;
  HEAP8[($0_1 + 288 | 0) >> 0] = 1;
  HEAP32[($0_1 + 220 | 0) >> 2] = $3_1;
  $3_1 = $79(88 | 0, 16 | 0) | 0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 44 | 0) >> 0] = 1;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 23620;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = 0;
  HEAP8[(i64toi32_i32$1 + 64 | 0) >> 0] = 1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] = 0;
  HEAP8[(i64toi32_i32$1 + 84 | 0) >> 0] = 1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = HEAP32[($0_1 + 216 | 0) >> 2] | 0;
  HEAP32[($0_1 + 212 | 0) >> 2] = i64toi32_i32$1;
  return $0_1 | 0;
 }
 
 function $931($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 23012;
  label$1 : {
   if (!(HEAPU8[($0_1 + 288 | 0) >> 0] | 0)) {
    break label$1
   }
   $1_1 = HEAP32[($0_1 + 220 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
   $80(HEAP32[($0_1 + 220 | 0) >> 2] | 0 | 0);
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$2
   }
   FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
   $80(HEAP32[($0_1 + 212 | 0) >> 2] | 0 | 0);
  }
  label$3 : {
   if (!(HEAPU8[($0_1 + 289 | 0) >> 0] | 0)) {
    break label$3
   }
   $1_1 = HEAP32[($0_1 + 216 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
   $80(HEAP32[($0_1 + 216 | 0) >> 2] | 0 | 0);
  }
  label$4 : {
   $1_1 = HEAP32[($0_1 + 332 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$4
   }
   label$5 : {
    if (!(HEAPU8[($0_1 + 336 | 0) >> 0] | 0)) {
     break label$5
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 332 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 332 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 324 | 0) >> 2] = 0;
  HEAP32[($0_1 + 328 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 336 | 0) >> 0] = 1;
  label$6 : {
   $1_1 = HEAP32[($0_1 + 304 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$6
   }
   label$7 : {
    if (!(HEAPU8[($0_1 + 308 | 0) >> 0] | 0)) {
     break label$7
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 304 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 304 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 296 | 0) >> 2] = 0;
  HEAP32[($0_1 + 300 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 308 | 0) >> 0] = 1;
  label$8 : {
   $1_1 = HEAP32[($0_1 + 256 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$8
   }
   label$9 : {
    if (!(HEAPU8[($0_1 + 260 | 0) >> 0] | 0)) {
     break label$9
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 256 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 256 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 248 | 0) >> 2] = 0;
  HEAP32[($0_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 260 | 0) >> 0] = 1;
  label$10 : {
   $1_1 = HEAP32[($0_1 + 236 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$10
   }
   label$11 : {
    if (!(HEAPU8[($0_1 + 240 | 0) >> 0] | 0)) {
     break label$11
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 236 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 236 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 228 | 0) >> 2] = 0;
  HEAP32[($0_1 + 232 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 240 | 0) >> 0] = 1;
  label$12 : {
   $1_1 = HEAP32[($0_1 + 204 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$12
   }
   label$13 : {
    if (!(HEAPU8[($0_1 + 208 | 0) >> 0] | 0)) {
     break label$13
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 204 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 204 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 196 | 0) >> 2] = 0;
  HEAP32[($0_1 + 200 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 208 | 0) >> 0] = 1;
  $859($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $932($0_1) {
  $0_1 = $0_1 | 0;
  $80($931($0_1 | 0) | 0 | 0);
 }
 
 function $933($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $5_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   $4_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $5_1 = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$3
     }
     if (!((HEAP32[($5_1 + 252 | 0) >> 2] | 0) & 2 | 0)) {
      break label$3
     }
     if ((HEAP32[($5_1 + 220 | 0) >> 2] | 0 | 0) == (2 | 0)) {
      break label$3
     }
     if (!((HEAPU8[($5_1 + 204 | 0) >> 0] | 0) & 2 | 0)) {
      break label$3
     }
     $802($5_1 | 0, Math_fround($1_1));
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    $3_1 = $3_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $934($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $616($1_1 + 8 | 0 | 0, 23200 | 0) | 0;
  $876($0_1 | 0);
  label$1 : {
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0)) {
    break label$1
   }
   $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
   if (!((FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($3_1) | 0) & 6144 | 0)) {
    break label$1
   }
   $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 104 | 0) >> 2] | 0]($0_1) | 0;
   if (($3_1 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $3_1 = $3_1 + -1 | 0;
    ((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 108 | 0) >> 2] | 0]($0_1, $3_1) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 172 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    if (($3_1 | 0) > (0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0)) {
    break label$3
   }
   $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
   if (!((FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($3_1) | 0) & 16387 | 0)) {
    break label$3
   }
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0)) {
    break label$3
   }
   $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($3_1) | 0)) {
    break label$3
   }
   if ((HEAP32[($0_1 + 296 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$3
   }
   $3_1 = 0;
   $4_1 = 0;
   label$4 : while (1) {
    $5_1 = HEAP32[((HEAP32[($0_1 + 304 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($5_1, HEAP32[($0_1 + 72 | 0) >> 2] | 0);
    $3_1 = $3_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < (HEAP32[($0_1 + 296 | 0) >> 2] | 0 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  label$5 : {
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0)) {
    break label$5
   }
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 104 | 0) >> 2] | 0]($0_1);
  }
  $617($2_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $935($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0, $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 248 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $1_1 = 0;
   $2_1 = 0;
   label$2 : while (1) {
    $3_1 = HEAP32[((HEAP32[($0_1 + 256 | 0) >> 2] | 0) + $1_1 | 0) >> 2] | 0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$1 + 472 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 476 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 496 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3_1 + 488 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3_1 + 480 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) < (HEAP32[($0_1 + 248 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $936($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
   if (($1_1 | 0) < (1 | 0)) {
    break label$1
   }
   $2_1 = 0;
   $3_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $4_1 = HEAP32[((HEAP32[($0_1 + 256 | 0) >> 2] | 0) + $2_1 | 0) >> 2] | 0;
      $5_1 = (HEAP32[($4_1 + 220 | 0) >> 2] | 0) + -2 | 0;
      if ($5_1 >>> 0 > 3 >>> 0) {
       break label$4
      }
      switch ($5_1 | 0) {
      case 1:
      case 2:
       break label$4;
      default:
       break label$3;
      };
     }
     $806($4_1 | 0);
     $1_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
    }
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) < ($1_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $937($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $4_1 = 0, $8_1 = Math_fround(0), $2_1 = 0, $3_1 = 0, $6_1 = 0, $1_1 = 0, $7_1 = 0;
  $1_1 = global$0 - 64 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    if (!(HEAPU8[($0_1 + 290 | 0) >> 0] | 0)) {
     break label$2
    }
    $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    if (($2_1 | 0) < (1 | 0)) {
     break label$1
    }
    $3_1 = 0;
    $4_1 = 0;
    label$3 : while (1) {
     label$4 : {
      $5_1 = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
      if (!$5_1) {
       break label$4
      }
      if (!((HEAP32[($5_1 + 252 | 0) >> 2] | 0) & 2 | 0)) {
       break label$4
      }
      if (!(HEAP32[($5_1 + 540 | 0) >> 2] | 0)) {
       break label$4
      }
      if ((HEAPU8[($5_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
       break label$4
      }
      $2_1 = $5_1 + 148 | 0;
      $6_1 = $5_1 + 132 | 0;
      $7_1 = $5_1 + 68 | 0;
      label$5 : {
       label$6 : {
        if (!(HEAPU8[($0_1 + 316 | 0) >> 0] | 0)) {
         break label$6
        }
        $8_1 = Math_fround(HEAPF32[($0_1 + 284 | 0) >> 2]);
        if ($8_1 == Math_fround(0.0)) {
         break label$6
        }
        $8_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 280 | 0) >> 2]) - $8_1);
        break label$5;
       }
       $8_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 280 | 0) >> 2]) * Math_fround(HEAPF32[($5_1 + 268 | 0) >> 2]));
      }
      $801($7_1 | 0, $6_1 | 0, $2_1 | 0, Math_fround($8_1), $1_1 | 0);
      $5_1 = HEAP32[($5_1 + 540 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($5_1, $1_1);
      $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     }
     $3_1 = $3_1 + 4 | 0;
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) < ($2_1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $6_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
   if (($6_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = 0;
   $3_1 = 0;
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $4_1 = HEAP32[((HEAP32[($0_1 + 256 | 0) >> 2] | 0) + $5_1 | 0) >> 2] | 0;
      $2_1 = (HEAP32[($4_1 + 220 | 0) >> 2] | 0) + -2 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       break label$9
      }
      switch ($2_1 | 0) {
      case 1:
      case 2:
       break label$9;
      default:
       break label$8;
      };
     }
     if (!(HEAP32[($4_1 + 540 | 0) >> 2] | 0)) {
      break label$8
     }
     if ((HEAPU8[($4_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
      break label$8
     }
     $2_1 = $4_1 + 148 | 0;
     $6_1 = $4_1 + 132 | 0;
     $7_1 = $4_1 + 68 | 0;
     label$10 : {
      label$11 : {
       if (!(HEAPU8[($0_1 + 316 | 0) >> 0] | 0)) {
        break label$11
       }
       $8_1 = Math_fround(HEAPF32[($0_1 + 284 | 0) >> 2]);
       if ($8_1 == Math_fround(0.0)) {
        break label$11
       }
       $8_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 280 | 0) >> 2]) - $8_1);
       break label$10;
      }
      $8_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 280 | 0) >> 2]) * Math_fround(HEAPF32[($4_1 + 268 | 0) >> 2]));
     }
     $801($7_1 | 0, $6_1 | 0, $2_1 | 0, Math_fround($8_1), $1_1 | 0);
     $4_1 = HEAP32[($4_1 + 540 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($4_1, $1_1);
     $6_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
    }
    $5_1 = $5_1 + 4 | 0;
    $3_1 = $3_1 + 1 | 0;
    if (($3_1 | 0) < ($6_1 | 0)) {
     continue label$7
    }
    break label$7;
   };
  }
  global$0 = $1_1 + 64 | 0;
 }
 
 function $938($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var $4_1 = 0, $6_1 = 0, $5_1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    HEAPF32[($0_1 + 284 | 0) >> 2] = $3_1;
    $1_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 280 | 0) >> 2]) + $1_1);
    HEAPF32[($0_1 + 280 | 0) >> 2] = $1_1;
    $4_1 = 0;
    if ($1_1 >= $3_1 ^ 1 | 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      $5_1 = Math_fround($1_1 / $3_1);
      if (!(Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0))) {
       break label$4
      }
      $4_1 = ~~$5_1;
      break label$3;
     }
     $4_1 = -2147483648;
    }
    HEAPF32[($0_1 + 280 | 0) >> 2] = Math_fround($1_1 - Math_fround(Math_fround($4_1 | 0) * $3_1));
    break label$1;
   }
   HEAP32[($0_1 + 284 | 0) >> 2] = 0;
   HEAPF32[($0_1 + 280 | 0) >> 2] = HEAPU8[($0_1 + 316 | 0) >> 0] | 0 ? Math_fround(0.0) : $1_1;
   $3_1 = $1_1;
   $4_1 = Math_fround(Math_abs($1_1)) < Math_fround(1.1920928955078125e-07) ^ 1 | 0;
   $2_1 = $4_1;
  }
  label$5 : {
   if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0)) {
    break label$5
   }
   $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
   (wasm2js_i32$0 = 0, wasm2js_i32$1 = ((FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($6_1) | 0) >>> 4 | 0) & 1 | 0), HEAP8[(wasm2js_i32$0 + 2792 | 0) >> 0] = wasm2js_i32$1;
  }
  label$6 : {
   label$7 : {
    if (!$4_1) {
     break label$7
    }
    $6_1 = ($4_1 | 0) > ($2_1 | 0) ? $2_1 : $4_1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 168 | 0) >> 2] | 0]($0_1, Math_fround($3_1 * Math_fround($6_1 | 0)));
    FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 176 | 0) >> 2] | 0]($0_1);
    if (($6_1 | 0) < (1 | 0)) {
     break label$6
    }
    $2_1 = 0;
    label$8 : while (1) {
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 160 | 0) >> 2] | 0]($0_1, $3_1);
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 80 | 0) >> 2] | 0]($0_1);
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) < ($6_1 | 0)) {
      continue label$8
     }
     break label$6;
    };
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 80 | 0) >> 2] | 0]($0_1);
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 120 | 0) >> 2] | 0]($0_1);
  return $4_1 | 0;
 }
 
 function $939($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $2_1 = 0, $6_1 = 0, $7_1 = 0, $3_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $616($2_1 | 0, 23215 | 0) | 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   FUNCTION_TABLE[$4_1]($0_1, $1_1);
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 140 | 0) >> 2] | 0]($0_1, $1_1);
  $4_1 = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 28 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $0_1 + 48 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 164 | 0) >> 2] | 0]($0_1, $1_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($0_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 148 | 0) >> 2] | 0]($0_1);
  HEAPF32[($0_1 + 104 | 0) >> 2] = $1_1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 152 | 0) >> 2] | 0]($0_1, $0_1 + 92 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 144 | 0) >> 2] | 0]($0_1, $1_1);
  $5_1 = $616($2_1 + 8 | 0 | 0, 23244 | 0) | 0;
  label$2 : {
   if ((HEAP32[($0_1 + 296 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$2
   }
   $6_1 = 0;
   label$3 : while (1) {
    $7_1 = HEAP32[((HEAP32[($0_1 + 304 | 0) >> 2] | 0) + $4_1 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($7_1, $0_1, $1_1);
    $4_1 = $4_1 + 4 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) < (HEAP32[($0_1 + 296 | 0) >> 2] | 0 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  $617($5_1 | 0) | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 156 | 0) >> 2] | 0]($0_1, $1_1);
  label$4 : {
   $4_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$4
   }
   FUNCTION_TABLE[$4_1]($0_1, $1_1);
  }
  $617($3_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $940($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $9_1 = 0, $14_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 264 | 0) >> 2] = $9_1;
  HEAP32[($0_1 + 268 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 272 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $14_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   $4_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $5_1 = HEAP32[((HEAP32[($0_1 + 256 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
      $6_1 = (HEAP32[($5_1 + 220 | 0) >> 2] | 0) + -2 | 0;
      if ($6_1 >>> 0 > 3 >>> 0) {
       break label$4
      }
      switch ($6_1 | 0) {
      case 1:
      case 2:
       break label$4;
      default:
       break label$3;
      };
     }
     if ((HEAPU8[($5_1 + 564 | 0) >> 0] | 0) & 1 | 0) {
      break label$3
     }
     $804($5_1 | 0, $1_1 | 0);
     $2_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
    }
    $3_1 = $3_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $941($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $9_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 264 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 268 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 272 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $9_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $942($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $861($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $943($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   if (!((HEAP32[($1_1 + 252 | 0) >> 2] | 0) & 2 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 92 | 0) >> 2] | 0]($0_1, $1_1);
   return;
  }
  $866($0_1 | 0, $1_1 | 0);
 }
 
 function $944($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   $4_1 = HEAP32[($0_1 + 256 | 0) >> 2] | 0;
   $5_1 = $4_1;
   label$2 : {
    label$3 : while (1) {
     if ((HEAP32[$5_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$2
     }
     $5_1 = $5_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     if (($2_1 | 0) != ($3_1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   $3_1 = $2_1 + -1 | 0;
   $2_1 = $3_1 << 2 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[($4_1 + $2_1 | 0) >> 2] | 0;
   HEAP32[($0_1 + 248 | 0) >> 2] = $3_1;
   HEAP32[((HEAP32[($0_1 + 256 | 0) >> 2] | 0) + $2_1 | 0) >> 2] = $1_1;
  }
  $866($0_1 | 0, $1_1 | 0);
 }
 
 function $945($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  label$1 : {
   if ((HEAPU8[($1_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
    break label$1
   }
   if ((HEAPU8[($1_1 + 564 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $804($1_1 | 0, $0_1 + 264 | 0 | 0);
  }
  label$2 : {
   if (!(HEAP32[($1_1 + 192 | 0) >> 2] | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAPU8[($1_1 + 204 | 0) >> 0] | 0) & 1 | 0) {
      break label$4
     }
     label$5 : {
      $2_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
      if (($2_1 | 0) != (HEAP32[($0_1 + 252 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      $3_1 = $2_1 ? $2_1 << 1 | 0 : 1;
      if (($2_1 | 0) >= ($3_1 | 0)) {
       break label$5
      }
      label$6 : {
       label$7 : {
        if ($3_1) {
         break label$7
        }
        $4_1 = 0;
        break label$6;
       }
       $4_1 = $79($3_1 << 2 | 0 | 0, 16 | 0) | 0;
       $2_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
      }
      label$8 : {
       if (($2_1 | 0) < (1 | 0)) {
        break label$8
       }
       $5_1 = 0;
       $6_1 = $2_1;
       label$9 : while (1) {
        HEAP32[($4_1 + $5_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 256 | 0) >> 2] | 0) + $5_1 | 0) >> 2] | 0;
        $5_1 = $5_1 + 4 | 0;
        $6_1 = $6_1 + -1 | 0;
        if ($6_1) {
         continue label$9
        }
        break label$9;
       };
      }
      label$10 : {
       $5_1 = HEAP32[($0_1 + 256 | 0) >> 2] | 0;
       if (!$5_1) {
        break label$10
       }
       label$11 : {
        if (!(HEAPU8[($0_1 + 260 | 0) >> 0] | 0)) {
         break label$11
        }
        $80($5_1 | 0);
        $2_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
       }
       HEAP32[($0_1 + 256 | 0) >> 2] = 0;
      }
      HEAP32[($0_1 + 256 | 0) >> 2] = $4_1;
      HEAP32[($0_1 + 252 | 0) >> 2] = $3_1;
      HEAP8[($0_1 + 260 | 0) >> 0] = 1;
     }
     HEAP32[($0_1 + 248 | 0) >> 2] = $2_1 + 1 | 0;
     HEAP32[((HEAP32[($0_1 + 256 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $1_1;
     break label$3;
    }
    $308($1_1 | 0, 2 | 0);
   }
   $5_1 = (HEAP32[($1_1 + 204 | 0) >> 2] | 0) & 3 | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1, $1_1, $5_1 ? 2 : 1, $5_1 ? -3 : -1);
  }
 }
 
 function $946($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0;
  label$1 : {
   if ((HEAPU8[($1_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
    break label$1
   }
   if ((HEAPU8[($1_1 + 564 | 0) >> 0] | 0) & 1 | 0) {
    break label$1
   }
   $804($1_1 | 0, $0_1 + 264 | 0 | 0);
  }
  label$2 : {
   if (!(HEAP32[($1_1 + 192 | 0) >> 2] | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAPU8[($1_1 + 204 | 0) >> 0] | 0) & 1 | 0) {
      break label$4
     }
     label$5 : {
      $4_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
      if (($4_1 | 0) != (HEAP32[($0_1 + 252 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      $5_1 = $4_1 ? $4_1 << 1 | 0 : 1;
      if (($4_1 | 0) >= ($5_1 | 0)) {
       break label$5
      }
      label$6 : {
       label$7 : {
        if ($5_1) {
         break label$7
        }
        $6_1 = 0;
        break label$6;
       }
       $6_1 = $79($5_1 << 2 | 0 | 0, 16 | 0) | 0;
       $4_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
      }
      label$8 : {
       if (($4_1 | 0) < (1 | 0)) {
        break label$8
       }
       $7_1 = 0;
       $8_1 = $4_1;
       label$9 : while (1) {
        HEAP32[($6_1 + $7_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 256 | 0) >> 2] | 0) + $7_1 | 0) >> 2] | 0;
        $7_1 = $7_1 + 4 | 0;
        $8_1 = $8_1 + -1 | 0;
        if ($8_1) {
         continue label$9
        }
        break label$9;
       };
      }
      label$10 : {
       $7_1 = HEAP32[($0_1 + 256 | 0) >> 2] | 0;
       if (!$7_1) {
        break label$10
       }
       label$11 : {
        if (!(HEAPU8[($0_1 + 260 | 0) >> 0] | 0)) {
         break label$11
        }
        $80($7_1 | 0);
        $4_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
       }
       HEAP32[($0_1 + 256 | 0) >> 2] = 0;
      }
      HEAP32[($0_1 + 256 | 0) >> 2] = $6_1;
      HEAP32[($0_1 + 252 | 0) >> 2] = $5_1;
      HEAP8[($0_1 + 260 | 0) >> 0] = 1;
     }
     HEAP32[($0_1 + 248 | 0) >> 2] = $4_1 + 1 | 0;
     HEAP32[((HEAP32[($0_1 + 256 | 0) >> 2] | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $1_1;
     break label$3;
    }
    $308($1_1 | 0, 2 | 0);
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1);
  }
 }
 
 function $947($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $6_1 = 0, $9_1 = Math_fround(0), $7_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $8_1 = 0, $3_1 = 0, $38_1 = Math_fround(0), $45_1 = Math_fround(0), $52_1 = Math_fround(0), $64_1 = Math_fround(0), $71_1 = Math_fround(0), $78_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $616($2_1 + 8 | 0 | 0, 23258 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 248 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $4_1 = 0;
   $5_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $6_1 = HEAP32[((HEAP32[($0_1 + 256 | 0) >> 2] | 0) + $4_1 | 0) >> 2] | 0;
     if (!$6_1) {
      break label$3
     }
     label$4 : {
      label$5 : {
       label$6 : {
        $7_1 = HEAP32[($6_1 + 220 | 0) >> 2] | 0;
        $8_1 = $7_1 + -2 | 0;
        if ($8_1 >>> 0 > 2 >>> 0) {
         break label$6
        }
        switch ($8_1 | 0) {
        case 1:
         break label$6;
        default:
         break label$5;
        };
       }
       label$7 : {
        $9_1 = Math_fround(HEAPF32[($6_1 + 372 | 0) >> 2]);
        $38_1 = Math_fround($9_1 * $9_1);
        $9_1 = Math_fround(HEAPF32[($6_1 + 376 | 0) >> 2]);
        $45_1 = Math_fround($38_1 + Math_fround($9_1 * $9_1));
        $9_1 = Math_fround(HEAPF32[($6_1 + 380 | 0) >> 2]);
        $52_1 = Math_fround($45_1 + Math_fround($9_1 * $9_1));
        $9_1 = Math_fround(HEAPF32[($6_1 + 532 | 0) >> 2]);
        if ($52_1 < Math_fround($9_1 * $9_1) ^ 1 | 0) {
         break label$7
        }
        $9_1 = Math_fround(HEAPF32[($6_1 + 388 | 0) >> 2]);
        $64_1 = Math_fround($9_1 * $9_1);
        $9_1 = Math_fround(HEAPF32[($6_1 + 392 | 0) >> 2]);
        $71_1 = Math_fround($64_1 + Math_fround($9_1 * $9_1));
        $9_1 = Math_fround(HEAPF32[($6_1 + 396 | 0) >> 2]);
        $78_1 = Math_fround($71_1 + Math_fround($9_1 * $9_1));
        $9_1 = Math_fround(HEAPF32[($6_1 + 536 | 0) >> 2]);
        if ($78_1 < Math_fround($9_1 * $9_1) ^ 1 | 0) {
         break label$7
        }
        HEAPF32[($6_1 + 224 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 224 | 0) >> 2]) + $1_1);
        break label$4;
       }
       HEAP32[($6_1 + 224 | 0) >> 2] = 0;
       $308($6_1 | 0, 0 | 0);
       $7_1 = HEAP32[($6_1 + 220 | 0) >> 2] | 0;
      }
      if (($7_1 | 0) == (4 | 0)) {
       break label$3
      }
     }
     label$8 : {
      if (HEAPU8[(0 + 2792 | 0) >> 0] | 0) {
       break label$8
      }
      $9_1 = Math_fround(HEAPF32[(0 + 3e3 | 0) >> 2]);
      if ($9_1 == Math_fround(0.0)) {
       break label$8
      }
      label$9 : {
       if (($7_1 & -2 | 0 | 0) == (2 | 0)) {
        break label$9
       }
       if (Math_fround(HEAPF32[($6_1 + 224 | 0) >> 2]) > $9_1 ^ 1 | 0) {
        break label$8
       }
      }
      label$10 : {
       if (!((HEAPU8[($6_1 + 204 | 0) >> 0] | 0) & 3 | 0)) {
        break label$10
       }
       $308($6_1 | 0, 2 | 0);
       break label$3;
      }
      label$11 : {
       if (($7_1 | 0) != (1 | 0)) {
        break label$11
       }
       $308($6_1 | 0, 3 | 0);
       $7_1 = HEAP32[($6_1 + 220 | 0) >> 2] | 0;
      }
      if (($7_1 | 0) != (2 | 0)) {
       break label$3
      }
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$0 = 0;
      HEAP32[($6_1 + 388 | 0) >> 2] = 0;
      HEAP32[($6_1 + 392 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$0 = 0;
      HEAP32[($6_1 + 372 | 0) >> 2] = 0;
      HEAP32[($6_1 + 376 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $6_1 + 396 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $6_1 + 380 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($6_1 + 304 | 0) >> 2] = (HEAP32[($6_1 + 304 | 0) >> 2] | 0) + 2 | 0;
      break label$3;
     }
     $308($6_1 | 0, 1 | 0);
    }
    $4_1 = $4_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < (HEAP32[($0_1 + 248 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $617($3_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $948($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 228 | 0) >> 2] | 0;
   if (($3_1 | 0) != (HEAP32[($0_1 + 232 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $4_1 = $3_1 ? $3_1 << 1 | 0 : 1;
   if (($3_1 | 0) >= ($4_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1) {
      break label$3
     }
     $5_1 = 0;
     break label$2;
    }
    $5_1 = $79($4_1 << 2 | 0 | 0, 16 | 0) | 0;
    $3_1 = HEAP32[($0_1 + 228 | 0) >> 2] | 0;
   }
   label$4 : {
    if (($3_1 | 0) < (1 | 0)) {
     break label$4
    }
    $6_1 = 0;
    $7_1 = $3_1;
    label$5 : while (1) {
     HEAP32[($5_1 + $6_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 236 | 0) >> 2] | 0) + $6_1 | 0) >> 2] | 0;
     $6_1 = $6_1 + 4 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue label$5
     }
     break label$5;
    };
   }
   label$6 : {
    $6_1 = HEAP32[($0_1 + 236 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$6
    }
    label$7 : {
     if (!(HEAPU8[($0_1 + 240 | 0) >> 0] | 0)) {
      break label$7
     }
     $80($6_1 | 0);
     $3_1 = HEAP32[($0_1 + 228 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 236 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 236 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 232 | 0) >> 2] = $4_1;
   HEAP8[($0_1 + 240 | 0) >> 0] = 1;
  }
  HEAP32[($0_1 + 228 | 0) >> 2] = $3_1 + 1 | 0;
  HEAP32[((HEAP32[($0_1 + 236 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = $1_1;
  label$8 : {
   if (!$2_1) {
    break label$8
   }
   $812(HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0, $1_1 | 0);
   $812(HEAP32[($1_1 + 32 | 0) >> 2] | 0 | 0, $1_1 | 0);
  }
 }
 
 function $949($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 228 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   $4_1 = HEAP32[($0_1 + 236 | 0) >> 2] | 0;
   $5_1 = $4_1;
   label$2 : {
    label$3 : while (1) {
     if ((HEAP32[$5_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$2
     }
     $5_1 = $5_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     if (($2_1 | 0) != ($3_1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   $3_1 = $2_1 + -1 | 0;
   $2_1 = $3_1 << 2 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[($4_1 + $2_1 | 0) >> 2] | 0;
   HEAP32[($0_1 + 228 | 0) >> 2] = $3_1;
   HEAP32[((HEAP32[($0_1 + 236 | 0) >> 2] | 0) + $2_1 | 0) >> 2] = $1_1;
  }
  $813(HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0, $1_1 | 0);
  $813(HEAP32[($1_1 + 32 | 0) >> 2] | 0 | 0, $1_1 | 0);
 }
 
 function $950($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 296 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 300 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $3_1 = $2_1 ? $2_1 << 1 | 0 : 1;
   if (($2_1 | 0) >= ($3_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($3_1) {
      break label$3
     }
     $4_1 = 0;
     break label$2;
    }
    $4_1 = $79($3_1 << 2 | 0 | 0, 16 | 0) | 0;
    $2_1 = HEAP32[($0_1 + 296 | 0) >> 2] | 0;
   }
   label$4 : {
    if (($2_1 | 0) < (1 | 0)) {
     break label$4
    }
    $5_1 = 0;
    $6_1 = $2_1;
    label$5 : while (1) {
     HEAP32[($4_1 + $5_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 304 | 0) >> 2] | 0) + $5_1 | 0) >> 2] | 0;
     $5_1 = $5_1 + 4 | 0;
     $6_1 = $6_1 + -1 | 0;
     if ($6_1) {
      continue label$5
     }
     break label$5;
    };
   }
   label$6 : {
    $5_1 = HEAP32[($0_1 + 304 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$6
    }
    label$7 : {
     if (!(HEAPU8[($0_1 + 308 | 0) >> 0] | 0)) {
      break label$7
     }
     $80($5_1 | 0);
     $2_1 = HEAP32[($0_1 + 296 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 304 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 304 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 300 | 0) >> 2] = $3_1;
   HEAP8[($0_1 + 308 | 0) >> 0] = 1;
  }
  HEAP32[($0_1 + 296 | 0) >> 2] = $2_1 + 1 | 0;
  HEAP32[((HEAP32[($0_1 + 304 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $1_1;
 }
 
 function $951($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 296 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   $4_1 = HEAP32[($0_1 + 304 | 0) >> 2] | 0;
   $5_1 = $4_1;
   label$2 : {
    label$3 : while (1) {
     if ((HEAP32[$5_1 >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$2
     }
     $5_1 = $5_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     if (($2_1 | 0) != ($3_1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   $3_1 = $2_1 + -1 | 0;
   $2_1 = $3_1 << 2 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[($4_1 + $2_1 | 0) >> 2] | 0;
   HEAP32[($0_1 + 296 | 0) >> 2] = $3_1;
   HEAP32[((HEAP32[($0_1 + 304 | 0) >> 2] | 0) + $2_1 | 0) >> 2] = $1_1;
  }
 }
 
 function $952($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $953($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $954($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $955($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $956($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $8_1 = 0, $7_1 = 0, $5_1 = 0, $2_1 = 0, $4_1 = 0, $6_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $616($2_1 + 8 | 0 | 0, 23280 | 0) | 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 196 | 0) >> 2] | 0;
   $5_1 = HEAP32[($0_1 + 228 | 0) >> 2] | 0;
   if (($4_1 | 0) >= ($5_1 | 0)) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($0_1 + 200 | 0) >> 2] | 0 | 0) >= ($5_1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($5_1) {
       break label$4
      }
      $6_1 = 0;
      $7_1 = $4_1;
      break label$3;
     }
     $6_1 = $79($5_1 << 2 | 0 | 0, 16 | 0) | 0;
     $7_1 = HEAP32[($0_1 + 196 | 0) >> 2] | 0;
    }
    label$5 : {
     if (($7_1 | 0) < (1 | 0)) {
      break label$5
     }
     $8_1 = 0;
     label$6 : while (1) {
      HEAP32[($6_1 + $8_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 204 | 0) >> 2] | 0) + $8_1 | 0) >> 2] | 0;
      $8_1 = $8_1 + 4 | 0;
      $7_1 = $7_1 + -1 | 0;
      if ($7_1) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     $8_1 = HEAP32[($0_1 + 204 | 0) >> 2] | 0;
     if (!$8_1) {
      break label$7
     }
     label$8 : {
      if (!(HEAPU8[($0_1 + 208 | 0) >> 0] | 0)) {
       break label$8
      }
      $80($8_1 | 0);
     }
     HEAP32[($0_1 + 204 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 204 | 0) >> 2] = $6_1;
    HEAP32[($0_1 + 200 | 0) >> 2] = $5_1;
    HEAP8[($0_1 + 208 | 0) >> 0] = 1;
   }
   $8_1 = $4_1 << 2 | 0;
   $7_1 = $5_1 - $4_1 | 0;
   label$9 : while (1) {
    HEAP32[((HEAP32[($0_1 + 204 | 0) >> 2] | 0) + $8_1 | 0) >> 2] = 0;
    $8_1 = $8_1 + 4 | 0;
    $7_1 = $7_1 + -1 | 0;
    if ($7_1) {
     continue label$9
    }
    break label$9;
   };
  }
  HEAP32[($0_1 + 196 | 0) >> 2] = $5_1;
  label$10 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 104 | 0) >> 2] | 0]($0_1) | 0 | 0) < (1 | 0)) {
    break label$10
   }
   $8_1 = 0;
   $7_1 = 0;
   label$11 : while (1) {
    HEAP32[((HEAP32[($0_1 + 204 | 0) >> 2] | 0) + $8_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 236 | 0) >> 2] | 0) + $8_1 | 0) >> 2] | 0;
    $8_1 = $8_1 + 4 | 0;
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) < (FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 104 | 0) >> 2] | 0]($0_1) | 0 | 0)) {
     continue label$11
    }
    break label$11;
   };
  }
  label$12 : {
   $8_1 = HEAP32[($0_1 + 196 | 0) >> 2] | 0;
   if (($8_1 | 0) < (2 | 0)) {
    break label$12
   }
   $957($0_1 + 192 | 0 | 0, $2_1 | 0, 0 | 0, $8_1 + -1 | 0 | 0);
  }
  label$13 : {
   label$14 : {
    if (FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 104 | 0) >> 2] | 0]($0_1) | 0) {
     break label$14
    }
    $8_1 = 0;
    break label$13;
   }
   $8_1 = HEAP32[($0_1 + 204 | 0) >> 2] | 0;
  }
  $958(HEAP32[($0_1 + 212 | 0) >> 2] | 0 | 0, $1_1 | 0, $8_1 | 0, HEAP32[($0_1 + 196 | 0) >> 2] | 0 | 0, FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0 | 0);
  $8_1 = HEAP32[($0_1 + 216 | 0) >> 2] | 0;
  $7_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
  (((wasm2js_i32$1 = $8_1, wasm2js_i32$2 = HEAP32[($0_1 + 8 | 0) >> 2] | 0), wasm2js_i32$3 = FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($7_1) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$8_1 >> 2] | 0) + 8 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
  $923(HEAP32[($0_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $0_1 | 0, HEAP32[($0_1 + 212 | 0) >> 2] | 0 | 0);
  $959(HEAP32[($0_1 + 212 | 0) >> 2] | 0 | 0);
  $8_1 = HEAP32[($0_1 + 216 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($8_1, $1_1, HEAP32[($0_1 + 72 | 0) >> 2] | 0);
  $617($3_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $957($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $12_1 = 0, $7_1 = 0, $13_1 = 0, $11_1 = 0, $10_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $5_1 = 0, $9_1 = 0;
  label$1 : while (1) {
   $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   $5_1 = $2_1;
   $6_1 = HEAP32[($4_1 + ((($2_1 + $3_1 | 0 | 0) / (2 | 0) | 0) << 2 | 0) | 0) >> 2] | 0;
   $7_1 = $3_1;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $8_1 = HEAP32[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
      $9_1 = ($8_1 | 0) < (0 | 0);
      if ($9_1) {
       break label$4
      }
      $10_1 = $2_1 + -1 | 0;
      $11_1 = ($4_1 + ($2_1 << 2 | 0) | 0) + -4 | 0;
      label$5 : while (1) {
       label$6 : {
        $11_1 = $11_1 + 4 | 0;
        $12_1 = HEAP32[$11_1 >> 2] | 0;
        $2_1 = HEAP32[((HEAP32[($12_1 + 28 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
        if (($2_1 | 0) > (-1 | 0)) {
         break label$6
        }
        $2_1 = HEAP32[((HEAP32[($12_1 + 32 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
       }
       $10_1 = $10_1 + 1 | 0;
       if (($2_1 | 0) < ($8_1 | 0)) {
        continue label$5
       }
       break label$3;
      };
     }
     $10_1 = $2_1 + -1 | 0;
     $11_1 = ($4_1 + ($2_1 << 2 | 0) | 0) + -4 | 0;
     $13_1 = HEAP32[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
     label$7 : while (1) {
      label$8 : {
       $11_1 = $11_1 + 4 | 0;
       $12_1 = HEAP32[$11_1 >> 2] | 0;
       $2_1 = HEAP32[((HEAP32[($12_1 + 28 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
       if (($2_1 | 0) > (-1 | 0)) {
        break label$8
       }
       $2_1 = HEAP32[((HEAP32[($12_1 + 32 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
      }
      $10_1 = $10_1 + 1 | 0;
      if (($2_1 | 0) < ($13_1 | 0)) {
       continue label$7
      }
      break label$7;
     };
    }
    label$9 : {
     label$10 : {
      if ($9_1) {
       break label$10
      }
      $2_1 = $7_1 + 1 | 0;
      $12_1 = $4_1 + ($7_1 << 2 | 0) | 0;
      label$11 : while (1) {
       label$12 : {
        $7_1 = HEAP32[$12_1 >> 2] | 0;
        $13_1 = HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
        if (($13_1 | 0) > (-1 | 0)) {
         break label$12
        }
        $13_1 = HEAP32[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
       }
       $12_1 = $12_1 + -4 | 0;
       $2_1 = $2_1 + -1 | 0;
       if (($8_1 | 0) < ($13_1 | 0)) {
        continue label$11
       }
       break label$11;
      };
      $12_1 = $12_1 + 4 | 0;
      break label$9;
     }
     $2_1 = $7_1 + 1 | 0;
     $12_1 = $4_1 + ($7_1 << 2 | 0) | 0;
     $7_1 = HEAP32[((HEAP32[($6_1 + 32 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
     label$13 : while (1) {
      label$14 : {
       $8_1 = HEAP32[$12_1 >> 2] | 0;
       $13_1 = HEAP32[((HEAP32[($8_1 + 28 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
       if (($13_1 | 0) > (-1 | 0)) {
        break label$14
       }
       $13_1 = HEAP32[((HEAP32[($8_1 + 32 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
      }
      $12_1 = $12_1 + -4 | 0;
      $2_1 = $2_1 + -1 | 0;
      if (($7_1 | 0) < ($13_1 | 0)) {
       continue label$13
      }
      break label$13;
     };
     $12_1 = $12_1 + 4 | 0;
    }
    label$15 : {
     label$16 : {
      if (($10_1 | 0) <= ($2_1 | 0)) {
       break label$16
      }
      $7_1 = $2_1;
      $2_1 = $10_1;
      break label$15;
     }
     $13_1 = HEAP32[$11_1 >> 2] | 0;
     HEAP32[$11_1 >> 2] = HEAP32[$12_1 >> 2] | 0;
     HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] = $13_1;
     $7_1 = $2_1 + -1 | 0;
     $2_1 = $10_1 + 1 | 0;
    }
    label$17 : {
     if (($2_1 | 0) > ($7_1 | 0)) {
      break label$17
     }
     $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
     continue label$2;
    }
    break label$2;
   };
   label$18 : {
    if (($7_1 | 0) <= ($5_1 | 0)) {
     break label$18
    }
    $957($0_1 | 0, $1_1 | 0, $5_1 | 0, $7_1 | 0);
   }
   if (($2_1 | 0) < ($3_1 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function $958($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (($1_1 | 0) > (-1 | 0)) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    label$3 : {
     $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$3
     }
     label$4 : {
      if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
       break label$4
      }
      $80($2_1 | 0);
     }
     HEAP32[($0_1 + 40 | 0) >> 2] = 0;
    }
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 36 | 0) >> 2] = 0;
    HEAP32[($0_1 + 40 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($0_1 + 44 | 0) >> 0] = 1;
   }
   $2_1 = $1_1 << 2 | 0;
   label$5 : while (1) {
    HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + $2_1 | 0) >> 2] = 0;
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $1_1 + 1 | 0;
    $4_1 = $3_1 >>> 0 >= $1_1 >>> 0;
    $1_1 = $3_1;
    if ($4_1) {
     continue label$5
    }
    break label$5;
   };
  }
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  label$6 : {
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (($1_1 | 0) > (-1 | 0)) {
    break label$6
   }
   label$7 : {
    if ((HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$7
    }
    label$8 : {
     $2_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$8
     }
     label$9 : {
      if (!(HEAPU8[($0_1 + 64 | 0) >> 0] | 0)) {
       break label$9
      }
      $80($2_1 | 0);
     }
     HEAP32[($0_1 + 60 | 0) >> 2] = 0;
    }
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 56 | 0) >> 2] = 0;
    HEAP32[($0_1 + 60 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($0_1 + 64 | 0) >> 0] = 1;
   }
   $2_1 = $1_1 << 2 | 0;
   label$10 : while (1) {
    HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $2_1 | 0) >> 2] = 0;
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $1_1 + 1 | 0;
    $4_1 = $3_1 >>> 0 >= $1_1 >>> 0;
    $1_1 = $3_1;
    if ($4_1) {
     continue label$10
    }
    break label$10;
   };
  }
  HEAP32[($0_1 + 52 | 0) >> 2] = 0;
  label$11 : {
   $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   if (($1_1 | 0) > (-1 | 0)) {
    break label$11
   }
   label$12 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$12
    }
    label$13 : {
     $2_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$13
     }
     label$14 : {
      if (!(HEAPU8[($0_1 + 84 | 0) >> 0] | 0)) {
       break label$14
      }
      $80($2_1 | 0);
     }
     HEAP32[($0_1 + 80 | 0) >> 2] = 0;
    }
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 76 | 0) >> 2] = 0;
    HEAP32[($0_1 + 80 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($0_1 + 84 | 0) >> 0] = 1;
   }
   $2_1 = $1_1 << 2 | 0;
   label$15 : while (1) {
    HEAP32[((HEAP32[($0_1 + 80 | 0) >> 2] | 0) + $2_1 | 0) >> 2] = 0;
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $1_1 + 1 | 0;
    $4_1 = $3_1 >>> 0 >= $1_1 >>> 0;
    $1_1 = $3_1;
    if ($4_1) {
     continue label$15
    }
    break label$15;
   };
  }
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
 }
 
 function $959($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $1_1 = 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (!$3_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  }
  label$2 : {
   $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (!$4_1) {
    break label$2
   }
   $1_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
  }
  label$3 : {
   label$4 : {
    $5_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    if ($5_1) {
     break label$4
    }
    $6_1 = 0;
    break label$3;
   }
   $6_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
  }
  $7_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$7_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($7_1, $2_1, $3_1, $1_1, $4_1, $6_1, $5_1, HEAP32[($0_1 + 4 | 0) >> 2] | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0));
  label$5 : {
   $1_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
   if (($1_1 | 0) > (-1 | 0)) {
    break label$5
   }
   label$6 : {
    if ((HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$6
    }
    label$7 : {
     $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$7
     }
     label$8 : {
      if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
       break label$8
      }
      $80($2_1 | 0);
     }
     HEAP32[($0_1 + 40 | 0) >> 2] = 0;
    }
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 36 | 0) >> 2] = 0;
    HEAP32[($0_1 + 40 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($0_1 + 44 | 0) >> 0] = 1;
   }
   $2_1 = $1_1 << 2 | 0;
   label$9 : while (1) {
    HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + $2_1 | 0) >> 2] = 0;
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $1_1 + 1 | 0;
    $4_1 = $3_1 >>> 0 >= $1_1 >>> 0;
    $1_1 = $3_1;
    if ($4_1) {
     continue label$9
    }
    break label$9;
   };
  }
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  label$10 : {
   $1_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
   if (($1_1 | 0) > (-1 | 0)) {
    break label$10
   }
   label$11 : {
    if ((HEAP32[($0_1 + 56 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$11
    }
    label$12 : {
     $2_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$12
     }
     label$13 : {
      if (!(HEAPU8[($0_1 + 64 | 0) >> 0] | 0)) {
       break label$13
      }
      $80($2_1 | 0);
     }
     HEAP32[($0_1 + 60 | 0) >> 2] = 0;
    }
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 56 | 0) >> 2] = 0;
    HEAP32[($0_1 + 60 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($0_1 + 64 | 0) >> 0] = 1;
   }
   $2_1 = $1_1 << 2 | 0;
   label$14 : while (1) {
    HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $2_1 | 0) >> 2] = 0;
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $1_1 + 1 | 0;
    $4_1 = $3_1 >>> 0 >= $1_1 >>> 0;
    $1_1 = $3_1;
    if ($4_1) {
     continue label$14
    }
    break label$14;
   };
  }
  HEAP32[($0_1 + 52 | 0) >> 2] = 0;
  label$15 : {
   $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   if (($1_1 | 0) > (-1 | 0)) {
    break label$15
   }
   label$16 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$16
    }
    label$17 : {
     $2_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$17
     }
     label$18 : {
      if (!(HEAPU8[($0_1 + 84 | 0) >> 0] | 0)) {
       break label$18
      }
      $80($2_1 | 0);
     }
     HEAP32[($0_1 + 80 | 0) >> 2] = 0;
    }
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 76 | 0) >> 2] = 0;
    HEAP32[($0_1 + 80 | 0) >> 2] = i64toi32_i32$0;
    HEAP8[($0_1 + 84 | 0) >> 0] = 1;
   }
   $2_1 = $1_1 << 2 | 0;
   label$19 : while (1) {
    HEAP32[((HEAP32[($0_1 + 80 | 0) >> 2] | 0) + $2_1 | 0) >> 2] = 0;
    $2_1 = $2_1 + 4 | 0;
    $3_1 = $1_1 + 1 | 0;
    $4_1 = $3_1 >>> 0 >= $1_1 >>> 0;
    $1_1 = $3_1;
    if ($4_1) {
     continue label$19
    }
    break label$19;
   };
  }
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
 }
 
 function $960($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $6_1 = 0, $9_1 = 0, $4_1 = 0, $1_1 = 0, $5_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $616($1_1 + 8 | 0 | 0, 23297 | 0) | 0;
  $3_1 = HEAP32[($0_1 + 220 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($3_1, $0_1, HEAP32[($0_1 + 24 | 0) >> 2] | 0);
  label$1 : {
   $4_1 = HEAP32[($0_1 + 324 | 0) >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 332 | 0) >> 2] | 0;
   $6_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $3_1 = HEAP32[($5_1 + ($6_1 << 2 | 0) | 0) >> 2] | 0;
     $7_1 = HEAP32[($3_1 + 772 | 0) >> 2] | 0;
     if (!$7_1) {
      break label$3
     }
     $3_1 = HEAP32[($3_1 + 776 | 0) >> 2] | 0;
     if (!$3_1) {
      break label$3
     }
     if ((HEAP32[($7_1 + 204 | 0) >> 2] | 0) & 3 | 0) {
      break label$3
     }
     if ((HEAPU8[($3_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
      break label$3
     }
     $8_1 = HEAP32[($3_1 + 208 | 0) >> 2] | 0;
     label$4 : {
      $3_1 = HEAP32[((HEAP32[($0_1 + 220 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      $7_1 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
      $9_1 = $3_1 + ($7_1 << 3 | 0) | 0;
      $10_1 = HEAP32[$9_1 >> 2] | 0;
      if (($10_1 | 0) == ($7_1 | 0)) {
       break label$4
      }
      label$5 : while (1) {
       $7_1 = $3_1 + ($10_1 << 3 | 0) | 0;
       HEAP32[$9_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
       $7_1 = HEAP32[$7_1 >> 2] | 0;
       $9_1 = $3_1 + ($7_1 << 3 | 0) | 0;
       $10_1 = HEAP32[$9_1 >> 2] | 0;
       if (($7_1 | 0) != ($10_1 | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     label$6 : {
      $9_1 = $3_1 + ($8_1 << 3 | 0) | 0;
      $10_1 = HEAP32[$9_1 >> 2] | 0;
      if (($10_1 | 0) == ($8_1 | 0)) {
       break label$6
      }
      label$7 : while (1) {
       $8_1 = $3_1 + ($10_1 << 3 | 0) | 0;
       HEAP32[$9_1 >> 2] = HEAP32[$8_1 >> 2] | 0;
       $8_1 = HEAP32[$8_1 >> 2] | 0;
       $9_1 = $3_1 + ($8_1 << 3 | 0) | 0;
       $10_1 = HEAP32[$9_1 >> 2] | 0;
       if (($8_1 | 0) != ($10_1 | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     if (($7_1 | 0) == ($8_1 | 0)) {
      break label$3
     }
     $7_1 = $3_1 + ($7_1 << 3 | 0) | 0;
     HEAP32[$7_1 >> 2] = $8_1;
     $3_1 = $3_1 + ($8_1 << 3 | 0) | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + (HEAP32[($7_1 + 4 | 0) >> 2] | 0) | 0;
    }
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) < ($4_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$8 : {
   $4_1 = HEAP32[($0_1 + 228 | 0) >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$8
   }
   $5_1 = HEAP32[($0_1 + 236 | 0) >> 2] | 0;
   $9_1 = 0;
   label$9 : while (1) {
    label$10 : {
     $3_1 = HEAP32[($5_1 + ($9_1 << 2 | 0) | 0) >> 2] | 0;
     if (!(HEAPU8[($3_1 + 20 | 0) >> 0] | 0)) {
      break label$10
     }
     $7_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
     if ((HEAPU8[($7_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
      break label$10
     }
     $3_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
     if ((HEAPU8[($3_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
      break label$10
     }
     $8_1 = HEAP32[($3_1 + 208 | 0) >> 2] | 0;
     label$11 : {
      $3_1 = HEAP32[((HEAP32[($0_1 + 220 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
      $7_1 = HEAP32[($7_1 + 208 | 0) >> 2] | 0;
      $10_1 = $3_1 + ($7_1 << 3 | 0) | 0;
      $6_1 = HEAP32[$10_1 >> 2] | 0;
      if (($6_1 | 0) == ($7_1 | 0)) {
       break label$11
      }
      label$12 : while (1) {
       $7_1 = $3_1 + ($6_1 << 3 | 0) | 0;
       HEAP32[$10_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
       $7_1 = HEAP32[$7_1 >> 2] | 0;
       $10_1 = $3_1 + ($7_1 << 3 | 0) | 0;
       $6_1 = HEAP32[$10_1 >> 2] | 0;
       if (($7_1 | 0) != ($6_1 | 0)) {
        continue label$12
       }
       break label$12;
      };
     }
     label$13 : {
      $10_1 = $3_1 + ($8_1 << 3 | 0) | 0;
      $6_1 = HEAP32[$10_1 >> 2] | 0;
      if (($6_1 | 0) == ($8_1 | 0)) {
       break label$13
      }
      label$14 : while (1) {
       $8_1 = $3_1 + ($6_1 << 3 | 0) | 0;
       HEAP32[$10_1 >> 2] = HEAP32[$8_1 >> 2] | 0;
       $8_1 = HEAP32[$8_1 >> 2] | 0;
       $10_1 = $3_1 + ($8_1 << 3 | 0) | 0;
       $6_1 = HEAP32[$10_1 >> 2] | 0;
       if (($8_1 | 0) != ($6_1 | 0)) {
        continue label$14
       }
       break label$14;
      };
     }
     if (($7_1 | 0) == ($8_1 | 0)) {
      break label$10
     }
     $7_1 = $3_1 + ($7_1 << 3 | 0) | 0;
     HEAP32[$7_1 >> 2] = $8_1;
     $3_1 = $3_1 + ($8_1 << 3 | 0) | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + (HEAP32[($7_1 + 4 | 0) >> 2] | 0) | 0;
    }
    $9_1 = $9_1 + 1 | 0;
    if (($9_1 | 0) != ($4_1 | 0)) {
     continue label$9
    }
    break label$9;
   };
  }
  $3_1 = HEAP32[($0_1 + 220 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($3_1, $0_1);
  $617($2_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $961($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $20_1 = 0, $4_1 = 0, $19_1 = 0, $21_1 = Math_fround(0), $23_1 = Math_fround(0), $28_1 = 0, $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $26_1 = 0, $27_1 = 0, $29_1 = 0, $40_1 = Math_fround(0), $5_1 = 0, $18_1 = 0, $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37_1 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $42_1 = 0, $10_1 = 0, $22_1 = 0, $7_1 = 0, $9_1 = 0, $11_1 = 0, $12_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $25_1 = 0, $41_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = Math_fround(0), $46_1 = Math_fround(0), $47_1 = Math_fround(0), $6_1 = 0, $8_1 = 0, $13_1 = 0, $130_1 = Math_fround(0), $140_1 = Math_fround(0), $24_1 = 0, $171_1 = 0, $177_1 = 0, $180_1 = 0, $186_1 = 0, $224_1 = 0, $232_1 = 0, $235_1 = 0, $241_1 = 0, $244_1 = 0, $247_1 = 0, $253_1 = 0, $257_1 = 0, $260_1 = 0, $30_1 = 0, $30$hi = 0, $31_1 = 0, $31$hi = 0, $271_1 = 0, $275_1 = 0, $283_1 = 0, $287_1 = 0, $43_1 = Math_fround(0), $48_1 = Math_fround(0), $49_1 = Math_fround(0), $478_1 = 0, $483_1 = 0, $589_1 = 0, $593_1 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $4_1 = global$0 - 496 | 0;
  global$0 = $4_1;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = $4_1 + 124 | 0;
   $6_1 = $4_1 + 92 | 0;
   $7_1 = $4_1 + 72 | 0;
   $8_1 = ($4_1 + 320 | 0) + 48 | 0;
   $9_1 = ($4_1 + 200 | 0) + 48 | 0;
   $10_1 = ($4_1 + 200 | 0) + 32 | 0;
   $11_1 = ($4_1 + 432 | 0) + 32 | 0;
   $12_1 = ($4_1 + 200 | 0) + 16 | 0;
   $13_1 = ($4_1 + 432 | 0) + 16 | 0;
   $14_1 = ($4_1 + 264 | 0) + 28 | 0;
   $15_1 = ($4_1 + 320 | 0) + 32 | 0;
   $16_1 = ($4_1 + 320 | 0) + 16 | 0;
   $17_1 = ($4_1 + 432 | 0) + 48 | 0;
   $18_1 = 0;
   label$2 : while (1) {
    $19_1 = HEAP32[($1_1 + ($18_1 << 2 | 0) | 0) >> 2] | 0;
    HEAP32[($19_1 + 268 | 0) >> 2] = 1065353216;
    label$3 : {
     label$4 : {
      $20_1 = (HEAP32[($19_1 + 220 | 0) >> 2] | 0) + -2 | 0;
      if ($20_1 >>> 0 > 3 >>> 0) {
       break label$4
      }
      switch ($20_1 | 0) {
      case 1:
      case 2:
       break label$4;
      default:
       break label$3;
      };
     }
     if ((HEAPU8[($19_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
      break label$3
     }
     $800($19_1 | 0, Math_fround($3_1), $4_1 + 432 | 0 | 0);
     if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
      break label$3
     }
     $21_1 = Math_fround(HEAPF32[($19_1 + 276 | 0) >> 2]);
     $21_1 = Math_fround($21_1 * $21_1);
     if ($21_1 == Math_fround(0.0)) {
      break label$3
     }
     $22_1 = $19_1 + 52 | 0;
     $23_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 480 | 0) >> 2]) - Math_fround(HEAPF32[$22_1 >> 2]));
     $130_1 = Math_fround($23_1 * $23_1);
     $23_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 484 | 0) >> 2]) - Math_fround(HEAPF32[($19_1 + 56 | 0) >> 2]));
     $140_1 = Math_fround($130_1 + Math_fround($23_1 * $23_1));
     $23_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 488 | 0) >> 2]) - Math_fround(HEAPF32[($19_1 + 60 | 0) >> 2]));
     if ($21_1 < Math_fround($140_1 + Math_fround($23_1 * $23_1)) ^ 1 | 0) {
      break label$3
     }
     $24_1 = $616($4_1 + 424 | 0 | 0, 23324 | 0) | 0;
     label$5 : {
      if ((HEAP32[((HEAP32[($19_1 + 192 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) > (19 | 0)) {
       break label$5
      }
      HEAP32[(0 + 2808 | 0) >> 2] = (HEAP32[(0 + 2808 | 0) >> 2] | 0) + 1 | 0;
      $20_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
      $20_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$20_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($20_1) | 0;
      i64toi32_i32$2 = $22_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $171_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $16_1;
      HEAP32[i64toi32_i32$0 >> 2] = $171_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $25_1 = i64toi32_i32$2 + 8 | 0;
      i64toi32_i32$2 = $25_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $177_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $16_1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $177_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $17_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $180_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $15_1;
      HEAP32[i64toi32_i32$0 >> 2] = $180_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $26_1 = i64toi32_i32$2 + 8 | 0;
      i64toi32_i32$2 = $26_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $186_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $15_1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $186_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($4_1 + 332 | 0) >> 2] = -1;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$0 = 1;
      HEAP32[(i64toi32_i32$1 + 324 | 0) >> 2] = 1065353216;
      HEAP32[(i64toi32_i32$1 + 328 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[(i64toi32_i32$1 + 320 | 0) >> 2] = 23736;
      HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 408 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 416 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      HEAP32[(i64toi32_i32$1 + 412 | 0) >> 2] = $20_1;
      HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] = $19_1;
      $20_1 = HEAP32[($19_1 + 272 | 0) >> 2] | 0;
      $145(i64toi32_i32$1 + 264 | 0 | 0) | 0;
      i64toi32_i32$1 = $14_1;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($14_1 + 16 | 0) >> 2] = 0;
      HEAP32[($4_1 + 288 | 0) >> 2] = 1065353216;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$0 = 1065353216;
      HEAP32[(i64toi32_i32$1 + 280 | 0) >> 2] = 1065353216;
      HEAP32[(i64toi32_i32$1 + 284 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[(i64toi32_i32$1 + 268 | 0) >> 2] = 8;
      HEAP32[(i64toi32_i32$1 + 264 | 0) >> 2] = 9852;
      HEAP32[(i64toi32_i32$1 + 316 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 312 | 0) >> 2] = $20_1;
      HEAP32[(i64toi32_i32$1 + 296 | 0) >> 2] = $20_1;
      HEAP32[(i64toi32_i32$1 + 408 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($19_1 + 188 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      $224_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $4_1;
      HEAP32[(i64toi32_i32$0 + 328 | 0) >> 2] = $224_1;
      HEAP32[(i64toi32_i32$0 + 332 | 0) >> 2] = i64toi32_i32$1;
      $27_1 = (i64toi32_i32$0 + 200 | 0) + 8 | 0;
      i64toi32_i32$2 = (i64toi32_i32$0 + 432 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $232_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $27_1;
      HEAP32[i64toi32_i32$1 >> 2] = $232_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $17_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $235_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $9_1;
      HEAP32[i64toi32_i32$0 >> 2] = $235_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $28_1 = $10_1 + 8 | 0;
      i64toi32_i32$2 = $11_1 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $241_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $28_1;
      HEAP32[i64toi32_i32$1 >> 2] = $241_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $11_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $244_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $10_1;
      HEAP32[i64toi32_i32$0 >> 2] = $244_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $13_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $247_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $12_1;
      HEAP32[i64toi32_i32$1 >> 2] = $247_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $29_1 = i64toi32_i32$1 + 8 | 0;
      i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $253_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $29_1;
      HEAP32[i64toi32_i32$0 >> 2] = $253_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $26_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $257_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $9_1 + 8 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $257_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$0 = HEAP32[($4_1 + 432 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($4_1 + 436 | 0) >> 2] | 0;
      $260_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $4_1;
      HEAP32[(i64toi32_i32$0 + 200 | 0) >> 2] = $260_1;
      HEAP32[(i64toi32_i32$0 + 204 | 0) >> 2] = i64toi32_i32$1;
      $20_1 = $19_1 + 4 | 0;
      i64toi32_i32$2 = $20_1 + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $30_1 = i64toi32_i32$1;
      $30$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $20_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $31_1 = i64toi32_i32$0;
      $31$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $19_1 + 20 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $271_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $12_1;
      HEAP32[i64toi32_i32$1 >> 2] = $271_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $19_1 + 28 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $275_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $29_1;
      HEAP32[i64toi32_i32$0 >> 2] = $275_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = $30$hi;
      i64toi32_i32$0 = $27_1;
      HEAP32[i64toi32_i32$0 >> 2] = $30_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$1 = $31$hi;
      i64toi32_i32$0 = $4_1;
      HEAP32[(i64toi32_i32$0 + 200 | 0) >> 2] = $31_1;
      HEAP32[(i64toi32_i32$0 + 204 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $19_1 + 36 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $283_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $10_1;
      HEAP32[i64toi32_i32$1 >> 2] = $283_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $19_1 + 44 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $287_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $28_1;
      HEAP32[i64toi32_i32$0 >> 2] = $287_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $872($0_1 | 0, $4_1 + 264 | 0 | 0, $20_1 | 0, $4_1 + 200 | 0 | 0, $4_1 + 320 | 0 | 0, Math_fround(Math_fround(0.0)));
      label$6 : {
       $21_1 = Math_fround(HEAPF32[($4_1 + 324 | 0) >> 2]);
       if ($21_1 < Math_fround(1.0) ^ 1 | 0) {
        break label$6
       }
       $23_1 = Math_fround(HEAPF32[($19_1 + 60 | 0) >> 2]);
       $32_1 = Math_fround(HEAPF32[($19_1 + 56 | 0) >> 2]);
       $33_1 = Math_fround(HEAPF32[($19_1 + 52 | 0) >> 2]);
       $34_1 = Math_fround(HEAPF32[($4_1 + 376 | 0) >> 2]);
       $35_1 = Math_fround(HEAPF32[($4_1 + 488 | 0) >> 2]);
       $36_1 = Math_fround(HEAPF32[($4_1 + 372 | 0) >> 2]);
       $37_1 = Math_fround(HEAPF32[($4_1 + 484 | 0) >> 2]);
       $38_1 = Math_fround(HEAPF32[($4_1 + 368 | 0) >> 2]);
       $39_1 = Math_fround(HEAPF32[($4_1 + 480 | 0) >> 2]);
       $20_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
       $29_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$20_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($20_1, $19_1, HEAP32[($4_1 + 400 | 0) >> 2] | 0) | 0;
       $40_1 = Math_fround($21_1 * Math_fround($37_1 - $32_1));
       $32_1 = Math_fround($21_1 * Math_fround($39_1 - $33_1));
       $41_1 = Math_fround($21_1 * Math_fround($35_1 - $23_1));
       $33_1 = Math_fround(Math_fround(Math_fround(-Math_fround($36_1 * $40_1)) - Math_fround($38_1 * $32_1)) - Math_fround($34_1 * $41_1));
       label$7 : {
        $28_1 = HEAP32[($0_1 + 324 | 0) >> 2] | 0;
        if (($28_1 | 0) != (HEAP32[($0_1 + 328 | 0) >> 2] | 0 | 0)) {
         break label$7
        }
        $42_1 = $28_1 ? $28_1 << 1 | 0 : 1;
        if (($28_1 | 0) >= ($42_1 | 0)) {
         break label$7
        }
        label$8 : {
         label$9 : {
          if ($42_1) {
           break label$9
          }
          $27_1 = 0;
          break label$8;
         }
         $27_1 = $79($42_1 << 2 | 0 | 0, 16 | 0) | 0;
         $28_1 = HEAP32[($0_1 + 324 | 0) >> 2] | 0;
        }
        label$10 : {
         if (($28_1 | 0) < (1 | 0)) {
          break label$10
         }
         $20_1 = 0;
         $26_1 = $28_1;
         label$11 : while (1) {
          HEAP32[($27_1 + $20_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 332 | 0) >> 2] | 0) + $20_1 | 0) >> 2] | 0;
          $20_1 = $20_1 + 4 | 0;
          $26_1 = $26_1 + -1 | 0;
          if ($26_1) {
           continue label$11
          }
          break label$11;
         };
        }
        label$12 : {
         $20_1 = HEAP32[($0_1 + 332 | 0) >> 2] | 0;
         if (!$20_1) {
          break label$12
         }
         label$13 : {
          if (!(HEAPU8[($0_1 + 336 | 0) >> 0] | 0)) {
           break label$13
          }
          $80($20_1 | 0);
          $28_1 = HEAP32[($0_1 + 324 | 0) >> 2] | 0;
         }
         HEAP32[($0_1 + 332 | 0) >> 2] = 0;
        }
        HEAP32[($0_1 + 332 | 0) >> 2] = $27_1;
        HEAP8[($0_1 + 336 | 0) >> 0] = 1;
        HEAP32[($0_1 + 328 | 0) >> 2] = $42_1;
       }
       HEAP32[((HEAP32[($0_1 + 332 | 0) >> 2] | 0) + ($28_1 << 2 | 0) | 0) >> 2] = $29_1;
       HEAP32[($0_1 + 324 | 0) >> 2] = $28_1 + 1 | 0;
       $20_1 = HEAP32[($4_1 + 400 | 0) >> 2] | 0;
       $35_1 = Math_fround(HEAPF32[($20_1 + 20 | 0) >> 2]);
       $36_1 = Math_fround(HEAPF32[($20_1 + 36 | 0) >> 2]);
       $37_1 = Math_fround(HEAPF32[($20_1 + 40 | 0) >> 2]);
       $38_1 = Math_fround(HEAPF32[($20_1 + 8 | 0) >> 2]);
       $39_1 = Math_fround(HEAPF32[($20_1 + 24 | 0) >> 2]);
       $21_1 = Math_fround(HEAPF32[($20_1 + 60 | 0) >> 2]);
       $43_1 = Math_fround(HEAPF32[($20_1 + 52 | 0) >> 2]);
       $23_1 = Math_fround(HEAPF32[($20_1 + 56 | 0) >> 2]);
       $44_1 = Math_fround(HEAPF32[($20_1 + 44 | 0) >> 2]);
       $45_1 = Math_fround(HEAPF32[($20_1 + 12 | 0) >> 2]);
       $46_1 = Math_fround(HEAPF32[($20_1 + 28 | 0) >> 2]);
       $47_1 = Math_fround(HEAPF32[($20_1 + 4 | 0) >> 2]);
       $34_1 = Math_fround(HEAPF32[($19_1 + 60 | 0) >> 2]);
       $48_1 = Math_fround(HEAPF32[($19_1 + 52 | 0) >> 2]);
       $49_1 = Math_fround(HEAPF32[($19_1 + 56 | 0) >> 2]);
       i64toi32_i32$0 = ($4_1 + 8 | 0) + 8 | 0;
       i64toi32_i32$1 = 0;
       HEAP32[i64toi32_i32$0 >> 2] = 0;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$1 = 0;
       HEAP32[i64toi32_i32$0 >> 2] = 0;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$0 + 8 | 0;
       i64toi32_i32$1 = 0;
       HEAP32[i64toi32_i32$0 >> 2] = 0;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$0 = $5_1;
       i64toi32_i32$1 = 0;
       HEAP32[i64toi32_i32$0 >> 2] = 0;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$0 + 8 | 0;
       i64toi32_i32$1 = 0;
       HEAP32[i64toi32_i32$0 >> 2] = 0;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$0 = $5_1 + 16 | 0;
       i64toi32_i32$1 = 0;
       HEAP32[i64toi32_i32$0 >> 2] = 0;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$0 = $5_1 + 24 | 0;
       i64toi32_i32$1 = 0;
       HEAP32[i64toi32_i32$0 >> 2] = 0;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$0 = $5_1 + 32 | 0;
       i64toi32_i32$1 = 0;
       HEAP32[i64toi32_i32$0 >> 2] = 0;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($5_1 + 40 | 0) >> 2] = 0;
       i64toi32_i32$2 = $8_1;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $478_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $7_1;
       HEAP32[i64toi32_i32$1 >> 2] = $478_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $483_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $7_1 + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $483_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$1 = 0;
       HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = 0;
       HEAPF32[(i64toi32_i32$0 + 88 | 0) >> 2] = $33_1;
       $32_1 = Math_fround($32_1 + $48_1);
       $33_1 = Math_fround($40_1 + $49_1);
       $34_1 = Math_fround($41_1 + $34_1);
       $40_1 = Math_fround(-$43_1);
       HEAPF32[(i64toi32_i32$0 + 32 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($45_1 * $32_1) + Math_fround($46_1 * $33_1)) + Math_fround($44_1 * $34_1)) + Math_fround(Math_fround(Math_fround($45_1 * $40_1) - Math_fround($46_1 * $23_1)) - Math_fround($44_1 * $21_1)));
       HEAPF32[(i64toi32_i32$0 + 28 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($32_1 * $38_1) + Math_fround($33_1 * $39_1)) + Math_fround($34_1 * $37_1)) + Math_fround(Math_fround(Math_fround($38_1 * $40_1) - Math_fround($39_1 * $23_1)) - Math_fround($37_1 * $21_1)));
       HEAPF32[(i64toi32_i32$0 + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($32_1 * $47_1) + Math_fround($33_1 * $35_1)) + Math_fround($34_1 * $36_1)) + Math_fround(Math_fround(Math_fround($47_1 * $40_1) - Math_fround($35_1 * $23_1)) - Math_fround($36_1 * $21_1)));
       $20_1 = $29_1 + Math_imul($218($29_1 | 0, i64toi32_i32$0 + 8 | 0 | 0, 1 | 0) | 0, 192) | 0;
       HEAP32[($20_1 + 100 | 0) >> 2] = 0;
       (wasm2js_i32$0 = $20_1 + 88 | 0, wasm2js_f32$0 = Math_fround($220($19_1 | 0, HEAP32[(i64toi32_i32$0 + 400 | 0) >> 2] | 0 | 0))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
       i64toi32_i32$2 = $22_1;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $589_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $20_1 + 52 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $589_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $25_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $593_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $20_1 + 60 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $593_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($20_1 + 48 | 0) >> 2] = 0;
       HEAPF32[($20_1 + 44 | 0) >> 2] = $34_1;
       HEAPF32[($20_1 + 40 | 0) >> 2] = $33_1;
       HEAPF32[($20_1 + 36 | 0) >> 2] = $32_1;
      }
      $101($4_1 + 264 | 0 | 0) | 0;
     }
     $617($24_1 | 0) | 0;
    }
    $18_1 = $18_1 + 1 | 0;
    if (($18_1 | 0) != ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $4_1 + 496 | 0;
 }
 
 function $962($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $6_1 = 0, $2_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $616($2_1 | 0, 23388 | 0) | 0;
  $4_1 = $616($2_1 + 8 | 0 | 0, 23351 | 0) | 0;
  $5_1 = HEAP32[($0_1 + 332 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 324 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $6_1 = 0;
   $7_1 = 0;
   label$2 : while (1) {
    $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($8_1, HEAP32[($5_1 + $6_1 | 0) >> 2] | 0);
    $6_1 = $6_1 + 4 | 0;
    $5_1 = HEAP32[($0_1 + 332 | 0) >> 2] | 0;
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) < (HEAP32[($0_1 + 324 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   if (!$5_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 336 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($5_1 | 0);
   }
   HEAP32[($0_1 + 332 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 332 | 0) >> 2] = 0;
  HEAP32[($0_1 + 324 | 0) >> 2] = 0;
  HEAP32[($0_1 + 328 | 0) >> 2] = 0;
  HEAP8[($0_1 + 336 | 0) >> 0] = 1;
  $617($4_1 | 0) | 0;
  label$5 : {
   $6_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
   if (($6_1 | 0) < (1 | 0)) {
    break label$5
   }
   $961($0_1 | 0, HEAP32[($0_1 + 256 | 0) >> 2] | 0 | 0, $6_1 | 0, Math_fround($1_1));
  }
  $617($3_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $963($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $14_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $15_1 = 0, $20_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $9_1 = 0, $94_1 = Math_fround(0), $104_1 = Math_fround(0), $19_1 = 0, $135_1 = 0, $140_1 = 0, $143_1 = 0, $149_1 = 0, $187_1 = 0, $195_1 = 0, $198_1 = 0, $204_1 = 0, $207_1 = 0, $210_1 = 0, $216_1 = 0, $220_1 = 0, $223_1 = 0, $24_1 = 0, $24$hi = 0, $25_1 = 0, $25$hi = 0, $234_1 = 0, $238_1 = 0, $246_1 = 0, $250_1 = 0;
  $4_1 = global$0 - 304 | 0;
  global$0 = $4_1;
  label$1 : {
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = ($4_1 + 8 | 0) + 48 | 0;
   $6_1 = ($4_1 + 8 | 0) + 32 | 0;
   $7_1 = ($4_1 + 240 | 0) + 32 | 0;
   $8_1 = ($4_1 + 8 | 0) + 16 | 0;
   $9_1 = ($4_1 + 240 | 0) + 16 | 0;
   $10_1 = ($4_1 + 72 | 0) + 28 | 0;
   $11_1 = ($4_1 + 128 | 0) + 32 | 0;
   $12_1 = ($4_1 + 128 | 0) + 16 | 0;
   $13_1 = ($4_1 + 240 | 0) + 48 | 0;
   label$2 : while (1) {
    $14_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP32[($14_1 + 268 | 0) >> 2] = 1065353216;
    label$3 : {
     label$4 : {
      $15_1 = (HEAP32[($14_1 + 220 | 0) >> 2] | 0) + -2 | 0;
      if ($15_1 >>> 0 > 3 >>> 0) {
       break label$4
      }
      switch ($15_1 | 0) {
      case 1:
      case 2:
       break label$4;
      default:
       break label$3;
      };
     }
     if ((HEAPU8[($14_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
      break label$3
     }
     $800($14_1 | 0, Math_fround($3_1), $4_1 + 240 | 0 | 0);
     label$5 : {
      if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
       break label$5
      }
      $16_1 = Math_fround(HEAPF32[($14_1 + 276 | 0) >> 2]);
      $16_1 = Math_fround($16_1 * $16_1);
      if ($16_1 == Math_fround(0.0)) {
       break label$5
      }
      $17_1 = $14_1 + 52 | 0;
      $18_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 288 | 0) >> 2]) - Math_fround(HEAPF32[$17_1 >> 2]));
      $94_1 = Math_fround($18_1 * $18_1);
      $18_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 292 | 0) >> 2]) - Math_fround(HEAPF32[($14_1 + 56 | 0) >> 2]));
      $104_1 = Math_fround($94_1 + Math_fround($18_1 * $18_1));
      $18_1 = Math_fround(Math_fround(HEAPF32[($4_1 + 296 | 0) >> 2]) - Math_fround(HEAPF32[($14_1 + 60 | 0) >> 2]));
      if ($16_1 < Math_fround($104_1 + Math_fround($18_1 * $18_1)) ^ 1 | 0) {
       break label$5
      }
      $19_1 = $616($4_1 + 232 | 0 | 0, 23413 | 0) | 0;
      label$6 : {
       label$7 : {
        if ((HEAP32[((HEAP32[($14_1 + 192 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) > (19 | 0)) {
         break label$7
        }
        $15_1 = 0;
        HEAP32[(0 + 2808 | 0) >> 2] = (HEAP32[(0 + 2808 | 0) >> 2] | 0) + 1 | 0;
        $20_1 = HEAP32[($0_1 + 68 | 0) >> 2] | 0;
        $20_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$20_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($20_1) | 0;
        i64toi32_i32$2 = $17_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $135_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $12_1;
        HEAP32[i64toi32_i32$0 >> 2] = $135_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $140_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $12_1 + 8 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $140_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $13_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $143_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $11_1;
        HEAP32[i64toi32_i32$0 >> 2] = $143_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        $21_1 = i64toi32_i32$2 + 8 | 0;
        i64toi32_i32$2 = $21_1;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $149_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $11_1 + 8 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $149_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($4_1 + 140 | 0) >> 2] = -1;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$0 = 1;
        HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] = 1065353216;
        HEAP32[(i64toi32_i32$1 + 136 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[(i64toi32_i32$1 + 128 | 0) >> 2] = 23736;
        HEAP32[(i64toi32_i32$1 + 208 | 0) >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 216 | 0) >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 224 | 0) >> 2] = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
        HEAP32[(i64toi32_i32$1 + 220 | 0) >> 2] = $20_1;
        HEAP32[(i64toi32_i32$1 + 212 | 0) >> 2] = $14_1;
        $17_1 = HEAP32[($14_1 + 272 | 0) >> 2] | 0;
        $145(i64toi32_i32$1 + 72 | 0 | 0) | 0;
        i64toi32_i32$1 = $10_1;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($10_1 + 16 | 0) >> 2] = 0;
        HEAP32[($4_1 + 96 | 0) >> 2] = 1065353216;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$0 = 1065353216;
        HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] = 1065353216;
        HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = 8;
        HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = 9852;
        HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $17_1;
        HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] = $17_1;
        HEAP32[(i64toi32_i32$1 + 216 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($14_1 + 188 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
        $187_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $4_1;
        HEAP32[(i64toi32_i32$0 + 136 | 0) >> 2] = $187_1;
        HEAP32[(i64toi32_i32$0 + 140 | 0) >> 2] = i64toi32_i32$1;
        $20_1 = (i64toi32_i32$0 + 8 | 0) + 8 | 0;
        i64toi32_i32$2 = (i64toi32_i32$0 + 240 | 0) + 8 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $195_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $20_1;
        HEAP32[i64toi32_i32$1 >> 2] = $195_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $13_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $198_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $5_1;
        HEAP32[i64toi32_i32$0 >> 2] = $198_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        $22_1 = $6_1 + 8 | 0;
        i64toi32_i32$2 = $7_1 + 8 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $204_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $22_1;
        HEAP32[i64toi32_i32$1 >> 2] = $204_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $207_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $6_1;
        HEAP32[i64toi32_i32$0 >> 2] = $207_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $9_1;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $210_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $8_1;
        HEAP32[i64toi32_i32$1 >> 2] = $210_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        $23_1 = i64toi32_i32$1 + 8 | 0;
        i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $216_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $23_1;
        HEAP32[i64toi32_i32$0 >> 2] = $216_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $21_1;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $220_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $5_1 + 8 | 0;
        HEAP32[i64toi32_i32$1 >> 2] = $220_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 240 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 244 | 0) >> 2] | 0;
        $223_1 = i64toi32_i32$0;
        i64toi32_i32$0 = i64toi32_i32$2;
        HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $223_1;
        HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
        $17_1 = $14_1 + 4 | 0;
        i64toi32_i32$2 = $17_1 + 8 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$0;
        i64toi32_i32$2 = $17_1;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $25_1 = i64toi32_i32$0;
        $25$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $14_1 + 20 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $234_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $8_1;
        HEAP32[i64toi32_i32$1 >> 2] = $234_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $14_1 + 28 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $238_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $23_1;
        HEAP32[i64toi32_i32$0 >> 2] = $238_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$0 = $20_1;
        HEAP32[i64toi32_i32$0 >> 2] = $24_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$0 = $4_1;
        HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $25_1;
        HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
        i64toi32_i32$2 = $14_1 + 36 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $246_1 = i64toi32_i32$1;
        i64toi32_i32$1 = $6_1;
        HEAP32[i64toi32_i32$1 >> 2] = $246_1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$2 = $14_1 + 44 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $250_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $22_1;
        HEAP32[i64toi32_i32$0 >> 2] = $250_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        $872($0_1 | 0, $4_1 + 72 | 0 | 0, $17_1 | 0, $4_1 + 8 | 0 | 0, $4_1 + 128 | 0 | 0, Math_fround(Math_fround(0.0)));
        label$8 : {
         $16_1 = Math_fround(HEAPF32[($4_1 + 132 | 0) >> 2]);
         if ($16_1 < Math_fround(1.0) ^ 1 | 0) {
          break label$8
         }
         HEAPF32[($14_1 + 268 | 0) >> 2] = $16_1;
         $800($14_1 | 0, Math_fround(Math_fround($16_1 * $3_1)), $4_1 + 240 | 0 | 0);
         HEAP32[($14_1 + 268 | 0) >> 2] = 0;
         $807($14_1 | 0, $4_1 + 240 | 0 | 0);
         $15_1 = 4;
        }
        $101($4_1 + 72 | 0 | 0) | 0;
        if ($15_1) {
         break label$6
        }
       }
       $15_1 = 0;
      }
      $617($19_1 | 0) | 0;
      if ($15_1) {
       break label$3
      }
     }
     $807($14_1 | 0, $4_1 + 240 | 0 | 0);
    }
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $4_1 + 304 | 0;
 }
 
 function $964($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $4_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = Math_fround(0), $7_1 = 0, $10_1 = 0, $13_1 = Math_fround(0), $14_1 = Math_fround(0), $6_1 = 0, $12_1 = Math_fround(0), $3_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $3_1 = $616($2_1 + 72 | 0 | 0, 23433 | 0) | 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $963($0_1 | 0, HEAP32[($0_1 + 256 | 0) >> 2] | 0 | 0, $4_1 | 0, Math_fround($1_1));
  }
  label$2 : {
   if (!(HEAPU8[($0_1 + 291 | 0) >> 0] | 0)) {
    break label$2
   }
   $5_1 = $616($2_1 + 64 | 0 | 0, 23453 | 0) | 0;
   label$3 : {
    if ((HEAP32[($0_1 + 324 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$3
    }
    $6_1 = 0;
    label$4 : while (1) {
     label$5 : {
      $7_1 = HEAP32[((HEAP32[($0_1 + 332 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0) >> 2] | 0;
      if ((HEAP32[($7_1 + 780 | 0) >> 2] | 0 | 0) < (1 | 0)) {
       break label$5
      }
      $4_1 = HEAP32[($7_1 + 776 | 0) >> 2] | 0;
      $8_1 = (((HEAP32[($4_1 + 252 | 0) >> 2] | 0) << 30 | 0) >> 31 | 0) & $4_1 | 0;
      label$6 : {
       $4_1 = HEAP32[($7_1 + 772 | 0) >> 2] | 0;
       $9_1 = (((HEAP32[($4_1 + 252 | 0) >> 2] | 0) << 30 | 0) >> 31 | 0) & $4_1 | 0;
       if (!$9_1) {
        break label$6
       }
       $4_1 = $7_1 + 128 | 0;
       $10_1 = 0;
       label$7 : while (1) {
        label$8 : {
         $1_1 = Math_fround($221($9_1 | 0, $8_1 | 0));
         if ($1_1 > Math_fround(0.0) ^ 1 | 0) {
          break label$8
         }
         $11_1 = Math_fround(HEAPF32[$4_1 >> 2]);
         if ($11_1 == Math_fround(0.0)) {
          break label$8
         }
         $12_1 = Math_fround(HEAPF32[($4_1 + -60 | 0) >> 2]);
         $13_1 = Math_fround(HEAPF32[($4_1 + -56 | 0) >> 2]);
         $14_1 = Math_fround(HEAPF32[($4_1 + -52 | 0) >> 2]);
         HEAP32[($2_1 + 60 | 0) >> 2] = 0;
         HEAPF32[($2_1 + 56 | 0) >> 2] = Math_fround(-Math_fround($1_1 * Math_fround($14_1 * $11_1)));
         HEAPF32[($2_1 + 52 | 0) >> 2] = Math_fround(-Math_fround($1_1 * Math_fround($13_1 * $11_1)));
         HEAPF32[($2_1 + 48 | 0) >> 2] = Math_fround(-Math_fround($1_1 * Math_fround($12_1 * $11_1)));
         HEAP32[($2_1 + 44 | 0) >> 2] = 0;
         HEAPF32[($2_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + -68 | 0) >> 2]) - Math_fround(HEAPF32[($9_1 + 60 | 0) >> 2]));
         HEAPF32[($2_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + -72 | 0) >> 2]) - Math_fround(HEAPF32[($9_1 + 56 | 0) >> 2]));
         HEAPF32[($2_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + -76 | 0) >> 2]) - Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]));
         HEAP32[($2_1 + 28 | 0) >> 2] = 0;
         HEAPF32[($2_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + -84 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 60 | 0) >> 2]));
         HEAPF32[($2_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + -88 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 56 | 0) >> 2]));
         HEAPF32[($2_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + -92 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 52 | 0) >> 2]));
         $1168($9_1 | 0, $2_1 + 48 | 0 | 0, $2_1 + 32 | 0 | 0);
         HEAP32[($2_1 + 12 | 0) >> 2] = 0;
         HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]));
         HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]));
         HEAPF32[$2_1 >> 2] = Math_fround(-Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]));
         $1168($8_1 | 0, $2_1 | 0, $2_1 + 16 | 0 | 0);
        }
        $4_1 = $4_1 + 192 | 0;
        $10_1 = $10_1 + 1 | 0;
        if (($10_1 | 0) < (HEAP32[($7_1 + 780 | 0) >> 2] | 0 | 0)) {
         continue label$7
        }
        break label$5;
       };
      }
      $4_1 = $7_1 + 68 | 0;
      $10_1 = 0;
      label$9 : while (1) {
       label$10 : {
        $1_1 = Math_fround($221($9_1 | 0, $8_1 | 0));
        if ($1_1 > Math_fround(0.0) ^ 1 | 0) {
         break label$10
        }
        $11_1 = Math_fround(HEAPF32[($4_1 + 60 | 0) >> 2]);
        if ($11_1 == Math_fround(0.0)) {
         break label$10
        }
        $12_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
        $13_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
        $14_1 = Math_fround(HEAPF32[$4_1 >> 2]);
        HEAP32[($2_1 + 60 | 0) >> 2] = 0;
        $14_1 = Math_fround($1_1 * Math_fround($14_1 * $11_1));
        HEAPF32[($2_1 + 48 | 0) >> 2] = Math_fround(-$14_1);
        $13_1 = Math_fround($1_1 * Math_fround($13_1 * $11_1));
        HEAPF32[($2_1 + 56 | 0) >> 2] = Math_fround(-$13_1);
        $1_1 = Math_fround($1_1 * Math_fround($12_1 * $11_1));
        HEAPF32[($2_1 + 52 | 0) >> 2] = Math_fround(-$1_1);
        HEAP32[($2_1 + 44 | 0) >> 2] = 0;
        HEAPF32[($2_1 + 40 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + -8 | 0) >> 2]) - Math_fround(HEAPF32[($9_1 + 60 | 0) >> 2]));
        HEAPF32[($2_1 + 36 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + -12 | 0) >> 2]) - Math_fround(HEAPF32[($9_1 + 56 | 0) >> 2]));
        HEAPF32[($2_1 + 32 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + -16 | 0) >> 2]) - Math_fround(HEAPF32[($9_1 + 52 | 0) >> 2]));
        HEAP32[($2_1 + 28 | 0) >> 2] = 0;
        HEAPF32[($2_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + -24 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 60 | 0) >> 2]));
        HEAPF32[($2_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + -28 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 56 | 0) >> 2]));
        HEAPF32[($2_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + -32 | 0) >> 2]) - Math_fround(HEAPF32[($8_1 + 52 | 0) >> 2]));
        HEAP32[($2_1 + 12 | 0) >> 2] = 0;
        HEAPF32[($2_1 + 8 | 0) >> 2] = $13_1;
        HEAPF32[($2_1 + 4 | 0) >> 2] = $1_1;
        HEAPF32[$2_1 >> 2] = $14_1;
        $1168($8_1 | 0, $2_1 | 0, $2_1 + 16 | 0 | 0);
       }
       $4_1 = $4_1 + 192 | 0;
       $10_1 = $10_1 + 1 | 0;
       if (($10_1 | 0) < (HEAP32[($7_1 + 780 | 0) >> 2] | 0 | 0)) {
        continue label$9
       }
       break label$9;
      };
     }
     $6_1 = $6_1 + 1 | 0;
     if (($6_1 | 0) < (HEAP32[($0_1 + 324 | 0) >> 2] | 0 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   $617($5_1 | 0) | 0;
  }
  $617($3_1 | 0) | 0;
  global$0 = $2_1 + 80 | 0;
 }
 
 function $965($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $7_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $616($2_1 + 8 | 0 | 0, 23491 | 0) | 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = 0;
   $6_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $7_1 = HEAP32[((HEAP32[($0_1 + 256 | 0) >> 2] | 0) + $5_1 | 0) >> 2] | 0;
     if ((HEAPU8[($7_1 + 204 | 0) >> 0] | 0) & 3 | 0) {
      break label$3
     }
     $805($7_1 | 0, Math_fround($1_1));
     $800($7_1 | 0, Math_fround($1_1), $7_1 + 68 | 0 | 0);
     $4_1 = HEAP32[($0_1 + 248 | 0) >> 2] | 0;
    }
    $5_1 = $5_1 + 4 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) < ($4_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $617($3_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $966($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $3_1 = 0, $18_1 = Math_fround(0), $17_1 = Math_fround(0), $21_1 = Math_fround(0), $8_1 = Math_fround(0), $6_1 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $15_1 = Math_fround(0), $26_1 = Math_fround(0), $7_1 = 0, $14_1 = Math_fround(0), $16_1 = Math_fround(0), $19_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $5_1 = Math_fround(0), $30_1 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = Math_fround(0), $20_1 = 0, $25_1 = Math_fround(0), $37_1 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24_1 = Math_fround(0), $38_1 = 0, $36_1 = 0, $39_1 = 0, $40_1 = 0, $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $41$hi = 0, $45_1 = 0, $46_1 = 0, $158_1 = Math_fround(0), $165_1 = Math_fround(0), $259_1 = Math_fround(0), $266_1 = Math_fround(0), $2014 = 0, $2017 = 0, $2460 = 0, $2463 = 0, $2514 = 0, $2519 = 0, $2524 = 0, $2529 = 0, $2534 = 0, $2539 = 0, $2544 = 0, $2549 = 0, $2574 = 0, $2578 = 0, $2582 = 0, $2587 = 0, $2591 = 0, $2596 = 0, $2600 = 0, $2604 = 0, $2620 = 0, $2624 = 0, $2629 = 0, $2633 = 0, $2638 = 0, $2642 = 0, $2647 = 0, $2651 = 0, $2656 = 0, $2659 = 0, $2662 = 0, $2676 = 0, $2682 = 0, $2688 = 0, $2691 = 0, $2772 = 0, $2776 = 0, $2780 = 0, $2784 = 0, $2788 = 0, $2792 = 0, $2850 = 0, $2853 = 0, $2928 = 0, $2931 = 0, $2934 = 0, $2940 = 0, $2945 = 0, $2950 = 0, $2955 = 0, $2958 = 0, $2964 = 0, $2968 = 0, $2974 = 0, $2978 = 0, $3004 = 0, $3009 = 0, $3014 = 0, $3019 = 0, $3024 = 0, $3029 = 0, $3034 = 0, $3039 = 0, $3064 = 0, $3068 = 0, $3072 = 0, $3077 = 0, $3081 = 0, $3086 = 0, $3090 = 0, $3094 = 0, $3110 = 0, $3114 = 0, $3119 = 0, $3123 = 0, $3128 = 0, $3132 = 0, $3137 = 0, $3141 = 0, $3146 = 0, $3149 = 0, $3152 = 0, $3166 = 0, $3172 = 0, $3178 = 0, $3181 = 0, $3266 = 0, $3270 = 0, $3274 = 0, $3278 = 0, $3282 = 0, $3285 = 0, $3289 = 0, $3293 = 0, $3422 = 0, $3425 = 0, $3428 = 0, $3434 = 0, $3439 = 0, $3444 = 0, $3449 = 0, $3452 = 0, $3458 = 0, $3462 = 0, $3468 = 0, $3472 = 0, $3498 = 0, $3503 = 0, $3508 = 0, $3513 = 0, $3518 = 0, $3522 = 0, $3526 = 0, $3530 = 0, $3555 = 0, $3559 = 0, $3563 = 0, $3568 = 0, $3572 = 0, $3577 = 0, $3581 = 0, $3585 = 0, $3601 = 0, $3605 = 0, $3610 = 0, $3614 = 0, $3619 = 0, $3623 = 0, $3628 = 0, $3632 = 0;
  $2_1 = global$0 - 176 | 0;
  global$0 = $2_1;
  $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($3_1) | 0;
  $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
  $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($3_1) | 0;
  label$1 : {
   $5_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
   if ($5_1 <= Math_fround(0.0)) {
    break label$1
   }
   $6_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -3 | 0;
   if ($6_1 >>> 0 > 9 >>> 0) {
    break label$1
   }
   $4_1 = $4_1 & 2048 | 0;
   $3_1 = $3_1 & 4096 | 0;
   label$2 : {
    switch ($6_1 | 0) {
    default:
     $6_1 = ($2_1 + 112 | 0) + 60 | 0;
     HEAP32[$6_1 >> 2] = 0;
     $7_1 = ($2_1 + 112 | 0) + 52 | 0;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = ($2_1 + 112 | 0) + 44 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = ($2_1 + 112 | 0) + 12 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = ($2_1 + 112 | 0) + 24 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[(($2_1 + 112 | 0) + 20 | 0) >> 2] = 1065353216;
     HEAP32[(($2_1 + 112 | 0) + 40 | 0) >> 2] = 1065353216;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     HEAP32[($2_1 + 116 | 0) >> 2] = 0;
     HEAP32[($2_1 + 120 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     HEAP32[($2_1 + 144 | 0) >> 2] = 0;
     HEAP32[($2_1 + 148 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($2_1 + 112 | 0) >> 2] = 1065353216;
     $3_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
     $8_1 = Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]);
     $9_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
     $10_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]);
     $13_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[($3_1 + 60 | 0) >> 2]);
     $16_1 = Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]);
     $18_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
     $19_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
     HEAP32[$6_1 >> 2] = 0;
     $20_1 = ($2_1 + 112 | 0) + 56 | 0;
     $21_1 = Math_fround(HEAPF32[($1_1 + 300 | 0) >> 2]);
     $158_1 = Math_fround($17_1 * $21_1);
     $17_1 = Math_fround(HEAPF32[($1_1 + 304 | 0) >> 2]);
     $165_1 = Math_fround($158_1 + Math_fround($18_1 * $17_1));
     $18_1 = Math_fround(HEAPF32[($1_1 + 308 | 0) >> 2]);
     HEAPF32[$20_1 >> 2] = Math_fround($15_1 + Math_fround($165_1 + Math_fround($16_1 * $18_1)));
     HEAPF32[$7_1 >> 2] = Math_fround($11_1 + Math_fround(Math_fround(Math_fround($21_1 * $13_1) + Math_fround($17_1 * $14_1)) + Math_fround($18_1 * $12_1)));
     HEAPF32[($2_1 + 160 | 0) >> 2] = Math_fround($8_1 + Math_fround(Math_fround(Math_fround($21_1 * $19_1) + Math_fround($17_1 * $9_1)) + Math_fround($18_1 * $10_1)));
     $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($3_1, $2_1 + 112 | 0, $5_1);
     $3_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
     $8_1 = Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]);
     $9_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
     $10_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]);
     $13_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[($3_1 + 60 | 0) >> 2]);
     $16_1 = Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]);
     $18_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
     $19_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
     HEAP32[$6_1 >> 2] = 0;
     $21_1 = Math_fround(HEAPF32[($1_1 + 316 | 0) >> 2]);
     $259_1 = Math_fround($17_1 * $21_1);
     $17_1 = Math_fround(HEAPF32[($1_1 + 320 | 0) >> 2]);
     $266_1 = Math_fround($259_1 + Math_fround($18_1 * $17_1));
     $18_1 = Math_fround(HEAPF32[($1_1 + 324 | 0) >> 2]);
     HEAPF32[$20_1 >> 2] = Math_fround($15_1 + Math_fround($266_1 + Math_fround($16_1 * $18_1)));
     HEAPF32[$7_1 >> 2] = Math_fround($11_1 + Math_fround(Math_fround(Math_fround($21_1 * $13_1) + Math_fround($17_1 * $14_1)) + Math_fround($18_1 * $12_1)));
     HEAPF32[($2_1 + 160 | 0) >> 2] = Math_fround($8_1 + Math_fround(Math_fround(Math_fround($21_1 * $19_1) + Math_fround($17_1 * $9_1)) + Math_fround($18_1 * $10_1)));
     if (!$4_1) {
      break label$1
     }
     $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($1_1, $2_1 + 112 | 0, $5_1);
     break label$1;
    case 1:
     $6_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
     $22_1 = Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2]);
     $21_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($1_1 + 584 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[($1_1 + 552 | 0) >> 2]);
     $16_1 = Math_fround(HEAPF32[($1_1 + 568 | 0) >> 2]);
     $23_1 = Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]);
     $24_1 = Math_fround(HEAPF32[($6_1 + 60 | 0) >> 2]);
     $19_1 = Math_fround(HEAPF32[($1_1 + 608 | 0) >> 2]);
     $25_1 = Math_fround(HEAPF32[($1_1 + 600 | 0) >> 2]);
     $26_1 = Math_fround(HEAPF32[($1_1 + 604 | 0) >> 2]);
     $18_1 = Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2]);
     $8_1 = Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]);
     $9_1 = Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]);
     $27_1 = Math_fround(HEAPF32[($1_1 + 588 | 0) >> 2]);
     $28_1 = Math_fround(HEAPF32[($1_1 + 556 | 0) >> 2]);
     $29_1 = Math_fround(HEAPF32[($1_1 + 572 | 0) >> 2]);
     $30_1 = Math_fround(HEAPF32[($1_1 + 592 | 0) >> 2]);
     $10_1 = Math_fround(HEAPF32[($6_1 + 44 | 0) >> 2]);
     $31_1 = Math_fround(HEAPF32[($1_1 + 560 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]);
     $32_1 = Math_fround(HEAPF32[($1_1 + 576 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2]);
     $13_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
     HEAP32[(($2_1 + 112 | 0) + 60 | 0) >> 2] = 0;
     HEAP32[(($2_1 + 112 | 0) + 44 | 0) >> 2] = 0;
     HEAP32[(($2_1 + 112 | 0) + 28 | 0) >> 2] = 0;
     HEAPF32[(($2_1 + 112 | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($31_1 * $11_1) + Math_fround($32_1 * $12_1)) + Math_fround($30_1 * $10_1));
     HEAPF32[(($2_1 + 112 | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($28_1 * $11_1) + Math_fround($29_1 * $12_1)) + Math_fround($27_1 * $10_1));
     HEAPF32[(($2_1 + 112 | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($31_1 * $8_1) + Math_fround($32_1 * $9_1)) + Math_fround($30_1 * $18_1));
     HEAPF32[(($2_1 + 112 | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($28_1 * $8_1) + Math_fround($29_1 * $9_1)) + Math_fround($27_1 * $18_1));
     HEAPF32[(($2_1 + 112 | 0) + 56 | 0) >> 2] = Math_fround($24_1 + Math_fround(Math_fround(Math_fround($11_1 * $25_1) + Math_fround($12_1 * $26_1)) + Math_fround($10_1 * $19_1)));
     HEAPF32[(($2_1 + 112 | 0) + 52 | 0) >> 2] = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($8_1 * $25_1) + Math_fround($9_1 * $26_1)) + Math_fround($18_1 * $19_1)));
     HEAP32[($2_1 + 124 | 0) >> 2] = 0;
     HEAPF32[($2_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $11_1) + Math_fround($16_1 * $12_1)) + Math_fround($14_1 * $10_1));
     HEAPF32[($2_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $8_1) + Math_fround($16_1 * $9_1)) + Math_fround($14_1 * $18_1));
     HEAPF32[($2_1 + 120 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $31_1) + Math_fround($21_1 * $32_1)) + Math_fround($17_1 * $30_1));
     HEAPF32[($2_1 + 116 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $28_1) + Math_fround($21_1 * $29_1)) + Math_fround($17_1 * $27_1));
     HEAPF32[($2_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $13_1) + Math_fround($16_1 * $21_1)) + Math_fround($14_1 * $17_1));
     HEAPF32[($2_1 + 160 | 0) >> 2] = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($13_1 * $25_1) + Math_fround($21_1 * $26_1)) + Math_fround($17_1 * $19_1)));
     label$8 : {
      label$9 : {
       if (!$4_1) {
        break label$9
       }
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($4_1, $2_1 + 112 | 0, $5_1);
       $4_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
       $22_1 = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
       $21_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
       $17_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
       $23_1 = Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]);
       $24_1 = Math_fround(HEAPF32[($4_1 + 60 | 0) >> 2]);
       $14_1 = Math_fround(HEAPF32[($1_1 + 672 | 0) >> 2]);
       $15_1 = Math_fround(HEAPF32[($1_1 + 664 | 0) >> 2]);
       $16_1 = Math_fround(HEAPF32[($1_1 + 668 | 0) >> 2]);
       $18_1 = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
       $8_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
       $9_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
       $19_1 = Math_fround(HEAPF32[($1_1 + 648 | 0) >> 2]);
       $25_1 = Math_fround(HEAPF32[($1_1 + 616 | 0) >> 2]);
       $26_1 = Math_fround(HEAPF32[($1_1 + 632 | 0) >> 2]);
       $27_1 = Math_fround(HEAPF32[($1_1 + 652 | 0) >> 2]);
       $28_1 = Math_fround(HEAPF32[($1_1 + 620 | 0) >> 2]);
       $29_1 = Math_fround(HEAPF32[($1_1 + 636 | 0) >> 2]);
       $30_1 = Math_fround(HEAPF32[($1_1 + 656 | 0) >> 2]);
       $10_1 = Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]);
       $31_1 = Math_fround(HEAPF32[($1_1 + 624 | 0) >> 2]);
       $11_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
       $32_1 = Math_fround(HEAPF32[($1_1 + 640 | 0) >> 2]);
       $12_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
       $13_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
       HEAP32[($2_1 + 172 | 0) >> 2] = 0;
       HEAP32[($2_1 + 156 | 0) >> 2] = 0;
       HEAP32[($2_1 + 140 | 0) >> 2] = 0;
       HEAPF32[($2_1 + 152 | 0) >> 2] = Math_fround(Math_fround(Math_fround($31_1 * $11_1) + Math_fround($32_1 * $12_1)) + Math_fround($30_1 * $10_1));
       HEAPF32[($2_1 + 148 | 0) >> 2] = Math_fround(Math_fround(Math_fround($28_1 * $11_1) + Math_fround($29_1 * $12_1)) + Math_fround($27_1 * $10_1));
       HEAPF32[($2_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $11_1) + Math_fround($26_1 * $12_1)) + Math_fround($19_1 * $10_1));
       HEAPF32[($2_1 + 136 | 0) >> 2] = Math_fround(Math_fround(Math_fround($31_1 * $8_1) + Math_fround($32_1 * $9_1)) + Math_fround($30_1 * $18_1));
       HEAPF32[($2_1 + 132 | 0) >> 2] = Math_fround(Math_fround(Math_fround($28_1 * $8_1) + Math_fround($29_1 * $9_1)) + Math_fround($27_1 * $18_1));
       HEAPF32[($2_1 + 168 | 0) >> 2] = Math_fround($24_1 + Math_fround(Math_fround(Math_fround($11_1 * $15_1) + Math_fround($12_1 * $16_1)) + Math_fround($10_1 * $14_1)));
       HEAPF32[($2_1 + 164 | 0) >> 2] = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($8_1 * $15_1) + Math_fround($9_1 * $16_1)) + Math_fround($18_1 * $14_1)));
       HEAPF32[($2_1 + 160 | 0) >> 2] = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($13_1 * $15_1) + Math_fround($21_1 * $16_1)) + Math_fround($17_1 * $14_1)));
       HEAP32[($2_1 + 124 | 0) >> 2] = 0;
       HEAPF32[($2_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $8_1) + Math_fround($26_1 * $9_1)) + Math_fround($19_1 * $18_1));
       HEAPF32[($2_1 + 120 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $31_1) + Math_fround($21_1 * $32_1)) + Math_fround($17_1 * $30_1));
       HEAPF32[($2_1 + 116 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $28_1) + Math_fround($21_1 * $29_1)) + Math_fround($17_1 * $27_1));
       HEAPF32[($2_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $13_1) + Math_fround($26_1 * $21_1)) + Math_fround($19_1 * $17_1));
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($4_1, $2_1 + 112 | 0, $5_1);
       break label$8;
      }
      $4_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      $22_1 = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
      $23_1 = Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]);
      $24_1 = Math_fround(HEAPF32[($4_1 + 60 | 0) >> 2]);
      $14_1 = Math_fround(HEAPF32[($1_1 + 672 | 0) >> 2]);
      $15_1 = Math_fround(HEAPF32[($1_1 + 664 | 0) >> 2]);
      $16_1 = Math_fround(HEAPF32[($1_1 + 668 | 0) >> 2]);
      $21_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
      $17_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
      $18_1 = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
      $8_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
      $9_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
      $19_1 = Math_fround(HEAPF32[($1_1 + 648 | 0) >> 2]);
      $25_1 = Math_fround(HEAPF32[($1_1 + 616 | 0) >> 2]);
      $26_1 = Math_fround(HEAPF32[($1_1 + 632 | 0) >> 2]);
      $27_1 = Math_fround(HEAPF32[($1_1 + 652 | 0) >> 2]);
      $28_1 = Math_fround(HEAPF32[($1_1 + 620 | 0) >> 2]);
      $29_1 = Math_fround(HEAPF32[($1_1 + 636 | 0) >> 2]);
      $30_1 = Math_fround(HEAPF32[($1_1 + 656 | 0) >> 2]);
      $10_1 = Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]);
      $31_1 = Math_fround(HEAPF32[($1_1 + 624 | 0) >> 2]);
      $11_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
      $32_1 = Math_fround(HEAPF32[($1_1 + 640 | 0) >> 2]);
      $12_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
      $13_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
      HEAP32[($2_1 + 172 | 0) >> 2] = 0;
      HEAP32[($2_1 + 156 | 0) >> 2] = 0;
      HEAP32[($2_1 + 140 | 0) >> 2] = 0;
      HEAP32[($2_1 + 124 | 0) >> 2] = 0;
      HEAPF32[($2_1 + 152 | 0) >> 2] = Math_fround(Math_fround(Math_fround($31_1 * $11_1) + Math_fround($32_1 * $12_1)) + Math_fround($30_1 * $10_1));
      HEAPF32[($2_1 + 148 | 0) >> 2] = Math_fround(Math_fround(Math_fround($28_1 * $11_1) + Math_fround($29_1 * $12_1)) + Math_fround($27_1 * $10_1));
      HEAPF32[($2_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $11_1) + Math_fround($26_1 * $12_1)) + Math_fround($19_1 * $10_1));
      HEAPF32[($2_1 + 136 | 0) >> 2] = Math_fround(Math_fround(Math_fround($31_1 * $8_1) + Math_fround($32_1 * $9_1)) + Math_fround($30_1 * $18_1));
      HEAPF32[($2_1 + 132 | 0) >> 2] = Math_fround(Math_fround(Math_fround($28_1 * $8_1) + Math_fround($29_1 * $9_1)) + Math_fround($27_1 * $18_1));
      HEAPF32[($2_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $8_1) + Math_fround($26_1 * $9_1)) + Math_fround($19_1 * $18_1));
      HEAPF32[($2_1 + 120 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $31_1) + Math_fround($21_1 * $32_1)) + Math_fround($17_1 * $30_1));
      HEAPF32[($2_1 + 116 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $28_1) + Math_fround($21_1 * $29_1)) + Math_fround($17_1 * $27_1));
      HEAPF32[($2_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $13_1) + Math_fround($26_1 * $21_1)) + Math_fround($19_1 * $17_1));
      HEAPF32[($2_1 + 168 | 0) >> 2] = Math_fround($24_1 + Math_fround(Math_fround(Math_fround($11_1 * $15_1) + Math_fround($12_1 * $16_1)) + Math_fround($10_1 * $14_1)));
      HEAPF32[($2_1 + 164 | 0) >> 2] = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($8_1 * $15_1) + Math_fround($9_1 * $16_1)) + Math_fround($18_1 * $14_1)));
      HEAPF32[($2_1 + 160 | 0) >> 2] = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($13_1 * $15_1) + Math_fround($21_1 * $16_1)) + Math_fround($17_1 * $14_1)));
     }
     $4_1 = $1_1 + 688 | 0;
     $21_1 = Math_fround($927($4_1 | 0));
     $17_1 = Math_fround($926($4_1 | 0));
     if ($21_1 == $17_1) {
      break label$1
     }
     if (!$3_1) {
      break label$1
     }
     $18_1 = Math_fround(HEAPF32[($1_1 + 692 | 0) >> 2]);
     HEAP32[($2_1 + 96 | 0) >> 2] = HEAP32[($2_1 + 120 | 0) >> 2] | 0;
     HEAP32[($2_1 + 100 | 0) >> 2] = HEAP32[($2_1 + 136 | 0) >> 2] | 0;
     HEAP32[($2_1 + 108 | 0) >> 2] = 0;
     HEAP32[($2_1 + 104 | 0) >> 2] = HEAP32[($2_1 + 152 | 0) >> 2] | 0;
     HEAP32[($2_1 + 80 | 0) >> 2] = HEAP32[($2_1 + 112 | 0) >> 2] | 0;
     HEAP32[($2_1 + 84 | 0) >> 2] = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
     HEAP32[($2_1 + 92 | 0) >> 2] = 0;
     HEAP32[($2_1 + 88 | 0) >> 2] = HEAP32[($2_1 + 144 | 0) >> 2] | 0;
     $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
     i64toi32_i32$1 = $2_1 + 72 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     HEAP32[($2_1 + 64 | 0) >> 2] = 0;
     HEAP32[($2_1 + 68 | 0) >> 2] = i64toi32_i32$0;
     $0_1 = $18_1 > Math_fround(0.0);
     FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($1_1, $2_1 + 160 | 0, $2_1 + 96 | 0, $2_1 + 80 | 0, $5_1, $5_1, $0_1 ? $21_1 : Math_fround(0.0), $0_1 ? $17_1 : Math_fround(6.2831854820251465), $2_1 + 64 | 0, $0_1, Math_fround(10.0));
     break label$1;
    case 2:
     $6_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
     $22_1 = Math_fround(HEAPF32[($6_1 + 52 | 0) >> 2]);
     $21_1 = Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($1_1 + 332 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[($1_1 + 300 | 0) >> 2]);
     $16_1 = Math_fround(HEAPF32[($1_1 + 316 | 0) >> 2]);
     $23_1 = Math_fround(HEAPF32[($6_1 + 56 | 0) >> 2]);
     $24_1 = Math_fround(HEAPF32[($6_1 + 60 | 0) >> 2]);
     $19_1 = Math_fround(HEAPF32[($1_1 + 356 | 0) >> 2]);
     $25_1 = Math_fround(HEAPF32[($1_1 + 348 | 0) >> 2]);
     $26_1 = Math_fround(HEAPF32[($1_1 + 352 | 0) >> 2]);
     $18_1 = Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2]);
     $8_1 = Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]);
     $9_1 = Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]);
     $27_1 = Math_fround(HEAPF32[($1_1 + 336 | 0) >> 2]);
     $28_1 = Math_fround(HEAPF32[($1_1 + 304 | 0) >> 2]);
     $29_1 = Math_fround(HEAPF32[($1_1 + 320 | 0) >> 2]);
     $30_1 = Math_fround(HEAPF32[($1_1 + 340 | 0) >> 2]);
     $10_1 = Math_fround(HEAPF32[($6_1 + 44 | 0) >> 2]);
     $31_1 = Math_fround(HEAPF32[($1_1 + 308 | 0) >> 2]);
     $11_1 = Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2]);
     $32_1 = Math_fround(HEAPF32[($1_1 + 324 | 0) >> 2]);
     $12_1 = Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2]);
     $13_1 = Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]);
     HEAP32[(($2_1 + 112 | 0) + 60 | 0) >> 2] = 0;
     HEAP32[(($2_1 + 112 | 0) + 44 | 0) >> 2] = 0;
     HEAP32[(($2_1 + 112 | 0) + 28 | 0) >> 2] = 0;
     HEAPF32[(($2_1 + 112 | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(Math_fround($31_1 * $11_1) + Math_fround($32_1 * $12_1)) + Math_fround($30_1 * $10_1));
     HEAPF32[(($2_1 + 112 | 0) + 36 | 0) >> 2] = Math_fround(Math_fround(Math_fround($28_1 * $11_1) + Math_fround($29_1 * $12_1)) + Math_fround($27_1 * $10_1));
     HEAPF32[(($2_1 + 112 | 0) + 24 | 0) >> 2] = Math_fround(Math_fround(Math_fround($31_1 * $8_1) + Math_fround($32_1 * $9_1)) + Math_fround($30_1 * $18_1));
     HEAPF32[(($2_1 + 112 | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(Math_fround($28_1 * $8_1) + Math_fround($29_1 * $9_1)) + Math_fround($27_1 * $18_1));
     HEAPF32[(($2_1 + 112 | 0) + 56 | 0) >> 2] = Math_fround($24_1 + Math_fround(Math_fround(Math_fround($11_1 * $25_1) + Math_fround($12_1 * $26_1)) + Math_fround($10_1 * $19_1)));
     HEAPF32[(($2_1 + 112 | 0) + 52 | 0) >> 2] = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($8_1 * $25_1) + Math_fround($9_1 * $26_1)) + Math_fround($18_1 * $19_1)));
     HEAP32[($2_1 + 124 | 0) >> 2] = 0;
     HEAPF32[($2_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $11_1) + Math_fround($16_1 * $12_1)) + Math_fround($14_1 * $10_1));
     HEAPF32[($2_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $8_1) + Math_fround($16_1 * $9_1)) + Math_fround($14_1 * $18_1));
     HEAPF32[($2_1 + 120 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $31_1) + Math_fround($21_1 * $32_1)) + Math_fround($17_1 * $30_1));
     HEAPF32[($2_1 + 116 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $28_1) + Math_fround($21_1 * $29_1)) + Math_fround($17_1 * $27_1));
     HEAPF32[($2_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $13_1) + Math_fround($16_1 * $21_1)) + Math_fround($14_1 * $17_1));
     HEAPF32[($2_1 + 160 | 0) >> 2] = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($13_1 * $25_1) + Math_fround($21_1 * $26_1)) + Math_fround($17_1 * $19_1)));
     label$10 : {
      label$11 : {
       if (!$4_1) {
        break label$11
       }
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($4_1, $2_1 + 112 | 0, $5_1);
       $4_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
       $22_1 = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
       $21_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
       $17_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
       $23_1 = Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]);
       $24_1 = Math_fround(HEAPF32[($4_1 + 60 | 0) >> 2]);
       $14_1 = Math_fround(HEAPF32[($1_1 + 420 | 0) >> 2]);
       $15_1 = Math_fround(HEAPF32[($1_1 + 412 | 0) >> 2]);
       $16_1 = Math_fround(HEAPF32[($1_1 + 416 | 0) >> 2]);
       $18_1 = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
       $8_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
       $9_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
       $19_1 = Math_fround(HEAPF32[($1_1 + 396 | 0) >> 2]);
       $25_1 = Math_fround(HEAPF32[($1_1 + 364 | 0) >> 2]);
       $26_1 = Math_fround(HEAPF32[($1_1 + 380 | 0) >> 2]);
       $27_1 = Math_fround(HEAPF32[($1_1 + 400 | 0) >> 2]);
       $28_1 = Math_fround(HEAPF32[($1_1 + 368 | 0) >> 2]);
       $29_1 = Math_fround(HEAPF32[($1_1 + 384 | 0) >> 2]);
       $30_1 = Math_fround(HEAPF32[($1_1 + 404 | 0) >> 2]);
       $10_1 = Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]);
       $31_1 = Math_fround(HEAPF32[($1_1 + 372 | 0) >> 2]);
       $11_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
       $32_1 = Math_fround(HEAPF32[($1_1 + 388 | 0) >> 2]);
       $12_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
       $13_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
       HEAP32[($2_1 + 172 | 0) >> 2] = 0;
       HEAP32[($2_1 + 156 | 0) >> 2] = 0;
       HEAP32[($2_1 + 140 | 0) >> 2] = 0;
       HEAPF32[($2_1 + 152 | 0) >> 2] = Math_fround(Math_fround(Math_fround($31_1 * $11_1) + Math_fround($32_1 * $12_1)) + Math_fround($30_1 * $10_1));
       HEAPF32[($2_1 + 148 | 0) >> 2] = Math_fround(Math_fround(Math_fround($28_1 * $11_1) + Math_fround($29_1 * $12_1)) + Math_fround($27_1 * $10_1));
       HEAPF32[($2_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $11_1) + Math_fround($26_1 * $12_1)) + Math_fround($19_1 * $10_1));
       HEAPF32[($2_1 + 136 | 0) >> 2] = Math_fround(Math_fround(Math_fround($31_1 * $8_1) + Math_fround($32_1 * $9_1)) + Math_fround($30_1 * $18_1));
       HEAPF32[($2_1 + 132 | 0) >> 2] = Math_fround(Math_fround(Math_fround($28_1 * $8_1) + Math_fround($29_1 * $9_1)) + Math_fround($27_1 * $18_1));
       HEAPF32[($2_1 + 168 | 0) >> 2] = Math_fround($24_1 + Math_fround(Math_fround(Math_fround($11_1 * $15_1) + Math_fround($12_1 * $16_1)) + Math_fround($10_1 * $14_1)));
       HEAPF32[($2_1 + 164 | 0) >> 2] = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($8_1 * $15_1) + Math_fround($9_1 * $16_1)) + Math_fround($18_1 * $14_1)));
       HEAPF32[($2_1 + 160 | 0) >> 2] = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($13_1 * $15_1) + Math_fround($21_1 * $16_1)) + Math_fround($17_1 * $14_1)));
       HEAP32[($2_1 + 124 | 0) >> 2] = 0;
       HEAPF32[($2_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $8_1) + Math_fround($26_1 * $9_1)) + Math_fround($19_1 * $18_1));
       HEAPF32[($2_1 + 120 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $31_1) + Math_fround($21_1 * $32_1)) + Math_fround($17_1 * $30_1));
       HEAPF32[($2_1 + 116 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $28_1) + Math_fround($21_1 * $29_1)) + Math_fround($17_1 * $27_1));
       HEAPF32[($2_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $13_1) + Math_fround($26_1 * $21_1)) + Math_fround($19_1 * $17_1));
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($4_1, $2_1 + 112 | 0, $5_1);
       break label$10;
      }
      $4_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      $22_1 = Math_fround(HEAPF32[($4_1 + 52 | 0) >> 2]);
      $23_1 = Math_fround(HEAPF32[($4_1 + 56 | 0) >> 2]);
      $24_1 = Math_fround(HEAPF32[($4_1 + 60 | 0) >> 2]);
      $14_1 = Math_fround(HEAPF32[($1_1 + 420 | 0) >> 2]);
      $15_1 = Math_fround(HEAPF32[($1_1 + 412 | 0) >> 2]);
      $16_1 = Math_fround(HEAPF32[($1_1 + 416 | 0) >> 2]);
      $21_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
      $17_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
      $18_1 = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
      $8_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
      $9_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
      $19_1 = Math_fround(HEAPF32[($1_1 + 396 | 0) >> 2]);
      $25_1 = Math_fround(HEAPF32[($1_1 + 364 | 0) >> 2]);
      $26_1 = Math_fround(HEAPF32[($1_1 + 380 | 0) >> 2]);
      $27_1 = Math_fround(HEAPF32[($1_1 + 400 | 0) >> 2]);
      $28_1 = Math_fround(HEAPF32[($1_1 + 368 | 0) >> 2]);
      $29_1 = Math_fround(HEAPF32[($1_1 + 384 | 0) >> 2]);
      $30_1 = Math_fround(HEAPF32[($1_1 + 404 | 0) >> 2]);
      $10_1 = Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]);
      $31_1 = Math_fround(HEAPF32[($1_1 + 372 | 0) >> 2]);
      $11_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
      $32_1 = Math_fround(HEAPF32[($1_1 + 388 | 0) >> 2]);
      $12_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
      $13_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
      HEAP32[($2_1 + 172 | 0) >> 2] = 0;
      HEAP32[($2_1 + 156 | 0) >> 2] = 0;
      HEAP32[($2_1 + 140 | 0) >> 2] = 0;
      HEAP32[($2_1 + 124 | 0) >> 2] = 0;
      HEAPF32[($2_1 + 152 | 0) >> 2] = Math_fround(Math_fround(Math_fround($31_1 * $11_1) + Math_fround($32_1 * $12_1)) + Math_fround($30_1 * $10_1));
      HEAPF32[($2_1 + 148 | 0) >> 2] = Math_fround(Math_fround(Math_fround($28_1 * $11_1) + Math_fround($29_1 * $12_1)) + Math_fround($27_1 * $10_1));
      HEAPF32[($2_1 + 144 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $11_1) + Math_fround($26_1 * $12_1)) + Math_fround($19_1 * $10_1));
      HEAPF32[($2_1 + 136 | 0) >> 2] = Math_fround(Math_fround(Math_fround($31_1 * $8_1) + Math_fround($32_1 * $9_1)) + Math_fround($30_1 * $18_1));
      HEAPF32[($2_1 + 132 | 0) >> 2] = Math_fround(Math_fround(Math_fround($28_1 * $8_1) + Math_fround($29_1 * $9_1)) + Math_fround($27_1 * $18_1));
      HEAPF32[($2_1 + 128 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $8_1) + Math_fround($26_1 * $9_1)) + Math_fround($19_1 * $18_1));
      HEAPF32[($2_1 + 120 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $31_1) + Math_fround($21_1 * $32_1)) + Math_fround($17_1 * $30_1));
      HEAPF32[($2_1 + 116 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $28_1) + Math_fround($21_1 * $29_1)) + Math_fround($17_1 * $27_1));
      HEAPF32[($2_1 + 112 | 0) >> 2] = Math_fround(Math_fround(Math_fround($25_1 * $13_1) + Math_fround($26_1 * $21_1)) + Math_fround($19_1 * $17_1));
      HEAPF32[($2_1 + 168 | 0) >> 2] = Math_fround($24_1 + Math_fround(Math_fround(Math_fround($11_1 * $15_1) + Math_fround($12_1 * $16_1)) + Math_fround($10_1 * $14_1)));
      HEAPF32[($2_1 + 164 | 0) >> 2] = Math_fround($23_1 + Math_fround(Math_fround(Math_fround($8_1 * $15_1) + Math_fround($9_1 * $16_1)) + Math_fround($18_1 * $14_1)));
      HEAPF32[($2_1 + 160 | 0) >> 2] = Math_fround($22_1 + Math_fround(Math_fround(Math_fround($13_1 * $15_1) + Math_fround($21_1 * $16_1)) + Math_fround($17_1 * $14_1)));
     }
     if (!$3_1) {
      break label$1
     }
     $928($2_1 + 96 | 0 | 0, $1_1 | 0, Math_fround(Math_fround(6.0868353843688965)), Math_fround($5_1));
     HEAP32[($2_1 + 108 | 0) >> 2] = 0;
     $21_1 = Math_fround(HEAPF32[($2_1 + 96 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($2_1 + 100 | 0) >> 2]);
     $18_1 = Math_fround(HEAPF32[($2_1 + 104 | 0) >> 2]);
     HEAPF32[($2_1 + 104 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21_1 * Math_fround(HEAPF32[($2_1 + 144 | 0) >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($2_1 + 148 | 0) >> 2]))) + Math_fround($18_1 * Math_fround(HEAPF32[($2_1 + 152 | 0) >> 2]))) + Math_fround(HEAPF32[($2_1 + 168 | 0) >> 2]));
     HEAPF32[($2_1 + 100 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21_1 * Math_fround(HEAPF32[($2_1 + 128 | 0) >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($2_1 + 132 | 0) >> 2]))) + Math_fround($18_1 * Math_fround(HEAPF32[($2_1 + 136 | 0) >> 2]))) + Math_fround(HEAPF32[($2_1 + 164 | 0) >> 2]));
     HEAPF32[($2_1 + 96 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21_1 * Math_fround(HEAPF32[($2_1 + 112 | 0) >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($2_1 + 116 | 0) >> 2]))) + Math_fround($18_1 * Math_fround(HEAPF32[($2_1 + 120 | 0) >> 2]))) + Math_fround(HEAPF32[($2_1 + 160 | 0) >> 2]));
     $7_1 = $2_1 + 160 | 0;
     $6_1 = ($2_1 + 64 | 0) + 8 | 0;
     $3_1 = 0;
     label$12 : while (1) {
      $928($2_1 + 80 | 0 | 0, $1_1 | 0, Math_fround(Math_fround(Math_fround(Math_fround($3_1 | 0) * Math_fround(6.283185005187988)) * Math_fround(.03125))), Math_fround($5_1));
      HEAP32[($2_1 + 92 | 0) >> 2] = 0;
      $21_1 = Math_fround(HEAPF32[($2_1 + 80 | 0) >> 2]);
      $17_1 = Math_fround(HEAPF32[($2_1 + 84 | 0) >> 2]);
      $18_1 = Math_fround(HEAPF32[($2_1 + 88 | 0) >> 2]);
      HEAPF32[($2_1 + 88 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21_1 * Math_fround(HEAPF32[($2_1 + 144 | 0) >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($2_1 + 148 | 0) >> 2]))) + Math_fround($18_1 * Math_fround(HEAPF32[($2_1 + 152 | 0) >> 2]))) + Math_fround(HEAPF32[($2_1 + 168 | 0) >> 2]));
      HEAPF32[($2_1 + 84 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21_1 * Math_fround(HEAPF32[($2_1 + 128 | 0) >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($2_1 + 132 | 0) >> 2]))) + Math_fround($18_1 * Math_fround(HEAPF32[($2_1 + 136 | 0) >> 2]))) + Math_fround(HEAPF32[($2_1 + 164 | 0) >> 2]));
      HEAPF32[($2_1 + 80 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($21_1 * Math_fround(HEAPF32[($2_1 + 112 | 0) >> 2])) + Math_fround($17_1 * Math_fround(HEAPF32[($2_1 + 116 | 0) >> 2]))) + Math_fround($18_1 * Math_fround(HEAPF32[($2_1 + 120 | 0) >> 2]))) + Math_fround(HEAPF32[($2_1 + 160 | 0) >> 2]));
      $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = 0;
      HEAP32[($2_1 + 64 | 0) >> 2] = 0;
      HEAP32[($2_1 + 68 | 0) >> 2] = i64toi32_i32$0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($4_1, $2_1 + 96 | 0, $2_1 + 80 | 0, $2_1 + 64 | 0);
      label$13 : {
       if ($3_1 & 3 | 0) {
        break label$13
       }
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
       i64toi32_i32$1 = $6_1;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2_1;
       i64toi32_i32$0 = 0;
       HEAP32[($2_1 + 64 | 0) >> 2] = 0;
       HEAP32[($2_1 + 68 | 0) >> 2] = i64toi32_i32$0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($4_1, $7_1, $2_1 + 80 | 0, $2_1 + 64 | 0);
      }
      i64toi32_i32$2 = ($2_1 + 80 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2014 = i64toi32_i32$0;
      i64toi32_i32$0 = ($2_1 + 96 | 0) + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $2014;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = HEAP32[($2_1 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($2_1 + 84 | 0) >> 2] | 0;
      $2017 = i64toi32_i32$1;
      i64toi32_i32$1 = $2_1;
      HEAP32[($2_1 + 96 | 0) >> 2] = $2017;
      HEAP32[($2_1 + 100 | 0) >> 2] = i64toi32_i32$0;
      $3_1 = $3_1 + 1 | 0;
      if (($3_1 | 0) != (32 | 0)) {
       continue label$12
      }
      break label$12;
     };
     $21_1 = Math_fround(HEAPF32[($1_1 + 512 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($1_1 + 452 | 0) >> 2]);
     label$14 : {
      label$15 : {
       $3_1 = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
       if (!(Math_fround(HEAPF32[($3_1 + 404 | 0) >> 2]) > Math_fround(0.0))) {
        break label$15
       }
       $8_1 = Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]);
       $18_1 = Math_fround(HEAPF32[($1_1 + 412 | 0) >> 2]);
       $9_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
       $13_1 = Math_fround(HEAPF32[($1_1 + 416 | 0) >> 2]);
       $16_1 = Math_fround(Math_fround($8_1 * $18_1) + Math_fround($9_1 * $13_1));
       $10_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
       $11_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
       $12_1 = Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]);
       $30_1 = Math_fround(HEAPF32[($1_1 + 420 | 0) >> 2]);
       $19_1 = Math_fround(Math_fround(Math_fround($10_1 * $18_1) + Math_fround($11_1 * $13_1)) + Math_fround($12_1 * $30_1));
       $26_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
       $27_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
       $28_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
       $25_1 = Math_fround(Math_fround(Math_fround($26_1 * $18_1) + Math_fround($27_1 * $13_1)) + Math_fround($28_1 * $30_1));
       $15_1 = Math_fround(HEAPF32[($1_1 + 372 | 0) >> 2]);
       $31_1 = Math_fround(HEAPF32[($1_1 + 388 | 0) >> 2]);
       $32_1 = Math_fround(HEAPF32[($1_1 + 404 | 0) >> 2]);
       $29_1 = Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]);
       $13_1 = Math_fround(Math_fround(Math_fround($15_1 * $8_1) + Math_fround($31_1 * $9_1)) + Math_fround($32_1 * $29_1));
       $22_1 = Math_fround(HEAPF32[($1_1 + 368 | 0) >> 2]);
       $23_1 = Math_fround(HEAPF32[($1_1 + 384 | 0) >> 2]);
       $24_1 = Math_fround(HEAPF32[($1_1 + 400 | 0) >> 2]);
       $18_1 = Math_fround(Math_fround(Math_fround($22_1 * $8_1) + Math_fround($23_1 * $9_1)) + Math_fround($24_1 * $29_1));
       $33_1 = Math_fround(HEAPF32[($1_1 + 364 | 0) >> 2]);
       $34_1 = Math_fround(HEAPF32[($1_1 + 380 | 0) >> 2]);
       $35_1 = Math_fround(HEAPF32[($1_1 + 396 | 0) >> 2]);
       $8_1 = Math_fround(Math_fround(Math_fround($33_1 * $8_1) + Math_fround($34_1 * $9_1)) + Math_fround($35_1 * $29_1));
       $14_1 = Math_fround(Math_fround(Math_fround($15_1 * $10_1) + Math_fround($31_1 * $11_1)) + Math_fround($32_1 * $12_1));
       $9_1 = Math_fround(Math_fround(Math_fround($22_1 * $10_1) + Math_fround($23_1 * $11_1)) + Math_fround($24_1 * $12_1));
       $10_1 = Math_fround(Math_fround(Math_fround($33_1 * $10_1) + Math_fround($34_1 * $11_1)) + Math_fround($35_1 * $12_1));
       $15_1 = Math_fround(Math_fround(Math_fround($26_1 * $15_1) + Math_fround($27_1 * $31_1)) + Math_fround($28_1 * $32_1));
       $11_1 = Math_fround(Math_fround(Math_fround($26_1 * $22_1) + Math_fround($27_1 * $23_1)) + Math_fround($28_1 * $24_1));
       $12_1 = Math_fround(Math_fround(Math_fround($33_1 * $26_1) + Math_fround($34_1 * $27_1)) + Math_fround($35_1 * $28_1));
       $26_1 = Math_fround($29_1 * $30_1);
       break label$14;
      }
      $3_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      $8_1 = Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]);
      $18_1 = Math_fround(HEAPF32[($1_1 + 348 | 0) >> 2]);
      $9_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
      $13_1 = Math_fround(HEAPF32[($1_1 + 352 | 0) >> 2]);
      $16_1 = Math_fround(Math_fround($8_1 * $18_1) + Math_fround($9_1 * $13_1));
      $10_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
      $11_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
      $12_1 = Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]);
      $30_1 = Math_fround(HEAPF32[($1_1 + 356 | 0) >> 2]);
      $19_1 = Math_fround(Math_fround(Math_fround($10_1 * $18_1) + Math_fround($11_1 * $13_1)) + Math_fround($12_1 * $30_1));
      $26_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
      $27_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
      $28_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
      $25_1 = Math_fround(Math_fround(Math_fround($26_1 * $18_1) + Math_fround($27_1 * $13_1)) + Math_fround($28_1 * $30_1));
      $15_1 = Math_fround(HEAPF32[($1_1 + 308 | 0) >> 2]);
      $31_1 = Math_fround(HEAPF32[($1_1 + 324 | 0) >> 2]);
      $32_1 = Math_fround(HEAPF32[($1_1 + 340 | 0) >> 2]);
      $29_1 = Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]);
      $13_1 = Math_fround(Math_fround(Math_fround($15_1 * $8_1) + Math_fround($31_1 * $9_1)) + Math_fround($32_1 * $29_1));
      $22_1 = Math_fround(HEAPF32[($1_1 + 304 | 0) >> 2]);
      $23_1 = Math_fround(HEAPF32[($1_1 + 320 | 0) >> 2]);
      $24_1 = Math_fround(HEAPF32[($1_1 + 336 | 0) >> 2]);
      $18_1 = Math_fround(Math_fround(Math_fround($22_1 * $8_1) + Math_fround($23_1 * $9_1)) + Math_fround($24_1 * $29_1));
      $33_1 = Math_fround(HEAPF32[($1_1 + 300 | 0) >> 2]);
      $34_1 = Math_fround(HEAPF32[($1_1 + 316 | 0) >> 2]);
      $35_1 = Math_fround(HEAPF32[($1_1 + 332 | 0) >> 2]);
      $8_1 = Math_fround(Math_fround(Math_fround($33_1 * $8_1) + Math_fround($34_1 * $9_1)) + Math_fround($35_1 * $29_1));
      $14_1 = Math_fround(Math_fround(Math_fround($15_1 * $10_1) + Math_fround($31_1 * $11_1)) + Math_fround($32_1 * $12_1));
      $9_1 = Math_fround(Math_fround(Math_fround($22_1 * $10_1) + Math_fround($23_1 * $11_1)) + Math_fround($24_1 * $12_1));
      $10_1 = Math_fround(Math_fround(Math_fround($33_1 * $10_1) + Math_fround($34_1 * $11_1)) + Math_fround($35_1 * $12_1));
      $15_1 = Math_fround(Math_fround(Math_fround($26_1 * $15_1) + Math_fround($27_1 * $31_1)) + Math_fround($28_1 * $32_1));
      $11_1 = Math_fround(Math_fround(Math_fround($26_1 * $22_1) + Math_fround($27_1 * $23_1)) + Math_fround($28_1 * $24_1));
      $12_1 = Math_fround(Math_fround(Math_fround($33_1 * $26_1) + Math_fround($34_1 * $27_1)) + Math_fround($35_1 * $28_1));
      $26_1 = Math_fround($29_1 * $30_1);
     }
     HEAP32[($2_1 + 156 | 0) >> 2] = 0;
     HEAPF32[($2_1 + 152 | 0) >> 2] = $13_1;
     HEAPF32[($2_1 + 148 | 0) >> 2] = $18_1;
     HEAPF32[($2_1 + 144 | 0) >> 2] = $8_1;
     HEAP32[($2_1 + 140 | 0) >> 2] = 0;
     HEAPF32[($2_1 + 136 | 0) >> 2] = $14_1;
     HEAPF32[($2_1 + 132 | 0) >> 2] = $9_1;
     HEAPF32[($2_1 + 128 | 0) >> 2] = $10_1;
     HEAP32[($2_1 + 124 | 0) >> 2] = 0;
     HEAPF32[($2_1 + 120 | 0) >> 2] = $15_1;
     HEAPF32[($2_1 + 116 | 0) >> 2] = $11_1;
     HEAPF32[($2_1 + 112 | 0) >> 2] = $12_1;
     $13_1 = Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]);
     $14_1 = Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]);
     $15_1 = Math_fround(HEAPF32[($3_1 + 60 | 0) >> 2]);
     HEAP32[($2_1 + 172 | 0) >> 2] = 0;
     HEAPF32[($2_1 + 168 | 0) >> 2] = Math_fround($15_1 + Math_fround($16_1 + $26_1));
     HEAPF32[($2_1 + 164 | 0) >> 2] = Math_fround($19_1 + $14_1);
     HEAPF32[($2_1 + 160 | 0) >> 2] = Math_fround($13_1 + $25_1);
     i64toi32_i32$2 = $7_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2460 = i64toi32_i32$0;
     i64toi32_i32$0 = ($2_1 + 80 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $2460;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2463 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 80 | 0) >> 2] = $2463;
     HEAP32[($2_1 + 84 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($2_1 + 76 | 0) >> 2] = 0;
     HEAPF32[($2_1 + 72 | 0) >> 2] = $8_1;
     HEAPF32[($2_1 + 68 | 0) >> 2] = $10_1;
     HEAPF32[($2_1 + 64 | 0) >> 2] = $12_1;
     HEAP32[($2_1 + 60 | 0) >> 2] = 0;
     HEAPF32[($2_1 + 56 | 0) >> 2] = $18_1;
     HEAPF32[($2_1 + 52 | 0) >> 2] = $9_1;
     HEAPF32[($2_1 + 48 | 0) >> 2] = $11_1;
     $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
     i64toi32_i32$1 = ($2_1 + 32 | 0) + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     HEAP32[($2_1 + 32 | 0) >> 2] = 0;
     HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($1_1, $2_1 + 80 | 0, $2_1 + 64 | 0, $2_1 + 48 | 0, $5_1, $5_1, Math_fround(Math_fround(-$21_1) - $17_1), Math_fround($17_1 - $21_1), $2_1 + 32 | 0, 1, Math_fround(10.0));
     break label$1;
    case 3:
    case 6:
     $36_1 = ($2_1 + 112 | 0) + 8 | 0;
     i64toi32_i32$2 = $1_1 + 1072 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2514 = i64toi32_i32$0;
     i64toi32_i32$0 = $36_1;
     HEAP32[i64toi32_i32$0 >> 2] = $2514;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 1088 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2519 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1 + 136 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $2519;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 1104 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2524 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + 152 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $2524;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 1120 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2529 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1 + 168 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $2529;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $37_1 = $1_1 + 1064 | 0;
     i64toi32_i32$2 = $37_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2534 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1;
     HEAP32[($2_1 + 112 | 0) >> 2] = $2534;
     HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$1;
     $38_1 = $1_1 + 1080 | 0;
     i64toi32_i32$2 = $38_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2539 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 128 | 0) >> 2] = $2539;
     HEAP32[($2_1 + 132 | 0) >> 2] = i64toi32_i32$0;
     $39_1 = $1_1 + 1096 | 0;
     i64toi32_i32$2 = $39_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2544 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1;
     HEAP32[($2_1 + 144 | 0) >> 2] = $2544;
     HEAP32[($2_1 + 148 | 0) >> 2] = i64toi32_i32$1;
     $40_1 = $1_1 + 1112 | 0;
     i64toi32_i32$2 = $40_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2549 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 160 | 0) >> 2] = $2549;
     HEAP32[($2_1 + 164 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $2_1 + 160 | 0;
     $7_1 = $2_1 + 144 | 0;
     $20_1 = $2_1 + 128 | 0;
     label$16 : {
      label$17 : {
       if (!$4_1) {
        break label$17
       }
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($4_1, $2_1 + 112 | 0, $5_1);
       i64toi32_i32$2 = $1_1 + 1184 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $2574 = i64toi32_i32$0;
       i64toi32_i32$0 = $6_1 + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $2574;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $1_1 + 1176 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $2578 = i64toi32_i32$1;
       i64toi32_i32$1 = $6_1;
       HEAP32[i64toi32_i32$1 >> 2] = $2578;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $1_1 + 1144 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $2582 = i64toi32_i32$0;
       i64toi32_i32$0 = $20_1;
       HEAP32[i64toi32_i32$0 >> 2] = $2582;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $1_1 + 1152 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $2587 = i64toi32_i32$1;
       i64toi32_i32$1 = $20_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $2587;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $1_1 + 1160 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $2591 = i64toi32_i32$0;
       i64toi32_i32$0 = $7_1;
       HEAP32[i64toi32_i32$0 >> 2] = $2591;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $1_1 + 1168 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $2596 = i64toi32_i32$1;
       i64toi32_i32$1 = $7_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $2596;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $1_1 + 1136 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $2600 = i64toi32_i32$0;
       i64toi32_i32$0 = $36_1;
       HEAP32[i64toi32_i32$0 >> 2] = $2600;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $1_1 + 1128 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $2604 = i64toi32_i32$1;
       i64toi32_i32$1 = $2_1;
       HEAP32[($2_1 + 112 | 0) >> 2] = $2604;
       HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$0;
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($4_1, $2_1 + 112 | 0, $5_1);
       break label$16;
      }
      i64toi32_i32$2 = $1_1 + 1136 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2620 = i64toi32_i32$0;
      i64toi32_i32$0 = $36_1;
      HEAP32[i64toi32_i32$0 >> 2] = $2620;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1 + 1144 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2624 = i64toi32_i32$1;
      i64toi32_i32$1 = $20_1;
      HEAP32[i64toi32_i32$1 >> 2] = $2624;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $1_1 + 1152 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2629 = i64toi32_i32$0;
      i64toi32_i32$0 = $20_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $2629;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1 + 1160 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2633 = i64toi32_i32$1;
      i64toi32_i32$1 = $7_1;
      HEAP32[i64toi32_i32$1 >> 2] = $2633;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $1_1 + 1168 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2638 = i64toi32_i32$0;
      i64toi32_i32$0 = $7_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $2638;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1 + 1176 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2642 = i64toi32_i32$1;
      i64toi32_i32$1 = $6_1;
      HEAP32[i64toi32_i32$1 >> 2] = $2642;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $1_1 + 1184 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2647 = i64toi32_i32$0;
      i64toi32_i32$0 = $6_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $2647;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1 + 1128 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $2651 = i64toi32_i32$1;
      i64toi32_i32$1 = $2_1;
      HEAP32[($2_1 + 112 | 0) >> 2] = $2651;
      HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$0;
     }
     if (!$3_1) {
      break label$1
     }
     i64toi32_i32$2 = $38_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2656 = i64toi32_i32$0;
     i64toi32_i32$0 = $20_1;
     HEAP32[i64toi32_i32$0 >> 2] = $2656;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $39_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2659 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1;
     HEAP32[i64toi32_i32$1 >> 2] = $2659;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $40_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2662 = i64toi32_i32$0;
     i64toi32_i32$0 = $6_1;
     HEAP32[i64toi32_i32$0 >> 2] = $2662;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $36_1 = ($2_1 + 112 | 0) + 8 | 0;
     i64toi32_i32$2 = $37_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $41_1 = i64toi32_i32$1;
     $41$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $36_1;
     HEAP32[i64toi32_i32$1 >> 2] = $41_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $42_1 = $20_1 + 8 | 0;
     i64toi32_i32$2 = $38_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2676 = i64toi32_i32$0;
     i64toi32_i32$0 = $42_1;
     HEAP32[i64toi32_i32$0 >> 2] = $2676;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $43_1 = $7_1 + 8 | 0;
     i64toi32_i32$2 = $39_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2682 = i64toi32_i32$1;
     i64toi32_i32$1 = $43_1;
     HEAP32[i64toi32_i32$1 >> 2] = $2682;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $44_1 = $6_1 + 8 | 0;
     i64toi32_i32$2 = $40_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2688 = i64toi32_i32$0;
     i64toi32_i32$0 = $44_1;
     HEAP32[i64toi32_i32$0 >> 2] = $2688;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $37_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2691 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 112 | 0) >> 2] = $2691;
     HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $41$hi;
     HEAP32[($2_1 + 96 | 0) >> 2] = $41_1;
     HEAP32[($2_1 + 100 | 0) >> 2] = HEAP32[($2_1 + 136 | 0) >> 2] | 0;
     HEAP32[($2_1 + 108 | 0) >> 2] = 0;
     HEAP32[($2_1 + 104 | 0) >> 2] = HEAP32[($2_1 + 152 | 0) >> 2] | 0;
     HEAP32[($2_1 + 80 | 0) >> 2] = HEAP32[($2_1 + 112 | 0) >> 2] | 0;
     HEAP32[($2_1 + 84 | 0) >> 2] = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
     HEAP32[($2_1 + 92 | 0) >> 2] = 0;
     HEAP32[($2_1 + 88 | 0) >> 2] = HEAP32[($2_1 + 144 | 0) >> 2] | 0;
     $21_1 = Math_fround(HEAPF32[($1_1 + 932 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($1_1 + 936 | 0) >> 2]);
     $18_1 = Math_fround(HEAPF32[($1_1 + 996 | 0) >> 2]);
     $8_1 = Math_fround(HEAPF32[($1_1 + 1e3 | 0) >> 2]);
     $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
     i64toi32_i32$1 = ($2_1 + 64 | 0) + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     HEAP32[($2_1 + 64 | 0) >> 2] = 0;
     HEAP32[($2_1 + 68 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = $1_1 + 1176 | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 72 | 0) >> 2] | 0]($3_1, $4_1, $2_1 + 96 | 0, $2_1 + 80 | 0, Math_fround($5_1 * Math_fround(.8999999761581421)), $21_1, $17_1, $18_1, $8_1, $2_1 + 64 | 0, Math_fround(10.0), 1);
     HEAP32[($2_1 + 92 | 0) >> 2] = 0;
     HEAP32[($2_1 + 88 | 0) >> 2] = HEAP32[($2_1 + 148 | 0) >> 2] | 0;
     HEAP32[($2_1 + 84 | 0) >> 2] = HEAP32[($2_1 + 132 | 0) >> 2] | 0;
     HEAP32[($2_1 + 80 | 0) >> 2] = HEAP32[($2_1 + 116 | 0) >> 2] | 0;
     $18_1 = Math_fround($929($1_1 | 0, 1 | 0));
     $8_1 = Math_fround($929($1_1 | 0, 2 | 0));
     i64toi32_i32$2 = $1_1 + 1136 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2772 = i64toi32_i32$0;
     i64toi32_i32$0 = $36_1;
     HEAP32[i64toi32_i32$0 >> 2] = $2772;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 1144 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2776 = i64toi32_i32$1;
     i64toi32_i32$1 = $20_1;
     HEAP32[i64toi32_i32$1 >> 2] = $2776;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 1152 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2780 = i64toi32_i32$0;
     i64toi32_i32$0 = $42_1;
     HEAP32[i64toi32_i32$0 >> 2] = $2780;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 1160 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2784 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1;
     HEAP32[i64toi32_i32$1 >> 2] = $2784;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 1168 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2788 = i64toi32_i32$0;
     i64toi32_i32$0 = $43_1;
     HEAP32[i64toi32_i32$0 >> 2] = $2788;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 1128 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2792 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 112 | 0) >> 2] = $2792;
     HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$0;
     $21_1 = Math_fround($496(Math_fround($8_1)));
     $17_1 = Math_fround(HEAPF32[($2_1 + 80 | 0) >> 2]);
     $8_1 = Math_fround($497(Math_fround($8_1)));
     $9_1 = Math_fround(HEAPF32[($2_1 + 84 | 0) >> 2]);
     HEAPF32[($2_1 + 68 | 0) >> 2] = Math_fround(Math_fround($8_1 * $9_1) - Math_fround($21_1 * $17_1));
     $10_1 = Math_fround($496(Math_fround($18_1)));
     $18_1 = Math_fround($497(Math_fround($18_1)));
     $11_1 = Math_fround(HEAPF32[($2_1 + 88 | 0) >> 2]);
     HEAPF32[($2_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * Math_fround($8_1 * $10_1)) + Math_fround($9_1 * Math_fround($10_1 * $21_1))) + Math_fround($18_1 * $11_1));
     HEAPF32[($2_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround($17_1 * Math_fround($18_1 * $8_1)) + Math_fround($9_1 * Math_fround($18_1 * $21_1))) - Math_fround($10_1 * $11_1));
     i64toi32_i32$2 = $1_1 + 1184 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2850 = i64toi32_i32$0;
     i64toi32_i32$0 = $44_1;
     HEAP32[i64toi32_i32$0 >> 2] = $2850;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2853 = i64toi32_i32$1;
     i64toi32_i32$1 = $6_1;
     HEAP32[i64toi32_i32$1 >> 2] = $2853;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($2_1 + 60 | 0) >> 2] = 0;
     HEAPF32[($2_1 + 56 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($2_1 + 144 | 0) >> 2]));
     HEAPF32[($2_1 + 52 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($2_1 + 128 | 0) >> 2]));
     HEAPF32[($2_1 + 48 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($2_1 + 112 | 0) >> 2]));
     label$18 : {
      label$19 : {
       $21_1 = Math_fround(HEAPF32[($1_1 + 868 | 0) >> 2]);
       $17_1 = Math_fround(HEAPF32[($1_1 + 872 | 0) >> 2]);
       if ($21_1 > $17_1 ^ 1 | 0) {
        break label$19
       }
       $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
       i64toi32_i32$1 = ($2_1 + 32 | 0) + 8 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2_1;
       i64toi32_i32$0 = 0;
       HEAP32[($2_1 + 32 | 0) >> 2] = 0;
       HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($3_1, $4_1, $2_1 + 48 | 0, $2_1 + 64 | 0, $5_1, $5_1, Math_fround(-3.1415927410125732), Math_fround(3.1415927410125732), $2_1 + 32 | 0, 0, Math_fround(10.0));
       break label$18;
      }
      if ($21_1 < $17_1 ^ 1 | 0) {
       break label$18
      }
      $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
      i64toi32_i32$1 = $2_1 + 40 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($3_1, $4_1, $2_1 + 48 | 0, $2_1 + 64 | 0, $5_1, $5_1, $21_1, $17_1, $2_1 + 32 | 0, 1, Math_fround(10.0));
     }
     i64toi32_i32$2 = $38_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2928 = i64toi32_i32$0;
     i64toi32_i32$0 = $20_1;
     HEAP32[i64toi32_i32$0 >> 2] = $2928;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $39_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2931 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1;
     HEAP32[i64toi32_i32$1 >> 2] = $2931;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $40_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2934 = i64toi32_i32$0;
     i64toi32_i32$0 = $6_1;
     HEAP32[i64toi32_i32$0 >> 2] = $2934;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $37_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2940 = i64toi32_i32$1;
     i64toi32_i32$1 = ($2_1 + 112 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $2940;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $38_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2945 = i64toi32_i32$0;
     i64toi32_i32$0 = $20_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $2945;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $39_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2950 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $2950;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $40_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2955 = i64toi32_i32$0;
     i64toi32_i32$0 = $6_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $2955;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $37_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2958 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 112 | 0) >> 2] = $2958;
     HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 688 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2964 = i64toi32_i32$0;
     i64toi32_i32$0 = ($2_1 + 32 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $2964;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 680 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2968 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 32 | 0) >> 2] = $2968;
     HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 704 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2974 = i64toi32_i32$0;
     i64toi32_i32$0 = ($2_1 + 16 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $2974;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 696 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $2978 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $2978;
     HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
     i64toi32_i32$1 = $2_1 + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 80 | 0) >> 2] | 0]($1_1, $2_1 + 32 | 0, $2_1 + 16 | 0, $2_1 + 112 | 0, $2_1);
     break label$1;
    case 9:
     $36_1 = ($2_1 + 112 | 0) + 8 | 0;
     i64toi32_i32$2 = $1_1 + 1244 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3004 = i64toi32_i32$0;
     i64toi32_i32$0 = $36_1;
     HEAP32[i64toi32_i32$0 >> 2] = $3004;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 1260 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3009 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1 + 136 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $3009;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 1276 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3014 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1 + 152 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $3014;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 1292 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3019 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1 + 168 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $3019;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $37_1 = $1_1 + 1236 | 0;
     i64toi32_i32$2 = $37_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3024 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1;
     HEAP32[($2_1 + 112 | 0) >> 2] = $3024;
     HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$1;
     $38_1 = $1_1 + 1252 | 0;
     i64toi32_i32$2 = $38_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3029 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 128 | 0) >> 2] = $3029;
     HEAP32[($2_1 + 132 | 0) >> 2] = i64toi32_i32$0;
     $39_1 = $1_1 + 1268 | 0;
     i64toi32_i32$2 = $39_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3034 = i64toi32_i32$0;
     i64toi32_i32$0 = $2_1;
     HEAP32[($2_1 + 144 | 0) >> 2] = $3034;
     HEAP32[($2_1 + 148 | 0) >> 2] = i64toi32_i32$1;
     $40_1 = $1_1 + 1284 | 0;
     i64toi32_i32$2 = $40_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3039 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 160 | 0) >> 2] = $3039;
     HEAP32[($2_1 + 164 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $2_1 + 160 | 0;
     $7_1 = $2_1 + 144 | 0;
     $20_1 = $2_1 + 128 | 0;
     label$20 : {
      label$21 : {
       if (!$4_1) {
        break label$21
       }
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($4_1, $2_1 + 112 | 0, $5_1);
       i64toi32_i32$2 = $1_1 + 1356 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $3064 = i64toi32_i32$0;
       i64toi32_i32$0 = $6_1 + 8 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $3064;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $1_1 + 1348 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $3068 = i64toi32_i32$1;
       i64toi32_i32$1 = $6_1;
       HEAP32[i64toi32_i32$1 >> 2] = $3068;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $1_1 + 1316 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $3072 = i64toi32_i32$0;
       i64toi32_i32$0 = $20_1;
       HEAP32[i64toi32_i32$0 >> 2] = $3072;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $1_1 + 1324 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $3077 = i64toi32_i32$1;
       i64toi32_i32$1 = $20_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $3077;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $1_1 + 1332 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $3081 = i64toi32_i32$0;
       i64toi32_i32$0 = $7_1;
       HEAP32[i64toi32_i32$0 >> 2] = $3081;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $1_1 + 1340 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $3086 = i64toi32_i32$1;
       i64toi32_i32$1 = $7_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $3086;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = $1_1 + 1308 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $3090 = i64toi32_i32$0;
       i64toi32_i32$0 = $36_1;
       HEAP32[i64toi32_i32$0 >> 2] = $3090;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = $1_1 + 1300 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $3094 = i64toi32_i32$1;
       i64toi32_i32$1 = $2_1;
       HEAP32[($2_1 + 112 | 0) >> 2] = $3094;
       HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$0;
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($4_1, $2_1 + 112 | 0, $5_1);
       break label$20;
      }
      i64toi32_i32$2 = $1_1 + 1308 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $3110 = i64toi32_i32$0;
      i64toi32_i32$0 = $36_1;
      HEAP32[i64toi32_i32$0 >> 2] = $3110;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1 + 1316 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $3114 = i64toi32_i32$1;
      i64toi32_i32$1 = $20_1;
      HEAP32[i64toi32_i32$1 >> 2] = $3114;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $1_1 + 1324 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $3119 = i64toi32_i32$0;
      i64toi32_i32$0 = $20_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $3119;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1 + 1332 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $3123 = i64toi32_i32$1;
      i64toi32_i32$1 = $7_1;
      HEAP32[i64toi32_i32$1 >> 2] = $3123;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $1_1 + 1340 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $3128 = i64toi32_i32$0;
      i64toi32_i32$0 = $7_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $3128;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1 + 1348 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $3132 = i64toi32_i32$1;
      i64toi32_i32$1 = $6_1;
      HEAP32[i64toi32_i32$1 >> 2] = $3132;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $1_1 + 1356 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $3137 = i64toi32_i32$0;
      i64toi32_i32$0 = $6_1 + 8 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $3137;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $1_1 + 1300 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $3141 = i64toi32_i32$1;
      i64toi32_i32$1 = $2_1;
      HEAP32[($2_1 + 112 | 0) >> 2] = $3141;
      HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$0;
     }
     if (!$3_1) {
      break label$1
     }
     i64toi32_i32$2 = $38_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3146 = i64toi32_i32$0;
     i64toi32_i32$0 = $20_1;
     HEAP32[i64toi32_i32$0 >> 2] = $3146;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $39_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3149 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1;
     HEAP32[i64toi32_i32$1 >> 2] = $3149;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $40_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3152 = i64toi32_i32$0;
     i64toi32_i32$0 = $6_1;
     HEAP32[i64toi32_i32$0 >> 2] = $3152;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $36_1 = ($2_1 + 112 | 0) + 8 | 0;
     i64toi32_i32$2 = $37_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $41_1 = i64toi32_i32$1;
     $41$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $36_1;
     HEAP32[i64toi32_i32$1 >> 2] = $41_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $42_1 = $20_1 + 8 | 0;
     i64toi32_i32$2 = $38_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3166 = i64toi32_i32$0;
     i64toi32_i32$0 = $42_1;
     HEAP32[i64toi32_i32$0 >> 2] = $3166;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $43_1 = $7_1 + 8 | 0;
     i64toi32_i32$2 = $39_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3172 = i64toi32_i32$1;
     i64toi32_i32$1 = $43_1;
     HEAP32[i64toi32_i32$1 >> 2] = $3172;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $44_1 = $6_1 + 8 | 0;
     i64toi32_i32$2 = $40_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3178 = i64toi32_i32$0;
     i64toi32_i32$0 = $44_1;
     HEAP32[i64toi32_i32$0 >> 2] = $3178;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $37_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3181 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 112 | 0) >> 2] = $3181;
     HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $41$hi;
     HEAP32[($2_1 + 96 | 0) >> 2] = $41_1;
     HEAP32[($2_1 + 100 | 0) >> 2] = HEAP32[($2_1 + 136 | 0) >> 2] | 0;
     HEAP32[($2_1 + 108 | 0) >> 2] = 0;
     HEAP32[($2_1 + 104 | 0) >> 2] = HEAP32[($2_1 + 152 | 0) >> 2] | 0;
     HEAP32[($2_1 + 80 | 0) >> 2] = HEAP32[($2_1 + 112 | 0) >> 2] | 0;
     HEAP32[($2_1 + 84 | 0) >> 2] = HEAP32[($2_1 + 128 | 0) >> 2] | 0;
     HEAP32[($2_1 + 92 | 0) >> 2] = 0;
     HEAP32[($2_1 + 88 | 0) >> 2] = HEAP32[($2_1 + 144 | 0) >> 2] | 0;
     $21_1 = Math_fround(HEAPF32[($1_1 + 1060 | 0) >> 2]);
     $17_1 = Math_fround(HEAPF32[($1_1 + 1144 | 0) >> 2]);
     $18_1 = Math_fround(HEAPF32[($1_1 + 1148 | 0) >> 2]);
     $8_1 = Math_fround(HEAPF32[($1_1 + 1056 | 0) >> 2]);
     $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
     i64toi32_i32$1 = ($2_1 + 64 | 0) + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     HEAP32[($2_1 + 64 | 0) >> 2] = 0;
     HEAP32[($2_1 + 68 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = $1_1 + 1348 | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 72 | 0) >> 2] | 0]($3_1, $4_1, $2_1 + 96 | 0, $2_1 + 80 | 0, Math_fround($5_1 * Math_fround(.8999999761581421)), $8_1, $21_1, $17_1, $18_1, $2_1 + 64 | 0, Math_fround(10.0), 1);
     HEAP32[($2_1 + 92 | 0) >> 2] = 0;
     $3_1 = HEAP32[($2_1 + 148 | 0) >> 2] | 0;
     HEAP32[($2_1 + 88 | 0) >> 2] = $3_1;
     $45_1 = HEAP32[($2_1 + 132 | 0) >> 2] | 0;
     HEAP32[($2_1 + 84 | 0) >> 2] = $45_1;
     $46_1 = HEAP32[($2_1 + 116 | 0) >> 2] | 0;
     HEAP32[($2_1 + 80 | 0) >> 2] = $46_1;
     $17_1 = Math_fround(HEAPF32[($1_1 + 1368 | 0) >> 2]);
     $18_1 = Math_fround(HEAPF32[($1_1 + 1372 | 0) >> 2]);
     i64toi32_i32$2 = $1_1 + 1308 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3266 = i64toi32_i32$0;
     i64toi32_i32$0 = $36_1;
     HEAP32[i64toi32_i32$0 >> 2] = $3266;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 1316 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3270 = i64toi32_i32$1;
     i64toi32_i32$1 = $20_1;
     HEAP32[i64toi32_i32$1 >> 2] = $3270;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 1324 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3274 = i64toi32_i32$0;
     i64toi32_i32$0 = $42_1;
     HEAP32[i64toi32_i32$0 >> 2] = $3274;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 1332 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3278 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1;
     HEAP32[i64toi32_i32$1 >> 2] = $3278;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 1340 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3282 = i64toi32_i32$0;
     i64toi32_i32$0 = $43_1;
     HEAP32[i64toi32_i32$0 >> 2] = $3282;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3285 = i64toi32_i32$1;
     i64toi32_i32$1 = $6_1;
     HEAP32[i64toi32_i32$1 >> 2] = $3285;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 1356 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3289 = i64toi32_i32$0;
     i64toi32_i32$0 = $44_1;
     HEAP32[i64toi32_i32$0 >> 2] = $3289;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 1300 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3293 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 112 | 0) >> 2] = $3293;
     HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$0;
     $21_1 = Math_fround($496(Math_fround($18_1)));
     $18_1 = Math_fround($497(Math_fround($18_1)));
     $8_1 = (wasm2js_scratch_store_i32(0, $45_1), wasm2js_scratch_load_f32());
     $9_1 = (wasm2js_scratch_store_i32(0, $46_1), wasm2js_scratch_load_f32());
     HEAPF32[($2_1 + 68 | 0) >> 2] = Math_fround(Math_fround($18_1 * $8_1) - Math_fround($21_1 * $9_1));
     $10_1 = Math_fround($496(Math_fround($17_1)));
     $17_1 = Math_fround($497(Math_fround($17_1)));
     $11_1 = (wasm2js_scratch_store_i32(0, $3_1), wasm2js_scratch_load_f32());
     HEAPF32[($2_1 + 72 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($18_1 * $10_1) * $9_1) + Math_fround(Math_fround($10_1 * $21_1) * $8_1)) + Math_fround($17_1 * $11_1));
     HEAPF32[($2_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($17_1 * $18_1) * $9_1) + Math_fround(Math_fround($17_1 * $21_1) * $8_1)) - Math_fround($10_1 * $11_1));
     HEAP32[($2_1 + 60 | 0) >> 2] = 0;
     HEAPF32[($2_1 + 56 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($2_1 + 144 | 0) >> 2]));
     HEAPF32[($2_1 + 52 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($2_1 + 128 | 0) >> 2]));
     HEAPF32[($2_1 + 48 | 0) >> 2] = Math_fround(-Math_fround(HEAPF32[($2_1 + 112 | 0) >> 2]));
     label$22 : {
      label$23 : {
       $21_1 = Math_fround(HEAPF32[($1_1 + 968 | 0) >> 2]);
       $17_1 = Math_fround(HEAPF32[($1_1 + 972 | 0) >> 2]);
       if ($21_1 > $17_1 ^ 1 | 0) {
        break label$23
       }
       $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
       i64toi32_i32$1 = ($2_1 + 32 | 0) + 8 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2_1;
       i64toi32_i32$0 = 0;
       HEAP32[($2_1 + 32 | 0) >> 2] = 0;
       HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
       FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($3_1, $4_1, $2_1 + 48 | 0, $2_1 + 64 | 0, $5_1, $5_1, Math_fround(-3.1415927410125732), Math_fround(3.1415927410125732), $2_1 + 32 | 0, 0, Math_fround(10.0));
       break label$22;
      }
      if ($21_1 < $17_1 ^ 1 | 0) {
       break label$22
      }
      $3_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
      i64toi32_i32$1 = $2_1 + 40 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$0 = 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
      FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($3_1, $4_1, $2_1 + 48 | 0, $2_1 + 64 | 0, $5_1, $5_1, $21_1, $17_1, $2_1 + 32 | 0, 1, Math_fround(10.0));
     }
     i64toi32_i32$2 = $38_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3422 = i64toi32_i32$0;
     i64toi32_i32$0 = $20_1;
     HEAP32[i64toi32_i32$0 >> 2] = $3422;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $39_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3425 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1;
     HEAP32[i64toi32_i32$1 >> 2] = $3425;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $40_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3428 = i64toi32_i32$0;
     i64toi32_i32$0 = $6_1;
     HEAP32[i64toi32_i32$0 >> 2] = $3428;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $37_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3434 = i64toi32_i32$1;
     i64toi32_i32$1 = ($2_1 + 112 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $3434;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $38_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3439 = i64toi32_i32$0;
     i64toi32_i32$0 = $20_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $3439;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $39_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3444 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $3444;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $40_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3449 = i64toi32_i32$0;
     i64toi32_i32$0 = $6_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $3449;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $37_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3452 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 112 | 0) >> 2] = $3452;
     HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 688 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3458 = i64toi32_i32$0;
     i64toi32_i32$0 = ($2_1 + 32 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $3458;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 680 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3462 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 32 | 0) >> 2] = $3462;
     HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 704 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3468 = i64toi32_i32$0;
     i64toi32_i32$0 = ($2_1 + 16 | 0) + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $3468;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 696 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3472 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 16 | 0) >> 2] = $3472;
     HEAP32[($2_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
     i64toi32_i32$1 = $2_1 + 8 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 80 | 0) >> 2] | 0]($1_1, $2_1 + 32 | 0, $2_1 + 16 | 0, $2_1 + 112 | 0, $2_1);
     break label$1;
    case 5:
    case 7:
    case 8:
     break label$1;
    case 4:
     break label$2;
    };
   }
   $37_1 = ($2_1 + 112 | 0) + 8 | 0;
   i64toi32_i32$2 = $1_1 + 832 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3498 = i64toi32_i32$0;
   i64toi32_i32$0 = $37_1;
   HEAP32[i64toi32_i32$0 >> 2] = $3498;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 848 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3503 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1 + 136 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $3503;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 864 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3508 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1 + 152 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $3508;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 880 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3513 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1 + 168 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $3513;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $38_1 = $1_1 + 824 | 0;
   i64toi32_i32$2 = $38_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3518 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[($2_1 + 112 | 0) >> 2] = $3518;
   HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 840 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3522 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 128 | 0) >> 2] = $3522;
   HEAP32[($2_1 + 132 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 856 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3526 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   HEAP32[($2_1 + 144 | 0) >> 2] = $3526;
   HEAP32[($2_1 + 148 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 872 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3530 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[($2_1 + 160 | 0) >> 2] = $3530;
   HEAP32[($2_1 + 164 | 0) >> 2] = i64toi32_i32$0;
   $6_1 = $2_1 + 160 | 0;
   $7_1 = $2_1 + 144 | 0;
   $20_1 = $2_1 + 128 | 0;
   label$24 : {
    label$25 : {
     if (!$4_1) {
      break label$25
     }
     $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($4_1, $2_1 + 112 | 0, $5_1);
     i64toi32_i32$2 = $1_1 + 944 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3555 = i64toi32_i32$0;
     i64toi32_i32$0 = $6_1 + 8 | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $3555;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 936 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3559 = i64toi32_i32$1;
     i64toi32_i32$1 = $6_1;
     HEAP32[i64toi32_i32$1 >> 2] = $3559;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 904 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3563 = i64toi32_i32$0;
     i64toi32_i32$0 = $20_1;
     HEAP32[i64toi32_i32$0 >> 2] = $3563;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 912 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3568 = i64toi32_i32$1;
     i64toi32_i32$1 = $20_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $3568;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 920 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3572 = i64toi32_i32$0;
     i64toi32_i32$0 = $7_1;
     HEAP32[i64toi32_i32$0 >> 2] = $3572;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 928 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3577 = i64toi32_i32$1;
     i64toi32_i32$1 = $7_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $3577;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $1_1 + 896 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3581 = i64toi32_i32$0;
     i64toi32_i32$0 = $37_1;
     HEAP32[i64toi32_i32$0 >> 2] = $3581;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 888 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $3585 = i64toi32_i32$1;
     i64toi32_i32$1 = $2_1;
     HEAP32[($2_1 + 112 | 0) >> 2] = $3585;
     HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$0;
     $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($4_1, $2_1 + 112 | 0, $5_1);
     break label$24;
    }
    i64toi32_i32$2 = $1_1 + 896 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $3601 = i64toi32_i32$0;
    i64toi32_i32$0 = $37_1;
    HEAP32[i64toi32_i32$0 >> 2] = $3601;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1 + 904 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $3605 = i64toi32_i32$1;
    i64toi32_i32$1 = $20_1;
    HEAP32[i64toi32_i32$1 >> 2] = $3605;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $1_1 + 912 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $3610 = i64toi32_i32$0;
    i64toi32_i32$0 = $20_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $3610;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1 + 920 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $3614 = i64toi32_i32$1;
    i64toi32_i32$1 = $7_1;
    HEAP32[i64toi32_i32$1 >> 2] = $3614;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $1_1 + 928 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $3619 = i64toi32_i32$0;
    i64toi32_i32$0 = $7_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $3619;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1 + 936 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $3623 = i64toi32_i32$1;
    i64toi32_i32$1 = $6_1;
    HEAP32[i64toi32_i32$1 >> 2] = $3623;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $1_1 + 944 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $3628 = i64toi32_i32$0;
    i64toi32_i32$0 = $6_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $3628;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1 + 888 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $3632 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1;
    HEAP32[($2_1 + 112 | 0) >> 2] = $3632;
    HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$0;
   }
   if (!$3_1) {
    break label$1
   }
   $37_1 = HEAPU8[($1_1 + 180 | 0) >> 0] | 0;
   $3_1 = $37_1 ? $38_1 : $1_1 + 888 | 0;
   $21_1 = Math_fround(HEAPF32[($3_1 + 48 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   $4_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $17_1 = Math_fround(HEAPF32[($3_1 + 52 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
   $6_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
   $7_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   $18_1 = Math_fround(HEAPF32[($3_1 + 56 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
   $20_1 = HEAP32[($3_1 + 32 | 0) >> 2] | 0;
   $3_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
   $37_1 = HEAP32[($1_1 + ($37_1 ? 824 : 888) | 0) >> 2] | 0;
   HEAP32[($2_1 + 108 | 0) >> 2] = 0;
   $11_1 = Math_fround($8_1 * Math_fround(0.0));
   $12_1 = Math_fround((wasm2js_scratch_store_i32(0, $3_1), wasm2js_scratch_load_f32()) * Math_fround(0.0));
   $8_1 = Math_fround(HEAPF32[($1_1 + 184 | 0) >> 2]);
   $13_1 = (wasm2js_scratch_store_i32(0, $20_1), wasm2js_scratch_load_f32());
   HEAPF32[($2_1 + 104 | 0) >> 2] = Math_fround($18_1 + Math_fround($11_1 + Math_fround($12_1 + Math_fround($8_1 * $13_1))));
   $10_1 = Math_fround($10_1 * Math_fround(0.0));
   $14_1 = Math_fround((wasm2js_scratch_store_i32(0, $7_1), wasm2js_scratch_load_f32()) * Math_fround(0.0));
   $15_1 = (wasm2js_scratch_store_i32(0, $6_1), wasm2js_scratch_load_f32());
   HEAPF32[($2_1 + 100 | 0) >> 2] = Math_fround($17_1 + Math_fround($10_1 + Math_fround($14_1 + Math_fround($8_1 * $15_1))));
   $9_1 = Math_fround($9_1 * Math_fround(0.0));
   $16_1 = Math_fround((wasm2js_scratch_store_i32(0, $4_1), wasm2js_scratch_load_f32()) * Math_fround(0.0));
   $19_1 = (wasm2js_scratch_store_i32(0, $37_1), wasm2js_scratch_load_f32());
   HEAPF32[($2_1 + 96 | 0) >> 2] = Math_fround($21_1 + Math_fround($9_1 + Math_fround($16_1 + Math_fround($8_1 * $19_1))));
   HEAP32[($2_1 + 92 | 0) >> 2] = 0;
   $8_1 = Math_fround(HEAPF32[($1_1 + 188 | 0) >> 2]);
   HEAPF32[($2_1 + 88 | 0) >> 2] = Math_fround($18_1 + Math_fround($11_1 + Math_fround($12_1 + Math_fround($8_1 * $13_1))));
   HEAPF32[($2_1 + 84 | 0) >> 2] = Math_fround($17_1 + Math_fround($10_1 + Math_fround($14_1 + Math_fround($8_1 * $15_1))));
   HEAPF32[($2_1 + 80 | 0) >> 2] = Math_fround($21_1 + Math_fround($9_1 + Math_fround($16_1 + Math_fround($8_1 * $19_1))));
   $38_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
   i64toi32_i32$1 = ($2_1 + 64 | 0) + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   HEAP32[($2_1 + 64 | 0) >> 2] = 0;
   HEAP32[($2_1 + 68 | 0) >> 2] = i64toi32_i32$0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$38_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($38_1, $2_1 + 96 | 0, $2_1 + 80 | 0, $2_1 + 64 | 0);
   HEAP32[($2_1 + 76 | 0) >> 2] = 0;
   HEAP32[($2_1 + 72 | 0) >> 2] = $20_1;
   HEAP32[($2_1 + 68 | 0) >> 2] = $6_1;
   HEAP32[($2_1 + 64 | 0) >> 2] = $37_1;
   HEAP32[($2_1 + 60 | 0) >> 2] = 0;
   HEAP32[($2_1 + 56 | 0) >> 2] = $3_1;
   HEAP32[($2_1 + 52 | 0) >> 2] = $7_1;
   HEAP32[($2_1 + 48 | 0) >> 2] = $4_1;
   $21_1 = Math_fround(HEAPF32[($1_1 + 196 | 0) >> 2]);
   $17_1 = Math_fround(HEAPF32[($1_1 + 192 | 0) >> 2]);
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($0_1) | 0;
   i64toi32_i32$1 = ($2_1 + 32 | 0) + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = 0;
   HEAP32[($2_1 + 32 | 0) >> 2] = 0;
   HEAP32[($2_1 + 36 | 0) >> 2] = i64toi32_i32$0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($0_1, $1_1 + 936 | 0, $2_1 + 64 | 0, $2_1 + 48 | 0, $5_1, $5_1, $17_1, $21_1, $2_1 + 32 | 0, 1, Math_fround(10.0));
  }
  global$0 = $2_1 + 176 | 0;
 }
 
 function $967($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 289 | 0) >> 0] | 0)) {
    break label$1
   }
   $80(HEAP32[($0_1 + 216 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($0_1 + 216 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 289 | 0) >> 0] = 0;
  HEAP32[((HEAP32[($0_1 + 212 | 0) >> 2] | 0) + 8 | 0) >> 2] = $1_1;
 }
 
 function $968($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 216 | 0) >> 2] | 0 | 0;
 }
 
 function $969($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 228 | 0) >> 2] | 0 | 0;
 }
 
 function $970($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[((HEAP32[($0_1 + 236 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $971($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[((HEAP32[($0_1 + 236 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $972($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  label$1 : {
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (($2_1 | 0) < (1 | 0)) {
    break label$1
   }
   $3_1 = 0;
   $4_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $5_1 = HEAP32[((HEAP32[($0_1 + 16 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
     if (!((HEAPU8[($5_1 + 252 | 0) >> 0] | 0) & 2 | 0)) {
      break label$3
     }
     $2_1 = ((((wasm2js_i32$1 = $1_1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($5_1) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
     (((((wasm2js_i32$3 = $1_1, wasm2js_i32$2 = $2_1), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($5_1, HEAP32[($2_1 + 8 | 0) >> 2] | 0, $1_1) | 0), wasm2js_i32$4 = 1497645650), wasm2js_i32$5 = $5_1), wasm2js_i32$0 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    $3_1 = $3_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < ($2_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$4 : {
   if ((HEAP32[($0_1 + 228 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$4
   }
   $3_1 = 0;
   $4_1 = 0;
   label$5 : while (1) {
    $5_1 = HEAP32[((HEAP32[($0_1 + 236 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
    $2_1 = ((((wasm2js_i32$5 = $1_1, wasm2js_i32$4 = FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($5_1) | 0), wasm2js_i32$1 = 1), wasm2js_i32$0 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$5 | 0, wasm2js_i32$4 | 0, wasm2js_i32$1 | 0) | 0);
    (((((wasm2js_i32$1 = $1_1, wasm2js_i32$4 = $2_1), wasm2js_i32$5 = FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($5_1, HEAP32[($2_1 + 8 | 0) >> 2] | 0, $1_1) | 0), wasm2js_i32$2 = 1397641027), wasm2js_i32$3 = $5_1), wasm2js_i32$0 = HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
    $3_1 = $3_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < (HEAP32[($0_1 + 228 | 0) >> 2] | 0 | 0)) {
     continue label$5
    }
    break label$5;
   };
  }
 }
 
 function $973($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $35_1 = 0, $39_1 = 0, $43_1 = 0, $47_1 = 0, $4_1 = 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($1_1);
  $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($1_1, 104, 1) | 0;
  $3_1 = $17(HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0, 104 | 0) | 0;
  HEAP32[($3_1 + 88 | 0) >> 2] = HEAP32[($0_1 + 264 | 0) >> 2] | 0;
  HEAP32[($3_1 + 92 | 0) >> 2] = HEAP32[($0_1 + 268 | 0) >> 2] | 0;
  HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[($0_1 + 272 | 0) >> 2] | 0;
  HEAP32[($3_1 + 100 | 0) >> 2] = HEAP32[($0_1 + 276 | 0) >> 2] | 0;
  i64toi32_i32$2 = $0_1 + 124 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 28 | 0) >> 2] = $35_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1 + 104 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $39_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $39_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $0_1 + 116 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $43_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[($3_1 + 20 | 0) >> 2] = $43_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1 + 96 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $47_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $47_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$3_1 >> 2] = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
  HEAP32[($3_1 + 36 | 0) >> 2] = HEAP32[($0_1 + 132 | 0) >> 2] | 0;
  HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[($0_1 + 148 | 0) >> 2] | 0;
  HEAP32[($3_1 + 44 | 0) >> 2] = HEAP32[($0_1 + 152 | 0) >> 2] | 0;
  HEAP32[($3_1 + 48 | 0) >> 2] = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
  HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[($0_1 + 160 | 0) >> 2] | 0;
  HEAP32[($3_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 176 | 0) >> 2] | 0;
  HEAP32[($3_1 + 60 | 0) >> 2] = HEAP32[($0_1 + 180 | 0) >> 2] | 0;
  HEAP32[($3_1 + 64 | 0) >> 2] = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
  HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[($0_1 + 164 | 0) >> 2] | 0;
  HEAP32[($3_1 + 72 | 0) >> 2] = HEAP32[($0_1 + 168 | 0) >> 2] | 0;
  HEAP32[($3_1 + 76 | 0) >> 2] = HEAP32[($0_1 + 172 | 0) >> 2] | 0;
  $4_1 = HEAP32[($0_1 + 144 | 0) >> 2] | 0;
  HEAP32[($3_1 + 84 | 0) >> 2] = 0;
  HEAP32[($3_1 + 80 | 0) >> 2] = $4_1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0]($1_1, $2_1, 23517, 1145853764, $3_1);
  $877($0_1 | 0, $1_1 | 0);
  $972($0_1 | 0, $1_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($1_1);
 }
 
 function $974($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $975($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $976($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $616($2_1 + 8 | 0 | 0, 23244 | 0) | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 296 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $4_1 = 0;
   $5_1 = 0;
   label$2 : while (1) {
    $6_1 = HEAP32[((HEAP32[($0_1 + 304 | 0) >> 2] | 0) + $4_1 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($6_1, $0_1, $1_1);
    $4_1 = $4_1 + 4 | 0;
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) < (HEAP32[($0_1 + 296 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $617($3_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $977($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 23620;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 84 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 84 | 0) >> 0] = 1;
  label$3 : {
   $1_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 64 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 64 | 0) >> 0] = 1;
  label$5 : {
   $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   label$6 : {
    if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
     break label$6
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 40 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 44 | 0) >> 0] = 1;
  return $0_1 | 0;
 }
 
 function $978($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 23620;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 84 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 84 | 0) >> 0] = 1;
  label$3 : {
   $1_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 64 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 60 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 52 | 0) >> 2] = 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 64 | 0) >> 0] = 1;
  label$5 : {
   $1_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
    break label$5
   }
   $80($1_1 | 0);
  }
  $37($0_1 | 0);
 }
 
 function $979($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $10_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $13_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0;
  $6_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($5_1 | 0) < (0 | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : {
       $7_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if (($7_1 | 0) < (1 | 0)) {
        break label$5
       }
       $8_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
       $6_1 = 0;
       label$6 : while (1) {
        label$7 : {
         $9_1 = HEAP32[$8_1 >> 2] | 0;
         $10_1 = HEAP32[((HEAP32[($9_1 + 28 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
         if (($10_1 | 0) > (-1 | 0)) {
          break label$7
         }
         $10_1 = HEAP32[((HEAP32[($9_1 + 32 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
        }
        if (($10_1 | 0) == ($5_1 | 0)) {
         break label$4
        }
        $8_1 = $8_1 + 4 | 0;
        $6_1 = $6_1 + 1 | 0;
        if (($6_1 | 0) < ($7_1 | 0)) {
         continue label$6
        }
        break label$6;
       };
      }
      $8_1 = 0;
     }
     $11_1 = 0;
     label$8 : {
      if (($6_1 | 0) >= ($7_1 | 0)) {
       break label$8
      }
      $9_1 = $7_1 - $6_1 | 0;
      $10_1 = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($6_1 << 2 | 0) | 0;
      $11_1 = 0;
      label$9 : while (1) {
       label$10 : {
        $7_1 = HEAP32[$10_1 >> 2] | 0;
        $6_1 = HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
        if (($6_1 | 0) > (-1 | 0)) {
         break label$10
        }
        $6_1 = HEAP32[((HEAP32[($7_1 + 32 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0;
       }
       $10_1 = $10_1 + 4 | 0;
       $11_1 = $11_1 + (($6_1 | 0) == ($5_1 | 0)) | 0;
       $9_1 = $9_1 + -1 | 0;
       if ($9_1) {
        continue label$9
       }
       break label$9;
      };
     }
     $10_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if ((HEAP32[($10_1 + 80 | 0) >> 2] | 0 | 0) < (2 | 0)) {
      break label$1
     }
     if (($2_1 | 0) < (1 | 0)) {
      break label$2
     }
     $10_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
     $6_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
     $7_1 = 0;
     label$11 : while (1) {
      $12_1 = $1_1 + ($7_1 << 2 | 0) | 0;
      label$12 : {
       label$13 : {
        if (($6_1 | 0) == ($10_1 | 0)) {
         break label$13
        }
        $5_1 = $6_1;
        break label$12;
       }
       label$14 : {
        $13_1 = $10_1 ? $10_1 << 1 | 0 : 1;
        if (($10_1 | 0) < ($13_1 | 0)) {
         break label$14
        }
        $5_1 = $10_1;
        break label$12;
       }
       label$15 : {
        label$16 : {
         if ($13_1) {
          break label$16
         }
         $9_1 = 0;
         $5_1 = $10_1;
         break label$15;
        }
        $9_1 = $79($13_1 << 2 | 0 | 0, 16 | 0) | 0;
        $5_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
       }
       label$17 : {
        if (($5_1 | 0) < (1 | 0)) {
         break label$17
        }
        $10_1 = 0;
        $6_1 = $5_1;
        label$18 : while (1) {
         HEAP32[($9_1 + $10_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + $10_1 | 0) >> 2] | 0;
         $10_1 = $10_1 + 4 | 0;
         $6_1 = $6_1 + -1 | 0;
         if ($6_1) {
          continue label$18
         }
         break label$18;
        };
       }
       label$19 : {
        $10_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
        if (!$10_1) {
         break label$19
        }
        label$20 : {
         if (!(HEAPU8[($0_1 + 44 | 0) >> 0] | 0)) {
          break label$20
         }
         $80($10_1 | 0);
         $5_1 = HEAP32[($0_1 + 32 | 0) >> 2] | 0;
        }
        HEAP32[($0_1 + 40 | 0) >> 2] = 0;
       }
       HEAP32[($0_1 + 40 | 0) >> 2] = $9_1;
       HEAP8[($0_1 + 44 | 0) >> 0] = 1;
       HEAP32[($0_1 + 36 | 0) >> 2] = $13_1;
       $10_1 = $13_1;
      }
      $6_1 = $5_1 + 1 | 0;
      HEAP32[($0_1 + 32 | 0) >> 2] = $6_1;
      HEAP32[((HEAP32[($0_1 + 40 | 0) >> 2] | 0) + ($5_1 << 2 | 0) | 0) >> 2] = HEAP32[$12_1 >> 2] | 0;
      $7_1 = $7_1 + 1 | 0;
      if (($7_1 | 0) != ($2_1 | 0)) {
       continue label$11
      }
      break label$2;
     };
    }
    $10_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$10_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($10_1, $1_1, $2_1, $3_1, $4_1, HEAP32[($0_1 + 12 | 0) >> 2] | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0, HEAP32[($0_1 + 20 | 0) >> 2] | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0));
    return;
   }
   label$21 : {
    if (($4_1 | 0) < (1 | 0)) {
     break label$21
    }
    $10_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    $6_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    $7_1 = 0;
    label$22 : while (1) {
     $12_1 = $3_1 + ($7_1 << 2 | 0) | 0;
     label$23 : {
      label$24 : {
       if (($6_1 | 0) == ($10_1 | 0)) {
        break label$24
       }
       $5_1 = $6_1;
       break label$23;
      }
      label$25 : {
       $13_1 = $10_1 ? $10_1 << 1 | 0 : 1;
       if (($10_1 | 0) < ($13_1 | 0)) {
        break label$25
       }
       $5_1 = $10_1;
       break label$23;
      }
      label$26 : {
       label$27 : {
        if ($13_1) {
         break label$27
        }
        $9_1 = 0;
        $5_1 = $10_1;
        break label$26;
       }
       $9_1 = $79($13_1 << 2 | 0 | 0, 16 | 0) | 0;
       $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
      }
      label$28 : {
       if (($5_1 | 0) < (1 | 0)) {
        break label$28
       }
       $10_1 = 0;
       $6_1 = $5_1;
       label$29 : while (1) {
        HEAP32[($9_1 + $10_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + $10_1 | 0) >> 2] | 0;
        $10_1 = $10_1 + 4 | 0;
        $6_1 = $6_1 + -1 | 0;
        if ($6_1) {
         continue label$29
        }
        break label$29;
       };
      }
      label$30 : {
       $10_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
       if (!$10_1) {
        break label$30
       }
       label$31 : {
        if (!(HEAPU8[($0_1 + 64 | 0) >> 0] | 0)) {
         break label$31
        }
        $80($10_1 | 0);
        $5_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
       }
       HEAP32[($0_1 + 60 | 0) >> 2] = 0;
      }
      HEAP32[($0_1 + 60 | 0) >> 2] = $9_1;
      HEAP8[($0_1 + 64 | 0) >> 0] = 1;
      HEAP32[($0_1 + 56 | 0) >> 2] = $13_1;
      $10_1 = $13_1;
     }
     $6_1 = $5_1 + 1 | 0;
     HEAP32[($0_1 + 52 | 0) >> 2] = $6_1;
     HEAP32[((HEAP32[($0_1 + 60 | 0) >> 2] | 0) + ($5_1 << 2 | 0) | 0) >> 2] = HEAP32[$12_1 >> 2] | 0;
     $7_1 = $7_1 + 1 | 0;
     if (($7_1 | 0) != ($4_1 | 0)) {
      continue label$22
     }
     break label$22;
    };
   }
   label$32 : {
    label$33 : {
     if ($11_1) {
      break label$33
     }
     $6_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
     break label$32;
    }
    $10_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    $6_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    $7_1 = 0;
    label$34 : while (1) {
     $12_1 = $8_1 + ($7_1 << 2 | 0) | 0;
     label$35 : {
      label$36 : {
       if (($6_1 | 0) == ($10_1 | 0)) {
        break label$36
       }
       $5_1 = $6_1;
       break label$35;
      }
      label$37 : {
       $13_1 = $10_1 ? $10_1 << 1 | 0 : 1;
       if (($10_1 | 0) < ($13_1 | 0)) {
        break label$37
       }
       $5_1 = $10_1;
       break label$35;
      }
      label$38 : {
       label$39 : {
        if ($13_1) {
         break label$39
        }
        $9_1 = 0;
        $5_1 = $10_1;
        break label$38;
       }
       $9_1 = $79($13_1 << 2 | 0 | 0, 16 | 0) | 0;
       $5_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
      }
      label$40 : {
       if (($5_1 | 0) < (1 | 0)) {
        break label$40
       }
       $10_1 = 0;
       $6_1 = $5_1;
       label$41 : while (1) {
        HEAP32[($9_1 + $10_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 80 | 0) >> 2] | 0) + $10_1 | 0) >> 2] | 0;
        $10_1 = $10_1 + 4 | 0;
        $6_1 = $6_1 + -1 | 0;
        if ($6_1) {
         continue label$41
        }
        break label$41;
       };
      }
      label$42 : {
       $10_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
       if (!$10_1) {
        break label$42
       }
       label$43 : {
        if (!(HEAPU8[($0_1 + 84 | 0) >> 0] | 0)) {
         break label$43
        }
        $80($10_1 | 0);
        $5_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
       }
       HEAP32[($0_1 + 80 | 0) >> 2] = 0;
      }
      HEAP32[($0_1 + 80 | 0) >> 2] = $9_1;
      HEAP8[($0_1 + 84 | 0) >> 0] = 1;
      HEAP32[($0_1 + 76 | 0) >> 2] = $13_1;
      $10_1 = $13_1;
     }
     $6_1 = $5_1 + 1 | 0;
     HEAP32[($0_1 + 72 | 0) >> 2] = $6_1;
     HEAP32[((HEAP32[($0_1 + 80 | 0) >> 2] | 0) + ($5_1 << 2 | 0) | 0) >> 2] = HEAP32[$12_1 >> 2] | 0;
     $7_1 = $7_1 + 1 | 0;
     if (($7_1 | 0) != ($11_1 | 0)) {
      continue label$34
     }
     break label$34;
    };
   }
   label$44 : {
    if (((HEAP32[($0_1 + 52 | 0) >> 2] | 0) + $6_1 | 0 | 0) <= (HEAP32[((HEAP32[($0_1 + 4 | 0) >> 2] | 0) + 80 | 0) >> 2] | 0 | 0)) {
     break label$44
    }
    $959($0_1 | 0);
   }
   return;
  }
  $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($6_1, $1_1, $2_1, $3_1, $4_1, $8_1, $11_1, $10_1, HEAP32[($0_1 + 20 | 0) >> 2] | 0, HEAP32[($0_1 + 24 | 0) >> 2] | 0));
 }
 
 function $980($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $981($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = 0;
  label$1 : {
   $3_1 = HEAP32[$1_1 >> 2] | 0;
   $4_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
   if (($3_1 | 0) == ($4_1 | 0)) {
    break label$1
   }
   if (!((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0)) {
    break label$1
   }
   if (!((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0)) {
    break label$1
   }
   $0_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1, $4_1, $3_1) | 0;
  }
  return $2_1 | 0;
 }
 
 function $982($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $72_1 = 0, $77_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $152_1 = 0, $157_1 = 0;
  $3_1 = Math_fround(1.0);
  label$1 : {
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if (($4_1 | 0) == (HEAP32[($0_1 + 84 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   if ((HEAPU8[($4_1 + 204 | 0) >> 0] | 0) & 4 | 0) {
    break label$1
   }
   if (Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]))) + Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2])) * Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]))) >= Math_fround(-Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]))) {
    break label$1
   }
   HEAP32[($0_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     $4_1 = $1_1 + 8 | 0;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     $72_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 48 | 0) >> 2] = $72_1;
     HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $4_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $77_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1 + 56 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $77_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     break label$2;
    }
    $5_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
    $7_1 = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
    $8_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
    $9_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
    $12_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
    $3_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
    $14_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $15_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
    HEAP32[($0_1 + 60 | 0) >> 2] = 0;
    HEAPF32[($0_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $11_1) + Math_fround($15_1 * $12_1)) + Math_fround($3_1 * $10_1));
    HEAPF32[($0_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $8_1) + Math_fround($15_1 * $9_1)) + Math_fround($3_1 * $7_1));
    HEAPF32[($0_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround($13_1 * $14_1) + Math_fround($6_1 * $15_1)) + Math_fround($5_1 * $3_1));
   }
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
   $152_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 64 | 0) >> 2] = $152_1;
   HEAP32[($0_1 + 68 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 32 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $157_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 72 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $157_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $3_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  }
  return Math_fround($3_1);
 }
 
 function $983($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 23812;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 340 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 336 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 336 | 0) >> 2] = 0;
  HEAP32[($0_1 + 328 | 0) >> 2] = 0;
  HEAP32[($0_1 + 332 | 0) >> 2] = 0;
  HEAP8[($0_1 + 340 | 0) >> 0] = 1;
  $306($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $984($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 23812;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 340 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 336 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 336 | 0) >> 2] = 0;
  HEAP32[($0_1 + 328 | 0) >> 2] = 0;
  HEAP32[($0_1 + 332 | 0) >> 2] = 0;
  HEAP8[($0_1 + 340 | 0) >> 0] = 1;
  $306($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $985($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $3_1 = 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   label$2 : {
    $4_1 = HEAP32[($0_1 + 328 | 0) >> 2] | 0;
    if (($4_1 | 0) < (1 | 0)) {
     break label$2
    }
    $1_1 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
    $5_1 = $4_1;
    label$3 : {
     label$4 : while (1) {
      if ((HEAP32[$1_1 >> 2] | 0 | 0) == ($3_1 | 0)) {
       break label$3
      }
      $1_1 = $1_1 + 4 | 0;
      $5_1 = $5_1 + -1 | 0;
      if ($5_1) {
       continue label$4
      }
      break label$2;
     };
    }
    if ($5_1) {
     break label$1
    }
   }
   label$5 : {
    if (($4_1 | 0) != (HEAP32[($0_1 + 332 | 0) >> 2] | 0 | 0)) {
     break label$5
    }
    $6_1 = $4_1 ? $4_1 << 1 | 0 : 1;
    if (($4_1 | 0) >= ($6_1 | 0)) {
     break label$5
    }
    label$6 : {
     label$7 : {
      if ($6_1) {
       break label$7
      }
      $7_1 = 0;
      break label$6;
     }
     $7_1 = $79($6_1 << 2 | 0 | 0, 16 | 0) | 0;
     $4_1 = HEAP32[($0_1 + 328 | 0) >> 2] | 0;
    }
    label$8 : {
     if (($4_1 | 0) < (1 | 0)) {
      break label$8
     }
     $1_1 = 0;
     $5_1 = $4_1;
     label$9 : while (1) {
      HEAP32[($7_1 + $1_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 336 | 0) >> 2] | 0) + $1_1 | 0) >> 2] | 0;
      $1_1 = $1_1 + 4 | 0;
      $5_1 = $5_1 + -1 | 0;
      if ($5_1) {
       continue label$9
      }
      break label$9;
     };
    }
    label$10 : {
     $1_1 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
     if (!$1_1) {
      break label$10
     }
     label$11 : {
      if (!(HEAPU8[($0_1 + 340 | 0) >> 0] | 0)) {
       break label$11
      }
      $80($1_1 | 0);
      $4_1 = HEAP32[($0_1 + 328 | 0) >> 2] | 0;
     }
     HEAP32[($0_1 + 336 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 336 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 332 | 0) >> 2] = $6_1;
    HEAP8[($0_1 + 340 | 0) >> 0] = 1;
   }
   HEAP32[($0_1 + 328 | 0) >> 2] = $4_1 + 1 | 0;
   HEAP32[((HEAP32[($0_1 + 336 | 0) >> 2] | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $3_1;
  }
 }
 
 function $986($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $4_1 = 0, $7_1 = 0, $5_1 = 0;
  label$1 : {
   $4_1 = HEAP32[($0_1 + 328 | 0) >> 2] | 0;
   if (($4_1 | 0) < (1 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[$1_1 >> 2] | 0;
   $6_1 = 0;
   $7_1 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
   $1_1 = $7_1;
   label$2 : {
    label$3 : while (1) {
     if ((HEAP32[$1_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
      break label$2
     }
     $1_1 = $1_1 + 4 | 0;
     $6_1 = $6_1 + 1 | 0;
     if (($4_1 | 0) != ($6_1 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   if (($6_1 | 0) >= ($4_1 | 0)) {
    break label$1
   }
   $6_1 = $4_1 + -1 | 0;
   HEAP32[($0_1 + 328 | 0) >> 2] = $6_1;
   HEAP32[$1_1 >> 2] = HEAP32[($7_1 + ($6_1 << 2 | 0) | 0) >> 2] | 0;
  }
 }
 
 function $987($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, $1_1 = 0;
  $305($0_1 | 0) | 0;
  HEAP32[($0_1 + 336 | 0) >> 2] = 0;
  HEAP8[($0_1 + 340 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 328 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 252 | 0) >> 2] = 4;
  HEAP32[$0_1 >> 2] = 23856;
  $1_1 = $79(72 | 0, 16 | 0) | 0;
  $735($1_1 | 0) | 0;
  HEAP32[($0_1 + 344 | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $988($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 23856;
  $1_1 = HEAP32[($0_1 + 344 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 344 | 0) >> 2] | 0 | 0);
  HEAP32[$0_1 >> 2] = 23812;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 340 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 336 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 336 | 0) >> 2] = 0;
  HEAP32[($0_1 + 328 | 0) >> 2] = 0;
  HEAP32[($0_1 + 332 | 0) >> 2] = 0;
  HEAP8[($0_1 + 340 | 0) >> 0] = 1;
  $306($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $989($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 23856;
  $1_1 = HEAP32[($0_1 + 344 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[(HEAP32[$1_1 >> 2] | 0) >> 2] | 0]($1_1) | 0;
  $80(HEAP32[($0_1 + 344 | 0) >> 2] | 0 | 0);
  HEAP32[$0_1 >> 2] = 23812;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 340 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 336 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 336 | 0) >> 2] = 0;
  HEAP32[($0_1 + 328 | 0) >> 2] = 0;
  HEAP32[($0_1 + 332 | 0) >> 2] = 0;
  HEAP8[($0_1 + 340 | 0) >> 0] = 1;
  $306($0_1 | 0) | 0;
  $80($0_1 | 0);
 }
 
 function $990($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   $2_1 = HEAP32[($0_1 + 188 | 0) >> 2] | 0;
  }
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  label$2 : {
   label$3 : {
    $4_1 = HEAP32[($0_1 + 328 | 0) >> 2] | 0;
    if (($4_1 | 0) < (1 | 0)) {
     break label$3
    }
    $5_1 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
    $6_1 = $4_1;
    label$4 : {
     label$5 : while (1) {
      if ((HEAP32[$5_1 >> 2] | 0 | 0) == ($3_1 | 0)) {
       break label$4
      }
      $5_1 = $5_1 + 4 | 0;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue label$5
      }
      break label$3;
     };
    }
    if ($6_1) {
     break label$2
    }
   }
   label$6 : {
    if (($4_1 | 0) != (HEAP32[($0_1 + 332 | 0) >> 2] | 0 | 0)) {
     break label$6
    }
    $7_1 = $4_1 ? $4_1 << 1 | 0 : 1;
    if (($4_1 | 0) >= ($7_1 | 0)) {
     break label$6
    }
    label$7 : {
     label$8 : {
      if ($7_1) {
       break label$8
      }
      $8_1 = 0;
      break label$7;
     }
     $8_1 = $79($7_1 << 2 | 0 | 0, 16 | 0) | 0;
     $4_1 = HEAP32[($0_1 + 328 | 0) >> 2] | 0;
    }
    label$9 : {
     if (($4_1 | 0) < (1 | 0)) {
      break label$9
     }
     $5_1 = 0;
     $6_1 = $4_1;
     label$10 : while (1) {
      HEAP32[($8_1 + $5_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 336 | 0) >> 2] | 0) + $5_1 | 0) >> 2] | 0;
      $5_1 = $5_1 + 4 | 0;
      $6_1 = $6_1 + -1 | 0;
      if ($6_1) {
       continue label$10
      }
      break label$10;
     };
    }
    label$11 : {
     $5_1 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
     if (!$5_1) {
      break label$11
     }
     label$12 : {
      if (!(HEAPU8[($0_1 + 340 | 0) >> 0] | 0)) {
       break label$12
      }
      $80($5_1 | 0);
      $4_1 = HEAP32[($0_1 + 328 | 0) >> 2] | 0;
     }
     HEAP32[($0_1 + 336 | 0) >> 2] = 0;
    }
    HEAP32[($0_1 + 336 | 0) >> 2] = $8_1;
    HEAP32[($0_1 + 332 | 0) >> 2] = $7_1;
    HEAP8[($0_1 + 340 | 0) >> 0] = 1;
   }
   HEAP32[((HEAP32[($0_1 + 336 | 0) >> 2] | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $3_1;
   HEAP32[($0_1 + 328 | 0) >> 2] = $4_1 + 1 | 0;
   $5_1 = HEAP32[($0_1 + 344 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($5_1, $2_1, $1_1) | 0;
  }
 }
 
 function $991($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $5_1 = 0, $7_1 = 0, $4_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   if ($3_1) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 188 | 0) >> 2] | 0;
  }
  label$2 : {
   $5_1 = HEAP32[($0_1 + 328 | 0) >> 2] | 0;
   if (($5_1 | 0) < (1 | 0)) {
    break label$2
   }
   $6_1 = 0;
   $7_1 = HEAP32[($0_1 + 336 | 0) >> 2] | 0;
   $8_1 = $7_1;
   label$3 : {
    label$4 : while (1) {
     if ((HEAP32[$8_1 >> 2] | 0 | 0) == ($4_1 | 0)) {
      break label$3
     }
     $8_1 = $8_1 + 4 | 0;
     $6_1 = $6_1 + 1 | 0;
     if (($5_1 | 0) != ($6_1 | 0)) {
      continue label$4
     }
     break label$2;
    };
   }
   if (($6_1 | 0) >= ($5_1 | 0)) {
    break label$2
   }
   $6_1 = $5_1 + -1 | 0;
   HEAP32[$8_1 >> 2] = HEAP32[($7_1 + ($6_1 << 2 | 0) | 0) >> 2] | 0;
   HEAP32[($0_1 + 328 | 0) >> 2] = $6_1;
   $8_1 = HEAP32[($0_1 + 344 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 12 | 0) >> 2] | 0]($8_1, $3_1, $1_1, $2_1) | 0;
  }
 }
 
 function $992($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  var $6_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $15_1 = Math_fround(0), $11_1 = Math_fround(0), $13_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $16_1 = Math_fround(0), $14_1 = Math_fround(0), $17_1 = Math_fround(0), $20_1 = 0, $29_1 = 0, $35_1 = 0, $41_1 = 0, $48_1 = 0, $54_1 = 0, $57_1 = 0, $60_1 = 0, $63_1 = 0, $66_1 = 0, $69_1 = 0, $75_1 = 0, $81_1 = 0, $88_1 = 0, $91_1 = 0, $94_1 = 0, $97_1 = 0, $18_1 = 0, $19_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $29_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 208 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $29_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1 + 24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $35_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($6_1 + 208 | 0) + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $35_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $2_1 + 40 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $41_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 208 | 0) + 40 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $41_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $7_1 = ($6_1 + 208 | 0) + 56 | 0;
  i64toi32_i32$2 = $2_1 + 56 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $48_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $7_1;
  HEAP32[i64toi32_i32$1 >> 2] = $48_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $54_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 144 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $54_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $57_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[($6_1 + 208 | 0) >> 2] = $57_1;
  HEAP32[($6_1 + 212 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $60_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[($6_1 + 224 | 0) >> 2] = $60_1;
  HEAP32[($6_1 + 228 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $63_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[($6_1 + 240 | 0) >> 2] = $63_1;
  HEAP32[($6_1 + 244 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $66_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $66_1;
  HEAP32[($6_1 + 260 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $69_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[($6_1 + 144 | 0) >> 2] = $69_1;
  HEAP32[($6_1 + 148 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $75_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6_1 + 144 | 0) + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $75_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1 + 40 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $81_1 = i64toi32_i32$1;
  i64toi32_i32$1 = ($6_1 + 144 | 0) + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $81_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $8_1 = ($6_1 + 144 | 0) + 56 | 0;
  i64toi32_i32$2 = $3_1 + 56 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $88_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $8_1;
  HEAP32[i64toi32_i32$0 >> 2] = $88_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $91_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[($6_1 + 160 | 0) >> 2] = $91_1;
  HEAP32[($6_1 + 164 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $94_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[($6_1 + 176 | 0) >> 2] = $94_1;
  HEAP32[($6_1 + 180 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $97_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[($6_1 + 192 | 0) >> 2] = $97_1;
  HEAP32[($6_1 + 196 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($6_1 + 108 | 0) >> 2] = 0;
  HEAPF32[($6_1 + 104 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[$8_1 >> 2]) - Math_fround(HEAPF32[$7_1 >> 2]));
  HEAPF32[($6_1 + 100 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[(($6_1 + 144 | 0) + 52 | 0) >> 2]) - Math_fround(HEAPF32[(($6_1 + 208 | 0) + 52 | 0) >> 2]));
  HEAPF32[($6_1 + 96 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 192 | 0) >> 2]) - Math_fround(HEAPF32[($6_1 + 256 | 0) >> 2]));
  $803($6_1 + 208 | 0 | 0, $6_1 + 144 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 128 | 0 | 0);
  HEAP32[($6_1 + 92 | 0) >> 2] = 0;
  $9_1 = Math_fround(HEAPF32[($6_1 + 128 | 0) >> 2]);
  HEAPF32[($6_1 + 88 | 0) >> 2] = Math_fround($9_1 * Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]));
  HEAPF32[($6_1 + 84 | 0) >> 2] = Math_fround($9_1 * Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]));
  HEAPF32[($6_1 + 80 | 0) >> 2] = Math_fround($9_1 * Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]));
  i64toi32_i32$1 = ($6_1 + 16 | 0) + 56 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($6_1 + 16 | 0) + 48 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $1043($6_1 + 208 | 0 | 0, $6_1 + 128 | 0 | 0);
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  $10_1 = Math_fround(HEAPF32[($6_1 + 132 | 0) >> 2]);
  $11_1 = Math_fround(HEAPF32[($6_1 + 136 | 0) >> 2]);
  $9_1 = Math_fround(HEAPF32[($6_1 + 128 | 0) >> 2]);
  $12_1 = Math_fround(HEAPF32[($6_1 + 140 | 0) >> 2]);
  $13_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $9_1) + Math_fround($10_1 * $10_1)) + Math_fround($11_1 * $11_1)) + Math_fround($12_1 * $12_1)));
  $14_1 = Math_fround($11_1 * $13_1);
  $15_1 = Math_fround($10_1 * $14_1);
  $16_1 = Math_fround($9_1 * $13_1);
  $17_1 = Math_fround($12_1 * $16_1);
  HEAPF32[($6_1 + 52 | 0) >> 2] = Math_fround($15_1 + $17_1);
  HEAPF32[(($6_1 + 16 | 0) + 24 | 0) >> 2] = Math_fround($15_1 - $17_1);
  $15_1 = Math_fround($9_1 * $16_1);
  $13_1 = Math_fround($10_1 * $13_1);
  $10_1 = Math_fround($10_1 * $13_1);
  HEAPF32[(($6_1 + 16 | 0) + 40 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($15_1 + $10_1));
  $11_1 = Math_fround($11_1 * $14_1);
  HEAPF32[($6_1 + 36 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($15_1 + $11_1));
  HEAP32[($6_1 + 28 | 0) >> 2] = 0;
  $15_1 = Math_fround($9_1 * $14_1);
  $16_1 = Math_fround($12_1 * $13_1);
  HEAPF32[($6_1 + 48 | 0) >> 2] = Math_fround($15_1 - $16_1);
  $9_1 = Math_fround($9_1 * $13_1);
  $12_1 = Math_fround($12_1 * $14_1);
  HEAPF32[($6_1 + 32 | 0) >> 2] = Math_fround($9_1 + $12_1);
  HEAPF32[($6_1 + 24 | 0) >> 2] = Math_fround($15_1 + $16_1);
  HEAPF32[($6_1 + 20 | 0) >> 2] = Math_fround($9_1 - $12_1);
  HEAPF32[($6_1 + 16 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($10_1 + $11_1));
  $97($1_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 96 | 0 | 0, $6_1 + 80 | 0 | 0, Math_fround(Math_fround(1.0)), $6_1 + 128 | 0 | 0, $6_1 + 112 | 0 | 0);
  label$1 : {
   if ((HEAP32[($0_1 + 328 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $18_1 = $3_1 + 48 | 0;
   $19_1 = $2_1 + 48 | 0;
   $3_1 = 0;
   $7_1 = 0;
   label$2 : while (1) {
    label$3 : {
     $2_1 = HEAP32[((HEAP32[($0_1 + 336 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0;
     if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($4_1, HEAP32[($2_1 + 188 | 0) >> 2] | 0) | 0)) {
      break label$3
     }
     $8_1 = HEAP32[($2_1 + 192 | 0) >> 2] | 0;
     $20_1 = $2_1 + 4 | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$8_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($8_1, $20_1, $6_1 + 16 | 0, $6_1 + 96 | 0);
     HEAP32[($6_1 + 28 | 0) >> 2] = 0;
     HEAP32[($6_1 + 108 | 0) >> 2] = 0;
     HEAPF32[($6_1 + 24 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]) + Math_fround(HEAPF32[($6_1 + 136 | 0) >> 2]));
     HEAPF32[($6_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2]) + Math_fround(HEAPF32[($6_1 + 132 | 0) >> 2]));
     HEAPF32[($6_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 16 | 0) >> 2]) + Math_fround(HEAPF32[($6_1 + 128 | 0) >> 2]));
     HEAPF32[($6_1 + 96 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 96 | 0) >> 2]) + Math_fround(HEAPF32[($6_1 + 112 | 0) >> 2]));
     HEAPF32[($6_1 + 100 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 100 | 0) >> 2]) + Math_fround(HEAPF32[($6_1 + 116 | 0) >> 2]));
     HEAPF32[($6_1 + 104 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($6_1 + 104 | 0) >> 2]) + Math_fround(HEAPF32[($6_1 + 120 | 0) >> 2]));
     HEAP32[($6_1 + 12 | 0) >> 2] = 1065353216;
     if (!($993($19_1 | 0, $18_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 96 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 80 | 0 | 0) | 0)) {
      break label$3
     }
     $869($1_1 | 0, $6_1 + 208 | 0 | 0, $6_1 + 144 | 0 | 0, $2_1 | 0, HEAP32[($2_1 + 192 | 0) >> 2] | 0 | 0, $20_1 | 0, $4_1 | 0, Math_fround($5_1));
    }
    $3_1 = $3_1 + 4 | 0;
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) < (HEAP32[($0_1 + 328 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $6_1 + 272 | 0;
 }
 
 function $993($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$1 = 0, $8_1 = Math_fround(0), i64toi32_i32$0 = 0, $9_1 = Math_fround(0), $6_1 = 0, $11_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $10_1 = Math_fround(0), $22_1 = Math_fround(0), $15_1 = Math_fround(0), $21_1 = Math_fround(0), $23_1 = Math_fround(0), $18_1 = Math_fround(0), $12_1 = Math_fround(0), $7_1 = 0, i64toi32_i32$2 = 0, $13_1 = 0, $14_1 = 0, $19_1 = 0, $20_1 = 0, $24_1 = Math_fround(0), $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $362_1 = 0, $367_1 = 0;
  $6_1 = global$0 - 16 | 0;
  $7_1 = 0;
  label$1 : {
   $8_1 = Math_fround(HEAPF32[$3_1 >> 2]);
   $9_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $10_1 = Math_fround(Math_fround($8_1 + $9_1) * Math_fround(.5));
   $11_1 = Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) - $10_1);
   $8_1 = Math_fround($8_1 - $9_1);
   $12_1 = Math_fround($8_1 * Math_fround(.5));
   $13_1 = $11_1 > $12_1;
   $9_1 = Math_fround($8_1 * Math_fround(-.5));
   $14_1 = $11_1 < $9_1;
   $8_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $16_1 = Math_fround(Math_fround($8_1 + $15_1) * Math_fround(.5));
   $17_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]) - $16_1);
   $8_1 = Math_fround($8_1 - $15_1);
   $18_1 = Math_fround($8_1 * Math_fround(-.5));
   $19_1 = $17_1 < $18_1;
   $15_1 = Math_fround($8_1 * Math_fround(.5));
   $20_1 = $17_1 > $15_1;
   $8_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   $21_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $22_1 = Math_fround(Math_fround($8_1 + $21_1) * Math_fround(.5));
   $23_1 = Math_fround(Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]) - $22_1);
   $8_1 = Math_fround($8_1 - $21_1);
   $24_1 = Math_fround($8_1 * Math_fround(-.5));
   $25_1 = $23_1 < $24_1;
   $21_1 = Math_fround($8_1 * Math_fround(.5));
   $26_1 = $13_1 << 3 | 0 | $14_1 | 0 | ($19_1 << 1 | 0) | 0 | ($20_1 << 4 | 0) | 0 | ($25_1 << 2 | 0) | 0 | (($23_1 > $21_1) << 5 | 0) | 0;
   $8_1 = Math_fround(Math_fround(HEAPF32[$0_1 >> 2]) - $10_1);
   $1_1 = $8_1 > $12_1;
   $3_1 = $8_1 < $9_1;
   $9_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]) - $16_1);
   $2_1 = $9_1 < $18_1;
   $27_1 = $9_1 > $15_1;
   $10_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]) - $22_1);
   $0_1 = $10_1 < $24_1;
   $28_1 = $1_1 << 3 | 0 | $3_1 | 0 | ($2_1 << 1 | 0) | 0 | ($27_1 << 4 | 0) | 0 | ($0_1 << 2 | 0) | 0 | (($10_1 > $21_1) << 5 | 0) | 0;
   if ($26_1 & $28_1 | 0) {
    break label$1
   }
   $16_1 = Math_fround(HEAPF32[$4_1 >> 2]);
   i64toi32_i32$1 = $6_1 + 8 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $18_1 = Math_fround($11_1 - $8_1);
   label$2 : {
    label$3 : {
     if ($3_1 ^ 1 | 0) {
      break label$3
     }
     label$4 : {
      $11_1 = Math_fround(Math_fround(Math_fround(-$8_1) - $12_1) / $18_1);
      if (!($11_1 >= Math_fround(0.0) ^ 1 | 0)) {
       break label$4
      }
      $11_1 = Math_fround(0.0);
      break label$2;
     }
     HEAP32[($6_1 + 12 | 0) >> 2] = 0;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
     break label$2;
    }
    $11_1 = Math_fround(0.0);
    if ($14_1 ^ 1 | 0) {
     break label$2
    }
    $22_1 = Math_fround(Math_fround(Math_fround(-$8_1) - $12_1) / $18_1);
    if ($22_1 < $16_1 ^ 1 | 0) {
     break label$2
    }
    $16_1 = $22_1;
   }
   $22_1 = Math_fround($17_1 - $9_1);
   label$5 : {
    label$6 : {
     label$7 : {
      if (!$2_1) {
       break label$7
      }
      $17_1 = Math_fround(Math_fround(Math_fround(-$9_1) - $15_1) / $22_1);
      if ($11_1 <= $17_1 ^ 1 | 0) {
       break label$6
      }
      i64toi32_i32$1 = $6_1 + 8 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$0 = 1065353216;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      break label$5;
     }
     if ($19_1 ^ 1 | 0) {
      break label$6
     }
     $17_1 = Math_fround(Math_fround(Math_fround(-$9_1) - $15_1) / $22_1);
     if ($17_1 < $16_1 ^ 1 | 0) {
      break label$6
     }
     $16_1 = $17_1;
    }
    $17_1 = $11_1;
   }
   $23_1 = Math_fround($23_1 - $10_1);
   label$8 : {
    label$9 : {
     label$10 : {
      if ($0_1 ^ 1 | 0) {
       break label$10
      }
      $11_1 = Math_fround(Math_fround(Math_fround(-$10_1) - $21_1) / $23_1);
      if ($17_1 <= $11_1 ^ 1 | 0) {
       break label$9
      }
      i64toi32_i32$1 = $6_1 + 8 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      break label$8;
     }
     if ($25_1 ^ 1 | 0) {
      break label$9
     }
     $11_1 = Math_fround(Math_fround(Math_fround(-$10_1) - $21_1) / $23_1);
     if ($11_1 < $16_1 ^ 1 | 0) {
      break label$9
     }
     $16_1 = $11_1;
    }
    $11_1 = $17_1;
   }
   label$11 : {
    label$12 : {
     label$13 : {
      if ($1_1 ^ 1 | 0) {
       break label$13
      }
      $8_1 = Math_fround(Math_fround($12_1 - $8_1) / $18_1);
      if ($11_1 <= $8_1 ^ 1 | 0) {
       break label$12
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = 0;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[i64toi32_i32$1 >> 2] = -1082130432;
      break label$11;
     }
     if ($13_1 ^ 1 | 0) {
      break label$12
     }
     $8_1 = Math_fround(Math_fround($12_1 - $8_1) / $18_1);
     if ($8_1 < $16_1 ^ 1 | 0) {
      break label$12
     }
     $16_1 = $8_1;
    }
    $8_1 = $11_1;
   }
   label$14 : {
    label$15 : {
     label$16 : {
      if ($27_1 ^ 1 | 0) {
       break label$16
      }
      $9_1 = Math_fround(Math_fround($15_1 - $9_1) / $22_1);
      if ($8_1 <= $9_1 ^ 1 | 0) {
       break label$15
      }
      i64toi32_i32$1 = $6_1 + 8 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$0 = -1082130432;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      break label$14;
     }
     if ($20_1 ^ 1 | 0) {
      break label$15
     }
     $9_1 = Math_fround(Math_fround($15_1 - $9_1) / $22_1);
     if ($9_1 < $16_1 ^ 1 | 0) {
      break label$15
     }
     $16_1 = $9_1;
    }
    $9_1 = $8_1;
   }
   label$17 : {
    label$18 : {
     label$19 : {
      if (!($28_1 & 32 | 0)) {
       break label$19
      }
      $8_1 = Math_fround(Math_fround($21_1 - $10_1) / $23_1);
      if ($9_1 <= $8_1 ^ 1 | 0) {
       break label$18
      }
      i64toi32_i32$1 = $6_1 + 8 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = -1082130432;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      break label$17;
     }
     if (!($26_1 & 32 | 0)) {
      break label$18
     }
     $8_1 = Math_fround(Math_fround($21_1 - $10_1) / $23_1);
     if ($8_1 < $16_1 ^ 1 | 0) {
      break label$18
     }
     $16_1 = $8_1;
    }
    $8_1 = $9_1;
   }
   $7_1 = 0;
   if ($8_1 <= $16_1 ^ 1 | 0) {
    break label$1
   }
   HEAPF32[$4_1 >> 2] = $8_1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
   $362_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1;
   HEAP32[i64toi32_i32$0 >> 2] = $362_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $367_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $5_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $367_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $7_1 = 1;
  }
  return $7_1 | 0;
 }
 
 function $994($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  $4_1 = $4_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$0_1 >> 2] = 23968;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 272 | 0) >> 2] = 0;
  HEAP32[($0_1 + 276 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 256 | 0) >> 2] = 0;
  HEAP32[($0_1 + 260 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 64 | 0) >> 2] = 1017370378;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 100 | 0) >> 2] = 0;
  HEAP32[($0_1 + 104 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($0_1 + 250 | 0) >> 1] = 257;
  HEAP32[($0_1 + 56 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 252 | 0) >> 2] = 0;
  HEAP8[($0_1 + 216 | 0) >> 0] = 1;
  HEAP32[($0_1 + 212 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 204 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 280 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 264 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 76 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 108 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 52 | 0) >> 2] = 1105933107;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
  HEAP16[($0_1 + 248 | 0) >> 1] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1092616192;
  HEAP32[($0_1 + 28 | 0) >> 2] = 1113325568;
  HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 36 | 0) >> 2] = 1092616192;
  HEAP32[($0_1 + 148 | 0) >> 2] = 0;
  $12_1 = 0;
  HEAP8[($0_1 + 289 | 0) >> 0] = $12_1;
  HEAP8[($0_1 + 290 | 0) >> 0] = $12_1 >>> 8 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 1045220557;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 240 | 0) >> 2] = 0;
  HEAP32[($0_1 + 244 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 288 | 0) >> 0] = 1;
  label$1 : {
   label$2 : {
    $6_1 = Math_fround(HEAPF32[$4_1 >> 2]);
    $7_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
    $8_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
    $9_1 = Math_fround(Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1)) + Math_fround($8_1 * $8_1));
    if ($9_1 > Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    label$3 : {
     $9_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($9_1)));
     $8_1 = Math_fround(Math_fround($8_1 * $9_1) * Math_fround(-29.399999618530273));
     $6_1 = Math_fround(Math_fround($6_1 * $9_1) * Math_fround(-29.399999618530273));
     $7_1 = Math_fround(Math_fround($7_1 * $9_1) * Math_fround(-29.399999618530273));
     $9_1 = Math_fround(Math_fround($8_1 * $8_1) + Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1)));
     if ($9_1 > Math_fround(0.0) ^ 1 | 0) {
      break label$3
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = 0;
     HEAPF32[($5_1 + 8 | 0) >> 2] = Math_fround(-$8_1);
     HEAPF32[($5_1 + 4 | 0) >> 2] = Math_fround(-$7_1);
     HEAPF32[$5_1 >> 2] = Math_fround(-$6_1);
     $995($0_1 | 0, $5_1 | 0);
    }
    HEAPF32[($0_1 + 52 | 0) >> 2] = Math_fround(Math_sqrt($9_1));
    break label$1;
   }
   $995($0_1 | 0, $4_1 | 0);
  }
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1060439283;
  HEAP32[($0_1 + 44 | 0) >> 2] = 1061752795;
  HEAP32[($0_1 + 48 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[($0_1 + 60 | 0) >> 2] = $3_1;
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $995($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = Math_fround(0), $11_1 = Math_fround(0), $5_1 = Math_fround(0), $10_1 = Math_fround(0), $8_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $4_1 = Math_fround(0), $7_1 = Math_fround(0), $2_1 = 0, $9_1 = Math_fround(0), $14_1 = Math_fround(0), $3_1 = 0, $22_1 = 0, $23_1 = 0, $15_1 = Math_fround(0), $21_1 = 0, $253_1 = 0, $16_1 = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0, $18_1 = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $20_1 = 0, $20$hi = 0, $273_1 = 0, $287_1 = 0, $465_1 = 0, $473_1 = 0, $477_1 = 0, $481_1 = 0, $489_1 = 0, $493_1 = 0, $497_1 = 0, $501_1 = 0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $3_1 = $0_1 + 256 | 0;
  $4_1 = Math_fround(HEAPF32[($0_1 + 264 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  label$1 : {
   label$2 : {
    $6_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
    if (Math_fround(HEAPF32[($0_1 + 268 | 0) >> 2]) != $6_1) {
     break label$2
    }
    if ($4_1 != $5_1) {
     break label$2
    }
    if (Math_fround(HEAPF32[($0_1 + 260 | 0) >> 2]) != Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2])) {
     break label$2
    }
    if (Math_fround(HEAPF32[$3_1 >> 2]) == Math_fround(HEAPF32[$1_1 >> 2])) {
     break label$1
    }
   }
   $7_1 = Math_fround(0.0);
   $8_1 = Math_fround(HEAPF32[($0_1 + 260 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[($0_1 + 256 | 0) >> 2]);
   label$3 : {
    label$4 : {
     $10_1 = Math_fround(HEAPF32[$1_1 >> 2]);
     $11_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
     $12_1 = Math_fround(Math_fround(Math_fround($10_1 * $10_1) + Math_fround($11_1 * $11_1)) + Math_fround($5_1 * $5_1));
     if ($12_1 > Math_fround(0.0) ^ 1 | 0) {
      break label$4
     }
     HEAPF32[($0_1 + 268 | 0) >> 2] = $6_1;
     $6_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($12_1)));
     $7_1 = Math_fround($5_1 * $6_1);
     HEAPF32[($0_1 + 264 | 0) >> 2] = $7_1;
     $5_1 = Math_fround($11_1 * $6_1);
     HEAPF32[($0_1 + 260 | 0) >> 2] = $5_1;
     $13_1 = Math_fround($10_1 * $6_1);
     HEAPF32[($0_1 + 256 | 0) >> 2] = $13_1;
     break label$3;
    }
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $5_1 = Math_fround(0.0);
    $13_1 = Math_fround(0.0);
   }
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$5 : {
    $14_1 = Math_fround(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($5_1 * $5_1)) + Math_fround($7_1 * $7_1));
    if ($14_1 == Math_fround(0.0)) {
     break label$5
    }
    $15_1 = Math_fround(Math_fround(Math_fround($9_1 * $9_1) + Math_fround($8_1 * $8_1)) + Math_fround($4_1 * $4_1));
    if ($15_1 == Math_fround(0.0)) {
     break label$5
    }
    $11_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($14_1)));
    $10_1 = Math_fround($7_1 * $11_1);
    HEAPF32[($0_1 + 264 | 0) >> 2] = $10_1;
    $5_1 = Math_fround($5_1 * $11_1);
    HEAPF32[($0_1 + 260 | 0) >> 2] = $5_1;
    $11_1 = Math_fround($13_1 * $11_1);
    HEAPF32[($0_1 + 256 | 0) >> 2] = $11_1;
    label$6 : {
     $6_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($15_1)));
     $12_1 = Math_fround($4_1 * $6_1);
     $7_1 = Math_fround($8_1 * $6_1);
     $4_1 = Math_fround($9_1 * $6_1);
     $6_1 = Math_fround(Math_fround($12_1 * $10_1) + Math_fround(Math_fround($7_1 * $5_1) + Math_fround($4_1 * $11_1)));
     if ($6_1 < Math_fround(-.9999998807907104) ^ 1 | 0) {
      break label$6
     }
     label$7 : {
      if (Math_fround(Math_abs($10_1)) > Math_fround(.7071067690849304) ^ 1 | 0) {
       break label$7
      }
      $11_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($10_1 * $10_1)))));
      $6_1 = Math_fround($5_1 * $11_1);
      $11_1 = Math_fround(-Math_fround($10_1 * $11_1));
      $10_1 = Math_fround(0.0);
      $12_1 = Math_fround(0.0);
      break label$5;
     }
     $10_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($11_1 * $11_1)))));
     $11_1 = Math_fround($11_1 * $10_1);
     $10_1 = Math_fround(-Math_fround($5_1 * $10_1));
     $6_1 = Math_fround(0.0);
     $12_1 = Math_fround(0.0);
     break label$5;
    }
    $6_1 = Math_fround($6_1 + Math_fround(1.0));
    $8_1 = Math_fround(Math_sqrt(Math_fround($6_1 + $6_1)));
    $13_1 = Math_fround(Math_fround(1.0) / $8_1);
    $6_1 = Math_fround(Math_fround(Math_fround($7_1 * $11_1) - Math_fround($4_1 * $5_1)) * $13_1);
    $11_1 = Math_fround(Math_fround(Math_fround($4_1 * $10_1) - Math_fround($12_1 * $11_1)) * $13_1);
    $10_1 = Math_fround(Math_fround(Math_fround($12_1 * $5_1) - Math_fround($7_1 * $10_1)) * $13_1);
    $12_1 = Math_fround($8_1 * Math_fround(.5));
   }
   $3_1 = $2_1 + 24 | 0;
   i64toi32_i32$2 = $1_1 + 12 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $253_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1;
   HEAP32[i64toi32_i32$0 >> 2] = $253_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 20 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$1;
   $16$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 36 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 28 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $18_1 = i64toi32_i32$1;
   $18$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1 + 44 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$1;
   $20$hi = i64toi32_i32$0;
   $21_1 = $2_1 + 72 | 0;
   i64toi32_i32$2 = i64toi32_i32$2 + 60 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $273_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $21_1;
   HEAP32[i64toi32_i32$0 >> 2] = $273_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $22_1 = $2_1 + 56 | 0;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$0 = $22_1;
   HEAP32[i64toi32_i32$0 >> 2] = $19_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $23_1 = $2_1 + 40 | 0;
   i64toi32_i32$1 = $18$hi;
   i64toi32_i32$0 = $23_1;
   HEAP32[i64toi32_i32$0 >> 2] = $18_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $20$hi;
   i64toi32_i32$0 = $2_1;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $20_1;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 52 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $287_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $2_1;
   HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $287_1;
   HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $17$hi;
   HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $17_1;
   HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $16_1;
   HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
   $1043(i64toi32_i32$1 + 16 | 0 | 0, i64toi32_i32$1 | 0);
   $4_1 = Math_fround(HEAPF32[i64toi32_i32$1 >> 2]);
   $13_1 = Math_fround(HEAPF32[(i64toi32_i32$1 + 12 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[(i64toi32_i32$1 + 8 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[(i64toi32_i32$1 + 4 | 0) >> 2]);
   $5_1 = Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $4_1) - Math_fround($13_1 * $10_1)) - Math_fround($8_1 * $11_1)) + Math_fround($9_1 * $6_1));
   $14_1 = Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $8_1) - Math_fround($13_1 * $6_1)) - Math_fround($9_1 * $10_1)) + Math_fround($4_1 * $11_1));
   $7_1 = Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $13_1) + Math_fround($4_1 * $10_1)) + Math_fround($9_1 * $11_1)) + Math_fround($8_1 * $6_1));
   $10_1 = Math_fround(Math_fround(Math_fround(Math_fround($12_1 * $9_1) - Math_fround($13_1 * $11_1)) - Math_fround($4_1 * $6_1)) + Math_fround($8_1 * $10_1));
   $6_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround($7_1 * $7_1) + Math_fround(Math_fround($14_1 * $14_1) + Math_fround(Math_fround($5_1 * $5_1) + Math_fround($10_1 * $10_1)))));
   $11_1 = Math_fround($14_1 * $6_1);
   $4_1 = Math_fround($5_1 * $11_1);
   $12_1 = Math_fround($10_1 * $6_1);
   $13_1 = Math_fround($7_1 * $12_1);
   HEAPF32[$3_1 >> 2] = Math_fround($4_1 + $13_1);
   HEAP32[((i64toi32_i32$1 + 16 | 0) + 44 | 0) >> 2] = 0;
   HEAP32[((i64toi32_i32$1 + 16 | 0) + 28 | 0) >> 2] = 0;
   $8_1 = Math_fround($10_1 * $11_1);
   $6_1 = Math_fround($5_1 * $6_1);
   $9_1 = Math_fround($7_1 * $6_1);
   HEAPF32[((i64toi32_i32$1 + 16 | 0) + 36 | 0) >> 2] = Math_fround($8_1 + $9_1);
   HEAPF32[$23_1 >> 2] = Math_fround($8_1 - $9_1);
   $6_1 = Math_fround($5_1 * $6_1);
   $10_1 = Math_fround($10_1 * $12_1);
   HEAPF32[$22_1 >> 2] = Math_fround(Math_fround(1.0) - Math_fround($6_1 + $10_1));
   $8_1 = Math_fround($14_1 * $11_1);
   HEAPF32[((i64toi32_i32$1 + 16 | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($6_1 + $8_1));
   HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
   HEAPF32[(i64toi32_i32$1 + 48 | 0) >> 2] = Math_fround($4_1 - $13_1);
   $5_1 = Math_fround($5_1 * $12_1);
   $11_1 = Math_fround($7_1 * $11_1);
   HEAPF32[(i64toi32_i32$1 + 32 | 0) >> 2] = Math_fround($5_1 + $11_1);
   HEAPF32[(i64toi32_i32$1 + 20 | 0) >> 2] = Math_fround($5_1 - $11_1);
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $465_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 12 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $465_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAPF32[($2_1 + 16 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($10_1 + $8_1));
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $473_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $473_1;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   $477_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 20 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $477_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $23_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $481_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 28 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $481_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0_1 + 304 | 0) >> 2] = (HEAP32[($0_1 + 304 | 0) >> 2] | 0) + 1 | 0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $489_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 36 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $489_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $22_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $493_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 44 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $493_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $21_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $497_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 60 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $497_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
   $501_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 52 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $501_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
  global$0 = $2_1 + 80 | 0;
 }
 
 function $996($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  HEAPF32[($0_1 + 44 | 0) >> 2] = $1_1;
  (wasm2js_i32$0 = $0_1, wasm2js_f32$0 = Math_fround($497(Math_fround($1_1)))), HEAPF32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_f32$0;
 }
 
 function $997($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 23968;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 216 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 212 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 212 | 0) >> 2] = 0;
  HEAP32[($0_1 + 204 | 0) >> 2] = 0;
  HEAP32[($0_1 + 208 | 0) >> 2] = 0;
  HEAP8[($0_1 + 216 | 0) >> 0] = 1;
  return $0_1 | 0;
 }
 
 function $998($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 23968;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 216 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 212 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 212 | 0) >> 2] = 0;
  HEAP32[($0_1 + 204 | 0) >> 2] = 0;
  HEAP32[($0_1 + 208 | 0) >> 2] = 0;
  HEAP8[($0_1 + 216 | 0) >> 0] = 1;
  $80($0_1 | 0);
 }
 
 function $999($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $2_1 = 0, $8_1 = 0, $9_1 = 0, $7_1 = 0, $10_1 = 0, $6_1 = 0, $11_1 = 0, $12_1 = 0, $15_1 = Math_fround(0), $5_1 = 0, $13_1 = Math_fround(0), $4_1 = 0, $67_1 = 0, $72_1 = 0, $14_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $265_1 = 0, $274_1 = 0, $281_1 = 0, $288_1 = 0, $296_1 = 0, $299_1 = 0, $304_1 = 0, $309_1 = 0, $312_1 = 0, $315_1 = 0, $318_1 = 0, $321_1 = 0, $324_1 = 0, $327_1 = 0, $331_1 = 0, $335_1 = 0;
  $2_1 = global$0 - 96 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($3_1, (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0, $2_1 + 80 | 0, $2_1 + 64 | 0);
  $3_1 = HEAP32[($1_1 + 68 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($3_1, HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 188 | 0) >> 2] | 0, $2_1 + 80 | 0, $2_1 + 64 | 0, HEAP32[($1_1 + 24 | 0) >> 2] | 0);
  $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($3_1, HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 344 | 0) >> 2] | 0, $1_1 + 28 | 0, $3_1);
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1 + 52 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $67_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] = $67_1;
  HEAP32[(i64toi32_i32$0 + 136 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 60 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $72_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 140 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $72_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $4_1 = $0_1 + 132 | 0;
  label$1 : {
   label$2 : {
    $1_1 = HEAP32[($1_1 + 344 | 0) >> 2] | 0;
    if ((FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($1_1) | 0 | 0) >= (1 | 0)) {
     break label$2
    }
    $5_1 = 0;
    break label$1;
   }
   $6_1 = $0_1 + 200 | 0;
   $5_1 = 0;
   $7_1 = 0;
   label$3 : while (1) {
    label$4 : {
     $1_1 = HEAP32[($0_1 + 204 | 0) >> 2] | 0;
     if (($1_1 | 0) > (-1 | 0)) {
      break label$4
     }
     label$5 : {
      if ((HEAP32[($0_1 + 208 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
       break label$5
      }
      label$6 : {
       $3_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
       if (!$3_1) {
        break label$6
       }
       label$7 : {
        if (!(HEAPU8[($0_1 + 216 | 0) >> 0] | 0)) {
         break label$7
        }
        $80($3_1 | 0);
       }
       HEAP32[($0_1 + 212 | 0) >> 2] = 0;
      }
      HEAP8[($0_1 + 216 | 0) >> 0] = 1;
      i64toi32_i32$1 = $0_1;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 208 | 0) >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 212 | 0) >> 2] = i64toi32_i32$0;
     }
     $3_1 = $1_1 << 2 | 0;
     label$8 : while (1) {
      HEAP32[((HEAP32[($0_1 + 212 | 0) >> 2] | 0) + $3_1 | 0) >> 2] = 0;
      $3_1 = $3_1 + 4 | 0;
      $8_1 = $1_1 + 1 | 0;
      $9_1 = $8_1 >>> 0 >= $1_1 >>> 0;
      $1_1 = $8_1;
      if ($9_1) {
       continue label$8
      }
      break label$8;
     };
    }
    HEAP32[($0_1 + 204 | 0) >> 2] = 0;
    $1_1 = HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 344 | 0) >> 2] | 0;
    $3_1 = (HEAP32[((FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($1_1) | 0) + 12 | 0) >> 2] | 0) + ($7_1 << 4 | 0) | 0;
    $1_1 = HEAP32[(HEAP32[($3_1 + 4 | 0) >> 2] | 0) >> 2] | 0;
    label$9 : {
     label$10 : {
      $8_1 = HEAP32[(HEAP32[$3_1 >> 2] | 0) >> 2] | 0;
      if (!$8_1) {
       break label$10
      }
      if ((HEAPU8[($8_1 + 204 | 0) >> 0] | 0) & 4 | 0) {
       break label$9
      }
     }
     label$11 : {
      if (!$1_1) {
       break label$11
      }
      if ((HEAPU8[($1_1 + 204 | 0) >> 0] | 0) & 4 | 0) {
       break label$9
      }
     }
     if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($0_1, $8_1, $1_1) | 0)) {
      break label$9
     }
     label$12 : {
      $1_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      if (!$1_1) {
       break label$12
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($1_1, $6_1);
     }
     $10_1 = HEAP32[($0_1 + 204 | 0) >> 2] | 0;
     if (($10_1 | 0) < (1 | 0)) {
      break label$9
     }
     $11_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     $12_1 = HEAP32[($0_1 + 212 | 0) >> 2] | 0;
     $9_1 = 0;
     label$13 : while (1) {
      label$14 : {
       $1_1 = HEAP32[($12_1 + ($9_1 << 2 | 0) | 0) >> 2] | 0;
       $8_1 = HEAP32[($1_1 + 780 | 0) >> 2] | 0;
       if (($8_1 | 0) < (1 | 0)) {
        break label$14
       }
       $13_1 = (HEAP32[($1_1 + 772 | 0) >> 2] | 0 | 0) == ($11_1 | 0) ? Math_fround(-1.0) : Math_fround(1.0);
       $1_1 = $1_1 + 84 | 0;
       $14_1 = Math_fround(-Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]));
       $3_1 = 0;
       label$15 : while (1) {
        label$16 : {
         $15_1 = Math_fround(HEAPF32[$1_1 >> 2]);
         if ($15_1 < $14_1 ^ 1 | 0) {
          break label$16
         }
         $16_1 = Math_fround(HEAPF32[($1_1 + -8 | 0) >> 2]);
         $17_1 = Math_fround(HEAPF32[($1_1 + -12 | 0) >> 2]);
         HEAPF32[($0_1 + 132 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * Math_fround($13_1 * Math_fround(HEAPF32[($1_1 + -16 | 0) >> 2]))) * Math_fround(.20000000298023224)) + Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]));
         HEAPF32[($0_1 + 136 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * Math_fround($13_1 * $17_1)) * Math_fround(.20000000298023224)) + Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]));
         HEAPF32[($0_1 + 140 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * Math_fround($13_1 * $16_1)) * Math_fround(.20000000298023224)) + Math_fround(HEAPF32[($0_1 + 140 | 0) >> 2]));
         $5_1 = 1;
        }
        $1_1 = $1_1 + 192 | 0;
        $3_1 = $3_1 + 1 | 0;
        if (($3_1 | 0) < ($8_1 | 0)) {
         continue label$15
        }
        break label$15;
       };
      }
      $9_1 = $9_1 + 1 | 0;
      if (($9_1 | 0) < ($10_1 | 0)) {
       continue label$13
      }
      break label$13;
     };
    }
    $7_1 = $7_1 + 1 | 0;
    $1_1 = HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 344 | 0) >> 2] | 0;
    if (($7_1 | 0) < (FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($1_1) | 0 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  $3_1 = $2_1 + 56 | 0;
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $265_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[i64toi32_i32$0 >> 2] = $265_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $8_1 = $2_1 + 8 | 0;
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $0_1 = $1_1 + 12 | 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $274_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $8_1;
  HEAP32[i64toi32_i32$1 >> 2] = $274_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $9_1 = $2_1 + 24 | 0;
  $10_1 = $1_1 + 28 | 0;
  i64toi32_i32$2 = $10_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $281_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $9_1;
  HEAP32[i64toi32_i32$0 >> 2] = $281_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $12_1 = $2_1 + 40 | 0;
  $11_1 = $1_1 + 44 | 0;
  i64toi32_i32$2 = $11_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $288_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $12_1;
  HEAP32[i64toi32_i32$1 >> 2] = $288_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  HEAP32[($1_1 + 304 | 0) >> 2] = (HEAP32[($1_1 + 304 | 0) >> 2] | 0) + 1 | 0;
  $296_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $296_1;
  HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
  $299_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[i64toi32_i32$1 >> 2] = $299_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = $1_1 + 20 | 0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $304_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $304_1;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
  $6_1 = $1_1 + 36 | 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $309_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $309_1;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $312_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $312_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $8_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $315_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $315_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $318_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $10_1;
  HEAP32[i64toi32_i32$0 >> 2] = $318_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  $321_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $7_1;
  HEAP32[i64toi32_i32$1 >> 2] = $321_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $12_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $324_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $11_1;
  HEAP32[i64toi32_i32$0 >> 2] = $324_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
  $327_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[i64toi32_i32$1 >> 2] = $327_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $331_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $1_1 + 60 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $331_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
  $335_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $1_1 + 52 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $335_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = i64toi32_i32$2 + 96 | 0;
  return $5_1 & 1 | 0 | 0;
 }
 
 function $1000($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $13_1 = Math_fround(0), $2_1 = 0, $19_1 = Math_fround(0), $3_1 = 0, $21_1 = Math_fround(0), $24_1 = Math_fround(0), $11_1 = 0, $20_1 = Math_fround(0), $22_1 = Math_fround(0), $6_1 = 0, $5_1 = 0, $25_1 = Math_fround(0), $23_1 = Math_fround(0), $4_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $9_1 = 0, $26_1 = Math_fround(0), $17_1 = 0, $17$hi = 0, $10_1 = 0, $12_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $18_1 = 0, $68_1 = 0, $79_1 = 0, $523_1 = 0, $528_1 = 0, $537_1 = 0, $542_1 = 0, $553_1 = 0, $556_1 = 0, $561_1 = 0, $566_1 = 0, $571_1 = 0, $576_1 = 0, $580_1 = 0, $584_1 = 0, $598_1 = 0, $603_1 = 0, $626_1 = 0, $628_1 = 0, $632_1 = 0, $637_1 = 0;
  $2_1 = global$0 - 240 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  $4_1 = Math_fround(0.0);
  label$1 : {
   if (Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]) < Math_fround(0.0) ^ 1 | 0) {
    break label$1
   }
   $3_1 = HEAP32[($0_1 + 60 | 0) >> 2] | 0;
   $4_1 = (wasm2js_scratch_store_i32(0, $3_1), wasm2js_scratch_load_f32());
  }
  $5_1 = ($2_1 + 176 | 0) + 24 | 0;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $6_1 = ($2_1 + 176 | 0) + 20 | 0;
  HEAP32[$6_1 >> 2] = 1065353216;
  $7_1 = ($2_1 + 176 | 0) + 40 | 0;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $8_1 = ($2_1 + 112 | 0) + 24 | 0;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $9_1 = ($2_1 + 112 | 0) + 20 | 0;
  HEAP32[$9_1 >> 2] = 1065353216;
  $10_1 = ($2_1 + 112 | 0) + 40 | 0;
  i64toi32_i32$1 = $10_1;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $11_1 = $0_1 + 140 | 0;
  i64toi32_i32$2 = $11_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $68_1 = i64toi32_i32$0;
  i64toi32_i32$0 = ($2_1 + 176 | 0) + 56 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $68_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 184 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$0 + 188 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 192 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 128 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$0 + 144 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 132 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
  $79_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1;
  HEAP32[(i64toi32_i32$1 + 224 | 0) >> 2] = $79_1;
  HEAP32[(i64toi32_i32$1 + 228 | 0) >> 2] = i64toi32_i32$0;
  $12_1 = Math_fround(HEAPF32[($0_1 + 256 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]);
  $13_1 = $13_1 > Math_fround(0.0) ? $13_1 : Math_fround(0.0);
  HEAPF32[($0_1 + 152 | 0) >> 2] = Math_fround(Math_fround(Math_fround($4_1 * $12_1) + Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($0_1 + 272 | 0) >> 2]) * $13_1));
  $14_1 = Math_fround(HEAPF32[($0_1 + 260 | 0) >> 2]);
  HEAPF32[($0_1 + 156 | 0) >> 2] = Math_fround(Math_fround(Math_fround($4_1 * $14_1) + Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2])) + Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 276 | 0) >> 2])));
  HEAP32[($0_1 + 164 | 0) >> 2] = 0;
  $15_1 = $0_1 + 160 | 0;
  $16_1 = Math_fround(HEAPF32[($0_1 + 264 | 0) >> 2]);
  HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($4_1 * $16_1) + Math_fround(HEAPF32[$11_1 >> 2])) + Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 280 | 0) >> 2])));
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[($0_1 + 152 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  $17$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 136 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $15_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $18_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $11_1;
  HEAP32[i64toi32_i32$1 >> 2] = $18_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($2_1 + 112 | 0) + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $18_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $17$hi;
  i64toi32_i32$1 = $2_1;
  HEAP32[(i64toi32_i32$1 + 160 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$1 + 164 | 0) >> 2] = i64toi32_i32$0;
  $19_1 = Math_fround(HEAPF32[($0_1 + 180 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($0_1 + 176 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($0_1 + 172 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]);
  HEAP32[((i64toi32_i32$1 + 176 | 0) + 44 | 0) >> 2] = 0;
  HEAP32[((i64toi32_i32$1 + 176 | 0) + 28 | 0) >> 2] = 0;
  $22_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($21_1 * $21_1)) + Math_fround($20_1 * $20_1)) + Math_fround($19_1 * $19_1)));
  $23_1 = Math_fround($20_1 * $22_1);
  $24_1 = Math_fround($21_1 * $23_1);
  $25_1 = Math_fround($13_1 * $22_1);
  $26_1 = Math_fround($19_1 * $25_1);
  HEAPF32[((i64toi32_i32$1 + 176 | 0) + 36 | 0) >> 2] = Math_fround($24_1 + $26_1);
  HEAPF32[$5_1 >> 2] = Math_fround($24_1 - $26_1);
  $24_1 = Math_fround($13_1 * $25_1);
  $22_1 = Math_fround($21_1 * $22_1);
  $21_1 = Math_fround($21_1 * $22_1);
  HEAPF32[$7_1 >> 2] = Math_fround(Math_fround(1.0) - Math_fround($24_1 + $21_1));
  $20_1 = Math_fround($20_1 * $23_1);
  HEAPF32[$6_1 >> 2] = Math_fround(Math_fround(1.0) - Math_fround($24_1 + $20_1));
  HEAP32[(i64toi32_i32$1 + 188 | 0) >> 2] = 0;
  $24_1 = Math_fround($13_1 * $23_1);
  $25_1 = Math_fround($19_1 * $22_1);
  HEAPF32[(i64toi32_i32$1 + 208 | 0) >> 2] = Math_fround($24_1 - $25_1);
  $13_1 = Math_fround($13_1 * $22_1);
  $19_1 = Math_fround($19_1 * $23_1);
  HEAPF32[(i64toi32_i32$1 + 192 | 0) >> 2] = Math_fround($13_1 + $19_1);
  HEAPF32[(i64toi32_i32$1 + 184 | 0) >> 2] = Math_fround($24_1 + $25_1);
  HEAPF32[(i64toi32_i32$1 + 180 | 0) >> 2] = Math_fround($13_1 - $19_1);
  HEAPF32[(i64toi32_i32$1 + 176 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($21_1 + $20_1));
  $19_1 = Math_fround(HEAPF32[($0_1 + 196 | 0) >> 2]);
  $20_1 = Math_fround(HEAPF32[($0_1 + 192 | 0) >> 2]);
  $21_1 = Math_fround(HEAPF32[($0_1 + 188 | 0) >> 2]);
  $13_1 = Math_fround(HEAPF32[($0_1 + 184 | 0) >> 2]);
  HEAP32[((i64toi32_i32$1 + 112 | 0) + 44 | 0) >> 2] = 0;
  HEAP32[((i64toi32_i32$1 + 112 | 0) + 28 | 0) >> 2] = 0;
  $22_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($13_1 * $13_1) + Math_fround($21_1 * $21_1)) + Math_fround($20_1 * $20_1)) + Math_fround($19_1 * $19_1)));
  $23_1 = Math_fround($20_1 * $22_1);
  $24_1 = Math_fround($21_1 * $23_1);
  $25_1 = Math_fround($13_1 * $22_1);
  $26_1 = Math_fround($19_1 * $25_1);
  HEAPF32[((i64toi32_i32$1 + 112 | 0) + 36 | 0) >> 2] = Math_fround($24_1 + $26_1);
  HEAPF32[$8_1 >> 2] = Math_fround($24_1 - $26_1);
  $24_1 = Math_fround($13_1 * $25_1);
  $22_1 = Math_fround($21_1 * $22_1);
  $21_1 = Math_fround($21_1 * $22_1);
  HEAPF32[$10_1 >> 2] = Math_fround(Math_fround(1.0) - Math_fround($24_1 + $21_1));
  $20_1 = Math_fround($20_1 * $23_1);
  HEAPF32[$9_1 >> 2] = Math_fround(Math_fround(1.0) - Math_fround($24_1 + $20_1));
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = 0;
  $24_1 = Math_fround($13_1 * $23_1);
  $25_1 = Math_fround($19_1 * $22_1);
  HEAPF32[(i64toi32_i32$1 + 144 | 0) >> 2] = Math_fround($24_1 - $25_1);
  $13_1 = Math_fround($13_1 * $22_1);
  $19_1 = Math_fround($19_1 * $23_1);
  HEAPF32[(i64toi32_i32$1 + 128 | 0) >> 2] = Math_fround($13_1 + $19_1);
  HEAPF32[(i64toi32_i32$1 + 120 | 0) >> 2] = Math_fround($24_1 + $25_1);
  HEAPF32[(i64toi32_i32$1 + 116 | 0) >> 2] = Math_fround($13_1 - $19_1);
  HEAPF32[(i64toi32_i32$1 + 112 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($21_1 + $20_1));
  i64toi32_i32$1 = i64toi32_i32$1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 100 | 0) >> 2] = 0;
  HEAPF32[($2_1 + 96 | 0) >> 2] = Math_fround(-$16_1);
  HEAPF32[($2_1 + 92 | 0) >> 2] = Math_fround(-$14_1);
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAPF32[(i64toi32_i32$1 + 88 | 0) >> 2] = Math_fround(-$12_1);
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 1065353216;
  HEAP32[i64toi32_i32$1 >> 2] = 24172;
  $11_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  $5_1 = HEAP32[($11_1 + 188 | 0) >> 2] | 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  label$2 : {
   label$3 : {
    if (!(HEAPU8[($0_1 + 250 | 0) >> 0] | 0)) {
     break label$3
    }
    $992($11_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 176 | 0 | 0, $2_1 + 112 | 0 | 0, $2_1 | 0, Math_fround(Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2])));
    break label$2;
   }
   $872($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $2_1 + 176 | 0 | 0, $2_1 + 112 | 0 | 0, $2_1 | 0, Math_fround(Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2])));
  }
  $5_1 = $0_1 + 152 | 0;
  $11_1 = $0_1 + 132 | 0;
  label$4 : {
   label$5 : {
    label$6 : {
     label$7 : {
      if (Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]) < Math_fround(1.0) ^ 1 | 0) {
       break label$7
      }
      $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if ((HEAPU8[($6_1 + 204 | 0) >> 0] | 0) & 4 | 0) {
       break label$7
      }
      if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($0_1, $6_1, HEAP32[($2_1 + 80 | 0) >> 2] | 0) | 0)) {
       break label$7
      }
      label$8 : {
       if (Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($2_1 + 48 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 256 | 0) >> 2])) + Math_fround(Math_fround(HEAPF32[($2_1 + 52 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 260 | 0) >> 2]))) + Math_fround(Math_fround(HEAPF32[($2_1 + 56 | 0) >> 2]) * Math_fround(HEAPF32[($0_1 + 264 | 0) >> 2]))) > Math_fround(0.0) ^ 1 | 0) {
        break label$8
       }
       $13_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
       HEAPF32[($0_1 + 148 | 0) >> 2] = Math_fround($4_1 * $13_1);
       label$9 : {
        if (!(HEAPU8[($0_1 + 288 | 0) >> 0] | 0)) {
         break label$9
        }
        $19_1 = Math_fround(Math_fround(1.0) - $13_1);
        HEAPF32[($0_1 + 132 | 0) >> 2] = Math_fround(Math_fround($19_1 * Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2])) + Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2])));
        HEAPF32[($0_1 + 136 | 0) >> 2] = Math_fround(Math_fround($19_1 * Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2])) + Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 156 | 0) >> 2])));
        HEAPF32[($0_1 + 140 | 0) >> 2] = Math_fround(Math_fround($19_1 * Math_fround(HEAPF32[($0_1 + 140 | 0) >> 2])) + Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2])));
        break label$8;
       }
       i64toi32_i32$2 = $5_1;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $523_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $11_1;
       HEAP32[i64toi32_i32$0 >> 2] = $523_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $528_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $11_1 + 8 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $528_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      }
      $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      $7_1 = $6_1 + 60 | 0;
      $8_1 = $11_1 + 8 | 0;
      i64toi32_i32$2 = $8_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $537_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $7_1;
      HEAP32[i64toi32_i32$0 >> 2] = $537_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      $9_1 = $6_1 + 52 | 0;
      i64toi32_i32$2 = $11_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $542_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $9_1;
      HEAP32[i64toi32_i32$1 >> 2] = $542_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      HEAP32[($3_1 + 304 | 0) >> 2] = (HEAP32[($3_1 + 304 | 0) >> 2] | 0) + 1 | 0;
      i64toi32_i32$2 = $6_1 + 12 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $553_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1 + 12 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $553_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
      $556_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $3_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $556_1;
      HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = i64toi32_i32$2 + 28 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $561_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1 + 28 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $561_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $6_1 + 20 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $566_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $3_1 + 20 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $566_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $6_1 + 44 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $571_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1 + 44 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $571_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $6_1 + 36 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $576_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $3_1 + 36 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $576_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$2 = $9_1;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $580_1 = i64toi32_i32$0;
      i64toi32_i32$0 = $3_1 + 52 | 0;
      HEAP32[i64toi32_i32$0 >> 2] = $580_1;
      HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $584_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $3_1 + 60 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $584_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP8[($0_1 + 220 | 0) >> 0] = 0;
      if (!($999($0_1 | 0, $1_1 | 0) | 0)) {
       break label$5
      }
      HEAP8[($0_1 + 220 | 0) >> 0] = 1;
      if ($999($0_1 | 0, $1_1 | 0) | 0) {
       break label$6
      }
      break label$5;
     }
     HEAP32[($0_1 + 148 | 0) >> 2] = $3_1;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $598_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $11_1;
     HEAP32[i64toi32_i32$0 >> 2] = $598_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $603_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $11_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $603_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     break label$4;
    }
    HEAP8[($0_1 + 220 | 0) >> 0] = 1;
    if (!($999($0_1 | 0, $1_1 | 0) | 0)) {
     break label$5
    }
    HEAP8[($0_1 + 220 | 0) >> 0] = 1;
    if (!($999($0_1 | 0, $1_1 | 0) | 0)) {
     break label$5
    }
    HEAP8[($0_1 + 220 | 0) >> 0] = 1;
    if (!($999($0_1 | 0, $1_1 | 0) | 0)) {
     break label$5
    }
    HEAP8[($0_1 + 220 | 0) >> 0] = 1;
   }
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $3_1 = $1_1 + 52 | 0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $626_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $5_1;
   HEAP32[i64toi32_i32$0 >> 2] = $626_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $628_1 = i64toi32_i32$0 + 8 | 0;
   $5_1 = $1_1 + 60 | 0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $632_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $628_1;
   HEAP32[i64toi32_i32$1 >> 2] = $632_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $17_1 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $637_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $8_1;
   HEAP32[i64toi32_i32$1 >> 2] = $637_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$1 = $11_1;
   HEAP32[i64toi32_i32$1 >> 2] = $17_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   if (Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]) > Math_fround(0.0) ^ 1 | 0) {
    break label$4
   }
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
  }
  global$0 = $2_1 + 240 | 0;
 }
 
 function $1001($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   $2_1 = HEAP32[($2_1 + 188 | 0) >> 2] | 0;
   $1_1 = HEAP32[($1_1 + 188 | 0) >> 2] | 0;
   if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0) & (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) {
    break label$1
   }
   return 0 | 0;
  }
  return ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & (HEAP32[($2_1 + 4 | 0) >> 2] | 0) | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1002($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), i64toi32_i32$0 = 0, $12_1 = Math_fround(0), $59_1 = 0, $64_1 = 0, $77_1 = Math_fround(0), $102_1 = Math_fround(0);
  label$1 : {
   $4_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]));
   $5_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 156 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]));
   $6_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 140 | 0) >> 2]));
   $7_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)) + Math_fround($6_1 * $6_1))));
   if ($7_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
    break label$1
   }
   $8_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $10_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $1_1 = $0_1 + 152 | 0;
   i64toi32_i32$2 = $0_1 + 132 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $59_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $1_1;
   HEAP32[$1_1 >> 2] = $59_1;
   HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $64_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $1_1 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $64_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   if ($3_1 == Math_fround(0.0)) {
    break label$1
   }
   $3_1 = Math_fround($7_1 * $3_1);
   $7_1 = Math_fround(Math_fround(1.0) / $7_1);
   $4_1 = Math_fround($4_1 * $7_1);
   $77_1 = $4_1;
   $12_1 = Math_fround($5_1 * $7_1);
   $6_1 = Math_fround($6_1 * $7_1);
   $4_1 = Math_fround(Math_fround(Math_fround($4_1 * $9_1) + Math_fround($12_1 * $10_1)) + Math_fround($6_1 * $8_1));
   $4_1 = Math_fround($4_1 + $4_1);
   $5_1 = Math_fround($77_1 - Math_fround($9_1 * $4_1));
   $102_1 = $5_1;
   $6_1 = Math_fround($6_1 - Math_fround($8_1 * $4_1));
   $4_1 = Math_fround($12_1 - Math_fround($10_1 * $4_1));
   $5_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($6_1 * $6_1) + Math_fround(Math_fround($5_1 * $5_1) + Math_fround($4_1 * $4_1))))));
   $7_1 = Math_fround($102_1 * $5_1);
   $6_1 = Math_fround($6_1 * $5_1);
   $5_1 = Math_fround($4_1 * $5_1);
   $4_1 = Math_fround(Math_fround($8_1 * $6_1) + Math_fround(Math_fround($9_1 * $7_1) + Math_fround($10_1 * $5_1)));
   HEAPF32[($0_1 + 152 | 0) >> 2] = Math_fround(Math_fround($3_1 * Math_fround($7_1 - Math_fround($9_1 * $4_1))) + Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2]));
   HEAPF32[($0_1 + 156 | 0) >> 2] = Math_fround(Math_fround($3_1 * Math_fround($5_1 - Math_fround($10_1 * $4_1))) + Math_fround(HEAPF32[($0_1 + 156 | 0) >> 2]));
   HEAPF32[($0_1 + 160 | 0) >> 2] = Math_fround(Math_fround($3_1 * Math_fround($6_1 - Math_fround($8_1 * $4_1))) + Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2]));
  }
 }
 
 function $1003($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), i64toi32_i32$2 = 0, $12_1 = 0, $25_1 = Math_fround(0), $24_1 = Math_fround(0), $23_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30_1 = Math_fround(0), $7_1 = 0, $8_1 = 0, $13_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $9_1 = 0, $130_1 = 0, $133_1 = 0, $139_1 = 0, $145_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $392_1 = 0, $584_1 = 0, $587_1 = 0;
  $3_1 = global$0 - 240 | 0;
  global$0 = $3_1;
  i64toi32_i32$1 = ($3_1 + 176 | 0) + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($3_1 + 176 | 0) + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(($3_1 + 176 | 0) + 20 | 0) >> 2] = 1065353216;
  HEAP32[(($3_1 + 176 | 0) + 40 | 0) >> 2] = 1065353216;
  $4_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $5_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $6_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  HEAP32[($0_1 + 164 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 160 | 0) >> 2] = Math_fround($6_1 + Math_fround(HEAPF32[($0_1 + 140 | 0) >> 2]));
  HEAPF32[($0_1 + 156 | 0) >> 2] = Math_fround($5_1 + Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]));
  HEAPF32[($0_1 + 152 | 0) >> 2] = Math_fround($4_1 + Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]));
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 180 | 0) >> 2] = 0;
  HEAP32[($3_1 + 184 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 176 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 208 | 0) >> 2] = 0;
  HEAP32[($3_1 + 212 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(($3_1 + 176 | 0) + 60 | 0) >> 2] = 0;
  i64toi32_i32$1 = ($3_1 + 176 | 0) + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($3_1 + 176 | 0) + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3_1 + 112 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = ($3_1 + 112 | 0) + 12 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 116 | 0) >> 2] = 0;
  HEAP32[($3_1 + 120 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(($3_1 + 112 | 0) + 20 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = ($3_1 + 112 | 0) + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3_1;
  i64toi32_i32$0 = 0;
  HEAP32[($3_1 + 144 | 0) >> 2] = 0;
  HEAP32[($3_1 + 148 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(($3_1 + 112 | 0) + 40 | 0) >> 2] = 1065353216;
  HEAP32[(($3_1 + 112 | 0) + 60 | 0) >> 2] = 0;
  i64toi32_i32$1 = ($3_1 + 112 | 0) + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = ($3_1 + 112 | 0) + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = $0_1 + 152 | 0;
  $8_1 = $0_1 + 132 | 0;
  $9_1 = $3_1 + 48 | 0;
  $2_1 = $3_1 + 16 | 0;
  $10_1 = ($3_1 + 112 | 0) + 48 | 0;
  $11_1 = ($3_1 + 176 | 0) + 48 | 0;
  $12_1 = -11;
  $13_1 = Math_fround(1.0);
  label$1 : {
   label$2 : while (1) {
    $14_1 = $12_1 + 1 | 0;
    if ($14_1 >>> 0 < $12_1 >>> 0) {
     break label$1
    }
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $130_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $11_1;
    HEAP32[i64toi32_i32$0 >> 2] = $130_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $133_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $10_1;
    HEAP32[i64toi32_i32$1 >> 2] = $133_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $15_1 = $8_1 + 8 | 0;
    i64toi32_i32$2 = $15_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $139_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $11_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $139_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $16_1 = $7_1 + 8 | 0;
    i64toi32_i32$2 = $16_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $145_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $10_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $145_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $17_1 = Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]);
    $18_1 = Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2]);
    $19_1 = Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]);
    $20_1 = Math_fround(HEAPF32[($0_1 + 156 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($0_1 + 140 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($0_1 + 180 | 0) >> 2]);
    $23_1 = Math_fround(HEAPF32[($0_1 + 176 | 0) >> 2]);
    $4_1 = Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($0_1 + 172 | 0) >> 2]);
    HEAP32[($3_1 + 220 | 0) >> 2] = 0;
    HEAP32[($3_1 + 204 | 0) >> 2] = 0;
    HEAP32[($3_1 + 188 | 0) >> 2] = 0;
    HEAP32[($3_1 + 156 | 0) >> 2] = 0;
    HEAP32[($3_1 + 140 | 0) >> 2] = 0;
    HEAP32[($3_1 + 124 | 0) >> 2] = 0;
    $24_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($6_1 * $6_1)) + Math_fround($23_1 * $23_1)) + Math_fround($5_1 * $5_1)));
    $25_1 = Math_fround($23_1 * $24_1);
    $26_1 = Math_fround($6_1 * $25_1);
    $27_1 = Math_fround($4_1 * $24_1);
    $28_1 = Math_fround($5_1 * $27_1);
    HEAPF32[($3_1 + 212 | 0) >> 2] = Math_fround($26_1 + $28_1);
    $29_1 = Math_fround($4_1 * $25_1);
    $24_1 = Math_fround($6_1 * $24_1);
    $30_1 = Math_fround($5_1 * $24_1);
    HEAPF32[($3_1 + 208 | 0) >> 2] = Math_fround($29_1 - $30_1);
    HEAPF32[($3_1 + 200 | 0) >> 2] = Math_fround($26_1 - $28_1);
    $26_1 = Math_fround($4_1 * $24_1);
    $5_1 = Math_fround($5_1 * $25_1);
    HEAPF32[($3_1 + 192 | 0) >> 2] = Math_fround($26_1 + $5_1);
    HEAPF32[($3_1 + 184 | 0) >> 2] = Math_fround($29_1 + $30_1);
    HEAPF32[($3_1 + 180 | 0) >> 2] = Math_fround($26_1 - $5_1);
    $4_1 = Math_fround($4_1 * $27_1);
    $5_1 = Math_fround($6_1 * $24_1);
    HEAPF32[($3_1 + 216 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($4_1 + $5_1));
    $6_1 = Math_fround($23_1 * $25_1);
    HEAPF32[($3_1 + 196 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($4_1 + $6_1));
    HEAPF32[($3_1 + 176 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($5_1 + $6_1));
    $4_1 = Math_fround(HEAPF32[($0_1 + 184 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($0_1 + 188 | 0) >> 2]);
    $23_1 = Math_fround(HEAPF32[($0_1 + 192 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($0_1 + 196 | 0) >> 2]);
    $24_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)) + Math_fround($23_1 * $23_1)) + Math_fround($6_1 * $6_1)));
    $26_1 = Math_fround($5_1 * $24_1);
    $27_1 = Math_fround($4_1 * $26_1);
    $25_1 = Math_fround($23_1 * $24_1);
    $28_1 = Math_fround($6_1 * $25_1);
    HEAPF32[($3_1 + 116 | 0) >> 2] = Math_fround($27_1 - $28_1);
    $29_1 = Math_fround($4_1 * $25_1);
    $30_1 = Math_fround($6_1 * $26_1);
    HEAPF32[($3_1 + 120 | 0) >> 2] = Math_fround($29_1 + $30_1);
    HEAPF32[($3_1 + 128 | 0) >> 2] = Math_fround($27_1 + $28_1);
    $27_1 = Math_fround($5_1 * $25_1);
    $24_1 = Math_fround($4_1 * $24_1);
    $6_1 = Math_fround($6_1 * $24_1);
    HEAPF32[($3_1 + 136 | 0) >> 2] = Math_fround($27_1 - $6_1);
    HEAPF32[($3_1 + 144 | 0) >> 2] = Math_fround($29_1 - $30_1);
    HEAPF32[($3_1 + 148 | 0) >> 2] = Math_fround($27_1 + $6_1);
    $5_1 = Math_fround($5_1 * $26_1);
    $6_1 = Math_fround($23_1 * $25_1);
    HEAPF32[($3_1 + 112 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($5_1 + $6_1));
    $4_1 = Math_fround($4_1 * $24_1);
    HEAPF32[($3_1 + 132 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($4_1 + $6_1));
    HEAPF32[($3_1 + 152 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($4_1 + $5_1));
    i64toi32_i32$1 = $2_1 + 24 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $2_1 + 16 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $2_1 + 8 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$0 = 0;
    HEAP32[($3_1 + 100 | 0) >> 2] = 0;
    HEAP32[($3_1 + 104 | 0) >> 2] = i64toi32_i32$0;
    HEAPF32[($3_1 + 96 | 0) >> 2] = Math_fround($21_1 - $22_1);
    HEAPF32[($3_1 + 92 | 0) >> 2] = Math_fround($19_1 - $20_1);
    HEAPF32[($3_1 + 88 | 0) >> 2] = Math_fround($17_1 - $18_1);
    HEAP32[($3_1 + 80 | 0) >> 2] = 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = 1065353216;
    HEAP32[$3_1 >> 2] = 24172;
    $12_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 84 | 0) >> 2] = $12_1;
    i64toi32_i32$2 = HEAP32[($12_1 + 188 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    $392_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[($3_1 + 8 | 0) >> 2] = $392_1;
    HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$1;
    $12_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $4_1 = Math_fround(FUNCTION_TABLE[HEAP32[((HEAP32[$12_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($12_1));
    $12_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$12_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($12_1, Math_fround($4_1 + Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2])));
    label$3 : {
     label$4 : {
      if (Math_fround(HEAPF32[($3_1 + 176 | 0) >> 2]) != Math_fround(HEAPF32[($3_1 + 112 | 0) >> 2])) {
       break label$4
      }
      if (Math_fround(HEAPF32[($3_1 + 192 | 0) >> 2]) != Math_fround(HEAPF32[($3_1 + 128 | 0) >> 2])) {
       break label$4
      }
      if (Math_fround(HEAPF32[($3_1 + 208 | 0) >> 2]) != Math_fround(HEAPF32[($3_1 + 144 | 0) >> 2])) {
       break label$4
      }
      if (Math_fround(HEAPF32[($3_1 + 180 | 0) >> 2]) != Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2])) {
       break label$4
      }
      if (Math_fround(HEAPF32[($3_1 + 196 | 0) >> 2]) != Math_fround(HEAPF32[($3_1 + 132 | 0) >> 2])) {
       break label$4
      }
      if (Math_fround(HEAPF32[($3_1 + 212 | 0) >> 2]) != Math_fround(HEAPF32[($3_1 + 148 | 0) >> 2])) {
       break label$4
      }
      if (Math_fround(HEAPF32[($3_1 + 184 | 0) >> 2]) != Math_fround(HEAPF32[($3_1 + 120 | 0) >> 2])) {
       break label$4
      }
      if (Math_fround(HEAPF32[($3_1 + 200 | 0) >> 2]) != Math_fround(HEAPF32[($3_1 + 136 | 0) >> 2])) {
       break label$4
      }
      if (Math_fround(HEAPF32[($3_1 + 216 | 0) >> 2]) != Math_fround(HEAPF32[($3_1 + 152 | 0) >> 2])) {
       break label$4
      }
      if (Math_fround(HEAPF32[($3_1 + 236 | 0) >> 2]) != Math_fround(HEAPF32[($3_1 + 172 | 0) >> 2])) {
       break label$4
      }
      if (Math_fround(HEAPF32[($3_1 + 232 | 0) >> 2]) != Math_fround(HEAPF32[($3_1 + 168 | 0) >> 2])) {
       break label$4
      }
      if (Math_fround(HEAPF32[($3_1 + 228 | 0) >> 2]) != Math_fround(HEAPF32[($3_1 + 164 | 0) >> 2])) {
       break label$4
      }
      if (Math_fround(HEAPF32[($3_1 + 224 | 0) >> 2]) == Math_fround(HEAPF32[($3_1 + 160 | 0) >> 2])) {
       break label$3
      }
     }
     label$5 : {
      if (!(HEAPU8[($0_1 + 250 | 0) >> 0] | 0)) {
       break label$5
      }
      $992(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $3_1 + 176 | 0 | 0, $3_1 + 112 | 0 | 0, $3_1 | 0, Math_fround(Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2])));
      break label$3;
     }
     $872($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $3_1 + 176 | 0 | 0, $3_1 + 112 | 0 | 0, $3_1 | 0, Math_fround(Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2])));
    }
    $12_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    FUNCTION_TABLE[HEAP32[((HEAP32[$12_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($12_1, $4_1);
    label$6 : {
     label$7 : {
      $4_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
      if ($4_1 < Math_fround(1.0) ^ 1 | 0) {
       break label$7
      }
      $12_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if ((HEAPU8[($12_1 + 204 | 0) >> 0] | 0) & 4 | 0) {
       break label$7
      }
      if (!(FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($0_1, $12_1, HEAP32[($3_1 + 80 | 0) >> 2] | 0) | 0)) {
       break label$7
      }
      $1002($0_1 | 0, $9_1 | 0, Math_fround($4_1), Math_fround(Math_fround(1.0)));
      $5_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2]));
      $6_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 156 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]));
      $23_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 140 | 0) >> 2]));
      $25_1 = Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($6_1 * $6_1)) + Math_fround($23_1 * $23_1));
      if ($25_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
       break label$1
      }
      $25_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($25_1)));
      if (Math_fround(Math_fround(Math_fround(Math_fround($5_1 * $25_1) * Math_fround(HEAPF32[($0_1 + 84 | 0) >> 2])) + Math_fround(Math_fround($6_1 * $25_1) * Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2]))) + Math_fround(Math_fround($23_1 * $25_1) * Math_fround(HEAPF32[($0_1 + 92 | 0) >> 2]))) <= Math_fround(0.0) ^ 1 | 0) {
       break label$6
      }
      break label$1;
     }
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $584_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $8_1;
     HEAP32[i64toi32_i32$1 >> 2] = $584_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = $16_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $587_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $15_1;
     HEAP32[i64toi32_i32$0 >> 2] = $587_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    }
    $12_1 = $14_1;
    $13_1 = Math_fround($13_1 - $4_1);
    if ($13_1 > Math_fround(.009999999776482582)) {
     continue label$2
    }
    break label$2;
   };
  }
  global$0 = $3_1 + 240 | 0;
 }
 
 function $1004($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = Math_fround(0), i64toi32_i32$2 = 0, $5_1 = Math_fround(0), $22_1 = Math_fround(0), $8_1 = 0, $25_1 = Math_fround(0), $23_1 = Math_fround(0), $13_1 = 0, $21_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $6_1 = 0, $11_1 = 0, $24_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = 0, $30_1 = 0, $18_1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $20_1 = 0, $28_1 = Math_fround(0), $29_1 = Math_fround(0), $38_1 = 0, $41_1 = 0, $96_1 = 0, $98_1 = Math_fround(0), $120_1 = 0, $124_1 = 0, $153_1 = 0, $161_1 = 0, $167_1 = 0, $19_1 = 0, $204_1 = 0, $209_1 = 0, $221_1 = 0, $224_1 = 0, $664_1 = 0, $669_1 = 0, $713_1 = Math_fround(0), $759_1 = 0, $764_1 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $3_1 = global$0 - 432 | 0;
  global$0 = $3_1;
  i64toi32_i32$2 = $0_1 + 160 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $38_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1 + 232 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $38_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[($0_1 + 152 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
  $41_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $3_1;
  HEAP32[($3_1 + 224 | 0) >> 2] = $41_1;
  HEAP32[($3_1 + 228 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $4_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
   if ($4_1 > Math_fround(0.0)) {
    break label$1
   }
   label$2 : {
    $4_1 = Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(-$4_1) : Math_fround(0.0)) * $2_1);
    if ($4_1 > Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    $5_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
    if ($4_1 > $5_1 ^ 1 | 0) {
     break label$2
    }
    label$3 : {
     if (HEAPU8[($0_1 + 248 | 0) >> 0] | 0) {
      break label$3
     }
     if (HEAPU8[($0_1 + 249 | 0) >> 0] | 0) {
      break label$2
     }
    }
    $4_1 = $5_1;
   }
   $6_1 = $0_1 + 152 | 0;
   $4_1 = Math_fround($4_1 + Math_fround(HEAPF32[($0_1 + 148 | 0) >> 2]));
   $7_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 256 | 0) >> 2]) * $4_1);
   HEAPF32[($0_1 + 152 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2]) - $7_1);
   $8_1 = $0_1 + 156 | 0;
   $9_1 = Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 260 | 0) >> 2]));
   HEAPF32[$8_1 >> 2] = Math_fround(Math_fround(HEAPF32[$8_1 >> 2]) - $9_1);
   $8_1 = $0_1 + 160 | 0;
   $96_1 = $8_1;
   $98_1 = Math_fround(HEAPF32[$8_1 >> 2]);
   $8_1 = $0_1 + 264 | 0;
   $10_1 = Math_fround($4_1 * Math_fround(HEAPF32[$8_1 >> 2]));
   HEAPF32[$96_1 >> 2] = Math_fround($98_1 - $10_1);
   i64toi32_i32$1 = ($3_1 + 112 | 0) + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = ($3_1 + 112 | 0) + 32 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = ($3_1 + 112 | 0) + 40 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $8_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $120_1 = i64toi32_i32$0;
   i64toi32_i32$0 = ($3_1 + 112 | 0) + 96 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $120_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 0;
   HEAP32[($3_1 + 128 | 0) >> 2] = 0;
   HEAP32[($3_1 + 132 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 256 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 260 | 0) >> 2] | 0;
   $124_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1;
   HEAP32[($3_1 + 200 | 0) >> 2] = $124_1;
   HEAP32[($3_1 + 204 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 192 | 0) >> 2] = 0;
   HEAP32[($3_1 + 116 | 0) >> 2] = 1065353216;
   HEAP32[($3_1 + 112 | 0) >> 2] = 24172;
   $11_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   HEAP32[($3_1 + 196 | 0) >> 2] = $11_1;
   $12_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
   HEAP32[($3_1 + 216 | 0) >> 2] = $12_1;
   $13_1 = HEAP32[($11_1 + 188 | 0) >> 2] | 0;
   HEAP32[($3_1 + 120 | 0) >> 2] = HEAP32[($13_1 + 4 | 0) >> 2] | 0;
   HEAP32[($3_1 + 124 | 0) >> 2] = HEAP32[($13_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$1 = $3_1 + 24 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $3_1 + 32 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $3_1 + 40 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $8_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $153_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1 + 96 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $153_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($3_1 + 80 | 0) >> 2] = 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = 1065353216;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 0;
   HEAP32[($3_1 + 16 | 0) >> 2] = 0;
   HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[($3_1 + 84 | 0) >> 2] = $11_1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[($0_1 + 256 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($0_1 + 260 | 0) >> 2] | 0;
   $161_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1;
   HEAP32[($3_1 + 88 | 0) >> 2] = $161_1;
   HEAP32[($3_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$3_1 >> 2] = 24172;
   HEAP32[($3_1 + 104 | 0) >> 2] = $12_1;
   i64toi32_i32$2 = $13_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   $167_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1;
   HEAP32[($3_1 + 8 | 0) >> 2] = $167_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$1;
   $11_1 = $0_1 + 132 | 0;
   $12_1 = ($3_1 + 304 | 0) + 48 | 0;
   $14_1 = ($3_1 + 368 | 0) + 48 | 0;
   $15_1 = ($3_1 + 240 | 0) + 24 | 0;
   $16_1 = $3_1 + 240 | 0 | 4 | 0;
   $17_1 = ($3_1 + 304 | 0) + 24 | 0;
   $18_1 = $3_1 + 284 | 0;
   $19_1 = $18_1 + 16 | 0;
   $13_1 = 0;
   label$4 : while (1) {
    i64toi32_i32$0 = $17_1;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $16_1;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $15_1;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $18_1;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $17_1 + 8 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $16_1 + 8 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $15_1 + 8 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $18_1 + 8 | 0;
    i64toi32_i32$1 = 0;
    HEAP32[i64toi32_i32$0 >> 2] = 0;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[$19_1 >> 2] = 0;
    i64toi32_i32$2 = $11_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $204_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $14_1;
    HEAP32[i64toi32_i32$1 >> 2] = $204_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $209_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $14_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $209_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($3_1 + 324 | 0) >> 2] = 1065353216;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = 0;
    HEAP32[($3_1 + 316 | 0) >> 2] = 0;
    HEAP32[($3_1 + 320 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$1 = 0;
    HEAP32[($3_1 + 344 | 0) >> 2] = 1065353216;
    HEAP32[($3_1 + 348 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($3_1 + 240 | 0) >> 2] = 1065353216;
    HEAP32[($3_1 + 260 | 0) >> 2] = 1065353216;
    HEAP32[($3_1 + 280 | 0) >> 2] = 1065353216;
    $20_1 = $6_1 + 8 | 0;
    i64toi32_i32$2 = $20_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $221_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $12_1 + 8 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $221_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $224_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $12_1;
    HEAP32[i64toi32_i32$0 >> 2] = $224_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    HEAP32[($3_1 + 412 | 0) >> 2] = 0;
    HEAP32[($3_1 + 396 | 0) >> 2] = 0;
    HEAP32[($3_1 + 380 | 0) >> 2] = 0;
    $4_1 = Math_fround(HEAPF32[($0_1 + 168 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($0_1 + 172 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($0_1 + 176 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($0_1 + 180 | 0) >> 2]);
    $23_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)) + Math_fround($21_1 * $21_1)) + Math_fround($22_1 * $22_1)));
    $24_1 = Math_fround($5_1 * $23_1);
    $25_1 = Math_fround($4_1 * $24_1);
    $26_1 = Math_fround($21_1 * $23_1);
    $27_1 = Math_fround($22_1 * $26_1);
    HEAPF32[($3_1 + 372 | 0) >> 2] = Math_fround($25_1 - $27_1);
    $28_1 = Math_fround($4_1 * $26_1);
    $29_1 = Math_fround($22_1 * $24_1);
    HEAPF32[($3_1 + 376 | 0) >> 2] = Math_fround($28_1 + $29_1);
    HEAPF32[($3_1 + 384 | 0) >> 2] = Math_fround($25_1 + $27_1);
    $25_1 = Math_fround($5_1 * $26_1);
    $23_1 = Math_fround($4_1 * $23_1);
    $22_1 = Math_fround($22_1 * $23_1);
    HEAPF32[($3_1 + 392 | 0) >> 2] = Math_fround($25_1 - $22_1);
    HEAPF32[($3_1 + 400 | 0) >> 2] = Math_fround($28_1 - $29_1);
    HEAPF32[($3_1 + 404 | 0) >> 2] = Math_fround($25_1 + $22_1);
    $5_1 = Math_fround($5_1 * $24_1);
    $22_1 = Math_fround($21_1 * $26_1);
    HEAPF32[($3_1 + 368 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($5_1 + $22_1));
    $4_1 = Math_fround($4_1 * $23_1);
    HEAPF32[($3_1 + 388 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($4_1 + $22_1));
    HEAPF32[($3_1 + 408 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($4_1 + $5_1));
    HEAP32[($3_1 + 316 | 0) >> 2] = 0;
    HEAP32[($3_1 + 332 | 0) >> 2] = 0;
    HEAP32[($3_1 + 348 | 0) >> 2] = 0;
    $4_1 = Math_fround(HEAPF32[($0_1 + 184 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($0_1 + 188 | 0) >> 2]);
    $21_1 = Math_fround(HEAPF32[($0_1 + 192 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($0_1 + 196 | 0) >> 2]);
    $23_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)) + Math_fround($21_1 * $21_1)) + Math_fround($22_1 * $22_1)));
    $24_1 = Math_fround($5_1 * $23_1);
    $25_1 = Math_fround($4_1 * $24_1);
    $26_1 = Math_fround($21_1 * $23_1);
    $27_1 = Math_fround($22_1 * $26_1);
    HEAPF32[($3_1 + 320 | 0) >> 2] = Math_fround($25_1 + $27_1);
    HEAPF32[($3_1 + 308 | 0) >> 2] = Math_fround($25_1 - $27_1);
    $25_1 = Math_fround($4_1 * $26_1);
    $27_1 = Math_fround($22_1 * $24_1);
    HEAPF32[($3_1 + 336 | 0) >> 2] = Math_fround($25_1 - $27_1);
    HEAPF32[($3_1 + 312 | 0) >> 2] = Math_fround($25_1 + $27_1);
    $25_1 = Math_fround($5_1 * $26_1);
    $23_1 = Math_fround($4_1 * $23_1);
    $22_1 = Math_fround($22_1 * $23_1);
    HEAPF32[($3_1 + 340 | 0) >> 2] = Math_fround($25_1 + $22_1);
    HEAPF32[($3_1 + 328 | 0) >> 2] = Math_fround($25_1 - $22_1);
    $5_1 = Math_fround($5_1 * $24_1);
    $22_1 = Math_fround($21_1 * $26_1);
    HEAPF32[($3_1 + 304 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($5_1 + $22_1));
    $4_1 = Math_fround($4_1 * $23_1);
    HEAPF32[($3_1 + 344 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($4_1 + $5_1));
    HEAPF32[($3_1 + 324 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($4_1 + $22_1));
    $4_1 = Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($0_1 + 156 | 0) >> 2]);
    $22_1 = Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2]);
    HEAP32[($3_1 + 300 | 0) >> 2] = 0;
    HEAPF32[($3_1 + 296 | 0) >> 2] = Math_fround($22_1 - $10_1);
    HEAPF32[($3_1 + 292 | 0) >> 2] = Math_fround($5_1 - $9_1);
    HEAPF32[($3_1 + 288 | 0) >> 2] = Math_fround($4_1 - $7_1);
    label$5 : {
     label$6 : {
      if (!(HEAPU8[($0_1 + 250 | 0) >> 0] | 0)) {
       break label$6
      }
      $992(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $3_1 + 368 | 0 | 0, $3_1 + 304 | 0 | 0, $3_1 + 112 | 0 | 0, Math_fround(Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2])));
      if (Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2]) < Math_fround(1.0)) {
       break label$5
      }
      $8_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if ((HEAPU8[($8_1 + 204 | 0) >> 0] | 0) & 4 | 0) {
       break label$5
      }
      $992($8_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $3_1 + 368 | 0 | 0, $3_1 + 240 | 0 | 0, $3_1 | 0, Math_fround(Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2])));
      break label$5;
     }
     $872($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $3_1 + 368 | 0 | 0, $3_1 + 304 | 0 | 0, $3_1 + 112 | 0 | 0, Math_fround(Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2])));
     if (Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2]) < Math_fround(1.0)) {
      break label$5
     }
     if ((HEAPU8[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 204 | 0) >> 0] | 0) & 4 | 0) {
      break label$5
     }
     $872($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $3_1 + 368 | 0 | 0, $3_1 + 240 | 0 | 0, $3_1 | 0, Math_fround(Math_fround(HEAPF32[($1_1 + 56 | 0) >> 2])));
    }
    $4_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
    $4_1 = $4_1 < Math_fround(0.0) ? Math_fround(-$4_1) : Math_fround(0.0);
    label$7 : {
     label$8 : {
      if (!(HEAPU8[($0_1 + 290 | 0) >> 0] | 0)) {
       break label$8
      }
      $8_1 = 0;
      label$9 : {
       if (Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2]) < Math_fround(1.0)) {
        break label$9
       }
       if (Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) < Math_fround(1.0) ^ 1 | 0) {
        break label$7
       }
      }
      $30_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if ((HEAPU8[($30_1 + 204 | 0) >> 0] | 0) & 4 | 0) {
       break label$7
      }
      $8_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($0_1, $30_1, HEAP32[($3_1 + 192 | 0) >> 2] | 0) | 0;
      break label$7;
     }
     $8_1 = 0;
     if (Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]) < Math_fround(1.0) ^ 1 | 0) {
      break label$7
     }
     $30_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if ((HEAPU8[($30_1 + 204 | 0) >> 0] | 0) & 4 | 0) {
      break label$7
     }
     $8_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($0_1, $30_1, HEAP32[($3_1 + 80 | 0) >> 2] | 0) | 0;
    }
    $5_1 = Math_fround($4_1 * $2_1);
    $4_1 = Math_fround(0.0);
    label$10 : {
     if (Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]) < Math_fround(0.0) ^ 1 | 0) {
      break label$10
     }
     $4_1 = Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2]);
    }
    label$11 : {
     label$12 : {
      label$13 : {
       if (($13_1 | ($5_1 > Math_fround(0.0) ^ -1 | 0 | ($5_1 < $4_1 ^ -1 | 0) | 0 | ($8_1 ^ -1 | 0) | 0) | 0) & 1 | 0) {
        break label$13
       }
       if (HEAPU8[($0_1 + 248 | 0) >> 0] | 0) {
        break label$12
       }
       if (!(HEAPU8[($0_1 + 249 | 0) >> 0] | 0)) {
        break label$12
       }
       $13_1 = 0;
      }
      label$14 : {
       label$15 : {
        $8_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if ((HEAPU8[($8_1 + 204 | 0) >> 0] | 0) & 4 | 0) {
         break label$15
        }
        if (Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2]) < Math_fround(1.0) ^ 1 | 0) {
         break label$15
        }
        if (($13_1 | (FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 56 | 0) >> 2] | 0]($0_1, $8_1, HEAP32[($3_1 + 192 | 0) >> 2] | 0) | 0) | 0) & 1 | 0) {
         break label$14
        }
        break label$11;
       }
       if (!($13_1 & 1 | 0)) {
        break label$11
       }
      }
      $22_1 = Math_fround(HEAPF32[($0_1 + 136 | 0) >> 2]);
      label$16 : {
       label$17 : {
        if (!(HEAPU8[($0_1 + 290 | 0) >> 0] | 0)) {
         break label$17
        }
        $4_1 = (wasm2js_f32$0 = Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2]), wasm2js_f32$1 = Math_fround(Math_fround($22_1 - Math_fround(HEAPF32[($3_1 + 180 | 0) >> 2])) * Math_fround(.5)), wasm2js_i32$0 = HEAPU8[($0_1 + 289 | 0) >> 0] | 0, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
        break label$16;
       }
       $4_1 = Math_fround(HEAPF32[($3_1 + 116 | 0) >> 2]);
      }
      HEAP8[($0_1 + 289 | 0) >> 0] = 0;
      HEAP8[($0_1 + 249 | 0) >> 0] = 0;
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$1 = 0;
      HEAP32[($0_1 + 20 | 0) >> 2] = 0;
      HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$1;
      $5_1 = Math_fround(Math_fround(1.0) - $4_1);
      HEAPF32[($0_1 + 132 | 0) >> 2] = Math_fround(Math_fround($5_1 * Math_fround(HEAPF32[($0_1 + 132 | 0) >> 2])) + Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2])));
      HEAPF32[($0_1 + 136 | 0) >> 2] = Math_fround(Math_fround($22_1 * $5_1) + Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 156 | 0) >> 2])));
      $6_1 = $0_1 + 140 | 0;
      HEAPF32[$6_1 >> 2] = Math_fround(Math_fround($5_1 * Math_fround(HEAPF32[$6_1 >> 2])) + Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2])));
      break label$1;
     }
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$1 = HEAP32[($3_1 + 224 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($3_1 + 228 | 0) >> 2] | 0;
     $664_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $6_1;
     HEAP32[i64toi32_i32$1 >> 2] = $664_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$2 = ($3_1 + 224 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $669_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $20_1;
     HEAP32[i64toi32_i32$0 >> 2] = $669_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     $4_1 = Math_fround($4_1 + Math_fround(HEAPF32[($0_1 + 148 | 0) >> 2]));
     $7_1 = Math_fround(Math_fround(HEAPF32[($0_1 + 256 | 0) >> 2]) * $4_1);
     HEAPF32[($0_1 + 152 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2]) - $7_1);
     $9_1 = Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 260 | 0) >> 2]));
     HEAPF32[($0_1 + 156 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 156 | 0) >> 2]) - $9_1);
     $10_1 = Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 264 | 0) >> 2]));
     HEAPF32[($0_1 + 160 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2]) - $10_1);
     $13_1 = 1;
     continue label$4;
    }
    break label$4;
   };
   HEAP8[($0_1 + 289 | 0) >> 0] = 1;
   label$18 : {
    if (!(HEAPU8[($0_1 + 290 | 0) >> 0] | 0)) {
     break label$18
    }
    $4_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
    $713_1 = Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(-$4_1) : Math_fround(0.0)) * $2_1);
    $4_1 = Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2]);
    if ($713_1 > $4_1 ^ 1 | 0) {
     break label$18
    }
    label$19 : {
     if (HEAPU8[($0_1 + 248 | 0) >> 0] | 0) {
      break label$19
     }
     if (HEAPU8[($0_1 + 249 | 0) >> 0] | 0) {
      break label$18
     }
    }
    $4_1 = Math_fround($4_1 + Math_fround(HEAPF32[($0_1 + 148 | 0) >> 2]));
    HEAPF32[($0_1 + 160 | 0) >> 2] = Math_fround(Math_fround($10_1 + Math_fround(HEAPF32[($0_1 + 160 | 0) >> 2])) - Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 264 | 0) >> 2])));
    HEAPF32[($0_1 + 156 | 0) >> 2] = Math_fround(Math_fround($9_1 + Math_fround(HEAPF32[($0_1 + 156 | 0) >> 2])) - Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 260 | 0) >> 2])));
    HEAPF32[($0_1 + 152 | 0) >> 2] = Math_fround(Math_fround($7_1 + Math_fround(HEAPF32[($0_1 + 152 | 0) >> 2])) - Math_fround(Math_fround(HEAPF32[($0_1 + 256 | 0) >> 2]) * $4_1));
   }
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $759_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $11_1;
   HEAP32[i64toi32_i32$1 >> 2] = $759_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $764_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $11_1 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $764_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  global$0 = $3_1 + 432 | 0;
 }
 
 function $1005($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), i64toi32_i32$0 = 0, $10_1 = 0, $16_1 = 0;
  HEAP8[($0_1 + 251 | 0) >> 0] = 1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 68 | 0) >> 2] = $10_1;
  HEAP32[($0_1 + 72 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 76 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    $3_1 = Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]);
    $4_1 = Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[i64toi32_i32$1 >> 2]);
    $6_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($3_1 * $3_1) + Math_fround($4_1 * $4_1)) + Math_fround($5_1 * $5_1))));
    if (!($6_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0)) {
     break label$2
    }
    $1_1 = 0;
    $3_1 = Math_fround(0.0);
    $4_1 = Math_fround(0.0);
    $5_1 = Math_fround(0.0);
    break label$1;
   }
   $6_1 = Math_fround(Math_fround(1.0) / $6_1);
   $5_1 = Math_fround($5_1 * $6_1);
   $4_1 = Math_fround($4_1 * $6_1);
   $3_1 = Math_fround($3_1 * $6_1);
   $1_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
  }
  HEAPF32[($0_1 + 84 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 96 | 0) >> 2] = $1_1;
  HEAPF32[($0_1 + 92 | 0) >> 2] = $5_1;
  HEAPF32[($0_1 + 88 | 0) >> 2] = $4_1;
 }
 
 function $1006($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = Math_fround(0), i64toi32_i32$0 = 0, $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $3_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $11_1 = Math_fround(0), $15_1 = 0, $21_1 = 0;
  $3_1 = 0;
  HEAP8[($0_1 + 251 | 0) >> 0] = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 68 | 0) >> 2] = $15_1;
  HEAP32[($0_1 + 72 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $21_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 76 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $21_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = Math_fround(0.0);
  $6_1 = Math_fround(0.0);
  $7_1 = Math_fround(0.0);
  label$1 : {
   $8_1 = Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[i64toi32_i32$1 >> 2]);
   $11_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($8_1 * $8_1) + Math_fround($9_1 * $9_1)) + Math_fround($10_1 * $10_1))));
   if ($11_1 > Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
    break label$1
   }
   $5_1 = Math_fround(Math_fround(1.0) / $11_1);
   $7_1 = Math_fround($10_1 * $5_1);
   $6_1 = Math_fround($9_1 * $5_1);
   $5_1 = Math_fround($8_1 * $5_1);
   $3_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
  }
  HEAPF32[($0_1 + 84 | 0) >> 2] = $5_1;
  HEAP32[($0_1 + 96 | 0) >> 2] = $3_1;
  HEAPF32[($0_1 + 92 | 0) >> 2] = $7_1;
  HEAPF32[($0_1 + 88 | 0) >> 2] = $6_1;
  HEAPF32[($0_1 + 252 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($0_1 + 252 | 0) >> 2]) + $2_1);
 }
 
 function $1007($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $9_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 104 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 108 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $9_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1008($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 100 | 0 | 0;
 }
 
 function $1009($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $8_1 = Math_fround(0), i64toi32_i32$0 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $3_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $15_1 = 0, $21_1 = 0, $49_1 = Math_fround(0), $145_1 = 0, $150_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 68 | 0) >> 2] = $15_1;
  HEAP32[($0_1 + 72 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $21_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 76 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $21_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    $3_1 = Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]);
    $4_1 = Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[i64toi32_i32$1 >> 2]);
    $6_1 = Math_fround(Math_fround(Math_fround($3_1 * $3_1) + Math_fround($4_1 * $4_1)) + Math_fround($5_1 * $5_1));
    if ($6_1 > Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    $7_1 = Math_fround(HEAPF32[($0_1 + 264 | 0) >> 2]);
    $8_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $49_1 = $8_1;
    $9_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $10_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    $8_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($9_1 * $9_1) + Math_fround($10_1 * $10_1)) + Math_fround($8_1 * $8_1)))));
    $11_1 = Math_fround(HEAPF32[($0_1 + 256 | 0) >> 2]);
    $12_1 = Math_fround(HEAPF32[($0_1 + 260 | 0) >> 2]);
    $8_1 = Math_fround(Math_fround($7_1 * Math_fround($49_1 * $8_1)) + Math_fround(Math_fround($11_1 * Math_fround($9_1 * $8_1)) + Math_fround($12_1 * Math_fround($10_1 * $8_1))));
    if ($8_1 == Math_fround(0.0)) {
     break label$1
    }
    $9_1 = Math_fround(Math_fround(Math_sqrt($6_1)) * Math_fround($496(Math_fround(Math_fround(Math_fround(1.5707963705062866) - Math_fround($794(Math_fround(Math_fround(Math_min(Math_fround(Math_max($8_1, Math_fround(-1.0))), Math_fround(1.0)))))))))));
    $10_1 = Math_fround($7_1 * $9_1);
    HEAPF32[($0_1 + 76 | 0) >> 2] = Math_fround($5_1 - $10_1);
    $5_1 = Math_fround($12_1 * $9_1);
    HEAPF32[($0_1 + 72 | 0) >> 2] = Math_fround($4_1 - $5_1);
    $4_1 = Math_fround($11_1 * $9_1);
    HEAPF32[($0_1 + 68 | 0) >> 2] = Math_fround($3_1 - $4_1);
    HEAPF32[($0_1 + 20 | 0) >> 2] = Math_fround(($8_1 < Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) * Math_fround(Math_sqrt(Math_fround(Math_fround($10_1 * $10_1) + Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1))))));
    if ($8_1 > Math_fround(0.0) ^ 1 | 0) {
     break label$1
    }
    HEAP8[($0_1 + 249 | 0) >> 0] = 1;
    $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$2 = $1_1 + 52 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $145_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[($0_1 + 116 | 0) >> 2] = $145_1;
    HEAP32[($0_1 + 120 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1 + 60 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $150_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 124 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $150_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   }
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  }
 }
 
 function $1010($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0);
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  $2_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($1_1 + 256 | 0) >> 2]) * $2_1) + Math_fround(HEAPF32[($1_1 + 68 | 0) >> 2]));
  HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround(Math_fround($2_1 * Math_fround(HEAPF32[($1_1 + 264 | 0) >> 2])) + Math_fround(HEAPF32[($1_1 + 76 | 0) >> 2]));
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround(Math_fround($2_1 * Math_fround(HEAPF32[($1_1 + 260 | 0) >> 2])) + Math_fround(HEAPF32[($1_1 + 72 | 0) >> 2]));
 }
 
 function $1011($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 68 | 0) >> 2] = 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 76 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 252 | 0) >> 2] = 0;
  HEAP16[($0_1 + 248 | 0) >> 1] = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $0_1 = HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 344 | 0) >> 2] | 0;
   if ((HEAP32[((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1) | 0) + 4 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    ((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = HEAP32[(HEAP32[((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1) | 0) + 12 | 0) >> 2] | 0) >> 2] | 0), wasm2js_i32$3 = HEAP32[((HEAP32[((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1) | 0) + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0), wasm2js_i32$4 = HEAP32[($1_1 + 24 | 0) >> 2] | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0) | 0;
    if ((HEAP32[((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1) | 0) + 4 | 0) >> 2] | 0 | 0) > (0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function $1012($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $2$hi = 0, $3_1 = 0, $3$hi = 0;
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2_1 = i64toi32_i32$0;
  $2$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $3_1 = i64toi32_i32$1;
  $3$hi = i64toi32_i32$0;
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = $1_1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 36 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 24 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 28 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 4 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $1_1 + 60 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $2_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$1 = $1_1 + 52 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 304 | 0) >> 2] = (HEAP32[($1_1 + 304 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function $1013($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0, $16_1 = 0, $22_1 = 0, $6_1 = 0, $6$hi = 0, $28_1 = 0, $39_1 = 0, $42_1 = 0, $46_1 = 0, $49_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  $4_1 = $3_1 + 52 | 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$0 + 136 | 0) >> 2] = i64toi32_i32$1;
  $5_1 = $3_1 + 60 | 0;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $22_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 140 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 160 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $28_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$0;
  $1043($3_1 + 4 | 0 | 0, $2_1 | 0);
  $3_1 = i64toi32_i32$1 + 176 | 0;
  i64toi32_i32$2 = $2_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $39_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $3_1;
  HEAP32[i64toi32_i32$0 >> 2] = $39_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $42_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 168 | 0) >> 2] = $42_1;
  HEAP32[(i64toi32_i32$1 + 172 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $46_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1 + 192 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $46_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
  $49_1 = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$2;
  HEAP32[(i64toi32_i32$1 + 184 | 0) >> 2] = $49_1;
  HEAP32[(i64toi32_i32$1 + 188 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1014($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4_1 = Math_fround(0), $8_1 = 0, $5_1 = Math_fround(0), $3_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $17_1 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $18_1 = Math_fround(0), $11_1 = 0, $19_1 = Math_fround(0), $12_1 = 0, $22_1 = Math_fround(0), $9_1 = 0, $9$hi = 0, $15_1 = 0, $16_1 = 0, $23_1 = Math_fround(0), $10_1 = 0, $10$hi = 0, $95_1 = 0, $13_1 = 0, $13$hi = 0, $14_1 = 0, $14$hi = 0, $115_1 = 0, $127_1 = 0, $157_1 = Math_fround(0), $167_1 = Math_fround(0), $347_1 = 0, $355_1 = 0, $359_1 = 0, $363_1 = 0, $371_1 = 0, $375_1 = 0, $379_1 = 0, $383_1 = 0, $390_1 = 0, $396_1 = 0, $402_1 = 0, $413_1 = 0, $416_1 = 0, $420_1 = 0, $423_1 = 0, $521_1 = 0, $526_1 = 0, $531_1 = 0, $536_1 = 0, $539_1 = 0, $543_1 = 0, $547_1 = 0, $551_1 = 0, $606_1 = 0, $609_1 = 0, $614_1 = 0, $618_1 = 0, $623_1 = 0, $627_1 = 0, $632_1 = 0, $638_1 = 0, $646_1 = 0, $650_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  label$1 : {
   $4_1 = Math_fround(HEAPF32[($0_1 + 100 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($0_1 + 108 | 0) >> 2]);
   $7_1 = Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)) + Math_fround($6_1 * $6_1));
   if ($7_1 > Math_fround(0.0) ^ 1 | 0) {
    break label$1
   }
   $7_1 = Math_fround($793(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($0_1 + 244 | 0) >> 2]))), Math_fround($2_1)));
   $6_1 = Math_fround($6_1 * $7_1);
   HEAPF32[($0_1 + 108 | 0) >> 2] = $6_1;
   $5_1 = Math_fround($5_1 * $7_1);
   HEAPF32[($0_1 + 104 | 0) >> 2] = $5_1;
   $4_1 = Math_fround($4_1 * $7_1);
   HEAPF32[($0_1 + 100 | 0) >> 2] = $4_1;
   $7_1 = Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)) + Math_fround($6_1 * $6_1));
  }
  label$2 : {
   if ($7_1 > Math_fround(0.0) ^ 1 | 0) {
    break label$2
   }
   $8_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = $8_1 + 12 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $9_1 = i64toi32_i32$0;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $8_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$1;
   $10$hi = i64toi32_i32$0;
   $11_1 = $3_1 + 40 | 0;
   i64toi32_i32$2 = i64toi32_i32$2 + 28 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $95_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $11_1;
   HEAP32[i64toi32_i32$0 >> 2] = $95_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $12_1 = ($3_1 + 16 | 0) + 8 | 0;
   i64toi32_i32$1 = $9$hi;
   i64toi32_i32$0 = $12_1;
   HEAP32[i64toi32_i32$0 >> 2] = $9_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $8_1 + 36 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $9_1 = i64toi32_i32$1;
   $9$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $8_1 + 20 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $13_1 = i64toi32_i32$0;
   $13$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $8_1 + 44 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $14_1 = i64toi32_i32$1;
   $14$hi = i64toi32_i32$0;
   $15_1 = $3_1 + 72 | 0;
   i64toi32_i32$2 = $8_1 + 60 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $115_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $15_1;
   HEAP32[i64toi32_i32$0 >> 2] = $115_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $16_1 = $3_1 + 56 | 0;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$0 = $16_1;
   HEAP32[i64toi32_i32$0 >> 2] = $14_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$0 = $3_1;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $10_1;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$1 = $13$hi;
   HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = $13_1;
   HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $8_1 + 52 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $127_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1;
   HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $127_1;
   HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $9_1;
   HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$0;
   $17_1 = Math_fround(Math_sqrt($7_1));
   $18_1 = Math_fround(Math_fround($17_1 * $2_1) * Math_fround(.5));
   $19_1 = Math_fround($496(Math_fround($18_1)));
   $1043(i64toi32_i32$1 + 16 | 0 | 0, i64toi32_i32$1 | 0);
   $7_1 = Math_fround(HEAPF32[(i64toi32_i32$1 + 12 | 0) >> 2]);
   $20_1 = Math_fround(HEAPF32[i64toi32_i32$1 >> 2]);
   $18_1 = Math_fround($497(Math_fround($18_1)));
   $17_1 = Math_fround(Math_fround(1.0) / $17_1);
   $4_1 = Math_fround($4_1 * $17_1);
   $157_1 = $4_1;
   $21_1 = Math_fround($6_1 * $17_1);
   $167_1 = Math_fround($4_1 * $4_1);
   $4_1 = Math_fround($5_1 * $17_1);
   $5_1 = Math_fround($19_1 / Math_fround(Math_sqrt(Math_fround(Math_fround($21_1 * $21_1) + Math_fround($167_1 + Math_fround($4_1 * $4_1))))));
   $6_1 = Math_fround($157_1 * $5_1);
   $17_1 = Math_fround($4_1 * $5_1);
   $19_1 = Math_fround(HEAPF32[(i64toi32_i32$1 + 8 | 0) >> 2]);
   $21_1 = Math_fround($21_1 * $5_1);
   $22_1 = Math_fround(HEAPF32[(i64toi32_i32$1 + 4 | 0) >> 2]);
   $4_1 = Math_fround(Math_fround(Math_fround(Math_fround($20_1 * $18_1) + Math_fround($7_1 * $6_1)) + Math_fround($17_1 * $19_1)) - Math_fround($21_1 * $22_1));
   $23_1 = Math_fround(Math_fround(Math_fround(Math_fround($21_1 * $7_1) + Math_fround($18_1 * $19_1)) + Math_fround($6_1 * $22_1)) - Math_fround($17_1 * $20_1));
   $5_1 = Math_fround(Math_fround(Math_fround(Math_fround($18_1 * $7_1) - Math_fround($6_1 * $20_1)) - Math_fround($17_1 * $22_1)) - Math_fround($21_1 * $19_1));
   $6_1 = Math_fround(Math_fround(Math_fround($21_1 * $20_1) + Math_fround(Math_fround($17_1 * $7_1) + Math_fround($18_1 * $22_1))) - Math_fround($6_1 * $19_1));
   $20_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround($5_1 * $5_1) + Math_fround(Math_fround($23_1 * $23_1) + Math_fround(Math_fround($4_1 * $4_1) + Math_fround($6_1 * $6_1)))));
   $7_1 = Math_fround($23_1 * $20_1);
   $17_1 = Math_fround($4_1 * $7_1);
   $18_1 = Math_fround($6_1 * $20_1);
   $19_1 = Math_fround($5_1 * $18_1);
   HEAPF32[$12_1 >> 2] = Math_fround($17_1 + $19_1);
   HEAP32[((i64toi32_i32$1 + 16 | 0) + 44 | 0) >> 2] = 0;
   HEAP32[((i64toi32_i32$1 + 16 | 0) + 28 | 0) >> 2] = 0;
   $21_1 = Math_fround($6_1 * $7_1);
   $20_1 = Math_fround($4_1 * $20_1);
   $22_1 = Math_fround($5_1 * $20_1);
   HEAPF32[((i64toi32_i32$1 + 16 | 0) + 36 | 0) >> 2] = Math_fround($21_1 + $22_1);
   HEAPF32[$11_1 >> 2] = Math_fround($21_1 - $22_1);
   $20_1 = Math_fround($4_1 * $20_1);
   $6_1 = Math_fround($6_1 * $18_1);
   HEAPF32[$16_1 >> 2] = Math_fround(Math_fround(1.0) - Math_fround($20_1 + $6_1));
   $21_1 = Math_fround($23_1 * $7_1);
   HEAPF32[((i64toi32_i32$1 + 16 | 0) + 20 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($20_1 + $21_1));
   HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
   HEAPF32[(i64toi32_i32$1 + 48 | 0) >> 2] = Math_fround($17_1 - $19_1);
   $4_1 = Math_fround($4_1 * $18_1);
   $5_1 = Math_fround($5_1 * $7_1);
   HEAPF32[(i64toi32_i32$1 + 32 | 0) >> 2] = Math_fround($4_1 + $5_1);
   HEAPF32[(i64toi32_i32$1 + 20 | 0) >> 2] = Math_fround($4_1 - $5_1);
   $8_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $347_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $8_1 + 12 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $347_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   HEAPF32[($3_1 + 16 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($6_1 + $21_1));
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $355_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $8_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $355_1;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
   $359_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $8_1 + 20 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $359_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $363_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $8_1 + 28 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $363_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($8_1 + 304 | 0) >> 2] = (HEAP32[($8_1 + 304 | 0) >> 2] | 0) + 1 | 0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $371_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $8_1 + 36 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $371_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $16_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $375_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $8_1 + 44 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $375_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $15_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $379_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $8_1 + 60 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $379_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 64 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 68 | 0) >> 2] | 0;
   $383_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $8_1 + 52 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $383_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $11_1 = $8_1 + 52 | 0;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $390_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] = $390_1;
   HEAP32[(i64toi32_i32$0 + 136 | 0) >> 2] = i64toi32_i32$1;
   $12_1 = $8_1 + 60 | 0;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $396_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 140 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $396_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $9_1 = i64toi32_i32$0;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $402_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 160 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $402_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$1 = $0_1;
   HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] = $9_1;
   HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] = i64toi32_i32$0;
   $1043($8_1 + 4 | 0 | 0, $3_1 | 0);
   $8_1 = i64toi32_i32$1 + 176 | 0;
   i64toi32_i32$2 = $3_1 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $413_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $8_1;
   HEAP32[i64toi32_i32$0 >> 2] = $413_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $416_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1;
   HEAP32[(i64toi32_i32$1 + 168 | 0) >> 2] = $416_1;
   HEAP32[(i64toi32_i32$1 + 172 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $8_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $420_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1 + 192 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $420_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 168 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 172 | 0) >> 2] | 0;
   $423_1 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$2;
   HEAP32[(i64toi32_i32$1 + 184 | 0) >> 2] = $423_1;
   HEAP32[(i64toi32_i32$1 + 188 | 0) >> 2] = i64toi32_i32$0;
  }
  label$3 : {
   label$4 : {
    if (HEAPU8[($0_1 + 251 | 0) >> 0] | 0) {
     break label$4
    }
    if (Math_fround(HEAPF32[($0_1 + 252 | 0) >> 2]) <= Math_fround(0.0)) {
     break label$3
    }
   }
   (wasm2js_i32$0 = $0_1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1) | 0), HEAP8[(wasm2js_i32$0 + 248 | 0) >> 0] = wasm2js_i32$1;
   $4_1 = Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($0_1 + 76 | 0) >> 2]);
   $7_1 = Math_fround($793(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(HEAPF32[($0_1 + 240 | 0) >> 2]))), Math_fround($2_1)));
   label$5 : {
    if (Math_fround(Math_fround(Math_fround($5_1 * $5_1) + Math_fround($4_1 * $4_1)) + Math_fround($6_1 * $6_1)) > Math_fround(0.0) ^ 1 | 0) {
     break label$5
    }
    HEAPF32[($0_1 + 76 | 0) >> 2] = Math_fround($6_1 * $7_1);
    HEAPF32[($0_1 + 72 | 0) >> 2] = Math_fround($4_1 * $7_1);
    HEAPF32[($0_1 + 68 | 0) >> 2] = Math_fround($5_1 * $7_1);
   }
   $4_1 = Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]) * $7_1) - Math_fround(Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2]) * $2_1));
   HEAPF32[($0_1 + 20 | 0) >> 2] = $4_1;
   label$6 : {
    if ($4_1 > Math_fround(0.0) ^ 1 | 0) {
     break label$6
    }
    $5_1 = Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2]);
    if ($4_1 > $5_1 ^ 1 | 0) {
     break label$6
    }
    HEAPF32[($0_1 + 20 | 0) >> 2] = $5_1;
    $4_1 = $5_1;
   }
   label$7 : {
    if ($4_1 < Math_fround(0.0) ^ 1 | 0) {
     break label$7
    }
    $5_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2])));
    if (Math_fround(Math_abs($4_1)) > $5_1 ^ 1 | 0) {
     break label$7
    }
    $4_1 = Math_fround(-$5_1);
    HEAPF32[($0_1 + 20 | 0) >> 2] = $4_1;
   }
   HEAPF32[($0_1 + 24 | 0) >> 2] = Math_fround($4_1 * $2_1);
   $8_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = $8_1 + 12 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $521_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1 + 24 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $521_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $8_1 + 28 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $526_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1 + 40 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $526_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $8_1 + 44 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $531_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1 + 56 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $531_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $8_1 + 60 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $536_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1 + 72 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $536_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $8_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   $539_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1;
   HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $539_1;
   HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$2 + 20 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $543_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1;
   HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $543_1;
   HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = $8_1 + 36 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $547_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $3_1;
   HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $547_1;
   HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $8_1 + 52 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $551_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $3_1;
   HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] = $551_1;
   HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = i64toi32_i32$0;
   $1000($0_1 | 0, $1_1 | 0);
   $11_1 = i64toi32_i32$1 + 64 | 0;
   $12_1 = i64toi32_i32$1 + 48 | 0;
   $16_1 = i64toi32_i32$1 + 32 | 0;
   label$8 : {
    label$9 : {
     if (!(HEAPU8[($0_1 + 251 | 0) >> 0] | 0)) {
      break label$9
     }
     $1003($0_1 | 0, $1_1 | 0, $0_1 + 68 | 0 | 0);
     break label$8;
    }
    $4_1 = Math_fround(HEAPF32[($0_1 + 252 | 0) >> 2]);
    HEAPF32[($0_1 + 252 | 0) >> 2] = Math_fround($4_1 - $2_1);
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $4_1 = $4_1 > $2_1 ? $2_1 : $4_1;
    HEAPF32[($3_1 + 8 | 0) >> 2] = Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 76 | 0) >> 2]));
    HEAPF32[($3_1 + 4 | 0) >> 2] = Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 72 | 0) >> 2]));
    HEAPF32[$3_1 >> 2] = Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2]));
    $1003($0_1 | 0, $1_1 | 0, $3_1 | 0);
   }
   $1004($0_1 | 0, $1_1 | 0, Math_fround($2_1));
   $15_1 = $11_1 + 8 | 0;
   i64toi32_i32$2 = $0_1 + 140 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $606_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $15_1;
   HEAP32[i64toi32_i32$0 >> 2] = $606_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 136 | 0) >> 2] | 0;
   $609_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $11_1;
   HEAP32[i64toi32_i32$1 >> 2] = $609_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $8_1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   $614_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $8_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = $614_1;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $16_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $618_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $8_1 + 20 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $618_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $623_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $8_1 + 28 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $623_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $627_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $8_1 + 36 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $627_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $632_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $8_1 + 44 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $632_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = ($3_1 + 16 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $638_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $8_1 + 12 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $638_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($8_1 + 304 | 0) >> 2] = (HEAP32[($8_1 + 304 | 0) >> 2] | 0) + 1 | 0;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $646_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $8_1 + 52 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $646_1;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $15_1;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $650_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $8_1 + 60 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $650_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   HEAP8[($0_1 + 220 | 0) >> 0] = 0;
   if (!($999($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   HEAP8[($0_1 + 220 | 0) >> 0] = 1;
   if (!($999($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   HEAP8[($0_1 + 220 | 0) >> 0] = 1;
   if (!($999($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   HEAP8[($0_1 + 220 | 0) >> 0] = 1;
   if (!($999($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   HEAP8[($0_1 + 220 | 0) >> 0] = 1;
   if (!($999($0_1 | 0, $1_1 | 0) | 0)) {
    break label$3
   }
   HEAP8[($0_1 + 220 | 0) >> 0] = 1;
  }
  global$0 = $3_1 + 80 | 0;
 }
 
 function $1015($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[($0_1 + 28 | 0) >> 2] = $1_1;
 }
 
 function $1016($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAPF32[($0_1 + 32 | 0) >> 2] = $1_1;
 }
 
 function $1017($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $1018($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $10_1 = Math_fround(0), $16_1 = Math_fround(0), $94_1 = 0, $99_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $10_1 = Math_fround($2_1 * $2_1);
    $2_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    $16_1 = Math_fround($10_1 + Math_fround($2_1 * $2_1));
    $2_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $2_1 = Math_fround($16_1 + Math_fround($2_1 * $2_1));
    if ($2_1 != Math_fround(0.0)) {
     break label$2
    }
    $2_1 = Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]);
    break label$1;
   }
   $2_1 = Math_fround(Math_sqrt($2_1));
  }
  HEAPF32[($0_1 + 20 | 0) >> 2] = $2_1;
  HEAPF32[($0_1 + 32 | 0) >> 2] = $2_1;
  HEAP8[($0_1 + 249 | 0) >> 0] = 1;
  label$3 : {
   label$4 : {
    $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
    $3_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
    $4_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $5_1 = Math_fround(Math_fround(Math_fround($2_1 * $2_1) + Math_fround($3_1 * $3_1)) + Math_fround($4_1 * $4_1));
    if ($5_1 != Math_fround(0.0)) {
     break label$4
    }
    $1_1 = $0_1 + 268 | 0;
    $4_1 = Math_fround(HEAPF32[($0_1 + 264 | 0) >> 2]);
    $3_1 = Math_fround(HEAPF32[($0_1 + 260 | 0) >> 2]);
    $2_1 = Math_fround(HEAPF32[($0_1 + 256 | 0) >> 2]);
    break label$3;
   }
   $1_1 = $1_1 + 12 | 0;
   $5_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($5_1)));
   $4_1 = Math_fround($4_1 * $5_1);
   $3_1 = Math_fround($3_1 * $5_1);
   $2_1 = Math_fround($2_1 * $5_1);
  }
  HEAP32[($0_1 + 284 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAPF32[($0_1 + 280 | 0) >> 2] = $4_1;
  HEAPF32[($0_1 + 276 | 0) >> 2] = $3_1;
  HEAPF32[($0_1 + 272 | 0) >> 2] = $2_1;
  $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$2 = $1_1 + 52 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $94_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 116 | 0) >> 2] = $94_1;
  HEAP32[($0_1 + 120 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 60 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $99_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 124 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $99_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1019($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = Math_fround(0), $2_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $46_1 = Math_fround(0), $52_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   $3_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $4_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $6_1 = Math_fround(Math_fround(Math_fround($3_1 * $3_1) + Math_fround($4_1 * $4_1)) + Math_fround($5_1 * $5_1));
   if ($6_1 > Math_fround(0.0) ^ 1 | 0) {
    break label$1
   }
   HEAP32[($2_1 + 12 | 0) >> 2] = 0;
   HEAPF32[($2_1 + 8 | 0) >> 2] = Math_fround(-$5_1);
   HEAPF32[($2_1 + 4 | 0) >> 2] = Math_fround(-$4_1);
   HEAPF32[$2_1 >> 2] = Math_fround(-$3_1);
   $995($0_1 | 0, $2_1 | 0);
   $3_1 = Math_fround(HEAPF32[$1_1 >> 2]);
   $46_1 = Math_fround($3_1 * $3_1);
   $3_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $52_1 = Math_fround($46_1 + Math_fround($3_1 * $3_1));
   $3_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $6_1 = Math_fround($52_1 + Math_fround($3_1 * $3_1));
  }
  HEAPF32[($0_1 + 52 | 0) >> 2] = Math_fround(Math_sqrt($6_1));
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1020($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (Math_fround(Math_abs(Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]))) < Math_fround(1.1920928955078125e-07) ^ 1 | 0) {
    break label$1
   }
   $1_1 = Math_fround(Math_abs(Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2]))) < Math_fround(1.1920928955078125e-07);
  }
  return $1_1 | 0;
 }
 
 function $1021($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1022($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[($0_1 + 288 | 0) >> 0] = $1_1;
 }
 
 function $1023($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($0_1, $1_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1, $1_1, $2_1);
 }
 
 function $1024($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $1025($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7_1 = Math_fround(0), i64toi32_i32$2 = 0, $3_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $121_1 = 0, $126_1 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $203_1 = 0, $208_1 = 0;
  $3_1 = Math_fround(1.0);
  label$1 : {
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if (($4_1 | 0) == (HEAP32[($0_1 + 84 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   if ((HEAPU8[($4_1 + 204 | 0) >> 0] | 0) & 4 | 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if (!$2_1) {
      break label$3
     }
     $5_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
     $6_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
     $7_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
     break label$2;
    }
    $7_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    $8_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
    $9_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
    $5_1 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2])));
    $6_1 = Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]))) + Math_fround($9_1 * Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2])));
    $7_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]) * $7_1) + Math_fround(Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]) * $8_1)) + Math_fround(Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]) * $9_1));
   }
   if (Math_fround(Math_fround(Math_fround($7_1 * Math_fround(HEAPF32[($0_1 + 88 | 0) >> 2])) + Math_fround($6_1 * Math_fround(HEAPF32[($0_1 + 92 | 0) >> 2]))) + Math_fround($5_1 * Math_fround(HEAPF32[($0_1 + 96 | 0) >> 2]))) < Math_fround(HEAPF32[($0_1 + 104 | 0) >> 2])) {
    break label$1
   }
   HEAP32[($0_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
   label$4 : {
    label$5 : {
     if (!$2_1) {
      break label$5
     }
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
     $121_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[($0_1 + 48 | 0) >> 2] = $121_1;
     HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $1_1 + 16 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $126_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1 + 56 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $126_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     break label$4;
    }
    $7_1 = Math_fround(HEAPF32[($4_1 + 8 | 0) >> 2]);
    $8_1 = Math_fround(HEAPF32[($4_1 + 12 | 0) >> 2]);
    $9_1 = Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($4_1 + 28 | 0) >> 2]);
    $12_1 = Math_fround(HEAPF32[($4_1 + 36 | 0) >> 2]);
    $13_1 = Math_fround(HEAPF32[($4_1 + 40 | 0) >> 2]);
    $3_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
    $14_1 = Math_fround(HEAPF32[($4_1 + 44 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
    $15_1 = Math_fround(HEAPF32[($4_1 + 4 | 0) >> 2]);
    $6_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    HEAP32[($0_1 + 60 | 0) >> 2] = 0;
    HEAPF32[($0_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround($6_1 * $12_1) + Math_fround($3_1 * $13_1)) + Math_fround($5_1 * $14_1));
    HEAPF32[($0_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround($6_1 * $9_1) + Math_fround($3_1 * $10_1)) + Math_fround($5_1 * $11_1));
    HEAPF32[($0_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $6_1) + Math_fround($7_1 * $3_1)) + Math_fround($8_1 * $5_1));
   }
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$0 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
   $203_1 = i64toi32_i32$0;
   i64toi32_i32$0 = $0_1;
   HEAP32[($0_1 + 64 | 0) >> 2] = $203_1;
   HEAP32[($0_1 + 68 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = $1_1 + 32 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $208_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $0_1 + 72 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $208_1;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $3_1 = Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]);
  }
  return Math_fround($3_1);
 }
 
 function $1026($0_1) {
  $0_1 = $0_1 | 0;
  $265($0_1 | 0);
 }
 
 function $1027($0_1, $1_1, $2_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $3_1 = 0;
  $3_1 = $79(16 | 0, 16 | 0) | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($3_1 + 8 | 0) >> 2] = $2_1;
  HEAPF32[($3_1 + 4 | 0) >> 2] = $1_1;
  HEAPF32[$3_1 >> 2] = $0_1;
  return $3_1 | 0;
 }
 
 function $1028($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAPF32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAPF32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAPF32[$0_1 >> 2] = $1_1;
 }
 
 function $1029($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[$0_1 >> 2]));
 }
 
 function $1030($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]));
 }
 
 function $1031($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]));
 }
 
 function $1032($0_1, $1_1, $2_1, $3_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  var $4_1 = 0;
  $4_1 = $36(16 | 0) | 0;
  HEAPF32[($4_1 + 12 | 0) >> 2] = $3_1;
  HEAPF32[($4_1 + 8 | 0) >> 2] = $2_1;
  HEAPF32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAPF32[$4_1 >> 2] = $0_1;
  return $4_1 | 0;
 }
 
 function $1033($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3_1 = Math_fround($3_1);
  $4_1 = Math_fround($4_1);
  HEAPF32[($0_1 + 12 | 0) >> 2] = $4_1;
  HEAPF32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAPF32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAPF32[$0_1 >> 2] = $1_1;
 }
 
 function $1034($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[$0_1 >> 2]));
 }
 
 function $1035($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]));
 }
 
 function $1036($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]));
 }
 
 function $1037($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 12 | 0) >> 2]));
 }
 
 function $1038() {
  return $36(64 | 0) | 0 | 0;
 }
 
 function $1039($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $9_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 56 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $9_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1040($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $8_1 = Math_fround(0), $3_1 = Math_fround(0), $7_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $2_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
  $3_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $5_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  HEAP32[($0_1 + 44 | 0) >> 2] = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  $6_1 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($4_1 * $4_1) + Math_fround($5_1 * $5_1)) + Math_fround($3_1 * $3_1)) + Math_fround($2_1 * $2_1)));
  $7_1 = Math_fround($3_1 * $6_1);
  $8_1 = Math_fround($5_1 * $7_1);
  $9_1 = Math_fround($4_1 * $6_1);
  $10_1 = Math_fround($2_1 * $9_1);
  HEAPF32[($0_1 + 36 | 0) >> 2] = Math_fround($8_1 + $10_1);
  $11_1 = Math_fround($4_1 * $7_1);
  $6_1 = Math_fround($5_1 * $6_1);
  $12_1 = Math_fround($2_1 * $6_1);
  HEAPF32[($0_1 + 32 | 0) >> 2] = Math_fround($11_1 - $12_1);
  HEAPF32[($0_1 + 24 | 0) >> 2] = Math_fround($8_1 - $10_1);
  $8_1 = Math_fround($4_1 * $6_1);
  $2_1 = Math_fround($2_1 * $7_1);
  HEAPF32[($0_1 + 16 | 0) >> 2] = Math_fround($8_1 + $2_1);
  HEAPF32[($0_1 + 8 | 0) >> 2] = Math_fround($11_1 + $12_1);
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround($8_1 - $2_1);
  $4_1 = Math_fround($4_1 * $9_1);
  $2_1 = Math_fround($5_1 * $6_1);
  HEAPF32[($0_1 + 40 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($4_1 + $2_1));
  $5_1 = Math_fround($3_1 * $7_1);
  HEAPF32[($0_1 + 20 | 0) >> 2] = Math_fround(Math_fround(1.0) - Math_fround($4_1 + $5_1));
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround(1.0) - Math_fround($2_1 + $5_1));
 }
 
 function $1041($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 48 | 0 | 0;
 }
 
 function $1042($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $9_1 = 0, $11_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1043($0_1 | 0, $1_1 | 0);
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$0 + 2836 | 0) >> 2] = $9_1;
  HEAP32[(i64toi32_i32$0 + 2840 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$1 + 2828 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 2832 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $1_1 + 16 | 0;
  return 2828 | 0;
 }
 
 function $1043($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = Math_fround(0), $2_1 = 0, $7_1 = 0, $9_1 = 0, $5_1 = Math_fround(0), $8_1 = 0, $4_1 = Math_fround(0), $10_1 = 0, $11_1 = 0, $6_1 = Math_fround(0), $12_1 = 0;
  $2_1 = global$0 - 16 | 0;
  label$1 : {
   label$2 : {
    $3_1 = Math_fround(HEAPF32[$0_1 >> 2]);
    $4_1 = Math_fround(HEAPF32[($0_1 + 20 | 0) >> 2]);
    $5_1 = Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2]);
    $6_1 = Math_fround(Math_fround($3_1 + $4_1) + $5_1);
    if ($6_1 > Math_fround(0.0) ^ 1 | 0) {
     break label$2
    }
    $4_1 = Math_fround(Math_sqrt(Math_fround($6_1 + Math_fround(1.0))));
    $3_1 = Math_fround(Math_fround(.5) / $4_1);
    $5_1 = Math_fround($3_1 * Math_fround(Math_fround(HEAPF32[($0_1 + 16 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2])));
    HEAPF32[($2_1 + 8 | 0) >> 2] = $5_1;
    $7_1 = (wasm2js_scratch_store_f32($5_1), wasm2js_scratch_load_i32(0));
    $5_1 = Math_fround($3_1 * Math_fround(Math_fround(HEAPF32[($0_1 + 8 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2])));
    HEAPF32[($2_1 + 4 | 0) >> 2] = $5_1;
    $8_1 = (wasm2js_scratch_store_f32($5_1), wasm2js_scratch_load_i32(0));
    $3_1 = Math_fround($3_1 * Math_fround(Math_fround(HEAPF32[($0_1 + 36 | 0) >> 2]) - Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2])));
    HEAPF32[$2_1 >> 2] = $3_1;
    $0_1 = (wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(0));
    $3_1 = Math_fround($4_1 * Math_fround(.5));
    HEAPF32[($2_1 + 12 | 0) >> 2] = $3_1;
    $9_1 = (wasm2js_scratch_store_f32($3_1), wasm2js_scratch_load_i32(0));
    break label$1;
   }
   $7_1 = $3_1 < $4_1 ? ($4_1 < $5_1 ? 2 : 1) : ($3_1 < $5_1) << 1 | 0;
   $8_1 = $7_1 << 2 | 0;
   $10_1 = $0_1 + ($7_1 << 4 | 0) | 0;
   $9_1 = (($7_1 + 1 | 0) >>> 0) % (3 >>> 0) | 0;
   $11_1 = $0_1 + ($9_1 << 4 | 0) | 0;
   $9_1 = $9_1 << 2 | 0;
   $12_1 = (($7_1 + 2 | 0) >>> 0) % (3 >>> 0) | 0;
   $7_1 = $0_1 + ($12_1 << 4 | 0) | 0;
   $0_1 = $12_1 << 2 | 0;
   $3_1 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($10_1 + $8_1 | 0) >> 2]) - Math_fround(HEAPF32[($11_1 + $9_1 | 0) >> 2])) - Math_fround(HEAPF32[($7_1 + $0_1 | 0) >> 2])) + Math_fround(1.0))));
   HEAPF32[($2_1 | $8_1 | 0) >> 2] = Math_fround($3_1 * Math_fround(.5));
   $3_1 = Math_fround(Math_fround(.5) / $3_1);
   HEAPF32[($2_1 + 12 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[($7_1 + $9_1 | 0) >> 2]) - Math_fround(HEAPF32[($11_1 + $0_1 | 0) >> 2])) * $3_1);
   HEAPF32[($2_1 | $9_1 | 0) >> 2] = Math_fround($3_1 * Math_fround(Math_fround(HEAPF32[($11_1 + $8_1 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + $9_1 | 0) >> 2])));
   HEAPF32[($2_1 | $0_1 | 0) >> 2] = Math_fround($3_1 * Math_fround(Math_fround(HEAPF32[($7_1 + $8_1 | 0) >> 2]) + Math_fround(HEAPF32[($10_1 + $0_1 | 0) >> 2])));
   $9_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
   $7_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
   $8_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
   $0_1 = HEAP32[$2_1 >> 2] | 0;
  }
  HEAP32[($1_1 + 12 | 0) >> 2] = $9_1;
  HEAP32[($1_1 + 8 | 0) >> 2] = $7_1;
  HEAP32[($1_1 + 4 | 0) >> 2] = $8_1;
  HEAP32[$1_1 >> 2] = $0_1;
 }
 
 function $1044() {
  var $0_1 = 0;
  $0_1 = $36(8 | 0) | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 24256;
  return $0_1 | 0;
 }
 
 function $1045($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $1046() {
  var $0_1 = 0;
  $0_1 = $79(324 | 0, 16 | 0) | 0;
  $305($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1047($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAPF32[($0_1 + 184 | 0) >> 2] = Math_fround($1_1 | 0);
 }
 
 function $1048($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $308($0_1 | 0, $1_1 | 0);
 }
 
 function $1049($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $309($0_1 | 0, $1_1 | 0);
 }
 
 function $1050($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $310($0_1 | 0, $1_1 | 0);
 }
 
 function $1051($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = HEAP32[($0_1 + 220 | 0) >> 2] | 0;
  return ($0_1 | 0) != (2 | 0) & ($0_1 | 0) != (5 | 0) | 0 | 0;
 }
 
 function $1052($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[($0_1 + 232 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 304 | 0) >> 2] = (HEAP32[($0_1 + 304 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function $1053($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[($0_1 + 228 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 304 | 0) >> 2] = (HEAP32[($0_1 + 304 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function $1054($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[($0_1 + 236 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 304 | 0) >> 2] = (HEAP32[($0_1 + 304 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function $1055($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 204 | 0) >> 2] | 0 | 0;
 }
 
 function $1056($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 204 | 0) >> 2] = $1_1;
 }
 
 function $1057($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 4 | 0 | 0;
 }
 
 function $1058($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $1059($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 276 | 0) >> 2]));
 }
 
 function $1060($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[($0_1 + 276 | 0) >> 2] = $1_1;
 }
 
 function $1061($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 272 | 0) >> 2]));
 }
 
 function $1062($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  HEAPF32[($0_1 + 272 | 0) >> 2] = $1_1;
 }
 
 function $1063($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 264 | 0) >> 2] | 0 | 0;
 }
 
 function $1064($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 264 | 0) >> 2] = $1_1;
 }
 
 function $1065($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 220 | 0) >> 2] | 0 | 0;
 }
 
 function $1066($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $13_1 = 0;
  HEAP32[($0_1 + 304 | 0) >> 2] = (HEAP32[($0_1 + 304 | 0) >> 2] | 0) + 1 | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $8_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 148 | 0) >> 2] = $8_1;
  HEAP32[(i64toi32_i32$0 + 152 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 156 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1067($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $13_1 = 0;
  HEAP32[($0_1 + 304 | 0) >> 2] = (HEAP32[($0_1 + 304 | 0) >> 2] | 0) + 1 | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $8_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 132 | 0) >> 2] = $8_1;
  HEAP32[(i64toi32_i32$0 + 136 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 140 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1068($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1069($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
 }
 
 function $1070($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
 }
 
 function $1071($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = Math_fround(0);
  label$1 : {
   $1_1 = Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]);
   if (!(Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0))) {
    break label$1
   }
   return ~~$1_1 | 0;
  }
  return -2147483648 | 0;
 }
 
 function $1072($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround($1_1 | 0);
 }
 
 function $1073($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $1074($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
 }
 
 function $1075($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $10_1 = 0, $15_1 = 0, $18_1 = 0, $23_1 = 0;
  $2_1 = $36(88 | 0) | 0;
  HEAP32[($2_1 + 20 | 0) >> 2] = 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 1;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 24336;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $10_1;
  HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $18_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = $18_1;
  HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $23_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $2_1 | 0;
 }
 
 function $1076($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 24 | 0 | 0;
 }
 
 function $1077($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $9_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 24 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 28 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $9_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1078($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 40 | 0 | 0;
 }
 
 function $1079($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $9_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 48 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $9_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1080($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 56 | 0 | 0;
 }
 
 function $1081($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 72 | 0 | 0;
 }
 
 function $1082($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1083($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1084($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP8[($0_1 + 16 | 0) >> 0] = 1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
 }
 
 function $1085($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 4 | 0) | 0 | 0;
 }
 
 function $1086($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP8[($0_1 + 16 | 0) >> 0] = 1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
 }
 
 function $1087($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0);
  label$1 : {
   $2_1 = Math_fround(HEAPF32[((HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0) >> 2]);
   if (!(Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0))) {
    break label$1
   }
   return ~~$2_1 | 0;
  }
  return -2147483648 | 0;
 }
 
 function $1088($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 16 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP8[($0_1 + 16 | 0) >> 0] = 1;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
 }
 
 function $1089($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $15_1 = 0, $20_1 = 0, $23_1 = 0, $28_1 = 0;
  $2_1 = $36(136 | 0) | 0;
  HEAP32[($2_1 + 20 | 0) >> 2] = 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 1;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 40 | 0) >> 0] = 1;
  HEAP32[i64toi32_i32$1 >> 2] = 24468;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 92 | 0) >> 0] = 1;
  HEAP32[(i64toi32_i32$1 + 88 | 0) >> 2] = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = $15_1;
  HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1 + 52 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $20_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $23_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = $23_1;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $28_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1 + 68 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $28_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($2_1 + 112 | 0) >> 0] = 1;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 80 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 84 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 132 | 0) >> 0] = 1;
  HEAP32[(i64toi32_i32$1 + 128 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1090($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 44 | 0 | 0;
 }
 
 function $1091($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $9_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 52 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $9_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1092($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 60 | 0 | 0;
 }
 
 function $1093($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $9_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 68 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $9_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1094($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 96 | 0 | 0;
 }
 
 function $1095($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 76 | 0 | 0;
 }
 
 function $1096($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 24 | 0 | 0;
 }
 
 function $1097($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 116 | 0 | 0;
 }
 
 function $1098($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 48 | 0 | 0;
 }
 
 function $1099($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 32 | 0 | 0;
 }
 
 function $1100($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 64 | 0 | 0;
 }
 
 function $1101($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = Math_fround(0);
  label$1 : {
   $1_1 = Math_fround(HEAPF32[($0_1 + 80 | 0) >> 2]);
   if (!(Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0))) {
    break label$1
   }
   return ~~$1_1 | 0;
  }
  return -2147483648 | 0;
 }
 
 function $1102($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]) < Math_fround(1.0) | 0;
 }
 
 function $1103($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
 }
 
 function $1104($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
 }
 
 function $1105($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]));
 }
 
 function $1106($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAPF32[($0_1 + 4 | 0) >> 2] = Math_fround($1_1 | 0);
 }
 
 function $1107($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $9_1 = 0, $14_1 = 0, $17_1 = 0, $22_1 = 0;
  $2_1 = $36(84 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = -1;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[i64toi32_i32$1 >> 2] = 24552;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $9_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] = $9_1;
  HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1 + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $14_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $22_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1 + 40 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $22_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 80 | 0) >> 2] = 0;
  return $2_1 | 0;
 }
 
 function $1108($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 48 | 0 | 0;
 }
 
 function $1109($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 64 | 0 | 0;
 }
 
 function $1110($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0;
 }
 
 function $1111($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 80 | 0) >> 2] = $1_1;
 }
 
 function $1112($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $13_1 = 0, $18_1 = 0, $21_1 = 0, $3_1 = 0, $3$hi = 0;
  $2_1 = $36(128 | 0) | 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 20 | 0) >> 2] = 0;
  HEAP32[($2_1 + 24 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 12 | 0) >> 2] = -1;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 1;
  HEAP32[($2_1 + 4 | 0) >> 2] = 1065353216;
  HEAP32[($2_1 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($2_1 + 32 | 0) >> 0] = 1;
  HEAP32[$2_1 >> 2] = 24692;
  HEAP32[($2_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 36 | 0) >> 2] = $13_1;
  HEAP32[($2_1 + 40 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $18_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $2_1 + 44 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $18_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $21_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $2_1;
  HEAP32[($2_1 + 52 | 0) >> 2] = $21_1;
  HEAP32[($2_1 + 56 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $3_1 = i64toi32_i32$1;
  $3$hi = i64toi32_i32$0;
  HEAP32[($2_1 + 80 | 0) >> 2] = 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 72 | 0) >> 2] = 0;
  HEAP32[($2_1 + 76 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 100 | 0) >> 2] = 0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 112 | 0) >> 2] = 0;
  HEAP32[($2_1 + 116 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($2_1 + 120 | 0) >> 2] = 0;
  HEAP8[($2_1 + 124 | 0) >> 0] = 1;
  HEAP8[($2_1 + 104 | 0) >> 0] = 1;
  HEAP8[($2_1 + 84 | 0) >> 0] = 1;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 92 | 0) >> 2] = 0;
  HEAP32[($2_1 + 96 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$1 = $2_1 + 60 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $2_1 | 0;
 }
 
 function $1113($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 68 | 0 | 0;
 }
 
 function $1114($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 88 | 0 | 0;
 }
 
 function $1115($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 108 | 0 | 0;
 }
 
 function $1116($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 16 | 0 | 0;
 }
 
 function $1117($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $1118($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $1119($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($0_1, $1_1, $2_1);
 }
 
 function $1120($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $79(60 | 0, 16 | 0) | 0;
  $316($1_1 | 0, $0_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1121($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $79(60 | 0, 16 | 0) | 0;
  $108($2_1 | 0, Math_fround($0_1), Math_fround($1_1)) | 0;
  return $2_1 | 0;
 }
 
 function $1122($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $79(60 | 0, 16 | 0) | 0;
  $112($2_1 | 0, Math_fround($0_1), Math_fround($1_1)) | 0;
  return $2_1 | 0;
 }
 
 function $1123($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $79(60 | 0, 16 | 0) | 0;
  $113($2_1 | 0, Math_fround($0_1), Math_fround($1_1)) | 0;
  return $2_1 | 0;
 }
 
 function $1124($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $79(60 | 0, 16 | 0) | 0;
  $336($1_1 | 0, $0_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1125($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $79(60 | 0, 16 | 0) | 0;
  $338($1_1 | 0, $0_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1126($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $79(60 | 0, 16 | 0) | 0;
  $339($1_1 | 0, $0_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1127($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $1_1 = $79(56 | 0, 16 | 0) | 0;
  $145($1_1 | 0) | 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 0;
  HEAP32[($1_1 + 28 | 0) >> 2] = 0;
  HEAP32[($1_1 + 32 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 24 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[($1_1 + 16 | 0) >> 2] = 1065353216;
  HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 4 | 0) >> 2] = 8;
  HEAP32[$1_1 >> 2] = 9852;
  i64toi32_i32$1 = $1_1 + 36 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1_1 + 44 | 0) >> 2] = 0;
  HEAP32[($1_1 + 52 | 0) >> 2] = 0;
  HEAPF32[($1_1 + 48 | 0) >> 2] = $0_1;
  HEAPF32[($1_1 + 32 | 0) >> 2] = $0_1;
  return $1_1 | 0;
 }
 
 function $1128($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $79(80 | 0, 16 | 0) | 0;
  $126($2_1 | 0, Math_fround($0_1), Math_fround($1_1)) | 0;
  return $2_1 | 0;
 }
 
 function $1129($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $79(80 | 0, 16 | 0) | 0;
  $128($2_1 | 0, Math_fround($0_1), Math_fround($1_1)) | 0;
  return $2_1 | 0;
 }
 
 function $1130($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $79(80 | 0, 16 | 0) | 0;
  $127($2_1 | 0, Math_fround($0_1), Math_fround($1_1)) | 0;
  return $2_1 | 0;
 }
 
 function $1131($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0;
  $2_1 = $79(88 | 0, 16 | 0) | 0;
  $385($2_1 | 0, $0_1 | 0, Math_fround($1_1)) | 0;
  return $2_1 | 0;
 }
 
 function $1132($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!(HEAPU8[($0_1 + 52 | 0) >> 0] | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($0_1);
   HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  }
 }
 
 function $1133($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $79(172 | 0, 16 | 0) | 0;
  $1134($1_1 | 0, $0_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1134($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $7_1 = 0, $2_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0;
  $382($0_1 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 64 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 1065353216;
  HEAP32[($0_1 + 56 | 0) >> 2] = 1065353216;
  HEAP32[($0_1 + 60 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 36 | 0;
  i64toi32_i32$0 = -8388609;
  HEAP32[i64toi32_i32$1 >> 2] = -8388609;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 2139095039;
  HEAP32[($0_1 + 20 | 0) >> 2] = 2139095039;
  HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$0_1 >> 2] = 10820;
  HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  HEAP8[($0_1 + 92 | 0) >> 0] = 1;
  i64toi32_i32$1 = $0_1 + 80 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 144 | 0) >> 2] = 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 1;
  HEAP32[($0_1 + 44 | 0) >> 2] = -8388609;
  HEAP32[($0_1 + 28 | 0) >> 2] = 2139095039;
  HEAP32[($0_1 + 4 | 0) >> 2] = 25;
  HEAP8[($0_1 + 168 | 0) >> 0] = 1;
  HEAP32[($0_1 + 164 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0_1 + 156 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 148 | 0) >> 2] = $1_1;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($1_1) | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $2_1 = 0;
   label$2 : while (1) {
    $3_1 = $79(216 | 0, 16 | 0) | 0;
    $398($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
    label$3 : {
     $4_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
     if (($4_1 | 0) != (HEAP32[($0_1 + 160 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     $5_1 = $4_1 ? $4_1 << 1 | 0 : 1;
     if (($4_1 | 0) >= ($5_1 | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if ($5_1) {
        break label$5
       }
       $6_1 = 0;
       break label$4;
      }
      $6_1 = $79($5_1 << 2 | 0 | 0, 16 | 0) | 0;
      $4_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
     }
     label$6 : {
      if (($4_1 | 0) < (1 | 0)) {
       break label$6
      }
      $7_1 = 0;
      $8_1 = $4_1;
      label$7 : while (1) {
       HEAP32[($6_1 + $7_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 164 | 0) >> 2] | 0) + $7_1 | 0) >> 2] | 0;
       $7_1 = $7_1 + 4 | 0;
       $8_1 = $8_1 + -1 | 0;
       if ($8_1) {
        continue label$7
       }
       break label$7;
      };
     }
     label$8 : {
      $7_1 = HEAP32[($0_1 + 164 | 0) >> 2] | 0;
      if (!$7_1) {
       break label$8
      }
      label$9 : {
       if (!(HEAPU8[($0_1 + 168 | 0) >> 0] | 0)) {
        break label$9
       }
       $80($7_1 | 0);
       $4_1 = HEAP32[($0_1 + 156 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 164 | 0) >> 2] = 0;
     }
     HEAP32[($0_1 + 164 | 0) >> 2] = $6_1;
     HEAP8[($0_1 + 168 | 0) >> 0] = 1;
     HEAP32[($0_1 + 160 | 0) >> 2] = $5_1;
    }
    HEAP32[($0_1 + 156 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP32[((HEAP32[($0_1 + 164 | 0) >> 2] | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $3_1;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) < (FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($1_1) | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $1135($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $79(96 | 0, 16 | 0) | 0;
  $498($1_1 | 0, $0_1 | 0, 0 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1136($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $501($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1137($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $504($0_1 | 0, $1_1 | 0);
 }
 
 function $1138($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[(((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + Math_imul($1_1, 80) | 0) + 64 | 0) >> 2] | 0 | 0;
 }
 
 function $1139($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $503($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1140() {
  var $0_1 = 0;
  $0_1 = $79(172 | 0, 16 | 0) | 0;
  $528($0_1 | 0, 1 | 0, 1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1141($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $531($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
 }
 
 function $1142() {
  var $0_1 = 0, i64toi32_i32$0 = 0, $1_1 = 0;
  $0_1 = global$0 - 32 | 0;
  global$0 = $0_1;
  $1_1 = $36(88 | 0) | 0;
  i64toi32_i32$0 = 1;
  HEAP32[($0_1 + 24 | 0) >> 2] = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 4096;
  HEAP32[($0_1 + 16 | 0) >> 2] = 4096;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  $708($1_1 | 0, $0_1 + 8 | 0 | 0) | 0;
  global$0 = $0_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1143($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 772 | 0) >> 2] | 0 | 0;
 }
 
 function $1144($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 776 | 0) >> 2] | 0 | 0;
 }
 
 function $1145($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 780 | 0) >> 2] | 0 | 0;
 }
 
 function $1146($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 + Math_imul($1_1, 192) | 0) + 4 | 0 | 0;
 }
 
 function $1147($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $1148($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $1149($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $36(10448 | 0) | 0;
  $229($1_1 | 0, $0_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1150($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 60 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $1151() {
  var $0_1 = 0;
  $0_1 = $36(176 | 0) | 0;
  $759($0_1 | 0, 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1152($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $1153($0_1, $1_1, $2_1, $3_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$2 = 0, $14_1 = 0, $19_1 = 0;
  $4_1 = $36(144 | 0) | 0;
  HEAP32[($4_1 + 72 | 0) >> 2] = $2_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAPF32[$4_1 >> 2] = $0_1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $4_1;
  HEAP32[($4_1 + 76 | 0) >> 2] = $14_1;
  HEAP32[($4_1 + 80 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $4_1 + 84 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 1008981770;
  HEAP32[(i64toi32_i32$1 + 136 | 0) >> 2] = 1008981770;
  HEAP32[(i64toi32_i32$1 + 140 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1008981770;
  HEAP32[(i64toi32_i32$1 + 128 | 0) >> 2] = 1000593162;
  HEAP32[(i64toi32_i32$1 + 132 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 124 | 0) >> 0] = 0;
  i64toi32_i32$0 = 1065353216;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = 1061997773;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] = 1056964608;
  HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 92 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 20 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 1065353216;
  i64toi32_i32$1 = i64toi32_i32$1 + 40 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = 1065353216;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 60 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $1154($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $37($0_1 | 0);
  }
 }
 
 function $1155($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $79(676 | 0, 16 | 0) | 0;
  $795($1_1 | 0, $0_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1156($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $808($0_1 | 0, $1_1 | 0);
 }
 
 function $1157($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  HEAPF32[($0_1 + 536 | 0) >> 2] = $2_1;
  HEAPF32[($0_1 + 532 | 0) >> 2] = $1_1;
 }
 
 function $1158($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 532 | 0) >> 2]));
 }
 
 function $1159($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 536 | 0) >> 2]));
 }
 
 function $1160($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $797($0_1 | 0, Math_fround($1_1), Math_fround($2_1));
 }
 
 function $1161($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  $798($0_1 | 0, Math_fround($1_1), $2_1 | 0);
 }
 
 function $1162($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $3_1 = Math_fround(0), $6_1 = 0, $12_1 = 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 408 | 0) >> 2] = $6_1;
  HEAP32[($0_1 + 412 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 416 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 632 | 0) >> 2] = 0;
  $3_1 = Math_fround(HEAPF32[($0_1 + 404 | 0) >> 2]);
  HEAPF32[($0_1 + 624 | 0) >> 2] = Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 412 | 0) >> 2]));
  HEAPF32[($0_1 + 620 | 0) >> 2] = Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 408 | 0) >> 2]));
  HEAPF32[($0_1 + 628 | 0) >> 2] = Math_fround($3_1 * Math_fround(HEAPF32[i64toi32_i32$1 >> 2]));
 }
 
 function $1163($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0);
  $2_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $3_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  HEAPF32[($0_1 + 488 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * Math_fround(HEAPF32[($0_1 + 604 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 488 | 0) >> 2]));
  $1_1 = $0_1 + 492 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 608 | 0) >> 2])) + Math_fround(HEAPF32[$1_1 >> 2]));
  $1_1 = $0_1 + 496 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround($2_1 * Math_fround(HEAPF32[($0_1 + 612 | 0) >> 2])) + Math_fround(HEAPF32[$1_1 >> 2]));
 }
 
 function $1164($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $3_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $8_1 = Math_fround(0), $11_1 = Math_fround(0);
  $3_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $5_1 = Math_fround(HEAPF32[($0_1 + 408 | 0) >> 2]);
  HEAPF32[($0_1 + 472 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * $5_1) + Math_fround(HEAPF32[($0_1 + 472 | 0) >> 2]));
  $6_1 = $0_1 + 476 | 0;
  $7_1 = Math_fround(HEAPF32[($0_1 + 412 | 0) >> 2]);
  HEAPF32[$6_1 >> 2] = Math_fround(Math_fround($4_1 * $7_1) + Math_fround(HEAPF32[$6_1 >> 2]));
  $6_1 = $0_1 + 480 | 0;
  $4_1 = Math_fround(HEAPF32[($0_1 + 416 | 0) >> 2]);
  HEAPF32[$6_1 >> 2] = Math_fround(Math_fround($3_1 * $4_1) + Math_fround(HEAPF32[$6_1 >> 2]));
  $8_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $3_1 = Math_fround(HEAPF32[$2_1 >> 2]);
  $9_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
  $4_1 = Math_fround($4_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]));
  $7_1 = Math_fround($7_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]));
  $10_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
  HEAPF32[($0_1 + 488 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9_1 * $4_1) - Math_fround($7_1 * $10_1)) * Math_fround(HEAPF32[($0_1 + 604 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 488 | 0) >> 2]));
  $11_1 = Math_fround(HEAPF32[($0_1 + 612 | 0) >> 2]);
  $1_1 = $0_1 + 492 | 0;
  $5_1 = Math_fround($5_1 * $8_1);
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($10_1 * $5_1) - Math_fround($4_1 * $3_1)) * Math_fround(HEAPF32[($0_1 + 608 | 0) >> 2])) + Math_fround(HEAPF32[$1_1 >> 2]));
  $0_1 = $0_1 + 496 | 0;
  HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($11_1 * Math_fround(Math_fround($7_1 * $3_1) - Math_fround($5_1 * $9_1))) + Math_fround(HEAPF32[$0_1 >> 2]));
 }
 
 function $1165($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0);
  $2_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $3_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  HEAPF32[($0_1 + 472 | 0) >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * Math_fround(HEAPF32[($0_1 + 408 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 472 | 0) >> 2]));
  $1_1 = $0_1 + 476 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 412 | 0) >> 2])) + Math_fround(HEAPF32[$1_1 >> 2]));
  $1_1 = $0_1 + 480 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround($2_1 * Math_fround(HEAPF32[($0_1 + 416 | 0) >> 2])) + Math_fround(HEAPF32[$1_1 >> 2]));
 }
 
 function $1166($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0);
  $2_1 = Math_fround(HEAPF32[$1_1 >> 2]);
  $3_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  HEAPF32[($0_1 + 388 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 324 | 0) >> 2]) * $2_1) + Math_fround(Math_fround(HEAPF32[($0_1 + 328 | 0) >> 2]) * $3_1)) + Math_fround(Math_fround(HEAPF32[($0_1 + 332 | 0) >> 2]) * $4_1)) * Math_fround(HEAPF32[($0_1 + 604 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 388 | 0) >> 2]));
  $1_1 = $0_1 + 392 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2_1 * Math_fround(HEAPF32[($0_1 + 340 | 0) >> 2])) + Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 344 | 0) >> 2]))) + Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 348 | 0) >> 2]))) * Math_fround(HEAPF32[($0_1 + 608 | 0) >> 2])) + Math_fround(HEAPF32[$1_1 >> 2]));
  $1_1 = $0_1 + 396 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2_1 * Math_fround(HEAPF32[($0_1 + 356 | 0) >> 2])) + Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 360 | 0) >> 2]))) + Math_fround($4_1 * Math_fround(HEAPF32[($0_1 + 364 | 0) >> 2]))) * Math_fround(HEAPF32[($0_1 + 612 | 0) >> 2])) + Math_fround(HEAPF32[$1_1 >> 2]));
 }
 
 function $1167($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1168($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1168($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = Math_fround(0), $3_1 = Math_fround(0), $4_1 = Math_fround(0), $8_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $17_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = Math_fround(0), $14_1 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $123_1 = Math_fround(0);
  label$1 : {
   $3_1 = Math_fround(HEAPF32[($0_1 + 404 | 0) >> 2]);
   if ($3_1 == Math_fround(0.0)) {
    break label$1
   }
   $4_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($0_1 + 408 | 0) >> 2]);
   HEAPF32[($0_1 + 372 | 0) >> 2] = Math_fround(Math_fround($3_1 * Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * $6_1)) + Math_fround(HEAPF32[($0_1 + 372 | 0) >> 2]));
   $7_1 = $0_1 + 376 | 0;
   $8_1 = Math_fround(HEAPF32[($0_1 + 412 | 0) >> 2]);
   HEAPF32[$7_1 >> 2] = Math_fround(Math_fround($3_1 * Math_fround($5_1 * $8_1)) + Math_fround(HEAPF32[$7_1 >> 2]));
   $7_1 = $0_1 + 380 | 0;
   $5_1 = Math_fround(HEAPF32[($0_1 + 416 | 0) >> 2]);
   HEAPF32[$7_1 >> 2] = Math_fround(Math_fround($3_1 * Math_fround($4_1 * $5_1)) + Math_fround(HEAPF32[$7_1 >> 2]));
   $9_1 = Math_fround(HEAPF32[($0_1 + 612 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($0_1 + 364 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($0_1 + 356 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[($0_1 + 360 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($0_1 + 608 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[($0_1 + 348 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($0_1 + 340 | 0) >> 2]);
   $16_1 = Math_fround(HEAPF32[($0_1 + 344 | 0) >> 2]);
   $17_1 = Math_fround(HEAPF32[($2_1 + 4 | 0) >> 2]);
   $4_1 = Math_fround($5_1 * Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]));
   $5_1 = Math_fround($8_1 * Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]));
   $8_1 = Math_fround(HEAPF32[($2_1 + 8 | 0) >> 2]);
   $3_1 = Math_fround(Math_fround($17_1 * $4_1) - Math_fround($5_1 * $8_1));
   $6_1 = Math_fround($6_1 * Math_fround(HEAPF32[$1_1 >> 2]));
   $123_1 = Math_fround($6_1 * $8_1);
   $8_1 = Math_fround(HEAPF32[$2_1 >> 2]);
   $4_1 = Math_fround($123_1 - Math_fround($4_1 * $8_1));
   $5_1 = Math_fround(Math_fround($5_1 * $8_1) - Math_fround($6_1 * $17_1));
   HEAPF32[($0_1 + 388 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($0_1 + 324 | 0) >> 2]) * $3_1) + Math_fround(Math_fround(HEAPF32[($0_1 + 328 | 0) >> 2]) * $4_1)) + Math_fround($5_1 * Math_fround(HEAPF32[($0_1 + 332 | 0) >> 2]))) * Math_fround(HEAPF32[($0_1 + 604 | 0) >> 2])) + Math_fround(HEAPF32[($0_1 + 388 | 0) >> 2]));
   $1_1 = $0_1 + 392 | 0;
   HEAPF32[$1_1 >> 2] = Math_fround(Math_fround($13_1 * Math_fround(Math_fround(Math_fround($3_1 * $15_1) + Math_fround($4_1 * $16_1)) + Math_fround($5_1 * $14_1))) + Math_fround(HEAPF32[$1_1 >> 2]));
   $0_1 = $0_1 + 396 | 0;
   HEAPF32[$0_1 >> 2] = Math_fround(Math_fround($9_1 * Math_fround(Math_fround(Math_fround($3_1 * $11_1) + Math_fround($4_1 * $12_1)) + Math_fround($5_1 * $10_1))) + Math_fround(HEAPF32[$0_1 >> 2]));
  }
 }
 
 function $1169($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = Math_fround(0), $2_1 = Math_fround(0), $3_1 = Math_fround(0);
  $2_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
  $3_1 = Math_fround(HEAPF32[($1_1 + 4 | 0) >> 2]);
  $4_1 = Math_fround(HEAPF32[($0_1 + 404 | 0) >> 2]);
  HEAPF32[($0_1 + 372 | 0) >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 >> 2]) * Math_fround(HEAPF32[($0_1 + 408 | 0) >> 2])) * $4_1) + Math_fround(HEAPF32[($0_1 + 372 | 0) >> 2]));
  $1_1 = $0_1 + 376 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround($4_1 * Math_fround($3_1 * Math_fround(HEAPF32[($0_1 + 412 | 0) >> 2]))) + Math_fround(HEAPF32[$1_1 >> 2]));
  $1_1 = $0_1 + 380 | 0;
  HEAPF32[$1_1 >> 2] = Math_fround(Math_fround($4_1 * Math_fround($2_1 * Math_fround(HEAPF32[($0_1 + 416 | 0) >> 2]))) + Math_fround(HEAPF32[$1_1 >> 2]));
 }
 
 function $1170($0_1) {
  $0_1 = $0_1 | 0;
  $799($0_1 | 0);
 }
 
 function $1171($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 372 | 0 | 0;
 }
 
 function $1172($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 388 | 0 | 0;
 }
 
 function $1173($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $13_1 = 0;
  HEAP32[($0_1 + 304 | 0) >> 2] = (HEAP32[($0_1 + 304 | 0) >> 2] | 0) + 1 | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $8_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 372 | 0) >> 2] = $8_1;
  HEAP32[(i64toi32_i32$0 + 376 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 380 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1174($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $13_1 = 0;
  HEAP32[($0_1 + 304 | 0) >> 2] = (HEAP32[($0_1 + 304 | 0) >> 2] | 0) + 1 | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $8_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 388 | 0) >> 2] = $8_1;
  HEAP32[(i64toi32_i32$0 + 392 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 396 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1175($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8_1 = 0, $13_1 = 0;
  HEAP32[($0_1 + 304 | 0) >> 2] = (HEAP32[($0_1 + 304 | 0) >> 2] | 0) + 1 | 0;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $8_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 604 | 0) >> 2] = $8_1;
  HEAP32[(i64toi32_i32$0 + 608 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 612 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1176($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 440 | 0 | 0;
 }
 
 function $1177($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $804($0_1 | 0, $1_1 | 0);
 }
 
 function $1178($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 472 | 0 | 0;
 }
 
 function $1179($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 488 | 0 | 0;
 }
 
 function $1180($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 564 | 0) >> 2] | 0 | 0;
 }
 
 function $1181($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 564 | 0) >> 2] = $1_1;
 }
 
 function $1182($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 472 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 476 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 496 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 488 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 480 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $1183() {
  var $0_1 = 0;
  $0_1 = $79(236 | 0, 16 | 0) | 0;
  $819($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1184($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[($0_1 + 16 | 0) >> 0] | 0 | 0;
 }
 
 function $1185($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[($0_1 + 16 | 0) >> 0] = $1_1;
 }
 
 function $1186($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $1187($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 28 | 0 | 0;
 }
 
 function $1188($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $1189($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $1190($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $872($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, Math_fround($5_1));
 }
 
 function $1191($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 64 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $1192($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 68 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $1193($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 92 | 0 | 0;
 }
 
 function $1194($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $79(344 | 0, 16 | 0) | 0;
  $930($4_1 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  return $4_1 | 0;
 }
 
 function $1195($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 72 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $1196($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $14_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 76 | 0) >> 2] | 0]($1_1, $0_1);
  i64toi32_i32$2 = $1_1 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$0 + 2820 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 2824 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$1 + 2812 | 0) >> 2] = $14_1;
  HEAP32[(i64toi32_i32$1 + 2816 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $1_1 + 16 | 0;
  return 2812 | 0;
 }
 
 function $1197($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 88 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $1198($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 92 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $1199($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  $3_1 = Math_fround($3_1);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0]($0_1, $1_1, $2_1, $3_1) | 0;
 }
 
 function $1200($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 120 | 0) >> 2] | 0]($0_1);
 }
 
 function $1201($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[($0_1 + 291 | 0) >> 0] = $1_1;
 }
 
 function $1202($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[($0_1 + 291 | 0) >> 0] | 0 | 0;
 }
 
 function $1203($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $79(292 | 0, 16 | 0) | 0;
  $994($4_1 | 0, $0_1 | 0, $1_1 | 0, Math_fround($2_1), $3_1 | 0) | 0;
  return $4_1 | 0;
 }
 
 function $1204($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $1205($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $1015($0_1 | 0, Math_fround($1_1));
 }
 
 function $1206($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $1016($0_1 | 0, Math_fround($1_1));
 }
 
 function $1207($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $996($0_1 | 0, Math_fround($1_1));
 }
 
 function $1208($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0]($0_1) | 0 | 0;
 }
 
 function $1209($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0]($0_1, $1_1);
 }
 
 function $1210($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1019($0_1 | 0, $1_1 | 0);
 }
 
 function $1211() {
  var $0_1 = 0;
  $0_1 = $79(348 | 0, 16 | 0) | 0;
  $987($0_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1212() {
  var $0_1 = 0;
  $0_1 = $36(4 | 0) | 0;
  HEAP32[$0_1 >> 2] = 24776;
  return $0_1 | 0;
 }
 
 function $1213($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1214($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $1215($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  fimport$4(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0);
 }
 
 function $1216($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  fimport$5(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0, $1_1 | 0);
 }
 
 function $1217($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $1218($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 16 | 0) >> 2] | 0) & (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) {
    break label$1
   }
   return 0 | 0;
  }
  return ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & (HEAP32[($0_1 + 12 | 0) >> 2] | 0) | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1219($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $11_1 = Math_fround(0), $13_1 = Math_fround(0), i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $15_1 = Math_fround(0), $27_1 = 0, $32_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = Math_fround(0);
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    $27_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[($0_1 + 56 | 0) >> 2] = $27_1;
    HEAP32[($0_1 + 60 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $32_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $32_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   $4_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   HEAP32[($0_1 + 68 | 0) >> 2] = 0;
   HEAPF32[($0_1 + 64 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $9_1) + Math_fround($11_1 * $10_1)) + Math_fround($13_1 * $12_1));
   HEAPF32[($0_1 + 60 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $6_1) + Math_fround($11_1 * $7_1)) + Math_fround($13_1 * $8_1));
   HEAPF32[($0_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $15_1) + Math_fround($4_1 * $11_1)) + Math_fround($5_1 * $13_1));
  }
  $11_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $13_1 = Math_fround(Math_fround(1.0) - $11_1);
  HEAPF32[($0_1 + 72 | 0) >> 2] = Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 24 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($0_1 + 40 | 0) >> 2])));
  HEAPF32[($0_1 + 76 | 0) >> 2] = Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 28 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2])));
  HEAPF32[($0_1 + 80 | 0) >> 2] = Math_fround(Math_fround($13_1 * Math_fround(HEAPF32[($0_1 + 32 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2])));
  return Math_fround(Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]));
 }
 
 function $1220($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1221($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 24468;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 132 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 128 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 128 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 120 | 0) >> 2] = 0;
  HEAP32[($0_1 + 124 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 132 | 0) >> 0] = 1;
  label$3 : {
   $1_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 112 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 108 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 108 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 100 | 0) >> 2] = 0;
  HEAP32[($0_1 + 104 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 112 | 0) >> 0] = 1;
  label$5 : {
   $1_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   label$6 : {
    if (!(HEAPU8[($0_1 + 92 | 0) >> 0] | 0)) {
     break label$6
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 88 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 92 | 0) >> 0] = 1;
  label$7 : {
   $1_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$7
   }
   label$8 : {
    if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
     break label$8
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 36 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 40 | 0) >> 0] = 1;
  return $0_1 | 0;
 }
 
 function $1222($0_1) {
  $0_1 = $0_1 | 0;
  $37($1221($0_1 | 0) | 0 | 0);
 }
 
 function $1223($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $3_1 = 0, $7_1 = 0, $4_1 = 0, $5_1 = 0, $8_1 = Math_fround(0), i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = Math_fround(0), i64toi32_i32$2 = 0, $9_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $13_1 = 0, $189_1 = 0, $194_1 = 0, $304_1 = 0, $309_1 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (($3_1 | 0) != (HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $4_1 = $3_1 ? $3_1 << 1 | 0 : 1;
   if (($3_1 | 0) >= ($4_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1) {
      break label$3
     }
     $5_1 = 0;
     break label$2;
    }
    $5_1 = $79($4_1 << 2 | 0 | 0, 16 | 0) | 0;
    $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   }
   label$4 : {
    if (($3_1 | 0) < (1 | 0)) {
     break label$4
    }
    $6_1 = 0;
    $7_1 = $3_1;
    label$5 : while (1) {
     HEAP32[($5_1 + $6_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $6_1 | 0) >> 2] | 0;
     $6_1 = $6_1 + 4 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue label$5
     }
     break label$5;
    };
   }
   label$6 : {
    $6_1 = HEAP32[($0_1 + 36 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$6
    }
    label$7 : {
     if (!(HEAPU8[($0_1 + 40 | 0) >> 0] | 0)) {
      break label$7
     }
     $80($6_1 | 0);
     $3_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 36 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 36 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 32 | 0) >> 2] = $4_1;
   HEAP8[($0_1 + 40 | 0) >> 0] = 1;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = $3_1 + 1 | 0;
  HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  label$8 : {
   label$9 : {
    if (!$2_1) {
     break label$9
    }
    $8_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
    $9_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    break label$8;
   }
   $8_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   $11_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $9_1 = Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2]))) + Math_fround($12_1 * Math_fround(HEAPF32[($6_1 + 44 | 0) >> 2])));
   $10_1 = Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]))) + Math_fround($12_1 * Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2])));
   $11_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) * $8_1) + Math_fround(Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]) * $11_1)) + Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) * $12_1));
   $8_1 = Math_fround(0.0);
  }
  label$10 : {
   $7_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
   if (($7_1 | 0) != (HEAP32[($0_1 + 84 | 0) >> 2] | 0 | 0)) {
    break label$10
   }
   $4_1 = $7_1 ? $7_1 << 1 | 0 : 1;
   if (($7_1 | 0) >= ($4_1 | 0)) {
    break label$10
   }
   label$11 : {
    label$12 : {
     if ($4_1) {
      break label$12
     }
     $2_1 = 0;
     break label$11;
    }
    $2_1 = $79($4_1 << 4 | 0 | 0, 16 | 0) | 0;
    $7_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
   }
   label$13 : {
    if (($7_1 | 0) < (1 | 0)) {
     break label$13
    }
    $6_1 = 0;
    label$14 : while (1) {
     $5_1 = $2_1 + $6_1 | 0;
     $3_1 = (HEAP32[($0_1 + 88 | 0) >> 2] | 0) + $6_1 | 0;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     $189_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $5_1;
     HEAP32[i64toi32_i32$0 >> 2] = $189_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $3_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $194_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $5_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $194_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $6_1 + 16 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue label$14
     }
     break label$14;
    };
   }
   label$15 : {
    $6_1 = HEAP32[($0_1 + 88 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$15
    }
    label$16 : {
     if (!(HEAPU8[($0_1 + 92 | 0) >> 0] | 0)) {
      break label$16
     }
     $80($6_1 | 0);
    }
    HEAP32[($0_1 + 88 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 88 | 0) >> 2] = $2_1;
   HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
   HEAP8[($0_1 + 92 | 0) >> 0] = 1;
   $7_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
  }
  $6_1 = (HEAP32[($0_1 + 88 | 0) >> 2] | 0) + ($7_1 << 4 | 0) | 0;
  HEAPF32[($6_1 + 12 | 0) >> 2] = $8_1;
  HEAPF32[($6_1 + 8 | 0) >> 2] = $9_1;
  HEAPF32[($6_1 + 4 | 0) >> 2] = $10_1;
  HEAPF32[$6_1 >> 2] = $11_1;
  HEAP32[($0_1 + 80 | 0) >> 2] = (HEAP32[($0_1 + 80 | 0) >> 2] | 0) + 1 | 0;
  $8_1 = Math_fround(HEAPF32[($1_1 + 24 | 0) >> 2]);
  $9_1 = Math_fround(Math_fround(1.0) - $8_1);
  $10_1 = Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($0_1 + 52 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($0_1 + 68 | 0) >> 2])));
  $11_1 = Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($0_1 + 48 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($0_1 + 64 | 0) >> 2])));
  $8_1 = Math_fround(Math_fround($9_1 * Math_fround(HEAPF32[($0_1 + 44 | 0) >> 2])) + Math_fround($8_1 * Math_fround(HEAPF32[($0_1 + 60 | 0) >> 2])));
  label$17 : {
   $7_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
   if (($7_1 | 0) != (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
    break label$17
   }
   $4_1 = $7_1 ? $7_1 << 1 | 0 : 1;
   if (($7_1 | 0) >= ($4_1 | 0)) {
    break label$17
   }
   label$18 : {
    label$19 : {
     if ($4_1) {
      break label$19
     }
     $2_1 = 0;
     break label$18;
    }
    $2_1 = $79($4_1 << 4 | 0 | 0, 16 | 0) | 0;
    $7_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
   }
   label$20 : {
    if (($7_1 | 0) < (1 | 0)) {
     break label$20
    }
    $6_1 = 0;
    label$21 : while (1) {
     $5_1 = $2_1 + $6_1 | 0;
     $3_1 = (HEAP32[($0_1 + 108 | 0) >> 2] | 0) + $6_1 | 0;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     $304_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $5_1;
     HEAP32[i64toi32_i32$0 >> 2] = $304_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $3_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $309_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $5_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $309_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $6_1 + 16 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue label$21
     }
     break label$21;
    };
   }
   label$22 : {
    $6_1 = HEAP32[($0_1 + 108 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$22
    }
    label$23 : {
     if (!(HEAPU8[($0_1 + 112 | 0) >> 0] | 0)) {
      break label$23
     }
     $80($6_1 | 0);
    }
    HEAP32[($0_1 + 108 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 108 | 0) >> 2] = $2_1;
   HEAP32[($0_1 + 104 | 0) >> 2] = $4_1;
   HEAP8[($0_1 + 112 | 0) >> 0] = 1;
   $7_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
  }
  $6_1 = (HEAP32[($0_1 + 108 | 0) >> 2] | 0) + ($7_1 << 4 | 0) | 0;
  HEAPF32[($6_1 + 8 | 0) >> 2] = $10_1;
  HEAPF32[($6_1 + 4 | 0) >> 2] = $11_1;
  HEAPF32[$6_1 >> 2] = $8_1;
  HEAP32[($0_1 + 100 | 0) >> 2] = (HEAP32[($0_1 + 100 | 0) >> 2] | 0) + 1 | 0;
  label$24 : {
   $3_1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   if (($3_1 | 0) != (HEAP32[($0_1 + 124 | 0) >> 2] | 0 | 0)) {
    break label$24
   }
   $2_1 = $3_1 ? $3_1 << 1 | 0 : 1;
   if (($3_1 | 0) >= ($2_1 | 0)) {
    break label$24
   }
   label$25 : {
    label$26 : {
     if ($2_1) {
      break label$26
     }
     $4_1 = 0;
     break label$25;
    }
    $4_1 = $79($2_1 << 2 | 0 | 0, 16 | 0) | 0;
    $3_1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   }
   $13_1 = HEAP32[($0_1 + 128 | 0) >> 2] | 0;
   label$27 : {
    label$28 : {
     label$29 : {
      if (($3_1 | 0) < (1 | 0)) {
       break label$29
      }
      $6_1 = $4_1;
      $7_1 = $13_1;
      $5_1 = $3_1;
      label$30 : while (1) {
       HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
       $6_1 = $6_1 + 4 | 0;
       $7_1 = $7_1 + 4 | 0;
       $5_1 = $5_1 + -1 | 0;
       if ($5_1) {
        continue label$30
       }
       break label$28;
      };
     }
     if (!$13_1) {
      break label$27
     }
    }
    label$31 : {
     if (!(HEAPU8[($0_1 + 132 | 0) >> 0] | 0)) {
      break label$31
     }
     $80($13_1 | 0);
     $3_1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 128 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 128 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 124 | 0) >> 2] = $2_1;
   HEAP8[($0_1 + 132 | 0) >> 0] = 1;
  }
  HEAP32[((HEAP32[($0_1 + 128 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
  HEAP32[($0_1 + 120 | 0) >> 2] = $3_1 + 1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]));
 }
 
 function $1224($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1225($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $1226($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0) {
    break label$1
   }
   return 0 | 0;
  }
  return ((HEAP32[($1_1 + 8 | 0) >> 2] | 0) & (HEAP32[($0_1 + 8 | 0) >> 2] | 0) | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1227($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $11_1 = Math_fround(0), $13_1 = Math_fround(0), $15_1 = Math_fround(0), $27_1 = 0, $32_1 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $12_1 = Math_fround(0), $14_1 = Math_fround(0), $109_1 = 0, $114_1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 80 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
    $27_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[($0_1 + 48 | 0) >> 2] = $27_1;
    HEAP32[($0_1 + 52 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $1_1 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $32_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1 + 56 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $32_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   $4_1 = Math_fround(HEAPF32[($3_1 + 8 | 0) >> 2]);
   $5_1 = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
   $6_1 = Math_fround(HEAPF32[($3_1 + 20 | 0) >> 2]);
   $7_1 = Math_fround(HEAPF32[($3_1 + 24 | 0) >> 2]);
   $8_1 = Math_fround(HEAPF32[($3_1 + 28 | 0) >> 2]);
   $9_1 = Math_fround(HEAPF32[($3_1 + 36 | 0) >> 2]);
   $10_1 = Math_fround(HEAPF32[($3_1 + 40 | 0) >> 2]);
   $11_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[($3_1 + 44 | 0) >> 2]);
   $13_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $14_1 = Math_fround(HEAPF32[($3_1 + 4 | 0) >> 2]);
   $15_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   HEAP32[($0_1 + 60 | 0) >> 2] = 0;
   HEAPF32[($0_1 + 56 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $9_1) + Math_fround($11_1 * $10_1)) + Math_fround($13_1 * $12_1));
   HEAPF32[($0_1 + 52 | 0) >> 2] = Math_fround(Math_fround(Math_fround($15_1 * $6_1) + Math_fround($11_1 * $7_1)) + Math_fround($13_1 * $8_1));
   HEAPF32[($0_1 + 48 | 0) >> 2] = Math_fround(Math_fround(Math_fround($14_1 * $15_1) + Math_fround($4_1 * $11_1)) + Math_fround($5_1 * $13_1));
  }
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$0 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
  $109_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[($0_1 + 64 | 0) >> 2] = $109_1;
  HEAP32[($0_1 + 68 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1_1 + 32 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $114_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1 + 72 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $114_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return Math_fround(Math_fround(HEAPF32[($1_1 + 40 | 0) >> 2]));
 }
 
 function $1228($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 24692;
  label$1 : {
   $1_1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$1
   }
   label$2 : {
    if (!(HEAPU8[($0_1 + 124 | 0) >> 0] | 0)) {
     break label$2
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 120 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 120 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 112 | 0) >> 2] = 0;
  HEAP32[($0_1 + 116 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 124 | 0) >> 0] = 1;
  label$3 : {
   $1_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$3
   }
   label$4 : {
    if (!(HEAPU8[($0_1 + 104 | 0) >> 0] | 0)) {
     break label$4
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 100 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 100 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 92 | 0) >> 2] = 0;
  HEAP32[($0_1 + 96 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 104 | 0) >> 0] = 1;
  label$5 : {
   $1_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$5
   }
   label$6 : {
    if (!(HEAPU8[($0_1 + 84 | 0) >> 0] | 0)) {
     break label$6
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 80 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  HEAP32[($0_1 + 76 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 84 | 0) >> 0] = 1;
  label$7 : {
   $1_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   if (!$1_1) {
    break label$7
   }
   label$8 : {
    if (!(HEAPU8[($0_1 + 32 | 0) >> 0] | 0)) {
     break label$8
    }
    $80($1_1 | 0);
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($0_1 + 32 | 0) >> 0] = 1;
  return $0_1 | 0;
 }
 
 function $1229($0_1) {
  $0_1 = $0_1 | 0;
  $37($1228($0_1 | 0) | 0 | 0);
 }
 
 function $1230($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $3_1 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $13_1 = 0, $8_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $9_1 = Math_fround(0), $10_1 = Math_fround(0), $186_1 = 0, $191_1 = 0, $268_1 = 0, $273_1 = 0, $306_1 = 0, $311_1 = 0;
  label$1 : {
   $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   if (($3_1 | 0) != (HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   $4_1 = $3_1 ? $3_1 << 1 | 0 : 1;
   if (($3_1 | 0) >= ($4_1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($4_1) {
      break label$3
     }
     $5_1 = 0;
     break label$2;
    }
    $5_1 = $79($4_1 << 2 | 0 | 0, 16 | 0) | 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
   }
   label$4 : {
    if (($3_1 | 0) < (1 | 0)) {
     break label$4
    }
    $6_1 = 0;
    $7_1 = $3_1;
    label$5 : while (1) {
     HEAP32[($5_1 + $6_1 | 0) >> 2] = HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + $6_1 | 0) >> 2] | 0;
     $6_1 = $6_1 + 4 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue label$5
     }
     break label$5;
    };
   }
   label$6 : {
    $6_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$6
    }
    label$7 : {
     if (!(HEAPU8[($0_1 + 32 | 0) >> 0] | 0)) {
      break label$7
     }
     $80($6_1 | 0);
     $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 24 | 0) >> 2] = $4_1;
   HEAP8[($0_1 + 32 | 0) >> 0] = 1;
  }
  HEAP32[($0_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
  HEAP32[((HEAP32[($0_1 + 28 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  label$8 : {
   label$9 : {
    if (!$2_1) {
     break label$9
    }
    $8_1 = Math_fround(HEAPF32[($1_1 + 20 | 0) >> 2]);
    $9_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
    $10_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
    $11_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
    break label$8;
   }
   $8_1 = Math_fround(HEAPF32[($1_1 + 8 | 0) >> 2]);
   $6_1 = HEAP32[$1_1 >> 2] | 0;
   $11_1 = Math_fround(HEAPF32[($1_1 + 12 | 0) >> 2]);
   $12_1 = Math_fround(HEAPF32[($1_1 + 16 | 0) >> 2]);
   $9_1 = Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($6_1 + 36 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 40 | 0) >> 2]))) + Math_fround($12_1 * Math_fround(HEAPF32[($6_1 + 44 | 0) >> 2])));
   $10_1 = Math_fround(Math_fround(Math_fround($8_1 * Math_fround(HEAPF32[($6_1 + 20 | 0) >> 2])) + Math_fround($11_1 * Math_fround(HEAPF32[($6_1 + 24 | 0) >> 2]))) + Math_fround($12_1 * Math_fround(HEAPF32[($6_1 + 28 | 0) >> 2])));
   $11_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[($6_1 + 4 | 0) >> 2]) * $8_1) + Math_fround(Math_fround(HEAPF32[($6_1 + 8 | 0) >> 2]) * $11_1)) + Math_fround(Math_fround(HEAPF32[($6_1 + 12 | 0) >> 2]) * $12_1));
   $8_1 = Math_fround(0.0);
  }
  label$10 : {
   $7_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   if (($7_1 | 0) != (HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0)) {
    break label$10
   }
   $4_1 = $7_1 ? $7_1 << 1 | 0 : 1;
   if (($7_1 | 0) >= ($4_1 | 0)) {
    break label$10
   }
   label$11 : {
    label$12 : {
     if ($4_1) {
      break label$12
     }
     $2_1 = 0;
     break label$11;
    }
    $2_1 = $79($4_1 << 4 | 0 | 0, 16 | 0) | 0;
    $7_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   }
   label$13 : {
    if (($7_1 | 0) < (1 | 0)) {
     break label$13
    }
    $6_1 = 0;
    label$14 : while (1) {
     $5_1 = $2_1 + $6_1 | 0;
     $3_1 = (HEAP32[($0_1 + 80 | 0) >> 2] | 0) + $6_1 | 0;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     $186_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $5_1;
     HEAP32[i64toi32_i32$0 >> 2] = $186_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $3_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $191_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $5_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $191_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $6_1 + 16 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue label$14
     }
     break label$14;
    };
   }
   label$15 : {
    $6_1 = HEAP32[($0_1 + 80 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$15
    }
    label$16 : {
     if (!(HEAPU8[($0_1 + 84 | 0) >> 0] | 0)) {
      break label$16
     }
     $80($6_1 | 0);
    }
    HEAP32[($0_1 + 80 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 80 | 0) >> 2] = $2_1;
   HEAP32[($0_1 + 76 | 0) >> 2] = $4_1;
   HEAP8[($0_1 + 84 | 0) >> 0] = 1;
   $7_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  }
  $6_1 = (HEAP32[($0_1 + 80 | 0) >> 2] | 0) + ($7_1 << 4 | 0) | 0;
  HEAPF32[($6_1 + 12 | 0) >> 2] = $8_1;
  HEAPF32[($6_1 + 8 | 0) >> 2] = $9_1;
  HEAPF32[($6_1 + 4 | 0) >> 2] = $10_1;
  HEAPF32[$6_1 >> 2] = $11_1;
  HEAP32[($0_1 + 72 | 0) >> 2] = (HEAP32[($0_1 + 72 | 0) >> 2] | 0) + 1 | 0;
  $4_1 = $1_1 + 24 | 0;
  label$17 : {
   $7_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
   if (($7_1 | 0) != (HEAP32[($0_1 + 96 | 0) >> 2] | 0 | 0)) {
    break label$17
   }
   $13_1 = $7_1 ? $7_1 << 1 | 0 : 1;
   if (($7_1 | 0) >= ($13_1 | 0)) {
    break label$17
   }
   label$18 : {
    label$19 : {
     if ($13_1) {
      break label$19
     }
     $2_1 = 0;
     break label$18;
    }
    $2_1 = $79($13_1 << 4 | 0 | 0, 16 | 0) | 0;
    $7_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
   }
   label$20 : {
    if (($7_1 | 0) < (1 | 0)) {
     break label$20
    }
    $6_1 = 0;
    label$21 : while (1) {
     $5_1 = $2_1 + $6_1 | 0;
     $3_1 = (HEAP32[($0_1 + 100 | 0) >> 2] | 0) + $6_1 | 0;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     $268_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $5_1;
     HEAP32[i64toi32_i32$0 >> 2] = $268_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     i64toi32_i32$2 = $3_1 + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $273_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $5_1 + 8 | 0;
     HEAP32[i64toi32_i32$1 >> 2] = $273_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $6_1 + 16 | 0;
     $7_1 = $7_1 + -1 | 0;
     if ($7_1) {
      continue label$21
     }
     break label$21;
    };
   }
   label$22 : {
    $6_1 = HEAP32[($0_1 + 100 | 0) >> 2] | 0;
    if (!$6_1) {
     break label$22
    }
    label$23 : {
     if (!(HEAPU8[($0_1 + 104 | 0) >> 0] | 0)) {
      break label$23
     }
     $80($6_1 | 0);
    }
    HEAP32[($0_1 + 100 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 100 | 0) >> 2] = $2_1;
   HEAP32[($0_1 + 96 | 0) >> 2] = $13_1;
   HEAP8[($0_1 + 104 | 0) >> 0] = 1;
   $7_1 = HEAP32[($0_1 + 92 | 0) >> 2] | 0;
  }
  $6_1 = (HEAP32[($0_1 + 100 | 0) >> 2] | 0) + ($7_1 << 4 | 0) | 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $306_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[$6_1 >> 2] = $306_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $311_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $311_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0_1 + 92 | 0) >> 2] = (HEAP32[($0_1 + 92 | 0) >> 2] | 0) + 1 | 0;
  label$24 : {
   $3_1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   if (($3_1 | 0) != (HEAP32[($0_1 + 116 | 0) >> 2] | 0 | 0)) {
    break label$24
   }
   $2_1 = $3_1 ? $3_1 << 1 | 0 : 1;
   if (($3_1 | 0) >= ($2_1 | 0)) {
    break label$24
   }
   label$25 : {
    label$26 : {
     if ($2_1) {
      break label$26
     }
     $4_1 = 0;
     break label$25;
    }
    $4_1 = $79($2_1 << 2 | 0 | 0, 16 | 0) | 0;
    $3_1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   }
   $13_1 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
   label$27 : {
    label$28 : {
     label$29 : {
      if (($3_1 | 0) < (1 | 0)) {
       break label$29
      }
      $6_1 = $4_1;
      $7_1 = $13_1;
      $5_1 = $3_1;
      label$30 : while (1) {
       HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2] | 0;
       $6_1 = $6_1 + 4 | 0;
       $7_1 = $7_1 + 4 | 0;
       $5_1 = $5_1 + -1 | 0;
       if ($5_1) {
        continue label$30
       }
       break label$28;
      };
     }
     if (!$13_1) {
      break label$27
     }
    }
    label$31 : {
     if (!(HEAPU8[($0_1 + 124 | 0) >> 0] | 0)) {
      break label$31
     }
     $80($13_1 | 0);
     $3_1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 120 | 0) >> 2] = 0;
   }
   HEAP32[($0_1 + 120 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 116 | 0) >> 2] = $2_1;
   HEAP8[($0_1 + 124 | 0) >> 0] = 1;
  }
  HEAP32[((HEAP32[($0_1 + 120 | 0) >> 2] | 0) + ($3_1 << 2 | 0) | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
  HEAP32[($0_1 + 112 | 0) >> 2] = $3_1 + 1 | 0;
  return Math_fround(Math_fround(HEAPF32[($0_1 + 4 | 0) >> 2]));
 }
 
 function $1231($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1232($0_1) {
  $0_1 = $0_1 | 0;
  $37($0_1 | 0);
 }
 
 function $1233($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = HEAP32[$2_1 >> 2] | 0;
  $3_1 = (HEAP32[($3_1 + 252 | 0) >> 2] | 0 | 0) == (4 | 0) ? $3_1 : 0;
  label$1 : {
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$4_1) {
    break label$1
   }
   if ((HEAP32[($4_1 + 252 | 0) >> 2] | 0 | 0) != (4 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($4_1, $2_1, $1_1);
  }
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 28 | 0) >> 2] | 0]($3_1, $1_1, $2_1);
  }
  return 0 | 0;
 }
 
 function $1234($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[$2_1 >> 2] | 0;
  $4_1 = (HEAP32[($4_1 + 252 | 0) >> 2] | 0 | 0) == (4 | 0) ? $4_1 : 0;
  label$1 : {
   $5_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$5_1) {
    break label$1
   }
   if ((HEAP32[($5_1 + 252 | 0) >> 2] | 0 | 0) != (4 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($5_1, $2_1, $3_1, $1_1);
  }
  label$2 : {
   if (!$4_1) {
    break label$2
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 32 | 0) >> 2] | 0]($4_1, $1_1, $3_1, $2_1);
  }
  return 0 | 0;
 }
 
 function $1235($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function legalfunc$fimport$3($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return legalimport$fimport$3($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function legalfunc$wasm2js_scratch_store_i64($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0;
  i64toi32_i32$0 = $0$hi;
  $2_1 = $0_1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  legalimport$wasm2js_scratch_store_i64($2_1 | 0, $8_1 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             legalfunc$wasm2js_scratch_store_i64(var$0 - Math_imul(var$2, var$3) | 0 | 0, i64toi32_i32$1 | 0);
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            legalfunc$wasm2js_scratch_store_i64(i64toi32_i32$3 | i64toi32_i32$0 | 0 | 0, i64toi32_i32$1 | 0);
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        legalfunc$wasm2js_scratch_store_i64($41_1 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      legalfunc$wasm2js_scratch_store_i64(var$4 & var$0 | 0 | 0, i64toi32_i32$2 | 0);
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    legalfunc$wasm2js_scratch_store_i64(var$5 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   legalfunc$wasm2js_scratch_store_i64(var$0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 var FUNCTION_TABLE = [null, $1, $3, $5, $43, $45, $47, $44, $41, $42, $52, $68, $65, $55, $46, $67, $64, $56, $48, $66, $61, $58, $70, $71, $28, $73, $74, $76, $75, $78, $77, $101, $102, $94, $96, $95, $273, $107, $98, $99, $103, $114, $115, $116, $270, $111, $117, $118, $119, $275, $120, $121, $148, $109, $110, $147, $292, $293, $122, $123, $124, $125, $133, $192, $132, $134, $135, $136, $274, $137, $138, $131, $129, $130, $139, $140, $141, $142, $143, $144, $149, $146, $276, $277, $151, $152, $193, $180, $188, $186, $187, $181, $194, $191, $189, $210, $201, $291, $202, $203, $204, $205, $206, $207, $209, $208, $224, $225, $226, $227, $223, $230, $232, $233, $237, $234, $236, $235, $239, $238, $240, $243, $244, $245, $246, $247, $241, $242, $250, $248, $249, $251, $252, $263, $264, $267, $268, $269, $271, $272, $278, $279, $280, $281, $282, $283, $284, $285, $286, $287, $288, $289, $290, $294, $295, $296, $297, $298, $299, $300, $211, $301, $302, $266, $303, $304, $306, $307, $313, $314, $315, $311, $312, $320, $318, $321, $319, $322, $317, $323, $324, $325, $326, $327, $328, $329, $330, $331, $332, $333, $334, $335, $348, $340, $349, $341, $350, $351, $337, $352, $353, $354, $344, $345, $355, $356, $357, $342, $347, $358, $359, $360, $343, $346, $361, $367, $365, $366, $368, $369, $370, $364, $362, $363, $379, $377, $378, $380, $381, $383, $384, $394, $395, $386, $387, $388, $391, $392, $390, $393, $396, $397, $389, $399, $400, $411, $423, $424, $403, $425, $426, $427, $407, $416, $417, $418, $428, $429, $430, $431, $432, $433, $434, $436, $401, $402, $437, $438, $439, $440, $441, $421, $406, $442, $443, $444, $413, $404, $445, $446, $447, $410, $408, $448, $449, $450, $451, $452, $453, $454, $455, $456, $457, $458, $459, $460, $461, $462, $463, $464, $405, $409, $465, $466, $412, $414, $415, $419, $420, $422, $472, $467, $468, $469, $470, $471, $499, $500, $507, $509, $511, $508, $512, $513, $514, $515, $510, $505, $506, $519, $520, $517, $521, $522, $536, $537, $538, $526, $527, $523, $524, $525, $539, $518, $534, $535, $532, $533, $104, $105, $553, $554, $552, $567, $568, $565, $571, $569, $572, $573, $574, $575, $581, $584, $583, $585, $586, $587, $588, $590, $591, $598, $592, $593, $594, $596, $599, $600, $601, $602, $603, $604, $605, $606, $607, $608, $609, $610, $611, $612, $597, $613, $614, $615, $620, $619, $622, $623, $629, $630, $624, $625, $626, $627, $631, $632, $633, $634, $637, $638, $639, $643, $644, $642, $645, $484, $646, $485, $486, $487, $649, $650, $654, $655, $656, $658, $659, $661, $662, $660, $663, $664, $665, $669, $667, $668, $670, $672, $673, $674, $675, $676, $681, $678, $683, $684, $685, $686, $687, $694, $693, $696, $697, $698, $699, $700, $702, $703, $705, $706, $707, $709, $710, $713, $714, $712, $711, $715, $716, $717, $718, $719, $720, $721, $722, $723, $724, $725, $726, $727, $728, $729, $730, $731, $732, $733, $734, $737, $738, $747, $744, $741, $748, $749, $750, $739, $751, $740, $752, $745, $742, $753, $754, $746, $755, $756, $757, $758, $762, $763, $764, $766, $771, $767, $768, $770, $773, $777, $778, $779, $780, $781, $782, $783, $784, $785, $786, $787, $788, $817, $818, $814, $815, $816, $820, $821, $822, $823, $824, $844, $842, $845, $843, $846, $835, $838, $840, $837, $836, $839, $851, $850, $856, $853, $857, $855, $859, $860, $863, $864, $881, $882, $876, $874, $871, $861, $866, $865, $880, $883, $884, $885, $886, $887, $888, $1220, $889, $890, $891, $892, $893, $894, $895, $896, $897, $1224, $898, $899, $900, $873, $901, $902, $903, $904, $875, $905, $906, $907, $908, $909, $910, $917, $918, $920, $921, $931, $932, $934, $942, $943, $973, $938, $948, $949, $950, $951, $940, $941, $937, $945, $946, $944, $967, $968, $969, $970, $971, $974, $935, $952, $953, $954, $955, $965, $964, $960, $956, $947, $939, $962, $933, $966, $936, $975, $976, $977, $978, $979, $980, $981, $982, $983, $984, $985, $986, $988, $989, $990, $991, $997, $998, $1023, $1021, $1005, $1006, $1011, $1012, $1013, $1014, $1017, $1018, $1020, $1022, $1001, $1007, $1008, $1009, $1010, $1024, $1226, $1025, $1213, $1214, $1215, $1216, $1217, $1218, $1219, $1221, $1222, $1223, $1225, $1227, $1228, $1229, $1230, $1231, $1232, $1233, $1234, $1235];
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new global.Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = newHEAP8;
   HEAP8 = new global.Int8Array(newBuffer);
   HEAP16 = new global.Int16Array(newBuffer);
   HEAP32 = new global.Int32Array(newBuffer);
   HEAPU8 = new global.Uint8Array(newBuffer);
   HEAPU16 = new global.Uint16Array(newBuffer);
   HEAPU32 = new global.Uint32Array(newBuffer);
   HEAPF32 = new global.Float32Array(newBuffer);
   HEAPF64 = new global.Float64Array(newBuffer);
   buffer = newBuffer;
   //memory.buffer = newBuffer;
  }
  return oldPages;
 }
 
 return {
  "btGImpactCollisionAlgorithm_RegisterAlgorithm": $1026, 
  "btVector3_create": $1027, 
  "btVector3_setValue": $1028, 
  "btVector3_x": $1029, 
  "btVector3_y": $1030, 
  "btVector3_z": $1031, 
  "btQuaternion_create": $1032, 
  "btQuaternion_setValue": $1033, 
  "btQuaternion_x": $1034, 
  "btQuaternion_y": $1035, 
  "btQuaternion_z": $1036, 
  "btQuaternion_w": $1037, 
  "btTransform_create": $1038, 
  "btTransform_setOrigin": $1039, 
  "btTransform_setRotation": $1040, 
  "btTransform_getOrigin": $1041, 
  "btTransform_getRotation": $1042, 
  "LayaMotionState_create": $1044, 
  "layaMotionState_set_rigidBodyID": $1045, 
  "btCollisionObject_create": $1046, 
  "btCollisionObject_setContactProcessingThreshold": $1047, 
  "btCollisionObject_setActivationState": $1048, 
  "btCollisionObject_forceActivationState": $1049, 
  "btCollisionObject_activate": $1050, 
  "btCollisionObject_isActive": $1051, 
  "btCollisionObject_setRestitution": $1052, 
  "btCollisionObject_setFriction": $1053, 
  "btCollisionObject_setRollingFriction": $1054, 
  "btCollisionObject_getCollisionFlags": $1055, 
  "btCollisionObject_setCollisionFlags": $1056, 
  "btCollisionObject_getWorldTransform": $1057, 
  "btCollisionObject_setCollisionShape": $1058, 
  "btCollisionObject_getCcdMotionThreshold": $1059, 
  "btCollisionObject_setCcdMotionThreshold": $1060, 
  "btCollisionObject_getCcdSweptSphereRadius": $1061, 
  "btCollisionObject_setCcdSweptSphereRadius": $1062, 
  "btCollisionObject_getUserIndex": $1063, 
  "btCollisionObject_setUserIndex": $1064, 
  "btCollisionObject_getActivationState": $1065, 
  "btCollisionObject_setInterpolationAngularVelocity": $1066, 
  "btCollisionObject_setInterpolationLinearVelocity": $1067, 
  "RayResultCallback_hasHit": $1068, 
  "RayResultCallback_set_m_collisionFilterGroup": $1069, 
  "RayResultCallback_set_m_collisionFilterMask": $1070, 
  "RayResultCallback_get_m_closestHitFraction": $1071, 
  "RayResultCallback_set_m_closestHitFraction": $1072, 
  "RayResultCallback_get_m_collisionObject": $1073, 
  "RayResultCallback_set_m_collisionObject": $1074, 
  "ClosestRayResultCallback_create": $1075, 
  "ClosestRayResultCallback_get_m_rayFromWorld": $1076, 
  "ClosestRayResultCallback_set_m_rayFromWorld": $1077, 
  "ClosestRayResultCallback_get_m_rayToWorld": $1078, 
  "ClosestRayResultCallback_set_m_rayToWorld": $1079, 
  "ClosestRayResultCallback_get_m_hitNormalWorld": $1080, 
  "ClosestRayResultCallback_get_m_hitPointWorld": $1081, 
  "tBtCollisionObjectArray_size": $1082, 
  "tBtCollisionObjectArray_at": $1083, 
  "tBtCollisionObjectArray_clear": $1084, 
  "tVector3Array_at": $1085, 
  "tVector3Array_clear": $1086, 
  "tScalarArray_at": $1087, 
  "tScalarArray_clear": $1088, 
  "AllHitsRayResultCallback_create": $1089, 
  "AllHitsRayResultCallback_get_m_rayFromWorld": $1090, 
  "AllHitsRayResultCallback_set_m_rayFromWorld": $1091, 
  "AllHitsRayResultCallback_get_m_rayToWorld": $1092, 
  "AllHitsRayResultCallback_set_m_rayToWorld": $1093, 
  "AllHitsRayResultCallback_get_m_hitPointWorld": $1094, 
  "AllHitsRayResultCallback_get_m_hitNormalWorld": $1095, 
  "AllHitsRayResultCallback_get_m_collisionObjects": $1096, 
  "AllHitsRayResultCallback_get_m_hitFractions": $1097, 
  "btManifoldPoint_get_m_positionWorldOnA": $1098, 
  "btManifoldPoint_get_m_positionWorldOnB": $1099, 
  "btManifoldPoint_get_m_normalWorldOnB": $1100, 
  "btManifoldPoint_getDistance": $1101, 
  "ConvexResultCallback_hasHit": $1102, 
  "ConvexResultCallback_set_m_collisionFilterGroup": $1103, 
  "ConvexResultCallback_set_m_collisionFilterMask": $1104, 
  "ConvexResultCallback_get_m_closestHitFraction": $1105, 
  "ConvexResultCallback_set_m_closestHitFraction": $1106, 
  "ClosestConvexResultCallback_create": $1107, 
  "ClosestConvexResultCallback_get_m_hitNormalWorld": $1108, 
  "ClosestConvexResultCallback_get_m_hitPointWorld": $1109, 
  "ClosestConvexResultCallback_get_m_hitCollisionObject": $1110, 
  "ClosestConvexResultCallback_set_m_hitCollisionObject": $1111, 
  "AllConvexResultCallback_create": $1112, 
  "AllConvexResultCallback_get_m_hitNormalWorld": $1113, 
  "AllConvexResultCallback_get_m_hitPointWorld": $1114, 
  "AllConvexResultCallback_get_m_hitFractions": $1115, 
  "AllConvexResultCallback_get_m_collisionObjects": $1116, 
  "btCollisionShape_getLocalScaling": $1117, 
  "btCollisionShape_setLocalScaling": $1118, 
  "btCollisionShape_calculateLocalInertia": $1119, 
  "btBoxShape_create": $1120, 
  "btCapsuleShape_create": $1121, 
  "btCapsuleShapeX_create": $1122, 
  "btCapsuleShapeZ_create": $1123, 
  "btCylinderShape_create": $1124, 
  "btCylinderShapeX_create": $1125, 
  "btCylinderShapeZ_create": $1126, 
  "btSphereShape_create": $1127, 
  "btConeShape_create": $1128, 
  "btConeShapeX_create": $1129, 
  "btConeShapeZ_create": $1130, 
  "btStaticPlaneShape_create": $1131, 
  "btGImpactShapeInterface_updateBound": $1132, 
  "btGImpactMeshShape_create": $1133, 
  "btCompoundShape_create": $1135, 
  "btCompoundShape_addChildShape": $1136, 
  "btCompoundShape_removeChildShapeByIndex": $1137, 
  "btCompoundShape_getChildShape": $1138, 
  "btCompoundShape_updateChildTransform": $1139, 
  "btTriangleMesh_create": $1140, 
  "btTriangleMesh_addTriangle": $1141, 
  "btDefaultCollisionConfiguration_create": $1142, 
  "btPersistentManifold_getBody0": $1143, 
  "btPersistentManifold_getBody1": $1144, 
  "btPersistentManifold_getNumContacts": $1145, 
  "btPersistentManifold_getContactPoint": $1146, 
  "btDispatcher_getNumManifolds": $1147, 
  "btDispatcher_getManifoldByIndexInternal": $1148, 
  "btCollisionDispatcher_create": $1149, 
  "btOverlappingPairCache_setInternalGhostPairCallback": $1150, 
  "btDbvtBroadphase_create": $1151, 
  "btDbvtBroadphase_getOverlappingPairCache": $1152, 
  "btRigidBodyConstructionInfo_create": $1153, 
  "btRigidBodyConstructionInfo_destroy": $1154, 
  "btRigidBody_create": $1155, 
  "btRigidBody_setCenterOfMassTransform": $1156, 
  "btRigidBody_setSleepingThresholds": $1157, 
  "btRigidBody_getLinearSleepingThreshold": $1158, 
  "btRigidBody_getAngularSleepingThreshold": $1159, 
  "btRigidBody_setDamping": $1160, 
  "btRigidBody_setMassProps": $1161, 
  "btRigidBody_setLinearFactor": $1162, 
  "btRigidBody_applyTorque": $1163, 
  "btRigidBody_applyForce": $1164, 
  "btRigidBody_applyCentralForce": $1165, 
  "btRigidBody_applyTorqueImpulse": $1166, 
  "btRigidBody_applyImpulse": $1167, 
  "btRigidBody_applyCentralImpulse": $1169, 
  "btRigidBody_updateInertiaTensor": $1170, 
  "btRigidBody_getLinearVelocity": $1171, 
  "btRigidBody_getAngularVelocity": $1172, 
  "btRigidBody_setLinearVelocity": $1173, 
  "btRigidBody_setAngularVelocity": $1174, 
  "btRigidBody_setAngularFactor": $1175, 
  "btRigidBody_getGravity": $1176, 
  "btRigidBody_setGravity": $1177, 
  "btRigidBody_getTotalForce": $1178, 
  "btRigidBody_getTotalTorque": $1179, 
  "btRigidBody_getFlags": $1180, 
  "btRigidBody_setFlags": $1181, 
  "btRigidBody_clearForces": $1182, 
  "btSequentialImpulseConstraintSolver_create": $1183, 
  "btCollisionWorld_get_m_useContinuous": $1184, 
  "btCollisionWorld_set_m_useContinuous": $1185, 
  "btCollisionWorld_rayTest": $1186, 
  "btCollisionWorld_getDispatchInfo": $1187, 
  "btCollisionWorld_addCollisionObject": $1188, 
  "btCollisionWorld_removeCollisionObject": $1189, 
  "btCollisionWorld_convexSweepTest": $1190, 
  "btDynamicsWorld_addAction": $1191, 
  "btDynamicsWorld_removeAction": $1192, 
  "btDynamicsWorld_getSolverInfo": $1193, 
  "btDiscreteDynamicsWorld_create": $1194, 
  "btDiscreteDynamicsWorld_setGravity": $1195, 
  "btDiscreteDynamicsWorld_getGravity": $1196, 
  "btDiscreteDynamicsWorld_addRigidBody": $1197, 
  "btDiscreteDynamicsWorld_removeRigidBody": $1198, 
  "btDiscreteDynamicsWorld_stepSimulation": $1199, 
  "btDiscreteDynamicsWorld_clearForces": $1200, 
  "btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution": $1201, 
  "btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution": $1202, 
  "btKinematicCharacterController_create": $1203, 
  "btKinematicCharacterController_setWalkDirection": $1204, 
  "btKinematicCharacterController_setFallSpeed": $1205, 
  "btKinematicCharacterController_setJumpSpeed": $1206, 
  "btKinematicCharacterController_setMaxSlope": $1207, 
  "btKinematicCharacterController_onGround": $1208, 
  "btKinematicCharacterController_jump": $1209, 
  "btKinematicCharacterController_setGravity": $1210, 
  "btPairCachingGhostObject_create": $1211, 
  "btGhostPairCallback_create": $1212
 };
}

var memasmFunc = new ArrayBuffer(initialMemory);
var assignasmFunc = (
    function(mem) {
      var _mem = new Uint8Array(mem);
      return function(offset, s) {
        var bytes, i;
        if (typeof Buffer === 'undefined') {
          bytes = atob(s);
          for (i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes.charCodeAt(i);
        } else {
          bytes = Buffer.from(s, 'base64');
          for (i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes[i];
        }
      }
    }
  )(memasmFunc);
assignasmFunc
assignasmFunc(2848, "BQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAwAAAAwEAAAAAAAAAAAAAAAAAAACAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABsAAAAcAAAAHQAAAB4AAAAK16M8AQAAAG8SgzoBAAAAiAEAAIkBAAAAAABA");
assignasmFunc(3008, "");
var retasmFunc = asmFunc({Math,Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,NaN,Infinity}, {abort:function() { throw new Error('abort'); },fd_close,fd_write,getWorldTransform,setWorldTransform,fd_seek},memasmFunc);
exports.btGImpactCollisionAlgorithm_RegisterAlgorithm = retasmFunc.btGImpactCollisionAlgorithm_RegisterAlgorithm;
exports.btVector3_create = retasmFunc.btVector3_create;
exports.btVector3_setValue = retasmFunc.btVector3_setValue;
exports.btVector3_x = retasmFunc.btVector3_x;
exports.btVector3_y = retasmFunc.btVector3_y;
exports.btVector3_z = retasmFunc.btVector3_z;
exports.btQuaternion_create = retasmFunc.btQuaternion_create;
exports.btQuaternion_setValue = retasmFunc.btQuaternion_setValue;
exports.btQuaternion_x = retasmFunc.btQuaternion_x;
exports.btQuaternion_y = retasmFunc.btQuaternion_y;
exports.btQuaternion_z = retasmFunc.btQuaternion_z;
exports.btQuaternion_w = retasmFunc.btQuaternion_w;
exports.btTransform_create = retasmFunc.btTransform_create;
exports.btTransform_setOrigin = retasmFunc.btTransform_setOrigin;
exports.btTransform_setRotation = retasmFunc.btTransform_setRotation;
exports.btTransform_getOrigin = retasmFunc.btTransform_getOrigin;
exports.btTransform_getRotation = retasmFunc.btTransform_getRotation;
exports.LayaMotionState_create = retasmFunc.LayaMotionState_create;
exports.layaMotionState_set_rigidBodyID = retasmFunc.layaMotionState_set_rigidBodyID;
exports.btCollisionObject_create = retasmFunc.btCollisionObject_create;
exports.btCollisionObject_setContactProcessingThreshold = retasmFunc.btCollisionObject_setContactProcessingThreshold;
exports.btCollisionObject_setActivationState = retasmFunc.btCollisionObject_setActivationState;
exports.btCollisionObject_forceActivationState = retasmFunc.btCollisionObject_forceActivationState;
exports.btCollisionObject_activate = retasmFunc.btCollisionObject_activate;
exports.btCollisionObject_isActive = retasmFunc.btCollisionObject_isActive;
exports.btCollisionObject_setRestitution = retasmFunc.btCollisionObject_setRestitution;
exports.btCollisionObject_setFriction = retasmFunc.btCollisionObject_setFriction;
exports.btCollisionObject_setRollingFriction = retasmFunc.btCollisionObject_setRollingFriction;
exports.btCollisionObject_getCollisionFlags = retasmFunc.btCollisionObject_getCollisionFlags;
exports.btCollisionObject_setCollisionFlags = retasmFunc.btCollisionObject_setCollisionFlags;
exports.btCollisionObject_getWorldTransform = retasmFunc.btCollisionObject_getWorldTransform;
exports.btCollisionObject_setCollisionShape = retasmFunc.btCollisionObject_setCollisionShape;
exports.btCollisionObject_getCcdMotionThreshold = retasmFunc.btCollisionObject_getCcdMotionThreshold;
exports.btCollisionObject_setCcdMotionThreshold = retasmFunc.btCollisionObject_setCcdMotionThreshold;
exports.btCollisionObject_getCcdSweptSphereRadius = retasmFunc.btCollisionObject_getCcdSweptSphereRadius;
exports.btCollisionObject_setCcdSweptSphereRadius = retasmFunc.btCollisionObject_setCcdSweptSphereRadius;
exports.btCollisionObject_getUserIndex = retasmFunc.btCollisionObject_getUserIndex;
exports.btCollisionObject_setUserIndex = retasmFunc.btCollisionObject_setUserIndex;
exports.btCollisionObject_getActivationState = retasmFunc.btCollisionObject_getActivationState;
exports.btCollisionObject_setInterpolationAngularVelocity = retasmFunc.btCollisionObject_setInterpolationAngularVelocity;
exports.btCollisionObject_setInterpolationLinearVelocity = retasmFunc.btCollisionObject_setInterpolationLinearVelocity;
exports.RayResultCallback_hasHit = retasmFunc.RayResultCallback_hasHit;
exports.RayResultCallback_set_m_collisionFilterGroup = retasmFunc.RayResultCallback_set_m_collisionFilterGroup;
exports.RayResultCallback_set_m_collisionFilterMask = retasmFunc.RayResultCallback_set_m_collisionFilterMask;
exports.RayResultCallback_get_m_closestHitFraction = retasmFunc.RayResultCallback_get_m_closestHitFraction;
exports.RayResultCallback_set_m_closestHitFraction = retasmFunc.RayResultCallback_set_m_closestHitFraction;
exports.RayResultCallback_get_m_collisionObject = retasmFunc.RayResultCallback_get_m_collisionObject;
exports.RayResultCallback_set_m_collisionObject = retasmFunc.RayResultCallback_set_m_collisionObject;
exports.ClosestRayResultCallback_create = retasmFunc.ClosestRayResultCallback_create;
exports.ClosestRayResultCallback_get_m_rayFromWorld = retasmFunc.ClosestRayResultCallback_get_m_rayFromWorld;
exports.ClosestRayResultCallback_set_m_rayFromWorld = retasmFunc.ClosestRayResultCallback_set_m_rayFromWorld;
exports.ClosestRayResultCallback_get_m_rayToWorld = retasmFunc.ClosestRayResultCallback_get_m_rayToWorld;
exports.ClosestRayResultCallback_set_m_rayToWorld = retasmFunc.ClosestRayResultCallback_set_m_rayToWorld;
exports.ClosestRayResultCallback_get_m_hitNormalWorld = retasmFunc.ClosestRayResultCallback_get_m_hitNormalWorld;
exports.ClosestRayResultCallback_get_m_hitPointWorld = retasmFunc.ClosestRayResultCallback_get_m_hitPointWorld;
exports.tBtCollisionObjectArray_size = retasmFunc.tBtCollisionObjectArray_size;
exports.tBtCollisionObjectArray_at = retasmFunc.tBtCollisionObjectArray_at;
exports.tBtCollisionObjectArray_clear = retasmFunc.tBtCollisionObjectArray_clear;
exports.tVector3Array_at = retasmFunc.tVector3Array_at;
exports.tVector3Array_clear = retasmFunc.tVector3Array_clear;
exports.tScalarArray_at = retasmFunc.tScalarArray_at;
exports.tScalarArray_clear = retasmFunc.tScalarArray_clear;
exports.AllHitsRayResultCallback_create = retasmFunc.AllHitsRayResultCallback_create;
exports.AllHitsRayResultCallback_get_m_rayFromWorld = retasmFunc.AllHitsRayResultCallback_get_m_rayFromWorld;
exports.AllHitsRayResultCallback_set_m_rayFromWorld = retasmFunc.AllHitsRayResultCallback_set_m_rayFromWorld;
exports.AllHitsRayResultCallback_get_m_rayToWorld = retasmFunc.AllHitsRayResultCallback_get_m_rayToWorld;
exports.AllHitsRayResultCallback_set_m_rayToWorld = retasmFunc.AllHitsRayResultCallback_set_m_rayToWorld;
exports.AllHitsRayResultCallback_get_m_hitPointWorld = retasmFunc.AllHitsRayResultCallback_get_m_hitPointWorld;
exports.AllHitsRayResultCallback_get_m_hitNormalWorld = retasmFunc.AllHitsRayResultCallback_get_m_hitNormalWorld;
exports.AllHitsRayResultCallback_get_m_collisionObjects = retasmFunc.AllHitsRayResultCallback_get_m_collisionObjects;
exports.AllHitsRayResultCallback_get_m_hitFractions = retasmFunc.AllHitsRayResultCallback_get_m_hitFractions;
exports.btManifoldPoint_get_m_positionWorldOnA = retasmFunc.btManifoldPoint_get_m_positionWorldOnA;
exports.btManifoldPoint_get_m_positionWorldOnB = retasmFunc.btManifoldPoint_get_m_positionWorldOnB;
exports.btManifoldPoint_get_m_normalWorldOnB = retasmFunc.btManifoldPoint_get_m_normalWorldOnB;
exports.btManifoldPoint_getDistance = retasmFunc.btManifoldPoint_getDistance;
exports.ConvexResultCallback_hasHit = retasmFunc.ConvexResultCallback_hasHit;
exports.ConvexResultCallback_set_m_collisionFilterGroup = retasmFunc.ConvexResultCallback_set_m_collisionFilterGroup;
exports.ConvexResultCallback_set_m_collisionFilterMask = retasmFunc.ConvexResultCallback_set_m_collisionFilterMask;
exports.ConvexResultCallback_get_m_closestHitFraction = retasmFunc.ConvexResultCallback_get_m_closestHitFraction;
exports.ConvexResultCallback_set_m_closestHitFraction = retasmFunc.ConvexResultCallback_set_m_closestHitFraction;
exports.ClosestConvexResultCallback_create = retasmFunc.ClosestConvexResultCallback_create;
exports.ClosestConvexResultCallback_get_m_hitNormalWorld = retasmFunc.ClosestConvexResultCallback_get_m_hitNormalWorld;
exports.ClosestConvexResultCallback_get_m_hitPointWorld = retasmFunc.ClosestConvexResultCallback_get_m_hitPointWorld;
exports.ClosestConvexResultCallback_get_m_hitCollisionObject = retasmFunc.ClosestConvexResultCallback_get_m_hitCollisionObject;
exports.ClosestConvexResultCallback_set_m_hitCollisionObject = retasmFunc.ClosestConvexResultCallback_set_m_hitCollisionObject;
exports.AllConvexResultCallback_create = retasmFunc.AllConvexResultCallback_create;
exports.AllConvexResultCallback_get_m_hitNormalWorld = retasmFunc.AllConvexResultCallback_get_m_hitNormalWorld;
exports.AllConvexResultCallback_get_m_hitPointWorld = retasmFunc.AllConvexResultCallback_get_m_hitPointWorld;
exports.AllConvexResultCallback_get_m_hitFractions = retasmFunc.AllConvexResultCallback_get_m_hitFractions;
exports.AllConvexResultCallback_get_m_collisionObjects = retasmFunc.AllConvexResultCallback_get_m_collisionObjects;
exports.btCollisionShape_getLocalScaling = retasmFunc.btCollisionShape_getLocalScaling;
exports.btCollisionShape_setLocalScaling = retasmFunc.btCollisionShape_setLocalScaling;
exports.btCollisionShape_calculateLocalInertia = retasmFunc.btCollisionShape_calculateLocalInertia;
exports.btBoxShape_create = retasmFunc.btBoxShape_create;
exports.btCapsuleShape_create = retasmFunc.btCapsuleShape_create;
exports.btCapsuleShapeX_create = retasmFunc.btCapsuleShapeX_create;
exports.btCapsuleShapeZ_create = retasmFunc.btCapsuleShapeZ_create;
exports.btCylinderShape_create = retasmFunc.btCylinderShape_create;
exports.btCylinderShapeX_create = retasmFunc.btCylinderShapeX_create;
exports.btCylinderShapeZ_create = retasmFunc.btCylinderShapeZ_create;
exports.btSphereShape_create = retasmFunc.btSphereShape_create;
exports.btConeShape_create = retasmFunc.btConeShape_create;
exports.btConeShapeX_create = retasmFunc.btConeShapeX_create;
exports.btConeShapeZ_create = retasmFunc.btConeShapeZ_create;
exports.btStaticPlaneShape_create = retasmFunc.btStaticPlaneShape_create;
exports.btGImpactShapeInterface_updateBound = retasmFunc.btGImpactShapeInterface_updateBound;
exports.btGImpactMeshShape_create = retasmFunc.btGImpactMeshShape_create;
exports.btCompoundShape_create = retasmFunc.btCompoundShape_create;
exports.btCompoundShape_addChildShape = retasmFunc.btCompoundShape_addChildShape;
exports.btCompoundShape_removeChildShapeByIndex = retasmFunc.btCompoundShape_removeChildShapeByIndex;
exports.btCompoundShape_getChildShape = retasmFunc.btCompoundShape_getChildShape;
exports.btCompoundShape_updateChildTransform = retasmFunc.btCompoundShape_updateChildTransform;
exports.btTriangleMesh_create = retasmFunc.btTriangleMesh_create;
exports.btTriangleMesh_addTriangle = retasmFunc.btTriangleMesh_addTriangle;
exports.btDefaultCollisionConfiguration_create = retasmFunc.btDefaultCollisionConfiguration_create;
exports.btPersistentManifold_getBody0 = retasmFunc.btPersistentManifold_getBody0;
exports.btPersistentManifold_getBody1 = retasmFunc.btPersistentManifold_getBody1;
exports.btPersistentManifold_getNumContacts = retasmFunc.btPersistentManifold_getNumContacts;
exports.btPersistentManifold_getContactPoint = retasmFunc.btPersistentManifold_getContactPoint;
exports.btDispatcher_getNumManifolds = retasmFunc.btDispatcher_getNumManifolds;
exports.btDispatcher_getManifoldByIndexInternal = retasmFunc.btDispatcher_getManifoldByIndexInternal;
exports.btCollisionDispatcher_create = retasmFunc.btCollisionDispatcher_create;
exports.btOverlappingPairCache_setInternalGhostPairCallback = retasmFunc.btOverlappingPairCache_setInternalGhostPairCallback;
exports.btDbvtBroadphase_create = retasmFunc.btDbvtBroadphase_create;
exports.btDbvtBroadphase_getOverlappingPairCache = retasmFunc.btDbvtBroadphase_getOverlappingPairCache;
exports.btRigidBodyConstructionInfo_create = retasmFunc.btRigidBodyConstructionInfo_create;
exports.btRigidBodyConstructionInfo_destroy = retasmFunc.btRigidBodyConstructionInfo_destroy;
exports.btRigidBody_create = retasmFunc.btRigidBody_create;
exports.btRigidBody_setCenterOfMassTransform = retasmFunc.btRigidBody_setCenterOfMassTransform;
exports.btRigidBody_setSleepingThresholds = retasmFunc.btRigidBody_setSleepingThresholds;
exports.btRigidBody_getLinearSleepingThreshold = retasmFunc.btRigidBody_getLinearSleepingThreshold;
exports.btRigidBody_getAngularSleepingThreshold = retasmFunc.btRigidBody_getAngularSleepingThreshold;
exports.btRigidBody_setDamping = retasmFunc.btRigidBody_setDamping;
exports.btRigidBody_setMassProps = retasmFunc.btRigidBody_setMassProps;
exports.btRigidBody_setLinearFactor = retasmFunc.btRigidBody_setLinearFactor;
exports.btRigidBody_applyTorque = retasmFunc.btRigidBody_applyTorque;
exports.btRigidBody_applyForce = retasmFunc.btRigidBody_applyForce;
exports.btRigidBody_applyCentralForce = retasmFunc.btRigidBody_applyCentralForce;
exports.btRigidBody_applyTorqueImpulse = retasmFunc.btRigidBody_applyTorqueImpulse;
exports.btRigidBody_applyImpulse = retasmFunc.btRigidBody_applyImpulse;
exports.btRigidBody_applyCentralImpulse = retasmFunc.btRigidBody_applyCentralImpulse;
exports.btRigidBody_updateInertiaTensor = retasmFunc.btRigidBody_updateInertiaTensor;
exports.btRigidBody_getLinearVelocity = retasmFunc.btRigidBody_getLinearVelocity;
exports.btRigidBody_getAngularVelocity = retasmFunc.btRigidBody_getAngularVelocity;
exports.btRigidBody_setLinearVelocity = retasmFunc.btRigidBody_setLinearVelocity;
exports.btRigidBody_setAngularVelocity = retasmFunc.btRigidBody_setAngularVelocity;
exports.btRigidBody_setAngularFactor = retasmFunc.btRigidBody_setAngularFactor;
exports.btRigidBody_getGravity = retasmFunc.btRigidBody_getGravity;
exports.btRigidBody_setGravity = retasmFunc.btRigidBody_setGravity;
exports.btRigidBody_getTotalForce = retasmFunc.btRigidBody_getTotalForce;
exports.btRigidBody_getTotalTorque = retasmFunc.btRigidBody_getTotalTorque;
exports.btRigidBody_getFlags = retasmFunc.btRigidBody_getFlags;
exports.btRigidBody_setFlags = retasmFunc.btRigidBody_setFlags;
exports.btRigidBody_clearForces = retasmFunc.btRigidBody_clearForces;
exports.btSequentialImpulseConstraintSolver_create = retasmFunc.btSequentialImpulseConstraintSolver_create;
exports.btCollisionWorld_get_m_useContinuous = retasmFunc.btCollisionWorld_get_m_useContinuous;
exports.btCollisionWorld_set_m_useContinuous = retasmFunc.btCollisionWorld_set_m_useContinuous;
exports.btCollisionWorld_rayTest = retasmFunc.btCollisionWorld_rayTest;
exports.btCollisionWorld_getDispatchInfo = retasmFunc.btCollisionWorld_getDispatchInfo;
exports.btCollisionWorld_addCollisionObject = retasmFunc.btCollisionWorld_addCollisionObject;
exports.btCollisionWorld_removeCollisionObject = retasmFunc.btCollisionWorld_removeCollisionObject;
exports.btCollisionWorld_convexSweepTest = retasmFunc.btCollisionWorld_convexSweepTest;
exports.btDynamicsWorld_addAction = retasmFunc.btDynamicsWorld_addAction;
exports.btDynamicsWorld_removeAction = retasmFunc.btDynamicsWorld_removeAction;
exports.btDynamicsWorld_getSolverInfo = retasmFunc.btDynamicsWorld_getSolverInfo;
exports.btDiscreteDynamicsWorld_create = retasmFunc.btDiscreteDynamicsWorld_create;
exports.btDiscreteDynamicsWorld_setGravity = retasmFunc.btDiscreteDynamicsWorld_setGravity;
exports.btDiscreteDynamicsWorld_getGravity = retasmFunc.btDiscreteDynamicsWorld_getGravity;
exports.btDiscreteDynamicsWorld_addRigidBody = retasmFunc.btDiscreteDynamicsWorld_addRigidBody;
exports.btDiscreteDynamicsWorld_removeRigidBody = retasmFunc.btDiscreteDynamicsWorld_removeRigidBody;
exports.btDiscreteDynamicsWorld_stepSimulation = retasmFunc.btDiscreteDynamicsWorld_stepSimulation;
exports.btDiscreteDynamicsWorld_clearForces = retasmFunc.btDiscreteDynamicsWorld_clearForces;
exports.btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution = retasmFunc.btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution;
exports.btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution = retasmFunc.btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution;
exports.btKinematicCharacterController_create = retasmFunc.btKinematicCharacterController_create;
exports.btKinematicCharacterController_setWalkDirection = retasmFunc.btKinematicCharacterController_setWalkDirection;
exports.btKinematicCharacterController_setFallSpeed = retasmFunc.btKinematicCharacterController_setFallSpeed;
exports.btKinematicCharacterController_setJumpSpeed = retasmFunc.btKinematicCharacterController_setJumpSpeed;
exports.btKinematicCharacterController_setMaxSlope = retasmFunc.btKinematicCharacterController_setMaxSlope;
exports.btKinematicCharacterController_onGround = retasmFunc.btKinematicCharacterController_onGround;
exports.btKinematicCharacterController_jump = retasmFunc.btKinematicCharacterController_jump;
exports.btKinematicCharacterController_setGravity = retasmFunc.btKinematicCharacterController_setGravity;
exports.btPairCachingGhostObject_create = retasmFunc.btPairCachingGhostObject_create;
exports.btGhostPairCallback_create = retasmFunc.btGhostPairCallback_create;
}
var physics3D=window.Physics3D={};
physics3D.then=(completeFun)=>{
  completeFun(physics3D);
}
init(pages*64*1024,interactive,physics3D);
return physics3D;
}
