window.Physics3D = function (pages, interactive) {
  function init(initialMemory,interactive,exports){
  var getWorldTransform=interactive.getWorldTransform;
  var setWorldTransform=interactive.setWorldTransform;
  var fd_close=() => { console.log('fd_close')};
  var fd_write=() => { console.log('fd_write')};
  var fd_seek=() => { console.log('fd_seek')};

  var scratchBuffer = new ArrayBuffer(8);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function legalimport$wasm2js_scratch_store_i64(low, high) {
    i32ScratchView[0] = low;
    i32ScratchView[1] = high;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[0];
  }
      
function asmFunc(global, env, buffer) {
 var memory = env.memory;
 var HEAP8 = new global.Int8Array(buffer);
 var HEAP16 = new global.Int16Array(buffer);
 var HEAP32 = new global.Int32Array(buffer);
 var HEAPU8 = new global.Uint8Array(buffer);
 var HEAPU16 = new global.Uint16Array(buffer);
 var HEAPU32 = new global.Uint32Array(buffer);
 var HEAPF32 = new global.Float32Array(buffer);
 var HEAPF64 = new global.Float64Array(buffer);
 var Math_imul = global.Math.imul;
 var Math_fround = global.Math.fround;
 var Math_abs = global.Math.abs;
 var Math_clz32 = global.Math.clz32;
 var Math_min = global.Math.min;
 var Math_max = global.Math.max;
 var Math_floor = global.Math.floor;
 var Math_ceil = global.Math.ceil;
 var Math_sqrt = global.Math.sqrt;
 var abort = env.abort;
 var nan = global.NaN;
 var infinity = global.Infinity;
 var __wasi_fd_close = env.fd_close;
 var __wasi_fd_write = env.fd_write;
 var layaMotionStateGetWorldTransform = env.getWorldTransform;
 var layaMotionStateSetWorldTransform = env.setWorldTransform;
 var legalimport$__wasi_fd_seek = env.fd_seek;
 var global$0 = 90416;
 var i64toi32_i32$HIGH_BITS = 0;
 function __stdio_close($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $0 = __wasi_fd_close(HEAP32[$0 + 56 >> 2]) | 0;
  $1 = 0;
  __inlined_func$close : {
   if (!$0) {
    break __inlined_func$close
   }
   HEAP32[256] = $0;
   $1 = -1;
  }
  return $1 | 0;
 }
 
 function writev($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4 = -1;
  label$1 : {
   if (($2 | 0) <= -1) {
    HEAP32[256] = 28;
    break label$1;
   }
   $2 = __wasi_fd_write($0 | 0, $1 | 0, $2 | 0, $3 + 12 | 0) | 0;
   if ($2) {
    HEAP32[256] = $2;
    break label$1;
   }
   $4 = HEAP32[$3 + 12 >> 2];
  }
  global$0 = $3 + 16 | 0;
  return $4;
 }
 
 function __stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = global$0 - 16 | 0;
  global$0 = $4;
  HEAP32[$4 + 12 >> 2] = $2;
  HEAP32[$4 + 8 >> 2] = $1;
  $1 = HEAP32[$0 + 24 >> 2];
  HEAP32[$4 >> 2] = $1;
  $1 = HEAP32[$0 + 20 >> 2] - $1 | 0;
  HEAP32[$4 + 4 >> 2] = $1;
  $7 = 2;
  $8 = $1 + $2 | 0;
  $3 = writev(HEAP32[$0 + 56 >> 2], $4, 2);
  label$1 : {
   if (($8 | 0) != ($3 | 0)) {
    $1 = $4;
    while (1) {
     if (($3 | 0) <= -1) {
      HEAP32[$0 + 24 >> 2] = 0;
      HEAP32[$0 + 16 >> 2] = 0;
      HEAP32[$0 + 20 >> 2] = 0;
      HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32;
      $3 = 0;
      if (($7 | 0) == 2) {
       break label$1
      }
      $3 = $2 - HEAP32[$1 + 4 >> 2] | 0;
      break label$1;
     }
     $5 = HEAP32[$1 + 4 >> 2];
     $6 = $3 >>> 0 > $5 >>> 0;
     $1 = $6 ? $1 + 8 | 0 : $1;
     $5 = $3 - ($6 ? $5 : 0) | 0;
     HEAP32[$1 >> 2] = $5 + HEAP32[$1 >> 2];
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] - $5;
     $8 = $8 - $3 | 0;
     $7 = $7 - $6 | 0;
     $6 = writev(HEAP32[$0 + 56 >> 2], $1, $7);
     $3 = $6;
     if (($3 | 0) != ($8 | 0)) {
      continue
     }
     break;
    };
   }
   $1 = HEAP32[$0 + 40 >> 2];
   HEAP32[$0 + 24 >> 2] = $1;
   HEAP32[$0 + 20 >> 2] = $1;
   HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 44 >> 2] + $1;
   $3 = $2;
  }
  global$0 = $4 + 16 | 0;
  return $3 | 0;
 }
 
 function lseek($0, $1, $2, $3) {
  var $4 = 0;
  $4 = global$0 - 16 | 0;
  global$0 = $4;
  $0 = legalfunc$__wasi_fd_seek($0, $1, $2, $3 & 255, $4 + 8 | 0);
  label$1 : {
   if ($0) {
    HEAP32[256] = ($0 | 0) == 76 ? 70 : $0;
    $2 = -1;
    $1 = -1;
    break label$1;
   }
   $2 = HEAP32[$4 + 12 >> 2];
   $1 = HEAP32[$4 + 8 >> 2];
  }
  global$0 = $4 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $2;
  return $1;
 }
 
 function __stdio_seek($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $2 = lseek(HEAP32[$0 + 56 >> 2], $1, $2, $3);
  return $2 | 0;
 }
 
 function __towrite($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 60 >> 2];
  HEAP32[$0 + 60 >> 2] = $1 + -1 | $1;
  $1 = HEAP32[$0 >> 2];
  if ($1 & 8) {
   HEAP32[$0 >> 2] = $1 | 32;
   return -1;
  }
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  $1 = HEAP32[$0 + 40 >> 2];
  HEAP32[$0 + 24 >> 2] = $1;
  HEAP32[$0 + 20 >> 2] = $1;
  HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 44 >> 2] + $1;
  return 0;
 }
 
 function memcpy($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  label$1 : {
   label$2 : {
    if (!$2) {
     break label$2
    }
    if (!($1 & 3)) {
     break label$2
    }
    while (1) {
     HEAP8[$0 | 0] = HEAPU8[$1 | 0];
     $3 = $2 + -1 | 0;
     $0 = $0 + 1 | 0;
     $1 = $1 + 1 | 0;
     if (($2 | 0) == 1) {
      break label$1
     }
     $2 = $3;
     if ($1 & 3) {
      continue
     }
     break;
    };
    break label$1;
   }
   $3 = $2;
  }
  $2 = $0 & 3;
  label$4 : {
   if (!$2) {
    label$6 : {
     if ($3 >>> 0 < 16) {
      $2 = $3;
      break label$6;
     }
     $2 = $3 + -16 | 0;
     while (1) {
      HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
      HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
      HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
      $0 = $0 + 16 | 0;
      $1 = $1 + 16 | 0;
      $3 = $3 + -16 | 0;
      if ($3 >>> 0 > 15) {
       continue
      }
      break;
     };
    }
    if ($2 & 8) {
     $3 = HEAP32[$1 + 4 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$0 + 4 >> 2] = $3;
     $1 = $1 + 8 | 0;
     $0 = $0 + 8 | 0;
    }
    if ($2 & 4) {
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     $1 = $1 + 4 | 0;
     $0 = $0 + 4 | 0;
    }
    if ($2 & 2) {
     HEAP8[$0 | 0] = HEAPU8[$1 | 0];
     HEAP8[$0 + 1 | 0] = HEAPU8[$1 + 1 | 0];
     $1 = $1 + 2 | 0;
     $0 = $0 + 2 | 0;
    }
    if (!($2 & 1)) {
     break label$4
    }
    HEAP8[$0 | 0] = HEAPU8[$1 | 0];
    return;
   }
   label$12 : {
    if ($3 >>> 0 < 32) {
     break label$12
    }
    $2 = $2 + -1 | 0;
    if ($2 >>> 0 > 2) {
     break label$12
    }
    label$13 : {
     switch ($2 - 1 | 0) {
     default:
      HEAP8[$0 + 1 | 0] = HEAPU8[$1 + 1 | 0];
      $4 = HEAP32[$1 >> 2];
      HEAP8[$0 | 0] = $4;
      HEAP8[$0 + 2 | 0] = HEAPU8[$1 + 2 | 0];
      $7 = $3 + -3 | 0;
      $8 = $0 + 3 | 0;
      $9 = $3 + -20 & -16;
      $2 = 0;
      while (1) {
       $0 = $2 + $8 | 0;
       $6 = $1 + $2 | 0;
       $5 = HEAP32[$6 + 4 >> 2];
       HEAP32[$0 >> 2] = $5 << 8 | $4 >>> 24;
       $4 = HEAP32[$6 + 8 >> 2];
       HEAP32[$0 + 4 >> 2] = $4 << 8 | $5 >>> 24;
       $5 = HEAP32[$6 + 12 >> 2];
       HEAP32[$0 + 8 >> 2] = $5 << 8 | $4 >>> 24;
       $4 = HEAP32[$6 + 16 >> 2];
       HEAP32[$0 + 12 >> 2] = $4 << 8 | $5 >>> 24;
       $2 = $2 + 16 | 0;
       $7 = $7 + -16 | 0;
       if ($7 >>> 0 > 16) {
        continue
       }
       break;
      };
      $0 = $2 + $8 | 0;
      $1 = ($1 + $2 | 0) + 3 | 0;
      $3 = ($3 - $9 | 0) + -19 | 0;
      break label$12;
     case 0:
      $4 = HEAP32[$1 >> 2];
      HEAP8[$0 | 0] = $4;
      HEAP8[$0 + 1 | 0] = HEAPU8[$1 + 1 | 0];
      $7 = $3 + -2 | 0;
      $8 = $0 + 2 | 0;
      $9 = $3 + -20 & -16;
      $2 = 0;
      while (1) {
       $0 = $2 + $8 | 0;
       $6 = $1 + $2 | 0;
       $5 = HEAP32[$6 + 4 >> 2];
       HEAP32[$0 >> 2] = $5 << 16 | $4 >>> 16;
       $4 = HEAP32[$6 + 8 >> 2];
       HEAP32[$0 + 4 >> 2] = $4 << 16 | $5 >>> 16;
       $5 = HEAP32[$6 + 12 >> 2];
       HEAP32[$0 + 8 >> 2] = $5 << 16 | $4 >>> 16;
       $4 = HEAP32[$6 + 16 >> 2];
       HEAP32[$0 + 12 >> 2] = $4 << 16 | $5 >>> 16;
       $2 = $2 + 16 | 0;
       $7 = $7 + -16 | 0;
       if ($7 >>> 0 > 17) {
        continue
       }
       break;
      };
      $0 = $2 + $8 | 0;
      $1 = ($1 + $2 | 0) + 2 | 0;
      $3 = ($3 - $9 | 0) + -18 | 0;
      break label$12;
     case 1:
      break label$13;
     };
    }
    $4 = HEAP32[$1 >> 2];
    HEAP8[$0 | 0] = $4;
    $7 = $3 + -1 | 0;
    $8 = $0 + 1 | 0;
    $9 = $3 + -20 & -16;
    $2 = 0;
    while (1) {
     $0 = $2 + $8 | 0;
     $6 = $1 + $2 | 0;
     $5 = HEAP32[$6 + 4 >> 2];
     HEAP32[$0 >> 2] = $5 << 24 | $4 >>> 8;
     $4 = HEAP32[$6 + 8 >> 2];
     HEAP32[$0 + 4 >> 2] = $4 << 24 | $5 >>> 8;
     $5 = HEAP32[$6 + 12 >> 2];
     HEAP32[$0 + 8 >> 2] = $5 << 24 | $4 >>> 8;
     $4 = HEAP32[$6 + 16 >> 2];
     HEAP32[$0 + 12 >> 2] = $4 << 24 | $5 >>> 8;
     $2 = $2 + 16 | 0;
     $7 = $7 + -16 | 0;
     if ($7 >>> 0 > 18) {
      continue
     }
     break;
    };
    $0 = $2 + $8 | 0;
    $1 = ($1 + $2 | 0) + 1 | 0;
    $3 = ($3 - $9 | 0) + -17 | 0;
   }
   if ($3 & 16) {
    $2 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8;
    HEAP8[$0 | 0] = $2;
    HEAP8[$0 + 1 | 0] = $2 >>> 8;
    HEAP8[$0 + 2 | 0] = HEAPU8[$1 + 2 | 0];
    HEAP8[$0 + 3 | 0] = HEAPU8[$1 + 3 | 0];
    HEAP8[$0 + 4 | 0] = HEAPU8[$1 + 4 | 0];
    HEAP8[$0 + 5 | 0] = HEAPU8[$1 + 5 | 0];
    HEAP8[$0 + 6 | 0] = HEAPU8[$1 + 6 | 0];
    HEAP8[$0 + 7 | 0] = HEAPU8[$1 + 7 | 0];
    HEAP8[$0 + 8 | 0] = HEAPU8[$1 + 8 | 0];
    HEAP8[$0 + 9 | 0] = HEAPU8[$1 + 9 | 0];
    HEAP8[$0 + 10 | 0] = HEAPU8[$1 + 10 | 0];
    HEAP8[$0 + 11 | 0] = HEAPU8[$1 + 11 | 0];
    HEAP8[$0 + 12 | 0] = HEAPU8[$1 + 12 | 0];
    HEAP8[$0 + 13 | 0] = HEAPU8[$1 + 13 | 0];
    HEAP8[$0 + 14 | 0] = HEAPU8[$1 + 14 | 0];
    HEAP8[$0 + 15 | 0] = HEAPU8[$1 + 15 | 0];
    $1 = $1 + 16 | 0;
    $0 = $0 + 16 | 0;
   }
   if ($3 & 8) {
    HEAP8[$0 | 0] = HEAPU8[$1 | 0];
    HEAP8[$0 + 1 | 0] = HEAPU8[$1 + 1 | 0];
    HEAP8[$0 + 2 | 0] = HEAPU8[$1 + 2 | 0];
    HEAP8[$0 + 3 | 0] = HEAPU8[$1 + 3 | 0];
    HEAP8[$0 + 4 | 0] = HEAPU8[$1 + 4 | 0];
    HEAP8[$0 + 5 | 0] = HEAPU8[$1 + 5 | 0];
    HEAP8[$0 + 6 | 0] = HEAPU8[$1 + 6 | 0];
    HEAP8[$0 + 7 | 0] = HEAPU8[$1 + 7 | 0];
    $1 = $1 + 8 | 0;
    $0 = $0 + 8 | 0;
   }
   if ($3 & 4) {
    HEAP8[$0 | 0] = HEAPU8[$1 | 0];
    HEAP8[$0 + 1 | 0] = HEAPU8[$1 + 1 | 0];
    HEAP8[$0 + 2 | 0] = HEAPU8[$1 + 2 | 0];
    HEAP8[$0 + 3 | 0] = HEAPU8[$1 + 3 | 0];
    $1 = $1 + 4 | 0;
    $0 = $0 + 4 | 0;
   }
   if ($3 & 2) {
    HEAP8[$0 | 0] = HEAPU8[$1 | 0];
    HEAP8[$0 + 1 | 0] = HEAPU8[$1 + 1 | 0];
    $1 = $1 + 2 | 0;
    $0 = $0 + 2 | 0;
   }
   if (!($3 & 1)) {
    break label$4
   }
   HEAP8[$0 | 0] = HEAPU8[$1 | 0];
  }
 }
 
 function __fwritex($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $3 = HEAP32[$2 + 16 >> 2];
  label$1 : {
   if (!$3) {
    if (__towrite($2)) {
     break label$1
    }
    $3 = HEAP32[$2 + 16 >> 2];
   }
   $5 = HEAP32[$2 + 20 >> 2];
   if ($3 - $5 >>> 0 < $1 >>> 0) {
    return FUNCTION_TABLE[HEAP32[$2 + 32 >> 2]]($2, $0, $1) | 0
   }
   label$4 : {
    if (HEAP32[$2 + 64 >> 2] < 0) {
     break label$4
    }
    $4 = $0;
    $3 = 0;
    while (1) {
     if (($1 | 0) == ($3 | 0)) {
      break label$4
     }
     $3 = $3 + 1 | 0;
     $8 = $1 + $4 | 0;
     $7 = $4 + -1 | 0;
     $4 = $7;
     if (HEAPU8[$8 + -1 | 0] != 10) {
      continue
     }
     break;
    };
    $6 = ($1 - $3 | 0) + 1 | 0;
    $4 = FUNCTION_TABLE[HEAP32[$2 + 32 >> 2]]($2, $0, $6) | 0;
    if ($4 >>> 0 < $6 >>> 0) {
     break label$1
    }
    $0 = ($1 + $7 | 0) + 1 | 0;
    $5 = HEAP32[$2 + 20 >> 2];
    $1 = $3 + -1 | 0;
   }
   memcpy($5, $0, $1);
   HEAP32[$2 + 20 >> 2] = $1 + HEAP32[$2 + 20 >> 2];
   $4 = $1 + $6 | 0;
  }
  return $4;
 }
 
 function strerror($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  if (!HEAP32[265]) {
   HEAP32[265] = 1036
  }
  label$2 : {
   label$3 : {
    while (1) {
     if (HEAPU8[$1 + 3024 | 0] != ($0 | 0)) {
      $2 = 77;
      $1 = $1 + 1 | 0;
      if (($1 | 0) != 77) {
       continue
      }
      break label$3;
     }
     break;
    };
    $2 = $1;
    if ($1) {
     break label$3
    }
    $3 = 3104;
    break label$2;
   }
   $1 = 3104;
   while (1) {
    $0 = HEAPU8[$1 | 0];
    $3 = $1 + 1 | 0;
    $1 = $3;
    if ($0) {
     continue
    }
    $1 = $3;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  return $3;
 }
 
 function memchr($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = ($1 | 0) != 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1) {
      $2 = $1;
      break label$3;
     }
     if (!($0 & 3)) {
      $2 = $1;
      break label$3;
     }
     while (1) {
      if (!HEAPU8[$0 | 0]) {
       $2 = $1;
       break label$2;
      }
      $3 = ($1 | 0) != 1;
      $2 = $1 + -1 | 0;
      $0 = $0 + 1 | 0;
      if (($1 | 0) == 1) {
       break label$3
      }
      $1 = $2;
      if ($0 & 3) {
       continue
      }
      break;
     };
    }
    if (!$3) {
     break label$1
    }
   }
   label$8 : {
    if (!HEAPU8[$0 | 0]) {
     break label$8
    }
    if ($2 >>> 0 < 4) {
     break label$8
    }
    while (1) {
     $1 = HEAP32[$0 >> 2];
     if (($1 ^ -1) & $1 + -16843009 & -2139062144) {
      break label$8
     }
     $0 = $0 + 4 | 0;
     $2 = $2 + -4 | 0;
     if ($2 >>> 0 > 3) {
      continue
     }
     break;
    };
   }
   if (!$2) {
    break label$1
   }
   while (1) {
    if (!HEAPU8[$0 | 0]) {
     return $0
    }
    $0 = $0 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  return 0;
 }
 
 function wcrtomb($0, $1) {
  if ($0) {
   if ($1 >>> 0 <= 127) {
    HEAP8[$0 | 0] = $1;
    return 1;
   }
   label$3 : {
    if (!HEAP32[259]) {
     if (($1 & -128) != 57216) {
      HEAP32[256] = 25;
      break label$3;
     }
     HEAP8[$0 | 0] = $1;
     return 1;
    }
    if ($1 >>> 0 <= 2047) {
     HEAP8[$0 + 1 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 6 | 192;
     return 2;
    }
    if (!(($1 & -8192) != 57344 ? $1 >>> 0 >= 55296 : 0)) {
     HEAP8[$0 + 2 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 12 | 224;
     HEAP8[$0 + 1 | 0] = $1 >>> 6 & 63 | 128;
     return 3;
    }
    if ($1 + -65536 >>> 0 <= 1048575) {
     HEAP8[$0 + 3 | 0] = $1 & 63 | 128;
     HEAP8[$0 | 0] = $1 >>> 18 | 240;
     HEAP8[$0 + 2 | 0] = $1 >>> 6 & 63 | 128;
     HEAP8[$0 + 1 | 0] = $1 >>> 12 & 63 | 128;
     return 4;
    }
    HEAP32[256] = 25;
   }
   $0 = -1;
  } else {
   $0 = 1
  }
  return $0;
 }
 
 function wctomb($0, $1) {
  if (!$0) {
   return 0
  }
  return wcrtomb($0, $1);
 }
 
 function memset($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   HEAP8[$0 | 0] = $1;
   $3 = $0 + $2 | 0;
   HEAP8[$3 + -1 | 0] = $1;
   if ($2 >>> 0 < 3) {
    break label$1
   }
   HEAP8[$0 + 2 | 0] = $1;
   HEAP8[$0 + 1 | 0] = $1;
   HEAP8[$3 + -3 | 0] = $1;
   HEAP8[$3 + -2 | 0] = $1;
   if ($2 >>> 0 < 7) {
    break label$1
   }
   HEAP8[$0 + 3 | 0] = $1;
   HEAP8[$3 + -4 | 0] = $1;
   if ($2 >>> 0 < 9) {
    break label$1
   }
   $4 = 0 - $0 & 3;
   $3 = $4 + $0 | 0;
   $1 = Math_imul($1 & 255, 16843009);
   HEAP32[$3 >> 2] = $1;
   $4 = $2 - $4 & -4;
   $2 = $4 + $3 | 0;
   HEAP32[$2 + -4 >> 2] = $1;
   if ($4 >>> 0 < 9) {
    break label$1
   }
   HEAP32[$3 + 8 >> 2] = $1;
   HEAP32[$3 + 4 >> 2] = $1;
   HEAP32[$2 + -8 >> 2] = $1;
   HEAP32[$2 + -12 >> 2] = $1;
   if ($4 >>> 0 < 25) {
    break label$1
   }
   HEAP32[$3 + 24 >> 2] = $1;
   HEAP32[$3 + 20 >> 2] = $1;
   HEAP32[$3 + 16 >> 2] = $1;
   HEAP32[$3 + 12 >> 2] = $1;
   HEAP32[$2 + -16 >> 2] = $1;
   HEAP32[$2 + -20 >> 2] = $1;
   HEAP32[$2 + -24 >> 2] = $1;
   HEAP32[$2 + -28 >> 2] = $1;
   $9 = $3 & 4 | 24;
   $2 = $4 - $9 | 0;
   if ($2 >>> 0 < 32) {
    break label$1
   }
   $4 = 0;
   $6 = $1;
   $7 = 32;
   $8 = $7 & 31;
   if (32 <= ($7 & 63) >>> 0) {
    $7 = $1 << $8;
    $1 = 0;
   } else {
    $7 = (1 << $8) - 1 & $1 >>> 32 - $8 | $5 << $8;
    $1 = $1 << $8;
   }
   $6 = $1 | $6;
   $4 = $4 | $7;
   $1 = $3 + $9 | 0;
   while (1) {
    HEAP32[$1 >> 2] = $6;
    HEAP32[$1 + 4 >> 2] = $4;
    $5 = $1 + 24 | 0;
    HEAP32[$5 >> 2] = $6;
    HEAP32[$5 + 4 >> 2] = $4;
    $5 = $1 + 16 | 0;
    HEAP32[$5 >> 2] = $6;
    HEAP32[$5 + 4 >> 2] = $4;
    $5 = $1 + 8 | 0;
    HEAP32[$5 >> 2] = $6;
    HEAP32[$5 + 4 >> 2] = $4;
    $1 = $1 + 32 | 0;
    $2 = $2 + -32 | 0;
    if ($2 >>> 0 > 31) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function frexp($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  wasm2js_scratch_store_f64(+$0);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  $4 = wasm2js_scratch_load_i32(0) | 0;
  $2 = $4;
  $6 = $3;
  $7 = $2;
  $5 = 52;
  $2 = $5 & 31;
  if (32 <= $5 >>> 0) {
   $2 = $3 >>> $2
  } else {
   $2 = ((1 << $2) - 1 & $3) << 32 - $2 | $7 >>> $2
  }
  $3 = $2 & 2047;
  if (($3 | 0) != 2047) {
   if (!$3) {
    if ($0 == 0.0) {
     HEAP32[$1 >> 2] = 0;
     return $0;
    }
    $0 = frexp($0 * 18446744073709551615.0, $1);
    HEAP32[$1 >> 2] = HEAP32[$1 >> 2] + -64;
    return $0;
   }
   HEAP32[$1 >> 2] = $3 + -1022;
   wasm2js_scratch_store_i32(0, $4 | 0);
   wasm2js_scratch_store_i32(1, $6 & -2146435073 | 1071644672);
   $0 = +wasm2js_scratch_load_f64();
  }
  return $0;
 }
 
 function strlen() {
  var $0 = 0, $1 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $0 = 5168;
     if (!($0 & 3)) {
      break label$3
     }
     if (!HEAPU8[5168]) {
      return 0
     }
     $0 = 5169;
     while (1) {
      if (!($0 & 3)) {
       break label$3
      }
      $1 = HEAPU8[$0 | 0];
      $2 = $0 + 1 | 0;
      $0 = $2;
      if ($1) {
       continue
      }
      break;
     };
     break label$2;
    }
    $0 = $0 + -4 | 0;
    while (1) {
     $0 = $0 + 4 | 0;
     $1 = HEAP32[$0 >> 2];
     if (!(($1 ^ -1) & $1 + -16843009 & -2139062144)) {
      continue
     }
     break;
    };
    if (!($1 & 255)) {
     return $0 - 5168 | 0
    }
    while (1) {
     $1 = HEAPU8[$0 + 1 | 0];
     $2 = $0 + 1 | 0;
     $0 = $2;
     if ($1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $2 = $2 + -1 | 0;
  }
  return $2 - 5168 | 0;
 }
 
 function fputs() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
  $0 = strlen();
  $3 = $0;
  $2 = __fwritex(5168, $0, 2848);
  $1 = $0;
  __inlined_func$fwrite : {
   if (($0 | 0) == ($2 | 0)) {
    break __inlined_func$fwrite
   }
   $1 = $2;
  }
 }
 
 function vfprintf($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 208 | 0;
  global$0 = $3;
  HEAP32[$3 + 204 >> 2] = $2;
  $4 = $3 + 192 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 184 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 176 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$3 + 168 >> 2] = 0;
  HEAP32[$3 + 172 >> 2] = 0;
  HEAP32[$3 + 160 >> 2] = 0;
  HEAP32[$3 + 164 >> 2] = 0;
  HEAP32[$3 + 200 >> 2] = $2;
  if ((printf_core(0, $1, $3 + 200 | 0, $3 + 80 | 0, $3 + 160 | 0) | 0) >= 0) {
   $5 = HEAP32[$0 >> 2];
   if (HEAP32[$0 + 60 >> 2] <= 0) {
    HEAP32[$0 >> 2] = $5 & -33
   }
   label$4 : {
    label$5 : {
     label$6 : {
      if (!HEAP32[$0 + 44 >> 2]) {
       HEAP32[$0 + 44 >> 2] = 80;
       HEAP32[$0 + 24 >> 2] = 0;
       HEAP32[$0 + 16 >> 2] = 0;
       HEAP32[$0 + 20 >> 2] = 0;
       $4 = HEAP32[$0 + 40 >> 2];
       HEAP32[$0 + 40 >> 2] = $3;
       break label$6;
      }
      $4 = 0;
      if (HEAP32[$0 + 16 >> 2]) {
       break label$5
      }
     }
     $2 = -1;
     if (__towrite($0)) {
      break label$4
     }
    }
    $2 = printf_core($0, $1, $3 + 200 | 0, $3 + 80 | 0, $3 + 160 | 0);
   }
   $1 = $5 & 32;
   if ($4) {
    FUNCTION_TABLE[HEAP32[$0 + 32 >> 2]]($0, 0, 0) | 0;
    HEAP32[$0 + 44 >> 2] = 0;
    HEAP32[$0 + 40 >> 2] = $4;
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    $0;
    HEAP32[$0 + 20 >> 2] = 0;
    $2 = 0;
   }
   HEAP32[$0 >> 2] = $1 | HEAP32[$0 >> 2];
  }
  global$0 = $3 + 208 | 0;
 }
 
 function printf_core($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $10 = global$0 - 880 | 0;
  global$0 = $10;
  $35 = $10 + 336 | 8;
  $36 = $10 + 55 | 0;
  $37 = -338 - $10 | 0;
  $32 = $10 + 336 | 9;
  $38 = $10 + 656 | 0;
  $29 = $10 + 336 | 0;
  $27 = $10 + 56 | 0;
  label$1 : {
   label$2 : {
    label$4 : while (1) {
     label$3 : {
      $8 = $1;
      if (($5 | 0) > (2147483647 - $24 | 0)) {
       break label$3
      }
      $24 = $5 + $24 | 0;
      label$5 : {
       label$6 : {
        label$7 : {
         $5 = HEAPU8[$8 | 0];
         if ($5) {
          while (1) {
           label$10 : {
            $5 = $5 & 255;
            label$11 : {
             if ($5) {
              if (($5 | 0) != 37) {
               break label$10
              }
              $7 = $1;
              $5 = $7;
              while (1) {
               if (HEAPU8[$5 + 1 | 0] != 37) {
                $1 = $5;
                break label$11;
               }
               $7 = $7 + 1 | 0;
               $6 = HEAPU8[$5 + 2 | 0];
               $1 = $5 + 2 | 0;
               $5 = $1;
               if (($6 | 0) == 37) {
                continue
               }
               break;
              };
              break label$11;
             }
             $7 = $1;
            }
            $5 = $7 - $8 | 0;
            $7 = 2147483647 - $24 | 0;
            if (($5 | 0) > ($7 | 0)) {
             break label$3
            }
            label$15 : {
             if (!$0) {
              break label$15
             }
             if (HEAPU8[$0 | 0] & 32) {
              break label$15
             }
             __fwritex($8, $5, $0);
            }
            if ($5) {
             continue label$4
            }
            $5 = $1 + 1 | 0;
            $9 = HEAP8[$1 + 1 | 0];
            $15 = $9 + -48 | 0;
            $16 = -1;
            label$16 : {
             if ($15 >>> 0 > 9) {
              break label$16
             }
             $6 = HEAPU8[$1 + 2 | 0] == 36;
             $5 = $6 ? $1 + 3 | 0 : $5;
             $30 = $6 ? 1 : $30;
             $9 = HEAP8[($6 ? 3 : 1) + $1 | 0];
             $16 = $6 ? $15 : -1;
            }
            $11 = 0;
            $1 = $9 + -32 | 0;
            label$18 : {
             if ($1 >>> 0 > 31) {
              break label$18
             }
             $1 = 1 << $1;
             if (!($1 & 75913)) {
              break label$18
             }
             $6 = $5 + 1 | 0;
             while (1) {
              $11 = $1 | $11;
              $5 = $6;
              $9 = HEAP8[$5 | 0];
              $1 = $9 + -32 | 0;
              if ($1 >>> 0 >= 32) {
               break label$18
              }
              $6 = $5 + 1 | 0;
              $1 = 1 << $1;
              if ($1 & 75913) {
               continue
              }
              break;
             };
            }
            label$20 : {
             if (($9 | 0) == 42) {
              label$22 : {
               label$23 : {
                $1 = HEAP8[$5 + 1 | 0] + -48 | 0;
                if ($1 >>> 0 > 9) {
                 break label$23
                }
                if (HEAPU8[$5 + 2 | 0] != 36) {
                 break label$23
                }
                HEAP32[($1 << 2) + $4 >> 2] = 10;
                $12 = $5 + 3 | 0;
                $30 = 1;
                $15 = HEAP32[($3 + (HEAP8[$5 + 1 | 0] << 3) | 0) + -384 >> 2];
                break label$22;
               }
               if ($30) {
                break label$7
               }
               $12 = $5 + 1 | 0;
               if (!$0) {
                $30 = 0;
                $15 = 0;
                break label$20;
               }
               $1 = HEAP32[$2 >> 2];
               HEAP32[$2 >> 2] = $1 + 4;
               $30 = 0;
               $15 = HEAP32[$1 >> 2];
              }
              if (($15 | 0) > -1) {
               break label$20
              }
              $15 = 0 - $15 | 0;
              $11 = $11 | 8192;
              break label$20;
             }
             $15 = 0;
             $6 = $9 + -48 | 0;
             if ($6 >>> 0 > 9) {
              $12 = $5;
              break label$20;
             }
             $1 = 0;
             while (1) {
              $15 = -1;
              if ($1 >>> 0 <= 214748364) {
               $1 = Math_imul($1, 10);
               $15 = ($6 | 0) > (2147483647 - $1 | 0) ? -1 : $6 + $1 | 0;
              }
              $6 = HEAP8[$5 + 1 | 0];
              $12 = $5 + 1 | 0;
              $5 = $12;
              $1 = $15;
              $6 = $6 + -48 | 0;
              if ($6 >>> 0 < 10) {
               continue
              }
              break;
             };
             if (($15 | 0) < 0) {
              break label$3
             }
            }
            $5 = 0;
            $9 = -1;
            label$28 : {
             if (HEAPU8[$12 | 0] != 46) {
              $1 = $12;
              $20 = 0;
              break label$28;
             }
             $6 = HEAP8[$12 + 1 | 0];
             if (($6 | 0) == 42) {
              label$31 : {
               label$32 : {
                $1 = HEAP8[$12 + 2 | 0] + -48 | 0;
                if ($1 >>> 0 > 9) {
                 break label$32
                }
                if (HEAPU8[$12 + 3 | 0] != 36) {
                 break label$32
                }
                HEAP32[($1 << 2) + $4 >> 2] = 10;
                $1 = $12 + 4 | 0;
                $9 = HEAP32[($3 + (HEAP8[$12 + 2 | 0] << 3) | 0) + -384 >> 2];
                break label$31;
               }
               if ($30) {
                break label$7
               }
               $1 = $12 + 2 | 0;
               $9 = 0;
               if (!$0) {
                break label$31
               }
               $6 = HEAP32[$2 >> 2];
               HEAP32[$2 >> 2] = $6 + 4;
               $9 = HEAP32[$6 >> 2];
              }
              $20 = ($9 ^ -1) >>> 31;
              break label$28;
             }
             $1 = $12 + 1 | 0;
             $13 = $6 + -48 | 0;
             if ($13 >>> 0 > 9) {
              $20 = 1;
              $9 = 0;
              break label$28;
             }
             $12 = 0;
             $6 = $1;
             while (1) {
              $9 = -1;
              if ($12 >>> 0 <= 214748364) {
               $1 = Math_imul($12, 10);
               $9 = ($13 | 0) > (2147483647 - $1 | 0) ? -1 : $13 + $1 | 0;
              }
              $20 = 1;
              $13 = HEAP8[$6 + 1 | 0];
              $1 = $6 + 1 | 0;
              $6 = $1;
              $12 = $9;
              $13 = $13 + -48 | 0;
              if ($13 >>> 0 < 10) {
               continue
              }
              break;
             };
            }
            while (1) {
             $6 = $5;
             $5 = HEAP8[$1 | 0] + -65 | 0;
             if ($5 >>> 0 > 57) {
              break label$7
             }
             $1 = $1 + 1 | 0;
             $5 = HEAPU8[($5 + Math_imul($6, 58) | 0) + 4704 | 0];
             if ($5 + -1 >>> 0 < 8) {
              continue
             }
             break;
            };
            if (!$5) {
             break label$7
            }
            label$38 : {
             label$39 : {
              label$40 : {
               if (($5 | 0) == 27) {
                if (($16 | 0) <= -1) {
                 break label$40
                }
                break label$7;
               }
               if (($16 | 0) < 0) {
                break label$39
               }
               HEAP32[($16 << 2) + $4 >> 2] = $5;
               $13 = ($16 << 3) + $3 | 0;
               $5 = HEAP32[$13 >> 2];
               $17 = HEAP32[$13 + 4 >> 2];
               HEAP32[$10 + 56 >> 2] = $5;
               HEAP32[$10 + 60 >> 2] = $17;
              }
              $5 = 0;
              if (!$0) {
               continue label$4
              }
              break label$38;
             }
             if (!$0) {
              $24 = 0;
              break label$1;
             }
             pop_arg($10 + 56 | 0, $5, $2);
            }
            $12 = $11 & -65537;
            $16 = $11 & 8192 ? $12 : $11;
            label$43 : {
             label$44 : {
              label$45 : {
               $5 = HEAP8[$1 + -1 | 0];
               $21 = $6 ? (($5 & 15) == 3 ? $5 & -33 : $5) : $5;
               $5 = $21 + -65 | 0;
               if ($5 >>> 0 > 55) {
                break label$45
               }
               label$46 : {
                label$47 : {
                 label$48 : {
                  label$49 : {
                   label$50 : {
                    label$51 : {
                     label$52 : {
                      label$53 : {
                       label$54 : {
                        label$55 : {
                         label$56 : {
                          label$57 : {
                           switch ($5 - 1 | 0) {
                           case 51:
                            $19 = 0;
                            $22 = HEAP32[$10 + 56 >> 2];
                            $12 = HEAP32[$10 + 60 >> 2];
                            $23 = 4678;
                            break label$56;
                           case 44:
                            $5 = 0;
                            $7 = $6 & 255;
                            if ($7 >>> 0 > 7) {
                             continue label$4
                            }
                            label$63 : {
                             switch ($7 - 1 | 0) {
                             default:
                              HEAP32[HEAP32[$10 + 56 >> 2] >> 2] = $24;
                              continue label$4;
                             case 0:
                              HEAP32[HEAP32[$10 + 56 >> 2] >> 2] = $24;
                              continue label$4;
                             case 1:
                              $17 = $24;
                              $26 = $17 >> 31;
                              $6 = $17;
                              $17 = HEAP32[$10 + 56 >> 2];
                              HEAP32[$17 >> 2] = $6;
                              HEAP32[$17 + 4 >> 2] = $26;
                              continue label$4;
                             case 2:
                              HEAP16[HEAP32[$10 + 56 >> 2] >> 1] = $24;
                              continue label$4;
                             case 3:
                              HEAP8[HEAP32[$10 + 56 >> 2]] = $24;
                              continue label$4;
                             case 5:
                              HEAP32[HEAP32[$10 + 56 >> 2] >> 2] = $24;
                              continue label$4;
                             case 4:
                              continue label$4;
                             case 6:
                              break label$63;
                             };
                            }
                            $17 = $24;
                            $26 = $17 >> 31;
                            $6 = $17;
                            $17 = HEAP32[$10 + 56 >> 2];
                            HEAP32[$17 >> 2] = $6;
                            HEAP32[$17 + 4 >> 2] = $26;
                            continue label$4;
                           case 46:
                            $9 = $9 >>> 0 > 8 ? $9 : 8;
                            $16 = $16 | 8;
                            $21 = 120;
                           case 22:
                           case 54:
                            $19 = 0;
                            $23 = 4678;
                            $22 = HEAP32[$10 + 56 >> 2];
                            $12 = HEAP32[$10 + 60 >> 2];
                            if (!($22 | $12)) {
                             $8 = $27;
                             break label$55;
                            }
                            $5 = $21 & 32;
                            $8 = $27;
                            while (1) {
                             $8 = $8 + -1 | 0;
                             HEAP8[$8 | 0] = $5 | HEAPU8[($22 & 15) + 5312 | 0];
                             $22 = ($12 & 15) << 28 | $22 >>> 4;
                             $12 = $12 >>> 4;
                             if ($22 | $12) {
                              continue
                             }
                             break;
                            };
                            if (!($16 & 8)) {
                             break label$55
                            }
                            if (!(HEAP32[$10 + 56 >> 2] | HEAP32[$10 + 60 >> 2])) {
                             break label$55
                            }
                            $23 = ($21 >> 4) + 4678 | 0;
                            $19 = 2;
                            break label$55;
                           case 45:
                            $8 = $27;
                            $22 = HEAP32[$10 + 56 >> 2];
                            $12 = HEAP32[$10 + 60 >> 2];
                            if ($22 | $12) {
                             while (1) {
                              $8 = $8 + -1 | 0;
                              HEAP8[$8 | 0] = $22 & 7 | 48;
                              $22 = ($12 & 7) << 29 | $22 >>> 3;
                              $12 = $12 >>> 3;
                              if ($22 | $12) {
                               continue
                              }
                              break;
                             }
                            }
                            $19 = 0;
                            $23 = 4678;
                            if (!($16 & 8)) {
                             break label$55
                            }
                            $5 = $27 - $8 | 0;
                            $9 = ($9 | 0) > ($5 | 0) ? $9 : $5 + 1 | 0;
                            break label$55;
                           case 0:
                           case 2:
                           case 6:
                           case 7:
                           case 8:
                           case 9:
                           case 10:
                           case 11:
                           case 12:
                           case 13:
                           case 14:
                           case 15:
                           case 16:
                           case 18:
                           case 19:
                           case 20:
                           case 21:
                           case 23:
                           case 24:
                           case 25:
                           case 26:
                           case 27:
                           case 28:
                           case 29:
                           case 30:
                           case 32:
                           case 38:
                           case 40:
                           case 41:
                           case 42:
                           case 47:
                           case 48:
                           case 50:
                           case 52:
                           case 53:
                            break label$45;
                           case 1:
                            break label$49;
                           case 17:
                            break label$50;
                           case 49:
                            break label$52;
                           case 43:
                            break label$53;
                           case 33:
                            break label$54;
                           case 34:
                           case 39:
                            break label$57;
                           default:
                            break label$46;
                           };
                          }
                          $26 = HEAP32[$10 + 60 >> 2];
                          $12 = $26;
                          $22 = HEAP32[$10 + 56 >> 2];
                          $13 = $22;
                          if (($12 | 0) > -1) {
                           $6 = 1
                          } else {
                           $6 = ($26 | 0) >= -1 ? ($13 >>> 0 <= 4294967295 ? 0 : 1) : 0
                          }
                          if (!$6) {
                           $17 = $22;
                           $22 = 0 - $17 | 0;
                           $12 = 0 - ((0 < $17 >>> 0) + $12 | 0) | 0;
                           HEAP32[$10 + 56 >> 2] = $22;
                           HEAP32[$10 + 60 >> 2] = $12;
                           $19 = 1;
                           $23 = 4678;
                           break label$56;
                          }
                          if ($16 & 2048) {
                           $19 = 1;
                           $23 = 4679;
                           break label$56;
                          }
                          $19 = $16 & 1;
                          $23 = $19 ? 4680 : 4678;
                         }
                         label$76 : {
                          if (!(($12 | 0) == 1 & $22 >>> 0 >= 0 | $12 >>> 0 > 1)) {
                           $31 = $22;
                           $8 = $27;
                           break label$76;
                          }
                          $8 = $27;
                          while (1) {
                           $8 = $8 + -1 | 0;
                           $17 = $22;
                           $31 = __wasm_i64_udiv($17, $12, 10);
                           $11 = i64toi32_i32$HIGH_BITS;
                           (wasm2js_i32$0 = $8, wasm2js_i32$1 = $17 - __wasm_i64_mul($31, $11, 10, 0) | 48), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
                           $5 = ($12 | 0) == 9 & $17 >>> 0 > 4294967295 | $12 >>> 0 > 9;
                           $22 = $31;
                           $12 = $11;
                           if ($5) {
                            continue
                           }
                           break;
                          };
                         }
                         $5 = $31;
                         if (!$5) {
                          break label$55
                         }
                         while (1) {
                          $8 = $8 + -1 | 0;
                          $6 = ($5 >>> 0) / 10 | 0;
                          HEAP8[$8 | 0] = $5 - Math_imul($6, 10) | 48;
                          $11 = $5 >>> 0 > 9;
                          $5 = $6;
                          if ($11) {
                           continue
                          }
                          break;
                         };
                        }
                        if (($9 | 0) < 0 ? $20 : 0) {
                         break label$3
                        }
                        $16 = $20 ? $16 & -65537 : $16;
                        $22 = HEAP32[$10 + 56 >> 2];
                        $12 = HEAP32[$10 + 60 >> 2];
                        label$81 : {
                         if ($9) {
                          break label$81
                         }
                         if ($12 | $22) {
                          break label$81
                         }
                         $8 = $27;
                         $5 = $8;
                         $9 = 0;
                         break label$5;
                        }
                        $5 = !($12 | $22) + ($27 - $8 | 0) | 0;
                        $9 = ($9 | 0) > ($5 | 0) ? $9 : $5;
                        break label$44;
                       }
                       HEAP8[$10 + 55 | 0] = HEAP32[$10 + 56 >> 2];
                       $19 = 0;
                       $23 = 4678;
                       $9 = 1;
                       $8 = $36;
                       $5 = $27;
                       $16 = $12;
                       break label$5;
                      }
                      $8 = strerror(HEAP32[256]);
                      break label$51;
                     }
                     $5 = HEAP32[$10 + 56 >> 2];
                     $8 = $5 ? $5 : 4688;
                    }
                    $19 = 0;
                    $6 = ($9 | 0) < 0 ? 2147483647 : $9;
                    $5 = memchr($8, $6);
                    $6 = $5 ? $5 - $8 | 0 : $6;
                    $5 = $6 + $8 | 0;
                    $23 = 4678;
                    if (($9 | 0) <= -1) {
                     break label$43
                    }
                    $16 = $12;
                    $9 = $6;
                    break label$5;
                   }
                   $8 = HEAP32[$10 + 56 >> 2];
                   $6 = $8;
                   if ($9) {
                    break label$48
                   }
                   $5 = 0;
                   break label$47;
                  }
                  HEAP32[$10 + 12 >> 2] = 0;
                  HEAP32[$10 + 8 >> 2] = HEAP32[$10 + 56 >> 2];
                  HEAP32[$10 + 56 >> 2] = $10 + 8;
                  $9 = -1;
                  $6 = $10 + 8 | 0;
                 }
                 $8 = $6;
                 $5 = 0;
                 $7 = $8;
                 label$82 : {
                  while (1) {
                   $6 = HEAP32[$7 >> 2];
                   if (!$6) {
                    break label$82
                   }
                   label$84 : {
                    $6 = wctomb($10 + 4 | 0, $6);
                    $11 = ($6 | 0) < 0;
                    if ($11) {
                     break label$84
                    }
                    if ($6 >>> 0 > $9 - $5 >>> 0) {
                     break label$84
                    }
                    $7 = $7 + 4 | 0;
                    $5 = $5 + $6 | 0;
                    if ($9 >>> 0 > $5 >>> 0) {
                     continue
                    }
                    break label$82;
                   }
                   break;
                  };
                  if ($11) {
                   break label$2
                  }
                 }
                 if (($5 | 0) < 0) {
                  break label$3
                 }
                }
                $12 = $16 & 73728;
                label$85 : {
                 if ($12) {
                  break label$85
                 }
                 if (($15 | 0) <= ($5 | 0)) {
                  break label$85
                 }
                 $13 = $15 - $5 | 0;
                 $7 = $13 >>> 0 < 256;
                 memset($10 - -64 | 0, 32, $7 ? $13 : 256);
                 $9 = HEAP32[$0 >> 2];
                 $6 = $9 & 32;
                 label$86 : {
                  if (!$7) {
                   $7 = !$6;
                   $6 = $13;
                   while (1) {
                    if ($7 & 1) {
                     __fwritex($10 - -64 | 0, 256, $0);
                     $9 = HEAP32[$0 >> 2];
                    }
                    $11 = $9 & 32;
                    $7 = !$11;
                    $6 = $6 + -256 | 0;
                    if ($6 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($11) {
                    break label$85
                   }
                   $13 = $13 & 255;
                   break label$86;
                  }
                  if ($6) {
                   break label$85
                  }
                 }
                 __fwritex($10 - -64 | 0, $13, $0);
                }
                label$90 : {
                 if (!$5) {
                  break label$90
                 }
                 $7 = 0;
                 while (1) {
                  $6 = HEAP32[$8 >> 2];
                  if (!$6) {
                   break label$90
                  }
                  $6 = wctomb($10 + 4 | 0, $6);
                  $7 = $7 + $6 | 0;
                  if ($7 >>> 0 > $5 >>> 0) {
                   break label$90
                  }
                  if (!(HEAPU8[$0 | 0] & 32)) {
                   __fwritex($10 + 4 | 0, $6, $0)
                  }
                  $8 = $8 + 4 | 0;
                  if ($7 >>> 0 < $5 >>> 0) {
                   continue
                  }
                  break;
                 };
                }
                label$93 : {
                 if (($12 | 0) != 8192) {
                  break label$93
                 }
                 if (($15 | 0) <= ($5 | 0)) {
                  break label$93
                 }
                 $11 = $15 - $5 | 0;
                 $7 = $11 >>> 0 < 256;
                 memset($10 - -64 | 0, 32, $7 ? $11 : 256);
                 $8 = HEAP32[$0 >> 2];
                 $6 = $8 & 32;
                 label$94 : {
                  if (!$7) {
                   $7 = !$6;
                   $6 = $11;
                   while (1) {
                    if ($7 & 1) {
                     __fwritex($10 - -64 | 0, 256, $0);
                     $8 = HEAP32[$0 >> 2];
                    }
                    $9 = $8 & 32;
                    $7 = !$9;
                    $6 = $6 + -256 | 0;
                    if ($6 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($9) {
                    break label$93
                   }
                   $11 = $11 & 255;
                   break label$94;
                  }
                  if ($6) {
                   break label$93
                  }
                 }
                 __fwritex($10 - -64 | 0, $11, $0);
                }
                $5 = ($15 | 0) > ($5 | 0) ? $15 : $5;
                continue label$4;
               }
               if ($20 ? ($9 | 0) <= -1 : 0) {
                break label$3
               }
               $18 = HEAPF64[$10 + 56 >> 3];
               HEAP32[$10 + 364 >> 2] = 0;
               wasm2js_scratch_store_f64(+$18);
               $6 = wasm2js_scratch_load_i32(1) | 0;
               $11 = wasm2js_scratch_load_i32(0) | 0;
               if (($6 | 0) > -1) {
                $6 = 1
               } else {
                $6 = ($6 | 0) >= -1 ? ($11 >>> 0 <= 4294967295 ? 0 : 1) : 0
               }
               label$99 : {
                if (!$6) {
                 $18 = -$18;
                 $28 = 1;
                 $6 = 5328;
                 break label$99;
                }
                if ($16 & 2048) {
                 $28 = 1;
                 $6 = 5331;
                 break label$99;
                }
                $28 = $16 & 1;
                $6 = $28 ? 5334 : 5329;
               }
               $33 = $6;
               $25 = Math_abs($18);
               label$102 : {
                if (!($25 != infinity & $25 == $25)) {
                 $9 = $28 + 3 | 0;
                 label$104 : {
                  if ($16 & 8192) {
                   break label$104
                  }
                  if (($15 | 0) <= ($9 | 0)) {
                   break label$104
                  }
                  $11 = $15 - $9 | 0;
                  $5 = $11 >>> 0 < 256;
                  memset($10 - -64 | 0, 32, $5 ? $11 : 256);
                  $6 = HEAP32[$0 >> 2];
                  $7 = $6 & 32;
                  label$105 : {
                   if (!$5) {
                    $5 = !$7;
                    $7 = $11;
                    while (1) {
                     if ($5 & 1) {
                      __fwritex($10 - -64 | 0, 256, $0);
                      $6 = HEAP32[$0 >> 2];
                     }
                     $8 = $6 & 32;
                     $5 = !$8;
                     $7 = $7 + -256 | 0;
                     if ($7 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8) {
                     break label$104
                    }
                    $11 = $11 & 255;
                    break label$105;
                   }
                   if ($7) {
                    break label$104
                   }
                  }
                  __fwritex($10 - -64 | 0, $11, $0);
                 }
                 $5 = HEAP32[$0 >> 2];
                 if (!($5 & 32)) {
                  __fwritex($33, $28, $0);
                  $5 = HEAP32[$0 >> 2];
                 }
                 if (!($5 & 32)) {
                  $5 = ($21 & 32) >>> 5;
                  __fwritex($18 != $18 ? ($5 ? 5355 : 5359) : $5 ? 5347 : 5351, 3, $0);
                 }
                 label$111 : {
                  if (($16 & 73728) != 8192) {
                   break label$111
                  }
                  if (($15 | 0) <= ($9 | 0)) {
                   break label$111
                  }
                  $11 = $15 - $9 | 0;
                  $5 = $11 >>> 0 < 256;
                  memset($10 - -64 | 0, 32, $5 ? $11 : 256);
                  $6 = HEAP32[$0 >> 2];
                  $7 = $6 & 32;
                  label$112 : {
                   if (!$5) {
                    $5 = !$7;
                    $7 = $11;
                    while (1) {
                     if ($5 & 1) {
                      __fwritex($10 - -64 | 0, 256, $0);
                      $6 = HEAP32[$0 >> 2];
                     }
                     $8 = $6 & 32;
                     $5 = !$8;
                     $7 = $7 + -256 | 0;
                     if ($7 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8) {
                     break label$111
                    }
                    $11 = $11 & 255;
                    break label$112;
                   }
                   if ($7) {
                    break label$111
                   }
                  }
                  __fwritex($10 - -64 | 0, $11, $0);
                 }
                 $5 = ($15 | 0) > ($9 | 0) ? $15 : $9;
                 break label$102;
                }
                $18 = frexp($18, $10 + 364 | 0);
                $18 = $18 + $18;
                if ($18 != 0.0) {
                 HEAP32[$10 + 364 >> 2] = HEAP32[$10 + 364 >> 2] + -1
                }
                $23 = $21 | 32;
                if (($23 | 0) == 97) {
                 $11 = $21 & 32;
                 $19 = $11 ? $33 + 9 | 0 : $33;
                 label$118 : {
                  if ($9 >>> 0 > 11) {
                   break label$118
                  }
                  if (!(12 - $9)) {
                   break label$118
                  }
                  $5 = $9 + -12 | 0;
                  $25 = 16.0;
                  while (1) {
                   $25 = $25 * 16.0;
                   $7 = $5 + 1 | 0;
                   $6 = $7 >>> 0 >= $5 >>> 0;
                   $5 = $7;
                   if ($6) {
                    continue
                   }
                   break;
                  };
                  if (HEAPU8[$19 | 0] == 45) {
                   $18 = -($25 + (-$18 - $25));
                   break label$118;
                  }
                  $18 = $18 + $25 - $25;
                 }
                 $6 = $29;
                 $12 = HEAP32[$10 + 364 >> 2];
                 $5 = $12 >> 31;
                 $5 = $5 + $12 ^ $5;
                 label$121 : {
                  if ($5) {
                   $7 = 0;
                   while (1) {
                    $6 = ($5 >>> 0) / 10 | 0;
                    HEAP8[($7 + $10 | 0) + 335 | 0] = $5 - Math_imul($6, 10) | 48;
                    $7 = $7 + -1 | 0;
                    $8 = $5 >>> 0 > 9;
                    $5 = $6;
                    if ($8) {
                     continue
                    }
                    break;
                   };
                   $6 = ($7 + $10 | 0) + 336 | 0;
                   if ($7) {
                    break label$121
                   }
                  }
                  $6 = $6 + -1 | 0;
                  HEAP8[$6 | 0] = 48;
                 }
                 $13 = $28 | 2;
                 $20 = $6 + -2 | 0;
                 HEAP8[$20 | 0] = $21 + 15;
                 HEAP8[$6 + -1 | 0] = ($12 | 0) < 0 ? 45 : 43;
                 $6 = $16 & 8;
                 $7 = $10 + 336 | 0;
                 while (1) {
                  $5 = $7;
                  $7 = Math_abs($18) < 2147483648.0 ? ~~$18 : -2147483648;
                  HEAP8[$5 | 0] = $11 | HEAPU8[$7 + 5312 | 0];
                  $18 = ($18 - +($7 | 0)) * 16.0;
                  $7 = $5 + 1 | 0;
                  label$127 : {
                   if (($7 - ($10 + 336 | 0) | 0) != 1) {
                    break label$127
                   }
                   label$128 : {
                    if ($6) {
                     break label$128
                    }
                    if (($9 | 0) > 0) {
                     break label$128
                    }
                    if ($18 == 0.0) {
                     break label$127
                    }
                   }
                   HEAP8[$5 + 1 | 0] = 46;
                   $7 = $5 + 2 | 0;
                  }
                  if ($18 != 0.0) {
                   continue
                  }
                  break;
                 };
                 $5 = -1;
                 $21 = $29 - $20 | 0;
                 $6 = $21 + $13 | 0;
                 if ((2147483645 - $6 | 0) < ($9 | 0)) {
                  break label$102
                 }
                 $11 = $7 - ($10 + 336 | 0) | 0;
                 $14 = $9 ? (($7 + $37 | 0) < ($9 | 0) ? $9 + 2 | 0 : $11) : $11;
                 $9 = $14 + $6 | 0;
                 $12 = $16 & 73728;
                 label$129 : {
                  if ($12) {
                   break label$129
                  }
                  if (($15 | 0) <= ($9 | 0)) {
                   break label$129
                  }
                  $16 = $15 - $9 | 0;
                  $5 = $16 >>> 0 < 256;
                  memset($10 - -64 | 0, 32, $5 ? $16 : 256);
                  $6 = HEAP32[$0 >> 2];
                  $7 = $6 & 32;
                  label$130 : {
                   if (!$5) {
                    $5 = !$7;
                    $7 = $16;
                    while (1) {
                     if ($5 & 1) {
                      __fwritex($10 - -64 | 0, 256, $0);
                      $6 = HEAP32[$0 >> 2];
                     }
                     $8 = $6 & 32;
                     $5 = !$8;
                     $7 = $7 + -256 | 0;
                     if ($7 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8) {
                     break label$129
                    }
                    $16 = $16 & 255;
                    break label$130;
                   }
                   if ($7) {
                    break label$129
                   }
                  }
                  __fwritex($10 - -64 | 0, $16, $0);
                 }
                 if (!(HEAPU8[$0 | 0] & 32)) {
                  __fwritex($19, $13, $0)
                 }
                 label$135 : {
                  if (($12 | 0) != 65536) {
                   break label$135
                  }
                  if (($15 | 0) <= ($9 | 0)) {
                   break label$135
                  }
                  $13 = $15 - $9 | 0;
                  $5 = $13 >>> 0 < 256;
                  memset($10 - -64 | 0, 48, $5 ? $13 : 256);
                  $6 = HEAP32[$0 >> 2];
                  $7 = $6 & 32;
                  label$136 : {
                   if (!$5) {
                    $5 = !$7;
                    $7 = $13;
                    while (1) {
                     if ($5 & 1) {
                      __fwritex($10 - -64 | 0, 256, $0);
                      $6 = HEAP32[$0 >> 2];
                     }
                     $8 = $6 & 32;
                     $5 = !$8;
                     $7 = $7 + -256 | 0;
                     if ($7 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8) {
                     break label$135
                    }
                    $13 = $13 & 255;
                    break label$136;
                   }
                   if ($7) {
                    break label$135
                   }
                  }
                  __fwritex($10 - -64 | 0, $13, $0);
                 }
                 if (!(HEAPU8[$0 | 0] & 32)) {
                  __fwritex($10 + 336 | 0, $11, $0)
                 }
                 $11 = $14 - $11 | 0;
                 label$141 : {
                  if (($11 | 0) < 1) {
                   break label$141
                  }
                  $5 = $11 >>> 0 < 256;
                  memset($10 - -64 | 0, 48, $5 ? $11 : 256);
                  $6 = HEAP32[$0 >> 2];
                  $7 = $6 & 32;
                  label$142 : {
                   if (!$5) {
                    $5 = !$7;
                    $7 = $11;
                    while (1) {
                     if ($5 & 1) {
                      __fwritex($10 - -64 | 0, 256, $0);
                      $6 = HEAP32[$0 >> 2];
                     }
                     $8 = $6 & 32;
                     $5 = !$8;
                     $7 = $7 + -256 | 0;
                     if ($7 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8) {
                     break label$141
                    }
                    $11 = $11 & 255;
                    break label$142;
                   }
                   if ($7) {
                    break label$141
                   }
                  }
                  __fwritex($10 - -64 | 0, $11, $0);
                 }
                 if (!(HEAPU8[$0 | 0] & 32)) {
                  __fwritex($20, $21, $0)
                 }
                 label$147 : {
                  if (($12 | 0) != 8192) {
                   break label$147
                  }
                  if (($15 | 0) <= ($9 | 0)) {
                   break label$147
                  }
                  $11 = $15 - $9 | 0;
                  $5 = $11 >>> 0 < 256;
                  memset($10 - -64 | 0, 32, $5 ? $11 : 256);
                  $6 = HEAP32[$0 >> 2];
                  $7 = $6 & 32;
                  label$148 : {
                   if (!$5) {
                    $5 = !$7;
                    $7 = $11;
                    while (1) {
                     if ($5 & 1) {
                      __fwritex($10 - -64 | 0, 256, $0);
                      $6 = HEAP32[$0 >> 2];
                     }
                     $8 = $6 & 32;
                     $5 = !$8;
                     $7 = $7 + -256 | 0;
                     if ($7 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8) {
                     break label$147
                    }
                    $11 = $11 & 255;
                    break label$148;
                   }
                   if ($7) {
                    break label$147
                   }
                  }
                  __fwritex($10 - -64 | 0, $11, $0);
                 }
                 $5 = ($15 | 0) > ($9 | 0) ? $15 : $9;
                 break label$102;
                }
                $5 = ($9 | 0) < 0;
                label$152 : {
                 if ($18 == 0.0) {
                  $8 = HEAP32[$10 + 364 >> 2];
                  break label$152;
                 }
                 $8 = HEAP32[$10 + 364 >> 2] + -28 | 0;
                 HEAP32[$10 + 364 >> 2] = $8;
                 $18 = $18 * 268435456.0;
                }
                $14 = $5 ? 6 : $9;
                $19 = ($8 | 0) < 0 ? $10 + 368 | 0 : $38;
                $6 = $19;
                while (1) {
                 $5 = $18 < 4294967296.0 & $18 >= 0.0 ? ~~$18 >>> 0 : 0;
                 HEAP32[$6 >> 2] = $5;
                 $6 = $6 + 4 | 0;
                 $18 = ($18 - +($5 >>> 0)) * 1.0e9;
                 if ($18 != 0.0) {
                  continue
                 }
                 break;
                };
                label$157 : {
                 if (($8 | 0) < 1) {
                  $5 = $6;
                  $7 = $19;
                  break label$157;
                 }
                 $7 = $19;
                 while (1) {
                  $8 = ($8 | 0) < 29 ? $8 : 29;
                  $5 = $6 + -4 | 0;
                  label$160 : {
                   if ($5 >>> 0 < $7 >>> 0) {
                    break label$160
                   }
                   $31 = $8;
                   $22 = 0;
                   while (1) {
                    $9 = $5;
                    $17 = HEAP32[$5 >> 2];
                    $13 = $31;
                    $12 = $13 & 31;
                    if (32 <= ($13 & 63) >>> 0) {
                     $11 = $17 << $12;
                     $17 = 0;
                    } else {
                     $11 = (1 << $12) - 1 & $17 >>> 32 - $12;
                     $17 = $17 << $12;
                    }
                    $26 = $11;
                    $13 = $22;
                    $12 = $17 + $13 | 0;
                    if ($12 >>> 0 < $13 >>> 0) {
                     $26 = $26 + 1 | 0
                    }
                    $17 = $12;
                    $22 = __wasm_i64_udiv($17, $26, 1e9);
                    (wasm2js_i32$0 = $9, wasm2js_i32$1 = $17 - __wasm_i64_mul($22, i64toi32_i32$HIGH_BITS, 1e9, 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                    $5 = $5 + -4 | 0;
                    if ($5 >>> 0 >= $7 >>> 0) {
                     continue
                    }
                    break;
                   };
                   $5 = $22;
                   if (!$5) {
                    break label$160
                   }
                   $7 = $7 + -4 | 0;
                   HEAP32[$7 >> 2] = $5;
                  }
                  while (1) {
                   $5 = $6;
                   if ($5 >>> 0 > $7 >>> 0) {
                    $6 = $5 + -4 | 0;
                    if (!HEAP32[$6 >> 2]) {
                     continue
                    }
                   }
                   break;
                  };
                  $8 = HEAP32[$10 + 364 >> 2] - $8 | 0;
                  HEAP32[$10 + 364 >> 2] = $8;
                  $6 = $5;
                  if (($8 | 0) > 0) {
                   continue
                  }
                  break;
                 };
                }
                if (($8 | 0) <= -1) {
                 $20 = (($14 + 25 >>> 0) / 9 | 0) + 1 | 0;
                 while (1) {
                  $6 = 0 - $8 | 0;
                  $11 = ($6 | 0) < 9 ? $6 : 9;
                  label$166 : {
                   if ($7 >>> 0 >= $5 >>> 0) {
                    $7 = HEAP32[$7 >> 2] ? $7 : $7 + 4 | 0;
                    break label$166;
                   }
                   $12 = 1e9 >>> $11;
                   $13 = -1 << $11 ^ -1;
                   $8 = 0;
                   $6 = $7;
                   while (1) {
                    $9 = HEAP32[$6 >> 2];
                    HEAP32[$6 >> 2] = $8 + ($9 >>> $11);
                    $8 = Math_imul($12, $9 & $13);
                    $6 = $6 + 4 | 0;
                    if ($6 >>> 0 < $5 >>> 0) {
                     continue
                    }
                    break;
                   };
                   $7 = HEAP32[$7 >> 2] ? $7 : $7 + 4 | 0;
                   if (!$8) {
                    break label$166
                   }
                   HEAP32[$5 >> 2] = $8;
                   $5 = $5 + 4 | 0;
                  }
                  $8 = $11 + HEAP32[$10 + 364 >> 2] | 0;
                  HEAP32[$10 + 364 >> 2] = $8;
                  $6 = ($23 | 0) == 102 ? $19 : $7;
                  $5 = $5 - $6 >> 2 > ($20 | 0) ? $6 + ($20 << 2) | 0 : $5;
                  if (($8 | 0) < 0) {
                   continue
                  }
                  break;
                 };
                }
                $6 = 0;
                label$169 : {
                 if ($7 >>> 0 >= $5 >>> 0) {
                  break label$169
                 }
                 $6 = Math_imul($19 - $7 >> 2, 9);
                 $9 = HEAP32[$7 >> 2];
                 if ($9 >>> 0 < 10) {
                  break label$169
                 }
                 $8 = 10;
                 while (1) {
                  $6 = $6 + 1 | 0;
                  $8 = Math_imul($8, 10);
                  if ($9 >>> 0 >= $8 >>> 0) {
                   continue
                  }
                  break;
                 };
                }
                $9 = ($23 | 0) == 102 ? 0 : $6;
                $12 = ($23 | 0) == 103;
                $13 = $12 & ($14 | 0) != 0;
                $8 = ($14 - $9 | 0) - $13 | 0;
                if (($8 | 0) < (Math_imul($5 - $19 >> 2, 9) + -9 | 0)) {
                 $20 = $8 + 9216 | 0;
                 $23 = ($20 | 0) / 9 | 0;
                 $17 = $19 + ($23 << 2) | 0;
                 $11 = $17 + -4092 | 0;
                 $8 = 10;
                 $23 = Math_imul($23, 9);
                 if ((($20 - $23 | 0) + 1 | 0) <= 8) {
                  $9 = (($13 + ($9 + $23 | 0) | 0) - $14 | 0) + -9208 | 0;
                  while (1) {
                   $8 = Math_imul($8, 10);
                   $9 = $9 + -1 | 0;
                   if ($9) {
                    continue
                   }
                   break;
                  };
                 }
                 $13 = HEAP32[$11 >> 2];
                 $20 = ($13 >>> 0) / ($8 >>> 0) | 0;
                 $23 = $11 + 4 | 0;
                 $9 = $13 - Math_imul($8, $20) | 0;
                 label$174 : {
                  if ($9 ? 0 : ($23 | 0) == ($5 | 0)) {
                   break label$174
                  }
                  label$176 : {
                   if (!($20 & 1)) {
                    $18 = 9007199254740992.0;
                    if ($11 >>> 0 <= $7 >>> 0) {
                     break label$176
                    }
                    if (($8 | 0) != 1e9) {
                     break label$176
                    }
                    if (!(HEAP8[$11 + -4 | 0] & 1)) {
                     break label$176
                    }
                   }
                   $18 = 9007199254740994.0;
                  }
                  $25 = .5;
                  $20 = $8 >>> 1;
                  if ($9 >>> 0 >= $20 >>> 0) {
                   $25 = ($5 | 0) == ($23 | 0) ? (($9 | 0) == ($20 | 0) ? 1.0 : 1.5) : 1.5
                  }
                  label$179 : {
                   if (!$28) {
                    break label$179
                   }
                   if (HEAPU8[$33 | 0] != 45) {
                    break label$179
                   }
                   $25 = -$25;
                   $18 = -$18;
                  }
                  $9 = $13 - $9 | 0;
                  HEAP32[$11 >> 2] = $9;
                  if ($18 + $25 == $18) {
                   break label$174
                  }
                  $6 = $8 + $9 | 0;
                  HEAP32[$11 >> 2] = $6;
                  if ($6 >>> 0 >= 1e9) {
                   $6 = $17 + -4096 | 0;
                   while (1) {
                    HEAP32[$6 + 4 >> 2] = 0;
                    if ($6 >>> 0 < $7 >>> 0) {
                     $7 = $7 + -4 | 0;
                     HEAP32[$7 >> 2] = 0;
                    }
                    $8 = HEAP32[$6 >> 2] + 1 | 0;
                    HEAP32[$6 >> 2] = $8;
                    $6 = $6 + -4 | 0;
                    if ($8 >>> 0 > 999999999) {
                     continue
                    }
                    break;
                   };
                   $11 = $6 + 4 | 0;
                  }
                  $6 = Math_imul($19 - $7 >> 2, 9);
                  $9 = HEAP32[$7 >> 2];
                  if ($9 >>> 0 < 10) {
                   break label$174
                  }
                  $8 = 10;
                  while (1) {
                   $6 = $6 + 1 | 0;
                   $8 = Math_imul($8, 10);
                   if ($9 >>> 0 >= $8 >>> 0) {
                    continue
                   }
                   break;
                  };
                 }
                 $8 = $11 + 4 | 0;
                 $5 = $5 >>> 0 > $8 >>> 0 ? $8 : $5;
                }
                label$184 : {
                 while (1) {
                  $9 = $5;
                  $23 = 0;
                  if ($5 >>> 0 <= $7 >>> 0) {
                   break label$184
                  }
                  $5 = $9 + -4 | 0;
                  if (!HEAP32[$5 >> 2]) {
                   continue
                  }
                  break;
                 };
                 $23 = 1;
                }
                label$187 : {
                 if (!$12) {
                  $13 = $16 & 8;
                  break label$187;
                 }
                 $5 = $14 ? $14 : 1;
                 $8 = ($5 | 0) > ($6 | 0) & ($6 | 0) > -5;
                 $14 = ($8 ? $6 ^ -1 : -1) + $5 | 0;
                 $21 = $21 + ($8 ? -1 : -2) | 0;
                 $13 = $16 & 8;
                 if ($13) {
                  break label$187
                 }
                 $5 = 9;
                 label$189 : {
                  if (!$23) {
                   break label$189
                  }
                  $11 = HEAP32[$9 + -4 >> 2];
                  if (!$11) {
                   break label$189
                  }
                  $5 = 0;
                  if (($11 >>> 0) % 10) {
                   break label$189
                  }
                  $8 = 10;
                  while (1) {
                   $5 = $5 + 1 | 0;
                   $8 = Math_imul($8, 10);
                   if (!(($11 >>> 0) % ($8 >>> 0))) {
                    continue
                   }
                   break;
                  };
                 }
                 $8 = Math_imul($9 - $19 >> 2, 9) + -9 | 0;
                 if (($21 | 32) == 102) {
                  $13 = 0;
                  $5 = $8 - $5 | 0;
                  $5 = ($5 | 0) > 0 ? $5 : 0;
                  $14 = ($14 | 0) < ($5 | 0) ? $14 : $5;
                  break label$187;
                 }
                 $13 = 0;
                 $5 = ($6 + $8 | 0) - $5 | 0;
                 $5 = ($5 | 0) > 0 ? $5 : 0;
                 $14 = ($14 | 0) < ($5 | 0) ? $14 : $5;
                }
                $5 = -1;
                $20 = $13 | $14;
                if (($14 | 0) > (($20 ? 2147483645 : 2147483646) | 0)) {
                 break label$102
                }
                $17 = ((($20 | 0) != 0) + $14 | 0) + 1 | 0;
                $26 = ($21 | 32) != 102;
                label$192 : {
                 if (!$26) {
                  if (($6 | 0) > (2147483647 - $17 | 0)) {
                   break label$102
                  }
                  $6 = ($6 | 0) > 0 ? $6 : 0;
                  break label$192;
                 }
                 $8 = $29;
                 $5 = $6 >> 31;
                 $5 = $5 + $6 ^ $5;
                 if ($5) {
                  while (1) {
                   $8 = $8 + -1 | 0;
                   $11 = ($5 >>> 0) / 10 | 0;
                   HEAP8[$8 | 0] = $5 - Math_imul($11, 10) | 48;
                   $12 = $5 >>> 0 > 9;
                   $5 = $11;
                   if ($12) {
                    continue
                   }
                   break;
                  }
                 }
                 if (($29 - $8 | 0) <= 1) {
                  $5 = $8 + -1 | 0;
                  while (1) {
                   HEAP8[$5 | 0] = 48;
                   $8 = $29 - $5 | 0;
                   $11 = $5 + -1 | 0;
                   $5 = $11;
                   if (($8 | 0) < 2) {
                    continue
                   }
                   break;
                  };
                  $8 = $11 + 1 | 0;
                 }
                 $34 = $8 + -2 | 0;
                 HEAP8[$34 | 0] = $21;
                 $5 = -1;
                 HEAP8[$8 + -1 | 0] = ($6 | 0) < 0 ? 45 : 43;
                 $6 = $29 - $34 | 0;
                 if (($6 | 0) > (2147483647 - $17 | 0)) {
                  break label$102
                 }
                }
                $6 = $6 + $17 | 0;
                if (($6 | 0) > ($28 ^ 2147483647)) {
                 break label$102
                }
                $21 = $6 + $28 | 0;
                $16 = $16 & 73728;
                label$198 : {
                 if ($16) {
                  break label$198
                 }
                 if (($15 | 0) <= ($21 | 0)) {
                  break label$198
                 }
                 $12 = $15 - $21 | 0;
                 $5 = $12 >>> 0 < 256;
                 memset($10 - -64 | 0, 32, $5 ? $12 : 256);
                 $8 = HEAP32[$0 >> 2];
                 $6 = $8 & 32;
                 label$199 : {
                  if (!$5) {
                   $5 = !$6;
                   $6 = $12;
                   while (1) {
                    if ($5 & 1) {
                     __fwritex($10 - -64 | 0, 256, $0);
                     $8 = HEAP32[$0 >> 2];
                    }
                    $11 = $8 & 32;
                    $5 = !$11;
                    $6 = $6 + -256 | 0;
                    if ($6 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($11) {
                    break label$198
                   }
                   $12 = $12 & 255;
                   break label$199;
                  }
                  if ($6) {
                   break label$198
                  }
                 }
                 __fwritex($10 - -64 | 0, $12, $0);
                }
                if (!(HEAPU8[$0 | 0] & 32)) {
                 __fwritex($33, $28, $0)
                }
                label$204 : {
                 if (($16 | 0) != 65536) {
                  break label$204
                 }
                 if (($15 | 0) <= ($21 | 0)) {
                  break label$204
                 }
                 $12 = $15 - $21 | 0;
                 $5 = $12 >>> 0 < 256;
                 memset($10 - -64 | 0, 48, $5 ? $12 : 256);
                 $8 = HEAP32[$0 >> 2];
                 $6 = $8 & 32;
                 label$205 : {
                  if (!$5) {
                   $5 = !$6;
                   $6 = $12;
                   while (1) {
                    if ($5 & 1) {
                     __fwritex($10 - -64 | 0, 256, $0);
                     $8 = HEAP32[$0 >> 2];
                    }
                    $11 = $8 & 32;
                    $5 = !$11;
                    $6 = $6 + -256 | 0;
                    if ($6 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($11) {
                    break label$204
                   }
                   $12 = $12 & 255;
                   break label$205;
                  }
                  if ($6) {
                   break label$204
                  }
                 }
                 __fwritex($10 - -64 | 0, $12, $0);
                }
                label$209 : {
                 if (!$26) {
                  $12 = $7 >>> 0 > $19 >>> 0 ? $19 : $7;
                  $11 = $12;
                  while (1) {
                   $5 = HEAP32[$11 >> 2];
                   label$212 : {
                    if (!$5) {
                     $7 = 0;
                     break label$212;
                    }
                    $7 = 0;
                    while (1) {
                     $6 = ($5 >>> 0) / 10 | 0;
                     HEAP8[$7 + $35 | 0] = $5 - Math_imul($6, 10) | 48;
                     $7 = $7 + -1 | 0;
                     $8 = $5 >>> 0 > 9;
                     $5 = $6;
                     if ($8) {
                      continue
                     }
                     break;
                    };
                   }
                   $5 = $7 + $32 | 0;
                   label$215 : {
                    if (($11 | 0) != ($12 | 0)) {
                     if ($5 >>> 0 <= $10 + 336 >>> 0) {
                      break label$215
                     }
                     while (1) {
                      $5 = $5 + -1 | 0;
                      HEAP8[$5 | 0] = 48;
                      if ($5 >>> 0 > $10 + 336 >>> 0) {
                       continue
                      }
                      break;
                     };
                     $5 = $10 + 336 | 0;
                     break label$215;
                    }
                    if ($7) {
                     break label$215
                    }
                    $5 = $5 + -1 | 0;
                    HEAP8[$5 | 0] = 48;
                   }
                   if (!(HEAPU8[$0 | 0] & 32)) {
                    __fwritex($5, $32 - $5 | 0, $0)
                   }
                   $11 = $11 + 4 | 0;
                   if ($11 >>> 0 <= $19 >>> 0) {
                    continue
                   }
                   break;
                  };
                  label$219 : {
                   if (!$20) {
                    break label$219
                   }
                   if (HEAPU8[$0 | 0] & 32) {
                    break label$219
                   }
                   __fwritex(5363, 1, $0);
                  }
                  label$220 : {
                   if (($14 | 0) < 1) {
                    break label$220
                   }
                   if ($11 >>> 0 >= $9 >>> 0) {
                    break label$220
                   }
                   while (1) {
                    $5 = $32;
                    $7 = HEAP32[$11 >> 2];
                    label$222 : {
                     if ($7) {
                      while (1) {
                       $5 = $5 + -1 | 0;
                       $6 = ($7 >>> 0) / 10 | 0;
                       HEAP8[$5 | 0] = $7 - Math_imul($6, 10) | 48;
                       $8 = $7 >>> 0 > 9;
                       $7 = $6;
                       if ($8) {
                        continue
                       }
                       break;
                      };
                      if ($5 >>> 0 <= $10 + 336 >>> 0) {
                       break label$222
                      }
                     }
                     while (1) {
                      $5 = $5 + -1 | 0;
                      HEAP8[$5 | 0] = 48;
                      if ($5 >>> 0 > $10 + 336 >>> 0) {
                       continue
                      }
                      break;
                     };
                    }
                    if (!(HEAPU8[$0 | 0] & 32)) {
                     __fwritex($5, ($14 | 0) < 9 ? $14 : 9, $0)
                    }
                    $14 = $14 + -9 | 0;
                    if (($14 | 0) < 1) {
                     break label$220
                    }
                    $11 = $11 + 4 | 0;
                    if ($11 >>> 0 < $9 >>> 0) {
                     continue
                    }
                    break;
                   };
                  }
                  if (($14 | 0) < 1) {
                   break label$209
                  }
                  $5 = $14 >>> 0 < 256;
                  memset($10 - -64 | 0, 48, $5 ? $14 : 256);
                  $6 = HEAP32[$0 >> 2];
                  $7 = $6 & 32;
                  label$227 : {
                   if (!$5) {
                    $5 = !$7;
                    $7 = $14;
                    while (1) {
                     if ($5 & 1) {
                      __fwritex($10 - -64 | 0, 256, $0);
                      $6 = HEAP32[$0 >> 2];
                     }
                     $8 = $6 & 32;
                     $5 = !$8;
                     $7 = $7 + -256 | 0;
                     if ($7 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8) {
                     break label$209
                    }
                    $14 = $14 & 255;
                    break label$227;
                   }
                   if ($7) {
                    break label$209
                   }
                  }
                  __fwritex($10 - -64 | 0, $14, $0);
                  break label$209;
                 }
                 label$231 : {
                  if (($14 | 0) <= -1) {
                   break label$231
                  }
                  $12 = $23 ? $9 : $7 + 4 | 0;
                  $11 = $7;
                  while (1) {
                   $8 = $32;
                   $5 = HEAP32[$11 >> 2];
                   label$233 : {
                    if ($5) {
                     $6 = 0;
                     while (1) {
                      $8 = ($5 >>> 0) / 10 | 0;
                      HEAP8[($6 + $10 | 0) + 344 | 0] = $5 - Math_imul($8, 10) | 48;
                      $6 = $6 + -1 | 0;
                      $9 = $5 >>> 0 > 9;
                      $5 = $8;
                      if ($9) {
                       continue
                      }
                      break;
                     };
                     $8 = ($6 + $10 | 0) + 345 | 0;
                     if ($6) {
                      break label$233
                     }
                    }
                    $8 = $8 + -1 | 0;
                    HEAP8[$8 | 0] = 48;
                   }
                   label$236 : {
                    if (($7 | 0) != ($11 | 0)) {
                     if ($8 >>> 0 <= $10 + 336 >>> 0) {
                      break label$236
                     }
                     while (1) {
                      $8 = $8 + -1 | 0;
                      HEAP8[$8 | 0] = 48;
                      if ($8 >>> 0 > $10 + 336 >>> 0) {
                       continue
                      }
                      break;
                     };
                     break label$236;
                    }
                    if (!(HEAPU8[$0 | 0] & 32)) {
                     __fwritex($8, 1, $0)
                    }
                    $8 = $8 + 1 | 0;
                    if (($14 | 0) < 1 ? !$13 : 0) {
                     break label$236
                    }
                    if (HEAPU8[$0 | 0] & 32) {
                     break label$236
                    }
                    __fwritex(5363, 1, $0);
                   }
                   $5 = $32 - $8 | 0;
                   if (!(HEAPU8[$0 | 0] & 32)) {
                    __fwritex($8, ($14 | 0) > ($5 | 0) ? $5 : $14, $0)
                   }
                   $11 = $11 + 4 | 0;
                   $14 = $14 - $5 | 0;
                   if (($14 | 0) > -1 ? $11 >>> 0 < $12 >>> 0 : 0) {
                    continue
                   }
                   break;
                  };
                  if (($14 | 0) < 1) {
                   break label$231
                  }
                  $5 = $14 >>> 0 < 256;
                  memset($10 - -64 | 0, 48, $5 ? $14 : 256);
                  $6 = HEAP32[$0 >> 2];
                  $7 = $6 & 32;
                  label$243 : {
                   if (!$5) {
                    $5 = !$7;
                    $7 = $14;
                    while (1) {
                     if ($5 & 1) {
                      __fwritex($10 - -64 | 0, 256, $0);
                      $6 = HEAP32[$0 >> 2];
                     }
                     $8 = $6 & 32;
                     $5 = !$8;
                     $7 = $7 + -256 | 0;
                     if ($7 >>> 0 > 255) {
                      continue
                     }
                     break;
                    };
                    if ($8) {
                     break label$231
                    }
                    $14 = $14 & 255;
                    break label$243;
                   }
                   if ($7) {
                    break label$231
                   }
                  }
                  __fwritex($10 - -64 | 0, $14, $0);
                 }
                 if (HEAPU8[$0 | 0] & 32) {
                  break label$209
                 }
                 __fwritex($34, $29 - $34 | 0, $0);
                }
                label$247 : {
                 if (($16 | 0) != 8192) {
                  break label$247
                 }
                 if (($15 | 0) <= ($21 | 0)) {
                  break label$247
                 }
                 $9 = $15 - $21 | 0;
                 $5 = $9 >>> 0 < 256;
                 memset($10 - -64 | 0, 32, $5 ? $9 : 256);
                 $6 = HEAP32[$0 >> 2];
                 $7 = $6 & 32;
                 label$248 : {
                  if (!$5) {
                   $5 = !$7;
                   $7 = $9;
                   while (1) {
                    if ($5 & 1) {
                     __fwritex($10 - -64 | 0, 256, $0);
                     $6 = HEAP32[$0 >> 2];
                    }
                    $8 = $6 & 32;
                    $5 = !$8;
                    $7 = $7 + -256 | 0;
                    if ($7 >>> 0 > 255) {
                     continue
                    }
                    break;
                   };
                   if ($8) {
                    break label$247
                   }
                   $9 = $9 & 255;
                   break label$248;
                  }
                  if ($7) {
                   break label$247
                  }
                 }
                 __fwritex($10 - -64 | 0, $9, $0);
                }
                $5 = ($15 | 0) > ($21 | 0) ? $15 : $21;
               }
               if (($5 | 0) >= 0) {
                continue label$4
               }
               break label$3;
              }
              $19 = 0;
              $23 = 4678;
             }
             $5 = $27;
             break label$5;
            }
            $16 = $12;
            $9 = $6;
            if (!HEAPU8[$5 | 0]) {
             break label$5
            }
            break label$3;
           }
           $5 = HEAPU8[$1 + 1 | 0];
           $1 = $1 + 1 | 0;
           continue;
          }
         }
         if ($0) {
          break label$1
         }
         if (!$30) {
          $24 = 0;
          break label$1;
         }
         $1 = HEAP32[$4 + 4 >> 2];
         $0 = 1;
         label$253 : {
          if (!$1) {
           break label$253
          }
          pop_arg($3 + 8 | 0, $1, $2);
          $1 = HEAP32[$4 + 8 >> 2];
          $0 = 2;
          if (!$1) {
           break label$253
          }
          pop_arg($3 + 16 | 0, $1, $2);
          $1 = HEAP32[$4 + 12 >> 2];
          $0 = 3;
          if (!$1) {
           break label$253
          }
          pop_arg($3 + 24 | 0, $1, $2);
          $1 = HEAP32[$4 + 16 >> 2];
          $0 = 4;
          if (!$1) {
           break label$253
          }
          pop_arg($3 + 32 | 0, $1, $2);
          $1 = HEAP32[$4 + 20 >> 2];
          $0 = 5;
          if (!$1) {
           break label$253
          }
          pop_arg($3 + 40 | 0, $1, $2);
          $1 = HEAP32[$4 + 24 >> 2];
          $0 = 6;
          if (!$1) {
           break label$253
          }
          pop_arg($3 + 48 | 0, $1, $2);
          $1 = HEAP32[$4 + 28 >> 2];
          $0 = 7;
          if (!$1) {
           break label$253
          }
          pop_arg($3 + 56 | 0, $1, $2);
          $1 = HEAP32[$4 + 32 >> 2];
          $0 = 8;
          if (!$1) {
           break label$253
          }
          pop_arg($3 - -64 | 0, $1, $2);
          $1 = HEAP32[$4 + 36 >> 2];
          if ($1) {
           break label$6
          }
          $0 = 9;
         }
         $1 = $0 << 2;
         while (1) {
          if (HEAP32[$1 + $4 >> 2]) {
           break label$7
          }
          $1 = $1 + 4 | 0;
          if (($1 | 0) != 40) {
           continue
          }
          break;
         };
         $24 = 1;
         break label$1;
        }
        HEAP32[256] = 28;
        break label$2;
       }
       pop_arg($3 + 72 | 0, $1, $2);
       $24 = 1;
       break label$1;
      }
      $20 = $5 - $8 | 0;
      $21 = ($9 | 0) < ($20 | 0) ? $20 : $9;
      if (($21 | 0) > (2147483647 - $19 | 0)) {
       break label$3
      }
      $13 = $19 + $21 | 0;
      $5 = ($15 | 0) < ($13 | 0) ? $13 : $15;
      if (($5 | 0) > ($7 | 0)) {
       break label$3
      }
      $16 = $16 & 73728;
      label$263 : {
       if ($16) {
        break label$263
       }
       if (($13 | 0) >= ($15 | 0)) {
        break label$263
       }
       $14 = $5 - $13 | 0;
       $7 = $14 >>> 0 < 256;
       memset($10 - -64 | 0, 32, $7 ? $14 : 256);
       $11 = HEAP32[$0 >> 2];
       $6 = $11 & 32;
       label$264 : {
        if (!$7) {
         $7 = !$6;
         $6 = $14;
         while (1) {
          if ($7 & 1) {
           __fwritex($10 - -64 | 0, 256, $0);
           $11 = HEAP32[$0 >> 2];
          }
          $12 = $11 & 32;
          $7 = !$12;
          $6 = $6 + -256 | 0;
          if ($6 >>> 0 > 255) {
           continue
          }
          break;
         };
         if ($12) {
          break label$263
         }
         $14 = $14 & 255;
         break label$264;
        }
        if ($6) {
         break label$263
        }
       }
       __fwritex($10 - -64 | 0, $14, $0);
      }
      if (!(HEAPU8[$0 | 0] & 32)) {
       __fwritex($23, $19, $0)
      }
      label$269 : {
       if (($16 | 0) != 65536) {
        break label$269
       }
       if (($13 | 0) >= ($15 | 0)) {
        break label$269
       }
       $19 = $5 - $13 | 0;
       $7 = $19 >>> 0 < 256;
       memset($10 - -64 | 0, 48, $7 ? $19 : 256);
       $11 = HEAP32[$0 >> 2];
       $6 = $11 & 32;
       label$270 : {
        if (!$7) {
         $7 = !$6;
         $6 = $19;
         while (1) {
          if ($7 & 1) {
           __fwritex($10 - -64 | 0, 256, $0);
           $11 = HEAP32[$0 >> 2];
          }
          $12 = $11 & 32;
          $7 = !$12;
          $6 = $6 + -256 | 0;
          if ($6 >>> 0 > 255) {
           continue
          }
          break;
         };
         if ($12) {
          break label$269
         }
         $19 = $19 & 255;
         break label$270;
        }
        if ($6) {
         break label$269
        }
       }
       __fwritex($10 - -64 | 0, $19, $0);
      }
      label$274 : {
       if (($20 | 0) >= ($9 | 0)) {
        break label$274
       }
       $12 = $21 - $20 | 0;
       $7 = $12 >>> 0 < 256;
       memset($10 - -64 | 0, 48, $7 ? $12 : 256);
       $9 = HEAP32[$0 >> 2];
       $6 = $9 & 32;
       label$275 : {
        if (!$7) {
         $7 = !$6;
         $6 = $12;
         while (1) {
          if ($7 & 1) {
           __fwritex($10 - -64 | 0, 256, $0);
           $9 = HEAP32[$0 >> 2];
          }
          $11 = $9 & 32;
          $7 = !$11;
          $6 = $6 + -256 | 0;
          if ($6 >>> 0 > 255) {
           continue
          }
          break;
         };
         if ($11) {
          break label$274
         }
         $12 = $12 & 255;
         break label$275;
        }
        if ($6) {
         break label$274
        }
       }
       __fwritex($10 - -64 | 0, $12, $0);
      }
      if (!(HEAPU8[$0 | 0] & 32)) {
       __fwritex($8, $20, $0)
      }
      if (($16 | 0) != 8192) {
       continue
      }
      if (($13 | 0) >= ($15 | 0)) {
       continue
      }
      $9 = $5 - $13 | 0;
      $7 = $9 >>> 0 < 256;
      memset($10 - -64 | 0, 32, $7 ? $9 : 256);
      $8 = HEAP32[$0 >> 2];
      $6 = $8 & 32;
      label$280 : {
       if (!$7) {
        $7 = !$6;
        $6 = $9;
        while (1) {
         if ($7 & 1) {
          __fwritex($10 - -64 | 0, 256, $0);
          $8 = HEAP32[$0 >> 2];
         }
         $15 = $8 & 32;
         $7 = !$15;
         $6 = $6 + -256 | 0;
         if ($6 >>> 0 > 255) {
          continue
         }
         break;
        };
        if ($15) {
         continue
        }
        $9 = $9 & 255;
        break label$280;
       }
       if ($6) {
        continue
       }
      }
      __fwritex($10 - -64 | 0, $9, $0);
      continue;
     }
     break;
    };
    HEAP32[256] = 61;
   }
   $24 = -1;
  }
  global$0 = $10 + 880 | 0;
  return $24;
 }
 
 function pop_arg($0, $1, $2) {
  $1 = $1 + -9 | 0;
  if ($1 >>> 0 <= 17) {
   label$2 : {
    switch ($1 - 1 | 0) {
    case 0:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $1 = HEAP32[$1 >> 2];
     $2 = $1 >> 31;
     HEAP32[$0 >> 2] = $1;
     HEAP32[$0 + 4 >> 2] = $2;
     return;
    case 1:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 3:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $1 = HEAP32[$1 >> 2];
     $2 = $1 >> 31;
     HEAP32[$0 >> 2] = $1;
     HEAP32[$0 + 4 >> 2] = $2;
     return;
    case 4:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 2:
     $1 = HEAP32[$2 >> 2] + 7 & -8;
     HEAP32[$2 >> 2] = $1 + 8;
     $2 = HEAP32[$1 + 4 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$0 + 4 >> 2] = $2;
     return;
    case 5:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $2 = HEAP16[$1 >> 1];
     $1 = $2 >> 31;
     HEAP32[$0 >> 2] = $2;
     HEAP32[$0 + 4 >> 2] = $1;
     return;
    case 6:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAPU16[$1 >> 1];
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 7:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $2 = HEAP8[$1 | 0];
     $1 = $2 >> 31;
     HEAP32[$0 >> 2] = $2;
     HEAP32[$0 + 4 >> 2] = $1;
     return;
    case 8:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAPU8[$1 | 0];
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 9:
     $1 = HEAP32[$2 >> 2] + 7 & -8;
     HEAP32[$2 >> 2] = $1 + 8;
     $2 = HEAP32[$1 >> 2];
     $1 = HEAP32[$1 + 4 >> 2];
     HEAP32[$0 >> 2] = $2;
     HEAP32[$0 + 4 >> 2] = $1;
     return;
    case 10:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 11:
     $1 = HEAP32[$2 >> 2] + 7 & -8;
     HEAP32[$2 >> 2] = $1 + 8;
     $2 = HEAP32[$1 >> 2];
     $1 = HEAP32[$1 + 4 >> 2];
     HEAP32[$0 >> 2] = $2;
     HEAP32[$0 + 4 >> 2] = $1;
     return;
    case 12:
     $1 = HEAP32[$2 >> 2] + 7 & -8;
     HEAP32[$2 >> 2] = $1 + 8;
     $2 = HEAP32[$1 + 4 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$0 + 4 >> 2] = $2;
     return;
    case 13:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     $2 = HEAP32[$1 >> 2];
     $1 = $2 >> 31;
     HEAP32[$0 >> 2] = $2;
     HEAP32[$0 + 4 >> 2] = $1;
     return;
    case 14:
     $1 = HEAP32[$2 >> 2];
     HEAP32[$2 >> 2] = $1 + 4;
     HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
     HEAP32[$0 + 4 >> 2] = 0;
     return;
    case 15:
     $1 = HEAP32[$2 >> 2] + 7 & -8;
     HEAP32[$2 >> 2] = $1 + 8;
     $2 = HEAP32[$1 >> 2];
     $1 = HEAP32[$1 + 4 >> 2];
     HEAP32[$0 >> 2] = $2;
     HEAP32[$0 + 4 >> 2] = $1;
     return;
    case 16:
     fputs();
     abort();
    default:
     break label$2;
    };
   }
   $1 = HEAP32[$2 >> 2];
   HEAP32[$2 >> 2] = $1 + 4;
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  }
 }
 
 function fprintf($0) {
  var $1 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  HEAP32[$1 + 12 >> 2] = 0;
  vfprintf($0, 5365, 0);
  global$0 = $1 + 16 | 0;
 }
 
 function abort_message() {
  var $0 = 0;
  $0 = global$0 - 16 | 0;
  global$0 = $0;
  HEAP32[$0 + 12 >> 2] = 5367;
  HEAP32[$0 + 8 >> 2] = 0;
  vfprintf(HEAP32[752], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 8 >> 2]);
  fprintf(HEAP32[752]);
  abort();
 }
 
 function __cxa_pure_virtual() {
  abort_message();
  abort();
 }
 
 function sbrk($0) {
  label$1 : {
   if ($0 & 65535) {
    break label$1
   }
   if (($0 | 0) <= -1) {
    break label$1
   }
   $0 = __wasm_memory_grow($0 >>> 16);
   if (($0 | 0) == -1) {
    HEAP32[256] = 48;
    return -1;
   }
   return $0 << 16;
  }
  abort();
 }
 
 function dlmalloc($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $11 = global$0 - 16 | 0;
  global$0 = $11;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             if ($0 >>> 0 <= 236) {
              $6 = HEAP32[266];
              $4 = $0 >>> 0 < 11 ? 16 : $0 + 19 & -16;
              $1 = $4 >>> 3;
              $0 = $6 >>> $1;
              if ($0 & 3) {
               $4 = ($1 | $0 & 1) ^ 1;
               $2 = $4 << 3;
               $1 = HEAP32[$2 + 1112 >> 2];
               $0 = $1 + 8 | 0;
               $3 = HEAP32[$1 + 8 >> 2];
               $2 = $2 + 1104 | 0;
               label$14 : {
                if (($3 | 0) == ($2 | 0)) {
                 (wasm2js_i32$0 = 1064, wasm2js_i32$1 = __wasm_rotl_i32($4) & $6), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
                 break label$14;
                }
                HEAP32[$2 + 8 >> 2] = $3;
                HEAP32[$3 + 12 >> 2] = $2;
               }
               $3 = $4 << 3;
               HEAP32[$1 + 4 >> 2] = $3 | 3;
               $1 = $1 + $3 | 0;
               HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] | 1;
               break label$1;
              }
              $8 = HEAP32[268];
              if ($4 >>> 0 <= $8 >>> 0) {
               break label$11
              }
              if ($0) {
               $3 = $0 << $1;
               $0 = 2 << $1;
               $0 = $3 & ($0 | 0 - $0);
               $0 = ($0 & 0 - $0) + -1 | 0;
               $1 = $0;
               $0 = $0 >>> 12 & 16;
               $1 = $1 >>> $0;
               $3 = $1 >>> 5 & 8;
               $2 = $3 | $0;
               $0 = $1 >>> $3;
               $1 = $0 >>> 2 & 4;
               $3 = $2 | $1;
               $0 = $0 >>> $1;
               $1 = $0 >>> 1 & 2;
               $3 = $3 | $1;
               $0 = $0 >>> $1;
               $1 = $0 >>> 1 & 1;
               $3 = ($3 | $1) + ($0 >>> $1) | 0;
               $2 = $3 << 3;
               $1 = HEAP32[$2 + 1112 >> 2];
               $0 = HEAP32[$1 + 8 >> 2];
               $2 = $2 + 1104 | 0;
               label$17 : {
                if (($0 | 0) == ($2 | 0)) {
                 $6 = __wasm_rotl_i32($3) & $6;
                 HEAP32[266] = $6;
                 break label$17;
                }
                HEAP32[$2 + 8 >> 2] = $0;
                HEAP32[$0 + 12 >> 2] = $2;
               }
               $0 = $1 + 8 | 0;
               HEAP32[$1 + 4 >> 2] = $4 | 3;
               $3 = $3 << 3;
               $2 = $3 + $1 | 0;
               $3 = $3 - $4 | 0;
               HEAP32[$2 >> 2] = $3;
               $2 = $1 + $4 | 0;
               HEAP32[$2 + 4 >> 2] = $3 | 1;
               if ($8) {
                $5 = $8 >>> 3;
                $4 = ($5 << 3) + 1104 | 0;
                $1 = HEAP32[271];
                $5 = 1 << $5;
                label$20 : {
                 if (!($5 & $6)) {
                  HEAP32[266] = $5 | $6;
                  $5 = $4;
                  break label$20;
                 }
                 $5 = HEAP32[$4 + 8 >> 2];
                }
                HEAP32[$5 + 12 >> 2] = $1;
                HEAP32[$4 + 8 >> 2] = $1;
                HEAP32[$1 + 12 >> 2] = $4;
                HEAP32[$1 + 8 >> 2] = $5;
               }
               HEAP32[271] = $2;
               HEAP32[268] = $3;
               break label$1;
              }
              $9 = HEAP32[267];
              if (!$9) {
               break label$11
              }
              $0 = (0 - $9 & $9) + -1 | 0;
              $1 = $0;
              $0 = $0 >>> 12 & 16;
              $1 = $1 >>> $0;
              $3 = $1 >>> 5 & 8;
              $2 = $3 | $0;
              $0 = $1 >>> $3;
              $1 = $0 >>> 2 & 4;
              $3 = $2 | $1;
              $0 = $0 >>> $1;
              $1 = $0 >>> 1 & 2;
              $3 = $3 | $1;
              $0 = $0 >>> $1;
              $1 = $0 >>> 1 & 1;
              $2 = HEAP32[(($3 | $1) + ($0 >>> $1) << 2) + 1368 >> 2];
              $1 = (HEAP32[$2 + 4 >> 2] & -8) - $4 | 0;
              $3 = $2;
              while (1) {
               label$22 : {
                $0 = HEAP32[$3 + 16 >> 2];
                if (!$0) {
                 $0 = HEAP32[$3 + 20 >> 2];
                 if (!$0) {
                  break label$22
                 }
                }
                $3 = (HEAP32[$0 + 4 >> 2] & -8) - $4 | 0;
                $5 = $3;
                $3 = $3 >>> 0 < $1 >>> 0;
                $1 = $3 ? $5 : $1;
                $2 = $3 ? $0 : $2;
                $3 = $0;
                continue;
               }
               break;
              };
              $10 = HEAP32[$2 + 24 >> 2];
              $5 = HEAP32[$2 + 12 >> 2];
              if (($5 | 0) != ($2 | 0)) {
               $0 = HEAP32[$2 + 8 >> 2];
               label$26 : {
                if (HEAPU32[270] > $0 >>> 0) {
                 break label$26
                }
               }
               HEAP32[$5 + 8 >> 2] = $0;
               HEAP32[$0 + 12 >> 2] = $5;
               break label$2;
              }
              $3 = $2 + 20 | 0;
              $0 = HEAP32[$3 >> 2];
              if (!$0) {
               $0 = HEAP32[$2 + 16 >> 2];
               if (!$0) {
                break label$10
               }
               $3 = $2 + 16 | 0;
              }
              while (1) {
               $7 = $3;
               $5 = $0;
               $3 = $0 + 20 | 0;
               $0 = HEAP32[$3 >> 2];
               if ($0) {
                continue
               }
               $3 = $5 + 16 | 0;
               $0 = HEAP32[$5 + 16 >> 2];
               if ($0) {
                continue
               }
               break;
              };
              HEAP32[$7 >> 2] = 0;
              break label$2;
             }
             $4 = -1;
             if ($0 >>> 0 > 4294967231) {
              break label$11
             }
             $0 = $0 + 19 | 0;
             $4 = $0 & -16;
             $8 = HEAP32[267];
             if (!$8) {
              break label$11
             }
             $0 = $0 >>> 8;
             $7 = 0;
             label$29 : {
              if (!$0) {
               break label$29
              }
              $7 = 31;
              if ($4 >>> 0 > 16777215) {
               break label$29
              }
              $1 = $0 + 1048320 >>> 16 & 8;
              $0 = $0 << $1;
              $3 = $0;
              $0 = $0 + 520192 >>> 16 & 4;
              $3 = $3 << $0;
              $2 = $3;
              $3 = $3 + 245760 >>> 16 & 2;
              $0 = ($2 << $3 >>> 15) - ($3 | ($0 | $1)) | 0;
              $7 = ($0 << 1 | $4 >>> $0 + 21 & 1) + 28 | 0;
             }
             $3 = 0 - $4 | 0;
             $1 = HEAP32[($7 << 2) + 1368 >> 2];
             label$30 : {
              label$31 : {
               label$32 : {
                if (!$1) {
                 $0 = 0;
                 break label$32;
                }
                $2 = $4 << (($7 | 0) == 31 ? 0 : 25 - ($7 >>> 1) | 0);
                $0 = 0;
                while (1) {
                 label$35 : {
                  $6 = (HEAP32[$1 + 4 >> 2] & -8) - $4 | 0;
                  if ($6 >>> 0 >= $3 >>> 0) {
                   break label$35
                  }
                  $5 = $1;
                  $3 = $6;
                  if ($3) {
                   break label$35
                  }
                  $3 = 0;
                  $0 = $1;
                  break label$31;
                 }
                 $6 = HEAP32[$1 + 20 >> 2];
                 $1 = HEAP32[(($2 >>> 29 & 4) + $1 | 0) + 16 >> 2];
                 $0 = $6 ? (($1 | 0) == ($6 | 0) ? $0 : $6) : $0;
                 $2 = $2 << (($1 | 0) != 0);
                 if ($1) {
                  continue
                 }
                 break;
                };
               }
               if (!($0 | $5)) {
                $0 = 2 << $7;
                $0 = $8 & ($0 | 0 - $0);
                if (!$0) {
                 break label$11
                }
                $0 = (0 - $0 & $0) + -1 | 0;
                $1 = $0;
                $0 = $0 >>> 12 & 16;
                $1 = $1 >>> $0;
                $2 = $1 >>> 5 & 8;
                $6 = $2 | $0;
                $0 = $1 >>> $2;
                $1 = $0 >>> 2 & 4;
                $2 = $6 | $1;
                $0 = $0 >>> $1;
                $1 = $0 >>> 1 & 2;
                $2 = $2 | $1;
                $0 = $0 >>> $1;
                $1 = $0 >>> 1 & 1;
                $0 = HEAP32[(($2 | $1) + ($0 >>> $1) << 2) + 1368 >> 2];
               }
               if (!$0) {
                break label$30
               }
              }
              while (1) {
               $6 = (HEAP32[$0 + 4 >> 2] & -8) - $4 | 0;
               $2 = $6 >>> 0 < $3 >>> 0;
               $3 = $2 ? $6 : $3;
               $5 = $2 ? $0 : $5;
               $1 = HEAP32[$0 + 16 >> 2];
               if ($1) {
                $0 = $1
               } else {
                $0 = HEAP32[$0 + 20 >> 2]
               }
               if ($0) {
                continue
               }
               break;
              };
             }
             if (!$5) {
              break label$11
             }
             if ($3 >>> 0 >= HEAP32[268] - $4 >>> 0) {
              break label$11
             }
             $7 = HEAP32[$5 + 24 >> 2];
             $2 = HEAP32[$5 + 12 >> 2];
             if (($2 | 0) != ($5 | 0)) {
              $0 = HEAP32[$5 + 8 >> 2];
              label$40 : {
               if (HEAPU32[270] > $0 >>> 0) {
                break label$40
               }
              }
              HEAP32[$2 + 8 >> 2] = $0;
              HEAP32[$0 + 12 >> 2] = $2;
              break label$3;
             }
             $1 = $5 + 20 | 0;
             $0 = HEAP32[$1 >> 2];
             if (!$0) {
              $0 = HEAP32[$5 + 16 >> 2];
              if (!$0) {
               break label$9
              }
              $1 = $5 + 16 | 0;
             }
             while (1) {
              $6 = $1;
              $2 = $0;
              $1 = $0 + 20 | 0;
              $0 = HEAP32[$1 >> 2];
              if ($0) {
               continue
              }
              $1 = $2 + 16 | 0;
              $0 = HEAP32[$2 + 16 >> 2];
              if ($0) {
               continue
              }
              break;
             };
             HEAP32[$6 >> 2] = 0;
             break label$3;
            }
            $0 = HEAP32[268];
            if ($0 >>> 0 >= $4 >>> 0) {
             $1 = HEAP32[271];
             $3 = $0 - $4 | 0;
             label$44 : {
              if ($3 >>> 0 >= 16) {
               $2 = $1 + $4 | 0;
               HEAP32[$2 + 4 >> 2] = $3 | 1;
               HEAP32[268] = $3;
               HEAP32[271] = $2;
               HEAP32[$0 + $1 >> 2] = $3;
               HEAP32[$1 + 4 >> 2] = $4 | 3;
               break label$44;
              }
              HEAP32[$1 + 4 >> 2] = $0 | 3;
              $0 = $0 + $1 | 0;
              HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
              HEAP32[271] = 0;
              HEAP32[268] = 0;
             }
             $0 = $1 + 8 | 0;
             break label$1;
            }
            $2 = HEAP32[269];
            if ($2 >>> 0 > $4 >>> 0) {
             $0 = HEAP32[272];
             $1 = $4 + $0 | 0;
             $3 = $2 - $4 | 0;
             HEAP32[$1 + 4 >> 2] = $3 | 1;
             HEAP32[269] = $3;
             HEAP32[272] = $1;
             HEAP32[$0 + 4 >> 2] = $4 | 3;
             $0 = $0 + 8 | 0;
             break label$1;
            }
            if (HEAP32[384]) {
             $1 = HEAP32[386]
            } else {
             $0 = 0;
             HEAP32[$0 + 1548 >> 2] = -1;
             HEAP32[$0 + 1552 >> 2] = -1;
             HEAP32[0 + 1540 >> 2] = 65536;
             HEAP32[$0 + 1544 >> 2] = 65536;
             HEAP32[384] = $11 + 12 & -16 ^ 1431655768;
             HEAP32[389] = 0;
             HEAP32[377] = 0;
             $1 = 65536;
            }
            $0 = 0;
            $8 = $4 + 71 | 0;
            $6 = $8 + $1 | 0;
            $7 = 0 - $1 | 0;
            $5 = $6 & $7;
            if ($5 >>> 0 <= $4 >>> 0) {
             HEAP32[256] = 48;
             break label$1;
            }
            label$50 : {
             $0 = HEAP32[376];
             if (!$0) {
              break label$50
             }
             $1 = HEAP32[374];
             $3 = $5 + $1 | 0;
             if ($3 >>> 0 <= $0 >>> 0 ? $3 >>> 0 > $1 >>> 0 : 0) {
              break label$50
             }
             $0 = 0;
             HEAP32[256] = 48;
             break label$1;
            }
            if (HEAPU8[1508] & 4) {
             break label$6
            }
            label$52 : {
             label$53 : {
              $1 = HEAP32[272];
              if ($1) {
               $0 = 1512;
               while (1) {
                $3 = HEAP32[$0 >> 2];
                if (HEAP32[$0 + 4 >> 2] + $3 >>> 0 > $1 >>> 0 ? $3 >>> 0 <= $1 >>> 0 : 0) {
                 break label$53
                }
                $0 = HEAP32[$0 + 8 >> 2];
                if ($0) {
                 continue
                }
                break;
               };
              }
              $2 = sbrk(0);
              if (($2 | 0) == -1) {
               break label$7
              }
              $6 = $5;
              $0 = HEAP32[385];
              $1 = $0 + -1 | 0;
              if ($2 & $1) {
               $6 = ($5 - $2 | 0) + ($1 + $2 & 0 - $0) | 0
              }
              if ($6 >>> 0 <= $4 >>> 0) {
               break label$7
              }
              if ($6 >>> 0 > 2147483646) {
               break label$7
              }
              $0 = HEAP32[376];
              if ($0) {
               $1 = HEAP32[374];
               $3 = $6 + $1 | 0;
               if ($3 >>> 0 <= $1 >>> 0) {
                break label$7
               }
               if ($3 >>> 0 > $0 >>> 0) {
                break label$7
               }
              }
              $0 = sbrk($6);
              if (($2 | 0) != ($0 | 0)) {
               break label$52
              }
              break label$5;
             }
             $6 = $7 & $6 - $2;
             if ($6 >>> 0 > 2147483646) {
              break label$7
             }
             $2 = sbrk($6);
             if (($2 | 0) == (HEAP32[$0 >> 2] + HEAP32[$0 + 4 >> 2] | 0)) {
              break label$8
             }
             $0 = $2;
            }
            $2 = $0;
            label$59 : {
             if ($4 + 72 >>> 0 <= $6 >>> 0) {
              break label$59
             }
             if ($6 >>> 0 > 2147483646) {
              break label$59
             }
             if (($2 | 0) == -1) {
              break label$59
             }
             $0 = HEAP32[386];
             $0 = $0 + ($8 - $6 | 0) & 0 - $0;
             if ($0 >>> 0 > 2147483646) {
              break label$5
             }
             if ((sbrk($0) | 0) != -1) {
              $6 = $0 + $6 | 0;
              break label$5;
             }
             sbrk(0 - $6 | 0);
             break label$7;
            }
            if (($2 | 0) != -1) {
             break label$5
            }
            break label$7;
           }
           $5 = 0;
           break label$2;
          }
          $2 = 0;
          break label$3;
         }
         if (($2 | 0) != -1) {
          break label$5
         }
        }
        HEAP32[377] = HEAP32[377] | 4;
       }
       if ($5 >>> 0 > 2147483646) {
        break label$4
       }
       $2 = sbrk($5);
       $0 = sbrk(0);
       if ($2 >>> 0 >= $0 >>> 0) {
        break label$4
       }
       if (($2 | 0) == -1) {
        break label$4
       }
       if (($0 | 0) == -1) {
        break label$4
       }
       $6 = $0 - $2 | 0;
       if ($6 >>> 0 <= $4 + 56 >>> 0) {
        break label$4
       }
      }
      $0 = $6 + HEAP32[374] | 0;
      HEAP32[374] = $0;
      if ($0 >>> 0 > HEAPU32[375]) {
       HEAP32[375] = $0
      }
      label$62 : {
       label$63 : {
        label$64 : {
         $1 = HEAP32[272];
         if ($1) {
          $0 = 1512;
          while (1) {
           $3 = HEAP32[$0 >> 2];
           $5 = HEAP32[$0 + 4 >> 2];
           if (($3 + $5 | 0) == ($2 | 0)) {
            break label$64
           }
           $0 = HEAP32[$0 + 8 >> 2];
           if ($0) {
            continue
           }
           break;
          };
          break label$63;
         }
         $0 = HEAP32[270];
         if (!($2 >>> 0 >= $0 >>> 0 ? !!$0 : 0)) {
          HEAP32[270] = $2
         }
         $0 = 0;
         HEAP32[379] = $6;
         HEAP32[378] = $2;
         HEAP32[274] = -1;
         HEAP32[275] = HEAP32[384];
         HEAP32[381] = 0;
         while (1) {
          $1 = $0 + 1104 | 0;
          HEAP32[$0 + 1112 >> 2] = $1;
          HEAP32[$0 + 1116 >> 2] = $1;
          $0 = $0 + 8 | 0;
          if (($0 | 0) != 256) {
           continue
          }
          break;
         };
         $0 = $2 + 8 & 15 ? -8 - $2 & 15 : 0;
         $1 = $0 + $2 | 0;
         $3 = $6 + -56 | 0;
         $0 = $3 - $0 | 0;
         HEAP32[$1 + 4 >> 2] = $0 | 1;
         HEAP32[273] = HEAP32[388];
         HEAP32[269] = $0;
         HEAP32[272] = $1;
         HEAP32[($2 + $3 | 0) + 4 >> 2] = 56;
         break label$62;
        }
        if (HEAPU8[$0 + 12 | 0] & 8) {
         break label$63
        }
        if ($2 >>> 0 <= $1 >>> 0) {
         break label$63
        }
        if ($3 >>> 0 > $1 >>> 0) {
         break label$63
        }
        $3 = $1 + 8 & 15 ? -8 - $1 & 15 : 0;
        $2 = $3 + $1 | 0;
        $7 = $6 + HEAP32[269] | 0;
        $3 = $7 - $3 | 0;
        HEAP32[$2 + 4 >> 2] = $3 | 1;
        HEAP32[$0 + 4 >> 2] = $5 + $6;
        HEAP32[273] = HEAP32[388];
        HEAP32[269] = $3;
        HEAP32[272] = $2;
        HEAP32[($1 + $7 | 0) + 4 >> 2] = 56;
        break label$62;
       }
       $5 = HEAP32[270];
       if ($2 >>> 0 < $5 >>> 0) {
        HEAP32[270] = $2;
        $5 = $2;
       }
       $3 = $2 + $6 | 0;
       $0 = 1512;
       label$71 : {
        label$72 : {
         label$73 : {
          label$74 : {
           label$75 : {
            label$76 : {
             while (1) {
              if (HEAP32[$0 >> 2] != ($3 | 0)) {
               $0 = HEAP32[$0 + 8 >> 2];
               if ($0) {
                continue
               }
               break label$76;
              }
              break;
             };
             if (!(HEAPU8[$0 + 12 | 0] & 8)) {
              break label$75
             }
            }
            $0 = 1512;
            while (1) {
             $3 = HEAP32[$0 >> 2];
             if ($3 >>> 0 <= $1 >>> 0) {
              $3 = HEAP32[$0 + 4 >> 2] + $3 | 0;
              if ($3 >>> 0 > $1 >>> 0) {
               break label$74
              }
             }
             $0 = HEAP32[$0 + 8 >> 2];
             continue;
            };
           }
           HEAP32[$0 >> 2] = $2;
           HEAP32[$0 + 4 >> 2] = $6 + HEAP32[$0 + 4 >> 2];
           $7 = ($2 + 8 & 15 ? -8 - $2 & 15 : 0) + $2 | 0;
           HEAP32[$7 + 4 >> 2] = $4 | 3;
           $2 = ($3 + 8 & 15 ? -8 - $3 & 15 : 0) + $3 | 0;
           $0 = ($2 - $7 | 0) - $4 | 0;
           $3 = $4 + $7 | 0;
           if (($1 | 0) == ($2 | 0)) {
            HEAP32[272] = $3;
            $0 = $0 + HEAP32[269] | 0;
            HEAP32[269] = $0;
            HEAP32[$3 + 4 >> 2] = $0 | 1;
            break label$72;
           }
           if (HEAP32[271] == ($2 | 0)) {
            HEAP32[271] = $3;
            $0 = $0 + HEAP32[268] | 0;
            HEAP32[268] = $0;
            HEAP32[$3 + 4 >> 2] = $0 | 1;
            HEAP32[$0 + $3 >> 2] = $0;
            break label$72;
           }
           $1 = HEAP32[$2 + 4 >> 2];
           if (($1 & 3) == 1) {
            $8 = $1 & -8;
            label$84 : {
             if ($1 >>> 0 <= 255) {
              $4 = HEAP32[$2 + 12 >> 2];
              $6 = HEAP32[$2 + 8 >> 2];
              $9 = $1 >>> 3;
              $1 = ($9 << 3) + 1104 | 0;
              label$86 : {
               if (($6 | 0) == ($1 | 0)) {
                break label$86
               }
              }
              if (($4 | 0) == ($6 | 0)) {
               (wasm2js_i32$0 = 1064, wasm2js_i32$1 = HEAP32[266] & __wasm_rotl_i32($9)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break label$84;
              }
              label$88 : {
               if (($1 | 0) == ($4 | 0)) {
                break label$88
               }
              }
              HEAP32[$4 + 8 >> 2] = $6;
              HEAP32[$6 + 12 >> 2] = $4;
              break label$84;
             }
             $9 = HEAP32[$2 + 24 >> 2];
             $6 = HEAP32[$2 + 12 >> 2];
             label$89 : {
              if (($6 | 0) != ($2 | 0)) {
               $1 = HEAP32[$2 + 8 >> 2];
               label$91 : {
                if ($5 >>> 0 > $1 >>> 0) {
                 break label$91
                }
               }
               HEAP32[$6 + 8 >> 2] = $1;
               HEAP32[$1 + 12 >> 2] = $6;
               break label$89;
              }
              label$92 : {
               $1 = $2 + 20 | 0;
               $4 = HEAP32[$1 >> 2];
               if ($4) {
                break label$92
               }
               $1 = $2 + 16 | 0;
               $4 = HEAP32[$1 >> 2];
               if ($4) {
                break label$92
               }
               $6 = 0;
               break label$89;
              }
              while (1) {
               $5 = $1;
               $6 = $4;
               $1 = $4 + 20 | 0;
               $4 = HEAP32[$1 >> 2];
               if ($4) {
                continue
               }
               $1 = $6 + 16 | 0;
               $4 = HEAP32[$6 + 16 >> 2];
               if ($4) {
                continue
               }
               break;
              };
              HEAP32[$5 >> 2] = 0;
             }
             if (!$9) {
              break label$84
             }
             $4 = HEAP32[$2 + 28 >> 2];
             $1 = ($4 << 2) + 1368 | 0;
             label$94 : {
              if (HEAP32[$1 >> 2] == ($2 | 0)) {
               HEAP32[$1 >> 2] = $6;
               if ($6) {
                break label$94
               }
               (wasm2js_i32$0 = 1068, wasm2js_i32$1 = HEAP32[267] & __wasm_rotl_i32($4)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
               break label$84;
              }
              HEAP32[(($2 | 0) == HEAP32[$9 + 16 >> 2] ? 16 : 20) + $9 >> 2] = $6;
              if (!$6) {
               break label$84
              }
             }
             HEAP32[$6 + 24 >> 2] = $9;
             $1 = HEAP32[$2 + 16 >> 2];
             if ($1) {
              HEAP32[$6 + 16 >> 2] = $1;
              HEAP32[$1 + 24 >> 2] = $6;
             }
             $1 = HEAP32[$2 + 20 >> 2];
             if (!$1) {
              break label$84
             }
             HEAP32[$6 + 20 >> 2] = $1;
             HEAP32[$1 + 24 >> 2] = $6;
            }
            $2 = $2 + $8 | 0;
            $0 = $0 + $8 | 0;
           }
           HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] & -2;
           HEAP32[$0 + $3 >> 2] = $0;
           HEAP32[$3 + 4 >> 2] = $0 | 1;
           if ($0 >>> 0 <= 255) {
            $1 = $0 >>> 3;
            $0 = ($1 << 3) + 1104 | 0;
            $4 = HEAP32[266];
            $1 = 1 << $1;
            label$98 : {
             if (!($4 & $1)) {
              HEAP32[266] = $1 | $4;
              $1 = $0;
              break label$98;
             }
             $1 = HEAP32[$0 + 8 >> 2];
            }
            HEAP32[$1 + 12 >> 2] = $3;
            HEAP32[$0 + 8 >> 2] = $3;
            HEAP32[$3 + 12 >> 2] = $0;
            HEAP32[$3 + 8 >> 2] = $1;
            break label$72;
           }
           $5 = $3;
           $4 = $0 >>> 8;
           $1 = 0;
           label$100 : {
            if (!$4) {
             break label$100
            }
            $1 = 31;
            if ($0 >>> 0 > 16777215) {
             break label$100
            }
            $1 = $4 + 1048320 >>> 16 & 8;
            $4 = $4 << $1;
            $2 = $4;
            $4 = $4 + 520192 >>> 16 & 4;
            $2 = $2 << $4;
            $6 = $2;
            $2 = $2 + 245760 >>> 16 & 2;
            $1 = ($6 << $2 >>> 15) - ($2 | ($1 | $4)) | 0;
            $1 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
           }
           HEAP32[$5 + 28 >> 2] = $1;
           HEAP32[$3 + 16 >> 2] = 0;
           HEAP32[$3 + 20 >> 2] = 0;
           $4 = ($1 << 2) + 1368 | 0;
           $2 = HEAP32[267];
           $5 = 1 << $1;
           if (!($2 & $5)) {
            HEAP32[$4 >> 2] = $3;
            HEAP32[267] = $2 | $5;
            HEAP32[$3 + 24 >> 2] = $4;
            HEAP32[$3 + 8 >> 2] = $3;
            HEAP32[$3 + 12 >> 2] = $3;
            break label$72;
           }
           $1 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1) | 0);
           $2 = HEAP32[$4 >> 2];
           while (1) {
            $4 = $2;
            if (($0 | 0) == (HEAP32[$2 + 4 >> 2] & -8)) {
             break label$73
            }
            $2 = $1 >>> 29;
            $1 = $1 << 1;
            $5 = (($2 & 4) + $4 | 0) + 16 | 0;
            $2 = HEAP32[$5 >> 2];
            if ($2) {
             continue
            }
            break;
           };
           HEAP32[$5 >> 2] = $3;
           HEAP32[$3 + 24 >> 2] = $4;
           HEAP32[$3 + 12 >> 2] = $3;
           HEAP32[$3 + 8 >> 2] = $3;
           break label$72;
          }
          $0 = $2 + 8 & 15 ? -8 - $2 & 15 : 0;
          $7 = $0 + $2 | 0;
          $5 = $6 + -56 | 0;
          $0 = $5 - $0 | 0;
          HEAP32[$7 + 4 >> 2] = $0 | 1;
          HEAP32[($2 + $5 | 0) + 4 >> 2] = 56;
          $5 = (($3 + -55 & 15 ? 55 - $3 & 15 : 0) + $3 | 0) + -63 | 0;
          $5 = $5 >>> 0 < $1 + 16 >>> 0 ? $1 : $5;
          HEAP32[$5 + 4 >> 2] = 35;
          HEAP32[273] = HEAP32[388];
          HEAP32[269] = $0;
          HEAP32[272] = $7;
          $0 = 0;
          $8 = HEAP32[$0 + 1520 >> 2];
          $0 = HEAP32[$0 + 1524 >> 2];
          $7 = $5 + 16 | 0;
          HEAP32[$7 >> 2] = $8;
          HEAP32[$7 + 4 >> 2] = $0;
          $0 = 0;
          $8 = HEAP32[$0 + 1512 >> 2];
          $7 = HEAP32[$0 + 1516 >> 2];
          HEAP32[$5 + 8 >> 2] = $8;
          HEAP32[$5 + 12 >> 2] = $7;
          HEAP32[380] = $5 + 8;
          HEAP32[379] = $6;
          HEAP32[378] = $2;
          HEAP32[381] = 0;
          $0 = $5 + 36 | 0;
          while (1) {
           HEAP32[$0 >> 2] = 7;
           $0 = $0 + 4 | 0;
           if ($0 >>> 0 < $3 >>> 0) {
            continue
           }
           break;
          };
          if (($1 | 0) == ($5 | 0)) {
           break label$62
          }
          HEAP32[$5 + 4 >> 2] = HEAP32[$5 + 4 >> 2] & -2;
          $6 = $5 - $1 | 0;
          HEAP32[$5 >> 2] = $6;
          HEAP32[$1 + 4 >> 2] = $6 | 1;
          if ($6 >>> 0 <= 255) {
           $3 = $6 >>> 3;
           $0 = ($3 << 3) + 1104 | 0;
           $2 = HEAP32[266];
           $3 = 1 << $3;
           label$105 : {
            if (!($2 & $3)) {
             HEAP32[266] = $2 | $3;
             $3 = $0;
             break label$105;
            }
            $3 = HEAP32[$0 + 8 >> 2];
           }
           HEAP32[$3 + 12 >> 2] = $1;
           HEAP32[$0 + 8 >> 2] = $1;
           HEAP32[$1 + 12 >> 2] = $0;
           HEAP32[$1 + 8 >> 2] = $3;
           break label$62;
          }
          HEAP32[$1 + 16 >> 2] = 0;
          HEAP32[$1 + 20 >> 2] = 0;
          $7 = $1 + 28 | 0;
          $3 = $6 >>> 8;
          $0 = 0;
          label$107 : {
           if (!$3) {
            break label$107
           }
           $0 = 31;
           if ($6 >>> 0 > 16777215) {
            break label$107
           }
           $0 = $3 + 1048320 >>> 16 & 8;
           $3 = $3 << $0;
           $2 = $3;
           $3 = $3 + 520192 >>> 16 & 4;
           $2 = $2 << $3;
           $5 = $2;
           $2 = $2 + 245760 >>> 16 & 2;
           $0 = ($5 << $2 >>> 15) - ($2 | ($0 | $3)) | 0;
           $0 = ($0 << 1 | $6 >>> $0 + 21 & 1) + 28 | 0;
          }
          HEAP32[$7 >> 2] = $0;
          $3 = ($0 << 2) + 1368 | 0;
          $2 = HEAP32[267];
          $5 = 1 << $0;
          if (!($2 & $5)) {
           HEAP32[$3 >> 2] = $1;
           HEAP32[267] = $2 | $5;
           HEAP32[$1 + 24 >> 2] = $3;
           HEAP32[$1 + 8 >> 2] = $1;
           HEAP32[$1 + 12 >> 2] = $1;
           break label$62;
          }
          $0 = $6 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1) | 0);
          $2 = HEAP32[$3 >> 2];
          while (1) {
           $3 = $2;
           if (($6 | 0) == (HEAP32[$2 + 4 >> 2] & -8)) {
            break label$71
           }
           $2 = $0 >>> 29;
           $0 = $0 << 1;
           $5 = (($2 & 4) + $3 | 0) + 16 | 0;
           $2 = HEAP32[$5 >> 2];
           if ($2) {
            continue
           }
           break;
          };
          HEAP32[$5 >> 2] = $1;
          HEAP32[$1 + 24 >> 2] = $3;
          HEAP32[$1 + 12 >> 2] = $1;
          HEAP32[$1 + 8 >> 2] = $1;
          break label$62;
         }
         $0 = HEAP32[$4 + 8 >> 2];
         HEAP32[$4 + 8 >> 2] = $3;
         HEAP32[$0 + 12 >> 2] = $3;
         HEAP32[$3 + 24 >> 2] = 0;
         HEAP32[$3 + 8 >> 2] = $0;
         HEAP32[$3 + 12 >> 2] = $4;
        }
        $0 = $7 + 8 | 0;
        break label$1;
       }
       $0 = HEAP32[$3 + 8 >> 2];
       HEAP32[$3 + 8 >> 2] = $1;
       HEAP32[$0 + 12 >> 2] = $1;
       HEAP32[$1 + 24 >> 2] = 0;
       HEAP32[$1 + 8 >> 2] = $0;
       HEAP32[$1 + 12 >> 2] = $3;
      }
      $0 = HEAP32[269];
      if ($0 >>> 0 <= $4 >>> 0) {
       break label$4
      }
      $1 = HEAP32[272];
      $3 = $4 + $1 | 0;
      $0 = $0 - $4 | 0;
      HEAP32[$3 + 4 >> 2] = $0 | 1;
      HEAP32[269] = $0;
      HEAP32[272] = $3;
      HEAP32[$1 + 4 >> 2] = $4 | 3;
      $0 = $1 + 8 | 0;
      break label$1;
     }
     $0 = 0;
     HEAP32[256] = 48;
     break label$1;
    }
    label$110 : {
     if (!$7) {
      break label$110
     }
     $1 = HEAP32[$5 + 28 >> 2];
     $0 = ($1 << 2) + 1368 | 0;
     label$111 : {
      if (($5 | 0) == HEAP32[$0 >> 2]) {
       HEAP32[$0 >> 2] = $2;
       if ($2) {
        break label$111
       }
       $8 = __wasm_rotl_i32($1) & $8;
       HEAP32[267] = $8;
       break label$110;
      }
      HEAP32[(($5 | 0) == HEAP32[$7 + 16 >> 2] ? 16 : 20) + $7 >> 2] = $2;
      if (!$2) {
       break label$110
      }
     }
     HEAP32[$2 + 24 >> 2] = $7;
     $0 = HEAP32[$5 + 16 >> 2];
     if ($0) {
      HEAP32[$2 + 16 >> 2] = $0;
      HEAP32[$0 + 24 >> 2] = $2;
     }
     $0 = HEAP32[$5 + 20 >> 2];
     if (!$0) {
      break label$110
     }
     HEAP32[$2 + 20 >> 2] = $0;
     HEAP32[$0 + 24 >> 2] = $2;
    }
    label$114 : {
     if ($3 >>> 0 <= 15) {
      $0 = $3 + $4 | 0;
      HEAP32[$5 + 4 >> 2] = $0 | 3;
      $0 = $0 + $5 | 0;
      HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
      break label$114;
     }
     $2 = $4 + $5 | 0;
     HEAP32[$2 + 4 >> 2] = $3 | 1;
     HEAP32[$5 + 4 >> 2] = $4 | 3;
     HEAP32[$2 + $3 >> 2] = $3;
     if ($3 >>> 0 <= 255) {
      $1 = $3 >>> 3;
      $0 = ($1 << 3) + 1104 | 0;
      $3 = HEAP32[266];
      $1 = 1 << $1;
      label$117 : {
       if (!($3 & $1)) {
        HEAP32[266] = $1 | $3;
        $1 = $0;
        break label$117;
       }
       $1 = HEAP32[$0 + 8 >> 2];
      }
      HEAP32[$1 + 12 >> 2] = $2;
      HEAP32[$0 + 8 >> 2] = $2;
      HEAP32[$2 + 12 >> 2] = $0;
      HEAP32[$2 + 8 >> 2] = $1;
      break label$114;
     }
     $6 = $2;
     $1 = $3 >>> 8;
     $0 = 0;
     label$119 : {
      if (!$1) {
       break label$119
      }
      $0 = 31;
      if ($3 >>> 0 > 16777215) {
       break label$119
      }
      $0 = $1 + 1048320 >>> 16 & 8;
      $1 = $1 << $0;
      $4 = $1;
      $1 = $1 + 520192 >>> 16 & 4;
      $4 = $4 << $1;
      $7 = $4;
      $4 = $4 + 245760 >>> 16 & 2;
      $0 = ($7 << $4 >>> 15) - ($4 | ($0 | $1)) | 0;
      $0 = ($0 << 1 | $3 >>> $0 + 21 & 1) + 28 | 0;
     }
     HEAP32[$6 + 28 >> 2] = $0;
     HEAP32[$2 + 16 >> 2] = 0;
     HEAP32[$2 + 20 >> 2] = 0;
     $1 = ($0 << 2) + 1368 | 0;
     $4 = 1 << $0;
     if (!($4 & $8)) {
      HEAP32[$1 >> 2] = $2;
      HEAP32[267] = $4 | $8;
      HEAP32[$2 + 24 >> 2] = $1;
      HEAP32[$2 + 8 >> 2] = $2;
      HEAP32[$2 + 12 >> 2] = $2;
      break label$114;
     }
     $0 = $3 << (($0 | 0) == 31 ? 0 : 25 - ($0 >>> 1) | 0);
     $4 = HEAP32[$1 >> 2];
     label$122 : {
      while (1) {
       $1 = $4;
       if (($3 | 0) == (HEAP32[$1 + 4 >> 2] & -8)) {
        break label$122
       }
       $4 = $0 >>> 29;
       $0 = $0 << 1;
       $6 = (($4 & 4) + $1 | 0) + 16 | 0;
       $4 = HEAP32[$6 >> 2];
       if ($4) {
        continue
       }
       break;
      };
      HEAP32[$6 >> 2] = $2;
      HEAP32[$2 + 24 >> 2] = $1;
      HEAP32[$2 + 12 >> 2] = $2;
      HEAP32[$2 + 8 >> 2] = $2;
      break label$114;
     }
     $0 = HEAP32[$1 + 8 >> 2];
     HEAP32[$1 + 8 >> 2] = $2;
     HEAP32[$0 + 12 >> 2] = $2;
     HEAP32[$2 + 24 >> 2] = 0;
     HEAP32[$2 + 8 >> 2] = $0;
     HEAP32[$2 + 12 >> 2] = $1;
    }
    $0 = $5 + 8 | 0;
    break label$1;
   }
   label$124 : {
    if (!$10) {
     break label$124
    }
    $3 = HEAP32[$2 + 28 >> 2];
    $0 = ($3 << 2) + 1368 | 0;
    label$125 : {
     if (($2 | 0) == HEAP32[$0 >> 2]) {
      HEAP32[$0 >> 2] = $5;
      if ($5) {
       break label$125
      }
      (wasm2js_i32$0 = 1068, wasm2js_i32$1 = __wasm_rotl_i32($3) & $9), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$124;
     }
     HEAP32[(($2 | 0) == HEAP32[$10 + 16 >> 2] ? 16 : 20) + $10 >> 2] = $5;
     if (!$5) {
      break label$124
     }
    }
    HEAP32[$5 + 24 >> 2] = $10;
    $0 = HEAP32[$2 + 16 >> 2];
    if ($0) {
     HEAP32[$5 + 16 >> 2] = $0;
     HEAP32[$0 + 24 >> 2] = $5;
    }
    $0 = HEAP32[$2 + 20 >> 2];
    if (!$0) {
     break label$124
    }
    HEAP32[$5 + 20 >> 2] = $0;
    HEAP32[$0 + 24 >> 2] = $5;
   }
   label$128 : {
    if ($1 >>> 0 <= 15) {
     $0 = $1 + $4 | 0;
     HEAP32[$2 + 4 >> 2] = $0 | 3;
     $0 = $0 + $2 | 0;
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] | 1;
     break label$128;
    }
    $3 = $2 + $4 | 0;
    HEAP32[$3 + 4 >> 2] = $1 | 1;
    HEAP32[$2 + 4 >> 2] = $4 | 3;
    HEAP32[$1 + $3 >> 2] = $1;
    if ($8) {
     $5 = $8 >>> 3;
     $4 = ($5 << 3) + 1104 | 0;
     $0 = HEAP32[271];
     $5 = 1 << $5;
     label$131 : {
      if (!($6 & $5)) {
       HEAP32[266] = $5 | $6;
       $5 = $4;
       break label$131;
      }
      $5 = HEAP32[$4 + 8 >> 2];
     }
     HEAP32[$5 + 12 >> 2] = $0;
     HEAP32[$4 + 8 >> 2] = $0;
     HEAP32[$0 + 12 >> 2] = $4;
     HEAP32[$0 + 8 >> 2] = $5;
    }
    HEAP32[271] = $3;
    HEAP32[268] = $1;
   }
   $0 = $2 + 8 | 0;
  }
  global$0 = $11 + 16 | 0;
  return $0;
 }
 
 function dlfree($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $2 = $0 + -8 | 0;
   $1 = HEAP32[$0 + -4 >> 2];
   $0 = $1 & -8;
   $5 = $2 + $0 | 0;
   label$2 : {
    if ($1 & 1) {
     break label$2
    }
    if (!($1 & 3)) {
     break label$1
    }
    $1 = HEAP32[$2 >> 2];
    $2 = $2 - $1 | 0;
    $4 = HEAP32[270];
    if ($2 >>> 0 < $4 >>> 0) {
     break label$1
    }
    $0 = $0 + $1 | 0;
    if (HEAP32[271] != ($2 | 0)) {
     if ($1 >>> 0 <= 255) {
      $3 = HEAP32[$2 + 12 >> 2];
      $7 = HEAP32[$2 + 8 >> 2];
      $6 = $1 >>> 3;
      $1 = ($6 << 3) + 1104 | 0;
      label$5 : {
       if (($7 | 0) == ($1 | 0)) {
        break label$5
       }
      }
      if (($3 | 0) == ($7 | 0)) {
       (wasm2js_i32$0 = 1064, wasm2js_i32$1 = HEAP32[266] & __wasm_rotl_i32($6)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      label$7 : {
       if (($1 | 0) == ($3 | 0)) {
        break label$7
       }
      }
      HEAP32[$3 + 8 >> 2] = $7;
      HEAP32[$7 + 12 >> 2] = $3;
      break label$2;
     }
     $6 = HEAP32[$2 + 24 >> 2];
     $3 = HEAP32[$2 + 12 >> 2];
     label$8 : {
      if (($3 | 0) != ($2 | 0)) {
       $1 = HEAP32[$2 + 8 >> 2];
       label$10 : {
        if ($4 >>> 0 > $1 >>> 0) {
         break label$10
        }
       }
       HEAP32[$3 + 8 >> 2] = $1;
       HEAP32[$1 + 12 >> 2] = $3;
       break label$8;
      }
      label$11 : {
       $1 = $2 + 20 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        break label$11
       }
       $1 = $2 + 16 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        break label$11
       }
       $3 = 0;
       break label$8;
      }
      while (1) {
       $7 = $1;
       $3 = $4;
       $1 = $3 + 20 | 0;
       $4 = HEAP32[$1 >> 2];
       if ($4) {
        continue
       }
       $1 = $3 + 16 | 0;
       $4 = HEAP32[$3 + 16 >> 2];
       if ($4) {
        continue
       }
       break;
      };
      HEAP32[$7 >> 2] = 0;
     }
     if (!$6) {
      break label$2
     }
     $4 = HEAP32[$2 + 28 >> 2];
     $1 = ($4 << 2) + 1368 | 0;
     label$13 : {
      if (HEAP32[$1 >> 2] == ($2 | 0)) {
       HEAP32[$1 >> 2] = $3;
       if ($3) {
        break label$13
       }
       (wasm2js_i32$0 = 1068, wasm2js_i32$1 = HEAP32[267] & __wasm_rotl_i32($4)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[(($2 | 0) == HEAP32[$6 + 16 >> 2] ? 16 : 20) + $6 >> 2] = $3;
      if (!$3) {
       break label$2
      }
     }
     HEAP32[$3 + 24 >> 2] = $6;
     $1 = HEAP32[$2 + 16 >> 2];
     if ($1) {
      HEAP32[$3 + 16 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $3;
     }
     $1 = HEAP32[$2 + 20 >> 2];
     if (!$1) {
      break label$2
     }
     HEAP32[$3 + 20 >> 2] = $1;
     HEAP32[$1 + 24 >> 2] = $3;
     break label$2;
    }
    $1 = HEAP32[$5 + 4 >> 2];
    if (($1 & 3) != 3) {
     break label$2
    }
    HEAP32[$5 + 4 >> 2] = $1 & -2;
    HEAP32[268] = $0;
    HEAP32[$0 + $2 >> 2] = $0;
    HEAP32[$2 + 4 >> 2] = $0 | 1;
    return;
   }
   if ($5 >>> 0 <= $2 >>> 0) {
    break label$1
   }
   $1 = HEAP32[$5 + 4 >> 2];
   if (!($1 & 1)) {
    break label$1
   }
   label$16 : {
    if (!($1 & 2)) {
     if (HEAP32[272] == ($5 | 0)) {
      HEAP32[272] = $2;
      $0 = $0 + HEAP32[269] | 0;
      HEAP32[269] = $0;
      HEAP32[$2 + 4 >> 2] = $0 | 1;
      if (HEAP32[271] != ($2 | 0)) {
       break label$1
      }
      HEAP32[268] = 0;
      HEAP32[271] = 0;
      return;
     }
     if (HEAP32[271] == ($5 | 0)) {
      HEAP32[271] = $2;
      $0 = $0 + HEAP32[268] | 0;
      HEAP32[268] = $0;
      HEAP32[$2 + 4 >> 2] = $0 | 1;
      HEAP32[$0 + $2 >> 2] = $0;
      return;
     }
     $0 = $0 + ($1 & -8) | 0;
     label$20 : {
      if ($1 >>> 0 <= 255) {
       $4 = HEAP32[$5 + 12 >> 2];
       $3 = HEAP32[$5 + 8 >> 2];
       $5 = $1 >>> 3;
       $1 = ($5 << 3) + 1104 | 0;
       label$22 : {
        if (($3 | 0) == ($1 | 0)) {
         break label$22
        }
       }
       if (($3 | 0) == ($4 | 0)) {
        (wasm2js_i32$0 = 1064, wasm2js_i32$1 = HEAP32[266] & __wasm_rotl_i32($5)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$20;
       }
       label$24 : {
        if (($1 | 0) == ($4 | 0)) {
         break label$24
        }
       }
       HEAP32[$4 + 8 >> 2] = $3;
       HEAP32[$3 + 12 >> 2] = $4;
       break label$20;
      }
      $6 = HEAP32[$5 + 24 >> 2];
      $3 = HEAP32[$5 + 12 >> 2];
      label$25 : {
       if (($3 | 0) != ($5 | 0)) {
        $1 = HEAP32[$5 + 8 >> 2];
        label$27 : {
         if (HEAPU32[270] > $1 >>> 0) {
          break label$27
         }
        }
        HEAP32[$3 + 8 >> 2] = $1;
        HEAP32[$1 + 12 >> 2] = $3;
        break label$25;
       }
       label$28 : {
        $1 = $5 + 20 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         break label$28
        }
        $1 = $5 + 16 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         break label$28
        }
        $3 = 0;
        break label$25;
       }
       while (1) {
        $7 = $1;
        $3 = $4;
        $1 = $3 + 20 | 0;
        $4 = HEAP32[$1 >> 2];
        if ($4) {
         continue
        }
        $1 = $3 + 16 | 0;
        $4 = HEAP32[$3 + 16 >> 2];
        if ($4) {
         continue
        }
        break;
       };
       HEAP32[$7 >> 2] = 0;
      }
      if (!$6) {
       break label$20
      }
      $4 = HEAP32[$5 + 28 >> 2];
      $1 = ($4 << 2) + 1368 | 0;
      label$30 : {
       if (HEAP32[$1 >> 2] == ($5 | 0)) {
        HEAP32[$1 >> 2] = $3;
        if ($3) {
         break label$30
        }
        (wasm2js_i32$0 = 1068, wasm2js_i32$1 = HEAP32[267] & __wasm_rotl_i32($4)), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
        break label$20;
       }
       HEAP32[(($5 | 0) == HEAP32[$6 + 16 >> 2] ? 16 : 20) + $6 >> 2] = $3;
       if (!$3) {
        break label$20
       }
      }
      HEAP32[$3 + 24 >> 2] = $6;
      $1 = HEAP32[$5 + 16 >> 2];
      if ($1) {
       HEAP32[$3 + 16 >> 2] = $1;
       HEAP32[$1 + 24 >> 2] = $3;
      }
      $1 = HEAP32[$5 + 20 >> 2];
      if (!$1) {
       break label$20
      }
      HEAP32[$3 + 20 >> 2] = $1;
      HEAP32[$1 + 24 >> 2] = $3;
     }
     HEAP32[$0 + $2 >> 2] = $0;
     HEAP32[$2 + 4 >> 2] = $0 | 1;
     if (HEAP32[271] != ($2 | 0)) {
      break label$16
     }
     HEAP32[268] = $0;
     return;
    }
    HEAP32[$5 + 4 >> 2] = $1 & -2;
    HEAP32[$0 + $2 >> 2] = $0;
    HEAP32[$2 + 4 >> 2] = $0 | 1;
   }
   if ($0 >>> 0 <= 255) {
    $1 = $0 >>> 3;
    $0 = ($1 << 3) + 1104 | 0;
    $4 = HEAP32[266];
    $1 = 1 << $1;
    label$34 : {
     if (!($4 & $1)) {
      HEAP32[266] = $1 | $4;
      $1 = $0;
      break label$34;
     }
     $1 = HEAP32[$0 + 8 >> 2];
    }
    HEAP32[$1 + 12 >> 2] = $2;
    HEAP32[$0 + 8 >> 2] = $2;
    HEAP32[$2 + 12 >> 2] = $0;
    HEAP32[$2 + 8 >> 2] = $1;
    return;
   }
   HEAP32[$2 + 16 >> 2] = 0;
   HEAP32[$2 + 20 >> 2] = 0;
   $5 = $2 + 28 | 0;
   $4 = $0 >>> 8;
   $1 = 0;
   label$36 : {
    if (!$4) {
     break label$36
    }
    $1 = 31;
    if ($0 >>> 0 > 16777215) {
     break label$36
    }
    $1 = $4 + 1048320 >>> 16 & 8;
    $4 = $4 << $1;
    $3 = $4;
    $4 = $4 + 520192 >>> 16 & 4;
    $3 = $3 << $4;
    $7 = $3;
    $3 = $3 + 245760 >>> 16 & 2;
    $1 = ($7 << $3 >>> 15) - ($3 | ($1 | $4)) | 0;
    $1 = ($1 << 1 | $0 >>> $1 + 21 & 1) + 28 | 0;
   }
   HEAP32[$5 >> 2] = $1;
   $4 = ($1 << 2) + 1368 | 0;
   $3 = HEAP32[267];
   $5 = 1 << $1;
   label$37 : {
    if (!($3 & $5)) {
     HEAP32[$4 >> 2] = $2;
     HEAP32[267] = $3 | $5;
     HEAP32[$2 + 24 >> 2] = $4;
     HEAP32[$2 + 8 >> 2] = $2;
     HEAP32[$2 + 12 >> 2] = $2;
     break label$37;
    }
    $1 = $0 << (($1 | 0) == 31 ? 0 : 25 - ($1 >>> 1) | 0);
    $3 = HEAP32[$4 >> 2];
    label$39 : {
     while (1) {
      $4 = $3;
      if (($0 | 0) == (HEAP32[$3 + 4 >> 2] & -8)) {
       break label$39
      }
      $3 = $1 >>> 29;
      $1 = $1 << 1;
      $5 = (($3 & 4) + $4 | 0) + 16 | 0;
      $3 = HEAP32[$5 >> 2];
      if ($3) {
       continue
      }
      break;
     };
     HEAP32[$5 >> 2] = $2;
     HEAP32[$2 + 12 >> 2] = $2;
     HEAP32[$2 + 24 >> 2] = $4;
     HEAP32[$2 + 8 >> 2] = $2;
     break label$37;
    }
    $0 = HEAP32[$4 + 8 >> 2];
    HEAP32[$4 + 8 >> 2] = $2;
    HEAP32[$0 + 12 >> 2] = $2;
    HEAP32[$2 + 24 >> 2] = 0;
    HEAP32[$2 + 8 >> 2] = $0;
    HEAP32[$2 + 12 >> 2] = $4;
   }
   $2 = HEAP32[274] + -1 | 0;
   HEAP32[274] = $2;
   if ($2) {
    break label$1
   }
   $2 = 1520;
   while (1) {
    $0 = HEAP32[$2 >> 2];
    $2 = $0 + 8 | 0;
    if ($0) {
     continue
    }
    break;
   };
   HEAP32[274] = -1;
  }
 }
 
 function operator_20new_28unsigned_20long_29($0) {
  var $1 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  if (!HEAP32[$1 + 12 >> 2]) {
   HEAP32[$1 + 12 >> 2] = 1
  }
  while (1) {
   label$2 : {
    $0 = dlmalloc(HEAP32[$1 + 12 >> 2]);
    HEAP32[$1 + 8 >> 2] = $0;
    if ($0) {
     break label$2
    }
    $0 = global$0 - 16 | 0;
    HEAP32[$0 + 12 >> 2] = 1560;
    HEAP32[$0 + 8 >> 2] = 2;
    HEAP32[$1 + 4 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2];
    if (!HEAP32[$1 + 4 >> 2]) {
     break label$2
    }
    FUNCTION_TABLE[HEAP32[$1 + 4 >> 2]]();
    continue;
   }
   break;
  };
  global$0 = $1 + 16 | 0;
  return HEAP32[$1 + 8 >> 2];
 }
 
 function operator_20delete_28void__29($0) {
  var $1 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  dlfree(HEAP32[$1 + 12 >> 2]);
  global$0 = $1 + 16 | 0;
 }
 
 function strcmp($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = HEAPU8[$1 | 0];
  $2 = HEAPU8[$0 | 0];
  label$1 : {
   if (!$2) {
    break label$1
   }
   if (($3 | 0) != ($2 | 0)) {
    break label$1
   }
   $0 = $0 + 1 | 0;
   $1 = $1 + 1 | 0;
   while (1) {
    $3 = HEAPU8[$1 | 0];
    $2 = HEAPU8[$0 | 0];
    if (!$2) {
     break label$1
    }
    $0 = $0 + 1 | 0;
    $1 = $1 + 1 | 0;
    if (($3 | 0) == ($2 | 0)) {
     continue
    }
    break;
   };
  }
  return $2 - $3 | 0;
 }
 
 function __cxxabiv1____shim_type_info_____shim_type_info_28_29($0) {
  var $1 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  HEAP32[(global$0 - 16 | 0) + 12 >> 2] = HEAP32[$1 + 12 >> 2];
  global$0 = $1 + 16 | 0;
 }
 
 function __cxxabiv1____shim_type_info__noop1_28_29_20const($0) {
  $0 = $0 | 0;
  HEAP32[(global$0 - 16 | 0) + 12 >> 2] = $0;
 }
 
 function __cxxabiv1____class_type_info_____class_type_info_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  __cxxabiv1____shim_type_info_____shim_type_info_28_29($0);
  global$0 = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function __cxxabiv1____class_type_info_____class_type_info_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  __cxxabiv1____class_type_info_____class_type_info_28_29($0);
  operator_20delete_28void__29($0);
  global$0 = $1 + 16 | 0;
 }
 
 function __cxxabiv1____si_class_type_info_____si_class_type_info_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  __cxxabiv1____class_type_info_____class_type_info_28_29($0);
  global$0 = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function __cxxabiv1____si_class_type_info_____si_class_type_info_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  __cxxabiv1____si_class_type_info_____si_class_type_info_28_29($0);
  operator_20delete_28void__29($0);
  global$0 = $1 + 16 | 0;
 }
 
 function __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  HEAP32[$1 + 12 >> 2] = $0;
  $0 = HEAP32[$1 + 12 >> 2];
  __cxxabiv1____si_class_type_info_____si_class_type_info_28_29($0);
  operator_20delete_28void__29($0);
  global$0 = $1 + 16 | 0;
 }
 
 function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP8[$3 + 3 | 0] = $2;
  label$1 : {
   if (!(HEAP8[$3 + 3 | 0] & 1)) {
    (wasm2js_i32$0 = $3, wasm2js_i32$1 = std__type_info__operator___28std__type_info_20const__29_20const(HEAP32[$3 + 8 >> 2], HEAP32[$3 + 4 >> 2]) & 1), HEAP8[wasm2js_i32$0 + 15 | 0] = wasm2js_i32$1;
    break label$1;
   }
   $0 = 1;
   $1 = $3;
   if (HEAP32[$3 + 8 >> 2] != HEAP32[$3 + 4 >> 2]) {
    $0 = !strcmp(std__type_info__name_28_29_20const(HEAP32[$3 + 8 >> 2]), std__type_info__name_28_29_20const(HEAP32[$3 + 4 >> 2]))
   }
   HEAP8[$1 + 15 | 0] = $0 & 1;
  }
  global$0 = $3 + 16 | 0;
  return HEAP8[$3 + 15 | 0] & 1;
 }
 
 function std__type_info__operator___28std__type_info_20const__29_20const($0, $1) {
  var $2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  HEAP32[$2 + 4 >> 2] = $0;
  HEAP32[$2 >> 2] = $1;
  $0 = HEAP32[HEAP32[$2 >> 2] + 4 >> 2];
  HEAP32[$2 + 12 >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2];
  HEAP32[$2 + 8 >> 2] = $0;
  $0 = 1;
  if (HEAP32[$2 + 12 >> 2] != HEAP32[$2 + 8 >> 2]) {
   $0 = !strcmp(HEAP32[$2 + 12 >> 2], HEAP32[$2 + 8 >> 2])
  }
  global$0 = $2 + 16 | 0;
  return $0 & 1;
 }
 
 function std__type_info__name_28_29_20const($0) {
  var $1 = 0;
  $1 = global$0 - 16 | 0;
  HEAP32[$1 + 8 >> 2] = $0;
  HEAP32[$1 + 12 >> 2] = HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2];
  return HEAP32[$1 + 12 >> 2];
 }
 
 function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = global$0 - 80 | 0;
  global$0 = $3;
  HEAP32[$3 + 72 >> 2] = $0;
  HEAP32[$3 + 68 >> 2] = $1;
  HEAP32[$3 + 64 >> 2] = $2;
  $1 = HEAP32[$3 + 72 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($1, HEAP32[$3 + 68 >> 2], 0) & 1) {
    HEAP8[$3 + 79 | 0] = 1;
    break label$1;
   }
   $2 = $3;
   $0 = HEAP32[$3 + 68 >> 2];
   label$3 : {
    if ($0) {
     $0 = __dynamic_cast($0);
     break label$3;
    }
    $0 = 0;
   }
   HEAP32[$2 + 60 >> 2] = $0;
   if (!HEAP32[$3 + 60 >> 2]) {
    HEAP8[$3 + 79 | 0] = 0;
    break label$1;
   }
   HEAP32[$3 >> 2] = HEAP32[$3 + 60 >> 2];
   $0 = 0;
   HEAP32[$3 + 4 >> 2] = $0;
   HEAP32[$3 + 8 >> 2] = $1;
   HEAP32[$3 + 12 >> 2] = -1;
   HEAP32[$3 + 16 >> 2] = $0;
   HEAP32[$3 + 20 >> 2] = $0;
   HEAP32[$3 + 24 >> 2] = $0;
   HEAP32[$3 + 28 >> 2] = $0;
   HEAP32[$3 + 32 >> 2] = $0;
   HEAP32[$3 + 36 >> 2] = $0;
   HEAP32[$3 + 40 >> 2] = $0;
   HEAP32[$3 + 44 >> 2] = $0;
   HEAP32[$3 + 48 >> 2] = $0;
   HEAP8[$3 + 52 | 0] = 0;
   HEAP8[$3 + 53 | 0] = $0;
   HEAP8[$3 + 54 | 0] = $0;
   $0 = 1;
   HEAP32[$3 + 48 >> 2] = $0;
   $1 = HEAP32[$3 + 60 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, $3, HEAP32[HEAP32[$3 + 64 >> 2] >> 2], $0);
   if (HEAP32[$3 + 24 >> 2] == ($0 | 0)) {
    HEAP32[HEAP32[$3 + 64 >> 2] >> 2] = HEAP32[$3 + 16 >> 2];
    HEAP8[$3 + 79 | 0] = 1;
    break label$1;
   }
   HEAP8[$3 + 79 | 0] = 0;
  }
  global$0 = $3 + 80 | 0;
  return HEAP8[$3 + 79 | 0] & 1;
 }
 
 function __dynamic_cast($0) {
  var $1 = 0;
  $1 = global$0 - 96 | 0;
  global$0 = $1;
  HEAP32[$1 + 92 >> 2] = $0;
  HEAP32[$1 + 88 >> 2] = 5456;
  HEAP32[$1 + 84 >> 2] = 5504;
  HEAP32[$1 + 80 >> 2] = 0;
  HEAP32[$1 + 76 >> 2] = HEAP32[HEAP32[$1 + 92 >> 2] >> 2];
  HEAP32[$1 + 72 >> 2] = HEAP32[HEAP32[$1 + 76 >> 2] + -8 >> 2];
  HEAP32[$1 + 68 >> 2] = HEAP32[$1 + 92 >> 2] + HEAP32[$1 + 72 >> 2];
  HEAP32[$1 + 64 >> 2] = HEAP32[HEAP32[$1 + 76 >> 2] + -4 >> 2];
  HEAP32[$1 + 60 >> 2] = 0;
  HEAP32[$1 >> 2] = HEAP32[$1 + 84 >> 2];
  HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 92 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$1 + 88 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[$1 + 80 >> 2];
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = 0;
  HEAP32[$1 + 24 >> 2] = 0;
  HEAP32[$1 + 28 >> 2] = 0;
  HEAP32[$1 + 32 >> 2] = 0;
  HEAP32[$1 + 36 >> 2] = 0;
  HEAP32[$1 + 40 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = 0;
  HEAP32[$1 + 48 >> 2] = 0;
  HEAP8[$1 + 52 | 0] = 0;
  HEAP8[$1 + 53 | 0] = 0;
  HEAP8[$1 + 54 | 0] = 0;
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(HEAP32[$1 + 64 >> 2], HEAP32[$1 + 84 >> 2], 0) & 1) {
    HEAP32[$1 + 48 >> 2] = 1;
    $0 = HEAP32[$1 + 64 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, HEAP32[$1 + 68 >> 2], HEAP32[$1 + 68 >> 2], 1, 0);
    if (HEAP32[$1 + 24 >> 2] == 1) {
     HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 68 >> 2]
    }
    break label$1;
   }
   $0 = HEAP32[$1 + 64 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, HEAP32[$1 + 68 >> 2], 1, 0);
   $0 = HEAP32[$1 + 36 >> 2];
   label$4 : {
    if ($0 >>> 0 > 1) {
     break label$4
    }
    if ($0 - 1) {
     if (HEAP32[$1 + 40 >> 2] != 1) {
      break label$4
     }
     if (HEAP32[$1 + 28 >> 2] != 1) {
      break label$4
     }
     if (HEAP32[$1 + 32 >> 2] != 1) {
      break label$4
     }
     HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 20 >> 2];
     break label$4;
    }
    label$8 : {
     if (HEAP32[$1 + 24 >> 2] != 1) {
      if (HEAP32[$1 + 40 >> 2]) {
       break label$8
      }
      if (HEAP32[$1 + 28 >> 2] != 1) {
       break label$8
      }
      if (HEAP32[$1 + 32 >> 2] != 1) {
       break label$8
      }
     }
     HEAP32[$1 + 60 >> 2] = HEAP32[$1 + 16 >> 2];
    }
   }
  }
  global$0 = $1 + 96 | 0;
  return HEAP32[$1 + 60 >> 2];
 }
 
 function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  var $4 = 0;
  $4 = global$0 - 16 | 0;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  label$1 : {
   if (!HEAP32[HEAP32[$4 + 8 >> 2] + 16 >> 2]) {
    HEAP32[HEAP32[$4 + 8 >> 2] + 16 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP32[HEAP32[$4 + 8 >> 2] + 24 >> 2] = HEAP32[$4 >> 2];
    HEAP32[HEAP32[$4 + 8 >> 2] + 36 >> 2] = 1;
    break label$1;
   }
   label$3 : {
    if (HEAP32[HEAP32[$4 + 8 >> 2] + 16 >> 2] == HEAP32[$4 + 4 >> 2]) {
     if (HEAP32[HEAP32[$4 + 8 >> 2] + 24 >> 2] == 2) {
      HEAP32[HEAP32[$4 + 8 >> 2] + 24 >> 2] = HEAP32[$4 >> 2]
     }
     break label$3;
    }
    $0 = HEAP32[$4 + 8 >> 2];
    HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
    HEAP32[HEAP32[$4 + 8 >> 2] + 24 >> 2] = 2;
    HEAP8[HEAP32[$4 + 8 >> 2] + 54 | 0] = 1;
   }
  }
 }
 
 function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = global$0 - 16 | 0;
  global$0 = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  $0 = HEAP32[$4 + 12 >> 2];
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2], 0) & 1) {
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2])
  }
  global$0 = $4 + 16 | 0;
 }
 
 function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = global$0 - 16 | 0;
  global$0 = $4;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  $0 = HEAP32[$4 + 12 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2], 0) & 1) {
    __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
    break label$1;
   }
   $0 = HEAP32[$0 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, HEAP32[$4 + 8 >> 2], HEAP32[$4 + 4 >> 2], HEAP32[$4 >> 2]);
  }
  global$0 = $4 + 16 | 0;
 }
 
 function __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = global$0 - 32 | 0;
  global$0 = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  $0 = HEAP32[$4 + 28 >> 2];
  $1 = 0;
  HEAP32[$4 + 12 >> 2] = $1;
  if (HEAP32[$4 + 20 >> 2] != ($1 | 0)) {
   HEAP32[$4 + 12 >> 2] = HEAP32[$0 + 4 >> 2] >> 8;
   if (HEAP32[$0 + 4 >> 2] & 1) {
    HEAP32[$4 + 8 >> 2] = HEAP32[HEAP32[$4 + 20 >> 2] >> 2];
    HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$4 + 8 >> 2] + HEAP32[$4 + 12 >> 2] >> 2];
   }
  }
  $1 = HEAP32[$0 >> 2];
  $2 = $1;
  $3 = HEAP32[$4 + 24 >> 2];
  $5 = HEAP32[$4 + 20 >> 2] + HEAP32[$4 + 12 >> 2] | 0;
  if (HEAP32[$0 + 4 >> 2] & 2) {
   $0 = HEAP32[$4 + 16 >> 2]
  } else {
   $0 = 2
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($2, $3, $5, $0);
  global$0 = $4 + 32 | 0;
 }
 
 function __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = global$0 - 32 | 0;
  global$0 = $4;
  HEAP32[$4 + 28 >> 2] = $0;
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 20 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $3;
  $0 = HEAP32[$4 + 28 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$4 + 24 >> 2] + 8 >> 2], 0) & 1) {
    __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
    break label$1;
   }
   HEAP32[$4 + 12 >> 2] = ($0 + 16 | 0) + (HEAP32[$0 + 12 >> 2] << 3);
   HEAP32[$4 + 8 >> 2] = $0 + 16;
   __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
   $0 = HEAP32[$4 + 8 >> 2] + 8 | 0;
   HEAP32[$4 + 8 >> 2] = $0;
   if ($0 >>> 0 < HEAPU32[$4 + 12 >> 2]) {
    while (1) {
     __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const(HEAP32[$4 + 8 >> 2], HEAP32[$4 + 24 >> 2], HEAP32[$4 + 20 >> 2], HEAP32[$4 + 16 >> 2]);
     label$4 : {
      if (HEAP8[HEAP32[$4 + 24 >> 2] + 54 | 0] & 1) {
       break label$4
      }
      $0 = HEAP32[$4 + 8 >> 2] + 8 | 0;
      HEAP32[$4 + 8 >> 2] = $0;
      if ($0 >>> 0 < HEAPU32[$4 + 12 >> 2]) {
       continue
      }
     }
     break;
    }
   }
  }
  global$0 = $4 + 32 | 0;
 }
 
 function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = global$0 - 32 | 0;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP32[$5 + 12 >> 2] = $4;
  HEAP8[HEAP32[$5 + 24 >> 2] + 53 | 0] = 1;
  if (HEAP32[$5 + 16 >> 2] == HEAP32[HEAP32[$5 + 24 >> 2] + 4 >> 2]) {
   HEAP8[HEAP32[$5 + 24 >> 2] + 52 | 0] = 1;
   label$2 : {
    if (!HEAP32[HEAP32[$5 + 24 >> 2] + 16 >> 2]) {
     HEAP32[HEAP32[$5 + 24 >> 2] + 16 >> 2] = HEAP32[$5 + 20 >> 2];
     HEAP32[HEAP32[$5 + 24 >> 2] + 24 >> 2] = HEAP32[$5 + 12 >> 2];
     $0 = 1;
     HEAP32[HEAP32[$5 + 24 >> 2] + 36 >> 2] = $0;
     label$4 : {
      if (($0 | 0) != HEAP32[HEAP32[$5 + 24 >> 2] + 48 >> 2]) {
       break label$4
      }
      if (HEAP32[HEAP32[$5 + 24 >> 2] + 24 >> 2] != 1) {
       break label$4
      }
      HEAP8[HEAP32[$5 + 24 >> 2] + 54 | 0] = 1;
     }
     break label$2;
    }
    label$5 : {
     if (HEAP32[HEAP32[$5 + 24 >> 2] + 16 >> 2] == HEAP32[$5 + 20 >> 2]) {
      if (HEAP32[HEAP32[$5 + 24 >> 2] + 24 >> 2] == 2) {
       HEAP32[HEAP32[$5 + 24 >> 2] + 24 >> 2] = HEAP32[$5 + 12 >> 2]
      }
      label$8 : {
       if (HEAP32[HEAP32[$5 + 24 >> 2] + 48 >> 2] != 1) {
        break label$8
       }
       if (HEAP32[HEAP32[$5 + 24 >> 2] + 24 >> 2] != 1) {
        break label$8
       }
       HEAP8[HEAP32[$5 + 24 >> 2] + 54 | 0] = 1;
      }
      break label$5;
     }
     $0 = HEAP32[$5 + 24 >> 2];
     HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 36 >> 2] + 1;
     HEAP8[HEAP32[$5 + 24 >> 2] + 54 | 0] = 1;
    }
   }
  }
 }
 
 function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
  var $4 = 0;
  $4 = global$0 - 16 | 0;
  HEAP32[$4 + 12 >> 2] = $0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = $3;
  if (HEAP32[$4 + 4 >> 2] == HEAP32[HEAP32[$4 + 8 >> 2] + 4 >> 2]) {
   if (HEAP32[HEAP32[$4 + 8 >> 2] + 28 >> 2] != 1) {
    HEAP32[HEAP32[$4 + 8 >> 2] + 28 >> 2] = HEAP32[$4 >> 2]
   }
  }
 }
 
 function __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = global$0 - 48 | 0;
  global$0 = $5;
  HEAP32[$5 + 44 >> 2] = $0;
  HEAP32[$5 + 40 >> 2] = $1;
  HEAP32[$5 + 36 >> 2] = $2;
  HEAP32[$5 + 32 >> 2] = $3;
  HEAP8[$5 + 31 | 0] = $4;
  $0 = HEAP32[$5 + 44 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$5 + 40 >> 2] + 8 >> 2], HEAP8[$5 + 31 | 0] & 1) & 1) {
    __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2]);
    break label$1;
   }
   label$3 : {
    if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$5 + 40 >> 2] >> 2], HEAP8[$5 + 31 | 0] & 1) & 1) {
     label$6 : {
      if (HEAP32[$5 + 36 >> 2] != HEAP32[HEAP32[$5 + 40 >> 2] + 16 >> 2]) {
       if (HEAP32[$5 + 36 >> 2] != HEAP32[HEAP32[$5 + 40 >> 2] + 20 >> 2]) {
        break label$6
       }
      }
      if (HEAP32[$5 + 32 >> 2] == 1) {
       HEAP32[HEAP32[$5 + 40 >> 2] + 32 >> 2] = 1
      }
      break label$3;
     }
     HEAP32[HEAP32[$5 + 40 >> 2] + 32 >> 2] = HEAP32[$5 + 32 >> 2];
     HEAP8[$5 + 30 | 0] = 0;
     if (HEAP32[HEAP32[$5 + 40 >> 2] + 44 >> 2] != 4) {
      HEAP8[$5 + 29 | 0] = 0;
      HEAP32[$5 + 24 >> 2] = ($0 + 16 | 0) + (HEAP32[$0 + 12 >> 2] << 3);
      HEAP32[$5 + 20 >> 2] = $0 + 16;
      while (1) {
       label$10 : {
        if (HEAPU32[$5 + 20 >> 2] >= HEAPU32[$5 + 24 >> 2]) {
         break label$10
        }
        $1 = 0;
        HEAP8[HEAP32[$5 + 40 >> 2] + 52 | 0] = $1;
        HEAP8[HEAP32[$5 + 40 >> 2] + 53 | 0] = $1;
        __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$5 + 20 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 36 >> 2], 1, HEAP8[$5 + 31 | 0] & 1);
        if (HEAP8[HEAP32[$5 + 40 >> 2] + 54 | 0] & 1) {
         break label$10
        }
        if (HEAP8[HEAP32[$5 + 40 >> 2] + 53 | 0] & 1) {
         HEAP8[$5 + 29 | 0] = 1;
         label$14 : {
          if (HEAP8[HEAP32[$5 + 40 >> 2] + 52 | 0] & 1) {
           HEAP8[$5 + 30 | 0] = 1;
           if (HEAP32[HEAP32[$5 + 40 >> 2] + 24 >> 2] == 1) {
            break label$10
           }
           if (!(HEAP32[$0 + 8 >> 2] & 2)) {
            break label$10
           }
           break label$14;
          }
          if (!(HEAP32[$0 + 8 >> 2] & 1)) {
           break label$10
          }
         }
        }
        HEAP32[$5 + 20 >> 2] = HEAP32[$5 + 20 >> 2] + 8;
        continue;
       }
       break;
      };
      label$19 : {
       if (HEAP8[$5 + 29 | 0] & 1) {
        HEAP32[HEAP32[$5 + 40 >> 2] + 44 >> 2] = 3;
        break label$19;
       }
       HEAP32[HEAP32[$5 + 40 >> 2] + 44 >> 2] = 4;
      }
     }
     if (!(HEAP8[$5 + 30 | 0] & 1)) {
      HEAP32[HEAP32[$5 + 40 >> 2] + 20 >> 2] = HEAP32[$5 + 36 >> 2];
      $0 = HEAP32[$5 + 40 >> 2];
      HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 1;
      label$22 : {
       if (HEAP32[HEAP32[$5 + 40 >> 2] + 36 >> 2] != 1) {
        break label$22
       }
       if (HEAP32[HEAP32[$5 + 40 >> 2] + 24 >> 2] != 2) {
        break label$22
       }
       HEAP8[HEAP32[$5 + 40 >> 2] + 54 | 0] = 1;
      }
     }
     break label$3;
    }
    HEAP32[$5 + 16 >> 2] = ($0 + 16 | 0) + (HEAP32[$0 + 12 >> 2] << 3);
    HEAP32[$5 + 12 >> 2] = $0 + 16;
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$5 + 12 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], HEAP8[$5 + 31 | 0] & 1);
    $1 = HEAP32[$5 + 12 >> 2] + 8 | 0;
    HEAP32[$5 + 12 >> 2] = $1;
    if ($1 >>> 0 < HEAPU32[$5 + 16 >> 2]) {
     label$24 : {
      label$25 : {
       if (!(HEAP32[$0 + 8 >> 2] & 2)) {
        if (HEAP32[HEAP32[$5 + 40 >> 2] + 36 >> 2] != 1) {
         break label$25
        }
       }
       while (1) {
        if (!(HEAP8[HEAP32[$5 + 40 >> 2] + 54 | 0] & 1)) {
         __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$5 + 12 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], HEAP8[$5 + 31 | 0] & 1);
         $0 = HEAP32[$5 + 12 >> 2] + 8 | 0;
         HEAP32[$5 + 12 >> 2] = $0;
         if ($0 >>> 0 < HEAPU32[$5 + 16 >> 2]) {
          continue
         }
        }
        break;
       };
       break label$24;
      }
      label$30 : {
       if (HEAP32[$0 + 8 >> 2] & 1) {
        while (1) {
         label$32 : {
          if (HEAP8[HEAP32[$5 + 40 >> 2] + 54 | 0] & 1) {
           break label$32
          }
          label$35 : {
           if (HEAP32[HEAP32[$5 + 40 >> 2] + 36 >> 2] != 1) {
            break label$35
           }
           if (HEAP32[HEAP32[$5 + 40 >> 2] + 24 >> 2] != 1) {
            break label$35
           }
           break label$32;
          }
          __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$5 + 12 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], HEAP8[$5 + 31 | 0] & 1);
          $0 = HEAP32[$5 + 12 >> 2] + 8 | 0;
          HEAP32[$5 + 12 >> 2] = $0;
          if ($0 >>> 0 < HEAPU32[$5 + 16 >> 2]) {
           continue
          }
         }
         break;
        };
        break label$30;
       }
       while (1) {
        label$36 : {
         if (HEAP8[HEAP32[$5 + 40 >> 2] + 54 | 0] & 1) {
          break label$36
         }
         if (HEAP32[HEAP32[$5 + 40 >> 2] + 36 >> 2] == 1) {
          break label$36
         }
         __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$5 + 12 >> 2], HEAP32[$5 + 40 >> 2], HEAP32[$5 + 36 >> 2], HEAP32[$5 + 32 >> 2], HEAP8[$5 + 31 | 0] & 1);
         $0 = HEAP32[$5 + 12 >> 2] + 8 | 0;
         HEAP32[$5 + 12 >> 2] = $0;
         if ($0 >>> 0 < HEAPU32[$5 + 16 >> 2]) {
          continue
         }
        }
        break;
       };
      }
     }
    }
   }
  }
  global$0 = $5 + 48 | 0;
 }
 
 function __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = global$0 - 32 | 0;
  global$0 = $6;
  HEAP32[$6 + 28 >> 2] = $0;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = $2;
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP8[$6 + 11 | 0] = $5;
  $0 = HEAP32[$6 + 28 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$0 + 4 >> 2] >> 8;
  if (HEAP32[$0 + 4 >> 2] & 1) {
   HEAP32[$6 >> 2] = HEAP32[HEAP32[$6 + 16 >> 2] >> 2];
   HEAP32[$6 + 4 >> 2] = HEAP32[HEAP32[$6 >> 2] + HEAP32[$6 + 4 >> 2] >> 2];
  }
  $1 = HEAP32[$0 >> 2];
  $2 = $1;
  $3 = HEAP32[$6 + 24 >> 2];
  $4 = HEAP32[$6 + 20 >> 2];
  $5 = HEAP32[$6 + 16 >> 2] + HEAP32[$6 + 4 >> 2] | 0;
  if (HEAP32[$0 + 4 >> 2] & 2) {
   $0 = HEAP32[$6 + 12 >> 2]
  } else {
   $0 = 2
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($2, $3, $4, $5, $0, HEAP8[$6 + 11 | 0] & 1);
  global$0 = $6 + 32 | 0;
 }
 
 function __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = global$0 - 32 | 0;
  global$0 = $5;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP8[$5 + 15 | 0] = $4;
  $0 = HEAP32[$5 + 28 >> 2];
  HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 4 >> 2] >> 8;
  if (HEAP32[$0 + 4 >> 2] & 1) {
   HEAP32[$5 + 4 >> 2] = HEAP32[HEAP32[$5 + 20 >> 2] >> 2];
   HEAP32[$5 + 8 >> 2] = HEAP32[HEAP32[$5 + 4 >> 2] + HEAP32[$5 + 8 >> 2] >> 2];
  }
  $1 = HEAP32[$0 >> 2];
  $2 = $1;
  $3 = HEAP32[$5 + 24 >> 2];
  $4 = HEAP32[$5 + 20 >> 2] + HEAP32[$5 + 8 >> 2] | 0;
  if (HEAP32[$0 + 4 >> 2] & 2) {
   $0 = HEAP32[$5 + 16 >> 2]
  } else {
   $0 = 2
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($2, $3, $4, $0, HEAP8[$5 + 15 | 0] & 1);
  global$0 = $5 + 32 | 0;
 }
 
 function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = global$0 - 32 | 0;
  global$0 = $5;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP8[$5 + 15 | 0] = $4;
  $0 = HEAP32[$5 + 28 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$5 + 24 >> 2] + 8 >> 2], HEAP8[$5 + 15 | 0] & 1) & 1) {
    __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2]);
    break label$1;
   }
   label$3 : {
    if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$5 + 24 >> 2] >> 2], HEAP8[$5 + 15 | 0] & 1) & 1) {
     label$6 : {
      if (HEAP32[$5 + 20 >> 2] != HEAP32[HEAP32[$5 + 24 >> 2] + 16 >> 2]) {
       if (HEAP32[$5 + 20 >> 2] != HEAP32[HEAP32[$5 + 24 >> 2] + 20 >> 2]) {
        break label$6
       }
      }
      if (HEAP32[$5 + 16 >> 2] == 1) {
       HEAP32[HEAP32[$5 + 24 >> 2] + 32 >> 2] = 1
      }
      break label$3;
     }
     HEAP32[HEAP32[$5 + 24 >> 2] + 32 >> 2] = HEAP32[$5 + 16 >> 2];
     HEAP8[$5 + 14 | 0] = 0;
     if (HEAP32[HEAP32[$5 + 24 >> 2] + 44 >> 2] != 4) {
      $1 = 0;
      HEAP8[$5 + 13 | 0] = $1;
      HEAP8[HEAP32[$5 + 24 >> 2] + 52 | 0] = $1;
      HEAP8[HEAP32[$5 + 24 >> 2] + 53 | 0] = $1;
      $0 = HEAP32[$0 + 8 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 20 >> 2], 1, HEAP8[$5 + 15 | 0] & 1);
      if (HEAP8[HEAP32[$5 + 24 >> 2] + 53 | 0] & 1) {
       HEAP8[$5 + 13 | 0] = 1;
       if (HEAP8[HEAP32[$5 + 24 >> 2] + 52 | 0] & 1) {
        HEAP8[$5 + 14 | 0] = 1
       }
      }
      label$12 : {
       if (HEAP8[$5 + 13 | 0] & 1) {
        HEAP32[HEAP32[$5 + 24 >> 2] + 44 >> 2] = 3;
        break label$12;
       }
       HEAP32[HEAP32[$5 + 24 >> 2] + 44 >> 2] = 4;
      }
     }
     if (!(HEAP8[$5 + 14 | 0] & 1)) {
      HEAP32[HEAP32[$5 + 24 >> 2] + 20 >> 2] = HEAP32[$5 + 20 >> 2];
      $0 = HEAP32[$5 + 24 >> 2];
      HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 1;
      label$15 : {
       if (HEAP32[HEAP32[$5 + 24 >> 2] + 36 >> 2] != 1) {
        break label$15
       }
       if (HEAP32[HEAP32[$5 + 24 >> 2] + 24 >> 2] != 2) {
        break label$15
       }
       HEAP8[HEAP32[$5 + 24 >> 2] + 54 | 0] = 1;
      }
     }
     break label$3;
    }
    $0 = HEAP32[$0 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2], HEAP8[$5 + 15 | 0] & 1);
   }
  }
  global$0 = $5 + 32 | 0;
 }
 
 function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = global$0 - 32 | 0;
  global$0 = $5;
  HEAP32[$5 + 28 >> 2] = $0;
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 20 >> 2] = $2;
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP8[$5 + 15 | 0] = $4;
  $0 = HEAP32[$5 + 28 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$5 + 24 >> 2] + 8 >> 2], HEAP8[$5 + 15 | 0] & 1) & 1) {
    __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, HEAP32[$5 + 24 >> 2], HEAP32[$5 + 20 >> 2], HEAP32[$5 + 16 >> 2]);
    break label$1;
   }
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$5 + 24 >> 2] >> 2], HEAP8[$5 + 15 | 0] & 1) & 1) {
    label$4 : {
     label$5 : {
      if (HEAP32[$5 + 20 >> 2] != HEAP32[HEAP32[$5 + 24 >> 2] + 16 >> 2]) {
       if (HEAP32[$5 + 20 >> 2] != HEAP32[HEAP32[$5 + 24 >> 2] + 20 >> 2]) {
        break label$5
       }
      }
      if (HEAP32[$5 + 16 >> 2] == 1) {
       HEAP32[HEAP32[$5 + 24 >> 2] + 32 >> 2] = 1
      }
      break label$4;
     }
     HEAP32[HEAP32[$5 + 24 >> 2] + 32 >> 2] = HEAP32[$5 + 16 >> 2];
     HEAP32[HEAP32[$5 + 24 >> 2] + 20 >> 2] = HEAP32[$5 + 20 >> 2];
     $0 = HEAP32[$5 + 24 >> 2];
     HEAP32[$0 + 40 >> 2] = HEAP32[$0 + 40 >> 2] + 1;
     label$8 : {
      if (HEAP32[HEAP32[$5 + 24 >> 2] + 36 >> 2] != 1) {
       break label$8
      }
      if (HEAP32[HEAP32[$5 + 24 >> 2] + 24 >> 2] != 2) {
       break label$8
      }
      HEAP8[HEAP32[$5 + 24 >> 2] + 54 | 0] = 1;
     }
     HEAP32[HEAP32[$5 + 24 >> 2] + 44 >> 2] = 4;
    }
   }
  }
  global$0 = $5 + 32 | 0;
 }
 
 function __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = global$0 - 32 | 0;
  global$0 = $6;
  HEAP32[$6 + 28 >> 2] = $0;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = $2;
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP8[$6 + 11 | 0] = $5;
  $0 = HEAP32[$6 + 28 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$6 + 24 >> 2] + 8 >> 2], HEAP8[$6 + 11 | 0] & 1) & 1) {
    __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2]);
    break label$1;
   }
   HEAP8[$6 + 10 | 0] = HEAP8[HEAP32[$6 + 24 >> 2] + 52 | 0] & 1;
   HEAP8[$6 + 9 | 0] = HEAP8[HEAP32[$6 + 24 >> 2] + 53 | 0] & 1;
   HEAP32[$6 + 4 >> 2] = ($0 + 16 | 0) + (HEAP32[$0 + 12 >> 2] << 3);
   HEAP32[$6 >> 2] = $0 + 16;
   $1 = 0;
   HEAP8[HEAP32[$6 + 24 >> 2] + 52 | 0] = $1;
   HEAP8[HEAP32[$6 + 24 >> 2] + 53 | 0] = $1;
   __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$6 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP8[$6 + 11 | 0] & 1);
   HEAP8[$6 + 10 | 0] = 0 != (HEAP8[$6 + 10 | 0] & 1 | HEAP8[HEAP32[$6 + 24 >> 2] + 52 | 0] & 1);
   HEAP8[$6 + 9 | 0] = (HEAP8[$6 + 9 | 0] & 1 | HEAP8[HEAP32[$6 + 24 >> 2] + 53 | 0] & 1) != ($1 | 0);
   $1 = HEAP32[$6 >> 2] + 8 | 0;
   HEAP32[$6 >> 2] = $1;
   if ($1 >>> 0 < HEAPU32[$6 + 4 >> 2]) {
    while (1) {
     label$4 : {
      if (HEAP8[HEAP32[$6 + 24 >> 2] + 54 | 0] & 1) {
       break label$4
      }
      label$7 : {
       if (HEAP8[HEAP32[$6 + 24 >> 2] + 52 | 0] & 1) {
        if (HEAP32[HEAP32[$6 + 24 >> 2] + 24 >> 2] == 1) {
         break label$4
        }
        if (!(HEAP32[$0 + 8 >> 2] & 2)) {
         break label$4
        }
        break label$7;
       }
       if (HEAP32[$0 + 8 >> 2] & 1 ? 0 : HEAP8[HEAP32[$6 + 24 >> 2] + 53 | 0] & 1) {
        break label$4
       }
      }
      $1 = 0;
      HEAP8[HEAP32[$6 + 24 >> 2] + 52 | 0] = $1;
      HEAP8[HEAP32[$6 + 24 >> 2] + 53 | 0] = $1;
      __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$6 >> 2], HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP8[$6 + 11 | 0] & 1);
      HEAP8[$6 + 10 | 0] = 0 != (HEAP8[$6 + 10 | 0] & 1 | HEAP8[HEAP32[$6 + 24 >> 2] + 52 | 0] & 1);
      HEAP8[$6 + 9 | 0] = (HEAP8[$6 + 9 | 0] & 1 | HEAP8[HEAP32[$6 + 24 >> 2] + 53 | 0] & 1) != ($1 | 0);
      $1 = HEAP32[$6 >> 2] + 8 | 0;
      HEAP32[$6 >> 2] = $1;
      if ($1 >>> 0 < HEAPU32[$6 + 4 >> 2]) {
       continue
      }
     }
     break;
    }
   }
   HEAP8[HEAP32[$6 + 24 >> 2] + 52 | 0] = HEAP8[$6 + 10 | 0] & 1;
   HEAP8[HEAP32[$6 + 24 >> 2] + 53 | 0] = HEAP8[$6 + 9 | 0] & 1;
  }
  global$0 = $6 + 32 | 0;
 }
 
 function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = global$0 - 32 | 0;
  global$0 = $6;
  HEAP32[$6 + 28 >> 2] = $0;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = $2;
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP8[$6 + 11 | 0] = $5;
  $0 = HEAP32[$6 + 28 >> 2];
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$6 + 24 >> 2] + 8 >> 2], HEAP8[$6 + 11 | 0] & 1) & 1) {
    __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2]);
    break label$1;
   }
   $0 = HEAP32[$0 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2], HEAP8[$6 + 11 | 0] & 1);
  }
  global$0 = $6 + 32 | 0;
 }
 
 function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = global$0 - 32 | 0;
  global$0 = $6;
  HEAP32[$6 + 28 >> 2] = $0;
  HEAP32[$6 + 24 >> 2] = $1;
  HEAP32[$6 + 20 >> 2] = $2;
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 12 >> 2] = $4;
  HEAP8[$6 + 11 | 0] = $5;
  $0 = HEAP32[$6 + 28 >> 2];
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, HEAP32[HEAP32[$6 + 24 >> 2] + 8 >> 2], HEAP8[$6 + 11 | 0] & 1) & 1) {
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, HEAP32[$6 + 24 >> 2], HEAP32[$6 + 20 >> 2], HEAP32[$6 + 16 >> 2], HEAP32[$6 + 12 >> 2])
  }
  global$0 = $6 + 32 | 0;
 }
 
 function btCollisionAlgorithm__btCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__29($0, $1) {
  HEAP32[$0 >> 2] = 5748;
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
 }
 
 function btCollisionAlgorithm___btCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function btCollisionAlgorithm___btCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  abort();
 }
 
 function btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1) {
  btCollisionAlgorithm__btCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__29($0, $1);
  HEAP32[$0 >> 2] = 5776;
 }
 
 function btAlignedFreeDefault_28void__29($0) {
  $0 = $0 | 0;
  if ($0) {
   FUNCTION_TABLE[HEAP32[743]](HEAP32[$0 + -4 >> 2])
  }
 }
 
 function btAlignedAllocDefault_28unsigned_20long_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $0 = FUNCTION_TABLE[HEAP32[742]](($0 + $1 | 0) + 3 | 0) | 0;
  if ($0) {
   $2 = ($0 + $1 | 0) + 3 & 0 - $1;
   HEAP32[$2 + -4 >> 2] = $0;
  }
  return $2 | 0;
 }
 
 function btFreeDefault_28void__29($0) {
  $0 = $0 | 0;
  dlfree($0);
 }
 
 function btAllocDefault_28unsigned_20long_29($0) {
  $0 = $0 | 0;
  return dlmalloc($0) | 0;
 }
 
 function btAlignedAllocInternal_28unsigned_20long_2c_20int_29($0) {
  HEAP32[391] = HEAP32[391] + 1;
  return FUNCTION_TABLE[HEAP32[740]]($0, 16) | 0;
 }
 
 function btAlignedFreeInternal_28void__29($0) {
  if ($0) {
   HEAP32[392] = HEAP32[392] + 1;
   FUNCTION_TABLE[HEAP32[741]]($0);
  }
 }
 
 function btQuantizedBvhTree__calc_quantization_28GIM_BVH_DATA_ARRAY__2c_20float_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  $2 = global$0 - 32 | 0;
  HEAP32[$2 + 24 >> 2] = -8388609;
  HEAP32[$2 + 16 >> 2] = -8388609;
  HEAP32[$2 + 20 >> 2] = -8388609;
  HEAP32[$2 + 8 >> 2] = 2139095039;
  HEAP32[$2 >> 2] = 2139095039;
  HEAP32[$2 + 4 >> 2] = 2139095039;
  $11 = HEAP32[$1 + 4 >> 2];
  label$1 : {
   if (($11 | 0) < 1) {
    $4 = Math_fround(3402823466385288598117041.0e14);
    $7 = Math_fround(-3402823466385288598117041.0e14);
    $8 = Math_fround(-3402823466385288598117041.0e14);
    $5 = Math_fround(-3402823466385288598117041.0e14);
    $9 = Math_fround(3402823466385288598117041.0e14);
    $6 = Math_fround(3402823466385288598117041.0e14);
    break label$1;
   }
   $12 = $2 + 16 | 0;
   $1 = HEAP32[$1 + 12 >> 2] + 16 | 0;
   $4 = Math_fround(3402823466385288598117041.0e14);
   $7 = Math_fround(-3402823466385288598117041.0e14);
   $8 = Math_fround(-3402823466385288598117041.0e14);
   $5 = Math_fround(-3402823466385288598117041.0e14);
   $9 = Math_fround(3402823466385288598117041.0e14);
   $6 = Math_fround(3402823466385288598117041.0e14);
   while (1) {
    $3 = $1 + -16 | 0;
    $10 = HEAPF32[$3 >> 2];
    $6 = $6 > $10 ? $10 : $6;
    HEAPF32[$2 >> 2] = $6;
    $13 = $9 > HEAPF32[$1 + -12 >> 2] ? $3 : $2;
    $9 = HEAPF32[$13 + 4 >> 2];
    HEAP32[$2 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
    $3 = $4 > HEAPF32[$1 + -8 >> 2] ? $3 : $2;
    $10 = HEAPF32[$3 + 8 >> 2];
    $3 = HEAP32[$3 + 8 >> 2];
    HEAP32[$2 + 8 >> 2] = $3;
    $4 = HEAPF32[$1 >> 2];
    $5 = $5 < $4 ? $4 : $5;
    HEAPF32[$2 + 16 >> 2] = $5;
    $3 = $8 < HEAPF32[$1 + 4 >> 2] ? $1 : $12;
    $8 = HEAPF32[$3 + 4 >> 2];
    HEAP32[$2 + 20 >> 2] = HEAP32[$3 + 4 >> 2];
    $3 = $7 < HEAPF32[$1 + 8 >> 2] ? $1 : $12;
    $7 = HEAPF32[$3 + 8 >> 2];
    HEAP32[$2 + 24 >> 2] = HEAP32[$3 + 8 >> 2];
    $4 = $10;
    $1 = $1 + 36 | 0;
    $14 = $14 + 1 | 0;
    if (($14 | 0) < ($11 | 0)) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  $7 = Math_fround($7 + Math_fround(1.0));
  HEAPF32[$0 + 48 >> 2] = $7;
  $8 = Math_fround($8 + Math_fround(1.0));
  HEAPF32[$0 + 44 >> 2] = $8;
  $5 = Math_fround($5 + Math_fround(1.0));
  HEAPF32[$0 + 40 >> 2] = $5;
  HEAP32[$0 + 36 >> 2] = 0;
  $4 = Math_fround($4 - Math_fround(1.0));
  HEAPF32[$0 + 32 >> 2] = $4;
  $9 = Math_fround($9 - Math_fround(1.0));
  HEAPF32[$0 + 28 >> 2] = $9;
  $6 = Math_fround($6 - Math_fround(1.0));
  HEAPF32[$0 + 24 >> 2] = $6;
  HEAPF32[$0 - -64 >> 2] = Math_fround(65535.0) / Math_fround($7 - $4);
  HEAPF32[$0 + 60 >> 2] = Math_fround(65535.0) / Math_fround($8 - $9);
  HEAPF32[$0 + 56 >> 2] = Math_fround(65535.0) / Math_fround($5 - $6);
 }
 
 function btQuantizedBvhTree___calc_splitting_axis_28GIM_BVH_DATA_ARRAY__2c_20int_2c_20int_29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0);
  $9 = $2 - $1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($2 | 0) <= ($1 | 0)) {
      $10 = Math_fround($9 | 0);
      break label$3;
     }
     $4 = (HEAP32[$0 + 12 >> 2] + Math_imul($1, 36) | 0) + 24 | 0;
     $7 = $9;
     while (1) {
      $5 = Math_fround($5 + Math_fround(Math_fround(HEAPF32[$4 + -4 >> 2] + HEAPF32[$4 + -20 >> 2]) * Math_fround(.5)));
      $3 = Math_fround($3 + Math_fround(Math_fround(HEAPF32[$4 + -8 >> 2] + HEAPF32[$4 + -24 >> 2]) * Math_fround(.5)));
      $6 = Math_fround($6 + Math_fround(Math_fround(HEAPF32[$4 >> 2] + HEAPF32[$4 + -16 >> 2]) * Math_fround(.5)));
      $4 = $4 + 36 | 0;
      $7 = $7 + -1 | 0;
      if ($7) {
       continue
      }
      break;
     };
     $10 = Math_fround($9 | 0);
     if (($2 | 0) > ($1 | 0)) {
      break label$2
     }
    }
    $6 = Math_fround(0.0);
    $5 = Math_fround(0.0);
    break label$1;
   }
   $8 = Math_fround(Math_fround(1.0) / $10);
   $11 = Math_fround($8 * $6);
   $12 = Math_fround($8 * $5);
   $13 = Math_fround($8 * $3);
   $7 = $2 - $1 | 0;
   $4 = (HEAP32[$0 + 12 >> 2] + Math_imul($1, 36) | 0) + 24 | 0;
   $5 = Math_fround(0.0);
   $6 = Math_fround(0.0);
   $8 = Math_fround(0.0);
   while (1) {
    $3 = Math_fround(Math_fround(Math_fround(HEAPF32[$4 + -4 >> 2] + HEAPF32[$4 + -20 >> 2]) * Math_fround(.5)) - $12);
    $6 = Math_fround($6 + Math_fround($3 * $3));
    $3 = Math_fround(Math_fround(Math_fround(HEAPF32[$4 + -8 >> 2] + HEAPF32[$4 + -24 >> 2]) * Math_fround(.5)) - $13);
    $8 = Math_fround($8 + Math_fround($3 * $3));
    $3 = Math_fround(Math_fround(Math_fround(HEAPF32[$4 >> 2] + HEAPF32[$4 + -16 >> 2]) * Math_fround(.5)) - $11);
    $5 = Math_fround($5 + Math_fround($3 * $3));
    $4 = $4 + 36 | 0;
    $7 = $7 + -1 | 0;
    if ($7) {
     continue
    }
    break;
   };
  }
  $3 = Math_fround(Math_fround(1.0) / Math_fround($10 + Math_fround(-1.0)));
  $6 = Math_fround($3 * $6);
  $5 = Math_fround($3 * $5);
  $3 = Math_fround($3 * $8);
  return $3 < $6 ? ($6 < $5 ? 2 : 1) : ($3 < $5) << 1;
 }
 
 function btQuantizedBvhTree___sort_and_calc_splitting_index_28GIM_BVH_DATA_ARRAY__2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
  $7 = global$0 + -64 | 0;
  $6 = $7 + 24 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$7 + 16 >> 2] = 0;
  HEAP32[$7 + 20 >> 2] = 0;
  $8 = ($2 | 0) <= ($1 | 0);
  if (!$8) {
   $9 = $2 - $1 | 0;
   $4 = (HEAP32[$0 + 12 >> 2] + Math_imul($1, 36) | 0) + 24 | 0;
   while (1) {
    $14 = Math_fround(Math_fround(Math_fround(HEAPF32[$4 + -4 >> 2] + HEAPF32[$4 + -20 >> 2]) * Math_fround(.5)) + $14);
    $15 = Math_fround(Math_fround(Math_fround(HEAPF32[$4 + -8 >> 2] + HEAPF32[$4 + -24 >> 2]) * Math_fround(.5)) + $15);
    $11 = Math_fround(Math_fround(Math_fround(HEAPF32[$4 >> 2] + HEAPF32[$4 + -16 >> 2]) * Math_fround(.5)) + $11);
    $4 = $4 + 36 | 0;
    $9 = $9 + -1 | 0;
    if ($9) {
     continue
    }
    break;
   };
   HEAPF32[$7 + 24 >> 2] = $11;
   HEAPF32[$7 + 20 >> 2] = $14;
   HEAPF32[$7 + 16 >> 2] = $15;
  }
  $13 = $2 - $1 | 0;
  $16 = Math_fround(Math_fround(1.0) / Math_fround($13 | 0));
  HEAPF32[$7 + 24 >> 2] = $16 * $11;
  HEAPF32[$7 + 20 >> 2] = $16 * $14;
  HEAPF32[$7 + 16 >> 2] = $16 * $15;
  $10 = $1;
  if (!$8) {
   $4 = $3 << 2;
   $11 = HEAPF32[$4 + ($7 + 16 | 0) >> 2];
   $9 = Math_imul($1, 36) + 16 | 0;
   $22 = $4 + $7 | 0;
   $20 = $7 + 48 | 0;
   $17 = $13;
   while (1) {
    HEAP32[$7 + 12 >> 2] = 0;
    $3 = HEAP32[$0 + 12 >> 2];
    $4 = $9 + $3 | 0;
    $12 = $4 + 8 | 0;
    HEAPF32[$7 + 8 >> 2] = Math_fround(HEAPF32[$12 >> 2] + HEAPF32[$4 + -8 >> 2]) * Math_fround(.5);
    HEAPF32[$7 + 4 >> 2] = Math_fround(HEAPF32[$4 + 4 >> 2] + HEAPF32[$4 + -12 >> 2]) * Math_fround(.5);
    $8 = $4 + -16 | 0;
    HEAPF32[$7 >> 2] = Math_fround(HEAPF32[$4 >> 2] + HEAPF32[$8 >> 2]) * Math_fround(.5);
    if (!!(HEAPF32[$22 >> 2] > $11)) {
     $5 = $8;
     $23 = HEAP32[$5 >> 2];
     $24 = HEAP32[$5 + 4 >> 2];
     $21 = Math_imul($10, 36);
     $3 = $21 + $3 | 0;
     $5 = $3;
     $18 = HEAP32[$5 >> 2];
     $5 = HEAP32[$5 + 4 >> 2];
     $6 = $8;
     HEAP32[$6 >> 2] = $18;
     HEAP32[$6 + 4 >> 2] = $5;
     $25 = HEAP32[$4 >> 2];
     $18 = HEAP32[$4 + 4 >> 2];
     $5 = $3 + 16 | 0;
     $6 = HEAP32[$5 >> 2];
     $5 = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 >> 2] = $6;
     HEAP32[$4 + 4 >> 2] = $5;
     $5 = $12;
     $26 = HEAP32[$5 >> 2];
     $27 = HEAP32[$5 + 4 >> 2];
     $5 = $3 + 24 | 0;
     $19 = HEAP32[$5 >> 2];
     $5 = HEAP32[$5 + 4 >> 2];
     $6 = $12;
     HEAP32[$6 >> 2] = $19;
     HEAP32[$6 + 4 >> 2] = $5;
     $4 = $4 + 16 | 0;
     $12 = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$3 + 32 >> 2];
     $4 = $8 + 8 | 0;
     $28 = HEAP32[$4 >> 2];
     $19 = HEAP32[$4 + 4 >> 2];
     $5 = $3 + 8 | 0;
     $6 = HEAP32[$5 >> 2];
     $5 = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 >> 2] = $6;
     HEAP32[$4 + 4 >> 2] = $5;
     $6 = $20;
     HEAP32[$6 >> 2] = $25;
     HEAP32[$6 + 4 >> 2] = $18;
     $6 = $6 + 8 | 0;
     HEAP32[$6 >> 2] = $26;
     HEAP32[$6 + 4 >> 2] = $27;
     $8 = $7 + 40 | 0;
     $6 = $8;
     HEAP32[$6 >> 2] = $28;
     HEAP32[$6 + 4 >> 2] = $19;
     $4 = $21 + HEAP32[$0 + 12 >> 2] | 0;
     HEAP32[$4 + 32 >> 2] = $12;
     HEAP32[$7 + 32 >> 2] = $23;
     HEAP32[$7 + 36 >> 2] = $24;
     $6 = HEAP32[$7 + 36 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$7 + 32 >> 2];
     HEAP32[$4 + 4 >> 2] = $6;
     $5 = $8;
     $3 = HEAP32[$5 >> 2];
     $5 = HEAP32[$5 + 4 >> 2];
     $6 = $4 + 8 | 0;
     HEAP32[$6 >> 2] = $3;
     HEAP32[$6 + 4 >> 2] = $5;
     $5 = $20;
     $3 = HEAP32[$5 >> 2];
     $6 = HEAP32[$5 + 4 >> 2];
     $5 = $4 + 16 | 0;
     HEAP32[$5 >> 2] = $3;
     HEAP32[$5 + 4 >> 2] = $6;
     $5 = $7 + 56 | 0;
     $3 = HEAP32[$5 >> 2];
     $5 = HEAP32[$5 + 4 >> 2];
     $6 = $4 + 24 | 0;
     HEAP32[$6 >> 2] = $3;
     HEAP32[$6 + 4 >> 2] = $5;
     $10 = $10 + 1 | 0;
    }
    $9 = $9 + 36 | 0;
    $17 = $17 + -1 | 0;
    if ($17) {
     continue
    }
    break;
   };
  }
  $4 = ($13 | 0) / 3 | 0;
  if (!(($10 | 0) < ($2 + ($4 ^ -1) | 0) ? ($10 | 0) > ($1 + $4 | 0) : 0)) {
   $10 = $1 + ($13 >> 1) | 0
  }
  return $10;
 }
 
 function btQuantizedBvhTree___build_sub_tree_28GIM_BVH_DATA_ARRAY__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0), $21 = 0;
  $11 = global$0 - 32 | 0;
  global$0 = $11;
  $19 = HEAP32[$0 >> 2];
  HEAP32[$0 >> 2] = $19 + 1;
  $15 = $3 - $2 | 0;
  label$1 : {
   if (($15 | 0) == 1) {
    $10 = HEAPF32[$0 + 48 >> 2];
    $4 = HEAPF32[$0 + 32 >> 2];
    $8 = HEAP32[$1 + 12 >> 2] + Math_imul($2, 36) | 0;
    $5 = HEAPF32[$8 + 8 >> 2];
    $5 = $5 < $4 ? $4 : $5;
    $16 = HEAPF32[$0 - -64 >> 2];
    $5 = Math_fround(Math_fround(Math_fround(($10 < $5 ? $10 : $5) - $4) * $16) + Math_fround(.5));
    label$3 : {
     if ($5 < Math_fround(4294967296.0) & $5 >= Math_fround(0.0)) {
      $15 = ~~$5 >>> 0;
      break label$3;
     }
     $15 = 0;
    }
    $6 = HEAPF32[$8 >> 2];
    $7 = HEAPF32[$8 + 4 >> 2];
    $9 = HEAP32[$0 + 16 >> 2] + ($19 << 4) | 0;
    HEAP16[$9 + 4 >> 1] = $15;
    $1 = $9;
    $12 = HEAPF32[$0 + 44 >> 2];
    $5 = HEAPF32[$0 + 28 >> 2];
    $7 = $7 < $5 ? $5 : $7;
    $18 = HEAPF32[$0 + 60 >> 2];
    $7 = Math_fround(Math_fround(Math_fround(($12 < $7 ? $12 : $7) - $5) * $18) + Math_fround(.5));
    label$5 : {
     if ($7 < Math_fround(4294967296.0) & $7 >= Math_fround(0.0)) {
      $2 = ~~$7 >>> 0;
      break label$5;
     }
     $2 = 0;
    }
    HEAP16[$1 + 2 >> 1] = $2;
    $1 = $9;
    $17 = HEAPF32[$0 + 40 >> 2];
    $7 = HEAPF32[$0 + 24 >> 2];
    $6 = $6 < $7 ? $7 : $6;
    $20 = HEAPF32[$0 + 56 >> 2];
    $6 = Math_fround(Math_fround(Math_fround(($17 < $6 ? $17 : $6) - $7) * $20) + Math_fround(.5));
    label$7 : {
     if ($6 < Math_fround(4294967296.0) & $6 >= Math_fround(0.0)) {
      $0 = ~~$6 >>> 0;
      break label$7;
     }
     $0 = 0;
    }
    HEAP16[$1 >> 1] = $0;
    $6 = HEAPF32[$8 + 24 >> 2];
    $6 = $6 < $4 ? $4 : $6;
    $4 = Math_fround(Math_fround($16 * Math_fround(($10 < $6 ? $10 : $6) - $4)) + Math_fround(.5));
    label$9 : {
     if ($4 < Math_fround(4294967296.0) & $4 >= Math_fround(0.0)) {
      $15 = ~~$4 >>> 0;
      break label$9;
     }
     $15 = 0;
    }
    $4 = HEAPF32[$8 + 16 >> 2];
    $10 = HEAPF32[$8 + 20 >> 2];
    HEAP16[$9 + 10 >> 1] = $15;
    $0 = $9 + 8 | 0;
    $10 = $10 < $5 ? $5 : $10;
    $5 = Math_fround(Math_fround($18 * Math_fround(($12 < $10 ? $12 : $10) - $5)) + Math_fround(.5));
    label$11 : {
     if ($5 < Math_fround(4294967296.0) & $5 >= Math_fround(0.0)) {
      $1 = ~~$5 >>> 0;
      break label$11;
     }
     $1 = 0;
    }
    HEAP16[$0 >> 1] = $1;
    $0 = $9;
    $4 = $4 < $7 ? $7 : $4;
    $4 = Math_fround(Math_fround($20 * Math_fround(($17 < $4 ? $17 : $4) - $7)) + Math_fround(.5));
    label$13 : {
     if ($4 < Math_fround(4294967296.0) & $4 >= Math_fround(0.0)) {
      $1 = ~~$4 >>> 0;
      break label$13;
     }
     $1 = 0;
    }
    HEAP16[$0 + 6 >> 1] = $1;
    HEAP32[$9 + 12 >> 2] = HEAP32[$8 + 32 >> 2];
    break label$1;
   }
   $21 = btQuantizedBvhTree___sort_and_calc_splitting_index_28GIM_BVH_DATA_ARRAY__2c_20int_2c_20int_2c_20int_29($1, $2, $3, btQuantizedBvhTree___calc_splitting_axis_28GIM_BVH_DATA_ARRAY__2c_20int_2c_20int_29($1, $2, $3));
   HEAP32[$11 + 24 >> 2] = -8388609;
   HEAP32[$11 + 16 >> 2] = -8388609;
   HEAP32[$11 + 20 >> 2] = -8388609;
   HEAP32[$11 + 8 >> 2] = 2139095039;
   HEAP32[$11 >> 2] = 2139095039;
   HEAP32[$11 + 4 >> 2] = 2139095039;
   label$15 : {
    if (($3 | 0) <= ($2 | 0)) {
     $7 = Math_fround(3402823466385288598117041.0e14);
     $10 = Math_fround(-3402823466385288598117041.0e14);
     $12 = Math_fround(-3402823466385288598117041.0e14);
     $4 = Math_fround(-3402823466385288598117041.0e14);
     $17 = Math_fround(3402823466385288598117041.0e14);
     $5 = Math_fround(3402823466385288598117041.0e14);
     break label$15;
    }
    $14 = $11 + 16 | 0;
    $8 = (HEAP32[$1 + 12 >> 2] + Math_imul($2, 36) | 0) + 16 | 0;
    $7 = Math_fround(3402823466385288598117041.0e14);
    $10 = Math_fround(-3402823466385288598117041.0e14);
    $12 = Math_fround(-3402823466385288598117041.0e14);
    $4 = Math_fround(-3402823466385288598117041.0e14);
    $17 = Math_fround(3402823466385288598117041.0e14);
    $5 = Math_fround(3402823466385288598117041.0e14);
    while (1) {
     $9 = $8 + -16 | 0;
     $6 = HEAPF32[$9 >> 2];
     $5 = $5 > $6 ? $6 : $5;
     HEAPF32[$11 >> 2] = $5;
     $13 = $17 > HEAPF32[$8 + -12 >> 2] ? $9 : $11;
     $17 = HEAPF32[$13 + 4 >> 2];
     HEAP32[$11 + 4 >> 2] = HEAP32[$13 + 4 >> 2];
     $9 = $7 > HEAPF32[$8 + -8 >> 2] ? $9 : $11;
     $6 = HEAPF32[$9 + 8 >> 2];
     $9 = HEAP32[$9 + 8 >> 2];
     HEAP32[$11 + 8 >> 2] = $9;
     $7 = HEAPF32[$8 >> 2];
     $4 = $4 < $7 ? $7 : $4;
     HEAPF32[$11 + 16 >> 2] = $4;
     $9 = $12 < HEAPF32[$8 + 4 >> 2] ? $8 : $14;
     $12 = HEAPF32[$9 + 4 >> 2];
     HEAP32[$11 + 20 >> 2] = HEAP32[$9 + 4 >> 2];
     $9 = $10 < HEAPF32[$8 + 8 >> 2] ? $8 : $14;
     $10 = HEAPF32[$9 + 8 >> 2];
     HEAP32[$11 + 24 >> 2] = HEAP32[$9 + 8 >> 2];
     $7 = $6;
     $8 = $8 + 36 | 0;
     $15 = $15 + -1 | 0;
     if ($15) {
      continue
     }
     break;
    };
   }
   $15 = $19 << 4;
   $9 = $0 + 16 | 0;
   $8 = $15 + HEAP32[$9 >> 2] | 0;
   $14 = $8;
   $18 = HEAPF32[$0 + 56 >> 2];
   $16 = HEAPF32[$0 + 40 >> 2];
   $6 = HEAPF32[$0 + 24 >> 2];
   $4 = $4 < $6 ? $6 : $4;
   $4 = Math_fround(Math_fround($18 * Math_fround(($16 < $4 ? $16 : $4) - $6)) + Math_fround(.5));
   label$18 : {
    if ($4 < Math_fround(4294967296.0) & $4 >= Math_fround(0.0)) {
     $13 = ~~$4 >>> 0;
     break label$18;
    }
    $13 = 0;
   }
   HEAP16[$14 + 6 >> 1] = $13;
   $14 = $8;
   $4 = $5 < $6 ? $6 : $5;
   $4 = Math_fround(Math_fround(Math_fround(($16 < $4 ? $16 : $4) - $6) * $18) + Math_fround(.5));
   label$20 : {
    if ($4 < Math_fround(4294967296.0) & $4 >= Math_fround(0.0)) {
     $13 = ~~$4 >>> 0;
     break label$20;
    }
    $13 = 0;
   }
   HEAP16[$14 >> 1] = $13;
   $14 = $8 + 10 | 0;
   $16 = HEAPF32[$0 - -64 >> 2];
   $6 = HEAPF32[$0 + 48 >> 2];
   $4 = HEAPF32[$0 + 32 >> 2];
   $5 = $10 < $4 ? $4 : $10;
   $5 = Math_fround(Math_fround($16 * Math_fround(($6 < $5 ? $6 : $5) - $4)) + Math_fround(.5));
   label$22 : {
    if ($5 < Math_fround(4294967296.0) & $5 >= Math_fround(0.0)) {
     $13 = ~~$5 >>> 0;
     break label$22;
    }
    $13 = 0;
   }
   HEAP16[$14 >> 1] = $13;
   $14 = $8 + 8 | 0;
   $18 = HEAPF32[$0 + 60 >> 2];
   $10 = HEAPF32[$0 + 44 >> 2];
   $5 = HEAPF32[$0 + 28 >> 2];
   $12 = $12 < $5 ? $5 : $12;
   $12 = Math_fround(Math_fround($18 * Math_fround(($10 < $12 ? $10 : $12) - $5)) + Math_fround(.5));
   label$24 : {
    if ($12 < Math_fround(4294967296.0) & $12 >= Math_fround(0.0)) {
     $13 = ~~$12 >>> 0;
     break label$24;
    }
    $13 = 0;
   }
   HEAP16[$14 >> 1] = $13;
   $14 = $8;
   $7 = $7 < $4 ? $4 : $7;
   $4 = Math_fround(Math_fround(Math_fround(($6 < $7 ? $6 : $7) - $4) * $16) + Math_fround(.5));
   label$26 : {
    if ($4 < Math_fround(4294967296.0) & $4 >= Math_fround(0.0)) {
     $13 = ~~$4 >>> 0;
     break label$26;
    }
    $13 = 0;
   }
   HEAP16[$14 + 4 >> 1] = $13;
   $4 = $17 < $5 ? $5 : $17;
   $4 = Math_fround(Math_fround(Math_fround(($10 < $4 ? $10 : $4) - $5) * $18) + Math_fround(.5));
   label$28 : {
    if ($4 < Math_fround(4294967296.0) & $4 >= Math_fround(0.0)) {
     $14 = ~~$4 >>> 0;
     break label$28;
    }
    $14 = 0;
   }
   HEAP16[$8 + 2 >> 1] = $14;
   btQuantizedBvhTree___build_sub_tree_28GIM_BVH_DATA_ARRAY__2c_20int_2c_20int_29($0, $1, $2, $21);
   btQuantizedBvhTree___build_sub_tree_28GIM_BVH_DATA_ARRAY__2c_20int_2c_20int_29($0, $1, $21, $3);
   HEAP32[($15 + HEAP32[$9 >> 2] | 0) + 12 >> 2] = $19 - HEAP32[$0 >> 2];
  }
  global$0 = $11 + 32 | 0;
 }
 
 function btQuantizedBvhTree__build_tree_28GIM_BVH_DATA_ARRAY__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  btQuantizedBvhTree__calc_quantization_28GIM_BVH_DATA_ARRAY__2c_20float_29($0, $1);
  HEAP32[$0 >> 2] = 0;
  $9 = HEAP32[$0 + 8 >> 2];
  $6 = HEAP32[$1 + 4 >> 2];
  $10 = $6 << 1;
  if (($9 | 0) < ($10 | 0)) {
   if (HEAP32[$0 + 12 >> 2] < ($10 | 0)) {
    label$3 : {
     if (!$6) {
      $4 = $9;
      break label$3;
     }
     $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 5);
     $4 = HEAP32[$0 + 8 >> 2];
    }
    if (($4 | 0) >= 1) {
     while (1) {
      $5 = $3 + HEAP32[$0 + 16 >> 2] | 0;
      $7 = HEAP32[$5 + 4 >> 2];
      $2 = $3 + $12 | 0;
      HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
      HEAP32[$2 + 4 >> 2] = $7;
      $11 = $5 + 8 | 0;
      $5 = HEAP32[$11 >> 2];
      $11 = HEAP32[$11 + 4 >> 2];
      $7 = $2 + 8 | 0;
      HEAP32[$7 >> 2] = $5;
      HEAP32[$7 + 4 >> 2] = $11;
      $3 = $3 + 16 | 0;
      $4 = $4 + -1 | 0;
      if ($4) {
       continue
      }
      break;
     }
    }
    $3 = HEAP32[$0 + 16 >> 2];
    if ($3) {
     if (HEAPU8[$0 + 20 | 0]) {
      btAlignedFreeInternal_28void__29($3)
     }
     HEAP32[$0 + 16 >> 2] = 0;
    }
    HEAP32[$0 + 16 >> 2] = $12;
    HEAP32[$0 + 12 >> 2] = $10;
    HEAP8[$0 + 20 | 0] = 1;
   }
   $3 = $9 << 4;
   $4 = $9 - ($6 << 1) | 0;
   while (1) {
    $7 = HEAP32[$8 + 4 >> 2];
    $2 = $3 + HEAP32[$0 + 16 >> 2] | 0;
    HEAP32[$2 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$2 + 4 >> 2] = $7;
    HEAP32[$2 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
    HEAP32[$2 + 12 >> 2] = 0;
    $3 = $3 + 16 | 0;
    $2 = $4 + 1 | 0;
    $5 = $2 >>> 0 >= $4 >>> 0;
    $4 = $2;
    if ($5) {
     continue
    }
    break;
   };
   $6 = HEAP32[$1 + 4 >> 2];
  }
  HEAP32[$0 + 8 >> 2] = $10;
  btQuantizedBvhTree___build_sub_tree_28GIM_BVH_DATA_ARRAY__2c_20int_2c_20int_29($0, $1, 0, $6);
  global$0 = $8 + 16 | 0;
 }
 
 function btGImpactQuantizedBvh__refit_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = 0;
  $2 = global$0 + -64 | 0;
  global$0 = $2;
  $5 = HEAP32[$0 >> 2];
  if ($5) {
   $19 = $5 << 4;
   $20 = $5 + 1 | 0;
   $21 = HEAP32[$0 + 16 >> 2];
   $22 = $2 + 16 | 0;
   $23 = $2 + 48 | 0;
   while (1) {
    $5 = $19 + $21 | 0;
    $1 = HEAP32[$5 + -4 >> 2];
    label$3 : {
     if (($1 | 0) >= 0) {
      $5 = HEAP32[$0 + 72 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, $1, $2 + 32 | 0);
      $8 = HEAPF32[$2 + 32 >> 2];
      $6 = HEAPF32[$2 + 36 >> 2];
      $21 = HEAP32[$0 + 16 >> 2];
      $5 = $19 + $21 | 0;
      $1 = $5 + -12 | 0;
      $13 = HEAPF32[$0 + 48 >> 2];
      $4 = HEAPF32[$0 + 32 >> 2];
      $7 = HEAPF32[$2 + 40 >> 2];
      $7 = $7 < $4 ? $4 : $7;
      $9 = HEAPF32[$0 + 64 >> 2];
      $7 = Math_fround(Math_fround(Math_fround(($13 < $7 ? $13 : $7) - $4) * $9) + Math_fround(.5));
      label$5 : {
       if ($7 < Math_fround(4294967296.0) & $7 >= Math_fround(0.0)) {
        $3 = ~~$7 >>> 0;
        break label$5;
       }
       $3 = 0;
      }
      HEAP16[$1 >> 1] = $3;
      $1 = $5 + -14 | 0;
      $14 = HEAPF32[$0 + 44 >> 2];
      $7 = HEAPF32[$0 + 28 >> 2];
      $6 = $6 < $7 ? $7 : $6;
      $15 = HEAPF32[$0 + 60 >> 2];
      $6 = Math_fround(Math_fround(Math_fround(($14 < $6 ? $14 : $6) - $7) * $15) + Math_fround(.5));
      label$7 : {
       if ($6 < Math_fround(4294967296.0) & $6 >= Math_fround(0.0)) {
        $3 = ~~$6 >>> 0;
        break label$7;
       }
       $3 = 0;
      }
      HEAP16[$1 >> 1] = $3;
      $1 = $5 + -16 | 0;
      $12 = HEAPF32[$0 + 40 >> 2];
      $6 = HEAPF32[$0 + 24 >> 2];
      $8 = $8 < $6 ? $6 : $8;
      $16 = HEAPF32[$0 + 56 >> 2];
      $8 = Math_fround(Math_fround(Math_fround(($12 < $8 ? $12 : $8) - $6) * $16) + Math_fround(.5));
      label$9 : {
       if ($8 < Math_fround(4294967296.0) & $8 >= Math_fround(0.0)) {
        $3 = ~~$8 >>> 0;
        break label$9;
       }
       $3 = 0;
      }
      HEAP16[$1 >> 1] = $3;
      $8 = HEAPF32[$2 + 48 >> 2];
      $8 = $8 < $6 ? $6 : $8;
      $6 = Math_fround(Math_fround($16 * Math_fround(($12 < $8 ? $12 : $8) - $6)) + Math_fround(.5));
      label$11 : {
       if ($6 < Math_fround(4294967296.0) & $6 >= Math_fround(0.0)) {
        $1 = ~~$6 >>> 0;
        break label$11;
       }
       $1 = 0;
      }
      $6 = HEAPF32[$2 + 56 >> 2];
      $12 = HEAPF32[$2 + 52 >> 2];
      HEAP16[$5 + -10 >> 1] = $1;
      $1 = $5 + -8 | 0;
      $12 = $12 < $7 ? $7 : $12;
      $7 = Math_fround(Math_fround($15 * Math_fround(($14 < $12 ? $14 : $12) - $7)) + Math_fround(.5));
      label$13 : {
       if ($7 < Math_fround(4294967296.0) & $7 >= Math_fround(0.0)) {
        $3 = ~~$7 >>> 0;
        break label$13;
       }
       $3 = 0;
      }
      HEAP16[$1 >> 1] = $3;
      $1 = $5 + -6 | 0;
      $7 = $6 < $4 ? $4 : $6;
      $4 = Math_fround(Math_fround($9 * Math_fround(($13 < $7 ? $13 : $7) - $4)) + Math_fround(.5));
      label$15 : {
       if ($4 < Math_fround(4294967296.0) & $4 >= Math_fround(0.0)) {
        $5 = ~~$4 >>> 0;
        break label$15;
       }
       $5 = 0;
      }
      HEAP16[$1 >> 1] = $5;
      break label$3;
     }
     HEAP32[$2 + 56 >> 2] = -8388609;
     HEAP32[$2 + 48 >> 2] = -8388609;
     HEAP32[$2 + 52 >> 2] = -8388609;
     HEAP32[$2 + 36 >> 2] = 2139095039;
     HEAP32[$2 + 40 >> 2] = 2139095039;
     $1 = HEAPU16[$5 >> 1];
     $3 = HEAPU16[$5 + 2 >> 1];
     $17 = HEAPU16[$5 + 4 >> 1];
     HEAP32[$2 + 12 >> 2] = 0;
     $13 = HEAPF32[$0 + 64 >> 2];
     $4 = HEAPF32[$0 + 32 >> 2];
     $15 = Math_fround(Math_fround(Math_fround($17 >>> 0) / $13) + $4);
     HEAPF32[$2 + 8 >> 2] = $15;
     $14 = HEAPF32[$0 + 60 >> 2];
     $7 = HEAPF32[$0 + 28 >> 2];
     $16 = Math_fround(Math_fround(Math_fround($3 >>> 0) / $14) + $7);
     HEAPF32[$2 + 4 >> 2] = $16;
     $12 = HEAPF32[$0 + 56 >> 2];
     $6 = HEAPF32[$0 + 24 >> 2];
     $8 = Math_fround(Math_fround(Math_fround($1 >>> 0) / $12) + $6);
     HEAPF32[$2 >> 2] = $8;
     $1 = HEAPU16[$5 + 6 >> 1];
     $3 = HEAPU16[$5 + 8 >> 1];
     $17 = HEAPU16[$5 + 10 >> 1];
     HEAP32[$2 + 28 >> 2] = 0;
     $10 = Math_fround($4 + Math_fround(Math_fround($17 >>> 0) / $13));
     HEAPF32[$2 + 24 >> 2] = $10;
     $11 = Math_fround($7 + Math_fround(Math_fround($3 >>> 0) / $14));
     HEAPF32[$2 + 20 >> 2] = $11;
     $9 = Math_fround($6 + Math_fround(Math_fround($1 >>> 0) / $12));
     HEAPF32[$2 + 16 >> 2] = $9;
     $8 = $8 < Math_fround(3402823466385288598117041.0e14) ? $8 : Math_fround(3402823466385288598117041.0e14);
     HEAPF32[$2 + 32 >> 2] = $8;
     $1 = $16 < Math_fround(3402823466385288598117041.0e14) ? $2 : $2 + 32 | 0;
     $16 = HEAPF32[$1 + 4 >> 2];
     $3 = HEAP32[$1 + 4 >> 2];
     $1 = $15 < Math_fround(3402823466385288598117041.0e14) ? $2 : $2 + 32 | 0;
     $15 = HEAPF32[$1 + 8 >> 2];
     $17 = HEAP32[$1 + 8 >> 2];
     HEAP32[$2 + 40 >> 2] = $17;
     $9 = $9 > Math_fround(-3402823466385288598117041.0e14) ? $9 : Math_fround(-3402823466385288598117041.0e14);
     HEAPF32[$2 + 48 >> 2] = $9;
     HEAP32[$2 + 36 >> 2] = $3;
     $1 = HEAP32[$5 + 12 >> 2];
     $3 = $11 > Math_fround(-3402823466385288598117041.0e14) ? $22 : $23;
     $11 = HEAPF32[$3 + 4 >> 2];
     $3 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 52 >> 2] = $3;
     $3 = $10 > Math_fround(-3402823466385288598117041.0e14) ? $22 : $23;
     $10 = HEAPF32[$3 + 8 >> 2];
     $3 = HEAP32[$3 + 8 >> 2];
     HEAP32[$2 + 56 >> 2] = $3;
     $1 = ((($1 | 0) > -1 ? $1 : -1) - $1 | 0) + $20 | 0;
     if ($1) {
      $1 = ($1 << 4) + $21 | 0;
      $3 = HEAPU16[$1 + 2 >> 1];
      $17 = HEAPU16[$1 + 4 >> 1];
      $29 = HEAPU16[$1 >> 1];
      HEAP32[$2 + 12 >> 2] = 0;
      $18 = Math_fround(Math_fround(Math_fround($29 >>> 0) / $12) + $6);
      HEAPF32[$2 >> 2] = $18;
      $25 = Math_fround(Math_fround(Math_fround($17 >>> 0) / $13) + $4);
      HEAPF32[$2 + 8 >> 2] = $25;
      $26 = Math_fround(Math_fround(Math_fround($3 >>> 0) / $14) + $7);
      HEAPF32[$2 + 4 >> 2] = $26;
      $3 = HEAPU16[$1 + 6 >> 1];
      $17 = HEAPU16[$1 + 8 >> 1];
      $1 = HEAPU16[$1 + 10 >> 1];
      HEAP32[$2 + 28 >> 2] = 0;
      $27 = Math_fround($4 + Math_fround(Math_fround($1 >>> 0) / $13));
      HEAPF32[$2 + 24 >> 2] = $27;
      $28 = Math_fround($7 + Math_fround(Math_fround($17 >>> 0) / $14));
      HEAPF32[$2 + 20 >> 2] = $28;
      $24 = Math_fround($6 + Math_fround(Math_fround($3 >>> 0) / $12));
      HEAPF32[$2 + 16 >> 2] = $24;
      $1 = $26 < $16 ? $2 : $2 + 32 | 0;
      $16 = HEAPF32[$1 + 4 >> 2];
      $1 = HEAP32[$1 + 4 >> 2];
      $3 = $25 < $15 ? $2 : $2 + 32 | 0;
      $15 = HEAPF32[$3 + 8 >> 2];
      $3 = HEAP32[$3 + 8 >> 2];
      HEAP32[$2 + 40 >> 2] = $3;
      $9 = $9 < $24 ? $24 : $9;
      HEAPF32[$2 + 48 >> 2] = $9;
      $8 = $8 > $18 ? $18 : $8;
      HEAPF32[$2 + 32 >> 2] = $8;
      HEAP32[$2 + 36 >> 2] = $1;
      $1 = $28 > $11 ? $22 : $23;
      $11 = HEAPF32[$1 + 4 >> 2];
      $1 = HEAP32[$1 + 4 >> 2];
      HEAP32[$2 + 52 >> 2] = $1;
      $1 = $27 > $10 ? $22 : $23;
      $10 = HEAPF32[$1 + 8 >> 2];
      $1 = HEAP32[$1 + 8 >> 2];
      HEAP32[$2 + 56 >> 2] = $1;
     }
     $1 = $5 + -6 | 0;
     $18 = HEAPF32[$0 + 48 >> 2];
     $10 = $10 < $4 ? $4 : $10;
     $10 = Math_fround(Math_fround($13 * Math_fround(($18 < $10 ? $18 : $10) - $4)) + Math_fround(.5));
     label$18 : {
      if ($10 < Math_fround(4294967296.0) & $10 >= Math_fround(0.0)) {
       $3 = ~~$10 >>> 0;
       break label$18;
      }
      $3 = 0;
     }
     HEAP16[$1 >> 1] = $3;
     $1 = $5 + -8 | 0;
     $10 = HEAPF32[$0 + 44 >> 2];
     $11 = $11 < $7 ? $7 : $11;
     $11 = Math_fround(Math_fround($14 * Math_fround(($10 < $11 ? $10 : $11) - $7)) + Math_fround(.5));
     label$20 : {
      if ($11 < Math_fround(4294967296.0) & $11 >= Math_fround(0.0)) {
       $3 = ~~$11 >>> 0;
       break label$20;
      }
      $3 = 0;
     }
     HEAP16[$1 >> 1] = $3;
     $1 = $5 + -10 | 0;
     $11 = HEAPF32[$0 + 40 >> 2];
     $9 = $9 < $6 ? $6 : $9;
     $9 = Math_fround(Math_fround($12 * Math_fround(($11 < $9 ? $11 : $9) - $6)) + Math_fround(.5));
     label$22 : {
      if ($9 < Math_fround(4294967296.0) & $9 >= Math_fround(0.0)) {
       $3 = ~~$9 >>> 0;
       break label$22;
      }
      $3 = 0;
     }
     HEAP16[$1 >> 1] = $3;
     $1 = $5 + -12 | 0;
     $9 = $15 < $4 ? $4 : $15;
     $4 = Math_fround(Math_fround(Math_fround(($18 < $9 ? $18 : $9) - $4) * $13) + Math_fround(.5));
     label$24 : {
      if ($4 < Math_fround(4294967296.0) & $4 >= Math_fround(0.0)) {
       $3 = ~~$4 >>> 0;
       break label$24;
      }
      $3 = 0;
     }
     HEAP16[$1 >> 1] = $3;
     $1 = $5 + -14 | 0;
     $4 = $16 < $7 ? $7 : $16;
     $4 = Math_fround(Math_fround(Math_fround(($10 < $4 ? $10 : $4) - $7) * $14) + Math_fround(.5));
     label$26 : {
      if ($4 < Math_fround(4294967296.0) & $4 >= Math_fround(0.0)) {
       $3 = ~~$4 >>> 0;
       break label$26;
      }
      $3 = 0;
     }
     HEAP16[$1 >> 1] = $3;
     $1 = $5 + -16 | 0;
     $4 = $8 < $6 ? $6 : $8;
     $4 = Math_fround(Math_fround(Math_fround(($11 < $4 ? $11 : $4) - $6) * $12) + Math_fround(.5));
     label$28 : {
      if ($4 < Math_fround(4294967296.0) & $4 >= Math_fround(0.0)) {
       $5 = ~~$4 >>> 0;
       break label$28;
      }
      $5 = 0;
     }
     HEAP16[$1 >> 1] = $5;
    }
    $19 = $19 + -16 | 0;
    $20 = $20 + -1 | 0;
    if (($20 | 0) != 1) {
     continue
    }
    break;
   };
  }
  global$0 = $2 - -64 | 0;
 }
 
 function btGImpactQuantizedBvh__buildSet_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $1 = global$0 + -64 | 0;
  global$0 = $1;
  HEAP8[$1 + 56 | 0] = 1;
  HEAP32[$1 + 44 >> 2] = 0;
  HEAP32[$1 + 48 >> 2] = 0;
  HEAP32[$1 + 52 >> 2] = 0;
  $2 = HEAP32[$0 + 72 >> 2];
  $7 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2) | 0;
  $5 = $1 + 32 | 0;
  $3 = $5;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $9 = $1 + 24 | 0;
  $3 = $9;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $8 = $1 + 16 | 0;
  $3 = $8;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 12 >> 2] = 0;
  label$1 : {
   if (($7 | 0) <= 0) {
    HEAP32[$1 + 44 >> 2] = $7;
    break label$1;
   }
   $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($7, 36));
   HEAP32[$2 + 32 >> 2] = 0;
   HEAP32[$1 + 52 >> 2] = $2;
   HEAP32[$1 + 48 >> 2] = $7;
   HEAP8[$1 + 56 | 0] = 1;
   $6 = $8;
   $8 = HEAP32[$6 >> 2];
   $3 = HEAP32[$6 + 4 >> 2];
   $4 = $2 + 8 | 0;
   HEAP32[$4 >> 2] = $8;
   HEAP32[$4 + 4 >> 2] = $3;
   $4 = HEAP32[$1 + 12 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$2 + 4 >> 2] = $4;
   $3 = HEAP32[$1 + 28 >> 2];
   HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 24 >> 2];
   HEAP32[$2 + 20 >> 2] = $3;
   $4 = HEAP32[$5 + 4 >> 2];
   $3 = $2 + 24 | 0;
   HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$3 + 4 >> 2] = $4;
   if (($7 | 0) != 1) {
    $8 = $7 + -1 | 0;
    $5 = 36;
    while (1) {
     $3 = HEAP32[$1 + 12 >> 2];
     $2 = $5 + HEAP32[$1 + 52 >> 2] | 0;
     HEAP32[$2 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$2 + 4 >> 2] = $3;
     $6 = $1 + 16 | 0;
     $10 = HEAP32[$6 >> 2];
     $4 = HEAP32[$6 + 4 >> 2];
     $3 = $2 + 8 | 0;
     HEAP32[$3 >> 2] = $10;
     HEAP32[$3 + 4 >> 2] = $4;
     $6 = $9;
     $10 = HEAP32[$6 >> 2];
     $3 = HEAP32[$6 + 4 >> 2];
     $4 = $2 + 16 | 0;
     HEAP32[$4 >> 2] = $10;
     HEAP32[$4 + 4 >> 2] = $3;
     $6 = $6 + 8 | 0;
     $10 = HEAP32[$6 >> 2];
     $4 = HEAP32[$6 + 4 >> 2];
     $3 = $2 + 24 | 0;
     HEAP32[$3 >> 2] = $10;
     HEAP32[$3 + 4 >> 2] = $4;
     HEAP32[$2 + 32 >> 2] = 0;
     $5 = $5 + 36 | 0;
     $8 = $8 + -1 | 0;
     if ($8) {
      continue
     }
     break;
    };
   }
   HEAP32[$1 + 44 >> 2] = $7;
   if (($7 | 0) < 1) {
    break label$1
   }
   $2 = 0;
   $5 = HEAP32[$1 + 52 >> 2];
   while (1) {
    $9 = HEAP32[$0 + 72 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 16 >> 2]]($9, $2, $5);
    HEAP32[$5 + 32 >> 2] = $2;
    $5 = $5 + 36 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) < ($7 | 0)) {
     continue
    }
    break;
   };
  }
  btQuantizedBvhTree__build_tree_28GIM_BVH_DATA_ARRAY__29($0, $1 + 40 | 0);
  $2 = HEAP32[$1 + 52 >> 2];
  if ($2) {
   if (HEAPU8[$1 + 56 | 0]) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$1 + 52 >> 2] = 0;
  }
  global$0 = $1 - -64 | 0;
 }
 
 function btGImpactQuantizedBvh__boxQuery_28btAABB_20const__2c_20btAlignedObjectArray_int___29_20const($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
  $17 = HEAPF32[$0 - -64 >> 2];
  $5 = HEAPF32[$0 + 48 >> 2];
  $3 = HEAPF32[$0 + 32 >> 2];
  $4 = HEAPF32[$1 + 24 >> 2];
  $4 = $4 < $3 ? $3 : $4;
  $4 = Math_fround(Math_fround($17 * Math_fround(($5 < $4 ? $5 : $4) - $3)) + Math_fround(.5));
  label$1 : {
   if ($4 < Math_fround(4294967296.0) & $4 >= Math_fround(0.0)) {
    $18 = ~~$4 >>> 0;
    break label$1;
   }
   $18 = 0;
  }
  $19 = HEAPF32[$0 + 60 >> 2];
  $9 = HEAPF32[$0 + 44 >> 2];
  $4 = HEAPF32[$0 + 28 >> 2];
  $6 = HEAPF32[$1 + 20 >> 2];
  $6 = $6 < $4 ? $4 : $6;
  $6 = Math_fround(Math_fround($19 * Math_fround(($9 < $6 ? $9 : $6) - $4)) + Math_fround(.5));
  label$3 : {
   if ($6 < Math_fround(4294967296.0) & $6 >= Math_fround(0.0)) {
    $20 = ~~$6 >>> 0;
    break label$3;
   }
   $20 = 0;
  }
  $6 = HEAPF32[$1 + 8 >> 2];
  $6 = $6 < $3 ? $3 : $6;
  $3 = Math_fround(Math_fround(Math_fround(($5 < $6 ? $5 : $6) - $3) * $17) + Math_fround(.5));
  label$5 : {
   if ($3 < Math_fround(4294967296.0) & $3 >= Math_fround(0.0)) {
    $12 = ~~$3 >>> 0;
    break label$5;
   }
   $12 = 0;
  }
  $3 = HEAPF32[$1 + 4 >> 2];
  $3 = $3 < $4 ? $4 : $3;
  $3 = Math_fround(Math_fround(Math_fround(($9 < $3 ? $9 : $3) - $4) * $19) + Math_fround(.5));
  label$7 : {
   if ($3 < Math_fround(4294967296.0) & $3 >= Math_fround(0.0)) {
    $21 = ~~$3 >>> 0;
    break label$7;
   }
   $21 = 0;
  }
  $9 = HEAPF32[$0 + 56 >> 2];
  $4 = HEAPF32[$0 + 40 >> 2];
  $3 = HEAPF32[$0 + 24 >> 2];
  $5 = HEAPF32[$1 + 16 >> 2];
  $5 = $5 < $3 ? $3 : $5;
  $5 = Math_fround(Math_fround($9 * Math_fround(($4 < $5 ? $4 : $5) - $3)) + Math_fround(.5));
  label$9 : {
   if ($5 < Math_fround(4294967296.0) & $5 >= Math_fround(0.0)) {
    $22 = ~~$5 >>> 0;
    break label$9;
   }
   $22 = 0;
  }
  $5 = HEAPF32[$1 >> 2];
  $5 = $5 < $3 ? $3 : $5;
  $3 = Math_fround(Math_fround(Math_fround(($4 < $5 ? $4 : $5) - $3) * $9) + Math_fround(.5));
  label$11 : {
   if ($3 < Math_fround(4294967296.0) & $3 >= Math_fround(0.0)) {
    $23 = ~~$3 >>> 0;
    break label$11;
   }
   $23 = 0;
  }
  $24 = HEAP32[$0 >> 2];
  if (($24 | 0) >= 1) {
   $1 = 0;
   while (1) {
    label$15 : {
     label$16 : {
      $25 = $1 << 4;
      $7 = $25 + HEAP32[$0 + 16 >> 2] | 0;
      label$17 : {
       if (HEAPU16[$7 >> 1] > $22 >>> 0) {
        break label$17
       }
       if (HEAPU16[$7 + 6 >> 1] < $23 >>> 0) {
        break label$17
       }
       if (HEAPU16[$7 + 2 >> 1] > $20 >>> 0) {
        break label$17
       }
       if (HEAPU16[$7 + 8 >> 1] < $21 >>> 0) {
        break label$17
       }
       if (HEAPU16[$7 + 4 >> 1] <= $18 >>> 0) {
        break label$16
       }
      }
      $26 = HEAP32[$7 + 12 >> 2] > -1;
      $7 = 0;
      break label$15;
     }
     $13 = HEAP32[$7 + 12 >> 2];
     $26 = ($13 | 0) > -1;
     $10 = HEAPU16[$7 + 10 >> 1];
     $7 = $10 >>> 0 >= $12 >>> 0;
     if ($10 >>> 0 < $12 >>> 0) {
      break label$15
     }
     if (($13 | 0) < 0) {
      break label$15
     }
     $8 = HEAP32[$2 + 4 >> 2];
     label$18 : {
      if (($8 | 0) != HEAP32[$2 + 8 >> 2]) {
       break label$18
      }
      $11 = $8 ? $8 << 1 : 1;
      if (($8 | 0) >= ($11 | 0)) {
       break label$18
      }
      label$19 : {
       if (!$11) {
        $14 = 0;
        break label$19;
       }
       $14 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 2);
       $8 = HEAP32[$2 + 4 >> 2];
      }
      $15 = HEAP32[$2 + 12 >> 2];
      label$21 : {
       label$22 : {
        if (($8 | 0) >= 1) {
         $10 = $14;
         $16 = $15;
         while (1) {
          HEAP32[$10 >> 2] = HEAP32[$16 >> 2];
          $10 = $10 + 4 | 0;
          $16 = $16 + 4 | 0;
          $8 = $8 + -1 | 0;
          if ($8) {
           continue
          }
          break;
         };
         break label$22;
        }
        if (!$15) {
         break label$21
        }
       }
       if (HEAPU8[$2 + 16 | 0]) {
        btAlignedFreeInternal_28void__29($15)
       }
       HEAP32[$2 + 12 >> 2] = 0;
       $8 = HEAP32[$2 + 4 >> 2];
      }
      HEAP32[$2 + 12 >> 2] = $14;
      HEAP8[$2 + 16 | 0] = 1;
      HEAP32[$2 + 8 >> 2] = $11;
     }
     HEAP32[HEAP32[$2 + 12 >> 2] + ($8 << 2) >> 2] = $13;
     HEAP32[$2 + 4 >> 2] = HEAP32[$2 + 4 >> 2] + 1;
    }
    $1 = ($26 ? 0 : !$7) ? $1 - HEAP32[($25 + HEAP32[$0 + 16 >> 2] | 0) + 12 >> 2] | 0 : $1 + 1 | 0;
    if (($1 | 0) < ($24 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function btGImpactQuantizedBvh__rayQuery_28btVector3_20const__2c_20btVector3_20const__2c_20btAlignedObjectArray_int___29_20const($0, $1, $2, $3) {
  var $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0);
  $21 = HEAP32[$0 >> 2];
  if (($21 | 0) >= 1) {
   while (1) {
    $13 = $16 << 4;
    $6 = $13 + HEAP32[$0 + 16 >> 2] | 0;
    $17 = HEAPU16[$6 + 4 >> 1];
    $9 = HEAPF32[$0 + 64 >> 2];
    $10 = HEAPF32[$0 + 32 >> 2];
    $14 = HEAPU16[$6 + 10 >> 1];
    $12 = HEAPU16[$6 + 2 >> 1];
    $4 = HEAPF32[$0 + 60 >> 2];
    $7 = HEAPF32[$0 + 28 >> 2];
    $5 = HEAPU16[$6 + 8 >> 1];
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $8 = HEAPF32[$0 + 56 >> 2];
        $11 = HEAPF32[$0 + 24 >> 2];
        $15 = Math_fround(Math_fround(Math_fround(HEAPU16[$6 >> 1]) / $8) + $11);
        $8 = Math_fround($11 + Math_fround(Math_fround(HEAPU16[$6 + 6 >> 1]) / $8));
        $11 = Math_fround(Math_fround($15 + $8) * Math_fround(.5));
        $15 = Math_fround(HEAPF32[$2 >> 2] - $11);
        $11 = Math_fround($8 - $11);
        label$7 : {
         if (Math_fround($15 * HEAPF32[$1 >> 2]) >= Math_fround(0.0) ? !!(Math_fround(Math_abs($15)) > $11) : 0) {
          break label$7
         }
         $8 = Math_fround(Math_fround(Math_fround($12 >>> 0) / $4) + $7);
         $4 = Math_fround($7 + Math_fround(Math_fround($5 >>> 0) / $4));
         $7 = Math_fround(Math_fround($8 + $4) * Math_fround(.5));
         $8 = Math_fround(HEAPF32[$2 + 4 >> 2] - $7);
         $18 = Math_fround($4 - $7);
         if (Math_fround($8 * HEAPF32[$1 + 4 >> 2]) >= Math_fround(0.0) ? !!(Math_fround(Math_abs($8)) > $18) : 0) {
          break label$7
         }
         $4 = Math_fround(Math_fround(Math_fround($17 >>> 0) / $9) + $10);
         $9 = Math_fround($10 + Math_fround(Math_fround($14 >>> 0) / $9));
         $10 = Math_fround(Math_fround($4 + $9) * Math_fround(.5));
         $7 = Math_fround(HEAPF32[$2 + 8 >> 2] - $10);
         $9 = Math_fround($9 - $10);
         $4 = HEAPF32[$1 + 8 >> 2];
         if (Math_fround($7 * $4) >= Math_fround(0.0) ? !!(Math_fround(Math_abs($7)) > $9) : 0) {
          break label$7
         }
         $10 = HEAPF32[$1 + 4 >> 2];
         $22 = Math_fround(Math_abs($10));
         $23 = Math_fround(Math_abs($4));
         if (Math_fround(Math_abs(Math_fround(Math_fround($7 * $10) - Math_fround($8 * $4)))) > Math_fround(Math_fround($18 * $23) + Math_fround($9 * $22))) {
          break label$7
         }
         $19 = Math_fround($15 * $4);
         $4 = HEAPF32[$1 >> 2];
         $19 = Math_fround(Math_abs(Math_fround($19 - Math_fround($7 * $4))));
         $7 = Math_fround(Math_abs($4));
         if (!($19 > Math_fround(Math_fround($11 * $23) + Math_fround($9 * $7)))) {
          break label$6
         }
        }
        $6 = HEAP32[$6 + 12 >> 2] > -1;
        $12 = 0;
        break label$5;
       }
       $5 = Math_fround(Math_abs(Math_fround(Math_fround($8 * $4) - Math_fround($15 * $10)))) > Math_fround(Math_fround($11 * $22) + Math_fround($18 * $7));
       $12 = $5 ^ 1;
       $17 = HEAP32[$6 + 12 >> 2];
       $6 = ($17 | 0) > -1;
       if ($5) {
        break label$5
       }
       if (($17 | 0) < 0) {
        break label$5
       }
       $5 = HEAP32[$3 + 4 >> 2];
       label$11 : {
        if (($5 | 0) != HEAP32[$3 + 8 >> 2]) {
         break label$11
        }
        $14 = $5 ? $5 << 1 : 1;
        if (($5 | 0) >= ($14 | 0)) {
         break label$11
        }
        label$12 : {
         if (!$14) {
          $13 = 0;
          break label$12;
         }
         $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($14 << 2);
         $5 = HEAP32[$3 + 4 >> 2];
        }
        $20 = HEAP32[$3 + 12 >> 2];
        label$14 : {
         label$15 : {
          if (($5 | 0) >= 1) {
           $6 = $13;
           $12 = $20;
           while (1) {
            HEAP32[$6 >> 2] = HEAP32[$12 >> 2];
            $6 = $6 + 4 | 0;
            $12 = $12 + 4 | 0;
            $5 = $5 + -1 | 0;
            if ($5) {
             continue
            }
            break;
           };
           break label$15;
          }
          if (!$20) {
           break label$14
          }
         }
         if (HEAPU8[$3 + 16 | 0]) {
          btAlignedFreeInternal_28void__29($20)
         }
         HEAP32[$3 + 12 >> 2] = 0;
         $5 = HEAP32[$3 + 4 >> 2];
        }
        HEAP32[$3 + 12 >> 2] = $13;
        HEAP8[$3 + 16 | 0] = 1;
        HEAP32[$3 + 8 >> 2] = $14;
       }
       HEAP32[HEAP32[$3 + 12 >> 2] + ($5 << 2) >> 2] = $17;
       HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] + 1;
       break label$4;
      }
      if ($6) {
       break label$4
      }
      if ($12) {
       break label$4
      }
      $16 = $16 - HEAP32[($13 + HEAP32[$0 + 16 >> 2] | 0) + 12 >> 2] | 0;
      break label$3;
     }
     $16 = $16 + 1 | 0;
    }
    if (($16 | 0) < ($21 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function btGImpactQuantizedBvh__find_collision_28btGImpactQuantizedBvh_20const__2c_20btTransform_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btTransform_20const__2c_20btPairSet__29($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = global$0 - 112 | 0;
  global$0 = $5;
  label$1 : {
   if (!HEAP32[$0 >> 2]) {
    break label$1
   }
   if (!HEAP32[$2 >> 2]) {
    break label$1
   }
   BT_BOX_BOX_TRANSFORM_CACHE__calc_from_homogenic_28btTransform_20const__2c_20btTransform_20const__29($5, $1, $3);
   _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $2, $4, $5, 0, 0, 1);
  }
  global$0 = $5 + 112 | 0;
 }
 
 function BT_BOX_BOX_TRANSFORM_CACHE__calc_from_homogenic_28btTransform_20const__2c_20btTransform_20const__29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0);
  $16 = HEAPF32[$1 + 52 >> 2];
  $17 = HEAPF32[$1 + 56 >> 2];
  $18 = HEAPF32[$2 + 52 >> 2];
  $19 = HEAPF32[$2 + 56 >> 2];
  $7 = HEAPF32[$1 + 20 >> 2];
  $8 = HEAPF32[$1 + 36 >> 2];
  $3 = HEAPF32[$2 + 20 >> 2];
  $4 = HEAPF32[$2 + 36 >> 2];
  $5 = HEAPF32[$2 + 24 >> 2];
  $9 = HEAPF32[$1 + 24 >> 2];
  $20 = HEAPF32[$2 + 40 >> 2];
  $10 = HEAPF32[$1 + 40 >> 2];
  $32 = HEAPF32[$1 + 48 >> 2];
  $21 = HEAPF32[$2 + 48 >> 2];
  $11 = HEAPF32[$1 + 4 >> 2];
  $22 = HEAPF32[$2 + 4 >> 2];
  $23 = HEAPF32[$2 + 8 >> 2];
  $12 = HEAPF32[$1 + 8 >> 2];
  $6 = HEAPF32[$2 + 32 >> 2];
  $13 = HEAPF32[$1 + 32 >> 2];
  $24 = HEAPF32[$2 >> 2];
  $14 = HEAPF32[$1 >> 2];
  $25 = HEAPF32[$2 + 16 >> 2];
  $15 = HEAPF32[$1 + 16 >> 2];
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  $26 = Math_fround(Math_fround(Math_fround($14 * $24) + Math_fround($15 * $25)) + Math_fround($13 * $6));
  HEAPF32[$0 + 16 >> 2] = $26;
  $27 = Math_fround(Math_fround(Math_fround($12 * $23) + Math_fround($9 * $5)) + Math_fround($10 * $20));
  HEAPF32[$0 + 56 >> 2] = $27;
  $28 = Math_fround(Math_fround(Math_fround($12 * $22) + Math_fround($9 * $3)) + Math_fround($10 * $4));
  HEAPF32[$0 + 52 >> 2] = $28;
  $29 = Math_fround(Math_fround(Math_fround($12 * $24) + Math_fround($9 * $25)) + Math_fround($10 * $6));
  HEAPF32[$0 + 48 >> 2] = $29;
  $30 = Math_fround(Math_fround(Math_fround($11 * $23) + Math_fround($7 * $5)) + Math_fround($8 * $20));
  HEAPF32[$0 + 40 >> 2] = $30;
  $31 = Math_fround(Math_fround(Math_fround($11 * $22) + Math_fround($7 * $3)) + Math_fround($8 * $4));
  HEAPF32[$0 + 36 >> 2] = $31;
  $6 = Math_fround(Math_fround(Math_fround($11 * $24) + Math_fround($7 * $25)) + Math_fround($8 * $6));
  HEAPF32[$0 + 32 >> 2] = $6;
  $5 = Math_fround(Math_fround(Math_fround($14 * $23) + Math_fround($15 * $5)) + Math_fround($13 * $20));
  HEAPF32[$0 + 24 >> 2] = $5;
  $4 = Math_fround(Math_fround(Math_fround($14 * $22) + Math_fround($15 * $3)) + Math_fround($13 * $4));
  HEAPF32[$0 + 20 >> 2] = $4;
  HEAPF32[$0 + 64 >> 2] = Math_fround(Math_abs($26)) + Math_fround(9.999999974752427e-07);
  $3 = Math_fround(-$32);
  HEAPF32[$0 + 8 >> 2] = Math_fround(Math_fround(Math_fround($12 * $3) - Math_fround($9 * $16)) - Math_fround($10 * $17)) + Math_fround(Math_fround(Math_fround($12 * $21) + Math_fround($9 * $18)) + Math_fround($10 * $19));
  HEAPF32[$0 + 4 >> 2] = Math_fround(Math_fround(Math_fround($11 * $3) - Math_fround($7 * $16)) - Math_fround($8 * $17)) + Math_fround(Math_fround(Math_fround($11 * $21) + Math_fround($7 * $18)) + Math_fround($8 * $19));
  HEAPF32[$0 >> 2] = Math_fround(Math_fround(Math_fround($14 * $3) - Math_fround($15 * $16)) - Math_fround($13 * $17)) + Math_fround(Math_fround(Math_fround($14 * $21) + Math_fround($15 * $18)) + Math_fround($13 * $19));
  HEAPF32[$0 + 104 >> 2] = Math_fround(Math_abs($27)) + Math_fround(9.999999974752427e-07);
  HEAPF32[$0 + 100 >> 2] = Math_fround(Math_abs($28)) + Math_fround(9.999999974752427e-07);
  HEAPF32[$0 + 96 >> 2] = Math_fround(Math_abs($29)) + Math_fround(9.999999974752427e-07);
  HEAPF32[$0 + 88 >> 2] = Math_fround(Math_abs($30)) + Math_fround(9.999999974752427e-07);
  HEAPF32[$0 + 84 >> 2] = Math_fround(Math_abs($31)) + Math_fround(9.999999974752427e-07);
  HEAPF32[$0 + 80 >> 2] = Math_fround(Math_abs($6)) + Math_fround(9.999999974752427e-07);
  HEAPF32[$0 + 72 >> 2] = Math_fround(Math_abs($5)) + Math_fround(9.999999974752427e-07);
  HEAPF32[$0 + 68 >> 2] = Math_fround(Math_abs($4)) + Math_fround(9.999999974752427e-07);
 }
 
 function _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = 0;
  $8 = global$0 + -64 | 0;
  global$0 = $8;
  $18 = $4 << 4;
  $7 = $18 + HEAP32[$0 + 16 >> 2] | 0;
  $10 = HEAPU16[$7 >> 1];
  $9 = HEAPU16[$7 + 2 >> 1];
  $11 = HEAPU16[$7 + 4 >> 1];
  HEAP32[$8 + 44 >> 2] = 0;
  $12 = HEAPF32[$0 - -64 >> 2];
  $13 = HEAPF32[$0 + 32 >> 2];
  HEAPF32[$8 + 40 >> 2] = Math_fround(Math_fround($11 >>> 0) / $12) + $13;
  $14 = HEAPF32[$0 + 60 >> 2];
  $15 = HEAPF32[$0 + 28 >> 2];
  HEAPF32[$8 + 36 >> 2] = Math_fround(Math_fround($9 >>> 0) / $14) + $15;
  $16 = HEAPF32[$0 + 56 >> 2];
  $17 = HEAPF32[$0 + 24 >> 2];
  HEAPF32[$8 + 32 >> 2] = Math_fround(Math_fround($10 >>> 0) / $16) + $17;
  $10 = HEAPU16[$7 + 6 >> 1];
  $9 = HEAPU16[$7 + 10 >> 1];
  $7 = HEAPU16[$7 + 8 >> 1];
  HEAP32[$8 + 60 >> 2] = 0;
  HEAPF32[$8 + 52 >> 2] = $15 + Math_fround(Math_fround($7 >>> 0) / $14);
  HEAPF32[$8 + 56 >> 2] = $13 + Math_fround(Math_fround($9 >>> 0) / $12);
  HEAPF32[$8 + 48 >> 2] = $17 + Math_fround(Math_fround($10 >>> 0) / $16);
  $19 = $5 << 4;
  $7 = $19 + HEAP32[$1 + 16 >> 2] | 0;
  $10 = HEAPU16[$7 >> 1];
  $9 = HEAPU16[$7 + 2 >> 1];
  $11 = HEAPU16[$7 + 4 >> 1];
  HEAP32[$8 + 12 >> 2] = 0;
  $12 = HEAPF32[$1 - -64 >> 2];
  $13 = HEAPF32[$1 + 32 >> 2];
  HEAPF32[$8 + 8 >> 2] = Math_fround(Math_fround($11 >>> 0) / $12) + $13;
  $14 = HEAPF32[$1 + 60 >> 2];
  $15 = HEAPF32[$1 + 28 >> 2];
  HEAPF32[$8 + 4 >> 2] = Math_fround(Math_fround($9 >>> 0) / $14) + $15;
  $16 = HEAPF32[$1 + 56 >> 2];
  $17 = HEAPF32[$1 + 24 >> 2];
  HEAPF32[$8 >> 2] = Math_fround(Math_fround($10 >>> 0) / $16) + $17;
  $10 = HEAPU16[$7 + 6 >> 1];
  $9 = HEAPU16[$7 + 10 >> 1];
  $7 = HEAPU16[$7 + 8 >> 1];
  HEAP32[$8 + 28 >> 2] = 0;
  HEAPF32[$8 + 20 >> 2] = $15 + Math_fround(Math_fround($7 >>> 0) / $14);
  HEAPF32[$8 + 24 >> 2] = $13 + Math_fround(Math_fround($9 >>> 0) / $12);
  HEAPF32[$8 + 16 >> 2] = $17 + Math_fround(Math_fround($10 >>> 0) / $16);
  label$1 : {
   if (!btAABB__overlapping_trans_cache_28btAABB_20const__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20bool_29_20const($8 + 32 | 0, $8, $3, $6)) {
    break label$1
   }
   $6 = HEAP32[($19 + HEAP32[$1 + 16 >> 2] | 0) + 12 >> 2];
   $10 = HEAP32[($18 + HEAP32[$0 + 16 >> 2] | 0) + 12 >> 2];
   if (($10 | 0) >= 0) {
    if (($6 | 0) >= 0) {
     $3 = HEAP32[$2 + 4 >> 2];
     label$4 : {
      if (($3 | 0) != HEAP32[$2 + 8 >> 2]) {
       break label$4
      }
      $5 = $3 ? $3 << 1 : 1;
      if (($3 | 0) >= ($5 | 0)) {
       break label$4
      }
      label$5 : {
       if (!$5) {
        $4 = 0;
        break label$5;
       }
       $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 3);
       $3 = HEAP32[$2 + 4 >> 2];
      }
      $9 = HEAP32[$2 + 12 >> 2];
      label$7 : {
       label$8 : {
        if (($3 | 0) >= 1) {
         $1 = $9;
         $0 = $4;
         $7 = $3;
         while (1) {
          $11 = HEAP32[$1 + 4 >> 2];
          HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
          HEAP32[$0 + 4 >> 2] = $11;
          $1 = $1 + 8 | 0;
          $0 = $0 + 8 | 0;
          $7 = $7 + -1 | 0;
          if ($7) {
           continue
          }
          break;
         };
         break label$8;
        }
        if (!$9) {
         break label$7
        }
       }
       if (HEAPU8[$2 + 16 | 0]) {
        btAlignedFreeInternal_28void__29($9);
        $3 = HEAP32[$2 + 4 >> 2];
       }
       HEAP32[$2 + 12 >> 2] = 0;
      }
      HEAP32[$2 + 12 >> 2] = $4;
      HEAP8[$2 + 16 | 0] = 1;
      HEAP32[$2 + 8 >> 2] = $5;
     }
     HEAP32[$2 + 4 >> 2] = $3 + 1;
     $1 = HEAP32[$2 + 12 >> 2] + ($3 << 3) | 0;
     HEAP32[$1 + 4 >> 2] = $6;
     HEAP32[$1 >> 2] = $10;
     break label$1;
    }
    $7 = $5 + 1 | 0;
    _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, $4, $7, 0);
    $6 = $5 + 2 | 0;
    $5 = HEAP32[(HEAP32[$1 + 16 >> 2] + ($7 << 4) | 0) + 12 >> 2];
    _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, $4, ($5 | 0) > -1 ? $6 : $7 - $5 | 0, 0);
    break label$1;
   }
   $7 = $4 + 1 | 0;
   if (($6 | 0) >= 0) {
    _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, $7, $5, 0);
    $6 = $4 + 2 | 0;
    $4 = HEAP32[(HEAP32[$0 + 16 >> 2] + ($7 << 4) | 0) + 12 >> 2];
    _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, ($4 | 0) > -1 ? $6 : $7 - $4 | 0, $5, 0);
    break label$1;
   }
   $6 = $5 + 1 | 0;
   _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, $7, $6, 0);
   $5 = $5 + 2 | 0;
   $10 = $6 << 4;
   $9 = HEAP32[($10 + HEAP32[$1 + 16 >> 2] | 0) + 12 >> 2];
   _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, $7, ($9 | 0) > -1 ? $5 : $6 - $9 | 0, 0);
   $4 = $4 + 2 | 0;
   $9 = $7 << 4;
   $11 = HEAP32[($9 + HEAP32[$0 + 16 >> 2] | 0) + 12 >> 2];
   _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, ($11 | 0) > -1 ? $4 : $7 - $11 | 0, $6, 0);
   $9 = HEAP32[($9 + HEAP32[$0 + 16 >> 2] | 0) + 12 >> 2];
   $4 = ($9 | 0) > -1 ? $4 : $7 - $9 | 0;
   $7 = HEAP32[($10 + HEAP32[$1 + 16 >> 2] | 0) + 12 >> 2];
   _find_quantized_collision_pairs_recursive_28btGImpactQuantizedBvh_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btPairSet__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20int_2c_20int_2c_20bool_29($0, $1, $2, $3, $4, ($7 | 0) > -1 ? $5 : $6 - $7 | 0, 0);
  }
  global$0 = $8 - -64 | 0;
 }
 
 function btAABB__overlapping_trans_cache_28btAABB_20const__2c_20BT_BOX_BOX_TRANSFORM_CACHE_20const__2c_20bool_29_20const($0, $1, $2, $3) {
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0);
  label$1 : {
   label$2 : {
    $7 = HEAPF32[$1 + 16 >> 2];
    $4 = Math_fround(Math_fround($7 + HEAPF32[$1 >> 2]) * Math_fround(.5));
    $22 = HEAPF32[$2 + 16 >> 2];
    $8 = HEAPF32[$1 + 20 >> 2];
    $6 = Math_fround(Math_fround($8 + HEAPF32[$1 + 4 >> 2]) * Math_fround(.5));
    $23 = HEAPF32[$2 + 20 >> 2];
    $9 = HEAPF32[$1 + 24 >> 2];
    $5 = Math_fround(Math_fround($9 + HEAPF32[$1 + 8 >> 2]) * Math_fround(.5));
    $24 = HEAPF32[$2 + 24 >> 2];
    $10 = HEAPF32[$0 + 16 >> 2];
    $14 = Math_fround(Math_fround($10 + HEAPF32[$0 >> 2]) * Math_fround(.5));
    $12 = Math_fround(Math_fround(HEAPF32[$2 >> 2] + Math_fround(Math_fround(Math_fround($4 * $22) + Math_fround($6 * $23)) + Math_fround($5 * $24))) - $14);
    $10 = Math_fround($10 - $14);
    $7 = Math_fround($7 - $4);
    $14 = HEAPF32[$2 + 64 >> 2];
    $8 = Math_fround($8 - $6);
    $16 = HEAPF32[$2 + 68 >> 2];
    $9 = Math_fround($9 - $5);
    $17 = HEAPF32[$2 + 72 >> 2];
    if (Math_fround(Math_abs($12)) > Math_fround($10 + Math_fround(Math_fround(Math_fround($7 * $14) + Math_fround($8 * $16)) + Math_fround($9 * $17)))) {
     break label$2
    }
    $25 = HEAPF32[$2 + 32 >> 2];
    $26 = HEAPF32[$2 + 36 >> 2];
    $27 = HEAPF32[$2 + 40 >> 2];
    $11 = HEAPF32[$0 + 20 >> 2];
    $15 = Math_fround(Math_fround($11 + HEAPF32[$0 + 4 >> 2]) * Math_fround(.5));
    $13 = Math_fround(Math_fround(HEAPF32[$2 + 4 >> 2] + Math_fround(Math_fround(Math_fround($4 * $25) + Math_fround($6 * $26)) + Math_fround($5 * $27))) - $15);
    $11 = Math_fround($11 - $15);
    $15 = HEAPF32[$2 + 80 >> 2];
    $18 = HEAPF32[$2 + 84 >> 2];
    $19 = HEAPF32[$2 + 88 >> 2];
    if (Math_fround(Math_abs($13)) > Math_fround($11 + Math_fround(Math_fround(Math_fround($7 * $15) + Math_fround($8 * $18)) + Math_fround($9 * $19)))) {
     break label$2
    }
    $28 = HEAPF32[$2 + 48 >> 2];
    $29 = HEAPF32[$2 + 52 >> 2];
    $30 = HEAPF32[$2 + 56 >> 2];
    $5 = Math_fround(HEAPF32[$2 + 8 >> 2] + Math_fround(Math_fround(Math_fround($4 * $28) + Math_fround($6 * $29)) + Math_fround($5 * $30)));
    $4 = HEAPF32[$0 + 24 >> 2];
    $6 = Math_fround(Math_fround($4 + HEAPF32[$0 + 8 >> 2]) * Math_fround(.5));
    $5 = Math_fround($5 - $6);
    $4 = Math_fround($4 - $6);
    $6 = HEAPF32[$2 + 96 >> 2];
    $20 = HEAPF32[$2 + 100 >> 2];
    $21 = HEAPF32[$2 + 104 >> 2];
    if (Math_fround(Math_abs($5)) > Math_fround($4 + Math_fround(Math_fround(Math_fround($7 * $6) + Math_fround($8 * $20)) + Math_fround($9 * $21)))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround(Math_fround($12 * $22) + Math_fround($13 * $25)) + Math_fround($5 * $28)))) > Math_fround($7 + Math_fround(Math_fround(Math_fround($10 * $14) + Math_fround($11 * $15)) + Math_fround($4 * $6)))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround(Math_fround($12 * $23) + Math_fround($13 * $26)) + Math_fround($5 * $29)))) > Math_fround($8 + Math_fround(Math_fround(Math_fround($10 * $16) + Math_fround($11 * $18)) + Math_fround($4 * $20)))) {
     break label$2
    }
    $1 = Math_fround(Math_abs(Math_fround(Math_fround(Math_fround($12 * $24) + Math_fround($13 * $27)) + Math_fround($5 * $30)))) > Math_fround($9 + Math_fround(Math_fround(Math_fround($10 * $17) + Math_fround($11 * $19)) + Math_fround($4 * $21)));
    $2 = $1 ^ 1;
    if ($1) {
     break label$1
    }
    if (!$3) {
     break label$1
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround($5 * $25) - Math_fround($13 * $28)))) > Math_fround(Math_fround(Math_fround(Math_fround($11 * $6) + Math_fround($4 * $15)) + Math_fround($8 * $17)) + Math_fround($9 * $16))) {
     break label$2
    }
    if (!!(Math_fround(Math_abs(Math_fround(Math_fround($5 * $26) - Math_fround($13 * $29)))) > Math_fround(Math_fround(Math_fround(Math_fround($11 * $20) + Math_fround($4 * $18)) + Math_fround($7 * $17)) + Math_fround($9 * $14)))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround($5 * $27) - Math_fround($13 * $30)))) > Math_fround(Math_fround(Math_fround(Math_fround($11 * $21) + Math_fround($4 * $19)) + Math_fround($7 * $16)) + Math_fround($8 * $14))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround($12 * $28) - Math_fround($5 * $22)))) > Math_fround(Math_fround(Math_fround(Math_fround($10 * $6) + Math_fround($4 * $14)) + Math_fround($8 * $19)) + Math_fround($9 * $18))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround($12 * $29) - Math_fround($5 * $23)))) > Math_fround(Math_fround(Math_fround(Math_fround($10 * $20) + Math_fround($4 * $16)) + Math_fround($7 * $19)) + Math_fround($9 * $15))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround($12 * $30) - Math_fround($5 * $24)))) > Math_fround(Math_fround(Math_fround(Math_fround($10 * $21) + Math_fround($4 * $17)) + Math_fround($7 * $18)) + Math_fround($8 * $15))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround($13 * $22) - Math_fround($12 * $25)))) > Math_fround(Math_fround(Math_fround(Math_fround($10 * $15) + Math_fround($11 * $14)) + Math_fround($8 * $21)) + Math_fround($9 * $20))) {
     break label$2
    }
    if (Math_fround(Math_abs(Math_fround(Math_fround($13 * $23) - Math_fround($12 * $26)))) > Math_fround(Math_fround(Math_fround(Math_fround($10 * $18) + Math_fround($11 * $16)) + Math_fround($7 * $21)) + Math_fround($9 * $6))) {
     break label$2
    }
    $2 = 0;
    if (Math_fround(Math_abs(Math_fround(Math_fround($13 * $24) - Math_fround($12 * $27)))) > Math_fround(Math_fround(Math_fround(Math_fround($10 * $19) + Math_fround($11 * $17)) + Math_fround($7 * $20)) + Math_fround($8 * $6))) {
     break label$1
    }
    return 1;
   }
   $2 = 0;
  }
  return $2;
 }
 
 function btCollisionShape__getBoundingSphere_28btVector3__2c_20float__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0);
  $3 = global$0 - 96 | 0;
  global$0 = $3;
  $4 = $3 + 44 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 56 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$3 + 52 >> 2] = 1065353216;
  $4 = $3 + 76 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$3 + 72 >> 2] = 1065353216;
  $4 = $3 + 84 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$3 + 92 >> 2] = 0;
  HEAP32[$3 + 36 >> 2] = 0;
  HEAP32[$3 + 40 >> 2] = 0;
  HEAP32[$3 + 32 >> 2] = 1065353216;
  HEAP32[$3 + 64 >> 2] = 0;
  HEAP32[$3 + 68 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3 + 32 | 0, $3 + 16 | 0, $3);
  $8 = HEAPF32[$3 >> 2];
  $9 = HEAPF32[$3 + 16 >> 2];
  $5 = Math_fround($8 - $9);
  $7 = Math_fround($5 * $5);
  $5 = HEAPF32[$3 + 4 >> 2];
  $10 = HEAPF32[$3 + 20 >> 2];
  $6 = Math_fround($5 - $10);
  $12 = Math_fround($7 + Math_fround($6 * $6));
  $6 = HEAPF32[$3 + 8 >> 2];
  $7 = HEAPF32[$3 + 24 >> 2];
  $11 = Math_fround($6 - $7);
  HEAPF32[$2 >> 2] = Math_fround(Math_sqrt(Math_fround($12 + Math_fround($11 * $11)))) * Math_fround(.5);
  HEAP32[$1 + 12 >> 2] = 0;
  HEAPF32[$1 + 8 >> 2] = Math_fround($6 + $7) * Math_fround(.5);
  HEAPF32[$1 + 4 >> 2] = Math_fround($5 + $10) * Math_fround(.5);
  HEAPF32[$1 >> 2] = Math_fround($8 + $9) * Math_fround(.5);
  global$0 = $3 + 96 | 0;
 }
 
 function btCollisionShape__getContactBreakingThreshold_28float_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  return Math_fround(Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0)) * $1));
 }
 
 function btCollisionShape__getAngularMotionDisc_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0);
  $1 = global$0 - 32 | 0;
  global$0 = $1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1 + 16 | 0, $1 + 12 | 0);
  global$0 = $1 + 32 | 0;
  $2 = HEAPF32[$1 + 16 >> 2];
  $3 = Math_fround($2 * $2);
  $2 = HEAPF32[$1 + 20 >> 2];
  $3 = Math_fround($3 + Math_fround($2 * $2));
  $2 = HEAPF32[$1 + 24 >> 2];
  return Math_fround(Math_fround(HEAPF32[$1 + 12 >> 2] + Math_fround(Math_sqrt(Math_fround($3 + Math_fround($2 * $2))))));
 }
 
 function btCollisionShape__calculateTemporalAabb_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, $4, $5);
  $6 = HEAPF32[$2 + 8 >> 2];
  $7 = HEAPF32[$2 + 4 >> 2];
  $9 = HEAPF32[$4 + 8 >> 2];
  $1 = HEAP32[$4 + 8 >> 2];
  $15 = HEAPF32[$4 + 4 >> 2];
  $10 = HEAP32[$4 + 4 >> 2];
  $16 = HEAPF32[$4 >> 2];
  $11 = HEAP32[$4 >> 2];
  $17 = HEAPF32[$5 + 8 >> 2];
  $12 = HEAP32[$5 + 8 >> 2];
  $18 = HEAPF32[$5 + 4 >> 2];
  $13 = HEAP32[$5 + 4 >> 2];
  $19 = HEAPF32[$5 >> 2];
  $14 = HEAP32[$5 >> 2];
  $8 = HEAPF32[$2 >> 2];
  label$1 : {
   if (!!($8 > Math_fround(0.0))) {
    $14 = (wasm2js_scratch_store_f32(Math_fround($8 + $19)), wasm2js_scratch_load_i32(0));
    break label$1;
   }
   $11 = (wasm2js_scratch_store_f32(Math_fround($8 + $16)), wasm2js_scratch_load_i32(0));
  }
  label$3 : {
   if (!!($7 > Math_fround(0.0))) {
    $13 = (wasm2js_scratch_store_f32(Math_fround($7 + $18)), wasm2js_scratch_load_i32(0));
    break label$3;
   }
   $10 = (wasm2js_scratch_store_f32(Math_fround($7 + $15)), wasm2js_scratch_load_i32(0));
  }
  label$5 : {
   if (!!($6 > Math_fround(0.0))) {
    $12 = (wasm2js_scratch_store_f32(Math_fround($6 + $17)), wasm2js_scratch_load_i32(0));
    break label$5;
   }
   $1 = (wasm2js_scratch_store_f32(Math_fround($6 + $9)), wasm2js_scratch_load_i32(0));
  }
  $7 = HEAPF32[$3 + 8 >> 2];
  $6 = HEAPF32[$3 >> 2];
  $8 = HEAPF32[$3 + 4 >> 2];
  $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0));
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $10;
  HEAP32[$4 >> 2] = $11;
  HEAP32[$5 + 12 >> 2] = 0;
  HEAP32[$5 + 8 >> 2] = $12;
  HEAP32[$5 + 4 >> 2] = $13;
  HEAP32[$5 >> 2] = $14;
  $6 = Math_fround($9 * Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($8 * $8)) + Math_fround($7 * $7)))));
  HEAPF32[$4 >> 2] = HEAPF32[$4 >> 2] - $6;
  HEAPF32[$4 + 4 >> 2] = HEAPF32[$4 + 4 >> 2] - $6;
  HEAPF32[$4 + 8 >> 2] = HEAPF32[$4 + 8 >> 2] - $6;
  HEAPF32[$5 >> 2] = $6 + HEAPF32[$5 >> 2];
  HEAPF32[$5 + 4 >> 2] = $6 + HEAPF32[$5 + 4 >> 2];
  HEAPF32[$5 + 8 >> 2] = $6 + HEAPF32[$5 + 8 >> 2];
 }
 
 function btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, $0) | 0;
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $3) | 0;
  HEAP32[$1 >> 2] = $4;
  if ($4) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2, $3)
  }
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = $2;
  return 5872;
 }
 
 function btCollisionShape__serializeSingleShape_28btSerializer__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2 = ((((wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1, wasm2js_i32$2 = $2), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, HEAP32[$2 + 8 >> 2], $1) | 0), wasm2js_i32$4 = 1346455635), wasm2js_i32$5 = $0), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function btConvexShape__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0);
  $7 = global$0 - 48 | 0;
  global$0 = $7;
  HEAP32[$7 + 44 >> 2] = 0;
  $8 = HEAPF32[$2 >> 2];
  $9 = HEAPF32[$2 + 4 >> 2];
  $10 = HEAPF32[$2 + 8 >> 2];
  HEAPF32[$7 + 32 >> 2] = Math_fround(Math_fround(HEAPF32[$1 >> 2] * $8) + Math_fround(HEAPF32[$1 + 16 >> 2] * $9)) + Math_fround(HEAPF32[$1 + 32 >> 2] * $10);
  $16 = $1 + 24 | 0;
  $17 = $1 + 40 | 0;
  HEAPF32[$7 + 40 >> 2] = Math_fround(Math_fround($8 * HEAPF32[$1 + 8 >> 2]) + Math_fround($9 * HEAPF32[$16 >> 2])) + Math_fround($10 * HEAPF32[$17 >> 2]);
  $18 = $1 + 20 | 0;
  $19 = $1 + 36 | 0;
  HEAPF32[$7 + 36 >> 2] = Math_fround(Math_fround($8 * HEAPF32[$1 + 4 >> 2]) + Math_fround($9 * HEAPF32[$18 >> 2])) + Math_fround($10 * HEAPF32[$19 >> 2]);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($7 + 16 | 0, $0, $7 + 32 | 0);
  $20 = $1 + 56 | 0;
  $22 = HEAPF32[$20 >> 2];
  $23 = HEAPF32[$17 >> 2];
  $24 = HEAPF32[$19 >> 2];
  $21 = $1 + 52 | 0;
  $14 = HEAPF32[$21 >> 2];
  $25 = HEAPF32[$16 >> 2];
  $26 = HEAPF32[$18 >> 2];
  $27 = HEAPF32[$1 + 32 >> 2];
  $15 = HEAPF32[$1 + 48 >> 2];
  $28 = HEAPF32[$1 + 8 >> 2];
  $29 = HEAPF32[$1 >> 2];
  $30 = HEAPF32[$1 + 4 >> 2];
  $31 = HEAPF32[$1 + 16 >> 2];
  $8 = HEAPF32[$7 + 24 >> 2];
  $9 = HEAPF32[$7 + 16 >> 2];
  $10 = HEAPF32[$7 + 20 >> 2];
  HEAP32[$7 + 12 >> 2] = 0;
  HEAPF32[$7 + 8 >> 2] = -HEAPF32[$7 + 40 >> 2];
  HEAPF32[$7 + 4 >> 2] = -HEAPF32[$7 + 36 >> 2];
  HEAPF32[$7 >> 2] = -HEAPF32[$7 + 32 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($7 + 16 | 0, $0, $7);
  $32 = HEAPF32[$20 >> 2];
  $33 = HEAPF32[$17 >> 2];
  $34 = HEAPF32[$19 >> 2];
  $35 = HEAPF32[$21 >> 2];
  $36 = HEAPF32[$16 >> 2];
  $37 = HEAPF32[$18 >> 2];
  $38 = HEAPF32[$1 + 32 >> 2];
  $39 = HEAPF32[$1 + 48 >> 2];
  $40 = HEAPF32[$1 + 8 >> 2];
  $41 = HEAPF32[$1 >> 2];
  $42 = HEAPF32[$1 + 4 >> 2];
  $43 = HEAPF32[$1 + 16 >> 2];
  $11 = HEAPF32[$7 + 24 >> 2];
  $12 = HEAPF32[$7 + 16 >> 2];
  $13 = HEAPF32[$7 + 20 >> 2];
  $15 = Math_fround($15 + Math_fround(Math_fround(Math_fround($9 * $29) + Math_fround($10 * $30)) + Math_fround($8 * $28)));
  $14 = Math_fround($14 + Math_fround(Math_fround(Math_fround($9 * $31) + Math_fround($10 * $26)) + Math_fround($8 * $25)));
  $8 = Math_fround($22 + Math_fround(Math_fround(Math_fround($9 * $27) + Math_fround($10 * $24)) + Math_fround($8 * $23)));
  HEAPF32[$3 >> 2] = Math_fround(Math_fround($15 * HEAPF32[$2 >> 2]) + Math_fround($14 * HEAPF32[$2 + 4 >> 2])) + Math_fround($8 * HEAPF32[$2 + 8 >> 2]);
  $9 = Math_fround($39 + Math_fround(Math_fround(Math_fround($12 * $41) + Math_fround($13 * $42)) + Math_fround($11 * $40)));
  $10 = Math_fround($35 + Math_fround(Math_fround(Math_fround($12 * $43) + Math_fround($13 * $37)) + Math_fround($11 * $36)));
  $11 = Math_fround($32 + Math_fround(Math_fround(Math_fround($12 * $38) + Math_fround($13 * $34)) + Math_fround($11 * $33)));
  HEAPF32[$4 >> 2] = Math_fround(Math_fround($9 * HEAPF32[$2 >> 2]) + Math_fround($10 * HEAPF32[$2 + 4 >> 2])) + Math_fround($11 * HEAPF32[$2 + 8 >> 2]);
  HEAP32[$6 + 12 >> 2] = 0;
  HEAPF32[$6 + 8 >> 2] = $11;
  HEAPF32[$6 + 4 >> 2] = $10;
  HEAPF32[$6 >> 2] = $9;
  HEAP32[$5 + 12 >> 2] = 0;
  HEAPF32[$5 + 8 >> 2] = $8;
  HEAPF32[$5 + 4 >> 2] = $14;
  HEAPF32[$5 >> 2] = $15;
  $12 = HEAPF32[$3 >> 2];
  $13 = HEAPF32[$4 >> 2];
  if (!!($12 > $13)) {
   HEAPF32[$3 >> 2] = $13;
   HEAPF32[$4 >> 2] = $12;
   HEAP32[$6 + 12 >> 2] = 0;
   HEAPF32[$6 + 8 >> 2] = $8;
   HEAPF32[$6 + 4 >> 2] = $14;
   HEAPF32[$6 >> 2] = $15;
   HEAP32[$5 + 12 >> 2] = 0;
   HEAPF32[$5 + 8 >> 2] = $11;
   HEAPF32[$5 + 4 >> 2] = $10;
   HEAPF32[$5 >> 2] = $9;
  }
  global$0 = $7 + 48 | 0;
 }
 
 function btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  label$1 : {
   label$2 : {
    $5 = HEAP32[$1 + 4 >> 2];
    if ($5 >>> 0 > 13) {
     break label$2
    }
    label$3 : {
     switch ($5 - 1 | 0) {
     case 7:
      HEAP32[$0 >> 2] = 0;
      HEAP32[$0 + 4 >> 2] = 0;
      $6 = $0 + 8 | 0;
      HEAP32[$6 >> 2] = 0;
      HEAP32[$6 + 4 >> 2] = 0;
      break label$1;
     default:
      HEAP32[$0 + 12 >> 2] = 0;
      $4 = HEAPF32[$1 + 32 >> 2];
      HEAPF32[$0 >> 2] = HEAPF32[$2 >> 2] >= Math_fround(0.0) ? $4 : Math_fround(-$4);
      $4 = HEAPF32[$1 + 40 >> 2];
      HEAPF32[$0 + 8 >> 2] = HEAPF32[$2 + 8 >> 2] >= Math_fround(0.0) ? $4 : Math_fround(-$4);
      $4 = HEAPF32[$1 + 36 >> 2];
      HEAPF32[$0 + 4 >> 2] = HEAPF32[$2 + 4 >> 2] >= Math_fround(0.0) ? $4 : Math_fround(-$4);
      break label$1;
     case 0:
      HEAP32[$0 + 12 >> 2] = 0;
      $4 = HEAPF32[$2 >> 2];
      $7 = HEAPF32[$2 + 4 >> 2];
      $8 = HEAPF32[$2 + 8 >> 2];
      $11 = Math_fround(Math_fround(Math_fround($4 * HEAPF32[$1 + 76 >> 2]) + Math_fround($7 * HEAPF32[$1 + 80 >> 2])) + Math_fround($8 * HEAPF32[$1 + 84 >> 2]));
      $9 = Math_fround(Math_fround(Math_fround($4 * HEAPF32[$1 + 92 >> 2]) + Math_fround($7 * HEAPF32[$1 + 96 >> 2])) + Math_fround($8 * HEAPF32[$1 + 100 >> 2]));
      $5 = $1 + 60 | 0;
      $4 = Math_fround(Math_fround(Math_fround($4 * HEAPF32[$5 >> 2]) + Math_fround($7 * HEAPF32[$1 - -64 >> 2])) + Math_fround($8 * HEAPF32[$1 + 68 >> 2]));
      $1 = (($4 < $11 ? ($11 < $9 ? 2 : 1) : ($4 < $9) << 1) << 4) + $5 | 0;
      HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
      $6 = HEAP32[$1 + 4 >> 2];
      HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
      HEAP32[$0 + 4 >> 2] = $6;
      break label$1;
     case 12:
      $12 = $1 + 40 | 0;
      $10 = HEAP32[$12 >> 2];
      $12 = HEAP32[$12 + 4 >> 2];
      $6 = $3 + 40 | 0;
      HEAP32[$6 >> 2] = $10;
      HEAP32[$6 + 4 >> 2] = $12;
      $6 = HEAP32[$1 + 36 >> 2];
      HEAP32[$3 + 32 >> 2] = HEAP32[$1 + 32 >> 2];
      HEAP32[$3 + 36 >> 2] = $6;
      $5 = 0;
      HEAP32[$3 + 28 >> 2] = 0;
      HEAP32[$3 + 16 >> 2] = HEAP32[$2 >> 2];
      $9 = HEAPF32[$2 + 4 >> 2];
      $12 = HEAP32[$2 + 4 >> 2];
      HEAP32[$3 + 20 >> 2] = $12;
      $4 = HEAPF32[$2 + 8 >> 2];
      $10 = HEAP32[$2 + 8 >> 2];
      HEAP32[$3 + 24 >> 2] = $10;
      $2 = 1;
      $1 = HEAP32[$1 + 56 >> 2];
      $10 = $1 + -1 | 0;
      $6 = 2;
      label$10 : {
       if ($10 >>> 0 > 1) {
        break label$10
       }
       if ($10 - 1) {
        $2 = 0;
        $5 = 1;
        $6 = 2;
        break label$10;
       }
       $4 = $9;
       $2 = 0;
       $5 = 2;
       $6 = 1;
      }
      $10 = $6;
      $7 = HEAPF32[($3 + 32 | 0) + ($1 << 2) >> 2];
      $1 = $2 << 2;
      $9 = HEAPF32[($1 | $3 + 32) >> 2];
      $11 = HEAPF32[($1 | $3 + 16) >> 2];
      $13 = Math_fround(Math_sqrt(Math_fround(Math_fround($11 * $11) + Math_fround($4 * $4))));
      label$14 : {
       if ($13 != Math_fround(0.0)) {
        $8 = Math_fround($9 / $13);
        HEAPF32[($2 << 2 | $3) >> 2] = $11 * $8;
        $1 = $5 << 2;
        HEAPF32[$1 + $3 >> 2] = HEAPF32[$1 + ($3 + 16 | 0) >> 2] < Math_fround(0.0) ? Math_fround(-$7) : $7;
        $8 = Math_fround($4 * $8);
        break label$14;
       }
       HEAPF32[($2 << 2 | $3) >> 2] = $9;
       $1 = $5 << 2;
       HEAPF32[$1 + $3 >> 2] = HEAPF32[$1 + ($3 + 16 | 0) >> 2] < Math_fround(0.0) ? Math_fround(-$7) : $7;
      }
      HEAPF32[($10 << 2) + $3 >> 2] = $8;
      HEAP32[$0 + 12 >> 2] = 0;
      HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
      $12 = HEAP32[$3 + 8 >> 2];
      HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
      HEAP32[$0 + 8 >> 2] = $12;
      break label$1;
     case 9:
      $10 = HEAP32[$1 + 56 >> 2];
      $5 = $10 << 2;
      $4 = HEAPF32[($5 + $1 | 0) + 32 >> 2];
      $8 = HEAPF32[$2 >> 2];
      $7 = HEAPF32[$2 + 4 >> 2];
      $11 = HEAPF32[$2 + 8 >> 2];
      $9 = Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($7 * $7)) + Math_fround($11 * $11));
      label$16 : {
       if ($9 < Math_fround(1.4210854715202004e-14)) {
        $7 = Math_fround(0.0);
        $11 = Math_fround(0.0);
        $8 = Math_fround(1.0);
        break label$16;
       }
       $9 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($9)));
       $11 = Math_fround($11 * $9);
       $7 = Math_fround($7 * $9);
       $8 = Math_fround($8 * $9);
      }
      HEAP32[$3 + 40 >> 2] = 0;
      HEAP32[$3 + 44 >> 2] = 0;
      HEAP32[$3 + 32 >> 2] = 0;
      HEAP32[$3 + 36 >> 2] = 0;
      HEAPF32[$5 + ($3 + 32 | 0) >> 2] = $4;
      $9 = Math_fround(-999999984306749440.0);
      $1 = 0;
      $2 = 0;
      $5 = 0;
      $6 = HEAP32[$3 + 32 >> 2];
      $13 = HEAPF32[$3 + 32 >> 2];
      $12 = HEAP32[$3 + 36 >> 2];
      $14 = HEAPF32[$3 + 36 >> 2];
      $16 = HEAP32[$3 + 40 >> 2];
      $15 = HEAPF32[$3 + 40 >> 2];
      $13 = Math_fround(Math_fround(Math_fround($8 * $13) + Math_fround($7 * $14)) + Math_fround($11 * $15));
      if (!!($13 > Math_fround(-999999984306749440.0))) {
       $5 = $16;
       $2 = $12;
       $9 = $13;
       $1 = $6;
      }
      HEAP32[$3 + 40 >> 2] = 0;
      HEAP32[$3 + 44 >> 2] = 0;
      HEAP32[$3 + 32 >> 2] = 0;
      HEAP32[$3 + 36 >> 2] = 0;
      HEAPF32[($3 + 32 | 0) + ($10 << 2) >> 2] = -$4;
      $6 = HEAP32[$3 + 32 >> 2];
      $4 = HEAPF32[$3 + 32 >> 2];
      $4 = Math_fround($8 * $4);
      $10 = HEAP32[$3 + 36 >> 2];
      $8 = HEAPF32[$3 + 36 >> 2];
      $4 = Math_fround($4 + Math_fround($7 * $8));
      $12 = HEAP32[$3 + 40 >> 2];
      $7 = HEAPF32[$3 + 40 >> 2];
      if (!!(Math_fround($4 + Math_fround($11 * $7)) > $9)) {
       $5 = $12;
       $2 = $10;
       $1 = $6;
      }
      HEAP32[$0 + 12 >> 2] = 0;
      HEAP32[$0 + 8 >> 2] = $5;
      HEAP32[$0 + 4 >> 2] = $2;
      HEAP32[$0 >> 2] = $1;
      break label$1;
     case 4:
      $13 = HEAPF32[$1 + 24 >> 2];
      $14 = HEAPF32[$1 + 20 >> 2];
      $15 = HEAPF32[$1 + 16 >> 2];
      $6 = HEAP32[$1 + 96 >> 2];
      $12 = HEAP32[$1 + 100 >> 2];
      label$20 : {
       if (($12 | 0) < 1) {
        $5 = -1;
        break label$20;
       }
       $8 = Math_fround(HEAPF32[$2 + 8 >> 2] * $13);
       $11 = Math_fround(HEAPF32[$2 + 4 >> 2] * $14);
       $9 = Math_fround(HEAPF32[$2 >> 2] * $15);
       $2 = 0;
       $5 = -1;
       $4 = Math_fround(-3402823466385288598117041.0e14);
       $1 = $6;
       while (1) {
        $7 = Math_fround(Math_fround(Math_fround($9 * HEAPF32[$1 >> 2]) + Math_fround($11 * HEAPF32[$1 + 4 >> 2])) + Math_fround($8 * HEAPF32[$1 + 8 >> 2]));
        $10 = $7 > $4;
        $4 = $10 ? $7 : $4;
        $5 = $10 ? $2 : $5;
        $1 = $1 + 16 | 0;
        $2 = $2 + 1 | 0;
        if (($2 | 0) != ($12 | 0)) {
         continue
        }
        break;
       };
      }
      HEAP32[$0 + 12 >> 2] = 0;
      $1 = ($5 << 4) + $6 | 0;
      HEAPF32[$0 + 8 >> 2] = $13 * HEAPF32[$1 + 8 >> 2];
      HEAPF32[$0 + 4 >> 2] = $14 * HEAPF32[$1 + 4 >> 2];
      HEAPF32[$0 >> 2] = $15 * HEAPF32[$1 >> 2];
      break label$1;
     case 1:
     case 2:
     case 5:
     case 6:
     case 8:
     case 10:
     case 11:
      break label$2;
     case 3:
      break label$3;
     };
    }
    $13 = HEAPF32[$1 + 24 >> 2];
    $14 = HEAPF32[$1 + 20 >> 2];
    $15 = HEAPF32[$1 + 16 >> 2];
    $6 = HEAP32[$1 + 108 >> 2];
    $12 = HEAP32[$1 + 100 >> 2];
    label$23 : {
     if (($12 | 0) < 1) {
      $5 = -1;
      break label$23;
     }
     $8 = Math_fround(HEAPF32[$2 + 8 >> 2] * $13);
     $11 = Math_fround(HEAPF32[$2 + 4 >> 2] * $14);
     $9 = Math_fround(HEAPF32[$2 >> 2] * $15);
     $2 = 0;
     $5 = -1;
     $4 = Math_fround(-3402823466385288598117041.0e14);
     $1 = $6;
     while (1) {
      $7 = Math_fround(Math_fround(Math_fround($9 * HEAPF32[$1 >> 2]) + Math_fround($11 * HEAPF32[$1 + 4 >> 2])) + Math_fround($8 * HEAPF32[$1 + 8 >> 2]));
      $10 = $7 > $4;
      $4 = $10 ? $7 : $4;
      $5 = $10 ? $2 : $5;
      $1 = $1 + 16 | 0;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($12 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$0 + 12 >> 2] = 0;
    $1 = ($5 << 4) + $6 | 0;
    HEAPF32[$0 + 8 >> 2] = $13 * HEAPF32[$1 + 8 >> 2];
    HEAPF32[$0 + 4 >> 2] = $14 * HEAPF32[$1 + 4 >> 2];
    HEAPF32[$0 >> 2] = $15 * HEAPF32[$1 >> 2];
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($0, $1, $2);
  }
  global$0 = $3 + 48 | 0;
 }
 
 function btConvexShape__localGetSupportVertexNonVirtual_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0);
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $7 = $2 + 8 | 0;
  $10 = HEAP32[$7 >> 2];
  $7 = HEAP32[$7 + 4 >> 2];
  $9 = $3 + 24 | 0;
  $8 = $9;
  HEAP32[$8 >> 2] = $10;
  HEAP32[$8 + 4 >> 2] = $7;
  $8 = HEAP32[$2 + 4 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$3 + 20 >> 2] = $8;
  $4 = HEAPF32[$3 + 16 >> 2];
  $6 = HEAPF32[$3 + 20 >> 2];
  $5 = HEAPF32[$9 >> 2];
  if (!!(Math_fround(Math_fround(Math_fround($4 * $4) + Math_fround($6 * $6)) + Math_fround($5 * $5)) < Math_fround(1.4210854715202004e-14))) {
   HEAP32[$3 + 24 >> 2] = -1082130432;
   HEAP32[$3 + 28 >> 2] = 0;
   HEAP32[$3 + 16 >> 2] = -1082130432;
   HEAP32[$3 + 20 >> 2] = -1082130432;
   $6 = Math_fround(-1.0);
   $4 = Math_fround(-1.0);
   $5 = Math_fround(-1.0);
  }
  $11 = $5;
  $5 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($4 * $4) + Math_fround($6 * $6)) + Math_fround($5 * $5)))));
  HEAPF32[$3 + 24 >> 2] = $11 * $5;
  HEAPF32[$3 + 20 >> 2] = $6 * $5;
  HEAPF32[$3 + 16 >> 2] = $4 * $5;
  btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($3, $1, $3 + 16 | 0);
  label$2 : {
   label$3 : {
    $2 = HEAP32[$1 + 4 >> 2];
    if ($2 >>> 0 > 13) {
     break label$3
    }
    label$4 : {
     switch ($2 - 2 | 0) {
     case 6:
      $4 = Math_fround(HEAPF32[$1 + 32 >> 2] * HEAPF32[$1 + 16 >> 2]);
      break label$2;
     case 0:
     case 1:
     case 4:
     case 5:
     case 7:
     case 10:
      break label$3;
     default:
      break label$4;
     };
    }
    $4 = HEAPF32[$1 + 48 >> 2];
    break label$2;
   }
   $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
  }
  HEAP32[$0 + 12 >> 2] = 0;
  HEAPF32[$0 + 8 >> 2] = Math_fround($4 * HEAPF32[$3 + 24 >> 2]) + HEAPF32[$3 + 8 >> 2];
  HEAPF32[$0 + 4 >> 2] = Math_fround($4 * HEAPF32[$3 + 20 >> 2]) + HEAPF32[$3 + 4 >> 2];
  HEAPF32[$0 >> 2] = Math_fround($4 * HEAPF32[$3 + 16 >> 2]) + HEAPF32[$3 >> 2];
  global$0 = $3 + 32 | 0;
 }
 
 function btConvexShape__getMarginNonVirtual_28_29_20const($0) {
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[$0 + 4 >> 2];
   if ($1 >>> 0 > 13) {
    break label$1
   }
   label$2 : {
    switch ($1 - 2 | 0) {
    case 6:
     return Math_fround(HEAPF32[$0 + 32 >> 2] * HEAPF32[$0 + 16 >> 2]);
    case 0:
    case 1:
    case 4:
    case 5:
    case 7:
    case 10:
     break label$1;
    default:
     break label$2;
    };
   }
   return HEAPF32[$0 + 48 >> 2];
  }
  return Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
 }
 
 function btCollisionShape__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 12;
 }
 
 function btCapsuleShape__btCapsuleShape_28float_2c_20float_29($0, $1, $2) {
  btConvexInternalShape__btConvexInternalShape_28_29($0);
  HEAPF32[$0 + 48 >> 2] = $1;
  HEAP32[$0 >> 2] = 6056;
  HEAP32[$0 + 56 >> 2] = 1;
  HEAP32[$0 + 4 >> 2] = 10;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAPF32[$0 + 40 >> 2] = $1;
  HEAPF32[$0 + 36 >> 2] = $2 * Math_fround(.5);
  HEAPF32[$0 + 32 >> 2] = $1;
 }
 
 function btCapsuleShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0);
  $3 = global$0 - 16 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $9 = $0 + 8 | 0;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$9 + 4 >> 2] = 0;
  $4 = HEAPF32[$2 >> 2];
  $5 = HEAPF32[$2 + 4 >> 2];
  $7 = HEAPF32[$2 + 8 >> 2];
  $6 = Math_fround(Math_fround(Math_fround($4 * $4) + Math_fround($5 * $5)) + Math_fround($7 * $7));
  label$1 : {
   if ($6 < Math_fround(9.999999747378752e-05)) {
    $5 = Math_fround(0.0);
    $7 = Math_fround(0.0);
    $4 = Math_fround(1.0);
    break label$1;
   }
   $6 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($6)));
   $7 = Math_fround($7 * $6);
   $5 = Math_fround($5 * $6);
   $4 = Math_fround($4 * $6);
  }
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $2 = HEAP32[$1 + 56 >> 2] << 2;
  $9 = $2 + $3 | 0;
  $10 = HEAPF32[($1 + $2 | 0) + 32 >> 2];
  HEAPF32[$9 >> 2] = $10;
  $6 = Math_fround(-999999984306749440.0);
  $11 = HEAPF32[$3 >> 2];
  $12 = HEAPF32[$3 + 4 >> 2];
  $13 = HEAPF32[$3 + 8 >> 2];
  $8 = Math_fround(Math_fround(Math_fround($4 * $11) + Math_fround($5 * $12)) + Math_fround($7 * $13));
  if (!!($8 > Math_fround(-999999984306749440.0))) {
   HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
   HEAPF32[$0 + 8 >> 2] = $13;
   HEAPF32[$0 + 4 >> 2] = $12;
   HEAPF32[$0 >> 2] = $11;
   $6 = $8;
  }
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAPF32[$9 >> 2] = -$10;
  $10 = HEAPF32[$3 >> 2];
  $8 = Math_fround($4 * $10);
  $4 = HEAPF32[$3 + 4 >> 2];
  $8 = Math_fround($8 + Math_fround($5 * $4));
  $5 = HEAPF32[$3 + 8 >> 2];
  if (!!(Math_fround($8 + Math_fround($7 * $5)) > $6)) {
   HEAP32[$0 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
   HEAPF32[$0 + 8 >> 2] = $5;
   HEAPF32[$0 + 4 >> 2] = $4;
   HEAPF32[$0 >> 2] = $10;
  }
 }
 
 function btCapsuleShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0);
  $4 = global$0 - 16 | 0;
  if (($3 | 0) >= 1) {
   while (1) {
    $5 = $4 + 8 | 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $6 = HEAP32[$0 + 56 >> 2];
    $7 = $6 << 2;
    $12 = ($7 + $0 | 0) + 32 | 0;
    $8 = HEAPF32[$12 >> 2];
    HEAP32[$4 + $7 >> 2] = HEAP32[$12 >> 2];
    $15 = Math_fround(-999999984306749440.0);
    $9 = HEAPF32[$4 >> 2];
    $7 = $1 + $13 | 0;
    $10 = HEAPF32[$7 >> 2];
    $16 = HEAPF32[$4 + 4 >> 2];
    $12 = $7 + 4 | 0;
    $11 = HEAPF32[$12 >> 2];
    $17 = HEAPF32[$5 >> 2];
    $18 = $7 + 8 | 0;
    $14 = HEAPF32[$18 >> 2];
    $19 = Math_fround(Math_fround(Math_fround($9 * $10) + Math_fround($16 * $11)) + Math_fround($17 * $14));
    label$3 : {
     if (!($19 > Math_fround(-999999984306749440.0))) {
      break label$3
     }
     $6 = $2 + $13 | 0;
     HEAPF32[$6 >> 2] = $9;
     HEAP32[$6 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
     HEAPF32[$6 + 8 >> 2] = $17;
     HEAPF32[$6 + 4 >> 2] = $16;
     $14 = HEAPF32[$18 >> 2];
     $11 = HEAPF32[$12 >> 2];
     $10 = HEAPF32[$7 >> 2];
     $15 = $19;
     $6 = HEAP32[$0 + 56 >> 2];
     $8 = HEAPF32[(($6 << 2) + $0 | 0) + 32 >> 2];
    }
    $9 = $8;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    HEAPF32[($6 << 2) + $4 >> 2] = -$9;
    $9 = HEAPF32[$4 >> 2];
    $8 = Math_fround($9 * $10);
    $10 = HEAPF32[$4 + 4 >> 2];
    $8 = Math_fround($8 + Math_fround($10 * $11));
    $11 = HEAPF32[$5 >> 2];
    if (!!(Math_fround($8 + Math_fround($11 * $14)) > $15)) {
     $5 = $2 + $13 | 0;
     HEAPF32[$5 >> 2] = $9;
     HEAP32[$5 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
     HEAPF32[$5 + 8 >> 2] = $11;
     HEAPF32[$5 + 4 >> 2] = $10;
    }
    $13 = $13 + 16 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   }
  }
 }
 
 function btCapsuleShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0);
  $7 = $0 + 32 | 0;
  $6 = HEAP32[$0 + 56 >> 2];
  $5 = HEAP32[$7 + (($6 + 2 | 0) % 3 << 2) >> 2];
  $0 = global$0 - 16 | 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = $5;
  HEAP32[$0 + 4 >> 2] = $5;
  HEAP32[$0 >> 2] = $5;
  $5 = $6 << 2;
  $6 = $5 + $0 | 0;
  HEAPF32[$6 >> 2] = HEAPF32[$5 + $7 >> 2] + HEAPF32[$6 >> 2];
  $1 = Math_fround($1 * Math_fround(.0833333283662796));
  $3 = HEAPF32[$0 >> 2];
  $3 = Math_fround($3 + $3);
  $3 = Math_fround($3 * $3);
  $4 = HEAPF32[$0 + 4 >> 2];
  $4 = Math_fround($4 + $4);
  $4 = Math_fround($4 * $4);
  HEAPF32[$2 + 8 >> 2] = $1 * Math_fround($3 + $4);
  $8 = $3;
  $3 = HEAPF32[$0 + 8 >> 2];
  $3 = Math_fround($3 + $3);
  $3 = Math_fround($3 * $3);
  HEAPF32[$2 + 4 >> 2] = $1 * Math_fround($8 + $3);
  HEAPF32[$2 >> 2] = $1 * Math_fround($4 + $3);
 }
 
 function btCapsuleShapeX__btCapsuleShapeX_28float_2c_20float_29($0, $1, $2) {
  btConvexInternalShape__btConvexInternalShape_28_29($0);
  HEAP32[$0 + 56 >> 2] = 0;
  HEAPF32[$0 + 48 >> 2] = $1;
  HEAP32[$0 >> 2] = 6156;
  HEAP32[$0 + 4 >> 2] = 10;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAPF32[$0 + 40 >> 2] = $1;
  HEAPF32[$0 + 36 >> 2] = $1;
  HEAPF32[$0 + 32 >> 2] = $2 * Math_fround(.5);
 }
 
 function btCapsuleShapeZ__btCapsuleShapeZ_28float_2c_20float_29($0, $1, $2) {
  btConvexInternalShape__btConvexInternalShape_28_29($0);
  HEAP32[$0 + 56 >> 2] = 2;
  HEAPF32[$0 + 48 >> 2] = $1;
  HEAP32[$0 >> 2] = 6256;
  HEAP32[$0 + 4 >> 2] = 10;
  HEAP32[$0 + 44 >> 2] = 0;
  HEAPF32[$0 + 40 >> 2] = $2 * Math_fround(.5);
  HEAPF32[$0 + 36 >> 2] = $1;
  HEAPF32[$0 + 32 >> 2] = $1;
 }
 
 function btCapsuleShape___btCapsuleShape_28_29($0) {
  $0 = $0 | 0;
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btCapsuleShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0);
  $4 = global$0 - 16 | 0;
  HEAP32[$4 + 12 >> 2] = 0;
  $11 = $0 + 32 | 0;
  $0 = HEAP32[$0 + 56 >> 2];
  $6 = HEAPF32[$11 + (($0 + 2 | 0) % 3 << 2) >> 2];
  HEAPF32[$4 + 8 >> 2] = $6;
  HEAPF32[$4 + 4 >> 2] = $6;
  HEAPF32[$4 >> 2] = $6;
  $0 = $0 << 2;
  HEAPF32[$0 + $4 >> 2] = $6 + HEAPF32[$0 + $11 >> 2];
  $6 = HEAPF32[$1 + 56 >> 2];
  $14 = HEAPF32[$1 + 40 >> 2];
  $15 = HEAPF32[$1 + 36 >> 2];
  $12 = HEAPF32[$1 + 52 >> 2];
  $9 = HEAPF32[$1 + 24 >> 2];
  $16 = HEAPF32[$1 + 20 >> 2];
  $17 = HEAPF32[$1 + 32 >> 2];
  $18 = HEAPF32[$1 + 16 >> 2];
  $13 = HEAPF32[$1 + 48 >> 2];
  $7 = HEAPF32[$1 + 8 >> 2];
  $5 = HEAPF32[$1 >> 2];
  $8 = HEAPF32[$1 + 4 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  $10 = Math_fround(Math_abs($5));
  $5 = HEAPF32[$4 >> 2];
  $19 = Math_fround(Math_abs($8));
  $8 = HEAPF32[$4 + 4 >> 2];
  $20 = Math_fround(Math_abs($7));
  $7 = HEAPF32[$4 + 8 >> 2];
  $10 = Math_fround(Math_fround(Math_fround($10 * $5) + Math_fround($19 * $8)) + Math_fround($20 * $7));
  HEAPF32[$2 >> 2] = $13 - $10;
  $9 = Math_fround(Math_fround(Math_fround($5 * Math_fround(Math_abs($18))) + Math_fround($8 * Math_fround(Math_abs($16)))) + Math_fround($7 * Math_fround(Math_abs($9))));
  HEAPF32[$2 + 4 >> 2] = $12 - $9;
  $5 = Math_fround(Math_fround(Math_fround($5 * Math_fround(Math_abs($17))) + Math_fround($8 * Math_fround(Math_abs($15)))) + Math_fround($7 * Math_fround(Math_abs($14))));
  HEAPF32[$2 + 8 >> 2] = $6 - $5;
  HEAPF32[$3 >> 2] = $13 + $10;
  HEAPF32[$3 + 4 >> 2] = $12 + $9;
  HEAPF32[$3 + 8 >> 2] = $6 + $5;
  HEAP32[$3 + 12 >> 2] = 0;
 }
 
 function btCapsuleShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0);
  $4 = HEAPF32[$0 + 20 >> 2];
  $2 = $0 + 36 | 0;
  $5 = HEAPF32[$2 >> 2];
  $6 = HEAPF32[$0 + 24 >> 2];
  $3 = $0 + 40 | 0;
  $7 = HEAPF32[$3 >> 2];
  $8 = HEAPF32[$0 + 16 >> 2];
  $9 = HEAPF32[$0 + 32 >> 2];
  btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1);
  $10 = HEAPF32[$1 >> 2];
  $11 = HEAPF32[$1 + 4 >> 2];
  $12 = HEAPF32[$1 + 8 >> 2];
  HEAP32[$0 + 44 >> 2] = 0;
  HEAPF32[$3 >> 2] = $12 * Math_fround($7 / $6);
  HEAPF32[$2 >> 2] = $11 * Math_fround($5 / $4);
  HEAPF32[$0 + 32 >> 2] = $10 * Math_fround($9 / $8);
  HEAP32[$0 + 48 >> 2] = HEAP32[($0 + 32 | 0) + ((HEAP32[$0 + 56 >> 2] + 2 | 0) % 3 << 2) >> 2];
 }
 
 function btCapsuleShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 6444;
 }
 
 function btCapsuleShape__getAnisotropicRollingFrictionDirection_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $2 = $0 + 8 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[(HEAP32[$1 + 56 >> 2] << 2) + $0 >> 2] = 1065353216;
 }
 
 function btCapsuleShape__setMargin_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
 }
 
 function btCapsuleShape__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 60;
 }
 
 function btCapsuleShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 36 >> 2];
  HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 40 >> 2];
  HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 44 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 48 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = HEAP32[$0 + 48 >> 2];
  $0 = HEAP32[$0 + 56 >> 2];
  HEAP32[$1 + 56 >> 2] = 0;
  HEAP32[$1 + 52 >> 2] = $0;
  return 6457;
 }
 
 function btCapsuleShapeX__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 6476;
 }
 
 function btCapsuleShapeZ__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 6485;
 }
 
 function btConeShape__btConeShape_28float_2c_20float_29($0, $1, $2) {
  btConvexInternalShape__btConvexInternalShape_28_29($0);
  HEAPF32[$0 + 64 >> 2] = $2;
  HEAPF32[$0 + 60 >> 2] = $1;
  HEAP32[$0 >> 2] = 6504;
  HEAP32[$0 + 76 >> 2] = 2;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 1;
  HEAP32[$0 + 4 >> 2] = 11;
  HEAPF32[$0 + 40 >> 2] = $1;
  HEAPF32[$0 + 36 >> 2] = $2;
  HEAPF32[$0 + 32 >> 2] = $1;
  HEAPF32[$0 + 56 >> 2] = $1 / Math_fround(Math_sqrt(Math_fround(Math_fround($1 * $1) + Math_fround($2 * $2))));
 }
 
 function btConeShapeZ__btConeShapeZ_28float_2c_20float_29($0, $1, $2) {
  btConvexInternalShape__btConvexInternalShape_28_29($0);
  HEAPF32[$0 + 64 >> 2] = $2;
  HEAPF32[$0 + 60 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = 11;
  HEAP32[$0 + 76 >> 2] = 1;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 2;
  HEAP32[$0 >> 2] = 6604;
  HEAPF32[$0 + 40 >> 2] = $2;
  HEAPF32[$0 + 32 >> 2] = $1;
  HEAPF32[$0 + 36 >> 2] = $1;
  HEAPF32[$0 + 56 >> 2] = $1 / Math_fround(Math_sqrt(Math_fround(Math_fround($1 * $1) + Math_fround($2 * $2))));
 }
 
 function btConeShapeX__btConeShapeX_28float_2c_20float_29($0, $1, $2) {
  btConvexInternalShape__btConvexInternalShape_28_29($0);
  HEAPF32[$0 + 64 >> 2] = $2;
  HEAPF32[$0 + 60 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = 11;
  HEAP32[$0 + 76 >> 2] = 2;
  HEAP32[$0 + 68 >> 2] = 1;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 >> 2] = 6704;
  HEAPF32[$0 + 36 >> 2] = $1;
  HEAPF32[$0 + 40 >> 2] = $1;
  HEAPF32[$0 + 32 >> 2] = $2;
  HEAPF32[$0 + 56 >> 2] = $1 / Math_fround(Math_sqrt(Math_fround(Math_fround($1 * $1) + Math_fround($2 * $2))));
 }
 
 function btConeShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0);
  $5 = Math_fround(HEAPF32[$1 + 64 >> 2] * Math_fround(.5));
  $7 = HEAP32[$1 + 68 >> 2];
  $8 = HEAP32[$1 + 72 >> 2];
  $6 = $8 << 2;
  $3 = HEAPF32[$2 >> 2];
  $4 = Math_fround($3 * $3);
  $3 = HEAPF32[$2 + 4 >> 2];
  $4 = Math_fround($4 + Math_fround($3 * $3));
  $3 = HEAPF32[$2 + 8 >> 2];
  label$1 : {
   label$2 : {
    if (!!(HEAPF32[$6 + $2 >> 2] > Math_fround(HEAPF32[$1 + 56 >> 2] * Math_fround(Math_sqrt(Math_fround($4 + Math_fround($3 * $3))))))) {
     HEAP32[($7 << 2) + $0 >> 2] = 0;
     HEAPF32[$0 + $6 >> 2] = $5;
     $6 = HEAP32[$1 + 76 >> 2];
     break label$2;
    }
    $3 = HEAPF32[($7 << 2) + $2 >> 2];
    $6 = HEAP32[$1 + 76 >> 2];
    $9 = HEAPF32[($6 << 2) + $2 >> 2];
    $4 = Math_fround(Math_sqrt(Math_fround(Math_fround($3 * $3) + Math_fround($9 * $9))));
    if (!!($4 > Math_fround(1.1920928955078125e-07))) {
     $4 = Math_fround(HEAPF32[$1 + 60 >> 2] / $4);
     HEAPF32[($7 << 2) + $0 >> 2] = $3 * $4;
     HEAPF32[($8 << 2) + $0 >> 2] = -$5;
     $5 = Math_fround($9 * $4);
     break label$1;
    }
    HEAP32[($7 << 2) + $0 >> 2] = 0;
    HEAPF32[($8 << 2) + $0 >> 2] = -$5;
   }
   $5 = Math_fround(0.0);
  }
  HEAPF32[($6 << 2) + $0 >> 2] = $5;
 }
 
 function btConeShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0);
  $6 = global$0 - 16 | 0;
  if (($3 | 0) >= 1) {
   while (1) {
    $10 = Math_fround(HEAPF32[$0 + 64 >> 2] * Math_fround(.5));
    $5 = HEAP32[$0 + 68 >> 2];
    $7 = HEAP32[$0 + 72 >> 2] << 2;
    $4 = HEAPF32[$1 >> 2];
    $8 = Math_fround($4 * $4);
    $4 = HEAPF32[$1 + 4 >> 2];
    $8 = Math_fround($8 + Math_fround($4 * $4));
    $4 = HEAPF32[$1 + 8 >> 2];
    label$3 : {
     label$4 : {
      if (!!(HEAPF32[$7 + $1 >> 2] > Math_fround(HEAPF32[$0 + 56 >> 2] * Math_fround(Math_sqrt(Math_fround($8 + Math_fround($4 * $4))))))) {
       HEAP32[($5 << 2) + $6 >> 2] = 0;
       HEAPF32[$6 + $7 >> 2] = $10;
       $5 = HEAP32[$0 + 76 >> 2];
       break label$4;
      }
      $9 = $5 << 2;
      $4 = HEAPF32[$9 + $1 >> 2];
      $5 = HEAP32[$0 + 76 >> 2];
      $11 = HEAPF32[($5 << 2) + $1 >> 2];
      $8 = Math_fround(Math_sqrt(Math_fround(Math_fround($4 * $4) + Math_fround($11 * $11))));
      if (!!($8 > Math_fround(1.1920928955078125e-07))) {
       $8 = Math_fround(HEAPF32[$0 + 60 >> 2] / $8);
       HEAPF32[$6 + $9 >> 2] = $4 * $8;
       HEAPF32[$6 + $7 >> 2] = -$10;
       $4 = Math_fround($11 * $8);
       break label$3;
      }
      HEAP32[$6 + $9 >> 2] = 0;
      HEAPF32[$6 + $7 >> 2] = -$10;
     }
     $4 = Math_fround(0.0);
    }
    HEAPF32[($5 << 2) + $6 >> 2] = $4;
    $5 = $6 + 8 | 0;
    $9 = HEAP32[$5 >> 2];
    $5 = HEAP32[$5 + 4 >> 2];
    $7 = $2 + 8 | 0;
    HEAP32[$7 >> 2] = $9;
    HEAP32[$7 + 4 >> 2] = $5;
    $7 = HEAP32[$6 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$2 + 4 >> 2] = $7;
    $1 = $1 + 16 | 0;
    $2 = $2 + 16 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   }
  }
 }
 
 function btConeShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0;
  $4 = Math_fround(HEAPF32[$1 + 64 >> 2] * Math_fround(.5));
  $9 = HEAP32[$1 + 68 >> 2];
  $10 = HEAP32[$1 + 72 >> 2];
  $7 = $10 << 2;
  $3 = HEAPF32[$2 >> 2];
  $8 = Math_fround($3 * $3);
  $3 = HEAPF32[$2 + 4 >> 2];
  $8 = Math_fround($8 + Math_fround($3 * $3));
  $3 = HEAPF32[$2 + 8 >> 2];
  label$1 : {
   label$2 : {
    if (!!(HEAPF32[$7 + $2 >> 2] > Math_fround(HEAPF32[$1 + 56 >> 2] * Math_fround(Math_sqrt(Math_fround($8 + Math_fround($3 * $3))))))) {
     HEAP32[($9 << 2) + $0 >> 2] = 0;
     HEAPF32[$0 + $7 >> 2] = $4;
     $7 = HEAP32[$1 + 76 >> 2];
     break label$2;
    }
    $3 = HEAPF32[($9 << 2) + $2 >> 2];
    $7 = HEAP32[$1 + 76 >> 2];
    $5 = HEAPF32[($7 << 2) + $2 >> 2];
    $6 = Math_fround(Math_sqrt(Math_fround(Math_fround($3 * $3) + Math_fround($5 * $5))));
    if (!!($6 > Math_fround(1.1920928955078125e-07))) {
     $6 = Math_fround(HEAPF32[$1 + 60 >> 2] / $6);
     HEAPF32[($9 << 2) + $0 >> 2] = $3 * $6;
     HEAPF32[($10 << 2) + $0 >> 2] = -$4;
     $4 = Math_fround($5 * $6);
     break label$1;
    }
    HEAP32[($9 << 2) + $0 >> 2] = 0;
    HEAPF32[($10 << 2) + $0 >> 2] = -$4;
   }
   $4 = Math_fround(0.0);
  }
  HEAPF32[($7 << 2) + $0 >> 2] = $4;
  if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1)) != Math_fround(0.0)) {
   $4 = HEAPF32[$2 + 4 >> 2];
   $3 = HEAPF32[$2 >> 2];
   $5 = HEAPF32[$2 + 8 >> 2];
   $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
   $1 = Math_fround(Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4)) + Math_fround($5 * $5)) < Math_fround(1.4210854715202004e-14);
   $3 = $1 ? Math_fround(-1.0) : $3;
   $8 = $3;
   $5 = $1 ? Math_fround(-1.0) : $5;
   $4 = $1 ? Math_fround(-1.0) : $4;
   $3 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4))))));
   HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($6 * Math_fround($8 * $3));
   HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + Math_fround($6 * Math_fround($4 * $3));
   HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] + Math_fround($6 * Math_fround($5 * $3));
  }
 }
 
 function btConeShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0);
  $2 = HEAP32[$0 + 72 >> 2] << 2;
  $4 = $0 + 16 | 0;
  $5 = Math_fround(HEAPF32[$0 + 64 >> 2] * Math_fround(HEAPF32[$2 + $1 >> 2] / HEAPF32[$2 + $4 >> 2]));
  HEAPF32[$0 + 64 >> 2] = $5;
  $2 = HEAP32[$0 + 68 >> 2] << 2;
  $3 = Math_fround(HEAPF32[$2 + $1 >> 2] / HEAPF32[$2 + $4 >> 2]);
  $2 = HEAP32[$0 + 76 >> 2] << 2;
  $3 = Math_fround(HEAPF32[$0 + 60 >> 2] * Math_fround(Math_fround($3 + Math_fround(HEAPF32[$2 + $1 >> 2] / HEAPF32[$2 + $4 >> 2])) * Math_fround(.5)));
  HEAPF32[$0 + 60 >> 2] = $3;
  HEAPF32[$0 + 56 >> 2] = $3 / Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround($3 * $3))));
  btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1);
 }
 
 function btConeShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  $3 = global$0 - 96 | 0;
  global$0 = $3;
  $5 = $3 + 44 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $3 + 56 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$3 + 52 >> 2] = 1065353216;
  $5 = $3 + 76 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$3 + 72 >> 2] = 1065353216;
  $5 = $3 + 84 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$3 + 92 >> 2] = 0;
  HEAP32[$3 + 36 >> 2] = 0;
  HEAP32[$3 + 40 >> 2] = 0;
  HEAP32[$3 + 32 >> 2] = 1065353216;
  HEAP32[$3 + 64 >> 2] = 0;
  HEAP32[$3 + 68 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3 + 32 | 0, $3 + 16 | 0, $3);
  $8 = HEAPF32[$3 + 24 >> 2];
  $9 = HEAPF32[$3 + 8 >> 2];
  $6 = HEAPF32[$3 + 16 >> 2];
  $7 = HEAPF32[$3 >> 2];
  $10 = HEAPF32[$3 + 20 >> 2];
  $11 = HEAPF32[$3 + 4 >> 2];
  $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  HEAP32[$2 + 12 >> 2] = 0;
  $1 = Math_fround($1 * Math_fround(.0833333283662796));
  $6 = Math_fround($4 + Math_fround(Math_fround($7 - $6) * Math_fround(.5)));
  $6 = Math_fround($6 + $6);
  $6 = Math_fround($6 * $6);
  $7 = Math_fround($4 + Math_fround(Math_fround($11 - $10) * Math_fround(.5)));
  $7 = Math_fround($7 + $7);
  $7 = Math_fround($7 * $7);
  HEAPF32[$2 + 8 >> 2] = $1 * Math_fround($6 + $7);
  $4 = Math_fround($4 + Math_fround(Math_fround($9 - $8) * Math_fround(.5)));
  $4 = Math_fround($4 + $4);
  $4 = Math_fround($4 * $4);
  HEAPF32[$2 + 4 >> 2] = $1 * Math_fround($6 + $4);
  HEAPF32[$2 >> 2] = $1 * Math_fround($7 + $4);
  global$0 = $3 + 96 | 0;
 }
 
 function btConeShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 6880;
 }
 
 function btConeShape__getAnisotropicRollingFrictionDirection_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1065353216;
 }
 
 function btConeShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 36 >> 2];
  HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 40 >> 2];
  HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 44 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 48 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = HEAP32[$0 + 48 >> 2];
  $0 = HEAP32[$0 + 72 >> 2];
  HEAP32[$1 + 56 >> 2] = 0;
  HEAP32[$1 + 52 >> 2] = $0;
  return 6885;
 }
 
 function btConeShapeZ__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 6901;
 }
 
 function btConeShapeZ__getAnisotropicRollingFrictionDirection_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 8 >> 2] = 1065353216;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btConeShapeX__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 6907;
 }
 
 function btConeShapeX__getAnisotropicRollingFrictionDirection_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 1065353216;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btConvexInternalShape__btConvexInternalShape_28_29($0) {
  var $1 = 0;
  HEAP32[$0 + 12 >> 2] = -1;
  HEAP32[$0 + 4 >> 2] = 35;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 5928;
  HEAP32[$0 + 48 >> 2] = 1025758986;
  $1 = $0 + 24 | 0;
  HEAP32[$1 >> 2] = 1065353216;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 1065353216;
  HEAP32[$0 + 20 >> 2] = 1065353216;
  HEAP32[$0 >> 2] = 6924;
 }
 
 function btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0);
  $2 = HEAPF32[$1 >> 2];
  $3 = HEAPF32[$1 + 4 >> 2];
  $4 = HEAPF32[$1 + 8 >> 2];
  HEAP32[$0 + 28 >> 2] = 0;
  HEAPF32[$0 + 24 >> 2] = Math_abs($4);
  HEAPF32[$0 + 20 >> 2] = Math_abs($3);
  HEAPF32[$0 + 16 >> 2] = Math_abs($2);
 }
 
 function btConvexInternalShape__getAabbSlow_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0);
  $4 = global$0 - 80 | 0;
  global$0 = $4;
  $11 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $10 = $4 + 72 | 0;
  while (1) {
   HEAP32[$10 >> 2] = 0;
   HEAP32[$10 + 4 >> 2] = 0;
   HEAP32[$4 + 64 >> 2] = 0;
   HEAP32[$4 + 68 >> 2] = 0;
   $9 = $8 + ($4 - -64 | 0) | 0;
   HEAP32[$9 >> 2] = 1065353216;
   HEAP32[$4 + 44 >> 2] = 0;
   $5 = HEAPF32[$4 + 64 >> 2];
   $6 = HEAPF32[$4 + 68 >> 2];
   $7 = HEAPF32[$10 >> 2];
   HEAPF32[$4 + 40 >> 2] = Math_fround(Math_fround($5 * HEAPF32[$1 + 8 >> 2]) + Math_fround($6 * HEAPF32[$1 + 24 >> 2])) + Math_fround($7 * HEAPF32[$1 + 40 >> 2]);
   HEAPF32[$4 + 36 >> 2] = Math_fround(Math_fround($5 * HEAPF32[$1 + 4 >> 2]) + Math_fround($6 * HEAPF32[$1 + 20 >> 2])) + Math_fround($7 * HEAPF32[$1 + 36 >> 2]);
   HEAPF32[$4 + 32 >> 2] = Math_fround(Math_fround($5 * HEAPF32[$1 >> 2]) + Math_fround($6 * HEAPF32[$1 + 16 >> 2])) + Math_fround($7 * HEAPF32[$1 + 32 >> 2]);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($4 + 48 | 0, $0, $4 + 32 | 0);
   HEAP32[$4 + 44 >> 2] = 0;
   $5 = HEAPF32[$4 + 48 >> 2];
   $6 = HEAPF32[$4 + 52 >> 2];
   $7 = HEAPF32[$4 + 56 >> 2];
   HEAPF32[$4 + 40 >> 2] = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$1 + 32 >> 2]) + Math_fround($6 * HEAPF32[$1 + 36 >> 2])) + Math_fround($7 * HEAPF32[$1 + 40 >> 2])) + HEAPF32[$1 + 56 >> 2];
   HEAPF32[$4 + 36 >> 2] = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$1 + 16 >> 2]) + Math_fround($6 * HEAPF32[$1 + 20 >> 2])) + Math_fround($7 * HEAPF32[$1 + 24 >> 2])) + HEAPF32[$1 + 52 >> 2];
   HEAPF32[$4 + 32 >> 2] = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$1 >> 2]) + Math_fround($6 * HEAPF32[$1 + 4 >> 2])) + Math_fround($7 * HEAPF32[$1 + 8 >> 2])) + HEAPF32[$1 + 48 >> 2];
   HEAP32[$9 >> 2] = -1082130432;
   $9 = $8 + ($4 + 32 | 0) | 0;
   HEAPF32[$3 + $8 >> 2] = $11 + HEAPF32[$9 >> 2];
   HEAP32[$4 + 12 >> 2] = 0;
   $5 = HEAPF32[$4 + 64 >> 2];
   $6 = HEAPF32[$4 + 68 >> 2];
   $7 = HEAPF32[$10 >> 2];
   HEAPF32[$4 + 8 >> 2] = Math_fround(Math_fround($5 * HEAPF32[$1 + 8 >> 2]) + Math_fround($6 * HEAPF32[$1 + 24 >> 2])) + Math_fround($7 * HEAPF32[$1 + 40 >> 2]);
   HEAPF32[$4 + 4 >> 2] = Math_fround(Math_fround($5 * HEAPF32[$1 + 4 >> 2]) + Math_fround($6 * HEAPF32[$1 + 20 >> 2])) + Math_fround($7 * HEAPF32[$1 + 36 >> 2]);
   HEAPF32[$4 >> 2] = Math_fround(Math_fround($5 * HEAPF32[$1 >> 2]) + Math_fround($6 * HEAPF32[$1 + 16 >> 2])) + Math_fround($7 * HEAPF32[$1 + 32 >> 2]);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($4 + 16 | 0, $0, $4);
   HEAP32[$4 + 44 >> 2] = 0;
   $5 = HEAPF32[$4 + 16 >> 2];
   $6 = HEAPF32[$4 + 20 >> 2];
   $7 = HEAPF32[$4 + 24 >> 2];
   HEAPF32[$4 + 40 >> 2] = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$1 + 32 >> 2]) + Math_fround($6 * HEAPF32[$1 + 36 >> 2])) + Math_fround($7 * HEAPF32[$1 + 40 >> 2])) + HEAPF32[$1 + 56 >> 2];
   HEAPF32[$4 + 36 >> 2] = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$1 + 16 >> 2]) + Math_fround($6 * HEAPF32[$1 + 20 >> 2])) + Math_fround($7 * HEAPF32[$1 + 24 >> 2])) + HEAPF32[$1 + 52 >> 2];
   HEAPF32[$4 + 32 >> 2] = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$1 >> 2]) + Math_fround($6 * HEAPF32[$1 + 4 >> 2])) + Math_fround($7 * HEAPF32[$1 + 8 >> 2])) + HEAPF32[$1 + 48 >> 2];
   HEAPF32[$2 + $8 >> 2] = HEAPF32[$9 >> 2] - $11;
   $8 = $8 + 4 | 0;
   if (($8 | 0) != 12) {
    continue
   }
   break;
  };
  global$0 = $4 + 80 | 0;
 }
 
 function btConvexInternalShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($0, $1, $2);
  if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1)) != Math_fround(0.0)) {
   $4 = HEAPF32[$2 + 4 >> 2];
   $3 = HEAPF32[$2 >> 2];
   $5 = HEAPF32[$2 + 8 >> 2];
   $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
   $1 = Math_fround(Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4)) + Math_fround($5 * $5)) < Math_fround(1.4210854715202004e-14);
   $3 = $1 ? Math_fround(-1.0) : $3;
   $7 = $3;
   $5 = $1 ? Math_fround(-1.0) : $5;
   $4 = $1 ? Math_fround(-1.0) : $4;
   $3 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4))))));
   HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($6 * Math_fround($7 * $3));
   HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + Math_fround($6 * Math_fround($4 * $3));
   HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] + Math_fround($6 * Math_fround($5 * $3));
  }
 }
 
 function btConvexPolyhedron__btConvexPolyhedron_28_29($0) {
  var $1 = 0;
  HEAP32[$0 >> 2] = 7060;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = $0 + 28 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
 }
 
 function btConvexPolyhedron___btConvexPolyhedron_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  HEAP32[$0 >> 2] = 7060;
  $1 = HEAP32[$0 + 56 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 60 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $2 = HEAP32[$0 + 28 >> 2];
  if (($2 | 0) >= 1) {
   $3 = 8;
   while (1) {
    $1 = $3 + HEAP32[$0 + 36 >> 2] | 0;
    $6 = $1 + -4 | 0;
    $4 = $1 + 4 | 0;
    $5 = HEAP32[$4 >> 2];
    if ($5) {
     if (HEAPU8[$1 + 8 | 0]) {
      btAlignedFreeInternal_28void__29($5)
     }
     HEAP32[$4 >> 2] = 0;
    }
    HEAP32[$6 >> 2] = 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$1 >> 2] = 0;
    HEAP8[$1 + 8 | 0] = 1;
    $3 = $3 + 36 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  $1 = HEAP32[$0 + 36 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 40 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = HEAP32[$0 + 16 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 20 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  return $0 | 0;
 }
 
 function btConvexPolyhedron___btConvexPolyhedron_28_29_1($0) {
  $0 = $0 | 0;
  btAlignedFreeInternal_28void__29(btConvexPolyhedron___btConvexPolyhedron_28_29($0));
 }
 
 function btConvexPolyhedron__testContainment_28_29_20const($0) {
  var $1 = Math_fround(0), $2 = Math_fround(0), $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $7 = HEAP32[$0 + 28 >> 2];
  $9 = ($7 | 0) < 1;
  while (1) {
   label$2 : {
    if ($5 >>> 0 > 7) {
     break label$2
    }
    label$3 : {
     switch ($5 - 1 | 0) {
     default:
      $1 = Math_fround(HEAPF32[$0 + 88 >> 2] + HEAPF32[$0 + 72 >> 2]);
      $2 = Math_fround(HEAPF32[$0 + 84 >> 2] + HEAPF32[$0 + 68 >> 2]);
      $3 = Math_fround(HEAPF32[$0 + 80 >> 2] + HEAPF32[$0 + 64 >> 2]);
      break label$2;
     case 0:
      $1 = Math_fround(HEAPF32[$0 + 72 >> 2] - HEAPF32[$0 + 88 >> 2]);
      $2 = Math_fround(HEAPF32[$0 + 84 >> 2] + HEAPF32[$0 + 68 >> 2]);
      $3 = Math_fround(HEAPF32[$0 + 80 >> 2] + HEAPF32[$0 + 64 >> 2]);
      break label$2;
     case 1:
      $1 = Math_fround(HEAPF32[$0 + 88 >> 2] + HEAPF32[$0 + 72 >> 2]);
      $2 = Math_fround(HEAPF32[$0 + 68 >> 2] - HEAPF32[$0 + 84 >> 2]);
      $3 = Math_fround(HEAPF32[$0 + 80 >> 2] + HEAPF32[$0 + 64 >> 2]);
      break label$2;
     case 2:
      $1 = Math_fround(HEAPF32[$0 + 72 >> 2] - HEAPF32[$0 + 88 >> 2]);
      $2 = Math_fround(HEAPF32[$0 + 68 >> 2] - HEAPF32[$0 + 84 >> 2]);
      $3 = Math_fround(HEAPF32[$0 + 80 >> 2] + HEAPF32[$0 + 64 >> 2]);
      break label$2;
     case 3:
      $1 = Math_fround(HEAPF32[$0 + 88 >> 2] + HEAPF32[$0 + 72 >> 2]);
      $2 = Math_fround(HEAPF32[$0 + 84 >> 2] + HEAPF32[$0 + 68 >> 2]);
      $3 = Math_fround(HEAPF32[$0 + 64 >> 2] - HEAPF32[$0 + 80 >> 2]);
      break label$2;
     case 4:
      $1 = Math_fround(HEAPF32[$0 + 72 >> 2] - HEAPF32[$0 + 88 >> 2]);
      $2 = Math_fround(HEAPF32[$0 + 84 >> 2] + HEAPF32[$0 + 68 >> 2]);
      $3 = Math_fround(HEAPF32[$0 + 64 >> 2] - HEAPF32[$0 + 80 >> 2]);
      break label$2;
     case 5:
      $1 = Math_fround(HEAPF32[$0 + 88 >> 2] + HEAPF32[$0 + 72 >> 2]);
      $2 = Math_fround(HEAPF32[$0 + 68 >> 2] - HEAPF32[$0 + 84 >> 2]);
      $3 = Math_fround(HEAPF32[$0 + 64 >> 2] - HEAPF32[$0 + 80 >> 2]);
      break label$2;
     case 6:
      break label$3;
     };
    }
    $1 = Math_fround(HEAPF32[$0 + 72 >> 2] - HEAPF32[$0 + 88 >> 2]);
    $2 = Math_fround(HEAPF32[$0 + 68 >> 2] - HEAPF32[$0 + 84 >> 2]);
    $3 = Math_fround(HEAPF32[$0 + 64 >> 2] - HEAPF32[$0 + 80 >> 2]);
   }
   label$11 : {
    if (!$9) {
     $4 = HEAP32[$0 + 36 >> 2] + 20 | 0;
     $8 = 0;
     $6 = 0;
     while (1) {
      if (!!(Math_fround(HEAPF32[$4 + 12 >> 2] + Math_fround(Math_fround(Math_fround($3 * HEAPF32[$4 >> 2]) + Math_fround($2 * HEAPF32[$4 + 4 >> 2])) + Math_fround($1 * HEAPF32[$4 + 8 >> 2]))) > Math_fround(0.0))) {
       break label$11
      }
      $4 = $4 + 36 | 0;
      $6 = $6 + 1 | 0;
      if (($6 | 0) < ($7 | 0)) {
       continue
      }
      break;
     };
    }
    $8 = 1;
    $5 = $5 + 1 | 0;
    if (($5 | 0) != 8) {
     continue
    }
   }
   break;
  };
  return $8;
 }
 
 function btConvexPolyhedron__initialize_28_29($0) {
  var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = 0, $24 = 0, $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0);
  $3 = global$0 - 96 | 0;
  global$0 = $3;
  HEAP32[$0 + 64 >> 2] = 0;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP8[$3 + 52 | 0] = 1;
  HEAP32[$3 + 48 >> 2] = 0;
  HEAP8[$3 + 72 | 0] = 1;
  $7 = $3 + 40 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$3 + 68 >> 2] = 0;
  HEAP8[$3 + 92 | 0] = 1;
  $7 = $3 + 60 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$3 + 88 >> 2] = 0;
  $7 = $3 + 80 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $0 + 72 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$3 + 28 >> 2] = 0;
  HEAP8[$3 + 32 | 0] = 1;
  HEAP32[$3 + 20 >> 2] = 0;
  HEAP32[$3 + 24 >> 2] = 0;
  $7 = HEAP32[$0 + 28 >> 2];
  label$1 : {
   if (($7 | 0) < 1) {
    break label$1
   }
   while (1) {
    $1 = HEAP32[$0 + 36 >> 2];
    $24 = Math_imul($15, 36);
    $23 = HEAP32[($1 + $24 | 0) + 4 >> 2];
    if (($23 | 0) >= 1) {
     $16 = 0;
     while (1) {
      $4 = HEAP32[($1 + $24 | 0) + 12 >> 2];
      $1 = HEAP32[$4 + ($16 << 2) >> 2];
      HEAP16[$3 + 8 >> 1] = $1;
      $16 = $16 + 1 | 0;
      $25 = ($23 | 0) == ($16 | 0);
      $4 = HEAP32[(($25 ? 0 : $16) << 2) + $4 >> 2];
      HEAP16[$3 + 10 >> 1] = $4;
      $13 = $4 << 16 >> 16;
      $5 = $1 << 16 >> 16;
      if (($13 | 0) > ($5 | 0)) {
       HEAP16[$3 + 10 >> 1] = $1;
       HEAP16[$3 + 8 >> 1] = $4;
       $13 = $1;
       $5 = $4;
      }
      $21 = 0;
      $17 = $13 << 16;
      $7 = $5 << 16 >> 16;
      $1 = $17 + $7 & HEAP32[$3 + 64 >> 2] + -1;
      label$6 : {
       if ($1 >>> 0 >= HEAPU32[$3 + 20 >> 2]) {
        break label$6
       }
       $1 = HEAP32[HEAP32[$3 + 28 >> 2] + ($1 << 2) >> 2];
       if (($1 | 0) == -1) {
        break label$6
       }
       $14 = HEAP32[$3 + 48 >> 2];
       $11 = HEAP32[$3 + 88 >> 2];
       while (1) {
        $1 = $1 << 2;
        $4 = $1 + $11 | 0;
        if (!(HEAPU16[$4 + 2 >> 1] == ($13 & 65535) ? HEAPU16[$4 >> 1] == ($5 & 65535) : 0)) {
         $1 = HEAP32[$1 + $14 >> 2];
         if (($1 | 0) != -1) {
          continue
         }
         break label$6;
        }
        break;
       };
       $21 = $1 + HEAP32[$3 + 68 >> 2] | 0;
      }
      $4 = HEAP32[$0 + 16 >> 2];
      $1 = $4 + ($17 >> 16 << 4) | 0;
      $4 = ($7 << 4) + $4 | 0;
      $2 = Math_fround(HEAPF32[$1 + 8 >> 2] - HEAPF32[$4 + 8 >> 2]);
      $9 = $2;
      $8 = Math_fround(HEAPF32[$1 >> 2] - HEAPF32[$4 >> 2]);
      $6 = Math_fround(HEAPF32[$1 + 4 >> 2] - HEAPF32[$4 + 4 >> 2]);
      $2 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($6 * $6)) + Math_fround($2 * $2)))));
      $12 = Math_fround($9 * $2);
      $10 = Math_fround($6 * $2);
      $2 = Math_fround($8 * $2);
      $5 = HEAP32[$0 + 48 >> 2];
      label$10 : {
       if (($5 | 0) >= 1) {
        $1 = HEAP32[$0 + 56 >> 2];
        $4 = 0;
        while (1) {
         $9 = HEAPF32[$1 + 8 >> 2];
         $8 = HEAPF32[$1 + 4 >> 2];
         $6 = HEAPF32[$1 >> 2];
         label$13 : {
          if (+Math_fround(Math_abs(Math_fround($6 - $2))) > 1.0e-06) {
           break label$13
          }
          if (+Math_fround(Math_abs(Math_fround($8 - $10))) > 1.0e-06) {
           break label$13
          }
          if (!(+Math_fround(Math_abs(Math_fround($9 - $12))) > 1.0e-06)) {
           break label$10
          }
         }
         label$14 : {
          if (+Math_fround(Math_abs(Math_fround($2 + $6))) > 1.0e-06) {
           break label$14
          }
          if (+Math_fround(Math_abs(Math_fround($10 + $8))) > 1.0e-06) {
           break label$14
          }
          if (!(+Math_fround(Math_abs(Math_fround($12 + $9))) > 1.0e-06)) {
           break label$10
          }
         }
         $1 = $1 + 16 | 0;
         $4 = $4 + 1 | 0;
         if (($4 | 0) < ($5 | 0)) {
          continue
         }
         break;
        };
       }
       label$15 : {
        if (HEAP32[$0 + 52 >> 2] != ($5 | 0)) {
         break label$15
        }
        $13 = $5 ? $5 << 1 : 1;
        if (($5 | 0) >= ($13 | 0)) {
         break label$15
        }
        label$16 : {
         if (!$13) {
          $14 = 0;
          break label$16;
         }
         $14 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13 << 4);
         $5 = HEAP32[$0 + 48 >> 2];
        }
        if (($5 | 0) >= 1) {
         $1 = 0;
         while (1) {
          $11 = $1 + HEAP32[$0 + 56 >> 2] | 0;
          $7 = HEAP32[$11 + 4 >> 2];
          $4 = $1 + $14 | 0;
          HEAP32[$4 >> 2] = HEAP32[$11 >> 2];
          HEAP32[$4 + 4 >> 2] = $7;
          $17 = $11 + 8 | 0;
          $11 = HEAP32[$17 >> 2];
          $17 = HEAP32[$17 + 4 >> 2];
          $7 = $4 + 8 | 0;
          HEAP32[$7 >> 2] = $11;
          HEAP32[$7 + 4 >> 2] = $17;
          $1 = $1 + 16 | 0;
          $5 = $5 + -1 | 0;
          if ($5) {
           continue
          }
          break;
         };
        }
        $1 = HEAP32[$0 + 56 >> 2];
        if ($1) {
         if (HEAPU8[$0 + 60 | 0]) {
          btAlignedFreeInternal_28void__29($1)
         }
         HEAP32[$0 + 56 >> 2] = 0;
        }
        HEAP32[$0 + 56 >> 2] = $14;
        HEAP8[$0 + 60 | 0] = 1;
        HEAP32[$0 + 52 >> 2] = $13;
        $5 = HEAP32[$0 + 48 >> 2];
       }
       $1 = HEAP32[$0 + 56 >> 2] + ($5 << 4) | 0;
       HEAP32[$1 + 12 >> 2] = 0;
       HEAPF32[$1 + 8 >> 2] = $12;
       HEAPF32[$1 + 4 >> 2] = $10;
       HEAPF32[$1 >> 2] = $2;
       HEAP32[$0 + 48 >> 2] = HEAP32[$0 + 48 >> 2] + 1;
      }
      label$22 : {
       if ($21) {
        HEAP16[$21 + 2 >> 1] = $15;
        break label$22;
       }
       HEAP16[$3 >> 1] = $15;
       HEAP16[$3 + 2 >> 1] = 65535;
       btHashMap_btInternalVertexPair_2c_20btInternalEdge___insert_28btInternalVertexPair_20const__2c_20btInternalEdge_20const__29($3 + 16 | 0, $3 + 8 | 0, $3);
      }
      if (!$25) {
       $1 = HEAP32[$0 + 36 >> 2];
       continue;
      }
      break;
     };
     $7 = HEAP32[$0 + 28 >> 2];
    }
    $15 = $15 + 1 | 0;
    if (($15 | 0) < ($7 | 0)) {
     continue
    }
    break;
   };
   $23 = 0;
   if (($7 | 0) < 1) {
    break label$1
   }
   $23 = ($7 | 0) > 0;
   $13 = HEAP32[$0 + 16 >> 2];
   $24 = HEAP32[$0 + 36 >> 2];
   $15 = 0;
   while (1) {
    $1 = Math_imul($15, 36) + $24 | 0;
    $14 = HEAP32[$1 + 4 >> 2];
    if (($14 | 0) >= 3) {
     $16 = HEAP32[$1 + 12 >> 2];
     $1 = $16 + 4 | 0;
     $21 = (HEAP32[$16 >> 2] << 4) + $13 | 0;
     $25 = $21 + 8 | 0;
     $17 = $21 + 4 | 0;
     $9 = HEAPF32[$0 + 72 >> 2];
     $10 = HEAPF32[$0 + 68 >> 2];
     $12 = HEAPF32[$0 + 64 >> 2];
     $4 = 2;
     while (1) {
      $33 = $9;
      $2 = HEAPF32[$25 >> 2];
      $5 = (HEAP32[$1 >> 2] << 4) + $13 | 0;
      $18 = HEAPF32[$5 + 8 >> 2];
      $11 = (HEAP32[(($4 | 0) % ($14 | 0) << 2) + $16 >> 2] << 4) + $13 | 0;
      $19 = HEAPF32[$11 + 8 >> 2];
      $34 = Math_fround(Math_fround(Math_fround($2 + $18) + $19) * Math_fround(.3333333432674408));
      $8 = HEAPF32[$21 >> 2];
      $22 = HEAPF32[$5 >> 2];
      $9 = Math_fround($8 - $22);
      $6 = HEAPF32[$17 >> 2];
      $26 = HEAPF32[$11 + 4 >> 2];
      $27 = Math_fround($6 - $26);
      $28 = HEAPF32[$5 + 4 >> 2];
      $29 = Math_fround($6 - $28);
      $30 = HEAPF32[$11 >> 2];
      $31 = Math_fround($8 - $30);
      $32 = Math_fround(Math_fround($9 * $27) - Math_fround($29 * $31));
      $19 = Math_fround($2 - $19);
      $2 = Math_fround($2 - $18);
      $18 = Math_fround(Math_fround($29 * $19) - Math_fround($2 * $27));
      $2 = Math_fround(Math_fround($2 * $31) - Math_fround($9 * $19));
      $2 = Math_fround(Math_fround(Math_sqrt(Math_fround(Math_fround($32 * $32) + Math_fround(Math_fround($18 * $18) + Math_fround($2 * $2))))) * Math_fround(.5));
      $9 = Math_fround($33 + Math_fround($34 * $2));
      HEAPF32[$0 + 72 >> 2] = $9;
      $10 = Math_fround($10 + Math_fround(Math_fround(Math_fround($26 + Math_fround($6 + $28)) * Math_fround(.3333333432674408)) * $2));
      HEAPF32[$0 + 68 >> 2] = $10;
      $12 = Math_fround($12 + Math_fround(Math_fround(Math_fround($30 + Math_fround($8 + $22)) * Math_fround(.3333333432674408)) * $2));
      HEAPF32[$0 + 64 >> 2] = $12;
      $20 = Math_fround($20 + $2);
      $1 = $1 + 4 | 0;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != ($14 | 0)) {
       continue
      }
      break;
     };
    }
    $15 = $15 + 1 | 0;
    if (($7 | 0) != ($15 | 0)) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 96 >> 2] = 2139095039;
  $2 = Math_fround(Math_fround(1.0) / $20);
  $6 = Math_fround($2 * HEAPF32[$0 + 64 >> 2]);
  HEAPF32[$0 + 64 >> 2] = $6;
  $9 = Math_fround($2 * HEAPF32[$0 + 68 >> 2]);
  HEAPF32[$0 + 68 >> 2] = $9;
  $10 = Math_fround($2 * HEAPF32[$0 + 72 >> 2]);
  HEAPF32[$0 + 72 >> 2] = $10;
  $8 = Math_fround(3402823466385288598117041.0e14);
  $18 = Math_fround(3402823466385288598117041.0e14);
  if ($23) {
   $1 = HEAP32[$0 + 36 >> 2] + 20 | 0;
   while (1) {
    $2 = Math_fround(Math_abs(Math_fround(HEAPF32[$1 + 12 >> 2] + Math_fround(Math_fround(Math_fround($6 * HEAPF32[$1 >> 2]) + Math_fround($9 * HEAPF32[$1 + 4 >> 2])) + Math_fround($10 * HEAPF32[$1 + 8 >> 2])))));
    if (!!($2 < $18)) {
     HEAPF32[$0 + 96 >> 2] = $2;
     $18 = $2;
    }
    $1 = $1 + 36 | 0;
    $7 = $7 + -1 | 0;
    if ($7) {
     continue
    }
    break;
   };
  }
  $5 = HEAP32[$0 + 8 >> 2];
  label$31 : {
   if (($5 | 0) < 1) {
    $6 = Math_fround(-3402823466385288598117041.0e14);
    $9 = Math_fround(3402823466385288598117041.0e14);
    $10 = Math_fround(-3402823466385288598117041.0e14);
    $12 = Math_fround(-3402823466385288598117041.0e14);
    $20 = Math_fround(3402823466385288598117041.0e14);
    break label$31;
   }
   $1 = HEAP32[$0 + 16 >> 2];
   $12 = Math_fround(-3402823466385288598117041.0e14);
   $4 = 0;
   $20 = Math_fround(3402823466385288598117041.0e14);
   $10 = Math_fround(-3402823466385288598117041.0e14);
   $6 = Math_fround(-3402823466385288598117041.0e14);
   $9 = Math_fround(3402823466385288598117041.0e14);
   while (1) {
    $2 = HEAPF32[$1 + 8 >> 2];
    $12 = $2 > $12 ? $2 : $12;
    $9 = $2 < $9 ? $2 : $9;
    $2 = HEAPF32[$1 + 4 >> 2];
    $10 = $2 > $10 ? $2 : $10;
    $8 = $2 < $8 ? $2 : $8;
    $2 = HEAPF32[$1 >> 2];
    $6 = $2 > $6 ? $2 : $6;
    $20 = $2 < $20 ? $2 : $20;
    $1 = $1 + 16 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) < ($5 | 0)) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 128 >> 2] = 0;
  $2 = Math_fround($12 - $9);
  HEAPF32[$0 + 124 >> 2] = $2;
  $19 = Math_fround($10 - $8);
  HEAPF32[$0 + 120 >> 2] = $19;
  $22 = Math_fround($6 - $20);
  HEAPF32[$0 + 116 >> 2] = $22;
  HEAP32[$0 + 112 >> 2] = 0;
  HEAPF32[$0 + 108 >> 2] = $9 + $12;
  HEAPF32[$0 + 104 >> 2] = $8 + $10;
  HEAPF32[$0 + 100 >> 2] = $6 + $20;
  $5 = $22 < $19 ? ($19 < $2 ? 2 : 1) : ($22 < $2) << 1;
  $1 = $5 << 2;
  $2 = HEAPF32[$1 + ($0 + 116 | 0) >> 2];
  $6 = Math_fround($18 / Math_fround(1.7320507764816284));
  HEAPF32[$0 + 88 >> 2] = $6;
  HEAPF32[$0 + 80 >> 2] = $6;
  HEAPF32[$0 + 84 >> 2] = $6;
  $4 = $1 + ($0 + 80 | 0) | 0;
  $2 = Math_fround($2 * Math_fround(.5));
  HEAPF32[$4 >> 2] = $2;
  $8 = Math_fround(Math_fround($2 - $6) * Math_fround(.0009765625));
  $1 = 1024;
  label$34 : {
   label$35 : {
    while (1) {
     if (btConvexPolyhedron__testContainment_28_29_20const($0)) {
      break label$35
     }
     $2 = Math_fround($2 - $8);
     HEAPF32[$4 >> 2] = $2;
     $1 = $1 + -1 | 0;
     if ($1) {
      continue
     }
     break;
    };
    HEAPF32[$0 + 84 >> 2] = $6;
    HEAPF32[$0 + 88 >> 2] = $6;
    HEAPF32[$0 + 80 >> 2] = $6;
    break label$34;
   }
   $4 = $0 + 80 | 0;
   $5 = 1 << $5 & 3;
   $1 = $4 + ((1 << $5 & 3) << 2) | 0;
   $14 = HEAP32[$1 >> 2];
   $4 = ($5 << 2) + $4 | 0;
   $11 = HEAP32[$4 >> 2];
   $2 = Math_fround(Math_fround(HEAPF32[$0 + 96 >> 2] - $6) * Math_fround(.0009765625));
   HEAPF32[$4 >> 2] = $2 + HEAPF32[$4 >> 2];
   $8 = Math_fround($2 + HEAPF32[$1 >> 2]);
   HEAPF32[$1 >> 2] = $8;
   if (btConvexPolyhedron__testContainment_28_29_20const($0)) {
    $5 = 1024;
    while (1) {
     $6 = $8;
     $5 = $5 + -1 | 0;
     if (!$5) {
      break label$34
     }
     HEAPF32[$4 >> 2] = $2 + HEAPF32[$4 >> 2];
     $8 = Math_fround($2 + HEAPF32[$1 >> 2]);
     HEAPF32[$1 >> 2] = $8;
     if (btConvexPolyhedron__testContainment_28_29_20const($0)) {
      continue
     }
     break;
    };
    $14 = (wasm2js_scratch_store_f32($6), wasm2js_scratch_load_i32(0));
   }
   HEAP32[$4 >> 2] = $11;
   HEAP32[$1 >> 2] = $14;
  }
  $1 = HEAP32[$3 + 88 >> 2];
  if ($1) {
   if (HEAPU8[$3 + 92 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$3 + 88 >> 2] = 0;
  }
  HEAP32[$3 + 88 >> 2] = 0;
  HEAP8[$3 + 92 | 0] = 1;
  HEAP32[$3 + 80 >> 2] = 0;
  HEAP32[$3 + 84 >> 2] = 0;
  $1 = HEAP32[$3 + 68 >> 2];
  if ($1) {
   if (HEAPU8[$3 + 72 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$3 + 68 >> 2] = 0;
  }
  HEAP32[$3 + 68 >> 2] = 0;
  HEAP8[$3 + 72 | 0] = 1;
  HEAP32[$3 + 60 >> 2] = 0;
  HEAP32[$3 + 64 >> 2] = 0;
  $1 = HEAP32[$3 + 48 >> 2];
  if ($1) {
   if (HEAPU8[$3 + 52 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$3 + 48 >> 2] = 0;
  }
  HEAP32[$3 + 48 >> 2] = 0;
  HEAP8[$3 + 52 | 0] = 1;
  HEAP32[$3 + 40 >> 2] = 0;
  HEAP32[$3 + 44 >> 2] = 0;
  $1 = HEAP32[$3 + 28 >> 2];
  if ($1) {
   if (HEAPU8[$3 + 32 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$3 + 28 >> 2] = 0;
  }
  global$0 = $3 + 96 | 0;
 }
 
 function btHashMap_btInternalVertexPair_2c_20btInternalEdge___insert_28btInternalVertexPair_20const__2c_20btInternalEdge_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  label$1 : {
   $4 = HEAP16[$1 >> 1];
   $5 = HEAPU16[$1 + 2 >> 1];
   $8 = HEAP32[$0 + 48 >> 2];
   $11 = $4 + ($5 << 16) & $8 + -1;
   label$2 : {
    if ($11 >>> 0 >= HEAPU32[$0 + 4 >> 2]) {
     break label$2
    }
    $3 = HEAP32[HEAP32[$0 + 12 >> 2] + ($11 << 2) >> 2];
    if (($3 | 0) == -1) {
     break label$2
    }
    $9 = HEAP32[$0 + 72 >> 2];
    $6 = $4 & 65535;
    while (1) {
     $4 = $3 << 2;
     $7 = $4 + $9 | 0;
     if (HEAPU16[$7 + 2 >> 1] == ($5 & 65535) ? ($6 | 0) == HEAPU16[$7 >> 1] : 0) {
      break label$1
     }
     $3 = HEAP32[$4 + HEAP32[$0 + 32 >> 2] >> 2];
     if (($3 | 0) != -1) {
      continue
     }
     break;
    };
   }
   $9 = HEAP32[$0 + 44 >> 2];
   $3 = $9;
   label$5 : {
    if (($3 | 0) != ($8 | 0)) {
     break label$5
    }
    $3 = $8;
    $6 = $3 ? $3 << 1 : 1;
    if (($3 | 0) >= ($6 | 0)) {
     break label$5
    }
    label$6 : {
     if (!$6) {
      $7 = 0;
      $3 = $8;
      break label$6;
     }
     $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2);
     $3 = HEAP32[$0 + 44 >> 2];
    }
    $4 = $3;
    if (($4 | 0) >= 1) {
     $3 = 0;
     while (1) {
      $5 = $3 + $7 | 0;
      $10 = $3 + HEAP32[$0 + 52 >> 2] | 0;
      $10 = HEAPU16[$10 >> 1] | HEAPU16[$10 + 2 >> 1] << 16;
      HEAP16[$5 >> 1] = $10;
      HEAP16[$5 + 2 >> 1] = $10 >>> 16;
      $3 = $3 + 4 | 0;
      $4 = $4 + -1 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    $3 = HEAP32[$0 + 52 >> 2];
    if ($3) {
     if (HEAPU8[$0 + 56 | 0]) {
      btAlignedFreeInternal_28void__29($3)
     }
     HEAP32[$0 + 52 >> 2] = 0;
    }
    HEAP32[$0 + 52 >> 2] = $7;
    HEAP32[$0 + 48 >> 2] = $6;
    HEAP8[$0 + 56 | 0] = 1;
    $3 = HEAP32[$0 + 44 >> 2];
   }
   $3 = HEAP32[$0 + 52 >> 2] + ($3 << 2) | 0;
   $2 = HEAPU16[$2 >> 1] | HEAPU16[$2 + 2 >> 1] << 16;
   HEAP16[$3 >> 1] = $2;
   HEAP16[$3 + 2 >> 1] = $2 >>> 16;
   HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + 1;
   $4 = HEAP32[$0 - -64 >> 2];
   label$12 : {
    if (($4 | 0) != HEAP32[$0 + 68 >> 2]) {
     break label$12
    }
    $6 = $4 ? $4 << 1 : 1;
    if (($4 | 0) >= ($6 | 0)) {
     break label$12
    }
    label$13 : {
     if (!$6) {
      $7 = 0;
      break label$13;
     }
     $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2);
     $4 = HEAP32[$0 + 64 >> 2];
    }
    if (($4 | 0) >= 1) {
     $3 = 0;
     while (1) {
      $2 = $3 + $7 | 0;
      $5 = $3 + HEAP32[$0 + 72 >> 2] | 0;
      $5 = HEAPU16[$5 >> 1] | HEAPU16[$5 + 2 >> 1] << 16;
      HEAP16[$2 >> 1] = $5;
      HEAP16[$2 + 2 >> 1] = $5 >>> 16;
      $3 = $3 + 4 | 0;
      $4 = $4 + -1 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    $3 = HEAP32[$0 + 72 >> 2];
    if ($3) {
     if (HEAPU8[$0 + 76 | 0]) {
      btAlignedFreeInternal_28void__29($3)
     }
     HEAP32[$0 + 72 >> 2] = 0;
    }
    HEAP32[$0 + 72 >> 2] = $7;
    HEAP32[$0 + 68 >> 2] = $6;
    HEAP8[$0 + 76 | 0] = 1;
    $4 = HEAP32[$0 + 64 >> 2];
   }
   $2 = HEAP32[$0 + 72 >> 2] + ($4 << 2) | 0;
   $3 = HEAPU16[$1 >> 1] | HEAPU16[$1 + 2 >> 1] << 16;
   HEAP16[$2 >> 1] = $3;
   HEAP16[$2 + 2 >> 1] = $3 >>> 16;
   HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 64 >> 2] + 1;
   if (($8 | 0) < HEAP32[$0 + 48 >> 2]) {
    btHashMap_btInternalVertexPair_2c_20btInternalEdge___growTables_28btInternalVertexPair_20const__29($0);
    $11 = HEAP16[$1 >> 1] + (HEAPU16[$1 + 2 >> 1] << 16) & HEAP32[$0 + 48 >> 2] + -1;
   }
   $1 = HEAP32[$0 + 32 >> 2] + ($9 << 2) | 0;
   $0 = HEAP32[$0 + 12 >> 2] + ($11 << 2) | 0;
   HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = $9;
   return;
  }
  $0 = HEAP32[$0 + 52 >> 2] + ($3 << 2) | 0;
  $1 = HEAPU16[$2 >> 1] | HEAPU16[$2 + 2 >> 1] << 16;
  HEAP16[$0 >> 1] = $1;
  HEAP16[$0 + 2 >> 1] = $1 >>> 16;
 }
 
 function btHashMap_btInternalVertexPair_2c_20btInternalEdge___growTables_28btInternalVertexPair_20const__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $7 = HEAP32[$0 + 4 >> 2];
  $3 = HEAP32[$0 + 48 >> 2];
  label$1 : {
   if (($7 | 0) >= ($3 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAP32[$0 + 8 >> 2] >= ($3 | 0)) {
     $4 = HEAP32[$0 + 12 >> 2];
     break label$2;
    }
    if ($3) {
     $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 2);
     $1 = HEAP32[$0 + 4 >> 2];
    } else {
     $1 = $7
    }
    $6 = HEAP32[$0 + 12 >> 2];
    label$6 : {
     label$7 : {
      if (($1 | 0) >= 1) {
       $2 = $4;
       $5 = $6;
       while (1) {
        HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
        $2 = $2 + 4 | 0;
        $5 = $5 + 4 | 0;
        $1 = $1 + -1 | 0;
        if ($1) {
         continue
        }
        break;
       };
       break label$7;
      }
      if ($6) {
       break label$7
      }
      HEAP32[$0 + 12 >> 2] = $4;
      HEAP8[$0 + 16 | 0] = 1;
      break label$6;
     }
     if (HEAPU8[$0 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($6)
     }
     HEAP32[$0 + 12 >> 2] = $4;
     HEAP8[$0 + 16 | 0] = 1;
    }
    HEAP32[$0 + 8 >> 2] = $3;
   }
   $2 = $7 << 2;
   $1 = $2 + $4 | 0;
   $4 = $3 << 2;
   memset($1, 0, $4 - $2 | 0);
   HEAP32[$0 + 4 >> 2] = $3;
   $6 = HEAP32[$0 + 24 >> 2];
   if (($6 | 0) < ($3 | 0)) {
    label$12 : {
     if (HEAP32[$0 + 28 >> 2] >= ($3 | 0)) {
      $8 = HEAP32[$0 + 32 >> 2];
      break label$12;
     }
     if ($3) {
      $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4);
      $1 = HEAP32[$0 + 24 >> 2];
     } else {
      $1 = $6
     }
     $9 = HEAP32[$0 + 32 >> 2];
     label$16 : {
      if (($1 | 0) >= 1) {
       $2 = $8;
       $5 = $9;
       while (1) {
        HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
        $2 = $2 + 4 | 0;
        $5 = $5 + 4 | 0;
        $1 = $1 + -1 | 0;
        if ($1) {
         continue
        }
        break;
       };
       break label$16;
      }
      if ($9) {
       break label$16
      }
      HEAP32[$0 + 32 >> 2] = $8;
      HEAP32[$0 + 28 >> 2] = $3;
      HEAP8[$0 + 36 | 0] = 1;
      break label$12;
     }
     if (HEAPU8[$0 + 36 | 0]) {
      btAlignedFreeInternal_28void__29($9)
     }
     HEAP32[$0 + 32 >> 2] = $8;
     HEAP8[$0 + 36 | 0] = 1;
     HEAP32[$0 + 28 >> 2] = $3;
    }
    $2 = $6 << 2;
    memset($2 + $8 | 0, 0, $4 - $2 | 0);
   }
   HEAP32[$0 + 24 >> 2] = $3;
   if (($3 | 0) >= 1) {
    memset(HEAP32[$0 + 12 >> 2], 255, $4);
    memset(HEAP32[$0 + 32 >> 2], 255, $4);
   }
   if (($7 | 0) < 1) {
    break label$1
   }
   $5 = HEAP32[$0 + 32 >> 2];
   $2 = HEAP32[$0 + 72 >> 2];
   $4 = HEAP32[$0 + 12 >> 2];
   $1 = 0;
   while (1) {
    $3 = ((HEAP16[$2 >> 1] + (HEAPU16[$2 + 2 >> 1] << 16) & HEAP32[$0 + 48 >> 2] + -1) << 2) + $4 | 0;
    HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$3 >> 2] = $1;
    $2 = $2 + 4 | 0;
    $5 = $5 + 4 | 0;
    $1 = $1 + 1 | 0;
    if (($1 | 0) != ($7 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0);
  HEAP32[$3 >> 2] = 2139095039;
  $7 = -8388609;
  HEAP32[$4 >> 2] = -8388609;
  $10 = HEAP32[$0 + 8 >> 2];
  label$1 : {
   if (($10 | 0) < 1) {
    $8 = Math_fround(-3402823466385288598117041.0e14);
    break label$1;
   }
   $7 = 4;
   while (1) {
    $11 = $7 + HEAP32[$0 + 16 >> 2] | 0;
    $8 = HEAPF32[$11 + -4 >> 2];
    $9 = HEAPF32[$11 >> 2];
    $12 = HEAPF32[$11 + 4 >> 2];
    $13 = Math_fround(Math_fround(Math_fround(Math_fround($8 * HEAPF32[$1 >> 2]) + Math_fround($9 * HEAPF32[$1 + 4 >> 2])) + Math_fround($12 * HEAPF32[$1 + 8 >> 2])) + HEAPF32[$1 + 48 >> 2]);
    $14 = Math_fround(Math_fround(Math_fround(Math_fround($8 * HEAPF32[$1 + 16 >> 2]) + Math_fround($9 * HEAPF32[$1 + 20 >> 2])) + Math_fround($12 * HEAPF32[$1 + 24 >> 2])) + HEAPF32[$1 + 52 >> 2]);
    $9 = Math_fround(Math_fround(Math_fround(Math_fround($8 * HEAPF32[$1 + 32 >> 2]) + Math_fround($9 * HEAPF32[$1 + 36 >> 2])) + Math_fround($12 * HEAPF32[$1 + 40 >> 2])) + HEAPF32[$1 + 56 >> 2]);
    $8 = Math_fround(Math_fround(Math_fround($13 * HEAPF32[$2 >> 2]) + Math_fround($14 * HEAPF32[$2 + 4 >> 2])) + Math_fround($9 * HEAPF32[$2 + 8 >> 2]));
    if (!!($8 < HEAPF32[$3 >> 2])) {
     HEAPF32[$3 >> 2] = $8;
     HEAP32[$5 + 12 >> 2] = 0;
     HEAPF32[$5 + 8 >> 2] = $9;
     HEAPF32[$5 + 4 >> 2] = $14;
     HEAPF32[$5 >> 2] = $13;
    }
    if (!!($8 > HEAPF32[$4 >> 2])) {
     HEAPF32[$4 >> 2] = $8;
     HEAP32[$6 + 12 >> 2] = 0;
     HEAPF32[$6 + 8 >> 2] = $9;
     HEAPF32[$6 + 4 >> 2] = $14;
     HEAPF32[$6 >> 2] = $13;
    }
    $7 = $7 + 16 | 0;
    $10 = $10 + -1 | 0;
    if ($10) {
     continue
    }
    break;
   };
   $7 = HEAP32[$4 >> 2];
  }
  $9 = HEAPF32[$3 >> 2];
  if ($9 > $8) {
   HEAP32[$3 >> 2] = $7;
   HEAPF32[$4 >> 2] = $9;
   $1 = $5 + 8 | 0;
   $4 = HEAP32[$1 >> 2];
   $3 = HEAP32[$1 + 4 >> 2];
   $2 = $6 + 8 | 0;
   $7 = HEAP32[$2 >> 2];
   $0 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 >> 2] = $7;
   HEAP32[$1 + 4 >> 2] = $0;
   $7 = HEAP32[$5 >> 2];
   $1 = HEAP32[$5 + 4 >> 2];
   $0 = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 4 >> 2] = $0;
   HEAP32[$6 >> 2] = $7;
   HEAP32[$6 + 4 >> 2] = $1;
   HEAP32[$2 >> 2] = $4;
   HEAP32[$2 + 4 >> 2] = $3;
  }
 }
 
 function btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
  $17 = HEAP32[$0 + 16 >> 2];
  $15 = HEAP32[$1 + 16 >> 2];
  if (($17 | 0) != ($15 | 0)) {
   return $17 - $15 | 0
  }
  if (!$17) {
   return 0
  }
  $15 = -1;
  $3 = $1;
  $12 = HEAP32[$3 + 8 >> 2];
  $4 = $12;
  $7 = HEAP32[$3 + 12 >> 2];
  $3 = $4;
  $5 = 32;
  $2 = $5 & 31;
  if (32 <= ($5 & 63) >>> 0) {
   $4 = 0;
   $8 = $7 >>> $2;
  } else {
   $4 = $7 >>> $2;
   $8 = ((1 << $2) - 1 & $7) << 32 - $2 | $3 >>> $2;
  }
  $5 = $8;
  $11 = $4;
  $7 = $0;
  $9 = HEAP32[$7 >> 2];
  $4 = $9;
  $3 = HEAP32[$7 + 4 >> 2];
  $10 = $3;
  $18 = $4;
  $16 = __wasm_i64_mul($5, $11, $4, 0);
  $3 = $16;
  $4 = i64toi32_i32$HIGH_BITS;
  $5 = 32;
  $2 = $5 & 31;
  if (32 <= ($5 & 63) >>> 0) {
   $7 = 0;
   $13 = $4 >>> $2;
  } else {
   $7 = $4 >>> $2;
   $13 = ((1 << $2) - 1 & $4) << 32 - $2 | $3 >>> $2;
  }
  $6 = $7;
  $7 = $10;
  $4 = $9;
  $2 = 0;
  if (32 <= ($5 & 63) >>> 0) {
   $3 = 0;
   $9 = $7 >>> $2;
  } else {
   $3 = $7 >>> $2;
   $9 = ((1 << $2) - 1 & $7) << 32 - $2 | $4 >>> $2;
  }
  $10 = $3;
  $5 = __wasm_i64_mul($8, $11, $9, $3);
  $6 = $6 + i64toi32_i32$HIGH_BITS | 0;
  $2 = $5 + $13 | 0;
  if ($2 >>> 0 < $5 >>> 0) {
   $6 = $6 + 1 | 0
  }
  $13 = $2;
  $2 = $6;
  $14 = 0;
  $8 = __wasm_i64_mul($12, $14, $9, $10);
  $3 = $8;
  $7 = i64toi32_i32$HIGH_BITS;
  $6 = $3;
  $5 = 32;
  $4 = $5 & 31;
  if (32 <= ($5 & 63) >>> 0) {
   $3 = 0;
   $5 = $7 >>> $4;
  } else {
   $3 = $7 >>> $4;
   $5 = ((1 << $4) - 1 & $7) << 32 - $4 | $6 >>> $4;
  }
  $2 = $2 + $3 | 0;
  $4 = $5 + $13 | 0;
  if ($4 >>> 0 < $5 >>> 0) {
   $2 = $2 + 1 | 0
  }
  $13 = $4;
  $10 = $2;
  $4 = 0;
  $5 = $8;
  $6 = $5 + $16 | 0;
  if ($6 >>> 0 < $5 >>> 0) {
   $4 = $4 + 1 | 0
  }
  $8 = $6;
  $3 = $6;
  $11 = $4;
  $5 = 32;
  $2 = $5 & 31;
  if (32 <= ($5 & 63) >>> 0) {
   $7 = 0;
   $5 = $4 >>> $2;
  } else {
   $7 = $4 >>> $2;
   $5 = ((1 << $2) - 1 & $4) << 32 - $2 | $3 >>> $2;
  }
  $6 = $7 + $10 | 0;
  $2 = $5 + $13 | 0;
  if ($2 >>> 0 < $5 >>> 0) {
   $6 = $6 + 1 | 0
  }
  $9 = $2;
  $10 = $6;
  $6 = $11;
  $7 = $8;
  $5 = 32;
  $3 = $5 & 31;
  if (32 <= ($5 & 63) >>> 0) {
   $4 = $7 << $3;
   $8 = 0;
  } else {
   $4 = (1 << $3) - 1 & $7 >>> 32 - $3 | $6 << $3;
   $8 = $7 << $3;
  }
  $6 = $8;
  $5 = __wasm_i64_mul($12, $14, $18, $20);
  $11 = $4;
  $2 = $4 + i64toi32_i32$HIGH_BITS | 0;
  $3 = $6 + $5 | 0;
  if ($3 >>> 0 < $5 >>> 0) {
   $2 = $2 + 1 | 0
  }
  $19 = $3;
  $13 = $2;
  $6 = $11;
  $6 = ($2 | 0) == ($6 | 0) & $3 >>> 0 < $8 >>> 0 | $2 >>> 0 < $6 >>> 0;
  $3 = $10;
  $7 = $6 + $9 | 0;
  if ($7 >>> 0 < $6 >>> 0) {
   $3 = $3 + 1 | 0
  }
  $21 = $7;
  $22 = $7;
  $23 = $3;
  $24 = $3;
  $4 = $1;
  $12 = HEAP32[$4 >> 2];
  $1 = $12;
  $5 = HEAP32[$4 + 4 >> 2];
  $4 = $1;
  $6 = 32;
  $2 = $6 & 31;
  if (32 <= ($6 & 63) >>> 0) {
   $3 = 0;
   $8 = $5 >>> $2;
  } else {
   $3 = $5 >>> $2;
   $8 = ((1 << $2) - 1 & $5) << 32 - $2 | $4 >>> $2;
  }
  $5 = $0;
  $9 = HEAP32[$5 + 8 >> 2];
  $11 = $3;
  $4 = HEAP32[$5 + 12 >> 2];
  $10 = $4;
  $18 = $9;
  $16 = __wasm_i64_mul($8, $3, $9, 0);
  $0 = $16;
  $3 = i64toi32_i32$HIGH_BITS;
  $4 = $0;
  $2 = 0;
  if (32 <= ($6 & 63) >>> 0) {
   $5 = 0;
   $1 = $3 >>> $2;
  } else {
   $5 = $3 >>> $2;
   $1 = ((1 << $2) - 1 & $3) << 32 - $2 | $4 >>> $2;
  }
  $0 = $5;
  $5 = $10;
  $3 = $9;
  $2 = 0;
  if (32 <= ($6 & 63) >>> 0) {
   $4 = 0;
   $9 = $5 >>> $2;
  } else {
   $4 = $5 >>> $2;
   $9 = ((1 << $2) - 1 & $5) << 32 - $2 | $3 >>> $2;
  }
  $10 = $4;
  $6 = __wasm_i64_mul($8, $11, $9, $4);
  $7 = i64toi32_i32$HIGH_BITS + $0 | 0;
  $2 = $1 + $6 | 0;
  if ($2 >>> 0 < $6 >>> 0) {
   $7 = $7 + 1 | 0
  }
  $1 = $2;
  $0 = $7;
  $14 = 0;
  $8 = __wasm_i64_mul($12, $14, $9, $10);
  $3 = $8;
  $5 = i64toi32_i32$HIGH_BITS;
  $7 = $3;
  $6 = 32;
  $3 = $6 & 31;
  if (32 <= ($6 & 63) >>> 0) {
   $4 = 0;
   $6 = $5 >>> $3;
  } else {
   $4 = $5 >>> $3;
   $6 = ((1 << $3) - 1 & $5) << 32 - $3 | $7 >>> $3;
  }
  $2 = $0 + $4 | 0;
  $3 = $1 + $6 | 0;
  if ($3 >>> 0 < $6 >>> 0) {
   $2 = $2 + 1 | 0
  }
  $1 = $3;
  $0 = $2;
  $3 = 0;
  $6 = $8;
  $7 = $6 + $16 | 0;
  if ($7 >>> 0 < $6 >>> 0) {
   $3 = $3 + 1 | 0
  }
  $8 = $7;
  $4 = $7;
  $11 = $3;
  $6 = 32;
  $2 = $6 & 31;
  if (32 <= ($6 & 63) >>> 0) {
   $5 = 0;
   $6 = $3 >>> $2;
  } else {
   $5 = $3 >>> $2;
   $6 = ((1 << $2) - 1 & $3) << 32 - $2 | $4 >>> $2;
  }
  $7 = $0 + $5 | 0;
  $2 = $1 + $6 | 0;
  if ($2 >>> 0 < $6 >>> 0) {
   $7 = $7 + 1 | 0
  }
  $1 = $2;
  $0 = $7;
  $7 = $11;
  $5 = $8;
  $6 = 32;
  $4 = $6 & 31;
  if (32 <= ($6 & 63) >>> 0) {
   $3 = $5 << $4;
   $8 = 0;
  } else {
   $3 = (1 << $4) - 1 & $5 >>> 32 - $4 | $7 << $4;
   $8 = $5 << $4;
  }
  $7 = $8;
  $6 = __wasm_i64_mul($12, $14, $18, $20);
  $11 = $3;
  $2 = $3 + i64toi32_i32$HIGH_BITS | 0;
  $4 = $7 + $6 | 0;
  if ($4 >>> 0 < $6 >>> 0) {
   $2 = $2 + 1 | 0
  }
  $9 = $4;
  $3 = $4;
  $7 = $11;
  $10 = $2;
  $7 = ($7 | 0) == ($2 | 0) & $3 >>> 0 < $8 >>> 0 | $2 >>> 0 < $7 >>> 0;
  $4 = $0;
  $5 = $1 + $7 | 0;
  if ($5 >>> 0 < $7 >>> 0) {
   $4 = $4 + 1 | 0
  }
  $12 = $5;
  $14 = $4;
  $4 = $24;
  $6 = $14;
  label$3 : {
   if (($4 | 0) == ($6 | 0) & $22 >>> 0 < $5 >>> 0 | $4 >>> 0 < $6 >>> 0) {
    break label$3
   }
   $15 = 1;
   $4 = $14;
   $3 = $23;
   if (($4 | 0) == ($3 | 0) & $21 >>> 0 > $12 >>> 0 | $3 >>> 0 > $4 >>> 0) {
    break label$3
   }
   $15 = -1;
   $7 = $13;
   $3 = $10;
   if (($7 | 0) == ($3 | 0) & $19 >>> 0 < $9 >>> 0 | $7 >>> 0 < $3 >>> 0) {
    break label$3
   }
   $7 = $10;
   $6 = $13;
   $15 = ($7 | 0) == ($6 | 0) & $19 >>> 0 > $9 >>> 0 | $6 >>> 0 > $7 >>> 0;
  }
  return Math_imul($15, $17);
 }
 
 function btConvexHullInternal__newEdgePair_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = HEAP32[$0 + 56 >> 2];
  label$1 : {
   if ($6) {
    break label$1
   }
   $3 = HEAP32[$0 + 52 >> 2];
   label$2 : {
    if ($3) {
     HEAP32[$0 + 52 >> 2] = HEAP32[$3 + 8 >> 2];
     break label$2;
    }
    $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(12);
    HEAP32[$3 + 8 >> 2] = 0;
    $4 = HEAP32[$0 + 60 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    (wasm2js_i32$0 = $3, wasm2js_i32$1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($4, 24))), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $4 = HEAP32[$0 + 48 >> 2];
    HEAP32[$0 + 48 >> 2] = $3;
    HEAP32[$3 + 8 >> 2] = $4;
   }
   $6 = HEAP32[$3 >> 2];
   $7 = HEAP32[$3 + 4 >> 2];
   if (($7 | 0) < 1) {
    break label$1
   }
   $3 = 0;
   $4 = $6;
   while (1) {
    $5 = $4;
    $4 = $4 + 24 | 0;
    $3 = $3 + 1 | 0;
    HEAP32[$5 >> 2] = ($3 | 0) < ($7 | 0) ? $4 : 0;
    if (($3 | 0) != ($7 | 0)) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 56 >> 2] = HEAP32[$6 >> 2];
  $5 = $6 + 8 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $6 + 16 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  $5 = HEAP32[$0 + 56 >> 2];
  label$5 : {
   if ($5) {
    break label$5
   }
   $3 = HEAP32[$0 + 52 >> 2];
   label$6 : {
    if ($3) {
     HEAP32[$0 + 52 >> 2] = HEAP32[$3 + 8 >> 2];
     break label$6;
    }
    $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(12);
    HEAP32[$3 + 8 >> 2] = 0;
    $4 = HEAP32[$0 + 60 >> 2];
    HEAP32[$3 + 4 >> 2] = $4;
    (wasm2js_i32$0 = $3, wasm2js_i32$1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($4, 24))), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $4 = HEAP32[$0 + 48 >> 2];
    HEAP32[$0 + 48 >> 2] = $3;
    HEAP32[$3 + 8 >> 2] = $4;
   }
   $5 = HEAP32[$3 >> 2];
   $7 = HEAP32[$3 + 4 >> 2];
   if (($7 | 0) < 1) {
    break label$5
   }
   $3 = 0;
   $4 = $5;
   while (1) {
    $8 = $4;
    $4 = $4 + 24 | 0;
    $3 = $3 + 1 | 0;
    HEAP32[$8 >> 2] = ($3 | 0) < ($7 | 0) ? $4 : 0;
    if (($3 | 0) != ($7 | 0)) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 56 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$6 + 8 >> 2] = $5;
  HEAP32[$6 + 12 >> 2] = $2;
  HEAP32[$6 + 16 >> 2] = 0;
  $3 = HEAP32[$0 + 100 >> 2];
  HEAP32[$6 + 20 >> 2] = $3;
  HEAP32[$5 + 8 >> 2] = $6;
  HEAP32[$5 + 12 >> 2] = $1;
  HEAP32[$5 + 16 >> 2] = 0;
  HEAP32[$5 + 20 >> 2] = $3;
  $3 = HEAP32[$0 + 116 >> 2];
  $4 = $3 + 1 | 0;
  HEAP32[$0 + 116 >> 2] = $4;
  if (($3 | 0) >= HEAP32[$0 + 120 >> 2]) {
   HEAP32[$0 + 120 >> 2] = $4
  }
  return $6;
 }
 
 function btConvexHullInternal__mergeProjection_28btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__Vertex___2c_20btConvexHullInternal__Vertex___29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
  $7 = HEAP32[$0 + 12 >> 2];
  $11 = HEAP32[$1 + 8 >> 2];
  label$1 : {
   label$2 : {
    if (HEAP32[$7 + 88 >> 2] != HEAP32[$11 + 88 >> 2]) {
     break label$2
    }
    if (HEAP32[$7 + 92 >> 2] != HEAP32[$11 + 92 >> 2]) {
     break label$2
    }
    $5 = HEAP32[$11 + 4 >> 2];
    if (($5 | 0) == ($11 | 0)) {
     HEAP32[$2 >> 2] = $7;
     $5 = HEAP32[$11 + 8 >> 2];
     $7 = 0;
     if (!$5) {
      break label$1
     }
     HEAP32[$3 >> 2] = HEAP32[$5 + 12 >> 2];
     return 0;
    }
    $7 = HEAP32[$11 >> 2];
    HEAP32[$7 + 4 >> 2] = $5;
    HEAP32[$5 >> 2] = $7;
    if (($11 | 0) == HEAP32[$1 >> 2]) {
     $9 = $1;
     $4 = HEAP32[$7 + 88 >> 2];
     $6 = HEAP32[$5 + 88 >> 2];
     $8 = $7;
     label$5 : {
      if (($4 | 0) < ($6 | 0)) {
       break label$5
      }
      if (($4 | 0) == ($6 | 0)) {
       $8 = $7;
       if (HEAP32[$7 + 92 >> 2] < HEAP32[$5 + 92 >> 2]) {
        break label$5
       }
      }
      $8 = $5;
     }
     HEAP32[$9 >> 2] = $8;
    }
    if (HEAP32[$1 + 4 >> 2] != ($11 | 0)) {
     break label$2
    }
    label$7 : {
     $12 = HEAP32[$7 + 88 >> 2];
     $4 = HEAP32[$5 + 88 >> 2];
     if (($12 | 0) <= ($4 | 0)) {
      if (($4 | 0) != ($12 | 0)) {
       break label$7
      }
      if (HEAP32[$7 + 92 >> 2] <= HEAP32[$5 + 92 >> 2]) {
       break label$7
      }
     }
     HEAP32[$1 + 4 >> 2] = $7;
     break label$2;
    }
    HEAP32[$1 + 4 >> 2] = $5;
   }
   $18 = HEAP32[$1 >> 2];
   $20 = HEAP32[$0 >> 2];
   $21 = HEAP32[$0 + 4 >> 2];
   $6 = $21;
   $19 = HEAP32[$1 + 4 >> 2];
   $5 = $19;
   $11 = 0;
   $12 = 1;
   while (1) {
    $13 = HEAP32[$6 + 88 >> 2];
    $4 = Math_imul($12, HEAP32[$5 + 88 >> 2] - $13 | 0);
    label$10 : {
     if (($4 | 0) >= 1) {
      $7 = $6;
      while (1) {
       $8 = $5;
       $16 = HEAP32[$5 + 92 >> 2];
       $13 = $4;
       while (1) {
        label$13 : {
         $4 = HEAP32[$7 + 92 >> 2];
         $9 = $16 - $4 | 0;
         $15 = !$14 << 2;
         $5 = HEAP32[$15 + $7 >> 2];
         if (($7 | 0) == ($5 | 0)) {
          break label$13
         }
         $10 = HEAP32[$5 + 92 >> 2] - $4 | 0;
         if (($10 | 0) > 0) {
          break label$13
         }
         $6 = HEAP32[$5 + 88 >> 2];
         $4 = Math_imul($12, $6 - HEAP32[$7 + 88 >> 2] | 0);
         if ($4) {
          if (($4 | 0) > -1) {
           break label$13
          }
          if ((Math_imul($10, $13) | 0) > (Math_imul($4, $9) | 0)) {
           break label$13
          }
         }
         $13 = Math_imul($12, HEAP32[$8 + 88 >> 2] - $6 | 0);
         $7 = $5;
         continue;
        }
        break;
       };
       $5 = HEAP32[$8 + $15 >> 2];
       if (($8 | 0) == ($5 | 0)) {
        break label$10
       }
       $10 = HEAP32[$5 + 92 >> 2] - $16 | 0;
       if (($10 | 0) > -1) {
        break label$10
       }
       $6 = HEAP32[$5 + 88 >> 2];
       $4 = Math_imul($12, $6 - HEAP32[$7 + 88 >> 2] | 0);
       if (($4 | 0) < 1) {
        break label$10
       }
       $6 = Math_imul($12, $6 - HEAP32[$8 + 88 >> 2] | 0);
       if (!$6) {
        continue
       }
       if (($6 | 0) > -1) {
        break label$10
       }
       if ((Math_imul($10, $13) | 0) < (Math_imul($6, $9) | 0)) {
        continue
       }
       break;
      };
      break label$10;
     }
     if (($4 | 0) <= -1) {
      label$17 : while (1) {
       $10 = HEAP32[$5 + 92 >> 2];
       $22 = (($14 | 0) != 0) << 2;
       $13 = HEAP32[$22 + $5 >> 2];
       while (1) {
        $8 = $4;
        $7 = $6;
        $4 = HEAP32[$7 + 92 >> 2];
        $16 = $10 - $4 | 0;
        label$19 : {
         if (($5 | 0) == ($13 | 0)) {
          break label$19
         }
         $9 = HEAP32[$13 + 92 >> 2] - $10 | 0;
         if (($9 | 0) < 0) {
          break label$19
         }
         $15 = HEAP32[$13 + 88 >> 2];
         $6 = Math_imul($12, $15 - HEAP32[$5 + 88 >> 2] | 0);
         if ($6) {
          if (($6 | 0) > -1) {
           break label$19
          }
          if ((Math_imul($8, $9) | 0) > (Math_imul($6, $16) | 0)) {
           break label$19
          }
         }
         $4 = Math_imul($12, $15 - HEAP32[$7 + 88 >> 2] | 0);
         $5 = $13;
         $6 = $7;
         continue label$17;
        }
        $6 = HEAP32[$7 + $22 >> 2];
        if (($6 | 0) == ($7 | 0)) {
         $8 = $5;
         break label$10;
        }
        $15 = HEAP32[$6 + 92 >> 2] - $4 | 0;
        if (($15 | 0) < 1) {
         $8 = $5;
         break label$10;
        }
        $9 = HEAP32[$6 + 88 >> 2];
        $4 = Math_imul($12, HEAP32[$5 + 88 >> 2] - $9 | 0);
        if (($4 | 0) > -1) {
         $8 = $5;
         break label$10;
        }
        $9 = Math_imul($12, $9 - HEAP32[$7 + 88 >> 2] | 0);
        if (!$9) {
         continue
        }
        if (($9 | 0) > -1) {
         $8 = $5;
         break label$10;
        }
        if ((Math_imul($8, $15) | 0) < (Math_imul($9, $16) | 0)) {
         continue
        }
        break;
       };
       break;
      };
      $8 = $5;
      break label$10;
     }
     $9 = HEAP32[$6 + 92 >> 2];
     label$25 : {
      if (!$14) {
       $4 = $6;
       while (1) {
        $7 = $4;
        $4 = HEAP32[$4 + 4 >> 2];
        if (($6 | 0) == ($4 | 0)) {
         break label$25
        }
        if (($13 | 0) != HEAP32[$4 + 88 >> 2]) {
         break label$25
        }
        $10 = HEAP32[$4 + 92 >> 2];
        $8 = ($10 | 0) <= ($9 | 0);
        $9 = $10;
        if ($8) {
         continue
        }
        break;
       };
       break label$25;
      }
      $4 = $6;
      while (1) {
       $7 = $4;
       $4 = HEAP32[$4 >> 2];
       if (($6 | 0) == ($4 | 0)) {
        break label$25
       }
       if (($13 | 0) != HEAP32[$4 + 88 >> 2]) {
        break label$25
       }
       $10 = HEAP32[$4 + 92 >> 2];
       $8 = ($10 | 0) > ($9 | 0);
       $9 = $10;
       if (!$8) {
        continue
       }
       break;
      };
     }
     $6 = HEAP32[$5 + 92 >> 2];
     if (!$14) {
      $4 = $5;
      while (1) {
       $8 = $4;
       $4 = HEAP32[$4 >> 2];
       if (($5 | 0) == ($4 | 0)) {
        break label$10
       }
       if (($13 | 0) != HEAP32[$4 + 88 >> 2]) {
        break label$10
       }
       $9 = HEAP32[$4 + 92 >> 2];
       $10 = ($9 | 0) >= ($6 | 0);
       $6 = $9;
       if ($10) {
        continue
       }
       break;
      };
      break label$10;
     }
     $4 = $5;
     while (1) {
      $8 = $4;
      $4 = HEAP32[$4 + 4 >> 2];
      if (($5 | 0) == ($4 | 0)) {
       break label$10
      }
      if (($13 | 0) != HEAP32[$4 + 88 >> 2]) {
       break label$10
      }
      $9 = HEAP32[$4 + 92 >> 2];
      $10 = ($9 | 0) < ($6 | 0);
      $6 = $9;
      if (!$10) {
       continue
      }
      break;
     };
    }
    $6 = $14 ? $7 : $20;
    $5 = $14 ? $8 : $18;
    $17 = $14 ? $17 : $7;
    $11 = $14 ? $11 : $8;
    $12 = $14 ? $12 : -1;
    $14 = $14 + 1 | 0;
    if (($14 | 0) != 2) {
     continue
    }
    break;
   };
   HEAP32[$5 >> 2] = $6;
   HEAP32[$6 + 4 >> 2] = $5;
   HEAP32[$17 >> 2] = $11;
   HEAP32[$11 + 4 >> 2] = $17;
   if (HEAP32[$18 + 88 >> 2] < HEAP32[$20 + 88 >> 2]) {
    HEAP32[$0 >> 2] = $18
   }
   if (HEAP32[$19 + 88 >> 2] >= HEAP32[$21 + 88 >> 2]) {
    HEAP32[$0 + 4 >> 2] = $19
   }
   HEAP32[$0 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
   HEAP32[$2 >> 2] = $17;
   $7 = 1;
  }
  HEAP32[$3 >> 2] = $11;
  return $7;
 }
 
 function btConvexHullInternal__computeInternal_28int_2c_20int_2c_20btConvexHullInternal__IntermediateHull__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $7 = global$0 - 16 | 0;
  global$0 = $7;
  $4 = $2 - $1 | 0;
  label$1 : {
   if ($4 >>> 0 <= 2) {
    label$3 : {
     switch ($4 - 1 | 0) {
     default:
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $1 = $3 + 8 | 0;
      HEAP32[$1 >> 2] = 0;
      HEAP32[$1 + 4 >> 2] = 0;
      break label$1;
     case 1:
      $2 = HEAP32[HEAP32[$0 + 92 >> 2] + ($1 << 2) >> 2];
      $4 = HEAP32[$2 + 204 >> 2];
      $5 = HEAP32[$2 + 92 >> 2];
      label$6 : {
       $6 = HEAP32[$2 + 88 >> 2];
       $8 = HEAP32[$2 + 200 >> 2];
       label$7 : {
        if (($6 | 0) != ($8 | 0)) {
         break label$7
        }
        if (($4 | 0) != ($5 | 0)) {
         break label$7
        }
        $4 = $5;
        if (HEAP32[$2 + 96 >> 2] == HEAP32[$2 + 208 >> 2]) {
         break label$6
        }
       }
       $1 = $2 + 112 | 0;
       $5 = $5 - $4 | 0;
       $4 = $6 - $8 | 0;
       label$8 : {
        if (!($5 | $4)) {
         $5 = HEAP32[$2 + 96 >> 2] > HEAP32[$2 + 208 >> 2];
         $4 = $5 ? $1 : $2;
         HEAP32[$3 + 8 >> 2] = $4;
         HEAP32[$3 + 4 >> 2] = $4;
         HEAP32[$3 >> 2] = $4;
         HEAP32[$4 + 4 >> 2] = $4;
         HEAP32[$4 >> 2] = $4;
         $1 = $5 ? $2 : $1;
         $2 = $4;
         break label$8;
        }
        HEAP32[$2 + 4 >> 2] = $1;
        HEAP32[$2 >> 2] = $1;
        HEAP32[$2 + 116 >> 2] = $2;
        HEAP32[$2 + 112 >> 2] = $2;
        $8 = ($4 | 0) < 0;
        $6 = !$4;
        $4 = ($5 | 0) < 0;
        $6 = $8 | $6 & $4;
        HEAP32[$3 + 4 >> 2] = $6 ? $1 : $2;
        HEAP32[$3 >> 2] = $6 ? $2 : $1;
        if (!(!$5 & $8 ? 0 : !$4)) {
         HEAP32[$3 + 8 >> 2] = $2;
         $4 = $1;
         break label$8;
        }
        HEAP32[$3 + 8 >> 2] = $1;
        $4 = $2;
       }
       HEAP32[$3 + 12 >> 2] = $4;
       $3 = btConvexHullInternal__newEdgePair_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $2, $1);
       HEAP32[$2 + 8 >> 2] = $3;
       $2 = HEAP32[$3 + 8 >> 2];
       HEAP32[$1 + 8 >> 2] = $2;
       HEAP32[$3 + 4 >> 2] = $3;
       HEAP32[$3 >> 2] = $3;
       HEAP32[$2 + 4 >> 2] = $2;
       HEAP32[$2 >> 2] = $2;
       break label$1;
      }
      HEAP32[$2 + 8 >> 2] = 0;
      HEAP32[$3 + 12 >> 2] = $2;
      HEAP32[$3 + 8 >> 2] = $2;
      HEAP32[$3 + 4 >> 2] = $2;
      HEAP32[$3 >> 2] = $2;
      HEAP32[$2 + 4 >> 2] = $2;
      HEAP32[$2 >> 2] = $2;
      break label$1;
     case 0:
      break label$3;
     };
    }
    $2 = HEAP32[HEAP32[$0 + 92 >> 2] + ($1 << 2) >> 2];
    HEAP32[$2 + 8 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = $2;
    HEAP32[$3 + 8 >> 2] = $2;
    HEAP32[$3 + 4 >> 2] = $2;
    HEAP32[$3 >> 2] = $2;
    HEAP32[$2 + 4 >> 2] = $2;
    HEAP32[$2 >> 2] = $2;
    break label$1;
   }
   $4 = ($4 | 0) / 2 | 0;
   $9 = $1 + $4 | 0;
   $6 = $9;
   label$12 : {
    if (($6 | 0) >= ($2 | 0)) {
     break label$12
    }
    $6 = HEAP32[$0 + 92 >> 2];
    $5 = HEAP32[($6 + ($9 << 2) | 0) + -4 >> 2];
    $8 = HEAP32[$5 + 88 >> 2];
    $10 = HEAP32[$5 + 96 >> 2];
    $11 = HEAP32[$5 + 92 >> 2];
    $4 = ($1 + $4 << 2) + $6 | 0;
    $6 = $9;
    while (1) {
     $5 = HEAP32[$4 >> 2];
     if (($8 | 0) != HEAP32[$5 + 88 >> 2]) {
      break label$12
     }
     if (($11 | 0) != HEAP32[$5 + 92 >> 2]) {
      break label$12
     }
     if (($10 | 0) != HEAP32[$5 + 96 >> 2]) {
      break label$12
     }
     $4 = $4 + 4 | 0;
     $6 = $6 + 1 | 0;
     if (($6 | 0) != ($2 | 0)) {
      continue
     }
     break;
    };
    $6 = $2;
   }
   btConvexHullInternal__computeInternal_28int_2c_20int_2c_20btConvexHullInternal__IntermediateHull__29($0, $1, $9, $3);
   $1 = $7 + 8 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$7 >> 2] = 0;
   HEAP32[$7 + 4 >> 2] = 0;
   btConvexHullInternal__computeInternal_28int_2c_20int_2c_20btConvexHullInternal__IntermediateHull__29($0, $6, $2, $7);
   btConvexHullInternal__merge_28btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__IntermediateHull__29($0, $3, $7);
  }
  global$0 = $7 + 16 | 0;
 }
 
 function btConvexHullInternal__merge_28btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__IntermediateHull__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
  $4 = global$0 - 128 | 0;
  global$0 = $4;
  label$1 : {
   if (!HEAP32[$2 + 4 >> 2]) {
    break label$1
   }
   if (!HEAP32[$1 + 4 >> 2]) {
    $5 = HEAP32[$2 + 4 >> 2];
    HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$1 + 4 >> 2] = $5;
    $8 = $2 + 8 | 0;
    $0 = HEAP32[$8 >> 2];
    $3 = HEAP32[$8 + 4 >> 2];
    $5 = $1 + 8 | 0;
    HEAP32[$5 >> 2] = $0;
    HEAP32[$5 + 4 >> 2] = $3;
    break label$1;
   }
   HEAP32[$0 + 100 >> 2] = HEAP32[$0 + 100 >> 2] + -1;
   HEAP32[$4 + 124 >> 2] = 0;
   HEAP32[$4 + 120 >> 2] = 0;
   $2 = btConvexHullInternal__mergeProjection_28btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__IntermediateHull__2c_20btConvexHullInternal__Vertex___2c_20btConvexHullInternal__Vertex___29($1, $2, $4 + 124 | 0, $4 + 120 | 0);
   $20 = HEAP32[$4 + 120 >> 2];
   label$3 : {
    if ($2) {
     $26 = HEAP32[$4 + 124 >> 2];
     $18 = HEAP32[$26 + 96 >> 2];
     $23 = HEAP32[$20 + 96 >> 2];
     $9 = HEAP32[$26 + 92 >> 2];
     $17 = HEAP32[$20 + 92 >> 2];
     $11 = HEAP32[$26 + 8 >> 2];
     $14 = HEAP32[$26 + 88 >> 2];
     $22 = HEAP32[$20 + 88 >> 2];
     HEAP32[$4 + 80 >> 2] = 0;
     $5 = $23 - $18 | 0;
     $3 = $5 >> 31;
     $16 = $5;
     $27 = $3;
     $5 = $17 - $9 | 0;
     $3 = $5 >> 31;
     $28 = $5;
     $29 = $3;
     $31 = __wasm_i64_mul($16, $27, $5, $3);
     $34 = i64toi32_i32$HIGH_BITS;
     $2 = $22 - $14 | 0;
     $5 = 0 - $2 | 0;
     $3 = $5 >> 31;
     $32 = $5;
     $30 = $3;
     $8 = __wasm_i64_mul($5, $3, $2, $2 >> 31);
     $1 = i64toi32_i32$HIGH_BITS;
     $3 = $29;
     $6 = __wasm_i64_mul($28, $3, $28, $3);
     $36 = $8 - $6 | 0;
     $35 = $1 - (i64toi32_i32$HIGH_BITS + ($8 >>> 0 < $6 >>> 0) | 0) | 0;
     $3 = 0;
     $6 = __wasm_i64_mul($5, $30, $16, $27);
     $19 = $3 - $6 | 0;
     $24 = 0 - (i64toi32_i32$HIGH_BITS + ($3 >>> 0 < $6 >>> 0) | 0) | 0;
     if ($11) {
      $2 = $11;
      while (1) {
       $1 = HEAP32[$2 + 12 >> 2];
       $15 = HEAP32[$1 + 92 >> 2];
       $3 = $15 - $9 | 0;
       $10 = $3 >> 31;
       $16 = $3;
       $27 = $10;
       $8 = __wasm_i64_mul($3, $10, $32, $30);
       $5 = i64toi32_i32$HIGH_BITS;
       $21 = HEAP32[$1 + 88 >> 2];
       $3 = $21 - $14 | 0;
       $10 = $3 >> 31;
       $13 = $3;
       $3 = $10;
       $6 = __wasm_i64_mul($28, $29, $13, $3);
       $7 = 0;
       label$7 : {
        if (($8 | 0) != ($7 - $6 | 0) | (0 - (i64toi32_i32$HIGH_BITS + ($7 >>> 0 < $6 >>> 0) | 0) | 0) != ($5 | 0)) {
         break label$7
        }
        $6 = __wasm_i64_mul($31, $34, $16, $27);
        $10 = i64toi32_i32$HIGH_BITS;
        $7 = __wasm_i64_mul($13, $3, $19, $24);
        $8 = $10 + i64toi32_i32$HIGH_BITS | 0;
        $3 = $6 + $7 | 0;
        if ($3 >>> 0 < $7 >>> 0) {
         $8 = $8 + 1 | 0
        }
        $10 = $3;
        $3 = $8;
        $1 = HEAP32[$1 + 96 >> 2];
        $6 = $1 - $18 | 0;
        $8 = $6 >> 31;
        $7 = __wasm_i64_mul($36, $35, $6, $8);
        $3 = i64toi32_i32$HIGH_BITS + $3 | 0;
        $5 = $7 + $10 | 0;
        if ($5 >>> 0 < $7 >>> 0) {
         $3 = $3 + 1 | 0
        }
        $8 = $5;
        $7 = 1;
        $10 = 0;
        if (($3 | 0) < ($10 | 0)) {
         $3 = 1
        } else {
         $3 = ($3 | 0) <= ($10 | 0) ? ($8 >>> 0 >= $7 >>> 0 ? 0 : 1) : 0
        }
        if ($3) {
         break label$7
        }
        label$8 : {
         if (!$12) {
          break label$8
         }
         $13 = HEAP32[$12 + 4 >> 2];
         if (HEAP32[$12 >> 2] == ($2 | 0)) {
          if (($2 | 0) != ($13 | 0)) {
           break label$7
          }
          $13 = HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2];
          $6 = HEAP32[$13 + 96 >> 2];
          $16 = $1 - $6 | 0;
          $1 = HEAP32[$12 + 12 >> 2];
          $6 = HEAP32[$1 + 96 >> 2] - $6 | 0;
          $8 = HEAP32[$13 + 92 >> 2];
          $3 = Math_imul(HEAP32[$1 + 92 >> 2] - $8 | 0, $16) - Math_imul($15 - $8 | 0, $6) | 0;
          $8 = $3 >> 31;
          $7 = __wasm_i64_mul($3, $8, $28, $29);
          $5 = i64toi32_i32$HIGH_BITS;
          $15 = HEAP32[$13 + 88 >> 2];
          $3 = Math_imul($21 - $15 | 0, $6) - Math_imul(HEAP32[$1 + 88 >> 2] - $15 | 0, $16) | 0;
          $8 = $3 >> 31;
          $10 = __wasm_i64_mul($3, $8, $32, $30);
          $5 = $5 + i64toi32_i32$HIGH_BITS | 0;
          $6 = $7 + $10 | 0;
          if ($6 >>> 0 < $10 >>> 0) {
           $5 = $5 + 1 | 0
          }
          $8 = $6;
          $10 = 0;
          $7 = 0;
          if (($5 | 0) < ($7 | 0)) {
           $1 = 1
          } else {
           $1 = ($5 | 0) <= ($7 | 0) ? ($8 >>> 0 > $10 >>> 0 ? 0 : 1) : 0
          }
          if ($1) {
           break label$8
          }
          break label$7;
         }
         if (($2 | 0) != ($13 | 0)) {
          break label$7
         }
        }
        $12 = $2;
       }
       $2 = HEAP32[$2 >> 2];
       if (($11 | 0) != ($2 | 0)) {
        continue
       }
       break;
      };
      HEAP32[$4 + 80 >> 2] = $12;
     }
     $11 = HEAP32[$20 + 8 >> 2];
     $15 = 0;
     HEAP32[$4 + 56 >> 2] = 0;
     if ($11) {
      $2 = $11;
      while (1) {
       $1 = HEAP32[$2 + 12 >> 2];
       $9 = HEAP32[$1 + 92 >> 2];
       $5 = $9 - $17 | 0;
       $8 = $5 >> 31;
       $16 = $5;
       $27 = $8;
       $6 = __wasm_i64_mul($5, $8, $32, $30);
       $33 = i64toi32_i32$HIGH_BITS;
       $10 = 0;
       $14 = HEAP32[$1 + 88 >> 2];
       $5 = $14 - $22 | 0;
       $8 = $5 >> 31;
       $13 = $5;
       $3 = $8;
       $7 = __wasm_i64_mul($28, $29, $5, $3);
       label$12 : {
        if (($10 - $7 | 0) != ($6 | 0) | (0 - (i64toi32_i32$HIGH_BITS + ($10 >>> 0 < $7 >>> 0) | 0) | 0) != ($33 | 0)) {
         break label$12
        }
        $7 = __wasm_i64_mul($31, $34, $16, $27);
        $8 = i64toi32_i32$HIGH_BITS;
        $10 = __wasm_i64_mul($13, $3, $19, $24);
        $3 = i64toi32_i32$HIGH_BITS + $8 | 0;
        $5 = $7 + $10 | 0;
        if ($5 >>> 0 < $10 >>> 0) {
         $3 = $3 + 1 | 0
        }
        $6 = $5;
        $8 = $3;
        $1 = HEAP32[$1 + 96 >> 2];
        $7 = $1 - $23 | 0;
        $3 = $7 >> 31;
        $10 = __wasm_i64_mul($36, $35, $7, $3);
        $5 = i64toi32_i32$HIGH_BITS + $8 | 0;
        $6 = $6 + $10 | 0;
        if ($6 >>> 0 < $10 >>> 0) {
         $5 = $5 + 1 | 0
        }
        $3 = $6;
        $10 = 1;
        $8 = 0;
        if (($5 | 0) < ($8 | 0)) {
         $3 = 1
        } else {
         $3 = ($5 | 0) <= ($8 | 0) ? ($3 >>> 0 >= $10 >>> 0 ? 0 : 1) : 0
        }
        if ($3) {
         break label$12
        }
        label$13 : {
         if (!$15) {
          break label$13
         }
         if (($2 | 0) != HEAP32[$15 >> 2]) {
          break label$12
         }
         if (($2 | 0) != HEAP32[$15 + 4 >> 2]) {
          break label$13
         }
         $21 = HEAP32[HEAP32[$2 + 8 >> 2] + 12 >> 2];
         $18 = HEAP32[$21 + 96 >> 2];
         $13 = $1 - $18 | 0;
         $1 = HEAP32[$15 + 12 >> 2];
         $18 = HEAP32[$1 + 96 >> 2] - $18 | 0;
         $6 = HEAP32[$21 + 92 >> 2];
         $5 = Math_imul(HEAP32[$1 + 92 >> 2] - $6 | 0, $13) - Math_imul($9 - $6 | 0, $18) | 0;
         $3 = $5 >> 31;
         $10 = __wasm_i64_mul($5, $3, $28, $29);
         $7 = i64toi32_i32$HIGH_BITS;
         $9 = HEAP32[$21 + 88 >> 2];
         $5 = Math_imul($14 - $9 | 0, $18) - Math_imul(HEAP32[$1 + 88 >> 2] - $9 | 0, $13) | 0;
         $3 = $5 >> 31;
         $8 = __wasm_i64_mul($5, $3, $32, $30);
         $6 = i64toi32_i32$HIGH_BITS + $7 | 0;
         $7 = $8 + $10 | 0;
         if ($7 >>> 0 < $8 >>> 0) {
          $6 = $6 + 1 | 0
         }
         $3 = $7;
         $8 = 1;
         $10 = 0;
         if (($6 | 0) < ($10 | 0)) {
          $1 = 1
         } else {
          $1 = ($6 | 0) <= ($10 | 0) ? ($3 >>> 0 >= $8 >>> 0 ? 0 : 1) : 0
         }
         if ($1) {
          break label$12
         }
        }
        $15 = $2;
       }
       $2 = HEAP32[$2 >> 2];
       if (($11 | 0) != ($2 | 0)) {
        continue
       }
       break;
      };
      HEAP32[$4 + 56 >> 2] = $15;
     }
     label$14 : {
      if (!($12 | $15)) {
       break label$14
      }
      btConvexHullInternal__findEdgeForCoplanarFaces_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $26, $20, $4 + 80 | 0, $4 + 56 | 0);
      $2 = HEAP32[$4 + 80 >> 2];
      if ($2) {
       $26 = HEAP32[$2 + 12 >> 2];
       HEAP32[$4 + 124 >> 2] = $26;
      }
      $2 = HEAP32[$4 + 56 >> 2];
      if (!$2) {
       break label$14
      }
      $20 = HEAP32[$2 + 12 >> 2];
      HEAP32[$4 + 120 >> 2] = $20;
     }
     $37 = HEAP32[$20 + 92 >> 2];
     $38 = HEAP32[$20 + 88 >> 2];
     $31 = HEAP32[$20 + 96 >> 2] + 1 | 0;
     break label$3;
    }
    $38 = HEAP32[$20 + 88 >> 2] + 1 | 0;
    $37 = HEAP32[$20 + 92 >> 2];
    $26 = HEAP32[$4 + 124 >> 2];
    $31 = HEAP32[$20 + 96 >> 2];
   }
   $15 = $26;
   $17 = $20;
   $13 = 0;
   $33 = 0;
   $21 = 0;
   $19 = 0;
   $39 = 1;
   $16 = 0;
   $24 = 0;
   $18 = 0;
   while (1) {
    HEAP32[$4 + 116 >> 2] = -1;
    $40 = $17 + 92 | 0;
    $41 = $15 + 92 | 0;
    $12 = HEAP32[$41 >> 2];
    $2 = HEAP32[$40 >> 2] - $12 | 0;
    HEAP32[$4 + 108 >> 2] = $2;
    $42 = $17 + 96 | 0;
    $43 = $15 + 96 | 0;
    $9 = HEAP32[$43 >> 2];
    $1 = HEAP32[$42 >> 2] - $9 | 0;
    HEAP32[$4 + 112 >> 2] = $1;
    $14 = HEAP32[$15 + 88 >> 2];
    $11 = HEAP32[$17 + 88 >> 2] - $14 | 0;
    HEAP32[$4 + 104 >> 2] = $11;
    $12 = $37 - $12 | 0;
    $9 = $31 - $9 | 0;
    $6 = Math_imul($1, $12) - Math_imul($2, $9) | 0;
    $3 = $6 >> 31;
    $28 = $6;
    HEAP32[$4 + 80 >> 2] = $6;
    $29 = $3;
    HEAP32[$4 + 84 >> 2] = $3;
    $3 = Math_imul($9, $11);
    $9 = $38 - $14 | 0;
    $6 = $3 - Math_imul($1, $9) | 0;
    $3 = $6 >> 31;
    $32 = $6;
    HEAP32[$4 + 88 >> 2] = $6;
    $30 = $3;
    HEAP32[$4 + 92 >> 2] = $3;
    $6 = Math_imul($2, $9) - Math_imul($12, $11) | 0;
    $3 = $6 >> 31;
    HEAP32[$4 + 96 >> 2] = $6;
    $27 = $3;
    HEAP32[$4 + 100 >> 2] = $3;
    $3 = $11 >> 31;
    $8 = __wasm_i64_mul($32, $30, $11, $3);
    $7 = i64toi32_i32$HIGH_BITS;
    $34 = $2 >> 31;
    $10 = __wasm_i64_mul($28, $29, $2, $34);
    HEAP32[$4 + 72 >> 2] = $8 - $10;
    HEAP32[$4 + 76 >> 2] = $7 - (i64toi32_i32$HIGH_BITS + ($8 >>> 0 < $10 >>> 0) | 0);
    $36 = $1;
    $35 = $1 >> 31;
    $1 = __wasm_i64_mul($28, $29, $1, $35);
    $7 = i64toi32_i32$HIGH_BITS;
    $10 = __wasm_i64_mul($6, $27, $11, $3);
    HEAP32[$4 + 64 >> 2] = $1 - $10;
    HEAP32[$4 + 68 >> 2] = $7 - (i64toi32_i32$HIGH_BITS + ($1 >>> 0 < $10 >>> 0) | 0);
    $7 = __wasm_i64_mul($6, $27, $2, $34);
    $5 = i64toi32_i32$HIGH_BITS;
    $10 = __wasm_i64_mul($32, $30, $36, $35);
    HEAP32[$4 + 56 >> 2] = $7 - $10;
    HEAP32[$4 + 60 >> 2] = $5 - (i64toi32_i32$HIGH_BITS + ($7 >>> 0 < $10 >>> 0) | 0);
    HEAP32[$4 + 48 >> 2] = 0;
    $7 = $4 + 40 | 0;
    HEAP32[$7 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    HEAP32[$4 + 32 >> 2] = 0;
    HEAP32[$4 + 36 >> 2] = 0;
    $22 = btConvexHullInternal__findMaxAngle_28bool_2c_20btConvexHullInternal__Vertex_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Rational64__29($0, 0, $15, $4 + 104 | 0, $4 + 80 | 0, $4 + 56 | 0, $4 + 32 | 0);
    HEAP32[$4 + 24 >> 2] = 0;
    $7 = $4 + 16 | 0;
    HEAP32[$7 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    HEAP32[$4 + 8 >> 2] = 0;
    HEAP32[$4 + 12 >> 2] = 0;
    $14 = btConvexHullInternal__findMaxAngle_28bool_2c_20btConvexHullInternal__Vertex_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Rational64__29($0, 1, $17, $4 + 104 | 0, $4 + 80 | 0, $4 + 56 | 0, $4 + 8 | 0);
    label$17 : {
     if (!($14 | $22)) {
      $2 = btConvexHullInternal__newEdgePair_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $15, $17);
      HEAP32[$15 + 8 >> 2] = $2;
      $1 = HEAP32[$2 + 8 >> 2];
      HEAP32[$17 + 8 >> 2] = $1;
      HEAP32[$2 + 4 >> 2] = $2;
      HEAP32[$2 >> 2] = $2;
      HEAP32[$1 + 4 >> 2] = $1;
      HEAP32[$1 >> 2] = $1;
      $2 = 0;
      break label$17;
     }
     $23 = $22 ? -1 : 1;
     label$19 : {
      if (!$22) {
       break label$19
      }
      if (!$14) {
       break label$19
      }
      $23 = btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($4 + 32 | 0, $4 + 8 | 0);
     }
     label$20 : {
      label$21 : {
       if ($39) {
        break label$21
       }
       label$22 : {
        if (($23 | 0) >= 0) {
         if (HEAP32[$4 + 24 >> 2] > -1) {
          break label$21
         }
         if (!(HEAP32[$4 + 16 >> 2] | HEAP32[$4 + 20 >> 2])) {
          break label$22
         }
         break label$21;
        }
        if (HEAP32[$4 + 48 >> 2] > -1) {
         break label$21
        }
        if (HEAP32[$4 + 40 >> 2] | HEAP32[$4 + 44 >> 2]) {
         break label$21
        }
       }
       $5 = $13;
       $3 = $33;
       $6 = $16;
       $8 = $24;
       break label$20;
      }
      $6 = btConvexHullInternal__newEdgePair_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $15, $17);
      $8 = $6;
      if ($16) {
       HEAP32[$16 + 4 >> 2] = $6;
       $8 = $24;
      }
      HEAP32[$6 >> 2] = $16;
      $5 = HEAP32[$6 + 8 >> 2];
      $3 = $5;
      if ($13) {
       HEAP32[$13 >> 2] = $5;
       $3 = $33;
      }
      HEAP32[$5 + 4 >> 2] = $13;
     }
     HEAP32[$4 + 4 >> 2] = $22;
     HEAP32[$4 >> 2] = $14;
     $13 = $14;
     if (!$23) {
      btConvexHullInternal__findEdgeForCoplanarFaces_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $15, $17, $4 + 4 | 0, $4);
      $13 = HEAP32[$4 >> 2];
     }
     label$27 : {
      label$28 : {
       if (($23 | 0) < 0) {
        break label$28
       }
       if (!$13) {
        break label$28
       }
       label$29 : {
        if (!$19) {
         break label$29
        }
        $2 = HEAP32[$19 >> 2];
        if (($14 | 0) == ($2 | 0)) {
         break label$29
        }
        while (1) {
         $1 = HEAP32[$2 + 8 >> 2];
         $9 = 0;
         $12 = 0;
         $11 = HEAP32[$2 >> 2];
         if (($11 | 0) != ($2 | 0)) {
          HEAP32[$11 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
          HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = $11;
          $12 = $11;
         }
         HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] = $12;
         $12 = HEAP32[$1 >> 2];
         if (($12 | 0) != ($1 | 0)) {
          HEAP32[$12 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
          HEAP32[HEAP32[$1 + 4 >> 2] >> 2] = $12;
          $9 = $12;
         }
         HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = $9;
         HEAP32[$2 + 12 >> 2] = 0;
         HEAP32[$2 + 16 >> 2] = 0;
         HEAP32[$2 + 4 >> 2] = 0;
         HEAP32[$2 + 8 >> 2] = 0;
         HEAP32[$2 >> 2] = HEAP32[$0 + 56 >> 2];
         HEAP32[$0 + 56 >> 2] = $2;
         $7 = $1 + 12 | 0;
         HEAP32[$7 >> 2] = 0;
         HEAP32[$7 + 4 >> 2] = 0;
         HEAP32[$1 + 4 >> 2] = 0;
         HEAP32[$1 + 8 >> 2] = 0;
         HEAP32[$1 >> 2] = HEAP32[$0 + 56 >> 2];
         HEAP32[$0 + 56 >> 2] = $1;
         HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + -1;
         $2 = $11;
         if (($14 | 0) != ($2 | 0)) {
          continue
         }
         break;
        };
       }
       label$33 : {
        if ($5) {
         if (!$19) {
          $19 = HEAP32[$14 + 4 >> 2];
          $21 = $3;
         }
         HEAP32[$19 >> 2] = $3;
         HEAP32[$3 + 4 >> 2] = $19;
         HEAP32[$14 + 4 >> 2] = $5;
         HEAP32[$5 >> 2] = $14;
         $3 = 0;
         break label$33;
        }
        $21 = $19 ? $21 : $14;
       }
       $24 = HEAP32[$13 + 12 >> 2];
       HEAP32[$4 + 120 >> 2] = $24;
       $31 = HEAP32[$42 >> 2];
       $37 = HEAP32[$40 >> 2];
       $19 = HEAP32[$13 + 8 >> 2];
       $38 = HEAP32[$17 + 88 >> 2];
       $5 = 0;
       break label$27;
      }
      $24 = $17;
     }
     $13 = $5;
     label$36 : {
      label$37 : {
       if (($23 | 0) > 0) {
        break label$37
       }
       $23 = HEAP32[$4 + 4 >> 2];
       if (!$23) {
        break label$37
       }
       label$38 : {
        if (!$25) {
         break label$38
        }
        $1 = HEAP32[$25 + 4 >> 2];
        if (($22 | 0) == ($1 | 0)) {
         break label$38
        }
        while (1) {
         $11 = $1 + 4 | 0;
         $2 = HEAP32[$1 + 8 >> 2];
         $12 = HEAP32[$1 + 4 >> 2];
         $17 = 0;
         $14 = 0;
         $9 = HEAP32[$1 >> 2];
         if (($9 | 0) != ($1 | 0)) {
          HEAP32[$9 + 4 >> 2] = $12;
          HEAP32[HEAP32[$11 >> 2] >> 2] = $9;
          $14 = $9;
         }
         HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = $14;
         $9 = HEAP32[$2 >> 2];
         if (($9 | 0) != ($2 | 0)) {
          HEAP32[$9 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
          HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = $9;
          $17 = $9;
         }
         HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] = $17;
         $7 = $11 + 8 | 0;
         HEAP32[$7 >> 2] = 0;
         HEAP32[$7 + 4 >> 2] = 0;
         HEAP32[$11 >> 2] = 0;
         HEAP32[$11 + 4 >> 2] = 0;
         HEAP32[$1 >> 2] = HEAP32[$0 + 56 >> 2];
         HEAP32[$0 + 56 >> 2] = $1;
         $7 = $2 + 12 | 0;
         HEAP32[$7 >> 2] = 0;
         HEAP32[$7 + 4 >> 2] = 0;
         HEAP32[$2 + 4 >> 2] = 0;
         HEAP32[$2 + 8 >> 2] = 0;
         HEAP32[$2 >> 2] = HEAP32[$0 + 56 >> 2];
         HEAP32[$0 + 56 >> 2] = $2;
         HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + -1;
         $1 = $12;
         if (($22 | 0) != ($1 | 0)) {
          continue
         }
         break;
        };
       }
       label$42 : {
        if ($6) {
         if (!$25) {
          $25 = HEAP32[$22 >> 2];
          $18 = $8;
         }
         HEAP32[$25 + 4 >> 2] = $8;
         HEAP32[$8 >> 2] = $25;
         HEAP32[$6 + 4 >> 2] = $22;
         HEAP32[$22 >> 2] = $6;
         $8 = 0;
         break label$42;
        }
        $18 = $25 ? $18 : $22;
       }
       $1 = HEAP32[$23 + 12 >> 2];
       HEAP32[$4 + 124 >> 2] = $1;
       $31 = HEAP32[$43 >> 2];
       $37 = HEAP32[$41 >> 2];
       $25 = HEAP32[$23 + 8 >> 2];
       $38 = HEAP32[$15 + 88 >> 2];
       $6 = 0;
       break label$36;
      }
      $1 = $15;
     }
     $16 = $6;
     $2 = 1;
     label$45 : {
      label$46 : {
       if (($1 | 0) != ($26 | 0)) {
        break label$46
       }
       if (($20 | 0) != ($24 | 0)) {
        break label$46
       }
       label$47 : {
        if (!$25) {
         HEAP32[$16 + 4 >> 2] = $8;
         HEAP32[$8 >> 2] = $16;
         HEAP32[$1 + 8 >> 2] = $16;
         break label$47;
        }
        $1 = HEAP32[$25 + 4 >> 2];
        if (($1 | 0) != ($18 | 0)) {
         while (1) {
          $11 = $1 + 4 | 0;
          $2 = HEAP32[$1 + 8 >> 2];
          $12 = HEAP32[$1 + 4 >> 2];
          $17 = 0;
          $14 = 0;
          $9 = HEAP32[$1 >> 2];
          if (($9 | 0) != ($1 | 0)) {
           HEAP32[$9 + 4 >> 2] = $12;
           HEAP32[HEAP32[$11 >> 2] >> 2] = $9;
           $14 = $9;
          }
          HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = $14;
          $9 = HEAP32[$2 >> 2];
          if (($9 | 0) != ($2 | 0)) {
           HEAP32[$9 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
           HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = $9;
           $17 = $9;
          }
          HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] = $17;
          $7 = $11 + 8 | 0;
          HEAP32[$7 >> 2] = 0;
          HEAP32[$7 + 4 >> 2] = 0;
          HEAP32[$11 >> 2] = 0;
          HEAP32[$11 + 4 >> 2] = 0;
          HEAP32[$1 >> 2] = HEAP32[$0 + 56 >> 2];
          HEAP32[$0 + 56 >> 2] = $1;
          $7 = $2 + 12 | 0;
          HEAP32[$7 >> 2] = 0;
          HEAP32[$7 + 4 >> 2] = 0;
          HEAP32[$2 + 4 >> 2] = 0;
          HEAP32[$2 + 8 >> 2] = 0;
          HEAP32[$2 >> 2] = HEAP32[$0 + 56 >> 2];
          HEAP32[$0 + 56 >> 2] = $2;
          HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + -1;
          $1 = $12;
          if (($18 | 0) != ($1 | 0)) {
           continue
          }
          break;
         }
        }
        if (!$16) {
         break label$47
        }
        HEAP32[$25 + 4 >> 2] = $8;
        HEAP32[$8 >> 2] = $25;
        HEAP32[$16 + 4 >> 2] = $18;
        HEAP32[$18 >> 2] = $16;
       }
       if (!$19) {
        HEAP32[$13 >> 2] = $3;
        HEAP32[$3 + 4 >> 2] = $13;
        HEAP32[HEAP32[$4 + 120 >> 2] + 8 >> 2] = $13;
        $19 = 0;
        $33 = $3;
        $24 = $8;
        $2 = 0;
        break label$17;
       }
       $2 = HEAP32[$19 >> 2];
       if (($2 | 0) != ($21 | 0)) {
        while (1) {
         $1 = HEAP32[$2 + 8 >> 2];
         $9 = 0;
         $12 = 0;
         $11 = HEAP32[$2 >> 2];
         if (($11 | 0) != ($2 | 0)) {
          HEAP32[$11 + 4 >> 2] = HEAP32[$2 + 4 >> 2];
          HEAP32[HEAP32[$2 + 4 >> 2] >> 2] = $11;
          $12 = $11;
         }
         HEAP32[HEAP32[$1 + 12 >> 2] + 8 >> 2] = $12;
         $12 = HEAP32[$1 >> 2];
         if (($12 | 0) != ($1 | 0)) {
          HEAP32[$12 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
          HEAP32[HEAP32[$1 + 4 >> 2] >> 2] = $12;
          $9 = $12;
         }
         HEAP32[HEAP32[$2 + 12 >> 2] + 8 >> 2] = $9;
         HEAP32[$2 + 12 >> 2] = 0;
         HEAP32[$2 + 16 >> 2] = 0;
         HEAP32[$2 + 4 >> 2] = 0;
         HEAP32[$2 + 8 >> 2] = 0;
         HEAP32[$2 >> 2] = HEAP32[$0 + 56 >> 2];
         HEAP32[$0 + 56 >> 2] = $2;
         $7 = $1 + 12 | 0;
         HEAP32[$7 >> 2] = 0;
         HEAP32[$7 + 4 >> 2] = 0;
         HEAP32[$1 + 4 >> 2] = 0;
         HEAP32[$1 + 8 >> 2] = 0;
         HEAP32[$1 >> 2] = HEAP32[$0 + 56 >> 2];
         HEAP32[$0 + 56 >> 2] = $1;
         HEAP32[$0 + 116 >> 2] = HEAP32[$0 + 116 >> 2] + -1;
         $2 = $11;
         if (($21 | 0) != ($2 | 0)) {
          continue
         }
         break;
        }
       }
       $2 = 0;
       label$58 : {
        if (!$13) {
         $13 = 0;
         break label$58;
        }
        HEAP32[$3 + 4 >> 2] = $19;
        HEAP32[$19 >> 2] = $3;
        HEAP32[$21 + 4 >> 2] = $13;
        HEAP32[$13 >> 2] = $21;
       }
       break label$45;
      }
      $39 = 0;
     }
     $33 = $3;
     $24 = $8;
    }
    if (!$2) {
     break label$1
    }
    $15 = HEAP32[$4 + 124 >> 2];
    $17 = HEAP32[$4 + 120 >> 2];
    continue;
   };
  }
  global$0 = $4 + 128 | 0;
 }
 
 function btConvexHullInternal__findEdgeForCoplanarFaces_28btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Edge___2c_20btConvexHullInternal__Vertex__2c_20btConvexHullInternal__Vertex__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
  $13 = global$0 - 48 | 0;
  global$0 = $13;
  $30 = HEAP32[$4 >> 2];
  $19 = $1;
  $35 = HEAP32[$3 >> 2];
  if ($35) {
   $19 = HEAP32[$35 + 12 >> 2]
  }
  $21 = HEAP32[$19 + 96 >> 2];
  $31 = HEAP32[$19 + 92 >> 2];
  $19 = HEAP32[$19 + 88 >> 2];
  $15 = $30 ? HEAP32[$30 + 12 >> 2] : $2;
  $20 = HEAP32[($35 ? $35 : $30) + 12 >> 2];
  $22 = HEAP32[$1 + 92 >> 2];
  $32 = HEAP32[$20 + 92 >> 2] - $22 | 0;
  $25 = HEAP32[$1 + 96 >> 2];
  $47 = HEAP32[$2 + 96 >> 2] - $25 | 0;
  $33 = HEAP32[$20 + 96 >> 2] - $25 | 0;
  $41 = HEAP32[$2 + 92 >> 2] - $22 | 0;
  $10 = Math_imul($32, $47) - Math_imul($33, $41) | 0;
  $9 = $10 >> 31;
  $42 = $10;
  $43 = $9;
  $10 = $47;
  $9 = $10 >> 31;
  $17 = $10;
  $18 = $9;
  $5 = __wasm_i64_mul($42, $43, $10, $9);
  $8 = i64toi32_i32$HIGH_BITS;
  $1 = HEAP32[$1 + 88 >> 2];
  $20 = HEAP32[$20 + 88 >> 2] - $1 | 0;
  $48 = HEAP32[$2 + 88 >> 2] - $1 | 0;
  $10 = Math_imul($41, $20) - Math_imul($48, $32) | 0;
  $9 = $10 >> 31;
  $44 = $10;
  $45 = $9;
  $10 = $48;
  $9 = $10 >> 31;
  $27 = $10;
  $29 = $9;
  $6 = __wasm_i64_mul($44, $45, $10, $9);
  $36 = $5 - $6 | 0;
  $37 = $8 - (i64toi32_i32$HIGH_BITS + ($5 >>> 0 < $6 >>> 0) | 0) | 0;
  $5 = $31;
  $8 = $5 >> 31;
  $14 = __wasm_i64_mul($36, $37, $5, $8);
  $10 = i64toi32_i32$HIGH_BITS;
  $5 = $41;
  $8 = $5 >> 31;
  $11 = $5;
  $12 = $8;
  $9 = __wasm_i64_mul($44, $45, $5, $8);
  $2 = i64toi32_i32$HIGH_BITS;
  $5 = Math_imul($27, $33) - Math_imul($17, $20) | 0;
  $8 = $5 >> 31;
  $49 = $5;
  $50 = $8;
  $6 = __wasm_i64_mul($5, $8, $17, $18);
  $38 = $9 - $6 | 0;
  $39 = $2 - (i64toi32_i32$HIGH_BITS + ($9 >>> 0 < $6 >>> 0) | 0) | 0;
  $9 = $19;
  $7 = $9 >> 31;
  $6 = __wasm_i64_mul($38, $39, $9, $7);
  $10 = $10 + i64toi32_i32$HIGH_BITS | 0;
  $5 = $6 + $14 | 0;
  if ($5 >>> 0 < $6 >>> 0) {
   $10 = $10 + 1 | 0
  }
  $14 = $5;
  $7 = __wasm_i64_mul($49, $50, $27, $29);
  $2 = i64toi32_i32$HIGH_BITS;
  $6 = __wasm_i64_mul($42, $43, $11, $12);
  $27 = $7 - $6 | 0;
  $29 = $2 - (i64toi32_i32$HIGH_BITS + ($7 >>> 0 < $6 >>> 0) | 0) | 0;
  $7 = $21;
  $5 = $7 >> 31;
  $6 = __wasm_i64_mul($27, $29, $7, $5);
  $9 = i64toi32_i32$HIGH_BITS + $10 | 0;
  $8 = $6 + $14 | 0;
  if ($8 >>> 0 < $6 >>> 0) {
   $9 = $9 + 1 | 0
  }
  $17 = $8;
  $18 = $9;
  $10 = $1;
  $9 = $10 >> 31;
  $5 = __wasm_i64_mul($42, $43, $10, $9);
  $1 = i64toi32_i32$HIGH_BITS;
  $10 = $25;
  $9 = $10 >> 31;
  $6 = __wasm_i64_mul($44, $45, $10, $9);
  $8 = i64toi32_i32$HIGH_BITS + $1 | 0;
  $7 = $6 + $5 | 0;
  if ($7 >>> 0 < $6 >>> 0) {
   $8 = $8 + 1 | 0
  }
  $9 = $7;
  $1 = $8;
  $5 = $22;
  $8 = $5 >> 31;
  $6 = __wasm_i64_mul($49, $50, $5, $8);
  $7 = $1 + i64toi32_i32$HIGH_BITS | 0;
  $10 = $6 + $9 | 0;
  if ($10 >>> 0 < $6 >>> 0) {
   $7 = $7 + 1 | 0
  }
  $23 = $10;
  $24 = $7;
  $25 = HEAP32[$15 + 96 >> 2];
  $32 = HEAP32[$15 + 92 >> 2];
  $33 = HEAP32[$15 + 88 >> 2];
  $1 = $30;
  label$3 : {
   if (!$35) {
    break label$3
   }
   $1 = $30;
   if (!HEAP32[$35 + 12 >> 2]) {
    break label$3
   }
   $1 = HEAP32[HEAP32[$35 + 8 >> 2] + 4 >> 2];
   $2 = HEAP32[$1 + 12 >> 2];
   $7 = HEAP32[$2 + 92 >> 2];
   $9 = $7 >> 31;
   $11 = $7;
   $12 = $9;
   $5 = __wasm_i64_mul($7, $9, $49, $50);
   $8 = i64toi32_i32$HIGH_BITS;
   $9 = HEAP32[$2 + 88 >> 2];
   $7 = $9 >> 31;
   $16 = $9;
   $14 = $7;
   $6 = __wasm_i64_mul($9, $7, $42, $43);
   $10 = $8 + i64toi32_i32$HIGH_BITS | 0;
   $5 = $6 + $5 | 0;
   if ($5 >>> 0 < $6 >>> 0) {
    $10 = $10 + 1 | 0
   }
   $7 = $5;
   $5 = $10;
   $10 = HEAP32[$2 + 96 >> 2];
   $8 = $10 >> 31;
   $46 = $10;
   $26 = $8;
   $6 = __wasm_i64_mul($10, $8, $44, $45);
   $5 = $5 + i64toi32_i32$HIGH_BITS | 0;
   $9 = $6 + $7 | 0;
   if ($9 >>> 0 < $6 >>> 0) {
    $5 = $5 + 1 | 0
   }
   $8 = $9;
   $6 = $23;
   $7 = $24;
   if (($5 | 0) < ($7 | 0)) {
    $2 = 1
   } else {
    $2 = ($5 | 0) <= ($7 | 0) ? ($8 >>> 0 >= $6 >>> 0 ? 0 : 1) : 0
   }
   label$6 : {
    if ($2) {
     break label$6
    }
    $15 = $1 + 12 | 0;
    while (1) {
     if (HEAP32[$1 + 20 >> 2] == HEAP32[$0 + 100 >> 2]) {
      break label$6
     }
     $6 = __wasm_i64_mul($36, $37, $11, $12);
     $8 = i64toi32_i32$HIGH_BITS;
     $7 = __wasm_i64_mul($38, $39, $16, $14);
     $9 = $8 + i64toi32_i32$HIGH_BITS | 0;
     $10 = $6 + $7 | 0;
     if ($10 >>> 0 < $7 >>> 0) {
      $9 = $9 + 1 | 0
     }
     $8 = $10;
     $7 = __wasm_i64_mul($27, $29, $46, $26);
     $10 = i64toi32_i32$HIGH_BITS + $9 | 0;
     $5 = $8 + $7 | 0;
     if ($5 >>> 0 < $7 >>> 0) {
      $10 = $10 + 1 | 0
     }
     $11 = $5;
     $9 = $5;
     $7 = $17;
     $12 = $10;
     $8 = $18;
     if (($10 | 0) < ($8 | 0)) {
      $2 = 1
     } else {
      $2 = ($10 | 0) <= ($8 | 0) ? ($9 >>> 0 > $7 >>> 0 ? 0 : 1) : 0
     }
     if ($2) {
      break label$6
     }
     HEAP32[$3 >> 2] = $1;
     $2 = HEAP32[$15 >> 2];
     $21 = HEAP32[$2 + 96 >> 2];
     $31 = HEAP32[$2 + 92 >> 2];
     $19 = HEAP32[$2 + 88 >> 2];
     if ($2) {
      $1 = HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2];
      $15 = $1 + 12 | 0;
      $17 = $11;
      $18 = $12;
      $2 = HEAP32[$1 + 12 >> 2];
      $9 = HEAP32[$2 + 92 >> 2];
      $10 = $9 >> 31;
      $11 = $9;
      $12 = $10;
      $7 = __wasm_i64_mul($9, $10, $49, $50);
      $5 = i64toi32_i32$HIGH_BITS;
      $10 = HEAP32[$2 + 88 >> 2];
      $9 = $10 >> 31;
      $16 = $10;
      $14 = $9;
      $8 = __wasm_i64_mul($10, $9, $42, $43);
      $5 = i64toi32_i32$HIGH_BITS + $5 | 0;
      $6 = $8 + $7 | 0;
      if ($6 >>> 0 < $8 >>> 0) {
       $5 = $5 + 1 | 0
      }
      $9 = $6;
      $8 = $5;
      $5 = HEAP32[$2 + 96 >> 2];
      $7 = $5 >> 31;
      $46 = $5;
      $26 = $7;
      $2 = __wasm_i64_mul($5, $7, $44, $45);
      $6 = $8 + i64toi32_i32$HIGH_BITS | 0;
      $8 = $2;
      $10 = $8 + $9 | 0;
      if ($10 >>> 0 < $8 >>> 0) {
       $6 = $6 + 1 | 0
      }
      $7 = $10;
      $8 = $23;
      $9 = $24;
      if (($6 | 0) < ($9 | 0)) {
       $2 = 1
      } else {
       $2 = ($6 | 0) <= ($9 | 0) ? ($7 >>> 0 >= $8 >>> 0 ? 0 : 1) : 0
      }
      if ($2) {
       break label$6
      }
      continue;
     }
     break;
    };
    $17 = $11;
    $18 = $12;
   }
   $1 = HEAP32[$4 >> 2];
  }
  $6 = $32;
  $7 = $6 >> 31;
  $8 = __wasm_i64_mul($36, $37, $6, $7);
  $2 = i64toi32_i32$HIGH_BITS;
  $6 = $33;
  $7 = $6 >> 31;
  $9 = __wasm_i64_mul($38, $39, $6, $7);
  $10 = $2 + i64toi32_i32$HIGH_BITS | 0;
  $5 = $8 + $9 | 0;
  if ($5 >>> 0 < $9 >>> 0) {
   $10 = $10 + 1 | 0
  }
  $7 = $5;
  $2 = $10;
  $8 = $25;
  $10 = $8 >> 31;
  $9 = __wasm_i64_mul($27, $29, $8, $10);
  $5 = i64toi32_i32$HIGH_BITS + $2 | 0;
  $6 = $9 + $7 | 0;
  if ($6 >>> 0 < $9 >>> 0) {
   $5 = $5 + 1 | 0
  }
  $11 = $6;
  $12 = $5;
  label$9 : {
   if (!$1) {
    $1 = 0;
    break label$9;
   }
   if (!HEAP32[$1 + 12 >> 2]) {
    break label$9
   }
   $15 = HEAP32[HEAP32[$1 + 8 >> 2] >> 2];
   $2 = HEAP32[$15 + 12 >> 2];
   $5 = HEAP32[$2 + 92 >> 2];
   $7 = $5 >> 31;
   $16 = $5;
   $14 = $7;
   $10 = __wasm_i64_mul($5, $7, $49, $50);
   $8 = i64toi32_i32$HIGH_BITS;
   $7 = HEAP32[$2 + 88 >> 2];
   $5 = $7 >> 31;
   $46 = $7;
   $26 = $5;
   $9 = __wasm_i64_mul($7, $5, $42, $43);
   $6 = i64toi32_i32$HIGH_BITS + $8 | 0;
   $8 = $10 + $9 | 0;
   if ($8 >>> 0 < $9 >>> 0) {
    $6 = $6 + 1 | 0
   }
   $5 = $8;
   $8 = $6;
   $6 = HEAP32[$2 + 96 >> 2];
   $10 = $6 >> 31;
   $34 = $6;
   $28 = $10;
   $9 = __wasm_i64_mul($6, $10, $44, $45);
   $8 = i64toi32_i32$HIGH_BITS + $8 | 0;
   $7 = $5 + $9 | 0;
   if ($7 >>> 0 < $9 >>> 0) {
    $8 = $8 + 1 | 0
   }
   $10 = $7;
   $9 = $23;
   $5 = $24;
   if (($8 | 0) < ($5 | 0)) {
    $2 = 1
   } else {
    $2 = ($8 | 0) <= ($5 | 0) ? ($10 >>> 0 >= $9 >>> 0 ? 0 : 1) : 0
   }
   if ($2) {
    break label$9
   }
   $20 = $15 + 12 | 0;
   while (1) {
    $2 = $15;
    if (HEAP32[$2 + 20 >> 2] == HEAP32[$0 + 100 >> 2]) {
     break label$9
    }
    $9 = __wasm_i64_mul($36, $37, $16, $14);
    $10 = i64toi32_i32$HIGH_BITS;
    $5 = __wasm_i64_mul($38, $39, $46, $26);
    $7 = i64toi32_i32$HIGH_BITS + $10 | 0;
    $6 = $5 + $9 | 0;
    if ($6 >>> 0 < $5 >>> 0) {
     $7 = $7 + 1 | 0
    }
    $10 = $6;
    $5 = __wasm_i64_mul($27, $29, $34, $28);
    $6 = $7 + i64toi32_i32$HIGH_BITS | 0;
    $8 = $5 + $10 | 0;
    if ($8 >>> 0 < $5 >>> 0) {
     $6 = $6 + 1 | 0
    }
    $16 = $8;
    $7 = $8;
    $5 = $11;
    $14 = $6;
    $10 = $12;
    if (($6 | 0) < ($10 | 0)) {
     $5 = 1
    } else {
     $5 = ($6 | 0) <= ($10 | 0) ? ($7 >>> 0 > $5 >>> 0 ? 0 : 1) : 0
    }
    if ($5) {
     break label$9
    }
    HEAP32[$4 >> 2] = $2;
    $1 = HEAP32[$20 >> 2];
    $25 = HEAP32[$1 + 96 >> 2];
    $32 = HEAP32[$1 + 92 >> 2];
    $33 = HEAP32[$1 + 88 >> 2];
    if ($1) {
     $15 = HEAP32[HEAP32[$2 + 8 >> 2] >> 2];
     $20 = $15 + 12 | 0;
     $11 = $16;
     $12 = $14;
     $1 = $2;
     $2 = HEAP32[$15 + 12 >> 2];
     $7 = HEAP32[$2 + 92 >> 2];
     $6 = $7 >> 31;
     $16 = $7;
     $14 = $6;
     $5 = __wasm_i64_mul($7, $6, $49, $50);
     $8 = i64toi32_i32$HIGH_BITS;
     $6 = HEAP32[$2 + 88 >> 2];
     $7 = $6 >> 31;
     $46 = $6;
     $26 = $7;
     $10 = __wasm_i64_mul($6, $7, $42, $43);
     $8 = $8 + i64toi32_i32$HIGH_BITS | 0;
     $9 = $5 + $10 | 0;
     if ($9 >>> 0 < $10 >>> 0) {
      $8 = $8 + 1 | 0
     }
     $6 = $9;
     $7 = $8;
     $8 = HEAP32[$2 + 96 >> 2];
     $5 = $8 >> 31;
     $34 = $8;
     $28 = $5;
     $10 = __wasm_i64_mul($8, $5, $44, $45);
     $9 = i64toi32_i32$HIGH_BITS + $7 | 0;
     $6 = $6 + $10 | 0;
     if ($6 >>> 0 < $10 >>> 0) {
      $9 = $9 + 1 | 0
     }
     $5 = $6;
     $10 = $23;
     $7 = $24;
     if (($9 | 0) < ($7 | 0)) {
      $2 = 1
     } else {
      $2 = ($9 | 0) <= ($7 | 0) ? ($5 >>> 0 >= $10 >>> 0 ? 0 : 1) : 0
     }
     if ($2) {
      break label$9
     }
     continue;
    }
    break;
   };
   $1 = $2;
   $11 = $16;
   $12 = $14;
  }
  $10 = $11;
  $7 = $17;
  $17 = $10 - $7 | 0;
  $2 = $17;
  $6 = $12 - (($10 >>> 0 < $7 >>> 0) + $18 | 0) | 0;
  $18 = $6;
  $5 = $2;
  label$13 : {
   if (($6 | 0) < 0) {
    $2 = 1
   } else {
    $2 = ($6 | 0) <= 0 ? ($5 >>> 0 >= 1 ? 0 : 1) : 0
   }
   if (!$2) {
    while (1) {
     $40 = (Math_imul($41, $32 - $31 | 0) + Math_imul($48, $33 - $19 | 0) | 0) + Math_imul($47, $25 - $21 | 0) | 0;
     $6 = $40;
     $5 = $6 >> 31;
     $23 = $6;
     $24 = $5;
     label$16 : {
      $1 = HEAP32[$3 >> 2];
      if (!$1) {
       break label$16
      }
      if (!HEAP32[$1 + 12 >> 2]) {
       break label$16
      }
      $15 = HEAP32[HEAP32[$1 >> 2] + 8 >> 2];
      if (HEAP32[$15 + 20 >> 2] <= HEAP32[$0 + 100 >> 2]) {
       break label$16
      }
      $2 = HEAP32[$15 + 12 >> 2];
      $30 = HEAP32[$2 + 92 >> 2];
      $34 = $30 - $31 | 0;
      $20 = HEAP32[$2 + 88 >> 2];
      $28 = $20 - $19 | 0;
      $2 = HEAP32[$2 + 96 >> 2];
      $26 = $2 - $21 | 0;
      $22 = (Math_imul($41, $34) + Math_imul($48, $28) | 0) + Math_imul($47, $26) | 0;
      $6 = $34;
      $5 = $6 >> 31;
      $7 = __wasm_i64_mul($36, $37, $6, $5);
      $8 = i64toi32_i32$HIGH_BITS;
      $6 = $28;
      $5 = $6 >> 31;
      $10 = __wasm_i64_mul($38, $39, $6, $5);
      $8 = i64toi32_i32$HIGH_BITS + $8 | 0;
      $9 = $10 + $7 | 0;
      if ($9 >>> 0 < $10 >>> 0) {
       $8 = $8 + 1 | 0
      }
      $6 = $9;
      $5 = $8;
      $7 = $26;
      $8 = $7 >> 31;
      $10 = __wasm_i64_mul($27, $29, $7, $8);
      $9 = $5 + i64toi32_i32$HIGH_BITS | 0;
      $6 = $6 + $10 | 0;
      if ($6 >>> 0 < $10 >>> 0) {
       $9 = $9 + 1 | 0
      }
      $11 = $6;
      $12 = $9;
      label$17 : {
       if (!(($6 | 0) != 0 | ($9 | 0) != 0)) {
        if (($22 | 0) < 0) {
         break label$17
        }
        break label$16;
       }
       $10 = $11;
       $8 = $12;
       if (($8 | 0) > -1) {
        $5 = 1
       } else {
        $5 = ($8 | 0) >= -1 ? ($10 >>> 0 <= 4294967295 ? 0 : 1) : 0
       }
       if ($5) {
        break label$16
       }
       $8 = $22;
       $10 = $8 >> 31;
       $16 = $8;
       $14 = $10;
       $5 = $13;
       label$19 : {
        if (($8 | 0) >= 1) {
         HEAP32[$13 + 40 >> 2] = 1;
         $7 = -1;
         break label$19;
        }
        if (($22 | 0) <= -1) {
         HEAP32[$13 + 40 >> 2] = -1;
         $9 = $16;
         $16 = 0 - $9 | 0;
         $14 = 0 - ((0 < $9 >>> 0) + $14 | 0) | 0;
         $7 = 1;
         break label$19;
        }
        HEAP32[$13 + 40 >> 2] = 0;
        $16 = 0;
        $14 = 0;
        $7 = 0;
       }
       HEAP32[$5 + 40 >> 2] = $7;
       $5 = $13;
       HEAP32[$5 + 24 >> 2] = $16;
       HEAP32[$5 + 28 >> 2] = $14;
       $9 = $11;
       HEAP32[$5 + 32 >> 2] = 0 - $9;
       HEAP32[$5 + 36 >> 2] = 0 - ((0 < $9 >>> 0) + $12 | 0);
       label$22 : {
        if (($40 | 0) >= 1) {
         HEAP32[$13 + 16 >> 2] = 1;
         $22 = -1;
         $11 = $23;
         $12 = $24;
         break label$22;
        }
        if (($40 | 0) <= -1) {
         HEAP32[$13 + 16 >> 2] = -1;
         $9 = $23;
         $11 = 0 - $9 | 0;
         $22 = 1;
         $12 = 0 - ((0 < $9 >>> 0) + $24 | 0) | 0;
         break label$22;
        }
        $22 = 0;
        HEAP32[$13 + 16 >> 2] = 0;
        $11 = 0;
        $12 = 0;
       }
       $6 = $13;
       HEAP32[$6 >> 2] = $11;
       HEAP32[$6 + 4 >> 2] = $12;
       $8 = $18;
       $12 = $8;
       $11 = $17;
       $7 = $11;
       if (($8 | 0) > 0) {
        $5 = 1
       } else {
        $5 = ($8 | 0) >= 0 ? ($7 >>> 0 <= 0 ? 0 : 1) : 0
       }
       label$25 : {
        if ($5) {
         break label$25
        }
        $11 = 0;
        $12 = 0;
        $9 = $17;
        $7 = $18;
        if (($7 | 0) > -1) {
         $5 = 1
        } else {
         $5 = ($7 | 0) >= -1 ? ($9 >>> 0 <= 4294967295 ? 0 : 1) : 0
        }
        if ($5) {
         break label$25
        }
        HEAP32[$13 + 16 >> 2] = $22;
        $8 = $17;
        $11 = 0 - $8 | 0;
        $12 = 0 - ((0 < $8 >>> 0) + $18 | 0) | 0;
       }
       HEAP32[$13 + 8 >> 2] = $11;
       HEAP32[$6 + 12 >> 2] = $12;
       if ((btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($6 + 24 | 0, $6) | 0) <= -1) {
        break label$16
       }
      }
      HEAP32[$3 >> 2] = ($1 | 0) == ($35 | 0) ? 0 : $15;
      $6 = $32 - $30 | 0;
      $5 = $6 >> 31;
      $9 = __wasm_i64_mul($36, $37, $6, $5);
      $1 = i64toi32_i32$HIGH_BITS;
      $6 = $33 - $20 | 0;
      $5 = $6 >> 31;
      $8 = __wasm_i64_mul($38, $39, $6, $5);
      $10 = i64toi32_i32$HIGH_BITS + $1 | 0;
      $7 = $8 + $9 | 0;
      if ($7 >>> 0 < $8 >>> 0) {
       $10 = $10 + 1 | 0
      }
      $5 = $7;
      $1 = $10;
      $9 = $25 - $2 | 0;
      $10 = $9 >> 31;
      $8 = __wasm_i64_mul($27, $29, $9, $10);
      $7 = $1 + i64toi32_i32$HIGH_BITS | 0;
      $6 = $5 + $8 | 0;
      if ($6 >>> 0 < $8 >>> 0) {
       $7 = $7 + 1 | 0
      }
      $17 = $6;
      $18 = $7;
      $19 = $20;
      $31 = $30;
      $21 = $2;
      continue;
     }
     $1 = HEAP32[$4 >> 2];
     if (!$1) {
      break label$13
     }
     if (!HEAP32[$1 + 12 >> 2]) {
      break label$13
     }
     $1 = HEAP32[HEAP32[$1 + 8 >> 2] >> 2];
     if (HEAP32[$1 + 20 >> 2] <= HEAP32[$0 + 100 >> 2]) {
      break label$13
     }
     $2 = HEAP32[$1 + 12 >> 2];
     $15 = HEAP32[$2 + 92 >> 2];
     $20 = $15 - $32 | 0;
     $5 = $20;
     $7 = $5 >> 31;
     $11 = $5;
     $12 = $7;
     $9 = __wasm_i64_mul($5, $7, $49, $50);
     $10 = i64toi32_i32$HIGH_BITS;
     $30 = HEAP32[$2 + 88 >> 2];
     $22 = $30 - $33 | 0;
     $5 = $22;
     $7 = $5 >> 31;
     $16 = $5;
     $14 = $7;
     $8 = __wasm_i64_mul($5, $7, $42, $43);
     $6 = $10 + i64toi32_i32$HIGH_BITS | 0;
     $9 = $8 + $9 | 0;
     if ($9 >>> 0 < $8 >>> 0) {
      $6 = $6 + 1 | 0
     }
     $28 = $9;
     $9 = $6;
     $2 = HEAP32[$2 + 96 >> 2];
     $25 = $2 - $25 | 0;
     $10 = $25;
     $6 = $10 >> 31;
     $46 = $10;
     $26 = $6;
     $8 = __wasm_i64_mul($44, $45, $10, $6);
     if ((0 - $8 | 0) != ($28 | 0)) {
      $5 = 1
     } else {
      $5 = (0 - (i64toi32_i32$HIGH_BITS + (0 < $8 >>> 0) | 0) | 0) != ($9 | 0)
     }
     if ($5) {
      break label$13
     }
     $9 = $15 - $31 | 0;
     $6 = $9 >> 31;
     $10 = __wasm_i64_mul($36, $37, $9, $6);
     $8 = i64toi32_i32$HIGH_BITS;
     $9 = $30 - $19 | 0;
     $6 = $9 >> 31;
     $7 = __wasm_i64_mul($38, $39, $9, $6);
     $5 = $8 + i64toi32_i32$HIGH_BITS | 0;
     $10 = $10 + $7 | 0;
     if ($10 >>> 0 < $7 >>> 0) {
      $5 = $5 + 1 | 0
     }
     $6 = $10;
     $7 = $5;
     $8 = $2 - $21 | 0;
     $5 = $8 >> 31;
     $2 = __wasm_i64_mul($27, $29, $8, $5);
     $10 = i64toi32_i32$HIGH_BITS + $7 | 0;
     $7 = $2;
     $9 = $7 + $6 | 0;
     if ($9 >>> 0 < $7 >>> 0) {
      $10 = $10 + 1 | 0
     }
     $34 = $9;
     $5 = $9;
     $28 = $10;
     if (($10 | 0) < 0) {
      $2 = 1
     } else {
      $2 = ($10 | 0) <= 0 ? ($5 >>> 0 >= 1 ? 0 : 1) : 0
     }
     if ($2) {
      break label$13
     }
     $2 = (Math_imul($20, $41) + Math_imul($22, $48) | 0) + Math_imul($25, $47) | 0;
     $7 = __wasm_i64_mul($36, $37, $11, $12);
     $5 = i64toi32_i32$HIGH_BITS;
     $6 = __wasm_i64_mul($38, $39, $16, $14);
     $9 = $5 + i64toi32_i32$HIGH_BITS | 0;
     $8 = $6 + $7 | 0;
     if ($8 >>> 0 < $6 >>> 0) {
      $9 = $9 + 1 | 0
     }
     $5 = $8;
     $6 = __wasm_i64_mul($27, $29, $46, $26);
     $8 = i64toi32_i32$HIGH_BITS + $9 | 0;
     $10 = $6 + $5 | 0;
     if ($10 >>> 0 < $6 >>> 0) {
      $8 = $8 + 1 | 0
     }
     $11 = $10;
     $12 = $8;
     label$26 : {
      if (!(($10 | 0) != 0 | ($8 | 0) != 0)) {
       if (($2 | 0) < 0) {
        break label$26
       }
       break label$13;
      }
      $6 = $11;
      $9 = $12;
      if (($9 | 0) > -1) {
       $5 = 1
      } else {
       $5 = ($9 | 0) >= -1 ? ($6 >>> 0 <= 4294967295 ? 0 : 1) : 0
      }
      if ($5) {
       break label$13
      }
      $9 = $2;
      $6 = $9 >> 31;
      $16 = $9;
      $14 = $6;
      $5 = $13;
      label$28 : {
       if (($9 | 0) >= 1) {
        HEAP32[$13 + 40 >> 2] = 1;
        $2 = -1;
        break label$28;
       }
       if (($2 | 0) <= -1) {
        HEAP32[$13 + 40 >> 2] = -1;
        $8 = $16;
        $16 = 0 - $8 | 0;
        $14 = 0 - ((0 < $8 >>> 0) + $14 | 0) | 0;
        $2 = 1;
        break label$28;
       }
       HEAP32[$13 + 40 >> 2] = 0;
       $16 = 0;
       $14 = 0;
       $2 = 0;
      }
      HEAP32[$5 + 40 >> 2] = $2;
      $5 = $13;
      HEAP32[$5 + 24 >> 2] = $16;
      HEAP32[$5 + 28 >> 2] = $14;
      $6 = $5;
      $8 = $11;
      HEAP32[$6 + 32 >> 2] = 0 - $8;
      HEAP32[$6 + 36 >> 2] = 0 - ((0 < $8 >>> 0) + $12 | 0);
      label$31 : {
       if (($40 | 0) >= 1) {
        HEAP32[$13 + 16 >> 2] = 1;
        $2 = -1;
        break label$31;
       }
       if (($40 | 0) <= -1) {
        HEAP32[$13 + 16 >> 2] = -1;
        $8 = $23;
        $23 = 0 - $8 | 0;
        $24 = 0 - ((0 < $8 >>> 0) + $24 | 0) | 0;
        $2 = 1;
        break label$31;
       }
       HEAP32[$13 + 16 >> 2] = 0;
       $23 = 0;
       $24 = 0;
       $2 = 0;
      }
      $10 = $13;
      HEAP32[$10 >> 2] = $23;
      HEAP32[$10 + 4 >> 2] = $24;
      $7 = $17;
      $9 = $18;
      if (($9 | 0) < 0) {
       $5 = 1
      } else {
       $5 = ($9 | 0) <= 0 ? ($7 >>> 0 > 0 ? 0 : 1) : 0
      }
      label$34 : {
       if (!$5) {
        $11 = $17;
        $12 = $18;
        break label$34;
       }
       $11 = 0;
       $12 = 0;
       $8 = $17;
       $7 = $18;
       if (($7 | 0) > -1) {
        $5 = 1
       } else {
        $5 = ($7 | 0) >= -1 ? ($8 >>> 0 <= 4294967295 ? 0 : 1) : 0
       }
       if ($5) {
        break label$34
       }
       HEAP32[$13 + 16 >> 2] = $2;
       $9 = $17;
       $11 = 0 - $9 | 0;
       $12 = 0 - ((0 < $9 >>> 0) + $18 | 0) | 0;
      }
      HEAP32[$13 + 8 >> 2] = $11;
      HEAP32[$10 + 12 >> 2] = $12;
      if ((btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($10 + 24 | 0, $10) | 0) <= 0) {
       break label$13
      }
     }
     HEAP32[$4 >> 2] = $1;
     $1 = HEAP32[$1 + 12 >> 2];
     $25 = HEAP32[$1 + 96 >> 2];
     $32 = HEAP32[$1 + 92 >> 2];
     $33 = HEAP32[$1 + 88 >> 2];
     $17 = $34;
     $18 = $28;
     continue;
    }
   }
   $8 = $17;
   $5 = $18;
   if (($5 | 0) > -1) {
    $2 = 1
   } else {
    $2 = ($5 | 0) >= -1 ? ($8 >>> 0 <= 4294967295 ? 0 : 1) : 0
   }
   if ($2) {
    break label$13
   }
   while (1) {
    $20 = (Math_imul($41, $32 - $31 | 0) + Math_imul($48, $33 - $19 | 0) | 0) + Math_imul($47, $25 - $21 | 0) | 0;
    $5 = $20;
    $8 = $5 >> 31;
    $23 = $5;
    $24 = $8;
    label$37 : {
     if (!$1) {
      break label$37
     }
     if (!HEAP32[$1 + 12 >> 2]) {
      break label$37
     }
     $2 = HEAP32[HEAP32[$1 + 4 >> 2] + 8 >> 2];
     if (HEAP32[$2 + 20 >> 2] <= HEAP32[$0 + 100 >> 2]) {
      break label$37
     }
     $15 = HEAP32[$2 + 12 >> 2];
     $28 = HEAP32[$15 + 92 >> 2];
     $22 = $28 - $32 | 0;
     $26 = HEAP32[$15 + 88 >> 2];
     $40 = $26 - $33 | 0;
     $35 = HEAP32[$15 + 96 >> 2];
     $15 = $35 - $25 | 0;
     $34 = (Math_imul($41, $22) + Math_imul($48, $40) | 0) + Math_imul($47, $15) | 0;
     $5 = $22;
     $8 = $5 >> 31;
     $9 = __wasm_i64_mul($36, $37, $5, $8);
     $7 = i64toi32_i32$HIGH_BITS;
     $5 = $40;
     $8 = $5 >> 31;
     $10 = __wasm_i64_mul($38, $39, $5, $8);
     $6 = $7 + i64toi32_i32$HIGH_BITS | 0;
     $7 = $10 + $9 | 0;
     if ($7 >>> 0 < $10 >>> 0) {
      $6 = $6 + 1 | 0
     }
     $5 = $7;
     $8 = $6;
     $9 = $15;
     $6 = $9 >> 31;
     $10 = __wasm_i64_mul($27, $29, $9, $6);
     $7 = $8 + i64toi32_i32$HIGH_BITS | 0;
     $5 = $5 + $10 | 0;
     if ($5 >>> 0 < $10 >>> 0) {
      $7 = $7 + 1 | 0
     }
     $11 = $5;
     $12 = $7;
     label$38 : {
      if (!(($5 | 0) != 0 | ($7 | 0) != 0)) {
       if (($34 | 0) > 0) {
        break label$38
       }
       break label$37;
      }
      $10 = $11;
      $6 = $12;
      if (($6 | 0) > -1) {
       $5 = 1
      } else {
       $5 = ($6 | 0) >= -1 ? ($10 >>> 0 <= 4294967295 ? 0 : 1) : 0
      }
      if ($5) {
       break label$37
      }
      $6 = $34;
      $10 = $6 >> 31;
      $16 = $6;
      $14 = $10;
      $5 = $13;
      label$40 : {
       if (($6 | 0) >= 1) {
        HEAP32[$13 + 40 >> 2] = 1;
        $7 = -1;
        break label$40;
       }
       if (($34 | 0) <= -1) {
        HEAP32[$13 + 40 >> 2] = -1;
        $7 = $16;
        $16 = 0 - $7 | 0;
        $14 = 0 - ((0 < $7 >>> 0) + $14 | 0) | 0;
        $7 = 1;
        break label$40;
       }
       HEAP32[$13 + 40 >> 2] = 0;
       $16 = 0;
       $14 = 0;
       $7 = 0;
      }
      HEAP32[$5 + 40 >> 2] = $7;
      $8 = $13;
      HEAP32[$8 + 24 >> 2] = $16;
      HEAP32[$8 + 28 >> 2] = $14;
      $7 = $11;
      HEAP32[$8 + 32 >> 2] = 0 - $7;
      HEAP32[$8 + 36 >> 2] = 0 - ((0 < $7 >>> 0) + $12 | 0);
      label$43 : {
       if (($20 | 0) >= 1) {
        HEAP32[$13 + 16 >> 2] = 1;
        $15 = -1;
        $11 = $23;
        $12 = $24;
        break label$43;
       }
       if (($20 | 0) <= -1) {
        HEAP32[$13 + 16 >> 2] = -1;
        $7 = $23;
        $11 = 0 - $7 | 0;
        $15 = 1;
        $12 = 0 - ((0 < $7 >>> 0) + $24 | 0) | 0;
        break label$43;
       }
       $15 = 0;
       HEAP32[$13 + 16 >> 2] = 0;
       $11 = 0;
       $12 = 0;
      }
      $5 = $13;
      HEAP32[$5 >> 2] = $11;
      HEAP32[$5 + 4 >> 2] = $12;
      $6 = $18;
      $12 = $6;
      $11 = $17;
      $9 = $11;
      if (($6 | 0) > 0) {
       $7 = 1
      } else {
       $7 = ($6 | 0) >= 0 ? ($9 >>> 0 <= 0 ? 0 : 1) : 0
      }
      label$46 : {
       if ($7) {
        break label$46
       }
       $11 = 0;
       $12 = 0;
       $7 = $17;
       $9 = $18;
       if (($9 | 0) > -1) {
        $7 = 1
       } else {
        $7 = ($9 | 0) >= -1 ? ($7 >>> 0 <= 4294967295 ? 0 : 1) : 0
       }
       if ($7) {
        break label$46
       }
       HEAP32[$13 + 16 >> 2] = $15;
       $6 = $17;
       $11 = 0 - $6 | 0;
       $12 = 0 - ((0 < $6 >>> 0) + $18 | 0) | 0;
      }
      HEAP32[$13 + 8 >> 2] = $11;
      HEAP32[$5 + 12 >> 2] = $12;
      if ((btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($5 + 24 | 0, $5) | 0) >= 1) {
       break label$37
      }
     }
     $1 = ($1 | 0) == ($30 | 0) ? 0 : $2;
     HEAP32[$4 >> 2] = $1;
     $5 = $28 - $31 | 0;
     $8 = $5 >> 31;
     $7 = __wasm_i64_mul($36, $37, $5, $8);
     $2 = i64toi32_i32$HIGH_BITS;
     $5 = $26 - $19 | 0;
     $8 = $5 >> 31;
     $6 = __wasm_i64_mul($38, $39, $5, $8);
     $10 = $2 + i64toi32_i32$HIGH_BITS | 0;
     $9 = $6 + $7 | 0;
     if ($9 >>> 0 < $6 >>> 0) {
      $10 = $10 + 1 | 0
     }
     $8 = $9;
     $2 = $10;
     $7 = $35 - $21 | 0;
     $10 = $7 >> 31;
     $6 = __wasm_i64_mul($27, $29, $7, $10);
     $9 = i64toi32_i32$HIGH_BITS + $2 | 0;
     $5 = $6 + $8 | 0;
     if ($5 >>> 0 < $6 >>> 0) {
      $9 = $9 + 1 | 0
     }
     $17 = $5;
     $18 = $9;
     $33 = $26;
     $32 = $28;
     $25 = $35;
     continue;
    }
    $1 = HEAP32[$3 >> 2];
    if (!$1) {
     break label$13
    }
    if (!HEAP32[$1 + 12 >> 2]) {
     break label$13
    }
    $1 = HEAP32[HEAP32[$1 + 8 >> 2] + 4 >> 2];
    if (HEAP32[$1 + 20 >> 2] <= HEAP32[$0 + 100 >> 2]) {
     break label$13
    }
    $2 = HEAP32[$1 + 12 >> 2];
    $15 = HEAP32[$2 + 92 >> 2];
    $22 = $15 - $31 | 0;
    $8 = $22;
    $9 = $8 >> 31;
    $11 = $8;
    $12 = $9;
    $10 = __wasm_i64_mul($8, $9, $49, $50);
    $5 = i64toi32_i32$HIGH_BITS;
    $31 = HEAP32[$2 + 88 >> 2];
    $40 = $31 - $19 | 0;
    $8 = $40;
    $9 = $8 >> 31;
    $16 = $8;
    $14 = $9;
    $6 = __wasm_i64_mul($8, $9, $42, $43);
    $5 = i64toi32_i32$HIGH_BITS + $5 | 0;
    $7 = $6 + $10 | 0;
    if ($7 >>> 0 < $6 >>> 0) {
     $5 = $5 + 1 | 0
    }
    $8 = $7;
    $7 = $5;
    $19 = HEAP32[$2 + 96 >> 2];
    $21 = $19 - $21 | 0;
    $10 = $21;
    $5 = $10 >> 31;
    $46 = $10;
    $26 = $5;
    $6 = __wasm_i64_mul($44, $45, $10, $5);
    if ((0 - $6 | 0) != ($8 | 0)) {
     $2 = 1
    } else {
     $2 = ($7 | 0) != (0 - (i64toi32_i32$HIGH_BITS + (0 < $6 >>> 0) | 0) | 0)
    }
    if ($2) {
     break label$13
    }
    $7 = $32 - $15 | 0;
    $5 = $7 >> 31;
    $6 = __wasm_i64_mul($36, $37, $7, $5);
    $2 = i64toi32_i32$HIGH_BITS;
    $7 = $33 - $31 | 0;
    $5 = $7 >> 31;
    $9 = __wasm_i64_mul($38, $39, $7, $5);
    $8 = i64toi32_i32$HIGH_BITS + $2 | 0;
    $10 = $6 + $9 | 0;
    if ($10 >>> 0 < $9 >>> 0) {
     $8 = $8 + 1 | 0
    }
    $5 = $10;
    $2 = $8;
    $6 = $25 - $19 | 0;
    $8 = $6 >> 31;
    $9 = __wasm_i64_mul($27, $29, $6, $8);
    $10 = $2 + i64toi32_i32$HIGH_BITS | 0;
    $7 = $5 + $9 | 0;
    if ($7 >>> 0 < $9 >>> 0) {
     $10 = $10 + 1 | 0
    }
    $34 = $7;
    $8 = $7;
    $28 = $10;
    if (($10 | 0) > -1) {
     $2 = 1
    } else {
     $2 = ($10 | 0) >= -1 ? ($8 >>> 0 <= 4294967295 ? 0 : 1) : 0
    }
    if ($2) {
     break label$13
    }
    $21 = (Math_imul($22, $41) + Math_imul($40, $48) | 0) + Math_imul($21, $47) | 0;
    $9 = __wasm_i64_mul($36, $37, $11, $12);
    $8 = i64toi32_i32$HIGH_BITS;
    $5 = __wasm_i64_mul($38, $39, $16, $14);
    $7 = $8 + i64toi32_i32$HIGH_BITS | 0;
    $6 = $5 + $9 | 0;
    if ($6 >>> 0 < $5 >>> 0) {
     $7 = $7 + 1 | 0
    }
    $8 = $6;
    $5 = __wasm_i64_mul($27, $29, $46, $26);
    $6 = $7 + i64toi32_i32$HIGH_BITS | 0;
    $10 = $5 + $8 | 0;
    if ($10 >>> 0 < $5 >>> 0) {
     $6 = $6 + 1 | 0
    }
    $11 = $10;
    $12 = $6;
    label$47 : {
     if (!(($10 | 0) != 0 | ($6 | 0) != 0)) {
      if (($21 | 0) <= 0) {
       break label$13
      }
      break label$47;
     }
     $5 = $11;
     $7 = $12;
     if (($7 | 0) > -1) {
      $2 = 1
     } else {
      $2 = ($7 | 0) >= -1 ? ($5 >>> 0 <= 4294967295 ? 0 : 1) : 0
     }
     if ($2) {
      break label$13
     }
     $7 = $21;
     $5 = $7 >> 31;
     $16 = $7;
     $14 = $5;
     $2 = $13;
     label$49 : {
      if (($7 | 0) >= 1) {
       HEAP32[$13 + 40 >> 2] = 1;
       $5 = -1;
       break label$49;
      }
      if (($21 | 0) <= -1) {
       HEAP32[$13 + 40 >> 2] = -1;
       $6 = $16;
       $16 = 0 - $6 | 0;
       $14 = 0 - ((0 < $6 >>> 0) + $14 | 0) | 0;
       $5 = 1;
       break label$49;
      }
      HEAP32[$13 + 40 >> 2] = 0;
      $16 = 0;
      $14 = 0;
      $5 = 0;
     }
     HEAP32[$2 + 40 >> 2] = $5;
     $8 = $13;
     HEAP32[$8 + 24 >> 2] = $16;
     HEAP32[$8 + 28 >> 2] = $14;
     $5 = $8;
     $6 = $11;
     HEAP32[$5 + 32 >> 2] = 0 - $6;
     HEAP32[$5 + 36 >> 2] = 0 - ((0 < $6 >>> 0) + $12 | 0);
     label$52 : {
      if (($20 | 0) >= 1) {
       HEAP32[$13 + 16 >> 2] = 1;
       $21 = -1;
       break label$52;
      }
      if (($20 | 0) <= -1) {
       HEAP32[$13 + 16 >> 2] = -1;
       $6 = $23;
       $23 = 0 - $6 | 0;
       $24 = 0 - ((0 < $6 >>> 0) + $24 | 0) | 0;
       $21 = 1;
       break label$52;
      }
      HEAP32[$13 + 16 >> 2] = 0;
      $23 = 0;
      $24 = 0;
      $21 = 0;
     }
     $10 = $13;
     HEAP32[$10 >> 2] = $23;
     HEAP32[$10 + 4 >> 2] = $24;
     $9 = $17;
     $7 = $18;
     if (($7 | 0) < 0) {
      $2 = 1
     } else {
      $2 = ($7 | 0) <= 0 ? ($9 >>> 0 > 0 ? 0 : 1) : 0
     }
     label$55 : {
      if (!$2) {
       $11 = $17;
       $12 = $18;
       break label$55;
      }
      $11 = 0;
      $12 = 0;
      $6 = $17;
      $9 = $18;
      if (($9 | 0) > -1) {
       $2 = 1
      } else {
       $2 = ($9 | 0) >= -1 ? ($6 >>> 0 <= 4294967295 ? 0 : 1) : 0
      }
      if ($2) {
       break label$55
      }
      HEAP32[$13 + 16 >> 2] = $21;
      $7 = $17;
      $11 = 0 - $7 | 0;
      $12 = 0 - ((0 < $7 >>> 0) + $18 | 0) | 0;
     }
     HEAP32[$13 + 8 >> 2] = $11;
     HEAP32[$10 + 12 >> 2] = $12;
     if ((btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($10 + 24 | 0, $10) | 0) >= 0) {
      break label$13
     }
    }
    HEAP32[$3 >> 2] = $1;
    $19 = HEAP32[$1 + 12 >> 2];
    $21 = HEAP32[$19 + 96 >> 2];
    $31 = HEAP32[$19 + 92 >> 2];
    $1 = HEAP32[$4 >> 2];
    $19 = HEAP32[$19 + 88 >> 2];
    $17 = $34;
    $18 = $28;
    continue;
   };
  }
  global$0 = $13 + 48 | 0;
 }
 
 function btConvexHullInternal__findMaxAngle_28bool_2c_20btConvexHullInternal__Vertex_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Point64_20const__2c_20btConvexHullInternal__Rational64__29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
  $11 = global$0 - 48 | 0;
  global$0 = $11;
  $13 = HEAP32[$2 + 8 >> 2];
  label$1 : {
   if (!$13) {
    break label$1
   }
   $15 = $13;
   while (1) {
    if (HEAP32[$15 + 20 >> 2] > HEAP32[$0 + 100 >> 2]) {
     HEAP32[$11 + 44 >> 2] = -1;
     $13 = HEAP32[$15 + 12 >> 2];
     $16 = HEAP32[$13 + 96 >> 2] - HEAP32[$2 + 96 >> 2] | 0;
     HEAP32[$11 + 40 >> 2] = $16;
     $7 = HEAP32[$13 + 92 >> 2] - HEAP32[$2 + 92 >> 2] | 0;
     HEAP32[$11 + 36 >> 2] = $7;
     $13 = HEAP32[$13 + 88 >> 2] - HEAP32[$2 + 88 >> 2] | 0;
     HEAP32[$11 + 32 >> 2] = $13;
     $12 = $4;
     $10 = $7 >> 31;
     $17 = $7;
     $18 = $10;
     $8 = __wasm_i64_mul(HEAP32[$12 + 8 >> 2], HEAP32[$12 + 12 >> 2], $7, $10);
     $9 = i64toi32_i32$HIGH_BITS;
     $10 = $13;
     $7 = $10 >> 31;
     $22 = $10;
     $13 = $7;
     $14 = __wasm_i64_mul(HEAP32[$12 >> 2], HEAP32[$12 + 4 >> 2], $10, $7);
     $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
     $8 = $8 + $14 | 0;
     if ($8 >>> 0 < $14 >>> 0) {
      $9 = $9 + 1 | 0
     }
     $14 = $8;
     $10 = $9;
     $7 = $4;
     $19 = HEAP32[$7 + 16 >> 2];
     $8 = HEAP32[$7 + 20 >> 2];
     $9 = $16;
     $12 = $9 >> 31;
     $7 = $12;
     $12 = __wasm_i64_mul($19, $8, $9, $7);
     $8 = i64toi32_i32$HIGH_BITS + $10 | 0;
     $10 = $14 + $12 | 0;
     if ($10 >>> 0 < $12 >>> 0) {
      $8 = $8 + 1 | 0
     }
     $19 = $10;
     $21 = $8;
     $12 = $5;
     $9 = __wasm_i64_mul(HEAP32[$12 + 8 >> 2], HEAP32[$12 + 12 >> 2], $17, $18);
     $8 = i64toi32_i32$HIGH_BITS;
     $14 = __wasm_i64_mul(HEAP32[$12 >> 2], HEAP32[$12 + 4 >> 2], $22, $13);
     $10 = $8 + i64toi32_i32$HIGH_BITS | 0;
     $9 = $9 + $14 | 0;
     if ($9 >>> 0 < $14 >>> 0) {
      $10 = $10 + 1 | 0
     }
     $12 = $9;
     $8 = $5;
     $14 = __wasm_i64_mul(HEAP32[$8 + 16 >> 2], HEAP32[$8 + 20 >> 2], $16, $7);
     $9 = $10 + i64toi32_i32$HIGH_BITS | 0;
     $7 = $14 + $12 | 0;
     if ($7 >>> 0 < $14 >>> 0) {
      $9 = $9 + 1 | 0
     }
     $17 = $7;
     $12 = $7;
     $14 = 1;
     $18 = $9;
     $8 = 0;
     if (($9 | 0) < ($8 | 0)) {
      $7 = 1
     } else {
      $7 = ($9 | 0) <= ($8 | 0) ? ($12 >>> 0 >= $14 >>> 0 ? 0 : 1) : 0
     }
     label$5 : {
      if (!$7) {
       HEAP32[$11 + 24 >> 2] = 1;
       $16 = -1;
       $13 = -1;
       break label$5;
      }
      $14 = $17;
      $8 = -1;
      $12 = $18;
      $9 = -1;
      if (($12 | 0) > ($9 | 0)) {
       $7 = 1
      } else {
       $7 = ($12 | 0) >= ($9 | 0) ? ($14 >>> 0 <= $8 >>> 0 ? 0 : 1) : 0
      }
      if (!$7) {
       HEAP32[$11 + 24 >> 2] = -1;
       $8 = 0;
       $9 = $17;
       $17 = $8 - $9 | 0;
       $18 = 0 - (($8 >>> 0 < $9 >>> 0) + $18 | 0) | 0;
       $16 = 1;
       $13 = -1;
       break label$5;
      }
      HEAP32[$11 + 24 >> 2] = 0;
      $17 = 0;
      $18 = 0;
      $16 = 0;
      $13 = 0;
     }
     HEAP32[$11 + 8 >> 2] = $17;
     HEAP32[$11 + 12 >> 2] = $18;
     label$8 : {
      label$9 : {
       label$10 : {
        $14 = $19;
        $9 = 0;
        $7 = $21;
        $8 = 0;
        if (($7 | 0) > ($8 | 0)) {
         $7 = 1
        } else {
         $7 = ($7 | 0) >= ($8 | 0) ? ($14 >>> 0 <= $9 >>> 0 ? 0 : 1) : 0
        }
        if (!$7) {
         $9 = $19;
         $8 = -1;
         $14 = $21;
         $7 = -1;
         if (($14 | 0) > ($7 | 0)) {
          $7 = 1
         } else {
          $7 = ($14 | 0) >= ($7 | 0) ? ($9 >>> 0 <= $8 >>> 0 ? 0 : 1) : 0
         }
         if ($7) {
          break label$10
         }
         HEAP32[$11 + 24 >> 2] = $16;
         $8 = 0;
         $7 = $19;
         $19 = $8 - $7 | 0;
         $21 = 0 - (($8 >>> 0 < $7 >>> 0) + $21 | 0) | 0;
        }
        HEAP32[$11 + 16 >> 2] = $19;
        HEAP32[$11 + 20 >> 2] = $21;
        break label$9;
       }
       HEAP32[$11 + 16 >> 2] = 0;
       HEAP32[$11 + 20 >> 2] = 0;
       if (!$13) {
        break label$8
       }
      }
      if (!$20) {
       $8 = HEAP32[$11 + 12 >> 2];
       $10 = $6;
       HEAP32[$10 >> 2] = HEAP32[$11 + 8 >> 2];
       HEAP32[$10 + 4 >> 2] = $8;
       HEAP32[$10 + 16 >> 2] = HEAP32[$11 + 24 >> 2];
       $9 = $11 + 16 | 0;
       $7 = HEAP32[$9 >> 2];
       $8 = $10 + 8 | 0;
       $10 = HEAP32[$9 + 4 >> 2];
       HEAP32[$8 >> 2] = $7;
       HEAP32[$8 + 4 >> 2] = $10;
       $20 = $15;
       break label$8;
      }
      $13 = btConvexHullInternal__Rational64__compare_28btConvexHullInternal__Rational64_20const__29_20const($11 + 8 | 0, $6);
      if (($13 | 0) <= -1) {
       $8 = HEAP32[$11 + 12 >> 2];
       $10 = $6;
       HEAP32[$10 >> 2] = HEAP32[$11 + 8 >> 2];
       HEAP32[$10 + 4 >> 2] = $8;
       HEAP32[$10 + 16 >> 2] = HEAP32[$11 + 24 >> 2];
       $9 = $11 + 16 | 0;
       $7 = HEAP32[$9 >> 2];
       $8 = $10 + 8 | 0;
       $10 = HEAP32[$9 + 4 >> 2];
       HEAP32[$8 >> 2] = $7;
       HEAP32[$8 + 4 >> 2] = $10;
       $20 = $15;
       break label$8;
      }
      if ($13) {
       break label$8
      }
      $20 = $1 ^ (btConvexHullInternal__getOrientation_28btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point32_20const__29($20, $15, $3, $11 + 32 | 0) | 0) != 2 ? $15 : $20;
     }
     $13 = HEAP32[$2 + 8 >> 2];
    }
    $15 = HEAP32[$15 >> 2];
    if (($13 | 0) != ($15 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $11 + 48 | 0;
  return $20;
 }
 
 function btConvexHullInternal__getOrientation_28btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Edge_20const__2c_20btConvexHullInternal__Point32_20const__2c_20btConvexHullInternal__Point32_20const__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  $8 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   if (HEAP32[$0 >> 2] == ($1 | 0)) {
    $4 = 2;
    if (($1 | 0) != ($8 | 0)) {
     break label$1
    }
    $8 = HEAP32[$1 + 12 >> 2];
    $1 = HEAP32[HEAP32[$1 + 8 >> 2] + 12 >> 2];
    $10 = HEAP32[$1 + 96 >> 2];
    $12 = HEAP32[$8 + 96 >> 2] - $10 | 0;
    $0 = HEAP32[$0 + 12 >> 2];
    $9 = HEAP32[$1 + 92 >> 2];
    $13 = HEAP32[$0 + 92 >> 2] - $9 | 0;
    $9 = HEAP32[$8 + 92 >> 2] - $9 | 0;
    $10 = HEAP32[$0 + 96 >> 2] - $10 | 0;
    $4 = Math_imul($12, $13) - Math_imul($9, $10) | 0;
    $6 = $4 >> 31;
    $5 = $4;
    $11 = $6;
    $14 = HEAP32[$2 + 8 >> 2];
    $15 = HEAP32[$3 + 4 >> 2];
    $7 = HEAP32[$2 + 4 >> 2];
    $16 = HEAP32[$3 + 8 >> 2];
    $4 = Math_imul($14, $15) - Math_imul($7, $16) | 0;
    $6 = $4 >> 31;
    $17 = __wasm_i64_mul($5, $11, $4, $6);
    $5 = i64toi32_i32$HIGH_BITS;
    $1 = HEAP32[$1 + 88 >> 2];
    $0 = HEAP32[$0 + 88 >> 2] - $1 | 0;
    $1 = HEAP32[$8 + 88 >> 2] - $1 | 0;
    $4 = Math_imul($0, $9) - Math_imul($13, $1) | 0;
    $6 = $4 >> 31;
    $11 = $4;
    $9 = $6;
    $8 = HEAP32[$3 >> 2];
    $2 = HEAP32[$2 >> 2];
    $4 = Math_imul($7, $8) - Math_imul($15, $2) | 0;
    $6 = $4 >> 31;
    $7 = __wasm_i64_mul($11, $9, $4, $6);
    $3 = i64toi32_i32$HIGH_BITS + $5 | 0;
    $5 = $7 + $17 | 0;
    if ($5 >>> 0 < $7 >>> 0) {
     $3 = $3 + 1 | 0
    }
    $4 = $5;
    $6 = $3;
    $1 = Math_imul($1, $10) - Math_imul($0, $12) | 0;
    $3 = $1 >> 31;
    $0 = $1;
    $5 = $3;
    $1 = Math_imul($2, $16) - Math_imul($8, $14) | 0;
    $3 = $1 >> 31;
    $7 = __wasm_i64_mul($0, $5, $1, $3);
    $5 = $6 + i64toi32_i32$HIGH_BITS | 0;
    $4 = $4 + $7 | 0;
    if ($4 >>> 0 < $7 >>> 0) {
     $5 = $5 + 1 | 0
    }
    $3 = $4;
    $7 = 0;
    $6 = 0;
    if (($5 | 0) > ($6 | 0)) {
     $0 = 1
    } else {
     $0 = ($5 | 0) >= ($6 | 0) ? ($3 >>> 0 <= $7 >>> 0 ? 0 : 1) : 0
    }
    return $0 ? 2 : 1;
   }
   $4 = ($1 | 0) == ($8 | 0);
  }
  return $4;
 }
 
 function btConvexHullInternal__compute_28void_20const__2c_20bool_2c_20int_2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = global$0 - 48 | 0;
  global$0 = $4;
  label$1 : {
   label$2 : {
    if (($2 | 0) < 1) {
     break label$2
    }
    $5 = -246811958;
    $15 = 1900671690;
    $13 = $2;
    $16 = $1;
    $10 = 1900671690;
    $3 = 1900671690;
    $7 = -246811958;
    $6 = -246811958;
    while (1) {
     $8 = HEAPF32[$16 + 8 >> 2];
     $5 = (wasm2js_scratch_store_i32(0, $5), wasm2js_scratch_load_f32()) < $8 ? $9 : $5;
     $11 = HEAPF32[$16 + 4 >> 2];
     $7 = (wasm2js_scratch_store_i32(0, $7), wasm2js_scratch_load_f32()) < $11 ? $22 : $7;
     $15 = $8 < (wasm2js_scratch_store_i32(0, $15), wasm2js_scratch_load_f32()) ? $9 : $15;
     $10 = $11 < (wasm2js_scratch_store_i32(0, $10), wasm2js_scratch_load_f32()) ? $22 : $10;
     $8 = HEAPF32[$16 >> 2];
     $6 = (wasm2js_scratch_store_i32(0, $6), wasm2js_scratch_load_f32()) < $8 ? $9 : $6;
     $3 = $8 < (wasm2js_scratch_store_i32(0, $3), wasm2js_scratch_load_f32()) ? $9 : $3;
     $16 = $16 + 16 | 0;
     $13 = $13 + -1 | 0;
     if ($13) {
      continue
     }
     break;
    };
    break label$1;
   }
   $3 = 1900671690;
   $6 = -246811958;
   $7 = -246811958;
   $5 = -246811958;
   $10 = 1900671690;
   $15 = 1900671690;
  }
  $12 = (wasm2js_scratch_store_i32(0, $7), wasm2js_scratch_load_f32());
  $17 = (wasm2js_scratch_store_i32(0, $10), wasm2js_scratch_load_f32());
  $11 = Math_fround($12 - $17);
  $18 = (wasm2js_scratch_store_i32(0, $5), wasm2js_scratch_load_f32());
  $19 = (wasm2js_scratch_store_i32(0, $15), wasm2js_scratch_load_f32());
  $8 = Math_fround($18 - $19);
  $7 = $11 < $8;
  $20 = (wasm2js_scratch_store_i32(0, $6), wasm2js_scratch_load_f32());
  $21 = (wasm2js_scratch_store_i32(0, $3), wasm2js_scratch_load_f32());
  $14 = Math_fround($20 - $21);
  $6 = $14 < $8;
  $5 = $14 < $11;
  $3 = $5 ? ($7 ? 2 : 1) : $6 << 1;
  HEAP32[$0 + 112 >> 2] = $3;
  $6 = $5 ? ($6 ^ 1) << 1 : $7 ? 1 : 2;
  if (($6 | 0) == ($3 | 0)) {
   $6 = ($3 + 1 >>> 0) % 3 | 0
  }
  HEAP32[$0 + 104 >> 2] = $6;
  $6 = ($3 ^ 3) - $6 | 0;
  HEAP32[$0 + 108 >> 2] = $6;
  $8 = Math_fround($8 * Math_fround(9.788566967472434e-05));
  $11 = Math_fround($11 * Math_fround(9.788566967472434e-05));
  $14 = Math_fround($14 * Math_fround(9.788566967472434e-05));
  HEAP32[$0 + 12 >> 2] = 0;
  if ((($6 + 1 | 0) % 3 | 0) != ($3 | 0)) {
   $11 = Math_fround(-$11);
   $14 = Math_fround(-$14);
   $8 = Math_fround(-$8);
  }
  HEAPF32[$0 + 8 >> 2] = $8;
  HEAPF32[$0 + 4 >> 2] = $11;
  HEAPF32[$0 >> 2] = $14;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAPF32[$0 + 24 >> 2] = Math_fround($18 + $19) * Math_fround(.5);
  HEAPF32[$0 + 20 >> 2] = Math_fround($12 + $17) * Math_fround(.5);
  HEAPF32[$0 + 16 >> 2] = Math_fround($20 + $21) * Math_fround(.5);
  HEAP32[$4 + 36 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAP32[$4 + 32 >> 2] = 0;
  $10 = $8 != Math_fround(0.0);
  $12 = Math_fround(Math_fround(1.0) / $8);
  $15 = $11 != Math_fround(0.0);
  $17 = Math_fround(Math_fround(1.0) / $11);
  $16 = $14 != Math_fround(0.0);
  $18 = Math_fround(Math_fround(1.0) / $14);
  HEAP8[$4 + 40 | 0] = 1;
  label$9 : {
   if (($2 | 0) < 1) {
    break label$9
   }
   $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($2 << 4);
   HEAP32[$4 + 36 >> 2] = $3;
   HEAP32[$4 + 32 >> 2] = $2;
   HEAP8[$4 + 40 | 0] = 1;
   $5 = $4 + 16 | 0;
   $6 = HEAP32[$5 >> 2];
   $9 = HEAP32[$5 + 4 >> 2];
   $13 = $3 + 8 | 0;
   HEAP32[$13 >> 2] = $6;
   HEAP32[$13 + 4 >> 2] = $9;
   $13 = HEAP32[$4 + 12 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$4 + 8 >> 2];
   HEAP32[$3 + 4 >> 2] = $13;
   if (($2 | 0) == 1) {
    break label$9
   }
   $6 = $2 + -1 | 0;
   $3 = 16;
   while (1) {
    $9 = HEAP32[$4 + 12 >> 2];
    $7 = $3 + HEAP32[$4 + 36 >> 2] | 0;
    HEAP32[$7 >> 2] = HEAP32[$4 + 8 >> 2];
    HEAP32[$7 + 4 >> 2] = $9;
    $13 = HEAP32[$5 + 4 >> 2];
    $9 = $7 + 8 | 0;
    HEAP32[$9 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$9 + 4 >> 2] = $13;
    $3 = $3 + 16 | 0;
    $6 = $6 + -1 | 0;
    if ($6) {
     continue
    }
    break;
   };
  }
  $8 = $10 ? $12 : $8;
  $11 = $15 ? $17 : $11;
  $14 = $16 ? $18 : $14;
  HEAP32[$4 + 28 >> 2] = $2;
  label$11 : {
   if (($2 | 0) < 1) {
    break label$11
   }
   $3 = HEAP32[$4 + 36 >> 2] + 8 | 0;
   $10 = ($4 + 8 | 0) + (HEAP32[$0 + 104 >> 2] << 2) | 0;
   $15 = ($4 + 8 | 0) + (HEAP32[$0 + 112 >> 2] << 2) | 0;
   $16 = ($4 + 8 | 0) + (HEAP32[$0 + 108 >> 2] << 2) | 0;
   $19 = HEAPF32[$0 + 24 >> 2];
   $20 = HEAPF32[$0 + 20 >> 2];
   $21 = HEAPF32[$0 + 16 >> 2];
   $6 = 0;
   while (1) {
    $12 = HEAPF32[$1 + 4 >> 2];
    $17 = HEAPF32[$1 + 8 >> 2];
    $18 = HEAPF32[$1 >> 2];
    HEAP32[$4 + 20 >> 2] = 0;
    HEAPF32[$4 + 8 >> 2] = $14 * Math_fround($18 - $21);
    HEAPF32[$4 + 16 >> 2] = $8 * Math_fround($17 - $19);
    HEAPF32[$4 + 12 >> 2] = $11 * Math_fround($12 - $20);
    HEAP32[$3 + 4 >> 2] = $6;
    $7 = $3 + -8 | 0;
    $12 = HEAPF32[$16 >> 2];
    label$15 : {
     if (Math_fround(Math_abs($12)) < Math_fround(2147483648.0)) {
      $5 = ~~$12;
      break label$15;
     }
     $5 = -2147483648;
    }
    HEAP32[$7 >> 2] = $5;
    $7 = $3 + -4 | 0;
    $12 = HEAPF32[$15 >> 2];
    label$17 : {
     if (Math_fround(Math_abs($12)) < Math_fround(2147483648.0)) {
      $5 = ~~$12;
      break label$17;
     }
     $5 = -2147483648;
    }
    HEAP32[$7 >> 2] = $5;
    $7 = $3;
    $12 = HEAPF32[$10 >> 2];
    label$19 : {
     if (Math_fround(Math_abs($12)) < Math_fround(2147483648.0)) {
      $5 = ~~$12;
      break label$19;
     }
     $5 = -2147483648;
    }
    HEAP32[$7 >> 2] = $5;
    $3 = $3 + 16 | 0;
    $1 = $1 + 16 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
   if (($2 | 0) < 2) {
    break label$11
   }
   void_20btAlignedObjectArray_btConvexHullInternal__Point32___quickSortInternal_pointCmp__28pointCmp_20const__2c_20int_2c_20int_29($4 + 24 | 0, $4 + 8 | 0, 0, $2 + -1 | 0);
  }
  HEAP32[$0 + 44 >> 2] = $2;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = HEAP32[$0 + 32 >> 2];
  $7 = HEAP32[$0 + 84 >> 2];
  if (($7 | 0) < ($2 | 0)) {
   if (HEAP32[$0 + 88 >> 2] < ($2 | 0)) {
    label$30 : {
     if (!$2) {
      $6 = 0;
      $3 = $7;
      break label$30;
     }
     $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($2 << 2);
     $3 = HEAP32[$0 + 84 >> 2];
    }
    if (($3 | 0) >= 1) {
     $1 = 0;
     while (1) {
      HEAP32[$1 + $6 >> 2] = HEAP32[$1 + HEAP32[$0 + 92 >> 2] >> 2];
      $1 = $1 + 4 | 0;
      $3 = $3 + -1 | 0;
      if ($3) {
       continue
      }
      break;
     };
    }
    $1 = HEAP32[$0 + 92 >> 2];
    if ($1) {
     if (HEAPU8[$0 + 96 | 0]) {
      btAlignedFreeInternal_28void__29($1)
     }
     HEAP32[$0 + 92 >> 2] = 0;
    }
    HEAP32[$0 + 92 >> 2] = $6;
    HEAP32[$0 + 88 >> 2] = $2;
    HEAP8[$0 + 96 | 0] = 1;
   }
   $1 = $7 << 2;
   $3 = $2 - $7 | 0;
   while (1) {
    HEAP32[$1 + HEAP32[$0 + 92 >> 2] >> 2] = 0;
    $1 = $1 + 4 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 84 >> 2] = $2;
  if (($2 | 0) >= 1) {
   $10 = 0;
   while (1) {
    $5 = HEAP32[$0 + 40 >> 2];
    label$39 : {
     if ($5) {
      break label$39
     }
     $1 = HEAP32[$0 + 36 >> 2];
     label$40 : {
      if ($1) {
       HEAP32[$0 + 36 >> 2] = HEAP32[$1 + 8 >> 2];
       break label$40;
      }
      $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(12);
      HEAP32[$1 + 8 >> 2] = 0;
      $3 = HEAP32[$0 + 44 >> 2];
      HEAP32[$1 + 4 >> 2] = $3;
      (wasm2js_i32$0 = $1, wasm2js_i32$1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($3, 112))), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      $3 = HEAP32[$0 + 32 >> 2];
      HEAP32[$0 + 32 >> 2] = $1;
      HEAP32[$1 + 8 >> 2] = $3;
     }
     $5 = HEAP32[$1 >> 2];
     $6 = HEAP32[$1 + 4 >> 2];
     if (($6 | 0) < 1) {
      break label$39
     }
     $1 = 0;
     $3 = $5;
     while (1) {
      $7 = $3 + 112 | 0;
      $1 = $1 + 1 | 0;
      HEAP32[$3 >> 2] = ($1 | 0) < ($6 | 0) ? $7 : 0;
      $3 = $7;
      if (($1 | 0) != ($6 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$0 + 40 >> 2] = HEAP32[$5 >> 2];
    $1 = $5 + 8 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$5 + 16 >> 2] = 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$5 + 4 >> 2] = 0;
    HEAP32[$5 + 104 >> 2] = -1;
    HEAP32[$1 >> 2] = 0;
    $1 = HEAP32[$4 + 36 >> 2] + ($10 << 4) | 0;
    $3 = HEAP32[$1 >> 2];
    $9 = HEAP32[$1 + 4 >> 2];
    HEAP32[$5 + 88 >> 2] = $3;
    HEAP32[$5 + 92 >> 2] = $9;
    $7 = $1 + 8 | 0;
    $1 = HEAP32[$7 >> 2];
    $13 = HEAP32[$7 + 4 >> 2];
    $9 = $5 + 96 | 0;
    HEAP32[$9 >> 2] = $1;
    HEAP32[$9 + 4 >> 2] = $13;
    HEAP32[$5 + 104 >> 2] = -1;
    HEAP32[HEAP32[$0 + 92 >> 2] + ($10 << 2) >> 2] = $5;
    $10 = $10 + 1 | 0;
    if (($2 | 0) != ($10 | 0)) {
     continue
    }
    break;
   };
  }
  $1 = HEAP32[$4 + 36 >> 2];
  if ($1) {
   if (HEAPU8[$4 + 40 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$4 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 116 >> 2] = 0;
  HEAP32[$0 + 120 >> 2] = 0;
  HEAP32[$0 + 100 >> 2] = -3;
  HEAP32[$0 + 60 >> 2] = Math_imul($2, 6);
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = HEAP32[$0 + 48 >> 2];
  HEAP32[$4 + 36 >> 2] = 0;
  HEAP8[$4 + 40 | 0] = 1;
  HEAP32[$4 + 28 >> 2] = 0;
  HEAP32[$4 + 32 >> 2] = 0;
  $9 = $4 + 16 | 0;
  HEAP32[$9 >> 2] = 0;
  HEAP32[$9 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  btConvexHullInternal__computeInternal_28int_2c_20int_2c_20btConvexHullInternal__IntermediateHull__29($0, 0, $2, $4 + 8 | 0);
  HEAP32[$0 + 124 >> 2] = HEAP32[$4 + 8 >> 2];
  $1 = HEAP32[$4 + 36 >> 2];
  if ($1) {
   if (HEAPU8[$4 + 40 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$4 + 36 >> 2] = 0;
  }
  global$0 = $4 + 48 | 0;
 }
 
 function void_20btAlignedObjectArray_btConvexHullInternal__Point32___quickSortInternal_pointCmp__28pointCmp_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  $14 = global$0 - 16 | 0;
  global$0 = $14;
  $13 = HEAP32[$0 + 12 >> 2];
  $4 = $13 + (($2 + $3 | 0) / 2 << 4) | 0;
  $17 = HEAP32[$4 + 8 >> 2];
  $15 = HEAP32[$4 + 4 >> 2];
  $16 = HEAP32[$4 >> 2];
  $9 = $2;
  $10 = $3;
  while (1) {
   $4 = ($9 << 4) + $13 | 0;
   while (1) {
    label$2 : {
     $7 = HEAP32[$4 + 4 >> 2];
     label$4 : {
      if (($7 | 0) < ($15 | 0)) {
       break label$4
      }
      if (($7 | 0) != ($15 | 0)) {
       break label$2
      }
      $7 = HEAP32[$4 >> 2];
      if (($7 | 0) < ($16 | 0)) {
       break label$4
      }
      if (($7 | 0) != ($16 | 0)) {
       break label$2
      }
      if (HEAP32[$4 + 8 >> 2] >= ($17 | 0)) {
       break label$2
      }
     }
     $4 = $4 + 16 | 0;
     $9 = $9 + 1 | 0;
     continue;
    }
    break;
   };
   $7 = $10 << 4;
   while (1) {
    label$5 : {
     $8 = $7 + $13 | 0;
     $11 = HEAP32[$8 + 4 >> 2];
     label$7 : {
      if (($15 | 0) < ($11 | 0)) {
       break label$7
      }
      if (($11 | 0) != ($15 | 0)) {
       break label$5
      }
      $11 = HEAP32[$8 >> 2];
      if (($16 | 0) < ($11 | 0)) {
       break label$7
      }
      if (($11 | 0) != ($16 | 0)) {
       break label$5
      }
      if (($17 | 0) >= HEAP32[$8 + 8 >> 2]) {
       break label$5
      }
     }
     $7 = $7 + -16 | 0;
     $10 = $10 + -1 | 0;
     continue;
    }
    break;
   };
   if (($9 | 0) <= ($10 | 0)) {
    $13 = $4 + 8 | 0;
    $5 = $13;
    $6 = HEAP32[$5 + 4 >> 2];
    $11 = $14 + 8 | 0;
    $12 = $11;
    HEAP32[$12 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$12 + 4 >> 2] = $6;
    $12 = HEAP32[$4 + 4 >> 2];
    $6 = $14;
    HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 4 >> 2] = $12;
    $5 = $8;
    $8 = HEAP32[$5 >> 2];
    $6 = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 >> 2] = $8;
    HEAP32[$4 + 4 >> 2] = $6;
    $5 = $5 + 8 | 0;
    $4 = HEAP32[$5 >> 2];
    $12 = HEAP32[$5 + 4 >> 2];
    $6 = $13;
    HEAP32[$6 >> 2] = $4;
    HEAP32[$6 + 4 >> 2] = $12;
    $5 = $14;
    $8 = HEAP32[$5 >> 2];
    $6 = HEAP32[$5 + 4 >> 2];
    $4 = $7 + HEAP32[$0 + 12 >> 2] | 0;
    HEAP32[$4 >> 2] = $8;
    HEAP32[$4 + 4 >> 2] = $6;
    $5 = $11;
    $8 = HEAP32[$5 >> 2];
    $12 = HEAP32[$5 + 4 >> 2];
    $6 = $4 + 8 | 0;
    HEAP32[$6 >> 2] = $8;
    HEAP32[$6 + 4 >> 2] = $12;
    $9 = $9 + 1 | 0;
    $10 = $10 + -1 | 0;
   }
   if (($9 | 0) <= ($10 | 0)) {
    $13 = HEAP32[$0 + 12 >> 2];
    continue;
   }
   break;
  };
  if (($10 | 0) > ($2 | 0)) {
   void_20btAlignedObjectArray_btConvexHullInternal__Point32___quickSortInternal_pointCmp__28pointCmp_20const__2c_20int_2c_20int_29($0, $1, $2, $10)
  }
  if (($9 | 0) < ($3 | 0)) {
   void_20btAlignedObjectArray_btConvexHullInternal__Point32___quickSortInternal_pointCmp__28pointCmp_20const__2c_20int_2c_20int_29($0, $1, $9, $3)
  }
  global$0 = $14 + 16 | 0;
 }
 
 function btConvexHullInternal__getCoordinates_28btConvexHullInternal__Vertex_20const__29($0, $1, $2) {
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (HEAP32[$2 + 100 >> 2] >= 0) {
        HEAPF32[(HEAP32[$1 + 108 >> 2] << 2) + $3 >> 2] = HEAP32[$2 + 88 >> 2];
        break label$5;
       }
       $4 = btConvexHullInternal__Int128__toScalar_28_29_20const($2 + 24 | 0);
       $6 = $2 + 72 | 0;
       $5 = btConvexHullInternal__Int128__toScalar_28_29_20const($6);
       HEAPF32[(HEAP32[$1 + 108 >> 2] << 2) + $3 >> 2] = $4 / $5;
       if (HEAP32[$2 + 100 >> 2] < 0) {
        break label$4
       }
      }
      HEAPF32[(HEAP32[$1 + 112 >> 2] << 2) + $3 >> 2] = HEAP32[$2 + 92 >> 2];
      break label$3;
     }
     $4 = btConvexHullInternal__Int128__toScalar_28_29_20const($2 + 40 | 0);
     $5 = btConvexHullInternal__Int128__toScalar_28_29_20const($6);
     HEAPF32[(HEAP32[$1 + 112 >> 2] << 2) + $3 >> 2] = $4 / $5;
     if (HEAP32[$2 + 100 >> 2] < 0) {
      break label$2
     }
    }
    $4 = Math_fround(HEAP32[$2 + 96 >> 2]);
    break label$1;
   }
   $4 = Math_fround(btConvexHullInternal__Int128__toScalar_28_29_20const($2 + 56 | 0) / btConvexHullInternal__Int128__toScalar_28_29_20const($2 + 72 | 0));
  }
  HEAPF32[(HEAP32[$1 + 104 >> 2] << 2) + $3 >> 2] = $4;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAPF32[$0 + 8 >> 2] = Math_fround(HEAPF32[$3 + 8 >> 2] * HEAPF32[$1 + 8 >> 2]) + HEAPF32[$1 + 24 >> 2];
  HEAPF32[$0 + 4 >> 2] = Math_fround(HEAPF32[$3 + 4 >> 2] * HEAPF32[$1 + 4 >> 2]) + HEAPF32[$1 + 20 >> 2];
  HEAPF32[$0 >> 2] = Math_fround(HEAPF32[$3 >> 2] * HEAPF32[$1 >> 2]) + HEAPF32[$1 + 16 >> 2];
  global$0 = $3 + 16 | 0;
 }
 
 function btConvexHullInternal__Int128__toScalar_28_29_20const($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0);
  $5 = global$0 - 16 | 0;
  global$0 = $5;
  $2 = HEAP32[$0 + 12 >> 2];
  $8 = $2;
  $7 = HEAP32[$0 + 8 >> 2];
  $6 = $7;
  if (($2 | 0) < 0) {
   $1 = 1
  } else {
   $1 = ($2 | 0) <= ($3 | 0) ? ($6 >>> 0 >= $1 >>> 0 ? 0 : 1) : 0
  }
  label$1 : {
   if (!$1) {
    $1 = $0;
    $9 = Math_fround(Math_fround(Math_fround(+($7 >>> 0) + 4294967296.0 * +($8 >>> 0)) * Math_fround(18446744073709551615.0)) + Math_fround(+HEAPU32[$1 >> 2] + 4294967296.0 * +HEAPU32[$1 + 4 >> 2]));
    break label$1;
   }
   $1 = $0;
   $3 = HEAP32[$1 >> 2];
   $0 = $3;
   $6 = HEAP32[$1 + 4 >> 2];
   $2 = $6;
   $1 = 0;
   $4 = $1 - $0 | 0;
   $0 = 0 - (($1 >>> 0 < $0 >>> 0) + $2 | 0) | 0;
   $2 = $4;
   $1 = $5;
   HEAP32[$1 >> 2] = $2;
   HEAP32[$1 + 4 >> 2] = $0;
   $2 = !($3 | $6);
   $4 = $8 ^ -1;
   $3 = $7 ^ -1;
   $2 = $2 + $3 | 0;
   if ($2 >>> 0 < $3 >>> 0) {
    $4 = $4 + 1 | 0
   }
   HEAP32[$1 + 8 >> 2] = $2;
   HEAP32[$1 + 12 >> 2] = $4;
   $9 = Math_fround(-btConvexHullInternal__Int128__toScalar_28_29_20const($5));
  }
  global$0 = $5 + 16 | 0;
  return $9;
 }
 
 function btConvexHullComputer__compute_28void_20const__2c_20bool_2c_20int_2c_20int_2c_20float_2c_20float_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  $4 = global$0 - 144 | 0;
  global$0 = $4;
  label$1 : {
   if (($2 | 0) <= 0) {
    $2 = HEAP32[$0 + 12 >> 2];
    if ($2) {
     if (HEAPU8[$0 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($2)
     }
     HEAP32[$0 + 12 >> 2] = 0;
    }
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP8[$0 + 16 | 0] = 1;
    HEAP32[$0 + 4 >> 2] = 0;
    HEAP32[$0 + 8 >> 2] = 0;
    $2 = HEAP32[$0 + 32 >> 2];
    if ($2) {
     if (HEAPU8[$0 + 36 | 0]) {
      btAlignedFreeInternal_28void__29($2)
     }
     HEAP32[$0 + 32 >> 2] = 0;
    }
    HEAP32[$0 + 32 >> 2] = 0;
    HEAP32[$0 + 24 >> 2] = 0;
    HEAP32[$0 + 28 >> 2] = 0;
    HEAP8[$0 + 36 | 0] = 1;
    $2 = HEAP32[$0 + 52 >> 2];
    if ($2) {
     if (HEAPU8[$0 + 56 | 0]) {
      btAlignedFreeInternal_28void__29($2)
     }
     HEAP32[$0 + 52 >> 2] = 0;
    }
    HEAP32[$0 + 52 >> 2] = 0;
    HEAP32[$0 + 44 >> 2] = 0;
    HEAP32[$0 + 48 >> 2] = 0;
    HEAP8[$0 + 56 | 0] = 1;
    break label$1;
   }
   HEAP8[$4 + 112 | 0] = 1;
   $3 = $4 + 88 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 256;
   $3 = $4 + 72 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 256;
   $3 = $4 + 56 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 256;
   HEAP32[$4 + 108 >> 2] = 0;
   $3 = $4 + 100 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$4 + 80 >> 2] = 0;
   HEAP32[$4 + 84 >> 2] = 0;
   HEAP32[$4 + 64 >> 2] = 0;
   HEAP32[$4 + 68 >> 2] = 0;
   HEAP32[$4 + 48 >> 2] = 0;
   HEAP32[$4 + 52 >> 2] = 0;
   btConvexHullInternal__compute_28void_20const__2c_20bool_2c_20int_2c_20int_29($4 + 16 | 0, $1, $2);
   $2 = HEAP32[$0 + 4 >> 2];
   if (($2 | 0) <= -1) {
    if (HEAP32[$0 + 8 >> 2] <= -1) {
     $1 = HEAP32[$0 + 12 >> 2];
     if ($1) {
      if (HEAPU8[$0 + 16 | 0]) {
       btAlignedFreeInternal_28void__29($1)
      }
      HEAP32[$0 + 12 >> 2] = 0;
     }
     HEAP8[$0 + 16 | 0] = 1;
     HEAP32[$0 + 8 >> 2] = 0;
     HEAP32[$0 + 12 >> 2] = 0;
    }
    $1 = $2 << 4;
    while (1) {
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $1 + HEAP32[$0 + 12 >> 2] | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     $3 = $4 + 8 | 0;
     $6 = HEAP32[$3 >> 2];
     $11 = HEAP32[$3 + 4 >> 2];
     $3 = $5 + 8 | 0;
     HEAP32[$3 >> 2] = $6;
     HEAP32[$3 + 4 >> 2] = $11;
     $1 = $1 + 16 | 0;
     $5 = $2 + 1 | 0;
     $6 = $5 >>> 0 >= $2 >>> 0;
     $2 = $5;
     if ($6) {
      continue
     }
     break;
    };
   }
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$4 + 8 >> 2] = 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   $2 = HEAP32[$0 + 24 >> 2];
   if (($2 | 0) <= -1) {
    if (HEAP32[$0 + 28 >> 2] <= -1) {
     $1 = HEAP32[$0 + 32 >> 2];
     if ($1) {
      if (HEAPU8[$0 + 36 | 0]) {
       btAlignedFreeInternal_28void__29($1)
      }
      HEAP32[$0 + 32 >> 2] = 0;
     }
     HEAP32[$0 + 28 >> 2] = 0;
     HEAP32[$0 + 32 >> 2] = 0;
     HEAP8[$0 + 36 | 0] = 1;
    }
    $1 = Math_imul($2, 12);
    while (1) {
     $3 = HEAP32[$4 + 4 >> 2];
     $5 = $1 + HEAP32[$0 + 32 >> 2] | 0;
     HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$5 + 4 >> 2] = $3;
     HEAP32[$5 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
     $1 = $1 + 12 | 0;
     $5 = $2 + 1 | 0;
     $6 = $5 >>> 0 >= $2 >>> 0;
     $2 = $5;
     if ($6) {
      continue
     }
     break;
    };
   }
   HEAP32[$0 + 24 >> 2] = 0;
   $2 = HEAP32[$0 + 44 >> 2];
   if (($2 | 0) <= -1) {
    $1 = HEAP32[$0 + 52 >> 2];
    if (HEAP32[$0 + 48 >> 2] <= -1) {
     label$29 : {
      if (!$1) {
       break label$29
      }
      if (!HEAPU8[$0 + 56 | 0]) {
       break label$29
      }
      btAlignedFreeInternal_28void__29($1);
     }
     HEAP8[$0 + 56 | 0] = 1;
     HEAP32[$0 + 48 >> 2] = 0;
     HEAP32[$0 + 52 >> 2] = 0;
     $1 = 0;
    }
    $2 = $2 << 2;
    memset($1 + $2 | 0, 0, 0 - $2 | 0);
   }
   HEAP32[$0 + 44 >> 2] = 0;
   $2 = HEAP32[$4 + 140 >> 2];
   label$9 : {
    if (HEAP32[$2 + 104 >> 2] > -1) {
     break label$9
    }
    HEAP32[$2 + 104 >> 2] = 0;
    $14 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(4);
    HEAP32[$14 >> 2] = $2;
    $15 = 1;
    $12 = 1;
    $18 = $14;
    while (1) {
     $7 = HEAP32[($16 << 2) + $14 >> 2];
     btConvexHullInternal__getCoordinates_28btConvexHullInternal__Vertex_20const__29($4, $4 + 16 | 0, $7);
     $1 = HEAP32[$0 + 4 >> 2];
     label$31 : {
      if (($1 | 0) != HEAP32[$0 + 8 >> 2]) {
       break label$31
      }
      $13 = $1 ? $1 << 1 : 1;
      if (($1 | 0) >= ($13 | 0)) {
       break label$31
      }
      label$32 : {
       if (!$13) {
        $10 = 0;
        break label$32;
       }
       $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13 << 4);
       $1 = HEAP32[$0 + 4 >> 2];
      }
      if (($1 | 0) >= 1) {
       $2 = 0;
       while (1) {
        $6 = $2 + HEAP32[$0 + 12 >> 2] | 0;
        $3 = $6;
        $8 = HEAP32[$3 >> 2];
        $11 = HEAP32[$3 + 4 >> 2];
        $5 = $2 + $10 | 0;
        $3 = $5;
        HEAP32[$3 >> 2] = $8;
        HEAP32[$3 + 4 >> 2] = $11;
        $3 = $6 + 8 | 0;
        $6 = HEAP32[$3 >> 2];
        $3 = HEAP32[$3 + 4 >> 2];
        $11 = $5 + 8 | 0;
        HEAP32[$11 >> 2] = $6;
        HEAP32[$11 + 4 >> 2] = $3;
        $2 = $2 + 16 | 0;
        $1 = $1 + -1 | 0;
        if ($1) {
         continue
        }
        break;
       };
      }
      $2 = HEAP32[$0 + 12 >> 2];
      if ($2) {
       if (HEAPU8[$0 + 16 | 0]) {
        btAlignedFreeInternal_28void__29($2)
       }
       HEAP32[$0 + 12 >> 2] = 0;
      }
      HEAP32[$0 + 12 >> 2] = $10;
      HEAP8[$0 + 16 | 0] = 1;
      HEAP32[$0 + 8 >> 2] = $13;
      $1 = HEAP32[$0 + 4 >> 2];
     }
     $11 = HEAP32[$4 + 4 >> 2];
     $2 = HEAP32[$0 + 12 >> 2] + ($1 << 4) | 0;
     HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$2 + 4 >> 2] = $11;
     $17 = $4 + 8 | 0;
     $3 = $17;
     $1 = HEAP32[$3 >> 2];
     $3 = HEAP32[$3 + 4 >> 2];
     $11 = $2 + 8 | 0;
     HEAP32[$11 >> 2] = $1;
     HEAP32[$11 + 4 >> 2] = $3;
     HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
     $19 = HEAP32[$7 + 8 >> 2];
     if ($19) {
      $13 = -1;
      $5 = $19;
      $21 = -1;
      while (1) {
       $2 = HEAP32[$5 + 20 >> 2];
       if (($2 | 0) <= -1) {
        $7 = HEAP32[$0 + 24 >> 2];
        HEAP32[$17 >> 2] = 0;
        HEAP32[$4 >> 2] = 0;
        HEAP32[$4 + 4 >> 2] = 0;
        $2 = $7;
        label$41 : {
         if (($2 | 0) != HEAP32[$0 + 28 >> 2]) {
          break label$41
         }
         $8 = $2 ? $2 << 1 : 1;
         if (($7 | 0) >= ($8 | 0)) {
          break label$41
         }
         label$42 : {
          if (!$8) {
           $9 = 0;
           $1 = $7;
           break label$42;
          }
          $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($8, 12));
          $1 = HEAP32[$0 + 24 >> 2];
         }
         if (($1 | 0) >= 1) {
          $2 = 0;
          while (1) {
           $10 = $2 + HEAP32[$0 + 32 >> 2] | 0;
           $3 = $10;
           $20 = HEAP32[$3 >> 2];
           $11 = HEAP32[$3 + 4 >> 2];
           $6 = $2 + $9 | 0;
           $3 = $6;
           HEAP32[$3 >> 2] = $20;
           HEAP32[$3 + 4 >> 2] = $11;
           HEAP32[$3 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
           $2 = $2 + 12 | 0;
           $1 = $1 + -1 | 0;
           if ($1) {
            continue
           }
           break;
          };
         }
         $2 = HEAP32[$0 + 32 >> 2];
         if ($2) {
          if (HEAPU8[$0 + 36 | 0]) {
           btAlignedFreeInternal_28void__29($2)
          }
          HEAP32[$0 + 32 >> 2] = 0;
         }
         HEAP32[$0 + 32 >> 2] = $9;
         HEAP8[$0 + 36 | 0] = 1;
         HEAP32[$0 + 28 >> 2] = $8;
         $2 = HEAP32[$0 + 24 >> 2];
        }
        $3 = HEAP32[$4 + 4 >> 2];
        $2 = HEAP32[$0 + 32 >> 2] + Math_imul($2, 12) | 0;
        HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$2 + 4 >> 2] = $3;
        HEAP32[$2 + 8 >> 2] = HEAP32[$17 >> 2];
        $1 = HEAP32[$0 + 24 >> 2] + 1 | 0;
        HEAP32[$0 + 24 >> 2] = $1;
        HEAP32[$17 >> 2] = 0;
        HEAP32[$4 >> 2] = 0;
        HEAP32[$4 + 4 >> 2] = 0;
        label$48 : {
         if (HEAP32[$0 + 28 >> 2] != ($1 | 0)) {
          break label$48
         }
         $8 = $1 ? $1 << 1 : 1;
         if (($1 | 0) >= ($8 | 0)) {
          break label$48
         }
         label$49 : {
          if (!$8) {
           $9 = 0;
           break label$49;
          }
          $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($8, 12));
          $1 = HEAP32[$0 + 24 >> 2];
         }
         if (($1 | 0) >= 1) {
          $2 = 0;
          while (1) {
           $10 = $2 + HEAP32[$0 + 32 >> 2] | 0;
           $3 = $10;
           $20 = HEAP32[$3 >> 2];
           $11 = HEAP32[$3 + 4 >> 2];
           $6 = $2 + $9 | 0;
           $3 = $6;
           HEAP32[$3 >> 2] = $20;
           HEAP32[$3 + 4 >> 2] = $11;
           HEAP32[$3 + 8 >> 2] = HEAP32[$10 + 8 >> 2];
           $2 = $2 + 12 | 0;
           $1 = $1 + -1 | 0;
           if ($1) {
            continue
           }
           break;
          };
         }
         $2 = HEAP32[$0 + 32 >> 2];
         if ($2) {
          if (HEAPU8[$0 + 36 | 0]) {
           btAlignedFreeInternal_28void__29($2)
          }
          HEAP32[$0 + 32 >> 2] = 0;
         }
         HEAP32[$0 + 32 >> 2] = $9;
         HEAP8[$0 + 36 | 0] = 1;
         HEAP32[$0 + 28 >> 2] = $8;
         $1 = HEAP32[$0 + 24 >> 2];
        }
        $3 = HEAP32[$4 + 4 >> 2];
        $2 = HEAP32[$0 + 32 >> 2] + Math_imul($1, 12) | 0;
        HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
        HEAP32[$2 + 4 >> 2] = $3;
        HEAP32[$2 + 8 >> 2] = HEAP32[$17 >> 2];
        HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
        HEAP32[$5 + 20 >> 2] = $7;
        $6 = $7 + 1 | 0;
        HEAP32[HEAP32[$5 + 8 >> 2] + 20 >> 2] = $6;
        $10 = HEAP32[$0 + 32 >> 2];
        $1 = $10 + Math_imul($7, 12) | 0;
        HEAP32[$1 + 4 >> 2] = 1;
        HEAP32[$1 + 16 >> 2] = -1;
        $7 = HEAP32[$5 + 12 >> 2];
        $2 = HEAP32[$7 + 104 >> 2];
        label$55 : {
         if (($2 | 0) > -1) {
          $7 = $15;
          $15 = $2;
          break label$55;
         }
         HEAP32[$7 + 104 >> 2] = $15;
         label$57 : {
          label$58 : {
           if (($12 | 0) != ($15 | 0)) {
            break label$58
           }
           $9 = $12 ? $12 << 1 : 1;
           if (($12 | 0) >= ($9 | 0)) {
            break label$58
           }
           if ($9) {
            $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($9 << 2)
           } else {
            $8 = 0
           }
           label$61 : {
            label$62 : {
             if (($12 | 0) >= 1) {
              $2 = $8;
              while (1) {
               HEAP32[$2 >> 2] = HEAP32[$14 >> 2];
               $2 = $2 + 4 | 0;
               $14 = $14 + 4 | 0;
               $12 = $12 + -1 | 0;
               if ($12) {
                continue
               }
               break;
              };
              break label$62;
             }
             if (!$14) {
              break label$61
             }
            }
            btAlignedFreeInternal_28void__29($18);
           }
           $14 = $8;
           break label$57;
          }
          $8 = $18;
          $9 = $12;
         }
         HEAP32[($15 << 2) + $14 >> 2] = $7;
         $7 = $15 + 1 | 0;
         $18 = $8;
         $12 = $9;
        }
        HEAP32[(Math_imul($6, 12) + $10 | 0) + 8 >> 2] = $16;
        HEAP32[$1 + 8 >> 2] = $15;
        $15 = $7;
        $2 = HEAP32[$5 + 20 >> 2];
       }
       $1 = $2;
       if (($13 | 0) >= 0) {
        HEAP32[HEAP32[$0 + 32 >> 2] + Math_imul($2, 12) >> 2] = $13 - $2;
        $1 = $21;
       }
       $13 = $2;
       $21 = $1;
       $5 = HEAP32[$5 >> 2];
       if (($19 | 0) != ($5 | 0)) {
        continue
       }
       break;
      };
      HEAP32[HEAP32[$0 + 32 >> 2] + Math_imul($1, 12) >> 2] = $2 - $1;
     }
     $16 = $16 + 1 | 0;
     if (($16 | 0) < ($15 | 0)) {
      continue
     }
     break;
    };
    $12 = 0;
    while (1) {
     $10 = HEAP32[HEAP32[($12 << 2) + $14 >> 2] + 8 >> 2];
     if ($10) {
      $1 = $10;
      while (1) {
       $2 = HEAP32[$1 + 20 >> 2];
       if (($2 | 0) >= 0) {
        $6 = HEAP32[$0 + 44 >> 2];
        label$70 : {
         if (($6 | 0) != HEAP32[$0 + 48 >> 2]) {
          break label$70
         }
         $7 = $6 ? $6 << 1 : 1;
         if (($6 | 0) >= ($7 | 0)) {
          break label$70
         }
         label$71 : {
          if (!$7) {
           $13 = 0;
           break label$71;
          }
          $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 2);
          $6 = HEAP32[$0 + 44 >> 2];
         }
         $9 = HEAP32[$0 + 52 >> 2];
         label$73 : {
          label$74 : {
           if (($6 | 0) >= 1) {
            $2 = $13;
            $5 = $9;
            while (1) {
             HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
             $2 = $2 + 4 | 0;
             $5 = $5 + 4 | 0;
             $6 = $6 + -1 | 0;
             if ($6) {
              continue
             }
             break;
            };
            break label$74;
           }
           if (!$9) {
            break label$73
           }
          }
          if (HEAPU8[$0 + 56 | 0]) {
           btAlignedFreeInternal_28void__29($9)
          }
          HEAP32[$0 + 52 >> 2] = 0;
          $6 = HEAP32[$0 + 44 >> 2];
         }
         HEAP32[$0 + 48 >> 2] = $7;
         HEAP32[$0 + 52 >> 2] = $13;
         HEAP8[$0 + 56 | 0] = 1;
         $2 = HEAP32[$1 + 20 >> 2];
        }
        HEAP32[HEAP32[$0 + 52 >> 2] + ($6 << 2) >> 2] = $2;
        HEAP32[$0 + 44 >> 2] = HEAP32[$0 + 44 >> 2] + 1;
        $2 = $1;
        while (1) {
         HEAP32[$2 + 20 >> 2] = -1;
         $2 = HEAP32[HEAP32[$2 + 8 >> 2] + 4 >> 2];
         if (($1 | 0) != ($2 | 0)) {
          continue
         }
         break;
        };
       }
       $1 = HEAP32[$1 >> 2];
       if (($10 | 0) != ($1 | 0)) {
        continue
       }
       break;
      };
     }
     $12 = $12 + 1 | 0;
     if (($16 | 0) != ($12 | 0)) {
      continue
     }
     break;
    };
    if (!$14) {
     break label$9
    }
    btAlignedFreeInternal_28void__29($18);
   }
   $2 = HEAP32[$4 + 108 >> 2];
   if ($2) {
    if (HEAPU8[$4 + 112 | 0]) {
     btAlignedFreeInternal_28void__29($2)
    }
    HEAP32[$4 + 108 >> 2] = 0;
   }
   HEAP32[$4 + 108 >> 2] = 0;
   HEAP8[$4 + 112 | 0] = 1;
   HEAP32[$4 + 100 >> 2] = 0;
   HEAP32[$4 + 104 >> 2] = 0;
   while (1) {
    $2 = HEAP32[$4 + 80 >> 2];
    if ($2) {
     HEAP32[$4 + 80 >> 2] = HEAP32[$2 + 8 >> 2];
     btAlignedFreeInternal_28void__29(HEAP32[$2 >> 2]);
     btAlignedFreeInternal_28void__29($2);
     continue;
    }
    break;
   };
   while (1) {
    $2 = HEAP32[$4 + 64 >> 2];
    if ($2) {
     HEAP32[$4 + 64 >> 2] = HEAP32[$2 + 8 >> 2];
     btAlignedFreeInternal_28void__29(HEAP32[$2 >> 2]);
     btAlignedFreeInternal_28void__29($2);
     continue;
    }
    break;
   };
   while (1) {
    $2 = HEAP32[$4 + 48 >> 2];
    if (!$2) {
     break label$1
    }
    HEAP32[$4 + 48 >> 2] = HEAP32[$2 + 8 >> 2];
    btAlignedFreeInternal_28void__29(HEAP32[$2 >> 2]);
    btAlignedFreeInternal_28void__29($2);
    continue;
   };
  }
  global$0 = $4 + 144 | 0;
 }
 
 function btGeometryUtil__getPlaneEquationsFromVertices_28btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = Math_fround(0), $24 = 0, $25 = Math_fround(0), $26 = Math_fround(0), $27 = 0, $28 = 0, $29 = 0, $30 = 0;
  $14 = HEAP32[$0 + 4 >> 2];
  if (($14 | 0) >= 1) {
   while (1) {
    label$3 : {
     $2 = $19;
     $19 = $2 + 1 | 0;
     if (($19 | 0) >= ($14 | 0)) {
      break label$3
     }
     $3 = HEAP32[$0 + 12 >> 2];
     $20 = $3 + ($2 << 4) | 0;
     $27 = $20 + 8 | 0;
     $28 = $20 + 4 | 0;
     $2 = $19;
     while (1) {
      label$5 : {
       $21 = $2 + 1 | 0;
       if (($21 | 0) >= ($14 | 0)) {
        break label$5
       }
       $24 = ($2 << 4) + $3 | 0;
       $29 = $24 + 8 | 0;
       $30 = $24 + 4 | 0;
       $22 = $21;
       while (1) {
        $7 = HEAPF32[$20 >> 2];
        $8 = Math_fround(HEAPF32[$24 >> 2] - $7);
        $2 = ($22 << 4) + $3 | 0;
        $25 = HEAPF32[$28 >> 2];
        $9 = Math_fround(HEAPF32[$2 + 4 >> 2] - $25);
        $5 = Math_fround(HEAPF32[$30 >> 2] - $25);
        $13 = Math_fround(HEAPF32[$2 >> 2] - $7);
        $23 = Math_fround(Math_fround($8 * $9) - Math_fround($5 * $13));
        $26 = HEAPF32[$27 >> 2];
        $15 = Math_fround(HEAPF32[$2 + 8 >> 2] - $26);
        $16 = Math_fround($5 * $15);
        $5 = Math_fround(HEAPF32[$29 >> 2] - $26);
        $16 = Math_fround($16 - Math_fround($5 * $9));
        $13 = Math_fround(Math_fround($5 * $13) - Math_fround($8 * $15));
        $15 = Math_fround(Math_fround($23 * $23) + Math_fround(Math_fround($16 * $16) + Math_fround($13 * $13)));
        $17 = $15 > Math_fround(9.999999747378752e-05) ^ 1;
        label$7 : {
         if ($17) {
          break label$7
         }
         $5 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($15)));
         $8 = Math_fround($23 * $5);
         $9 = Math_fround($13 * $5);
         $5 = Math_fround($16 * $5);
         $6 = HEAP32[$1 + 4 >> 2];
         if (($6 | 0) >= 1) {
          $2 = HEAP32[$1 + 12 >> 2];
          $4 = $6;
          while (1) {
           if (!!(Math_fround(Math_fround(Math_fround($5 * HEAPF32[$2 >> 2]) + Math_fround($9 * HEAPF32[$2 + 4 >> 2])) + Math_fround($8 * HEAPF32[$2 + 8 >> 2])) > Math_fround(.9990000128746033))) {
            break label$7
           }
           $2 = $2 + 16 | 0;
           $4 = $4 + -1 | 0;
           if ($4) {
            continue
           }
           break;
          };
         }
         $7 = Math_fround(Math_fround(Math_fround($5 * $7) + Math_fround($9 * $25)) + Math_fround($8 * $26));
         $2 = HEAP32[$0 + 4 >> 2];
         if (($2 | 0) >= 1) {
          while (1) {
           if (!!(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($5 * HEAPF32[$3 >> 2]) + Math_fround($9 * HEAPF32[$3 + 4 >> 2])) + Math_fround($8 * HEAPF32[$3 + 8 >> 2])) - $7) + Math_fround(-.009999999776482582)) > Math_fround(0.0))) {
            break label$7
           }
           $3 = $3 + 16 | 0;
           $2 = $2 + -1 | 0;
           if ($2) {
            continue
           }
           break;
          }
         }
         $7 = Math_fround(-$7);
         label$12 : {
          if (HEAP32[$1 + 8 >> 2] != ($6 | 0)) {
           break label$12
          }
          $18 = $6 ? $6 << 1 : 1;
          if (($6 | 0) >= ($18 | 0)) {
           break label$12
          }
          label$13 : {
           if (!$18) {
            $12 = 0;
            break label$13;
           }
           $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($18 << 4);
           $6 = HEAP32[$1 + 4 >> 2];
          }
          if (($6 | 0) >= 1) {
           $2 = 0;
           while (1) {
            $4 = $2 + HEAP32[$1 + 12 >> 2] | 0;
            $10 = HEAP32[$4 + 4 >> 2];
            $3 = $2 + $12 | 0;
            HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
            HEAP32[$3 + 4 >> 2] = $10;
            $11 = $4 + 8 | 0;
            $4 = HEAP32[$11 >> 2];
            $11 = HEAP32[$11 + 4 >> 2];
            $10 = $3 + 8 | 0;
            HEAP32[$10 >> 2] = $4;
            HEAP32[$10 + 4 >> 2] = $11;
            $2 = $2 + 16 | 0;
            $6 = $6 + -1 | 0;
            if ($6) {
             continue
            }
            break;
           };
          }
          $2 = HEAP32[$1 + 12 >> 2];
          if ($2) {
           if (HEAPU8[$1 + 16 | 0]) {
            btAlignedFreeInternal_28void__29($2)
           }
           HEAP32[$1 + 12 >> 2] = 0;
          }
          HEAP32[$1 + 12 >> 2] = $12;
          HEAP8[$1 + 16 | 0] = 1;
          HEAP32[$1 + 8 >> 2] = $18;
          $6 = HEAP32[$1 + 4 >> 2];
         }
         $2 = HEAP32[$1 + 12 >> 2] + ($6 << 4) | 0;
         HEAPF32[$2 + 12 >> 2] = $7;
         HEAPF32[$2 + 8 >> 2] = $8;
         HEAPF32[$2 + 4 >> 2] = $9;
         HEAPF32[$2 >> 2] = $5;
         HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
        }
        label$19 : {
         if ($17) {
          break label$19
         }
         $5 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($15)));
         $8 = Math_fround(-Math_fround($23 * $5));
         $9 = Math_fround(-Math_fround($13 * $5));
         $5 = Math_fround(-Math_fround($16 * $5));
         $4 = HEAP32[$1 + 4 >> 2];
         if (($4 | 0) >= 1) {
          $2 = HEAP32[$1 + 12 >> 2];
          $3 = $4;
          while (1) {
           if (Math_fround(Math_fround(Math_fround(HEAPF32[$2 >> 2] * $5) + Math_fround(HEAPF32[$2 + 4 >> 2] * $9)) + Math_fround(HEAPF32[$2 + 8 >> 2] * $8)) > Math_fround(.9990000128746033)) {
            break label$19
           }
           $2 = $2 + 16 | 0;
           $3 = $3 + -1 | 0;
           if ($3) {
            continue
           }
           break;
          };
         }
         $7 = Math_fround(Math_fround(Math_fround(HEAPF32[$20 >> 2] * $5) + Math_fround(HEAPF32[$28 >> 2] * $9)) + Math_fround(HEAPF32[$27 >> 2] * $8));
         $3 = HEAP32[$0 + 4 >> 2];
         if (($3 | 0) >= 1) {
          $2 = HEAP32[$0 + 12 >> 2];
          while (1) {
           if (Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2 >> 2] * $5) + Math_fround(HEAPF32[$2 + 4 >> 2] * $9)) + Math_fround(HEAPF32[$2 + 8 >> 2] * $8)) - $7) + Math_fround(-.009999999776482582)) > Math_fround(0.0)) {
            break label$19
           }
           $2 = $2 + 16 | 0;
           $3 = $3 + -1 | 0;
           if ($3) {
            continue
           }
           break;
          };
         }
         $7 = Math_fround(-$7);
         label$24 : {
          if (HEAP32[$1 + 8 >> 2] != ($4 | 0)) {
           break label$24
          }
          $12 = $4 ? $4 << 1 : 1;
          if (($4 | 0) >= ($12 | 0)) {
           break label$24
          }
          label$25 : {
           if (!$12) {
            $17 = 0;
            break label$25;
           }
           $17 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($12 << 4);
           $4 = HEAP32[$1 + 4 >> 2];
          }
          if (($4 | 0) >= 1) {
           $2 = 0;
           while (1) {
            $6 = $2 + HEAP32[$1 + 12 >> 2] | 0;
            $18 = HEAP32[$6 >> 2];
            $10 = HEAP32[$6 + 4 >> 2];
            $3 = $2 + $17 | 0;
            HEAP32[$3 >> 2] = $18;
            HEAP32[$3 + 4 >> 2] = $10;
            $11 = $6 + 8 | 0;
            $6 = HEAP32[$11 >> 2];
            $11 = HEAP32[$11 + 4 >> 2];
            $10 = $3 + 8 | 0;
            HEAP32[$10 >> 2] = $6;
            HEAP32[$10 + 4 >> 2] = $11;
            $2 = $2 + 16 | 0;
            $4 = $4 + -1 | 0;
            if ($4) {
             continue
            }
            break;
           };
          }
          $2 = HEAP32[$1 + 12 >> 2];
          if ($2) {
           if (HEAPU8[$1 + 16 | 0]) {
            btAlignedFreeInternal_28void__29($2)
           }
           HEAP32[$1 + 12 >> 2] = 0;
          }
          HEAP32[$1 + 12 >> 2] = $17;
          HEAP8[$1 + 16 | 0] = 1;
          HEAP32[$1 + 8 >> 2] = $12;
          $4 = HEAP32[$1 + 4 >> 2];
         }
         $2 = HEAP32[$1 + 12 >> 2] + ($4 << 4) | 0;
         HEAPF32[$2 + 12 >> 2] = $7;
         HEAPF32[$2 + 8 >> 2] = $8;
         HEAPF32[$2 + 4 >> 2] = $9;
         HEAPF32[$2 >> 2] = $5;
         HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
        }
        $22 = $22 + 1 | 0;
        if (($14 | 0) == ($22 | 0)) {
         break label$5
        }
        $3 = HEAP32[$0 + 12 >> 2];
        continue;
       };
      }
      if (($14 | 0) == ($21 | 0)) {
       break label$3
      }
      $3 = HEAP32[$0 + 12 >> 2];
      $2 = $21;
      continue;
     };
    }
    if (($14 | 0) != ($19 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function btGeometryUtil__getVerticesFromPlaneEquations_28btAlignedObjectArray_btVector3__20const__2c_20btAlignedObjectArray_btVector3___29($0, $1) {
  var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0, $24 = 0, $25 = 0, $26 = Math_fround(0), $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
  $14 = HEAP32[$0 + 4 >> 2];
  if (($14 | 0) >= 1) {
   while (1) {
    label$3 : {
     $2 = $16;
     $16 = $2 + 1 | 0;
     if (($16 | 0) >= ($14 | 0)) {
      break label$3
     }
     $3 = HEAP32[$0 + 12 >> 2];
     $17 = $3 + ($2 << 4) | 0;
     $30 = $17 + 12 | 0;
     $31 = $17 + 4 | 0;
     $32 = $17 + 8 | 0;
     $2 = $16;
     while (1) {
      label$5 : {
       $18 = $2 + 1 | 0;
       if (($18 | 0) >= ($14 | 0)) {
        break label$5
       }
       $19 = ($2 << 4) + $3 | 0;
       $33 = $19 + 12 | 0;
       $34 = $19 + 8 | 0;
       $35 = $19 + 4 | 0;
       $20 = $18;
       while (1) {
        $2 = ($20 << 4) + $3 | 0;
        $4 = HEAPF32[$2 + 4 >> 2];
        $10 = HEAPF32[$19 >> 2];
        $11 = HEAPF32[$35 >> 2];
        $5 = HEAPF32[$2 >> 2];
        $12 = Math_fround(Math_fround($4 * $10) - Math_fround($11 * $5));
        $6 = HEAPF32[$2 + 8 >> 2];
        $7 = HEAPF32[$34 >> 2];
        $21 = Math_fround(Math_fround($11 * $6) - Math_fround($7 * $4));
        $22 = Math_fround(Math_fround($7 * $5) - Math_fround($6 * $10));
        label$7 : {
         if (!(Math_fround(Math_fround($12 * $12) + Math_fround(Math_fround($21 * $21) + Math_fround($22 * $22))) > Math_fround(9.999999747378752e-05))) {
          break label$7
         }
         $8 = HEAPF32[$31 >> 2];
         $9 = HEAPF32[$17 >> 2];
         $26 = Math_fround(Math_fround($5 * $8) - Math_fround($4 * $9));
         $13 = HEAPF32[$32 >> 2];
         $4 = Math_fround(Math_fround($4 * $13) - Math_fround($6 * $8));
         $5 = Math_fround(Math_fround($6 * $9) - Math_fround($5 * $13));
         if (!(Math_fround(Math_fround($26 * $26) + Math_fround(Math_fround($4 * $4) + Math_fround($5 * $5))) > Math_fround(9.999999747378752e-05))) {
          break label$7
         }
         $6 = Math_fround(Math_fround($11 * $9) - Math_fround($10 * $8));
         $11 = Math_fround(Math_fround($7 * $8) - Math_fround($11 * $13));
         $10 = Math_fround(Math_fround($10 * $13) - Math_fround($7 * $9));
         if (!(Math_fround(Math_fround($6 * $6) + Math_fround(Math_fround($11 * $11) + Math_fround($10 * $10))) > Math_fround(9.999999747378752e-05))) {
          break label$7
         }
         $7 = Math_fround(Math_fround($13 * $12) + Math_fround(Math_fround($8 * $22) + Math_fround($21 * $9)));
         if (!(Math_fround(Math_abs($7)) > Math_fround(9.999999974752427e-07))) {
          break label$7
         }
         $7 = Math_fround(Math_fround(-1.0) / $7);
         $8 = HEAPF32[$2 + 12 >> 2];
         $9 = HEAPF32[$30 >> 2];
         $13 = Math_fround($12 * $9);
         $12 = HEAPF32[$33 >> 2];
         $6 = Math_fround($7 * Math_fround(Math_fround($6 * $8) + Math_fround($13 + Math_fround($26 * $12))));
         $5 = Math_fround($7 * Math_fround(Math_fround($10 * $8) + Math_fround(Math_fround($22 * $9) + Math_fround($5 * $12))));
         $4 = Math_fround($7 * Math_fround(Math_fround($11 * $8) + Math_fround(Math_fround($21 * $9) + Math_fround($4 * $12))));
         $2 = HEAP32[$0 + 4 >> 2];
         if (($2 | 0) >= 1) {
          while (1) {
           if (!!(Math_fround(Math_fround(HEAPF32[$3 + 12 >> 2] + Math_fround(Math_fround(Math_fround($4 * HEAPF32[$3 >> 2]) + Math_fround($5 * HEAPF32[$3 + 4 >> 2])) + Math_fround($6 * HEAPF32[$3 + 8 >> 2]))) + Math_fround(-.009999999776482582)) > Math_fround(0.0))) {
            break label$7
           }
           $3 = $3 + 16 | 0;
           $2 = $2 + -1 | 0;
           if ($2) {
            continue
           }
           break;
          }
         }
         $2 = HEAP32[$1 + 4 >> 2];
         label$10 : {
          if (($2 | 0) != HEAP32[$1 + 8 >> 2]) {
           break label$10
          }
          $23 = $2 ? $2 << 1 : 1;
          if (($2 | 0) >= ($23 | 0)) {
           break label$10
          }
          label$11 : {
           if (!$23) {
            $27 = 0;
            break label$11;
           }
           $27 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($23 << 4);
           $2 = HEAP32[$1 + 4 >> 2];
          }
          if (($2 | 0) >= 1) {
           $3 = 0;
           while (1) {
            $28 = $3 + HEAP32[$1 + 12 >> 2] | 0;
            $15 = $28;
            $24 = HEAP32[$15 + 4 >> 2];
            $29 = $3 + $27 | 0;
            $25 = $29;
            HEAP32[$25 >> 2] = HEAP32[$15 >> 2];
            HEAP32[$25 + 4 >> 2] = $24;
            $15 = $15 + 8 | 0;
            $28 = HEAP32[$15 >> 2];
            $25 = HEAP32[$15 + 4 >> 2];
            $24 = $29 + 8 | 0;
            HEAP32[$24 >> 2] = $28;
            HEAP32[$24 + 4 >> 2] = $25;
            $3 = $3 + 16 | 0;
            $2 = $2 + -1 | 0;
            if ($2) {
             continue
            }
            break;
           };
          }
          $3 = HEAP32[$1 + 12 >> 2];
          if ($3) {
           if (HEAPU8[$1 + 16 | 0]) {
            btAlignedFreeInternal_28void__29($3)
           }
           HEAP32[$1 + 12 >> 2] = 0;
          }
          HEAP32[$1 + 12 >> 2] = $27;
          HEAP8[$1 + 16 | 0] = 1;
          HEAP32[$1 + 8 >> 2] = $23;
          $2 = HEAP32[$1 + 4 >> 2];
         }
         $3 = HEAP32[$1 + 12 >> 2] + ($2 << 4) | 0;
         HEAP32[$3 + 12 >> 2] = 0;
         HEAPF32[$3 + 8 >> 2] = $6;
         HEAPF32[$3 + 4 >> 2] = $5;
         HEAPF32[$3 >> 2] = $4;
         HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
        }
        $20 = $20 + 1 | 0;
        if (($14 | 0) == ($20 | 0)) {
         break label$5
        }
        $3 = HEAP32[$0 + 12 >> 2];
        continue;
       };
      }
      if (($14 | 0) == ($18 | 0)) {
       break label$3
      }
      $3 = HEAP32[$0 + 12 >> 2];
      $2 = $18;
      continue;
     };
    }
    if (($14 | 0) != ($16 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($0) {
  btConvexInternalShape__btConvexInternalShape_28_29($0);
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 >> 2] = 7108;
  return $0;
 }
 
 function btPolyhedralConvexShape__initializePolyhedralFeatures_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0), $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = Math_fround(0), $29 = 0, $30 = 0, $31 = Math_fround(0), $32 = 0, $33 = 0, $34 = Math_fround(0), $35 = 0, $36 = 0;
  $3 = global$0 - 240 | 0;
  global$0 = $3;
  $2 = HEAP32[$0 + 56 >> 2];
  if ($2) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] >> 2]]($2) | 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 56 >> 2]);
  }
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(132);
  btConvexPolyhedron__btConvexPolyhedron_28_29($2);
  HEAP32[$0 + 56 >> 2] = $2;
  HEAP32[$3 + 228 >> 2] = 0;
  HEAP32[$3 + 220 >> 2] = 0;
  HEAP32[$3 + 224 >> 2] = 0;
  HEAP8[$3 + 232 | 0] = 1;
  label$2 : {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) < 1) {
    break label$2
   }
   while (1) {
    label$4 : {
     if (($5 | 0) != ($7 | 0)) {
      $9 = $10;
      break label$4;
     }
     $12 = $5 ? $5 << 1 : 1;
     if (($5 | 0) >= ($12 | 0)) {
      $9 = $10;
      break label$4;
     }
     if ($12) {
      $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($12 << 4)
     } else {
      $9 = 0
     }
     label$9 : {
      label$10 : {
       if (($5 | 0) >= 1) {
        $2 = $9;
        $4 = $10;
        while (1) {
         $8 = HEAP32[$4 + 4 >> 2];
         HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$2 + 4 >> 2] = $8;
         $13 = $4 + 8 | 0;
         $16 = HEAP32[$13 >> 2];
         $11 = HEAP32[$13 + 4 >> 2];
         $8 = $2 + 8 | 0;
         HEAP32[$8 >> 2] = $16;
         HEAP32[$8 + 4 >> 2] = $11;
         $2 = $2 + 16 | 0;
         $4 = $4 + 16 | 0;
         $5 = $5 + -1 | 0;
         if ($5) {
          continue
         }
         break;
        };
        break label$10;
       }
       if (!$10) {
        break label$9
       }
      }
      if (HEAPU8[$3 + 232 | 0]) {
       btAlignedFreeInternal_28void__29($10)
      }
      HEAP32[$3 + 228 >> 2] = 0;
     }
     HEAP32[$3 + 228 >> 2] = $9;
     HEAP8[$3 + 232 | 0] = 1;
     HEAP32[$3 + 224 >> 2] = $12;
    }
    HEAP32[$3 + 220 >> 2] = $7 + 1;
    $8 = HEAP32[$3 + 156 >> 2];
    $2 = $7 << 4;
    $4 = $2 + $9 | 0;
    HEAP32[$4 >> 2] = HEAP32[$3 + 152 >> 2];
    HEAP32[$4 + 4 >> 2] = $8;
    $13 = $3 + 160 | 0;
    $5 = HEAP32[$13 >> 2];
    $11 = HEAP32[$13 + 4 >> 2];
    $8 = $4 + 8 | 0;
    HEAP32[$8 >> 2] = $5;
    HEAP32[$8 + 4 >> 2] = $11;
    $10 = HEAP32[$3 + 228 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $6, $2 + $10 | 0);
    $6 = $6 + 1 | 0;
    if (($6 | 0) >= (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0)) {
     break label$2
    }
    $5 = HEAP32[$3 + 224 >> 2];
    $7 = HEAP32[$3 + 220 >> 2];
    continue;
   };
  }
  HEAP8[$3 + 188 | 0] = 1;
  HEAP32[$3 + 184 >> 2] = 0;
  HEAP8[$3 + 208 | 0] = 1;
  $8 = $3 + 176 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$3 + 204 >> 2] = 0;
  $8 = $3 + 196 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$3 + 164 >> 2] = 0;
  HEAP8[$3 + 168 | 0] = 1;
  HEAP32[$3 + 156 >> 2] = 0;
  HEAP32[$3 + 160 >> 2] = 0;
  label$14 : {
   if (!$1) {
    btConvexHullComputer__compute_28void_20const__2c_20bool_2c_20int_2c_20int_2c_20float_2c_20float_29($3 + 152 | 0, $10, HEAP32[$3 + 220 >> 2]);
    break label$14;
   }
   HEAP32[$3 + 60 >> 2] = 0;
   HEAP8[$3 + 64 | 0] = 1;
   HEAP32[$3 + 52 >> 2] = 0;
   HEAP32[$3 + 56 >> 2] = 0;
   btGeometryUtil__getPlaneEquationsFromVertices_28btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___29($3 + 216 | 0, $3 + 48 | 0);
   HEAP32[$3 + 140 >> 2] = 0;
   HEAP8[$3 + 144 | 0] = 1;
   HEAP32[$3 + 132 >> 2] = 0;
   HEAP32[$3 + 136 >> 2] = 0;
   if (HEAP32[$3 + 52 >> 2] >= 1) {
    $9 = 0;
    while (1) {
     $10 = $3 + 112 | 0;
     $2 = HEAP32[$3 + 60 >> 2] + ($9 << 4) | 0;
     HEAP32[$10 >> 2] = HEAP32[$2 + 8 >> 2];
     $8 = HEAP32[$2 + 4 >> 2];
     HEAP32[$3 + 104 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$3 + 108 >> 2] = $8;
     $14 = Math_fround(HEAPF32[$2 + 12 >> 2] - Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0)));
     $4 = HEAP32[$3 + 132 >> 2];
     label$18 : {
      if (($4 | 0) != HEAP32[$3 + 136 >> 2]) {
       break label$18
      }
      $12 = $4 ? $4 << 1 : 1;
      if (($4 | 0) >= ($12 | 0)) {
       break label$18
      }
      label$19 : {
       if (!$12) {
        $6 = 0;
        break label$19;
       }
       $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($12 << 4);
       $4 = HEAP32[$3 + 132 >> 2];
      }
      if (($4 | 0) >= 1) {
       $2 = 0;
       while (1) {
        $7 = $2 + HEAP32[$3 + 140 >> 2] | 0;
        $1 = HEAP32[$7 >> 2];
        $11 = HEAP32[$7 + 4 >> 2];
        $5 = $2 + $6 | 0;
        HEAP32[$5 >> 2] = $1;
        HEAP32[$5 + 4 >> 2] = $11;
        $13 = $7 + 8 | 0;
        $1 = HEAP32[$13 >> 2];
        $8 = HEAP32[$13 + 4 >> 2];
        $11 = $5 + 8 | 0;
        HEAP32[$11 >> 2] = $1;
        HEAP32[$11 + 4 >> 2] = $8;
        $2 = $2 + 16 | 0;
        $4 = $4 + -1 | 0;
        if ($4) {
         continue
        }
        break;
       };
      }
      $2 = HEAP32[$3 + 140 >> 2];
      if ($2) {
       if (HEAPU8[$3 + 144 | 0]) {
        btAlignedFreeInternal_28void__29($2)
       }
       HEAP32[$3 + 140 >> 2] = 0;
      }
      HEAP32[$3 + 140 >> 2] = $6;
      HEAP8[$3 + 144 | 0] = 1;
      HEAP32[$3 + 136 >> 2] = $12;
      $4 = HEAP32[$3 + 132 >> 2];
     }
     $11 = HEAP32[$3 + 108 >> 2];
     $2 = HEAP32[$3 + 140 >> 2] + ($4 << 4) | 0;
     HEAP32[$2 >> 2] = HEAP32[$3 + 104 >> 2];
     HEAP32[$2 + 4 >> 2] = $11;
     HEAPF32[$2 + 12 >> 2] = $14;
     HEAP32[$2 + 8 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$3 + 132 >> 2] = HEAP32[$3 + 132 >> 2] + 1;
     $9 = $9 + 1 | 0;
     if (($9 | 0) < HEAP32[$3 + 52 >> 2]) {
      continue
     }
     break;
    };
   }
   HEAP32[$3 + 116 >> 2] = 0;
   HEAP8[$3 + 120 | 0] = 1;
   HEAP32[$3 + 108 >> 2] = 0;
   HEAP32[$3 + 112 >> 2] = 0;
   btGeometryUtil__getVerticesFromPlaneEquations_28btAlignedObjectArray_btVector3__20const__2c_20btAlignedObjectArray_btVector3___29($3 + 128 | 0, $3 + 104 | 0);
   btConvexHullComputer__compute_28void_20const__2c_20bool_2c_20int_2c_20int_2c_20float_2c_20float_29($3 + 152 | 0, HEAP32[$3 + 116 >> 2], HEAP32[$3 + 108 >> 2]);
   $2 = HEAP32[$3 + 116 >> 2];
   if ($2) {
    if (HEAPU8[$3 + 120 | 0]) {
     btAlignedFreeInternal_28void__29($2)
    }
    HEAP32[$3 + 116 >> 2] = 0;
   }
   $2 = HEAP32[$3 + 140 >> 2];
   if ($2) {
    if (HEAPU8[$3 + 144 | 0]) {
     btAlignedFreeInternal_28void__29($2)
    }
    HEAP32[$3 + 140 >> 2] = 0;
   }
   $2 = HEAP32[$3 + 60 >> 2];
   if (!$2) {
    break label$14
   }
   if (HEAPU8[$3 + 64 | 0]) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$3 + 60 >> 2] = 0;
  }
  $16 = HEAP32[$3 + 196 >> 2];
  label$30 : {
   if (($16 | 0) < 1) {
    $1 = 0;
    break label$30;
   }
   $30 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($16 << 4);
   $2 = $30;
   $4 = $16;
   while (1) {
    $8 = HEAP32[$3 + 52 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$3 + 48 >> 2];
    HEAP32[$2 + 4 >> 2] = $8;
    $13 = $3 + 56 | 0;
    $1 = HEAP32[$13 >> 2];
    $11 = HEAP32[$13 + 4 >> 2];
    $8 = $2 + 8 | 0;
    HEAP32[$8 >> 2] = $1;
    HEAP32[$8 + 4 >> 2] = $11;
    $2 = $2 + 16 | 0;
    $4 = $4 + -1 | 0;
    if ($4) {
     continue
    }
    break;
   };
   $1 = $30;
  }
  $27 = $1;
  HEAP32[$3 + 140 >> 2] = 0;
  HEAP8[$3 + 144 | 0] = 1;
  HEAP32[$3 + 132 >> 2] = 0;
  HEAP32[$3 + 136 >> 2] = 0;
  $2 = $3 + 63 | 0;
  $1 = 0;
  HEAP8[$2 | 0] = $1;
  HEAP8[$2 + 1 | 0] = $1 >>> 8;
  HEAP8[$2 + 2 | 0] = $1 >>> 16;
  HEAP8[$2 + 3 | 0] = $1 >>> 24;
  $8 = $3 + 56 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$3 + 48 >> 2] = 0;
  HEAP32[$3 + 52 >> 2] = 0;
  label$33 : {
   if (($16 | 0) <= -1) {
    $4 = $16 + 1 | 0;
    $5 = Math_imul($16, 36) + 8 | 0;
    $2 = 0;
    while (1) {
     $2 = $2 + $5 | 0;
     $6 = $2 + -4 | 0;
     $7 = $2 + 4 | 0;
     $9 = HEAP32[$7 >> 2];
     if ($9) {
      if (HEAPU8[$2 + 8 | 0]) {
       btAlignedFreeInternal_28void__29($9)
      }
      HEAP32[$7 >> 2] = 0;
     }
     HEAP32[$6 >> 2] = 0;
     HEAP32[$7 >> 2] = 0;
     HEAP32[$2 >> 2] = 0;
     HEAP8[$2 + 8 | 0] = 1;
     if (!$4) {
      break label$33
     }
     $5 = $5 + 36 | 0;
     $4 = $4 + 1 | 0;
     $2 = HEAP32[$3 + 140 >> 2];
     continue;
    };
   }
   if (!$16) {
    break label$33
   }
   btAlignedObjectArray_btFace___reserve_28int_29($3 + 128 | 0, $16);
   $5 = $3 + 48 | 3;
   $4 = 20;
   $7 = $16;
   while (1) {
    $8 = HEAPU8[$5 + 4 | 0] | HEAPU8[$5 + 5 | 0] << 8 | (HEAPU8[$5 + 6 | 0] << 16 | HEAPU8[$5 + 7 | 0] << 24);
    $2 = $4 + HEAP32[$3 + 140 >> 2] | 0;
    $1 = HEAPU8[$5 | 0] | HEAPU8[$5 + 1 | 0] << 8 | (HEAPU8[$5 + 2 | 0] << 16 | HEAPU8[$5 + 3 | 0] << 24);
    HEAP8[$2 | 0] = $1;
    HEAP8[$2 + 1 | 0] = $1 >>> 8;
    HEAP8[$2 + 2 | 0] = $1 >>> 16;
    HEAP8[$2 + 3 | 0] = $1 >>> 24;
    HEAP8[$2 + 4 | 0] = $8;
    HEAP8[$2 + 5 | 0] = $8 >>> 8;
    HEAP8[$2 + 6 | 0] = $8 >>> 16;
    HEAP8[$2 + 7 | 0] = $8 >>> 24;
    HEAP8[$2 + -4 | 0] = 1;
    $6 = $2 + -16 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    $13 = $5 + 8 | 0;
    $1 = $13;
    $1 = HEAPU8[$1 | 0] | HEAPU8[$1 + 1 | 0] << 8 | (HEAPU8[$1 + 2 | 0] << 16 | HEAPU8[$1 + 3 | 0] << 24);
    $11 = HEAPU8[$13 + 4 | 0] | HEAPU8[$13 + 5 | 0] << 8 | (HEAPU8[$13 + 6 | 0] << 16 | HEAPU8[$13 + 7 | 0] << 24);
    $8 = $2 + 8 | 0;
    $2 = $8;
    HEAP8[$2 | 0] = $1;
    HEAP8[$2 + 1 | 0] = $1 >>> 8;
    HEAP8[$2 + 2 | 0] = $1 >>> 16;
    HEAP8[$2 + 3 | 0] = $1 >>> 24;
    HEAP8[$2 + 4 | 0] = $11;
    HEAP8[$2 + 5 | 0] = $11 >>> 8;
    HEAP8[$2 + 6 | 0] = $11 >>> 16;
    HEAP8[$2 + 7 | 0] = $11 >>> 24;
    HEAP32[$6 + 8 >> 2] = 0;
    $4 = $4 + 36 | 0;
    $7 = $7 + -1 | 0;
    if ($7) {
     continue
    }
    break;
   };
  }
  HEAP32[$3 + 132 >> 2] = $16;
  $6 = HEAP32[$0 + 56 >> 2];
  $12 = HEAP32[$6 + 8 >> 2];
  $4 = HEAP32[$3 + 156 >> 2];
  if (($12 | 0) < ($4 | 0)) {
   if (HEAP32[$6 + 12 >> 2] < ($4 | 0)) {
    label$41 : {
     if (!$4) {
      $10 = 0;
      $5 = $12;
      break label$41;
     }
     $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 4);
     $5 = HEAP32[$6 + 8 >> 2];
    }
    if (($5 | 0) >= 1) {
     $2 = 0;
     while (1) {
      $9 = $2 + HEAP32[$6 + 16 >> 2] | 0;
      $1 = HEAP32[$9 >> 2];
      $8 = HEAP32[$9 + 4 >> 2];
      $7 = $2 + $10 | 0;
      HEAP32[$7 >> 2] = $1;
      HEAP32[$7 + 4 >> 2] = $8;
      $13 = $9 + 8 | 0;
      $1 = HEAP32[$13 >> 2];
      $11 = HEAP32[$13 + 4 >> 2];
      $8 = $7 + 8 | 0;
      HEAP32[$8 >> 2] = $1;
      HEAP32[$8 + 4 >> 2] = $11;
      $2 = $2 + 16 | 0;
      $5 = $5 + -1 | 0;
      if ($5) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$6 + 16 >> 2];
    if ($2) {
     if (HEAPU8[$6 + 20 | 0]) {
      btAlignedFreeInternal_28void__29($2)
     }
     HEAP32[$6 + 16 >> 2] = 0;
    }
    HEAP32[$6 + 16 >> 2] = $10;
    HEAP32[$6 + 12 >> 2] = $4;
    HEAP8[$6 + 20 | 0] = 1;
   }
   $2 = $12 << 4;
   $5 = $4 - $12 | 0;
   while (1) {
    $8 = HEAP32[$3 + 52 >> 2];
    $7 = $2 + HEAP32[$6 + 16 >> 2] | 0;
    HEAP32[$7 >> 2] = HEAP32[$3 + 48 >> 2];
    HEAP32[$7 + 4 >> 2] = $8;
    $13 = $3 + 56 | 0;
    $1 = HEAP32[$13 >> 2];
    $11 = HEAP32[$13 + 4 >> 2];
    $8 = $7 + 8 | 0;
    HEAP32[$8 >> 2] = $1;
    HEAP32[$8 + 4 >> 2] = $11;
    $2 = $2 + 16 | 0;
    $5 = $5 + -1 | 0;
    if ($5) {
     continue
    }
    break;
   };
  }
  HEAP32[$6 + 8 >> 2] = $4;
  if (($4 | 0) >= 1) {
   $2 = 0;
   while (1) {
    $7 = $2 + HEAP32[$3 + 164 >> 2] | 0;
    $1 = HEAP32[$7 >> 2];
    $8 = HEAP32[$7 + 4 >> 2];
    $5 = $2 + HEAP32[HEAP32[$0 + 56 >> 2] + 16 >> 2] | 0;
    HEAP32[$5 >> 2] = $1;
    HEAP32[$5 + 4 >> 2] = $8;
    $13 = $7 + 8 | 0;
    $1 = HEAP32[$13 >> 2];
    $11 = HEAP32[$13 + 4 >> 2];
    $8 = $5 + 8 | 0;
    HEAP32[$8 >> 2] = $1;
    HEAP32[$8 + 4 >> 2] = $11;
    $2 = $2 + 16 | 0;
    $4 = $4 + -1 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
  if (($16 | 0) >= 1) {
   while (1) {
    $10 = 0;
    $15 = HEAP32[$3 + 184 >> 2] + Math_imul(HEAP32[HEAP32[$3 + 204 >> 2] + ($18 << 2) >> 2], 12) | 0;
    $7 = $15;
    while (1) {
     $24 = Math_imul($18, 36);
     $6 = $24 + HEAP32[$3 + 140 >> 2] | 0;
     $9 = $6 + 4 | 0;
     $12 = HEAP32[(Math_imul(HEAP32[$7 + 4 >> 2], 12) + $7 | 0) + 8 >> 2];
     $5 = HEAP32[$6 + 4 >> 2];
     label$53 : {
      if (($5 | 0) != HEAP32[$6 + 8 >> 2]) {
       break label$53
      }
      $1 = $5 ? $5 << 1 : 1;
      if (($5 | 0) >= ($1 | 0)) {
       break label$53
      }
      label$54 : {
       if (!$1) {
        $25 = 0;
        break label$54;
       }
       $25 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 2);
       $5 = HEAP32[$9 >> 2];
      }
      $22 = $6 + 8 | 0;
      $26 = $6 + 12 | 0;
      $20 = HEAP32[$6 + 12 >> 2];
      label$56 : {
       label$57 : {
        if (($5 | 0) >= 1) {
         $2 = $25;
         $4 = $20;
         while (1) {
          HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
          $2 = $2 + 4 | 0;
          $4 = $4 + 4 | 0;
          $5 = $5 + -1 | 0;
          if ($5) {
           continue
          }
          break;
         };
         break label$57;
        }
        if (!$20) {
         break label$56
        }
       }
       if (HEAPU8[$6 + 16 | 0]) {
        btAlignedFreeInternal_28void__29($20)
       }
       HEAP32[$26 >> 2] = 0;
       $5 = HEAP32[$9 >> 2];
      }
      HEAP32[$26 >> 2] = $25;
      HEAP32[$22 >> 2] = $1;
      HEAP8[$6 + 16 | 0] = 1;
     }
     HEAP32[HEAP32[$6 + 12 >> 2] + ($5 << 2) >> 2] = $12;
     HEAP32[$9 >> 2] = HEAP32[$9 >> 2] + 1;
     if (($10 | 0) <= 1) {
      $4 = HEAP32[$3 + 164 >> 2];
      $2 = $4 + ($12 << 4) | 0;
      $19 = HEAPF32[$2 + 4 >> 2];
      $4 = (HEAP32[$7 + 8 >> 2] << 4) + $4 | 0;
      $21 = HEAPF32[$4 + 4 >> 2];
      $17 = HEAPF32[$2 >> 2];
      $23 = HEAPF32[$4 >> 2];
      $14 = HEAPF32[$2 + 8 >> 2];
      $28 = HEAPF32[$4 + 8 >> 2];
      $2 = ($3 + 48 | 0) + ($10 << 4) | 0;
      HEAP32[$2 + 12 >> 2] = 0;
      $14 = Math_fround($28 - $14);
      $31 = $14;
      $17 = Math_fround($23 - $17);
      $19 = Math_fround($21 - $19);
      $14 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($17 * $17) + Math_fround($19 * $19)) + Math_fround($14 * $14)))));
      HEAPF32[$2 + 8 >> 2] = $31 * $14;
      HEAPF32[$2 + 4 >> 2] = $19 * $14;
      HEAPF32[$2 >> 2] = $17 * $14;
      $10 = $10 + 1 | 0;
     }
     $2 = Math_imul(HEAP32[$7 + 4 >> 2], 12) + $7 | 0;
     $7 = $2 + Math_imul(HEAP32[$2 >> 2], 12) | 0;
     if (($15 | 0) != ($7 | 0)) {
      continue
     }
     break;
    };
    label$62 : {
     if (($10 | 0) == 2) {
      $2 = ($18 << 4) + $27 | 0;
      HEAP32[$2 + 12 >> 2] = 0;
      $17 = HEAPF32[$3 + 68 >> 2];
      $19 = HEAPF32[$3 + 48 >> 2];
      $21 = HEAPF32[$3 + 52 >> 2];
      $23 = HEAPF32[$3 + 64 >> 2];
      $14 = Math_fround(Math_fround($17 * $19) - Math_fround($21 * $23));
      $31 = $14;
      $34 = Math_fround($14 * $14);
      $28 = HEAPF32[$3 + 72 >> 2];
      $14 = Math_fround($21 * $28);
      $21 = HEAPF32[$3 + 56 >> 2];
      $14 = Math_fround($14 - Math_fround($21 * $17));
      $17 = Math_fround(Math_fround($21 * $23) - Math_fround($28 * $19));
      $19 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($34 + Math_fround(Math_fround($14 * $14) + Math_fround($17 * $17))))));
      HEAPF32[$2 + 8 >> 2] = $31 * $19;
      HEAPF32[$2 + 4 >> 2] = $17 * $19;
      $14 = Math_fround($14 * $19);
      HEAPF32[$2 >> 2] = $14;
      $4 = HEAP32[$3 + 140 >> 2];
      $5 = $24 + $4 | 0;
      HEAPF32[$5 + 20 >> 2] = $14;
      HEAP32[$5 + 24 >> 2] = HEAP32[$2 + 4 >> 2];
      HEAP32[$5 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
      HEAP32[$5 + 32 >> 2] = 1900671690;
      break label$62;
     }
     $2 = ($18 << 4) + $27 | 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     $8 = $2 + 8 | 0;
     HEAP32[$8 >> 2] = 0;
     HEAP32[$8 + 4 >> 2] = 0;
     $4 = HEAP32[$3 + 140 >> 2];
    }
    $9 = $4 + $24 | 0;
    $7 = HEAP32[$9 + 4 >> 2];
    label$64 : {
     if (($7 | 0) < 1) {
      $14 = Math_fround(1000000015047466219876688.0e6);
      break label$64;
     }
     $2 = HEAP32[$9 + 12 >> 2];
     $4 = ($18 << 4) + $27 | 0;
     $19 = HEAPF32[$4 + 8 >> 2];
     $21 = HEAPF32[$4 + 4 >> 2];
     $23 = HEAPF32[$4 >> 2];
     $6 = HEAP32[HEAP32[$0 + 56 >> 2] + 16 >> 2];
     $14 = Math_fround(1000000015047466219876688.0e6);
     $5 = 0;
     while (1) {
      $4 = (HEAP32[$2 >> 2] << 4) + $6 | 0;
      $17 = Math_fround(Math_fround(Math_fround(HEAPF32[$4 >> 2] * $23) + Math_fround(HEAPF32[$4 + 4 >> 2] * $21)) + Math_fround(HEAPF32[$4 + 8 >> 2] * $19));
      $14 = $14 > $17 ? $17 : $14;
      $2 = $2 + 4 | 0;
      $5 = $5 + 1 | 0;
      if (($5 | 0) < ($7 | 0)) {
       continue
      }
      break;
     };
    }
    HEAPF32[$9 + 32 >> 2] = -$14;
    $18 = $18 + 1 | 0;
    if (($16 | 0) != ($18 | 0)) {
     continue
    }
    break;
   }
  }
  label$67 : {
   if (HEAP32[$3 + 132 >> 2] >= 1) {
    $15 = 0;
    $22 = 0;
    $5 = 0;
    while (1) {
     label$70 : {
      if (($5 | 0) != ($15 | 0)) {
       break label$70
      }
      $5 = $15 ? $15 << 1 : 1;
      if (($15 | 0) >= ($5 | 0)) {
       $5 = $15;
       break label$70;
      }
      if ($5) {
       $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2)
      } else {
       $7 = 0
      }
      label$74 : {
       label$75 : {
        if ($15) {
         $2 = $7;
         $4 = $15;
         while (1) {
          HEAP32[$2 >> 2] = HEAP32[$22 >> 2];
          $2 = $2 + 4 | 0;
          $22 = $22 + 4 | 0;
          $4 = $4 + -1 | 0;
          if ($4) {
           continue
          }
          break;
         };
         break label$75;
        }
        if ($22) {
         break label$75
        }
        $5 = 1;
        break label$74;
       }
       btAlignedFreeInternal_28void__29($33);
      }
      $33 = $7;
      $22 = $7;
     }
     HEAP32[($15 << 2) + $22 >> 2] = $15;
     $15 = $15 + 1 | 0;
     if (($15 | 0) < HEAP32[$3 + 132 >> 2]) {
      continue
     }
     break;
    };
    $35 = $3 + 68 | 0;
    $36 = $3 + 40 | 0;
    while (1) {
     $5 = $15 + -1 | 0;
     $2 = HEAP32[($5 << 2) + $22 >> 2];
     $18 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(4);
     HEAP32[$18 >> 2] = $2;
     label$79 : {
      label$80 : {
       if (($5 | 0) < 1) {
        $20 = 1;
        $16 = $18;
        $15 = $5;
        break label$80;
       }
       $4 = HEAP32[$3 + 140 >> 2];
       $2 = $4 + Math_imul($2, 36) | 0;
       $14 = HEAPF32[$2 + 20 >> 2];
       $17 = HEAPF32[$2 + 28 >> 2];
       $19 = HEAPF32[$2 + 24 >> 2];
       $7 = $15 + -2 | 0;
       $2 = 1;
       $15 = $5;
       $9 = $18;
       $20 = 1;
       while (1) {
        $5 = HEAP32[($7 << 2) + $22 >> 2];
        $4 = Math_imul($5, 36) + $4 | 0;
        label$83 : {
         if (!(Math_fround(Math_fround(Math_fround($14 * HEAPF32[$4 + 20 >> 2]) + Math_fround($19 * HEAPF32[$4 + 24 >> 2])) + Math_fround($17 * HEAPF32[$4 + 28 >> 2])) > Math_fround(.9990000128746033))) {
          $6 = $2;
          $16 = $9;
          break label$83;
         }
         label$85 : {
          label$86 : {
           if (($2 | 0) != ($20 | 0)) {
            break label$86
           }
           $6 = $2 ? $2 << 1 : 1;
           if (($2 | 0) >= ($6 | 0)) {
            break label$86
           }
           if ($6) {
            $16 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2)
           } else {
            $16 = 0
           }
           label$89 : {
            label$90 : {
             if (($2 | 0) >= 1) {
              $4 = $16;
              while (1) {
               HEAP32[$4 >> 2] = HEAP32[$18 >> 2];
               $4 = $4 + 4 | 0;
               $18 = $18 + 4 | 0;
               $2 = $2 + -1 | 0;
               if ($2) {
                continue
               }
               break;
              };
              break label$90;
             }
             if (!$18) {
              break label$89
             }
            }
            btAlignedFreeInternal_28void__29($9);
           }
           $18 = $16;
           break label$85;
          }
          $6 = $2;
          $16 = $9;
         }
         HEAP32[($20 << 2) + $18 >> 2] = $5;
         $20 = $20 + 1 | 0;
         if (($15 | 0) < 1) {
          break label$83
         }
         $4 = 0;
         $2 = $22;
         while (1) {
          if (HEAP32[$2 >> 2] != ($5 | 0)) {
           $2 = $2 + 4 | 0;
           $4 = $4 + 1 | 0;
           if (($4 | 0) != ($15 | 0)) {
            continue
           }
           break label$83;
          }
          break;
         };
         if (($15 | 0) <= ($4 | 0)) {
          break label$83
         }
         $15 = $15 + -1 | 0;
         $4 = ($15 << 2) + $22 | 0;
         HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
         HEAP32[$4 >> 2] = $5;
        }
        if (($7 | 0) >= 1) {
         $7 = $7 + -1 | 0;
         $4 = HEAP32[$3 + 140 >> 2];
         $9 = $16;
         $2 = $6;
         continue;
        }
        break;
       };
       label$96 : {
        if (($20 | 0) <= 1) {
         break label$96
        }
        $5 = 0;
        HEAP32[$3 + 116 >> 2] = 0;
        HEAP8[$3 + 120 | 0] = 1;
        HEAP32[$3 + 108 >> 2] = 0;
        HEAP32[$3 + 112 >> 2] = 0;
        $8 = $36;
        HEAP32[$8 >> 2] = 0;
        HEAP32[$8 + 4 >> 2] = 0;
        HEAP32[$3 + 32 >> 2] = 0;
        HEAP32[$3 + 36 >> 2] = 0;
        $14 = Math_fround(0.0);
        $6 = 0;
        $17 = Math_fround(0.0);
        $19 = Math_fround(0.0);
        $29 = 0;
        while (1) {
         $2 = HEAP32[$3 + 140 >> 2] + Math_imul(HEAP32[($29 << 2) + $18 >> 2], 36) | 0;
         $21 = HEAPF32[$2 + 24 >> 2];
         $23 = HEAPF32[$2 + 28 >> 2];
         HEAPF32[$3 + 32 >> 2] = HEAPF32[$2 + 20 >> 2] + $19;
         HEAPF32[$3 + 40 >> 2] = $23 + $14;
         HEAPF32[$3 + 36 >> 2] = $21 + $17;
         $10 = HEAP32[$2 + 4 >> 2];
         if (($10 | 0) >= 1) {
          $24 = $2 + 4 | 0;
          $1 = $2 + 12 | 0;
          $9 = 0;
          while (1) {
           $7 = HEAP32[HEAP32[$1 >> 2] + ($9 << 2) >> 2];
           $2 = HEAP32[HEAP32[$0 + 56 >> 2] + 16 >> 2] + ($7 << 4) | 0;
           $13 = $2 + 8 | 0;
           $4 = HEAP32[$13 >> 2];
           $8 = HEAP32[$13 + 4 >> 2];
           $12 = $3 + 16 | 0;
           HEAP32[$12 >> 2] = $4;
           HEAP32[$12 + 4 >> 2] = $8;
           $11 = HEAP32[$2 + 4 >> 2];
           HEAP32[$3 + 8 >> 2] = HEAP32[$2 >> 2];
           HEAP32[$3 + 12 >> 2] = $11;
           label$100 : {
            if (($6 | 0) >= 1) {
             $2 = HEAP32[$3 + 116 >> 2] + 20 | 0;
             $4 = 0;
             while (1) {
              if (($7 | 0) == HEAP32[$2 >> 2]) {
               break label$100
              }
              $2 = $2 + 24 | 0;
              $4 = $4 + 1 | 0;
              if (($4 | 0) < ($5 | 0)) {
               continue
              }
              break;
             };
             $6 = $5;
            }
            $8 = HEAP32[$12 + 4 >> 2];
            $10 = $3 + 56 | 0;
            HEAP32[$10 >> 2] = HEAP32[$12 >> 2];
            HEAP32[$10 + 4 >> 2] = $8;
            $11 = HEAP32[$3 + 12 >> 2];
            HEAP32[$3 + 48 >> 2] = HEAP32[$3 + 8 >> 2];
            HEAP32[$3 + 52 >> 2] = $11;
            label$103 : {
             if (($6 | 0) != HEAP32[$3 + 112 >> 2]) {
              $5 = $6;
              break label$103;
             }
             $12 = $6 ? $6 << 1 : 1;
             if (($6 | 0) >= ($12 | 0)) {
              $5 = $6;
              break label$103;
             }
             label$106 : {
              if (!$12) {
               $26 = 0;
               break label$106;
              }
              $26 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($12, 24));
              $5 = HEAP32[$3 + 108 >> 2];
              $6 = $5;
             }
             $25 = HEAP32[$3 + 116 >> 2];
             label$108 : {
              label$109 : {
               if (($6 | 0) >= 1) {
                $2 = $26;
                $4 = $25;
                while (1) {
                 $8 = HEAP32[$4 + 4 >> 2];
                 HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
                 HEAP32[$2 + 4 >> 2] = $8;
                 $13 = $4 + 16 | 0;
                 $32 = HEAP32[$13 >> 2];
                 $11 = HEAP32[$13 + 4 >> 2];
                 $8 = $2 + 16 | 0;
                 HEAP32[$8 >> 2] = $32;
                 HEAP32[$8 + 4 >> 2] = $11;
                 $13 = $4 + 8 | 0;
                 $32 = HEAP32[$13 >> 2];
                 $8 = HEAP32[$13 + 4 >> 2];
                 $11 = $2 + 8 | 0;
                 HEAP32[$11 >> 2] = $32;
                 HEAP32[$11 + 4 >> 2] = $8;
                 $2 = $2 + 24 | 0;
                 $4 = $4 + 24 | 0;
                 $6 = $6 + -1 | 0;
                 if ($6) {
                  continue
                 }
                 break;
                };
                break label$109;
               }
               if (!$25) {
                break label$108
               }
              }
              if (HEAPU8[$3 + 120 | 0]) {
               btAlignedFreeInternal_28void__29($25);
               $5 = HEAP32[$3 + 108 >> 2];
              }
              HEAP32[$3 + 116 >> 2] = 0;
             }
             HEAP32[$3 + 116 >> 2] = $26;
             HEAP8[$3 + 120 | 0] = 1;
             HEAP32[$3 + 112 >> 2] = $12;
            }
            $11 = HEAP32[$3 + 52 >> 2];
            $2 = HEAP32[$3 + 116 >> 2] + Math_imul($5, 24) | 0;
            HEAP32[$2 >> 2] = HEAP32[$3 + 48 >> 2];
            HEAP32[$2 + 4 >> 2] = $11;
            HEAP32[$2 + 20 >> 2] = $7;
            HEAP32[$2 + 16 >> 2] = HEAP32[$3 - -64 >> 2];
            $8 = HEAP32[$10 + 4 >> 2];
            $11 = $2 + 8 | 0;
            HEAP32[$11 >> 2] = HEAP32[$10 >> 2];
            HEAP32[$11 + 4 >> 2] = $8;
            $5 = HEAP32[$3 + 108 >> 2] + 1 | 0;
            HEAP32[$3 + 108 >> 2] = $5;
            $10 = HEAP32[$24 >> 2];
           }
           $6 = $5;
           $9 = $9 + 1 | 0;
           if (($9 | 0) < ($10 | 0)) {
            continue
           }
           break;
          };
         }
         $14 = HEAPF32[$3 + 40 >> 2];
         $17 = HEAPF32[$3 + 36 >> 2];
         $19 = HEAPF32[$3 + 32 >> 2];
         $29 = $29 + 1 | 0;
         if (($20 | 0) != ($29 | 0)) {
          continue
         }
         break;
        };
        HEAP32[$3 + 52 >> 2] = 0;
        HEAP32[$3 + 56 >> 2] = 0;
        $2 = HEAP32[$3 + 140 >> 2] + Math_imul(HEAP32[$18 >> 2], 36) | 0;
        HEAP32[$3 + 68 >> 2] = HEAP32[$2 + 20 >> 2];
        HEAP32[$3 + 72 >> 2] = HEAP32[$2 + 24 >> 2];
        HEAP32[$3 + 76 >> 2] = HEAP32[$2 + 28 >> 2];
        HEAP32[$3 + 60 >> 2] = 0;
        HEAP8[$3 + 64 | 0] = 1;
        HEAP32[$3 + 80 >> 2] = HEAP32[$2 + 32 >> 2];
        $21 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($19 * $19) + Math_fround($17 * $17)) + Math_fround($14 * $14)))));
        HEAPF32[$3 + 40 >> 2] = $14 * $21;
        HEAPF32[$3 + 36 >> 2] = $17 * $21;
        HEAPF32[$3 + 32 >> 2] = $19 * $21;
        HEAP32[$3 + 20 >> 2] = 0;
        HEAP8[$3 + 24 | 0] = 1;
        HEAP32[$3 + 12 >> 2] = 0;
        HEAP32[$3 + 16 >> 2] = 0;
        GrahamScanConvexHull2D_28btAlignedObjectArray_GrahamVector3___2c_20btAlignedObjectArray_GrahamVector3___2c_20btVector3_20const__29($3 + 104 | 0, $3 + 8 | 0, $3 + 32 | 0);
        label$113 : {
         if (HEAP32[$3 + 12 >> 2] <= 0) {
          $7 = HEAP32[$3 + 108 >> 2];
          break label$113;
         }
         $9 = 0;
         $5 = HEAP32[$3 + 52 >> 2];
         while (1) {
          $6 = Math_imul($9, 24);
          $7 = ($6 + HEAP32[$3 + 20 >> 2] | 0) + 20 | 0;
          label$116 : {
           if (HEAP32[$3 + 56 >> 2] != ($5 | 0)) {
            break label$116
           }
           $10 = $5 ? $5 << 1 : 1;
           if (($5 | 0) >= ($10 | 0)) {
            break label$116
           }
           label$117 : {
            if (!$10) {
             $12 = 0;
             break label$117;
            }
            $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10 << 2);
            $5 = HEAP32[$3 + 52 >> 2];
           }
           $1 = HEAP32[$3 + 60 >> 2];
           label$119 : {
            label$120 : {
             if (($5 | 0) >= 1) {
              $2 = $12;
              $4 = $1;
              while (1) {
               HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
               $2 = $2 + 4 | 0;
               $4 = $4 + 4 | 0;
               $5 = $5 + -1 | 0;
               if ($5) {
                continue
               }
               break;
              };
              break label$120;
             }
             if (!$1) {
              break label$119
             }
            }
            if (HEAPU8[$3 + 64 | 0]) {
             btAlignedFreeInternal_28void__29($1)
            }
            HEAP32[$3 + 60 >> 2] = 0;
            $5 = HEAP32[$3 + 52 >> 2];
           }
           HEAP32[$3 + 60 >> 2] = $12;
           HEAP8[$3 + 64 | 0] = 1;
           HEAP32[$3 + 56 >> 2] = $10;
          }
          HEAP32[HEAP32[$3 + 60 >> 2] + ($5 << 2) >> 2] = HEAP32[$7 >> 2];
          $5 = HEAP32[$3 + 52 >> 2] + 1 | 0;
          HEAP32[$3 + 52 >> 2] = $5;
          $7 = HEAP32[$3 + 108 >> 2];
          label$124 : {
           if (($7 | 0) < 1) {
            break label$124
           }
           $2 = HEAP32[$3 + 116 >> 2] + 20 | 0;
           $6 = HEAP32[($6 + HEAP32[$3 + 20 >> 2] | 0) + 20 >> 2];
           $4 = 0;
           while (1) {
            if (HEAP32[$2 >> 2] != ($6 | 0)) {
             $2 = $2 + 24 | 0;
             $4 = $4 + 1 | 0;
             if (($4 | 0) < ($7 | 0)) {
              continue
             }
             break label$124;
            }
            break;
           };
           HEAP32[$2 >> 2] = -1;
          }
          $9 = $9 + 1 | 0;
          if (($9 | 0) < HEAP32[$3 + 12 >> 2]) {
           continue
          }
          break;
         };
        }
        label$127 : {
         if (($7 | 0) < 1) {
          break label$127
         }
         $10 = HEAP32[$3 + 132 >> 2];
         if (($10 | 0) < 1) {
          break label$127
         }
         $1 = HEAP32[$3 + 140 >> 2];
         $24 = HEAP32[$3 + 116 >> 2];
         $12 = 0;
         while (1) {
          label$129 : {
           $6 = HEAP32[(Math_imul($12, 24) + $24 | 0) + 20 >> 2];
           if (($6 | 0) == -1) {
            break label$129
           }
           label$130 : {
            if (($20 | 0) <= 0) {
             $9 = 0;
             while (1) {
              $2 = Math_imul($9, 36) + $1 | 0;
              $5 = HEAP32[$2 + 4 >> 2];
              if (($5 | 0) > 0) {
               $2 = HEAP32[$2 + 12 >> 2];
               $4 = 0;
               while (1) {
                if (($6 | 0) == HEAP32[$2 >> 2]) {
                 break label$130
                }
                $2 = $2 + 4 | 0;
                $4 = $4 + 1 | 0;
                if (($4 | 0) < ($5 | 0)) {
                 continue
                }
                break;
               };
              }
              $9 = $9 + 1 | 0;
              if (($9 | 0) != ($10 | 0)) {
               continue
              }
              break;
             };
             break label$129;
            }
            $5 = 0;
            while (1) {
             $2 = $18;
             $4 = $20;
             label$136 : {
              while (1) {
               if (($5 | 0) == HEAP32[$2 >> 2]) {
                break label$136
               }
               $2 = $2 + 4 | 0;
               $4 = $4 + -1 | 0;
               if ($4) {
                continue
               }
               break;
              };
              $2 = Math_imul($5, 36) + $1 | 0;
              $9 = HEAP32[$2 + 4 >> 2];
              if (($9 | 0) < 1) {
               break label$136
              }
              $2 = HEAP32[$2 + 12 >> 2];
              $4 = 0;
              while (1) {
               if (($6 | 0) == HEAP32[$2 >> 2]) {
                break label$130
               }
               $2 = $2 + 4 | 0;
               $4 = $4 + 1 | 0;
               if (($4 | 0) < ($9 | 0)) {
                continue
               }
               break;
              };
             }
             $5 = $5 + 1 | 0;
             if (($5 | 0) != ($10 | 0)) {
              continue
             }
             break;
            };
            break label$129;
           }
           $2 = HEAP32[$3 + 20 >> 2];
           if ($2) {
            if (HEAPU8[$3 + 24 | 0]) {
             btAlignedFreeInternal_28void__29($2)
            }
            HEAP32[$3 + 20 >> 2] = 0;
           }
           $2 = HEAP32[$3 + 60 >> 2];
           if ($2) {
            if (HEAPU8[$3 + 64 | 0]) {
             btAlignedFreeInternal_28void__29($2)
            }
            HEAP32[$3 + 60 >> 2] = 0;
           }
           $2 = HEAP32[$3 + 116 >> 2];
           if (!$2) {
            break label$96
           }
           if (HEAPU8[$3 + 120 | 0]) {
            btAlignedFreeInternal_28void__29($2)
           }
           HEAP32[$3 + 116 >> 2] = 0;
           break label$96;
          }
          $12 = $12 + 1 | 0;
          if (($12 | 0) < ($7 | 0)) {
           continue
          }
          break;
         };
        }
        btAlignedObjectArray_btFace___push_back_28btFace_20const__29(HEAP32[$0 + 56 >> 2] + 24 | 0, $3 + 48 | 0);
        $2 = HEAP32[$3 + 20 >> 2];
        if ($2) {
         if (HEAPU8[$3 + 24 | 0]) {
          btAlignedFreeInternal_28void__29($2)
         }
         HEAP32[$3 + 20 >> 2] = 0;
        }
        $2 = HEAP32[$3 + 60 >> 2];
        if ($2) {
         if (HEAPU8[$3 + 64 | 0]) {
          btAlignedFreeInternal_28void__29($2)
         }
         HEAP32[$3 + 60 >> 2] = 0;
        }
        $2 = HEAP32[$3 + 116 >> 2];
        if (!$2) {
         break label$79
        }
        if (HEAPU8[$3 + 120 | 0]) {
         btAlignedFreeInternal_28void__29($2)
        }
        HEAP32[$3 + 116 >> 2] = 0;
        break label$79;
       }
       if (($20 | 0) < 1) {
        break label$79
       }
      }
      $9 = 0;
      while (1) {
       $2 = HEAP32[($9 << 2) + $18 >> 2];
       HEAP32[$3 + 52 >> 2] = 0;
       HEAP32[$3 + 56 >> 2] = 0;
       HEAP32[$3 + 60 >> 2] = 0;
       $6 = HEAP32[$3 + 140 >> 2] + Math_imul($2, 36) | 0;
       $5 = HEAP32[$6 + 4 >> 2];
       HEAP8[$3 + 64 | 0] = 1;
       label$150 : {
        if (($5 | 0) >= 1) {
         $1 = $5 << 2;
         $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1);
         $12 = HEAP32[$3 + 60 >> 2];
         $7 = HEAP32[$3 + 52 >> 2];
         label$152 : {
          label$153 : {
           if (($7 | 0) >= 1) {
            $2 = $10;
            $4 = $12;
            while (1) {
             HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
             $2 = $2 + 4 | 0;
             $4 = $4 + 4 | 0;
             $7 = $7 + -1 | 0;
             if ($7) {
              continue
             }
             break;
            };
            break label$153;
           }
           if (!$12) {
            break label$152
           }
          }
          if (!HEAPU8[$3 + 64 | 0]) {
           break label$152
          }
          btAlignedFreeInternal_28void__29($12);
         }
         HEAP32[$3 + 60 >> 2] = $10;
         HEAP8[$3 + 64 | 0] = 1;
         HEAP32[$3 + 56 >> 2] = $5;
         memset($10, 0, $1);
         HEAP32[$3 + 52 >> 2] = $5;
         $2 = HEAP32[$6 + 12 >> 2];
         $4 = HEAP32[$3 + 60 >> 2];
         while (1) {
          HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
          $4 = $4 + 4 | 0;
          $2 = $2 + 4 | 0;
          $5 = $5 + -1 | 0;
          if ($5) {
           continue
          }
          break;
         };
         break label$150;
        }
        HEAP32[$3 + 52 >> 2] = $5;
       }
       $11 = HEAP32[$6 + 24 >> 2];
       $8 = $35;
       HEAP32[$8 >> 2] = HEAP32[$6 + 20 >> 2];
       HEAP32[$8 + 4 >> 2] = $11;
       $13 = $6 + 28 | 0;
       $1 = HEAP32[$13 >> 2];
       $11 = $8 + 8 | 0;
       $8 = HEAP32[$13 + 4 >> 2];
       HEAP32[$11 >> 2] = $1;
       HEAP32[$11 + 4 >> 2] = $8;
       btAlignedObjectArray_btFace___push_back_28btFace_20const__29(HEAP32[$0 + 56 >> 2] + 24 | 0, $3 + 48 | 0);
       $2 = HEAP32[$3 + 60 >> 2];
       if ($2) {
        if (HEAPU8[$3 + 64 | 0]) {
         btAlignedFreeInternal_28void__29($2)
        }
        HEAP32[$3 + 60 >> 2] = 0;
       }
       $9 = $9 + 1 | 0;
       if (($20 | 0) != ($9 | 0)) {
        continue
       }
       break;
      };
     }
     if ($18) {
      btAlignedFreeInternal_28void__29($16)
     }
     if ($15) {
      continue
     }
     break;
    };
    btConvexPolyhedron__initialize_28_29(HEAP32[$0 + 56 >> 2]);
    if (!$22) {
     break label$67
    }
    btAlignedFreeInternal_28void__29($33);
    break label$67;
   }
   btConvexPolyhedron__initialize_28_29(HEAP32[$0 + 56 >> 2]);
  }
  $7 = HEAP32[$3 + 132 >> 2];
  if (($7 | 0) >= 1) {
   $4 = 8;
   while (1) {
    $2 = $4 + HEAP32[$3 + 140 >> 2] | 0;
    $6 = $2 + -4 | 0;
    $5 = $2 + 4 | 0;
    $9 = HEAP32[$5 >> 2];
    if ($9) {
     if (HEAPU8[$2 + 8 | 0]) {
      btAlignedFreeInternal_28void__29($9)
     }
     HEAP32[$5 >> 2] = 0;
    }
    HEAP32[$6 >> 2] = 0;
    HEAP32[$5 >> 2] = 0;
    HEAP32[$2 >> 2] = 0;
    HEAP8[$2 + 8 | 0] = 1;
    $4 = $4 + 36 | 0;
    $7 = $7 + -1 | 0;
    if ($7) {
     continue
    }
    break;
   };
  }
  $2 = HEAP32[$3 + 140 >> 2];
  if ($2) {
   if (HEAPU8[$3 + 144 | 0]) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$3 + 140 >> 2] = 0;
  }
  if ($27) {
   btAlignedFreeInternal_28void__29($30)
  }
  $2 = HEAP32[$3 + 204 >> 2];
  if ($2) {
   if (HEAPU8[$3 + 208 | 0]) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$3 + 204 >> 2] = 0;
  }
  HEAP32[$3 + 204 >> 2] = 0;
  HEAP8[$3 + 208 | 0] = 1;
  HEAP32[$3 + 196 >> 2] = 0;
  HEAP32[$3 + 200 >> 2] = 0;
  $2 = HEAP32[$3 + 184 >> 2];
  if ($2) {
   if (HEAPU8[$3 + 188 | 0]) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$3 + 184 >> 2] = 0;
  }
  HEAP32[$3 + 184 >> 2] = 0;
  HEAP8[$3 + 188 | 0] = 1;
  HEAP32[$3 + 176 >> 2] = 0;
  HEAP32[$3 + 180 >> 2] = 0;
  $2 = HEAP32[$3 + 164 >> 2];
  if ($2) {
   if (HEAPU8[$3 + 168 | 0]) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$3 + 164 >> 2] = 0;
  }
  $2 = HEAP32[$3 + 228 >> 2];
  if ($2) {
   if (HEAPU8[$3 + 232 | 0]) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$3 + 228 >> 2] = 0;
  }
  global$0 = $3 + 240 | 0;
  return 1;
 }
 
 function btAlignedObjectArray_btFace___reserve_28int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  if (HEAP32[$0 + 8 >> 2] < ($1 | 0)) {
   if ($1) {
    $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($1, 36))
   } else {
    $8 = 0
   }
   $14 = HEAP32[$0 + 4 >> 2];
   label$4 : {
    if (($14 | 0) < 1) {
     break label$4
    }
    while (1) {
     $2 = Math_imul($9, 36);
     $3 = $2 + $8 | 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$3 + 8 >> 2] = 0;
     HEAP8[$3 + 16 | 0] = 1;
     HEAP32[$3 + 12 >> 2] = 0;
     $10 = $3 + 4 | 0;
     $6 = $2 + HEAP32[$0 + 12 >> 2] | 0;
     $5 = HEAP32[$6 + 4 >> 2];
     label$6 : {
      if (($5 | 0) >= 1) {
       $17 = $3 + 8 | 0;
       $15 = $3 + 16 | 0;
       $16 = $5 << 2;
       $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($16);
       $12 = $3 + 12 | 0;
       $13 = HEAP32[$12 >> 2];
       $7 = HEAP32[$10 >> 2];
       label$8 : {
        label$9 : {
         if (($7 | 0) >= 1) {
          $2 = $11;
          $4 = $13;
          while (1) {
           HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
           $2 = $2 + 4 | 0;
           $4 = $4 + 4 | 0;
           $7 = $7 + -1 | 0;
           if ($7) {
            continue
           }
           break;
          };
          break label$9;
         }
         if (!$13) {
          break label$8
         }
        }
        if (!HEAPU8[$15 | 0]) {
         break label$8
        }
        btAlignedFreeInternal_28void__29($13);
       }
       HEAP32[$12 >> 2] = $11;
       HEAP8[$15 | 0] = 1;
       HEAP32[$17 >> 2] = $5;
       memset($11, 0, $16);
       HEAP32[$10 >> 2] = $5;
       $2 = HEAP32[$6 + 12 >> 2];
       $4 = HEAP32[$12 >> 2];
       while (1) {
        HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
        $4 = $4 + 4 | 0;
        $2 = $2 + 4 | 0;
        $5 = $5 + -1 | 0;
        if ($5) {
         continue
        }
        break;
       };
       break label$6;
      }
      HEAP32[$10 >> 2] = $5;
     }
     $4 = HEAP32[$6 + 24 >> 2];
     HEAP32[$3 + 20 >> 2] = HEAP32[$6 + 20 >> 2];
     HEAP32[$3 + 24 >> 2] = $4;
     $6 = $6 + 28 | 0;
     $2 = HEAP32[$6 >> 2];
     $4 = $3 + 28 | 0;
     $3 = HEAP32[$6 + 4 >> 2];
     HEAP32[$4 >> 2] = $2;
     HEAP32[$4 + 4 >> 2] = $3;
     $9 = $9 + 1 | 0;
     if (($14 | 0) != ($9 | 0)) {
      continue
     }
     break;
    };
    $7 = HEAP32[$0 + 4 >> 2];
    if (($7 | 0) < 1) {
     break label$4
    }
    $4 = 8;
    while (1) {
     $2 = $4 + HEAP32[$0 + 12 >> 2] | 0;
     $3 = $2 + -4 | 0;
     $5 = $2 + 4 | 0;
     $6 = HEAP32[$5 >> 2];
     if ($6) {
      if (HEAPU8[$2 + 8 | 0]) {
       btAlignedFreeInternal_28void__29($6)
      }
      HEAP32[$5 >> 2] = 0;
     }
     HEAP32[$3 >> 2] = 0;
     HEAP32[$5 >> 2] = 0;
     HEAP32[$2 >> 2] = 0;
     HEAP8[$2 + 8 | 0] = 1;
     $4 = $4 + 36 | 0;
     $7 = $7 + -1 | 0;
     if ($7) {
      continue
     }
     break;
    };
   }
   $2 = HEAP32[$0 + 12 >> 2];
   if ($2) {
    if (HEAPU8[$0 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($2)
    }
    HEAP32[$0 + 12 >> 2] = 0;
   }
   HEAP32[$0 + 12 >> 2] = $8;
   HEAP8[$0 + 16 | 0] = 1;
   HEAP32[$0 + 8 >> 2] = $1;
  }
 }
 
 function GrahamScanConvexHull2D_28btAlignedObjectArray_GrahamVector3___2c_20btAlignedObjectArray_GrahamVector3___2c_20btVector3_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0);
  $20 = global$0 - 32 | 0;
  global$0 = $20;
  $17 = HEAPF32[$2 + 8 >> 2];
  label$1 : {
   if (!!(Math_fround(Math_abs($17)) > Math_fround(.7071067690849304))) {
    $15 = HEAPF32[$2 + 4 >> 2];
    $16 = Math_fround(Math_fround($17 * $17) + Math_fround($15 * $15));
    $13 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($16)));
    $22 = Math_fround($16 * $13);
    $19 = HEAPF32[$2 >> 2];
    $16 = Math_fround(-Math_fround($17 * $13));
    $23 = Math_fround($19 * $16);
    $17 = Math_fround($15 * $13);
    $24 = Math_fround(-Math_fround($19 * $17));
    $15 = Math_fround(0.0);
    break label$1;
   }
   $16 = HEAPF32[$2 >> 2];
   $15 = HEAPF32[$2 + 4 >> 2];
   $13 = Math_fround(Math_fround($16 * $16) + Math_fround($15 * $15));
   $18 = $13;
   $13 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($13)));
   $23 = Math_fround($18 * $13);
   $15 = Math_fround(-Math_fround($15 * $13));
   $24 = Math_fround($17 * $15);
   $16 = Math_fround($16 * $13);
   $22 = Math_fround(-Math_fround($17 * $16));
   $17 = Math_fround(0.0);
  }
  $11 = HEAP32[$0 + 4 >> 2];
  label$3 : {
   if (($11 | 0) >= 2) {
    $4 = HEAP32[$0 + 12 >> 2];
    while (1) {
     $7 = $4 + $14 | 0;
     $9 = $7 + 8 | 0;
     if (!!(Math_fround(Math_fround(Math_fround($15 * HEAPF32[$7 >> 2]) + Math_fround($16 * HEAPF32[$7 + 4 >> 2])) + Math_fround($17 * HEAPF32[$9 >> 2])) < Math_fround(Math_fround(Math_fround($15 * HEAPF32[$4 >> 2]) + Math_fround($16 * HEAPF32[$4 + 4 >> 2])) + Math_fround($17 * HEAPF32[$4 + 8 >> 2])))) {
      $8 = $4 + 16 | 0;
      $3 = $8;
      $10 = HEAP32[$3 >> 2];
      $5 = HEAP32[$3 + 4 >> 2];
      $11 = $20 + 24 | 0;
      $6 = $11;
      HEAP32[$6 >> 2] = $10;
      HEAP32[$6 + 4 >> 2] = $5;
      $21 = $4 + 8 | 0;
      $3 = $21;
      $6 = HEAP32[$3 + 4 >> 2];
      $10 = $20 + 16 | 0;
      $5 = $10;
      HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$5 + 4 >> 2] = $6;
      $5 = HEAP32[$4 + 4 >> 2];
      $6 = $20;
      HEAP32[$6 + 8 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$6 + 12 >> 2] = $5;
      $3 = $7;
      $5 = HEAP32[$3 >> 2];
      $6 = HEAP32[$3 + 4 >> 2];
      HEAP32[$4 >> 2] = $5;
      HEAP32[$4 + 4 >> 2] = $6;
      $3 = $9;
      $9 = HEAP32[$3 >> 2];
      $5 = HEAP32[$3 + 4 >> 2];
      $6 = $21;
      HEAP32[$6 >> 2] = $9;
      HEAP32[$6 + 4 >> 2] = $5;
      $3 = $7 + 16 | 0;
      $9 = HEAP32[$3 >> 2];
      $6 = HEAP32[$3 + 4 >> 2];
      $5 = $8;
      HEAP32[$5 >> 2] = $9;
      HEAP32[$5 + 4 >> 2] = $6;
      $3 = $20;
      $9 = HEAP32[$3 + 8 >> 2];
      $5 = HEAP32[$3 + 12 >> 2];
      $4 = $14 + HEAP32[$0 + 12 >> 2] | 0;
      HEAP32[$4 >> 2] = $9;
      HEAP32[$4 + 4 >> 2] = $5;
      $3 = $11;
      $9 = HEAP32[$3 >> 2];
      $6 = HEAP32[$3 + 4 >> 2];
      $5 = $4 + 16 | 0;
      HEAP32[$5 >> 2] = $9;
      HEAP32[$5 + 4 >> 2] = $6;
      $3 = $10;
      $9 = HEAP32[$3 >> 2];
      $5 = HEAP32[$3 + 4 >> 2];
      $6 = $4 + 8 | 0;
      HEAP32[$6 >> 2] = $9;
      HEAP32[$6 + 4 >> 2] = $5;
      $4 = HEAP32[$0 + 12 >> 2];
      $11 = HEAP32[$0 + 4 >> 2];
     }
     $14 = $14 + 24 | 0;
     $12 = $12 + 1 | 0;
     if (($12 | 0) < ($11 | 0)) {
      continue
     }
     break;
    };
    HEAP32[$4 + 16 >> 2] = -246811958;
    if (($11 | 0) >= 2) {
     $14 = $11 + -1 | 0;
     $7 = $4 + 40 | 0;
     $27 = HEAPF32[$4 + 8 >> 2];
     $28 = HEAPF32[$4 >> 2];
     $29 = HEAPF32[$4 + 4 >> 2];
     while (1) {
      $18 = Math_fround(0.0);
      $3 = $7;
      $13 = Math_fround(HEAPF32[$7 + -16 >> 2] - $28);
      $25 = Math_fround(HEAPF32[$7 + -12 >> 2] - $29);
      $26 = Math_fround(HEAPF32[$7 + -8 >> 2] - $27);
      $19 = Math_fround(Math_fround(Math_fround($22 * $13) + Math_fround($24 * $25)) + Math_fround($23 * $26));
      $13 = Math_fround(Math_fround(Math_fround($15 * $13) + Math_fround($16 * $25)) + Math_fround($17 * $26));
      if (!(Math_fround(Math_fround($19 * $19) + Math_fround($13 * $13)) < Math_fround(1.1920928955078125e-07))) {
       $18 = Math_fround(Math_abs($19));
       label$10 : {
        if (!!($13 >= Math_fround(0.0))) {
         $13 = Math_fround(Math_fround($13 - $18) / Math_fround($13 + $18));
         $18 = Math_fround(.7853981852531433);
         break label$10;
        }
        $13 = Math_fround(Math_fround($13 + $18) / Math_fround($18 - $13));
        $18 = Math_fround(2.356194496154785);
       }
       $13 = Math_fround($18 + Math_fround($13 * Math_fround(-.7853981852531433)));
       $18 = $19 < Math_fround(0.0) ? Math_fround(-$13) : $13;
      }
      HEAPF32[$3 >> 2] = $18;
      $7 = $7 + 24 | 0;
      $14 = $14 + -1 | 0;
      if ($14) {
       continue
      }
      break;
     };
    }
    $3 = $4 + 8 | 0;
    $9 = HEAP32[$3 >> 2];
    $6 = HEAP32[$3 + 4 >> 2];
    $5 = $20 + 16 | 0;
    HEAP32[$5 >> 2] = $9;
    HEAP32[$5 + 4 >> 2] = $6;
    $5 = HEAP32[$4 + 4 >> 2];
    $6 = $20;
    HEAP32[$6 + 8 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$6 + 12 >> 2] = $5;
    void_20btAlignedObjectArray_GrahamVector3___quickSortInternal_btAngleCompareFunc__28btAngleCompareFunc_20const__2c_20int_2c_20int_29($0, $6 + 8 | 0, 1, $11 + -1 | 0);
    $9 = HEAP32[$0 + 12 >> 2];
    $12 = HEAP32[$1 + 4 >> 2];
    label$12 : {
     if (($12 | 0) != HEAP32[$1 + 8 >> 2]) {
      break label$12
     }
     $8 = $12 ? $12 << 1 : 1;
     if (($12 | 0) >= ($8 | 0)) {
      break label$12
     }
     label$13 : {
      if (!$8) {
       $11 = 0;
       break label$13;
      }
      $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($8, 24));
      $12 = HEAP32[$1 + 4 >> 2];
     }
     if (($12 | 0) >= 1) {
      $4 = 0;
      while (1) {
       $14 = $4 + HEAP32[$1 + 12 >> 2] | 0;
       $3 = $14;
       $10 = HEAP32[$3 >> 2];
       $6 = HEAP32[$3 + 4 >> 2];
       $7 = $4 + $11 | 0;
       $5 = $7;
       HEAP32[$5 >> 2] = $10;
       HEAP32[$5 + 4 >> 2] = $6;
       $3 = $3 + 16 | 0;
       $10 = HEAP32[$3 >> 2];
       $5 = HEAP32[$3 + 4 >> 2];
       $6 = $7 + 16 | 0;
       HEAP32[$6 >> 2] = $10;
       HEAP32[$6 + 4 >> 2] = $5;
       $3 = $14 + 8 | 0;
       $10 = HEAP32[$3 >> 2];
       $6 = HEAP32[$3 + 4 >> 2];
       $5 = $7 + 8 | 0;
       HEAP32[$5 >> 2] = $10;
       HEAP32[$5 + 4 >> 2] = $6;
       $4 = $4 + 24 | 0;
       $12 = $12 + -1 | 0;
       if ($12) {
        continue
       }
       break;
      };
     }
     $4 = HEAP32[$1 + 12 >> 2];
     if ($4) {
      if (HEAPU8[$1 + 16 | 0]) {
       btAlignedFreeInternal_28void__29($4)
      }
      HEAP32[$1 + 12 >> 2] = 0;
     }
     HEAP32[$1 + 12 >> 2] = $11;
     HEAP8[$1 + 16 | 0] = 1;
     HEAP32[$1 + 8 >> 2] = $8;
     $12 = HEAP32[$1 + 4 >> 2];
    }
    $3 = $9;
    $8 = HEAP32[$3 >> 2];
    $5 = HEAP32[$3 + 4 >> 2];
    $4 = HEAP32[$1 + 12 >> 2] + Math_imul($12, 24) | 0;
    HEAP32[$4 >> 2] = $8;
    HEAP32[$4 + 4 >> 2] = $5;
    $3 = $3 + 16 | 0;
    $8 = HEAP32[$3 >> 2];
    $6 = HEAP32[$3 + 4 >> 2];
    $5 = $4 + 16 | 0;
    HEAP32[$5 >> 2] = $8;
    HEAP32[$5 + 4 >> 2] = $6;
    $3 = $9 + 8 | 0;
    $9 = HEAP32[$3 >> 2];
    $5 = HEAP32[$3 + 4 >> 2];
    $6 = $4 + 8 | 0;
    HEAP32[$6 >> 2] = $9;
    HEAP32[$6 + 4 >> 2] = $5;
    $7 = HEAP32[$1 + 4 >> 2] + 1 | 0;
    HEAP32[$1 + 4 >> 2] = $7;
    $9 = HEAP32[$0 + 12 >> 2] + 24 | 0;
    label$19 : {
     if (HEAP32[$1 + 8 >> 2] != ($7 | 0)) {
      break label$19
     }
     $8 = $7 ? $7 << 1 : 1;
     if (($7 | 0) >= ($8 | 0)) {
      break label$19
     }
     label$20 : {
      if (!$8) {
       $11 = 0;
       break label$20;
      }
      $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($8, 24));
      $7 = HEAP32[$1 + 4 >> 2];
     }
     if (($7 | 0) >= 1) {
      $4 = 0;
      while (1) {
       $12 = $4 + HEAP32[$1 + 12 >> 2] | 0;
       $3 = $12;
       $10 = HEAP32[$3 >> 2];
       $6 = HEAP32[$3 + 4 >> 2];
       $14 = $4 + $11 | 0;
       $5 = $14;
       HEAP32[$5 >> 2] = $10;
       HEAP32[$5 + 4 >> 2] = $6;
       $3 = $3 + 16 | 0;
       $10 = HEAP32[$3 >> 2];
       $5 = HEAP32[$3 + 4 >> 2];
       $6 = $14 + 16 | 0;
       HEAP32[$6 >> 2] = $10;
       HEAP32[$6 + 4 >> 2] = $5;
       $3 = $12 + 8 | 0;
       $10 = HEAP32[$3 >> 2];
       $6 = HEAP32[$3 + 4 >> 2];
       $5 = $14 + 8 | 0;
       HEAP32[$5 >> 2] = $10;
       HEAP32[$5 + 4 >> 2] = $6;
       $4 = $4 + 24 | 0;
       $7 = $7 + -1 | 0;
       if ($7) {
        continue
       }
       break;
      };
     }
     $4 = HEAP32[$1 + 12 >> 2];
     if ($4) {
      if (HEAPU8[$1 + 16 | 0]) {
       btAlignedFreeInternal_28void__29($4)
      }
      HEAP32[$1 + 12 >> 2] = 0;
     }
     HEAP32[$1 + 12 >> 2] = $11;
     HEAP8[$1 + 16 | 0] = 1;
     HEAP32[$1 + 8 >> 2] = $8;
     $7 = HEAP32[$1 + 4 >> 2];
    }
    $3 = $9;
    $8 = HEAP32[$3 >> 2];
    $5 = HEAP32[$3 + 4 >> 2];
    $4 = HEAP32[$1 + 12 >> 2] + Math_imul($7, 24) | 0;
    HEAP32[$4 >> 2] = $8;
    HEAP32[$4 + 4 >> 2] = $5;
    $3 = $3 + 16 | 0;
    $8 = HEAP32[$3 >> 2];
    $6 = HEAP32[$3 + 4 >> 2];
    $5 = $4 + 16 | 0;
    HEAP32[$5 >> 2] = $8;
    HEAP32[$5 + 4 >> 2] = $6;
    $3 = $9 + 8 | 0;
    $9 = HEAP32[$3 >> 2];
    $5 = HEAP32[$3 + 4 >> 2];
    $6 = $4 + 8 | 0;
    HEAP32[$6 >> 2] = $9;
    HEAP32[$6 + 4 >> 2] = $5;
    $7 = HEAP32[$1 + 4 >> 2] + 1 | 0;
    HEAP32[$1 + 4 >> 2] = $7;
    if (HEAP32[$0 + 4 >> 2] == 2) {
     break label$3
    }
    $9 = 2;
    while (1) {
     label$27 : {
      if (($7 | 0) < 2) {
       break label$27
      }
      $12 = Math_imul($7, 48);
      $14 = $7 << 1;
      $10 = HEAP32[$1 + 12 >> 2];
      $4 = ($10 + Math_imul($7, 24) | 0) + -48 | 0;
      $8 = HEAP32[$0 + 12 >> 2] + Math_imul($9, 24) | 0;
      $22 = HEAPF32[$8 + 8 >> 2];
      $26 = HEAPF32[$8 + 4 >> 2];
      $25 = HEAPF32[$8 >> 2];
      $27 = HEAPF32[$2 + 8 >> 2];
      $24 = HEAPF32[$2 + 4 >> 2];
      $23 = HEAPF32[$2 >> 2];
      while (1) {
       $16 = HEAPF32[$4 >> 2];
       $17 = Math_fround($16 - HEAPF32[$4 + 24 >> 2]);
       $15 = HEAPF32[$4 + 4 >> 2];
       $13 = Math_fround($15 - $26);
       $15 = Math_fround($15 - HEAPF32[$4 + 28 >> 2]);
       $16 = Math_fround($16 - $25);
       $28 = Math_fround(Math_fround(Math_fround($17 * $13) - Math_fround($15 * $16)) * $27);
       $19 = HEAPF32[$4 + 8 >> 2];
       $18 = Math_fround($19 - $22);
       $29 = Math_fround($15 * $18);
       $15 = Math_fround($19 - HEAPF32[$4 + 32 >> 2]);
       if (!(Math_fround($28 + Math_fround(Math_fround($23 * Math_fround($29 - Math_fround($15 * $13))) + Math_fround($24 * Math_fround(Math_fround($15 * $16) - Math_fround($17 * $18))))) > Math_fround(0.0))) {
        $7 = $7 + -1 | 0;
        HEAP32[$1 + 4 >> 2] = $7;
        $4 = $4 + -24 | 0;
        $12 = $12 + -48 | 0;
        $14 = $14 + -2 | 0;
        if (($7 | 0) > 1) {
         continue
        }
        break label$27;
       }
       break;
      };
      label$30 : {
       if (($7 | 0) != HEAP32[$1 + 8 >> 2]) {
        break label$30
       }
       if (($7 | 0) >= ($14 | 0)) {
        break label$30
       }
       $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($12);
       $11 = HEAP32[$1 + 4 >> 2];
       if (($11 | 0) >= 1) {
        $4 = 0;
        while (1) {
         $12 = $4 + HEAP32[$1 + 12 >> 2] | 0;
         $3 = $12;
         $21 = HEAP32[$3 >> 2];
         $6 = HEAP32[$3 + 4 >> 2];
         $7 = $4 + $10 | 0;
         $5 = $7;
         HEAP32[$5 >> 2] = $21;
         HEAP32[$5 + 4 >> 2] = $6;
         $3 = $3 + 16 | 0;
         $21 = HEAP32[$3 >> 2];
         $5 = HEAP32[$3 + 4 >> 2];
         $6 = $7 + 16 | 0;
         HEAP32[$6 >> 2] = $21;
         HEAP32[$6 + 4 >> 2] = $5;
         $3 = $12 + 8 | 0;
         $21 = HEAP32[$3 >> 2];
         $6 = HEAP32[$3 + 4 >> 2];
         $5 = $7 + 8 | 0;
         HEAP32[$5 >> 2] = $21;
         HEAP32[$5 + 4 >> 2] = $6;
         $4 = $4 + 24 | 0;
         $11 = $11 + -1 | 0;
         if ($11) {
          continue
         }
         break;
        };
       }
       $4 = HEAP32[$1 + 12 >> 2];
       if ($4) {
        if (HEAPU8[$1 + 16 | 0]) {
         btAlignedFreeInternal_28void__29($4)
        }
        HEAP32[$1 + 12 >> 2] = 0;
       }
       HEAP32[$1 + 12 >> 2] = $10;
       HEAP8[$1 + 16 | 0] = 1;
       HEAP32[$1 + 8 >> 2] = $14;
       $7 = HEAP32[$1 + 4 >> 2];
      }
      $3 = $8;
      $11 = HEAP32[$3 >> 2];
      $5 = HEAP32[$3 + 4 >> 2];
      $4 = Math_imul($7, 24) + $10 | 0;
      HEAP32[$4 >> 2] = $11;
      HEAP32[$4 + 4 >> 2] = $5;
      $3 = $3 + 16 | 0;
      $7 = HEAP32[$3 >> 2];
      $6 = HEAP32[$3 + 4 >> 2];
      $5 = $4 + 16 | 0;
      HEAP32[$5 >> 2] = $7;
      HEAP32[$5 + 4 >> 2] = $6;
      $3 = $8 + 8 | 0;
      $8 = HEAP32[$3 >> 2];
      $5 = HEAP32[$3 + 4 >> 2];
      $6 = $4 + 8 | 0;
      HEAP32[$6 >> 2] = $8;
      HEAP32[$6 + 4 >> 2] = $5;
      $7 = HEAP32[$1 + 4 >> 2] + 1 | 0;
      HEAP32[$1 + 4 >> 2] = $7;
     }
     if (($7 | 0) == 1) {
      $8 = HEAP32[$0 + 12 >> 2] + Math_imul($9, 24) | 0;
      $4 = 1;
      if (HEAP32[$1 + 8 >> 2] == 1) {
       $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(48);
       $12 = HEAP32[$1 + 4 >> 2];
       if (($12 | 0) >= 1) {
        $4 = 0;
        while (1) {
         $14 = $4 + HEAP32[$1 + 12 >> 2] | 0;
         $3 = $14;
         $10 = HEAP32[$3 >> 2];
         $6 = HEAP32[$3 + 4 >> 2];
         $7 = $4 + $11 | 0;
         $5 = $7;
         HEAP32[$5 >> 2] = $10;
         HEAP32[$5 + 4 >> 2] = $6;
         $3 = $3 + 16 | 0;
         $10 = HEAP32[$3 >> 2];
         $5 = HEAP32[$3 + 4 >> 2];
         $6 = $7 + 16 | 0;
         HEAP32[$6 >> 2] = $10;
         HEAP32[$6 + 4 >> 2] = $5;
         $3 = $14 + 8 | 0;
         $10 = HEAP32[$3 >> 2];
         $6 = HEAP32[$3 + 4 >> 2];
         $5 = $7 + 8 | 0;
         HEAP32[$5 >> 2] = $10;
         HEAP32[$5 + 4 >> 2] = $6;
         $4 = $4 + 24 | 0;
         $12 = $12 + -1 | 0;
         if ($12) {
          continue
         }
         break;
        };
       }
       $4 = HEAP32[$1 + 12 >> 2];
       if ($4) {
        if (HEAPU8[$1 + 16 | 0]) {
         btAlignedFreeInternal_28void__29($4)
        }
        HEAP32[$1 + 12 >> 2] = 0;
       }
       HEAP32[$1 + 12 >> 2] = $11;
       HEAP8[$1 + 16 | 0] = 1;
       HEAP32[$1 + 8 >> 2] = 2;
       $4 = HEAP32[$1 + 4 >> 2];
      }
      $3 = $8;
      $7 = HEAP32[$3 >> 2];
      $5 = HEAP32[$3 + 4 >> 2];
      $4 = HEAP32[$1 + 12 >> 2] + Math_imul($4, 24) | 0;
      HEAP32[$4 >> 2] = $7;
      HEAP32[$4 + 4 >> 2] = $5;
      $3 = $3 + 16 | 0;
      $7 = HEAP32[$3 >> 2];
      $6 = HEAP32[$3 + 4 >> 2];
      $5 = $4 + 16 | 0;
      HEAP32[$5 >> 2] = $7;
      HEAP32[$5 + 4 >> 2] = $6;
      $3 = $8 + 8 | 0;
      $8 = HEAP32[$3 >> 2];
      $5 = HEAP32[$3 + 4 >> 2];
      $6 = $4 + 8 | 0;
      HEAP32[$6 >> 2] = $8;
      HEAP32[$6 + 4 >> 2] = $5;
      $7 = HEAP32[$1 + 4 >> 2] + 1 | 0;
      HEAP32[$1 + 4 >> 2] = $7;
     }
     $9 = $9 + 1 | 0;
     if (($9 | 0) != HEAP32[$0 + 4 >> 2]) {
      continue
     }
     break;
    };
    break label$3;
   }
   if (($11 | 0) != 1) {
    break label$3
   }
   $7 = HEAP32[$1 + 4 >> 2];
   while (1) {
    $9 = HEAP32[$0 + 12 >> 2];
    label$42 : {
     if (HEAP32[$1 + 8 >> 2] != ($7 | 0)) {
      break label$42
     }
     $10 = $7 ? $7 << 1 : 1;
     if (($7 | 0) >= ($10 | 0)) {
      break label$42
     }
     label$43 : {
      if (!$10) {
       $11 = 0;
       break label$43;
      }
      $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($10, 24));
      $7 = HEAP32[$1 + 4 >> 2];
     }
     if (($7 | 0) >= 1) {
      $4 = 0;
      while (1) {
       $12 = $4 + HEAP32[$1 + 12 >> 2] | 0;
       $3 = $12;
       $2 = HEAP32[$3 >> 2];
       $6 = HEAP32[$3 + 4 >> 2];
       $14 = $4 + $11 | 0;
       $5 = $14;
       HEAP32[$5 >> 2] = $2;
       HEAP32[$5 + 4 >> 2] = $6;
       $3 = $3 + 16 | 0;
       $2 = HEAP32[$3 >> 2];
       $5 = HEAP32[$3 + 4 >> 2];
       $6 = $14 + 16 | 0;
       HEAP32[$6 >> 2] = $2;
       HEAP32[$6 + 4 >> 2] = $5;
       $3 = $12 + 8 | 0;
       $2 = HEAP32[$3 >> 2];
       $6 = HEAP32[$3 + 4 >> 2];
       $5 = $14 + 8 | 0;
       HEAP32[$5 >> 2] = $2;
       HEAP32[$5 + 4 >> 2] = $6;
       $4 = $4 + 24 | 0;
       $7 = $7 + -1 | 0;
       if ($7) {
        continue
       }
       break;
      };
     }
     $4 = HEAP32[$1 + 12 >> 2];
     if ($4) {
      if (HEAPU8[$1 + 16 | 0]) {
       btAlignedFreeInternal_28void__29($4)
      }
      HEAP32[$1 + 12 >> 2] = 0;
     }
     HEAP32[$1 + 12 >> 2] = $11;
     HEAP8[$1 + 16 | 0] = 1;
     HEAP32[$1 + 8 >> 2] = $10;
     $7 = HEAP32[$1 + 4 >> 2];
    }
    $3 = $9;
    $2 = HEAP32[$3 >> 2];
    $5 = HEAP32[$3 + 4 >> 2];
    $4 = HEAP32[$1 + 12 >> 2] + Math_imul($7, 24) | 0;
    HEAP32[$4 >> 2] = $2;
    HEAP32[$4 + 4 >> 2] = $5;
    $3 = $3 + 16 | 0;
    $2 = HEAP32[$3 >> 2];
    $6 = HEAP32[$3 + 4 >> 2];
    $5 = $4 + 16 | 0;
    HEAP32[$5 >> 2] = $2;
    HEAP32[$5 + 4 >> 2] = $6;
    $3 = $9 + 8 | 0;
    $2 = HEAP32[$3 >> 2];
    $5 = HEAP32[$3 + 4 >> 2];
    $6 = $4 + 8 | 0;
    HEAP32[$6 >> 2] = $2;
    HEAP32[$6 + 4 >> 2] = $5;
    $7 = HEAP32[$1 + 4 >> 2] + 1 | 0;
    HEAP32[$1 + 4 >> 2] = $7;
    $8 = $8 + 1 | 0;
    if (($8 | 0) < HEAP32[$0 + 4 >> 2]) {
     continue
    }
    break;
   };
  }
  global$0 = $20 + 32 | 0;
 }
 
 function btAlignedObjectArray_btFace___push_back_28btFace_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  $5 = HEAP32[$0 + 4 >> 2];
  if (($5 | 0) == HEAP32[$0 + 8 >> 2]) {
   btAlignedObjectArray_btFace___reserve_28int_29($0, $5 ? $5 << 1 : 1);
   $5 = HEAP32[$0 + 4 >> 2];
  }
  $11 = HEAP32[$0 + 12 >> 2];
  $2 = $11 + Math_imul($5, 36) | 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP8[$2 + 16 | 0] = 1;
  HEAP32[$2 + 12 >> 2] = 0;
  $9 = $2 + 4 | 0;
  $4 = HEAP32[$1 + 4 >> 2];
  label$2 : {
   if (($4 | 0) >= 1) {
    $14 = $2 + 8 | 0;
    $12 = $2 + 16 | 0;
    $13 = $4 << 2;
    $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13);
    $10 = $2 + 12 | 0;
    $7 = HEAP32[$10 >> 2];
    $8 = HEAP32[$9 >> 2];
    label$4 : {
     label$5 : {
      if (($8 | 0) >= 1) {
       $2 = $6;
       $3 = $7;
       while (1) {
        HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
        $2 = $2 + 4 | 0;
        $3 = $3 + 4 | 0;
        $8 = $8 + -1 | 0;
        if ($8) {
         continue
        }
        break;
       };
       break label$5;
      }
      if (!$7) {
       break label$4
      }
     }
     if (!HEAPU8[$12 | 0]) {
      break label$4
     }
     btAlignedFreeInternal_28void__29($7);
    }
    HEAP32[$10 >> 2] = $6;
    HEAP8[$12 | 0] = 1;
    HEAP32[$14 >> 2] = $4;
    memset($6, 0, $13);
    HEAP32[$9 >> 2] = $4;
    $2 = HEAP32[$1 + 12 >> 2];
    $3 = HEAP32[$10 >> 2];
    while (1) {
     HEAP32[$3 >> 2] = HEAP32[$2 >> 2];
     $3 = $3 + 4 | 0;
     $2 = $2 + 4 | 0;
     $4 = $4 + -1 | 0;
     if ($4) {
      continue
     }
     break;
    };
    break label$2;
   }
   HEAP32[$9 >> 2] = $4;
  }
  $3 = HEAP32[$1 + 24 >> 2];
  $2 = Math_imul($5, 36) + $11 | 0;
  HEAP32[$2 + 20 >> 2] = HEAP32[$1 + 20 >> 2];
  HEAP32[$2 + 24 >> 2] = $3;
  $1 = $1 + 28 | 0;
  $7 = HEAP32[$1 >> 2];
  $6 = HEAP32[$1 + 4 >> 2];
  $3 = $2 + 28 | 0;
  HEAP32[$3 >> 2] = $7;
  HEAP32[$3 + 4 >> 2] = $6;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 }
 
 function void_20btAlignedObjectArray_GrahamVector3___quickSortInternal_btAngleCompareFunc__28btAngleCompareFunc_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0);
  $14 = global$0 - 32 | 0;
  global$0 = $14;
  $9 = HEAP32[$0 + 12 >> 2];
  $5 = $9 + Math_imul(($2 + $3 | 0) / 2 | 0, 24) | 0;
  $22 = HEAP32[$5 + 20 >> 2];
  $15 = HEAPF32[$5 + 16 >> 2];
  $26 = HEAPF32[$5 + 8 >> 2];
  $27 = HEAPF32[$5 + 4 >> 2];
  $28 = HEAPF32[$5 >> 2];
  $11 = $2;
  $12 = $3;
  while (1) {
   $19 = HEAPF32[$1 >> 2];
   $4 = Math_fround($28 - $19);
   $10 = Math_fround($4 * $4);
   $20 = HEAPF32[$1 + 4 >> 2];
   $4 = Math_fround($27 - $20);
   $10 = Math_fround($10 + Math_fround($4 * $4));
   $21 = HEAPF32[$1 + 8 >> 2];
   $4 = Math_fround($26 - $21);
   $16 = Math_fround($10 + Math_fround($4 * $4));
   $5 = (Math_imul($11, 24) + $9 | 0) + 20 | 0;
   while (1) {
    label$2 : {
     $4 = HEAPF32[$5 + -4 >> 2];
     label$4 : {
      if ($4 != $15) {
       if (!($4 < $15)) {
        break label$2
       }
       break label$4;
      }
      $4 = Math_fround(HEAPF32[$5 + -20 >> 2] - $19);
      $10 = Math_fround($4 * $4);
      $4 = Math_fround(HEAPF32[$5 + -16 >> 2] - $20);
      $10 = Math_fround($10 + Math_fround($4 * $4));
      $4 = Math_fround(HEAPF32[$5 + -12 >> 2] - $21);
      $4 = Math_fround($10 + Math_fround($4 * $4));
      if ($4 != $16) {
       if ($4 < $16) {
        break label$4
       }
       break label$2;
      }
      if (HEAP32[$5 >> 2] >= ($22 | 0)) {
       break label$2
      }
     }
     $5 = $5 + 24 | 0;
     $11 = $11 + 1 | 0;
     continue;
    }
    break;
   };
   $17 = Math_imul($12, 24);
   while (1) {
    label$7 : {
     $13 = $9 + $17 | 0;
     $23 = $13 + 16 | 0;
     $4 = HEAPF32[$23 >> 2];
     label$9 : {
      if ($15 != $4) {
       if (!($15 < $4)) {
        break label$7
       }
       break label$9;
      }
      $4 = Math_fround(HEAPF32[$13 >> 2] - $19);
      $10 = Math_fround($4 * $4);
      $4 = Math_fround(HEAPF32[$13 + 4 >> 2] - $20);
      $10 = Math_fround($10 + Math_fround($4 * $4));
      $4 = Math_fround(HEAPF32[$13 + 8 >> 2] - $21);
      $4 = Math_fround($10 + Math_fround($4 * $4));
      if ($16 != $4) {
       if ($16 < $4) {
        break label$9
       }
       break label$7;
      }
      if (($22 | 0) >= HEAP32[$13 + 20 >> 2]) {
       break label$7
      }
     }
     $17 = $17 + -24 | 0;
     $12 = $12 + -1 | 0;
     continue;
    }
    break;
   };
   if (($11 | 0) <= ($12 | 0)) {
    $5 = $5 + -20 | 0;
    $24 = $5 + 16 | 0;
    $6 = $24;
    $18 = HEAP32[$6 >> 2];
    $7 = HEAP32[$6 + 4 >> 2];
    $9 = $14 + 24 | 0;
    $8 = $9;
    HEAP32[$8 >> 2] = $18;
    HEAP32[$8 + 4 >> 2] = $7;
    $18 = $5 + 8 | 0;
    $6 = $18;
    $8 = HEAP32[$6 + 4 >> 2];
    $25 = $14 + 16 | 0;
    $7 = $25;
    HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$7 + 4 >> 2] = $8;
    $7 = HEAP32[$5 + 4 >> 2];
    $8 = $14;
    HEAP32[$8 + 8 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$8 + 12 >> 2] = $7;
    $6 = $13;
    $7 = HEAP32[$6 >> 2];
    $8 = HEAP32[$6 + 4 >> 2];
    HEAP32[$5 >> 2] = $7;
    HEAP32[$5 + 4 >> 2] = $8;
    $6 = $6 + 8 | 0;
    $5 = HEAP32[$6 >> 2];
    $7 = HEAP32[$6 + 4 >> 2];
    $8 = $18;
    HEAP32[$8 >> 2] = $5;
    HEAP32[$8 + 4 >> 2] = $7;
    $6 = $23;
    $5 = HEAP32[$6 >> 2];
    $8 = HEAP32[$6 + 4 >> 2];
    $7 = $24;
    HEAP32[$7 >> 2] = $5;
    HEAP32[$7 + 4 >> 2] = $8;
    $6 = $14;
    $13 = HEAP32[$6 + 8 >> 2];
    $7 = HEAP32[$6 + 12 >> 2];
    $5 = $17 + HEAP32[$0 + 12 >> 2] | 0;
    HEAP32[$5 >> 2] = $13;
    HEAP32[$5 + 4 >> 2] = $7;
    $6 = $9;
    $9 = HEAP32[$6 >> 2];
    $8 = HEAP32[$6 + 4 >> 2];
    $7 = $5 + 16 | 0;
    HEAP32[$7 >> 2] = $9;
    HEAP32[$7 + 4 >> 2] = $8;
    $6 = $25;
    $9 = HEAP32[$6 >> 2];
    $7 = HEAP32[$6 + 4 >> 2];
    $8 = $5 + 8 | 0;
    HEAP32[$8 >> 2] = $9;
    HEAP32[$8 + 4 >> 2] = $7;
    $12 = $12 + -1 | 0;
    $11 = $11 + 1 | 0;
   }
   if (($11 | 0) <= ($12 | 0)) {
    $9 = HEAP32[$0 + 12 >> 2];
    continue;
   }
   break;
  };
  if (($12 | 0) > ($2 | 0)) {
   void_20btAlignedObjectArray_GrahamVector3___quickSortInternal_btAngleCompareFunc__28btAngleCompareFunc_20const__2c_20int_2c_20int_29($0, $1, $2, $12)
  }
  if (($11 | 0) < ($3 | 0)) {
   void_20btAlignedObjectArray_GrahamVector3___quickSortInternal_btAngleCompareFunc__28btAngleCompareFunc_20const__2c_20int_2c_20int_29($0, $1, $11, $3)
  }
  global$0 = $14 + 32 | 0;
 }
 
 function btPolyhedralConvexShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0);
  $10 = global$0 - 2048 | 0;
  global$0 = $10;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $3 = $0 + 8 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $4 = HEAPF32[$2 >> 2];
  $7 = HEAPF32[$2 + 4 >> 2];
  $8 = HEAPF32[$2 + 8 >> 2];
  $5 = Math_fround(Math_fround(Math_fround($4 * $4) + Math_fround($7 * $7)) + Math_fround($8 * $8));
  label$1 : {
   if ($5 < Math_fround(9.999999747378752e-05)) {
    $8 = Math_fround(0.0);
    $5 = Math_fround(1.0);
    break label$1;
   }
   $5 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($5)));
   $14 = Math_fround($8 * $5);
   $8 = Math_fround($7 * $5);
   $5 = Math_fround($4 * $5);
  }
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 96 >> 2]]($1) | 0) >= 1) {
   $12 = Math_fround(-999999984306749440.0);
   while (1) {
    $9 = 128;
    label$5 : {
     label$6 : {
      if (((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 96 >> 2]]($1) | 0) - $11 | 0) > 127) {
       break label$6
      }
      $9 = (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 96 >> 2]]($1) | 0) - $11 | 0;
      if (($9 | 0) >= 1) {
       break label$6
      }
      $4 = Math_fround(-3402823466385288598117041.0e14);
      $6 = -1;
      break label$5;
     }
     $2 = 0;
     $3 = $10;
     while (1) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 108 >> 2]]($1, $2, $3);
      $3 = $3 + 16 | 0;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($9 | 0)) {
       continue
      }
      break;
     };
     $3 = 0;
     $6 = -1;
     $4 = Math_fround(-3402823466385288598117041.0e14);
     $2 = $10;
     while (1) {
      $7 = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$2 >> 2]) + Math_fround($8 * HEAPF32[$2 + 4 >> 2])) + Math_fround($14 * HEAPF32[$2 + 8 >> 2]));
      $13 = $7 > $4;
      $4 = $13 ? $7 : $4;
      $6 = $13 ? $3 : $6;
      $2 = $2 + 16 | 0;
      $3 = $3 + 1 | 0;
      if (($3 | 0) != ($9 | 0)) {
       continue
      }
      break;
     };
    }
    if (!!($4 > $12)) {
     $2 = ($6 << 4) + $10 | 0;
     $9 = HEAP32[$2 + 8 >> 2];
     $3 = HEAP32[$2 + 12 >> 2];
     $6 = $0 + 8 | 0;
     HEAP32[$6 >> 2] = $9;
     HEAP32[$6 + 4 >> 2] = $3;
     $6 = HEAP32[$2 + 4 >> 2];
     HEAP32[$0 >> 2] = HEAP32[$2 >> 2];
     HEAP32[$0 + 4 >> 2] = $6;
     $12 = $4;
    }
    $11 = $11 + 128 | 0;
    if (($11 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 96 >> 2]]($1) | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $10 + 2048 | 0;
 }
 
 function btPolyhedralConvexShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0);
  $8 = global$0 - 2048 | 0;
  global$0 = $8;
  label$1 : {
   if (($3 | 0) < 1) {
    break label$1
   }
   $4 = $2 + 12 | 0;
   $5 = $3;
   while (1) {
    HEAP32[$4 >> 2] = -581039253;
    $4 = $4 + 16 | 0;
    $5 = $5 + -1 | 0;
    if ($5) {
     continue
    }
    break;
   };
   if (($3 | 0) < 1) {
    break label$1
   }
   while (1) {
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) >= 1) {
     $4 = $13 << 4;
     $10 = $4 + $2 | 0;
     $15 = $10 + 12 | 0;
     $14 = $1 + $4 | 0;
     $17 = $14 + 8 | 0;
     $18 = $14 + 4 | 0;
     $9 = 0;
     while (1) {
      $6 = 128;
      label$6 : {
       label$7 : {
        if (((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) - $9 | 0) > 127) {
         break label$7
        }
        $6 = (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0) - $9 | 0;
        if (($6 | 0) >= 1) {
         break label$7
        }
        $7 = Math_fround(-3402823466385288598117041.0e14);
        $11 = -1;
        break label$6;
       }
       $4 = 0;
       $5 = $8;
       while (1) {
        FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $4, $5);
        $5 = $5 + 16 | 0;
        $4 = $4 + 1 | 0;
        if (($4 | 0) != ($6 | 0)) {
         continue
        }
        break;
       };
       $19 = HEAPF32[$17 >> 2];
       $20 = HEAPF32[$18 >> 2];
       $21 = HEAPF32[$14 >> 2];
       $5 = 0;
       $11 = -1;
       $7 = Math_fround(-3402823466385288598117041.0e14);
       $4 = $8;
       while (1) {
        $16 = Math_fround(Math_fround(Math_fround($21 * HEAPF32[$4 >> 2]) + Math_fround($20 * HEAPF32[$4 + 4 >> 2])) + Math_fround($19 * HEAPF32[$4 + 8 >> 2]));
        $12 = $16 > $7;
        $7 = $12 ? $16 : $7;
        $11 = $12 ? $5 : $11;
        $4 = $4 + 16 | 0;
        $5 = $5 + 1 | 0;
        if (($5 | 0) != ($6 | 0)) {
         continue
        }
        break;
       };
      }
      if (!!($7 > HEAPF32[$15 >> 2])) {
       $4 = ($11 << 4) + $8 | 0;
       $12 = HEAP32[$4 + 8 >> 2];
       $5 = HEAP32[$4 + 12 >> 2];
       $6 = $10 + 8 | 0;
       HEAP32[$6 >> 2] = $12;
       HEAP32[$6 + 4 >> 2] = $5;
       $6 = HEAP32[$4 + 4 >> 2];
       HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$10 + 4 >> 2] = $6;
       HEAPF32[$15 >> 2] = $7;
      }
      $9 = $9 + 128 | 0;
      if (($9 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0) | 0)) {
       continue
      }
      break;
     };
    }
    $13 = $13 + 1 | 0;
    if (($3 | 0) != ($13 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $8 + 2048 | 0;
 }
 
 function btPolyhedralConvexShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0);
  $3 = global$0 - 96 | 0;
  global$0 = $3;
  $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $5 = $3 + 44 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $3 + 56 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$3 + 52 >> 2] = 1065353216;
  $5 = $3 + 76 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$3 + 72 >> 2] = 1065353216;
  $5 = $3 + 84 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$3 + 92 >> 2] = 0;
  HEAP32[$3 + 36 >> 2] = 0;
  HEAP32[$3 + 40 >> 2] = 0;
  HEAP32[$3 + 32 >> 2] = 1065353216;
  HEAP32[$3 + 64 >> 2] = 0;
  HEAP32[$3 + 68 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3 + 32 | 0, $3 + 16 | 0, $3);
  HEAP32[$2 + 12 >> 2] = 0;
  $1 = Math_fround($1 * Math_fround(.0833333283662796));
  $6 = Math_fround($4 + Math_fround(Math_fround(HEAPF32[$3 >> 2] - HEAPF32[$3 + 16 >> 2]) * Math_fround(.5)));
  $6 = Math_fround($6 + $6);
  $6 = Math_fround($6 * $6);
  $7 = Math_fround($4 + Math_fround(Math_fround(HEAPF32[$3 + 4 >> 2] - HEAPF32[$3 + 20 >> 2]) * Math_fround(.5)));
  $7 = Math_fround($7 + $7);
  $7 = Math_fround($7 * $7);
  HEAPF32[$2 + 8 >> 2] = $1 * Math_fround($6 + $7);
  $4 = Math_fround($4 + Math_fround(Math_fround(HEAPF32[$3 + 8 >> 2] - HEAPF32[$3 + 24 >> 2]) * Math_fround(.5)));
  $4 = Math_fround($4 + $4);
  $4 = Math_fround($4 * $4);
  HEAPF32[$2 + 4 >> 2] = $1 * Math_fround($6 + $4);
  HEAPF32[$2 >> 2] = $1 * Math_fround($7 + $4);
  global$0 = $3 + 96 | 0;
 }
 
 function btPolyhedralConvexAabbCachingShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = 0;
  $3 = global$0 - 96 | 0;
  global$0 = $3;
  btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1);
  HEAP8[$0 + 92 | 0] = 1;
  if (!HEAPU8[1680]) {
   $1 = 0;
   HEAP32[$1 + 1588 >> 2] = 0;
   HEAP32[$1 + 1592 >> 2] = 0;
   HEAP32[396] = 1065353216;
   HEAP32[0 + 1596 >> 2] = 0;
   HEAP32[$1 + 1600 >> 2] = 0;
   HEAP32[0 + 1608 >> 2] = 0;
   HEAP32[$1 + 1612 >> 2] = 0;
   HEAP32[401] = 1065353216;
   HEAP32[0 + 1616 >> 2] = 0;
   HEAP32[$1 + 1620 >> 2] = 0;
   HEAP32[0 + 1636 >> 2] = 0;
   HEAP32[$1 + 1640 >> 2] = 0;
   HEAP32[408] = -1082130432;
   HEAP32[0 + 1624 >> 2] = 1065353216;
   HEAP32[$1 + 1628 >> 2] = 0;
   HEAP32[0 + 1644 >> 2] = 0;
   HEAP32[$1 + 1648 >> 2] = 0;
   HEAP32[0 + 1656 >> 2] = 0;
   HEAP32[$1 + 1660 >> 2] = 0;
   HEAP32[413] = -1082130432;
   HEAP32[0 + 1664 >> 2] = 0;
   HEAP32[$1 + 1668 >> 2] = 0;
   HEAP32[0 + 1672 >> 2] = -1082130432;
   HEAP32[$1 + 1676 >> 2] = 0;
   HEAP8[1680] = 1;
  }
  $1 = memset($3, 0, 96);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 76 >> 2]]($0, 1584, $1, 6);
  $2 = HEAPF32[$0 + 48 >> 2];
  HEAPF32[$0 + 76 >> 2] = HEAPF32[$1 >> 2] + $2;
  HEAPF32[$0 + 60 >> 2] = HEAPF32[$1 + 48 >> 2] - $2;
  HEAPF32[$0 + 80 >> 2] = $2 + HEAPF32[$1 + 20 >> 2];
  HEAPF32[$0 - -64 >> 2] = HEAPF32[$1 + 68 >> 2] - $2;
  HEAPF32[$0 + 84 >> 2] = $2 + HEAPF32[$1 + 40 >> 2];
  HEAPF32[$0 + 68 >> 2] = HEAPF32[$1 + 88 >> 2] - $2;
  global$0 = $1 + 96 | 0;
 }
 
 function btPolyhedralConvexAabbCachingShape__btPolyhedralConvexAabbCachingShape_28_29($0) {
  var $1 = 0;
  btConvexInternalShape__btConvexInternalShape_28_29($0);
  HEAP8[$0 + 92 | 0] = 0;
  HEAP32[$0 + 88 >> 2] = 0;
  $1 = $0 + 80 | 0;
  HEAP32[$1 >> 2] = -1082130432;
  HEAP32[$1 + 4 >> 2] = -1082130432;
  $1 = $0 + 72 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = -1082130432;
  $1 = $0 - -64 | 0;
  HEAP32[$1 >> 2] = 1065353216;
  HEAP32[$1 + 4 >> 2] = 1065353216;
  HEAP32[$0 >> 2] = 7240;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 60 >> 2] = 1065353216;
 }
 
 function btPolyhedralConvexAabbCachingShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0);
  $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $24 = HEAPF32[$1 + 52 >> 2];
  $7 = HEAPF32[$1 + 24 >> 2];
  $8 = HEAPF32[$1 + 20 >> 2];
  $11 = HEAPF32[$1 + 56 >> 2];
  $9 = HEAPF32[$1 + 40 >> 2];
  $10 = HEAPF32[$0 + 68 >> 2];
  $15 = HEAPF32[$0 + 84 >> 2];
  $16 = HEAPF32[$1 + 36 >> 2];
  $5 = HEAPF32[$0 - -64 >> 2];
  $17 = HEAPF32[$0 + 80 >> 2];
  $25 = HEAPF32[$1 + 48 >> 2];
  $18 = HEAPF32[$1 + 8 >> 2];
  $19 = HEAPF32[$1 >> 2];
  $20 = HEAPF32[$1 + 4 >> 2];
  $21 = HEAPF32[$1 + 16 >> 2];
  $22 = HEAPF32[$1 + 32 >> 2];
  $6 = HEAPF32[$0 + 60 >> 2];
  $23 = HEAPF32[$0 + 76 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  $12 = Math_fround(Math_fround($23 + $6) * Math_fround(.5));
  $13 = Math_fround(Math_fround($17 + $5) * Math_fround(.5));
  $14 = Math_fround(Math_fround($15 + $10) * Math_fround(.5));
  $11 = Math_fround($11 + Math_fround(Math_fround(Math_fround($22 * $12) + Math_fround($16 * $13)) + Math_fround($9 * $14)));
  $6 = Math_fround($4 + Math_fround(Math_fround($23 - $6) * Math_fround(.5)));
  $5 = Math_fround($4 + Math_fround(Math_fround($17 - $5) * Math_fround(.5)));
  $4 = Math_fround($4 + Math_fround(Math_fround($15 - $10) * Math_fround(.5)));
  $9 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($22))) + Math_fround($5 * Math_fround(Math_abs($16)))) + Math_fround($4 * Math_fround(Math_abs($9))));
  HEAPF32[$2 + 8 >> 2] = $11 - $9;
  $10 = Math_fround($24 + Math_fround(Math_fround(Math_fround($12 * $21) + Math_fround($13 * $8)) + Math_fround($14 * $7)));
  $7 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($21))) + Math_fround($5 * Math_fround(Math_abs($8)))) + Math_fround($4 * Math_fround(Math_abs($7))));
  HEAPF32[$2 + 4 >> 2] = $10 - $7;
  $8 = Math_fround($25 + Math_fround(Math_fround(Math_fround($12 * $19) + Math_fround($13 * $20)) + Math_fround($14 * $18)));
  $4 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($19))) + Math_fround($5 * Math_fround(Math_abs($20)))) + Math_fround($4 * Math_fround(Math_abs($18))));
  HEAPF32[$2 >> 2] = $8 - $4;
  HEAP32[$3 + 12 >> 2] = 0;
  HEAPF32[$3 + 8 >> 2] = $9 + $11;
  HEAPF32[$3 + 4 >> 2] = $7 + $10;
  HEAPF32[$3 >> 2] = $4 + $8;
 }
 
 function btConvexInternalShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $1, $2, $3);
 }
 
 function btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 7108;
  $1 = HEAP32[$0 + 56 >> 2];
  if ($1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 56 >> 2]);
  }
  return $0 | 0;
 }
 
 function btPrimitiveTriangle__overlap_test_conservative_28btPrimitiveTriangle_20const__29($0, $1) {
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0;
  $2 = HEAPF32[$0 + 48 >> 2];
  $3 = HEAPF32[$0 + 52 >> 2];
  $4 = HEAPF32[$0 + 56 >> 2];
  $5 = HEAPF32[$0 + 60 >> 2];
  $6 = Math_fround(HEAPF32[$0 + 64 >> 2] + HEAPF32[$1 + 64 >> 2]);
  label$1 : {
   label$2 : {
    if (!(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2] * $2) + Math_fround(HEAPF32[$1 + 4 >> 2] * $3)) + Math_fround(HEAPF32[$1 + 8 >> 2] * $4)) - $5) - $6) > Math_fround(0.0))) {
     break label$2
    }
    if (!(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2 * HEAPF32[$1 + 16 >> 2]) + Math_fround($3 * HEAPF32[$1 + 20 >> 2])) + Math_fround($4 * HEAPF32[$1 + 24 >> 2])) - $5) - $6) > Math_fround(0.0))) {
     break label$2
    }
    $7 = 0;
    if (Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2 * HEAPF32[$1 + 32 >> 2]) + Math_fround($3 * HEAPF32[$1 + 36 >> 2])) + Math_fround($4 * HEAPF32[$1 + 40 >> 2])) - $5) - $6) > Math_fround(0.0)) {
     break label$1
    }
   }
   $2 = HEAPF32[$1 + 48 >> 2];
   $3 = HEAPF32[$1 + 52 >> 2];
   $4 = HEAPF32[$1 + 56 >> 2];
   $5 = HEAPF32[$1 + 60 >> 2];
   $7 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 >> 2] * $2) + Math_fround(HEAPF32[$0 + 4 >> 2] * $3)) + Math_fround(HEAPF32[$0 + 8 >> 2] * $4)) - $5) - $6) > Math_fround(0.0) ^ 1 | Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2 * HEAPF32[$0 + 16 >> 2]) + Math_fround($3 * HEAPF32[$0 + 20 >> 2])) + Math_fround($4 * HEAPF32[$0 + 24 >> 2])) - $5) - $6) > Math_fround(0.0) ^ 1 | Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($2 * HEAPF32[$0 + 32 >> 2]) + Math_fround($3 * HEAPF32[$0 + 36 >> 2])) + Math_fround($4 * HEAPF32[$0 + 40 >> 2])) - $5) - $6) > Math_fround(0.0) ^ 1;
  }
  return $7;
 }
 
 function btPrimitiveTriangle__clip_triangle_28btPrimitiveTriangle__2c_20btVector3__29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0;
  $6 = global$0 - 528 | 0;
  global$0 = $6;
  $9 = HEAPF32[$0 + 20 >> 2];
  $5 = Math_fround($9 - HEAPF32[$0 + 4 >> 2]);
  $4 = HEAPF32[$0 + 56 >> 2];
  $10 = HEAPF32[$0 + 24 >> 2];
  $7 = Math_fround($10 - HEAPF32[$0 + 8 >> 2]);
  $8 = HEAPF32[$0 + 52 >> 2];
  $3 = Math_fround(Math_fround($5 * $4) - Math_fround($7 * $8));
  $14 = $3;
  $11 = HEAPF32[$0 + 16 >> 2];
  $12 = Math_fround($11 - HEAPF32[$0 >> 2]);
  $13 = Math_fround($12 * $8);
  $8 = HEAPF32[$0 + 48 >> 2];
  $5 = Math_fround($13 - Math_fround($5 * $8));
  $13 = Math_fround($3 * $3);
  $3 = Math_fround(Math_fround($7 * $8) - Math_fround($12 * $4));
  $4 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround($13 + Math_fround($3 * $3))))));
  $7 = Math_fround($14 * $4);
  HEAPF32[$6 + 256 >> 2] = $7;
  $3 = Math_fround($3 * $4);
  HEAPF32[$6 + 260 >> 2] = $3;
  $5 = Math_fround($5 * $4);
  HEAPF32[$6 + 264 >> 2] = $5;
  HEAPF32[$6 + 268 >> 2] = Math_fround($10 * $5) + Math_fround(Math_fround($11 * $7) + Math_fround($9 * $3));
  $1 = bt_plane_clip_triangle_28btVector4_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3__29($6 + 256 | 0, $1, $1 + 16 | 0, $1 + 32 | 0, $6 + 272 | 0);
  $15 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $9 = HEAPF32[$0 + 40 >> 2];
   $4 = Math_fround($9 - HEAPF32[$0 + 24 >> 2]);
   $5 = HEAPF32[$0 + 48 >> 2];
   $10 = HEAPF32[$0 + 32 >> 2];
   $7 = Math_fround($10 - HEAPF32[$0 + 16 >> 2]);
   $8 = HEAPF32[$0 + 56 >> 2];
   $3 = Math_fround(Math_fround($4 * $5) - Math_fround($7 * $8));
   $14 = $3;
   $11 = HEAPF32[$0 + 52 >> 2];
   $13 = Math_fround($7 * $11);
   $7 = HEAPF32[$0 + 36 >> 2];
   $12 = Math_fround($7 - HEAPF32[$0 + 20 >> 2]);
   $5 = Math_fround($13 - Math_fround($12 * $5));
   $4 = Math_fround(Math_fround($12 * $8) - Math_fround($4 * $11));
   $3 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround(Math_fround($4 * $4) + Math_fround($3 * $3))))));
   $8 = Math_fround($14 * $3);
   HEAPF32[$6 + 260 >> 2] = $8;
   $4 = Math_fround($4 * $3);
   HEAPF32[$6 + 256 >> 2] = $4;
   $3 = Math_fround($5 * $3);
   HEAPF32[$6 + 264 >> 2] = $3;
   HEAPF32[$6 + 268 >> 2] = Math_fround($9 * $3) + Math_fround(Math_fround($10 * $4) + Math_fround($7 * $8));
   $1 = bt_plane_clip_polygon_28btVector4_20const__2c_20btVector3_20const__2c_20int_2c_20btVector3__29($6 + 256 | 0, $6 + 272 | 0, $1, $6);
   $15 = 0;
   if (!$1) {
    break label$1
   }
   $9 = HEAPF32[$0 + 8 >> 2];
   $4 = Math_fround($9 - HEAPF32[$0 + 40 >> 2]);
   $5 = HEAPF32[$0 + 48 >> 2];
   $10 = HEAPF32[$0 >> 2];
   $7 = Math_fround($10 - HEAPF32[$0 + 32 >> 2]);
   $8 = HEAPF32[$0 + 56 >> 2];
   $3 = Math_fround(Math_fround($4 * $5) - Math_fround($7 * $8));
   $14 = $3;
   $11 = HEAPF32[$0 + 52 >> 2];
   $13 = Math_fround($7 * $11);
   $7 = HEAPF32[$0 + 4 >> 2];
   $12 = Math_fround($7 - HEAPF32[$0 + 36 >> 2]);
   $5 = Math_fround($13 - Math_fround($12 * $5));
   $4 = Math_fround(Math_fround($12 * $8) - Math_fround($4 * $11));
   $3 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround(Math_fround($4 * $4) + Math_fround($3 * $3))))));
   $8 = Math_fround($14 * $3);
   HEAPF32[$6 + 260 >> 2] = $8;
   $4 = Math_fround($4 * $3);
   HEAPF32[$6 + 256 >> 2] = $4;
   $3 = Math_fround($5 * $3);
   HEAPF32[$6 + 264 >> 2] = $3;
   HEAPF32[$6 + 268 >> 2] = Math_fround($9 * $3) + Math_fround(Math_fround($10 * $4) + Math_fround($7 * $8));
   $15 = bt_plane_clip_polygon_28btVector4_20const__2c_20btVector3_20const__2c_20int_2c_20btVector3__29($6 + 256 | 0, $6, $1, $2);
  }
  $0 = $15;
  global$0 = $6 + 528 | 0;
  return $0;
 }
 
 function bt_plane_clip_triangle_28btVector4_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = 0;
  $11 = HEAPF32[$1 >> 2];
  $7 = HEAPF32[$0 >> 2];
  $9 = HEAPF32[$0 + 4 >> 2];
  $10 = HEAPF32[$0 + 8 >> 2];
  $12 = HEAPF32[$0 + 12 >> 2];
  $14 = Math_fround(Math_fround(Math_fround(Math_fround($11 * $7) + Math_fround(HEAPF32[$1 + 4 >> 2] * $9)) + Math_fround(HEAPF32[$1 + 8 >> 2] * $10)) - $12);
  $13 = $14 > Math_fround(1.1920928955078125e-07);
  if (!$13) {
   $8 = HEAP32[$1 + 4 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$4 + 4 >> 2] = $8;
   $5 = $1 + 8 | 0;
   $6 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $8 = $4 + 8 | 0;
   HEAP32[$8 >> 2] = $6;
   HEAP32[$8 + 4 >> 2] = $5;
   $12 = HEAPF32[$0 + 12 >> 2];
   $10 = HEAPF32[$0 + 8 >> 2];
   $9 = HEAPF32[$0 + 4 >> 2];
   $7 = HEAPF32[$0 >> 2];
   $6 = 1;
  }
  $15 = HEAPF32[$2 >> 2];
  $16 = HEAPF32[$2 + 4 >> 2];
  $17 = HEAPF32[$2 + 8 >> 2];
  $7 = Math_fround(Math_fround(Math_fround(Math_fround($15 * $7) + Math_fround($16 * $9)) + Math_fround($17 * $10)) - $12);
  if (($13 | 0) != ($7 > Math_fround(1.1920928955078125e-07) | 0)) {
   $12 = HEAPF32[$1 + 4 >> 2];
   $18 = HEAPF32[$1 + 8 >> 2];
   $13 = ($6 << 4) + $4 | 0;
   HEAP32[$13 + 12 >> 2] = 0;
   $9 = Math_fround(Math_fround(-$14) / Math_fround($7 - $14));
   $10 = Math_fround(Math_fround(1.0) - $9);
   HEAPF32[$13 + 8 >> 2] = Math_fround($17 * $9) + Math_fround($18 * $10);
   HEAPF32[$13 + 4 >> 2] = Math_fround($16 * $9) + Math_fround($10 * $12);
   HEAPF32[$13 >> 2] = Math_fround($15 * $9) + Math_fround($11 * $10);
   $6 = $6 + 1 | 0;
  }
  $13 = $7 > Math_fround(1.1920928955078125e-07);
  if (!$13) {
   $8 = HEAP32[$2 + 4 >> 2];
   $19 = ($6 << 4) + $4 | 0;
   $5 = $19;
   HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$5 + 4 >> 2] = $8;
   $5 = $2 + 8 | 0;
   $20 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $8 = $19 + 8 | 0;
   HEAP32[$8 >> 2] = $20;
   HEAP32[$8 + 4 >> 2] = $5;
   $6 = $6 + 1 | 0;
  }
  $10 = HEAPF32[$3 >> 2];
  $12 = HEAPF32[$3 + 4 >> 2];
  $11 = HEAPF32[$3 + 8 >> 2];
  $9 = Math_fround(Math_fround(Math_fround(Math_fround($10 * HEAPF32[$0 >> 2]) + Math_fround($12 * HEAPF32[$0 + 4 >> 2])) + Math_fround($11 * HEAPF32[$0 + 8 >> 2])) - HEAPF32[$0 + 12 >> 2]);
  if (($13 | 0) != ($9 > Math_fround(1.1920928955078125e-07) | 0)) {
   $15 = HEAPF32[$2 >> 2];
   $16 = HEAPF32[$2 + 4 >> 2];
   $17 = HEAPF32[$2 + 8 >> 2];
   $0 = ($6 << 4) + $4 | 0;
   HEAP32[$0 + 12 >> 2] = 0;
   $7 = Math_fround(Math_fround(-$7) / Math_fround($9 - $7));
   $18 = Math_fround($11 * $7);
   $11 = Math_fround(Math_fround(1.0) - $7);
   HEAPF32[$0 + 8 >> 2] = $18 + Math_fround($17 * $11);
   HEAPF32[$0 + 4 >> 2] = Math_fround($12 * $7) + Math_fround($11 * $16);
   HEAPF32[$0 >> 2] = Math_fround($10 * $7) + Math_fround($11 * $15);
   $6 = $6 + 1 | 0;
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if (!($9 > Math_fround(1.1920928955078125e-07))) {
      $8 = HEAP32[$3 + 4 >> 2];
      $0 = ($6 << 4) + $4 | 0;
      HEAP32[$0 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$0 + 4 >> 2] = $8;
      $5 = $3 + 8 | 0;
      $2 = HEAP32[$5 >> 2];
      $5 = HEAP32[$5 + 4 >> 2];
      $8 = $0 + 8 | 0;
      HEAP32[$8 >> 2] = $2;
      HEAP32[$8 + 4 >> 2] = $5;
      $6 = $6 + 1 | 0;
      if ($14 > Math_fround(1.1920928955078125e-07)) {
       break label$7
      }
      break label$6;
     }
     if ($14 > Math_fround(1.1920928955078125e-07)) {
      break label$5
     }
    }
    $10 = HEAPF32[$3 >> 2];
    $12 = HEAPF32[$1 >> 2];
    $11 = HEAPF32[$3 + 4 >> 2];
    $15 = HEAPF32[$1 + 4 >> 2];
    $16 = HEAPF32[$3 + 8 >> 2];
    $17 = HEAPF32[$1 + 8 >> 2];
    $0 = ($6 << 4) + $4 | 0;
    HEAP32[$0 + 12 >> 2] = 0;
    $7 = Math_fround(Math_fround(-$9) / Math_fround($14 - $9));
    $9 = Math_fround(Math_fround(1.0) - $7);
    HEAPF32[$0 + 8 >> 2] = Math_fround($16 * $9) + Math_fround($7 * $17);
    HEAPF32[$0 + 4 >> 2] = Math_fround($9 * $11) + Math_fround($7 * $15);
    HEAPF32[$0 >> 2] = Math_fround($9 * $10) + Math_fround($7 * $12);
    $6 = $6 + 1 | 0;
    if ($14 > Math_fround(1.1920928955078125e-07)) {
     break label$5
    }
   }
   $8 = HEAP32[$1 + 4 >> 2];
   $0 = ($6 << 4) + $4 | 0;
   HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 4 >> 2] = $8;
   $5 = $1 + 8 | 0;
   $1 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $8 = $0 + 8 | 0;
   HEAP32[$8 >> 2] = $1;
   HEAP32[$8 + 4 >> 2] = $5;
   $6 = $6 + 1 | 0;
  }
  return $6;
 }
 
 function bt_plane_clip_polygon_28btVector4_20const__2c_20btVector3_20const__2c_20int_2c_20btVector3__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0);
  $11 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1 >> 2] * HEAPF32[$0 >> 2]) + Math_fround(HEAPF32[$1 + 4 >> 2] * HEAPF32[$0 + 4 >> 2])) + Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[$0 + 8 >> 2])) - HEAPF32[$0 + 12 >> 2]);
  if (!($11 > Math_fround(1.1920928955078125e-07))) {
   $6 = HEAP32[$1 + 4 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$3 + 4 >> 2] = $6;
   $5 = $1 + 8 | 0;
   $4 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $6 = $3 + 8 | 0;
   HEAP32[$6 >> 2] = $4;
   HEAP32[$6 + 4 >> 2] = $5;
   $8 = 1;
  }
  label$2 : {
   if (($2 | 0) < 2) {
    $9 = $11;
    break label$2;
   }
   $15 = $2 + -1 | 0;
   $4 = $1;
   $7 = $11;
   while (1) {
    $16 = $4 + 16 | 0;
    $12 = HEAPF32[$16 >> 2];
    $13 = HEAPF32[$4 + 20 >> 2];
    $14 = $4 + 24 | 0;
    $10 = HEAPF32[$14 >> 2];
    $9 = Math_fround(Math_fround(Math_fround(Math_fround($12 * HEAPF32[$0 >> 2]) + Math_fround($13 * HEAPF32[$0 + 4 >> 2])) + Math_fround($10 * HEAPF32[$0 + 8 >> 2])) - HEAPF32[$0 + 12 >> 2]);
    $5 = $9 > Math_fround(1.1920928955078125e-07);
    if (($5 | 0) != ($7 > Math_fround(1.1920928955078125e-07) | 0)) {
     $17 = HEAPF32[$4 + 4 >> 2];
     $18 = HEAPF32[$4 + 8 >> 2];
     $19 = HEAPF32[$4 >> 2];
     $4 = ($8 << 4) + $3 | 0;
     HEAP32[$4 + 12 >> 2] = 0;
     $7 = Math_fround(Math_fround(-$7) / Math_fround($9 - $7));
     $20 = Math_fround($10 * $7);
     $10 = Math_fround(Math_fround(1.0) - $7);
     HEAPF32[$4 + 8 >> 2] = $20 + Math_fround($18 * $10);
     HEAPF32[$4 + 4 >> 2] = Math_fround($13 * $7) + Math_fround($10 * $17);
     HEAPF32[$4 >> 2] = Math_fround($12 * $7) + Math_fround($10 * $19);
     $8 = $8 + 1 | 0;
    }
    if (!$5) {
     $5 = $16;
     $6 = HEAP32[$5 + 4 >> 2];
     $4 = ($8 << 4) + $3 | 0;
     HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$4 + 4 >> 2] = $6;
     $5 = $14;
     $14 = HEAP32[$5 >> 2];
     $5 = HEAP32[$5 + 4 >> 2];
     $6 = $4 + 8 | 0;
     HEAP32[$6 >> 2] = $14;
     HEAP32[$6 + 4 >> 2] = $5;
     $8 = $8 + 1 | 0;
    }
    $4 = $16;
    $7 = $9;
    $15 = $15 + -1 | 0;
    if ($15) {
     continue
    }
    break;
   };
  }
  $4 = $11 > Math_fround(1.1920928955078125e-07);
  if (($4 | 0) != ($9 > Math_fround(1.1920928955078125e-07) | 0)) {
   $0 = ($2 + -1 << 4) + $1 | 0;
   $12 = HEAPF32[$0 >> 2];
   $13 = HEAPF32[$0 + 4 >> 2];
   $10 = HEAPF32[$0 + 8 >> 2];
   $17 = HEAPF32[$1 >> 2];
   $18 = HEAPF32[$1 + 4 >> 2];
   $19 = HEAPF32[$1 + 8 >> 2];
   $0 = ($8 << 4) + $3 | 0;
   HEAP32[$0 + 12 >> 2] = 0;
   $7 = Math_fround(Math_fround(-$9) / Math_fround($11 - $9));
   $9 = Math_fround(Math_fround(1.0) - $7);
   HEAPF32[$0 + 8 >> 2] = Math_fround($10 * $9) + Math_fround($7 * $19);
   HEAPF32[$0 + 4 >> 2] = Math_fround($9 * $13) + Math_fround($7 * $18);
   HEAPF32[$0 >> 2] = Math_fround($9 * $12) + Math_fround($7 * $17);
   $8 = $8 + 1 | 0;
  }
  if (!$4) {
   $6 = HEAP32[$1 + 4 >> 2];
   $4 = ($8 << 4) + $3 | 0;
   HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$4 + 4 >> 2] = $6;
   $5 = $1 + 8 | 0;
   $0 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $6 = $4 + 8 | 0;
   HEAP32[$6 >> 2] = $0;
   HEAP32[$6 + 4 >> 2] = $5;
   $8 = $8 + 1 | 0;
  }
  return $8;
 }
 
 function btPrimitiveTriangle__find_triangle_collision_clip_method_28btPrimitiveTriangle__2c_20GIM_TRIANGLE_CONTACT__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0);
  $5 = global$0 - 880 | 0;
  global$0 = $5;
  $11 = HEAPF32[$1 + 64 >> 2];
  $15 = HEAPF32[$0 + 64 >> 2];
  $4 = $0 + 56 | 0;
  $3 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $7 = $5 + 296 | 0;
  HEAP32[$7 >> 2] = $3;
  HEAP32[$7 + 4 >> 2] = $6;
  $4 = $0;
  $3 = HEAP32[$4 + 48 >> 2];
  $7 = HEAP32[$4 + 52 >> 2];
  HEAP32[$5 + 288 >> 2] = $3;
  HEAP32[$5 + 292 >> 2] = $7;
  $9 = btPrimitiveTriangle__clip_triangle_28btPrimitiveTriangle__2c_20btVector3__29($4, $1, $5 + 560 | 0);
  $3 = 0;
  label$1 : {
   if (!$9) {
    break label$1
   }
   HEAP32[$5 + 280 >> 2] = -998637568;
   HEAP32[$5 + 284 >> 2] = 0;
   $3 = 0;
   if (($9 | 0) <= 0) {
    break label$1
   }
   $15 = Math_fround($15 + $11);
   $19 = $5 + 288 | 0;
   $13 = HEAPF32[$5 + 300 >> 2];
   $16 = HEAPF32[$5 + 296 >> 2];
   $17 = HEAPF32[$5 + 292 >> 2];
   $14 = Math_fround(-1.0e3);
   $3 = $5 + 560 | 0;
   $18 = HEAPF32[$5 + 288 >> 2];
   while (1) {
    $11 = Math_fround($15 - Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$3 >> 2] * $18) + Math_fround(HEAPF32[$3 + 4 >> 2] * $17)) + Math_fround(HEAPF32[$3 + 8 >> 2] * $16)) - $13));
    label$4 : {
     if (!($11 >= Math_fround(0.0))) {
      break label$4
     }
     if (!!($11 > $14)) {
      HEAP32[$5 + 816 >> 2] = $8;
      $10 = 1;
      $14 = $11;
      break label$4;
     }
     if (!(Math_fround($11 + Math_fround(1.1920928955078125e-07)) >= $14)) {
      break label$4
     }
     HEAP32[($5 + 816 | 0) + ($10 << 2) >> 2] = $8;
     $10 = $10 + 1 | 0;
    }
    $3 = $3 + 16 | 0;
    $8 = $8 + 1 | 0;
    if (($8 | 0) != ($9 | 0)) {
     continue
    }
    break;
   };
   HEAPF32[$5 + 280 >> 2] = $14;
   HEAP32[$5 + 284 >> 2] = $10;
   if (($10 | 0) >= 1) {
    $3 = $5 + 304 | 0;
    $8 = $5 + 816 | 0;
    $9 = $10;
    while (1) {
     $12 = ($5 + 560 | 0) + (HEAP32[$8 >> 2] << 4) | 0;
     $4 = $12;
     $7 = HEAP32[$4 >> 2];
     $6 = HEAP32[$4 + 4 >> 2];
     HEAP32[$3 >> 2] = $7;
     HEAP32[$3 + 4 >> 2] = $6;
     $12 = HEAP32[$4 + 8 >> 2];
     $7 = HEAP32[$4 + 12 >> 2];
     $6 = $3 + 8 | 0;
     HEAP32[$6 >> 2] = $12;
     HEAP32[$6 + 4 >> 2] = $7;
     $8 = $8 + 4 | 0;
     $3 = $3 + 16 | 0;
     $9 = $9 + -1 | 0;
     if ($9) {
      continue
     }
     break;
    };
   }
   $3 = 0;
   if (!$10) {
    break label$1
   }
   $3 = $5 + 292 | 0;
   HEAPF32[$3 >> 2] = -HEAPF32[$3 >> 2];
   $3 = $5 + 296 | 0;
   HEAPF32[$3 >> 2] = -HEAPF32[$3 >> 2];
   HEAPF32[$5 + 288 >> 2] = -HEAPF32[$5 + 288 >> 2];
   $4 = $1 + 56 | 0;
   $3 = HEAP32[$4 >> 2];
   $6 = HEAP32[$4 + 4 >> 2];
   $7 = $5 + 16 | 0;
   HEAP32[$7 >> 2] = $3;
   HEAP32[$7 + 4 >> 2] = $6;
   $4 = $1;
   $1 = HEAP32[$4 + 48 >> 2];
   $7 = HEAP32[$4 + 52 >> 2];
   HEAP32[$5 + 8 >> 2] = $1;
   HEAP32[$5 + 12 >> 2] = $7;
   $12 = btPrimitiveTriangle__clip_triangle_28btPrimitiveTriangle__2c_20btVector3__29($4, $0, $5 + 560 | 0);
   $3 = 0;
   if (!$12) {
    break label$1
   }
   HEAP32[$5 >> 2] = -998637568;
   HEAP32[$5 + 4 >> 2] = 0;
   $3 = 0;
   if (($12 | 0) <= 0) {
    break label$1
   }
   $1 = $5 + 8 | 0;
   $16 = HEAPF32[$5 + 20 >> 2];
   $17 = HEAPF32[$5 + 16 >> 2];
   $18 = HEAPF32[$5 + 12 >> 2];
   $9 = 0;
   $13 = Math_fround(-1.0e3);
   $3 = $5 + 560 | 0;
   $20 = HEAPF32[$5 + 8 >> 2];
   $8 = 0;
   while (1) {
    $11 = Math_fround($15 - Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$3 >> 2] * $20) + Math_fround(HEAPF32[$3 + 4 >> 2] * $18)) + Math_fround(HEAPF32[$3 + 8 >> 2] * $17)) - $16));
    label$11 : {
     if (!($11 >= Math_fround(0.0))) {
      break label$11
     }
     if (!!($11 > $13)) {
      HEAP32[$5 + 816 >> 2] = $8;
      $9 = 1;
      $13 = $11;
      break label$11;
     }
     if (!(Math_fround($11 + Math_fround(1.1920928955078125e-07)) >= $13)) {
      break label$11
     }
     HEAP32[($5 + 816 | 0) + ($9 << 2) >> 2] = $8;
     $9 = $9 + 1 | 0;
    }
    $3 = $3 + 16 | 0;
    $8 = $8 + 1 | 0;
    if (($8 | 0) != ($12 | 0)) {
     continue
    }
    break;
   };
   HEAPF32[$5 >> 2] = $13;
   HEAP32[$5 + 4 >> 2] = $9;
   if (($9 | 0) >= 1) {
    $3 = $5 + 24 | 0;
    $8 = $5 + 816 | 0;
    $12 = $9;
    while (1) {
     $0 = ($5 + 560 | 0) + (HEAP32[$8 >> 2] << 4) | 0;
     $4 = $0;
     $7 = HEAP32[$4 >> 2];
     $6 = HEAP32[$4 + 4 >> 2];
     HEAP32[$3 >> 2] = $7;
     HEAP32[$3 + 4 >> 2] = $6;
     $0 = HEAP32[$4 + 8 >> 2];
     $7 = HEAP32[$4 + 12 >> 2];
     $6 = $3 + 8 | 0;
     HEAP32[$6 >> 2] = $0;
     HEAP32[$6 + 4 >> 2] = $7;
     $8 = $8 + 4 | 0;
     $3 = $3 + 16 | 0;
     $12 = $12 + -1 | 0;
     if ($12) {
      continue
     }
     break;
    };
   }
   $3 = 0;
   if (!$9) {
    break label$1
   }
   label$16 : {
    if (!!($13 < $14)) {
     HEAPF32[$2 >> 2] = $13;
     HEAP32[$2 + 4 >> 2] = $9;
     $4 = $1;
     $0 = HEAP32[$4 >> 2];
     $6 = HEAP32[$4 + 4 >> 2];
     $7 = $2;
     HEAP32[$7 + 8 >> 2] = $0;
     HEAP32[$7 + 12 >> 2] = $6;
     $4 = $4 + 8 | 0;
     $0 = HEAP32[$4 >> 2];
     $6 = $7 + 16 | 0;
     $7 = HEAP32[$4 + 4 >> 2];
     HEAP32[$6 >> 2] = $0;
     HEAP32[$6 + 4 >> 2] = $7;
     $8 = $9 << 4;
     $3 = $8 + ($2 + 8 | 0) | 0;
     $8 = ($5 + $8 | 0) + 8 | 0;
     while (1) {
      $4 = $8;
      $0 = HEAP32[$4 >> 2];
      $6 = HEAP32[$4 + 4 >> 2];
      HEAP32[$3 >> 2] = $0;
      HEAP32[$3 + 4 >> 2] = $6;
      $4 = $4 + 8 | 0;
      $0 = HEAP32[$4 >> 2];
      $7 = HEAP32[$4 + 4 >> 2];
      $6 = $3 + 8 | 0;
      HEAP32[$6 >> 2] = $0;
      HEAP32[$6 + 4 >> 2] = $7;
      $8 = $8 + -16 | 0;
      $3 = $3 + -16 | 0;
      $9 = $9 + -1 | 0;
      if ($9) {
       continue
      }
      break;
     };
     break label$16;
    }
    HEAPF32[$2 >> 2] = $14;
    HEAP32[$2 + 4 >> 2] = $10;
    $4 = $19;
    $0 = HEAP32[$4 >> 2];
    $6 = HEAP32[$4 + 4 >> 2];
    $7 = $2;
    HEAP32[$7 + 8 >> 2] = $0;
    HEAP32[$7 + 12 >> 2] = $6;
    $4 = $4 + 8 | 0;
    $0 = HEAP32[$4 >> 2];
    $6 = $7 + 16 | 0;
    $7 = HEAP32[$4 + 4 >> 2];
    HEAP32[$6 >> 2] = $0;
    HEAP32[$6 + 4 >> 2] = $7;
    $8 = $10 << 4;
    $3 = $8 + ($2 + 8 | 0) | 0;
    $8 = ($8 + $5 | 0) + 288 | 0;
    while (1) {
     $4 = $8;
     $0 = HEAP32[$4 >> 2];
     $6 = HEAP32[$4 + 4 >> 2];
     HEAP32[$3 >> 2] = $0;
     HEAP32[$3 + 4 >> 2] = $6;
     $4 = $4 + 8 | 0;
     $0 = HEAP32[$4 >> 2];
     $7 = HEAP32[$4 + 4 >> 2];
     $6 = $3 + 8 | 0;
     HEAP32[$6 >> 2] = $0;
     HEAP32[$6 + 4 >> 2] = $7;
     $8 = $8 + -16 | 0;
     $3 = $3 + -16 | 0;
     $10 = $10 + -1 | 0;
     if ($10) {
      continue
     }
     break;
    };
   }
   $3 = 1;
  }
  global$0 = $5 + 880 | 0;
  return $3;
 }
 
 function btBU_Simplex1to4__btBU_Simplex1to4_28_29($0) {
  btPolyhedralConvexAabbCachingShape__btPolyhedralConvexAabbCachingShape_28_29($0);
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP32[$0 >> 2] = 7464;
  HEAP32[$0 + 4 >> 2] = 2;
 }
 
 function btBU_Simplex1to4__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  btPolyhedralConvexAabbCachingShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3);
 }
 
 function btBU_Simplex1to4__getNumVertices_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 96 >> 2];
 }
 
 function btBU_Simplex1to4__getNumEdges_28_29_20const($0) {
  $0 = $0 | 0;
  $0 = HEAP32[$0 + 96 >> 2] + -2 | 0;
  if ($0 >>> 0 <= 2) {
   return HEAP32[($0 << 2) + 7624 >> 2]
  }
  return 0;
 }
 
 function btBU_Simplex1to4__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = HEAP32[$0 + 96 >> 2] + -2 | 0;
  label$1 : {
   if ($4 >>> 0 > 2) {
    break label$1
   }
   label$2 : {
    switch ($4 - 1 | 0) {
    default:
     $1 = HEAP32[$0 + 104 >> 2];
     $5 = $2;
     HEAP32[$5 >> 2] = HEAP32[$0 + 100 >> 2];
     HEAP32[$5 + 4 >> 2] = $1;
     $4 = $0 + 108 | 0;
     $2 = HEAP32[$4 >> 2];
     $1 = $5 + 8 | 0;
     $5 = HEAP32[$4 + 4 >> 2];
     HEAP32[$1 >> 2] = $2;
     HEAP32[$1 + 4 >> 2] = $5;
     $4 = $0 + 124 | 0;
     $2 = HEAP32[$4 >> 2];
     $1 = HEAP32[$4 + 4 >> 2];
     $5 = $3 + 8 | 0;
     HEAP32[$5 >> 2] = $2;
     HEAP32[$5 + 4 >> 2] = $1;
     $4 = $0 + 116 | 0;
     $0 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $1 = $3;
     HEAP32[$1 >> 2] = $0;
     HEAP32[$1 + 4 >> 2] = $5;
     return;
    case 0:
     if ($1 >>> 0 > 2) {
      break label$1
     }
     label$5 : {
      switch ($1 - 1 | 0) {
      default:
       $1 = HEAP32[$0 + 104 >> 2];
       $5 = $2;
       HEAP32[$5 >> 2] = HEAP32[$0 + 100 >> 2];
       HEAP32[$5 + 4 >> 2] = $1;
       $4 = $0 + 108 | 0;
       $2 = HEAP32[$4 >> 2];
       $1 = $5 + 8 | 0;
       $5 = HEAP32[$4 + 4 >> 2];
       HEAP32[$1 >> 2] = $2;
       HEAP32[$1 + 4 >> 2] = $5;
       $4 = $0 + 124 | 0;
       $2 = HEAP32[$4 >> 2];
       $1 = HEAP32[$4 + 4 >> 2];
       $5 = $3 + 8 | 0;
       HEAP32[$5 >> 2] = $2;
       HEAP32[$5 + 4 >> 2] = $1;
       $4 = $0 + 116 | 0;
       $0 = HEAP32[$4 >> 2];
       $5 = HEAP32[$4 + 4 >> 2];
       $1 = $3;
       HEAP32[$1 >> 2] = $0;
       HEAP32[$1 + 4 >> 2] = $5;
       return;
      case 0:
       $4 = $0 + 124 | 0;
       $6 = HEAP32[$4 >> 2];
       $1 = HEAP32[$4 + 4 >> 2];
       $5 = $2 + 8 | 0;
       HEAP32[$5 >> 2] = $6;
       HEAP32[$5 + 4 >> 2] = $1;
       $4 = $0 + 116 | 0;
       $6 = HEAP32[$4 >> 2];
       $5 = HEAP32[$4 + 4 >> 2];
       $1 = $2;
       HEAP32[$1 >> 2] = $6;
       HEAP32[$1 + 4 >> 2] = $5;
       $4 = $0 + 140 | 0;
       $2 = HEAP32[$4 >> 2];
       $1 = HEAP32[$4 + 4 >> 2];
       $5 = $3 + 8 | 0;
       HEAP32[$5 >> 2] = $2;
       HEAP32[$5 + 4 >> 2] = $1;
       $4 = $0 + 132 | 0;
       $0 = HEAP32[$4 >> 2];
       $5 = HEAP32[$4 + 4 >> 2];
       $1 = $3;
       HEAP32[$1 >> 2] = $0;
       HEAP32[$1 + 4 >> 2] = $5;
       return;
      case 1:
       break label$5;
      };
     }
     $4 = $0 + 140 | 0;
     $6 = HEAP32[$4 >> 2];
     $1 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 8 | 0;
     HEAP32[$5 >> 2] = $6;
     HEAP32[$5 + 4 >> 2] = $1;
     $4 = $0 + 132 | 0;
     $6 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $1 = $2;
     HEAP32[$1 >> 2] = $6;
     HEAP32[$1 + 4 >> 2] = $5;
     $4 = $0 + 108 | 0;
     $2 = HEAP32[$4 >> 2];
     $1 = HEAP32[$4 + 4 >> 2];
     $5 = $3 + 8 | 0;
     HEAP32[$5 >> 2] = $2;
     HEAP32[$5 + 4 >> 2] = $1;
     $5 = HEAP32[$0 + 104 >> 2];
     $1 = $3;
     HEAP32[$1 >> 2] = HEAP32[$0 + 100 >> 2];
     HEAP32[$1 + 4 >> 2] = $5;
     return;
    case 1:
     break label$2;
    };
   }
   if ($1 >>> 0 > 5) {
    break label$1
   }
   label$8 : {
    switch ($1 - 1 | 0) {
    default:
     $1 = HEAP32[$0 + 104 >> 2];
     $5 = $2;
     HEAP32[$5 >> 2] = HEAP32[$0 + 100 >> 2];
     HEAP32[$5 + 4 >> 2] = $1;
     $4 = $0 + 108 | 0;
     $2 = HEAP32[$4 >> 2];
     $1 = $5 + 8 | 0;
     $5 = HEAP32[$4 + 4 >> 2];
     HEAP32[$1 >> 2] = $2;
     HEAP32[$1 + 4 >> 2] = $5;
     $4 = $0 + 124 | 0;
     $2 = HEAP32[$4 >> 2];
     $1 = HEAP32[$4 + 4 >> 2];
     $5 = $3 + 8 | 0;
     HEAP32[$5 >> 2] = $2;
     HEAP32[$5 + 4 >> 2] = $1;
     $4 = $0 + 116 | 0;
     $0 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $1 = $3;
     HEAP32[$1 >> 2] = $0;
     HEAP32[$1 + 4 >> 2] = $5;
     return;
    case 0:
     $4 = $0 + 124 | 0;
     $6 = HEAP32[$4 >> 2];
     $1 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 8 | 0;
     HEAP32[$5 >> 2] = $6;
     HEAP32[$5 + 4 >> 2] = $1;
     $4 = $0 + 116 | 0;
     $6 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $1 = $2;
     HEAP32[$1 >> 2] = $6;
     HEAP32[$1 + 4 >> 2] = $5;
     $4 = $0 + 140 | 0;
     $2 = HEAP32[$4 >> 2];
     $1 = HEAP32[$4 + 4 >> 2];
     $5 = $3 + 8 | 0;
     HEAP32[$5 >> 2] = $2;
     HEAP32[$5 + 4 >> 2] = $1;
     $4 = $0 + 132 | 0;
     $0 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $1 = $3;
     HEAP32[$1 >> 2] = $0;
     HEAP32[$1 + 4 >> 2] = $5;
     return;
    case 1:
     $4 = $0 + 140 | 0;
     $6 = HEAP32[$4 >> 2];
     $1 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 8 | 0;
     HEAP32[$5 >> 2] = $6;
     HEAP32[$5 + 4 >> 2] = $1;
     $4 = $0 + 132 | 0;
     $6 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $1 = $2;
     HEAP32[$1 >> 2] = $6;
     HEAP32[$1 + 4 >> 2] = $5;
     $4 = $0 + 108 | 0;
     $2 = HEAP32[$4 >> 2];
     $1 = HEAP32[$4 + 4 >> 2];
     $5 = $3 + 8 | 0;
     HEAP32[$5 >> 2] = $2;
     HEAP32[$5 + 4 >> 2] = $1;
     $5 = HEAP32[$0 + 104 >> 2];
     $1 = $3;
     HEAP32[$1 >> 2] = HEAP32[$0 + 100 >> 2];
     HEAP32[$1 + 4 >> 2] = $5;
     return;
    case 2:
     $1 = HEAP32[$0 + 104 >> 2];
     $5 = $2;
     HEAP32[$5 >> 2] = HEAP32[$0 + 100 >> 2];
     HEAP32[$5 + 4 >> 2] = $1;
     $4 = $0 + 108 | 0;
     $2 = HEAP32[$4 >> 2];
     $1 = $5 + 8 | 0;
     $5 = HEAP32[$4 + 4 >> 2];
     HEAP32[$1 >> 2] = $2;
     HEAP32[$1 + 4 >> 2] = $5;
     $4 = $0 + 156 | 0;
     $2 = HEAP32[$4 >> 2];
     $1 = HEAP32[$4 + 4 >> 2];
     $5 = $3 + 8 | 0;
     HEAP32[$5 >> 2] = $2;
     HEAP32[$5 + 4 >> 2] = $1;
     $4 = $0 + 148 | 0;
     $0 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $1 = $3;
     HEAP32[$1 >> 2] = $0;
     HEAP32[$1 + 4 >> 2] = $5;
     return;
    case 3:
     $4 = $0 + 124 | 0;
     $6 = HEAP32[$4 >> 2];
     $1 = HEAP32[$4 + 4 >> 2];
     $5 = $2 + 8 | 0;
     HEAP32[$5 >> 2] = $6;
     HEAP32[$5 + 4 >> 2] = $1;
     $4 = $0 + 116 | 0;
     $6 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $1 = $2;
     HEAP32[$1 >> 2] = $6;
     HEAP32[$1 + 4 >> 2] = $5;
     $4 = $0 + 156 | 0;
     $2 = HEAP32[$4 >> 2];
     $1 = HEAP32[$4 + 4 >> 2];
     $5 = $3 + 8 | 0;
     HEAP32[$5 >> 2] = $2;
     HEAP32[$5 + 4 >> 2] = $1;
     $4 = $0 + 148 | 0;
     $0 = HEAP32[$4 >> 2];
     $5 = HEAP32[$4 + 4 >> 2];
     $1 = $3;
     HEAP32[$1 >> 2] = $0;
     HEAP32[$1 + 4 >> 2] = $5;
     return;
    case 4:
     break label$8;
    };
   }
   $4 = $0 + 140 | 0;
   $6 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $5 = $2 + 8 | 0;
   HEAP32[$5 >> 2] = $6;
   HEAP32[$5 + 4 >> 2] = $1;
   $4 = $0 + 132 | 0;
   $6 = HEAP32[$4 >> 2];
   $5 = HEAP32[$4 + 4 >> 2];
   $1 = $2;
   HEAP32[$1 >> 2] = $6;
   HEAP32[$1 + 4 >> 2] = $5;
   $4 = $0 + 156 | 0;
   $2 = HEAP32[$4 >> 2];
   $1 = HEAP32[$4 + 4 >> 2];
   $5 = $3 + 8 | 0;
   HEAP32[$5 >> 2] = $2;
   HEAP32[$5 + 4 >> 2] = $1;
   $4 = $0 + 148 | 0;
   $0 = HEAP32[$4 >> 2];
   $5 = HEAP32[$4 + 4 >> 2];
   $1 = $3;
   HEAP32[$1 >> 2] = $0;
   HEAP32[$1 + 4 >> 2] = $5;
  }
 }
 
 function btBU_Simplex1to4__getVertex_28int_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $0 = ($1 << 4) + $0 | 0;
  $1 = $0 + 108 | 0;
  $4 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $3 = $2 + 8 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $1;
  $1 = $0 + 100 | 0;
  $0 = HEAP32[$1 >> 2];
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $3;
 }
 
 function btBU_Simplex1to4__getNumPlanes_28_29_20const($0) {
  $0 = $0 | 0;
  $0 = HEAP32[$0 + 96 >> 2];
  return (($0 | 0) == 4 ? 4 : (($0 | 0) == 3) << 1) | 0;
 }
 
 function btBU_Simplex1to4__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
 }
 
 function btBU_Simplex1to4__getIndex_28int_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return 0;
 }
 
 function btBU_Simplex1to4__isInside_28btVector3_20const__2c_20float_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  return 0;
 }
 
 function btBU_Simplex1to4___btBU_Simplex1to4_28_29($0) {
  $0 = $0 | 0;
  btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($0);
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btPersistentManifold__btPersistentManifold_28_29($0) {
  var $1 = 0;
  HEAP32[$0 >> 2] = 1025;
  $1 = $0 + 120 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 128 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 136 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 144 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 152 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 160 >> 2] = 0;
  $1 = $0 + 312 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 320 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 328 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 336 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 344 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 352 >> 2] = 0;
  $1 = $0 + 504 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 512 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 520 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 528 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 536 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 544 >> 2] = 0;
  HEAP32[$0 + 736 >> 2] = 0;
  $1 = $0 + 728 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 720 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 712 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 704 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 696 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 772 >> 2] = 0;
  HEAP32[$0 + 776 >> 2] = 0;
  HEAP32[$0 + 800 >> 2] = 0;
  HEAP32[$0 + 780 >> 2] = 0;
 }
 
 function btPersistentManifold__clearUserCache_28btManifoldPoint__29($0) {
  var $1 = 0, $2 = 0;
  $1 = HEAP32[$0 + 116 >> 2];
  label$1 : {
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[421];
   if (!$2) {
    break label$1
   }
   FUNCTION_TABLE[$2]($1) | 0;
   HEAP32[$0 + 116 >> 2] = 0;
  }
 }
 
 function btPersistentManifold__sortCachedPoints_28btManifoldPoint_20const__29($0, $1) {
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = 0, $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = 0;
  $4 = HEAPF32[$0 + 84 >> 2];
  $3 = HEAPF32[$1 + 80 >> 2];
  $18 = $4 < $3;
  $35 = $18 ? 0 : -1;
  $6 = HEAPF32[$0 + 276 >> 2];
  $4 = $18 ? $4 : $3;
  $18 = $6 < $4;
  $41 = $18 ? 1 : $35;
  $3 = HEAPF32[$0 + 468 >> 2];
  $4 = $18 ? $6 : $4;
  $18 = $3 < $4;
  $35 = HEAPF32[$0 + 660 >> 2] < ($18 ? $3 : $4);
  $18 = $35 ? 3 : $18 ? 2 : $41;
  $4 = HEAPF32[$1 >> 2];
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (HEAPU8[2980]) {
       if (!$18) {
        $13 = HEAPF32[$0 + 588 >> 2];
        $17 = HEAPF32[$0 + 396 >> 2];
        $2 = Math_fround($13 - $17);
        $15 = HEAPF32[$0 + 584 >> 2];
        $19 = HEAPF32[$0 + 392 >> 2];
        $8 = Math_fround($15 - $19);
        $22 = HEAPF32[$0 + 580 >> 2];
        $5 = HEAPF32[$0 + 388 >> 2];
        $9 = Math_fround($22 - $5);
        $6 = HEAPF32[$1 + 8 >> 2];
        $3 = HEAPF32[$1 + 4 >> 2];
        break label$4;
       }
       $11 = HEAPF32[$0 + 196 >> 2];
       $14 = Math_fround($4 - $11);
       $15 = HEAPF32[$0 + 584 >> 2];
       $19 = HEAPF32[$0 + 392 >> 2];
       $8 = Math_fround($15 - $19);
       $3 = HEAPF32[$1 + 4 >> 2];
       $12 = HEAPF32[$0 + 200 >> 2];
       $6 = Math_fround($3 - $12);
       $22 = HEAPF32[$0 + 580 >> 2];
       $5 = HEAPF32[$0 + 388 >> 2];
       $9 = Math_fround($22 - $5);
       $2 = Math_fround(Math_fround($14 * $8) - Math_fround($6 * $9));
       $10 = Math_fround($2 * $2);
       $13 = HEAPF32[$0 + 588 >> 2];
       $17 = HEAPF32[$0 + 396 >> 2];
       $2 = Math_fround($13 - $17);
       $16 = Math_fround($6 * $2);
       $6 = HEAPF32[$1 + 8 >> 2];
       $7 = HEAPF32[$0 + 204 >> 2];
       $23 = Math_fround($6 - $7);
       $24 = Math_fround($16 - Math_fround($23 * $8));
       $14 = Math_fround(Math_fround($23 * $9) - Math_fround($14 * $2));
       $14 = Math_fround($10 + Math_fround(Math_fround($24 * $24) + Math_fround($14 * $14)));
       if (($18 | 0) != 1) {
        break label$4
       }
       $4 = Math_fround($4 - HEAPF32[$0 + 4 >> 2]);
       $6 = Math_fround($6 - HEAPF32[$0 + 12 >> 2]);
       $3 = Math_fround($3 - HEAPF32[$0 + 8 >> 2]);
       $9 = Math_fround(0.0);
       break label$3;
      }
      $3 = HEAPF32[$1 + 8 >> 2];
      $6 = HEAPF32[$1 + 4 >> 2];
      label$7 : {
       label$8 : {
        label$9 : {
         if (!$18) {
          $11 = HEAPF32[$0 + 396 >> 2];
          $16 = HEAPF32[$0 + 588 >> 2];
          $9 = Math_fround($11 - $16);
          $17 = HEAPF32[$0 + 392 >> 2];
          $20 = HEAPF32[$0 + 584 >> 2];
          $26 = Math_fround($17 - $20);
          $19 = HEAPF32[$0 + 388 >> 2];
          $21 = HEAPF32[$0 + 580 >> 2];
          $27 = Math_fround($19 - $21);
          $8 = Math_fround($3 - $16);
          $33 = Math_fround($6 - $20);
          $34 = Math_fround($4 - $21);
          $2 = Math_fround($3 - $11);
          $7 = Math_fround($6 - $17);
          $12 = Math_fround($4 - $19);
          break label$9;
         }
         $24 = HEAPF32[$0 + 196 >> 2];
         $15 = Math_fround($4 - $24);
         $17 = HEAPF32[$0 + 392 >> 2];
         $20 = HEAPF32[$0 + 584 >> 2];
         $26 = Math_fround($17 - $20);
         $23 = HEAPF32[$0 + 200 >> 2];
         $13 = Math_fround($6 - $23);
         $19 = HEAPF32[$0 + 388 >> 2];
         $21 = HEAPF32[$0 + 580 >> 2];
         $27 = Math_fround($19 - $21);
         $2 = Math_fround(Math_fround($15 * $26) - Math_fround($13 * $27));
         $8 = Math_fround($2 * $2);
         $11 = HEAPF32[$0 + 396 >> 2];
         $16 = HEAPF32[$0 + 588 >> 2];
         $9 = Math_fround($11 - $16);
         $22 = HEAPF32[$0 + 204 >> 2];
         $5 = Math_fround($3 - $22);
         $2 = Math_fround(Math_fround($13 * $9) - Math_fround($5 * $26));
         $7 = Math_fround($2 * $2);
         $2 = Math_fround(Math_fround($5 * $27) - Math_fround($15 * $9));
         $8 = Math_fround($8 + Math_fround($7 + Math_fround($2 * $2)));
         $12 = Math_fround($4 - $19);
         $28 = Math_fround($23 - $20);
         $7 = Math_fround($6 - $17);
         $36 = Math_fround($24 - $21);
         $2 = Math_fround(Math_fround($12 * $28) - Math_fround($7 * $36));
         $10 = Math_fround($2 * $2);
         $37 = Math_fround($22 - $16);
         $2 = Math_fround($3 - $11);
         $14 = Math_fround(Math_fround($7 * $37) - Math_fround($2 * $28));
         $25 = Math_fround($14 * $14);
         $14 = Math_fround(Math_fround($2 * $36) - Math_fround($12 * $37));
         $14 = Math_fround($10 + Math_fround($25 + Math_fround($14 * $14)));
         $14 = $8 > $14 ? $8 : $14;
         $10 = Math_fround($23 - $17);
         $34 = Math_fround($4 - $21);
         $25 = Math_fround($24 - $19);
         $33 = Math_fround($6 - $20);
         $8 = Math_fround(Math_fround($10 * $34) - Math_fround($25 * $33));
         $29 = Math_fround($8 * $8);
         $31 = Math_fround($22 - $11);
         $8 = Math_fround($3 - $16);
         $10 = Math_fround(Math_fround($31 * $33) - Math_fround($10 * $8));
         $30 = Math_fround($10 * $10);
         $10 = Math_fround(Math_fround($25 * $8) - Math_fround($31 * $34));
         $10 = Math_fround($29 + Math_fround($30 + Math_fround($10 * $10)));
         $14 = $14 > $10 ? $14 : $10;
         if (($18 | 0) != 1) {
          break label$9
         }
         $29 = HEAPF32[$0 + 4 >> 2];
         $38 = Math_fround($29 - $21);
         $10 = Math_fround($4 - $29);
         $30 = HEAPF32[$0 + 12 >> 2];
         $39 = Math_fround($30 - $16);
         $32 = HEAPF32[$0 + 8 >> 2];
         $40 = Math_fround($32 - $20);
         $31 = Math_fround($3 - $30);
         $25 = Math_fround($6 - $32);
         $9 = Math_fround(0.0);
         break label$8;
        }
        $29 = HEAPF32[$0 + 4 >> 2];
        $10 = Math_fround($4 - $29);
        $32 = HEAPF32[$0 + 8 >> 2];
        $25 = Math_fround($6 - $32);
        $5 = Math_fround(Math_fround($10 * $26) - Math_fround($25 * $27));
        $13 = Math_fround($5 * $5);
        $30 = HEAPF32[$0 + 12 >> 2];
        $31 = Math_fround($3 - $30);
        $5 = Math_fround(Math_fround($25 * $9) - Math_fround($31 * $26));
        $9 = Math_fround(Math_fround($31 * $27) - Math_fround($10 * $9));
        $9 = Math_fround($13 + Math_fround(Math_fround($5 * $5) + Math_fround($9 * $9)));
        $40 = Math_fround($32 - $20);
        $38 = Math_fround($29 - $21);
        $5 = Math_fround(Math_fround($12 * $40) - Math_fround($7 * $38));
        $13 = Math_fround($5 * $5);
        $39 = Math_fround($30 - $16);
        $5 = Math_fround(Math_fround($7 * $39) - Math_fround($2 * $40));
        $15 = Math_fround($5 * $5);
        $5 = Math_fround(Math_fround($2 * $38) - Math_fround($12 * $39));
        $5 = Math_fround($13 + Math_fround($15 + Math_fround($5 * $5)));
        $9 = $9 > $5 ? $9 : $5;
        $26 = Math_fround($32 - $17);
        $27 = Math_fround($29 - $19);
        $5 = Math_fround(Math_fround($26 * $34) - Math_fround($27 * $33));
        $13 = Math_fround($5 * $5);
        $28 = Math_fround($30 - $11);
        $5 = Math_fround(Math_fround($28 * $33) - Math_fround($26 * $8));
        $15 = Math_fround($5 * $5);
        $5 = Math_fround(Math_fround($27 * $8) - Math_fround($28 * $34));
        $5 = Math_fround($13 + Math_fround($15 + Math_fround($5 * $5)));
        $9 = $9 > $5 ? $9 : $5;
        $22 = HEAPF32[$0 + 204 >> 2];
        $5 = Math_fround($3 - $22);
        $23 = HEAPF32[$0 + 200 >> 2];
        $13 = Math_fround($6 - $23);
        $24 = HEAPF32[$0 + 196 >> 2];
        $15 = Math_fround($4 - $24);
        if (($18 | 0) == 2) {
         $16 = Math_fround($30 - $22);
         $20 = Math_fround($32 - $23);
         $21 = Math_fround($29 - $24);
         $8 = Math_fround(0.0);
         break label$7;
        }
        $37 = Math_fround($22 - $16);
        $28 = Math_fround($23 - $20);
        $36 = Math_fround($24 - $21);
       }
       $2 = Math_fround(Math_fround($10 * $28) - Math_fround($25 * $36));
       $7 = Math_fround($2 * $2);
       $2 = Math_fround(Math_fround($25 * $37) - Math_fround($31 * $28));
       $12 = Math_fround($2 * $2);
       $2 = Math_fround(Math_fround($31 * $36) - Math_fround($10 * $37));
       $2 = Math_fround($7 + Math_fround($12 + Math_fround($2 * $2)));
       $7 = Math_fround(Math_fround($15 * $40) - Math_fround($13 * $38));
       $12 = Math_fround($7 * $7);
       $7 = Math_fround(Math_fround($13 * $39) - Math_fround($5 * $40));
       $16 = Math_fround($7 * $7);
       $7 = Math_fround(Math_fround($5 * $38) - Math_fround($15 * $39));
       $7 = Math_fround($12 + Math_fround($16 + Math_fround($7 * $7)));
       $2 = $2 > $7 ? $2 : $7;
       $20 = Math_fround($32 - $23);
       $21 = Math_fround($29 - $24);
       $7 = Math_fround(Math_fround($20 * $34) - Math_fround($21 * $33));
       $12 = Math_fround($7 * $7);
       $16 = Math_fround($30 - $22);
       $7 = Math_fround(Math_fround($16 * $33) - Math_fround($20 * $8));
       $8 = Math_fround(Math_fround($21 * $8) - Math_fround($16 * $34));
       $8 = Math_fround($12 + Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8)));
       $8 = $2 > $8 ? $2 : $8;
       $2 = Math_fround(0.0);
       if ($35) {
        break label$1
       }
       $28 = Math_fround($30 - $11);
       $26 = Math_fround($32 - $17);
       $27 = Math_fround($29 - $19);
       $2 = Math_fround($3 - $11);
       $7 = Math_fround($6 - $17);
       $12 = Math_fround($4 - $19);
      }
      $4 = Math_fround($23 - $17);
      $3 = Math_fround($24 - $19);
      $6 = Math_fround(Math_fround($10 * $4) - Math_fround($25 * $3));
      $17 = Math_fround($6 * $6);
      $6 = Math_fround($22 - $11);
      $4 = Math_fround(Math_fround($25 * $6) - Math_fround($31 * $4));
      $11 = Math_fround($4 * $4);
      $4 = Math_fround(Math_fround($31 * $3) - Math_fround($10 * $6));
      $4 = Math_fround($17 + Math_fround($11 + Math_fround($4 * $4)));
      $3 = Math_fround(Math_fround($15 * $26) - Math_fround($13 * $27));
      $6 = Math_fround($3 * $3);
      $3 = Math_fround(Math_fround($13 * $28) - Math_fround($5 * $26));
      $11 = Math_fround($3 * $3);
      $3 = Math_fround(Math_fround($5 * $27) - Math_fround($15 * $28));
      $3 = Math_fround($6 + Math_fround($11 + Math_fround($3 * $3)));
      $4 = $4 > $3 ? $4 : $3;
      $3 = Math_fround(Math_fround($20 * $12) - Math_fround($21 * $7));
      $6 = Math_fround($3 * $3);
      $3 = Math_fround(Math_fround($16 * $7) - Math_fround($20 * $2));
      $5 = Math_fround($3 * $3);
      $3 = Math_fround(Math_fround($21 * $2) - Math_fround($16 * $12));
      $3 = Math_fround($6 + Math_fround($5 + Math_fround($3 * $3)));
      $2 = $4 > $3 ? $4 : $3;
      break label$1;
     }
     $4 = Math_fround($4 - HEAPF32[$0 + 4 >> 2]);
     $3 = Math_fround($3 - HEAPF32[$0 + 8 >> 2]);
     $7 = Math_fround(Math_fround($4 * $8) - Math_fround($3 * $9));
     $6 = Math_fround($6 - HEAPF32[$0 + 12 >> 2]);
     $8 = Math_fround(Math_fround($3 * $2) - Math_fround($6 * $8));
     $2 = Math_fround(Math_fround($6 * $9) - Math_fround($4 * $2));
     $9 = Math_fround(Math_fround($7 * $7) + Math_fround(Math_fround($8 * $8) + Math_fround($2 * $2)));
     $7 = HEAPF32[$0 + 204 >> 2];
     $12 = HEAPF32[$0 + 200 >> 2];
     $11 = HEAPF32[$0 + 196 >> 2];
     $8 = Math_fround(0.0);
     if (($18 | 0) == 2) {
      break label$2
     }
    }
    $2 = Math_fround($15 - $12);
    $8 = Math_fround($22 - $11);
    $15 = Math_fround(Math_fround($4 * $2) - Math_fround($3 * $8));
    $13 = Math_fround($13 - $7);
    $2 = Math_fround(Math_fround($3 * $13) - Math_fround($6 * $2));
    $10 = Math_fround($2 * $2);
    $2 = Math_fround(Math_fround($6 * $8) - Math_fround($4 * $13));
    $8 = Math_fround(Math_fround($15 * $15) + Math_fround($10 + Math_fround($2 * $2)));
    $2 = Math_fround(0.0);
    if ($35) {
     break label$1
    }
   }
   $2 = Math_fround($19 - $12);
   $12 = Math_fround($5 - $11);
   $11 = Math_fround(Math_fround($4 * $2) - Math_fround($3 * $12));
   $7 = Math_fround($17 - $7);
   $3 = Math_fround(Math_fround($3 * $7) - Math_fround($6 * $2));
   $4 = Math_fround(Math_fround($6 * $12) - Math_fround($4 * $7));
   $2 = Math_fround(Math_fround($11 * $11) + Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4)));
  }
  $4 = Math_fround(Math_abs($14));
  $0 = $4 > Math_fround(-999999984306749440.0);
  $1 = $0 ? 0 : -1;
  $3 = Math_fround(Math_abs($9));
  $4 = $0 ? $4 : Math_fround(-999999984306749440.0);
  $0 = $3 > $4;
  $1 = $0 ? 1 : $1;
  $6 = Math_fround(Math_abs($8));
  $4 = $0 ? $3 : $4;
  $0 = $6 > $4;
  return Math_fround(Math_abs($2)) > ($0 ? $6 : $4) ? 3 : $0 ? 2 : $1;
 }
 
 function btPersistentManifold__getCacheEntry_28btManifoldPoint_20const__29_20const($0, $1) {
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0);
  $6 = HEAP32[$0 + 780 >> 2];
  label$1 : {
   if (($6 | 0) < 1) {
    $1 = -1;
    break label$1;
   }
   $4 = $0 + 8 | 0;
   $8 = HEAPF32[$1 + 8 >> 2];
   $9 = HEAPF32[$1 + 4 >> 2];
   $10 = HEAPF32[$1 >> 2];
   $3 = HEAPF32[$0 + 784 >> 2];
   $3 = Math_fround($3 * $3);
   $0 = 0;
   $1 = -1;
   while (1) {
    $2 = Math_fround(HEAPF32[$4 + -4 >> 2] - $10);
    $5 = Math_fround($2 * $2);
    $2 = Math_fround(HEAPF32[$4 >> 2] - $9);
    $5 = Math_fround($5 + Math_fround($2 * $2));
    $2 = Math_fround(HEAPF32[$4 + 4 >> 2] - $8);
    $2 = Math_fround($5 + Math_fround($2 * $2));
    $7 = $2 < $3;
    $3 = $7 ? $2 : $3;
    $1 = $7 ? $0 : $1;
    $4 = $4 + 192 | 0;
    $0 = $0 + 1 | 0;
    if (($0 | 0) != ($6 | 0)) {
     continue
    }
    break;
   };
  }
  return $1;
 }
 
 function btPersistentManifold__addManifoldPoint_28btManifoldPoint_20const__2c_20bool_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = HEAP32[$0 + 780 >> 2];
  label$1 : {
   if (($2 | 0) == 4) {
    $2 = btPersistentManifold__sortCachedPoints_28btManifoldPoint_20const__29($0, $1);
    $3 = (Math_imul($2, 192) + $0 | 0) + 120 | 0;
    $4 = HEAP32[$3 >> 2];
    if (!$4) {
     break label$1
    }
    $5 = HEAP32[421];
    if (!$5) {
     break label$1
    }
    FUNCTION_TABLE[$5]($4) | 0;
    HEAP32[$3 >> 2] = 0;
    break label$1;
   }
   HEAP32[$0 + 780 >> 2] = $2 + 1;
  }
  $2 = ($2 | 0) > 0 ? $2 : 0;
  memcpy((Math_imul($2, 192) + $0 | 0) + 4 | 0, $1, 192);
  return $2;
 }
 
 function btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, $1, $2) {
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0);
  $12 = global$0 - 16 | 0;
  global$0 = $12;
  $9 = HEAP32[$0 + 780 >> 2];
  label$1 : {
   if (($9 | 0) < 1) {
    break label$1
   }
   $3 = ($0 + Math_imul($9, 192) | 0) + -188 | 0;
   $6 = $9;
   while (1) {
    $13 = HEAPF32[$1 + 48 >> 2];
    $16 = HEAPF32[$1 + 8 >> 2];
    $17 = HEAPF32[$1 + 4 >> 2];
    $18 = HEAPF32[$1 >> 2];
    $14 = HEAPF32[$1 + 52 >> 2];
    $19 = HEAPF32[$1 + 24 >> 2];
    $10 = HEAPF32[$1 + 20 >> 2];
    $20 = HEAPF32[$1 + 16 >> 2];
    $15 = HEAPF32[$1 + 56 >> 2];
    $21 = HEAPF32[$1 + 40 >> 2];
    $5 = HEAPF32[$1 + 36 >> 2];
    $7 = HEAPF32[$1 + 32 >> 2];
    HEAP32[$3 + 60 >> 2] = 0;
    $4 = HEAPF32[$3 >> 2];
    $11 = Math_fround($7 * $4);
    $7 = HEAPF32[$3 + 4 >> 2];
    $11 = Math_fround($11 + Math_fround($5 * $7));
    $5 = HEAPF32[$3 + 8 >> 2];
    $15 = Math_fround($15 + Math_fround($11 + Math_fround($21 * $5)));
    HEAPF32[$3 + 56 >> 2] = $15;
    $14 = Math_fround($14 + Math_fround(Math_fround(Math_fround($4 * $20) + Math_fround($7 * $10)) + Math_fround($5 * $19)));
    HEAPF32[$3 + 52 >> 2] = $14;
    $13 = Math_fround($13 + Math_fround(Math_fround(Math_fround($4 * $18) + Math_fround($7 * $17)) + Math_fround($5 * $16)));
    HEAPF32[$3 + 48 >> 2] = $13;
    $16 = HEAPF32[$2 + 56 >> 2];
    $17 = HEAPF32[$2 + 40 >> 2];
    $18 = HEAPF32[$2 + 32 >> 2];
    $19 = HEAPF32[$2 + 36 >> 2];
    $10 = HEAPF32[$2 + 52 >> 2];
    $20 = HEAPF32[$2 + 24 >> 2];
    $21 = HEAPF32[$2 + 16 >> 2];
    $23 = HEAPF32[$2 + 20 >> 2];
    $11 = HEAPF32[$2 + 48 >> 2];
    $24 = HEAPF32[$2 + 8 >> 2];
    $7 = HEAPF32[$2 >> 2];
    $5 = HEAPF32[$2 + 4 >> 2];
    HEAP32[$3 + 44 >> 2] = 0;
    $4 = HEAPF32[$3 + 16 >> 2];
    $22 = Math_fround($7 * $4);
    $7 = HEAPF32[$3 + 20 >> 2];
    $22 = Math_fround($22 + Math_fround($5 * $7));
    $5 = HEAPF32[$3 + 24 >> 2];
    $11 = Math_fround($11 + Math_fround($22 + Math_fround($24 * $5)));
    HEAPF32[$3 + 32 >> 2] = $11;
    $10 = Math_fround($10 + Math_fround(Math_fround(Math_fround($4 * $21) + Math_fround($7 * $23)) + Math_fround($5 * $20)));
    HEAPF32[$3 + 36 >> 2] = $10;
    $4 = Math_fround($16 + Math_fround(Math_fround(Math_fround($4 * $18) + Math_fround($7 * $19)) + Math_fround($5 * $17)));
    HEAPF32[$3 + 40 >> 2] = $4;
    HEAPF32[$3 + 80 >> 2] = Math_fround(Math_fround(Math_fround($13 - $11) * HEAPF32[$3 - -64 >> 2]) + Math_fround(Math_fround($14 - $10) * HEAPF32[$3 + 68 >> 2])) + Math_fround(Math_fround($15 - $4) * HEAPF32[$3 + 72 >> 2]);
    $8 = $3 + 156 | 0;
    HEAP32[$8 >> 2] = HEAP32[$8 >> 2] + 1;
    $3 = $3 + -192 | 0;
    $6 = $6 + -1 | 0;
    if (($6 | 0) > 0) {
     continue
    }
    break;
   };
   if (($9 | 0) < 1) {
    break label$1
   }
   $1 = Math_imul($9, 192);
   while (1) {
    $9 = $9 + -1 | 0;
    $3 = $0 + $1 | 0;
    $2 = $3 + -188 | 0;
    $4 = HEAPF32[$3 + -108 >> 2];
    $7 = HEAPF32[$0 + 784 >> 2];
    label$4 : {
     if (!($4 <= $7)) {
      $3 = $3 + -72 | 0;
      $6 = HEAP32[$3 >> 2];
      label$6 : {
       if (!$6) {
        break label$6
       }
       $8 = HEAP32[421];
       if (!$8) {
        break label$6
       }
       FUNCTION_TABLE[$8]($6) | 0;
       HEAP32[$3 >> 2] = 0;
      }
      $8 = $0;
      $3 = HEAP32[$0 + 780 >> 2];
      $6 = $3 + -1 | 0;
      if (($9 | 0) != ($6 | 0)) {
       $3 = Math_imul($6, 192) + $0 | 0;
       memcpy($2, $3 + 4 | 0, 192);
       $2 = $3 + 120 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$3 + 160 >> 2] = 0;
       $2 = $3 + 128 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$3 + 136 >> 2] = 0;
       $3 = HEAP32[$0 + 780 >> 2];
      }
      $3 = $3 + -1 | 0;
      HEAP32[$8 + 780 >> 2] = $3;
      if ($3) {
       break label$4
      }
      $3 = HEAP32[424];
      if (!$3) {
       break label$4
      }
      HEAP32[$12 + 12 >> 2] = $0;
      FUNCTION_TABLE[$3]($12 + 12 | 0);
      break label$4;
     }
     $5 = Math_fround(HEAPF32[$3 + -156 >> 2] - Math_fround(HEAPF32[$3 + -140 >> 2] - Math_fround(HEAPF32[$3 + -124 >> 2] * $4)));
     $10 = Math_fround($5 * $5);
     $5 = Math_fround(HEAPF32[$3 + -152 >> 2] - Math_fround(HEAPF32[$3 + -136 >> 2] - Math_fround($4 * HEAPF32[$3 + -120 >> 2])));
     $4 = Math_fround(HEAPF32[$3 + -148 >> 2] - Math_fround(HEAPF32[$3 + -132 >> 2] - Math_fround($4 * HEAPF32[$3 + -116 >> 2])));
     if (!!(Math_fround(Math_fround($10 + Math_fround($5 * $5)) + Math_fround($4 * $4)) > Math_fround($7 * $7))) {
      $3 = $3 + -72 | 0;
      $6 = HEAP32[$3 >> 2];
      label$9 : {
       if (!$6) {
        break label$9
       }
       $8 = HEAP32[421];
       if (!$8) {
        break label$9
       }
       FUNCTION_TABLE[$8]($6) | 0;
       HEAP32[$3 >> 2] = 0;
      }
      $8 = $0;
      $3 = HEAP32[$0 + 780 >> 2];
      $6 = $3 + -1 | 0;
      if (($9 | 0) != ($6 | 0)) {
       $3 = Math_imul($6, 192) + $0 | 0;
       memcpy($2, $3 + 4 | 0, 192);
       $2 = $3 + 120 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$3 + 160 >> 2] = 0;
       $2 = $3 + 128 | 0;
       HEAP32[$2 >> 2] = 0;
       HEAP32[$2 + 4 >> 2] = 0;
       HEAP32[$3 + 136 >> 2] = 0;
       $3 = HEAP32[$0 + 780 >> 2];
      }
      $3 = $3 + -1 | 0;
      HEAP32[$8 + 780 >> 2] = $3;
      if ($3) {
       break label$4
      }
      $3 = HEAP32[424];
      if (!$3) {
       break label$4
      }
      HEAP32[$12 + 8 >> 2] = $0;
      FUNCTION_TABLE[$3]($12 + 8 | 0);
      break label$4;
     }
     $3 = HEAP32[422];
     if (!$3) {
      break label$4
     }
     FUNCTION_TABLE[$3]($2, HEAP32[$0 + 772 >> 2], HEAP32[$0 + 776 >> 2]) | 0;
    }
    $1 = $1 + -192 | 0;
    if (($9 | 0) > 0) {
     continue
    }
    break;
   };
  }
  global$0 = $12 + 16 | 0;
 }
 
 function btManifoldResult__calculateCombinedRestitution_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($0, $1) {
  return Math_fround(HEAPF32[$0 + 232 >> 2] * HEAPF32[$1 + 232 >> 2]);
 }
 
 function btManifoldResult__btManifoldResult_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2) {
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 >> 2] = 7720;
  return $0;
 }
 
 function btManifoldResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0, $24 = 0, $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = 0;
  $4 = global$0 - 192 | 0;
  global$0 = $4;
  label$1 : {
   if (HEAPF32[HEAP32[$0 + 4 >> 2] + 784 >> 2] < $3) {
    break label$1
   }
   $12 = HEAPF32[$2 + 8 >> 2];
   $7 = Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2] * $3) + $12);
   $10 = HEAPF32[$2 + 4 >> 2];
   $9 = Math_fround(Math_fround(HEAPF32[$1 + 4 >> 2] * $3) + $10);
   $13 = HEAPF32[$2 >> 2];
   $14 = Math_fround(Math_fround(HEAPF32[$1 >> 2] * $3) + $13);
   $8 = HEAP32[$0 + 4 >> 2];
   $25 = HEAP32[$8 + 780 >> 2];
   $11 = HEAP32[$8 + 772 >> 2];
   $20 = HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2];
   $19 = ($11 | 0) == ($20 | 0);
   label$2 : {
    if (!$19) {
     $5 = HEAP32[HEAP32[$0 + 12 >> 2] + 8 >> 2];
     $16 = Math_fround($14 - HEAPF32[$5 + 52 >> 2]);
     $17 = Math_fround($9 - HEAPF32[$5 + 56 >> 2]);
     $18 = Math_fround($7 - HEAPF32[$5 + 60 >> 2]);
     $21 = Math_fround(Math_fround(Math_fround($16 * HEAPF32[$5 + 12 >> 2]) + Math_fround($17 * HEAPF32[$5 + 28 >> 2])) + Math_fround($18 * HEAPF32[$5 + 44 >> 2]));
     $22 = Math_fround(Math_fround(Math_fround($16 * HEAPF32[$5 + 8 >> 2]) + Math_fround($17 * HEAPF32[$5 + 24 >> 2])) + Math_fround($18 * HEAPF32[$5 + 40 >> 2]));
     $16 = Math_fround(Math_fround(Math_fround($16 * HEAPF32[$5 + 4 >> 2]) + Math_fround($17 * HEAPF32[$5 + 20 >> 2])) + Math_fround($18 * HEAPF32[$5 + 36 >> 2]));
     $5 = $20;
     break label$2;
    }
    $16 = Math_fround($14 - HEAPF32[$11 + 52 >> 2]);
    $17 = Math_fround($9 - HEAPF32[$11 + 56 >> 2]);
    $18 = Math_fround($7 - HEAPF32[$11 + 60 >> 2]);
    $21 = Math_fround(Math_fround(Math_fround($16 * HEAPF32[$11 + 12 >> 2]) + Math_fround($17 * HEAPF32[$11 + 28 >> 2])) + Math_fround($18 * HEAPF32[$11 + 44 >> 2]));
    $22 = Math_fround(Math_fround(Math_fround($16 * HEAPF32[$11 + 8 >> 2]) + Math_fround($17 * HEAPF32[$11 + 24 >> 2])) + Math_fround($18 * HEAPF32[$11 + 40 >> 2]));
    $16 = Math_fround(Math_fround(Math_fround($16 * HEAPF32[$11 + 4 >> 2]) + Math_fround($17 * HEAPF32[$11 + 20 >> 2])) + Math_fround($18 * HEAPF32[$11 + 36 >> 2]));
    $5 = HEAP32[HEAP32[$0 + 12 >> 2] + 8 >> 2];
   }
   $17 = HEAPF32[$5 + 20 >> 2];
   $18 = HEAPF32[$5 + 36 >> 2];
   $26 = HEAPF32[$5 + 40 >> 2];
   $27 = HEAPF32[$5 + 8 >> 2];
   $28 = HEAPF32[$5 + 24 >> 2];
   $29 = HEAPF32[$5 + 44 >> 2];
   $30 = HEAPF32[$5 + 60 >> 2];
   $31 = HEAPF32[$5 + 12 >> 2];
   $32 = HEAPF32[$5 + 52 >> 2];
   $33 = HEAPF32[$5 + 28 >> 2];
   $34 = HEAPF32[$5 + 56 >> 2];
   $35 = HEAPF32[$5 + 4 >> 2];
   HEAP32[$4 + 28 >> 2] = 0;
   $6 = $4 + 124 | 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   $6 = $4 + 132 | 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   $6 = $4 + 140 | 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   $6 = $4 + 148 | 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   HEAP32[$4 + 156 >> 2] = 0;
   $6 = $1 + 8 | 0;
   $15 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $5 = $4 + 72 | 0;
   HEAP32[$5 >> 2] = $15;
   HEAP32[$5 + 4 >> 2] = $6;
   $13 = Math_fround($13 - $32);
   $10 = Math_fround($10 - $34);
   $12 = Math_fround($12 - $30);
   HEAPF32[$4 + 24 >> 2] = Math_fround(Math_fround($31 * $13) + Math_fround($33 * $10)) + Math_fround($29 * $12);
   HEAPF32[$4 + 20 >> 2] = Math_fround(Math_fround($13 * $27) + Math_fround($10 * $28)) + Math_fround($12 * $26);
   HEAP32[$4 + 12 >> 2] = 0;
   HEAPF32[$4 + 8 >> 2] = $21;
   HEAPF32[$4 + 4 >> 2] = $22;
   HEAPF32[$4 >> 2] = $16;
   HEAP32[$4 + 84 >> 2] = 0;
   HEAP32[$4 + 88 >> 2] = 0;
   HEAPF32[$4 + 80 >> 2] = $3;
   HEAP32[$4 + 92 >> 2] = 0;
   HEAP32[$4 + 96 >> 2] = 0;
   HEAP32[$4 + 116 >> 2] = 0;
   HEAP32[$4 + 120 >> 2] = 0;
   $5 = HEAP32[$1 + 4 >> 2];
   HEAP32[$4 + 64 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$4 + 68 >> 2] = $5;
   HEAPF32[$4 + 16 >> 2] = Math_fround(Math_fround($13 * $35) + Math_fround($10 * $17)) + Math_fround($12 * $18);
   HEAP32[$4 + 60 >> 2] = 0;
   HEAPF32[$4 + 56 >> 2] = $7;
   HEAPF32[$4 + 52 >> 2] = $9;
   $6 = $2 + 8 | 0;
   $1 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $5 = $4 + 40 | 0;
   HEAP32[$5 >> 2] = $1;
   HEAP32[$5 + 4 >> 2] = $6;
   HEAPF32[$4 + 48 >> 2] = $14;
   $5 = HEAP32[$2 + 4 >> 2];
   HEAP32[$4 + 32 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$4 + 36 >> 2] = $5;
   $2 = btPersistentManifold__getCacheEntry_28btManifoldPoint_20const__29_20const($8, $4);
   $6 = HEAP32[$0 + 8 >> 2];
   $5 = HEAP32[$6 + 8 >> 2];
   $15 = HEAP32[$0 + 12 >> 2];
   $1 = HEAP32[$15 + 8 >> 2];
   HEAPF32[$4 + 96 >> 2] = HEAPF32[$5 + 232 >> 2] * HEAPF32[$1 + 232 >> 2];
   $3 = HEAPF32[$5 + 228 >> 2];
   $7 = HEAPF32[$1 + 228 >> 2];
   HEAPF32[$4 + 84 >> 2] = Math_min(Math_fround(Math_max(Math_fround($3 * $7), Math_fround(-10.0))), Math_fround(10.0));
   HEAPF32[$4 + 88 >> 2] = Math_min(Math_fround(Math_max(Math_fround(Math_fround($7 * HEAPF32[$5 + 236 >> 2]) + Math_fround($3 * HEAPF32[$1 + 236 >> 2])), Math_fround(-10.0))), Math_fround(10.0));
   HEAPF32[$4 + 92 >> 2] = Math_min(Math_fround(Math_max(Math_fround(Math_fround($7 * HEAPF32[$5 + 240 >> 2]) + Math_fround($3 * HEAPF32[$1 + 240 >> 2])), Math_fround(-10.0))), Math_fround(10.0));
   $8 = HEAP32[$5 + 204 >> 2];
   if (!(HEAPU8[$1 + 204 | 0] & 128 ? 0 : !($8 & 128))) {
    HEAPF32[$4 + 148 >> 2] = HEAPF32[$5 + 244 >> 2] + HEAPF32[$1 + 244 >> 2];
    HEAPF32[$4 + 144 >> 2] = Math_fround(1.0) / Math_fround(Math_fround(Math_fround(1.0) / HEAPF32[HEAP32[$6 + 8 >> 2] + 248 >> 2]) + Math_fround(Math_fround(1.0) / HEAPF32[HEAP32[$15 + 8 >> 2] + 248 >> 2]));
    HEAP32[$4 + 120 >> 2] = HEAP32[$4 + 120 >> 2] | 8;
    $8 = HEAP32[HEAP32[$6 + 8 >> 2] + 204 >> 2];
   }
   label$6 : {
    if (!($8 & 512)) {
     if (!(HEAPU8[HEAP32[$15 + 8 >> 2] + 205 | 0] & 2)) {
      break label$6
     }
    }
    HEAP32[$4 + 120 >> 2] = HEAP32[$4 + 120 >> 2] | 16;
   }
   $3 = HEAPF32[$4 + 72 >> 2];
   label$8 : {
    if (!!(Math_fround(Math_abs($3)) > Math_fround(.7071067690849304))) {
     $13 = HEAPF32[$4 + 68 >> 2];
     $7 = Math_fround(Math_fround($3 * $3) + Math_fround($13 * $13));
     $10 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($7)));
     $7 = Math_fround($7 * $10);
     $12 = HEAPF32[$4 + 64 >> 2];
     $9 = Math_fround(-Math_fround($3 * $10));
     $14 = Math_fround($12 * $9);
     $3 = Math_fround($13 * $10);
     $13 = Math_fround(-Math_fround($12 * $3));
     $10 = Math_fround(0.0);
     break label$8;
    }
    $7 = HEAPF32[$4 + 64 >> 2];
    $9 = HEAPF32[$4 + 68 >> 2];
    $14 = Math_fround(Math_fround($7 * $7) + Math_fround($9 * $9));
    $12 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($14)));
    $14 = Math_fround($14 * $12);
    $10 = Math_fround(-Math_fround($9 * $12));
    $13 = Math_fround($3 * $10);
    $9 = Math_fround($7 * $12);
    $7 = Math_fround(-Math_fround($3 * $9));
    $3 = Math_fround(0.0);
   }
   $1 = $0 + 4 | 0;
   HEAPF32[$4 + 184 >> 2] = $14;
   HEAPF32[$4 + 180 >> 2] = $13;
   HEAPF32[$4 + 168 >> 2] = $3;
   HEAPF32[$4 + 164 >> 2] = $9;
   HEAPF32[$4 + 176 >> 2] = $7;
   HEAPF32[$4 + 160 >> 2] = $10;
   $5 = $4;
   label$10 : {
    if (!$19) {
     $8 = $0 + 28 | 0;
     $6 = $0 + 16 | 0;
     $15 = $0 + 20 | 0;
     $19 = $0 + 24 | 0;
     break label$10;
    }
    $8 = $0 + 24 | 0;
    $6 = $0 + 20 | 0;
    $15 = $0 + 16 | 0;
    $19 = $0 + 28 | 0;
   }
   HEAP32[$5 + 112 >> 2] = HEAP32[$19 >> 2];
   HEAP32[$4 + 108 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$4 + 104 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$4 + 100 >> 2] = HEAP32[$15 >> 2];
   $5 = HEAP32[$1 >> 2];
   label$12 : {
    if (($2 | 0) >= 0) {
     $5 = Math_imul($2, 192) + $5 | 0;
     $15 = $5 + 136 | 0;
     $3 = HEAPF32[$15 >> 2];
     $19 = $5 + 132 | 0;
     $7 = HEAPF32[$19 >> 2];
     $23 = $5 + 128 | 0;
     $9 = HEAPF32[$23 >> 2];
     $8 = $5 + 160 | 0;
     $6 = HEAP32[$8 >> 2];
     label$14 : {
      if (HEAPU8[$4 + 120 | 0] & 16) {
       $14 = Math_fround(Math_fround($9 * HEAPF32[$5 + 88 >> 2]) + Math_fround(0.0));
       if (!(Math_fround(Math_fround($7 * $7) + Math_fround($3 * $3)) > Math_fround($14 * $14))) {
        break label$14
       }
      }
      $24 = $5 + 120 | 0;
      $36 = HEAP32[$24 >> 2];
      memcpy($5 + 4 | 0, $4, 192);
      HEAPF32[$23 >> 2] = $9;
      HEAP32[$24 >> 2] = $36;
      HEAPF32[$19 >> 2] = $7;
      HEAPF32[$15 >> 2] = $3;
     }
     HEAP32[$8 >> 2] = $6;
     break label$12;
    }
    $2 = btPersistentManifold__addManifoldPoint_28btManifoldPoint_20const__2c_20bool_29($5, $4);
   }
   $8 = HEAP32[425];
   label$16 : {
    if (!$8) {
     break label$16
    }
    $5 = $0 + 12 | 0;
    $0 = $0 + 8 | 0;
    if (!(HEAPU8[HEAP32[HEAP32[$0 >> 2] + 8 >> 2] + 204 | 0] & 8)) {
     if (!(HEAPU8[HEAP32[HEAP32[$5 >> 2] + 8 >> 2] + 204 | 0] & 8)) {
      break label$16
     }
    }
    $6 = (HEAP32[$1 >> 2] + Math_imul($2, 192) | 0) + 4 | 0;
    $2 = ($11 | 0) != ($20 | 0);
    FUNCTION_TABLE[$8]($6, HEAP32[($2 ? $5 : $0) >> 2], HEAP32[$4 + 100 >> 2], HEAP32[$4 + 108 >> 2], HEAP32[($2 ? $0 : $5) >> 2], HEAP32[$4 + 104 >> 2], HEAP32[$4 + 112 >> 2]) | 0;
   }
   if ($25) {
    break label$1
   }
   $0 = HEAP32[423];
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[$0]($1);
  }
  global$0 = $4 + 192 | 0;
 }
 
 function btManifoldResult___btManifoldResult_28_29($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29($0);
 }
 
 function btManifoldResult__setShapeIdentifiersA_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[$0 + 24 >> 2] = $2;
  HEAP32[$0 + 16 >> 2] = $1;
 }
 
 function btManifoldResult__setShapeIdentifiersB_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[$0 + 28 >> 2] = $2;
  HEAP32[$0 + 20 >> 2] = $1;
 }
 
 function btCollisionDispatcher__btCollisionDispatcher_28btCollisionConfiguration__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  HEAP32[$0 + 28 >> 2] = 7720;
  HEAP32[$0 >> 2] = 7860;
  HEAP32[$0 + 4 >> 2] = 2;
  HEAP32[$0 + 10444 >> 2] = $1;
  HEAP32[$0 + 64 >> 2] = 111;
  HEAP8[$0 + 24 | 0] = 1;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 60 >> 2] = 0;
  $2 = $0 + 12 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1) | 0), HEAP32[wasm2js_i32$0 + 68 >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1) | 0), HEAP32[wasm2js_i32$0 + 72 >> 2] = wasm2js_i32$1;
  $2 = $0 + 5260 | 0;
  while (1) {
   $1 = $2;
   $3 = 0;
   while (1) {
    $4 = HEAP32[$0 + 10444 >> 2];
    (wasm2js_i32$0 = $1 + -5184 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $5, $3) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $4 = HEAP32[$0 + 10444 >> 2];
    (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 20 >> 2]]($4, $5, $3) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $1 = $1 + 4 | 0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != 36) {
     continue
    }
    break;
   };
   $2 = $2 + 144 | 0;
   $5 = $5 + 1 | 0;
   if (($5 | 0) != 36) {
    continue
   }
   break;
  };
 }
 
 function btCollisionDispatcher__defaultNearCallback_28btBroadphasePair__2c_20btCollisionDispatcher__2c_20btDispatcherInfo_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0);
  $3 = global$0 - 96 | 0;
  global$0 = $3;
  $4 = HEAP32[HEAP32[$0 >> 2] >> 2];
  $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
  label$1 : {
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, $4, $5)) {
    break label$1
   }
   HEAP32[$3 + 88 >> 2] = -1;
   HEAP32[$3 + 92 >> 2] = -1;
   HEAP32[$3 + 72 >> 2] = 0;
   HEAP32[$3 + 80 >> 2] = $4;
   HEAP32[$3 + 84 >> 2] = $4 + 4;
   HEAP32[$3 + 76 >> 2] = HEAP32[$4 + 192 >> 2];
   HEAP32[$3 + 64 >> 2] = -1;
   HEAP32[$3 + 68 >> 2] = -1;
   HEAP32[$3 + 48 >> 2] = 0;
   HEAP32[$3 + 56 >> 2] = $5;
   HEAP32[$3 + 60 >> 2] = $5 + 4;
   HEAP32[$3 + 52 >> 2] = HEAP32[$5 + 192 >> 2];
   if (!HEAP32[$0 + 8 >> 2]) {
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 72 | 0, $3 + 48 | 0, 0, 1) | 0;
    HEAP32[$0 + 8 >> 2] = $1;
    if (!$1) {
     break label$1
    }
   }
   $1 = btManifoldResult__btManifoldResult_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($3 + 8 | 0, $3 + 72 | 0, $3 + 48 | 0);
   $0 = HEAP32[$0 + 8 >> 2];
   if (HEAP32[$2 + 8 >> 2] == 1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3 + 72 | 0, $3 + 48 | 0, $2, $1);
    break label$1;
   }
   $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $4, $5, $2, $1));
   if (!(HEAPF32[$2 + 12 >> 2] > $6)) {
    break label$1
   }
   HEAPF32[$2 + 12 >> 2] = $6;
  }
  global$0 = $3 + 96 | 0;
 }
 
 function btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, $1, $2) {
  HEAP32[((Math_imul($1, 144) + $0 | 0) + ($2 << 2) | 0) + 76 >> 2] = 1708;
 }
 
 function btCollisionDispatcher___btCollisionDispatcher_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 7860;
  $1 = HEAP32[$0 + 20 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 24 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 20 >> 2] = 0;
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 24 | 0] = 1;
  return $0 | 0;
 }
 
 function btCollisionDispatcher___btCollisionDispatcher_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 7860;
  $1 = HEAP32[$0 + 20 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 24 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 20 >> 2] = 0;
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 24 | 0] = 1;
  operator_20delete_28void__29($0);
 }
 
 function btCollisionDispatcher__getNewManifold_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0;
  $5 = global$0 - 16 | 0;
  global$0 = $5;
  HEAP32[426] = HEAP32[426] + 1;
  $4 = 2976;
  if (HEAP32[$0 + 4 >> 2] & 2) {
   $4 = HEAP32[$1 + 192 >> 2];
   $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 20 >> 2]]($4, HEAPF32[744]));
   HEAPF32[$5 + 12 >> 2] = $6;
   $4 = HEAP32[$2 + 192 >> 2];
   $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 20 >> 2]]($4, HEAPF32[744]));
   HEAPF32[$5 + 8 >> 2] = $7;
   $4 = $6 < $7 ? $5 + 12 | 0 : $5 + 8 | 0;
  }
  $8 = HEAP32[$4 >> 2];
  $6 = HEAPF32[$2 + 184 >> 2];
  $7 = HEAPF32[$1 + 184 >> 2];
  $3 = HEAP32[$0 + 72 >> 2];
  $4 = HEAP32[$3 + 12 >> 2];
  label$2 : {
   label$3 : {
    if ($4) {
     HEAP32[$3 + 12 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 8 >> 2] + -1;
     break label$3;
    }
    $4 = 0;
    if (HEAPU8[$0 + 4 | 0] & 4) {
     break label$2
    }
    $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(804);
   }
   HEAP32[$4 >> 2] = 1025;
   HEAP32[$4 + 160 >> 2] = 0;
   $3 = $4 + 152 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $4 + 144 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $4 + 136 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $4 + 128 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$4 + 120 >> 2] = 0;
   HEAP32[$4 + 124 >> 2] = 0;
   HEAP32[$4 + 312 >> 2] = 0;
   HEAP32[$4 + 316 >> 2] = 0;
   $3 = $4 + 320 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $4 + 328 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $4 + 336 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $4 + 344 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$4 + 352 >> 2] = 0;
   HEAP32[$4 + 504 >> 2] = 0;
   HEAP32[$4 + 508 >> 2] = 0;
   $3 = $4 + 512 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $4 + 520 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $4 + 528 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $4 + 536 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$4 + 544 >> 2] = 0;
   HEAP32[$4 + 736 >> 2] = 0;
   $3 = $4 + 728 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $4 + 720 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $4 + 712 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $4 + 704 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$4 + 696 >> 2] = 0;
   HEAP32[$4 + 700 >> 2] = 0;
   HEAP32[$4 + 772 >> 2] = $1;
   HEAP32[$4 + 776 >> 2] = $2;
   HEAP32[$4 + 780 >> 2] = 0;
   HEAP32[$4 + 784 >> 2] = $8;
   HEAPF32[$4 + 788 >> 2] = $7 < $6 ? $7 : $6;
   $3 = HEAP32[$0 + 12 >> 2];
   HEAP32[$4 + 800 >> 2] = $3;
   label$5 : {
    if (HEAP32[$0 + 16 >> 2] != ($3 | 0)) {
     break label$5
    }
    $9 = $3 ? $3 << 1 : 1;
    if (($3 | 0) >= ($9 | 0)) {
     break label$5
    }
    label$6 : {
     if (!$9) {
      $8 = 0;
      break label$6;
     }
     $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($9 << 2);
     $3 = HEAP32[$0 + 12 >> 2];
    }
    if (($3 | 0) >= 1) {
     $1 = 0;
     $2 = $3;
     while (1) {
      HEAP32[$1 + $8 >> 2] = HEAP32[$1 + HEAP32[$0 + 20 >> 2] >> 2];
      $1 = $1 + 4 | 0;
      $2 = $2 + -1 | 0;
      if ($2) {
       continue
      }
      break;
     };
    }
    $1 = HEAP32[$0 + 20 >> 2];
    if ($1) {
     if (HEAPU8[$0 + 24 | 0]) {
      btAlignedFreeInternal_28void__29($1);
      $3 = HEAP32[$0 + 12 >> 2];
     }
     HEAP32[$0 + 20 >> 2] = 0;
    }
    HEAP32[$0 + 20 >> 2] = $8;
    HEAP32[$0 + 16 >> 2] = $9;
    HEAP8[$0 + 24 | 0] = 1;
   }
   HEAP32[$0 + 12 >> 2] = $3 + 1;
   HEAP32[HEAP32[$0 + 20 >> 2] + ($3 << 2) >> 2] = $4;
  }
  global$0 = $5 + 16 | 0;
  return $4 | 0;
 }
 
 function btCollisionDispatcher__clearManifold_28btPersistentManifold__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  $3 = HEAP32[$1 + 780 >> 2];
  if (($3 | 0) >= 1) {
   $0 = $1 + 4 | 0;
   while (1) {
    btPersistentManifold__clearUserCache_28btManifoldPoint__29($0);
    $0 = $0 + 192 | 0;
    $4 = $4 + 1 | 0;
    $3 = HEAP32[$1 + 780 >> 2];
    if (($4 | 0) < ($3 | 0)) {
     continue
    }
    break;
   };
  }
  label$3 : {
   if (!$3) {
    break label$3
   }
   $0 = HEAP32[424];
   if (!$0) {
    break label$3
   }
   HEAP32[$2 + 12 >> 2] = $1;
   FUNCTION_TABLE[$0]($2 + 12 | 0);
  }
  HEAP32[$1 + 780 >> 2] = 0;
  global$0 = $2 + 16 | 0;
 }
 
 function btCollisionDispatcher__releaseManifold_28btPersistentManifold__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  HEAP32[426] = HEAP32[426] + -1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1);
  $2 = $0 + 20 | 0;
  $3 = HEAP32[$2 >> 2];
  $5 = HEAP32[$1 + 800 >> 2];
  $6 = $5 << 2;
  $4 = $3 + $6 | 0;
  $8 = HEAP32[$4 >> 2];
  $9 = $4;
  $10 = $3;
  $3 = $0 + 12 | 0;
  $4 = HEAP32[$3 >> 2] + -1 | 0;
  $7 = $4 << 2;
  HEAP32[$9 >> 2] = HEAP32[$10 + $7 >> 2];
  HEAP32[$7 + HEAP32[$2 >> 2] >> 2] = $8;
  HEAP32[$3 >> 2] = $4;
  HEAP32[HEAP32[$6 + HEAP32[$2 >> 2] >> 2] + 800 >> 2] = $5;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $0 = HEAP32[$0 + 72 >> 2];
   $2 = HEAP32[$0 + 16 >> 2];
   if ($2 >>> 0 > $1 >>> 0) {
    break label$1
   }
   if (Math_imul(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]) + $2 >>> 0 <= $1 >>> 0) {
    break label$1
   }
   HEAP32[$1 >> 2] = HEAP32[$0 + 12 >> 2];
   HEAP32[$0 + 12 >> 2] = $1;
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   return;
  }
  btAlignedFreeInternal_28void__29($1);
 }
 
 function btCollisionDispatcher__findAlgorithm_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btPersistentManifold__2c_20ebtDispatcherQueryType_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  $5 = global$0 - 16 | 0;
  global$0 = $5;
  HEAP32[$5 + 12 >> 2] = $3;
  HEAP32[$5 + 8 >> 2] = $0;
  $3 = HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2];
  $6 = HEAP32[HEAP32[$1 + 4 >> 2] + 4 >> 2];
  label$1 : {
   if (($4 | 0) == 1) {
    $0 = HEAP32[((Math_imul($6, 144) + $0 | 0) + ($3 << 2) | 0) + 76 >> 2];
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $5 + 8 | 0, $1, $2) | 0;
    break label$1;
   }
   $0 = HEAP32[((Math_imul($6, 144) + $0 | 0) + ($3 << 2) | 0) + 5260 >> 2];
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $5 + 8 | 0, $1, $2) | 0;
  }
  global$0 = $5 + 16 | 0;
  return $1 | 0;
 }
 
 function btCollisionDispatcher__needsResponse_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $0 = 0;
  $1 = HEAP32[$1 + 204 >> 2];
  label$1 : {
   if ($1 & 4) {
    break label$1
   }
   $2 = HEAP32[$2 + 204 >> 2];
   if ($2 & 4) {
    break label$1
   }
   if (!($1 & 3)) {
    return 1
   }
   $0 = !($2 & 3);
  }
  return $0 | 0;
 }
 
 function btCollisionDispatcher__needsCollision_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   label$2 : {
    $0 = HEAP32[$1 + 220 >> 2] + -2 | 0;
    if ($0 >>> 0 > 3) {
     break label$2
    }
    label$3 : {
     switch ($0 - 1 | 0) {
     case 0:
     case 1:
      break label$2;
     default:
      break label$3;
     };
    }
    $3 = HEAP32[$2 + 220 >> 2] + -2 | 0;
    if ($3 >>> 0 > 3) {
     break label$2
    }
    $0 = 0;
    switch ($3 - 1 | 0) {
    case 0:
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   label$4 : {
    if (HEAP32[$1 + 280 >> 2]) {
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $2)) {
      break label$4
     }
    }
    $0 = 1;
    if (!HEAP32[$2 + 280 >> 2]) {
     break label$1
    }
    if (FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, $1)) {
     break label$1
    }
   }
   $0 = 0;
  }
  return $0 | 0;
 }
 
 function btCollisionDispatcher__dispatchAllCollisionPairs_28btOverlappingPairCache__2c_20btDispatcherInfo_20const__2c_20btDispatcher__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = global$0 - 16 | 0;
  global$0 = $4;
  HEAP32[$4 + 8 >> 2] = $0;
  HEAP32[$4 + 4 >> 2] = $2;
  HEAP32[$4 >> 2] = 7968;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1, $4, $3);
  global$0 = $4 + 16 | 0;
 }
 
 function btCollisionDispatcher__allocateCollisionAlgorithm_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $0 = HEAP32[$0 + 68 >> 2];
  $2 = HEAP32[$0 + 12 >> 2];
  if ($2) {
   HEAP32[$0 + 12 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -1;
   return $2 | 0;
  }
  return btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1) | 0;
 }
 
 function btCollisionDispatcher__freeCollisionAlgorithm_28void__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $0 = HEAP32[$0 + 68 >> 2];
   $2 = HEAP32[$0 + 16 >> 2];
   if ($2 >>> 0 > $1 >>> 0) {
    break label$1
   }
   if (Math_imul(HEAP32[$0 >> 2], HEAP32[$0 + 4 >> 2]) + $2 >>> 0 <= $1 >>> 0) {
    break label$1
   }
   HEAP32[$1 >> 2] = HEAP32[$0 + 12 >> 2];
   HEAP32[$0 + 12 >> 2] = $1;
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
   return;
  }
  btAlignedFreeInternal_28void__29($1);
 }
 
 function btCollisionDispatcher__getNumManifolds_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 12 >> 2];
 }
 
 function btCollisionDispatcher__getManifoldByIndexInternal_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return HEAP32[HEAP32[$0 + 20 >> 2] + ($1 << 2) >> 2];
 }
 
 function btCollisionDispatcher__getInternalManifoldPointer_28_29($0) {
  $0 = $0 | 0;
  if (!HEAP32[$0 + 12 >> 2]) {
   return 0
  }
  return HEAP32[$0 + 20 >> 2];
 }
 
 function btCollisionDispatcher__getInternalManifoldPool_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 72 >> 2];
 }
 
 function btCollisionPairCallback__processOverlap_28btBroadphasePair__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = $1;
  $1 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[$1 + 64 >> 2]]($2, $1, HEAP32[$0 + 4 >> 2]);
  return 0;
 }
 
 function btGImpactCollisionAlgorithm___btGImpactCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 8056;
  $1 = HEAP32[$0 + 12 >> 2];
  if ($1) {
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
   HEAP32[$0 + 12 >> 2] = 0;
  }
  $1 = HEAP32[$0 + 8 >> 2];
  if ($1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   $1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 60 >> 2]]($1, HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 8 >> 2] = 0;
  }
  HEAP32[$0 + 24 >> 2] = -1;
  HEAP32[$0 + 28 >> 2] = -1;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = -1;
  HEAP32[$1 + 4 >> 2] = -1;
  return $0 | 0;
 }
 
 function btGImpactCollisionAlgorithm___btGImpactCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 8056;
  $1 = HEAP32[$0 + 12 >> 2];
  if ($1) {
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
   HEAP32[$0 + 12 >> 2] = 0;
  }
  $1 = HEAP32[$0 + 8 >> 2];
  if ($1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   $1 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 60 >> 2]]($1, HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 8 >> 2] = 0;
  }
  HEAP32[$0 + 24 >> 2] = -1;
  HEAP32[$0 + 28 >> 2] = -1;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = -1;
  HEAP32[$1 + 4 >> 2] = -1;
  operator_20delete_28void__29($0);
 }
 
 function btGImpactCollisionAlgorithm__shape_vs_shape_collision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionShape_20const__2c_20btCollisionShape_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = HEAP32[$0 + 12 >> 2];
  if (!$3) {
   $3 = HEAP32[$0 + 4 >> 2];
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, HEAP32[$1 + 8 >> 2], HEAP32[$2 + 8 >> 2]) | 0;
   HEAP32[$0 + 12 >> 2] = $3;
  }
  HEAP32[HEAP32[$0 + 16 >> 2] + 4 >> 2] = $3;
  $4 = HEAP32[$0 + 4 >> 2];
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $1, $2, $3, 1) | 0;
  $4 = HEAP32[$0 + 16 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
  $4 = HEAP32[$0 + 16 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2]);
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $1, $2, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2]);
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] >> 2]]($3) | 0;
  $0 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 60 >> 2]]($0, $3);
 }
 
 function btGImpactCollisionAlgorithm__convex_vs_convex_collision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionShape_20const__2c_20btCollisionShape_20const__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = global$0 - 48 | 0;
  global$0 = $5;
  $6 = HEAP32[$0 + 16 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
  $6 = HEAP32[$0 + 16 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 12 >> 2]]($6, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2]);
  HEAP32[$5 + 28 >> 2] = $3;
  HEAP32[$5 + 44 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$5 + 40 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$5 + 24 >> 2] = $1;
  HEAP32[$5 + 36 >> 2] = HEAP32[$1 + 12 >> 2];
  $1 = HEAP32[$1 + 8 >> 2];
  HEAP32[$5 + 32 >> 2] = $1;
  HEAP32[$5 + 4 >> 2] = $4;
  HEAP32[$5 + 20 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$5 + 16 >> 2] = HEAP32[$0 + 36 >> 2];
  HEAP32[$5 >> 2] = $2;
  HEAP32[$5 + 12 >> 2] = HEAP32[$2 + 12 >> 2];
  $4 = HEAP32[$2 + 8 >> 2];
  HEAP32[$5 + 8 >> 2] = $4;
  $2 = HEAP32[$0 + 8 >> 2];
  if (!$2) {
   $2 = HEAP32[$0 + 12 >> 2];
   if (!$2) {
    $2 = HEAP32[$0 + 4 >> 2];
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, $1, $4) | 0;
    HEAP32[$0 + 12 >> 2] = $2;
   }
   HEAP32[HEAP32[$0 + 16 >> 2] + 4 >> 2] = $2;
   $1 = HEAP32[$0 + 4 >> 2];
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $5 + 24 | 0, $5, $2, 1) | 0;
   HEAP32[$0 + 8 >> 2] = $2;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $5 + 24 | 0, $5, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 16 >> 2]);
  global$0 = $5 + 48 | 0;
 }
 
 function btGImpactCollisionAlgorithm__gimpact_vs_gimpact_find_pairs_28btTransform_20const__2c_20btTransform_20const__2c_20btGImpactShapeInterface_20const__2c_20btGImpactShapeInterface_20const__2c_20btPairSet__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  $5 = global$0 + -64 | 0;
  global$0 = $5;
  label$1 : {
   label$2 : {
    if (!HEAP32[$2 + 72 >> 2]) {
     break label$2
    }
    if (!HEAP32[$3 + 72 >> 2]) {
     break label$2
    }
    btGImpactQuantizedBvh__find_collision_28btGImpactQuantizedBvh_20const__2c_20btTransform_20const__2c_20btGImpactQuantizedBvh_20const__2c_20btTransform_20const__2c_20btPairSet__29($2 + 72 | 0, $0, $3 + 72 | 0, $1, $4);
    break label$1;
   }
   $7 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 88 >> 2]]($2) | 0;
   if (!$7) {
    break label$1
   }
   $15 = $5 + 16 | 0;
   $16 = $5 + 48 | 0;
   while (1) {
    $7 = $7 + -1 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 120 >> 2]]($2, $7, $0, $5 + 32 | 0, $16);
    $9 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 88 >> 2]]($3) | 0;
    if ($9) {
     while (1) {
      FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 120 >> 2]]($3, $7, $1, $5, $15);
      $9 = $9 + -1 | 0;
      label$6 : {
       if (HEAPF32[$5 >> 2] > HEAPF32[$5 + 48 >> 2]) {
        break label$6
       }
       if (HEAPF32[$5 + 16 >> 2] < HEAPF32[$5 + 32 >> 2]) {
        break label$6
       }
       if (HEAPF32[$5 + 4 >> 2] > HEAPF32[$5 + 52 >> 2]) {
        break label$6
       }
       if (HEAPF32[$5 + 20 >> 2] < HEAPF32[$5 + 36 >> 2]) {
        break label$6
       }
       if (HEAPF32[$5 + 8 >> 2] > HEAPF32[$5 + 56 >> 2]) {
        break label$6
       }
       if (HEAPF32[$5 + 24 >> 2] < HEAPF32[$5 + 40 >> 2]) {
        break label$6
       }
       $6 = HEAP32[$4 + 4 >> 2];
       label$7 : {
        if (($6 | 0) != HEAP32[$4 + 8 >> 2]) {
         break label$7
        }
        $10 = $6 ? $6 << 1 : 1;
        if (($6 | 0) >= ($10 | 0)) {
         break label$7
        }
        label$8 : {
         if (!$10) {
          $12 = 0;
          break label$8;
         }
         $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10 << 3);
         $6 = HEAP32[$4 + 4 >> 2];
        }
        $13 = HEAP32[$4 + 12 >> 2];
        label$10 : {
         label$11 : {
          if (($6 | 0) >= 1) {
           $8 = $13;
           $11 = $12;
           $14 = $6;
           while (1) {
            $17 = HEAP32[$8 + 4 >> 2];
            HEAP32[$11 >> 2] = HEAP32[$8 >> 2];
            HEAP32[$11 + 4 >> 2] = $17;
            $8 = $8 + 8 | 0;
            $11 = $11 + 8 | 0;
            $14 = $14 + -1 | 0;
            if ($14) {
             continue
            }
            break;
           };
           break label$11;
          }
          if (!$13) {
           break label$10
          }
         }
         if (HEAPU8[$4 + 16 | 0]) {
          btAlignedFreeInternal_28void__29($13);
          $6 = HEAP32[$4 + 4 >> 2];
         }
         HEAP32[$4 + 12 >> 2] = 0;
        }
        HEAP32[$4 + 12 >> 2] = $12;
        HEAP8[$4 + 16 | 0] = 1;
        HEAP32[$4 + 8 >> 2] = $10;
       }
       HEAP32[$4 + 4 >> 2] = $6 + 1;
       $8 = HEAP32[$4 + 12 >> 2] + ($6 << 3) | 0;
       HEAP32[$8 + 4 >> 2] = $9;
       HEAP32[$8 >> 2] = $7;
      }
      if ($9) {
       continue
      }
      break;
     }
    }
    if ($7) {
     continue
    }
    break;
   };
  }
  global$0 = $5 - -64 | 0;
 }
 
 function btGImpactCollisionAlgorithm__gimpact_vs_shape_find_pairs_28btTransform_20const__2c_20btTransform_20const__2c_20btGImpactShapeInterface_20const__2c_20btCollisionShape_20const__2c_20btAlignedObjectArray_int___29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0);
  $5 = global$0 - 96 | 0;
  global$0 = $5;
  label$1 : {
   if (HEAP32[$2 + 72 >> 2]) {
    $13 = $5 + 20 | 0;
    $6 = $0 + 20 | 0;
    $22 = HEAPF32[$6 >> 2];
    $6 = HEAP32[$6 >> 2];
    HEAP32[$13 >> 2] = $6;
    $14 = $5 + 24 | 0;
    $6 = $0 + 36 | 0;
    $20 = HEAPF32[$6 >> 2];
    HEAP32[$14 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$5 + 12 >> 2] = 0;
    $23 = HEAPF32[$0 + 4 >> 2];
    HEAP32[$5 + 16 >> 2] = HEAP32[$0 + 4 >> 2];
    $24 = HEAPF32[$0 + 32 >> 2];
    HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 32 >> 2];
    $25 = HEAPF32[$0 + 16 >> 2];
    HEAP32[$5 + 4 >> 2] = HEAP32[$0 + 16 >> 2];
    $26 = HEAPF32[$0 >> 2];
    HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
    $12 = HEAPF32[$0 + 52 >> 2];
    $15 = HEAPF32[$0 + 56 >> 2];
    $6 = $0 + 24 | 0;
    $16 = HEAPF32[$6 >> 2];
    $7 = HEAP32[$6 >> 2];
    $10 = HEAPF32[$0 + 8 >> 2];
    $21 = HEAP32[$0 + 8 >> 2];
    $8 = HEAPF32[$0 + 48 >> 2];
    $17 = $5 + 40 | 0;
    $0 = $0 + 40 | 0;
    $9 = HEAPF32[$0 >> 2];
    HEAP32[$17 >> 2] = HEAP32[$0 >> 2];
    $0 = $5 + 36 | 0;
    HEAP32[$0 >> 2] = $7;
    $7 = $5 + 28 | 0;
    HEAP32[$7 >> 2] = 0;
    $6 = $5 + 44 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$5 + 60 >> 2] = 0;
    $11 = $10;
    $10 = Math_fround(-$8);
    $8 = $16;
    $27 = Math_fround(Math_fround(Math_fround($11 * $10) - Math_fround($12 * $8)) - Math_fround($15 * $9));
    $18 = HEAPF32[$1 + 48 >> 2];
    $16 = Math_fround($18 * $11);
    $11 = HEAPF32[$1 + 52 >> 2];
    $19 = HEAPF32[$1 + 56 >> 2];
    HEAPF32[$5 + 56 >> 2] = $27 + Math_fround(Math_fround($16 + Math_fround($11 * $8)) + Math_fround($19 * $9));
    $8 = $23;
    $9 = $22;
    HEAPF32[$5 + 52 >> 2] = Math_fround(Math_fround(Math_fround($8 * $10) - Math_fround($12 * $9)) - Math_fround($15 * $20)) + Math_fround(Math_fround(Math_fround($18 * $8) + Math_fround($11 * $9)) + Math_fround($19 * $20));
    HEAP32[$5 + 32 >> 2] = $21;
    $8 = $26;
    $9 = Math_fround($8 * $10);
    $10 = $25;
    $9 = Math_fround($9 - Math_fround($12 * $10));
    $12 = $24;
    HEAPF32[$5 + 48 >> 2] = Math_fround($9 - Math_fround($15 * $12)) + Math_fround(Math_fround(Math_fround($18 * $8) + Math_fround($11 * $10)) + Math_fround($19 * $12));
    $15 = HEAPF32[$1 + 36 >> 2];
    $18 = HEAPF32[$1 + 20 >> 2];
    $11 = HEAPF32[$1 + 40 >> 2];
    $19 = HEAPF32[$1 + 24 >> 2];
    $9 = HEAPF32[$1 + 32 >> 2];
    $20 = HEAPF32[$1 >> 2];
    $28 = HEAPF32[$1 + 16 >> 2];
    $29 = HEAPF32[$14 >> 2];
    $27 = HEAPF32[$13 >> 2];
    $22 = HEAPF32[$1 + 4 >> 2];
    $23 = HEAPF32[$17 >> 2];
    $24 = HEAPF32[$1 + 8 >> 2];
    $25 = HEAPF32[$0 >> 2];
    $26 = HEAPF32[$5 + 16 >> 2];
    $16 = HEAPF32[$5 + 32 >> 2];
    HEAP32[$6 >> 2] = 0;
    HEAPF32[$17 >> 2] = Math_fround(Math_fround($24 * $16) + Math_fround($19 * $25)) + Math_fround($11 * $23);
    HEAPF32[$0 >> 2] = Math_fround(Math_fround($22 * $16) + Math_fround($18 * $25)) + Math_fround($15 * $23);
    HEAP32[$7 >> 2] = 0;
    HEAPF32[$14 >> 2] = Math_fround(Math_fround($24 * $26) + Math_fround($19 * $27)) + Math_fround($11 * $29);
    HEAPF32[$13 >> 2] = Math_fround(Math_fround($22 * $26) + Math_fround($18 * $27)) + Math_fround($15 * $29);
    HEAPF32[$5 + 32 >> 2] = Math_fround(Math_fround($20 * $16) + Math_fround($28 * $25)) + Math_fround($9 * $23);
    HEAPF32[$5 + 16 >> 2] = Math_fround(Math_fround($20 * $26) + Math_fround($28 * $27)) + Math_fround($9 * $29);
    HEAP32[$5 + 12 >> 2] = 0;
    HEAPF32[$5 + 8 >> 2] = Math_fround(Math_fround($24 * $8) + Math_fround($19 * $10)) + Math_fround($11 * $12);
    HEAPF32[$5 + 4 >> 2] = Math_fround(Math_fround($22 * $8) + Math_fround($18 * $10)) + Math_fround($15 * $12);
    HEAPF32[$5 >> 2] = Math_fround(Math_fround($20 * $8) + Math_fround($28 * $10)) + Math_fround($9 * $12);
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $5, $5 - -64 | 0, $5 + 80 | 0);
    btGImpactQuantizedBvh__boxQuery_28btAABB_20const__2c_20btAlignedObjectArray_int___29_20const($2 + 72 | 0, $5 - -64 | 0, $4);
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $1, $5 - -64 | 0, $5 + 80 | 0);
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 88 >> 2]]($2) | 0;
   if (!$1) {
    break label$1
   }
   $3 = $5 + 16 | 0;
   while (1) {
    $1 = $1 + -1 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 120 >> 2]]($2, $1, $0, $5, $3);
    label$4 : {
     if (HEAPF32[$5 + 64 >> 2] > HEAPF32[$5 + 16 >> 2]) {
      break label$4
     }
     if (HEAPF32[$5 + 80 >> 2] < HEAPF32[$5 >> 2]) {
      break label$4
     }
     if (HEAPF32[$5 + 68 >> 2] > HEAPF32[$5 + 20 >> 2]) {
      break label$4
     }
     if (HEAPF32[$5 + 84 >> 2] < HEAPF32[$5 + 4 >> 2]) {
      break label$4
     }
     if (HEAPF32[$5 + 72 >> 2] > HEAPF32[$5 + 24 >> 2]) {
      break label$4
     }
     if (HEAPF32[$5 + 88 >> 2] < HEAPF32[$5 + 8 >> 2]) {
      break label$4
     }
     $7 = HEAP32[$4 + 4 >> 2];
     label$5 : {
      if (($7 | 0) != HEAP32[$4 + 8 >> 2]) {
       break label$5
      }
      $21 = $7 ? $7 << 1 : 1;
      if (($7 | 0) >= ($21 | 0)) {
       break label$5
      }
      label$6 : {
       if (!$21) {
        $17 = 0;
        break label$6;
       }
       $17 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($21 << 2);
       $7 = HEAP32[$4 + 4 >> 2];
      }
      $6 = HEAP32[$4 + 12 >> 2];
      label$8 : {
       label$9 : {
        if (($7 | 0) >= 1) {
         $13 = $17;
         $14 = $6;
         while (1) {
          HEAP32[$13 >> 2] = HEAP32[$14 >> 2];
          $13 = $13 + 4 | 0;
          $14 = $14 + 4 | 0;
          $7 = $7 + -1 | 0;
          if ($7) {
           continue
          }
          break;
         };
         break label$9;
        }
        if (!$6) {
         break label$8
        }
       }
       if (HEAPU8[$4 + 16 | 0]) {
        btAlignedFreeInternal_28void__29($6)
       }
       HEAP32[$4 + 12 >> 2] = 0;
       $7 = HEAP32[$4 + 4 >> 2];
      }
      HEAP32[$4 + 12 >> 2] = $17;
      HEAP8[$4 + 16 | 0] = 1;
      HEAP32[$4 + 8 >> 2] = $21;
     }
     HEAP32[HEAP32[$4 + 12 >> 2] + ($7 << 2) >> 2] = $1;
     HEAP32[$4 + 4 >> 2] = HEAP32[$4 + 4 >> 2] + 1;
    }
    if ($1) {
     continue
    }
    break;
   };
  }
  global$0 = $5 + 96 | 0;
 }
 
 function btGImpactCollisionAlgorithm__collide_sat_triangles_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactMeshShapePart_20const__2c_20btGImpactMeshShapePart_20const__2c_20int_20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = 0, $52 = Math_fround(0), $53 = Math_fround(0), $54 = Math_fround(0), $55 = Math_fround(0), $56 = Math_fround(0), $57 = Math_fround(0);
  $7 = global$0 - 432 | 0;
  global$0 = $7;
  $11 = HEAP32[$2 + 12 >> 2];
  $27 = HEAPF32[$11 + 56 >> 2];
  $28 = HEAPF32[$11 + 52 >> 2];
  $29 = HEAPF32[$11 + 40 >> 2];
  $30 = HEAPF32[$11 + 36 >> 2];
  $31 = HEAPF32[$11 + 24 >> 2];
  $32 = HEAPF32[$11 + 20 >> 2];
  $12 = HEAP32[$1 + 12 >> 2];
  $33 = HEAPF32[$12 + 56 >> 2];
  $34 = HEAPF32[$12 + 52 >> 2];
  $35 = HEAPF32[$12 + 40 >> 2];
  $36 = HEAPF32[$12 + 36 >> 2];
  $37 = HEAPF32[$12 + 24 >> 2];
  $38 = HEAPF32[$12 + 20 >> 2];
  $39 = HEAPF32[$11 + 48 >> 2];
  $40 = HEAPF32[$11 + 32 >> 2];
  $41 = HEAPF32[$11 + 16 >> 2];
  $42 = HEAPF32[$11 + 8 >> 2];
  $43 = HEAPF32[$11 + 4 >> 2];
  $44 = HEAPF32[$11 >> 2];
  $45 = HEAPF32[$12 + 48 >> 2];
  $46 = HEAPF32[$12 + 32 >> 2];
  $47 = HEAPF32[$12 + 16 >> 2];
  $48 = HEAPF32[$12 + 8 >> 2];
  $49 = HEAPF32[$12 + 4 >> 2];
  $50 = HEAPF32[$12 >> 2];
  HEAP32[$7 + 424 >> 2] = 1008981770;
  HEAP32[$7 + 352 >> 2] = 1008981770;
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 112 >> 2]]($3);
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 112 >> 2]]($4);
  if ($6) {
   $51 = $7 + 16 | 0;
   while (1) {
    $11 = HEAP32[$5 >> 2];
    HEAP32[$0 + 24 >> 2] = $11;
    HEAP32[$0 + 32 >> 2] = HEAP32[$5 + 4 >> 2];
    $12 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 84 >> 2]]($3) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$12 >> 2] + 20 >> 2]]($12, $11, $7 + 360 | 0);
    $11 = HEAP32[$0 + 32 >> 2];
    $12 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 84 >> 2]]($4) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$12 >> 2] + 20 >> 2]]($12, $11, $7 + 288 | 0);
    HEAP32[$7 + 372 >> 2] = 0;
    HEAP32[$7 + 388 >> 2] = 0;
    HEAP32[$7 + 404 >> 2] = 0;
    $14 = HEAPF32[$7 + 376 >> 2];
    $16 = HEAPF32[$7 + 380 >> 2];
    $8 = HEAPF32[$7 + 384 >> 2];
    $23 = Math_fround($34 + Math_fround(Math_fround(Math_fround($47 * $14) + Math_fround($38 * $16)) + Math_fround($37 * $8)));
    HEAPF32[$7 + 380 >> 2] = $23;
    $9 = HEAPF32[$7 + 360 >> 2];
    $19 = HEAPF32[$7 + 364 >> 2];
    $20 = HEAPF32[$7 + 368 >> 2];
    $13 = Math_fround($34 + Math_fround(Math_fround(Math_fround($47 * $9) + Math_fround($38 * $19)) + Math_fround($37 * $20)));
    HEAPF32[$7 + 364 >> 2] = $13;
    $10 = HEAPF32[$7 + 392 >> 2];
    $15 = HEAPF32[$7 + 396 >> 2];
    $21 = HEAPF32[$7 + 400 >> 2];
    $24 = Math_fround($34 + Math_fround(Math_fround(Math_fround($47 * $10) + Math_fround($38 * $15)) + Math_fround($37 * $21)));
    HEAPF32[$7 + 396 >> 2] = $24;
    $25 = Math_fround($33 + Math_fround(Math_fround(Math_fround($46 * $14) + Math_fround($36 * $16)) + Math_fround($35 * $8)));
    HEAPF32[$7 + 384 >> 2] = $25;
    $22 = Math_fround($45 + Math_fround(Math_fround(Math_fround($50 * $10) + Math_fround($49 * $15)) + Math_fround($48 * $21)));
    HEAPF32[$7 + 392 >> 2] = $22;
    $18 = Math_fround($45 + Math_fround(Math_fround(Math_fround($50 * $9) + Math_fround($49 * $19)) + Math_fround($48 * $20)));
    HEAPF32[$7 + 360 >> 2] = $18;
    $52 = Math_fround($45 + Math_fround(Math_fround(Math_fround($50 * $14) + Math_fround($49 * $16)) + Math_fround($48 * $8)));
    HEAPF32[$7 + 376 >> 2] = $52;
    $14 = Math_fround($33 + Math_fround(Math_fround(Math_fround($46 * $9) + Math_fround($36 * $19)) + Math_fround($35 * $20)));
    HEAPF32[$7 + 368 >> 2] = $14;
    $15 = Math_fround($33 + Math_fround(Math_fround(Math_fround($46 * $10) + Math_fround($36 * $15)) + Math_fround($35 * $21)));
    HEAPF32[$7 + 400 >> 2] = $15;
    $16 = HEAPF32[$7 + 296 >> 2];
    $8 = HEAPF32[$7 + 288 >> 2];
    $9 = HEAPF32[$7 + 292 >> 2];
    HEAP32[$7 + 300 >> 2] = 0;
    $19 = Math_fround($28 + Math_fround(Math_fround(Math_fround($41 * $8) + Math_fround($32 * $9)) + Math_fround($31 * $16)));
    HEAPF32[$7 + 292 >> 2] = $19;
    $20 = Math_fround($27 + Math_fround(Math_fround(Math_fround($40 * $8) + Math_fround($30 * $9)) + Math_fround($29 * $16)));
    HEAPF32[$7 + 296 >> 2] = $20;
    $16 = Math_fround($39 + Math_fround(Math_fround(Math_fround($44 * $8) + Math_fround($43 * $9)) + Math_fround($42 * $16)));
    HEAPF32[$7 + 288 >> 2] = $16;
    $8 = HEAPF32[$7 + 312 >> 2];
    $9 = HEAPF32[$7 + 304 >> 2];
    $10 = HEAPF32[$7 + 308 >> 2];
    HEAP32[$7 + 316 >> 2] = 0;
    $21 = Math_fround($28 + Math_fround(Math_fround(Math_fround($41 * $9) + Math_fround($32 * $10)) + Math_fround($31 * $8)));
    HEAPF32[$7 + 308 >> 2] = $21;
    $53 = Math_fround($27 + Math_fround(Math_fround(Math_fround($40 * $9) + Math_fround($30 * $10)) + Math_fround($29 * $8)));
    HEAPF32[$7 + 312 >> 2] = $53;
    $54 = Math_fround($39 + Math_fround(Math_fround(Math_fround($44 * $9) + Math_fround($43 * $10)) + Math_fround($42 * $8)));
    HEAPF32[$7 + 304 >> 2] = $54;
    $8 = HEAPF32[$7 + 328 >> 2];
    $9 = HEAPF32[$7 + 320 >> 2];
    $10 = HEAPF32[$7 + 324 >> 2];
    HEAP32[$7 + 332 >> 2] = 0;
    $55 = Math_fround($28 + Math_fround(Math_fround(Math_fround($41 * $9) + Math_fround($32 * $10)) + Math_fround($31 * $8)));
    HEAPF32[$7 + 324 >> 2] = $55;
    $56 = Math_fround($39 + Math_fround(Math_fround(Math_fround($44 * $9) + Math_fround($43 * $10)) + Math_fround($42 * $8)));
    HEAPF32[$7 + 320 >> 2] = $56;
    $57 = Math_fround($27 + Math_fround(Math_fround(Math_fround($40 * $9) + Math_fround($30 * $10)) + Math_fround($29 * $8)));
    HEAPF32[$7 + 328 >> 2] = $57;
    $10 = Math_fround($25 - $14);
    $9 = Math_fround($22 - $18);
    $25 = Math_fround($52 - $18);
    $15 = Math_fround($15 - $14);
    $8 = Math_fround(Math_fround($10 * $9) - Math_fround($25 * $15));
    $22 = $8;
    $24 = Math_fround($24 - $13);
    $23 = Math_fround($23 - $13);
    $9 = Math_fround(Math_fround($25 * $24) - Math_fround($23 * $9));
    $10 = Math_fround(Math_fround($23 * $15) - Math_fround($10 * $24));
    $8 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($9 * $9) + Math_fround(Math_fround($10 * $10) + Math_fround($8 * $8))))));
    $15 = Math_fround($22 * $8);
    HEAPF32[$7 + 412 >> 2] = $15;
    $10 = Math_fround($10 * $8);
    HEAPF32[$7 + 408 >> 2] = $10;
    $8 = Math_fround($9 * $8);
    HEAPF32[$7 + 416 >> 2] = $8;
    HEAPF32[$7 + 420 >> 2] = Math_fround($14 * $8) + Math_fround(Math_fround($18 * $10) + Math_fround($13 * $15));
    $14 = Math_fround($53 - $20);
    $18 = Math_fround($56 - $16);
    $8 = Math_fround($54 - $16);
    $9 = Math_fround($57 - $20);
    $13 = Math_fround(Math_fround($14 * $18) - Math_fround($8 * $9));
    $22 = $13;
    $10 = Math_fround($55 - $19);
    $15 = Math_fround($8 * $10);
    $8 = Math_fround($21 - $19);
    $18 = Math_fround($15 - Math_fround($8 * $18));
    $14 = Math_fround(Math_fround($8 * $9) - Math_fround($14 * $10));
    $13 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($18 * $18) + Math_fround(Math_fround($14 * $14) + Math_fround($13 * $13))))));
    $8 = Math_fround($22 * $13);
    HEAPF32[$7 + 340 >> 2] = $8;
    $14 = Math_fround($14 * $13);
    HEAPF32[$7 + 336 >> 2] = $14;
    $13 = Math_fround($18 * $13);
    HEAPF32[$7 + 344 >> 2] = $13;
    HEAPF32[$7 + 348 >> 2] = Math_fround($20 * $13) + Math_fround(Math_fround($16 * $14) + Math_fround($19 * $8));
    $6 = $6 + -1 | 0;
    label$3 : {
     if (!btPrimitiveTriangle__overlap_test_conservative_28btPrimitiveTriangle_20const__29($7 + 360 | 0, $7 + 288 | 0)) {
      break label$3
     }
     if (!btPrimitiveTriangle__find_triangle_collision_clip_method_28btPrimitiveTriangle__2c_20GIM_TRIANGLE_CONTACT__29($7 + 360 | 0, $7 + 288 | 0, $7 + 8 | 0)) {
      break label$3
     }
     $11 = HEAP32[$7 + 12 >> 2];
     if (!$11) {
      break label$3
     }
     $12 = ($11 << 4) + $51 | 0;
     while (1) {
      $13 = HEAPF32[$7 + 8 >> 2];
      $17 = HEAP32[$0 + 16 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$17 >> 2] + 8 >> 2]]($17, HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
      $17 = HEAP32[$0 + 16 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$17 >> 2] + 12 >> 2]]($17, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2]);
      $11 = $11 + -1 | 0;
      $13 = Math_fround(-$13);
      $26 = HEAP32[$0 + 12 >> 2];
      if (!$26) {
       $17 = HEAP32[$0 + 4 >> 2];
       $26 = FUNCTION_TABLE[HEAP32[HEAP32[$17 >> 2] + 12 >> 2]]($17, HEAP32[$1 + 8 >> 2], HEAP32[$2 + 8 >> 2]) | 0;
       HEAP32[$0 + 12 >> 2] = $26;
      }
      $17 = HEAP32[$0 + 16 >> 2];
      HEAP32[$17 + 4 >> 2] = $26;
      FUNCTION_TABLE[HEAP32[HEAP32[$17 >> 2] + 16 >> 2]]($17, $51, $12, $13);
      $12 = $12 + -16 | 0;
      if ($11) {
       continue
      }
      break;
     };
    }
    $5 = $5 + 8 | 0;
    if ($6) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 116 >> 2]]($3);
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 116 >> 2]]($4);
  global$0 = $7 + 432 | 0;
 }
 
 function btGImpactCollisionAlgorithm__gimpact_vs_gimpact_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btGImpactShapeInterface_20const__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = global$0 - 976 | 0;
  global$0 = $5;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 80 >> 2]]($3) | 0) == 2) {
    $9 = HEAP32[$3 + 156 >> 2];
    $7 = $9 + -1 | 0;
    HEAP32[$0 + 28 >> 2] = $7;
    if (!$9) {
     break label$1
    }
    while (1) {
     btGImpactCollisionAlgorithm__gimpact_vs_gimpact_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btGImpactShapeInterface_20const__29($0, $1, $2, HEAP32[HEAP32[$3 + 164 >> 2] + ($7 << 2) >> 2], $4);
     $9 = HEAP32[$0 + 28 >> 2];
     $7 = $9 + -1 | 0;
     HEAP32[$0 + 28 >> 2] = $7;
     if ($9) {
      continue
     }
     break;
    };
    break label$1;
   }
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 80 >> 2]]($4) | 0) == 2) {
    $9 = HEAP32[$4 + 156 >> 2];
    $7 = $9 + -1 | 0;
    HEAP32[$0 + 36 >> 2] = $7;
    if (!$9) {
     break label$1
    }
    while (1) {
     btGImpactCollisionAlgorithm__gimpact_vs_gimpact_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btGImpactShapeInterface_20const__29($0, $1, $2, $3, HEAP32[HEAP32[$4 + 164 >> 2] + ($7 << 2) >> 2]);
     $9 = HEAP32[$0 + 36 >> 2];
     $7 = $9 + -1 | 0;
     HEAP32[$0 + 36 >> 2] = $7;
     if ($9) {
      continue
     }
     break;
    };
    break label$1;
   }
   $7 = HEAP32[$1 + 12 >> 2];
   $6 = $7 + 8 | 0;
   $12 = HEAP32[$6 >> 2];
   $10 = HEAP32[$6 + 4 >> 2];
   $22 = HEAP32[$7 >> 2];
   $23 = HEAP32[$7 + 4 >> 2];
   $6 = $7 + 24 | 0;
   $11 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $8 = $5 + 936 | 0;
   HEAP32[$8 >> 2] = $11;
   HEAP32[$8 + 4 >> 2] = $6;
   $8 = $5 + 920 | 0;
   HEAP32[$8 >> 2] = $12;
   HEAP32[$8 + 4 >> 2] = $10;
   $12 = HEAP32[$7 + 16 >> 2];
   $10 = HEAP32[$7 + 20 >> 2];
   $6 = $7 + 40 | 0;
   $11 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $8 = $5 + 952 | 0;
   HEAP32[$8 >> 2] = $11;
   HEAP32[$8 + 4 >> 2] = $6;
   $37 = HEAP32[$7 + 32 >> 2];
   $11 = HEAP32[$7 + 36 >> 2];
   $6 = $7 + 56 | 0;
   $36 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $8 = $5 + 968 | 0;
   HEAP32[$8 >> 2] = $36;
   HEAP32[$8 + 4 >> 2] = $6;
   HEAP32[$5 + 912 >> 2] = $22;
   HEAP32[$5 + 916 >> 2] = $23;
   HEAP32[$5 + 928 >> 2] = $12;
   HEAP32[$5 + 932 >> 2] = $10;
   HEAP32[$5 + 944 >> 2] = $37;
   HEAP32[$5 + 948 >> 2] = $11;
   $8 = HEAP32[$7 + 52 >> 2];
   HEAP32[$5 + 960 >> 2] = HEAP32[$7 + 48 >> 2];
   HEAP32[$5 + 964 >> 2] = $8;
   $7 = HEAP32[$2 + 12 >> 2];
   $6 = $7 + 8 | 0;
   $12 = HEAP32[$6 >> 2];
   $10 = HEAP32[$6 + 4 >> 2];
   $22 = HEAP32[$7 >> 2];
   $23 = HEAP32[$7 + 4 >> 2];
   $6 = $7 + 24 | 0;
   $11 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $8 = $5 + 872 | 0;
   HEAP32[$8 >> 2] = $11;
   HEAP32[$8 + 4 >> 2] = $6;
   $8 = $5 + 856 | 0;
   HEAP32[$8 >> 2] = $12;
   HEAP32[$8 + 4 >> 2] = $10;
   $12 = HEAP32[$7 + 16 >> 2];
   $10 = HEAP32[$7 + 20 >> 2];
   $6 = $7 + 40 | 0;
   $11 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $8 = $5 + 888 | 0;
   HEAP32[$8 >> 2] = $11;
   HEAP32[$8 + 4 >> 2] = $6;
   $37 = HEAP32[$7 + 32 >> 2];
   $11 = HEAP32[$7 + 36 >> 2];
   $6 = $7 + 56 | 0;
   $36 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $8 = $5 + 904 | 0;
   HEAP32[$8 >> 2] = $36;
   HEAP32[$8 + 4 >> 2] = $6;
   HEAP32[$5 + 848 >> 2] = $22;
   HEAP32[$5 + 852 >> 2] = $23;
   HEAP32[$5 + 864 >> 2] = $12;
   HEAP32[$5 + 868 >> 2] = $10;
   HEAP32[$5 + 880 >> 2] = $37;
   HEAP32[$5 + 884 >> 2] = $11;
   $8 = HEAP32[$7 + 52 >> 2];
   HEAP32[$5 + 896 >> 2] = HEAP32[$7 + 48 >> 2];
   HEAP32[$5 + 900 >> 2] = $8;
   HEAP32[$5 + 828 >> 2] = 0;
   (wasm2js_i32$0 = $5, wasm2js_i32$1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(256)), HEAP32[wasm2js_i32$0 + 836 >> 2] = wasm2js_i32$1;
   HEAP8[$5 + 840 | 0] = 1;
   HEAP32[$5 + 832 >> 2] = 32;
   btGImpactCollisionAlgorithm__gimpact_vs_gimpact_find_pairs_28btTransform_20const__2c_20btTransform_20const__2c_20btGImpactShapeInterface_20const__2c_20btGImpactShapeInterface_20const__2c_20btPairSet__29($5 + 912 | 0, $5 + 848 | 0, $3, $4, $5 + 824 | 0);
   label$6 : {
    if (!HEAP32[$5 + 828 >> 2]) {
     break label$6
    }
    label$7 : {
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 80 >> 2]]($3) | 0) != 1) {
      break label$7
     }
     if ((FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 80 >> 2]]($4) | 0) != 1) {
      break label$7
     }
     btGImpactCollisionAlgorithm__collide_sat_triangles_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactMeshShapePart_20const__2c_20btGImpactMeshShapePart_20const__2c_20int_20const__2c_20int_29($0, $1, $2, $3, $4, HEAP32[$5 + 836 >> 2], HEAP32[$5 + 828 >> 2]);
     break label$6;
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 112 >> 2]]($3);
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 112 >> 2]]($4);
    btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($5 + 520 | 4);
    $6 = $5 + 584 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    HEAP32[$5 + 528 >> 2] = 1;
    $6 = $5 + 592 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    $6 = $5 + 600 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    $6 = $5 + 608 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    $6 = $5 + 616 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    $6 = $5 + 624 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    HEAP32[$5 + 524 >> 2] = 8128;
    btBU_Simplex1to4__btBU_Simplex1to4_28_29($5 + 632 | 0);
    HEAP32[$5 + 728 >> 2] = 4;
    HEAP32[$5 + 812 >> 2] = 8708;
    HEAP32[$5 + 804 >> 2] = 8628;
    HEAP32[$5 + 796 >> 2] = 8556;
    HEAP32[$5 + 632 >> 2] = 8364;
    HEAP32[$5 + 520 >> 2] = $3;
    $7 = $5 + 804 | 0;
    label$8 : {
     if (FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 96 >> 2]]($3)) {
      break label$8
     }
     $7 = HEAP32[$5 + 520 >> 2];
     $7 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 100 >> 2]]($7) | 0 ? $5 + 812 | 0 : $5 + 796 | 0;
    }
    HEAP32[$7 + 4 >> 2] = $5 + 520;
    HEAP32[$5 + 820 >> 2] = $7;
    btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($5 + 216 | 4);
    $6 = $5 + 280 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    HEAP32[$5 + 224 >> 2] = 1;
    $6 = $5 + 288 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    $6 = $5 + 296 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    $6 = $5 + 304 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    $6 = $5 + 312 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    $6 = $5 + 320 | 0;
    HEAP32[$6 >> 2] = 0;
    HEAP32[$6 + 4 >> 2] = 0;
    HEAP32[$5 + 220 >> 2] = 8128;
    btBU_Simplex1to4__btBU_Simplex1to4_28_29($5 + 328 | 0);
    HEAP32[$5 + 424 >> 2] = 4;
    HEAP32[$5 + 508 >> 2] = 8708;
    HEAP32[$5 + 500 >> 2] = 8628;
    HEAP32[$5 + 492 >> 2] = 8556;
    HEAP32[$5 + 328 >> 2] = 8364;
    HEAP32[$5 + 216 >> 2] = $4;
    $7 = $5 + 500 | 0;
    label$10 : {
     if (FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 96 >> 2]]($4)) {
      break label$10
     }
     $7 = HEAP32[$5 + 216 >> 2];
     $7 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 100 >> 2]]($7) | 0 ? $5 + 508 | 0 : $5 + 492 | 0;
    }
    HEAP32[$7 + 4 >> 2] = $5 + 216;
    HEAP32[$5 + 516 >> 2] = $7;
    $49 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 92 >> 2]]($3) | 0;
    $50 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 92 >> 2]]($4) | 0;
    $9 = HEAP32[$5 + 828 >> 2];
    if ($9) {
     $39 = ($9 << 3) + -4 | 0;
     $36 = $5 + 136 | 0;
     $43 = $5 + 120 | 0;
     $44 = $5 + 104 | 0;
     $45 = $5 + 200 | 0;
     $46 = $5 + 184 | 0;
     $47 = $5 + 168 | 0;
     while (1) {
      $7 = $39 + HEAP32[$5 + 836 >> 2] | 0;
      HEAP32[$0 + 32 >> 2] = HEAP32[$7 >> 2];
      $7 = HEAP32[$7 + -4 >> 2];
      HEAP32[$0 + 24 >> 2] = $7;
      $38 = HEAP32[$5 + 820 >> 2];
      $38 = FUNCTION_TABLE[HEAP32[HEAP32[$38 >> 2] >> 2]]($38, $7) | 0;
      $7 = HEAP32[$5 + 516 >> 2];
      $48 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] >> 2]]($7, HEAP32[$0 + 32 >> 2]) | 0;
      $7 = HEAP32[$1 + 12 >> 2];
      $6 = $7 + 8 | 0;
      $12 = HEAP32[$6 >> 2];
      $10 = HEAP32[$6 + 4 >> 2];
      $22 = HEAP32[$7 >> 2];
      $23 = HEAP32[$7 + 4 >> 2];
      $6 = $7 + 24 | 0;
      $11 = HEAP32[$6 >> 2];
      $6 = HEAP32[$6 + 4 >> 2];
      $8 = $47 + 8 | 0;
      HEAP32[$8 >> 2] = $11;
      HEAP32[$8 + 4 >> 2] = $6;
      $8 = $5 + 160 | 0;
      HEAP32[$8 >> 2] = $12;
      HEAP32[$8 + 4 >> 2] = $10;
      $12 = HEAP32[$7 + 16 >> 2];
      $10 = HEAP32[$7 + 20 >> 2];
      $6 = HEAP32[$7 + 36 >> 2];
      $8 = $46;
      HEAP32[$8 >> 2] = HEAP32[$7 + 32 >> 2];
      HEAP32[$8 + 4 >> 2] = $6;
      $6 = $7 + 40 | 0;
      $37 = HEAP32[$6 >> 2];
      $11 = HEAP32[$6 + 4 >> 2];
      $6 = $7 + 56 | 0;
      $51 = HEAP32[$6 >> 2];
      $6 = HEAP32[$6 + 4 >> 2];
      $8 = $45 + 8 | 0;
      HEAP32[$8 >> 2] = $51;
      HEAP32[$8 + 4 >> 2] = $6;
      $8 = HEAP32[$7 + 52 >> 2];
      $6 = $45;
      HEAP32[$6 >> 2] = HEAP32[$7 + 48 >> 2];
      HEAP32[$6 + 4 >> 2] = $8;
      $6 = $46 + 8 | 0;
      HEAP32[$6 >> 2] = $37;
      HEAP32[$6 + 4 >> 2] = $11;
      $6 = $47;
      HEAP32[$6 >> 2] = $12;
      HEAP32[$6 + 4 >> 2] = $10;
      HEAP32[$5 + 152 >> 2] = $22;
      HEAP32[$5 + 156 >> 2] = $23;
      $7 = HEAP32[$2 + 12 >> 2];
      $6 = $7 + 8 | 0;
      $12 = HEAP32[$6 >> 2];
      $10 = HEAP32[$6 + 4 >> 2];
      $22 = HEAP32[$7 >> 2];
      $23 = HEAP32[$7 + 4 >> 2];
      $6 = $7 + 24 | 0;
      $11 = HEAP32[$6 >> 2];
      $6 = HEAP32[$6 + 4 >> 2];
      $8 = $44 + 8 | 0;
      HEAP32[$8 >> 2] = $11;
      HEAP32[$8 + 4 >> 2] = $6;
      $8 = HEAP32[$7 + 20 >> 2];
      $6 = $44;
      HEAP32[$6 >> 2] = HEAP32[$7 + 16 >> 2];
      HEAP32[$6 + 4 >> 2] = $8;
      $6 = $5 + 96 | 0;
      HEAP32[$6 >> 2] = $12;
      HEAP32[$6 + 4 >> 2] = $10;
      $6 = $7 + 40 | 0;
      $10 = HEAP32[$6 >> 2];
      $6 = HEAP32[$6 + 4 >> 2];
      $8 = $43 + 8 | 0;
      HEAP32[$8 >> 2] = $10;
      HEAP32[$8 + 4 >> 2] = $6;
      $8 = HEAP32[$7 + 36 >> 2];
      $6 = $43;
      HEAP32[$6 >> 2] = HEAP32[$7 + 32 >> 2];
      HEAP32[$6 + 4 >> 2] = $8;
      $6 = $7 + 56 | 0;
      $10 = HEAP32[$6 >> 2];
      $6 = HEAP32[$6 + 4 >> 2];
      $8 = $36 + 8 | 0;
      HEAP32[$8 >> 2] = $10;
      HEAP32[$8 + 4 >> 2] = $6;
      $8 = HEAP32[$7 + 52 >> 2];
      $6 = $36;
      HEAP32[$6 >> 2] = HEAP32[$7 + 48 >> 2];
      HEAP32[$6 + 4 >> 2] = $8;
      HEAP32[$5 + 88 >> 2] = $22;
      HEAP32[$5 + 92 >> 2] = $23;
      if ($49) {
       FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 132 >> 2]]($5 + 24 | 0, $3, HEAP32[$0 + 24 >> 2]);
       $40 = HEAPF32[$5 + 960 >> 2];
       $41 = HEAPF32[$5 + 964 >> 2];
       $42 = HEAPF32[$5 + 968 >> 2];
       $24 = HEAPF32[$5 + 80 >> 2];
       $25 = HEAPF32[$5 + 72 >> 2];
       $26 = HEAPF32[$5 + 76 >> 2];
       $13 = HEAPF32[$5 + 920 >> 2];
       $14 = HEAPF32[$5 + 912 >> 2];
       $15 = HEAPF32[$5 + 916 >> 2];
       $16 = HEAPF32[$5 + 936 >> 2];
       $17 = HEAPF32[$5 + 928 >> 2];
       $18 = HEAPF32[$5 + 932 >> 2];
       $27 = HEAPF32[$5 + 56 >> 2];
       $28 = HEAPF32[$5 + 24 >> 2];
       $29 = HEAPF32[$5 + 40 >> 2];
       $30 = HEAPF32[$5 + 60 >> 2];
       $31 = HEAPF32[$5 + 28 >> 2];
       $32 = HEAPF32[$5 + 44 >> 2];
       $19 = HEAPF32[$5 + 952 >> 2];
       $33 = HEAPF32[$5 + 64 >> 2];
       $20 = HEAPF32[$5 + 944 >> 2];
       $34 = HEAPF32[$5 + 32 >> 2];
       $21 = HEAPF32[$5 + 948 >> 2];
       $35 = HEAPF32[$5 + 48 >> 2];
       HEAP32[$5 + 212 >> 2] = 0;
       HEAP32[$5 + 196 >> 2] = 0;
       HEAP32[$5 + 180 >> 2] = 0;
       HEAP32[$5 + 164 >> 2] = 0;
       HEAPF32[$5 + 192 >> 2] = Math_fround(Math_fround($34 * $20) + Math_fround($35 * $21)) + Math_fround($33 * $19);
       HEAPF32[$5 + 188 >> 2] = Math_fround(Math_fround($31 * $20) + Math_fround($32 * $21)) + Math_fround($30 * $19);
       HEAPF32[$5 + 184 >> 2] = Math_fround(Math_fround($28 * $20) + Math_fround($29 * $21)) + Math_fround($27 * $19);
       HEAPF32[$5 + 176 >> 2] = Math_fround(Math_fround($34 * $17) + Math_fround($35 * $18)) + Math_fround($33 * $16);
       HEAPF32[$5 + 172 >> 2] = Math_fround(Math_fround($31 * $17) + Math_fround($32 * $18)) + Math_fround($30 * $16);
       HEAPF32[$5 + 168 >> 2] = Math_fround(Math_fround($28 * $17) + Math_fround($29 * $18)) + Math_fround($27 * $16);
       HEAPF32[$5 + 160 >> 2] = Math_fround(Math_fround($14 * $34) + Math_fround($15 * $35)) + Math_fround($13 * $33);
       HEAPF32[$5 + 156 >> 2] = Math_fround(Math_fround($14 * $31) + Math_fround($15 * $32)) + Math_fround($13 * $30);
       HEAPF32[$5 + 152 >> 2] = Math_fround(Math_fround($28 * $14) + Math_fround($29 * $15)) + Math_fround($27 * $13);
       HEAPF32[$5 + 208 >> 2] = $42 + Math_fround(Math_fround(Math_fround($20 * $25) + Math_fround($21 * $26)) + Math_fround($19 * $24));
       HEAPF32[$5 + 204 >> 2] = $41 + Math_fround(Math_fround(Math_fround($17 * $25) + Math_fround($18 * $26)) + Math_fround($16 * $24));
       HEAPF32[$5 + 200 >> 2] = $40 + Math_fround(Math_fround(Math_fround($14 * $25) + Math_fround($15 * $26)) + Math_fround($13 * $24));
      }
      $9 = $9 + -1 | 0;
      if ($50) {
       FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 132 >> 2]]($5 + 24 | 0, $4, HEAP32[$0 + 32 >> 2]);
       $40 = HEAPF32[$5 + 896 >> 2];
       $41 = HEAPF32[$5 + 900 >> 2];
       $42 = HEAPF32[$5 + 904 >> 2];
       $24 = HEAPF32[$5 + 80 >> 2];
       $25 = HEAPF32[$5 + 72 >> 2];
       $26 = HEAPF32[$5 + 76 >> 2];
       $13 = HEAPF32[$5 + 856 >> 2];
       $14 = HEAPF32[$5 + 848 >> 2];
       $15 = HEAPF32[$5 + 852 >> 2];
       $16 = HEAPF32[$5 + 872 >> 2];
       $17 = HEAPF32[$5 + 864 >> 2];
       $18 = HEAPF32[$5 + 868 >> 2];
       $27 = HEAPF32[$5 + 56 >> 2];
       $28 = HEAPF32[$5 + 24 >> 2];
       $29 = HEAPF32[$5 + 40 >> 2];
       $30 = HEAPF32[$5 + 60 >> 2];
       $31 = HEAPF32[$5 + 28 >> 2];
       $32 = HEAPF32[$5 + 44 >> 2];
       $19 = HEAPF32[$5 + 888 >> 2];
       $33 = HEAPF32[$5 + 64 >> 2];
       $20 = HEAPF32[$5 + 880 >> 2];
       $34 = HEAPF32[$5 + 32 >> 2];
       $21 = HEAPF32[$5 + 884 >> 2];
       $35 = HEAPF32[$5 + 48 >> 2];
       HEAP32[$5 + 148 >> 2] = 0;
       HEAP32[$5 + 132 >> 2] = 0;
       HEAP32[$5 + 116 >> 2] = 0;
       HEAP32[$5 + 100 >> 2] = 0;
       HEAPF32[$5 + 128 >> 2] = Math_fround(Math_fround($34 * $20) + Math_fround($35 * $21)) + Math_fround($33 * $19);
       HEAPF32[$5 + 124 >> 2] = Math_fround(Math_fround($31 * $20) + Math_fround($32 * $21)) + Math_fround($30 * $19);
       HEAPF32[$5 + 120 >> 2] = Math_fround(Math_fround($28 * $20) + Math_fround($29 * $21)) + Math_fround($27 * $19);
       HEAPF32[$5 + 112 >> 2] = Math_fround(Math_fround($34 * $17) + Math_fround($35 * $18)) + Math_fround($33 * $16);
       HEAPF32[$5 + 108 >> 2] = Math_fround(Math_fround($31 * $17) + Math_fround($32 * $18)) + Math_fround($30 * $16);
       HEAPF32[$5 + 104 >> 2] = Math_fround(Math_fround($28 * $17) + Math_fround($29 * $18)) + Math_fround($27 * $16);
       HEAPF32[$5 + 96 >> 2] = Math_fround(Math_fround($14 * $34) + Math_fround($15 * $35)) + Math_fround($13 * $33);
       HEAPF32[$5 + 92 >> 2] = Math_fround(Math_fround($14 * $31) + Math_fround($15 * $32)) + Math_fround($13 * $30);
       HEAPF32[$5 + 88 >> 2] = Math_fround(Math_fround($28 * $14) + Math_fround($29 * $15)) + Math_fround($27 * $13);
       HEAPF32[$5 + 144 >> 2] = $42 + Math_fround(Math_fround(Math_fround($20 * $25) + Math_fround($21 * $26)) + Math_fround($19 * $24));
       HEAPF32[$5 + 140 >> 2] = $41 + Math_fround(Math_fround(Math_fround($17 * $25) + Math_fround($18 * $26)) + Math_fround($16 * $24));
       HEAPF32[$5 + 136 >> 2] = $40 + Math_fround(Math_fround(Math_fround($14 * $25) + Math_fround($15 * $26)) + Math_fround($13 * $24));
      }
      HEAP32[$5 + 28 >> 2] = $38;
      HEAP32[$5 + 44 >> 2] = HEAP32[$0 + 24 >> 2];
      HEAP32[$5 + 40 >> 2] = HEAP32[$0 + 28 >> 2];
      HEAP32[$5 + 24 >> 2] = $1;
      HEAP32[$5 + 32 >> 2] = HEAP32[$1 + 8 >> 2];
      HEAP32[$5 + 36 >> 2] = $5 + 152;
      HEAP32[$5 + 4 >> 2] = $48;
      HEAP32[$5 + 20 >> 2] = HEAP32[$0 + 32 >> 2];
      HEAP32[$5 + 16 >> 2] = HEAP32[$0 + 36 >> 2];
      HEAP32[$5 >> 2] = $2;
      HEAP32[$5 + 8 >> 2] = HEAP32[$2 + 8 >> 2];
      HEAP32[$5 + 12 >> 2] = $5 + 88;
      btGImpactCollisionAlgorithm__convex_vs_convex_collision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionShape_20const__2c_20btCollisionShape_20const__29($0, $5 + 24 | 0, $5, $38, $48);
      $39 = $39 + -8 | 0;
      if ($9) {
       continue
      }
      break;
     };
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 116 >> 2]]($3);
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 116 >> 2]]($4);
    btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($5 + 328 | 0);
    btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($5 + 216 | 4);
    btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($5 + 632 | 0);
    btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($5 + 520 | 4);
   }
   $0 = HEAP32[$5 + 836 >> 2];
   if (!$0) {
    break label$1
   }
   if (HEAPU8[$5 + 840 | 0]) {
    btAlignedFreeInternal_28void__29($0)
   }
   HEAP32[$5 + 836 >> 2] = 0;
  }
  global$0 = $5 + 976 | 0;
 }
 
 function btGImpactCollisionAlgorithm__gimpact_vs_shape_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btCollisionShape_20const__2c_20bool_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $6 = global$0 - 528 | 0;
  global$0 = $6;
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 80 >> 2]]($3) | 0) == 2) {
    $8 = ($5 ? 36 : 28) + $0 | 0;
    $7 = HEAP32[$3 + 156 >> 2];
    $9 = $7 + -1 | 0;
    HEAP32[$8 >> 2] = $9;
    if (!$7) {
     break label$1
    }
    while (1) {
     btGImpactCollisionAlgorithm__gimpact_vs_shape_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btCollisionShape_20const__2c_20bool_29($0, $1, $2, HEAP32[HEAP32[$3 + 164 >> 2] + ($9 << 2) >> 2], $4, $5);
     $7 = HEAP32[$8 >> 2];
     $9 = $7 + -1 | 0;
     HEAP32[$8 >> 2] = $9;
     if ($7) {
      continue
     }
     break;
    };
    break label$1;
   }
   $9 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 80 >> 2]]($3) | 0;
   $8 = HEAP32[$4 + 4 >> 2];
   label$4 : {
    if (($9 | 0) != 1) {
     break label$4
    }
    if (($8 | 0) != 28) {
     break label$4
    }
    btGImpactCollisionAlgorithm__gimpacttrimeshpart_vs_plane_collision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactMeshShapePart_20const__2c_20btStaticPlaneShape_20const__2c_20bool_29($0, $1, $2, $3, $4, $5);
    break label$1;
   }
   if (($8 | 0) == 31) {
    btGImpactCollisionAlgorithm__gimpact_vs_compoundshape_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btCompoundShape_20const__2c_20bool_29($0, $1, $2, $3, $4, $5);
    break label$1;
   }
   if ($8 + -21 >>> 0 <= 8) {
    btGImpactCollisionAlgorithm__gimpact_vs_concave_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btConcaveShape_20const__2c_20bool_29($0, $1, $2, $3, $4, $5);
    break label$1;
   }
   $8 = HEAP32[$1 + 12 >> 2];
   $7 = $8 + 8 | 0;
   $11 = HEAP32[$7 >> 2];
   $12 = HEAP32[$7 + 4 >> 2];
   $13 = HEAP32[$8 >> 2];
   $14 = HEAP32[$8 + 4 >> 2];
   $7 = $8 + 24 | 0;
   $10 = HEAP32[$7 >> 2];
   $7 = HEAP32[$7 + 4 >> 2];
   $9 = $6 + 488 | 0;
   HEAP32[$9 >> 2] = $10;
   HEAP32[$9 + 4 >> 2] = $7;
   $9 = $6 + 472 | 0;
   HEAP32[$9 >> 2] = $11;
   HEAP32[$9 + 4 >> 2] = $12;
   $11 = HEAP32[$8 + 16 >> 2];
   $12 = HEAP32[$8 + 20 >> 2];
   $7 = $8 + 40 | 0;
   $10 = HEAP32[$7 >> 2];
   $7 = HEAP32[$7 + 4 >> 2];
   $9 = $6 + 504 | 0;
   HEAP32[$9 >> 2] = $10;
   HEAP32[$9 + 4 >> 2] = $7;
   $15 = HEAP32[$8 + 32 >> 2];
   $10 = HEAP32[$8 + 36 >> 2];
   $7 = $8 + 56 | 0;
   $16 = HEAP32[$7 >> 2];
   $7 = HEAP32[$7 + 4 >> 2];
   $9 = $6 + 520 | 0;
   HEAP32[$9 >> 2] = $16;
   HEAP32[$9 + 4 >> 2] = $7;
   HEAP32[$6 + 464 >> 2] = $13;
   HEAP32[$6 + 468 >> 2] = $14;
   HEAP32[$6 + 480 >> 2] = $11;
   HEAP32[$6 + 484 >> 2] = $12;
   HEAP32[$6 + 496 >> 2] = $15;
   HEAP32[$6 + 500 >> 2] = $10;
   $9 = HEAP32[$8 + 52 >> 2];
   HEAP32[$6 + 512 >> 2] = HEAP32[$8 + 48 >> 2];
   HEAP32[$6 + 516 >> 2] = $9;
   $8 = HEAP32[$2 + 12 >> 2];
   $7 = $8 + 8 | 0;
   $11 = HEAP32[$7 >> 2];
   $12 = HEAP32[$7 + 4 >> 2];
   $13 = HEAP32[$8 >> 2];
   $14 = HEAP32[$8 + 4 >> 2];
   $7 = $8 + 24 | 0;
   $10 = HEAP32[$7 >> 2];
   $7 = HEAP32[$7 + 4 >> 2];
   $9 = $6 + 424 | 0;
   HEAP32[$9 >> 2] = $10;
   HEAP32[$9 + 4 >> 2] = $7;
   $9 = $6 + 408 | 0;
   HEAP32[$9 >> 2] = $11;
   HEAP32[$9 + 4 >> 2] = $12;
   $11 = HEAP32[$8 + 16 >> 2];
   $12 = HEAP32[$8 + 20 >> 2];
   $7 = $8 + 40 | 0;
   $10 = HEAP32[$7 >> 2];
   $7 = HEAP32[$7 + 4 >> 2];
   $9 = $6 + 440 | 0;
   HEAP32[$9 >> 2] = $10;
   HEAP32[$9 + 4 >> 2] = $7;
   $15 = HEAP32[$8 + 32 >> 2];
   $10 = HEAP32[$8 + 36 >> 2];
   $7 = $8 + 56 | 0;
   $16 = HEAP32[$7 >> 2];
   $7 = HEAP32[$7 + 4 >> 2];
   $9 = $6 + 456 | 0;
   HEAP32[$9 >> 2] = $16;
   HEAP32[$9 + 4 >> 2] = $7;
   HEAP32[$6 + 400 >> 2] = $13;
   HEAP32[$6 + 404 >> 2] = $14;
   HEAP32[$6 + 416 >> 2] = $11;
   HEAP32[$6 + 420 >> 2] = $12;
   HEAP32[$6 + 432 >> 2] = $15;
   HEAP32[$6 + 436 >> 2] = $10;
   $9 = HEAP32[$8 + 52 >> 2];
   HEAP32[$6 + 448 >> 2] = HEAP32[$8 + 48 >> 2];
   HEAP32[$6 + 452 >> 2] = $9;
   HEAP32[$6 + 388 >> 2] = 0;
   HEAP8[$6 + 392 | 0] = 1;
   HEAP32[$6 + 380 >> 2] = 0;
   HEAP32[$6 + 384 >> 2] = 0;
   btGImpactCollisionAlgorithm__gimpact_vs_shape_find_pairs_28btTransform_20const__2c_20btTransform_20const__2c_20btGImpactShapeInterface_20const__2c_20btCollisionShape_20const__2c_20btAlignedObjectArray_int___29($6 + 464 | 0, $6 + 400 | 0, $3, $4, $6 + 376 | 0);
   if (HEAP32[$6 + 380 >> 2]) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 112 >> 2]]($3);
    btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($6 + 72 | 4);
    $7 = $6 + 136 | 0;
    HEAP32[$7 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    HEAP32[$6 + 80 >> 2] = 1;
    $7 = $6 + 144 | 0;
    HEAP32[$7 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    $7 = $6 + 152 | 0;
    HEAP32[$7 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    $7 = $6 + 160 | 0;
    HEAP32[$7 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    $7 = $6 + 168 | 0;
    HEAP32[$7 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    $7 = $6 + 176 | 0;
    HEAP32[$7 >> 2] = 0;
    HEAP32[$7 + 4 >> 2] = 0;
    HEAP32[$6 + 76 >> 2] = 8128;
    btBU_Simplex1to4__btBU_Simplex1to4_28_29($6 + 184 | 0);
    HEAP32[$6 + 280 >> 2] = 4;
    HEAP32[$6 + 364 >> 2] = 8708;
    HEAP32[$6 + 356 >> 2] = 8628;
    HEAP32[$6 + 348 >> 2] = 8556;
    HEAP32[$6 + 184 >> 2] = 8364;
    HEAP32[$6 + 72 >> 2] = $3;
    $8 = $6 + 356 | 0;
    label$8 : {
     if (FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 96 >> 2]]($3)) {
      break label$8
     }
     $8 = HEAP32[$6 + 72 >> 2];
     $8 = FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 100 >> 2]]($8) | 0 ? $6 + 364 | 0 : $6 + 348 | 0;
    }
    HEAP32[$8 + 4 >> 2] = $6 + 72;
    HEAP32[$6 + 372 >> 2] = $8;
    $4 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 92 >> 2]]($3) | 0;
    $8 = HEAP32[$6 + 380 >> 2];
    label$10 : {
     if (!$8) {
      break label$10
     }
     if (!$5) {
      $9 = ($8 << 2) + -4 | 0;
      while (1) {
       $7 = HEAP32[$9 + HEAP32[$6 + 388 >> 2] >> 2];
       HEAP32[$0 + 24 >> 2] = $7;
       $5 = HEAP32[$6 + 372 >> 2];
       $5 = FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] >> 2]]($5, $7) | 0;
       if ($4) {
        FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 132 >> 2]]($6 + 8 | 0, $3, $7)
       }
       HEAP32[$6 + 8 >> 2] = $1;
       HEAP32[$6 + 20 >> 2] = HEAP32[$1 + 12 >> 2];
       $7 = HEAP32[$1 + 8 >> 2];
       HEAP32[$6 + 16 >> 2] = $7;
       HEAP32[$6 + 12 >> 2] = $5;
       HEAP32[$6 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
       HEAP32[$6 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
       $5 = HEAP32[$0 + 16 >> 2];
       $10 = $5;
       $5 = HEAP32[$5 + 8 >> 2];
       HEAP32[$10 + (HEAP32[$5 + 8 >> 2] == ($7 | 0) ? 8 : 12) >> 2] = $6 + 8;
       btGImpactCollisionAlgorithm__shape_vs_shape_collision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionShape_20const__2c_20btCollisionShape_20const__29($0, $6 + 8 | 0, $2);
       HEAP32[HEAP32[$0 + 16 >> 2] + 8 >> 2] = $5;
       $9 = $9 + -4 | 0;
       $8 = $8 + -1 | 0;
       if ($8) {
        continue
       }
       break;
      };
      break label$10;
     }
     $9 = ($8 << 2) + -4 | 0;
     while (1) {
      $7 = HEAP32[$9 + HEAP32[$6 + 388 >> 2] >> 2];
      HEAP32[$0 + 32 >> 2] = $7;
      $5 = HEAP32[$6 + 372 >> 2];
      $5 = FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] >> 2]]($5, $7) | 0;
      if ($4) {
       FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 132 >> 2]]($6 + 8 | 0, $3, $7)
      }
      HEAP32[$6 + 8 >> 2] = $1;
      HEAP32[$6 + 20 >> 2] = HEAP32[$1 + 12 >> 2];
      $7 = HEAP32[$1 + 8 >> 2];
      HEAP32[$6 + 16 >> 2] = $7;
      HEAP32[$6 + 12 >> 2] = $5;
      HEAP32[$6 + 28 >> 2] = HEAP32[$0 + 24 >> 2];
      HEAP32[$6 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
      $5 = HEAP32[$0 + 16 >> 2];
      $10 = $5;
      $5 = HEAP32[$5 + 8 >> 2];
      HEAP32[$10 + (HEAP32[$5 + 8 >> 2] == ($7 | 0) ? 8 : 12) >> 2] = $6 + 8;
      btGImpactCollisionAlgorithm__shape_vs_shape_collision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionShape_20const__2c_20btCollisionShape_20const__29($0, $2, $6 + 8 | 0);
      HEAP32[HEAP32[$0 + 16 >> 2] + 8 >> 2] = $5;
      $9 = $9 + -4 | 0;
      $8 = $8 + -1 | 0;
      if ($8) {
       continue
      }
      break;
     };
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 116 >> 2]]($3);
    btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($6 + 184 | 0);
    btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($6 + 72 | 4);
   }
   $8 = HEAP32[$6 + 388 >> 2];
   if (!$8) {
    break label$1
   }
   if (HEAPU8[$6 + 392 | 0]) {
    btAlignedFreeInternal_28void__29($8)
   }
   HEAP32[$6 + 388 >> 2] = 0;
  }
  global$0 = $6 + 528 | 0;
 }
 
 function btGImpactCollisionAlgorithm__gimpacttrimeshpart_vs_plane_collision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactMeshShapePart_20const__2c_20btStaticPlaneShape_20const__2c_20bool_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = Math_fround(0), $29 = Math_fround(0);
  $7 = global$0 - 144 | 0;
  global$0 = $7;
  $6 = HEAP32[$1 + 12 >> 2];
  $9 = $6 + 8 | 0;
  $21 = HEAP32[$9 >> 2];
  $9 = HEAP32[$9 + 4 >> 2];
  $11 = $7 + 88 | 0;
  HEAP32[$11 >> 2] = $21;
  HEAP32[$11 + 4 >> 2] = $9;
  $24 = HEAP32[$6 >> 2];
  $21 = HEAP32[$6 + 4 >> 2];
  $9 = $6 + 24 | 0;
  $22 = HEAP32[$9 >> 2];
  $9 = HEAP32[$9 + 4 >> 2];
  $11 = $7 + 104 | 0;
  HEAP32[$11 >> 2] = $22;
  HEAP32[$11 + 4 >> 2] = $9;
  $25 = HEAP32[$6 + 16 >> 2];
  $22 = HEAP32[$6 + 20 >> 2];
  $9 = $6 + 40 | 0;
  $23 = HEAP32[$9 >> 2];
  $9 = HEAP32[$9 + 4 >> 2];
  $11 = $7 + 120 | 0;
  HEAP32[$11 >> 2] = $23;
  HEAP32[$11 + 4 >> 2] = $9;
  $26 = HEAP32[$6 + 32 >> 2];
  $23 = HEAP32[$6 + 36 >> 2];
  $9 = $6 + 56 | 0;
  $27 = HEAP32[$9 >> 2];
  $9 = HEAP32[$9 + 4 >> 2];
  $11 = $7 + 136 | 0;
  HEAP32[$11 >> 2] = $27;
  HEAP32[$11 + 4 >> 2] = $9;
  HEAP32[$7 + 80 >> 2] = $24;
  HEAP32[$7 + 84 >> 2] = $21;
  HEAP32[$7 + 96 >> 2] = $25;
  HEAP32[$7 + 100 >> 2] = $22;
  HEAP32[$7 + 112 >> 2] = $26;
  HEAP32[$7 + 116 >> 2] = $23;
  $11 = HEAP32[$6 + 52 >> 2];
  HEAP32[$7 + 128 >> 2] = HEAP32[$6 + 48 >> 2];
  HEAP32[$7 + 132 >> 2] = $11;
  $6 = HEAP32[$2 + 12 >> 2];
  $13 = HEAPF32[$6 + 20 >> 2];
  $14 = HEAPF32[$6 + 24 >> 2];
  $15 = HEAPF32[$6 + 36 >> 2];
  $16 = HEAPF32[$6 + 40 >> 2];
  $17 = HEAPF32[$6 + 8 >> 2];
  $18 = HEAPF32[$6 >> 2];
  $20 = HEAPF32[$6 + 4 >> 2];
  $28 = HEAPF32[$6 + 16 >> 2];
  $29 = HEAPF32[$6 + 32 >> 2];
  $8 = HEAPF32[$4 + 52 >> 2];
  $10 = HEAPF32[$4 + 56 >> 2];
  $12 = HEAPF32[$4 + 60 >> 2];
  $19 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$6 + 48 >> 2] * $8) + Math_fround(HEAPF32[$6 + 52 >> 2] * $10)) + Math_fround(HEAPF32[$6 + 56 >> 2] * $12)) + HEAPF32[$4 + 68 >> 2]);
  HEAPF32[$7 + 76 >> 2] = $19;
  $15 = Math_fround(Math_fround(Math_fround($29 * $8) + Math_fround($15 * $10)) + Math_fround($16 * $12));
  HEAPF32[$7 + 72 >> 2] = $15;
  $13 = Math_fround(Math_fround(Math_fround($28 * $8) + Math_fround($13 * $10)) + Math_fround($14 * $12));
  HEAPF32[$7 + 68 >> 2] = $13;
  $10 = Math_fround(Math_fround(Math_fround($18 * $8) + Math_fround($20 * $10)) + Math_fround($17 * $12));
  HEAPF32[$7 + 64 >> 2] = $10;
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $7 + 80 | 0, $7 + 32 | 0, $7 + 48 | 0);
  $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4));
  $6 = $7 + 52 | 0;
  $12 = Math_fround($8 + HEAPF32[$6 >> 2]);
  HEAPF32[$6 >> 2] = $12;
  $6 = $7 + 56 | 0;
  $14 = Math_fround($8 + HEAPF32[$6 >> 2]);
  HEAPF32[$6 >> 2] = $14;
  $17 = Math_fround(HEAPF32[$7 + 36 >> 2] - $8);
  HEAPF32[$7 + 36 >> 2] = $17;
  $16 = Math_fround($8 + HEAPF32[$7 + 48 >> 2]);
  HEAPF32[$7 + 48 >> 2] = $16;
  $18 = Math_fround(HEAPF32[$7 + 32 >> 2] - $8);
  HEAPF32[$7 + 32 >> 2] = $18;
  $8 = Math_fround(HEAPF32[$7 + 40 >> 2] - $8);
  HEAPF32[$7 + 40 >> 2] = $8;
  $18 = Math_fround(Math_fround($18 + $16) * Math_fround(.5));
  $17 = Math_fround(Math_fround($17 + $12) * Math_fround(.5));
  $8 = Math_fround(Math_fround($8 + $14) * Math_fround(.5));
  $20 = Math_fround(Math_fround(Math_fround($18 * $10) + Math_fround($17 * $13)) + Math_fround($8 * $15));
  $8 = Math_fround(Math_fround(Math_fround(Math_fround($16 - $18) * Math_fround(Math_abs($10))) + Math_fround(Math_fround($12 - $17) * Math_fround(Math_abs($13)))) + Math_fround(Math_fround($14 - $8) * Math_fround(Math_abs($15))));
  label$1 : {
   if ($19 > Math_fround(Math_fround($20 + $8) + Math_fround(9.999999974752427e-07))) {
    break label$1
   }
   if (!(Math_fround($19 + Math_fround(9.999999974752427e-07)) >= Math_fround($20 - $8))) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 112 >> 2]]($3);
   $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 48 >> 2]]($3));
   $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4));
   $6 = HEAP32[$3 + 188 >> 2];
   if ($6) {
    $19 = Math_fround($8 + $10);
    $4 = $6 + -1 | 0;
    while (1) {
     $6 = HEAP32[$3 + 184 >> 2] + Math_imul($4, HEAP32[$3 + 196 >> 2]) | 0;
     label$4 : {
      if (HEAP32[$3 + 192 >> 2] == 1) {
       $8 = Math_fround(HEAPF64[$6 >> 3] * +HEAPF32[$3 + 160 >> 2]);
       HEAPF32[$7 + 16 >> 2] = $8;
       $10 = Math_fround(HEAPF64[$6 + 8 >> 3] * +HEAPF32[$3 + 164 >> 2]);
       HEAPF32[$7 + 20 >> 2] = $10;
       $12 = Math_fround(HEAPF64[$6 + 16 >> 3] * +HEAPF32[$3 + 168 >> 2]);
       break label$4;
      }
      $8 = Math_fround(HEAPF32[$6 >> 2] * HEAPF32[$3 + 160 >> 2]);
      HEAPF32[$7 + 16 >> 2] = $8;
      $10 = Math_fround(HEAPF32[$6 + 4 >> 2] * HEAPF32[$3 + 164 >> 2]);
      HEAPF32[$7 + 20 >> 2] = $10;
      $12 = Math_fround(HEAPF32[$6 + 8 >> 2] * HEAPF32[$3 + 168 >> 2]);
     }
     HEAP32[$7 + 28 >> 2] = 0;
     $14 = Math_fround(Math_fround(Math_fround(Math_fround($8 * HEAPF32[$7 + 96 >> 2]) + Math_fround($10 * HEAPF32[$7 + 100 >> 2])) + Math_fround($12 * HEAPF32[$7 + 104 >> 2])) + HEAPF32[$7 + 132 >> 2]);
     HEAPF32[$7 + 20 >> 2] = $14;
     $15 = HEAPF32[$7 + 68 >> 2];
     $16 = Math_fround(Math_fround(Math_fround(Math_fround($8 * HEAPF32[$7 + 80 >> 2]) + Math_fround($10 * HEAPF32[$7 + 84 >> 2])) + Math_fround($12 * HEAPF32[$7 + 88 >> 2])) + HEAPF32[$7 + 128 >> 2]);
     HEAPF32[$7 + 16 >> 2] = $16;
     $13 = HEAPF32[$7 + 64 >> 2];
     $8 = Math_fround(Math_fround(Math_fround(Math_fround($8 * HEAPF32[$7 + 112 >> 2]) + Math_fround($10 * HEAPF32[$7 + 116 >> 2])) + Math_fround($12 * HEAPF32[$7 + 120 >> 2])) + HEAPF32[$7 + 136 >> 2]);
     HEAPF32[$7 + 24 >> 2] = $8;
     $10 = HEAPF32[$7 + 72 >> 2];
     $8 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($16 * $13) + Math_fround($14 * $15)) + Math_fround($8 * $10)) - HEAPF32[$7 + 76 >> 2]) - $19);
     label$6 : {
      if (!($8 < Math_fround(0.0))) {
       break label$6
      }
      if ($5) {
       HEAP32[$7 + 12 >> 2] = 0;
       HEAPF32[$7 + 8 >> 2] = -$10;
       HEAPF32[$7 + 4 >> 2] = -$15;
       HEAPF32[$7 >> 2] = -$13;
       $6 = HEAP32[$0 + 16 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
       $6 = HEAP32[$0 + 16 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 12 >> 2]]($6, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2]);
       $9 = HEAP32[$0 + 12 >> 2];
       if (!$9) {
        $6 = HEAP32[$0 + 4 >> 2];
        $9 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 12 >> 2]]($6, HEAP32[$2 + 8 >> 2], HEAP32[$1 + 8 >> 2]) | 0;
        HEAP32[$0 + 12 >> 2] = $9;
       }
       $6 = HEAP32[$0 + 16 >> 2];
       HEAP32[$6 + 4 >> 2] = $9;
       FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 16 >> 2]]($6, $7, $7 + 16 | 0, $8);
       break label$6;
      }
      $6 = HEAP32[$0 + 16 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, HEAP32[$0 + 28 >> 2], HEAP32[$0 + 24 >> 2]);
      $6 = HEAP32[$0 + 16 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 12 >> 2]]($6, HEAP32[$0 + 36 >> 2], HEAP32[$0 + 32 >> 2]);
      $9 = HEAP32[$0 + 12 >> 2];
      if (!$9) {
       $6 = HEAP32[$0 + 4 >> 2];
       $9 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 12 >> 2]]($6, HEAP32[$1 + 8 >> 2], HEAP32[$2 + 8 >> 2]) | 0;
       HEAP32[$0 + 12 >> 2] = $9;
      }
      $6 = HEAP32[$0 + 16 >> 2];
      HEAP32[$6 + 4 >> 2] = $9;
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 16 >> 2]]($6, $7 - -64 | 0, $7 + 16 | 0, $8);
     }
     $4 = $4 + -1 | 0;
     if (($4 | 0) != -1) {
      continue
     }
     break;
    };
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 116 >> 2]]($3);
  }
  global$0 = $7 + 144 | 0;
 }
 
 function btGImpactCollisionAlgorithm__gimpact_vs_compoundshape_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btCompoundShape_20const__2c_20bool_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = 0, $30 = 0, $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = 0;
  $7 = global$0 - 96 | 0;
  global$0 = $7;
  $8 = HEAP32[$4 + 20 >> 2];
  if ($8) {
   $6 = HEAP32[$2 + 12 >> 2];
   $31 = HEAPF32[$6 + 56 >> 2];
   $32 = HEAPF32[$6 + 52 >> 2];
   $13 = HEAPF32[$6 + 40 >> 2];
   $14 = HEAPF32[$6 + 36 >> 2];
   $15 = HEAPF32[$6 + 24 >> 2];
   $16 = HEAPF32[$6 + 20 >> 2];
   $33 = HEAPF32[$6 + 48 >> 2];
   $17 = HEAPF32[$6 + 32 >> 2];
   $18 = HEAPF32[$6 + 16 >> 2];
   $19 = HEAPF32[$6 + 8 >> 2];
   $20 = HEAPF32[$6 + 4 >> 2];
   $21 = HEAPF32[$6 >> 2];
   $22 = $8 + -1 | 0;
   $8 = Math_imul($8, 80) + -80 | 0;
   while (1) {
    $6 = $8 + HEAP32[$4 + 28 >> 2] | 0;
    $30 = HEAP32[$6 - -64 >> 2];
    HEAP32[$7 + 92 >> 2] = 0;
    HEAP32[$7 + 76 >> 2] = 0;
    HEAP32[$7 + 60 >> 2] = 0;
    HEAP32[$7 + 44 >> 2] = 0;
    $9 = HEAPF32[$6 + 8 >> 2];
    $10 = HEAPF32[$6 + 24 >> 2];
    $11 = HEAPF32[$6 + 40 >> 2];
    HEAPF32[$7 + 72 >> 2] = Math_fround(Math_fround($17 * $9) + Math_fround($14 * $10)) + Math_fround($13 * $11);
    $23 = HEAPF32[$6 + 4 >> 2];
    $24 = HEAPF32[$6 + 20 >> 2];
    $25 = HEAPF32[$6 + 36 >> 2];
    HEAPF32[$7 + 68 >> 2] = Math_fround(Math_fround($17 * $23) + Math_fround($14 * $24)) + Math_fround($13 * $25);
    $26 = HEAPF32[$6 >> 2];
    $27 = HEAPF32[$6 + 16 >> 2];
    $28 = HEAPF32[$6 + 32 >> 2];
    HEAPF32[$7 + 64 >> 2] = Math_fround(Math_fround($17 * $26) + Math_fround($14 * $27)) + Math_fround($13 * $28);
    HEAPF32[$7 + 56 >> 2] = Math_fround(Math_fround($18 * $9) + Math_fround($16 * $10)) + Math_fround($15 * $11);
    HEAPF32[$7 + 52 >> 2] = Math_fround(Math_fround($18 * $23) + Math_fround($16 * $24)) + Math_fround($15 * $25);
    HEAPF32[$7 + 48 >> 2] = Math_fround(Math_fround($18 * $26) + Math_fround($16 * $27)) + Math_fround($15 * $28);
    HEAPF32[$7 + 40 >> 2] = Math_fround(Math_fround($21 * $9) + Math_fround($20 * $10)) + Math_fround($19 * $11);
    HEAPF32[$7 + 36 >> 2] = Math_fround(Math_fround($21 * $23) + Math_fround($20 * $24)) + Math_fround($19 * $25);
    HEAPF32[$7 + 32 >> 2] = Math_fround(Math_fround($21 * $26) + Math_fround($20 * $27)) + Math_fround($19 * $28);
    $9 = HEAPF32[$6 + 48 >> 2];
    $10 = HEAPF32[$6 + 52 >> 2];
    $11 = HEAPF32[$6 + 56 >> 2];
    HEAPF32[$7 + 88 >> 2] = $31 + Math_fround(Math_fround(Math_fround($17 * $9) + Math_fround($14 * $10)) + Math_fround($13 * $11));
    HEAPF32[$7 + 84 >> 2] = $32 + Math_fround(Math_fround(Math_fround($18 * $9) + Math_fround($16 * $10)) + Math_fround($15 * $11));
    HEAPF32[$7 + 80 >> 2] = $33 + Math_fround(Math_fround(Math_fround($21 * $9) + Math_fround($20 * $10)) + Math_fround($19 * $11));
    HEAP32[$7 + 8 >> 2] = $2;
    $12 = HEAP32[$2 + 8 >> 2];
    HEAP32[$7 + 16 >> 2] = $12;
    HEAP32[$7 + 12 >> 2] = $30;
    HEAP32[$7 + 28 >> 2] = $22;
    HEAP32[$7 + 24 >> 2] = -1;
    $6 = HEAP32[$0 + 16 >> 2];
    HEAP32[$7 + 20 >> 2] = $7 + 32;
    $34 = $12;
    $12 = HEAP32[$6 + 8 >> 2];
    $29 = $6 + 8 | 0;
    label$3 : {
     if (($34 | 0) == HEAP32[$12 + 8 >> 2]) {
      break label$3
     }
     $12 = HEAP32[$6 + 12 >> 2];
     $29 = $6 + 12 | 0;
    }
    HEAP32[$29 >> 2] = $7 + 8;
    btGImpactCollisionAlgorithm__gimpact_vs_shape_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btCollisionShape_20const__2c_20bool_29($0, $1, $7 + 8 | 0, $3, $30, $5);
    $6 = HEAP32[$0 + 16 >> 2];
    HEAP32[$6 + (HEAP32[HEAP32[$6 + 8 >> 2] + 8 >> 2] == HEAP32[$7 + 16 >> 2] ? 8 : 12) >> 2] = $12;
    $8 = $8 + -80 | 0;
    $22 = $22 + -1 | 0;
    if (($22 | 0) != -1) {
     continue
    }
    break;
   };
  }
  global$0 = $7 + 96 | 0;
 }
 
 function btGImpactCollisionAlgorithm__gimpact_vs_concave_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btConcaveShape_20const__2c_20bool_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $6 = global$0 - 128 | 0;
  global$0 = $6;
  HEAP8[$6 + 116 | 0] = $5;
  HEAP32[$6 + 112 >> 2] = $3;
  HEAP32[$6 + 100 >> 2] = $0;
  HEAP32[$6 + 96 >> 2] = 8784;
  HEAP32[$6 + 104 >> 2] = $1;
  HEAP32[$6 + 108 >> 2] = $2;
  (wasm2js_i32$0 = $6, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4))), HEAPF32[wasm2js_i32$0 + 120 >> 2] = wasm2js_f32$0;
  $2 = HEAP32[$2 + 12 >> 2];
  $17 = HEAPF32[$2 + 52 >> 2];
  $18 = HEAPF32[$2 + 56 >> 2];
  $1 = HEAP32[$1 + 12 >> 2];
  $19 = HEAPF32[$1 + 52 >> 2];
  $20 = HEAPF32[$1 + 56 >> 2];
  $7 = HEAPF32[$2 + 20 >> 2];
  $8 = HEAPF32[$2 + 36 >> 2];
  $21 = HEAPF32[$1 + 20 >> 2];
  $22 = HEAPF32[$1 + 36 >> 2];
  $23 = HEAPF32[$1 + 24 >> 2];
  $9 = HEAPF32[$2 + 24 >> 2];
  $24 = HEAPF32[$1 + 40 >> 2];
  $10 = HEAPF32[$2 + 40 >> 2];
  $25 = HEAPF32[$1 + 32 >> 2];
  $11 = HEAPF32[$2 + 32 >> 2];
  $26 = HEAPF32[$1 >> 2];
  $12 = HEAPF32[$2 >> 2];
  $27 = HEAPF32[$1 + 16 >> 2];
  $13 = HEAPF32[$2 + 16 >> 2];
  $14 = HEAPF32[$2 + 48 >> 2];
  $28 = HEAPF32[$1 + 48 >> 2];
  $15 = HEAPF32[$2 + 4 >> 2];
  $29 = HEAPF32[$1 + 4 >> 2];
  $30 = HEAPF32[$1 + 8 >> 2];
  $16 = HEAPF32[$2 + 8 >> 2];
  HEAP32[$6 + 92 >> 2] = 0;
  HEAP32[$6 + 76 >> 2] = 0;
  HEAP32[$6 + 60 >> 2] = 0;
  HEAPF32[$6 + 72 >> 2] = Math_fround(Math_fround($16 * $30) + Math_fround($9 * $23)) + Math_fround($10 * $24);
  HEAPF32[$6 + 68 >> 2] = Math_fround(Math_fround($16 * $29) + Math_fround($9 * $21)) + Math_fround($10 * $22);
  HEAPF32[$6 + 56 >> 2] = Math_fround(Math_fround($15 * $30) + Math_fround($7 * $23)) + Math_fround($8 * $24);
  HEAPF32[$6 + 52 >> 2] = Math_fround(Math_fround($15 * $29) + Math_fround($7 * $21)) + Math_fround($8 * $22);
  $14 = Math_fround(-$14);
  HEAPF32[$6 + 88 >> 2] = Math_fround(Math_fround(Math_fround($16 * $14) - Math_fround($9 * $17)) - Math_fround($10 * $18)) + Math_fround(Math_fround(Math_fround($16 * $28) + Math_fround($9 * $19)) + Math_fround($10 * $20));
  HEAPF32[$6 + 84 >> 2] = Math_fround(Math_fround(Math_fround($15 * $14) - Math_fround($7 * $17)) - Math_fround($8 * $18)) + Math_fround(Math_fround(Math_fround($15 * $28) + Math_fround($7 * $19)) + Math_fround($8 * $20));
  HEAP32[$6 + 44 >> 2] = 0;
  HEAPF32[$6 + 32 >> 2] = Math_fround(Math_fround($12 * $26) + Math_fround($13 * $27)) + Math_fround($11 * $25);
  HEAPF32[$6 + 64 >> 2] = Math_fround(Math_fround($16 * $26) + Math_fround($9 * $27)) + Math_fround($10 * $25);
  HEAPF32[$6 + 48 >> 2] = Math_fround(Math_fround($15 * $26) + Math_fround($7 * $27)) + Math_fround($8 * $25);
  HEAPF32[$6 + 40 >> 2] = Math_fround(Math_fround($12 * $30) + Math_fround($13 * $23)) + Math_fround($11 * $24);
  HEAPF32[$6 + 36 >> 2] = Math_fround(Math_fround($12 * $29) + Math_fround($13 * $21)) + Math_fround($11 * $22);
  HEAPF32[$6 + 80 >> 2] = Math_fround(Math_fround(Math_fround($12 * $14) - Math_fround($13 * $17)) - Math_fround($11 * $18)) + Math_fround(Math_fround(Math_fround($12 * $28) + Math_fround($13 * $19)) + Math_fround($11 * $20));
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $6 + 32 | 0, $6 + 16 | 0, $6);
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 64 >> 2]]($4, $6 + 96 | 0, $6 + 16 | 0, $6);
  global$0 = $6 + 128 | 0;
 }
 
 function btGImpactCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  $5 = HEAP32[$0 + 12 >> 2];
  if ($5) {
   $6 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 16 >> 2]]($6, $5);
   HEAP32[$0 + 12 >> 2] = 0;
  }
  $5 = HEAP32[$0 + 8 >> 2];
  if ($5) {
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] >> 2]]($5) | 0;
   $5 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 60 >> 2]]($5, HEAP32[$0 + 8 >> 2]);
   HEAP32[$0 + 8 >> 2] = 0;
  }
  HEAP32[$0 + 24 >> 2] = -1;
  HEAP32[$0 + 28 >> 2] = -1;
  $5 = $0 + 32 | 0;
  HEAP32[$5 >> 2] = -1;
  HEAP32[$5 + 4 >> 2] = -1;
  HEAP32[$0 + 20 >> 2] = $3;
  HEAP32[$0 + 16 >> 2] = $4;
  $5 = HEAP32[$1 + 4 >> 2];
  if (HEAP32[$5 + 4 >> 2] == 25) {
   $3 = HEAP32[$2 + 4 >> 2];
   if (HEAP32[$3 + 4 >> 2] == 25) {
    btGImpactCollisionAlgorithm__gimpact_vs_gimpact_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btGImpactShapeInterface_20const__29($0, $1, $2, $5, $3);
    return;
   }
   btGImpactCollisionAlgorithm__gimpact_vs_shape_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btCollisionShape_20const__2c_20bool_29($0, $1, $2, $5, $3, 0);
   return;
  }
  $3 = HEAP32[$2 + 4 >> 2];
  if (HEAP32[$3 + 4 >> 2] == 25) {
   btGImpactCollisionAlgorithm__gimpact_vs_shape_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btCollisionShape_20const__2c_20bool_29($0, $2, $1, $3, $5, 1)
  }
 }
 
 function btGImpactCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return Math_fround(Math_fround(1.0));
 }
 
 function btGImpactCollisionAlgorithm__registerAlgorithm_28btCollisionDispatcher__29($0) {
  if (!HEAPU8[1716]) {
   HEAP32[427] = 8844;
   HEAP8[1716] = 1;
   HEAP8[1712] = 0;
  }
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 0);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 1);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 2);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 3);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 4);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 5);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 6);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 7);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 8);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 9);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 10);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 11);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 12);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 13);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 14);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 15);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 16);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 17);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 18);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 19);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 20);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 21);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 22);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 23);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 24);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 26);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 27);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 28);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 29);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 30);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 31);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 32);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 33);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 34);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 35);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 0, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 1, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 2, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 3, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 4, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 5, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 6, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 7, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 8, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 9, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 10, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 11, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 12, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 13, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 14, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 15, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 16, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 17, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 18, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 19, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 20, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 21, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 22, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 23, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 24, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 25, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 26, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 27, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 28, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 29, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 30, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 31, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 32, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 33, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 34, 25);
  btCollisionDispatcher__registerCollisionCreateFunc_28int_2c_20int_2c_20btCollisionAlgorithmCreateFunc__29($0, 35, 25);
 }
 
 function btGImpactCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = HEAP32[$0 + 12 >> 2];
  if ($2) {
   $3 = HEAP32[$1 + 4 >> 2];
   label$2 : {
    if (($3 | 0) != HEAP32[$1 + 8 >> 2]) {
     break label$2
    }
    $4 = $3 ? $3 << 1 : 1;
    if (($3 | 0) >= ($4 | 0)) {
     break label$2
    }
    label$3 : {
     if (!$4) {
      break label$3
     }
     $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    if (($3 | 0) >= 1) {
     $2 = 0;
     $5 = $3;
     while (1) {
      HEAP32[$2 + $6 >> 2] = HEAP32[$2 + HEAP32[$1 + 12 >> 2] >> 2];
      $2 = $2 + 4 | 0;
      $5 = $5 + -1 | 0;
      if ($5) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$1 + 12 >> 2];
    if ($2) {
     if (HEAPU8[$1 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($2);
      $3 = HEAP32[$1 + 4 >> 2];
     }
     HEAP32[$1 + 12 >> 2] = 0;
    }
    HEAP32[$1 + 12 >> 2] = $6;
    HEAP8[$1 + 16 | 0] = 1;
    HEAP32[$1 + 8 >> 2] = $4;
    $2 = HEAP32[$0 + 12 >> 2];
   }
   HEAP32[$1 + 4 >> 2] = $3 + 1;
   HEAP32[HEAP32[$1 + 12 >> 2] + ($3 << 2) >> 2] = $2;
  }
 }
 
 function btTriangleShapeEx__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = 0, $28 = 0, $29 = Math_fround(0), $30 = 0;
  $4 = global$0 - 48 | 0;
  $6 = HEAPF32[$0 + 60 >> 2];
  $11 = HEAPF32[$1 + 16 >> 2];
  $5 = HEAPF32[$0 - -64 >> 2];
  $15 = HEAPF32[$1 + 20 >> 2];
  $7 = HEAPF32[$0 + 68 >> 2];
  $16 = HEAPF32[$1 + 24 >> 2];
  $17 = HEAPF32[$1 + 52 >> 2];
  $18 = Math_fround(Math_fround(Math_fround(Math_fround($6 * $11) + Math_fround($5 * $15)) + Math_fround($7 * $16)) + $17);
  HEAPF32[$4 + 40 >> 2] = $18;
  $12 = HEAPF32[$1 + 32 >> 2];
  $19 = HEAPF32[$1 + 36 >> 2];
  $20 = HEAPF32[$1 + 40 >> 2];
  $21 = HEAPF32[$1 + 56 >> 2];
  $22 = Math_fround(Math_fround(Math_fround(Math_fround($6 * $12) + Math_fround($5 * $19)) + Math_fround($7 * $20)) + $21);
  HEAPF32[$4 + 36 >> 2] = $22;
  $13 = HEAPF32[$1 >> 2];
  $9 = Math_fround($6 * $13);
  $6 = HEAPF32[$1 + 4 >> 2];
  $23 = HEAPF32[$1 + 8 >> 2];
  $5 = Math_fround(Math_fround($9 + Math_fround($5 * $6)) + Math_fround($7 * $23));
  $7 = HEAPF32[$1 + 48 >> 2];
  $24 = Math_fround($5 + $7);
  HEAPF32[$4 + 44 >> 2] = $24;
  HEAP32[$4 + 28 >> 2] = 0;
  $5 = HEAPF32[$0 + 76 >> 2];
  $9 = HEAPF32[$0 + 80 >> 2];
  $14 = HEAPF32[$0 + 84 >> 2];
  $25 = Math_fround($17 + Math_fround(Math_fround(Math_fround($11 * $5) + Math_fround($15 * $9)) + Math_fround($16 * $14)));
  HEAPF32[$4 + 20 >> 2] = $25;
  $26 = Math_fround($21 + Math_fround(Math_fround(Math_fround($12 * $5) + Math_fround($19 * $9)) + Math_fround($20 * $14)));
  HEAPF32[$4 + 24 >> 2] = $26;
  $5 = Math_fround($7 + Math_fround(Math_fround(Math_fround($13 * $5) + Math_fround($6 * $9)) + Math_fround($23 * $14)));
  HEAPF32[$4 + 16 >> 2] = $5;
  $9 = HEAPF32[$0 + 92 >> 2];
  $29 = Math_fround($13 * $9);
  $13 = HEAPF32[$0 + 96 >> 2];
  $14 = HEAPF32[$0 + 100 >> 2];
  $7 = Math_fround($7 + Math_fround(Math_fround($29 + Math_fround($6 * $13)) + Math_fround($23 * $14)));
  HEAPF32[$4 >> 2] = $7;
  $1 = $5 > $7;
  $8 = $24 > ($1 ? $7 : $5);
  $10 = $8 ? $4 : $4 + 44 | 0;
  $6 = HEAPF32[$0 + 48 >> 2];
  HEAPF32[$2 >> 2] = HEAPF32[($1 ? $10 : $8 ? $4 + 16 | 0 : $10) >> 2] - $6;
  HEAP32[$4 + 12 >> 2] = 0;
  $12 = Math_fround($21 + Math_fround(Math_fround(Math_fround($12 * $9) + Math_fround($19 * $13)) + Math_fround($20 * $14)));
  HEAPF32[$4 + 8 >> 2] = $12;
  $1 = $4 + 8 | 0;
  $0 = $26 > $12;
  $8 = $22 > HEAPF32[($0 ? $4 : $4 + 16 | 0) + 8 >> 2];
  $10 = $8 ? $1 : $4 + 36 | 0;
  $27 = $4 + 24 | 0;
  HEAPF32[$2 + 8 >> 2] = HEAPF32[($0 ? $10 : $8 ? $27 : $10) >> 2] - $6;
  $11 = Math_fround($17 + Math_fround(Math_fround(Math_fround($11 * $9) + Math_fround($15 * $13)) + Math_fround($16 * $14)));
  HEAPF32[$4 + 4 >> 2] = $11;
  $30 = $2;
  $0 = $4 | 4;
  $8 = $25 > $11;
  $10 = $18 > HEAPF32[($8 ? $4 : $4 + 16 | 0) + 4 >> 2];
  $2 = $10 ? $0 : $4 + 40 | 0;
  $28 = $4 + 16 | 4;
  HEAPF32[$30 + 4 >> 2] = HEAPF32[($8 ? $2 : $10 ? $28 : $2) >> 2] - $6;
  $2 = $26 < $12;
  $8 = $22 < HEAPF32[($2 ? $4 : $4 + 16 | 0) + 8 >> 2];
  $1 = $8 ? $1 : $4 + 36 | 0;
  HEAPF32[$3 + 8 >> 2] = $6 + HEAPF32[($2 ? $1 : $8 ? $27 : $1) >> 2];
  $1 = $25 < $11;
  $2 = $18 < HEAPF32[($1 ? $4 : $4 + 16 | 0) + 4 >> 2];
  $0 = $2 ? $0 : $4 + 40 | 0;
  HEAPF32[$3 + 4 >> 2] = $6 + HEAPF32[($1 ? $0 : $2 ? $28 : $0) >> 2];
  $1 = $5 < $7;
  $0 = $24 < ($1 ? $7 : $5);
  $2 = $0 ? $4 : $4 + 44 | 0;
  HEAPF32[$3 >> 2] = $6 + HEAPF32[($1 ? $2 : $0 ? $4 + 16 | 0 : $2) >> 2];
 }
 
 function btConvexInternalShape__getLocalScaling_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 + 16 | 0;
 }
 
 function btTriangleShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $2 + 8 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
 }
 
 function btTriangleShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 8320;
 }
 
 function btCollisionShape__getAnisotropicRollingFrictionDirection_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 8 >> 2] = 1065353216;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 1065353216;
  HEAP32[$0 + 4 >> 2] = 1065353216;
 }
 
 function btConvexInternalShape__setMargin_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  HEAPF32[$0 + 48 >> 2] = $1;
 }
 
 function btConvexInternalShape__getMargin_28_29_20const($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 48 >> 2]);
 }
 
 function btConvexInternalShape__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 52;
 }
 
 function btConvexInternalShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 36 >> 2];
  HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 40 >> 2];
  HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 44 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 48 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = HEAP32[$0 + 48 >> 2];
  return 8329;
 }
 
 function btTriangleShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0;
  $3 = HEAPF32[$2 >> 2];
  $4 = HEAPF32[$2 + 4 >> 2];
  $5 = HEAPF32[$2 + 8 >> 2];
  $6 = Math_fround(Math_fround(Math_fround($3 * HEAPF32[$1 + 76 >> 2]) + Math_fround($4 * HEAPF32[$1 + 80 >> 2])) + Math_fround($5 * HEAPF32[$1 + 84 >> 2]));
  $7 = Math_fround(Math_fround(Math_fround($3 * HEAPF32[$1 + 92 >> 2]) + Math_fround($4 * HEAPF32[$1 + 96 >> 2])) + Math_fround($5 * HEAPF32[$1 + 100 >> 2]));
  $3 = Math_fround(Math_fround(Math_fround($3 * HEAPF32[$1 + 60 >> 2]) + Math_fround($4 * HEAPF32[$1 - -64 >> 2])) + Math_fround($5 * HEAPF32[$1 + 68 >> 2]));
  $1 = ($1 + 60 | 0) + (($3 < $6 ? ($6 < $7 ? 2 : 1) : ($3 < $7) << 1) << 4) | 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  $8 = $1 + 8 | 0;
  $1 = HEAP32[$8 >> 2];
  $2 = $0 + 8 | 0;
  $0 = HEAP32[$8 + 4 >> 2];
  HEAP32[$2 >> 2] = $1;
  HEAP32[$2 + 4 >> 2] = $0;
 }
 
 function btTriangleShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0;
  if (($3 | 0) >= 1) {
   $12 = $0 + 60 | 0;
   while (1) {
    $5 = HEAPF32[$1 >> 2];
    $7 = HEAPF32[$1 + 4 >> 2];
    $8 = HEAPF32[$1 + 8 >> 2];
    $10 = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$0 + 76 >> 2]) + Math_fround($7 * HEAPF32[$0 + 80 >> 2])) + Math_fround($8 * HEAPF32[$0 + 84 >> 2]));
    $11 = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$0 + 92 >> 2]) + Math_fround($7 * HEAPF32[$0 + 96 >> 2])) + Math_fround($8 * HEAPF32[$0 + 100 >> 2]));
    $5 = Math_fround(Math_fround(Math_fround($5 * HEAPF32[$0 + 60 >> 2]) + Math_fround($7 * HEAPF32[$0 + 64 >> 2])) + Math_fround($8 * HEAPF32[$0 + 68 >> 2]));
    $9 = (($5 < $10 ? ($10 < $11 ? 2 : 1) : ($5 < $11) << 1) << 4) + $12 | 0;
    $4 = $9;
    $6 = HEAP32[$4 + 4 >> 2];
    HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$2 + 4 >> 2] = $6;
    $4 = $4 + 8 | 0;
    $9 = HEAP32[$4 >> 2];
    $4 = HEAP32[$4 + 4 >> 2];
    $6 = $2 + 8 | 0;
    HEAP32[$6 >> 2] = $9;
    HEAP32[$6 + 4 >> 2] = $4;
    $1 = $1 + 16 | 0;
    $2 = $2 + 16 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
 }
 
 function btTriangleShape__getNumPreferredPenetrationDirections_28_29_20const($0) {
  $0 = $0 | 0;
  return 2;
 }
 
 function btTriangleShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0);
  $6 = HEAPF32[$0 + 92 >> 2];
  $7 = HEAPF32[$0 + 76 >> 2];
  $8 = HEAPF32[$0 + 80 >> 2];
  $10 = HEAPF32[$0 + 100 >> 2];
  $4 = HEAPF32[$0 + 68 >> 2];
  $11 = HEAPF32[$0 + 84 >> 2];
  $9 = HEAPF32[$0 + 96 >> 2];
  $3 = HEAPF32[$0 - -64 >> 2];
  $5 = HEAPF32[$0 + 60 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  $7 = Math_fround($7 - $5);
  $9 = Math_fround($9 - $3);
  $8 = Math_fround($8 - $3);
  $5 = Math_fround($6 - $5);
  $3 = Math_fround(Math_fround($7 * $9) - Math_fround($8 * $5));
  $12 = $3;
  $13 = Math_fround($3 * $3);
  $3 = Math_fround($10 - $4);
  $6 = Math_fround($11 - $4);
  $4 = Math_fround(Math_fround($8 * $3) - Math_fround($6 * $9));
  $3 = Math_fround(Math_fround($6 * $5) - Math_fround($7 * $3));
  $5 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($13 + Math_fround(Math_fround($4 * $4) + Math_fround($3 * $3))))));
  $6 = Math_fround($12 * $5);
  HEAPF32[$2 + 8 >> 2] = $6;
  $3 = Math_fround($3 * $5);
  HEAPF32[$2 + 4 >> 2] = $3;
  $4 = Math_fround($4 * $5);
  HEAPF32[$2 >> 2] = $4;
  if ($1) {
   HEAPF32[$2 + 8 >> 2] = -$6;
   HEAPF32[$2 + 4 >> 2] = -$3;
   HEAPF32[$2 >> 2] = -$4;
  }
 }
 
 function btTriangleShape__getNumVertices_28_29_20const($0) {
  $0 = $0 | 0;
  return 3;
 }
 
 function btTriangleShape__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $1, $2);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, ($1 + 1 | 0) % 3 | 0, $3);
 }
 
 function btTriangleShape__getVertex_28int_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $0 = ($1 << 4) + $0 | 0;
  $1 = $0 + 68 | 0;
  $4 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $3 = $2 + 8 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $1;
  $1 = $0 + 60 | 0;
  $0 = HEAP32[$1 >> 2];
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = $0;
  HEAP32[$2 + 4 >> 2] = $3;
 }
 
 function btTriangleShape__getNumPlanes_28_29_20const($0) {
  $0 = $0 | 0;
  return 1;
 }
 
 function btTriangleShape__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 124 >> 2]]($0, $3, $1, $2);
 }
 
 function btTriangleShape__isInside_28btVector3_20const__2c_20float_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0;
  $5 = global$0 - 32 | 0;
  global$0 = $5;
  $13 = HEAPF32[$0 + 60 >> 2];
  $7 = Math_fround(HEAPF32[$0 + 76 >> 2] - $13);
  $3 = HEAPF32[$0 - -64 >> 2];
  $9 = Math_fround(HEAPF32[$0 + 96 >> 2] - $3);
  $4 = Math_fround(HEAPF32[$0 + 80 >> 2] - $3);
  $10 = Math_fround(HEAPF32[$0 + 92 >> 2] - $13);
  $8 = Math_fround(Math_fround($7 * $9) - Math_fround($4 * $10));
  $11 = $8;
  $12 = Math_fround($8 * $8);
  $6 = HEAPF32[$0 + 68 >> 2];
  $8 = Math_fround(HEAPF32[$0 + 100 >> 2] - $6);
  $14 = Math_fround($4 * $8);
  $4 = Math_fround(HEAPF32[$0 + 84 >> 2] - $6);
  $9 = Math_fround($14 - Math_fround($4 * $9));
  $7 = Math_fround(Math_fround($4 * $10) - Math_fround($7 * $8));
  $4 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($12 + Math_fround(Math_fround($9 * $9) + Math_fround($7 * $7))))));
  $8 = Math_fround($11 * $4);
  $9 = Math_fround($9 * $4);
  $7 = Math_fround($7 * $4);
  $3 = Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2] * $8) + Math_fround(Math_fround(HEAPF32[$1 >> 2] * $9) + Math_fround(HEAPF32[$1 + 4 >> 2] * $7))) - Math_fround(Math_fround($6 * $8) + Math_fround(Math_fround($13 * $9) + Math_fround($3 * $7))));
  $13 = Math_fround(-$2);
  label$1 : {
   if (!($3 >= $13)) {
    break label$1
   }
   if (!($3 <= $2)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0, 0, $5 + 16 | 0, $5);
   $2 = HEAPF32[$5 + 16 >> 2];
   $6 = Math_fround(HEAPF32[$5 >> 2] - $2);
   $10 = HEAPF32[$5 + 20 >> 2];
   $4 = Math_fround(HEAPF32[$5 + 4 >> 2] - $10);
   $3 = Math_fround(Math_fround($7 * $6) - Math_fround($9 * $4));
   $11 = $3;
   $14 = Math_fround($3 * $3);
   $3 = Math_fround($8 * $4);
   $12 = HEAPF32[$5 + 24 >> 2];
   $4 = Math_fround(HEAPF32[$5 + 8 >> 2] - $12);
   $3 = Math_fround($3 - Math_fround($7 * $4));
   $6 = Math_fround(Math_fround($9 * $4) - Math_fround($8 * $6));
   $4 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($14 + Math_fround(Math_fround($3 * $3) + Math_fround($6 * $6))))));
   $11 = Math_fround($11 * $4);
   $3 = Math_fround($3 * $4);
   $6 = Math_fround($6 * $4);
   if (Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2] * $11) + Math_fround(Math_fround(HEAPF32[$1 >> 2] * $3) + Math_fround(HEAPF32[$1 + 4 >> 2] * $6))) - Math_fround(Math_fround($12 * $11) + Math_fround(Math_fround($2 * $3) + Math_fround($10 * $6)))) < $13) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0, 1, $5 + 16 | 0, $5);
   $2 = HEAPF32[$5 + 16 >> 2];
   $6 = Math_fround(HEAPF32[$5 >> 2] - $2);
   $10 = HEAPF32[$5 + 20 >> 2];
   $4 = Math_fround(HEAPF32[$5 + 4 >> 2] - $10);
   $3 = Math_fround(Math_fround($7 * $6) - Math_fround($9 * $4));
   $11 = $3;
   $14 = Math_fround($3 * $3);
   $3 = Math_fround($8 * $4);
   $12 = HEAPF32[$5 + 24 >> 2];
   $4 = Math_fround(HEAPF32[$5 + 8 >> 2] - $12);
   $3 = Math_fround($3 - Math_fround($7 * $4));
   $6 = Math_fround(Math_fround($9 * $4) - Math_fround($8 * $6));
   $4 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($14 + Math_fround(Math_fround($3 * $3) + Math_fround($6 * $6))))));
   $11 = Math_fround($11 * $4);
   $3 = Math_fround($3 * $4);
   $6 = Math_fround($6 * $4);
   if (!!(Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2] * $11) + Math_fround(Math_fround(HEAPF32[$1 >> 2] * $3) + Math_fround(HEAPF32[$1 + 4 >> 2] * $6))) - Math_fround(Math_fround($12 * $11) + Math_fround(Math_fround($2 * $3) + Math_fround($10 * $6)))) < $13)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0, 2, $5 + 16 | 0, $5);
   $6 = HEAPF32[$5 + 16 >> 2];
   $4 = Math_fround(HEAPF32[$5 >> 2] - $6);
   $2 = HEAPF32[$5 + 20 >> 2];
   $10 = Math_fround(HEAPF32[$5 + 4 >> 2] - $2);
   $3 = Math_fround(Math_fround($7 * $4) - Math_fround($9 * $10));
   $11 = $3;
   $12 = Math_fround($3 * $3);
   $14 = Math_fround($8 * $10);
   $3 = HEAPF32[$5 + 24 >> 2];
   $10 = Math_fround(HEAPF32[$5 + 8 >> 2] - $3);
   $7 = Math_fround($14 - Math_fround($7 * $10));
   $8 = Math_fround(Math_fround($9 * $10) - Math_fround($8 * $4));
   $9 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($12 + Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8))))));
   $4 = Math_fround($11 * $9);
   $7 = Math_fround($7 * $9);
   $8 = Math_fround($8 * $9);
   if (Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2] * $4) + Math_fround(Math_fround(HEAPF32[$1 >> 2] * $7) + Math_fround(HEAPF32[$1 + 4 >> 2] * $8))) - Math_fround(Math_fround($3 * $4) + Math_fround(Math_fround($6 * $7) + Math_fround($2 * $8)))) < $13) {
    break label$1
   }
   $15 = 1;
  }
  global$0 = $5 + 32 | 0;
  return $15 | 0;
 }
 
 function btTriangleShape__getPlaneEquation_28int_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0;
  $7 = HEAPF32[$0 + 92 >> 2];
  $8 = HEAPF32[$0 + 76 >> 2];
  $9 = HEAPF32[$0 + 80 >> 2];
  $11 = HEAPF32[$0 + 100 >> 2];
  $1 = $0 + 68 | 0;
  $6 = HEAPF32[$1 >> 2];
  $12 = HEAPF32[$0 + 84 >> 2];
  $10 = HEAPF32[$0 + 96 >> 2];
  $4 = HEAPF32[$0 - -64 >> 2];
  $5 = HEAPF32[$0 + 60 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  $8 = Math_fround($8 - $5);
  $10 = Math_fround($10 - $4);
  $9 = Math_fround($9 - $4);
  $5 = Math_fround($7 - $5);
  $4 = Math_fround(Math_fround($8 * $10) - Math_fround($9 * $5));
  $13 = $4;
  $14 = Math_fround($4 * $4);
  $4 = Math_fround($11 - $6);
  $7 = Math_fround($12 - $6);
  $6 = Math_fround(Math_fround($9 * $4) - Math_fround($7 * $10));
  $4 = Math_fround(Math_fround($7 * $5) - Math_fround($8 * $4));
  $5 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($14 + Math_fround(Math_fround($6 * $6) + Math_fround($4 * $4))))));
  HEAPF32[$2 + 8 >> 2] = $13 * $5;
  HEAPF32[$2 + 4 >> 2] = $4 * $5;
  HEAPF32[$2 >> 2] = $6 * $5;
  $15 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $2 = $3 + 8 | 0;
  HEAP32[$2 >> 2] = $15;
  HEAP32[$2 + 4 >> 2] = $1;
  $2 = HEAP32[$0 + 64 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$0 + 60 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
 }
 
 function btBU_Simplex1to4__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 8528;
 }
 
 function btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const($0) {
  $0 = $0 | 0;
  return 0;
 }
 
 function btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
 }
 
 function GIM_ShapeRetriever__ChildShapeRetriever__getChildShape_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2];
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 128 >> 2]]($0, $1) | 0;
 }
 
 function GIM_ShapeRetriever__TriangleShapeRetriever__getChildShape_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $3 = HEAP32[$2 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 104 >> 2]]($3, $1, $2 + 4 | 0);
  return HEAP32[$0 + 4 >> 2] + 4 | 0;
 }
 
 function GIM_ShapeRetriever__TetraShapeRetriever__getChildShape_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  $3 = HEAP32[$2 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 108 >> 2]]($3, $1, $2 + 112 | 0);
  return HEAP32[$0 + 4 >> 2] + 112 | 0;
 }
 
 function btGImpactTriangleCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = global$0 - 144 | 0;
  global$0 = $5;
  $8 = btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($5 + 32 | 0);
  $4 = $1 + 8 | 0;
  $7 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  $6 = $5 + 100 | 0;
  HEAP32[$6 >> 2] = $7;
  HEAP32[$6 + 4 >> 2] = $4;
  $6 = HEAP32[$1 + 20 >> 2];
  $4 = $5 + 108 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $4 = $1 + 24 | 0;
  $7 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  $6 = $5 + 116 | 0;
  HEAP32[$6 >> 2] = $7;
  HEAP32[$6 + 4 >> 2] = $4;
  $6 = HEAP32[$1 + 36 >> 2];
  $4 = $5 + 124 | 0;
  HEAP32[$4 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$4 + 4 >> 2] = $6;
  $4 = $1 + 40 | 0;
  $7 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  $6 = $5 + 132 | 0;
  HEAP32[$6 >> 2] = $7;
  HEAP32[$6 + 4 >> 2] = $4;
  HEAP32[$5 + 36 >> 2] = 1;
  HEAP32[$5 + 32 >> 2] = 8128;
  $6 = HEAP32[$1 + 4 >> 2];
  HEAP32[$5 + 92 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$5 + 96 >> 2] = $6;
  HEAP32[$5 + 80 >> 2] = HEAP32[$0 + 24 >> 2];
  $1 = HEAP32[$0 + 4 >> 2];
  $7 = HEAPU8[$0 + 20 | 0];
  label$1 : {
   if ($7) {
    HEAP32[$1 + 28 >> 2] = $2;
    $4 = $1 + 24 | 0;
    break label$1;
   }
   HEAP32[$1 + 36 >> 2] = $2;
   $4 = $1 + 32 | 0;
  }
  HEAP32[$4 >> 2] = $3;
  $4 = HEAP32[$0 + 12 >> 2];
  $6 = HEAP32[$4 + 8 >> 2];
  HEAP32[$5 + 20 >> 2] = HEAP32[$4 + 12 >> 2];
  HEAP32[$5 + 16 >> 2] = $6;
  HEAP32[$5 + 28 >> 2] = $3;
  HEAP32[$5 + 24 >> 2] = $2;
  HEAP32[$5 + 8 >> 2] = $4;
  $2 = HEAP32[$1 + 16 >> 2];
  $3 = HEAP32[$2 + 8 >> 2];
  $4 = HEAP32[$3 + 8 >> 2];
  HEAP32[$5 + 12 >> 2] = $5 + 32;
  if (($4 | 0) == ($6 | 0)) {
   $2 = $2 + 8 | 0
  } else {
   $3 = HEAP32[$2 + 12 >> 2];
   $2 = $2 + 12 | 0;
  }
  HEAP32[$2 >> 2] = $5 + 8;
  btGImpactCollisionAlgorithm__gimpact_vs_shape_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btGImpactShapeInterface_20const__2c_20btCollisionShape_20const__2c_20bool_29($1, HEAP32[$0 + 8 >> 2], $5 + 8 | 0, HEAP32[$0 + 16 >> 2], $5 + 32 | 0, ($7 | 0) != 0);
  $0 = HEAP32[HEAP32[$0 + 4 >> 2] + 16 >> 2];
  HEAP32[$0 + (HEAP32[HEAP32[$0 + 8 >> 2] + 8 >> 2] == HEAP32[$5 + 16 >> 2] ? 8 : 12) >> 2] = $3;
  btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($8);
  global$0 = $5 + 144 | 0;
 }
 
 function btGImpactCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 40) | 0;
  btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1);
  HEAP32[$0 >> 2] = 8056;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  return $0 | 0;
 }
 
 function btCollisionObject__btCollisionObject_28_29($0) {
  var $1 = 0;
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP32[$0 >> 2] = 8964;
  HEAP32[$0 + 188 >> 2] = 0;
  HEAP32[$0 + 192 >> 2] = 0;
  HEAP32[$0 + 180 >> 2] = 0;
  HEAP32[$0 + 184 >> 2] = 1566444395;
  HEAP32[$0 + 164 >> 2] = 1065353216;
  HEAP32[$0 + 168 >> 2] = 1065353216;
  HEAP32[$0 + 276 >> 2] = 0;
  HEAP32[$0 + 280 >> 2] = 0;
  HEAP32[$0 + 268 >> 2] = 1065353216;
  HEAP32[$0 + 272 >> 2] = 0;
  HEAP32[$0 + 260 >> 2] = -1;
  HEAP32[$0 + 264 >> 2] = -1;
  HEAP32[$0 + 252 >> 2] = 1;
  HEAP32[$0 + 256 >> 2] = 0;
  HEAP32[$0 + 244 >> 2] = 1036831949;
  HEAP32[$0 + 248 >> 2] = 1176256512;
  HEAP32[$0 + 236 >> 2] = 0;
  HEAP32[$0 + 240 >> 2] = 0;
  HEAP32[$0 + 228 >> 2] = 1056964608;
  HEAP32[$0 + 232 >> 2] = 0;
  HEAP32[$0 + 220 >> 2] = 1;
  HEAP32[$0 + 224 >> 2] = 0;
  HEAP32[$0 + 212 >> 2] = -1;
  HEAP32[$0 + 216 >> 2] = -1;
  HEAP32[$0 + 204 >> 2] = 1;
  HEAP32[$0 + 208 >> 2] = -1;
  $1 = $0 + 140 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 148 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 156 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 172 | 0;
  HEAP32[$1 >> 2] = 1065353216;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 196 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 300 | 0] = 1;
  HEAP32[$0 + 304 >> 2] = 0;
  HEAP32[$0 + 296 >> 2] = 0;
  $1 = $0 + 288 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 1065353216;
  $1 = $0 + 16 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 28 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 1065353216;
  $1 = $0 + 36 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 44 >> 2] = 1065353216;
  $1 = $0 + 56 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 72 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 - -64 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1065353216;
  $1 = $0 + 80 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 88 >> 2] = 1065353216;
  $1 = $0 + 100 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 92 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP32[$0 + 108 >> 2] = 1065353216;
  $1 = $0 + 120 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 112 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
 }
 
 function btCollisionObject___btCollisionObject_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 8964;
  $1 = HEAP32[$0 + 296 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 300 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 296 >> 2] = 0;
  }
  HEAP32[$0 + 296 >> 2] = 0;
  HEAP32[$0 + 288 >> 2] = 0;
  HEAP32[$0 + 292 >> 2] = 0;
  HEAP8[$0 + 300 | 0] = 1;
  return $0 | 0;
 }
 
 function btCollisionObject___btCollisionObject_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 8964;
  $1 = HEAP32[$0 + 296 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 300 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 296 >> 2] = 0;
  }
  HEAP32[$0 + 296 >> 2] = 0;
  HEAP32[$0 + 288 >> 2] = 0;
  HEAP32[$0 + 292 >> 2] = 0;
  HEAP8[$0 + 300 | 0] = 1;
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btCollisionObject__setActivationState_28int_29_20const($0, $1) {
  if ((HEAP32[$0 + 220 >> 2] & -2) != 4) {
   HEAP32[$0 + 220 >> 2] = $1
  }
 }
 
 function btCollisionObject__activate_28bool_29_20const($0, $1) {
  if (!(HEAPU8[$0 + 204 | 0] & 3 ? !$1 : 0)) {
   if ((HEAP32[$0 + 220 >> 2] & -2) != 4) {
    HEAP32[$0 + 220 >> 2] = 1
   }
   HEAP32[$0 + 224 >> 2] = 0;
  }
 }
 
 function btCollisionObject__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 44 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$1 + 48 >> 2] = HEAP32[$0 + 36 >> 2];
  HEAP32[$1 + 52 >> 2] = HEAP32[$0 + 40 >> 2];
  HEAP32[$1 + 56 >> 2] = HEAP32[$0 + 44 >> 2];
  HEAP32[$1 + 60 >> 2] = HEAP32[$0 + 48 >> 2];
  HEAP32[$1 + 64 >> 2] = HEAP32[$0 + 52 >> 2];
  HEAP32[$1 + 68 >> 2] = HEAP32[$0 + 56 >> 2];
  HEAP32[$1 + 72 >> 2] = HEAP32[$0 + 60 >> 2];
  HEAP32[$1 + 76 >> 2] = HEAP32[$0 - -64 >> 2];
  HEAP32[$1 + 80 >> 2] = HEAP32[$0 + 68 >> 2];
  HEAP32[$1 + 84 >> 2] = HEAP32[$0 + 72 >> 2];
  HEAP32[$1 + 88 >> 2] = HEAP32[$0 + 76 >> 2];
  HEAP32[$1 + 92 >> 2] = HEAP32[$0 + 80 >> 2];
  HEAP32[$1 + 96 >> 2] = HEAP32[$0 + 84 >> 2];
  HEAP32[$1 + 100 >> 2] = HEAP32[$0 + 88 >> 2];
  HEAP32[$1 + 104 >> 2] = HEAP32[$0 + 92 >> 2];
  HEAP32[$1 + 108 >> 2] = HEAP32[$0 + 96 >> 2];
  HEAP32[$1 + 112 >> 2] = HEAP32[$0 + 100 >> 2];
  HEAP32[$1 + 116 >> 2] = HEAP32[$0 + 104 >> 2];
  HEAP32[$1 + 120 >> 2] = HEAP32[$0 + 108 >> 2];
  HEAP32[$1 + 124 >> 2] = HEAP32[$0 + 112 >> 2];
  HEAP32[$1 + 128 >> 2] = HEAP32[$0 + 116 >> 2];
  HEAP32[$1 + 132 >> 2] = HEAP32[$0 + 120 >> 2];
  HEAP32[$1 + 136 >> 2] = HEAP32[$0 + 124 >> 2];
  HEAP32[$1 + 140 >> 2] = HEAP32[$0 + 128 >> 2];
  HEAP32[$1 + 144 >> 2] = HEAP32[$0 + 132 >> 2];
  HEAP32[$1 + 148 >> 2] = HEAP32[$0 + 136 >> 2];
  HEAP32[$1 + 152 >> 2] = HEAP32[$0 + 140 >> 2];
  HEAP32[$1 + 156 >> 2] = HEAP32[$0 + 144 >> 2];
  HEAP32[$1 + 160 >> 2] = HEAP32[$0 + 148 >> 2];
  HEAP32[$1 + 164 >> 2] = HEAP32[$0 + 152 >> 2];
  HEAP32[$1 + 168 >> 2] = HEAP32[$0 + 156 >> 2];
  HEAP32[$1 + 172 >> 2] = HEAP32[$0 + 160 >> 2];
  HEAP32[$1 + 176 >> 2] = HEAP32[$0 + 164 >> 2];
  HEAP32[$1 + 180 >> 2] = HEAP32[$0 + 168 >> 2];
  HEAP32[$1 + 184 >> 2] = HEAP32[$0 + 172 >> 2];
  HEAP32[$1 + 188 >> 2] = HEAP32[$0 + 176 >> 2];
  HEAP32[$1 + 232 >> 2] = HEAP32[$0 + 180 >> 2];
  HEAP32[$1 + 192 >> 2] = HEAP32[$0 + 184 >> 2];
  HEAP32[$1 >> 2] = 0;
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$0 + 192 >> 2]) | 0;
  $3 = HEAP32[$0 + 228 >> 2];
  HEAP32[$1 + 196 >> 2] = HEAP32[$0 + 224 >> 2];
  HEAP32[$1 + 200 >> 2] = $3;
  $3 = HEAP32[$0 + 212 >> 2];
  HEAP32[$1 + 240 >> 2] = HEAP32[$0 + 208 >> 2];
  HEAP32[$1 + 244 >> 2] = $3;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = $4;
  HEAP32[$1 + 236 >> 2] = HEAP32[$0 + 204 >> 2];
  HEAP32[$1 + 248 >> 2] = HEAP32[$0 + 220 >> 2];
  HEAP32[$1 + 204 >> 2] = HEAP32[$0 + 236 >> 2];
  HEAP32[$1 + 208 >> 2] = HEAP32[$0 + 244 >> 2];
  HEAP32[$1 + 212 >> 2] = HEAP32[$0 + 248 >> 2];
  HEAP32[$1 + 216 >> 2] = HEAP32[$0 + 232 >> 2];
  HEAP32[$1 + 252 >> 2] = HEAP32[$0 + 252 >> 2];
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, $0) | 0;
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $3) | 0;
  HEAP32[$1 + 12 >> 2] = $4;
  if ($4) {
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2, $3)
  }
  HEAP32[$1 + 220 >> 2] = HEAP32[$0 + 268 >> 2];
  $2 = HEAP32[$0 + 280 >> 2];
  $3 = HEAP32[$0 + 276 >> 2];
  $0 = HEAP32[$0 + 272 >> 2];
  HEAP32[$1 + 260 >> 2] = 0;
  HEAP32[$1 + 224 >> 2] = $0;
  HEAP32[$1 + 228 >> 2] = $3;
  HEAP32[$1 + 256 >> 2] = $2;
  return 8992;
 }
 
 function btCollisionObject__serializeSingleObject_28btSerializer__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2 = ((((wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1, wasm2js_i32$2 = $2), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$2 + 8 >> 2], $1) | 0), wasm2js_i32$4 = 1245859651), wasm2js_i32$5 = $0), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function btCollisionObject__setCollisionShape_28btCollisionShape__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 200 >> 2] = $1;
  HEAP32[$0 + 192 >> 2] = $1;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
 }
 
 function btCollisionObject__checkCollideWithOverride_28btCollisionObject_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $3 = HEAP32[$0 + 288 >> 2];
  $2 = $3;
  label$1 : {
   if (($3 | 0) < 1) {
    break label$1
   }
   $0 = HEAP32[$0 + 296 >> 2];
   $2 = 0;
   while (1) {
    if (($1 | 0) == HEAP32[$0 >> 2]) {
     break label$1
    }
    $0 = $0 + 4 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
   $2 = $3;
  }
  return ($2 | 0) >= ($3 | 0) | 0;
 }
 
 function btCollisionObject__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 264;
 }
 
 function btBoxShape__btBoxShape_28btVector3_20const__29($0, $1) {
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0);
  btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($0);
  $2 = HEAPF32[$1 >> 2];
  $4 = HEAPF32[$1 + 4 >> 2];
  $3 = HEAPF32[$1 + 8 >> 2];
  HEAP32[$0 + 44 >> 2] = 0;
  $5 = Math_fround($3 * HEAPF32[$0 + 24 >> 2]);
  $3 = HEAPF32[$0 + 48 >> 2];
  HEAPF32[$0 + 40 >> 2] = $5 - $3;
  HEAPF32[$0 + 36 >> 2] = Math_fround($4 * HEAPF32[$0 + 20 >> 2]) - $3;
  HEAPF32[$0 + 32 >> 2] = Math_fround($2 * HEAPF32[$0 + 16 >> 2]) - $3;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 >> 2] = 9056;
  $2 = HEAPF32[$1 >> 2];
  $4 = HEAPF32[$1 + 8 >> 2];
  $5 = HEAPF32[$1 + 4 >> 2];
  $2 = Math_fround(HEAPF32[(($2 < $5 ? ($2 < $4 ^ 1) << 1 : $5 < $4 ? 1 : 2) << 2) + $1 >> 2] * Math_fround(.10000000149011612));
  if (!!($2 < $3)) {
   btBoxShape__setMargin_28float_29($0, $2)
  }
 }
 
 function btBoxShape__setMargin_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $5 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  HEAPF32[$0 + 48 >> 2] = $1;
  $2 = $0 + 40 | 0;
  $1 = HEAPF32[$2 >> 2];
  $3 = $0 + 36 | 0;
  $7 = HEAPF32[$3 >> 2];
  $8 = HEAPF32[$0 + 32 >> 2];
  $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $11 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  HEAP32[$0 + 44 >> 2] = 0;
  HEAPF32[$3 >> 2] = Math_fround($5 + $7) - $10;
  HEAPF32[$0 + 32 >> 2] = Math_fround($4 + $8) - $9;
  HEAPF32[$2 >> 2] = Math_fround($6 + $1) - $11;
 }
 
 function btBoxShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0);
  $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $9 = HEAPF32[$1 + 52 >> 2];
  $7 = HEAPF32[$1 + 20 >> 2];
  $12 = HEAPF32[$1 + 24 >> 2];
  $10 = HEAPF32[$1 + 56 >> 2];
  $8 = HEAPF32[$1 + 36 >> 2];
  $5 = HEAPF32[$0 + 36 >> 2];
  $13 = HEAPF32[$1 + 40 >> 2];
  $14 = HEAPF32[$0 + 40 >> 2];
  $11 = HEAPF32[$1 + 48 >> 2];
  $15 = HEAPF32[$1 >> 2];
  $16 = HEAPF32[$1 + 4 >> 2];
  $17 = HEAPF32[$1 + 8 >> 2];
  $18 = HEAPF32[$1 + 16 >> 2];
  $19 = HEAPF32[$1 + 32 >> 2];
  $6 = HEAPF32[$0 + 32 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  $6 = Math_fround($4 + $6);
  $5 = Math_fround($4 + $5);
  $4 = Math_fround($4 + $14);
  $8 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($19))) + Math_fround($5 * Math_fround(Math_abs($8)))) + Math_fround($4 * Math_fround(Math_abs($13))));
  HEAPF32[$2 + 8 >> 2] = $10 - $8;
  $7 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($18))) + Math_fround($5 * Math_fround(Math_abs($7)))) + Math_fround($4 * Math_fround(Math_abs($12))));
  HEAPF32[$2 + 4 >> 2] = $9 - $7;
  $4 = Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_abs($15))) + Math_fround($5 * Math_fround(Math_abs($16)))) + Math_fround($4 * Math_fround(Math_abs($17))));
  HEAPF32[$2 >> 2] = $11 - $4;
  HEAP32[$3 + 12 >> 2] = 0;
  HEAPF32[$3 + 8 >> 2] = $10 + $8;
  HEAPF32[$3 + 4 >> 2] = $7 + $9;
  HEAPF32[$3 >> 2] = $4 + $11;
 }
 
 function btBoxShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
  $3 = HEAPF32[$0 + 40 >> 2];
  $4 = HEAPF32[$0 + 36 >> 2];
  $5 = HEAPF32[$0 + 32 >> 2];
  $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  HEAP32[$2 + 12 >> 2] = 0;
  $1 = Math_fround($1 / Math_fround(12.0));
  $5 = Math_fround($5 + $6);
  $5 = Math_fround($5 + $5);
  $5 = Math_fround($5 * $5);
  $4 = Math_fround($4 + $7);
  $4 = Math_fround($4 + $4);
  $4 = Math_fround($4 * $4);
  HEAPF32[$2 + 8 >> 2] = $1 * Math_fround($5 + $4);
  $3 = Math_fround($3 + $8);
  $3 = Math_fround($3 + $3);
  $3 = Math_fround($3 * $3);
  HEAPF32[$2 + 4 >> 2] = $1 * Math_fround($5 + $3);
  HEAPF32[$2 >> 2] = $1 * Math_fround($4 + $3);
 }
 
 function btBoxShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0);
  $2 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $5 = $0 + 20 | 0;
  $9 = HEAPF32[$5 >> 2];
  $6 = $0 + 36 | 0;
  $10 = HEAPF32[$6 >> 2];
  $7 = $0 + 24 | 0;
  $11 = HEAPF32[$7 >> 2];
  $8 = $0 + 40 | 0;
  $12 = HEAPF32[$8 >> 2];
  $13 = HEAPF32[$0 + 16 >> 2];
  $14 = HEAPF32[$0 + 32 >> 2];
  btConvexInternalShape__setLocalScaling_28btVector3_20const__29($0, $1);
  HEAP32[$0 + 44 >> 2] = 0;
  HEAPF32[$8 >> 2] = Math_fround(Math_fround(Math_fround($4 + $12) / $11) * HEAPF32[$7 >> 2]) - $4;
  HEAPF32[$6 >> 2] = Math_fround(Math_fround(Math_fround($3 + $10) / $9) * HEAPF32[$5 >> 2]) - $3;
  HEAPF32[$0 + 32 >> 2] = Math_fround(Math_fround(Math_fround($2 + $14) / $13) * HEAPF32[$0 + 16 >> 2]) - $2;
 }
 
 function btBoxShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 9212;
 }
 
 function btBoxShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
  $3 = HEAPF32[$1 + 36 >> 2];
  $4 = HEAPF32[$1 + 40 >> 2];
  $5 = HEAPF32[$1 + 32 >> 2];
  $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
  $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
  $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
  HEAP32[$0 + 12 >> 2] = 0;
  $4 = Math_fround($4 + $8);
  HEAPF32[$0 + 8 >> 2] = HEAPF32[$2 + 8 >> 2] >= Math_fround(0.0) ? $4 : Math_fround(-$4);
  $3 = Math_fround($3 + $7);
  HEAPF32[$0 + 4 >> 2] = HEAPF32[$2 + 4 >> 2] >= Math_fround(0.0) ? $3 : Math_fround(-$3);
  $3 = Math_fround($5 + $6);
  HEAPF32[$0 >> 2] = HEAPF32[$2 >> 2] >= Math_fround(0.0) ? $3 : Math_fround(-$3);
 }
 
 function btBoxShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0);
  HEAP32[$0 + 12 >> 2] = 0;
  $3 = HEAPF32[$1 + 32 >> 2];
  HEAPF32[$0 >> 2] = HEAPF32[$2 >> 2] >= Math_fround(0.0) ? $3 : Math_fround(-$3);
  $3 = HEAPF32[$1 + 40 >> 2];
  HEAPF32[$0 + 8 >> 2] = HEAPF32[$2 + 8 >> 2] >= Math_fround(0.0) ? $3 : Math_fround(-$3);
  $3 = HEAPF32[$1 + 36 >> 2];
  HEAPF32[$0 + 4 >> 2] = HEAPF32[$2 + 4 >> 2] >= Math_fround(0.0) ? $3 : Math_fround(-$3);
 }
 
 function btBoxShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  if (($3 | 0) >= 1) {
   while (1) {
    $4 = $1 + $5 | 0;
    $9 = HEAPF32[$4 + 4 >> 2];
    $10 = HEAPF32[$4 + 8 >> 2];
    $11 = HEAPF32[$4 >> 2];
    $6 = HEAPF32[$0 + 36 >> 2];
    $7 = HEAPF32[$0 + 40 >> 2];
    $8 = HEAPF32[$0 + 32 >> 2];
    $4 = $2 + $5 | 0;
    HEAP32[$4 + 12 >> 2] = 0;
    HEAPF32[$4 >> 2] = $11 >= Math_fround(0.0) ? $8 : Math_fround(-$8);
    HEAPF32[$4 + 8 >> 2] = $10 >= Math_fround(0.0) ? $7 : Math_fround(-$7);
    HEAPF32[$4 + 4 >> 2] = $9 >= Math_fround(0.0) ? $6 : Math_fround(-$6);
    $5 = $5 + 16 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   }
  }
 }
 
 function btBoxShape__getNumPreferredPenetrationDirections_28_29_20const($0) {
  $0 = $0 | 0;
  return 6;
 }
 
 function btBoxShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if ($1 >>> 0 <= 5) {
   HEAP32[$2 + 12 >> 2] = 0;
   $1 = $1 << 2;
   HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 9264 >> 2];
   HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 9240 >> 2];
   HEAP32[$2 >> 2] = HEAP32[$1 + 9216 >> 2];
  }
 }
 
 function btBoxShape__getNumVertices_28_29_20const($0) {
  $0 = $0 | 0;
  return 8;
 }
 
 function btBoxShape__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = $0;
  if ($1 >>> 0 <= 11) {
   $1 = $1 << 2;
   $5 = HEAP32[$1 + 9336 >> 2];
   $6 = HEAP32[$1 + 9288 >> 2];
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($4, $6, $2);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $5, $3);
 }
 
 function btBoxShape__getVertex_28int_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
  $4 = HEAPF32[$0 + 40 >> 2];
  $3 = HEAPF32[$0 + 36 >> 2];
  $5 = HEAPF32[$0 + 32 >> 2];
  $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  HEAP32[$2 + 12 >> 2] = 0;
  $3 = Math_fround($3 + $7);
  $0 = $1 >>> 1 & 1;
  HEAPF32[$2 + 4 >> 2] = Math_fround($3 * Math_fround($0 ^ 1)) - Math_fround($3 * Math_fround($0 | 0));
  $3 = Math_fround($5 + $6);
  $0 = $1 & 1;
  HEAPF32[$2 >> 2] = Math_fround($3 * Math_fround($0 ^ 1)) - Math_fround($3 * Math_fround($0 | 0));
  $4 = Math_fround($4 + $8);
  $0 = $1 >>> 2 & 1;
  HEAPF32[$2 + 8 >> 2] = Math_fround($4 * Math_fround($0 ^ 1)) - Math_fround($4 * Math_fround($0 | 0));
 }
 
 function btBoxShape__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 - 48 | 0;
  global$0 = $4;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 124 >> 2]]($0, $4 + 32 | 0, $3);
  HEAP32[$1 + 12 >> 2] = 0;
  $3 = HEAP32[$4 + 40 >> 2];
  HEAP32[$1 + 8 >> 2] = $3;
  $5 = HEAP32[$4 + 36 >> 2];
  HEAP32[$1 + 4 >> 2] = $5;
  $6 = $1;
  $1 = HEAP32[$4 + 32 >> 2];
  HEAP32[$6 >> 2] = $1;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = $3 ^ -2147483648;
  HEAP32[$4 + 4 >> 2] = $5 ^ -2147483648;
  HEAP32[$4 >> 2] = $1 ^ -2147483648;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($4 + 16 | 0, $0, $4);
  $0 = $4 + 24 | 0;
  $3 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $1 = $2 + 8 | 0;
  HEAP32[$1 >> 2] = $3;
  HEAP32[$1 + 4 >> 2] = $0;
  $1 = HEAP32[$4 + 20 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$4 + 16 >> 2];
  HEAP32[$2 + 4 >> 2] = $1;
  global$0 = $4 + 48 | 0;
 }
 
 function btBoxShape__isInside_28btVector3_20const__2c_20float_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0;
  $3 = HEAPF32[$1 >> 2];
  $4 = HEAPF32[$0 + 32 >> 2];
  label$1 : {
   if (!($3 <= Math_fround($4 + $2))) {
    break label$1
   }
   if (!($3 >= Math_fround(Math_fround(-$4) - $2))) {
    break label$1
   }
   $3 = HEAPF32[$1 + 4 >> 2];
   $4 = HEAPF32[$0 + 36 >> 2];
   if (!($3 <= Math_fround($4 + $2))) {
    break label$1
   }
   if (!($3 >= Math_fround(Math_fround(-$4) - $2))) {
    break label$1
   }
   $3 = HEAPF32[$1 + 8 >> 2];
   $4 = HEAPF32[$0 + 40 >> 2];
   if (!($3 <= Math_fround($4 + $2))) {
    break label$1
   }
   $5 = $3 >= Math_fround(Math_fround(-$4) - $2);
  }
  return $5 | 0;
 }
 
 function btBoxShape__getPlaneEquation_28btVector4__2c_20int_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0);
  if ($2 >>> 0 <= 5) {
   $5 = HEAPF32[$0 + 40 >> 2];
   $6 = HEAPF32[$0 + 36 >> 2];
   $4 = HEAPF32[$0 + 32 >> 2];
   $0 = 1065353216;
   $3 = $2;
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       switch ($2 - 1 | 0) {
       case 0:
        $2 = 0;
        $0 = -1082130432;
        $3 = 0;
        break label$2;
       case 1:
        $2 = 1065353216;
        break label$3;
       case 2:
        $2 = -1082130432;
        break label$3;
       case 3:
        $3 = 1065353216;
        break label$4;
       case 4:
        break label$5;
       default:
        break label$2;
       };
      }
      $3 = -1082130432;
     }
     $0 = 0;
     $4 = $5;
     $2 = 0;
     break label$2;
    }
    $0 = 0;
    $4 = $6;
    $3 = 0;
   }
   HEAP32[$1 + 8 >> 2] = $3;
   HEAP32[$1 + 4 >> 2] = $2;
   HEAP32[$1 >> 2] = $0;
   HEAPF32[$1 + 12 >> 2] = -$4;
  }
 }
 
 function btCylinderShape__btCylinderShape_28btVector3_20const__29($0, $1) {
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0);
  btConvexInternalShape__btConvexInternalShape_28_29($0);
  $2 = HEAPF32[$1 >> 2];
  $4 = HEAPF32[$1 + 4 >> 2];
  $3 = HEAPF32[$1 + 8 >> 2];
  HEAP32[$0 + 44 >> 2] = 0;
  $5 = Math_fround($3 * HEAPF32[$0 + 24 >> 2]);
  $3 = HEAPF32[$0 + 48 >> 2];
  HEAPF32[$0 + 40 >> 2] = $5 - $3;
  HEAPF32[$0 + 36 >> 2] = Math_fround($4 * HEAPF32[$0 + 20 >> 2]) - $3;
  HEAPF32[$0 + 32 >> 2] = Math_fround($2 * HEAPF32[$0 + 16 >> 2]) - $3;
  HEAP32[$0 + 56 >> 2] = 1;
  HEAP32[$0 >> 2] = 9392;
  $2 = HEAPF32[$1 >> 2];
  $4 = HEAPF32[$1 + 8 >> 2];
  $5 = HEAPF32[$1 + 4 >> 2];
  $2 = Math_fround(HEAPF32[(($2 < $5 ? ($2 < $4 ^ 1) << 1 : $5 < $4 ? 1 : 2) << 2) + $1 >> 2] * Math_fround(.10000000149011612));
  if (!!($2 < $3)) {
   btBoxShape__setMargin_28float_29($0, $2)
  }
  HEAP32[$0 + 4 >> 2] = 13;
 }
 
 function btCylinderShapeX__btCylinderShapeX_28btVector3_20const__29($0, $1) {
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0);
  btConvexInternalShape__btConvexInternalShape_28_29($0);
  $2 = HEAPF32[$1 >> 2];
  $4 = HEAPF32[$1 + 4 >> 2];
  $3 = HEAPF32[$1 + 8 >> 2];
  HEAP32[$0 + 44 >> 2] = 0;
  $5 = Math_fround($3 * HEAPF32[$0 + 24 >> 2]);
  $3 = HEAPF32[$0 + 48 >> 2];
  HEAPF32[$0 + 40 >> 2] = $5 - $3;
  HEAPF32[$0 + 36 >> 2] = Math_fround($4 * HEAPF32[$0 + 20 >> 2]) - $3;
  HEAPF32[$0 + 32 >> 2] = Math_fround($2 * HEAPF32[$0 + 16 >> 2]) - $3;
  HEAP32[$0 + 56 >> 2] = 1;
  HEAP32[$0 >> 2] = 9392;
  $2 = HEAPF32[$1 >> 2];
  $4 = HEAPF32[$1 + 8 >> 2];
  $5 = HEAPF32[$1 + 4 >> 2];
  $2 = Math_fround(HEAPF32[(($2 < $5 ? ($2 < $4 ^ 1) << 1 : $5 < $4 ? 1 : 2) << 2) + $1 >> 2] * Math_fround(.10000000149011612));
  if (!!($2 < $3)) {
   btBoxShape__setMargin_28float_29($0, $2)
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 >> 2] = 9496;
  HEAP32[$0 + 4 >> 2] = 13;
 }
 
 function btCylinderShapeZ__btCylinderShapeZ_28btVector3_20const__29($0, $1) {
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0);
  btConvexInternalShape__btConvexInternalShape_28_29($0);
  $2 = HEAPF32[$1 >> 2];
  $4 = HEAPF32[$1 + 4 >> 2];
  $3 = HEAPF32[$1 + 8 >> 2];
  HEAP32[$0 + 44 >> 2] = 0;
  $5 = Math_fround($3 * HEAPF32[$0 + 24 >> 2]);
  $3 = HEAPF32[$0 + 48 >> 2];
  HEAPF32[$0 + 40 >> 2] = $5 - $3;
  HEAPF32[$0 + 36 >> 2] = Math_fround($4 * HEAPF32[$0 + 20 >> 2]) - $3;
  HEAPF32[$0 + 32 >> 2] = Math_fround($2 * HEAPF32[$0 + 16 >> 2]) - $3;
  HEAP32[$0 + 56 >> 2] = 1;
  HEAP32[$0 >> 2] = 9392;
  $2 = HEAPF32[$1 >> 2];
  $4 = HEAPF32[$1 + 8 >> 2];
  $5 = HEAPF32[$1 + 4 >> 2];
  $2 = Math_fround(HEAPF32[(($2 < $5 ? ($2 < $4 ^ 1) << 1 : $5 < $4 ? 1 : 2) << 2) + $1 >> 2] * Math_fround(.10000000149011612));
  if (!!($2 < $3)) {
   btBoxShape__setMargin_28float_29($0, $2)
  }
  HEAP32[$0 + 56 >> 2] = 2;
  HEAP32[$0 >> 2] = 9600;
  HEAP32[$0 + 4 >> 2] = 13;
 }
 
 function btCylinderShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $5 = global$0 - 16 | 0;
  global$0 = $5;
  $7 = $0 + 40 | 0;
  $10 = HEAP32[$7 >> 2];
  $7 = HEAP32[$7 + 4 >> 2];
  $9 = $5 + 8 | 0;
  HEAP32[$9 >> 2] = $10;
  HEAP32[$9 + 4 >> 2] = $7;
  $7 = HEAP32[$0 + 36 >> 2];
  HEAP32[$5 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$5 + 4 >> 2] = $7;
  $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  (wasm2js_i32$0 = $9, wasm2js_f32$0 = Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0)) + HEAPF32[$9 >> 2])), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
  HEAPF32[$5 >> 2] = $4 + HEAPF32[$5 >> 2];
  HEAPF32[$5 + 4 >> 2] = $6 + HEAPF32[$5 + 4 >> 2];
  $4 = Math_fround($1 * Math_fround(.5));
  $6 = Math_fround($1 * Math_fround(.25));
  $1 = Math_fround($1 / Math_fround(12.0));
  label$1 : {
   label$2 : {
    $0 = HEAP32[$0 + 56 >> 2];
    if ($0 >>> 0 > 2) {
     break label$2
    }
    label$3 : {
     switch ($0 - 1 | 0) {
     default:
      $3 = HEAPF32[$5 + 4 >> 2];
      $3 = Math_fround($3 * $3);
      $4 = Math_fround($4 * $3);
      $3 = Math_fround($6 * $3);
      $6 = HEAPF32[$5 >> 2];
      $3 = Math_fround($3 + Math_fround($1 * Math_fround($6 * Math_fround($6 * Math_fround(4.0)))));
      $8 = $3;
      break label$1;
     case 0:
      break label$2;
     case 1:
      break label$3;
     };
    }
    $3 = HEAPF32[$5 >> 2];
    $3 = Math_fround($3 * $3);
    $8 = Math_fround($4 * $3);
    $4 = HEAPF32[$5 + 8 >> 2];
    $4 = Math_fround(Math_fround($6 * $3) + Math_fround($1 * Math_fround($4 * Math_fround($4 * Math_fround(4.0)))));
    $3 = $4;
    break label$1;
   }
   $3 = HEAPF32[$5 >> 2];
   $8 = Math_fround($3 * $3);
   $3 = Math_fround($4 * $8);
   $4 = HEAPF32[$5 + 4 >> 2];
   $4 = Math_fround(Math_fround($6 * $8) + Math_fround($1 * Math_fround($4 * Math_fround($4 * Math_fround(4.0)))));
   $8 = $4;
  }
  HEAP32[$2 + 12 >> 2] = 0;
  HEAPF32[$2 + 8 >> 2] = $8;
  HEAPF32[$2 + 4 >> 2] = $3;
  HEAPF32[$2 >> 2] = $4;
  global$0 = $5 + 16 | 0;
 }
 
 function btCylinderShapeX__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
  $4 = HEAPF32[$1 + 36 >> 2];
  $3 = HEAPF32[$1 + 32 >> 2];
  $5 = HEAPF32[$2 + 4 >> 2];
  $6 = HEAPF32[$2 + 8 >> 2];
  $7 = Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround($6 * $6))));
  label$1 : {
   if ($7 != Math_fround(0.0)) {
    $4 = Math_fround($4 / $7);
    $8 = Math_fround($6 * $4);
    $4 = Math_fround($5 * $4);
    $3 = HEAPF32[$2 >> 2] < Math_fround(0.0) ? Math_fround(-$3) : $3;
    break label$1;
   }
   $3 = HEAPF32[$2 >> 2] < Math_fround(0.0) ? Math_fround(-$3) : $3;
  }
  HEAPF32[$0 + 8 >> 2] = $8;
  HEAPF32[$0 >> 2] = $3;
  HEAPF32[$0 + 4 >> 2] = $4;
 }
 
 function btCylinderShapeZ__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
  $3 = HEAPF32[$1 + 40 >> 2];
  $4 = HEAPF32[$1 + 32 >> 2];
  $1 = $0;
  $5 = HEAPF32[$2 >> 2];
  $6 = HEAPF32[$2 + 4 >> 2];
  $7 = Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround($6 * $6))));
  label$1 : {
   if ($7 != Math_fround(0.0)) {
    $4 = Math_fround($4 / $7);
    $8 = Math_fround($6 * $4);
    $4 = Math_fround($5 * $4);
    $3 = HEAPF32[$2 + 8 >> 2] < Math_fround(0.0) ? Math_fround(-$3) : $3;
    break label$1;
   }
   $3 = HEAPF32[$2 + 8 >> 2] < Math_fround(0.0) ? Math_fround(-$3) : $3;
  }
  HEAPF32[$1 + 8 >> 2] = $3;
  HEAPF32[$0 >> 2] = $4;
  HEAPF32[$0 + 4 >> 2] = $8;
 }
 
 function btCylinderShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
  $3 = HEAPF32[$1 + 36 >> 2];
  $4 = HEAPF32[$1 + 32 >> 2];
  $5 = HEAPF32[$2 >> 2];
  $6 = HEAPF32[$2 + 8 >> 2];
  $7 = Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround($6 * $6))));
  label$1 : {
   if ($7 != Math_fround(0.0)) {
    $4 = Math_fround($4 / $7);
    $8 = Math_fround($6 * $4);
    $4 = Math_fround($5 * $4);
    $3 = HEAPF32[$2 + 4 >> 2] < Math_fround(0.0) ? Math_fround(-$3) : $3;
    break label$1;
   }
   $3 = HEAPF32[$2 + 4 >> 2] < Math_fround(0.0) ? Math_fround(-$3) : $3;
  }
  HEAPF32[$0 + 8 >> 2] = $8;
  HEAPF32[$0 + 4 >> 2] = $3;
  HEAPF32[$0 >> 2] = $4;
 }
 
 function btCylinderShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
  if (($3 | 0) >= 1) {
   while (1) {
    $4 = HEAPF32[$0 + 36 >> 2];
    $5 = HEAPF32[$0 + 32 >> 2];
    $7 = HEAPF32[$1 >> 2];
    $6 = HEAPF32[$1 + 8 >> 2];
    $8 = Math_fround(Math_sqrt(Math_fround(Math_fround($7 * $7) + Math_fround($6 * $6))));
    label$3 : {
     if ($8 != Math_fround(0.0)) {
      $5 = Math_fround($5 / $8);
      $6 = Math_fround($6 * $5);
      $5 = Math_fround($7 * $5);
      $4 = HEAPF32[$1 + 4 >> 2] < Math_fround(0.0) ? Math_fround(-$4) : $4;
      break label$3;
     }
     $6 = Math_fround(0.0);
     $4 = HEAPF32[$1 + 4 >> 2] < Math_fround(0.0) ? Math_fround(-$4) : $4;
    }
    HEAPF32[$2 >> 2] = $5;
    HEAPF32[$2 + 8 >> 2] = $6;
    HEAPF32[$2 + 4 >> 2] = $4;
    $2 = $2 + 16 | 0;
    $1 = $1 + 16 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   }
  }
 }
 
 function btCylinderShapeZ__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0);
  if (($3 | 0) >= 1) {
   while (1) {
    $4 = HEAPF32[$0 + 40 >> 2];
    $5 = HEAPF32[$0 + 32 >> 2];
    $7 = HEAPF32[$1 >> 2];
    $6 = HEAPF32[$1 + 4 >> 2];
    $8 = Math_fround(Math_sqrt(Math_fround(Math_fround($7 * $7) + Math_fround($6 * $6))));
    label$3 : {
     if ($8 != Math_fround(0.0)) {
      $5 = Math_fround($5 / $8);
      $6 = Math_fround($6 * $5);
      $5 = Math_fround($7 * $5);
      $4 = HEAPF32[$1 + 8 >> 2] < Math_fround(0.0) ? Math_fround(-$4) : $4;
      break label$3;
     }
     $6 = Math_fround(0.0);
     $4 = HEAPF32[$1 + 8 >> 2] < Math_fround(0.0) ? Math_fround(-$4) : $4;
    }
    HEAPF32[$2 >> 2] = $5;
    HEAPF32[$2 + 8 >> 2] = $4;
    HEAPF32[$2 + 4 >> 2] = $6;
    $2 = $2 + 16 | 0;
    $1 = $1 + 16 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   }
  }
 }
 
 function btCylinderShapeX__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0;
  if (($3 | 0) >= 1) {
   while (1) {
    $4 = HEAPF32[$0 + 32 >> 2];
    $5 = HEAPF32[$0 + 36 >> 2];
    $9 = $2;
    $7 = HEAPF32[$1 + 4 >> 2];
    $6 = HEAPF32[$1 + 8 >> 2];
    $8 = Math_fround(Math_sqrt(Math_fround(Math_fround($7 * $7) + Math_fround($6 * $6))));
    label$3 : {
     if ($8 != Math_fround(0.0)) {
      $5 = Math_fround($5 / $8);
      $6 = Math_fround($6 * $5);
      $5 = Math_fround($7 * $5);
      $4 = HEAPF32[$1 >> 2] < Math_fround(0.0) ? Math_fround(-$4) : $4;
      break label$3;
     }
     $6 = Math_fround(0.0);
     $4 = HEAPF32[$1 >> 2] < Math_fround(0.0) ? Math_fround(-$4) : $4;
    }
    HEAPF32[$9 >> 2] = $4;
    HEAPF32[$2 + 8 >> 2] = $6;
    HEAPF32[$2 + 4 >> 2] = $5;
    $2 = $2 + 16 | 0;
    $1 = $1 + 16 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   }
  }
 }
 
 function btCylinderShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 9792;
 }
 
 function btCylinderShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 36 >> 2];
  HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 40 >> 2];
  HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 44 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$1 + 48 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = HEAP32[$0 + 48 >> 2];
  $0 = HEAP32[$0 + 56 >> 2];
  HEAP32[$1 + 56 >> 2] = 0;
  HEAP32[$1 + 52 >> 2] = $0;
  return 9802;
 }
 
 function btCylinderShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0);
  $6 = global$0 - 16 | 0;
  global$0 = $6;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($6, $1, $2);
  $7 = $6 + 8 | 0;
  $10 = HEAP32[$7 >> 2];
  $7 = HEAP32[$7 + 4 >> 2];
  $8 = $0 + 8 | 0;
  HEAP32[$8 >> 2] = $10;
  HEAP32[$8 + 4 >> 2] = $7;
  $8 = HEAP32[$6 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $8;
  if (Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1)) != Math_fround(0.0)) {
   $4 = HEAPF32[$2 + 4 >> 2];
   $3 = HEAPF32[$2 >> 2];
   $5 = HEAPF32[$2 + 8 >> 2];
   $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
   $1 = Math_fround(Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4)) + Math_fround($5 * $5)) < Math_fround(1.4210854715202004e-14);
   $3 = $1 ? Math_fround(-1.0) : $3;
   $11 = $3;
   $5 = $1 ? Math_fround(-1.0) : $5;
   $4 = $1 ? Math_fround(-1.0) : $4;
   $3 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4))))));
   HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($9 * Math_fround($11 * $3));
   HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + Math_fround($9 * Math_fround($4 * $3));
   HEAPF32[$0 + 8 >> 2] = HEAPF32[$0 + 8 >> 2] + Math_fround($9 * Math_fround($5 * $3));
  }
  global$0 = $6 + 16 | 0;
 }
 
 function btCylinderShape__getRadius_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = Math_fround(0), $2 = Math_fround(0);
  $1 = HEAPF32[$0 + 32 >> 2];
  $2 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  return Math_fround(Math_fround($1 + $2));
 }
 
 function btCylinderShapeX__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 9822;
 }
 
 function btCylinderShapeX__getRadius_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = Math_fround(0), $2 = Math_fround(0);
  $1 = HEAPF32[$0 + 36 >> 2];
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $2 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  return Math_fround(Math_fround($1 + $2));
 }
 
 function btCylinderShapeZ__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 9832;
 }
 
 function btSphereShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $0 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btSphereShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  if (($3 | 0) >= 1) {
   memset($2, 0, $3 << 4)
  }
 }
 
 function btSphereShape__localGetSupportingVertex_28btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0);
  $6 = global$0 - 16 | 0;
  global$0 = $6;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($6, $1, $2);
  $8 = $6 + 8 | 0;
  $9 = HEAP32[$8 >> 2];
  $8 = HEAP32[$8 + 4 >> 2];
  $7 = $0 + 8 | 0;
  HEAP32[$7 >> 2] = $9;
  HEAP32[$7 + 4 >> 2] = $8;
  $9 = HEAP32[$6 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$0 + 4 >> 2] = $9;
  $4 = HEAPF32[$2 + 4 >> 2];
  $3 = HEAPF32[$2 >> 2];
  $5 = HEAPF32[$2 + 8 >> 2];
  $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1));
  $2 = Math_fround(Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4)) + Math_fround($5 * $5)) < Math_fround(1.4210854715202004e-14);
  $3 = $2 ? Math_fround(-1.0) : $3;
  $11 = $3;
  $5 = $2 ? Math_fround(-1.0) : $5;
  $4 = $2 ? Math_fround(-1.0) : $4;
  $3 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($5 * $5) + Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4))))));
  HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($10 * Math_fround($11 * $3));
  HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] + Math_fround($10 * Math_fround($4 * $3));
  HEAPF32[$7 >> 2] = HEAPF32[$7 >> 2] + Math_fround($10 * Math_fround($5 * $3));
  global$0 = $6 + 16 | 0;
 }
 
 function btSphereShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0;
  $7 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $0 = $1 + 52 | 0;
  $4 = HEAPF32[$0 >> 2];
  $10 = $1 + 56 | 0;
  $5 = HEAPF32[$10 >> 2];
  $6 = HEAPF32[$1 + 48 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  HEAPF32[$2 + 8 >> 2] = $5 - $9;
  HEAPF32[$2 + 4 >> 2] = $4 - $8;
  HEAPF32[$2 >> 2] = $6 - $7;
  $4 = HEAPF32[$0 >> 2];
  $5 = HEAPF32[$10 >> 2];
  $6 = HEAPF32[$1 + 48 >> 2];
  HEAP32[$3 + 12 >> 2] = 0;
  HEAPF32[$3 + 8 >> 2] = $9 + $5;
  HEAPF32[$3 + 4 >> 2] = $8 + $4;
  HEAPF32[$3 >> 2] = $7 + $6;
 }
 
 function btSphereShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0);
  $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $4 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  HEAP32[$2 + 12 >> 2] = 0;
  $1 = Math_fround($4 * Math_fround($3 * Math_fround($1 * Math_fround(.4000000059604645))));
  HEAPF32[$2 + 8 >> 2] = $1;
  HEAPF32[$2 + 4 >> 2] = $1;
  HEAPF32[$2 >> 2] = $1;
 }
 
 function btSphereShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 9972;
 }
 
 function btSphereShape__getMargin_28_29_20const($0) {
  $0 = $0 | 0;
  return Math_fround(Math_fround(HEAPF32[$0 + 32 >> 2] * HEAPF32[$0 + 16 >> 2]));
 }
 
 function btQuantizedBvh__walkStacklessTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
  $6 = global$0 - 32 | 0;
  global$0 = $6;
  label$1 : {
   if (HEAP32[$0 + 56 >> 2] < 1) {
    break label$1
   }
   $13 = HEAPF32[$3 >> 2];
   $18 = HEAPF32[$2 >> 2];
   $7 = Math_fround($13 - $18);
   $19 = HEAPF32[$3 + 4 >> 2];
   $14 = HEAPF32[$2 + 4 >> 2];
   $8 = Math_fround($19 - $14);
   $12 = HEAPF32[$3 + 8 >> 2];
   $11 = HEAPF32[$2 + 8 >> 2];
   $10 = Math_fround($12 - $11);
   $22 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8)) + Math_fround($10 * $10)))));
   $20 = Math_fround($10 * $22);
   $23 = Math_fround($7 * $22);
   $24 = Math_fround($8 * $22);
   $27 = Math_fround(Math_fround($10 * $20) + Math_fround(Math_fround($7 * $23) + Math_fround($8 * $24)));
   $10 = HEAPF32[$5 + 8 >> 2];
   $28 = Math_fround(($11 < $12 ? $12 : $11) + $10);
   $7 = HEAPF32[$5 + 4 >> 2];
   $29 = Math_fround(($14 < $19 ? $19 : $14) + $7);
   $8 = HEAPF32[$5 >> 2];
   $30 = Math_fround(($18 < $13 ? $13 : $18) + $8);
   $11 = $12 < $11 ? $12 : $11;
   $12 = HEAPF32[$4 + 8 >> 2];
   $22 = Math_fround($11 + $12);
   $11 = HEAPF32[$4 + 4 >> 2];
   $19 = Math_fround(($19 < $14 ? $19 : $14) + $11);
   $14 = $13 < $18 ? $13 : $18;
   $13 = HEAPF32[$4 >> 2];
   $18 = Math_fround($14 + $13);
   $3 = HEAP32[$0 + 96 >> 2];
   $25 = $20 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $20);
   $15 = $25 < Math_fround(0.0);
   $31 = ($15 << 4) + $6 | 8;
   $14 = $24 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $24);
   $21 = $14 < Math_fround(0.0);
   $32 = ($21 << 4) + $6 | 4;
   $33 = (($15 ^ 1) << 4) + $6 | 8;
   $34 = (($21 ^ 1) << 4) + $6 | 4;
   $20 = $23 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $23);
   $15 = $20 < Math_fround(0.0);
   $35 = ($15 << 4) + $6 | 0;
   $36 = (($15 ^ 1) << 4) + $6 | 0;
   $26 = $6 + 16 | 0;
   $15 = 0;
   $21 = 1;
   while (1) {
    $9 = $3 + 8 | 0;
    $37 = HEAP32[$9 >> 2];
    $38 = HEAP32[$9 + 4 >> 2];
    $39 = HEAP32[$3 >> 2];
    $40 = HEAP32[$3 + 4 >> 2];
    $16 = HEAP32[$3 + 20 >> 2];
    HEAP32[$26 >> 2] = HEAP32[$3 + 16 >> 2];
    HEAP32[$26 + 4 >> 2] = $16;
    $17 = $3 + 24 | 0;
    $9 = $17;
    $41 = HEAP32[$9 >> 2];
    $9 = HEAP32[$9 + 4 >> 2];
    $16 = $26 + 8 | 0;
    HEAP32[$16 >> 2] = $41;
    HEAP32[$16 + 4 >> 2] = $9;
    HEAP32[$6 >> 2] = $39;
    HEAP32[$6 + 4 >> 2] = $40;
    HEAP32[$6 + 8 >> 2] = $37;
    HEAP32[$6 + 12 >> 2] = $38;
    HEAPF32[$6 >> 2] = HEAPF32[$6 >> 2] - $8;
    HEAPF32[$6 + 4 >> 2] = HEAPF32[$6 + 4 >> 2] - $7;
    HEAPF32[$6 + 16 >> 2] = HEAPF32[$6 + 16 >> 2] - $13;
    HEAPF32[$6 + 20 >> 2] = HEAPF32[$6 + 20 >> 2] - $11;
    HEAPF32[$6 + 8 >> 2] = HEAPF32[$6 + 8 >> 2] - $10;
    HEAPF32[$6 + 24 >> 2] = HEAPF32[$6 + 24 >> 2] - $12;
    $9 = 0;
    label$3 : {
     if ($18 > HEAPF32[$3 + 16 >> 2]) {
      break label$3
     }
     $9 = 0;
     if ($30 < HEAPF32[$3 >> 2]) {
      break label$3
     }
     $9 = 1;
    }
    $16 = 0;
    label$4 : {
     if ($22 > HEAPF32[$17 >> 2]) {
      break label$4
     }
     if ($28 < HEAPF32[$3 + 8 >> 2]) {
      break label$4
     }
     $16 = $9;
    }
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         if ($19 > HEAPF32[$3 + 20 >> 2]) {
          break label$9
         }
         if ($29 < HEAPF32[$3 + 4 >> 2]) {
          break label$9
         }
         if (!$16) {
          break label$9
         }
         $7 = HEAPF32[$2 + 4 >> 2];
         $12 = Math_fround($14 * Math_fround(HEAPF32[$32 >> 2] - $7));
         $8 = HEAPF32[$2 >> 2];
         $10 = Math_fround($20 * Math_fround(HEAPF32[$36 >> 2] - $8));
         if ($12 > $10) {
          break label$9
         }
         $8 = Math_fround($20 * Math_fround(HEAPF32[$35 >> 2] - $8));
         $7 = Math_fround($14 * Math_fround(HEAPF32[$34 >> 2] - $7));
         if ($8 > $7) {
          break label$9
         }
         $13 = HEAPF32[$2 + 8 >> 2];
         $11 = Math_fround($25 * Math_fround(HEAPF32[$31 >> 2] - $13));
         $10 = $7 < $10 ? $7 : $10;
         if ($11 > $10) {
          break label$9
         }
         $7 = $12 > $8 ? $12 : $8;
         $8 = Math_fround($25 * Math_fround(HEAPF32[$33 >> 2] - $13));
         if ($7 > $8) {
          break label$9
         }
         $16 = HEAP32[$3 + 32 >> 2];
         $17 = ($16 | 0) == -1;
         $9 = ($11 > $7 ? $11 : $7) < $27 & ($8 < $10 ? $8 : $10) > Math_fround(0.0);
         if (($9 | 0) != 1) {
          break label$8
         }
         if (($16 | 0) != -1) {
          break label$8
         }
         FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, HEAP32[$3 + 36 >> 2], HEAP32[$3 + 40 >> 2]);
         break label$7;
        }
        $17 = HEAP32[$3 + 32 >> 2] == -1;
        $9 = 0;
       }
       if ($17) {
        break label$7
       }
       if (!$9) {
        break label$6
       }
      }
      $15 = $15 + 1 | 0;
      $3 = $3 - -64 | 0;
      break label$5;
     }
     $17 = HEAP32[$3 + 32 >> 2];
     $15 = $15 + $17 | 0;
     $3 = ($17 << 6) + $3 | 0;
    }
    if (($15 | 0) >= HEAP32[$0 + 56 >> 2]) {
     break label$1
    }
    $21 = $21 + 1 | 0;
    $12 = HEAPF32[$4 + 8 >> 2];
    $11 = HEAPF32[$4 + 4 >> 2];
    $13 = HEAPF32[$4 >> 2];
    $10 = HEAPF32[$5 + 8 >> 2];
    $7 = HEAPF32[$5 + 4 >> 2];
    $8 = HEAPF32[$5 >> 2];
    continue;
   };
  }
  if (HEAP32[430] < ($21 | 0)) {
   HEAP32[430] = $21
  }
  global$0 = $6 + 32 | 0;
 }
 
 function btQuantizedBvh__walkStacklessQuantizedTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4, $5, $6) {
  var $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = Math_fround(0), $26 = Math_fround(0), $27 = 0, $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
  $12 = global$0 - 32 | 0;
  global$0 = $12;
  $13 = HEAPF32[$2 + 4 >> 2];
  $14 = HEAPF32[$3 + 4 >> 2];
  $15 = HEAPF32[$2 >> 2];
  $16 = HEAPF32[$3 >> 2];
  $20 = HEAPF32[$0 + 28 >> 2];
  $7 = HEAPF32[$0 + 12 >> 2];
  $17 = HEAPF32[$3 + 8 >> 2];
  $18 = HEAPF32[$2 + 8 >> 2];
  $8 = Math_fround(($17 < $18 ? $17 : $18) + HEAPF32[$4 + 8 >> 2]);
  $8 = $8 < $7 ? $7 : $8;
  $28 = HEAPF32[$0 + 44 >> 2];
  $8 = Math_fround(Math_fround(($20 < $8 ? $20 : $8) - $7) * $28);
  label$1 : {
   if ($8 < Math_fround(4294967296.0) & $8 >= Math_fround(0.0)) {
    $3 = ~~$8 >>> 0;
    break label$1;
   }
   $3 = 0;
  }
  $25 = HEAPF32[$0 + 24 >> 2];
  $8 = HEAPF32[$0 + 8 >> 2];
  $9 = Math_fround(($14 < $13 ? $14 : $13) + HEAPF32[$4 + 4 >> 2]);
  $9 = $9 < $8 ? $8 : $9;
  $29 = HEAPF32[$0 + 40 >> 2];
  $9 = Math_fround(Math_fround(($25 < $9 ? $25 : $9) - $8) * $29);
  label$3 : {
   if ($9 < Math_fround(4294967296.0) & $9 >= Math_fround(0.0)) {
    $10 = ~~$9 >>> 0;
    break label$3;
   }
   $10 = 0;
  }
  $26 = HEAPF32[$0 + 20 >> 2];
  $9 = HEAPF32[$0 + 4 >> 2];
  $11 = Math_fround(($16 < $15 ? $16 : $15) + HEAPF32[$4 >> 2]);
  $11 = $11 < $9 ? $9 : $11;
  $30 = HEAPF32[$0 + 36 >> 2];
  $11 = Math_fround(Math_fround(($26 < $11 ? $26 : $11) - $9) * $30);
  label$5 : {
   if ($11 < Math_fround(4294967296.0) & $11 >= Math_fround(0.0)) {
    $21 = ~~$11 >>> 0;
    break label$5;
   }
   $21 = 0;
  }
  $11 = Math_fround(($18 < $17 ? $17 : $18) + HEAPF32[$5 + 8 >> 2]);
  $11 = $11 < $7 ? $7 : $11;
  $7 = Math_fround(Math_fround(Math_fround(($20 < $11 ? $20 : $11) - $7) * $28) + Math_fround(1.0));
  label$7 : {
   if ($7 < Math_fround(4294967296.0) & $7 >= Math_fround(0.0)) {
    $22 = ~~$7 >>> 0;
    break label$7;
   }
   $22 = 0;
  }
  $7 = Math_fround(($13 < $14 ? $14 : $13) + HEAPF32[$5 + 4 >> 2]);
  $7 = $7 < $8 ? $8 : $7;
  $7 = Math_fround(Math_fround(Math_fround(($25 < $7 ? $25 : $7) - $8) * $29) + Math_fround(1.0));
  label$9 : {
   if ($7 < Math_fround(4294967296.0) & $7 >= Math_fround(0.0)) {
    $23 = ~~$7 >>> 0;
    break label$9;
   }
   $23 = 0;
  }
  $7 = Math_fround(($15 < $16 ? $16 : $15) + HEAPF32[$5 >> 2]);
  $7 = $7 < $9 ? $9 : $7;
  $7 = Math_fround(Math_fround(Math_fround(($26 < $7 ? $26 : $7) - $9) * $30) + Math_fround(1.0));
  label$11 : {
   if ($7 < Math_fround(4294967296.0) & $7 >= Math_fround(0.0)) {
    $24 = ~~$7 >>> 0;
    break label$11;
   }
   $24 = 0;
  }
  if (0 < ($6 | 0)) {
   $7 = Math_fround($17 - $18);
   $11 = $7;
   $8 = Math_fround($16 - $15);
   $9 = Math_fround($14 - $13);
   $13 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($9 * $9)) + Math_fround($7 * $7)))));
   $7 = Math_fround($7 * $13);
   $14 = Math_fround($8 * $13);
   $15 = Math_fround($8 * $14);
   $8 = Math_fround($9 * $13);
   $20 = Math_fround(Math_fround($11 * $7) + Math_fround($15 + Math_fround($9 * $8)));
   $31 = $3 & 65534;
   $32 = $10 & 65534;
   $33 = $21 & 65534;
   $34 = $22 | 1;
   $35 = $23 | 1;
   $36 = $24 | 1;
   $3 = HEAP32[$0 + 136 >> 2];
   $18 = $7 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $7);
   $10 = $18 < Math_fround(0.0);
   $37 = ($10 << 4) + $12 | 8;
   $16 = $8 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $8);
   $19 = $16 < Math_fround(0.0);
   $38 = ($19 << 4) + $12 | 4;
   $39 = (($10 ^ 1) << 4) + $12 | 8;
   $40 = (($19 ^ 1) << 4) + $12 | 4;
   $17 = $14 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $14);
   $10 = $17 < Math_fround(0.0);
   $41 = ($10 << 4) + $12 | 0;
   $42 = (($10 ^ 1) << 4) + $12 | 0;
   $19 = 0;
   while (1) {
    $21 = HEAP32[$3 + 12 >> 2];
    $10 = 0;
    label$15 : {
     label$16 : {
      label$17 : {
       label$18 : {
        if ($33 >>> 0 > HEAPU16[$3 + 6 >> 1]) {
         break label$18
        }
        $22 = HEAPU16[$3 >> 1];
        if ($36 >>> 0 < $22 >>> 0) {
         break label$18
        }
        if ($31 >>> 0 > HEAPU16[$3 + 10 >> 1]) {
         break label$18
        }
        $23 = HEAPU16[$3 + 4 >> 1];
        if ($34 >>> 0 < $23 >>> 0) {
         break label$18
        }
        if ($32 >>> 0 > HEAPU16[$3 + 8 >> 1]) {
         break label$18
        }
        $24 = HEAPU16[$3 + 2 >> 1];
        if ($35 >>> 0 < $24 >>> 0) {
         break label$18
        }
        HEAP32[$12 + 12 >> 2] = 0;
        $10 = HEAPU16[$3 + 10 >> 1];
        $43 = HEAPU16[$3 + 8 >> 1];
        $44 = HEAPU16[$3 + 6 >> 1];
        HEAP32[$12 + 28 >> 2] = 0;
        $7 = HEAPF32[$0 + 36 >> 2];
        $8 = HEAPF32[$0 + 4 >> 2];
        HEAPF32[$12 >> 2] = Math_fround(Math_fround(Math_fround($22 >>> 0) / $7) + $8) - HEAPF32[$5 >> 2];
        $9 = HEAPF32[$0 + 40 >> 2];
        $13 = HEAPF32[$0 + 8 >> 2];
        HEAPF32[$12 + 4 >> 2] = Math_fround(Math_fround(Math_fround($24 >>> 0) / $9) + $13) - HEAPF32[$5 + 4 >> 2];
        $14 = HEAPF32[$0 + 44 >> 2];
        $15 = HEAPF32[$0 + 12 >> 2];
        HEAPF32[$12 + 8 >> 2] = Math_fround(Math_fround(Math_fround($23 >>> 0) / $14) + $15) - HEAPF32[$5 + 8 >> 2];
        HEAPF32[$12 + 16 >> 2] = Math_fround($8 + Math_fround(Math_fround($44 >>> 0) / $7)) - HEAPF32[$4 >> 2];
        HEAPF32[$12 + 20 >> 2] = Math_fround($13 + Math_fround(Math_fround($43 >>> 0) / $9)) - HEAPF32[$4 + 4 >> 2];
        HEAPF32[$12 + 24 >> 2] = Math_fround($15 + Math_fround(Math_fround($10 >>> 0) / $14)) - HEAPF32[$4 + 8 >> 2];
        label$19 : {
         $8 = HEAPF32[$2 + 4 >> 2];
         $13 = Math_fround($16 * Math_fround(HEAPF32[$38 >> 2] - $8));
         $9 = HEAPF32[$2 >> 2];
         $7 = Math_fround($17 * Math_fround(HEAPF32[$42 >> 2] - $9));
         if ($13 > $7) {
          break label$19
         }
         $9 = Math_fround($17 * Math_fround(HEAPF32[$41 >> 2] - $9));
         $8 = Math_fround($16 * Math_fround(HEAPF32[$40 >> 2] - $8));
         if ($9 > $8) {
          break label$19
         }
         $15 = HEAPF32[$2 + 8 >> 2];
         $14 = Math_fround($18 * Math_fround(HEAPF32[$37 >> 2] - $15));
         $7 = $8 < $7 ? $8 : $7;
         if ($14 > $7) {
          break label$19
         }
         $8 = $13 > $9 ? $13 : $9;
         $9 = Math_fround($18 * Math_fround(HEAPF32[$39 >> 2] - $15));
         if ($8 > $9) {
          break label$19
         }
         $10 = ($14 > $8 ? $14 : $8) < $20 & ($9 < $7 ? $9 : $7) > Math_fround(0.0);
         if (($21 | 0) < 0) {
          break label$18
         }
         if (!$10) {
          break label$18
         }
         $10 = HEAP32[$3 + 12 >> 2];
         FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $10 >> 21, $10 & 2097151);
         break label$17;
        }
        $10 = 0;
       }
       if (($21 | 0) > -1) {
        break label$17
       }
       if (!$10) {
        break label$16
       }
      }
      $27 = $27 + 1 | 0;
      $3 = $3 + 16 | 0;
      break label$15;
     }
     $10 = HEAP32[$3 + 12 >> 2];
     $27 = $27 - $10 | 0;
     $3 = $3 - ($10 << 4) | 0;
    }
    $19 = $19 + 1 | 0;
    if (($27 | 0) < ($6 | 0)) {
     continue
    }
    break;
   };
  }
  if (HEAP32[430] < ($19 | 0)) {
   HEAP32[430] = $19
  }
  global$0 = $12 + 32 | 0;
 }
 
 function btQuantizedBvh__reportRayOverlappingNodex_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  $4 = global$0 - 32 | 0;
  global$0 = $4;
  $5 = $4 + 24 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = 0;
  HEAP32[$4 + 20 >> 2] = 0;
  $5 = $4 + 8 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  label$1 : {
   if (HEAPU8[$0 + 60 | 0]) {
    btQuantizedBvh__walkStacklessQuantizedTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4 + 16 | 0, $4, HEAP32[$0 + 56 >> 2]);
    break label$1;
   }
   btQuantizedBvh__walkStacklessTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4 + 16 | 0, $4);
  }
  global$0 = $4 + 32 | 0;
 }
 
 function btQuantizedBvh__reportBoxCastOverlappingNodex_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3, $4, $5) {
  if (HEAPU8[$0 + 60 | 0]) {
   btQuantizedBvh__walkStacklessQuantizedTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4, $5, HEAP32[$0 + 56 >> 2]);
   return;
  }
  btQuantizedBvh__walkStacklessTreeAgainstRay_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20int_29_20const($0, $1, $2, $3, $4, $5);
 }
 
 function btBvhTriangleMeshShape__performRaycast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3) {
  var $4 = 0;
  $4 = global$0 - 16 | 0;
  global$0 = $4;
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 >> 2] = 9988;
  HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 52 >> 2];
  btQuantizedBvh__reportRayOverlappingNodex_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const(HEAP32[$0 + 56 >> 2], $4, $2, $3);
  global$0 = $4 + 16 | 0;
 }
 
 function btBvhTriangleMeshShape__performConvexcast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = global$0 - 16 | 0;
  global$0 = $6;
  HEAP32[$6 + 8 >> 2] = $1;
  HEAP32[$6 >> 2] = 10156;
  HEAP32[$6 + 4 >> 2] = HEAP32[$0 + 52 >> 2];
  btQuantizedBvh__reportBoxCastOverlappingNodex_28btNodeOverlapCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29_20const(HEAP32[$0 + 56 >> 2], $6, $2, $3, $4, $5);
  global$0 = $6 + 16 | 0;
 }
 
 function btBvhTriangleMeshShape__performRaycast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29__MyNodeOverlapCallback__processNode_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0;
  $5 = global$0 - 80 | 0;
  global$0 = $5;
  $3 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $5 + 28 | 0, $5 + 24 | 0, $5 + 20 | 0, $5 + 16 | 0, $5 + 12 | 0, $5 + 8 | 0, $5 + 4 | 0, $5, $1);
  $3 = HEAP32[$0 + 4 >> 2];
  $10 = $3 + 12 | 0;
  $6 = HEAP32[$5 + 12 >> 2] + Math_imul($2, HEAP32[$5 + 8 >> 2]) | 0;
  $13 = HEAP32[$5 + 28 >> 2];
  $14 = HEAP32[$5 + 20 >> 2];
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if (HEAP32[$5 >> 2] != 3) {
          $11 = HEAP32[$5 + 16 >> 2];
          $4 = Math_imul($11, HEAP32[$6 + 8 >> 2]) + $13 | 0;
          if ($14) {
           break label$7
          }
          $8 = Math_fround(HEAPF32[$4 + 4 >> 2] * HEAPF32[$3 + 8 >> 2]);
          $9 = Math_fround(HEAPF32[$4 >> 2] * HEAPF32[$3 + 4 >> 2]);
          $7 = HEAPF32[$3 + 12 >> 2];
          $4 = $4 + 8 | 0;
          break label$6;
         }
         $11 = HEAP32[$5 + 16 >> 2];
         $4 = Math_imul($11, HEAPU16[$6 + 4 >> 1]) + $13 | 0;
         label$9 : {
          if ($14) {
           $8 = Math_fround(HEAPF32[$3 + 8 >> 2] * Math_fround(HEAPF64[$4 + 8 >> 3]));
           $9 = Math_fround(HEAPF32[$3 + 4 >> 2] * Math_fround(HEAPF64[$4 >> 3]));
           $7 = Math_fround(HEAPF64[$4 + 16 >> 3]);
           $4 = $10;
           break label$9;
          }
          $8 = Math_fround(HEAPF32[$4 + 4 >> 2] * HEAPF32[$3 + 8 >> 2]);
          $9 = Math_fround(HEAPF32[$4 >> 2] * HEAPF32[$3 + 4 >> 2]);
          $7 = HEAPF32[$3 + 12 >> 2];
          $4 = $4 + 8 | 0;
         }
         $12 = HEAPF32[$4 >> 2];
         HEAP32[$5 + 76 >> 2] = 0;
         HEAPF32[$5 + 68 >> 2] = $8;
         HEAPF32[$5 + 72 >> 2] = $12 * $7;
         HEAPF32[$5 + 64 >> 2] = $9;
         $4 = Math_imul(HEAPU16[$6 + 2 >> 1], $11) + $13 | 0;
         if (!$14) {
          break label$5
         }
         $8 = Math_fround(HEAPF32[$3 + 8 >> 2] * Math_fround(HEAPF64[$4 + 8 >> 3]));
         $9 = Math_fround(HEAPF32[$3 + 4 >> 2] * Math_fround(HEAPF64[$4 >> 3]));
         $7 = Math_fround(HEAPF64[$4 + 16 >> 3]);
         $4 = $10;
         break label$4;
        }
        $8 = Math_fround(HEAPF32[$3 + 8 >> 2] * Math_fround(HEAPF64[$4 + 8 >> 3]));
        $9 = Math_fround(HEAPF32[$3 + 4 >> 2] * Math_fround(HEAPF64[$4 >> 3]));
        $7 = Math_fround(HEAPF64[$4 + 16 >> 3]);
        $4 = $10;
       }
       $12 = HEAPF32[$4 >> 2];
       HEAP32[$5 + 76 >> 2] = 0;
       HEAPF32[$5 + 68 >> 2] = $8;
       HEAPF32[$5 + 72 >> 2] = $12 * $7;
       HEAPF32[$5 + 64 >> 2] = $9;
       $4 = Math_imul(HEAP32[$6 + 4 >> 2], $11) + $13 | 0;
       if (!$14) {
        break label$3
       }
       $8 = Math_fround(HEAPF32[$3 + 8 >> 2] * Math_fround(HEAPF64[$4 + 8 >> 3]));
       $9 = Math_fround(HEAPF32[$3 + 4 >> 2] * Math_fround(HEAPF64[$4 >> 3]));
       $7 = Math_fround(HEAPF64[$4 + 16 >> 3]);
       $4 = $10;
       break label$2;
      }
      $8 = Math_fround(HEAPF32[$4 + 4 >> 2] * HEAPF32[$3 + 8 >> 2]);
      $9 = Math_fround(HEAPF32[$4 >> 2] * HEAPF32[$3 + 4 >> 2]);
      $7 = HEAPF32[$3 + 12 >> 2];
      $4 = $4 + 8 | 0;
     }
     $12 = HEAPF32[$4 >> 2];
     HEAP32[$5 + 60 >> 2] = 0;
     HEAPF32[$5 + 52 >> 2] = $8;
     HEAPF32[$5 + 56 >> 2] = $12 * $7;
     HEAPF32[$5 + 48 >> 2] = $9;
     $6 = Math_imul(HEAPU16[$6 >> 1], $11) + $13 | 0;
     label$11 : {
      if ($14) {
       $8 = Math_fround(HEAPF32[$3 + 8 >> 2] * Math_fround(HEAPF64[$6 + 8 >> 3]));
       $9 = Math_fround(HEAPF32[$3 + 4 >> 2] * Math_fround(HEAPF64[$6 >> 3]));
       $7 = Math_fround(HEAPF64[$6 + 16 >> 3]);
       break label$11;
      }
      $10 = $6 + 8 | 0;
      $8 = Math_fround(HEAPF32[$6 + 4 >> 2] * HEAPF32[$3 + 8 >> 2]);
      $9 = Math_fround(HEAPF32[$6 >> 2] * HEAPF32[$3 + 4 >> 2]);
      $7 = HEAPF32[$3 + 12 >> 2];
     }
     $7 = Math_fround(HEAPF32[$10 >> 2] * $7);
     break label$1;
    }
    $8 = Math_fround(HEAPF32[$4 + 4 >> 2] * HEAPF32[$3 + 8 >> 2]);
    $9 = Math_fround(HEAPF32[$4 >> 2] * HEAPF32[$3 + 4 >> 2]);
    $7 = HEAPF32[$3 + 12 >> 2];
    $4 = $4 + 8 | 0;
   }
   $12 = HEAPF32[$4 >> 2];
   HEAP32[$5 + 60 >> 2] = 0;
   HEAPF32[$5 + 52 >> 2] = $8;
   HEAPF32[$5 + 56 >> 2] = $12 * $7;
   HEAPF32[$5 + 48 >> 2] = $9;
   $6 = Math_imul(HEAP32[$6 >> 2], $11) + $13 | 0;
   label$13 : {
    if ($14) {
     $8 = Math_fround(HEAPF32[$3 + 8 >> 2] * Math_fround(HEAPF64[$6 + 8 >> 3]));
     $9 = Math_fround(HEAPF32[$3 + 4 >> 2] * Math_fround(HEAPF64[$6 >> 3]));
     $7 = Math_fround(HEAPF64[$6 + 16 >> 3]);
     break label$13;
    }
    $10 = $6 + 8 | 0;
    $8 = Math_fround(HEAPF32[$6 + 4 >> 2] * HEAPF32[$3 + 8 >> 2]);
    $9 = Math_fround(HEAPF32[$6 >> 2] * HEAPF32[$3 + 4 >> 2]);
    $7 = HEAPF32[$3 + 12 >> 2];
   }
   $7 = Math_fround(HEAPF32[$10 >> 2] * $7);
  }
  HEAP32[$5 + 44 >> 2] = 0;
  HEAPF32[$5 + 40 >> 2] = $7;
  HEAPF32[$5 + 36 >> 2] = $8;
  HEAPF32[$5 + 32 >> 2] = $9;
  $3 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $5 + 32 | 0, $1, $2);
  $3 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 24 >> 2]]($3, $1);
  global$0 = $5 + 80 | 0;
 }
 
 function btConcaveShape__btConcaveShape_28_29($0) {
  HEAP32[$0 + 4 >> 2] = 35;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = -1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 >> 2] = 10304;
 }
 
 function btStaticPlaneShape__btStaticPlaneShape_28btVector3_20const__2c_20float_29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0;
  btConcaveShape__btConcaveShape_28_29($0);
  HEAP32[$0 >> 2] = 10412;
  $3 = HEAPF32[$1 + 8 >> 2];
  $4 = HEAPF32[$1 >> 2];
  $5 = HEAPF32[$1 + 4 >> 2];
  $1 = HEAP32[$1 + 12 >> 2];
  $6 = $0 + 80 | 0;
  HEAP32[$6 >> 2] = 1065353216;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 1065353216;
  HEAP32[$0 + 76 >> 2] = 1065353216;
  HEAPF32[$0 + 68 >> 2] = $2;
  HEAP32[$0 - -64 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = 28;
  $2 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($4 * $4) + Math_fround($5 * $5)) + Math_fround($3 * $3)))));
  HEAPF32[$0 + 60 >> 2] = $3 * $2;
  HEAPF32[$0 + 56 >> 2] = $5 * $2;
  HEAPF32[$0 + 52 >> 2] = $4 * $2;
 }
 
 function btStaticPlaneShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  HEAP32[$2 + 8 >> 2] = -581039253;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP32[$2 >> 2] = -581039253;
  HEAP32[$2 + 4 >> 2] = -581039253;
  $2 = $3;
  HEAP32[$2 + 8 >> 2] = 1566444395;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP32[$2 >> 2] = 1566444395;
  HEAP32[$2 + 4 >> 2] = 1566444395;
 }
 
 function btStaticPlaneShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22 = 0, $23 = 0;
  $6 = global$0 - 48 | 0;
  global$0 = $6;
  $9 = HEAPF32[$3 >> 2];
  $8 = HEAPF32[$2 >> 2];
  $7 = Math_fround(Math_fround($9 - $8) * Math_fround(.5));
  $4 = Math_fround($7 * $7);
  $5 = HEAPF32[$3 + 4 >> 2];
  $10 = HEAPF32[$2 + 4 >> 2];
  $7 = Math_fround(Math_fround($5 - $10) * Math_fround(.5));
  $4 = Math_fround($4 + Math_fround($7 * $7));
  $11 = HEAPF32[$3 + 8 >> 2];
  $12 = HEAPF32[$2 + 8 >> 2];
  $7 = Math_fround(Math_fround($11 - $12) * Math_fround(.5));
  $7 = Math_fround(Math_sqrt(Math_fround($4 + Math_fround($7 * $7))));
  $11 = Math_fround(Math_fround($11 + $12) * Math_fround(.5));
  $10 = Math_fround(Math_fround($5 + $10) * Math_fround(.5));
  $12 = Math_fround(Math_fround($9 + $8) * Math_fround(.5));
  $9 = HEAPF32[$0 + 60 >> 2];
  label$1 : {
   if (!!(Math_fround(Math_abs($9)) > Math_fround(.7071067690849304))) {
    $8 = HEAPF32[$0 + 56 >> 2];
    $5 = Math_fround(Math_fround($9 * $9) + Math_fround($8 * $8));
    $4 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($5)));
    $13 = Math_fround($5 * $4);
    $5 = HEAPF32[$0 + 52 >> 2];
    $15 = Math_fround($8 * $4);
    $16 = Math_fround(-Math_fround($5 * $15));
    $14 = Math_fround(-Math_fround($9 * $4));
    $17 = Math_fround($5 * $14);
    break label$1;
   }
   $5 = HEAPF32[$0 + 52 >> 2];
   $8 = HEAPF32[$0 + 56 >> 2];
   $4 = Math_fround(Math_fround($5 * $5) + Math_fround($8 * $8));
   $13 = $4;
   $4 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($4)));
   $17 = Math_fround($13 * $4);
   $18 = Math_fround(-Math_fround($8 * $4));
   $16 = Math_fround($9 * $18);
   $14 = Math_fround($5 * $4);
   $13 = Math_fround(-Math_fround($9 * $14));
  }
  $4 = HEAPF32[$0 + 68 >> 2];
  $0 = $6 + 44 | 0;
  HEAP32[$0 >> 2] = 0;
  $3 = $6 + 28 | 0;
  HEAP32[$3 >> 2] = 0;
  $2 = $6 + 40 | 0;
  $4 = Math_fround(Math_fround(Math_fround($9 * $11) + Math_fround(Math_fround($12 * $5) + Math_fround($10 * $8))) - $4);
  $11 = Math_fround($11 - Math_fround($9 * $4));
  $15 = Math_fround($7 * $15);
  $19 = Math_fround($11 - $15);
  $9 = Math_fround($7 * $17);
  $17 = Math_fround($19 - $9);
  HEAPF32[$2 >> 2] = $17;
  $20 = $6 + 36 | 0;
  $10 = Math_fround($10 - Math_fround($8 * $4));
  $14 = Math_fround($7 * $14);
  $21 = Math_fround($10 - $14);
  $8 = Math_fround($7 * $16);
  $16 = Math_fround($21 - $8);
  HEAPF32[$20 >> 2] = $16;
  $22 = $6 + 24 | 0;
  $11 = Math_fround($15 + $11);
  HEAPF32[$22 >> 2] = $11 - $9;
  $23 = $6 + 20 | 0;
  $10 = Math_fround($14 + $10);
  HEAPF32[$23 >> 2] = $10 - $8;
  HEAP32[$6 + 12 >> 2] = 0;
  $5 = Math_fround($12 - Math_fround($5 * $4));
  $12 = Math_fround($7 * $18);
  $4 = Math_fround($5 - $12);
  $7 = Math_fround($7 * $13);
  $13 = Math_fround($4 - $7);
  HEAPF32[$6 + 32 >> 2] = $13;
  $5 = Math_fround($12 + $5);
  HEAPF32[$6 + 16 >> 2] = $5 - $7;
  $11 = Math_fround($9 + $11);
  HEAPF32[$6 + 8 >> 2] = $11;
  $10 = Math_fround($8 + $10);
  HEAPF32[$6 + 4 >> 2] = $10;
  $5 = Math_fround($7 + $5);
  HEAPF32[$6 >> 2] = $5;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $6, 0, 0);
  HEAP32[$0 >> 2] = 0;
  HEAPF32[$2 >> 2] = $11;
  HEAPF32[$20 >> 2] = $10;
  HEAP32[$3 >> 2] = 0;
  HEAPF32[$22 >> 2] = $9 + $19;
  HEAPF32[$23 >> 2] = $8 + $21;
  HEAPF32[$6 + 32 >> 2] = $5;
  HEAPF32[$6 + 16 >> 2] = $7 + $4;
  HEAP32[$6 + 12 >> 2] = 0;
  HEAPF32[$6 + 8 >> 2] = $17;
  HEAPF32[$6 + 4 >> 2] = $16;
  HEAPF32[$6 >> 2] = $13;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $6, 0, 1);
  global$0 = $6 + 48 | 0;
 }
 
 function btStaticPlaneShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 72 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 76 >> 2] = $2;
  $1 = $1 + 8 | 0;
  $2 = $0 + 80 | 0;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
 }
 
 function btStaticPlaneShape__getLocalScaling_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 + 72 | 0;
 }
 
 function btStaticPlaneShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 10516;
 }
 
 function btConcaveShape__setMargin_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  HEAPF32[$0 + 16 >> 2] = $1;
 }
 
 function btConcaveShape__getMargin_28_29_20const($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 16 >> 2]);
 }
 
 function btStaticPlaneShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 72 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 76 >> 2];
  HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 80 >> 2];
  HEAP32[$1 + 24 >> 2] = HEAP32[$0 + 84 >> 2];
  HEAP32[$1 + 28 >> 2] = HEAP32[$0 + 52 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$0 + 56 >> 2];
  HEAP32[$1 + 36 >> 2] = HEAP32[$0 + 60 >> 2];
  HEAP32[$1 + 40 >> 2] = HEAP32[$0 - -64 >> 2];
  $0 = HEAP32[$0 + 68 >> 2];
  HEAP32[$1 + 48 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = $0;
  return 10528;
 }
 
 function btGImpactMeshShapePart__btGImpactMeshShapePart_28btStridingMeshInterface__2c_20int_29($0, $1, $2) {
  var $3 = 0;
  btConcaveShape__btConcaveShape_28_29($0);
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP8[$0 + 92 | 0] = 1;
  $3 = $0 + 80 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  $3 = $0 - -64 | 0;
  HEAP32[$3 >> 2] = 1065353216;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 1065353216;
  HEAP32[$0 + 60 >> 2] = 1065353216;
  HEAP8[$0 + 52 | 0] = 1;
  HEAP32[$0 + 44 >> 2] = -8388609;
  $3 = $0 + 36 | 0;
  HEAP32[$3 >> 2] = -8388609;
  HEAP32[$3 + 4 >> 2] = -8388609;
  HEAP32[$0 + 28 >> 2] = 2139095039;
  HEAP32[$0 + 20 >> 2] = 2139095039;
  HEAP32[$0 + 24 >> 2] = 2139095039;
  HEAP32[$0 + 4 >> 2] = 25;
  HEAP32[$0 + 188 >> 2] = 0;
  $3 = $0 + 180 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $0 + 168 | 0;
  HEAP32[$3 >> 2] = 1065353216;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $0 + 160 | 0;
  HEAP32[$3 >> 2] = 1065353216;
  HEAP32[$3 + 4 >> 2] = 1065353216;
  HEAP32[$0 + 152 >> 2] = 1008981770;
  HEAP32[$0 + 148 >> 2] = 11168;
  HEAP32[$0 >> 2] = 10560;
  $3 = $0 + 204 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $0 + 196 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$0 + 156 >> 2] = $1;
  HEAP32[$0 + 176 >> 2] = $2;
  HEAP32[$0 + 144 >> 2] = $0 + 148;
 }
 
 function btGImpactMeshShapePart___btGImpactMeshShapePart_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 11012;
  $1 = HEAP32[$0 + 88 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 92 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 88 >> 2] = 0;
  }
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  HEAP8[$0 + 92 | 0] = 1;
  return $0 | 0;
 }
 
 function btGImpactMeshShapePart___btGImpactMeshShapePart_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 11012;
  $1 = HEAP32[$0 + 88 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 92 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 88 >> 2] = 0;
  }
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  HEAP8[$0 + 92 | 0] = 1;
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btGImpactMeshShapePart__lockChildShapes_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $0 = HEAP32[$0 + 144 >> 2];
  $1 = HEAP32[$0 + 32 >> 2];
  if (($1 | 0) >= 1) {
   HEAP32[$0 + 32 >> 2] = $1 + 1;
   return;
  }
  $1 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, $0 + 36 | 0, $0 + 40 | 0, $0 + 44 | 0, $0 + 48 | 0, $0 + 52 | 0, $0 + 56 | 0, $0 + 60 | 0, $0 - -64 | 0, HEAP32[$0 + 28 >> 2]);
  HEAP32[$0 + 32 >> 2] = 1;
 }
 
 function btGImpactMeshShapePart__unlockChildShapes_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = HEAP32[$0 + 144 >> 2];
  $1 = HEAP32[$0 + 32 >> 2];
  if ($1) {
   $2 = $0;
   if (($1 | 0) >= 2) {
    $0 = $1 + -1 | 0
   } else {
    $1 = HEAP32[$0 + 8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, HEAP32[$0 + 28 >> 2]);
    HEAP32[$0 + 36 >> 2] = 0;
    $0 = 0;
   }
   HEAP32[$2 + 32 >> 2] = $0;
  }
 }
 
 function btGImpactMeshShapePart__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 112 >> 2]]($0);
  $3 = $2 + 8 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $6 = HEAP32[$0 + 188 >> 2];
  label$1 : {
   if (!$6) {
    break label$1
   }
   $1 = Math_fround($1 / Math_fround($6 | 0));
   $3 = HEAP32[$0 + 196 >> 2];
   $13 = HEAP32[$0 + 184 >> 2];
   if (HEAP32[$0 + 192 >> 2] != 1) {
    $12 = 0 - $3 | 0;
    $3 = Math_imul($6 + -1 | 0, $3) + $13 | 0;
    while (1) {
     $4 = HEAPF32[$3 + 8 >> 2];
     $7 = HEAPF32[$0 + 168 >> 2];
     $5 = Math_fround(HEAPF32[$3 >> 2] * HEAPF32[$0 + 160 >> 2]);
     $5 = Math_fround($5 * $5);
     $8 = Math_fround(HEAPF32[$3 + 4 >> 2] * HEAPF32[$0 + 164 >> 2]);
     $8 = Math_fround($8 * $8);
     $9 = Math_fround(Math_fround($1 * Math_fround($5 + $8)) + $9);
     HEAPF32[$2 + 8 >> 2] = $9;
     $4 = Math_fround($4 * $7);
     $4 = Math_fround($4 * $4);
     $10 = Math_fround(Math_fround($1 * Math_fround($5 + $4)) + $10);
     HEAPF32[$2 + 4 >> 2] = $10;
     $11 = Math_fround($11 + Math_fround($1 * Math_fround($8 + $4)));
     HEAPF32[$2 >> 2] = $11;
     $3 = $3 + $12 | 0;
     $6 = $6 + -1 | 0;
     if ($6) {
      continue
     }
     break;
    };
    break label$1;
   }
   $12 = 0 - $3 | 0;
   $3 = Math_imul($6 + -1 | 0, $3) + $13 | 0;
   while (1) {
    $4 = HEAPF32[$0 + 168 >> 2];
    $7 = Math_fround(HEAPF64[$3 >> 3] * +HEAPF32[$0 + 160 >> 2]);
    $7 = Math_fround($7 * $7);
    $5 = Math_fround(HEAPF64[$3 + 8 >> 3] * +HEAPF32[$0 + 164 >> 2]);
    $5 = Math_fround($5 * $5);
    $9 = Math_fround(Math_fround($1 * Math_fround($7 + $5)) + $9);
    HEAPF32[$2 + 8 >> 2] = $9;
    $4 = Math_fround(HEAPF64[$3 + 16 >> 3] * +$4);
    $4 = Math_fround($4 * $4);
    $10 = Math_fround(Math_fround($1 * Math_fround($7 + $4)) + $10);
    HEAPF32[$2 + 4 >> 2] = $10;
    $11 = Math_fround($11 + Math_fround($1 * Math_fround($5 + $4)));
    HEAPF32[$2 >> 2] = $11;
    $3 = $3 + $12 | 0;
    $6 = $6 + -1 | 0;
    if ($6) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 116 >> 2]]($0);
 }
 
 function btGImpactMeshShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 - 16 | 0;
  global$0 = $4;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $3 = $2 + 8 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = HEAP32[$0 + 156 >> 2];
  if ($3) {
   $1 = Math_fround($1 / Math_fround($3 | 0));
   $5 = ($3 << 2) + -4 | 0;
   while (1) {
    $6 = HEAP32[$5 + HEAP32[$0 + 164 >> 2] >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 32 >> 2]]($6, $1, $4);
    HEAPF32[$2 >> 2] = HEAPF32[$4 >> 2] + HEAPF32[$2 >> 2];
    HEAPF32[$2 + 4 >> 2] = HEAPF32[$4 + 4 >> 2] + HEAPF32[$2 + 4 >> 2];
    HEAPF32[$2 + 8 >> 2] = HEAPF32[$4 + 8 >> 2] + HEAPF32[$2 + 8 >> 2];
    $5 = $5 + -4 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  global$0 = $4 + 16 | 0;
 }
 
 function btGImpactMeshShapePart__processAllTrianglesRay_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0;
  $4 = global$0 - 112 | 0;
  global$0 = $4;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 112 >> 2]]($0);
  HEAP32[$4 + 100 >> 2] = 0;
  HEAP8[$4 + 104 | 0] = 1;
  HEAP32[$4 + 92 >> 2] = 0;
  HEAP32[$4 + 96 >> 2] = 0;
  HEAP32[$4 + 84 >> 2] = 0;
  $5 = Math_fround(HEAPF32[$3 + 8 >> 2] - HEAPF32[$2 + 8 >> 2]);
  $9 = $5;
  $6 = Math_fround(HEAPF32[$3 >> 2] - HEAPF32[$2 >> 2]);
  $7 = Math_fround(HEAPF32[$3 + 4 >> 2] - HEAPF32[$2 + 4 >> 2]);
  $5 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($7 * $7)) + Math_fround($5 * $5)))));
  HEAPF32[$4 + 80 >> 2] = $9 * $5;
  HEAPF32[$4 + 76 >> 2] = $7 * $5;
  HEAPF32[$4 + 72 >> 2] = $6 * $5;
  btGImpactQuantizedBvh__rayQuery_28btVector3_20const__2c_20btVector3_20const__2c_20btAlignedObjectArray_int___29_20const($0 + 72 | 0, $4 + 72 | 0, $2, $4 + 88 | 0);
  $3 = HEAP32[$4 + 92 >> 2];
  label$1 : {
   if (!$3) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 116 >> 2]]($0);
    break label$1;
   }
   $10 = HEAP32[$0 + 176 >> 2];
   HEAP32[$4 + 64 >> 2] = 1008981770;
   $2 = ($3 << 2) + -4 | 0;
   while (1) {
    $11 = HEAP32[$2 + HEAP32[$4 + 100 >> 2] >> 2];
    $8 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 20 >> 2]]($8, $11, $4);
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $4, $10, HEAP32[$2 + HEAP32[$4 + 100 >> 2] >> 2]);
    $2 = $2 + -4 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   };
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 116 >> 2]]($0);
  }
  $2 = HEAP32[$4 + 100 >> 2];
  if ($2) {
   if (HEAPU8[$4 + 104 | 0]) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$4 + 100 >> 2] = 0;
  }
  global$0 = $4 + 112 | 0;
 }
 
 function btGImpactMeshShapePart__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = global$0 - 128 | 0;
  global$0 = $4;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 112 >> 2]]($0);
  $7 = $2 + 8 | 0;
  $8 = HEAP32[$7 >> 2];
  $6 = HEAP32[$7 + 4 >> 2];
  $5 = $4 + 104 | 0;
  HEAP32[$5 >> 2] = $8;
  HEAP32[$5 + 4 >> 2] = $6;
  $7 = $3 + 8 | 0;
  $8 = HEAP32[$7 >> 2];
  $5 = HEAP32[$7 + 4 >> 2];
  $6 = $4 + 120 | 0;
  HEAP32[$6 >> 2] = $8;
  HEAP32[$6 + 4 >> 2] = $5;
  $6 = HEAP32[$2 + 4 >> 2];
  HEAP32[$4 + 96 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$4 + 100 >> 2] = $6;
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 + 112 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 116 >> 2] = $5;
  HEAP32[$4 + 84 >> 2] = 0;
  HEAP8[$4 + 88 | 0] = 1;
  HEAP32[$4 + 76 >> 2] = 0;
  HEAP32[$4 + 80 >> 2] = 0;
  btGImpactQuantizedBvh__boxQuery_28btAABB_20const__2c_20btAlignedObjectArray_int___29_20const($0 + 72 | 0, $4 + 96 | 0, $4 + 72 | 0);
  $2 = HEAP32[$4 + 76 >> 2];
  label$1 : {
   if (!$2) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 116 >> 2]]($0);
    break label$1;
   }
   $6 = HEAP32[$0 + 176 >> 2];
   HEAP32[$4 + 64 >> 2] = 1008981770;
   $3 = ($2 << 2) + -4 | 0;
   while (1) {
    $7 = HEAP32[$3 + HEAP32[$4 + 84 >> 2] >> 2];
    $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 20 >> 2]]($5, $7, $4);
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $4, $6, HEAP32[$3 + HEAP32[$4 + 84 >> 2] >> 2]);
    $3 = $3 + -4 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   };
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 116 >> 2]]($0);
  }
  $3 = HEAP32[$4 + 84 >> 2];
  if ($3) {
   if (HEAPU8[$4 + 88 | 0]) {
    btAlignedFreeInternal_28void__29($3)
   }
   HEAP32[$4 + 84 >> 2] = 0;
  }
  global$0 = $4 + 128 | 0;
 }
 
 function btGImpactMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = HEAP32[$0 + 156 >> 2];
  if ($4) {
   $5 = ($4 << 2) + -4 | 0;
   while (1) {
    $6 = HEAP32[$5 + HEAP32[$0 + 164 >> 2] >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $1, $2, $3);
    $5 = $5 + -4 | 0;
    $4 = $4 + -1 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
 }
 
 function btGImpactMeshShape__processAllTrianglesRay_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = HEAP32[$0 + 156 >> 2];
  if ($4) {
   $5 = ($4 << 2) + -4 | 0;
   while (1) {
    $6 = HEAP32[$5 + HEAP32[$0 + 164 >> 2] >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 144 >> 2]]($6, $1, $2, $3);
    $5 = $5 + -4 | 0;
    $4 = $4 + -1 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
 }
 
 function btGImpactMeshShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  $3 = HEAP32[$0 + 148 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 56 >> 2]]($3, $1 + 12 | 0, $2) | 0;
  HEAP32[$1 + 56 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$1 + 40 >> 2] = HEAP32[$0 + 56 >> 2];
  HEAP32[$1 + 44 >> 2] = HEAP32[$0 + 60 >> 2];
  HEAP32[$1 + 48 >> 2] = HEAP32[$0 - -64 >> 2];
  HEAP32[$1 + 52 >> 2] = HEAP32[$0 + 68 >> 2];
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0) | 0), HEAP32[wasm2js_i32$0 + 60 >> 2] = wasm2js_i32$1;
  return 10708;
 }
 
 function btGImpactShapeInterface__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0);
  $20 = HEAPF32[$1 + 52 >> 2];
  $10 = HEAPF32[$1 + 24 >> 2];
  $14 = HEAPF32[$1 + 20 >> 2];
  $13 = HEAPF32[$1 + 56 >> 2];
  $11 = HEAPF32[$1 + 40 >> 2];
  $6 = HEAPF32[$0 + 44 >> 2];
  $7 = HEAPF32[$0 + 28 >> 2];
  $8 = HEAPF32[$0 + 36 >> 2];
  $12 = HEAPF32[$1 + 36 >> 2];
  $9 = HEAPF32[$0 + 40 >> 2];
  $4 = HEAPF32[$0 + 24 >> 2];
  $21 = HEAPF32[$1 + 48 >> 2];
  $15 = HEAPF32[$1 + 8 >> 2];
  $16 = HEAPF32[$1 >> 2];
  $17 = HEAPF32[$1 + 4 >> 2];
  $18 = HEAPF32[$1 + 16 >> 2];
  $19 = HEAPF32[$1 + 32 >> 2];
  $5 = HEAPF32[$0 + 20 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  $5 = Math_fround(Math_fround($5 + $8) * Math_fround(.5));
  $4 = Math_fround(Math_fround($4 + $9) * Math_fround(.5));
  $7 = Math_fround(Math_fround($7 + $6) * Math_fround(.5));
  $13 = Math_fround($13 + Math_fround(Math_fround(Math_fround($19 * $5) + Math_fround($12 * $4)) + Math_fround($11 * $7)));
  $8 = Math_fround($8 - $5);
  $9 = Math_fround($9 - $4);
  $6 = Math_fround($6 - $7);
  $11 = Math_fround(Math_fround(Math_fround($8 * Math_fround(Math_abs($19))) + Math_fround($9 * Math_fround(Math_abs($12)))) + Math_fround($6 * Math_fround(Math_abs($11))));
  HEAPF32[$2 + 8 >> 2] = $13 - $11;
  $12 = Math_fround($20 + Math_fround(Math_fround(Math_fround($5 * $18) + Math_fround($4 * $14)) + Math_fround($7 * $10)));
  $10 = Math_fround(Math_fround(Math_fround($8 * Math_fround(Math_abs($18))) + Math_fround($9 * Math_fround(Math_abs($14)))) + Math_fround($6 * Math_fround(Math_abs($10))));
  HEAPF32[$2 + 4 >> 2] = $12 - $10;
  $5 = Math_fround($21 + Math_fround(Math_fround(Math_fround($5 * $16) + Math_fround($4 * $17)) + Math_fround($7 * $15)));
  $4 = Math_fround(Math_fround(Math_fround($8 * Math_fround(Math_abs($16))) + Math_fround($9 * Math_fround(Math_abs($17)))) + Math_fround($6 * Math_fround(Math_abs($15))));
  HEAPF32[$2 >> 2] = $5 - $4;
  HEAP32[$3 + 12 >> 2] = 0;
  HEAPF32[$3 + 8 >> 2] = $11 + $13;
  HEAPF32[$3 + 4 >> 2] = $10 + $12;
  HEAPF32[$3 >> 2] = $4 + $5;
 }
 
 function btGImpactShapeInterface__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 60 >> 2] = $2;
  $1 = $1 + 8 | 0;
  $3 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $2 = $0 - -64 | 0;
  HEAP32[$2 >> 2] = $3;
  HEAP32[$2 + 4 >> 2] = $1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0);
 }
 
 function btGImpactShapeInterface__getLocalScaling_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 + 56 | 0;
 }
 
 function btGImpactShapeInterface__setMargin_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0;
  HEAPF32[$0 + 16 >> 2] = $1;
  $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 88 >> 2]]($0) | 0;
  if ($2) {
   $2 = $2 + -1 | 0;
   while (1) {
    $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 124 >> 2]]($0, $2) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 44 >> 2]]($3, $1);
    $2 = $2 + -1 | 0;
    if (($2 | 0) != -1) {
     continue
    }
    break;
   };
  }
  HEAP8[$0 + 52 | 0] = 1;
 }
 
 function btGImpactShapeInterface__calcLocalAABB_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 112 >> 2]]($0);
  $1 = $0 + 72 | 0;
  label$1 : {
   if (!HEAP32[$0 + 72 >> 2]) {
    btGImpactQuantizedBvh__buildSet_28_29($1);
    break label$1;
   }
   btGImpactQuantizedBvh__refit_28_29($1);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 116 >> 2]]($0);
  $1 = HEAP32[$0 + 88 >> 2];
  $8 = HEAPU16[$1 + 8 >> 1];
  $9 = HEAPU16[$1 + 10 >> 1];
  $10 = HEAPU16[$1 >> 1];
  $11 = HEAPU16[$1 + 2 >> 1];
  $12 = HEAPU16[$1 + 4 >> 1];
  $1 = HEAPU16[$1 + 6 >> 1];
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  $2 = HEAPF32[$0 + 96 >> 2];
  $3 = HEAPF32[$0 + 128 >> 2];
  HEAPF32[$0 + 36 >> 2] = $2 + Math_fround(Math_fround($1 >>> 0) / $3);
  $4 = HEAPF32[$0 + 136 >> 2];
  $5 = HEAPF32[$0 + 104 >> 2];
  HEAPF32[$0 + 28 >> 2] = Math_fround(Math_fround($12 >>> 0) / $4) + $5;
  $6 = HEAPF32[$0 + 132 >> 2];
  $7 = HEAPF32[$0 + 100 >> 2];
  HEAPF32[$0 + 24 >> 2] = Math_fround(Math_fround($11 >>> 0) / $6) + $7;
  HEAPF32[$0 + 20 >> 2] = $2 + Math_fround(Math_fround($10 >>> 0) / $3);
  HEAPF32[$0 + 44 >> 2] = $5 + Math_fround(Math_fround($9 >>> 0) / $4);
  HEAPF32[$0 + 40 >> 2] = $7 + Math_fround(Math_fround($8 >>> 0) / $6);
 }
 
 function btGImpactShapeInterface__postUpdate_28_29($0) {
  $0 = $0 | 0;
  HEAP8[$0 + 52 | 0] = 1;
 }
 
 function btGImpactShapeInterface__getShapeType_28_29_20const($0) {
  $0 = $0 | 0;
  return 25;
 }
 
 function btGImpactShapeInterface__lockChildShapes_28_29_20const($0) {
  $0 = $0 | 0;
 }
 
 function btGImpactMeshShapePart__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 160 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $1 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 168 | 0;
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0);
 }
 
 function btGImpactMeshShapePart__getLocalScaling_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 + 160 | 0;
 }
 
 function btGImpactMeshShapePart__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 11292;
 }
 
 function btGImpactMeshShapePart__setMargin_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  HEAPF32[$0 + 152 >> 2] = $1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0);
 }
 
 function btGImpactMeshShapePart__getMargin_28_29_20const($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 152 >> 2]);
 }
 
 function btGImpactMeshShapePart__getPrimitiveManager_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 + 148 | 0;
 }
 
 function btGImpactMeshShapePart__getNumChildShapes_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 208 >> 2];
 }
 
 function btGImpactMeshShapePart__getBulletTriangle_28int_2c_20btTriangleShapeEx__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  btGImpactMeshShapePart__TrimeshPrimitiveManager__get_bullet_triangle_28int_2c_20btTriangleShapeEx__29_20const($0 + 148 | 0, $1, $2);
 }
 
 function btGImpactMeshShapePart__TrimeshPrimitiveManager__get_bullet_triangle_28int_2c_20btTriangleShapeEx__29_20const($0, $1, $2) {
  var $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = 0;
  $1 = HEAP32[$0 + 52 >> 2] + Math_imul($1, HEAP32[$0 + 56 >> 2]) | 0;
  $6 = HEAP32[$0 + 36 >> 2];
  label$1 : {
   if (HEAP32[$0 + 64 >> 2] == 3) {
    $4 = HEAPU16[$1 + 4 >> 1];
    $5 = HEAPU16[$1 + 2 >> 1];
    $1 = HEAPU16[$1 >> 1];
    break label$1;
   }
   $4 = HEAP32[$1 + 8 >> 2];
   $5 = HEAP32[$1 + 4 >> 2];
   $1 = HEAP32[$1 >> 2];
  }
  $1 = $6 + Math_imul($1, HEAP32[$0 + 48 >> 2]) | 0;
  $6 = $2 + 68 | 0;
  label$3 : {
   if (HEAP32[$0 + 44 >> 2] == 1) {
    HEAPF32[$2 + 60 >> 2] = HEAPF64[$1 >> 3] * +HEAPF32[$0 + 12 >> 2];
    HEAPF32[$2 - -64 >> 2] = HEAPF64[$1 + 8 >> 3] * +HEAPF32[$0 + 16 >> 2];
    $3 = Math_fround(HEAPF64[$1 + 16 >> 3] * +HEAPF32[$0 + 20 >> 2]);
    break label$3;
   }
   HEAPF32[$2 + 60 >> 2] = HEAPF32[$1 >> 2] * HEAPF32[$0 + 12 >> 2];
   HEAPF32[$2 - -64 >> 2] = HEAPF32[$1 + 4 >> 2] * HEAPF32[$0 + 16 >> 2];
   $3 = Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[$0 + 20 >> 2]);
  }
  HEAPF32[$6 >> 2] = $3;
  $1 = HEAP32[$0 + 36 >> 2] + Math_imul($5, HEAP32[$0 + 48 >> 2]) | 0;
  $5 = $2 + 84 | 0;
  label$5 : {
   if (HEAP32[$0 + 44 >> 2] == 1) {
    HEAPF32[$2 + 76 >> 2] = HEAPF64[$1 >> 3] * +HEAPF32[$0 + 12 >> 2];
    HEAPF32[$2 + 80 >> 2] = HEAPF64[$1 + 8 >> 3] * +HEAPF32[$0 + 16 >> 2];
    $3 = Math_fround(HEAPF64[$1 + 16 >> 3] * +HEAPF32[$0 + 20 >> 2]);
    break label$5;
   }
   HEAPF32[$2 + 76 >> 2] = HEAPF32[$1 >> 2] * HEAPF32[$0 + 12 >> 2];
   HEAPF32[$2 + 80 >> 2] = HEAPF32[$1 + 4 >> 2] * HEAPF32[$0 + 16 >> 2];
   $3 = Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[$0 + 20 >> 2]);
  }
  HEAPF32[$5 >> 2] = $3;
  $1 = HEAP32[$0 + 36 >> 2] + Math_imul($4, HEAP32[$0 + 48 >> 2]) | 0;
  $4 = $2 + 100 | 0;
  label$7 : {
   if (HEAP32[$0 + 44 >> 2] == 1) {
    HEAPF32[$2 + 92 >> 2] = HEAPF64[$1 >> 3] * +HEAPF32[$0 + 12 >> 2];
    HEAPF32[$2 + 96 >> 2] = HEAPF64[$1 + 8 >> 3] * +HEAPF32[$0 + 16 >> 2];
    $3 = Math_fround(HEAPF64[$1 + 16 >> 3] * +HEAPF32[$0 + 20 >> 2]);
    break label$7;
   }
   HEAPF32[$2 + 92 >> 2] = HEAPF32[$1 >> 2] * HEAPF32[$0 + 12 >> 2];
   HEAPF32[$2 + 96 >> 2] = HEAPF32[$1 + 4 >> 2] * HEAPF32[$0 + 16 >> 2];
   $3 = Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[$0 + 20 >> 2]);
  }
  HEAPF32[$4 >> 2] = $3;
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 44 >> 2]]($2, HEAPF32[$0 + 4 >> 2]);
 }
 
 function btGImpactShapeInterface__getChildAabb_28int_2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0);
  $5 = global$0 - 32 | 0;
  global$0 = $5;
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0) | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $5);
  $23 = HEAPF32[$2 + 56 >> 2];
  $15 = HEAPF32[$2 + 36 >> 2];
  $16 = HEAPF32[$2 + 40 >> 2];
  $17 = HEAPF32[$2 + 32 >> 2];
  $12 = HEAPF32[$2 + 48 >> 2];
  $9 = HEAPF32[$2 + 8 >> 2];
  $18 = HEAPF32[$2 >> 2];
  $19 = HEAPF32[$2 + 4 >> 2];
  $0 = $5 + 20 | 0;
  $1 = $0;
  $7 = HEAPF32[$5 + 16 >> 2];
  $6 = $7;
  $7 = Math_fround(Math_fround($7 + HEAPF32[$5 >> 2]) * Math_fround(.5));
  $13 = Math_fround($6 - $7);
  $10 = HEAPF32[$2 + 16 >> 2];
  $6 = HEAPF32[$0 >> 2];
  $8 = $6;
  $6 = Math_fround(Math_fround($6 + HEAPF32[$5 + 4 >> 2]) * Math_fround(.5));
  $14 = Math_fround($8 - $6);
  $20 = HEAPF32[$2 + 20 >> 2];
  $0 = $5 + 24 | 0;
  $8 = HEAPF32[$0 >> 2];
  $11 = $8;
  $8 = Math_fround(Math_fround($8 + HEAPF32[$5 + 8 >> 2]) * Math_fround(.5));
  $11 = Math_fround($11 - $8);
  $21 = HEAPF32[$2 + 24 >> 2];
  $22 = Math_fround(Math_fround(Math_fround($13 * Math_fround(Math_abs($10))) + Math_fround($14 * Math_fround(Math_abs($20)))) + Math_fround($11 * Math_fround(Math_abs($21))));
  $10 = Math_fround(Math_fround(Math_fround(Math_fround($7 * $10) + Math_fround($6 * $20)) + Math_fround($8 * $21)) + HEAPF32[$2 + 52 >> 2]);
  HEAPF32[$1 >> 2] = $22 + $10;
  HEAPF32[$5 + 4 >> 2] = $10 - $22;
  $12 = Math_fround($12 + Math_fround(Math_fround(Math_fround($7 * $18) + Math_fround($6 * $19)) + Math_fround($8 * $9)));
  $9 = Math_fround(Math_fround(Math_fround($13 * Math_fround(Math_abs($18))) + Math_fround($14 * Math_fround(Math_abs($19)))) + Math_fround($11 * Math_fround(Math_abs($9))));
  HEAPF32[$5 >> 2] = $12 - $9;
  $1 = HEAP32[$5 + 4 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$5 + 12 >> 2] = 0;
  $7 = Math_fround($23 + Math_fround(Math_fround(Math_fround($7 * $17) + Math_fround($6 * $15)) + Math_fround($8 * $16)));
  $6 = Math_fround(Math_fround(Math_fround($13 * Math_fround(Math_abs($17))) + Math_fround($14 * Math_fround(Math_abs($15)))) + Math_fround($11 * Math_fround(Math_abs($16))));
  HEAPF32[$5 + 8 >> 2] = $7 - $6;
  $1 = $3 + 8 | 0;
  $3 = HEAP32[$5 + 12 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$5 + 8 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  HEAP32[$5 + 28 >> 2] = 0;
  HEAPF32[$0 >> 2] = $6 + $7;
  HEAPF32[$5 + 16 >> 2] = $9 + $12;
  $1 = HEAP32[$5 + 20 >> 2];
  $3 = $4;
  HEAP32[$3 >> 2] = HEAP32[$5 + 16 >> 2];
  HEAP32[$3 + 4 >> 2] = $1;
  $1 = $3 + 8 | 0;
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  global$0 = $5 + 32 | 0;
 }
 
 function btGImpactMeshShape___btGImpactMeshShape_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  HEAP32[$0 >> 2] = 10820;
  $2 = HEAP32[$0 + 164 >> 2];
  $1 = HEAP32[$0 + 156 >> 2];
  if ($1) {
   $3 = ($1 << 2) + -4 | 0;
   while (1) {
    $1 = $1 + -1 | 0;
    $4 = HEAP32[$2 + $3 >> 2];
    if ($4) {
     FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 4 >> 2]]($4);
     $2 = HEAP32[$0 + 164 >> 2];
    }
    $3 = $3 + -4 | 0;
    if ($1) {
     continue
    }
    break;
   };
  }
  if ($2) {
   if (HEAPU8[$0 + 168 | 0]) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$0 + 164 >> 2] = 0;
  }
  HEAP32[$0 + 164 >> 2] = 0;
  HEAP32[$0 + 156 >> 2] = 0;
  HEAP32[$0 + 160 >> 2] = 0;
  HEAP32[$0 >> 2] = 11012;
  HEAP8[$0 + 168 | 0] = 1;
  $1 = HEAP32[$0 + 88 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 92 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 88 >> 2] = 0;
  }
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  HEAP8[$0 + 92 | 0] = 1;
  return $0 | 0;
 }
 
 function btGImpactMeshShape___btGImpactMeshShape_28_29_1($0) {
  $0 = $0 | 0;
  btAlignedFreeInternal_28void__29(btGImpactMeshShape___btGImpactMeshShape_28_29($0));
 }
 
 function btGImpactMeshShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 56 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 60 >> 2] = $3;
  $2 = $1 + 8 | 0;
  $4 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $3 = $0 - -64 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $2;
  $2 = HEAP32[$0 + 156 >> 2];
  if ($2) {
   $3 = ($2 << 2) + -4 | 0;
   while (1) {
    $4 = HEAP32[$3 + HEAP32[$0 + 164 >> 2] >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 24 >> 2]]($4, $1);
    $3 = $3 + -4 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  HEAP8[$0 + 52 | 0] = 1;
 }
 
 function btGImpactMeshShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 11313;
 }
 
 function btGImpactMeshShape__setMargin_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0, $4 = 0;
  HEAPF32[$0 + 16 >> 2] = $1;
  $2 = HEAP32[$0 + 156 >> 2];
  if ($2) {
   $3 = ($2 << 2) + -4 | 0;
   while (1) {
    $4 = HEAP32[$3 + HEAP32[$0 + 164 >> 2] >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 44 >> 2]]($4, $1);
    $3 = $3 + -4 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  HEAP8[$0 + 52 | 0] = 1;
 }
 
 function btGImpactMeshShape__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 64;
 }
 
 function btGImpactMeshShape__calcLocalAABB_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0;
  HEAP32[$0 + 20 >> 2] = 2139095039;
  HEAP32[$0 + 24 >> 2] = 2139095039;
  HEAP32[$0 + 44 >> 2] = -8388609;
  $10 = $0 + 36 | 0;
  $1 = $10;
  HEAP32[$1 >> 2] = -8388609;
  HEAP32[$1 + 4 >> 2] = -8388609;
  HEAP32[$0 + 28 >> 2] = 2139095039;
  $4 = HEAP32[$0 + 156 >> 2];
  if ($4) {
   $15 = $0 + 20 | 0;
   $8 = ($4 << 2) + -4 | 0;
   $11 = HEAP32[$0 + 164 >> 2];
   $3 = Math_fround(3402823466385288598117041.0e14);
   $12 = Math_fround(-3402823466385288598117041.0e14);
   $13 = Math_fround(-3402823466385288598117041.0e14);
   $5 = Math_fround(-3402823466385288598117041.0e14);
   $14 = Math_fround(3402823466385288598117041.0e14);
   $6 = Math_fround(3402823466385288598117041.0e14);
   while (1) {
    $4 = $4 + -1 | 0;
    $1 = HEAP32[$8 + $11 >> 2];
    if (HEAPU8[$1 + 52 | 0]) {
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($1);
     HEAP8[$1 + 52 | 0] = 0;
     $12 = HEAPF32[$0 + 44 >> 2];
     $13 = HEAPF32[$0 + 40 >> 2];
     $14 = HEAPF32[$0 + 24 >> 2];
     $11 = HEAP32[$0 + 164 >> 2];
     $5 = HEAPF32[$0 + 36 >> 2];
     $6 = HEAPF32[$0 + 20 >> 2];
     $3 = HEAPF32[$0 + 28 >> 2];
    }
    $1 = HEAP32[$8 + $11 >> 2];
    $9 = HEAPF32[$1 + 20 >> 2];
    $6 = $6 > $9 ? $9 : $6;
    HEAPF32[$0 + 20 >> 2] = $6;
    $2 = $1 + 20 | 0;
    $7 = $14 > HEAPF32[$1 + 24 >> 2] ? $2 : $15;
    $14 = HEAPF32[$7 + 4 >> 2];
    HEAP32[$0 + 24 >> 2] = HEAP32[$7 + 4 >> 2];
    $2 = $3 > HEAPF32[$1 + 28 >> 2] ? $2 : $15;
    $9 = HEAPF32[$2 + 8 >> 2];
    HEAP32[$0 + 28 >> 2] = HEAP32[$2 + 8 >> 2];
    $2 = $1 + 36 | 0;
    $3 = HEAPF32[$2 >> 2];
    $5 = $5 < $3 ? $3 : $5;
    HEAPF32[$0 + 36 >> 2] = $5;
    $7 = $13 < HEAPF32[$1 + 40 >> 2] ? $2 : $10;
    $13 = HEAPF32[$7 + 4 >> 2];
    HEAP32[$0 + 40 >> 2] = HEAP32[$7 + 4 >> 2];
    $1 = $12 < HEAPF32[$1 + 44 >> 2] ? $2 : $10;
    $12 = HEAPF32[$1 + 8 >> 2];
    $1 = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 44 >> 2] = $1;
    $3 = $9;
    $8 = $8 + -4 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
 }
 
 function btGImpactMeshShape__postUpdate_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = HEAP32[$0 + 156 >> 2];
  if ($1) {
   $2 = ($1 << 2) + -4 | 0;
   while (1) {
    $3 = HEAP32[$2 + HEAP32[$0 + 164 >> 2] >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 72 >> 2]]($3);
    $2 = $2 + -4 | 0;
    $1 = $1 + -1 | 0;
    if ($1) {
     continue
    }
    break;
   };
  }
  HEAP8[$0 + 52 | 0] = 1;
 }
 
 function btGImpactMeshShape__getChildAabb_28int_2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
 }
 
 function btGImpactMeshShapePart__TrimeshPrimitiveManager__get_primitive_count_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 60 >> 2];
 }
 
 function btGImpactMeshShapePart__TrimeshPrimitiveManager__get_primitive_box_28int_2c_20btAABB__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
  $3 = global$0 - 80 | 0;
  global$0 = $3;
  HEAP32[$3 + 72 >> 2] = 1008981770;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, $1, $3 + 8 | 0);
  $5 = HEAPF32[$3 + 12 >> 2];
  $0 = $3 + 40 | 0;
  $1 = $3 + 24 | 0;
  $8 = HEAPF32[$3 + 28 >> 2];
  $9 = HEAPF32[$3 + 44 >> 2];
  $4 = $8 > $9;
  $6 = $5 > HEAPF32[($4 ? $0 : $1) + 4 >> 2];
  $7 = $6 ? 36 : 4;
  $13 = HEAPF32[($3 + 8 | 0) + ($4 ? $7 : $6 ? 20 : $7) >> 2];
  $11 = HEAPF32[$3 + 16 >> 2];
  $10 = HEAPF32[$3 + 32 >> 2];
  $12 = HEAPF32[$3 + 48 >> 2];
  $4 = $10 > $12;
  $6 = $11 > HEAPF32[($4 ? $0 : $1) + 8 >> 2];
  $7 = $6 ? 40 : 8;
  $14 = HEAPF32[($3 + 8 | 0) + ($4 ? $7 : $6 ? 24 : $7) >> 2];
  $4 = $8 < $9;
  $6 = $5 < HEAPF32[($4 ? $0 : $1) + 4 >> 2];
  $7 = $6 ? 36 : 4;
  $15 = HEAPF32[($3 + 8 | 0) + ($4 ? $7 : $6 ? 20 : $7) >> 2];
  $4 = $10 < $12;
  $0 = $11 < HEAPF32[($4 ? $0 : $1) + 8 >> 2];
  $1 = $0 ? 40 : 8;
  $11 = HEAPF32[($3 + 8 | 0) + ($4 ? $1 : $0 ? 24 : $1) >> 2];
  $9 = HEAPF32[$3 + 24 >> 2];
  $8 = HEAPF32[$3 + 40 >> 2];
  $0 = $9 > $8;
  $10 = HEAPF32[$3 + 8 >> 2];
  $1 = $10 > ($0 ? $8 : $9);
  $4 = $1 << 5;
  $12 = HEAPF32[($3 + 8 | 0) + ($0 ? $4 : $1 ? 16 : $4) >> 2];
  $5 = HEAPF32[$3 + 72 >> 2];
  $0 = $9 < $8;
  $1 = $10 < ($0 ? $8 : $9);
  $4 = $1 << 5;
  HEAPF32[$2 + 16 >> 2] = $5 + HEAPF32[($3 + 8 | 0) + ($0 ? $4 : $1 ? 16 : $4) >> 2];
  HEAPF32[$2 >> 2] = $12 - $5;
  HEAPF32[$2 + 24 >> 2] = $5 + $11;
  HEAPF32[$2 + 20 >> 2] = $5 + $15;
  HEAPF32[$2 + 8 >> 2] = $14 - $5;
  HEAPF32[$2 + 4 >> 2] = $13 - $5;
  global$0 = $3 + 80 | 0;
 }
 
 function btGImpactMeshShapePart__TrimeshPrimitiveManager__get_primitive_triangle_28int_2c_20btPrimitiveTriangle__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = 0;
  $1 = HEAP32[$0 + 52 >> 2] + Math_imul($1, HEAP32[$0 + 56 >> 2]) | 0;
  $4 = HEAP32[$0 + 36 >> 2];
  label$1 : {
   if (HEAP32[$0 + 64 >> 2] == 3) {
    $5 = HEAPU16[$1 + 4 >> 1];
    $6 = HEAPU16[$1 + 2 >> 1];
    $1 = HEAPU16[$1 >> 1];
    break label$1;
   }
   $5 = HEAP32[$1 + 8 >> 2];
   $6 = HEAP32[$1 + 4 >> 2];
   $1 = HEAP32[$1 >> 2];
  }
  $1 = $4 + Math_imul($1, HEAP32[$0 + 48 >> 2]) | 0;
  $4 = $2;
  label$3 : {
   if (HEAP32[$0 + 44 >> 2] == 1) {
    HEAPF32[$2 >> 2] = HEAPF64[$1 >> 3] * +HEAPF32[$0 + 12 >> 2];
    HEAPF32[$2 + 4 >> 2] = HEAPF64[$1 + 8 >> 3] * +HEAPF32[$0 + 16 >> 2];
    $3 = Math_fround(HEAPF64[$1 + 16 >> 3] * +HEAPF32[$0 + 20 >> 2]);
    break label$3;
   }
   HEAPF32[$2 >> 2] = HEAPF32[$1 >> 2] * HEAPF32[$0 + 12 >> 2];
   HEAPF32[$2 + 4 >> 2] = HEAPF32[$1 + 4 >> 2] * HEAPF32[$0 + 16 >> 2];
   $3 = Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[$0 + 20 >> 2]);
  }
  HEAPF32[$4 + 8 >> 2] = $3;
  $1 = HEAP32[$0 + 36 >> 2] + Math_imul($6, HEAP32[$0 + 48 >> 2]) | 0;
  $4 = $2 + 24 | 0;
  label$5 : {
   if (HEAP32[$0 + 44 >> 2] == 1) {
    HEAPF32[$2 + 16 >> 2] = HEAPF64[$1 >> 3] * +HEAPF32[$0 + 12 >> 2];
    HEAPF32[$2 + 20 >> 2] = HEAPF64[$1 + 8 >> 3] * +HEAPF32[$0 + 16 >> 2];
    $3 = Math_fround(HEAPF64[$1 + 16 >> 3] * +HEAPF32[$0 + 20 >> 2]);
    break label$5;
   }
   HEAPF32[$2 + 16 >> 2] = HEAPF32[$1 >> 2] * HEAPF32[$0 + 12 >> 2];
   HEAPF32[$2 + 20 >> 2] = HEAPF32[$1 + 4 >> 2] * HEAPF32[$0 + 16 >> 2];
   $3 = Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[$0 + 20 >> 2]);
  }
  HEAPF32[$4 >> 2] = $3;
  $1 = HEAP32[$0 + 36 >> 2] + Math_imul($5, HEAP32[$0 + 48 >> 2]) | 0;
  $4 = $2 + 40 | 0;
  label$7 : {
   if (HEAP32[$0 + 44 >> 2] == 1) {
    HEAPF32[$2 + 32 >> 2] = HEAPF64[$1 >> 3] * +HEAPF32[$0 + 12 >> 2];
    HEAPF32[$2 + 36 >> 2] = HEAPF64[$1 + 8 >> 3] * +HEAPF32[$0 + 16 >> 2];
    $3 = Math_fround(HEAPF64[$1 + 16 >> 3] * +HEAPF32[$0 + 20 >> 2]);
    break label$7;
   }
   HEAPF32[$2 + 32 >> 2] = HEAPF32[$1 >> 2] * HEAPF32[$0 + 12 >> 2];
   HEAPF32[$2 + 36 >> 2] = HEAPF32[$1 + 4 >> 2] * HEAPF32[$0 + 16 >> 2];
   $3 = Math_fround(HEAPF32[$1 + 8 >> 2] * HEAPF32[$0 + 20 >> 2]);
  }
  HEAPF32[$4 >> 2] = $3;
  HEAP32[$2 + 64 >> 2] = HEAP32[$0 + 4 >> 2];
 }
 
 function btDbvt__btDbvt_28_29($0) {
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = -1;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 36 | 0] = 1;
  $0 = $0 + 24 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
 }
 
 function btDbvt___btDbvt_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  if ($1) {
   recursedeletenode_28btDbvt__2c_20btDbvtNode__29($0, $1)
  }
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = -1;
  $1 = HEAP32[$0 + 32 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 36 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 32 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP8[$0 + 36 | 0] = 1;
 }
 
 function recursedeletenode_28btDbvt__2c_20btDbvtNode__29($0, $1) {
  if (HEAP32[$1 + 40 >> 2]) {
   recursedeletenode_28btDbvt__2c_20btDbvtNode__29($0, HEAP32[$1 + 36 >> 2]);
   recursedeletenode_28btDbvt__2c_20btDbvtNode__29($0, HEAP32[$1 + 40 >> 2]);
  }
  if (HEAP32[$0 >> 2] == ($1 | 0)) {
   HEAP32[$0 >> 2] = 0
  }
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function btDbvt__clear_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 >> 2];
  if ($1) {
   recursedeletenode_28btDbvt__2c_20btDbvtNode__29($0, $1)
  }
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = -1;
  $1 = HEAP32[$0 + 32 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 36 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 32 >> 2] = 0;
  }
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 36 | 0] = 1;
 }
 
 function btDbvt__optimizeIncremental_28int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  $9 = global$0 - 32 | 0;
  global$0 = $9;
  label$2 : {
   $1 = ($1 | 0) <= -1 ? HEAP32[$0 + 12 >> 2] : $1;
   if (($1 | 0) < 1) {
    break label$2
   }
   $3 = HEAP32[$0 >> 2];
   if (!$3) {
    break label$2
   }
   while (1) {
    $7 = $3 + 40 | 0;
    if (HEAP32[$7 >> 2]) {
     $14 = 0;
     while (1) {
      $6 = HEAP32[$3 + 32 >> 2];
      label$6 : {
       if ($6 >>> 0 <= $3 >>> 0) {
        $6 = $3;
        break label$6;
       }
       $8 = HEAP32[$6 + 40 >> 2];
       $13 = ($3 | 0) == ($8 | 0);
       $4 = (($3 | 0) != ($8 | 0)) << 2;
       $10 = HEAP32[($4 + $6 | 0) + 36 >> 2];
       $8 = HEAP32[$6 + 32 >> 2];
       $5 = $0;
       label$8 : {
        if (!$8) {
         break label$8
        }
        $5 = (((($6 | 0) == HEAP32[$8 + 40 >> 2]) << 2) + $8 | 0) + 36 | 0;
       }
       HEAP32[$5 >> 2] = $3;
       HEAP32[$10 + 32 >> 2] = $3;
       HEAP32[$6 + 32 >> 2] = $3;
       HEAP32[$3 + 32 >> 2] = $8;
       HEAP32[$6 + 36 >> 2] = HEAP32[$3 + 36 >> 2];
       HEAP32[$6 + 40 >> 2] = HEAP32[$7 >> 2];
       HEAP32[HEAP32[$3 + 36 >> 2] + 32 >> 2] = $6;
       HEAP32[HEAP32[$7 >> 2] + 32 >> 2] = $6;
       $7 = $3 + 36 | 0;
       HEAP32[$7 + ($13 << 2) >> 2] = $6;
       HEAP32[$4 + $7 >> 2] = $10;
       $7 = $6 + 24 | 0;
       $5 = $7;
       $15 = HEAP32[$5 >> 2];
       $8 = $15;
       $2 = HEAP32[$5 + 4 >> 2];
       $19 = $2;
       $4 = $9 + 24 | 0;
       HEAP32[$4 >> 2] = $8;
       HEAP32[$4 + 4 >> 2] = $2;
       $8 = $6 + 16 | 0;
       $5 = $8;
       $16 = HEAP32[$5 >> 2];
       $11 = $16;
       $4 = HEAP32[$5 + 4 >> 2];
       $20 = $4;
       $2 = $9 + 16 | 0;
       HEAP32[$2 >> 2] = $11;
       HEAP32[$2 + 4 >> 2] = $4;
       $10 = $6 + 8 | 0;
       $5 = $10;
       $17 = HEAP32[$5 >> 2];
       $11 = $17;
       $2 = HEAP32[$5 + 4 >> 2];
       $21 = $2;
       $4 = $9 + 8 | 0;
       HEAP32[$4 >> 2] = $11;
       HEAP32[$4 + 4 >> 2] = $2;
       $4 = HEAP32[$6 + 4 >> 2];
       $11 = $4;
       $2 = $9;
       $18 = HEAP32[$6 >> 2];
       HEAP32[$2 >> 2] = $18;
       HEAP32[$2 + 4 >> 2] = $4;
       $13 = $3 + 24 | 0;
       $5 = $13;
       $12 = HEAP32[$5 >> 2];
       $2 = HEAP32[$5 + 4 >> 2];
       $4 = $7;
       HEAP32[$4 >> 2] = $12;
       HEAP32[$4 + 4 >> 2] = $2;
       $7 = $3 + 16 | 0;
       $5 = $7;
       $12 = HEAP32[$5 >> 2];
       $4 = HEAP32[$5 + 4 >> 2];
       $2 = $8;
       HEAP32[$2 >> 2] = $12;
       HEAP32[$2 + 4 >> 2] = $4;
       $8 = $3 + 8 | 0;
       $5 = $8;
       $12 = HEAP32[$5 >> 2];
       $2 = HEAP32[$5 + 4 >> 2];
       $4 = $10;
       HEAP32[$4 >> 2] = $12;
       HEAP32[$4 + 4 >> 2] = $2;
       $4 = HEAP32[$3 + 4 >> 2];
       HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$6 + 4 >> 2] = $4;
       $2 = $13;
       HEAP32[$2 >> 2] = $15;
       HEAP32[$2 + 4 >> 2] = $19;
       $2 = $7;
       HEAP32[$2 >> 2] = $16;
       HEAP32[$2 + 4 >> 2] = $20;
       $2 = $5;
       HEAP32[$2 >> 2] = $17;
       HEAP32[$2 + 4 >> 2] = $21;
       HEAP32[$3 >> 2] = $18;
       HEAP32[$3 + 4 >> 2] = $11;
      }
      $3 = HEAP32[$0 + 16 >> 2] >>> $14;
      $14 = $14 + 1 & 31;
      $3 = HEAP32[((($3 & 1) << 2) + $6 | 0) + 36 >> 2];
      $7 = $3 + 40 | 0;
      if (HEAP32[$7 >> 2]) {
       continue
      }
      break;
     };
    }
    $5 = $0;
    $2 = 0;
    label$10 : {
     if (!removeleaf_28btDbvt__2c_20btDbvtNode__29($0, $3)) {
      break label$10
     }
     $2 = HEAP32[$0 >> 2];
    }
    insertleaf_28btDbvt__2c_20btDbvtNode__2c_20btDbvtNode__29($5, $2, $3);
    HEAP32[$0 + 16 >> 2] = HEAP32[$0 + 16 >> 2] + 1;
    $1 = $1 + -1 | 0;
    if (!$1) {
     break label$2
    }
    $3 = HEAP32[$0 >> 2];
    continue;
   };
  }
  global$0 = $9 + 32 | 0;
 }
 
 function removeleaf_28btDbvt__2c_20btDbvtNode__29($0, $1) {
  var $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0);
  if (HEAP32[$0 >> 2] == ($1 | 0)) {
   HEAP32[$0 >> 2] = 0;
   return 0;
  }
  $3 = HEAP32[$1 + 32 >> 2];
  $4 = HEAP32[($3 + ((($1 | 0) != HEAP32[$3 + 40 >> 2]) << 2) | 0) + 36 >> 2];
  $1 = HEAP32[$3 + 32 >> 2];
  label$2 : {
   label$3 : {
    if ($1) {
     HEAP32[(((($3 | 0) == HEAP32[$1 + 40 >> 2]) << 2) + $1 | 0) + 36 >> 2] = $4;
     HEAP32[$4 + 32 >> 2] = $1;
     btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
     HEAP32[$0 + 4 >> 2] = $3;
     while (1) {
      $13 = HEAPF32[$1 >> 2];
      $3 = HEAP32[$1 + 36 >> 2];
      $6 = HEAPF32[$3 >> 2];
      $4 = HEAP32[$1 + 40 >> 2];
      $2 = HEAPF32[$4 >> 2];
      $9 = $6 < $2 ? $6 : $2;
      HEAPF32[$1 >> 2] = $9;
      $14 = HEAPF32[$1 + 16 >> 2];
      $6 = HEAPF32[$3 + 16 >> 2];
      $2 = HEAPF32[$4 + 16 >> 2];
      $10 = $6 > $2 ? $6 : $2;
      HEAPF32[$1 + 16 >> 2] = $10;
      $15 = HEAPF32[$1 + 4 >> 2];
      $6 = HEAPF32[$3 + 4 >> 2];
      $2 = HEAPF32[$4 + 4 >> 2];
      $11 = $6 < $2 ? $6 : $2;
      HEAPF32[$1 + 4 >> 2] = $11;
      $7 = $1 + 20 | 0;
      $6 = HEAPF32[$7 >> 2];
      $2 = HEAPF32[$3 + 20 >> 2];
      $5 = HEAPF32[$4 + 20 >> 2];
      $2 = $2 > $5 ? $2 : $5;
      HEAPF32[$7 >> 2] = $2;
      $16 = HEAPF32[$1 + 8 >> 2];
      $5 = HEAPF32[$3 + 8 >> 2];
      $8 = HEAPF32[$4 + 8 >> 2];
      $12 = $5 < $8 ? $5 : $8;
      HEAPF32[$1 + 8 >> 2] = $12;
      $7 = $1 + 24 | 0;
      $17 = HEAPF32[$7 >> 2];
      $5 = HEAPF32[$3 + 24 >> 2];
      $8 = HEAPF32[$4 + 24 >> 2];
      $5 = $5 > $8 ? $5 : $8;
      HEAPF32[$7 >> 2] = $5;
      label$6 : {
       if ($6 != $2) {
        break label$6
       }
       if ($14 != $10) {
        break label$6
       }
       if ($13 != $9) {
        break label$6
       }
       if ($15 != $11) {
        break label$6
       }
       if ($16 != $12) {
        break label$6
       }
       if ($17 == $5) {
        break label$2
       }
      }
      $1 = HEAP32[$1 + 32 >> 2];
      if ($1) {
       continue
      }
      break;
     };
     break label$3;
    }
    HEAP32[$4 + 32 >> 2] = 0;
    HEAP32[$0 >> 2] = $4;
    btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
    HEAP32[$0 + 4 >> 2] = $3;
   }
   $1 = HEAP32[$0 >> 2];
  }
  return $1;
 }
 
 function insertleaf_28btDbvt__2c_20btDbvtNode__2c_20btDbvtNode__29($0, $1, $2) {
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0;
  if (!HEAP32[$0 >> 2]) {
   HEAP32[$2 + 32 >> 2] = 0;
   HEAP32[$0 >> 2] = $2;
   return;
  }
  $3 = HEAP32[$1 + 40 >> 2];
  if ($3) {
   $5 = Math_fround(HEAPF32[$2 >> 2] + HEAPF32[$2 + 16 >> 2]);
   $4 = Math_fround(HEAPF32[$2 + 8 >> 2] + HEAPF32[$2 + 24 >> 2]);
   $6 = Math_fround(HEAPF32[$2 + 4 >> 2] + HEAPF32[$2 + 20 >> 2]);
   while (1) {
    $7 = $1 + 36 | 0;
    $1 = HEAP32[$1 + 36 >> 2];
    $1 = HEAP32[$7 + ((Math_fround(Math_fround(Math_fround(Math_abs(Math_fround($5 - Math_fround(HEAPF32[$1 >> 2] + HEAPF32[$1 + 16 >> 2])))) + Math_fround(Math_abs(Math_fround($6 - Math_fround(HEAPF32[$1 + 4 >> 2] + HEAPF32[$1 + 20 >> 2]))))) + Math_fround(Math_abs(Math_fround($4 - Math_fround(HEAPF32[$1 + 8 >> 2] + HEAPF32[$1 + 24 >> 2]))))) < Math_fround(Math_fround(Math_fround(Math_abs(Math_fround($5 - Math_fround(HEAPF32[$3 >> 2] + HEAPF32[$3 + 16 >> 2])))) + Math_fround(Math_abs(Math_fround($6 - Math_fround(HEAPF32[$3 + 4 >> 2] + HEAPF32[$3 + 20 >> 2]))))) + Math_fround(Math_abs(Math_fround($4 - Math_fround(HEAPF32[$3 + 8 >> 2] + HEAPF32[$3 + 24 >> 2]))))) ^ 1) << 2) >> 2];
    $3 = HEAP32[$1 + 40 >> 2];
    if ($3) {
     continue
    }
    break;
   };
  }
  $7 = HEAP32[$1 + 32 >> 2];
  $3 = HEAP32[$0 + 4 >> 2];
  label$4 : {
   if ($3) {
    HEAP32[$0 + 4 >> 2] = 0;
    break label$4;
   }
   $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(44);
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 40 >> 2] = 0;
   $8 = $3 + 32 | 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 0;
   $8 = $3 + 24 | 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 0;
   $8 = $3 + 16 | 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 0;
   $8 = $3 + 8 | 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 0;
  }
  HEAP32[$3 + 36 >> 2] = 0;
  HEAP32[$3 + 40 >> 2] = 0;
  $5 = HEAPF32[$2 >> 2];
  $4 = HEAPF32[$1 >> 2];
  HEAPF32[$3 >> 2] = $5 < $4 ? $5 : $4;
  $5 = HEAPF32[$2 + 16 >> 2];
  $4 = HEAPF32[$1 + 16 >> 2];
  HEAPF32[$3 + 16 >> 2] = $5 > $4 ? $5 : $4;
  $5 = HEAPF32[$2 + 4 >> 2];
  $4 = HEAPF32[$1 + 4 >> 2];
  HEAPF32[$3 + 4 >> 2] = $5 < $4 ? $5 : $4;
  $5 = HEAPF32[$2 + 20 >> 2];
  $4 = HEAPF32[$1 + 20 >> 2];
  HEAPF32[$3 + 20 >> 2] = $5 > $4 ? $5 : $4;
  $5 = HEAPF32[$2 + 8 >> 2];
  $4 = HEAPF32[$1 + 8 >> 2];
  HEAPF32[$3 + 8 >> 2] = $5 < $4 ? $5 : $4;
  HEAP32[$3 + 32 >> 2] = $7;
  $5 = HEAPF32[$2 + 24 >> 2];
  $4 = HEAPF32[$1 + 24 >> 2];
  HEAPF32[$3 + 24 >> 2] = $5 > $4 ? $5 : $4;
  label$6 : {
   if ($7) {
    HEAP32[(((($1 | 0) == HEAP32[HEAP32[$1 + 32 >> 2] + 40 >> 2]) << 2) + $7 | 0) + 36 >> 2] = $3;
    HEAP32[$3 + 36 >> 2] = $1;
    HEAP32[$1 + 32 >> 2] = $3;
    HEAP32[$3 + 40 >> 2] = $2;
    HEAP32[$2 + 32 >> 2] = $3;
    $5 = HEAPF32[$3 >> 2];
    while (1) {
     $1 = $3;
     $3 = $7;
     label$9 : {
      if (!(HEAPF32[$3 >> 2] <= $5)) {
       break label$9
      }
      if (!(HEAPF32[$3 + 4 >> 2] <= HEAPF32[$1 + 4 >> 2])) {
       break label$9
      }
      if (!(HEAPF32[$3 + 8 >> 2] <= HEAPF32[$1 + 8 >> 2])) {
       break label$9
      }
      if (!(HEAPF32[$3 + 16 >> 2] >= HEAPF32[$1 + 16 >> 2])) {
       break label$9
      }
      if (!(HEAPF32[$3 + 20 >> 2] >= HEAPF32[$1 + 20 >> 2])) {
       break label$9
      }
      if (HEAPF32[$3 + 24 >> 2] >= HEAPF32[$1 + 24 >> 2]) {
       break label$6
      }
     }
     $1 = HEAP32[$3 + 36 >> 2];
     $5 = HEAPF32[$1 >> 2];
     $7 = HEAP32[$3 + 40 >> 2];
     $4 = HEAPF32[$7 >> 2];
     $5 = $5 < $4 ? $5 : $4;
     HEAPF32[$3 >> 2] = $5;
     $4 = HEAPF32[$1 + 16 >> 2];
     $6 = HEAPF32[$7 + 16 >> 2];
     HEAPF32[$3 + 16 >> 2] = $4 > $6 ? $4 : $6;
     $4 = HEAPF32[$1 + 4 >> 2];
     $6 = HEAPF32[$7 + 4 >> 2];
     HEAPF32[$3 + 4 >> 2] = $4 < $6 ? $4 : $6;
     $4 = HEAPF32[$1 + 20 >> 2];
     $6 = HEAPF32[$7 + 20 >> 2];
     HEAPF32[$3 + 20 >> 2] = $4 > $6 ? $4 : $6;
     $4 = HEAPF32[$1 + 8 >> 2];
     $6 = HEAPF32[$7 + 8 >> 2];
     HEAPF32[$3 + 8 >> 2] = $4 < $6 ? $4 : $6;
     $4 = HEAPF32[$1 + 24 >> 2];
     $6 = HEAPF32[$7 + 24 >> 2];
     HEAPF32[$3 + 24 >> 2] = $4 > $6 ? $4 : $6;
     $7 = HEAP32[$3 + 32 >> 2];
     if ($7) {
      continue
     }
     break;
    };
    break label$6;
   }
   HEAP32[$3 + 36 >> 2] = $1;
   HEAP32[$1 + 32 >> 2] = $3;
   HEAP32[$3 + 40 >> 2] = $2;
   HEAP32[$0 >> 2] = $3;
   HEAP32[$2 + 32 >> 2] = $3;
  }
 }
 
 function btDbvt__insert_28btDbvtAabbMm_20const__2c_20void__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   if ($4) {
    HEAP32[$0 + 4 >> 2] = 0;
    break label$1;
   }
   $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(44);
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$4 + 40 >> 2] = 0;
   $3 = $4 + 32 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $4 + 24 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $4 + 16 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $4 + 8 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
  }
  HEAP32[$4 + 36 >> 2] = $2;
  HEAP32[$4 + 32 >> 2] = 0;
  HEAP32[$4 + 40 >> 2] = 0;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $1 + 8 | 0;
  $5 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $3 = $4 + 8 | 0;
  HEAP32[$3 >> 2] = $5;
  HEAP32[$3 + 4 >> 2] = $2;
  $2 = $1 + 16 | 0;
  $5 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $2 = $4 + 16 | 0;
  HEAP32[$2 >> 2] = $5;
  HEAP32[$2 + 4 >> 2] = $3;
  $2 = $1 + 24 | 0;
  $1 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $3 = $4 + 24 | 0;
  HEAP32[$3 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  insertleaf_28btDbvt__2c_20btDbvtNode__2c_20btDbvtNode__29($0, HEAP32[$0 >> 2], $4);
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + 1;
  return $4;
 }
 
 function btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = removeleaf_28btDbvt__2c_20btDbvtNode__29($0, $1);
  label$1 : {
   if (!$5) {
    $5 = 0;
    break label$1;
   }
   $3 = HEAP32[$0 + 8 >> 2];
   if (($3 | 0) >= 0) {
    if (!$3) {
     break label$1
    }
    while (1) {
     $4 = HEAP32[$5 + 32 >> 2];
     if (!$4) {
      break label$1
     }
     $5 = $4;
     $3 = $3 + -1 | 0;
     if ($3) {
      continue
     }
     break;
    };
    break label$1;
   }
   $5 = HEAP32[$0 >> 2];
  }
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  $3 = $2 + 24 | 0;
  $6 = HEAP32[$3 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  $3 = $1 + 24 | 0;
  HEAP32[$3 >> 2] = $6;
  HEAP32[$3 + 4 >> 2] = $4;
  $3 = $2 + 16 | 0;
  $6 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $4 = $1 + 16 | 0;
  HEAP32[$4 >> 2] = $6;
  HEAP32[$4 + 4 >> 2] = $3;
  $3 = $2 + 8 | 0;
  $2 = HEAP32[$3 >> 2];
  $4 = HEAP32[$3 + 4 >> 2];
  $3 = $1 + 8 | 0;
  HEAP32[$3 >> 2] = $2;
  HEAP32[$3 + 4 >> 2] = $4;
  insertleaf_28btDbvt__2c_20btDbvtNode__2c_20btDbvtNode__29($0, $5, $1);
 }
 
 function btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0);
  $6 = HEAPF32[$2 >> 2];
  label$1 : {
   label$2 : {
    if (!(HEAPF32[$1 >> 2] <= $6)) {
     $8 = HEAPF32[$2 + 4 >> 2];
     break label$2;
    }
    $8 = HEAPF32[$2 + 4 >> 2];
    if (!(HEAPF32[$1 + 4 >> 2] <= $8)) {
     break label$2
    }
    if (!(HEAPF32[$1 + 8 >> 2] <= HEAPF32[$2 + 8 >> 2])) {
     break label$2
    }
    if (!(HEAPF32[$1 + 16 >> 2] >= HEAPF32[$2 + 16 >> 2])) {
     break label$2
    }
    if (!(HEAPF32[$1 + 20 >> 2] >= HEAPF32[$2 + 20 >> 2])) {
     break label$2
    }
    $5 = 0;
    if (HEAPF32[$1 + 24 >> 2] >= HEAPF32[$2 + 24 >> 2]) {
     break label$1
    }
   }
   $8 = Math_fround($8 - Math_fround(.05000000074505806));
   HEAPF32[$2 + 4 >> 2] = $8;
   $6 = Math_fround($6 - Math_fround(.05000000074505806));
   HEAPF32[$2 >> 2] = $6;
   $9 = Math_fround(HEAPF32[$2 + 8 >> 2] - Math_fround(.05000000074505806));
   HEAPF32[$2 + 8 >> 2] = $9;
   $10 = Math_fround(HEAPF32[$2 + 16 >> 2] + Math_fround(.05000000074505806));
   HEAPF32[$2 + 16 >> 2] = $10;
   $4 = $2 + 20 | 0;
   $11 = Math_fround(HEAPF32[$4 >> 2] + Math_fround(.05000000074505806));
   HEAPF32[$4 >> 2] = $11;
   $7 = $2 + 24 | 0;
   $12 = Math_fround(HEAPF32[$7 >> 2] + Math_fround(.05000000074505806));
   HEAPF32[$7 >> 2] = $12;
   $13 = HEAPF32[$3 >> 2];
   $4 = $13 > Math_fround(0.0);
   HEAPF32[($4 << 4) + $2 >> 2] = ($4 ? $10 : $6) + $13;
   $6 = HEAPF32[$3 + 4 >> 2];
   $4 = $6 > Math_fround(0.0);
   HEAPF32[($4 ? 20 : 4) + $2 >> 2] = ($4 ? $11 : $8) + $6;
   $6 = HEAPF32[$3 + 8 >> 2];
   $3 = $6 > Math_fround(0.0);
   HEAPF32[($3 ? 24 : 8) + $2 >> 2] = ($3 ? $12 : $9) + $6;
   $3 = removeleaf_28btDbvt__2c_20btDbvtNode__29($0, $1);
   label$4 : {
    if (!$3) {
     $3 = 0;
     break label$4;
    }
    $4 = HEAP32[$0 + 8 >> 2];
    if (($4 | 0) >= 0) {
     if (!$4) {
      break label$4
     }
     while (1) {
      $5 = HEAP32[$3 + 32 >> 2];
      if (!$5) {
       break label$4
      }
      $3 = $5;
      $4 = $4 + -1 | 0;
      if ($4) {
       continue
      }
      break;
     };
     break label$4;
    }
    $3 = HEAP32[$0 >> 2];
   }
   $4 = HEAP32[$2 + 4 >> 2];
   HEAP32[$1 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$1 + 4 >> 2] = $4;
   $5 = HEAP32[$7 + 4 >> 2];
   $4 = $1 + 24 | 0;
   HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   $7 = $2 + 16 | 0;
   $4 = HEAP32[$7 + 4 >> 2];
   $5 = $1 + 16 | 0;
   HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$5 + 4 >> 2] = $4;
   $7 = $2 + 8 | 0;
   $2 = HEAP32[$7 >> 2];
   $5 = HEAP32[$7 + 4 >> 2];
   $4 = $1 + 8 | 0;
   HEAP32[$4 >> 2] = $2;
   HEAP32[$4 + 4 >> 2] = $5;
   insertleaf_28btDbvt__2c_20btDbvtNode__2c_20btDbvtNode__29($0, $3, $1);
   $5 = 1;
  }
  return $5;
 }
 
 function btDbvt__remove_28btDbvtNode__29($0, $1) {
  removeleaf_28btDbvt__2c_20btDbvtNode__29($0, $1);
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 4 >> 2]);
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP32[$0 + 12 >> 2] = HEAP32[$0 + 12 >> 2] + -1;
 }
 
 function btDbvt__ICollide__Process_28btDbvtNode_20const__2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $1);
 }
 
 function btDbvt__ICollide__Descent_28btDbvtNode_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return 1;
 }
 
 function __sindf($0) {
  var $1 = 0.0, $2 = 0.0;
  $1 = $0 * $0;
  $2 = $1 * $0;
  return Math_fround($2 * ($1 * $1) * ($1 * 2.718311493989822e-06 + -1.9839334836096632e-04) + ($2 * ($1 * .008333329385889463 + -.16666666641626524) + $0));
 }
 
 function __cosdf($0) {
  var $1 = 0.0;
  $0 = $0 * $0;
  $1 = $0 * $0;
  return Math_fround($0 * -.499999997251031 + 1.0 + $1 * .04166662332373906 + $0 * $1 * ($0 * 2.439044879627741e-05 + -.001388676377460993));
 }
 
 function scalbn($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  label$1 : {
   if (($1 | 0) >= 1024) {
    $0 = $0 * 8988465674311579538646525.0e283;
    $2 = $1 + -1023 | 0;
    if (($2 | 0) < 1024) {
     $1 = $2;
     break label$1;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1 = (($1 | 0) < 3069 ? $1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1 | 0) > -1023) {
    break label$1
   }
   $0 = $0 * 2.004168360008973e-292;
   $2 = $1 + 969 | 0;
   if (($2 | 0) > -1023) {
    $1 = $2;
    break label$1;
   }
   $0 = $0 * 2.004168360008973e-292;
   $1 = (($1 | 0) > -2960 ? $1 : -2960) + 1938 | 0;
  }
  $2 = $1 + 1023 | 0;
  $4 = 52;
  $1 = $4 & 31;
  if (32 <= $4 >>> 0) {
   $3 = $2 << $1;
   $1 = 0;
  } else {
   $3 = (1 << $1) - 1 & $2 >>> 32 - $1 | $3 << $1;
   $1 = $2 << $1;
  }
  wasm2js_scratch_store_i32(0, $1 | 0);
  wasm2js_scratch_store_i32(1, $3 | 0);
  return $0 * +wasm2js_scratch_load_f64();
 }
 
 function __rem_pio2_large($0, $1, $2) {
  var $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
  $8 = global$0 - 560 | 0;
  global$0 = $8;
  $4 = ($2 + -3 | 0) / 24 | 0;
  $16 = ($4 | 0) > 0 ? $4 : 0;
  $15 = Math_imul($16, -24) + $2 | 0;
  $12 = HEAP32[2840];
  if (($12 | 0) >= 0) {
   $7 = $12 + 1 | 0;
   $2 = $16;
   $6 = ($2 << 2) + 11376 | 0;
   $4 = $8 + 320 | 0;
   while (1) {
    HEAPF64[$4 >> 3] = ($2 | 0) < 0 ? 0.0 : +HEAP32[$6 >> 2];
    $4 = $4 + 8 | 0;
    $6 = $6 + 4 | 0;
    $2 = $2 + 1 | 0;
    $7 = $7 + -1 | 0;
    if ($7) {
     continue
    }
    break;
   };
  }
  $11 = $15 + -24 | 0;
  $7 = $8 + 320 | 0;
  while (1) {
   $3 = 0.0;
   $2 = $0;
   $6 = 1;
   $4 = $7;
   while (1) {
    $3 = $3 + HEAPF64[$2 >> 3] * HEAPF64[$4 >> 3];
    $2 = $2 + 8 | 0;
    $4 = $4 + -8 | 0;
    $6 = $6 + -1 | 0;
    if ($6) {
     continue
    }
    break;
   };
   HEAPF64[($5 << 3) + $8 >> 3] = $3;
   $7 = $7 + 8 | 0;
   $2 = ($5 | 0) < ($12 | 0);
   $5 = $5 + 1 | 0;
   if ($2) {
    continue
   }
   break;
  };
  $20 = 23 - $11 | 0;
  $18 = 24 - $11 | 0;
  $21 = ($8 + ($12 << 2) | 0) + 476 | 0;
  $22 = $8 + 476 | 0;
  $23 = $8 + -8 | 0;
  $5 = $12;
  label$8 : {
   while (1) {
    $2 = $5 << 3;
    $3 = HEAPF64[$2 + $8 >> 3];
    $9 = ($5 | 0) < 1;
    if (!$9) {
     $2 = $2 + $23 | 0;
     $4 = $8 + 480 | 0;
     $6 = $5;
     while (1) {
      $7 = $4;
      $17 = $3;
      $13 = $3 * 5.960464477539063e-08;
      label$12 : {
       if (Math_abs($13) < 2147483648.0) {
        $10 = ~~$13;
        break label$12;
       }
       $10 = -2147483648;
      }
      $13 = +($10 | 0);
      $3 = $17 + $13 * -16777216.0;
      label$14 : {
       if (Math_abs($3) < 2147483648.0) {
        $10 = ~~$3;
        break label$14;
       }
       $10 = -2147483648;
      }
      HEAP32[$7 >> 2] = $10;
      $4 = $4 + 4 | 0;
      $3 = HEAPF64[$2 >> 3] + $13;
      $2 = $2 + -8 | 0;
      $6 = $6 + -1 | 0;
      if ($6) {
       continue
      }
      break;
     };
    }
    $3 = scalbn($3, $11);
    $3 = $3 + Math_floor($3 * .125) * -8.0;
    label$16 : {
     if (Math_abs($3) < 2147483648.0) {
      $10 = ~~$3;
      break label$16;
     }
     $10 = -2147483648;
    }
    $3 = $3 - +($10 | 0);
    label$18 : {
     label$19 : {
      label$20 : {
       $6 = ($11 | 0) < 1;
       label$21 : {
        if (!$6) {
         $2 = ($8 + ($5 << 2) | 0) + 476 | 0;
         $7 = $2;
         $2 = HEAP32[$2 >> 2];
         $4 = $2;
         $2 = $2 >> $18;
         $4 = $4 - ($2 << $18) | 0;
         HEAP32[$7 >> 2] = $4;
         $10 = $2 + $10 | 0;
         $14 = $4 >> $20;
         break label$21;
        }
        if ($11) {
         break label$20
        }
        $14 = HEAP32[($8 + ($5 << 2) | 0) + 476 >> 2] >> 23;
       }
       if (($14 | 0) < 1) {
        break label$18
       }
       break label$19;
      }
      $14 = 2;
      if (!!($3 >= .5)) {
       break label$19
      }
      $14 = 0;
      break label$18;
     }
     label$23 : {
      if ($9) {
       $9 = 0;
       break label$23;
      }
      $9 = 0;
      $2 = $8 + 480 | 0;
      $7 = $5;
      while (1) {
       $4 = HEAP32[$2 >> 2];
       label$26 : {
        label$27 : {
         $24 = $2;
         if ($9) {
          $19 = 16777215
         } else {
          if (!$4) {
           break label$27
          }
          $9 = 1;
          $19 = 16777216;
         }
         HEAP32[$24 >> 2] = $19 - $4;
         break label$26;
        }
        $9 = 0;
       }
       $2 = $2 + 4 | 0;
       $7 = $7 + -1 | 0;
       if ($7) {
        continue
       }
       break;
      };
     }
     label$29 : {
      if ($6) {
       break label$29
      }
      $2 = $11 + -1 | 0;
      if ($2 >>> 0 > 1) {
       break label$29
      }
      if ($2 - 1) {
       $2 = ($8 + ($5 << 2) | 0) + 476 | 0;
       HEAP32[$2 >> 2] = HEAP32[$2 >> 2] & 8388607;
       break label$29;
      }
      $2 = ($8 + ($5 << 2) | 0) + 476 | 0;
      HEAP32[$2 >> 2] = HEAP32[$2 >> 2] & 4194303;
     }
     $10 = $10 + 1 | 0;
     if (($14 | 0) != 2) {
      break label$18
     }
     $3 = 1.0 - $3;
     $14 = 2;
     if (!$9) {
      break label$18
     }
     $3 = $3 - scalbn(1.0, $11);
    }
    if ($3 == 0.0) {
     label$33 : {
      if (($5 | 0) <= ($12 | 0)) {
       break label$33
      }
      $2 = ($5 << 2) + $22 | 0;
      $4 = 0;
      $6 = $5;
      while (1) {
       $4 = $4 | HEAP32[$2 >> 2];
       $2 = $2 + -4 | 0;
       $6 = $6 + -1 | 0;
       if (($6 | 0) > ($12 | 0)) {
        continue
       }
       break;
      };
      if (!$4) {
       break label$33
      }
      $2 = ($8 + ($5 << 2) | 0) + 476 | 0;
      $15 = $11;
      while (1) {
       $5 = $5 + -1 | 0;
       $15 = $15 + -24 | 0;
       $4 = HEAP32[$2 >> 2];
       $2 = $2 + -4 | 0;
       if (!$4) {
        continue
       }
       break;
      };
      break label$8;
     }
     $2 = $21;
     $7 = $5;
     while (1) {
      $7 = $7 + 1 | 0;
      $4 = HEAP32[$2 >> 2];
      $2 = $2 + -4 | 0;
      if (!$4) {
       continue
      }
      break;
     };
     $9 = (($5 << 3) + $8 | 0) + 328 | 0;
     while (1) {
      $2 = (($5 << 3) + $8 | 0) + 328 | 0;
      $5 = $5 + 1 | 0;
      HEAPF64[$2 >> 3] = HEAP32[($16 + $5 << 2) + 11376 >> 2];
      $3 = 0.0;
      $2 = $0;
      $4 = $9;
      $6 = 1;
      while (1) {
       $3 = $3 + HEAPF64[$2 >> 3] * HEAPF64[$4 >> 3];
       $2 = $2 + 8 | 0;
       $4 = $4 + -8 | 0;
       $6 = $6 + -1 | 0;
       if ($6) {
        continue
       }
       break;
      };
      HEAPF64[($5 << 3) + $8 >> 3] = $3;
      $9 = $9 + 8 | 0;
      if (($5 | 0) < ($7 | 0)) {
       continue
      }
      break;
     };
     $5 = $7;
     continue;
    }
    break;
   };
   $3 = scalbn($3, 0 - $11 | 0);
   label$40 : {
    if (!!($3 >= 16777216.0)) {
     $0 = ($8 + 480 | 0) + ($5 << 2) | 0;
     $17 = $3;
     $13 = $3 * 5.960464477539063e-08;
     label$42 : {
      if (Math_abs($13) < 2147483648.0) {
       $2 = ~~$13;
       break label$42;
      }
      $2 = -2147483648;
     }
     $3 = $17 + +($2 | 0) * -16777216.0;
     label$44 : {
      if (Math_abs($3) < 2147483648.0) {
       $7 = ~~$3;
       break label$44;
      }
      $7 = -2147483648;
     }
     HEAP32[$0 >> 2] = $7;
     $5 = $5 + 1 | 0;
     break label$40;
    }
    $2 = Math_abs($3) < 2147483648.0 ? ~~$3 : -2147483648;
    $15 = $11;
   }
   HEAP32[($8 + 480 | 0) + ($5 << 2) >> 2] = $2;
  }
  $3 = scalbn(1.0, $15);
  label$48 : {
   if (($5 | 0) < 0) {
    break label$48
   }
   $6 = $5 + 1 | 0;
   $2 = ($8 + 480 | 0) + ($5 << 2) | 0;
   $4 = ($5 << 3) + $8 | 0;
   while (1) {
    HEAPF64[$4 >> 3] = $3 * +HEAP32[$2 >> 2];
    $2 = $2 + -4 | 0;
    $4 = $4 + -8 | 0;
    $3 = $3 * 5.960464477539063e-08;
    $6 = $6 + -1 | 0;
    if (($6 | 0) > 0) {
     continue
    }
    break;
   };
   if (($5 | 0) < 0) {
    break label$48
   }
   $7 = ($5 << 3) + $8 | 0;
   $2 = $5;
   while (1) {
    $9 = $2;
    $0 = $5 - $2 | 0;
    $3 = 0.0;
    $2 = 0;
    $4 = 0;
    while (1) {
     $3 = $3 + HEAPF64[$2 + 14144 >> 3] * HEAPF64[$2 + $7 >> 3];
     label$51 : {
      if (($4 | 0) >= ($12 | 0)) {
       break label$51
      }
      $2 = $2 + 8 | 0;
      $6 = $4 >>> 0 < $0 >>> 0;
      $4 = $4 + 1 | 0;
      if ($6) {
       continue
      }
     }
     break;
    };
    HEAPF64[($8 + 160 | 0) + ($0 << 3) >> 3] = $3;
    $7 = $7 + -8 | 0;
    $2 = $9 + -1 | 0;
    if (($9 | 0) > 0) {
     continue
    }
    break;
   };
  }
  label$62 : {
   if (($5 | 0) < 0) {
    $3 = 0.0;
    break label$62;
   }
   $4 = $5 + 1 | 0;
   $2 = ($8 + 160 | 0) + ($5 << 3) | 0;
   $3 = 0.0;
   while (1) {
    $3 = $3 + HEAPF64[$2 >> 3];
    $2 = $2 + -8 | 0;
    $4 = $4 + -1 | 0;
    if (($4 | 0) > 0) {
     continue
    }
    break;
   };
  }
  HEAPF64[$1 >> 3] = $14 ? -$3 : $3;
  global$0 = $8 + 560 | 0;
  return $10 & 7;
 }
 
 function __rem_pio2f($0, $1) {
  var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0;
  $4 = global$0 - 16 | 0;
  global$0 = $4;
  $5 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $2 = $5 & 2147483647;
  label$1 : {
   if ($2 >>> 0 <= 1305022426) {
    $3 = +$0;
    $6 = $3;
    $3 = $3 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    HEAPF64[$1 >> 3] = $6 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-08;
    if (Math_abs($3) < 2147483648.0) {
     $2 = ~~$3;
     break label$1;
    }
    $2 = -2147483648;
    break label$1;
   }
   if ($2 >>> 0 >= 2139095040) {
    HEAPF64[$1 >> 3] = Math_fround($0 - $0);
    $2 = 0;
    break label$1;
   }
   $7 = $2;
   $2 = ($2 >>> 23) + -150 | 0;
   HEAPF64[$4 + 8 >> 3] = (wasm2js_scratch_store_i32(0, $7 - ($2 << 23) | 0), wasm2js_scratch_load_f32());
   $2 = __rem_pio2_large($4 + 8 | 0, $4, $2);
   $3 = HEAPF64[$4 >> 3];
   if (($5 | 0) <= -1) {
    HEAPF64[$1 >> 3] = -$3;
    $2 = 0 - $2 | 0;
    break label$1;
   }
   HEAPF64[$1 >> 3] = $3;
  }
  global$0 = $4 + 16 | 0;
  return $2;
 }
 
 function sinf($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  $3 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $1 = $3 & 2147483647;
  label$1 : {
   if ($1 >>> 0 <= 1061752794) {
    if ($1 >>> 0 < 964689920) {
     break label$1
    }
    $0 = __sindf(+$0);
    break label$1;
   }
   $3 = $3 >>> 31;
   if ($1 >>> 0 <= 1081824209) {
    $4 = +$0;
    if ($1 >>> 0 <= 1075235811) {
     if ($3) {
      $0 = Math_fround(-__cosdf($4 + 1.5707963267948966));
      break label$1;
     }
     $0 = __cosdf($4 + -1.5707963267948966);
     break label$1;
    }
    $0 = __sindf(-(($3 ? 3.141592653589793 : -3.141592653589793) + $4));
    break label$1;
   }
   if ($1 >>> 0 <= 1088565717) {
    $4 = +$0;
    if ($1 >>> 0 <= 1085271519) {
     if ($3) {
      $0 = __cosdf($4 + 4.71238898038469);
      break label$1;
     }
     $0 = Math_fround(-__cosdf($4 + -4.71238898038469));
     break label$1;
    }
    $0 = __sindf(($3 ? 6.283185307179586 : -6.283185307179586) + $4);
    break label$1;
   }
   if ($1 >>> 0 >= 2139095040) {
    $0 = Math_fround($0 - $0);
    break label$1;
   }
   $1 = __rem_pio2f($0, $2 + 8 | 0) & 3;
   if ($1 >>> 0 <= 2) {
    label$11 : {
     switch ($1 - 1 | 0) {
     default:
      $0 = __sindf(HEAPF64[$2 + 8 >> 3]);
      break label$1;
     case 0:
      $0 = __cosdf(HEAPF64[$2 + 8 >> 3]);
      break label$1;
     case 1:
      break label$11;
     };
    }
    $0 = __sindf(-HEAPF64[$2 + 8 >> 3]);
    break label$1;
   }
   $0 = Math_fround(-__cosdf(HEAPF64[$2 + 8 >> 3]));
  }
  global$0 = $2 + 16 | 0;
  return $0;
 }
 
 function cosf($0) {
  var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = 0, $5 = 0.0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $2 = $4 & 2147483647;
  label$1 : {
   if ($2 >>> 0 <= 1061752794) {
    $1 = Math_fround(1.0);
    if ($2 >>> 0 < 964689920) {
     break label$1
    }
    $1 = __cosdf(+$0);
    break label$1;
   }
   $4 = $4 >>> 31;
   if ($2 >>> 0 <= 1081824209) {
    $5 = +$0;
    if ($2 >>> 0 >= 1075235812) {
     $1 = Math_fround(-__cosdf(($4 ? 3.141592653589793 : -3.141592653589793) + $5));
     break label$1;
    }
    if ($4) {
     $1 = __sindf($5 + 1.5707963267948966);
     break label$1;
    }
    $1 = __sindf(1.5707963267948966 - $5);
    break label$1;
   }
   if ($2 >>> 0 <= 1088565717) {
    if ($2 >>> 0 >= 1085271520) {
     $1 = __cosdf(($4 ? 6.283185307179586 : -6.283185307179586) + +$0);
     break label$1;
    }
    if ($4) {
     $1 = __sindf(-4.71238898038469 - +$0);
     break label$1;
    }
    $1 = __sindf(+$0 + -4.71238898038469);
    break label$1;
   }
   $1 = Math_fround($0 - $0);
   if ($2 >>> 0 >= 2139095040) {
    break label$1
   }
   $2 = __rem_pio2f($0, $3 + 8 | 0) & 3;
   if ($2 >>> 0 <= 2) {
    label$11 : {
     switch ($2 - 1 | 0) {
     default:
      $1 = __cosdf(HEAPF64[$3 + 8 >> 3]);
      break label$1;
     case 0:
      $1 = __sindf(-HEAPF64[$3 + 8 >> 3]);
      break label$1;
     case 1:
      break label$11;
     };
    }
    $1 = Math_fround(-__cosdf(HEAPF64[$3 + 8 >> 3]));
    break label$1;
   }
   $1 = __sindf(HEAPF64[$3 + 8 >> 3]);
  }
  $0 = $1;
  global$0 = $3 + 16 | 0;
  return $0;
 }
 
 function btCompoundShape__btCompoundShape_28bool_2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  HEAP32[$0 + 12 >> 2] = -1;
  HEAP32[$0 + 4 >> 2] = 31;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 14216;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 1065353216;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 1;
  HEAP32[$0 + 52 >> 2] = -581039253;
  HEAP32[$0 + 56 >> 2] = -581039253;
  HEAP32[$0 + 36 >> 2] = 1566444395;
  HEAP32[$0 + 40 >> 2] = 1566444395;
  HEAP8[$0 + 32 | 0] = 1;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  $2 = $0 + 84 | 0;
  HEAP32[$2 >> 2] = 1065353216;
  HEAP32[$2 + 4 >> 2] = 1065353216;
  $2 = $0 + 60 | 0;
  HEAP32[$2 >> 2] = -581039253;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 44 | 0;
  HEAP32[$2 >> 2] = 1566444395;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 20 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  if ($1) {
   $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(40);
   btDbvt__btDbvt_28_29($6);
   HEAP32[$0 + 68 >> 2] = $6;
   $1 = HEAP32[$0 + 24 >> 2];
  } else {
   $1 = 0
  }
  if (($1 | 0) < 0) {
   $9 = HEAP32[$0 + 20 >> 2];
   if (($9 | 0) >= 1) {
    $6 = 64;
    while (1) {
     $1 = $6 + HEAP32[$0 + 28 >> 2] | 0;
     $5 = $1 + -64 | 0;
     $3 = $5;
     $8 = HEAP32[$3 >> 2];
     $2 = HEAP32[$3 + 4 >> 2];
     $7 = $6 + -64 | 0;
     $4 = $7;
     HEAP32[$4 >> 2] = $8;
     HEAP32[$4 + 4 >> 2] = $2;
     $3 = $3 + 8 | 0;
     $5 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $2 = $7 + 8 | 0;
     HEAP32[$2 >> 2] = $5;
     HEAP32[$2 + 4 >> 2] = $4;
     $5 = $1 + -48 | 0;
     $3 = $5 + 8 | 0;
     $8 = HEAP32[$3 >> 2];
     $2 = HEAP32[$3 + 4 >> 2];
     $7 = $6 + -48 | 0;
     $4 = $7 + 8 | 0;
     HEAP32[$4 >> 2] = $8;
     HEAP32[$4 + 4 >> 2] = $2;
     $3 = $5;
     $5 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $2 = $7;
     HEAP32[$2 >> 2] = $5;
     HEAP32[$2 + 4 >> 2] = $4;
     $5 = $1 + -32 | 0;
     $3 = $5 + 8 | 0;
     $8 = HEAP32[$3 >> 2];
     $2 = HEAP32[$3 + 4 >> 2];
     $7 = $6 + -32 | 0;
     $4 = $7 + 8 | 0;
     HEAP32[$4 >> 2] = $8;
     HEAP32[$4 + 4 >> 2] = $2;
     $3 = $5;
     $5 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $2 = $7;
     HEAP32[$2 >> 2] = $5;
     HEAP32[$2 + 4 >> 2] = $4;
     $5 = $1 + -16 | 0;
     $3 = $5 + 8 | 0;
     $8 = HEAP32[$3 >> 2];
     $2 = HEAP32[$3 + 4 >> 2];
     $7 = $6 + -16 | 0;
     $4 = $7 + 8 | 0;
     HEAP32[$4 >> 2] = $8;
     HEAP32[$4 + 4 >> 2] = $2;
     $3 = $5;
     $5 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $2 = $7;
     HEAP32[$2 >> 2] = $5;
     HEAP32[$2 + 4 >> 2] = $4;
     $3 = $1;
     $1 = HEAP32[$3 >> 2];
     $2 = HEAP32[$3 + 4 >> 2];
     $4 = $6;
     HEAP32[$4 >> 2] = $1;
     HEAP32[$4 + 4 >> 2] = $2;
     $3 = $3 + 8 | 0;
     $1 = HEAP32[$3 >> 2];
     $2 = $4 + 8 | 0;
     $4 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 >> 2] = $1;
     HEAP32[$2 + 4 >> 2] = $4;
     $6 = $6 + 80 | 0;
     $9 = $9 + -1 | 0;
     if ($9) {
      continue
     }
     break;
    };
   }
   $6 = HEAP32[$0 + 28 >> 2];
   if ($6) {
    if (HEAPU8[$0 + 32 | 0]) {
     btAlignedFreeInternal_28void__29($6)
    }
    HEAP32[$0 + 28 >> 2] = 0;
   }
   HEAP32[$0 + 28 >> 2] = 0;
   HEAP8[$0 + 32 | 0] = 1;
   HEAP32[$0 + 24 >> 2] = 0;
  }
 }
 
 function btCompoundShape___btCompoundShape_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 14216;
  $1 = HEAP32[$0 + 68 >> 2];
  if ($1) {
   btDbvt___btDbvt_28_29($1);
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 68 >> 2]);
  }
  $1 = HEAP32[$0 + 28 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 32 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 28 >> 2] = 0;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP8[$0 + 32 | 0] = 1;
  return $0 | 0;
 }
 
 function btCompoundShape___btCompoundShape_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 14216;
  $1 = HEAP32[$0 + 68 >> 2];
  if ($1) {
   btDbvt___btDbvt_28_29($1);
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 68 >> 2]);
  }
  $1 = HEAP32[$0 + 28 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 32 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 28 >> 2] = 0;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP8[$0 + 32 | 0] = 1;
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btCompoundShape__addChildShape_28btTransform_20const__2c_20btCollisionShape__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_i32$1 = 0;
  $3 = global$0 - 144 | 0;
  global$0 = $3;
  HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 72 >> 2] + 1;
  $4 = $1 + 8 | 0;
  $8 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  $6 = $3 + 72 | 0;
  HEAP32[$6 >> 2] = $8;
  HEAP32[$6 + 4 >> 2] = $5;
  $4 = $1 + 24 | 0;
  $8 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $3 + 88 | 0;
  HEAP32[$5 >> 2] = $8;
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = $1 + 40 | 0;
  $8 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  $6 = $3 + 104 | 0;
  HEAP32[$6 >> 2] = $8;
  HEAP32[$6 + 4 >> 2] = $5;
  $4 = $1 + 56 | 0;
  $8 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $3 + 120 | 0;
  HEAP32[$5 >> 2] = $8;
  HEAP32[$5 + 4 >> 2] = $6;
  HEAP32[$3 + 140 >> 2] = 0;
  HEAP32[$3 + 128 >> 2] = $2;
  $4 = $1;
  $1 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$3 + 64 >> 2] = $1;
  HEAP32[$3 + 68 >> 2] = $5;
  $6 = HEAP32[$4 + 20 >> 2];
  HEAP32[$3 + 80 >> 2] = HEAP32[$4 + 16 >> 2];
  HEAP32[$3 + 84 >> 2] = $6;
  $5 = HEAP32[$4 + 36 >> 2];
  HEAP32[$3 + 96 >> 2] = HEAP32[$4 + 32 >> 2];
  HEAP32[$3 + 100 >> 2] = $5;
  $6 = HEAP32[$4 + 52 >> 2];
  HEAP32[$3 + 112 >> 2] = HEAP32[$4 + 48 >> 2];
  HEAP32[$3 + 116 >> 2] = $6;
  HEAP32[$3 + 132 >> 2] = HEAP32[$2 + 4 >> 2];
  (wasm2js_i32$0 = $3, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2))), HEAPF32[wasm2js_i32$0 + 136 >> 2] = wasm2js_f32$0;
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $4, $3 + 48 | 0, $3 + 32 | 0);
  $7 = HEAPF32[$3 + 48 >> 2];
  if (!!(HEAPF32[$0 + 36 >> 2] > $7)) {
   HEAPF32[$0 + 36 >> 2] = $7
  }
  $7 = HEAPF32[$3 + 32 >> 2];
  if (!!(HEAPF32[$0 + 52 >> 2] < $7)) {
   HEAPF32[$0 + 52 >> 2] = $7
  }
  $7 = HEAPF32[$3 + 52 >> 2];
  if (HEAPF32[$0 + 40 >> 2] > $7) {
   HEAPF32[$0 + 40 >> 2] = $7
  }
  $7 = HEAPF32[$3 + 36 >> 2];
  if (!!(HEAPF32[$0 + 56 >> 2] < $7)) {
   HEAPF32[$0 + 56 >> 2] = $7
  }
  $7 = HEAPF32[$3 + 56 >> 2];
  if (!!(HEAPF32[$0 + 44 >> 2] > $7)) {
   HEAPF32[$0 + 44 >> 2] = $7
  }
  $7 = HEAPF32[$3 + 40 >> 2];
  if (!!(HEAPF32[$0 + 60 >> 2] < $7)) {
   HEAPF32[$0 + 60 >> 2] = $7
  }
  $1 = HEAP32[$0 + 68 >> 2];
  if ($1) {
   $4 = $3 + 56 | 0;
   $2 = HEAP32[$4 >> 2];
   $5 = HEAP32[$4 + 4 >> 2];
   $6 = $3 + 8 | 0;
   HEAP32[$6 >> 2] = $2;
   HEAP32[$6 + 4 >> 2] = $5;
   $4 = $3 + 40 | 0;
   $2 = HEAP32[$4 >> 2];
   $6 = HEAP32[$4 + 4 >> 2];
   $5 = $3 + 24 | 0;
   HEAP32[$5 >> 2] = $2;
   HEAP32[$5 + 4 >> 2] = $6;
   $5 = HEAP32[$3 + 52 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$3 + 48 >> 2];
   HEAP32[$3 + 4 >> 2] = $5;
   $6 = HEAP32[$3 + 36 >> 2];
   HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 32 >> 2];
   HEAP32[$3 + 20 >> 2] = $6;
   (wasm2js_i32$0 = $3, wasm2js_i32$1 = btDbvt__insert_28btDbvtAabbMm_20const__2c_20void__29($1, $3, HEAP32[$0 + 20 >> 2])), HEAP32[wasm2js_i32$0 + 140 >> 2] = wasm2js_i32$1;
  }
  btAlignedObjectArray_btCompoundShapeChild___push_back_28btCompoundShapeChild_20const__29($0 + 16 | 0, $3 - -64 | 0);
  global$0 = $3 + 144 | 0;
 }
 
 function btAlignedObjectArray_btCompoundShapeChild___push_back_28btCompoundShapeChild_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $7 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   if (($7 | 0) != HEAP32[$0 + 8 >> 2]) {
    break label$1
   }
   $11 = $7 ? $7 << 1 : 1;
   if (($7 | 0) >= ($11 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$11) {
     break label$2
    }
    $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($11, 80));
    $7 = HEAP32[$0 + 4 >> 2];
   }
   if (($7 | 0) >= 1) {
    $12 = 64;
    while (1) {
     $10 = $12 + HEAP32[$0 + 12 >> 2] | 0;
     $5 = $10 + -64 | 0;
     $2 = $5;
     $9 = HEAP32[$2 >> 2];
     $3 = HEAP32[$2 + 4 >> 2];
     $6 = $12 + $13 | 0;
     $8 = $6 + -64 | 0;
     $4 = $8;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $3;
     $2 = $2 + 8 | 0;
     $5 = HEAP32[$2 >> 2];
     $4 = HEAP32[$2 + 4 >> 2];
     $3 = $8 + 8 | 0;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $4;
     $5 = $10 + -48 | 0;
     $2 = $5 + 8 | 0;
     $9 = HEAP32[$2 >> 2];
     $3 = HEAP32[$2 + 4 >> 2];
     $8 = $6 + -48 | 0;
     $4 = $8 + 8 | 0;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $3;
     $2 = $5;
     $5 = HEAP32[$2 >> 2];
     $4 = HEAP32[$2 + 4 >> 2];
     $3 = $8;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $4;
     $5 = $10 + -32 | 0;
     $2 = $5 + 8 | 0;
     $9 = HEAP32[$2 >> 2];
     $3 = HEAP32[$2 + 4 >> 2];
     $8 = $6 + -32 | 0;
     $4 = $8 + 8 | 0;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $3;
     $2 = $5;
     $5 = HEAP32[$2 >> 2];
     $4 = HEAP32[$2 + 4 >> 2];
     $3 = $8;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $4;
     $5 = $10 + -16 | 0;
     $2 = $5 + 8 | 0;
     $9 = HEAP32[$2 >> 2];
     $3 = HEAP32[$2 + 4 >> 2];
     $8 = $6 + -16 | 0;
     $4 = $8 + 8 | 0;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $3;
     $2 = $5;
     $5 = HEAP32[$2 >> 2];
     $4 = HEAP32[$2 + 4 >> 2];
     $3 = $8;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $4;
     $2 = $10;
     $5 = HEAP32[$2 >> 2];
     $3 = HEAP32[$2 + 4 >> 2];
     $4 = $6;
     HEAP32[$4 >> 2] = $5;
     HEAP32[$4 + 4 >> 2] = $3;
     $2 = $2 + 8 | 0;
     $6 = HEAP32[$2 >> 2];
     $3 = $4 + 8 | 0;
     $4 = HEAP32[$2 + 4 >> 2];
     HEAP32[$3 >> 2] = $6;
     HEAP32[$3 + 4 >> 2] = $4;
     $12 = $12 + 80 | 0;
     $7 = $7 + -1 | 0;
     if ($7) {
      continue
     }
     break;
    };
   }
   $6 = HEAP32[$0 + 12 >> 2];
   if ($6) {
    if (HEAPU8[$0 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($6)
    }
    HEAP32[$0 + 12 >> 2] = 0;
   }
   HEAP32[$0 + 12 >> 2] = $13;
   HEAP8[$0 + 16 | 0] = 1;
   HEAP32[$0 + 8 >> 2] = $11;
   $7 = HEAP32[$0 + 4 >> 2];
  }
  $2 = $1;
  $5 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $6 = HEAP32[$0 + 12 >> 2] + Math_imul($7, 80) | 0;
  $4 = $6;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $2 + 8 | 0;
  $5 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $6 + 8 | 0;
  HEAP32[$3 >> 2] = $5;
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $1 + 24 | 0;
  $5 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $6 + 24 | 0;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $1;
  $5 = HEAP32[$2 + 16 >> 2];
  $4 = HEAP32[$2 + 20 >> 2];
  $3 = $6;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[$3 + 20 >> 2] = $4;
  $2 = $2 + 40 | 0;
  $5 = HEAP32[$2 >> 2];
  $4 = $3 + 40 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $1;
  $5 = HEAP32[$2 + 32 >> 2];
  $4 = HEAP32[$2 + 36 >> 2];
  $3 = $6;
  HEAP32[$3 + 32 >> 2] = $5;
  HEAP32[$3 + 36 >> 2] = $4;
  $2 = $2 + 56 | 0;
  $5 = HEAP32[$2 >> 2];
  $4 = $3 + 56 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $1;
  $5 = HEAP32[$2 + 48 >> 2];
  $4 = HEAP32[$2 + 52 >> 2];
  $3 = $6;
  HEAP32[$3 + 48 >> 2] = $5;
  HEAP32[$3 + 52 >> 2] = $4;
  $2 = $2 + 72 | 0;
  $5 = HEAP32[$2 >> 2];
  $4 = $3 + 72 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $1;
  $1 = HEAP32[$2 + 64 >> 2];
  $4 = HEAP32[$2 + 68 >> 2];
  $3 = $6;
  HEAP32[$3 + 64 >> 2] = $1;
  HEAP32[$3 + 68 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
 }
 
 function btCompoundShape__updateChildTransform_28int_2c_20btTransform_20const__2c_20bool_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $8 = global$0 + -64 | 0;
  global$0 = $8;
  $4 = $2;
  $7 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  $9 = Math_imul($1, 80);
  $1 = $9 + HEAP32[$0 + 28 >> 2] | 0;
  $6 = $1;
  HEAP32[$6 >> 2] = $7;
  HEAP32[$6 + 4 >> 2] = $5;
  $4 = $4 + 8 | 0;
  $7 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $1 + 8 | 0;
  HEAP32[$5 >> 2] = $7;
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = $2 + 24 | 0;
  $7 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  $6 = $1 + 24 | 0;
  HEAP32[$6 >> 2] = $7;
  HEAP32[$6 + 4 >> 2] = $5;
  $4 = $2;
  $7 = HEAP32[$4 + 16 >> 2];
  $6 = HEAP32[$4 + 20 >> 2];
  $5 = $1;
  HEAP32[$5 + 16 >> 2] = $7;
  HEAP32[$5 + 20 >> 2] = $6;
  $4 = $4 + 40 | 0;
  $7 = HEAP32[$4 >> 2];
  $6 = $5 + 40 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$6 >> 2] = $7;
  HEAP32[$6 + 4 >> 2] = $5;
  $4 = $2;
  $7 = HEAP32[$4 + 32 >> 2];
  $6 = HEAP32[$4 + 36 >> 2];
  $5 = $1;
  HEAP32[$5 + 32 >> 2] = $7;
  HEAP32[$5 + 36 >> 2] = $6;
  $4 = $4 + 56 | 0;
  $7 = HEAP32[$4 >> 2];
  $6 = $5 + 56 | 0;
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$6 >> 2] = $7;
  HEAP32[$6 + 4 >> 2] = $5;
  $4 = $2;
  $7 = HEAP32[$4 + 48 >> 2];
  $6 = HEAP32[$4 + 52 >> 2];
  $5 = $1;
  HEAP32[$5 + 48 >> 2] = $7;
  HEAP32[$5 + 52 >> 2] = $6;
  if (HEAP32[$0 + 68 >> 2]) {
   $1 = HEAP32[($9 + HEAP32[$0 + 28 >> 2] | 0) + 64 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $8 + 48 | 0, $8 + 32 | 0);
   $4 = $8 + 56 | 0;
   $1 = HEAP32[$4 >> 2];
   $5 = HEAP32[$4 + 4 >> 2];
   $6 = $8 + 8 | 0;
   HEAP32[$6 >> 2] = $1;
   HEAP32[$6 + 4 >> 2] = $5;
   $4 = $8 + 40 | 0;
   $1 = HEAP32[$4 >> 2];
   $6 = HEAP32[$4 + 4 >> 2];
   $5 = $8 + 24 | 0;
   HEAP32[$5 >> 2] = $1;
   HEAP32[$5 + 4 >> 2] = $6;
   $4 = $8;
   $1 = HEAP32[$4 + 32 >> 2];
   $5 = HEAP32[$4 + 36 >> 2];
   HEAP32[$4 + 16 >> 2] = $1;
   HEAP32[$4 + 20 >> 2] = $5;
   $6 = HEAP32[$4 + 52 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$4 + 48 >> 2];
   HEAP32[$4 + 4 >> 2] = $6;
   btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__29(HEAP32[$0 + 68 >> 2], HEAP32[($9 + HEAP32[$0 + 28 >> 2] | 0) + 76 >> 2], $4);
  }
  if ($3) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0)
  }
  global$0 = $8 - -64 | 0;
 }
 
 function btCompoundShape__removeChildShapeByIndex_28int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
  $8 = global$0 - 80 | 0;
  global$0 = $8;
  HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 72 >> 2] + 1;
  $6 = HEAP32[$0 + 68 >> 2];
  if ($6) {
   btDbvt__remove_28btDbvtNode__29($6, HEAP32[(HEAP32[$0 + 28 >> 2] + Math_imul($1, 80) | 0) + 76 >> 2])
  }
  $5 = HEAP32[$0 + 20 >> 2];
  $15 = $0 + 28 | 0;
  $9 = HEAP32[$15 >> 2];
  $16 = Math_imul($1, 80);
  $6 = $9 + $16 | 0;
  $7 = $6 + 8 | 0;
  $2 = $7;
  $11 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $17 = $8 + 8 | 0;
  $3 = $17;
  HEAP32[$3 >> 2] = $11;
  HEAP32[$3 + 4 >> 2] = $4;
  $11 = $6 + 24 | 0;
  $2 = $11;
  $12 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $18 = $8 + 24 | 0;
  $4 = $18;
  HEAP32[$4 >> 2] = $12;
  HEAP32[$4 + 4 >> 2] = $3;
  $12 = $6 + 40 | 0;
  $2 = $12;
  $13 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $19 = $8 + 40 | 0;
  $3 = $19;
  HEAP32[$3 >> 2] = $13;
  HEAP32[$3 + 4 >> 2] = $4;
  $13 = $6 + 56 | 0;
  $2 = $13;
  $14 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $20 = $8 + 56 | 0;
  $4 = $20;
  HEAP32[$4 >> 2] = $14;
  HEAP32[$4 + 4 >> 2] = $3;
  $14 = $6 + 72 | 0;
  $2 = $14;
  $10 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $21 = $8 + 72 | 0;
  $3 = $21;
  HEAP32[$3 >> 2] = $10;
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $6;
  $10 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $8;
  HEAP32[$4 >> 2] = $10;
  HEAP32[$4 + 4 >> 2] = $3;
  $3 = $4;
  $4 = HEAP32[$2 + 20 >> 2];
  HEAP32[$3 + 16 >> 2] = HEAP32[$2 + 16 >> 2];
  HEAP32[$3 + 20 >> 2] = $4;
  $4 = $3;
  $3 = HEAP32[$2 + 36 >> 2];
  HEAP32[$4 + 32 >> 2] = HEAP32[$2 + 32 >> 2];
  HEAP32[$4 + 36 >> 2] = $3;
  $3 = $4;
  $4 = HEAP32[$2 + 52 >> 2];
  HEAP32[$3 + 48 >> 2] = HEAP32[$2 + 48 >> 2];
  HEAP32[$3 + 52 >> 2] = $4;
  $4 = $3;
  $3 = HEAP32[$2 + 68 >> 2];
  HEAP32[$4 + 64 >> 2] = HEAP32[$2 + 64 >> 2];
  HEAP32[$4 + 68 >> 2] = $3;
  $2 = $9;
  $9 = Math_imul($5, 80) + -80 | 0;
  $5 = $2 + $9 | 0;
  $2 = $5 + 8 | 0;
  $10 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $7;
  HEAP32[$3 >> 2] = $10;
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $5;
  $7 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $6;
  HEAP32[$4 >> 2] = $7;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $2 + 24 | 0;
  $7 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $11;
  HEAP32[$3 >> 2] = $7;
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $5;
  $7 = HEAP32[$2 + 16 >> 2];
  $3 = HEAP32[$2 + 20 >> 2];
  $4 = $6;
  HEAP32[$4 + 16 >> 2] = $7;
  HEAP32[$4 + 20 >> 2] = $3;
  $2 = $2 + 40 | 0;
  $7 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $12;
  HEAP32[$3 >> 2] = $7;
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $5;
  $7 = HEAP32[$2 + 32 >> 2];
  $3 = HEAP32[$2 + 36 >> 2];
  $4 = $6;
  HEAP32[$4 + 32 >> 2] = $7;
  HEAP32[$4 + 36 >> 2] = $3;
  $2 = $2 + 56 | 0;
  $7 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $13;
  HEAP32[$3 >> 2] = $7;
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $5;
  $5 = HEAP32[$2 + 48 >> 2];
  $3 = HEAP32[$2 + 52 >> 2];
  $4 = $6;
  HEAP32[$4 + 48 >> 2] = $5;
  HEAP32[$4 + 52 >> 2] = $3;
  $3 = $4;
  $4 = HEAP32[$2 + 68 >> 2];
  HEAP32[$3 + 64 >> 2] = HEAP32[$2 + 64 >> 2];
  HEAP32[$3 + 68 >> 2] = $4;
  $2 = $2 + 72 | 0;
  $6 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $14;
  HEAP32[$4 >> 2] = $6;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $8;
  $5 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $6 = $9 + HEAP32[$15 >> 2] | 0;
  $3 = $6;
  HEAP32[$3 >> 2] = $5;
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $17;
  $5 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $6 + 8 | 0;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $8;
  $5 = HEAP32[$2 + 16 >> 2];
  $4 = HEAP32[$2 + 20 >> 2];
  $3 = $6;
  HEAP32[$3 + 16 >> 2] = $5;
  HEAP32[$3 + 20 >> 2] = $4;
  $2 = $18;
  $5 = HEAP32[$2 >> 2];
  $4 = $3 + 24 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $8;
  $5 = HEAP32[$2 + 32 >> 2];
  $4 = HEAP32[$2 + 36 >> 2];
  $3 = $6;
  HEAP32[$3 + 32 >> 2] = $5;
  HEAP32[$3 + 36 >> 2] = $4;
  $2 = $19;
  $5 = HEAP32[$2 >> 2];
  $4 = $3 + 40 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $8;
  $5 = HEAP32[$2 + 48 >> 2];
  $4 = HEAP32[$2 + 52 >> 2];
  $3 = $6;
  HEAP32[$3 + 48 >> 2] = $5;
  HEAP32[$3 + 52 >> 2] = $4;
  $2 = $20;
  $5 = HEAP32[$2 >> 2];
  $4 = $3 + 56 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $21;
  $5 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $6 + 72 | 0;
  HEAP32[$3 >> 2] = $5;
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $8;
  $5 = HEAP32[$2 + 64 >> 2];
  $3 = HEAP32[$2 + 68 >> 2];
  $4 = $6;
  HEAP32[$4 + 64 >> 2] = $5;
  HEAP32[$4 + 68 >> 2] = $3;
  if (HEAP32[$0 + 68 >> 2]) {
   HEAP32[HEAP32[($16 + HEAP32[$0 + 28 >> 2] | 0) + 76 >> 2] + 36 >> 2] = $1
  }
  HEAP32[$0 + 20 >> 2] = HEAP32[$0 + 20 >> 2] + -1;
  global$0 = $8 + 80 | 0;
 }
 
 function btCompoundShape__removeChildShape_28btCollisionShape__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 72 >> 2] + 1;
  $2 = HEAP32[$0 + 20 >> 2];
  if (($2 | 0) >= 1) {
   $3 = Math_imul($2, 80) + -16 | 0;
   while (1) {
    $2 = $2 + -1 | 0;
    if (HEAP32[$3 + HEAP32[$0 + 28 >> 2] >> 2] == ($1 | 0)) {
     btCompoundShape__removeChildShapeByIndex_28int_29($0, $2)
    }
    $3 = $3 + -80 | 0;
    if (($2 | 0) > 0) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
 }
 
 function btCompoundShape__recalculateLocalAabb_28_29($0) {
  $0 = $0 | 0;
  var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  HEAP32[$0 + 52 >> 2] = -581039253;
  HEAP32[$0 + 56 >> 2] = -581039253;
  HEAP32[$0 + 36 >> 2] = 1566444395;
  HEAP32[$0 + 40 >> 2] = 1566444395;
  $3 = $0 + 60 | 0;
  HEAP32[$3 >> 2] = -581039253;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $0 + 44 | 0;
  HEAP32[$3 >> 2] = 1566444395;
  HEAP32[$3 + 4 >> 2] = 0;
  if (HEAP32[$0 + 20 >> 2] >= 1) {
   $3 = 64;
   while (1) {
    $4 = $3 + HEAP32[$0 + 28 >> 2] | 0;
    $5 = HEAP32[$4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, $4 + -64 | 0, $2 + 16 | 0, $2);
    $1 = HEAPF32[$2 + 16 >> 2];
    if (!!(HEAPF32[$0 + 36 >> 2] > $1)) {
     HEAPF32[$0 + 36 >> 2] = $1
    }
    $1 = HEAPF32[$2 >> 2];
    if (!!(HEAPF32[$0 + 52 >> 2] < $1)) {
     HEAPF32[$0 + 52 >> 2] = $1
    }
    $1 = HEAPF32[$2 + 20 >> 2];
    if (!!(HEAPF32[$0 + 40 >> 2] > $1)) {
     HEAPF32[$0 + 40 >> 2] = $1
    }
    $1 = HEAPF32[$2 + 4 >> 2];
    if (!!(HEAPF32[$0 + 56 >> 2] < $1)) {
     HEAPF32[$0 + 56 >> 2] = $1
    }
    $1 = HEAPF32[$2 + 24 >> 2];
    if (!!(HEAPF32[$0 + 44 >> 2] > $1)) {
     HEAPF32[$0 + 44 >> 2] = $1
    }
    $1 = HEAPF32[$2 + 8 >> 2];
    if (!!(HEAPF32[$0 + 60 >> 2] < $1)) {
     HEAPF32[$0 + 60 >> 2] = $1
    }
    $3 = $3 + 80 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) < HEAP32[$0 + 20 >> 2]) {
     continue
    }
    break;
   };
  }
  global$0 = $2 + 32 | 0;
 }
 
 function btCompoundShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0);
  $4 = HEAPF32[$0 + 44 >> 2];
  $8 = HEAPF32[$0 + 60 >> 2];
  $5 = HEAP32[$0 + 20 >> 2];
  $6 = HEAPF32[$0 + 40 >> 2];
  $9 = HEAPF32[$0 + 56 >> 2];
  $7 = HEAPF32[$0 + 36 >> 2];
  $10 = HEAPF32[$0 + 52 >> 2];
  $24 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $25 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $26 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0));
  $27 = HEAPF32[$1 + 52 >> 2];
  $11 = HEAPF32[$1 + 24 >> 2];
  $16 = HEAPF32[$1 + 20 >> 2];
  $12 = HEAPF32[$1 + 56 >> 2];
  $17 = HEAPF32[$1 + 40 >> 2];
  $18 = HEAPF32[$1 + 36 >> 2];
  $28 = HEAPF32[$1 + 48 >> 2];
  $19 = HEAPF32[$1 + 8 >> 2];
  $20 = HEAPF32[$1 >> 2];
  $21 = HEAPF32[$1 + 4 >> 2];
  $22 = HEAPF32[$1 + 16 >> 2];
  $23 = HEAPF32[$1 + 32 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  $13 = $5 ? Math_fround(Math_fround($10 + $7) * Math_fround(.5)) : Math_fround(0.0);
  $14 = $5 ? Math_fround(Math_fround($9 + $6) * Math_fround(.5)) : Math_fround(0.0);
  $15 = $5 ? Math_fround(Math_fround($8 + $4) * Math_fround(.5)) : Math_fround(0.0);
  $12 = Math_fround($12 + Math_fround(Math_fround(Math_fround($23 * $13) + Math_fround($18 * $14)) + Math_fround($17 * $15)));
  $7 = Math_fround($24 + ($5 ? Math_fround(Math_fround($10 - $7) * Math_fround(.5)) : Math_fround(0.0)));
  $6 = Math_fround($25 + ($5 ? Math_fround(Math_fround($9 - $6) * Math_fround(.5)) : Math_fround(0.0)));
  $4 = Math_fround($26 + ($5 ? Math_fround(Math_fround($8 - $4) * Math_fround(.5)) : Math_fround(0.0)));
  $8 = Math_fround(Math_fround(Math_fround($7 * Math_fround(Math_abs($23))) + Math_fround($6 * Math_fround(Math_abs($18)))) + Math_fround($4 * Math_fround(Math_abs($17))));
  HEAPF32[$2 + 8 >> 2] = $12 - $8;
  $9 = Math_fround($27 + Math_fround(Math_fround(Math_fround($13 * $22) + Math_fround($14 * $16)) + Math_fround($15 * $11)));
  $10 = Math_fround(Math_fround(Math_fround($7 * Math_fround(Math_abs($22))) + Math_fround($6 * Math_fround(Math_abs($16)))) + Math_fround($4 * Math_fround(Math_abs($11))));
  HEAPF32[$2 + 4 >> 2] = $9 - $10;
  $11 = Math_fround($28 + Math_fround(Math_fround(Math_fround($13 * $20) + Math_fround($14 * $21)) + Math_fround($15 * $19)));
  $4 = Math_fround(Math_fround(Math_fround($7 * Math_fround(Math_abs($20))) + Math_fround($6 * Math_fround(Math_abs($21)))) + Math_fround($4 * Math_fround(Math_abs($19))));
  HEAPF32[$2 >> 2] = $11 - $4;
  HEAP32[$3 + 12 >> 2] = 0;
  HEAPF32[$3 + 8 >> 2] = $8 + $12;
  HEAPF32[$3 + 4 >> 2] = $10 + $9;
  HEAPF32[$3 >> 2] = $4 + $11;
 }
 
 function btCompoundShape__calculateLocalInertia_28float_2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0);
  $3 = global$0 - 96 | 0;
  global$0 = $3;
  $5 = $3 + 44 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  $5 = $3 + 56 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$3 + 52 >> 2] = 1065353216;
  $5 = $3 + 76 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$3 + 72 >> 2] = 1065353216;
  $5 = $3 + 84 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$3 + 92 >> 2] = 0;
  HEAP32[$3 + 36 >> 2] = 0;
  HEAP32[$3 + 40 >> 2] = 0;
  HEAP32[$3 + 32 >> 2] = 1065353216;
  HEAP32[$3 + 64 >> 2] = 0;
  HEAP32[$3 + 68 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $3 + 32 | 0, $3 + 16 | 0, $3);
  $1 = Math_fround($1 / Math_fround(12.0));
  $4 = Math_fround(Math_fround(HEAPF32[$3 >> 2] - HEAPF32[$3 + 16 >> 2]) * Math_fround(.5));
  $4 = Math_fround($4 + $4);
  $4 = Math_fround($4 * $4);
  $6 = Math_fround(Math_fround(HEAPF32[$3 + 4 >> 2] - HEAPF32[$3 + 20 >> 2]) * Math_fround(.5));
  $6 = Math_fround($6 + $6);
  $6 = Math_fround($6 * $6);
  HEAPF32[$2 + 8 >> 2] = $1 * Math_fround($4 + $6);
  $7 = $4;
  $4 = Math_fround(Math_fround(HEAPF32[$3 + 8 >> 2] - HEAPF32[$3 + 24 >> 2]) * Math_fround(.5));
  $4 = Math_fround($4 + $4);
  $4 = Math_fround($4 * $4);
  HEAPF32[$2 + 4 >> 2] = $1 * Math_fround($7 + $4);
  HEAPF32[$2 >> 2] = $1 * Math_fround($6 + $4);
  global$0 = $3 + 96 | 0;
 }
 
 function btCompoundShape__setLocalScaling_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  $5 = global$0 - 144 | 0;
  global$0 = $5;
  if (HEAP32[$0 + 20 >> 2] >= 1) {
   $16 = $5 + 96 | 0;
   $12 = $5 - -64 | 0;
   $13 = $5 + 48 | 0;
   $14 = $5 + 32 | 0;
   while (1) {
    $6 = $8 + HEAP32[$0 + 28 >> 2] | 0;
    $2 = $6 + 8 | 0;
    $11 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    $7 = $5 + 24 | 0;
    $4 = $7;
    HEAP32[$4 >> 2] = $11;
    HEAP32[$4 + 4 >> 2] = $3;
    $2 = $6;
    $3 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    HEAP32[$5 + 16 >> 2] = $3;
    HEAP32[$5 + 20 >> 2] = $4;
    $2 = $2 + 24 | 0;
    $9 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    $11 = $14 + 8 | 0;
    $4 = $11;
    HEAP32[$4 >> 2] = $9;
    HEAP32[$4 + 4 >> 2] = $3;
    $2 = $6 + 16 | 0;
    $9 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = $14;
    HEAP32[$3 >> 2] = $9;
    HEAP32[$3 + 4 >> 2] = $4;
    $2 = $6 + 40 | 0;
    $10 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    $9 = $13 + 8 | 0;
    $4 = $9;
    HEAP32[$4 >> 2] = $10;
    HEAP32[$4 + 4 >> 2] = $3;
    $2 = $6 + 32 | 0;
    $10 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = $13;
    HEAP32[$3 >> 2] = $10;
    HEAP32[$3 + 4 >> 2] = $4;
    $2 = $6 + 56 | 0;
    $15 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    $10 = $12 + 8 | 0;
    $4 = $10;
    HEAP32[$4 >> 2] = $15;
    HEAP32[$4 + 4 >> 2] = $3;
    $2 = $6 + 48 | 0;
    $15 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = $12;
    HEAP32[$3 >> 2] = $15;
    HEAP32[$3 + 4 >> 2] = $4;
    $4 = $5 + 8 | 0;
    $6 = HEAP32[$6 - -64 >> 2];
    $6 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 28 >> 2]]($6) | 0;
    HEAP32[$4 >> 2] = HEAP32[$6 + 8 >> 2];
    $2 = $6;
    $6 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    $2 = $6;
    HEAPF32[$4 >> 2] = Math_fround(HEAPF32[$4 >> 2] * HEAPF32[$1 + 8 >> 2]) / HEAPF32[$0 + 88 >> 2];
    HEAP32[$5 >> 2] = $2;
    HEAP32[$5 + 4 >> 2] = $3;
    HEAP32[$5 + 12 >> 2] = 0;
    HEAPF32[$5 >> 2] = Math_fround(HEAPF32[$5 >> 2] * HEAPF32[$1 >> 2]) / HEAPF32[$0 + 80 >> 2];
    HEAPF32[$5 + 4 >> 2] = Math_fround(HEAPF32[$5 + 4 >> 2] * HEAPF32[$1 + 4 >> 2]) / HEAPF32[$0 + 84 >> 2];
    $6 = HEAP32[($8 + HEAP32[$0 + 28 >> 2] | 0) - -64 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($6, $5);
    HEAP32[$5 + 76 >> 2] = 0;
    HEAPF32[$5 + 72 >> 2] = Math_fround(HEAPF32[$5 + 72 >> 2] * HEAPF32[$1 + 8 >> 2]) / HEAPF32[$0 + 88 >> 2];
    HEAPF32[$5 + 68 >> 2] = Math_fround(HEAPF32[$5 + 68 >> 2] * HEAPF32[$1 + 4 >> 2]) / HEAPF32[$0 + 84 >> 2];
    HEAPF32[$5 + 64 >> 2] = Math_fround(HEAPF32[$5 + 64 >> 2] * HEAPF32[$1 >> 2]) / HEAPF32[$0 + 80 >> 2];
    $2 = $7;
    $7 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    $6 = $8 + HEAP32[$0 + 28 >> 2] | 0;
    $3 = $6 + 8 | 0;
    HEAP32[$3 >> 2] = $7;
    HEAP32[$3 + 4 >> 2] = $4;
    $3 = HEAP32[$5 + 20 >> 2];
    $4 = $6;
    HEAP32[$4 >> 2] = HEAP32[$5 + 16 >> 2];
    HEAP32[$4 + 4 >> 2] = $3;
    $2 = $11;
    $7 = HEAP32[$2 >> 2];
    $3 = $4 + 24 | 0;
    $4 = HEAP32[$2 + 4 >> 2];
    HEAP32[$3 >> 2] = $7;
    HEAP32[$3 + 4 >> 2] = $4;
    $2 = $14;
    $7 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    $4 = $6 + 16 | 0;
    HEAP32[$4 >> 2] = $7;
    HEAP32[$4 + 4 >> 2] = $3;
    $2 = $9;
    $7 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = $6 + 40 | 0;
    HEAP32[$3 >> 2] = $7;
    HEAP32[$3 + 4 >> 2] = $4;
    $2 = $13;
    $7 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    $4 = $6 + 32 | 0;
    HEAP32[$4 >> 2] = $7;
    HEAP32[$4 + 4 >> 2] = $3;
    $2 = $12;
    $7 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = $6 + 48 | 0;
    HEAP32[$3 >> 2] = $7;
    HEAP32[$3 + 4 >> 2] = $4;
    $2 = $10;
    $7 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    $4 = $6 + 56 | 0;
    HEAP32[$4 >> 2] = $7;
    HEAP32[$4 + 4 >> 2] = $3;
    if (HEAP32[$0 + 68 >> 2]) {
     $6 = HEAP32[($8 + HEAP32[$0 + 28 >> 2] | 0) - -64 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, $5 + 16 | 0, $5 + 128 | 0, $5 + 112 | 0);
     $4 = HEAP32[$5 + 116 >> 2];
     $3 = $16;
     HEAP32[$3 >> 2] = HEAP32[$5 + 112 >> 2];
     HEAP32[$3 + 4 >> 2] = $4;
     $2 = $5 + 136 | 0;
     $6 = HEAP32[$2 >> 2];
     $3 = HEAP32[$2 + 4 >> 2];
     $4 = $5 + 88 | 0;
     HEAP32[$4 >> 2] = $6;
     HEAP32[$4 + 4 >> 2] = $3;
     $2 = $5 + 120 | 0;
     $6 = HEAP32[$2 >> 2];
     $4 = HEAP32[$2 + 4 >> 2];
     $3 = $16 + 8 | 0;
     HEAP32[$3 >> 2] = $6;
     HEAP32[$3 + 4 >> 2] = $4;
     $3 = HEAP32[$5 + 132 >> 2];
     HEAP32[$5 + 80 >> 2] = HEAP32[$5 + 128 >> 2];
     HEAP32[$5 + 84 >> 2] = $3;
     btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__29(HEAP32[$0 + 68 >> 2], HEAP32[($8 + HEAP32[$0 + 28 >> 2] | 0) + 76 >> 2], $5 + 80 | 0);
    }
    $8 = $8 + 80 | 0;
    $17 = $17 + 1 | 0;
    if (($17 | 0) < HEAP32[$0 + 20 >> 2]) {
     continue
    }
    break;
   };
  }
  $2 = $1;
  $1 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $0;
  HEAP32[$3 + 80 >> 2] = $1;
  HEAP32[$3 + 84 >> 2] = $4;
  $2 = $2 + 8 | 0;
  $1 = HEAP32[$2 >> 2];
  $4 = $3 + 88 | 0;
  $3 = HEAP32[$2 + 4 >> 2];
  HEAP32[$4 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $3;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
  global$0 = $5 + 144 | 0;
 }
 
 function btCompoundShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  btCollisionShape__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = HEAP32[$0 + 76 >> 2];
  $3 = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 + 16 >> 2] = $3;
  if ($3) {
   $6 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 76, $3) | 0;
   $3 = HEAP32[$6 + 8 >> 2];
   (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $3) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
   if (HEAP32[$1 + 16 >> 2] > 0) {
    $5 = 72;
    $3 = $3 + 72 | 0;
    while (1) {
     $4 = $5 + HEAP32[$0 + 28 >> 2] | 0;
     HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
     (wasm2js_i32$0 = $3 + -8 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, HEAP32[$4 + -8 >> 2]) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 24 >> 2]]($2, HEAP32[($5 + HEAP32[$0 + 28 >> 2] | 0) + -8 >> 2])) {
      $4 = HEAP32[($5 + HEAP32[$0 + 28 >> 2] | 0) + -8 >> 2];
      $4 = ((((wasm2js_i32$1 = $2, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 52 >> 2]]($4) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
      $7 = HEAP32[($5 + HEAP32[$0 + 28 >> 2] | 0) + -8 >> 2];
      (((((wasm2js_i32$3 = $2, wasm2js_i32$2 = $4), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 56 >> 2]]($7, HEAP32[$4 + 8 >> 2], $2) | 0), wasm2js_i32$4 = 1346455635), wasm2js_i32$5 = HEAP32[($5 + HEAP32[$0 + 28 >> 2] | 0) + -8 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
     }
     $4 = $5 + HEAP32[$0 + 28 >> 2] | 0;
     HEAP32[$3 + -72 >> 2] = HEAP32[$4 + -72 >> 2];
     HEAP32[$3 + -68 >> 2] = HEAP32[$4 + -68 >> 2];
     HEAP32[$3 + -64 >> 2] = HEAP32[$4 + -64 >> 2];
     HEAP32[$3 + -60 >> 2] = HEAP32[$4 + -60 >> 2];
     HEAP32[$3 + -56 >> 2] = HEAP32[$4 + -56 >> 2];
     HEAP32[$3 + -52 >> 2] = HEAP32[$4 + -52 >> 2];
     HEAP32[$3 + -48 >> 2] = HEAP32[$4 + -48 >> 2];
     HEAP32[$3 + -44 >> 2] = HEAP32[$4 + -44 >> 2];
     HEAP32[$3 + -40 >> 2] = HEAP32[$4 + -40 >> 2];
     HEAP32[$3 + -36 >> 2] = HEAP32[$4 + -36 >> 2];
     HEAP32[$3 + -32 >> 2] = HEAP32[$4 + -32 >> 2];
     HEAP32[$3 + -28 >> 2] = HEAP32[$4 + -28 >> 2];
     HEAP32[$3 + -24 >> 2] = HEAP32[$4 + -24 >> 2];
     HEAP32[$3 + -20 >> 2] = HEAP32[$4 + -20 >> 2];
     HEAP32[$3 + -16 >> 2] = HEAP32[$4 + -16 >> 2];
     HEAP32[$3 + -4 >> 2] = HEAP32[$4 + -4 >> 2];
     HEAP32[$3 + -12 >> 2] = HEAP32[$4 + -12 >> 2];
     $5 = $5 + 80 | 0;
     $3 = $3 + 76 | 0;
     $8 = $8 + 1 | 0;
     if (($8 | 0) < HEAP32[$1 + 16 >> 2]) {
      continue
     }
     break;
    };
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $6, 14288, 1497453121, HEAP32[$6 + 8 >> 2]);
  }
  return 14313;
 }
 
 function btCompoundShape__getLocalScaling_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 + 80 | 0;
 }
 
 function btCompoundShape__getName_28_29_20const($0) {
  $0 = $0 | 0;
  return 14364;
 }
 
 function btCompoundShape__setMargin_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  HEAPF32[$0 + 76 >> 2] = $1;
 }
 
 function btCompoundShape__getMargin_28_29_20const($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 76 >> 2]);
 }
 
 function btCompoundShape__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 24;
 }
 
 function btStridingMeshInterface__InternalProcessAllTriangles_28btInternalTriangleIndexCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0;
  $2 = global$0 - 80 | 0;
  global$0 = $2;
  $15 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
  if (($15 | 0) >= 1) {
   $8 = HEAPF32[$0 + 12 >> 2];
   $9 = HEAPF32[$0 + 8 >> 2];
   $10 = HEAPF32[$0 + 4 >> 2];
   while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $2 + 76 | 0, $2 + 52 | 0, $2 - -64 | 0, $2 + 56 | 0, $2 + 72 | 0, $2 + 68 | 0, $2 + 48 | 0, $2 + 60 | 0, $14);
    $5 = HEAP32[$2 + 64 >> 2];
    label$3 : {
     if ($5 >>> 0 > 1) {
      break label$3
     }
     if ($5 - 1) {
      $5 = HEAP32[$2 + 60 >> 2] + -2 | 0;
      if ($5 >>> 0 > 3) {
       break label$3
      }
      label$6 : {
       switch ($5 - 1 | 0) {
       case 2:
        if (HEAP32[$2 + 48 >> 2] < 1) {
         break label$3
        }
        $5 = 0;
        while (1) {
         $4 = HEAP32[$2 + 76 >> 2];
         $6 = HEAP32[$2 + 56 >> 2];
         $7 = HEAP32[$2 + 72 >> 2] + Math_imul($5, HEAP32[$2 + 68 >> 2]) | 0;
         $3 = $4 + Math_imul($6, HEAPU8[$7 | 0]) | 0;
         $11 = HEAPF32[$3 >> 2];
         $12 = HEAPF32[$3 + 4 >> 2];
         $13 = HEAPF32[$3 + 8 >> 2];
         HEAP32[$2 + 12 >> 2] = 0;
         HEAPF32[$2 + 8 >> 2] = $8 * $13;
         HEAPF32[$2 + 4 >> 2] = $9 * $12;
         HEAPF32[$2 >> 2] = $10 * $11;
         $3 = Math_imul(HEAPU8[$7 + 1 | 0], $6) + $4 | 0;
         $11 = HEAPF32[$3 >> 2];
         $12 = HEAPF32[$3 + 4 >> 2];
         $13 = HEAPF32[$3 + 8 >> 2];
         HEAP32[$2 + 28 >> 2] = 0;
         HEAPF32[$2 + 24 >> 2] = $8 * $13;
         HEAPF32[$2 + 20 >> 2] = $9 * $12;
         HEAPF32[$2 + 16 >> 2] = $10 * $11;
         $4 = Math_imul(HEAPU8[$7 + 2 | 0], $6) + $4 | 0;
         $11 = HEAPF32[$4 >> 2];
         $12 = HEAPF32[$4 + 4 >> 2];
         $13 = HEAPF32[$4 + 8 >> 2];
         HEAP32[$2 + 44 >> 2] = 0;
         HEAPF32[$2 + 40 >> 2] = $8 * $13;
         HEAPF32[$2 + 36 >> 2] = $9 * $12;
         HEAPF32[$2 + 32 >> 2] = $10 * $11;
         FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $14, $5);
         $5 = $5 + 1 | 0;
         if (($5 | 0) < HEAP32[$2 + 48 >> 2]) {
          continue
         }
         break;
        };
        break label$3;
       case 0:
        if (HEAP32[$2 + 48 >> 2] < 1) {
         break label$3
        }
        $5 = 0;
        while (1) {
         $4 = HEAP32[$2 + 76 >> 2];
         $6 = HEAP32[$2 + 56 >> 2];
         $7 = HEAP32[$2 + 72 >> 2] + Math_imul($5, HEAP32[$2 + 68 >> 2]) | 0;
         $3 = $4 + Math_imul($6, HEAPU16[$7 >> 1]) | 0;
         $11 = HEAPF32[$3 >> 2];
         $12 = HEAPF32[$3 + 4 >> 2];
         $13 = HEAPF32[$3 + 8 >> 2];
         HEAP32[$2 + 12 >> 2] = 0;
         HEAPF32[$2 + 8 >> 2] = $8 * $13;
         HEAPF32[$2 + 4 >> 2] = $9 * $12;
         HEAPF32[$2 >> 2] = $10 * $11;
         $3 = Math_imul(HEAPU16[$7 + 2 >> 1], $6) + $4 | 0;
         $11 = HEAPF32[$3 >> 2];
         $12 = HEAPF32[$3 + 4 >> 2];
         $13 = HEAPF32[$3 + 8 >> 2];
         HEAP32[$2 + 28 >> 2] = 0;
         HEAPF32[$2 + 24 >> 2] = $8 * $13;
         HEAPF32[$2 + 20 >> 2] = $9 * $12;
         HEAPF32[$2 + 16 >> 2] = $10 * $11;
         $4 = Math_imul(HEAPU16[$7 + 4 >> 1], $6) + $4 | 0;
         $11 = HEAPF32[$4 + 8 >> 2];
         $12 = HEAPF32[$4 + 4 >> 2];
         $13 = HEAPF32[$4 >> 2];
         HEAP32[$2 + 44 >> 2] = 0;
         HEAPF32[$2 + 32 >> 2] = $10 * $13;
         HEAPF32[$2 + 36 >> 2] = $9 * $12;
         HEAPF32[$2 + 40 >> 2] = $8 * $11;
         FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $14, $5);
         $5 = $5 + 1 | 0;
         if (($5 | 0) < HEAP32[$2 + 48 >> 2]) {
          continue
         }
         break;
        };
        break label$3;
       case 1:
        break label$3;
       default:
        break label$6;
       };
      }
      if (HEAP32[$2 + 48 >> 2] < 1) {
       break label$3
      }
      $5 = 0;
      while (1) {
       $4 = HEAP32[$2 + 76 >> 2];
       $6 = HEAP32[$2 + 56 >> 2];
       $7 = HEAP32[$2 + 72 >> 2] + Math_imul($5, HEAP32[$2 + 68 >> 2]) | 0;
       $3 = $4 + Math_imul($6, HEAP32[$7 >> 2]) | 0;
       $11 = HEAPF32[$3 >> 2];
       $12 = HEAPF32[$3 + 4 >> 2];
       $13 = HEAPF32[$3 + 8 >> 2];
       HEAP32[$2 + 12 >> 2] = 0;
       HEAPF32[$2 + 8 >> 2] = $8 * $13;
       HEAPF32[$2 + 4 >> 2] = $9 * $12;
       HEAPF32[$2 >> 2] = $10 * $11;
       $3 = Math_imul(HEAP32[$7 + 4 >> 2], $6) + $4 | 0;
       $11 = HEAPF32[$3 >> 2];
       $12 = HEAPF32[$3 + 4 >> 2];
       $13 = HEAPF32[$3 + 8 >> 2];
       HEAP32[$2 + 28 >> 2] = 0;
       HEAPF32[$2 + 24 >> 2] = $8 * $13;
       HEAPF32[$2 + 20 >> 2] = $9 * $12;
       HEAPF32[$2 + 16 >> 2] = $10 * $11;
       $4 = Math_imul(HEAP32[$7 + 8 >> 2], $6) + $4 | 0;
       $11 = HEAPF32[$4 + 8 >> 2];
       $12 = HEAPF32[$4 + 4 >> 2];
       $13 = HEAPF32[$4 >> 2];
       HEAP32[$2 + 44 >> 2] = 0;
       HEAPF32[$2 + 32 >> 2] = $10 * $13;
       HEAPF32[$2 + 36 >> 2] = $9 * $12;
       HEAPF32[$2 + 40 >> 2] = $8 * $11;
       FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $14, $5);
       $5 = $5 + 1 | 0;
       if (($5 | 0) < HEAP32[$2 + 48 >> 2]) {
        continue
       }
       break;
      };
      break label$3;
     }
     $5 = HEAP32[$2 + 60 >> 2] + -2 | 0;
     if ($5 >>> 0 > 3) {
      break label$3
     }
     label$12 : {
      switch ($5 - 1 | 0) {
      case 2:
       if (HEAP32[$2 + 48 >> 2] < 1) {
        break label$3
       }
       $5 = 0;
       while (1) {
        $4 = HEAP32[$2 + 72 >> 2] + Math_imul($5, HEAP32[$2 + 68 >> 2]) | 0;
        $3 = HEAPU8[$4 | 0];
        HEAP32[$2 + 12 >> 2] = 0;
        $6 = HEAP32[$2 + 76 >> 2];
        $7 = HEAP32[$2 + 56 >> 2];
        $3 = $6 + Math_imul($7, $3) | 0;
        HEAPF32[$2 + 8 >> 2] = $8 * Math_fround(HEAPF64[$3 + 16 >> 3]);
        HEAPF32[$2 + 4 >> 2] = $9 * Math_fround(HEAPF64[$3 + 8 >> 3]);
        HEAPF32[$2 >> 2] = $10 * Math_fround(HEAPF64[$3 >> 3]);
        $3 = HEAPU8[$4 + 1 | 0];
        HEAP32[$2 + 28 >> 2] = 0;
        $3 = Math_imul($3, $7) + $6 | 0;
        HEAPF32[$2 + 24 >> 2] = $8 * Math_fround(HEAPF64[$3 + 16 >> 3]);
        HEAPF32[$2 + 20 >> 2] = $9 * Math_fround(HEAPF64[$3 + 8 >> 3]);
        HEAPF32[$2 + 16 >> 2] = $10 * Math_fround(HEAPF64[$3 >> 3]);
        $4 = Math_imul(HEAPU8[$4 + 2 | 0], $7) + $6 | 0;
        $16 = HEAPF64[$4 >> 3];
        $17 = HEAPF64[$4 + 8 >> 3];
        $18 = HEAPF64[$4 + 16 >> 3];
        HEAP32[$2 + 44 >> 2] = 0;
        HEAPF32[$2 + 40 >> 2] = $8 * Math_fround($18);
        HEAPF32[$2 + 36 >> 2] = $9 * Math_fround($17);
        HEAPF32[$2 + 32 >> 2] = $10 * Math_fround($16);
        FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $14, $5);
        $5 = $5 + 1 | 0;
        if (($5 | 0) < HEAP32[$2 + 48 >> 2]) {
         continue
        }
        break;
       };
       break label$3;
      case 0:
       if (HEAP32[$2 + 48 >> 2] < 1) {
        break label$3
       }
       $5 = 0;
       while (1) {
        HEAP32[$2 + 12 >> 2] = 0;
        HEAP32[$2 + 28 >> 2] = 0;
        $4 = HEAP32[$2 + 76 >> 2];
        $6 = HEAP32[$2 + 56 >> 2];
        $7 = HEAP32[$2 + 72 >> 2] + Math_imul($5, HEAP32[$2 + 68 >> 2]) | 0;
        $3 = $4 + Math_imul($6, HEAPU16[$7 >> 1]) | 0;
        HEAPF32[$2 + 8 >> 2] = $8 * Math_fround(HEAPF64[$3 + 16 >> 3]);
        HEAPF32[$2 + 4 >> 2] = $9 * Math_fround(HEAPF64[$3 + 8 >> 3]);
        HEAPF32[$2 >> 2] = $10 * Math_fround(HEAPF64[$3 >> 3]);
        $3 = Math_imul(HEAPU16[$7 + 2 >> 1], $6) + $4 | 0;
        HEAPF32[$2 + 24 >> 2] = $8 * Math_fround(HEAPF64[$3 + 16 >> 3]);
        HEAPF32[$2 + 20 >> 2] = $9 * Math_fround(HEAPF64[$3 + 8 >> 3]);
        HEAPF32[$2 + 16 >> 2] = $10 * Math_fround(HEAPF64[$3 >> 3]);
        HEAP32[$2 + 44 >> 2] = 0;
        $4 = Math_imul(HEAPU16[$7 + 4 >> 1], $6) + $4 | 0;
        HEAPF32[$2 + 32 >> 2] = $10 * Math_fround(HEAPF64[$4 >> 3]);
        HEAPF32[$2 + 36 >> 2] = $9 * Math_fround(HEAPF64[$4 + 8 >> 3]);
        HEAPF32[$2 + 40 >> 2] = $8 * Math_fround(HEAPF64[$4 + 16 >> 3]);
        FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $14, $5);
        $5 = $5 + 1 | 0;
        if (($5 | 0) < HEAP32[$2 + 48 >> 2]) {
         continue
        }
        break;
       };
       break label$3;
      case 1:
       break label$3;
      default:
       break label$12;
      };
     }
     if (HEAP32[$2 + 48 >> 2] < 1) {
      break label$3
     }
     $5 = 0;
     while (1) {
      HEAP32[$2 + 12 >> 2] = 0;
      HEAP32[$2 + 28 >> 2] = 0;
      $4 = HEAP32[$2 + 76 >> 2];
      $6 = HEAP32[$2 + 56 >> 2];
      $7 = HEAP32[$2 + 72 >> 2] + Math_imul($5, HEAP32[$2 + 68 >> 2]) | 0;
      $3 = $4 + Math_imul($6, HEAP32[$7 >> 2]) | 0;
      HEAPF32[$2 + 8 >> 2] = $8 * Math_fround(HEAPF64[$3 + 16 >> 3]);
      HEAPF32[$2 + 4 >> 2] = $9 * Math_fround(HEAPF64[$3 + 8 >> 3]);
      HEAPF32[$2 >> 2] = $10 * Math_fround(HEAPF64[$3 >> 3]);
      $3 = Math_imul(HEAP32[$7 + 4 >> 2], $6) + $4 | 0;
      HEAPF32[$2 + 24 >> 2] = $8 * Math_fround(HEAPF64[$3 + 16 >> 3]);
      HEAPF32[$2 + 20 >> 2] = $9 * Math_fround(HEAPF64[$3 + 8 >> 3]);
      HEAPF32[$2 + 16 >> 2] = $10 * Math_fround(HEAPF64[$3 >> 3]);
      HEAP32[$2 + 44 >> 2] = 0;
      $4 = Math_imul(HEAP32[$7 + 8 >> 2], $6) + $4 | 0;
      HEAPF32[$2 + 32 >> 2] = $10 * Math_fround(HEAPF64[$4 >> 3]);
      HEAPF32[$2 + 36 >> 2] = $9 * Math_fround(HEAPF64[$4 + 8 >> 3]);
      HEAPF32[$2 + 40 >> 2] = $8 * Math_fround(HEAPF64[$4 + 16 >> 3]);
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $2, $14, $5);
      $5 = $5 + 1 | 0;
      if (($5 | 0) < HEAP32[$2 + 48 >> 2]) {
       continue
      }
      break;
     };
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $14);
    $14 = $14 + 1 | 0;
    if (($15 | 0) != ($14 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $2 + 80 | 0;
 }
 
 function btStridingMeshInterface__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $4 = global$0 - 32 | 0;
  global$0 = $4;
  $3 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = $3;
  if ($3) {
   $14 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 32, $3) | 0;
   $9 = HEAP32[$14 + 8 >> 2];
   (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $9) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   $16 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
   if (($16 | 0) > 0) {
    while (1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $4 + 28 | 0, $4 + 4 | 0, $4 + 16 | 0, $4 + 8 | 0, $4 + 24 | 0, $4 + 20 | 0, $4, $4 + 12 | 0, $12);
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $7 = $9 + 8 | 0;
     HEAP32[$7 >> 2] = 0;
     HEAP32[$7 + 4 >> 2] = 0;
     $7 = $9 + 16 | 0;
     HEAP32[$7 >> 2] = 0;
     HEAP32[$7 + 4 >> 2] = 0;
     $3 = HEAP32[$4 >> 2];
     HEAP32[$9 + 24 >> 2] = $3;
     HEAP32[$9 + 28 >> 2] = HEAP32[$4 + 4 >> 2];
     $5 = HEAP32[$4 + 12 >> 2] + -2 | 0;
     label$4 : {
      if ($5 >>> 0 > 3) {
       break label$4
      }
      label$5 : {
       switch ($5 - 1 | 0) {
       default:
        if (!$3) {
         break label$4
        }
        $10 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 4, Math_imul($3, 3)) | 0;
        $3 = HEAP32[$10 + 8 >> 2];
        (wasm2js_i32$0 = $9, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $3) | 0), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
        if (HEAP32[$4 >> 2] >= 1) {
         $5 = 0;
         $8 = HEAP32[$4 + 24 >> 2];
         while (1) {
          $6 = Math_imul($5, HEAP32[$4 + 20 >> 2]) + $8 | 0;
          HEAP32[$3 >> 2] = HEAP32[$6 >> 2];
          HEAP32[$3 + 4 >> 2] = HEAP32[$6 + 4 >> 2];
          HEAP32[$3 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
          $3 = $3 + 12 | 0;
          $5 = $5 + 1 | 0;
          if (($5 | 0) < HEAP32[$4 >> 2]) {
           continue
          }
          break;
         };
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $10, 14373, 1497453121, HEAP32[$10 + 8 >> 2]);
        break label$4;
       case 0:
        if (!$3) {
         break label$4
        }
        $8 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 8, $3) | 0;
        $3 = HEAP32[$8 + 8 >> 2];
        (wasm2js_i32$0 = $9, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $3) | 0), HEAP32[wasm2js_i32$0 + 12 >> 2] = wasm2js_i32$1;
        if (HEAP32[$4 >> 2] >= 1) {
         $5 = 0;
         while (1) {
          $6 = HEAP32[$4 + 24 >> 2] + Math_imul($5, HEAP32[$4 + 20 >> 2]) | 0;
          HEAP16[$3 >> 1] = HEAPU16[$6 >> 1];
          HEAP16[$3 + 2 >> 1] = HEAPU16[$6 + 2 >> 1];
          $6 = HEAPU16[$6 + 4 >> 1];
          HEAP16[$3 + 6 >> 1] = 0;
          HEAP16[$3 + 4 >> 1] = $6;
          $3 = $3 + 8 | 0;
          $5 = $5 + 1 | 0;
          if (($5 | 0) < HEAP32[$4 >> 2]) {
           continue
          }
          break;
         };
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $8, 14388, 1497453121, HEAP32[$8 + 8 >> 2]);
        break label$4;
       case 1:
        break label$4;
       case 2:
        break label$5;
       };
      }
      if (!$3) {
       break label$4
      }
      $8 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 4, $3) | 0;
      $3 = HEAP32[$8 + 8 >> 2];
      (wasm2js_i32$0 = $9, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $3) | 0), HEAP32[wasm2js_i32$0 + 16 >> 2] = wasm2js_i32$1;
      if (HEAP32[$4 >> 2] >= 1) {
       $5 = 0;
       while (1) {
        $6 = HEAP32[$4 + 24 >> 2] + Math_imul($5, HEAP32[$4 + 20 >> 2]) | 0;
        HEAP8[$3 | 0] = HEAPU8[$6 | 0];
        HEAP8[$3 + 1 | 0] = HEAPU8[$6 + 1 | 0];
        HEAP8[$3 + 2 | 0] = HEAPU8[$6 + 2 | 0];
        HEAP8[$3 + 3 | 0] = 0;
        $3 = $3 + 4 | 0;
        $5 = $5 + 1 | 0;
        if (($5 | 0) < HEAP32[$4 >> 2]) {
         continue
        }
        break;
       };
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $8, 14415, 1497453121, HEAP32[$8 + 8 >> 2]);
     }
     $3 = HEAP32[$4 + 16 >> 2];
     label$14 : {
      if ($3 >>> 0 > 1) {
       break label$14
      }
      if ($3 - 1) {
       $3 = HEAP32[$4 + 4 >> 2];
       if (!$3) {
        break label$14
       }
       $11 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 16, $3) | 0;
       $3 = HEAP32[$11 + 8 >> 2];
       (wasm2js_i32$0 = $9, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $3) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       $8 = HEAP32[$4 + 4 >> 2];
       if (($8 | 0) >= 1) {
        $6 = 0;
        $10 = HEAP32[$4 + 8 >> 2];
        $5 = HEAP32[$4 + 28 >> 2];
        while (1) {
         HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
         HEAP32[$3 + 4 >> 2] = HEAP32[$5 + 4 >> 2];
         HEAP32[$3 + 8 >> 2] = HEAP32[$5 + 8 >> 2];
         $5 = $5 + $10 | 0;
         $3 = $3 + 16 | 0;
         $6 = $6 + 1 | 0;
         if (($6 | 0) < ($8 | 0)) {
          continue
         }
         break;
        };
       }
       FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $11, 14438, 1497453121, HEAP32[$11 + 8 >> 2]);
       break label$14;
      }
      $3 = HEAP32[$4 + 4 >> 2];
      if (!$3) {
       break label$14
      }
      $11 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, 32, $3) | 0;
      $3 = HEAP32[$11 + 8 >> 2];
      (wasm2js_i32$0 = $9, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $3) | 0), HEAP32[wasm2js_i32$0 + 4 >> 2] = wasm2js_i32$1;
      $8 = HEAP32[$4 + 4 >> 2];
      if (($8 | 0) >= 1) {
       $6 = 0;
       $10 = HEAP32[$4 + 8 >> 2];
       $5 = HEAP32[$4 + 28 >> 2];
       while (1) {
        $7 = HEAP32[$5 + 4 >> 2];
        HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
        HEAP32[$3 + 4 >> 2] = $7;
        $7 = $5 + 8 | 0;
        $15 = HEAP32[$7 >> 2];
        $13 = HEAP32[$7 + 4 >> 2];
        $7 = $3 + 8 | 0;
        HEAP32[$7 >> 2] = $15;
        HEAP32[$7 + 4 >> 2] = $13;
        $7 = $5 + 16 | 0;
        $15 = HEAP32[$7 >> 2];
        $7 = HEAP32[$7 + 4 >> 2];
        $13 = $3 + 16 | 0;
        HEAP32[$13 >> 2] = $15;
        HEAP32[$13 + 4 >> 2] = $7;
        $5 = $5 + $10 | 0;
        $3 = $3 + 32 | 0;
        $6 = $6 + 1 | 0;
        if (($6 | 0) < ($8 | 0)) {
         continue
        }
        break;
       };
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $11, 14457, 1497453121, HEAP32[$11 + 8 >> 2]);
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $12);
     $9 = $9 + 32 | 0;
     $12 = $12 + 1 | 0;
     if (($16 | 0) != ($12 | 0)) {
      continue
     }
     break;
    }
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, $14, 14477, 1497453121, HEAP32[$14 + 8 >> 2]);
  }
  HEAP32[$1 + 24 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$1 + 8 >> 2] = HEAP32[$0 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
  global$0 = $4 + 32 | 0;
  return 14492;
 }
 
 function btTriangleIndexVertexArray___btTriangleIndexVertexArray_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 14564;
  $1 = HEAP32[$0 + 32 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 36 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 32 >> 2] = 0;
  }
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP8[$0 + 36 | 0] = 1;
  return $0 | 0;
 }
 
 function btTriangleIndexVertexArray___btTriangleIndexVertexArray_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 14564;
  $1 = HEAP32[$0 + 32 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 36 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 32 >> 2] = 0;
  }
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP8[$0 + 36 | 0] = 1;
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btTriangleIndexVertexArray__getLockedVertexIndexBase_28unsigned_20char___2c_20int__2c_20PHY_ScalarType__2c_20int__2c_20unsigned_20char___2c_20int__2c_20int__2c_20PHY_ScalarType__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $0 = HEAP32[$0 + 32 >> 2] + ($9 << 5) | 0;
  HEAP32[$2 >> 2] = HEAP32[$0 + 12 >> 2];
  HEAP32[$4 >> 2] = HEAP32[$0 + 20 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$0 + 28 >> 2];
  HEAP32[$7 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$5 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$0 + 24 >> 2];
  HEAP32[$6 >> 2] = HEAP32[$0 + 8 >> 2];
 }
 
 function btTriangleIndexVertexArray__hasPremadeAabb_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 48 >> 2] == 1 | 0;
 }
 
 function btTriangleIndexVertexArray__setPremadeAabb_28btVector3_20const__2c_20btVector3_20const__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 52 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 56 >> 2] = $3;
  $1 = $1 + 8 | 0;
  $4 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 60 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $1;
  $1 = $2;
  $2 = HEAP32[$1 >> 2];
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 68 >> 2] = $2;
  HEAP32[$0 + 72 >> 2] = $3;
  $1 = $1 + 8 | 0;
  $2 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 76 | 0;
  HEAP32[$3 >> 2] = $2;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$0 + 48 >> 2] = 1;
 }
 
 function btTriangleIndexVertexArray__getPremadeAabb_28btVector3__2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = HEAP32[$0 + 56 >> 2];
  $3 = $1;
  HEAP32[$3 >> 2] = HEAP32[$0 + 52 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $1 = $0 + 60 | 0;
  $5 = HEAP32[$1 >> 2];
  $4 = $3 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $1 = $0 + 76 | 0;
  $5 = HEAP32[$1 >> 2];
  $4 = HEAP32[$1 + 4 >> 2];
  $3 = $2 + 8 | 0;
  HEAP32[$3 >> 2] = $5;
  HEAP32[$3 + 4 >> 2] = $4;
  $3 = HEAP32[$0 + 72 >> 2];
  $4 = $2;
  HEAP32[$4 >> 2] = HEAP32[$0 + 68 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
 }
 
 function btTriangleIndexVertexArray__preallocateVertices_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
 }
 
 function btTriangleMesh__btTriangleMesh_28bool_2c_20bool_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  HEAP32[$0 + 4 >> 2] = 1065353216;
  HEAP32[$0 + 8 >> 2] = 1065353216;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 >> 2] = 14676;
  HEAP8[$0 + 36 | 0] = 1;
  $1 = $0 + 12 | 0;
  HEAP32[$1 >> 2] = 1065353216;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  $4 = $0 + 24 | 0;
  $1 = $4;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 100 | 0] = 1;
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP8[$0 + 120 | 0] = 1;
  $1 = $0 + 88 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 116 >> 2] = 0;
  HEAP8[$0 + 140 | 0] = 1;
  $1 = $0 + 108 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP8[$0 + 160 | 0] = 1;
  $1 = $0 + 128 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 168 >> 2] = 0;
  HEAP8[$0 + 164 | 0] = 1;
  $1 = $0 + 148 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 156 >> 2] = 0;
  HEAP8[$0 + 165 | 0] = 1;
  $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(32);
  $4 = HEAP32[$4 >> 2];
  if (($4 | 0) >= 1) {
   while (1) {
    $5 = $2 + HEAP32[$0 + 32 >> 2] | 0;
    $1 = $5;
    $7 = HEAP32[$1 >> 2];
    $1 = HEAP32[$1 + 4 >> 2];
    $3 = $2 + $8 | 0;
    HEAP32[$3 >> 2] = $7;
    HEAP32[$3 + 4 >> 2] = $1;
    $1 = $5 + 24 | 0;
    $7 = HEAP32[$1 >> 2];
    $6 = HEAP32[$1 + 4 >> 2];
    $1 = $3 + 24 | 0;
    HEAP32[$1 >> 2] = $7;
    HEAP32[$1 + 4 >> 2] = $6;
    $1 = $5 + 16 | 0;
    $7 = HEAP32[$1 >> 2];
    $1 = HEAP32[$1 + 4 >> 2];
    $6 = $3 + 16 | 0;
    HEAP32[$6 >> 2] = $7;
    HEAP32[$6 + 4 >> 2] = $1;
    $1 = $5 + 8 | 0;
    $5 = HEAP32[$1 >> 2];
    $6 = HEAP32[$1 + 4 >> 2];
    $1 = $3 + 8 | 0;
    HEAP32[$1 >> 2] = $5;
    HEAP32[$1 + 4 >> 2] = $6;
    $2 = $2 + 32 | 0;
    $4 = $4 + -1 | 0;
    if ($4) {
     continue
    }
    break;
   }
  }
  $2 = HEAP32[$0 + 32 >> 2];
  if ($2) {
   if (HEAPU8[$0 + 36 | 0]) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$0 + 32 >> 2] = 0;
  }
  HEAP32[$0 + 32 >> 2] = $8;
  HEAP8[$0 + 36 | 0] = 1;
  HEAP32[$0 + 28 >> 2] = 1;
  $2 = (HEAP32[$0 + 24 >> 2] << 5) + $8 | 0;
  $1 = $2;
  HEAP32[$1 + 24 >> 2] = 2;
  HEAP32[$1 + 28 >> 2] = 0;
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = 16;
  HEAP32[$1 + 8 >> 2] = 12;
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = HEAP32[$0 + 24 >> 2] + 1;
  $2 = HEAP32[$0 + 32 >> 2];
  HEAP32[$2 + 4 >> 2] = 0;
  $3 = HEAPU8[$0 + 164 | 0];
  HEAP32[$2 + 24 >> 2] = $3 ? 2 : 3;
  $4 = HEAP32[($3 ? 128 : 148) + $0 >> 2];
  $5 = 12;
  HEAP32[$2 + 8 >> 2] = $3 ? 12 : 6;
  HEAP32[$2 >> 2] = ($4 | 0) / 3;
  label$5 : {
   if (HEAPU8[$0 + 165 | 0]) {
    $5 = 16;
    $3 = HEAP32[$0 + 88 >> 2];
    break label$5;
   }
   $3 = HEAP32[$0 + 108 >> 2] / 3 | 0;
  }
  HEAP32[$2 + 20 >> 2] = $5;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = $3;
 }
 
 function btTriangleMesh__addIndex_28int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if (HEAPU8[$0 + 164 | 0]) {
   $2 = HEAP32[$0 + 128 >> 2];
   label$2 : {
    if (($2 | 0) != HEAP32[$0 + 132 >> 2]) {
     break label$2
    }
    $3 = $2 ? $2 << 1 : 1;
    if (($2 | 0) >= ($3 | 0)) {
     break label$2
    }
    label$3 : {
     if (!$3) {
      break label$3
     }
     $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 2);
     $2 = HEAP32[$0 + 128 >> 2];
    }
    $7 = HEAP32[$0 + 136 >> 2];
    label$5 : {
     label$6 : {
      if (($2 | 0) >= 1) {
       $4 = $5;
       $6 = $7;
       while (1) {
        HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
        $4 = $4 + 4 | 0;
        $6 = $6 + 4 | 0;
        $2 = $2 + -1 | 0;
        if ($2) {
         continue
        }
        break;
       };
       break label$6;
      }
      if (!$7) {
       break label$5
      }
     }
     if (HEAPU8[$0 + 140 | 0]) {
      btAlignedFreeInternal_28void__29($7)
     }
     HEAP32[$0 + 136 >> 2] = 0;
     $2 = HEAP32[$0 + 128 >> 2];
    }
    HEAP32[$0 + 136 >> 2] = $5;
    HEAP32[$0 + 132 >> 2] = $3;
    HEAP8[$0 + 140 | 0] = 1;
   }
   $4 = HEAP32[$0 + 136 >> 2];
   HEAP32[$4 + ($2 << 2) >> 2] = $1;
   HEAP32[HEAP32[$0 + 32 >> 2] + 4 >> 2] = $4;
   HEAP32[$0 + 128 >> 2] = HEAP32[$0 + 128 >> 2] + 1;
   return;
  }
  $3 = HEAP32[$0 + 148 >> 2];
  label$10 : {
   if (($3 | 0) != HEAP32[$0 + 152 >> 2]) {
    break label$10
   }
   $5 = $3 ? $3 << 1 : 1;
   if (($3 | 0) >= ($5 | 0)) {
    break label$10
   }
   label$11 : {
    if (!$5) {
     break label$11
    }
    $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 1);
    $3 = HEAP32[$0 + 148 >> 2];
   }
   $8 = HEAP32[$0 + 156 >> 2];
   label$13 : {
    label$14 : {
     if (($3 | 0) >= 1) {
      $4 = $7;
      $6 = $8;
      $2 = $3;
      while (1) {
       HEAP16[$4 >> 1] = HEAPU16[$6 >> 1];
       $4 = $4 + 2 | 0;
       $6 = $6 + 2 | 0;
       $2 = $2 + -1 | 0;
       if ($2) {
        continue
       }
       break;
      };
      break label$14;
     }
     if (!$8) {
      break label$13
     }
    }
    if (HEAPU8[$0 + 160 | 0]) {
     btAlignedFreeInternal_28void__29($8);
     $3 = HEAP32[$0 + 148 >> 2];
    }
    HEAP32[$0 + 156 >> 2] = 0;
   }
   HEAP32[$0 + 156 >> 2] = $7;
   HEAP32[$0 + 152 >> 2] = $5;
   HEAP8[$0 + 160 | 0] = 1;
  }
  HEAP32[$0 + 148 >> 2] = $3 + 1;
  $4 = HEAP32[$0 + 156 >> 2];
  HEAP32[HEAP32[$0 + 32 >> 2] + 4 >> 2] = $4;
  HEAP16[($3 << 1) + $4 >> 1] = $1;
 }
 
 function btTriangleMesh__findOrAddVertex_28btVector3_20const__2c_20bool_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
  label$1 : {
   if (HEAPU8[$0 + 165 | 0]) {
    $6 = HEAP32[$0 + 88 >> 2];
    label$3 : {
     if (($6 | 0) < 1) {
      break label$3
     }
     if (!$2) {
      break label$3
     }
     $2 = HEAP32[$0 + 96 >> 2];
     $12 = HEAPF32[$0 + 168 >> 2];
     $13 = HEAPF32[$1 + 8 >> 2];
     $14 = HEAPF32[$1 + 4 >> 2];
     $15 = HEAPF32[$1 >> 2];
     while (1) {
      $9 = Math_fround(HEAPF32[$2 >> 2] - $15);
      $11 = Math_fround($9 * $9);
      $9 = Math_fround(HEAPF32[$2 + 4 >> 2] - $14);
      $11 = Math_fround($11 + Math_fround($9 * $9));
      $9 = Math_fround(HEAPF32[$2 + 8 >> 2] - $13);
      if (Math_fround($11 + Math_fround($9 * $9)) <= $12) {
       break label$1
      }
      $2 = $2 + 16 | 0;
      $4 = $4 + 1 | 0;
      if (($4 | 0) < ($6 | 0)) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$0 + 32 >> 2];
    HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
    label$5 : {
     if (HEAP32[$0 + 92 >> 2] != ($6 | 0)) {
      break label$5
     }
     $8 = $6 ? $6 << 1 : 1;
     if (($6 | 0) >= ($8 | 0)) {
      break label$5
     }
     label$6 : {
      if (!$8) {
       break label$6
      }
      $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 4);
      $6 = HEAP32[$0 + 88 >> 2];
     }
     if (($6 | 0) >= 1) {
      $2 = 0;
      while (1) {
       $3 = $2 + HEAP32[$0 + 96 >> 2] | 0;
       $10 = HEAP32[$3 + 4 >> 2];
       $4 = $2 + $5 | 0;
       HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$4 + 4 >> 2] = $10;
       $7 = $3 + 8 | 0;
       $3 = HEAP32[$7 >> 2];
       $7 = HEAP32[$7 + 4 >> 2];
       $10 = $4 + 8 | 0;
       HEAP32[$10 >> 2] = $3;
       HEAP32[$10 + 4 >> 2] = $7;
       $2 = $2 + 16 | 0;
       $6 = $6 + -1 | 0;
       if ($6) {
        continue
       }
       break;
      };
     }
     $2 = HEAP32[$0 + 96 >> 2];
     if ($2) {
      if (HEAPU8[$0 + 100 | 0]) {
       btAlignedFreeInternal_28void__29($2)
      }
      HEAP32[$0 + 96 >> 2] = 0;
     }
     HEAP32[$0 + 96 >> 2] = $5;
     HEAP32[$0 + 92 >> 2] = $8;
     HEAP8[$0 + 100 | 0] = 1;
     $6 = HEAP32[$0 + 88 >> 2];
    }
    $10 = HEAP32[$1 + 4 >> 2];
    $2 = $0 + 96 | 0;
    $4 = HEAP32[$2 >> 2] + ($6 << 4) | 0;
    HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$4 + 4 >> 2] = $10;
    $7 = $1 + 8 | 0;
    $1 = HEAP32[$7 >> 2];
    $7 = HEAP32[$7 + 4 >> 2];
    $10 = $4 + 8 | 0;
    HEAP32[$10 >> 2] = $1;
    HEAP32[$10 + 4 >> 2] = $7;
    HEAP32[HEAP32[$0 + 32 >> 2] + 16 >> 2] = HEAP32[$2 >> 2];
    $2 = HEAP32[$0 + 88 >> 2];
    HEAP32[$0 + 88 >> 2] = $2 + 1;
    return $2;
   }
   $3 = HEAP32[$0 + 108 >> 2];
   label$12 : {
    if (($3 | 0) < 1) {
     break label$12
    }
    if (!$2) {
     break label$12
    }
    $2 = HEAP32[$0 + 116 >> 2];
    $12 = HEAPF32[$0 + 168 >> 2];
    $13 = HEAPF32[$1 + 8 >> 2];
    $14 = HEAPF32[$1 + 4 >> 2];
    $15 = HEAPF32[$1 >> 2];
    while (1) {
     $9 = Math_fround(HEAPF32[$2 >> 2] - $15);
     $11 = Math_fround($9 * $9);
     $9 = Math_fround(HEAPF32[$2 + 4 >> 2] - $14);
     $11 = Math_fround($11 + Math_fround($9 * $9));
     $9 = Math_fround(HEAPF32[$2 + 8 >> 2] - $13);
     if (!!(Math_fround($11 + Math_fround($9 * $9)) <= $12)) {
      break label$1
     }
     $2 = $2 + 12 | 0;
     $4 = $4 + 1 | 0;
     $6 = $6 + 3 | 0;
     if (($6 | 0) < ($3 | 0)) {
      continue
     }
     break;
    };
   }
   $5 = HEAP32[$0 + 112 >> 2];
   label$14 : {
    if (($5 | 0) != ($3 | 0)) {
     break label$14
    }
    $5 = $3 ? $3 << 1 : 1;
    if (($3 | 0) >= ($5 | 0)) {
     $5 = $3;
     break label$14;
    }
    label$16 : {
     if (!$5) {
      break label$16
     }
     $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2);
     $3 = HEAP32[$0 + 108 >> 2];
    }
    $7 = HEAP32[$0 + 116 >> 2];
    label$18 : {
     label$19 : {
      if (($3 | 0) >= 1) {
       $2 = $8;
       $4 = $7;
       $6 = $3;
       while (1) {
        HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
        $2 = $2 + 4 | 0;
        $4 = $4 + 4 | 0;
        $6 = $6 + -1 | 0;
        if ($6) {
         continue
        }
        break;
       };
       break label$19;
      }
      if (!$7) {
       break label$18
      }
     }
     if (HEAPU8[$0 + 120 | 0]) {
      btAlignedFreeInternal_28void__29($7);
      $3 = HEAP32[$0 + 108 >> 2];
     }
     HEAP32[$0 + 116 >> 2] = 0;
    }
    HEAP32[$0 + 116 >> 2] = $8;
    HEAP32[$0 + 112 >> 2] = $5;
    HEAP8[$0 + 120 | 0] = 1;
   }
   $2 = $3 + 1 | 0;
   HEAP32[$0 + 108 >> 2] = $2;
   $7 = HEAP32[$0 + 116 >> 2];
   HEAP32[$7 + ($3 << 2) >> 2] = HEAP32[$1 >> 2];
   label$23 : {
    if (($2 | 0) != ($5 | 0)) {
     $8 = $7;
     $3 = $5;
     $5 = $2;
     break label$23;
    }
    $3 = $5 ? $5 << 1 : 1;
    if (($5 | 0) >= ($3 | 0)) {
     $8 = $7;
     $3 = $5;
     break label$23;
    }
    label$26 : {
     if (!$3) {
      $8 = 0;
      break label$26;
     }
     $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 2);
     $7 = HEAP32[$0 + 116 >> 2];
     $5 = HEAP32[$0 + 108 >> 2];
    }
    label$28 : {
     label$29 : {
      if (($5 | 0) >= 1) {
       $2 = $8;
       $4 = $7;
       $6 = $5;
       while (1) {
        HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
        $2 = $2 + 4 | 0;
        $4 = $4 + 4 | 0;
        $6 = $6 + -1 | 0;
        if ($6) {
         continue
        }
        break;
       };
       break label$29;
      }
      if (!$7) {
       break label$28
      }
     }
     if (HEAPU8[$0 + 120 | 0]) {
      btAlignedFreeInternal_28void__29($7);
      $5 = HEAP32[$0 + 108 >> 2];
     }
     HEAP32[$0 + 116 >> 2] = 0;
    }
    HEAP32[$0 + 116 >> 2] = $8;
    HEAP32[$0 + 112 >> 2] = $3;
    HEAP8[$0 + 120 | 0] = 1;
   }
   $2 = $5 + 1 | 0;
   HEAP32[$0 + 108 >> 2] = $2;
   HEAP32[($5 << 2) + $8 >> 2] = HEAP32[$1 + 4 >> 2];
   label$33 : {
    if (($2 | 0) != ($3 | 0)) {
     $5 = $8;
     $3 = $2;
     break label$33;
    }
    $7 = $3 ? $3 << 1 : 1;
    if (($3 | 0) >= ($7 | 0)) {
     $5 = $8;
     break label$33;
    }
    label$36 : {
     if (!$7) {
      $5 = 0;
      break label$36;
     }
     $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 2);
     $8 = HEAP32[$0 + 116 >> 2];
     $3 = HEAP32[$0 + 108 >> 2];
    }
    label$38 : {
     label$39 : {
      if (($3 | 0) >= 1) {
       $2 = $5;
       $4 = $8;
       $6 = $3;
       while (1) {
        HEAP32[$2 >> 2] = HEAP32[$4 >> 2];
        $2 = $2 + 4 | 0;
        $4 = $4 + 4 | 0;
        $6 = $6 + -1 | 0;
        if ($6) {
         continue
        }
        break;
       };
       break label$39;
      }
      if (!$8) {
       break label$38
      }
     }
     if (HEAPU8[$0 + 120 | 0]) {
      btAlignedFreeInternal_28void__29($8);
      $3 = HEAP32[$0 + 108 >> 2];
     }
     HEAP32[$0 + 116 >> 2] = 0;
    }
    HEAP32[$0 + 116 >> 2] = $5;
    HEAP32[$0 + 112 >> 2] = $7;
    HEAP8[$0 + 120 | 0] = 1;
   }
   $4 = $3 + 1 | 0;
   HEAP32[$0 + 108 >> 2] = $4;
   HEAP32[($3 << 2) + $5 >> 2] = HEAP32[$1 + 8 >> 2];
   $2 = HEAP32[$0 + 32 >> 2];
   HEAP32[$2 + 16 >> 2] = $5;
   HEAP32[$2 + 12 >> 2] = HEAP32[$2 + 12 >> 2] + 1;
   $4 = (($4 | 0) / 3 | 0) + -1 | 0;
  }
  return $4;
 }
 
 function btTriangleMesh__addTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20bool_29($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = HEAP32[$0 + 32 >> 2];
  HEAP32[$5 >> 2] = HEAP32[$5 >> 2] + 1;
  btTriangleMesh__addIndex_28int_29($0, btTriangleMesh__findOrAddVertex_28btVector3_20const__2c_20bool_29($0, $1, $4));
  btTriangleMesh__addIndex_28int_29($0, btTriangleMesh__findOrAddVertex_28btVector3_20const__2c_20bool_29($0, $2, $4));
  btTriangleMesh__addIndex_28int_29($0, btTriangleMesh__findOrAddVertex_28btVector3_20const__2c_20bool_29($0, $3, $4));
 }
 
 function btTriangleMesh__preallocateVertices_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  label$1 : {
   if (HEAPU8[$0 + 165 | 0]) {
    if (HEAP32[$0 + 92 >> 2] >= ($1 | 0)) {
     break label$1
    }
    if ($1) {
     $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 4)
    } else {
     $6 = 0
    }
    $5 = HEAP32[$0 + 88 >> 2];
    if (($5 | 0) >= 1) {
     while (1) {
      $3 = $2 + HEAP32[$0 + 96 >> 2] | 0;
      $7 = HEAP32[$3 + 4 >> 2];
      $4 = $2 + $6 | 0;
      HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$4 + 4 >> 2] = $7;
      $8 = $3 + 8 | 0;
      $3 = HEAP32[$8 >> 2];
      $8 = HEAP32[$8 + 4 >> 2];
      $7 = $4 + 8 | 0;
      HEAP32[$7 >> 2] = $3;
      HEAP32[$7 + 4 >> 2] = $8;
      $2 = $2 + 16 | 0;
      $5 = $5 + -1 | 0;
      if ($5) {
       continue
      }
      break;
     }
    }
    $2 = HEAP32[$0 + 96 >> 2];
    if ($2) {
     if (HEAPU8[$0 + 100 | 0]) {
      btAlignedFreeInternal_28void__29($2)
     }
     HEAP32[$0 + 96 >> 2] = 0;
    }
    HEAP32[$0 + 96 >> 2] = $6;
    HEAP32[$0 + 92 >> 2] = $1;
    HEAP8[$0 + 100 | 0] = 1;
    return;
   }
   if (HEAP32[$0 + 112 >> 2] >= ($1 | 0)) {
    break label$1
   }
   if ($1) {
    $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 2)
   } else {
    $3 = 0
   }
   $6 = HEAP32[$0 + 116 >> 2];
   $4 = HEAP32[$0 + 108 >> 2];
   label$11 : {
    label$12 : {
     if (($4 | 0) >= 1) {
      $2 = $3;
      $5 = $6;
      while (1) {
       HEAP32[$2 >> 2] = HEAP32[$5 >> 2];
       $2 = $2 + 4 | 0;
       $5 = $5 + 4 | 0;
       $4 = $4 + -1 | 0;
       if ($4) {
        continue
       }
       break;
      };
      break label$12;
     }
     if (!$6) {
      break label$11
     }
    }
    if (HEAPU8[$0 + 120 | 0]) {
     btAlignedFreeInternal_28void__29($6)
    }
    HEAP32[$0 + 116 >> 2] = 0;
   }
   HEAP32[$0 + 116 >> 2] = $3;
   HEAP32[$0 + 112 >> 2] = $1;
   HEAP8[$0 + 120 | 0] = 1;
  }
 }
 
 function btTriangleMesh__preallocateIndices_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   if (HEAPU8[$0 + 164 | 0]) {
    if (HEAP32[$0 + 132 >> 2] >= ($1 | 0)) {
     break label$1
    }
    if ($1) {
     $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 2)
    } else {
     $3 = 0
    }
    $4 = HEAP32[$0 + 136 >> 2];
    $2 = HEAP32[$0 + 128 >> 2];
    label$5 : {
     label$6 : {
      if (($2 | 0) >= 1) {
       $5 = $3;
       $6 = $4;
       while (1) {
        HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
        $5 = $5 + 4 | 0;
        $6 = $6 + 4 | 0;
        $2 = $2 + -1 | 0;
        if ($2) {
         continue
        }
        break;
       };
       break label$6;
      }
      if (!$4) {
       break label$5
      }
     }
     if (HEAPU8[$0 + 140 | 0]) {
      btAlignedFreeInternal_28void__29($4)
     }
     HEAP32[$0 + 136 >> 2] = 0;
    }
    HEAP32[$0 + 136 >> 2] = $3;
    HEAP32[$0 + 132 >> 2] = $1;
    HEAP8[$0 + 140 | 0] = 1;
    return;
   }
   if (HEAP32[$0 + 152 >> 2] >= ($1 | 0)) {
    break label$1
   }
   if ($1) {
    $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 1)
   } else {
    $3 = 0
   }
   $4 = HEAP32[$0 + 156 >> 2];
   $2 = HEAP32[$0 + 148 >> 2];
   label$12 : {
    label$13 : {
     if (($2 | 0) >= 1) {
      $5 = $3;
      $6 = $4;
      while (1) {
       HEAP16[$5 >> 1] = HEAPU16[$6 >> 1];
       $5 = $5 + 2 | 0;
       $6 = $6 + 2 | 0;
       $2 = $2 + -1 | 0;
       if ($2) {
        continue
       }
       break;
      };
      break label$13;
     }
     if (!$4) {
      break label$12
     }
    }
    if (HEAPU8[$0 + 160 | 0]) {
     btAlignedFreeInternal_28void__29($4)
    }
    HEAP32[$0 + 156 >> 2] = 0;
   }
   HEAP32[$0 + 156 >> 2] = $3;
   HEAP32[$0 + 152 >> 2] = $1;
   HEAP8[$0 + 160 | 0] = 1;
  }
 }
 
 function btTriangleMesh___btTriangleMesh_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 14676;
  $1 = HEAP32[$0 + 156 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 160 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 156 >> 2] = 0;
  }
  HEAP32[$0 + 156 >> 2] = 0;
  HEAP32[$0 + 148 >> 2] = 0;
  HEAP32[$0 + 152 >> 2] = 0;
  HEAP8[$0 + 160 | 0] = 1;
  $1 = HEAP32[$0 + 136 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 140 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 136 >> 2] = 0;
  }
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP8[$0 + 140 | 0] = 1;
  $1 = HEAP32[$0 + 116 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 120 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 116 >> 2] = 0;
  }
  HEAP32[$0 + 116 >> 2] = 0;
  HEAP32[$0 + 108 >> 2] = 0;
  HEAP32[$0 + 112 >> 2] = 0;
  HEAP8[$0 + 120 | 0] = 1;
  $1 = HEAP32[$0 + 96 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 100 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 96 >> 2] = 0;
  }
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  HEAP8[$0 + 100 | 0] = 1;
  btTriangleIndexVertexArray___btTriangleIndexVertexArray_28_29($0);
  return $0 | 0;
 }
 
 function btTriangleMesh___btTriangleMesh_28_29_1($0) {
  $0 = $0 | 0;
  btAlignedFreeInternal_28void__29(btTriangleMesh___btTriangleMesh_28_29($0));
 }
 
 function btTriangleIndexVertexArray__getNumSubParts_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 24 >> 2];
 }
 
 function btStridingMeshInterface__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 28;
 }
 
 function btGjkEpaSolver2__Distance_28btConvexShape_20const__2c_20btTransform_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btGjkEpaSolver2__sResults__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = Math_fround(0), $33 = Math_fround(0);
  $6 = global$0 - 544 | 0;
  global$0 = $6;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$5 + 32 >> 2] = 0;
  $12 = $5 + 24 | 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$12 + 4 >> 2] = 0;
  $12 = $5 + 16 | 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$12 + 4 >> 2] = 0;
  $12 = $5 + 8 | 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$12 + 4 >> 2] = 0;
  HEAP32[$6 + 388 >> 2] = $2;
  HEAP32[$6 + 384 >> 2] = $0;
  $10 = HEAPF32[$3 + 20 >> 2];
  $7 = HEAPF32[$3 + 36 >> 2];
  $0 = $1 + 20 | 0;
  $8 = HEAPF32[$0 >> 2];
  $2 = $1 + 36 | 0;
  $9 = HEAPF32[$2 >> 2];
  $12 = $1 + 24 | 0;
  $15 = HEAPF32[$12 >> 2];
  $13 = HEAPF32[$3 + 24 >> 2];
  $31 = $1 + 40 | 0;
  $16 = HEAPF32[$31 >> 2];
  $14 = HEAPF32[$3 + 40 >> 2];
  $17 = HEAPF32[$3 + 32 >> 2];
  $18 = HEAPF32[$3 >> 2];
  $19 = HEAPF32[$3 + 16 >> 2];
  $20 = HEAPF32[$3 + 4 >> 2];
  $21 = HEAPF32[$1 + 32 >> 2];
  $23 = HEAPF32[$1 >> 2];
  $24 = HEAPF32[$1 + 16 >> 2];
  $25 = HEAPF32[$1 + 4 >> 2];
  $26 = HEAPF32[$1 + 8 >> 2];
  $22 = HEAPF32[$3 + 8 >> 2];
  HEAP32[$6 + 436 >> 2] = 0;
  HEAP32[$6 + 420 >> 2] = 0;
  HEAP32[$6 + 404 >> 2] = 0;
  $27 = Math_fround(Math_fround(Math_fround($26 * $22) + Math_fround($15 * $13)) + Math_fround($16 * $14));
  HEAPF32[$6 + 432 >> 2] = $27;
  $28 = Math_fround(Math_fround(Math_fround($25 * $22) + Math_fround($8 * $13)) + Math_fround($9 * $14));
  HEAPF32[$6 + 428 >> 2] = $28;
  $13 = Math_fround(Math_fround(Math_fround($23 * $22) + Math_fround($24 * $13)) + Math_fround($21 * $14));
  HEAPF32[$6 + 424 >> 2] = $13;
  $14 = Math_fround(Math_fround(Math_fround($26 * $20) + Math_fround($15 * $10)) + Math_fround($16 * $7));
  HEAPF32[$6 + 416 >> 2] = $14;
  $22 = Math_fround(Math_fround(Math_fround($25 * $20) + Math_fround($8 * $10)) + Math_fround($9 * $7));
  HEAPF32[$6 + 412 >> 2] = $22;
  $10 = Math_fround(Math_fround(Math_fround($23 * $20) + Math_fround($24 * $10)) + Math_fround($21 * $7));
  HEAPF32[$6 + 408 >> 2] = $10;
  $7 = Math_fround(Math_fround(Math_fround($18 * $26) + Math_fround($19 * $15)) + Math_fround($17 * $16));
  HEAPF32[$6 + 400 >> 2] = $7;
  $8 = Math_fround(Math_fround(Math_fround($18 * $25) + Math_fround($19 * $8)) + Math_fround($17 * $9));
  HEAPF32[$6 + 396 >> 2] = $8;
  $9 = Math_fround(Math_fround(Math_fround($18 * $23) + Math_fround($19 * $24)) + Math_fround($17 * $21));
  HEAPF32[$6 + 392 >> 2] = $9;
  $15 = HEAPF32[$0 >> 2];
  $16 = HEAPF32[$2 >> 2];
  $17 = HEAPF32[$12 >> 2];
  $18 = HEAPF32[$3 + 52 >> 2];
  $19 = HEAPF32[$1 + 52 >> 2];
  $20 = HEAPF32[$31 >> 2];
  $21 = HEAPF32[$3 + 56 >> 2];
  $23 = HEAPF32[$1 + 56 >> 2];
  $24 = HEAPF32[$1 >> 2];
  $25 = HEAPF32[$1 + 16 >> 2];
  $26 = HEAPF32[$1 + 32 >> 2];
  $29 = HEAPF32[$1 + 4 >> 2];
  $30 = HEAPF32[$1 + 8 >> 2];
  $32 = HEAPF32[$3 + 48 >> 2];
  $33 = HEAPF32[$1 + 48 >> 2];
  HEAP32[$6 + 508 >> 2] = 0;
  HEAP32[$6 + 500 >> 2] = 0;
  HEAP32[$6 + 484 >> 2] = 0;
  HEAPF32[$6 + 480 >> 2] = $27;
  HEAPF32[$6 + 476 >> 2] = $14;
  HEAPF32[$6 + 472 >> 2] = $7;
  HEAP32[$6 + 468 >> 2] = 0;
  HEAPF32[$6 + 464 >> 2] = $28;
  HEAPF32[$6 + 460 >> 2] = $22;
  HEAPF32[$6 + 456 >> 2] = $8;
  HEAP32[$6 + 452 >> 2] = 0;
  HEAPF32[$6 + 448 >> 2] = $13;
  HEAPF32[$6 + 444 >> 2] = $10;
  $10 = Math_fround($32 - $33);
  $7 = Math_fround($18 - $19);
  $8 = Math_fround($21 - $23);
  HEAPF32[$6 + 496 >> 2] = Math_fround(Math_fround($30 * $10) + Math_fround($17 * $7)) + Math_fround($20 * $8);
  HEAPF32[$6 + 492 >> 2] = Math_fround(Math_fround($10 * $29) + Math_fround($7 * $15)) + Math_fround($8 * $16);
  HEAPF32[$6 + 488 >> 2] = Math_fround(Math_fround($10 * $24) + Math_fround($7 * $25)) + Math_fround($8 * $26);
  HEAP32[$6 + 504 >> 2] = 348;
  HEAPF32[$6 + 440 >> 2] = $9;
  $12 = $6 + 136 | 0;
  HEAP32[$12 >> 2] = 0;
  HEAP32[$12 + 4 >> 2] = 0;
  HEAP32[$6 + 128 >> 2] = 0;
  HEAP32[$6 + 132 >> 2] = 0;
  HEAP32[$6 + 364 >> 2] = 0;
  HEAP32[$6 + 368 >> 2] = 0;
  HEAP32[$6 + 376 >> 2] = 2;
  HEAP32[$6 + 144 >> 2] = 0;
  label$1 : {
   label$2 : {
    $3 = gjkepa2_impl__GJK__Evaluate_28gjkepa2_impl__MinkowskiDiff_20const__2c_20btVector3_20const__29($6, $6 + 384 | 0, $4);
    if (!$3) {
     $11 = HEAP32[$6 + 372 >> 2];
     if (!HEAP32[$11 + 32 >> 2]) {
      $15 = Math_fround(0.0);
      $13 = Math_fround(0.0);
      $16 = Math_fround(0.0);
      $14 = Math_fround(0.0);
      $17 = Math_fround(0.0);
      $18 = Math_fround(0.0);
      break label$2;
     }
     $18 = Math_fround(0.0);
     $3 = 0;
     $0 = 0;
     $17 = Math_fround(0.0);
     $14 = Math_fround(0.0);
     $16 = Math_fround(0.0);
     $13 = Math_fround(0.0);
     $15 = Math_fround(0.0);
     while (1) {
      $11 = $3 + $11 | 0;
      $10 = HEAPF32[$11 + 16 >> 2];
      $12 = HEAP32[$11 >> 2];
      $11 = HEAP32[$6 + 504 >> 2];
      $2 = HEAP32[$6 + 508 >> 2];
      $4 = HEAP32[$6 + 384 >> 2] + ($2 >> 1) | 0;
      FUNCTION_TABLE[$2 & 1 ? HEAP32[$11 + HEAP32[$4 >> 2] >> 2] : $11]($6 + 528 | 0, $4, $12);
      $2 = HEAP32[$6 + 508 >> 2];
      $4 = HEAP32[$6 + 388 >> 2] + ($2 >> 1) | 0;
      $19 = Math_fround($10 * HEAPF32[$6 + 536 >> 2]);
      $20 = Math_fround($10 * HEAPF32[$6 + 532 >> 2]);
      $21 = Math_fround($10 * HEAPF32[$6 + 528 >> 2]);
      $11 = HEAP32[$3 + HEAP32[$6 + 372 >> 2] >> 2];
      $7 = Math_fround(-HEAPF32[$11 + 8 >> 2]);
      $8 = Math_fround(-HEAPF32[$11 + 4 >> 2]);
      $9 = Math_fround(-HEAPF32[$11 >> 2]);
      $11 = HEAP32[$6 + 504 >> 2];
      $11 = $2 & 1 ? HEAP32[$11 + HEAP32[$4 >> 2] >> 2] : $11;
      $18 = Math_fround($18 + $19);
      $17 = Math_fround($17 + $20);
      $14 = Math_fround($14 + $21);
      HEAP32[$6 + 524 >> 2] = 0;
      HEAPF32[$6 + 520 >> 2] = Math_fround(Math_fround(HEAPF32[$6 + 424 >> 2] * $9) + Math_fround(HEAPF32[$6 + 428 >> 2] * $8)) + Math_fround(HEAPF32[$6 + 432 >> 2] * $7);
      HEAPF32[$6 + 516 >> 2] = Math_fround(Math_fround(HEAPF32[$6 + 408 >> 2] * $9) + Math_fround(HEAPF32[$6 + 412 >> 2] * $8)) + Math_fround(HEAPF32[$6 + 416 >> 2] * $7);
      HEAPF32[$6 + 512 >> 2] = Math_fround(Math_fround(HEAPF32[$6 + 392 >> 2] * $9) + Math_fround(HEAPF32[$6 + 396 >> 2] * $8)) + Math_fround(HEAPF32[$6 + 400 >> 2] * $7);
      FUNCTION_TABLE[$11]($6 + 528 | 0, $4, $6 + 512 | 0);
      $7 = HEAPF32[$6 + 528 >> 2];
      $8 = HEAPF32[$6 + 532 >> 2];
      $9 = HEAPF32[$6 + 536 >> 2];
      $16 = Math_fround($16 + Math_fround($10 * Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$6 + 472 >> 2]) + Math_fround($8 * HEAPF32[$6 + 476 >> 2])) + Math_fround($9 * HEAPF32[$6 + 480 >> 2])) + HEAPF32[$6 + 496 >> 2])));
      $13 = Math_fround($13 + Math_fround($10 * Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$6 + 456 >> 2]) + Math_fround($8 * HEAPF32[$6 + 460 >> 2])) + Math_fround($9 * HEAPF32[$6 + 464 >> 2])) + HEAPF32[$6 + 492 >> 2])));
      $15 = Math_fround($15 + Math_fround($10 * Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$6 + 440 >> 2]) + Math_fround($8 * HEAPF32[$6 + 444 >> 2])) + Math_fround($9 * HEAPF32[$6 + 448 >> 2])) + HEAPF32[$6 + 488 >> 2])));
      $3 = $3 + 4 | 0;
      $0 = $0 + 1 | 0;
      $11 = HEAP32[$6 + 372 >> 2];
      if ($0 >>> 0 < HEAPU32[$11 + 32 >> 2]) {
       continue
      }
      break;
     };
     break label$2;
    }
    HEAP32[$5 >> 2] = ($3 | 0) == 1 ? 1 : 2;
    break label$1;
   }
   $10 = HEAPF32[$1 + 48 >> 2];
   $7 = HEAPF32[$1 + 8 >> 2];
   $8 = HEAPF32[$1 >> 2];
   $9 = HEAPF32[$1 + 4 >> 2];
   $19 = HEAPF32[$1 + 52 >> 2];
   $20 = HEAPF32[$1 + 24 >> 2];
   $21 = HEAPF32[$1 + 16 >> 2];
   $23 = HEAPF32[$1 + 20 >> 2];
   $24 = HEAPF32[$1 + 56 >> 2];
   $25 = HEAPF32[$1 + 40 >> 2];
   $26 = HEAPF32[$1 + 32 >> 2];
   $22 = HEAPF32[$1 + 36 >> 2];
   HEAP32[$5 + 16 >> 2] = 0;
   HEAPF32[$5 + 12 >> 2] = $24 + Math_fround(Math_fround(Math_fround($14 * $26) + Math_fround($17 * $22)) + Math_fround($18 * $25));
   HEAPF32[$5 + 8 >> 2] = $19 + Math_fround(Math_fround(Math_fround($14 * $21) + Math_fround($17 * $23)) + Math_fround($18 * $20));
   HEAPF32[$5 + 4 >> 2] = $10 + Math_fround(Math_fround(Math_fround($14 * $8) + Math_fround($17 * $9)) + Math_fround($18 * $7));
   $19 = HEAPF32[$1 + 48 >> 2];
   $20 = HEAPF32[$1 + 8 >> 2];
   $21 = HEAPF32[$1 >> 2];
   $23 = HEAPF32[$1 + 4 >> 2];
   $24 = HEAPF32[$1 + 52 >> 2];
   $25 = HEAPF32[$1 + 24 >> 2];
   $26 = HEAPF32[$1 + 16 >> 2];
   $22 = HEAPF32[$1 + 20 >> 2];
   $27 = HEAPF32[$1 + 56 >> 2];
   $28 = HEAPF32[$1 + 40 >> 2];
   $29 = HEAPF32[$1 + 32 >> 2];
   $30 = HEAPF32[$1 + 36 >> 2];
   $10 = Math_fround($14 - $15);
   $7 = Math_fround($17 - $13);
   $8 = Math_fround($18 - $16);
   $9 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($7 * $7)) + Math_fround($8 * $8))));
   HEAPF32[$5 + 52 >> 2] = $9;
   HEAP32[$5 + 48 >> 2] = 0;
   HEAP32[$5 + 32 >> 2] = 0;
   $9 = $9 > Math_fround(9.999999747378752e-05) ? Math_fround(Math_fround(1.0) / $9) : Math_fround(1.0);
   HEAPF32[$5 + 44 >> 2] = $8 * $9;
   HEAPF32[$5 + 40 >> 2] = $7 * $9;
   HEAPF32[$5 + 36 >> 2] = $10 * $9;
   HEAPF32[$5 + 28 >> 2] = $27 + Math_fround(Math_fround(Math_fround($15 * $29) + Math_fround($13 * $30)) + Math_fround($16 * $28));
   HEAPF32[$5 + 24 >> 2] = $24 + Math_fround(Math_fround(Math_fround($15 * $26) + Math_fround($13 * $22)) + Math_fround($16 * $25));
   HEAPF32[$5 + 20 >> 2] = $19 + Math_fround(Math_fround(Math_fround($15 * $21) + Math_fround($13 * $23)) + Math_fround($16 * $20));
   $11 = 1;
  }
  global$0 = $6 + 544 | 0;
  return $11;
 }
 
 function gjkepa2_impl__GJK__Evaluate_28gjkepa2_impl__MinkowskiDiff_20const__2c_20btVector3_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = 0, $26 = 0, $27 = 0, $28 = 0;
  $5 = global$0 - 96 | 0;
  global$0 = $5;
  HEAP32[$0 + 376 >> 2] = 0;
  HEAP32[$0 + 364 >> 2] = 4;
  HEAP32[$0 + 368 >> 2] = 0;
  $9 = $0 + 316 | 0;
  HEAP32[$0 + 360 >> 2] = $9;
  HEAP32[$0 + 356 >> 2] = $0 + 284;
  HEAP32[$0 + 352 >> 2] = $0 + 252;
  HEAP32[$0 + 348 >> 2] = $0 + 220;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 4 >> 2] = $3;
  $4 = $1 + 16 | 0;
  $11 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 16 | 0;
  HEAP32[$3 >> 2] = $11;
  HEAP32[$3 + 4 >> 2] = $6;
  $3 = HEAP32[$1 + 12 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$0 + 12 >> 2] = $3;
  $4 = $1 + 32 | 0;
  $11 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 32 | 0;
  HEAP32[$3 >> 2] = $11;
  HEAP32[$3 + 4 >> 2] = $6;
  $4 = $1 + 24 | 0;
  $11 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $6 = $0 + 24 | 0;
  HEAP32[$6 >> 2] = $11;
  HEAP32[$6 + 4 >> 2] = $3;
  $4 = $1 + 48 | 0;
  $11 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 48 | 0;
  HEAP32[$3 >> 2] = $11;
  HEAP32[$3 + 4 >> 2] = $6;
  $4 = $1 + 40 | 0;
  $11 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $6 = $0 + 40 | 0;
  HEAP32[$6 >> 2] = $11;
  HEAP32[$6 + 4 >> 2] = $3;
  $4 = $1 - -64 | 0;
  $11 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $3 = $0 - -64 | 0;
  HEAP32[$3 >> 2] = $11;
  HEAP32[$3 + 4 >> 2] = $6;
  $3 = HEAP32[$1 + 60 >> 2];
  HEAP32[$0 + 56 >> 2] = HEAP32[$1 + 56 >> 2];
  HEAP32[$0 + 60 >> 2] = $3;
  $4 = $1 + 80 | 0;
  $11 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 80 | 0;
  HEAP32[$3 >> 2] = $11;
  HEAP32[$3 + 4 >> 2] = $6;
  $4 = $1 + 72 | 0;
  $11 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $6 = $0 + 72 | 0;
  HEAP32[$6 >> 2] = $11;
  HEAP32[$6 + 4 >> 2] = $3;
  $4 = $1 + 96 | 0;
  $11 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 96 | 0;
  HEAP32[$3 >> 2] = $11;
  HEAP32[$3 + 4 >> 2] = $6;
  $4 = $1 + 88 | 0;
  $11 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $6 = $0 + 88 | 0;
  HEAP32[$6 >> 2] = $11;
  HEAP32[$6 + 4 >> 2] = $3;
  $4 = $1 + 104 | 0;
  $11 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 104 | 0;
  HEAP32[$3 >> 2] = $11;
  HEAP32[$3 + 4 >> 2] = $6;
  $4 = $1 + 112 | 0;
  $11 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $6 = $0 + 112 | 0;
  HEAP32[$6 >> 2] = $11;
  HEAP32[$6 + 4 >> 2] = $3;
  $14 = HEAP32[$1 + 120 >> 2];
  $4 = HEAP32[$1 + 124 >> 2];
  HEAP32[$0 + 180 >> 2] = 0;
  HEAP32[$0 + 144 >> 2] = 0;
  HEAP32[$0 + 120 >> 2] = $14;
  HEAP32[$0 + 124 >> 2] = $4;
  $4 = $2 + 8 | 0;
  $11 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $1 = $0 + 136 | 0;
  HEAP32[$1 >> 2] = $11;
  HEAP32[$1 + 4 >> 2] = $3;
  $4 = $2;
  $2 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  HEAP32[$0 + 128 >> 2] = $2;
  HEAP32[$0 + 132 >> 2] = $6;
  $11 = $0 + 128 | 0;
  $8 = HEAPF32[$0 + 128 >> 2];
  $13 = HEAPF32[$0 + 132 >> 2];
  $10 = HEAPF32[$1 >> 2];
  $16 = Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($13 * $13)) + Math_fround($10 * $10));
  label$1 : {
   if (!!($16 > Math_fround(0.0))) {
    HEAPF32[$5 + 40 >> 2] = -$10;
    HEAPF32[$5 + 36 >> 2] = -$13;
    HEAPF32[$5 + 32 >> 2] = -$8;
    break label$1;
   }
   HEAP32[$5 + 40 >> 2] = 0;
   HEAP32[$5 + 32 >> 2] = 1065353216;
   HEAP32[$5 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 364 >> 2] = 3;
  HEAP32[$0 + 180 >> 2] = 1;
  HEAP32[$0 + 148 >> 2] = $9;
  $1 = $0 + 164 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$5 + 44 >> 2] = 0;
  gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $5 + 32 | 0, $9);
  HEAP32[$1 >> 2] = 1065353216;
  $1 = HEAP32[$0 + 148 >> 2];
  $2 = HEAP32[$1 + 16 >> 2];
  $3 = HEAP32[$1 + 20 >> 2];
  $6 = $11;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $3;
  $2 = $1 + 24 | 0;
  $4 = $2;
  $14 = HEAP32[$4 >> 2];
  $25 = $6 + 8 | 0;
  $3 = $25;
  $6 = HEAP32[$4 + 4 >> 2];
  HEAP32[$3 >> 2] = $14;
  HEAP32[$3 + 4 >> 2] = $6;
  $14 = HEAP32[$4 >> 2];
  $2 = $14;
  $3 = HEAP32[$4 + 4 >> 2];
  $4 = $3;
  $6 = $5 + 88 | 0;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $4;
  $6 = $5 + 72 | 0;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $4;
  $6 = $5 + 56 | 0;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $4;
  $2 = HEAP32[$1 + 16 >> 2];
  $3 = $2;
  $6 = HEAP32[$1 + 20 >> 2];
  $1 = $6;
  HEAP32[$5 + 80 >> 2] = $3;
  HEAP32[$5 + 84 >> 2] = $1;
  HEAP32[$5 + 64 >> 2] = $3;
  HEAP32[$5 + 68 >> 2] = $1;
  HEAP32[$5 + 48 >> 2] = $3;
  HEAP32[$5 + 52 >> 2] = $1;
  HEAP32[$5 + 32 >> 2] = $3;
  HEAP32[$5 + 36 >> 2] = $1;
  HEAP32[$5 + 40 >> 2] = $14;
  HEAP32[$5 + 44 >> 2] = $4;
  $28 = $0 + 148 | 0;
  $17 = HEAP32[$0 + 368 >> 2];
  $8 = HEAPF32[$0 + 136 >> 2];
  $10 = HEAPF32[$0 + 132 >> 2];
  $7 = HEAPF32[$0 + 128 >> 2];
  label$3 : {
   label$4 : {
    label$5 : {
     while (1) {
      $19 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($10 * $10)) + Math_fround($8 * $8))));
      if (!!($19 < Math_fround(9.999999747378752e-05))) {
       HEAP32[$0 + 376 >> 2] = 1;
       break label$5;
      }
      $1 = HEAP32[$0 + 364 >> 2] + -1 | 0;
      HEAP32[$0 + 364 >> 2] = $1;
      $20 = Math_imul($17, 36);
      $9 = $20 + $0 | 0;
      $2 = $9 + 180 | 0;
      $18 = HEAP32[$2 >> 2];
      HEAP32[$2 >> 2] = $18 + 1;
      $15 = $9 + 148 | 0;
      $18 = $15 + ($18 << 2) | 0;
      $1 = HEAP32[(($1 << 2) + $0 | 0) + 348 >> 2];
      HEAP32[$18 >> 2] = $1;
      HEAP32[$18 + 16 >> 2] = 0;
      HEAP32[$5 + 28 >> 2] = 0;
      HEAPF32[$5 + 24 >> 2] = -$8;
      HEAPF32[$5 + 20 >> 2] = -$10;
      HEAPF32[$5 + 16 >> 2] = -$7;
      gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $5 + 16 | 0, $1);
      label$8 : {
       $18 = HEAP32[$2 >> 2];
       $1 = HEAP32[($15 + ($18 << 2) | 0) + -4 >> 2];
       $8 = HEAPF32[$1 + 16 >> 2];
       $13 = Math_fround($8 - HEAPF32[$5 + 32 >> 2]);
       $7 = Math_fround($13 * $13);
       $13 = HEAPF32[$1 + 20 >> 2];
       $10 = Math_fround($13 - HEAPF32[$5 + 36 >> 2]);
       $12 = Math_fround($7 + Math_fround($10 * $10));
       $10 = HEAPF32[$1 + 24 >> 2];
       $7 = Math_fround($10 - HEAPF32[$5 + 40 >> 2]);
       if (Math_fround($12 + Math_fround($7 * $7)) < Math_fround(9.999999747378752e-05)) {
        break label$8
       }
       $7 = Math_fround($8 - HEAPF32[$5 + 48 >> 2]);
       $12 = Math_fround($7 * $7);
       $7 = Math_fround($13 - HEAPF32[$5 + 52 >> 2]);
       $12 = Math_fround($12 + Math_fround($7 * $7));
       $7 = Math_fround($10 - HEAPF32[$5 + 56 >> 2]);
       if (!!(Math_fround($12 + Math_fround($7 * $7)) < Math_fround(9.999999747378752e-05))) {
        break label$8
       }
       $7 = Math_fround($8 - HEAPF32[$5 + 64 >> 2]);
       $12 = Math_fround($7 * $7);
       $7 = Math_fround($13 - HEAPF32[$5 + 68 >> 2]);
       $12 = Math_fround($12 + Math_fround($7 * $7));
       $7 = Math_fround($10 - HEAPF32[$5 + 72 >> 2]);
       if (Math_fround($12 + Math_fround($7 * $7)) < Math_fround(9.999999747378752e-05)) {
        break label$8
       }
       $7 = Math_fround($8 - HEAPF32[$5 + 80 >> 2]);
       $12 = Math_fround($7 * $7);
       $7 = Math_fround($13 - HEAPF32[$5 + 84 >> 2]);
       $12 = Math_fround($12 + Math_fround($7 * $7));
       $7 = Math_fround($10 - HEAPF32[$5 + 88 >> 2]);
       if (Math_fround($12 + Math_fround($7 * $7)) < Math_fround(9.999999747378752e-05)) {
        break label$8
       }
       $1 = $1 + 16 | 0;
       $4 = $1 + 8 | 0;
       $3 = HEAP32[$4 + 4 >> 2];
       $26 = $26 + 1 & 3;
       $14 = ($5 + 32 | 0) + ($26 << 4) | 0;
       $6 = $14;
       HEAP32[$6 + 8 >> 2] = HEAP32[$4 >> 2];
       HEAP32[$6 + 12 >> 2] = $3;
       $6 = HEAP32[$1 + 4 >> 2];
       $3 = $14;
       HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
       HEAP32[$3 + 4 >> 2] = $6;
       $8 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 128 >> 2] * $8) + Math_fround(HEAPF32[$0 + 132 >> 2] * $13)) + Math_fround(HEAPF32[$0 + 136 >> 2] * $10)) / $19);
       $21 = $8 > $21 ? $8 : $21;
       if (!!(Math_fround(Math_fround($19 - $21) + Math_fround($19 * Math_fround(-9.999999747378752e-05))) <= Math_fround(0.0))) {
        $1 = HEAP32[$0 + 364 >> 2];
        HEAP32[$0 + 364 >> 2] = $1 + 1;
        $17 = HEAP32[$0 + 368 >> 2];
        $2 = Math_imul($17, 36) + $0 | 0;
        $9 = $2 + 180 | 0;
        $3 = $9;
        $9 = HEAP32[$9 >> 2] + -1 | 0;
        HEAP32[$3 >> 2] = $9;
        HEAP32[(($1 << 2) + $0 | 0) + 348 >> 2] = HEAP32[(($9 << 2) + $2 | 0) + 148 >> 2];
        break label$5;
       }
       HEAP32[$5 + 12 >> 2] = 0;
       label$10 : {
        label$11 : {
         $1 = $18 + -2 | 0;
         label$12 : {
          if ($1 >>> 0 > 2) {
           break label$12
          }
          label$13 : {
           switch ($1 - 1 | 0) {
           default:
            $1 = HEAP32[$9 + 152 >> 2];
            $22 = HEAPF32[$1 + 16 >> 2];
            $9 = HEAP32[$15 >> 2];
            $7 = HEAPF32[$9 + 16 >> 2];
            $8 = Math_fround($22 - $7);
            $23 = HEAPF32[$1 + 20 >> 2];
            $19 = HEAPF32[$9 + 20 >> 2];
            $13 = Math_fround($23 - $19);
            $24 = HEAPF32[$1 + 24 >> 2];
            $16 = HEAPF32[$9 + 24 >> 2];
            $10 = Math_fround($24 - $16);
            $12 = Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($13 * $13)) + Math_fround($10 * $10));
            if (!($12 > Math_fround(0.0))) {
             break label$11
            }
            $12 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($7 * $8) + Math_fround($19 * $13)) + Math_fround($16 * $10))) / $12);
            if (!!($12 >= Math_fround(1.0))) {
             HEAP32[$5 + 16 >> 2] = 0;
             HEAP32[$5 + 20 >> 2] = 1065353216;
             HEAP32[$5 + 12 >> 2] = 2;
             $16 = Math_fround(Math_fround(Math_fround($22 * $22) + Math_fround($23 * $23)) + Math_fround($24 * $24));
             break label$12;
            }
            if (!!($12 <= Math_fround(0.0))) {
             HEAP32[$5 + 16 >> 2] = 1065353216;
             HEAP32[$5 + 20 >> 2] = 0;
             HEAP32[$5 + 12 >> 2] = 1;
             $16 = Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($19 * $19)) + Math_fround($16 * $16));
             break label$12;
            }
            HEAP32[$5 + 12 >> 2] = 3;
            HEAPF32[$5 + 20 >> 2] = $12;
            HEAPF32[$5 + 16 >> 2] = Math_fround(1.0) - $12;
            $10 = Math_fround($16 + Math_fround($10 * $12));
            $8 = Math_fround($7 + Math_fround($8 * $12));
            $7 = Math_fround($8 * $8);
            $8 = Math_fround($19 + Math_fround($13 * $12));
            $16 = Math_fround(Math_fround($10 * $10) + Math_fround($7 + Math_fround($8 * $8)));
            break label$12;
           case 0:
            $16 = gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float__2c_20unsigned_20int__29(HEAP32[$15 >> 2] + 16 | 0, HEAP32[$9 + 152 >> 2] + 16 | 0, HEAP32[$9 + 156 >> 2] + 16 | 0, $5 + 16 | 0, $5 + 12 | 0);
            break label$12;
           case 1:
            break label$13;
           };
          }
          $16 = gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float__2c_20unsigned_20int__29(HEAP32[$15 >> 2] + 16 | 0, HEAP32[$9 + 152 >> 2] + 16 | 0, HEAP32[$9 + 156 >> 2] + 16 | 0, HEAP32[$9 + 160 >> 2] + 16 | 0, $5 + 16 | 0, $5 + 12 | 0);
         }
         if (!($16 >= Math_fround(0.0))) {
          break label$11
         }
         $17 = 1 - $17 | 0;
         $4 = Math_imul($17, 36) + $0 | 0;
         $18 = $4 + 180 | 0;
         HEAP32[$18 >> 2] = 0;
         $3 = $25;
         HEAP32[$3 >> 2] = 0;
         HEAP32[$3 + 4 >> 2] = 0;
         $3 = $11;
         HEAP32[$3 >> 2] = 0;
         HEAP32[$3 + 4 >> 2] = 0;
         HEAP32[$0 + 368 >> 2] = $17;
         $3 = HEAP32[$5 + 12 >> 2];
         $6 = HEAP32[$2 >> 2];
         if (!$6) {
          $8 = Math_fround(0.0);
          $10 = Math_fround(0.0);
          $7 = Math_fround(0.0);
          break label$10;
         }
         $1 = $20 + $28 | 0;
         $2 = 0;
         $8 = Math_fround(0.0);
         $9 = $5 + 16 | 0;
         $10 = Math_fround(0.0);
         $7 = Math_fround(0.0);
         while (1) {
          $15 = HEAP32[$1 >> 2];
          label$20 : {
           if (1 << $2 & $3) {
            $14 = HEAP32[$18 >> 2];
            $20 = ($14 << 2) + $4 | 0;
            HEAP32[$20 + 148 >> 2] = $15;
            $15 = $20 + 164 | 0;
            $8 = HEAPF32[$9 >> 2];
            $20 = HEAP32[$9 >> 2];
            HEAP32[$15 >> 2] = $20;
            HEAP32[$18 >> 2] = $14 + 1;
            $15 = HEAP32[$1 >> 2];
            $13 = HEAPF32[$15 + 24 >> 2];
            $10 = HEAPF32[$15 + 20 >> 2];
            $7 = Math_fround(Math_fround(HEAPF32[$15 + 16 >> 2] * $8) + HEAPF32[$0 + 128 >> 2]);
            HEAPF32[$0 + 128 >> 2] = $7;
            $10 = Math_fround(Math_fround($10 * $8) + HEAPF32[$0 + 132 >> 2]);
            HEAPF32[$0 + 132 >> 2] = $10;
            $8 = Math_fround(Math_fround($13 * $8) + HEAPF32[$0 + 136 >> 2]);
            HEAPF32[$0 + 136 >> 2] = $8;
            break label$20;
           }
           $14 = HEAP32[$0 + 364 >> 2];
           HEAP32[$0 + 364 >> 2] = $14 + 1;
           HEAP32[(($14 << 2) + $0 | 0) + 348 >> 2] = $15;
          }
          $1 = $1 + 4 | 0;
          $9 = $9 + 4 | 0;
          $2 = $2 + 1 | 0;
          if (($6 | 0) != ($2 | 0)) {
           continue
          }
          break;
         };
         break label$10;
        }
        $1 = HEAP32[$0 + 364 >> 2];
        HEAP32[$0 + 364 >> 2] = $1 + 1;
        $17 = HEAP32[$0 + 368 >> 2];
        $2 = Math_imul($17, 36) + $0 | 0;
        $9 = $2 + 180 | 0;
        $3 = $9;
        $9 = HEAP32[$9 >> 2] + -1 | 0;
        HEAP32[$3 >> 2] = $9;
        HEAP32[(($1 << 2) + $0 | 0) + 348 >> 2] = HEAP32[(($9 << 2) + $2 | 0) + 148 >> 2];
        break label$5;
       }
       if (($3 | 0) == 15) {
        HEAP32[$0 + 376 >> 2] = 1
       }
       if (($27 | 0) == 127) {
        $1 = 2;
        HEAP32[$0 + 376 >> 2] = 2;
        HEAP32[$0 + 372 >> 2] = (Math_imul($17, 36) + $0 | 0) + 148;
        break label$3;
       }
       $27 = $27 + 1 | 0;
       $1 = HEAP32[$0 + 376 >> 2];
       if (!$1) {
        continue
       }
       break label$4;
      }
      break;
     };
     $1 = HEAP32[$0 + 364 >> 2];
     HEAP32[$0 + 364 >> 2] = $1 + 1;
     $17 = HEAP32[$0 + 368 >> 2];
     $2 = Math_imul($17, 36) + $0 | 0;
     $9 = $2 + 180 | 0;
     $3 = $9;
     $9 = HEAP32[$9 >> 2] + -1 | 0;
     HEAP32[$3 >> 2] = $9;
     HEAP32[(($1 << 2) + $0 | 0) + 348 >> 2] = HEAP32[(($9 << 2) + $2 | 0) + 148 >> 2];
    }
    $1 = HEAP32[$0 + 376 >> 2];
   }
   HEAP32[$0 + 372 >> 2] = (Math_imul($17, 36) + $0 | 0) + 148;
   if ($1 >>> 0 > 1) {
    break label$3
   }
   if ($1 - 1) {
    $8 = HEAPF32[$0 + 128 >> 2];
    $7 = Math_fround($8 * $8);
    $8 = HEAPF32[$0 + 132 >> 2];
    $7 = Math_fround($7 + Math_fround($8 * $8));
    $8 = HEAPF32[$0 + 136 >> 2];
    HEAPF32[$0 + 144 >> 2] = Math_sqrt(Math_fround($7 + Math_fround($8 * $8)));
    $1 = 0;
    break label$3;
   }
   HEAP32[$0 + 144 >> 2] = 0;
   $1 = 1;
  }
  global$0 = $5 + 96 | 0;
  return $1;
 }
 
 function gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $1, $2) {
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0);
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  $4 = HEAPF32[$1 + 8 >> 2];
  $5 = HEAPF32[$1 >> 2];
  $6 = HEAPF32[$1 + 4 >> 2];
  HEAP32[$2 + 12 >> 2] = 0;
  $7 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($6 * $6)) + Math_fround($4 * $4)))));
  HEAPF32[$2 + 8 >> 2] = $4 * $7;
  HEAPF32[$2 + 4 >> 2] = $6 * $7;
  HEAPF32[$2 >> 2] = $5 * $7;
  $1 = HEAP32[$0 + 120 >> 2];
  $8 = HEAP32[$0 + 124 >> 2];
  $9 = HEAP32[$0 >> 2] + ($8 >> 1) | 0;
  FUNCTION_TABLE[$8 & 1 ? HEAP32[$1 + HEAP32[$9 >> 2] >> 2] : $1]($3 + 32 | 0, $9, $2);
  HEAP32[$3 + 12 >> 2] = 0;
  HEAPF32[$3 + 8 >> 2] = -HEAPF32[$2 + 8 >> 2];
  HEAPF32[$3 + 4 >> 2] = -HEAPF32[$2 + 4 >> 2];
  HEAPF32[$3 >> 2] = -HEAPF32[$2 >> 2];
  gjkepa2_impl__MinkowskiDiff__Support1_28btVector3_20const__29_20const($3 + 16 | 0, $0, $3);
  $4 = HEAPF32[$3 + 16 >> 2];
  $5 = HEAPF32[$3 + 32 >> 2];
  $6 = HEAPF32[$3 + 20 >> 2];
  $7 = HEAPF32[$3 + 36 >> 2];
  $10 = HEAPF32[$3 + 24 >> 2];
  $11 = HEAPF32[$3 + 40 >> 2];
  HEAP32[$2 + 28 >> 2] = 0;
  HEAPF32[$2 + 24 >> 2] = $11 - $10;
  HEAPF32[$2 + 20 >> 2] = $7 - $6;
  HEAPF32[$2 + 16 >> 2] = $5 - $4;
  global$0 = $3 + 48 | 0;
 }
 
 function gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float__2c_20unsigned_20int__29($0, $1, $2, $3, $4) {
  var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0), $24 = 0, $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0);
  $5 = Math_fround(-1.0);
  $9 = HEAPF32[$0 >> 2];
  $6 = HEAPF32[$1 >> 2];
  $19 = Math_fround($9 - $6);
  $7 = HEAPF32[$1 + 4 >> 2];
  $12 = HEAPF32[$2 + 4 >> 2];
  $21 = Math_fround($7 - $12);
  $13 = HEAPF32[$0 + 4 >> 2];
  $20 = Math_fround($13 - $7);
  $15 = HEAPF32[$2 >> 2];
  $27 = Math_fround($6 - $15);
  $16 = Math_fround(Math_fround($19 * $21) - Math_fround($20 * $27));
  $8 = HEAPF32[$1 + 8 >> 2];
  $23 = HEAPF32[$2 + 8 >> 2];
  $28 = Math_fround($8 - $23);
  $14 = HEAPF32[$0 + 8 >> 2];
  $11 = Math_fround($14 - $8);
  $17 = Math_fround(Math_fround($20 * $28) - Math_fround($11 * $21));
  $18 = Math_fround(Math_fround($11 * $27) - Math_fround($19 * $28));
  $29 = Math_fround(Math_fround($16 * $16) + Math_fround(Math_fround($17 * $17) + Math_fround($18 * $18)));
  label$1 : {
   if (!($29 > Math_fround(0.0))) {
    break label$1
   }
   label$2 : {
    if (!(Math_fround(Math_fround(Math_fround($9 * Math_fround(Math_fround($16 * $20) - Math_fround($18 * $11))) + Math_fround($13 * Math_fround(Math_fround($17 * $11) - Math_fround($16 * $19)))) + Math_fround(Math_fround(Math_fround($18 * $19) - Math_fround($17 * $20)) * $14)) > Math_fround(0.0))) {
     $10 = Math_fround(-1.0);
     break label$2;
    }
    $5 = Math_fround($6 - $9);
    $19 = Math_fround($7 - $13);
    $20 = Math_fround($8 - $14);
    $11 = Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($19 * $19)) + Math_fround($20 * $20));
    $10 = Math_fround(-1.0);
    label$4 : {
     if (!($11 > Math_fround(0.0))) {
      break label$4
     }
     $11 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($9 * $5) + Math_fround($13 * $19)) + Math_fround($14 * $20))) / $11);
     if (!!($11 >= Math_fround(1.0))) {
      $24 = 1065353216;
      $22 = 2;
      $10 = Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($7 * $7)) + Math_fround($8 * $8));
      break label$4;
     }
     $22 = 1;
     if (!!($11 <= Math_fround(0.0))) {
      $25 = 1065353216;
      $10 = Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($13 * $13)) + Math_fround($14 * $14));
      break label$4;
     }
     $25 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(1.0) - $11)), wasm2js_scratch_load_i32(0));
     $24 = (wasm2js_scratch_store_f32($11), wasm2js_scratch_load_i32(0));
     $22 = 3;
     $6 = Math_fround($14 + Math_fround($20 * $11));
     $5 = Math_fround($9 + Math_fround($5 * $11));
     $10 = Math_fround($5 * $5);
     $5 = Math_fround($13 + Math_fround($19 * $11));
     $10 = Math_fround(Math_fround($6 * $6) + Math_fround($10 + Math_fround($5 * $5)));
    }
    HEAP32[$3 + 8 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = $24;
    HEAP32[$3 >> 2] = $25;
    HEAP32[$4 >> 2] = $22;
    $8 = HEAPF32[$1 + 8 >> 2];
    $7 = HEAPF32[$1 + 4 >> 2];
    $6 = HEAPF32[$1 >> 2];
   }
   $19 = Math_fround($23 - $14);
   $20 = Math_fround($12 - $13);
   $11 = Math_fround($15 - $9);
   label$7 : {
    if (!(Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_fround($16 * $21) - Math_fround($18 * $28))) + Math_fround($7 * Math_fround(Math_fround($17 * $28) - Math_fround($16 * $27)))) + Math_fround(Math_fround(Math_fround($18 * $27) - Math_fround($17 * $21)) * $8)) > Math_fround(0.0))) {
     $5 = $10;
     break label$7;
    }
    $15 = HEAPF32[$2 >> 2];
    $9 = Math_fround($15 - $6);
    $23 = HEAPF32[$2 + 4 >> 2];
    $13 = Math_fround($23 - $7);
    $26 = HEAPF32[$2 + 8 >> 2];
    $14 = Math_fround($26 - $8);
    $12 = Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($13 * $13)) + Math_fround($14 * $14));
    $5 = Math_fround(-1.0);
    label$9 : {
     if (!($12 > Math_fround(0.0))) {
      break label$9
     }
     $12 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($6 * $9) + Math_fround($7 * $13)) + Math_fround($8 * $14))) / $12);
     if (!!($12 >= Math_fround(1.0))) {
      $24 = 1065353216;
      $25 = 0;
      $22 = 2;
      $5 = Math_fround(Math_fround(Math_fround($15 * $15) + Math_fround($23 * $23)) + Math_fround($26 * $26));
      break label$9;
     }
     $22 = 1;
     if (!!($12 <= Math_fround(0.0))) {
      $24 = 0;
      $25 = 1065353216;
      $5 = Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($7 * $7)) + Math_fround($8 * $8));
      break label$9;
     }
     $25 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(1.0) - $12)), wasm2js_scratch_load_i32(0));
     $24 = (wasm2js_scratch_store_f32($12), wasm2js_scratch_load_i32(0));
     $22 = 3;
     $5 = Math_fround($8 + Math_fround($14 * $12));
     $8 = Math_fround($5 * $5);
     $5 = Math_fround($6 + Math_fround($9 * $12));
     $9 = Math_fround($5 * $5);
     $5 = Math_fround($7 + Math_fround($13 * $12));
     $5 = Math_fround($8 + Math_fround($9 + Math_fround($5 * $5)));
    }
    label$12 : {
     if ($10 < Math_fround(0.0)) {
      break label$12
     }
     if (!!($5 < $10)) {
      break label$12
     }
     $5 = $10;
     break label$7;
    }
    HEAP32[$3 + 8 >> 2] = $24;
    HEAP32[$3 + 4 >> 2] = $25;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$4 >> 2] = $22 << 1;
   }
   $6 = HEAPF32[$2 >> 2];
   $7 = HEAPF32[$2 + 4 >> 2];
   $8 = HEAPF32[$2 + 8 >> 2];
   label$13 : {
    if (!(Math_fround(Math_fround(Math_fround($6 * Math_fround(Math_fround($16 * $20) - Math_fround($18 * $19))) + Math_fround($7 * Math_fround(Math_fround($17 * $19) - Math_fround($16 * $11)))) + Math_fround(Math_fround(Math_fround($18 * $11) - Math_fround($17 * $20)) * $8)) > Math_fround(0.0))) {
     break label$13
    }
    $23 = HEAPF32[$0 >> 2];
    $13 = Math_fround($23 - $6);
    $10 = HEAPF32[$0 + 4 >> 2];
    $14 = Math_fround($10 - $7);
    $26 = HEAPF32[$0 + 8 >> 2];
    $12 = Math_fround($26 - $8);
    $15 = Math_fround(Math_fround(Math_fround($13 * $13) + Math_fround($14 * $14)) + Math_fround($12 * $12));
    $9 = Math_fround(-1.0);
    label$14 : {
     if (!($15 > Math_fround(0.0))) {
      break label$14
     }
     $15 = Math_fround(Math_fround(-Math_fround(Math_fround(Math_fround($6 * $13) + Math_fround($7 * $14)) + Math_fround($8 * $12))) / $15);
     if (!!($15 >= Math_fround(1.0))) {
      $24 = 1065353216;
      $25 = 0;
      $22 = 2;
      $9 = Math_fround(Math_fround(Math_fround($23 * $23) + Math_fround($10 * $10)) + Math_fround($26 * $26));
      break label$14;
     }
     if (!!($15 <= Math_fround(0.0))) {
      $24 = 0;
      $25 = 1065353216;
      $22 = 1;
      $9 = Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($7 * $7)) + Math_fround($8 * $8));
      break label$14;
     }
     $25 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(1.0) - $15)), wasm2js_scratch_load_i32(0));
     $24 = (wasm2js_scratch_store_f32($15), wasm2js_scratch_load_i32(0));
     $22 = 3;
     $8 = Math_fround($8 + Math_fround($12 * $15));
     $6 = Math_fround($6 + Math_fround($13 * $15));
     $10 = Math_fround($6 * $6);
     $6 = Math_fround($7 + Math_fround($14 * $15));
     $9 = Math_fround(Math_fround($8 * $8) + Math_fround($10 + Math_fround($6 * $6)));
    }
    if ($9 < $5 ^ 1 ? !($5 < Math_fround(0.0)) : 0) {
     break label$13
    }
    HEAP32[$3 + 8 >> 2] = $25;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$3 >> 2] = $24;
    HEAP32[$4 >> 2] = ($22 << 2 | $22 >>> 1) & 5;
    $5 = $9;
   }
   if (!($5 < Math_fround(0.0))) {
    break label$1
   }
   $5 = Math_fround(Math_fround(Math_fround(Math_fround($17 * HEAPF32[$0 >> 2]) + Math_fround($18 * HEAPF32[$0 + 4 >> 2])) + Math_fround($16 * HEAPF32[$0 + 8 >> 2])) / $29);
   $18 = Math_fround($18 * $5);
   $6 = Math_fround(HEAPF32[$1 + 4 >> 2] - $18);
   $17 = Math_fround($17 * $5);
   $7 = Math_fround(HEAPF32[$1 >> 2] - $17);
   $8 = Math_fround(Math_fround($27 * $6) - Math_fround($21 * $7));
   $16 = Math_fround($16 * $5);
   $5 = Math_fround(HEAPF32[$1 + 8 >> 2] - $16);
   $6 = Math_fround(Math_fround($21 * $5) - Math_fround($28 * $6));
   $5 = Math_fround(Math_fround($28 * $7) - Math_fround($27 * $5));
   $10 = Math_fround(Math_sqrt(Math_fround(Math_fround($8 * $8) + Math_fround(Math_fround($6 * $6) + Math_fround($5 * $5)))));
   $5 = Math_fround(Math_sqrt($29));
   $6 = Math_fround($10 / $5);
   HEAPF32[$3 >> 2] = $6;
   HEAP32[$4 >> 2] = 7;
   $7 = Math_fround(HEAPF32[$2 + 4 >> 2] - $18);
   $8 = Math_fround(HEAPF32[$2 >> 2] - $17);
   $21 = Math_fround(Math_fround($11 * $7) - Math_fround($20 * $8));
   $10 = Math_fround($21 * $21);
   $21 = Math_fround(HEAPF32[$2 + 8 >> 2] - $16);
   $7 = Math_fround(Math_fround($20 * $21) - Math_fround($19 * $7));
   $9 = Math_fround($7 * $7);
   $7 = Math_fround(Math_fround($19 * $8) - Math_fround($11 * $21));
   $5 = Math_fround(Math_fround(Math_sqrt(Math_fround($10 + Math_fround($9 + Math_fround($7 * $7))))) / $5);
   HEAPF32[$3 + 4 >> 2] = $5;
   HEAPF32[$3 + 8 >> 2] = Math_fround(1.0) - Math_fround($6 + $5);
   $5 = Math_fround(Math_fround($16 * $16) + Math_fround(Math_fround($17 * $17) + Math_fround($18 * $18)));
  }
  return $5;
 }
 
 function gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float__2c_20unsigned_20int__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0);
  $6 = global$0 - 96 | 0;
  global$0 = $6;
  HEAP32[$6 + 92 >> 2] = $3;
  HEAP32[$6 + 88 >> 2] = $2;
  HEAP32[$6 + 84 >> 2] = $1;
  HEAP32[$6 + 80 >> 2] = $0;
  HEAP32[$6 + 60 >> 2] = 0;
  $26 = HEAPF32[$1 + 8 >> 2];
  $17 = HEAPF32[$3 + 8 >> 2];
  $13 = Math_fround($26 - $17);
  HEAPF32[$6 + 56 >> 2] = $13;
  $20 = HEAPF32[$1 + 4 >> 2];
  $19 = HEAPF32[$3 + 4 >> 2];
  $21 = Math_fround($20 - $19);
  HEAPF32[$6 + 52 >> 2] = $21;
  HEAP32[$6 + 44 >> 2] = 0;
  $23 = HEAPF32[$0 + 8 >> 2];
  $14 = Math_fround($23 - $17);
  HEAPF32[$6 + 40 >> 2] = $14;
  $27 = HEAPF32[$0 + 4 >> 2];
  $15 = Math_fround($27 - $19);
  HEAPF32[$6 + 36 >> 2] = $15;
  $28 = HEAPF32[$0 >> 2];
  $25 = HEAPF32[$3 >> 2];
  $11 = Math_fround($28 - $25);
  HEAPF32[$6 + 32 >> 2] = $11;
  $22 = HEAPF32[$1 >> 2];
  $12 = Math_fround($22 - $25);
  HEAPF32[$6 + 48 >> 2] = $12;
  $24 = HEAPF32[$2 >> 2];
  $18 = HEAPF32[$2 + 4 >> 2];
  $29 = HEAPF32[$2 + 8 >> 2];
  HEAP32[$6 + 76 >> 2] = 0;
  $10 = Math_fround($29 - $17);
  HEAPF32[$6 + 72 >> 2] = $10;
  $7 = Math_fround($18 - $19);
  HEAPF32[$6 + 68 >> 2] = $7;
  $8 = Math_fround($24 - $25);
  HEAPF32[$6 + 64 >> 2] = $8;
  $9 = Math_fround(-1.0);
  $30 = Math_fround($11 * $21);
  $31 = Math_fround($15 * $13);
  $32 = Math_fround($14 * $12);
  $33 = Math_fround($11 * $13);
  $34 = Math_fround($15 * $12);
  $35 = Math_fround($14 * $21);
  $13 = Math_fround(Math_fround(Math_fround($30 * $10) + Math_fround(Math_fround(Math_fround(Math_fround($31 * $8) + Math_fround($32 * $7)) - Math_fround($33 * $7)) - Math_fround($34 * $10))) - Math_fround($35 * $8));
  label$1 : {
   if ($13 == Math_fround(0.0) | $13 != $13) {
    break label$1
   }
   $21 = Math_fround($27 - $20);
   $24 = Math_fround($22 - $24);
   $22 = Math_fround($28 - $22);
   $18 = Math_fround($20 - $18);
   $36 = Math_fround($23 * Math_fround(Math_fround($21 * $24) - Math_fround($22 * $18)));
   $20 = Math_fround($23 - $26);
   $23 = Math_fround($20 * $18);
   $18 = Math_fround($26 - $29);
   if (!(Math_fround($13 * Math_fround($36 + Math_fround(Math_fround($28 * Math_fround($23 - Math_fround($21 * $18))) + Math_fround($27 * Math_fround(Math_fround($22 * $18) - Math_fround($20 * $24)))))) <= Math_fround(0.0))) {
    break label$1
   }
   HEAP32[$6 + 24 >> 2] = 0;
   HEAP32[$6 + 16 >> 2] = 0;
   HEAP32[$6 + 20 >> 2] = 0;
   HEAP32[$6 + 12 >> 2] = 0;
   if (!!(Math_fround($13 * Math_fround(Math_fround(Math_fround(Math_fround($31 - $35) * $25) + Math_fround($19 * Math_fround($32 - $33))) + Math_fround(Math_fround($30 - $34) * $17))) > Math_fround(0.0))) {
    $9 = gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float__2c_20unsigned_20int__29(HEAP32[$6 + 80 >> 2], HEAP32[$6 + 84 >> 2], $3, $6 + 16 | 0, $6 + 12 | 0);
    HEAP32[$4 + 8 >> 2] = 0;
    $16 = HEAP32[$6 + 20 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$6 + 16 >> 2];
    HEAP32[$4 + 4 >> 2] = $16;
    HEAP32[$4 + 12 >> 2] = HEAP32[$6 + 24 >> 2];
    $16 = HEAP32[$6 + 12 >> 2];
    HEAP32[$5 >> 2] = $16 & 2 | $16 << 1 & 8 | $16 & 1;
   }
   $17 = HEAPF32[$6 + 52 >> 2];
   $19 = HEAPF32[$6 + 56 >> 2];
   label$3 : {
    if (!(Math_fround($13 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($17 * $10) - Math_fround($19 * $7)) * HEAPF32[$3 >> 2]) + Math_fround(HEAPF32[$3 + 4 >> 2] * Math_fround(Math_fround($19 * $8) - Math_fround($10 * $12)))) + Math_fround(Math_fround(Math_fround($7 * $12) - Math_fround($17 * $8)) * HEAPF32[$3 + 8 >> 2]))) > Math_fround(0.0))) {
     break label$3
    }
    $12 = gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float__2c_20unsigned_20int__29(HEAP32[$6 + 84 >> 2], HEAP32[$6 + 88 >> 2], $3, $6 + 16 | 0, $6 + 12 | 0);
    if ($12 < $9 ^ 1 ? !($9 < Math_fround(0.0)) : 0) {
     break label$3
    }
    HEAP32[$4 + 4 >> 2] = HEAP32[$6 + 16 >> 2];
    HEAP32[$4 >> 2] = 0;
    $16 = HEAP32[$6 + 24 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$6 + 20 >> 2];
    HEAP32[$4 + 12 >> 2] = $16;
    HEAP32[$5 >> 2] = HEAP32[$6 + 12 >> 2] << 1 & 14;
    $9 = $12;
   }
   label$5 : {
    if (!(Math_fround($13 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7 * $14) - Math_fround($10 * $15)) * HEAPF32[$3 >> 2]) + Math_fround(HEAPF32[$3 + 4 >> 2] * Math_fround(Math_fround($10 * $11) - Math_fround($14 * $8)))) + Math_fround(Math_fround(Math_fround($15 * $8) - Math_fround($7 * $11)) * HEAPF32[$3 + 8 >> 2]))) > Math_fround(0.0))) {
     break label$5
    }
    $10 = gjkepa2_impl__GJK__projectorigin_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float__2c_20unsigned_20int__29(HEAP32[$6 + 88 >> 2], HEAP32[$6 + 80 >> 2], $3, $6 + 16 | 0, $6 + 12 | 0);
    if ($10 < $9 ^ 1 ? !($9 < Math_fround(0.0)) : 0) {
     break label$5
    }
    HEAP32[$4 + 8 >> 2] = HEAP32[$6 + 16 >> 2];
    HEAP32[$4 + 4 >> 2] = 0;
    HEAP32[$4 >> 2] = HEAP32[$6 + 20 >> 2];
    HEAP32[$4 + 12 >> 2] = HEAP32[$6 + 24 >> 2];
    $16 = HEAP32[$6 + 12 >> 2];
    HEAP32[$5 >> 2] = $16 >>> 1 & 1 | $16 << 1 & 8 | $16 << 2 & 4;
    $9 = $10;
   }
   if (!($9 < Math_fround(0.0))) {
    break label$1
   }
   $10 = HEAPF32[$2 + 4 >> 2];
   $7 = HEAPF32[$1 + 8 >> 2];
   $8 = HEAPF32[$3 >> 2];
   $9 = HEAPF32[$2 + 8 >> 2];
   $14 = HEAPF32[$1 >> 2];
   $15 = HEAPF32[$3 + 4 >> 2];
   $11 = HEAPF32[$2 >> 2];
   $12 = Math_fround(Math_fround(Math_fround(Math_fround($10 * $7) * $8) + Math_fround(Math_fround($9 * $14) * $15)) - Math_fround($15 * Math_fround($7 * $11)));
   $14 = Math_fround($10 * $14);
   $10 = HEAPF32[$3 + 8 >> 2];
   $7 = HEAPF32[$1 + 4 >> 2];
   $10 = Math_fround(Math_fround(Math_fround(Math_fround($12 - Math_fround($14 * $10)) + Math_fround($10 * Math_fround($11 * $7))) - Math_fround($8 * Math_fround($9 * $7))) / $13);
   HEAPF32[$4 >> 2] = $10;
   $7 = HEAPF32[$0 + 4 >> 2];
   $8 = HEAPF32[$2 + 8 >> 2];
   $9 = HEAPF32[$3 >> 2];
   $14 = HEAPF32[$0 + 8 >> 2];
   $15 = HEAPF32[$2 >> 2];
   $11 = HEAPF32[$3 + 4 >> 2];
   $12 = HEAPF32[$0 >> 2];
   $11 = Math_fround(Math_fround(Math_fround(Math_fround($7 * $8) * $9) + Math_fround(Math_fround($14 * $15) * $11)) - Math_fround($11 * Math_fround($8 * $12)));
   $15 = Math_fround($7 * $15);
   $7 = HEAPF32[$3 + 8 >> 2];
   $8 = HEAPF32[$2 + 4 >> 2];
   $7 = Math_fround(Math_fround(Math_fround(Math_fround($11 - Math_fround($15 * $7)) + Math_fround($7 * Math_fround($12 * $8))) - Math_fround($9 * Math_fround($14 * $8))) / $13);
   HEAPF32[$4 + 4 >> 2] = $7;
   HEAP32[$5 >> 2] = 15;
   $8 = HEAPF32[$1 + 4 >> 2];
   $9 = HEAPF32[$0 + 8 >> 2];
   $14 = HEAPF32[$3 >> 2];
   $15 = HEAPF32[$1 + 8 >> 2];
   $11 = HEAPF32[$0 >> 2];
   $12 = HEAPF32[$3 + 4 >> 2];
   $17 = HEAPF32[$1 >> 2];
   $12 = Math_fround(Math_fround(Math_fround(Math_fround($8 * $9) * $14) + Math_fround(Math_fround($15 * $11) * $12)) - Math_fround($12 * Math_fround($9 * $17)));
   $11 = Math_fround($8 * $11);
   $8 = HEAPF32[$3 + 8 >> 2];
   $9 = HEAPF32[$0 + 4 >> 2];
   $13 = Math_fround(Math_fround(Math_fround(Math_fround($12 - Math_fround($11 * $8)) + Math_fround($8 * Math_fround($17 * $9))) - Math_fround($14 * Math_fround($15 * $9))) / $13);
   HEAPF32[$4 + 8 >> 2] = $13;
   HEAPF32[$4 + 12 >> 2] = Math_fround(1.0) - Math_fround(Math_fround($10 + $7) + $13);
   $9 = Math_fround(0.0);
  }
  global$0 = $6 + 96 | 0;
  return $9;
 }
 
 function btGjkEpaSolver2__Penetration_28btConvexShape_20const__2c_20btTransform_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btGjkEpaSolver2__sResults__2c_20bool_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = 0, $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0);
  $6 = global$0 - 19040 | 0;
  global$0 = $6;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$5 + 32 >> 2] = 0;
  $10 = $5 + 24 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $5 + 16 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  $10 = $5 + 8 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP32[$6 + 18916 >> 2] = $2;
  HEAP32[$6 + 18912 >> 2] = $0;
  $7 = HEAPF32[$3 + 20 >> 2];
  $8 = HEAPF32[$3 + 36 >> 2];
  $0 = $1 + 20 | 0;
  $9 = HEAPF32[$0 >> 2];
  $2 = $1 + 36 | 0;
  $11 = HEAPF32[$2 >> 2];
  $10 = $1 + 24 | 0;
  $15 = HEAPF32[$10 >> 2];
  $13 = HEAPF32[$3 + 24 >> 2];
  $28 = $1 + 40 | 0;
  $16 = HEAPF32[$28 >> 2];
  $14 = HEAPF32[$3 + 40 >> 2];
  $17 = HEAPF32[$3 + 32 >> 2];
  $18 = HEAPF32[$3 >> 2];
  $19 = HEAPF32[$3 + 16 >> 2];
  $20 = HEAPF32[$3 + 4 >> 2];
  $21 = HEAPF32[$1 + 32 >> 2];
  $22 = HEAPF32[$1 >> 2];
  $23 = HEAPF32[$1 + 16 >> 2];
  $26 = HEAPF32[$1 + 4 >> 2];
  $25 = HEAPF32[$1 + 8 >> 2];
  $24 = HEAPF32[$3 + 8 >> 2];
  HEAP32[$6 + 18964 >> 2] = 0;
  HEAP32[$6 + 18948 >> 2] = 0;
  HEAP32[$6 + 18932 >> 2] = 0;
  $27 = Math_fround(Math_fround(Math_fround($25 * $24) + Math_fround($15 * $13)) + Math_fround($16 * $14));
  HEAPF32[$6 + 18960 >> 2] = $27;
  $29 = Math_fround(Math_fround(Math_fround($26 * $24) + Math_fround($9 * $13)) + Math_fround($11 * $14));
  HEAPF32[$6 + 18956 >> 2] = $29;
  $13 = Math_fround(Math_fround(Math_fround($22 * $24) + Math_fround($23 * $13)) + Math_fround($21 * $14));
  HEAPF32[$6 + 18952 >> 2] = $13;
  $14 = Math_fround(Math_fround(Math_fround($25 * $20) + Math_fround($15 * $7)) + Math_fround($16 * $8));
  HEAPF32[$6 + 18944 >> 2] = $14;
  $24 = Math_fround(Math_fround(Math_fround($26 * $20) + Math_fround($9 * $7)) + Math_fround($11 * $8));
  HEAPF32[$6 + 18940 >> 2] = $24;
  $7 = Math_fround(Math_fround(Math_fround($22 * $20) + Math_fround($23 * $7)) + Math_fround($21 * $8));
  HEAPF32[$6 + 18936 >> 2] = $7;
  $8 = Math_fround(Math_fround(Math_fround($18 * $25) + Math_fround($19 * $15)) + Math_fround($17 * $16));
  HEAPF32[$6 + 18928 >> 2] = $8;
  $9 = Math_fround(Math_fround(Math_fround($18 * $26) + Math_fround($19 * $9)) + Math_fround($17 * $11));
  HEAPF32[$6 + 18924 >> 2] = $9;
  $11 = Math_fround(Math_fround(Math_fround($18 * $22) + Math_fround($19 * $23)) + Math_fround($17 * $21));
  HEAPF32[$6 + 18920 >> 2] = $11;
  $15 = HEAPF32[$0 >> 2];
  $16 = HEAPF32[$2 >> 2];
  $17 = HEAPF32[$10 >> 2];
  $18 = HEAPF32[$3 + 52 >> 2];
  $19 = HEAPF32[$1 + 52 >> 2];
  $20 = HEAPF32[$28 >> 2];
  $21 = HEAPF32[$3 + 56 >> 2];
  $22 = HEAPF32[$1 + 56 >> 2];
  $23 = HEAPF32[$1 >> 2];
  $26 = HEAPF32[$1 + 16 >> 2];
  $25 = HEAPF32[$1 + 32 >> 2];
  $30 = HEAPF32[$1 + 4 >> 2];
  $31 = HEAPF32[$1 + 8 >> 2];
  $32 = HEAPF32[$3 + 48 >> 2];
  $33 = HEAPF32[$1 + 48 >> 2];
  HEAP32[$6 + 19036 >> 2] = 0;
  HEAP32[$6 + 19028 >> 2] = 0;
  HEAP32[$6 + 19012 >> 2] = 0;
  HEAPF32[$6 + 19008 >> 2] = $27;
  HEAPF32[$6 + 19004 >> 2] = $14;
  HEAPF32[$6 + 19e3 >> 2] = $8;
  HEAP32[$6 + 18996 >> 2] = 0;
  HEAPF32[$6 + 18992 >> 2] = $29;
  HEAPF32[$6 + 18988 >> 2] = $24;
  HEAPF32[$6 + 18984 >> 2] = $9;
  HEAP32[$6 + 18980 >> 2] = 0;
  HEAPF32[$6 + 18976 >> 2] = $13;
  HEAPF32[$6 + 18972 >> 2] = $7;
  $7 = Math_fround($32 - $33);
  $8 = Math_fround($18 - $19);
  $9 = Math_fround($21 - $22);
  HEAPF32[$6 + 19024 >> 2] = Math_fround(Math_fround($31 * $7) + Math_fround($17 * $8)) + Math_fround($20 * $9);
  HEAPF32[$6 + 19020 >> 2] = Math_fround(Math_fround($7 * $30) + Math_fround($8 * $15)) + Math_fround($9 * $16);
  HEAPF32[$6 + 19016 >> 2] = Math_fround(Math_fround($7 * $23) + Math_fround($8 * $26)) + Math_fround($9 * $25);
  HEAP32[$6 + 19032 >> 2] = 349;
  HEAPF32[$6 + 18968 >> 2] = $11;
  $10 = $6 + 18664 | 0;
  HEAP32[$10 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP32[$6 + 18656 >> 2] = 0;
  HEAP32[$6 + 18660 >> 2] = 0;
  HEAP32[$6 + 18892 >> 2] = 0;
  HEAP32[$6 + 18896 >> 2] = 0;
  HEAP32[$6 + 18904 >> 2] = 2;
  HEAP32[$6 + 18672 >> 2] = 0;
  HEAP32[$6 + 28 >> 2] = 0;
  HEAPF32[$6 + 24 >> 2] = -HEAPF32[$4 + 8 >> 2];
  HEAPF32[$6 + 20 >> 2] = -HEAPF32[$4 + 4 >> 2];
  HEAPF32[$6 + 16 >> 2] = -HEAPF32[$4 >> 2];
  $3 = gjkepa2_impl__GJK__Evaluate_28gjkepa2_impl__MinkowskiDiff_20const__2c_20btVector3_20const__29($6 + 18528 | 0, $6 + 18912 | 0, $6 + 16 | 0) + -1 | 0;
  label$1 : {
   if ($3 >>> 0 > 1) {
    break label$1
   }
   label$2 : {
    if ($3 - 1) {
     $10 = $6 + 18520 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     $10 = $6 - -64 | 0;
     HEAP32[$10 >> 2] = 0;
     HEAP32[$10 + 4 >> 2] = 0;
     HEAP32[$6 + 72 >> 2] = 0;
     HEAP32[$6 + 18512 >> 2] = 0;
     HEAP32[$6 + 18516 >> 2] = 0;
     HEAP32[$6 + 18508 >> 2] = 0;
     HEAP32[$6 + 16 >> 2] = 9;
     HEAP32[$6 + 56 >> 2] = 0;
     HEAP32[$6 + 60 >> 2] = 0;
     $3 = 14336;
     while (1) {
      $12 = $3 + ($6 + 16 | 0) | 0;
      HEAP32[$12 + 4144 >> 2] = 0;
      $2 = HEAP32[$6 + 18520 >> 2];
      HEAP32[$12 + 4148 >> 2] = $2;
      $12 = $12 + 4100 | 0;
      if ($2) {
       HEAP32[$2 + 44 >> 2] = $12
      }
      HEAP32[$6 + 18520 >> 2] = $12;
      $3 = $3 + -56 | 0;
      if ($3) {
       continue
      }
      break;
     };
     HEAP32[$6 + 18524 >> 2] = 256;
     $12 = 0;
     HEAP32[$6 + 12 >> 2] = 0;
     HEAPF32[$6 + 8 >> 2] = -HEAPF32[$4 + 8 >> 2];
     HEAPF32[$6 + 4 >> 2] = -HEAPF32[$4 + 4 >> 2];
     HEAPF32[$6 >> 2] = -HEAPF32[$4 >> 2];
     if ((gjkepa2_impl__EPA__Evaluate_28gjkepa2_impl__GJK__2c_20btVector3_20const__29($6 + 16 | 0, $6 + 18528 | 0, $6) | 0) != 9) {
      if (!HEAP32[$6 + 52 >> 2]) {
       $8 = Math_fround(0.0);
       $9 = Math_fround(0.0);
       $11 = Math_fround(0.0);
       break label$2;
      }
      $3 = $6 + 36 | 0;
      $11 = Math_fround(0.0);
      $4 = 0;
      $9 = Math_fround(0.0);
      $8 = Math_fround(0.0);
      while (1) {
       $0 = HEAP32[$6 + 19036 >> 2];
       $2 = HEAP32[$6 + 18912 >> 2] + ($0 >> 1) | 0;
       $12 = HEAP32[$6 + 19032 >> 2];
       FUNCTION_TABLE[$0 & 1 ? HEAP32[$12 + HEAP32[$2 >> 2] >> 2] : $12]($6, $2, HEAP32[$3 + -16 >> 2]);
       $7 = HEAPF32[$3 >> 2];
       $11 = Math_fround($11 + Math_fround($7 * HEAPF32[$6 + 8 >> 2]));
       $9 = Math_fround($9 + Math_fround($7 * HEAPF32[$6 + 4 >> 2]));
       $8 = Math_fround($8 + Math_fround(HEAPF32[$6 >> 2] * $7));
       $3 = $3 + 4 | 0;
       $4 = $4 + 1 | 0;
       if ($4 >>> 0 < HEAPU32[$6 + 52 >> 2]) {
        continue
       }
       break;
      };
      break label$2;
     }
     HEAP32[$5 >> 2] = 3;
     break label$1;
    }
    HEAP32[$5 >> 2] = 2;
    break label$1;
   }
   $7 = HEAPF32[$1 + 48 >> 2];
   $15 = HEAPF32[$1 + 8 >> 2];
   $13 = HEAPF32[$1 >> 2];
   $16 = HEAPF32[$1 + 4 >> 2];
   $14 = HEAPF32[$1 + 52 >> 2];
   $17 = HEAPF32[$1 + 24 >> 2];
   $18 = HEAPF32[$1 + 16 >> 2];
   $19 = HEAPF32[$1 + 20 >> 2];
   $20 = HEAPF32[$1 + 56 >> 2];
   $21 = HEAPF32[$1 + 40 >> 2];
   $22 = HEAPF32[$1 + 32 >> 2];
   $23 = HEAPF32[$1 + 36 >> 2];
   HEAP32[$5 + 16 >> 2] = 0;
   HEAPF32[$5 + 12 >> 2] = $20 + Math_fround(Math_fround(Math_fround($8 * $22) + Math_fround($9 * $23)) + Math_fround($11 * $21));
   HEAPF32[$5 + 8 >> 2] = $14 + Math_fround(Math_fround(Math_fround($8 * $18) + Math_fround($9 * $19)) + Math_fround($11 * $17));
   HEAPF32[$5 + 4 >> 2] = $7 + Math_fround(Math_fround(Math_fround($8 * $13) + Math_fround($9 * $16)) + Math_fround($11 * $15));
   $12 = 1;
   HEAP32[$5 >> 2] = 1;
   $15 = HEAPF32[$1 + 56 >> 2];
   $13 = HEAPF32[$1 + 40 >> 2];
   $16 = HEAPF32[$1 + 32 >> 2];
   $14 = HEAPF32[$1 + 36 >> 2];
   $17 = HEAPF32[$1 + 52 >> 2];
   $18 = HEAPF32[$1 + 24 >> 2];
   $19 = HEAPF32[$1 + 16 >> 2];
   $20 = HEAPF32[$1 + 20 >> 2];
   $21 = HEAPF32[$1 + 48 >> 2];
   $22 = HEAPF32[$1 + 8 >> 2];
   $23 = HEAPF32[$1 >> 2];
   $26 = HEAPF32[$1 + 4 >> 2];
   HEAP32[$5 + 32 >> 2] = 0;
   HEAP32[$5 + 48 >> 2] = 0;
   $25 = HEAPF32[$6 + 56 >> 2];
   HEAPF32[$5 + 36 >> 2] = -$25;
   $24 = HEAPF32[$6 + 60 >> 2];
   HEAPF32[$5 + 40 >> 2] = -$24;
   $27 = HEAPF32[$6 - -64 >> 2];
   HEAPF32[$5 + 44 >> 2] = -$27;
   $7 = HEAPF32[$6 + 72 >> 2];
   HEAPF32[$5 + 52 >> 2] = -$7;
   $8 = Math_fround($8 - Math_fround($25 * $7));
   $9 = Math_fround($9 - Math_fround($7 * $24));
   $7 = Math_fround($11 - Math_fround($7 * $27));
   HEAPF32[$5 + 20 >> 2] = $21 + Math_fround(Math_fround(Math_fround($23 * $8) + Math_fround($26 * $9)) + Math_fround($22 * $7));
   HEAPF32[$5 + 24 >> 2] = $17 + Math_fround(Math_fround(Math_fround($8 * $19) + Math_fround($9 * $20)) + Math_fround($7 * $18));
   HEAPF32[$5 + 28 >> 2] = $15 + Math_fround(Math_fround(Math_fround($8 * $16) + Math_fround($9 * $14)) + Math_fround($7 * $13));
  }
  global$0 = $6 + 19040 | 0;
  return $12;
 }
 
 function gjkepa2_impl__EPA__Evaluate_28gjkepa2_impl__GJK__2c_20btVector3_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0);
  $18 = global$0 - 16 | 0;
  global$0 = $18;
  label$1 : {
   label$2 : {
    $6 = HEAP32[$1 + 372 >> 2];
    if (HEAPU32[$6 + 32 >> 2] < 2) {
     break label$2
    }
    if (!gjkepa2_impl__GJK__EncloseOrigin_28_29($1)) {
     break label$2
    }
    $3 = HEAP32[$0 + 18496 >> 2];
    if ($3) {
     $4 = HEAP32[$0 + 18508 >> 2];
     $10 = HEAP32[$0 + 18500 >> 2];
     while (1) {
      $8 = HEAP32[$3 + 48 >> 2];
      if ($8) {
       HEAP32[$8 + 44 >> 2] = HEAP32[$3 + 44 >> 2]
      }
      $8 = HEAP32[$3 + 44 >> 2];
      if ($8) {
       HEAP32[$8 + 48 >> 2] = HEAP32[$3 + 48 >> 2]
      }
      if (HEAP32[$0 + 18496 >> 2] == ($3 | 0)) {
       HEAP32[$0 + 18496 >> 2] = HEAP32[$3 + 48 >> 2]
      }
      HEAP32[$3 + 44 >> 2] = 0;
      HEAP32[$3 + 48 >> 2] = HEAP32[$0 + 18504 >> 2];
      $8 = HEAP32[$0 + 18504 >> 2];
      if ($8) {
       HEAP32[$8 + 44 >> 2] = $3
      }
      $10 = $10 + -1 | 0;
      HEAP32[$0 + 18504 >> 2] = $3;
      $4 = $4 + 1 | 0;
      $3 = HEAP32[$0 + 18496 >> 2];
      if ($3) {
       continue
      }
      break;
     };
     HEAP32[$0 + 18508 >> 2] = $4;
     HEAP32[$0 + 18500 >> 2] = $10;
    }
    HEAP32[$0 + 18492 >> 2] = 0;
    HEAP32[$0 >> 2] = 0;
    $4 = HEAP32[$6 >> 2];
    $8 = HEAP32[$6 + 12 >> 2];
    $5 = HEAPF32[$8 + 16 >> 2];
    $13 = Math_fround(HEAPF32[$4 + 16 >> 2] - $5);
    $3 = HEAP32[$6 + 4 >> 2];
    $7 = HEAPF32[$8 + 20 >> 2];
    $11 = Math_fround(HEAPF32[$3 + 20 >> 2] - $7);
    $10 = HEAP32[$6 + 8 >> 2];
    $9 = HEAPF32[$8 + 24 >> 2];
    $12 = Math_fround(HEAPF32[$10 + 24 >> 2] - $9);
    $15 = Math_fround(HEAPF32[$4 + 20 >> 2] - $7);
    $16 = Math_fround(HEAPF32[$3 + 24 >> 2] - $9);
    $17 = Math_fround(HEAPF32[$10 + 16 >> 2] - $5);
    $9 = Math_fround(HEAPF32[$4 + 24 >> 2] - $9);
    $5 = Math_fround(HEAPF32[$3 + 16 >> 2] - $5);
    $7 = Math_fround(HEAPF32[$10 + 20 >> 2] - $7);
    label$9 : {
     if (!(Math_fround(Math_fround(Math_fround(Math_fround($13 * $11) * $12) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($15 * $16) * $17) + Math_fround(Math_fround($9 * $5) * $7)) - Math_fround(Math_fround($13 * $16) * $7)) - Math_fround(Math_fround($15 * $5) * $12))) - Math_fround(Math_fround($9 * $11) * $17)) < Math_fround(0.0))) {
      $8 = $3;
      $3 = $4;
      break label$9;
     }
     HEAP32[$6 + 4 >> 2] = $4;
     HEAP32[$6 >> 2] = $3;
     $8 = HEAP32[$6 + 16 >> 2];
     $14 = $6 + 20 | 0;
     HEAP32[$6 + 16 >> 2] = HEAP32[$14 >> 2];
     HEAP32[$14 >> 2] = $8;
     $8 = $4;
    }
    $8 = gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($0, $3, $8, $10, 1);
    $14 = gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($0, HEAP32[$6 + 4 >> 2], HEAP32[$6 >> 2], HEAP32[$6 + 12 >> 2], 1);
    $4 = gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($0, HEAP32[$6 + 8 >> 2], HEAP32[$6 + 4 >> 2], HEAP32[$6 + 12 >> 2], 1);
    $3 = gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($0, HEAP32[$6 >> 2], HEAP32[$6 + 8 >> 2], HEAP32[$6 + 12 >> 2], 1);
    if (HEAP32[$0 + 18500 >> 2] != 4) {
     break label$2
    }
    $2 = $4;
    $6 = $3;
    $4 = HEAP32[$0 + 18496 >> 2];
    $5 = HEAPF32[$4 + 16 >> 2];
    $3 = HEAP32[$4 + 48 >> 2];
    if ($3) {
     $5 = Math_fround($5 * $5);
     while (1) {
      $7 = HEAPF32[$3 + 16 >> 2];
      $7 = Math_fround($7 * $7);
      $10 = $7 < $5;
      $4 = $10 ? $3 : $4;
      $5 = $10 ? $7 : $5;
      $3 = HEAP32[$3 + 48 >> 2];
      if ($3) {
       continue
      }
      break;
     };
     $5 = HEAPF32[$4 + 16 >> 2];
    }
    $19 = HEAP32[$4 + 28 >> 2];
    $20 = HEAP32[$4 + 24 >> 2];
    $21 = HEAP32[$4 + 20 >> 2];
    $11 = HEAPF32[$4 + 12 >> 2];
    $7 = HEAPF32[$4 + 8 >> 2];
    $9 = HEAPF32[$4 + 4 >> 2];
    $13 = HEAPF32[$4 >> 2];
    HEAP32[$8 + 32 >> 2] = $14;
    HEAP8[$8 + 52 | 0] = 0;
    HEAP32[$14 + 32 >> 2] = $8;
    HEAP8[$14 + 52 | 0] = 0;
    HEAP32[$8 + 36 >> 2] = $2;
    HEAP8[$8 + 53 | 0] = 0;
    HEAP32[$2 + 32 >> 2] = $8;
    HEAP8[$2 + 52 | 0] = 1;
    HEAP32[$8 + 40 >> 2] = $6;
    HEAP8[$8 + 54 | 0] = 0;
    HEAP32[$6 + 32 >> 2] = $8;
    HEAP8[$6 + 52 | 0] = 2;
    HEAP32[$14 + 36 >> 2] = $6;
    HEAP8[$14 + 53 | 0] = 2;
    HEAP32[$6 + 40 >> 2] = $14;
    HEAP8[$6 + 54 | 0] = 1;
    HEAP32[$14 + 40 >> 2] = $2;
    HEAP8[$14 + 54 | 0] = 1;
    HEAP32[$2 + 36 >> 2] = $14;
    $3 = $2 + 53 | 0;
    $8 = 258;
    HEAP8[$3 | 0] = $8;
    HEAP8[$3 + 1 | 0] = $8 >>> 8;
    HEAP32[$2 + 40 >> 2] = $6;
    HEAP8[$6 + 53 | 0] = 2;
    HEAP32[$6 + 36 >> 2] = $2;
    HEAP32[$0 >> 2] = 0;
    $6 = 0;
    while (1) {
     label$13 : {
      label$15 : {
       $3 = HEAP32[$0 + 18492 >> 2];
       if ($3 >>> 0 <= 127) {
        HEAP32[$0 + 18492 >> 2] = $3 + 1;
        $6 = $6 + 1 | 0;
        HEAP8[$4 + 55 | 0] = $6;
        HEAP32[$18 + 8 >> 2] = 0;
        HEAP32[$18 >> 2] = 0;
        HEAP32[$18 + 4 >> 2] = 0;
        $3 = ($3 << 5) + $0 | 0;
        $2 = $3 + 60 | 0;
        gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($1, $4, $2);
        if (!(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$4 >> 2] * HEAPF32[$3 + 76 >> 2]) + Math_fround(HEAPF32[$4 + 4 >> 2] * HEAPF32[$3 + 80 >> 2])) + Math_fround(HEAPF32[$4 + 8 >> 2] * HEAPF32[$3 + 84 >> 2])) - HEAPF32[$4 + 16 >> 2]) > Math_fround(9.999999747378752e-05))) {
         HEAP32[$0 >> 2] = 7;
         break label$13;
        }
        $10 = $4 + 32 | 0;
        $3 = 52;
        while (1) {
         $14 = gjkepa2_impl__EPA__expand_28unsigned_20int_2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__EPA__sFace__2c_20unsigned_20int_2c_20gjkepa2_impl__EPA__sHorizon__29($0, $6, $2, HEAP32[$10 >> 2], HEAPU8[$3 + $4 | 0], $18);
         if (!$14) {
          break label$15
         }
         $8 = $3 + -51 | 0;
         $10 = $10 + 4 | 0;
         $3 = $3 + 1 | 0;
         if ($8 >>> 0 < 3) {
          continue
         }
         break;
        };
        break label$15;
       }
       HEAP32[$0 >> 2] = 6;
       break label$13;
      }
      if (!(HEAPU32[$18 + 8 >> 2] > 2 & $14)) {
       HEAP32[$0 >> 2] = 4;
       break label$13;
      }
      $3 = HEAP32[$18 >> 2];
      HEAP8[$3 + 53 | 0] = 2;
      $10 = HEAP32[$18 + 4 >> 2];
      HEAP32[$3 + 36 >> 2] = $10;
      HEAP32[$10 + 40 >> 2] = $3;
      HEAP8[$10 + 54 | 0] = 1;
      $3 = HEAP32[$4 + 48 >> 2];
      if ($3) {
       HEAP32[$3 + 44 >> 2] = HEAP32[$4 + 44 >> 2]
      }
      $3 = HEAP32[$4 + 44 >> 2];
      if ($3) {
       HEAP32[$3 + 48 >> 2] = HEAP32[$4 + 48 >> 2]
      }
      if (HEAP32[$0 + 18496 >> 2] == ($4 | 0)) {
       HEAP32[$0 + 18496 >> 2] = HEAP32[$4 + 48 >> 2]
      }
      HEAP32[$4 + 44 >> 2] = 0;
      HEAP32[$4 + 48 >> 2] = HEAP32[$0 + 18504 >> 2];
      HEAP32[$0 + 18500 >> 2] = HEAP32[$0 + 18500 >> 2] + -1;
      $3 = HEAP32[$0 + 18504 >> 2];
      if ($3) {
       HEAP32[$3 + 44 >> 2] = $4
      }
      HEAP32[$0 + 18504 >> 2] = $4;
      HEAP32[$0 + 18508 >> 2] = HEAP32[$0 + 18508 >> 2] + 1;
      $4 = HEAP32[$0 + 18496 >> 2];
      $5 = HEAPF32[$4 + 16 >> 2];
      $3 = HEAP32[$4 + 48 >> 2];
      if ($3) {
       $5 = Math_fround($5 * $5);
       while (1) {
        $7 = HEAPF32[$3 + 16 >> 2];
        $7 = Math_fround($7 * $7);
        $10 = $7 < $5;
        $4 = $10 ? $3 : $4;
        $5 = $10 ? $7 : $5;
        $3 = HEAP32[$3 + 48 >> 2];
        if ($3) {
         continue
        }
        break;
       };
       $5 = HEAPF32[$4 + 16 >> 2];
      }
      $19 = HEAP32[$4 + 28 >> 2];
      $20 = HEAP32[$4 + 24 >> 2];
      $21 = HEAP32[$4 + 20 >> 2];
      $11 = HEAPF32[$4 + 12 >> 2];
      $7 = HEAPF32[$4 + 8 >> 2];
      $9 = HEAPF32[$4 + 4 >> 2];
      $13 = HEAPF32[$4 >> 2];
      if (($6 | 0) != 255) {
       continue
      }
     }
     break;
    };
    HEAPF32[$0 + 56 >> 2] = $5;
    HEAPF32[$0 + 40 >> 2] = $13;
    HEAPF32[$0 + 52 >> 2] = $11;
    HEAPF32[$0 + 48 >> 2] = $7;
    HEAPF32[$0 + 44 >> 2] = $9;
    $3 = $0 + 20 | 0;
    $13 = Math_fround($13 * $5);
    $11 = Math_fround(HEAPF32[$20 + 16 >> 2] - $13);
    $4 = $19 + 20 | 0;
    $9 = Math_fround($9 * $5);
    $12 = Math_fround(HEAPF32[$4 >> 2] - $9);
    $10 = $20 + 20 | 0;
    $15 = Math_fround(HEAPF32[$10 >> 2] - $9);
    $16 = Math_fround(HEAPF32[$19 + 16 >> 2] - $13);
    $17 = Math_fround(Math_fround($11 * $12) - Math_fround($15 * $16));
    $8 = $19 + 24 | 0;
    $5 = Math_fround($7 * $5);
    $7 = Math_fround(HEAPF32[$8 >> 2] - $5);
    $22 = Math_fround($15 * $7);
    $6 = $20 + 24 | 0;
    $15 = Math_fround(HEAPF32[$6 >> 2] - $5);
    $12 = Math_fround($22 - Math_fround($15 * $12));
    $7 = Math_fround(Math_fround($15 * $16) - Math_fround($11 * $7));
    $7 = Math_fround(Math_sqrt(Math_fround(Math_fround($17 * $17) + Math_fround(Math_fround($12 * $12) + Math_fround($7 * $7)))));
    HEAPF32[$3 >> 2] = $7;
    $2 = $0 + 24 | 0;
    $11 = Math_fround(HEAPF32[$19 + 16 >> 2] - $13);
    $14 = $21 + 20 | 0;
    $12 = Math_fround(HEAPF32[$14 >> 2] - $9);
    $15 = Math_fround(HEAPF32[$4 >> 2] - $9);
    $16 = Math_fround(HEAPF32[$21 + 16 >> 2] - $13);
    $17 = Math_fround(Math_fround($11 * $12) - Math_fround($15 * $16));
    $22 = Math_fround($17 * $17);
    $4 = $21 + 24 | 0;
    $17 = Math_fround(HEAPF32[$4 >> 2] - $5);
    $23 = Math_fround($15 * $17);
    $15 = Math_fround(HEAPF32[$8 >> 2] - $5);
    $12 = Math_fround($23 - Math_fround($15 * $12));
    $11 = Math_fround(Math_fround($15 * $16) - Math_fround($11 * $17));
    $11 = Math_fround(Math_sqrt(Math_fround($22 + Math_fround(Math_fround($12 * $12) + Math_fround($11 * $11)))));
    HEAPF32[$2 >> 2] = $11;
    HEAP32[$0 + 4 >> 2] = $21;
    HEAP32[$0 + 36 >> 2] = 3;
    HEAP32[$0 + 12 >> 2] = $19;
    HEAP32[$0 + 8 >> 2] = $20;
    $12 = Math_fround(HEAPF32[$21 + 16 >> 2] - $13);
    $15 = Math_fround(HEAPF32[$10 >> 2] - $9);
    $9 = Math_fround(HEAPF32[$14 >> 2] - $9);
    $13 = Math_fround(HEAPF32[$20 + 16 >> 2] - $13);
    $16 = Math_fround(Math_fround($12 * $15) - Math_fround($9 * $13));
    $17 = Math_fround($16 * $16);
    $16 = Math_fround(HEAPF32[$6 >> 2] - $5);
    $5 = Math_fround(HEAPF32[$4 >> 2] - $5);
    $9 = Math_fround(Math_fround($9 * $16) - Math_fround($5 * $15));
    $5 = Math_fround(Math_fround($5 * $13) - Math_fround($12 * $16));
    $5 = Math_fround(Math_sqrt(Math_fround($17 + Math_fround(Math_fround($9 * $9) + Math_fround($5 * $5)))));
    $9 = $5;
    $5 = Math_fround($5 + Math_fround($7 + $11));
    HEAPF32[$0 + 28 >> 2] = $9 / $5;
    HEAPF32[$2 >> 2] = $11 / $5;
    HEAPF32[$3 >> 2] = $7 / $5;
    $3 = HEAP32[$0 >> 2];
    break label$1;
   }
   HEAP32[$0 >> 2] = 8;
   $5 = HEAPF32[$2 + 8 >> 2];
   $7 = HEAPF32[$2 + 4 >> 2];
   $9 = HEAPF32[$2 >> 2];
   HEAP32[$0 + 52 >> 2] = 0;
   $13 = Math_fround(-$9);
   HEAPF32[$0 + 40 >> 2] = $13;
   $11 = Math_fround(-$7);
   HEAPF32[$0 + 44 >> 2] = $11;
   $12 = Math_fround(-$5);
   HEAPF32[$0 + 48 >> 2] = $12;
   $5 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($7 * $7)) + Math_fround($5 * $5))));
   label$26 : {
    if (!!($5 > Math_fround(0.0))) {
     $5 = Math_fround(Math_fround(1.0) / $5);
     HEAPF32[$0 + 48 >> 2] = $5 * $12;
     HEAPF32[$0 + 44 >> 2] = $5 * $11;
     HEAPF32[$0 + 40 >> 2] = $5 * $13;
     break label$26;
    }
    HEAP32[$0 + 48 >> 2] = 0;
    HEAP32[$0 + 40 >> 2] = 1065353216;
    HEAP32[$0 + 44 >> 2] = 0;
   }
   HEAP32[$0 + 52 >> 2] = 0;
   HEAP32[$0 + 56 >> 2] = 0;
   HEAP32[$0 + 36 >> 2] = 1;
   HEAP32[$0 + 20 >> 2] = 1065353216;
   HEAP32[$0 + 4 >> 2] = HEAP32[$6 >> 2];
   $3 = 8;
  }
  global$0 = $18 + 16 | 0;
  return $3;
 }
 
 function gjkepa2_impl__GJK__EncloseOrigin_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  label$1 : {
   label$2 : {
    $1 = HEAP32[$0 + 372 >> 2];
    $2 = HEAP32[$1 + 32 >> 2] + -1 | 0;
    label$3 : {
     if ($2 >>> 0 > 3) {
      break label$3
     }
     label$4 : {
      label$5 : {
       switch ($2 - 1 | 0) {
       default:
        HEAP32[$3 + 28 >> 2] = 0;
        HEAP32[$1 + 32 >> 2] = 2;
        HEAP32[$1 + 20 >> 2] = 0;
        $2 = HEAP32[$0 + 364 >> 2] + -1 | 0;
        HEAP32[$0 + 364 >> 2] = $2;
        HEAP32[$3 + 20 >> 2] = 0;
        HEAP32[$3 + 24 >> 2] = 0;
        $2 = HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2];
        HEAP32[$1 + 4 >> 2] = $2;
        HEAP32[$3 + 16 >> 2] = 1065353216;
        gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3 + 16 | 0, $2);
        if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
         break label$2
        }
        $1 = HEAP32[$0 + 372 >> 2];
        $5 = HEAP32[$1 + 32 >> 2] + -1 | 0;
        $4 = HEAP32[$0 + 364 >> 2];
        $2 = HEAP32[($5 << 2) + $1 >> 2];
        HEAP32[(($4 << 2) + $0 | 0) + 348 >> 2] = $2;
        HEAP32[$1 + 32 >> 2] = $5;
        $1 = HEAP32[$0 + 372 >> 2];
        HEAP32[$0 + 364 >> 2] = $4;
        $4 = HEAP32[$1 + 32 >> 2];
        HEAP32[$1 + 32 >> 2] = $4 + 1;
        $1 = ($4 << 2) + $1 | 0;
        HEAP32[$1 >> 2] = $2;
        HEAP32[$3 + 12 >> 2] = 0;
        HEAPF32[$3 + 8 >> 2] = -HEAPF32[$3 + 24 >> 2];
        HEAPF32[$3 + 4 >> 2] = -HEAPF32[$3 + 20 >> 2];
        HEAPF32[$3 >> 2] = -HEAPF32[$3 + 16 >> 2];
        HEAP32[$1 + 16 >> 2] = 0;
        gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3, $2);
        if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
         break label$2
        }
        $1 = HEAP32[$0 + 372 >> 2];
        $2 = HEAP32[$1 + 32 >> 2] + -1 | 0;
        HEAP32[$1 + 32 >> 2] = $2;
        $4 = HEAP32[$0 + 364 >> 2];
        $1 = HEAP32[($2 << 2) + $1 >> 2];
        HEAP32[(($4 << 2) + $0 | 0) + 348 >> 2] = $1;
        $5 = $3 + 24 | 0;
        HEAP32[$5 >> 2] = 0;
        HEAP32[$5 + 4 >> 2] = 0;
        HEAP32[$0 + 364 >> 2] = $4;
        $2 = HEAP32[$0 + 372 >> 2];
        $4 = HEAP32[$2 + 32 >> 2];
        HEAP32[$2 + 32 >> 2] = $4 + 1;
        HEAP32[$3 + 16 >> 2] = 0;
        HEAP32[$3 + 20 >> 2] = 0;
        $2 = ($4 << 2) + $2 | 0;
        HEAP32[$2 >> 2] = $1;
        HEAP32[$3 + 20 >> 2] = 1065353216;
        HEAP32[$2 + 16 >> 2] = 0;
        gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3 + 16 | 0, $1);
        if (!gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
         break label$4
        }
        break label$2;
       case 0:
        $2 = HEAP32[$1 >> 2];
        $7 = HEAPF32[$2 + 20 >> 2];
        $4 = HEAP32[$1 + 4 >> 2];
        $6 = HEAPF32[$4 + 20 >> 2];
        $8 = HEAPF32[$2 + 24 >> 2];
        $9 = HEAPF32[$4 + 24 >> 2];
        $13 = HEAPF32[$2 + 16 >> 2];
        $15 = HEAPF32[$4 + 16 >> 2];
        HEAP32[$3 + 28 >> 2] = 0;
        $14 = Math_fround($6 - $7);
        $11 = Math_fround($14 * Math_fround(0.0));
        $10 = Math_fround($9 - $8);
        $12 = Math_fround($10 * Math_fround(0.0));
        $6 = Math_fround($11 - $12);
        HEAPF32[$3 + 16 >> 2] = $6;
        $13 = Math_fround($15 - $13);
        $7 = Math_fround($13 * Math_fround(0.0));
        $8 = Math_fround($10 - $7);
        HEAPF32[$3 + 20 >> 2] = $8;
        $9 = Math_fround($7 - $14);
        HEAPF32[$3 + 24 >> 2] = $9;
        if (!!(Math_fround(Math_fround($9 * $9) + Math_fround(Math_fround($6 * $6) + Math_fround($8 * $8))) > Math_fround(0.0))) {
         HEAP32[$1 + 32 >> 2] = 3;
         HEAP32[$1 + 24 >> 2] = 0;
         $2 = HEAP32[$0 + 364 >> 2] + -1 | 0;
         HEAP32[$0 + 364 >> 2] = $2;
         $2 = HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2];
         HEAP32[$1 + 8 >> 2] = $2;
         gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3 + 16 | 0, $2);
         if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
          break label$2
         }
         $1 = HEAP32[$0 + 372 >> 2];
         $5 = HEAP32[$1 + 32 >> 2] + -1 | 0;
         $4 = HEAP32[$0 + 364 >> 2];
         $2 = HEAP32[($5 << 2) + $1 >> 2];
         HEAP32[(($4 << 2) + $0 | 0) + 348 >> 2] = $2;
         HEAP32[$1 + 32 >> 2] = $5;
         $1 = HEAP32[$0 + 372 >> 2];
         HEAP32[$0 + 364 >> 2] = $4;
         $4 = HEAP32[$1 + 32 >> 2];
         HEAP32[$1 + 32 >> 2] = $4 + 1;
         $1 = ($4 << 2) + $1 | 0;
         HEAP32[$1 >> 2] = $2;
         HEAP32[$3 + 12 >> 2] = 0;
         HEAPF32[$3 + 8 >> 2] = -HEAPF32[$3 + 24 >> 2];
         HEAPF32[$3 + 4 >> 2] = -HEAPF32[$3 + 20 >> 2];
         HEAPF32[$3 >> 2] = -HEAPF32[$3 + 16 >> 2];
         HEAP32[$1 + 16 >> 2] = 0;
         gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3, $2);
         if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
          break label$2
         }
         $2 = HEAP32[$0 + 364 >> 2];
         HEAP32[$0 + 364 >> 2] = $2 + 1;
         $1 = HEAP32[$0 + 372 >> 2];
         $4 = HEAP32[$1 + 32 >> 2] + -1 | 0;
         HEAP32[$1 + 32 >> 2] = $4;
         HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2] = HEAP32[($4 << 2) + $1 >> 2];
        }
        HEAP32[$3 + 28 >> 2] = 0;
        $6 = Math_fround($12 - $7);
        HEAPF32[$3 + 20 >> 2] = $6;
        $8 = Math_fround($11 - $10);
        HEAPF32[$3 + 16 >> 2] = $8;
        $9 = Math_fround($13 - $11);
        HEAPF32[$3 + 24 >> 2] = $9;
        if (Math_fround(Math_fround($9 * $9) + Math_fround(Math_fround($8 * $8) + Math_fround($6 * $6))) > Math_fround(0.0)) {
         $2 = HEAP32[$0 + 364 >> 2] + -1 | 0;
         HEAP32[$0 + 364 >> 2] = $2;
         $1 = HEAP32[$0 + 372 >> 2];
         $4 = HEAP32[$1 + 32 >> 2];
         HEAP32[$1 + 32 >> 2] = $4 + 1;
         $1 = ($4 << 2) + $1 | 0;
         HEAP32[$1 + 16 >> 2] = 0;
         $2 = HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2];
         HEAP32[$1 >> 2] = $2;
         gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3 + 16 | 0, $2);
         if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
          break label$2
         }
         $1 = HEAP32[$0 + 372 >> 2];
         $5 = HEAP32[$1 + 32 >> 2] + -1 | 0;
         $4 = HEAP32[$0 + 364 >> 2];
         $2 = HEAP32[($5 << 2) + $1 >> 2];
         HEAP32[(($4 << 2) + $0 | 0) + 348 >> 2] = $2;
         HEAP32[$1 + 32 >> 2] = $5;
         $1 = HEAP32[$0 + 372 >> 2];
         HEAP32[$0 + 364 >> 2] = $4;
         $4 = HEAP32[$1 + 32 >> 2];
         HEAP32[$1 + 32 >> 2] = $4 + 1;
         $1 = ($4 << 2) + $1 | 0;
         HEAP32[$1 >> 2] = $2;
         HEAP32[$3 + 12 >> 2] = 0;
         HEAPF32[$3 + 8 >> 2] = -HEAPF32[$3 + 24 >> 2];
         HEAPF32[$3 + 4 >> 2] = -HEAPF32[$3 + 20 >> 2];
         HEAPF32[$3 >> 2] = -HEAPF32[$3 + 16 >> 2];
         HEAP32[$1 + 16 >> 2] = 0;
         gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3, $2);
         if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
          break label$2
         }
         $2 = HEAP32[$0 + 364 >> 2];
         HEAP32[$0 + 364 >> 2] = $2 + 1;
         $1 = HEAP32[$0 + 372 >> 2];
         $4 = HEAP32[$1 + 32 >> 2] + -1 | 0;
         HEAP32[$1 + 32 >> 2] = $4;
         HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2] = HEAP32[($4 << 2) + $1 >> 2];
        }
        HEAP32[$3 + 28 >> 2] = 0;
        $6 = Math_fround($12 - $13);
        HEAPF32[$3 + 20 >> 2] = $6;
        $8 = Math_fround($14 - $12);
        HEAPF32[$3 + 16 >> 2] = $8;
        $7 = Math_fround($7 - $11);
        HEAPF32[$3 + 24 >> 2] = $7;
        if (!(Math_fround(Math_fround($7 * $7) + Math_fround(Math_fround($8 * $8) + Math_fround($6 * $6))) > Math_fround(0.0))) {
         break label$3
        }
        $2 = HEAP32[$0 + 364 >> 2] + -1 | 0;
        HEAP32[$0 + 364 >> 2] = $2;
        $1 = HEAP32[$0 + 372 >> 2];
        $4 = HEAP32[$1 + 32 >> 2];
        HEAP32[$1 + 32 >> 2] = $4 + 1;
        $1 = ($4 << 2) + $1 | 0;
        HEAP32[$1 + 16 >> 2] = 0;
        $2 = HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2];
        HEAP32[$1 >> 2] = $2;
        gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3 + 16 | 0, $2);
        if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
         break label$2
        }
        $1 = HEAP32[$0 + 372 >> 2];
        $5 = HEAP32[$1 + 32 >> 2] + -1 | 0;
        $4 = HEAP32[$0 + 364 >> 2];
        $2 = HEAP32[($5 << 2) + $1 >> 2];
        HEAP32[(($4 << 2) + $0 | 0) + 348 >> 2] = $2;
        HEAP32[$1 + 32 >> 2] = $5;
        $1 = HEAP32[$0 + 372 >> 2];
        HEAP32[$0 + 364 >> 2] = $4;
        $4 = HEAP32[$1 + 32 >> 2];
        HEAP32[$1 + 32 >> 2] = $4 + 1;
        $1 = ($4 << 2) + $1 | 0;
        HEAP32[$1 >> 2] = $2;
        HEAP32[$3 + 12 >> 2] = 0;
        HEAPF32[$3 + 8 >> 2] = -HEAPF32[$3 + 24 >> 2];
        HEAPF32[$3 + 4 >> 2] = -HEAPF32[$3 + 20 >> 2];
        HEAPF32[$3 >> 2] = -HEAPF32[$3 + 16 >> 2];
        HEAP32[$1 + 16 >> 2] = 0;
        gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3, $2);
        if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
         break label$2
        }
        $2 = HEAP32[$0 + 364 >> 2];
        HEAP32[$0 + 364 >> 2] = $2 + 1;
        $1 = HEAP32[$0 + 372 >> 2];
        $4 = HEAP32[$1 + 32 >> 2] + -1 | 0;
        HEAP32[$1 + 32 >> 2] = $4;
        HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2] = HEAP32[($4 << 2) + $1 >> 2];
        break label$3;
       case 1:
        HEAP32[$3 + 28 >> 2] = 0;
        $2 = HEAP32[$1 + 4 >> 2];
        $4 = HEAP32[$1 >> 2];
        $7 = HEAPF32[$4 + 20 >> 2];
        $8 = Math_fround(HEAPF32[$2 + 20 >> 2] - $7);
        $5 = HEAP32[$1 + 8 >> 2];
        $6 = HEAPF32[$4 + 24 >> 2];
        $9 = Math_fround(HEAPF32[$5 + 24 >> 2] - $6);
        $6 = Math_fround(HEAPF32[$2 + 24 >> 2] - $6);
        $11 = Math_fround(HEAPF32[$5 + 20 >> 2] - $7);
        $7 = Math_fround(Math_fround($8 * $9) - Math_fround($6 * $11));
        HEAPF32[$3 + 16 >> 2] = $7;
        $10 = HEAPF32[$4 + 16 >> 2];
        $12 = Math_fround(HEAPF32[$5 + 16 >> 2] - $10);
        $10 = Math_fround(HEAPF32[$2 + 16 >> 2] - $10);
        $6 = Math_fround(Math_fround($6 * $12) - Math_fround($10 * $9));
        HEAPF32[$3 + 20 >> 2] = $6;
        $8 = Math_fround(Math_fround($10 * $11) - Math_fround($8 * $12));
        HEAPF32[$3 + 24 >> 2] = $8;
        if (!(Math_fround(Math_fround($8 * $8) + Math_fround(Math_fround($7 * $7) + Math_fround($6 * $6))) > Math_fround(0.0))) {
         break label$3
        }
        $5 = $1 + 28 | 0;
        HEAP32[$5 >> 2] = 0;
        HEAP32[$5 + 4 >> 2] = 4;
        $2 = HEAP32[$0 + 364 >> 2] + -1 | 0;
        HEAP32[$0 + 364 >> 2] = $2;
        $2 = HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2];
        HEAP32[$1 + 12 >> 2] = $2;
        gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3 + 16 | 0, $2);
        if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
         break label$2
        }
        $1 = HEAP32[$0 + 372 >> 2];
        $5 = HEAP32[$1 + 32 >> 2] + -1 | 0;
        $2 = HEAP32[$0 + 364 >> 2];
        $4 = HEAP32[($5 << 2) + $1 >> 2];
        HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2] = $4;
        HEAP32[$1 + 32 >> 2] = $5;
        $1 = HEAP32[$0 + 372 >> 2];
        HEAP32[$0 + 364 >> 2] = $2;
        $5 = HEAP32[$1 + 32 >> 2];
        HEAP32[$1 + 32 >> 2] = $5 + 1;
        $1 = ($5 << 2) + $1 | 0;
        HEAP32[$1 >> 2] = $4;
        HEAP32[$3 + 12 >> 2] = 0;
        HEAPF32[$3 + 8 >> 2] = -HEAPF32[$3 + 24 >> 2];
        HEAPF32[$3 + 4 >> 2] = -HEAPF32[$3 + 20 >> 2];
        HEAPF32[$3 >> 2] = -HEAPF32[$3 + 16 >> 2];
        HEAP32[$1 + 16 >> 2] = 0;
        gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3, $4);
        $2 = 1;
        if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
         break label$1
        }
        $2 = HEAP32[$0 + 364 >> 2];
        HEAP32[$0 + 364 >> 2] = $2 + 1;
        $1 = HEAP32[$0 + 372 >> 2];
        $4 = HEAP32[$1 + 32 >> 2] + -1 | 0;
        HEAP32[$1 + 32 >> 2] = $4;
        HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2] = HEAP32[($4 << 2) + $1 >> 2];
        break label$3;
       case 2:
        break label$5;
       };
      }
      $0 = HEAP32[$1 >> 2];
      $4 = HEAP32[$1 + 12 >> 2];
      $7 = HEAPF32[$4 + 16 >> 2];
      $9 = Math_fround(HEAPF32[$0 + 16 >> 2] - $7);
      $5 = HEAP32[$1 + 4 >> 2];
      $6 = HEAPF32[$4 + 20 >> 2];
      $11 = Math_fround(HEAPF32[$5 + 20 >> 2] - $6);
      $1 = HEAP32[$1 + 8 >> 2];
      $8 = HEAPF32[$4 + 24 >> 2];
      $10 = Math_fround(HEAPF32[$1 + 24 >> 2] - $8);
      $12 = Math_fround(HEAPF32[$0 + 20 >> 2] - $6);
      $14 = Math_fround(HEAPF32[$5 + 24 >> 2] - $8);
      $13 = Math_fround(HEAPF32[$1 + 16 >> 2] - $7);
      $8 = Math_fround(HEAPF32[$0 + 24 >> 2] - $8);
      $7 = Math_fround(HEAPF32[$5 + 16 >> 2] - $7);
      $6 = Math_fround(HEAPF32[$1 + 20 >> 2] - $6);
      $7 = Math_fround(Math_fround(Math_fround(Math_fround($9 * $11) * $10) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($12 * $14) * $13) + Math_fround(Math_fround($8 * $7) * $6)) - Math_fround(Math_fround($9 * $14) * $6)) - Math_fround(Math_fround($12 * $7) * $10))) - Math_fround(Math_fround($8 * $11) * $13));
      $2 = 1;
      if ($7 != Math_fround(0.0) & $7 == $7) {
       break label$1
      }
      break label$3;
     }
     $1 = HEAP32[$0 + 372 >> 2];
     $5 = HEAP32[$1 + 32 >> 2] + -1 | 0;
     $4 = HEAP32[$0 + 364 >> 2];
     $2 = HEAP32[($5 << 2) + $1 >> 2];
     HEAP32[(($4 << 2) + $0 | 0) + 348 >> 2] = $2;
     HEAP32[$1 + 32 >> 2] = $5;
     $1 = HEAP32[$0 + 372 >> 2];
     HEAP32[$0 + 364 >> 2] = $4;
     $4 = HEAP32[$1 + 32 >> 2];
     HEAP32[$1 + 32 >> 2] = $4 + 1;
     $1 = ($4 << 2) + $1 | 0;
     HEAP32[$1 >> 2] = $2;
     HEAP32[$3 + 12 >> 2] = 0;
     HEAPF32[$3 + 8 >> 2] = -HEAPF32[$3 + 24 >> 2];
     HEAPF32[$3 + 4 >> 2] = -HEAPF32[$3 + 20 >> 2];
     HEAPF32[$3 >> 2] = -HEAPF32[$3 + 16 >> 2];
     HEAP32[$1 + 16 >> 2] = 0;
     gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3, $2);
     if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
      break label$2
     }
     $1 = HEAP32[$0 + 372 >> 2];
     $2 = HEAP32[$1 + 32 >> 2] + -1 | 0;
     HEAP32[$1 + 32 >> 2] = $2;
     $4 = HEAP32[$0 + 364 >> 2];
     $1 = HEAP32[($2 << 2) + $1 >> 2];
     HEAP32[(($4 << 2) + $0 | 0) + 348 >> 2] = $1;
     $2 = $3 + 24 | 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     HEAP32[$2 >> 2] = 1065353216;
     HEAP32[$0 + 364 >> 2] = $4;
     $2 = HEAP32[$0 + 372 >> 2];
     $4 = HEAP32[$2 + 32 >> 2];
     HEAP32[$2 + 32 >> 2] = $4 + 1;
     HEAP32[$3 + 16 >> 2] = 0;
     HEAP32[$3 + 20 >> 2] = 0;
     $2 = ($4 << 2) + $2 | 0;
     HEAP32[$2 >> 2] = $1;
     HEAP32[$2 + 16 >> 2] = 0;
     gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3 + 16 | 0, $1);
     if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
      break label$2
     }
     $1 = HEAP32[$0 + 372 >> 2];
     $5 = HEAP32[$1 + 32 >> 2] + -1 | 0;
     $4 = HEAP32[$0 + 364 >> 2];
     $2 = HEAP32[($5 << 2) + $1 >> 2];
     HEAP32[(($4 << 2) + $0 | 0) + 348 >> 2] = $2;
     HEAP32[$1 + 32 >> 2] = $5;
     $1 = HEAP32[$0 + 372 >> 2];
     HEAP32[$0 + 364 >> 2] = $4;
     $4 = HEAP32[$1 + 32 >> 2];
     HEAP32[$1 + 32 >> 2] = $4 + 1;
     $1 = ($4 << 2) + $1 | 0;
     HEAP32[$1 >> 2] = $2;
     HEAP32[$3 + 12 >> 2] = 0;
     HEAPF32[$3 + 8 >> 2] = -HEAPF32[$3 + 24 >> 2];
     HEAPF32[$3 + 4 >> 2] = -HEAPF32[$3 + 20 >> 2];
     HEAPF32[$3 >> 2] = -HEAPF32[$3 + 16 >> 2];
     HEAP32[$1 + 16 >> 2] = 0;
     gjkepa2_impl__GJK__getsupport_28btVector3_20const__2c_20gjkepa2_impl__GJK__sSV__29_20const($0, $3, $2);
     if (gjkepa2_impl__GJK__EncloseOrigin_28_29($0)) {
      break label$2
     }
     $2 = HEAP32[$0 + 364 >> 2];
     HEAP32[$0 + 364 >> 2] = $2 + 1;
     $1 = HEAP32[$0 + 372 >> 2];
     $4 = HEAP32[$1 + 32 >> 2] + -1 | 0;
     HEAP32[$1 + 32 >> 2] = $4;
     HEAP32[(($2 << 2) + $0 | 0) + 348 >> 2] = HEAP32[($4 << 2) + $1 >> 2];
    }
    $2 = 0;
    break label$1;
   }
   $2 = 1;
  }
  global$0 = $3 + 32 | 0;
  return $2;
 }
 
 function gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0);
  $5 = HEAP32[$0 + 18504 >> 2];
  if ($5) {
   $6 = HEAP32[$5 + 48 >> 2];
   if ($6) {
    HEAP32[$6 + 44 >> 2] = HEAP32[$5 + 44 >> 2]
   }
   $6 = HEAP32[$5 + 44 >> 2];
   if ($6) {
    HEAP32[$6 + 48 >> 2] = HEAP32[$5 + 48 >> 2]
   }
   if (HEAP32[$0 + 18504 >> 2] == ($5 | 0)) {
    HEAP32[$0 + 18504 >> 2] = HEAP32[$5 + 48 >> 2]
   }
   HEAP32[$5 + 44 >> 2] = 0;
   HEAP32[$5 + 48 >> 2] = HEAP32[$0 + 18496 >> 2];
   $6 = $0 + 18508 | 0;
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + -1;
   $6 = HEAP32[$0 + 18496 >> 2];
   if ($6) {
    HEAP32[$6 + 44 >> 2] = $5
   }
   HEAP32[$0 + 18496 >> 2] = $5;
   $6 = $0 + 18500 | 0;
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] + 1;
   HEAP8[$5 + 55 | 0] = 0;
   HEAP32[$5 + 28 >> 2] = $3;
   HEAP32[$5 + 24 >> 2] = $2;
   HEAP32[$5 + 20 >> 2] = $1;
   $10 = HEAPF32[$2 + 20 >> 2];
   $11 = HEAPF32[$3 + 24 >> 2];
   $12 = HEAPF32[$2 + 24 >> 2];
   $7 = HEAPF32[$1 + 24 >> 2];
   $9 = HEAPF32[$1 + 20 >> 2];
   $13 = HEAPF32[$3 + 20 >> 2];
   $14 = HEAPF32[$3 + 16 >> 2];
   $16 = HEAPF32[$2 + 16 >> 2];
   $8 = HEAPF32[$1 + 16 >> 2];
   HEAP32[$5 + 12 >> 2] = 0;
   $10 = Math_fround($10 - $9);
   $11 = Math_fround($11 - $7);
   $12 = Math_fround($12 - $7);
   $13 = Math_fround($13 - $9);
   $7 = Math_fround(Math_fround($10 * $11) - Math_fround($12 * $13));
   HEAPF32[$5 >> 2] = $7;
   $14 = Math_fround($14 - $8);
   $8 = Math_fround($16 - $8);
   $9 = Math_fround(Math_fround($12 * $14) - Math_fround($8 * $11));
   HEAPF32[$5 + 4 >> 2] = $9;
   $8 = Math_fround(Math_fround($8 * $13) - Math_fround($10 * $14));
   HEAPF32[$5 + 8 >> 2] = $8;
   $6 = 2;
   label$6 : {
    $7 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($9 * $9)) + Math_fround($8 * $8))));
    if (!($7 > Math_fround(9.999999747378752e-05))) {
     break label$6
    }
    $15 = $5 + 16 | 0;
    label$7 : {
     if (gjkepa2_impl__EPA__getedgedist_28gjkepa2_impl__EPA__sFace__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20float__29($5, $1, $2, $15)) {
      break label$7
     }
     if (gjkepa2_impl__EPA__getedgedist_28gjkepa2_impl__EPA__sFace__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20float__29($5, $2, $3, $15)) {
      break label$7
     }
     if (gjkepa2_impl__EPA__getedgedist_28gjkepa2_impl__EPA__sFace__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20float__29($5, $3, $1, $15)) {
      break label$7
     }
     HEAPF32[$5 + 16 >> 2] = Math_fround(Math_fround(Math_fround(HEAPF32[$1 + 16 >> 2] * HEAPF32[$5 >> 2]) + Math_fround(HEAPF32[$1 + 20 >> 2] * HEAPF32[$5 + 4 >> 2])) + Math_fround(HEAPF32[$1 + 24 >> 2] * HEAPF32[$5 + 8 >> 2])) / $7;
    }
    $7 = Math_fround(Math_fround(1.0) / $7);
    HEAPF32[$5 >> 2] = $7 * HEAPF32[$5 >> 2];
    HEAPF32[$5 + 4 >> 2] = $7 * HEAPF32[$5 + 4 >> 2];
    HEAPF32[$5 + 8 >> 2] = $7 * HEAPF32[$5 + 8 >> 2];
    if ($4) {
     return $5
    }
    $6 = 3;
    if (!(HEAPF32[$15 >> 2] >= Math_fround(-9.999999747378752e-06))) {
     break label$6
    }
    return $5;
   }
   HEAP32[$0 >> 2] = $6;
   $1 = HEAP32[$5 + 48 >> 2];
   if ($1) {
    HEAP32[$1 + 44 >> 2] = HEAP32[$5 + 44 >> 2]
   }
   $1 = HEAP32[$5 + 44 >> 2];
   if ($1) {
    HEAP32[$1 + 48 >> 2] = HEAP32[$5 + 48 >> 2]
   }
   if (HEAP32[$0 + 18496 >> 2] == ($5 | 0)) {
    HEAP32[$0 + 18496 >> 2] = HEAP32[$5 + 48 >> 2]
   }
   HEAP32[$5 + 44 >> 2] = 0;
   HEAP32[$5 + 48 >> 2] = HEAP32[$0 + 18504 >> 2];
   HEAP32[$0 + 18500 >> 2] = HEAP32[$0 + 18500 >> 2] + -1;
   $1 = HEAP32[$0 + 18504 >> 2];
   if ($1) {
    HEAP32[$1 + 44 >> 2] = $5
   }
   HEAP32[$0 + 18504 >> 2] = $5;
   HEAP32[$0 + 18508 >> 2] = HEAP32[$0 + 18508 >> 2] + 1;
   return 0;
  }
  HEAP32[$0 >> 2] = 5;
  return 0;
 }
 
 function gjkepa2_impl__EPA__expand_28unsigned_20int_2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__EPA__sFace__2c_20unsigned_20int_2c_20gjkepa2_impl__EPA__sHorizon__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0;
  label$1 : {
   if (($1 | 0) == HEAPU8[$3 + 55 | 0]) {
    break label$1
   }
   $6 = $4 << 2;
   $7 = HEAP32[$6 + 14768 >> 2];
   if (!!(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$3 >> 2] * HEAPF32[$2 + 16 >> 2]) + Math_fround(HEAPF32[$3 + 4 >> 2] * HEAPF32[$2 + 20 >> 2])) + Math_fround(HEAPF32[$3 + 8 >> 2] * HEAPF32[$2 + 24 >> 2])) - HEAPF32[$3 + 16 >> 2]) < Math_fround(-9.999999747378752e-06))) {
    $1 = $3 + 20 | 0;
    $2 = gjkepa2_impl__EPA__newface_28gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20bool_29($0, HEAP32[$1 + ($7 << 2) >> 2], HEAP32[$1 + $6 >> 2], $2, 0);
    if (!$2) {
     break label$1
    }
    HEAP32[$2 + 32 >> 2] = $3;
    HEAP8[$2 + 52 | 0] = $4;
    HEAP8[($3 + $4 | 0) + 52 | 0] = 0;
    HEAP32[(($4 << 2) + $3 | 0) + 32 >> 2] = $2;
    $3 = HEAP32[$5 >> 2];
    label$3 : {
     if ($3) {
      HEAP32[$3 + 36 >> 2] = $2;
      HEAP8[$3 + 53 | 0] = 2;
      HEAP32[$2 + 40 >> 2] = $3;
      HEAP8[$2 + 54 | 0] = 1;
      break label$3;
     }
     HEAP32[$5 + 4 >> 2] = $2;
    }
    HEAP32[$5 >> 2] = $2;
    HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 8 >> 2] + 1;
    return 1;
   }
   HEAP8[$3 + 55 | 0] = $1;
   if (!gjkepa2_impl__EPA__expand_28unsigned_20int_2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__EPA__sFace__2c_20unsigned_20int_2c_20gjkepa2_impl__EPA__sHorizon__29($0, $1, $2, HEAP32[(($7 << 2) + $3 | 0) + 32 >> 2], HEAPU8[($3 + $7 | 0) + 52 | 0], $5)) {
    break label$1
   }
   $4 = HEAP32[$6 + 14780 >> 2];
   if (!gjkepa2_impl__EPA__expand_28unsigned_20int_2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__EPA__sFace__2c_20unsigned_20int_2c_20gjkepa2_impl__EPA__sHorizon__29($0, $1, $2, HEAP32[(($4 << 2) + $3 | 0) + 32 >> 2], HEAPU8[($3 + $4 | 0) + 52 | 0], $5)) {
    break label$1
   }
   $2 = HEAP32[$3 + 48 >> 2];
   if ($2) {
    HEAP32[$2 + 44 >> 2] = HEAP32[$3 + 44 >> 2]
   }
   $2 = HEAP32[$3 + 44 >> 2];
   if ($2) {
    HEAP32[$2 + 48 >> 2] = HEAP32[$3 + 48 >> 2]
   }
   if (HEAP32[$0 + 18496 >> 2] == ($3 | 0)) {
    HEAP32[$0 + 18496 >> 2] = HEAP32[$3 + 48 >> 2]
   }
   HEAP32[$3 + 44 >> 2] = 0;
   HEAP32[$3 + 48 >> 2] = HEAP32[$0 + 18504 >> 2];
   $2 = $0 + 18500 | 0;
   HEAP32[$2 >> 2] = HEAP32[$2 >> 2] + -1;
   $2 = HEAP32[$0 + 18504 >> 2];
   if ($2) {
    HEAP32[$2 + 44 >> 2] = $3
   }
   HEAP32[$0 + 18504 >> 2] = $3;
   $8 = 1;
   $3 = $0 + 18508 | 0;
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
  }
  return $8;
 }
 
 function gjkepa2_impl__MinkowskiDiff__Support1_28btVector3_20const__29_20const($0, $1, $2) {
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $8 = HEAP32[$1 + 124 >> 2];
  $9 = HEAP32[$1 + 4 >> 2] + ($8 >> 1) | 0;
  $7 = HEAP32[$1 + 120 >> 2];
  $7 = $8 & 1 ? HEAP32[$7 + HEAP32[$9 >> 2] >> 2] : $7;
  HEAP32[$3 + 12 >> 2] = 0;
  $4 = HEAPF32[$2 >> 2];
  $5 = HEAPF32[$2 + 4 >> 2];
  $6 = HEAPF32[$2 + 8 >> 2];
  HEAPF32[$3 + 8 >> 2] = Math_fround(Math_fround($4 * HEAPF32[$1 + 40 >> 2]) + Math_fround($5 * HEAPF32[$1 + 44 >> 2])) + Math_fround($6 * HEAPF32[$1 + 48 >> 2]);
  HEAPF32[$3 + 4 >> 2] = Math_fround(Math_fround($4 * HEAPF32[$1 + 24 >> 2]) + Math_fround($5 * HEAPF32[$1 + 28 >> 2])) + Math_fround($6 * HEAPF32[$1 + 32 >> 2]);
  HEAPF32[$3 >> 2] = Math_fround(Math_fround($4 * HEAPF32[$1 + 8 >> 2]) + Math_fround($5 * HEAPF32[$1 + 12 >> 2])) + Math_fround($6 * HEAPF32[$1 + 16 >> 2]);
  FUNCTION_TABLE[$7]($3 + 16 | 0, $9, $3);
  HEAP32[$0 + 12 >> 2] = 0;
  $4 = HEAPF32[$3 + 16 >> 2];
  $5 = HEAPF32[$3 + 20 >> 2];
  $6 = HEAPF32[$3 + 24 >> 2];
  HEAPF32[$0 + 8 >> 2] = Math_fround(Math_fround(Math_fround($4 * HEAPF32[$1 + 88 >> 2]) + Math_fround($5 * HEAPF32[$1 + 92 >> 2])) + Math_fround($6 * HEAPF32[$1 + 96 >> 2])) + HEAPF32[$1 + 112 >> 2];
  HEAPF32[$0 + 4 >> 2] = Math_fround(Math_fround(Math_fround($4 * HEAPF32[$1 + 72 >> 2]) + Math_fround($5 * HEAPF32[$1 + 76 >> 2])) + Math_fround($6 * HEAPF32[$1 + 80 >> 2])) + HEAPF32[$1 + 108 >> 2];
  HEAPF32[$0 >> 2] = Math_fround(Math_fround(Math_fround($4 * HEAPF32[$1 + 56 >> 2]) + Math_fround($5 * HEAPF32[$1 + 60 >> 2])) + Math_fround($6 * HEAPF32[$1 - -64 >> 2])) + HEAPF32[$1 + 104 >> 2];
  global$0 = $3 + 32 | 0;
 }
 
 function gjkepa2_impl__EPA__getedgedist_28gjkepa2_impl__EPA__sFace__2c_20gjkepa2_impl__GJK__sSV__2c_20gjkepa2_impl__GJK__sSV__2c_20float__29($0, $1, $2, $3) {
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
  $8 = HEAPF32[$2 + 24 >> 2];
  $4 = HEAPF32[$1 + 24 >> 2];
  $11 = Math_fround($8 - $4);
  $9 = HEAPF32[$2 + 16 >> 2];
  $6 = HEAPF32[$1 + 16 >> 2];
  $12 = Math_fround($9 - $6);
  $5 = HEAPF32[$0 + 4 >> 2];
  $10 = HEAPF32[$2 + 20 >> 2];
  $7 = HEAPF32[$1 + 20 >> 2];
  $13 = Math_fround($10 - $7);
  $14 = HEAPF32[$0 >> 2];
  $15 = HEAPF32[$0 + 8 >> 2];
  $0 = 0;
  label$1 : {
   if (!(Math_fround(Math_fround($4 * Math_fround(Math_fround($12 * $5) - Math_fround($13 * $14))) + Math_fround(Math_fround($6 * Math_fround(Math_fround($13 * $15) - Math_fround($11 * $5))) + Math_fround($7 * Math_fround(Math_fround($11 * $14) - Math_fround($12 * $15))))) < Math_fround(0.0))) {
    break label$1
   }
   $5 = Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($7 * $7)) + Math_fround($4 * $4));
   label$2 : {
    if (!!(Math_fround(Math_fround(Math_fround($6 * $12) + Math_fround($7 * $13)) + Math_fround($4 * $11)) > Math_fround(0.0))) {
     break label$2
    }
    $5 = Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($10 * $10)) + Math_fround($8 * $8));
    if (!!(Math_fround(Math_fround(Math_fround($9 * $12) + Math_fround($10 * $13)) + Math_fround($8 * $11)) < Math_fround(0.0))) {
     break label$2
    }
    $5 = Math_fround(Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($10 * $10)) + Math_fround($8 * $8)) * Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($7 * $7)) + Math_fround($4 * $4)));
    $4 = Math_fround(Math_fround(Math_fround($9 * $6) + Math_fround($10 * $7)) + Math_fround($8 * $4));
    $4 = Math_fround(Math_fround($5 - Math_fround($4 * $4)) / Math_fround(Math_fround(Math_fround($12 * $12) + Math_fround($13 * $13)) + Math_fround($11 * $11)));
    $5 = $4 > Math_fround(0.0) ? $4 : Math_fround(0.0);
   }
   HEAPF32[$3 >> 2] = Math_sqrt($5);
   $0 = 1;
  }
  return $0;
 }
 
 function btGjkEpaPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $0 = global$0 - 80 | 0;
  global$0 = $0;
  $1 = 0;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAPF32[$0 + 64 >> 2] = HEAPF32[$5 + 48 >> 2] - HEAPF32[$4 + 48 >> 2];
  HEAPF32[$0 + 72 >> 2] = HEAPF32[$5 + 56 >> 2] - HEAPF32[$4 + 56 >> 2];
  HEAPF32[$0 + 68 >> 2] = HEAPF32[$5 + 52 >> 2] - HEAPF32[$4 + 52 >> 2];
  $9 = 1;
  label$1 : {
   if (!btGjkEpaSolver2__Penetration_28btConvexShape_20const__2c_20btTransform_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btGjkEpaSolver2__sResults__2c_20bool_29($2, $4, $3, $5, $0 - -64 | 0, $0 + 8 | 0)) {
    $9 = 0;
    if (!btGjkEpaSolver2__Distance_28btConvexShape_20const__2c_20btTransform_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btGjkEpaSolver2__sResults__29($2, $4, $3, $5, $0 - -64 | 0, $0 + 8 | 0)) {
     break label$1
    }
   }
   $2 = HEAP32[$0 + 16 >> 2];
   HEAP32[$7 >> 2] = HEAP32[$0 + 12 >> 2];
   HEAP32[$7 + 4 >> 2] = $2;
   $1 = $0 + 20 | 0;
   $3 = HEAP32[$1 >> 2];
   $2 = $7 + 8 | 0;
   $7 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = $7;
   $1 = $0 + 28 | 0;
   $3 = HEAP32[$1 >> 2];
   $2 = HEAP32[$1 + 4 >> 2];
   $7 = $8;
   HEAP32[$7 >> 2] = $3;
   HEAP32[$7 + 4 >> 2] = $2;
   $1 = $0 + 36 | 0;
   $3 = HEAP32[$1 >> 2];
   $2 = $7 + 8 | 0;
   $7 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = $7;
   $2 = HEAP32[$0 + 48 >> 2];
   $7 = $6;
   HEAP32[$7 >> 2] = HEAP32[$0 + 44 >> 2];
   HEAP32[$7 + 4 >> 2] = $2;
   $1 = $0 + 52 | 0;
   $3 = HEAP32[$1 >> 2];
   $2 = $7 + 8 | 0;
   $7 = HEAP32[$1 + 4 >> 2];
   HEAP32[$2 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = $7;
   $1 = $9;
  }
  global$0 = $0 + 80 | 0;
  return $1 | 0;
 }
 
 function btVoronoiSimplexSolver__reset_28_29($0) {
  var $1 = 0;
  HEAP8[$0 + 356 | 0] = 1;
  HEAP32[$0 >> 2] = 0;
  HEAP8[$0 + 312 | 0] = 0;
  HEAP32[$0 + 292 >> 2] = 1566444395;
  HEAP32[$0 + 296 >> 2] = 1566444395;
  $1 = $0 + 336 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 300 | 0;
  HEAP32[$1 >> 2] = 1566444395;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 344 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 352 | 0] = 0;
  $0 = $0 + 332 | 0;
  HEAP8[$0 | 0] = HEAPU8[$0 | 0] & 240;
 }
 
 function btVoronoiSimplexSolver__addVertex_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = $1;
  $6 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$0 + 292 >> 2] = $6;
  HEAP32[$0 + 296 >> 2] = $5;
  $7 = $4 + 8 | 0;
  $4 = $7;
  $8 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $0 + 300 | 0;
  HEAP32[$5 >> 2] = $8;
  HEAP32[$5 + 4 >> 2] = $6;
  HEAP8[$0 + 356 | 0] = 1;
  $7 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  $8 = (HEAP32[$0 >> 2] << 4) + $0 | 0;
  $6 = $8 + 12 | 0;
  HEAP32[$6 >> 2] = $7;
  HEAP32[$6 + 4 >> 2] = $5;
  $4 = $1;
  $1 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $8 + 4 | 0;
  HEAP32[$5 >> 2] = $1;
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = $2 + 8 | 0;
  $7 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  $1 = (HEAP32[$0 >> 2] << 4) + $0 | 0;
  $6 = $1 + 92 | 0;
  HEAP32[$6 >> 2] = $7;
  HEAP32[$6 + 4 >> 2] = $5;
  $4 = $2;
  $2 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $1 + 84 | 0;
  HEAP32[$5 >> 2] = $2;
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = $3;
  $2 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  $1 = (HEAP32[$0 >> 2] << 4) + $0 | 0;
  $6 = $1 + 164 | 0;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $5;
  $4 = $4 + 8 | 0;
  $2 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $1 + 172 | 0;
  HEAP32[$5 >> 2] = $2;
  HEAP32[$5 + 4 >> 2] = $6;
  HEAP32[$0 >> 2] = HEAP32[$0 >> 2] + 1;
 }
 
 function btVoronoiSimplexSolver__updateClosestVectorAndPoints_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = 0, $24 = 0, $25 = Math_fround(0), $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0), $29 = 0, $30 = 0, $31 = 0, $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0);
  $21 = global$0 - 16 | 0;
  global$0 = $21;
  label$1 : {
   if (!HEAPU8[$0 + 356 | 0]) {
    $4 = HEAPU8[$0 + 312 | 0];
    break label$1;
   }
   HEAP8[$0 + 356 | 0] = 0;
   HEAP8[$0 + 352 | 0] = 0;
   $1 = $0 + 344 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   $26 = $0 + 336 | 0;
   $1 = $26;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   $6 = $0 + 332 | 0;
   $5 = HEAPU8[$6 | 0] & -16;
   HEAP8[$6 | 0] = $5;
   $6 = HEAP32[$0 >> 2];
   label$3 : {
    if ($6 >>> 0 > 4) {
     break label$3
    }
    $4 = $0 + 316 | 0;
    label$4 : {
     label$5 : {
      label$6 : {
       switch ($6 - 1 | 0) {
       case 1:
        $1 = $0;
        $8 = HEAPF32[$0 + 4 >> 2];
        $10 = Math_fround(HEAPF32[$0 + 20 >> 2] - $8);
        $16 = Math_fround(Math_fround(Math_fround(0.0) - $8) * $10);
        $8 = HEAPF32[$0 + 8 >> 2];
        $11 = Math_fround(HEAPF32[$0 + 24 >> 2] - $8);
        $16 = Math_fround($16 + Math_fround(Math_fround(Math_fround(0.0) - $8) * $11));
        $8 = HEAPF32[$0 + 12 >> 2];
        $18 = Math_fround(Math_fround(0.0) - $8);
        $8 = Math_fround(HEAPF32[$0 + 28 >> 2] - $8);
        $16 = Math_fround($16 + Math_fround($18 * $8));
        label$10 : {
         if (!!($16 > Math_fround(0.0))) {
          $9 = Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($11 * $11)) + Math_fround($8 * $8));
          if (!!($16 < $9)) {
           $9 = Math_fround($16 / $9);
           $4 = $5 | 3;
           break label$10;
          }
          $9 = Math_fround(1.0);
          $4 = $5 | 2;
          break label$10;
         }
         $4 = $5 | 1;
        }
        HEAP8[$1 + 332 | 0] = $4;
        $1 = $0 + 344 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        HEAPF32[$0 + 340 >> 2] = $9;
        $16 = Math_fround(Math_fround(1.0) - $9);
        HEAPF32[$0 + 336 >> 2] = $16;
        HEAP32[$0 + 256 >> 2] = 0;
        $8 = HEAPF32[$0 + 92 >> 2];
        $18 = Math_fround($8 + Math_fround($9 * Math_fround(HEAPF32[$0 + 108 >> 2] - $8)));
        HEAPF32[$0 + 252 >> 2] = $18;
        $8 = HEAPF32[$0 + 88 >> 2];
        $19 = Math_fround($8 + Math_fround($9 * Math_fround(HEAPF32[$0 + 104 >> 2] - $8)));
        HEAPF32[$0 + 248 >> 2] = $19;
        $8 = HEAPF32[$0 + 84 >> 2];
        $20 = Math_fround($8 + Math_fround($9 * Math_fround(HEAPF32[$0 + 100 >> 2] - $8)));
        HEAPF32[$0 + 244 >> 2] = $20;
        $22 = HEAPF32[$0 + 180 >> 2];
        $27 = HEAPF32[$0 + 184 >> 2];
        $8 = HEAPF32[$0 + 168 >> 2];
        $28 = HEAPF32[$0 + 188 >> 2];
        $10 = HEAPF32[$0 + 172 >> 2];
        $11 = HEAPF32[$0 + 164 >> 2];
        HEAP32[$0 + 288 >> 2] = 0;
        $10 = Math_fround($10 + Math_fround($9 * Math_fround($28 - $10)));
        HEAPF32[$0 + 284 >> 2] = $18 - $10;
        $8 = Math_fround($8 + Math_fround($9 * Math_fround($27 - $8)));
        HEAPF32[$0 + 280 >> 2] = $19 - $8;
        $11 = Math_fround($11 + Math_fround($9 * Math_fround($22 - $11)));
        HEAPF32[$0 + 276 >> 2] = $20 - $11;
        HEAP32[$0 + 272 >> 2] = 0;
        HEAPF32[$0 + 268 >> 2] = $10;
        HEAPF32[$0 + 264 >> 2] = $8;
        HEAPF32[$0 + 260 >> 2] = $11;
        $6 = 1;
        if (!($4 & 2)) {
         HEAP32[$0 >> 2] = 1;
         $6 = 0;
        }
        if (!($4 & 1)) {
         HEAP32[$0 >> 2] = $6;
         $4 = ($6 << 4) + $0 | 0;
         $2 = $4 + 12 | 0;
         $12 = HEAP32[$2 >> 2];
         $5 = HEAP32[$2 + 4 >> 2];
         $2 = $4 + 4 | 0;
         $13 = HEAP32[$2 >> 2];
         $7 = HEAP32[$2 + 4 >> 2];
         $2 = $4 + 84 | 0;
         $17 = HEAP32[$2 >> 2];
         $1 = HEAP32[$2 + 4 >> 2];
         $6 = $0 + 84 | 0;
         $3 = $6;
         HEAP32[$3 >> 2] = $17;
         HEAP32[$3 + 4 >> 2] = $1;
         $2 = $4 + 92 | 0;
         $17 = HEAP32[$2 >> 2];
         $3 = HEAP32[$2 + 4 >> 2];
         $1 = $6 + 8 | 0;
         HEAP32[$1 >> 2] = $17;
         HEAP32[$1 + 4 >> 2] = $3;
         $2 = $4 + 164 | 0;
         $17 = HEAP32[$2 >> 2];
         $1 = HEAP32[$2 + 4 >> 2];
         $6 = $0 + 164 | 0;
         $3 = $6;
         HEAP32[$3 >> 2] = $17;
         HEAP32[$3 + 4 >> 2] = $1;
         $2 = $4 + 172 | 0;
         $4 = HEAP32[$2 >> 2];
         $3 = HEAP32[$2 + 4 >> 2];
         $1 = $6 + 8 | 0;
         HEAP32[$1 >> 2] = $4;
         HEAP32[$1 + 4 >> 2] = $3;
         $4 = $0 + 4 | 0;
         $1 = $4;
         HEAP32[$1 >> 2] = $13;
         HEAP32[$1 + 4 >> 2] = $7;
         $1 = $1 + 8 | 0;
         HEAP32[$1 >> 2] = $12;
         HEAP32[$1 + 4 >> 2] = $5;
        }
        $4 = $9 >= Math_fround(0.0) & $16 >= Math_fround(0.0);
        break label$3;
       case 2:
        $1 = $21 + 8 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        $1 = $21;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        $17 = $0 + 4 | 0;
        $12 = $0 + 20 | 0;
        $14 = $0 + 36 | 0;
        btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($1, $17, $12, $14, $4);
        HEAP32[$0 + 256 >> 2] = 0;
        $10 = HEAPF32[$0 + 336 >> 2];
        $9 = HEAPF32[$0 + 340 >> 2];
        $8 = HEAPF32[$0 + 344 >> 2];
        $11 = Math_fround(Math_fround(Math_fround($10 * HEAPF32[$0 + 92 >> 2]) + Math_fround($9 * HEAPF32[$0 + 108 >> 2])) + Math_fround($8 * HEAPF32[$0 + 124 >> 2]));
        HEAPF32[$0 + 252 >> 2] = $11;
        $16 = Math_fround(Math_fround(Math_fround($10 * HEAPF32[$0 + 88 >> 2]) + Math_fround($9 * HEAPF32[$0 + 104 >> 2])) + Math_fround($8 * HEAPF32[$0 + 120 >> 2]));
        HEAPF32[$0 + 248 >> 2] = $16;
        $13 = $0 + 100 | 0;
        $23 = $0 + 116 | 0;
        $18 = Math_fround(Math_fround(Math_fround($10 * HEAPF32[$0 + 84 >> 2]) + Math_fround($9 * HEAPF32[$13 >> 2])) + Math_fround($8 * HEAPF32[$23 >> 2]));
        HEAPF32[$0 + 244 >> 2] = $18;
        $7 = $0 + 180 | 0;
        $19 = HEAPF32[$7 >> 2];
        $24 = $0 + 196 | 0;
        $20 = HEAPF32[$24 >> 2];
        $22 = HEAPF32[$0 + 168 >> 2];
        $27 = HEAPF32[$0 + 184 >> 2];
        $28 = HEAPF32[$0 + 200 >> 2];
        $25 = HEAPF32[$0 + 172 >> 2];
        $32 = HEAPF32[$0 + 188 >> 2];
        $33 = HEAPF32[$0 + 204 >> 2];
        $34 = HEAPF32[$0 + 164 >> 2];
        HEAP32[$0 + 288 >> 2] = 0;
        $25 = Math_fround(Math_fround(Math_fround($10 * $25) + Math_fround($9 * $32)) + Math_fround($8 * $33));
        HEAPF32[$0 + 284 >> 2] = $11 - $25;
        $11 = Math_fround(Math_fround(Math_fround($10 * $22) + Math_fround($9 * $27)) + Math_fround($8 * $28));
        HEAPF32[$0 + 280 >> 2] = $16 - $11;
        $10 = Math_fround(Math_fround(Math_fround($10 * $34) + Math_fround($9 * $19)) + Math_fround($8 * $20));
        HEAPF32[$0 + 276 >> 2] = $18 - $10;
        HEAP32[$0 + 272 >> 2] = 0;
        HEAPF32[$0 + 268 >> 2] = $25;
        HEAPF32[$0 + 264 >> 2] = $11;
        HEAPF32[$0 + 260 >> 2] = $10;
        label$15 : {
         label$16 : {
          label$17 : {
           label$18 : {
            label$19 : {
             $5 = HEAP32[$0 >> 2];
             label$20 : {
              if (($5 | 0) >= 4) {
               $6 = HEAPU8[$0 + 332 | 0];
               if ($6 & 8) {
                $4 = $5;
                break label$20;
               }
               $4 = $5 + -1 | 0;
               HEAP32[$0 >> 2] = $4;
               $5 = ($4 << 4) + $0 | 0;
               $2 = $5 + 12 | 0;
               $15 = HEAP32[$2 >> 2];
               $1 = HEAP32[$2 + 4 >> 2];
               $3 = $0 + 60 | 0;
               HEAP32[$3 >> 2] = $15;
               HEAP32[$3 + 4 >> 2] = $1;
               $2 = $5 + 4 | 0;
               $15 = HEAP32[$2 >> 2];
               $3 = HEAP32[$2 + 4 >> 2];
               $1 = $0 + 52 | 0;
               HEAP32[$1 >> 2] = $15;
               HEAP32[$1 + 4 >> 2] = $3;
               $2 = $5 + 92 | 0;
               $15 = HEAP32[$2 >> 2];
               $1 = HEAP32[$2 + 4 >> 2];
               $3 = $0 + 140 | 0;
               HEAP32[$3 >> 2] = $15;
               HEAP32[$3 + 4 >> 2] = $1;
               $2 = $5 + 84 | 0;
               $15 = HEAP32[$2 >> 2];
               $3 = HEAP32[$2 + 4 >> 2];
               $1 = $0 + 132 | 0;
               HEAP32[$1 >> 2] = $15;
               HEAP32[$1 + 4 >> 2] = $3;
               $2 = $5 + 164 | 0;
               $15 = HEAP32[$2 >> 2];
               $1 = HEAP32[$2 + 4 >> 2];
               $3 = $0 + 212 | 0;
               HEAP32[$3 >> 2] = $15;
               HEAP32[$3 + 4 >> 2] = $1;
               $2 = $5 + 172 | 0;
               $5 = HEAP32[$2 >> 2];
               $3 = HEAP32[$2 + 4 >> 2];
               $1 = $0 + 220 | 0;
               HEAP32[$1 >> 2] = $5;
               HEAP32[$1 + 4 >> 2] = $3;
               break label$20;
              }
              $4 = 3;
              if (($5 | 0) != 3) {
               break label$19
              }
              $6 = HEAPU8[$0 + 332 | 0];
             }
             if ($6 & 4) {
              break label$18
             }
             $4 = $4 + -1 | 0;
             HEAP32[$0 >> 2] = $4;
             $5 = ($4 << 4) + $0 | 0;
             $2 = $5 + 12 | 0;
             $15 = HEAP32[$2 >> 2];
             $1 = HEAP32[$2 + 4 >> 2];
             $3 = $14 + 8 | 0;
             HEAP32[$3 >> 2] = $15;
             HEAP32[$3 + 4 >> 2] = $1;
             $2 = $5 + 4 | 0;
             $15 = HEAP32[$2 >> 2];
             $3 = HEAP32[$2 + 4 >> 2];
             $1 = $14;
             HEAP32[$1 >> 2] = $15;
             HEAP32[$1 + 4 >> 2] = $3;
             $2 = $5 + 92 | 0;
             $14 = HEAP32[$2 >> 2];
             $1 = HEAP32[$2 + 4 >> 2];
             $3 = $23 + 8 | 0;
             HEAP32[$3 >> 2] = $14;
             HEAP32[$3 + 4 >> 2] = $1;
             $2 = $5 + 84 | 0;
             $14 = HEAP32[$2 >> 2];
             $3 = HEAP32[$2 + 4 >> 2];
             $1 = $23;
             HEAP32[$1 >> 2] = $14;
             HEAP32[$1 + 4 >> 2] = $3;
             $2 = $5 + 164 | 0;
             $14 = HEAP32[$2 >> 2];
             $1 = HEAP32[$2 + 4 >> 2];
             $3 = $24;
             HEAP32[$3 >> 2] = $14;
             HEAP32[$3 + 4 >> 2] = $1;
             $2 = $5 + 172 | 0;
             $5 = HEAP32[$2 >> 2];
             $1 = $3 + 8 | 0;
             $3 = HEAP32[$2 + 4 >> 2];
             HEAP32[$1 >> 2] = $5;
             HEAP32[$1 + 4 >> 2] = $3;
             break label$18;
            }
            $4 = 2;
            if (($5 | 0) < 2) {
             break label$17
            }
            $6 = HEAPU8[$0 + 332 | 0];
           }
           if ($6 & 2) {
            break label$16
           }
           $4 = $4 + -1 | 0;
           HEAP32[$0 >> 2] = $4;
           $5 = ($4 << 4) + $0 | 0;
           $2 = $5 + 12 | 0;
           $14 = HEAP32[$2 >> 2];
           $1 = HEAP32[$2 + 4 >> 2];
           $3 = $12 + 8 | 0;
           HEAP32[$3 >> 2] = $14;
           HEAP32[$3 + 4 >> 2] = $1;
           $2 = $5 + 4 | 0;
           $14 = HEAP32[$2 >> 2];
           $3 = HEAP32[$2 + 4 >> 2];
           $1 = $12;
           HEAP32[$1 >> 2] = $14;
           HEAP32[$1 + 4 >> 2] = $3;
           $2 = $5 + 92 | 0;
           $12 = HEAP32[$2 >> 2];
           $1 = HEAP32[$2 + 4 >> 2];
           $3 = $13 + 8 | 0;
           HEAP32[$3 >> 2] = $12;
           HEAP32[$3 + 4 >> 2] = $1;
           $2 = $5 + 84 | 0;
           $12 = HEAP32[$2 >> 2];
           $3 = HEAP32[$2 + 4 >> 2];
           $1 = $13;
           HEAP32[$1 >> 2] = $12;
           HEAP32[$1 + 4 >> 2] = $3;
           $2 = $5 + 164 | 0;
           $12 = HEAP32[$2 >> 2];
           $1 = HEAP32[$2 + 4 >> 2];
           $3 = $7;
           HEAP32[$3 >> 2] = $12;
           HEAP32[$3 + 4 >> 2] = $1;
           $2 = $5 + 172 | 0;
           $5 = HEAP32[$2 >> 2];
           $1 = $3 + 8 | 0;
           $3 = HEAP32[$2 + 4 >> 2];
           HEAP32[$1 >> 2] = $5;
           HEAP32[$1 + 4 >> 2] = $3;
           break label$16;
          }
          $4 = 1;
          if (($5 | 0) != 1) {
           break label$15
          }
          $6 = HEAPU8[$0 + 332 | 0];
         }
         if ($6 & 1) {
          break label$15
         }
         $4 = $4 + -1 | 0;
         HEAP32[$0 >> 2] = $4;
         $4 = ($4 << 4) + $0 | 0;
         $2 = $4 + 12 | 0;
         $6 = HEAP32[$2 >> 2];
         $1 = HEAP32[$2 + 4 >> 2];
         $3 = $17 + 8 | 0;
         HEAP32[$3 >> 2] = $6;
         HEAP32[$3 + 4 >> 2] = $1;
         $2 = $4 + 4 | 0;
         $6 = HEAP32[$2 >> 2];
         $3 = HEAP32[$2 + 4 >> 2];
         $1 = $17;
         HEAP32[$1 >> 2] = $6;
         HEAP32[$1 + 4 >> 2] = $3;
         $2 = $4 + 92 | 0;
         $5 = HEAP32[$2 >> 2];
         $1 = HEAP32[$2 + 4 >> 2];
         $6 = $0 + 84 | 0;
         $3 = $6 + 8 | 0;
         HEAP32[$3 >> 2] = $5;
         HEAP32[$3 + 4 >> 2] = $1;
         $2 = $4 + 84 | 0;
         $5 = HEAP32[$2 >> 2];
         $3 = HEAP32[$2 + 4 >> 2];
         $1 = $6;
         HEAP32[$1 >> 2] = $5;
         HEAP32[$1 + 4 >> 2] = $3;
         $2 = $4 + 164 | 0;
         $5 = HEAP32[$2 >> 2];
         $1 = HEAP32[$2 + 4 >> 2];
         $6 = $0 + 164 | 0;
         $3 = $6;
         HEAP32[$3 >> 2] = $5;
         HEAP32[$3 + 4 >> 2] = $1;
         $2 = $4 + 172 | 0;
         $4 = HEAP32[$2 >> 2];
         $3 = HEAP32[$2 + 4 >> 2];
         $1 = $6 + 8 | 0;
         HEAP32[$1 >> 2] = $4;
         HEAP32[$1 + 4 >> 2] = $3;
        }
        $4 = 0;
        if (!(HEAPF32[$26 >> 2] >= Math_fround(0.0))) {
         break label$3
        }
        if (!($9 >= Math_fround(0.0))) {
         break label$3
        }
        if (!($8 >= Math_fround(0.0))) {
         break label$3
        }
        $4 = HEAPF32[$0 + 348 >> 2] >= Math_fround(0.0);
        break label$3;
       case 3:
        $1 = $21 + 8 | 0;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        $1 = $21;
        HEAP32[$1 >> 2] = 0;
        HEAP32[$1 + 4 >> 2] = 0;
        $5 = $0 + 4 | 0;
        $17 = $0 + 20 | 0;
        $12 = $0 + 36 | 0;
        $13 = $0 + 52 | 0;
        if (btVoronoiSimplexSolver__closestPtPointTetrahedron_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($1, $5, $17, $12, $13, $4)) {
         HEAP32[$0 + 256 >> 2] = 0;
         $8 = HEAPF32[$0 + 336 >> 2];
         $10 = HEAPF32[$0 + 340 >> 2];
         $11 = HEAPF32[$0 + 344 >> 2];
         $9 = HEAPF32[$0 + 348 >> 2];
         $16 = Math_fround(Math_fround(Math_fround(Math_fround($8 * HEAPF32[$0 + 92 >> 2]) + Math_fround($10 * HEAPF32[$0 + 108 >> 2])) + Math_fround($11 * HEAPF32[$0 + 124 >> 2])) + Math_fround($9 * HEAPF32[$0 + 140 >> 2]));
         HEAPF32[$0 + 252 >> 2] = $16;
         $18 = Math_fround(Math_fround(Math_fround(Math_fround($8 * HEAPF32[$0 + 88 >> 2]) + Math_fround($10 * HEAPF32[$0 + 104 >> 2])) + Math_fround($11 * HEAPF32[$0 + 120 >> 2])) + Math_fround($9 * HEAPF32[$0 + 136 >> 2]));
         HEAPF32[$0 + 248 >> 2] = $18;
         $14 = $0 + 100 | 0;
         $24 = $0 + 116 | 0;
         $15 = $0 + 132 | 0;
         $19 = Math_fround(Math_fround(Math_fround(Math_fround($8 * HEAPF32[$0 + 84 >> 2]) + Math_fround($10 * HEAPF32[$14 >> 2])) + Math_fround($11 * HEAPF32[$24 >> 2])) + Math_fround($9 * HEAPF32[$15 >> 2]));
         HEAPF32[$0 + 244 >> 2] = $19;
         HEAP32[$0 + 288 >> 2] = 0;
         HEAP32[$0 + 272 >> 2] = 0;
         $23 = $0 + 180 | 0;
         $30 = $0 + 196 | 0;
         $31 = $0 + 212 | 0;
         $20 = Math_fround(Math_fround(Math_fround(Math_fround($8 * HEAPF32[$0 + 164 >> 2]) + Math_fround($10 * HEAPF32[$23 >> 2])) + Math_fround($11 * HEAPF32[$30 >> 2])) + Math_fround($9 * HEAPF32[$31 >> 2]));
         HEAPF32[$0 + 260 >> 2] = $20;
         $22 = Math_fround(Math_fround(Math_fround(Math_fround($8 * HEAPF32[$0 + 168 >> 2]) + Math_fround($10 * HEAPF32[$0 + 184 >> 2])) + Math_fround($11 * HEAPF32[$0 + 200 >> 2])) + Math_fround($9 * HEAPF32[$0 + 216 >> 2]));
         HEAPF32[$0 + 264 >> 2] = $22;
         $8 = Math_fround(Math_fround(Math_fround(Math_fround($8 * HEAPF32[$0 + 172 >> 2]) + Math_fround($10 * HEAPF32[$0 + 188 >> 2])) + Math_fround($11 * HEAPF32[$0 + 204 >> 2])) + Math_fround($9 * HEAPF32[$0 + 220 >> 2]));
         HEAPF32[$0 + 268 >> 2] = $8;
         HEAPF32[$0 + 276 >> 2] = $19 - $20;
         HEAPF32[$0 + 280 >> 2] = $18 - $22;
         HEAPF32[$0 + 284 >> 2] = $16 - $8;
         label$24 : {
          label$25 : {
           label$26 : {
            label$27 : {
             label$28 : {
              $7 = HEAP32[$0 >> 2];
              label$29 : {
               if (($7 | 0) >= 4) {
                $6 = HEAPU8[$0 + 332 | 0];
                if ($6 & 8) {
                 $4 = $7;
                 break label$29;
                }
                $4 = $7 + -1 | 0;
                HEAP32[$0 >> 2] = $4;
                $7 = ($4 << 4) + $0 | 0;
                $2 = $7 + 12 | 0;
                $29 = HEAP32[$2 >> 2];
                $1 = HEAP32[$2 + 4 >> 2];
                $3 = $13 + 8 | 0;
                HEAP32[$3 >> 2] = $29;
                HEAP32[$3 + 4 >> 2] = $1;
                $2 = $7 + 4 | 0;
                $29 = HEAP32[$2 >> 2];
                $3 = HEAP32[$2 + 4 >> 2];
                $1 = $13;
                HEAP32[$1 >> 2] = $29;
                HEAP32[$1 + 4 >> 2] = $3;
                $2 = $7 + 92 | 0;
                $13 = HEAP32[$2 >> 2];
                $1 = HEAP32[$2 + 4 >> 2];
                $3 = $15 + 8 | 0;
                HEAP32[$3 >> 2] = $13;
                HEAP32[$3 + 4 >> 2] = $1;
                $2 = $7 + 84 | 0;
                $13 = HEAP32[$2 >> 2];
                $3 = HEAP32[$2 + 4 >> 2];
                $1 = $15;
                HEAP32[$1 >> 2] = $13;
                HEAP32[$1 + 4 >> 2] = $3;
                $2 = $7 + 164 | 0;
                $13 = HEAP32[$2 >> 2];
                $1 = HEAP32[$2 + 4 >> 2];
                $3 = $31;
                HEAP32[$3 >> 2] = $13;
                HEAP32[$3 + 4 >> 2] = $1;
                $2 = $7 + 172 | 0;
                $7 = HEAP32[$2 >> 2];
                $1 = $3 + 8 | 0;
                $3 = HEAP32[$2 + 4 >> 2];
                HEAP32[$1 >> 2] = $7;
                HEAP32[$1 + 4 >> 2] = $3;
                break label$29;
               }
               $4 = 3;
               if (($7 | 0) != 3) {
                break label$28
               }
               $6 = HEAPU8[$0 + 332 | 0];
              }
              if ($6 & 4) {
               break label$27
              }
              $4 = $4 + -1 | 0;
              HEAP32[$0 >> 2] = $4;
              $13 = ($4 << 4) + $0 | 0;
              $2 = $13 + 12 | 0;
              $7 = HEAP32[$2 >> 2];
              $1 = HEAP32[$2 + 4 >> 2];
              $3 = $12 + 8 | 0;
              HEAP32[$3 >> 2] = $7;
              HEAP32[$3 + 4 >> 2] = $1;
              $2 = $13 + 4 | 0;
              $7 = HEAP32[$2 >> 2];
              $3 = HEAP32[$2 + 4 >> 2];
              $1 = $12;
              HEAP32[$1 >> 2] = $7;
              HEAP32[$1 + 4 >> 2] = $3;
              $2 = $13 + 92 | 0;
              $7 = HEAP32[$2 >> 2];
              $1 = HEAP32[$2 + 4 >> 2];
              $3 = $24 + 8 | 0;
              HEAP32[$3 >> 2] = $7;
              HEAP32[$3 + 4 >> 2] = $1;
              $2 = $13 + 84 | 0;
              $7 = HEAP32[$2 >> 2];
              $3 = HEAP32[$2 + 4 >> 2];
              $1 = $24;
              HEAP32[$1 >> 2] = $7;
              HEAP32[$1 + 4 >> 2] = $3;
              $2 = $13 + 164 | 0;
              $7 = HEAP32[$2 >> 2];
              $1 = HEAP32[$2 + 4 >> 2];
              $3 = $30;
              HEAP32[$3 >> 2] = $7;
              HEAP32[$3 + 4 >> 2] = $1;
              $2 = $13 + 172 | 0;
              $7 = HEAP32[$2 >> 2];
              $1 = $3 + 8 | 0;
              $3 = HEAP32[$2 + 4 >> 2];
              HEAP32[$1 >> 2] = $7;
              HEAP32[$1 + 4 >> 2] = $3;
              break label$27;
             }
             $4 = 2;
             if (($7 | 0) < 2) {
              break label$26
             }
             $6 = HEAPU8[$0 + 332 | 0];
            }
            if ($6 & 2) {
             break label$25
            }
            $4 = $4 + -1 | 0;
            HEAP32[$0 >> 2] = $4;
            $12 = ($4 << 4) + $0 | 0;
            $2 = $12 + 12 | 0;
            $7 = HEAP32[$2 >> 2];
            $1 = HEAP32[$2 + 4 >> 2];
            $3 = $17 + 8 | 0;
            HEAP32[$3 >> 2] = $7;
            HEAP32[$3 + 4 >> 2] = $1;
            $2 = $12 + 4 | 0;
            $7 = HEAP32[$2 >> 2];
            $3 = HEAP32[$2 + 4 >> 2];
            $1 = $17;
            HEAP32[$1 >> 2] = $7;
            HEAP32[$1 + 4 >> 2] = $3;
            $2 = $12 + 92 | 0;
            $7 = HEAP32[$2 >> 2];
            $1 = HEAP32[$2 + 4 >> 2];
            $3 = $14 + 8 | 0;
            HEAP32[$3 >> 2] = $7;
            HEAP32[$3 + 4 >> 2] = $1;
            $2 = $12 + 84 | 0;
            $7 = HEAP32[$2 >> 2];
            $3 = HEAP32[$2 + 4 >> 2];
            $1 = $14;
            HEAP32[$1 >> 2] = $7;
            HEAP32[$1 + 4 >> 2] = $3;
            $2 = $12 + 164 | 0;
            $7 = HEAP32[$2 >> 2];
            $1 = HEAP32[$2 + 4 >> 2];
            $3 = $23;
            HEAP32[$3 >> 2] = $7;
            HEAP32[$3 + 4 >> 2] = $1;
            $2 = $12 + 172 | 0;
            $7 = HEAP32[$2 >> 2];
            $1 = $3 + 8 | 0;
            $3 = HEAP32[$2 + 4 >> 2];
            HEAP32[$1 >> 2] = $7;
            HEAP32[$1 + 4 >> 2] = $3;
            break label$25;
           }
           $4 = 1;
           if (($7 | 0) != 1) {
            break label$24
           }
           $6 = HEAPU8[$0 + 332 | 0];
          }
          if ($6 & 1) {
           break label$24
          }
          $4 = $4 + -1 | 0;
          HEAP32[$0 >> 2] = $4;
          $4 = ($4 << 4) + $0 | 0;
          $2 = $4 + 12 | 0;
          $6 = HEAP32[$2 >> 2];
          $1 = HEAP32[$2 + 4 >> 2];
          $3 = $5 + 8 | 0;
          HEAP32[$3 >> 2] = $6;
          HEAP32[$3 + 4 >> 2] = $1;
          $2 = $4 + 4 | 0;
          $6 = HEAP32[$2 >> 2];
          $3 = HEAP32[$2 + 4 >> 2];
          $1 = $5;
          HEAP32[$1 >> 2] = $6;
          HEAP32[$1 + 4 >> 2] = $3;
          $2 = $4 + 92 | 0;
          $5 = HEAP32[$2 >> 2];
          $1 = HEAP32[$2 + 4 >> 2];
          $6 = $0 + 84 | 0;
          $3 = $6 + 8 | 0;
          HEAP32[$3 >> 2] = $5;
          HEAP32[$3 + 4 >> 2] = $1;
          $2 = $4 + 84 | 0;
          $5 = HEAP32[$2 >> 2];
          $3 = HEAP32[$2 + 4 >> 2];
          $1 = $6;
          HEAP32[$1 >> 2] = $5;
          HEAP32[$1 + 4 >> 2] = $3;
          $2 = $4 + 164 | 0;
          $5 = HEAP32[$2 >> 2];
          $1 = HEAP32[$2 + 4 >> 2];
          $6 = $0 + 164 | 0;
          $3 = $6;
          HEAP32[$3 >> 2] = $5;
          HEAP32[$3 + 4 >> 2] = $1;
          $2 = $4 + 172 | 0;
          $4 = HEAP32[$2 >> 2];
          $3 = HEAP32[$2 + 4 >> 2];
          $1 = $6 + 8 | 0;
          HEAP32[$1 >> 2] = $4;
          HEAP32[$1 + 4 >> 2] = $3;
         }
         $4 = 0;
         if (!(HEAPF32[$26 >> 2] >= Math_fround(0.0))) {
          break label$3
         }
         if (!(HEAPF32[$0 + 340 >> 2] >= Math_fround(0.0))) {
          break label$3
         }
         if (!(HEAPF32[$0 + 344 >> 2] >= Math_fround(0.0))) {
          break label$3
         }
         $4 = $9 >= Math_fround(0.0);
         break label$3;
        }
        if (!HEAPU8[$0 + 352 | 0]) {
         break label$5
        }
       case 0:
        break label$4;
       default:
        break label$6;
       };
      }
      $4 = 0;
      break label$3;
     }
     HEAP32[$0 + 276 >> 2] = 0;
     HEAP32[$0 + 280 >> 2] = 0;
     $4 = 1;
     HEAP8[$0 + 312 | 0] = 1;
     $1 = $0 + 284 | 0;
     HEAP32[$1 >> 2] = 0;
     HEAP32[$1 + 4 >> 2] = 0;
     break label$1;
    }
    $1 = HEAP32[$0 + 168 >> 2];
    HEAP32[$0 + 260 >> 2] = HEAP32[$0 + 164 >> 2];
    HEAP32[$0 + 264 >> 2] = $1;
    $3 = HEAP32[$0 + 88 >> 2];
    HEAP32[$0 + 244 >> 2] = HEAP32[$0 + 84 >> 2];
    HEAP32[$0 + 248 >> 2] = $3;
    $2 = $0 + 172 | 0;
    $6 = HEAP32[$2 >> 2];
    $1 = HEAP32[$2 + 4 >> 2];
    $4 = $0 + 268 | 0;
    $3 = $4;
    HEAP32[$3 >> 2] = $6;
    HEAP32[$3 + 4 >> 2] = $1;
    $2 = $0 + 92 | 0;
    $7 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    $6 = $0 + 252 | 0;
    $1 = $6;
    HEAP32[$1 >> 2] = $7;
    HEAP32[$1 + 4 >> 2] = $3;
    HEAP8[$0 + 352 | 0] = 0;
    HEAP32[$0 + 288 >> 2] = 0;
    HEAPF32[$0 + 280 >> 2] = HEAPF32[$0 + 248 >> 2] - HEAPF32[$0 + 264 >> 2];
    HEAPF32[$0 + 276 >> 2] = HEAPF32[$0 + 244 >> 2] - HEAPF32[$0 + 260 >> 2];
    HEAPF32[$0 + 284 >> 2] = HEAPF32[$1 >> 2] - HEAPF32[$4 >> 2];
    $1 = $0 + 344 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    HEAP32[$0 + 336 >> 2] = 1065353216;
    HEAP32[$0 + 340 >> 2] = 0;
    HEAP8[$0 + 332 | 0] = $5;
    $4 = 1;
   }
   HEAP8[$0 + 312 | 0] = $4;
  }
  global$0 = $21 + 16 | 0;
  return ($4 & 255) != 0;
 }
 
 function btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($0, $1, $2, $3, $4) {
  var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = 0;
  $10 = HEAPU8[$4 + 16 | 0] & -16;
  HEAP8[$4 + 16 | 0] = $10;
  $27 = HEAPF32[$3 >> 2];
  $12 = HEAPF32[$1 >> 2];
  $17 = Math_fround($27 - $12);
  $11 = HEAPF32[$0 >> 2];
  $6 = Math_fround($11 - $12);
  $28 = HEAPF32[$3 + 4 >> 2];
  $13 = HEAPF32[$1 + 4 >> 2];
  $18 = Math_fround($28 - $13);
  $8 = HEAPF32[$0 + 4 >> 2];
  $5 = Math_fround($8 - $13);
  $29 = HEAPF32[$3 + 8 >> 2];
  $14 = HEAPF32[$1 + 8 >> 2];
  $19 = Math_fround($29 - $14);
  $15 = HEAPF32[$0 + 8 >> 2];
  $7 = Math_fround($15 - $14);
  $9 = Math_fround(Math_fround(Math_fround($17 * $6) + Math_fround($18 * $5)) + Math_fround($19 * $7));
  $30 = $4;
  label$1 : {
   label$2 : {
    $23 = HEAPF32[$2 >> 2];
    $20 = Math_fround($23 - $12);
    $24 = HEAPF32[$2 + 4 >> 2];
    $21 = Math_fround($24 - $13);
    $25 = HEAPF32[$2 + 8 >> 2];
    $22 = Math_fround($25 - $14);
    $6 = Math_fround(Math_fround(Math_fround($20 * $6) + Math_fround($21 * $5)) + Math_fround($22 * $7));
    if (!($6 <= Math_fround(0.0))) {
     break label$2
    }
    if (!($9 <= Math_fround(0.0))) {
     break label$2
    }
    $0 = HEAP32[$1 + 4 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$4 + 4 >> 2] = $0;
    $1 = $1 + 8 | 0;
    $2 = HEAP32[$1 >> 2];
    $3 = HEAP32[$1 + 4 >> 2];
    $0 = $4 + 8 | 0;
    HEAP32[$0 >> 2] = $2;
    HEAP32[$0 + 4 >> 2] = $3;
    HEAP8[$4 + 16 | 0] = $10 | 1;
    $6 = Math_fround(0.0);
    $5 = Math_fround(0.0);
    $7 = Math_fround(1.0);
    break label$1;
   }
   $5 = Math_fround($11 - $23);
   $7 = Math_fround($8 - $24);
   $16 = Math_fround($15 - $25);
   $26 = Math_fround(Math_fround(Math_fround($17 * $5) + Math_fround($18 * $7)) + Math_fround($19 * $16));
   label$3 : {
    $7 = Math_fround(Math_fround(Math_fround($20 * $5) + Math_fround($21 * $7)) + Math_fround($22 * $16));
    if (!($7 >= Math_fround(0.0))) {
     break label$3
    }
    if (!($26 <= $7)) {
     break label$3
    }
    $1 = $2;
    $3 = HEAP32[$1 >> 2];
    $0 = HEAP32[$1 + 4 >> 2];
    HEAP32[$4 >> 2] = $3;
    HEAP32[$4 + 4 >> 2] = $0;
    $1 = $1 + 8 | 0;
    $2 = HEAP32[$1 >> 2];
    $3 = HEAP32[$1 + 4 >> 2];
    $0 = $4 + 8 | 0;
    HEAP32[$0 >> 2] = $2;
    HEAP32[$0 + 4 >> 2] = $3;
    HEAP8[$4 + 16 | 0] = $10 | 2;
    $6 = Math_fround(1.0);
    $5 = Math_fround(0.0);
    $7 = Math_fround(0.0);
    break label$1;
   }
   $16 = Math_fround(Math_fround($6 * $26) - Math_fround($7 * $9));
   label$4 : {
    if (!($7 <= Math_fround(0.0))) {
     break label$4
    }
    if (!($6 >= Math_fround(0.0))) {
     break label$4
    }
    $5 = Math_fround(0.0);
    if (!($16 <= Math_fround(0.0))) {
     break label$4
    }
    HEAP32[$4 + 12 >> 2] = 0;
    HEAP8[$4 + 16 | 0] = $10 | 3;
    $6 = Math_fround($6 / Math_fround($6 - $7));
    HEAPF32[$4 + 8 >> 2] = $14 + Math_fround($22 * $6);
    HEAPF32[$4 + 4 >> 2] = $13 + Math_fround($21 * $6);
    HEAPF32[$4 >> 2] = $12 + Math_fround($20 * $6);
    $7 = Math_fround(Math_fround(1.0) - $6);
    break label$1;
   }
   $5 = Math_fround($11 - $27);
   $8 = Math_fround($8 - $28);
   $15 = Math_fround($15 - $29);
   $11 = Math_fround(Math_fround(Math_fround($20 * $5) + Math_fround($21 * $8)) + Math_fround($22 * $15));
   label$5 : {
    $5 = Math_fround(Math_fround(Math_fround($17 * $5) + Math_fround($18 * $8)) + Math_fround($19 * $15));
    if (!($5 >= Math_fround(0.0))) {
     break label$5
    }
    if (!($11 <= $5)) {
     break label$5
    }
    $1 = $3;
    $3 = HEAP32[$1 >> 2];
    $0 = HEAP32[$1 + 4 >> 2];
    HEAP32[$4 >> 2] = $3;
    HEAP32[$4 + 4 >> 2] = $0;
    $1 = $1 + 8 | 0;
    $2 = HEAP32[$1 >> 2];
    $3 = HEAP32[$1 + 4 >> 2];
    $0 = $4 + 8 | 0;
    HEAP32[$0 >> 2] = $2;
    HEAP32[$0 + 4 >> 2] = $3;
    HEAP8[$4 + 16 | 0] = $10 | 4;
    $5 = Math_fround(1.0);
    $6 = Math_fround(0.0);
    $7 = Math_fround(0.0);
    break label$1;
   }
   $8 = Math_fround(Math_fround($11 * $9) - Math_fround($6 * $5));
   label$6 : {
    if (!($5 <= Math_fround(0.0))) {
     break label$6
    }
    if (!($9 >= Math_fround(0.0))) {
     break label$6
    }
    $6 = Math_fround(0.0);
    if (!($8 <= Math_fround(0.0))) {
     break label$6
    }
    HEAP32[$4 + 12 >> 2] = 0;
    HEAP8[$4 + 16 | 0] = $10 | 5;
    $5 = Math_fround($9 / Math_fround($9 - $5));
    HEAPF32[$4 + 8 >> 2] = $14 + Math_fround($19 * $5);
    HEAPF32[$4 + 4 >> 2] = $13 + Math_fround($18 * $5);
    HEAPF32[$4 >> 2] = $12 + Math_fround($17 * $5);
    $7 = Math_fround(Math_fround(1.0) - $5);
    break label$1;
   }
   label$7 : {
    $6 = Math_fround(Math_fround($7 * $5) - Math_fround($11 * $26));
    if (!($6 <= Math_fround(0.0))) {
     break label$7
    }
    $9 = Math_fround($26 - $7);
    if (!($9 >= Math_fround(0.0))) {
     break label$7
    }
    $5 = Math_fround($11 - $5);
    if (!($5 >= Math_fround(0.0))) {
     break label$7
    }
    HEAP32[$4 + 12 >> 2] = 0;
    HEAP8[$4 + 16 | 0] = $10 | 6;
    $5 = Math_fround($9 / Math_fround($9 + $5));
    HEAPF32[$4 + 8 >> 2] = $25 + Math_fround(Math_fround($29 - $25) * $5);
    HEAPF32[$4 + 4 >> 2] = $24 + Math_fround(Math_fround($28 - $24) * $5);
    HEAPF32[$4 >> 2] = $23 + Math_fround(Math_fround($27 - $23) * $5);
    $6 = Math_fround(Math_fround(1.0) - $5);
    $7 = Math_fround(0.0);
    break label$1;
   }
   HEAP32[$4 + 12 >> 2] = 0;
   HEAP8[$4 + 16 | 0] = $10 | 7;
   $6 = Math_fround(Math_fround(1.0) / Math_fround($16 + Math_fround($6 + $8)));
   $5 = Math_fround($16 * $6);
   $6 = Math_fround($8 * $6);
   HEAPF32[$4 + 8 >> 2] = Math_fround($19 * $5) + Math_fround($14 + Math_fround($22 * $6));
   HEAPF32[$4 + 4 >> 2] = Math_fround($18 * $5) + Math_fround($13 + Math_fround($21 * $6));
   HEAPF32[$4 >> 2] = Math_fround($17 * $5) + Math_fround($12 + Math_fround($20 * $6));
   $7 = Math_fround(Math_fround(Math_fround(1.0) - $6) - $5);
  }
  HEAPF32[$30 + 20 >> 2] = $7;
  HEAP32[$4 + 32 >> 2] = 0;
  HEAPF32[$4 + 28 >> 2] = $5;
  HEAPF32[$4 + 24 >> 2] = $6;
 }
 
 function btVoronoiSimplexSolver__closestPtPointTetrahedron_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($0, $1, $2, $3, $4, $5) {
  var $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = 0, $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0);
  $7 = global$0 - 48 | 0;
  global$0 = $7;
  $13 = HEAP32[$0 + 4 >> 2];
  HEAP32[$5 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$5 + 4 >> 2] = $13;
  $15 = $0 + 8 | 0;
  $16 = HEAP32[$15 >> 2];
  $15 = HEAP32[$15 + 4 >> 2];
  HEAP8[$5 + 16 | 0] = HEAPU8[$5 + 16 | 0] | 15;
  $13 = $5 + 8 | 0;
  HEAP32[$13 >> 2] = $16;
  HEAP32[$13 + 4 >> 2] = $15;
  HEAP8[$7 + 24 | 0] = 0;
  $18 = -1;
  $16 = -1;
  $31 = -1;
  $32 = -1;
  $33 = HEAPF32[$4 >> 2];
  $8 = HEAPF32[$1 >> 2];
  $10 = Math_fround($33 - $8);
  $21 = HEAPF32[$2 + 4 >> 2];
  $6 = HEAPF32[$1 + 4 >> 2];
  $11 = Math_fround($21 - $6);
  $34 = HEAPF32[$3 + 8 >> 2];
  $9 = HEAPF32[$1 + 8 >> 2];
  $14 = Math_fround($34 - $9);
  $22 = HEAPF32[$2 + 8 >> 2];
  $19 = Math_fround($22 - $9);
  $35 = HEAPF32[$3 + 4 >> 2];
  $23 = Math_fround($35 - $6);
  $24 = Math_fround(Math_fround($11 * $14) - Math_fround($19 * $23));
  $36 = HEAPF32[$4 + 4 >> 2];
  $25 = Math_fround($36 - $6);
  $30 = HEAPF32[$3 >> 2];
  $26 = Math_fround($30 - $8);
  $27 = HEAPF32[$2 >> 2];
  $28 = Math_fround($27 - $8);
  $20 = Math_fround(Math_fround($19 * $26) - Math_fround($28 * $14));
  $12 = Math_fround(Math_fround($28 * $23) - Math_fround($11 * $26));
  $37 = HEAPF32[$4 + 8 >> 2];
  $29 = Math_fround($37 - $9);
  $17 = Math_fround(Math_fround(Math_fround($10 * $24) + Math_fround($25 * $20)) + Math_fround($12 * $29));
  if (!(Math_fround($17 * $17) < Math_fround(9.99999905104687e-09))) {
   $16 = Math_fround($17 * Math_fround(Math_fround(Math_fround($24 * Math_fround(HEAPF32[$0 >> 2] - $8)) + Math_fround($20 * Math_fround(HEAPF32[$0 + 4 >> 2] - $6))) + Math_fround($12 * Math_fround(HEAPF32[$0 + 8 >> 2] - $9)))) < Math_fround(0.0)
  }
  $24 = Math_fround(Math_fround($26 * $25) - Math_fround($23 * $10));
  $20 = Math_fround(Math_fround($23 * $29) - Math_fround($14 * $25));
  $12 = Math_fround(Math_fround($14 * $10) - Math_fround($26 * $29));
  $17 = Math_fround(Math_fround($19 * $24) + Math_fround(Math_fround($28 * $20) + Math_fround($11 * $12)));
  if (!(Math_fround($17 * $17) < Math_fround(9.99999905104687e-09))) {
   $18 = Math_fround($17 * Math_fround(Math_fround(Math_fround($20 * Math_fround(HEAPF32[$0 >> 2] - $8)) + Math_fround($12 * Math_fround(HEAPF32[$0 + 4 >> 2] - $6))) + Math_fround($24 * Math_fround(HEAPF32[$0 + 8 >> 2] - $9)))) < Math_fround(0.0)
  }
  $17 = Math_fround(Math_fround($11 * $10) - Math_fround($28 * $25));
  $12 = Math_fround($14 * $17);
  $11 = Math_fround(Math_fround($19 * $25) - Math_fround($11 * $29));
  $14 = Math_fround(Math_fround($28 * $29) - Math_fround($19 * $10));
  $10 = Math_fround($12 + Math_fround(Math_fround($26 * $11) + Math_fround($23 * $14)));
  if (!(Math_fround($10 * $10) < Math_fround(9.99999905104687e-09))) {
   $32 = Math_fround($10 * Math_fround(Math_fround(Math_fround($11 * Math_fround(HEAPF32[$0 >> 2] - $8)) + Math_fround($14 * Math_fround(HEAPF32[$0 + 4 >> 2] - $6))) + Math_fround($17 * Math_fround(HEAPF32[$0 + 8 >> 2] - $9)))) < Math_fround(0.0)
  }
  $20 = Math_fround($9 - $22);
  $9 = Math_fround($35 - $21);
  $10 = Math_fround($33 - $27);
  $11 = Math_fround($30 - $27);
  $14 = Math_fround($36 - $21);
  $19 = Math_fround(Math_fround($9 * $10) - Math_fround($11 * $14));
  $30 = Math_fround($8 - $27);
  $8 = Math_fround($34 - $22);
  $12 = Math_fround($8 * $14);
  $14 = Math_fround($37 - $22);
  $9 = Math_fround($12 - Math_fround($9 * $14));
  $12 = Math_fround($6 - $21);
  $6 = Math_fround(Math_fround($11 * $14) - Math_fround($8 * $10));
  $8 = Math_fround(Math_fround($20 * $19) + Math_fround(Math_fround($30 * $9) + Math_fround($12 * $6)));
  if (!(Math_fround($8 * $8) < Math_fround(9.99999905104687e-09))) {
   $31 = Math_fround($8 * Math_fround(Math_fround(Math_fround($9 * Math_fround(HEAPF32[$0 >> 2] - $27)) + Math_fround($6 * Math_fround(HEAPF32[$0 + 4 >> 2] - $21))) + Math_fround($19 * Math_fround(HEAPF32[$0 + 8 >> 2] - $22)))) < Math_fround(0.0)
  }
  $15 = $31 | ($32 | ($16 | $18));
  label$5 : {
   if (($15 | 0) <= -1) {
    HEAP8[$5 + 36 | 0] = 1;
    $13 = 0;
    break label$5;
   }
   $13 = 0;
   if (!$15) {
    break label$5
   }
   $8 = Math_fround(3402823466385288598117041.0e14);
   label$8 : {
    if (!$16) {
     break label$8
    }
    btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($0, $1, $2, $3, $7 + 8 | 0);
    $9 = HEAPF32[$7 + 8 >> 2];
    $6 = Math_fround($9 - HEAPF32[$0 >> 2]);
    $8 = Math_fround($6 * $6);
    $10 = HEAPF32[$7 + 12 >> 2];
    $6 = Math_fround($10 - HEAPF32[$0 + 4 >> 2]);
    $8 = Math_fround($8 + Math_fround($6 * $6));
    $11 = HEAPF32[$7 + 16 >> 2];
    $6 = Math_fround($11 - HEAPF32[$0 + 8 >> 2]);
    $6 = Math_fround($8 + Math_fround($6 * $6));
    $8 = Math_fround(3402823466385288598117041.0e14);
    if (!($6 < Math_fround(3402823466385288598117041.0e14))) {
     break label$8
    }
    HEAP32[$5 + 12 >> 2] = HEAP32[$7 + 20 >> 2];
    HEAPF32[$5 + 8 >> 2] = $11;
    HEAPF32[$5 + 4 >> 2] = $10;
    HEAPF32[$5 >> 2] = $9;
    $13 = HEAP32[$7 + 32 >> 2];
    HEAP32[$5 + 20 >> 2] = HEAP32[$7 + 28 >> 2];
    HEAP32[$5 + 24 >> 2] = $13;
    HEAP32[$5 + 32 >> 2] = 0;
    HEAP32[$5 + 28 >> 2] = HEAP32[$7 + 36 >> 2];
    $16 = HEAPU8[$7 + 24 | 0];
    HEAP8[$5 + 16 | 0] = $16 & 1 | HEAPU8[$5 + 16 | 0] & 240 | $16 & 2 | $16 & 4;
    $8 = $6;
   }
   label$10 : {
    if (!$18) {
     break label$10
    }
    btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($0, $1, $3, $4, $7 + 8 | 0);
    $9 = HEAPF32[$7 + 8 >> 2];
    $6 = Math_fround($9 - HEAPF32[$0 >> 2]);
    $12 = Math_fround($6 * $6);
    $10 = HEAPF32[$7 + 12 >> 2];
    $6 = Math_fround($10 - HEAPF32[$0 + 4 >> 2]);
    $12 = Math_fround($12 + Math_fround($6 * $6));
    $11 = HEAPF32[$7 + 16 >> 2];
    $6 = Math_fround($11 - HEAPF32[$0 + 8 >> 2]);
    $6 = Math_fround($12 + Math_fround($6 * $6));
    if (!($6 < $8)) {
     break label$10
    }
    HEAP32[$5 + 12 >> 2] = HEAP32[$7 + 20 >> 2];
    HEAPF32[$5 + 8 >> 2] = $11;
    HEAPF32[$5 + 4 >> 2] = $10;
    HEAPF32[$5 >> 2] = $9;
    HEAP32[$5 + 20 >> 2] = HEAP32[$7 + 28 >> 2];
    HEAP32[$5 + 24 >> 2] = 0;
    $15 = $7 + 32 | 0;
    $16 = HEAP32[$15 >> 2];
    $15 = HEAP32[$15 + 4 >> 2];
    $13 = $5 + 28 | 0;
    HEAP32[$13 >> 2] = $16;
    HEAP32[$13 + 4 >> 2] = $15;
    $18 = HEAPU8[$7 + 24 | 0];
    $13 = $18 & 1 | HEAPU8[$5 + 16 | 0] & 240;
    $18 = $18 << 1;
    HEAP8[$5 + 16 | 0] = $13 | $18 & 4 | $18 & 8;
    $8 = $6;
   }
   label$11 : {
    if (!$32) {
     break label$11
    }
    btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($0, $1, $4, $2, $7 + 8 | 0);
    $9 = HEAPF32[$7 + 8 >> 2];
    $6 = Math_fround($9 - HEAPF32[$0 >> 2]);
    $12 = Math_fround($6 * $6);
    $10 = HEAPF32[$7 + 12 >> 2];
    $6 = Math_fround($10 - HEAPF32[$0 + 4 >> 2]);
    $12 = Math_fround($12 + Math_fround($6 * $6));
    $11 = HEAPF32[$7 + 16 >> 2];
    $6 = Math_fround($11 - HEAPF32[$0 + 8 >> 2]);
    $6 = Math_fround($12 + Math_fround($6 * $6));
    if (!($6 < $8)) {
     break label$11
    }
    HEAP32[$5 + 12 >> 2] = HEAP32[$7 + 20 >> 2];
    HEAPF32[$5 + 8 >> 2] = $11;
    HEAPF32[$5 + 4 >> 2] = $10;
    HEAPF32[$5 >> 2] = $9;
    HEAP32[$5 + 20 >> 2] = HEAP32[$7 + 28 >> 2];
    HEAP32[$5 + 28 >> 2] = 0;
    HEAP32[$5 + 32 >> 2] = HEAP32[$7 + 32 >> 2];
    HEAP32[$5 + 24 >> 2] = HEAP32[$7 + 36 >> 2];
    $1 = HEAPU8[$7 + 24 | 0];
    HEAP8[$5 + 16 | 0] = $1 & 1 | HEAPU8[$5 + 16 | 0] & 240 | $1 >>> 1 & 2 | $1 << 2 & 8;
    $8 = $6;
   }
   $13 = 1;
   if (!$31) {
    break label$5
   }
   btVoronoiSimplexSolver__closestPtPointTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btSubSimplexClosestResult__29($0, $2, $4, $3, $7 + 8 | 0);
   $9 = HEAPF32[$7 + 8 >> 2];
   $6 = Math_fround($9 - HEAPF32[$0 >> 2]);
   $12 = Math_fround($6 * $6);
   $10 = HEAPF32[$7 + 12 >> 2];
   $6 = Math_fround($10 - HEAPF32[$0 + 4 >> 2]);
   $12 = Math_fround($12 + Math_fround($6 * $6));
   $11 = HEAPF32[$7 + 16 >> 2];
   $6 = Math_fround($11 - HEAPF32[$0 + 8 >> 2]);
   $13 = 1;
   if (!(Math_fround($12 + Math_fround($6 * $6)) < $8)) {
    break label$5
   }
   HEAP32[$5 + 12 >> 2] = HEAP32[$7 + 20 >> 2];
   HEAPF32[$5 + 8 >> 2] = $11;
   HEAPF32[$5 + 4 >> 2] = $10;
   HEAPF32[$5 >> 2] = $9;
   HEAP32[$5 + 20 >> 2] = 0;
   HEAP32[$5 + 24 >> 2] = HEAP32[$7 + 28 >> 2];
   HEAP32[$5 + 32 >> 2] = HEAP32[$7 + 32 >> 2];
   HEAP32[$5 + 28 >> 2] = HEAP32[$7 + 36 >> 2];
   $0 = HEAPU8[$7 + 24 | 0];
   HEAP8[$5 + 16 | 0] = $0 & 4 | HEAPU8[$5 + 16 | 0] & 240 | $0 << 1 & 2 | $0 << 2 & 8;
   $13 = 1;
  }
  $4 = $13;
  global$0 = $7 + 48 | 0;
  return $4;
 }
 
 function btVoronoiSimplexSolver__closest_28btVector3__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $4 = btVoronoiSimplexSolver__updateClosestVectorAndPoints_28_29($0);
  $2 = $0 + 284 | 0;
  $5 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $3 = $1 + 8 | 0;
  HEAP32[$3 >> 2] = $5;
  HEAP32[$3 + 4 >> 2] = $2;
  $3 = HEAP32[$0 + 280 >> 2];
  HEAP32[$1 >> 2] = HEAP32[$0 + 276 >> 2];
  HEAP32[$1 + 4 >> 2] = $3;
  return $4;
 }
 
 function btVoronoiSimplexSolver__inSimplex_28btVector3_20const__29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0);
  $5 = HEAP32[$0 >> 2];
  $4 = 0;
  label$1 : {
   if (($5 | 0) < 1) {
    break label$1
   }
   $2 = $0 + 8 | 0;
   $7 = HEAPF32[$0 + 308 >> 2];
   $8 = HEAPF32[$1 + 8 >> 2];
   $9 = HEAPF32[$1 + 4 >> 2];
   $10 = HEAPF32[$1 >> 2];
   while (1) {
    $3 = Math_fround($10 - HEAPF32[$2 + -4 >> 2]);
    $6 = Math_fround($3 * $3);
    $3 = Math_fround($9 - HEAPF32[$2 >> 2]);
    $6 = Math_fround($6 + Math_fround($3 * $3));
    $3 = Math_fround($8 - HEAPF32[$2 + 4 >> 2]);
    $4 = 1;
    if (!!(Math_fround($6 + Math_fround($3 * $3)) <= $7)) {
     break label$1
    }
    $2 = $2 + 16 | 0;
    $5 = $5 + -1 | 0;
    if ($5) {
     continue
    }
    break;
   };
   $4 = 0;
  }
  $2 = $4;
  label$4 : {
   if (HEAPF32[$1 + 12 >> 2] != HEAPF32[$0 + 304 >> 2]) {
    break label$4
   }
   if (HEAPF32[$1 + 8 >> 2] != HEAPF32[$0 + 300 >> 2]) {
    break label$4
   }
   if (HEAPF32[$1 + 4 >> 2] != HEAPF32[$0 + 296 >> 2]) {
    break label$4
   }
   if (HEAPF32[$1 >> 2] != HEAPF32[$0 + 292 >> 2]) {
    break label$4
   }
   $2 = 1;
  }
  return $2;
 }
 
 function btVoronoiSimplexSolver__compute_points_28btVector3__2c_20btVector3__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  btVoronoiSimplexSolver__updateClosestVectorAndPoints_28_29($0);
  $4 = HEAP32[$0 + 248 >> 2];
  $3 = $1;
  HEAP32[$3 >> 2] = HEAP32[$0 + 244 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $1 = $0 + 252 | 0;
  $5 = HEAP32[$1 >> 2];
  $4 = $3 + 8 | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $1 = $0 + 268 | 0;
  $5 = HEAP32[$1 >> 2];
  $4 = HEAP32[$1 + 4 >> 2];
  $3 = $2 + 8 | 0;
  HEAP32[$3 >> 2] = $5;
  HEAP32[$3 + 4 >> 2] = $4;
  $3 = HEAP32[$0 + 264 >> 2];
  $4 = $2;
  HEAP32[$4 >> 2] = HEAP32[$0 + 260 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
 }
 
 function btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($0, $1, $2, $3, $4) {
  var $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  HEAP32[$0 >> 2] = 14908;
  HEAP32[$0 + 32 >> 2] = $2;
  HEAP32[$0 + 28 >> 2] = $1;
  HEAP32[$0 + 24 >> 2] = $3;
  HEAP32[$0 + 20 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 1065353216;
  $3 = $0 + 12 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 40 >> 2] = HEAP32[$2 + 4 >> 2];
  (wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 48 >> 2]]($1))), HEAPF32[wasm2js_i32$0 + 44 >> 2] = wasm2js_f32$0;
  $5 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2));
  HEAP32[$0 + 72 >> 2] = 1;
  HEAP32[$0 + 76 >> 2] = 1;
  HEAP32[$0 + 60 >> 2] = -1;
  HEAP8[$0 + 52 | 0] = 0;
  HEAPF32[$0 + 48 >> 2] = $5;
  return $0;
 }
 
 function btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20int_2c_20int_2c_20float_2c_20float_2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  HEAP32[$0 + 72 >> 2] = 1;
  HEAP32[$0 + 76 >> 2] = 1;
  HEAP32[$0 + 60 >> 2] = -1;
  HEAP8[$0 + 52 | 0] = 0;
  HEAPF32[$0 + 48 >> 2] = $6;
  HEAPF32[$0 + 44 >> 2] = $5;
  HEAP32[$0 + 40 >> 2] = $4;
  HEAP32[$0 + 36 >> 2] = $3;
  HEAP32[$0 + 32 >> 2] = $2;
  HEAP32[$0 + 28 >> 2] = $1;
  HEAP32[$0 + 24 >> 2] = $7;
  HEAP32[$0 + 20 >> 2] = $8;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 1065353216;
  HEAP32[$0 >> 2] = 14908;
  $1 = $0 + 12 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  return $0;
 }
 
 function btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  btGjkPairDetector__getClosestPointsNonVirtual_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__29($0, $1, $2, $3);
 }
 
 function btGjkPairDetector__getClosestPointsNonVirtual_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = 0, $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0);
  $4 = global$0 - 272 | 0;
  global$0 = $4;
  HEAP32[$0 + 56 >> 2] = 0;
  $5 = $4 + 264 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$4 + 256 >> 2] = 0;
  HEAP32[$4 + 260 >> 2] = 0;
  $7 = $1 + 8 | 0;
  $15 = HEAP32[$7 >> 2];
  $5 = HEAP32[$7 + 4 >> 2];
  $8 = $4 + 168 | 0;
  HEAP32[$8 >> 2] = $15;
  HEAP32[$8 + 4 >> 2] = $5;
  $7 = $1 + 24 | 0;
  $15 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $5 = $4 + 184 | 0;
  HEAP32[$5 >> 2] = $15;
  HEAP32[$5 + 4 >> 2] = $8;
  $7 = $1 + 40 | 0;
  $15 = HEAP32[$7 >> 2];
  $5 = HEAP32[$7 + 4 >> 2];
  $8 = $4 + 200 | 0;
  HEAP32[$8 >> 2] = $15;
  HEAP32[$8 + 4 >> 2] = $5;
  $7 = $1 + 56 | 0;
  $15 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $13 = $4 + 216 | 0;
  $5 = $13;
  HEAP32[$5 >> 2] = $15;
  HEAP32[$5 + 4 >> 2] = $8;
  $5 = HEAP32[$1 + 4 >> 2];
  HEAP32[$4 + 160 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 164 >> 2] = $5;
  $8 = HEAP32[$1 + 20 >> 2];
  HEAP32[$4 + 176 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$4 + 180 >> 2] = $8;
  $5 = HEAP32[$1 + 36 >> 2];
  HEAP32[$4 + 192 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$4 + 196 >> 2] = $5;
  $8 = HEAP32[$1 + 52 >> 2];
  HEAP32[$4 + 208 >> 2] = HEAP32[$1 + 48 >> 2];
  HEAP32[$4 + 212 >> 2] = $8;
  $7 = $1 + 120 | 0;
  $15 = HEAP32[$7 >> 2];
  $5 = HEAP32[$7 + 4 >> 2];
  $19 = $4 + 152 | 0;
  $8 = $19;
  HEAP32[$8 >> 2] = $15;
  HEAP32[$8 + 4 >> 2] = $5;
  $7 = $1 + 72 | 0;
  $15 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $5 = $4 + 104 | 0;
  HEAP32[$5 >> 2] = $15;
  HEAP32[$5 + 4 >> 2] = $8;
  $7 = $1 + 88 | 0;
  $15 = HEAP32[$7 >> 2];
  $5 = HEAP32[$7 + 4 >> 2];
  $8 = $4 + 120 | 0;
  HEAP32[$8 >> 2] = $15;
  HEAP32[$8 + 4 >> 2] = $5;
  $7 = $1 + 104 | 0;
  $15 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $5 = $4 + 136 | 0;
  HEAP32[$5 >> 2] = $15;
  HEAP32[$5 + 4 >> 2] = $8;
  $5 = HEAP32[$1 + 68 >> 2];
  HEAP32[$4 + 96 >> 2] = HEAP32[$1 + 64 >> 2];
  HEAP32[$4 + 100 >> 2] = $5;
  $7 = $1 + 80 | 0;
  $5 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  HEAP32[$4 + 112 >> 2] = $5;
  HEAP32[$4 + 116 >> 2] = $8;
  $7 = $1 + 96 | 0;
  $8 = HEAP32[$7 >> 2];
  $5 = HEAP32[$7 + 4 >> 2];
  HEAP32[$4 + 128 >> 2] = $8;
  HEAP32[$4 + 132 >> 2] = $5;
  $7 = $1 + 112 | 0;
  $5 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  HEAP32[$4 + 144 >> 2] = $5;
  HEAP32[$4 + 148 >> 2] = $8;
  $20 = $4 + 148 | 0;
  $6 = HEAPF32[$20 >> 2];
  $15 = $4 + 212 | 0;
  $9 = HEAPF32[$15 >> 2];
  $10 = HEAPF32[$4 + 144 >> 2];
  $11 = HEAPF32[$4 + 208 >> 2];
  $16 = HEAPF32[$13 >> 2];
  $14 = HEAPF32[$19 >> 2];
  $24 = Math_fround(Math_fround($16 + $14) * Math_fround(.5));
  HEAPF32[$13 >> 2] = $16 - $24;
  $25 = Math_fround(Math_fround($9 + $6) * Math_fround(.5));
  HEAPF32[$15 >> 2] = $9 - $25;
  $26 = Math_fround(Math_fround($11 + $10) * Math_fround(.5));
  HEAPF32[$4 + 208 >> 2] = $11 - $26;
  HEAPF32[$19 >> 2] = $14 - $24;
  HEAPF32[$20 >> 2] = $6 - $25;
  HEAPF32[$4 + 144 >> 2] = $10 - $26;
  $19 = 0;
  $19 = HEAP32[HEAP32[$0 + 28 >> 2] + 4 >> 2] + -17 >>> 0 <= 1 ? HEAP32[HEAP32[$0 + 32 >> 2] + 4 >> 2] + -17 >>> 0 < 2 : $19;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 1065353216;
  HEAP32[$0 + 60 >> 2] = -1;
  HEAP32[$0 + 64 >> 2] = 0;
  $5 = $0 + 12 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[432] = HEAP32[432] + 1;
  $22 = HEAPF32[$0 + 44 >> 2];
  $6 = HEAPF32[$0 + 48 >> 2];
  $27 = HEAPU8[$0 + 52 | 0];
  btVoronoiSimplexSolver__reset_28_29(HEAP32[$0 + 24 >> 2]);
  $21 = $27 ? Math_fround(0.0) : $6;
  $15 = $0 + 4 | 0;
  $17 = Math_fround(999999984306749440.0);
  $20 = 0;
  while (1) {
   HEAP32[$4 + 252 >> 2] = 0;
   $10 = HEAPF32[$0 + 4 >> 2];
   $11 = Math_fround(-$10);
   $6 = HEAPF32[$0 + 8 >> 2];
   $9 = HEAPF32[$0 + 12 >> 2];
   HEAPF32[$4 + 248 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2] * $11) - Math_fround(HEAPF32[$1 + 24 >> 2] * $6)) - Math_fround(HEAPF32[$1 + 40 >> 2] * $9);
   HEAPF32[$4 + 244 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 4 >> 2] * $11) - Math_fround($6 * HEAPF32[$1 + 20 >> 2])) - Math_fround($9 * HEAPF32[$1 + 36 >> 2]);
   HEAPF32[$4 + 240 >> 2] = Math_fround(Math_fround(HEAPF32[$1 >> 2] * $11) - Math_fround($6 * HEAPF32[$1 + 16 >> 2])) - Math_fround($9 * HEAPF32[$1 + 32 >> 2]);
   HEAP32[$4 + 236 >> 2] = 0;
   HEAPF32[$4 + 232 >> 2] = Math_fround(Math_fround($10 * HEAPF32[$1 + 72 >> 2]) + Math_fround($6 * HEAPF32[$1 + 88 >> 2])) + Math_fround($9 * HEAPF32[$1 + 104 >> 2]);
   HEAPF32[$4 + 228 >> 2] = Math_fround(Math_fround($10 * HEAPF32[$1 + 68 >> 2]) + Math_fround($6 * HEAPF32[$1 + 84 >> 2])) + Math_fround($9 * HEAPF32[$1 + 100 >> 2]);
   HEAPF32[$4 + 224 >> 2] = Math_fround(Math_fround($10 * HEAPF32[$1 + 64 >> 2]) + Math_fround($6 * HEAPF32[$1 + 80 >> 2])) + Math_fround($9 * HEAPF32[$1 + 96 >> 2]);
   btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($4 + 80 | 0, HEAP32[$0 + 28 >> 2], $4 + 240 | 0);
   btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($4 - -64 | 0, HEAP32[$0 + 32 >> 2], $4 + 224 | 0);
   HEAP32[$4 + 60 >> 2] = 0;
   $6 = HEAPF32[$4 + 80 >> 2];
   $9 = HEAPF32[$4 + 84 >> 2];
   $10 = HEAPF32[$4 + 88 >> 2];
   $11 = Math_fround(Math_fround(Math_fround(Math_fround($6 * HEAPF32[$4 + 192 >> 2]) + Math_fround($9 * HEAPF32[$4 + 196 >> 2])) + Math_fround($10 * HEAPF32[$4 + 200 >> 2])) + HEAPF32[$4 + 216 >> 2]);
   HEAPF32[$4 + 56 >> 2] = $11;
   $14 = Math_fround(Math_fround(Math_fround(Math_fround($6 * HEAPF32[$4 + 176 >> 2]) + Math_fround($9 * HEAPF32[$4 + 180 >> 2])) + Math_fround($10 * HEAPF32[$4 + 184 >> 2])) + HEAPF32[$4 + 212 >> 2]);
   HEAPF32[$4 + 52 >> 2] = $14;
   $12 = Math_fround(Math_fround(Math_fround(Math_fround($6 * HEAPF32[$4 + 160 >> 2]) + Math_fround($9 * HEAPF32[$4 + 164 >> 2])) + Math_fround($10 * HEAPF32[$4 + 168 >> 2])) + HEAPF32[$4 + 208 >> 2]);
   HEAPF32[$4 + 48 >> 2] = $12;
   HEAP32[$4 + 44 >> 2] = 0;
   $6 = HEAPF32[$4 + 64 >> 2];
   $9 = HEAPF32[$4 + 68 >> 2];
   $10 = HEAPF32[$4 + 72 >> 2];
   $16 = Math_fround(Math_fround(Math_fround(Math_fround($6 * HEAPF32[$4 + 128 >> 2]) + Math_fround($9 * HEAPF32[$4 + 132 >> 2])) + Math_fround($10 * HEAPF32[$4 + 136 >> 2])) + HEAPF32[$4 + 152 >> 2]);
   HEAPF32[$4 + 40 >> 2] = $16;
   $18 = Math_fround(Math_fround(Math_fround(Math_fround($6 * HEAPF32[$4 + 112 >> 2]) + Math_fround($9 * HEAPF32[$4 + 116 >> 2])) + Math_fround($10 * HEAPF32[$4 + 120 >> 2])) + HEAPF32[$4 + 148 >> 2]);
   HEAPF32[$4 + 36 >> 2] = $18;
   $6 = Math_fround(Math_fround(Math_fround(Math_fround($6 * HEAPF32[$4 + 96 >> 2]) + Math_fround($9 * HEAPF32[$4 + 100 >> 2])) + Math_fround($10 * HEAPF32[$4 + 104 >> 2])) + HEAPF32[$4 + 144 >> 2]);
   HEAPF32[$4 + 32 >> 2] = $6;
   if ($19) {
    HEAP32[$4 + 40 >> 2] = 0;
    HEAP32[$4 + 56 >> 2] = 0;
    $16 = Math_fround(0.0);
    $11 = Math_fround(0.0);
   }
   HEAP32[$4 + 28 >> 2] = 0;
   $9 = Math_fround($14 - $18);
   HEAPF32[$4 + 20 >> 2] = $9;
   $10 = HEAPF32[$0 + 8 >> 2];
   $6 = Math_fround($12 - $6);
   HEAPF32[$4 + 16 >> 2] = $6;
   $14 = HEAPF32[$0 + 4 >> 2];
   $11 = Math_fround($11 - $16);
   HEAPF32[$4 + 24 >> 2] = $11;
   label$4 : {
    label$5 : {
     label$6 : {
      $6 = Math_fround(Math_fround(Math_fround($6 * $14) + Math_fround($9 * $10)) + Math_fround($11 * HEAPF32[$0 + 12 >> 2]));
      if (!($6 > Math_fround(0.0))) {
       break label$6
      }
      if (!(Math_fround($6 * $6) > Math_fround($17 * HEAPF32[$1 + 128 >> 2]))) {
       break label$6
      }
      HEAP32[$0 + 68 >> 2] = 10;
      break label$5;
     }
     if (btVoronoiSimplexSolver__inSimplex_28btVector3_20const__29(HEAP32[$0 + 24 >> 2], $4 + 16 | 0)) {
      $20 = 1;
      HEAP32[$0 + 68 >> 2] = 1;
      $13 = 2;
      break label$4;
     }
     $6 = Math_fround($17 - $6);
     if (!!($6 <= Math_fround($17 * Math_fround(9.999999974752427e-07)))) {
      $13 = 2;
      HEAP32[$0 + 68 >> 2] = $6 <= Math_fround(0.0) ? 2 : 11;
      $20 = 1;
      break label$4;
     }
     btVoronoiSimplexSolver__addVertex_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29(HEAP32[$0 + 24 >> 2], $4 + 16 | 0, $4 + 48 | 0, $4 + 32 | 0);
     if (!btVoronoiSimplexSolver__closest_28btVector3__29(HEAP32[$0 + 24 >> 2], $4)) {
      HEAP32[$0 + 68 >> 2] = 3;
      break label$5;
     }
     $6 = HEAPF32[$4 >> 2];
     $9 = Math_fround($6 * $6);
     $6 = HEAPF32[$4 + 4 >> 2];
     $9 = Math_fround($9 + Math_fround($6 * $6));
     $6 = HEAPF32[$4 + 8 >> 2];
     $6 = Math_fround($9 + Math_fround($6 * $6));
     if (!!($6 < Math_fround(9.999999974752427e-07))) {
      $5 = HEAP32[$4 + 4 >> 2];
      $8 = $15;
      HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$8 + 4 >> 2] = $5;
      HEAP32[$0 + 68 >> 2] = 6;
      $7 = $4 + 8 | 0;
      $13 = HEAP32[$7 >> 2];
      $5 = $8 + 8 | 0;
      $8 = HEAP32[$7 + 4 >> 2];
      HEAP32[$5 >> 2] = $13;
      HEAP32[$5 + 4 >> 2] = $8;
      break label$5;
     }
     label$11 : {
      if (!!(Math_fround($17 - $6) <= Math_fround($17 * Math_fround(1.1920928955078125e-07)))) {
       HEAP32[$0 + 68 >> 2] = 12;
       $20 = 1;
       $13 = 2;
       break label$11;
      }
      $5 = HEAP32[$4 + 4 >> 2];
      $8 = $15;
      HEAP32[$8 >> 2] = HEAP32[$4 >> 2];
      HEAP32[$8 + 4 >> 2] = $5;
      $7 = $4 + 8 | 0;
      $13 = HEAP32[$7 >> 2];
      $5 = $8 + 8 | 0;
      $8 = HEAP32[$7 + 4 >> 2];
      HEAP32[$5 >> 2] = $13;
      HEAP32[$5 + 4 >> 2] = $8;
      $7 = HEAP32[$0 + 64 >> 2];
      HEAP32[$0 + 64 >> 2] = $7 + 1;
      $13 = 2;
      if (($7 | 0) > 1e3) {
       break label$11
      }
      if (HEAP32[HEAP32[$0 + 24 >> 2] >> 2] != 4) {
       $13 = 0;
       break label$11;
      }
      HEAP32[$0 + 68 >> 2] = 13;
     }
     $17 = $6;
     break label$4;
    }
    $20 = 1;
    $13 = 2;
   }
   if (!$13) {
    continue
   }
   break;
  };
  $6 = Math_fround(0.0);
  $16 = $27 ? Math_fround(0.0) : $22;
  $9 = Math_fround($16 + $21);
  $19 = 0;
  $13 = 0;
  if ($20 & 1) {
   btVoronoiSimplexSolver__compute_points_28btVector3__2c_20btVector3__29(HEAP32[$0 + 24 >> 2], $4 + 240 | 0, $4 + 224 | 0);
   $7 = $15 + 8 | 0;
   $13 = HEAP32[$7 >> 2];
   $5 = HEAP32[$7 + 4 >> 2];
   $8 = $4 + 264 | 0;
   HEAP32[$8 >> 2] = $13;
   HEAP32[$8 + 4 >> 2] = $5;
   $7 = $15;
   $5 = HEAP32[$7 >> 2];
   $8 = HEAP32[$7 + 4 >> 2];
   HEAP32[$4 + 256 >> 2] = $5;
   HEAP32[$4 + 260 >> 2] = $8;
   $6 = HEAPF32[$0 + 4 >> 2];
   $10 = HEAPF32[$0 + 8 >> 2];
   $11 = HEAPF32[$0 + 12 >> 2];
   $14 = Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($10 * $10)) + Math_fround($11 * $11));
   if (!!($14 < Math_fround(9.999999974752427e-07))) {
    HEAP32[$0 + 68 >> 2] = 5
   }
   $20 = 1;
   label$16 : {
    if (!($14 > Math_fround(1.4210854715202004e-14))) {
     $13 = 0;
     $20 = 2;
     $6 = Math_fround(0.0);
     break label$16;
    }
    $14 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($14)));
    HEAPF32[$4 + 256 >> 2] = $14 * HEAPF32[$4 + 256 >> 2];
    HEAPF32[$4 + 260 >> 2] = $14 * HEAPF32[$4 + 260 >> 2];
    HEAPF32[$4 + 264 >> 2] = $14 * HEAPF32[$4 + 264 >> 2];
    $18 = Math_fround(Math_sqrt($17));
    $12 = Math_fround($16 / $18);
    HEAPF32[$4 + 240 >> 2] = HEAPF32[$4 + 240 >> 2] - Math_fround($12 * $6);
    HEAPF32[$4 + 244 >> 2] = HEAPF32[$4 + 244 >> 2] - Math_fround($12 * $10);
    HEAPF32[$4 + 248 >> 2] = HEAPF32[$4 + 248 >> 2] - Math_fround($12 * $11);
    $12 = Math_fround($21 / $18);
    HEAPF32[$4 + 224 >> 2] = Math_fround($12 * $6) + HEAPF32[$4 + 224 >> 2];
    HEAPF32[$4 + 228 >> 2] = Math_fround($12 * $10) + HEAPF32[$4 + 228 >> 2];
    HEAPF32[$4 + 232 >> 2] = Math_fround($12 * $11) + HEAPF32[$4 + 232 >> 2];
    $13 = 1;
    $6 = Math_fround(Math_fround(Math_fround(1.0) / $14) - $9);
   }
   HEAP32[$0 + 60 >> 2] = $20;
  }
  label$18 : {
   if (!HEAP32[$0 + 72 >> 2]) {
    break label$18
   }
   if (!HEAP32[$0 + 20 >> 2]) {
    break label$18
   }
   if (!HEAP32[$0 + 68 >> 2]) {
    break label$18
   }
   $19 = Math_fround($9 + $6) < HEAPF32[746];
  }
  $20 = $13 ^ 1;
  label$19 : {
   label$20 : {
    label$21 : {
     if ($20 ? 0 : !$19) {
      break label$21
     }
     $19 = HEAP32[$0 + 20 >> 2];
     if (!$19) {
      break label$21
     }
     $5 = $15;
     HEAP32[$5 >> 2] = 0;
     HEAP32[$5 + 4 >> 2] = 0;
     $5 = $5 + 8 | 0;
     HEAP32[$5 >> 2] = 0;
     HEAP32[$5 + 4 >> 2] = 0;
     HEAP32[431] = HEAP32[431] + 1;
     if (FUNCTION_TABLE[HEAP32[HEAP32[$19 >> 2] + 8 >> 2]]($19, HEAP32[$0 + 24 >> 2], HEAP32[$0 + 28 >> 2], HEAP32[$0 + 32 >> 2], $4 + 160 | 0, $4 + 96 | 0, $15, $4 + 80 | 0, $4 - -64 | 0, $3)) {
      $14 = Math_fround(0.0);
      $12 = HEAPF32[$4 + 64 >> 2];
      $18 = HEAPF32[$4 + 80 >> 2];
      $9 = Math_fround($12 - $18);
      $17 = HEAPF32[$4 + 68 >> 2];
      $21 = HEAPF32[$4 + 84 >> 2];
      $10 = Math_fround($17 - $21);
      $22 = HEAPF32[$4 + 72 >> 2];
      $23 = HEAPF32[$4 + 88 >> 2];
      $11 = Math_fround($22 - $23);
      $16 = Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($10 * $10)) + Math_fround($11 * $11));
      if (!!($16 <= Math_fround(1.4210854715202004e-14))) {
       $9 = HEAPF32[$0 + 4 >> 2];
       $10 = HEAPF32[$0 + 8 >> 2];
       $11 = HEAPF32[$0 + 12 >> 2];
       $16 = Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($10 * $10)) + Math_fround($11 * $11));
       $14 = HEAPF32[$0 + 16 >> 2];
      }
      if (!!($16 > Math_fround(1.4210854715202004e-14))) {
       HEAP32[$0 + 60 >> 2] = 3;
       $12 = Math_fround($18 - $12);
       $18 = Math_fround($12 * $12);
       $12 = Math_fround($21 - $17);
       $17 = Math_fround($18 + Math_fround($12 * $12));
       $12 = Math_fround($23 - $22);
       $12 = Math_fround(-Math_fround(Math_sqrt(Math_fround($17 + Math_fround($12 * $12)))));
       if (!(($6 > $12 ^ -1) & ($20 ^ 1))) {
        $7 = $4 + 88 | 0;
        $3 = HEAP32[$7 >> 2];
        $5 = HEAP32[$7 + 4 >> 2];
        $8 = $4 + 248 | 0;
        HEAP32[$8 >> 2] = $3;
        HEAP32[$8 + 4 >> 2] = $5;
        $7 = $4 + 72 | 0;
        $3 = HEAP32[$7 >> 2];
        $8 = HEAP32[$7 + 4 >> 2];
        $5 = $4 + 232 | 0;
        HEAP32[$5 >> 2] = $3;
        HEAP32[$5 + 4 >> 2] = $8;
        $5 = HEAP32[$4 + 84 >> 2];
        HEAP32[$4 + 240 >> 2] = HEAP32[$4 + 80 >> 2];
        HEAP32[$4 + 244 >> 2] = $5;
        $8 = HEAP32[$4 + 68 >> 2];
        HEAP32[$4 + 224 >> 2] = HEAP32[$4 + 64 >> 2];
        HEAP32[$4 + 228 >> 2] = $8;
        HEAPF32[$4 + 268 >> 2] = $14;
        $6 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($16)));
        HEAPF32[$4 + 264 >> 2] = $11 * $6;
        HEAPF32[$4 + 260 >> 2] = $10 * $6;
        HEAPF32[$4 + 256 >> 2] = $9 * $6;
        $6 = $12;
        break label$20;
       }
       HEAP32[$0 + 60 >> 2] = 8;
       if ($13) {
        break label$20
       }
       break label$19;
      }
      HEAP32[$0 + 60 >> 2] = 9;
      if ($13) {
       break label$20
      }
      break label$19;
     }
     $10 = HEAPF32[$0 + 4 >> 2];
     $11 = HEAPF32[$0 + 8 >> 2];
     $14 = HEAPF32[$0 + 12 >> 2];
     if (!(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($11 * $11)) + Math_fround($14 * $14)) > Math_fround(0.0))) {
      break label$21
     }
     $12 = Math_fround(HEAPF32[$4 + 80 >> 2] - HEAPF32[$4 + 64 >> 2]);
     $17 = Math_fround($12 * $12);
     $12 = Math_fround(HEAPF32[$4 + 84 >> 2] - HEAPF32[$4 + 68 >> 2]);
     $17 = Math_fround($17 + Math_fround($12 * $12));
     $12 = Math_fround(HEAPF32[$4 + 88 >> 2] - HEAPF32[$4 + 72 >> 2]);
     $9 = Math_fround(Math_fround(Math_sqrt(Math_fround($17 + Math_fround($12 * $12)))) - $9);
     if (!(($9 < $6 ^ -1) & ($20 ^ 1))) {
      $7 = $4 + 88 | 0;
      $3 = HEAP32[$7 >> 2];
      $5 = HEAP32[$7 + 4 >> 2];
      $13 = $4 + 248 | 0;
      $8 = $13;
      HEAP32[$8 >> 2] = $3;
      HEAP32[$8 + 4 >> 2] = $5;
      $7 = $4 + 72 | 0;
      $3 = HEAP32[$7 >> 2];
      $8 = HEAP32[$7 + 4 >> 2];
      $19 = $4 + 232 | 0;
      $5 = $19;
      HEAP32[$5 >> 2] = $3;
      HEAP32[$5 + 4 >> 2] = $8;
      HEAPF32[$13 >> 2] = HEAPF32[$13 >> 2] - Math_fround($16 * $14);
      HEAPF32[$5 >> 2] = Math_fround($21 * $14) + HEAPF32[$5 >> 2];
      $5 = HEAP32[$4 + 68 >> 2];
      HEAP32[$4 + 224 >> 2] = HEAP32[$4 + 64 >> 2];
      HEAP32[$4 + 228 >> 2] = $5;
      $8 = HEAP32[$4 + 84 >> 2];
      HEAP32[$4 + 240 >> 2] = HEAP32[$4 + 80 >> 2];
      HEAP32[$4 + 244 >> 2] = $8;
      HEAPF32[$4 + 224 >> 2] = Math_fround($21 * $10) + HEAPF32[$4 + 224 >> 2];
      HEAPF32[$4 + 228 >> 2] = Math_fround($21 * $11) + HEAPF32[$4 + 228 >> 2];
      HEAPF32[$4 + 240 >> 2] = HEAPF32[$4 + 240 >> 2] - Math_fround($16 * $10);
      HEAPF32[$4 + 244 >> 2] = HEAPF32[$4 + 244 >> 2] - Math_fround($16 * $11);
      $7 = $15 + 8 | 0;
      $3 = HEAP32[$7 >> 2];
      $5 = HEAP32[$7 + 4 >> 2];
      $13 = $4 + 264 | 0;
      $8 = $13;
      HEAP32[$8 >> 2] = $3;
      HEAP32[$8 + 4 >> 2] = $5;
      $7 = $15;
      $3 = HEAP32[$7 >> 2];
      $8 = HEAP32[$7 + 4 >> 2];
      HEAP32[$4 + 256 >> 2] = $3;
      HEAP32[$4 + 260 >> 2] = $8;
      $6 = HEAPF32[$13 >> 2];
      $12 = $6;
      $10 = HEAPF32[$4 + 256 >> 2];
      $11 = HEAPF32[$4 + 260 >> 2];
      $6 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($11 * $11)) + Math_fround($6 * $6)))));
      HEAPF32[$13 >> 2] = $12 * $6;
      HEAPF32[$4 + 260 >> 2] = $11 * $6;
      HEAPF32[$4 + 256 >> 2] = $10 * $6;
      HEAP32[$0 + 60 >> 2] = 6;
      $6 = $9;
      break label$20;
     }
     HEAP32[$0 + 60 >> 2] = 5;
    }
    if (!$13) {
     break label$19
    }
   }
   if (!($6 < Math_fround(0.0))) {
    if (!(Math_fround($6 * $6) < HEAPF32[$1 + 128 >> 2])) {
     break label$19
    }
   }
   $5 = HEAP32[$4 + 260 >> 2];
   $8 = $15;
   HEAP32[$8 >> 2] = HEAP32[$4 + 256 >> 2];
   HEAP32[$8 + 4 >> 2] = $5;
   HEAPF32[$0 + 56 >> 2] = $6;
   $13 = $4 + 264 | 0;
   $7 = $13;
   $3 = HEAP32[$7 >> 2];
   $5 = $8 + 8 | 0;
   $8 = HEAP32[$7 + 4 >> 2];
   HEAP32[$5 >> 2] = $3;
   HEAP32[$5 + 4 >> 2] = $8;
   HEAP32[$4 + 92 >> 2] = 0;
   $11 = HEAPF32[$4 + 256 >> 2];
   $9 = HEAPF32[$4 + 260 >> 2];
   $10 = HEAPF32[$7 >> 2];
   HEAPF32[$4 + 88 >> 2] = Math_fround(Math_fround($11 * HEAPF32[$1 + 8 >> 2]) + Math_fround($9 * HEAPF32[$1 + 24 >> 2])) + Math_fround($10 * HEAPF32[$1 + 40 >> 2]);
   HEAPF32[$4 + 84 >> 2] = Math_fround(Math_fround($11 * HEAPF32[$1 + 4 >> 2]) + Math_fround($9 * HEAPF32[$1 + 20 >> 2])) + Math_fround($10 * HEAPF32[$1 + 36 >> 2]);
   HEAPF32[$4 + 80 >> 2] = Math_fround(Math_fround($11 * HEAPF32[$1 >> 2]) + Math_fround($9 * HEAPF32[$1 + 16 >> 2])) + Math_fround($10 * HEAPF32[$1 + 32 >> 2]);
   HEAP32[$4 + 76 >> 2] = 0;
   $11 = Math_fround(-$11);
   HEAPF32[$4 + 72 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 72 >> 2] * $11) - Math_fround($9 * HEAPF32[$1 + 88 >> 2])) - Math_fround($10 * HEAPF32[$1 + 104 >> 2]);
   HEAPF32[$4 + 68 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 68 >> 2] * $11) - Math_fround($9 * HEAPF32[$1 + 84 >> 2])) - Math_fround($10 * HEAPF32[$1 + 100 >> 2]);
   HEAPF32[$4 + 64 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 64 >> 2] * $11) - Math_fround($9 * HEAPF32[$1 + 80 >> 2])) - Math_fround($10 * HEAPF32[$1 + 96 >> 2]);
   btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($4 + 48 | 0, HEAP32[$0 + 28 >> 2], $4 + 80 | 0);
   btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($4 + 32 | 0, HEAP32[$0 + 32 >> 2], $4 - -64 | 0);
   $9 = HEAPF32[$7 >> 2];
   $23 = HEAPF32[$4 + 216 >> 2];
   $28 = HEAPF32[$4 + 200 >> 2];
   $29 = HEAPF32[$4 + 192 >> 2];
   $30 = HEAPF32[$4 + 196 >> 2];
   $31 = HEAPF32[$4 + 152 >> 2];
   $32 = HEAPF32[$4 + 136 >> 2];
   $33 = HEAPF32[$4 + 128 >> 2];
   $34 = HEAPF32[$4 + 132 >> 2];
   $35 = HEAPF32[$4 + 208 >> 2];
   $36 = HEAPF32[$4 + 168 >> 2];
   $37 = HEAPF32[$4 + 160 >> 2];
   $38 = HEAPF32[$4 + 164 >> 2];
   $39 = HEAPF32[$4 + 144 >> 2];
   $40 = HEAPF32[$4 + 104 >> 2];
   $41 = HEAPF32[$4 + 96 >> 2];
   $42 = HEAPF32[$4 + 100 >> 2];
   $43 = HEAPF32[$4 + 212 >> 2];
   $44 = HEAPF32[$4 + 184 >> 2];
   $16 = HEAPF32[$4 + 56 >> 2];
   $45 = HEAPF32[$4 + 176 >> 2];
   $14 = HEAPF32[$4 + 48 >> 2];
   $46 = HEAPF32[$4 + 180 >> 2];
   $12 = HEAPF32[$4 + 52 >> 2];
   $47 = HEAPF32[$4 + 148 >> 2];
   $48 = HEAPF32[$4 + 120 >> 2];
   $18 = HEAPF32[$4 + 40 >> 2];
   $49 = HEAPF32[$4 + 112 >> 2];
   $17 = HEAPF32[$4 + 32 >> 2];
   $50 = HEAPF32[$4 + 116 >> 2];
   $21 = HEAPF32[$4 + 36 >> 2];
   $11 = HEAPF32[$4 + 256 >> 2];
   $10 = HEAPF32[$4 + 260 >> 2];
   HEAP32[$4 + 92 >> 2] = 0;
   $22 = Math_fround(-$11);
   HEAPF32[$4 + 88 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 8 >> 2] * $22) - Math_fround($10 * HEAPF32[$1 + 24 >> 2])) - Math_fround($9 * HEAPF32[$1 + 40 >> 2]);
   HEAPF32[$4 + 84 >> 2] = Math_fround(Math_fround(HEAPF32[$1 + 4 >> 2] * $22) - Math_fround($10 * HEAPF32[$1 + 20 >> 2])) - Math_fround($9 * HEAPF32[$1 + 36 >> 2]);
   HEAPF32[$4 + 80 >> 2] = Math_fround(Math_fround(HEAPF32[$1 >> 2] * $22) - Math_fround($10 * HEAPF32[$1 + 16 >> 2])) - Math_fround($9 * HEAPF32[$1 + 32 >> 2]);
   HEAP32[$4 + 76 >> 2] = 0;
   HEAPF32[$4 + 72 >> 2] = Math_fround(Math_fround($11 * HEAPF32[$1 + 72 >> 2]) + Math_fround($10 * HEAPF32[$1 + 88 >> 2])) + Math_fround($9 * HEAPF32[$1 + 104 >> 2]);
   HEAPF32[$4 + 68 >> 2] = Math_fround(Math_fround($11 * HEAPF32[$1 + 68 >> 2]) + Math_fround($10 * HEAPF32[$1 + 84 >> 2])) + Math_fround($9 * HEAPF32[$1 + 100 >> 2]);
   HEAPF32[$4 + 64 >> 2] = Math_fround(Math_fround($11 * HEAPF32[$1 + 64 >> 2]) + Math_fround($10 * HEAPF32[$1 + 80 >> 2])) + Math_fround($9 * HEAPF32[$1 + 96 >> 2]);
   btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($4 + 48 | 0, HEAP32[$0 + 28 >> 2], $4 + 80 | 0);
   btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const($4 + 32 | 0, HEAP32[$0 + 32 >> 2], $4 - -64 | 0);
   $21 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($35 + Math_fround(Math_fround(Math_fround($14 * $37) + Math_fround($12 * $38)) + Math_fround($16 * $36))) - Math_fround($39 + Math_fround(Math_fround(Math_fround($17 * $41) + Math_fround($21 * $42)) + Math_fround($18 * $40)))) * $22) - Math_fround($10 * Math_fround(Math_fround($43 + Math_fround(Math_fround(Math_fround($14 * $45) + Math_fround($12 * $46)) + Math_fround($16 * $44))) - Math_fround($47 + Math_fround(Math_fround(Math_fround($17 * $49) + Math_fround($21 * $50)) + Math_fround($18 * $48)))))) - Math_fround($9 * Math_fround(Math_fround($23 + Math_fround(Math_fround(Math_fround($14 * $29) + Math_fround($12 * $30)) + Math_fround($16 * $28))) - Math_fround($31 + Math_fround(Math_fround(Math_fround($17 * $33) + Math_fround($21 * $34)) + Math_fround($18 * $32))))));
   $9 = HEAPF32[$4 + 48 >> 2];
   $10 = HEAPF32[$4 + 52 >> 2];
   $11 = HEAPF32[$4 + 56 >> 2];
   $16 = HEAPF32[$4 + 32 >> 2];
   $14 = HEAPF32[$4 + 36 >> 2];
   $12 = HEAPF32[$4 + 40 >> 2];
   $18 = HEAPF32[$4 + 256 >> 2];
   $17 = HEAPF32[$4 + 260 >> 2];
   $22 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($9 * HEAPF32[$4 + 160 >> 2]) + Math_fround($10 * HEAPF32[$4 + 164 >> 2])) + Math_fround($11 * HEAPF32[$4 + 168 >> 2])) + HEAPF32[$4 + 208 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($16 * HEAPF32[$4 + 96 >> 2]) + Math_fround($14 * HEAPF32[$4 + 100 >> 2])) + Math_fround($12 * HEAPF32[$4 + 104 >> 2])) + HEAPF32[$4 + 144 >> 2])) * $18) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($9 * HEAPF32[$4 + 176 >> 2]) + Math_fround($10 * HEAPF32[$4 + 180 >> 2])) + Math_fround($11 * HEAPF32[$4 + 184 >> 2])) + HEAPF32[$4 + 212 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($16 * HEAPF32[$4 + 112 >> 2]) + Math_fround($14 * HEAPF32[$4 + 116 >> 2])) + Math_fround($12 * HEAPF32[$4 + 120 >> 2])) + HEAPF32[$4 + 148 >> 2])) * $17));
   $12 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($9 * HEAPF32[$4 + 192 >> 2]) + Math_fround($10 * HEAPF32[$4 + 196 >> 2])) + Math_fround($11 * HEAPF32[$4 + 200 >> 2])) + HEAPF32[$4 + 216 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($16 * HEAPF32[$4 + 128 >> 2]) + Math_fround($14 * HEAPF32[$4 + 132 >> 2])) + Math_fround($12 * HEAPF32[$4 + 136 >> 2])) + HEAPF32[$4 + 152 >> 2]));
   $9 = HEAPF32[$7 >> 2];
   if (!!($21 > Math_fround($22 + Math_fround($12 * $9)))) {
    HEAP32[$0 + 60 >> 2] = 10;
    HEAPF32[$4 + 264 >> 2] = -$9;
    HEAPF32[$4 + 260 >> 2] = -$17;
    HEAPF32[$4 + 256 >> 2] = -$18;
   }
   HEAP32[$4 + 92 >> 2] = 0;
   HEAPF32[$4 + 88 >> 2] = $24 + HEAPF32[$4 + 232 >> 2];
   HEAPF32[$4 + 84 >> 2] = $25 + HEAPF32[$4 + 228 >> 2];
   HEAPF32[$4 + 80 >> 2] = $26 + HEAPF32[$4 + 224 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $4 + 256 | 0, $4 + 80 | 0, $6);
  }
  global$0 = $4 + 272 | 0;
 }
 
 function btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0, $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = 0, $28 = Math_fround(0), $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0);
  $10 = global$0 - 4240 | 0;
  global$0 = $10;
  $30 = HEAP32[$2 + 4 >> 2] + -17 >>> 0 <= 1 ? HEAP32[$3 + 4 >> 2] + -17 >>> 0 < 2 : $30;
  while (1) {
   btMinkowskiPenetrationDepthSolver__getPenetrationDirections_28_29();
   $0 = $12 + ($10 + 1264 | 0) | 0;
   HEAP32[$0 + 12 >> 2] = 0;
   $16 = HEAPF32[$12 + 1744 >> 2];
   $17 = Math_fround(-$16);
   $13 = HEAPF32[$12 + 1748 >> 2];
   $14 = HEAPF32[$12 + 1752 >> 2];
   HEAPF32[$0 + 8 >> 2] = Math_fround(Math_fround(HEAPF32[$4 + 8 >> 2] * $17) - Math_fround(HEAPF32[$4 + 24 >> 2] * $13)) - Math_fround(HEAPF32[$4 + 40 >> 2] * $14);
   HEAPF32[$0 + 4 >> 2] = Math_fround(Math_fround(HEAPF32[$4 + 4 >> 2] * $17) - Math_fround($13 * HEAPF32[$4 + 20 >> 2])) - Math_fround($14 * HEAPF32[$4 + 36 >> 2]);
   HEAPF32[$0 >> 2] = Math_fround(Math_fround(HEAPF32[$4 >> 2] * $17) - Math_fround($13 * HEAPF32[$4 + 16 >> 2])) - Math_fround($14 * HEAPF32[$4 + 32 >> 2]);
   $17 = HEAPF32[$5 + 32 >> 2];
   $22 = HEAPF32[$5 >> 2];
   $23 = HEAPF32[$5 + 16 >> 2];
   $24 = HEAPF32[$5 + 36 >> 2];
   $25 = HEAPF32[$5 + 4 >> 2];
   $26 = HEAPF32[$5 + 20 >> 2];
   $18 = HEAPF32[$5 + 40 >> 2];
   $19 = HEAPF32[$5 + 8 >> 2];
   $20 = HEAPF32[$5 + 24 >> 2];
   $0 = $12 + ($10 + 272 | 0) | 0;
   HEAP32[$0 + 12 >> 2] = 0;
   HEAPF32[$0 + 8 >> 2] = Math_fround(Math_fround($16 * $19) + Math_fround($13 * $20)) + Math_fround($14 * $18);
   HEAPF32[$0 + 4 >> 2] = Math_fround(Math_fround($16 * $25) + Math_fround($13 * $26)) + Math_fround($14 * $24);
   HEAPF32[$0 >> 2] = Math_fround(Math_fround($16 * $22) + Math_fround($13 * $23)) + Math_fround($14 * $17);
   $12 = $12 + 16 | 0;
   if (($12 | 0) != 672) {
    continue
   }
   break;
  };
  $29 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 84 >> 2]]($2) | 0;
  $21 = 42;
  label$3 : {
   if (($29 | 0) < 1) {
    break label$3
   }
   $12 = 0;
   while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 88 >> 2]]($2, $27, $10 + 3248 | 0);
    HEAP32[$10 + 3260 >> 2] = 0;
    $13 = HEAPF32[$10 + 3248 >> 2];
    $14 = HEAPF32[$10 + 3252 >> 2];
    $16 = HEAPF32[$10 + 3256 >> 2];
    HEAPF32[$10 + 3256 >> 2] = Math_fround(Math_fround($13 * HEAPF32[$4 + 32 >> 2]) + Math_fround($14 * HEAPF32[$4 + 36 >> 2])) + Math_fround($16 * HEAPF32[$4 + 40 >> 2]);
    HEAPF32[$10 + 3252 >> 2] = Math_fround(Math_fround($13 * HEAPF32[$4 + 16 >> 2]) + Math_fround($14 * HEAPF32[$4 + 20 >> 2])) + Math_fround($16 * HEAPF32[$4 + 24 >> 2]);
    HEAPF32[$10 + 3248 >> 2] = Math_fround(Math_fround($13 * HEAPF32[$4 >> 2]) + Math_fround($14 * HEAPF32[$4 + 4 >> 2])) + Math_fround($16 * HEAPF32[$4 + 8 >> 2]);
    btMinkowskiPenetrationDepthSolver__getPenetrationDirections_28_29();
    $15 = HEAP32[$10 + 3260 >> 2];
    $11 = $12 + 2424 | 0;
    HEAP32[$11 >> 2] = HEAP32[$10 + 3256 >> 2];
    HEAP32[$11 + 4 >> 2] = $15;
    $11 = HEAP32[$10 + 3252 >> 2];
    $15 = $12 + 2416 | 0;
    HEAP32[$15 >> 2] = HEAP32[$10 + 3248 >> 2];
    HEAP32[$15 + 4 >> 2] = $11;
    $0 = $12 + ($10 + 1264 | 0) | 0;
    HEAP32[$0 + 684 >> 2] = 0;
    $16 = HEAPF32[$10 + 3248 >> 2];
    $17 = Math_fround(-$16);
    $13 = HEAPF32[$10 + 3252 >> 2];
    $14 = HEAPF32[$10 + 3256 >> 2];
    HEAPF32[$0 + 680 >> 2] = Math_fround(Math_fround(HEAPF32[$4 + 8 >> 2] * $17) - Math_fround(HEAPF32[$4 + 24 >> 2] * $13)) - Math_fround(HEAPF32[$4 + 40 >> 2] * $14);
    HEAPF32[$0 + 676 >> 2] = Math_fround(Math_fround(HEAPF32[$4 + 4 >> 2] * $17) - Math_fround($13 * HEAPF32[$4 + 20 >> 2])) - Math_fround($14 * HEAPF32[$4 + 36 >> 2]);
    HEAPF32[$0 + 672 >> 2] = Math_fround(Math_fround(HEAPF32[$4 >> 2] * $17) - Math_fround($13 * HEAPF32[$4 + 16 >> 2])) - Math_fround($14 * HEAPF32[$4 + 32 >> 2]);
    $0 = $12 + ($10 + 272 | 0) | 0;
    HEAP32[$0 + 684 >> 2] = 0;
    HEAPF32[$0 + 672 >> 2] = Math_fround(Math_fround($16 * HEAPF32[$5 >> 2]) + Math_fround($13 * HEAPF32[$5 + 16 >> 2])) + Math_fround($14 * HEAPF32[$5 + 32 >> 2]);
    HEAPF32[$0 + 676 >> 2] = Math_fround(Math_fround($16 * HEAPF32[$5 + 4 >> 2]) + Math_fround($13 * HEAPF32[$5 + 20 >> 2])) + Math_fround($14 * HEAPF32[$5 + 36 >> 2]);
    HEAPF32[$0 + 680 >> 2] = Math_fround(Math_fround($16 * HEAPF32[$5 + 8 >> 2]) + Math_fround($13 * HEAPF32[$5 + 24 >> 2])) + Math_fround($14 * HEAPF32[$5 + 40 >> 2]);
    $12 = $12 + 16 | 0;
    $27 = $27 + 1 | 0;
    if (($27 | 0) != ($29 | 0)) {
     continue
    }
    break;
   };
   $21 = $27 + 42 | 0;
  }
  $34 = $2;
  $35 = $10 + 1264 | 0;
  $36 = $10 + 3248 | 0;
  $33 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 84 >> 2]]($3) | 0;
  if (($33 | 0) >= 1) {
   $27 = $21 << 4;
   $29 = 1744;
   $31 = $10 + 1264 | 0;
   $32 = $10 + 272 | 0;
   $0 = 0;
   while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 88 >> 2]]($3, $0, $10 + 3248 | 0);
    HEAP32[$10 + 3260 >> 2] = 0;
    $13 = HEAPF32[$10 + 3248 >> 2];
    $14 = HEAPF32[$10 + 3252 >> 2];
    $16 = HEAPF32[$10 + 3256 >> 2];
    HEAPF32[$10 + 3256 >> 2] = Math_fround(Math_fround($13 * HEAPF32[$5 + 32 >> 2]) + Math_fround($14 * HEAPF32[$5 + 36 >> 2])) + Math_fround($16 * HEAPF32[$5 + 40 >> 2]);
    HEAPF32[$10 + 3252 >> 2] = Math_fround(Math_fround($13 * HEAPF32[$5 + 16 >> 2]) + Math_fround($14 * HEAPF32[$5 + 20 >> 2])) + Math_fround($16 * HEAPF32[$5 + 24 >> 2]);
    HEAPF32[$10 + 3248 >> 2] = Math_fround(Math_fround($13 * HEAPF32[$5 >> 2]) + Math_fround($14 * HEAPF32[$5 + 4 >> 2])) + Math_fround($16 * HEAPF32[$5 + 8 >> 2]);
    btMinkowskiPenetrationDepthSolver__getPenetrationDirections_28_29();
    $15 = HEAP32[$10 + 3260 >> 2];
    $12 = $27 + $29 | 0;
    $11 = $12 + 8 | 0;
    HEAP32[$11 >> 2] = HEAP32[$10 + 3256 >> 2];
    HEAP32[$11 + 4 >> 2] = $15;
    $11 = HEAP32[$10 + 3252 >> 2];
    HEAP32[$12 >> 2] = HEAP32[$10 + 3248 >> 2];
    HEAP32[$12 + 4 >> 2] = $11;
    $22 = HEAPF32[$4 + 32 >> 2];
    $23 = HEAPF32[$4 >> 2];
    $24 = HEAPF32[$4 + 16 >> 2];
    $25 = HEAPF32[$4 + 36 >> 2];
    $26 = HEAPF32[$4 + 4 >> 2];
    $18 = HEAPF32[$4 + 20 >> 2];
    $19 = HEAPF32[$4 + 40 >> 2];
    $20 = HEAPF32[$4 + 8 >> 2];
    $28 = HEAPF32[$4 + 24 >> 2];
    $13 = HEAPF32[$10 + 3256 >> 2];
    $16 = HEAPF32[$10 + 3248 >> 2];
    $14 = HEAPF32[$10 + 3252 >> 2];
    $12 = $27 + $31 | 0;
    HEAP32[$12 + 12 >> 2] = 0;
    $17 = Math_fround(-$16);
    HEAPF32[$12 + 8 >> 2] = Math_fround(Math_fround($20 * $17) - Math_fround($28 * $14)) - Math_fround($19 * $13);
    HEAPF32[$12 + 4 >> 2] = Math_fround(Math_fround($26 * $17) - Math_fround($18 * $14)) - Math_fround($25 * $13);
    HEAPF32[$12 >> 2] = Math_fround(Math_fround($23 * $17) - Math_fround($24 * $14)) - Math_fround($22 * $13);
    $17 = HEAPF32[$5 + 32 >> 2];
    $22 = HEAPF32[$5 >> 2];
    $23 = HEAPF32[$5 + 16 >> 2];
    $24 = HEAPF32[$5 + 36 >> 2];
    $25 = HEAPF32[$5 + 4 >> 2];
    $26 = HEAPF32[$5 + 20 >> 2];
    $18 = HEAPF32[$5 + 40 >> 2];
    $19 = HEAPF32[$5 + 8 >> 2];
    $20 = HEAPF32[$5 + 24 >> 2];
    $12 = $27 + $32 | 0;
    HEAP32[$12 + 12 >> 2] = 0;
    HEAPF32[$12 + 8 >> 2] = Math_fround(Math_fround($16 * $19) + Math_fround($14 * $20)) + Math_fround($13 * $18);
    HEAPF32[$12 + 4 >> 2] = Math_fround(Math_fround($16 * $25) + Math_fround($14 * $26)) + Math_fround($13 * $24);
    HEAPF32[$12 >> 2] = Math_fround(Math_fround($16 * $22) + Math_fround($14 * $23)) + Math_fround($13 * $17);
    $32 = $32 + 16 | 0;
    $31 = $31 + 16 | 0;
    $29 = $29 + 16 | 0;
    $0 = $0 + 1 | 0;
    if (($0 | 0) != ($33 | 0)) {
     continue
    }
    break;
   };
   $21 = $0 + $21 | 0;
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 76 >> 2]]($34, $35, $36, $21);
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 76 >> 2]]($3, $10 + 272 | 0, $10 + 2256 | 0, $21);
  label$8 : {
   if (($21 | 0) < 1) {
    $18 = Math_fround(999999984306749440.0);
    $19 = Math_fround(0.0);
    $20 = Math_fround(0.0);
    $28 = Math_fround(0.0);
    break label$8;
   }
   $18 = Math_fround(999999984306749440.0);
   $12 = 0;
   $28 = Math_fround(0.0);
   $20 = Math_fround(0.0);
   $19 = Math_fround(0.0);
   while (1) {
    btMinkowskiPenetrationDepthSolver__getPenetrationDirections_28_29();
    $13 = HEAPF32[$12 + 1744 >> 2];
    $14 = HEAPF32[$12 + 1748 >> 2];
    $16 = $30 ? Math_fround(0.0) : HEAPF32[$12 + 1752 >> 2];
    label$11 : {
     if (!(+Math_fround(Math_fround(Math_fround($13 * $13) + Math_fround($14 * $14)) + Math_fround($16 * $16)) > .01)) {
      break label$11
     }
     $0 = $12 + ($10 + 2256 | 0) | 0;
     $17 = HEAPF32[$0 >> 2];
     $22 = HEAPF32[$0 + 4 >> 2];
     $23 = HEAPF32[$0 + 8 >> 2];
     $0 = $12 + ($10 + 3248 | 0) | 0;
     $24 = HEAPF32[$0 >> 2];
     $25 = HEAPF32[$0 + 4 >> 2];
     $26 = HEAPF32[$0 + 8 >> 2];
     $17 = Math_fround(Math_fround(Math_fround($13 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($17 * HEAPF32[$5 >> 2]) + Math_fround($22 * HEAPF32[$5 + 4 >> 2])) + Math_fround($23 * HEAPF32[$5 + 8 >> 2])) + HEAPF32[$5 + 48 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($24 * HEAPF32[$4 >> 2]) + Math_fround($25 * HEAPF32[$4 + 4 >> 2])) + Math_fround($26 * HEAPF32[$4 + 8 >> 2])) + HEAPF32[$4 + 48 >> 2]))) + Math_fround($14 * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($17 * HEAPF32[$5 + 16 >> 2]) + Math_fround($22 * HEAPF32[$5 + 20 >> 2])) + Math_fround($23 * HEAPF32[$5 + 24 >> 2])) + HEAPF32[$5 + 52 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($24 * HEAPF32[$4 + 16 >> 2]) + Math_fround($25 * HEAPF32[$4 + 20 >> 2])) + Math_fround($26 * HEAPF32[$4 + 24 >> 2])) + HEAPF32[$4 + 52 >> 2])))) + Math_fround($16 * ($30 ? Math_fround(0.0) : Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($17 * HEAPF32[$5 + 32 >> 2]) + Math_fround($22 * HEAPF32[$5 + 36 >> 2])) + Math_fround($23 * HEAPF32[$5 + 40 >> 2])) + HEAPF32[$5 + 56 >> 2]) - Math_fround(Math_fround(Math_fround(Math_fround($24 * HEAPF32[$4 + 32 >> 2]) + Math_fround($25 * HEAPF32[$4 + 36 >> 2])) + Math_fround($26 * HEAPF32[$4 + 40 >> 2])) + HEAPF32[$4 + 56 >> 2])))));
     if (!($17 < $18)) {
      break label$11
     }
     $37 = HEAPF32[$12 + 1756 >> 2];
     $38 = $13;
     $19 = $13;
     $39 = $14;
     $20 = $14;
     $40 = $16;
     $28 = $16;
     $18 = $17;
    }
    $12 = $12 + 16 | 0;
    $21 = $21 + -1 | 0;
    if ($21) {
     continue
    }
    break;
   };
  }
  btConvexShape__getMarginNonVirtual_28_29_20const($2);
  btConvexShape__getMarginNonVirtual_28_29_20const($3);
  $12 = 0;
  if (!($18 < Math_fround(0.0))) {
   $13 = btConvexShape__getMarginNonVirtual_28_29_20const($2);
   $14 = btConvexShape__getMarginNonVirtual_28_29_20const($3);
   $12 = btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($10 + 192 | 0, $2, $3, $1, 0);
   HEAP32[$10 + 116 >> 2] = 0;
   $0 = $4 + 8 | 0;
   $1 = HEAP32[$0 >> 2];
   $15 = HEAP32[$0 + 4 >> 2];
   $11 = $10 - -64 | 0;
   HEAP32[$11 >> 2] = $1;
   HEAP32[$11 + 4 >> 2] = $15;
   $0 = $4 + 24 | 0;
   $1 = HEAP32[$0 >> 2];
   $11 = HEAP32[$0 + 4 >> 2];
   $15 = $10 + 80 | 0;
   HEAP32[$15 >> 2] = $1;
   HEAP32[$15 + 4 >> 2] = $11;
   $0 = $4 + 40 | 0;
   $1 = HEAP32[$0 >> 2];
   $15 = HEAP32[$0 + 4 >> 2];
   $11 = $10 + 96 | 0;
   HEAP32[$11 >> 2] = $1;
   HEAP32[$11 + 4 >> 2] = $15;
   $13 = Math_fround($18 + Math_fround(Math_fround($13 + $14) + Math_fround(.5)));
   HEAPF32[$10 + 112 >> 2] = Math_fround($28 * $13) + HEAPF32[$4 + 56 >> 2];
   HEAPF32[$10 + 108 >> 2] = Math_fround($20 * $13) + HEAPF32[$4 + 52 >> 2];
   $11 = HEAP32[$4 + 4 >> 2];
   HEAP32[$10 + 56 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$10 + 60 >> 2] = $11;
   $15 = HEAP32[$4 + 20 >> 2];
   HEAP32[$10 + 72 >> 2] = HEAP32[$4 + 16 >> 2];
   HEAP32[$10 + 76 >> 2] = $15;
   $11 = HEAP32[$4 + 36 >> 2];
   HEAP32[$10 + 88 >> 2] = HEAP32[$4 + 32 >> 2];
   HEAP32[$10 + 92 >> 2] = $11;
   HEAPF32[$10 + 104 >> 2] = Math_fround($19 * $13) + HEAPF32[$4 + 48 >> 2];
   $0 = $5 + 8 | 0;
   $1 = HEAP32[$0 >> 2];
   $15 = HEAP32[$0 + 4 >> 2];
   $11 = $10 + 128 | 0;
   HEAP32[$11 >> 2] = $1;
   HEAP32[$11 + 4 >> 2] = $15;
   $11 = HEAP32[$5 + 20 >> 2];
   $15 = $10 + 136 | 0;
   HEAP32[$15 >> 2] = HEAP32[$5 + 16 >> 2];
   HEAP32[$15 + 4 >> 2] = $11;
   $0 = $5 + 24 | 0;
   $1 = HEAP32[$0 >> 2];
   $15 = HEAP32[$0 + 4 >> 2];
   $11 = $10 + 144 | 0;
   HEAP32[$11 >> 2] = $1;
   HEAP32[$11 + 4 >> 2] = $15;
   $11 = HEAP32[$5 + 36 >> 2];
   $15 = $10 + 152 | 0;
   HEAP32[$15 >> 2] = HEAP32[$5 + 32 >> 2];
   HEAP32[$15 + 4 >> 2] = $11;
   $0 = $5 + 40 | 0;
   $1 = HEAP32[$0 >> 2];
   $15 = HEAP32[$0 + 4 >> 2];
   $11 = $10 + 160 | 0;
   HEAP32[$11 >> 2] = $1;
   HEAP32[$11 + 4 >> 2] = $15;
   $11 = HEAP32[$5 + 52 >> 2];
   $15 = $10 + 168 | 0;
   HEAP32[$15 >> 2] = HEAP32[$5 + 48 >> 2];
   HEAP32[$15 + 4 >> 2] = $11;
   $0 = $5 + 56 | 0;
   $1 = HEAP32[$0 >> 2];
   $15 = HEAP32[$0 + 4 >> 2];
   $11 = $10 + 176 | 0;
   HEAP32[$11 >> 2] = $1;
   HEAP32[$11 + 4 >> 2] = $15;
   HEAP32[$10 + 184 >> 2] = 1566444395;
   $11 = HEAP32[$5 + 4 >> 2];
   HEAP32[$10 + 120 >> 2] = HEAP32[$5 >> 2];
   HEAP32[$10 + 124 >> 2] = $11;
   HEAP32[$12 + 16 >> 2] = 0;
   HEAPF32[$12 + 12 >> 2] = -$28;
   HEAPF32[$12 + 8 >> 2] = -$20;
   HEAPF32[$12 + 4 >> 2] = -$19;
   HEAP8[$10 + 48 | 0] = 0;
   HEAP32[$10 + 8 >> 2] = 15076;
   btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($12, $10 + 56 | 0, $10 + 8 | 0, $9, 0);
   $4 = HEAPU8[$10 + 48 | 0];
   if ($4) {
    $14 = HEAPF32[$10 + 44 >> 2];
    HEAP32[$7 + 12 >> 2] = 0;
    $13 = Math_fround($13 - $14);
    HEAPF32[$7 >> 2] = HEAPF32[$10 + 28 >> 2] - Math_fround($19 * $13);
    $5 = $10 + 36 | 0;
    HEAPF32[$7 + 8 >> 2] = HEAPF32[$5 >> 2] - Math_fround($28 * $13);
    HEAPF32[$7 + 4 >> 2] = HEAPF32[$10 + 32 >> 2] - Math_fround($20 * $13);
    $15 = HEAP32[$10 + 32 >> 2];
    $11 = $8;
    HEAP32[$11 >> 2] = HEAP32[$10 + 28 >> 2];
    HEAP32[$11 + 4 >> 2] = $15;
    $15 = $11 + 8 | 0;
    $11 = HEAP32[$5 + 4 >> 2];
    HEAP32[$15 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$15 + 4 >> 2] = $11;
    HEAPF32[$6 >> 2] = $38;
    HEAPF32[$6 + 4 >> 2] = $39;
    HEAPF32[$6 + 8 >> 2] = $40;
    HEAPF32[$6 + 12 >> 2] = $37;
   }
   $12 = ($4 | 0) != 0;
  }
  global$0 = $10 + 4240 | 0;
  return $12 | 0;
 }
 
 function btMinkowskiPenetrationDepthSolver__getPenetrationDirections_28_29() {
  if (!HEAPU8[2736]) {
   HEAP32[602] = 1062847606;
   HEAP32[603] = 0;
   HEAP32[600] = 1042701022;
   HEAP32[601] = 1056964440;
   HEAP32[598] = 1062847606;
   HEAP32[599] = 0;
   HEAP32[596] = -1093024784;
   HEAP32[597] = 1050556081;
   HEAP32[594] = 1062847606;
   HEAP32[595] = 0;
   HEAP32[592] = -1093024784;
   HEAP32[593] = -1096927567;
   HEAP32[590] = 1062847606;
   HEAP32[591] = 0;
   HEAP32[588] = 1042701022;
   HEAP32[589] = -1090519208;
   HEAP32[586] = 1062847572;
   HEAP32[587] = 0;
   HEAP32[584] = 1057396286;
   HEAP32[585] = 0;
   HEAP32[582] = 1057396386;
   HEAP32[583] = 0;
   HEAP32[580] = 1060121912;
   HEAP32[581] = 1056964507;
   HEAP32[578] = 1057396420;
   HEAP32[579] = 0;
   HEAP32[576] = -1098475836;
   HEAP32[577] = 1062148969;
   HEAP32[574] = 1057396386;
   HEAP32[575] = 0;
   HEAP32[572] = -1084636143;
   HEAP32[573] = 0;
   HEAP32[570] = 1057396420;
   HEAP32[571] = 0;
   HEAP32[568] = -1098475836;
   HEAP32[569] = -1085334679;
   HEAP32[566] = 1057396386;
   HEAP32[567] = 0;
   HEAP32[564] = 1060121912;
   HEAP32[565] = -1090519141;
   HEAP32[562] = -2147483648;
   HEAP32[563] = 0;
   HEAP32[560] = 1058437413;
   HEAP32[561] = 1062149053;
   HEAP32[558] = -2147483648;
   HEAP32[559] = 0;
   HEAP32[556] = -2147483648;
   HEAP32[557] = 1065353216;
   HEAP32[554] = -2147483648;
   HEAP32[555] = 0;
   HEAP32[552] = -1089046235;
   HEAP32[553] = 1062149053;
   HEAP32[550] = -2147483648;
   HEAP32[551] = 0;
   HEAP32[548] = -1082951543;
   HEAP32[549] = 1050556148;
   HEAP32[546] = -2147483648;
   HEAP32[547] = 0;
   HEAP32[544] = -1082951543;
   HEAP32[545] = -1096927500;
   HEAP32[542] = 0;
   HEAP32[543] = 0;
   HEAP32[540] = -1089046235;
   HEAP32[541] = -1085334595;
   HEAP32[538] = 0;
   HEAP32[539] = 0;
   HEAP32[536] = 0;
   HEAP32[537] = -1082130432;
   HEAP32[534] = 0;
   HEAP32[535] = 0;
   HEAP32[532] = 1058437413;
   HEAP32[533] = -1085334595;
   HEAP32[530] = 0;
   HEAP32[531] = 0;
   HEAP32[528] = 1064532105;
   HEAP32[529] = -1096927500;
   HEAP32[526] = 0;
   HEAP32[527] = 0;
   HEAP32[524] = 1064532105;
   HEAP32[525] = 1050556148;
   HEAP32[522] = -1090087228;
   HEAP32[523] = 0;
   HEAP32[520] = 1049007812;
   HEAP32[521] = 1062148969;
   HEAP32[518] = -1090087262;
   HEAP32[519] = 0;
   HEAP32[516] = -1087361736;
   HEAP32[517] = 1056964507;
   HEAP32[514] = -1084636042;
   HEAP32[515] = 0;
   HEAP32[512] = -1104782626;
   HEAP32[513] = 1056964440;
   HEAP32[510] = -1090087262;
   HEAP32[511] = 0;
   HEAP32[508] = -1087361736;
   HEAP32[509] = -1090519141;
   HEAP32[506] = -1084636076;
   HEAP32[507] = 0;
   HEAP32[504] = -1090087362;
   HEAP32[505] = -2147483648;
   HEAP32[502] = -1090087262;
   HEAP32[503] = 0;
   HEAP32[500] = 1062847505;
   HEAP32[501] = -2147483648;
   HEAP32[498] = -1084636042;
   HEAP32[499] = 0;
   HEAP32[496] = 1054458864;
   HEAP32[497] = 1050556081;
   HEAP32[494] = -1090087228;
   HEAP32[495] = 0;
   HEAP32[492] = 1049007812;
   HEAP32[493] = -1085334679;
   HEAP32[490] = -1084636042;
   HEAP32[491] = 0;
   HEAP32[488] = -1104782626;
   HEAP32[489] = -1090519208;
   HEAP32[486] = -1084636042;
   HEAP32[487] = 0;
   HEAP32[484] = 1054458864;
   HEAP32[485] = -1096927567;
   HEAP32[482] = 1065353216;
   HEAP32[483] = 0;
   HEAP32[480] = -2147483648;
   HEAP32[481] = 0;
   HEAP32[478] = 1055193471;
   HEAP32[479] = 0;
   HEAP32[476] = 1063581978;
   HEAP32[477] = 0;
   HEAP32[474] = 1055193572;
   HEAP32[475] = 0;
   HEAP32[472] = 1049461434;
   HEAP32[473] = 1062847522;
   HEAP32[470] = 1055193572;
   HEAP32[471] = 0;
   HEAP32[468] = -1086767520;
   HEAP32[469] = 1057396202;
   HEAP32[466] = 1055193572;
   HEAP32[467] = 0;
   HEAP32[464] = -1086767520;
   HEAP32[465] = -1090087446;
   HEAP32[462] = 1055193605;
   HEAP32[463] = 0;
   HEAP32[460] = 1049461434;
   HEAP32[461] = -1084636126;
   HEAP32[458] = -1092290076;
   HEAP32[459] = 0;
   HEAP32[456] = 1060716128;
   HEAP32[457] = 1057396202;
   HEAP32[454] = -1092290043;
   HEAP32[455] = 0;
   HEAP32[452] = -1098022214;
   HEAP32[453] = 1062847522;
   HEAP32[450] = -1092290177;
   HEAP32[451] = 0;
   HEAP32[448] = -1083901670;
   HEAP32[449] = -2147483648;
   HEAP32[446] = -1092290076;
   HEAP32[447] = 0;
   HEAP32[444] = -1098022214;
   HEAP32[445] = -1084636126;
   HEAP32[442] = -1092290076;
   HEAP32[443] = 0;
   HEAP32[440] = 1060716128;
   HEAP32[441] = -1090087446;
   HEAP32[438] = -1082130432;
   HEAP32[439] = 0;
   HEAP32[436] = 0;
   HEAP32[437] = -2147483648;
   HEAP8[2736] = 1;
  }
 }
 
 function btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29__btIntermediateResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  var $4 = 0, $5 = 0;
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 8 >> 2] = $4;
  $1 = $1 + 8 | 0;
  $5 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 12 | 0;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $1;
  $1 = $2;
  $2 = HEAP32[$1 >> 2];
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 20 >> 2] = $2;
  HEAP32[$0 + 24 >> 2] = $4;
  $1 = $1 + 8 | 0;
  $2 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 28 | 0;
  HEAP32[$4 >> 2] = $2;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP8[$0 + 40 | 0] = 1;
  HEAPF32[$0 + 36 >> 2] = $3;
 }
 
 function btPolyhedralContactClipping__clipFace_28btAlignedObjectArray_btVector3__20const__2c_20btAlignedObjectArray_btVector3___2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0), $24 = 0, $25 = Math_fround(0), $26 = 0;
  label$1 : {
   $24 = HEAP32[$0 + 4 >> 2];
   if (($24 | 0) < 2) {
    break label$1
   }
   $4 = HEAP32[$0 + 12 >> 2];
   $5 = ($4 + ($24 << 4) | 0) + -16 | 0;
   $16 = HEAPF32[$5 >> 2];
   $14 = HEAPF32[$2 >> 2];
   $17 = HEAPF32[$5 + 4 >> 2];
   $15 = HEAPF32[$2 + 4 >> 2];
   $18 = HEAPF32[$5 + 8 >> 2];
   $25 = HEAPF32[$2 + 8 >> 2];
   $10 = Math_fround(Math_fround(Math_fround(Math_fround($16 * $14) + Math_fround($17 * $15)) + Math_fround($18 * $25)) + $3);
   while (1) {
    $4 = ($26 << 4) + $4 | 0;
    $19 = HEAPF32[$4 >> 2];
    $20 = HEAPF32[$4 + 4 >> 2];
    $21 = HEAPF32[$4 + 8 >> 2];
    $23 = Math_fround(Math_fround(Math_fround(Math_fround($19 * $14) + Math_fround($20 * $15)) + Math_fround($21 * $25)) + $3);
    $22 = HEAP32[$4 + 12 >> 2];
    label$3 : {
     label$4 : {
      if (!!($10 < Math_fround(0.0))) {
       if (!!($23 < Math_fround(0.0))) {
        $5 = HEAP32[$1 + 4 >> 2];
        label$7 : {
         if (($5 | 0) != HEAP32[$1 + 8 >> 2]) {
          break label$7
         }
         $11 = $5 ? $5 << 1 : 1;
         if (($5 | 0) >= ($11 | 0)) {
          break label$7
         }
         label$8 : {
          if (!$11) {
           $12 = 0;
           break label$8;
          }
          $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 4);
          $5 = HEAP32[$1 + 4 >> 2];
         }
         if (($5 | 0) >= 1) {
          $4 = 0;
          while (1) {
           $7 = $4 + HEAP32[$1 + 12 >> 2] | 0;
           $6 = $7;
           $7 = HEAP32[$6 >> 2];
           $8 = HEAP32[$6 + 4 >> 2];
           $13 = $4 + $12 | 0;
           $9 = $13;
           HEAP32[$9 >> 2] = $7;
           HEAP32[$9 + 4 >> 2] = $8;
           $6 = $6 + 8 | 0;
           $7 = HEAP32[$6 >> 2];
           $9 = HEAP32[$6 + 4 >> 2];
           $8 = $13 + 8 | 0;
           HEAP32[$8 >> 2] = $7;
           HEAP32[$8 + 4 >> 2] = $9;
           $4 = $4 + 16 | 0;
           $5 = $5 + -1 | 0;
           if ($5) {
            continue
           }
           break;
          };
         }
         $4 = HEAP32[$1 + 12 >> 2];
         if ($4) {
          if (HEAPU8[$1 + 16 | 0]) {
           btAlignedFreeInternal_28void__29($4)
          }
          HEAP32[$1 + 12 >> 2] = 0;
         }
         HEAP32[$1 + 12 >> 2] = $12;
         HEAP8[$1 + 16 | 0] = 1;
         HEAP32[$1 + 8 >> 2] = $11;
         $5 = HEAP32[$1 + 4 >> 2];
        }
        $4 = HEAP32[$1 + 12 >> 2] + ($5 << 4) | 0;
        HEAP32[$4 + 12 >> 2] = $22;
        HEAPF32[$4 + 8 >> 2] = $21;
        HEAPF32[$4 + 4 >> 2] = $20;
        HEAPF32[$4 >> 2] = $19;
        break label$4;
       }
       $10 = Math_fround($10 / Math_fround($10 - $23));
       $14 = Math_fround($18 + Math_fround(Math_fround($21 - $18) * $10));
       $15 = Math_fround($17 + Math_fround(Math_fround($20 - $17) * $10));
       $10 = Math_fround($16 + Math_fround(Math_fround($19 - $16) * $10));
       $5 = HEAP32[$1 + 4 >> 2];
       label$14 : {
        if (($5 | 0) != HEAP32[$1 + 8 >> 2]) {
         break label$14
        }
        $12 = $5 ? $5 << 1 : 1;
        if (($5 | 0) >= ($12 | 0)) {
         break label$14
        }
        label$15 : {
         if (!$12) {
          $22 = 0;
          break label$15;
         }
         $22 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($12 << 4);
         $5 = HEAP32[$1 + 4 >> 2];
        }
        if (($5 | 0) >= 1) {
         $4 = 0;
         while (1) {
          $7 = $4 + HEAP32[$1 + 12 >> 2] | 0;
          $6 = $7;
          $11 = HEAP32[$6 >> 2];
          $8 = HEAP32[$6 + 4 >> 2];
          $13 = $4 + $22 | 0;
          $9 = $13;
          HEAP32[$9 >> 2] = $11;
          HEAP32[$9 + 4 >> 2] = $8;
          $6 = $6 + 8 | 0;
          $11 = HEAP32[$6 >> 2];
          $9 = HEAP32[$6 + 4 >> 2];
          $8 = $13 + 8 | 0;
          HEAP32[$8 >> 2] = $11;
          HEAP32[$8 + 4 >> 2] = $9;
          $4 = $4 + 16 | 0;
          $5 = $5 + -1 | 0;
          if ($5) {
           continue
          }
          break;
         };
        }
        $4 = HEAP32[$1 + 12 >> 2];
        if ($4) {
         if (HEAPU8[$1 + 16 | 0]) {
          btAlignedFreeInternal_28void__29($4)
         }
         HEAP32[$1 + 12 >> 2] = 0;
        }
        HEAP32[$1 + 12 >> 2] = $22;
        HEAP8[$1 + 16 | 0] = 1;
        HEAP32[$1 + 8 >> 2] = $12;
        $5 = HEAP32[$1 + 4 >> 2];
       }
       $4 = HEAP32[$1 + 12 >> 2] + ($5 << 4) | 0;
       HEAP32[$4 + 12 >> 2] = 0;
       HEAPF32[$4 + 8 >> 2] = $14;
       HEAPF32[$4 + 4 >> 2] = $15;
       HEAPF32[$4 >> 2] = $10;
       break label$4;
      }
      if (!($23 < Math_fround(0.0))) {
       break label$3
      }
      $10 = Math_fround($10 / Math_fround($10 - $23));
      $14 = Math_fround($18 + Math_fround(Math_fround($21 - $18) * $10));
      $15 = Math_fround($17 + Math_fround(Math_fround($20 - $17) * $10));
      $10 = Math_fround($16 + Math_fround(Math_fround($19 - $16) * $10));
      $5 = HEAP32[$1 + 4 >> 2];
      label$21 : {
       if (($5 | 0) != HEAP32[$1 + 8 >> 2]) {
        break label$21
       }
       $11 = $5 ? $5 << 1 : 1;
       if (($5 | 0) >= ($11 | 0)) {
        break label$21
       }
       label$22 : {
        if (!$11) {
         $12 = 0;
         break label$22;
        }
        $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 4);
        $5 = HEAP32[$1 + 4 >> 2];
       }
       if (($5 | 0) >= 1) {
        $4 = 0;
        while (1) {
         $7 = $4 + HEAP32[$1 + 12 >> 2] | 0;
         $6 = $7;
         $7 = HEAP32[$6 >> 2];
         $8 = HEAP32[$6 + 4 >> 2];
         $13 = $4 + $12 | 0;
         $9 = $13;
         HEAP32[$9 >> 2] = $7;
         HEAP32[$9 + 4 >> 2] = $8;
         $6 = $6 + 8 | 0;
         $7 = HEAP32[$6 >> 2];
         $9 = HEAP32[$6 + 4 >> 2];
         $8 = $13 + 8 | 0;
         HEAP32[$8 >> 2] = $7;
         HEAP32[$8 + 4 >> 2] = $9;
         $4 = $4 + 16 | 0;
         $5 = $5 + -1 | 0;
         if ($5) {
          continue
         }
         break;
        };
       }
       $4 = HEAP32[$1 + 12 >> 2];
       if ($4) {
        if (HEAPU8[$1 + 16 | 0]) {
         btAlignedFreeInternal_28void__29($4)
        }
        HEAP32[$1 + 12 >> 2] = 0;
       }
       HEAP32[$1 + 12 >> 2] = $12;
       HEAP8[$1 + 16 | 0] = 1;
       HEAP32[$1 + 8 >> 2] = $11;
       $5 = HEAP32[$1 + 4 >> 2];
      }
      $4 = HEAP32[$1 + 12 >> 2] + ($5 << 4) | 0;
      HEAP32[$4 + 12 >> 2] = 0;
      HEAPF32[$4 + 8 >> 2] = $14;
      HEAPF32[$4 + 4 >> 2] = $15;
      HEAPF32[$4 >> 2] = $10;
      $5 = HEAP32[$1 + 4 >> 2] + 1 | 0;
      HEAP32[$1 + 4 >> 2] = $5;
      label$28 : {
       if (HEAP32[$1 + 8 >> 2] != ($5 | 0)) {
        break label$28
       }
       $11 = $5 ? $5 << 1 : 1;
       if (($5 | 0) >= ($11 | 0)) {
        break label$28
       }
       label$29 : {
        if (!$11) {
         $12 = 0;
         break label$29;
        }
        $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($11 << 4);
        $5 = HEAP32[$1 + 4 >> 2];
       }
       if (($5 | 0) >= 1) {
        $4 = 0;
        while (1) {
         $7 = $4 + HEAP32[$1 + 12 >> 2] | 0;
         $6 = $7;
         $7 = HEAP32[$6 >> 2];
         $8 = HEAP32[$6 + 4 >> 2];
         $13 = $4 + $12 | 0;
         $9 = $13;
         HEAP32[$9 >> 2] = $7;
         HEAP32[$9 + 4 >> 2] = $8;
         $6 = $6 + 8 | 0;
         $7 = HEAP32[$6 >> 2];
         $9 = HEAP32[$6 + 4 >> 2];
         $8 = $13 + 8 | 0;
         HEAP32[$8 >> 2] = $7;
         HEAP32[$8 + 4 >> 2] = $9;
         $4 = $4 + 16 | 0;
         $5 = $5 + -1 | 0;
         if ($5) {
          continue
         }
         break;
        };
       }
       $4 = HEAP32[$1 + 12 >> 2];
       if ($4) {
        if (HEAPU8[$1 + 16 | 0]) {
         btAlignedFreeInternal_28void__29($4)
        }
        HEAP32[$1 + 12 >> 2] = 0;
       }
       HEAP32[$1 + 12 >> 2] = $12;
       HEAP8[$1 + 16 | 0] = 1;
       HEAP32[$1 + 8 >> 2] = $11;
       $5 = HEAP32[$1 + 4 >> 2];
      }
      $4 = HEAP32[$1 + 12 >> 2] + ($5 << 4) | 0;
      HEAP32[$4 + 12 >> 2] = $22;
      HEAPF32[$4 + 8 >> 2] = $21;
      HEAPF32[$4 + 4 >> 2] = $20;
      HEAPF32[$4 >> 2] = $19;
     }
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + 1;
    }
    $26 = $26 + 1 | 0;
    if (($24 | 0) == ($26 | 0)) {
     break label$1
    }
    $25 = HEAPF32[$2 + 8 >> 2];
    $15 = HEAPF32[$2 + 4 >> 2];
    $14 = HEAPF32[$2 >> 2];
    $4 = HEAP32[$0 + 12 >> 2];
    $10 = $23;
    $18 = $21;
    $17 = $20;
    $16 = $19;
    continue;
   };
  }
 }
 
 function TestInternalObjects_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0);
  $7 = HEAPF32[$3 >> 2];
  $10 = HEAPF32[$3 + 4 >> 2];
  $11 = HEAPF32[$3 + 8 >> 2];
  $13 = Math_fround(Math_fround(Math_fround(HEAPF32[$2 >> 2] * $7) + Math_fround(HEAPF32[$2 + 4 >> 2] * $10)) + Math_fround(HEAPF32[$2 + 8 >> 2] * $11));
  $8 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$0 >> 2]) + Math_fround($10 * HEAPF32[$0 + 16 >> 2])) + Math_fround($11 * HEAPF32[$0 + 32 >> 2]));
  $9 = HEAPF32[$4 + 80 >> 2];
  $12 = Math_fround($8 * ($8 < Math_fround(0.0) ? Math_fround(-$9) : $9));
  $8 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$0 + 4 >> 2]) + Math_fround($10 * HEAPF32[$0 + 20 >> 2])) + Math_fround($11 * HEAPF32[$0 + 36 >> 2]));
  $9 = HEAPF32[$4 + 84 >> 2];
  $12 = Math_fround($12 + Math_fround($8 * ($8 < Math_fround(0.0) ? Math_fround(-$9) : $9)));
  $8 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$0 + 8 >> 2]) + Math_fround($10 * HEAPF32[$0 + 24 >> 2])) + Math_fround($11 * HEAPF32[$0 + 40 >> 2]));
  $9 = HEAPF32[$4 + 88 >> 2];
  $8 = Math_fround($12 + Math_fround($8 * ($8 < Math_fround(0.0) ? Math_fround(-$9) : $9)));
  $9 = HEAPF32[$4 + 96 >> 2];
  $12 = $8 > $9 ? $8 : $9;
  $8 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$1 >> 2]) + Math_fround($10 * HEAPF32[$1 + 16 >> 2])) + Math_fround($11 * HEAPF32[$1 + 32 >> 2]));
  $9 = HEAPF32[$5 + 80 >> 2];
  $14 = Math_fround($8 * ($8 < Math_fround(0.0) ? Math_fround(-$9) : $9));
  $8 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$1 + 4 >> 2]) + Math_fround($10 * HEAPF32[$1 + 20 >> 2])) + Math_fround($11 * HEAPF32[$1 + 36 >> 2]));
  $9 = HEAPF32[$5 + 84 >> 2];
  $7 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$1 + 8 >> 2]) + Math_fround($10 * HEAPF32[$1 + 24 >> 2])) + Math_fround($11 * HEAPF32[$1 + 40 >> 2]));
  $10 = HEAPF32[$5 + 88 >> 2];
  $7 = Math_fround(Math_fround($14 + Math_fround($8 * ($8 < Math_fround(0.0) ? Math_fround(-$9) : $9))) + Math_fround($7 * ($7 < Math_fround(0.0) ? Math_fround(-$10) : $10)));
  $10 = HEAPF32[$5 + 96 >> 2];
  $7 = Math_fround($12 + ($7 > $10 ? $7 : $10));
  $10 = Math_fround($13 + $7);
  $7 = Math_fround($7 - $13);
  return ($10 < $7 ? $10 : $7) > $6 ^ 1;
 }
 
 function btPolyhedralContactClipping__findSeparatingAxis_28btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btDiscreteCollisionDetectorInterface__Result__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = 0, $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0);
  $6 = global$0 - 112 | 0;
  global$0 = $6;
  HEAP32[687] = HEAP32[687] + 1;
  $25 = HEAPF32[$2 + 52 >> 2];
  $13 = 20;
  $14 = HEAPF32[$2 + 20 >> 2];
  $17 = HEAPF32[$2 + 24 >> 2];
  $39 = HEAPF32[$3 + 52 >> 2];
  $40 = HEAPF32[$3 + 20 >> 2];
  $41 = HEAPF32[$3 + 24 >> 2];
  $26 = HEAPF32[$2 + 56 >> 2];
  $7 = HEAPF32[$0 + 68 >> 2];
  $10 = HEAPF32[$2 + 36 >> 2];
  $8 = HEAPF32[$0 + 72 >> 2];
  $18 = HEAPF32[$2 + 40 >> 2];
  $42 = HEAPF32[$3 + 56 >> 2];
  $9 = HEAPF32[$1 + 68 >> 2];
  $28 = HEAPF32[$3 + 36 >> 2];
  $11 = HEAPF32[$1 + 72 >> 2];
  $33 = HEAPF32[$3 + 40 >> 2];
  $34 = HEAPF32[$2 + 48 >> 2];
  $21 = HEAPF32[$2 + 8 >> 2];
  $35 = HEAPF32[$2 + 4 >> 2];
  $36 = HEAPF32[$2 >> 2];
  $37 = HEAPF32[$3 + 48 >> 2];
  $38 = HEAPF32[$3 + 8 >> 2];
  $29 = HEAPF32[$3 + 4 >> 2];
  $30 = HEAPF32[$3 >> 2];
  $22 = HEAPF32[$2 + 16 >> 2];
  $31 = HEAPF32[$3 + 16 >> 2];
  $20 = HEAPF32[$0 + 64 >> 2];
  $23 = HEAPF32[$2 + 32 >> 2];
  $27 = HEAPF32[$1 + 64 >> 2];
  $32 = HEAPF32[$3 + 32 >> 2];
  HEAP32[$6 + 28 >> 2] = 0;
  $26 = Math_fround(Math_fround($26 + Math_fround(Math_fround(Math_fround($20 * $23) + Math_fround($7 * $10)) + Math_fround($8 * $18))) - Math_fround($42 + Math_fround(Math_fround(Math_fround($27 * $32) + Math_fround($9 * $28)) + Math_fround($11 * $33))));
  HEAPF32[$6 + 24 >> 2] = $26;
  $25 = Math_fround(Math_fround($25 + Math_fround(Math_fround(Math_fround($20 * $22) + Math_fround($7 * $14)) + Math_fround($8 * $17))) - Math_fround($39 + Math_fround(Math_fround(Math_fround($27 * $31) + Math_fround($9 * $40)) + Math_fround($11 * $41))));
  HEAPF32[$6 + 20 >> 2] = $25;
  $20 = Math_fround(Math_fround($34 + Math_fround(Math_fround(Math_fround($20 * $36) + Math_fround($7 * $35)) + Math_fround($8 * $21))) - Math_fround($37 + Math_fround(Math_fround(Math_fround($27 * $30) + Math_fround($9 * $29)) + Math_fround($11 * $38))));
  HEAPF32[$6 + 16 >> 2] = $20;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $12 = HEAP32[$0 + 28 >> 2];
        if (($12 | 0) < 1) {
         $11 = Math_fround(3402823466385288598117041.0e14);
         break label$6;
        }
        $19 = $12 + -1 | 0;
        $11 = Math_fround(3402823466385288598117041.0e14);
        while (1) {
         $12 = $13 + HEAP32[$0 + 36 >> 2] | 0;
         $7 = HEAPF32[$12 + 8 >> 2];
         $8 = HEAPF32[$12 + 4 >> 2];
         $9 = HEAPF32[$12 >> 2];
         HEAP32[$6 + 12 >> 2] = 0;
         $10 = Math_fround(Math_fround(Math_fround($9 * $23) + Math_fround($8 * $10)) + Math_fround($7 * $18));
         HEAPF32[$6 + 8 >> 2] = $10;
         $14 = Math_fround(Math_fround(Math_fround($9 * $22) + Math_fround($8 * $14)) + Math_fround($7 * $17));
         HEAPF32[$6 + 4 >> 2] = $14;
         $7 = Math_fround(Math_fround(Math_fround($9 * HEAPF32[$2 >> 2]) + Math_fround($8 * HEAPF32[$2 + 4 >> 2])) + Math_fround($7 * $21));
         HEAPF32[$6 >> 2] = $7;
         if (!!(Math_fround(Math_fround(Math_fround($7 * $20) + Math_fround($14 * $25)) + Math_fround($10 * $26)) < Math_fround(0.0))) {
          HEAPF32[$6 + 8 >> 2] = -$10;
          HEAPF32[$6 + 4 >> 2] = -$14;
          HEAPF32[$6 >> 2] = -$7;
         }
         HEAP32[685] = HEAP32[685] + 1;
         label$10 : {
          if (HEAPU8[2988]) {
           if (!TestInternalObjects_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20float_29($2, $3, $6 + 16 | 0, $6, $0, $1, $11)) {
            break label$10
           }
          }
          $12 = 0;
          HEAP32[686] = HEAP32[686] + 1;
          btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($0, $2, $6, $6 + 108 | 0, $6 + 104 | 0, $6 + 80 | 0, $6 - -64 | 0);
          btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($1, $3, $6, $6 + 100 | 0, $6 + 96 | 0, $6 + 48 | 0, $6 + 32 | 0);
          $7 = HEAPF32[$6 + 104 >> 2];
          $8 = HEAPF32[$6 + 100 >> 2];
          label$12 : {
           if ($7 < $8) {
            break label$12
           }
           $9 = HEAPF32[$6 + 96 >> 2];
           $10 = HEAPF32[$6 + 108 >> 2];
           if ($9 < $10) {
            break label$12
           }
           $7 = Math_fround($7 - $8);
           $8 = Math_fround($9 - $10);
           $27 = $7 < $8 ? $7 : $8;
           $12 = 1;
          }
          if (!$12) {
           break label$5
          }
          if (!($27 < $11)) {
           break label$10
          }
          $15 = HEAP32[$6 + 4 >> 2];
          HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
          HEAP32[$4 + 4 >> 2] = $15;
          $16 = $6 + 8 | 0;
          $24 = HEAP32[$16 >> 2];
          $16 = HEAP32[$16 + 4 >> 2];
          $15 = $4 + 8 | 0;
          HEAP32[$15 >> 2] = $24;
          HEAP32[$15 + 4 >> 2] = $16;
          $11 = $27;
         }
         if (!$19) {
          break label$6
         }
         $13 = $13 + 36 | 0;
         $19 = $19 + -1 | 0;
         $18 = HEAPF32[$2 + 40 >> 2];
         $10 = HEAPF32[$2 + 36 >> 2];
         $23 = HEAPF32[$2 + 32 >> 2];
         $17 = HEAPF32[$2 + 24 >> 2];
         $14 = HEAPF32[$2 + 20 >> 2];
         $22 = HEAPF32[$2 + 16 >> 2];
         $21 = HEAPF32[$2 + 8 >> 2];
         continue;
        };
       }
       $19 = HEAP32[$1 + 28 >> 2];
       if (($19 | 0) >= 1) {
        $12 = 20;
        while (1) {
         $13 = $12 + HEAP32[$1 + 36 >> 2] | 0;
         $7 = HEAPF32[$13 + 8 >> 2];
         $8 = HEAPF32[$13 >> 2];
         $9 = HEAPF32[$13 + 4 >> 2];
         HEAP32[$6 + 12 >> 2] = 0;
         $10 = Math_fround(Math_fround(Math_fround($8 * HEAPF32[$3 + 32 >> 2]) + Math_fround($9 * HEAPF32[$3 + 36 >> 2])) + Math_fround($7 * HEAPF32[$3 + 40 >> 2]));
         HEAPF32[$6 + 8 >> 2] = $10;
         $14 = Math_fround(Math_fround(Math_fround($8 * HEAPF32[$3 + 16 >> 2]) + Math_fround($9 * HEAPF32[$3 + 20 >> 2])) + Math_fround($7 * HEAPF32[$3 + 24 >> 2]));
         HEAPF32[$6 + 4 >> 2] = $14;
         $7 = Math_fround(Math_fround(Math_fround($8 * HEAPF32[$3 >> 2]) + Math_fround($9 * HEAPF32[$3 + 4 >> 2])) + Math_fround($7 * HEAPF32[$3 + 8 >> 2]));
         HEAPF32[$6 >> 2] = $7;
         if (!!(Math_fround(Math_fround(Math_fround($7 * $20) + Math_fround($14 * $25)) + Math_fround($10 * $26)) < Math_fround(0.0))) {
          HEAPF32[$6 + 8 >> 2] = -$10;
          HEAPF32[$6 + 4 >> 2] = -$14;
          HEAPF32[$6 >> 2] = -$7;
         }
         HEAP32[685] = HEAP32[685] + 1;
         label$16 : {
          if (HEAPU8[2988]) {
           if (!TestInternalObjects_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20float_29($2, $3, $6 + 16 | 0, $6, $0, $1, $11)) {
            break label$16
           }
          }
          $13 = 0;
          HEAP32[686] = HEAP32[686] + 1;
          btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($0, $2, $6, $6 + 108 | 0, $6 + 104 | 0, $6 + 80 | 0, $6 - -64 | 0);
          btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($1, $3, $6, $6 + 100 | 0, $6 + 96 | 0, $6 + 48 | 0, $6 + 32 | 0);
          $7 = HEAPF32[$6 + 104 >> 2];
          $8 = HEAPF32[$6 + 100 >> 2];
          label$18 : {
           if ($7 < $8) {
            break label$18
           }
           $9 = HEAPF32[$6 + 96 >> 2];
           $10 = HEAPF32[$6 + 108 >> 2];
           if ($9 < $10) {
            break label$18
           }
           $7 = Math_fround($7 - $8);
           $8 = Math_fround($9 - $10);
           $17 = $7 < $8 ? $7 : $8;
           $13 = 1;
          }
          if (!$13) {
           break label$5
          }
          if (!($17 < $11)) {
           break label$16
          }
          $15 = HEAP32[$6 + 4 >> 2];
          HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
          HEAP32[$4 + 4 >> 2] = $15;
          $16 = $6 + 8 | 0;
          $24 = HEAP32[$16 >> 2];
          $16 = HEAP32[$16 + 4 >> 2];
          $15 = $4 + 8 | 0;
          HEAP32[$15 >> 2] = $24;
          HEAP32[$15 + 4 >> 2] = $16;
          $11 = $17;
         }
         $12 = $12 + 36 | 0;
         $19 = $19 + -1 | 0;
         if ($19) {
          continue
         }
         break;
        };
       }
       $12 = HEAP32[$0 + 48 >> 2];
       if (($12 | 0) >= 1) {
        break label$4
       }
       $16 = -1;
       $15 = -1;
       break label$3;
      }
      $3 = 0;
      break label$1;
     }
     $13 = HEAP32[$1 + 48 >> 2];
     $15 = -1;
     $24 = 0;
     $16 = -1;
     while (1) {
      if (($13 | 0) >= 1) {
       $12 = HEAP32[$0 + 56 >> 2] + ($24 << 4) | 0;
       $7 = HEAPF32[$12 >> 2];
       $8 = HEAPF32[$12 + 4 >> 2];
       $9 = HEAPF32[$12 + 8 >> 2];
       $14 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$2 + 32 >> 2]) + Math_fround($8 * HEAPF32[$2 + 36 >> 2])) + Math_fround($9 * HEAPF32[$2 + 40 >> 2]));
       $17 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$2 + 16 >> 2]) + Math_fround($8 * HEAPF32[$2 + 20 >> 2])) + Math_fround($9 * HEAPF32[$2 + 24 >> 2]));
       $18 = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$2 >> 2]) + Math_fround($8 * HEAPF32[$2 + 4 >> 2])) + Math_fround($9 * HEAPF32[$2 + 8 >> 2]));
       $19 = 0;
       $12 = 4;
       while (1) {
        $13 = $12 + HEAP32[$1 + 56 >> 2] | 0;
        $7 = HEAPF32[$13 + 4 >> 2];
        $8 = HEAPF32[$13 + -4 >> 2];
        $9 = HEAPF32[$13 >> 2];
        $23 = HEAPF32[$3 + 40 >> 2];
        $27 = HEAPF32[$3 + 32 >> 2];
        $39 = HEAPF32[$3 + 36 >> 2];
        $10 = HEAPF32[$3 + 24 >> 2];
        $21 = HEAPF32[$3 + 16 >> 2];
        $22 = HEAPF32[$3 + 20 >> 2];
        $40 = HEAPF32[$3 + 8 >> 2];
        $41 = HEAPF32[$3 >> 2];
        $42 = HEAPF32[$3 + 4 >> 2];
        HEAP32[$6 + 12 >> 2] = 0;
        $21 = Math_fround(Math_fround(Math_fround($8 * $21) + Math_fround($9 * $22)) + Math_fround($7 * $10));
        $22 = Math_fround(Math_fround(Math_fround($8 * $41) + Math_fround($9 * $42)) + Math_fround($7 * $40));
        $10 = Math_fround(Math_fround($18 * $21) - Math_fround($17 * $22));
        HEAPF32[$6 + 8 >> 2] = $10;
        $23 = Math_fround(Math_fround(Math_fround($8 * $27) + Math_fround($9 * $39)) + Math_fround($7 * $23));
        $8 = Math_fround(Math_fround($14 * $22) - Math_fround($18 * $23));
        HEAPF32[$6 + 4 >> 2] = $8;
        $7 = Math_fround(Math_fround($17 * $23) - Math_fround($14 * $21));
        HEAPF32[$6 >> 2] = $7;
        label$22 : {
         label$23 : {
          if (+Math_fround(Math_abs($7)) > 1.0e-06) {
           break label$23
          }
          if (+Math_fround(Math_abs($8)) > 1.0e-06) {
           break label$23
          }
          if (!(+Math_fround(Math_abs($10)) > 1.0e-06)) {
           break label$22
          }
         }
         $9 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($10 * $10) + Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8))))));
         $10 = Math_fround($10 * $9);
         HEAPF32[$6 + 8 >> 2] = $10;
         $8 = Math_fround($8 * $9);
         HEAPF32[$6 + 4 >> 2] = $8;
         $7 = Math_fround($7 * $9);
         HEAPF32[$6 >> 2] = $7;
         if (!!(Math_fround(Math_fround(Math_fround($7 * $20) + Math_fround($8 * $25)) + Math_fround($26 * $10)) < Math_fround(0.0))) {
          HEAPF32[$6 + 8 >> 2] = -$10;
          HEAPF32[$6 + 4 >> 2] = -$8;
          HEAPF32[$6 >> 2] = -$7;
         }
         HEAP32[685] = HEAP32[685] + 1;
         if (HEAPU8[2988]) {
          if (!TestInternalObjects_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20float_29($2, $3, $6 + 16 | 0, $6, $0, $1, $11)) {
           break label$22
          }
         }
         $13 = 0;
         HEAP32[686] = HEAP32[686] + 1;
         btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($0, $2, $6, $6 + 108 | 0, $6 + 104 | 0, $6 + 80 | 0, $6 - -64 | 0);
         btConvexPolyhedron__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const($1, $3, $6, $6 + 100 | 0, $6 + 96 | 0, $6 + 48 | 0, $6 + 32 | 0);
         $7 = HEAPF32[$6 + 104 >> 2];
         $8 = HEAPF32[$6 + 100 >> 2];
         label$26 : {
          if ($7 < $8) {
           break label$26
          }
          $9 = HEAPF32[$6 + 96 >> 2];
          $10 = HEAPF32[$6 + 108 >> 2];
          if ($9 < $10) {
           break label$26
          }
          $28 = Math_fround($7 - $8);
          $7 = Math_fround($9 - $10);
          if (!!($28 < $7)) {
           $13 = 1;
           $36 = HEAPF32[$6 + 56 >> 2];
           $37 = HEAPF32[$6 + 52 >> 2];
           $38 = HEAPF32[$6 + 48 >> 2];
           $33 = HEAPF32[$6 + 72 >> 2];
           $34 = HEAPF32[$6 + 68 >> 2];
           $35 = HEAPF32[$6 + 64 >> 2];
           break label$26;
          }
          $13 = 1;
          $36 = HEAPF32[$6 + 40 >> 2];
          $37 = HEAPF32[$6 + 36 >> 2];
          $38 = HEAPF32[$6 + 32 >> 2];
          $33 = HEAPF32[$6 + 88 >> 2];
          $34 = HEAPF32[$6 + 84 >> 2];
          $35 = HEAPF32[$6 + 80 >> 2];
          $28 = $7;
         }
         if (!$13) {
          break label$2
         }
         if (!($28 < $11)) {
          break label$22
         }
         $15 = HEAP32[$6 + 4 >> 2];
         HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
         HEAP32[$4 + 4 >> 2] = $15;
         $16 = $6 + 8 | 0;
         $13 = HEAP32[$16 >> 2];
         $16 = HEAP32[$16 + 4 >> 2];
         $15 = $4 + 8 | 0;
         HEAP32[$15 >> 2] = $13;
         HEAP32[$15 + 4 >> 2] = $16;
         $45 = $38;
         $46 = $37;
         $47 = $36;
         $48 = $35;
         $49 = $34;
         $50 = $33;
         $29 = $22;
         $30 = $21;
         $31 = $23;
         $32 = $18;
         $43 = $17;
         $44 = $14;
         $16 = $24;
         $15 = $19;
         $11 = $28;
        }
        $12 = $12 + 16 | 0;
        $19 = $19 + 1 | 0;
        $13 = HEAP32[$1 + 48 >> 2];
        if (($19 | 0) < ($13 | 0)) {
         continue
        }
        break;
       };
       $12 = HEAP32[$0 + 48 >> 2];
      }
      $24 = $24 + 1 | 0;
      if (($24 | 0) < ($12 | 0)) {
       continue
      }
      break;
     };
    }
    label$28 : {
     if (($15 | $16) < 0) {
      break label$28
     }
     $11 = Math_fround($45 - $48);
     $10 = Math_fround($46 - $49);
     $14 = Math_fround($47 - $50);
     $8 = Math_fround(Math_fround(Math_fround($11 * $29) + Math_fround($10 * $30)) + Math_fround($14 * $31));
     $17 = Math_fround(Math_fround(Math_fround($11 * $32) + Math_fround($10 * $43)) + Math_fround($14 * $44));
     $7 = Math_fround(0.0);
     $9 = Math_fround(Math_fround(Math_fround($29 * $32) + Math_fround($30 * $43)) + Math_fround($31 * $44));
     $18 = Math_fround(Math_fround(1.0) - Math_fround($9 * $9));
     label$29 : {
      if ($18 == Math_fround(0.0)) {
       break label$29
      }
      $7 = Math_fround(-1000000015047466219876688.0e6);
      $18 = Math_fround(Math_fround($17 - Math_fround($8 * $9)) / $18);
      if ($18 < Math_fround(-1000000015047466219876688.0e6)) {
       break label$29
      }
      $7 = $18;
      if (!($7 > Math_fround(1000000015047466219876688.0e6))) {
       break label$29
      }
      $7 = Math_fround(1000000015047466219876688.0e6);
     }
     $8 = Math_fround(Math_fround($9 * $7) - $8);
     label$30 : {
      if (!!($8 < Math_fround(-1000000015047466219876688.0e6))) {
       $9 = Math_fround($17 + Math_fround($9 * Math_fround(-1000000015047466219876688.0e6)));
       if ($9 < Math_fround(-1000000015047466219876688.0e6)) {
        $8 = Math_fround(-1000000015047466219876688.0e6);
        $7 = Math_fround(-1000000015047466219876688.0e6);
        break label$30;
       }
       $7 = Math_fround(1000000015047466219876688.0e6);
       if (!($9 > Math_fround(1000000015047466219876688.0e6))) {
        $8 = Math_fround(-1000000015047466219876688.0e6);
        $7 = $9;
        break label$30;
       }
       $8 = Math_fround(-1000000015047466219876688.0e6);
       break label$30;
      }
      if (!($8 > Math_fround(1000000015047466219876688.0e6))) {
       break label$30
      }
      $7 = Math_fround(-1000000015047466219876688.0e6);
      $8 = Math_fround(1000000015047466219876688.0e6);
      $9 = Math_fround($17 + Math_fround($9 * Math_fround(1000000015047466219876688.0e6)));
      if ($9 < Math_fround(-1000000015047466219876688.0e6)) {
       break label$30
      }
      $7 = $9;
      if (!($7 > Math_fround(1000000015047466219876688.0e6))) {
       break label$30
      }
      $7 = Math_fround(1000000015047466219876688.0e6);
     }
     HEAP32[$6 + 92 >> 2] = 0;
     $17 = Math_fround($31 * $8);
     $9 = Math_fround($17 + Math_fround($14 - Math_fround($44 * $7)));
     HEAPF32[$6 + 88 >> 2] = $9;
     $14 = Math_fround($30 * $8);
     $10 = Math_fround($14 + Math_fround($10 - Math_fround($43 * $7)));
     HEAPF32[$6 + 84 >> 2] = $10;
     $8 = Math_fround($29 * $8);
     $7 = Math_fround($8 + Math_fround($11 - Math_fround($32 * $7)));
     HEAPF32[$6 + 80 >> 2] = $7;
     $11 = Math_fround(Math_fround($9 * $9) + Math_fround(Math_fround($7 * $7) + Math_fround($10 * $10)));
     if (!($11 > Math_fround(1.1920928955078125e-07))) {
      break label$28
     }
     $18 = Math_fround(Math_sqrt($11));
     $11 = Math_fround(Math_fround(1.0) / $18);
     $9 = Math_fround($9 * $11);
     HEAPF32[$6 + 88 >> 2] = $9;
     $10 = Math_fround($10 * $11);
     HEAPF32[$6 + 84 >> 2] = $10;
     $7 = Math_fround($7 * $11);
     HEAPF32[$6 + 80 >> 2] = $7;
     if (!!(Math_fround(Math_fround(Math_fround($7 * $20) + Math_fround($10 * $25)) + Math_fround($9 * $26)) < Math_fround(0.0))) {
      HEAPF32[$6 + 88 >> 2] = -$9;
      HEAPF32[$6 + 84 >> 2] = -$10;
      HEAPF32[$6 + 80 >> 2] = -$7;
     }
     HEAP32[$6 + 76 >> 2] = 0;
     HEAPF32[$6 + 72 >> 2] = $47 + $17;
     HEAPF32[$6 + 68 >> 2] = $46 + $14;
     HEAPF32[$6 + 64 >> 2] = $45 + $8;
     FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, $6 + 80 | 0, $6 - -64 | 0, Math_fround(-$18));
    }
    $3 = 1;
    $7 = HEAPF32[$4 >> 2];
    $8 = HEAPF32[$4 + 4 >> 2];
    $9 = HEAPF32[$4 + 8 >> 2];
    if (!(Math_fround(Math_fround(Math_fround($20 * $7) + Math_fround($25 * $8)) + Math_fround($26 * $9)) < Math_fround(0.0))) {
     break label$1
    }
    HEAP32[$4 + 12 >> 2] = 0;
    HEAPF32[$4 + 8 >> 2] = -$9;
    HEAPF32[$4 + 4 >> 2] = -$8;
    HEAPF32[$4 >> 2] = -$7;
    break label$1;
   }
   $3 = 0;
  }
  global$0 = $6 + 112 | 0;
  return $3;
 }
 
 function btPolyhedralContactClipping__clipFaceAgainstHull_28btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___2c_20float_2c_20float_2c_20btDiscreteCollisionDetectorInterface__Result__29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = Math_fround(0), $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = 0, $37 = 0, $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = 0, $44 = 0, $45 = 0, $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0);
  $13 = global$0 - 32 | 0;
  global$0 = $13;
  $8 = HEAP32[$4 + 4 >> 2];
  if (($8 | 0) <= -1) {
   if (HEAP32[$4 + 8 >> 2] <= -1) {
    $11 = HEAP32[$4 + 12 >> 2];
    if ($11) {
     if (HEAPU8[$4 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($11)
     }
     HEAP32[$4 + 12 >> 2] = 0;
    }
    HEAP8[$4 + 16 | 0] = 1;
    HEAP32[$4 + 8 >> 2] = 0;
    HEAP32[$4 + 12 >> 2] = 0;
   }
   $11 = $8 << 4;
   while (1) {
    $14 = HEAP32[$13 + 20 >> 2];
    $10 = $11 + HEAP32[$4 + 12 >> 2] | 0;
    HEAP32[$10 >> 2] = HEAP32[$13 + 16 >> 2];
    HEAP32[$10 + 4 >> 2] = $14;
    $9 = $13 + 24 | 0;
    $15 = HEAP32[$9 >> 2];
    $9 = HEAP32[$9 + 4 >> 2];
    $14 = $10 + 8 | 0;
    HEAP32[$14 >> 2] = $15;
    HEAP32[$14 + 4 >> 2] = $9;
    $11 = $11 + 16 | 0;
    $10 = $8 + 1 | 0;
    $9 = $10 >>> 0 >= $8 >>> 0;
    $8 = $10;
    if ($9) {
     continue
    }
    break;
   };
  }
  $15 = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $23 = HEAP32[$3 + 4 >> 2];
  if (HEAP32[$4 + 8 >> 2] < ($23 | 0)) {
   label$7 : {
    if (!$23) {
     break label$7
    }
    $15 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($23 << 4);
    $11 = HEAP32[$4 + 4 >> 2];
    if (($11 | 0) < 1) {
     break label$7
    }
    $8 = 0;
    while (1) {
     $9 = $8 + HEAP32[$4 + 12 >> 2] | 0;
     $25 = HEAP32[$9 >> 2];
     $14 = HEAP32[$9 + 4 >> 2];
     $10 = $8 + $15 | 0;
     HEAP32[$10 >> 2] = $25;
     HEAP32[$10 + 4 >> 2] = $14;
     $9 = $9 + 8 | 0;
     $25 = HEAP32[$9 >> 2];
     $9 = HEAP32[$9 + 4 >> 2];
     $14 = $10 + 8 | 0;
     HEAP32[$14 >> 2] = $25;
     HEAP32[$14 + 4 >> 2] = $9;
     $8 = $8 + 16 | 0;
     $11 = $11 + -1 | 0;
     if ($11) {
      continue
     }
     break;
    };
   }
   $8 = HEAP32[$4 + 12 >> 2];
   if ($8) {
    if (HEAPU8[$4 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($8)
    }
    HEAP32[$4 + 12 >> 2] = 0;
   }
   HEAP32[$4 + 12 >> 2] = $15;
   HEAP8[$4 + 16 | 0] = 1;
   HEAP32[$4 + 8 >> 2] = $23;
  }
  $15 = HEAP32[$1 + 28 >> 2];
  label$11 : {
   if (($15 | 0) < 1) {
    break label$11
   }
   $8 = HEAP32[$1 + 36 >> 2] + 20 | 0;
   $18 = HEAPF32[$2 + 40 >> 2];
   $26 = HEAPF32[$2 + 36 >> 2];
   $19 = HEAPF32[$2 + 24 >> 2];
   $27 = HEAPF32[$2 + 20 >> 2];
   $24 = HEAPF32[$0 + 8 >> 2];
   $28 = HEAPF32[$0 + 4 >> 2];
   $29 = HEAPF32[$0 >> 2];
   $30 = HEAPF32[$2 + 32 >> 2];
   $31 = HEAPF32[$2 + 16 >> 2];
   $32 = HEAPF32[$2 + 8 >> 2];
   $33 = HEAPF32[$2 + 4 >> 2];
   $21 = HEAPF32[$2 >> 2];
   $11 = 0;
   $12 = Math_fround(3402823466385288598117041.0e14);
   $10 = -1;
   while (1) {
    $16 = HEAPF32[$8 >> 2];
    $20 = HEAPF32[$8 + 4 >> 2];
    $17 = HEAPF32[$8 + 8 >> 2];
    $16 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($16 * $21) + Math_fround($20 * $33)) + Math_fround($17 * $32)) * $29) + Math_fround(Math_fround(Math_fround(Math_fround($16 * $31) + Math_fround($20 * $27)) + Math_fround($17 * $19)) * $28)) + Math_fround(Math_fround(Math_fround(Math_fround($16 * $30) + Math_fround($20 * $26)) + Math_fround($17 * $18)) * $24));
    $9 = $16 < $12;
    $12 = $9 ? $16 : $12;
    $10 = $9 ? $11 : $10;
    $8 = $8 + 36 | 0;
    $11 = $11 + 1 | 0;
    if (($11 | 0) < ($15 | 0)) {
     continue
    }
    break;
   };
   if (($10 | 0) < 0) {
    break label$11
   }
   $22 = HEAP32[$1 + 36 >> 2] + Math_imul($10, 36) | 0;
   $36 = HEAP32[$22 + 4 >> 2];
   label$13 : {
    if (($36 | 0) < 1) {
     $15 = $3;
     break label$13;
    }
    $43 = $22 + 28 | 0;
    $44 = $22 + 24 | 0;
    $45 = $22 + 20 | 0;
    $25 = $22 + 12 | 0;
    $8 = 0;
    while (1) {
     $15 = $4;
     $23 = $8 + 1 | 0;
     $37 = ($36 | 0) == ($23 | 0);
     $10 = HEAP32[$1 + 16 >> 2];
     $9 = HEAP32[$25 >> 2];
     $11 = $10 + (HEAP32[$9 + (($37 ? 0 : $23) << 2) >> 2] << 4) | 0;
     $34 = HEAPF32[$11 + 8 >> 2];
     $21 = HEAPF32[$11 >> 2];
     $35 = HEAPF32[$11 + 4 >> 2];
     $8 = (HEAP32[($8 << 2) + $9 >> 2] << 4) + $10 | 0;
     $12 = HEAPF32[$8 + 8 >> 2];
     $16 = HEAPF32[$8 >> 2];
     $20 = HEAPF32[$8 + 4 >> 2];
     $46 = HEAPF32[$2 + 56 >> 2];
     $47 = HEAPF32[$2 + 48 >> 2];
     $48 = HEAPF32[$2 + 52 >> 2];
     $17 = HEAPF32[$2 + 40 >> 2];
     $18 = HEAPF32[$2 + 32 >> 2];
     $26 = HEAPF32[$2 + 36 >> 2];
     $19 = HEAPF32[$43 >> 2];
     $27 = HEAPF32[$2 + 8 >> 2];
     $24 = HEAPF32[$45 >> 2];
     $28 = HEAPF32[$2 >> 2];
     $29 = HEAPF32[$44 >> 2];
     $30 = HEAPF32[$2 + 4 >> 2];
     $31 = HEAPF32[$2 + 24 >> 2];
     $32 = HEAPF32[$2 + 16 >> 2];
     $33 = HEAPF32[$2 + 20 >> 2];
     HEAP32[$13 + 28 >> 2] = 0;
     $21 = Math_fround($16 - $21);
     $35 = Math_fround($20 - $35);
     $34 = Math_fround($12 - $34);
     $38 = Math_fround(Math_fround(Math_fround($28 * $21) + Math_fround($30 * $35)) + Math_fround($27 * $34));
     $39 = Math_fround(Math_fround(Math_fround($32 * $24) + Math_fround($33 * $29)) + Math_fround($31 * $19));
     $40 = Math_fround(Math_fround(Math_fround($21 * $32) + Math_fround($35 * $33)) + Math_fround($34 * $31));
     $41 = Math_fround(Math_fround(Math_fround($28 * $24) + Math_fround($30 * $29)) + Math_fround($27 * $19));
     $42 = Math_fround(Math_fround($38 * $39) - Math_fround($40 * $41));
     HEAPF32[$13 + 24 >> 2] = -$42;
     $21 = Math_fround(Math_fround(Math_fround($21 * $18) + Math_fround($35 * $26)) + Math_fround($34 * $17));
     $19 = Math_fround(Math_fround(Math_fround($18 * $24) + Math_fround($26 * $29)) + Math_fround($17 * $19));
     $24 = Math_fround(Math_fround($21 * $41) - Math_fround($38 * $19));
     HEAPF32[$13 + 20 >> 2] = -$24;
     $19 = Math_fround(-Math_fround(Math_fround($40 * $19) - Math_fround($21 * $39)));
     HEAPF32[$13 + 16 >> 2] = $19;
     $4 = $3;
     btPolyhedralContactClipping__clipFace_28btAlignedObjectArray_btVector3__20const__2c_20btAlignedObjectArray_btVector3___2c_20btVector3_20const__2c_20float_29($4, $15, $13 + 16 | 0, Math_fround(-Math_fround(Math_fround(Math_fround(Math_fround($47 + Math_fround(Math_fround(Math_fround($16 * $28) + Math_fround($20 * $30)) + Math_fround($12 * $27))) * $19) - Math_fround(Math_fround($48 + Math_fround(Math_fround(Math_fround($16 * $32) + Math_fround($20 * $33)) + Math_fround($12 * $31))) * $24)) - Math_fround(Math_fround($46 + Math_fround(Math_fround(Math_fround($16 * $18) + Math_fround($20 * $26)) + Math_fround($12 * $17))) * $42))));
     $8 = HEAP32[$4 + 4 >> 2];
     if (($8 | 0) <= -1) {
      if (HEAP32[$4 + 8 >> 2] <= -1) {
       $11 = HEAP32[$4 + 12 >> 2];
       if ($11) {
        if (HEAPU8[$4 + 16 | 0]) {
         btAlignedFreeInternal_28void__29($11)
        }
        HEAP32[$4 + 12 >> 2] = 0;
       }
       HEAP8[$4 + 16 | 0] = 1;
       HEAP32[$4 + 8 >> 2] = 0;
       HEAP32[$4 + 12 >> 2] = 0;
      }
      $11 = $8 << 4;
      while (1) {
       $14 = HEAP32[$13 + 4 >> 2];
       $10 = $11 + HEAP32[$4 + 12 >> 2] | 0;
       HEAP32[$10 >> 2] = HEAP32[$13 >> 2];
       HEAP32[$10 + 4 >> 2] = $14;
       $9 = $13 + 8 | 0;
       $3 = HEAP32[$9 >> 2];
       $9 = HEAP32[$9 + 4 >> 2];
       $14 = $10 + 8 | 0;
       HEAP32[$14 >> 2] = $3;
       HEAP32[$14 + 4 >> 2] = $9;
       $11 = $11 + 16 | 0;
       $10 = $8 + 1 | 0;
       $9 = $10 >>> 0 >= $8 >>> 0;
       $8 = $10;
       if ($9) {
        continue
       }
       break;
      };
     }
     HEAP32[$4 + 4 >> 2] = 0;
     $8 = $23;
     $3 = $15;
     if (!$37) {
      continue
     }
     break;
    };
   }
   $9 = HEAP32[$15 + 4 >> 2];
   if (($9 | 0) < 1) {
    break label$11
   }
   $12 = HEAPF32[$22 + 20 >> 2];
   $17 = HEAPF32[$22 + 24 >> 2];
   $18 = HEAPF32[$22 + 28 >> 2];
   $16 = Math_fround(Math_fround(Math_fround($12 * HEAPF32[$2 >> 2]) + Math_fround($17 * HEAPF32[$2 + 4 >> 2])) + Math_fround($18 * HEAPF32[$2 + 8 >> 2]));
   $20 = Math_fround(Math_fround(Math_fround($12 * HEAPF32[$2 + 16 >> 2]) + Math_fround($17 * HEAPF32[$2 + 20 >> 2])) + Math_fround($18 * HEAPF32[$2 + 24 >> 2]));
   $17 = Math_fround(Math_fround(Math_fround($12 * HEAPF32[$2 + 32 >> 2]) + Math_fround($17 * HEAPF32[$2 + 36 >> 2])) + Math_fround($18 * HEAPF32[$2 + 40 >> 2]));
   $18 = Math_fround(HEAPF32[$22 + 32 >> 2] - Math_fround(Math_fround(Math_fround($16 * HEAPF32[$2 + 48 >> 2]) + Math_fround($20 * HEAPF32[$2 + 52 >> 2])) + Math_fround($17 * HEAPF32[$2 + 56 >> 2])));
   $11 = 0;
   $10 = 0;
   while (1) {
    $8 = $11 + HEAP32[$15 + 12 >> 2] | 0;
    $4 = $8 + 8 | 0;
    $12 = Math_fround($18 + Math_fround(Math_fround(Math_fround($16 * HEAPF32[$8 >> 2]) + Math_fround($20 * HEAPF32[$8 + 4 >> 2])) + Math_fround($17 * HEAPF32[$4 >> 2])));
    $12 = $12 <= $5 ? $5 : $12;
    if (!!($12 <= $6)) {
     $14 = HEAP32[$4 + 4 >> 2];
     $9 = $13 + 24 | 0;
     HEAP32[$9 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$9 + 4 >> 2] = $14;
     $9 = HEAP32[$8 + 4 >> 2];
     HEAP32[$13 + 16 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$13 + 20 >> 2] = $9;
     FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 16 >> 2]]($7, $0, $13 + 16 | 0, $12);
     $9 = HEAP32[$15 + 4 >> 2];
    }
    $11 = $11 + 16 | 0;
    $10 = $10 + 1 | 0;
    if (($10 | 0) < ($9 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $13 + 32 | 0;
 }
 
 function btPolyhedralContactClipping__clipHullAgainstHull_28btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_2c_20float_2c_20btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___2c_20btDiscreteCollisionDetectorInterface__Result__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = Math_fround(0), $26 = Math_fround(0), $27 = 0, $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = 0;
  $16 = global$0 - 32 | 0;
  global$0 = $16;
  HEAP32[$16 + 28 >> 2] = HEAP32[$0 + 12 >> 2];
  $11 = HEAPF32[$0 + 8 >> 2];
  $19 = $11;
  $13 = HEAPF32[$0 >> 2];
  $15 = HEAPF32[$0 + 4 >> 2];
  $11 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($13 * $13) + Math_fround($15 * $15)) + Math_fround($11 * $11)))));
  $20 = Math_fround($19 * $11);
  HEAPF32[$16 + 24 >> 2] = $20;
  $25 = Math_fround($15 * $11);
  HEAPF32[$16 + 20 >> 2] = $25;
  $26 = Math_fround($13 * $11);
  HEAPF32[$16 + 16 >> 2] = $26;
  $21 = -1;
  $14 = HEAP32[$2 + 28 >> 2];
  if (($14 | 0) >= 1) {
   $0 = HEAP32[$2 + 36 >> 2] + 20 | 0;
   $28 = HEAPF32[$4 + 40 >> 2];
   $29 = HEAPF32[$4 + 36 >> 2];
   $30 = HEAPF32[$4 + 24 >> 2];
   $31 = HEAPF32[$4 + 20 >> 2];
   $32 = HEAPF32[$4 + 32 >> 2];
   $33 = HEAPF32[$4 + 16 >> 2];
   $34 = HEAPF32[$4 + 8 >> 2];
   $35 = HEAPF32[$4 + 4 >> 2];
   $36 = HEAPF32[$4 >> 2];
   $11 = Math_fround(-3402823466385288598117041.0e14);
   while (1) {
    $13 = HEAPF32[$0 >> 2];
    $15 = HEAPF32[$0 + 4 >> 2];
    $19 = HEAPF32[$0 + 8 >> 2];
    $13 = Math_fround(Math_fround(Math_fround($26 * Math_fround(Math_fround(Math_fround($13 * $36) + Math_fround($15 * $35)) + Math_fround($19 * $34))) + Math_fround($25 * Math_fround(Math_fround(Math_fround($13 * $33) + Math_fround($15 * $31)) + Math_fround($19 * $30)))) + Math_fround($20 * Math_fround(Math_fround(Math_fround($13 * $32) + Math_fround($15 * $29)) + Math_fround($19 * $28))));
    $12 = $13 > $11;
    $11 = $12 ? $13 : $11;
    $21 = $12 ? $10 : $21;
    $0 = $0 + 36 | 0;
    $10 = $10 + 1 | 0;
    if (($10 | 0) < ($14 | 0)) {
     continue
    }
    break;
   };
  }
  $0 = HEAP32[$7 + 4 >> 2];
  if (($0 | 0) <= -1) {
   if (HEAP32[$7 + 8 >> 2] <= -1) {
    $10 = HEAP32[$7 + 12 >> 2];
    if ($10) {
     if (HEAPU8[$7 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($10)
     }
     HEAP32[$7 + 12 >> 2] = 0;
    }
    HEAP8[$7 + 16 | 0] = 1;
    HEAP32[$7 + 8 >> 2] = 0;
    HEAP32[$7 + 12 >> 2] = 0;
   }
   $10 = $0 << 4;
   while (1) {
    $17 = HEAP32[$16 + 4 >> 2];
    $12 = $10 + HEAP32[$7 + 12 >> 2] | 0;
    HEAP32[$12 >> 2] = HEAP32[$16 >> 2];
    HEAP32[$12 + 4 >> 2] = $17;
    $18 = $16 + 8 | 0;
    $14 = HEAP32[$18 >> 2];
    $18 = HEAP32[$18 + 4 >> 2];
    $17 = $12 + 8 | 0;
    HEAP32[$17 >> 2] = $14;
    HEAP32[$17 + 4 >> 2] = $18;
    $10 = $10 + 16 | 0;
    $12 = $0 + 1 | 0;
    $14 = $12 >>> 0 >= $0 >>> 0;
    $0 = $12;
    if ($14) {
     continue
    }
    break;
   };
  }
  HEAP32[$7 + 4 >> 2] = 0;
  $0 = HEAP32[$2 + 36 >> 2] + Math_imul($21, 36) | 0;
  $27 = HEAP32[$0 + 4 >> 2];
  if (($27 | 0) >= 1) {
   $37 = $0 + 12 | 0;
   $10 = 0;
   while (1) {
    $0 = HEAP32[$2 + 16 >> 2] + (HEAP32[HEAP32[$37 >> 2] + ($23 << 2) >> 2] << 4) | 0;
    $11 = HEAPF32[$0 >> 2];
    $13 = HEAPF32[$0 + 4 >> 2];
    $15 = HEAPF32[$0 + 8 >> 2];
    $19 = Math_fround(Math_fround(Math_fround(Math_fround($11 * HEAPF32[$4 + 32 >> 2]) + Math_fround($13 * HEAPF32[$4 + 36 >> 2])) + Math_fround($15 * HEAPF32[$4 + 40 >> 2])) + HEAPF32[$4 + 56 >> 2]);
    $20 = Math_fround(Math_fround(Math_fround(Math_fround($11 * HEAPF32[$4 + 16 >> 2]) + Math_fround($13 * HEAPF32[$4 + 20 >> 2])) + Math_fround($15 * HEAPF32[$4 + 24 >> 2])) + HEAPF32[$4 + 52 >> 2]);
    $11 = Math_fround(Math_fround(Math_fround(Math_fround($11 * HEAPF32[$4 >> 2]) + Math_fround($13 * HEAPF32[$4 + 4 >> 2])) + Math_fround($15 * HEAPF32[$4 + 8 >> 2])) + HEAPF32[$4 + 48 >> 2]);
    label$10 : {
     if (HEAP32[$7 + 8 >> 2] != ($10 | 0)) {
      break label$10
     }
     $22 = $10 ? $10 << 1 : 1;
     if (($10 | 0) >= ($22 | 0)) {
      break label$10
     }
     label$11 : {
      if (!$22) {
       $24 = 0;
       break label$11;
      }
      $24 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($22 << 4);
      $10 = HEAP32[$7 + 4 >> 2];
     }
     if (($10 | 0) >= 1) {
      $0 = 0;
      while (1) {
       $14 = $0 + HEAP32[$7 + 12 >> 2] | 0;
       $17 = HEAP32[$14 + 4 >> 2];
       $12 = $0 + $24 | 0;
       HEAP32[$12 >> 2] = HEAP32[$14 >> 2];
       HEAP32[$12 + 4 >> 2] = $17;
       $18 = $14 + 8 | 0;
       $14 = HEAP32[$18 >> 2];
       $18 = HEAP32[$18 + 4 >> 2];
       $17 = $12 + 8 | 0;
       HEAP32[$17 >> 2] = $14;
       HEAP32[$17 + 4 >> 2] = $18;
       $0 = $0 + 16 | 0;
       $10 = $10 + -1 | 0;
       if ($10) {
        continue
       }
       break;
      };
     }
     $0 = HEAP32[$7 + 12 >> 2];
     if ($0) {
      if (HEAPU8[$7 + 16 | 0]) {
       btAlignedFreeInternal_28void__29($0)
      }
      HEAP32[$7 + 12 >> 2] = 0;
     }
     HEAP32[$7 + 12 >> 2] = $24;
     HEAP8[$7 + 16 | 0] = 1;
     HEAP32[$7 + 8 >> 2] = $22;
     $10 = HEAP32[$7 + 4 >> 2];
    }
    $0 = HEAP32[$7 + 12 >> 2] + ($10 << 4) | 0;
    HEAP32[$0 + 12 >> 2] = 0;
    HEAPF32[$0 + 8 >> 2] = $19;
    HEAPF32[$0 + 4 >> 2] = $20;
    HEAPF32[$0 >> 2] = $11;
    $10 = HEAP32[$7 + 4 >> 2] + 1 | 0;
    HEAP32[$7 + 4 >> 2] = $10;
    $23 = $23 + 1 | 0;
    if (($27 | 0) != ($23 | 0)) {
     continue
    }
    break;
   };
  }
  if (($21 | 0) > -1) {
   btPolyhedralContactClipping__clipFaceAgainstHull_28btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___2c_20float_2c_20float_2c_20btDiscreteCollisionDetectorInterface__Result__29($16 + 16 | 0, $1, $3, $7, $8, $5, $6, $9)
  }
  global$0 = $16 + 32 | 0;
 }
 
 function btGjkConvexCast__btGjkConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($0, $1, $2, $3) {
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$0 >> 2] = 15312;
  return $0;
 }
 
 function btGjkConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0);
  $7 = global$0 - 288 | 0;
  global$0 = $7;
  btVoronoiSimplexSolver__reset_28_29(HEAP32[$0 + 4 >> 2]);
  $10 = HEAPF32[$1 + 52 >> 2];
  $11 = HEAPF32[$2 + 52 >> 2];
  $14 = HEAPF32[$3 + 52 >> 2];
  $15 = HEAPF32[$4 + 52 >> 2];
  $13 = $1 + 56 | 0;
  $16 = HEAPF32[$13 >> 2];
  $17 = HEAPF32[$2 + 56 >> 2];
  $12 = $3 + 56 | 0;
  $20 = HEAPF32[$12 >> 2];
  $21 = HEAPF32[$4 + 56 >> 2];
  $22 = HEAPF32[$1 + 48 >> 2];
  $23 = HEAPF32[$2 + 48 >> 2];
  $24 = HEAPF32[$3 + 48 >> 2];
  $25 = HEAPF32[$4 + 48 >> 2];
  HEAP8[$7 + 264 | 0] = 0;
  HEAP32[$7 + 260 >> 2] = 1566444395;
  HEAP32[$7 + 224 >> 2] = 15364;
  $19 = btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($7 + 144 | 0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 4 >> 2], 0);
  $0 = $1 + 8 | 0;
  $9 = HEAP32[$0 >> 2];
  $6 = HEAP32[$0 + 4 >> 2];
  $8 = $7 + 16 | 0;
  HEAP32[$8 >> 2] = $9;
  HEAP32[$8 + 4 >> 2] = $6;
  $0 = $1 + 24 | 0;
  $9 = HEAP32[$0 >> 2];
  $8 = HEAP32[$0 + 4 >> 2];
  $6 = $7 + 32 | 0;
  HEAP32[$6 >> 2] = $9;
  HEAP32[$6 + 4 >> 2] = $8;
  $0 = $1 + 40 | 0;
  $9 = HEAP32[$0 >> 2];
  $6 = HEAP32[$0 + 4 >> 2];
  $8 = $7 + 48 | 0;
  HEAP32[$8 >> 2] = $9;
  HEAP32[$8 + 4 >> 2] = $6;
  $0 = $13;
  $9 = HEAP32[$0 >> 2];
  $8 = HEAP32[$0 + 4 >> 2];
  $6 = $7 - -64 | 0;
  HEAP32[$6 >> 2] = $9;
  HEAP32[$6 + 4 >> 2] = $8;
  $0 = $3 + 8 | 0;
  $9 = HEAP32[$0 >> 2];
  $6 = HEAP32[$0 + 4 >> 2];
  $8 = $7 + 80 | 0;
  HEAP32[$8 >> 2] = $9;
  HEAP32[$8 + 4 >> 2] = $6;
  HEAP32[$7 + 136 >> 2] = 1566444395;
  $0 = $1;
  $6 = HEAP32[$0 >> 2];
  $8 = HEAP32[$0 + 4 >> 2];
  HEAP32[$7 + 8 >> 2] = $6;
  HEAP32[$7 + 12 >> 2] = $8;
  $6 = HEAP32[$0 + 20 >> 2];
  HEAP32[$7 + 24 >> 2] = HEAP32[$0 + 16 >> 2];
  HEAP32[$7 + 28 >> 2] = $6;
  $8 = HEAP32[$0 + 36 >> 2];
  HEAP32[$7 + 40 >> 2] = HEAP32[$0 + 32 >> 2];
  HEAP32[$7 + 44 >> 2] = $8;
  $6 = HEAP32[$0 + 52 >> 2];
  HEAP32[$7 + 56 >> 2] = HEAP32[$0 + 48 >> 2];
  HEAP32[$7 + 60 >> 2] = $6;
  $0 = $3;
  $6 = HEAP32[$0 >> 2];
  $8 = HEAP32[$0 + 4 >> 2];
  HEAP32[$7 + 72 >> 2] = $6;
  HEAP32[$7 + 76 >> 2] = $8;
  $0 = $0 + 24 | 0;
  $9 = HEAP32[$0 >> 2];
  $6 = HEAP32[$0 + 4 >> 2];
  $8 = $7 + 96 | 0;
  HEAP32[$8 >> 2] = $9;
  HEAP32[$8 + 4 >> 2] = $6;
  $0 = $3;
  $9 = HEAP32[$0 + 16 >> 2];
  $8 = HEAP32[$0 + 20 >> 2];
  $6 = $7 + 88 | 0;
  HEAP32[$6 >> 2] = $9;
  HEAP32[$6 + 4 >> 2] = $8;
  $0 = $0 + 40 | 0;
  $9 = HEAP32[$0 >> 2];
  $6 = HEAP32[$0 + 4 >> 2];
  $8 = $7 + 112 | 0;
  HEAP32[$8 >> 2] = $9;
  HEAP32[$8 + 4 >> 2] = $6;
  $0 = $3;
  $9 = HEAP32[$0 + 32 >> 2];
  $8 = HEAP32[$0 + 36 >> 2];
  $6 = $7 + 104 | 0;
  HEAP32[$6 >> 2] = $9;
  HEAP32[$6 + 4 >> 2] = $8;
  $0 = $12;
  $9 = HEAP32[$0 >> 2];
  $6 = HEAP32[$0 + 4 >> 2];
  $8 = $7 + 128 | 0;
  HEAP32[$8 >> 2] = $9;
  HEAP32[$8 + 4 >> 2] = $6;
  $0 = $3;
  $9 = HEAP32[$0 + 48 >> 2];
  $8 = HEAP32[$0 + 52 >> 2];
  $6 = $7 + 120 | 0;
  HEAP32[$6 >> 2] = $9;
  HEAP32[$6 + 4 >> 2] = $8;
  btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($19, $7 + 8 | 0, $7 + 224 | 0, 0, 0);
  $0 = $7 + 252 | 0;
  $9 = HEAP32[$0 >> 2];
  $6 = HEAP32[$0 + 4 >> 2];
  $8 = $7 + 280 | 0;
  HEAP32[$8 >> 2] = $9;
  HEAP32[$8 + 4 >> 2] = $6;
  $8 = HEAP32[$7 + 248 >> 2];
  HEAP32[$7 + 272 >> 2] = HEAP32[$7 + 244 >> 2];
  HEAP32[$7 + 276 >> 2] = $8;
  $6 = 0;
  label$1 : {
   if (!HEAPU8[$7 + 264 | 0]) {
    break label$1
   }
   $16 = Math_fround(Math_fround($17 - $16) - Math_fround($21 - $20));
   $15 = Math_fround(Math_fround($11 - $10) - Math_fround($15 - $14));
   $17 = Math_fround(Math_fround($23 - $22) - Math_fround($25 - $24));
   $0 = HEAP32[$7 + 232 >> 2];
   $13 = HEAP32[$7 + 236 >> 2];
   $12 = HEAP32[$7 + 228 >> 2];
   $11 = HEAPF32[$7 + 260 >> 2];
   label$3 : {
    label$4 : {
     if (!($11 > Math_fround(1.0000000474974513e-03))) {
      $10 = Math_fround(0.0);
      $11 = HEAPF32[$7 + 240 >> 2];
      break label$4;
     }
     $9 = $7 + 244 | 0;
     $18 = 33;
     $14 = Math_fround(0.0);
     while (1) {
      $18 = $18 + -1 | 0;
      $6 = 0;
      if (!$18) {
       break label$1
      }
      $10 = Math_fround($14 - Math_fround($11 / Math_fround(Math_fround($16 * (wasm2js_scratch_store_i32(0, $13), wasm2js_scratch_load_f32())) + Math_fround(Math_fround($15 * (wasm2js_scratch_store_i32(0, $0), wasm2js_scratch_load_f32())) + Math_fround($17 * (wasm2js_scratch_store_i32(0, $12), wasm2js_scratch_load_f32()))))));
      $6 = 0;
      if ($10 <= $14) {
       break label$1
      }
      $6 = 0;
      if ($10 < Math_fround(0.0)) {
       break label$1
      }
      $6 = 0;
      if ($10 > Math_fround(1.0)) {
       break label$1
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] >> 2]]($5, $10);
      $11 = Math_fround(Math_fround(1.0) - $10);
      HEAPF32[$7 + 56 >> 2] = Math_fround($11 * HEAPF32[$1 + 48 >> 2]) + Math_fround($10 * HEAPF32[$2 + 48 >> 2]);
      HEAPF32[$7 + 60 >> 2] = Math_fround($11 * HEAPF32[$1 + 52 >> 2]) + Math_fround($10 * HEAPF32[$2 + 52 >> 2]);
      HEAPF32[$7 + 64 >> 2] = Math_fround($11 * HEAPF32[$1 + 56 >> 2]) + Math_fround($10 * HEAPF32[$2 + 56 >> 2]);
      HEAPF32[$7 + 120 >> 2] = Math_fround($11 * HEAPF32[$3 + 48 >> 2]) + Math_fround($10 * HEAPF32[$4 + 48 >> 2]);
      HEAPF32[$7 + 124 >> 2] = Math_fround($11 * HEAPF32[$3 + 52 >> 2]) + Math_fround($10 * HEAPF32[$4 + 52 >> 2]);
      HEAPF32[$7 + 128 >> 2] = Math_fround($11 * HEAPF32[$3 + 56 >> 2]) + Math_fround($10 * HEAPF32[$4 + 56 >> 2]);
      btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($19, $7 + 8 | 0, $7 + 224 | 0, 0, 0);
      $6 = 0;
      if (!HEAPU8[$7 + 264 | 0]) {
       break label$1
      }
      $11 = HEAPF32[$7 + 260 >> 2];
      if (!!($11 < Math_fround(0.0))) {
       HEAPF32[$5 + 164 >> 2] = $10;
       $6 = HEAP32[$7 + 232 >> 2];
       $8 = $5;
       HEAP32[$8 + 132 >> 2] = HEAP32[$7 + 228 >> 2];
       HEAP32[$8 + 136 >> 2] = $6;
       $6 = $8 + 140 | 0;
       $8 = HEAP32[$7 + 240 >> 2];
       HEAP32[$6 >> 2] = HEAP32[$7 + 236 >> 2];
       HEAP32[$6 + 4 >> 2] = $8;
       $0 = $9;
       $1 = HEAP32[$0 >> 2];
       $6 = HEAP32[$0 + 4 >> 2];
       $8 = $5;
       HEAP32[$8 + 148 >> 2] = $1;
       HEAP32[$8 + 152 >> 2] = $6;
       $0 = $0 + 8 | 0;
       $1 = HEAP32[$0 >> 2];
       $6 = $8 + 156 | 0;
       $8 = HEAP32[$0 + 4 >> 2];
       HEAP32[$6 >> 2] = $1;
       HEAP32[$6 + 4 >> 2] = $8;
       break label$3;
      }
      $0 = $9 + 8 | 0;
      $12 = HEAP32[$0 >> 2];
      $6 = HEAP32[$0 + 4 >> 2];
      $8 = $7 + 280 | 0;
      HEAP32[$8 >> 2] = $12;
      HEAP32[$8 + 4 >> 2] = $6;
      $0 = $9;
      $6 = HEAP32[$0 >> 2];
      $8 = HEAP32[$0 + 4 >> 2];
      HEAP32[$7 + 272 >> 2] = $6;
      HEAP32[$7 + 276 >> 2] = $8;
      $12 = HEAP32[$7 + 228 >> 2];
      $0 = HEAP32[$7 + 232 >> 2];
      $13 = HEAP32[$7 + 236 >> 2];
      $14 = $10;
      if ($11 > Math_fround(1.0000000474974513e-03)) {
       continue
      }
      break;
     };
     $11 = HEAPF32[$7 + 240 >> 2];
    }
    $6 = 0;
    if (Math_fround(Math_fround($16 * (wasm2js_scratch_store_i32(0, $13), wasm2js_scratch_load_f32())) + Math_fround(Math_fround($15 * (wasm2js_scratch_store_i32(0, $0), wasm2js_scratch_load_f32())) + Math_fround($17 * (wasm2js_scratch_store_i32(0, $12), wasm2js_scratch_load_f32())))) >= Math_fround(-HEAPF32[$5 + 172 >> 2])) {
     break label$1
    }
    HEAP32[$5 + 132 >> 2] = $12;
    HEAPF32[$5 + 164 >> 2] = $10;
    $6 = HEAP32[$7 + 276 >> 2];
    $8 = $5;
    HEAP32[$8 + 148 >> 2] = HEAP32[$7 + 272 >> 2];
    HEAP32[$8 + 152 >> 2] = $6;
    HEAPF32[$8 + 144 >> 2] = $11;
    HEAP32[$8 + 140 >> 2] = $13;
    HEAP32[$8 + 136 >> 2] = $0;
    $0 = $7 + 280 | 0;
    $1 = HEAP32[$0 >> 2];
    $6 = $8 + 156 | 0;
    $8 = HEAP32[$0 + 4 >> 2];
    HEAP32[$6 >> 2] = $1;
    HEAP32[$6 + 4 >> 2] = $8;
   }
   $6 = 1;
  }
  global$0 = $7 + 288 | 0;
  return $6 | 0;
 }
 
 function btPointCollector__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  var $4 = 0, $5 = 0;
  if (!!(HEAPF32[$0 + 36 >> 2] > $3)) {
   HEAP8[$0 + 40 | 0] = 1;
   $4 = HEAP32[$1 + 4 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$0 + 8 >> 2] = $4;
   $1 = $1 + 8 | 0;
   $5 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
   $4 = $0 + 12 | 0;
   HEAP32[$4 >> 2] = $5;
   HEAP32[$4 + 4 >> 2] = $1;
   $1 = $2;
   $2 = HEAP32[$1 >> 2];
   $4 = HEAP32[$1 + 4 >> 2];
   HEAP32[$0 + 20 >> 2] = $2;
   HEAP32[$0 + 24 >> 2] = $4;
   $1 = $1 + 8 | 0;
   $2 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
   $4 = $0 + 28 | 0;
   HEAP32[$4 >> 2] = $2;
   HEAP32[$4 + 4 >> 2] = $1;
   HEAPF32[$0 + 36 >> 2] = $3;
  }
 }
 
 function btConvexConvexAlgorithm__CreateFunc__CreateFunc_28btConvexPenetrationDepthSolver__29($0, $1) {
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 3;
  HEAP32[$0 >> 2] = 15424;
  HEAP8[$0 + 4 | 0] = 0;
  HEAP32[$0 + 8 >> 2] = $1;
 }
 
 function btConvexConvexAlgorithm___btConvexConvexAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 15444;
  label$1 : {
   if (!HEAPU8[$0 + 52 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 56 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  $1 = HEAP32[$0 + 44 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 48 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 44 >> 2] = 0;
  }
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP8[$0 + 48 | 0] = 1;
  $1 = HEAP32[$0 + 24 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 28 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 24 >> 2] = 0;
  }
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP8[$0 + 28 | 0] = 1;
  return $0 | 0;
 }
 
 function btConvexConvexAlgorithm___btConvexConvexAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 15444;
  label$1 : {
   if (!HEAPU8[$0 + 52 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 56 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  $1 = HEAP32[$0 + 44 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 48 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 44 >> 2] = 0;
  }
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP8[$0 + 48 | 0] = 1;
  $1 = HEAP32[$0 + 24 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 28 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 24 >> 2] = 0;
  }
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP8[$0 + 28 | 0] = 1;
  operator_20delete_28void__29($0);
 }
 
 function btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = 0, $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = 0, $42 = 0, $43 = 0, $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = 0, $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0), $53 = Math_fround(0), $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = Math_fround(0);
  $5 = global$0 - 928 | 0;
  global$0 = $5;
  $9 = HEAP32[$0 + 56 >> 2];
  if (!$9) {
   $14 = HEAP32[$0 + 4 >> 2];
   $9 = FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 12 >> 2]]($14, HEAP32[$1 + 8 >> 2], HEAP32[$2 + 8 >> 2]) | 0;
   HEAP8[$0 + 52 | 0] = 1;
   HEAP32[$0 + 56 >> 2] = $9;
  }
  HEAP32[$4 + 4 >> 2] = $9;
  $14 = HEAP32[$2 + 4 >> 2];
  label$2 : {
   label$3 : {
    $10 = HEAP32[$1 + 4 >> 2];
    $16 = HEAP32[$10 + 4 >> 2] + -8 | 0;
    if ($16 >>> 0 > 2) {
     break label$3
    }
    label$4 : {
     switch ($16 - 1 | 0) {
     case 1:
      $16 = HEAP32[$14 + 4 >> 2] + -8 | 0;
      if ($16 >>> 0 > 2) {
       break label$3
      }
      label$6 : {
       switch ($16 - 1 | 0) {
       case 1:
        $11 = HEAPF32[$9 + 784 >> 2];
        $9 = $10 + 32 | 0;
        $0 = HEAP32[$10 + 56 >> 2];
        $10 = $14 + 32 | 0;
        $14 = HEAP32[$14 + 56 >> 2];
        $12 = capsuleCapsuleDistance_28btVector3__2c_20btVector3__2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_29($5 + 432 | 0, $5 + 8 | 0, HEAPF32[$9 + ($0 << 2) >> 2], HEAPF32[(($0 + 2 | 0) % 3 << 2) + $9 >> 2], HEAPF32[$10 + ($14 << 2) >> 2], HEAPF32[(($14 + 2 | 0) % 3 << 2) + $10 >> 2], $0, $14, HEAP32[$1 + 12 >> 2], HEAP32[$2 + 12 >> 2], $11);
        if (!!($12 < $11)) {
         FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $5 + 432 | 0, $5 + 8 | 0, $12)
        }
        $0 = HEAP32[$4 + 4 >> 2];
        if (!HEAP32[$0 + 780 >> 2]) {
         break label$2
        }
        $10 = HEAP32[$0 + 772 >> 2];
        $14 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
        if (($10 | 0) != ($14 | 0)) {
         btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $14 + 4 | 0);
         break label$2;
        }
        btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, $10 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
        break label$2;
       case 0:
        break label$3;
       default:
        break label$6;
       };
      }
      $11 = HEAPF32[$9 + 784 >> 2];
      $9 = $10 + 32 | 0;
      $0 = HEAP32[$10 + 56 >> 2];
      $12 = capsuleCapsuleDistance_28btVector3__2c_20btVector3__2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_29($5 + 432 | 0, $5 + 8 | 0, HEAPF32[$9 + ($0 << 2) >> 2], HEAPF32[(($0 + 2 | 0) % 3 << 2) + $9 >> 2], Math_fround(0.0), Math_fround(HEAPF32[$14 + 32 >> 2] * HEAPF32[$14 + 16 >> 2]), $0, 1, HEAP32[$1 + 12 >> 2], HEAP32[$2 + 12 >> 2], $11);
      if (!!($12 < $11)) {
       FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $5 + 432 | 0, $5 + 8 | 0, $12)
      }
      $0 = HEAP32[$4 + 4 >> 2];
      if (!HEAP32[$0 + 780 >> 2]) {
       break label$2
      }
      $10 = HEAP32[$0 + 772 >> 2];
      $14 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
      if (($10 | 0) != ($14 | 0)) {
       btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $14 + 4 | 0);
       break label$2;
      }
      btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, $10 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
      break label$2;
     case 0:
      break label$3;
     default:
      break label$4;
     };
    }
    if (HEAP32[$14 + 4 >> 2] != 10) {
     break label$3
    }
    $12 = Math_fround(HEAPF32[$10 + 32 >> 2] * HEAPF32[$10 + 16 >> 2]);
    $10 = $14 + 32 | 0;
    $0 = HEAP32[$14 + 56 >> 2];
    $11 = HEAPF32[$9 + 784 >> 2];
    $12 = capsuleCapsuleDistance_28btVector3__2c_20btVector3__2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_29($5 + 432 | 0, $5 + 8 | 0, Math_fround(0.0), $12, HEAPF32[$10 + ($0 << 2) >> 2], HEAPF32[(($0 + 2 | 0) % 3 << 2) + $10 >> 2], 1, $0, HEAP32[$1 + 12 >> 2], HEAP32[$2 + 12 >> 2], $11);
    if (!!($12 < $11)) {
     FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $5 + 432 | 0, $5 + 8 | 0, $12)
    }
    $0 = HEAP32[$4 + 4 >> 2];
    if (!HEAP32[$0 + 780 >> 2]) {
     break label$2
    }
    $10 = HEAP32[$0 + 772 >> 2];
    $14 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
    if (($10 | 0) != ($14 | 0)) {
     btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $14 + 4 | 0);
     break label$2;
    }
    btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, $10 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
    break label$2;
   }
   HEAP32[$5 + 920 >> 2] = 1566444395;
   HEAP8[$5 + 764 | 0] = 0;
   HEAP32[$5 + 740 >> 2] = 953267991;
   $25 = btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($5 + 352 | 0, $10, $14, $5 + 432 | 0, HEAP32[$0 + 8 >> 2]);
   HEAP32[$25 + 32 >> 2] = $14;
   HEAP32[$25 + 28 >> 2] = $10;
   $11 = Math_fround(Math_fround(Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 48 >> 2]]($10)) + Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 48 >> 2]]($14))) + HEAPF32[HEAP32[$0 + 56 >> 2] + 784 >> 2]) + HEAPF32[$4 + 32 >> 2]);
   HEAPF32[$5 + 920 >> 2] = $11 * $11;
   $9 = HEAP32[$1 + 12 >> 2];
   $8 = $9 + 8 | 0;
   $18 = HEAP32[$8 >> 2];
   $7 = HEAP32[$8 + 4 >> 2];
   $6 = $5 + 800 | 0;
   HEAP32[$6 >> 2] = $18;
   HEAP32[$6 + 4 >> 2] = $7;
   $54 = HEAP32[$9 >> 2];
   $17 = HEAP32[$9 + 4 >> 2];
   $8 = $9 + 24 | 0;
   $18 = HEAP32[$8 >> 2];
   $7 = HEAP32[$8 + 4 >> 2];
   $6 = $5 + 816 | 0;
   HEAP32[$6 >> 2] = $18;
   HEAP32[$6 + 4 >> 2] = $7;
   $55 = HEAP32[$9 + 16 >> 2];
   $56 = HEAP32[$9 + 20 >> 2];
   $8 = $9 + 40 | 0;
   $18 = HEAP32[$8 >> 2];
   $7 = HEAP32[$8 + 4 >> 2];
   $6 = $5 + 832 | 0;
   HEAP32[$6 >> 2] = $18;
   HEAP32[$6 + 4 >> 2] = $7;
   $16 = HEAP32[$9 + 32 >> 2];
   $18 = HEAP32[$9 + 36 >> 2];
   $8 = $9 + 56 | 0;
   $21 = HEAP32[$8 >> 2];
   $7 = HEAP32[$8 + 4 >> 2];
   $6 = $5 + 848 | 0;
   HEAP32[$6 >> 2] = $21;
   HEAP32[$6 + 4 >> 2] = $7;
   HEAP32[$5 + 792 >> 2] = $54;
   HEAP32[$5 + 796 >> 2] = $17;
   HEAP32[$5 + 808 >> 2] = $55;
   HEAP32[$5 + 812 >> 2] = $56;
   HEAP32[$5 + 824 >> 2] = $16;
   HEAP32[$5 + 828 >> 2] = $18;
   $6 = HEAP32[$9 + 52 >> 2];
   HEAP32[$5 + 840 >> 2] = HEAP32[$9 + 48 >> 2];
   HEAP32[$5 + 844 >> 2] = $6;
   $9 = HEAP32[$2 + 12 >> 2];
   $8 = $9 + 8 | 0;
   $18 = HEAP32[$8 >> 2];
   $7 = HEAP32[$8 + 4 >> 2];
   $6 = $5 + 864 | 0;
   HEAP32[$6 >> 2] = $18;
   HEAP32[$6 + 4 >> 2] = $7;
   $6 = HEAP32[$9 + 4 >> 2];
   HEAP32[$5 + 856 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$5 + 860 >> 2] = $6;
   $7 = HEAP32[$9 + 20 >> 2];
   $16 = $5 + 872 | 0;
   $6 = $16;
   HEAP32[$6 >> 2] = HEAP32[$9 + 16 >> 2];
   HEAP32[$6 + 4 >> 2] = $7;
   $8 = $9 + 24 | 0;
   $18 = HEAP32[$8 >> 2];
   $6 = HEAP32[$8 + 4 >> 2];
   $7 = $5 + 880 | 0;
   HEAP32[$7 >> 2] = $18;
   HEAP32[$7 + 4 >> 2] = $6;
   $8 = $9 + 40 | 0;
   $18 = HEAP32[$8 >> 2];
   $7 = HEAP32[$8 + 4 >> 2];
   $6 = $5 + 896 | 0;
   HEAP32[$6 >> 2] = $18;
   HEAP32[$6 + 4 >> 2] = $7;
   $6 = HEAP32[$9 + 36 >> 2];
   $18 = $5 + 888 | 0;
   $7 = $18;
   HEAP32[$7 >> 2] = HEAP32[$9 + 32 >> 2];
   HEAP32[$7 + 4 >> 2] = $6;
   $7 = HEAP32[$9 + 52 >> 2];
   $24 = $5 + 904 | 0;
   $6 = $24;
   HEAP32[$6 >> 2] = HEAP32[$9 + 48 >> 2];
   HEAP32[$6 + 4 >> 2] = $7;
   $8 = $9 + 56 | 0;
   $9 = HEAP32[$8 >> 2];
   $6 = HEAP32[$8 + 4 >> 2];
   $7 = $5 + 912 | 0;
   HEAP32[$7 >> 2] = $9;
   HEAP32[$7 + 4 >> 2] = $6;
   label$14 : {
    $9 = HEAP32[$10 + 4 >> 2];
    if (($9 | 0) > 6) {
     break label$14
    }
    $21 = HEAP32[$14 + 4 >> 2];
    if (($21 | 0) > 6) {
     break label$14
    }
    HEAP32[$5 + 344 >> 2] = 15564;
    $11 = Math_fround(0.0);
    if ($9) {
     $12 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 48 >> 2]]($10));
     $21 = HEAP32[$14 + 4 >> 2];
    }
    if ($21) {
     $11 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 48 >> 2]]($14))
    }
    HEAP8[$5 + 44 | 0] = 0;
    HEAPF32[$5 + 36 >> 2] = $11;
    HEAPF32[$5 + 32 >> 2] = $12;
    HEAP32[$5 + 12 >> 2] = $4;
    HEAP32[$5 + 8 >> 2] = 15740;
    if (!HEAP32[$10 + 56 >> 2]) {
     break label$14
    }
    if (HEAP32[$14 + 56 >> 2]) {
     $11 = HEAPF32[HEAP32[$0 + 56 >> 2] + 784 >> 2];
     label$18 : {
      label$19 : {
       if (HEAPU8[$3 + 24 | 0]) {
        $12 = Math_fround(-1000000015047466219876688.0e6);
        if (btPolyhedralContactClipping__findSeparatingAxis_28btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btDiscreteCollisionDetectorInterface__Result__29(HEAP32[$10 + 56 >> 2], HEAP32[$14 + 56 >> 2], HEAP32[$1 + 12 >> 2], HEAP32[$2 + 12 >> 2], $5 + 248 | 0, $4)) {
         break label$19
        }
        break label$18;
       }
       btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($25, $5 + 792 | 0, $5 + 8 | 0, HEAP32[$3 + 20 >> 2], 0);
       $8 = $5 + 24 | 0;
       $3 = HEAP32[$8 >> 2];
       $7 = HEAP32[$8 + 4 >> 2];
       $6 = $5 + 256 | 0;
       HEAP32[$6 >> 2] = $3;
       HEAP32[$6 + 4 >> 2] = $7;
       $6 = HEAP32[$5 + 20 >> 2];
       HEAP32[$5 + 248 >> 2] = HEAP32[$5 + 16 >> 2];
       HEAP32[$5 + 252 >> 2] = $6;
       $12 = HEAPF32[$5 + 40 >> 2];
       if (!($12 < Math_fround(0.0))) {
        break label$18
       }
       if (!HEAPU8[$5 + 44 | 0]) {
        break label$18
       }
      }
      $25 = $0 + 12 | 0;
      $9 = HEAP32[$0 + 16 >> 2];
      if (($9 | 0) <= -1) {
       if (HEAP32[$0 + 20 >> 2] <= -1) {
        $16 = HEAP32[$0 + 24 >> 2];
        if ($16) {
         if (HEAPU8[$0 + 28 | 0]) {
          btAlignedFreeInternal_28void__29($16)
         }
         HEAP32[$0 + 24 >> 2] = 0;
        }
        $7 = $0;
        HEAP32[$7 + 20 >> 2] = 0;
        HEAP32[$7 + 24 >> 2] = 0;
        HEAP8[$7 + 28 | 0] = 1;
       }
       $16 = $9 << 4;
       while (1) {
        $7 = HEAP32[$5 + 332 >> 2];
        $18 = $16 + HEAP32[$0 + 24 >> 2] | 0;
        $6 = $18;
        HEAP32[$6 >> 2] = HEAP32[$5 + 328 >> 2];
        HEAP32[$6 + 4 >> 2] = $7;
        $8 = $5 + 336 | 0;
        $3 = HEAP32[$8 >> 2];
        $6 = HEAP32[$8 + 4 >> 2];
        $7 = $18 + 8 | 0;
        HEAP32[$7 >> 2] = $3;
        HEAP32[$7 + 4 >> 2] = $6;
        $16 = $16 + 16 | 0;
        $18 = $9 + 1 | 0;
        $24 = $18 >>> 0 >= $9 >>> 0;
        $9 = $18;
        if ($24) {
         continue
        }
        break;
       };
      }
      HEAP32[$0 + 16 >> 2] = 0;
      btPolyhedralContactClipping__clipHullAgainstHull_28btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_2c_20float_2c_20btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___2c_20btDiscreteCollisionDetectorInterface__Result__29($5 + 248 | 0, HEAP32[$10 + 56 >> 2], HEAP32[$14 + 56 >> 2], HEAP32[$1 + 12 >> 2], HEAP32[$2 + 12 >> 2], Math_fround($12 - $11), $11, $25, $0 + 32 | 0, $4);
     }
     if (!HEAPU8[$0 + 52 | 0]) {
      break label$2
     }
     $0 = HEAP32[$4 + 4 >> 2];
     if (!HEAP32[$0 + 780 >> 2]) {
      break label$2
     }
     $10 = HEAP32[$0 + 772 >> 2];
     $14 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
     if (($10 | 0) != ($14 | 0)) {
      btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $14 + 4 | 0);
      break label$2;
     }
     btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, $10 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
     break label$2;
    }
    if (HEAP32[$14 + 4 >> 2] != 1) {
     break label$14
    }
    HEAP32[$5 + 252 >> 2] = 0;
    $9 = HEAP32[$2 + 12 >> 2];
    $15 = HEAPF32[$9 + 56 >> 2];
    $19 = HEAPF32[$9 + 36 >> 2];
    $30 = HEAPF32[$9 + 40 >> 2];
    $33 = HEAPF32[$9 + 52 >> 2];
    $29 = HEAPF32[$9 + 20 >> 2];
    $20 = HEAPF32[$9 + 24 >> 2];
    $11 = HEAPF32[$14 + 68 >> 2];
    $12 = HEAPF32[$14 + 60 >> 2];
    $13 = HEAPF32[$14 - -64 >> 2];
    $22 = HEAPF32[$9 + 32 >> 2];
    $53 = HEAPF32[$9 + 16 >> 2];
    $34 = HEAPF32[$9 + 48 >> 2];
    $35 = HEAPF32[$9 + 8 >> 2];
    $36 = HEAPF32[$9 >> 2];
    $37 = HEAPF32[$9 + 4 >> 2];
    $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(16);
    HEAP32[$5 + 256 >> 2] = 1;
    HEAP32[$5 + 260 >> 2] = $9;
    HEAP8[$5 + 264 | 0] = 1;
    HEAPF32[$9 >> 2] = $34 + Math_fround(Math_fround(Math_fround($12 * $36) + Math_fround($13 * $37)) + Math_fround($11 * $35));
    HEAPF32[$9 + 4 >> 2] = $33 + Math_fround(Math_fround(Math_fround($12 * $53) + Math_fround($13 * $29)) + Math_fround($11 * $20));
    HEAP32[$9 + 12 >> 2] = 0;
    HEAPF32[$9 + 8 >> 2] = $15 + Math_fround(Math_fround(Math_fround($12 * $22) + Math_fround($13 * $19)) + Math_fround($11 * $30));
    $16 = HEAP32[$5 + 252 >> 2] + 1 | 0;
    HEAP32[$5 + 252 >> 2] = $16;
    $11 = HEAPF32[$14 + 76 >> 2];
    $9 = HEAP32[$2 + 12 >> 2];
    $12 = HEAPF32[$14 + 80 >> 2];
    $13 = HEAPF32[$14 + 84 >> 2];
    $15 = Math_fround(Math_fround(Math_fround(Math_fround($11 * HEAPF32[$9 + 32 >> 2]) + Math_fround($12 * HEAPF32[$9 + 36 >> 2])) + Math_fround($13 * HEAPF32[$9 + 40 >> 2])) + HEAPF32[$9 + 56 >> 2]);
    $19 = Math_fround(Math_fround(Math_fround(Math_fround($11 * HEAPF32[$9 + 16 >> 2]) + Math_fround($12 * HEAPF32[$9 + 20 >> 2])) + Math_fround($13 * HEAPF32[$9 + 24 >> 2])) + HEAPF32[$9 + 52 >> 2]);
    $11 = Math_fround(Math_fround(Math_fround(Math_fround($11 * HEAPF32[$9 >> 2]) + Math_fround($12 * HEAPF32[$9 + 4 >> 2])) + Math_fround($13 * HEAPF32[$9 + 8 >> 2])) + HEAPF32[$9 + 48 >> 2]);
    label$27 : {
     if (HEAP32[$5 + 256 >> 2] != ($16 | 0)) {
      break label$27
     }
     $31 = $16 ? $16 << 1 : 1;
     if (($16 | 0) >= ($31 | 0)) {
      break label$27
     }
     label$28 : {
      if (!$31) {
       $21 = 0;
       break label$28;
      }
      $21 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($31 << 4);
      $16 = HEAP32[$5 + 252 >> 2];
     }
     if (($16 | 0) >= 1) {
      $9 = 0;
      while (1) {
       $24 = $9 + HEAP32[$5 + 260 >> 2] | 0;
       $8 = $24;
       $49 = HEAP32[$8 >> 2];
       $7 = HEAP32[$8 + 4 >> 2];
       $18 = $9 + $21 | 0;
       $6 = $18;
       HEAP32[$6 >> 2] = $49;
       HEAP32[$6 + 4 >> 2] = $7;
       $8 = $8 + 8 | 0;
       $24 = HEAP32[$8 >> 2];
       $6 = HEAP32[$8 + 4 >> 2];
       $7 = $18 + 8 | 0;
       HEAP32[$7 >> 2] = $24;
       HEAP32[$7 + 4 >> 2] = $6;
       $9 = $9 + 16 | 0;
       $16 = $16 + -1 | 0;
       if ($16) {
        continue
       }
       break;
      };
     }
     $9 = HEAP32[$5 + 260 >> 2];
     if ($9) {
      if (HEAPU8[$5 + 264 | 0]) {
       btAlignedFreeInternal_28void__29($9)
      }
      HEAP32[$5 + 260 >> 2] = 0;
     }
     HEAP32[$5 + 260 >> 2] = $21;
     HEAP8[$5 + 264 | 0] = 1;
     HEAP32[$5 + 256 >> 2] = $31;
     $16 = HEAP32[$5 + 252 >> 2];
    }
    $9 = HEAP32[$5 + 260 >> 2] + ($16 << 4) | 0;
    HEAP32[$9 + 12 >> 2] = 0;
    HEAPF32[$9 + 8 >> 2] = $15;
    HEAPF32[$9 + 4 >> 2] = $19;
    HEAPF32[$9 >> 2] = $11;
    $16 = HEAP32[$5 + 252 >> 2] + 1 | 0;
    HEAP32[$5 + 252 >> 2] = $16;
    $11 = HEAPF32[$14 + 92 >> 2];
    $9 = HEAP32[$2 + 12 >> 2];
    $12 = HEAPF32[$14 + 96 >> 2];
    $13 = HEAPF32[$14 + 100 >> 2];
    $15 = Math_fround(Math_fround(Math_fround(Math_fround($11 * HEAPF32[$9 >> 2]) + Math_fround($12 * HEAPF32[$9 + 4 >> 2])) + Math_fround($13 * HEAPF32[$9 + 8 >> 2])) + HEAPF32[$9 + 48 >> 2]);
    $19 = Math_fround(Math_fround(Math_fround(Math_fround($11 * HEAPF32[$9 + 32 >> 2]) + Math_fround($12 * HEAPF32[$9 + 36 >> 2])) + Math_fround($13 * HEAPF32[$9 + 40 >> 2])) + HEAPF32[$9 + 56 >> 2]);
    $11 = Math_fround(Math_fround(Math_fround(Math_fround($11 * HEAPF32[$9 + 16 >> 2]) + Math_fround($12 * HEAPF32[$9 + 20 >> 2])) + Math_fround($13 * HEAPF32[$9 + 24 >> 2])) + HEAPF32[$9 + 52 >> 2]);
    label$34 : {
     if (HEAP32[$5 + 256 >> 2] != ($16 | 0)) {
      break label$34
     }
     $21 = $16 ? $16 << 1 : 1;
     if (($16 | 0) >= ($21 | 0)) {
      break label$34
     }
     label$35 : {
      if (!$21) {
       $24 = 0;
       break label$35;
      }
      $24 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($21 << 4);
      $16 = HEAP32[$5 + 252 >> 2];
     }
     if (($16 | 0) >= 1) {
      $9 = 0;
      while (1) {
       $18 = $9 + HEAP32[$5 + 260 >> 2] | 0;
       $8 = $18;
       $31 = HEAP32[$8 >> 2];
       $7 = HEAP32[$8 + 4 >> 2];
       $2 = $9 + $24 | 0;
       $6 = $2;
       HEAP32[$6 >> 2] = $31;
       HEAP32[$6 + 4 >> 2] = $7;
       $8 = $8 + 8 | 0;
       $18 = HEAP32[$8 >> 2];
       $6 = HEAP32[$8 + 4 >> 2];
       $7 = $2 + 8 | 0;
       HEAP32[$7 >> 2] = $18;
       HEAP32[$7 + 4 >> 2] = $6;
       $9 = $9 + 16 | 0;
       $16 = $16 + -1 | 0;
       if ($16) {
        continue
       }
       break;
      };
     }
     $9 = HEAP32[$5 + 260 >> 2];
     if ($9) {
      if (HEAPU8[$5 + 264 | 0]) {
       btAlignedFreeInternal_28void__29($9)
      }
      HEAP32[$5 + 260 >> 2] = 0;
     }
     HEAP32[$5 + 260 >> 2] = $24;
     HEAP8[$5 + 264 | 0] = 1;
     HEAP32[$5 + 256 >> 2] = $21;
     $16 = HEAP32[$5 + 252 >> 2];
    }
    $9 = HEAP32[$5 + 260 >> 2] + ($16 << 4) | 0;
    HEAP32[$9 + 12 >> 2] = 0;
    HEAPF32[$9 + 8 >> 2] = $19;
    HEAPF32[$9 + 4 >> 2] = $11;
    HEAPF32[$9 >> 2] = $15;
    HEAP32[$5 + 252 >> 2] = HEAP32[$5 + 252 >> 2] + 1;
    $15 = HEAPF32[HEAP32[$0 + 56 >> 2] + 784 >> 2];
    btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($25, $5 + 792 | 0, $5 + 344 | 0, HEAP32[$3 + 20 >> 2], 0);
    $11 = HEAPF32[$25 + 4 >> 2];
    $12 = HEAPF32[$25 + 8 >> 2];
    $13 = HEAPF32[$25 + 12 >> 2];
    $19 = Math_fround(Math_fround(Math_fround($11 * $11) + Math_fround($12 * $12)) + Math_fround($13 * $13));
    if (!!($19 > Math_fround(1.1920928955078125e-07))) {
     HEAP32[$5 + 340 >> 2] = 0;
     $19 = Math_fround(Math_fround(1.0) / $19);
     HEAPF32[$5 + 336 >> 2] = $13 * $19;
     HEAPF32[$5 + 332 >> 2] = $12 * $19;
     HEAPF32[$5 + 328 >> 2] = $11 * $19;
     $11 = Math_fround(Math_fround(HEAPF32[$25 + 56 >> 2] - Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 48 >> 2]]($10))) - Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 48 >> 2]]($14)));
     $18 = $0 + 32 | 0;
     $14 = HEAP32[$0 + 36 >> 2];
     if (($14 | 0) <= -1) {
      if (HEAP32[$0 + 40 >> 2] <= -1) {
       $9 = HEAP32[$0 + 44 >> 2];
       if ($9) {
        if (HEAPU8[$0 + 48 | 0]) {
         btAlignedFreeInternal_28void__29($9)
        }
        HEAP32[$0 + 44 >> 2] = 0;
       }
       $7 = $0;
       HEAP32[$7 + 40 >> 2] = 0;
       HEAP32[$7 + 44 >> 2] = 0;
       HEAP8[$7 + 48 | 0] = 1;
      }
      $9 = $14 << 4;
      while (1) {
       $7 = HEAP32[$5 + 316 >> 2];
       $2 = $9 + HEAP32[$0 + 44 >> 2] | 0;
       $6 = $2;
       HEAP32[$6 >> 2] = HEAP32[$5 + 312 >> 2];
       HEAP32[$6 + 4 >> 2] = $7;
       $8 = $5 + 320 | 0;
       $3 = HEAP32[$8 >> 2];
       $6 = HEAP32[$8 + 4 >> 2];
       $7 = $2 + 8 | 0;
       HEAP32[$7 >> 2] = $3;
       HEAP32[$7 + 4 >> 2] = $6;
       $9 = $9 + 16 | 0;
       $2 = $14 + 1 | 0;
       $16 = $2 >>> 0 >= $14 >>> 0;
       $14 = $2;
       if ($16) {
        continue
       }
       break;
      };
     }
     HEAP32[$0 + 36 >> 2] = 0;
     btPolyhedralContactClipping__clipFaceAgainstHull_28btVector3_20const__2c_20btConvexPolyhedron_20const__2c_20btTransform_20const__2c_20btAlignedObjectArray_btVector3___2c_20btAlignedObjectArray_btVector3___2c_20float_2c_20float_2c_20btDiscreteCollisionDetectorInterface__Result__29($5 + 328 | 0, HEAP32[$10 + 56 >> 2], HEAP32[$1 + 12 >> 2], $5 + 248 | 0, $18, Math_fround($11 - $15), $15, $4);
    }
    label$47 : {
     if (!HEAPU8[$0 + 52 | 0]) {
      break label$47
     }
     $0 = HEAP32[$4 + 4 >> 2];
     if (!HEAP32[$0 + 780 >> 2]) {
      break label$47
     }
     $10 = HEAP32[$0 + 772 >> 2];
     $14 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
     if (($10 | 0) != ($14 | 0)) {
      btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $14 + 4 | 0);
      break label$47;
     }
     btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, $10 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
    }
    $0 = HEAP32[$5 + 260 >> 2];
    if (!$0) {
     break label$2
    }
    if (HEAPU8[$5 + 264 | 0]) {
     btAlignedFreeInternal_28void__29($0)
    }
    HEAP32[$5 + 260 >> 2] = 0;
    break label$2;
   }
   btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($25, $5 + 792 | 0, $4, HEAP32[$3 + 20 >> 2], 0);
   label$50 : {
    if (!HEAP32[$0 + 64 >> 2]) {
     break label$50
    }
    if (HEAP32[HEAP32[$4 + 4 >> 2] + 780 >> 2] >= HEAP32[$0 + 68 >> 2]) {
     break label$50
    }
    $11 = HEAPF32[$25 + 4 >> 2];
    $12 = HEAPF32[$25 + 8 >> 2];
    $13 = HEAPF32[$25 + 12 >> 2];
    $15 = Math_fround(Math_fround(Math_fround($11 * $11) + Math_fround($12 * $12)) + Math_fround($13 * $13));
    if (!($15 > Math_fround(1.1920928955078125e-07))) {
     break label$50
    }
    $9 = $5 + 856 | 0;
    $21 = $5 + 840 | 0;
    $31 = $5 + 824 | 0;
    $49 = $5 + 808 | 0;
    $15 = Math_fround(Math_fround(1.0) / $15);
    $38 = Math_fround($12 * $15);
    $50 = Math_fround($11 * $15);
    $40 = Math_fround($13 * $15);
    label$51 : {
     if (!!(Math_fround(Math_abs($40)) > Math_fround(.7071067690849304))) {
      $12 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($40 * $40) + Math_fround($38 * $38)))));
      $11 = Math_fround($38 * $12);
      $12 = Math_fround(-Math_fround($40 * $12));
      $13 = Math_fround(0.0);
      break label$51;
     }
     $11 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($50 * $50) + Math_fround($38 * $38)))));
     $12 = Math_fround($50 * $11);
     $13 = Math_fround(-Math_fround($38 * $11));
     $11 = Math_fround(0.0);
    }
    $15 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 16 >> 2]]($10));
    $19 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$14 >> 2] + 16 >> 2]]($14));
    $30 = HEAPF32[744];
    $41 = $15 < $19;
    $14 = $41 ? $5 + 792 | 0 : $9;
    $8 = $14 + 8 | 0;
    $10 = HEAP32[$8 >> 2];
    $7 = HEAP32[$8 + 4 >> 2];
    $57 = $5 + 256 | 0;
    $6 = $57;
    HEAP32[$6 >> 2] = $10;
    HEAP32[$6 + 4 >> 2] = $7;
    $10 = $41 ? $49 : $16;
    $8 = $10 + 8 | 0;
    $42 = HEAP32[$8 >> 2];
    $6 = HEAP32[$8 + 4 >> 2];
    $7 = $5 + 272 | 0;
    HEAP32[$7 >> 2] = $42;
    HEAP32[$7 + 4 >> 2] = $6;
    $42 = $41 ? $31 : $18;
    $8 = $42 + 8 | 0;
    $43 = HEAP32[$8 >> 2];
    $7 = HEAP32[$8 + 4 >> 2];
    $6 = $5 + 288 | 0;
    HEAP32[$6 >> 2] = $43;
    HEAP32[$6 + 4 >> 2] = $7;
    $43 = $41 ? $21 : $24;
    $8 = $43 + 8 | 0;
    $17 = HEAP32[$8 >> 2];
    $6 = HEAP32[$8 + 4 >> 2];
    $7 = $5 + 304 | 0;
    HEAP32[$7 >> 2] = $17;
    HEAP32[$7 + 4 >> 2] = $6;
    $8 = $14;
    $6 = HEAP32[$8 >> 2];
    $7 = HEAP32[$8 + 4 >> 2];
    HEAP32[$5 + 248 >> 2] = $6;
    HEAP32[$5 + 252 >> 2] = $7;
    $6 = HEAP32[$10 + 4 >> 2];
    HEAP32[$5 + 264 >> 2] = HEAP32[$10 >> 2];
    HEAP32[$5 + 268 >> 2] = $6;
    $8 = $42;
    $6 = HEAP32[$8 >> 2];
    $7 = HEAP32[$8 + 4 >> 2];
    HEAP32[$5 + 280 >> 2] = $6;
    HEAP32[$5 + 284 >> 2] = $7;
    $8 = $43;
    $7 = HEAP32[$8 >> 2];
    $6 = HEAP32[$8 + 4 >> 2];
    HEAP32[$5 + 296 >> 2] = $7;
    HEAP32[$5 + 300 >> 2] = $6;
    $10 = HEAP32[$0 + 64 >> 2];
    if (($10 | 0) < 1) {
     break label$50
    }
    $29 = Math_fround(Math_fround(Math_min(Math_fround($30 / ($41 ? $15 : $19)), Math_fround(.39269909262657166))) * Math_fround(.5));
    $53 = Math_fround(Math_fround(Math_fround($13 * $13) + Math_fround($12 * $12)) + Math_fround($11 * $11));
    $15 = Math_fround(sinf($29) / Math_fround(Math_sqrt($53)));
    $19 = Math_fround($11 * $15);
    $30 = Math_fround($12 * $15);
    $33 = Math_fround($13 * $15);
    $29 = cosf($29);
    $71 = Math_fround(Math_sqrt(Math_fround(Math_fround($40 * $40) + Math_fround(Math_fround($50 * $50) + Math_fround($38 * $38)))));
    $42 = $5 + 296 | 0;
    $43 = $5 + 224 | 0;
    $58 = $5 + 208 | 0;
    $59 = $5 + 280 | 0;
    $60 = $5 + 192 | 0;
    $61 = $5 + 264 | 0;
    $62 = $5 + 176 | 0;
    $63 = $5 + 160 | 0;
    $64 = $5 + 144 | 0;
    $65 = $5 + 128 | 0;
    $66 = $5 + 112 | 0;
    $67 = $5 + 96 | 0;
    $68 = $5 + 80 | 0;
    $69 = $5 - -64 | 0;
    $70 = $5 + 48 | 0;
    $14 = 0;
    while (1) {
     if (!!($53 > Math_fround(1.1920928955078125e-07))) {
      $15 = Math_fround(Math_fround(Math_fround(Math_fround(6.2831854820251465) / Math_fround($10 | 0)) * Math_fround($14 | 0)) * Math_fround(.5));
      $13 = Math_fround(sinf($15) / $71);
      $11 = Math_fround($40 * $13);
      $12 = Math_fround($38 * $13);
      $13 = Math_fround($50 * $13);
      $15 = cosf($15);
      label$55 : {
       if (!!$41) {
        $10 = HEAP32[$1 + 12 >> 2];
        $34 = HEAPF32[$10 >> 2];
        $35 = HEAPF32[$10 + 4 >> 2];
        $36 = HEAPF32[$10 + 8 >> 2];
        HEAP32[$5 + 804 >> 2] = 0;
        $37 = HEAPF32[$10 + 36 >> 2];
        $44 = HEAPF32[$10 + 20 >> 2];
        $45 = HEAPF32[$10 + 40 >> 2];
        $46 = HEAPF32[$10 + 24 >> 2];
        $47 = HEAPF32[$10 + 32 >> 2];
        $48 = HEAPF32[$10 + 16 >> 2];
        HEAP32[$5 + 836 >> 2] = 0;
        HEAP32[$5 + 820 >> 2] = 0;
        $23 = Math_fround(Math_fround(Math_fround(Math_fround($30 * $15) - Math_fround($29 * $12)) - Math_fround($33 * $11)) + Math_fround($19 * $13));
        $26 = Math_fround(Math_fround(Math_fround(Math_fround($29 * $15) + Math_fround($33 * $13)) + Math_fround($30 * $12)) + Math_fround($19 * $11));
        $27 = Math_fround(Math_fround(Math_fround(Math_fround($33 * $15) - Math_fround($29 * $13)) - Math_fround($19 * $12)) + Math_fround($30 * $11));
        $28 = Math_fround(Math_fround(Math_fround(Math_fround($19 * $15) - Math_fround($29 * $11)) - Math_fround($30 * $13)) + Math_fround($33 * $12));
        $20 = Math_fround(Math_fround(Math_fround($11 * $23) + Math_fround(Math_fround($13 * $26) + Math_fround($15 * $27))) - Math_fround($12 * $28));
        $39 = Math_fround(Math_fround(Math_fround($12 * $27) + Math_fround(Math_fround($11 * $26) + Math_fround($15 * $28))) - Math_fround($13 * $23));
        $22 = Math_fround(Math_fround(Math_fround(Math_fround($15 * $26) - Math_fround($13 * $27)) - Math_fround($12 * $23)) - Math_fround($11 * $28));
        $11 = Math_fround(Math_fround(Math_fround($13 * $28) + Math_fround(Math_fround($15 * $23) + Math_fround($12 * $26))) - Math_fround($11 * $27));
        $13 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround($22 * $22) + Math_fround(Math_fround($39 * $39) + Math_fround(Math_fround($20 * $20) + Math_fround($11 * $11)))));
        $12 = Math_fround($39 * $13);
        $26 = Math_fround($20 * $12);
        $15 = Math_fround($11 * $13);
        $27 = Math_fround($22 * $15);
        $23 = Math_fround($26 - $27);
        $28 = Math_fround($11 * $12);
        $32 = Math_fround($20 * $13);
        $51 = Math_fround($22 * $32);
        $13 = Math_fround($28 + $51);
        $32 = Math_fround($20 * $32);
        $52 = Math_fround($11 * $15);
        $11 = Math_fround(Math_fround(1.0) - Math_fround($32 + $52));
        HEAPF32[$5 + 832 >> 2] = Math_fround(Math_fround($36 * $23) + Math_fround($46 * $13)) + Math_fround($45 * $11);
        HEAPF32[$5 + 828 >> 2] = Math_fround(Math_fround($23 * $35) + Math_fround($13 * $44)) + Math_fround($11 * $37);
        HEAPF32[$5 + 824 >> 2] = Math_fround(Math_fround($23 * $34) + Math_fround($13 * $48)) + Math_fround($11 * $47);
        $15 = Math_fround($20 * $15);
        $20 = Math_fround($22 * $12);
        $11 = Math_fround($15 + $20);
        $22 = Math_fround($39 * $12);
        $12 = Math_fround(Math_fround(1.0) - Math_fround($32 + $22));
        $13 = Math_fround($28 - $51);
        HEAPF32[$5 + 816 >> 2] = Math_fround(Math_fround($36 * $11) + Math_fround($46 * $12)) + Math_fround($45 * $13);
        HEAPF32[$5 + 812 >> 2] = Math_fround(Math_fround($11 * $35) + Math_fround($12 * $44)) + Math_fround($13 * $37);
        HEAPF32[$5 + 808 >> 2] = Math_fround(Math_fround($11 * $34) + Math_fround($12 * $48)) + Math_fround($13 * $47);
        $11 = Math_fround(Math_fround(1.0) - Math_fround($52 + $22));
        $12 = Math_fround($15 - $20);
        $13 = Math_fround($26 + $27);
        HEAPF32[$5 + 800 >> 2] = Math_fround(Math_fround($36 * $11) + Math_fround($46 * $12)) + Math_fround($45 * $13);
        HEAPF32[$5 + 796 >> 2] = Math_fround(Math_fround($11 * $35) + Math_fround($12 * $44)) + Math_fround($13 * $37);
        HEAPF32[$5 + 792 >> 2] = Math_fround(Math_fround($11 * $34) + Math_fround($12 * $48)) + Math_fround($13 * $47);
        $10 = HEAP32[$2 + 12 >> 2];
        $8 = $10;
        $6 = HEAP32[$8 >> 2];
        $7 = HEAP32[$8 + 4 >> 2];
        HEAP32[$9 >> 2] = $6;
        HEAP32[$9 + 4 >> 2] = $7;
        $8 = $8 + 8 | 0;
        $17 = HEAP32[$8 >> 2];
        $6 = HEAP32[$8 + 4 >> 2];
        $7 = $9 + 8 | 0;
        HEAP32[$7 >> 2] = $17;
        HEAP32[$7 + 4 >> 2] = $6;
        $8 = $10 + 24 | 0;
        $17 = HEAP32[$8 >> 2];
        $7 = HEAP32[$8 + 4 >> 2];
        $6 = $16 + 8 | 0;
        HEAP32[$6 >> 2] = $17;
        HEAP32[$6 + 4 >> 2] = $7;
        $6 = HEAP32[$10 + 20 >> 2];
        $7 = $16;
        HEAP32[$7 >> 2] = HEAP32[$10 + 16 >> 2];
        HEAP32[$7 + 4 >> 2] = $6;
        $8 = $10 + 40 | 0;
        $17 = HEAP32[$8 >> 2];
        $7 = HEAP32[$8 + 4 >> 2];
        $6 = $18 + 8 | 0;
        HEAP32[$6 >> 2] = $17;
        HEAP32[$6 + 4 >> 2] = $7;
        $6 = HEAP32[$10 + 36 >> 2];
        $7 = $18;
        HEAP32[$7 >> 2] = HEAP32[$10 + 32 >> 2];
        HEAP32[$7 + 4 >> 2] = $6;
        $8 = $10 + 56 | 0;
        $17 = HEAP32[$8 >> 2];
        $7 = HEAP32[$8 + 4 >> 2];
        $6 = $24 + 8 | 0;
        HEAP32[$6 >> 2] = $17;
        HEAP32[$6 + 4 >> 2] = $7;
        $6 = HEAP32[$10 + 52 >> 2];
        $7 = $24;
        HEAP32[$7 >> 2] = HEAP32[$10 + 48 >> 2];
        HEAP32[$7 + 4 >> 2] = $6;
        break label$55;
       }
       $10 = HEAP32[$1 + 12 >> 2];
       $8 = $10 + 8 | 0;
       $54 = HEAP32[$8 >> 2];
       $17 = HEAP32[$8 + 4 >> 2];
       $55 = HEAP32[$10 >> 2];
       $56 = HEAP32[$10 + 4 >> 2];
       $7 = HEAP32[$10 + 20 >> 2];
       $6 = $49;
       HEAP32[$6 >> 2] = HEAP32[$10 + 16 >> 2];
       HEAP32[$6 + 4 >> 2] = $7;
       $8 = $10 + 24 | 0;
       $7 = $6 + 8 | 0;
       $6 = HEAP32[$8 + 4 >> 2];
       HEAP32[$7 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$7 + 4 >> 2] = $6;
       $7 = $5 + 800 | 0;
       HEAP32[$7 >> 2] = $54;
       HEAP32[$7 + 4 >> 2] = $17;
       $7 = HEAP32[$10 + 36 >> 2];
       $6 = $31;
       HEAP32[$6 >> 2] = HEAP32[$10 + 32 >> 2];
       HEAP32[$6 + 4 >> 2] = $7;
       $8 = $10 + 40 | 0;
       $17 = HEAP32[$8 >> 2];
       $7 = $6 + 8 | 0;
       $6 = HEAP32[$8 + 4 >> 2];
       HEAP32[$7 >> 2] = $17;
       HEAP32[$7 + 4 >> 2] = $6;
       $8 = $10 + 56 | 0;
       $17 = HEAP32[$8 >> 2];
       $7 = HEAP32[$8 + 4 >> 2];
       $6 = $21 + 8 | 0;
       HEAP32[$6 >> 2] = $17;
       HEAP32[$6 + 4 >> 2] = $7;
       $6 = HEAP32[$10 + 52 >> 2];
       $7 = $21;
       HEAP32[$7 >> 2] = HEAP32[$10 + 48 >> 2];
       HEAP32[$7 + 4 >> 2] = $6;
       HEAP32[$5 + 792 >> 2] = $55;
       HEAP32[$5 + 796 >> 2] = $56;
       $10 = HEAP32[$2 + 12 >> 2];
       $34 = HEAPF32[$10 + 36 >> 2];
       $35 = HEAPF32[$10 + 20 >> 2];
       $36 = HEAPF32[$10 + 40 >> 2];
       $37 = HEAPF32[$10 + 24 >> 2];
       $44 = HEAPF32[$10 + 32 >> 2];
       $45 = HEAPF32[$10 >> 2];
       $46 = HEAPF32[$10 + 16 >> 2];
       $47 = HEAPF32[$10 + 4 >> 2];
       $48 = HEAPF32[$10 + 8 >> 2];
       HEAP32[$5 + 900 >> 2] = 0;
       HEAP32[$5 + 884 >> 2] = 0;
       HEAP32[$5 + 868 >> 2] = 0;
       $23 = Math_fround(Math_fround(Math_fround(Math_fround($30 * $15) - Math_fround($29 * $12)) - Math_fround($33 * $11)) + Math_fround($19 * $13));
       $26 = Math_fround(Math_fround(Math_fround(Math_fround($29 * $15) + Math_fround($33 * $13)) + Math_fround($30 * $12)) + Math_fround($19 * $11));
       $27 = Math_fround(Math_fround(Math_fround(Math_fround($33 * $15) - Math_fround($29 * $13)) - Math_fround($19 * $12)) + Math_fround($30 * $11));
       $28 = Math_fround(Math_fround(Math_fround(Math_fround($19 * $15) - Math_fround($29 * $11)) - Math_fround($30 * $13)) + Math_fround($33 * $12));
       $20 = Math_fround(Math_fround(Math_fround($11 * $23) + Math_fround(Math_fround($13 * $26) + Math_fround($15 * $27))) - Math_fround($12 * $28));
       $39 = Math_fround(Math_fround(Math_fround($12 * $27) + Math_fround(Math_fround($11 * $26) + Math_fround($15 * $28))) - Math_fround($13 * $23));
       $22 = Math_fround(Math_fround(Math_fround(Math_fround($15 * $26) - Math_fround($13 * $27)) - Math_fround($12 * $23)) - Math_fround($11 * $28));
       $11 = Math_fround(Math_fround(Math_fround($13 * $28) + Math_fround(Math_fround($15 * $23) + Math_fround($12 * $26))) - Math_fround($11 * $27));
       $13 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround($22 * $22) + Math_fround(Math_fround($39 * $39) + Math_fround(Math_fround($20 * $20) + Math_fround($11 * $11)))));
       $12 = Math_fround($39 * $13);
       $26 = Math_fround($20 * $12);
       $15 = Math_fround($11 * $13);
       $27 = Math_fround($22 * $15);
       $23 = Math_fround($26 - $27);
       $28 = Math_fround($11 * $12);
       $32 = Math_fround($20 * $13);
       $51 = Math_fround($22 * $32);
       $13 = Math_fround($28 + $51);
       $32 = Math_fround($20 * $32);
       $52 = Math_fround($11 * $15);
       $11 = Math_fround(Math_fround(1.0) - Math_fround($32 + $52));
       HEAPF32[$5 + 896 >> 2] = Math_fround(Math_fround($48 * $23) + Math_fround($37 * $13)) + Math_fround($36 * $11);
       HEAPF32[$5 + 892 >> 2] = Math_fround(Math_fround($23 * $47) + Math_fround($13 * $35)) + Math_fround($11 * $34);
       HEAPF32[$5 + 888 >> 2] = Math_fround(Math_fround($23 * $45) + Math_fround($13 * $46)) + Math_fround($11 * $44);
       $15 = Math_fround($20 * $15);
       $20 = Math_fround($22 * $12);
       $11 = Math_fround($15 + $20);
       $22 = Math_fround($39 * $12);
       $12 = Math_fround(Math_fround(1.0) - Math_fround($32 + $22));
       $13 = Math_fround($28 - $51);
       HEAPF32[$5 + 880 >> 2] = Math_fround(Math_fround($48 * $11) + Math_fround($37 * $12)) + Math_fround($36 * $13);
       HEAPF32[$5 + 876 >> 2] = Math_fround(Math_fround($11 * $47) + Math_fround($12 * $35)) + Math_fround($13 * $34);
       HEAPF32[$5 + 872 >> 2] = Math_fround(Math_fround($11 * $45) + Math_fround($12 * $46)) + Math_fround($13 * $44);
       $11 = Math_fround(Math_fround(1.0) - Math_fround($52 + $22));
       $12 = Math_fround($15 - $20);
       $13 = Math_fround($26 + $27);
       HEAPF32[$5 + 864 >> 2] = Math_fround(Math_fround($48 * $11) + Math_fround($37 * $12)) + Math_fround($36 * $13);
       HEAPF32[$5 + 860 >> 2] = Math_fround(Math_fround($11 * $47) + Math_fround($12 * $35)) + Math_fround($13 * $34);
       HEAPF32[$5 + 856 >> 2] = Math_fround(Math_fround($11 * $45) + Math_fround($12 * $46)) + Math_fround($13 * $44);
      }
      $7 = HEAP32[$5 + 796 >> 2];
      $6 = $70;
      HEAP32[$6 >> 2] = HEAP32[$5 + 792 >> 2];
      HEAP32[$6 + 4 >> 2] = $7;
      $8 = $49;
      $10 = HEAP32[$8 >> 2];
      $6 = HEAP32[$8 + 4 >> 2];
      $7 = $69;
      HEAP32[$7 >> 2] = $10;
      HEAP32[$7 + 4 >> 2] = $6;
      $8 = $31;
      $10 = HEAP32[$8 >> 2];
      $7 = HEAP32[$8 + 4 >> 2];
      $6 = $68;
      HEAP32[$6 >> 2] = $10;
      HEAP32[$6 + 4 >> 2] = $7;
      $8 = $21;
      $10 = HEAP32[$8 >> 2];
      $6 = HEAP32[$8 + 4 >> 2];
      $7 = $67;
      HEAP32[$7 >> 2] = $10;
      HEAP32[$7 + 4 >> 2] = $6;
      $8 = $5 + 800 | 0;
      $10 = HEAP32[$8 >> 2];
      $7 = HEAP32[$8 + 4 >> 2];
      $6 = $70 + 8 | 0;
      HEAP32[$6 >> 2] = $10;
      HEAP32[$6 + 4 >> 2] = $7;
      $8 = $49 + 8 | 0;
      $10 = HEAP32[$8 >> 2];
      $6 = HEAP32[$8 + 4 >> 2];
      $7 = $69 + 8 | 0;
      HEAP32[$7 >> 2] = $10;
      HEAP32[$7 + 4 >> 2] = $6;
      $8 = $31 + 8 | 0;
      $10 = HEAP32[$8 >> 2];
      $7 = HEAP32[$8 + 4 >> 2];
      $6 = $68 + 8 | 0;
      HEAP32[$6 >> 2] = $10;
      HEAP32[$6 + 4 >> 2] = $7;
      $8 = $21 + 8 | 0;
      $10 = HEAP32[$8 >> 2];
      $6 = HEAP32[$8 + 4 >> 2];
      $7 = $67 + 8 | 0;
      HEAP32[$7 >> 2] = $10;
      HEAP32[$7 + 4 >> 2] = $6;
      HEAP32[$5 + 40 >> 2] = 0;
      HEAP32[$5 + 44 >> 2] = $4;
      HEAP32[$5 + 8 >> 2] = 15924;
      $10 = HEAP32[$3 + 20 >> 2];
      $8 = $9 + 8 | 0;
      $17 = HEAP32[$8 >> 2];
      $7 = HEAP32[$8 + 4 >> 2];
      $6 = $66 + 8 | 0;
      HEAP32[$6 >> 2] = $17;
      HEAP32[$6 + 4 >> 2] = $7;
      $6 = HEAP32[$9 + 4 >> 2];
      $7 = $66;
      HEAP32[$7 >> 2] = HEAP32[$9 >> 2];
      HEAP32[$7 + 4 >> 2] = $6;
      $8 = $16 + 8 | 0;
      $17 = HEAP32[$8 >> 2];
      $7 = HEAP32[$8 + 4 >> 2];
      $6 = $65 + 8 | 0;
      HEAP32[$6 >> 2] = $17;
      HEAP32[$6 + 4 >> 2] = $7;
      $8 = $16;
      $17 = HEAP32[$8 >> 2];
      $6 = HEAP32[$8 + 4 >> 2];
      $7 = $65;
      HEAP32[$7 >> 2] = $17;
      HEAP32[$7 + 4 >> 2] = $6;
      $8 = $18 + 8 | 0;
      $17 = HEAP32[$8 >> 2];
      $7 = HEAP32[$8 + 4 >> 2];
      $6 = $64 + 8 | 0;
      HEAP32[$6 >> 2] = $17;
      HEAP32[$6 + 4 >> 2] = $7;
      $8 = $18;
      $17 = HEAP32[$8 >> 2];
      $6 = HEAP32[$8 + 4 >> 2];
      $7 = $64;
      HEAP32[$7 >> 2] = $17;
      HEAP32[$7 + 4 >> 2] = $6;
      $8 = $24 + 8 | 0;
      $17 = HEAP32[$8 >> 2];
      $7 = HEAP32[$8 + 4 >> 2];
      $6 = $63 + 8 | 0;
      HEAP32[$6 >> 2] = $17;
      HEAP32[$6 + 4 >> 2] = $7;
      $8 = $24;
      $17 = HEAP32[$8 >> 2];
      $6 = HEAP32[$8 + 4 >> 2];
      $7 = $63;
      HEAP32[$7 >> 2] = $17;
      HEAP32[$7 + 4 >> 2] = $6;
      $8 = $57;
      $17 = HEAP32[$8 >> 2];
      $7 = HEAP32[$8 + 4 >> 2];
      $6 = $62 + 8 | 0;
      HEAP32[$6 >> 2] = $17;
      HEAP32[$6 + 4 >> 2] = $7;
      $6 = HEAP32[$5 + 252 >> 2];
      $7 = $62;
      HEAP32[$7 >> 2] = HEAP32[$5 + 248 >> 2];
      HEAP32[$7 + 4 >> 2] = $6;
      $8 = $61 + 8 | 0;
      $17 = HEAP32[$8 >> 2];
      $7 = HEAP32[$8 + 4 >> 2];
      $6 = $60 + 8 | 0;
      HEAP32[$6 >> 2] = $17;
      HEAP32[$6 + 4 >> 2] = $7;
      $8 = $61;
      $17 = HEAP32[$8 >> 2];
      $6 = HEAP32[$8 + 4 >> 2];
      $7 = $60;
      HEAP32[$7 >> 2] = $17;
      HEAP32[$7 + 4 >> 2] = $6;
      $8 = $59 + 8 | 0;
      $17 = HEAP32[$8 >> 2];
      $7 = HEAP32[$8 + 4 >> 2];
      $6 = $58 + 8 | 0;
      HEAP32[$6 >> 2] = $17;
      HEAP32[$6 + 4 >> 2] = $7;
      $8 = $59;
      $17 = HEAP32[$8 >> 2];
      $6 = HEAP32[$8 + 4 >> 2];
      $7 = $58;
      HEAP32[$7 >> 2] = $17;
      HEAP32[$7 + 4 >> 2] = $6;
      $8 = $42 + 8 | 0;
      $17 = HEAP32[$8 >> 2];
      $7 = HEAP32[$8 + 4 >> 2];
      $6 = $43 + 8 | 0;
      HEAP32[$6 >> 2] = $17;
      HEAP32[$6 + 4 >> 2] = $7;
      $8 = $42;
      $17 = HEAP32[$8 >> 2];
      $6 = HEAP32[$8 + 4 >> 2];
      $7 = $43;
      HEAP32[$7 >> 2] = $17;
      HEAP32[$7 + 4 >> 2] = $6;
      HEAP32[$5 + 244 >> 2] = $10;
      HEAP8[$5 + 240 | 0] = $41;
      btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($25, $5 + 792 | 0, $5 + 8 | 0, $10, 0);
      $10 = HEAP32[$0 + 64 >> 2];
     }
     $14 = $14 + 1 | 0;
     if (($14 | 0) < ($10 | 0)) {
      continue
     }
     break;
    };
   }
   if (!HEAPU8[$0 + 52 | 0]) {
    break label$2
   }
   $0 = HEAP32[$4 + 4 >> 2];
   if (!HEAP32[$0 + 780 >> 2]) {
    break label$2
   }
   $10 = HEAP32[$0 + 772 >> 2];
   $14 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
   if (($10 | 0) != ($14 | 0)) {
    btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $14 + 4 | 0);
    break label$2;
   }
   btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($0, $10 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
  }
  global$0 = $5 + 928 | 0;
 }
 
 function capsuleCapsuleDistance_28btVector3__2c_20btVector3__2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_2c_20int_2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  var $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0);
  $7 = ($7 << 2) + $9 | 0;
  $18 = HEAPF32[$7 >> 2];
  $19 = Math_fround(HEAPF32[$9 + 48 >> 2] - HEAPF32[$8 + 48 >> 2]);
  $20 = HEAPF32[$7 + 16 >> 2];
  $21 = Math_fround(HEAPF32[$9 + 52 >> 2] - HEAPF32[$8 + 52 >> 2]);
  $22 = HEAPF32[$7 + 32 >> 2];
  $23 = Math_fround(HEAPF32[$9 + 56 >> 2] - HEAPF32[$8 + 56 >> 2]);
  $14 = Math_fround(Math_fround(Math_fround($18 * $19) + Math_fround($20 * $21)) + Math_fround($22 * $23));
  $8 = ($6 << 2) + $8 | 0;
  $17 = HEAPF32[$8 >> 2];
  $13 = HEAPF32[$8 + 16 >> 2];
  $16 = HEAPF32[$8 + 32 >> 2];
  $24 = Math_fround(Math_fround(Math_fround($17 * $19) + Math_fround($13 * $21)) + Math_fround($16 * $23));
  $12 = Math_fround(Math_fround(Math_fround($17 * $18) + Math_fround($13 * $20)) + Math_fround($16 * $22));
  $15 = Math_fround(Math_fround(1.0) - Math_fround($12 * $12));
  label$1 : {
   if ($15 == Math_fround(0.0)) {
    break label$1
   }
   $15 = Math_fround(Math_fround($24 - Math_fround($12 * $14)) / $15);
   $11 = Math_fround(-$2);
   if ($15 < $11) {
    break label$1
   }
   $11 = $15;
   if (!($11 > $2)) {
    break label$1
   }
   $11 = $2;
  }
  $14 = Math_fround(Math_fround($12 * $11) - $14);
  $15 = Math_fround(-$4);
  label$2 : {
   label$3 : {
    if (!!($14 < $15)) {
     $12 = Math_fround(Math_fround($12 * $15) + $24);
     $11 = Math_fround(-$2);
     if ($12 < $11) {
      $14 = $15;
      break label$2;
     }
     if (!($12 > $2)) {
      $14 = $15;
      $11 = $12;
      break label$2;
     }
     $4 = $15;
     break label$3;
    }
    if (!($14 > $4)) {
     break label$2
    }
    $12 = Math_fround(Math_fround($12 * $4) + $24);
    $11 = Math_fround(-$2);
    if ($12 < $11) {
     $14 = $4;
     break label$2;
    }
    if (!($12 > $2)) {
     $14 = $4;
     $11 = $12;
     break label$2;
    }
   }
   $14 = $4;
   $11 = $2;
  }
  $22 = Math_fround($22 * $14);
  $12 = Math_fround($22 + Math_fround($23 - Math_fround($16 * $11)));
  $18 = Math_fround($18 * $14);
  $4 = Math_fround($18 + Math_fround($19 - Math_fround($17 * $11)));
  $19 = Math_fround($20 * $14);
  $11 = Math_fround($19 + Math_fround($21 - Math_fround($13 * $11)));
  $20 = Math_fround(Math_fround($12 * $12) + Math_fround(Math_fround($4 * $4) + Math_fround($11 * $11)));
  $21 = Math_fround(Math_sqrt($20));
  $14 = Math_fround(Math_fround($21 - $3) - $5);
  if (!($14 > $10)) {
   label$10 : {
    if (!!($20 <= Math_fround(1.4210854715202004e-14))) {
     if (!!(Math_fround(Math_abs($16)) > Math_fround(.7071067690849304))) {
      HEAP32[$0 >> 2] = 0;
      $11 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($13 * $13) + Math_fround($16 * $16)))));
      $12 = Math_fround($13 * $11);
      HEAPF32[$0 + 8 >> 2] = $12;
      $11 = Math_fround(-Math_fround($16 * $11));
      HEAPF32[$0 + 4 >> 2] = $11;
      $13 = Math_fround(0.0);
      break label$10;
     }
     HEAP32[$0 + 8 >> 2] = 0;
     $12 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($17 * $17) + Math_fround($13 * $13)))));
     $11 = Math_fround($17 * $12);
     HEAPF32[$0 + 4 >> 2] = $11;
     $13 = Math_fround(-Math_fround($13 * $12));
     HEAPF32[$0 >> 2] = $13;
     $12 = Math_fround(0.0);
     break label$10;
    }
    HEAP32[$0 + 12 >> 2] = 0;
    $13 = Math_fround(Math_fround(-1.0) / $21);
    $12 = Math_fround($12 * $13);
    HEAPF32[$0 + 8 >> 2] = $12;
    $11 = Math_fround($11 * $13);
    HEAPF32[$0 + 4 >> 2] = $11;
    $13 = Math_fround($4 * $13);
    HEAPF32[$0 >> 2] = $13;
   }
   $16 = HEAPF32[$9 + 48 >> 2];
   $17 = HEAPF32[$9 + 52 >> 2];
   $4 = HEAPF32[$9 + 56 >> 2];
   HEAP32[$1 + 12 >> 2] = 0;
   HEAPF32[$1 + 8 >> 2] = Math_fround($22 + $4) + Math_fround($12 * $5);
   HEAPF32[$1 + 4 >> 2] = Math_fround($19 + $17) + Math_fround($11 * $5);
   HEAPF32[$1 >> 2] = Math_fround($18 + $16) + Math_fround($13 * $5);
  }
  return $14;
 }
 
 function btConvexConvexAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  $3 = global$0 - 608 | 0;
  global$0 = $3;
  $6 = Math_fround(HEAPF32[$1 + 116 >> 2] - HEAPF32[$1 + 52 >> 2]);
  $5 = Math_fround($6 * $6);
  $6 = Math_fround(HEAPF32[$1 + 120 >> 2] - HEAPF32[$1 + 56 >> 2]);
  $5 = Math_fround($5 + Math_fround($6 * $6));
  $6 = Math_fround(HEAPF32[$1 + 124 >> 2] - HEAPF32[$1 + 60 >> 2]);
  $5 = Math_fround($5 + Math_fround($6 * $6));
  $6 = HEAPF32[$1 + 276 >> 2];
  label$1 : {
   if (!!($5 < Math_fround($6 * $6))) {
    $6 = Math_fround(1.0);
    $5 = Math_fround(HEAPF32[$2 + 116 >> 2] - HEAPF32[$2 + 52 >> 2]);
    $7 = Math_fround($5 * $5);
    $5 = Math_fround(HEAPF32[$2 + 120 >> 2] - HEAPF32[$2 + 56 >> 2]);
    $7 = Math_fround($7 + Math_fround($5 * $5));
    $5 = Math_fround(HEAPF32[$2 + 124 >> 2] - HEAPF32[$2 + 60 >> 2]);
    $7 = Math_fround($7 + Math_fround($5 * $5));
    $5 = HEAPF32[$2 + 276 >> 2];
    if ($7 < Math_fround($5 * $5)) {
     break label$1
    }
   }
   $6 = Math_fround(1.0);
   if (HEAPU8[2752]) {
    break label$1
   }
   $9 = HEAP32[$1 + 192 >> 2];
   $8 = HEAP32[$2 + 272 >> 2];
   btConvexInternalShape__btConvexInternalShape_28_29($3 + 552 | 0);
   $4 = $3 + 580 | 0;
   $0 = $4;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $10 = $3 + 576 | 0;
   HEAP32[$10 >> 2] = 1065353216;
   $11 = $3 + 588 | 0;
   $0 = $11;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $12 = $3 + 596 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$3 + 568 >> 2] = 1065353216;
   HEAP32[$3 + 572 >> 2] = 1065353216;
   HEAP32[$3 + 556 >> 2] = 8;
   HEAP32[$3 + 552 >> 2] = 9852;
   HEAP32[$3 + 604 >> 2] = 0;
   HEAP32[$3 + 600 >> 2] = $8;
   HEAP32[$3 + 584 >> 2] = $8;
   HEAP32[$3 + 548 >> 2] = 0;
   HEAP32[$3 + 540 >> 2] = 1566444395;
   HEAP32[$3 + 544 >> 2] = 0;
   HEAP32[$3 + 376 >> 2] = 15992;
   $13 = $3 + 348 | 0;
   HEAP8[$13 | 0] = 0;
   HEAP32[$3 + 324 >> 2] = 953267991;
   $0 = btGjkConvexCast__btGjkConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($3, $9, $3 + 552 | 0, $3 + 16 | 0);
   $9 = $1 + 4 | 0;
   $14 = $1 + 68 | 0;
   $15 = $2 + 4 | 0;
   $16 = $2 + 68 | 0;
   $6 = Math_fround(1.0);
   label$3 : {
    if (!btGjkConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($0, $9, $14, $15, $16, $3 + 376 | 0)) {
     break label$3
    }
    $5 = HEAPF32[$3 + 540 >> 2];
    if (!!(HEAPF32[$1 + 268 >> 2] > $5)) {
     HEAPF32[$1 + 268 >> 2] = $5
    }
    if (!!(HEAPF32[$2 + 268 >> 2] > $5)) {
     HEAPF32[$2 + 268 >> 2] = $5
    }
    $6 = Math_fround(1.0);
    if (!($5 < Math_fround(1.0))) {
     break label$3
    }
    $6 = $5;
   }
   $17 = HEAP32[$2 + 192 >> 2];
   $8 = HEAP32[$1 + 272 >> 2];
   btConvexInternalShape__btConvexInternalShape_28_29($3 + 552 | 0);
   $0 = $4;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$10 >> 2] = 1065353216;
   $0 = $11;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$3 + 568 >> 2] = 1065353216;
   HEAP32[$3 + 572 >> 2] = 1065353216;
   HEAP32[$3 + 556 >> 2] = 8;
   HEAP32[$3 + 552 >> 2] = 9852;
   HEAP32[$3 + 604 >> 2] = 0;
   HEAP32[$3 + 600 >> 2] = $8;
   HEAP32[$3 + 584 >> 2] = $8;
   HEAP32[$3 + 548 >> 2] = 0;
   HEAP32[$3 + 540 >> 2] = 1566444395;
   HEAP32[$3 + 544 >> 2] = 0;
   HEAP32[$3 + 376 >> 2] = 15992;
   HEAP8[$13 | 0] = 0;
   HEAP32[$3 + 324 >> 2] = 953267991;
   label$6 : {
    if (!btGjkConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29(btGjkConvexCast__btGjkConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($3, $3 + 552 | 0, $17, $3 + 16 | 0), $9, $14, $15, $16, $3 + 376 | 0)) {
     break label$6
    }
    $5 = HEAPF32[$3 + 540 >> 2];
    if (!!(HEAPF32[$1 + 268 >> 2] > $5)) {
     HEAPF32[$1 + 268 >> 2] = $5
    }
    if (!!(HEAPF32[$2 + 268 >> 2] > $5)) {
     HEAPF32[$2 + 268 >> 2] = $5
    }
    if (!($6 > $5)) {
     break label$6
    }
    $6 = $5;
   }
  }
  global$0 = $3 + 608 | 0;
  return Math_fround($6);
 }
 
 function btConvexConvexAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $2 = HEAP32[$1 >> 2];
  $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 56 >> 2]]($2, 72) | 0;
  $3 = HEAP32[$1 + 4 >> 2];
  $4 = HEAP32[$0 + 12 >> 2];
  $5 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[$0 + 8 >> 2];
  btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($2, $1);
  HEAP8[$2 + 28 | 0] = 1;
  HEAP32[$2 + 8 >> 2] = $0;
  HEAP32[$2 >> 2] = 15444;
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP8[$2 + 48 | 0] = 1;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 44 >> 2] = 0;
  HEAP32[$2 + 64 >> 2] = $4;
  HEAP32[$2 + 68 >> 2] = $5;
  HEAP8[$2 + 60 | 0] = 0;
  HEAP32[$2 + 56 >> 2] = $3;
  HEAP8[$2 + 52 | 0] = 0;
  HEAP32[$2 + 36 >> 2] = 0;
  HEAP32[$2 + 40 >> 2] = 0;
  return $2 | 0;
 }
 
 function btConvexConvexAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = HEAP32[$0 + 56 >> 2];
  label$1 : {
   if (!$2) {
    break label$1
   }
   if (!HEAPU8[$0 + 52 | 0]) {
    break label$1
   }
   $3 = HEAP32[$1 + 4 >> 2];
   label$2 : {
    if (($3 | 0) != HEAP32[$1 + 8 >> 2]) {
     break label$2
    }
    $4 = $3 ? $3 << 1 : 1;
    if (($3 | 0) >= ($4 | 0)) {
     break label$2
    }
    label$3 : {
     if (!$4) {
      break label$3
     }
     $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    if (($3 | 0) >= 1) {
     $2 = 0;
     $5 = $3;
     while (1) {
      HEAP32[$2 + $6 >> 2] = HEAP32[$2 + HEAP32[$1 + 12 >> 2] >> 2];
      $2 = $2 + 4 | 0;
      $5 = $5 + -1 | 0;
      if ($5) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$1 + 12 >> 2];
    if ($2) {
     if (HEAPU8[$1 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($2);
      $3 = HEAP32[$1 + 4 >> 2];
     }
     HEAP32[$1 + 12 >> 2] = 0;
    }
    HEAP32[$1 + 12 >> 2] = $6;
    HEAP8[$1 + 16 | 0] = 1;
    HEAP32[$1 + 8 >> 2] = $4;
    $2 = HEAP32[$0 + 56 >> 2];
   }
   HEAP32[$1 + 4 >> 2] = $3 + 1;
   HEAP32[HEAP32[$1 + 12 >> 2] + ($3 << 2) >> 2] = $2;
  }
 }
 
 function btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btDummyResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
 }
 
 function btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btWithoutMarginResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
  $4 = global$0 - 16 | 0;
  global$0 = $4;
  HEAPF32[$0 + 32 >> 2] = $3;
  $5 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 12 >> 2] = $5;
  $8 = $1 + 8 | 0;
  $6 = $8;
  $9 = HEAP32[$6 >> 2];
  $6 = HEAP32[$6 + 4 >> 2];
  $5 = $0 + 16 | 0;
  HEAP32[$5 >> 2] = $9;
  HEAP32[$5 + 4 >> 2] = $6;
  $10 = HEAPF32[$8 >> 2];
  $11 = HEAPF32[$2 >> 2];
  $12 = HEAPF32[$1 >> 2];
  $13 = HEAPF32[$2 + 4 >> 2];
  $14 = HEAPF32[$1 + 4 >> 2];
  $15 = HEAPF32[$2 + 8 >> 2];
  $7 = HEAPF32[$0 + 28 >> 2];
  $3 = Math_fround(Math_fround($7 + HEAPF32[$0 + 24 >> 2]) + $3);
  HEAPF32[$0 + 32 >> 2] = $3;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAPF32[$4 + 8 >> 2] = $15 - Math_fround($7 * $10);
  HEAPF32[$4 + 4 >> 2] = $13 - Math_fround($7 * $14);
  HEAPF32[$4 >> 2] = $11 - Math_fround($12 * $7);
  if (!!($3 < Math_fround(0.0))) {
   HEAP8[$0 + 36 | 0] = 1
  }
  $0 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $4, $3);
  global$0 = $4 + 16 | 0;
 }
 
 function btPerturbedContactResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0);
  $11 = global$0 - 16 | 0;
  global$0 = $11;
  $26 = HEAPF32[$1 + 8 >> 2];
  $19 = HEAPF32[$2 + 8 >> 2];
  $22 = Math_fround(Math_fround($26 * $3) + $19);
  $27 = HEAPF32[$1 + 4 >> 2];
  $25 = HEAPF32[$2 + 4 >> 2];
  $28 = Math_fround(Math_fround($27 * $3) + $25);
  $29 = HEAPF32[$1 >> 2];
  $12 = HEAPF32[$2 >> 2];
  $3 = Math_fround(Math_fround($29 * $3) + $12);
  label$1 : {
   if (HEAPU8[$0 + 232 | 0]) {
    $13 = HEAPF32[$0 + 40 >> 2];
    $7 = Math_fround(-HEAPF32[$0 + 88 >> 2]);
    $14 = HEAPF32[$0 + 56 >> 2];
    $9 = HEAPF32[$0 + 92 >> 2];
    $8 = HEAPF32[$0 + 72 >> 2];
    $4 = HEAPF32[$0 + 96 >> 2];
    $20 = Math_fround(Math_fround(Math_fround($13 * $7) - Math_fround($14 * $9)) - Math_fround($8 * $4));
    $5 = HEAPF32[$0 + 200 >> 2];
    $15 = HEAPF32[$0 + 44 >> 2];
    $16 = HEAPF32[$0 + 60 >> 2];
    $17 = HEAPF32[$0 + 76 >> 2];
    $21 = Math_fround(Math_fround(Math_fround($15 * $7) - Math_fround($16 * $9)) - Math_fround($17 * $4));
    $6 = HEAPF32[$0 + 204 >> 2];
    $18 = HEAPF32[$0 + 48 >> 2];
    $10 = Math_fround($18 * $7);
    $7 = HEAPF32[$0 - -64 >> 2];
    $10 = Math_fround($10 - Math_fround($7 * $9));
    $9 = HEAPF32[$0 + 80 >> 2];
    $10 = Math_fround($10 - Math_fround($9 * $4));
    $4 = HEAPF32[$0 + 208 >> 2];
    $23 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($20 * $5) + Math_fround($21 * $6)) + Math_fround($10 * $4)) + HEAPF32[$0 + 224 >> 2]) + Math_fround(Math_fround($22 * Math_fround(Math_fround(Math_fround($8 * $5) + Math_fround($17 * $6)) + Math_fround($9 * $4))) + Math_fround(Math_fround($3 * Math_fround(Math_fround(Math_fround($13 * $5) + Math_fround($15 * $6)) + Math_fround($18 * $4))) + Math_fround($28 * Math_fround(Math_fround(Math_fround($14 * $5) + Math_fround($16 * $6)) + Math_fround($7 * $4))))));
    $5 = HEAPF32[$0 + 168 >> 2];
    $6 = HEAPF32[$0 + 172 >> 2];
    $4 = HEAPF32[$0 + 176 >> 2];
    $6 = Math_fround(Math_fround(Math_fround($22 * Math_fround(Math_fround(Math_fround($8 * $5) + Math_fround($17 * $6)) + Math_fround($9 * $4))) + Math_fround(Math_fround($3 * Math_fround(Math_fround(Math_fround($13 * $5) + Math_fround($15 * $6)) + Math_fround($18 * $4))) + Math_fround($28 * Math_fround(Math_fround(Math_fround($14 * $5) + Math_fround($16 * $6)) + Math_fround($7 * $4))))) + Math_fround(Math_fround(Math_fround(Math_fround($5 * $20) + Math_fround($21 * $6)) + Math_fround($10 * $4)) + HEAPF32[$0 + 216 >> 2]));
    $4 = Math_fround($29 * Math_fround($6 - $12));
    $12 = HEAPF32[$0 + 184 >> 2];
    $24 = Math_fround($8 * $12);
    $8 = HEAPF32[$0 + 188 >> 2];
    $5 = HEAPF32[$0 + 192 >> 2];
    $22 = Math_fround(Math_fround(Math_fround($22 * Math_fround(Math_fround($24 + Math_fround($17 * $8)) + Math_fround($9 * $5))) + Math_fround(Math_fround($3 * Math_fround(Math_fround(Math_fround($13 * $12) + Math_fround($15 * $8)) + Math_fround($18 * $5))) + Math_fround($28 * Math_fround(Math_fround(Math_fround($14 * $12) + Math_fround($16 * $8)) + Math_fround($7 * $5))))) + Math_fround(Math_fround(Math_fround(Math_fround($20 * $12) + Math_fround($21 * $8)) + Math_fround($10 * $5)) + HEAPF32[$0 + 220 >> 2]));
    $3 = Math_fround(Math_fround($4 + Math_fround($27 * Math_fround($22 - $25))) + Math_fround($26 * Math_fround($23 - $19)));
    HEAPF32[$11 + 8 >> 2] = $23 + Math_fround($26 * $3);
    HEAPF32[$11 + 4 >> 2] = $22 + Math_fround($27 * $3);
    HEAPF32[$11 >> 2] = $6 + Math_fround($29 * $3);
    break label$1;
   }
   $36 = HEAPF32[$0 + 224 >> 2];
   $13 = HEAPF32[$0 + 208 >> 2];
   $14 = HEAPF32[$0 + 200 >> 2];
   $8 = HEAPF32[$0 + 204 >> 2];
   $37 = HEAPF32[$0 + 216 >> 2];
   $5 = HEAPF32[$0 + 172 >> 2];
   $15 = HEAPF32[$0 + 176 >> 2];
   $16 = HEAPF32[$0 + 168 >> 2];
   $17 = HEAPF32[$0 + 136 >> 2];
   $6 = HEAPF32[$0 + 184 >> 2];
   $18 = HEAPF32[$0 + 140 >> 2];
   $7 = HEAPF32[$0 + 188 >> 2];
   $9 = HEAPF32[$0 + 144 >> 2];
   $4 = HEAPF32[$0 + 192 >> 2];
   $20 = HEAPF32[$0 + 104 >> 2];
   $21 = HEAPF32[$0 + 108 >> 2];
   $10 = HEAPF32[$0 + 112 >> 2];
   $23 = HEAPF32[$0 + 120 >> 2];
   $24 = HEAPF32[$0 + 124 >> 2];
   $30 = HEAPF32[$0 + 128 >> 2];
   $38 = Math_fround(Math_fround($19 * Math_fround(Math_fround(Math_fround($17 * $6) + Math_fround($18 * $7)) + Math_fround($9 * $4))) + Math_fround(Math_fround($12 * Math_fround(Math_fround(Math_fround($20 * $6) + Math_fround($21 * $7)) + Math_fround($10 * $4))) + Math_fround($25 * Math_fround(Math_fround(Math_fround($23 * $6) + Math_fround($24 * $7)) + Math_fround($30 * $4)))));
   $31 = Math_fround(-HEAPF32[$0 + 152 >> 2]);
   $32 = HEAPF32[$0 + 156 >> 2];
   $33 = HEAPF32[$0 + 160 >> 2];
   $34 = Math_fround(Math_fround(Math_fround($20 * $31) - Math_fround($23 * $32)) - Math_fround($17 * $33));
   $35 = Math_fround($34 * $6);
   $6 = Math_fround(Math_fround(Math_fround($21 * $31) - Math_fround($24 * $32)) - Math_fround($18 * $33));
   $35 = Math_fround($35 + Math_fround($6 * $7));
   $7 = Math_fround(Math_fround(Math_fround($10 * $31) - Math_fround($30 * $32)) - Math_fround($9 * $33));
   $4 = Math_fround($38 + Math_fround(Math_fround($35 + Math_fround($7 * $4)) + HEAPF32[$0 + 220 >> 2]));
   HEAPF32[$11 + 4 >> 2] = $4;
   $5 = Math_fround(Math_fround(Math_fround($19 * Math_fround(Math_fround(Math_fround($17 * $16) + Math_fround($18 * $5)) + Math_fround($9 * $15))) + Math_fround(Math_fround($12 * Math_fround(Math_fround(Math_fround($20 * $16) + Math_fround($21 * $5)) + Math_fround($10 * $15))) + Math_fround($25 * Math_fround(Math_fround(Math_fround($23 * $16) + Math_fround($24 * $5)) + Math_fround($30 * $15))))) + Math_fround($37 + Math_fround(Math_fround(Math_fround($16 * $34) + Math_fround($6 * $5)) + Math_fround($7 * $15))));
   HEAPF32[$11 >> 2] = $5;
   $19 = Math_fround(Math_fround($36 + Math_fround(Math_fround(Math_fround($34 * $14) + Math_fround($6 * $8)) + Math_fround($7 * $13))) + Math_fround(Math_fround($19 * Math_fround(Math_fround(Math_fround($17 * $14) + Math_fround($18 * $8)) + Math_fround($9 * $13))) + Math_fround(Math_fround($12 * Math_fround(Math_fround(Math_fround($20 * $14) + Math_fround($21 * $8)) + Math_fround($10 * $13))) + Math_fround($25 * Math_fround(Math_fround(Math_fround($23 * $14) + Math_fround($24 * $8)) + Math_fround($30 * $13))))));
   HEAPF32[$11 + 8 >> 2] = $19;
   $3 = Math_fround(Math_fround(Math_fround($29 * Math_fround($3 - $5)) + Math_fround($27 * Math_fround($28 - $4))) + Math_fround($26 * Math_fround($22 - $19)));
  }
  HEAP32[$11 + 12 >> 2] = 0;
  $0 = HEAP32[$0 + 36 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1, $11, $3);
  global$0 = $11 + 16 | 0;
 }
 
 function btLeaveProfileZoneDefault_28_29() {
  
 }
 
 function CProfileSample__CProfileSample_28char_20const__29($0, $1) {
  FUNCTION_TABLE[HEAP32[748]]($1);
  return $0;
 }
 
 function CProfileSample___CProfileSample_28_29() {
  FUNCTION_TABLE[HEAP32[749]]();
 }
 
 function btSubsimplexConvexCast__btSubsimplexConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($0, $1, $2, $3) {
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$0 >> 2] = 16060;
  return $0;
 }
 
 function btSubsimplexConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = Math_fround(0), $53 = Math_fround(0), $54 = Math_fround(0), $55 = Math_fround(0), $56 = Math_fround(0), $57 = Math_fround(0), $58 = 0;
  $6 = global$0 - 96 | 0;
  global$0 = $6;
  btVoronoiSimplexSolver__reset_28_29(HEAP32[$0 + 4 >> 2]);
  $11 = $3 + 40 | 0;
  $40 = HEAPF32[$11 >> 2];
  $17 = $3 + 36 | 0;
  $41 = HEAPF32[$17 >> 2];
  $16 = $3 + 24 | 0;
  $42 = HEAPF32[$16 >> 2];
  $21 = $3 + 20 | 0;
  $43 = HEAPF32[$21 >> 2];
  $44 = $1 + 20 | 0;
  $22 = HEAPF32[$44 >> 2];
  $45 = $1 + 36 | 0;
  $23 = HEAPF32[$45 >> 2];
  $46 = $1 + 24 | 0;
  $24 = HEAPF32[$46 >> 2];
  $47 = $1 + 52 | 0;
  $18 = HEAPF32[$47 >> 2];
  $7 = HEAPF32[$2 + 52 >> 2];
  $48 = $3 + 52 | 0;
  $25 = HEAPF32[$48 >> 2];
  $8 = HEAPF32[$4 + 52 >> 2];
  $49 = $1 + 40 | 0;
  $26 = HEAPF32[$49 >> 2];
  $50 = $1 + 56 | 0;
  $27 = HEAPF32[$50 >> 2];
  $10 = HEAPF32[$2 + 56 >> 2];
  $51 = $3 + 56 | 0;
  $28 = HEAPF32[$51 >> 2];
  $12 = HEAPF32[$4 + 56 >> 2];
  $52 = HEAPF32[$3 + 32 >> 2];
  $53 = HEAPF32[$3 + 16 >> 2];
  $54 = HEAPF32[$3 + 8 >> 2];
  $55 = HEAPF32[$3 + 4 >> 2];
  $56 = HEAPF32[$3 >> 2];
  $29 = HEAPF32[$1 >> 2];
  $30 = HEAPF32[$1 + 16 >> 2];
  $31 = HEAPF32[$1 + 32 >> 2];
  $32 = HEAPF32[$1 + 4 >> 2];
  $33 = HEAPF32[$1 + 8 >> 2];
  $34 = HEAPF32[$1 + 48 >> 2];
  $9 = HEAPF32[$2 + 48 >> 2];
  $35 = HEAPF32[$3 + 48 >> 2];
  $13 = HEAPF32[$4 + 48 >> 2];
  $20 = HEAP32[$0 + 8 >> 2];
  HEAP32[$6 + 60 >> 2] = 0;
  $19 = Math_fround(Math_fround($9 - $34) - Math_fround($13 - $35));
  $9 = Math_fround(-$19);
  $14 = Math_fround(Math_fround($7 - $18) - Math_fround($8 - $25));
  $15 = Math_fround(Math_fround($10 - $27) - Math_fround($12 - $28));
  HEAPF32[$6 + 56 >> 2] = Math_fround(Math_fround($33 * $9) - Math_fround($24 * $14)) - Math_fround($26 * $15);
  HEAPF32[$6 + 52 >> 2] = Math_fround(Math_fround($32 * $9) - Math_fround($22 * $14)) - Math_fround($23 * $15);
  HEAPF32[$6 + 48 >> 2] = Math_fround(Math_fround($29 * $9) - Math_fround($30 * $14)) - Math_fround($31 * $15);
  FUNCTION_TABLE[HEAP32[HEAP32[$20 >> 2] + 64 >> 2]]($6 + 80 | 0, $20, $6 + 48 | 0);
  HEAP32[$6 + 76 >> 2] = 0;
  $9 = HEAPF32[$6 + 80 >> 2];
  $7 = HEAPF32[$6 + 84 >> 2];
  $8 = HEAPF32[$6 + 88 >> 2];
  HEAPF32[$6 + 72 >> 2] = Math_fround(Math_fround(Math_fround($9 * HEAPF32[$1 + 32 >> 2]) + Math_fround($7 * HEAPF32[$45 >> 2])) + Math_fround($8 * HEAPF32[$49 >> 2])) + HEAPF32[$50 >> 2];
  HEAPF32[$6 + 68 >> 2] = Math_fround(Math_fround(Math_fround($9 * HEAPF32[$1 + 16 >> 2]) + Math_fround($7 * HEAPF32[$44 >> 2])) + Math_fround($8 * HEAPF32[$46 >> 2])) + HEAPF32[$47 >> 2];
  HEAPF32[$6 + 64 >> 2] = Math_fround(Math_fround(Math_fround($9 * HEAPF32[$1 >> 2]) + Math_fround($7 * HEAPF32[$1 + 4 >> 2])) + Math_fround($8 * HEAPF32[$1 + 8 >> 2])) + HEAPF32[$1 + 48 >> 2];
  $20 = HEAP32[$0 + 12 >> 2];
  HEAP32[$6 + 28 >> 2] = 0;
  HEAPF32[$6 + 24 >> 2] = Math_fround(Math_fround($19 * HEAPF32[$3 + 8 >> 2]) + Math_fround($14 * HEAPF32[$16 >> 2])) + Math_fround($15 * HEAPF32[$11 >> 2]);
  HEAPF32[$6 + 20 >> 2] = Math_fround(Math_fround($19 * HEAPF32[$3 + 4 >> 2]) + Math_fround($14 * HEAPF32[$21 >> 2])) + Math_fround($15 * HEAPF32[$17 >> 2]);
  HEAPF32[$6 + 16 >> 2] = Math_fround(Math_fround($19 * HEAPF32[$3 >> 2]) + Math_fround($14 * HEAPF32[$3 + 16 >> 2])) + Math_fround($15 * HEAPF32[$3 + 32 >> 2]);
  FUNCTION_TABLE[HEAP32[HEAP32[$20 >> 2] + 64 >> 2]]($6 + 32 | 0, $20, $6 + 16 | 0);
  HEAP32[$6 + 60 >> 2] = 0;
  $9 = HEAPF32[$6 + 32 >> 2];
  $7 = HEAPF32[$6 + 36 >> 2];
  $8 = HEAPF32[$6 + 40 >> 2];
  $10 = Math_fround(Math_fround(Math_fround(Math_fround($9 * HEAPF32[$3 + 32 >> 2]) + Math_fround($7 * HEAPF32[$17 >> 2])) + Math_fround($8 * HEAPF32[$11 >> 2])) + HEAPF32[$51 >> 2]);
  HEAPF32[$6 + 56 >> 2] = $10;
  $12 = Math_fround(Math_fround(Math_fround(Math_fround($9 * HEAPF32[$3 >> 2]) + Math_fround($7 * HEAPF32[$3 + 4 >> 2])) + Math_fround($8 * HEAPF32[$3 + 8 >> 2])) + HEAPF32[$3 + 48 >> 2]);
  HEAPF32[$6 + 48 >> 2] = $12;
  $9 = Math_fround(Math_fround(Math_fround(Math_fround($9 * HEAPF32[$3 + 16 >> 2]) + Math_fround($7 * HEAPF32[$21 >> 2])) + Math_fround($8 * HEAPF32[$16 >> 2])) + HEAPF32[$48 >> 2]);
  HEAPF32[$6 + 52 >> 2] = $9;
  HEAP32[$6 + 92 >> 2] = 0;
  $7 = Math_fround(HEAPF32[$6 + 68 >> 2] - $9);
  HEAPF32[$6 + 84 >> 2] = $7;
  $8 = Math_fround(HEAPF32[$6 + 64 >> 2] - $12);
  HEAPF32[$6 + 80 >> 2] = $8;
  $10 = Math_fround(HEAPF32[$6 + 72 >> 2] - $10);
  HEAPF32[$6 + 88 >> 2] = $10;
  $9 = Math_fround(0.0);
  label$1 : {
   label$2 : {
    if (!(Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($7 * $7)) + Math_fround($10 * $10)) > Math_fround(9.999999747378752e-05))) {
     break label$2
    }
    $11 = -33;
    while (1) {
     $17 = $11 + 1 | 0;
     if ($17 >>> 0 < $11 >>> 0) {
      break label$2
     }
     $11 = HEAP32[$0 + 8 >> 2];
     $16 = 0;
     HEAP32[$6 + 12 >> 2] = 0;
     $7 = Math_fround(-HEAPF32[$6 + 80 >> 2]);
     $8 = HEAPF32[$6 + 84 >> 2];
     $10 = HEAPF32[$6 + 88 >> 2];
     HEAPF32[$6 + 8 >> 2] = Math_fround(Math_fround($33 * $7) - Math_fround($24 * $8)) - Math_fround($26 * $10);
     HEAPF32[$6 + 4 >> 2] = Math_fround(Math_fround($32 * $7) - Math_fround($22 * $8)) - Math_fround($23 * $10);
     HEAPF32[$6 >> 2] = Math_fround(Math_fround($29 * $7) - Math_fround($30 * $8)) - Math_fround($31 * $10);
     FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 64 >> 2]]($6 + 16 | 0, $11, $6);
     HEAP32[$6 + 76 >> 2] = 0;
     $7 = HEAPF32[$6 + 16 >> 2];
     $8 = HEAPF32[$6 + 20 >> 2];
     $10 = HEAPF32[$6 + 24 >> 2];
     HEAPF32[$6 + 72 >> 2] = $27 + Math_fround(Math_fround(Math_fround($31 * $7) + Math_fround($23 * $8)) + Math_fround($26 * $10));
     HEAPF32[$6 + 68 >> 2] = $18 + Math_fround(Math_fround(Math_fround($30 * $7) + Math_fround($22 * $8)) + Math_fround($24 * $10));
     HEAPF32[$6 + 64 >> 2] = $34 + Math_fround(Math_fround(Math_fround($29 * $7) + Math_fround($32 * $8)) + Math_fround($33 * $10));
     $11 = HEAP32[$0 + 12 >> 2];
     HEAP32[$6 + 12 >> 2] = 0;
     $7 = HEAPF32[$6 + 80 >> 2];
     $8 = HEAPF32[$6 + 84 >> 2];
     $10 = HEAPF32[$6 + 88 >> 2];
     HEAPF32[$6 + 8 >> 2] = Math_fround(Math_fround($54 * $7) + Math_fround($42 * $8)) + Math_fround($40 * $10);
     HEAPF32[$6 + 4 >> 2] = Math_fround(Math_fround($55 * $7) + Math_fround($43 * $8)) + Math_fround($41 * $10);
     HEAPF32[$6 >> 2] = Math_fround(Math_fround($56 * $7) + Math_fround($53 * $8)) + Math_fround($52 * $10);
     FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 64 >> 2]]($6 + 16 | 0, $11, $6);
     HEAP32[$6 + 60 >> 2] = 0;
     HEAP32[$6 + 44 >> 2] = 0;
     $7 = HEAPF32[$6 + 16 >> 2];
     $8 = HEAPF32[$6 + 20 >> 2];
     $10 = HEAPF32[$6 + 24 >> 2];
     $12 = Math_fround($28 + Math_fround(Math_fround(Math_fround($52 * $7) + Math_fround($41 * $8)) + Math_fround($40 * $10)));
     HEAPF32[$6 + 56 >> 2] = $12;
     $12 = Math_fround(HEAPF32[$6 + 72 >> 2] - $12);
     HEAPF32[$6 + 40 >> 2] = $12;
     $13 = Math_fround($25 + Math_fround(Math_fround(Math_fround($53 * $7) + Math_fround($43 * $8)) + Math_fround($42 * $10)));
     HEAPF32[$6 + 52 >> 2] = $13;
     $13 = Math_fround(HEAPF32[$6 + 68 >> 2] - $13);
     HEAPF32[$6 + 36 >> 2] = $13;
     $7 = Math_fround($35 + Math_fround(Math_fround(Math_fround($56 * $7) + Math_fround($55 * $8)) + Math_fround($54 * $10)));
     HEAPF32[$6 + 48 >> 2] = $7;
     $7 = Math_fround(HEAPF32[$6 + 64 >> 2] - $7);
     HEAPF32[$6 + 32 >> 2] = $7;
     if ($9 > Math_fround(1.0)) {
      break label$1
     }
     $8 = HEAPF32[$6 + 80 >> 2];
     $10 = HEAPF32[$6 + 84 >> 2];
     $36 = HEAPF32[$6 + 88 >> 2];
     $57 = Math_fround(Math_fround(Math_fround($7 * $8) + Math_fround($13 * $10)) + Math_fround($12 * $36));
     if (!!($57 > Math_fround(0.0))) {
      $18 = Math_fround(Math_fround(Math_fround($19 * $8) + Math_fround($14 * $10)) + Math_fround($15 * $36));
      if ($18 >= Math_fround(-1.4210854715202004e-14)) {
       break label$1
      }
      HEAP32[$6 + 44 >> 2] = 0;
      HEAPF32[$6 + 40 >> 2] = $12;
      HEAPF32[$6 + 36 >> 2] = $13;
      HEAPF32[$6 + 32 >> 2] = $7;
      $9 = Math_fround($9 - Math_fround($57 / $18));
      $7 = Math_fround(Math_fround(1.0) - $9);
      $28 = Math_fround(Math_fround($7 * HEAPF32[$3 + 56 >> 2]) + Math_fround($9 * HEAPF32[$4 + 56 >> 2]));
      $25 = Math_fround(Math_fround($7 * HEAPF32[$3 + 52 >> 2]) + Math_fround($9 * HEAPF32[$4 + 52 >> 2]));
      $35 = Math_fround(Math_fround($7 * HEAPF32[$3 + 48 >> 2]) + Math_fround($9 * HEAPF32[$4 + 48 >> 2]));
      $27 = Math_fround(Math_fround($7 * HEAPF32[$1 + 56 >> 2]) + Math_fround($9 * HEAPF32[$2 + 56 >> 2]));
      $18 = Math_fround(Math_fround($7 * HEAPF32[$1 + 52 >> 2]) + Math_fround($9 * HEAPF32[$2 + 52 >> 2]));
      $34 = Math_fround(Math_fround($7 * HEAPF32[$1 + 48 >> 2]) + Math_fround($9 * HEAPF32[$2 + 48 >> 2]));
      $58 = HEAP32[$6 + 92 >> 2];
      $37 = $10;
      $38 = $36;
      $39 = $8;
     }
     if (!btVoronoiSimplexSolver__inSimplex_28btVector3_20const__29(HEAP32[$0 + 4 >> 2], $6 + 32 | 0)) {
      btVoronoiSimplexSolver__addVertex_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29(HEAP32[$0 + 4 >> 2], $6 + 32 | 0, $6 - -64 | 0, $6 + 48 | 0)
     }
     if (!btVoronoiSimplexSolver__closest_28btVector3__29(HEAP32[$0 + 4 >> 2], $6 + 80 | 0)) {
      break label$2
     }
     $11 = $17;
     $7 = HEAPF32[$6 + 80 >> 2];
     $8 = Math_fround($7 * $7);
     $7 = HEAPF32[$6 + 84 >> 2];
     $8 = Math_fround($8 + Math_fround($7 * $7));
     $7 = HEAPF32[$6 + 88 >> 2];
     if (Math_fround($8 + Math_fround($7 * $7)) > Math_fround(9.999999747378752e-05)) {
      continue
     }
     break;
    };
   }
   HEAPF32[$5 + 164 >> 2] = $9;
   $9 = Math_fround(Math_fround(Math_fround($39 * $39) + Math_fround($37 * $37)) + Math_fround($38 * $38));
   label$6 : {
    if (!!($9 >= Math_fround(1.4210854715202004e-14))) {
     HEAP32[$5 + 144 >> 2] = $58;
     $8 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($9)));
     $9 = Math_fround($38 * $8);
     HEAPF32[$5 + 140 >> 2] = $9;
     $7 = Math_fround($37 * $8);
     HEAPF32[$5 + 136 >> 2] = $7;
     $8 = Math_fround($39 * $8);
     HEAPF32[$5 + 132 >> 2] = $8;
     break label$6;
    }
    HEAP32[$5 + 132 >> 2] = 0;
    HEAP32[$5 + 136 >> 2] = 0;
    $1 = $5 + 140 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $9 = Math_fround(0.0);
    $7 = Math_fround(0.0);
    $8 = Math_fround(0.0);
   }
   $16 = 0;
   if (Math_fround(Math_fround(Math_fround($19 * $8) + Math_fround($14 * $7)) + Math_fround($15 * $9)) >= Math_fround(-HEAPF32[$5 + 172 >> 2])) {
    break label$1
   }
   btVoronoiSimplexSolver__compute_points_28btVector3__2c_20btVector3__29(HEAP32[$0 + 4 >> 2], $6 + 16 | 0, $6);
   $0 = $6 + 8 | 0;
   $3 = HEAP32[$0 >> 2];
   $1 = HEAP32[$0 + 4 >> 2];
   $2 = $5 + 156 | 0;
   HEAP32[$2 >> 2] = $3;
   HEAP32[$2 + 4 >> 2] = $1;
   $2 = HEAP32[$6 + 4 >> 2];
   HEAP32[$5 + 148 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$5 + 152 >> 2] = $2;
   $16 = 1;
  }
  global$0 = $6 + 96 | 0;
  return $16 | 0;
 }
 
 function btConvexConcaveCollisionAlgorithm__btConvexConcaveCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1);
  HEAP32[$0 >> 2] = 16120;
  HEAP32[$0 + 8 >> 2] = 16148;
  HEAP32[$0 + 60 >> 2] = 0;
  $5 = $4 ? $2 : $3;
  HEAP32[$0 + 48 >> 2] = $5;
  $3 = $4 ? $3 : $2;
  HEAP32[$0 + 44 >> 2] = $3;
  $6 = $0 + 56 | 0;
  $2 = HEAP32[$1 >> 2];
  HEAP32[$6 >> 2] = $2;
  $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, HEAP32[$3 + 8 >> 2], HEAP32[$5 + 8 >> 2]) | 0;
  HEAP32[$0 + 72 >> 2] = $2;
  $3 = HEAP32[$6 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 20 >> 2]]($3, $2);
  HEAP8[$0 + 76 | 0] = $4;
 }
 
 function btConvexConcaveCollisionAlgorithm___btConvexConcaveCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  HEAP32[$0 + 8 >> 2] = 16148;
  HEAP32[$0 >> 2] = 16120;
  $1 = $0 + 56 | 0;
  $2 = HEAP32[$1 >> 2];
  $3 = $0 + 72 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, HEAP32[$3 >> 2]);
  $1 = HEAP32[$1 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, HEAP32[$3 >> 2]);
  return $0 | 0;
 }
 
 function btConvexConcaveCollisionAlgorithm___btConvexConcaveCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  HEAP32[$0 + 8 >> 2] = 16148;
  HEAP32[$0 >> 2] = 16120;
  $1 = $0 + 56 | 0;
  $2 = HEAP32[$1 >> 2];
  $3 = $0 + 72 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, HEAP32[$3 >> 2]);
  $1 = HEAP32[$1 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, HEAP32[$3 >> 2]);
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btConvexConcaveCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = HEAP32[$0 + 72 >> 2];
  if ($2) {
   $3 = HEAP32[$1 + 4 >> 2];
   label$2 : {
    if (($3 | 0) != HEAP32[$1 + 8 >> 2]) {
     break label$2
    }
    $4 = $3 ? $3 << 1 : 1;
    if (($3 | 0) >= ($4 | 0)) {
     break label$2
    }
    label$3 : {
     if (!$4) {
      break label$3
     }
     $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    if (($3 | 0) >= 1) {
     $2 = 0;
     $5 = $3;
     while (1) {
      HEAP32[$2 + $6 >> 2] = HEAP32[$2 + HEAP32[$1 + 12 >> 2] >> 2];
      $2 = $2 + 4 | 0;
      $5 = $5 + -1 | 0;
      if ($5) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$1 + 12 >> 2];
    if ($2) {
     if (HEAPU8[$1 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($2);
      $3 = HEAP32[$1 + 4 >> 2];
     }
     HEAP32[$1 + 12 >> 2] = 0;
    }
    HEAP32[$1 + 12 >> 2] = $6;
    HEAP8[$1 + 16 | 0] = 1;
    HEAP32[$1 + 8 >> 2] = $4;
    $2 = HEAP32[$0 + 72 >> 2];
   }
   HEAP32[$1 + 4 >> 2] = $3 + 1;
   HEAP32[HEAP32[$1 + 12 >> 2] + ($3 << 2) >> 2] = $2;
  }
 }
 
 function btConvexTriangleCallback___btConvexTriangleCallback_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 16148;
  $1 = HEAP32[$0 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1, HEAP32[$0 + 64 >> 2]);
  $1 = HEAP32[$0 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, HEAP32[$0 + 64 >> 2]);
  return $0 | 0;
 }
 
 function btConvexTriangleCallback___btConvexTriangleCallback_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 16148;
  $1 = HEAP32[$0 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1, HEAP32[$0 + 64 >> 2]);
  $1 = HEAP32[$0 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, HEAP32[$0 + 64 >> 2]);
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btConvexTriangleCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0;
  $5 = global$0 - 144 | 0;
  global$0 = $5;
  CProfileSample__CProfileSample_28char_20const__29($5 + 136 | 0, 16160);
  $8 = HEAPF32[$1 >> 2];
  $9 = HEAPF32[$1 + 16 >> 2];
  $11 = $8 < $9 ? $8 : $9;
  $10 = HEAPF32[$1 + 32 >> 2];
  label$1 : {
   if (($11 < $10 ? $11 : $10) > HEAPF32[$0 + 20 >> 2]) {
    break label$1
   }
   $6 = ($8 > $9 ^ 1) << 4;
   if (HEAPF32[(HEAPF32[$1 + $6 >> 2] > $10 ? $6 : 32) + $1 >> 2] < HEAPF32[$0 + 4 >> 2]) {
    break label$1
   }
   $8 = HEAPF32[$1 + 8 >> 2];
   $6 = $1 + 24 | 0;
   $9 = HEAPF32[$6 >> 2];
   $11 = $8 < $9 ? $8 : $9;
   $4 = $1 + 40 | 0;
   $10 = HEAPF32[$4 >> 2];
   if (($11 < $10 ? $11 : $10) > HEAPF32[$0 + 28 >> 2]) {
    break label$1
   }
   $6 = $8 > $9 ? $1 + 8 | 0 : $6;
   if (HEAPF32[(HEAPF32[$6 >> 2] > $10 ? $6 : $4) >> 2] < HEAPF32[$0 + 12 >> 2]) {
    break label$1
   }
   $8 = HEAPF32[$1 + 4 >> 2];
   $6 = $1 + 20 | 0;
   $9 = HEAPF32[$6 >> 2];
   $11 = $8 < $9 ? $8 : $9;
   $4 = $1 + 36 | 0;
   $10 = HEAPF32[$4 >> 2];
   if (($11 < $10 ? $11 : $10) > HEAPF32[$0 + 24 >> 2]) {
    break label$1
   }
   $6 = $8 > $9 ? $1 + 4 | 0 : $6;
   if (HEAPF32[(HEAPF32[$6 >> 2] > $10 ? $6 : $4) >> 2] < HEAPF32[$0 + 8 >> 2]) {
    break label$1
   }
   if (HEAP32[HEAP32[HEAP32[$0 + 36 >> 2] + 4 >> 2] + 4 >> 2] > 19) {
    break label$1
   }
   $6 = HEAP32[$0 + 48 >> 2];
   $13 = btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($5 + 24 | 0);
   $4 = $1 + 8 | 0;
   $12 = HEAP32[$4 >> 2];
   $4 = HEAP32[$4 + 4 >> 2];
   $7 = $5 + 92 | 0;
   HEAP32[$7 >> 2] = $12;
   HEAP32[$7 + 4 >> 2] = $4;
   $7 = HEAP32[$1 + 20 >> 2];
   $4 = $5 + 100 | 0;
   HEAP32[$4 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$4 + 4 >> 2] = $7;
   $4 = $1 + 24 | 0;
   $12 = HEAP32[$4 >> 2];
   $4 = HEAP32[$4 + 4 >> 2];
   $7 = $5 + 108 | 0;
   HEAP32[$7 >> 2] = $12;
   HEAP32[$7 + 4 >> 2] = $4;
   $7 = HEAP32[$1 + 36 >> 2];
   $4 = $5 + 116 | 0;
   HEAP32[$4 >> 2] = HEAP32[$1 + 32 >> 2];
   HEAP32[$4 + 4 >> 2] = $7;
   $4 = $1 + 40 | 0;
   $12 = HEAP32[$4 >> 2];
   $4 = HEAP32[$4 + 4 >> 2];
   $7 = $5 + 124 | 0;
   HEAP32[$7 >> 2] = $12;
   HEAP32[$7 + 4 >> 2] = $4;
   HEAP32[$5 + 24 >> 2] = 16352;
   $7 = HEAP32[$1 + 4 >> 2];
   HEAP32[$5 + 84 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$5 + 88 >> 2] = $7;
   HEAP32[$5 + 72 >> 2] = HEAP32[$0 + 56 >> 2];
   HEAP32[$5 + 28 >> 2] = 1;
   HEAP32[$5 + 20 >> 2] = $3;
   HEAP32[$5 + 16 >> 2] = $2;
   $1 = HEAP32[$0 + 40 >> 2];
   HEAP32[$5 >> 2] = $1;
   $4 = HEAP32[$1 + 8 >> 2];
   HEAP32[$5 + 12 >> 2] = HEAP32[$1 + 12 >> 2];
   HEAP32[$5 + 8 >> 2] = $4;
   $8 = HEAPF32[HEAP32[$0 + 44 >> 2] + 32 >> 2];
   HEAP32[$5 + 4 >> 2] = $5 + 24;
   $1 = HEAP32[$0 + 36 >> 2];
   label$2 : {
    if (!!($8 > Math_fround(0.0))) {
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, $1, $5, 0, 2) | 0;
     break label$2;
    }
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, $1, $5, HEAP32[$0 + 64 >> 2], 1) | 0;
   }
   $4 = HEAP32[$0 + 44 >> 2];
   $7 = HEAP32[$4 + 8 >> 2];
   label$4 : {
    if (HEAP32[$7 + 8 >> 2] == HEAP32[HEAP32[$0 + 40 >> 2] + 8 >> 2]) {
     HEAP32[$4 + 8 >> 2] = $5;
     FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $2, $3);
     break label$4;
    }
    $7 = HEAP32[$4 + 12 >> 2];
    HEAP32[$4 + 12 >> 2] = $5;
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $2, $3);
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, HEAP32[$0 + 36 >> 2], $5, HEAP32[$0 + 52 >> 2], HEAP32[$0 + 44 >> 2]);
   $2 = HEAP32[$0 + 44 >> 2];
   HEAP32[$2 + (HEAP32[HEAP32[$2 + 8 >> 2] + 8 >> 2] == HEAP32[HEAP32[$0 + 40 >> 2] + 8 >> 2] ? 8 : 12) >> 2] = $7;
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 60 >> 2]]($6, $1);
   btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($13);
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $5 + 144 | 0;
 }
 
 function btConvexTriangleCallback__setTimeStepAndCounters_28float_2c_20btDispatcherInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0);
  $6 = global$0 + -64 | 0;
  global$0 = $6;
  HEAPF32[$0 + 56 >> 2] = $1;
  HEAP32[$0 + 52 >> 2] = $2;
  HEAP32[$0 + 40 >> 2] = $4;
  HEAP32[$0 + 36 >> 2] = $3;
  HEAP32[$0 + 44 >> 2] = $5;
  $4 = HEAP32[$4 + 12 >> 2];
  $17 = HEAPF32[$4 + 52 >> 2];
  $18 = HEAPF32[$4 + 56 >> 2];
  $2 = HEAP32[$3 + 12 >> 2];
  $19 = HEAPF32[$2 + 52 >> 2];
  $20 = HEAPF32[$2 + 56 >> 2];
  $7 = HEAPF32[$4 + 20 >> 2];
  $8 = HEAPF32[$4 + 36 >> 2];
  $21 = HEAPF32[$2 + 20 >> 2];
  $22 = HEAPF32[$2 + 36 >> 2];
  $23 = HEAPF32[$2 + 24 >> 2];
  $9 = HEAPF32[$4 + 24 >> 2];
  $24 = HEAPF32[$2 + 40 >> 2];
  $10 = HEAPF32[$4 + 40 >> 2];
  $25 = HEAPF32[$2 + 32 >> 2];
  $11 = HEAPF32[$4 + 32 >> 2];
  $26 = HEAPF32[$2 >> 2];
  $12 = HEAPF32[$4 >> 2];
  $27 = HEAPF32[$2 + 16 >> 2];
  $13 = HEAPF32[$4 + 16 >> 2];
  $14 = HEAPF32[$4 + 48 >> 2];
  $28 = HEAPF32[$2 + 48 >> 2];
  $15 = HEAPF32[$4 + 4 >> 2];
  $29 = HEAPF32[$2 + 4 >> 2];
  $30 = HEAPF32[$2 + 8 >> 2];
  $16 = HEAPF32[$4 + 8 >> 2];
  HEAP32[$6 + 60 >> 2] = 0;
  HEAP32[$6 + 44 >> 2] = 0;
  HEAP32[$6 + 28 >> 2] = 0;
  HEAPF32[$6 + 40 >> 2] = Math_fround(Math_fround($16 * $30) + Math_fround($9 * $23)) + Math_fround($10 * $24);
  HEAPF32[$6 + 36 >> 2] = Math_fround(Math_fround($16 * $29) + Math_fround($9 * $21)) + Math_fround($10 * $22);
  HEAPF32[$6 + 24 >> 2] = Math_fround(Math_fround($15 * $30) + Math_fround($7 * $23)) + Math_fround($8 * $24);
  HEAPF32[$6 + 20 >> 2] = Math_fround(Math_fround($15 * $29) + Math_fround($7 * $21)) + Math_fround($8 * $22);
  $14 = Math_fround(-$14);
  HEAPF32[$6 + 56 >> 2] = Math_fround(Math_fround(Math_fround($16 * $14) - Math_fround($9 * $17)) - Math_fround($10 * $18)) + Math_fround(Math_fround(Math_fround($16 * $28) + Math_fround($9 * $19)) + Math_fround($10 * $20));
  HEAPF32[$6 + 52 >> 2] = Math_fround(Math_fround(Math_fround($15 * $14) - Math_fround($7 * $17)) - Math_fround($8 * $18)) + Math_fround(Math_fround(Math_fround($15 * $28) + Math_fround($7 * $19)) + Math_fround($8 * $20));
  HEAP32[$6 + 12 >> 2] = 0;
  HEAPF32[$6 >> 2] = Math_fround(Math_fround($12 * $26) + Math_fround($13 * $27)) + Math_fround($11 * $25);
  HEAPF32[$6 + 32 >> 2] = Math_fround(Math_fround($16 * $26) + Math_fround($9 * $27)) + Math_fround($10 * $25);
  HEAPF32[$6 + 16 >> 2] = Math_fround(Math_fround($15 * $26) + Math_fround($7 * $27)) + Math_fround($8 * $25);
  HEAPF32[$6 + 8 >> 2] = Math_fround(Math_fround($12 * $30) + Math_fround($13 * $23)) + Math_fround($11 * $24);
  HEAPF32[$6 + 4 >> 2] = Math_fround(Math_fround($12 * $29) + Math_fround($13 * $21)) + Math_fround($11 * $22);
  HEAPF32[$6 + 48 >> 2] = Math_fround(Math_fround(Math_fround($12 * $14) - Math_fround($13 * $17)) - Math_fround($11 * $18)) + Math_fround(Math_fround(Math_fround($12 * $28) + Math_fround($13 * $19)) + Math_fround($11 * $20));
  $4 = HEAP32[$3 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $6, $0 + 4 | 0, $0 + 20 | 0);
  $7 = Math_fround(HEAPF32[$5 + 32 >> 2] + $1);
  HEAPF32[$0 + 20 >> 2] = $7 + HEAPF32[$0 + 20 >> 2];
  $4 = $0 + 24 | 0;
  HEAPF32[$4 >> 2] = $7 + HEAPF32[$4 >> 2];
  $4 = $0 + 28 | 0;
  HEAPF32[$4 >> 2] = $7 + HEAPF32[$4 >> 2];
  HEAPF32[$0 + 4 >> 2] = HEAPF32[$0 + 4 >> 2] - $7;
  $4 = $0 + 8 | 0;
  HEAPF32[$4 >> 2] = HEAPF32[$4 >> 2] - $7;
  $0 = $0 + 12 | 0;
  HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] - $7;
  global$0 = $6 - -64 | 0;
 }
 
 function btConvexConcaveCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0);
  $7 = global$0 - 16 | 0;
  global$0 = $7;
  CProfileSample__CProfileSample_28char_20const__29($7 + 8 | 0, 16202);
  $6 = HEAPU8[$0 + 76 | 0];
  $8 = $6 ? $1 : $2;
  $5 = HEAP32[$8 + 4 >> 2];
  label$1 : {
   if (HEAP32[$5 + 4 >> 2] + -21 >>> 0 > 8) {
    break label$1
   }
   $2 = $6 ? $2 : $1;
   if (HEAP32[HEAP32[$2 + 4 >> 2] + 4 >> 2] > 19) {
    break label$1
   }
   $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 48 >> 2]]($5));
   $1 = $0 + 72 | 0;
   HEAP32[$4 + 4 >> 2] = HEAP32[$1 >> 2];
   $6 = $0 + 8 | 0;
   btConvexTriangleCallback__setTimeStepAndCounters_28float_2c_20btDispatcherInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btManifoldResult__29($6, $9, $3, $2, $8, $4);
   $1 = HEAP32[$1 >> 2];
   HEAP32[$1 + 776 >> 2] = HEAP32[$8 + 8 >> 2];
   HEAP32[$1 + 772 >> 2] = HEAP32[$2 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 64 >> 2]]($5, $6, $0 + 12 | 0, $0 + 28 | 0);
   $2 = HEAP32[$4 + 4 >> 2];
   if (HEAP32[$2 + 780 >> 2]) {
    $1 = HEAP32[$2 + 772 >> 2];
    $3 = $1;
    $5 = HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2];
    $4 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
    $1 = ($4 | 0) == ($1 | 0);
    btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($2, ($1 ? $3 : $5) + 4 | 0, ($1 ? $5 : $4) + 4 | 0);
   }
   $0 = $0 + 44 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $7 + 16 | 0;
 }
 
 function btConvexConcaveCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0), $53 = Math_fround(0), $54 = Math_fround(0), $55 = Math_fround(0), $56 = Math_fround(0), $57 = Math_fround(0), $58 = Math_fround(0), $59 = Math_fround(0), $60 = Math_fround(0), $61 = Math_fround(0);
  $4 = global$0 - 240 | 0;
  global$0 = $4;
  $56 = Math_fround(1.0);
  $3 = HEAPU8[$0 + 76 | 0];
  $0 = $3 ? $2 : $1;
  $5 = Math_fround(HEAPF32[$0 + 116 >> 2] - HEAPF32[$0 + 52 >> 2]);
  $6 = Math_fround($5 * $5);
  $5 = Math_fround(HEAPF32[$0 + 120 >> 2] - HEAPF32[$0 + 56 >> 2]);
  $6 = Math_fround($6 + Math_fround($5 * $5));
  $5 = Math_fround(HEAPF32[$0 + 124 >> 2] - HEAPF32[$0 + 60 >> 2]);
  $6 = Math_fround($6 + Math_fround($5 * $5));
  $5 = HEAPF32[$0 + 276 >> 2];
  label$1 : {
   if ($6 < Math_fround($5 * $5)) {
    break label$1
   }
   $2 = $3 ? $1 : $2;
   $1 = HEAP32[$2 + 192 >> 2];
   if (HEAP32[$1 + 4 >> 2] + -21 >>> 0 > 8) {
    break label$1
   }
   $18 = HEAPF32[$0 + 92 >> 2];
   $19 = HEAPF32[$0 + 76 >> 2];
   $24 = HEAPF32[$0 + 108 >> 2];
   $20 = HEAPF32[$0 + 88 >> 2];
   $21 = HEAPF32[$0 + 72 >> 2];
   $25 = HEAPF32[$0 + 104 >> 2];
   $26 = HEAPF32[$0 + 100 >> 2];
   $27 = HEAPF32[$0 + 84 >> 2];
   $28 = HEAPF32[$0 + 68 >> 2];
   $5 = HEAPF32[$2 + 36 >> 2];
   $11 = HEAPF32[$2 + 20 >> 2];
   $7 = HEAPF32[$2 + 4 >> 2];
   $29 = HEAPF32[$0 + 28 >> 2];
   $30 = HEAPF32[$0 + 12 >> 2];
   $42 = HEAPF32[$0 + 44 >> 2];
   $31 = HEAPF32[$0 + 24 >> 2];
   $32 = HEAPF32[$0 + 8 >> 2];
   $43 = HEAPF32[$0 + 40 >> 2];
   $44 = HEAPF32[$0 + 36 >> 2];
   $33 = HEAPF32[$0 + 20 >> 2];
   $34 = HEAPF32[$0 + 4 >> 2];
   $6 = HEAPF32[$2 + 12 >> 2];
   $37 = HEAPF32[$0 + 116 >> 2];
   $8 = HEAPF32[$2 + 28 >> 2];
   $38 = HEAPF32[$0 + 120 >> 2];
   $12 = HEAPF32[$2 + 44 >> 2];
   $22 = HEAPF32[$0 + 124 >> 2];
   $45 = Math_fround(Math_fround(Math_fround($6 * $37) + Math_fround($8 * $38)) + Math_fround($12 * $22));
   $9 = HEAPF32[$2 + 8 >> 2];
   $39 = Math_fround(-HEAPF32[$2 + 52 >> 2]);
   $10 = HEAPF32[$2 + 24 >> 2];
   $16 = HEAPF32[$2 + 56 >> 2];
   $13 = HEAPF32[$2 + 40 >> 2];
   $35 = HEAPF32[$2 + 60 >> 2];
   $23 = Math_fround(Math_fround(Math_fround($9 * $39) - Math_fround($10 * $16)) - Math_fround($13 * $35));
   $36 = Math_fround($23 + Math_fround(Math_fround(Math_fround($9 * $37) + Math_fround($10 * $38)) + Math_fround($13 * $22)));
   $17 = HEAPF32[$0 + 56 >> 2];
   $14 = HEAPF32[$0 + 52 >> 2];
   $15 = HEAPF32[$0 + 60 >> 2];
   HEAP32[$4 + 236 >> 2] = 0;
   $40 = Math_fround(Math_fround(Math_fround($6 * $39) - Math_fround($8 * $16)) - Math_fround($12 * $35));
   $41 = Math_fround($40 + Math_fround(Math_fround(Math_fround($6 * $14) + Math_fround($8 * $17)) + Math_fround($12 * $15)));
   HEAPF32[$4 + 232 >> 2] = $41;
   $23 = Math_fround($23 + Math_fround(Math_fround(Math_fround($9 * $14) + Math_fround($10 * $17)) + Math_fround($13 * $15)));
   HEAPF32[$4 + 228 >> 2] = $23;
   $16 = Math_fround(Math_fround(Math_fround($7 * $39) - Math_fround($11 * $16)) - Math_fround($5 * $35));
   $17 = Math_fround($16 + Math_fround(Math_fround(Math_fround($7 * $14) + Math_fround($11 * $17)) + Math_fround($5 * $15)));
   HEAPF32[$4 + 224 >> 2] = $17;
   $39 = $17;
   $15 = Math_fround($16 + Math_fround(Math_fround(Math_fround($7 * $37) + Math_fround($11 * $38)) + Math_fround($5 * $22)));
   if (!!($15 < $17)) {
    HEAPF32[$4 + 224 >> 2] = $15;
    $39 = $15;
   }
   $14 = Math_fround($40 + $45);
   $37 = $23;
   if (!!($36 < $23)) {
    HEAPF32[$4 + 228 >> 2] = $36;
    $37 = $36;
   }
   $38 = $41;
   if (!!($14 < $41)) {
    HEAPF32[$4 + 232 >> 2] = $14;
    $38 = $14;
   }
   $22 = Math_fround($8 * $18);
   $16 = Math_fround($6 * $19);
   $35 = Math_fround($8 * $20);
   $45 = Math_fround($6 * $21);
   $40 = Math_fround($8 * $27);
   $46 = Math_fround($6 * $28);
   $47 = Math_fround($10 * $18);
   $48 = Math_fround($9 * $19);
   $49 = Math_fround($10 * $20);
   $50 = Math_fround($9 * $21);
   $51 = Math_fround($10 * $27);
   $52 = Math_fround($9 * $28);
   $18 = Math_fround($11 * $18);
   $19 = Math_fround($7 * $19);
   $20 = Math_fround($11 * $20);
   $21 = Math_fround($7 * $21);
   $27 = Math_fround($11 * $27);
   $28 = Math_fround($7 * $28);
   $53 = Math_fround($8 * $29);
   $54 = Math_fround($6 * $30);
   $55 = Math_fround($8 * $31);
   $57 = Math_fround($6 * $32);
   $8 = Math_fround($8 * $33);
   $6 = Math_fround($6 * $34);
   $58 = Math_fround($10 * $29);
   $59 = Math_fround($9 * $30);
   $60 = Math_fround($10 * $31);
   $61 = Math_fround($9 * $32);
   $10 = Math_fround($10 * $33);
   $9 = Math_fround($9 * $34);
   $29 = Math_fround($11 * $29);
   $30 = Math_fround($7 * $30);
   $31 = Math_fround($11 * $31);
   $32 = Math_fround($7 * $32);
   $33 = Math_fround($11 * $33);
   $7 = Math_fround($7 * $34);
   HEAP32[$4 + 220 >> 2] = 0;
   HEAPF32[$4 + 216 >> 2] = $41;
   HEAPF32[$4 + 212 >> 2] = $23;
   HEAPF32[$4 + 208 >> 2] = $17;
   $11 = $17;
   if (!!($11 < $15)) {
    HEAPF32[$4 + 208 >> 2] = $15;
    $11 = $15;
   }
   $34 = Math_fround($16 + $22);
   $22 = Math_fround($12 * $24);
   $16 = Math_fround($45 + $35);
   $35 = Math_fround($12 * $25);
   $45 = Math_fround($12 * $26);
   $40 = Math_fround($46 + $40);
   $46 = Math_fround($48 + $47);
   $47 = Math_fround($13 * $24);
   $48 = Math_fround($50 + $49);
   $49 = Math_fround($13 * $25);
   $50 = Math_fround($13 * $26);
   $51 = Math_fround($52 + $51);
   $24 = Math_fround($5 * $24);
   $18 = Math_fround($19 + $18);
   $19 = Math_fround($5 * $25);
   $20 = Math_fround($21 + $20);
   $21 = Math_fround($5 * $26);
   $25 = Math_fround($28 + $27);
   $26 = Math_fround($54 + $53);
   $27 = Math_fround($12 * $42);
   $28 = Math_fround($57 + $55);
   $52 = Math_fround($12 * $43);
   $12 = Math_fround($12 * $44);
   $6 = Math_fround($6 + $8);
   $8 = Math_fround($59 + $58);
   $53 = Math_fround($13 * $42);
   $54 = Math_fround($61 + $60);
   $55 = Math_fround($13 * $43);
   $13 = Math_fround($13 * $44);
   $9 = Math_fround($9 + $10);
   $10 = Math_fround($5 * $42);
   $29 = Math_fround($30 + $29);
   $30 = Math_fround($5 * $43);
   $42 = Math_fround($32 + $31);
   $5 = Math_fround($5 * $44);
   $31 = Math_fround($7 + $33);
   $7 = $23;
   if (!!($7 < $36)) {
    HEAPF32[$4 + 212 >> 2] = $36;
    $7 = $36;
   }
   $32 = Math_fround($34 + $22);
   $43 = Math_fround($16 + $35);
   $44 = Math_fround($40 + $45);
   $33 = Math_fround($46 + $47);
   $34 = Math_fround($48 + $49);
   $22 = Math_fround($51 + $50);
   $18 = Math_fround($18 + $24);
   $19 = Math_fround($20 + $19);
   $24 = Math_fround($25 + $21);
   $20 = Math_fround($26 + $27);
   $21 = Math_fround($28 + $52);
   $12 = Math_fround($6 + $12);
   $8 = Math_fround($8 + $53);
   $25 = Math_fround($54 + $55);
   $9 = Math_fround($9 + $13);
   $10 = Math_fround($29 + $10);
   $13 = Math_fround($42 + $30);
   $26 = Math_fround($31 + $5);
   $6 = $41;
   if (!!($6 < $14)) {
    HEAPF32[$4 + 216 >> 2] = $14;
    $6 = $14;
   }
   $5 = HEAPF32[$0 + 272 >> 2];
   HEAPF32[$4 + 232 >> 2] = $38 - $5;
   HEAPF32[$4 + 228 >> 2] = $37 - $5;
   HEAPF32[$4 + 224 >> 2] = $39 - $5;
   HEAPF32[$4 + 216 >> 2] = $5 + $6;
   HEAPF32[$4 + 212 >> 2] = $5 + $7;
   HEAPF32[$4 + 208 >> 2] = $5 + $11;
   HEAP32[$4 + 128 >> 2] = 0;
   HEAPF32[$4 + 124 >> 2] = $14;
   HEAPF32[$4 + 120 >> 2] = $36;
   HEAPF32[$4 + 116 >> 2] = $15;
   HEAP32[$4 + 112 >> 2] = 0;
   HEAPF32[$4 + 108 >> 2] = $32;
   HEAPF32[$4 + 104 >> 2] = $43;
   HEAPF32[$4 + 100 >> 2] = $44;
   HEAP32[$4 + 96 >> 2] = 0;
   HEAPF32[$4 + 92 >> 2] = $33;
   HEAPF32[$4 + 88 >> 2] = $34;
   HEAPF32[$4 + 84 >> 2] = $22;
   HEAP32[$4 + 80 >> 2] = 0;
   HEAPF32[$4 + 76 >> 2] = $18;
   HEAPF32[$4 + 72 >> 2] = $19;
   HEAP32[$4 - -64 >> 2] = 0;
   HEAPF32[$4 + 60 >> 2] = $41;
   HEAPF32[$4 + 56 >> 2] = $23;
   HEAPF32[$4 + 52 >> 2] = $17;
   HEAP32[$4 + 48 >> 2] = 0;
   HEAPF32[$4 + 44 >> 2] = $20;
   HEAPF32[$4 + 40 >> 2] = $21;
   HEAPF32[$4 + 36 >> 2] = $12;
   HEAP32[$4 + 32 >> 2] = 0;
   HEAPF32[$4 + 28 >> 2] = $8;
   HEAPF32[$4 + 24 >> 2] = $25;
   HEAPF32[$4 + 20 >> 2] = $9;
   HEAP32[$4 + 16 >> 2] = 0;
   HEAPF32[$4 + 12 >> 2] = $10;
   HEAPF32[$4 + 8 >> 2] = $13;
   HEAPF32[$4 + 196 >> 2] = $5;
   HEAPF32[$4 + 68 >> 2] = $24;
   HEAPF32[$4 + 4 >> 2] = $26;
   HEAP32[$4 >> 2] = 16488;
   HEAP32[$4 + 200 >> 2] = HEAP32[$0 + 268 >> 2];
   label$8 : {
    if (!$1) {
     break label$8
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 64 >> 2]]($1, $4, $4 + 224 | 0, $4 + 208 | 0);
    $5 = HEAPF32[$4 + 200 >> 2];
    if (!($5 < HEAPF32[$0 + 268 >> 2])) {
     break label$8
    }
    HEAPF32[$0 + 268 >> 2] = $5;
    $56 = $5;
   }
  }
  global$0 = $4 + 240 | 0;
  return Math_fround($56);
 }
 
 function btConvexConcaveCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__LocalTriangleSphereCastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0);
  $2 = global$0 - 800 | 0;
  global$0 = $2;
  CProfileSample__CProfileSample_28char_20const__29($2 + 792 | 0, 16672);
  $3 = $2 + 740 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2 + 752 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$2 + 748 >> 2] = 1065353216;
  $3 = $2 + 772 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$2 + 768 >> 2] = 1065353216;
  $3 = $2 + 780 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$2 + 788 >> 2] = 0;
  HEAP32[$2 + 732 >> 2] = 0;
  HEAP32[$2 + 736 >> 2] = 0;
  HEAP32[$2 + 728 >> 2] = 1065353216;
  HEAP32[$2 + 760 >> 2] = 0;
  HEAP32[$2 + 764 >> 2] = 0;
  HEAP32[$2 + 720 >> 2] = 0;
  HEAP32[$2 + 724 >> 2] = 0;
  HEAP32[$2 + 552 >> 2] = 15992;
  HEAP32[$2 + 716 >> 2] = HEAP32[$0 + 200 >> 2];
  $6 = HEAP32[$0 + 196 >> 2];
  btConvexInternalShape__btConvexInternalShape_28_29($2 + 496 | 0);
  $3 = $2 + 524 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$2 + 520 >> 2] = 1065353216;
  $3 = $2 + 532 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$2 + 540 >> 2] = 0;
  HEAP32[$2 + 512 >> 2] = 1065353216;
  HEAP32[$2 + 516 >> 2] = 1065353216;
  HEAP32[$2 + 496 >> 2] = 9852;
  HEAP32[$2 + 548 >> 2] = 0;
  HEAP32[$2 + 544 >> 2] = $6;
  HEAP32[$2 + 528 >> 2] = $6;
  HEAP32[$2 + 500 >> 2] = 8;
  $6 = btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($2 + 384 | 0);
  $3 = $1 + 8 | 0;
  $5 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 452 | 0;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $4 = HEAP32[$1 + 20 >> 2];
  $3 = $2 + 460 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $3 = $1 + 24 | 0;
  $5 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 468 | 0;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $4 = HEAP32[$1 + 36 >> 2];
  $3 = $2 + 476 | 0;
  HEAP32[$3 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$3 + 4 >> 2] = $4;
  $3 = $1 + 40 | 0;
  $5 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $4 = $2 + 484 | 0;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  HEAP32[$2 + 388 >> 2] = 1;
  HEAP32[$2 + 384 >> 2] = 16352;
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 444 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 448 >> 2] = $4;
  HEAP8[$2 + 356 | 0] = 0;
  HEAP32[$2 + 332 >> 2] = 953267991;
  label$1 : {
   if (!btSubsimplexConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29(btSubsimplexConvexCast__btSubsimplexConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($2 + 8 | 0, $2 + 496 | 0, $2 + 384 | 0, $2 + 24 | 0), $0 + 4 | 0, $0 + 68 | 0, $2 + 728 | 0, $2 + 728 | 0, $2 + 552 | 0)) {
    break label$1
   }
   $7 = HEAPF32[$2 + 716 >> 2];
   if (!(HEAPF32[$0 + 200 >> 2] > $7)) {
    break label$1
   }
   HEAPF32[$0 + 200 >> 2] = $7;
  }
  btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($6);
  CProfileSample___CProfileSample_28_29();
  global$0 = $2 + 800 | 0;
 }
 
 function btCompoundCollisionAlgorithm__btCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, $4) {
  var $5 = 0;
  btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1);
  HEAP8[$0 + 24 | 0] = 1;
  HEAP32[$0 >> 2] = 16696;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $5 = $0 + 12 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $5 = $0 + 32 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP8[$0 + 68 | 0] = $4;
  $5 = $0 + 52 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP8[$0 + 76 | 0] = 0;
  HEAP32[$0 + 72 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 80 >> 2] = HEAP32[HEAP32[($4 ? $3 : $2) + 4 >> 2] + 72 >> 2];
  btCompoundCollisionAlgorithm__preallocateChildAlgorithms_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $2, $3);
 }
 
 function btCompoundCollisionAlgorithm__preallocateChildAlgorithms_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $5 = global$0 - 32 | 0;
  global$0 = $5;
  $8 = HEAP32[$0 + 52 >> 2];
  $11 = HEAPU8[$0 + 68 | 0];
  $9 = $11 ? $2 : $1;
  $10 = HEAP32[$9 + 4 >> 2];
  $6 = HEAP32[$10 + 20 >> 2];
  if (($8 | 0) < ($6 | 0)) {
   if (HEAP32[$0 + 56 >> 2] < ($6 | 0)) {
    label$3 : {
     if (!$6) {
      $4 = $8;
      break label$3;
     }
     $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2);
     $4 = HEAP32[$0 + 52 >> 2];
    }
    if (($4 | 0) >= 1) {
     while (1) {
      HEAP32[$3 + $7 >> 2] = HEAP32[$3 + HEAP32[$0 + 60 >> 2] >> 2];
      $3 = $3 + 4 | 0;
      $4 = $4 + -1 | 0;
      if ($4) {
       continue
      }
      break;
     }
    }
    $3 = HEAP32[$0 + 60 >> 2];
    if ($3) {
     if (HEAPU8[$0 - -64 | 0]) {
      btAlignedFreeInternal_28void__29($3)
     }
     HEAP32[$0 + 60 >> 2] = 0;
    }
    HEAP32[$0 + 60 >> 2] = $7;
    HEAP32[$0 + 56 >> 2] = $6;
    HEAP8[$0 - -64 | 0] = 1;
   }
   $3 = $8 << 2;
   $4 = $6 - $8 | 0;
   while (1) {
    HEAP32[$3 + HEAP32[$0 + 60 >> 2] >> 2] = 0;
    $3 = $3 + 4 | 0;
    $4 = $4 + -1 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 52 >> 2] = $6;
  if (($6 | 0) >= 1) {
   $2 = $11 ? $1 : $2;
   $4 = 64;
   $3 = 0;
   $7 = 0;
   while (1) {
    label$12 : {
     if (HEAP32[$10 + 68 >> 2]) {
      HEAP32[$3 + HEAP32[$0 + 60 >> 2] >> 2] = 0;
      break label$12;
     }
     $1 = HEAP32[$4 + HEAP32[$10 + 28 >> 2] >> 2];
     HEAP32[$5 + 28 >> 2] = $7;
     HEAP32[$5 + 24 >> 2] = -1;
     HEAP32[$5 + 8 >> 2] = $9;
     $8 = HEAP32[$9 + 12 >> 2];
     HEAP32[$5 + 16 >> 2] = HEAP32[$9 + 8 >> 2];
     HEAP32[$5 + 20 >> 2] = $8;
     HEAP32[$5 + 12 >> 2] = $1;
     $1 = HEAP32[$0 + 4 >> 2];
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $5 + 8 | 0, $2, HEAP32[$0 + 72 >> 2], 1) | 0;
     HEAP32[$3 + HEAP32[$0 + 60 >> 2] >> 2] = $1;
    }
    $4 = $4 + 80 | 0;
    $3 = $3 + 4 | 0;
    $7 = $7 + 1 | 0;
    if (($7 | 0) != ($6 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $5 + 32 | 0;
 }
 
 function btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  HEAP32[$0 >> 2] = 16696;
  $3 = HEAP32[$0 + 52 >> 2];
  if (($3 | 0) >= 1) {
   while (1) {
    $2 = HEAP32[$1 + HEAP32[$0 + 60 >> 2] >> 2];
    if ($2) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] >> 2]]($2) | 0;
     $2 = HEAP32[$0 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 60 >> 2]]($2, HEAP32[$1 + HEAP32[$0 + 60 >> 2] >> 2]);
    }
    $1 = $1 + 4 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   }
  }
  $1 = HEAP32[$0 + 60 >> 2];
  if ($1) {
   if (HEAPU8[$0 - -64 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 60 >> 2] = 0;
  }
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $1 = HEAP32[$0 + 40 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 44 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 40 >> 2] = 0;
  }
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $1 = HEAP32[$0 + 20 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 24 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 20 >> 2] = 0;
  }
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 24 | 0] = 1;
  return $0 | 0;
 }
 
 function btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29($0));
 }
 
 function btCompoundCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = 0, $33 = 0, $34 = Math_fround(0), $35 = Math_fround(0), $36 = 0, $37 = 0, $38 = 0, $39 = 0;
  $5 = global$0 - 176 | 0;
  global$0 = $5;
  $18 = HEAPU8[$0 + 68 | 0];
  $36 = $18 ? $2 : $1;
  $32 = HEAP32[$36 + 4 >> 2];
  if (HEAP32[$32 + 72 >> 2] != HEAP32[$0 + 80 >> 2]) {
   $8 = HEAP32[$0 + 52 >> 2];
   if (($8 | 0) >= 1) {
    while (1) {
     $7 = HEAP32[$6 + HEAP32[$0 + 60 >> 2] >> 2];
     if ($7) {
      FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] >> 2]]($7) | 0;
      $7 = HEAP32[$0 + 4 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 60 >> 2]]($7, HEAP32[$6 + HEAP32[$0 + 60 >> 2] >> 2]);
     }
     $6 = $6 + 4 | 0;
     $8 = $8 + -1 | 0;
     if ($8) {
      continue
     }
     break;
    }
   }
   btCompoundCollisionAlgorithm__preallocateChildAlgorithms_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2);
   HEAP32[$0 + 80 >> 2] = HEAP32[$32 + 72 >> 2];
  }
  $7 = HEAP32[$0 + 52 >> 2];
  label$5 : {
   if (!$7) {
    break label$5
   }
   $37 = HEAP32[$32 + 68 >> 2];
   HEAP32[$5 + 164 >> 2] = $4;
   HEAP32[$5 + 160 >> 2] = $3;
   $33 = $18 ? $1 : $2;
   HEAP32[$5 + 152 >> 2] = $33;
   HEAP32[$5 + 148 >> 2] = $36;
   HEAP32[$5 + 144 >> 2] = 16768;
   HEAP32[$5 + 172 >> 2] = HEAP32[$0 + 72 >> 2];
   HEAP32[$5 + 168 >> 2] = HEAP32[$0 + 60 >> 2];
   HEAP32[$5 + 156 >> 2] = HEAP32[$0 + 4 >> 2];
   $6 = HEAP32[$0 + 32 >> 2];
   if (($6 | 0) <= -1) {
    if (HEAP32[$0 + 36 >> 2] <= -1) {
     $7 = HEAP32[$0 + 40 >> 2];
     if ($7) {
      if (HEAPU8[$0 + 44 | 0]) {
       btAlignedFreeInternal_28void__29($7)
      }
      HEAP32[$0 + 40 >> 2] = 0;
     }
     HEAP32[$0 + 36 >> 2] = 0;
     HEAP32[$0 + 40 >> 2] = 0;
     HEAP8[$0 + 44 | 0] = 1;
    }
    $7 = $6 << 2;
    while (1) {
     HEAP32[$7 + HEAP32[$0 + 40 >> 2] >> 2] = 0;
     $7 = $7 + 4 | 0;
     $8 = $6 + 1 | 0;
     $1 = $8 >>> 0 >= $6 >>> 0;
     $6 = $8;
     if ($1) {
      continue
     }
     break;
    };
    $7 = HEAP32[$0 + 52 >> 2];
   }
   HEAP32[$0 + 32 >> 2] = 0;
   if (($7 | 0) >= 1) {
    $38 = $0 + 28 | 0;
    $18 = 0;
    while (1) {
     $6 = HEAP32[HEAP32[$0 + 60 >> 2] + ($18 << 2) >> 2];
     if ($6) {
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 16 >> 2]]($6, $38);
      $6 = HEAP32[$0 + 32 >> 2];
      if (($6 | 0) >= 1) {
       $7 = 0;
       $1 = 0;
       while (1) {
        $8 = HEAP32[$7 + HEAP32[$0 + 40 >> 2] >> 2];
        if (HEAP32[$8 + 780 >> 2]) {
         HEAP32[$4 + 4 >> 2] = $8;
         $6 = HEAP32[$8 + 772 >> 2];
         $39 = $6;
         $2 = HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2];
         $3 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
         $6 = ($3 | 0) == ($6 | 0);
         btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($8, ($6 ? $39 : $2) + 4 | 0, ($6 ? $2 : $3) + 4 | 0);
         HEAP32[$4 + 4 >> 2] = 0;
         $6 = HEAP32[$0 + 32 >> 2];
        }
        $7 = $7 + 4 | 0;
        $1 = $1 + 1 | 0;
        if (($1 | 0) < ($6 | 0)) {
         continue
        }
        break;
       };
      }
      if (($6 | 0) <= -1) {
       if (HEAP32[$0 + 36 >> 2] <= -1) {
        $7 = HEAP32[$0 + 40 >> 2];
        if ($7) {
         if (HEAPU8[$0 + 44 | 0]) {
          btAlignedFreeInternal_28void__29($7)
         }
         HEAP32[$0 + 40 >> 2] = 0;
        }
        HEAP8[$0 + 44 | 0] = 1;
        HEAP32[$0 + 36 >> 2] = 0;
        HEAP32[$0 + 40 >> 2] = 0;
       }
       $7 = $6 << 2;
       while (1) {
        HEAP32[$7 + HEAP32[$0 + 40 >> 2] >> 2] = 0;
        $7 = $7 + 4 | 0;
        $8 = $6 + 1 | 0;
        $1 = $8 >>> 0 >= $6 >>> 0;
        $6 = $8;
        if ($1) {
         continue
        }
        break;
       };
      }
      HEAP32[$0 + 32 >> 2] = 0;
      $7 = HEAP32[$0 + 52 >> 2];
     }
     $18 = $18 + 1 | 0;
     if (($18 | 0) < ($7 | 0)) {
      continue
     }
     break;
    };
   }
   label$22 : {
    if (!$37) {
     if (($7 | 0) < 1) {
      break label$22
     }
     $6 = 0;
     $8 = 64;
     while (1) {
      btCompoundLeafCallback__ProcessChildShape_28btCollisionShape_20const__2c_20int_29($5 + 144 | 0, HEAP32[$8 + HEAP32[$32 + 28 >> 2] >> 2], $6);
      $8 = $8 + 80 | 0;
      $6 = $6 + 1 | 0;
      if (($6 | 0) != ($7 | 0)) {
       continue
      }
      break;
     };
     break label$22;
    }
    $6 = HEAP32[$36 + 12 >> 2];
    $19 = HEAPF32[$6 + 52 >> 2];
    $20 = HEAPF32[$6 + 56 >> 2];
    $7 = HEAP32[$33 + 12 >> 2];
    $21 = HEAPF32[$7 + 52 >> 2];
    $22 = HEAPF32[$7 + 56 >> 2];
    $9 = HEAPF32[$6 + 20 >> 2];
    $10 = HEAPF32[$6 + 36 >> 2];
    $23 = HEAPF32[$7 + 20 >> 2];
    $24 = HEAPF32[$7 + 36 >> 2];
    $25 = HEAPF32[$7 + 24 >> 2];
    $11 = HEAPF32[$6 + 24 >> 2];
    $26 = HEAPF32[$7 + 40 >> 2];
    $12 = HEAPF32[$6 + 40 >> 2];
    $27 = HEAPF32[$7 + 32 >> 2];
    $13 = HEAPF32[$6 + 32 >> 2];
    $28 = HEAPF32[$7 >> 2];
    $14 = HEAPF32[$6 >> 2];
    $29 = HEAPF32[$7 + 16 >> 2];
    $15 = HEAPF32[$6 + 16 >> 2];
    $30 = HEAPF32[$6 + 48 >> 2];
    $31 = HEAPF32[$7 + 48 >> 2];
    $16 = HEAPF32[$6 + 4 >> 2];
    $34 = HEAPF32[$7 + 4 >> 2];
    $35 = HEAPF32[$7 + 8 >> 2];
    $17 = HEAPF32[$6 + 8 >> 2];
    HEAP32[$5 + 108 >> 2] = 0;
    HEAP32[$5 + 92 >> 2] = 0;
    HEAP32[$5 + 76 >> 2] = 0;
    HEAPF32[$5 + 88 >> 2] = Math_fround(Math_fround($17 * $35) + Math_fround($11 * $25)) + Math_fround($12 * $26);
    HEAPF32[$5 + 84 >> 2] = Math_fround(Math_fround($17 * $34) + Math_fround($11 * $23)) + Math_fround($12 * $24);
    HEAPF32[$5 + 72 >> 2] = Math_fround(Math_fround($16 * $35) + Math_fround($9 * $25)) + Math_fround($10 * $26);
    HEAPF32[$5 + 68 >> 2] = Math_fround(Math_fround($16 * $34) + Math_fround($9 * $23)) + Math_fround($10 * $24);
    $30 = Math_fround(-$30);
    HEAPF32[$5 + 104 >> 2] = Math_fround(Math_fround(Math_fround($17 * $30) - Math_fround($11 * $19)) - Math_fround($12 * $20)) + Math_fround(Math_fround(Math_fround($17 * $31) + Math_fround($11 * $21)) + Math_fround($12 * $22));
    HEAPF32[$5 + 100 >> 2] = Math_fround(Math_fround(Math_fround($16 * $30) - Math_fround($9 * $19)) - Math_fround($10 * $20)) + Math_fround(Math_fround(Math_fround($16 * $31) + Math_fround($9 * $21)) + Math_fround($10 * $22));
    HEAP32[$5 + 60 >> 2] = 0;
    HEAPF32[$5 + 48 >> 2] = Math_fround(Math_fround($14 * $28) + Math_fround($15 * $29)) + Math_fround($13 * $27);
    HEAPF32[$5 + 80 >> 2] = Math_fround(Math_fround($17 * $28) + Math_fround($11 * $29)) + Math_fround($12 * $27);
    HEAPF32[$5 + 64 >> 2] = Math_fround(Math_fround($16 * $28) + Math_fround($9 * $29)) + Math_fround($10 * $27);
    HEAPF32[$5 + 56 >> 2] = Math_fround(Math_fround($14 * $35) + Math_fround($15 * $25)) + Math_fround($13 * $26);
    HEAPF32[$5 + 52 >> 2] = Math_fround(Math_fround($14 * $34) + Math_fround($15 * $23)) + Math_fround($13 * $24);
    HEAPF32[$5 + 96 >> 2] = Math_fround(Math_fround(Math_fround($14 * $30) - Math_fround($15 * $19)) - Math_fround($13 * $20)) + Math_fround(Math_fround(Math_fround($14 * $31) + Math_fround($15 * $21)) + Math_fround($13 * $22));
    $6 = HEAP32[$33 + 4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, $5 + 48 | 0, $5 + 128 | 0, $5 + 112 | 0);
    $9 = HEAPF32[$4 + 32 >> 2];
    HEAPF32[$5 + 128 >> 2] = HEAPF32[$5 + 128 >> 2] - $9;
    HEAPF32[$5 + 132 >> 2] = HEAPF32[$5 + 132 >> 2] - $9;
    HEAPF32[$5 + 136 >> 2] = HEAPF32[$5 + 136 >> 2] - $9;
    HEAPF32[$5 + 112 >> 2] = $9 + HEAPF32[$5 + 112 >> 2];
    HEAPF32[$5 + 116 >> 2] = $9 + HEAPF32[$5 + 116 >> 2];
    HEAPF32[$5 + 120 >> 2] = $9 + HEAPF32[$5 + 120 >> 2];
    $1 = HEAP32[$5 + 140 >> 2];
    $2 = $5 + 24 | 0;
    HEAP32[$2 >> 2] = HEAP32[$5 + 136 >> 2];
    HEAP32[$2 + 4 >> 2] = $1;
    $2 = HEAP32[$5 + 124 >> 2];
    $1 = $5 + 40 | 0;
    HEAP32[$1 >> 2] = HEAP32[$5 + 120 >> 2];
    HEAP32[$1 + 4 >> 2] = $2;
    $1 = HEAP32[$5 + 116 >> 2];
    HEAP32[$5 + 32 >> 2] = HEAP32[$5 + 112 >> 2];
    HEAP32[$5 + 36 >> 2] = $1;
    $2 = HEAP32[$5 + 132 >> 2];
    HEAP32[$5 + 16 >> 2] = HEAP32[$5 + 128 >> 2];
    HEAP32[$5 + 20 >> 2] = $2;
    btDbvt__collideTVNoStackAlloc_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btAlignedObjectArray_btDbvtNode_20const____2c_20btDbvt__ICollide__29_20const(HEAP32[$37 >> 2], $5 + 16 | 0, $0 + 8 | 0, $5 + 144 | 0);
   }
   $1 = HEAP32[$0 + 52 >> 2];
   $6 = HEAP32[$0 + 32 >> 2];
   if (($6 | 0) <= -1) {
    if (HEAP32[$0 + 36 >> 2] <= -1) {
     $7 = HEAP32[$0 + 40 >> 2];
     if ($7) {
      if (HEAPU8[$0 + 44 | 0]) {
       btAlignedFreeInternal_28void__29($7)
      }
      HEAP32[$0 + 40 >> 2] = 0;
     }
     HEAP32[$0 + 36 >> 2] = 0;
     HEAP32[$0 + 40 >> 2] = 0;
     HEAP8[$0 + 44 | 0] = 1;
    }
    $7 = $6 << 2;
    while (1) {
     HEAP32[$7 + HEAP32[$0 + 40 >> 2] >> 2] = 0;
     $7 = $7 + 4 | 0;
     $8 = $6 + 1 | 0;
     $4 = $8 >>> 0 >= $6 >>> 0;
     $6 = $8;
     if ($4) {
      continue
     }
     break;
    };
   }
   HEAP32[$0 + 32 >> 2] = 0;
   if (($1 | 0) < 1) {
    break label$5
   }
   $4 = 64;
   $8 = 0;
   while (1) {
    label$31 : {
     if (!HEAP32[$8 + HEAP32[$0 + 60 >> 2] >> 2]) {
      break label$31
     }
     $6 = $4 + HEAP32[$32 + 28 >> 2] | 0;
     $2 = HEAP32[$6 >> 2];
     $7 = HEAP32[$36 + 12 >> 2];
     $34 = HEAPF32[$7 + 52 >> 2];
     $35 = HEAPF32[$7 + 56 >> 2];
     $19 = HEAPF32[$6 + -16 >> 2];
     $20 = HEAPF32[$6 + -12 >> 2];
     $21 = HEAPF32[$6 + -8 >> 2];
     $9 = HEAPF32[$7 + 20 >> 2];
     $10 = HEAPF32[$7 + 24 >> 2];
     $22 = HEAPF32[$6 + -64 >> 2];
     $23 = HEAPF32[$6 + -48 >> 2];
     $24 = HEAPF32[$6 + -32 >> 2];
     $25 = HEAPF32[$6 + -60 >> 2];
     $26 = HEAPF32[$6 + -44 >> 2];
     $27 = HEAPF32[$6 + -28 >> 2];
     $28 = HEAPF32[$6 + -56 >> 2];
     $11 = HEAPF32[$7 + 36 >> 2];
     $29 = HEAPF32[$6 + -40 >> 2];
     $12 = HEAPF32[$7 + 40 >> 2];
     $31 = HEAPF32[$6 + -24 >> 2];
     $30 = HEAPF32[$7 + 48 >> 2];
     $13 = HEAPF32[$7 + 8 >> 2];
     $14 = HEAPF32[$7 >> 2];
     $15 = HEAPF32[$7 + 4 >> 2];
     $16 = HEAPF32[$7 + 16 >> 2];
     $17 = HEAPF32[$7 + 32 >> 2];
     $7 = 0;
     HEAP32[$5 + 108 >> 2] = 0;
     HEAP32[$5 + 92 >> 2] = 0;
     HEAP32[$5 + 76 >> 2] = 0;
     HEAP32[$5 + 60 >> 2] = 0;
     HEAPF32[$5 + 88 >> 2] = Math_fround(Math_fround($17 * $28) + Math_fround($11 * $29)) + Math_fround($12 * $31);
     HEAPF32[$5 + 84 >> 2] = Math_fround(Math_fround($17 * $25) + Math_fround($11 * $26)) + Math_fround($12 * $27);
     HEAPF32[$5 + 80 >> 2] = Math_fround(Math_fround($17 * $22) + Math_fround($11 * $23)) + Math_fround($12 * $24);
     HEAPF32[$5 + 72 >> 2] = Math_fround(Math_fround($16 * $28) + Math_fround($9 * $29)) + Math_fround($10 * $31);
     HEAPF32[$5 + 68 >> 2] = Math_fround(Math_fround($16 * $25) + Math_fround($9 * $26)) + Math_fround($10 * $27);
     HEAPF32[$5 + 64 >> 2] = Math_fround(Math_fround($16 * $22) + Math_fround($9 * $23)) + Math_fround($10 * $24);
     HEAPF32[$5 + 56 >> 2] = Math_fround(Math_fround($14 * $28) + Math_fround($15 * $29)) + Math_fround($13 * $31);
     HEAPF32[$5 + 52 >> 2] = Math_fround(Math_fround($14 * $25) + Math_fround($15 * $26)) + Math_fround($13 * $27);
     HEAPF32[$5 + 48 >> 2] = Math_fround(Math_fround($14 * $22) + Math_fround($15 * $23)) + Math_fround($13 * $24);
     HEAPF32[$5 + 104 >> 2] = $35 + Math_fround(Math_fround(Math_fround($17 * $19) + Math_fround($11 * $20)) + Math_fround($12 * $21));
     HEAPF32[$5 + 100 >> 2] = $34 + Math_fround(Math_fround(Math_fround($16 * $19) + Math_fround($9 * $20)) + Math_fround($10 * $21));
     HEAPF32[$5 + 96 >> 2] = $30 + Math_fround(Math_fround(Math_fround($14 * $19) + Math_fround($15 * $20)) + Math_fround($13 * $21));
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $5 + 48 | 0, $5 + 16 | 0, $5 + 128 | 0);
     $6 = HEAP32[$33 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, HEAP32[$33 + 12 >> 2], $5 + 112 | 0, $5);
     $6 = 0;
     label$32 : {
      if (HEAPF32[$5 + 16 >> 2] > HEAPF32[$5 >> 2]) {
       break label$32
      }
      $6 = 0;
      if (HEAPF32[$5 + 128 >> 2] < HEAPF32[$5 + 112 >> 2]) {
       break label$32
      }
      $6 = 1;
     }
     label$33 : {
      if (HEAPF32[$5 + 24 >> 2] > HEAPF32[$5 + 8 >> 2]) {
       break label$33
      }
      if (HEAPF32[$5 + 136 >> 2] < HEAPF32[$5 + 120 >> 2]) {
       break label$33
      }
      $7 = $6;
     }
     label$34 : {
      if (HEAPF32[$5 + 20 >> 2] > HEAPF32[$5 + 4 >> 2]) {
       break label$34
      }
      if (HEAPF32[$5 + 132 >> 2] < HEAPF32[$5 + 116 >> 2]) {
       break label$34
      }
      if (!!$7) {
       break label$31
      }
     }
     $6 = HEAP32[$8 + HEAP32[$0 + 60 >> 2] >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] >> 2]]($6) | 0;
     $6 = HEAP32[$0 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 60 >> 2]]($6, HEAP32[$8 + HEAP32[$0 + 60 >> 2] >> 2]);
     HEAP32[$8 + HEAP32[$0 + 60 >> 2] >> 2] = 0;
    }
    $4 = $4 + 80 | 0;
    $8 = $8 + 4 | 0;
    $1 = $1 + -1 | 0;
    if ($1) {
     continue
    }
    break;
   };
  }
  global$0 = $5 + 176 | 0;
 }
 
 function btCompoundLeafCallback__ProcessChildShape_28btCollisionShape_20const__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = 0;
  $3 = global$0 - 160 | 0;
  global$0 = $3;
  $6 = HEAP32[$0 + 4 >> 2];
  $4 = HEAP32[$6 + 12 >> 2];
  $9 = HEAPF32[$4 + 52 >> 2];
  $10 = HEAPF32[$4 + 56 >> 2];
  $5 = HEAPF32[$4 + 24 >> 2];
  $12 = HEAPF32[$4 + 20 >> 2];
  $13 = HEAPF32[$4 + 40 >> 2];
  $7 = HEAPF32[$4 + 36 >> 2];
  $6 = HEAP32[HEAP32[$6 + 4 >> 2] + 28 >> 2];
  $26 = HEAPF32[$4 + 48 >> 2];
  $14 = HEAPF32[$4 + 8 >> 2];
  $15 = HEAPF32[$4 >> 2];
  $16 = HEAPF32[$4 + 4 >> 2];
  $17 = HEAPF32[$4 + 16 >> 2];
  $8 = HEAPF32[$4 + 32 >> 2];
  HEAP32[$3 + 156 >> 2] = 0;
  HEAP32[$3 + 140 >> 2] = 0;
  HEAP32[$3 + 124 >> 2] = 0;
  $4 = Math_imul($2, 80) + $6 | 0;
  $18 = HEAPF32[$4 + 8 >> 2];
  $19 = HEAPF32[$4 + 24 >> 2];
  $20 = HEAPF32[$4 + 40 >> 2];
  HEAPF32[$3 + 136 >> 2] = Math_fround(Math_fround($8 * $18) + Math_fround($7 * $19)) + Math_fround($13 * $20);
  $21 = HEAPF32[$4 + 4 >> 2];
  $22 = HEAPF32[$4 + 20 >> 2];
  $23 = HEAPF32[$4 + 36 >> 2];
  HEAPF32[$3 + 132 >> 2] = Math_fround(Math_fround($8 * $21) + Math_fround($7 * $22)) + Math_fround($13 * $23);
  HEAPF32[$3 + 120 >> 2] = Math_fround(Math_fround($17 * $18) + Math_fround($12 * $19)) + Math_fround($5 * $20);
  HEAPF32[$3 + 116 >> 2] = Math_fround(Math_fround($17 * $21) + Math_fround($12 * $22)) + Math_fround($5 * $23);
  $11 = $10;
  $10 = HEAPF32[$4 + 48 >> 2];
  $24 = HEAPF32[$4 + 52 >> 2];
  $25 = HEAPF32[$4 + 56 >> 2];
  HEAPF32[$3 + 152 >> 2] = $11 + Math_fround(Math_fround(Math_fround($8 * $10) + Math_fround($7 * $24)) + Math_fround($13 * $25));
  HEAPF32[$3 + 148 >> 2] = $9 + Math_fround(Math_fround(Math_fround($17 * $10) + Math_fround($12 * $24)) + Math_fround($5 * $25));
  HEAP32[$3 + 108 >> 2] = 0;
  $9 = HEAPF32[$4 >> 2];
  $11 = Math_fround($8 * $9);
  $8 = HEAPF32[$4 + 16 >> 2];
  $11 = Math_fround($11 + Math_fround($7 * $8));
  $7 = HEAPF32[$4 + 32 >> 2];
  HEAPF32[$3 + 128 >> 2] = $11 + Math_fround($13 * $7);
  HEAPF32[$3 + 112 >> 2] = Math_fround(Math_fround($17 * $9) + Math_fround($12 * $8)) + Math_fround($5 * $7);
  HEAPF32[$3 + 96 >> 2] = Math_fround(Math_fround($15 * $9) + Math_fround($16 * $8)) + Math_fround($14 * $7);
  HEAPF32[$3 + 104 >> 2] = Math_fround(Math_fround($15 * $18) + Math_fround($16 * $19)) + Math_fround($14 * $20);
  HEAPF32[$3 + 100 >> 2] = Math_fround(Math_fround($15 * $21) + Math_fround($16 * $22)) + Math_fround($14 * $23);
  HEAPF32[$3 + 144 >> 2] = $26 + Math_fround(Math_fround(Math_fround($15 * $10) + Math_fround($16 * $24)) + Math_fround($14 * $25));
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 96 | 0, $3 + 80 | 0, $3 - -64 | 0);
  $5 = HEAPF32[HEAP32[$0 + 20 >> 2] + 32 >> 2];
  HEAPF32[$3 + 80 >> 2] = HEAPF32[$3 + 80 >> 2] - $5;
  HEAPF32[$3 + 84 >> 2] = HEAPF32[$3 + 84 >> 2] - $5;
  HEAPF32[$3 + 88 >> 2] = HEAPF32[$3 + 88 >> 2] - $5;
  HEAPF32[$3 + 64 >> 2] = $5 + HEAPF32[$3 + 64 >> 2];
  HEAPF32[$3 + 68 >> 2] = $5 + HEAPF32[$3 + 68 >> 2];
  HEAPF32[$3 + 72 >> 2] = $5 + HEAPF32[$3 + 72 >> 2];
  $4 = HEAP32[$0 + 8 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 8 >> 2]]($6, HEAP32[$4 + 12 >> 2], $3 + 48 | 0, $3 + 32 | 0);
  $4 = HEAP32[689];
  label$1 : {
   if ($4) {
    if (!FUNCTION_TABLE[$4](HEAP32[HEAP32[$0 + 8 >> 2] + 4 >> 2], $1)) {
     break label$1
    }
   }
   label$3 : {
    if (HEAPF32[$3 + 80 >> 2] > HEAPF32[$3 + 32 >> 2]) {
     break label$3
    }
    if (HEAPF32[$3 + 64 >> 2] < HEAPF32[$3 + 48 >> 2]) {
     break label$3
    }
    $27 = 1;
   }
   $4 = 0;
   label$4 : {
    if (HEAPF32[$3 + 88 >> 2] > HEAPF32[$3 + 40 >> 2]) {
     break label$4
    }
    if (HEAPF32[$3 + 72 >> 2] < HEAPF32[$3 + 56 >> 2]) {
     break label$4
    }
    $4 = $27;
   }
   if (HEAPF32[$3 + 84 >> 2] > HEAPF32[$3 + 36 >> 2]) {
    break label$1
   }
   if (HEAPF32[$3 + 68 >> 2] < HEAPF32[$3 + 52 >> 2]) {
    break label$1
   }
   if (!$4) {
    break label$1
   }
   HEAP32[$3 + 28 >> 2] = $2;
   HEAP32[$3 + 24 >> 2] = -1;
   HEAP32[$3 + 12 >> 2] = $1;
   $4 = HEAP32[$0 + 4 >> 2];
   HEAP32[$3 + 8 >> 2] = $4;
   HEAP32[$3 + 16 >> 2] = HEAP32[$4 + 8 >> 2];
   $5 = HEAPF32[HEAP32[$0 + 20 >> 2] + 32 >> 2];
   HEAP32[$3 + 20 >> 2] = $3 + 96;
   label$5 : {
    if (!!($5 > Math_fround(0.0))) {
     $4 = HEAP32[$0 + 12 >> 2];
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $3 + 8 | 0, HEAP32[$0 + 8 >> 2], 0, 2) | 0;
     break label$5;
    }
    $4 = $2 << 2;
    $1 = HEAP32[$4 + HEAP32[$0 + 24 >> 2] >> 2];
    if ($1) {
     break label$5
    }
    $1 = HEAP32[$0 + 12 >> 2];
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 8 | 0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 28 >> 2], 1) | 0;
    HEAP32[$4 + HEAP32[$0 + 24 >> 2] >> 2] = $1;
    $1 = HEAP32[$4 + HEAP32[$0 + 24 >> 2] >> 2];
   }
   $4 = HEAP32[$0 + 20 >> 2];
   $6 = HEAP32[$4 + 8 >> 2];
   label$7 : {
    if (HEAP32[$6 + 8 >> 2] == HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2]) {
     HEAP32[$4 + 8 >> 2] = $3 + 8;
     FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, -1, $2);
     break label$7;
    }
    $6 = HEAP32[$4 + 12 >> 2];
    HEAP32[$4 + 12 >> 2] = $3 + 8;
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, -1, $2);
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 8 | 0, HEAP32[$0 + 8 >> 2], HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2]);
   $4 = HEAP32[$0 + 20 >> 2];
   HEAP32[$4 + (HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2] == HEAP32[HEAP32[$0 + 4 >> 2] + 8 >> 2] ? 8 : 12) >> 2] = $6;
  }
  global$0 = $3 + 160 | 0;
 }
 
 function btDbvt__collideTVNoStackAlloc_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btAlignedObjectArray_btDbvtNode_20const____2c_20btDbvt__ICollide__29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0);
  if ($0) {
   $9 = HEAPF32[$1 + 24 >> 2];
   $10 = HEAPF32[$1 + 20 >> 2];
   $5 = HEAP32[$2 + 8 >> 2];
   $11 = HEAPF32[$1 + 16 >> 2];
   $12 = HEAPF32[$1 + 8 >> 2];
   $13 = HEAPF32[$1 + 4 >> 2];
   $14 = HEAPF32[$1 >> 2];
   $1 = HEAP32[$2 + 4 >> 2];
   if (($1 | 0) <= -1) {
    if (($5 | 0) <= -1) {
     $4 = HEAP32[$2 + 12 >> 2];
     if ($4) {
      if (HEAPU8[$2 + 16 | 0]) {
       btAlignedFreeInternal_28void__29($4)
      }
      HEAP32[$2 + 12 >> 2] = 0;
     }
     HEAP8[$2 + 16 | 0] = 1;
     HEAP32[$2 + 8 >> 2] = 0;
     HEAP32[$2 + 12 >> 2] = 0;
     $5 = 0;
    }
    $4 = $1 << 2;
    while (1) {
     HEAP32[$4 + HEAP32[$2 + 12 >> 2] >> 2] = 0;
     $4 = $4 + 4 | 0;
     $6 = $1 + 1 | 0;
     $7 = $6 >>> 0 >= $1 >>> 0;
     $1 = $6;
     if ($7) {
      continue
     }
     break;
    };
   }
   $7 = 0;
   HEAP32[$2 + 4 >> 2] = 0;
   if (($5 | 0) <= 63) {
    $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(256);
    $7 = HEAP32[$2 + 4 >> 2];
    if (($7 | 0) >= 1) {
     $1 = 0;
     $4 = $7;
     while (1) {
      HEAP32[$1 + $6 >> 2] = HEAP32[$1 + HEAP32[$2 + 12 >> 2] >> 2];
      $1 = $1 + 4 | 0;
      $4 = $4 + -1 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    $1 = HEAP32[$2 + 12 >> 2];
    if ($1) {
     if (HEAPU8[$2 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($1);
      $7 = HEAP32[$2 + 4 >> 2];
     }
     HEAP32[$2 + 12 >> 2] = 0;
    }
    HEAP32[$2 + 12 >> 2] = $6;
    HEAP8[$2 + 16 | 0] = 1;
    HEAP32[$2 + 8 >> 2] = 64;
    $5 = 64;
   }
   label$12 : {
    if (($5 | 0) != ($7 | 0)) {
     break label$12
    }
    $8 = $5 << 1;
    if (($5 | 0) >= ($8 | 0)) {
     $7 = $5;
     break label$12;
    }
    $1 = 0;
    label$14 : {
     label$15 : {
      if (!$5) {
       $6 = 0;
       $7 = $5;
       break label$15;
      }
      $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 3);
      $7 = HEAP32[$2 + 4 >> 2];
      if (($7 | 0) < 1) {
       break label$14
      }
     }
     $4 = $7;
     while (1) {
      HEAP32[$1 + $6 >> 2] = HEAP32[$1 + HEAP32[$2 + 12 >> 2] >> 2];
      $1 = $1 + 4 | 0;
      $4 = $4 + -1 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    $1 = HEAP32[$2 + 12 >> 2];
    if ($1) {
     if (HEAPU8[$2 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($1);
      $7 = HEAP32[$2 + 4 >> 2];
     }
     HEAP32[$2 + 12 >> 2] = 0;
    }
    HEAP32[$2 + 12 >> 2] = $6;
    HEAP8[$2 + 16 | 0] = 1;
    HEAP32[$2 + 8 >> 2] = $8;
   }
   $1 = $7 + 1 | 0;
   HEAP32[$2 + 4 >> 2] = $1;
   HEAP32[HEAP32[$2 + 12 >> 2] + ($7 << 2) >> 2] = $0;
   while (1) {
    $4 = $1 + -1 | 0;
    HEAP32[$2 + 4 >> 2] = $4;
    $7 = HEAP32[$2 + 12 >> 2];
    $6 = HEAP32[$7 + ($4 << 2) >> 2];
    label$21 : {
     if (!(HEAPF32[$6 >> 2] <= $11)) {
      $1 = $4;
      break label$21;
     }
     if (!(HEAPF32[$6 + 16 >> 2] >= $14)) {
      $1 = $4;
      break label$21;
     }
     if (!(HEAPF32[$6 + 4 >> 2] <= $10)) {
      $1 = $4;
      break label$21;
     }
     if (!(HEAPF32[$6 + 20 >> 2] >= $13)) {
      $1 = $4;
      break label$21;
     }
     if (!(HEAPF32[$6 + 8 >> 2] <= $9)) {
      $1 = $4;
      break label$21;
     }
     if (!(HEAPF32[$6 + 24 >> 2] >= $12)) {
      $1 = $4;
      break label$21;
     }
     if (HEAP32[$6 + 40 >> 2]) {
      $8 = HEAP32[$6 + 36 >> 2];
      $0 = HEAP32[$2 + 8 >> 2];
      label$29 : {
       if (($0 | 0) != ($4 | 0)) {
        break label$29
       }
       $0 = $4 ? $4 << 1 : 1;
       if (($1 | 0) > ($0 | 0)) {
        $0 = $4;
        break label$29;
       }
       label$31 : {
        if (!$0) {
         $7 = 0;
         break label$31;
        }
        $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($0 << 2);
        $4 = HEAP32[$2 + 4 >> 2];
       }
       if (($4 | 0) >= 1) {
        $1 = 0;
        $5 = $4;
        while (1) {
         HEAP32[$1 + $7 >> 2] = HEAP32[$1 + HEAP32[$2 + 12 >> 2] >> 2];
         $1 = $1 + 4 | 0;
         $5 = $5 + -1 | 0;
         if ($5) {
          continue
         }
         break;
        };
       }
       $1 = HEAP32[$2 + 12 >> 2];
       if ($1) {
        if (HEAPU8[$2 + 16 | 0]) {
         btAlignedFreeInternal_28void__29($1);
         $4 = HEAP32[$2 + 4 >> 2];
        }
        HEAP32[$2 + 12 >> 2] = 0;
       }
       HEAP32[$2 + 12 >> 2] = $7;
       HEAP8[$2 + 16 | 0] = 1;
       HEAP32[$2 + 8 >> 2] = $0;
      }
      $5 = $4 + 1 | 0;
      HEAP32[$2 + 4 >> 2] = $5;
      HEAP32[($4 << 2) + $7 >> 2] = $8;
      $7 = HEAP32[$6 + 40 >> 2];
      label$37 : {
       if (($0 | 0) != ($5 | 0)) {
        break label$37
       }
       $8 = $0 ? $0 << 1 : 1;
       if (($0 | 0) >= ($8 | 0)) {
        $5 = $0;
        break label$37;
       }
       label$39 : {
        if (!$8) {
         $6 = 0;
         break label$39;
        }
        $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 2);
        $0 = HEAP32[$2 + 4 >> 2];
       }
       $5 = $0;
       if (($5 | 0) >= 1) {
        $1 = 0;
        $4 = $5;
        while (1) {
         HEAP32[$1 + $6 >> 2] = HEAP32[$1 + HEAP32[$2 + 12 >> 2] >> 2];
         $1 = $1 + 4 | 0;
         $4 = $4 + -1 | 0;
         if ($4) {
          continue
         }
         break;
        };
       }
       $1 = HEAP32[$2 + 12 >> 2];
       if ($1) {
        if (HEAPU8[$2 + 16 | 0]) {
         btAlignedFreeInternal_28void__29($1);
         $5 = HEAP32[$2 + 4 >> 2];
        }
        HEAP32[$2 + 12 >> 2] = 0;
       }
       HEAP32[$2 + 12 >> 2] = $6;
       HEAP8[$2 + 16 | 0] = 1;
       HEAP32[$2 + 8 >> 2] = $8;
      }
      $1 = $5 + 1 | 0;
      HEAP32[$2 + 4 >> 2] = $1;
      HEAP32[HEAP32[$2 + 12 >> 2] + ($5 << 2) >> 2] = $7;
      break label$21;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, $6);
     $1 = HEAP32[$2 + 4 >> 2];
    }
    if (($1 | 0) > 0) {
     continue
    }
    break;
   };
  }
 }
 
 function btCompoundCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
  $16 = HEAP32[$0 + 52 >> 2];
  if (($16 | 0) < 1) {
   return Math_fround(Math_fround(1.0))
  }
  $5 = HEAPU8[$0 + 68 | 0];
  $33 = $5 ? $1 : $2;
  $1 = $5 ? $2 : $1;
  $34 = HEAP32[$1 - -64 >> 2];
  $29 = HEAPF32[$1 + 60 >> 2];
  $30 = HEAPF32[$1 + 56 >> 2];
  $31 = HEAPF32[$1 + 52 >> 2];
  $35 = HEAP32[$1 + 48 >> 2];
  $7 = HEAPF32[$1 + 44 >> 2];
  $8 = HEAPF32[$1 + 40 >> 2];
  $9 = HEAPF32[$1 + 36 >> 2];
  $5 = 32;
  $36 = HEAP32[$1 + 32 >> 2];
  $10 = HEAPF32[$1 + 28 >> 2];
  $11 = HEAPF32[$1 + 24 >> 2];
  $12 = HEAPF32[$1 + 20 >> 2];
  $37 = HEAP32[$1 + 16 >> 2];
  $13 = HEAPF32[$1 + 12 >> 2];
  $14 = HEAPF32[$1 + 8 >> 2];
  $2 = HEAP32[$1 + 304 >> 2];
  $15 = HEAPF32[$1 + 4 >> 2];
  $38 = HEAP32[$1 + 192 >> 2];
  $17 = Math_fround(1.0);
  while (1) {
   HEAP32[$1 + 304 >> 2] = $2 + 1;
   $2 = $5 + HEAP32[$38 + 28 >> 2] | 0;
   $6 = HEAPF32[$2 + 24 >> 2];
   $18 = HEAPF32[$2 + 16 >> 2];
   $19 = HEAPF32[$2 + 20 >> 2];
   $20 = HEAPF32[$2 >> 2];
   $21 = HEAPF32[$2 + -32 >> 2];
   $22 = HEAPF32[$2 + -16 >> 2];
   $23 = HEAPF32[$2 + 4 >> 2];
   $24 = HEAPF32[$2 + -28 >> 2];
   $25 = HEAPF32[$2 + -12 >> 2];
   $26 = HEAPF32[$2 + 8 >> 2];
   $27 = HEAPF32[$2 + -24 >> 2];
   $28 = HEAPF32[$2 + -8 >> 2];
   HEAP32[$1 + 64 >> 2] = 0;
   HEAP32[$1 + 48 >> 2] = 0;
   HEAP32[$1 + 32 >> 2] = 0;
   HEAP32[$1 + 16 >> 2] = 0;
   HEAPF32[$1 + 44 >> 2] = Math_fround(Math_fround($9 * $27) + Math_fround($8 * $28)) + Math_fround($7 * $26);
   HEAPF32[$1 + 40 >> 2] = Math_fround(Math_fround($9 * $24) + Math_fround($8 * $25)) + Math_fround($7 * $23);
   HEAPF32[$1 + 36 >> 2] = Math_fround(Math_fround($9 * $21) + Math_fround($8 * $22)) + Math_fround($7 * $20);
   HEAPF32[$1 + 28 >> 2] = Math_fround(Math_fround($12 * $27) + Math_fround($11 * $28)) + Math_fround($10 * $26);
   HEAPF32[$1 + 24 >> 2] = Math_fround(Math_fround($12 * $24) + Math_fround($11 * $25)) + Math_fround($10 * $23);
   HEAPF32[$1 + 20 >> 2] = Math_fround(Math_fround($12 * $21) + Math_fround($11 * $22)) + Math_fround($10 * $20);
   HEAPF32[$1 + 12 >> 2] = Math_fround(Math_fround($15 * $27) + Math_fround($14 * $28)) + Math_fround($13 * $26);
   HEAPF32[$1 + 8 >> 2] = Math_fround(Math_fround($15 * $24) + Math_fround($14 * $25)) + Math_fround($13 * $23);
   HEAPF32[$1 + 4 >> 2] = Math_fround(Math_fround($15 * $21) + Math_fround($14 * $22)) + Math_fround($13 * $20);
   HEAPF32[$1 + 60 >> 2] = $29 + Math_fround(Math_fround(Math_fround($9 * $18) + Math_fround($8 * $19)) + Math_fround($7 * $6));
   HEAPF32[$1 + 56 >> 2] = $30 + Math_fround(Math_fround(Math_fround($12 * $18) + Math_fround($11 * $19)) + Math_fround($10 * $6));
   HEAPF32[$1 + 52 >> 2] = $31 + Math_fround(Math_fround(Math_fround($15 * $18) + Math_fround($14 * $19)) + Math_fround($13 * $6));
   $2 = HEAP32[$32 + HEAP32[$0 + 60 >> 2] >> 2];
   $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, $1, $33, $3, $4));
   HEAP32[$1 + 64 >> 2] = $34;
   HEAPF32[$1 + 60 >> 2] = $29;
   HEAPF32[$1 + 56 >> 2] = $30;
   HEAPF32[$1 + 52 >> 2] = $31;
   HEAP32[$1 + 48 >> 2] = $35;
   HEAPF32[$1 + 44 >> 2] = $7;
   HEAPF32[$1 + 40 >> 2] = $8;
   HEAPF32[$1 + 36 >> 2] = $9;
   HEAP32[$1 + 32 >> 2] = $36;
   HEAPF32[$1 + 28 >> 2] = $10;
   HEAPF32[$1 + 24 >> 2] = $11;
   HEAPF32[$1 + 20 >> 2] = $12;
   HEAP32[$1 + 16 >> 2] = $37;
   HEAPF32[$1 + 12 >> 2] = $13;
   HEAPF32[$1 + 8 >> 2] = $14;
   HEAPF32[$1 + 4 >> 2] = $15;
   $2 = HEAP32[$1 + 304 >> 2] + 1 | 0;
   HEAP32[$1 + 304 >> 2] = $2;
   $17 = $6 < $17 ? $6 : $17;
   $5 = $5 + 80 | 0;
   $32 = $32 + 4 | 0;
   $16 = $16 + -1 | 0;
   if ($16) {
    continue
   }
   break;
  };
  return Math_fround($17);
 }
 
 function btCompoundCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = HEAP32[$0 + 52 >> 2];
  if (($2 | 0) >= 1) {
   while (1) {
    $3 = HEAP32[$4 + HEAP32[$0 + 60 >> 2] >> 2];
    if ($3) {
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1);
     $2 = HEAP32[$0 + 52 >> 2];
    }
    $4 = $4 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($2 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function btCompoundLeafCallback__Process_28btDbvtNode_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = HEAP32[$1 + 36 >> 2];
  btCompoundLeafCallback__ProcessChildShape_28btCollisionShape_20const__2c_20int_29($0, HEAP32[(HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] + 4 >> 2] + 28 >> 2] + Math_imul($1, 80) | 0) + 64 >> 2], $1);
 }
 
 function btHashedSimplePairCache__btHashedSimplePairCache_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  HEAP32[$0 >> 2] = 16844;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $2 = $0 + 8 | 0;
  $1 = $2;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = $0 + 28 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(24);
  $2 = HEAP32[$2 >> 2];
  if (($2 | 0) >= 1) {
   while (1) {
    $6 = $3 + HEAP32[$0 + 16 >> 2] | 0;
    $1 = $6;
    $7 = HEAP32[$1 >> 2];
    $1 = HEAP32[$1 + 4 >> 2];
    $4 = $3 + $5 | 0;
    HEAP32[$4 >> 2] = $7;
    HEAP32[$4 + 4 >> 2] = $1;
    HEAP32[$4 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
    $3 = $3 + 12 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   }
  }
  $3 = HEAP32[$0 + 16 >> 2];
  if ($3) {
   if (HEAPU8[$0 + 20 | 0]) {
    btAlignedFreeInternal_28void__29($3)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = $5;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = 2;
  btHashedSimplePairCache__growTables_28_29($0);
 }
 
 function btHashedSimplePairCache__growTables_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $7 = HEAP32[$0 + 28 >> 2];
  $1 = HEAP32[$0 + 12 >> 2];
  label$1 : {
   if (($7 | 0) >= ($1 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAP32[$0 + 32 >> 2] >= ($1 | 0)) {
     $4 = HEAP32[$0 + 36 >> 2];
     break label$2;
    }
    label$4 : {
     if (!$1) {
      $2 = $7;
      break label$4;
     }
     $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 2);
     $2 = HEAP32[$0 + 28 >> 2];
    }
    $6 = HEAP32[$0 + 36 >> 2];
    label$6 : {
     if (($2 | 0) >= 1) {
      $3 = $4;
      $5 = $6;
      while (1) {
       HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
       $3 = $3 + 4 | 0;
       $5 = $5 + 4 | 0;
       $2 = $2 + -1 | 0;
       if ($2) {
        continue
       }
       break;
      };
      break label$6;
     }
     if ($6) {
      break label$6
     }
     HEAP32[$0 + 36 >> 2] = $4;
     HEAP32[$0 + 32 >> 2] = $1;
     HEAP8[$0 + 40 | 0] = 1;
     break label$2;
    }
    if (HEAPU8[$0 + 40 | 0]) {
     btAlignedFreeInternal_28void__29($6)
    }
    HEAP32[$0 + 36 >> 2] = $4;
    HEAP8[$0 + 40 | 0] = 1;
    HEAP32[$0 + 32 >> 2] = $1;
   }
   $3 = $7 << 2;
   $2 = $3 + $4 | 0;
   $4 = $1 << 2;
   memset($2, 0, $4 - $3 | 0);
   HEAP32[$0 + 28 >> 2] = $1;
   $6 = HEAP32[$0 + 48 >> 2];
   if (($6 | 0) < ($1 | 0)) {
    label$11 : {
     if (HEAP32[$0 + 52 >> 2] >= ($1 | 0)) {
      $8 = HEAP32[$0 + 56 >> 2];
      break label$11;
     }
     label$13 : {
      if (!$1) {
       $2 = $6;
       break label$13;
      }
      $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4);
      $2 = HEAP32[$0 + 48 >> 2];
     }
     $9 = HEAP32[$0 + 56 >> 2];
     label$15 : {
      if (($2 | 0) >= 1) {
       $3 = $8;
       $5 = $9;
       while (1) {
        HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
        $3 = $3 + 4 | 0;
        $5 = $5 + 4 | 0;
        $2 = $2 + -1 | 0;
        if ($2) {
         continue
        }
        break;
       };
       break label$15;
      }
      if ($9) {
       break label$15
      }
      HEAP32[$0 + 56 >> 2] = $8;
      HEAP32[$0 + 52 >> 2] = $1;
      HEAP8[$0 + 60 | 0] = 1;
      break label$11;
     }
     if (HEAPU8[$0 + 60 | 0]) {
      btAlignedFreeInternal_28void__29($9)
     }
     HEAP32[$0 + 56 >> 2] = $8;
     HEAP8[$0 + 60 | 0] = 1;
     HEAP32[$0 + 52 >> 2] = $1;
    }
    $3 = $6 << 2;
    memset($3 + $8 | 0, 0, $4 - $3 | 0);
   }
   HEAP32[$0 + 48 >> 2] = $1;
   if (($1 | 0) >= 1) {
    memset(HEAP32[$0 + 36 >> 2], 255, $4);
    memset(HEAP32[$0 + 56 >> 2], 255, $4);
   }
   if (($7 | 0) < 1) {
    break label$1
   }
   $5 = HEAP32[$0 + 56 >> 2];
   $3 = HEAP32[$0 + 16 >> 2];
   $4 = HEAP32[$0 + 36 >> 2];
   $2 = 0;
   while (1) {
    $1 = HEAP32[$3 >> 2] | HEAP32[$3 + 4 >> 2] << 16;
    $1 = $1 + ($1 << 15 ^ -1) | 0;
    $1 = Math_imul($1 >>> 10 ^ $1, 9);
    $1 = $1 >>> 6 ^ $1;
    $1 = $1 + ($1 << 11 ^ -1) | 0;
    $1 = ((HEAP32[$0 + 12 >> 2] + -1 & ($1 >>> 16 ^ $1)) << 2) + $4 | 0;
    HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$1 >> 2] = $2;
    $3 = $3 + 12 | 0;
    $5 = $5 + 4 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($7 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function btHashedSimplePairCache___btHashedSimplePairCache_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 16844;
  $1 = HEAP32[$0 + 56 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 60 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = HEAP32[$0 + 36 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 40 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = HEAP32[$0 + 16 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 20 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  return $0 | 0;
 }
 
 function btHashedSimplePairCache___btHashedSimplePairCache_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 16844;
  $1 = HEAP32[$0 + 56 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 60 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = HEAP32[$0 + 36 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 40 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = HEAP32[$0 + 16 >> 2];
  label$5 : {
   if (!$1) {
    break label$5
   }
   if (!HEAPU8[$0 + 20 | 0]) {
    break label$5
   }
   btAlignedFreeInternal_28void__29($1);
  }
  operator_20delete_28void__29($0);
 }
 
 function btHashedSimplePairCache__removeAllPairs_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $1 = HEAP32[$0 + 16 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 20 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  $1 = HEAP32[$0 + 36 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 40 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = HEAP32[$0 + 56 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 60 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  if (HEAP32[$0 + 12 >> 2] <= 1) {
   $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(24);
   $2 = HEAP32[$0 + 8 >> 2];
   if (($2 | 0) >= 1) {
    $1 = 0;
    while (1) {
     $6 = $1 + HEAP32[$0 + 16 >> 2] | 0;
     $3 = $6;
     $7 = HEAP32[$3 >> 2];
     $3 = HEAP32[$3 + 4 >> 2];
     $4 = $1 + $5 | 0;
     HEAP32[$4 >> 2] = $7;
     HEAP32[$4 + 4 >> 2] = $3;
     HEAP32[$4 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
     $1 = $1 + 12 | 0;
     $2 = $2 + -1 | 0;
     if ($2) {
      continue
     }
     break;
    };
   }
   $1 = HEAP32[$0 + 16 >> 2];
   if ($1) {
    if (HEAPU8[$0 + 20 | 0]) {
     btAlignedFreeInternal_28void__29($1)
    }
    HEAP32[$0 + 16 >> 2] = 0;
   }
   HEAP32[$0 + 16 >> 2] = $5;
   HEAP8[$0 + 20 | 0] = 1;
   HEAP32[$0 + 12 >> 2] = 2;
  }
  btHashedSimplePairCache__growTables_28_29($0);
 }
 
 function btHashedSimplePairCache__findPair_28int_2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  HEAP32[692] = HEAP32[692] + 1;
  $3 = $1 | $2 << 16;
  $3 = $3 + ($3 << 15 ^ -1) | 0;
  $3 = Math_imul($3 >>> 10 ^ $3, 9);
  $3 = $3 >>> 6 ^ $3;
  $3 = $3 + ($3 << 11 ^ -1) | 0;
  $3 = HEAP32[$0 + 12 >> 2] + -1 & ($3 >>> 16 ^ $3);
  label$1 : {
   label$2 : {
    if (($3 | 0) >= HEAP32[$0 + 28 >> 2]) {
     break label$2
    }
    $3 = HEAP32[HEAP32[$0 + 36 >> 2] + ($3 << 2) >> 2];
    if (($3 | 0) == -1) {
     break label$2
    }
    $5 = HEAP32[$0 + 16 >> 2];
    while (1) {
     $4 = Math_imul($3, 12) + $5 | 0;
     if (($2 | 0) == HEAP32[$4 + 4 >> 2] ? HEAP32[$4 >> 2] == ($1 | 0) : 0) {
      break label$1
     }
     $3 = HEAP32[HEAP32[$0 + 56 >> 2] + ($3 << 2) >> 2];
     if (($3 | 0) != -1) {
      continue
     }
     break;
    };
   }
   $4 = 0;
  }
  return $4;
 }
 
 function btHashedSimplePairCache__internalAddPair_28int_2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $3 = $1 | $2 << 16;
  $3 = $3 + ($3 << 15 ^ -1) | 0;
  $3 = Math_imul($3 >>> 10 ^ $3, 9);
  $3 = $3 >>> 6 ^ $3;
  $3 = $3 + ($3 << 11 ^ -1) | 0;
  $12 = $3 >>> 16 ^ $3;
  $4 = HEAP32[$0 + 12 >> 2];
  $10 = $12 & $4 + -1;
  $3 = HEAP32[HEAP32[$0 + 36 >> 2] + ($10 << 2) >> 2];
  label$1 : {
   label$2 : {
    if (($3 | 0) == -1) {
     break label$2
    }
    $6 = HEAP32[$0 + 16 >> 2];
    while (1) {
     $5 = Math_imul($3, 12) + $6 | 0;
     if (!(($2 | 0) == HEAP32[$5 + 4 >> 2] ? HEAP32[$5 >> 2] == ($1 | 0) : 0)) {
      $3 = HEAP32[HEAP32[$0 + 56 >> 2] + ($3 << 2) >> 2];
      if (($3 | 0) != -1) {
       continue
      }
      break label$2;
     }
     break;
    };
    if ($5) {
     break label$1
    }
   }
   $7 = HEAP32[$0 + 8 >> 2];
   $3 = $7;
   label$6 : {
    label$7 : {
     $11 = $0;
     if (($4 | 0) == ($3 | 0)) {
      $9 = $4 ? $4 << 1 : 1;
      $13 = ($4 | 0) >= ($9 | 0);
      if (!$13) {
       break label$7
      }
      $3 = $4;
     }
     HEAP32[$11 + 8 >> 2] = $3 + 1;
     $8 = HEAP32[$0 + 16 >> 2];
     $5 = $8 + Math_imul($7, 12) | 0;
     break label$6;
    }
    label$9 : {
     if (!$9) {
      break label$9
     }
     $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($9, 12));
     $4 = HEAP32[$0 + 8 >> 2];
    }
    if (($4 | 0) >= 1) {
     $3 = 0;
     while (1) {
      $6 = $3 + HEAP32[$0 + 16 >> 2] | 0;
      $11 = HEAP32[$6 + 4 >> 2];
      $5 = $3 + $8 | 0;
      HEAP32[$5 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$5 + 4 >> 2] = $11;
      HEAP32[$5 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
      $3 = $3 + 12 | 0;
      $4 = $4 + -1 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    $3 = HEAP32[$0 + 16 >> 2];
    if ($3) {
     if (HEAPU8[$0 + 20 | 0]) {
      btAlignedFreeInternal_28void__29($3)
     }
     HEAP32[$0 + 16 >> 2] = 0;
    }
    HEAP32[$0 + 16 >> 2] = $8;
    HEAP32[$0 + 12 >> 2] = $9;
    HEAP8[$0 + 20 | 0] = 1;
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + 1;
    $5 = Math_imul($7, 12) + $8 | 0;
    if ($13) {
     break label$6
    }
    btHashedSimplePairCache__growTables_28_29($0);
    $10 = $12 & HEAP32[$0 + 12 >> 2] + -1;
   }
   HEAP32[$5 >> 2] = $1;
   $3 = Math_imul($7, 12) + $8 | 0;
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = $2;
   $3 = HEAP32[$0 + 36 >> 2] + ($10 << 2) | 0;
   HEAP32[HEAP32[$0 + 56 >> 2] + ($7 << 2) >> 2] = HEAP32[$3 >> 2];
   HEAP32[$3 >> 2] = $7;
  }
  return $5;
 }
 
 function btHashedSimplePairCache__removeOverlappingPair_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  HEAP32[690] = HEAP32[690] + 1;
  $9 = HEAP32[$0 + 36 >> 2];
  $3 = $1 | $2 << 16;
  $3 = $3 + ($3 << 15 ^ -1) | 0;
  $3 = Math_imul($3 >>> 10 ^ $3, 9);
  $3 = $3 >>> 6 ^ $3;
  $3 = $3 + ($3 << 11 ^ -1) | 0;
  $6 = $9 + ((HEAP32[$0 + 12 >> 2] + -1 & ($3 >>> 16 ^ $3)) << 2) | 0;
  $5 = HEAP32[$6 >> 2];
  label$1 : {
   if (($5 | 0) == -1) {
    break label$1
   }
   $4 = HEAP32[$0 + 16 >> 2];
   $3 = $5;
   while (1) {
    $7 = Math_imul($3, 12) + $4 | 0;
    if (!(($2 | 0) == HEAP32[$7 + 4 >> 2] ? HEAP32[$7 >> 2] == ($1 | 0) : 0)) {
     $3 = HEAP32[HEAP32[$0 + 56 >> 2] + ($3 << 2) >> 2];
     if (($3 | 0) != -1) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (!$7) {
    break label$1
   }
   $1 = Math_imul($3, 12);
   $10 = HEAP32[($1 + $4 | 0) + 8 >> 2];
   $3 = HEAP32[$0 + 56 >> 2];
   $1 = ($1 | 0) / 12 | 0;
   label$5 : {
    label$6 : {
     if (($5 | 0) != ($1 | 0)) {
      while (1) {
       $2 = $5;
       $5 = HEAP32[($5 << 2) + $3 >> 2];
       if (($1 | 0) != ($5 | 0)) {
        continue
       }
       break;
      };
      $5 = HEAP32[($1 << 2) + $3 >> 2];
      $8 = $5;
      if (($2 | 0) == -1) {
       break label$6
      }
      HEAP32[($2 << 2) + $3 >> 2] = $5;
      break label$5;
     }
     $8 = HEAP32[($1 << 2) + $3 >> 2];
    }
    HEAP32[$6 >> 2] = $8;
   }
   $5 = HEAP32[$0 + 8 >> 2] + -1 | 0;
   if (($5 | 0) == ($1 | 0)) {
    HEAP32[$0 + 8 >> 2] = $1;
    return $10 | 0;
   }
   label$10 : {
    label$11 : {
     $6 = Math_imul($5, 12) + $4 | 0;
     $4 = HEAP32[$6 + 4 >> 2] << 16 | HEAP32[$6 >> 2];
     $4 = $4 + ($4 << 15 ^ -1) | 0;
     $4 = Math_imul($4 >>> 10 ^ $4, 9);
     $4 = $4 >>> 6 ^ $4;
     $4 = $4 + ($4 << 11 ^ -1) | 0;
     $8 = HEAP32[$0 + 12 >> 2] + -1 & ($4 >>> 16 ^ $4);
     $9 = ($8 << 2) + $9 | 0;
     $4 = HEAP32[$9 >> 2];
     if (($4 | 0) == ($5 | 0)) {
      $4 = HEAP32[($5 << 2) + $3 >> 2];
      break label$11;
     }
     while (1) {
      $2 = $4;
      $4 = HEAP32[($4 << 2) + $3 >> 2];
      if (($5 | 0) != ($4 | 0)) {
       continue
      }
      break;
     };
     $4 = HEAP32[($5 << 2) + $3 >> 2];
     if (($2 | 0) == -1) {
      break label$11
     }
     HEAP32[($2 << 2) + $3 >> 2] = $4;
     break label$10;
    }
    HEAP32[$9 >> 2] = $4;
   }
   $2 = HEAP32[$6 + 4 >> 2];
   HEAP32[$7 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$7 + 4 >> 2] = $2;
   HEAP32[$7 + 8 >> 2] = HEAP32[$6 + 8 >> 2];
   $3 = HEAP32[$0 + 36 >> 2] + ($8 << 2) | 0;
   HEAP32[HEAP32[$0 + 56 >> 2] + ($1 << 2) >> 2] = HEAP32[$3 >> 2];
   HEAP32[$3 >> 2] = $1;
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -1;
  }
  return $10 | 0;
 }
 
 function btHashedSimplePairCache__addOverlappingPair_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  HEAP32[691] = HEAP32[691] + 1;
  return btHashedSimplePairCache__internalAddPair_28int_2c_20int_29($0, $1, $2) | 0;
 }
 
 function btHashedSimplePairCache__getOverlappingPairArrayPtr_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 16 >> 2];
 }
 
 function btCompoundCompoundCollisionAlgorithm__btCompoundCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3) {
  btCompoundCollisionAlgorithm__btCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, 0);
  HEAP8[$0 + 104 | 0] = 1;
  HEAP32[$0 >> 2] = 16908;
  HEAP32[$0 + 100 >> 2] = 0;
  $1 = $0 + 92 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(64);
  btHashedSimplePairCache__btHashedSimplePairCache_28_29($1);
  HEAP32[$0 + 84 >> 2] = $1;
  HEAP32[$0 + 108 >> 2] = HEAP32[HEAP32[$2 + 4 >> 2] + 72 >> 2];
  HEAP32[$0 + 112 >> 2] = HEAP32[HEAP32[$3 + 4 >> 2] + 72 >> 2];
 }
 
 function btCompoundCompoundCollisionAlgorithm___btCompoundCompoundCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  HEAP32[$0 >> 2] = 16908;
  $1 = 8;
  $2 = HEAP32[$0 + 84 >> 2];
  $3 = HEAP32[$2 + 8 >> 2];
  if (($3 | 0) >= 1) {
   while (1) {
    $4 = HEAP32[$1 + HEAP32[$2 + 16 >> 2] >> 2];
    if ($4) {
     FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] >> 2]]($4) | 0;
     $5 = HEAP32[$0 + 4 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 60 >> 2]]($5, $4);
    }
    $1 = $1 + 12 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   };
   $2 = HEAP32[$0 + 84 >> 2];
  }
  btHashedSimplePairCache__removeAllPairs_28_29($2);
  $1 = HEAP32[$0 + 84 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 84 >> 2]);
  $1 = HEAP32[$0 + 100 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 104 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 100 >> 2] = 0;
  }
  HEAP32[$0 + 100 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP8[$0 + 104 | 0] = 1;
  btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29($0);
  return $0 | 0;
 }
 
 function btCompoundCompoundCollisionAlgorithm___btCompoundCompoundCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(btCompoundCompoundCollisionAlgorithm___btCompoundCompoundCollisionAlgorithm_28_29($0));
 }
 
 function btCompoundCompoundCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = 8;
  $3 = HEAP32[$0 + 84 >> 2];
  $4 = HEAP32[$3 + 8 >> 2];
  if (($4 | 0) >= 1) {
   while (1) {
    $0 = HEAP32[$2 + HEAP32[$3 + 16 >> 2] >> 2];
    if ($0) {
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
     $4 = HEAP32[$3 + 8 >> 2];
    }
    $2 = $2 + 12 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($4 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function btCompoundCompoundCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = 0, $30 = 0, $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = 0, $37 = 0, $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = 0, $43 = 0, $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0), $53 = Math_fround(0), $54 = Math_fround(0), $55 = Math_fround(0), $56 = Math_fround(0);
  $6 = global$0 - 3328 | 0;
  global$0 = $6;
  label$1 : {
   label$2 : {
    $42 = HEAP32[$1 + 4 >> 2];
    $23 = HEAP32[$42 + 68 >> 2];
    if ($23) {
     $43 = HEAP32[$2 + 4 >> 2];
     $22 = HEAP32[$43 + 68 >> 2];
     if ($22) {
      break label$2
     }
    }
    btCompoundCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4);
    break label$1;
   }
   if (!(HEAP32[$43 + 72 >> 2] == HEAP32[$0 + 112 >> 2] ? HEAP32[$42 + 72 >> 2] == HEAP32[$0 + 108 >> 2] : 0)) {
    $5 = 8;
    $11 = HEAP32[$0 + 84 >> 2];
    $8 = HEAP32[$11 + 8 >> 2];
    if (($8 | 0) >= 1) {
     while (1) {
      $7 = HEAP32[$5 + HEAP32[$11 + 16 >> 2] >> 2];
      if ($7) {
       FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] >> 2]]($7) | 0;
       $9 = HEAP32[$0 + 4 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 60 >> 2]]($9, $7);
      }
      $5 = $5 + 12 | 0;
      $8 = $8 + -1 | 0;
      if ($8) {
       continue
      }
      break;
     };
     $11 = HEAP32[$0 + 84 >> 2];
    }
    btHashedSimplePairCache__removeAllPairs_28_29($11);
    HEAP32[$0 + 108 >> 2] = HEAP32[$42 + 72 >> 2];
    HEAP32[$0 + 112 >> 2] = HEAP32[$43 + 72 >> 2];
   }
   HEAP32[$6 + 84 >> 2] = 0;
   HEAP8[$6 + 88 | 0] = 1;
   HEAP32[$6 + 76 >> 2] = 0;
   HEAP32[$6 + 80 >> 2] = 0;
   btPersistentManifold__btPersistentManifold_28_29($6 + 112 | 0);
   btPersistentManifold__btPersistentManifold_28_29($6 + 916 | 0);
   btPersistentManifold__btPersistentManifold_28_29($6 + 1720 | 0);
   btPersistentManifold__btPersistentManifold_28_29($6 + 2524 | 0);
   $5 = HEAP32[$6 + 84 >> 2];
   if ($5) {
    if (HEAPU8[$6 + 88 | 0]) {
     btAlignedFreeInternal_28void__29($5)
    }
    HEAP32[$6 + 84 >> 2] = 0;
   }
   HEAP32[$6 + 76 >> 2] = 0;
   HEAP32[$6 + 80 >> 2] = 4;
   $29 = HEAP32[$0 + 84 >> 2];
   HEAP8[$6 + 88 | 0] = 0;
   $7 = HEAP32[$29 + 8 >> 2];
   HEAP32[$6 + 84 >> 2] = $6 + 112;
   label$11 : {
    label$12 : {
     if (($7 | 0) <= 0) {
      $5 = $6 + 112 | 0;
      break label$12;
     }
     while (1) {
      $5 = HEAP32[(HEAP32[$29 + 16 >> 2] + Math_imul($13, 12) | 0) + 8 >> 2];
      if ($5) {
       FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, $6 + 72 | 0);
       $5 = HEAP32[$6 + 76 >> 2];
       if (($5 | 0) >= 1) {
        $7 = 0;
        $9 = 0;
        while (1) {
         $8 = HEAP32[$7 + HEAP32[$6 + 84 >> 2] >> 2];
         if (HEAP32[$8 + 780 >> 2]) {
          HEAP32[$4 + 4 >> 2] = $8;
          $5 = HEAP32[$8 + 772 >> 2];
          $36 = $5;
          $11 = HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2];
          $30 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
          $5 = ($30 | 0) == ($5 | 0);
          btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($8, ($5 ? $36 : $11) + 4 | 0, ($5 ? $11 : $30) + 4 | 0);
          HEAP32[$4 + 4 >> 2] = 0;
          $5 = HEAP32[$6 + 76 >> 2];
         }
         $7 = $7 + 4 | 0;
         $9 = $9 + 1 | 0;
         if (($9 | 0) < ($5 | 0)) {
          continue
         }
         break;
        };
       }
       if (($5 | 0) <= -1) {
        if (HEAP32[$6 + 80 >> 2] <= -1) {
         $7 = HEAP32[$6 + 84 >> 2];
         if ($7) {
          if (HEAPU8[$6 + 88 | 0]) {
           btAlignedFreeInternal_28void__29($7)
          }
          HEAP32[$6 + 84 >> 2] = 0;
         }
         HEAP8[$6 + 88 | 0] = 1;
         HEAP32[$6 + 80 >> 2] = 0;
         HEAP32[$6 + 84 >> 2] = 0;
        }
        $7 = $5 << 2;
        while (1) {
         HEAP32[$7 + HEAP32[$6 + 84 >> 2] >> 2] = 0;
         $7 = $7 + 4 | 0;
         $8 = $5 + 1 | 0;
         $9 = $8 >>> 0 >= $5 >>> 0;
         $5 = $8;
         if ($9) {
          continue
         }
         break;
        };
       }
       HEAP32[$6 + 76 >> 2] = 0;
       $7 = HEAP32[$29 + 8 >> 2];
      }
      $13 = $13 + 1 | 0;
      if (($13 | 0) < ($7 | 0)) {
       continue
      }
      break;
     };
     $5 = HEAP32[$6 + 84 >> 2];
     if (!$5) {
      break label$11
     }
    }
    if (HEAPU8[$6 + 88 | 0]) {
     btAlignedFreeInternal_28void__29($5)
    }
    HEAP32[$6 + 84 >> 2] = 0;
   }
   HEAP32[$6 + 92 >> 2] = $3;
   HEAP32[$6 + 76 >> 2] = 0;
   HEAP32[$6 + 72 >> 2] = 16988;
   HEAP32[$6 + 88 >> 2] = HEAP32[$0 + 4 >> 2];
   HEAP32[$6 + 104 >> 2] = HEAP32[$0 + 72 >> 2];
   HEAP32[$6 + 100 >> 2] = HEAP32[$0 + 84 >> 2];
   HEAP32[$6 + 84 >> 2] = $2;
   $5 = HEAP32[$2 + 12 >> 2];
   $18 = HEAPF32[$5 + 56 >> 2];
   HEAP32[$6 + 80 >> 2] = $1;
   $7 = HEAP32[$1 + 12 >> 2];
   $10 = HEAPF32[$7 + 40 >> 2];
   $24 = HEAPF32[$5 + 52 >> 2];
   $12 = HEAPF32[$7 + 24 >> 2];
   $31 = HEAPF32[$5 + 48 >> 2];
   $14 = HEAPF32[$7 + 8 >> 2];
   $25 = HEAPF32[$7 + 56 >> 2];
   $32 = HEAPF32[$7 + 52 >> 2];
   $35 = HEAPF32[$7 + 48 >> 2];
   $15 = HEAPF32[$7 + 36 >> 2];
   $16 = HEAPF32[$7 + 20 >> 2];
   $17 = HEAPF32[$7 + 4 >> 2];
   $26 = HEAPF32[$5 + 40 >> 2];
   $33 = HEAPF32[$5 + 24 >> 2];
   $27 = HEAPF32[$5 + 8 >> 2];
   $34 = HEAPF32[$5 + 36 >> 2];
   $44 = HEAPF32[$5 + 20 >> 2];
   $45 = HEAPF32[$5 + 4 >> 2];
   $20 = HEAPF32[$7 >> 2];
   $19 = HEAPF32[$7 + 16 >> 2];
   $21 = HEAPF32[$7 + 32 >> 2];
   $46 = HEAPF32[$5 + 16 >> 2];
   $47 = HEAPF32[$5 >> 2];
   $48 = HEAPF32[$5 + 32 >> 2];
   HEAP32[$6 + 96 >> 2] = $4;
   $5 = HEAP32[$23 >> 2];
   label$25 : {
    if (!$5) {
     break label$25
    }
    $7 = HEAP32[$22 >> 2];
    if (!$7) {
     break label$25
    }
    $28 = Math_fround(-$35);
    $53 = Math_fround(Math_fround(Math_fround(Math_fround($14 * $28) - Math_fround($12 * $32)) - Math_fround($10 * $25)) + Math_fround(Math_fround(Math_fround($14 * $31) + Math_fround($12 * $24)) + Math_fround($10 * $18)));
    $35 = Math_fround(Math_fround(Math_fround(Math_fround($17 * $28) - Math_fround($16 * $32)) - Math_fround($15 * $25)) + Math_fround(Math_fround(Math_fround($17 * $31) + Math_fround($16 * $24)) + Math_fround($15 * $18)));
    $31 = Math_fround(Math_fround(Math_fround(Math_fround($20 * $28) - Math_fround($19 * $32)) - Math_fround($21 * $25)) + Math_fround(Math_fround(Math_fround($20 * $31) + Math_fround($19 * $24)) + Math_fround($21 * $18)));
    $18 = HEAPF32[$4 + 32 >> 2];
    HEAP32[$6 + 116 >> 2] = $7;
    HEAP32[$6 + 112 >> 2] = $5;
    $50 = Math_fround(Math_fround(Math_fround($14 * $27) + Math_fround($12 * $33)) + Math_fround($10 * $26));
    $54 = Math_fround(Math_abs($50));
    $51 = Math_fround(Math_fround(Math_fround($14 * $45) + Math_fround($12 * $44)) + Math_fround($10 * $34));
    $55 = Math_fround(Math_abs($51));
    $52 = Math_fround(Math_fround(Math_fround($14 * $47) + Math_fround($12 * $46)) + Math_fround($10 * $48));
    $56 = Math_fround(Math_abs($52));
    $28 = Math_fround(Math_fround(Math_fround($17 * $27) + Math_fround($16 * $33)) + Math_fround($15 * $26));
    $38 = Math_fround(Math_abs($28));
    $39 = Math_fround(Math_fround(Math_fround($17 * $45) + Math_fround($16 * $44)) + Math_fround($15 * $34));
    $41 = Math_fround(Math_abs($39));
    $40 = Math_fround(Math_fround(Math_fround($17 * $47) + Math_fround($16 * $46)) + Math_fround($15 * $48));
    $49 = Math_fround(Math_abs($40));
    $25 = Math_fround(Math_fround(Math_fround($20 * $27) + Math_fround($19 * $33)) + Math_fround($21 * $26));
    $32 = Math_fround(Math_abs($25));
    $26 = Math_fround(Math_fround(Math_fround($20 * $45) + Math_fround($19 * $44)) + Math_fround($21 * $34));
    $33 = Math_fround(Math_abs($26));
    $27 = Math_fround(Math_fround(Math_fround($20 * $47) + Math_fround($19 * $46)) + Math_fround($21 * $48));
    $34 = Math_fround(Math_abs($27));
    $29 = 124;
    $23 = 0;
    $13 = 128;
    $11 = $6 + 112 | 0;
    $3 = 128;
    $7 = 1;
    while (1) {
     label$27 : {
      label$28 : {
       label$29 : {
        $9 = $7 + -1 | 0;
        $30 = $9 << 3;
        $5 = $30 + $11 | 0;
        $8 = HEAP32[$5 >> 2];
        $5 = HEAP32[$5 + 4 >> 2];
        $10 = HEAPF32[$5 + 16 >> 2];
        $12 = HEAPF32[$5 >> 2];
        $19 = Math_fround(Math_fround(Math_fround($10 - $12) * Math_fround(.5)) + Math_fround(0.0));
        $14 = HEAPF32[$5 + 20 >> 2];
        $15 = HEAPF32[$5 + 4 >> 2];
        $21 = Math_fround(Math_fround(Math_fround($14 - $15) * Math_fround(.5)) + Math_fround(0.0));
        $16 = HEAPF32[$5 + 24 >> 2];
        $17 = HEAPF32[$5 + 8 >> 2];
        $24 = Math_fround(Math_fround(Math_fround($16 - $17) * Math_fround(.5)) + Math_fround(0.0));
        $20 = Math_fround(Math_fround(Math_fround($34 * $19) + Math_fround($33 * $21)) + Math_fround($32 * $24));
        $12 = Math_fround(Math_fround($10 + $12) * Math_fround(.5));
        $14 = Math_fround(Math_fround($14 + $15) * Math_fround(.5));
        $15 = Math_fround(Math_fround($16 + $17) * Math_fround(.5));
        $10 = Math_fround($31 + Math_fround(Math_fround(Math_fround($27 * $12) + Math_fround($26 * $14)) + Math_fround($25 * $15)));
        label$30 : {
         if (!(HEAPF32[$8 >> 2] <= Math_fround($18 + Math_fround($20 + $10)))) {
          break label$30
         }
         if (!(HEAPF32[$8 + 16 >> 2] >= Math_fround(Math_fround($10 - $20) - $18))) {
          break label$30
         }
         $10 = Math_fround(Math_fround(Math_fround($49 * $19) + Math_fround($41 * $21)) + Math_fround($38 * $24));
         $16 = Math_fround($35 + Math_fround(Math_fround(Math_fround($40 * $12) + Math_fround($39 * $14)) + Math_fround($28 * $15)));
         if (!(HEAPF32[$8 + 4 >> 2] <= Math_fround($18 + Math_fround($10 + $16)))) {
          break label$30
         }
         if (!(HEAPF32[$8 + 20 >> 2] >= Math_fround(Math_fround($16 - $10) - $18))) {
          break label$30
         }
         $10 = Math_fround(Math_fround(Math_fround($56 * $19) + Math_fround($55 * $21)) + Math_fround($54 * $24));
         $12 = Math_fround($53 + Math_fround(Math_fround(Math_fround($52 * $12) + Math_fround($51 * $14)) + Math_fround($50 * $15)));
         if (!(HEAPF32[$8 + 8 >> 2] <= Math_fround($18 + Math_fround($10 + $12)))) {
          break label$30
         }
         if (!(HEAPF32[$8 + 24 >> 2] >= Math_fround(Math_fround($12 - $10) - $18))) {
          break label$30
         }
         label$31 : {
          if (($9 | 0) <= ($29 | 0)) {
           $37 = $13;
           $22 = $11;
           $36 = $23;
           break label$31;
          }
          label$33 : {
           label$34 : {
            $37 = $13 << 1;
            if (($13 | 0) >= ($37 | 0)) {
             break label$34
            }
            if (($3 | 0) >= ($37 | 0)) {
             break label$34
            }
            label$35 : {
             label$36 : {
              label$37 : {
               label$38 : {
                if (!$13) {
                 $22 = 0;
                 break label$38;
                }
                $22 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13 << 4);
                if (($13 | 0) < 1) {
                 break label$38
                }
                $29 = $22;
                $3 = $11;
                while (1) {
                 $36 = HEAP32[$3 + 4 >> 2];
                 HEAP32[$29 >> 2] = HEAP32[$3 >> 2];
                 HEAP32[$29 + 4 >> 2] = $36;
                 $29 = $29 + 8 | 0;
                 $3 = $3 + 8 | 0;
                 $13 = $13 + -1 | 0;
                 if ($13) {
                  continue
                 }
                 break;
                };
                if (!($23 & 255)) {
                 break label$36
                }
                break label$37;
               }
               $36 = 1;
               $3 = $36;
               if (!$11) {
                break label$35
               }
               $3 = $37;
               if (!($23 & 255)) {
                break label$33
               }
              }
              btAlignedFreeInternal_28void__29($11);
             }
             $3 = 1;
            }
            $36 = $3;
            $3 = $37;
            break label$33;
           }
           $22 = $11;
           $36 = $23;
          }
          $29 = $37 + -4 | 0;
         }
         $11 = HEAP32[$5 + 40 >> 2];
         if (HEAP32[$8 + 40 >> 2]) {
          $9 = HEAP32[$8 + 36 >> 2];
          if ($11) {
           $11 = $22 + $30 | 0;
           HEAP32[$11 + 4 >> 2] = HEAP32[$5 + 36 >> 2];
           HEAP32[$11 >> 2] = $9;
           $11 = HEAP32[$8 + 40 >> 2];
           $9 = ($7 << 3) + $22 | 0;
           HEAP32[$9 + 4 >> 2] = HEAP32[$5 + 36 >> 2];
           HEAP32[$9 >> 2] = $11;
           $11 = HEAP32[$8 + 36 >> 2];
           HEAP32[$9 + 12 >> 2] = HEAP32[$5 + 40 >> 2];
           HEAP32[$9 + 8 >> 2] = $11;
           $8 = HEAP32[$8 + 40 >> 2];
           HEAP32[$9 + 20 >> 2] = HEAP32[$5 + 40 >> 2];
           HEAP32[$9 + 16 >> 2] = $8;
           $7 = $7 + 3 | 0;
           break label$28;
          }
          $11 = $22 + $30 | 0;
          HEAP32[$11 + 4 >> 2] = $5;
          HEAP32[$11 >> 2] = $9;
          $8 = HEAP32[$8 + 40 >> 2];
          $9 = ($7 << 3) + $22 | 0;
          HEAP32[$9 + 4 >> 2] = $5;
          HEAP32[$9 >> 2] = $8;
          break label$29;
         }
         if ($11) {
          $9 = $22 + $30 | 0;
          HEAP32[$9 + 4 >> 2] = HEAP32[$5 + 36 >> 2];
          HEAP32[$9 >> 2] = $8;
          $9 = ($7 << 3) + $22 | 0;
          HEAP32[$9 + 4 >> 2] = HEAP32[$5 + 40 >> 2];
          HEAP32[$9 >> 2] = $8;
          break label$29;
         }
         FUNCTION_TABLE[HEAP32[HEAP32[$6 + 72 >> 2] + 8 >> 2]]($6 + 72 | 0, $8, $5);
         $13 = $37;
         $11 = $22;
         $23 = $36;
        }
        $7 = $9;
        break label$27;
       }
       $7 = $7 + 1 | 0;
      }
      $13 = $37;
      $11 = $22;
      $23 = $36;
     }
     if ($7) {
      continue
     }
     break;
    };
    if (!$11) {
     break label$25
    }
    if (!($23 & 255)) {
     break label$25
    }
    btAlignedFreeInternal_28void__29($11);
   }
   $30 = HEAP32[$0 + 84 >> 2];
   if (HEAP32[$30 + 8 >> 2] >= 1) {
    $11 = 0;
    while (1) {
     $8 = Math_imul($11, 12);
     $5 = $8 + HEAP32[$30 + 16 >> 2] | 0;
     $9 = HEAP32[$5 + 8 >> 2];
     label$46 : {
      if (!$9) {
       break label$46
      }
      $5 = HEAP32[$42 + 28 >> 2] + Math_imul(HEAP32[$5 >> 2], 80) | 0;
      $13 = HEAP32[$5 + 64 >> 2];
      $7 = HEAP32[$1 + 12 >> 2];
      $39 = HEAPF32[$7 + 52 >> 2];
      $41 = HEAPF32[$7 + 56 >> 2];
      $21 = HEAPF32[$5 + 48 >> 2];
      $24 = HEAPF32[$5 + 52 >> 2];
      $31 = HEAPF32[$5 + 56 >> 2];
      $25 = HEAPF32[$5 + 4 >> 2];
      $32 = HEAPF32[$5 + 20 >> 2];
      $26 = HEAPF32[$5 + 36 >> 2];
      $33 = HEAPF32[$5 + 8 >> 2];
      $27 = HEAPF32[$5 + 24 >> 2];
      $34 = HEAPF32[$5 + 40 >> 2];
      $10 = HEAPF32[$7 + 20 >> 2];
      $12 = HEAPF32[$7 + 24 >> 2];
      $35 = HEAPF32[$5 >> 2];
      $14 = HEAPF32[$7 + 36 >> 2];
      $28 = HEAPF32[$5 + 16 >> 2];
      $15 = HEAPF32[$7 + 40 >> 2];
      $38 = HEAPF32[$5 + 32 >> 2];
      $40 = HEAPF32[$7 + 48 >> 2];
      $16 = HEAPF32[$7 + 8 >> 2];
      $17 = HEAPF32[$7 >> 2];
      $18 = HEAPF32[$7 + 4 >> 2];
      $20 = HEAPF32[$7 + 16 >> 2];
      $19 = HEAPF32[$7 + 32 >> 2];
      HEAP32[$6 + 172 >> 2] = 0;
      HEAP32[$6 + 156 >> 2] = 0;
      HEAP32[$6 + 140 >> 2] = 0;
      HEAP32[$6 + 124 >> 2] = 0;
      HEAPF32[$6 + 144 >> 2] = Math_fround(Math_fround($19 * $35) + Math_fround($14 * $28)) + Math_fround($15 * $38);
      HEAPF32[$6 + 128 >> 2] = Math_fround(Math_fround($20 * $35) + Math_fround($10 * $28)) + Math_fround($12 * $38);
      HEAPF32[$6 + 112 >> 2] = Math_fround(Math_fround($17 * $35) + Math_fround($18 * $28)) + Math_fround($16 * $38);
      HEAPF32[$6 + 152 >> 2] = Math_fround(Math_fround($19 * $33) + Math_fround($14 * $27)) + Math_fround($15 * $34);
      HEAPF32[$6 + 148 >> 2] = Math_fround(Math_fround($19 * $25) + Math_fround($14 * $32)) + Math_fround($15 * $26);
      HEAPF32[$6 + 136 >> 2] = Math_fround(Math_fround($20 * $33) + Math_fround($10 * $27)) + Math_fround($12 * $34);
      HEAPF32[$6 + 132 >> 2] = Math_fround(Math_fround($20 * $25) + Math_fround($10 * $32)) + Math_fround($12 * $26);
      HEAPF32[$6 + 120 >> 2] = Math_fround(Math_fround($17 * $33) + Math_fround($18 * $27)) + Math_fround($16 * $34);
      HEAPF32[$6 + 116 >> 2] = Math_fround(Math_fround($17 * $25) + Math_fround($18 * $32)) + Math_fround($16 * $26);
      HEAPF32[$6 + 168 >> 2] = $41 + Math_fround(Math_fround(Math_fround($19 * $21) + Math_fround($14 * $24)) + Math_fround($15 * $31));
      HEAPF32[$6 + 164 >> 2] = $39 + Math_fround(Math_fround(Math_fround($20 * $21) + Math_fround($10 * $24)) + Math_fround($12 * $31));
      HEAPF32[$6 + 160 >> 2] = $40 + Math_fround(Math_fround(Math_fround($17 * $21) + Math_fround($18 * $24)) + Math_fround($16 * $31));
      FUNCTION_TABLE[HEAP32[HEAP32[$13 >> 2] + 8 >> 2]]($13, $6 + 112 | 0, $6 + 56 | 0, $6 + 40 | 0);
      $10 = HEAPF32[$4 + 32 >> 2];
      HEAPF32[$6 + 56 >> 2] = HEAPF32[$6 + 56 >> 2] - $10;
      HEAPF32[$6 + 60 >> 2] = HEAPF32[$6 + 60 >> 2] - $10;
      HEAPF32[$6 + 64 >> 2] = HEAPF32[$6 + 64 >> 2] - $10;
      HEAPF32[$6 + 40 >> 2] = $10 + HEAPF32[$6 + 40 >> 2];
      HEAPF32[$6 + 44 >> 2] = $10 + HEAPF32[$6 + 44 >> 2];
      HEAPF32[$6 + 48 >> 2] = $10 + HEAPF32[$6 + 48 >> 2];
      $5 = HEAP32[$43 + 28 >> 2] + Math_imul(HEAP32[($8 + HEAP32[$30 + 16 >> 2] | 0) + 4 >> 2], 80) | 0;
      $13 = HEAP32[$5 + 64 >> 2];
      $7 = HEAP32[$2 + 12 >> 2];
      $41 = HEAPF32[$7 + 52 >> 2];
      $40 = HEAPF32[$7 + 56 >> 2];
      $24 = HEAPF32[$5 + 48 >> 2];
      $31 = HEAPF32[$5 + 52 >> 2];
      $25 = HEAPF32[$5 + 56 >> 2];
      $32 = HEAPF32[$5 + 4 >> 2];
      $26 = HEAPF32[$5 + 20 >> 2];
      $33 = HEAPF32[$5 + 36 >> 2];
      $27 = HEAPF32[$5 + 8 >> 2];
      $34 = HEAPF32[$5 + 24 >> 2];
      $35 = HEAPF32[$5 + 40 >> 2];
      $12 = HEAPF32[$7 + 20 >> 2];
      $14 = HEAPF32[$7 + 24 >> 2];
      $28 = HEAPF32[$5 >> 2];
      $15 = HEAPF32[$7 + 36 >> 2];
      $38 = HEAPF32[$5 + 16 >> 2];
      $16 = HEAPF32[$7 + 40 >> 2];
      $39 = HEAPF32[$5 + 32 >> 2];
      $49 = HEAPF32[$7 + 48 >> 2];
      $17 = HEAPF32[$7 + 8 >> 2];
      $18 = HEAPF32[$7 >> 2];
      $20 = HEAPF32[$7 + 4 >> 2];
      $19 = HEAPF32[$7 + 16 >> 2];
      $21 = HEAPF32[$7 + 32 >> 2];
      HEAP32[$6 + 172 >> 2] = 0;
      HEAP32[$6 + 156 >> 2] = 0;
      HEAP32[$6 + 140 >> 2] = 0;
      HEAP32[$6 + 124 >> 2] = 0;
      HEAPF32[$6 + 144 >> 2] = Math_fround(Math_fround($21 * $28) + Math_fround($15 * $38)) + Math_fround($16 * $39);
      HEAPF32[$6 + 128 >> 2] = Math_fround(Math_fround($19 * $28) + Math_fround($12 * $38)) + Math_fround($14 * $39);
      HEAPF32[$6 + 112 >> 2] = Math_fround(Math_fround($18 * $28) + Math_fround($20 * $38)) + Math_fround($17 * $39);
      HEAPF32[$6 + 152 >> 2] = Math_fround(Math_fround($21 * $27) + Math_fround($15 * $34)) + Math_fround($16 * $35);
      HEAPF32[$6 + 148 >> 2] = Math_fround(Math_fround($21 * $32) + Math_fround($15 * $26)) + Math_fround($16 * $33);
      HEAPF32[$6 + 136 >> 2] = Math_fround(Math_fround($19 * $27) + Math_fround($12 * $34)) + Math_fround($14 * $35);
      HEAPF32[$6 + 132 >> 2] = Math_fround(Math_fround($19 * $32) + Math_fround($12 * $26)) + Math_fround($14 * $33);
      HEAPF32[$6 + 120 >> 2] = Math_fround(Math_fround($18 * $27) + Math_fround($20 * $34)) + Math_fround($17 * $35);
      HEAPF32[$6 + 116 >> 2] = Math_fround(Math_fround($18 * $32) + Math_fround($20 * $26)) + Math_fround($17 * $33);
      HEAPF32[$6 + 168 >> 2] = $40 + Math_fround(Math_fround(Math_fround($21 * $24) + Math_fround($15 * $31)) + Math_fround($16 * $25));
      HEAPF32[$6 + 164 >> 2] = $41 + Math_fround(Math_fround(Math_fround($19 * $24) + Math_fround($12 * $31)) + Math_fround($14 * $25));
      HEAPF32[$6 + 160 >> 2] = $49 + Math_fround(Math_fround(Math_fround($18 * $24) + Math_fround($20 * $31)) + Math_fround($17 * $25));
      FUNCTION_TABLE[HEAP32[HEAP32[$13 >> 2] + 8 >> 2]]($13, $6 + 112 | 0, $6 + 24 | 0, $6 + 8 | 0);
      $15 = Math_fround(HEAPF32[$6 + 24 >> 2] - $10);
      HEAPF32[$6 + 24 >> 2] = $15;
      $12 = Math_fround(HEAPF32[$6 + 28 >> 2] - $10);
      HEAPF32[$6 + 28 >> 2] = $12;
      $17 = Math_fround(HEAPF32[$6 + 32 >> 2] - $10);
      HEAPF32[$6 + 32 >> 2] = $17;
      $14 = Math_fround($10 + HEAPF32[$6 + 8 >> 2]);
      HEAPF32[$6 + 8 >> 2] = $14;
      $16 = Math_fround($10 + HEAPF32[$6 + 16 >> 2]);
      HEAPF32[$6 + 16 >> 2] = $16;
      $10 = Math_fround($10 + HEAPF32[$6 + 12 >> 2]);
      HEAPF32[$6 + 12 >> 2] = $10;
      label$47 : {
       if (HEAPF32[$6 + 60 >> 2] > $10) {
        break label$47
       }
       if (HEAPF32[$6 + 44 >> 2] < $12) {
        break label$47
       }
       if (HEAPF32[$6 + 56 >> 2] > $14) {
        break label$47
       }
       if (HEAPF32[$6 + 40 >> 2] < $15) {
        break label$47
       }
       if (HEAPF32[$6 + 64 >> 2] > $16) {
        break label$47
       }
       if (!(HEAPF32[$6 + 48 >> 2] < $17)) {
        break label$46
       }
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] >> 2]]($9) | 0;
      $5 = HEAP32[$0 + 4 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 60 >> 2]]($5, $9);
      $5 = $8 + HEAP32[$30 + 16 >> 2] | 0;
      $29 = HEAP32[$5 + 4 >> 2];
      $3 = HEAP32[$5 >> 2];
      $7 = HEAP32[$0 + 92 >> 2];
      label$48 : {
       if (($7 | 0) != HEAP32[$0 + 96 >> 2]) {
        break label$48
       }
       $23 = $7 ? $7 << 1 : 1;
       if (($7 | 0) >= ($23 | 0)) {
        break label$48
       }
       label$49 : {
        if (!$23) {
         $13 = 0;
         break label$49;
        }
        $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($23, 12));
        $7 = HEAP32[$0 + 92 >> 2];
       }
       if (($7 | 0) >= 1) {
        $5 = 0;
        while (1) {
         $9 = $5 + HEAP32[$0 + 100 >> 2] | 0;
         $37 = HEAP32[$9 >> 2];
         $22 = HEAP32[$9 + 4 >> 2];
         $8 = $5 + $13 | 0;
         HEAP32[$8 >> 2] = $37;
         HEAP32[$8 + 4 >> 2] = $22;
         HEAP32[$8 + 8 >> 2] = HEAP32[$9 + 8 >> 2];
         $5 = $5 + 12 | 0;
         $7 = $7 + -1 | 0;
         if ($7) {
          continue
         }
         break;
        };
       }
       $5 = HEAP32[$0 + 100 >> 2];
       if ($5) {
        if (HEAPU8[$0 + 104 | 0]) {
         btAlignedFreeInternal_28void__29($5)
        }
        HEAP32[$0 + 100 >> 2] = 0;
       }
       HEAP32[$0 + 100 >> 2] = $13;
       HEAP8[$0 + 104 | 0] = 1;
       HEAP32[$0 + 96 >> 2] = $23;
       $7 = HEAP32[$0 + 92 >> 2];
      }
      $5 = HEAP32[$0 + 100 >> 2] + Math_imul($7, 12) | 0;
      HEAP32[$5 + 8 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = $29;
      HEAP32[$5 >> 2] = $3;
      HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 92 >> 2] + 1;
     }
     $11 = $11 + 1 | 0;
     if (($11 | 0) < HEAP32[$30 + 8 >> 2]) {
      continue
     }
     break;
    };
   }
   if (HEAP32[$0 + 92 >> 2] >= 1) {
    $7 = 0;
    $5 = 4;
    while (1) {
     $8 = HEAP32[$0 + 84 >> 2];
     $4 = $5 + HEAP32[$0 + 100 >> 2] | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 8 >> 2]]($8, HEAP32[$4 + -4 >> 2], HEAP32[$4 >> 2]) | 0;
     $5 = $5 + 12 | 0;
     $7 = $7 + 1 | 0;
     if (($7 | 0) < HEAP32[$0 + 92 >> 2]) {
      continue
     }
     break;
    };
   }
   $5 = HEAP32[$0 + 100 >> 2];
   if ($5) {
    if (HEAPU8[$0 + 104 | 0]) {
     btAlignedFreeInternal_28void__29($5)
    }
    HEAP32[$0 + 100 >> 2] = 0;
   }
   HEAP32[$0 + 100 >> 2] = 0;
   HEAP32[$0 + 92 >> 2] = 0;
   HEAP32[$0 + 96 >> 2] = 0;
   HEAP8[$0 + 104 | 0] = 1;
  }
  global$0 = $6 + 3328 | 0;
 }
 
 function btCompoundCompoundCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function btCompoundCompoundLeafCallback__Process_28btDbvtNode_20const__2c_20btDbvtNode_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = Math_fround(0), $29 = 0, $30 = 0, $31 = 0, $32 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 256 | 0;
  global$0 = $3;
  CProfileSample__CProfileSample_28char_20const__29($3 + 248 | 0, 17064);
  HEAP32[$0 + 4 >> 2] = HEAP32[$0 + 4 >> 2] + 1;
  $25 = HEAP32[$2 + 36 >> 2];
  $30 = Math_imul($25, 80);
  $31 = HEAP32[$0 + 12 >> 2];
  $32 = HEAP32[$31 + 4 >> 2] + 28 | 0;
  $24 = HEAP32[($30 + HEAP32[$32 >> 2] | 0) + 64 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  $26 = HEAP32[$1 + 36 >> 2];
  $1 = HEAP32[HEAP32[$2 + 4 >> 2] + 28 >> 2] + Math_imul($26, 80) | 0;
  $27 = HEAP32[$1 + 64 >> 2];
  $2 = HEAP32[$2 + 12 >> 2];
  $8 = HEAPF32[$2 + 52 >> 2];
  $9 = HEAPF32[$2 + 56 >> 2];
  $6 = HEAPF32[$2 + 24 >> 2];
  $7 = HEAPF32[$2 + 20 >> 2];
  $11 = HEAPF32[$2 + 40 >> 2];
  $4 = HEAPF32[$2 + 36 >> 2];
  $28 = HEAPF32[$2 + 48 >> 2];
  $12 = HEAPF32[$2 + 8 >> 2];
  $13 = HEAPF32[$2 >> 2];
  $14 = HEAPF32[$2 + 4 >> 2];
  $15 = HEAPF32[$2 + 16 >> 2];
  $5 = HEAPF32[$2 + 32 >> 2];
  HEAP32[$3 + 244 >> 2] = 0;
  HEAP32[$3 + 228 >> 2] = 0;
  HEAP32[$3 + 212 >> 2] = 0;
  $16 = HEAPF32[$1 + 8 >> 2];
  $17 = HEAPF32[$1 + 24 >> 2];
  $18 = HEAPF32[$1 + 40 >> 2];
  HEAPF32[$3 + 224 >> 2] = Math_fround(Math_fround($5 * $16) + Math_fround($4 * $17)) + Math_fround($11 * $18);
  $19 = HEAPF32[$1 + 4 >> 2];
  $20 = HEAPF32[$1 + 20 >> 2];
  $21 = HEAPF32[$1 + 36 >> 2];
  HEAPF32[$3 + 220 >> 2] = Math_fround(Math_fround($5 * $19) + Math_fround($4 * $20)) + Math_fround($11 * $21);
  HEAPF32[$3 + 208 >> 2] = Math_fround(Math_fround($15 * $16) + Math_fround($7 * $17)) + Math_fround($6 * $18);
  HEAPF32[$3 + 204 >> 2] = Math_fround(Math_fround($15 * $19) + Math_fround($7 * $20)) + Math_fround($6 * $21);
  $10 = $9;
  $9 = HEAPF32[$1 + 48 >> 2];
  $22 = HEAPF32[$1 + 52 >> 2];
  $23 = HEAPF32[$1 + 56 >> 2];
  HEAPF32[$3 + 240 >> 2] = $10 + Math_fround(Math_fround(Math_fround($5 * $9) + Math_fround($4 * $22)) + Math_fround($11 * $23));
  HEAPF32[$3 + 236 >> 2] = $8 + Math_fround(Math_fround(Math_fround($15 * $9) + Math_fround($7 * $22)) + Math_fround($6 * $23));
  HEAP32[$3 + 196 >> 2] = 0;
  $8 = HEAPF32[$1 >> 2];
  $10 = Math_fround($5 * $8);
  $5 = HEAPF32[$1 + 16 >> 2];
  $10 = Math_fround($10 + Math_fround($4 * $5));
  $4 = HEAPF32[$1 + 32 >> 2];
  HEAPF32[$3 + 216 >> 2] = $10 + Math_fround($11 * $4);
  HEAPF32[$3 + 200 >> 2] = Math_fround(Math_fround($15 * $8) + Math_fround($7 * $5)) + Math_fround($6 * $4);
  HEAPF32[$3 + 192 >> 2] = Math_fround(Math_fround($13 * $16) + Math_fround($14 * $17)) + Math_fround($12 * $18);
  HEAPF32[$3 + 188 >> 2] = Math_fround(Math_fround($13 * $19) + Math_fround($14 * $20)) + Math_fround($12 * $21);
  HEAPF32[$3 + 184 >> 2] = Math_fround(Math_fround($13 * $8) + Math_fround($14 * $5)) + Math_fround($12 * $4);
  HEAPF32[$3 + 232 >> 2] = $28 + Math_fround(Math_fround(Math_fround($13 * $9) + Math_fround($14 * $22)) + Math_fround($12 * $23));
  $1 = HEAP32[$31 + 12 >> 2];
  $8 = HEAPF32[$1 + 52 >> 2];
  $9 = HEAPF32[$1 + 56 >> 2];
  $6 = HEAPF32[$1 + 24 >> 2];
  $7 = HEAPF32[$1 + 20 >> 2];
  $11 = HEAPF32[$1 + 40 >> 2];
  $4 = HEAPF32[$1 + 36 >> 2];
  $2 = HEAP32[$32 >> 2];
  $28 = HEAPF32[$1 + 48 >> 2];
  $12 = HEAPF32[$1 + 8 >> 2];
  $13 = HEAPF32[$1 >> 2];
  $14 = HEAPF32[$1 + 4 >> 2];
  $15 = HEAPF32[$1 + 16 >> 2];
  $5 = HEAPF32[$1 + 32 >> 2];
  HEAP32[$3 + 180 >> 2] = 0;
  HEAP32[$3 + 164 >> 2] = 0;
  HEAP32[$3 + 148 >> 2] = 0;
  $1 = $2 + $30 | 0;
  $16 = HEAPF32[$1 + 8 >> 2];
  $17 = HEAPF32[$1 + 24 >> 2];
  $18 = HEAPF32[$1 + 40 >> 2];
  HEAPF32[$3 + 160 >> 2] = Math_fround(Math_fround($5 * $16) + Math_fround($4 * $17)) + Math_fround($11 * $18);
  $19 = HEAPF32[$1 + 4 >> 2];
  $20 = HEAPF32[$1 + 20 >> 2];
  $21 = HEAPF32[$1 + 36 >> 2];
  HEAPF32[$3 + 156 >> 2] = Math_fround(Math_fround($5 * $19) + Math_fround($4 * $20)) + Math_fround($11 * $21);
  HEAPF32[$3 + 144 >> 2] = Math_fround(Math_fround($15 * $16) + Math_fround($7 * $17)) + Math_fround($6 * $18);
  HEAPF32[$3 + 140 >> 2] = Math_fround(Math_fround($15 * $19) + Math_fround($7 * $20)) + Math_fround($6 * $21);
  $10 = $9;
  $9 = HEAPF32[$1 + 48 >> 2];
  $22 = HEAPF32[$1 + 52 >> 2];
  $23 = HEAPF32[$1 + 56 >> 2];
  HEAPF32[$3 + 176 >> 2] = $10 + Math_fround(Math_fround(Math_fround($5 * $9) + Math_fround($4 * $22)) + Math_fround($11 * $23));
  HEAPF32[$3 + 172 >> 2] = $8 + Math_fround(Math_fround(Math_fround($15 * $9) + Math_fround($7 * $22)) + Math_fround($6 * $23));
  HEAP32[$3 + 132 >> 2] = 0;
  $8 = HEAPF32[$1 >> 2];
  $10 = Math_fround($5 * $8);
  $5 = HEAPF32[$1 + 16 >> 2];
  $10 = Math_fround($10 + Math_fround($4 * $5));
  $4 = HEAPF32[$1 + 32 >> 2];
  HEAPF32[$3 + 152 >> 2] = $10 + Math_fround($11 * $4);
  HEAPF32[$3 + 136 >> 2] = Math_fround(Math_fround($15 * $8) + Math_fround($7 * $5)) + Math_fround($6 * $4);
  HEAPF32[$3 + 128 >> 2] = Math_fround(Math_fround($13 * $16) + Math_fround($14 * $17)) + Math_fround($12 * $18);
  HEAPF32[$3 + 124 >> 2] = Math_fround(Math_fround($13 * $19) + Math_fround($14 * $20)) + Math_fround($12 * $21);
  HEAPF32[$3 + 120 >> 2] = Math_fround(Math_fround($13 * $8) + Math_fround($14 * $5)) + Math_fround($12 * $4);
  HEAPF32[$3 + 168 >> 2] = $28 + Math_fround(Math_fround(Math_fround($13 * $9) + Math_fround($14 * $22)) + Math_fround($12 * $23));
  FUNCTION_TABLE[HEAP32[HEAP32[$27 >> 2] + 8 >> 2]]($27, $3 + 184 | 0, $3 + 104 | 0, $3 + 88 | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$24 >> 2] + 8 >> 2]]($24, $3 + 120 | 0, $3 + 72 | 0, $3 + 56 | 0);
  $6 = HEAPF32[HEAP32[$0 + 24 >> 2] + 32 >> 2];
  $7 = Math_fround(HEAPF32[$3 + 104 >> 2] - $6);
  HEAPF32[$3 + 104 >> 2] = $7;
  HEAPF32[$3 + 108 >> 2] = HEAPF32[$3 + 108 >> 2] - $6;
  HEAPF32[$3 + 112 >> 2] = HEAPF32[$3 + 112 >> 2] - $6;
  HEAPF32[$3 + 88 >> 2] = $6 + HEAPF32[$3 + 88 >> 2];
  HEAPF32[$3 + 92 >> 2] = $6 + HEAPF32[$3 + 92 >> 2];
  HEAPF32[$3 + 96 >> 2] = $6 + HEAPF32[$3 + 96 >> 2];
  $1 = HEAP32[693];
  label$1 : {
   if ($1) {
    if (!FUNCTION_TABLE[$1]($27, $24)) {
     break label$1
    }
    $7 = HEAPF32[$3 + 104 >> 2];
   }
   label$3 : {
    if ($7 > HEAPF32[$3 + 56 >> 2]) {
     break label$3
    }
    if (HEAPF32[$3 + 88 >> 2] < HEAPF32[$3 + 72 >> 2]) {
     break label$3
    }
    $29 = 1;
   }
   $1 = 0;
   label$4 : {
    if (HEAPF32[$3 + 112 >> 2] > HEAPF32[$3 + 64 >> 2]) {
     break label$4
    }
    if (HEAPF32[$3 + 96 >> 2] < HEAPF32[$3 + 80 >> 2]) {
     break label$4
    }
    $1 = $29;
   }
   if (HEAPF32[$3 + 108 >> 2] > HEAPF32[$3 + 60 >> 2]) {
    break label$1
   }
   if (HEAPF32[$3 + 92 >> 2] < HEAPF32[$3 + 76 >> 2]) {
    break label$1
   }
   if (!$1) {
    break label$1
   }
   HEAP32[$3 + 48 >> 2] = -1;
   HEAP32[$3 + 36 >> 2] = $27;
   $1 = HEAP32[$0 + 8 >> 2];
   HEAP32[$3 + 32 >> 2] = $1;
   HEAP32[$3 + 40 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$3 + 44 >> 2] = $3 + 184;
   HEAP32[$3 + 52 >> 2] = $26;
   HEAP32[$3 + 24 >> 2] = -1;
   HEAP32[$3 + 12 >> 2] = $24;
   $1 = HEAP32[$0 + 12 >> 2];
   HEAP32[$3 + 8 >> 2] = $1;
   HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$3 + 20 >> 2] = $3 + 120;
   HEAP32[$3 + 28 >> 2] = $25;
   $1 = btHashedSimplePairCache__findPair_28int_2c_20int_29(HEAP32[$0 + 28 >> 2], $26, $25);
   label$5 : {
    if (!!(HEAPF32[HEAP32[$0 + 24 >> 2] + 32 >> 2] > Math_fround(0.0))) {
     $1 = HEAP32[$0 + 16 >> 2];
     $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 32 | 0, $3 + 8 | 0, 0, 2) | 0;
     break label$5;
    }
    if ($1) {
     $2 = HEAP32[$1 + 8 >> 2];
     break label$5;
    }
    $1 = HEAP32[$0 + 16 >> 2];
    $2 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $3 + 32 | 0, $3 + 8 | 0, HEAP32[$0 + 32 >> 2], 1) | 0;
    $1 = HEAP32[$0 + 28 >> 2];
    (wasm2js_i32$0 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $26, $25) | 0, wasm2js_i32$1 = $2), HEAP32[wasm2js_i32$0 + 8 >> 2] = wasm2js_i32$1;
   }
   $1 = HEAP32[$0 + 24 >> 2];
   $24 = HEAP32[$1 + 8 >> 2];
   $29 = HEAP32[$1 + 12 >> 2];
   HEAP32[$1 + 12 >> 2] = $3 + 8;
   HEAP32[$1 + 8 >> 2] = $3 + 32;
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, -1, $26);
   $1 = HEAP32[$0 + 24 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, -1, $25);
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $3 + 32 | 0, $3 + 8 | 0, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]);
   $0 = HEAP32[$0 + 24 >> 2];
   HEAP32[$0 + 8 >> 2] = $24;
   HEAP32[$0 + 12 >> 2] = $29;
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $3 + 256 | 0;
 }
 
 function btSphereSphereCollisionAlgorithm__btSphereSphereCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1);
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 8 | 0] = 0;
  HEAP32[$0 >> 2] = 17172;
  $1 = HEAP32[$0 + 4 >> 2];
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$2 + 8 >> 2], HEAP32[$3 + 8 >> 2]) | 0;
  HEAP8[$0 + 8 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = $1;
 }
 
 function btSphereSphereCollisionAlgorithm___btSphereSphereCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17172;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  return $0 | 0;
 }
 
 function btSphereSphereCollisionAlgorithm___btSphereSphereCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17172;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  operator_20delete_28void__29($0);
 }
 
 function btSphereSphereCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $0 = HEAP32[$0 + 12 >> 2];
  label$1 : {
   if (!$0) {
    break label$1
   }
   HEAP32[$4 + 4 >> 2] = $0;
   $6 = HEAP32[$1 + 12 >> 2];
   $7 = HEAP32[$2 + 12 >> 2];
   $12 = Math_fround(HEAPF32[$6 + 48 >> 2] - HEAPF32[$7 + 48 >> 2]);
   $9 = Math_fround(HEAPF32[$6 + 52 >> 2] - HEAPF32[$7 + 52 >> 2]);
   $10 = Math_fround(HEAPF32[$6 + 56 >> 2] - HEAPF32[$7 + 56 >> 2]);
   $11 = Math_fround(Math_fround(Math_fround($12 * $12) + Math_fround($9 * $9)) + Math_fround($10 * $10));
   $6 = HEAP32[$2 + 4 >> 2];
   $8 = HEAPF32[$6 + 16 >> 2];
   $13 = HEAPF32[$6 + 32 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
   $14 = HEAPF32[$1 + 16 >> 2];
   $15 = HEAPF32[$1 + 32 >> 2];
   $7 = HEAP32[$0 + 780 >> 2];
   if (($7 | 0) >= 1) {
    $1 = $0 + 4 | 0;
    $6 = 0;
    while (1) {
     btPersistentManifold__clearUserCache_28btManifoldPoint__29($1);
     $1 = $1 + 192 | 0;
     $6 = $6 + 1 | 0;
     $7 = HEAP32[$0 + 780 >> 2];
     if (($6 | 0) < ($7 | 0)) {
      continue
     }
     break;
    };
   }
   $5 = Math_fround(Math_sqrt($11));
   $11 = Math_fround($13 * $8);
   $8 = Math_fround($15 * $14);
   label$4 : {
    if (!$7) {
     break label$4
    }
    $1 = HEAP32[424];
    if (!$1) {
     break label$4
    }
    HEAP32[$3 + 16 >> 2] = $0;
    FUNCTION_TABLE[$1]($3 + 16 | 0);
   }
   HEAP32[$0 + 780 >> 2] = 0;
   $8 = Math_fround($8 + $11);
   if ($5 > Math_fround($8 + HEAPF32[$4 + 32 >> 2])) {
    break label$1
   }
   HEAP32[$3 + 24 >> 2] = 0;
   HEAP32[$3 + 28 >> 2] = 0;
   HEAP32[$3 + 16 >> 2] = 1065353216;
   HEAP32[$3 + 20 >> 2] = 0;
   $8 = Math_fround($5 - $8);
   label$5 : {
    if (!($5 > Math_fround(1.1920928955078125e-07))) {
     $5 = Math_fround(1.0);
     $10 = Math_fround(0.0);
     $9 = Math_fround(0.0);
     break label$5;
    }
    HEAP32[$3 + 28 >> 2] = 0;
    $5 = Math_fround(Math_fround(1.0) / $5);
    $10 = Math_fround($10 * $5);
    HEAPF32[$3 + 24 >> 2] = $10;
    $9 = Math_fround($9 * $5);
    HEAPF32[$3 + 20 >> 2] = $9;
    $5 = Math_fround($12 * $5);
    HEAPF32[$3 + 16 >> 2] = $5;
   }
   HEAP32[$3 + 12 >> 2] = 0;
   $1 = HEAP32[$2 + 12 >> 2];
   HEAPF32[$3 >> 2] = Math_fround($11 * $5) + HEAPF32[$1 + 48 >> 2];
   HEAPF32[$3 + 8 >> 2] = Math_fround($11 * $10) + HEAPF32[$1 + 56 >> 2];
   HEAPF32[$3 + 4 >> 2] = Math_fround($11 * $9) + HEAPF32[$1 + 52 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $3 + 16 | 0, $3, $8);
  }
  global$0 = $3 + 32 | 0;
 }
 
 function btSphereSphereCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = HEAP32[$0 + 12 >> 2];
  label$1 : {
   if (!$2) {
    break label$1
   }
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $3 = HEAP32[$1 + 4 >> 2];
   label$2 : {
    if (($3 | 0) != HEAP32[$1 + 8 >> 2]) {
     break label$2
    }
    $4 = $3 ? $3 << 1 : 1;
    if (($3 | 0) >= ($4 | 0)) {
     break label$2
    }
    label$3 : {
     if (!$4) {
      break label$3
     }
     $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
     $3 = HEAP32[$1 + 4 >> 2];
    }
    if (($3 | 0) >= 1) {
     $2 = 0;
     $5 = $3;
     while (1) {
      HEAP32[$2 + $6 >> 2] = HEAP32[$2 + HEAP32[$1 + 12 >> 2] >> 2];
      $2 = $2 + 4 | 0;
      $5 = $5 + -1 | 0;
      if ($5) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$1 + 12 >> 2];
    if ($2) {
     if (HEAPU8[$1 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($2);
      $3 = HEAP32[$1 + 4 >> 2];
     }
     HEAP32[$1 + 12 >> 2] = 0;
    }
    HEAP32[$1 + 12 >> 2] = $6;
    HEAP8[$1 + 16 | 0] = 1;
    HEAP32[$1 + 8 >> 2] = $4;
    $2 = HEAP32[$0 + 12 >> 2];
   }
   HEAP32[$1 + 4 >> 2] = $3 + 1;
   HEAP32[HEAP32[$1 + 12 >> 2] + ($3 << 2) >> 2] = $2;
  }
 }
 
 function SphereTriangleDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0);
  $3 = global$0 - 144 | 0;
  global$0 = $3;
  HEAP32[$3 + 108 >> 2] = 0;
  $5 = HEAPF32[$1 + 80 >> 2];
  $6 = HEAPF32[$1 + 96 >> 2];
  $20 = HEAPF32[$1 + 120 >> 2];
  $26 = HEAPF32[$1 + 56 >> 2];
  $21 = HEAPF32[$1 + 112 >> 2];
  $22 = HEAPF32[$1 + 116 >> 2];
  $27 = HEAPF32[$1 + 52 >> 2];
  $7 = HEAPF32[$1 + 68 >> 2];
  $10 = HEAPF32[$1 + 84 >> 2];
  $11 = HEAPF32[$1 + 100 >> 2];
  $16 = HEAPF32[$1 + 20 >> 2];
  $8 = HEAPF32[$1 + 36 >> 2];
  $12 = HEAPF32[$1 + 72 >> 2];
  $13 = HEAPF32[$1 + 88 >> 2];
  $9 = HEAPF32[$1 + 24 >> 2];
  $14 = HEAPF32[$1 + 104 >> 2];
  $17 = HEAPF32[$1 + 40 >> 2];
  $15 = HEAPF32[$1 + 64 >> 2];
  $18 = HEAPF32[$1 + 32 >> 2];
  $19 = HEAPF32[$1 >> 2];
  $23 = HEAPF32[$1 + 16 >> 2];
  $28 = HEAPF32[$1 + 48 >> 2];
  $24 = HEAPF32[$1 + 4 >> 2];
  $25 = HEAPF32[$1 + 8 >> 2];
  HEAP32[$3 + 100 >> 2] = 0;
  HEAP32[$3 + 84 >> 2] = 0;
  HEAP32[$3 + 68 >> 2] = 0;
  HEAPF32[$3 + 80 >> 2] = Math_fround(Math_fround($25 * $12) + Math_fround($9 * $13)) + Math_fround($17 * $14);
  HEAPF32[$3 + 76 >> 2] = Math_fround(Math_fround($24 * $12) + Math_fround($16 * $13)) + Math_fround($8 * $14);
  HEAPF32[$3 - -64 >> 2] = Math_fround(Math_fround($25 * $7) + Math_fround($9 * $10)) + Math_fround($17 * $11);
  HEAPF32[$3 + 60 >> 2] = Math_fround(Math_fround($24 * $7) + Math_fround($16 * $10)) + Math_fround($8 * $11);
  $21 = Math_fround($28 - $21);
  $22 = Math_fround($27 - $22);
  $20 = Math_fround($26 - $20);
  HEAPF32[$3 + 96 >> 2] = Math_fround(Math_fround($12 * $21) + Math_fround($13 * $22)) + Math_fround($14 * $20);
  HEAPF32[$3 + 92 >> 2] = Math_fround(Math_fround($21 * $7) + Math_fround($22 * $10)) + Math_fround($20 * $11);
  HEAP32[$3 + 52 >> 2] = 0;
  HEAPF32[$3 + 72 >> 2] = Math_fround(Math_fround($19 * $12) + Math_fround($23 * $13)) + Math_fround($18 * $14);
  HEAPF32[$3 + 56 >> 2] = Math_fround(Math_fround($19 * $7) + Math_fround($23 * $10)) + Math_fround($18 * $11);
  HEAPF32[$3 + 48 >> 2] = Math_fround(Math_fround($15 * $25) + Math_fround($5 * $9)) + Math_fround($6 * $17);
  HEAPF32[$3 + 44 >> 2] = Math_fround(Math_fround($15 * $24) + Math_fround($5 * $16)) + Math_fround($6 * $8);
  HEAPF32[$3 + 40 >> 2] = Math_fround(Math_fround($15 * $19) + Math_fround($5 * $23)) + Math_fround($6 * $18);
  HEAPF32[$3 + 88 >> 2] = Math_fround(Math_fround($21 * $15) + Math_fround($22 * $5)) + Math_fround($20 * $6);
  label$1 : {
   if (!SphereTriangleDetector__collide_28btVector3_20const__2c_20btVector3__2c_20btVector3__2c_20float__2c_20float__2c_20float_29($0, $3 + 88 | 0, $3 + 128 | 0, $3 + 112 | 0, $3 + 108 | 0, HEAPF32[$0 + 12 >> 2])) {
    break label$1
   }
   if ($4) {
    $10 = HEAPF32[$1 + 72 >> 2];
    $11 = HEAPF32[$1 + 64 >> 2];
    $12 = HEAPF32[$1 + 68 >> 2];
    $13 = HEAPF32[$1 + 88 >> 2];
    $14 = HEAPF32[$1 + 80 >> 2];
    $15 = HEAPF32[$1 + 84 >> 2];
    $16 = HEAPF32[$1 + 104 >> 2];
    $8 = HEAPF32[$1 + 96 >> 2];
    $9 = HEAPF32[$1 + 100 >> 2];
    $5 = HEAPF32[$3 + 120 >> 2];
    $6 = HEAPF32[$3 + 112 >> 2];
    $7 = HEAPF32[$3 + 116 >> 2];
    HEAP32[$3 + 36 >> 2] = 0;
    $17 = Math_fround(Math_fround(Math_fround($6 * $8) + Math_fround($7 * $9)) + Math_fround($5 * $16));
    HEAPF32[$3 + 32 >> 2] = -$17;
    $18 = Math_fround(Math_fround(Math_fround($6 * $14) + Math_fround($7 * $15)) + Math_fround($5 * $13));
    HEAPF32[$3 + 28 >> 2] = -$18;
    $19 = Math_fround(Math_fround(Math_fround($11 * $6) + Math_fround($12 * $7)) + Math_fround($10 * $5));
    HEAPF32[$3 + 24 >> 2] = -$19;
    HEAP32[$3 + 20 >> 2] = 0;
    $6 = HEAPF32[$3 + 128 >> 2];
    $7 = HEAPF32[$3 + 132 >> 2];
    $9 = Math_fround(Math_fround($8 * $6) + Math_fround($9 * $7));
    $8 = HEAPF32[$3 + 136 >> 2];
    $5 = HEAPF32[$3 + 108 >> 2];
    HEAPF32[$3 + 16 >> 2] = Math_fround(Math_fround($9 + Math_fround($16 * $8)) + HEAPF32[$1 + 120 >> 2]) + Math_fround($17 * $5);
    HEAPF32[$3 + 12 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($6 * $14) + Math_fround($7 * $15)) + Math_fround($8 * $13)) + HEAPF32[$1 + 116 >> 2]) + Math_fround($18 * $5);
    HEAPF32[$3 + 8 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($6 * $11) + Math_fround($7 * $12)) + Math_fround($8 * $10)) + HEAPF32[$1 + 112 >> 2]) + Math_fround($19 * $5);
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $3 + 24 | 0, $3 + 8 | 0, $5);
    break label$1;
   }
   HEAP32[$3 + 36 >> 2] = 0;
   $5 = HEAPF32[$3 + 112 >> 2];
   $10 = HEAPF32[$1 + 96 >> 2];
   $6 = HEAPF32[$3 + 116 >> 2];
   $11 = HEAPF32[$1 + 100 >> 2];
   $7 = HEAPF32[$3 + 120 >> 2];
   $12 = HEAPF32[$1 + 104 >> 2];
   HEAPF32[$3 + 32 >> 2] = Math_fround(Math_fround($5 * $10) + Math_fround($6 * $11)) + Math_fround($7 * $12);
   $13 = HEAPF32[$1 + 80 >> 2];
   $14 = HEAPF32[$1 + 84 >> 2];
   $15 = HEAPF32[$1 + 88 >> 2];
   HEAPF32[$3 + 28 >> 2] = Math_fround(Math_fround($5 * $13) + Math_fround($6 * $14)) + Math_fround($7 * $15);
   $16 = HEAPF32[$1 + 64 >> 2];
   $8 = HEAPF32[$1 + 68 >> 2];
   $9 = HEAPF32[$1 + 72 >> 2];
   HEAPF32[$3 + 24 >> 2] = Math_fround(Math_fround($5 * $16) + Math_fround($6 * $8)) + Math_fround($7 * $9);
   HEAP32[$3 + 20 >> 2] = 0;
   $5 = HEAPF32[$3 + 128 >> 2];
   $6 = HEAPF32[$3 + 132 >> 2];
   $7 = HEAPF32[$3 + 136 >> 2];
   HEAPF32[$3 + 16 >> 2] = Math_fround(Math_fround(Math_fround($10 * $5) + Math_fround($11 * $6)) + Math_fround($12 * $7)) + HEAPF32[$1 + 120 >> 2];
   HEAPF32[$3 + 12 >> 2] = Math_fround(Math_fround(Math_fround($5 * $13) + Math_fround($6 * $14)) + Math_fround($7 * $15)) + HEAPF32[$1 + 116 >> 2];
   HEAPF32[$3 + 8 >> 2] = Math_fround(Math_fround(Math_fround($5 * $16) + Math_fround($6 * $8)) + Math_fround($7 * $9)) + HEAPF32[$1 + 112 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $3 + 24 | 0, $3 + 8 | 0, HEAPF32[$3 + 108 >> 2]);
  }
  global$0 = $3 + 144 | 0;
 }
 
 function SphereTriangleDetector__collide_28btVector3_20const__2c_20btVector3__2c_20btVector3__2c_20float__2c_20float__2c_20float_29($0, $1, $2, $3, $4, $5) {
  var $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = 0;
  $10 = global$0 - 32 | 0;
  global$0 = $10;
  $13 = HEAP32[$0 + 8 >> 2];
  $6 = HEAPF32[$13 + 60 >> 2];
  $12 = Math_fround(HEAPF32[$13 + 76 >> 2] - $6);
  $9 = HEAPF32[$13 - -64 >> 2];
  $8 = Math_fround(HEAPF32[$13 + 96 >> 2] - $9);
  $11 = Math_fround(HEAPF32[$13 + 80 >> 2] - $9);
  $16 = Math_fround(HEAPF32[$13 + 92 >> 2] - $6);
  $14 = Math_fround(Math_fround($12 * $8) - Math_fround($11 * $16));
  $7 = HEAPF32[$13 + 68 >> 2];
  $19 = Math_fround(HEAPF32[$13 + 100 >> 2] - $7);
  $18 = Math_fround($11 * $19);
  $11 = Math_fround(HEAPF32[$13 + 84 >> 2] - $7);
  $8 = Math_fround($18 - Math_fround($11 * $8));
  $12 = Math_fround(Math_fround($11 * $16) - Math_fround($12 * $19));
  $11 = Math_fround(Math_fround($14 * $14) + Math_fround(Math_fround($8 * $8) + Math_fround($12 * $12)));
  label$1 : {
   if (!($11 >= Math_fround(1.4210854715202004e-14))) {
    break label$1
   }
   $17 = HEAP32[$0 + 4 >> 2];
   $22 = Math_fround(HEAPF32[$17 + 32 >> 2] * HEAPF32[$17 + 16 >> 2]);
   $16 = Math_fround($22 + $5);
   $11 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($11)));
   $18 = Math_fround($8 * $11);
   $8 = HEAPF32[$1 >> 2];
   $20 = Math_fround($12 * $11);
   $12 = HEAPF32[$1 + 4 >> 2];
   $5 = Math_fround(Math_fround($18 * Math_fround($8 - $6)) + Math_fround($20 * Math_fround($12 - $9)));
   $21 = Math_fround($14 * $11);
   $9 = HEAPF32[$1 + 8 >> 2];
   $6 = Math_fround($5 + Math_fround($21 * Math_fround($9 - $7)));
   if (!!($6 < Math_fround(0.0))) {
    $21 = Math_fround(-$21);
    $20 = Math_fround(-$20);
    $18 = Math_fround(-$18);
    $6 = Math_fround(-$6);
   }
   if (!($6 < $16)) {
    break label$1
   }
   $15 = $1 + 8 | 0;
   $28 = HEAP32[$15 >> 2];
   $15 = HEAP32[$15 + 4 >> 2];
   $17 = $10 + 24 | 0;
   HEAP32[$17 >> 2] = $28;
   HEAP32[$17 + 4 >> 2] = $15;
   $17 = HEAP32[$1 + 4 >> 2];
   HEAP32[$10 + 16 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$10 + 20 >> 2] = $17;
   $15 = 0;
   HEAP32[$10 + 12 >> 2] = 0;
   HEAPF32[$10 + 8 >> 2] = $21;
   HEAPF32[$10 + 4 >> 2] = $20;
   HEAPF32[$10 >> 2] = $18;
   label$3 : {
    if (SphereTriangleDetector__pointInTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3__29($13 + 60 | 0, $10, $10 + 16 | 0)) {
     $23 = Math_fround($9 - Math_fround($6 * $21));
     $24 = Math_fround($12 - Math_fround($6 * $20));
     $25 = Math_fround($8 - Math_fround($6 * $18));
     $26 = Math_fround($16 * $16);
     break label$3;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$13 >> 2] + 100 >> 2]]($13) | 0) < 1) {
     break label$1
    }
    $26 = Math_fround($16 * $16);
    $17 = 0;
    $13 = 0;
    while (1) {
     $15 = HEAP32[$0 + 8 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$15 >> 2] + 104 >> 2]]($15, $13, $10 + 16 | 0, $10);
     $7 = Math_fround(0.0);
     $16 = HEAPF32[$10 + 16 >> 2];
     $6 = Math_fround(HEAPF32[$1 >> 2] - $16);
     $8 = Math_fround(HEAPF32[$10 >> 2] - $16);
     $19 = HEAPF32[$10 + 20 >> 2];
     $9 = Math_fround(HEAPF32[$1 + 4 >> 2] - $19);
     $12 = Math_fround(HEAPF32[$10 + 4 >> 2] - $19);
     $5 = HEAPF32[$10 + 24 >> 2];
     $14 = Math_fround(HEAPF32[$1 + 8 >> 2] - $5);
     $11 = Math_fround(HEAPF32[$10 + 8 >> 2] - $5);
     $27 = Math_fround(Math_fround(Math_fround($6 * $8) + Math_fround($9 * $12)) + Math_fround($14 * $11));
     label$6 : {
      if (!($27 > Math_fround(0.0))) {
       break label$6
      }
      $7 = Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($12 * $12)) + Math_fround($11 * $11));
      if (!!($27 < $7)) {
       $7 = Math_fround($27 / $7);
       $14 = Math_fround($14 - Math_fround($11 * $7));
       $9 = Math_fround($9 - Math_fround($12 * $7));
       $6 = Math_fround($6 - Math_fround($8 * $7));
       break label$6;
      }
      $14 = Math_fround($14 - $11);
      $9 = Math_fround($9 - $12);
      $6 = Math_fround($6 - $8);
      $7 = Math_fround(1.0);
     }
     if (!!(Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($9 * $9)) + Math_fround($14 * $14)) < $26)) {
      $25 = Math_fround($16 + Math_fround($8 * $7));
      $24 = Math_fround($19 + Math_fround($12 * $7));
      $23 = Math_fround($5 + Math_fround($11 * $7));
      $17 = 1;
     }
     $13 = $13 + 1 | 0;
     $15 = HEAP32[$0 + 8 >> 2];
     if (($13 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$15 >> 2] + 100 >> 2]]($15) | 0)) {
      continue
     }
     break;
    };
    $15 = 0;
    if (!($17 & 1)) {
     break label$1
    }
    $9 = HEAPF32[$1 + 8 >> 2];
    $12 = HEAPF32[$1 + 4 >> 2];
    $8 = HEAPF32[$1 >> 2];
   }
   $6 = Math_fround($8 - $25);
   $14 = Math_fround($12 - $24);
   $9 = Math_fround($9 - $23);
   $7 = Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($14 * $14)) + Math_fround($9 * $9));
   if (!($7 < $26)) {
    break label$1
   }
   label$9 : {
    if (!!($7 > Math_fround(1.1920928955078125e-07))) {
     $8 = Math_fround(Math_sqrt($7));
     $7 = Math_fround(Math_fround(1.0) / $8);
     HEAPF32[$3 + 8 >> 2] = $9 * $7;
     HEAPF32[$3 + 4 >> 2] = $14 * $7;
     HEAPF32[$3 >> 2] = $6 * $7;
     $22 = Math_fround($22 - $8);
     break label$9;
    }
    HEAPF32[$3 + 8 >> 2] = $21;
    HEAPF32[$3 + 4 >> 2] = $20;
    HEAPF32[$3 >> 2] = $18;
   }
   HEAP32[$3 + 12 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = 0;
   HEAPF32[$2 + 8 >> 2] = $23;
   HEAPF32[$2 + 4 >> 2] = $24;
   HEAPF32[$2 >> 2] = $25;
   HEAPF32[$4 >> 2] = -$22;
   $15 = 1;
  }
  global$0 = $10 + 32 | 0;
  return $15;
 }
 
 function SphereTriangleDetector__pointInTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3__29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0);
  $8 = HEAPF32[$2 + 8 >> 2];
  $4 = HEAPF32[$0 + 24 >> 2];
  $9 = HEAPF32[$0 + 32 >> 2];
  $3 = HEAPF32[$0 + 16 >> 2];
  $10 = Math_fround($9 - $3);
  $5 = HEAPF32[$1 + 4 >> 2];
  $16 = HEAPF32[$0 + 36 >> 2];
  $6 = HEAPF32[$0 + 20 >> 2];
  $11 = Math_fround($16 - $6);
  $12 = HEAPF32[$1 >> 2];
  $14 = Math_fround(Math_fround($8 - $4) * Math_fround(Math_fround($10 * $5) - Math_fround($11 * $12)));
  $17 = HEAPF32[$2 >> 2];
  $13 = HEAPF32[$1 + 8 >> 2];
  $15 = Math_fround($11 * $13);
  $11 = HEAPF32[$0 + 40 >> 2];
  $7 = Math_fround($11 - $4);
  $18 = HEAPF32[$2 + 4 >> 2];
  $14 = Math_fround($14 + Math_fround(Math_fround(Math_fround($17 - $3) * Math_fround($15 - Math_fround($7 * $5))) + Math_fround(Math_fround($18 - $6) * Math_fround(Math_fround($7 * $12) - Math_fround($10 * $13)))));
  $10 = HEAPF32[$0 + 8 >> 2];
  $4 = Math_fround($4 - $10);
  $7 = HEAPF32[$0 >> 2];
  $15 = Math_fround($3 - $7);
  $3 = HEAPF32[$0 + 4 >> 2];
  $6 = Math_fround($6 - $3);
  $4 = Math_fround(Math_fround(Math_fround($8 - $10) * Math_fround(Math_fround($15 * $5) - Math_fround($6 * $12))) + Math_fround(Math_fround(Math_fround($17 - $7) * Math_fround(Math_fround($6 * $13) - Math_fround($4 * $5))) + Math_fround(Math_fround($18 - $3) * Math_fround(Math_fround($4 * $12) - Math_fround($15 * $13)))));
  $0 = 1;
  $6 = Math_fround($8 - $11);
  $8 = Math_fround($7 - $9);
  $3 = Math_fround($3 - $16);
  $7 = Math_fround($17 - $9);
  $9 = Math_fround($10 - $11);
  $5 = Math_fround(Math_fround($6 * Math_fround(Math_fround($8 * $5) - Math_fround($3 * $12))) + Math_fround(Math_fround($7 * Math_fround(Math_fround($3 * $13) - Math_fround($9 * $5))) + Math_fround(Math_fround($18 - $16) * Math_fround(Math_fround($9 * $12) - Math_fround($8 * $13)))));
  label$1 : {
   label$2 : {
    if (!($5 > Math_fround(0.0))) {
     break label$2
    }
    if (!($4 > Math_fround(0.0))) {
     break label$2
    }
    if ($14 > Math_fround(0.0)) {
     break label$1
    }
   }
   $0 = $4 <= Math_fround(0.0) & $14 <= Math_fround(0.0) & $5 <= Math_fround(0.0);
  }
  return $0;
 }
 
 function btSphereTriangleCollisionAlgorithm__btSphereTriangleCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, $4, $5) {
  btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $2);
  HEAP8[$0 + 16 | 0] = $5;
  HEAP32[$0 + 12 >> 2] = $1;
  HEAP8[$0 + 8 | 0] = 0;
  HEAP32[$0 >> 2] = 17308;
  if (!$1) {
   $1 = HEAP32[$0 + 4 >> 2];
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$3 + 8 >> 2], HEAP32[$4 + 8 >> 2]) | 0;
   HEAP8[$0 + 8 | 0] = 1;
   HEAP32[$0 + 12 >> 2] = $1;
  }
 }
 
 function btSphereTriangleCollisionAlgorithm___btSphereTriangleCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17308;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  return $0 | 0;
 }
 
 function btSphereTriangleCollisionAlgorithm___btSphereTriangleCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17308;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  operator_20delete_28void__29($0);
 }
 
 function btSphereTriangleCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $6 = global$0 - 160 | 0;
  global$0 = $6;
  $9 = HEAP32[$0 + 12 >> 2];
  label$1 : {
   if (!$9) {
    break label$1
   }
   HEAP32[$4 + 4 >> 2] = $9;
   $5 = HEAPU8[$0 + 16 | 0];
   $7 = $5 ? $2 : $1;
   $8 = HEAP32[$7 + 4 >> 2];
   $2 = $5 ? $1 : $2;
   $5 = HEAP32[$2 + 4 >> 2];
   $1 = $6 + 144 | 0;
   HEAPF32[$1 + 12 >> 2] = HEAPF32[$9 + 784 >> 2] + HEAPF32[$4 + 32 >> 2];
   HEAP32[$1 + 8 >> 2] = $5;
   HEAP32[$1 + 4 >> 2] = $8;
   HEAP32[$1 >> 2] = 17248;
   $9 = $1;
   HEAP32[$6 + 136 >> 2] = 1566444395;
   $1 = HEAP32[$7 + 12 >> 2];
   $5 = $1;
   $12 = HEAP32[$5 >> 2];
   $13 = HEAP32[$5 + 4 >> 2];
   $5 = $5 + 8 | 0;
   $10 = HEAP32[$5 >> 2];
   $11 = HEAP32[$5 + 4 >> 2];
   $5 = $1 + 24 | 0;
   $8 = HEAP32[$5 >> 2];
   $7 = HEAP32[$5 + 4 >> 2];
   $5 = $6 + 32 | 0;
   HEAP32[$5 >> 2] = $8;
   HEAP32[$5 + 4 >> 2] = $7;
   $5 = $6 + 16 | 0;
   HEAP32[$5 >> 2] = $10;
   HEAP32[$5 + 4 >> 2] = $11;
   $10 = HEAP32[$1 + 16 >> 2];
   $11 = HEAP32[$1 + 20 >> 2];
   $5 = $1 + 40 | 0;
   $8 = HEAP32[$5 >> 2];
   $7 = HEAP32[$5 + 4 >> 2];
   $5 = $6 + 48 | 0;
   HEAP32[$5 >> 2] = $8;
   HEAP32[$5 + 4 >> 2] = $7;
   $14 = HEAP32[$1 + 32 >> 2];
   $8 = HEAP32[$1 + 36 >> 2];
   $5 = $1 + 56 | 0;
   $15 = HEAP32[$5 >> 2];
   $7 = HEAP32[$5 + 4 >> 2];
   $5 = $6 - -64 | 0;
   HEAP32[$5 >> 2] = $15;
   HEAP32[$5 + 4 >> 2] = $7;
   HEAP32[$6 + 8 >> 2] = $12;
   HEAP32[$6 + 12 >> 2] = $13;
   HEAP32[$6 + 24 >> 2] = $10;
   HEAP32[$6 + 28 >> 2] = $11;
   HEAP32[$6 + 40 >> 2] = $14;
   HEAP32[$6 + 44 >> 2] = $8;
   $5 = HEAP32[$1 + 52 >> 2];
   HEAP32[$6 + 56 >> 2] = HEAP32[$1 + 48 >> 2];
   HEAP32[$6 + 60 >> 2] = $5;
   $1 = HEAP32[$2 + 12 >> 2];
   $5 = $1 + 8 | 0;
   $2 = HEAP32[$5 >> 2];
   $7 = HEAP32[$5 + 4 >> 2];
   $5 = $6 + 80 | 0;
   HEAP32[$5 >> 2] = $2;
   HEAP32[$5 + 4 >> 2] = $7;
   $5 = HEAP32[$1 + 4 >> 2];
   HEAP32[$6 + 72 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$6 + 76 >> 2] = $5;
   $5 = $1 + 24 | 0;
   $2 = HEAP32[$5 >> 2];
   $7 = HEAP32[$5 + 4 >> 2];
   $5 = $6 + 96 | 0;
   HEAP32[$5 >> 2] = $2;
   HEAP32[$5 + 4 >> 2] = $7;
   $5 = HEAP32[$1 + 20 >> 2];
   $7 = $6 + 88 | 0;
   HEAP32[$7 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$7 + 4 >> 2] = $5;
   $5 = $1 + 40 | 0;
   $2 = HEAP32[$5 >> 2];
   $7 = HEAP32[$5 + 4 >> 2];
   $5 = $6 + 112 | 0;
   HEAP32[$5 >> 2] = $2;
   HEAP32[$5 + 4 >> 2] = $7;
   $5 = HEAP32[$1 + 36 >> 2];
   $7 = $6 + 104 | 0;
   HEAP32[$7 >> 2] = HEAP32[$1 + 32 >> 2];
   HEAP32[$7 + 4 >> 2] = $5;
   $7 = HEAP32[$1 + 52 >> 2];
   $5 = $6 + 120 | 0;
   HEAP32[$5 >> 2] = HEAP32[$1 + 48 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $5 = $1 + 56 | 0;
   $1 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $7 = $6 + 128 | 0;
   HEAP32[$7 >> 2] = $1;
   HEAP32[$7 + 4 >> 2] = $5;
   SphereTriangleDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($9, $6 + 8 | 0, $4, HEAP32[$3 + 20 >> 2], HEAPU8[$0 + 16 | 0]);
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$4 + 4 >> 2];
   if (!HEAP32[$1 + 780 >> 2]) {
    break label$1
   }
   $2 = HEAP32[$1 + 772 >> 2];
   $0 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
   if (($2 | 0) != ($0 | 0)) {
    btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($1, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $0 + 4 | 0);
    break label$1;
   }
   btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($1, $2 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
  }
  global$0 = $6 + 160 | 0;
 }
 
 function atanf($0) {
  var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0);
  $1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $5 = $1 >>> 31;
  $1 = $1 & 2147483647;
  label$1 : {
   if ($1 >>> 0 >= 1283457024) {
    if ($0 != $0) {
     break label$1
    }
    return $5 ? Math_fround(-1.570796251296997) : Math_fround(1.570796251296997);
   }
   label$3 : {
    if ($1 >>> 0 <= 1054867455) {
     $3 = -1;
     if ($1 >>> 0 >= 964689920) {
      break label$3
     }
     break label$1;
    }
    $0 = Math_fround(Math_abs($0));
    if ($1 >>> 0 <= 1066926079) {
     if ($1 >>> 0 <= 1060110335) {
      $0 = Math_fround(Math_fround(Math_fround($0 + $0) + Math_fround(-1.0)) / Math_fround($0 + Math_fround(2.0)));
      $3 = 0;
      break label$3;
     }
     $0 = Math_fround(Math_fround($0 + Math_fround(-1.0)) / Math_fround($0 + Math_fround(1.0)));
     $3 = 1;
     break label$3;
    }
    if ($1 >>> 0 <= 1075576831) {
     $0 = Math_fround(Math_fround($0 + Math_fround(-1.5)) / Math_fround(Math_fround($0 * Math_fround(1.5)) + Math_fround(1.0)));
     $3 = 2;
     break label$3;
    }
    $0 = Math_fround(Math_fround(-1.0) / $0);
    $3 = 3;
   }
   $1 = $3;
   $4 = Math_fround($0 * $0);
   $2 = Math_fround($4 * $4);
   $6 = Math_fround($2 * Math_fround(Math_fround($2 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
   $2 = Math_fround($4 * Math_fround(Math_fround($2 * Math_fround(Math_fround($2 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
   if (($1 | 0) <= -1) {
    return Math_fround($0 - Math_fround($0 * Math_fround($6 + $2)))
   }
   $1 = $1 << 2;
   $0 = Math_fround(HEAPF32[$1 + 17392 >> 2] - Math_fround(Math_fround(Math_fround($0 * Math_fround($6 + $2)) - HEAPF32[$1 + 17408 >> 2]) - $0));
   $0 = $5 ? Math_fround(-$0) : $0;
  }
  return $0;
 }
 
 function atan2f($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0;
  if (!($1 == $1 & $0 == $0)) {
   return Math_fround($0 + $1)
  }
  $2 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0));
  if (($2 | 0) == 1065353216) {
   return atanf($0)
  }
  $7 = $2 >>> 30 & 2;
  $3 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $5 = $3 >>> 31;
  $4 = $7 | $5;
  label$3 : {
   label$4 : {
    label$5 : {
     $3 = $3 & 2147483647;
     if (!$3) {
      label$7 : {
       switch ($4 - 2 | 0) {
       case 0:
        break label$5;
       case 1:
        break label$7;
       default:
        break label$4;
       };
      }
      return Math_fround(-3.1415927410125732);
     }
     $2 = $2 & 2147483647;
     if (($2 | 0) != 2139095040) {
      if (!$2) {
       return $5 ? Math_fround(-1.5707963705062866) : Math_fround(1.5707963705062866)
      }
      if (!($2 + 218103808 >>> 0 >= $3 >>> 0 ? ($3 | 0) != 2139095040 : 0)) {
       return $5 ? Math_fround(-1.5707963705062866) : Math_fround(1.5707963705062866)
      }
      label$12 : {
       if ($3 + 218103808 >>> 0 < $2 >>> 0) {
        $6 = Math_fround(0.0);
        if ($7) {
         break label$12
        }
       }
       $6 = atanf(Math_fround(Math_abs(Math_fround($0 / $1))));
      }
      $1 = $6;
      if ($4 >>> 0 <= 2) {
       $0 = $1;
       label$15 : {
        switch ($4 - 1 | 0) {
        case 0:
         return Math_fround(-$1);
        case 1:
         break label$15;
        default:
         break label$4;
        };
       }
       return Math_fround(Math_fround(3.1415927410125732) - Math_fround($1 + Math_fround(8.742277657347586e-08)));
      }
      return Math_fround(Math_fround($1 + Math_fround(8.742277657347586e-08)) + Math_fround(-3.1415927410125732));
     }
     if (($3 | 0) == 2139095040) {
      break label$3
     }
     return HEAPF32[($4 << 2) + 17440 >> 2];
    }
    $0 = Math_fround(3.1415927410125732);
   }
   return $0;
  }
  return HEAPF32[($4 << 2) + 17424 >> 2];
 }
 
 function cullPoints2_28int_2c_20float__2c_20int_2c_20int_2c_20int__29($0, $1, $2, $3, $4) {
  var $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $9 = global$0 + -64 | 0;
  global$0 = $9;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $7 = $0 + -1 | 0;
        if ($7 >>> 0 <= 1) {
         if ($7 - 1) {
          break label$3
         }
         break label$6;
        }
        if (($7 | 0) >= 1) {
         break label$5
        }
        break label$4;
       }
       $8 = Math_fround(Math_fround(HEAPF32[$1 >> 2] + HEAPF32[$1 + 8 >> 2]) * Math_fround(.5));
       $5 = Math_fround(Math_fround(HEAPF32[$1 + 4 >> 2] + HEAPF32[$1 + 12 >> 2]) * Math_fround(.5));
       break label$2;
      }
      $6 = $1;
      while (1) {
       $5 = HEAPF32[$6 + 12 >> 2];
       $10 = HEAPF32[$6 + 4 >> 2];
       $13 = Math_fround($5 + $10);
       $11 = HEAPF32[$6 >> 2];
       $6 = $6 + 8 | 0;
       $12 = HEAPF32[$6 >> 2];
       $5 = Math_fround(Math_fround($11 * $5) - Math_fround($12 * $10));
       $14 = Math_fround($14 + Math_fround($13 * $5));
       $8 = Math_fround($8 + $5);
       $15 = Math_fround($15 + Math_fround(Math_fround($11 + $12) * $5));
       $7 = $7 + -1 | 0;
       if ($7) {
        continue
       }
       break;
      };
     }
     $10 = Math_fround(999999984306749440.0);
     $6 = $1 + ($0 << 3) | 0;
     $12 = HEAPF32[$6 + -8 >> 2];
     $5 = HEAPF32[$1 + 4 >> 2];
     $17 = HEAPF32[$1 >> 2];
     $13 = HEAPF32[$6 + -4 >> 2];
     $11 = Math_fround(Math_fround($12 * $5) - Math_fround($17 * $13));
     $8 = Math_fround($8 + $11);
     if (!!(Math_fround(Math_abs($8)) > Math_fround(1.1920928955078125e-07))) {
      $10 = Math_fround(Math_fround(1.0) / Math_fround($8 * Math_fround(3.0)))
     }
     $7 = 0;
     if (($0 | 0) <= 0) {
      break label$1
     }
     $8 = Math_fround(Math_fround($15 + Math_fround(Math_fround($12 + $17) * $11)) * $10);
     $5 = Math_fround(Math_fround($14 + Math_fround(Math_fround($5 + $13) * $11)) * $10);
     break label$2;
    }
    $8 = HEAPF32[$1 >> 2];
    $5 = HEAPF32[$1 + 4 >> 2];
   }
   $6 = $9 + 32 | 0;
   $7 = $0;
   while (1) {
    (wasm2js_i32$0 = $6, wasm2js_f32$0 = atan2f(Math_fround(HEAPF32[$1 + 4 >> 2] - $5), Math_fround(HEAPF32[$1 >> 2] - $8))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
    $1 = $1 + 8 | 0;
    $6 = $6 + 4 | 0;
    $7 = $7 + -1 | 0;
    if ($7) {
     continue
    }
    break;
   };
   $1 = $9;
   $6 = $0;
   while (1) {
    $7 = 1;
    HEAP32[$1 >> 2] = 1;
    $1 = $1 + 4 | 0;
    $6 = $6 + -1 | 0;
    if ($6) {
     continue
    }
    break;
   };
  }
  HEAP32[$4 >> 2] = $3;
  $1 = $3 << 2;
  $6 = $1 + $9 | 0;
  HEAP32[$6 >> 2] = 0;
  label$12 : {
   if (($2 | 0) < 2) {
    break label$12
   }
   $4 = $4 + 4 | 0;
   if (!$7) {
    $1 = $2 + -1 | 0;
    while (1) {
     HEAP32[$4 >> 2] = $3;
     HEAP32[$6 >> 2] = 0;
     $4 = $4 + 4 | 0;
     $1 = $1 + -1 | 0;
     if ($1) {
      continue
     }
     break;
    };
    break label$12;
   }
   $14 = Math_fround(Math_fround(6.2831854820251465) / Math_fround($2 | 0));
   $10 = HEAPF32[$1 + ($9 + 32 | 0) >> 2];
   $16 = 1;
   while (1) {
    HEAP32[$4 >> 2] = $3;
    $5 = Math_fround(Math_fround($14 * Math_fround($16 | 0)) + $10);
    $15 = $5 > Math_fround(3.1415927410125732) ? Math_fround($5 + Math_fround(-6.2831854820251465)) : $5;
    $8 = Math_fround(1.0e9);
    $6 = $9 + 32 | 0;
    $1 = $9;
    $18 = $3;
    $7 = 0;
    while (1) {
     label$17 : {
      if (!HEAP32[$1 >> 2]) {
       break label$17
      }
      $5 = Math_fround(Math_abs(Math_fround(HEAPF32[$6 >> 2] - $15)));
      $5 = $5 > Math_fround(3.1415927410125732) ? Math_fround(Math_fround(6.2831854820251465) - $5) : $5;
      if (!($5 < $8)) {
       break label$17
      }
      HEAP32[$4 >> 2] = $7;
      $18 = $7;
      $8 = $5;
     }
     $1 = $1 + 4 | 0;
     $6 = $6 + 4 | 0;
     $7 = $7 + 1 | 0;
     if (($7 | 0) != ($0 | 0)) {
      continue
     }
     break;
    };
    HEAP32[($18 << 2) + $9 >> 2] = 0;
    $4 = $4 + 4 | 0;
    $16 = $16 + 1 | 0;
    if (($2 | 0) != ($16 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $9 - -64 | 0;
 }
 
 function dBoxBox2_28btVector3_20const__2c_20float_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_20const__2c_20btVector3_20const__2c_20btVector3__2c_20float__2c_20int__2c_20int_2c_20dContactGeom__2c_20int_2c_20btDiscreteCollisionDetectorInterface__Result__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = 0, $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = 0, $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0), $53 = Math_fround(0), $54 = Math_fround(0), $55 = Math_fround(0), $56 = Math_fround(0), $57 = Math_fround(0), $58 = Math_fround(0), $59 = Math_fround(0), $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
  $10 = global$0 - 368 | 0;
  global$0 = $10;
  $29 = Math_fround(HEAPF32[$2 >> 2] * Math_fround(.5));
  HEAPF32[$10 + 356 >> 2] = $29;
  $15 = HEAPF32[$1 + 36 >> 2];
  $21 = $1 + 4 | 0;
  $17 = HEAPF32[$21 >> 2];
  $19 = HEAPF32[$1 + 20 >> 2];
  $18 = HEAPF32[$1 + 40 >> 2];
  $20 = $1 + 8 | 0;
  $23 = HEAPF32[$20 >> 2];
  $32 = HEAPF32[$1 + 24 >> 2];
  $12 = HEAPF32[$1 + 16 >> 2];
  $11 = HEAPF32[$1 + 32 >> 2];
  $14 = HEAPF32[$0 >> 2];
  $16 = HEAPF32[$3 >> 2];
  $22 = HEAPF32[$0 + 4 >> 2];
  $34 = HEAPF32[$3 + 4 >> 2];
  $24 = HEAPF32[$0 + 8 >> 2];
  $30 = HEAPF32[$3 + 8 >> 2];
  $13 = HEAPF32[$1 >> 2];
  $38 = Math_fround(HEAPF32[$2 + 4 >> 2] * Math_fround(.5));
  HEAPF32[$10 + 360 >> 2] = $38;
  $39 = Math_fround(HEAPF32[$2 + 8 >> 2] * Math_fround(.5));
  HEAPF32[$10 + 364 >> 2] = $39;
  $27 = Math_fround(HEAPF32[$5 >> 2] * Math_fround(.5));
  HEAPF32[$10 + 344 >> 2] = $27;
  $25 = Math_fround(HEAPF32[$5 + 4 >> 2] * Math_fround(.5));
  HEAPF32[$10 + 348 >> 2] = $25;
  $26 = Math_fround(HEAPF32[$5 + 8 >> 2] * Math_fround(.5));
  HEAPF32[$10 + 352 >> 2] = $26;
  $14 = Math_fround($16 - $14);
  $16 = Math_fround($34 - $22);
  $22 = Math_fround($30 - $24);
  $44 = Math_fround(Math_fround(Math_fround($13 * $14) + Math_fround($12 * $16)) + Math_fround($11 * $22));
  $34 = HEAPF32[$4 >> 2];
  $24 = HEAPF32[$4 + 16 >> 2];
  $30 = HEAPF32[$4 + 32 >> 2];
  $46 = Math_fround(Math_fround(Math_fround($13 * $34) + Math_fround($12 * $24)) + Math_fround($11 * $30));
  $42 = Math_fround(Math_abs($46));
  $28 = HEAPF32[$4 + 4 >> 2];
  $35 = HEAPF32[$4 + 20 >> 2];
  $33 = HEAPF32[$4 + 36 >> 2];
  $47 = Math_fround(Math_fround(Math_fround($13 * $28) + Math_fround($12 * $35)) + Math_fround($11 * $33));
  $54 = Math_fround(Math_abs($47));
  $37 = HEAPF32[$4 + 8 >> 2];
  $43 = HEAPF32[$4 + 24 >> 2];
  $41 = Math_fround(Math_fround($13 * $37) + Math_fround($12 * $43));
  $12 = HEAPF32[$4 + 40 >> 2];
  $48 = Math_fround($41 + Math_fround($11 * $12));
  $55 = Math_fround(Math_abs($48));
  $11 = Math_fround(Math_fround(Math_abs($44)) - Math_fround(Math_fround(Math_fround($29 + Math_fround($27 * $42)) + Math_fround($25 * $54)) + Math_fround($26 * $55)));
  label$1 : {
   if ($11 > Math_fround(0.0)) {
    break label$1
   }
   $41 = Math_fround(Math_fround(Math_fround($14 * $17) + Math_fround($16 * $19)) + Math_fround($22 * $15));
   $49 = Math_fround(Math_fround(Math_fround($17 * $37) + Math_fround($19 * $43)) + Math_fround($15 * $12));
   $57 = Math_fround(Math_abs($49));
   $50 = Math_fround(Math_fround(Math_fround($17 * $28) + Math_fround($19 * $35)) + Math_fround($15 * $33));
   $56 = Math_fround(Math_abs($50));
   $51 = Math_fround(Math_fround(Math_fround($17 * $34) + Math_fround($19 * $24)) + Math_fround($15 * $30));
   $17 = Math_fround(Math_abs($51));
   $15 = Math_fround(-3402823466385288598117041.0e14);
   $2 = 0;
   if (!!($11 > Math_fround(-3402823466385288598117041.0e14))) {
    $36 = $44 < Math_fround(0.0);
    $15 = $11;
    $31 = $1;
    $2 = 1;
   }
   $11 = Math_fround(Math_fround(Math_abs($41)) - Math_fround(Math_fround(Math_fround($38 + Math_fround($27 * $17)) + Math_fround($25 * $56)) + Math_fround($26 * $57)));
   if ($11 > Math_fround(0.0)) {
    break label$1
   }
   $45 = Math_fround(Math_fround(Math_fround($14 * $23) + Math_fround($16 * $32)) + Math_fround($22 * $18));
   $52 = Math_fround(Math_fround(Math_fround($23 * $37) + Math_fround($32 * $43)) + Math_fround($18 * $12));
   $58 = Math_fround(Math_abs($52));
   $53 = Math_fround(Math_fround(Math_fround($23 * $28) + Math_fround($32 * $35)) + Math_fround($18 * $33));
   $59 = Math_fround(Math_abs($53));
   $18 = Math_fround(Math_fround(Math_fround($23 * $34) + Math_fround($32 * $24)) + Math_fround($18 * $30));
   $19 = Math_fround(Math_abs($18));
   if (!!($11 > $15)) {
    $36 = $41 < Math_fround(0.0);
    $15 = $11;
    $31 = $21;
    $2 = 2;
   }
   $11 = Math_fround(Math_fround(Math_abs($45)) - Math_fround(Math_fround(Math_fround($39 + Math_fround($27 * $19)) + Math_fround($25 * $59)) + Math_fround($26 * $58)));
   if ($11 > Math_fround(0.0)) {
    break label$1
   }
   if (!!($11 > $15)) {
    $36 = $45 < Math_fround(0.0);
    $15 = $11;
    $31 = $20;
    $2 = 3;
   }
   $23 = Math_fround(Math_fround(Math_fround($14 * $34) + Math_fround($16 * $24)) + Math_fround($22 * $30));
   $11 = Math_fround(Math_fround(Math_abs($23)) - Math_fround($27 + Math_fround(Math_fround($39 * $19) + Math_fround(Math_fround($29 * $42) + Math_fround($38 * $17)))));
   if ($11 > Math_fround(0.0)) {
    break label$1
   }
   if (!!($11 > $15)) {
    $36 = $23 < Math_fround(0.0);
    $15 = $11;
    $31 = $4;
    $2 = 4;
   }
   $23 = Math_fround(Math_fround(Math_fround($14 * $28) + Math_fround($16 * $35)) + Math_fround($22 * $33));
   $11 = Math_fround(Math_fround(Math_abs($23)) - Math_fround($25 + Math_fround(Math_fround($39 * $59) + Math_fround(Math_fround($29 * $54) + Math_fround($38 * $56)))));
   if ($11 > Math_fround(0.0)) {
    break label$1
   }
   if (!!($11 > $15)) {
    $31 = $4 + 4 | 0;
    $36 = $23 < Math_fround(0.0);
    $15 = $11;
    $2 = 5;
   }
   $11 = Math_fround(Math_fround(Math_fround($14 * $37) + Math_fround($16 * $43)) + Math_fround($22 * $12));
   $12 = Math_fround(Math_fround(Math_abs($11)) - Math_fround($26 + Math_fround(Math_fround($39 * $58) + Math_fround(Math_fround($29 * $55) + Math_fround($38 * $57)))));
   if ($12 > Math_fround(0.0)) {
    break label$1
   }
   if (!!($12 > $15)) {
    $31 = $4 + 8 | 0;
    $36 = $11 < Math_fround(0.0);
    $15 = $12;
    $2 = 6;
   }
   $14 = Math_fround(Math_fround($45 * $51) - Math_fround($41 * $18));
   $23 = Math_fround($54 + Math_fround(9.999999747378752e-06));
   $32 = Math_fround($19 + Math_fround(9.999999747378752e-06));
   $22 = Math_fround($17 + Math_fround(9.999999747378752e-06));
   $12 = Math_fround($55 + Math_fround(9.999999747378752e-06));
   $17 = Math_fround(Math_fround(Math_abs($14)) - Math_fround(Math_fround($26 * $23) + Math_fround(Math_fround(Math_fround($38 * $32) + Math_fround($39 * $22)) + Math_fround($25 * $12))));
   if ($17 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $34 = Math_fround($59 + Math_fround(9.999999747378752e-06));
   $19 = Math_fround($56 + Math_fround(9.999999747378752e-06));
   $11 = Math_fround($42 + Math_fround(9.999999747378752e-06));
   $24 = Math_fround(0.0);
   $43 = Math_fround($51 * $51);
   $35 = Math_fround(Math_fround($18 * $18) + Math_fround(0.0));
   $16 = Math_fround(Math_sqrt(Math_fround($43 + $35)));
   label$8 : {
    if (!($16 > Math_fround(1.1920928955078125e-07))) {
     $30 = Math_fround(0.0);
     $28 = Math_fround(0.0);
     break label$8;
    }
    $30 = Math_fround(0.0);
    $17 = Math_fround($17 / $16);
    $28 = Math_fround(0.0);
    if (!(Math_fround($17 * Math_fround(1.0499999523162842)) > $15)) {
     break label$8
    }
    $36 = $14 < Math_fround(0.0);
    $30 = Math_fround(Math_fround(-$18) / $16);
    $24 = Math_fround(Math_fround(0.0) / $16);
    $31 = 0;
    $2 = 7;
    $15 = $17;
    $28 = Math_fround($51 / $16);
   }
   $16 = Math_fround(Math_fround($45 * $50) - Math_fround($41 * $53));
   $14 = Math_fround(Math_fround(Math_abs($16)) - Math_fround(Math_fround($26 * $11) + Math_fround(Math_fround(Math_fround($38 * $34) + Math_fround($39 * $19)) + Math_fround($27 * $12))));
   if ($14 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $37 = Math_fround($58 + Math_fround(9.999999747378752e-06));
   $17 = Math_fround($57 + Math_fround(9.999999747378752e-06));
   $54 = Math_fround($50 * $50);
   $42 = Math_fround(Math_fround($53 * $53) + Math_fround(0.0));
   $33 = Math_fround(Math_sqrt(Math_fround($54 + $42)));
   label$10 : {
    if (!($33 > Math_fround(1.1920928955078125e-07))) {
     break label$10
    }
    $14 = Math_fround($14 / $33);
    if (!(Math_fround($14 * Math_fround(1.0499999523162842)) > $15)) {
     break label$10
    }
    $36 = $16 < Math_fround(0.0);
    $28 = Math_fround($50 / $33);
    $30 = Math_fround(Math_fround(-$53) / $33);
    $24 = Math_fround(Math_fround(0.0) / $33);
    $31 = 0;
    $2 = 8;
    $15 = $14;
   }
   $16 = Math_fround(Math_fround($45 * $49) - Math_fround($41 * $52));
   $14 = Math_fround(Math_fround(Math_abs($16)) - Math_fround(Math_fround($25 * $11) + Math_fround(Math_fround($27 * $23) + Math_fround(Math_fround($38 * $37) + Math_fround($39 * $17)))));
   if ($14 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $55 = Math_fround($49 * $49);
   $56 = Math_fround(Math_fround($52 * $52) + Math_fround(0.0));
   $33 = Math_fround(Math_sqrt(Math_fround($55 + $56)));
   label$11 : {
    if (!($33 > Math_fround(1.1920928955078125e-07))) {
     break label$11
    }
    $14 = Math_fround($14 / $33);
    if (!(Math_fround($14 * Math_fround(1.0499999523162842)) > $15)) {
     break label$11
    }
    $36 = $16 < Math_fround(0.0);
    $28 = Math_fround($49 / $33);
    $30 = Math_fround(Math_fround(-$52) / $33);
    $24 = Math_fround(Math_fround(0.0) / $33);
    $31 = 0;
    $2 = 9;
    $15 = $14;
   }
   $16 = Math_fround(Math_fround($44 * $18) - Math_fround($45 * $46));
   $14 = Math_fround(Math_fround(Math_abs($16)) - Math_fround(Math_fround($26 * $19) + Math_fround(Math_fround(Math_fround($29 * $32) + Math_fround($39 * $11)) + Math_fround($25 * $17))));
   if ($14 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $33 = Math_fround($46 * $46);
   $35 = Math_fround(Math_sqrt(Math_fround($33 + $35)));
   label$12 : {
    if (!($35 > Math_fround(1.1920928955078125e-07))) {
     break label$12
    }
    $14 = Math_fround($14 / $35);
    if (!(Math_fround($14 * Math_fround(1.0499999523162842)) > $15)) {
     break label$12
    }
    $36 = $16 < Math_fround(0.0);
    $28 = Math_fround(Math_fround(-$46) / $35);
    $30 = Math_fround(Math_fround(0.0) / $35);
    $24 = Math_fround($18 / $35);
    $31 = 0;
    $2 = 10;
    $15 = $14;
   }
   $14 = Math_fround(Math_fround($44 * $53) - Math_fround($45 * $47));
   $18 = Math_fround(Math_fround(Math_abs($14)) - Math_fround(Math_fround($26 * $22) + Math_fround(Math_fround(Math_fround($29 * $34) + Math_fround($39 * $23)) + Math_fround($27 * $17))));
   if ($18 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $35 = Math_fround($47 * $47);
   $16 = Math_fround(Math_sqrt(Math_fround($35 + $42)));
   label$13 : {
    if (!($16 > Math_fround(1.1920928955078125e-07))) {
     break label$13
    }
    $18 = Math_fround($18 / $16);
    if (!(Math_fround($18 * Math_fround(1.0499999523162842)) > $15)) {
     break label$13
    }
    $36 = $14 < Math_fround(0.0);
    $28 = Math_fround(Math_fround(-$47) / $16);
    $30 = Math_fround(Math_fround(0.0) / $16);
    $24 = Math_fround($53 / $16);
    $31 = 0;
    $2 = 11;
    $15 = $18;
   }
   $14 = Math_fround(Math_fround($44 * $52) - Math_fround($45 * $48));
   $18 = Math_fround(Math_fround(Math_abs($14)) - Math_fround(Math_fround($25 * $22) + Math_fround(Math_fround($27 * $19) + Math_fround(Math_fround($29 * $37) + Math_fround($39 * $12)))));
   if ($18 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $42 = Math_fround($48 * $48);
   $16 = Math_fround(Math_sqrt(Math_fround($42 + $56)));
   label$14 : {
    if (!($16 > Math_fround(1.1920928955078125e-07))) {
     break label$14
    }
    $18 = Math_fround($18 / $16);
    if (!(Math_fround($18 * Math_fround(1.0499999523162842)) > $15)) {
     break label$14
    }
    $36 = $14 < Math_fround(0.0);
    $28 = Math_fround(Math_fround(-$48) / $16);
    $30 = Math_fround(Math_fround(0.0) / $16);
    $24 = Math_fround($52 / $16);
    $31 = 0;
    $2 = 12;
    $15 = $18;
   }
   $18 = Math_fround(Math_fround($41 * $46) - Math_fround($44 * $51));
   $11 = Math_fround(Math_fround(Math_abs($18)) - Math_fround(Math_fround($26 * $34) + Math_fround(Math_fround(Math_fround($29 * $22) + Math_fround($38 * $11)) + Math_fround($25 * $37))));
   if ($11 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $14 = Math_fround(Math_sqrt(Math_fround(Math_fround($43 + $33) + Math_fround(0.0))));
   label$15 : {
    if (!($14 > Math_fround(1.1920928955078125e-07))) {
     break label$15
    }
    $11 = Math_fround($11 / $14);
    if (!(Math_fround($11 * Math_fround(1.0499999523162842)) > $15)) {
     break label$15
    }
    $36 = $18 < Math_fround(0.0);
    $28 = Math_fround(Math_fround(0.0) / $14);
    $30 = Math_fround($46 / $14);
    $24 = Math_fround(Math_fround(-$51) / $14);
    $31 = 0;
    $2 = 13;
    $15 = $11;
   }
   $18 = Math_fround(Math_fround($41 * $47) - Math_fround($44 * $50));
   $11 = Math_fround(Math_fround(Math_abs($18)) - Math_fround(Math_fround($26 * $32) + Math_fround(Math_fround(Math_fround($29 * $19) + Math_fround($38 * $23)) + Math_fround($27 * $37))));
   if ($11 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   $19 = Math_fround(Math_sqrt(Math_fround(Math_fround($54 + $35) + Math_fround(0.0))));
   label$16 : {
    if (!($19 > Math_fround(1.1920928955078125e-07))) {
     break label$16
    }
    $11 = Math_fround($11 / $19);
    if (!(Math_fround($11 * Math_fround(1.0499999523162842)) > $15)) {
     break label$16
    }
    $36 = $18 < Math_fround(0.0);
    $28 = Math_fround(Math_fround(0.0) / $19);
    $30 = Math_fround($47 / $19);
    $24 = Math_fround(Math_fround(-$50) / $19);
    $31 = 0;
    $2 = 14;
    $15 = $11;
   }
   $11 = Math_fround(Math_fround($41 * $48) - Math_fround($44 * $49));
   $12 = Math_fround(Math_fround(Math_abs($11)) - Math_fround(Math_fround($25 * $32) + Math_fround(Math_fround($27 * $34) + Math_fround(Math_fround($29 * $17) + Math_fround($38 * $12)))));
   if ($12 > Math_fround(1.1920928955078125e-07)) {
    break label$1
   }
   label$17 : {
    label$18 : {
     label$19 : {
      label$20 : {
       $17 = Math_fround(Math_sqrt(Math_fround(Math_fround($55 + $42) + Math_fround(0.0))));
       if (!($17 > Math_fround(1.1920928955078125e-07))) {
        break label$20
       }
       $19 = Math_fround($12 / $17);
       if (!(Math_fround($19 * Math_fround(1.0499999523162842)) > $15)) {
        break label$20
       }
       $36 = $11 < Math_fround(0.0);
       $28 = Math_fround(Math_fround(0.0) / $17);
       $30 = Math_fround($48 / $17);
       $24 = Math_fround(Math_fround(-$49) / $17);
       $2 = 15;
       break label$19;
      }
      if (!$2) {
       break label$1
      }
      if ($31) {
       break label$18
      }
      $19 = $15;
     }
     $13 = Math_fround(Math_fround(Math_fround($13 * $24) + Math_fround($30 * HEAPF32[$1 + 4 >> 2])) + Math_fround($28 * HEAPF32[$1 + 8 >> 2]));
     HEAPF32[$6 >> 2] = $13;
     $12 = Math_fround(Math_fround(Math_fround($24 * HEAPF32[$1 + 16 >> 2]) + Math_fround($30 * HEAPF32[$1 + 20 >> 2])) + Math_fround($28 * HEAPF32[$1 + 24 >> 2]));
     HEAPF32[$6 + 4 >> 2] = $12;
     $11 = Math_fround(Math_fround(Math_fround($24 * HEAPF32[$1 + 32 >> 2]) + Math_fround($30 * HEAPF32[$1 + 36 >> 2])) + Math_fround($28 * HEAPF32[$1 + 40 >> 2]));
     HEAPF32[$6 + 8 >> 2] = $11;
     break label$17;
    }
    $13 = HEAPF32[$31 >> 2];
    $5 = HEAP32[$31 >> 2];
    HEAP32[$6 >> 2] = $5;
    $12 = HEAPF32[$31 + 16 >> 2];
    $21 = HEAP32[$31 + 16 >> 2];
    HEAP32[$6 + 4 >> 2] = $21;
    $11 = HEAPF32[$31 + 32 >> 2];
    $20 = HEAP32[$31 + 32 >> 2];
    HEAP32[$6 + 8 >> 2] = $20;
    $19 = $15;
   }
   if ($36) {
    HEAPF32[$6 + 8 >> 2] = -$11;
    HEAPF32[$6 + 4 >> 2] = -$12;
    HEAPF32[$6 >> 2] = -$13;
   }
   HEAPF32[$7 >> 2] = -$19;
   if (($2 | 0) >= 7) {
    $5 = $10 + 120 | 0;
    HEAP32[$5 >> 2] = HEAP32[$0 + 8 >> 2];
    $7 = HEAP32[$0 >> 2];
    $0 = HEAP32[$0 + 4 >> 2];
    HEAP32[$10 + 112 >> 2] = $7;
    HEAP32[$10 + 116 >> 2] = $0;
    $15 = Math_fround(0.0);
    $29 = HEAPF32[$10 + 112 >> 2];
    $18 = HEAPF32[$10 + 116 >> 2];
    $13 = HEAPF32[$6 >> 2];
    $23 = HEAPF32[$1 >> 2];
    $21 = $6 + 4 | 0;
    $12 = HEAPF32[$21 >> 2];
    $32 = HEAPF32[$1 + 16 >> 2];
    $20 = $6 + 8 | 0;
    $11 = HEAPF32[$20 >> 2];
    $25 = HEAPF32[$1 + 32 >> 2];
    $17 = Math_fround((Math_fround(Math_fround(Math_fround($13 * $23) + Math_fround($12 * $32)) + Math_fround($11 * $25)) > Math_fround(0.0) ? Math_fround(1.0) : Math_fround(-1.0)) * HEAPF32[$10 + 356 >> 2]);
    $28 = Math_fround(HEAPF32[$5 >> 2] + Math_fround($17 * $25));
    $14 = HEAPF32[$1 + 4 >> 2];
    $16 = HEAPF32[$1 + 20 >> 2];
    $26 = HEAPF32[$1 + 36 >> 2];
    $25 = Math_fround((Math_fround(Math_fround(Math_fround($13 * $14) + Math_fround($12 * $16)) + Math_fround($11 * $26)) > Math_fround(0.0) ? Math_fround(1.0) : Math_fround(-1.0)) * HEAPF32[$10 + 360 >> 2]);
    $28 = Math_fround($28 + Math_fround($25 * $26));
    $22 = HEAPF32[$1 + 8 >> 2];
    $34 = HEAPF32[$1 + 24 >> 2];
    $24 = HEAPF32[$1 + 40 >> 2];
    $26 = Math_fround((Math_fround(Math_fround(Math_fround($13 * $22) + Math_fround($12 * $34)) + Math_fround($11 * $24)) > Math_fround(0.0) ? Math_fround(1.0) : Math_fround(-1.0)) * $39);
    HEAPF32[$5 >> 2] = $28 + Math_fround($26 * $24);
    HEAPF32[$10 + 116 >> 2] = Math_fround(Math_fround($18 + Math_fround($17 * $32)) + Math_fround($25 * $16)) + Math_fround($26 * $34);
    HEAPF32[$10 + 112 >> 2] = Math_fround(Math_fround($29 + Math_fround($17 * $23)) + Math_fround($25 * $14)) + Math_fround($26 * $22);
    $0 = $10 + 216 | 0;
    HEAP32[$0 >> 2] = HEAP32[$3 + 8 >> 2];
    $25 = HEAPF32[$4 >> 2];
    $26 = HEAPF32[$4 + 16 >> 2];
    $29 = HEAPF32[$4 + 32 >> 2];
    $17 = Math_fround((Math_fround(Math_fround(Math_fround($13 * $25) + Math_fround($12 * $26)) + Math_fround($11 * $29)) > Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) * $27);
    $14 = Math_fround(HEAPF32[$0 >> 2] + Math_fround($17 * $29));
    $29 = HEAPF32[$4 + 4 >> 2];
    $18 = HEAPF32[$4 + 20 >> 2];
    $23 = HEAPF32[$4 + 36 >> 2];
    $27 = Math_fround((Math_fround(Math_fround(Math_fround($13 * $29) + Math_fround($12 * $18)) + Math_fround($11 * $23)) > Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) * HEAPF32[$10 + 348 >> 2]);
    $14 = Math_fround($14 + Math_fround($27 * $23));
    $23 = HEAPF32[$4 + 8 >> 2];
    $32 = HEAPF32[$4 + 24 >> 2];
    $13 = Math_fround(Math_fround($13 * $23) + Math_fround($12 * $32));
    $12 = HEAPF32[$4 + 40 >> 2];
    $13 = Math_fround((Math_fround($13 + Math_fround($11 * $12)) > Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) * HEAPF32[$10 + 352 >> 2]);
    $12 = Math_fround($14 + Math_fround($13 * $12));
    HEAPF32[$0 >> 2] = $12;
    $0 = HEAP32[$3 + 4 >> 2];
    HEAP32[$10 + 208 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$10 + 212 >> 2] = $0;
    $11 = Math_fround(Math_fround(Math_fround(HEAPF32[$10 + 208 >> 2] + Math_fround($17 * $25)) + Math_fround($27 * $29)) + Math_fround($13 * $23));
    HEAPF32[$10 + 208 >> 2] = $11;
    $13 = Math_fround(Math_fround(Math_fround(HEAPF32[$10 + 212 >> 2] + Math_fround($17 * $26)) + Math_fround($27 * $18)) + Math_fround($13 * $32));
    HEAPF32[$10 + 212 >> 2] = $13;
    $0 = $2 + -7 | 0;
    $3 = ($0 | 0) / 3 | 0;
    $1 = ($3 << 2) + $1 | 0;
    $29 = HEAPF32[$1 >> 2];
    $4 = ($0 - Math_imul($3, 3) << 2) + $4 | 0;
    $17 = HEAPF32[$4 >> 2];
    $18 = HEAPF32[$1 + 16 >> 2];
    $27 = HEAPF32[$4 + 16 >> 2];
    $23 = HEAPF32[$1 + 32 >> 2];
    $25 = HEAPF32[$4 + 32 >> 2];
    $26 = Math_fround(Math_fround(Math_fround($29 * $17) + Math_fround($18 * $27)) + Math_fround($23 * $25));
    $32 = Math_fround(Math_fround(1.0) - Math_fround($26 * $26));
    if (!($32 <= Math_fround(9.999999747378752e-05))) {
     $15 = Math_fround($11 - HEAPF32[$10 + 112 >> 2]);
     $14 = Math_fround($15 * $29);
     $29 = Math_fround($13 - HEAPF32[$10 + 116 >> 2]);
     $14 = Math_fround($14 + Math_fround($29 * $18));
     $18 = Math_fround($12 - HEAPF32[$5 >> 2]);
     $15 = Math_fround(Math_fround(Math_fround(Math_fround($14 + Math_fround($18 * $23)) * $26) - Math_fround(Math_fround(Math_fround($15 * $17) + Math_fround($29 * $27)) + Math_fround($18 * $25))) * Math_fround(Math_fround(1.0) / $32));
    }
    HEAPF32[$10 + 216 >> 2] = $12 + Math_fround($15 * $25);
    HEAPF32[$10 + 212 >> 2] = $13 + Math_fround($15 * $27);
    HEAPF32[$10 + 208 >> 2] = $11 + Math_fround($15 * $17);
    HEAP32[$10 + 284 >> 2] = 0;
    HEAPF32[$10 + 280 >> 2] = -HEAPF32[$20 >> 2];
    HEAPF32[$10 + 276 >> 2] = -HEAPF32[$21 >> 2];
    HEAPF32[$10 + 272 >> 2] = -HEAPF32[$6 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 16 >> 2]]($9, $10 + 272 | 0, $10 + 208 | 0, $19);
    HEAP32[$8 >> 2] = $2;
    break label$1;
   }
   $27 = HEAPF32[$6 >> 2];
   label$24 : {
    if (($2 | 0) <= 3) {
     $25 = HEAPF32[$6 + 8 >> 2];
     $26 = HEAPF32[$6 + 4 >> 2];
     $36 = $10 + 356 | 0;
     $21 = $4;
     $5 = $10 + 344 | 0;
     break label$24;
    }
    $27 = Math_fround(-$27);
    $25 = Math_fround(-HEAPF32[$6 + 8 >> 2]);
    $26 = Math_fround(-HEAPF32[$6 + 4 >> 2]);
    $21 = $3;
    $36 = $10 + 344 | 0;
    $3 = $0;
    $0 = $21;
    $21 = $1;
    $1 = $4;
    $5 = $10 + 356 | 0;
   }
   $13 = Math_fround(Math_fround(Math_fround($27 * HEAPF32[$21 >> 2]) + Math_fround($26 * HEAPF32[$21 + 16 >> 2])) + Math_fround($25 * HEAPF32[$21 + 32 >> 2]));
   HEAPF32[$10 + 328 >> 2] = $13;
   $12 = Math_fround(Math_fround(Math_fround($27 * HEAPF32[$21 + 4 >> 2]) + Math_fround($26 * HEAPF32[$21 + 20 >> 2])) + Math_fround($25 * HEAPF32[$21 + 36 >> 2]));
   HEAPF32[$10 + 332 >> 2] = $12;
   $11 = Math_fround(Math_fround(Math_fround($27 * HEAPF32[$21 + 8 >> 2]) + Math_fround($26 * HEAPF32[$21 + 24 >> 2])) + Math_fround($25 * HEAPF32[$21 + 40 >> 2]));
   HEAPF32[$10 + 336 >> 2] = $11;
   $11 = Math_fround(Math_abs($11));
   $12 = Math_fround(Math_abs($12));
   $13 = Math_fround(Math_abs($13));
   label$26 : {
    if (!!($12 > $13)) {
     $20 = $12 > $11;
     $4 = $20 ? 1 : 2;
     $7 = 0;
     break label$26;
    }
    $20 = $13 > $11;
    $4 = ($20 ^ 1) << 1;
    $7 = $20;
   }
   $61 = $7;
   $4 = $4 << 2;
   $13 = HEAPF32[$4 + $5 >> 2];
   $12 = Math_fround($13 * HEAPF32[$4 + $21 >> 2]);
   $11 = Math_fround(HEAPF32[$3 >> 2] - HEAPF32[$0 >> 2]);
   $62 = $20 ? 2 : 1;
   $7 = $10;
   label$28 : {
    if (!(HEAPF32[$4 + ($10 + 328 | 0) >> 2] < Math_fround(0.0))) {
     $17 = Math_fround($11 - $12);
     HEAPF32[$10 + 312 >> 2] = $17;
     $19 = Math_fround(Math_fround(HEAPF32[$3 + 4 >> 2] - HEAPF32[$0 + 4 >> 2]) - Math_fround($13 * HEAPF32[($4 | 16) + $21 >> 2]));
     HEAPF32[$10 + 316 >> 2] = $19;
     $12 = Math_fround(Math_fround(HEAPF32[$3 + 8 >> 2] - HEAPF32[$0 + 8 >> 2]) - Math_fround($13 * HEAPF32[($4 | 32) + $21 >> 2]));
     break label$28;
    }
    $17 = Math_fround($11 + $12);
    HEAPF32[$10 + 312 >> 2] = $17;
    $19 = Math_fround(Math_fround(HEAPF32[$3 + 4 >> 2] - HEAPF32[$0 + 4 >> 2]) + Math_fround($13 * HEAPF32[($4 | 16) + $21 >> 2]));
    HEAPF32[$10 + 316 >> 2] = $19;
    $12 = Math_fround(Math_fround(HEAPF32[$3 + 8 >> 2] - HEAPF32[$0 + 8 >> 2]) + Math_fround($13 * HEAPF32[($4 | 32) + $21 >> 2]));
   }
   HEAPF32[$7 + 320 >> 2] = $12;
   $20 = 1;
   $60 = $2 + (($2 | 0) < 4 ? -1 : -4) | 0;
   label$30 : {
    label$31 : {
     if ($60 >>> 0 <= 1) {
      $4 = 2;
      if ($60 - 1) {
       break label$30
      }
      break label$31;
     }
     $4 = 1;
    }
    $20 = 0;
   }
   $3 = 2;
   $40 = $4 << 2;
   $4 = $40 + $1 | 0;
   $13 = HEAPF32[$4 >> 2];
   $11 = HEAPF32[$4 + 16 >> 2];
   $15 = HEAPF32[$4 + 32 >> 2];
   $29 = Math_fround(Math_fround(Math_fround($17 * $13) + Math_fround($19 * $11)) + Math_fround($12 * $15));
   $4 = $61 << 2;
   $7 = $4 + $21 | 0;
   $14 = HEAPF32[$7 >> 2];
   $16 = HEAPF32[$7 + 16 >> 2];
   $22 = HEAPF32[$7 + 32 >> 2];
   $32 = Math_fround(Math_fround(Math_fround($13 * $14) + Math_fround($11 * $16)) + Math_fround($15 * $22));
   $34 = HEAPF32[$4 + $5 >> 2];
   $24 = Math_fround($32 * $34);
   $30 = Math_fround($29 + $24);
   $4 = $62 << 2;
   $31 = $4 + $21 | 0;
   $28 = HEAPF32[$31 >> 2];
   $35 = HEAPF32[$31 + 16 >> 2];
   $33 = HEAPF32[$31 + 32 >> 2];
   $23 = Math_fround(Math_fround(Math_fround($13 * $28) + Math_fround($11 * $35)) + Math_fround($15 * $33));
   $37 = HEAPF32[$4 + $5 >> 2];
   $13 = Math_fround($23 * $37);
   HEAPF32[$10 + 300 >> 2] = $30 - $13;
   $4 = $20 << 2;
   $1 = $4 + $1 | 0;
   $11 = HEAPF32[$1 >> 2];
   $15 = HEAPF32[$1 + 16 >> 2];
   $19 = Math_fround(Math_fround($17 * $11) + Math_fround($19 * $15));
   $17 = HEAPF32[$1 + 32 >> 2];
   $18 = Math_fround($19 + Math_fround($12 * $17));
   $19 = Math_fround(Math_fround(Math_fround($11 * $14) + Math_fround($15 * $16)) + Math_fround($17 * $22));
   $14 = Math_fround($34 * $19);
   $16 = Math_fround($18 + $14);
   $17 = Math_fround(Math_fround(Math_fround($11 * $28) + Math_fround($15 * $35)) + Math_fround($17 * $33));
   $12 = Math_fround($37 * $17);
   HEAPF32[$10 + 296 >> 2] = $16 - $12;
   HEAPF32[$10 + 292 >> 2] = $30 + $13;
   $16 = Math_fround($16 + $12);
   HEAPF32[$10 + 288 >> 2] = $16;
   $15 = Math_fround($29 - $24);
   $34 = Math_fround($15 + $13);
   HEAPF32[$10 + 284 >> 2] = $34;
   $22 = Math_fround($18 - $14);
   $11 = Math_fround($22 + $12);
   HEAPF32[$10 + 280 >> 2] = $11;
   $14 = Math_fround($15 - $13);
   HEAPF32[$10 + 276 >> 2] = $14;
   $12 = Math_fround($22 - $12);
   HEAPF32[$10 + 272 >> 2] = $12;
   $1 = $36 + $40 | 0;
   $28 = HEAPF32[$1 >> 2];
   $64 = HEAP32[$1 >> 2];
   $13 = HEAPF32[$4 + $36 >> 2];
   $15 = Math_fround(-$13);
   label$34 : {
    label$35 : {
     label$36 : {
      $24 = Math_fround(-$12);
      $4 = $13 > $24;
      label$37 : {
       if (!$4) {
        $5 = 0;
        $3 = 1;
        $1 = $10 + 208 | 0;
        $22 = Math_fround(-$11);
        $20 = $13 > $22;
        if ($20 ^ $4) {
         break label$37
        }
        break label$36;
       }
       HEAPF32[$10 + 212 >> 2] = $14;
       HEAPF32[$10 + 208 >> 2] = $12;
       $1 = $10 + 208 | 8;
       $5 = 1;
       $22 = Math_fround(-$11);
       $20 = $13 > $22;
       if (($20 | 0) == ($4 | 0)) {
        break label$36
       }
      }
      HEAPF32[$1 >> 2] = $15;
      HEAPF32[$1 + 4 >> 2] = $14 + Math_fround(Math_fround($15 - $12) * Math_fround(Math_fround($34 - $14) / Math_fround($11 - $12)));
      $1 = $1 + 8 | 0;
      if ($20) {
       break label$35
      }
      $5 = $3;
      break label$34;
     }
     $3 = $5;
     if (!$20) {
      break label$34
     }
    }
    HEAPF32[$1 + 4 >> 2] = $34;
    HEAPF32[$1 >> 2] = $11;
    $5 = $3 + 1 | 0;
    $1 = $1 + 8 | 0;
    $11 = HEAPF32[$10 + 280 >> 2];
    $22 = Math_fround(-$11);
    $16 = HEAPF32[$10 + 288 >> 2];
   }
   label$33 : {
    if (($22 < $13 | 0) != ($13 > Math_fround(-$16) | 0)) {
     $22 = HEAPF32[$10 + 292 >> 2];
     $14 = HEAPF32[$10 + 284 >> 2];
     HEAPF32[$1 >> 2] = $15;
     HEAPF32[$1 + 4 >> 2] = $14 + Math_fround(Math_fround($15 - $11) * Math_fround(Math_fround($22 - $14) / Math_fround($16 - $11)));
     $5 = $5 + 1 | 0;
     if ($5 & 8) {
      break label$33
     }
     $1 = $1 + 8 | 0;
    }
    $11 = HEAPF32[$10 + 288 >> 2];
    $14 = Math_fround(-$11);
    if (!!($13 > $14)) {
     HEAPF32[$1 >> 2] = $11;
     HEAP32[$1 + 4 >> 2] = HEAP32[$10 + 292 >> 2];
     $5 = $5 + 1 | 0;
     if ($5 & 8) {
      break label$33
     }
     $11 = HEAPF32[$10 + 288 >> 2];
     $14 = Math_fround(-$11);
     $1 = $1 + 8 | 0;
    }
    $3 = $14 < $13;
    $14 = HEAPF32[$10 + 296 >> 2];
    $16 = Math_fround(-$14);
    if (($3 | 0) != ($13 > $16 | 0)) {
     $22 = HEAPF32[$10 + 300 >> 2];
     $16 = HEAPF32[$10 + 292 >> 2];
     HEAPF32[$1 >> 2] = $15;
     HEAPF32[$1 + 4 >> 2] = $16 + Math_fround(Math_fround($15 - $11) * Math_fround(Math_fround($22 - $16) / Math_fround($14 - $11)));
     $5 = $5 + 1 | 0;
     if ($5 & 8) {
      break label$33
     }
     $14 = HEAPF32[$10 + 296 >> 2];
     $16 = Math_fround(-$14);
     $1 = $1 + 8 | 0;
    }
    if (!!($16 < $13)) {
     HEAPF32[$1 >> 2] = $14;
     HEAP32[$1 + 4 >> 2] = HEAP32[$10 + 300 >> 2];
     $5 = $5 + 1 | 0;
     if ($5 & 8) {
      break label$33
     }
     $12 = HEAPF32[$10 + 272 >> 2];
     $24 = Math_fround(-$12);
     $14 = HEAPF32[$10 + 296 >> 2];
     $16 = Math_fround(-$14);
     $1 = $1 + 8 | 0;
    }
    label$43 : {
     label$44 : {
      label$45 : {
       if (($16 < $13 | 0) != ($24 < $13 | 0)) {
        $16 = HEAPF32[$10 + 276 >> 2];
        $11 = HEAPF32[$10 + 300 >> 2];
        HEAPF32[$1 >> 2] = $15;
        HEAPF32[$1 + 4 >> 2] = $11 + Math_fround(Math_fround($15 - $14) * Math_fround(Math_fround($16 - $11) / Math_fround($12 - $14)));
        $5 = $5 + 1 | 0;
        if ($5 & 8) {
         break label$33
        }
        break label$45;
       }
       if (($5 | 0) >= 1) {
        break label$45
       }
       $5 = 0;
       break label$44;
      }
      $1 = $10 + 208 | 0;
      $4 = $10 + 112 | 0;
      $3 = 0;
      while (1) {
       $12 = HEAPF32[$1 >> 2];
       if (!!($12 < $13)) {
        HEAPF32[$4 >> 2] = $12;
        HEAP32[$4 + 4 >> 2] = HEAP32[$1 + 4 >> 2];
        $3 = $3 + 1 | 0;
        if ($3 & 8) {
         $5 = $3;
         break label$44;
        }
        $12 = HEAPF32[$1 >> 2];
        $4 = $4 + 8 | 0;
       }
       $20 = $1 + 8 | 0;
       $40 = ($5 | 0) > 1 ? $20 : $10 + 208 | 0;
       $11 = HEAPF32[$40 >> 2];
       if (($12 < $13 | 0) != ($11 < $13 | 0)) {
        $15 = HEAPF32[$1 + 4 >> 2];
        $14 = HEAPF32[$40 + 4 >> 2];
        HEAP32[$4 >> 2] = $63;
        HEAPF32[$4 + 4 >> 2] = $15 + Math_fround(Math_fround($13 - $12) * Math_fround(Math_fround($14 - $15) / Math_fround($11 - $12)));
        $3 = $3 + 1 | 0;
        if ($3 & 8) {
         $5 = $3;
         break label$44;
        }
        $4 = $4 + 8 | 0;
       }
       $1 = $20;
       $5 = $5 + -1 | 0;
       if (($5 | 0) > 0) {
        continue
       }
       break;
      };
      if (($3 | 0) < 1) {
       $5 = 0;
       break label$44;
      }
      $13 = $28;
      $14 = Math_fround(-$13);
      $4 = $10 + 208 | 0;
      $1 = $10 + 112 | 0;
      $20 = 0;
      while (1) {
       $5 = $1 + 4 | 0;
       $11 = HEAPF32[$5 >> 2];
       $12 = Math_fround(-$11);
       if (!!($13 > $12)) {
        HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
        HEAP32[$4 + 4 >> 2] = HEAP32[$5 >> 2];
        $20 = $20 + 1 | 0;
        if ($20 & 8) {
         $5 = $20;
         break label$43;
        }
        $11 = HEAPF32[$5 >> 2];
        $12 = Math_fround(-$11);
        $4 = $4 + 8 | 0;
       }
       $63 = $12 < $13;
       $5 = $1 + 8 | 0;
       $40 = ($3 | 0) > 1 ? $5 : $10 + 112 | 0;
       $12 = HEAPF32[$40 + 4 >> 2];
       if (($63 | 0) != ($13 > Math_fround(-$12) | 0)) {
        $16 = HEAPF32[$40 >> 2];
        $15 = HEAPF32[$1 >> 2];
        HEAPF32[$4 + 4 >> 2] = $14;
        HEAPF32[$4 >> 2] = $15 + Math_fround(Math_fround($14 - $11) * Math_fround(Math_fround($16 - $15) / Math_fround($12 - $11)));
        $20 = $20 + 1 | 0;
        if ($20 & 8) {
         $5 = $20;
         break label$43;
        }
        $4 = $4 + 8 | 0;
       }
       $1 = $5;
       $3 = $3 + -1 | 0;
       if (($3 | 0) > 0) {
        continue
       }
       break;
      };
      if (($20 | 0) < 1) {
       $5 = 0;
       break label$44;
      }
      $1 = $10 + 208 | 0;
      $4 = $10 + 112 | 0;
      $5 = 0;
      while (1) {
       $3 = $1 + 4 | 0;
       $12 = HEAPF32[$3 >> 2];
       if (!!($12 < $13)) {
        HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
        HEAP32[$4 + 4 >> 2] = HEAP32[$3 >> 2];
        $5 = $5 + 1 | 0;
        if ($5 & 8) {
         break label$44
        }
        $12 = HEAPF32[$3 >> 2];
        $4 = $4 + 8 | 0;
       }
       $3 = $1 + 8 | 0;
       $40 = ($20 | 0) > 1 ? $3 : $10 + 208 | 0;
       $11 = HEAPF32[$40 + 4 >> 2];
       if (($12 < $13 | 0) != ($11 < $13 | 0)) {
        $14 = HEAPF32[$40 >> 2];
        $15 = HEAPF32[$1 >> 2];
        HEAP32[$4 + 4 >> 2] = $64;
        HEAPF32[$4 >> 2] = $15 + Math_fround(Math_fround($13 - $12) * Math_fround(Math_fround($14 - $15) / Math_fround($11 - $12)));
        $5 = $5 + 1 | 0;
        if ($5 & 8) {
         break label$44
        }
        $4 = $4 + 8 | 0;
       }
       $1 = $3;
       $20 = $20 + -1 | 0;
       if (($20 | 0) > 0) {
        continue
       }
       break;
      };
     }
     memcpy($10 + 208 | 0, $10 + 112 | 0, $5 << 3);
    }
    if (($5 | 0) >= 1) {
     break label$33
    }
    break label$1;
   }
   $13 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround($19 * $23) - Math_fround($32 * $17)));
   $23 = Math_fround($23 * $13);
   $32 = Math_fround($32 * $13);
   $14 = Math_fround($17 * $13);
   $16 = Math_fround($19 * $13);
   $22 = HEAPF32[($60 << 2) + $36 >> 2];
   $1 = $62 << 2;
   $34 = HEAPF32[($1 | 32) + $21 >> 2];
   $4 = $61 << 2;
   $24 = HEAPF32[($4 | 32) + $21 >> 2];
   $30 = HEAPF32[($1 | 16) + $21 >> 2];
   $28 = HEAPF32[($4 | 16) + $21 >> 2];
   $35 = HEAPF32[$31 >> 2];
   $33 = HEAPF32[$7 >> 2];
   $4 = 0;
   $1 = $10 + 208 | 0;
   $37 = HEAPF32[$10 + 320 >> 2];
   $43 = HEAPF32[$10 + 316 >> 2];
   $38 = HEAPF32[$10 + 312 >> 2];
   while (1) {
    $3 = ($10 + 112 | 0) + Math_imul($4, 12) | 0;
    $17 = HEAPF32[$1 >> 2];
    $12 = Math_fround($17 - $18);
    $19 = HEAPF32[$1 + 4 >> 2];
    $11 = Math_fround($19 - $29);
    $13 = Math_fround(Math_fround($23 * $12) - Math_fround($14 * $11));
    $12 = Math_fround(Math_fround($16 * $11) - Math_fround($32 * $12));
    $11 = Math_fround(Math_fround($43 + Math_fround($13 * $28)) + Math_fround($12 * $30));
    HEAPF32[$3 + 4 >> 2] = $11;
    $15 = Math_fround(Math_fround($38 + Math_fround($13 * $33)) + Math_fround($12 * $35));
    HEAPF32[$3 >> 2] = $15;
    $13 = Math_fround(Math_fround($37 + Math_fround($13 * $24)) + Math_fround($12 * $34));
    HEAPF32[$3 + 8 >> 2] = $13;
    $13 = Math_fround($22 - Math_fround(Math_fround(Math_fround($27 * $15) + Math_fround($26 * $11)) + Math_fround($25 * $13)));
    HEAPF32[($10 + 80 | 0) + ($4 << 2) >> 2] = $13;
    if (!!($13 >= Math_fround(0.0))) {
     $3 = $4 << 3;
     HEAPF32[$3 + ($10 + 208 | 0) >> 2] = $17;
     HEAPF32[($10 + 208 | 0) + ($3 | 4) >> 2] = $19;
     $4 = $4 + 1 | 0;
    }
    $1 = $1 + 8 | 0;
    $5 = $5 + -1 | 0;
    if ($5) {
     continue
    }
    break;
   };
   if (($4 | 0) < 1) {
    break label$1
   }
   $1 = ($4 | 0) < 4 ? $4 : 4;
   $5 = ($1 | 0) > 1 ? $1 : 1;
   label$65 : {
    if (($4 | 0) <= ($5 | 0)) {
     if (($2 | 0) >= 4) {
      $3 = $10 + 80 | 0;
      $1 = $10 + 112 | 0;
      $5 = $4;
      while (1) {
       $12 = HEAPF32[$6 >> 2];
       $13 = HEAPF32[$3 >> 2];
       HEAPF32[$10 + 32 >> 2] = Math_fround(HEAPF32[$1 >> 2] + HEAPF32[$0 >> 2]) - Math_fround($12 * $13);
       $11 = HEAPF32[$6 + 4 >> 2];
       HEAPF32[$10 + 36 >> 2] = Math_fround(HEAPF32[$1 + 4 >> 2] + HEAPF32[$0 + 4 >> 2]) - Math_fround($13 * $11);
       $15 = HEAPF32[$6 + 8 >> 2];
       HEAPF32[$10 + 40 >> 2] = Math_fround(HEAPF32[$1 + 8 >> 2] + HEAPF32[$0 + 8 >> 2]) - Math_fround($13 * $15);
       HEAP32[$10 + 76 >> 2] = 0;
       HEAPF32[$10 + 72 >> 2] = -$15;
       HEAPF32[$10 + 68 >> 2] = -$11;
       HEAPF32[$10 + 64 >> 2] = -$12;
       FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 16 >> 2]]($9, $10 - -64 | 0, $10 + 32 | 0, Math_fround(-$13));
       $1 = $1 + 12 | 0;
       $3 = $3 + 4 | 0;
       $5 = $5 + -1 | 0;
       if ($5) {
        continue
       }
       break;
      };
      break label$65;
     }
     $3 = $10 + 80 | 0;
     $1 = $10 + 112 | 0;
     $5 = $4;
     while (1) {
      HEAPF32[$10 + 32 >> 2] = HEAPF32[$1 >> 2] + HEAPF32[$0 >> 2];
      HEAPF32[$10 + 36 >> 2] = HEAPF32[$1 + 4 >> 2] + HEAPF32[$0 + 4 >> 2];
      HEAPF32[$10 + 40 >> 2] = HEAPF32[$1 + 8 >> 2] + HEAPF32[$0 + 8 >> 2];
      HEAP32[$10 + 76 >> 2] = 0;
      HEAPF32[$10 + 72 >> 2] = -HEAPF32[$6 + 8 >> 2];
      HEAPF32[$10 + 68 >> 2] = -HEAPF32[$6 + 4 >> 2];
      HEAPF32[$10 + 64 >> 2] = -HEAPF32[$6 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 16 >> 2]]($9, $10 - -64 | 0, $10 + 32 | 0, Math_fround(-HEAPF32[$3 >> 2]));
      $1 = $1 + 12 | 0;
      $3 = $3 + 4 | 0;
      $5 = $5 + -1 | 0;
      if ($5) {
       continue
      }
      break;
     };
     break label$65;
    }
    $21 = 0;
    if (($4 | 0) >= 2) {
     $1 = $10 + 80 | 4;
     $13 = HEAPF32[$10 + 80 >> 2];
     $3 = 1;
     while (1) {
      $12 = HEAPF32[$1 >> 2];
      $20 = $12 > $13;
      $13 = $20 ? $12 : $13;
      $21 = $20 ? $3 : $21;
      $1 = $1 + 4 | 0;
      $3 = $3 + 1 | 0;
      if (($3 | 0) != ($4 | 0)) {
       continue
      }
      break;
     };
    }
    cullPoints2_28int_2c_20float__2c_20int_2c_20int_2c_20int__29($4, $10 + 208 | 0, $5, $21, $10 + 32 | 0);
    if (($2 | 0) >= 4) {
     $1 = $10 + 32 | 0;
     $3 = 0;
     while (1) {
      $21 = HEAP32[$1 >> 2];
      $4 = ($10 + 112 | 0) + Math_imul($21, 12) | 0;
      $12 = Math_fround(HEAPF32[$4 >> 2] + HEAPF32[$0 >> 2]);
      HEAPF32[$10 + 64 >> 2] = $12;
      $11 = Math_fround(HEAPF32[$4 + 4 >> 2] + HEAPF32[$0 + 4 >> 2]);
      HEAPF32[$10 + 68 >> 2] = $11;
      $15 = Math_fround(HEAPF32[$4 + 8 >> 2] + HEAPF32[$0 + 8 >> 2]);
      HEAPF32[$10 + 72 >> 2] = $15;
      HEAP32[$10 + 28 >> 2] = 0;
      $17 = HEAPF32[$6 + 8 >> 2];
      HEAPF32[$10 + 24 >> 2] = -$17;
      $19 = HEAPF32[$6 + 4 >> 2];
      HEAPF32[$10 + 20 >> 2] = -$19;
      $27 = HEAPF32[$6 >> 2];
      HEAPF32[$10 + 16 >> 2] = -$27;
      HEAP32[$10 + 12 >> 2] = 0;
      $13 = HEAPF32[($10 + 80 | 0) + ($21 << 2) >> 2];
      HEAPF32[$10 + 8 >> 2] = $15 - Math_fround($17 * $13);
      HEAPF32[$10 + 4 >> 2] = $11 - Math_fround($19 * $13);
      HEAPF32[$10 >> 2] = $12 - Math_fround($27 * $13);
      FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 16 >> 2]]($9, $10 + 16 | 0, $10, Math_fround(-$13));
      $1 = $1 + 4 | 0;
      $3 = $3 + 1 | 0;
      if ($3 >>> 0 < $5 >>> 0) {
       continue
      }
      break;
     };
     break label$65;
    }
    $1 = $10 + 32 | 0;
    $3 = 0;
    while (1) {
     $21 = HEAP32[$1 >> 2];
     $4 = ($10 + 112 | 0) + Math_imul($21, 12) | 0;
     HEAPF32[$10 + 64 >> 2] = HEAPF32[$4 >> 2] + HEAPF32[$0 >> 2];
     HEAPF32[$10 + 68 >> 2] = HEAPF32[$4 + 4 >> 2] + HEAPF32[$0 + 4 >> 2];
     HEAPF32[$10 + 72 >> 2] = HEAPF32[$4 + 8 >> 2] + HEAPF32[$0 + 8 >> 2];
     HEAP32[$10 + 28 >> 2] = 0;
     HEAPF32[$10 + 24 >> 2] = -HEAPF32[$6 + 8 >> 2];
     HEAPF32[$10 + 20 >> 2] = -HEAPF32[$6 + 4 >> 2];
     HEAPF32[$10 + 16 >> 2] = -HEAPF32[$6 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 16 >> 2]]($9, $10 + 16 | 0, $10 - -64 | 0, Math_fround(-HEAPF32[($10 + 80 | 0) + ($21 << 2) >> 2]));
     $1 = $1 + 4 | 0;
     $3 = $3 + 1 | 0;
     if ($3 >>> 0 < $5 >>> 0) {
      continue
     }
     break;
    };
   }
   HEAP32[$8 >> 2] = $2;
  }
  global$0 = $10 + 368 | 0;
 }
 
 function btBoxBoxDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  $3 = global$0 - 160 | 0;
  global$0 = $3;
  HEAP32[$3 + 112 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 64 >> 2] = HEAP32[$1 + 64 >> 2];
  $4 = HEAP32[$1 + 8 >> 2];
  HEAP32[$3 + 116 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$3 + 120 >> 2] = $4;
  $4 = $1 + 68 | 0;
  $7 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  HEAP32[$3 + 68 >> 2] = $7;
  HEAP32[$3 + 72 >> 2] = $4;
  $4 = HEAP32[$1 + 20 >> 2];
  HEAP32[$3 + 128 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$3 + 132 >> 2] = $4;
  $4 = $1 + 80 | 0;
  $7 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  HEAP32[$3 + 80 >> 2] = $7;
  HEAP32[$3 + 84 >> 2] = $4;
  HEAP32[$3 + 136 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$3 + 88 >> 2] = HEAP32[$1 + 88 >> 2];
  HEAP32[$3 + 144 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$3 + 96 >> 2] = HEAP32[$1 + 96 >> 2];
  HEAP32[$3 + 100 >> 2] = HEAP32[$1 + 100 >> 2];
  $4 = $1 + 36 | 0;
  $7 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  HEAP32[$3 + 148 >> 2] = $7;
  HEAP32[$3 + 152 >> 2] = $4;
  HEAP32[$3 + 104 >> 2] = HEAP32[$1 + 104 >> 2];
  $4 = HEAP32[$0 + 4 >> 2];
  $6 = HEAPF32[$4 + 40 >> 2];
  $5 = HEAPF32[$4 + 36 >> 2];
  $8 = HEAPF32[$4 + 32 >> 2];
  $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4));
  $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4));
  $11 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4));
  HEAP32[$3 + 36 >> 2] = 0;
  $5 = Math_fround($5 + $10);
  HEAPF32[$3 + 28 >> 2] = $5 + $5;
  $5 = Math_fround($8 + $9);
  HEAPF32[$3 + 24 >> 2] = $5 + $5;
  $6 = Math_fround($6 + $11);
  HEAPF32[$3 + 32 >> 2] = $6 + $6;
  $4 = HEAP32[$0 + 8 >> 2];
  $6 = HEAPF32[$4 + 40 >> 2];
  $5 = HEAPF32[$4 + 36 >> 2];
  $8 = HEAPF32[$4 + 32 >> 2];
  $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4));
  $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4));
  $11 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4));
  HEAP32[$3 + 20 >> 2] = 0;
  $5 = Math_fround($5 + $10);
  HEAPF32[$3 + 12 >> 2] = $5 + $5;
  $5 = Math_fround($8 + $9);
  HEAPF32[$3 + 8 >> 2] = $5 + $5;
  $6 = Math_fround($6 + $11);
  HEAPF32[$3 + 16 >> 2] = $6 + $6;
  dBoxBox2_28btVector3_20const__2c_20float_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_20const__2c_20btVector3_20const__2c_20btVector3__2c_20float__2c_20int__2c_20int_2c_20dContactGeom__2c_20int_2c_20btDiscreteCollisionDetectorInterface__Result__29($1 + 48 | 0, $3 + 112 | 0, $3 + 24 | 0, $1 + 112 | 0, $3 - -64 | 0, $3 + 8 | 0, $3 + 48 | 0, $3 + 44 | 0, $3 + 40 | 0, $2);
  global$0 = $3 + 160 | 0;
 }
 
 function btBoxBoxCollisionAlgorithm__btBoxBoxCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  btActivatingCollisionAlgorithm__btActivatingCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1);
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 8 | 0] = 0;
  HEAP32[$0 >> 2] = 17516;
  $1 = HEAP32[$0 + 4 >> 2];
  if (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, HEAP32[$2 + 8 >> 2], HEAP32[$3 + 8 >> 2])) {
   $1 = HEAP32[$0 + 4 >> 2];
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$2 + 8 >> 2], HEAP32[$3 + 8 >> 2]) | 0;
   HEAP8[$0 + 8 | 0] = 1;
   HEAP32[$0 + 12 >> 2] = $1;
  }
 }
 
 function btBoxBoxCollisionAlgorithm___btBoxBoxCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17516;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  return $0 | 0;
 }
 
 function btBoxBoxCollisionAlgorithm___btBoxBoxCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17516;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  operator_20delete_28void__29($0);
 }
 
 function btBoxBoxCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $6 = global$0 - 160 | 0;
  global$0 = $6;
  $9 = HEAP32[$0 + 12 >> 2];
  label$1 : {
   if (!$9) {
    break label$1
   }
   HEAP32[$4 + 4 >> 2] = $9;
   $9 = HEAP32[$2 + 4 >> 2];
   $10 = HEAP32[$1 + 4 >> 2];
   HEAP32[$6 + 152 >> 2] = 1566444395;
   $1 = HEAP32[$1 + 12 >> 2];
   $5 = $1 + 8 | 0;
   $8 = HEAP32[$5 >> 2];
   $7 = HEAP32[$5 + 4 >> 2];
   $5 = $6 + 32 | 0;
   HEAP32[$5 >> 2] = $8;
   HEAP32[$5 + 4 >> 2] = $7;
   $11 = HEAP32[$1 >> 2];
   $12 = HEAP32[$1 + 4 >> 2];
   $5 = $1 + 24 | 0;
   $8 = HEAP32[$5 >> 2];
   $7 = HEAP32[$5 + 4 >> 2];
   $5 = $6 + 48 | 0;
   HEAP32[$5 >> 2] = $8;
   HEAP32[$5 + 4 >> 2] = $7;
   $13 = HEAP32[$1 + 16 >> 2];
   $14 = HEAP32[$1 + 20 >> 2];
   $5 = $1 + 40 | 0;
   $8 = HEAP32[$5 >> 2];
   $7 = HEAP32[$5 + 4 >> 2];
   $5 = $6 - -64 | 0;
   HEAP32[$5 >> 2] = $8;
   HEAP32[$5 + 4 >> 2] = $7;
   $15 = HEAP32[$1 + 32 >> 2];
   $8 = HEAP32[$1 + 36 >> 2];
   $5 = $1 + 56 | 0;
   $16 = HEAP32[$5 >> 2];
   $7 = HEAP32[$5 + 4 >> 2];
   $5 = $6 + 80 | 0;
   HEAP32[$5 >> 2] = $16;
   HEAP32[$5 + 4 >> 2] = $7;
   HEAP32[$6 + 24 >> 2] = $11;
   HEAP32[$6 + 28 >> 2] = $12;
   HEAP32[$6 + 40 >> 2] = $13;
   HEAP32[$6 + 44 >> 2] = $14;
   HEAP32[$6 + 56 >> 2] = $15;
   HEAP32[$6 + 60 >> 2] = $8;
   $5 = HEAP32[$1 + 52 >> 2];
   HEAP32[$6 + 72 >> 2] = HEAP32[$1 + 48 >> 2];
   HEAP32[$6 + 76 >> 2] = $5;
   $1 = HEAP32[$2 + 12 >> 2];
   $5 = $1 + 8 | 0;
   $2 = HEAP32[$5 >> 2];
   $7 = HEAP32[$5 + 4 >> 2];
   $5 = $6 + 96 | 0;
   HEAP32[$5 >> 2] = $2;
   HEAP32[$5 + 4 >> 2] = $7;
   $5 = HEAP32[$1 + 4 >> 2];
   HEAP32[$6 + 88 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$6 + 92 >> 2] = $5;
   $7 = HEAP32[$1 + 20 >> 2];
   $5 = $6 + 104 | 0;
   HEAP32[$5 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $5 = $1 + 24 | 0;
   $2 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $7 = $6 + 112 | 0;
   HEAP32[$7 >> 2] = $2;
   HEAP32[$7 + 4 >> 2] = $5;
   $5 = $1 + 40 | 0;
   $2 = HEAP32[$5 >> 2];
   $7 = HEAP32[$5 + 4 >> 2];
   $5 = $6 + 128 | 0;
   HEAP32[$5 >> 2] = $2;
   HEAP32[$5 + 4 >> 2] = $7;
   $5 = HEAP32[$1 + 36 >> 2];
   $7 = $6 + 120 | 0;
   HEAP32[$7 >> 2] = HEAP32[$1 + 32 >> 2];
   HEAP32[$7 + 4 >> 2] = $5;
   $7 = HEAP32[$1 + 52 >> 2];
   $5 = $6 + 136 | 0;
   HEAP32[$5 >> 2] = HEAP32[$1 + 48 >> 2];
   HEAP32[$5 + 4 >> 2] = $7;
   $5 = $1 + 56 | 0;
   $1 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $7 = $6 + 144 | 0;
   HEAP32[$7 >> 2] = $1;
   HEAP32[$7 + 4 >> 2] = $5;
   $1 = $6 + 8 | 0;
   HEAP32[$1 + 8 >> 2] = $9;
   HEAP32[$1 + 4 >> 2] = $10;
   HEAP32[$1 >> 2] = 17464;
   btBoxBoxDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($1, $6 + 24 | 0, $4, HEAP32[$3 + 20 >> 2], 0);
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$4 + 4 >> 2];
   if (!HEAP32[$1 + 780 >> 2]) {
    break label$1
   }
   $2 = HEAP32[$1 + 772 >> 2];
   $0 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
   if (($2 | 0) != ($0 | 0)) {
    btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($1, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $0 + 4 | 0);
    break label$1;
   }
   btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($1, $2 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
  }
  global$0 = $6 + 160 | 0;
 }
 
 function btConvexPlaneCollisionAlgorithm__btConvexPlaneCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  btCollisionAlgorithm__btCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__29($0, $1);
  HEAP32[$0 + 24 >> 2] = $6;
  HEAP32[$0 + 20 >> 2] = $5;
  HEAP8[$0 + 16 | 0] = $4;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 8 | 0] = 0;
  HEAP32[$0 >> 2] = 17588;
  $1 = HEAP32[$0 + 4 >> 2];
  $5 = $4 ? $3 : $2;
  $4 = $4 ? $2 : $3;
  if (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 24 >> 2]]($1, HEAP32[$5 + 8 >> 2], HEAP32[$4 + 8 >> 2])) {
   $1 = HEAP32[$0 + 4 >> 2];
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, HEAP32[$5 + 8 >> 2], HEAP32[$4 + 8 >> 2]) | 0;
   HEAP8[$0 + 8 | 0] = 1;
   HEAP32[$0 + 12 >> 2] = $1;
  }
 }
 
 function btConvexPlaneCollisionAlgorithm___btConvexPlaneCollisionAlgorithm_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17588;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  return $0 | 0;
 }
 
 function btConvexPlaneCollisionAlgorithm___btConvexPlaneCollisionAlgorithm_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  HEAP32[$0 >> 2] = 17588;
  label$1 : {
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if (!$1) {
    break label$1
   }
   $2 = HEAP32[$0 + 4 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1);
  }
  operator_20delete_28void__29($0);
 }
 
 function btConvexPlaneCollisionAlgorithm__collideSingleContact_28btQuaternion_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = 0, $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0), $53 = Math_fround(0);
  $7 = global$0 - 48 | 0;
  global$0 = $7;
  $26 = HEAPU8[$0 + 16 | 0];
  $37 = $26 ? $3 : $2;
  $5 = HEAP32[$37 + 12 >> 2];
  $43 = HEAPF32[$5 + 56 >> 2];
  $44 = HEAPF32[$5 + 52 >> 2];
  $45 = HEAPF32[$5 + 48 >> 2];
  $26 = $26 ? $2 : $3;
  $3 = HEAP32[$26 + 12 >> 2];
  $46 = HEAPF32[$3 + 56 >> 2];
  $49 = HEAPF32[$3 + 48 >> 2];
  $47 = HEAPF32[$3 + 52 >> 2];
  $37 = HEAP32[$37 + 4 >> 2];
  $15 = HEAPF32[$3 + 40 >> 2];
  $11 = HEAPF32[$3 + 8 >> 2];
  $12 = HEAPF32[$3 + 24 >> 2];
  $13 = HEAPF32[$3 + 32 >> 2];
  $19 = HEAPF32[$3 >> 2];
  $20 = HEAPF32[$3 + 16 >> 2];
  $2 = HEAP32[$26 + 4 >> 2];
  $21 = HEAPF32[$3 + 36 >> 2];
  $28 = HEAPF32[$5 + 40 >> 2];
  $29 = HEAPF32[$5 + 32 >> 2];
  $30 = HEAPF32[$5 + 36 >> 2];
  $23 = HEAPF32[$3 + 4 >> 2];
  $31 = HEAPF32[$5 + 8 >> 2];
  $32 = HEAPF32[$5 >> 2];
  $33 = HEAPF32[$5 + 4 >> 2];
  $24 = HEAPF32[$3 + 20 >> 2];
  $34 = HEAPF32[$5 + 24 >> 2];
  $35 = HEAPF32[$5 + 16 >> 2];
  $36 = HEAPF32[$5 + 20 >> 2];
  $9 = HEAPF32[$1 + 12 >> 2];
  $10 = HEAPF32[$1 + 8 >> 2];
  $6 = HEAPF32[$1 >> 2];
  $8 = HEAPF32[$1 + 4 >> 2];
  HEAP32[$7 + 28 >> 2] = 0;
  $16 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($8 * $8)) + Math_fround($10 * $10)) + Math_fround($9 * $9)));
  $14 = Math_fround($10 * $16);
  $38 = Math_fround($6 * $14);
  $18 = Math_fround($8 * $16);
  $39 = Math_fround($9 * $18);
  $22 = Math_fround($38 + $39);
  $27 = Math_fround($8 * $14);
  $17 = Math_fround($6 * $16);
  $40 = Math_fround($9 * $17);
  $16 = Math_fround($27 - $40);
  $41 = Math_fround($6 * $17);
  $42 = Math_fround($8 * $18);
  $8 = Math_fround(Math_fround(1.0) - Math_fround($41 + $42));
  $17 = Math_fround(Math_fround(Math_fround($29 * $22) + Math_fround($30 * $16)) + Math_fround($28 * $8));
  $25 = Math_fround(Math_fround(Math_fround($32 * $22) + Math_fround($33 * $16)) + Math_fround($31 * $8));
  $8 = Math_fround(Math_fround(Math_fround($35 * $22) + Math_fround($36 * $16)) + Math_fround($34 * $8));
  $16 = Math_fround(-HEAPF32[$2 + 52 >> 2]);
  $3 = $2 + 56 | 0;
  $22 = HEAPF32[$3 >> 2];
  $48 = Math_fround(Math_fround(Math_fround(Math_fround($13 * $17) + Math_fround(Math_fround($19 * $25) + Math_fround($20 * $8))) * $16) - Math_fround(Math_fround(Math_fround($21 * $17) + Math_fround(Math_fround($23 * $25) + Math_fround($24 * $8))) * $22));
  $17 = Math_fround(Math_fround($15 * $17) + Math_fround(Math_fround($11 * $25) + Math_fround($12 * $8)));
  $1 = $2 + 60 | 0;
  $8 = HEAPF32[$1 >> 2];
  HEAPF32[$7 + 24 >> 2] = $48 - Math_fround($17 * $8);
  $17 = Math_fround($27 + $40);
  $18 = Math_fround($6 * $18);
  $25 = Math_fround($9 * $14);
  $6 = Math_fround($18 - $25);
  $27 = Math_fround($10 * $14);
  $9 = Math_fround(Math_fround(1.0) - Math_fround($41 + $27));
  $10 = Math_fround(Math_fround($28 * $17) + Math_fround(Math_fround($29 * $6) + Math_fround($30 * $9)));
  $14 = Math_fround(Math_fround($31 * $17) + Math_fround(Math_fround($32 * $6) + Math_fround($33 * $9)));
  $6 = Math_fround(Math_fround($34 * $17) + Math_fround(Math_fround($35 * $6) + Math_fround($36 * $9)));
  HEAPF32[$7 + 20 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($13 * $10) + Math_fround(Math_fround($19 * $14) + Math_fround($20 * $6))) * $16) - Math_fround($22 * Math_fround(Math_fround($21 * $10) + Math_fround(Math_fround($23 * $14) + Math_fround($24 * $6))))) - Math_fround($8 * Math_fround(Math_fround($15 * $10) + Math_fround(Math_fround($11 * $14) + Math_fround($12 * $6))));
  $6 = Math_fround($38 - $39);
  $9 = Math_fround($18 + $25);
  $10 = Math_fround(Math_fround(1.0) - Math_fround($42 + $27));
  $14 = Math_fround(Math_fround($28 * $6) + Math_fround(Math_fround($30 * $9) + Math_fround($29 * $10)));
  $18 = Math_fround(Math_fround($31 * $6) + Math_fround(Math_fround($33 * $9) + Math_fround($32 * $10)));
  $6 = Math_fround(Math_fround($34 * $6) + Math_fround(Math_fround($36 * $9) + Math_fround($35 * $10)));
  HEAPF32[$7 + 16 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($13 * $14) + Math_fround(Math_fround($19 * $18) + Math_fround($20 * $6))) * $16) - Math_fround($22 * Math_fround(Math_fround($21 * $14) + Math_fround(Math_fround($23 * $18) + Math_fround($24 * $6))))) - Math_fround($8 * Math_fround(Math_fround($15 * $14) + Math_fround(Math_fround($11 * $18) + Math_fround($12 * $6))));
  FUNCTION_TABLE[HEAP32[HEAP32[$37 >> 2] + 64 >> 2]]($7 + 32 | 0, $37, $7 + 16 | 0);
  $5 = HEAP32[$26 + 12 >> 2];
  $25 = HEAPF32[$5 + 48 >> 2];
  $38 = HEAPF32[$5 + 32 >> 2];
  $39 = HEAPF32[$5 + 16 >> 2];
  $27 = HEAPF32[$5 + 8 >> 2];
  $40 = HEAPF32[$5 + 4 >> 2];
  $41 = HEAPF32[$5 >> 2];
  $42 = HEAPF32[$5 + 56 >> 2];
  $48 = HEAPF32[$5 + 52 >> 2];
  $50 = HEAPF32[$5 + 40 >> 2];
  $51 = HEAPF32[$5 + 36 >> 2];
  $52 = HEAPF32[$5 + 24 >> 2];
  $53 = HEAPF32[$5 + 20 >> 2];
  $22 = HEAPF32[$2 + 68 >> 2];
  $14 = HEAPF32[$1 >> 2];
  $16 = HEAPF32[$2 + 52 >> 2];
  $18 = HEAPF32[$3 >> 2];
  $6 = HEAPF32[$7 + 40 >> 2];
  $9 = HEAPF32[$7 + 32 >> 2];
  $8 = HEAPF32[$7 + 36 >> 2];
  $17 = HEAPF32[HEAP32[$0 + 12 >> 2] + 784 >> 2];
  HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 12 >> 2];
  $10 = Math_fround(-$49);
  $11 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($45 * $11) + Math_fround($44 * $12)) + Math_fround($43 * $15)) + Math_fround(Math_fround(Math_fround($11 * $10) - Math_fround($12 * $47)) - Math_fround($15 * $46))) + Math_fround(Math_fround(Math_fround($9 * Math_fround(Math_fround(Math_fround($32 * $11) + Math_fround($35 * $12)) + Math_fround($29 * $15))) + Math_fround($8 * Math_fround(Math_fround(Math_fround($33 * $11) + Math_fround($36 * $12)) + Math_fround($30 * $15)))) + Math_fround($6 * Math_fround(Math_fround(Math_fround($31 * $11) + Math_fround($34 * $12)) + Math_fround($28 * $15)))));
  $12 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($45 * $19) + Math_fround($44 * $20)) + Math_fround($43 * $13)) + Math_fround(Math_fround(Math_fround($19 * $10) - Math_fround($20 * $47)) - Math_fround($13 * $46))) + Math_fround(Math_fround(Math_fround($9 * Math_fround(Math_fround(Math_fround($32 * $19) + Math_fround($35 * $20)) + Math_fround($29 * $13))) + Math_fround($8 * Math_fround(Math_fround(Math_fround($33 * $19) + Math_fround($36 * $20)) + Math_fround($30 * $13)))) + Math_fround($6 * Math_fround(Math_fround(Math_fround($31 * $19) + Math_fround($34 * $20)) + Math_fround($28 * $13)))));
  $13 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($45 * $23) + Math_fround($44 * $24)) + Math_fround($43 * $21)) + Math_fround(Math_fround(Math_fround($23 * $10) - Math_fround($24 * $47)) - Math_fround($21 * $46))) + Math_fround(Math_fround(Math_fround($9 * Math_fround(Math_fround(Math_fround($32 * $23) + Math_fround($35 * $24)) + Math_fround($29 * $21))) + Math_fround($8 * Math_fround(Math_fround(Math_fround($33 * $23) + Math_fround($36 * $24)) + Math_fround($30 * $21)))) + Math_fround($6 * Math_fround(Math_fround(Math_fround($31 * $23) + Math_fround($34 * $24)) + Math_fround($28 * $21)))));
  $15 = Math_fround(Math_fround(Math_fround($14 * $11) + Math_fround(Math_fround($16 * $12) + Math_fround($18 * $13))) - $22);
  if (!!($15 < $17)) {
   HEAP32[$7 + 28 >> 2] = 0;
   $5 = HEAP32[$26 + 12 >> 2];
   $19 = HEAPF32[$2 + 52 >> 2];
   $20 = HEAPF32[$2 + 56 >> 2];
   $21 = HEAPF32[$2 + 60 >> 2];
   HEAPF32[$7 + 16 >> 2] = Math_fround(Math_fround(HEAPF32[$5 >> 2] * $19) + Math_fround(HEAPF32[$5 + 4 >> 2] * $20)) + Math_fround(HEAPF32[$5 + 8 >> 2] * $21);
   HEAPF32[$7 + 24 >> 2] = Math_fround(Math_fround($19 * HEAPF32[$5 + 32 >> 2]) + Math_fround($20 * HEAPF32[$5 + 36 >> 2])) + Math_fround($21 * HEAPF32[$5 + 40 >> 2]);
   HEAPF32[$7 + 20 >> 2] = Math_fround(Math_fround($19 * HEAPF32[$5 + 16 >> 2]) + Math_fround($20 * HEAPF32[$5 + 20 >> 2])) + Math_fround($21 * HEAPF32[$5 + 24 >> 2]);
   HEAP32[$7 + 12 >> 2] = 0;
   $12 = Math_fround($12 - Math_fround($16 * $15));
   $13 = Math_fround($13 - Math_fround($18 * $15));
   $11 = Math_fround($11 - Math_fround($14 * $15));
   HEAPF32[$7 + 8 >> 2] = Math_fround(Math_fround(Math_fround($12 * $38) + Math_fround($13 * $51)) + Math_fround($11 * $50)) + $42;
   HEAPF32[$7 + 4 >> 2] = Math_fround(Math_fround(Math_fround($12 * $39) + Math_fround($13 * $53)) + Math_fround($11 * $52)) + $48;
   HEAPF32[$7 >> 2] = Math_fround(Math_fround($27 * $11) + Math_fround(Math_fround($41 * $12) + Math_fround($40 * $13))) + $25;
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $7 + 16 | 0, $7, $15);
  }
  global$0 = $7 + 48 | 0;
 }
 
 function btConvexPlaneCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = 0, $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = 0, $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0), $53 = Math_fround(0), $54 = Math_fround(0), $55 = Math_fround(0);
  $9 = global$0 - 48 | 0;
  global$0 = $9;
  label$1 : {
   if (!HEAP32[$0 + 12 >> 2]) {
    break label$1
   }
   $10 = HEAPU8[$0 + 16 | 0];
   $18 = $10 ? $2 : $1;
   $3 = HEAP32[$18 + 12 >> 2];
   $19 = HEAPF32[$3 + 56 >> 2];
   $20 = HEAPF32[$3 + 52 >> 2];
   $21 = HEAPF32[$3 + 48 >> 2];
   $33 = $10 ? $1 : $2;
   $11 = HEAP32[$33 + 12 >> 2];
   $34 = HEAPF32[$11 + 56 >> 2];
   $43 = HEAPF32[$11 + 48 >> 2];
   $35 = HEAPF32[$11 + 52 >> 2];
   $18 = HEAP32[$18 + 4 >> 2];
   $22 = HEAPF32[$3 + 32 >> 2];
   $23 = HEAPF32[$3 + 16 >> 2];
   $24 = HEAPF32[$3 >> 2];
   $25 = HEAPF32[$3 + 36 >> 2];
   $27 = HEAPF32[$3 + 20 >> 2];
   $28 = HEAPF32[$3 + 4 >> 2];
   $5 = HEAPF32[$11 + 40 >> 2];
   $7 = HEAPF32[$11 + 24 >> 2];
   $6 = HEAPF32[$11 + 8 >> 2];
   $8 = HEAPF32[$11 + 32 >> 2];
   $13 = HEAPF32[$11 + 16 >> 2];
   $12 = HEAPF32[$11 >> 2];
   $10 = HEAP32[$33 + 4 >> 2];
   $14 = HEAPF32[$11 + 36 >> 2];
   $16 = HEAPF32[$3 + 40 >> 2];
   $17 = HEAPF32[$11 + 20 >> 2];
   $29 = HEAPF32[$3 + 24 >> 2];
   $15 = HEAPF32[$11 + 4 >> 2];
   $30 = HEAPF32[$3 + 8 >> 2];
   HEAP32[$9 + 28 >> 2] = 0;
   $37 = Math_fround(Math_fround(Math_fround($30 * $12) + Math_fround($29 * $13)) + Math_fround($16 * $8));
   $31 = Math_fround(-HEAPF32[$10 + 52 >> 2]);
   $38 = Math_fround(Math_fround(Math_fround($30 * $15) + Math_fround($29 * $17)) + Math_fround($16 * $14));
   $11 = $10 + 56 | 0;
   $32 = HEAPF32[$11 >> 2];
   $29 = Math_fround(Math_fround(Math_fround($30 * $6) + Math_fround($29 * $7)) + Math_fround($16 * $5));
   $39 = $10 + 60 | 0;
   $16 = HEAPF32[$39 >> 2];
   HEAPF32[$9 + 24 >> 2] = Math_fround(Math_fround($37 * $31) - Math_fround($38 * $32)) - Math_fround($29 * $16);
   $30 = Math_fround(Math_fround(Math_fround($28 * $12) + Math_fround($27 * $13)) + Math_fround($25 * $8));
   $40 = Math_fround(Math_fround(Math_fround($28 * $15) + Math_fround($27 * $17)) + Math_fround($25 * $14));
   $41 = Math_fround(Math_fround(Math_fround($28 * $6) + Math_fround($27 * $7)) + Math_fround($25 * $5));
   HEAPF32[$9 + 20 >> 2] = Math_fround(Math_fround($30 * $31) - Math_fround($32 * $40)) - Math_fround($16 * $41);
   $42 = Math_fround(Math_fround(Math_fround($24 * $12) + Math_fround($23 * $13)) + Math_fround($22 * $8));
   $26 = Math_fround($42 * $31);
   $31 = Math_fround(Math_fround(Math_fround($24 * $15) + Math_fround($23 * $17)) + Math_fround($22 * $14));
   $26 = Math_fround($26 - Math_fround($32 * $31));
   $32 = Math_fround(Math_fround(Math_fround($24 * $6) + Math_fround($23 * $7)) + Math_fround($22 * $5));
   HEAPF32[$9 + 16 >> 2] = $26 - Math_fround($16 * $32);
   FUNCTION_TABLE[HEAP32[HEAP32[$18 >> 2] + 64 >> 2]]($9 + 32 | 0, $18, $9 + 16 | 0);
   $3 = HEAP32[$33 + 12 >> 2];
   $44 = HEAPF32[$3 + 48 >> 2];
   $45 = HEAPF32[$3 + 32 >> 2];
   $46 = HEAPF32[$3 + 16 >> 2];
   $47 = HEAPF32[$3 + 8 >> 2];
   $48 = HEAPF32[$3 + 4 >> 2];
   $49 = HEAPF32[$3 >> 2];
   $50 = HEAPF32[$3 + 56 >> 2];
   $51 = HEAPF32[$3 + 52 >> 2];
   $52 = HEAPF32[$3 + 40 >> 2];
   $53 = HEAPF32[$3 + 36 >> 2];
   $54 = HEAPF32[$3 + 24 >> 2];
   $55 = HEAPF32[$3 + 20 >> 2];
   $36 = HEAPF32[$10 + 68 >> 2];
   $27 = HEAPF32[$39 >> 2];
   $28 = HEAPF32[$10 + 52 >> 2];
   $16 = HEAPF32[$11 >> 2];
   $22 = HEAPF32[$9 + 40 >> 2];
   $23 = HEAPF32[$9 + 32 >> 2];
   $24 = HEAPF32[$9 + 36 >> 2];
   $26 = HEAPF32[HEAP32[$0 + 12 >> 2] + 784 >> 2];
   HEAP32[$4 + 4 >> 2] = HEAP32[$0 + 12 >> 2];
   $25 = Math_fround(-$43);
   $7 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($21 * $6) + Math_fround($20 * $7)) + Math_fround($19 * $5)) + Math_fround(Math_fround(Math_fround($6 * $25) - Math_fround($7 * $35)) - Math_fround($5 * $34))) + Math_fround(Math_fround(Math_fround($32 * $23) + Math_fround($41 * $24)) + Math_fround($29 * $22)));
   $6 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($21 * $12) + Math_fround($20 * $13)) + Math_fround($19 * $8)) + Math_fround(Math_fround(Math_fround($12 * $25) - Math_fround($13 * $35)) - Math_fround($8 * $34))) + Math_fround(Math_fround(Math_fround($42 * $23) + Math_fround($30 * $24)) + Math_fround($37 * $22)));
   $8 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($21 * $15) + Math_fround($20 * $17)) + Math_fround($19 * $14)) + Math_fround(Math_fround(Math_fround($15 * $25) - Math_fround($17 * $35)) - Math_fround($14 * $34))) + Math_fround(Math_fround(Math_fround($31 * $23) + Math_fround($40 * $24)) + Math_fround($38 * $22)));
   $5 = Math_fround(Math_fround(Math_fround($27 * $7) + Math_fround(Math_fround($28 * $6) + Math_fround($16 * $8))) - $36);
   if (!!($5 < $26)) {
    HEAP32[$9 + 28 >> 2] = 0;
    $3 = HEAP32[$33 + 12 >> 2];
    $13 = HEAPF32[$10 + 52 >> 2];
    $12 = HEAPF32[$10 + 56 >> 2];
    $14 = HEAPF32[$10 + 60 >> 2];
    HEAPF32[$9 + 16 >> 2] = Math_fround(Math_fround(HEAPF32[$3 >> 2] * $13) + Math_fround(HEAPF32[$3 + 4 >> 2] * $12)) + Math_fround(HEAPF32[$3 + 8 >> 2] * $14);
    HEAPF32[$9 + 24 >> 2] = Math_fround(Math_fround($13 * HEAPF32[$3 + 32 >> 2]) + Math_fround($12 * HEAPF32[$3 + 36 >> 2])) + Math_fround($14 * HEAPF32[$3 + 40 >> 2]);
    HEAPF32[$9 + 20 >> 2] = Math_fround(Math_fround($13 * HEAPF32[$3 + 16 >> 2]) + Math_fround($12 * HEAPF32[$3 + 20 >> 2])) + Math_fround($14 * HEAPF32[$3 + 24 >> 2]);
    HEAP32[$9 + 12 >> 2] = 0;
    $6 = Math_fround($6 - Math_fround($28 * $5));
    $8 = Math_fround($8 - Math_fround($16 * $5));
    $7 = Math_fround($7 - Math_fround($27 * $5));
    HEAPF32[$9 + 8 >> 2] = Math_fround(Math_fround(Math_fround($6 * $45) + Math_fround($8 * $53)) + Math_fround($7 * $52)) + $50;
    HEAPF32[$9 + 4 >> 2] = Math_fround(Math_fround(Math_fround($6 * $46) + Math_fround($8 * $55)) + Math_fround($7 * $54)) + $51;
    HEAPF32[$9 >> 2] = Math_fround(Math_fround($47 * $7) + Math_fround(Math_fround($49 * $6) + Math_fround($48 * $8))) + $44;
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4, $9 + 16 | 0, $9, $5);
   }
   label$3 : {
    if (HEAP32[$18 + 4 >> 2] > 6) {
     break label$3
    }
    if (HEAP32[HEAP32[$4 + 4 >> 2] + 780 >> 2] >= HEAP32[$0 + 24 >> 2]) {
     break label$3
    }
    $7 = HEAPF32[$10 + 60 >> 2];
    label$4 : {
     if (!!(Math_fround(Math_abs($7)) > Math_fround(.7071067690849304))) {
      $5 = HEAPF32[$10 + 56 >> 2];
      $6 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($7 * $7) + Math_fround($5 * $5)))));
      $5 = Math_fround($5 * $6);
      $7 = Math_fround(-Math_fround($7 * $6));
      $6 = Math_fround(0.0);
      break label$4;
     }
     $5 = HEAPF32[$10 + 52 >> 2];
     $26 = $5;
     $36 = Math_fround($5 * $5);
     $5 = HEAPF32[$10 + 56 >> 2];
     $6 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($36 + Math_fround($5 * $5)))));
     $7 = Math_fround($26 * $6);
     $6 = Math_fround(-Math_fround($5 * $6));
     $5 = Math_fround(0.0);
    }
    $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$18 >> 2] + 16 >> 2]]($18));
    $3 = 0;
    $8 = Math_fround(Math_fround(Math_min(Math_fround(HEAPF32[744] / $8), Math_fround(.39269909262657166))) * Math_fround(.5));
    $12 = sinf($8);
    $11 = HEAP32[$0 + 20 >> 2];
    $13 = cosf($8);
    if (($11 | 0) < 1) {
     break label$3
    }
    $8 = Math_fround($12 / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($7 * $7)) + Math_fround($5 * $5)))));
    $12 = Math_fround($5 * $8);
    $14 = Math_fround($7 * $8);
    $17 = Math_fround($6 * $8);
    while (1) {
     $6 = HEAPF32[$10 + 56 >> 2];
     $8 = HEAPF32[$10 + 60 >> 2];
     $7 = HEAPF32[$10 + 52 >> 2];
     $5 = Math_fround(Math_fround(Math_fround(Math_fround(6.2831854820251465) / Math_fround($11 | 0)) * Math_fround($3 | 0)) * Math_fround(.5));
     $15 = Math_fround(sinf($5) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($6 * $6)) + Math_fround($8 * $8)))));
     $7 = Math_fround($7 * $15);
     $5 = cosf($5);
     $6 = Math_fround($6 * $15);
     $8 = Math_fround($8 * $15);
     $15 = Math_fround(Math_fround(Math_fround(Math_fround($13 * $5) + Math_fround($17 * $7)) + Math_fround($14 * $6)) + Math_fround($12 * $8));
     $19 = Math_fround(Math_fround(Math_fround(Math_fround($17 * $5) - Math_fround($13 * $7)) - Math_fround($12 * $6)) + Math_fround($14 * $8));
     $20 = Math_fround(Math_fround(Math_fround(Math_fround($14 * $5) - Math_fround($13 * $6)) - Math_fround($17 * $8)) + Math_fround($12 * $7));
     $21 = Math_fround(Math_fround(Math_fround(Math_fround($12 * $5) - Math_fround($13 * $8)) - Math_fround($14 * $7)) + Math_fround($17 * $6));
     HEAPF32[$9 + 28 >> 2] = Math_fround(Math_fround(Math_fround($5 * $15) - Math_fround($7 * $19)) - Math_fround($6 * $20)) - Math_fround($8 * $21);
     HEAPF32[$9 + 24 >> 2] = Math_fround(Math_fround($6 * $19) + Math_fround(Math_fround($8 * $15) + Math_fround($5 * $21))) - Math_fround($7 * $20);
     HEAPF32[$9 + 20 >> 2] = Math_fround(Math_fround($7 * $21) + Math_fround(Math_fround($5 * $20) + Math_fround($6 * $15))) - Math_fround($8 * $19);
     HEAPF32[$9 + 16 >> 2] = Math_fround(Math_fround($8 * $20) + Math_fround(Math_fround($7 * $15) + Math_fround($5 * $19))) - Math_fround($6 * $21);
     btConvexPlaneCollisionAlgorithm__collideSingleContact_28btQuaternion_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29($0, $9 + 16 | 0, $1, $2, $4);
     $3 = $3 + 1 | 0;
     $11 = HEAP32[$0 + 20 >> 2];
     if (($3 | 0) < ($11 | 0)) {
      continue
     }
     break;
    };
   }
   if (!HEAPU8[$0 + 8 | 0]) {
    break label$1
   }
   if (!HEAP32[HEAP32[$0 + 12 >> 2] + 780 >> 2]) {
    break label$1
   }
   $10 = HEAP32[$4 + 4 >> 2];
   if (!HEAP32[$10 + 780 >> 2]) {
    break label$1
   }
   $3 = HEAP32[$10 + 772 >> 2];
   $0 = HEAP32[HEAP32[$4 + 8 >> 2] + 8 >> 2];
   if (($3 | 0) != ($0 | 0)) {
    btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($10, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0, $0 + 4 | 0);
    break label$1;
   }
   btPersistentManifold__refreshContactPoints_28btTransform_20const__2c_20btTransform_20const__29($10, $3 + 4 | 0, HEAP32[HEAP32[$4 + 12 >> 2] + 8 >> 2] + 4 | 0);
  }
  global$0 = $9 + 48 | 0;
 }
 
 function btDefaultCollisionConfiguration__btDefaultCollisionConfiguration_28btDefaultCollisionConstructionInfo_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  HEAP32[$0 >> 2] = 17664;
  $2 = HEAP32[$1 + 20 >> 2];
  $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(4);
  HEAP32[$0 + 24 >> 2] = $3;
  HEAP32[$3 >> 2] = $2 ? 14800 : 15008;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(20);
  btConvexConvexAlgorithm__CreateFunc__CreateFunc_28btConvexPenetrationDepthSolver__29($2, HEAP32[$0 + 24 >> 2]);
  HEAP32[$0 + 28 >> 2] = $2;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$2 >> 2] = 17780;
  HEAP8[$2 + 4 | 0] = 0;
  HEAP32[$0 + 32 >> 2] = $2;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$2 >> 2] = 17864;
  HEAP8[$2 + 4 | 0] = 0;
  HEAP32[$0 + 36 >> 2] = $2;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$2 >> 2] = 17956;
  HEAP8[$2 + 4 | 0] = 0;
  HEAP32[$0 + 40 >> 2] = $2;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$2 >> 2] = 18036;
  HEAP8[$2 + 4 | 0] = 0;
  HEAP32[$0 + 44 >> 2] = $2;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$2 >> 2] = 18124;
  HEAP8[$2 + 4 | 0] = 0;
  HEAP32[$0 + 48 >> 2] = $2;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$2 >> 2] = 18208;
  HEAP8[$2 + 4 | 0] = 0;
  HEAP32[$0 + 52 >> 2] = $2;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$2 >> 2] = 18276;
  HEAP8[$2 + 4 | 0] = 0;
  HEAP32[$0 + 56 >> 2] = $2;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$2 >> 2] = 18360;
  HEAP8[$2 + 4 | 0] = 0;
  HEAP32[$0 + 72 >> 2] = $2;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$0 + 76 >> 2] = $2;
  HEAP32[$2 >> 2] = 18360;
  HEAP8[$2 + 4 | 0] = 1;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(8);
  HEAP32[$2 >> 2] = 18444;
  HEAP8[$2 + 4 | 0] = 0;
  HEAP32[$0 + 68 >> 2] = $2;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(16);
  HEAP32[$2 + 8 >> 2] = 1;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP32[$2 >> 2] = 18520;
  HEAP8[$2 + 4 | 0] = 0;
  HEAP32[$0 + 84 >> 2] = $2;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(16);
  HEAP32[$2 + 8 >> 2] = 1;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP32[$2 >> 2] = 18520;
  HEAP32[$0 + 80 >> 2] = $2;
  HEAP8[$2 + 4 | 0] = 1;
  $7 = HEAP32[$1 + 16 >> 2];
  $2 = HEAP32[$1 >> 2];
  label$1 : {
   if ($2) {
    HEAP32[$0 + 8 >> 2] = $2;
    HEAP8[$0 + 12 | 0] = 0;
    break label$1;
   }
   HEAP8[$0 + 12 | 0] = 1;
   $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(24);
   HEAP32[$4 + 20 >> 2] = 0;
   HEAP32[$4 >> 2] = 804;
   $2 = HEAP32[$1 + 8 >> 2];
   HEAP32[$4 + 4 >> 2] = $2;
   $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($2, 804));
   HEAP32[$4 + 12 >> 2] = $2;
   HEAP32[$4 + 16 >> 2] = $2;
   $3 = HEAP32[$4 + 4 >> 2];
   HEAP32[$4 + 8 >> 2] = $3;
   $5 = $3 + -1 | 0;
   label$3 : {
    if (!$5) {
     $3 = $2;
     break label$3;
    }
    $6 = HEAP32[$4 >> 2];
    while (1) {
     $3 = $2 + $6 | 0;
     HEAP32[$2 >> 2] = $3;
     $2 = $3;
     $5 = $5 + -1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   HEAP32[$3 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = $4;
  }
  $2 = HEAP32[$1 + 4 >> 2];
  if ($2) {
   HEAP32[$0 + 16 >> 2] = $2;
   HEAP8[$0 + 20 | 0] = 0;
   return;
  }
  HEAP8[$0 + 20 | 0] = 1;
  $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(24);
  HEAP32[$4 + 20 >> 2] = 0;
  $2 = ($7 | 0) > 80 ? $7 : 80;
  $2 = ($2 | 0) > 116 ? $2 + 16 & -16 : 128;
  HEAP32[$4 >> 2] = $2;
  $3 = HEAP32[$1 + 12 >> 2];
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($2, $3));
  HEAP32[$4 + 12 >> 2] = $2;
  HEAP32[$4 + 16 >> 2] = $2;
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$4 + 8 >> 2] = $3;
  $5 = $3 + -1 | 0;
  label$7 : {
   if (!$5) {
    $3 = $2;
    break label$7;
   }
   $6 = HEAP32[$4 >> 2];
   while (1) {
    $3 = $2 + $6 | 0;
    HEAP32[$2 >> 2] = $3;
    $2 = $3;
    $5 = $5 + -1 | 0;
    if ($5) {
     continue
    }
    break;
   };
  }
  HEAP32[$3 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = $4;
 }
 
 function btDefaultCollisionConfiguration___btDefaultCollisionConfiguration_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 17664;
  if (HEAPU8[$0 + 20 | 0]) {
   btAlignedFreeInternal_28void__29(HEAP32[HEAP32[$0 + 16 >> 2] + 16 >> 2]);
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 16 >> 2]);
  }
  if (HEAPU8[$0 + 12 | 0]) {
   btAlignedFreeInternal_28void__29(HEAP32[HEAP32[$0 + 8 >> 2] + 16 >> 2]);
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 8 >> 2]);
  }
  $1 = HEAP32[$0 + 28 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 28 >> 2]);
  $1 = HEAP32[$0 + 32 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 32 >> 2]);
  $1 = HEAP32[$0 + 36 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 36 >> 2]);
  $1 = HEAP32[$0 + 40 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 40 >> 2]);
  $1 = HEAP32[$0 + 44 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 44 >> 2]);
  $1 = HEAP32[$0 + 48 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 48 >> 2]);
  $1 = HEAP32[$0 + 52 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 52 >> 2]);
  $1 = HEAP32[$0 + 56 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 56 >> 2]);
  $1 = HEAP32[$0 + 72 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 72 >> 2]);
  $1 = HEAP32[$0 + 76 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 76 >> 2]);
  $1 = HEAP32[$0 + 68 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 68 >> 2]);
  $1 = HEAP32[$0 + 84 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 84 >> 2]);
  $1 = HEAP32[$0 + 80 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 80 >> 2]);
  $1 = HEAP32[$0 + 24 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 24 >> 2]);
  return $0 | 0;
 }
 
 function btDefaultCollisionConfiguration___btDefaultCollisionConfiguration_28_29_1($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(btDefaultCollisionConfiguration___btDefaultCollisionConfiguration_28_29($0));
 }
 
 function btDefaultCollisionConfiguration__getClosestPointsAlgorithmCreateFunc_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   $3 = ($1 | 0) != 8;
   if ($3) {
    break label$1
   }
   if (($2 | 0) != 8) {
    break label$1
   }
   return HEAP32[$0 + 56 >> 2];
  }
  label$2 : {
   if ($3) {
    break label$2
   }
   if (($2 | 0) != 1) {
    break label$2
   }
   return HEAP32[$0 + 72 >> 2];
  }
  label$3 : {
   if (($1 | 0) != 1) {
    break label$3
   }
   if (($2 | 0) != 8) {
    break label$3
   }
   return HEAP32[$0 + 76 >> 2];
  }
  label$4 : {
   if (($1 | 0) > 19) {
    break label$4
   }
   if (($2 | 0) != 28) {
    break label$4
   }
   return HEAP32[$0 + 84 >> 2];
  }
  label$5 : {
   if (($1 | 0) != 28) {
    break label$5
   }
   if (($2 | 0) > 19) {
    break label$5
   }
   return HEAP32[$0 + 80 >> 2];
  }
  label$6 : {
   if (($1 | 0) <= 19) {
    if (($2 | 0) <= 19) {
     return HEAP32[$0 + 28 >> 2]
    }
    if ($2 + -21 >>> 0 > 8) {
     break label$6
    }
    return HEAP32[$0 + 32 >> 2];
   }
   label$9 : {
    if (($2 | 0) > 19) {
     break label$9
    }
    if ($1 + -21 >>> 0 > 8) {
     break label$9
    }
    return HEAP32[$0 + 36 >> 2];
   }
   if (($1 | 0) != 31) {
    break label$6
   }
   if (($2 | 0) == 31) {
    return HEAP32[$0 + 44 >> 2]
   }
   return HEAP32[$0 + 40 >> 2];
  }
  if (($2 | 0) == 31) {
   return HEAP32[$0 + 48 >> 2]
  }
  return HEAP32[$0 + 52 >> 2];
 }
 
 function btDefaultCollisionConfiguration__getCollisionAlgorithmCreateFunc_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   $3 = ($1 | 0) != 8;
   if ($3) {
    break label$1
   }
   if (($2 | 0) != 8) {
    break label$1
   }
   return HEAP32[$0 + 56 >> 2];
  }
  label$2 : {
   if ($3) {
    break label$2
   }
   if (($2 | 0) != 1) {
    break label$2
   }
   return HEAP32[$0 + 72 >> 2];
  }
  label$3 : {
   if (($1 | 0) != 1) {
    break label$3
   }
   if (($2 | 0) != 8) {
    break label$3
   }
   return HEAP32[$0 + 76 >> 2];
  }
  if (!($1 | $2)) {
   return HEAP32[$0 + 68 >> 2]
  }
  label$5 : {
   if (($1 | 0) > 19) {
    break label$5
   }
   if (($2 | 0) != 28) {
    break label$5
   }
   return HEAP32[$0 + 84 >> 2];
  }
  label$6 : {
   if (($1 | 0) != 28) {
    break label$6
   }
   if (($2 | 0) > 19) {
    break label$6
   }
   return HEAP32[$0 + 80 >> 2];
  }
  label$7 : {
   if (($1 | 0) <= 19) {
    if (($2 | 0) <= 19) {
     return HEAP32[$0 + 28 >> 2]
    }
    if ($2 + -21 >>> 0 > 8) {
     break label$7
    }
    return HEAP32[$0 + 32 >> 2];
   }
   label$10 : {
    if (($2 | 0) > 19) {
     break label$10
    }
    if ($1 + -21 >>> 0 > 8) {
     break label$10
    }
    return HEAP32[$0 + 36 >> 2];
   }
   if (($1 | 0) != 31) {
    break label$7
   }
   if (($2 | 0) == 31) {
    return HEAP32[$0 + 44 >> 2]
   }
   return HEAP32[$0 + 40 >> 2];
  }
  if (($2 | 0) == 31) {
   return HEAP32[$0 + 48 >> 2]
  }
  return HEAP32[$0 + 52 >> 2];
 }
 
 function btDefaultCollisionConfiguration__getPersistentManifoldPool_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function btDefaultCollisionConfiguration__getCollisionAlgorithmPool_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 16 >> 2];
 }
 
 function btConvexConcaveCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 80) | 0;
  btConvexConcaveCollisionAlgorithm__btConvexConcaveCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, 0);
  return $0 | 0;
 }
 
 function btConvexConcaveCollisionAlgorithm__SwappedCreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 80) | 0;
  btConvexConcaveCollisionAlgorithm__btConvexConcaveCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, 1);
  return $0 | 0;
 }
 
 function btCompoundCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 84) | 0;
  btCompoundCollisionAlgorithm__btCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, 0);
  return $0 | 0;
 }
 
 function btCompoundCompoundCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 116) | 0;
  btCompoundCompoundCollisionAlgorithm__btCompoundCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3);
  return $0 | 0;
 }
 
 function btCompoundCollisionAlgorithm__SwappedCreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 84) | 0;
  btCompoundCollisionAlgorithm__btCompoundCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($0, $1, $2, $3, 1);
  return $0 | 0;
 }
 
 function btEmptyAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 8) | 0;
  btCollisionAlgorithm__btCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo_20const__29($0, $1);
  HEAP32[$0 >> 2] = 17112;
  return $0 | 0;
 }
 
 function btSphereSphereCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 16) | 0;
  btSphereSphereCollisionAlgorithm__btSphereSphereCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3);
  return $0 | 0;
 }
 
 function btSphereTriangleCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = HEAP32[$1 >> 2];
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 56 >> 2]]($4, 20) | 0;
  btSphereTriangleCollisionAlgorithm__btSphereTriangleCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_29($4, HEAP32[$1 + 4 >> 2], $1, $2, $3, HEAPU8[$0 + 4 | 0]);
  return $4 | 0;
 }
 
 function btBoxBoxCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[$1 >> 2];
  $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, 16) | 0;
  btBoxBoxCollisionAlgorithm__btBoxBoxCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3);
  return $0 | 0;
 }
 
 function btConvexPlaneCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = HEAP32[$1 >> 2];
  $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 56 >> 2]]($4, 28) | 0;
  btConvexPlaneCollisionAlgorithm__btConvexPlaneCollisionAlgorithm_28btPersistentManifold__2c_20btCollisionAlgorithmConstructionInfo_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20bool_2c_20int_2c_20int_29($4, $1, $2, $3, HEAPU8[$0 + 4 | 0], HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2]);
  return $4 | 0;
 }
 
 function btHashedOverlappingPairCache__btHashedOverlappingPairCache_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  HEAP32[$0 >> 2] = 18600;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $2 = $0 + 8 | 0;
  $1 = $2;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $1 = $0 + 32 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 60 >> 2] = 0;
  $1 = $0 + 52 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(32);
  $3 = HEAP32[$2 >> 2];
  if (($3 | 0) >= 1) {
   $2 = 12;
   while (1) {
    $4 = $2 + $6 | 0;
    $5 = $2 + HEAP32[$0 + 16 >> 2] | 0;
    HEAP32[$4 + -12 >> 2] = HEAP32[$5 + -12 >> 2];
    $1 = $5 + -8 | 0;
    $8 = HEAP32[$1 >> 2];
    $1 = HEAP32[$1 + 4 >> 2];
    $7 = $4 + -8 | 0;
    HEAP32[$7 >> 2] = $8;
    HEAP32[$7 + 4 >> 2] = $1;
    HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
    $2 = $2 + 16 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  $2 = HEAP32[$0 + 16 >> 2];
  if ($2) {
   if (HEAPU8[$0 + 20 | 0]) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = $6;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 12 >> 2] = 2;
  btHashedOverlappingPairCache__growTables_28_29($0);
 }
 
 function btHashedOverlappingPairCache__growTables_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $7 = HEAP32[$0 + 32 >> 2];
  $1 = HEAP32[$0 + 12 >> 2];
  label$1 : {
   if (($7 | 0) >= ($1 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAP32[$0 + 36 >> 2] >= ($1 | 0)) {
     $4 = HEAP32[$0 + 40 >> 2];
     break label$2;
    }
    label$4 : {
     if (!$1) {
      $2 = $7;
      break label$4;
     }
     $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 2);
     $2 = HEAP32[$0 + 32 >> 2];
    }
    $6 = HEAP32[$0 + 40 >> 2];
    label$6 : {
     if (($2 | 0) >= 1) {
      $3 = $4;
      $5 = $6;
      while (1) {
       HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
       $3 = $3 + 4 | 0;
       $5 = $5 + 4 | 0;
       $2 = $2 + -1 | 0;
       if ($2) {
        continue
       }
       break;
      };
      break label$6;
     }
     if ($6) {
      break label$6
     }
     HEAP32[$0 + 40 >> 2] = $4;
     HEAP32[$0 + 36 >> 2] = $1;
     HEAP8[$0 + 44 | 0] = 1;
     break label$2;
    }
    if (HEAPU8[$0 + 44 | 0]) {
     btAlignedFreeInternal_28void__29($6)
    }
    HEAP32[$0 + 40 >> 2] = $4;
    HEAP8[$0 + 44 | 0] = 1;
    HEAP32[$0 + 36 >> 2] = $1;
   }
   $3 = $7 << 2;
   $2 = $3 + $4 | 0;
   $4 = $1 << 2;
   memset($2, 0, $4 - $3 | 0);
   HEAP32[$0 + 32 >> 2] = $1;
   $6 = HEAP32[$0 + 52 >> 2];
   if (($6 | 0) < ($1 | 0)) {
    label$11 : {
     if (HEAP32[$0 + 56 >> 2] >= ($1 | 0)) {
      $8 = HEAP32[$0 + 60 >> 2];
      break label$11;
     }
     label$13 : {
      if (!$1) {
       $2 = $6;
       break label$13;
      }
      $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4);
      $2 = HEAP32[$0 + 52 >> 2];
     }
     $9 = HEAP32[$0 + 60 >> 2];
     label$15 : {
      if (($2 | 0) >= 1) {
       $3 = $8;
       $5 = $9;
       while (1) {
        HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
        $3 = $3 + 4 | 0;
        $5 = $5 + 4 | 0;
        $2 = $2 + -1 | 0;
        if ($2) {
         continue
        }
        break;
       };
       break label$15;
      }
      if ($9) {
       break label$15
      }
      HEAP32[$0 + 60 >> 2] = $8;
      HEAP32[$0 + 56 >> 2] = $1;
      HEAP8[$0 - -64 | 0] = 1;
      break label$11;
     }
     if (HEAPU8[$0 - -64 | 0]) {
      btAlignedFreeInternal_28void__29($9)
     }
     HEAP32[$0 + 60 >> 2] = $8;
     HEAP8[$0 + 64 | 0] = 1;
     HEAP32[$0 + 56 >> 2] = $1;
    }
    $3 = $6 << 2;
    memset($3 + $8 | 0, 0, $4 - $3 | 0);
   }
   HEAP32[$0 + 52 >> 2] = $1;
   if (($1 | 0) >= 1) {
    memset(HEAP32[$0 + 40 >> 2], 255, $4);
    memset(HEAP32[$0 + 60 >> 2], 255, $4);
   }
   if (($7 | 0) < 1) {
    break label$1
   }
   $5 = HEAP32[$0 + 60 >> 2];
   $3 = HEAP32[$0 + 16 >> 2];
   $4 = HEAP32[$0 + 40 >> 2];
   $2 = 0;
   while (1) {
    $1 = HEAP32[HEAP32[$3 >> 2] + 12 >> 2] | HEAP32[HEAP32[$3 + 4 >> 2] + 12 >> 2] << 16;
    $1 = $1 + ($1 << 15 ^ -1) | 0;
    $1 = Math_imul($1 >>> 10 ^ $1, 9);
    $1 = $1 >>> 6 ^ $1;
    $1 = $1 + ($1 << 11 ^ -1) | 0;
    $1 = ((HEAP32[$0 + 12 >> 2] + -1 & ($1 >>> 16 ^ $1)) << 2) + $4 | 0;
    HEAP32[$5 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$1 >> 2] = $2;
    $3 = $3 + 16 | 0;
    $5 = $5 + 4 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($7 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function btHashedOverlappingPairCache___btHashedOverlappingPairCache_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 18600;
  $1 = HEAP32[$0 + 60 >> 2];
  if ($1) {
   if (HEAPU8[$0 - -64 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 60 >> 2] = 0;
  }
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $1 = HEAP32[$0 + 40 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 44 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 40 >> 2] = 0;
  }
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $1 = HEAP32[$0 + 16 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 20 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  return $0 | 0;
 }
 
 function btHashedOverlappingPairCache___btHashedOverlappingPairCache_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 18600;
  $1 = HEAP32[$0 + 60 >> 2];
  if ($1) {
   if (HEAPU8[$0 - -64 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 60 >> 2] = 0;
  }
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $1 = HEAP32[$0 + 40 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 44 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 40 >> 2] = 0;
  }
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $1 = HEAP32[$0 + 16 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 20 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btHashedOverlappingPairCache__cleanOverlappingPair_28btBroadphasePair__2c_20btDispatcher__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   $0 = HEAP32[$1 + 8 >> 2];
   if (!$0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 60 >> 2]]($2, HEAP32[$1 + 8 >> 2]);
   HEAP32[$1 + 8 >> 2] = 0;
  }
 }
 
 function btHashedOverlappingPairCache__cleanProxyFromPairs_28btBroadphaseProxy__2c_20btDispatcher__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $2;
  HEAP32[$3 + 8 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $1;
  HEAP32[$3 >> 2] = 18816;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $3, $2);
  global$0 = $3 + 16 | 0;
 }
 
 function btHashedOverlappingPairCache__removeOverlappingPairsContainingProxy_28btBroadphaseProxy__2c_20btDispatcher__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $1;
  HEAP32[$3 + 8 >> 2] = 18960;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $3 + 8 | 0, $2);
  global$0 = $3 + 16 | 0;
 }
 
 function btHashedOverlappingPairCache__findPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  HEAP32[697] = HEAP32[697] + 1;
  $3 = HEAP32[$1 + 12 >> 2] > HEAP32[$2 + 12 >> 2];
  $5 = HEAP32[($3 ? $1 : $2) + 12 >> 2];
  $6 = HEAP32[($3 ? $2 : $1) + 12 >> 2];
  $1 = $5 << 16 | $6;
  $1 = $1 + ($1 << 15 ^ -1) | 0;
  $1 = Math_imul($1 >>> 10 ^ $1, 9);
  $1 = $1 >>> 6 ^ $1;
  $1 = $1 + ($1 << 11 ^ -1) | 0;
  $1 = HEAP32[$0 + 12 >> 2] + -1 & ($1 >>> 16 ^ $1);
  label$1 : {
   label$2 : {
    if (($1 | 0) >= HEAP32[$0 + 32 >> 2]) {
     break label$2
    }
    $1 = HEAP32[HEAP32[$0 + 40 >> 2] + ($1 << 2) >> 2];
    if (($1 | 0) == -1) {
     break label$2
    }
    $2 = HEAP32[$0 + 16 >> 2];
    while (1) {
     $3 = $1 << 4;
     $4 = $3 + $2 | 0;
     if (($5 | 0) == HEAP32[HEAP32[($2 + $3 | 0) + 4 >> 2] + 12 >> 2] ? HEAP32[HEAP32[$4 >> 2] + 12 >> 2] == ($6 | 0) : 0) {
      break label$1
     }
     $1 = HEAP32[HEAP32[$0 + 60 >> 2] + ($1 << 2) >> 2];
     if (($1 | 0) != -1) {
      continue
     }
     break;
    };
   }
   $4 = 0;
  }
  return $4 | 0;
 }
 
 function btHashedOverlappingPairCache__internalAddPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $3 = HEAP32[$1 + 12 >> 2] > HEAP32[$2 + 12 >> 2];
  $7 = $3 ? $1 : $2;
  $6 = HEAP32[$7 + 12 >> 2];
  $8 = $3 ? $2 : $1;
  $5 = HEAP32[$8 + 12 >> 2];
  $1 = $6 << 16 | $5;
  $1 = $1 + ($1 << 15 ^ -1) | 0;
  $1 = Math_imul($1 >>> 10 ^ $1, 9);
  $1 = $1 >>> 6 ^ $1;
  $1 = $1 + ($1 << 11 ^ -1) | 0;
  $13 = $1 >>> 16 ^ $1;
  $9 = HEAP32[$0 + 12 >> 2];
  $12 = $13 & $9 + -1;
  $1 = HEAP32[HEAP32[$0 + 40 >> 2] + ($12 << 2) >> 2];
  label$1 : {
   if (($1 | 0) != -1) {
    $2 = HEAP32[$0 + 16 >> 2];
    while (1) {
     $3 = $1 << 4;
     $4 = $3 + $2 | 0;
     if (($6 | 0) == HEAP32[HEAP32[($2 + $3 | 0) + 4 >> 2] + 12 >> 2] ? HEAP32[HEAP32[$4 >> 2] + 12 >> 2] == ($5 | 0) : 0) {
      break label$1
     }
     $1 = HEAP32[HEAP32[$0 + 60 >> 2] + ($1 << 2) >> 2];
     if (($1 | 0) != -1) {
      continue
     }
     break;
    };
   }
   $5 = HEAP32[$0 + 8 >> 2];
   $2 = $5;
   $1 = $9;
   label$5 : {
    if (($1 | 0) != ($2 | 0)) {
     break label$5
    }
    $2 = $9;
    $10 = $1 ? $1 << 1 : 1;
    if (($1 | 0) >= ($10 | 0)) {
     break label$5
    }
    label$6 : {
     if (!$10) {
      $6 = 0;
      $1 = $9;
      break label$6;
     }
     $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10 << 4);
     $1 = HEAP32[$0 + 8 >> 2];
    }
    $4 = $1;
    if (($4 | 0) >= 1) {
     $1 = 12;
     while (1) {
      $2 = $1 + $6 | 0;
      $3 = $1 + HEAP32[$0 + 16 >> 2] | 0;
      HEAP32[$2 + -12 >> 2] = HEAP32[$3 + -12 >> 2];
      $11 = $3 + -8 | 0;
      $15 = HEAP32[$11 >> 2];
      $11 = HEAP32[$11 + 4 >> 2];
      $14 = $2 + -8 | 0;
      HEAP32[$14 >> 2] = $15;
      HEAP32[$14 + 4 >> 2] = $11;
      HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
      $1 = $1 + 16 | 0;
      $4 = $4 + -1 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    $1 = HEAP32[$0 + 16 >> 2];
    if ($1) {
     if (HEAPU8[$0 + 20 | 0]) {
      btAlignedFreeInternal_28void__29($1)
     }
     HEAP32[$0 + 16 >> 2] = 0;
    }
    HEAP32[$0 + 16 >> 2] = $6;
    HEAP32[$0 + 12 >> 2] = $10;
    HEAP8[$0 + 20 | 0] = 1;
    $2 = HEAP32[$0 + 8 >> 2];
    $1 = $10;
   }
   HEAP32[$0 + 8 >> 2] = $2 + 1;
   $2 = HEAP32[$0 + 16 >> 2];
   $4 = $2 + ($5 << 4) | 0;
   $3 = HEAP32[$0 + 68 >> 2];
   if ($3) {
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $8, $7) | 0;
    $1 = HEAP32[$0 + 12 >> 2];
   }
   if (($9 | 0) < ($1 | 0)) {
    btHashedOverlappingPairCache__growTables_28_29($0);
    $12 = $13 & HEAP32[$0 + 12 >> 2] + -1;
   }
   $1 = HEAP32[$7 + 12 >> 2];
   $3 = HEAP32[$8 + 12 >> 2];
   $2 = ($5 << 4) + $2 | 0;
   HEAP32[$2 + 8 >> 2] = 0;
   HEAP32[$2 + 12 >> 2] = 0;
   $1 = ($3 | 0) < ($1 | 0);
   HEAP32[$2 + 4 >> 2] = $1 ? $7 : $8;
   $2 = HEAP32[$0 + 60 >> 2] + ($5 << 2) | 0;
   $0 = HEAP32[$0 + 40 >> 2] + ($12 << 2) | 0;
   HEAP32[$2 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$4 >> 2] = $1 ? $8 : $7;
   HEAP32[$0 >> 2] = $5;
  }
  return $4;
 }
 
 function btHashedOverlappingPairCache__removeOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__2c_20btDispatcher__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  HEAP32[695] = HEAP32[695] + 1;
  $4 = HEAP32[$1 + 12 >> 2] > HEAP32[$2 + 12 >> 2];
  $7 = $4 ? $1 : $2;
  $5 = HEAP32[$7 + 12 >> 2];
  $8 = $4 ? $2 : $1;
  $4 = HEAP32[$8 + 12 >> 2];
  $1 = $5 << 16 | $4;
  $1 = $1 + ($1 << 15 ^ -1) | 0;
  $1 = Math_imul($1 >>> 10 ^ $1, 9);
  $1 = $1 >>> 6 ^ $1;
  $1 = $1 + ($1 << 11 ^ -1) | 0;
  $9 = HEAP32[$0 + 12 >> 2] + -1 & ($1 >>> 16 ^ $1);
  $1 = HEAP32[HEAP32[$0 + 40 >> 2] + ($9 << 2) >> 2];
  label$1 : {
   if (($1 | 0) == -1) {
    break label$1
   }
   $6 = HEAP32[$0 + 16 >> 2];
   while (1) {
    $2 = ($1 << 4) + $6 | 0;
    if (!(($5 | 0) == HEAP32[HEAP32[$2 + 4 >> 2] + 12 >> 2] ? HEAP32[HEAP32[$2 >> 2] + 12 >> 2] == ($4 | 0) : 0)) {
     $1 = HEAP32[HEAP32[$0 + 60 >> 2] + ($1 << 2) >> 2];
     if (($1 | 0) != -1) {
      continue
     }
     break label$1;
    }
    break;
   };
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $2, $3);
   $10 = HEAP32[(($1 << 4) + $6 | 0) + 12 >> 2];
   $4 = HEAP32[$0 + 60 >> 2];
   label$5 : {
    label$6 : {
     $5 = HEAP32[$0 + 40 >> 2] + ($9 << 2) | 0;
     $1 = HEAP32[$5 >> 2];
     $2 = $2 - HEAP32[$0 + 16 >> 2] >> 4;
     if (($1 | 0) == ($2 | 0)) {
      $1 = HEAP32[($2 << 2) + $4 >> 2];
      break label$6;
     }
     while (1) {
      $6 = $1;
      $1 = HEAP32[($1 << 2) + $4 >> 2];
      if (($2 | 0) != ($1 | 0)) {
       continue
      }
      break;
     };
     $1 = HEAP32[($2 << 2) + $4 >> 2];
     if (($6 | 0) == -1) {
      break label$6
     }
     HEAP32[($6 << 2) + $4 >> 2] = $1;
     break label$5;
    }
    HEAP32[$5 >> 2] = $1;
   }
   $4 = HEAP32[$0 + 8 >> 2] + -1 | 0;
   $1 = HEAP32[$0 + 68 >> 2];
   if ($1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $8, $7, $3) | 0
   }
   if (($2 | 0) == ($4 | 0)) {
    HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -1;
    return $10 | 0;
   }
   $6 = HEAP32[$0 + 60 >> 2];
   label$11 : {
    label$12 : {
     $9 = HEAP32[$0 + 16 >> 2];
     $3 = $9 + ($4 << 4) | 0;
     $1 = HEAP32[HEAP32[$3 + 4 >> 2] + 12 >> 2] << 16 | HEAP32[HEAP32[$3 >> 2] + 12 >> 2];
     $1 = $1 + ($1 << 15 ^ -1) | 0;
     $1 = Math_imul($1 >>> 10 ^ $1, 9);
     $1 = $1 >>> 6 ^ $1;
     $1 = $1 + ($1 << 11 ^ -1) | 0;
     $7 = HEAP32[$0 + 12 >> 2] + -1 & ($1 >>> 16 ^ $1);
     $8 = HEAP32[$0 + 40 >> 2] + ($7 << 2) | 0;
     $1 = HEAP32[$8 >> 2];
     if (($1 | 0) == ($4 | 0)) {
      $1 = HEAP32[($4 << 2) + $6 >> 2];
      break label$12;
     }
     while (1) {
      $5 = $1;
      $1 = HEAP32[($1 << 2) + $6 >> 2];
      if (($4 | 0) != ($1 | 0)) {
       continue
      }
      break;
     };
     $1 = HEAP32[($4 << 2) + $6 >> 2];
     if (($5 | 0) == -1) {
      break label$12
     }
     HEAP32[($5 << 2) + $6 >> 2] = $1;
     break label$11;
    }
    HEAP32[$8 >> 2] = $1;
   }
   $5 = HEAP32[$3 + 4 >> 2];
   $1 = ($2 << 4) + $9 | 0;
   HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$1 + 4 >> 2] = $5;
   $3 = $3 + 8 | 0;
   $4 = HEAP32[$3 >> 2];
   $6 = HEAP32[$3 + 4 >> 2];
   $5 = $1 + 8 | 0;
   HEAP32[$5 >> 2] = $4;
   HEAP32[$5 + 4 >> 2] = $6;
   $1 = HEAP32[$0 + 40 >> 2] + ($7 << 2) | 0;
   HEAP32[HEAP32[$0 + 60 >> 2] + ($2 << 2) >> 2] = HEAP32[$1 >> 2];
   HEAP32[$1 >> 2] = $2;
   HEAP32[$0 + 8 >> 2] = HEAP32[$0 + 8 >> 2] + -1;
  }
  return $10 | 0;
 }
 
 function btHashedOverlappingPairCache__processAllOverlappingPairs_28btOverlapCallback__2c_20btDispatcher__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  CProfileSample__CProfileSample_28char_20const__29($3 + 8 | 0, 18668);
  if (HEAP32[$0 + 8 >> 2] >= 1) {
   while (1) {
    $5 = HEAP32[$0 + 16 >> 2] + ($4 << 4) | 0;
    label$3 : {
     if (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $5)) {
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$5 >> 2], HEAP32[$5 + 4 >> 2], $2) | 0;
      HEAP32[694] = HEAP32[694] + -1;
      break label$3;
     }
     $4 = $4 + 1 | 0;
    }
    if (($4 | 0) < HEAP32[$0 + 8 >> 2]) {
     continue
    }
    break;
   }
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $3 + 16 | 0;
 }
 
 function btHashedOverlappingPairCache__sortOverlappingPairs_28btDispatcher__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  HEAP32[$3 + 20 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = 0;
  $4 = HEAP32[$0 + 8 >> 2];
  HEAP8[$3 + 24 | 0] = 1;
  label$1 : {
   if (($4 | 0) < 1) {
    break label$1
   }
   while (1) {
    $7 = HEAP32[$0 + 16 >> 2] + ($11 << 4) | 0;
    label$3 : {
     if (($2 | 0) != ($5 | 0)) {
      break label$3
     }
     $8 = $5 ? $5 << 1 : 1;
     if (($5 | 0) >= ($8 | 0)) {
      $2 = $5;
      break label$3;
     }
     if ($8) {
      $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 4)
     } else {
      $12 = 0
     }
     if (($5 | 0) >= 1) {
      $2 = 12;
      while (1) {
       $4 = $2 + $12 | 0;
       $6 = $2 + HEAP32[$3 + 20 >> 2] | 0;
       HEAP32[$4 + -12 >> 2] = HEAP32[$6 + -12 >> 2];
       $9 = $6 + -8 | 0;
       $13 = HEAP32[$9 >> 2];
       $9 = HEAP32[$9 + 4 >> 2];
       $10 = $4 + -8 | 0;
       HEAP32[$10 >> 2] = $13;
       HEAP32[$10 + 4 >> 2] = $9;
       HEAP32[$4 >> 2] = HEAP32[$6 >> 2];
       $2 = $2 + 16 | 0;
       $5 = $5 + -1 | 0;
       if ($5) {
        continue
       }
       break;
      };
     }
     $2 = HEAP32[$3 + 20 >> 2];
     if ($2) {
      if (HEAPU8[$3 + 24 | 0]) {
       btAlignedFreeInternal_28void__29($2)
      }
      HEAP32[$3 + 20 >> 2] = 0;
     }
     HEAP32[$3 + 20 >> 2] = $12;
     HEAP8[$3 + 24 | 0] = 1;
     HEAP32[$3 + 16 >> 2] = $8;
     $2 = HEAP32[$3 + 12 >> 2];
    }
    $2 = HEAP32[$3 + 20 >> 2] + ($2 << 4) | 0;
    HEAP32[$2 >> 2] = HEAP32[$7 >> 2];
    $10 = HEAP32[$7 + 8 >> 2];
    HEAP32[$2 + 4 >> 2] = HEAP32[$7 + 4 >> 2];
    HEAP32[$2 + 8 >> 2] = $10;
    HEAP32[$2 + 12 >> 2] = HEAP32[$7 + 12 >> 2];
    $6 = HEAP32[$3 + 12 >> 2];
    $2 = $6 + 1 | 0;
    HEAP32[$3 + 12 >> 2] = $2;
    $11 = $11 + 1 | 0;
    if (($11 | 0) < HEAP32[$0 + 8 >> 2]) {
     $5 = HEAP32[$3 + 16 >> 2];
     continue;
    }
    break;
   };
   if (($6 | 0) < 0) {
    break label$1
   }
   $5 = -1;
   $4 = HEAP32[$3 + 20 >> 2];
   while (1) {
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, HEAP32[$4 >> 2], HEAP32[$4 + 4 >> 2], $1) | 0;
    $4 = $4 + 16 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($6 | 0)) {
     continue
    }
    break;
   };
  }
  if (HEAP32[$0 + 52 >> 2] >= 1) {
   $2 = HEAP32[$0 + 60 >> 2];
   $4 = 0;
   while (1) {
    HEAP32[$2 >> 2] = -1;
    $2 = $2 + 4 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) < HEAP32[$0 + 52 >> 2]) {
     continue
    }
    break;
   };
   $2 = HEAP32[$3 + 12 >> 2];
  }
  if (($2 | 0) >= 2) {
   void_20btAlignedObjectArray_btBroadphasePair___quickSortInternal_btBroadphasePairSortPredicate__28btBroadphasePairSortPredicate_20const__2c_20int_2c_20int_29($3 + 8 | 0, $3, 0, $2 + -1 | 0);
   $2 = HEAP32[$3 + 12 >> 2];
  }
  $4 = HEAP32[$3 + 20 >> 2];
  if (($2 | 0) >= 1) {
   $6 = 0;
   $2 = 4;
   while (1) {
    $4 = $2 + $4 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$4 + -4 >> 2], HEAP32[$4 >> 2]) | 0;
    $2 = $2 + 16 | 0;
    $4 = HEAP32[$3 + 20 >> 2];
    $6 = $6 + 1 | 0;
    if (($6 | 0) < HEAP32[$3 + 12 >> 2]) {
     continue
    }
    break;
   };
  }
  if ($4) {
   if (HEAPU8[$3 + 24 | 0]) {
    btAlignedFreeInternal_28void__29($4)
   }
   HEAP32[$3 + 20 >> 2] = 0;
  }
  global$0 = $3 + 32 | 0;
 }
 
 function btHashedOverlappingPairCache__addOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  HEAP32[696] = HEAP32[696] + 1;
  $3 = HEAP32[$0 + 24 >> 2];
  label$1 : {
   label$2 : {
    if ($3) {
     if (FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $1, $2)) {
      break label$2
     }
     break label$1;
    }
    if (!(HEAP32[$2 + 8 >> 2] & HEAP32[$1 + 4 >> 2])) {
     break label$1
    }
    if (!(HEAP32[$1 + 8 >> 2] & HEAP32[$2 + 4 >> 2])) {
     break label$1
    }
   }
   $4 = btHashedOverlappingPairCache__internalAddPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2);
  }
  return $4 | 0;
 }
 
 function btHashedOverlappingPairCache__getOverlappingPairArray_28_29($0) {
  $0 = $0 | 0;
  return $0 + 4 | 0;
 }
 
 function btHashedOverlappingPairCache__getNumOverlappingPairs_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 8 >> 2];
 }
 
 function btHashedOverlappingPairCache__setOverlapFilterCallback_28btOverlapFilterCallback__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 24 >> 2] = $1;
 }
 
 function btHashedOverlappingPairCache__setInternalGhostPairCallback_28btOverlappingPairCallback__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 68 >> 2] = $1;
 }
 
 function btHashedOverlappingPairCache__cleanProxyFromPairs_28btBroadphaseProxy__2c_20btDispatcher__29__CleanPairCallback__processOverlap_28btBroadphasePair__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$0 + 4 >> 2];
  if (!(($2 | 0) != HEAP32[$1 + 4 >> 2] ? ($2 | 0) != HEAP32[$1 >> 2] : 0)) {
   $2 = HEAP32[$0 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 32 >> 2]]($2, $1, HEAP32[$0 + 12 >> 2]);
  }
  return 0;
 }
 
 function btHashedOverlappingPairCache__removeOverlappingPairsContainingProxy_28btBroadphaseProxy__2c_20btDispatcher__29__RemovePairCallback__processOverlap_28btBroadphasePair__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[$0 + 4 >> 2];
  return ($0 | 0) == HEAP32[$1 >> 2] | ($0 | 0) == HEAP32[$1 + 4 >> 2];
 }
 
 function btDbvtBroadphase__btDbvtBroadphase_28btOverlappingPairCache__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = global$0 - 32 | 0;
  global$0 = $4;
  HEAP32[$0 >> 2] = 19124;
  btDbvt__btDbvt_28_29($0 + 4 | 0);
  btDbvt__btDbvt_28_29($0 + 44 | 0);
  HEAP32[$0 + 168 >> 2] = 0;
  HEAP8[$0 + 172 | 0] = 1;
  $3 = $0 + 160 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP8[$0 + 153 | 0] = 256;
  HEAP8[$0 + 154 | 0] = 1;
  HEAP8[$0 + 152 | 0] = 1;
  HEAP32[$0 + 124 >> 2] = 0;
  HEAP32[$0 + 100 >> 2] = 0;
  HEAP32[$0 + 104 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP32[$0 + 116 >> 2] = 10;
  HEAP32[$0 + 120 >> 2] = 1;
  HEAP32[$0 + 108 >> 2] = 1;
  HEAP32[$0 + 112 >> 2] = 0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(72);
  btHashedOverlappingPairCache__btHashedOverlappingPairCache_28_29($1);
  $2 = HEAP32[$0 + 160 >> 2];
  HEAP32[$0 + 148 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = $1;
  HEAP32[$0 + 140 >> 2] = 0;
  HEAP32[$0 + 144 >> 2] = 0;
  $3 = $0 + 84 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  HEAP32[$4 + 20 >> 2] = 0;
  HEAP8[$4 + 24 | 0] = 1;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = 0;
  label$2 : {
   if (($2 | 0) >= 2) {
    $5 = $2 + -1 | 0;
    $2 = 36;
    while (1) {
     $1 = $2 + HEAP32[$0 + 168 >> 2] | 0;
     $7 = $1 + -12 | 0;
     $3 = $1 + -4 | 0;
     $6 = HEAP32[$3 >> 2];
     if ($6) {
      if (HEAPU8[$1 | 0]) {
       btAlignedFreeInternal_28void__29($6)
      }
      HEAP32[$3 >> 2] = 0;
     }
     HEAP32[$3 >> 2] = 0;
     HEAP32[$7 >> 2] = 0;
     HEAP8[$1 | 0] = 1;
     HEAP32[$1 + -8 >> 2] = 0;
     $2 = $2 + 20 | 0;
     $5 = $5 + -1 | 0;
     if ($5) {
      continue
     }
     break;
    };
    break label$2;
   }
   if (($2 | 0) == 1) {
    break label$2
   }
   btAlignedObjectArray_btAlignedObjectArray_btDbvtNode_20const___20___reserve_28int_29($0 + 156 | 0);
   $1 = Math_imul($2, 20);
   $2 = $2 + -1 | 0;
   while (1) {
    btAlignedObjectArray_btDbvtNode_20const____btAlignedObjectArray_28btAlignedObjectArray_btDbvtNode_20const___20const__29($1 + HEAP32[$0 + 168 >> 2] | 0, $4 + 8 | 0);
    $1 = $1 + 20 | 0;
    $3 = $2 + 1 | 0;
    $5 = $3 >>> 0 >= $2 >>> 0;
    $2 = $3;
    if ($5) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 160 >> 2] = 1;
  $1 = HEAP32[$4 + 20 >> 2];
  if ($1) {
   if (HEAPU8[$4 + 24 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$4 + 20 >> 2] = 0;
  }
  global$0 = $4 + 32 | 0;
 }
 
 function btAlignedObjectArray_btAlignedObjectArray_btDbvtNode_20const___20___reserve_28int_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  if (HEAP32[$0 + 8 >> 2] < 1) {
   $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(20);
   $2 = HEAP32[$0 + 4 >> 2];
   label$4 : {
    if (($2 | 0) < 1) {
     break label$4
    }
    while (1) {
     btAlignedObjectArray_btDbvtNode_20const____btAlignedObjectArray_28btAlignedObjectArray_btDbvtNode_20const___20const__29($1 + $5 | 0, $1 + HEAP32[$0 + 12 >> 2] | 0);
     $1 = $1 + 20 | 0;
     $2 = $2 + -1 | 0;
     if ($2) {
      continue
     }
     break;
    };
    $3 = HEAP32[$0 + 4 >> 2];
    if (($3 | 0) < 1) {
     break label$4
    }
    $2 = 8;
    while (1) {
     $1 = $2 + HEAP32[$0 + 12 >> 2] | 0;
     $7 = $1 + -4 | 0;
     $4 = $1 + 4 | 0;
     $6 = HEAP32[$4 >> 2];
     if ($6) {
      if (HEAPU8[$1 + 8 | 0]) {
       btAlignedFreeInternal_28void__29($6)
      }
      HEAP32[$4 >> 2] = 0;
     }
     HEAP32[$7 >> 2] = 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$1 >> 2] = 0;
     HEAP8[$1 + 8 | 0] = 1;
     $2 = $2 + 20 | 0;
     $3 = $3 + -1 | 0;
     if ($3) {
      continue
     }
     break;
    };
   }
   $1 = HEAP32[$0 + 12 >> 2];
   if ($1) {
    if (HEAPU8[$0 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($1)
    }
    HEAP32[$0 + 12 >> 2] = 0;
   }
   HEAP32[$0 + 12 >> 2] = $5;
   HEAP8[$0 + 16 | 0] = 1;
   HEAP32[$0 + 8 >> 2] = 1;
  }
 }
 
 function btAlignedObjectArray_btDbvtNode_20const____btAlignedObjectArray_28btAlignedObjectArray_btDbvtNode_20const___20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 16 | 0] = 1;
  $3 = HEAP32[$1 + 4 >> 2];
  if (($3 | 0) <= 0) {
   HEAP32[$0 + 4 >> 2] = $3;
   return;
  }
  $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($3 << 2);
  $4 = HEAP32[$0 + 4 >> 2];
  if (($4 | 0) >= 1) {
   while (1) {
    HEAP32[$2 + $5 >> 2] = HEAP32[$2 + HEAP32[$0 + 12 >> 2] >> 2];
    $2 = $2 + 4 | 0;
    $4 = $4 + -1 | 0;
    if ($4) {
     continue
    }
    break;
   }
  }
  $2 = HEAP32[$0 + 12 >> 2];
  if ($2) {
   if (HEAPU8[$0 + 16 | 0]) {
    btAlignedFreeInternal_28void__29($2)
   }
   HEAP32[$0 + 12 >> 2] = 0;
  }
  HEAP32[$0 + 12 >> 2] = $5;
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 8 >> 2] = $3;
  $2 = 0;
  $4 = $3;
  while (1) {
   HEAP32[$2 + $5 >> 2] = 0;
   $2 = $2 + 4 | 0;
   $5 = HEAP32[$0 + 12 >> 2];
   $4 = $4 + -1 | 0;
   if ($4) {
    continue
   }
   break;
  };
  HEAP32[$0 + 4 >> 2] = $3;
  if (($3 | 0) >= 1) {
   $2 = 0;
   while (1) {
    HEAP32[$2 + $5 >> 2] = HEAP32[$2 + HEAP32[$1 + 12 >> 2] >> 2];
    $2 = $2 + 4 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
 }
 
 function btDbvtBroadphase___btDbvtBroadphase_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  HEAP32[$0 >> 2] = 19124;
  if (HEAPU8[$0 + 152 | 0]) {
   $1 = HEAP32[$0 + 96 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 96 >> 2]);
  }
  $2 = HEAP32[$0 + 160 >> 2];
  if (($2 | 0) >= 1) {
   $3 = 8;
   while (1) {
    $1 = $3 + HEAP32[$0 + 168 >> 2] | 0;
    $6 = $1 + -4 | 0;
    $4 = $1 + 4 | 0;
    $5 = HEAP32[$4 >> 2];
    if ($5) {
     if (HEAPU8[$1 + 8 | 0]) {
      btAlignedFreeInternal_28void__29($5)
     }
     HEAP32[$4 >> 2] = 0;
    }
    HEAP32[$6 >> 2] = 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$1 >> 2] = 0;
    HEAP8[$1 + 8 | 0] = 1;
    $3 = $3 + 20 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  $1 = HEAP32[$0 + 168 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 172 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 168 >> 2] = 0;
  }
  HEAP32[$0 + 168 >> 2] = 0;
  HEAP32[$0 + 160 >> 2] = 0;
  HEAP32[$0 + 164 >> 2] = 0;
  HEAP8[$0 + 172 | 0] = 1;
  btDbvt___btDbvt_28_29($0 + 44 | 0);
  btDbvt___btDbvt_28_29($0 + 4 | 0);
  return $0 | 0;
 }
 
 function btDbvtBroadphase___btDbvtBroadphase_28_29_1($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(btDbvtBroadphase___btDbvtBroadphase_28_29($0));
 }
 
 function btDbvtBroadphase__createProxy_28btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20void__2c_20int_2c_20int_2c_20btDispatcher__29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0;
  $8 = global$0 - 48 | 0;
  global$0 = $8;
  $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(64);
  HEAP32[$7 + 8 >> 2] = $6;
  HEAP32[$7 + 4 >> 2] = $5;
  HEAP32[$7 >> 2] = $4;
  $3 = $1;
  $4 = HEAP32[$3 >> 2];
  $6 = HEAP32[$3 + 4 >> 2];
  HEAP32[$7 + 16 >> 2] = $4;
  HEAP32[$7 + 20 >> 2] = $6;
  $4 = $3 + 8 | 0;
  $3 = $4;
  $5 = HEAP32[$3 >> 2];
  $9 = HEAP32[$3 + 4 >> 2];
  $6 = $7 + 24 | 0;
  HEAP32[$6 >> 2] = $5;
  HEAP32[$6 + 4 >> 2] = $9;
  $3 = $2;
  $5 = HEAP32[$3 >> 2];
  $6 = HEAP32[$3 + 4 >> 2];
  HEAP32[$7 + 32 >> 2] = $5;
  HEAP32[$7 + 36 >> 2] = $6;
  $5 = $3 + 8 | 0;
  $3 = $5;
  $9 = HEAP32[$3 + 4 >> 2];
  $6 = $7 + 40 | 0;
  HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$6 + 4 >> 2] = $9;
  HEAP32[$7 + 52 >> 2] = 0;
  HEAP32[$7 + 56 >> 2] = 0;
  $3 = $4;
  $4 = HEAP32[$3 >> 2];
  $6 = HEAP32[$3 + 4 >> 2];
  $9 = $8 + 24 | 0;
  HEAP32[$9 >> 2] = $4;
  HEAP32[$9 + 4 >> 2] = $6;
  $3 = $5;
  $4 = HEAP32[$3 >> 2];
  $9 = HEAP32[$3 + 4 >> 2];
  $6 = $8 + 40 | 0;
  HEAP32[$6 >> 2] = $4;
  HEAP32[$6 + 4 >> 2] = $9;
  $3 = $1;
  $4 = HEAP32[$3 >> 2];
  $1 = HEAP32[$3 + 4 >> 2];
  $3 = $2;
  $2 = HEAP32[$3 >> 2];
  $9 = HEAP32[$3 + 4 >> 2];
  HEAP32[$7 + 60 >> 2] = HEAP32[$0 + 104 >> 2];
  HEAP32[$8 + 32 >> 2] = $2;
  HEAP32[$8 + 36 >> 2] = $9;
  $2 = HEAP32[$0 + 148 >> 2] + 1 | 0;
  HEAP32[$7 + 12 >> 2] = $2;
  HEAP32[$0 + 148 >> 2] = $2;
  HEAP32[$8 + 16 >> 2] = $4;
  HEAP32[$8 + 20 >> 2] = $1;
  $4 = $0 + 4 | 0;
  $2 = btDbvt__insert_28btDbvtAabbMm_20const__2c_20void__29($4, $8 + 16 | 0, $7);
  HEAP32[$7 + 52 >> 2] = 0;
  HEAP32[$7 + 48 >> 2] = $2;
  $2 = ((HEAP32[$0 + 104 >> 2] << 2) + $0 | 0) + 84 | 0;
  HEAP32[$7 + 56 >> 2] = HEAP32[$2 >> 2];
  $1 = HEAP32[$2 >> 2];
  if ($1) {
   HEAP32[$1 + 52 >> 2] = $7
  }
  HEAP32[$2 >> 2] = $7;
  if (!HEAPU8[$0 + 153 | 0]) {
   HEAP32[$8 + 8 >> 2] = $7;
   HEAP32[$8 >> 2] = 19252;
   HEAP32[$8 + 4 >> 2] = $0;
   btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($4, HEAP32[$0 + 4 >> 2], $8 + 16 | 0, $8);
   $0 = $0 + 44 | 0;
   btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($0, HEAP32[$0 >> 2], $8 + 16 | 0, $8);
  }
  global$0 = $8 + 48 | 0;
  return $7 | 0;
 }
 
 function btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0;
  $11 = global$0 - 256 | 0;
  global$0 = $11;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $12 = HEAPF32[$2 + 24 >> 2];
   $13 = HEAPF32[$2 + 20 >> 2];
   $14 = HEAPF32[$2 + 16 >> 2];
   $15 = HEAPF32[$2 + 8 >> 2];
   $16 = HEAPF32[$2 + 4 >> 2];
   $17 = HEAPF32[$2 >> 2];
   HEAP32[$11 >> 2] = $1;
   $4 = 64;
   $0 = $11;
   $2 = 1;
   while (1) {
    label$3 : {
     label$4 : {
      label$5 : {
       $5 = $2 + -1 | 0;
       $7 = $5 << 2;
       $1 = HEAP32[$7 + $0 >> 2];
       label$6 : {
        if (!(HEAPF32[$1 >> 2] <= $14)) {
         break label$6
        }
        if (!(HEAPF32[$1 + 16 >> 2] >= $17)) {
         break label$6
        }
        if (!(HEAPF32[$1 + 4 >> 2] <= $13)) {
         break label$6
        }
        if (!(HEAPF32[$1 + 20 >> 2] >= $16)) {
         break label$6
        }
        if (!(HEAPF32[$1 + 8 >> 2] <= $12)) {
         break label$6
        }
        if (!(HEAPF32[$1 + 24 >> 2] >= $15)) {
         break label$6
        }
        if (HEAP32[$1 + 40 >> 2]) {
         $18 = HEAP32[$1 + 36 >> 2];
         if (($4 | 0) != ($5 | 0)) {
          break label$5
         }
         $8 = $4 ? $4 << 1 : 1;
         if (($2 | 0) > ($8 | 0)) {
          break label$5
         }
         if ($8) {
          $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 2)
         } else {
          $6 = 0
         }
         label$10 : {
          label$11 : {
           if (($4 | 0) >= 1) {
            $5 = $6;
            $10 = $0;
            while (1) {
             HEAP32[$5 >> 2] = HEAP32[$10 >> 2];
             $5 = $5 + 4 | 0;
             $10 = $10 + 4 | 0;
             $4 = $4 + -1 | 0;
             if ($4) {
              continue
             }
             break;
            };
            if ($9) {
             break label$11
            }
            break label$10;
           }
           if (!$0) {
            break label$10
           }
           if (!$9) {
            break label$10
           }
          }
          btAlignedFreeInternal_28void__29($0);
         }
         $9 = 1;
         break label$4;
        }
        FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, $1);
       }
       $2 = $5;
       break label$3;
      }
      $8 = $4;
      $6 = $0;
     }
     HEAP32[$6 + $7 >> 2] = $18;
     $10 = HEAP32[$1 + 40 >> 2];
     label$14 : {
      if (($2 | 0) != ($8 | 0)) {
       $4 = $8;
       $0 = $6;
       break label$14;
      }
      $4 = $2 ? $2 << 1 : 1;
      if (($2 | 0) >= ($4 | 0)) {
       $4 = $2;
       $0 = $6;
       break label$14;
      }
      if ($4) {
       $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2)
      } else {
       $0 = 0
      }
      label$19 : {
       label$20 : {
        if (($2 | 0) >= 1) {
         $1 = $0;
         $5 = $6;
         $7 = $2;
         while (1) {
          HEAP32[$1 >> 2] = HEAP32[$5 >> 2];
          $1 = $1 + 4 | 0;
          $5 = $5 + 4 | 0;
          $7 = $7 + -1 | 0;
          if ($7) {
           continue
          }
          break;
         };
         if ($9) {
          break label$20
         }
         break label$19;
        }
        if (!$6) {
         break label$19
        }
        if (!$9) {
         break label$19
        }
       }
       btAlignedFreeInternal_28void__29($6);
      }
      $9 = 1;
     }
     HEAP32[($2 << 2) + $0 >> 2] = $10;
     $2 = $2 + 1 | 0;
    }
    if (($2 | 0) > 0) {
     continue
    }
    break;
   };
   if (!$0) {
    break label$1
   }
   if (!$9) {
    break label$1
   }
   btAlignedFreeInternal_28void__29($0);
  }
  global$0 = $11 + 256 | 0;
 }
 
 function btDbvtBroadphase__destroyProxy_28btBroadphaseProxy__2c_20btDispatcher__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  btDbvt__remove_28btDbvtNode__29(HEAP32[$1 + 60 >> 2] == 2 ? $0 + 44 | 0 : $0 + 4 | 0, HEAP32[$1 + 48 >> 2]);
  $3 = HEAP32[$1 + 56 >> 2];
  $4 = HEAP32[$1 + 52 >> 2];
  label$1 : {
   if ($4) {
    $4 = $4 + 56 | 0;
    break label$1;
   }
   $4 = ((HEAP32[$1 + 60 >> 2] << 2) + $0 | 0) + 84 | 0;
  }
  HEAP32[$4 >> 2] = $3;
  $3 = HEAP32[$1 + 56 >> 2];
  if ($3) {
   HEAP32[$3 + 52 >> 2] = HEAP32[$1 + 52 >> 2]
  }
  $3 = HEAP32[$0 + 96 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $1, $2);
  btAlignedFreeInternal_28void__29($1);
  HEAP8[$0 + 154 | 0] = 1;
 }
 
 function btDbvtBroadphase__getAabb_28btBroadphaseProxy__2c_20btVector3__2c_20btVector3__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = HEAP32[$1 + 20 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  $0 = $1 + 24 | 0;
  $5 = HEAP32[$0 >> 2];
  $4 = $2 + 8 | 0;
  $2 = HEAP32[$0 + 4 >> 2];
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $2;
  $0 = $1 + 40 | 0;
  $5 = HEAP32[$0 >> 2];
  $4 = HEAP32[$0 + 4 >> 2];
  $2 = $3 + 8 | 0;
  HEAP32[$2 >> 2] = $5;
  HEAP32[$2 + 4 >> 2] = $4;
  $2 = HEAP32[$1 + 36 >> 2];
  $4 = $3;
  HEAP32[$4 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$4 + 4 >> 2] = $2;
 }
 
 function btDbvtBroadphase__rayTest_28btVector3_20const__2c_20btVector3_20const__2c_20btBroadphaseRayCallback__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  HEAP32[$2 + 8 >> 2] = 19324;
  HEAP32[$2 + 12 >> 2] = $3;
  $6 = $3 + 4 | 0;
  $7 = $3 + 20 | 0;
  $8 = HEAP32[$0 + 168 >> 2];
  btDbvt__rayTestInternal_28btDbvtNode_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btAlignedObjectArray_btDbvtNode_20const____2c_20btDbvt__ICollide__29_20const($0 + 4 | 0, HEAP32[$0 + 4 >> 2], $1, $6, $7, HEAPF32[$3 + 32 >> 2], $4, $5, $8, $2 + 8 | 0);
  $0 = $0 + 44 | 0;
  btDbvt__rayTestInternal_28btDbvtNode_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btAlignedObjectArray_btDbvtNode_20const____2c_20btDbvt__ICollide__29_20const($0, HEAP32[$0 >> 2], $1, $6, $7, HEAPF32[$3 + 32 >> 2], $4, $5, $8, $2 + 8 | 0);
  global$0 = $2 + 16 | 0;
 }
 
 function btDbvt__rayTestInternal_28btDbvtNode_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btAlignedObjectArray_btDbvtNode_20const____2c_20btDbvt__ICollide__29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0);
  $12 = global$0 - 32 | 0;
  global$0 = $12;
  if ($1) {
   $10 = HEAP32[$8 + 4 >> 2];
   if (($10 | 0) <= 127) {
    if (HEAP32[$8 + 8 >> 2] <= 127) {
     $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(512);
     $0 = HEAP32[$8 + 4 >> 2];
     if (($0 | 0) >= 1) {
      while (1) {
       HEAP32[$11 + $13 >> 2] = HEAP32[$11 + HEAP32[$8 + 12 >> 2] >> 2];
       $11 = $11 + 4 | 0;
       $0 = $0 + -1 | 0;
       if ($0) {
        continue
       }
       break;
      }
     }
     $11 = HEAP32[$8 + 12 >> 2];
     if ($11) {
      if (HEAPU8[$8 + 16 | 0]) {
       btAlignedFreeInternal_28void__29($11)
      }
      HEAP32[$8 + 12 >> 2] = 0;
     }
     HEAP32[$8 + 12 >> 2] = $13;
     HEAP8[$8 + 16 | 0] = 1;
     HEAP32[$8 + 8 >> 2] = 128;
    }
    $11 = $10 << 2;
    $0 = $10 + -128 | 0;
    while (1) {
     HEAP32[$11 + HEAP32[$8 + 12 >> 2] >> 2] = 0;
     $11 = $11 + 4 | 0;
     $13 = $0 + 1 | 0;
     $10 = $13 >>> 0 >= $0 >>> 0;
     $0 = $13;
     if ($10) {
      continue
     }
     break;
    };
   }
   HEAP32[$8 + 4 >> 2] = 128;
   HEAP32[HEAP32[$8 + 12 >> 2] >> 2] = $1;
   $17 = 126;
   $0 = 1;
   while (1) {
    HEAP32[$12 + 12 >> 2] = 0;
    $13 = HEAP32[$8 + 12 >> 2];
    $10 = $0 + -1 | 0;
    $22 = $10 << 2;
    $11 = HEAP32[$13 + $22 >> 2];
    HEAPF32[$12 + 8 >> 2] = HEAPF32[$11 + 8 >> 2] - HEAPF32[$7 + 8 >> 2];
    HEAPF32[$12 + 4 >> 2] = HEAPF32[$11 + 4 >> 2] - HEAPF32[$7 + 4 >> 2];
    HEAPF32[$12 >> 2] = HEAPF32[$11 >> 2] - HEAPF32[$7 >> 2];
    $15 = HEAPF32[$11 + 24 >> 2];
    $14 = HEAPF32[$11 + 16 >> 2];
    $18 = HEAPF32[$6 + 8 >> 2];
    $16 = HEAPF32[$6 >> 2];
    HEAPF32[$12 + 20 >> 2] = HEAPF32[$11 + 20 >> 2] - HEAPF32[$6 + 4 >> 2];
    HEAPF32[$12 + 16 >> 2] = $14 - $16;
    HEAPF32[$12 + 24 >> 2] = $15 - $18;
    HEAP32[$12 + 28 >> 2] = 0;
    $1 = HEAP32[$4 + 4 >> 2];
    $14 = HEAPF32[$2 + 4 >> 2];
    $18 = HEAPF32[$3 + 4 >> 2];
    $16 = Math_fround(Math_fround(HEAPF32[(($1 << 4) + $12 | 0) + 4 >> 2] - $14) * $18);
    $20 = HEAPF32[$3 >> 2];
    $19 = HEAP32[$4 >> 2];
    $21 = HEAPF32[$2 >> 2];
    $15 = Math_fround($20 * Math_fround(HEAPF32[(1 - $19 << 4) + $12 >> 2] - $21));
    label$10 : {
     label$11 : {
      if ($16 > $15) {
       break label$11
      }
      $20 = Math_fround(Math_fround(HEAPF32[($19 << 4) + $12 >> 2] - $21) * $20);
      $14 = Math_fround($18 * Math_fround(HEAPF32[((1 - $1 << 4) + $12 | 0) + 4 >> 2] - $14));
      if ($20 > $14) {
       break label$11
      }
      $1 = HEAP32[$4 + 8 >> 2];
      $21 = HEAPF32[$2 + 8 >> 2];
      $23 = HEAPF32[$3 + 8 >> 2];
      $18 = Math_fround(Math_fround(HEAPF32[(($1 << 4) + $12 | 0) + 8 >> 2] - $21) * $23);
      $14 = $14 < $15 ? $14 : $15;
      if ($18 > $14) {
       break label$11
      }
      $15 = $16 > $20 ? $16 : $20;
      $16 = Math_fround($23 * Math_fround(HEAPF32[((1 - $1 << 4) + $12 | 0) + 8 >> 2] - $21));
      if ($15 > $16) {
       break label$11
      }
      if (!(($18 > $15 ? $18 : $15) < $5)) {
       break label$11
      }
      if (!(($16 < $14 ? $16 : $14) > Math_fround(0.0))) {
       break label$11
      }
      if (HEAP32[$11 + 40 >> 2]) {
       if (($10 | 0) > ($17 | 0)) {
        $1 = HEAP32[$8 + 4 >> 2];
        $17 = $1 << 1;
        if (($1 | 0) < ($17 | 0)) {
         if (HEAP32[$8 + 8 >> 2] < ($17 | 0)) {
          label$16 : {
           if (!$1) {
            $13 = 0;
            break label$16;
           }
           $13 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 3);
           $19 = HEAP32[$8 + 4 >> 2];
           if (($19 | 0) < 1) {
            break label$16
           }
           $10 = 0;
           while (1) {
            HEAP32[$10 + $13 >> 2] = HEAP32[$10 + HEAP32[$8 + 12 >> 2] >> 2];
            $10 = $10 + 4 | 0;
            $19 = $19 + -1 | 0;
            if ($19) {
             continue
            }
            break;
           };
          }
          $10 = HEAP32[$8 + 12 >> 2];
          if ($10) {
           if (HEAPU8[$8 + 16 | 0]) {
            btAlignedFreeInternal_28void__29($10)
           }
           HEAP32[$8 + 12 >> 2] = 0;
          }
          HEAP32[$8 + 12 >> 2] = $13;
          HEAP8[$8 + 16 | 0] = 1;
          HEAP32[$8 + 8 >> 2] = $17;
         }
         $10 = $1 << 2;
         while (1) {
          HEAP32[$10 + $13 >> 2] = 0;
          $10 = $10 + 4 | 0;
          $13 = HEAP32[$8 + 12 >> 2];
          $1 = $1 + -1 | 0;
          if ($1) {
           continue
          }
          break;
         };
        }
        HEAP32[$8 + 4 >> 2] = $17;
        $17 = $17 + -2 | 0;
       }
       HEAP32[$13 + $22 >> 2] = HEAP32[$11 + 36 >> 2];
       HEAP32[HEAP32[$8 + 12 >> 2] + ($0 << 2) >> 2] = HEAP32[$11 + 40 >> 2];
       $0 = $0 + 1 | 0;
       break label$10;
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 12 >> 2]]($9, $11);
     }
     $0 = $10;
    }
    if ($0) {
     continue
    }
    break;
   };
  }
  global$0 = $12 + 32 | 0;
 }
 
 function btDbvtBroadphase__aabbTest_28btVector3_20const__2c_20btVector3_20const__2c_20btBroadphaseAabbCallback__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 - 48 | 0;
  global$0 = $4;
  HEAP32[$4 + 44 >> 2] = $3;
  HEAP32[$4 + 40 >> 2] = 19396;
  $3 = $1 + 8 | 0;
  $6 = HEAP32[$3 >> 2];
  $5 = HEAP32[$3 + 4 >> 2];
  $3 = $4 + 16 | 0;
  HEAP32[$3 >> 2] = $6;
  HEAP32[$3 + 4 >> 2] = $5;
  $3 = $2 + 8 | 0;
  $6 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $5 = $4 + 32 | 0;
  HEAP32[$5 >> 2] = $6;
  HEAP32[$5 + 4 >> 2] = $3;
  $3 = $1;
  $1 = HEAP32[$3 >> 2];
  $5 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 + 8 >> 2] = $1;
  HEAP32[$4 + 12 >> 2] = $5;
  $3 = $2;
  $1 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 + 24 >> 2] = $1;
  HEAP32[$4 + 28 >> 2] = $3;
  btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($0 + 4 | 0, HEAP32[$0 + 4 >> 2], $4 + 8 | 0, $4 + 40 | 0);
  $0 = $0 + 44 | 0;
  btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($0, HEAP32[$0 >> 2], $4 + 8 | 0, $4 + 40 | 0);
  global$0 = $4 + 48 | 0;
 }
 
 function btDbvtBroadphase__setAabb_28btBroadphaseProxy__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btDispatcher__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = global$0 - 48 | 0;
  global$0 = $5;
  $4 = $2 + 8 | 0;
  $7 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $4 = $5 + 24 | 0;
  HEAP32[$4 >> 2] = $7;
  HEAP32[$4 + 4 >> 2] = $6;
  $4 = $3 + 8 | 0;
  $7 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  $6 = $5 + 40 | 0;
  HEAP32[$6 >> 2] = $7;
  HEAP32[$6 + 4 >> 2] = $4;
  $6 = HEAP32[$2 + 4 >> 2];
  HEAP32[$5 + 16 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 20 >> 2] = $6;
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$5 + 32 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5 + 36 >> 2] = $4;
  label$1 : {
   if (HEAP32[$1 + 60 >> 2] == 2) {
    btDbvt__remove_28btDbvtNode__29($0 + 44 | 0, HEAP32[$1 + 48 >> 2]);
    (wasm2js_i32$0 = $1, wasm2js_i32$1 = btDbvt__insert_28btDbvtAabbMm_20const__2c_20void__29($0 + 4 | 0, $5 + 16 | 0, $1)), HEAP32[wasm2js_i32$0 + 48 >> 2] = wasm2js_i32$1;
    $7 = 1;
    break label$1;
   }
   $7 = 1;
   HEAP32[$0 + 128 >> 2] = HEAP32[$0 + 128 >> 2] + 1;
   label$3 : {
    $6 = HEAP32[$1 + 48 >> 2];
    if (!(HEAPF32[$6 >> 2] <= HEAPF32[$5 + 32 >> 2])) {
     break label$3
    }
    if (!(HEAPF32[$6 + 16 >> 2] >= HEAPF32[$5 + 16 >> 2])) {
     break label$3
    }
    if (!(HEAPF32[$6 + 4 >> 2] <= HEAPF32[$5 + 36 >> 2])) {
     break label$3
    }
    if (!(HEAPF32[$6 + 20 >> 2] >= HEAPF32[$5 + 20 >> 2])) {
     break label$3
    }
    if (!(HEAPF32[$6 + 8 >> 2] <= HEAPF32[$5 + 40 >> 2])) {
     break label$3
    }
    if (!(HEAPF32[$6 + 24 >> 2] >= HEAPF32[$5 + 24 >> 2])) {
     break label$3
    }
    $9 = HEAPF32[$1 + 20 >> 2];
    $10 = HEAPF32[$1 + 24 >> 2];
    $14 = HEAPF32[$2 >> 2];
    $15 = HEAPF32[$2 + 4 >> 2];
    $16 = HEAPF32[$2 + 8 >> 2];
    $11 = HEAPF32[$1 + 16 >> 2];
    HEAP32[$5 + 12 >> 2] = 0;
    $8 = HEAPF32[$0 + 100 >> 2];
    $12 = Math_fround($8 * Math_fround(Math_fround(HEAPF32[$1 + 40 >> 2] - $10) * Math_fround(.5)));
    HEAPF32[$5 + 8 >> 2] = $12;
    $13 = Math_fround($8 * Math_fround(Math_fround(HEAPF32[$1 + 36 >> 2] - $9) * Math_fround(.5)));
    HEAPF32[$5 + 4 >> 2] = $13;
    $8 = Math_fround($8 * Math_fround(Math_fround(HEAPF32[$1 + 32 >> 2] - $11) * Math_fround(.5)));
    HEAPF32[$5 >> 2] = $8;
    $9 = Math_fround($15 - $9);
    if (!!(Math_fround($14 - $11) < Math_fround(0.0))) {
     HEAPF32[$5 >> 2] = -$8
    }
    $10 = Math_fround($16 - $10);
    if (!!($9 < Math_fround(0.0))) {
     HEAPF32[$5 + 4 >> 2] = -$13
    }
    if (!!($10 < Math_fround(0.0))) {
     HEAPF32[$5 + 8 >> 2] = -$12
    }
    $7 = 0;
    if (!btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__2c_20btVector3_20const__2c_20float_29($0 + 4 | 0, $6, $5 + 16 | 0, $5)) {
     break label$1
    }
    $7 = 1;
    HEAP32[$0 + 132 >> 2] = HEAP32[$0 + 132 >> 2] + 1;
    break label$1;
   }
   btDbvt__update_28btDbvtNode__2c_20btDbvtAabbMm__29($0 + 4 | 0, $6, $5 + 16 | 0);
   HEAP32[$0 + 132 >> 2] = HEAP32[$0 + 132 >> 2] + 1;
  }
  $6 = HEAP32[$1 + 56 >> 2];
  $4 = HEAP32[$1 + 52 >> 2];
  label$7 : {
   if ($4) {
    $4 = $4 + 56 | 0;
    break label$7;
   }
   $4 = ((HEAP32[$1 + 60 >> 2] << 2) + $0 | 0) + 84 | 0;
  }
  HEAP32[$4 >> 2] = $6;
  $6 = HEAP32[$1 + 56 >> 2];
  if ($6) {
   HEAP32[$6 + 52 >> 2] = HEAP32[$1 + 52 >> 2]
  }
  $6 = HEAP32[$2 + 4 >> 2];
  HEAP32[$1 + 16 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 20 >> 2] = $6;
  $4 = $2 + 8 | 0;
  $2 = HEAP32[$4 >> 2];
  $4 = HEAP32[$4 + 4 >> 2];
  $6 = $1 + 24 | 0;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $4;
  $4 = $3 + 8 | 0;
  $2 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $4 = $1 + 40 | 0;
  HEAP32[$4 >> 2] = $2;
  HEAP32[$4 + 4 >> 2] = $6;
  $4 = HEAP32[$3 + 4 >> 2];
  HEAP32[$1 + 32 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 36 >> 2] = $4;
  HEAP32[$1 + 52 >> 2] = 0;
  $3 = HEAP32[$0 + 104 >> 2];
  $2 = (($3 << 2) + $0 | 0) + 84 | 0;
  HEAP32[$1 + 56 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$1 + 60 >> 2] = $3;
  $3 = HEAP32[$2 >> 2];
  if ($3) {
   HEAP32[$3 + 52 >> 2] = $1
  }
  HEAP32[$2 >> 2] = $1;
  label$11 : {
   if (!$7) {
    break label$11
   }
   HEAP8[$0 + 154 | 0] = 1;
   if (HEAPU8[$0 + 153 | 0]) {
    break label$11
   }
   HEAP32[$5 >> 2] = 19252;
   HEAP32[$5 + 4 >> 2] = $0;
   $2 = $0 + 44 | 0;
   btDbvt__collideTTpersistentStack_28btDbvtNode_20const__2c_20btDbvtNode_20const__2c_20btDbvt__ICollide__29($2, HEAP32[$2 >> 2], HEAP32[$1 + 48 >> 2], $5);
   btDbvt__collideTTpersistentStack_28btDbvtNode_20const__2c_20btDbvtNode_20const__2c_20btDbvt__ICollide__29($0 + 4 | 0, HEAP32[$0 + 4 >> 2], HEAP32[$1 + 48 >> 2], $5);
  }
  global$0 = $5 + 48 | 0;
 }
 
 function btDbvt__collideTTpersistentStack_28btDbvtNode_20const__2c_20btDbvtNode_20const__2c_20btDbvt__ICollide__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   if (!$2) {
    break label$1
   }
   label$2 : {
    if (HEAP32[$0 + 24 >> 2] > 127) {
     break label$2
    }
    if (HEAP32[$0 + 28 >> 2] > 127) {
     break label$2
    }
    $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(1024);
    $5 = HEAP32[$0 + 24 >> 2];
    if (($5 | 0) >= 1) {
     while (1) {
      $11 = $4 + HEAP32[$0 + 32 >> 2] | 0;
      $8 = HEAP32[$11 >> 2];
      $10 = HEAP32[$11 + 4 >> 2];
      $9 = $4 + $6 | 0;
      HEAP32[$9 >> 2] = $8;
      HEAP32[$9 + 4 >> 2] = $10;
      $4 = $4 + 8 | 0;
      $5 = $5 + -1 | 0;
      if ($5) {
       continue
      }
      break;
     }
    }
    $4 = HEAP32[$0 + 32 >> 2];
    if ($4) {
     if (HEAPU8[$0 + 36 | 0]) {
      btAlignedFreeInternal_28void__29($4)
     }
     HEAP32[$0 + 32 >> 2] = 0;
    }
    HEAP32[$0 + 32 >> 2] = $6;
    HEAP32[$0 + 28 >> 2] = 128;
    HEAP8[$0 + 36 | 0] = 1;
   }
   HEAP32[$0 + 24 >> 2] = 128;
   $4 = HEAP32[$0 + 32 >> 2];
   HEAP32[$4 + 4 >> 2] = $2;
   HEAP32[$4 >> 2] = $1;
   $2 = 124;
   $6 = 1;
   while (1) {
    $7 = HEAP32[$0 + 32 >> 2];
    $8 = $6;
    $6 = $6 + -1 | 0;
    $12 = $6 << 3;
    $4 = $7 + $12 | 0;
    $1 = HEAP32[$4 + 4 >> 2];
    $5 = HEAP32[$4 >> 2];
    if (($6 | 0) > ($2 | 0)) {
     $4 = HEAP32[$0 + 24 >> 2];
     $13 = $4 << 1;
     label$9 : {
      if (($4 | 0) >= ($13 | 0)) {
       break label$9
      }
      if (HEAP32[$0 + 28 >> 2] >= ($13 | 0)) {
       break label$9
      }
      label$10 : {
       if (!$4) {
        $7 = 0;
        break label$10;
       }
       $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 4);
       $2 = HEAP32[$0 + 24 >> 2];
       if (($2 | 0) < 1) {
        break label$10
       }
       $4 = 0;
       while (1) {
        $11 = $4 + HEAP32[$0 + 32 >> 2] | 0;
        $9 = HEAP32[$11 + 4 >> 2];
        $10 = $4 + $7 | 0;
        HEAP32[$10 >> 2] = HEAP32[$11 >> 2];
        HEAP32[$10 + 4 >> 2] = $9;
        $4 = $4 + 8 | 0;
        $2 = $2 + -1 | 0;
        if ($2) {
         continue
        }
        break;
       };
      }
      $4 = HEAP32[$0 + 32 >> 2];
      if ($4) {
       if (HEAPU8[$0 + 36 | 0]) {
        btAlignedFreeInternal_28void__29($4)
       }
       HEAP32[$0 + 32 >> 2] = 0;
      }
      HEAP32[$0 + 32 >> 2] = $7;
      HEAP8[$0 + 36 | 0] = 1;
      HEAP32[$0 + 28 >> 2] = $13;
     }
     HEAP32[$0 + 24 >> 2] = $13;
     $2 = $13 + -4 | 0;
    }
    label$15 : {
     if (($1 | 0) == ($5 | 0)) {
      if (!HEAP32[$5 + 40 >> 2]) {
       break label$15
      }
      $4 = $7 + $12 | 0;
      $6 = HEAP32[$5 + 36 >> 2];
      HEAP32[$4 + 4 >> 2] = $6;
      HEAP32[$4 >> 2] = $6;
      $4 = $8 << 3;
      $6 = $4 + HEAP32[$0 + 32 >> 2] | 0;
      $1 = HEAP32[$5 + 40 >> 2];
      HEAP32[$6 + 4 >> 2] = $1;
      HEAP32[$6 >> 2] = $1;
      $10 = HEAP32[$5 + 40 >> 2];
      $9 = (HEAP32[$0 + 32 >> 2] + $4 | 0) + 8 | 0;
      HEAP32[$9 >> 2] = HEAP32[$5 + 36 >> 2];
      HEAP32[$9 + 4 >> 2] = $10;
      $6 = $8 + 2 | 0;
      break label$15;
     }
     if (!(HEAPF32[$5 >> 2] <= HEAPF32[$1 + 16 >> 2])) {
      break label$15
     }
     if (!(HEAPF32[$5 + 16 >> 2] >= HEAPF32[$1 >> 2])) {
      break label$15
     }
     if (!(HEAPF32[$5 + 4 >> 2] <= HEAPF32[$1 + 20 >> 2])) {
      break label$15
     }
     if (!(HEAPF32[$5 + 20 >> 2] >= HEAPF32[$1 + 4 >> 2])) {
      break label$15
     }
     if (!(HEAPF32[$5 + 8 >> 2] <= HEAPF32[$1 + 24 >> 2])) {
      break label$15
     }
     if (!(HEAPF32[$5 + 24 >> 2] >= HEAPF32[$1 + 8 >> 2])) {
      break label$15
     }
     $4 = HEAP32[$1 + 40 >> 2];
     if (HEAP32[$5 + 40 >> 2]) {
      $6 = HEAP32[$5 + 36 >> 2];
      if ($4) {
       $4 = $7 + $12 | 0;
       HEAP32[$4 + 4 >> 2] = HEAP32[$1 + 36 >> 2];
       HEAP32[$4 >> 2] = $6;
       $6 = HEAP32[$5 + 40 >> 2];
       $4 = $8 << 3;
       $7 = $4 + HEAP32[$0 + 32 >> 2] | 0;
       HEAP32[$7 + 4 >> 2] = HEAP32[$1 + 36 >> 2];
       HEAP32[$7 >> 2] = $6;
       $6 = HEAP32[$5 + 36 >> 2];
       $7 = HEAP32[$0 + 32 >> 2] + $4 | 0;
       HEAP32[$7 + 12 >> 2] = HEAP32[$1 + 40 >> 2];
       HEAP32[$7 + 8 >> 2] = $6;
       $5 = HEAP32[$5 + 40 >> 2];
       $4 = HEAP32[$0 + 32 >> 2] + $4 | 0;
       HEAP32[$4 + 20 >> 2] = HEAP32[$1 + 40 >> 2];
       HEAP32[$4 + 16 >> 2] = $5;
       $6 = $8 + 3 | 0;
       break label$15;
      }
      $4 = $7 + $12 | 0;
      HEAP32[$4 + 4 >> 2] = $1;
      HEAP32[$4 >> 2] = $6;
      $4 = HEAP32[$5 + 40 >> 2];
      $5 = HEAP32[$0 + 32 >> 2] + ($8 << 3) | 0;
      HEAP32[$5 + 4 >> 2] = $1;
      HEAP32[$5 >> 2] = $4;
      $6 = $8 + 1 | 0;
      break label$15;
     }
     if ($4) {
      $4 = $7 + $12 | 0;
      HEAP32[$4 + 4 >> 2] = HEAP32[$1 + 36 >> 2];
      HEAP32[$4 >> 2] = $5;
      $4 = HEAP32[$0 + 32 >> 2] + ($8 << 3) | 0;
      HEAP32[$4 + 4 >> 2] = HEAP32[$1 + 40 >> 2];
      HEAP32[$4 >> 2] = $5;
      $6 = $8 + 1 | 0;
      break label$15;
     }
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $5, $1);
    }
    if ($6) {
     continue
    }
    break;
   };
  }
 }
 
 function btDbvtBroadphase__calculateOverlappingPairs_28btDispatcher__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  btDbvtBroadphase__collide_28btDispatcher__29($0, $1);
  btDbvtBroadphase__performDeferredRemoval_28btDispatcher__29($0, $1);
 }
 
 function btDbvtBroadphase__collide_28btDispatcher__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0;
  $7 = global$0 - 32 | 0;
  global$0 = $7;
  $10 = $0 + 4 | 0;
  btDbvt__optimizeIncremental_28int_29($10, ((Math_imul(HEAP32[$0 + 112 >> 2], HEAP32[$0 + 16 >> 2]) | 0) / 100 | 0) + 1 | 0);
  if (HEAP32[$0 + 124 >> 2]) {
   $2 = ((Math_imul(HEAP32[$0 + 108 >> 2], HEAP32[$0 + 56 >> 2]) | 0) / 100 | 0) + 1 | 0;
   btDbvt__optimizeIncremental_28int_29($0 + 44 | 0, $2);
   $2 = HEAP32[$0 + 124 >> 2] - $2 | 0;
   HEAP32[$0 + 124 >> 2] = ($2 | 0) > 0 ? $2 : 0;
  }
  $2 = (HEAP32[$0 + 104 >> 2] + 1 | 0) % 2 | 0;
  HEAP32[$0 + 104 >> 2] = $2;
  $2 = HEAP32[(($2 << 2) + $0 | 0) + 84 >> 2];
  if ($2) {
   $8 = $0 + 44 | 0;
   $4 = $7 + 16 | 0;
   while (1) {
    $5 = HEAP32[$2 + 56 >> 2];
    $3 = HEAP32[$2 + 52 >> 2];
    label$4 : {
     if ($3) {
      $3 = $3 + 56 | 0;
      break label$4;
     }
     $3 = ((HEAP32[$2 + 60 >> 2] << 2) + $0 | 0) + 84 | 0;
    }
    HEAP32[$3 >> 2] = $5;
    $3 = HEAP32[$2 + 56 >> 2];
    if ($3) {
     HEAP32[$3 + 52 >> 2] = HEAP32[$2 + 52 >> 2]
    }
    HEAP32[$2 + 52 >> 2] = 0;
    HEAP32[$2 + 56 >> 2] = HEAP32[$0 + 92 >> 2];
    $3 = HEAP32[$0 + 92 >> 2];
    if ($3) {
     HEAP32[$3 + 52 >> 2] = $2
    }
    HEAP32[$0 + 92 >> 2] = $2;
    btDbvt__remove_28btDbvtNode__29($10, HEAP32[$2 + 48 >> 2]);
    $6 = $2 + 24 | 0;
    $11 = HEAP32[$6 >> 2];
    $9 = HEAP32[$6 + 4 >> 2];
    $3 = $7 + 8 | 0;
    HEAP32[$3 >> 2] = $11;
    HEAP32[$3 + 4 >> 2] = $9;
    $13 = HEAP32[$2 + 16 >> 2];
    $11 = HEAP32[$2 + 20 >> 2];
    $9 = HEAP32[$2 + 36 >> 2];
    HEAP32[$4 >> 2] = HEAP32[$2 + 32 >> 2];
    HEAP32[$4 + 4 >> 2] = $9;
    $6 = $2 + 40 | 0;
    $3 = HEAP32[$6 + 4 >> 2];
    $9 = $4 + 8 | 0;
    HEAP32[$9 >> 2] = HEAP32[$6 >> 2];
    HEAP32[$9 + 4 >> 2] = $3;
    HEAP32[$7 >> 2] = $13;
    HEAP32[$7 + 4 >> 2] = $11;
    $3 = btDbvt__insert_28btDbvtAabbMm_20const__2c_20void__29($8, $7, $2);
    HEAP32[$2 + 60 >> 2] = 2;
    HEAP32[$2 + 48 >> 2] = $3;
    $2 = $5;
    if ($2) {
     continue
    }
    break;
   };
   HEAP8[$0 + 154 | 0] = 1;
   HEAP32[$0 + 124 >> 2] = HEAP32[$0 + 56 >> 2];
  }
  HEAP32[$7 >> 2] = 19252;
  HEAP32[$7 + 4 >> 2] = $0;
  label$8 : {
   if (!HEAPU8[$0 + 153 | 0]) {
    break label$8
   }
   btDbvt__collideTTpersistentStack_28btDbvtNode_20const__2c_20btDbvtNode_20const__2c_20btDbvt__ICollide__29($10, HEAP32[$0 + 4 >> 2], HEAP32[$0 + 44 >> 2], $7);
   if (!HEAPU8[$0 + 153 | 0]) {
    break label$8
   }
   $2 = HEAP32[$10 >> 2];
   btDbvt__collideTTpersistentStack_28btDbvtNode_20const__2c_20btDbvtNode_20const__2c_20btDbvt__ICollide__29($10, $2, $2, $7);
  }
  label$9 : {
   if (!HEAPU8[$0 + 154 | 0]) {
    break label$9
   }
   $2 = HEAP32[$0 + 96 >> 2];
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2) | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   if (($4 | 0) < 1) {
    break label$9
   }
   $9 = $0 + 144 | 0;
   $2 = HEAP32[$0 + 120 >> 2];
   $5 = (Math_imul($4, HEAP32[$0 + 116 >> 2]) | 0) / 100 | 0;
   $2 = ($2 | 0) > ($5 | 0) ? $2 : $5;
   $5 = ($4 | 0) < ($2 | 0) ? $4 : $2;
   label$10 : {
    if (($5 | 0) >= 1) {
     $2 = 0;
     while (1) {
      $4 = HEAP32[$3 + 12 >> 2] + (($2 + HEAP32[$9 >> 2] | 0) % ($4 | 0) << 4) | 0;
      $10 = HEAP32[$4 >> 2];
      $8 = HEAP32[$10 + 48 >> 2];
      $4 = HEAP32[$4 + 4 >> 2];
      $6 = HEAP32[$4 + 48 >> 2];
      label$13 : {
       label$14 : {
        if (!(HEAPF32[$8 >> 2] <= HEAPF32[$6 + 16 >> 2])) {
         break label$14
        }
        if (!(HEAPF32[$8 + 16 >> 2] >= HEAPF32[$6 >> 2])) {
         break label$14
        }
        if (!(HEAPF32[$8 + 4 >> 2] <= HEAPF32[$6 + 20 >> 2])) {
         break label$14
        }
        if (!(HEAPF32[$8 + 20 >> 2] >= HEAPF32[$6 + 4 >> 2])) {
         break label$14
        }
        if (!(HEAPF32[$8 + 8 >> 2] <= HEAPF32[$6 + 24 >> 2])) {
         break label$14
        }
        if (HEAPF32[$8 + 24 >> 2] >= HEAPF32[$6 + 8 >> 2]) {
         break label$13
        }
       }
       $8 = HEAP32[$0 + 96 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 12 >> 2]]($8, $10, $4, $1) | 0;
       $2 = $2 + -1 | 0;
       $5 = $5 + -1 | 0;
      }
      $4 = HEAP32[$3 + 4 >> 2];
      $2 = $2 + 1 | 0;
      if (($2 | 0) < ($5 | 0)) {
       continue
      }
      break;
     };
     $9 = $0 + 144 | 0;
     $2 = 0;
     if (($4 | 0) <= 0) {
      break label$10
     }
    }
    $2 = ($5 + HEAP32[$9 >> 2] | 0) % ($4 | 0) | 0;
   }
   HEAP32[$9 >> 2] = $2;
  }
  HEAP8[$0 + 154 | 0] = 0;
  HEAP32[$0 + 120 >> 2] = 1;
  HEAP32[$0 + 140 >> 2] = HEAP32[$0 + 140 >> 2] + 1;
  $2 = HEAP32[$0 + 132 >> 2];
  $1 = $0;
  $5 = HEAP32[$0 + 128 >> 2];
  $12 = Math_fround(0.0);
  label$15 : {
   if (!$5) {
    break label$15
   }
   $12 = Math_fround(Math_fround($2 >>> 0) / Math_fround($5 >>> 0));
  }
  HEAPF32[$1 + 136 >> 2] = $12;
  HEAP32[$0 + 132 >> 2] = $2 >>> 1;
  HEAP32[$0 + 128 >> 2] = $5 >>> 1;
  global$0 = $7 + 32 | 0;
 }
 
 function btDbvtBroadphase__performDeferredRemoval_28btDispatcher__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $13 = global$0 - 16 | 0;
  global$0 = $13;
  $2 = HEAP32[$0 + 96 >> 2];
  if (FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 56 >> 2]]($2)) {
   $2 = HEAP32[$0 + 96 >> 2];
   $3 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2) | 0;
   $4 = HEAP32[$3 + 4 >> 2];
   if (($4 | 0) >= 2) {
    void_20btAlignedObjectArray_btBroadphasePair___quickSortInternal_btBroadphasePairSortPredicate__28btBroadphasePairSortPredicate_20const__2c_20int_2c_20int_29($3, $13 + 8 | 0, 0, $4 + -1 | 0);
    $4 = HEAP32[$3 + 4 >> 2];
   }
   if (($4 | 0) >= 1) {
    while (1) {
     $2 = $5 + HEAP32[$3 + 12 >> 2] | 0;
     $7 = HEAP32[$2 + 4 >> 2];
     $8 = HEAP32[$2 >> 2];
     label$5 : {
      label$6 : {
       if (($7 | 0) == ($9 | 0) ? ($8 | 0) == ($6 | 0) : 0) {
        break label$6
       }
       label$8 : {
        $6 = HEAP32[$8 + 48 >> 2];
        $10 = HEAP32[$7 + 48 >> 2];
        if (!(HEAPF32[$6 >> 2] <= HEAPF32[$10 + 16 >> 2])) {
         break label$8
        }
        if (!(HEAPF32[$6 + 16 >> 2] >= HEAPF32[$10 >> 2])) {
         break label$8
        }
        if (!(HEAPF32[$6 + 4 >> 2] <= HEAPF32[$10 + 20 >> 2])) {
         break label$8
        }
        if (!(HEAPF32[$6 + 20 >> 2] >= HEAPF32[$10 + 4 >> 2])) {
         break label$8
        }
        if (!(HEAPF32[$6 + 8 >> 2] <= HEAPF32[$10 + 24 >> 2])) {
         break label$8
        }
        $9 = $7;
        if (!(HEAPF32[$6 + 24 >> 2] >= HEAPF32[$10 + 8 >> 2])) {
         break label$6
        }
        break label$5;
       }
       $9 = $7;
      }
      $7 = HEAP32[$0 + 96 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 32 >> 2]]($7, $2, $1);
      HEAP32[$2 >> 2] = 0;
      HEAP32[$2 + 4 >> 2] = 0;
      $11 = $11 + 1 | 0;
      $4 = HEAP32[$3 + 4 >> 2];
     }
     $5 = $5 + 16 | 0;
     $6 = $8;
     $12 = $12 + 1 | 0;
     if (($12 | 0) < ($4 | 0)) {
      continue
     }
     break;
    };
    if (($4 | 0) >= 2) {
     void_20btAlignedObjectArray_btBroadphasePair___quickSortInternal_btBroadphasePairSortPredicate__28btBroadphasePairSortPredicate_20const__2c_20int_2c_20int_29($3, $13, 0, $4 + -1 | 0);
     $4 = HEAP32[$3 + 4 >> 2];
    }
    $6 = $4 - $11 | 0;
    if (($11 | 0) <= -1) {
     if (HEAP32[$3 + 8 >> 2] < ($6 | 0)) {
      label$12 : {
       if (!$6) {
        $12 = 0;
        $8 = $4;
        break label$12;
       }
       $12 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 4);
       $8 = HEAP32[$3 + 4 >> 2];
      }
      if (($8 | 0) >= 1) {
       $2 = 12;
       while (1) {
        $5 = $2 + $12 | 0;
        $7 = $2 + HEAP32[$3 + 12 >> 2] | 0;
        HEAP32[$5 + -12 >> 2] = HEAP32[$7 + -12 >> 2];
        $0 = $7 + -8 | 0;
        $1 = HEAP32[$0 >> 2];
        $0 = HEAP32[$0 + 4 >> 2];
        $9 = $5 + -8 | 0;
        HEAP32[$9 >> 2] = $1;
        HEAP32[$9 + 4 >> 2] = $0;
        HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
        $2 = $2 + 16 | 0;
        $8 = $8 + -1 | 0;
        if ($8) {
         continue
        }
        break;
       };
      }
      $2 = HEAP32[$3 + 12 >> 2];
      if ($2) {
       if (HEAPU8[$3 + 16 | 0]) {
        btAlignedFreeInternal_28void__29($2)
       }
       HEAP32[$3 + 12 >> 2] = 0;
      }
      HEAP32[$3 + 12 >> 2] = $12;
      HEAP8[$3 + 16 | 0] = 1;
      HEAP32[$3 + 8 >> 2] = $6;
     }
     $2 = $4 << 4;
     while (1) {
      $5 = $2 + HEAP32[$3 + 12 >> 2] | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      $9 = $5 + 8 | 0;
      HEAP32[$9 >> 2] = 0;
      HEAP32[$9 + 4 >> 2] = 0;
      $2 = $2 + 16 | 0;
      $5 = $11 + 1 | 0;
      $7 = $5 >>> 0 >= $11 >>> 0;
      $11 = $5;
      if ($7) {
       continue
      }
      break;
     };
    }
    $4 = $6;
   }
   HEAP32[$3 + 4 >> 2] = $4;
  }
  global$0 = $13 + 16 | 0;
 }
 
 function void_20btAlignedObjectArray_btBroadphasePair___quickSortInternal_btBroadphasePairSortPredicate__28btBroadphasePairSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  while (1) {
   $11 = HEAP32[$0 + 12 >> 2];
   $17 = $2;
   $4 = $11 + (($3 + $2 | 0) / 2 << 4) | 0;
   $15 = HEAP32[$4 + 8 >> 2];
   $13 = HEAP32[$4 + 4 >> 2];
   $14 = HEAP32[$4 >> 2];
   $12 = $3;
   while (1) {
    label$3 : {
     if (!$14) {
      $4 = ($2 << 4) + $11 | 0;
      while (1) {
       $7 = -1;
       $5 = -1;
       $6 = HEAP32[$4 >> 2];
       if ($6) {
        $5 = HEAP32[$6 + 12 >> 2]
       }
       $8 = HEAP32[$4 + 4 >> 2];
       if ($8) {
        $7 = HEAP32[$8 + 12 >> 2]
       }
       if ($13) {
        $9 = HEAP32[$13 + 12 >> 2]
       } else {
        $9 = -1
       }
       label$10 : {
        if (($5 | 0) > -1) {
         break label$10
        }
        label$11 : {
         if (($7 | 0) > ($9 | 0)) {
          break label$11
         }
         if ($6) {
          break label$11
         }
         if (($8 | 0) != ($13 | 0)) {
          break label$3
         }
         if (HEAPU32[$4 + 8 >> 2] > $15 >>> 0) {
          break label$10
         }
         break label$3;
        }
        if ($6) {
         break label$3
        }
        if (($7 | 0) <= ($9 | 0)) {
         break label$3
        }
       }
       $4 = $4 + 16 | 0;
       $2 = $2 + 1 | 0;
       continue;
      };
     }
     $4 = ($2 << 4) + $11 | 0;
     $10 = HEAP32[$14 + 12 >> 2];
     while (1) {
      $7 = -1;
      $5 = -1;
      $6 = HEAP32[$4 >> 2];
      if ($6) {
       $5 = HEAP32[$6 + 12 >> 2]
      }
      $8 = HEAP32[$4 + 4 >> 2];
      if ($8) {
       $7 = HEAP32[$8 + 12 >> 2]
      }
      if ($13) {
       $9 = HEAP32[$13 + 12 >> 2]
      } else {
       $9 = -1
      }
      label$17 : {
       if (($5 | 0) > ($10 | 0)) {
        break label$17
       }
       label$18 : {
        if (($7 | 0) > ($9 | 0)) {
         break label$18
        }
        if (($6 | 0) != ($14 | 0)) {
         break label$18
        }
        if (($8 | 0) != ($13 | 0)) {
         break label$3
        }
        if (HEAPU32[$4 + 8 >> 2] <= $15 >>> 0) {
         break label$3
        }
        break label$17;
       }
       if (($6 | 0) != ($14 | 0)) {
        break label$3
       }
       if (($7 | 0) <= ($9 | 0)) {
        break label$3
       }
      }
      $4 = $4 + 16 | 0;
      $2 = $2 + 1 | 0;
      continue;
     };
    }
    label$19 : {
     if (!$14) {
      $5 = ($12 << 4) + $11 | 0;
      while (1) {
       $6 = -1;
       $7 = -1;
       $8 = HEAP32[$5 >> 2];
       if ($8) {
        $7 = HEAP32[$8 + 12 >> 2]
       }
       $6 = $13 ? HEAP32[$13 + 12 >> 2] : $6;
       $9 = HEAP32[$5 + 4 >> 2];
       $10 = -1;
       label$24 : {
        if (!$9) {
         break label$24
        }
        $10 = HEAP32[$9 + 12 >> 2];
       }
       label$26 : {
        if (($7 | 0) < -1) {
         break label$26
        }
        label$27 : {
         if (($6 | 0) > ($10 | 0)) {
          break label$27
         }
         if ($8) {
          break label$27
         }
         if (($9 | 0) != ($13 | 0)) {
          break label$19
         }
         if (HEAPU32[$5 + 8 >> 2] < $15 >>> 0) {
          break label$26
         }
         break label$19;
        }
        if ($8) {
         break label$19
        }
        if (($6 | 0) <= ($10 | 0)) {
         break label$19
        }
       }
       $5 = $5 + -16 | 0;
       $12 = $12 + -1 | 0;
       continue;
      };
     }
     $5 = ($12 << 4) + $11 | 0;
     $16 = HEAP32[$14 + 12 >> 2];
     while (1) {
      $6 = -1;
      $7 = -1;
      $8 = HEAP32[$5 >> 2];
      if ($8) {
       $7 = HEAP32[$8 + 12 >> 2]
      }
      $6 = $13 ? HEAP32[$13 + 12 >> 2] : $6;
      $9 = HEAP32[$5 + 4 >> 2];
      $10 = -1;
      label$31 : {
       if (!$9) {
        break label$31
       }
       $10 = HEAP32[$9 + 12 >> 2];
      }
      label$33 : {
       if (($16 | 0) > ($7 | 0)) {
        break label$33
       }
       label$34 : {
        if (($6 | 0) > ($10 | 0)) {
         break label$34
        }
        if (($8 | 0) != ($14 | 0)) {
         break label$34
        }
        if (($9 | 0) != ($13 | 0)) {
         break label$19
        }
        if (HEAPU32[$5 + 8 >> 2] >= $15 >>> 0) {
         break label$19
        }
        break label$33;
       }
       if (($8 | 0) != ($14 | 0)) {
        break label$19
       }
       if (($6 | 0) <= ($10 | 0)) {
        break label$19
       }
      }
      $5 = $5 + -16 | 0;
      $12 = $12 + -1 | 0;
      continue;
     };
    }
    if (($2 | 0) <= ($12 | 0)) {
     $7 = ($2 << 4) + $11 | 0;
     $11 = $7;
     $9 = HEAP32[$11 + 4 >> 2];
     $16 = HEAP32[$11 + 8 >> 2];
     $7 = HEAP32[$11 + 12 >> 2];
     $6 = HEAP32[$4 >> 2];
     $10 = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$4 + 4 >> 2] = $10;
     $11 = $5 + 8 | 0;
     $5 = HEAP32[$11 >> 2];
     $10 = $4 + 8 | 0;
     $4 = HEAP32[$11 + 4 >> 2];
     HEAP32[$10 >> 2] = $5;
     HEAP32[$10 + 4 >> 2] = $4;
     $4 = HEAP32[$0 + 12 >> 2] + ($12 << 4) | 0;
     HEAP32[$4 + 12 >> 2] = $7;
     HEAP32[$4 + 4 >> 2] = $9;
     HEAP32[$4 + 8 >> 2] = $16;
     HEAP32[$4 >> 2] = $6;
     $12 = $12 + -1 | 0;
     $2 = $2 + 1 | 0;
    }
    if (($2 | 0) <= ($12 | 0)) {
     $11 = HEAP32[$0 + 12 >> 2];
     continue;
    }
    break;
   };
   if (($12 | 0) > ($17 | 0)) {
    void_20btAlignedObjectArray_btBroadphasePair___quickSortInternal_btBroadphasePairSortPredicate__28btBroadphasePairSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $17, $12)
   }
   if (($2 | 0) < ($3 | 0)) {
    continue
   }
   break;
  };
 }
 
 function btDbvtBroadphase__getBroadphaseAabb_28btVector3__2c_20btVector3__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  $4 = HEAP32[$0 + 44 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   if ($0) {
    $9 = HEAPF32[$0 >> 2];
    if ($4) {
     $3 = HEAPF32[$0 + 20 >> 2];
     $5 = HEAPF32[$4 + 20 >> 2];
     $5 = $3 > $5 ? $3 : $5;
     $3 = HEAPF32[$0 + 8 >> 2];
     $6 = HEAPF32[$4 + 8 >> 2];
     $6 = $3 < $6 ? $3 : $6;
     $3 = HEAPF32[$0 + 4 >> 2];
     $7 = HEAPF32[$4 + 4 >> 2];
     $7 = $3 < $7 ? $3 : $7;
     $3 = HEAPF32[$0 + 16 >> 2];
     $8 = HEAPF32[$4 + 16 >> 2];
     $8 = $3 > $8 ? $3 : $8;
     $3 = HEAPF32[$4 >> 2];
     $9 = $9 < $3 ? $9 : $3;
     $3 = HEAPF32[$0 + 24 >> 2];
     $10 = HEAPF32[$4 + 24 >> 2];
     if (!($3 > $10)) {
      $3 = $10;
      break label$1;
     }
     break label$1;
    }
    $10 = HEAPF32[$0 + 28 >> 2];
    $3 = HEAPF32[$0 + 24 >> 2];
    $5 = HEAPF32[$0 + 20 >> 2];
    $8 = HEAPF32[$0 + 16 >> 2];
    $11 = HEAPF32[$0 + 12 >> 2];
    $6 = HEAPF32[$0 + 8 >> 2];
    $7 = HEAPF32[$0 + 4 >> 2];
    break label$1;
   }
   if (!$4) {
    break label$1
   }
   $10 = HEAPF32[$4 + 28 >> 2];
   $3 = HEAPF32[$4 + 24 >> 2];
   $5 = HEAPF32[$4 + 20 >> 2];
   $8 = HEAPF32[$4 + 16 >> 2];
   $11 = HEAPF32[$4 + 12 >> 2];
   $6 = HEAPF32[$4 + 8 >> 2];
   $7 = HEAPF32[$4 + 4 >> 2];
   $9 = HEAPF32[$4 >> 2];
  }
  HEAPF32[$1 + 12 >> 2] = $11;
  HEAPF32[$1 + 8 >> 2] = $6;
  HEAPF32[$1 + 4 >> 2] = $7;
  HEAPF32[$1 >> 2] = $9;
  HEAPF32[$2 + 12 >> 2] = $10;
  HEAPF32[$2 + 8 >> 2] = $3;
  HEAPF32[$2 + 4 >> 2] = $5;
  HEAPF32[$2 >> 2] = $8;
 }
 
 function btDbvtBroadphase__resetPool_28btDispatcher__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (HEAP32[$0 + 16 >> 2] == (0 - HEAP32[$0 + 56 >> 2] | 0)) {
   btDbvt__clear_28_29($0 + 4 | 0);
   btDbvt__clear_28_29($0 + 44 | 0);
   $1 = 256;
   HEAP8[$0 + 153 | 0] = $1;
   HEAP8[$0 + 154 | 0] = $1 >>> 8;
   HEAP32[$0 + 124 >> 2] = 0;
   HEAP32[$0 + 104 >> 2] = 0;
   HEAP32[$0 + 116 >> 2] = 10;
   HEAP32[$0 + 120 >> 2] = 1;
   HEAP32[$0 + 108 >> 2] = 1;
   HEAP32[$0 + 112 >> 2] = 0;
   $1 = $0 + 84 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$0 + 92 >> 2] = 0;
   HEAP32[$0 + 128 >> 2] = 0;
   HEAP32[$0 + 132 >> 2] = 0;
   $1 = $0 + 136 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   $1 = $0 + 144 | 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
  }
 }
 
 function btDbvtTreeCollider__Process_28btDbvtNode_20const__2c_20btDbvtNode_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  if (($1 | 0) != ($2 | 0)) {
   $3 = HEAP32[HEAP32[$0 + 4 >> 2] + 96 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, HEAP32[$1 + 36 >> 2], HEAP32[$2 + 36 >> 2]) | 0;
   $1 = HEAP32[$0 + 4 >> 2];
   HEAP32[$1 + 120 >> 2] = HEAP32[$1 + 120 >> 2] + 1;
  }
 }
 
 function btDbvtTreeCollider__Process_28btDbvtNode_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, HEAP32[HEAP32[$0 + 8 >> 2] + 48 >> 2]);
 }
 
 function BroadphaseRayTester__Process_28btDbvtNode_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[$0 + 4 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$1 + 36 >> 2]) | 0;
 }
 
 function __math_xflowf($0, $1) {
  return Math_fround(($0 ? Math_fround(-$1) : $1) * $1);
 }
 
 function powf($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0.0, $10 = 0.0;
  $5 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(0));
  $6 = $5 << 1;
  $3 = $6 + -1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $2 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
      label$5 : {
       if ($2 + -8388608 >>> 0 <= 2130706431) {
        if ($3 >>> 0 > 4278190078) {
         break label$5
        }
        break label$3;
       }
       if ($3 >>> 0 < 4278190079) {
        break label$4
       }
      }
      $7 = Math_fround(1.0);
      if (($2 | 0) == 1065353216) {
       break label$2
      }
      if (!$6) {
       break label$2
      }
      $2 = $2 << 1;
      if (!($6 >>> 0 < 4278190081 ? $2 >>> 0 <= 4278190080 : 0)) {
       return Math_fround($0 + $1)
      }
      if (($2 | 0) == 2130706432) {
       break label$2
      }
      return ($5 ^ -1) >>> 31 == ($2 >>> 0 < 2130706432 | 0) ? Math_fround(0.0) : Math_fround($1 * $1);
     }
     if (($2 << 1) + -1 >>> 0 >= 4278190079) {
      $7 = Math_fround($0 * $0);
      label$10 : {
       if (($2 | 0) > -1) {
        break label$10
       }
       $2 = $5 >>> 23 & 255;
       if ($2 + -127 >>> 0 > 23) {
        break label$10
       }
       $2 = 1 << 150 - $2;
       $7 = $2 & $5 ? ($5 & $2 + -1 ? $7 : Math_fround(-$7)) : $7;
      }
      if (($5 | 0) > -1) {
       break label$2
      }
      return Math_fround(Math_fround(1.0) / $7);
     }
     if (($2 | 0) <= -1) {
      $3 = $5 >>> 23 & 255;
      if ($3 >>> 0 < 127) {
       break label$1
      }
      label$12 : {
       if ($3 >>> 0 <= 150) {
        $3 = 1 << 150 - $3;
        if ($5 & $3 + -1) {
         break label$1
        }
        $8 = 65536;
        if ($3 & $5) {
         break label$12
        }
       }
       $8 = 0;
      }
      $2 = $2 & 2147483647;
     }
     if ($2 >>> 0 > 8388607) {
      break label$3
     }
     $2 = ((wasm2js_scratch_store_f32(Math_fround($0 * Math_fround(8388608.0))), wasm2js_scratch_load_i32(0)) & 2147483647) + -192937984 | 0;
    }
    $3 = $2 + -1060306944 | 0;
    $6 = $3 >>> 15 & 240;
    $4 = HEAPF64[$6 + 19464 >> 3] * +(wasm2js_scratch_store_i32(0, $2 - ($3 & -8388608) | 0), wasm2js_scratch_load_f32()) + -1.0;
    $9 = $4 * $4;
    $4 = ((HEAPF64[2466] + HEAPF64[2465] * $4) * ($9 * $9) + ($9 * (HEAPF64[2468] + HEAPF64[2467] * $4) + (HEAPF64[$6 + 19472 >> 3] + +($3 >> 23) + $4 * HEAPF64[2469]))) * +$1;
    wasm2js_scratch_store_f64(+$4);
    label$14 : {
     $5 = wasm2js_scratch_load_i32(1) & 2147450880;
     if (($5 | 0) == 1079967744 & (wasm2js_scratch_load_i32(0) & 0) >>> 0 < 1 | $5 >>> 0 < 1079967744) {
      break label$14
     }
     if (!!($4 > 127.99999995700433)) {
      return __math_xflowf($8, Math_fround(1584563250285286751870879.0e5))
     }
     if (!($4 <= -150.0)) {
      break label$14
     }
     return __math_xflowf($8, Math_fround(2.524354896707238e-29));
    }
    $9 = HEAPF64[2502];
    $10 = $4 + $9;
    $4 = $4 - ($10 - $9);
    $4 = $4 * $4 * (HEAPF64[2504] + HEAPF64[2503] * $4) + ($4 * HEAPF64[2505] + 1.0);
    wasm2js_scratch_store_f64(+$10);
    wasm2js_scratch_load_i32(1) | 0;
    $3 = $8;
    $8 = wasm2js_scratch_load_i32(0) | 0;
    $2 = $3 + $8 | 0;
    $2 = $2 << 15;
    $6 = (($8 & 31) << 3) + 19760 | 0;
    $3 = HEAP32[$6 >> 2];
    $2 = HEAP32[$6 + 4 >> 2] + $2 | 0;
    $5 = $3;
    if ($3 >>> 0 < $3 >>> 0) {
     $2 = $2 + 1 | 0
    }
    wasm2js_scratch_store_i32(0, $5 | 0);
    wasm2js_scratch_store_i32(1, $2 | 0);
    $7 = Math_fround($4 * +wasm2js_scratch_load_f64());
   }
   return $7;
  }
  $0 = Math_fround($0 - $0);
  return Math_fround($0 / $0);
 }
 
 function acosf($0) {
  var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = Math_fround(0);
  $3 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
  $2 = $3 & 2147483647;
  if ($2 >>> 0 >= 1065353216) {
   if (($2 | 0) == 1065353216) {
    return ($3 | 0) < 0 ? Math_fround(3.141592502593994) : Math_fround(0.0)
   }
   return Math_fround(Math_fround(0.0) / Math_fround($0 - $0));
  }
  label$3 : {
   if ($2 >>> 0 <= 1056964607) {
    $1 = Math_fround(1.570796251296997);
    if ($2 >>> 0 < 847249409) {
     break label$3
    }
    $1 = Math_fround($0 * $0);
    return Math_fround(Math_fround(Math_fround(Math_fround(7.549789415861596e-08) - Math_fround(Math_fround(Math_fround($1 * Math_fround(Math_fround($1 * Math_fround(Math_fround($1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($1 * Math_fround(-.7066296339035034)) + Math_fround(1.0))) * $0)) - $0) + Math_fround(1.570796251296997));
   }
   if (($3 | 0) <= -1) {
    $0 = Math_fround(Math_fround($0 + Math_fround(1.0)) * Math_fround(.5));
    $1 = Math_fround(Math_sqrt($0));
    $0 = Math_fround(Math_fround(1.570796251296997) - Math_fround($1 + Math_fround(Math_fround($1 * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($0 * Math_fround(-.7066296339035034)) + Math_fround(1.0)))) + Math_fround(-7.549789415861596e-08))));
    return Math_fround($0 + $0);
   }
   $0 = Math_fround(Math_fround(Math_fround(1.0) - $0) * Math_fround(.5));
   $4 = Math_fround(Math_sqrt($0));
   $1 = (wasm2js_scratch_store_i32(0, (wasm2js_scratch_store_f32($4), wasm2js_scratch_load_i32(0)) & -4096), wasm2js_scratch_load_f32());
   $0 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593))) / Math_fround(Math_fround($0 * Math_fround(-.7066296339035034)) + Math_fround(1.0))) * $4) + Math_fround(Math_fround($0 - Math_fround($1 * $1)) / Math_fround($4 + $1))) + $1);
   $1 = Math_fround($0 + $0);
  }
  return $1;
 }
 
 function btRigidBody__btRigidBody_28btRigidBody__btRigidBodyConstructionInfo_20const__29($0, $1) {
  var $2 = 0;
  btCollisionObject__btCollisionObject_28_29($0);
  HEAP8[$0 + 560 | 0] = 1;
  HEAP32[$0 >> 2] = 20096;
  HEAP32[$0 + 556 >> 2] = 0;
  $2 = $0 + 548 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  btRigidBody__setupRigidBody_28btRigidBody__btRigidBodyConstructionInfo_20const__29($0, $1);
 }
 
 function btRigidBody__setupRigidBody_28btRigidBody__btRigidBodyConstructionInfo_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0);
  $7 = global$0 - 16 | 0;
  global$0 = $7;
  HEAP32[$0 + 372 >> 2] = 0;
  HEAP32[$0 + 376 >> 2] = 0;
  HEAP32[$0 + 252 >> 2] = 2;
  HEAP32[$0 + 604 >> 2] = 1065353216;
  HEAP32[$0 + 608 >> 2] = 1065353216;
  HEAP32[$0 + 408 >> 2] = 1065353216;
  HEAP32[$0 + 412 >> 2] = 1065353216;
  HEAP32[$0 + 472 >> 2] = 0;
  HEAP32[$0 + 476 >> 2] = 0;
  $2 = $0 + 380 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 388 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 396 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 612 | 0;
  HEAP32[$2 >> 2] = 1065353216;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 420 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 416 >> 2] = 1065353216;
  $2 = $0 + 428 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 436 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 444 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 452 >> 2] = 0;
  $2 = $0 + 480 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 488 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 496 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $8 = HEAPF32[$1 + 96 >> 2];
  $6 = HEAPF32[$1 + 92 >> 2];
  HEAPF32[$7 + 12 >> 2] = $6;
  HEAPF32[$7 + 8 >> 2] = $8;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$7 >> 2] = 1065353216;
  HEAP32[$0 + 504 >> 2] = HEAP32[($6 < Math_fround(0.0) ? $7 + 4 | 0 : $6 > Math_fround(1.0) ? $7 : $7 + 12 | 0) >> 2];
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$7 >> 2] = 1065353216;
  HEAP32[$0 + 508 >> 2] = HEAP32[($8 < Math_fround(0.0) ? $7 + 4 | 0 : $8 > Math_fround(1.0) ? $7 : $7 + 8 | 0) >> 2];
  HEAP32[$0 + 668 >> 2] = 0;
  HEAP32[$0 + 672 >> 2] = 0;
  $2 = HEAP32[$1 + 120 >> 2];
  HEAP32[$0 + 532 >> 2] = HEAP32[$1 + 116 >> 2];
  HEAP32[$0 + 536 >> 2] = $2;
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 540 >> 2] = $4;
  HEAP8[$0 + 512 | 0] = HEAPU8[$1 + 124 | 0];
  $3 = HEAP32[$1 + 132 >> 2];
  HEAP32[$0 + 516 >> 2] = HEAP32[$1 + 128 >> 2];
  HEAP32[$0 + 520 >> 2] = $3;
  $2 = HEAP32[$1 + 140 >> 2];
  HEAP32[$0 + 524 >> 2] = HEAP32[$1 + 136 >> 2];
  HEAP32[$0 + 528 >> 2] = $2;
  label$1 : {
   if ($4) {
    $5 = $0 + 4 | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $5);
    break label$1;
   }
   $3 = HEAP32[$1 + 12 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$0 + 8 >> 2] = $3;
   $4 = $1 + 16 | 0;
   $5 = HEAP32[$4 >> 2];
   $2 = HEAP32[$4 + 4 >> 2];
   $3 = $0 + 12 | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $2;
   $4 = $1 + 32 | 0;
   $5 = HEAP32[$4 >> 2];
   $3 = HEAP32[$4 + 4 >> 2];
   $2 = $0 + 28 | 0;
   HEAP32[$2 >> 2] = $5;
   HEAP32[$2 + 4 >> 2] = $3;
   $4 = $1 + 24 | 0;
   $5 = HEAP32[$4 >> 2];
   $2 = HEAP32[$4 + 4 >> 2];
   $3 = $0 + 20 | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $2;
   $4 = $1 + 40 | 0;
   $5 = HEAP32[$4 >> 2];
   $3 = HEAP32[$4 + 4 >> 2];
   $2 = $0 + 36 | 0;
   HEAP32[$2 >> 2] = $5;
   HEAP32[$2 + 4 >> 2] = $3;
   $4 = $1 + 48 | 0;
   $5 = HEAP32[$4 >> 2];
   $2 = HEAP32[$4 + 4 >> 2];
   $3 = $0 + 44 | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $2;
   $4 = $1 - -64 | 0;
   $5 = HEAP32[$4 >> 2];
   $3 = HEAP32[$4 + 4 >> 2];
   $2 = $0 + 60 | 0;
   HEAP32[$2 >> 2] = $5;
   HEAP32[$2 + 4 >> 2] = $3;
   $4 = $1 + 56 | 0;
   $5 = HEAP32[$4 >> 2];
   $2 = HEAP32[$4 + 4 >> 2];
   $3 = $0 + 52 | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $2;
   $5 = $0 + 4 | 0;
  }
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 0;
  $4 = $5;
  $2 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$0 + 68 >> 2] = $2;
  HEAP32[$0 + 72 >> 2] = $3;
  $2 = $0 + 156 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 148 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 140 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $4 = $0 + 20 | 0;
  $2 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 84 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$3 + 4 >> 2] = $2;
  $4 = $5 + 8 | 0;
  $5 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $2 = $0 + 76 | 0;
  HEAP32[$2 >> 2] = $5;
  HEAP32[$2 + 4 >> 2] = $3;
  $4 = $0 + 28 | 0;
  $5 = HEAP32[$4 >> 2];
  $2 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 92 | 0;
  HEAP32[$3 >> 2] = $5;
  HEAP32[$3 + 4 >> 2] = $2;
  $4 = $0 + 36 | 0;
  $5 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $2 = $0 + 100 | 0;
  HEAP32[$2 >> 2] = $5;
  HEAP32[$2 + 4 >> 2] = $3;
  $4 = $0 + 44 | 0;
  $5 = HEAP32[$4 >> 2];
  $2 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 108 | 0;
  HEAP32[$3 >> 2] = $5;
  HEAP32[$3 + 4 >> 2] = $2;
  $4 = $0 + 52 | 0;
  $5 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $2 = $0 + 116 | 0;
  HEAP32[$2 >> 2] = $5;
  HEAP32[$2 + 4 >> 2] = $3;
  $4 = $0 + 60 | 0;
  $5 = HEAP32[$4 >> 2];
  $2 = HEAP32[$4 + 4 >> 2];
  $3 = $0 + 124 | 0;
  HEAP32[$3 >> 2] = $5;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$0 + 228 >> 2] = HEAP32[$1 + 100 >> 2];
  HEAP32[$0 + 236 >> 2] = HEAP32[$1 + 104 >> 2];
  HEAP32[$0 + 240 >> 2] = HEAP32[$1 + 108 >> 2];
  HEAP32[$0 + 232 >> 2] = HEAP32[$1 + 112 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, HEAP32[$1 + 72 >> 2]);
  $4 = HEAP32[699];
  HEAP32[$0 + 568 >> 2] = $4;
  HEAP32[699] = $4 + 1;
  $8 = Math_fround(0.0);
  $4 = HEAP32[$0 + 204 >> 2];
  $6 = HEAPF32[$1 >> 2];
  label$3 : {
   if ($6 == Math_fround(0.0)) {
    HEAP32[$0 + 204 >> 2] = $4 | 1;
    break label$3;
   }
   HEAP32[$0 + 204 >> 2] = $4 & -2;
   $8 = Math_fround(Math_fround(1.0) / $6);
  }
  HEAP32[$0 + 436 >> 2] = 0;
  HEAPF32[$0 + 404 >> 2] = $8;
  HEAPF32[$0 + 432 >> 2] = $6 * HEAPF32[$0 + 448 >> 2];
  HEAPF32[$0 + 428 >> 2] = $6 * HEAPF32[$0 + 444 >> 2];
  HEAPF32[$0 + 424 >> 2] = $6 * HEAPF32[$0 + 440 >> 2];
  $6 = HEAPF32[$1 + 84 >> 2];
  $10 = HEAPF32[$1 + 80 >> 2];
  $14 = HEAPF32[$1 + 76 >> 2];
  HEAPF32[$0 + 620 >> 2] = $8 * HEAPF32[$0 + 408 >> 2];
  $1 = $0 + 624 | 0;
  HEAPF32[$1 >> 2] = $8 * HEAPF32[$0 + 412 >> 2];
  $4 = $0 + 628 | 0;
  HEAPF32[$4 >> 2] = $8 * HEAPF32[$0 + 416 >> 2];
  $5 = $0 + 632 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$0 + 468 >> 2] = 0;
  $11 = $14 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $14) : Math_fround(0.0);
  HEAPF32[$0 + 456 >> 2] = $11;
  $17 = $10 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $10) : Math_fround(0.0);
  HEAPF32[$0 + 460 >> 2] = $17;
  $18 = $6 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $6) : Math_fround(0.0);
  HEAPF32[$0 + 464 >> 2] = $18;
  $6 = HEAPF32[$0 + 12 >> 2];
  $10 = HEAPF32[$0 + 8 >> 2];
  $14 = HEAPF32[$0 + 28 >> 2];
  $19 = HEAPF32[$0 + 20 >> 2];
  $20 = HEAPF32[$0 + 24 >> 2];
  $21 = HEAPF32[$0 + 44 >> 2];
  $12 = HEAPF32[$0 + 36 >> 2];
  $13 = HEAPF32[$0 + 40 >> 2];
  $22 = HEAPF32[$0 + 4 >> 2];
  HEAP32[$0 + 564 >> 2] = 8;
  HEAP32[$0 + 368 >> 2] = 0;
  HEAP32[$0 + 352 >> 2] = 0;
  HEAP32[$0 + 336 >> 2] = 0;
  $9 = Math_fround($11 * $12);
  $15 = Math_fround($17 * $13);
  $16 = Math_fround($18 * $21);
  HEAPF32[$0 + 364 >> 2] = Math_fround(Math_fround($12 * $9) + Math_fround($13 * $15)) + Math_fround($21 * $16);
  HEAPF32[$0 + 360 >> 2] = Math_fround(Math_fround($19 * $9) + Math_fround($20 * $15)) + Math_fround($14 * $16);
  HEAPF32[$0 + 356 >> 2] = Math_fround(Math_fround($22 * $9) + Math_fround($10 * $15)) + Math_fround($6 * $16);
  $9 = Math_fround($11 * $19);
  $15 = Math_fround($17 * $20);
  $16 = Math_fround($18 * $14);
  HEAPF32[$0 + 348 >> 2] = Math_fround(Math_fround($12 * $9) + Math_fround($13 * $15)) + Math_fround($21 * $16);
  HEAPF32[$0 + 344 >> 2] = Math_fround(Math_fround($19 * $9) + Math_fround($20 * $15)) + Math_fround($14 * $16);
  HEAPF32[$0 + 340 >> 2] = Math_fround(Math_fround($22 * $9) + Math_fround($10 * $15)) + Math_fround($6 * $16);
  $11 = Math_fround($11 * $22);
  $9 = Math_fround($12 * $11);
  $12 = Math_fround($17 * $10);
  $9 = Math_fround($9 + Math_fround($13 * $12));
  $13 = Math_fround($18 * $6);
  HEAPF32[$0 + 332 >> 2] = $9 + Math_fround($21 * $13);
  HEAPF32[$0 + 328 >> 2] = Math_fround(Math_fround($11 * $19) + Math_fround($12 * $20)) + Math_fround($13 * $14);
  HEAPF32[$0 + 324 >> 2] = Math_fround(Math_fround($22 * $11) + Math_fround($10 * $12)) + Math_fround($6 * $13);
  $3 = $0 + 596 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $0 + 588 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $0 + 580 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$0 + 572 >> 2] = 0;
  HEAP32[$0 + 576 >> 2] = 0;
  $6 = HEAPF32[$0 + 408 >> 2];
  $10 = HEAPF32[$0 + 412 >> 2];
  HEAPF32[$4 >> 2] = $8 * HEAPF32[$0 + 416 >> 2];
  HEAPF32[$1 >> 2] = $8 * $10;
  HEAPF32[$0 + 620 >> 2] = $8 * $6;
  HEAP32[$0 + 664 >> 2] = 0;
  $3 = $0 + 656 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $0 + 648 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $0 + 640 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $5;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  global$0 = $7 + 16 | 0;
 }
 
 function btRigidBody__setDamping_28float_2c_20float_29($0, $1, $2) {
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  HEAPF32[$3 + 8 >> 2] = $2;
  HEAPF32[$3 + 12 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$3 >> 2] = 1065353216;
  HEAP32[$0 + 504 >> 2] = HEAP32[($1 < Math_fround(0.0) ? $3 + 4 | 0 : $1 > Math_fround(1.0) ? $3 : $3 + 12 | 0) >> 2];
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$3 >> 2] = 1065353216;
  HEAP32[$0 + 508 >> 2] = HEAP32[($2 < Math_fround(0.0) ? $3 + 4 | 0 : $2 > Math_fround(1.0) ? $3 : $3 + 8 | 0) >> 2];
 }
 
 function btRigidBody__setMassProps_28float_2c_20btVector3_20const__29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0);
  $4 = HEAP32[$0 + 204 >> 2];
  label$1 : {
   if ($1 == Math_fround(0.0)) {
    HEAP32[$0 + 204 >> 2] = $4 | 1;
    break label$1;
   }
   HEAP32[$0 + 204 >> 2] = $4 & -2;
   $3 = Math_fround(Math_fround(1.0) / $1);
  }
  HEAPF32[$0 + 404 >> 2] = $3;
  HEAP32[$0 + 436 >> 2] = 0;
  HEAPF32[$0 + 424 >> 2] = HEAPF32[$0 + 440 >> 2] * $1;
  HEAPF32[$0 + 432 >> 2] = HEAPF32[$0 + 448 >> 2] * $1;
  HEAPF32[$0 + 428 >> 2] = HEAPF32[$0 + 444 >> 2] * $1;
  $1 = HEAPF32[$2 + 8 >> 2];
  $5 = HEAPF32[$2 + 4 >> 2];
  $6 = HEAPF32[$2 >> 2];
  HEAPF32[$0 + 620 >> 2] = HEAPF32[$0 + 408 >> 2] * $3;
  HEAPF32[$0 + 624 >> 2] = $3 * HEAPF32[$0 + 412 >> 2];
  HEAPF32[$0 + 628 >> 2] = $3 * HEAPF32[$0 + 416 >> 2];
  HEAP32[$0 + 632 >> 2] = 0;
  HEAP32[$0 + 468 >> 2] = 0;
  HEAPF32[$0 + 456 >> 2] = $6 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $6) : Math_fround(0.0);
  HEAPF32[$0 + 460 >> 2] = $5 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $5) : Math_fround(0.0);
  HEAPF32[$0 + 464 >> 2] = $1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $1) : Math_fround(0.0);
 }
 
 function btRigidBody__updateInertiaTensor_28_29($0) {
  var $1 = Math_fround(0), $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
  HEAP32[$0 + 368 >> 2] = 0;
  HEAP32[$0 + 352 >> 2] = 0;
  HEAP32[$0 + 336 >> 2] = 0;
  $6 = HEAPF32[$0 + 456 >> 2];
  $2 = HEAPF32[$0 + 36 >> 2];
  $3 = Math_fround($6 * $2);
  $13 = HEAPF32[$0 + 460 >> 2];
  $4 = HEAPF32[$0 + 40 >> 2];
  $5 = Math_fround($13 * $4);
  $14 = HEAPF32[$0 + 464 >> 2];
  $8 = HEAPF32[$0 + 44 >> 2];
  $1 = Math_fround($14 * $8);
  HEAPF32[$0 + 364 >> 2] = Math_fround(Math_fround($3 * $2) + Math_fround($5 * $4)) + Math_fround($1 * $8);
  $9 = HEAPF32[$0 + 20 >> 2];
  $10 = HEAPF32[$0 + 24 >> 2];
  $11 = HEAPF32[$0 + 28 >> 2];
  HEAPF32[$0 + 360 >> 2] = Math_fround(Math_fround($3 * $9) + Math_fround($5 * $10)) + Math_fround($1 * $11);
  $12 = HEAPF32[$0 + 4 >> 2];
  $7 = Math_fround($3 * $12);
  $3 = HEAPF32[$0 + 8 >> 2];
  $7 = Math_fround($7 + Math_fround($5 * $3));
  $5 = HEAPF32[$0 + 12 >> 2];
  HEAPF32[$0 + 356 >> 2] = $7 + Math_fround($1 * $5);
  $1 = Math_fround($6 * $9);
  $7 = Math_fround($13 * $10);
  $15 = Math_fround($14 * $11);
  HEAPF32[$0 + 348 >> 2] = Math_fround(Math_fround($2 * $1) + Math_fround($4 * $7)) + Math_fround($8 * $15);
  HEAPF32[$0 + 344 >> 2] = Math_fround(Math_fround($1 * $9) + Math_fround($7 * $10)) + Math_fround($15 * $11);
  HEAPF32[$0 + 340 >> 2] = Math_fround(Math_fround($1 * $12) + Math_fround($7 * $3)) + Math_fround($15 * $5);
  $6 = Math_fround($12 * $6);
  $1 = Math_fround($2 * $6);
  $2 = Math_fround($3 * $13);
  $1 = Math_fround($1 + Math_fround($4 * $2));
  $4 = Math_fround($5 * $14);
  HEAPF32[$0 + 332 >> 2] = $1 + Math_fround($8 * $4);
  HEAPF32[$0 + 328 >> 2] = Math_fround(Math_fround($6 * $9) + Math_fround($2 * $10)) + Math_fround($4 * $11);
  HEAPF32[$0 + 324 >> 2] = Math_fround(Math_fround($6 * $12) + Math_fround($2 * $3)) + Math_fround($4 * $5);
 }
 
 function btRigidBody__predictIntegratedTransform_28float_2c_20btTransform__29($0, $1, $2) {
  btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btTransform__29($0 + 4 | 0, $0 + 372 | 0, $0 + 388 | 0, $1, $2);
 }
 
 function btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btTransform__29($0, $1, $2, $3, $4) {
  var $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0;
  $13 = global$0 - 16 | 0;
  global$0 = $13;
  $5 = HEAPF32[$0 + 52 >> 2];
  $6 = HEAPF32[$0 + 56 >> 2];
  $8 = HEAPF32[$0 + 48 >> 2];
  $7 = HEAPF32[$1 >> 2];
  $9 = HEAPF32[$1 + 4 >> 2];
  $10 = HEAPF32[$1 + 8 >> 2];
  HEAP32[$4 + 60 >> 2] = 0;
  HEAPF32[$4 + 56 >> 2] = $6 + Math_fround($10 * $3);
  HEAPF32[$4 + 52 >> 2] = $5 + Math_fround($9 * $3);
  HEAPF32[$4 + 48 >> 2] = $8 + Math_fround($7 * $3);
  $8 = HEAPF32[$2 >> 2];
  $11 = HEAPF32[$2 + 4 >> 2];
  $12 = HEAPF32[$2 + 8 >> 2];
  $5 = Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($11 * $11)) + Math_fround($12 * $12));
  $5 = $5 > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_sqrt($5)) : Math_fround(0.0);
  $5 = Math_fround($5 * $3) > Math_fround(.7853981852531433) ? Math_fround(Math_fround(.7853981852531433) / $3) : $5;
  label$1 : {
   if (!!($5 < Math_fround(1.0000000474974513e-03))) {
    $6 = Math_fround(Math_fround($3 * Math_fround(.5)) + Math_fround($5 * Math_fround(Math_fround(Math_fround(Math_fround($3 * $3) * $3) * Math_fround(-.02083333395421505)) * $5)));
    break label$1;
   }
   $6 = Math_fround(sinf(Math_fround(Math_fround($5 * Math_fround(.5)) * $3)) / $5);
  }
  btMatrix3x3__getRotation_28btQuaternion__29_20const($0, $13);
  $7 = HEAPF32[$13 + 12 >> 2];
  $9 = cosf(Math_fround(Math_fround($5 * $3) * Math_fround(.5)));
  $10 = Math_fround($8 * $6);
  $14 = HEAPF32[$13 >> 2];
  $11 = Math_fround($11 * $6);
  $15 = HEAPF32[$13 + 4 >> 2];
  $6 = Math_fround($12 * $6);
  $12 = HEAPF32[$13 + 8 >> 2];
  $5 = Math_fround(Math_fround(Math_fround(Math_fround($7 * $9) - Math_fround($10 * $14)) - Math_fround($11 * $15)) - Math_fround($6 * $12));
  $8 = Math_fround(Math_fround(Math_fround(Math_fround($6 * $7) + Math_fround($9 * $12)) + Math_fround($10 * $15)) - Math_fround($11 * $14));
  $3 = Math_fround(Math_fround(Math_fround(Math_fround($9 * $14) + Math_fround($10 * $7)) + Math_fround($11 * $12)) - Math_fround($6 * $15));
  $6 = Math_fround(Math_fround(Math_fround($6 * $14) + Math_fround(Math_fround($11 * $7) + Math_fround($9 * $15))) - Math_fround($10 * $12));
  $7 = Math_fround(Math_fround($5 * $5) + Math_fround(Math_fround($8 * $8) + Math_fround(Math_fround($3 * $3) + Math_fround($6 * $6))));
  if (!!($7 > Math_fround(1.1920928955078125e-07))) {
   $7 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($7)));
   $5 = Math_fround($5 * $7);
   $8 = Math_fround($8 * $7);
   $6 = Math_fround($6 * $7);
   $3 = Math_fround($3 * $7);
   $7 = Math_fround(Math_fround($5 * $5) + Math_fround(Math_fround($8 * $8) + Math_fround(Math_fround($6 * $6) + Math_fround($3 * $3))));
  }
  label$4 : {
   if (!!($7 > Math_fround(1.1920928955078125e-07))) {
    HEAP32[$4 + 12 >> 2] = 0;
    HEAP32[$4 + 44 >> 2] = 0;
    HEAP32[$4 + 28 >> 2] = 0;
    $9 = Math_fround(Math_fround(2.0) / $7);
    $7 = Math_fround($8 * $9);
    $10 = Math_fround($6 * $7);
    $14 = Math_fround($3 * $9);
    $11 = Math_fround($5 * $14);
    HEAPF32[$4 + 36 >> 2] = $10 + $11;
    $15 = Math_fround($3 * $7);
    $9 = Math_fround($6 * $9);
    $12 = Math_fround($5 * $9);
    HEAPF32[$4 + 32 >> 2] = $15 - $12;
    HEAPF32[$4 + 24 >> 2] = $10 - $11;
    $10 = Math_fround($3 * $9);
    $5 = Math_fround($5 * $7);
    HEAPF32[$4 + 16 >> 2] = $10 + $5;
    HEAPF32[$4 + 8 >> 2] = $15 + $12;
    HEAPF32[$4 + 4 >> 2] = $10 - $5;
    $3 = Math_fround($3 * $14);
    $5 = Math_fround($6 * $9);
    HEAPF32[$4 + 40 >> 2] = Math_fround(1.0) - Math_fround($3 + $5);
    $6 = Math_fround($8 * $7);
    HEAPF32[$4 + 20 >> 2] = Math_fround(1.0) - Math_fround($3 + $6);
    HEAPF32[$4 >> 2] = Math_fround(1.0) - Math_fround($5 + $6);
    break label$4;
   }
   $2 = HEAP32[$0 + 4 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$4 + 4 >> 2] = $2;
   $1 = $0 + 8 | 0;
   $16 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
   $2 = $4 + 8 | 0;
   HEAP32[$2 >> 2] = $16;
   HEAP32[$2 + 4 >> 2] = $1;
   $2 = HEAP32[$0 + 20 >> 2];
   HEAP32[$4 + 16 >> 2] = HEAP32[$0 + 16 >> 2];
   HEAP32[$4 + 20 >> 2] = $2;
   $1 = $0 + 24 | 0;
   $16 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
   $2 = $4 + 24 | 0;
   HEAP32[$2 >> 2] = $16;
   HEAP32[$2 + 4 >> 2] = $1;
   $2 = HEAP32[$0 + 36 >> 2];
   HEAP32[$4 + 32 >> 2] = HEAP32[$0 + 32 >> 2];
   HEAP32[$4 + 36 >> 2] = $2;
   $1 = $0 + 40 | 0;
   $0 = HEAP32[$1 >> 2];
   $1 = HEAP32[$1 + 4 >> 2];
   $2 = $4 + 40 | 0;
   HEAP32[$2 >> 2] = $0;
   HEAP32[$2 + 4 >> 2] = $1;
  }
  global$0 = $13 + 16 | 0;
 }
 
 function btRigidBody__saveKinematicState_28float_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $6 = global$0 - 32 | 0;
  global$0 = $6;
  if ($1 != Math_fround(0.0)) {
   $2 = HEAP32[$0 + 540 >> 2];
   if ($2) {
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $0 + 4 | 0)
   }
   HEAP32[$0 + 384 >> 2] = 0;
   $2 = $0 + 380 | 0;
   $1 = Math_fround(Math_fround(1.0) / $1);
   $8 = $0 + 60 | 0;
   $9 = $0 + 124 | 0;
   HEAPF32[$2 >> 2] = $1 * Math_fround(HEAPF32[$8 >> 2] - HEAPF32[$9 >> 2]);
   HEAPF32[$0 + 376 >> 2] = $1 * Math_fround(HEAPF32[$0 + 56 >> 2] - HEAPF32[$0 + 120 >> 2]);
   $10 = $0 + 52 | 0;
   $11 = $0 + 116 | 0;
   HEAPF32[$0 + 372 >> 2] = $1 * Math_fround(HEAPF32[$10 >> 2] - HEAPF32[$11 >> 2]);
   btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20float__29($0 + 68 | 0, $0 + 4 | 0, $6 + 16 | 0, $6 + 12 | 0);
   HEAP32[$0 + 400 >> 2] = 0;
   $5 = $0 + 396 | 0;
   $7 = HEAPF32[$6 + 12 >> 2];
   HEAPF32[$5 >> 2] = $1 * Math_fround($7 * HEAPF32[$6 + 24 >> 2]);
   HEAPF32[$0 + 392 >> 2] = $1 * Math_fround($7 * HEAPF32[$6 + 20 >> 2]);
   HEAPF32[$0 + 388 >> 2] = $1 * Math_fround($7 * HEAPF32[$6 + 16 >> 2]);
   $3 = HEAP32[$2 + 4 >> 2];
   $4 = $0 + 140 | 0;
   HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
   HEAP32[$4 + 4 >> 2] = $3;
   $4 = HEAP32[$0 + 376 >> 2];
   HEAP32[$0 + 132 >> 2] = HEAP32[$0 + 372 >> 2];
   HEAP32[$0 + 136 >> 2] = $4;
   $3 = HEAP32[$0 + 392 >> 2];
   HEAP32[$0 + 148 >> 2] = HEAP32[$0 + 388 >> 2];
   HEAP32[$0 + 152 >> 2] = $3;
   $2 = $5;
   $5 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = $0 + 156 | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $4;
   $3 = HEAP32[$0 + 8 >> 2];
   HEAP32[$0 + 68 >> 2] = HEAP32[$0 + 4 >> 2];
   HEAP32[$0 + 72 >> 2] = $3;
   $2 = $0 + 12 | 0;
   $5 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = $0 + 76 | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $4;
   $2 = $0 + 20 | 0;
   $5 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   $4 = $0 + 84 | 0;
   HEAP32[$4 >> 2] = $5;
   HEAP32[$4 + 4 >> 2] = $3;
   $2 = $0 + 28 | 0;
   $5 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = $0 + 92 | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $4;
   $2 = $0 + 44 | 0;
   $5 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   $4 = $0 + 108 | 0;
   HEAP32[$4 >> 2] = $5;
   HEAP32[$4 + 4 >> 2] = $3;
   $2 = $0 + 36 | 0;
   $5 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = $0 + 100 | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $4;
   $2 = $8;
   $0 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   $4 = $9;
   HEAP32[$4 >> 2] = $0;
   HEAP32[$4 + 4 >> 2] = $3;
   $2 = $10;
   $0 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = $11;
   HEAP32[$3 >> 2] = $0;
   HEAP32[$3 + 4 >> 2] = $4;
  }
  global$0 = $6 + 32 | 0;
 }
 
 function btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20float__29($0, $1, $2, $3) {
  var $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0);
  $5 = global$0 + -64 | 0;
  global$0 = $5;
  $15 = HEAPF32[$1 + 24 >> 2];
  $16 = HEAPF32[$1 + 20 >> 2];
  $17 = HEAPF32[$1 + 40 >> 2];
  $18 = HEAPF32[$1 + 36 >> 2];
  $9 = HEAPF32[$0 + 40 >> 2];
  $10 = HEAPF32[$0 + 20 >> 2];
  $13 = HEAPF32[$0 + 36 >> 2];
  $11 = HEAPF32[$0 + 24 >> 2];
  $19 = HEAPF32[$1 + 8 >> 2];
  $20 = HEAPF32[$1 >> 2];
  $21 = HEAPF32[$1 + 4 >> 2];
  $22 = HEAPF32[$1 + 16 >> 2];
  $23 = HEAPF32[$1 + 32 >> 2];
  $7 = HEAPF32[$0 + 8 >> 2];
  $8 = HEAPF32[$0 + 4 >> 2];
  $14 = HEAPF32[$0 + 32 >> 2];
  $12 = HEAPF32[$0 + 16 >> 2];
  $4 = HEAPF32[$0 >> 2];
  HEAP32[$5 + 60 >> 2] = 0;
  HEAP32[$5 + 44 >> 2] = 0;
  $25 = Math_fround(Math_fround($10 * $9) - Math_fround($11 * $13));
  $26 = Math_fround(Math_fround($11 * $14) - Math_fround($9 * $12));
  $27 = Math_fround(Math_fround($13 * $12) - Math_fround($10 * $14));
  $6 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround(Math_fround($4 * $25) + Math_fround($8 * $26)) + Math_fround($7 * $27)));
  $24 = Math_fround(Math_fround(Math_fround($11 * $8) - Math_fround($10 * $7)) * $6);
  $11 = Math_fround(Math_fround(Math_fround($12 * $7) - Math_fround($11 * $4)) * $6);
  $10 = Math_fround(Math_fround(Math_fround($10 * $4) - Math_fround($12 * $8)) * $6);
  HEAPF32[$5 + 56 >> 2] = Math_fround(Math_fround($23 * $24) + Math_fround($18 * $11)) + Math_fround($17 * $10);
  $12 = Math_fround(Math_fround(Math_fround($13 * $7) - Math_fround($9 * $8)) * $6);
  $7 = Math_fround(Math_fround(Math_fround($9 * $4) - Math_fround($14 * $7)) * $6);
  $8 = Math_fround(Math_fround(Math_fround($14 * $8) - Math_fround($13 * $4)) * $6);
  HEAPF32[$5 + 52 >> 2] = Math_fround(Math_fround($23 * $12) + Math_fround($18 * $7)) + Math_fround($17 * $8);
  HEAPF32[$5 + 40 >> 2] = Math_fround(Math_fround($24 * $22) + Math_fround($11 * $16)) + Math_fround($10 * $15);
  HEAPF32[$5 + 36 >> 2] = Math_fround(Math_fround($12 * $22) + Math_fround($7 * $16)) + Math_fround($8 * $15);
  HEAP32[$5 + 28 >> 2] = 0;
  $4 = Math_fround($25 * $6);
  $9 = Math_fround($26 * $6);
  $6 = Math_fround($27 * $6);
  HEAPF32[$5 + 48 >> 2] = Math_fround(Math_fround($23 * $4) + Math_fround($18 * $9)) + Math_fround($17 * $6);
  HEAPF32[$5 + 32 >> 2] = Math_fround(Math_fround($4 * $22) + Math_fround($9 * $16)) + Math_fround($6 * $15);
  HEAPF32[$5 + 24 >> 2] = Math_fround($19 * $10) + Math_fround(Math_fround($20 * $24) + Math_fround($21 * $11));
  HEAPF32[$5 + 20 >> 2] = Math_fround($19 * $8) + Math_fround(Math_fround($20 * $12) + Math_fround($21 * $7));
  HEAPF32[$5 + 16 >> 2] = Math_fround($19 * $6) + Math_fround(Math_fround($20 * $4) + Math_fround($21 * $9));
  btMatrix3x3__getRotation_28btQuaternion__29_20const($5 + 16 | 0, $5);
  $8 = HEAPF32[$5 >> 2];
  $7 = HEAPF32[$5 + 4 >> 2];
  $6 = HEAPF32[$5 + 8 >> 2];
  $9 = HEAPF32[$5 + 12 >> 2];
  $4 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($7 * $7)) + Math_fround($6 * $6)) + Math_fround($9 * $9)))));
  $6 = Math_fround($6 * $4);
  HEAPF32[$5 + 8 >> 2] = $6;
  $7 = Math_fround($7 * $4);
  HEAPF32[$5 + 4 >> 2] = $7;
  $8 = Math_fround($8 * $4);
  HEAPF32[$5 >> 2] = $8;
  $4 = Math_fround($9 * $4);
  HEAPF32[$5 + 12 >> 2] = $4;
  $4 = acosf(Math_fround(Math_min(Math_fround(Math_max($4, Math_fround(-1.0))), Math_fround(1.0))));
  HEAPF32[$3 >> 2] = $4 + $4;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAPF32[$2 + 8 >> 2] = $6;
  HEAPF32[$2 + 4 >> 2] = $7;
  HEAPF32[$2 >> 2] = $8;
  $4 = Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($7 * $7)) + Math_fround($6 * $6));
  label$1 : {
   if (!!($4 < Math_fround(1.4210854715202004e-14))) {
    HEAP32[$2 + 8 >> 2] = 0;
    HEAP32[$2 + 12 >> 2] = 0;
    HEAP32[$2 >> 2] = 1065353216;
    HEAP32[$2 + 4 >> 2] = 0;
    break label$1;
   }
   $4 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($4)));
   HEAPF32[$2 + 8 >> 2] = $6 * $4;
   HEAPF32[$2 + 4 >> 2] = $7 * $4;
   HEAPF32[$2 >> 2] = $8 * $4;
  }
  global$0 = $5 - -64 | 0;
 }
 
 function btRigidBody__setGravity_28btVector3_20const__29($0, $1) {
  var $2 = Math_fround(0), $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0);
  $2 = HEAPF32[$0 + 404 >> 2];
  if ($2 != Math_fround(0.0)) {
   $4 = HEAPF32[$1 >> 2];
   $5 = HEAPF32[$1 + 4 >> 2];
   $6 = HEAPF32[$1 + 8 >> 2];
   HEAP32[$0 + 436 >> 2] = 0;
   $2 = Math_fround(Math_fround(1.0) / $2);
   HEAPF32[$0 + 432 >> 2] = $6 * $2;
   HEAPF32[$0 + 428 >> 2] = $2 * $5;
   HEAPF32[$0 + 424 >> 2] = $2 * $4;
  }
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 440 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 444 >> 2] = $3;
  $1 = $1 + 8 | 0;
  $3 = $0 + 448 | 0;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$3 + 4 >> 2] = $0;
 }
 
 function btRigidBody__applyDamping_28float_29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0);
  $9 = HEAPF32[$0 + 504 >> 2];
  $4 = powf(Math_fround(Math_fround(1.0) - $9), $1);
  $3 = Math_fround($4 * HEAPF32[$0 + 372 >> 2]);
  HEAPF32[$0 + 372 >> 2] = $3;
  $2 = $0 + 376 | 0;
  $6 = Math_fround($4 * HEAPF32[$2 >> 2]);
  HEAPF32[$2 >> 2] = $6;
  $2 = $0 + 380 | 0;
  $7 = Math_fround($4 * HEAPF32[$2 >> 2]);
  HEAPF32[$2 >> 2] = $7;
  $10 = HEAPF32[$0 + 508 >> 2];
  $5 = powf(Math_fround(Math_fround(1.0) - $10), $1);
  $1 = Math_fround($5 * HEAPF32[$0 + 388 >> 2]);
  HEAPF32[$0 + 388 >> 2] = $1;
  $2 = $0 + 392 | 0;
  $4 = Math_fround($5 * HEAPF32[$2 >> 2]);
  HEAPF32[$2 >> 2] = $4;
  $2 = $0 + 396 | 0;
  $5 = Math_fround($5 * HEAPF32[$2 >> 2]);
  HEAPF32[$2 >> 2] = $5;
  label$1 : {
   if (!HEAPU8[$0 + 512 | 0]) {
    break label$1
   }
   label$2 : {
    if (!(Math_fround(Math_fround(Math_fround($1 * $1) + Math_fround($4 * $4)) + Math_fround($5 * $5)) < HEAPF32[$0 + 524 >> 2])) {
     break label$2
    }
    if (!(Math_fround(Math_fround(Math_fround($3 * $3) + Math_fround($6 * $6)) + Math_fround($7 * $7)) < HEAPF32[$0 + 520 >> 2])) {
     break label$2
    }
    $8 = HEAPF32[$0 + 516 >> 2];
    $5 = Math_fround($5 * $8);
    HEAPF32[$0 + 396 >> 2] = $5;
    $4 = Math_fround($4 * $8);
    HEAPF32[$0 + 392 >> 2] = $4;
    $1 = Math_fround($1 * $8);
    HEAPF32[$0 + 388 >> 2] = $1;
    $7 = Math_fround($7 * $8);
    HEAPF32[$0 + 380 >> 2] = $7;
    $6 = Math_fround($6 * $8);
    HEAPF32[$0 + 376 >> 2] = $6;
    $3 = Math_fround($3 * $8);
    HEAPF32[$0 + 372 >> 2] = $3;
   }
   $8 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($3 * $3) + Math_fround($6 * $6)) + Math_fround($7 * $7))));
   label$3 : {
    if (!($8 < $9)) {
     break label$3
    }
    if (!!($8 > Math_fround(.004999999888241291))) {
     $9 = Math_fround(Math_fround(1.0) / $8);
     HEAPF32[$0 + 380 >> 2] = $7 - Math_fround(Math_fround($7 * $9) * Math_fround(.004999999888241291));
     HEAPF32[$0 + 376 >> 2] = $6 - Math_fround(Math_fround($6 * $9) * Math_fround(.004999999888241291));
     HEAPF32[$0 + 372 >> 2] = $3 - Math_fround(Math_fround($3 * $9) * Math_fround(.004999999888241291));
     break label$3;
    }
    $2 = $0 + 372 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
    $2 = $2 + 8 | 0;
    HEAP32[$2 >> 2] = 0;
    HEAP32[$2 + 4 >> 2] = 0;
   }
   $3 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($1 * $1) + Math_fround($4 * $4)) + Math_fround($5 * $5))));
   if (!($3 < $10)) {
    break label$1
   }
   if (!!($3 > Math_fround(.004999999888241291))) {
    $3 = Math_fround(Math_fround(1.0) / $3);
    HEAPF32[$0 + 396 >> 2] = $5 - Math_fround(Math_fround($5 * $3) * Math_fround(.004999999888241291));
    HEAPF32[$0 + 392 >> 2] = $4 - Math_fround(Math_fround($4 * $3) * Math_fround(.004999999888241291));
    HEAPF32[$0 + 388 >> 2] = $1 - Math_fround(Math_fround($1 * $3) * Math_fround(.004999999888241291));
    return;
   }
   $0 = $0 + 388 | 0;
   HEAP32[$0 >> 2] = 0;
   HEAP32[$0 + 4 >> 2] = 0;
   $2 = $0 + 8 | 0;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$2 + 4 >> 2] = 0;
  }
 }
 
 function btRigidBody__applyGravity_28_29($0) {
  var $1 = 0;
  if (!(HEAPU8[$0 + 204 | 0] & 3)) {
   HEAPF32[$0 + 472 >> 2] = Math_fround(HEAPF32[$0 + 424 >> 2] * HEAPF32[$0 + 408 >> 2]) + HEAPF32[$0 + 472 >> 2];
   $1 = $0 + 476 | 0;
   HEAPF32[$1 >> 2] = Math_fround(HEAPF32[$0 + 428 >> 2] * HEAPF32[$0 + 412 >> 2]) + HEAPF32[$1 >> 2];
   $1 = $0 + 480 | 0;
   HEAPF32[$1 >> 2] = Math_fround(HEAPF32[$0 + 432 >> 2] * HEAPF32[$0 + 416 >> 2]) + HEAPF32[$1 >> 2];
  }
 }
 
 function btRigidBody__proceedToTransform_28btTransform_20const__29($0, $1) {
  btRigidBody__setCenterOfMassTransform_28btTransform_20const__29($0, $1);
 }
 
 function btRigidBody__setCenterOfMassTransform_28btTransform_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
  label$1 : {
   if (HEAPU8[$0 + 204 | 0] & 2) {
    $3 = HEAP32[$0 + 8 >> 2];
    HEAP32[$0 + 68 >> 2] = HEAP32[$0 + 4 >> 2];
    HEAP32[$0 + 72 >> 2] = $3;
    $2 = $0 + 12 | 0;
    $5 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = $0 + 76 | 0;
    HEAP32[$3 >> 2] = $5;
    HEAP32[$3 + 4 >> 2] = $4;
    $2 = $0 + 20 | 0;
    $5 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    $4 = $0 + 84 | 0;
    HEAP32[$4 >> 2] = $5;
    HEAP32[$4 + 4 >> 2] = $3;
    $2 = $0 + 28 | 0;
    $5 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = $0 + 92 | 0;
    HEAP32[$3 >> 2] = $5;
    HEAP32[$3 + 4 >> 2] = $4;
    $2 = $0 + 36 | 0;
    $5 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    $4 = $0 + 100 | 0;
    HEAP32[$4 >> 2] = $5;
    HEAP32[$4 + 4 >> 2] = $3;
    $2 = $0 + 44 | 0;
    $5 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = $0 + 108 | 0;
    HEAP32[$3 >> 2] = $5;
    HEAP32[$3 + 4 >> 2] = $4;
    $2 = $0 + 52 | 0;
    $5 = HEAP32[$2 >> 2];
    $3 = HEAP32[$2 + 4 >> 2];
    $4 = $0 + 116 | 0;
    HEAP32[$4 >> 2] = $5;
    HEAP32[$4 + 4 >> 2] = $3;
    $2 = $0 + 60 | 0;
    $5 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    $3 = $0 + 124 | 0;
    HEAP32[$3 >> 2] = $5;
    HEAP32[$3 + 4 >> 2] = $4;
    break label$1;
   }
   $2 = $1;
   $4 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   HEAP32[$0 + 68 >> 2] = $4;
   HEAP32[$0 + 72 >> 2] = $3;
   $2 = $2 + 8 | 0;
   $5 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = $0 + 76 | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $4;
   $2 = $1 + 24 | 0;
   $5 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   $4 = $0 + 92 | 0;
   HEAP32[$4 >> 2] = $5;
   HEAP32[$4 + 4 >> 2] = $3;
   $2 = $1;
   $5 = HEAP32[$2 + 16 >> 2];
   $4 = HEAP32[$2 + 20 >> 2];
   $3 = $0 + 84 | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $4;
   $3 = HEAP32[$2 + 36 >> 2];
   $4 = $0 + 100 | 0;
   HEAP32[$4 >> 2] = HEAP32[$2 + 32 >> 2];
   HEAP32[$4 + 4 >> 2] = $3;
   $2 = $2 + 40 | 0;
   $5 = HEAP32[$2 >> 2];
   $4 = HEAP32[$2 + 4 >> 2];
   $3 = $0 + 108 | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $4;
   $2 = $1 + 56 | 0;
   $5 = HEAP32[$2 >> 2];
   $3 = HEAP32[$2 + 4 >> 2];
   $4 = $0 + 124 | 0;
   HEAP32[$4 >> 2] = $5;
   HEAP32[$4 + 4 >> 2] = $3;
   $2 = $1;
   $5 = HEAP32[$2 + 48 >> 2];
   $4 = HEAP32[$2 + 52 >> 2];
   $3 = $0 + 116 | 0;
   HEAP32[$3 >> 2] = $5;
   HEAP32[$3 + 4 >> 2] = $4;
  }
  $3 = HEAP32[$0 + 392 >> 2];
  HEAP32[$0 + 148 >> 2] = HEAP32[$0 + 388 >> 2];
  HEAP32[$0 + 152 >> 2] = $3;
  $4 = HEAP32[$0 + 376 >> 2];
  HEAP32[$0 + 132 >> 2] = HEAP32[$0 + 372 >> 2];
  HEAP32[$0 + 136 >> 2] = $4;
  $2 = $0 + 396 | 0;
  $5 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $0 + 156 | 0;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $0 + 380 | 0;
  $5 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $0 + 140 | 0;
  HEAP32[$3 >> 2] = $5;
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $1 + 8 | 0;
  $5 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $21 = $0 + 12 | 0;
  $4 = $21;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $1;
  $3 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$0 + 8 >> 2] = $4;
  $2 = $2 + 24 | 0;
  $5 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $22 = $0 + 28 | 0;
  $4 = $22;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $1;
  $5 = HEAP32[$2 + 16 >> 2];
  $4 = HEAP32[$2 + 20 >> 2];
  $23 = $0 + 20 | 0;
  $3 = $23;
  HEAP32[$3 >> 2] = $5;
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $2 + 40 | 0;
  $5 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $24 = $0 + 44 | 0;
  $4 = $24;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $1;
  $5 = HEAP32[$2 + 32 >> 2];
  $4 = HEAP32[$2 + 36 >> 2];
  $25 = $0 + 36 | 0;
  $3 = $25;
  HEAP32[$3 >> 2] = $5;
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $2 + 56 | 0;
  $5 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $0 + 60 | 0;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $1;
  $1 = HEAP32[$2 + 48 >> 2];
  $4 = HEAP32[$2 + 52 >> 2];
  $3 = $0 + 52 | 0;
  HEAP32[$3 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $4;
  $12 = HEAPF32[$0 + 8 >> 2];
  $13 = HEAPF32[$21 >> 2];
  $14 = HEAPF32[$22 >> 2];
  $15 = HEAPF32[$23 >> 2];
  $16 = HEAPF32[$0 + 24 >> 2];
  $17 = HEAPF32[$24 >> 2];
  $19 = HEAPF32[$0 + 464 >> 2];
  $7 = HEAPF32[$25 >> 2];
  $8 = HEAPF32[$0 + 40 >> 2];
  $20 = HEAPF32[$0 + 460 >> 2];
  $18 = HEAPF32[$0 + 4 >> 2];
  $9 = HEAPF32[$0 + 456 >> 2];
  HEAP32[$0 + 368 >> 2] = 0;
  HEAP32[$0 + 352 >> 2] = 0;
  HEAP32[$0 + 336 >> 2] = 0;
  $6 = Math_fround($9 * $7);
  $10 = Math_fround($20 * $8);
  $11 = Math_fround($19 * $17);
  HEAPF32[$0 + 364 >> 2] = Math_fround(Math_fround($7 * $6) + Math_fround($8 * $10)) + Math_fround($17 * $11);
  HEAPF32[$0 + 360 >> 2] = Math_fround(Math_fround($15 * $6) + Math_fround($16 * $10)) + Math_fround($14 * $11);
  HEAPF32[$0 + 356 >> 2] = Math_fround(Math_fround($18 * $6) + Math_fround($12 * $10)) + Math_fround($13 * $11);
  $6 = Math_fround($9 * $15);
  $10 = Math_fround($20 * $16);
  $11 = Math_fround($19 * $14);
  HEAPF32[$0 + 348 >> 2] = Math_fround(Math_fround($7 * $6) + Math_fround($8 * $10)) + Math_fround($17 * $11);
  HEAPF32[$0 + 344 >> 2] = Math_fround(Math_fround($15 * $6) + Math_fround($16 * $10)) + Math_fround($14 * $11);
  HEAPF32[$0 + 340 >> 2] = Math_fround(Math_fround($18 * $6) + Math_fround($12 * $10)) + Math_fround($13 * $11);
  $9 = Math_fround($18 * $9);
  $6 = Math_fround($7 * $9);
  $7 = Math_fround($12 * $20);
  $6 = Math_fround($6 + Math_fround($8 * $7));
  $8 = Math_fround($13 * $19);
  HEAPF32[$0 + 332 >> 2] = $6 + Math_fround($17 * $8);
  HEAPF32[$0 + 328 >> 2] = Math_fround(Math_fround($9 * $15) + Math_fround($7 * $16)) + Math_fround($8 * $14);
  HEAPF32[$0 + 324 >> 2] = Math_fround(Math_fround($18 * $9) + Math_fround($12 * $7)) + Math_fround($13 * $8);
 }
 
 function btRigidBody__computeGyroscopicForceExplicit_28float_29_20const($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0);
  HEAP32[$0 + 12 >> 2] = 0;
  $6 = HEAPF32[$1 + 388 >> 2];
  $3 = HEAPF32[$1 + 456 >> 2];
  $11 = $3 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $3) : Math_fround(0.0);
  $12 = HEAPF32[$1 + 20 >> 2];
  $4 = Math_fround($11 * $12);
  $7 = HEAPF32[$1 + 4 >> 2];
  $3 = HEAPF32[$1 + 460 >> 2];
  $13 = $3 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $3) : Math_fround(0.0);
  $15 = HEAPF32[$1 + 24 >> 2];
  $8 = Math_fround($13 * $15);
  $9 = HEAPF32[$1 + 8 >> 2];
  $3 = HEAPF32[$1 + 464 >> 2];
  $21 = $3 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $3) : Math_fround(0.0);
  $16 = HEAPF32[$1 + 28 >> 2];
  $5 = Math_fround($21 * $16);
  $17 = HEAPF32[$1 + 12 >> 2];
  $3 = HEAPF32[$1 + 392 >> 2];
  $10 = Math_fround(Math_fround($6 * Math_fround(Math_fround(Math_fround($4 * $7) + Math_fround($8 * $9)) + Math_fround($5 * $17))) + Math_fround(Math_fround(Math_fround(Math_fround($4 * $12) + Math_fround($8 * $15)) + Math_fround($5 * $16)) * $3));
  $18 = HEAPF32[$1 + 36 >> 2];
  $19 = HEAPF32[$1 + 40 >> 2];
  $20 = Math_fround(Math_fround($4 * $18) + Math_fround($8 * $19));
  $8 = HEAPF32[$1 + 44 >> 2];
  $4 = HEAPF32[$1 + 396 >> 2];
  $20 = Math_fround($10 + Math_fround(Math_fround($20 + Math_fround($5 * $8)) * $4));
  $5 = Math_fround($11 * $7);
  $10 = Math_fround($13 * $9);
  $14 = Math_fround($21 * $17);
  $10 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($5 * $7) + Math_fround($10 * $9)) + Math_fround($14 * $17)) * $6) + Math_fround($3 * Math_fround(Math_fround(Math_fround($5 * $12) + Math_fround($10 * $15)) + Math_fround($14 * $16)))) + Math_fround(Math_fround(Math_fround(Math_fround($5 * $18) + Math_fround($10 * $19)) + Math_fround($14 * $8)) * $4));
  $5 = Math_fround(Math_fround($6 * $20) - Math_fround($3 * $10));
  HEAPF32[$0 + 8 >> 2] = $5;
  $11 = Math_fround($11 * $18);
  $14 = Math_fround($7 * $11);
  $7 = Math_fround($13 * $19);
  $13 = Math_fround($14 + Math_fround($9 * $7));
  $9 = Math_fround($21 * $8);
  $12 = Math_fround(Math_fround(Math_fround($6 * Math_fround($13 + Math_fround($17 * $9))) + Math_fround($3 * Math_fround(Math_fround(Math_fround($11 * $12) + Math_fround($7 * $15)) + Math_fround($9 * $16)))) + Math_fround($4 * Math_fround(Math_fround(Math_fround($11 * $18) + Math_fround($7 * $19)) + Math_fround($9 * $8))));
  $6 = Math_fround(Math_fround($4 * $10) - Math_fround($6 * $12));
  HEAPF32[$0 + 4 >> 2] = $6;
  $3 = Math_fround(Math_fround($3 * $12) - Math_fround($4 * $20));
  HEAPF32[$0 >> 2] = $3;
  $4 = Math_fround(Math_fround($5 * $5) + Math_fround(Math_fround($3 * $3) + Math_fround($6 * $6)));
  if (!!($4 > Math_fround($2 * $2))) {
   $4 = Math_fround(Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($4))) * $2);
   HEAPF32[$0 + 8 >> 2] = $5 * $4;
   HEAPF32[$0 + 4 >> 2] = $6 * $4;
   HEAPF32[$0 >> 2] = $3 * $4;
  }
 }
 
 function btRigidBody__computeGyroscopicImpulseImplicit_Body_28float_29_20const($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0);
  $18 = global$0 - 16 | 0;
  global$0 = $18;
  $8 = HEAPF32[$1 + 464 >> 2];
  $3 = HEAPF32[$1 + 460 >> 2];
  $21 = HEAPF32[$1 + 396 >> 2];
  $22 = HEAPF32[$1 + 392 >> 2];
  $5 = HEAPF32[$1 + 456 >> 2];
  $23 = HEAPF32[$1 + 388 >> 2];
  btMatrix3x3__getRotation_28btQuaternion__29_20const($1 + 4 | 0, $18);
  HEAP32[$0 + 12 >> 2] = 0;
  $9 = HEAPF32[$18 + 12 >> 2];
  $10 = HEAPF32[$18 + 4 >> 2];
  $11 = HEAPF32[$18 + 8 >> 2];
  $15 = Math_fround(Math_fround(Math_fround($23 * $9) - Math_fround($21 * $10)) + Math_fround($22 * $11));
  $12 = HEAPF32[$18 >> 2];
  $16 = Math_fround(Math_fround(Math_fround($22 * $10) + Math_fround($23 * $12)) + Math_fround($21 * $11));
  $6 = Math_fround(Math_fround(Math_fround($21 * $9) - Math_fround($22 * $12)) + Math_fround($23 * $10));
  $14 = Math_fround(Math_fround(Math_fround($22 * $9) - Math_fround($23 * $11)) + Math_fround($21 * $12));
  $4 = Math_fround(Math_fround(Math_fround($10 * $15) + Math_fround(Math_fround($11 * $16) + Math_fround($9 * $6))) - Math_fround($12 * $14));
  $13 = Math_fround(Math_fround(Math_fround($11 * $14) + Math_fround(Math_fround($12 * $16) + Math_fround($9 * $15))) - Math_fround($10 * $6));
  $19 = Math_fround($13 * Math_fround(0.0));
  $7 = $5 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $5) : Math_fround(0.0);
  $5 = Math_fround(Math_fround(Math_fround($12 * $6) + Math_fround(Math_fround($10 * $16) + Math_fround($9 * $14))) - Math_fround($11 * $15));
  $14 = Math_fround($4 * Math_fround(0.0));
  $3 = $3 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $3) : Math_fround(0.0);
  $20 = Math_fround($14 + Math_fround($19 + Math_fround($3 * $5)));
  $28 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($19 - Math_fround($7 * $5)) + Math_fround(0.0)) + Math_fround($20 + Math_fround(0.0))) * $2) + Math_fround(0.0));
  $8 = $8 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $8) : Math_fround(0.0);
  $6 = Math_fround($5 * Math_fround(0.0));
  $17 = Math_fround(Math_fround($4 * $8) + Math_fround($19 + $6));
  $32 = $4;
  $24 = Math_fround(Math_fround(Math_fround(Math_fround($6 + Math_fround(Math_fround(0.0) - Math_fround($3 * $4))) + $17) * $2) + Math_fround(0.0));
  $25 = Math_fround($14 + Math_fround(Math_fround($7 * $13) + $6));
  $15 = Math_fround(Math_fround(Math_fround($4 * $25) - Math_fround($13 * $17)) * $2);
  $26 = Math_fround($13 * Math_fround(-0.0));
  $27 = Math_fround($3 + Math_fround(Math_fround($26 + Math_fround(Math_fround($3 * Math_fround(0.0)) + $14)) * $2));
  $16 = Math_fround(Math_fround(Math_fround($5 * $17) - Math_fround($4 * $20)) * $2);
  $30 = Math_fround($4 * Math_fround(-0.0));
  $29 = Math_fround($7 + Math_fround(Math_fround($6 + Math_fround(Math_fround($7 * Math_fround(0.0)) + $30)) * $2));
  $6 = Math_fround(Math_fround(Math_fround($13 * $20) - Math_fround($5 * $25)) * $2);
  $31 = Math_fround($5 * Math_fround(-0.0));
  $3 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($31 + Math_fround($3 * $13)) + Math_fround(0.0)) - $25) * $2) + Math_fround(0.0));
  $17 = Math_fround(Math_fround(Math_fround(Math_fround($26 + Math_fround(Math_fround($7 * $4) + Math_fround(0.0))) - $17) * $2) + Math_fround(0.0));
  $26 = Math_fround(Math_fround($28 * Math_fround(Math_fround($24 * $15) - Math_fround($27 * $16))) + Math_fround(Math_fround($29 * Math_fround(Math_fround($27 * $6) - Math_fround($3 * $15))) + Math_fround($17 * Math_fround(Math_fround($3 * $16) - Math_fround($24 * $6)))));
  $4 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($14 + Math_fround(0.0)) - Math_fround($8 * $13)) + $25) * $2) + Math_fround(0.0));
  $7 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($8 * $5) + Math_fround($30 + Math_fround(0.0))) - $20) * $2) + Math_fround(0.0));
  $14 = Math_fround(Math_fround($24 * $4) - Math_fround($27 * $7));
  $2 = Math_fround($8 + Math_fround(Math_fround(Math_fround($8 * Math_fround(0.0)) + Math_fround($31 + $19)) * $2));
  $19 = Math_fround(Math_fround($27 * $2) - Math_fround($3 * $4));
  $20 = Math_fround(Math_fround($3 * $7) - Math_fround($2 * $24));
  $3 = Math_fround(Math_fround($28 * $14) + Math_fround(Math_fround($29 * $19) + Math_fround($17 * $20)));
  $8 = Math_fround(Math_abs($3)) > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_fround(1.0) / $3) : $3;
  $3 = Math_fround($32 - Math_fround($26 * $8));
  $2 = Math_fround($5 - Math_fround(Math_fround(Math_fround($28 * Math_fround(Math_fround($4 * $16) - Math_fround($7 * $15))) + Math_fround(Math_fround($29 * Math_fround(Math_fround($2 * $15) - Math_fround($4 * $6))) + Math_fround($17 * Math_fround(Math_fround($7 * $6) - Math_fround($2 * $16))))) * $8));
  $4 = Math_fround($13 - Math_fround(Math_fround(Math_fround($6 * $14) + Math_fround(Math_fround($16 * $19) + Math_fround($15 * $20))) * $8));
  $13 = Math_fround(Math_fround(Math_fround($9 * $3) + Math_fround($12 * $2)) - Math_fround($10 * $4));
  $5 = Math_fround(Math_fround(Math_fround(-Math_fround($12 * $4)) - Math_fround($10 * $2)) - Math_fround($11 * $3));
  $7 = Math_fround(Math_fround(Math_fround($9 * $4) + Math_fround($10 * $3)) - Math_fround($11 * $2));
  $2 = Math_fround(Math_fround(Math_fround($11 * $4) + Math_fround($9 * $2)) - Math_fround($12 * $3));
  HEAPF32[$0 + 8 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9 * $13) - Math_fround($5 * $11)) - Math_fround($7 * $10)) + Math_fround($2 * $12)) - $21;
  HEAPF32[$0 + 4 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9 * $2) - Math_fround($5 * $10)) - Math_fround($13 * $12)) + Math_fround($7 * $11)) - $22;
  HEAPF32[$0 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($9 * $7) - Math_fround($5 * $12)) - Math_fround($2 * $11)) + Math_fround($13 * $10)) - $23;
  global$0 = $18 + 16 | 0;
 }
 
 function btRigidBody__computeGyroscopicImpulseImplicit_World_28float_29_20const($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0);
  HEAP32[$0 + 12 >> 2] = 0;
  $3 = HEAPF32[$1 + 456 >> 2];
  $9 = $3 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $3) : Math_fround(0.0);
  $4 = HEAPF32[$1 + 36 >> 2];
  $19 = Math_fround($9 * $4);
  $6 = HEAPF32[$1 + 4 >> 2];
  $3 = HEAPF32[$1 + 460 >> 2];
  $5 = $3 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $3) : Math_fround(0.0);
  $15 = HEAPF32[$1 + 40 >> 2];
  $18 = Math_fround($5 * $15);
  $7 = HEAPF32[$1 + 8 >> 2];
  $3 = HEAPF32[$1 + 464 >> 2];
  $20 = $3 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $3) : Math_fround(0.0);
  $16 = HEAPF32[$1 + 44 >> 2];
  $21 = Math_fround($20 * $16);
  $8 = HEAPF32[$1 + 12 >> 2];
  $17 = Math_fround(Math_fround(Math_fround($19 * $6) + Math_fround($18 * $7)) + Math_fround($21 * $8));
  $3 = HEAPF32[$1 + 388 >> 2];
  $10 = HEAPF32[$1 + 20 >> 2];
  $11 = Math_fround($9 * $10);
  $12 = HEAPF32[$1 + 24 >> 2];
  $22 = Math_fround($5 * $12);
  $13 = HEAPF32[$1 + 28 >> 2];
  $23 = Math_fround($20 * $13);
  $26 = Math_fround(Math_fround(Math_fround($11 * $6) + Math_fround($22 * $7)) + Math_fround($23 * $8));
  $25 = Math_fround($3 * $26);
  $24 = Math_fround($9 * $6);
  $27 = Math_fround($5 * $7);
  $28 = Math_fround($20 * $8);
  $9 = Math_fround(Math_fround(Math_fround($24 * $6) + Math_fround($27 * $7)) + Math_fround($28 * $8));
  $6 = HEAPF32[$1 + 392 >> 2];
  $5 = Math_fround(Math_fround(Math_fround($11 * $10) + Math_fround($22 * $12)) + Math_fround($23 * $13));
  $14 = HEAPF32[$1 + 396 >> 2];
  $20 = Math_fround(Math_fround(Math_fround($11 * $4) + Math_fround($22 * $15)) + Math_fround($23 * $16));
  $23 = Math_fround($14 * $20);
  $7 = Math_fround(Math_fround($25 + Math_fround($6 * $5)) + $23);
  $22 = Math_fround($17 + Math_fround(Math_fround(Math_fround(Math_fround($17 * Math_fround(0.0)) + Math_fround($25 - Math_fround($9 * $6))) + $7) * $2));
  $11 = Math_fround(Math_fround(Math_fround($24 * $10) + Math_fround($27 * $12)) + Math_fround($28 * $13));
  $25 = Math_fround($3 * $17);
  $12 = Math_fround(Math_fround(Math_fround($19 * $10) + Math_fround($18 * $12)) + Math_fround($21 * $13));
  $13 = Math_fround($6 * $12);
  $10 = Math_fround(Math_fround(Math_fround($19 * $4) + Math_fround($18 * $15)) + Math_fround($21 * $16));
  $8 = Math_fround(Math_fround($25 + $13) + Math_fround($14 * $10));
  $13 = Math_fround($11 + Math_fround(Math_fround($8 + Math_fround($13 + Math_fround(Math_fround($11 * Math_fround(0.0)) - Math_fround($5 * $14)))) * $2));
  $29 = Math_fround($6 * $11);
  $19 = Math_fround(Math_fround(Math_fround($24 * $4) + Math_fround($27 * $15)) + Math_fround($28 * $16));
  $24 = Math_fround($14 * $19);
  $4 = Math_fround(Math_fround(Math_fround($3 * $9) + $29) + $24);
  $18 = Math_fround($2 * Math_fround(0.0));
  $15 = Math_fround(Math_fround($7 + Math_fround(Math_fround(Math_fround($14 * $4) - Math_fround($3 * $8)) * $2)) - Math_fround($18 + $7));
  $11 = Math_fround($5 + Math_fround(Math_fround(Math_fround(Math_fround($5 * Math_fround(0.0)) + Math_fround($14 * $11)) - Math_fround($12 * $3)) * $2));
  $16 = Math_fround(Math_fround($4 + Math_fround(Math_fround(Math_fround($6 * $8) - Math_fround($14 * $7)) * $2)) - Math_fround($18 + $4));
  $21 = Math_fround($9 + Math_fround(Math_fround(Math_fround($6 * $17) + Math_fround(Math_fround($9 * Math_fround(0.0)) - Math_fround($26 * $14))) * $2));
  $17 = Math_fround(Math_fround($8 + Math_fround(Math_fround(Math_fround($3 * $7) - Math_fround($6 * $4)) * $2)) - Math_fround($18 + $8));
  $5 = Math_fround($12 + Math_fround(Math_fround(Math_fround(Math_fround($12 * Math_fround(0.0)) + Math_fround(Math_fround($3 * $5) - $29)) - $4) * $2));
  $9 = Math_fround($26 + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($26 * Math_fround(0.0)) + Math_fround($14 * $9)) - $25) - $8) * $2));
  $18 = Math_fround(Math_fround($22 * Math_fround(Math_fround($13 * $15) - Math_fround($11 * $16))) + Math_fround(Math_fround($21 * Math_fround(Math_fround($11 * $17) - Math_fround($5 * $15))) + Math_fround($9 * Math_fround(Math_fround($5 * $16) - Math_fround($13 * $17)))));
  $8 = Math_fround($20 + Math_fround(Math_fround($4 + Math_fround(Math_fround(Math_fround($20 * Math_fround(0.0)) + $24) - Math_fround($10 * $3))) * $2));
  $7 = Math_fround($19 + Math_fround(Math_fround(Math_fround(Math_fround($6 * $10) + Math_fround(Math_fround($19 * Math_fround(0.0)) - $23)) - $7) * $2));
  $12 = Math_fround(Math_fround($13 * $8) - Math_fround($11 * $7));
  $2 = Math_fround($10 + Math_fround(Math_fround(Math_fround($10 * Math_fround(0.0)) + Math_fround(Math_fround($3 * $20) - Math_fround($19 * $6))) * $2));
  $10 = Math_fround(Math_fround($11 * $2) - Math_fround($5 * $8));
  $5 = Math_fround(Math_fround($5 * $7) - Math_fround($13 * $2));
  $4 = Math_fround(Math_fround($22 * $12) + Math_fround(Math_fround($21 * $10) + Math_fround($9 * $5)));
  $4 = Math_fround(Math_abs($4)) > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_fround(1.0) / $4) : $4;
  HEAPF32[$0 + 8 >> 2] = Math_fround($14 - Math_fround($18 * $4)) - $14;
  HEAPF32[$0 + 4 >> 2] = Math_fround($6 - Math_fround(Math_fround(Math_fround($22 * Math_fround(Math_fround($8 * $16) - Math_fround($7 * $15))) + Math_fround(Math_fround($21 * Math_fround(Math_fround($2 * $15) - Math_fround($8 * $17))) + Math_fround($9 * Math_fround(Math_fround($7 * $17) - Math_fround($2 * $16))))) * $4)) - $6;
  HEAPF32[$0 >> 2] = Math_fround($3 - Math_fround(Math_fround(Math_fround($17 * $12) + Math_fround(Math_fround($16 * $10) + Math_fround($15 * $5))) * $4)) - $3;
 }
 
 function btRigidBody__addConstraintRef_28btTypedConstraint__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = HEAP32[$0 + 548 >> 2];
  label$1 : {
   label$2 : {
    if (($4 | 0) < 1) {
     break label$2
    }
    $2 = HEAP32[$0 + 556 >> 2];
    $3 = $4;
    while (1) {
     if (HEAP32[$2 >> 2] != ($1 | 0)) {
      $2 = $2 + 4 | 0;
      $3 = $3 + -1 | 0;
      if ($3) {
       continue
      }
      break label$2;
     }
     break;
    };
    if ($3) {
     break label$1
    }
   }
   label$5 : {
    if (HEAP32[$0 + 552 >> 2] != ($4 | 0)) {
     break label$5
    }
    $5 = $4 ? $4 << 1 : 1;
    if (($4 | 0) >= ($5 | 0)) {
     break label$5
    }
    label$6 : {
     if (!$5) {
      break label$6
     }
     $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2);
     $4 = HEAP32[$0 + 548 >> 2];
    }
    if (($4 | 0) >= 1) {
     $2 = 0;
     $3 = $4;
     while (1) {
      HEAP32[$2 + $6 >> 2] = HEAP32[$2 + HEAP32[$0 + 556 >> 2] >> 2];
      $2 = $2 + 4 | 0;
      $3 = $3 + -1 | 0;
      if ($3) {
       continue
      }
      break;
     };
    }
    $2 = HEAP32[$0 + 556 >> 2];
    if ($2) {
     if (HEAPU8[$0 + 560 | 0]) {
      btAlignedFreeInternal_28void__29($2);
      $4 = HEAP32[$0 + 548 >> 2];
     }
     HEAP32[$0 + 556 >> 2] = 0;
    }
    HEAP32[$0 + 556 >> 2] = $6;
    HEAP32[$0 + 552 >> 2] = $5;
    HEAP8[$0 + 560 | 0] = 1;
   }
   HEAP32[HEAP32[$0 + 556 >> 2] + ($4 << 2) >> 2] = $1;
   HEAP32[$0 + 548 >> 2] = $4 + 1;
   $3 = HEAP32[$1 + 32 >> 2];
   $6 = HEAP32[$1 + 28 >> 2];
   label$12 : {
    if (($6 | 0) == ($0 | 0)) {
     $1 = HEAP32[$0 + 288 >> 2];
     if (($1 | 0) != HEAP32[$0 + 292 >> 2]) {
      break label$12
     }
     $5 = $1 ? $1 << 1 : 1;
     if (($1 | 0) >= ($5 | 0)) {
      break label$12
     }
     label$14 : {
      if (!$5) {
       $6 = 0;
       break label$14;
      }
      $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2);
      $1 = HEAP32[$0 + 288 >> 2];
     }
     if (($1 | 0) >= 1) {
      $2 = 0;
      $4 = $1;
      while (1) {
       HEAP32[$2 + $6 >> 2] = HEAP32[$2 + HEAP32[$0 + 296 >> 2] >> 2];
       $2 = $2 + 4 | 0;
       $4 = $4 + -1 | 0;
       if ($4) {
        continue
       }
       break;
      };
     }
     $2 = HEAP32[$0 + 296 >> 2];
     if ($2) {
      if (HEAPU8[$0 + 300 | 0]) {
       btAlignedFreeInternal_28void__29($2);
       $1 = HEAP32[$0 + 288 >> 2];
      }
      HEAP32[$0 + 296 >> 2] = 0;
     }
     HEAP32[$0 + 296 >> 2] = $6;
     HEAP32[$0 + 292 >> 2] = $5;
     HEAP8[$0 + 300 | 0] = 1;
     break label$12;
    }
    $1 = HEAP32[$3 + 288 >> 2];
    label$20 : {
     if (($1 | 0) != HEAP32[$3 + 292 >> 2]) {
      break label$20
     }
     $5 = $1 ? $1 << 1 : 1;
     if (($1 | 0) >= ($5 | 0)) {
      break label$20
     }
     label$21 : {
      if (!$5) {
       $4 = 0;
       break label$21;
      }
      $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2);
      $1 = HEAP32[$3 + 288 >> 2];
     }
     if (($1 | 0) >= 1) {
      $2 = 0;
      $0 = $1;
      while (1) {
       HEAP32[$2 + $4 >> 2] = HEAP32[$2 + HEAP32[$3 + 296 >> 2] >> 2];
       $2 = $2 + 4 | 0;
       $0 = $0 + -1 | 0;
       if ($0) {
        continue
       }
       break;
      };
     }
     $2 = HEAP32[$3 + 296 >> 2];
     if ($2) {
      if (HEAPU8[$3 + 300 | 0]) {
       btAlignedFreeInternal_28void__29($2);
       $1 = HEAP32[$3 + 288 >> 2];
      }
      HEAP32[$3 + 296 >> 2] = 0;
     }
     HEAP32[$3 + 296 >> 2] = $4;
     HEAP32[$3 + 292 >> 2] = $5;
     HEAP8[$3 + 300 | 0] = 1;
    }
    $0 = $3;
    $3 = $6;
   }
   HEAP32[$0 + 288 >> 2] = $1 + 1;
   HEAP32[$0 + 280 >> 2] = ($1 ^ -1) >>> 31;
   HEAP32[HEAP32[$0 + 296 >> 2] + ($1 << 2) >> 2] = $3;
  }
 }
 
 function btRigidBody__removeConstraintRef_28btTypedConstraint__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $4 = HEAP32[$0 + 548 >> 2];
  label$1 : {
   if (($4 | 0) < 1) {
    break label$1
   }
   $5 = HEAP32[$0 + 556 >> 2];
   $3 = $5;
   while (1) {
    if (HEAP32[$3 >> 2] != ($1 | 0)) {
     $3 = $3 + 4 | 0;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($4 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($2 | 0) >= ($4 | 0)) {
    break label$1
   }
   $2 = 0;
   $3 = $5;
   label$4 : {
    while (1) {
     if (HEAP32[$3 >> 2] != ($1 | 0)) {
      $3 = $3 + 4 | 0;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($4 | 0)) {
       continue
      }
      break label$4;
     }
     break;
    };
    if (($4 | 0) <= ($2 | 0)) {
     break label$4
    }
    $2 = $4 + -1 | 0;
    $4 = $2 << 2;
    HEAP32[$3 >> 2] = HEAP32[$4 + $5 >> 2];
    HEAP32[$0 + 548 >> 2] = $2;
    HEAP32[$4 + HEAP32[$0 + 556 >> 2] >> 2] = $1;
   }
   $5 = HEAP32[$1 + 32 >> 2];
   $4 = HEAP32[$1 + 28 >> 2];
   if (($4 | 0) == ($0 | 0)) {
    $1 = HEAP32[$0 + 288 >> 2];
    label$8 : {
     if (($1 | 0) < 1) {
      break label$8
     }
     $2 = 0;
     $4 = HEAP32[$0 + 296 >> 2];
     $3 = $4;
     while (1) {
      if (HEAP32[$3 >> 2] != ($5 | 0)) {
       $3 = $3 + 4 | 0;
       $2 = $2 + 1 | 0;
       if (($2 | 0) != ($1 | 0)) {
        continue
       }
       break label$8;
      }
      break;
     };
     if (($1 | 0) <= ($2 | 0)) {
      break label$8
     }
     $1 = $1 + -1 | 0;
     $2 = $1 << 2;
     HEAP32[$3 >> 2] = HEAP32[$2 + $4 >> 2];
     HEAP32[$0 + 288 >> 2] = $1;
     HEAP32[$2 + HEAP32[$0 + 296 >> 2] >> 2] = $5;
    }
    HEAP32[$0 + 280 >> 2] = ($1 | 0) > 0;
    return;
   }
   $1 = HEAP32[$5 + 288 >> 2];
   label$11 : {
    if (($1 | 0) < 1) {
     break label$11
    }
    $2 = 0;
    $0 = HEAP32[$5 + 296 >> 2];
    $3 = $0;
    while (1) {
     if (HEAP32[$3 >> 2] != ($4 | 0)) {
      $3 = $3 + 4 | 0;
      $2 = $2 + 1 | 0;
      if (($2 | 0) != ($1 | 0)) {
       continue
      }
      break label$11;
     }
     break;
    };
    if (($1 | 0) <= ($2 | 0)) {
     break label$11
    }
    $1 = $1 + -1 | 0;
    $2 = $1 << 2;
    HEAP32[$3 >> 2] = HEAP32[$2 + $0 >> 2];
    HEAP32[$5 + 288 >> 2] = $1;
    HEAP32[$2 + HEAP32[$5 + 296 >> 2] >> 2] = $4;
   }
   HEAP32[$5 + 280 >> 2] = ($1 | 0) > 0;
  }
 }
 
 function btRigidBody__calculateSerializeBufferSize_28_29_20const($0) {
  $0 = $0 | 0;
  return 496;
 }
 
 function btRigidBody__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  btCollisionObject__serialize_28void__2c_20btSerializer__29_20const($0, $1, $2);
  HEAP32[$1 + 264 >> 2] = HEAP32[$0 + 324 >> 2];
  HEAP32[$1 + 268 >> 2] = HEAP32[$0 + 328 >> 2];
  HEAP32[$1 + 272 >> 2] = HEAP32[$0 + 332 >> 2];
  HEAP32[$1 + 276 >> 2] = HEAP32[$0 + 336 >> 2];
  HEAP32[$1 + 280 >> 2] = HEAP32[$0 + 340 >> 2];
  HEAP32[$1 + 284 >> 2] = HEAP32[$0 + 344 >> 2];
  HEAP32[$1 + 288 >> 2] = HEAP32[$0 + 348 >> 2];
  HEAP32[$1 + 292 >> 2] = HEAP32[$0 + 352 >> 2];
  HEAP32[$1 + 296 >> 2] = HEAP32[$0 + 356 >> 2];
  HEAP32[$1 + 300 >> 2] = HEAP32[$0 + 360 >> 2];
  HEAP32[$1 + 304 >> 2] = HEAP32[$0 + 364 >> 2];
  HEAP32[$1 + 308 >> 2] = HEAP32[$0 + 368 >> 2];
  HEAP32[$1 + 312 >> 2] = HEAP32[$0 + 372 >> 2];
  HEAP32[$1 + 316 >> 2] = HEAP32[$0 + 376 >> 2];
  HEAP32[$1 + 320 >> 2] = HEAP32[$0 + 380 >> 2];
  HEAP32[$1 + 324 >> 2] = HEAP32[$0 + 384 >> 2];
  HEAP32[$1 + 328 >> 2] = HEAP32[$0 + 388 >> 2];
  HEAP32[$1 + 332 >> 2] = HEAP32[$0 + 392 >> 2];
  HEAP32[$1 + 336 >> 2] = HEAP32[$0 + 396 >> 2];
  HEAP32[$1 + 340 >> 2] = HEAP32[$0 + 400 >> 2];
  HEAP32[$1 + 456 >> 2] = HEAP32[$0 + 404 >> 2];
  HEAP32[$1 + 344 >> 2] = HEAP32[$0 + 604 >> 2];
  HEAP32[$1 + 348 >> 2] = HEAP32[$0 + 608 >> 2];
  HEAP32[$1 + 352 >> 2] = HEAP32[$0 + 612 >> 2];
  HEAP32[$1 + 356 >> 2] = HEAP32[$0 + 616 >> 2];
  HEAP32[$1 + 360 >> 2] = HEAP32[$0 + 408 >> 2];
  HEAP32[$1 + 364 >> 2] = HEAP32[$0 + 412 >> 2];
  HEAP32[$1 + 368 >> 2] = HEAP32[$0 + 416 >> 2];
  HEAP32[$1 + 372 >> 2] = HEAP32[$0 + 420 >> 2];
  HEAP32[$1 + 376 >> 2] = HEAP32[$0 + 424 >> 2];
  HEAP32[$1 + 380 >> 2] = HEAP32[$0 + 428 >> 2];
  HEAP32[$1 + 384 >> 2] = HEAP32[$0 + 432 >> 2];
  HEAP32[$1 + 388 >> 2] = HEAP32[$0 + 436 >> 2];
  HEAP32[$1 + 392 >> 2] = HEAP32[$0 + 440 >> 2];
  HEAP32[$1 + 396 >> 2] = HEAP32[$0 + 444 >> 2];
  HEAP32[$1 + 400 >> 2] = HEAP32[$0 + 448 >> 2];
  HEAP32[$1 + 404 >> 2] = HEAP32[$0 + 452 >> 2];
  HEAP32[$1 + 408 >> 2] = HEAP32[$0 + 456 >> 2];
  HEAP32[$1 + 412 >> 2] = HEAP32[$0 + 460 >> 2];
  HEAP32[$1 + 416 >> 2] = HEAP32[$0 + 464 >> 2];
  HEAP32[$1 + 420 >> 2] = HEAP32[$0 + 468 >> 2];
  HEAP32[$1 + 424 >> 2] = HEAP32[$0 + 472 >> 2];
  HEAP32[$1 + 428 >> 2] = HEAP32[$0 + 476 >> 2];
  HEAP32[$1 + 432 >> 2] = HEAP32[$0 + 480 >> 2];
  HEAP32[$1 + 436 >> 2] = HEAP32[$0 + 484 >> 2];
  HEAP32[$1 + 440 >> 2] = HEAP32[$0 + 488 >> 2];
  HEAP32[$1 + 444 >> 2] = HEAP32[$0 + 492 >> 2];
  HEAP32[$1 + 448 >> 2] = HEAP32[$0 + 496 >> 2];
  HEAP32[$1 + 452 >> 2] = HEAP32[$0 + 500 >> 2];
  $2 = HEAP32[$0 + 508 >> 2];
  HEAP32[$1 + 460 >> 2] = HEAP32[$0 + 504 >> 2];
  HEAP32[$1 + 464 >> 2] = $2;
  $2 = HEAP32[$0 + 520 >> 2];
  HEAP32[$1 + 468 >> 2] = HEAP32[$0 + 516 >> 2];
  HEAP32[$1 + 472 >> 2] = $2;
  $2 = HEAP32[$0 + 528 >> 2];
  HEAP32[$1 + 476 >> 2] = HEAP32[$0 + 524 >> 2];
  HEAP32[$1 + 480 >> 2] = $2;
  $2 = HEAP32[$0 + 536 >> 2];
  HEAP32[$1 + 484 >> 2] = HEAP32[$0 + 532 >> 2];
  HEAP32[$1 + 488 >> 2] = $2;
  HEAP32[$1 + 492 >> 2] = HEAPU8[$0 + 512 | 0];
  return 20124;
 }
 
 function btRigidBody__serializeSingleObject_28btSerializer__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2 = ((((wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
  (((((wasm2js_i32$3 = $1, wasm2js_i32$2 = $2), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0, HEAP32[$2 + 8 >> 2], $1) | 0), wasm2js_i32$4 = 1497645650), wasm2js_i32$5 = $0), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
 }
 
 function btRigidBody___btRigidBody_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 20096;
  $1 = HEAP32[$0 + 556 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 560 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 556 >> 2] = 0;
  }
  HEAP32[$0 + 556 >> 2] = 0;
  HEAP32[$0 + 548 >> 2] = 0;
  HEAP32[$0 + 552 >> 2] = 0;
  HEAP8[$0 + 560 | 0] = 1;
  btCollisionObject___btCollisionObject_28_29($0);
  return $0 | 0;
 }
 
 function btRigidBody___btRigidBody_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 20096;
  $1 = HEAP32[$0 + 556 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 560 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 556 >> 2] = 0;
  }
  HEAP32[$0 + 556 >> 2] = 0;
  HEAP32[$0 + 548 >> 2] = 0;
  HEAP32[$0 + 552 >> 2] = 0;
  HEAP8[$0 + 560 | 0] = 1;
  btCollisionObject___btCollisionObject_28_29($0);
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btSequentialImpulseConstraintSolver__btSequentialImpulseConstraintSolver_28_29($0) {
  var $1 = 0;
  HEAP32[$0 >> 2] = 20180;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = $0 + 28 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 + 80 | 0] = 1;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP8[$0 + 100 | 0] = 1;
  $1 = $0 + 68 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP8[$0 + 120 | 0] = 1;
  $1 = $0 + 88 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 116 >> 2] = 0;
  HEAP8[$0 + 140 | 0] = 1;
  $1 = $0 + 108 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 136 >> 2] = 0;
  $1 = $0 + 128 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 160 | 0] = 1;
  HEAP32[$0 + 156 >> 2] = 0;
  $1 = $0 + 148 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 180 | 0] = 1;
  HEAP32[$0 + 176 >> 2] = 0;
  $1 = $0 + 168 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP8[$0 + 208 | 0] = 1;
  HEAP32[$0 + 232 >> 2] = 0;
  HEAP32[$0 + 204 >> 2] = 0;
  $1 = $0 + 196 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 224 >> 2] = 0;
  HEAP32[$0 + 212 >> 2] = 534;
  HEAP32[$0 + 216 >> 2] = 535;
  HEAP32[$0 + 220 >> 2] = 536;
 }
 
 function gResolveSingleConstraintRowGeneric_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
  $6 = HEAPF32[$2 + 100 >> 2];
  $7 = HEAPF32[$2 + 16 >> 2];
  $8 = HEAPF32[$2 + 20 >> 2];
  $9 = HEAPF32[$2 + 24 >> 2];
  $3 = HEAPF32[$2 + 108 >> 2];
  $3 = Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 112 >> 2] - Math_fround($6 * HEAPF32[$2 + 116 >> 2])) - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$0 + 64 >> 2]) + Math_fround($8 * HEAPF32[$0 + 68 >> 2])) + Math_fround($9 * HEAPF32[$0 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 >> 2] * HEAPF32[$0 + 80 >> 2]) + Math_fround(HEAPF32[$2 + 4 >> 2] * HEAPF32[$0 + 84 >> 2])) + Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[$0 + 88 >> 2]))) * $3)) - Math_fround($3 * Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 48 >> 2] * HEAPF32[$1 + 64 >> 2]) + Math_fround(HEAPF32[$2 + 52 >> 2] * HEAPF32[$1 + 68 >> 2])) + Math_fround(HEAPF32[$2 + 56 >> 2] * HEAPF32[$1 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 32 >> 2] * HEAPF32[$1 + 80 >> 2]) + Math_fround(HEAPF32[$2 + 36 >> 2] * HEAPF32[$1 + 84 >> 2])) + Math_fround(HEAPF32[$2 + 40 >> 2] * HEAPF32[$1 + 88 >> 2])))));
  $4 = Math_fround($6 + $3);
  $5 = HEAPF32[$2 + 120 >> 2];
  label$1 : {
   if (!!($4 < $5)) {
    $3 = Math_fround($5 - $6);
    $4 = $5;
    break label$1;
   }
   $5 = HEAPF32[$2 + 124 >> 2];
   if (!($4 > $5)) {
    break label$1
   }
   $3 = Math_fround($5 - $6);
   $4 = $5;
  }
  HEAPF32[$2 + 100 >> 2] = $4;
  if (HEAP32[$0 + 240 >> 2]) {
   HEAPF32[$0 + 64 >> 2] = Math_fround(HEAPF32[$0 + 112 >> 2] * Math_fround($3 * Math_fround($7 * HEAPF32[$0 + 128 >> 2]))) + HEAPF32[$0 + 64 >> 2];
   HEAPF32[$0 + 68 >> 2] = Math_fround(Math_fround($3 * Math_fround($8 * HEAPF32[$0 + 132 >> 2])) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$0 + 68 >> 2];
   HEAPF32[$0 + 72 >> 2] = Math_fround(Math_fround($3 * Math_fround($9 * HEAPF32[$0 + 136 >> 2])) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$0 + 72 >> 2];
   $4 = HEAPF32[$2 + 72 >> 2];
   $6 = HEAPF32[$2 + 68 >> 2];
   HEAPF32[$0 + 80 >> 2] = Math_fround(Math_fround($3 * HEAPF32[$0 + 96 >> 2]) * HEAPF32[$2 + 64 >> 2]) + HEAPF32[$0 + 80 >> 2];
   $5 = HEAPF32[$0 + 104 >> 2];
   HEAPF32[$0 + 84 >> 2] = Math_fround($6 * Math_fround($3 * HEAPF32[$0 + 100 >> 2])) + HEAPF32[$0 + 84 >> 2];
   HEAPF32[$0 + 88 >> 2] = Math_fround($4 * Math_fround($3 * $5)) + HEAPF32[$0 + 88 >> 2];
  }
  if (HEAP32[$1 + 240 >> 2]) {
   $4 = HEAPF32[$2 + 56 >> 2];
   $6 = HEAPF32[$2 + 52 >> 2];
   HEAPF32[$1 + 64 >> 2] = Math_fround(HEAPF32[$1 + 112 >> 2] * Math_fround($3 * Math_fround(HEAPF32[$2 + 48 >> 2] * HEAPF32[$1 + 128 >> 2]))) + HEAPF32[$1 + 64 >> 2];
   HEAPF32[$1 + 68 >> 2] = Math_fround(Math_fround($3 * Math_fround($6 * HEAPF32[$1 + 132 >> 2])) * HEAPF32[$1 + 116 >> 2]) + HEAPF32[$1 + 68 >> 2];
   HEAPF32[$1 + 72 >> 2] = Math_fround(Math_fround($3 * Math_fround($4 * HEAPF32[$1 + 136 >> 2])) * HEAPF32[$1 + 120 >> 2]) + HEAPF32[$1 + 72 >> 2];
   $4 = HEAPF32[$2 + 88 >> 2];
   $6 = HEAPF32[$2 + 84 >> 2];
   HEAPF32[$1 + 80 >> 2] = Math_fround(Math_fround($3 * HEAPF32[$1 + 96 >> 2]) * HEAPF32[$2 + 80 >> 2]) + HEAPF32[$1 + 80 >> 2];
   $5 = HEAPF32[$1 + 104 >> 2];
   HEAPF32[$1 + 84 >> 2] = Math_fround($6 * Math_fround($3 * HEAPF32[$1 + 100 >> 2])) + HEAPF32[$1 + 84 >> 2];
   HEAPF32[$1 + 88 >> 2] = Math_fround($4 * Math_fround($3 * $5)) + HEAPF32[$1 + 88 >> 2];
  }
  return Math_fround($3);
 }
 
 function gResolveSingleConstraintRowLowerLimit_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0;
  $5 = HEAPF32[$2 + 100 >> 2];
  $7 = HEAPF32[$2 + 16 >> 2];
  $8 = HEAPF32[$2 + 20 >> 2];
  $9 = HEAPF32[$2 + 24 >> 2];
  $4 = HEAPF32[$2 + 108 >> 2];
  $4 = Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 112 >> 2] - Math_fround($5 * HEAPF32[$2 + 116 >> 2])) - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$0 + 64 >> 2]) + Math_fround($8 * HEAPF32[$0 + 68 >> 2])) + Math_fround($9 * HEAPF32[$0 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 >> 2] * HEAPF32[$0 + 80 >> 2]) + Math_fround(HEAPF32[$2 + 4 >> 2] * HEAPF32[$0 + 84 >> 2])) + Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[$0 + 88 >> 2]))) * $4)) - Math_fround($4 * Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 48 >> 2] * HEAPF32[$1 + 64 >> 2]) + Math_fround(HEAPF32[$2 + 52 >> 2] * HEAPF32[$1 + 68 >> 2])) + Math_fround(HEAPF32[$2 + 56 >> 2] * HEAPF32[$1 + 72 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 32 >> 2] * HEAPF32[$1 + 80 >> 2]) + Math_fround(HEAPF32[$2 + 36 >> 2] * HEAPF32[$1 + 84 >> 2])) + Math_fround(HEAPF32[$2 + 40 >> 2] * HEAPF32[$1 + 88 >> 2])))));
  $6 = Math_fround($5 + $4);
  $3 = HEAPF32[$2 + 120 >> 2];
  $10 = $6 < $3;
  HEAPF32[$2 + 100 >> 2] = $10 ? $3 : $6;
  $3 = $10 ? Math_fround($3 - $5) : $4;
  if (HEAP32[$0 + 240 >> 2]) {
   HEAPF32[$0 + 64 >> 2] = Math_fround(HEAPF32[$0 + 112 >> 2] * Math_fround($3 * Math_fround($7 * HEAPF32[$0 + 128 >> 2]))) + HEAPF32[$0 + 64 >> 2];
   HEAPF32[$0 + 68 >> 2] = Math_fround(Math_fround($3 * Math_fround($8 * HEAPF32[$0 + 132 >> 2])) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$0 + 68 >> 2];
   HEAPF32[$0 + 72 >> 2] = Math_fround(Math_fround($3 * Math_fround($9 * HEAPF32[$0 + 136 >> 2])) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$0 + 72 >> 2];
   $5 = HEAPF32[$2 + 72 >> 2];
   $4 = HEAPF32[$2 + 68 >> 2];
   HEAPF32[$0 + 80 >> 2] = Math_fround(Math_fround($3 * HEAPF32[$0 + 96 >> 2]) * HEAPF32[$2 + 64 >> 2]) + HEAPF32[$0 + 80 >> 2];
   $6 = HEAPF32[$0 + 104 >> 2];
   HEAPF32[$0 + 84 >> 2] = Math_fround($4 * Math_fround($3 * HEAPF32[$0 + 100 >> 2])) + HEAPF32[$0 + 84 >> 2];
   HEAPF32[$0 + 88 >> 2] = Math_fround($5 * Math_fround($3 * $6)) + HEAPF32[$0 + 88 >> 2];
  }
  if (HEAP32[$1 + 240 >> 2]) {
   $5 = HEAPF32[$2 + 56 >> 2];
   $4 = HEAPF32[$2 + 52 >> 2];
   HEAPF32[$1 + 64 >> 2] = Math_fround(HEAPF32[$1 + 112 >> 2] * Math_fround($3 * Math_fround(HEAPF32[$2 + 48 >> 2] * HEAPF32[$1 + 128 >> 2]))) + HEAPF32[$1 + 64 >> 2];
   HEAPF32[$1 + 68 >> 2] = Math_fround(Math_fround($3 * Math_fround($4 * HEAPF32[$1 + 132 >> 2])) * HEAPF32[$1 + 116 >> 2]) + HEAPF32[$1 + 68 >> 2];
   HEAPF32[$1 + 72 >> 2] = Math_fround(Math_fround($3 * Math_fround($5 * HEAPF32[$1 + 136 >> 2])) * HEAPF32[$1 + 120 >> 2]) + HEAPF32[$1 + 72 >> 2];
   $5 = HEAPF32[$2 + 88 >> 2];
   $4 = HEAPF32[$2 + 84 >> 2];
   HEAPF32[$1 + 80 >> 2] = Math_fround(Math_fround($3 * HEAPF32[$1 + 96 >> 2]) * HEAPF32[$2 + 80 >> 2]) + HEAPF32[$1 + 80 >> 2];
   $6 = HEAPF32[$1 + 104 >> 2];
   HEAPF32[$1 + 84 >> 2] = Math_fround($4 * Math_fround($3 * HEAPF32[$1 + 100 >> 2])) + HEAPF32[$1 + 84 >> 2];
   HEAPF32[$1 + 88 >> 2] = Math_fround($5 * Math_fround($3 * $6)) + HEAPF32[$1 + 88 >> 2];
  }
  return Math_fround($3);
 }
 
 function gResolveSplitPenetrationImpulse_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0;
  $4 = HEAPF32[$2 + 128 >> 2];
  label$1 : {
   if ($4 == Math_fround(0.0)) {
    break label$1
   }
   HEAP32[700] = HEAP32[700] + 1;
   $5 = HEAPF32[$2 + 96 >> 2];
   $3 = Math_fround($4 - Math_fround($5 * HEAPF32[$2 + 116 >> 2]));
   $7 = HEAPF32[$2 + 16 >> 2];
   $8 = HEAPF32[$2 + 20 >> 2];
   $9 = HEAPF32[$2 + 24 >> 2];
   $4 = HEAPF32[$2 + 108 >> 2];
   $4 = Math_fround(Math_fround($3 - Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($7 * HEAPF32[$0 + 144 >> 2]) + Math_fround($8 * HEAPF32[$0 + 148 >> 2])) + Math_fround($9 * HEAPF32[$0 + 152 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 >> 2] * HEAPF32[$0 + 160 >> 2]) + Math_fround(HEAPF32[$2 + 4 >> 2] * HEAPF32[$0 + 164 >> 2])) + Math_fround(HEAPF32[$2 + 8 >> 2] * HEAPF32[$0 + 168 >> 2]))) * $4)) - Math_fround($4 * Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 48 >> 2] * HEAPF32[$1 + 144 >> 2]) + Math_fround(HEAPF32[$2 + 52 >> 2] * HEAPF32[$1 + 148 >> 2])) + Math_fround(HEAPF32[$2 + 56 >> 2] * HEAPF32[$1 + 152 >> 2])) + Math_fround(Math_fround(Math_fround(HEAPF32[$2 + 32 >> 2] * HEAPF32[$1 + 160 >> 2]) + Math_fround(HEAPF32[$2 + 36 >> 2] * HEAPF32[$1 + 164 >> 2])) + Math_fround(HEAPF32[$2 + 40 >> 2] * HEAPF32[$1 + 168 >> 2])))));
   $6 = Math_fround($5 + $4);
   $3 = HEAPF32[$2 + 120 >> 2];
   $10 = $6 < $3;
   HEAPF32[$2 + 96 >> 2] = $10 ? $3 : $6;
   $3 = $10 ? Math_fround($3 - $5) : $4;
   if (HEAP32[$0 + 240 >> 2]) {
    HEAPF32[$0 + 144 >> 2] = Math_fround(HEAPF32[$0 + 112 >> 2] * Math_fround($3 * Math_fround($7 * HEAPF32[$0 + 128 >> 2]))) + HEAPF32[$0 + 144 >> 2];
    HEAPF32[$0 + 148 >> 2] = Math_fround(Math_fround($3 * Math_fround($8 * HEAPF32[$0 + 132 >> 2])) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$0 + 148 >> 2];
    HEAPF32[$0 + 152 >> 2] = Math_fround(Math_fround($3 * Math_fround($9 * HEAPF32[$0 + 136 >> 2])) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$0 + 152 >> 2];
    $5 = HEAPF32[$2 + 72 >> 2];
    $4 = HEAPF32[$2 + 68 >> 2];
    HEAPF32[$0 + 160 >> 2] = Math_fround(Math_fround($3 * HEAPF32[$0 + 96 >> 2]) * HEAPF32[$2 + 64 >> 2]) + HEAPF32[$0 + 160 >> 2];
    $6 = HEAPF32[$0 + 104 >> 2];
    HEAPF32[$0 + 164 >> 2] = Math_fround($4 * Math_fround($3 * HEAPF32[$0 + 100 >> 2])) + HEAPF32[$0 + 164 >> 2];
    HEAPF32[$0 + 168 >> 2] = Math_fround($5 * Math_fround($3 * $6)) + HEAPF32[$0 + 168 >> 2];
   }
   if (!HEAP32[$1 + 240 >> 2]) {
    break label$1
   }
   $5 = HEAPF32[$2 + 56 >> 2];
   $4 = HEAPF32[$2 + 52 >> 2];
   HEAPF32[$1 + 144 >> 2] = Math_fround(HEAPF32[$1 + 112 >> 2] * Math_fround($3 * Math_fround(HEAPF32[$2 + 48 >> 2] * HEAPF32[$1 + 128 >> 2]))) + HEAPF32[$1 + 144 >> 2];
   HEAPF32[$1 + 148 >> 2] = Math_fround(Math_fround($3 * Math_fround($4 * HEAPF32[$1 + 132 >> 2])) * HEAPF32[$1 + 116 >> 2]) + HEAPF32[$1 + 148 >> 2];
   HEAPF32[$1 + 152 >> 2] = Math_fround(Math_fround($3 * Math_fround($5 * HEAPF32[$1 + 136 >> 2])) * HEAPF32[$1 + 120 >> 2]) + HEAPF32[$1 + 152 >> 2];
   $5 = HEAPF32[$2 + 88 >> 2];
   $4 = HEAPF32[$2 + 84 >> 2];
   HEAPF32[$1 + 160 >> 2] = Math_fround(Math_fround($3 * HEAPF32[$1 + 96 >> 2]) * HEAPF32[$2 + 80 >> 2]) + HEAPF32[$1 + 160 >> 2];
   $6 = HEAPF32[$1 + 104 >> 2];
   HEAPF32[$1 + 164 >> 2] = Math_fround($4 * Math_fround($3 * HEAPF32[$1 + 100 >> 2])) + HEAPF32[$1 + 164 >> 2];
   HEAPF32[$1 + 168 >> 2] = Math_fround($5 * Math_fround($3 * $6)) + HEAPF32[$1 + 168 >> 2];
  }
  return Math_fround($3);
 }
 
 function btSequentialImpulseConstraintSolver___btSequentialImpulseConstraintSolver_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 20180;
  $1 = HEAP32[$0 + 204 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 208 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 204 >> 2] = 0;
  }
  HEAP32[$0 + 204 >> 2] = 0;
  HEAP32[$0 + 196 >> 2] = 0;
  HEAP32[$0 + 200 >> 2] = 0;
  HEAP8[$0 + 208 | 0] = 1;
  $1 = HEAP32[$0 + 176 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 180 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 176 >> 2] = 0;
  }
  HEAP32[$0 + 176 >> 2] = 0;
  HEAP32[$0 + 168 >> 2] = 0;
  HEAP32[$0 + 172 >> 2] = 0;
  HEAP8[$0 + 180 | 0] = 1;
  $1 = HEAP32[$0 + 156 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 160 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 156 >> 2] = 0;
  }
  HEAP32[$0 + 156 >> 2] = 0;
  HEAP32[$0 + 148 >> 2] = 0;
  HEAP32[$0 + 152 >> 2] = 0;
  HEAP8[$0 + 160 | 0] = 1;
  $1 = HEAP32[$0 + 136 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 140 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 136 >> 2] = 0;
  }
  HEAP32[$0 + 136 >> 2] = 0;
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP32[$0 + 132 >> 2] = 0;
  HEAP8[$0 + 140 | 0] = 1;
  $1 = HEAP32[$0 + 116 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 120 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 116 >> 2] = 0;
  }
  HEAP32[$0 + 116 >> 2] = 0;
  HEAP32[$0 + 108 >> 2] = 0;
  HEAP32[$0 + 112 >> 2] = 0;
  HEAP8[$0 + 120 | 0] = 1;
  $1 = HEAP32[$0 + 96 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 100 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 96 >> 2] = 0;
  }
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  HEAP8[$0 + 100 | 0] = 1;
  $1 = HEAP32[$0 + 76 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 80 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 76 >> 2] = 0;
  }
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP8[$0 + 80 | 0] = 1;
  $1 = HEAP32[$0 + 56 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 60 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = HEAP32[$0 + 36 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 40 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  $1 = HEAP32[$0 + 16 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 20 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  return $0 | 0;
 }
 
 function btSequentialImpulseConstraintSolver___btSequentialImpulseConstraintSolver_28_29_1($0) {
  $0 = $0 | 0;
  btAlignedFreeInternal_28void__29(btSequentialImpulseConstraintSolver___btSequentialImpulseConstraintSolver_28_29($0));
 }
 
 function btSequentialImpulseConstraintSolver__initSolverBody_28btSolverBody__2c_20btCollisionObject__2c_20float_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
  if ($1) {
   $1 = $1 & HEAP32[$1 + 252 >> 2] << 30 >> 31
  } else {
   $1 = 0
  }
  HEAP32[$0 + 64 >> 2] = 0;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 144 >> 2] = 0;
  HEAP32[$0 + 148 >> 2] = 0;
  $3 = $0 + 88 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $0 + 80 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $0 + 72 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $0 + 152 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $0 + 160 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $0 + 168 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  label$3 : {
   if ($1) {
    $3 = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 >> 2] = HEAP32[$1 + 4 >> 2];
    HEAP32[$0 + 4 >> 2] = $3;
    $4 = $1 + 12 | 0;
    $6 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    $3 = $0 + 8 | 0;
    HEAP32[$3 >> 2] = $6;
    HEAP32[$3 + 4 >> 2] = $5;
    $4 = $1 + 28 | 0;
    $6 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = $0 + 24 | 0;
    HEAP32[$5 >> 2] = $6;
    HEAP32[$5 + 4 >> 2] = $3;
    $4 = $1 + 20 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$0 + 16 >> 2] = $3;
    HEAP32[$0 + 20 >> 2] = $5;
    $4 = $1 + 44 | 0;
    $6 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = $0 + 40 | 0;
    HEAP32[$5 >> 2] = $6;
    HEAP32[$5 + 4 >> 2] = $3;
    $4 = $1 + 36 | 0;
    $3 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    HEAP32[$0 + 32 >> 2] = $3;
    HEAP32[$0 + 36 >> 2] = $5;
    $4 = $1 + 52 | 0;
    $5 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    HEAP32[$0 + 48 >> 2] = $5;
    HEAP32[$0 + 52 >> 2] = $3;
    $4 = $1 + 60 | 0;
    $6 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    $3 = $0 + 56 | 0;
    HEAP32[$3 >> 2] = $6;
    HEAP32[$3 + 4 >> 2] = $5;
    $8 = HEAPF32[$1 + 412 >> 2];
    $6 = $1 + 416 | 0;
    $9 = HEAPF32[$6 >> 2];
    $10 = HEAPF32[$1 + 408 >> 2];
    $7 = HEAPF32[$1 + 404 >> 2];
    HEAP32[$0 + 140 >> 2] = 0;
    HEAPF32[$0 + 136 >> 2] = $7 * $9;
    HEAPF32[$0 + 132 >> 2] = $7 * $8;
    HEAPF32[$0 + 128 >> 2] = $7 * $10;
    HEAP32[$0 + 240 >> 2] = $1;
    $4 = $1 + 612 | 0;
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = $0 + 104 | 0;
    HEAP32[$5 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$5 + 4 >> 2] = $3;
    $5 = HEAP32[$1 + 608 >> 2];
    HEAP32[$0 + 96 >> 2] = HEAP32[$1 + 604 >> 2];
    HEAP32[$0 + 100 >> 2] = $5;
    $4 = $6;
    $6 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = $0 + 120 | 0;
    HEAP32[$5 >> 2] = $6;
    HEAP32[$5 + 4 >> 2] = $3;
    $5 = HEAP32[$1 + 412 >> 2];
    HEAP32[$0 + 112 >> 2] = HEAP32[$1 + 408 >> 2];
    HEAP32[$0 + 116 >> 2] = $5;
    $4 = $1 + 380 | 0;
    $6 = HEAP32[$4 >> 2];
    $3 = HEAP32[$4 + 4 >> 2];
    $5 = $0 + 184 | 0;
    HEAP32[$5 >> 2] = $6;
    HEAP32[$5 + 4 >> 2] = $3;
    $5 = HEAP32[$1 + 376 >> 2];
    HEAP32[$0 + 176 >> 2] = HEAP32[$1 + 372 >> 2];
    HEAP32[$0 + 180 >> 2] = $5;
    $3 = HEAP32[$1 + 392 >> 2];
    HEAP32[$0 + 192 >> 2] = HEAP32[$1 + 388 >> 2];
    HEAP32[$0 + 196 >> 2] = $3;
    $4 = $1 + 396 | 0;
    $6 = HEAP32[$4 >> 2];
    $5 = HEAP32[$4 + 4 >> 2];
    $3 = $0 + 200 | 0;
    HEAP32[$3 >> 2] = $6;
    HEAP32[$3 + 4 >> 2] = $5;
    $8 = HEAPF32[$1 + 476 >> 2];
    $9 = HEAPF32[$1 + 480 >> 2];
    $10 = HEAPF32[$1 + 472 >> 2];
    $7 = HEAPF32[$1 + 404 >> 2];
    HEAP32[$0 + 220 >> 2] = 0;
    HEAPF32[$0 + 216 >> 2] = Math_fround($7 * $9) * $2;
    HEAPF32[$0 + 212 >> 2] = Math_fround($7 * $8) * $2;
    HEAPF32[$0 + 208 >> 2] = Math_fround($7 * $10) * $2;
    $10 = HEAPF32[$1 + 340 >> 2];
    $11 = HEAPF32[$1 + 356 >> 2];
    $12 = HEAPF32[$1 + 328 >> 2];
    $13 = HEAPF32[$1 + 344 >> 2];
    $14 = HEAPF32[$1 + 360 >> 2];
    $15 = HEAPF32[$1 + 324 >> 2];
    $7 = HEAPF32[$1 + 488 >> 2];
    $8 = HEAPF32[$1 + 492 >> 2];
    $9 = HEAPF32[$1 + 496 >> 2];
    HEAPF32[$0 + 232 >> 2] = Math_fround(Math_fround(Math_fround($7 * HEAPF32[$1 + 332 >> 2]) + Math_fround($8 * HEAPF32[$1 + 348 >> 2])) + Math_fround($9 * HEAPF32[$1 + 364 >> 2])) * $2;
    HEAPF32[$0 + 228 >> 2] = Math_fround(Math_fround(Math_fround($7 * $12) + Math_fround($8 * $13)) + Math_fround($9 * $14)) * $2;
    HEAPF32[$0 + 224 >> 2] = Math_fround(Math_fround(Math_fround($15 * $7) + Math_fround($10 * $8)) + Math_fround($11 * $9)) * $2;
    break label$3;
   }
   HEAP32[$0 + 4 >> 2] = 0;
   HEAP32[$0 + 8 >> 2] = 0;
   HEAP32[$0 >> 2] = 1065353216;
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP32[$0 + 36 >> 2] = 0;
   HEAP32[$0 + 240 >> 2] = 0;
   HEAP32[$0 + 128 >> 2] = 0;
   HEAP32[$0 + 132 >> 2] = 0;
   HEAP32[$0 + 112 >> 2] = 1065353216;
   HEAP32[$0 + 116 >> 2] = 1065353216;
   HEAP32[$0 + 96 >> 2] = 1065353216;
   HEAP32[$0 + 100 >> 2] = 1065353216;
   HEAP32[$0 + 176 >> 2] = 0;
   HEAP32[$0 + 180 >> 2] = 0;
   $3 = $0 + 12 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $0 + 24 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$0 + 20 >> 2] = 1065353216;
   $3 = $0 + 44 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$0 + 40 >> 2] = 1065353216;
   $3 = $0 + 52 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$0 + 60 >> 2] = 0;
   $3 = $0 + 136 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $0 + 120 | 0;
   HEAP32[$3 >> 2] = 1065353216;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $0 + 104 | 0;
   HEAP32[$3 >> 2] = 1065353216;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$0 + 232 >> 2] = 0;
   $3 = $0 + 224 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $0 + 216 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $0 + 208 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $0 + 200 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $0 + 192 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $0 + 184 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
  }
  HEAP32[$0 + 236 >> 2] = 0;
 }
 
 function btSequentialImpulseConstraintSolver__setupFrictionConstraint_28btSolverConstraint__2c_20btVector3_20const__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  var $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = Math_fround(0), $33 = 0, $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = 0, $39 = 0, $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0);
  HEAP32[$1 + 148 >> 2] = $4;
  HEAP32[$1 + 144 >> 2] = $3;
  HEAP32[$1 + 96 >> 2] = 0;
  HEAP32[$1 + 100 >> 2] = 0;
  $40 = HEAPF32[$5 + 84 >> 2];
  $38 = HEAP32[$5 + 84 >> 2];
  HEAP32[$1 + 104 >> 2] = $38;
  $33 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[($33 + Math_imul($4, 244) | 0) + 240 >> 2];
  $13 = HEAP32[(Math_imul($3, 244) + $33 | 0) + 240 >> 2];
  HEAP32[$1 + 132 >> 2] = 0;
  $31 = $1 + 16 | 0;
  label$1 : {
   if ($13) {
    $12 = HEAP32[$2 + 4 >> 2];
    HEAP32[$31 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$31 + 4 >> 2] = $12;
    $39 = $2 + 8 | 0;
    $12 = $31 + 8 | 0;
    $31 = HEAP32[$39 + 4 >> 2];
    HEAP32[$12 >> 2] = HEAP32[$39 >> 2];
    HEAP32[$12 + 4 >> 2] = $31;
    $19 = HEAPF32[$6 + 8 >> 2];
    $16 = HEAPF32[$6 >> 2];
    $20 = HEAPF32[$6 + 4 >> 2];
    HEAP32[$1 + 12 >> 2] = 0;
    $24 = HEAPF32[$1 + 20 >> 2];
    $25 = HEAPF32[$1 + 16 >> 2];
    $26 = Math_fround(Math_fround($16 * $24) - Math_fround($20 * $25));
    HEAPF32[$1 + 8 >> 2] = $26;
    $27 = HEAPF32[$1 + 24 >> 2];
    $16 = Math_fround(Math_fround($19 * $25) - Math_fround($16 * $27));
    HEAPF32[$1 + 4 >> 2] = $16;
    $19 = Math_fround(Math_fround($20 * $27) - Math_fround($19 * $24));
    HEAPF32[$1 >> 2] = $19;
    $20 = HEAPF32[$13 + 612 >> 2];
    $17 = HEAPF32[$13 + 364 >> 2];
    $18 = HEAPF32[$13 + 356 >> 2];
    $14 = HEAPF32[$13 + 360 >> 2];
    $15 = HEAPF32[$13 + 608 >> 2];
    $29 = HEAPF32[$13 + 348 >> 2];
    $30 = HEAPF32[$13 + 340 >> 2];
    $21 = HEAPF32[$13 + 344 >> 2];
    $22 = HEAPF32[$13 + 332 >> 2];
    $23 = HEAPF32[$13 + 328 >> 2];
    $28 = HEAPF32[$13 + 604 >> 2];
    $32 = HEAPF32[$13 + 324 >> 2];
    HEAP32[$1 + 76 >> 2] = 0;
    $22 = Math_fround($28 * Math_fround(Math_fround(Math_fround($19 * $32) + Math_fround($16 * $23)) + Math_fround($26 * $22)));
    HEAPF32[$1 + 64 >> 2] = $22;
    $29 = Math_fround($15 * Math_fround(Math_fround(Math_fround($19 * $30) + Math_fround($16 * $21)) + Math_fround($26 * $29)));
    HEAPF32[$1 + 68 >> 2] = $29;
    $30 = Math_fround($20 * Math_fround(Math_fround(Math_fround($19 * $18) + Math_fround($16 * $14)) + Math_fround($26 * $17)));
    HEAPF32[$1 + 72 >> 2] = $30;
    break label$1;
   }
   HEAP32[$1 + 64 >> 2] = 0;
   HEAP32[$1 + 68 >> 2] = 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   $12 = $1 + 72 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   $12 = $1 + 8 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   $12 = $31;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   $12 = $1 + 24 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
  }
  label$3 : {
   if ($0) {
    $17 = HEAPF32[$2 >> 2];
    $18 = HEAPF32[$2 + 4 >> 2];
    $14 = HEAPF32[$2 + 8 >> 2];
    HEAP32[$1 + 60 >> 2] = 0;
    $32 = Math_fround(-$14);
    HEAPF32[$1 + 56 >> 2] = $32;
    $36 = Math_fround(-$18);
    HEAPF32[$1 + 52 >> 2] = $36;
    $37 = Math_fround(-$17);
    HEAPF32[$1 + 48 >> 2] = $37;
    $15 = HEAPF32[$7 + 8 >> 2];
    $21 = HEAPF32[$7 + 4 >> 2];
    $23 = HEAPF32[$7 >> 2];
    HEAP32[$1 + 44 >> 2] = 0;
    $20 = Math_fround(Math_fround($21 * $17) - Math_fround($23 * $18));
    HEAPF32[$1 + 40 >> 2] = $20;
    $17 = Math_fround(Math_fround($23 * $14) - Math_fround($15 * $17));
    HEAPF32[$1 + 36 >> 2] = $17;
    $18 = Math_fround(Math_fround($15 * $18) - Math_fround($21 * $14));
    HEAPF32[$1 + 32 >> 2] = $18;
    $14 = HEAPF32[$0 + 332 >> 2];
    $15 = HEAPF32[$0 + 328 >> 2];
    $23 = HEAPF32[$0 + 608 >> 2];
    $28 = HEAPF32[$0 + 348 >> 2];
    $34 = HEAPF32[$0 + 340 >> 2];
    $35 = HEAPF32[$0 + 344 >> 2];
    $21 = HEAPF32[$0 + 612 >> 2];
    $41 = HEAPF32[$0 + 364 >> 2];
    $42 = HEAPF32[$0 + 356 >> 2];
    $43 = HEAPF32[$0 + 360 >> 2];
    $44 = HEAPF32[$0 + 604 >> 2];
    $45 = HEAPF32[$0 + 324 >> 2];
    HEAP32[$1 + 92 >> 2] = 0;
    $21 = Math_fround($21 * Math_fround(Math_fround(Math_fround($18 * $42) + Math_fround($17 * $43)) + Math_fround($20 * $41)));
    HEAPF32[$1 + 88 >> 2] = $21;
    $23 = Math_fround($23 * Math_fround(Math_fround(Math_fround($18 * $34) + Math_fround($17 * $35)) + Math_fround($20 * $28)));
    HEAPF32[$1 + 84 >> 2] = $23;
    $28 = Math_fround($44 * Math_fround(Math_fround(Math_fround($18 * $45) + Math_fround($17 * $15)) + Math_fround($20 * $14)));
    HEAPF32[$1 + 80 >> 2] = $28;
    break label$3;
   }
   HEAP32[$1 + 80 >> 2] = 0;
   HEAP32[$1 + 84 >> 2] = 0;
   HEAP32[$1 + 32 >> 2] = 0;
   HEAP32[$1 + 36 >> 2] = 0;
   $12 = $1 + 88 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   $12 = $1 + 40 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   $12 = $1 + 48 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   $12 = $1 + 56 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   $20 = Math_fround(0.0);
   $17 = Math_fround(0.0);
   $18 = Math_fround(0.0);
   $32 = Math_fround(0.0);
   $21 = Math_fround(0.0);
   $23 = Math_fround(0.0);
   $28 = Math_fround(0.0);
  }
  $12 = $1;
  if ($13) {
   $15 = HEAPF32[$6 + 8 >> 2];
   $34 = HEAPF32[$6 + 4 >> 2];
   $35 = HEAPF32[$6 >> 2];
   $15 = Math_fround(HEAPF32[$13 + 404 >> 2] + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($29 * $15) - Math_fround($30 * $34)) * HEAPF32[$2 >> 2]) + Math_fround(Math_fround(Math_fround($30 * $35) - Math_fround($15 * $22)) * HEAPF32[$2 + 4 >> 2])) + Math_fround(Math_fround(Math_fround($34 * $22) - Math_fround($29 * $35)) * HEAPF32[$2 + 8 >> 2])));
  } else {
   $15 = Math_fround(0.0)
  }
  if ($0) {
   $14 = HEAPF32[$7 + 4 >> 2];
   $22 = HEAPF32[$7 + 8 >> 2];
   $29 = Math_fround(Math_fround(Math_fround($14 * $21) - Math_fround($22 * $23)) * HEAPF32[$2 >> 2]);
   $30 = Math_fround($22 * $28);
   $22 = HEAPF32[$7 >> 2];
   $14 = Math_fround(HEAPF32[$0 + 404 >> 2] + Math_fround(Math_fround($29 + Math_fround(Math_fround($30 - Math_fround($22 * $21)) * HEAPF32[$2 + 4 >> 2])) + Math_fround(Math_fround(Math_fround($22 * $23) - Math_fround($14 * $28)) * HEAPF32[$2 + 8 >> 2])));
  } else {
   $14 = Math_fround(0.0)
  }
  $14 = Math_fround($8 / Math_fround($15 + $14));
  HEAPF32[$12 + 108 >> 2] = $14;
  label$7 : {
   if (!$13) {
    $24 = Math_fround(Math_fround(Math_fround($25 * Math_fround(0.0)) + Math_fround($24 * Math_fround(0.0))) + Math_fround($27 * Math_fround(0.0)));
    $25 = Math_fround(0.0);
    $27 = Math_fround(0.0);
    $15 = Math_fround(0.0);
    break label$7;
   }
   $13 = Math_imul($3, 244) + $33 | 0;
   $24 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$13 + 176 >> 2] + HEAPF32[$13 + 208 >> 2]) * $25) + Math_fround(Math_fround(HEAPF32[$13 + 180 >> 2] + HEAPF32[$13 + 212 >> 2]) * $24)) + Math_fround(Math_fround(HEAPF32[$13 + 184 >> 2] + HEAPF32[$13 + 216 >> 2]) * $27));
   $27 = HEAPF32[$13 + 200 >> 2];
   $25 = HEAPF32[$13 + 196 >> 2];
   $15 = HEAPF32[$13 + 192 >> 2];
  }
  $26 = Math_fround($24 + Math_fround(Math_fround(Math_fround($15 * $19) + Math_fround($25 * $16)) + Math_fround($27 * $26)));
  label$9 : {
   if (!$0) {
    $19 = Math_fround(Math_fround(Math_fround($37 * Math_fround(0.0)) + Math_fround($36 * Math_fround(0.0))) + Math_fround($32 * Math_fround(0.0)));
    $24 = Math_fround(0.0);
    $25 = Math_fround(0.0);
    $16 = Math_fround(0.0);
    break label$9;
   }
   $0 = Math_imul($4, 244) + $33 | 0;
   $19 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 176 >> 2] + HEAPF32[$0 + 208 >> 2]) * $37) + Math_fround(Math_fround(HEAPF32[$0 + 180 >> 2] + HEAPF32[$0 + 212 >> 2]) * $36)) + Math_fround(Math_fround(HEAPF32[$0 + 184 >> 2] + HEAPF32[$0 + 216 >> 2]) * $32));
   $25 = HEAPF32[$0 + 192 >> 2];
   $24 = HEAPF32[$0 + 196 >> 2];
   $16 = HEAPF32[$0 + 200 >> 2];
  }
  $27 = $40;
  $16 = Math_fround($14 * Math_fround($10 - Math_fround($26 + Math_fround($19 + Math_fround(Math_fround(Math_fround($25 * $18) + Math_fround($24 * $17)) + Math_fround($16 * $20))))));
  $26 = Math_fround(0.0);
  if (HEAPU8[$5 + 120 | 0] & 16) {
   $26 = Math_fround($14 * Math_fround(Math_fround(-Math_fround(HEAPF32[$9 + 44 >> 2] * Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$5 + 48 >> 2] - HEAPF32[$5 + 32 >> 2]) * HEAPF32[$2 >> 2]) + Math_fround(Math_fround(HEAPF32[$5 + 52 >> 2] - HEAPF32[$5 + 36 >> 2]) * HEAPF32[$2 + 4 >> 2])) + Math_fround(Math_fround(HEAPF32[$5 + 56 >> 2] - HEAPF32[$5 + 40 >> 2]) * HEAPF32[$2 + 8 >> 2])))) / HEAPF32[$9 + 12 >> 2]))
  }
  HEAP32[$1 + 128 >> 2] = 0;
  HEAP32[$1 + 124 >> 2] = $38;
  HEAPF32[$1 + 116 >> 2] = $11;
  HEAPF32[$1 + 112 >> 2] = $16 + $26;
  HEAPF32[$1 + 120 >> 2] = -$27;
 }
 
 function btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $13 = HEAP32[$0 + 68 >> 2];
  $12 = $13;
  label$1 : {
   if (HEAP32[$0 + 72 >> 2] != ($12 | 0)) {
    break label$1
   }
   $12 = $13;
   $14 = $12 ? $12 << 1 : 1;
   if (($12 | 0) >= ($14 | 0)) {
    break label$1
   }
   if ($14) {
    $16 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($14, 152));
    $12 = HEAP32[$0 + 68 >> 2];
   } else {
    $12 = $13
   }
   $15 = $12;
   if (($15 | 0) >= 1) {
    $12 = 0;
    while (1) {
     memcpy($12 + $16 | 0, $12 + HEAP32[$0 + 76 >> 2] | 0, 152);
     $12 = $12 + 152 | 0;
     $15 = $15 + -1 | 0;
     if ($15) {
      continue
     }
     break;
    };
   }
   $12 = HEAP32[$0 + 76 >> 2];
   if ($12) {
    if (HEAPU8[$0 + 80 | 0]) {
     btAlignedFreeInternal_28void__29($12)
    }
    HEAP32[$0 + 76 >> 2] = 0;
   }
   HEAP32[$0 + 76 >> 2] = $16;
   HEAP32[$0 + 72 >> 2] = $14;
   HEAP8[$0 + 80 | 0] = 1;
   $12 = HEAP32[$0 + 68 >> 2];
  }
  HEAP32[$0 + 68 >> 2] = $12 + 1;
  $12 = HEAP32[$0 + 76 >> 2] + Math_imul($13, 152) | 0;
  HEAP32[$12 + 140 >> 2] = $4;
  btSequentialImpulseConstraintSolver__setupFrictionConstraint_28btSolverConstraint__2c_20btVector3_20const__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $12, $1, $2, $3, $5, $6, $7, $8, $9, $10, $11);
 }
 
 function btSequentialImpulseConstraintSolver__setupTorsionalFrictionConstraint_28btSolverConstraint__2c_20btVector3_20const__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0);
  HEAP32[$1 + 48 >> 2] = -2147483648;
  HEAP32[$1 + 52 >> 2] = -2147483648;
  HEAP32[$1 + 16 >> 2] = 0;
  HEAP32[$1 + 20 >> 2] = 0;
  $6 = $1 + 56 | 0;
  HEAP32[$6 >> 2] = -2147483648;
  HEAP32[$6 + 4 >> 2] = 0;
  $6 = $1 + 24 | 0;
  HEAP32[$6 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAPF32[$1 + 104 >> 2] = $5;
  HEAP32[$1 + 96 >> 2] = 0;
  HEAP32[$1 + 100 >> 2] = 0;
  $15 = HEAP32[$0 + 16 >> 2];
  $0 = HEAP32[($15 + Math_imul($3, 244) | 0) + 240 >> 2];
  $6 = HEAP32[(Math_imul($4, 244) + $15 | 0) + 240 >> 2];
  HEAP32[$1 + 132 >> 2] = 0;
  HEAP32[$1 + 148 >> 2] = $4;
  HEAP32[$1 + 144 >> 2] = $3;
  $9 = HEAPF32[$2 >> 2];
  $10 = HEAPF32[$2 + 4 >> 2];
  $11 = HEAPF32[$2 + 8 >> 2];
  HEAP32[$1 + 12 >> 2] = 0;
  $12 = Math_fround(-$11);
  HEAPF32[$1 + 8 >> 2] = $12;
  $7 = Math_fround(-$10);
  HEAPF32[$1 + 4 >> 2] = $7;
  $8 = Math_fround(-$9);
  HEAPF32[$1 >> 2] = $8;
  $20 = $1;
  if ($0) {
   $21 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 356 >> 2] * $8) + Math_fround(HEAPF32[$0 + 360 >> 2] * $7)) + Math_fround(HEAPF32[$0 + 364 >> 2] * $12)) * HEAPF32[$0 + 612 >> 2])), wasm2js_scratch_load_i32(0));
   $22 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 340 >> 2] * $8) + Math_fround(HEAPF32[$0 + 344 >> 2] * $7)) + Math_fround(HEAPF32[$0 + 348 >> 2] * $12)) * HEAPF32[$0 + 608 >> 2])), wasm2js_scratch_load_i32(0));
   $18 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 324 >> 2] * $8) + Math_fround(HEAPF32[$0 + 328 >> 2] * $7)) + Math_fround(HEAPF32[$0 + 332 >> 2] * $12)) * HEAPF32[$0 + 604 >> 2])), wasm2js_scratch_load_i32(0));
  } else {
   $18 = 0
  }
  HEAP32[$20 + 64 >> 2] = $18;
  HEAP32[$1 + 76 >> 2] = 0;
  HEAP32[$1 + 72 >> 2] = $21;
  HEAP32[$1 + 68 >> 2] = $22;
  $9 = HEAPF32[$2 >> 2];
  $10 = HEAPF32[$2 + 4 >> 2];
  $11 = HEAPF32[$2 + 8 >> 2];
  HEAP32[$1 + 44 >> 2] = HEAP32[$2 + 12 >> 2];
  HEAPF32[$1 + 40 >> 2] = $11;
  HEAPF32[$1 + 36 >> 2] = $10;
  HEAPF32[$1 + 32 >> 2] = $9;
  $2 = 0;
  if ($6) {
   $23 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround($9 * HEAPF32[$6 + 356 >> 2]) + Math_fround($10 * HEAPF32[$6 + 360 >> 2])) + Math_fround($11 * HEAPF32[$6 + 364 >> 2])) * HEAPF32[$6 + 612 >> 2])), wasm2js_scratch_load_i32(0));
   $24 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround($9 * HEAPF32[$6 + 324 >> 2]) + Math_fround($10 * HEAPF32[$6 + 328 >> 2])) + Math_fround($11 * HEAPF32[$6 + 332 >> 2])) * HEAPF32[$6 + 604 >> 2])), wasm2js_scratch_load_i32(0));
   $2 = (wasm2js_scratch_store_f32(Math_fround(Math_fround(Math_fround(Math_fround($9 * HEAPF32[$6 + 340 >> 2]) + Math_fround($10 * HEAPF32[$6 + 344 >> 2])) + Math_fround($11 * HEAPF32[$6 + 348 >> 2])) * HEAPF32[$6 + 608 >> 2])), wasm2js_scratch_load_i32(0));
  }
  HEAP32[$1 + 80 >> 2] = $24;
  HEAP32[$1 + 92 >> 2] = 0;
  HEAP32[$1 + 88 >> 2] = $23;
  HEAP32[$1 + 84 >> 2] = $2;
  $2 = $1;
  if ($0) {
   $14 = Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 356 >> 2] * $8) + Math_fround(HEAPF32[$0 + 360 >> 2] * $7)) + Math_fround(HEAPF32[$0 + 364 >> 2] * $12));
   $13 = Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 340 >> 2] * $8) + Math_fround(HEAPF32[$0 + 344 >> 2] * $7)) + Math_fround(HEAPF32[$0 + 348 >> 2] * $12));
   $19 = Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 324 >> 2] * $8) + Math_fround(HEAPF32[$0 + 328 >> 2] * $7)) + Math_fround(HEAPF32[$0 + 332 >> 2] * $12));
  } else {
   $19 = Math_fround(0.0)
  }
  $14 = Math_fround(Math_fround(Math_fround(Math_fround($19 * $8) + Math_fround($13 * $7)) + Math_fround($14 * $12)) + Math_fround(0.0));
  if ($6) {
   $25 = Math_fround(Math_fround(Math_fround($9 * HEAPF32[$6 + 356 >> 2]) + Math_fround($10 * HEAPF32[$6 + 360 >> 2])) + Math_fround($11 * HEAPF32[$6 + 364 >> 2]));
   $16 = Math_fround(Math_fround(Math_fround($9 * HEAPF32[$6 + 340 >> 2]) + Math_fround($10 * HEAPF32[$6 + 344 >> 2])) + Math_fround($11 * HEAPF32[$6 + 348 >> 2]));
   $13 = Math_fround(Math_fround(Math_fround(HEAPF32[$6 + 324 >> 2] * $9) + Math_fround(HEAPF32[$6 + 328 >> 2] * $10)) + Math_fround(HEAPF32[$6 + 332 >> 2] * $11));
  } else {
   $13 = Math_fround(0.0)
  }
  $16 = Math_fround(Math_fround(1.0) / Math_fround($14 + Math_fround(Math_fround(Math_fround($13 * $9) + Math_fround($16 * $10)) + Math_fround($25 * $11))));
  HEAPF32[$2 + 108 >> 2] = $16;
  $13 = Math_fround(0.0);
  $14 = Math_fround(0.0);
  if ($0) {
   $0 = Math_imul($3, 244) + $15 | 0;
   $17 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 176 >> 2] + HEAPF32[$0 + 208 >> 2]) * Math_fround(0.0)) + Math_fround(Math_fround(HEAPF32[$0 + 180 >> 2] + HEAPF32[$0 + 212 >> 2]) * Math_fround(0.0))) + Math_fround(Math_fround(HEAPF32[$0 + 184 >> 2] + HEAPF32[$0 + 216 >> 2]) * Math_fround(0.0)));
   $13 = HEAPF32[$0 + 196 >> 2];
   $26 = HEAPF32[$0 + 200 >> 2];
   $14 = HEAPF32[$0 + 192 >> 2];
  }
  $12 = Math_fround($17 + Math_fround(Math_fround($26 * $12) + Math_fround(Math_fround($13 * $7) + Math_fround($14 * $8))));
  label$6 : {
   if (!$6) {
    $7 = Math_fround(-0.0);
    $17 = Math_fround(0.0);
    $8 = Math_fround(0.0);
    break label$6;
   }
   $0 = Math_imul($4, 244) + $15 | 0;
   $7 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 176 >> 2] + HEAPF32[$0 + 208 >> 2]) * Math_fround(-0.0)) + Math_fround(Math_fround(HEAPF32[$0 + 180 >> 2] + HEAPF32[$0 + 212 >> 2]) * Math_fround(-0.0))) + Math_fround(Math_fround(HEAPF32[$0 + 184 >> 2] + HEAPF32[$0 + 216 >> 2]) * Math_fround(-0.0)));
   $17 = HEAPF32[$0 + 192 >> 2];
   $27 = HEAPF32[$0 + 200 >> 2];
   $8 = HEAPF32[$0 + 196 >> 2];
  }
  HEAPF32[$1 + 124 >> 2] = $5;
  HEAPF32[$1 + 116 >> 2] = 0;
  HEAPF32[$1 + 120 >> 2] = -$5;
  HEAPF32[$1 + 112 >> 2] = $16 * Math_fround(Math_fround(0.0) - Math_fround($12 + Math_fround($7 + Math_fround(Math_fround($11 * $27) + Math_fround(Math_fround($10 * $8) + Math_fround($9 * $17))))));
 }
 
 function btSequentialImpulseConstraintSolver__addTorsionalFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $7 = HEAP32[$0 + 88 >> 2];
  $6 = $7;
  label$1 : {
   if (HEAP32[$0 + 92 >> 2] != ($6 | 0)) {
    break label$1
   }
   $6 = $7;
   $8 = $6 ? $6 << 1 : 1;
   if (($6 | 0) >= ($8 | 0)) {
    break label$1
   }
   if ($8) {
    $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($8, 152));
    $6 = HEAP32[$0 + 88 >> 2];
   } else {
    $6 = $7
   }
   $9 = $6;
   if (($9 | 0) >= 1) {
    $6 = 0;
    while (1) {
     memcpy($6 + $10 | 0, $6 + HEAP32[$0 + 96 >> 2] | 0, 152);
     $6 = $6 + 152 | 0;
     $9 = $9 + -1 | 0;
     if ($9) {
      continue
     }
     break;
    };
   }
   $6 = HEAP32[$0 + 96 >> 2];
   if ($6) {
    if (HEAPU8[$0 + 100 | 0]) {
     btAlignedFreeInternal_28void__29($6)
    }
    HEAP32[$0 + 96 >> 2] = 0;
   }
   HEAP32[$0 + 96 >> 2] = $10;
   HEAP32[$0 + 92 >> 2] = $8;
   HEAP8[$0 + 100 | 0] = 1;
   $6 = HEAP32[$0 + 88 >> 2];
  }
  HEAP32[$0 + 88 >> 2] = $6 + 1;
  $6 = HEAP32[$0 + 96 >> 2] + Math_imul($7, 152) | 0;
  HEAP32[$6 + 140 >> 2] = $4;
  btSequentialImpulseConstraintSolver__setupTorsionalFrictionConstraint_28btSolverConstraint__2c_20btVector3_20const__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20float_2c_20float_29($0, $6, $1, $2, $3, $5);
 }
 
 function btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $4 = global$0 - 256 | 0;
  global$0 = $4;
  $3 = HEAP32[$1 + 212 >> 2];
  label$1 : {
   if (($3 | 0) > -1) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[$1 + 252 >> 2];
    if (!($3 & 2)) {
     break label$2
    }
    $3 = $1 & $3 << 30 >> 31;
    if (HEAPU8[$3 + 204 | 0] & 2 ? 0 : HEAPF32[$3 + 404 >> 2] == Math_fround(0.0)) {
     break label$2
    }
    $3 = HEAP32[$0 + 8 >> 2];
    memset($4 + 8 | 0, 0, 244);
    btSequentialImpulseConstraintSolver__initSolverBody_28btSolverBody__2c_20btCollisionObject__2c_20float_29(btAlignedObjectArray_btSolverBody___expand_28btSolverBody_20const__29($0 + 4 | 0, $4 + 8 | 0), $1, $2);
    HEAP32[$1 + 212 >> 2] = $3;
    break label$1;
   }
   $3 = HEAP32[$0 + 188 >> 2];
   if (($3 | 0) > -1) {
    break label$1
   }
   HEAP32[$0 + 188 >> 2] = HEAP32[$0 + 8 >> 2];
   memset($4 + 8 | 0, 0, 244);
   $1 = btAlignedObjectArray_btSolverBody___expand_28btSolverBody_20const__29($0 + 4 | 0, $4 + 8 | 0);
   $3 = $1 + 88 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 80 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 72 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$1 + 64 >> 2] = 0;
   HEAP32[$1 + 68 >> 2] = 0;
   HEAP32[$1 + 144 >> 2] = 0;
   HEAP32[$1 + 148 >> 2] = 0;
   $3 = $1 + 152 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 160 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 168 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   HEAP32[$1 >> 2] = 1065353216;
   $3 = $1 + 12 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 24 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$1 + 20 >> 2] = 1065353216;
   HEAP32[$1 + 32 >> 2] = 0;
   HEAP32[$1 + 36 >> 2] = 0;
   $3 = $1 + 44 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$1 + 40 >> 2] = 1065353216;
   $3 = $1 + 52 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$1 + 60 >> 2] = 0;
   $3 = $1 + 136 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$1 + 128 >> 2] = 0;
   HEAP32[$1 + 132 >> 2] = 0;
   $3 = $1 + 120 | 0;
   HEAP32[$3 >> 2] = 1065353216;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$1 + 112 >> 2] = 1065353216;
   HEAP32[$1 + 116 >> 2] = 1065353216;
   $3 = $1 + 104 | 0;
   HEAP32[$3 >> 2] = 1065353216;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$1 + 96 >> 2] = 1065353216;
   HEAP32[$1 + 100 >> 2] = 1065353216;
   $3 = $1 + 232 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 224 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 216 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 208 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 200 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 192 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $1 + 184 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$1 + 176 >> 2] = 0;
   HEAP32[$1 + 180 >> 2] = 0;
   HEAP32[$1 + 240 >> 2] = 0;
   $3 = HEAP32[$0 + 188 >> 2];
  }
  global$0 = $4 + 256 | 0;
  return $3;
 }
 
 function btAlignedObjectArray_btSolverBody___expand_28btSolverBody_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
  $10 = HEAP32[$0 + 4 >> 2];
  $5 = $10;
  label$1 : {
   if (HEAP32[$0 + 8 >> 2] != ($5 | 0)) {
    break label$1
   }
   $5 = $10;
   $11 = $5 ? $5 << 1 : 1;
   if (($5 | 0) >= ($11 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$11) {
     $2 = $10;
     break label$2;
    }
    $14 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($11, 244));
    $2 = HEAP32[$0 + 4 >> 2];
   }
   $12 = $2;
   if (($12 | 0) >= 1) {
    $13 = 64;
    while (1) {
     $8 = $13 + HEAP32[$0 + 12 >> 2] | 0;
     $6 = $8 + -64 | 0;
     $2 = $6;
     $9 = HEAP32[$2 >> 2];
     $3 = HEAP32[$2 + 4 >> 2];
     $5 = $13 + $14 | 0;
     $7 = $5 + -64 | 0;
     $4 = $7;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $3;
     $2 = $2 + 8 | 0;
     $6 = HEAP32[$2 >> 2];
     $4 = HEAP32[$2 + 4 >> 2];
     $3 = $7 + 8 | 0;
     HEAP32[$3 >> 2] = $6;
     HEAP32[$3 + 4 >> 2] = $4;
     $6 = $8 + -48 | 0;
     $2 = $6 + 8 | 0;
     $9 = HEAP32[$2 >> 2];
     $3 = HEAP32[$2 + 4 >> 2];
     $7 = $5 + -48 | 0;
     $4 = $7 + 8 | 0;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $3;
     $2 = $6;
     $6 = HEAP32[$2 >> 2];
     $4 = HEAP32[$2 + 4 >> 2];
     $3 = $7;
     HEAP32[$3 >> 2] = $6;
     HEAP32[$3 + 4 >> 2] = $4;
     $6 = $8 + -32 | 0;
     $2 = $6 + 8 | 0;
     $9 = HEAP32[$2 >> 2];
     $3 = HEAP32[$2 + 4 >> 2];
     $7 = $5 + -32 | 0;
     $4 = $7 + 8 | 0;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $3;
     $2 = $6;
     $6 = HEAP32[$2 >> 2];
     $4 = HEAP32[$2 + 4 >> 2];
     $3 = $7;
     HEAP32[$3 >> 2] = $6;
     HEAP32[$3 + 4 >> 2] = $4;
     $6 = $8 + -16 | 0;
     $2 = $6;
     $9 = HEAP32[$2 >> 2];
     $3 = HEAP32[$2 + 4 >> 2];
     $7 = $5 + -16 | 0;
     $4 = $7;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $3;
     $2 = $2 + 8 | 0;
     $6 = HEAP32[$2 >> 2];
     $4 = HEAP32[$2 + 4 >> 2];
     $3 = $7 + 8 | 0;
     HEAP32[$3 >> 2] = $6;
     HEAP32[$3 + 4 >> 2] = $4;
     memcpy($5, $8, 180);
     $13 = $13 + 244 | 0;
     $12 = $12 + -1 | 0;
     if ($12) {
      continue
     }
     break;
    };
   }
   $5 = HEAP32[$0 + 12 >> 2];
   if ($5) {
    if (HEAPU8[$0 + 16 | 0]) {
     btAlignedFreeInternal_28void__29($5)
    }
    HEAP32[$0 + 12 >> 2] = 0;
   }
   HEAP32[$0 + 12 >> 2] = $14;
   HEAP8[$0 + 16 | 0] = 1;
   HEAP32[$0 + 8 >> 2] = $11;
   $5 = HEAP32[$0 + 4 >> 2];
  }
  HEAP32[$0 + 4 >> 2] = $5 + 1;
  $2 = $1 + 8 | 0;
  $6 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $8 = Math_imul($10, 244);
  $5 = $8 + HEAP32[$0 + 12 >> 2] | 0;
  $4 = $5 + 8 | 0;
  HEAP32[$4 >> 2] = $6;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $1;
  $3 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  HEAP32[$5 >> 2] = $3;
  HEAP32[$5 + 4 >> 2] = $4;
  $2 = $2 + 24 | 0;
  $6 = HEAP32[$2 >> 2];
  $3 = HEAP32[$2 + 4 >> 2];
  $4 = $5 + 24 | 0;
  HEAP32[$4 >> 2] = $6;
  HEAP32[$4 + 4 >> 2] = $3;
  $2 = $1;
  $3 = HEAP32[$2 + 16 >> 2];
  $4 = HEAP32[$2 + 20 >> 2];
  HEAP32[$5 + 16 >> 2] = $3;
  HEAP32[$5 + 20 >> 2] = $4;
  $3 = HEAP32[$2 + 36 >> 2];
  HEAP32[$5 + 32 >> 2] = HEAP32[$2 + 32 >> 2];
  HEAP32[$5 + 36 >> 2] = $3;
  $2 = $2 + 40 | 0;
  $6 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $5 + 40 | 0;
  HEAP32[$3 >> 2] = $6;
  HEAP32[$3 + 4 >> 2] = $4;
  $2 = $1;
  $4 = HEAP32[$2 + 48 >> 2];
  $3 = HEAP32[$2 + 52 >> 2];
  HEAP32[$5 + 48 >> 2] = $4;
  HEAP32[$5 + 52 >> 2] = $3;
  $2 = $2 + 56 | 0;
  $6 = HEAP32[$2 >> 2];
  $4 = HEAP32[$2 + 4 >> 2];
  $3 = $5 + 56 | 0;
  HEAP32[$3 >> 2] = $6;
  HEAP32[$3 + 4 >> 2] = $4;
  memcpy($5 - -64 | 0, $1 - -64 | 0, 180);
  return $8 + HEAP32[$0 + 12 >> 2] | 0;
 }
 
 function btSequentialImpulseConstraintSolver__setupContactConstraint_28btSolverConstraint__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btContactSolverInfo_20const__2c_20float__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = 0, $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = 0, $34 = 0, $35 = 0;
  HEAP32[$6 >> 2] = HEAP32[$5 + 28 >> 2];
  $25 = HEAP32[$0 + 16 >> 2];
  $33 = $25 + Math_imul($3, 244) | 0;
  $0 = HEAP32[$33 + 240 >> 2];
  $34 = Math_imul($2, 244) + $25 | 0;
  $11 = HEAP32[$34 + 240 >> 2];
  $27 = HEAPF32[$5 + 12 >> 2];
  $31 = HEAPF32[$5 + 36 >> 2];
  $23 = HEAPF32[$5 + 40 >> 2];
  $24 = HEAP32[$4 + 120 >> 2];
  label$1 : {
   if ($24 & 6) {
    $23 = $24 & 2 ? HEAPF32[$4 + 144 >> 2] : $23;
    if (!($24 & 4)) {
     break label$1
    }
    $31 = HEAPF32[$4 + 148 >> 2];
    break label$1;
   }
   if (!($24 & 8)) {
    break label$1
   }
   $9 = Math_fround($27 * HEAPF32[$4 + 144 >> 2]);
   $17 = $9;
   $9 = Math_fround(Math_max(Math_fround($9 + HEAPF32[$4 + 148 >> 2]), Math_fround(1.1920928955078125e-07)));
   $31 = Math_fround($17 / $9);
   $23 = Math_fround(Math_fround(1.0) / $9);
  }
  $9 = HEAPF32[$4 + 68 >> 2];
  $12 = HEAPF32[$7 >> 2];
  $10 = HEAPF32[$7 + 4 >> 2];
  $17 = HEAPF32[$4 + 64 >> 2];
  $16 = Math_fround(Math_fround($9 * $12) - Math_fround($10 * $17));
  $13 = HEAPF32[$7 + 8 >> 2];
  $18 = Math_fround($13 * $17);
  $17 = HEAPF32[$4 + 72 >> 2];
  $19 = Math_fround($18 - Math_fround($17 * $12));
  $20 = Math_fround(Math_fround($10 * $17) - Math_fround($13 * $9));
  $9 = Math_fround(0.0);
  $12 = Math_fround(0.0);
  $10 = Math_fround(0.0);
  $17 = Math_fround(0.0);
  if ($11) {
   $17 = Math_fround(Math_fround(Math_fround(Math_fround($20 * HEAPF32[$11 + 356 >> 2]) + Math_fround($19 * HEAPF32[$11 + 360 >> 2])) + Math_fround($16 * HEAPF32[$11 + 364 >> 2])) * HEAPF32[$11 + 612 >> 2]);
   $12 = Math_fround(Math_fround(Math_fround(Math_fround($20 * HEAPF32[$11 + 324 >> 2]) + Math_fround($19 * HEAPF32[$11 + 328 >> 2])) + Math_fround($16 * HEAPF32[$11 + 332 >> 2])) * HEAPF32[$11 + 604 >> 2]);
   $10 = Math_fround(Math_fround(Math_fround(Math_fround($20 * HEAPF32[$11 + 340 >> 2]) + Math_fround($19 * HEAPF32[$11 + 344 >> 2])) + Math_fround($16 * HEAPF32[$11 + 348 >> 2])) * HEAPF32[$11 + 608 >> 2]);
  }
  HEAPF32[$1 + 64 >> 2] = $12;
  HEAP32[$1 + 76 >> 2] = 0;
  HEAPF32[$1 + 72 >> 2] = $17;
  HEAPF32[$1 + 68 >> 2] = $10;
  $13 = HEAPF32[$4 + 68 >> 2];
  $14 = HEAPF32[$8 >> 2];
  $28 = HEAPF32[$8 + 4 >> 2];
  $22 = HEAPF32[$4 + 64 >> 2];
  $21 = Math_fround(Math_fround($13 * $14) - Math_fround($28 * $22));
  $18 = HEAPF32[$8 + 8 >> 2];
  $26 = HEAPF32[$4 + 72 >> 2];
  $22 = Math_fround(Math_fround($18 * $22) - Math_fround($26 * $14));
  $26 = Math_fround(Math_fround($28 * $26) - Math_fround($18 * $13));
  $13 = Math_fround(0.0);
  $14 = Math_fround(0.0);
  $27 = Math_fround(Math_fround(1.0) / $27);
  if ($0) {
   $9 = Math_fround(-$26);
   $14 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 356 >> 2] * $9) - Math_fround(HEAPF32[$0 + 360 >> 2] * $22)) - Math_fround(HEAPF32[$0 + 364 >> 2] * $21)) * HEAPF32[$0 + 612 >> 2]);
   $13 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 340 >> 2] * $9) - Math_fround(HEAPF32[$0 + 344 >> 2] * $22)) - Math_fround(HEAPF32[$0 + 348 >> 2] * $21)) * HEAPF32[$0 + 608 >> 2]);
   $9 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 324 >> 2] * $9) - Math_fround(HEAPF32[$0 + 328 >> 2] * $22)) - Math_fround(HEAPF32[$0 + 332 >> 2] * $21)) * HEAPF32[$0 + 604 >> 2]);
  }
  HEAPF32[$1 + 80 >> 2] = $9;
  HEAP32[$1 + 92 >> 2] = 0;
  HEAPF32[$1 + 88 >> 2] = $14;
  HEAPF32[$1 + 84 >> 2] = $13;
  $28 = Math_fround(0.0);
  $18 = Math_fround(0.0);
  if ($11) {
   $18 = HEAPF32[$7 + 8 >> 2];
   $30 = HEAPF32[$7 + 4 >> 2];
   $32 = Math_fround(Math_fround(Math_fround($10 * $18) - Math_fround($17 * $30)) * HEAPF32[$4 + 64 >> 2]);
   $29 = $17;
   $17 = HEAPF32[$7 >> 2];
   $18 = Math_fround(HEAPF32[$11 + 404 >> 2] + Math_fround(Math_fround($32 + Math_fround(Math_fround(Math_fround($29 * $17) - Math_fround($18 * $12)) * HEAPF32[$4 + 68 >> 2])) + Math_fround(Math_fround(Math_fround($30 * $12) - Math_fround($10 * $17)) * HEAPF32[$4 + 72 >> 2])));
  }
  $15 = $1;
  $30 = HEAPF32[$6 >> 2];
  $17 = Math_fround($27 * $23);
  $29 = $17;
  if ($0) {
   $12 = HEAPF32[$8 + 4 >> 2];
   $10 = HEAPF32[$8 + 8 >> 2];
   $23 = Math_fround(Math_fround(Math_fround($12 * $14) - Math_fround($10 * $13)) * HEAPF32[$4 + 64 >> 2]);
   $32 = Math_fround($10 * $9);
   $10 = HEAPF32[$8 >> 2];
   $9 = Math_fround(HEAPF32[$0 + 404 >> 2] + Math_fround(Math_fround($23 + Math_fround(Math_fround($32 - Math_fround($10 * $14)) * HEAPF32[$4 + 68 >> 2])) + Math_fround(Math_fround(Math_fround($10 * $13) - Math_fround($12 * $9)) * HEAPF32[$4 + 72 >> 2])));
  } else {
   $9 = $28
  }
  HEAPF32[$15 + 108 >> 2] = $30 / Math_fround($29 + Math_fround($18 + $9));
  $6 = $1 + 16 | 0;
  label$7 : {
   if ($11) {
    $24 = $4 - -64 | 0;
    $15 = HEAP32[$24 + 4 >> 2];
    HEAP32[$6 >> 2] = HEAP32[$24 >> 2];
    HEAP32[$6 + 4 >> 2] = $15;
    $35 = $24 + 8 | 0;
    $24 = HEAP32[$35 >> 2];
    $15 = $6 + 8 | 0;
    $6 = HEAP32[$35 + 4 >> 2];
    HEAP32[$15 >> 2] = $24;
    HEAP32[$15 + 4 >> 2] = $6;
    HEAP32[$1 + 12 >> 2] = 0;
    HEAPF32[$1 + 8 >> 2] = $16;
    HEAPF32[$1 + 4 >> 2] = $19;
    HEAPF32[$1 >> 2] = $20;
    break label$7;
   }
   HEAP32[$1 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   $15 = $1 + 24 | 0;
   HEAP32[$15 >> 2] = 0;
   HEAP32[$15 + 4 >> 2] = 0;
   $15 = $6;
   HEAP32[$15 >> 2] = 0;
   HEAP32[$15 + 4 >> 2] = 0;
   $15 = $1 + 8 | 0;
   HEAP32[$15 >> 2] = 0;
   HEAP32[$15 + 4 >> 2] = 0;
  }
  label$9 : {
   if ($0) {
    $9 = HEAPF32[$4 + 64 >> 2];
    $12 = HEAPF32[$4 + 68 >> 2];
    $10 = HEAPF32[$4 + 72 >> 2];
    HEAP32[$1 + 60 >> 2] = 0;
    HEAP32[$1 + 44 >> 2] = 0;
    HEAPF32[$1 + 40 >> 2] = -$21;
    HEAPF32[$1 + 36 >> 2] = -$22;
    HEAPF32[$1 + 32 >> 2] = -$26;
    HEAPF32[$1 + 56 >> 2] = -$10;
    HEAPF32[$1 + 52 >> 2] = -$12;
    HEAPF32[$1 + 48 >> 2] = -$9;
    break label$9;
   }
   HEAP32[$1 + 32 >> 2] = 0;
   HEAP32[$1 + 36 >> 2] = 0;
   $15 = $1 + 56 | 0;
   HEAP32[$15 >> 2] = 0;
   HEAP32[$15 + 4 >> 2] = 0;
   $15 = $1 + 48 | 0;
   HEAP32[$15 >> 2] = 0;
   HEAP32[$15 + 4 >> 2] = 0;
   $15 = $1 + 40 | 0;
   HEAP32[$15 >> 2] = 0;
   HEAP32[$15 + 4 >> 2] = 0;
  }
  $22 = HEAPF32[$5 + 64 >> 2];
  $23 = HEAPF32[$4 + 80 >> 2];
  $9 = Math_fround(0.0);
  $12 = Math_fround(0.0);
  $10 = Math_fround(0.0);
  $13 = Math_fround(0.0);
  if ($11) {
   $12 = HEAPF32[$7 + 4 >> 2];
   $10 = HEAPF32[$11 + 388 >> 2];
   $14 = HEAPF32[$11 + 392 >> 2];
   $16 = HEAPF32[$7 >> 2];
   $13 = Math_fround(Math_fround(Math_fround($12 * $10) - Math_fround($14 * $16)) + HEAPF32[$11 + 380 >> 2]);
   $19 = HEAPF32[$11 + 396 >> 2];
   $18 = Math_fround($19 * $16);
   $16 = HEAPF32[$7 + 8 >> 2];
   $10 = Math_fround(HEAPF32[$11 + 376 >> 2] + Math_fround($18 - Math_fround($16 * $10)));
   $12 = Math_fround(Math_fround(Math_fround($14 * $16) - Math_fround($19 * $12)) + HEAPF32[$11 + 372 >> 2]);
  }
  $14 = Math_fround(0.0);
  $16 = Math_fround(0.0);
  if ($0) {
   $9 = HEAPF32[$8 + 4 >> 2];
   $14 = HEAPF32[$0 + 388 >> 2];
   $19 = HEAPF32[$0 + 392 >> 2];
   $20 = HEAPF32[$8 >> 2];
   $16 = Math_fround(Math_fround(Math_fround($9 * $14) - Math_fround($19 * $20)) + HEAPF32[$0 + 380 >> 2]);
   $21 = HEAPF32[$0 + 396 >> 2];
   $18 = Math_fround($21 * $20);
   $20 = HEAPF32[$8 + 8 >> 2];
   $14 = Math_fround(HEAPF32[$0 + 376 >> 2] + Math_fround($18 - Math_fround($20 * $14)));
   $9 = Math_fround(Math_fround(Math_fround($19 * $20) - Math_fround($21 * $9)) + HEAPF32[$0 + 372 >> 2]);
  }
  $7 = $33 + 240 | 0;
  $8 = $34 + 240 | 0;
  $19 = HEAPF32[$4 + 72 >> 2];
  $20 = HEAPF32[$4 + 64 >> 2];
  $21 = HEAPF32[$4 + 68 >> 2];
  HEAP32[$1 + 104 >> 2] = HEAP32[$4 + 84 >> 2];
  $9 = Math_fround(Math_fround(Math_fround($20 * Math_fround($12 - $9)) + Math_fround($21 * Math_fround($10 - $14))) + Math_fround($19 * Math_fround($13 - $16)));
  $12 = Math_fround(Math_abs($9)) < HEAPF32[$5 + 96 >> 2] ? Math_fround(0.0) : Math_fround(-Math_fround($9 * HEAPF32[$4 + 96 >> 2]));
  label$13 : {
   if (HEAPU8[$5 + 72 | 0] & 4) {
    $9 = Math_fround(HEAPF32[$4 + 124 >> 2] * HEAPF32[$5 + 68 >> 2]);
    HEAPF32[$1 + 100 >> 2] = $9;
    label$15 : {
     if (!$11) {
      break label$15
     }
     if (!HEAP32[$8 >> 2]) {
      break label$15
     }
     $10 = HEAPF32[$11 + 416 >> 2];
     $13 = HEAPF32[$1 + 24 >> 2];
     $14 = HEAPF32[$11 + 412 >> 2];
     $16 = HEAPF32[$1 + 20 >> 2];
     $4 = Math_imul($2, 244) + $25 | 0;
     HEAPF32[$4 + 64 >> 2] = Math_fround(HEAPF32[$4 + 112 >> 2] * Math_fround($9 * Math_fround(Math_fround(HEAPF32[$1 + 16 >> 2] * HEAPF32[$4 + 128 >> 2]) * HEAPF32[$11 + 408 >> 2]))) + HEAPF32[$4 + 64 >> 2];
     $11 = $4 + 68 | 0;
     HEAPF32[$11 >> 2] = Math_fround(Math_fround($9 * Math_fround($14 * Math_fround($16 * HEAPF32[$4 + 132 >> 2]))) * HEAPF32[$4 + 116 >> 2]) + HEAPF32[$11 >> 2];
     $11 = $4 + 72 | 0;
     HEAPF32[$11 >> 2] = Math_fround(Math_fround($9 * Math_fround($10 * Math_fround($13 * HEAPF32[$4 + 136 >> 2]))) * HEAPF32[$4 + 120 >> 2]) + HEAPF32[$11 >> 2];
     $10 = HEAPF32[$1 + 72 >> 2];
     $13 = HEAPF32[$1 + 68 >> 2];
     HEAPF32[$4 + 80 >> 2] = Math_fround(Math_fround($9 * HEAPF32[$4 + 96 >> 2]) * HEAPF32[$1 + 64 >> 2]) + HEAPF32[$4 + 80 >> 2];
     $14 = HEAPF32[$4 + 104 >> 2];
     $11 = $4 + 84 | 0;
     HEAPF32[$11 >> 2] = Math_fround($13 * Math_fround($9 * HEAPF32[$4 + 100 >> 2])) + HEAPF32[$11 >> 2];
     $4 = $4 + 88 | 0;
     HEAPF32[$4 >> 2] = Math_fround($10 * Math_fround($9 * $14)) + HEAPF32[$4 >> 2];
    }
    if (!$0) {
     break label$13
    }
    if (!HEAP32[$7 >> 2]) {
     break label$13
    }
    $10 = HEAPF32[$0 + 416 >> 2];
    $13 = HEAPF32[$1 + 56 >> 2];
    $14 = HEAPF32[$0 + 412 >> 2];
    $16 = HEAPF32[$1 + 52 >> 2];
    $19 = HEAPF32[$1 + 88 >> 2];
    $20 = HEAPF32[$1 + 84 >> 2];
    $21 = HEAPF32[$1 + 80 >> 2];
    $4 = Math_imul($3, 244) + $25 | 0;
    $9 = HEAPF32[$1 + 100 >> 2];
    HEAPF32[$4 + 64 >> 2] = Math_fround(HEAPF32[$4 + 112 >> 2] * Math_fround($9 * Math_fround(Math_fround(HEAPF32[$1 + 48 >> 2] * HEAPF32[$4 + 128 >> 2]) * HEAPF32[$0 + 408 >> 2]))) + HEAPF32[$4 + 64 >> 2];
    $0 = $4 + 68 | 0;
    HEAPF32[$0 >> 2] = Math_fround(Math_fround($9 * Math_fround($14 * Math_fround($16 * HEAPF32[$4 + 132 >> 2]))) * HEAPF32[$4 + 116 >> 2]) + HEAPF32[$0 >> 2];
    $0 = $4 + 72 | 0;
    HEAPF32[$0 >> 2] = Math_fround(Math_fround($9 * Math_fround($10 * Math_fround($13 * HEAPF32[$4 + 136 >> 2]))) * HEAPF32[$4 + 120 >> 2]) + HEAPF32[$0 >> 2];
    $9 = Math_fround(-$9);
    HEAPF32[$4 + 80 >> 2] = HEAPF32[$4 + 80 >> 2] - Math_fround($21 * Math_fround(HEAPF32[$4 + 96 >> 2] * $9));
    $10 = HEAPF32[$4 + 104 >> 2];
    $0 = $4 + 84 | 0;
    HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] - Math_fround($20 * Math_fround(HEAPF32[$4 + 100 >> 2] * $9));
    $4 = $4 + 88 | 0;
    HEAPF32[$4 >> 2] = HEAPF32[$4 >> 2] - Math_fround($19 * Math_fround($10 * $9));
    break label$13;
   }
   HEAP32[$1 + 100 >> 2] = 0;
  }
  $0 = $12 <= Math_fround(0.0);
  HEAP32[$1 + 96 >> 2] = 0;
  $10 = Math_fround(0.0);
  $13 = Math_fround(0.0);
  $14 = Math_fround(0.0);
  $16 = Math_fround(0.0);
  $19 = Math_fround(0.0);
  $20 = Math_fround(0.0);
  $21 = Math_fround(0.0);
  if (HEAP32[$8 >> 2]) {
   $4 = Math_imul($2, 244) + $25 | 0;
   $21 = HEAPF32[$4 + 224 >> 2];
   $16 = HEAPF32[$4 + 208 >> 2];
   $19 = HEAPF32[$4 + 232 >> 2];
   $20 = HEAPF32[$4 + 228 >> 2];
   $14 = HEAPF32[$4 + 212 >> 2];
   $13 = HEAPF32[$4 + 216 >> 2];
  }
  $9 = Math_fround($23 + $22);
  $26 = $0 ? Math_fround(0.0) : $12;
  $12 = Math_fround(0.0);
  $22 = Math_fround(0.0);
  $23 = Math_fround(0.0);
  $18 = Math_fround(0.0);
  if (HEAP32[$7 >> 2]) {
   $4 = Math_imul($3, 244) + $25 | 0;
   $18 = HEAPF32[$4 + 224 >> 2];
   $23 = HEAPF32[$4 + 232 >> 2];
   $28 = HEAPF32[$4 + 228 >> 2];
   $22 = HEAPF32[$4 + 216 >> 2];
   $12 = HEAPF32[$4 + 212 >> 2];
   $10 = HEAPF32[$4 + 208 >> 2];
  }
  $4 = Math_imul($2, 244) + $25 | 0;
  $29 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($16 + HEAPF32[$4 + 176 >> 2]) * HEAPF32[$1 + 16 >> 2]) + Math_fround(Math_fround($14 + HEAPF32[$4 + 180 >> 2]) * HEAPF32[$1 + 20 >> 2])) + Math_fround(Math_fround($13 + HEAPF32[$4 + 184 >> 2]) * HEAPF32[$1 + 24 >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround($21 + HEAPF32[$4 + 192 >> 2]) * HEAPF32[$1 >> 2]) + Math_fround(Math_fround($20 + HEAPF32[$4 + 196 >> 2]) * HEAPF32[$1 + 4 >> 2])) + Math_fround(Math_fround($19 + HEAPF32[$4 + 200 >> 2]) * HEAPF32[$1 + 8 >> 2])));
  $4 = Math_imul($3, 244) + $25 | 0;
  $12 = Math_fround($26 - Math_fround($29 + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($10 + HEAPF32[$4 + 176 >> 2]) * HEAPF32[$1 + 48 >> 2]) + Math_fround(Math_fround($12 + HEAPF32[$4 + 180 >> 2]) * HEAPF32[$1 + 52 >> 2])) + Math_fround(Math_fround($22 + HEAPF32[$4 + 184 >> 2]) * HEAPF32[$1 + 56 >> 2])) + Math_fround(Math_fround(Math_fround(Math_fround($18 + HEAPF32[$4 + 192 >> 2]) * HEAPF32[$1 + 32 >> 2]) + Math_fround(Math_fround($28 + HEAPF32[$4 + 196 >> 2]) * HEAPF32[$1 + 36 >> 2])) + Math_fround(Math_fround($23 + HEAPF32[$4 + 200 >> 2]) * HEAPF32[$1 + 40 >> 2])))));
  $10 = Math_fround(0.0);
  label$18 : {
   if (!!($9 > Math_fround(0.0))) {
    $12 = Math_fround($12 - Math_fround($27 * $9));
    break label$18;
   }
   $10 = Math_fround(-Math_fround($27 * Math_fround($31 * $9)));
  }
  $13 = HEAPF32[$1 + 108 >> 2];
  $12 = Math_fround($12 * $13);
  $10 = Math_fround($10 * $13);
  if (!($9 > HEAPF32[$5 + 56 >> 2] ^ 1 ? !!HEAP32[$5 + 52 >> 2] : 0)) {
   $12 = Math_fround($10 + $12);
   $10 = Math_fround(0.0);
  }
  HEAPF32[$1 + 128 >> 2] = $10;
  HEAPF32[$1 + 112 >> 2] = $12;
  HEAP32[$1 + 120 >> 2] = 0;
  HEAP32[$1 + 124 >> 2] = 1343554297;
  HEAPF32[$1 + 116 >> 2] = $17 * $13;
 }
 
 function btSequentialImpulseConstraintSolver__setFrictionConstraintImpulse_28btSolverConstraint__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btContactSolverInfo_20const__29($0, $1, $2, $3, $4, $5) {
  var $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0);
  $14 = HEAP32[$0 + 16 >> 2];
  $10 = HEAP32[($14 + Math_imul($3, 244) | 0) + 240 >> 2];
  $7 = HEAP32[(Math_imul($2, 244) + $14 | 0) + 240 >> 2];
  $15 = HEAP32[$0 + 76 >> 2];
  $1 = HEAP32[$1 + 140 >> 2];
  $19 = HEAP32[$5 + 72 >> 2];
  $20 = $19 & 4;
  label$1 : {
   if ($20) {
    $9 = Math_imul($1, 152) + $15 | 0;
    $6 = Math_fround(HEAPF32[$4 + 128 >> 2] * HEAPF32[$5 + 68 >> 2]);
    HEAPF32[$9 + 100 >> 2] = $6;
    if ($7) {
     $12 = HEAPF32[$7 + 416 >> 2];
     $13 = HEAPF32[$9 + 24 >> 2];
     $16 = HEAPF32[$7 + 412 >> 2];
     $17 = HEAPF32[$9 + 20 >> 2];
     $0 = Math_imul($2, 244) + $14 | 0;
     $8 = HEAPF32[$7 + 404 >> 2];
     HEAPF32[$0 + 64 >> 2] = Math_fround(Math_fround($6 * Math_fround(Math_fround($8 * HEAPF32[$9 + 16 >> 2]) * HEAPF32[$7 + 408 >> 2])) * HEAPF32[$0 + 112 >> 2]) + HEAPF32[$0 + 64 >> 2];
     $11 = $0 + 68 | 0;
     HEAPF32[$11 >> 2] = Math_fround(Math_fround($6 * Math_fround($16 * Math_fround($8 * $17))) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$11 >> 2];
     $11 = $0 + 72 | 0;
     HEAPF32[$11 >> 2] = Math_fround(Math_fround($6 * Math_fround($12 * Math_fround($8 * $13))) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$11 >> 2];
     $8 = HEAPF32[$9 + 72 >> 2];
     $12 = HEAPF32[$9 + 68 >> 2];
     HEAPF32[$0 + 80 >> 2] = Math_fround(Math_fround($6 * HEAPF32[$0 + 96 >> 2]) * HEAPF32[$9 + 64 >> 2]) + HEAPF32[$0 + 80 >> 2];
     $13 = HEAPF32[$0 + 104 >> 2];
     $11 = $0 + 84 | 0;
     HEAPF32[$11 >> 2] = Math_fround($12 * Math_fround($6 * HEAPF32[$0 + 100 >> 2])) + HEAPF32[$11 >> 2];
     $0 = $0 + 88 | 0;
     HEAPF32[$0 >> 2] = Math_fround($8 * Math_fround($6 * $13)) + HEAPF32[$0 >> 2];
    }
    if (!$10) {
     break label$1
    }
    $11 = Math_imul($1, 152) + $15 | 0;
    $12 = HEAPF32[$11 + 88 >> 2];
    $13 = HEAPF32[$11 + 84 >> 2];
    $16 = HEAPF32[$11 + 80 >> 2];
    $17 = HEAPF32[$10 + 416 >> 2];
    $18 = HEAPF32[$11 + 56 >> 2];
    $21 = HEAPF32[$10 + 412 >> 2];
    $22 = HEAPF32[$11 + 52 >> 2];
    $0 = Math_imul($3, 244) + $14 | 0;
    $8 = HEAPF32[$10 + 404 >> 2];
    $6 = HEAPF32[$9 + 100 >> 2];
    HEAPF32[$0 + 64 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$11 + 48 >> 2] * $8) * HEAPF32[$10 + 408 >> 2]) * $6) * HEAPF32[$0 + 112 >> 2]) + HEAPF32[$0 + 64 >> 2];
    $9 = $0 + 68 | 0;
    HEAPF32[$9 >> 2] = Math_fround(Math_fround($6 * Math_fround($21 * Math_fround($22 * $8))) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$9 >> 2];
    $9 = $0 + 72 | 0;
    HEAPF32[$9 >> 2] = Math_fround(Math_fround($6 * Math_fround($17 * Math_fround($18 * $8))) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$9 >> 2];
    HEAPF32[$0 + 80 >> 2] = HEAPF32[$0 + 80 >> 2] + Math_fround($16 * Math_fround($6 * HEAPF32[$0 + 96 >> 2]));
    $8 = HEAPF32[$0 + 104 >> 2];
    $9 = $0 + 84 | 0;
    HEAPF32[$9 >> 2] = HEAPF32[$9 >> 2] + Math_fround($13 * Math_fround($6 * HEAPF32[$0 + 100 >> 2]));
    $0 = $0 + 88 | 0;
    HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($12 * Math_fround($8 * $6));
    break label$1;
   }
   HEAP32[(Math_imul($1, 152) + $15 | 0) + 100 >> 2] = 0;
  }
  label$4 : {
   if (!($19 & 16)) {
    break label$4
   }
   $9 = $1 + 1 | 0;
   if ($20) {
    $1 = Math_imul($9, 152) + $15 | 0;
    $6 = Math_fround(HEAPF32[$4 + 132 >> 2] * HEAPF32[$5 + 68 >> 2]);
    HEAPF32[$1 + 100 >> 2] = $6;
    if ($7) {
     $12 = HEAPF32[$1 + 24 >> 2];
     $13 = HEAPF32[$1 + 20 >> 2];
     $0 = Math_imul($2, 244) + $14 | 0;
     $8 = HEAPF32[$7 + 404 >> 2];
     HEAPF32[$0 + 64 >> 2] = Math_fround(Math_fround($6 * Math_fround($8 * HEAPF32[$1 + 16 >> 2])) * HEAPF32[$0 + 112 >> 2]) + HEAPF32[$0 + 64 >> 2];
     $7 = $0 + 68 | 0;
     HEAPF32[$7 >> 2] = Math_fround(Math_fround($6 * Math_fround($8 * $13)) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$7 >> 2];
     $7 = $0 + 72 | 0;
     HEAPF32[$7 >> 2] = Math_fround(Math_fround($6 * Math_fround($8 * $12)) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$7 >> 2];
     $8 = HEAPF32[$1 + 72 >> 2];
     $12 = HEAPF32[$1 + 68 >> 2];
     HEAPF32[$0 + 80 >> 2] = Math_fround(Math_fround($6 * HEAPF32[$0 + 96 >> 2]) * HEAPF32[$1 + 64 >> 2]) + HEAPF32[$0 + 80 >> 2];
     $13 = HEAPF32[$0 + 104 >> 2];
     $7 = $0 + 84 | 0;
     HEAPF32[$7 >> 2] = Math_fround($12 * Math_fround($6 * HEAPF32[$0 + 100 >> 2])) + HEAPF32[$7 >> 2];
     $0 = $0 + 88 | 0;
     HEAPF32[$0 >> 2] = Math_fround($8 * Math_fround($6 * $13)) + HEAPF32[$0 >> 2];
    }
    if (!$10) {
     break label$4
    }
    $7 = Math_imul($9, 152) + $15 | 0;
    $12 = HEAPF32[$7 + 88 >> 2];
    $13 = HEAPF32[$7 + 84 >> 2];
    $16 = HEAPF32[$7 + 56 >> 2];
    $17 = HEAPF32[$7 + 52 >> 2];
    $18 = HEAPF32[$7 + 48 >> 2];
    $8 = HEAPF32[$10 + 404 >> 2];
    $0 = Math_imul($3, 244) + $14 | 0;
    $6 = HEAPF32[$1 + 100 >> 2];
    HEAPF32[$0 + 80 >> 2] = HEAPF32[$0 + 80 >> 2] + Math_fround(HEAPF32[$7 + 80 >> 2] * Math_fround(HEAPF32[$0 + 96 >> 2] * $6));
    HEAPF32[$0 + 64 >> 2] = Math_fround(Math_fround($6 * Math_fround($18 * $8)) * HEAPF32[$0 + 112 >> 2]) + HEAPF32[$0 + 64 >> 2];
    $10 = $0 + 68 | 0;
    HEAPF32[$10 >> 2] = Math_fround(Math_fround($6 * Math_fround($17 * $8)) * HEAPF32[$0 + 116 >> 2]) + HEAPF32[$10 >> 2];
    $10 = $0 + 72 | 0;
    HEAPF32[$10 >> 2] = Math_fround(Math_fround($6 * Math_fround($16 * $8)) * HEAPF32[$0 + 120 >> 2]) + HEAPF32[$10 >> 2];
    $8 = HEAPF32[$0 + 104 >> 2];
    $10 = $0 + 84 | 0;
    HEAPF32[$10 >> 2] = HEAPF32[$10 >> 2] + Math_fround($13 * Math_fround($6 * HEAPF32[$0 + 100 >> 2]));
    $0 = $0 + 88 | 0;
    HEAPF32[$0 >> 2] = HEAPF32[$0 >> 2] + Math_fround($12 * Math_fround($8 * $6));
    return;
   }
   HEAP32[(Math_imul($9, 152) + $15 | 0) + 100 >> 2] = 0;
  }
 }
 
 function btSequentialImpulseConstraintSolver__convertContact_28btPersistentManifold__2c_20btContactSolverInfo_20const__29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = 0, $25 = Math_fround(0), $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = 0, $41 = Math_fround(0), $42 = Math_fround(0), $43 = 0, $44 = Math_fround(0), $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0;
  $13 = global$0 - 80 | 0;
  global$0 = $13;
  $7 = HEAP32[$1 + 776 >> 2];
  $8 = HEAP32[$1 + 772 >> 2];
  $27 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, $8, HEAPF32[$2 + 12 >> 2]);
  $28 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, $7, HEAPF32[$2 + 12 >> 2]);
  $17 = HEAP32[$0 + 16 >> 2];
  $18 = $17 + Math_imul($27, 244) | 0;
  $3 = HEAPF32[$18 + 128 >> 2];
  $6 = Math_fround($3 * $3);
  $3 = HEAPF32[$18 + 132 >> 2];
  $6 = Math_fround($6 + Math_fround($3 * $3));
  $3 = HEAPF32[$18 + 136 >> 2];
  label$1 : {
   if (!!(Math_fround($6 + Math_fround($3 * $3)) < Math_fround(1.4210854715202004e-14))) {
    $18 = Math_imul($28, 244) + $17 | 0;
    $3 = HEAPF32[$18 + 128 >> 2];
    $6 = Math_fround($3 * $3);
    $3 = HEAPF32[$18 + 132 >> 2];
    $6 = Math_fround($6 + Math_fround($3 * $3));
    $3 = HEAPF32[$18 + 136 >> 2];
    if (Math_fround($6 + Math_fround($3 * $3)) < Math_fround(1.4210854715202004e-14)) {
     break label$1
    }
   }
   $18 = HEAP32[$1 + 780 >> 2];
   if (($18 | 0) < 1) {
    break label$1
   }
   $11 = Math_imul($28, 244) + $17 | 0;
   $47 = $11 + 232 | 0;
   $48 = $11 + 200 | 0;
   $49 = $11 + 228 | 0;
   $50 = $11 + 196 | 0;
   $51 = $11 + 224 | 0;
   $52 = $11 + 192 | 0;
   $53 = $11 + 216 | 0;
   $54 = $11 + 184 | 0;
   $55 = $11 + 212 | 0;
   $56 = $11 + 180 | 0;
   $57 = $11 + 208 | 0;
   $58 = $11 + 176 | 0;
   $59 = $11 + 240 | 0;
   $11 = Math_imul($27, 244) + $17 | 0;
   $60 = $11 + 232 | 0;
   $61 = $11 + 200 | 0;
   $62 = $11 + 228 | 0;
   $63 = $11 + 196 | 0;
   $64 = $11 + 224 | 0;
   $65 = $11 + 192 | 0;
   $66 = $11 + 216 | 0;
   $67 = $11 + 184 | 0;
   $68 = $11 + 212 | 0;
   $69 = $11 + 180 | 0;
   $70 = $11 + 208 | 0;
   $71 = $11 + 176 | 0;
   $72 = $11 + 240 | 0;
   while (1) {
    $11 = Math_imul($45, 192) + $1 | 0;
    if (!!(HEAPF32[$11 + 84 >> 2] <= HEAPF32[$1 + 788 >> 2])) {
     $40 = $11 + 4 | 0;
     $29 = HEAP32[$0 + 28 >> 2];
     $18 = $29;
     label$5 : {
      if (HEAP32[$0 + 32 >> 2] != ($18 | 0)) {
       break label$5
      }
      $18 = $29;
      $26 = $18 ? $18 << 1 : 1;
      if (($18 | 0) >= ($26 | 0)) {
       break label$5
      }
      label$6 : {
       if (!$26) {
        $24 = 0;
        $17 = $29;
        break label$6;
       }
       $24 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($26, 152));
       $17 = HEAP32[$0 + 28 >> 2];
      }
      if (($17 | 0) >= 1) {
       $18 = 0;
       while (1) {
        memcpy($18 + $24 | 0, $18 + HEAP32[$0 + 36 >> 2] | 0, 152);
        $18 = $18 + 152 | 0;
        $17 = $17 + -1 | 0;
        if ($17) {
         continue
        }
        break;
       };
      }
      $18 = HEAP32[$0 + 36 >> 2];
      if ($18) {
       if (HEAPU8[$0 + 40 | 0]) {
        btAlignedFreeInternal_28void__29($18)
       }
       HEAP32[$0 + 36 >> 2] = 0;
      }
      HEAP32[$0 + 36 >> 2] = $24;
      HEAP8[$0 + 40 | 0] = 1;
      HEAP32[$0 + 32 >> 2] = $26;
      $18 = HEAP32[$0 + 28 >> 2];
     }
     HEAP32[$0 + 28 >> 2] = $18 + 1;
     $18 = HEAP32[$0 + 36 >> 2] + Math_imul($29, 152) | 0;
     HEAP32[$18 + 132 >> 2] = $40;
     HEAP32[$18 + 148 >> 2] = $28;
     HEAP32[$18 + 144 >> 2] = $27;
     HEAP32[$13 + 76 >> 2] = 0;
     $3 = Math_fround(HEAPF32[$11 + 60 >> 2] - HEAPF32[$8 + 60 >> 2]);
     HEAPF32[$13 + 72 >> 2] = $3;
     $4 = Math_fround(HEAPF32[$11 + 56 >> 2] - HEAPF32[$8 + 56 >> 2]);
     HEAPF32[$13 + 68 >> 2] = $4;
     $5 = Math_fround(HEAPF32[$11 + 52 >> 2] - HEAPF32[$8 + 52 >> 2]);
     HEAPF32[$13 + 64 >> 2] = $5;
     $9 = HEAPF32[$11 + 36 >> 2];
     $12 = HEAPF32[$11 + 40 >> 2];
     $10 = HEAPF32[$11 + 44 >> 2];
     $16 = HEAPF32[$7 + 52 >> 2];
     $19 = HEAPF32[$7 + 56 >> 2];
     $15 = HEAPF32[$7 + 60 >> 2];
     HEAP32[$13 + 60 >> 2] = 0;
     $10 = Math_fround($10 - $15);
     HEAPF32[$13 + 56 >> 2] = $10;
     $12 = Math_fround($12 - $19);
     HEAPF32[$13 + 52 >> 2] = $12;
     $9 = Math_fround($9 - $16);
     HEAPF32[$13 + 48 >> 2] = $9;
     $16 = Math_fround(0.0);
     $19 = Math_fround(0.0);
     $15 = Math_fround(0.0);
     $20 = Math_fround(0.0);
     if (HEAP32[$72 >> 2]) {
      $19 = Math_fround(HEAPF32[$65 >> 2] + HEAPF32[$64 >> 2]);
      $22 = Math_fround(HEAPF32[$63 >> 2] + HEAPF32[$62 >> 2]);
      $20 = Math_fround(Math_fround(HEAPF32[$67 >> 2] + HEAPF32[$66 >> 2]) + Math_fround(Math_fround($4 * $19) - Math_fround($5 * $22)));
      $23 = Math_fround(HEAPF32[$61 >> 2] + HEAPF32[$60 >> 2]);
      $15 = Math_fround(Math_fround(HEAPF32[$69 >> 2] + HEAPF32[$68 >> 2]) + Math_fround(Math_fround($5 * $23) - Math_fround($3 * $19)));
      $19 = Math_fround(Math_fround(HEAPF32[$71 >> 2] + HEAPF32[$70 >> 2]) + Math_fround(Math_fround($3 * $22) - Math_fround($4 * $23)));
     }
     $22 = Math_fround(0.0);
     $23 = Math_fround(0.0);
     if (HEAP32[$59 >> 2]) {
      $3 = Math_fround(HEAPF32[$52 >> 2] + HEAPF32[$51 >> 2]);
      $4 = Math_fround(HEAPF32[$50 >> 2] + HEAPF32[$49 >> 2]);
      $23 = Math_fround(Math_fround(HEAPF32[$54 >> 2] + HEAPF32[$53 >> 2]) + Math_fround(Math_fround($12 * $3) - Math_fround($9 * $4)));
      $5 = Math_fround(HEAPF32[$48 >> 2] + HEAPF32[$47 >> 2]);
      $22 = Math_fround(Math_fround(HEAPF32[$56 >> 2] + HEAPF32[$55 >> 2]) + Math_fround(Math_fround($9 * $5) - Math_fround($10 * $3)));
      $16 = Math_fround(Math_fround(HEAPF32[$58 >> 2] + HEAPF32[$57 >> 2]) + Math_fround(Math_fround($10 * $4) - Math_fround($12 * $5)));
     }
     $26 = $11 + 76 | 0;
     $21 = HEAPF32[$26 >> 2];
     $24 = $11 + 68 | 0;
     $25 = HEAPF32[$24 >> 2];
     $32 = $11 + 72 | 0;
     $41 = HEAPF32[$32 >> 2];
     btSequentialImpulseConstraintSolver__setupContactConstraint_28btSolverConstraint__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btContactSolverInfo_20const__2c_20float__2c_20btVector3_20const__2c_20btVector3_20const__29($0, $18, $27, $28, $40, $2, $13 + 44 | 0, $13 - -64 | 0, $13 + 48 | 0);
     HEAP32[$18 + 140 >> 2] = HEAP32[$0 + 68 >> 2];
     $17 = $11 + 92 | 0;
     label$14 : {
      if (!(HEAPF32[$17 >> 2] > Math_fround(0.0))) {
       break label$14
      }
      btSequentialImpulseConstraintSolver__addTorsionalFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20float_2c_20float_29($0, $24, $27, $28, $29, HEAPF32[$11 + 96 >> 2]);
      $5 = HEAPF32[$26 >> 2];
      label$15 : {
       if (!!(Math_fround(Math_abs($5)) > Math_fround(.7071067690849304))) {
        HEAP32[$13 + 24 >> 2] = 0;
        $3 = HEAPF32[$32 >> 2];
        $10 = Math_fround(Math_fround($5 * $5) + Math_fround($3 * $3));
        $4 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($10)));
        $3 = Math_fround($3 * $4);
        HEAPF32[$13 + 32 >> 2] = $3;
        $9 = Math_fround($10 * $4);
        HEAPF32[$13 + 8 >> 2] = $9;
        $4 = Math_fround(-Math_fround($5 * $4));
        HEAPF32[$13 + 28 >> 2] = $4;
        $5 = HEAPF32[$24 >> 2];
        $12 = Math_fround(-Math_fround($5 * $3));
        HEAPF32[$13 + 12 >> 2] = $12;
        $10 = Math_fround(0.0);
        $6 = Math_fround($5 * $4);
        break label$15;
       }
       HEAP32[$13 + 32 >> 2] = 0;
       $3 = HEAPF32[$24 >> 2];
       $42 = $3;
       $6 = Math_fround($3 * $3);
       $3 = HEAPF32[$32 >> 2];
       $14 = Math_fround($6 + Math_fround($3 * $3));
       $6 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($14)));
       $4 = Math_fround($42 * $6);
       HEAPF32[$13 + 28 >> 2] = $4;
       $10 = Math_fround(-Math_fround($3 * $6));
       HEAPF32[$13 + 24 >> 2] = $10;
       $12 = Math_fround($5 * $10);
       HEAPF32[$13 + 12 >> 2] = $12;
       $9 = Math_fround(-Math_fround($5 * $4));
       HEAPF32[$13 + 8 >> 2] = $9;
       $3 = Math_fround(0.0);
       $6 = Math_fround($14 * $6);
      }
      $14 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($4 * $4)) + Math_fround($3 * $3)))));
      $3 = Math_fround($3 * $14);
      HEAPF32[$13 + 32 >> 2] = $3;
      $5 = Math_fround($4 * $14);
      HEAPF32[$13 + 28 >> 2] = $5;
      $10 = Math_fround($10 * $14);
      HEAPF32[$13 + 24 >> 2] = $10;
      $14 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($6 * $6) + Math_fround(Math_fround($9 * $9) + Math_fround($12 * $12))))));
      $4 = Math_fround($6 * $14);
      HEAPF32[$13 + 16 >> 2] = $4;
      $12 = Math_fround($12 * $14);
      HEAPF32[$13 + 12 >> 2] = $12;
      $9 = Math_fround($9 * $14);
      HEAPF32[$13 + 8 >> 2] = $9;
      $30 = HEAP32[$8 + 180 >> 2] & 2;
      if ($30) {
       HEAP32[$13 + 36 >> 2] = 0;
       $6 = HEAPF32[$8 + 36 >> 2];
       $42 = $6;
       $33 = HEAPF32[$8 + 4 >> 2];
       $34 = HEAPF32[$8 + 20 >> 2];
       $6 = Math_fround(Math_fround(Math_fround(Math_fround($10 * $33) + Math_fround($5 * $34)) + Math_fround($3 * $6)) * HEAPF32[$8 + 164 >> 2]);
       $14 = HEAPF32[$8 + 40 >> 2];
       $44 = $14;
       $35 = HEAPF32[$8 + 8 >> 2];
       $36 = HEAPF32[$8 + 24 >> 2];
       $14 = Math_fround(Math_fround(Math_fround(Math_fround($10 * $35) + Math_fround($5 * $36)) + Math_fround($3 * $14)) * HEAPF32[$8 + 168 >> 2]);
       $37 = HEAPF32[$8 + 12 >> 2];
       $38 = HEAPF32[$8 + 28 >> 2];
       $39 = HEAPF32[$8 + 44 >> 2];
       $10 = Math_fround(Math_fround(Math_fround(Math_fround($10 * $37) + Math_fround($5 * $38)) + Math_fround($3 * $39)) * HEAPF32[$8 + 172 >> 2]);
       $3 = Math_fround(Math_fround(Math_fround($42 * $6) + Math_fround($44 * $14)) + Math_fround($39 * $10));
       HEAPF32[$13 + 32 >> 2] = $3;
       $5 = Math_fround(Math_fround(Math_fround($34 * $6) + Math_fround($36 * $14)) + Math_fround($38 * $10));
       HEAPF32[$13 + 28 >> 2] = $5;
       $10 = Math_fround(Math_fround(Math_fround($33 * $6) + Math_fround($35 * $14)) + Math_fround($37 * $10));
       HEAPF32[$13 + 24 >> 2] = $10;
      }
      $31 = HEAP32[$7 + 180 >> 2] & 2;
      if ($31) {
       HEAP32[$13 + 36 >> 2] = 0;
       $6 = HEAPF32[$7 + 36 >> 2];
       $42 = $6;
       $33 = HEAPF32[$7 + 4 >> 2];
       $34 = HEAPF32[$7 + 20 >> 2];
       $6 = Math_fround(Math_fround(Math_fround(Math_fround($33 * $10) + Math_fround($34 * $5)) + Math_fround($6 * $3)) * HEAPF32[$7 + 164 >> 2]);
       $14 = HEAPF32[$7 + 40 >> 2];
       $44 = $14;
       $35 = HEAPF32[$7 + 8 >> 2];
       $36 = HEAPF32[$7 + 24 >> 2];
       $14 = Math_fround(Math_fround(Math_fround(Math_fround($10 * $35) + Math_fround($5 * $36)) + Math_fround($3 * $14)) * HEAPF32[$7 + 168 >> 2]);
       $37 = HEAPF32[$7 + 12 >> 2];
       $38 = HEAPF32[$7 + 28 >> 2];
       $39 = HEAPF32[$7 + 44 >> 2];
       $10 = Math_fround(Math_fround(Math_fround(Math_fround($10 * $37) + Math_fround($5 * $38)) + Math_fround($3 * $39)) * HEAPF32[$7 + 172 >> 2]);
       $3 = Math_fround(Math_fround(Math_fround($42 * $6) + Math_fround($44 * $14)) + Math_fround($39 * $10));
       HEAPF32[$13 + 32 >> 2] = $3;
       $5 = Math_fround(Math_fround(Math_fround($34 * $6) + Math_fround($36 * $14)) + Math_fround($38 * $10));
       HEAPF32[$13 + 28 >> 2] = $5;
       $10 = Math_fround(Math_fround(Math_fround($33 * $6) + Math_fround($35 * $14)) + Math_fround($37 * $10));
       HEAPF32[$13 + 24 >> 2] = $10;
      }
      if ($30) {
       HEAP32[$13 + 20 >> 2] = 0;
       $6 = HEAPF32[$8 + 36 >> 2];
       $42 = $6;
       $33 = HEAPF32[$8 + 4 >> 2];
       $34 = HEAPF32[$8 + 20 >> 2];
       $6 = Math_fround(Math_fround(Math_fround(Math_fround($9 * $33) + Math_fround($12 * $34)) + Math_fround($4 * $6)) * HEAPF32[$8 + 164 >> 2]);
       $14 = HEAPF32[$8 + 40 >> 2];
       $44 = $14;
       $35 = HEAPF32[$8 + 8 >> 2];
       $36 = HEAPF32[$8 + 24 >> 2];
       $14 = Math_fround(Math_fround(Math_fround(Math_fround($9 * $35) + Math_fround($12 * $36)) + Math_fround($4 * $14)) * HEAPF32[$8 + 168 >> 2]);
       $37 = HEAPF32[$8 + 12 >> 2];
       $38 = HEAPF32[$8 + 28 >> 2];
       $39 = HEAPF32[$8 + 44 >> 2];
       $9 = Math_fround(Math_fround(Math_fround(Math_fround($9 * $37) + Math_fround($12 * $38)) + Math_fround($4 * $39)) * HEAPF32[$8 + 172 >> 2]);
       $4 = Math_fround(Math_fround(Math_fround($42 * $6) + Math_fround($44 * $14)) + Math_fround($39 * $9));
       HEAPF32[$13 + 16 >> 2] = $4;
       $12 = Math_fround(Math_fround(Math_fround($34 * $6) + Math_fround($36 * $14)) + Math_fround($38 * $9));
       HEAPF32[$13 + 12 >> 2] = $12;
       $9 = Math_fround(Math_fround(Math_fround($33 * $6) + Math_fround($35 * $14)) + Math_fround($37 * $9));
       HEAPF32[$13 + 8 >> 2] = $9;
      }
      if ($31) {
       HEAP32[$13 + 20 >> 2] = 0;
       $6 = HEAPF32[$7 + 36 >> 2];
       $42 = $6;
       $33 = HEAPF32[$7 + 4 >> 2];
       $34 = HEAPF32[$7 + 20 >> 2];
       $6 = Math_fround(Math_fround(Math_fround(Math_fround($33 * $9) + Math_fround($34 * $12)) + Math_fround($6 * $4)) * HEAPF32[$7 + 164 >> 2]);
       $14 = HEAPF32[$7 + 40 >> 2];
       $44 = $14;
       $35 = HEAPF32[$7 + 8 >> 2];
       $36 = HEAPF32[$7 + 24 >> 2];
       $14 = Math_fround(Math_fround(Math_fround(Math_fround($9 * $35) + Math_fround($12 * $36)) + Math_fround($4 * $14)) * HEAPF32[$7 + 168 >> 2]);
       $37 = HEAPF32[$7 + 12 >> 2];
       $38 = HEAPF32[$7 + 28 >> 2];
       $39 = HEAPF32[$7 + 44 >> 2];
       $9 = Math_fround(Math_fround(Math_fround(Math_fround($9 * $37) + Math_fround($12 * $38)) + Math_fround($4 * $39)) * HEAPF32[$7 + 172 >> 2]);
       $4 = Math_fround(Math_fround(Math_fround($42 * $6) + Math_fround($44 * $14)) + Math_fround($39 * $9));
       HEAPF32[$13 + 16 >> 2] = $4;
       $12 = Math_fround(Math_fround(Math_fround($34 * $6) + Math_fround($36 * $14)) + Math_fround($38 * $9));
       HEAPF32[$13 + 12 >> 2] = $12;
       $9 = Math_fround(Math_fround(Math_fround($33 * $6) + Math_fround($35 * $14)) + Math_fround($37 * $9));
       HEAPF32[$13 + 8 >> 2] = $9;
      }
      if (!!(+Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($5 * $5)) + Math_fround($3 * $3)))) > .001)) {
       btSequentialImpulseConstraintSolver__addTorsionalFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20float_2c_20float_29($0, $13 + 24 | 0, $27, $28, $29, HEAPF32[$17 >> 2])
      }
      if (!(+Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($12 * $12)) + Math_fround($4 * $4)))) > .001)) {
       break label$14
      }
      btSequentialImpulseConstraintSolver__addTorsionalFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20float_2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20float_2c_20float_29($0, $13 + 8 | 0, $27, $28, $29, HEAPF32[$17 >> 2]);
     }
     label$22 : {
      if (!(HEAP8[$11 + 124 | 0] & 1 ? !!(HEAPU8[$2 + 72 | 0] & 32) : 0)) {
       $43 = $11 + 176 | 0;
       HEAP32[$43 >> 2] = 0;
       $30 = $11 + 172 | 0;
       $3 = Math_fround($20 - $23);
       $6 = $3;
       $16 = Math_fround($19 - $16);
       $5 = Math_fround($15 - $22);
       $3 = Math_fround(Math_fround(Math_fround($16 * $25) + Math_fround($5 * $41)) + Math_fround($3 * $21));
       $10 = HEAPF32[$26 >> 2];
       $4 = Math_fround($6 - Math_fround($3 * $10));
       HEAPF32[$30 >> 2] = $4;
       $31 = $11 + 168 | 0;
       $12 = HEAPF32[$32 >> 2];
       $5 = Math_fround($5 - Math_fround($3 * $12));
       HEAPF32[$31 >> 2] = $5;
       $17 = $11 + 164 | 0;
       $9 = HEAPF32[$24 >> 2];
       $3 = Math_fround($16 - Math_fround($3 * $9));
       HEAPF32[$17 >> 2] = $3;
       label$25 : {
        if (HEAPU8[$2 + 72 | 0] & 64) {
         break label$25
        }
        $16 = Math_fround(Math_fround(Math_fround($3 * $3) + Math_fround($5 * $5)) + Math_fround($4 * $4));
        if (!($16 > Math_fround(1.1920928955078125e-07))) {
         break label$25
        }
        $10 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($16)));
        $5 = Math_fround($5 * $10);
        HEAPF32[$31 >> 2] = $5;
        $3 = Math_fround($3 * $10);
        HEAPF32[$17 >> 2] = $3;
        $4 = Math_fround($4 * $10);
        HEAPF32[$30 >> 2] = $4;
        if (HEAP8[$8 + 180 | 0] & 1) {
         $21 = HEAPF32[$8 + 172 >> 2];
         $10 = HEAPF32[$8 + 44 >> 2];
         $12 = HEAPF32[$8 + 12 >> 2];
         $9 = HEAPF32[$8 + 28 >> 2];
         $6 = HEAPF32[$8 + 164 >> 2];
         $16 = HEAPF32[$8 + 36 >> 2];
         $19 = HEAPF32[$8 + 4 >> 2];
         $15 = HEAPF32[$8 + 20 >> 2];
         $25 = HEAPF32[$8 + 168 >> 2];
         $20 = HEAPF32[$8 + 40 >> 2];
         $22 = HEAPF32[$8 + 8 >> 2];
         $23 = HEAPF32[$8 + 24 >> 2];
         HEAP32[$43 >> 2] = 0;
         $6 = Math_fround($6 * Math_fround(Math_fround(Math_fround($3 * $19) + Math_fround($5 * $15)) + Math_fround($4 * $16)));
         $14 = Math_fround($15 * $6);
         $15 = Math_fround($25 * Math_fround(Math_fround(Math_fround($3 * $22) + Math_fround($5 * $23)) + Math_fround($4 * $20)));
         $4 = Math_fround($21 * Math_fround(Math_fround(Math_fround($3 * $12) + Math_fround($5 * $9)) + Math_fround($4 * $10)));
         $5 = Math_fround(Math_fround($14 + Math_fround($23 * $15)) + Math_fround($9 * $4));
         HEAPF32[$31 >> 2] = $5;
         $3 = Math_fround(Math_fround(Math_fround($19 * $6) + Math_fround($22 * $15)) + Math_fround($12 * $4));
         HEAPF32[$17 >> 2] = $3;
         $4 = Math_fround(Math_fround(Math_fround($16 * $6) + Math_fround($20 * $15)) + Math_fround($10 * $4));
         HEAPF32[$30 >> 2] = $4;
        }
        if (HEAP8[$7 + 180 | 0] & 1) {
         $21 = HEAPF32[$7 + 172 >> 2];
         $10 = HEAPF32[$7 + 44 >> 2];
         $12 = HEAPF32[$7 + 12 >> 2];
         $9 = HEAPF32[$7 + 28 >> 2];
         $6 = HEAPF32[$7 + 164 >> 2];
         $16 = HEAPF32[$7 + 36 >> 2];
         $19 = HEAPF32[$7 + 4 >> 2];
         $15 = HEAPF32[$7 + 20 >> 2];
         $25 = HEAPF32[$7 + 168 >> 2];
         $20 = HEAPF32[$7 + 40 >> 2];
         $22 = HEAPF32[$7 + 8 >> 2];
         $23 = HEAPF32[$7 + 24 >> 2];
         HEAP32[$43 >> 2] = 0;
         $6 = Math_fround($6 * Math_fround(Math_fround(Math_fround($19 * $3) + Math_fround($15 * $5)) + Math_fround($16 * $4)));
         $14 = Math_fround($15 * $6);
         $15 = Math_fround($25 * Math_fround(Math_fround(Math_fround($3 * $22) + Math_fround($5 * $23)) + Math_fround($4 * $20)));
         $3 = Math_fround($21 * Math_fround(Math_fround(Math_fround($3 * $12) + Math_fround($5 * $9)) + Math_fround($4 * $10)));
         HEAPF32[$31 >> 2] = Math_fround($14 + Math_fround($23 * $15)) + Math_fround($9 * $3);
         HEAPF32[$17 >> 2] = Math_fround(Math_fround($19 * $6) + Math_fround($22 * $15)) + Math_fround($12 * $3);
         HEAPF32[$30 >> 2] = Math_fround(Math_fround($16 * $6) + Math_fround($20 * $15)) + Math_fround($10 * $3);
        }
        $10 = HEAPF32[$13 + 44 >> 2];
        btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $17, $27, $28, $29, $40, $13 - -64 | 0, $13 + 48 | 0, $10, $2, Math_fround(0.0), Math_fround(0.0));
        if (!(HEAPU8[$2 + 72 | 0] & 16)) {
         break label$22
        }
        $43 = $11 + 192 | 0;
        HEAP32[$43 >> 2] = 0;
        $46 = $11 + 188 | 0;
        $4 = HEAPF32[$32 >> 2];
        $12 = HEAPF32[$17 >> 2];
        $5 = HEAPF32[$31 >> 2];
        $9 = HEAPF32[$24 >> 2];
        $3 = Math_fround(Math_fround($4 * $12) - Math_fround($5 * $9));
        $16 = HEAPF32[$26 >> 2];
        $19 = HEAPF32[$30 >> 2];
        $5 = Math_fround(Math_fround($5 * $16) - Math_fround($19 * $4));
        $4 = Math_fround(Math_fround($19 * $9) - Math_fround($16 * $12));
        $12 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($4 * $4)) + Math_fround($3 * $3)))));
        $3 = Math_fround($3 * $12);
        HEAPF32[$46 >> 2] = $3;
        $17 = $11 + 184 | 0;
        $4 = Math_fround($4 * $12);
        HEAPF32[$17 >> 2] = $4;
        $11 = $11 + 180 | 0;
        $5 = Math_fround($5 * $12);
        HEAPF32[$11 >> 2] = $5;
        if (HEAP8[$8 + 180 | 0] & 1) {
         $25 = HEAPF32[$8 + 172 >> 2];
         $12 = HEAPF32[$8 + 44 >> 2];
         $9 = HEAPF32[$8 + 12 >> 2];
         $16 = HEAPF32[$8 + 28 >> 2];
         $21 = HEAPF32[$8 + 164 >> 2];
         $19 = HEAPF32[$8 + 36 >> 2];
         $15 = HEAPF32[$8 + 4 >> 2];
         $20 = HEAPF32[$8 + 20 >> 2];
         $41 = HEAPF32[$8 + 168 >> 2];
         $22 = HEAPF32[$8 + 40 >> 2];
         $23 = HEAPF32[$8 + 8 >> 2];
         $6 = HEAPF32[$8 + 24 >> 2];
         HEAP32[$43 >> 2] = 0;
         $21 = Math_fround($21 * Math_fround(Math_fround(Math_fround($5 * $15) + Math_fround($4 * $20)) + Math_fround($3 * $19)));
         $14 = Math_fround($20 * $21);
         $20 = Math_fround($41 * Math_fround(Math_fround(Math_fround($5 * $23) + Math_fround($4 * $6)) + Math_fround($3 * $22)));
         $3 = Math_fround($25 * Math_fround(Math_fround(Math_fround($5 * $9) + Math_fround($4 * $16)) + Math_fround($3 * $12)));
         $4 = Math_fround(Math_fround($14 + Math_fround($6 * $20)) + Math_fround($16 * $3));
         HEAPF32[$17 >> 2] = $4;
         $5 = Math_fround(Math_fround(Math_fround($15 * $21) + Math_fround($23 * $20)) + Math_fround($9 * $3));
         HEAPF32[$11 >> 2] = $5;
         $3 = Math_fround(Math_fround(Math_fround($19 * $21) + Math_fround($22 * $20)) + Math_fround($12 * $3));
         HEAPF32[$46 >> 2] = $3;
        }
        if (HEAP8[$7 + 180 | 0] & 1) {
         $25 = HEAPF32[$7 + 172 >> 2];
         $12 = HEAPF32[$7 + 44 >> 2];
         $9 = HEAPF32[$7 + 12 >> 2];
         $16 = HEAPF32[$7 + 28 >> 2];
         $21 = HEAPF32[$7 + 164 >> 2];
         $19 = HEAPF32[$7 + 36 >> 2];
         $15 = HEAPF32[$7 + 4 >> 2];
         $20 = HEAPF32[$7 + 20 >> 2];
         $41 = HEAPF32[$7 + 168 >> 2];
         $22 = HEAPF32[$7 + 40 >> 2];
         $23 = HEAPF32[$7 + 8 >> 2];
         $6 = HEAPF32[$7 + 24 >> 2];
         HEAP32[$43 >> 2] = 0;
         $21 = Math_fround($21 * Math_fround(Math_fround(Math_fround($15 * $5) + Math_fround($20 * $4)) + Math_fround($19 * $3)));
         $14 = Math_fround($20 * $21);
         $20 = Math_fround($41 * Math_fround(Math_fround(Math_fround($5 * $23) + Math_fround($4 * $6)) + Math_fround($3 * $22)));
         $3 = Math_fround($25 * Math_fround(Math_fround(Math_fround($5 * $9) + Math_fround($4 * $16)) + Math_fround($3 * $12)));
         HEAPF32[$17 >> 2] = Math_fround($14 + Math_fround($6 * $20)) + Math_fround($16 * $3);
         HEAPF32[$11 >> 2] = Math_fround(Math_fround($15 * $21) + Math_fround($23 * $20)) + Math_fround($9 * $3);
         HEAPF32[$46 >> 2] = Math_fround(Math_fround($19 * $21) + Math_fround($22 * $20)) + Math_fround($12 * $3);
        }
        btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $11, $27, $28, $29, $40, $13 - -64 | 0, $13 + 48 | 0, $10, $2, Math_fround(0.0), Math_fround(0.0));
        break label$22;
       }
       $24 = $11 + 180 | 0;
       label$30 : {
        if (!!(Math_fround(Math_abs($10)) > Math_fround(.7071067690849304))) {
         HEAP32[$17 >> 2] = 0;
         $16 = Math_fround(Math_fround($12 * $12) + Math_fround($10 * $10));
         $5 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($16)));
         $4 = Math_fround($12 * $5);
         HEAPF32[$30 >> 2] = $4;
         $3 = Math_fround(-Math_fround($10 * $5));
         HEAPF32[$31 >> 2] = $3;
         $10 = Math_fround($16 * $5);
         $12 = Math_fround($9 * $3);
         $9 = Math_fround(-Math_fround($9 * $4));
         $5 = Math_fround(0.0);
         break label$30;
        }
        HEAP32[$30 >> 2] = 0;
        $16 = Math_fround(Math_fround($9 * $9) + Math_fround($12 * $12));
        $4 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($16)));
        $3 = Math_fround($9 * $4);
        HEAPF32[$31 >> 2] = $3;
        $5 = Math_fround(-Math_fround($12 * $4));
        HEAPF32[$17 >> 2] = $5;
        $12 = Math_fround($16 * $4);
        $9 = Math_fround($10 * $5);
        $10 = Math_fround(-Math_fround($10 * $3));
        $4 = Math_fround(0.0);
       }
       HEAPF32[$24 >> 2] = $10;
       $26 = $11 + 188 | 0;
       HEAPF32[$26 >> 2] = $12;
       $32 = $11 + 184 | 0;
       HEAPF32[$32 >> 2] = $9;
       if (HEAP8[$8 + 180 | 0] & 1) {
        $21 = HEAPF32[$8 + 172 >> 2];
        $10 = HEAPF32[$8 + 44 >> 2];
        $12 = HEAPF32[$8 + 12 >> 2];
        $9 = HEAPF32[$8 + 28 >> 2];
        $6 = HEAPF32[$8 + 164 >> 2];
        $16 = HEAPF32[$8 + 36 >> 2];
        $19 = HEAPF32[$8 + 4 >> 2];
        $15 = HEAPF32[$8 + 20 >> 2];
        $25 = HEAPF32[$8 + 168 >> 2];
        $20 = HEAPF32[$8 + 40 >> 2];
        $22 = HEAPF32[$8 + 8 >> 2];
        $23 = HEAPF32[$8 + 24 >> 2];
        HEAP32[$43 >> 2] = 0;
        $6 = Math_fround($6 * Math_fround(Math_fround(Math_fround($19 * $5) + Math_fround($15 * $3)) + Math_fround($16 * $4)));
        $14 = Math_fround($15 * $6);
        $15 = Math_fround($25 * Math_fround(Math_fround(Math_fround($5 * $22) + Math_fround($3 * $23)) + Math_fround($4 * $20)));
        $4 = Math_fround($21 * Math_fround(Math_fround(Math_fround($5 * $12) + Math_fround($3 * $9)) + Math_fround($4 * $10)));
        $3 = Math_fround(Math_fround($14 + Math_fround($23 * $15)) + Math_fround($9 * $4));
        HEAPF32[$31 >> 2] = $3;
        $5 = Math_fround(Math_fround(Math_fround($19 * $6) + Math_fround($22 * $15)) + Math_fround($12 * $4));
        HEAPF32[$17 >> 2] = $5;
        $4 = Math_fround(Math_fround(Math_fround($16 * $6) + Math_fround($20 * $15)) + Math_fround($10 * $4));
        HEAPF32[$30 >> 2] = $4;
       }
       if (HEAP8[$7 + 180 | 0] & 1) {
        $21 = HEAPF32[$7 + 172 >> 2];
        $10 = HEAPF32[$7 + 44 >> 2];
        $12 = HEAPF32[$7 + 12 >> 2];
        $9 = HEAPF32[$7 + 28 >> 2];
        $6 = HEAPF32[$7 + 164 >> 2];
        $16 = HEAPF32[$7 + 36 >> 2];
        $19 = HEAPF32[$7 + 4 >> 2];
        $15 = HEAPF32[$7 + 20 >> 2];
        $25 = HEAPF32[$7 + 168 >> 2];
        $20 = HEAPF32[$7 + 40 >> 2];
        $22 = HEAPF32[$7 + 8 >> 2];
        $23 = HEAPF32[$7 + 24 >> 2];
        HEAP32[$43 >> 2] = 0;
        $6 = Math_fround($6 * Math_fround(Math_fround(Math_fround($19 * $5) + Math_fround($15 * $3)) + Math_fround($16 * $4)));
        $14 = Math_fround($15 * $6);
        $15 = Math_fround($25 * Math_fround(Math_fround(Math_fround($5 * $22) + Math_fround($3 * $23)) + Math_fround($4 * $20)));
        $3 = Math_fround($21 * Math_fround(Math_fround(Math_fround($5 * $12) + Math_fround($3 * $9)) + Math_fround($4 * $10)));
        HEAPF32[$31 >> 2] = Math_fround($14 + Math_fround($23 * $15)) + Math_fround($9 * $3);
        HEAPF32[$17 >> 2] = Math_fround(Math_fround($19 * $6) + Math_fround($22 * $15)) + Math_fround($12 * $3);
        HEAPF32[$30 >> 2] = Math_fround(Math_fround($16 * $6) + Math_fround($20 * $15)) + Math_fround($10 * $3);
       }
       $3 = HEAPF32[$13 + 44 >> 2];
       btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $17, $27, $28, $29, $40, $13 - -64 | 0, $13 + 48 | 0, $3, $2, Math_fround(0.0), Math_fround(0.0));
       $17 = HEAP32[$2 + 72 >> 2];
       if ($17 & 16) {
        if (HEAP8[$8 + 180 | 0] & 1) {
         $25 = HEAPF32[$8 + 172 >> 2];
         $4 = HEAPF32[$8 + 44 >> 2];
         $5 = HEAPF32[$8 + 12 >> 2];
         $10 = HEAPF32[$8 + 28 >> 2];
         $21 = HEAPF32[$8 + 164 >> 2];
         $12 = HEAPF32[$8 + 36 >> 2];
         $9 = HEAPF32[$8 + 4 >> 2];
         $16 = HEAPF32[$8 + 20 >> 2];
         $41 = HEAPF32[$8 + 168 >> 2];
         $19 = HEAPF32[$8 + 40 >> 2];
         $15 = HEAPF32[$8 + 8 >> 2];
         $20 = HEAPF32[$8 + 24 >> 2];
         HEAP32[$11 + 192 >> 2] = 0;
         $22 = HEAPF32[$24 >> 2];
         $23 = HEAPF32[$32 >> 2];
         $6 = HEAPF32[$26 >> 2];
         $21 = Math_fround($21 * Math_fround(Math_fround(Math_fround($9 * $22) + Math_fround($16 * $23)) + Math_fround($12 * $6)));
         $14 = Math_fround($9 * $21);
         $9 = Math_fround($41 * Math_fround(Math_fround(Math_fround($22 * $15) + Math_fround($23 * $20)) + Math_fround($6 * $19)));
         $14 = Math_fround($14 + Math_fround($15 * $9));
         $15 = Math_fround($25 * Math_fround(Math_fround(Math_fround($22 * $5) + Math_fround($23 * $10)) + Math_fround($6 * $4)));
         HEAPF32[$24 >> 2] = $14 + Math_fround($5 * $15);
         HEAPF32[$32 >> 2] = Math_fround(Math_fround($16 * $21) + Math_fround($20 * $9)) + Math_fround($10 * $15);
         HEAPF32[$26 >> 2] = Math_fround(Math_fround($12 * $21) + Math_fround($19 * $9)) + Math_fround($4 * $15);
        }
        if (HEAP8[$7 + 180 | 0] & 1) {
         $25 = HEAPF32[$7 + 172 >> 2];
         $4 = HEAPF32[$7 + 44 >> 2];
         $5 = HEAPF32[$7 + 12 >> 2];
         $10 = HEAPF32[$7 + 28 >> 2];
         $21 = HEAPF32[$7 + 164 >> 2];
         $12 = HEAPF32[$7 + 36 >> 2];
         $9 = HEAPF32[$7 + 4 >> 2];
         $16 = HEAPF32[$7 + 20 >> 2];
         $41 = HEAPF32[$7 + 168 >> 2];
         $19 = HEAPF32[$7 + 40 >> 2];
         $15 = HEAPF32[$7 + 8 >> 2];
         $20 = HEAPF32[$7 + 24 >> 2];
         HEAP32[$11 + 192 >> 2] = 0;
         $22 = HEAPF32[$24 >> 2];
         $23 = HEAPF32[$32 >> 2];
         $6 = HEAPF32[$26 >> 2];
         $21 = Math_fround($21 * Math_fround(Math_fround(Math_fround($9 * $22) + Math_fround($16 * $23)) + Math_fround($12 * $6)));
         $14 = Math_fround($9 * $21);
         $9 = Math_fround($41 * Math_fround(Math_fround(Math_fround($22 * $15) + Math_fround($23 * $20)) + Math_fround($6 * $19)));
         $14 = Math_fround($14 + Math_fround($15 * $9));
         $15 = Math_fround($25 * Math_fround(Math_fround(Math_fround($22 * $5) + Math_fround($23 * $10)) + Math_fround($6 * $4)));
         HEAPF32[$24 >> 2] = $14 + Math_fround($5 * $15);
         HEAPF32[$32 >> 2] = Math_fround(Math_fround($16 * $21) + Math_fround($20 * $9)) + Math_fround($10 * $15);
         HEAPF32[$26 >> 2] = Math_fround(Math_fround($12 * $21) + Math_fround($19 * $9)) + Math_fround($4 * $15);
        }
        btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $24, $27, $28, $29, $40, $13 - -64 | 0, $13 + 48 | 0, $3, $2, Math_fround(0.0), Math_fround(0.0));
        $17 = HEAP32[$2 + 72 >> 2];
       }
       if (($17 & 80) != 80) {
        break label$22
       }
       $11 = $11 + 124 | 0;
       HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1;
       break label$22;
      }
      $3 = HEAPF32[$13 + 44 >> 2];
      $17 = $11 + 156 | 0;
      btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $11 + 164 | 0, $27, $28, $29, $40, $13 - -64 | 0, $13 + 48 | 0, $3, $2, HEAPF32[$11 + 140 >> 2], HEAPF32[$17 >> 2]);
      if (!(HEAPU8[$2 + 72 | 0] & 16)) {
       break label$22
      }
      btSequentialImpulseConstraintSolver__addFrictionConstraint_28btVector3_20const__2c_20int_2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btCollisionObject__2c_20btCollisionObject__2c_20float_2c_20btContactSolverInfo_20const__2c_20float_2c_20float_29($0, $11 + 180 | 0, $27, $28, $29, $40, $13 - -64 | 0, $13 + 48 | 0, $3, $2, HEAPF32[$11 + 144 >> 2], HEAPF32[$17 >> 2]);
     }
     btSequentialImpulseConstraintSolver__setFrictionConstraintImpulse_28btSolverConstraint__2c_20int_2c_20int_2c_20btManifoldPoint__2c_20btContactSolverInfo_20const__29($0, $18, $27, $28, $40, $2);
     $18 = HEAP32[$1 + 780 >> 2];
    }
    $45 = $45 + 1 | 0;
    if (($45 | 0) < ($18 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $13 + 80 | 0;
 }
 
 function btSequentialImpulseConstraintSolver__convertContacts_28btPersistentManifold___2c_20int_2c_20btContactSolverInfo_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  if (($2 | 0) >= 1) {
   while (1) {
    btSequentialImpulseConstraintSolver__convertContact_28btPersistentManifold__2c_20btContactSolverInfo_20const__29($0, HEAP32[$1 >> 2], $3);
    $1 = $1 + 4 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   }
  }
 }
 
 function btSequentialImpulseConstraintSolver__solveGroupCacheFriendlySetup_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = 0, $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = Math_fround(0), $42 = 0, $43 = 0, $44 = Math_fround(0), $45 = Math_fround(0), $46 = Math_fround(0), $47 = Math_fround(0), $48 = Math_fround(0), $49 = Math_fround(0), $50 = Math_fround(0), $51 = Math_fround(0), $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = Math_fround(0), $58 = Math_fround(0), $59 = Math_fround(0), $60 = Math_fround(0), $61 = Math_fround(0), $62 = Math_fround(0), $63 = Math_fround(0), $64 = Math_fround(0), $65 = Math_fround(0), $66 = Math_fround(0), $67 = Math_fround(0), $68 = Math_fround(0);
  $19 = global$0 - 256 | 0;
  global$0 = $19;
  HEAP32[$0 + 188 >> 2] = -1;
  CProfileSample__CProfileSample_28char_20const__29($19 + 248 | 0, 20232);
  $8 = HEAP32[$7 + 72 >> 2];
  if (($8 | 0) != HEAP32[$0 + 224 >> 2]) {
   HEAP32[$0 + 224 >> 2] = $8;
   HEAP32[$0 + 220 >> 2] = 536;
   HEAP32[$0 + 216 >> 2] = 535;
   HEAP32[$0 + 212 >> 2] = 534;
  }
  HEAP32[$0 + 184 >> 2] = 0;
  if (($2 | 0) >= 1) {
   $8 = $1;
   $10 = $2;
   while (1) {
    HEAP32[HEAP32[$8 >> 2] + 212 >> 2] = -1;
    $8 = $8 + 4 | 0;
    $10 = $10 + -1 | 0;
    if ($10) {
     continue
    }
    break;
   };
  }
  $21 = HEAP32[$0 + 12 >> 2];
  if (($21 | 0) <= ($2 | 0)) {
   $21 = $2 + 1 | 0;
   $17 = 0;
   label$5 : {
    if (!$21) {
     break label$5
    }
    $17 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($21, 244));
   }
   $14 = HEAP32[$0 + 8 >> 2];
   if (($14 | 0) >= 1) {
    $13 = 64;
    while (1) {
     $10 = $13 + HEAP32[$0 + 16 >> 2] | 0;
     $12 = $10 + -64 | 0;
     $28 = HEAP32[$12 >> 2];
     $16 = HEAP32[$12 + 4 >> 2];
     $8 = $13 + $17 | 0;
     $11 = $8 + -64 | 0;
     $9 = $11;
     HEAP32[$9 >> 2] = $28;
     HEAP32[$9 + 4 >> 2] = $16;
     $15 = $12 + 8 | 0;
     $12 = HEAP32[$15 >> 2];
     $9 = HEAP32[$15 + 4 >> 2];
     $16 = $11 + 8 | 0;
     HEAP32[$16 >> 2] = $12;
     HEAP32[$16 + 4 >> 2] = $9;
     $12 = $10 + -48 | 0;
     $15 = $12 + 8 | 0;
     $28 = HEAP32[$15 >> 2];
     $16 = HEAP32[$15 + 4 >> 2];
     $11 = $8 + -48 | 0;
     $9 = $11 + 8 | 0;
     HEAP32[$9 >> 2] = $28;
     HEAP32[$9 + 4 >> 2] = $16;
     $9 = HEAP32[$12 + 4 >> 2];
     HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
     HEAP32[$11 + 4 >> 2] = $9;
     $12 = $10 + -32 | 0;
     $15 = $12 + 8 | 0;
     $28 = HEAP32[$15 >> 2];
     $16 = HEAP32[$15 + 4 >> 2];
     $11 = $8 + -32 | 0;
     $9 = $11 + 8 | 0;
     HEAP32[$9 >> 2] = $28;
     HEAP32[$9 + 4 >> 2] = $16;
     $9 = HEAP32[$12 + 4 >> 2];
     HEAP32[$11 >> 2] = HEAP32[$12 >> 2];
     HEAP32[$11 + 4 >> 2] = $9;
     $12 = $10 + -16 | 0;
     $28 = HEAP32[$12 >> 2];
     $16 = HEAP32[$12 + 4 >> 2];
     $11 = $8 + -16 | 0;
     $9 = $11;
     HEAP32[$9 >> 2] = $28;
     HEAP32[$9 + 4 >> 2] = $16;
     $15 = $12 + 8 | 0;
     $12 = HEAP32[$15 >> 2];
     $9 = HEAP32[$15 + 4 >> 2];
     $16 = $11 + 8 | 0;
     HEAP32[$16 >> 2] = $12;
     HEAP32[$16 + 4 >> 2] = $9;
     memcpy($8, $10, 180);
     $13 = $13 + 244 | 0;
     $14 = $14 + -1 | 0;
     if ($14) {
      continue
     }
     break;
    };
   }
   $8 = HEAP32[$0 + 16 >> 2];
   if ($8) {
    if (HEAPU8[$0 + 20 | 0]) {
     btAlignedFreeInternal_28void__29($8)
    }
    HEAP32[$0 + 16 >> 2] = 0;
   }
   HEAP32[$0 + 16 >> 2] = $17;
   HEAP32[$0 + 12 >> 2] = $21;
   HEAP8[$0 + 20 | 0] = 1;
  }
  $12 = memset($19, 0, 244);
  $10 = HEAP32[$0 + 8 >> 2];
  if (($10 | 0) <= -1) {
   if (($21 | 0) <= -1) {
    $8 = HEAP32[$0 + 16 >> 2];
    if ($8) {
     if (HEAPU8[$0 + 20 | 0]) {
      btAlignedFreeInternal_28void__29($8)
     }
     HEAP32[$0 + 16 >> 2] = 0;
    }
    HEAP32[$0 + 12 >> 2] = 0;
    HEAP32[$0 + 16 >> 2] = 0;
    HEAP8[$0 + 20 | 0] = 1;
   }
   $13 = Math_imul($10, 244);
   $21 = $12 - -64 | 0;
   $14 = $12 + 48 | 0;
   $11 = $12 + 32 | 0;
   $17 = $12 + 16 | 0;
   while (1) {
    $16 = HEAP32[$12 + 4 >> 2];
    $8 = $13 + HEAP32[$0 + 16 >> 2] | 0;
    HEAP32[$8 >> 2] = HEAP32[$12 >> 2];
    HEAP32[$8 + 4 >> 2] = $16;
    $15 = $12 + 8 | 0;
    $19 = HEAP32[$15 >> 2];
    $9 = HEAP32[$15 + 4 >> 2];
    $16 = $8 + 8 | 0;
    HEAP32[$16 >> 2] = $19;
    HEAP32[$16 + 4 >> 2] = $9;
    $16 = HEAP32[$17 + 4 >> 2];
    $9 = $8 + 16 | 0;
    HEAP32[$9 >> 2] = HEAP32[$17 >> 2];
    HEAP32[$9 + 4 >> 2] = $16;
    $15 = $17 + 8 | 0;
    $19 = HEAP32[$15 >> 2];
    $9 = HEAP32[$15 + 4 >> 2];
    $16 = $8 + 24 | 0;
    HEAP32[$16 >> 2] = $19;
    HEAP32[$16 + 4 >> 2] = $9;
    $16 = HEAP32[$11 + 4 >> 2];
    $9 = $8 + 32 | 0;
    HEAP32[$9 >> 2] = HEAP32[$11 >> 2];
    HEAP32[$9 + 4 >> 2] = $16;
    $15 = $11 + 8 | 0;
    $19 = HEAP32[$15 >> 2];
    $9 = HEAP32[$15 + 4 >> 2];
    $16 = $8 + 40 | 0;
    HEAP32[$16 >> 2] = $19;
    HEAP32[$16 + 4 >> 2] = $9;
    $16 = HEAP32[$14 + 4 >> 2];
    $9 = $8 + 48 | 0;
    HEAP32[$9 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$9 + 4 >> 2] = $16;
    $15 = $14 + 8 | 0;
    $19 = HEAP32[$15 >> 2];
    $9 = HEAP32[$15 + 4 >> 2];
    $16 = $8 + 56 | 0;
    HEAP32[$16 >> 2] = $19;
    HEAP32[$16 + 4 >> 2] = $9;
    memcpy($8 - -64 | 0, $21, 180);
    $13 = $13 + 244 | 0;
    $8 = $10 + 1 | 0;
    $19 = $8 >>> 0 >= $10 >>> 0;
    $10 = $8;
    if ($19) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 8 >> 2] = 0;
  if (($2 | 0) >= 1) {
   while (1) {
    $10 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, HEAP32[$1 >> 2], HEAPF32[$7 + 12 >> 2]);
    $8 = HEAP32[$1 >> 2];
    label$18 : {
     if (!$8) {
      break label$18
     }
     if (!(HEAP32[$8 + 252 >> 2] & 2)) {
      break label$18
     }
     if (HEAPF32[$8 + 404 >> 2] == Math_fround(0.0)) {
      break label$18
     }
     $14 = HEAP32[$0 + 16 >> 2];
     $13 = HEAP32[$8 + 564 >> 2];
     if ($13 & 2) {
      btRigidBody__computeGyroscopicForceExplicit_28float_29_20const($12, $8, HEAPF32[$7 + 84 >> 2]);
      $22 = HEAPF32[$8 + 364 >> 2];
      $23 = HEAPF32[$8 + 332 >> 2];
      $29 = HEAPF32[$8 + 348 >> 2];
      $27 = HEAPF32[$8 + 360 >> 2];
      $30 = HEAPF32[$8 + 328 >> 2];
      $31 = HEAPF32[$8 + 344 >> 2];
      $13 = Math_imul($10, 244) + $14 | 0;
      $18 = HEAPF32[$12 >> 2];
      $20 = HEAPF32[$12 + 4 >> 2];
      $24 = HEAPF32[$12 + 8 >> 2];
      $25 = HEAPF32[$7 + 12 >> 2];
      HEAPF32[$13 + 224 >> 2] = HEAPF32[$13 + 224 >> 2] - Math_fround(Math_fround(Math_fround(Math_fround($18 * HEAPF32[$8 + 324 >> 2]) + Math_fround($20 * HEAPF32[$8 + 340 >> 2])) + Math_fround($24 * HEAPF32[$8 + 356 >> 2])) * $25);
      $11 = $13 + 228 | 0;
      HEAPF32[$11 >> 2] = HEAPF32[$11 >> 2] - Math_fround($25 * Math_fround(Math_fround(Math_fround($18 * $30) + Math_fround($20 * $31)) + Math_fround($24 * $27)));
      $13 = $13 + 232 | 0;
      HEAPF32[$13 >> 2] = HEAPF32[$13 >> 2] - Math_fround($25 * Math_fround(Math_fround(Math_fround($18 * $23) + Math_fround($20 * $29)) + Math_fround($24 * $22)));
      $13 = HEAP32[$8 + 564 >> 2];
     }
     if ($13 & 4) {
      btRigidBody__computeGyroscopicImpulseImplicit_World_28float_29_20const($12, $8, HEAPF32[$7 + 12 >> 2]);
      $18 = HEAPF32[$12 + 8 >> 2];
      $20 = HEAPF32[$12 + 4 >> 2];
      $13 = Math_imul($10, 244) + $14 | 0;
      HEAPF32[$13 + 224 >> 2] = HEAPF32[$12 >> 2] + HEAPF32[$13 + 224 >> 2];
      $11 = $13 + 228 | 0;
      HEAPF32[$11 >> 2] = $20 + HEAPF32[$11 >> 2];
      $13 = $13 + 232 | 0;
      HEAPF32[$13 >> 2] = $18 + HEAPF32[$13 >> 2];
      $13 = HEAP32[$8 + 564 >> 2];
     }
     if (!($13 & 8)) {
      break label$18
     }
     btRigidBody__computeGyroscopicImpulseImplicit_Body_28float_29_20const($12, $8, HEAPF32[$7 + 12 >> 2]);
     $18 = HEAPF32[$12 + 8 >> 2];
     $20 = HEAPF32[$12 + 4 >> 2];
     $8 = Math_imul($10, 244) + $14 | 0;
     HEAPF32[$8 + 224 >> 2] = HEAPF32[$12 >> 2] + HEAPF32[$8 + 224 >> 2];
     $10 = $8 + 228 | 0;
     HEAPF32[$10 >> 2] = $20 + HEAPF32[$10 >> 2];
     $8 = $8 + 232 | 0;
     HEAPF32[$8 >> 2] = $18 + HEAPF32[$8 >> 2];
    }
    $1 = $1 + 4 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   }
  }
  if (($6 | 0) >= 1) {
   $8 = $5;
   $10 = $6;
   while (1) {
    $1 = HEAP32[$8 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1);
    HEAP32[$1 + 36 >> 2] = 0;
    $8 = $8 + 4 | 0;
    $10 = $10 + -1 | 0;
    if ($10) {
     continue
    }
    break;
   };
  }
  $1 = HEAP32[$0 + 168 >> 2];
  label$23 : {
   if (($1 | 0) >= ($6 | 0)) {
    break label$23
   }
   if (HEAP32[$0 + 172 >> 2] >= ($6 | 0)) {
    break label$23
   }
   label$24 : {
    if (!$6) {
     $10 = 0;
     break label$24;
    }
    $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 3);
    $1 = HEAP32[$0 + 168 >> 2];
   }
   if (($1 | 0) >= 1) {
    $8 = 0;
    while (1) {
     $15 = $8 + HEAP32[$0 + 176 >> 2] | 0;
     $2 = HEAP32[$15 >> 2];
     $16 = HEAP32[$15 + 4 >> 2];
     $9 = $8 + $10 | 0;
     HEAP32[$9 >> 2] = $2;
     HEAP32[$9 + 4 >> 2] = $16;
     $8 = $8 + 8 | 0;
     $1 = $1 + -1 | 0;
     if ($1) {
      continue
     }
     break;
    };
   }
   $8 = HEAP32[$0 + 176 >> 2];
   if ($8) {
    if (HEAPU8[$0 + 180 | 0]) {
     btAlignedFreeInternal_28void__29($8)
    }
    HEAP32[$0 + 176 >> 2] = 0;
   }
   HEAP32[$0 + 176 >> 2] = $10;
   HEAP32[$0 + 172 >> 2] = $6;
   HEAP8[$0 + 180 | 0] = 1;
  }
  HEAP32[$0 + 168 >> 2] = $6;
  label$30 : {
   if (($6 | 0) < 1) {
    $13 = 0;
    break label$30;
   }
   $2 = 0;
   $10 = $5;
   $14 = $6;
   $13 = 0;
   while (1) {
    $11 = HEAP32[$0 + 176 >> 2];
    $1 = HEAP32[$10 >> 2];
    $8 = HEAP32[$1 + 44 >> 2];
    if ($8) {
     HEAP32[$8 >> 2] = 0;
     HEAP32[$8 + 4 >> 2] = 0;
     $9 = $8 + 56 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $8 + 48 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $8 + 40 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $8 + 32 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $8 + 24 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $8 + 16 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $8 + 8 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $1 = HEAP32[$10 >> 2];
    }
    $8 = $2 + $11 | 0;
    $2 = $2 + 8 | 0;
    $10 = $10 + 4 | 0;
    label$34 : {
     if (HEAPU8[$1 + 20 | 0]) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, $8);
      $1 = HEAP32[$8 >> 2];
      break label$34;
     }
     HEAP32[$8 >> 2] = 0;
     HEAP32[$8 + 4 >> 2] = 0;
     $1 = 0;
    }
    $13 = $1 + $13 | 0;
    $14 = $14 + -1 | 0;
    if ($14) {
     continue
    }
    break;
   };
  }
  $1 = HEAP32[$0 + 48 >> 2];
  label$36 : {
   if (($1 | 0) >= ($13 | 0)) {
    break label$36
   }
   if (HEAP32[$0 + 52 >> 2] >= ($13 | 0)) {
    break label$36
   }
   label$37 : {
    if (!$13) {
     $10 = 0;
     break label$37;
    }
    $10 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(Math_imul($13, 152));
    $1 = HEAP32[$0 + 48 >> 2];
   }
   if (($1 | 0) >= 1) {
    $8 = 0;
    while (1) {
     memcpy($8 + $10 | 0, $8 + HEAP32[$0 + 56 >> 2] | 0, 152);
     $8 = $8 + 152 | 0;
     $1 = $1 + -1 | 0;
     if ($1) {
      continue
     }
     break;
    };
   }
   $8 = HEAP32[$0 + 56 >> 2];
   if ($8) {
    if (HEAPU8[$0 + 60 | 0]) {
     btAlignedFreeInternal_28void__29($8)
    }
    HEAP32[$0 + 56 >> 2] = 0;
   }
   HEAP32[$0 + 56 >> 2] = $10;
   HEAP32[$0 + 52 >> 2] = $13;
   HEAP8[$0 + 60 | 0] = 1;
  }
  HEAP32[$0 + 48 >> 2] = $13;
  if (($6 | 0) >= 1) {
   $8 = HEAP32[$0 + 176 >> 2];
   while (1) {
    $42 = $37 << 3;
    $14 = $42 + $8 | 0;
    if (HEAP32[$14 >> 2]) {
     $17 = ($37 << 2) + $5 | 0;
     $13 = HEAP32[$17 >> 2];
     $1 = HEAP32[$13 + 32 >> 2];
     $38 = HEAP32[$0 + 56 >> 2];
     $10 = HEAP32[$13 + 28 >> 2];
     $11 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, $10, HEAPF32[$7 + 12 >> 2]);
     $19 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, $1, HEAPF32[$7 + 12 >> 2]);
     $39 = Math_imul($43, 152);
     $40 = HEAP32[$0 + 16 >> 2];
     $8 = HEAP32[$13 + 24 >> 2];
     $21 = ($8 | 0) > 0 ? $8 : HEAP32[$7 + 20 >> 2];
     if (($21 | 0) > HEAP32[$0 + 184 >> 2]) {
      HEAP32[$0 + 184 >> 2] = $21
     }
     $15 = $38 + $39 | 0;
     if (HEAP32[$14 >> 2] >= 1) {
      $2 = 0;
      $8 = $15;
      while (1) {
       $8 = memset($8, 0, 152);
       $9 = $8 + 120 | 0;
       HEAP32[$9 >> 2] = -8388609;
       HEAP32[$9 + 4 >> 2] = 2139095039;
       HEAP32[$8 + 148 >> 2] = $19;
       HEAP32[$8 + 144 >> 2] = $11;
       $9 = $8 + 96 | 0;
       HEAP32[$9 >> 2] = 0;
       HEAP32[$9 + 4 >> 2] = 0;
       HEAP32[$8 + 136 >> 2] = $21;
       $8 = $8 + 152 | 0;
       $2 = $2 + 1 | 0;
       if (($2 | 0) < HEAP32[$14 >> 2]) {
        continue
       }
       break;
      };
     }
     $2 = Math_imul($11, 244) + $40 | 0;
     $9 = $2;
     HEAP32[$9 + 144 >> 2] = 0;
     HEAP32[$9 + 148 >> 2] = 0;
     $9 = $9 + 152 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 160 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 168 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     HEAP32[$2 + 64 >> 2] = 0;
     HEAP32[$2 + 68 >> 2] = 0;
     $9 = $2 + 88 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 80 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $2 + 72 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $11 = Math_imul($19, 244) + $40 | 0;
     $9 = $11;
     HEAP32[$9 + 144 >> 2] = 0;
     HEAP32[$9 + 148 >> 2] = 0;
     $9 = $9 + 152 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $11 + 160 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $11 + 168 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $11;
     HEAP32[$9 + 64 >> 2] = 0;
     HEAP32[$9 + 68 >> 2] = 0;
     $9 = $9 + 72 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $11 + 80 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     $9 = $11 + 88 | 0;
     HEAP32[$9 >> 2] = 0;
     HEAP32[$9 + 4 >> 2] = 0;
     HEAP32[$15 + 116 >> 2] = HEAP32[$7 + 40 >> 2];
     HEAP32[$12 + 28 >> 2] = $15 + 112;
     HEAP32[$12 + 24 >> 2] = 38;
     HEAP32[$12 + 20 >> 2] = $15 + 32;
     HEAP32[$12 + 16 >> 2] = $15 + 48;
     HEAP32[$12 + 12 >> 2] = $15;
     HEAP32[$12 + 8 >> 2] = $15 + 16;
     HEAP32[$12 + 40 >> 2] = $15 + 124;
     HEAP32[$12 + 36 >> 2] = $15 + 120;
     HEAP32[$12 + 32 >> 2] = $15 + 116;
     HEAP32[$12 + 4 >> 2] = HEAP32[$7 + 32 >> 2];
     HEAP32[$12 + 48 >> 2] = HEAP32[$7 + 4 >> 2];
     HEAPF32[$12 >> 2] = Math_fround(1.0) / HEAPF32[$7 + 12 >> 2];
     HEAP32[$12 + 44 >> 2] = HEAP32[$7 + 20 >> 2];
     $8 = HEAP32[$17 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 20 >> 2]]($8, $12);
     if (HEAP32[$14 >> 2] >= 1) {
      $8 = ($38 + $39 | 0) + 132 | 0;
      $15 = $11 + 232 | 0;
      $40 = $11 + 228 | 0;
      $38 = $11 + 224 | 0;
      $39 = $11 + 216 | 0;
      $52 = $11 + 212 | 0;
      $53 = $11 + 208 | 0;
      $19 = $11 + 240 | 0;
      $54 = $2 + 232 | 0;
      $55 = $2 + 228 | 0;
      $56 = $2 + 224 | 0;
      $28 = $2 + 216 | 0;
      $16 = $2 + 212 | 0;
      $9 = $2 + 208 | 0;
      $21 = $2 + 240 | 0;
      $11 = 0;
      while (1) {
       $2 = $8 + -8 | 0;
       $18 = HEAPF32[HEAP32[$17 >> 2] + 16 >> 2];
       if (!!(HEAPF32[$2 >> 2] >= $18)) {
        HEAPF32[$2 >> 2] = $18
       }
       $2 = $8 + -12 | 0;
       $18 = Math_fround(-$18);
       if (!!(HEAPF32[$2 >> 2] <= $18)) {
        HEAPF32[$2 >> 2] = $18
       }
       HEAP32[$8 >> 2] = $13;
       $2 = HEAP32[$13 + 28 >> 2];
       $25 = HEAPF32[$2 + 328 >> 2];
       $22 = HEAPF32[$2 + 332 >> 2];
       $23 = HEAPF32[$2 + 608 >> 2];
       $29 = HEAPF32[$2 + 348 >> 2];
       $27 = HEAPF32[$2 + 340 >> 2];
       $30 = HEAPF32[$2 + 344 >> 2];
       $31 = HEAPF32[$2 + 612 >> 2];
       $26 = HEAPF32[$2 + 364 >> 2];
       $20 = HEAPF32[$2 + 356 >> 2];
       $24 = HEAPF32[$2 + 360 >> 2];
       $33 = HEAPF32[$2 + 604 >> 2];
       $34 = HEAPF32[$2 + 324 >> 2];
       HEAP32[$8 + -56 >> 2] = 0;
       $18 = HEAPF32[$8 + -132 >> 2];
       $32 = Math_fround($20 * $18);
       $20 = HEAPF32[$8 + -128 >> 2];
       $32 = Math_fround($32 + Math_fround($24 * $20));
       $24 = HEAPF32[$8 + -124 >> 2];
       HEAPF32[$8 + -60 >> 2] = $31 * Math_fround($32 + Math_fround($26 * $24));
       HEAPF32[$8 + -64 >> 2] = $23 * Math_fround(Math_fround(Math_fround($18 * $27) + Math_fround($20 * $30)) + Math_fround($24 * $29));
       HEAPF32[$8 + -68 >> 2] = $33 * Math_fround(Math_fround(Math_fround($34 * $18) + Math_fround($25 * $20)) + Math_fround($22 * $24));
       $2 = HEAP32[$13 + 32 >> 2];
       $29 = HEAPF32[$2 + 328 >> 2];
       $27 = HEAPF32[$2 + 332 >> 2];
       $30 = HEAPF32[$2 + 608 >> 2];
       $31 = HEAPF32[$2 + 348 >> 2];
       $26 = HEAPF32[$2 + 340 >> 2];
       $33 = HEAPF32[$2 + 344 >> 2];
       $34 = HEAPF32[$2 + 612 >> 2];
       $32 = HEAPF32[$2 + 364 >> 2];
       $22 = HEAPF32[$2 + 356 >> 2];
       $23 = HEAPF32[$2 + 360 >> 2];
       $35 = HEAPF32[$2 + 604 >> 2];
       $41 = HEAPF32[$2 + 324 >> 2];
       HEAP32[$8 + -40 >> 2] = 0;
       $25 = HEAPF32[$8 + -100 >> 2];
       $36 = Math_fround($22 * $25);
       $22 = HEAPF32[$8 + -96 >> 2];
       $36 = Math_fround($36 + Math_fround($23 * $22));
       $23 = HEAPF32[$8 + -92 >> 2];
       HEAPF32[$8 + -44 >> 2] = $34 * Math_fround($36 + Math_fround($32 * $23));
       HEAPF32[$8 + -48 >> 2] = $30 * Math_fround(Math_fround(Math_fround($25 * $26) + Math_fround($22 * $33)) + Math_fround($23 * $31));
       HEAPF32[$8 + -52 >> 2] = $35 * Math_fround(Math_fround(Math_fround($41 * $25) + Math_fround($29 * $22)) + Math_fround($27 * $23));
       $32 = Math_fround(0.0);
       $29 = HEAPF32[$8 + -116 >> 2];
       $27 = HEAPF32[$10 + 404 >> 2];
       $30 = HEAPF32[$8 + -112 >> 2];
       $31 = HEAPF32[$8 + -108 >> 2];
       $35 = Math_fround(Math_fround(Math_fround(Math_fround($29 * Math_fround($29 * $27)) + Math_fround($30 * Math_fround($27 * $30))) + Math_fround($31 * Math_fround($27 * $31))) + Math_fround(Math_fround(Math_fround($18 * Math_fround(Math_fround(Math_fround($18 * HEAPF32[$10 + 324 >> 2]) + Math_fround($20 * HEAPF32[$10 + 328 >> 2])) + Math_fround($24 * HEAPF32[$10 + 332 >> 2]))) + Math_fround($20 * Math_fround(Math_fround(Math_fround($18 * HEAPF32[$10 + 340 >> 2]) + Math_fround($20 * HEAPF32[$10 + 344 >> 2])) + Math_fround($24 * HEAPF32[$10 + 348 >> 2])))) + Math_fround($24 * Math_fround(Math_fround(Math_fround($18 * HEAPF32[$10 + 356 >> 2]) + Math_fround($20 * HEAPF32[$10 + 360 >> 2])) + Math_fround($24 * HEAPF32[$10 + 364 >> 2])))));
       $27 = HEAPF32[$8 + -84 >> 2];
       $26 = HEAPF32[$1 + 404 >> 2];
       $33 = HEAPF32[$8 + -80 >> 2];
       $34 = HEAPF32[$8 + -76 >> 2];
       $26 = Math_fround(Math_fround($35 + Math_fround(Math_fround(Math_fround($27 * Math_fround($27 * $26)) + Math_fround($33 * Math_fround($26 * $33))) + Math_fround($34 * Math_fround($26 * $34)))) + Math_fround(Math_fround(Math_fround($25 * Math_fround(Math_fround(Math_fround($25 * HEAPF32[$1 + 324 >> 2]) + Math_fround($22 * HEAPF32[$1 + 328 >> 2])) + Math_fround($23 * HEAPF32[$1 + 332 >> 2]))) + Math_fround($22 * Math_fround(Math_fround(Math_fround($25 * HEAPF32[$1 + 340 >> 2]) + Math_fround($22 * HEAPF32[$1 + 344 >> 2])) + Math_fround($23 * HEAPF32[$1 + 348 >> 2])))) + Math_fround($23 * Math_fround(Math_fround(Math_fround($25 * HEAPF32[$1 + 356 >> 2]) + Math_fround($22 * HEAPF32[$1 + 360 >> 2])) + Math_fround($23 * HEAPF32[$1 + 364 >> 2])))));
       $26 = Math_fround(Math_abs($26)) > Math_fround(1.1920928955078125e-07) ? Math_fround(Math_fround(1.0) / $26) : Math_fround(0.0);
       HEAPF32[$8 + -24 >> 2] = $26;
       $35 = Math_fround(0.0);
       $41 = Math_fround(0.0);
       $44 = Math_fround(0.0);
       $45 = Math_fround(0.0);
       $46 = Math_fround(0.0);
       $36 = Math_fround(0.0);
       if (HEAP32[$21 >> 2]) {
        $46 = HEAPF32[$55 >> 2];
        $45 = HEAPF32[$56 >> 2];
        $35 = HEAPF32[$28 >> 2];
        $41 = HEAPF32[$16 >> 2];
        $44 = HEAPF32[$9 >> 2];
        $36 = HEAPF32[$54 >> 2];
       }
       $47 = Math_fround(0.0);
       $48 = Math_fround(0.0);
       $49 = Math_fround(0.0);
       $50 = Math_fround(0.0);
       $51 = Math_fround(0.0);
       if (HEAP32[$19 >> 2]) {
        $50 = HEAPF32[$40 >> 2];
        $49 = HEAPF32[$38 >> 2];
        $32 = HEAPF32[$39 >> 2];
        $47 = HEAPF32[$52 >> 2];
        $48 = HEAPF32[$53 >> 2];
        $51 = HEAPF32[$15 >> 2];
       }
       $57 = HEAPF32[$10 + 380 >> 2];
       $58 = HEAPF32[$10 + 372 >> 2];
       $59 = HEAPF32[$10 + 376 >> 2];
       $60 = HEAPF32[$10 + 396 >> 2];
       $61 = HEAPF32[$10 + 388 >> 2];
       $62 = HEAPF32[$10 + 392 >> 2];
       $63 = HEAPF32[$1 + 380 >> 2];
       $64 = HEAPF32[$1 + 372 >> 2];
       $65 = HEAPF32[$1 + 376 >> 2];
       $66 = HEAPF32[$1 + 396 >> 2];
       $67 = HEAPF32[$1 + 388 >> 2];
       $68 = HEAPF32[$1 + 392 >> 2];
       HEAP32[$8 + -32 >> 2] = 0;
       $2 = $8 + -20 | 0;
       HEAPF32[$2 >> 2] = Math_fround($26 * HEAPF32[$2 >> 2]) + Math_fround($26 * Math_fround(Math_fround(0.0) - Math_fround(HEAPF32[$12 + 48 >> 2] * Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($29 * Math_fround($44 + $58)) + Math_fround($30 * Math_fround($41 + $59))) + Math_fround($31 * Math_fround($35 + $57))) + Math_fround(Math_fround(Math_fround($18 * Math_fround($45 + $61)) + Math_fround($20 * Math_fround($46 + $62))) + Math_fround($24 * Math_fround($36 + $60)))) + Math_fround(Math_fround(Math_fround(Math_fround($27 * Math_fround($48 + $64)) + Math_fround($33 * Math_fround($47 + $65))) + Math_fround($34 * Math_fround($32 + $63))) + Math_fround(Math_fround(Math_fround($25 * Math_fround($49 + $67)) + Math_fround($22 * Math_fround($50 + $68))) + Math_fround($23 * Math_fround($51 + $66))))))));
       $8 = $8 + 152 | 0;
       $11 = $11 + 1 | 0;
       if (($11 | 0) < HEAP32[$14 >> 2]) {
        continue
       }
       break;
      };
     }
     $8 = HEAP32[$0 + 176 >> 2];
    }
    $43 = $43 + HEAP32[$8 + $42 >> 2] | 0;
    $37 = $37 + 1 | 0;
    if (($6 | 0) != ($37 | 0)) {
     continue
    }
    break;
   };
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $3, $4, $7);
  $10 = HEAP32[$0 + 68 >> 2];
  $2 = HEAP32[$0 + 28 >> 2];
  $14 = HEAP32[$0 + 128 >> 2];
  $13 = HEAP32[$0 + 48 >> 2];
  label$55 : {
   if (($14 | 0) >= ($13 | 0)) {
    break label$55
   }
   if (HEAP32[$0 + 132 >> 2] >= ($13 | 0)) {
    break label$55
   }
   label$56 : {
    if (!$13) {
     $11 = 0;
     break label$56;
    }
    $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13 << 2);
    $14 = HEAP32[$0 + 128 >> 2];
   }
   $17 = HEAP32[$0 + 136 >> 2];
   label$58 : {
    label$59 : {
     if (($14 | 0) >= 1) {
      $8 = $11;
      $1 = $17;
      while (1) {
       HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
       $8 = $8 + 4 | 0;
       $1 = $1 + 4 | 0;
       $14 = $14 + -1 | 0;
       if ($14) {
        continue
       }
       break;
      };
      break label$59;
     }
     if (!$17) {
      break label$58
     }
    }
    if (HEAPU8[$0 + 140 | 0]) {
     btAlignedFreeInternal_28void__29($17)
    }
    HEAP32[$0 + 136 >> 2] = 0;
   }
   HEAP32[$0 + 136 >> 2] = $11;
   HEAP32[$0 + 132 >> 2] = $13;
   HEAP8[$0 + 140 | 0] = 1;
  }
  HEAP32[$0 + 128 >> 2] = $13;
  label$63 : {
   if (HEAPU8[$7 + 72 | 0] & 16) {
    $14 = HEAP32[$0 + 108 >> 2];
    $11 = $2 << 1;
    label$65 : {
     if (($14 | 0) >= ($11 | 0)) {
      break label$65
     }
     if (HEAP32[$0 + 112 >> 2] >= ($11 | 0)) {
      break label$65
     }
     label$66 : {
      if (!$2) {
       $17 = 0;
       break label$66;
      }
      $17 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($2 << 3);
      $14 = HEAP32[$0 + 108 >> 2];
     }
     $19 = HEAP32[$0 + 116 >> 2];
     label$68 : {
      label$69 : {
       if (($14 | 0) >= 1) {
        $8 = $17;
        $1 = $19;
        while (1) {
         HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
         $8 = $8 + 4 | 0;
         $1 = $1 + 4 | 0;
         $14 = $14 + -1 | 0;
         if ($14) {
          continue
         }
         break;
        };
        break label$69;
       }
       if (!$19) {
        break label$68
       }
      }
      if (HEAPU8[$0 + 120 | 0]) {
       btAlignedFreeInternal_28void__29($19)
      }
      HEAP32[$0 + 116 >> 2] = 0;
     }
     HEAP32[$0 + 116 >> 2] = $17;
     HEAP32[$0 + 112 >> 2] = $11;
     HEAP8[$0 + 120 | 0] = 1;
    }
    HEAP32[$0 + 108 >> 2] = $11;
    break label$63;
   }
   $14 = HEAP32[$0 + 108 >> 2];
   label$73 : {
    if (($14 | 0) >= ($2 | 0)) {
     break label$73
    }
    if (HEAP32[$0 + 112 >> 2] >= ($2 | 0)) {
     break label$73
    }
    label$74 : {
     if (!$2) {
      $11 = 0;
      break label$74;
     }
     $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($2 << 2);
     $14 = HEAP32[$0 + 108 >> 2];
    }
    $17 = HEAP32[$0 + 116 >> 2];
    label$76 : {
     label$77 : {
      if (($14 | 0) >= 1) {
       $8 = $11;
       $1 = $17;
       while (1) {
        HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
        $8 = $8 + 4 | 0;
        $1 = $1 + 4 | 0;
        $14 = $14 + -1 | 0;
        if ($14) {
         continue
        }
        break;
       };
       break label$77;
      }
      if (!$17) {
       break label$76
      }
     }
     if (HEAPU8[$0 + 120 | 0]) {
      btAlignedFreeInternal_28void__29($17)
     }
     HEAP32[$0 + 116 >> 2] = 0;
    }
    HEAP32[$0 + 116 >> 2] = $11;
    HEAP32[$0 + 112 >> 2] = $2;
    HEAP8[$0 + 120 | 0] = 1;
   }
   HEAP32[$0 + 108 >> 2] = $2;
  }
  $14 = HEAP32[$0 + 148 >> 2];
  label$81 : {
   if (($14 | 0) >= ($10 | 0)) {
    break label$81
   }
   if (HEAP32[$0 + 152 >> 2] >= ($10 | 0)) {
    break label$81
   }
   label$82 : {
    if (!$10) {
     $11 = 0;
     break label$82;
    }
    $11 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10 << 2);
    $14 = HEAP32[$0 + 148 >> 2];
   }
   $17 = HEAP32[$0 + 156 >> 2];
   label$84 : {
    label$85 : {
     if (($14 | 0) >= 1) {
      $8 = $11;
      $1 = $17;
      while (1) {
       HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
       $8 = $8 + 4 | 0;
       $1 = $1 + 4 | 0;
       $14 = $14 + -1 | 0;
       if ($14) {
        continue
       }
       break;
      };
      break label$85;
     }
     if (!$17) {
      break label$84
     }
    }
    if (HEAPU8[$0 + 160 | 0]) {
     btAlignedFreeInternal_28void__29($17)
    }
    HEAP32[$0 + 156 >> 2] = 0;
   }
   HEAP32[$0 + 156 >> 2] = $11;
   HEAP32[$0 + 152 >> 2] = $10;
   HEAP8[$0 + 160 | 0] = 1;
  }
  HEAP32[$0 + 148 >> 2] = $10;
  if (($13 | 0) >= 1) {
   $8 = HEAP32[$0 + 136 >> 2];
   $1 = 0;
   while (1) {
    HEAP32[$8 >> 2] = $1;
    $8 = $8 + 4 | 0;
    $1 = $1 + 1 | 0;
    if (($1 | 0) != ($13 | 0)) {
     continue
    }
    break;
   };
  }
  if (($2 | 0) >= 1) {
   $8 = HEAP32[$0 + 116 >> 2];
   $1 = 0;
   while (1) {
    HEAP32[$8 >> 2] = $1;
    $8 = $8 + 4 | 0;
    $1 = $1 + 1 | 0;
    if (($1 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
  if (($10 | 0) >= 1) {
   $8 = HEAP32[$0 + 156 >> 2];
   $1 = 0;
   while (1) {
    HEAP32[$8 >> 2] = $1;
    $8 = $8 + 4 | 0;
    $1 = $1 + 1 | 0;
    if (($1 | 0) != ($10 | 0)) {
     continue
    }
    break;
   };
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $12 + 256 | 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function btSequentialImpulseConstraintSolver__solveSingleIteration_28int_2c_20btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = 0;
  label$1 : {
   if (!(HEAP8[$8 + 72 | 0] & 1)) {
    break label$1
   }
   $2 = HEAP32[$0 + 68 >> 2];
   $3 = HEAP32[$0 + 28 >> 2];
   $12 = HEAP32[$0 + 48 >> 2];
   if (($12 | 0) >= 1) {
    $9 = Math_imul(HEAP32[$0 + 232 >> 2], 1664525) + 1013904223 | 0;
    label$3 : {
     if (($12 | 0) == 1) {
      break label$3
     }
     $14 = HEAP32[$0 + 136 >> 2];
     $5 = HEAP32[$14 + 4 >> 2];
     $9 = Math_imul($9, 1664525) + 1013904223 | 0;
     $4 = $9 >>> 16 ^ $9;
     $4 = $4 >>> 8 ^ $4;
     $4 = $4 >>> 4 ^ $4;
     $4 = $4 >>> 2 ^ $4;
     $4 = ((($4 >>> 1 ^ $4) & 1) << 2) + $14 | 0;
     HEAP32[$14 + 4 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $5;
     if (($12 | 0) == 2) {
      break label$3
     }
     $5 = HEAP32[$14 + 8 >> 2];
     $9 = Math_imul($9, 1664525) + 1013904223 | 0;
     $4 = $9 >>> 16 ^ $9;
     $4 = $4 >>> 8 ^ $4;
     $4 = $4 >>> 4 ^ $4;
     $4 = ((($4 >>> 2 ^ $4) >>> 0) % 3 << 2) + $14 | 0;
     HEAP32[$14 + 8 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $5;
     if (($12 | 0) == 3) {
      break label$3
     }
     $5 = HEAP32[$14 + 12 >> 2];
     $9 = Math_imul($9, 1664525) + 1013904223 | 0;
     $4 = $9 >>> 16 ^ $9;
     $4 = $4 >>> 8 ^ $4;
     $4 = $4 >>> 4 ^ $4;
     $4 = ((($4 >>> 2 ^ $4) & 3) << 2) + $14 | 0;
     HEAP32[$14 + 12 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $5;
     if (($12 | 0) == 4) {
      break label$3
     }
     $4 = $14 + 16 | 0;
     $5 = 4;
     while (1) {
      $18 = HEAP32[$4 >> 2];
      $17 = $4;
      $9 = Math_imul($9, 1664525) + 1013904223 | 0;
      $5 = $5 + 1 | 0;
      $13 = $9;
      label$5 : {
       if ($5 >>> 0 > 65536) {
        break label$5
       }
       $10 = $9 ^ $9 >>> 16;
       $13 = $10;
       if ($5 >>> 0 > 256) {
        break label$5
       }
       $10 = $10 ^ $10 >>> 8;
       $13 = $10;
       if ($5 >>> 0 > 16) {
        break label$5
       }
       $13 = $10 ^ $10 >>> 4;
      }
      $10 = (($13 >>> 0) % ($5 >>> 0) << 2) + $14 | 0;
      HEAP32[$17 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$10 >> 2] = $18;
      $4 = $4 + 4 | 0;
      if (($5 | 0) != ($12 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$0 + 232 >> 2] = $9;
   }
   if (HEAP32[$8 + 20 >> 2] <= ($1 | 0)) {
    break label$1
   }
   if (($3 | 0) >= 1) {
    $9 = Math_imul(HEAP32[$0 + 232 >> 2], 1664525) + 1013904223 | 0;
    label$7 : {
     if (($3 | 0) == 1) {
      break label$7
     }
     $12 = HEAP32[$0 + 116 >> 2];
     $5 = HEAP32[$12 + 4 >> 2];
     $9 = Math_imul($9, 1664525) + 1013904223 | 0;
     $4 = $9 >>> 16 ^ $9;
     $4 = $4 >>> 8 ^ $4;
     $4 = $4 >>> 4 ^ $4;
     $4 = $4 >>> 2 ^ $4;
     $4 = ((($4 >>> 1 ^ $4) & 1) << 2) + $12 | 0;
     HEAP32[$12 + 4 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $5;
     if (($3 | 0) == 2) {
      break label$7
     }
     $5 = HEAP32[$12 + 8 >> 2];
     $9 = Math_imul($9, 1664525) + 1013904223 | 0;
     $4 = $9 >>> 16 ^ $9;
     $4 = $4 >>> 8 ^ $4;
     $4 = $4 >>> 4 ^ $4;
     $4 = ((($4 >>> 2 ^ $4) >>> 0) % 3 << 2) + $12 | 0;
     HEAP32[$12 + 8 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $5;
     if (($3 | 0) == 3) {
      break label$7
     }
     $5 = HEAP32[$12 + 12 >> 2];
     $9 = Math_imul($9, 1664525) + 1013904223 | 0;
     $4 = $9 >>> 16 ^ $9;
     $4 = $4 >>> 8 ^ $4;
     $4 = $4 >>> 4 ^ $4;
     $4 = ((($4 >>> 2 ^ $4) & 3) << 2) + $12 | 0;
     HEAP32[$12 + 12 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$4 >> 2] = $5;
     if (($3 | 0) == 4) {
      break label$7
     }
     $4 = $12 + 16 | 0;
     $5 = 4;
     while (1) {
      $14 = HEAP32[$4 >> 2];
      $17 = $4;
      $9 = Math_imul($9, 1664525) + 1013904223 | 0;
      $5 = $5 + 1 | 0;
      $13 = $9;
      label$9 : {
       if ($5 >>> 0 > 65536) {
        break label$9
       }
       $10 = $9 ^ $9 >>> 16;
       $13 = $10;
       if ($5 >>> 0 > 256) {
        break label$9
       }
       $10 = $10 ^ $10 >>> 8;
       $13 = $10;
       if ($5 >>> 0 > 16) {
        break label$9
       }
       $13 = $10 ^ $10 >>> 4;
      }
      $10 = (($13 >>> 0) % ($5 >>> 0) << 2) + $12 | 0;
      HEAP32[$17 >> 2] = HEAP32[$10 >> 2];
      HEAP32[$10 >> 2] = $14;
      $4 = $4 + 4 | 0;
      if (($3 | 0) != ($5 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$0 + 232 >> 2] = $9;
   }
   if (($2 | 0) < 1) {
    break label$1
   }
   $9 = Math_imul(HEAP32[$0 + 232 >> 2], 1664525) + 1013904223 | 0;
   label$10 : {
    if (($2 | 0) == 1) {
     break label$10
    }
    $12 = HEAP32[$0 + 156 >> 2];
    $5 = HEAP32[$12 + 4 >> 2];
    $9 = Math_imul($9, 1664525) + 1013904223 | 0;
    $4 = $9 >>> 16 ^ $9;
    $4 = $4 >>> 8 ^ $4;
    $4 = $4 >>> 4 ^ $4;
    $4 = $4 >>> 2 ^ $4;
    $4 = ((($4 >>> 1 ^ $4) & 1) << 2) + $12 | 0;
    HEAP32[$12 + 4 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$4 >> 2] = $5;
    if (($2 | 0) == 2) {
     break label$10
    }
    $5 = HEAP32[$12 + 8 >> 2];
    $9 = Math_imul($9, 1664525) + 1013904223 | 0;
    $4 = $9 >>> 16 ^ $9;
    $4 = $4 >>> 8 ^ $4;
    $4 = $4 >>> 4 ^ $4;
    $4 = ((($4 >>> 2 ^ $4) >>> 0) % 3 << 2) + $12 | 0;
    HEAP32[$12 + 8 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$4 >> 2] = $5;
    if (($2 | 0) == 3) {
     break label$10
    }
    $5 = HEAP32[$12 + 12 >> 2];
    $9 = Math_imul($9, 1664525) + 1013904223 | 0;
    $4 = $9 >>> 16 ^ $9;
    $4 = $4 >>> 8 ^ $4;
    $4 = $4 >>> 4 ^ $4;
    $4 = ((($4 >>> 2 ^ $4) & 3) << 2) + $12 | 0;
    HEAP32[$12 + 12 >> 2] = HEAP32[$4 >> 2];
    HEAP32[$4 >> 2] = $5;
    if (($2 | 0) == 4) {
     break label$10
    }
    $4 = $12 + 16 | 0;
    $5 = 4;
    while (1) {
     $14 = HEAP32[$4 >> 2];
     $13 = $4;
     $9 = Math_imul($9, 1664525) + 1013904223 | 0;
     $5 = $5 + 1 | 0;
     $3 = $9;
     label$12 : {
      if ($5 >>> 0 > 65536) {
       break label$12
      }
      $10 = $9 ^ $9 >>> 16;
      $3 = $10;
      if ($5 >>> 0 > 256) {
       break label$12
      }
      $10 = $10 ^ $10 >>> 8;
      $3 = $10;
      if ($5 >>> 0 > 16) {
       break label$12
      }
      $3 = $10 ^ $10 >>> 4;
     }
     $10 = (($3 >>> 0) % ($5 >>> 0) << 2) + $12 | 0;
     HEAP32[$13 >> 2] = HEAP32[$10 >> 2];
     HEAP32[$10 >> 2] = $14;
     $4 = $4 + 4 | 0;
     if (($2 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   HEAP32[$0 + 232 >> 2] = $9;
  }
  $10 = HEAP32[$0 + 48 >> 2];
  if (($10 | 0) >= 1) {
   $9 = 0;
   $4 = 0;
   while (1) {
    $5 = HEAP32[$0 + 56 >> 2] + Math_imul(HEAP32[$9 + HEAP32[$0 + 136 >> 2] >> 2], 152) | 0;
    if (HEAP32[$5 + 136 >> 2] > ($1 | 0)) {
     $10 = HEAP32[$0 + 16 >> 2];
     $11 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($10 + Math_imul(HEAP32[$5 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$5 + 148 >> 2], 244) + $10 | 0, $5));
     $15 = Math_fround($15 + Math_fround($11 * $11));
     $10 = HEAP32[$0 + 48 >> 2];
    }
    $9 = $9 + 4 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) < ($10 | 0)) {
     continue
    }
    break;
   };
  }
  label$16 : {
   if (HEAP32[$8 + 20 >> 2] <= ($1 | 0)) {
    break label$16
   }
   if (($7 | 0) >= 1) {
    while (1) {
     $9 = HEAP32[$6 >> 2];
     if (HEAPU8[$9 + 20 | 0]) {
      $9 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, HEAP32[$9 + 28 >> 2], HEAPF32[$8 + 12 >> 2]);
      $5 = btSequentialImpulseConstraintSolver__getOrInitSolverBody_28btCollisionObject__2c_20float_29($0, HEAP32[HEAP32[$6 >> 2] + 32 >> 2], HEAPF32[$8 + 12 >> 2]);
      $4 = HEAP32[$6 >> 2];
      $10 = HEAP32[$0 + 16 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 24 >> 2]]($4, $10 + Math_imul($9, 244) | 0, Math_imul($5, 244) + $10 | 0, HEAPF32[$8 + 12 >> 2]);
     }
     $6 = $6 + 4 | 0;
     $7 = $7 + -1 | 0;
     if ($7) {
      continue
     }
     break;
    }
   }
   $9 = HEAP32[$0 + 28 >> 2];
   $5 = HEAP32[$8 + 72 >> 2];
   label$20 : {
    if (!($5 & 512)) {
     if (($9 | 0) >= 1) {
      $5 = 0;
      while (1) {
       $4 = HEAP32[$0 + 16 >> 2];
       $6 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$5 + HEAP32[$0 + 116 >> 2] >> 2], 152) | 0;
       $11 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 216 >> 2]]($4 + Math_imul(HEAP32[$6 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$6 + 148 >> 2], 244) + $4 | 0, $6));
       $15 = Math_fround($15 + Math_fround($11 * $11));
       $5 = $5 + 4 | 0;
       $9 = $9 + -1 | 0;
       if ($9) {
        continue
       }
       break;
      };
     }
     $6 = HEAP32[$0 + 68 >> 2];
     if (($6 | 0) < 1) {
      break label$20
     }
     $5 = 0;
     while (1) {
      $9 = HEAP32[$0 + 76 >> 2] + Math_imul(HEAP32[$5 + HEAP32[$0 + 156 >> 2] >> 2], 152) | 0;
      $11 = HEAPF32[(HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$9 + 140 >> 2], 152) | 0) + 100 >> 2];
      if (!!($11 > Math_fround(0.0))) {
       $11 = Math_fround($11 * HEAPF32[$9 + 104 >> 2]);
       HEAPF32[$9 + 124 >> 2] = $11;
       HEAPF32[$9 + 120 >> 2] = -$11;
       $4 = HEAP32[$0 + 16 >> 2];
       $11 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($4 + Math_imul(HEAP32[$9 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$9 + 148 >> 2], 244) + $4 | 0, $9));
       $15 = Math_fround($15 + Math_fround($11 * $11));
      }
      $5 = $5 + 4 | 0;
      $6 = $6 + -1 | 0;
      if ($6) {
       continue
      }
      break;
     };
     break label$20;
    }
    if (($9 | 0) < 1) {
     break label$20
    }
    $1 = ($5 & 16 ? 2 : 1) << 2;
    $4 = 0;
    $6 = 0;
    while (1) {
     $10 = HEAP32[$0 + 16 >> 2];
     $5 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$6 + HEAP32[$0 + 116 >> 2] >> 2], 152) | 0;
     $11 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 216 >> 2]]($10 + Math_imul(HEAP32[$5 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$5 + 148 >> 2], 244) + $10 | 0, $5));
     $15 = Math_fround($15 + Math_fround($11 * $11));
     $11 = HEAPF32[$5 + 100 >> 2];
     $10 = $11 > Math_fround(0.0) ^ 1;
     if (!$10) {
      $5 = HEAP32[$0 + 76 >> 2] + Math_imul(HEAP32[$4 + HEAP32[$0 + 156 >> 2] >> 2], 152) | 0;
      $16 = Math_fround($11 * HEAPF32[$5 + 104 >> 2]);
      HEAPF32[$5 + 124 >> 2] = $16;
      HEAPF32[$5 + 120 >> 2] = -$16;
      $7 = HEAP32[$0 + 16 >> 2];
      $16 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($7 + Math_imul(HEAP32[$5 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$5 + 148 >> 2], 244) + $7 | 0, $5));
      $15 = Math_fround($15 + Math_fround($16 * $16));
     }
     label$28 : {
      if (!(HEAPU8[$8 + 72 | 0] & 16)) {
       break label$28
      }
      if ($10) {
       break label$28
      }
      $5 = HEAP32[$0 + 76 >> 2] + Math_imul(HEAP32[($4 + HEAP32[$0 + 156 >> 2] | 0) + 4 >> 2], 152) | 0;
      $11 = Math_fround($11 * HEAPF32[$5 + 104 >> 2]);
      HEAPF32[$5 + 124 >> 2] = $11;
      HEAPF32[$5 + 120 >> 2] = -$11;
      $10 = HEAP32[$0 + 16 >> 2];
      $11 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($10 + Math_imul(HEAP32[$5 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$5 + 148 >> 2], 244) + $10 | 0, $5));
      $15 = Math_fround($15 + Math_fround($11 * $11));
     }
     $4 = $1 + $4 | 0;
     $6 = $6 + 4 | 0;
     $9 = $9 + -1 | 0;
     if ($9) {
      continue
     }
     break;
    };
   }
   $6 = HEAP32[$0 + 88 >> 2];
   if (($6 | 0) < 1) {
    break label$16
   }
   $5 = 0;
   while (1) {
    $9 = $5 + HEAP32[$0 + 96 >> 2] | 0;
    $11 = HEAPF32[(HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$9 + 140 >> 2], 152) | 0) + 100 >> 2];
    if (!!($11 > Math_fround(0.0))) {
     $16 = HEAPF32[$9 + 104 >> 2];
     $11 = Math_fround($11 * $16);
     $11 = $11 > $16 ? $16 : $11;
     HEAPF32[$9 + 124 >> 2] = $11;
     HEAPF32[$9 + 120 >> 2] = -$11;
     $4 = HEAP32[$0 + 16 >> 2];
     $11 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 212 >> 2]]($4 + Math_imul(HEAP32[$9 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$9 + 148 >> 2], 244) + $4 | 0, $9));
     $15 = Math_fround($15 + Math_fround($11 * $11));
    }
    $5 = $5 + 152 | 0;
    $6 = $6 + -1 | 0;
    if ($6) {
     continue
    }
    break;
   };
  }
  return Math_fround($15);
 }
 
 function btSequentialImpulseConstraintSolver__solveGroupCacheFriendlySplitImpulseIterations_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = Math_fround(0), $10 = Math_fround(0);
  label$1 : {
   if (!HEAP32[$7 + 52 >> 2]) {
    break label$1
   }
   if (HEAP32[$7 + 20 >> 2] < 1) {
    break label$1
   }
   $2 = 0;
   while (1) {
    $9 = Math_fround(0.0);
    $3 = HEAP32[$0 + 28 >> 2];
    if (($3 | 0) >= 1) {
     $1 = 0;
     while (1) {
      $10 = $9;
      $5 = HEAP32[$0 + 16 >> 2];
      $4 = HEAP32[$0 + 36 >> 2] + Math_imul(HEAP32[$1 + HEAP32[$0 + 116 >> 2] >> 2], 152) | 0;
      $9 = Math_fround(FUNCTION_TABLE[HEAP32[$0 + 220 >> 2]]($5 + Math_imul(HEAP32[$4 + 144 >> 2], 244) | 0, Math_imul(HEAP32[$4 + 148 >> 2], 244) + $5 | 0, $4));
      $9 = Math_fround($10 + Math_fround($9 * $9));
      $1 = $1 + 4 | 0;
      $3 = $3 + -1 | 0;
      if ($3) {
       continue
      }
      break;
     };
    }
    if ($9 <= HEAPF32[$7 + 92 >> 2]) {
     break label$1
    }
    $1 = HEAP32[$7 + 20 >> 2];
    if (($2 | 0) >= ($1 + -1 | 0)) {
     break label$1
    }
    $2 = $2 + 1 | 0;
    if (($2 | 0) < ($1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function btSequentialImpulseConstraintSolver__solveGroupCacheFriendlyIterations_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0;
  $11 = global$0 - 16 | 0;
  global$0 = $11;
  CProfileSample__CProfileSample_28char_20const__29($11 + 8 | 0, 20261);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7, $8);
  $9 = HEAP32[$0 + 184 >> 2];
  $10 = HEAP32[$7 + 20 >> 2];
  $10 = ($9 | 0) > ($10 | 0) ? $9 : $10;
  label$1 : {
   if (($10 | 0) < 1) {
    break label$1
   }
   $13 = $10 + -1 | 0;
   $9 = 0;
   while (1) {
    $12 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $9, $1, $2, $3, $4, $5, $6, $7, $8));
    HEAPF32[$0 + 228 >> 2] = $12;
    if (($9 | 0) >= ($13 | 0)) {
     break label$1
    }
    if ($12 <= HEAPF32[$7 + 92 >> 2]) {
     break label$1
    }
    $9 = $9 + 1 | 0;
    if (($9 | 0) < ($10 | 0)) {
     continue
    }
    break;
   };
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $11 + 16 | 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function btSequentialImpulseConstraintSolver__solveGroupCacheFriendlyFinish_28btCollisionObject___2c_20int_2c_20btContactSolverInfo_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0;
  $5 = HEAP32[$3 + 72 >> 2];
  label$1 : {
   if (!($5 & 4)) {
    break label$1
   }
   $4 = HEAP32[$0 + 28 >> 2];
   if (($4 | 0) < 1) {
    break label$1
   }
   $7 = HEAP32[$0 + 76 >> 2];
   $6 = HEAP32[$0 + 36 >> 2];
   if ($5 & 16) {
    $5 = $6 + 140 | 0;
    while (1) {
     $6 = HEAP32[$5 + -8 >> 2];
     HEAP32[$6 + 124 >> 2] = HEAP32[$5 + -40 >> 2];
     $11 = Math_imul(HEAP32[$5 >> 2], 152) + $7 | 0;
     HEAP32[$6 + 128 >> 2] = HEAP32[$11 + 100 >> 2];
     HEAP32[$6 + 132 >> 2] = HEAP32[$11 + 252 >> 2];
     $5 = $5 + 152 | 0;
     $4 = $4 + -1 | 0;
     if ($4) {
      continue
     }
     break;
    };
    break label$1;
   }
   $5 = $6 + 140 | 0;
   while (1) {
    $6 = HEAP32[$5 + -8 >> 2];
    HEAP32[$6 + 124 >> 2] = HEAP32[$5 + -40 >> 2];
    HEAP32[$6 + 128 >> 2] = HEAP32[(Math_imul(HEAP32[$5 >> 2], 152) + $7 | 0) + 100 >> 2];
    $5 = $5 + 152 | 0;
    $4 = $4 + -1 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
  $8 = HEAP32[$0 + 48 >> 2];
  if (($8 | 0) >= 1) {
   $1 = 100;
   while (1) {
    $4 = $1 + HEAP32[$0 + 56 >> 2] | 0;
    $6 = HEAP32[$4 + 32 >> 2];
    $5 = HEAP32[$6 + 44 >> 2];
    if ($5) {
     $7 = HEAP32[$6 + 28 >> 2];
     $15 = HEAPF32[$7 + 416 >> 2];
     $12 = HEAPF32[$4 + -76 >> 2];
     $13 = HEAPF32[$7 + 412 >> 2];
     $14 = HEAPF32[$4 + -80 >> 2];
     $9 = HEAPF32[$4 >> 2];
     $10 = Math_fround(Math_fround(1.0) / HEAPF32[$3 + 12 >> 2]);
     HEAPF32[$5 >> 2] = HEAPF32[$5 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$4 + -84 >> 2] * $9) * HEAPF32[$7 + 408 >> 2]) * $10);
     HEAPF32[$5 + 4 >> 2] = Math_fround(Math_fround($13 * Math_fround($9 * $14)) * $10) + HEAPF32[$5 + 4 >> 2];
     HEAPF32[$5 + 8 >> 2] = Math_fround(Math_fround($15 * Math_fround($9 * $12)) * $10) + HEAPF32[$5 + 8 >> 2];
     $11 = HEAP32[$6 + 32 >> 2];
     $15 = HEAPF32[$11 + 416 >> 2];
     $12 = HEAPF32[$4 + -44 >> 2];
     $13 = HEAPF32[$11 + 412 >> 2];
     $14 = HEAPF32[$4 + -48 >> 2];
     $9 = HEAPF32[$4 >> 2];
     $10 = Math_fround(Math_fround(1.0) / HEAPF32[$3 + 12 >> 2]);
     HEAPF32[$5 + 32 >> 2] = HEAPF32[$5 + 32 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$4 + -52 >> 2] * $9) * HEAPF32[$11 + 408 >> 2]) * $10);
     $2 = $5 + 36 | 0;
     HEAPF32[$2 >> 2] = Math_fround(Math_fround($13 * Math_fround($9 * $14)) * $10) + HEAPF32[$2 >> 2];
     $2 = $5 + 40 | 0;
     HEAPF32[$2 >> 2] = Math_fround(Math_fround($15 * Math_fround($9 * $12)) * $10) + HEAPF32[$2 >> 2];
     $15 = HEAPF32[$7 + 612 >> 2];
     $12 = HEAPF32[$4 + -92 >> 2];
     $13 = HEAPF32[$7 + 608 >> 2];
     $14 = HEAPF32[$4 + -96 >> 2];
     $9 = HEAPF32[$4 >> 2];
     $10 = Math_fround(Math_fround(1.0) / HEAPF32[$3 + 12 >> 2]);
     HEAPF32[$5 + 16 >> 2] = HEAPF32[$5 + 16 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$4 + -100 >> 2] * HEAPF32[$7 + 604 >> 2]) * $9) * $10);
     $7 = $5 + 20 | 0;
     HEAPF32[$7 >> 2] = Math_fround(Math_fround($9 * Math_fround($14 * $13)) * $10) + HEAPF32[$7 >> 2];
     $7 = $5 + 24 | 0;
     HEAPF32[$7 >> 2] = Math_fround(Math_fround($9 * Math_fround($12 * $15)) * $10) + HEAPF32[$7 >> 2];
     $15 = HEAPF32[$11 + 612 >> 2];
     $12 = HEAPF32[$4 + -60 >> 2];
     $13 = HEAPF32[$11 + 608 >> 2];
     $14 = HEAPF32[$4 + -64 >> 2];
     $9 = HEAPF32[$4 >> 2];
     $10 = Math_fround(Math_fround(1.0) / HEAPF32[$3 + 12 >> 2]);
     HEAPF32[$5 + 48 >> 2] = HEAPF32[$5 + 48 >> 2] + Math_fround(Math_fround(Math_fround(HEAPF32[$4 + -68 >> 2] * HEAPF32[$11 + 604 >> 2]) * $9) * $10);
     $7 = $5 + 52 | 0;
     HEAPF32[$7 >> 2] = Math_fround(Math_fround($9 * Math_fround($14 * $13)) * $10) + HEAPF32[$7 >> 2];
     $5 = $5 + 56 | 0;
     HEAPF32[$5 >> 2] = Math_fround(Math_fround($9 * Math_fround($12 * $15)) * $10) + HEAPF32[$5 >> 2];
    }
    $9 = HEAPF32[$4 >> 2];
    HEAPF32[$6 + 36 >> 2] = $9;
    if (!!(Math_fround(Math_abs($9)) >= HEAPF32[$6 + 16 >> 2])) {
     HEAP8[$6 + 20 | 0] = 0
    }
    $1 = $1 + 152 | 0;
    $8 = $8 + -1 | 0;
    if ($8) {
     continue
    }
    break;
   };
  }
  $1 = HEAP32[$0 + 8 >> 2];
  if (($1 | 0) >= 1) {
   $7 = HEAP32[$0 + 16 >> 2];
   $5 = 176;
   $11 = 0;
   while (1) {
    $6 = $5 + $7 | 0;
    $4 = HEAP32[$6 - -64 >> 2];
    if ($4) {
     label$12 : {
      if (HEAP32[$3 + 52 >> 2]) {
       btSolverBody__writebackVelocityAndTransform_28float_2c_20float_29($6 + -176 | 0, HEAPF32[$3 + 12 >> 2], HEAPF32[$3 + 60 >> 2]);
       $7 = HEAP32[$0 + 16 >> 2];
       $4 = $5 + $7 | 0;
       $12 = HEAPF32[$4 >> 2];
       $13 = HEAPF32[$4 + 8 >> 2];
       $14 = HEAPF32[$4 + 4 >> 2];
       $4 = HEAP32[$4 - -64 >> 2];
       break label$12;
      }
      $12 = Math_fround(HEAPF32[$6 + -112 >> 2] + HEAPF32[$6 >> 2]);
      HEAPF32[$6 >> 2] = $12;
      $1 = $6 + 4 | 0;
      $14 = Math_fround(HEAPF32[$6 + -108 >> 2] + HEAPF32[$1 >> 2]);
      HEAPF32[$1 >> 2] = $14;
      $1 = $6 + 8 | 0;
      $13 = Math_fround(HEAPF32[$6 + -104 >> 2] + HEAPF32[$1 >> 2]);
      HEAPF32[$1 >> 2] = $13;
      $1 = $6 + 16 | 0;
      HEAPF32[$1 >> 2] = HEAPF32[$6 + -96 >> 2] + HEAPF32[$1 >> 2];
      $1 = $6 + 20 | 0;
      HEAPF32[$1 >> 2] = HEAPF32[$6 + -92 >> 2] + HEAPF32[$1 >> 2];
      $1 = $6 + 24 | 0;
      HEAPF32[$1 >> 2] = HEAPF32[$6 + -88 >> 2] + HEAPF32[$1 >> 2];
     }
     $6 = $5 + $7 | 0;
     $9 = HEAPF32[$6 + 32 >> 2];
     $10 = HEAPF32[$6 + 36 >> 2];
     $15 = HEAPF32[$6 + 40 >> 2];
     HEAP32[$4 + 384 >> 2] = 0;
     HEAPF32[$4 + 380 >> 2] = $13 + $15;
     HEAPF32[$4 + 376 >> 2] = $14 + $10;
     HEAPF32[$4 + 372 >> 2] = $12 + $9;
     HEAP32[$4 + 304 >> 2] = HEAP32[$4 + 304 >> 2] + 1;
     $4 = $5 + HEAP32[$0 + 16 >> 2] | 0;
     $9 = HEAPF32[$4 + 16 >> 2];
     $10 = HEAPF32[$4 + 48 >> 2];
     $15 = HEAPF32[$4 + 20 >> 2];
     $12 = HEAPF32[$4 + 52 >> 2];
     $13 = HEAPF32[$4 + 24 >> 2];
     $14 = HEAPF32[$4 + 56 >> 2];
     $4 = HEAP32[$4 - -64 >> 2];
     HEAP32[$4 + 400 >> 2] = 0;
     HEAPF32[$4 + 396 >> 2] = $13 + $14;
     HEAPF32[$4 + 392 >> 2] = $15 + $12;
     HEAPF32[$4 + 388 >> 2] = $9 + $10;
     HEAP32[$4 + 304 >> 2] = HEAP32[$4 + 304 >> 2] + 1;
     if (HEAP32[$3 + 52 >> 2]) {
      $6 = $5 + HEAP32[$0 + 16 >> 2] | 0;
      $4 = HEAP32[$6 - -64 >> 2];
      HEAP32[$4 + 304 >> 2] = HEAP32[$4 + 304 >> 2] + 1;
      $7 = $6 + -176 | 0;
      $2 = $7 + 8 | 0;
      $16 = HEAP32[$2 >> 2];
      $1 = HEAP32[$2 + 4 >> 2];
      $8 = $4 + 12 | 0;
      HEAP32[$8 >> 2] = $16;
      HEAP32[$8 + 4 >> 2] = $1;
      $8 = HEAP32[$7 + 4 >> 2];
      HEAP32[$4 + 4 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$4 + 8 >> 2] = $8;
      $7 = $6 + -160 | 0;
      $2 = $7 + 8 | 0;
      $16 = HEAP32[$2 >> 2];
      $1 = HEAP32[$2 + 4 >> 2];
      $8 = $4 + 28 | 0;
      HEAP32[$8 >> 2] = $16;
      HEAP32[$8 + 4 >> 2] = $1;
      $8 = HEAP32[$7 + 4 >> 2];
      $1 = $4 + 20 | 0;
      HEAP32[$1 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$1 + 4 >> 2] = $8;
      $7 = $6 + -144 | 0;
      $16 = HEAP32[$7 >> 2];
      $1 = HEAP32[$7 + 4 >> 2];
      $8 = $4 + 36 | 0;
      HEAP32[$8 >> 2] = $16;
      HEAP32[$8 + 4 >> 2] = $1;
      $2 = $7 + 8 | 0;
      $7 = HEAP32[$2 >> 2];
      $8 = HEAP32[$2 + 4 >> 2];
      $1 = $4 + 44 | 0;
      HEAP32[$1 >> 2] = $7;
      HEAP32[$1 + 4 >> 2] = $8;
      $6 = $6 + -128 | 0;
      $2 = $6 + 8 | 0;
      $7 = HEAP32[$2 >> 2];
      $1 = HEAP32[$2 + 4 >> 2];
      $8 = $4 + 60 | 0;
      HEAP32[$8 >> 2] = $7;
      HEAP32[$8 + 4 >> 2] = $1;
      $8 = HEAP32[$6 + 4 >> 2];
      $1 = $4 + 52 | 0;
      HEAP32[$1 >> 2] = HEAP32[$6 >> 2];
      HEAP32[$1 + 4 >> 2] = $8;
     }
     $7 = HEAP32[$0 + 16 >> 2];
     HEAP32[HEAP32[($5 + $7 | 0) - -64 >> 2] + 212 >> 2] = -1;
     $1 = HEAP32[$0 + 8 >> 2];
    }
    $5 = $5 + 244 | 0;
    $11 = $11 + 1 | 0;
    if (($11 | 0) < ($1 | 0)) {
     continue
    }
    break;
   };
  }
  label$15 : {
   if (HEAP32[$0 + 28 >> 2] > -1) {
    break label$15
   }
   if (HEAP32[$0 + 32 >> 2] > -1) {
    break label$15
   }
   $5 = HEAP32[$0 + 36 >> 2];
   if ($5) {
    if (HEAPU8[$0 + 40 | 0]) {
     btAlignedFreeInternal_28void__29($5)
    }
    HEAP32[$0 + 36 >> 2] = 0;
   }
   HEAP32[$0 + 32 >> 2] = 0;
   HEAP32[$0 + 36 >> 2] = 0;
   HEAP8[$0 + 40 | 0] = 1;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  label$18 : {
   if (HEAP32[$0 + 48 >> 2] > -1) {
    break label$18
   }
   if (HEAP32[$0 + 52 >> 2] > -1) {
    break label$18
   }
   $5 = HEAP32[$0 + 56 >> 2];
   if ($5) {
    if (HEAPU8[$0 + 60 | 0]) {
     btAlignedFreeInternal_28void__29($5)
    }
    HEAP32[$0 + 56 >> 2] = 0;
   }
   HEAP32[$0 + 52 >> 2] = 0;
   HEAP32[$0 + 56 >> 2] = 0;
   HEAP8[$0 + 60 | 0] = 1;
  }
  HEAP32[$0 + 48 >> 2] = 0;
  label$21 : {
   if (HEAP32[$0 + 68 >> 2] > -1) {
    break label$21
   }
   if (HEAP32[$0 + 72 >> 2] > -1) {
    break label$21
   }
   $5 = HEAP32[$0 + 76 >> 2];
   if ($5) {
    if (HEAPU8[$0 + 80 | 0]) {
     btAlignedFreeInternal_28void__29($5)
    }
    HEAP32[$0 + 76 >> 2] = 0;
   }
   HEAP32[$0 + 72 >> 2] = 0;
   HEAP32[$0 + 76 >> 2] = 0;
   HEAP8[$0 + 80 | 0] = 1;
  }
  HEAP32[$0 + 68 >> 2] = 0;
  label$24 : {
   if (HEAP32[$0 + 88 >> 2] > -1) {
    break label$24
   }
   if (HEAP32[$0 + 92 >> 2] > -1) {
    break label$24
   }
   $5 = HEAP32[$0 + 96 >> 2];
   if ($5) {
    if (HEAPU8[$0 + 100 | 0]) {
     btAlignedFreeInternal_28void__29($5)
    }
    HEAP32[$0 + 96 >> 2] = 0;
   }
   HEAP32[$0 + 92 >> 2] = 0;
   HEAP32[$0 + 96 >> 2] = 0;
   HEAP8[$0 + 100 | 0] = 1;
  }
  HEAP32[$0 + 88 >> 2] = 0;
  label$27 : {
   if (HEAP32[$0 + 8 >> 2] > -1) {
    break label$27
   }
   if (HEAP32[$0 + 12 >> 2] > -1) {
    break label$27
   }
   $5 = HEAP32[$0 + 16 >> 2];
   if ($5) {
    if (HEAPU8[$0 + 20 | 0]) {
     btAlignedFreeInternal_28void__29($5)
    }
    HEAP32[$0 + 16 >> 2] = 0;
   }
   HEAP32[$0 + 12 >> 2] = 0;
   HEAP32[$0 + 16 >> 2] = 0;
   HEAP8[$0 + 20 | 0] = 1;
  }
  HEAP32[$0 + 8 >> 2] = 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function btSolverBody__writebackVelocityAndTransform_28float_2c_20float_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = global$0 - 80 | 0;
  global$0 = $4;
  label$1 : {
   if (!HEAP32[$0 + 240 >> 2]) {
    break label$1
   }
   HEAPF32[$0 + 176 >> 2] = HEAPF32[$0 + 64 >> 2] + HEAPF32[$0 + 176 >> 2];
   HEAPF32[$0 + 192 >> 2] = HEAPF32[$0 + 80 >> 2] + HEAPF32[$0 + 192 >> 2];
   $3 = $0 + 180 | 0;
   HEAPF32[$3 >> 2] = HEAPF32[$0 + 68 >> 2] + HEAPF32[$3 >> 2];
   $3 = $0 + 184 | 0;
   HEAPF32[$3 >> 2] = HEAPF32[$0 + 72 >> 2] + HEAPF32[$3 >> 2];
   $3 = $0 + 196 | 0;
   HEAPF32[$3 >> 2] = HEAPF32[$0 + 84 >> 2] + HEAPF32[$3 >> 2];
   $3 = $0 + 200 | 0;
   HEAPF32[$3 >> 2] = HEAPF32[$0 + 88 >> 2] + HEAPF32[$3 >> 2];
   label$2 : {
    if (HEAPF32[$0 + 144 >> 2] != Math_fround(0.0)) {
     break label$2
    }
    if (HEAPF32[$0 + 148 >> 2] != Math_fround(0.0)) {
     break label$2
    }
    if (HEAPF32[$0 + 152 >> 2] != Math_fround(0.0)) {
     break label$2
    }
    if (HEAPF32[$0 + 160 >> 2] != Math_fround(0.0)) {
     break label$2
    }
    if (HEAPF32[$0 + 164 >> 2] != Math_fround(0.0)) {
     break label$2
    }
    if (HEAPF32[$0 + 168 >> 2] == Math_fround(0.0)) {
     break label$1
    }
   }
   HEAP32[$4 + 12 >> 2] = 0;
   HEAPF32[$4 >> 2] = HEAPF32[$0 + 160 >> 2] * $2;
   HEAPF32[$4 + 8 >> 2] = HEAPF32[$0 + 168 >> 2] * $2;
   HEAPF32[$4 + 4 >> 2] = HEAPF32[$0 + 164 >> 2] * $2;
   btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btTransform__29($0, $0 + 144 | 0, $4, $1, $4 + 16 | 0);
   $3 = $4 + 24 | 0;
   $6 = HEAP32[$3 >> 2];
   $3 = HEAP32[$3 + 4 >> 2];
   $5 = $0 + 8 | 0;
   HEAP32[$5 >> 2] = $6;
   HEAP32[$5 + 4 >> 2] = $3;
   $5 = HEAP32[$4 + 20 >> 2];
   HEAP32[$0 >> 2] = HEAP32[$4 + 16 >> 2];
   HEAP32[$0 + 4 >> 2] = $5;
   $3 = HEAP32[$4 + 36 >> 2];
   HEAP32[$0 + 16 >> 2] = HEAP32[$4 + 32 >> 2];
   HEAP32[$0 + 20 >> 2] = $3;
   $3 = $4 + 40 | 0;
   $6 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $3 = $0 + 24 | 0;
   HEAP32[$3 >> 2] = $6;
   HEAP32[$3 + 4 >> 2] = $5;
   $3 = HEAP32[$4 + 52 >> 2];
   HEAP32[$0 + 32 >> 2] = HEAP32[$4 + 48 >> 2];
   HEAP32[$0 + 36 >> 2] = $3;
   $3 = $4 + 56 | 0;
   $6 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $3 = $0 + 40 | 0;
   HEAP32[$3 >> 2] = $6;
   HEAP32[$3 + 4 >> 2] = $5;
   $3 = HEAP32[$4 + 68 >> 2];
   HEAP32[$0 + 48 >> 2] = HEAP32[$4 + 64 >> 2];
   HEAP32[$0 + 52 >> 2] = $3;
   $3 = $4 + 72 | 0;
   $6 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $3 = $0 + 56 | 0;
   HEAP32[$3 >> 2] = $6;
   HEAP32[$3 + 4 >> 2] = $5;
  }
  global$0 = $4 + 80 | 0;
 }
 
 function btSequentialImpulseConstraintSolver__solveGroup_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__2c_20btDispatcher__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $9 = global$0 - 16 | 0;
  global$0 = $9;
  CProfileSample__CProfileSample_28char_20const__29($9 + 8 | 0, 20295);
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7, $8));
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0, $1, $2, $3, $4, $5, $6, $7, $8));
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, $2, $7));
  CProfileSample___CProfileSample_28_29();
  global$0 = $9 + 16 | 0;
  return Math_fround(Math_fround(0.0));
 }
 
 function btSequentialImpulseConstraintSolver__reset_28_29($0) {
  $0 = $0 | 0;
  HEAP32[$0 + 232 >> 2] = 0;
 }
 
 function btContinuousConvexCollision__btContinuousConvexCollision_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($0, $1, $2, $3, $4) {
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 16 >> 2] = $2;
  HEAP32[$0 + 12 >> 2] = $1;
  HEAP32[$0 + 8 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP32[$0 >> 2] = 20396;
  return $0;
 }
 
 function btContinuousConvexCollision__btContinuousConvexCollision_28btConvexShape_20const__2c_20btStaticPlaneShape_20const__29($0, $1, $2) {
  HEAP32[$0 + 20 >> 2] = $2;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 >> 2] = 20396;
  return $0;
 }
 
 function btContinuousConvexCollision__computeClosestPoints_28btTransform_20const__2c_20btTransform_20const__2c_20btPointCollector__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = 0, $36 = 0, $37 = Math_fround(0), $38 = Math_fround(0), $39 = 0, $40 = Math_fround(0), $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = Math_fround(0);
  $4 = global$0 - 240 | 0;
  global$0 = $4;
  label$1 : {
   if (HEAP32[$0 + 16 >> 2]) {
    btVoronoiSimplexSolver__reset_28_29(HEAP32[$0 + 4 >> 2]);
    $6 = HEAP32[$0 + 16 >> 2];
    $5 = HEAP32[$6 + 4 >> 2];
    $7 = HEAP32[$0 + 12 >> 2];
    $10 = $7;
    $31 = HEAP32[$7 + 4 >> 2];
    $8 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 48 >> 2]]($7));
    $7 = HEAP32[$0 + 16 >> 2];
    $0 = btGjkPairDetector__btGjkPairDetector_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20int_2c_20int_2c_20float_2c_20float_2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($4 + 160 | 0, $10, $6, $31, $5, $8, Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 48 >> 2]]($7)), HEAP32[$0 + 4 >> 2], HEAP32[$0 + 8 >> 2]);
    $7 = $1 + 8 | 0;
    $10 = HEAP32[$7 >> 2];
    $6 = HEAP32[$7 + 4 >> 2];
    $5 = $4 + 32 | 0;
    HEAP32[$5 >> 2] = $10;
    HEAP32[$5 + 4 >> 2] = $6;
    $7 = $1 + 24 | 0;
    $10 = HEAP32[$7 >> 2];
    $5 = HEAP32[$7 + 4 >> 2];
    $6 = $4 + 48 | 0;
    HEAP32[$6 >> 2] = $10;
    HEAP32[$6 + 4 >> 2] = $5;
    $7 = $1 + 40 | 0;
    $10 = HEAP32[$7 >> 2];
    $6 = HEAP32[$7 + 4 >> 2];
    $5 = $4 - -64 | 0;
    HEAP32[$5 >> 2] = $10;
    HEAP32[$5 + 4 >> 2] = $6;
    $7 = $1 + 56 | 0;
    $10 = HEAP32[$7 >> 2];
    $5 = HEAP32[$7 + 4 >> 2];
    $6 = $4 + 80 | 0;
    HEAP32[$6 >> 2] = $10;
    HEAP32[$6 + 4 >> 2] = $5;
    $7 = $2 + 8 | 0;
    $10 = HEAP32[$7 >> 2];
    $6 = HEAP32[$7 + 4 >> 2];
    $5 = $4 + 96 | 0;
    HEAP32[$5 >> 2] = $10;
    HEAP32[$5 + 4 >> 2] = $6;
    HEAP32[$4 + 152 >> 2] = 1566444395;
    $5 = HEAP32[$1 + 4 >> 2];
    HEAP32[$4 + 24 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$4 + 28 >> 2] = $5;
    $6 = HEAP32[$1 + 20 >> 2];
    HEAP32[$4 + 40 >> 2] = HEAP32[$1 + 16 >> 2];
    HEAP32[$4 + 44 >> 2] = $6;
    $5 = HEAP32[$1 + 36 >> 2];
    HEAP32[$4 + 56 >> 2] = HEAP32[$1 + 32 >> 2];
    HEAP32[$4 + 60 >> 2] = $5;
    $6 = HEAP32[$1 + 52 >> 2];
    HEAP32[$4 + 72 >> 2] = HEAP32[$1 + 48 >> 2];
    HEAP32[$4 + 76 >> 2] = $6;
    $5 = HEAP32[$2 + 4 >> 2];
    HEAP32[$4 + 88 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$4 + 92 >> 2] = $5;
    $7 = $2 + 24 | 0;
    $1 = HEAP32[$7 >> 2];
    $6 = HEAP32[$7 + 4 >> 2];
    $5 = $4 + 112 | 0;
    HEAP32[$5 >> 2] = $1;
    HEAP32[$5 + 4 >> 2] = $6;
    $5 = HEAP32[$2 + 20 >> 2];
    $6 = $4 + 104 | 0;
    HEAP32[$6 >> 2] = HEAP32[$2 + 16 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $7 = $2 + 40 | 0;
    $1 = HEAP32[$7 >> 2];
    $6 = HEAP32[$7 + 4 >> 2];
    $5 = $4 + 128 | 0;
    HEAP32[$5 >> 2] = $1;
    HEAP32[$5 + 4 >> 2] = $6;
    $5 = HEAP32[$2 + 36 >> 2];
    $6 = $4 + 120 | 0;
    HEAP32[$6 >> 2] = HEAP32[$2 + 32 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    $7 = $2 + 56 | 0;
    $1 = HEAP32[$7 >> 2];
    $6 = HEAP32[$7 + 4 >> 2];
    $5 = $4 + 144 | 0;
    HEAP32[$5 >> 2] = $1;
    HEAP32[$5 + 4 >> 2] = $6;
    $5 = HEAP32[$2 + 52 >> 2];
    $6 = $4 + 136 | 0;
    HEAP32[$6 >> 2] = HEAP32[$2 + 48 >> 2];
    HEAP32[$6 + 4 >> 2] = $5;
    btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29($0, $4 + 24 | 0, $3, 0, 0);
    break label$1;
   }
   $25 = HEAPF32[$1 + 52 >> 2];
   $26 = HEAPF32[$1 + 56 >> 2];
   $6 = $2 + 52 | 0;
   $32 = HEAPF32[$6 >> 2];
   $5 = $2 + 56 | 0;
   $33 = HEAPF32[$5 >> 2];
   $11 = HEAPF32[$1 + 20 >> 2];
   $16 = HEAPF32[$1 + 36 >> 2];
   $10 = $2 + 20 | 0;
   $15 = HEAPF32[$10 >> 2];
   $31 = $2 + 36 | 0;
   $12 = HEAPF32[$31 >> 2];
   $35 = $2 + 24 | 0;
   $13 = HEAPF32[$35 >> 2];
   $8 = HEAPF32[$1 + 24 >> 2];
   $36 = $2 + 40 | 0;
   $9 = HEAPF32[$36 >> 2];
   $17 = HEAPF32[$1 + 40 >> 2];
   $34 = HEAPF32[$1 + 48 >> 2];
   $43 = HEAPF32[$2 + 48 >> 2];
   $7 = HEAP32[$0 + 12 >> 2];
   $18 = HEAPF32[$1 + 32 >> 2];
   $23 = HEAPF32[$1 + 16 >> 2];
   $24 = HEAPF32[$1 >> 2];
   $27 = HEAPF32[$1 + 4 >> 2];
   $14 = HEAPF32[$2 + 32 >> 2];
   $19 = HEAPF32[$2 + 16 >> 2];
   $20 = HEAPF32[$2 >> 2];
   $21 = HEAPF32[$2 + 4 >> 2];
   $0 = HEAP32[$0 + 20 >> 2];
   $22 = HEAPF32[$2 + 8 >> 2];
   $28 = HEAPF32[$1 + 8 >> 2];
   HEAP32[$4 + 172 >> 2] = 0;
   $37 = Math_fround(Math_fround(Math_fround($28 * $20) + Math_fround($8 * $19)) + Math_fround($17 * $14));
   $29 = Math_fround(-HEAPF32[$0 + 52 >> 2]);
   $38 = Math_fround(Math_fround(Math_fround($28 * $21) + Math_fround($8 * $15)) + Math_fround($17 * $12));
   $1 = $0 + 56 | 0;
   $30 = HEAPF32[$1 >> 2];
   $28 = Math_fround(Math_fround(Math_fround($28 * $22) + Math_fround($8 * $13)) + Math_fround($17 * $9));
   $39 = $0 + 60 | 0;
   $8 = HEAPF32[$39 >> 2];
   HEAPF32[$4 + 168 >> 2] = Math_fround(Math_fround($37 * $29) - Math_fround($38 * $30)) - Math_fround($28 * $8);
   $40 = Math_fround(Math_fround(Math_fround($27 * $20) + Math_fround($11 * $19)) + Math_fround($16 * $14));
   $41 = Math_fround(Math_fround(Math_fround($27 * $21) + Math_fround($11 * $15)) + Math_fround($16 * $12));
   $27 = Math_fround(Math_fround(Math_fround($27 * $22) + Math_fround($11 * $13)) + Math_fround($16 * $9));
   HEAPF32[$4 + 164 >> 2] = Math_fround(Math_fround($40 * $29) - Math_fround($30 * $41)) - Math_fround($8 * $27);
   $42 = Math_fround(Math_fround(Math_fround($24 * $20) + Math_fround($23 * $19)) + Math_fround($18 * $14));
   $11 = Math_fround($42 * $29);
   $29 = Math_fround(Math_fround(Math_fround($24 * $21) + Math_fround($23 * $15)) + Math_fround($18 * $12));
   $11 = Math_fround($11 - Math_fround($30 * $29));
   $30 = Math_fround(Math_fround(Math_fround($24 * $22) + Math_fround($23 * $13)) + Math_fround($18 * $9));
   HEAPF32[$4 + 160 >> 2] = $11 - Math_fround($8 * $30);
   FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 64 >> 2]]($4 + 24 | 0, $7, $4 + 160 | 0);
   $11 = HEAPF32[$1 >> 2];
   $16 = HEAPF32[$39 >> 2];
   $44 = HEAPF32[$0 + 68 >> 2];
   $8 = HEAPF32[$0 + 52 >> 2];
   $17 = HEAPF32[$4 + 24 >> 2];
   $18 = HEAPF32[$4 + 28 >> 2];
   $23 = HEAPF32[$4 + 32 >> 2];
   HEAP32[$4 + 172 >> 2] = 0;
   $24 = Math_fround(-$43);
   $14 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($34 * $20) + Math_fround($25 * $19)) + Math_fround($26 * $14)) + Math_fround(Math_fround(Math_fround($20 * $24) - Math_fround($19 * $32)) - Math_fround($14 * $33))) + Math_fround(Math_fround(Math_fround($42 * $17) + Math_fround($40 * $18)) + Math_fround($37 * $23)));
   $9 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($34 * $22) + Math_fround($25 * $13)) + Math_fround($26 * $9)) + Math_fround(Math_fround(Math_fround($22 * $24) - Math_fround($13 * $32)) - Math_fround($9 * $33))) + Math_fround(Math_fround(Math_fround($30 * $17) + Math_fround($27 * $18)) + Math_fround($28 * $23)));
   $13 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($34 * $21) + Math_fround($25 * $15)) + Math_fround($26 * $12)) + Math_fround(Math_fround(Math_fround($21 * $24) - Math_fround($15 * $32)) - Math_fround($12 * $33))) + Math_fround(Math_fround(Math_fround($29 * $17) + Math_fround($41 * $18)) + Math_fround($38 * $23)));
   $15 = Math_fround(Math_fround(Math_fround($16 * $9) + Math_fround(Math_fround($8 * $14) + Math_fround($11 * $13))) - $44);
   $12 = Math_fround($14 - Math_fround($8 * $15));
   $14 = HEAPF32[$2 + 32 >> 2];
   $13 = Math_fround($13 - Math_fround($11 * $15));
   $19 = HEAPF32[$31 >> 2];
   $9 = Math_fround($9 - Math_fround($16 * $15));
   $20 = HEAPF32[$36 >> 2];
   HEAPF32[$4 + 168 >> 2] = Math_fround(Math_fround(Math_fround($12 * $14) + Math_fround($13 * $19)) + Math_fround($9 * $20)) + HEAPF32[$5 >> 2];
   $21 = HEAPF32[$2 + 16 >> 2];
   $22 = HEAPF32[$10 >> 2];
   $25 = HEAPF32[$35 >> 2];
   HEAPF32[$4 + 164 >> 2] = Math_fround(Math_fround(Math_fround($12 * $21) + Math_fround($13 * $22)) + Math_fround($9 * $25)) + HEAPF32[$6 >> 2];
   $26 = HEAPF32[$2 + 8 >> 2];
   $17 = Math_fround($26 * $9);
   $9 = HEAPF32[$2 >> 2];
   $18 = Math_fround($9 * $12);
   $12 = HEAPF32[$2 + 4 >> 2];
   HEAPF32[$4 + 160 >> 2] = Math_fround($17 + Math_fround($18 + Math_fround($12 * $13))) + HEAPF32[$2 + 48 >> 2];
   HEAP32[$4 + 20 >> 2] = 0;
   HEAPF32[$4 + 16 >> 2] = Math_fround(Math_fround($8 * $14) + Math_fround($11 * $19)) + Math_fround($16 * $20);
   HEAPF32[$4 + 12 >> 2] = Math_fround(Math_fround($8 * $21) + Math_fround($11 * $22)) + Math_fround($16 * $25);
   HEAPF32[$4 + 8 >> 2] = Math_fround(Math_fround($9 * $8) + Math_fround($12 * $11)) + Math_fround($26 * $16);
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $4 + 8 | 0, $4 + 160 | 0, $15);
  }
  global$0 = $4 + 240 | 0;
 }
 
 function btContinuousConvexCollision__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0;
  $6 = global$0 - 304 | 0;
  global$0 = $6;
  HEAP32[$6 + 300 >> 2] = 0;
  $14 = Math_fround(HEAPF32[$2 + 56 >> 2] - HEAPF32[$1 + 56 >> 2]);
  HEAPF32[$6 + 296 >> 2] = $14;
  $18 = Math_fround(HEAPF32[$2 + 52 >> 2] - HEAPF32[$1 + 52 >> 2]);
  HEAPF32[$6 + 292 >> 2] = $18;
  $19 = Math_fround(HEAPF32[$2 + 48 >> 2] - HEAPF32[$1 + 48 >> 2]);
  HEAPF32[$6 + 288 >> 2] = $19;
  btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20float__29($1, $2, $6 + 112 | 0, $6 + 48 | 0);
  HEAP32[$6 + 284 >> 2] = 0;
  $10 = HEAPF32[$6 + 48 >> 2];
  $7 = Math_fround($10 * HEAPF32[$6 + 120 >> 2]);
  HEAPF32[$6 + 280 >> 2] = $7;
  $11 = Math_fround($10 * HEAPF32[$6 + 116 >> 2]);
  HEAPF32[$6 + 276 >> 2] = $11;
  $10 = Math_fround($10 * HEAPF32[$6 + 112 >> 2]);
  HEAPF32[$6 + 272 >> 2] = $10;
  HEAP32[$6 + 268 >> 2] = 0;
  $20 = Math_fround(HEAPF32[$4 + 56 >> 2] - HEAPF32[$3 + 56 >> 2]);
  HEAPF32[$6 + 264 >> 2] = $20;
  $21 = Math_fround(HEAPF32[$4 + 52 >> 2] - HEAPF32[$3 + 52 >> 2]);
  HEAPF32[$6 + 260 >> 2] = $21;
  $22 = Math_fround(HEAPF32[$4 + 48 >> 2] - HEAPF32[$3 + 48 >> 2]);
  HEAPF32[$6 + 256 >> 2] = $22;
  btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20float__29($3, $4, $6 + 112 | 0, $6 + 48 | 0);
  HEAP32[$6 + 252 >> 2] = 0;
  $12 = HEAPF32[$6 + 48 >> 2];
  $13 = Math_fround($12 * HEAPF32[$6 + 120 >> 2]);
  HEAPF32[$6 + 248 >> 2] = $13;
  $15 = Math_fround($12 * HEAPF32[$6 + 116 >> 2]);
  HEAPF32[$6 + 244 >> 2] = $15;
  $12 = Math_fround($12 * HEAPF32[$6 + 112 >> 2]);
  HEAPF32[$6 + 240 >> 2] = $12;
  $4 = HEAP32[$0 + 12 >> 2];
  $24 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4));
  $4 = HEAP32[$0 + 16 >> 2];
  if ($4) {
   $25 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 16 >> 2]]($4));
   $14 = HEAPF32[$6 + 296 >> 2];
   $20 = HEAPF32[$6 + 264 >> 2];
   $18 = HEAPF32[$6 + 292 >> 2];
   $21 = HEAPF32[$6 + 260 >> 2];
   $19 = HEAPF32[$6 + 288 >> 2];
   $22 = HEAPF32[$6 + 256 >> 2];
   $13 = HEAPF32[$6 + 248 >> 2];
   $15 = HEAPF32[$6 + 244 >> 2];
   $7 = HEAPF32[$6 + 280 >> 2];
   $11 = HEAPF32[$6 + 276 >> 2];
   $10 = HEAPF32[$6 + 272 >> 2];
   $12 = HEAPF32[$6 + 240 >> 2];
  }
  $15 = Math_fround(Math_fround($24 * Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($11 * $11)) + Math_fround($7 * $7))))) + Math_fround($25 * Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($12 * $12) + Math_fround($15 * $15)) + Math_fround($13 * $13))))));
  $11 = Math_fround($22 - $19);
  $10 = Math_fround($21 - $18);
  $13 = Math_fround($20 - $14);
  label$2 : {
   if (Math_fround($15 + Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($11 * $11) + Math_fround($10 * $10)) + Math_fround($13 * $13))))) == Math_fround(0.0)) {
    break label$2
   }
   HEAP8[$6 + 216 | 0] = 0;
   HEAP32[$6 + 212 >> 2] = 1566444395;
   HEAP32[$6 + 176 >> 2] = 15364;
   btContinuousConvexCollision__computeClosestPoints_28btTransform_20const__2c_20btTransform_20const__2c_20btPointCollector__29($0, $1, $3, $6 + 176 | 0);
   $8 = $6 + 204 | 0;
   $4 = HEAP32[$8 >> 2];
   $2 = HEAP32[$8 + 4 >> 2];
   $9 = $6 + 232 | 0;
   HEAP32[$9 >> 2] = $4;
   HEAP32[$9 + 4 >> 2] = $2;
   $9 = HEAP32[$6 + 200 >> 2];
   HEAP32[$6 + 224 >> 2] = HEAP32[$6 + 196 >> 2];
   HEAP32[$6 + 228 >> 2] = $9;
   if (!HEAPU8[$6 + 216 | 0]) {
    break label$2
   }
   if (Math_fround($15 + Math_fround(Math_fround(Math_fround($11 * HEAPF32[$6 + 180 >> 2]) + Math_fround($10 * HEAPF32[$6 + 184 >> 2])) + Math_fround($13 * HEAPF32[$6 + 188 >> 2]))) <= Math_fround(1.1920928955078125e-07)) {
    break label$2
   }
   $16 = 1;
   label$3 : {
    $14 = Math_fround(HEAPF32[$6 + 212 >> 2] + HEAPF32[$5 + 172 >> 2]);
    label$4 : {
     if (!($14 > Math_fround(1.0000000474974513e-03))) {
      $7 = Math_fround(0.0);
      $11 = HEAPF32[$6 + 192 >> 2];
      break label$4;
     }
     $23 = $6 + 20 | 0;
     $26 = $6 + 160 | 0;
     $4 = 0;
     $12 = Math_fround(0.0);
     while (1) {
      $8 = HEAP32[$5 + 168 >> 2];
      if ($8) {
       HEAP32[$6 + 120 >> 2] = 1065353216;
       HEAP32[$6 + 124 >> 2] = 0;
       HEAP32[$6 + 112 >> 2] = 1065353216;
       HEAP32[$6 + 116 >> 2] = 1065353216;
       FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 28 >> 2]]($8, $6 + 224 | 0, Math_fround(.20000000298023224), $6 + 112 | 0);
      }
      $7 = Math_fround($15 + Math_fround(Math_fround(Math_fround($11 * (wasm2js_scratch_store_i32(0, $2), wasm2js_scratch_load_f32())) + Math_fround($10 * (wasm2js_scratch_store_i32(0, $17), wasm2js_scratch_load_f32()))) + Math_fround($13 * (wasm2js_scratch_store_i32(0, $9), wasm2js_scratch_load_f32()))));
      if ($7 <= Math_fround(1.1920928955078125e-07)) {
       $16 = 0;
       break label$2;
      }
      $7 = Math_fround($12 + Math_fround($14 / $7));
      if ($7 <= $12) {
       $16 = 0;
       break label$2;
      }
      if ($7 < Math_fround(0.0)) {
       $16 = 0;
       break label$2;
      }
      if ($7 > Math_fround(1.0)) {
       $16 = 0;
       break label$2;
      }
      btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btTransform__29($1, $6 + 288 | 0, $6 + 272 | 0, $7, $6 + 112 | 0);
      btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btTransform__29($3, $6 + 256 | 0, $6 + 240 | 0, $7, $6 + 48 | 0);
      $2 = HEAP32[$5 + 168 >> 2];
      if ($2) {
       HEAP32[$6 + 8 >> 2] = 0;
       HEAP32[$6 + 12 >> 2] = 0;
       HEAP32[$6 >> 2] = 1065353216;
       HEAP32[$6 + 4 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 28 >> 2]]($2, $26, Math_fround(.20000000298023224), $6);
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] >> 2]]($5, $7);
      HEAP8[$6 + 40 | 0] = 0;
      HEAP32[$6 + 36 >> 2] = 1566444395;
      HEAP32[$6 >> 2] = 15364;
      btContinuousConvexCollision__computeClosestPoints_28btTransform_20const__2c_20btTransform_20const__2c_20btPointCollector__29($0, $6 + 112 | 0, $6 + 48 | 0, $6);
      if (!HEAPU8[$6 + 40 | 0]) {
       break label$3
      }
      $8 = $23 + 8 | 0;
      $17 = HEAP32[$8 >> 2];
      $2 = HEAP32[$8 + 4 >> 2];
      $9 = $6 + 232 | 0;
      HEAP32[$9 >> 2] = $17;
      HEAP32[$9 + 4 >> 2] = $2;
      $8 = $23;
      $2 = HEAP32[$8 >> 2];
      $9 = HEAP32[$8 + 4 >> 2];
      HEAP32[$6 + 224 >> 2] = $2;
      HEAP32[$6 + 228 >> 2] = $9;
      if ($4 >>> 0 > 63) {
       FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, -2, $4 + 1 | 0);
       $16 = 0;
       break label$2;
      }
      $4 = $4 + 1 | 0;
      $2 = HEAP32[$6 + 4 >> 2];
      $17 = HEAP32[$6 + 8 >> 2];
      $9 = HEAP32[$6 + 12 >> 2];
      $12 = $7;
      $14 = Math_fround(HEAPF32[$6 + 36 >> 2] + HEAPF32[$5 + 172 >> 2]);
      if ($14 > Math_fround(1.0000000474974513e-03)) {
       continue
      }
      break;
     };
     $11 = HEAPF32[$6 + 16 >> 2];
    }
    HEAP32[$5 + 132 >> 2] = $2;
    HEAPF32[$5 + 164 >> 2] = $7;
    $2 = HEAP32[$6 + 228 >> 2];
    HEAP32[$5 + 148 >> 2] = HEAP32[$6 + 224 >> 2];
    HEAP32[$5 + 152 >> 2] = $2;
    HEAPF32[$5 + 144 >> 2] = $11;
    HEAP32[$5 + 140 >> 2] = $9;
    HEAP32[$5 + 136 >> 2] = $17;
    $8 = $6 + 232 | 0;
    $0 = HEAP32[$8 >> 2];
    $9 = HEAP32[$8 + 4 >> 2];
    $2 = $5 + 156 | 0;
    HEAP32[$2 >> 2] = $0;
    HEAP32[$2 + 4 >> 2] = $9;
    break label$2;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, -1, $4);
   $16 = 0;
  }
  global$0 = $6 + 304 | 0;
  return $16 | 0;
 }
 
 function btTriangleRaycastCallback__btTriangleRaycastCallback_28btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  HEAP32[$0 >> 2] = 20460;
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 8 >> 2] = $4;
  $1 = $1 + 8 | 0;
  $5 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 12 | 0;
  HEAP32[$4 >> 2] = $5;
  HEAP32[$4 + 4 >> 2] = $1;
  $1 = $2;
  $2 = HEAP32[$1 >> 2];
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 20 >> 2] = $2;
  HEAP32[$0 + 24 >> 2] = $4;
  $1 = $1 + 8 | 0;
  $2 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 28 | 0;
  HEAP32[$4 >> 2] = $2;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAP32[$0 + 40 >> 2] = 1065353216;
  HEAP32[$0 + 36 >> 2] = $3;
 }
 
 function btTriangleRaycastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $7 = global$0 - 32 | 0;
  global$0 = $7;
  $19 = HEAPF32[$1 + 24 >> 2];
  $24 = HEAPF32[$1 + 40 >> 2];
  $16 = HEAPF32[$1 + 36 >> 2];
  $17 = HEAPF32[$1 + 20 >> 2];
  $8 = HEAPF32[$1 + 8 >> 2];
  $10 = HEAPF32[$1 + 16 >> 2];
  $11 = HEAPF32[$1 + 4 >> 2];
  $18 = HEAPF32[$1 + 32 >> 2];
  $12 = HEAPF32[$1 >> 2];
  HEAP32[$7 + 28 >> 2] = 0;
  $5 = Math_fround($10 - $12);
  $6 = Math_fround($16 - $11);
  $15 = Math_fround($17 - $11);
  $4 = Math_fround($18 - $12);
  $9 = Math_fround(Math_fround($5 * $6) - Math_fround($15 * $4));
  HEAPF32[$7 + 24 >> 2] = $9;
  $13 = Math_fround($19 - $8);
  $14 = Math_fround($13 * $4);
  $4 = Math_fround($24 - $8);
  $5 = Math_fround($14 - Math_fround($5 * $4));
  HEAPF32[$7 + 20 >> 2] = $5;
  $6 = Math_fround(Math_fround($15 * $4) - Math_fround($13 * $6));
  HEAPF32[$7 + 16 >> 2] = $6;
  $13 = HEAPF32[$0 + 4 >> 2];
  $20 = HEAPF32[$0 + 8 >> 2];
  $23 = HEAPF32[$0 + 12 >> 2];
  $4 = Math_fround(Math_fround($8 * $9) + Math_fround(Math_fround($12 * $6) + Math_fround($11 * $5)));
  $15 = Math_fround(Math_fround(Math_fround(Math_fround($6 * $13) + Math_fround($5 * $20)) + Math_fround($9 * $23)) - $4);
  $14 = HEAPF32[$0 + 20 >> 2];
  $21 = HEAPF32[$0 + 24 >> 2];
  $25 = HEAPF32[$0 + 28 >> 2];
  $4 = Math_fround(Math_fround(Math_fround(Math_fround($6 * $14) + Math_fround($5 * $21)) + Math_fround($9 * $25)) - $4);
  label$1 : {
   if (Math_fround($15 * $4) >= Math_fround(0.0)) {
    break label$1
   }
   $1 = HEAP32[$0 + 36 >> 2];
   if ($1 & 1 ? !!($15 <= Math_fround(0.0)) : 0) {
    break label$1
   }
   $4 = Math_fround($15 / Math_fround($15 - $4));
   if (!($4 < HEAPF32[$0 + 40 >> 2])) {
    break label$1
   }
   $22 = Math_fround($21 * $4);
   $21 = Math_fround(Math_fround(1.0) - $4);
   $20 = Math_fround($22 + Math_fround($20 * $21));
   $17 = Math_fround($17 - $20);
   $13 = Math_fround(Math_fround($14 * $4) + Math_fround($13 * $21));
   $14 = Math_fround($12 - $13);
   $22 = Math_fround($11 - $20);
   $11 = Math_fround($10 - $13);
   $10 = Math_fround(Math_fround($25 * $4) + Math_fround($23 * $21));
   $12 = Math_fround($19 - $10);
   $8 = Math_fround($8 - $10);
   $23 = Math_fround(Math_fround($9 * $9) + Math_fround(Math_fround($6 * $6) + Math_fround($5 * $5)));
   $19 = Math_fround($23 * Math_fround(-9.999999747378752e-05));
   if (!(Math_fround(Math_fround($9 * Math_fround(Math_fround($17 * $14) - Math_fround($22 * $11))) + Math_fround(Math_fround($6 * Math_fround(Math_fround($22 * $12) - Math_fround($8 * $17))) + Math_fround($5 * Math_fround(Math_fround($8 * $11) - Math_fround($12 * $14))))) >= $19)) {
    break label$1
   }
   $16 = Math_fround($16 - $20);
   $18 = Math_fround($18 - $13);
   $10 = Math_fround($24 - $10);
   if (!(Math_fround(Math_fround($9 * Math_fround(Math_fround($16 * $11) - Math_fround($17 * $18))) + Math_fround(Math_fround($6 * Math_fround(Math_fround($17 * $10) - Math_fround($12 * $16))) + Math_fround($5 * Math_fround(Math_fround($12 * $18) - Math_fround($10 * $11))))) >= $19)) {
    break label$1
   }
   if (!(Math_fround(Math_fround($9 * Math_fround(Math_fround($22 * $18) - Math_fround($16 * $14))) + Math_fround(Math_fround($6 * Math_fround(Math_fround($16 * $8) - Math_fround($10 * $22))) + Math_fround($5 * Math_fround(Math_fround($10 * $14) - Math_fround($8 * $18))))) >= $19)) {
    break label$1
   }
   $8 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($23)));
   $9 = Math_fround($9 * $8);
   HEAPF32[$7 + 24 >> 2] = $9;
   $5 = Math_fround($5 * $8);
   HEAPF32[$7 + 20 >> 2] = $5;
   $6 = Math_fround($6 * $8);
   HEAPF32[$7 + 16 >> 2] = $6;
   label$3 : {
    if (!($15 <= Math_fround(0.0))) {
     break label$3
    }
    if ($1 & 2) {
     break label$3
    }
    HEAP32[$7 + 12 >> 2] = 0;
    HEAPF32[$7 + 8 >> 2] = -$9;
    HEAPF32[$7 + 4 >> 2] = -$5;
    HEAPF32[$7 >> 2] = -$6;
    (wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $7, $4, $2, $3))), HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
    break label$1;
   }
   (wasm2js_i32$0 = $0, wasm2js_f32$0 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $7 + 16 | 0, $4, $2, $3))), HEAPF32[wasm2js_i32$0 + 40 >> 2] = wasm2js_f32$0;
  }
  global$0 = $7 + 32 | 0;
 }
 
 function btTriangleConvexcastCallback__btTriangleConvexcastCallback_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0;
  HEAP32[$0 + 4 >> 2] = $1;
  HEAP32[$0 >> 2] = 20484;
  $1 = $2 + 8 | 0;
  $8 = HEAP32[$1 >> 2];
  $7 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 16 | 0;
  HEAP32[$6 >> 2] = $8;
  HEAP32[$6 + 4 >> 2] = $7;
  $1 = $2;
  $7 = HEAP32[$1 >> 2];
  $6 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 8 >> 2] = $7;
  HEAP32[$0 + 12 >> 2] = $6;
  $1 = $1 + 24 | 0;
  $8 = HEAP32[$1 >> 2];
  $7 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 32 | 0;
  HEAP32[$6 >> 2] = $8;
  HEAP32[$6 + 4 >> 2] = $7;
  $1 = $2;
  $8 = HEAP32[$1 + 16 >> 2];
  $6 = HEAP32[$1 + 20 >> 2];
  $7 = $0 + 24 | 0;
  HEAP32[$7 >> 2] = $8;
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $1 + 40 | 0;
  $8 = HEAP32[$1 >> 2];
  $7 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 48 | 0;
  HEAP32[$6 >> 2] = $8;
  HEAP32[$6 + 4 >> 2] = $7;
  $1 = $2;
  $8 = HEAP32[$1 + 32 >> 2];
  $6 = HEAP32[$1 + 36 >> 2];
  $7 = $0 + 40 | 0;
  HEAP32[$7 >> 2] = $8;
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $1 + 56 | 0;
  $8 = HEAP32[$1 >> 2];
  $7 = HEAP32[$1 + 4 >> 2];
  $6 = $0 - -64 | 0;
  HEAP32[$6 >> 2] = $8;
  HEAP32[$6 + 4 >> 2] = $7;
  $1 = $2;
  $2 = HEAP32[$1 + 48 >> 2];
  $6 = HEAP32[$1 + 52 >> 2];
  $7 = $0 + 56 | 0;
  HEAP32[$7 >> 2] = $2;
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $3 + 8 | 0;
  $2 = HEAP32[$1 >> 2];
  $7 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 80 | 0;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $7;
  $1 = $3;
  $2 = HEAP32[$1 >> 2];
  $6 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 72 >> 2] = $2;
  HEAP32[$0 + 76 >> 2] = $6;
  $1 = $1 + 24 | 0;
  $2 = HEAP32[$1 >> 2];
  $7 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 96 | 0;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $7;
  $1 = $3;
  $2 = HEAP32[$1 + 16 >> 2];
  $6 = HEAP32[$1 + 20 >> 2];
  $7 = $0 + 88 | 0;
  HEAP32[$7 >> 2] = $2;
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $1 + 40 | 0;
  $2 = HEAP32[$1 >> 2];
  $7 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 112 | 0;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $7;
  $1 = $3;
  $2 = HEAP32[$1 + 32 >> 2];
  $6 = HEAP32[$1 + 36 >> 2];
  $7 = $0 + 104 | 0;
  HEAP32[$7 >> 2] = $2;
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $1 + 56 | 0;
  $2 = HEAP32[$1 >> 2];
  $7 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 128 | 0;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $7;
  $1 = $3;
  $2 = HEAP32[$1 + 48 >> 2];
  $6 = HEAP32[$1 + 52 >> 2];
  $7 = $0 + 120 | 0;
  HEAP32[$7 >> 2] = $2;
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $4 + 8 | 0;
  $2 = HEAP32[$1 >> 2];
  $7 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 144 | 0;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $7;
  $1 = $4;
  $2 = HEAP32[$1 >> 2];
  $6 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 136 >> 2] = $2;
  HEAP32[$0 + 140 >> 2] = $6;
  $1 = $1 + 24 | 0;
  $2 = HEAP32[$1 >> 2];
  $7 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 160 | 0;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $7;
  $1 = $4;
  $2 = HEAP32[$1 + 16 >> 2];
  $6 = HEAP32[$1 + 20 >> 2];
  $7 = $0 + 152 | 0;
  HEAP32[$7 >> 2] = $2;
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $1 + 40 | 0;
  $2 = HEAP32[$1 >> 2];
  $7 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 176 | 0;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $7;
  $1 = $4;
  $2 = HEAP32[$1 + 32 >> 2];
  $6 = HEAP32[$1 + 36 >> 2];
  $7 = $0 + 168 | 0;
  HEAP32[$7 >> 2] = $2;
  HEAP32[$7 + 4 >> 2] = $6;
  $1 = $1 + 56 | 0;
  $2 = HEAP32[$1 >> 2];
  $7 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 192 | 0;
  HEAP32[$6 >> 2] = $2;
  HEAP32[$6 + 4 >> 2] = $7;
  $1 = $4;
  $2 = HEAP32[$1 + 48 >> 2];
  $6 = HEAP32[$1 + 52 >> 2];
  $7 = $0 + 184 | 0;
  HEAP32[$7 >> 2] = $2;
  HEAP32[$7 + 4 >> 2] = $6;
  HEAP32[$0 + 208 >> 2] = 0;
  HEAPF32[$0 + 204 >> 2] = $5;
  HEAP32[$0 + 200 >> 2] = 1065353216;
 }
 
 function btTriangleConvexcastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0;
  $4 = global$0 - 688 | 0;
  global$0 = $4;
  $13 = btPolyhedralConvexShape__btPolyhedralConvexShape_28_29($4 + 576 | 0);
  $5 = $1 + 8 | 0;
  $8 = HEAP32[$5 >> 2];
  $5 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 644 | 0;
  HEAP32[$6 >> 2] = $8;
  HEAP32[$6 + 4 >> 2] = $5;
  $6 = HEAP32[$1 + 20 >> 2];
  $5 = $4 + 652 | 0;
  HEAP32[$5 >> 2] = HEAP32[$1 + 16 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $5 = $1 + 24 | 0;
  $8 = HEAP32[$5 >> 2];
  $5 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 660 | 0;
  HEAP32[$6 >> 2] = $8;
  HEAP32[$6 + 4 >> 2] = $5;
  $6 = HEAP32[$1 + 36 >> 2];
  $5 = $4 + 668 | 0;
  HEAP32[$5 >> 2] = HEAP32[$1 + 32 >> 2];
  HEAP32[$5 + 4 >> 2] = $6;
  $5 = $1 + 40 | 0;
  $8 = HEAP32[$5 >> 2];
  $5 = HEAP32[$5 + 4 >> 2];
  $6 = $4 + 676 | 0;
  HEAP32[$6 >> 2] = $8;
  HEAP32[$6 + 4 >> 2] = $5;
  HEAP32[$4 + 580 >> 2] = 1;
  HEAP32[$4 + 576 >> 2] = 16352;
  $6 = HEAP32[$1 + 4 >> 2];
  HEAP32[$4 + 636 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$4 + 640 >> 2] = $6;
  HEAP32[$4 + 624 >> 2] = HEAP32[$0 + 204 >> 2];
  HEAP8[$4 + 548 | 0] = 0;
  HEAP32[$4 + 524 >> 2] = 953267991;
  HEAP32[$4 + 208 >> 2] = 14800;
  $1 = btContinuousConvexCollision__btContinuousConvexCollision_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($4 + 184 | 0, HEAP32[$0 + 4 >> 2], $4 + 576 | 0, $4 + 216 | 0, $4 + 208 | 0);
  HEAP32[$4 + 8 >> 2] = 15992;
  HEAP32[$4 + 172 >> 2] = 1065353216;
  HEAP32[$4 + 176 >> 2] = 0;
  HEAP32[$4 + 180 >> 2] = HEAP32[$0 + 208 >> 2];
  $5 = $0 + 136 | 0;
  label$1 : {
   if (!btContinuousConvexCollision__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29($1, $0 + 8 | 0, $0 + 72 | 0, $5, $5, $4 + 8 | 0)) {
    break label$1
   }
   $9 = HEAPF32[$4 + 140 >> 2];
   $10 = HEAPF32[$4 + 144 >> 2];
   $11 = HEAPF32[$4 + 148 >> 2];
   $7 = Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($10 * $10)) + Math_fround($11 * $11));
   if (!($7 > Math_fround(9.999999747378752e-05))) {
    break label$1
   }
   $12 = HEAPF32[$4 + 172 >> 2];
   if (!($12 < HEAPF32[$0 + 200 >> 2])) {
    break label$1
   }
   $7 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($7)));
   HEAPF32[$4 + 148 >> 2] = $11 * $7;
   HEAPF32[$4 + 144 >> 2] = $10 * $7;
   HEAPF32[$4 + 140 >> 2] = $9 * $7;
   Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $4 + 140 | 0, $4 + 156 | 0, $12, $2, $3));
  }
  btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1($13);
  global$0 = $4 + 688 | 0;
 }
 
 function btCollisionWorld__btCollisionWorld_28btDispatcher__2c_20btBroadphaseInterface__2c_20btCollisionConfiguration__29($0, $1, $2) {
  HEAP32[$0 >> 2] = 20592;
  HEAP8[$0 + 76 | 0] = 1;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 68 >> 2] = $2;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = $1;
  HEAP8[$0 + 20 | 0] = 1;
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 - -64 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 0;
  HEAP32[$0 + 56 >> 2] = 1025758986;
  HEAP8[$0 + 54 | 0] = 1;
  HEAP16[$0 + 52 >> 1] = 256;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  $1 = $0 + 36 | 0;
  HEAP32[$1 >> 2] = 1;
  HEAP32[$1 + 4 >> 2] = 1065353216;
  $1 = $0 + 8 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
 }
 
 function btCollisionWorld___btCollisionWorld_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  HEAP32[$0 >> 2] = 20592;
  $1 = HEAP32[$0 + 16 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  if (($2 | 0) >= 1) {
   while (1) {
    $5 = HEAP32[$1 + $4 >> 2];
    $3 = HEAP32[$5 + 188 >> 2];
    if ($3) {
     $1 = HEAP32[$0 + 68 >> 2];
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($1, $3, HEAP32[$0 + 24 >> 2]);
     $1 = HEAP32[$0 + 68 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $3, HEAP32[$0 + 24 >> 2]);
     HEAP32[$5 + 188 >> 2] = 0;
     $2 = HEAP32[$0 + 8 >> 2];
     $1 = HEAP32[$0 + 16 >> 2];
    }
    $4 = $4 + 4 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) < ($2 | 0)) {
     continue
    }
    break;
   }
  }
  if ($1) {
   if (HEAPU8[$0 + 20 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 16 >> 2] = 0;
  }
  HEAP32[$0 + 16 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 20 | 0] = 1;
  return $0 | 0;
 }
 
 function btCollisionWorld___btCollisionWorld_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  HEAP32[$0 >> 2] = 20592;
  $1 = HEAP32[$0 + 16 >> 2];
  $2 = HEAP32[$0 + 8 >> 2];
  if (($2 | 0) >= 1) {
   while (1) {
    $5 = HEAP32[$1 + $4 >> 2];
    $3 = HEAP32[$5 + 188 >> 2];
    if ($3) {
     $1 = HEAP32[$0 + 68 >> 2];
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($1, $3, HEAP32[$0 + 24 >> 2]);
     $1 = HEAP32[$0 + 68 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $3, HEAP32[$0 + 24 >> 2]);
     HEAP32[$5 + 188 >> 2] = 0;
     $2 = HEAP32[$0 + 8 >> 2];
     $1 = HEAP32[$0 + 16 >> 2];
    }
    $4 = $4 + 4 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) < ($2 | 0)) {
     continue
    }
    break;
   }
  }
  label$4 : {
   if (!$1) {
    break label$4
   }
   if (!HEAPU8[$0 + 20 | 0]) {
    break label$4
   }
   btAlignedFreeInternal_28void__29($1);
  }
  operator_20delete_28void__29($0);
 }
 
 function btCollisionWorld__addCollisionObject_28btCollisionObject__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7 = global$0 - 96 | 0;
  global$0 = $7;
  $5 = HEAP32[$0 + 8 >> 2];
  HEAP32[$1 + 216 >> 2] = $5;
  label$1 : {
   if (HEAP32[$0 + 12 >> 2] != ($5 | 0)) {
    break label$1
   }
   $8 = $5 ? $5 << 1 : 1;
   if (($5 | 0) >= ($8 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$8) {
     break label$2
    }
    $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($8 << 2);
    $5 = HEAP32[$0 + 8 >> 2];
   }
   if (($5 | 0) >= 1) {
    $6 = $5;
    while (1) {
     HEAP32[$4 + $9 >> 2] = HEAP32[$4 + HEAP32[$0 + 16 >> 2] >> 2];
     $4 = $4 + 4 | 0;
     $6 = $6 + -1 | 0;
     if ($6) {
      continue
     }
     break;
    };
   }
   $4 = HEAP32[$0 + 16 >> 2];
   if ($4) {
    if (HEAPU8[$0 + 20 | 0]) {
     btAlignedFreeInternal_28void__29($4);
     $5 = HEAP32[$0 + 8 >> 2];
    }
    HEAP32[$0 + 16 >> 2] = 0;
   }
   HEAP32[$0 + 16 >> 2] = $9;
   HEAP32[$0 + 12 >> 2] = $8;
   HEAP8[$0 + 20 | 0] = 1;
  }
  HEAP32[$0 + 8 >> 2] = $5 + 1;
  HEAP32[HEAP32[$0 + 16 >> 2] + ($5 << 2) >> 2] = $1;
  $4 = $1 + 12 | 0;
  $8 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $7 + 40 | 0;
  HEAP32[$5 >> 2] = $8;
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = $1 + 28 | 0;
  $8 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  $6 = $7 + 56 | 0;
  HEAP32[$6 >> 2] = $8;
  HEAP32[$6 + 4 >> 2] = $5;
  $4 = $1 + 44 | 0;
  $8 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  $5 = $7 + 72 | 0;
  HEAP32[$5 >> 2] = $8;
  HEAP32[$5 + 4 >> 2] = $6;
  $4 = $1 + 60 | 0;
  $8 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  $6 = $7 + 88 | 0;
  HEAP32[$6 >> 2] = $8;
  HEAP32[$6 + 4 >> 2] = $5;
  $6 = HEAP32[$1 + 8 >> 2];
  HEAP32[$7 + 32 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$7 + 36 >> 2] = $6;
  $4 = $1 + 20 | 0;
  $6 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$7 + 48 >> 2] = $6;
  HEAP32[$7 + 52 >> 2] = $5;
  $4 = $1 + 36 | 0;
  $5 = HEAP32[$4 >> 2];
  $6 = HEAP32[$4 + 4 >> 2];
  HEAP32[$7 + 64 >> 2] = $5;
  HEAP32[$7 + 68 >> 2] = $6;
  $4 = $1 + 52 | 0;
  $6 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  HEAP32[$7 + 80 >> 2] = $6;
  HEAP32[$7 + 84 >> 2] = $5;
  $4 = HEAP32[$1 + 192 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $7 + 32 | 0, $7 + 16 | 0, $7);
  $4 = HEAP32[$0 + 68 >> 2];
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $7 + 16 | 0, $7, HEAP32[HEAP32[$1 + 192 >> 2] + 4 >> 2], $1, $2, $3, HEAP32[$0 + 24 >> 2]) | 0), HEAP32[wasm2js_i32$0 + 188 >> 2] = wasm2js_i32$1;
  global$0 = $7 + 96 | 0;
 }
 
 function btCollisionWorld__updateSingleAabb_28btCollisionObject__29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0);
  $2 = global$0 + -64 | 0;
  global$0 = $2;
  $9 = HEAP32[$1 + 192 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 8 >> 2]]($9, $1 + 4 | 0, $2 + 48 | 0, $2 + 32 | 0);
  $3 = HEAPF32[744];
  $10 = Math_fround(HEAPF32[$2 + 48 >> 2] - $3);
  HEAPF32[$2 + 48 >> 2] = $10;
  $6 = Math_fround(HEAPF32[$2 + 52 >> 2] - $3);
  HEAPF32[$2 + 52 >> 2] = $6;
  $7 = Math_fround(HEAPF32[$2 + 56 >> 2] - $3);
  HEAPF32[$2 + 56 >> 2] = $7;
  $4 = Math_fround($3 + HEAPF32[$2 + 32 >> 2]);
  HEAPF32[$2 + 32 >> 2] = $4;
  $5 = Math_fround($3 + HEAPF32[$2 + 36 >> 2]);
  HEAPF32[$2 + 36 >> 2] = $5;
  $8 = Math_fround($3 + HEAPF32[$2 + 40 >> 2]);
  HEAPF32[$2 + 40 >> 2] = $8;
  label$1 : {
   if (!HEAPU8[$0 + 44 | 0]) {
    break label$1
   }
   if (HEAP32[$1 + 252 >> 2] != 2) {
    break label$1
   }
   if (HEAPU8[$1 + 204 | 0] & 3) {
    break label$1
   }
   $9 = HEAP32[$1 + 192 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 8 >> 2]]($9, $1 + 68 | 0, $2 + 16 | 0, $2);
   $6 = Math_fround(HEAPF32[$2 + 16 >> 2] - $3);
   HEAPF32[$2 + 16 >> 2] = $6;
   $7 = Math_fround(HEAPF32[$2 + 20 >> 2] - $3);
   HEAPF32[$2 + 20 >> 2] = $7;
   $4 = Math_fround(HEAPF32[$2 + 24 >> 2] - $3);
   HEAPF32[$2 + 24 >> 2] = $4;
   $5 = Math_fround($3 + HEAPF32[$2 >> 2]);
   HEAPF32[$2 >> 2] = $5;
   $8 = Math_fround($3 + HEAPF32[$2 + 4 >> 2]);
   HEAPF32[$2 + 4 >> 2] = $8;
   $3 = Math_fround($3 + HEAPF32[$2 + 8 >> 2]);
   HEAPF32[$2 + 8 >> 2] = $3;
   $10 = HEAPF32[$2 + 48 >> 2];
   if (!!($6 < $10)) {
    HEAPF32[$2 + 48 >> 2] = $6;
    $10 = $6;
   }
   $6 = HEAPF32[$2 + 52 >> 2];
   if (!!($7 < $6)) {
    HEAPF32[$2 + 52 >> 2] = $7;
    $6 = $7;
   }
   $7 = HEAPF32[$2 + 56 >> 2];
   if (!!($4 < $7)) {
    HEAPF32[$2 + 56 >> 2] = $4;
    $7 = $4;
   }
   $4 = HEAPF32[$2 + 28 >> 2];
   if (!!($4 < HEAPF32[$2 + 60 >> 2])) {
    HEAPF32[$2 + 60 >> 2] = $4
   }
   $4 = HEAPF32[$2 + 32 >> 2];
   if (!!($4 < $5)) {
    HEAPF32[$2 + 32 >> 2] = $5;
    $4 = $5;
   }
   $5 = HEAPF32[$2 + 36 >> 2];
   if (!!($5 < $8)) {
    HEAPF32[$2 + 36 >> 2] = $8;
    $5 = $8;
   }
   $8 = HEAPF32[$2 + 40 >> 2];
   if (!!($8 < $3)) {
    HEAPF32[$2 + 40 >> 2] = $3;
    $8 = $3;
   }
   $3 = HEAPF32[$2 + 12 >> 2];
   if (!(HEAPF32[$2 + 44 >> 2] < $3)) {
    break label$1
   }
   HEAPF32[$2 + 44 >> 2] = $3;
  }
  $9 = HEAP32[$0 + 68 >> 2];
  label$9 : {
   label$10 : {
    if (!(HEAP8[$1 + 204 | 0] & 1)) {
     $3 = Math_fround($4 - $10);
     $4 = Math_fround($3 * $3);
     $3 = Math_fround($5 - $6);
     $5 = Math_fround($4 + Math_fround($3 * $3));
     $3 = Math_fround($8 - $7);
     if (!(Math_fround($5 + Math_fround($3 * $3)) < Math_fround(999999995904.0))) {
      break label$10
     }
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 16 >> 2]]($9, HEAP32[$1 + 188 >> 2], $2 + 48 | 0, $2 + 32 | 0, HEAP32[$0 + 24 >> 2]);
    break label$9;
   }
   btCollisionObject__setActivationState_28int_29_20const($1, 5);
   if (HEAPU8[2804]) {
    break label$9
   }
   $1 = HEAP32[$0 + 72 >> 2];
   if (!$1) {
    break label$9
   }
   HEAP8[2804] = 1;
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($1, 20644);
   $1 = HEAP32[$0 + 72 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($1, 20693);
   $1 = HEAP32[$0 + 72 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($1, 20761);
   $1 = HEAP32[$0 + 72 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($1, 20826);
  }
  global$0 = $2 - -64 | 0;
 }
 
 function btCollisionWorld__updateAabbs_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  CProfileSample__CProfileSample_28char_20const__29($1 + 8 | 0, 20835);
  $2 = HEAP32[$0 + 8 >> 2];
  if (($2 | 0) >= 1) {
   while (1) {
    $4 = HEAP32[$3 + HEAP32[$0 + 16 >> 2] >> 2];
    label$3 : {
     label$4 : {
      if (HEAPU8[$0 + 76 | 0]) {
       break label$4
      }
      $5 = HEAP32[$4 + 220 >> 2] + -2 | 0;
      if ($5 >>> 0 > 3) {
       break label$4
      }
      switch ($5 - 1 | 0) {
      case 0:
      case 1:
       break label$4;
      default:
       break label$3;
      };
     }
     btCollisionWorld__updateSingleAabb_28btCollisionObject__29($0, $4);
     $2 = HEAP32[$0 + 8 >> 2];
    }
    $3 = $3 + 4 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) < ($2 | 0)) {
     continue
    }
    break;
   }
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $1 + 16 | 0;
 }
 
 function btCollisionWorld__computeOverlappingPairs_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  CProfileSample__CProfileSample_28char_20const__29($1 + 8 | 0, 20847);
  $2 = HEAP32[$0 + 68 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 32 >> 2]]($2, HEAP32[$0 + 24 >> 2]);
  CProfileSample___CProfileSample_28_29();
  global$0 = $1 + 16 | 0;
 }
 
 function btCollisionWorld__performDiscreteCollisionDetection_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  CProfileSample__CProfileSample_28char_20const__29($1 + 8 | 0, 20873);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0);
  $2 = HEAP32[$0 + 24 >> 2];
  CProfileSample__CProfileSample_28char_20const__29($1, 20907);
  if ($2) {
   $3 = HEAP32[$0 + 68 >> 2];
   ((((wasm2js_i32$1 = $2, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 36 >> 2]]($3) | 0), wasm2js_i32$3 = $0 + 28 | 0), wasm2js_i32$4 = HEAP32[$0 + 24 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 32 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0);
  }
  CProfileSample___CProfileSample_28_29();
  CProfileSample___CProfileSample_28_29();
  global$0 = $1 + 16 | 0;
 }
 
 function btCollisionWorld__removeCollisionObject_28btCollisionObject__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $3 = HEAP32[$1 + 188 >> 2];
  if ($3) {
   $2 = HEAP32[$0 + 68 >> 2];
   $2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, $3, HEAP32[$0 + 24 >> 2]);
   $2 = HEAP32[$0 + 68 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, $3, HEAP32[$0 + 24 >> 2]);
   HEAP32[$1 + 188 >> 2] = 0;
  }
  $4 = HEAP32[$0 + 8 >> 2];
  label$2 : {
   label$3 : {
    $3 = HEAP32[$1 + 216 >> 2];
    if (($3 | 0) < 0) {
     break label$3
    }
    if (($3 | 0) >= ($4 | 0)) {
     break label$3
    }
    $5 = $0 + 16 | 0;
    $2 = HEAP32[$5 >> 2];
    $6 = $3 << 2;
    $7 = $2 + $6 | 0;
    $8 = HEAP32[$7 >> 2];
    $9 = $2;
    $2 = $4 + -1 | 0;
    $4 = $2 << 2;
    HEAP32[$7 >> 2] = HEAP32[$9 + $4 >> 2];
    HEAP32[$0 + 8 >> 2] = $2;
    HEAP32[$4 + HEAP32[$5 >> 2] >> 2] = $8;
    if (($3 | 0) >= ($2 | 0)) {
     break label$2
    }
    HEAP32[HEAP32[$6 + HEAP32[$0 + 16 >> 2] >> 2] + 216 >> 2] = $3;
    break label$2;
   }
   if (($4 | 0) < 1) {
    break label$2
   }
   $2 = 0;
   $5 = HEAP32[$0 + 16 >> 2];
   $3 = $5;
   while (1) {
    if (HEAP32[$3 >> 2] != ($1 | 0)) {
     $3 = $3 + 4 | 0;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($4 | 0)) {
      continue
     }
     break label$2;
    }
    break;
   };
   if (($4 | 0) <= ($2 | 0)) {
    break label$2
   }
   $2 = $4 + -1 | 0;
   $4 = $2 << 2;
   HEAP32[$3 >> 2] = HEAP32[$4 + $5 >> 2];
   HEAP32[$0 + 8 >> 2] = $2;
   HEAP32[$4 + HEAP32[$0 + 16 >> 2] >> 2] = $1;
  }
  HEAP32[$1 + 216 >> 2] = -1;
 }
 
 function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = global$0 - 704 | 0;
  global$0 = $4;
  btConvexInternalShape__btConvexInternalShape_28_29($4 + 624 | 0);
  $7 = $4 + 652 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $4 + 660 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  $7 = $4 + 668 | 0;
  HEAP32[$7 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$4 + 676 >> 2] = 0;
  HEAP32[$4 + 648 >> 2] = 1065353216;
  HEAP32[$4 + 640 >> 2] = 1065353216;
  HEAP32[$4 + 644 >> 2] = 1065353216;
  HEAP32[$4 + 628 >> 2] = 8;
  HEAP32[$4 + 624 >> 2] = 9852;
  $5 = HEAP32[$2 + 12 >> 2];
  label$1 : {
   $13 = HEAP32[$2 + 4 >> 2];
   $23 = HEAP32[$13 + 4 >> 2];
   if (($23 | 0) <= 19) {
    HEAP32[$4 + 616 >> 2] = 0;
    HEAP32[$4 + 620 >> 2] = 0;
    HEAP32[$4 + 448 >> 2] = 15992;
    HEAP32[$4 + 612 >> 2] = HEAP32[$3 + 4 >> 2];
    HEAP8[$4 + 420 | 0] = 0;
    HEAP32[$4 + 396 >> 2] = 953267991;
    $23 = btSubsimplexConvexCast__btSubsimplexConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($4 + 680 | 0, $4 + 624 | 0, $13, $4 + 88 | 0);
    $8 = (wasm2js_i32$0 = btGjkConvexCast__btGjkConvexCast_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__29($4 + 72 | 0, $4 + 624 | 0, $13, $4 + 88 | 0), wasm2js_i32$1 = $23, wasm2js_i32$2 = HEAP32[$3 + 20 >> 2] & 8, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    label$3 : {
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 8 >> 2]]($8, $0, $1, $5, $5, $4 + 448 | 0)) {
      break label$3
     }
     $10 = HEAPF32[$4 + 580 >> 2];
     $9 = HEAPF32[$4 + 584 >> 2];
     $11 = HEAPF32[$4 + 588 >> 2];
     $12 = Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($9 * $9)) + Math_fround($11 * $11));
     if (!($12 > Math_fround(9.999999747378752e-05))) {
      break label$3
     }
     $14 = HEAPF32[$4 + 612 >> 2];
     if (!($14 < HEAPF32[$3 + 4 >> 2])) {
      break label$3
     }
     $12 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($12)));
     HEAPF32[$4 + 588 >> 2] = $11 * $12;
     HEAPF32[$4 + 584 >> 2] = $9 * $12;
     HEAPF32[$4 + 580 >> 2] = $10 * $12;
     $5 = $4 + 580 | 0;
     $8 = $5 + 8 | 0;
     $0 = HEAP32[$8 >> 2];
     $7 = HEAP32[$8 + 4 >> 2];
     $6 = $4 + 56 | 0;
     HEAP32[$6 >> 2] = $0;
     HEAP32[$6 + 4 >> 2] = $7;
     HEAPF32[$4 + 64 >> 2] = $14;
     $6 = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 + 48 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$4 + 52 >> 2] = $6;
     HEAP32[$4 + 44 >> 2] = 0;
     HEAP32[$4 + 40 >> 2] = HEAP32[$2 + 8 >> 2];
     Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, $4 + 40 | 0, 1));
    }
    break label$1;
   }
   if ($23 + -21 >>> 0 <= 8) {
    $11 = HEAPF32[$5 + 20 >> 2];
    $12 = HEAPF32[$5 + 36 >> 2];
    $14 = HEAPF32[$5 + 24 >> 2];
    $9 = HEAPF32[$5 + 52 >> 2];
    $16 = HEAPF32[$5 + 40 >> 2];
    $23 = $5 + 56 | 0;
    $24 = HEAPF32[$23 >> 2];
    $18 = HEAPF32[$5 + 32 >> 2];
    $19 = HEAPF32[$5 >> 2];
    $20 = HEAPF32[$5 + 16 >> 2];
    $22 = HEAPF32[$5 + 4 >> 2];
    $17 = HEAPF32[$5 + 48 >> 2];
    $15 = HEAPF32[$5 + 8 >> 2];
    HEAP32[$4 + 460 >> 2] = 0;
    $27 = Math_fround(-$9);
    $29 = Math_fround($14 * $27);
    $28 = Math_fround(-$24);
    $30 = Math_fround($16 * $28);
    $26 = Math_fround(Math_fround($29 - Math_fround($15 * $17)) + $30);
    $10 = HEAPF32[$0 + 48 >> 2];
    $21 = HEAPF32[$0 + 52 >> 2];
    $32 = Math_fround($14 * $21);
    $25 = HEAPF32[$0 + 56 >> 2];
    $33 = Math_fround($16 * $25);
    HEAPF32[$4 + 456 >> 2] = $26 + Math_fround(Math_fround(Math_fround($15 * $10) + $32) + $33);
    $17 = Math_fround(-$17);
    $34 = Math_fround($12 * $28);
    $31 = Math_fround(Math_fround(Math_fround($22 * $17) - Math_fround($11 * $9)) + $34);
    $35 = Math_fround($12 * $25);
    HEAPF32[$4 + 452 >> 2] = $31 + Math_fround(Math_fround(Math_fround($22 * $10) + Math_fround($11 * $21)) + $35);
    $24 = Math_fround(Math_fround(Math_fround($19 * $17) - Math_fround($20 * $9)) - Math_fround($18 * $24));
    HEAPF32[$4 + 448 >> 2] = $24 + Math_fround(Math_fround(Math_fround($19 * $10) + Math_fround($20 * $21)) + Math_fround($18 * $25));
    HEAP32[$4 + 52 >> 2] = 0;
    $9 = HEAPF32[$1 + 48 >> 2];
    $38 = Math_fround($15 * $9);
    $15 = HEAPF32[$1 + 52 >> 2];
    $36 = Math_fround($14 * $15);
    $14 = HEAPF32[$1 + 56 >> 2];
    $37 = Math_fround($16 * $14);
    HEAPF32[$4 + 48 >> 2] = $26 + Math_fround(Math_fround($38 + $36) + $37);
    $11 = Math_fround(Math_fround($22 * $9) + Math_fround($11 * $15));
    $22 = Math_fround($12 * $14);
    HEAPF32[$4 + 44 >> 2] = $31 + Math_fround($11 + $22);
    HEAPF32[$4 + 40 >> 2] = $24 + Math_fround(Math_fround(Math_fround($19 * $9) + Math_fround($20 * $15)) + Math_fround($18 * $14));
    $0 = $5 + 32 | 0;
    $1 = $5 + 16 | 0;
    if (HEAP32[$13 + 4 >> 2] == 21) {
     $2 = HEAP32[$2 + 8 >> 2];
     btTriangleRaycastCallback__btTriangleRaycastCallback_28btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int_29($4 + 88 | 0, $4 + 448 | 0, $4 + 40 | 0, HEAP32[$3 + 20 >> 2]);
     HEAP32[$4 + 140 >> 2] = $13;
     HEAP32[$4 + 136 >> 2] = $2;
     HEAP32[$4 + 132 >> 2] = $3;
     HEAP32[$4 + 88 >> 2] = 21004;
     $8 = $5 + 8 | 0;
     $2 = HEAP32[$8 >> 2];
     $7 = HEAP32[$8 + 4 >> 2];
     $6 = $4 + 152 | 0;
     HEAP32[$6 >> 2] = $2;
     HEAP32[$6 + 4 >> 2] = $7;
     $6 = HEAP32[$5 + 4 >> 2];
     HEAP32[$4 + 144 >> 2] = HEAP32[$5 >> 2];
     HEAP32[$4 + 148 >> 2] = $6;
     $8 = $1 + 8 | 0;
     $2 = HEAP32[$8 >> 2];
     $7 = HEAP32[$8 + 4 >> 2];
     $6 = $4 + 168 | 0;
     HEAP32[$6 >> 2] = $2;
     HEAP32[$6 + 4 >> 2] = $7;
     $8 = $1;
     $1 = HEAP32[$8 >> 2];
     $6 = HEAP32[$8 + 4 >> 2];
     $7 = $4 + 160 | 0;
     HEAP32[$7 >> 2] = $1;
     HEAP32[$7 + 4 >> 2] = $6;
     $8 = $0 + 8 | 0;
     $1 = HEAP32[$8 >> 2];
     $7 = HEAP32[$8 + 4 >> 2];
     $6 = $4 + 184 | 0;
     HEAP32[$6 >> 2] = $1;
     HEAP32[$6 + 4 >> 2] = $7;
     $8 = $0;
     $0 = HEAP32[$8 >> 2];
     $6 = HEAP32[$8 + 4 >> 2];
     $7 = $4 + 176 | 0;
     HEAP32[$7 >> 2] = $0;
     HEAP32[$7 + 4 >> 2] = $6;
     $8 = $23;
     $0 = HEAP32[$8 >> 2];
     $7 = HEAP32[$8 + 4 >> 2];
     $6 = $4 + 200 | 0;
     HEAP32[$6 >> 2] = $0;
     HEAP32[$6 + 4 >> 2] = $7;
     $6 = HEAP32[$5 + 52 >> 2];
     $7 = $4 + 192 | 0;
     HEAP32[$7 >> 2] = HEAP32[$5 + 48 >> 2];
     HEAP32[$7 + 4 >> 2] = $6;
     HEAP32[$4 + 128 >> 2] = HEAP32[$3 + 4 >> 2];
     btBvhTriangleMeshShape__performRaycast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29($13, $4 + 88 | 0, $4 + 448 | 0, $4 + 40 | 0);
     break label$1;
    }
    $11 = HEAPF32[$5 + 32 >> 2];
    $12 = HEAPF32[$5 >> 2];
    $16 = HEAPF32[$5 + 16 >> 2];
    $18 = HEAPF32[$5 + 4 >> 2];
    $19 = HEAPF32[$5 + 20 >> 2];
    $20 = HEAPF32[$5 + 8 >> 2];
    HEAP32[$4 + 692 >> 2] = 0;
    $24 = Math_fround(Math_fround(Math_fround($20 * $17) + $29) + $30);
    HEAPF32[$4 + 688 >> 2] = Math_fround(Math_fround(Math_fround($10 * $20) + $32) + $33) + $24;
    $26 = Math_fround(Math_fround(Math_fround($18 * $17) + Math_fround($19 * $27)) + $34);
    HEAPF32[$4 + 684 >> 2] = Math_fround(Math_fround(Math_fround($10 * $18) + Math_fround($21 * $19)) + $35) + $26;
    $21 = Math_fround(Math_fround(Math_fround($10 * $12) + Math_fround($21 * $16)) + Math_fround($25 * $11));
    $10 = Math_fround(Math_fround(Math_fround($12 * $17) + Math_fround($16 * $27)) + Math_fround($11 * $28));
    HEAPF32[$4 + 680 >> 2] = $21 + $10;
    HEAP32[$4 + 84 >> 2] = 0;
    HEAPF32[$4 + 80 >> 2] = Math_fround(Math_fround(Math_fround($9 * $20) + $36) + $37) + $24;
    HEAPF32[$4 + 76 >> 2] = Math_fround(Math_fround(Math_fround($9 * $18) + Math_fround($15 * $19)) + $22) + $26;
    HEAPF32[$4 + 72 >> 2] = Math_fround(Math_fround(Math_fround($9 * $12) + Math_fround($15 * $16)) + Math_fround($14 * $11)) + $10;
    $2 = HEAP32[$2 + 8 >> 2];
    btTriangleRaycastCallback__btTriangleRaycastCallback_28btVector3_20const__2c_20btVector3_20const__2c_20unsigned_20int_29($4 + 88 | 0, $4 + 680 | 0, $4 + 72 | 0, HEAP32[$3 + 20 >> 2]);
    HEAP32[$4 + 140 >> 2] = $13;
    HEAP32[$4 + 136 >> 2] = $2;
    HEAP32[$4 + 132 >> 2] = $3;
    HEAP32[$4 + 88 >> 2] = 21188;
    $7 = HEAP32[$5 + 12 >> 2];
    $6 = $4 + 152 | 0;
    HEAP32[$6 >> 2] = HEAP32[$5 + 8 >> 2];
    HEAP32[$6 + 4 >> 2] = $7;
    $6 = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 144 >> 2] = HEAP32[$5 >> 2];
    HEAP32[$4 + 148 >> 2] = $6;
    $8 = $1;
    $1 = HEAP32[$8 >> 2];
    $7 = HEAP32[$8 + 4 >> 2];
    $6 = $4 + 160 | 0;
    HEAP32[$6 >> 2] = $1;
    HEAP32[$6 + 4 >> 2] = $7;
    $8 = $8 + 8 | 0;
    $1 = HEAP32[$8 >> 2];
    $6 = HEAP32[$8 + 4 >> 2];
    $7 = $4 + 168 | 0;
    HEAP32[$7 >> 2] = $1;
    HEAP32[$7 + 4 >> 2] = $6;
    $8 = $0 + 8 | 0;
    $1 = HEAP32[$8 >> 2];
    $7 = HEAP32[$8 + 4 >> 2];
    $6 = $4 + 184 | 0;
    HEAP32[$6 >> 2] = $1;
    HEAP32[$6 + 4 >> 2] = $7;
    $8 = $0;
    $0 = HEAP32[$8 >> 2];
    $6 = HEAP32[$8 + 4 >> 2];
    $7 = $4 + 176 | 0;
    HEAP32[$7 >> 2] = $0;
    HEAP32[$7 + 4 >> 2] = $6;
    $7 = HEAP32[$5 + 52 >> 2];
    $6 = $4 + 192 | 0;
    HEAP32[$6 >> 2] = HEAP32[$5 + 48 >> 2];
    HEAP32[$6 + 4 >> 2] = $7;
    $8 = $23;
    $0 = HEAP32[$8 >> 2];
    $6 = HEAP32[$8 + 4 >> 2];
    $7 = $4 + 200 | 0;
    HEAP32[$7 >> 2] = $0;
    HEAP32[$7 + 4 >> 2] = $6;
    HEAP32[$4 + 128 >> 2] = HEAP32[$3 + 4 >> 2];
    $7 = HEAP32[$4 + 692 >> 2];
    $6 = $4 + 32 | 0;
    HEAP32[$6 >> 2] = HEAP32[$4 + 688 >> 2];
    HEAP32[$6 + 4 >> 2] = $7;
    $6 = HEAP32[$4 + 684 >> 2];
    HEAP32[$4 + 24 >> 2] = HEAP32[$4 + 680 >> 2];
    HEAP32[$4 + 28 >> 2] = $6;
    $10 = HEAPF32[$4 + 72 >> 2];
    if (!!($10 < HEAPF32[$4 + 24 >> 2])) {
     HEAPF32[$4 + 24 >> 2] = $10
    }
    $9 = HEAPF32[$4 + 76 >> 2];
    if (!!($9 < HEAPF32[$4 + 28 >> 2])) {
     HEAPF32[$4 + 28 >> 2] = $9
    }
    $11 = HEAPF32[$4 + 80 >> 2];
    if (!!($11 < HEAPF32[$4 + 32 >> 2])) {
     HEAPF32[$4 + 32 >> 2] = $11
    }
    $12 = HEAPF32[$4 + 84 >> 2];
    if (!!($12 < HEAPF32[$4 + 36 >> 2])) {
     HEAPF32[$4 + 36 >> 2] = $12
    }
    $8 = $4 + 688 | 0;
    $0 = HEAP32[$8 >> 2];
    $7 = HEAP32[$8 + 4 >> 2];
    $6 = $4 + 16 | 0;
    HEAP32[$6 >> 2] = $0;
    HEAP32[$6 + 4 >> 2] = $7;
    $6 = HEAP32[$4 + 684 >> 2];
    HEAP32[$4 + 8 >> 2] = HEAP32[$4 + 680 >> 2];
    HEAP32[$4 + 12 >> 2] = $6;
    if (!!(HEAPF32[$4 + 8 >> 2] < $10)) {
     HEAPF32[$4 + 8 >> 2] = $10
    }
    if (!!(HEAPF32[$4 + 12 >> 2] < $9)) {
     HEAPF32[$4 + 12 >> 2] = $9
    }
    if (!!(HEAPF32[$4 + 16 >> 2] < $11)) {
     HEAPF32[$4 + 16 >> 2] = $11
    }
    if (!!(HEAPF32[$4 + 20 >> 2] < $12)) {
     HEAPF32[$4 + 20 >> 2] = $12
    }
    FUNCTION_TABLE[HEAP32[HEAP32[$13 >> 2] + 64 >> 2]]($13, $4 + 88 | 0, $4 + 24 | 0, $4 + 8 | 0);
    break label$1;
   }
   if (($23 | 0) != 31) {
    break label$1
   }
   $23 = HEAP32[$13 + 68 >> 2];
   HEAP32[$4 + 64 >> 2] = $3;
   HEAP32[$4 + 60 >> 2] = $1;
   HEAP32[$4 + 56 >> 2] = $0;
   HEAP32[$4 + 52 >> 2] = $5;
   HEAP32[$4 + 48 >> 2] = $13;
   HEAP32[$4 + 40 >> 2] = 21376;
   HEAP32[$4 + 44 >> 2] = HEAP32[$2 + 8 >> 2];
   if ($23) {
    $12 = HEAPF32[$5 >> 2];
    $14 = HEAPF32[$5 + 4 >> 2];
    $9 = HEAPF32[$5 + 8 >> 2];
    HEAP32[$4 + 100 >> 2] = 0;
    $16 = HEAPF32[$5 + 48 >> 2];
    $10 = Math_fround(HEAPF32[$0 + 48 >> 2] - $16);
    $15 = Math_fround($9 * $10);
    $18 = HEAPF32[$5 + 52 >> 2];
    $9 = Math_fround(HEAPF32[$0 + 52 >> 2] - $18);
    $19 = HEAPF32[$5 + 24 >> 2];
    $20 = HEAPF32[$5 + 56 >> 2];
    $11 = Math_fround(HEAPF32[$0 + 56 >> 2] - $20);
    $22 = HEAPF32[$5 + 40 >> 2];
    HEAPF32[$4 + 96 >> 2] = Math_fround($15 + Math_fround($9 * $19)) + Math_fround($11 * $22);
    $17 = Math_fround($10 * $14);
    $14 = HEAPF32[$5 + 20 >> 2];
    $15 = HEAPF32[$5 + 36 >> 2];
    HEAPF32[$4 + 92 >> 2] = Math_fround($17 + Math_fround($9 * $14)) + Math_fround($11 * $15);
    $10 = Math_fround($10 * $12);
    $12 = HEAPF32[$5 + 16 >> 2];
    $21 = HEAPF32[$5 + 32 >> 2];
    HEAPF32[$4 + 88 >> 2] = Math_fround($10 + Math_fround($9 * $12)) + Math_fround($11 * $21);
    $25 = HEAPF32[$5 >> 2];
    $17 = HEAPF32[$5 + 4 >> 2];
    $9 = HEAPF32[$5 + 8 >> 2];
    HEAP32[$4 + 460 >> 2] = 0;
    $10 = Math_fround(HEAPF32[$1 + 48 >> 2] - $16);
    $16 = Math_fround($9 * $10);
    $9 = Math_fround(HEAPF32[$1 + 52 >> 2] - $18);
    $11 = Math_fround(HEAPF32[$1 + 56 >> 2] - $20);
    HEAPF32[$4 + 456 >> 2] = Math_fround($16 + Math_fround($19 * $9)) + Math_fround($22 * $11);
    HEAPF32[$4 + 452 >> 2] = Math_fround(Math_fround($10 * $17) + Math_fround($9 * $14)) + Math_fround($11 * $15);
    HEAPF32[$4 + 448 >> 2] = Math_fround(Math_fround($10 * $25) + Math_fround($9 * $12)) + Math_fround($11 * $21);
    btDbvt__rayTest_28btDbvtNode_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btDbvt__ICollide__29(HEAP32[$23 >> 2], $4 + 88 | 0, $4 + 448 | 0, $4 + 40 | 0);
    break label$1;
   }
   $2 = HEAP32[$13 + 20 >> 2];
   if (($2 | 0) < 1) {
    break label$1
   }
   $1 = $2 + -1 | 0;
   $3 = 64;
   $2 = 0;
   while (1) {
    $13 = $3 + HEAP32[$13 + 28 >> 2] | 0;
    $0 = HEAP32[$13 >> 2];
    $32 = HEAPF32[$5 + 52 >> 2];
    $33 = HEAPF32[$5 + 56 >> 2];
    $22 = HEAPF32[$13 + -16 >> 2];
    $15 = HEAPF32[$13 + -12 >> 2];
    $21 = HEAPF32[$13 + -8 >> 2];
    $10 = HEAPF32[$5 + 20 >> 2];
    $9 = HEAPF32[$5 + 24 >> 2];
    $25 = HEAPF32[$13 + -64 >> 2];
    $17 = HEAPF32[$13 + -48 >> 2];
    $24 = HEAPF32[$13 + -32 >> 2];
    $28 = HEAPF32[$13 + -60 >> 2];
    $27 = HEAPF32[$13 + -44 >> 2];
    $26 = HEAPF32[$13 + -28 >> 2];
    $31 = HEAPF32[$13 + -56 >> 2];
    $11 = HEAPF32[$5 + 36 >> 2];
    $29 = HEAPF32[$13 + -40 >> 2];
    $12 = HEAPF32[$5 + 40 >> 2];
    $30 = HEAPF32[$13 + -24 >> 2];
    $34 = HEAPF32[$5 + 48 >> 2];
    $14 = HEAPF32[$5 + 8 >> 2];
    $16 = HEAPF32[$5 >> 2];
    $18 = HEAPF32[$5 + 4 >> 2];
    $19 = HEAPF32[$5 + 16 >> 2];
    $20 = HEAPF32[$5 + 32 >> 2];
    HEAP32[$4 + 148 >> 2] = 0;
    HEAP32[$4 + 132 >> 2] = 0;
    HEAP32[$4 + 116 >> 2] = 0;
    HEAP32[$4 + 100 >> 2] = 0;
    HEAPF32[$4 + 128 >> 2] = Math_fround(Math_fround($31 * $20) + Math_fround($29 * $11)) + Math_fround($30 * $12);
    HEAPF32[$4 + 124 >> 2] = Math_fround(Math_fround($28 * $20) + Math_fround($27 * $11)) + Math_fround($26 * $12);
    HEAPF32[$4 + 120 >> 2] = Math_fround(Math_fround($25 * $20) + Math_fround($17 * $11)) + Math_fround($24 * $12);
    HEAPF32[$4 + 112 >> 2] = Math_fround(Math_fround($31 * $19) + Math_fround($29 * $10)) + Math_fround($30 * $9);
    HEAPF32[$4 + 108 >> 2] = Math_fround(Math_fround($28 * $19) + Math_fround($27 * $10)) + Math_fround($26 * $9);
    HEAPF32[$4 + 104 >> 2] = Math_fround(Math_fround($25 * $19) + Math_fround($17 * $10)) + Math_fround($24 * $9);
    HEAPF32[$4 + 96 >> 2] = Math_fround(Math_fround($16 * $31) + Math_fround($18 * $29)) + Math_fround($14 * $30);
    HEAPF32[$4 + 92 >> 2] = Math_fround(Math_fround($16 * $28) + Math_fround($18 * $27)) + Math_fround($14 * $26);
    HEAPF32[$4 + 88 >> 2] = Math_fround(Math_fround($25 * $16) + Math_fround($17 * $18)) + Math_fround($24 * $14);
    HEAPF32[$4 + 144 >> 2] = $33 + Math_fround(Math_fround(Math_fround($20 * $22) + Math_fround($11 * $15)) + Math_fround($12 * $21));
    HEAPF32[$4 + 140 >> 2] = $32 + Math_fround(Math_fround(Math_fround($19 * $22) + Math_fround($10 * $15)) + Math_fround($9 * $21));
    HEAPF32[$4 + 136 >> 2] = $34 + Math_fround(Math_fround(Math_fround($16 * $22) + Math_fround($18 * $15)) + Math_fround($14 * $21));
    HEAP32[$4 + 700 >> 2] = $2;
    HEAP32[$4 + 696 >> 2] = -1;
    HEAP32[$4 + 688 >> 2] = HEAP32[$4 + 44 >> 2];
    HEAP32[$4 + 684 >> 2] = $0;
    HEAP32[$4 + 680 >> 2] = 0;
    HEAP32[$4 + 692 >> 2] = $4 + 88;
    HEAP32[$4 + 452 >> 2] = 1065353216;
    HEAP32[$4 + 464 >> 2] = -1;
    HEAP32[$4 + 468 >> 2] = 0;
    HEAP32[$4 + 456 >> 2] = 0;
    HEAP32[$4 + 460 >> 2] = 1;
    HEAP32[$4 + 476 >> 2] = $2;
    HEAP32[$4 + 448 >> 2] = 21552;
    $5 = HEAP32[$4 + 64 >> 2];
    HEAP32[$4 + 472 >> 2] = $5;
    HEAP32[$4 + 452 >> 2] = HEAP32[$5 + 4 >> 2];
    HEAP32[$4 + 468 >> 2] = HEAP32[$5 + 20 >> 2];
    btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29(HEAP32[$4 + 56 >> 2], HEAP32[$4 + 60 >> 2], $4 + 680 | 0, $4 + 448 | 0);
    if (($1 | 0) == ($2 | 0)) {
     break label$1
    }
    $2 = $2 + 1 | 0;
    $3 = $3 + 80 | 0;
    $5 = HEAP32[$4 + 52 >> 2];
    $13 = HEAP32[$4 + 48 >> 2];
    continue;
   };
  }
  global$0 = $4 + 704 | 0;
 }
 
 function btDbvt__rayTest_28btDbvtNode_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btDbvt__ICollide__29($0, $1, $2, $3) {
  var $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = 0, $24 = 0, $25 = Math_fround(0), $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
  $7 = global$0 - 544 | 0;
  global$0 = $7;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $5 = HEAPF32[$1 + 8 >> 2];
   $8 = HEAPF32[$2 + 8 >> 2];
   $10 = HEAPF32[$1 >> 2];
   $12 = HEAPF32[$2 >> 2];
   $15 = HEAPF32[$1 + 4 >> 2];
   $9 = HEAPF32[$2 + 4 >> 2];
   HEAP32[$7 + 32 >> 2] = $0;
   $5 = Math_fround($8 - $5);
   $18 = $5;
   $8 = Math_fround($12 - $10);
   $12 = Math_fround($9 - $15);
   $9 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($8 * $8) + Math_fround($12 * $12)) + Math_fround($5 * $5)))));
   $5 = Math_fround($5 * $9);
   $16 = Math_fround($8 * $9);
   $22 = Math_fround($8 * $16);
   $8 = Math_fround($12 * $9);
   $22 = Math_fround(Math_fround($18 * $5) + Math_fround($22 + Math_fround($12 * $8)));
   $18 = $5 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $5);
   $2 = $18 < Math_fround(0.0);
   $26 = ($2 << 4) + $7 | 8;
   $8 = $8 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $8);
   $0 = $8 < Math_fround(0.0);
   $27 = ($0 << 4) + $7 | 4;
   $28 = (($2 ^ 1) << 4) + $7 | 8;
   $29 = (($0 ^ 1) << 4) + $7 | 4;
   $12 = $16 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $16);
   $2 = $12 < Math_fround(0.0);
   $30 = ($2 << 4) + $7 | 0;
   $31 = (($2 ^ 1) << 4) + $7 | 0;
   $32 = $7 + 16 | 0;
   $17 = 126;
   $11 = 128;
   $14 = $7 + 32 | 0;
   $13 = 128;
   $21 = 1;
   while (1) {
    $0 = $21 + -1 | 0;
    $24 = $0 << 2;
    $2 = HEAP32[$24 + $14 >> 2];
    $23 = HEAP32[$2 + 16 >> 2];
    $6 = HEAP32[$2 + 20 >> 2];
    $4 = $32;
    HEAP32[$4 >> 2] = $23;
    HEAP32[$4 + 4 >> 2] = $6;
    $19 = $2 + 24 | 0;
    $23 = HEAP32[$19 >> 2];
    $6 = $4 + 8 | 0;
    $4 = HEAP32[$19 + 4 >> 2];
    HEAP32[$6 >> 2] = $23;
    HEAP32[$6 + 4 >> 2] = $4;
    $6 = HEAP32[$2 + 4 >> 2];
    HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    $19 = $2 + 8 | 0;
    $6 = HEAP32[$19 >> 2];
    $4 = HEAP32[$19 + 4 >> 2];
    HEAP32[$7 + 8 >> 2] = $6;
    HEAP32[$7 + 12 >> 2] = $4;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            $9 = Math_fround($8 * Math_fround(HEAPF32[$27 >> 2] - $15));
            $5 = Math_fround($12 * Math_fround(HEAPF32[$31 >> 2] - $10));
            label$11 : {
             if ($9 > $5) {
              break label$11
             }
             $16 = Math_fround($12 * Math_fround(HEAPF32[$30 >> 2] - $10));
             $10 = Math_fround($8 * Math_fround(HEAPF32[$29 >> 2] - $15));
             if ($16 > $10) {
              break label$11
             }
             $25 = HEAPF32[$1 + 8 >> 2];
             $15 = Math_fround($18 * Math_fround(HEAPF32[$26 >> 2] - $25));
             $5 = $10 < $5 ? $10 : $5;
             if ($15 > $5) {
              break label$11
             }
             $10 = $9 > $16 ? $9 : $16;
             $9 = Math_fround($18 * Math_fround(HEAPF32[$28 >> 2] - $25));
             if ($10 > $9) {
              break label$11
             }
             if (!(($15 > $10 ? $15 : $10) < $22)) {
              break label$11
             }
             if (!(($9 < $5 ? $9 : $5) > Math_fround(0.0))) {
              break label$11
             }
             if (HEAP32[$2 + 40 >> 2]) {
              if (($0 | 0) <= ($17 | 0)) {
               $4 = $14;
               $6 = $13;
               break label$4;
              }
              $6 = $13 << 1;
              if (($13 | 0) >= ($6 | 0)) {
               $4 = $14;
               break label$5;
              }
              if (($11 | 0) >= ($6 | 0)) {
               $4 = $14;
               break label$6;
              }
              if (!$13) {
               $4 = 0;
               break label$10;
              }
              $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($13 << 3);
              if (($13 | 0) < 1) {
               break label$10
              }
              $0 = $4;
              $17 = $14;
              $11 = $13;
              while (1) {
               HEAP32[$0 >> 2] = HEAP32[$17 >> 2];
               $0 = $0 + 4 | 0;
               $17 = $17 + 4 | 0;
               $11 = $11 + -1 | 0;
               if ($11) {
                continue
               }
               break;
              };
              if (!($20 & 255)) {
               break label$8
              }
              break label$9;
             }
             FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, $2);
            }
            $4 = $14;
            $6 = $13;
            break label$3;
           }
           $0 = $20 & 255;
           $20 = 1;
           $11 = $20;
           if (!$0) {
            break label$7
           }
           $11 = $6;
           if (!$14) {
            break label$6
           }
          }
          btAlignedFreeInternal_28void__29($14);
         }
         $11 = 1;
        }
        $20 = $11;
        $11 = $6;
       }
       $0 = $13 << 2;
       memset($0 + $4 | 0, 0, $0);
      }
      $17 = $6 + -2 | 0;
     }
     HEAP32[$4 + $24 >> 2] = HEAP32[$2 + 36 >> 2];
     HEAP32[($21 << 2) + $4 >> 2] = HEAP32[$2 + 40 >> 2];
     $0 = $21 + 1 | 0;
    }
    if ($0) {
     $15 = HEAPF32[$1 + 4 >> 2];
     $10 = HEAPF32[$1 >> 2];
     $14 = $4;
     $13 = $6;
     $21 = $0;
     continue;
    }
    break;
   };
   if (!($20 & 255)) {
    break label$1
   }
   if (!$4) {
    break label$1
   }
   btAlignedFreeInternal_28void__29($4);
  }
  global$0 = $7 + 544 | 0;
 }
 
 function btCollisionWorld__objectQuerySingle_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObject__2c_20btCollisionShape_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0;
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  HEAP32[$8 + 24 >> 2] = -1;
  HEAP32[$8 + 28 >> 2] = -1;
  HEAP32[$8 + 20 >> 2] = $5;
  HEAP32[$8 + 16 >> 2] = $3;
  HEAP32[$8 + 12 >> 2] = $4;
  HEAP32[$8 + 8 >> 2] = 0;
  btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29($0, $1, $2, $8 + 8 | 0, $6, $7);
  global$0 = $8 + 32 | 0;
 }
 
 function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = 0, $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = Math_fround(0), $35 = 0, $36 = Math_fround(0), $37 = Math_fround(0), $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
  $6 = global$0 - 688 | 0;
  global$0 = $6;
  $7 = HEAP32[$3 + 12 >> 2];
  $24 = HEAP32[$3 + 4 >> 2];
  $35 = HEAP32[$24 + 4 >> 2];
  label$1 : {
   if (($35 | 0) <= 19) {
    HEAPF32[$6 + 660 >> 2] = $5;
    HEAP32[$6 + 656 >> 2] = 0;
    HEAP32[$6 + 488 >> 2] = 15992;
    HEAP32[$6 + 652 >> 2] = HEAP32[$4 + 4 >> 2];
    HEAP8[$6 + 460 | 0] = 0;
    HEAP32[$6 + 436 >> 2] = 953267991;
    HEAP32[$6 + 64 >> 2] = 14800;
    $24 = btContinuousConvexCollision__btContinuousConvexCollision_28btConvexShape_20const__2c_20btConvexShape_20const__2c_20btVoronoiSimplexSolver__2c_20btConvexPenetrationDepthSolver__29($6 + 664 | 0, $0, $24, $6 + 128 | 0, $6 - -64 | 0);
    label$3 : {
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$24 >> 2] + 8 >> 2]]($24, $1, $2, $7, $7, $6 + 488 | 0)) {
      break label$3
     }
     $5 = HEAPF32[$6 + 620 >> 2];
     $8 = HEAPF32[$6 + 624 >> 2];
     $10 = HEAPF32[$6 + 628 >> 2];
     $9 = Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($8 * $8)) + Math_fround($10 * $10));
     if (!($9 > Math_fround(9.999999747378752e-05))) {
      break label$3
     }
     $13 = HEAPF32[$6 + 652 >> 2];
     if (!($13 < HEAPF32[$4 + 4 >> 2])) {
      break label$3
     }
     $9 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($9)));
     HEAPF32[$6 + 628 >> 2] = $10 * $9;
     HEAPF32[$6 + 624 >> 2] = $8 * $9;
     HEAPF32[$6 + 620 >> 2] = $5 * $9;
     $0 = $6 + 644 | 0;
     $2 = HEAP32[$0 >> 2];
     $14 = HEAP32[$0 + 4 >> 2];
     $1 = $6 + 112 | 0;
     HEAP32[$1 >> 2] = $2;
     HEAP32[$1 + 4 >> 2] = $14;
     $7 = $6 + 620 | 0;
     $0 = $7 + 8 | 0;
     $2 = HEAP32[$0 >> 2];
     $1 = HEAP32[$0 + 4 >> 2];
     $14 = $6 + 96 | 0;
     HEAP32[$14 >> 2] = $2;
     HEAP32[$14 + 4 >> 2] = $1;
     $14 = HEAP32[$6 + 640 >> 2];
     HEAP32[$6 + 104 >> 2] = HEAP32[$6 + 636 >> 2];
     HEAP32[$6 + 108 >> 2] = $14;
     HEAPF32[$6 + 120 >> 2] = $13;
     $1 = HEAP32[$7 + 4 >> 2];
     HEAP32[$6 + 88 >> 2] = HEAP32[$7 >> 2];
     HEAP32[$6 + 92 >> 2] = $1;
     HEAP32[$6 + 84 >> 2] = 0;
     HEAP32[$6 + 80 >> 2] = HEAP32[$3 + 8 >> 2];
     Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $6 + 80 | 0, 1));
    }
    break label$1;
   }
   $14 = $35 + -21 | 0;
   if ($14 >>> 0 <= 8) {
    label$5 : {
     if ($14 >>> 0 > 7) {
      break label$5
     }
     label$6 : {
      switch ($14 - 1 | 0) {
      default:
       $8 = HEAPF32[$7 + 20 >> 2];
       $10 = HEAPF32[$7 + 36 >> 2];
       $11 = HEAPF32[$7 + 52 >> 2];
       $9 = HEAPF32[$7 + 24 >> 2];
       $15 = HEAPF32[$7 + 56 >> 2];
       $13 = HEAPF32[$7 + 40 >> 2];
       $17 = HEAPF32[$7 + 32 >> 2];
       $16 = HEAPF32[$7 >> 2];
       $19 = HEAPF32[$7 + 16 >> 2];
       $20 = HEAPF32[$7 + 4 >> 2];
       $12 = HEAPF32[$7 + 8 >> 2];
       $18 = HEAPF32[$7 + 48 >> 2];
       HEAP32[$6 + 92 >> 2] = 0;
       $18 = Math_fround(-$18);
       $25 = Math_fround(Math_fround(Math_fround($12 * $18) - Math_fround($9 * $11)) - Math_fround($13 * $15));
       $22 = HEAPF32[$1 + 48 >> 2];
       $21 = HEAPF32[$1 + 52 >> 2];
       $23 = HEAPF32[$1 + 56 >> 2];
       HEAPF32[$6 + 88 >> 2] = $25 + Math_fround(Math_fround(Math_fround($12 * $22) + Math_fround($9 * $21)) + Math_fround($13 * $23));
       $26 = Math_fround(Math_fround(Math_fround($20 * $18) - Math_fround($8 * $11)) - Math_fround($10 * $15));
       HEAPF32[$6 + 84 >> 2] = $26 + Math_fround(Math_fround(Math_fround($20 * $22) + Math_fround($8 * $21)) + Math_fround($10 * $23));
       $27 = Math_fround(Math_fround(Math_fround($16 * $18) - Math_fround($19 * $11)) - Math_fround($17 * $15));
       HEAPF32[$6 + 80 >> 2] = $27 + Math_fround(Math_fround(Math_fround($16 * $22) + Math_fround($19 * $21)) + Math_fround($17 * $23));
       HEAP32[$6 + 676 >> 2] = 0;
       $11 = HEAPF32[$2 + 48 >> 2];
       $15 = HEAPF32[$2 + 52 >> 2];
       $18 = HEAPF32[$2 + 56 >> 2];
       HEAPF32[$6 + 672 >> 2] = $25 + Math_fround(Math_fround(Math_fround($12 * $11) + Math_fround($9 * $15)) + Math_fround($13 * $18));
       HEAPF32[$6 + 668 >> 2] = $26 + Math_fround(Math_fround(Math_fround($20 * $11) + Math_fround($8 * $15)) + Math_fround($10 * $18));
       HEAPF32[$6 + 664 >> 2] = $27 + Math_fround(Math_fround(Math_fround($16 * $11) + Math_fround($19 * $15)) + Math_fround($17 * $18));
       HEAP32[$6 + 516 >> 2] = 0;
       $11 = HEAPF32[$2 + 8 >> 2];
       $15 = HEAPF32[$2 + 24 >> 2];
       $18 = HEAPF32[$2 + 40 >> 2];
       HEAPF32[$6 + 528 >> 2] = Math_fround(Math_fround($12 * $11) + Math_fround($9 * $15)) + Math_fround($13 * $18);
       $22 = HEAPF32[$2 + 4 >> 2];
       $21 = HEAPF32[$2 + 20 >> 2];
       $23 = HEAPF32[$2 + 36 >> 2];
       HEAPF32[$6 + 524 >> 2] = Math_fround(Math_fround($12 * $22) + Math_fround($9 * $21)) + Math_fround($13 * $23);
       HEAPF32[$6 + 512 >> 2] = Math_fround(Math_fround($20 * $11) + Math_fround($8 * $15)) + Math_fround($10 * $18);
       HEAPF32[$6 + 508 >> 2] = Math_fround(Math_fround($20 * $22) + Math_fround($8 * $21)) + Math_fround($10 * $23);
       HEAP32[$6 + 500 >> 2] = 0;
       $25 = HEAPF32[$2 >> 2];
       $34 = Math_fround($12 * $25);
       $12 = HEAPF32[$2 + 16 >> 2];
       $34 = Math_fround($34 + Math_fround($9 * $12));
       $9 = HEAPF32[$2 + 32 >> 2];
       HEAPF32[$6 + 520 >> 2] = $34 + Math_fround($13 * $9);
       HEAPF32[$6 + 504 >> 2] = Math_fround(Math_fround($20 * $25) + Math_fround($8 * $12)) + Math_fround($10 * $9);
       HEAPF32[$6 + 496 >> 2] = Math_fround(Math_fround($16 * $11) + Math_fround($19 * $15)) + Math_fround($17 * $18);
       HEAPF32[$6 + 492 >> 2] = Math_fround(Math_fround($16 * $22) + Math_fround($19 * $21)) + Math_fround($17 * $23);
       HEAPF32[$6 + 488 >> 2] = Math_fround(Math_fround($16 * $25) + Math_fround($19 * $12)) + Math_fround($17 * $9);
       HEAP32[$6 + 548 >> 2] = 0;
       $14 = $6 + 540 | 0;
       HEAP32[$14 >> 2] = 0;
       HEAP32[$14 + 4 >> 2] = 0;
       $14 = $6 + 532 | 0;
       HEAP32[$14 >> 2] = 0;
       HEAP32[$14 + 4 >> 2] = 0;
       $3 = HEAP32[$3 + 8 >> 2];
       btTriangleConvexcastCallback__btTriangleConvexcastCallback_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_29($6 + 128 | 0, $0, $1, $2, $7, Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$24 >> 2] + 48 >> 2]]($24)));
       HEAP32[$6 + 348 >> 2] = $24;
       HEAP32[$6 + 344 >> 2] = $3;
       HEAP32[$6 + 128 >> 2] = 21724;
       HEAPF32[$6 + 336 >> 2] = $5;
       HEAP32[$6 + 340 >> 2] = $4;
       HEAP32[$6 + 328 >> 2] = HEAP32[$4 + 4 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $6 + 488 | 0, $6 - -64 | 0, $6 + 48 | 0);
       btBvhTriangleMeshShape__performConvexcast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__29($24, $6 + 128 | 0, $6 + 80 | 0, $6 + 664 | 0, $6 - -64 | 0, $6 + 48 | 0);
       break label$1;
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
       break label$5;
      case 6:
       break label$6;
      };
     }
     HEAPF32[$6 + 300 >> 2] = $5;
     HEAP32[$6 + 296 >> 2] = 0;
     HEAP32[$6 + 128 >> 2] = 15992;
     HEAP32[$6 + 292 >> 2] = HEAP32[$4 + 4 >> 2];
     $24 = btContinuousConvexCollision__btContinuousConvexCollision_28btConvexShape_20const__2c_20btStaticPlaneShape_20const__29($6 + 80 | 0, $0, $24);
     label$8 : {
      if (!FUNCTION_TABLE[HEAP32[HEAP32[$24 >> 2] + 8 >> 2]]($24, $1, $2, $7, $7, $6 + 128 | 0)) {
       break label$8
      }
      $5 = HEAPF32[$6 + 260 >> 2];
      $8 = HEAPF32[$6 + 264 >> 2];
      $10 = HEAPF32[$6 + 268 >> 2];
      $9 = Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($8 * $8)) + Math_fround($10 * $10));
      if (!($9 > Math_fround(9.999999747378752e-05))) {
       break label$8
      }
      $13 = HEAPF32[$6 + 292 >> 2];
      if (!($13 < HEAPF32[$4 + 4 >> 2])) {
       break label$8
      }
      $9 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($9)));
      HEAPF32[$6 + 268 >> 2] = $10 * $9;
      HEAPF32[$6 + 264 >> 2] = $8 * $9;
      HEAPF32[$6 + 260 >> 2] = $5 * $9;
      $0 = $6 + 284 | 0;
      $2 = HEAP32[$0 >> 2];
      $14 = HEAP32[$0 + 4 >> 2];
      $1 = $6 + 520 | 0;
      HEAP32[$1 >> 2] = $2;
      HEAP32[$1 + 4 >> 2] = $14;
      $7 = $6 + 260 | 0;
      $0 = $7 + 8 | 0;
      $2 = HEAP32[$0 >> 2];
      $1 = HEAP32[$0 + 4 >> 2];
      $14 = $6 + 504 | 0;
      HEAP32[$14 >> 2] = $2;
      HEAP32[$14 + 4 >> 2] = $1;
      $14 = HEAP32[$6 + 280 >> 2];
      HEAP32[$6 + 512 >> 2] = HEAP32[$6 + 276 >> 2];
      HEAP32[$6 + 516 >> 2] = $14;
      HEAPF32[$6 + 528 >> 2] = $13;
      $1 = HEAP32[$7 + 4 >> 2];
      HEAP32[$6 + 496 >> 2] = HEAP32[$7 >> 2];
      HEAP32[$6 + 500 >> 2] = $1;
      HEAP32[$6 + 492 >> 2] = 0;
      HEAP32[$6 + 488 >> 2] = HEAP32[$3 + 8 >> 2];
      Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $6 + 488 | 0, 1));
     }
     break label$1;
    }
    $18 = HEAPF32[$2 + 52 >> 2];
    $22 = HEAPF32[$2 + 56 >> 2];
    $15 = HEAPF32[$7 + 52 >> 2];
    $21 = HEAPF32[$7 + 56 >> 2];
    $23 = HEAPF32[$1 + 52 >> 2];
    $25 = HEAPF32[$1 + 56 >> 2];
    $8 = HEAPF32[$7 + 20 >> 2];
    $10 = HEAPF32[$7 + 36 >> 2];
    $9 = HEAPF32[$7 + 24 >> 2];
    $13 = HEAPF32[$7 + 40 >> 2];
    $26 = HEAPF32[$2 + 48 >> 2];
    $34 = HEAPF32[$7 + 48 >> 2];
    $27 = HEAPF32[$1 + 48 >> 2];
    $17 = HEAPF32[$7 + 32 >> 2];
    $16 = HEAPF32[$7 >> 2];
    $19 = HEAPF32[$7 + 16 >> 2];
    $20 = HEAPF32[$7 + 4 >> 2];
    $12 = HEAPF32[$7 + 8 >> 2];
    HEAP32[$6 + 516 >> 2] = 0;
    $11 = HEAPF32[$2 + 8 >> 2];
    $28 = HEAPF32[$2 + 24 >> 2];
    $30 = HEAPF32[$2 + 40 >> 2];
    HEAPF32[$6 + 528 >> 2] = Math_fround(Math_fround($12 * $11) + Math_fround($9 * $28)) + Math_fround($13 * $30);
    $31 = HEAPF32[$2 + 4 >> 2];
    $32 = HEAPF32[$2 + 20 >> 2];
    $33 = HEAPF32[$2 + 36 >> 2];
    HEAPF32[$6 + 524 >> 2] = Math_fround(Math_fround($12 * $31) + Math_fround($9 * $32)) + Math_fround($13 * $33);
    HEAPF32[$6 + 512 >> 2] = Math_fround(Math_fround($20 * $11) + Math_fround($8 * $28)) + Math_fround($10 * $30);
    HEAPF32[$6 + 508 >> 2] = Math_fround(Math_fround($20 * $31) + Math_fround($8 * $32)) + Math_fround($10 * $33);
    HEAP32[$6 + 500 >> 2] = 0;
    $29 = HEAPF32[$2 >> 2];
    $36 = HEAPF32[$2 + 16 >> 2];
    $37 = HEAPF32[$2 + 32 >> 2];
    HEAPF32[$6 + 520 >> 2] = Math_fround(Math_fround($12 * $29) + Math_fround($9 * $36)) + Math_fround($13 * $37);
    HEAPF32[$6 + 504 >> 2] = Math_fround(Math_fround($20 * $29) + Math_fround($8 * $36)) + Math_fround($10 * $37);
    HEAPF32[$6 + 496 >> 2] = Math_fround(Math_fround($16 * $11) + Math_fround($19 * $28)) + Math_fround($17 * $30);
    HEAPF32[$6 + 492 >> 2] = Math_fround(Math_fround($16 * $31) + Math_fround($19 * $32)) + Math_fround($17 * $33);
    HEAPF32[$6 + 488 >> 2] = Math_fround(Math_fround($16 * $29) + Math_fround($19 * $36)) + Math_fround($17 * $37);
    HEAP32[$6 + 548 >> 2] = 0;
    $14 = $6 + 540 | 0;
    HEAP32[$14 >> 2] = 0;
    HEAP32[$14 + 4 >> 2] = 0;
    $14 = $6 + 532 | 0;
    HEAP32[$14 >> 2] = 0;
    HEAP32[$14 + 4 >> 2] = 0;
    $3 = HEAP32[$3 + 8 >> 2];
    btTriangleConvexcastCallback__btTriangleConvexcastCallback_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20float_29($6 + 128 | 0, $0, $1, $2, $7, Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$24 >> 2] + 48 >> 2]]($24)));
    HEAP32[$6 + 348 >> 2] = $24;
    HEAP32[$6 + 344 >> 2] = $3;
    HEAP32[$6 + 128 >> 2] = 21936;
    HEAPF32[$6 + 336 >> 2] = $5;
    HEAP32[$6 + 340 >> 2] = $4;
    HEAP32[$6 + 328 >> 2] = HEAP32[$4 + 4 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $6 + 488 | 0, $6 + 80 | 0, $6 + 664 | 0);
    HEAP32[$6 + 76 >> 2] = 0;
    $28 = Math_fround(-$34);
    $30 = Math_fround(Math_fround(Math_fround($12 * $28) - Math_fround($9 * $15)) - Math_fround($13 * $21));
    $5 = Math_fround($30 + Math_fround(Math_fround(Math_fround($12 * $27) + Math_fround($9 * $23)) + Math_fround($13 * $25)));
    HEAPF32[$6 + 72 >> 2] = $5;
    $31 = Math_fround(Math_fround(Math_fround($20 * $28) - Math_fround($8 * $15)) - Math_fround($10 * $21));
    $11 = Math_fround($31 + Math_fround(Math_fround(Math_fround($20 * $27) + Math_fround($8 * $23)) + Math_fround($10 * $25)));
    HEAPF32[$6 + 68 >> 2] = $11;
    $21 = Math_fround(Math_fround(Math_fround($16 * $28) - Math_fround($19 * $15)) - Math_fround($17 * $21));
    $15 = Math_fround($21 + Math_fround(Math_fround(Math_fround($16 * $27) + Math_fround($19 * $23)) + Math_fround($17 * $25)));
    HEAPF32[$6 + 64 >> 2] = $15;
    $12 = Math_fround(Math_fround(Math_fround($12 * $26) + Math_fround($9 * $18)) + Math_fround($13 * $22));
    $8 = Math_fround($31 + Math_fround(Math_fround(Math_fround($20 * $26) + Math_fround($8 * $18)) + Math_fround($10 * $22)));
    $9 = Math_fround($21 + Math_fround(Math_fround(Math_fround($16 * $26) + Math_fround($19 * $18)) + Math_fround($17 * $22)));
    $13 = $15;
    if (!!($9 < $13)) {
     HEAPF32[$6 + 64 >> 2] = $9;
     $13 = $9;
    }
    $10 = Math_fround($30 + $12);
    $17 = $11;
    if (!!($8 < $11)) {
     HEAPF32[$6 + 68 >> 2] = $8;
     $17 = $8;
    }
    $16 = $5;
    if (!!($10 < $16)) {
     HEAPF32[$6 + 72 >> 2] = $10;
     $16 = $10;
    }
    HEAP32[$6 + 60 >> 2] = 0;
    HEAPF32[$6 + 56 >> 2] = $5;
    HEAPF32[$6 + 52 >> 2] = $11;
    HEAPF32[$6 + 48 >> 2] = $15;
    if (!!($15 < $9)) {
     HEAPF32[$6 + 48 >> 2] = $9;
     $15 = $9;
    }
    if (!!($11 < $8)) {
     HEAPF32[$6 + 52 >> 2] = $8;
     $11 = $8;
    }
    if (!!($5 < $10)) {
     HEAPF32[$6 + 56 >> 2] = $10;
     $5 = $10;
    }
    HEAPF32[$6 + 64 >> 2] = HEAPF32[$6 + 80 >> 2] + $13;
    HEAPF32[$6 + 68 >> 2] = HEAPF32[$6 + 84 >> 2] + $17;
    HEAPF32[$6 + 72 >> 2] = HEAPF32[$6 + 88 >> 2] + $16;
    HEAPF32[$6 + 48 >> 2] = HEAPF32[$6 + 664 >> 2] + $15;
    HEAPF32[$6 + 52 >> 2] = HEAPF32[$6 + 668 >> 2] + $11;
    HEAPF32[$6 + 56 >> 2] = HEAPF32[$6 + 672 >> 2] + $5;
    FUNCTION_TABLE[HEAP32[HEAP32[$24 >> 2] + 64 >> 2]]($24, $6 + 128 | 0, $6 - -64 | 0, $6 + 48 | 0);
    break label$1;
   }
   if (($35 | 0) != 31) {
    break label$1
   }
   CProfileSample__CProfileSample_28char_20const__29($6 + 40 | 0, 20933);
   $14 = $7 + 52 | 0;
   $11 = HEAPF32[$14 >> 2];
   $38 = $7 + 56 | 0;
   $15 = HEAPF32[$38 >> 2];
   $18 = HEAPF32[$1 + 52 >> 2];
   $22 = HEAPF32[$1 + 56 >> 2];
   $39 = $7 + 20 | 0;
   $8 = HEAPF32[$39 >> 2];
   $40 = $7 + 36 | 0;
   $10 = HEAPF32[$40 >> 2];
   $21 = HEAPF32[$1 + 20 >> 2];
   $23 = HEAPF32[$1 + 36 >> 2];
   $25 = HEAPF32[$1 + 24 >> 2];
   $41 = $7 + 24 | 0;
   $9 = HEAPF32[$41 >> 2];
   $26 = HEAPF32[$1 + 40 >> 2];
   $42 = $7 + 40 | 0;
   $13 = HEAPF32[$42 >> 2];
   $17 = HEAPF32[$7 + 32 >> 2];
   $16 = HEAPF32[$7 >> 2];
   $19 = HEAPF32[$7 + 16 >> 2];
   $27 = HEAPF32[$1 + 32 >> 2];
   $28 = HEAPF32[$1 >> 2];
   $30 = HEAPF32[$1 + 16 >> 2];
   $29 = HEAPF32[$7 + 48 >> 2];
   $31 = HEAPF32[$1 + 48 >> 2];
   $20 = HEAPF32[$7 + 4 >> 2];
   $32 = HEAPF32[$1 + 4 >> 2];
   $33 = HEAPF32[$1 + 8 >> 2];
   $12 = HEAPF32[$7 + 8 >> 2];
   $43 = $6 + 188 | 0;
   HEAP32[$43 >> 2] = 0;
   $44 = $6 + 172 | 0;
   HEAP32[$44 >> 2] = 0;
   $45 = $6 + 156 | 0;
   HEAP32[$45 >> 2] = 0;
   $46 = $6 + 168 | 0;
   HEAPF32[$46 >> 2] = Math_fround(Math_fround($12 * $33) + Math_fround($9 * $25)) + Math_fround($13 * $26);
   $47 = $6 + 164 | 0;
   HEAPF32[$47 >> 2] = Math_fround(Math_fround($12 * $32) + Math_fround($9 * $21)) + Math_fround($13 * $23);
   $48 = $6 + 152 | 0;
   HEAPF32[$48 >> 2] = Math_fround(Math_fround($20 * $33) + Math_fround($8 * $25)) + Math_fround($10 * $26);
   $49 = $6 + 148 | 0;
   HEAPF32[$49 >> 2] = Math_fround(Math_fround($20 * $32) + Math_fround($8 * $21)) + Math_fround($10 * $23);
   $50 = $6 + 184 | 0;
   $29 = Math_fround(-$29);
   HEAPF32[$50 >> 2] = Math_fround(Math_fround(Math_fround($12 * $29) - Math_fround($9 * $11)) - Math_fround($13 * $15)) + Math_fround(Math_fround(Math_fround($12 * $31) + Math_fround($9 * $18)) + Math_fround($13 * $22));
   $35 = $6 + 180 | 0;
   HEAPF32[$35 >> 2] = Math_fround(Math_fround(Math_fround($20 * $29) - Math_fround($8 * $11)) - Math_fround($10 * $15)) + Math_fround(Math_fround(Math_fround($20 * $31) + Math_fround($8 * $18)) + Math_fround($10 * $22));
   HEAP32[$6 + 140 >> 2] = 0;
   HEAPF32[$6 + 160 >> 2] = Math_fround(Math_fround($12 * $28) + Math_fround($9 * $30)) + Math_fround($13 * $27);
   HEAPF32[$6 + 144 >> 2] = Math_fround(Math_fround($20 * $28) + Math_fround($8 * $30)) + Math_fround($10 * $27);
   HEAPF32[$6 + 136 >> 2] = Math_fround(Math_fround($16 * $33) + Math_fround($19 * $25)) + Math_fround($17 * $26);
   HEAPF32[$6 + 176 >> 2] = Math_fround(Math_fround(Math_fround($16 * $29) - Math_fround($19 * $11)) - Math_fround($17 * $15)) + Math_fround(Math_fround(Math_fround($16 * $31) + Math_fround($19 * $18)) + Math_fround($17 * $22));
   HEAPF32[$6 + 132 >> 2] = Math_fround(Math_fround($16 * $32) + Math_fround($19 * $21)) + Math_fround($17 * $23);
   HEAPF32[$6 + 128 >> 2] = Math_fround(Math_fround($16 * $28) + Math_fround($19 * $30)) + Math_fround($17 * $27);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $6 + 128 | 0, $6 - -64 | 0, $6 + 48 | 0);
   $11 = HEAPF32[$14 >> 2];
   $15 = HEAPF32[$38 >> 2];
   $18 = HEAPF32[$2 + 52 >> 2];
   $22 = HEAPF32[$2 + 56 >> 2];
   $8 = HEAPF32[$39 >> 2];
   $10 = HEAPF32[$40 >> 2];
   $21 = HEAPF32[$2 + 20 >> 2];
   $23 = HEAPF32[$2 + 36 >> 2];
   $25 = HEAPF32[$2 + 24 >> 2];
   $9 = HEAPF32[$41 >> 2];
   $26 = HEAPF32[$2 + 40 >> 2];
   $13 = HEAPF32[$42 >> 2];
   $17 = HEAPF32[$7 + 32 >> 2];
   $16 = HEAPF32[$7 >> 2];
   $19 = HEAPF32[$7 + 16 >> 2];
   $27 = HEAPF32[$2 + 32 >> 2];
   $28 = HEAPF32[$2 >> 2];
   $30 = HEAPF32[$2 + 16 >> 2];
   $29 = HEAPF32[$7 + 48 >> 2];
   $31 = HEAPF32[$2 + 48 >> 2];
   $20 = HEAPF32[$7 + 4 >> 2];
   $32 = HEAPF32[$2 + 4 >> 2];
   $33 = HEAPF32[$2 + 8 >> 2];
   $12 = HEAPF32[$7 + 8 >> 2];
   HEAP32[$43 >> 2] = 0;
   HEAP32[$44 >> 2] = 0;
   HEAP32[$45 >> 2] = 0;
   HEAPF32[$46 >> 2] = Math_fround(Math_fround($12 * $33) + Math_fround($9 * $25)) + Math_fround($13 * $26);
   HEAPF32[$47 >> 2] = Math_fround(Math_fround($12 * $32) + Math_fround($9 * $21)) + Math_fround($13 * $23);
   HEAPF32[$48 >> 2] = Math_fround(Math_fround($20 * $33) + Math_fround($8 * $25)) + Math_fround($10 * $26);
   HEAPF32[$49 >> 2] = Math_fround(Math_fround($20 * $32) + Math_fround($8 * $21)) + Math_fround($10 * $23);
   $29 = Math_fround(-$29);
   HEAPF32[$50 >> 2] = Math_fround(Math_fround(Math_fround($12 * $29) - Math_fround($9 * $11)) - Math_fround($13 * $15)) + Math_fround(Math_fround(Math_fround($12 * $31) + Math_fround($9 * $18)) + Math_fround($13 * $22));
   HEAPF32[$35 >> 2] = Math_fround(Math_fround(Math_fround($20 * $29) - Math_fround($8 * $11)) - Math_fround($10 * $15)) + Math_fround(Math_fround(Math_fround($20 * $31) + Math_fround($8 * $18)) + Math_fround($10 * $22));
   HEAP32[$6 + 140 >> 2] = 0;
   HEAPF32[$6 + 160 >> 2] = Math_fround(Math_fround($12 * $28) + Math_fround($9 * $30)) + Math_fround($13 * $27);
   HEAPF32[$6 + 144 >> 2] = Math_fround(Math_fround($20 * $28) + Math_fround($8 * $30)) + Math_fround($10 * $27);
   HEAPF32[$6 + 136 >> 2] = Math_fround(Math_fround($16 * $33) + Math_fround($19 * $25)) + Math_fround($17 * $26);
   HEAPF32[$6 + 176 >> 2] = Math_fround(Math_fround(Math_fround($16 * $29) - Math_fround($19 * $11)) - Math_fround($17 * $15)) + Math_fround(Math_fround(Math_fround($16 * $31) + Math_fround($19 * $18)) + Math_fround($17 * $22));
   HEAPF32[$6 + 132 >> 2] = Math_fround(Math_fround($16 * $32) + Math_fround($19 * $21)) + Math_fround($17 * $23);
   HEAPF32[$6 + 128 >> 2] = Math_fround(Math_fround($16 * $28) + Math_fround($19 * $30)) + Math_fround($17 * $27);
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $6 + 128 | 0, $6 + 24 | 0, $6 + 8 | 0);
   $8 = HEAPF32[$6 + 24 >> 2];
   if (!!($8 < HEAPF32[$6 + 64 >> 2])) {
    HEAPF32[$6 + 64 >> 2] = $8
   }
   $8 = HEAPF32[$6 + 28 >> 2];
   if (!!($8 < HEAPF32[$6 + 68 >> 2])) {
    HEAPF32[$6 + 68 >> 2] = $8
   }
   $8 = HEAPF32[$6 + 32 >> 2];
   if (!!($8 < HEAPF32[$6 + 72 >> 2])) {
    HEAPF32[$6 + 72 >> 2] = $8
   }
   $8 = HEAPF32[$6 + 36 >> 2];
   if (!!($8 < HEAPF32[$6 + 76 >> 2])) {
    HEAPF32[$6 + 76 >> 2] = $8
   }
   $8 = HEAPF32[$6 + 8 >> 2];
   if (!!(HEAPF32[$6 + 48 >> 2] < $8)) {
    HEAPF32[$6 + 48 >> 2] = $8
   }
   $8 = HEAPF32[$6 + 12 >> 2];
   if (!!(HEAPF32[$6 + 52 >> 2] < $8)) {
    HEAPF32[$6 + 52 >> 2] = $8
   }
   $8 = HEAPF32[$6 + 16 >> 2];
   if (!!(HEAPF32[$6 + 56 >> 2] < $8)) {
    HEAPF32[$6 + 56 >> 2] = $8
   }
   $8 = HEAPF32[$6 + 20 >> 2];
   if (!!(HEAPF32[$6 + 60 >> 2] < $8)) {
    HEAPF32[$6 + 60 >> 2] = $8
   }
   HEAP32[$6 + 520 >> 2] = $4;
   HEAP32[$6 + 516 >> 2] = $7;
   HEAPF32[$6 + 508 >> 2] = $5;
   HEAP32[$6 + 504 >> 2] = $2;
   HEAP32[$6 + 500 >> 2] = $1;
   HEAP32[$6 + 496 >> 2] = $0;
   HEAP32[$6 + 492 >> 2] = $3;
   HEAP32[$6 + 488 >> 2] = 22152;
   HEAP32[$6 + 512 >> 2] = $24;
   $2 = HEAP32[$24 + 68 >> 2];
   label$23 : {
    if (!$2) {
     if (HEAP32[$24 + 20 >> 2] < 1) {
      break label$23
     }
     $3 = 64;
     $1 = 1;
     while (1) {
      $2 = $3 + HEAP32[$24 + 28 >> 2] | 0;
      $0 = HEAP32[$2 >> 2];
      $5 = HEAPF32[$2 + -16 >> 2];
      $8 = HEAPF32[$2 + -12 >> 2];
      $10 = HEAPF32[$2 + -8 >> 2];
      $9 = HEAPF32[$2 + -64 >> 2];
      $13 = HEAPF32[$2 + -48 >> 2];
      $17 = HEAPF32[$2 + -32 >> 2];
      $16 = HEAPF32[$2 + -60 >> 2];
      $19 = HEAPF32[$2 + -44 >> 2];
      $20 = HEAPF32[$2 + -28 >> 2];
      $12 = HEAPF32[$2 + -56 >> 2];
      $11 = HEAPF32[$2 + -40 >> 2];
      $15 = HEAPF32[$2 + -24 >> 2];
      HEAP32[$6 + 188 >> 2] = 0;
      HEAP32[$6 + 172 >> 2] = 0;
      HEAP32[$6 + 156 >> 2] = 0;
      HEAP32[$6 + 140 >> 2] = 0;
      $18 = HEAPF32[$7 + 32 >> 2];
      $22 = HEAPF32[$7 + 36 >> 2];
      $21 = HEAPF32[$7 + 40 >> 2];
      HEAPF32[$6 + 168 >> 2] = Math_fround(Math_fround($12 * $18) + Math_fround($11 * $22)) + Math_fround($15 * $21);
      HEAPF32[$6 + 164 >> 2] = Math_fround(Math_fround($16 * $18) + Math_fround($19 * $22)) + Math_fround($20 * $21);
      HEAPF32[$6 + 160 >> 2] = Math_fround(Math_fround($9 * $18) + Math_fround($13 * $22)) + Math_fround($17 * $21);
      $23 = HEAPF32[$7 + 16 >> 2];
      $25 = HEAPF32[$7 + 20 >> 2];
      $26 = HEAPF32[$7 + 24 >> 2];
      HEAPF32[$6 + 152 >> 2] = Math_fround(Math_fround($12 * $23) + Math_fround($11 * $25)) + Math_fround($15 * $26);
      HEAPF32[$6 + 148 >> 2] = Math_fround(Math_fround($16 * $23) + Math_fround($19 * $25)) + Math_fround($20 * $26);
      HEAPF32[$6 + 144 >> 2] = Math_fround(Math_fround($9 * $23) + Math_fround($13 * $25)) + Math_fround($17 * $26);
      $27 = HEAPF32[$7 >> 2];
      $34 = Math_fround($12 * $27);
      $12 = HEAPF32[$7 + 4 >> 2];
      $34 = Math_fround($34 + Math_fround($11 * $12));
      $11 = HEAPF32[$7 + 8 >> 2];
      HEAPF32[$6 + 136 >> 2] = $34 + Math_fround($15 * $11);
      HEAPF32[$6 + 132 >> 2] = Math_fround(Math_fround($16 * $27) + Math_fround($19 * $12)) + Math_fround($20 * $11);
      HEAPF32[$6 + 128 >> 2] = Math_fround(Math_fround($9 * $27) + Math_fround($13 * $12)) + Math_fround($17 * $11);
      HEAPF32[$6 + 184 >> 2] = Math_fround(Math_fround(Math_fround($5 * $18) + Math_fround($8 * $22)) + Math_fround($10 * $21)) + HEAPF32[$7 + 56 >> 2];
      HEAPF32[$6 + 180 >> 2] = Math_fround(Math_fround(Math_fround($5 * $23) + Math_fround($8 * $25)) + Math_fround($10 * $26)) + HEAPF32[$7 + 52 >> 2];
      HEAPF32[$6 + 176 >> 2] = Math_fround(Math_fround(Math_fround($5 * $27) + Math_fround($8 * $12)) + Math_fround($10 * $11)) + HEAPF32[$7 + 48 >> 2];
      HEAP32[$6 + 84 >> 2] = 1065353216;
      HEAP32[$6 + 88 >> 2] = 1;
      HEAP32[$6 + 92 >> 2] = -1;
      $7 = $1 + -1 | 0;
      HEAP32[$6 + 100 >> 2] = $7;
      $2 = HEAP32[$6 + 520 >> 2];
      HEAP32[$6 + 96 >> 2] = $2;
      HEAP32[$6 + 80 >> 2] = 22368;
      HEAP32[$6 + 84 >> 2] = HEAP32[$2 + 4 >> 2];
      HEAP32[$6 + 684 >> 2] = $7;
      HEAP32[$6 + 680 >> 2] = -1;
      HEAP32[$6 + 668 >> 2] = $0;
      $7 = HEAP32[$6 + 492 >> 2];
      HEAP32[$6 + 664 >> 2] = $7;
      HEAP32[$6 + 672 >> 2] = HEAP32[$7 + 8 >> 2];
      HEAP32[$6 + 676 >> 2] = $6 + 128;
      btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29(HEAP32[$6 + 496 >> 2], HEAP32[$6 + 500 >> 2], HEAP32[$6 + 504 >> 2], $6 + 664 | 0, $6 + 80 | 0, HEAPF32[$6 + 508 >> 2]);
      if (($1 | 0) >= HEAP32[$24 + 20 >> 2]) {
       break label$23
      }
      $3 = $3 + 80 | 0;
      $1 = $1 + 1 | 0;
      $7 = HEAP32[$6 + 516 >> 2];
      continue;
     };
    }
    $0 = $6 + 72 | 0;
    $3 = HEAP32[$0 >> 2];
    $14 = HEAP32[$0 + 4 >> 2];
    $1 = $6 + 136 | 0;
    HEAP32[$1 >> 2] = $3;
    HEAP32[$1 + 4 >> 2] = $14;
    $0 = $6 + 56 | 0;
    $3 = HEAP32[$0 >> 2];
    $1 = HEAP32[$0 + 4 >> 2];
    $14 = $6 + 152 | 0;
    HEAP32[$14 >> 2] = $3;
    HEAP32[$14 + 4 >> 2] = $1;
    $14 = HEAP32[$6 + 52 >> 2];
    HEAP32[$6 + 144 >> 2] = HEAP32[$6 + 48 >> 2];
    HEAP32[$6 + 148 >> 2] = $14;
    $1 = HEAP32[$6 + 68 >> 2];
    HEAP32[$6 + 128 >> 2] = HEAP32[$6 + 64 >> 2];
    HEAP32[$6 + 132 >> 2] = $1;
    btDbvt__collideTV_28btDbvtNode_20const__2c_20btDbvtAabbMm_20const__2c_20btDbvt__ICollide__29_20const($2, HEAP32[$2 >> 2], $6 + 128 | 0, $6 + 488 | 0);
   }
   CProfileSample___CProfileSample_28_29();
  }
  global$0 = $6 + 688 | 0;
 }
 
 function btCollisionWorld__rayTest_28btVector3_20const__2c_20btVector3_20const__2c_20btCollisionWorld__RayResultCallback__29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0;
  $5 = global$0 - 256 | 0;
  global$0 = $5;
  $4 = $5 + 104 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $5 + 112 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $5 + 124 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$5 + 120 >> 2] = 1065353216;
  $4 = $5 + 132 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $5 + 140 | 0;
  HEAP32[$4 >> 2] = 1065353216;
  HEAP32[$4 + 4 >> 2] = 0;
  $14 = $1 + 8 | 0;
  $8 = $14;
  $15 = HEAP32[$8 >> 2];
  $10 = $15;
  $4 = HEAP32[$8 + 4 >> 2];
  $19 = $4;
  $16 = $5 + 76 | 0;
  $7 = $16;
  HEAP32[$7 >> 2] = $10;
  HEAP32[$7 + 4 >> 2] = $4;
  $10 = $2 + 8 | 0;
  $8 = $10;
  $12 = HEAP32[$8 >> 2];
  $7 = HEAP32[$8 + 4 >> 2];
  $10 = $5 + 92 | 0;
  $4 = $10;
  HEAP32[$4 >> 2] = $12;
  HEAP32[$4 + 4 >> 2] = $7;
  HEAP32[$5 + 32 >> 2] = 22628;
  HEAP32[$5 + 248 >> 2] = $3;
  HEAP32[$5 + 100 >> 2] = 1065353216;
  $4 = HEAP32[$1 + 4 >> 2];
  $3 = $4;
  $12 = HEAP32[$1 >> 2];
  HEAP32[$5 + 68 >> 2] = $12;
  HEAP32[$5 + 72 >> 2] = $4;
  $7 = HEAP32[$2 + 4 >> 2];
  HEAP32[$5 + 84 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$5 + 88 >> 2] = $7;
  HEAP32[$5 + 244 >> 2] = $0;
  $4 = $5 + 156 | 0;
  HEAP32[$4 >> 2] = $15;
  HEAP32[$4 + 4 >> 2] = $19;
  $4 = $5 + 148 | 0;
  HEAP32[$4 >> 2] = $12;
  HEAP32[$4 + 4 >> 2] = $3;
  $4 = $5 + 168 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $5 + 176 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $5 + 188 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$5 + 184 >> 2] = 1065353216;
  $4 = $5 + 196 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $5 + 204 | 0;
  HEAP32[$4 >> 2] = 1065353216;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = HEAP32[$2 + 4 >> 2];
  $7 = $5 + 212 | 0;
  HEAP32[$7 >> 2] = HEAP32[$2 >> 2];
  HEAP32[$7 + 4 >> 2] = $4;
  $3 = HEAP32[$8 >> 2];
  $7 = HEAP32[$8 + 4 >> 2];
  $4 = $5 + 220 | 0;
  HEAP32[$4 >> 2] = $3;
  HEAP32[$4 + 4 >> 2] = $7;
  HEAP32[$5 + 164 >> 2] = 1065353216;
  $6 = Math_fround(HEAPF32[$8 >> 2] - HEAPF32[$14 >> 2]);
  $11 = $6;
  $13 = Math_fround(HEAPF32[$2 >> 2] - HEAPF32[$1 >> 2]);
  $9 = Math_fround(HEAPF32[$2 + 4 >> 2] - HEAPF32[$1 + 4 >> 2]);
  $6 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($13 * $13) + Math_fround($9 * $9)) + Math_fround($6 * $6)))));
  $11 = Math_fround($11 * $6);
  $17 = $11 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $11);
  HEAPF32[$5 + 44 >> 2] = $17;
  $9 = Math_fround($9 * $6);
  $18 = $9 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $9);
  HEAPF32[$5 + 40 >> 2] = $18;
  HEAP32[$5 + 60 >> 2] = $17 < Math_fround(0.0);
  HEAP32[$5 + 56 >> 2] = $18 < Math_fround(0.0);
  $6 = Math_fround($13 * $6);
  HEAPF32[$5 + 64 >> 2] = Math_fround(Math_fround($6 * Math_fround(HEAPF32[$5 + 84 >> 2] - HEAPF32[$5 + 68 >> 2])) + Math_fround($9 * Math_fround(HEAPF32[$5 + 88 >> 2] - HEAPF32[$5 + 72 >> 2]))) + Math_fround($11 * Math_fround(HEAPF32[$10 >> 2] - HEAPF32[$16 >> 2]));
  $6 = $6 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $6);
  HEAPF32[$5 + 36 >> 2] = $6;
  HEAP32[$5 + 52 >> 2] = $6 < Math_fround(0.0);
  $0 = HEAP32[$0 + 68 >> 2];
  $4 = $5 + 24 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$5 + 16 >> 2] = 0;
  HEAP32[$5 + 20 >> 2] = 0;
  $4 = $5 + 8 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1, $2, $5 + 32 | 0, $5 + 16 | 0, $5);
  global$0 = $5 + 256 | 0;
 }
 
 function btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = Math_fround(0), $28 = 0;
  $6 = global$0 - 400 | 0;
  global$0 = $6;
  CProfileSample__CProfileSample_28char_20const__29($6 + 392 | 0, 20953);
  $11 = $2 + 8 | 0;
  $7 = $11;
  $20 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $9 = $6 + 336 | 0;
  HEAP32[$9 >> 2] = $20;
  HEAP32[$9 + 4 >> 2] = $8;
  $20 = $2 + 24 | 0;
  $7 = $20;
  $17 = HEAP32[$7 >> 2];
  $9 = HEAP32[$7 + 4 >> 2];
  $8 = $6 + 352 | 0;
  HEAP32[$8 >> 2] = $17;
  HEAP32[$8 + 4 >> 2] = $9;
  $17 = $2 + 40 | 0;
  $7 = $17;
  $16 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $9 = $6 + 368 | 0;
  HEAP32[$9 >> 2] = $16;
  HEAP32[$9 + 4 >> 2] = $8;
  $16 = $2 + 56 | 0;
  $7 = $16;
  $22 = HEAP32[$7 >> 2];
  $9 = HEAP32[$7 + 4 >> 2];
  $8 = $6 + 384 | 0;
  HEAP32[$8 >> 2] = $22;
  HEAP32[$8 + 4 >> 2] = $9;
  $22 = $3 + 8 | 0;
  $7 = $22;
  $23 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $9 = $6 + 272 | 0;
  HEAP32[$9 >> 2] = $23;
  HEAP32[$9 + 4 >> 2] = $8;
  $7 = $2;
  $8 = HEAP32[$7 >> 2];
  $9 = HEAP32[$7 + 4 >> 2];
  HEAP32[$6 + 328 >> 2] = $8;
  HEAP32[$6 + 332 >> 2] = $9;
  $8 = HEAP32[$7 + 20 >> 2];
  HEAP32[$6 + 344 >> 2] = HEAP32[$7 + 16 >> 2];
  HEAP32[$6 + 348 >> 2] = $8;
  $9 = HEAP32[$7 + 36 >> 2];
  HEAP32[$6 + 360 >> 2] = HEAP32[$7 + 32 >> 2];
  HEAP32[$6 + 364 >> 2] = $9;
  $8 = HEAP32[$7 + 52 >> 2];
  HEAP32[$6 + 376 >> 2] = HEAP32[$7 + 48 >> 2];
  HEAP32[$6 + 380 >> 2] = $8;
  $7 = $3;
  $8 = HEAP32[$7 >> 2];
  $9 = HEAP32[$7 + 4 >> 2];
  HEAP32[$6 + 264 >> 2] = $8;
  HEAP32[$6 + 268 >> 2] = $9;
  $23 = $7 + 24 | 0;
  $7 = $23;
  $24 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $9 = $6 + 288 | 0;
  HEAP32[$9 >> 2] = $24;
  HEAP32[$9 + 4 >> 2] = $8;
  $24 = $3 + 40 | 0;
  $7 = $24;
  $25 = HEAP32[$7 >> 2];
  $9 = HEAP32[$7 + 4 >> 2];
  $8 = $6 + 304 | 0;
  HEAP32[$8 >> 2] = $25;
  HEAP32[$8 + 4 >> 2] = $9;
  $25 = $3 + 56 | 0;
  $7 = $25;
  $26 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $9 = $6 + 320 | 0;
  HEAP32[$9 >> 2] = $26;
  HEAP32[$9 + 4 >> 2] = $8;
  $7 = $3;
  $8 = HEAP32[$7 + 16 >> 2];
  $9 = HEAP32[$7 + 20 >> 2];
  HEAP32[$6 + 280 >> 2] = $8;
  HEAP32[$6 + 284 >> 2] = $9;
  $8 = HEAP32[$7 + 36 >> 2];
  HEAP32[$6 + 296 >> 2] = HEAP32[$7 + 32 >> 2];
  HEAP32[$6 + 300 >> 2] = $8;
  $9 = HEAP32[$7 + 52 >> 2];
  HEAP32[$6 + 312 >> 2] = HEAP32[$7 + 48 >> 2];
  HEAP32[$6 + 316 >> 2] = $9;
  btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20float__29($6 + 328 | 0, $6 + 264 | 0, $6, $6 + 248 | 0);
  HEAP32[$6 + 228 >> 2] = 0;
  $10 = HEAPF32[$6 + 248 >> 2];
  HEAPF32[$6 + 224 >> 2] = $10 * HEAPF32[$6 + 8 >> 2];
  HEAPF32[$6 + 220 >> 2] = $10 * HEAPF32[$6 + 4 >> 2];
  HEAPF32[$6 + 216 >> 2] = $10 * HEAPF32[$6 >> 2];
  $8 = $6 + 208 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$6 + 200 >> 2] = 0;
  HEAP32[$6 + 204 >> 2] = 0;
  $8 = $6 + 56 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  $8 = $6 + 48 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  btMatrix3x3__getRotation_28btQuaternion__29_20const($6 + 328 | 0, $6 + 248 | 0);
  $9 = $6 + 44 | 0;
  HEAP32[$9 >> 2] = 0;
  $26 = $6 + 28 | 0;
  HEAP32[$26 >> 2] = 0;
  $10 = HEAPF32[$6 + 248 >> 2];
  $12 = HEAPF32[$6 + 252 >> 2];
  $14 = HEAPF32[$6 + 256 >> 2];
  $13 = HEAPF32[$6 + 260 >> 2];
  $15 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($12 * $12)) + Math_fround($14 * $14)) + Math_fround($13 * $13)));
  $19 = Math_fround($14 * $15);
  $18 = Math_fround($12 * $19);
  $21 = Math_fround($10 * $15);
  $27 = Math_fround($13 * $21);
  HEAPF32[$6 + 36 >> 2] = $18 + $27;
  $28 = $6 + 24 | 0;
  HEAPF32[$28 >> 2] = $18 - $27;
  $18 = Math_fround($10 * $21);
  $15 = Math_fround($12 * $15);
  $12 = Math_fround($12 * $15);
  HEAPF32[$6 + 40 >> 2] = Math_fround(1.0) - Math_fround($18 + $12);
  $14 = Math_fround($14 * $19);
  HEAPF32[$6 + 20 >> 2] = Math_fround(1.0) - Math_fround($18 + $14);
  HEAP32[$6 + 12 >> 2] = 0;
  $18 = Math_fround($10 * $19);
  $21 = Math_fround($13 * $15);
  HEAPF32[$6 + 32 >> 2] = $18 - $21;
  $10 = Math_fround($10 * $15);
  $13 = Math_fround($13 * $19);
  HEAPF32[$6 + 16 >> 2] = $10 + $13;
  HEAPF32[$6 + 8 >> 2] = $18 + $21;
  HEAPF32[$6 + 4 >> 2] = $10 - $13;
  HEAPF32[$6 >> 2] = Math_fround(1.0) - Math_fround($12 + $14);
  btCollisionShape__calculateTemporalAabb_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btVector3__2c_20btVector3__29_20const($1, $6, $6 + 200 | 0, $6 + 216 | 0, $6 + 248 | 0, $6 + 232 | 0);
  $7 = $11;
  $11 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  HEAP32[$9 >> 2] = $11;
  HEAP32[$9 + 4 >> 2] = $8;
  $7 = $2;
  $11 = HEAP32[$7 + 16 >> 2];
  $9 = HEAP32[$7 + 20 >> 2];
  $8 = $6 + 52 | 0;
  HEAP32[$8 >> 2] = $11;
  HEAP32[$8 + 4 >> 2] = $9;
  $7 = $20;
  $11 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $9 = $6 + 60 | 0;
  HEAP32[$9 >> 2] = $11;
  HEAP32[$9 + 4 >> 2] = $8;
  $7 = $2;
  $11 = HEAP32[$7 + 32 >> 2];
  $9 = HEAP32[$7 + 36 >> 2];
  $8 = $6 + 68 | 0;
  HEAP32[$8 >> 2] = $11;
  HEAP32[$8 + 4 >> 2] = $9;
  $7 = $17;
  $11 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $9 = $6 + 76 | 0;
  HEAP32[$9 >> 2] = $11;
  HEAP32[$9 + 4 >> 2] = $8;
  $7 = $2;
  $20 = HEAP32[$7 + 48 >> 2];
  $9 = HEAP32[$7 + 52 >> 2];
  $11 = $6 + 84 | 0;
  $8 = $11;
  HEAP32[$8 >> 2] = $20;
  HEAP32[$8 + 4 >> 2] = $9;
  $7 = $16;
  $17 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $20 = $6 + 92 | 0;
  $9 = $20;
  HEAP32[$9 >> 2] = $17;
  HEAP32[$9 + 4 >> 2] = $8;
  $7 = $22;
  $17 = HEAP32[$7 >> 2];
  $9 = HEAP32[$7 + 4 >> 2];
  $8 = $6 + 108 | 0;
  HEAP32[$8 >> 2] = $17;
  HEAP32[$8 + 4 >> 2] = $9;
  HEAP32[$6 >> 2] = 22756;
  $7 = $2;
  $2 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  HEAP32[$6 + 36 >> 2] = $2;
  HEAP32[$6 + 40 >> 2] = $8;
  $7 = $3;
  $2 = HEAP32[$7 >> 2];
  $9 = HEAP32[$7 + 4 >> 2];
  HEAP32[$6 + 100 >> 2] = $2;
  HEAP32[$6 + 104 >> 2] = $9;
  $8 = HEAP32[$7 + 52 >> 2];
  $2 = $6 + 148 | 0;
  $9 = $2;
  HEAP32[$9 >> 2] = HEAP32[$7 + 48 >> 2];
  HEAP32[$9 + 4 >> 2] = $8;
  $7 = $25;
  $16 = HEAP32[$7 >> 2];
  $9 = HEAP32[$7 + 4 >> 2];
  $17 = $6 + 156 | 0;
  $8 = $17;
  HEAP32[$8 >> 2] = $16;
  HEAP32[$8 + 4 >> 2] = $9;
  $7 = $23;
  $16 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $9 = $6 + 124 | 0;
  HEAP32[$9 >> 2] = $16;
  HEAP32[$9 + 4 >> 2] = $8;
  $7 = $3;
  $16 = HEAP32[$7 + 16 >> 2];
  $9 = HEAP32[$7 + 20 >> 2];
  $8 = $6 + 116 | 0;
  HEAP32[$8 >> 2] = $16;
  HEAP32[$8 + 4 >> 2] = $9;
  $7 = $24;
  $16 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $9 = $6 + 140 | 0;
  HEAP32[$9 >> 2] = $16;
  HEAP32[$9 + 4 >> 2] = $8;
  $7 = $3;
  $3 = HEAP32[$7 + 32 >> 2];
  $9 = HEAP32[$7 + 36 >> 2];
  $8 = $6 + 132 | 0;
  HEAP32[$8 >> 2] = $3;
  HEAP32[$8 + 4 >> 2] = $9;
  HEAP32[$6 + 184 >> 2] = $4;
  HEAPF32[$6 + 188 >> 2] = $5;
  HEAP32[$6 + 192 >> 2] = $1;
  $13 = HEAPF32[$6 + 88 >> 2];
  $14 = HEAPF32[$6 + 152 >> 2];
  $12 = HEAPF32[$11 >> 2];
  $19 = HEAPF32[$2 >> 2];
  $10 = HEAPF32[$20 >> 2];
  $15 = HEAPF32[$17 >> 2];
  HEAP32[$6 + 180 >> 2] = $0;
  $12 = Math_fround($19 - $12);
  $13 = Math_fround($14 - $13);
  $10 = Math_fround($15 - $10);
  $14 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($12 * $12) + Math_fround($13 * $13)) + Math_fround($10 * $10)))));
  $19 = Math_fround($10 * $14);
  $5 = $19 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $19);
  HEAP32[$26 >> 2] = $5 < Math_fround(0.0);
  $15 = Math_fround($13 * $14);
  $18 = $15 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $15);
  HEAP32[$28 >> 2] = $18 < Math_fround(0.0);
  HEAPF32[$6 + 12 >> 2] = $5;
  HEAPF32[$6 + 8 >> 2] = $18;
  $5 = Math_fround($10 * $19);
  $10 = Math_fround($12 * $14);
  HEAPF32[$6 + 32 >> 2] = $5 + Math_fround(Math_fround($12 * $10) + Math_fround($13 * $15));
  $10 = $10 == Math_fround(0.0) ? Math_fround(999999984306749440.0) : Math_fround(Math_fround(1.0) / $10);
  HEAPF32[$6 + 4 >> 2] = $10;
  HEAP32[$6 + 20 >> 2] = $10 < Math_fround(0.0);
  $3 = HEAP32[$0 + 68 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 24 >> 2]]($3, $6 + 376 | 0, $6 + 312 | 0, $6, $6 + 248 | 0, $6 + 232 | 0);
  CProfileSample___CProfileSample_28_29();
  global$0 = $6 + 400 | 0;
 }
 
 function btCollisionWorld__debugDrawObject_28btTransform_20const__2c_20btCollisionShape_20const__2c_20btVector3_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $4 = global$0 - 144 | 0;
  global$0 = $4;
  label$1 : {
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
    break label$1
   }
   $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 56 >> 2]]($5) & 32768)) {
    break label$1
   }
   $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 64 >> 2]]($5, $1, Math_fround(.10000000149011612));
  }
  label$2 : {
   label$3 : {
    $5 = HEAP32[$2 + 4 >> 2];
    if ($5 >>> 0 > 31) {
     break label$3
    }
    label$4 : {
     switch ($5 - 1 | 0) {
     case 30:
      $6 = HEAP32[$2 + 20 >> 2];
      if (($6 | 0) < 1) {
       break label$2
      }
      $8 = Math_imul($6, 80) + -80 | 0;
      while (1) {
       $5 = $8 + HEAP32[$2 + 28 >> 2] | 0;
       $7 = HEAP32[$5 - -64 >> 2];
       $9 = HEAPF32[$5 + 56 >> 2];
       $10 = HEAPF32[$5 + 48 >> 2];
       $12 = HEAPF32[$5 + 52 >> 2];
       $20 = HEAPF32[$5 + 32 >> 2];
       $18 = HEAPF32[$5 >> 2];
       $19 = HEAPF32[$5 + 16 >> 2];
       $16 = HEAPF32[$5 + 36 >> 2];
       $21 = HEAPF32[$5 + 4 >> 2];
       $24 = HEAPF32[$5 + 20 >> 2];
       $14 = HEAPF32[$5 + 40 >> 2];
       $13 = HEAPF32[$5 + 8 >> 2];
       $15 = HEAPF32[$5 + 24 >> 2];
       HEAP32[$4 + 60 >> 2] = 0;
       HEAP32[$4 + 44 >> 2] = 0;
       HEAP32[$4 + 28 >> 2] = 0;
       HEAP32[$4 + 12 >> 2] = 0;
       $23 = HEAPF32[$1 + 32 >> 2];
       $17 = HEAPF32[$1 + 36 >> 2];
       $22 = HEAPF32[$1 + 40 >> 2];
       HEAPF32[$4 + 40 >> 2] = Math_fround(Math_fround($13 * $23) + Math_fround($15 * $17)) + Math_fround($14 * $22);
       HEAPF32[$4 + 36 >> 2] = Math_fround(Math_fround($21 * $23) + Math_fround($24 * $17)) + Math_fround($16 * $22);
       HEAPF32[$4 + 32 >> 2] = Math_fround(Math_fround($18 * $23) + Math_fround($19 * $17)) + Math_fround($20 * $22);
       $26 = HEAPF32[$1 + 16 >> 2];
       $27 = HEAPF32[$1 + 20 >> 2];
       $28 = HEAPF32[$1 + 24 >> 2];
       HEAPF32[$4 + 24 >> 2] = Math_fround(Math_fround($13 * $26) + Math_fround($15 * $27)) + Math_fround($14 * $28);
       HEAPF32[$4 + 20 >> 2] = Math_fround(Math_fround($21 * $26) + Math_fround($24 * $27)) + Math_fround($16 * $28);
       HEAPF32[$4 + 16 >> 2] = Math_fround(Math_fround($18 * $26) + Math_fround($19 * $27)) + Math_fround($20 * $28);
       $29 = HEAPF32[$1 >> 2];
       $25 = Math_fround($13 * $29);
       $13 = HEAPF32[$1 + 4 >> 2];
       $25 = Math_fround($25 + Math_fround($15 * $13));
       $15 = HEAPF32[$1 + 8 >> 2];
       HEAPF32[$4 + 8 >> 2] = $25 + Math_fround($14 * $15);
       HEAPF32[$4 + 4 >> 2] = Math_fround(Math_fround($21 * $29) + Math_fround($24 * $13)) + Math_fround($16 * $15);
       HEAPF32[$4 >> 2] = Math_fround(Math_fround($18 * $29) + Math_fround($19 * $13)) + Math_fround($20 * $15);
       HEAPF32[$4 + 56 >> 2] = Math_fround(Math_fround(Math_fround($10 * $23) + Math_fround($12 * $17)) + Math_fround($9 * $22)) + HEAPF32[$1 + 56 >> 2];
       HEAPF32[$4 + 52 >> 2] = Math_fround(Math_fround(Math_fround($10 * $26) + Math_fround($12 * $27)) + Math_fround($9 * $28)) + HEAPF32[$1 + 52 >> 2];
       HEAPF32[$4 + 48 >> 2] = Math_fround(Math_fround(Math_fround($10 * $29) + Math_fround($12 * $13)) + Math_fround($9 * $15)) + HEAPF32[$1 + 48 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $4, $7, $3);
       $8 = $8 + -80 | 0;
       $6 = $6 + -1 | 0;
       if (($6 | 0) > 0) {
        continue
       }
       break;
      };
      break label$2;
     default:
      $11 = $2 + 40 | 0;
      $8 = HEAP32[$11 >> 2];
      $6 = HEAP32[$11 + 4 >> 2];
      $5 = $4 + 8 | 0;
      HEAP32[$5 >> 2] = $8;
      HEAP32[$5 + 4 >> 2] = $6;
      $7 = HEAP32[$2 + 36 >> 2];
      HEAP32[$4 >> 2] = HEAP32[$2 + 32 >> 2];
      HEAP32[$4 + 4 >> 2] = $7;
      $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2));
      $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2));
      $12 = Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2)) + HEAPF32[$5 >> 2]);
      HEAPF32[$5 >> 2] = $12;
      $9 = Math_fround($9 + HEAPF32[$4 >> 2]);
      HEAPF32[$4 >> 2] = $9;
      $10 = Math_fround($10 + HEAPF32[$4 + 4 >> 2]);
      HEAPF32[$4 + 4 >> 2] = $10;
      $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      HEAP32[$4 + 140 >> 2] = 0;
      HEAPF32[$4 + 136 >> 2] = -$12;
      HEAPF32[$4 + 132 >> 2] = -$10;
      HEAPF32[$4 + 128 >> 2] = -$9;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0, $4 + 128 | 0, $4, $1, $3);
      break label$2;
     case 7:
      $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2));
      $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $9, $1, $3);
      break label$2;
     case 8:
      $7 = HEAP32[$2 + 96 >> 2];
      if (($7 | 0) < 1) {
       break label$2
      }
      $5 = ($7 << 2) + -4 | 0;
      $8 = ($7 << 4) + -8 | 0;
      while (1) {
       $6 = $8 + HEAP32[$2 + 104 >> 2] | 0;
       $9 = HEAPF32[$6 >> 2];
       $10 = HEAPF32[$6 + -8 >> 2];
       $12 = HEAPF32[$6 + -4 >> 2];
       $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       $23 = HEAPF32[$5 + HEAP32[$2 + 124 >> 2] >> 2];
       HEAP32[$4 + 60 >> 2] = 0;
       HEAP32[$4 + 44 >> 2] = 0;
       HEAP32[$4 + 28 >> 2] = 0;
       HEAP32[$4 + 12 >> 2] = 0;
       $20 = HEAPF32[$1 + 40 >> 2];
       $18 = HEAPF32[$1 + 32 >> 2];
       $16 = Math_fround($18 * Math_fround(0.0));
       $19 = HEAPF32[$1 + 36 >> 2];
       $21 = Math_fround($19 * Math_fround(0.0));
       HEAPF32[$4 + 40 >> 2] = $20 + Math_fround($16 + $21);
       $25 = Math_fround($16 + $19);
       $16 = Math_fround($20 * Math_fround(0.0));
       HEAPF32[$4 + 36 >> 2] = $25 + $16;
       HEAPF32[$4 + 32 >> 2] = Math_fround($18 + $21) + $16;
       $16 = HEAPF32[$1 + 24 >> 2];
       $21 = HEAPF32[$1 + 16 >> 2];
       $14 = Math_fround($21 * Math_fround(0.0));
       $24 = HEAPF32[$1 + 20 >> 2];
       $13 = Math_fround($24 * Math_fround(0.0));
       HEAPF32[$4 + 24 >> 2] = $16 + Math_fround($14 + $13);
       $25 = Math_fround($14 + $24);
       $14 = Math_fround($16 * Math_fround(0.0));
       HEAPF32[$4 + 20 >> 2] = $25 + $14;
       HEAPF32[$4 + 16 >> 2] = Math_fround($21 + $13) + $14;
       $14 = HEAPF32[$1 + 8 >> 2];
       $13 = HEAPF32[$1 >> 2];
       $17 = Math_fround($13 * Math_fround(0.0));
       $15 = HEAPF32[$1 + 4 >> 2];
       $22 = Math_fround($15 * Math_fround(0.0));
       HEAPF32[$4 + 8 >> 2] = $14 + Math_fround($17 + $22);
       $25 = Math_fround($17 + $15);
       $17 = Math_fround($14 * Math_fround(0.0));
       HEAPF32[$4 + 4 >> 2] = $25 + $17;
       HEAPF32[$4 >> 2] = Math_fround($13 + $22) + $17;
       HEAPF32[$4 + 56 >> 2] = Math_fround(Math_fround(Math_fround($10 * $18) + Math_fround($12 * $19)) + Math_fround($9 * $20)) + HEAPF32[$1 + 56 >> 2];
       HEAPF32[$4 + 52 >> 2] = Math_fround(Math_fround(Math_fround($10 * $21) + Math_fround($12 * $24)) + Math_fround($9 * $16)) + HEAPF32[$1 + 52 >> 2];
       HEAPF32[$4 + 48 >> 2] = Math_fround(Math_fround(Math_fround($10 * $13) + Math_fround($12 * $15)) + Math_fround($9 * $14)) + HEAPF32[$1 + 48 >> 2];
       FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($6, $23, $4, $3);
       $5 = $5 + -4 | 0;
       $8 = $8 + -16 | 0;
       $7 = $7 + -1 | 0;
       if (($7 | 0) > 0) {
        continue
       }
       break;
      };
      break label$2;
     case 9:
      $8 = $2 + 32 | 0;
      $5 = HEAP32[$2 + 56 >> 2];
      $9 = HEAPF32[$8 + ($5 << 2) >> 2];
      $10 = HEAPF32[(($5 + 2 | 0) % 3 << 2) + $8 >> 2];
      $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 84 >> 2]]($0, $10, $9, $5, $1, $3);
      break label$2;
     case 10:
      $5 = HEAP32[$2 + 72 >> 2];
      $9 = HEAPF32[$2 + 60 >> 2];
      $10 = HEAPF32[$2 + 64 >> 2];
      $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 92 >> 2]]($0, $9, $10, $5, $1, $3);
      break label$2;
     case 12:
      $5 = HEAP32[$2 + 56 >> 2];
      $9 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 92 >> 2]]($2));
      $11 = $2 + 40 | 0;
      $30 = HEAP32[$11 >> 2];
      $6 = HEAP32[$11 + 4 >> 2];
      $8 = $4 + 8 | 0;
      $7 = $8;
      HEAP32[$7 >> 2] = $30;
      HEAP32[$7 + 4 >> 2] = $6;
      $7 = HEAP32[$2 + 36 >> 2];
      HEAP32[$4 >> 2] = HEAP32[$2 + 32 >> 2];
      HEAP32[$4 + 4 >> 2] = $7;
      $10 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2));
      $12 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2));
      (wasm2js_i32$0 = $8, wasm2js_f32$0 = Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 48 >> 2]]($2)) + HEAPF32[$8 >> 2])), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
      HEAPF32[$4 >> 2] = $10 + HEAPF32[$4 >> 2];
      HEAPF32[$4 + 4 >> 2] = $12 + HEAPF32[$4 + 4 >> 2];
      $10 = HEAPF32[($5 << 2) + $4 >> 2];
      $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 88 >> 2]]($0, $9, $10, $5, $1, $3);
      break label$2;
     case 0:
     case 1:
     case 2:
     case 3:
     case 4:
     case 5:
     case 6:
     case 11:
     case 13:
     case 14:
     case 15:
     case 16:
     case 17:
     case 18:
     case 19:
     case 20:
     case 21:
     case 22:
     case 23:
     case 24:
     case 25:
     case 26:
     case 28:
     case 29:
      break label$3;
     case 27:
      break label$4;
     };
    }
    $9 = HEAPF32[$2 + 68 >> 2];
    $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 96 >> 2]]($0, $2 + 52 | 0, $9, $1, $3);
    break label$2;
   }
   label$14 : {
    if (($5 | 0) > 6) {
     break label$14
    }
    $5 = HEAP32[$2 + 56 >> 2];
    if ($5) {
     if (HEAP32[$5 + 28 >> 2] < 1) {
      break label$14
     }
     while (1) {
      $20 = Math_fround(0.0);
      label$17 : {
       $32 = Math_imul($30, 36);
       $8 = $32 + HEAP32[$5 + 36 >> 2] | 0;
       $31 = HEAP32[$8 + 4 >> 2];
       if (!$31) {
        $18 = Math_fround(0.0);
        $19 = Math_fround(0.0);
        break label$17;
       }
       $18 = Math_fround(0.0);
       $19 = Math_fround(0.0);
       if (($31 | 0) < 1) {
        break label$17
       }
       $8 = HEAP32[$8 + 12 >> 2];
       $6 = HEAP32[($8 + ($31 << 2) | 0) + -4 >> 2];
       $7 = 1;
       $33 = 0;
       while (1) {
        $11 = HEAP32[$8 + $33 >> 2];
        $34 = $11 << 4;
        $8 = $34 + HEAP32[$5 + 16 >> 2] | 0;
        $16 = HEAPF32[$8 >> 2];
        $21 = HEAPF32[$8 + 4 >> 2];
        $24 = HEAPF32[$8 + 8 >> 2];
        $8 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
        HEAP32[$4 + 12 >> 2] = 0;
        $35 = HEAP32[$5 + 16 >> 2];
        $6 = $35 + ($6 << 4) | 0;
        $9 = HEAPF32[$6 >> 2];
        $14 = HEAPF32[$1 + 32 >> 2];
        $10 = HEAPF32[$6 + 4 >> 2];
        $13 = HEAPF32[$1 + 36 >> 2];
        $12 = HEAPF32[$6 + 8 >> 2];
        $15 = HEAPF32[$1 + 40 >> 2];
        $23 = HEAPF32[$1 + 56 >> 2];
        HEAPF32[$4 + 8 >> 2] = Math_fround(Math_fround(Math_fround($9 * $14) + Math_fround($10 * $13)) + Math_fround($12 * $15)) + $23;
        $17 = HEAPF32[$1 + 16 >> 2];
        $22 = HEAPF32[$1 + 20 >> 2];
        $26 = HEAPF32[$1 + 24 >> 2];
        $27 = HEAPF32[$1 + 52 >> 2];
        HEAPF32[$4 + 4 >> 2] = Math_fround(Math_fround(Math_fround($9 * $17) + Math_fround($10 * $22)) + Math_fround($12 * $26)) + $27;
        $28 = HEAPF32[$1 >> 2];
        $29 = HEAPF32[$1 + 4 >> 2];
        $36 = HEAPF32[$1 + 8 >> 2];
        $25 = HEAPF32[$1 + 48 >> 2];
        HEAPF32[$4 >> 2] = Math_fround(Math_fround(Math_fround($9 * $28) + Math_fround($10 * $29)) + Math_fround($12 * $36)) + $25;
        HEAP32[$4 + 140 >> 2] = 0;
        $6 = $34 + $35 | 0;
        $9 = HEAPF32[$6 >> 2];
        $10 = HEAPF32[$6 + 4 >> 2];
        $12 = HEAPF32[$6 + 8 >> 2];
        HEAPF32[$4 + 136 >> 2] = $23 + Math_fround(Math_fround(Math_fround($14 * $9) + Math_fround($13 * $10)) + Math_fround($15 * $12));
        HEAPF32[$4 + 132 >> 2] = $27 + Math_fround(Math_fround(Math_fround($17 * $9) + Math_fround($22 * $10)) + Math_fround($26 * $12));
        HEAPF32[$4 + 128 >> 2] = $25 + Math_fround(Math_fround(Math_fround($28 * $9) + Math_fround($29 * $10)) + Math_fround($36 * $12));
        FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 16 >> 2]]($8, $4, $4 + 128 | 0, $3);
        $19 = Math_fround($19 + $24);
        $18 = Math_fround($18 + $21);
        $20 = Math_fround($20 + $16);
        $8 = $32 + HEAP32[$5 + 36 >> 2] | 0;
        if (($7 | 0) >= HEAP32[$8 + 4 >> 2]) {
         break label$17
        }
        $33 = $33 + 4 | 0;
        $7 = $7 + 1 | 0;
        $8 = HEAP32[$8 + 12 >> 2];
        $6 = $11;
        continue;
       };
      }
      $8 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      if (FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 56 >> 2]]($8) & 16384) {
       HEAP32[$4 + 8 >> 2] = 0;
       HEAP32[$4 + 12 >> 2] = 0;
       HEAP32[$4 >> 2] = 1065353216;
       HEAP32[$4 + 4 >> 2] = 1065353216;
       $8 = $32 + HEAP32[$5 + 36 >> 2] | 0;
       $16 = HEAPF32[$8 + 28 >> 2];
       $21 = HEAPF32[$8 + 20 >> 2];
       $24 = HEAPF32[$8 + 24 >> 2];
       $8 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       HEAP32[$4 + 140 >> 2] = 0;
       $12 = Math_fround(Math_fround(1.0) / Math_fround($31 | 0));
       $9 = Math_fround($12 * $20);
       $20 = HEAPF32[$1 + 32 >> 2];
       $10 = Math_fround($12 * $18);
       $18 = HEAPF32[$1 + 36 >> 2];
       $12 = Math_fround($12 * $19);
       $19 = HEAPF32[$1 + 40 >> 2];
       $14 = HEAPF32[$1 + 56 >> 2];
       HEAPF32[$4 + 136 >> 2] = Math_fround(Math_fround(Math_fround($9 * $20) + Math_fround($10 * $18)) + Math_fround($12 * $19)) + $14;
       $13 = HEAPF32[$1 + 16 >> 2];
       $15 = HEAPF32[$1 + 20 >> 2];
       $23 = HEAPF32[$1 + 24 >> 2];
       $17 = HEAPF32[$1 + 52 >> 2];
       HEAPF32[$4 + 132 >> 2] = Math_fround(Math_fround(Math_fround($9 * $13) + Math_fround($10 * $15)) + Math_fround($12 * $23)) + $17;
       $22 = HEAPF32[$1 >> 2];
       $26 = HEAPF32[$1 + 4 >> 2];
       $27 = HEAPF32[$1 + 8 >> 2];
       $28 = HEAPF32[$1 + 48 >> 2];
       HEAPF32[$4 + 128 >> 2] = Math_fround(Math_fround(Math_fround($9 * $22) + Math_fround($10 * $26)) + Math_fround($12 * $27)) + $28;
       HEAP32[$4 + 124 >> 2] = 0;
       $9 = Math_fround($9 + $21);
       $10 = Math_fround($10 + $24);
       $12 = Math_fround($12 + $16);
       HEAPF32[$4 + 120 >> 2] = $14 + Math_fround(Math_fround(Math_fround($20 * $9) + Math_fround($18 * $10)) + Math_fround($19 * $12));
       HEAPF32[$4 + 116 >> 2] = $17 + Math_fround(Math_fround(Math_fround($9 * $13) + Math_fround($10 * $15)) + Math_fround($12 * $23));
       HEAPF32[$4 + 112 >> 2] = $28 + Math_fround(Math_fround(Math_fround($9 * $22) + Math_fround($10 * $26)) + Math_fround($12 * $27));
       FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 16 >> 2]]($8, $4 + 128 | 0, $4 + 112 | 0, $4);
      }
      $30 = $30 + 1 | 0;
      if (($30 | 0) < HEAP32[$5 + 28 >> 2]) {
       continue
      }
      break;
     };
     break label$14;
    }
    if ((FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 100 >> 2]]($2) | 0) < 1) {
     break label$14
    }
    $5 = 0;
    while (1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 104 >> 2]]($2, $5, $4, $4 + 128 | 0);
     HEAP32[$4 + 124 >> 2] = 0;
     $9 = HEAPF32[$4 >> 2];
     $20 = HEAPF32[$1 + 32 >> 2];
     $10 = HEAPF32[$4 + 4 >> 2];
     $18 = HEAPF32[$1 + 36 >> 2];
     $12 = HEAPF32[$4 + 8 >> 2];
     $19 = HEAPF32[$1 + 40 >> 2];
     $16 = HEAPF32[$1 + 56 >> 2];
     HEAPF32[$4 + 120 >> 2] = Math_fround(Math_fround(Math_fround($9 * $20) + Math_fround($10 * $18)) + Math_fround($12 * $19)) + $16;
     $21 = HEAPF32[$1 + 16 >> 2];
     $24 = HEAPF32[$1 + 20 >> 2];
     $14 = HEAPF32[$1 + 24 >> 2];
     $13 = HEAPF32[$1 + 52 >> 2];
     HEAPF32[$4 + 116 >> 2] = Math_fround(Math_fround(Math_fround($9 * $21) + Math_fround($10 * $24)) + Math_fround($12 * $14)) + $13;
     $15 = HEAPF32[$1 >> 2];
     $23 = HEAPF32[$1 + 4 >> 2];
     $17 = HEAPF32[$1 + 8 >> 2];
     $22 = HEAPF32[$1 + 48 >> 2];
     HEAPF32[$4 + 112 >> 2] = Math_fround(Math_fround(Math_fround($9 * $15) + Math_fround($10 * $23)) + Math_fround($12 * $17)) + $22;
     HEAP32[$4 + 108 >> 2] = 0;
     $9 = HEAPF32[$4 + 128 >> 2];
     $10 = HEAPF32[$4 + 132 >> 2];
     $12 = HEAPF32[$4 + 136 >> 2];
     HEAPF32[$4 + 104 >> 2] = $16 + Math_fround(Math_fround(Math_fround($20 * $9) + Math_fround($18 * $10)) + Math_fround($19 * $12));
     HEAPF32[$4 + 100 >> 2] = $13 + Math_fround(Math_fround(Math_fround($21 * $9) + Math_fround($24 * $10)) + Math_fround($14 * $12));
     HEAPF32[$4 + 96 >> 2] = $22 + Math_fround(Math_fround(Math_fround($15 * $9) + Math_fround($23 * $10)) + Math_fround($17 * $12));
     $8 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 16 >> 2]]($8, $4 + 112 | 0, $4 + 96 | 0, $3);
     $5 = $5 + 1 | 0;
     if (($5 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 100 >> 2]]($2) | 0)) {
      continue
     }
     break;
    };
   }
   $5 = HEAP32[$2 + 4 >> 2];
   if ($5 + -21 >>> 0 <= 8) {
    HEAP32[$4 + 136 >> 2] = 1566444395;
    HEAP32[$4 + 140 >> 2] = 0;
    HEAP32[$4 + 128 >> 2] = 1566444395;
    HEAP32[$4 + 132 >> 2] = 1566444395;
    HEAP32[$4 + 120 >> 2] = -581039253;
    HEAP32[$4 + 124 >> 2] = 0;
    HEAP32[$4 + 112 >> 2] = -581039253;
    HEAP32[$4 + 116 >> 2] = -581039253;
    $5 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
    $11 = $3 + 8 | 0;
    $8 = HEAP32[$11 >> 2];
    $6 = HEAP32[$11 + 4 >> 2];
    $7 = $4 + 20 | 0;
    HEAP32[$7 >> 2] = $8;
    HEAP32[$7 + 4 >> 2] = $6;
    $11 = $1 + 8 | 0;
    $8 = HEAP32[$11 >> 2];
    $7 = HEAP32[$11 + 4 >> 2];
    $6 = $4 + 36 | 0;
    HEAP32[$6 >> 2] = $8;
    HEAP32[$6 + 4 >> 2] = $7;
    $6 = HEAP32[$1 + 20 >> 2];
    $7 = $4 + 44 | 0;
    HEAP32[$7 >> 2] = HEAP32[$1 + 16 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    $11 = $1 + 24 | 0;
    $8 = HEAP32[$11 >> 2];
    $7 = HEAP32[$11 + 4 >> 2];
    $6 = $4 + 52 | 0;
    HEAP32[$6 >> 2] = $8;
    HEAP32[$6 + 4 >> 2] = $7;
    $6 = HEAP32[$1 + 36 >> 2];
    $7 = $4 + 60 | 0;
    HEAP32[$7 >> 2] = HEAP32[$1 + 32 >> 2];
    HEAP32[$7 + 4 >> 2] = $6;
    $11 = $1 + 40 | 0;
    $8 = HEAP32[$11 >> 2];
    $7 = HEAP32[$11 + 4 >> 2];
    $6 = $4 + 68 | 0;
    HEAP32[$6 >> 2] = $8;
    HEAP32[$6 + 4 >> 2] = $7;
    HEAP32[$4 + 8 >> 2] = $5;
    HEAP32[$4 + 4 >> 2] = 22836;
    HEAP32[$4 >> 2] = 22812;
    $11 = $3;
    $7 = HEAP32[$11 >> 2];
    $6 = HEAP32[$11 + 4 >> 2];
    HEAP32[$4 + 12 >> 2] = $7;
    HEAP32[$4 + 16 >> 2] = $6;
    $7 = HEAP32[$1 + 4 >> 2];
    HEAP32[$4 + 28 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$4 + 32 >> 2] = $7;
    $11 = $1 + 56 | 0;
    $5 = HEAP32[$11 >> 2];
    $6 = HEAP32[$11 + 4 >> 2];
    $7 = $4 + 84 | 0;
    HEAP32[$7 >> 2] = $5;
    HEAP32[$7 + 4 >> 2] = $6;
    $7 = HEAP32[$1 + 52 >> 2];
    $6 = $4 + 76 | 0;
    HEAP32[$6 >> 2] = HEAP32[$1 + 48 >> 2];
    HEAP32[$6 + 4 >> 2] = $7;
    FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 64 >> 2]]($2, $4, $4 + 112 | 0, $4 + 128 | 0);
    $5 = HEAP32[$2 + 4 >> 2];
   }
   if (($5 | 0) != 3) {
    break label$2
   }
   HEAP32[$4 + 136 >> 2] = 1566444395;
   HEAP32[$4 + 140 >> 2] = 0;
   HEAP32[$4 + 128 >> 2] = 1566444395;
   HEAP32[$4 + 132 >> 2] = 1566444395;
   HEAP32[$4 + 120 >> 2] = -581039253;
   HEAP32[$4 + 124 >> 2] = 0;
   HEAP32[$4 + 112 >> 2] = -581039253;
   HEAP32[$4 + 116 >> 2] = -581039253;
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   $11 = $3 + 8 | 0;
   $5 = HEAP32[$11 >> 2];
   $6 = HEAP32[$11 + 4 >> 2];
   $7 = $4 + 20 | 0;
   HEAP32[$7 >> 2] = $5;
   HEAP32[$7 + 4 >> 2] = $6;
   $11 = $1 + 8 | 0;
   $5 = HEAP32[$11 >> 2];
   $7 = HEAP32[$11 + 4 >> 2];
   $6 = $4 + 36 | 0;
   HEAP32[$6 >> 2] = $5;
   HEAP32[$6 + 4 >> 2] = $7;
   $6 = HEAP32[$1 + 20 >> 2];
   $7 = $4 + 44 | 0;
   HEAP32[$7 >> 2] = HEAP32[$1 + 16 >> 2];
   HEAP32[$7 + 4 >> 2] = $6;
   $11 = $1 + 24 | 0;
   $5 = HEAP32[$11 >> 2];
   $7 = HEAP32[$11 + 4 >> 2];
   $6 = $4 + 52 | 0;
   HEAP32[$6 >> 2] = $5;
   HEAP32[$6 + 4 >> 2] = $7;
   $6 = HEAP32[$1 + 36 >> 2];
   $7 = $4 + 60 | 0;
   HEAP32[$7 >> 2] = HEAP32[$1 + 32 >> 2];
   HEAP32[$7 + 4 >> 2] = $6;
   $11 = $1 + 40 | 0;
   $5 = HEAP32[$11 >> 2];
   $7 = HEAP32[$11 + 4 >> 2];
   $6 = $4 + 68 | 0;
   HEAP32[$6 >> 2] = $5;
   HEAP32[$6 + 4 >> 2] = $7;
   HEAP32[$4 + 8 >> 2] = $0;
   HEAP32[$4 + 4 >> 2] = 22836;
   HEAP32[$4 >> 2] = 22812;
   $11 = $3;
   $0 = HEAP32[$11 >> 2];
   $6 = HEAP32[$11 + 4 >> 2];
   HEAP32[$4 + 12 >> 2] = $0;
   HEAP32[$4 + 16 >> 2] = $6;
   $7 = HEAP32[$1 + 4 >> 2];
   HEAP32[$4 + 28 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$4 + 32 >> 2] = $7;
   $11 = $1 + 56 | 0;
   $0 = HEAP32[$11 >> 2];
   $6 = HEAP32[$11 + 4 >> 2];
   $7 = $4 + 84 | 0;
   HEAP32[$7 >> 2] = $0;
   HEAP32[$7 + 4 >> 2] = $6;
   $7 = HEAP32[$1 + 52 >> 2];
   $6 = $4 + 76 | 0;
   HEAP32[$6 >> 2] = HEAP32[$1 + 48 >> 2];
   HEAP32[$6 + 4 >> 2] = $7;
   $1 = HEAP32[$2 + 96 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $4 | 4, $4 + 112 | 0, $4 + 128 | 0);
  }
  global$0 = $4 + 144 | 0;
 }
 
 function btCollisionWorld__debugDrawWorld_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = 0;
  $1 = global$0 - 192 | 0;
  global$0 = $1;
  label$1 : {
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
    break label$1
   }
   $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 100 >> 2]]($4);
   $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($1 + 80 | 0, $4);
   $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   label$2 : {
    if (!(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 56 >> 2]]($4) & 8)) {
     break label$2
    }
    $4 = HEAP32[$0 + 24 >> 2];
    if (!$4) {
     break label$2
    }
    $11 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 36 >> 2]]($4) | 0;
    if (($11 | 0) < 1) {
     break label$2
    }
    $2 = $1 + 176 | 0;
    while (1) {
     $4 = HEAP32[$0 + 24 >> 2];
     $4 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 40 >> 2]]($4, $8) | 0;
     $6 = HEAP32[$4 + 780 >> 2];
     if (($6 | 0) >= 1) {
      $4 = $4 + 160 | 0;
      while (1) {
       $9 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$9 >> 2] + 40 >> 2]]($9, $4 + -124 | 0, $4 + -92 | 0, HEAPF32[$4 + -76 >> 2], HEAP32[$4 >> 2], $2);
       $4 = $4 + 192 | 0;
       $6 = $6 + -1 | 0;
       if ($6) {
        continue
       }
       break;
      };
     }
     $8 = $8 + 1 | 0;
     if (($11 | 0) != ($8 | 0)) {
      continue
     }
     break;
    };
   }
   $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 56 >> 2]]($4) & 3)) {
    break label$1
   }
   if (HEAP32[$0 + 8 >> 2] < 1) {
    break label$1
   }
   $8 = $1 + 160 | 0;
   $11 = $1 + 96 | 0;
   $16 = $1 + 112 | 0;
   $17 = $1 + 128 | 0;
   $18 = $1 + 144 | 0;
   $4 = 0;
   $9 = 0;
   while (1) {
    $6 = HEAP32[$4 + HEAP32[$0 + 16 >> 2] >> 2];
    label$7 : {
     if (HEAPU8[$6 + 204 | 0] & 32) {
      break label$7
     }
     label$8 : {
      if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
       break label$8
      }
      $2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      if (!(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 56 >> 2]]($2) & 1)) {
       break label$8
      }
      HEAP32[$1 + 72 >> 2] = 1053609165;
      HEAP32[$1 + 76 >> 2] = 0;
      HEAP32[$1 + 64 >> 2] = 1053609165;
      HEAP32[$1 + 68 >> 2] = 1053609165;
      $2 = HEAP32[$6 + 220 >> 2] + -1 | 0;
      label$9 : {
       if ($2 >>> 0 <= 4) {
        label$11 : {
         switch ($2 - 1 | 0) {
         default:
          $2 = $1 + 88 | 0;
          $5 = HEAP32[$2 >> 2];
          $2 = HEAP32[$2 + 4 >> 2];
          $3 = $1 + 72 | 0;
          HEAP32[$3 >> 2] = $5;
          HEAP32[$3 + 4 >> 2] = $2;
          $3 = HEAP32[$1 + 84 >> 2];
          HEAP32[$1 + 64 >> 2] = HEAP32[$1 + 80 >> 2];
          HEAP32[$1 + 68 >> 2] = $3;
          break label$9;
         case 0:
          $2 = $11 + 8 | 0;
          $5 = HEAP32[$2 >> 2];
          $2 = HEAP32[$2 + 4 >> 2];
          $3 = $1 + 72 | 0;
          HEAP32[$3 >> 2] = $5;
          HEAP32[$3 + 4 >> 2] = $2;
          $2 = $11;
          $5 = HEAP32[$2 >> 2];
          $3 = HEAP32[$2 + 4 >> 2];
          HEAP32[$1 + 64 >> 2] = $5;
          HEAP32[$1 + 68 >> 2] = $3;
          break label$9;
         case 1:
          $2 = $16 + 8 | 0;
          $5 = HEAP32[$2 >> 2];
          $2 = HEAP32[$2 + 4 >> 2];
          $3 = $1 + 72 | 0;
          HEAP32[$3 >> 2] = $5;
          HEAP32[$3 + 4 >> 2] = $2;
          $2 = $16;
          $5 = HEAP32[$2 >> 2];
          $3 = HEAP32[$2 + 4 >> 2];
          HEAP32[$1 + 64 >> 2] = $5;
          HEAP32[$1 + 68 >> 2] = $3;
          break label$9;
         case 2:
          $2 = $17 + 8 | 0;
          $5 = HEAP32[$2 >> 2];
          $2 = HEAP32[$2 + 4 >> 2];
          $3 = $1 + 72 | 0;
          HEAP32[$3 >> 2] = $5;
          HEAP32[$3 + 4 >> 2] = $2;
          $2 = $17;
          $5 = HEAP32[$2 >> 2];
          $3 = HEAP32[$2 + 4 >> 2];
          HEAP32[$1 + 64 >> 2] = $5;
          HEAP32[$1 + 68 >> 2] = $3;
          break label$9;
         case 3:
          break label$11;
         };
        }
        $2 = $18 + 8 | 0;
        $5 = HEAP32[$2 >> 2];
        $2 = HEAP32[$2 + 4 >> 2];
        $3 = $1 + 72 | 0;
        HEAP32[$3 >> 2] = $5;
        HEAP32[$3 + 4 >> 2] = $2;
        $2 = $18;
        $5 = HEAP32[$2 >> 2];
        $3 = HEAP32[$2 + 4 >> 2];
        HEAP32[$1 + 64 >> 2] = $5;
        HEAP32[$1 + 68 >> 2] = $3;
        break label$9;
       }
       HEAP32[$1 + 72 >> 2] = 1050253722;
       HEAP32[$1 + 76 >> 2] = 0;
       HEAP32[$1 + 64 >> 2] = 1050253722;
       HEAP32[$1 + 68 >> 2] = 1050253722;
      }
      if (HEAP8[$6 + 205 | 0] & 1) {
       $2 = $6 + 316 | 0;
       $5 = HEAP32[$2 >> 2];
       $2 = HEAP32[$2 + 4 >> 2];
       $3 = $1 + 72 | 0;
       HEAP32[$3 >> 2] = $5;
       HEAP32[$3 + 4 >> 2] = $2;
       $3 = HEAP32[$6 + 312 >> 2];
       HEAP32[$1 + 64 >> 2] = HEAP32[$6 + 308 >> 2];
       HEAP32[$1 + 68 >> 2] = $3;
      }
      FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $6 + 4 | 0, HEAP32[$6 + 192 >> 2], $1 - -64 | 0);
     }
     $2 = HEAP32[$0 + 72 >> 2];
     if (!$2) {
      break label$7
     }
     if (!(FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 56 >> 2]]($2) & 2)) {
      break label$7
     }
     $2 = $8 + 8 | 0;
     $5 = HEAP32[$2 >> 2];
     $2 = HEAP32[$2 + 4 >> 2];
     $3 = $1 + 40 | 0;
     HEAP32[$3 >> 2] = $5;
     HEAP32[$3 + 4 >> 2] = $2;
     $2 = $8;
     $5 = HEAP32[$2 >> 2];
     $3 = HEAP32[$2 + 4 >> 2];
     HEAP32[$1 + 32 >> 2] = $5;
     HEAP32[$1 + 36 >> 2] = $3;
     $2 = HEAP32[$6 + 192 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $6 + 4 | 0, $1 - -64 | 0, $1 + 48 | 0);
     $7 = HEAPF32[744];
     HEAPF32[$1 + 64 >> 2] = HEAPF32[$1 + 64 >> 2] - $7;
     HEAPF32[$1 + 68 >> 2] = HEAPF32[$1 + 68 >> 2] - $7;
     HEAPF32[$1 + 72 >> 2] = HEAPF32[$1 + 72 >> 2] - $7;
     HEAPF32[$1 + 48 >> 2] = $7 + HEAPF32[$1 + 48 >> 2];
     HEAPF32[$1 + 52 >> 2] = $7 + HEAPF32[$1 + 52 >> 2];
     HEAPF32[$1 + 56 >> 2] = $7 + HEAPF32[$1 + 56 >> 2];
     label$17 : {
      if (!HEAPU8[$0 + 44 | 0]) {
       break label$17
      }
      if (HEAP32[$6 + 252 >> 2] != 2) {
       break label$17
      }
      if (HEAPU8[$6 + 204 | 0] & 3) {
       break label$17
      }
      $2 = HEAP32[$6 + 192 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 8 >> 2]]($2, $6 + 68 | 0, $1 + 16 | 0, $1);
      $10 = Math_fround(HEAPF32[$1 + 16 >> 2] - $7);
      HEAPF32[$1 + 16 >> 2] = $10;
      $12 = Math_fround(HEAPF32[$1 + 20 >> 2] - $7);
      HEAPF32[$1 + 20 >> 2] = $12;
      $13 = Math_fround(HEAPF32[$1 + 24 >> 2] - $7);
      HEAPF32[$1 + 24 >> 2] = $13;
      $14 = Math_fround($7 + HEAPF32[$1 >> 2]);
      HEAPF32[$1 >> 2] = $14;
      $15 = Math_fround($7 + HEAPF32[$1 + 4 >> 2]);
      HEAPF32[$1 + 4 >> 2] = $15;
      $7 = Math_fround($7 + HEAPF32[$1 + 8 >> 2]);
      HEAPF32[$1 + 8 >> 2] = $7;
      if (!!($10 < HEAPF32[$1 + 64 >> 2])) {
       HEAPF32[$1 + 64 >> 2] = $10
      }
      if (!!($12 < HEAPF32[$1 + 68 >> 2])) {
       HEAPF32[$1 + 68 >> 2] = $12
      }
      if (!!($13 < HEAPF32[$1 + 72 >> 2])) {
       HEAPF32[$1 + 72 >> 2] = $13
      }
      $10 = HEAPF32[$1 + 28 >> 2];
      if (!!($10 < HEAPF32[$1 + 76 >> 2])) {
       HEAPF32[$1 + 76 >> 2] = $10
      }
      if (!!(HEAPF32[$1 + 48 >> 2] < $14)) {
       HEAPF32[$1 + 48 >> 2] = $14
      }
      if (!!(HEAPF32[$1 + 52 >> 2] < $15)) {
       HEAPF32[$1 + 52 >> 2] = $15
      }
      if (!!(HEAPF32[$1 + 56 >> 2] < $7)) {
       HEAPF32[$1 + 56 >> 2] = $7
      }
      $7 = HEAPF32[$1 + 12 >> 2];
      if (!(HEAPF32[$1 + 60 >> 2] < $7)) {
       break label$17
      }
      HEAPF32[$1 + 60 >> 2] = $7;
     }
     $6 = HEAP32[$0 + 72 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 60 >> 2]]($6, $1 - -64 | 0, $1 + 48 | 0, $1 + 32 | 0);
    }
    $4 = $4 + 4 | 0;
    $9 = $9 + 1 | 0;
    if (($9 | 0) < HEAP32[$0 + 8 >> 2]) {
     continue
    }
    break;
   };
  }
  global$0 = $1 + 192 | 0;
 }
 
 function btCollisionWorld__serializeCollisionObjects_28btSerializer__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $2 = global$0 - 96 | 0;
  global$0 = $2;
  HEAP8[$2 + 52 | 0] = 1;
  HEAP32[$2 + 48 >> 2] = 0;
  HEAP8[$2 + 72 | 0] = 1;
  $5 = $2 + 40 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$2 + 68 >> 2] = 0;
  HEAP8[$2 + 92 | 0] = 1;
  $5 = $2 + 60 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$2 + 88 >> 2] = 0;
  $5 = $2 + 80 | 0;
  HEAP32[$5 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  HEAP8[$2 + 32 | 0] = 1;
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 24 >> 2] = 0;
  $7 = HEAP32[$0 + 8 >> 2];
  label$1 : {
   if (($7 | 0) < 1) {
    break label$1
   }
   $5 = 0;
   while (1) {
    $6 = HEAP32[HEAP32[HEAP32[$0 + 16 >> 2] + ($5 << 2) >> 2] + 192 >> 2];
    HEAP32[$2 + 12 >> 2] = $6;
    $4 = ($6 << 15 ^ -1) + $6 | 0;
    $4 = Math_imul($4 >>> 10 ^ $4, 9);
    $4 = $4 >>> 6 ^ $4;
    $4 = $4 + ($4 << 11 ^ -1) | 0;
    $4 = $8 + -1 & ($4 >>> 16 ^ $4);
    label$3 : {
     label$4 : {
      if ($4 >>> 0 >= $3 >>> 0) {
       break label$4
      }
      $3 = HEAP32[HEAP32[$2 + 28 >> 2] + ($4 << 2) >> 2];
      if (($3 | 0) == -1) {
       break label$4
      }
      $8 = HEAP32[$2 + 48 >> 2];
      $4 = HEAP32[$2 + 88 >> 2];
      while (1) {
       if (HEAP32[($3 << 3) + $4 >> 2] != ($6 | 0)) {
        $3 = HEAP32[($3 << 2) + $8 >> 2];
        if (($3 | 0) != -1) {
         continue
        }
        break label$4;
       }
       break;
      };
      if (HEAP32[$2 + 68 >> 2] + ($3 << 2)) {
       break label$3
      }
     }
     HEAP32[$2 >> 2] = $6;
     btHashMap_btHashPtr_2c_20btCollisionShape____insert_28btHashPtr_20const__2c_20btCollisionShape__20const__29($2 + 16 | 0, $2, $2 + 12 | 0);
     $3 = HEAP32[$2 + 12 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 60 >> 2]]($3, $1);
     $7 = HEAP32[$0 + 8 >> 2];
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($7 | 0)) {
     $3 = HEAP32[$2 + 20 >> 2];
     $8 = HEAP32[$2 + 64 >> 2];
     continue;
    }
    break;
   };
   if (($7 | 0) < 1) {
    break label$1
   }
   $3 = 0;
   $4 = 0;
   while (1) {
    $6 = HEAP32[$3 + HEAP32[$0 + 16 >> 2] >> 2];
    $8 = HEAP32[$6 + 252 >> 2];
    if (!(($8 | 0) != 1 ? ($8 | 0) != 64 : 0)) {
     FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 24 >> 2]]($6, $1);
     $7 = HEAP32[$0 + 8 >> 2];
    }
    $3 = $3 + 4 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) < ($7 | 0)) {
     continue
    }
    break;
   };
  }
  $3 = HEAP32[$2 + 88 >> 2];
  if ($3) {
   if (HEAPU8[$2 + 92 | 0]) {
    btAlignedFreeInternal_28void__29($3)
   }
   HEAP32[$2 + 88 >> 2] = 0;
  }
  HEAP32[$2 + 88 >> 2] = 0;
  HEAP8[$2 + 92 | 0] = 1;
  HEAP32[$2 + 80 >> 2] = 0;
  HEAP32[$2 + 84 >> 2] = 0;
  $3 = HEAP32[$2 + 68 >> 2];
  if ($3) {
   if (HEAPU8[$2 + 72 | 0]) {
    btAlignedFreeInternal_28void__29($3)
   }
   HEAP32[$2 + 68 >> 2] = 0;
  }
  HEAP32[$2 + 68 >> 2] = 0;
  HEAP8[$2 + 72 | 0] = 1;
  HEAP32[$2 + 60 >> 2] = 0;
  HEAP32[$2 + 64 >> 2] = 0;
  $3 = HEAP32[$2 + 48 >> 2];
  if ($3) {
   if (HEAPU8[$2 + 52 | 0]) {
    btAlignedFreeInternal_28void__29($3)
   }
   HEAP32[$2 + 48 >> 2] = 0;
  }
  HEAP32[$2 + 48 >> 2] = 0;
  HEAP8[$2 + 52 | 0] = 1;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 44 >> 2] = 0;
  $3 = HEAP32[$2 + 28 >> 2];
  if ($3) {
   if (HEAPU8[$2 + 32 | 0]) {
    btAlignedFreeInternal_28void__29($3)
   }
   HEAP32[$2 + 28 >> 2] = 0;
  }
  global$0 = $2 + 96 | 0;
 }
 
 function btHashMap_btHashPtr_2c_20btCollisionShape____insert_28btHashPtr_20const__2c_20btCollisionShape__20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  label$1 : {
   $8 = HEAP32[$0 + 48 >> 2];
   $4 = HEAP32[$1 >> 2];
   $3 = $4 + ($4 << 15 ^ -1) | 0;
   $3 = Math_imul($3 >>> 10 ^ $3, 9);
   $3 = $3 >>> 6 ^ $3;
   $3 = $3 + ($3 << 11 ^ -1) | 0;
   $9 = $8 + -1 & ($3 >>> 16 ^ $3);
   label$2 : {
    if ($9 >>> 0 >= HEAPU32[$0 + 4 >> 2]) {
     break label$2
    }
    $3 = HEAP32[HEAP32[$0 + 12 >> 2] + ($9 << 2) >> 2];
    if (($3 | 0) == -1) {
     break label$2
    }
    $6 = HEAP32[$0 + 72 >> 2];
    while (1) {
     if (($4 | 0) == HEAP32[($3 << 3) + $6 >> 2]) {
      break label$1
     }
     $3 = HEAP32[HEAP32[$0 + 32 >> 2] + ($3 << 2) >> 2];
     if (($3 | 0) != -1) {
      continue
     }
     break;
    };
   }
   $10 = HEAP32[$0 + 44 >> 2];
   $5 = $10;
   label$4 : {
    if (($8 | 0) != ($5 | 0)) {
     break label$4
    }
    $5 = $8;
    $7 = $5 ? $5 << 1 : 1;
    if (($5 | 0) >= ($7 | 0)) {
     break label$4
    }
    label$5 : {
     if (!$7) {
      $6 = 0;
      $5 = $8;
      break label$5;
     }
     $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 2);
     $5 = HEAP32[$0 + 44 >> 2];
    }
    if (($5 | 0) >= 1) {
     $3 = 0;
     $4 = $5;
     while (1) {
      HEAP32[$3 + $6 >> 2] = HEAP32[$3 + HEAP32[$0 + 52 >> 2] >> 2];
      $3 = $3 + 4 | 0;
      $4 = $4 + -1 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    $3 = HEAP32[$0 + 52 >> 2];
    if ($3) {
     if (HEAPU8[$0 + 56 | 0]) {
      btAlignedFreeInternal_28void__29($3);
      $5 = HEAP32[$0 + 44 >> 2];
     }
     HEAP32[$0 + 52 >> 2] = 0;
    }
    HEAP32[$0 + 52 >> 2] = $6;
    HEAP32[$0 + 48 >> 2] = $7;
    HEAP8[$0 + 56 | 0] = 1;
   }
   HEAP32[$0 + 44 >> 2] = $5 + 1;
   HEAP32[HEAP32[$0 + 52 >> 2] + ($5 << 2) >> 2] = HEAP32[$2 >> 2];
   $4 = HEAP32[$0 - -64 >> 2];
   label$11 : {
    if (($4 | 0) != HEAP32[$0 + 68 >> 2]) {
     break label$11
    }
    $5 = $4 ? $4 << 1 : 1;
    if (($4 | 0) >= ($5 | 0)) {
     break label$11
    }
    label$12 : {
     if (!$5) {
      $6 = 0;
      break label$12;
     }
     $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 3);
     $4 = HEAP32[$0 + 64 >> 2];
    }
    if (($4 | 0) >= 1) {
     $3 = 0;
     while (1) {
      $2 = $3 + HEAP32[$0 + 72 >> 2] | 0;
      $11 = HEAP32[$2 >> 2];
      $2 = HEAP32[$2 + 4 >> 2];
      $7 = $3 + $6 | 0;
      HEAP32[$7 >> 2] = $11;
      HEAP32[$7 + 4 >> 2] = $2;
      $3 = $3 + 8 | 0;
      $4 = $4 + -1 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    $3 = HEAP32[$0 + 72 >> 2];
    if ($3) {
     if (HEAPU8[$0 + 76 | 0]) {
      btAlignedFreeInternal_28void__29($3)
     }
     HEAP32[$0 + 72 >> 2] = 0;
    }
    HEAP32[$0 + 72 >> 2] = $6;
    HEAP32[$0 + 68 >> 2] = $5;
    HEAP8[$0 + 76 | 0] = 1;
    $4 = HEAP32[$0 + 64 >> 2];
   }
   $7 = HEAP32[$1 + 4 >> 2];
   $2 = HEAP32[$0 + 72 >> 2] + ($4 << 3) | 0;
   HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
   HEAP32[$2 + 4 >> 2] = $7;
   HEAP32[$0 + 64 >> 2] = HEAP32[$0 + 64 >> 2] + 1;
   if (($8 | 0) < HEAP32[$0 + 48 >> 2]) {
    btHashMap_btHashPtr_2c_20btCollisionShape____growTables_28btHashPtr_20const__29($0);
    $3 = HEAP32[$1 >> 2];
    $3 = $3 + ($3 << 15 ^ -1) | 0;
    $3 = Math_imul($3 >>> 10 ^ $3, 9);
    $3 = $3 >>> 6 ^ $3;
    $3 = $3 + ($3 << 11 ^ -1) | 0;
    $9 = HEAP32[$0 + 48 >> 2] + -1 & ($3 >>> 16 ^ $3);
   }
   $1 = HEAP32[$0 + 32 >> 2] + ($10 << 2) | 0;
   $0 = HEAP32[$0 + 12 >> 2] + ($9 << 2) | 0;
   HEAP32[$1 >> 2] = HEAP32[$0 >> 2];
   HEAP32[$0 >> 2] = $10;
   return;
  }
  HEAP32[HEAP32[$0 + 52 >> 2] + ($3 << 2) >> 2] = HEAP32[$2 >> 2];
 }
 
 function btHashMap_btHashPtr_2c_20btCollisionShape____growTables_28btHashPtr_20const__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $7 = HEAP32[$0 + 4 >> 2];
  $1 = HEAP32[$0 + 48 >> 2];
  label$1 : {
   if (($7 | 0) >= ($1 | 0)) {
    break label$1
   }
   label$2 : {
    if (HEAP32[$0 + 8 >> 2] >= ($1 | 0)) {
     $4 = HEAP32[$0 + 12 >> 2];
     break label$2;
    }
    if ($1) {
     $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 2);
     $2 = HEAP32[$0 + 4 >> 2];
    } else {
     $2 = $7
    }
    $6 = HEAP32[$0 + 12 >> 2];
    label$6 : {
     label$7 : {
      if (($2 | 0) >= 1) {
       $3 = $4;
       $5 = $6;
       while (1) {
        HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
        $3 = $3 + 4 | 0;
        $5 = $5 + 4 | 0;
        $2 = $2 + -1 | 0;
        if ($2) {
         continue
        }
        break;
       };
       break label$7;
      }
      if ($6) {
       break label$7
      }
      HEAP32[$0 + 12 >> 2] = $4;
      HEAP8[$0 + 16 | 0] = 1;
      break label$6;
     }
     if (HEAPU8[$0 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($6)
     }
     HEAP32[$0 + 12 >> 2] = $4;
     HEAP8[$0 + 16 | 0] = 1;
    }
    HEAP32[$0 + 8 >> 2] = $1;
   }
   $3 = $7 << 2;
   $2 = $3 + $4 | 0;
   $4 = $1 << 2;
   memset($2, 0, $4 - $3 | 0);
   HEAP32[$0 + 4 >> 2] = $1;
   $6 = HEAP32[$0 + 24 >> 2];
   if (($6 | 0) < ($1 | 0)) {
    label$12 : {
     if (HEAP32[$0 + 28 >> 2] >= ($1 | 0)) {
      $8 = HEAP32[$0 + 32 >> 2];
      break label$12;
     }
     if ($1) {
      $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4);
      $2 = HEAP32[$0 + 24 >> 2];
     } else {
      $2 = $6
     }
     $9 = HEAP32[$0 + 32 >> 2];
     label$16 : {
      if (($2 | 0) >= 1) {
       $3 = $8;
       $5 = $9;
       while (1) {
        HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
        $3 = $3 + 4 | 0;
        $5 = $5 + 4 | 0;
        $2 = $2 + -1 | 0;
        if ($2) {
         continue
        }
        break;
       };
       break label$16;
      }
      if ($9) {
       break label$16
      }
      HEAP32[$0 + 32 >> 2] = $8;
      HEAP32[$0 + 28 >> 2] = $1;
      HEAP8[$0 + 36 | 0] = 1;
      break label$12;
     }
     if (HEAPU8[$0 + 36 | 0]) {
      btAlignedFreeInternal_28void__29($9)
     }
     HEAP32[$0 + 32 >> 2] = $8;
     HEAP8[$0 + 36 | 0] = 1;
     HEAP32[$0 + 28 >> 2] = $1;
    }
    $3 = $6 << 2;
    memset($3 + $8 | 0, 0, $4 - $3 | 0);
   }
   HEAP32[$0 + 24 >> 2] = $1;
   if (($1 | 0) >= 1) {
    memset(HEAP32[$0 + 12 >> 2], 255, $4);
    memset(HEAP32[$0 + 32 >> 2], 255, $4);
   }
   if (($7 | 0) < 1) {
    break label$1
   }
   $3 = HEAP32[$0 + 32 >> 2];
   $5 = HEAP32[$0 + 72 >> 2];
   $4 = HEAP32[$0 + 12 >> 2];
   $2 = 0;
   while (1) {
    $1 = HEAP32[$5 >> 2];
    $1 = $1 + ($1 << 15 ^ -1) | 0;
    $1 = Math_imul($1 >>> 10 ^ $1, 9);
    $1 = $1 >>> 6 ^ $1;
    $1 = $1 + ($1 << 11 ^ -1) | 0;
    $1 = ((HEAP32[$0 + 48 >> 2] + -1 & ($1 >>> 16 ^ $1)) << 2) + $4 | 0;
    HEAP32[$3 >> 2] = HEAP32[$1 >> 2];
    HEAP32[$1 >> 2] = $2;
    $5 = $5 + 8 | 0;
    $3 = $3 + 4 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($7 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function btCollisionWorld__serialize_28btSerializer__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($1);
  btCollisionWorld__serializeCollisionObjects_28btSerializer__29($0, $1);
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1);
 }
 
 function btCollisionWorld__setDebugDrawer_28btIDebugDraw__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 72 >> 2] = $1;
 }
 
 function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__BridgeTriangleRaycastCallback__reportHit_28btVector3_20const__2c_20float_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0);
  $5 = global$0 - 48 | 0;
  global$0 = $5;
  HEAP32[$5 + 44 >> 2] = $4;
  HEAP32[$5 + 40 >> 2] = $3;
  $9 = HEAPF32[$0 - -64 >> 2];
  $10 = HEAPF32[$0 + 60 >> 2];
  $11 = HEAPF32[$0 + 80 >> 2];
  $12 = HEAPF32[$0 + 72 >> 2];
  $13 = HEAPF32[$0 + 76 >> 2];
  $14 = HEAPF32[$0 + 96 >> 2];
  $15 = HEAPF32[$0 + 88 >> 2];
  $16 = HEAPF32[$0 + 92 >> 2];
  $17 = HEAPF32[$0 + 56 >> 2];
  $6 = HEAPF32[$1 + 8 >> 2];
  $7 = HEAPF32[$1 >> 2];
  $8 = HEAPF32[$1 + 4 >> 2];
  HEAP32[$5 + 28 >> 2] = 0;
  HEAPF32[$5 + 24 >> 2] = Math_fround(Math_fround($7 * $15) + Math_fround($8 * $16)) + Math_fround($6 * $14);
  HEAPF32[$5 + 20 >> 2] = Math_fround(Math_fround($7 * $12) + Math_fround($8 * $13)) + Math_fround($6 * $11);
  HEAPF32[$5 + 16 >> 2] = Math_fround(Math_fround($17 * $7) + Math_fround($10 * $8)) + Math_fround($9 * $6);
  HEAPF32[$5 + 32 >> 2] = $2;
  HEAP32[$5 + 8 >> 2] = HEAP32[$0 + 48 >> 2];
  HEAP32[$5 + 12 >> 2] = $5 + 40;
  $0 = HEAP32[$0 + 44 >> 2];
  $6 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 12 >> 2]]($0, $5 + 8 | 0, 1));
  global$0 = $5 + 48 | 0;
  return Math_fround($6);
 }
 
 function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__RayTester__Process_28btDbvtNode_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0);
  $2 = global$0 - 128 | 0;
  global$0 = $2;
  $12 = HEAP32[$1 + 36 >> 2];
  $1 = HEAP32[HEAP32[$0 + 8 >> 2] + 28 >> 2] + Math_imul($12, 80) | 0;
  $25 = HEAP32[$1 + 64 >> 2];
  $13 = HEAPF32[$1 + 32 >> 2];
  $14 = HEAPF32[$1 >> 2];
  $15 = HEAPF32[$1 + 16 >> 2];
  $16 = HEAPF32[$1 + 56 >> 2];
  $17 = HEAPF32[$1 + 52 >> 2];
  $18 = HEAPF32[$1 + 48 >> 2];
  $19 = HEAPF32[$1 + 36 >> 2];
  $20 = HEAPF32[$1 + 20 >> 2];
  $21 = HEAPF32[$1 + 4 >> 2];
  $22 = HEAPF32[$1 + 40 >> 2];
  $23 = HEAPF32[$1 + 24 >> 2];
  $24 = HEAPF32[$1 + 8 >> 2];
  $1 = HEAP32[$0 + 12 >> 2];
  $26 = HEAPF32[$1 + 52 >> 2];
  $27 = HEAPF32[$1 + 56 >> 2];
  $3 = HEAPF32[$1 + 24 >> 2];
  $4 = HEAPF32[$1 + 20 >> 2];
  $5 = HEAPF32[$1 + 40 >> 2];
  $6 = HEAPF32[$1 + 36 >> 2];
  $28 = HEAPF32[$1 + 48 >> 2];
  $7 = HEAPF32[$1 + 8 >> 2];
  $8 = HEAPF32[$1 >> 2];
  $9 = HEAPF32[$1 + 4 >> 2];
  $10 = HEAPF32[$1 + 16 >> 2];
  $11 = HEAPF32[$1 + 32 >> 2];
  HEAP32[$2 + 124 >> 2] = 0;
  HEAP32[$2 + 108 >> 2] = 0;
  HEAP32[$2 + 92 >> 2] = 0;
  HEAPF32[$2 + 104 >> 2] = Math_fround(Math_fround($24 * $11) + Math_fround($23 * $6)) + Math_fround($22 * $5);
  HEAPF32[$2 + 100 >> 2] = Math_fround(Math_fround($21 * $11) + Math_fround($20 * $6)) + Math_fround($19 * $5);
  HEAPF32[$2 + 88 >> 2] = Math_fround(Math_fround($24 * $10) + Math_fround($23 * $4)) + Math_fround($22 * $3);
  HEAPF32[$2 + 84 >> 2] = Math_fround(Math_fround($21 * $10) + Math_fround($20 * $4)) + Math_fround($19 * $3);
  HEAPF32[$2 + 120 >> 2] = $27 + Math_fround(Math_fround(Math_fround($11 * $18) + Math_fround($6 * $17)) + Math_fround($5 * $16));
  HEAPF32[$2 + 116 >> 2] = $26 + Math_fround(Math_fround(Math_fround($10 * $18) + Math_fround($4 * $17)) + Math_fround($3 * $16));
  HEAP32[$2 + 76 >> 2] = 0;
  HEAPF32[$2 + 72 >> 2] = Math_fround(Math_fround($8 * $24) + Math_fround($9 * $23)) + Math_fround($7 * $22);
  HEAPF32[$2 + 68 >> 2] = Math_fround(Math_fround($8 * $21) + Math_fround($9 * $20)) + Math_fround($7 * $19);
  HEAPF32[$2 + 64 >> 2] = Math_fround(Math_fround($14 * $8) + Math_fround($15 * $9)) + Math_fround($13 * $7);
  HEAPF32[$2 + 112 >> 2] = $28 + Math_fround(Math_fround(Math_fround($8 * $18) + Math_fround($9 * $17)) + Math_fround($7 * $16));
  HEAPF32[$2 + 96 >> 2] = Math_fround(Math_fround($14 * $11) + Math_fround($15 * $6)) + Math_fround($13 * $5);
  HEAPF32[$2 + 80 >> 2] = Math_fround(Math_fround($14 * $10) + Math_fround($15 * $4)) + Math_fround($13 * $3);
  HEAP32[$2 + 60 >> 2] = $12;
  HEAP32[$2 + 56 >> 2] = -1;
  HEAP32[$2 + 44 >> 2] = $25;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP32[$2 + 48 >> 2] = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 52 >> 2] = $2 - -64;
  HEAP32[$2 + 12 >> 2] = 1065353216;
  HEAP32[$2 + 24 >> 2] = -1;
  HEAP32[$2 + 28 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 20 >> 2] = 1;
  HEAP32[$2 + 36 >> 2] = $12;
  HEAP32[$2 + 8 >> 2] = 21552;
  $1 = HEAP32[$0 + 24 >> 2];
  HEAP32[$2 + 32 >> 2] = $1;
  HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 20 >> 2];
  btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29(HEAP32[$0 + 16 >> 2], HEAP32[$0 + 20 >> 2], $2 + 40 | 0, $2 + 8 | 0);
  global$0 = $2 + 128 | 0;
 }
 
 function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__LocalInfoAdder2__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[$0 + 24 >> 2];
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1) | 0;
 }
 
 function btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__LocalInfoAdder2__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = Math_fround(0);
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = -1;
  HEAP32[$3 + 12 >> 2] = HEAP32[$0 + 28 >> 2];
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 4 >> 2] = $3 + 8
  }
  $4 = HEAP32[$0 + 24 >> 2];
  $5 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $1, $2));
  HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] + 4 >> 2];
  global$0 = $3 + 16 | 0;
  return Math_fround($5);
 }
 
 function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__BridgeTriangleConvexcastCallback__reportHit_28btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0;
  $6 = global$0 + -64 | 0;
  global$0 = $6;
  HEAP32[$6 + 60 >> 2] = $5;
  HEAP32[$6 + 56 >> 2] = $4;
  $4 = HEAP32[$0 + 212 >> 2];
  if (!!(HEAPF32[$4 + 4 >> 2] >= $3)) {
   $5 = $2 + 8 | 0;
   $8 = HEAP32[$5 >> 2];
   $7 = HEAP32[$5 + 4 >> 2];
   $5 = $6 + 40 | 0;
   HEAP32[$5 >> 2] = $8;
   HEAP32[$5 + 4 >> 2] = $7;
   $5 = $1 + 8 | 0;
   $8 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   $7 = $6 + 24 | 0;
   HEAP32[$7 >> 2] = $8;
   HEAP32[$7 + 4 >> 2] = $5;
   $5 = $2;
   $2 = HEAP32[$5 >> 2];
   $7 = HEAP32[$5 + 4 >> 2];
   HEAP32[$6 + 32 >> 2] = $2;
   HEAP32[$6 + 36 >> 2] = $7;
   $5 = $1;
   $1 = HEAP32[$5 >> 2];
   $5 = HEAP32[$5 + 4 >> 2];
   HEAP32[$6 + 16 >> 2] = $1;
   HEAP32[$6 + 20 >> 2] = $5;
   HEAPF32[$6 + 48 >> 2] = $3;
   HEAP32[$6 + 8 >> 2] = HEAP32[$0 + 216 >> 2];
   HEAP32[$6 + 12 >> 2] = $6 + 56;
   $3 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $6 + 8 | 0, 1));
  }
  global$0 = $6 - -64 | 0;
  return Math_fround($3);
 }
 
 function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback__Process_28btDbvtNode_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = 0;
  $2 = global$0 - 112 | 0;
  global$0 = $2;
  $12 = HEAP32[$1 + 36 >> 2];
  $1 = HEAP32[HEAP32[$0 + 24 >> 2] + 28 >> 2] + Math_imul($12, 80) | 0;
  $24 = HEAP32[$1 + 64 >> 2];
  $13 = HEAPF32[$1 + 32 >> 2];
  $14 = HEAPF32[$1 >> 2];
  $15 = HEAPF32[$1 + 16 >> 2];
  $16 = HEAPF32[$1 + 56 >> 2];
  $17 = HEAPF32[$1 + 52 >> 2];
  $18 = HEAPF32[$1 + 48 >> 2];
  $19 = HEAPF32[$1 + 36 >> 2];
  $20 = HEAPF32[$1 + 20 >> 2];
  $21 = HEAPF32[$1 + 4 >> 2];
  $22 = HEAPF32[$1 + 40 >> 2];
  $3 = HEAPF32[$1 + 24 >> 2];
  $4 = HEAPF32[$1 + 8 >> 2];
  HEAP32[$2 + 108 >> 2] = 0;
  HEAP32[$2 + 92 >> 2] = 0;
  HEAP32[$2 + 76 >> 2] = 0;
  $1 = HEAP32[$0 + 28 >> 2];
  $5 = HEAPF32[$1 + 32 >> 2];
  $6 = HEAPF32[$1 + 36 >> 2];
  $7 = HEAPF32[$1 + 40 >> 2];
  HEAPF32[$2 + 88 >> 2] = Math_fround(Math_fround($4 * $5) + Math_fround($3 * $6)) + Math_fround($22 * $7);
  HEAPF32[$2 + 84 >> 2] = Math_fround(Math_fround($21 * $5) + Math_fround($20 * $6)) + Math_fround($19 * $7);
  $8 = HEAPF32[$1 + 16 >> 2];
  $9 = HEAPF32[$1 + 20 >> 2];
  $10 = HEAPF32[$1 + 24 >> 2];
  HEAPF32[$2 + 72 >> 2] = Math_fround(Math_fround($4 * $8) + Math_fround($3 * $9)) + Math_fround($22 * $10);
  HEAPF32[$2 + 68 >> 2] = Math_fround(Math_fround($21 * $8) + Math_fround($20 * $9)) + Math_fround($19 * $10);
  HEAPF32[$2 + 104 >> 2] = Math_fround(Math_fround(Math_fround($18 * $5) + Math_fround($17 * $6)) + Math_fround($16 * $7)) + HEAPF32[$1 + 56 >> 2];
  HEAPF32[$2 + 100 >> 2] = Math_fround(Math_fround(Math_fround($18 * $8) + Math_fround($17 * $9)) + Math_fround($16 * $10)) + HEAPF32[$1 + 52 >> 2];
  HEAP32[$2 + 60 >> 2] = 0;
  $11 = HEAPF32[$1 >> 2];
  $23 = Math_fround($4 * $11);
  $4 = HEAPF32[$1 + 4 >> 2];
  $23 = Math_fround($23 + Math_fround($3 * $4));
  $3 = HEAPF32[$1 + 8 >> 2];
  HEAPF32[$2 + 56 >> 2] = $23 + Math_fround($22 * $3);
  HEAPF32[$2 + 52 >> 2] = Math_fround(Math_fround($21 * $11) + Math_fround($20 * $4)) + Math_fround($19 * $3);
  HEAPF32[$2 + 48 >> 2] = Math_fround(Math_fround($14 * $11) + Math_fround($15 * $4)) + Math_fround($13 * $3);
  HEAPF32[$2 + 96 >> 2] = Math_fround(Math_fround(Math_fround($18 * $11) + Math_fround($17 * $4)) + Math_fround($16 * $3)) + HEAPF32[$1 + 48 >> 2];
  HEAPF32[$2 + 80 >> 2] = Math_fround(Math_fround($14 * $5) + Math_fround($15 * $6)) + Math_fround($13 * $7);
  HEAPF32[$2 + 64 >> 2] = Math_fround(Math_fround($14 * $8) + Math_fround($15 * $9)) + Math_fround($13 * $10);
  HEAP32[$2 + 28 >> 2] = 1065353216;
  HEAP32[$2 + 32 >> 2] = 1;
  HEAP32[$2 + 36 >> 2] = -1;
  HEAP32[$2 + 44 >> 2] = $12;
  HEAP32[$2 + 24 >> 2] = 22368;
  $1 = HEAP32[$0 + 32 >> 2];
  HEAP32[$2 + 40 >> 2] = $1;
  HEAP32[$2 + 28 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 + 20 >> 2] = $12;
  HEAP32[$2 + 16 >> 2] = -1;
  HEAP32[$2 + 4 >> 2] = $24;
  $1 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 >> 2] = $1;
  HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$2 + 12 >> 2] = $2 + 48;
  btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], HEAP32[$0 + 16 >> 2], $2, $2 + 24 | 0, HEAPF32[$0 + 20 >> 2]);
  global$0 = $2 + 112 | 0;
 }
 
 function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback__ProcessChild_28int_2c_20btTransform_20const__2c_20btCollisionShape_20const__29__LocalInfoAdder__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = HEAP32[$0 + 16 >> 2];
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1) | 0;
 }
 
 function btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback__ProcessChild_28int_2c_20btTransform_20const__2c_20btCollisionShape_20const__29__LocalInfoAdder__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = Math_fround(0);
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = -1;
  HEAP32[$3 + 12 >> 2] = HEAP32[$0 + 20 >> 2];
  if (!HEAP32[$1 + 4 >> 2]) {
   HEAP32[$1 + 4 >> 2] = $3 + 8
  }
  $4 = HEAP32[$0 + 16 >> 2];
  $5 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $1, $2));
  HEAP32[$0 + 4 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] + 4 >> 2];
  global$0 = $3 + 16 | 0;
  return Math_fround($5);
 }
 
 function btSingleRayCallback__process_28btBroadphaseProxy_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  $3 = HEAP32[$0 + 216 >> 2];
  label$1 : {
   if (HEAPF32[$3 + 4 >> 2] == Math_fround(0.0)) {
    break label$1
   }
   $4 = 1;
   $1 = HEAP32[$1 >> 2];
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, HEAP32[$1 + 188 >> 2])) {
    break label$1
   }
   $3 = HEAP32[$0 + 216 >> 2];
   $5 = HEAP32[$1 + 192 >> 2];
   HEAP32[$2 + 24 >> 2] = -1;
   HEAP32[$2 + 28 >> 2] = -1;
   HEAP32[$2 + 20 >> 2] = $1 + 4;
   HEAP32[$2 + 16 >> 2] = $1;
   HEAP32[$2 + 12 >> 2] = $5;
   HEAP32[$2 + 8 >> 2] = 0;
   btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29($0 + 68 | 0, $0 + 132 | 0, $2 + 8 | 0, $3);
  }
  global$0 = $2 + 32 | 0;
  return $4 | 0;
 }
 
 function btSingleSweepCallback__process_28btBroadphaseProxy_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0;
  $2 = global$0 - 32 | 0;
  global$0 = $2;
  $3 = HEAP32[$0 + 184 >> 2];
  label$1 : {
   if (HEAPF32[$3 + 4 >> 2] == Math_fround(0.0)) {
    break label$1
   }
   $4 = 1;
   $1 = HEAP32[$1 >> 2];
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, HEAP32[$1 + 188 >> 2])) {
    break label$1
   }
   $5 = HEAPF32[$0 + 188 >> 2];
   $3 = HEAP32[$0 + 184 >> 2];
   $6 = HEAP32[$0 + 192 >> 2];
   $7 = HEAP32[$1 + 192 >> 2];
   HEAP32[$2 + 24 >> 2] = -1;
   HEAP32[$2 + 28 >> 2] = -1;
   HEAP32[$2 + 20 >> 2] = $1 + 4;
   HEAP32[$2 + 16 >> 2] = $1;
   HEAP32[$2 + 12 >> 2] = $7;
   HEAP32[$2 + 8 >> 2] = 0;
   btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29($6, $0 + 36 | 0, $0 + 100 | 0, $2 + 8 | 0, $3, $5);
  }
  global$0 = $2 + 32 | 0;
  return $4 | 0;
 }
 
 function DebugDrawcallback__processTriangle_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0);
  $2 = global$0 - 96 | 0;
  global$0 = $2;
  HEAP32[$2 + 92 >> 2] = 0;
  $5 = HEAPF32[$1 >> 2];
  $13 = HEAPF32[$0 + 60 >> 2];
  $4 = HEAPF32[$1 + 4 >> 2];
  $14 = HEAPF32[$0 - -64 >> 2];
  $6 = HEAPF32[$1 + 8 >> 2];
  $15 = HEAPF32[$0 + 68 >> 2];
  $8 = HEAPF32[$0 + 84 >> 2];
  $9 = Math_fround(Math_fround(Math_fround(Math_fround($5 * $13) + Math_fround($4 * $14)) + Math_fround($6 * $15)) + $8);
  HEAPF32[$2 + 88 >> 2] = $9;
  $16 = HEAPF32[$0 + 44 >> 2];
  $17 = HEAPF32[$0 + 48 >> 2];
  $20 = HEAPF32[$0 + 52 >> 2];
  $21 = HEAPF32[$0 + 80 >> 2];
  $18 = Math_fround(Math_fround(Math_fround(Math_fround($5 * $16) + Math_fround($4 * $17)) + Math_fround($6 * $20)) + $21);
  HEAPF32[$2 + 84 >> 2] = $18;
  $10 = HEAPF32[$0 + 28 >> 2];
  $7 = Math_fround($5 * $10);
  $5 = HEAPF32[$0 + 32 >> 2];
  $7 = Math_fround($7 + Math_fround($4 * $5));
  $4 = HEAPF32[$0 + 36 >> 2];
  $7 = Math_fround($7 + Math_fround($6 * $4));
  $6 = HEAPF32[$0 + 76 >> 2];
  $19 = Math_fround($7 + $6);
  HEAPF32[$2 + 80 >> 2] = $19;
  HEAP32[$2 + 76 >> 2] = 0;
  HEAP32[$2 + 60 >> 2] = 0;
  $11 = HEAPF32[$1 + 16 >> 2];
  $12 = HEAPF32[$1 + 20 >> 2];
  $7 = HEAPF32[$1 + 24 >> 2];
  $22 = Math_fround($6 + Math_fround(Math_fround(Math_fround($10 * $11) + Math_fround($5 * $12)) + Math_fround($4 * $7)));
  HEAPF32[$2 + 64 >> 2] = $22;
  $23 = Math_fround($21 + Math_fround(Math_fround(Math_fround($16 * $11) + Math_fround($17 * $12)) + Math_fround($20 * $7)));
  HEAPF32[$2 + 68 >> 2] = $23;
  $12 = Math_fround($8 + Math_fround(Math_fround(Math_fround($13 * $11) + Math_fround($14 * $12)) + Math_fround($15 * $7)));
  HEAPF32[$2 + 72 >> 2] = $12;
  $11 = HEAPF32[$1 + 32 >> 2];
  $7 = Math_fround($10 * $11);
  $10 = HEAPF32[$1 + 36 >> 2];
  $7 = Math_fround($7 + Math_fround($5 * $10));
  $5 = HEAPF32[$1 + 40 >> 2];
  $4 = Math_fround($6 + Math_fround($7 + Math_fround($4 * $5)));
  HEAPF32[$2 + 48 >> 2] = $4;
  $6 = Math_fround($21 + Math_fround(Math_fround(Math_fround($16 * $11) + Math_fround($17 * $10)) + Math_fround($20 * $5)));
  HEAPF32[$2 + 52 >> 2] = $6;
  $5 = Math_fround($8 + Math_fround(Math_fround(Math_fround($13 * $11) + Math_fround($14 * $10)) + Math_fround($15 * $5)));
  HEAPF32[$2 + 56 >> 2] = $5;
  HEAP32[$2 + 44 >> 2] = 0;
  $13 = Math_fround(Math_fround(Math_fround($9 + $12) + $5) * Math_fround(.3333333432674408));
  HEAPF32[$2 + 40 >> 2] = $13;
  $14 = Math_fround(Math_fround(Math_fround($18 + $23) + $6) * Math_fround(.3333333432674408));
  HEAPF32[$2 + 36 >> 2] = $14;
  $15 = Math_fround(Math_fround(Math_fround($19 + $22) + $4) * Math_fround(.3333333432674408));
  HEAPF32[$2 + 32 >> 2] = $15;
  $1 = HEAP32[$0 + 8 >> 2];
  if (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 56 >> 2]]($1) & 16384) {
   $8 = HEAPF32[$2 + 80 >> 2];
   HEAP32[$2 + 24 >> 2] = 0;
   HEAP32[$2 + 28 >> 2] = 0;
   HEAP32[$2 + 16 >> 2] = 1065353216;
   HEAP32[$2 + 20 >> 2] = 1065353216;
   $1 = HEAP32[$0 + 8 >> 2];
   HEAP32[$2 + 12 >> 2] = 0;
   $16 = Math_fround($22 - $8);
   $6 = Math_fround($6 - $18);
   $17 = Math_fround($23 - $18);
   $8 = Math_fround($4 - $8);
   $4 = Math_fround(Math_fround($16 * $6) - Math_fround($17 * $8));
   $7 = $4;
   $19 = Math_fround($4 * $4);
   $4 = Math_fround($5 - $9);
   $9 = Math_fround($12 - $9);
   $5 = Math_fround(Math_fround($17 * $4) - Math_fround($9 * $6));
   $4 = Math_fround(Math_fround($9 * $8) - Math_fround($16 * $4));
   $6 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround($19 + Math_fround(Math_fround($5 * $5) + Math_fround($4 * $4))))));
   HEAPF32[$2 + 8 >> 2] = Math_fround($7 * $6) + $13;
   HEAPF32[$2 + 4 >> 2] = $14 + Math_fround($4 * $6);
   HEAPF32[$2 >> 2] = $15 + Math_fround($5 * $6);
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, $2 + 32 | 0, $2, $2 + 16 | 0);
  }
  $3 = HEAP32[$0 + 8 >> 2];
  $1 = $0 + 12 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $2 + 80 | 0, $2 - -64 | 0, $1);
  $3 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 16 >> 2]]($3, $2 - -64 | 0, $2 + 48 | 0, $1);
  $0 = HEAP32[$0 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $2 + 48 | 0, $2 + 80 | 0, $1);
  global$0 = $2 + 96 | 0;
 }
 
 function DebugDrawcallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, $2, $3);
 }
 
 function non_virtual_20thunk_20to_20DebugDrawcallback___DebugDrawcallback_28_29($0) {
  $0 = $0 | 0;
  return $0 + -4 | 0;
 }
 
 function non_virtual_20thunk_20to_20DebugDrawcallback___DebugDrawcallback_28_29_1($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29($0 + -4 | 0);
 }
 
 function non_virtual_20thunk_20to_20DebugDrawcallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = $0 + -4 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1, $2, $3);
 }
 
 function btUnionFind___btUnionFind_28_29($0) {
  var $1 = 0;
  $1 = HEAP32[$0 + 12 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 16 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 12 >> 2] = 0;
  }
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
 }
 
 function btUnionFind__reset_28int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = HEAP32[$0 + 4 >> 2];
  if (($5 | 0) < ($1 | 0)) {
   if (HEAP32[$0 + 8 >> 2] < ($1 | 0)) {
    label$3 : {
     if (!$1) {
      $3 = $5;
      break label$3;
     }
     $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($1 << 3);
     $3 = HEAP32[$0 + 4 >> 2];
    }
    if (($3 | 0) >= 1) {
     while (1) {
      $6 = $2 + HEAP32[$0 + 12 >> 2] | 0;
      $8 = HEAP32[$6 >> 2];
      $6 = HEAP32[$6 + 4 >> 2];
      $4 = $2 + $7 | 0;
      HEAP32[$4 >> 2] = $8;
      HEAP32[$4 + 4 >> 2] = $6;
      $2 = $2 + 8 | 0;
      $3 = $3 + -1 | 0;
      if ($3) {
       continue
      }
      break;
     }
    }
    $2 = HEAP32[$0 + 12 >> 2];
    if ($2) {
     if (HEAPU8[$0 + 16 | 0]) {
      btAlignedFreeInternal_28void__29($2)
     }
     HEAP32[$0 + 12 >> 2] = 0;
    }
    HEAP32[$0 + 12 >> 2] = $7;
    HEAP8[$0 + 16 | 0] = 1;
    HEAP32[$0 + 8 >> 2] = $1;
   }
   $2 = $5 << 3;
   $3 = $1 - $5 | 0;
   while (1) {
    $4 = $2 + HEAP32[$0 + 12 >> 2] | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $2 = $2 + 8 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 4 >> 2] = $1;
  if (($1 | 0) >= 1) {
   $2 = HEAP32[$0 + 12 >> 2];
   $3 = 0;
   while (1) {
    HEAP32[$2 >> 2] = $3;
    HEAP32[$2 + 4 >> 2] = 1;
    $2 = $2 + 8 | 0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function btUnionFind__sortIslands_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = global$0 - 16 | 0;
  global$0 = $4;
  $2 = HEAP32[$0 + 4 >> 2];
  label$1 : {
   if (($2 | 0) <= 0) {
    break label$1
   }
   $5 = HEAP32[$0 + 12 >> 2];
   while (1) {
    $1 = $6;
    $7 = ($1 << 3) + $5 | 0;
    $3 = HEAP32[$7 >> 2];
    if (($3 | 0) != ($1 | 0)) {
     $8 = $7;
     while (1) {
      $1 = ($3 << 3) + $5 | 0;
      HEAP32[$8 >> 2] = HEAP32[$1 >> 2];
      $1 = HEAP32[$1 >> 2];
      $8 = ($1 << 3) + $5 | 0;
      $3 = HEAP32[$8 >> 2];
      if (($1 | 0) != ($3 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[$7 >> 2] = $1;
    $6 = $6 + 1 | 0;
    if (($2 | 0) != ($6 | 0)) {
     continue
    }
    break;
   };
   if (($2 | 0) < 2) {
    break label$1
   }
   void_20btAlignedObjectArray_btElement___quickSortInternal_btUnionFindElementSortPredicate__28btUnionFindElementSortPredicate_20const__2c_20int_2c_20int_29($0, $4 + 8 | 0, 0, $2 + -1 | 0);
  }
  global$0 = $4 + 16 | 0;
 }
 
 function void_20btAlignedObjectArray_btElement___quickSortInternal_btUnionFindElementSortPredicate__28btUnionFindElementSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  while (1) {
   $8 = HEAP32[$0 + 12 >> 2];
   $11 = $2;
   $12 = HEAP32[$8 + (($3 + $2 | 0) / 2 << 3) >> 2];
   $6 = $2;
   $7 = $3;
   while (1) {
    $5 = (($6 << 3) + $8 | 0) + -8 | 0;
    while (1) {
     $6 = $6 + 1 | 0;
     $5 = $5 + 8 | 0;
     if (HEAP32[$5 >> 2] < ($12 | 0)) {
      continue
     }
     break;
    };
    $2 = $6 + -1 | 0;
    $4 = ($7 << 3) + 8 | 0;
    while (1) {
     $7 = $7 + -1 | 0;
     $9 = $4 + $8 | 0;
     $10 = $4 + -8 | 0;
     $4 = $10;
     if (HEAP32[$9 + -8 >> 2] > ($12 | 0)) {
      continue
     }
     break;
    };
    $4 = $7 + 1 | 0;
    if (($2 | 0) <= ($4 | 0)) {
     $13 = HEAP32[$5 >> 2];
     $2 = HEAP32[$5 + 4 >> 2];
     $4 = $8 + $10 | 0;
     $9 = HEAP32[$4 >> 2];
     $4 = HEAP32[$4 + 4 >> 2];
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $5 = $10 + HEAP32[$0 + 12 >> 2] | 0;
     HEAP32[$5 >> 2] = $13;
     HEAP32[$5 + 4 >> 2] = $2;
     $4 = $7;
     $2 = $6;
    }
    if (($2 | 0) <= ($4 | 0)) {
     $8 = HEAP32[$0 + 12 >> 2];
     $6 = $2;
     $7 = $4;
     continue;
    }
    break;
   };
   if (($4 | 0) > ($11 | 0)) {
    void_20btAlignedObjectArray_btElement___quickSortInternal_btUnionFindElementSortPredicate__28btUnionFindElementSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $11, $4)
   }
   if (($2 | 0) < ($3 | 0)) {
    continue
   }
   break;
  };
 }
 
 function btSimulationIslandManager__btSimulationIslandManager_28_29($0) {
  var $1 = 0;
  HEAP32[$0 >> 2] = 22908;
  $1 = $0 + 4 | 0;
  HEAP32[$1 + 12 >> 2] = 0;
  HEAP8[$1 + 16 | 0] = 1;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = $0 + 28 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 + 64 | 0] = 1;
  $1 = $0 + 48 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
 }
 
 function btSimulationIslandManager___btSimulationIslandManager_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 22908;
  $1 = HEAP32[$0 + 56 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 60 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = HEAP32[$0 + 36 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 40 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  btUnionFind___btUnionFind_28_29($0 + 4 | 0);
  return $0 | 0;
 }
 
 function btSimulationIslandManager___btSimulationIslandManager_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 22908;
  $1 = HEAP32[$0 + 56 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 60 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 56 >> 2] = 0;
  }
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 48 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP8[$0 + 60 | 0] = 1;
  $1 = HEAP32[$0 + 36 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 40 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  btUnionFind___btUnionFind_28_29($0 + 4 | 0);
  operator_20delete_28void__29($0);
 }
 
 function btSimulationIslandManager__findUnions_28btDispatcher__2c_20btCollisionWorld__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $1 = HEAP32[$1 + 68 >> 2];
  $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
  $6 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
  label$1 : {
   if (!$6) {
    break label$1
   }
   $8 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1) | 0;
   if (($6 | 0) < 1) {
    break label$1
   }
   while (1) {
    $1 = ($7 << 4) + $8 | 0;
    $2 = HEAP32[HEAP32[$1 >> 2] >> 2];
    label$3 : {
     if (!$2) {
      break label$3
     }
     $1 = HEAP32[HEAP32[$1 + 4 >> 2] >> 2];
     if (!$1) {
      break label$3
     }
     if (HEAP32[$2 + 204 >> 2] & 7) {
      break label$3
     }
     if (HEAPU8[$1 + 204 | 0] & 7) {
      break label$3
     }
     $3 = HEAP32[$1 + 208 >> 2];
     $1 = HEAP32[$0 + 16 >> 2];
     $2 = HEAP32[$2 + 208 >> 2];
     $4 = $1 + ($2 << 3) | 0;
     $5 = HEAP32[$4 >> 2];
     if (($5 | 0) != ($2 | 0)) {
      while (1) {
       $2 = ($5 << 3) + $1 | 0;
       HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
       $2 = HEAP32[$2 >> 2];
       $4 = ($2 << 3) + $1 | 0;
       $5 = HEAP32[$4 >> 2];
       if (($2 | 0) != ($5 | 0)) {
        continue
       }
       break;
      }
     }
     $4 = ($3 << 3) + $1 | 0;
     $5 = HEAP32[$4 >> 2];
     if (($5 | 0) != ($3 | 0)) {
      while (1) {
       $3 = ($5 << 3) + $1 | 0;
       HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
       $3 = HEAP32[$3 >> 2];
       $4 = ($3 << 3) + $1 | 0;
       $5 = HEAP32[$4 >> 2];
       if (($3 | 0) != ($5 | 0)) {
        continue
       }
       break;
      }
     }
     if (($2 | 0) == ($3 | 0)) {
      break label$3
     }
     $2 = ($2 << 3) + $1 | 0;
     HEAP32[$2 >> 2] = $3;
     $1 = ($3 << 3) + $1 | 0;
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + HEAP32[$2 + 4 >> 2];
    }
    $7 = $7 + 1 | 0;
    if (($6 | 0) != ($7 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function btSimulationIslandManager__updateActivationState_28btCollisionWorld__2c_20btDispatcher__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = HEAP32[$1 + 8 >> 2];
  label$1 : {
   if (($5 | 0) < 1) {
    $2 = 0;
    break label$1;
   }
   $4 = HEAP32[$1 + 16 >> 2];
   $2 = 0;
   while (1) {
    $3 = HEAP32[$4 >> 2];
    if (!(HEAPU8[$3 + 204 | 0] & 3)) {
     HEAP32[$3 + 208 >> 2] = $2;
     $2 = $2 + 1 | 0;
    }
    HEAP32[$3 + 268 >> 2] = 1065353216;
    HEAP32[$3 + 212 >> 2] = -1;
    $4 = $4 + 4 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) < ($5 | 0)) {
     continue
    }
    break;
   };
  }
  btUnionFind__reset_28int_29($0 + 4 | 0, $2);
  btSimulationIslandManager__findUnions_28btDispatcher__2c_20btCollisionWorld__29($0, $1);
 }
 
 function btSimulationIslandManager__storeIslandActivationState_28btCollisionWorld__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $7 = HEAP32[$1 + 8 >> 2];
  if (($7 | 0) >= 1) {
   $10 = HEAP32[$1 + 16 >> 2];
   while (1) {
    $3 = HEAP32[($4 << 2) + $10 >> 2];
    label$3 : {
     if (!(HEAPU8[$3 + 204 | 0] & 3)) {
      $2 = $8;
      $1 = HEAP32[$0 + 16 >> 2];
      $9 = $2 << 3;
      $5 = $1 + $9 | 0;
      $6 = HEAP32[$5 >> 2];
      if (($6 | 0) != ($2 | 0)) {
       while (1) {
        $2 = ($6 << 3) + $1 | 0;
        HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
        $2 = HEAP32[$2 >> 2];
        $5 = ($2 << 3) + $1 | 0;
        $6 = HEAP32[$5 >> 2];
        if (($2 | 0) != ($6 | 0)) {
         continue
        }
        break;
       }
      }
      HEAP32[$3 + 208 >> 2] = $2;
      HEAP32[$3 + 212 >> 2] = -1;
      HEAP32[($1 + $9 | 0) + 4 >> 2] = $4;
      $8 = $8 + 1 | 0;
      break label$3;
     }
     HEAP32[$3 + 208 >> 2] = -1;
     HEAP32[$3 + 212 >> 2] = -2;
    }
    $4 = $4 + 1 | 0;
    if (($4 | 0) < ($7 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function btSimulationIslandManager__buildIslands_28btDispatcher__2c_20btCollisionWorld__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $12 = global$0 - 16 | 0;
  global$0 = $12;
  CProfileSample__CProfileSample_28char_20const__29($12 + 8 | 0, 22924);
  $3 = HEAP32[$0 + 28 >> 2];
  if (($3 | 0) <= -1) {
   if (HEAP32[$0 + 32 >> 2] <= -1) {
    $7 = HEAP32[$0 + 36 >> 2];
    if ($7) {
     if (HEAPU8[$0 + 40 | 0]) {
      btAlignedFreeInternal_28void__29($7)
     }
     HEAP32[$0 + 36 >> 2] = 0;
    }
    HEAP32[$0 + 32 >> 2] = 0;
    HEAP32[$0 + 36 >> 2] = 0;
    HEAP8[$0 + 40 | 0] = 1;
   }
   $7 = $3 << 2;
   while (1) {
    HEAP32[$7 + HEAP32[$0 + 36 >> 2] >> 2] = 0;
    $7 = $7 + 4 | 0;
    $6 = $3 + 1 | 0;
    $9 = $6 >>> 0 >= $3 >>> 0;
    $3 = $6;
    if ($9) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 28 >> 2] = 0;
  btUnionFind__sortIslands_28_29($0 + 4 | 0);
  $10 = HEAP32[$0 + 8 >> 2];
  if (($10 | 0) >= 1) {
   $9 = 0;
   while (1) {
    $11 = HEAP32[$0 + 16 >> 2];
    $4 = $9;
    $13 = $4 << 3;
    $5 = $11 + $13 | 0;
    $3 = $5 + 8 | 0;
    $6 = HEAP32[$5 >> 2];
    while (1) {
     $7 = $9;
     $9 = $7 + 1 | 0;
     if (($9 | 0) < ($10 | 0)) {
      $8 = HEAP32[$3 >> 2];
      $3 = $3 + 8 | 0;
      if (($6 | 0) == ($8 | 0)) {
       continue
      }
     }
     break;
    };
    label$10 : {
     $14 = ($4 | 0) > ($7 | 0);
     if ($14) {
      break label$10
     }
     $8 = $4 + -1 | 0;
     $3 = $5 + 4 | 0;
     $16 = HEAP32[$2 + 16 >> 2];
     $15 = 1;
     while (1) {
      $5 = HEAP32[(HEAP32[$3 >> 2] << 2) + $16 >> 2];
      if (HEAP32[$5 + 208 >> 2] == ($6 | 0)) {
       $5 = HEAP32[$5 + 220 >> 2];
       $15 = ($5 | 0) != 4 & (($5 | 0) != 1 & $15);
      }
      $3 = $3 + 8 | 0;
      $8 = $8 + 1 | 0;
      if (($8 | 0) < ($7 | 0)) {
       continue
      }
      break;
     };
     if (!$15) {
      if ($14) {
       break label$10
      }
      $3 = $13 | 4;
      while (1) {
       $8 = HEAP32[HEAP32[$2 + 16 >> 2] + (HEAP32[$3 + $11 >> 2] << 2) >> 2];
       label$15 : {
        if (($6 | 0) != HEAP32[$8 + 208 >> 2]) {
         break label$15
        }
        if (HEAP32[$8 + 220 >> 2] != 2) {
         break label$15
        }
        btCollisionObject__setActivationState_28int_29_20const($8, 3);
        HEAP32[$8 + 224 >> 2] = 0;
       }
       if (($4 | 0) >= ($7 | 0)) {
        break label$10
       }
       $3 = $3 + 8 | 0;
       $4 = $4 + 1 | 0;
       $11 = HEAP32[$0 + 16 >> 2];
       continue;
      };
     }
     if ($14) {
      break label$10
     }
     $3 = $13 | 4;
     while (1) {
      $8 = HEAP32[HEAP32[$2 + 16 >> 2] + (HEAP32[$3 + $11 >> 2] << 2) >> 2];
      if (HEAP32[$8 + 208 >> 2] == ($6 | 0)) {
       btCollisionObject__setActivationState_28int_29_20const($8, 2)
      }
      if (($4 | 0) >= ($7 | 0)) {
       break label$10
      }
      $3 = $3 + 8 | 0;
      $4 = $4 + 1 | 0;
      $11 = HEAP32[$0 + 16 >> 2];
      continue;
     };
    }
    if (($9 | 0) < ($10 | 0)) {
     continue
    }
    break;
   };
  }
  $8 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
  if (($8 | 0) >= 1) {
   $7 = 0;
   while (1) {
    $9 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 40 >> 2]]($1, $7) | 0;
    $3 = HEAP32[$9 + 776 >> 2];
    label$20 : {
     label$21 : {
      label$22 : {
       label$23 : {
        $6 = HEAP32[$9 + 772 >> 2];
        if (!$6) {
         break label$23
        }
        if (HEAP32[$6 + 220 >> 2] == 2) {
         break label$23
        }
        $4 = HEAP32[$6 + 204 >> 2];
        if ($4 & 2) {
         break label$22
        }
        break label$21;
       }
       if (!$3) {
        break label$20
       }
       if (HEAP32[$3 + 220 >> 2] == 2) {
        break label$20
       }
       $4 = HEAP32[$6 + 204 >> 2];
       if (!($4 & 2)) {
        break label$21
       }
       if (HEAP32[$6 + 220 >> 2] == 2) {
        break label$21
       }
      }
      if ($4 & 4) {
       break label$21
      }
      btCollisionObject__activate_28bool_29_20const($3, 0);
     }
     $4 = HEAP32[$3 + 204 >> 2];
     label$24 : {
      if (!($4 & 2)) {
       break label$24
      }
      if ($4 & 4) {
       break label$24
      }
      if (HEAP32[$3 + 220 >> 2] == 2) {
       break label$24
      }
      btCollisionObject__activate_28bool_29_20const($6, 0);
     }
     if (!HEAPU8[$0 + 64 | 0]) {
      break label$20
     }
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1, $6, $3)) {
      break label$20
     }
     $5 = HEAP32[$0 + 28 >> 2];
     label$25 : {
      if (($5 | 0) != HEAP32[$0 + 32 >> 2]) {
       break label$25
      }
      $10 = $5 ? $5 << 1 : 1;
      if (($5 | 0) >= ($10 | 0)) {
       break label$25
      }
      label$26 : {
       if (!$10) {
        $4 = 0;
        break label$26;
       }
       $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10 << 2);
       $5 = HEAP32[$0 + 28 >> 2];
      }
      if (($5 | 0) >= 1) {
       $3 = 0;
       $6 = $5;
       while (1) {
        HEAP32[$3 + $4 >> 2] = HEAP32[$3 + HEAP32[$0 + 36 >> 2] >> 2];
        $3 = $3 + 4 | 0;
        $6 = $6 + -1 | 0;
        if ($6) {
         continue
        }
        break;
       };
      }
      $3 = HEAP32[$0 + 36 >> 2];
      if ($3) {
       if (HEAPU8[$0 + 40 | 0]) {
        btAlignedFreeInternal_28void__29($3);
        $5 = HEAP32[$0 + 28 >> 2];
       }
       HEAP32[$0 + 36 >> 2] = 0;
      }
      HEAP32[$0 + 36 >> 2] = $4;
      HEAP8[$0 + 40 | 0] = 1;
      HEAP32[$0 + 32 >> 2] = $10;
     }
     HEAP32[$0 + 28 >> 2] = $5 + 1;
     HEAP32[HEAP32[$0 + 36 >> 2] + ($5 << 2) >> 2] = $9;
    }
    $7 = $7 + 1 | 0;
    if (($8 | 0) != ($7 | 0)) {
     continue
    }
    break;
   };
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $12 + 16 | 0;
 }
 
 function btSimulationIslandManager__buildAndProcessIslands_28btDispatcher__2c_20btCollisionWorld__2c_20btSimulationIslandManager__IslandCallback__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  $11 = global$0 - 16 | 0;
  global$0 = $11;
  btSimulationIslandManager__buildIslands_28btDispatcher__2c_20btCollisionWorld__29($0, $1, $2);
  $10 = HEAP32[$0 + 8 >> 2];
  CProfileSample__CProfileSample_28char_20const__29($11 + 8 | 0, 22952);
  label$1 : {
   if (!HEAPU8[$0 + 64 | 0]) {
    $0 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 44 >> 2]]($1) | 0;
    $1 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0;
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, HEAP32[$2 + 16 >> 2], HEAP32[$2 + 8 >> 2], $0, $1, -1);
    break label$1;
   }
   $12 = HEAP32[$0 + 28 >> 2];
   if (($12 | 0) >= 2) {
    void_20btAlignedObjectArray_btPersistentManifold____quickSortInternal_btPersistentManifoldSortPredicate__28btPersistentManifoldSortPredicate_20const__2c_20int_2c_20int_29($0 + 24 | 0, $11, 0, $12 + -1 | 0)
   }
   if (($10 | 0) < 1) {
    break label$1
   }
   $15 = 1;
   while (1) {
    $1 = HEAP32[$0 + 16 >> 2];
    $13 = HEAP32[$1 + ($7 << 3) >> 2];
    $16 = 1;
    label$5 : {
     if (($7 | 0) >= ($10 | 0)) {
      break label$5
     }
     while (1) {
      $8 = HEAP32[HEAP32[$2 + 16 >> 2] + (HEAP32[(($7 << 3) + $1 | 0) + 4 >> 2] << 2) >> 2];
      $6 = HEAP32[$0 + 48 >> 2];
      label$7 : {
       if (($6 | 0) != HEAP32[$0 + 52 >> 2]) {
        break label$7
       }
       $9 = $6 ? $6 << 1 : 1;
       if (($6 | 0) >= ($9 | 0)) {
        break label$7
       }
       label$8 : {
        if (!$9) {
         $5 = 0;
         break label$8;
        }
        $5 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($9 << 2);
        $6 = HEAP32[$0 + 48 >> 2];
       }
       if (($6 | 0) >= 1) {
        $1 = 0;
        $4 = $6;
        while (1) {
         HEAP32[$1 + $5 >> 2] = HEAP32[$1 + HEAP32[$0 + 56 >> 2] >> 2];
         $1 = $1 + 4 | 0;
         $4 = $4 + -1 | 0;
         if ($4) {
          continue
         }
         break;
        };
       }
       $1 = HEAP32[$0 + 56 >> 2];
       if ($1) {
        if (HEAPU8[$0 + 60 | 0]) {
         btAlignedFreeInternal_28void__29($1);
         $6 = HEAP32[$0 + 48 >> 2];
        }
        HEAP32[$0 + 56 >> 2] = 0;
       }
       HEAP32[$0 + 56 >> 2] = $5;
       HEAP8[$0 + 60 | 0] = 1;
       HEAP32[$0 + 52 >> 2] = $9;
      }
      HEAP32[$0 + 48 >> 2] = $6 + 1;
      HEAP32[HEAP32[$0 + 56 >> 2] + ($6 << 2) >> 2] = $8;
      $1 = HEAP32[$8 + 220 >> 2];
      $16 = (($1 | 0) == 5 | ($1 | 0) == 2) & $16;
      $7 = $7 + 1 | 0;
      if (($7 | 0) == ($10 | 0)) {
       $7 = $10;
       break label$5;
      }
      $1 = HEAP32[$0 + 16 >> 2];
      if (($13 | 0) == HEAP32[$1 + ($7 << 3) >> 2]) {
       continue
      }
      break;
     };
    }
    $8 = 0;
    $1 = 0;
    label$15 : {
     if (($14 | 0) >= ($12 | 0)) {
      break label$15
     }
     $5 = HEAP32[$0 + 36 >> 2];
     $6 = $14 << 2;
     $9 = $5 + $6 | 0;
     $1 = HEAP32[$9 >> 2];
     $4 = HEAP32[HEAP32[$1 + 772 >> 2] + 208 >> 2];
     if (($4 | 0) <= -1) {
      $4 = HEAP32[HEAP32[$1 + 776 >> 2] + 208 >> 2]
     }
     $1 = 0;
     if (($4 | 0) != ($13 | 0)) {
      break label$15
     }
     $1 = ($6 + $5 | 0) + 4 | 0;
     $5 = 1;
     while (1) {
      $8 = $5;
      $15 = $5 + $14 | 0;
      if (($15 | 0) < ($12 | 0)) {
       $5 = HEAP32[$1 >> 2];
       $4 = HEAP32[HEAP32[$5 + 772 >> 2] + 208 >> 2];
       if (($4 | 0) <= -1) {
        $4 = HEAP32[HEAP32[$5 + 776 >> 2] + 208 >> 2]
       }
       $1 = $1 + 4 | 0;
       $5 = $8 + 1 | 0;
       if (($4 | 0) == ($13 | 0)) {
        continue
       }
      }
      break;
     };
     $1 = $9;
    }
    if (!$16) {
     FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, HEAP32[$0 + 56 >> 2], HEAP32[$0 + 48 >> 2], $1, $8, $13)
    }
    $1 = HEAP32[$0 + 48 >> 2];
    if (($1 | 0) <= -1) {
     if (HEAP32[$0 + 52 >> 2] <= -1) {
      $4 = HEAP32[$0 + 56 >> 2];
      if ($4) {
       if (HEAPU8[$0 + 60 | 0]) {
        btAlignedFreeInternal_28void__29($4)
       }
       HEAP32[$0 + 56 >> 2] = 0;
      }
      HEAP8[$0 + 60 | 0] = 1;
      HEAP32[$0 + 52 >> 2] = 0;
      HEAP32[$0 + 56 >> 2] = 0;
     }
     $4 = $1 << 2;
     while (1) {
      HEAP32[$4 + HEAP32[$0 + 56 >> 2] >> 2] = 0;
      $4 = $4 + 4 | 0;
      $5 = $1 + 1 | 0;
      $6 = $5 >>> 0 >= $1 >>> 0;
      $1 = $5;
      if ($6) {
       continue
      }
      break;
     };
    }
    $14 = $8 ? $15 : $14;
    HEAP32[$0 + 48 >> 2] = 0;
    if (($7 | 0) < ($10 | 0)) {
     continue
    }
    break;
   };
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $11 + 16 | 0;
 }
 
 function void_20btAlignedObjectArray_btPersistentManifold____quickSortInternal_btPersistentManifoldSortPredicate__28btPersistentManifoldSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  while (1) {
   $9 = HEAP32[$0 + 12 >> 2];
   $12 = $2;
   $11 = HEAP32[$9 + (($3 + $2 | 0) / 2 << 2) >> 2];
   $5 = $3;
   while (1) {
    $10 = HEAP32[HEAP32[$11 + 772 >> 2] + 208 >> 2];
    $13 = ($10 | 0) < 0;
    label$3 : {
     if (!$13) {
      $8 = $2 + -1 | 0;
      $7 = (($2 << 2) + $9 | 0) + -4 | 0;
      while (1) {
       $8 = $8 + 1 | 0;
       $7 = $7 + 4 | 0;
       $4 = HEAP32[$7 >> 2];
       $2 = HEAP32[HEAP32[$4 + 772 >> 2] + 208 >> 2];
       if (($2 | 0) <= -1) {
        $2 = HEAP32[HEAP32[$4 + 776 >> 2] + 208 >> 2]
       }
       if (($2 | 0) < ($10 | 0)) {
        continue
       }
       break;
      };
      break label$3;
     }
     $8 = $2 + -1 | 0;
     $7 = (($2 << 2) + $9 | 0) + -4 | 0;
     $6 = HEAP32[HEAP32[$11 + 776 >> 2] + 208 >> 2];
     while (1) {
      $8 = $8 + 1 | 0;
      $7 = $7 + 4 | 0;
      $4 = HEAP32[$7 >> 2];
      $2 = HEAP32[HEAP32[$4 + 772 >> 2] + 208 >> 2];
      if (($2 | 0) <= -1) {
       $2 = HEAP32[HEAP32[$4 + 776 >> 2] + 208 >> 2]
      }
      if (($2 | 0) < ($6 | 0)) {
       continue
      }
      break;
     };
    }
    label$9 : {
     if (!$13) {
      $2 = $5 + 1 | 0;
      $4 = ($5 << 2) + $9 | 0;
      while (1) {
       $5 = HEAP32[$4 >> 2];
       $6 = HEAP32[HEAP32[$5 + 772 >> 2] + 208 >> 2];
       if (($6 | 0) <= -1) {
        $6 = HEAP32[HEAP32[$5 + 776 >> 2] + 208 >> 2]
       }
       $4 = $4 + -4 | 0;
       $2 = $2 + -1 | 0;
       if (($10 | 0) < ($6 | 0)) {
        continue
       }
       break;
      };
      $4 = $4 + 4 | 0;
      break label$9;
     }
     $2 = $5 + 1 | 0;
     $4 = ($5 << 2) + $9 | 0;
     $5 = HEAP32[HEAP32[$11 + 776 >> 2] + 208 >> 2];
     while (1) {
      $10 = HEAP32[$4 >> 2];
      $6 = HEAP32[HEAP32[$10 + 772 >> 2] + 208 >> 2];
      if (($6 | 0) <= -1) {
       $6 = HEAP32[HEAP32[$10 + 776 >> 2] + 208 >> 2]
      }
      $4 = $4 + -4 | 0;
      $2 = $2 + -1 | 0;
      if (($5 | 0) < ($6 | 0)) {
       continue
      }
      break;
     };
     $4 = $4 + 4 | 0;
    }
    label$15 : {
     if (($8 | 0) > ($2 | 0)) {
      $5 = $2;
      $2 = $8;
      break label$15;
     }
     $6 = HEAP32[$7 >> 2];
     HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
     HEAP32[HEAP32[$0 + 12 >> 2] + ($2 << 2) >> 2] = $6;
     $5 = $2 + -1 | 0;
     $2 = $8 + 1 | 0;
    }
    if (($2 | 0) <= ($5 | 0)) {
     $9 = HEAP32[$0 + 12 >> 2];
     continue;
    }
    break;
   };
   if (($5 | 0) > ($12 | 0)) {
    void_20btAlignedObjectArray_btPersistentManifold____quickSortInternal_btPersistentManifoldSortPredicate__28btPersistentManifoldSortPredicate_20const__2c_20int_2c_20int_29($0, $1, $12, $5)
   }
   if (($2 | 0) < ($3 | 0)) {
    continue
   }
   break;
  };
 }
 
 function fmodf($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(0));
   $2 = $4 >>> 23 & 255;
   if (($2 | 0) != 255) {
    break label$1
   }
   $0 = Math_fround($0 * Math_fround(6.2831854820251465));
   return Math_fround($0 / $0);
  }
  $3 = $4 << 1;
  if ($3 >>> 0 > 2173837238) {
   label$4 : {
    if (!$2) {
     $2 = 0;
     $1 = $4 << 9;
     if (($1 | 0) >= 0) {
      while (1) {
       $2 = $2 + -1 | 0;
       $1 = $1 << 1;
       if (($1 | 0) > -1) {
        continue
       }
       break;
      }
     }
     $1 = $4 << 1 - $2;
     break label$4;
    }
    $1 = $4 & 8388607 | 8388608;
   }
   $3 = $1 - 13176795 | 0;
   $5 = ($3 | 0) > -1;
   if (($2 | 0) > 129) {
    while (1) {
     label$14 : {
      if (!$5) {
       break label$14
      }
      $1 = $3;
      if ($1) {
       break label$14
      }
      return Math_fround($0 * Math_fround(0.0));
     }
     $1 = $1 << 1;
     $3 = $1 - 13176795 | 0;
     $5 = ($3 | 0) > -1;
     $2 = $2 + -1 | 0;
     if (($2 | 0) > 129) {
      continue
     }
     break;
    }
   }
   label$15 : {
    if (!$5) {
     break label$15
    }
    $1 = $3;
    if ($1) {
     break label$15
    }
    return Math_fround($0 * Math_fround(0.0));
   }
   if ($1 >>> 0 <= 8388607) {
    while (1) {
     $2 = $2 + -1 | 0;
     $1 = $1 << 1;
     if ($1 >>> 0 < 8388608) {
      continue
     }
     break;
    }
   }
   $3 = $4 & -2147483648;
   if (($2 | 0) >= 1) {
    $1 = $1 + -8388608 | $2 << 23
   } else {
    $1 = $1 >>> 1 - $2
   }
   return wasm2js_scratch_store_i32(0, $1 | $3), wasm2js_scratch_load_f32();
  }
  return ($3 | 0) == -2121130058 ? Math_fround($0 * Math_fround(0.0)) : $0;
 }
 
 function btAngularLimit__getHigh_28_29_20const($0) {
  var $1 = Math_fround(0);
  $1 = fmodf(Math_fround(HEAPF32[$0 >> 2] + HEAPF32[$0 + 4 >> 2]));
  if (!!($1 < Math_fround(-3.1415927410125732))) {
   return Math_fround($1 + Math_fround(6.2831854820251465))
  }
  return $1 > Math_fround(3.1415927410125732) ^ 1 ? $1 : Math_fround($1 + Math_fround(-6.2831854820251465));
 }
 
 function btAngularLimit__getLow_28_29_20const($0) {
  var $1 = Math_fround(0);
  $1 = fmodf(Math_fround(HEAPF32[$0 >> 2] - HEAPF32[$0 + 4 >> 2]));
  if (!!($1 < Math_fround(-3.1415927410125732))) {
   return Math_fround($1 + Math_fround(6.2831854820251465))
  }
  return $1 > Math_fround(3.1415927410125732) ^ 1 ? $1 : Math_fround($1 + Math_fround(-6.2831854820251465));
 }
 
 function btConeTwistConstraint__GetPointForAngle_28float_2c_20float_29_20const($0, $1, $2, $3) {
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0);
  $5 = cosf($2);
  $6 = HEAPF32[$1 + 444 >> 2];
  $2 = sinf($2);
  label$1 : {
   if (!(Math_fround(Math_abs($5)) > Math_fround(1.1920928955078125e-07))) {
    $4 = Math_fround($2 * $2);
    $9 = Math_fround($5 * $5);
    break label$1;
   }
   $4 = Math_fround($2 * $2);
   $9 = Math_fround($5 * $5);
   $7 = Math_fround($4 / $9);
   $8 = HEAPF32[$1 + 448 >> 2];
   $6 = Math_fround(Math_sqrt(Math_fround(Math_fround($7 + Math_fround(1.0)) / Math_fround(Math_fround(Math_fround(1.0) / Math_fround($8 * $8)) + Math_fround($7 / Math_fround($6 * $6))))));
  }
  HEAP32[$0 + 12 >> 2] = 0;
  $7 = Math_fround($6 * Math_fround(.5));
  $4 = Math_fround(sinf($7) / Math_fround(Math_sqrt(Math_fround($4 + Math_fround($9 + Math_fround(0.0))))));
  $2 = Math_fround($2 * $4);
  $6 = Math_fround($4 * Math_fround(0.0));
  $5 = Math_fround($5 * $4);
  $8 = Math_fround($5 * Math_fround(0.0));
  $10 = Math_fround($2 * Math_fround(-0.0));
  $9 = Math_fround(Math_fround(Math_fround(-Math_fround($6 * $3)) - $8) - $10);
  $4 = cosf($7);
  $11 = Math_fround($4 * Math_fround(0.0));
  $12 = Math_fround($6 * Math_fround(0.0));
  $7 = Math_fround(Math_fround($11 + $12) - Math_fround($5 * $3));
  $8 = Math_fround(Math_fround(Math_fround($4 * $3) + $8) - $10);
  $3 = Math_fround(Math_fround($11 - Math_fround($2 * $3)) - $12);
  HEAPF32[$0 + 8 >> 2] = Math_fround(Math_fround(Math_fround($2 * $9) + Math_fround($4 * $7)) - Math_fround($8 * $5)) + Math_fround($3 * $6);
  HEAPF32[$0 + 4 >> 2] = Math_fround(Math_fround(Math_fround($4 * $3) - Math_fround($9 * $5)) - Math_fround($7 * $6)) - Math_fround($2 * $8);
  HEAPF32[$0 >> 2] = Math_fround(Math_fround($2 * $3) + Math_fround(Math_fround($4 * $8) - Math_fround($9 * $6))) + Math_fround($7 * $5);
 }
 
 function btGeneric6DofConstraint__getAngle_28int_29_20const($0, $1) {
  return HEAPF32[(($1 << 2) + $0 | 0) + 1192 >> 2];
 }
 
 function btDiscreteDynamicsWorld__btDiscreteDynamicsWorld_28btDispatcher__2c_20btBroadphaseInterface__2c_20btConstraintSolver__2c_20btCollisionConfiguration__29($0, $1, $2, $3) {
  btCollisionWorld__btCollisionWorld_28btDispatcher__2c_20btBroadphaseInterface__2c_20btCollisionConfiguration__29($0, $1, $2);
  $2 = $0 + 100 | 0;
  HEAP32[$2 >> 2] = 1050253722;
  HEAP32[$2 + 4 >> 2] = 1015580809;
  HEAP32[$0 + 92 >> 2] = 1058642330;
  HEAP32[$0 + 96 >> 2] = 1065353216;
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  $2 = $0 + 132 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 1045220557;
  $2 = $0 + 124 | 0;
  HEAP32[$2 >> 2] = 1045220557;
  HEAP32[$2 + 4 >> 2] = 1045220557;
  $2 = $0 + 108 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 10;
  $2 = $0 + 184 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 1045220557;
  $2 = $0 + 176 | 0;
  HEAP32[$2 >> 2] = 1120403456;
  HEAP32[$2 + 4 >> 2] = 1900671690;
  HEAP32[$0 + 172 >> 2] = 128;
  $2 = $0 + 164 | 0;
  HEAP32[$2 >> 2] = 260;
  HEAP32[$2 + 4 >> 2] = 2;
  $2 = $0 + 156 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 1062836634;
  $2 = $0 + 148 | 0;
  HEAP32[$2 >> 2] = -1121724662;
  HEAP32[$2 + 4 >> 2] = 1036831949;
  $2 = $0 + 140 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 1;
  $2 = $0 + 116 | 0;
  HEAP32[$2 >> 2] = 1101004800;
  HEAP32[$2 + 4 >> 2] = 1065353216;
  HEAP32[$0 >> 2] = 23012;
  HEAP8[$0 + 208 | 0] = 1;
  HEAP32[$0 + 204 >> 2] = 0;
  HEAP8[$0 + 240 | 0] = 1;
  HEAP32[$0 + 216 >> 2] = $3;
  HEAP32[$0 + 212 >> 2] = 0;
  $2 = $0 + 196 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 236 >> 2] = 0;
  $2 = $0 + 228 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP8[$0 + 260 | 0] = 1;
  HEAP16[$0 + 290 >> 1] = 0;
  HEAP32[$0 + 256 >> 2] = 0;
  $2 = $0 + 248 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 264 >> 2] = 0;
  HEAP32[$0 + 268 >> 2] = -1054867456;
  $2 = $0 + 272 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $0 + 280 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP8[$0 + 308 | 0] = 1;
  HEAP32[$0 + 312 >> 2] = 0;
  HEAP32[$0 + 304 >> 2] = 0;
  $2 = $0 + 296 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP8[$0 + 336 | 0] = 1;
  HEAP8[$0 + 316 | 0] = 1;
  $2 = $0 + 324 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 332 >> 2] = 0;
  HEAP32[$0 + 340 >> 2] = 0;
  $2 = $0;
  if ($3) {
   $3 = 0
  } else {
   $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(236);
   btSequentialImpulseConstraintSolver__btSequentialImpulseConstraintSolver_28_29($3);
   HEAP32[$0 + 216 >> 2] = $3;
   $3 = 1;
  }
  HEAP8[$2 + 289 | 0] = $3;
  $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(68);
  btSimulationIslandManager__btSimulationIslandManager_28_29($3);
  HEAP8[$0 + 288 | 0] = 1;
  HEAP32[$0 + 220 >> 2] = $3;
  $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(88);
  $2 = $3;
  HEAP32[$2 + 72 >> 2] = 0;
  HEAP32[$2 + 76 >> 2] = 0;
  HEAP8[$2 + 44 | 0] = 1;
  HEAP32[$2 + 24 >> 2] = $1;
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 0;
  HEAP32[$2 + 16 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 >> 2] = 23620;
  HEAP32[$2 + 40 >> 2] = 0;
  HEAP8[$2 + 64 | 0] = 1;
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP32[$2 + 36 >> 2] = 0;
  HEAP32[$2 + 60 >> 2] = 0;
  HEAP8[$2 + 84 | 0] = 1;
  HEAP32[$2 + 52 >> 2] = 0;
  HEAP32[$2 + 56 >> 2] = 0;
  HEAP32[$2 + 80 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = HEAP32[$0 + 216 >> 2];
  HEAP32[$0 + 212 >> 2] = $2;
 }
 
 function btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 23012;
  if (HEAPU8[$0 + 288 | 0]) {
   $1 = HEAP32[$0 + 220 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 220 >> 2]);
  }
  $1 = HEAP32[$0 + 212 >> 2];
  if ($1) {
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 212 >> 2]);
  }
  if (HEAPU8[$0 + 289 | 0]) {
   $1 = HEAP32[$0 + 216 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 216 >> 2]);
  }
  $1 = HEAP32[$0 + 332 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 336 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 332 >> 2] = 0;
  }
  HEAP32[$0 + 332 >> 2] = 0;
  HEAP32[$0 + 324 >> 2] = 0;
  HEAP32[$0 + 328 >> 2] = 0;
  HEAP8[$0 + 336 | 0] = 1;
  $1 = HEAP32[$0 + 304 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 308 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 304 >> 2] = 0;
  }
  HEAP32[$0 + 304 >> 2] = 0;
  HEAP32[$0 + 296 >> 2] = 0;
  HEAP32[$0 + 300 >> 2] = 0;
  HEAP8[$0 + 308 | 0] = 1;
  $1 = HEAP32[$0 + 256 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 260 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 256 >> 2] = 0;
  }
  HEAP32[$0 + 256 >> 2] = 0;
  HEAP32[$0 + 248 >> 2] = 0;
  HEAP32[$0 + 252 >> 2] = 0;
  HEAP8[$0 + 260 | 0] = 1;
  $1 = HEAP32[$0 + 236 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 240 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 236 >> 2] = 0;
  }
  HEAP32[$0 + 236 >> 2] = 0;
  HEAP32[$0 + 228 >> 2] = 0;
  HEAP32[$0 + 232 >> 2] = 0;
  HEAP8[$0 + 240 | 0] = 1;
  $1 = HEAP32[$0 + 204 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 208 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 204 >> 2] = 0;
  }
  HEAP32[$0 + 204 >> 2] = 0;
  HEAP32[$0 + 196 >> 2] = 0;
  HEAP32[$0 + 200 >> 2] = 0;
  HEAP8[$0 + 208 | 0] = 1;
  btCollisionWorld___btCollisionWorld_28_29($0);
  return $0 | 0;
 }
 
 function btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29_1($0) {
  $0 = $0 | 0;
  btAlignedFreeInternal_28void__29(btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29($0));
 }
 
 function btDiscreteDynamicsWorld__saveKinematicState_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = HEAP32[$0 + 8 >> 2];
  if (($3 | 0) >= 1) {
   while (1) {
    $2 = HEAP32[$4 + HEAP32[$0 + 16 >> 2] >> 2];
    label$3 : {
     if (!$2) {
      break label$3
     }
     if (!(HEAP32[$2 + 252 >> 2] & 2)) {
      break label$3
     }
     if (HEAP32[$2 + 220 >> 2] == 2) {
      break label$3
     }
     if (!(HEAPU8[$2 + 204 | 0] & 2)) {
      break label$3
     }
     btRigidBody__saveKinematicState_28float_29($2, $1);
     $3 = HEAP32[$0 + 8 >> 2];
    }
    $4 = $4 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($3 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function btDiscreteDynamicsWorld__debugDrawWorld_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  CProfileSample__CProfileSample_28char_20const__29($2 + 8 | 0, 23200);
  btCollisionWorld__debugDrawWorld_28_29($0);
  label$1 : {
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
    break label$1
   }
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 56 >> 2]]($1) & 6144)) {
    break label$1
   }
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0) | 0;
   if (($1 | 0) < 1) {
    break label$1
   }
   while (1) {
    $1 = $1 + -1 | 0;
    ((wasm2js_i32$1 = $0, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 108 >> 2]]($0, $1) | 0), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 172 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    if (($1 | 0) > 0) {
     continue
    }
    break;
   };
  }
  label$3 : {
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
    break label$3
   }
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   if (!(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 56 >> 2]]($1) & 16387)) {
    break label$3
   }
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
    break label$3
   }
   $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 56 >> 2]]($1)) {
    break label$3
   }
   if (HEAP32[$0 + 296 >> 2] < 1) {
    break label$3
   }
   $1 = 0;
   while (1) {
    $3 = HEAP32[$1 + HEAP32[$0 + 304 >> 2] >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 12 >> 2]]($3, HEAP32[$0 + 72 >> 2]);
    $1 = $1 + 4 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) < HEAP32[$0 + 296 >> 2]) {
     continue
    }
    break;
   };
  }
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0);
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $2 + 16 | 0;
 }
 
 function btDiscreteDynamicsWorld__clearForces_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  if (HEAP32[$0 + 248 >> 2] >= 1) {
   while (1) {
    $2 = HEAP32[$3 + HEAP32[$0 + 256 >> 2] >> 2];
    $1 = $2;
    HEAP32[$1 + 472 >> 2] = 0;
    HEAP32[$1 + 476 >> 2] = 0;
    $1 = $1 + 496 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $2 + 488 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $1 = $2 + 480 | 0;
    HEAP32[$1 >> 2] = 0;
    HEAP32[$1 + 4 >> 2] = 0;
    $3 = $3 + 4 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) < HEAP32[$0 + 248 >> 2]) {
     continue
    }
    break;
   }
  }
 }
 
 function btDiscreteDynamicsWorld__applyGravity_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $1 = HEAP32[$0 + 248 >> 2];
  if (($1 | 0) >= 1) {
   while (1) {
    label$3 : {
     label$4 : {
      $3 = HEAP32[$2 + HEAP32[$0 + 256 >> 2] >> 2];
      $4 = HEAP32[$3 + 220 >> 2] + -2 | 0;
      if ($4 >>> 0 > 3) {
       break label$4
      }
      switch ($4 - 1 | 0) {
      case 0:
      case 1:
       break label$4;
      default:
       break label$3;
      };
     }
     btRigidBody__applyGravity_28_29($3);
     $1 = HEAP32[$0 + 248 >> 2];
    }
    $2 = $2 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($1 | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function btDiscreteDynamicsWorld__synchronizeMotionStates_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $6 = global$0 + -64 | 0;
  global$0 = $6;
  label$1 : {
   if (HEAPU8[$0 + 290 | 0]) {
    $4 = HEAP32[$0 + 8 >> 2];
    if (($4 | 0) < 1) {
     break label$1
    }
    while (1) {
     $1 = HEAP32[$7 + HEAP32[$0 + 16 >> 2] >> 2];
     label$4 : {
      if (!$1) {
       break label$4
      }
      if (!(HEAP32[$1 + 252 >> 2] & 2)) {
       break label$4
      }
      if (!HEAP32[$1 + 540 >> 2]) {
       break label$4
      }
      if (HEAPU8[$1 + 204 | 0] & 3) {
       break label$4
      }
      $4 = $1 + 68 | 0;
      $5 = $1 + 132 | 0;
      $8 = $1 + 148 | 0;
      label$5 : {
       label$6 : {
        if (!HEAPU8[$0 + 316 | 0]) {
         break label$6
        }
        $3 = HEAPF32[$0 + 284 >> 2];
        if ($3 == Math_fround(0.0)) {
         break label$6
        }
        $3 = Math_fround(HEAPF32[$0 + 280 >> 2] - $3);
        break label$5;
       }
       $3 = Math_fround(HEAPF32[$0 + 280 >> 2] * HEAPF32[$1 + 268 >> 2]);
      }
      btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btTransform__29($4, $5, $8, $3, $6);
      $1 = HEAP32[$1 + 540 >> 2];
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $6);
      $4 = HEAP32[$0 + 8 >> 2];
     }
     $7 = $7 + 4 | 0;
     $2 = $2 + 1 | 0;
     if (($2 | 0) < ($4 | 0)) {
      continue
     }
     break;
    };
    break label$1;
   }
   $5 = HEAP32[$0 + 248 >> 2];
   if (($5 | 0) < 1) {
    break label$1
   }
   while (1) {
    label$8 : {
     label$9 : {
      $2 = HEAP32[$1 + HEAP32[$0 + 256 >> 2] >> 2];
      $4 = HEAP32[$2 + 220 >> 2] + -2 | 0;
      if ($4 >>> 0 > 3) {
       break label$9
      }
      switch ($4 - 1 | 0) {
      case 0:
      case 1:
       break label$9;
      default:
       break label$8;
      };
     }
     if (!HEAP32[$2 + 540 >> 2]) {
      break label$8
     }
     if (HEAPU8[$2 + 204 | 0] & 3) {
      break label$8
     }
     $4 = $2 + 68 | 0;
     $5 = $2 + 132 | 0;
     $8 = $2 + 148 | 0;
     label$10 : {
      label$11 : {
       if (!HEAPU8[$0 + 316 | 0]) {
        break label$11
       }
       $3 = HEAPF32[$0 + 284 >> 2];
       if ($3 == Math_fround(0.0)) {
        break label$11
       }
       $3 = Math_fround(HEAPF32[$0 + 280 >> 2] - $3);
       break label$10;
      }
      $3 = Math_fround(HEAPF32[$0 + 280 >> 2] * HEAPF32[$2 + 268 >> 2]);
     }
     btTransformUtil__integrateTransform_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btTransform__29($4, $5, $8, $3, $6);
     $2 = HEAP32[$2 + 540 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 12 >> 2]]($2, $6);
     $5 = HEAP32[$0 + 248 >> 2];
    }
    $1 = $1 + 4 | 0;
    $7 = $7 + 1 | 0;
    if (($7 | 0) < ($5 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $6 - -64 | 0;
 }
 
 function btDiscreteDynamicsWorld__stepSimulation_28float_2c_20int_2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  $3 = Math_fround($3);
  var $4 = 0, $5 = 0, $6 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($2) {
    HEAPF32[$0 + 284 >> 2] = $3;
    $1 = Math_fround(HEAPF32[$0 + 280 >> 2] + $1);
    HEAPF32[$0 + 280 >> 2] = $1;
    if (!($1 >= $3)) {
     break label$1
    }
    $4 = $0;
    $6 = $1;
    $1 = Math_fround($1 / $3);
    label$3 : {
     if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
      $5 = ~~$1;
      break label$3;
     }
     $5 = -2147483648;
    }
    HEAPF32[$4 + 280 >> 2] = $6 - Math_fround(Math_fround($5 | 0) * $3);
    break label$1;
   }
   HEAP32[$0 + 284 >> 2] = 0;
   HEAPF32[$0 + 280 >> 2] = HEAPU8[$0 + 316 | 0] ? Math_fround(0.0) : $1;
   $3 = $1;
   $5 = Math_fround(Math_abs($1)) < Math_fround(1.1920928955078125e-07) ^ 1;
   $2 = $5;
  }
  if (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0)) {
   $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   (wasm2js_i32$0 = 2792, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 56 >> 2]]($4) >>> 4 & 1), HEAP8[wasm2js_i32$0 | 0] = wasm2js_i32$1;
  }
  label$6 : {
   if ($5) {
    $4 = ($5 | 0) > ($2 | 0) ? $2 : $5;
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 168 >> 2]]($0, Math_fround($3 * Math_fround($4 | 0)));
    FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 176 >> 2]]($0);
    if (($4 | 0) < 1) {
     break label$6
    }
    $2 = 0;
    while (1) {
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 160 >> 2]]($0, $3);
     FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0);
     $2 = $2 + 1 | 0;
     if (($2 | 0) < ($4 | 0)) {
      continue
     }
     break;
    };
    break label$6;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 80 >> 2]]($0);
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 120 >> 2]]($0);
  return $5 | 0;
 }
 
 function btDiscreteDynamicsWorld__internalSingleStepSimulation_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  CProfileSample__CProfileSample_28char_20const__29($3, 23215);
  $2 = HEAP32[$0 + 84 >> 2];
  if ($2) {
   FUNCTION_TABLE[$2]($0, $1)
  }
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 140 >> 2]]($0, $1);
  $2 = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAPF32[$0 + 28 >> 2] = $1;
  (wasm2js_i32$0 = $0 + 48 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 164 >> 2]]($0, $1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 148 >> 2]]($0);
  HEAPF32[$0 + 104 >> 2] = $1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 152 >> 2]]($0, $0 + 92 | 0);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 144 >> 2]]($0, $1);
  CProfileSample__CProfileSample_28char_20const__29($3 + 8 | 0, 23244);
  if (HEAP32[$0 + 296 >> 2] >= 1) {
   while (1) {
    $4 = HEAP32[$2 + HEAP32[$0 + 304 >> 2] >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $0, $1);
    $2 = $2 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < HEAP32[$0 + 296 >> 2]) {
     continue
    }
    break;
   }
  }
  CProfileSample___CProfileSample_28_29();
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 156 >> 2]]($0, $1);
  $2 = HEAP32[$0 + 80 >> 2];
  if ($2) {
   FUNCTION_TABLE[$2]($0, $1)
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $3 + 16 | 0;
 }
 
 function btDiscreteDynamicsWorld__setGravity_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 264 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 268 >> 2] = $2;
  $3 = $1 + 8 | 0;
  $4 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $2 = $0 + 272 | 0;
  HEAP32[$2 >> 2] = $4;
  HEAP32[$2 + 4 >> 2] = $3;
  $2 = HEAP32[$0 + 248 >> 2];
  if (($2 | 0) >= 1) {
   $3 = 0;
   $4 = 0;
   while (1) {
    label$3 : {
     label$4 : {
      $5 = HEAP32[$3 + HEAP32[$0 + 256 >> 2] >> 2];
      $6 = HEAP32[$5 + 220 >> 2] + -2 | 0;
      if ($6 >>> 0 > 3) {
       break label$4
      }
      switch ($6 - 1 | 0) {
      case 0:
      case 1:
       break label$4;
      default:
       break label$3;
      };
     }
     if (HEAP8[$5 + 564 | 0] & 1) {
      break label$3
     }
     btRigidBody__setGravity_28btVector3_20const__29($5, $1);
     $2 = HEAP32[$0 + 248 >> 2];
    }
    $3 = $3 + 4 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) < ($2 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function btDiscreteDynamicsWorld__getGravity_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$1 + 268 >> 2];
  HEAP32[$0 >> 2] = HEAP32[$1 + 264 >> 2];
  HEAP32[$0 + 4 >> 2] = $2;
  $1 = $1 + 272 | 0;
  $2 = $0 + 8 | 0;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
 }
 
 function btDiscreteDynamicsWorld__addCollisionObject_28btCollisionObject__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  btCollisionWorld__addCollisionObject_28btCollisionObject__2c_20int_2c_20int_29($0, $1, $2, $3);
 }
 
 function btDiscreteDynamicsWorld__removeCollisionObject_28btCollisionObject__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   if (!(HEAP32[$1 + 252 >> 2] & 2)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 92 >> 2]]($0, $1);
   return;
  }
  btCollisionWorld__removeCollisionObject_28btCollisionObject__29($0, $1);
 }
 
 function btDiscreteDynamicsWorld__removeRigidBody_28btRigidBody__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = HEAP32[$0 + 248 >> 2];
  label$1 : {
   if (($2 | 0) < 1) {
    break label$1
   }
   $5 = HEAP32[$0 + 256 >> 2];
   $4 = $5;
   while (1) {
    if (HEAP32[$4 >> 2] != ($1 | 0)) {
     $4 = $4 + 4 | 0;
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($2 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($2 | 0) <= ($3 | 0)) {
    break label$1
   }
   $3 = $2 + -1 | 0;
   $2 = $3 << 2;
   HEAP32[$4 >> 2] = HEAP32[$2 + $5 >> 2];
   HEAP32[$0 + 248 >> 2] = $3;
   HEAP32[$2 + HEAP32[$0 + 256 >> 2] >> 2] = $1;
  }
  btCollisionWorld__removeCollisionObject_28btCollisionObject__29($0, $1);
 }
 
 function btDiscreteDynamicsWorld__addRigidBody_28btRigidBody__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   if (HEAPU8[$1 + 204 | 0] & 3) {
    break label$1
   }
   if (HEAP8[$1 + 564 | 0] & 1) {
    break label$1
   }
   btRigidBody__setGravity_28btVector3_20const__29($1, $0 + 264 | 0);
  }
  if (HEAP32[$1 + 192 >> 2]) {
   label$3 : {
    if (!(HEAP8[$1 + 204 | 0] & 1)) {
     $2 = HEAP32[$0 + 248 >> 2];
     label$5 : {
      if (($2 | 0) != HEAP32[$0 + 252 >> 2]) {
       break label$5
      }
      $4 = $2 ? $2 << 1 : 1;
      if (($2 | 0) >= ($4 | 0)) {
       break label$5
      }
      label$6 : {
       if (!$4) {
        break label$6
       }
       $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
       $2 = HEAP32[$0 + 248 >> 2];
      }
      if (($2 | 0) >= 1) {
       $5 = $2;
       while (1) {
        HEAP32[$3 + $6 >> 2] = HEAP32[$3 + HEAP32[$0 + 256 >> 2] >> 2];
        $3 = $3 + 4 | 0;
        $5 = $5 + -1 | 0;
        if ($5) {
         continue
        }
        break;
       };
      }
      $3 = HEAP32[$0 + 256 >> 2];
      if ($3) {
       if (HEAPU8[$0 + 260 | 0]) {
        btAlignedFreeInternal_28void__29($3);
        $2 = HEAP32[$0 + 248 >> 2];
       }
       HEAP32[$0 + 256 >> 2] = 0;
      }
      HEAP32[$0 + 256 >> 2] = $6;
      HEAP32[$0 + 252 >> 2] = $4;
      HEAP8[$0 + 260 | 0] = 1;
     }
     HEAP32[$0 + 248 >> 2] = $2 + 1;
     HEAP32[HEAP32[$0 + 256 >> 2] + ($2 << 2) >> 2] = $1;
     break label$3;
    }
    btCollisionObject__setActivationState_28int_29_20const($1, 2);
   }
   $3 = HEAP32[$1 + 204 >> 2] & 3;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, $3 ? 2 : 1, $3 ? -3 : -1);
  }
 }
 
 function btDiscreteDynamicsWorld__addRigidBody_28btRigidBody__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  label$1 : {
   if (HEAPU8[$1 + 204 | 0] & 3) {
    break label$1
   }
   if (HEAP8[$1 + 564 | 0] & 1) {
    break label$1
   }
   btRigidBody__setGravity_28btVector3_20const__29($1, $0 + 264 | 0);
  }
  if (HEAP32[$1 + 192 >> 2]) {
   label$3 : {
    if (!(HEAP8[$1 + 204 | 0] & 1)) {
     $4 = HEAP32[$0 + 248 >> 2];
     label$5 : {
      if (($4 | 0) != HEAP32[$0 + 252 >> 2]) {
       break label$5
      }
      $6 = $4 ? $4 << 1 : 1;
      if (($4 | 0) >= ($6 | 0)) {
       break label$5
      }
      label$6 : {
       if (!$6) {
        break label$6
       }
       $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2);
       $4 = HEAP32[$0 + 248 >> 2];
      }
      if (($4 | 0) >= 1) {
       $7 = $4;
       while (1) {
        HEAP32[$5 + $8 >> 2] = HEAP32[$5 + HEAP32[$0 + 256 >> 2] >> 2];
        $5 = $5 + 4 | 0;
        $7 = $7 + -1 | 0;
        if ($7) {
         continue
        }
        break;
       };
      }
      $5 = HEAP32[$0 + 256 >> 2];
      if ($5) {
       if (HEAPU8[$0 + 260 | 0]) {
        btAlignedFreeInternal_28void__29($5);
        $4 = HEAP32[$0 + 248 >> 2];
       }
       HEAP32[$0 + 256 >> 2] = 0;
      }
      HEAP32[$0 + 256 >> 2] = $8;
      HEAP32[$0 + 252 >> 2] = $6;
      HEAP8[$0 + 260 | 0] = 1;
     }
     HEAP32[$0 + 248 >> 2] = $4 + 1;
     HEAP32[HEAP32[$0 + 256 >> 2] + ($4 << 2) >> 2] = $1;
     break label$3;
    }
    btCollisionObject__setActivationState_28int_29_20const($1, 2);
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, $2, $3);
  }
 }
 
 function btDiscreteDynamicsWorld__updateActivationState_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $7 = global$0 - 16 | 0;
  global$0 = $7;
  CProfileSample__CProfileSample_28char_20const__29($7 + 8 | 0, 23258);
  if (HEAP32[$0 + 248 >> 2] >= 1) {
   while (1) {
    $2 = HEAP32[$8 + HEAP32[$0 + 256 >> 2] >> 2];
    label$3 : {
     if (!$2) {
      break label$3
     }
     $6 = HEAP32[$2 + 220 >> 2];
     $5 = $6 + -2 | 0;
     label$4 : {
      if (!($5 - 1 | 0 ? $5 >>> 0 <= 2 : 0)) {
       label$7 : {
        $3 = HEAPF32[$2 + 372 >> 2];
        $4 = Math_fround($3 * $3);
        $3 = HEAPF32[$2 + 376 >> 2];
        $4 = Math_fround($4 + Math_fround($3 * $3));
        $3 = HEAPF32[$2 + 380 >> 2];
        $4 = Math_fround($4 + Math_fround($3 * $3));
        $3 = HEAPF32[$2 + 532 >> 2];
        if (!($4 < Math_fround($3 * $3))) {
         break label$7
        }
        $3 = HEAPF32[$2 + 388 >> 2];
        $4 = Math_fround($3 * $3);
        $3 = HEAPF32[$2 + 392 >> 2];
        $4 = Math_fround($4 + Math_fround($3 * $3));
        $3 = HEAPF32[$2 + 396 >> 2];
        $4 = Math_fround($4 + Math_fround($3 * $3));
        $3 = HEAPF32[$2 + 536 >> 2];
        if (!($4 < Math_fround($3 * $3))) {
         break label$7
        }
        HEAPF32[$2 + 224 >> 2] = HEAPF32[$2 + 224 >> 2] + $1;
        break label$4;
       }
       HEAP32[$2 + 224 >> 2] = 0;
       btCollisionObject__setActivationState_28int_29_20const($2, 0);
       $6 = HEAP32[$2 + 220 >> 2];
      }
      if (($6 | 0) == 4) {
       break label$3
      }
     }
     label$8 : {
      if (HEAPU8[2792]) {
       break label$8
      }
      $3 = HEAPF32[750];
      if ($3 == Math_fround(0.0)) {
       break label$8
      }
      if (HEAPF32[$2 + 224 >> 2] > $3 ^ 1 ? ($6 & -2) != 2 : 0) {
       break label$8
      }
      if (HEAPU8[$2 + 204 | 0] & 3) {
       btCollisionObject__setActivationState_28int_29_20const($2, 2);
       break label$3;
      }
      if (($6 | 0) == 1) {
       btCollisionObject__setActivationState_28int_29_20const($2, 3);
       $6 = HEAP32[$2 + 220 >> 2];
      }
      if (($6 | 0) != 2) {
       break label$3
      }
      HEAP32[$2 + 388 >> 2] = 0;
      HEAP32[$2 + 392 >> 2] = 0;
      HEAP32[$2 + 372 >> 2] = 0;
      HEAP32[$2 + 376 >> 2] = 0;
      $5 = $2 + 396 | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      $5 = $2 + 380 | 0;
      HEAP32[$5 >> 2] = 0;
      HEAP32[$5 + 4 >> 2] = 0;
      HEAP32[$2 + 304 >> 2] = HEAP32[$2 + 304 >> 2] + 2;
      break label$3;
     }
     btCollisionObject__setActivationState_28int_29_20const($2, 1);
    }
    $8 = $8 + 4 | 0;
    $9 = $9 + 1 | 0;
    if (($9 | 0) < HEAP32[$0 + 248 >> 2]) {
     continue
    }
    break;
   }
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $7 + 16 | 0;
 }
 
 function btDiscreteDynamicsWorld__addConstraint_28btTypedConstraint__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $3 = HEAP32[$0 + 228 >> 2];
  label$1 : {
   if (($3 | 0) != HEAP32[$0 + 232 >> 2]) {
    break label$1
   }
   $5 = $3 ? $3 << 1 : 1;
   if (($3 | 0) >= ($5 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$5) {
     break label$2
    }
    $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($5 << 2);
    $3 = HEAP32[$0 + 228 >> 2];
   }
   if (($3 | 0) >= 1) {
    $6 = $3;
    while (1) {
     HEAP32[$4 + $7 >> 2] = HEAP32[$4 + HEAP32[$0 + 236 >> 2] >> 2];
     $4 = $4 + 4 | 0;
     $6 = $6 + -1 | 0;
     if ($6) {
      continue
     }
     break;
    };
   }
   $4 = HEAP32[$0 + 236 >> 2];
   if ($4) {
    if (HEAPU8[$0 + 240 | 0]) {
     btAlignedFreeInternal_28void__29($4);
     $3 = HEAP32[$0 + 228 >> 2];
    }
    HEAP32[$0 + 236 >> 2] = 0;
   }
   HEAP32[$0 + 236 >> 2] = $7;
   HEAP32[$0 + 232 >> 2] = $5;
   HEAP8[$0 + 240 | 0] = 1;
  }
  HEAP32[$0 + 228 >> 2] = $3 + 1;
  HEAP32[HEAP32[$0 + 236 >> 2] + ($3 << 2) >> 2] = $1;
  if ($2) {
   btRigidBody__addConstraintRef_28btTypedConstraint__29(HEAP32[$1 + 28 >> 2], $1);
   btRigidBody__addConstraintRef_28btTypedConstraint__29(HEAP32[$1 + 32 >> 2], $1);
  }
 }
 
 function btDiscreteDynamicsWorld__removeConstraint_28btTypedConstraint__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = HEAP32[$0 + 228 >> 2];
  label$1 : {
   if (($2 | 0) < 1) {
    break label$1
   }
   $5 = HEAP32[$0 + 236 >> 2];
   $4 = $5;
   while (1) {
    if (HEAP32[$4 >> 2] != ($1 | 0)) {
     $4 = $4 + 4 | 0;
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($2 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($2 | 0) <= ($3 | 0)) {
    break label$1
   }
   $3 = $2 + -1 | 0;
   $2 = $3 << 2;
   HEAP32[$4 >> 2] = HEAP32[$2 + $5 >> 2];
   HEAP32[$0 + 228 >> 2] = $3;
   HEAP32[$2 + HEAP32[$0 + 236 >> 2] >> 2] = $1;
  }
  btRigidBody__removeConstraintRef_28btTypedConstraint__29(HEAP32[$1 + 28 >> 2], $1);
  btRigidBody__removeConstraintRef_28btTypedConstraint__29(HEAP32[$1 + 32 >> 2], $1);
 }
 
 function btDiscreteDynamicsWorld__addAction_28btActionInterface__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = HEAP32[$0 + 296 >> 2];
  label$1 : {
   if (($2 | 0) != HEAP32[$0 + 300 >> 2]) {
    break label$1
   }
   $4 = $2 ? $2 << 1 : 1;
   if (($2 | 0) >= ($4 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$4) {
     break label$2
    }
    $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
    $2 = HEAP32[$0 + 296 >> 2];
   }
   if (($2 | 0) >= 1) {
    $5 = $2;
    while (1) {
     HEAP32[$3 + $6 >> 2] = HEAP32[$3 + HEAP32[$0 + 304 >> 2] >> 2];
     $3 = $3 + 4 | 0;
     $5 = $5 + -1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   $3 = HEAP32[$0 + 304 >> 2];
   if ($3) {
    if (HEAPU8[$0 + 308 | 0]) {
     btAlignedFreeInternal_28void__29($3);
     $2 = HEAP32[$0 + 296 >> 2];
    }
    HEAP32[$0 + 304 >> 2] = 0;
   }
   HEAP32[$0 + 304 >> 2] = $6;
   HEAP32[$0 + 300 >> 2] = $4;
   HEAP8[$0 + 308 | 0] = 1;
  }
  HEAP32[$0 + 296 >> 2] = $2 + 1;
  HEAP32[HEAP32[$0 + 304 >> 2] + ($2 << 2) >> 2] = $1;
 }
 
 function btDiscreteDynamicsWorld__removeAction_28btActionInterface__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = HEAP32[$0 + 296 >> 2];
  label$1 : {
   if (($2 | 0) < 1) {
    break label$1
   }
   $5 = HEAP32[$0 + 304 >> 2];
   $4 = $5;
   while (1) {
    if (HEAP32[$4 >> 2] != ($1 | 0)) {
     $4 = $4 + 4 | 0;
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($2 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($2 | 0) <= ($3 | 0)) {
    break label$1
   }
   $3 = $2 + -1 | 0;
   $2 = $3 << 2;
   HEAP32[$4 >> 2] = HEAP32[$2 + $5 >> 2];
   HEAP32[$0 + 296 >> 2] = $3;
   HEAP32[$2 + HEAP32[$0 + 304 >> 2] >> 2] = $1;
  }
 }
 
 function btDiscreteDynamicsWorld__addVehicle_28btActionInterface__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 64 >> 2]]($0, $1);
 }
 
 function btDiscreteDynamicsWorld__removeVehicle_28btActionInterface__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $1);
 }
 
 function btDiscreteDynamicsWorld__solveConstraints_28btContactSolverInfo__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0;
  $5 = global$0 - 16 | 0;
  global$0 = $5;
  CProfileSample__CProfileSample_28char_20const__29($5 + 8 | 0, 23280);
  $6 = HEAP32[$0 + 196 >> 2];
  $4 = HEAP32[$0 + 228 >> 2];
  if (($6 | 0) < ($4 | 0)) {
   if (HEAP32[$0 + 200 >> 2] < ($4 | 0)) {
    label$3 : {
     if (!$4) {
      $3 = $6;
      break label$3;
     }
     $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
     $3 = HEAP32[$0 + 196 >> 2];
    }
    if (($3 | 0) >= 1) {
     while (1) {
      HEAP32[$2 + $7 >> 2] = HEAP32[$2 + HEAP32[$0 + 204 >> 2] >> 2];
      $2 = $2 + 4 | 0;
      $3 = $3 + -1 | 0;
      if ($3) {
       continue
      }
      break;
     }
    }
    $2 = HEAP32[$0 + 204 >> 2];
    if ($2) {
     if (HEAPU8[$0 + 208 | 0]) {
      btAlignedFreeInternal_28void__29($2)
     }
     HEAP32[$0 + 204 >> 2] = 0;
    }
    HEAP32[$0 + 204 >> 2] = $7;
    HEAP32[$0 + 200 >> 2] = $4;
    HEAP8[$0 + 208 | 0] = 1;
   }
   $2 = $6 << 2;
   $3 = $4 - $6 | 0;
   while (1) {
    HEAP32[$2 + HEAP32[$0 + 204 >> 2] >> 2] = 0;
    $2 = $2 + 4 | 0;
    $3 = $3 + -1 | 0;
    if ($3) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 196 >> 2] = $4;
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0) | 0) >= 1) {
   $2 = 0;
   $3 = 0;
   while (1) {
    HEAP32[$2 + HEAP32[$0 + 204 >> 2] >> 2] = HEAP32[$2 + HEAP32[$0 + 236 >> 2] >> 2];
    $2 = $2 + 4 | 0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0) | 0)) {
     continue
    }
    break;
   };
  }
  $2 = HEAP32[$0 + 196 >> 2];
  if (($2 | 0) >= 2) {
   void_20btAlignedObjectArray_btTypedConstraint____quickSortInternal_btSortConstraintOnIslandPredicate__28btSortConstraintOnIslandPredicate_20const__2c_20int_2c_20int_29($0 + 192 | 0, $5, 0, $2 + -1 | 0)
  }
  $2 = 0;
  label$13 : {
   if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 104 >> 2]]($0)) {
    break label$13
   }
   $2 = HEAP32[$0 + 204 >> 2];
  }
  InplaceSolverIslandCallback__setup_28btContactSolverInfo__2c_20btTypedConstraint___2c_20int_2c_20btIDebugDraw__29(HEAP32[$0 + 212 >> 2], $1, $2, HEAP32[$0 + 196 >> 2], FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0);
  $2 = HEAP32[$0 + 216 >> 2];
  $3 = HEAP32[$0 + 24 >> 2];
  (((wasm2js_i32$1 = $2, wasm2js_i32$2 = HEAP32[$0 + 8 >> 2]), wasm2js_i32$3 = FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 36 >> 2]]($3) | 0), wasm2js_i32$0 = HEAP32[HEAP32[$2 >> 2] + 8 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
  btSimulationIslandManager__buildAndProcessIslands_28btDispatcher__2c_20btCollisionWorld__2c_20btSimulationIslandManager__IslandCallback__29(HEAP32[$0 + 220 >> 2], HEAP32[$0 + 24 >> 2], $0, HEAP32[$0 + 212 >> 2]);
  InplaceSolverIslandCallback__processConstraints_28_29(HEAP32[$0 + 212 >> 2]);
  $2 = HEAP32[$0 + 216 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2, $1, HEAP32[$0 + 72 >> 2]);
  CProfileSample___CProfileSample_28_29();
  global$0 = $5 + 16 | 0;
 }
 
 function void_20btAlignedObjectArray_btTypedConstraint____quickSortInternal_btSortConstraintOnIslandPredicate__28btSortConstraintOnIslandPredicate_20const__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  while (1) {
   $9 = HEAP32[$0 + 12 >> 2];
   $12 = $2;
   $11 = HEAP32[$9 + (($3 + $2 | 0) / 2 << 2) >> 2];
   $5 = $3;
   while (1) {
    $10 = HEAP32[HEAP32[$11 + 28 >> 2] + 208 >> 2];
    $13 = ($10 | 0) < 0;
    label$3 : {
     if (!$13) {
      $8 = $2 + -1 | 0;
      $7 = (($2 << 2) + $9 | 0) + -4 | 0;
      while (1) {
       $8 = $8 + 1 | 0;
       $7 = $7 + 4 | 0;
       $4 = HEAP32[$7 >> 2];
       $2 = HEAP32[HEAP32[$4 + 28 >> 2] + 208 >> 2];
       if (($2 | 0) <= -1) {
        $2 = HEAP32[HEAP32[$4 + 32 >> 2] + 208 >> 2]
       }
       if (($2 | 0) < ($10 | 0)) {
        continue
       }
       break;
      };
      break label$3;
     }
     $8 = $2 + -1 | 0;
     $7 = (($2 << 2) + $9 | 0) + -4 | 0;
     $6 = HEAP32[HEAP32[$11 + 32 >> 2] + 208 >> 2];
     while (1) {
      $8 = $8 + 1 | 0;
      $7 = $7 + 4 | 0;
      $4 = HEAP32[$7 >> 2];
      $2 = HEAP32[HEAP32[$4 + 28 >> 2] + 208 >> 2];
      if (($2 | 0) <= -1) {
       $2 = HEAP32[HEAP32[$4 + 32 >> 2] + 208 >> 2]
      }
      if (($2 | 0) < ($6 | 0)) {
       continue
      }
      break;
     };
    }
    label$9 : {
     if (!$13) {
      $2 = $5 + 1 | 0;
      $4 = ($5 << 2) + $9 | 0;
      while (1) {
       $5 = HEAP32[$4 >> 2];
       $6 = HEAP32[HEAP32[$5 + 28 >> 2] + 208 >> 2];
       if (($6 | 0) <= -1) {
        $6 = HEAP32[HEAP32[$5 + 32 >> 2] + 208 >> 2]
       }
       $4 = $4 + -4 | 0;
       $2 = $2 + -1 | 0;
       if (($10 | 0) < ($6 | 0)) {
        continue
       }
       break;
      };
      $4 = $4 + 4 | 0;
      break label$9;
     }
     $2 = $5 + 1 | 0;
     $4 = ($5 << 2) + $9 | 0;
     $5 = HEAP32[HEAP32[$11 + 32 >> 2] + 208 >> 2];
     while (1) {
      $10 = HEAP32[$4 >> 2];
      $6 = HEAP32[HEAP32[$10 + 28 >> 2] + 208 >> 2];
      if (($6 | 0) <= -1) {
       $6 = HEAP32[HEAP32[$10 + 32 >> 2] + 208 >> 2]
      }
      $4 = $4 + -4 | 0;
      $2 = $2 + -1 | 0;
      if (($5 | 0) < ($6 | 0)) {
       continue
      }
      break;
     };
     $4 = $4 + 4 | 0;
    }
    label$15 : {
     if (($8 | 0) > ($2 | 0)) {
      $5 = $2;
      $2 = $8;
      break label$15;
     }
     $6 = HEAP32[$7 >> 2];
     HEAP32[$7 >> 2] = HEAP32[$4 >> 2];
     HEAP32[HEAP32[$0 + 12 >> 2] + ($2 << 2) >> 2] = $6;
     $5 = $2 + -1 | 0;
     $2 = $8 + 1 | 0;
    }
    if (($2 | 0) <= ($5 | 0)) {
     $9 = HEAP32[$0 + 12 >> 2];
     continue;
    }
    break;
   };
   if (($5 | 0) > ($12 | 0)) {
    void_20btAlignedObjectArray_btTypedConstraint____quickSortInternal_btSortConstraintOnIslandPredicate__28btSortConstraintOnIslandPredicate_20const__2c_20int_2c_20int_29($0, $1, $12, $5)
   }
   if (($2 | 0) < ($3 | 0)) {
    continue
   }
   break;
  };
 }
 
 function InplaceSolverIslandCallback__setup_28btContactSolverInfo__2c_20btTypedConstraint___2c_20int_2c_20btIDebugDraw__29($0, $1, $2, $3, $4) {
  HEAP32[$0 + 20 >> 2] = $4;
  HEAP32[$0 + 16 >> 2] = $3;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $1;
  $1 = HEAP32[$0 + 32 >> 2];
  if (($1 | 0) <= -1) {
   if (HEAP32[$0 + 36 >> 2] <= -1) {
    $2 = HEAP32[$0 + 40 >> 2];
    if ($2) {
     if (HEAPU8[$0 + 44 | 0]) {
      btAlignedFreeInternal_28void__29($2)
     }
     HEAP32[$0 + 40 >> 2] = 0;
    }
    HEAP32[$0 + 36 >> 2] = 0;
    HEAP32[$0 + 40 >> 2] = 0;
    HEAP8[$0 + 44 | 0] = 1;
   }
   $2 = $1 << 2;
   while (1) {
    HEAP32[$2 + HEAP32[$0 + 40 >> 2] >> 2] = 0;
    $2 = $2 + 4 | 0;
    $3 = $1 + 1 | 0;
    $4 = $3 >>> 0 >= $1 >>> 0;
    $1 = $3;
    if ($4) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 32 >> 2] = 0;
  $1 = HEAP32[$0 + 52 >> 2];
  if (($1 | 0) <= -1) {
   if (HEAP32[$0 + 56 >> 2] <= -1) {
    $2 = HEAP32[$0 + 60 >> 2];
    if ($2) {
     if (HEAPU8[$0 - -64 | 0]) {
      btAlignedFreeInternal_28void__29($2)
     }
     HEAP32[$0 + 60 >> 2] = 0;
    }
    HEAP32[$0 + 56 >> 2] = 0;
    HEAP32[$0 + 60 >> 2] = 0;
    HEAP8[$0 - -64 | 0] = 1;
   }
   $2 = $1 << 2;
   while (1) {
    HEAP32[$2 + HEAP32[$0 + 60 >> 2] >> 2] = 0;
    $2 = $2 + 4 | 0;
    $3 = $1 + 1 | 0;
    $4 = $3 >>> 0 >= $1 >>> 0;
    $1 = $3;
    if ($4) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 52 >> 2] = 0;
  $1 = HEAP32[$0 + 72 >> 2];
  if (($1 | 0) <= -1) {
   if (HEAP32[$0 + 76 >> 2] <= -1) {
    $2 = HEAP32[$0 + 80 >> 2];
    if ($2) {
     if (HEAPU8[$0 + 84 | 0]) {
      btAlignedFreeInternal_28void__29($2)
     }
     HEAP32[$0 + 80 >> 2] = 0;
    }
    HEAP32[$0 + 76 >> 2] = 0;
    HEAP32[$0 + 80 >> 2] = 0;
    HEAP8[$0 + 84 | 0] = 1;
   }
   $2 = $1 << 2;
   while (1) {
    HEAP32[$2 + HEAP32[$0 + 80 >> 2] >> 2] = 0;
    $2 = $2 + 4 | 0;
    $3 = $1 + 1 | 0;
    $4 = $3 >>> 0 >= $1 >>> 0;
    $1 = $3;
    if ($4) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 72 >> 2] = 0;
 }
 
 function InplaceSolverIslandCallback__processConstraints_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $6 = HEAP32[$0 + 8 >> 2];
  $7 = $6;
  $3 = HEAP32[$0 + 32 >> 2];
  if ($3) {
   $1 = HEAP32[$0 + 40 >> 2]
  }
  $4 = HEAP32[$0 + 52 >> 2];
  if ($4) {
   $2 = HEAP32[$0 + 60 >> 2]
  }
  $8 = $2;
  $2 = HEAP32[$0 + 72 >> 2];
  $5 = 0;
  label$3 : {
   if (!$2) {
    break label$3
   }
   $5 = HEAP32[$0 + 80 >> 2];
  }
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 12 >> 2]]($7, $1, $3, $8, $4, $5, $2, HEAP32[$0 + 4 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]));
  $2 = HEAP32[$0 + 32 >> 2];
  if (($2 | 0) <= -1) {
   if (HEAP32[$0 + 36 >> 2] <= -1) {
    $1 = HEAP32[$0 + 40 >> 2];
    if ($1) {
     if (HEAPU8[$0 + 44 | 0]) {
      btAlignedFreeInternal_28void__29($1)
     }
     HEAP32[$0 + 40 >> 2] = 0;
    }
    HEAP32[$0 + 36 >> 2] = 0;
    HEAP32[$0 + 40 >> 2] = 0;
    HEAP8[$0 + 44 | 0] = 1;
   }
   $1 = $2 << 2;
   while (1) {
    HEAP32[$1 + HEAP32[$0 + 40 >> 2] >> 2] = 0;
    $1 = $1 + 4 | 0;
    $3 = $2 + 1 | 0;
    $4 = $3 >>> 0 >= $2 >>> 0;
    $2 = $3;
    if ($4) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 32 >> 2] = 0;
  $2 = HEAP32[$0 + 52 >> 2];
  if (($2 | 0) <= -1) {
   if (HEAP32[$0 + 56 >> 2] <= -1) {
    $1 = HEAP32[$0 + 60 >> 2];
    if ($1) {
     if (HEAPU8[$0 - -64 | 0]) {
      btAlignedFreeInternal_28void__29($1)
     }
     HEAP32[$0 + 60 >> 2] = 0;
    }
    HEAP32[$0 + 56 >> 2] = 0;
    HEAP32[$0 + 60 >> 2] = 0;
    HEAP8[$0 - -64 | 0] = 1;
   }
   $1 = $2 << 2;
   while (1) {
    HEAP32[$1 + HEAP32[$0 + 60 >> 2] >> 2] = 0;
    $1 = $1 + 4 | 0;
    $3 = $2 + 1 | 0;
    $4 = $3 >>> 0 >= $2 >>> 0;
    $2 = $3;
    if ($4) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 52 >> 2] = 0;
  $2 = HEAP32[$0 + 72 >> 2];
  if (($2 | 0) <= -1) {
   if (HEAP32[$0 + 76 >> 2] <= -1) {
    $1 = HEAP32[$0 + 80 >> 2];
    if ($1) {
     if (HEAPU8[$0 + 84 | 0]) {
      btAlignedFreeInternal_28void__29($1)
     }
     HEAP32[$0 + 80 >> 2] = 0;
    }
    HEAP32[$0 + 76 >> 2] = 0;
    HEAP32[$0 + 80 >> 2] = 0;
    HEAP8[$0 + 84 | 0] = 1;
   }
   $1 = $2 << 2;
   while (1) {
    HEAP32[$1 + HEAP32[$0 + 80 >> 2] >> 2] = 0;
    $1 = $1 + 4 | 0;
    $3 = $2 + 1 | 0;
    $4 = $3 >>> 0 >= $2 >>> 0;
    $2 = $3;
    if ($4) {
     continue
    }
    break;
   };
  }
  HEAP32[$0 + 72 >> 2] = 0;
 }
 
 function btDiscreteDynamicsWorld__calculateSimulationIslands_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  CProfileSample__CProfileSample_28char_20const__29($8 + 8 | 0, 23297);
  $1 = HEAP32[$0 + 220 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 8 >> 2]]($1, $0, HEAP32[$0 + 24 >> 2]);
  $7 = HEAP32[$0 + 324 >> 2];
  if (($7 | 0) >= 1) {
   $9 = HEAP32[$0 + 332 >> 2];
   while (1) {
    $1 = HEAP32[($6 << 2) + $9 >> 2];
    $2 = HEAP32[$1 + 772 >> 2];
    label$3 : {
     if (!$2) {
      break label$3
     }
     $1 = HEAP32[$1 + 776 >> 2];
     if (!$1) {
      break label$3
     }
     if (HEAP32[$2 + 204 >> 2] & 3) {
      break label$3
     }
     if (HEAPU8[$1 + 204 | 0] & 3) {
      break label$3
     }
     $3 = HEAP32[$1 + 208 >> 2];
     $1 = HEAP32[HEAP32[$0 + 220 >> 2] + 16 >> 2];
     $2 = HEAP32[$2 + 208 >> 2];
     $5 = $1 + ($2 << 3) | 0;
     $4 = HEAP32[$5 >> 2];
     if (($4 | 0) != ($2 | 0)) {
      while (1) {
       $2 = ($4 << 3) + $1 | 0;
       HEAP32[$5 >> 2] = HEAP32[$2 >> 2];
       $2 = HEAP32[$2 >> 2];
       $5 = ($2 << 3) + $1 | 0;
       $4 = HEAP32[$5 >> 2];
       if (($2 | 0) != ($4 | 0)) {
        continue
       }
       break;
      }
     }
     $5 = ($3 << 3) + $1 | 0;
     $4 = HEAP32[$5 >> 2];
     if (($4 | 0) != ($3 | 0)) {
      while (1) {
       $3 = ($4 << 3) + $1 | 0;
       HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
       $3 = HEAP32[$3 >> 2];
       $5 = ($3 << 3) + $1 | 0;
       $4 = HEAP32[$5 >> 2];
       if (($3 | 0) != ($4 | 0)) {
        continue
       }
       break;
      }
     }
     if (($2 | 0) == ($3 | 0)) {
      break label$3
     }
     $2 = ($2 << 3) + $1 | 0;
     HEAP32[$2 >> 2] = $3;
     $1 = ($3 << 3) + $1 | 0;
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + HEAP32[$2 + 4 >> 2];
    }
    $6 = $6 + 1 | 0;
    if (($6 | 0) < ($7 | 0)) {
     continue
    }
    break;
   };
  }
  $7 = HEAP32[$0 + 228 >> 2];
  if (($7 | 0) >= 1) {
   $9 = HEAP32[$0 + 236 >> 2];
   $5 = 0;
   while (1) {
    $1 = HEAP32[($5 << 2) + $9 >> 2];
    label$10 : {
     if (!HEAPU8[$1 + 20 | 0]) {
      break label$10
     }
     $2 = HEAP32[$1 + 28 >> 2];
     if (HEAPU8[$2 + 204 | 0] & 3) {
      break label$10
     }
     $1 = HEAP32[$1 + 32 >> 2];
     if (HEAPU8[$1 + 204 | 0] & 3) {
      break label$10
     }
     $3 = HEAP32[$1 + 208 >> 2];
     $1 = HEAP32[HEAP32[$0 + 220 >> 2] + 16 >> 2];
     $2 = HEAP32[$2 + 208 >> 2];
     $4 = $1 + ($2 << 3) | 0;
     $6 = HEAP32[$4 >> 2];
     if (($6 | 0) != ($2 | 0)) {
      while (1) {
       $2 = ($6 << 3) + $1 | 0;
       HEAP32[$4 >> 2] = HEAP32[$2 >> 2];
       $2 = HEAP32[$2 >> 2];
       $4 = ($2 << 3) + $1 | 0;
       $6 = HEAP32[$4 >> 2];
       if (($2 | 0) != ($6 | 0)) {
        continue
       }
       break;
      }
     }
     $4 = ($3 << 3) + $1 | 0;
     $6 = HEAP32[$4 >> 2];
     if (($6 | 0) != ($3 | 0)) {
      while (1) {
       $3 = ($6 << 3) + $1 | 0;
       HEAP32[$4 >> 2] = HEAP32[$3 >> 2];
       $3 = HEAP32[$3 >> 2];
       $4 = ($3 << 3) + $1 | 0;
       $6 = HEAP32[$4 >> 2];
       if (($3 | 0) != ($6 | 0)) {
        continue
       }
       break;
      }
     }
     if (($2 | 0) == ($3 | 0)) {
      break label$10
     }
     $2 = ($2 << 3) + $1 | 0;
     HEAP32[$2 >> 2] = $3;
     $1 = ($3 << 3) + $1 | 0;
     HEAP32[$1 + 4 >> 2] = HEAP32[$1 + 4 >> 2] + HEAP32[$2 + 4 >> 2];
    }
    $5 = $5 + 1 | 0;
    if (($7 | 0) != ($5 | 0)) {
     continue
    }
    break;
   };
  }
  $1 = HEAP32[$0 + 220 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 12 >> 2]]($1, $0);
  CProfileSample___CProfileSample_28_29();
  global$0 = $8 + 16 | 0;
 }
 
 function btDiscreteDynamicsWorld__createPredictiveContactsInternal_28btRigidBody___2c_20int_2c_20float_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = Math_fround(0), $51 = Math_fround(0), $52 = Math_fround(0);
  $5 = global$0 - 496 | 0;
  global$0 = $5;
  if (($2 | 0) >= 1) {
   $22 = $5 + 124 | 0;
   $42 = $5 + 92 | 0;
   $43 = $5 + 72 | 0;
   $44 = $5 + 368 | 0;
   $31 = $5 + 248 | 0;
   $28 = $5 + 232 | 0;
   $32 = $5 + 464 | 0;
   $33 = $5 + 216 | 0;
   $45 = $5 + 448 | 0;
   $34 = $5 + 292 | 0;
   $46 = $5 + 352 | 0;
   $47 = $5 + 336 | 0;
   $35 = $5 + 480 | 0;
   while (1) {
    $9 = HEAP32[($29 << 2) + $1 >> 2];
    HEAP32[$9 + 268 >> 2] = 1065353216;
    label$3 : {
     label$4 : {
      $8 = HEAP32[$9 + 220 >> 2] + -2 | 0;
      if ($8 >>> 0 > 3) {
       break label$4
      }
      switch ($8 - 1 | 0) {
      case 0:
      case 1:
       break label$4;
      default:
       break label$3;
      };
     }
     if (HEAPU8[$9 + 204 | 0] & 3) {
      break label$3
     }
     btRigidBody__predictIntegratedTransform_28float_2c_20btTransform__29($9, $3, $5 + 432 | 0);
     if (!HEAPU8[$0 + 44 | 0]) {
      break label$3
     }
     $12 = HEAPF32[$9 + 276 >> 2];
     $12 = Math_fround($12 * $12);
     if ($12 == Math_fround(0.0)) {
      break label$3
     }
     $18 = $9 + 52 | 0;
     $13 = Math_fround(HEAPF32[$5 + 480 >> 2] - HEAPF32[$18 >> 2]);
     $14 = Math_fround($13 * $13);
     $13 = Math_fround(HEAPF32[$5 + 484 >> 2] - HEAPF32[$9 + 56 >> 2]);
     $14 = Math_fround($14 + Math_fround($13 * $13));
     $13 = Math_fround(HEAPF32[$5 + 488 >> 2] - HEAPF32[$9 + 60 >> 2]);
     if (!($12 < Math_fround($14 + Math_fround($13 * $13)))) {
      break label$3
     }
     CProfileSample__CProfileSample_28char_20const__29($5 + 424 | 0, 23324);
     if (HEAP32[HEAP32[$9 + 192 >> 2] + 4 >> 2] <= 19) {
      HEAP32[702] = HEAP32[702] + 1;
      $8 = HEAP32[$0 + 68 >> 2];
      $8 = FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 36 >> 2]]($8) | 0;
      $6 = $18;
      $10 = HEAP32[$6 >> 2];
      $7 = HEAP32[$6 + 4 >> 2];
      $4 = $47;
      HEAP32[$4 >> 2] = $10;
      HEAP32[$4 + 4 >> 2] = $7;
      $36 = $6 + 8 | 0;
      $6 = $36;
      $10 = HEAP32[$6 >> 2];
      $7 = $4 + 8 | 0;
      $4 = HEAP32[$6 + 4 >> 2];
      HEAP32[$7 >> 2] = $10;
      HEAP32[$7 + 4 >> 2] = $4;
      $6 = $35;
      $10 = HEAP32[$6 >> 2];
      $7 = HEAP32[$6 + 4 >> 2];
      $4 = $46;
      HEAP32[$4 >> 2] = $10;
      HEAP32[$4 + 4 >> 2] = $7;
      $10 = $6 + 8 | 0;
      $6 = $10;
      $11 = HEAP32[$6 >> 2];
      $7 = $4 + 8 | 0;
      $4 = HEAP32[$6 + 4 >> 2];
      HEAP32[$7 >> 2] = $11;
      HEAP32[$7 + 4 >> 2] = $4;
      HEAP32[$5 + 332 >> 2] = -1;
      HEAP32[$5 + 324 >> 2] = 1065353216;
      HEAP32[$5 + 328 >> 2] = 1;
      HEAP32[$5 + 320 >> 2] = 23736;
      HEAP32[$5 + 400 >> 2] = 0;
      HEAP32[$5 + 408 >> 2] = 0;
      HEAP32[$5 + 416 >> 2] = HEAP32[$0 + 24 >> 2];
      HEAP32[$5 + 412 >> 2] = $8;
      HEAP32[$5 + 404 >> 2] = $9;
      $8 = HEAP32[$9 + 272 >> 2];
      btConvexInternalShape__btConvexInternalShape_28_29($5 + 264 | 0);
      $7 = $34;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      $7 = $7 + 8 | 0;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      HEAP32[$34 + 16 >> 2] = 0;
      HEAP32[$5 + 288 >> 2] = 1065353216;
      HEAP32[$5 + 280 >> 2] = 1065353216;
      HEAP32[$5 + 284 >> 2] = 1065353216;
      HEAP32[$5 + 268 >> 2] = 8;
      HEAP32[$5 + 264 >> 2] = 9852;
      HEAP32[$5 + 316 >> 2] = 0;
      HEAP32[$5 + 312 >> 2] = $8;
      HEAP32[$5 + 296 >> 2] = $8;
      HEAP32[$5 + 408 >> 2] = HEAP32[$0 + 56 >> 2];
      $6 = HEAP32[$9 + 188 >> 2];
      $4 = HEAP32[$6 + 4 >> 2];
      $7 = HEAP32[$6 + 8 >> 2];
      HEAP32[$5 + 328 >> 2] = $4;
      HEAP32[$5 + 332 >> 2] = $7;
      $6 = $5 + 440 | 0;
      $11 = HEAP32[$6 >> 2];
      $4 = HEAP32[$6 + 4 >> 2];
      $19 = $5 + 208 | 0;
      $7 = $19;
      HEAP32[$7 >> 2] = $11;
      HEAP32[$7 + 4 >> 2] = $4;
      $6 = $35;
      $11 = HEAP32[$6 >> 2];
      $7 = HEAP32[$6 + 4 >> 2];
      $4 = $31;
      HEAP32[$4 >> 2] = $11;
      HEAP32[$4 + 4 >> 2] = $7;
      $6 = $32 + 8 | 0;
      $15 = HEAP32[$6 >> 2];
      $4 = HEAP32[$6 + 4 >> 2];
      $11 = $28 + 8 | 0;
      $7 = $11;
      HEAP32[$7 >> 2] = $15;
      HEAP32[$7 + 4 >> 2] = $4;
      $6 = $32;
      $15 = HEAP32[$6 >> 2];
      $7 = HEAP32[$6 + 4 >> 2];
      $4 = $28;
      HEAP32[$4 >> 2] = $15;
      HEAP32[$4 + 4 >> 2] = $7;
      $6 = $45;
      $15 = HEAP32[$6 >> 2];
      $4 = HEAP32[$6 + 4 >> 2];
      $7 = $33;
      HEAP32[$7 >> 2] = $15;
      HEAP32[$7 + 4 >> 2] = $4;
      $6 = $6 + 8 | 0;
      $15 = HEAP32[$6 >> 2];
      $20 = $7 + 8 | 0;
      $4 = $20;
      $7 = HEAP32[$6 + 4 >> 2];
      HEAP32[$4 >> 2] = $15;
      HEAP32[$4 + 4 >> 2] = $7;
      $6 = $10;
      $10 = HEAP32[$6 >> 2];
      $4 = HEAP32[$6 + 4 >> 2];
      $7 = $31 + 8 | 0;
      HEAP32[$7 >> 2] = $10;
      HEAP32[$7 + 4 >> 2] = $4;
      $7 = HEAP32[$5 + 436 >> 2];
      HEAP32[$5 + 200 >> 2] = HEAP32[$5 + 432 >> 2];
      HEAP32[$5 + 204 >> 2] = $7;
      $8 = $9 + 4 | 0;
      $6 = $8 + 8 | 0;
      $48 = HEAP32[$6 >> 2];
      $15 = HEAP32[$6 + 4 >> 2];
      $49 = HEAP32[$8 >> 2];
      $10 = HEAP32[$8 + 4 >> 2];
      $6 = $9 + 20 | 0;
      $30 = HEAP32[$6 >> 2];
      $4 = HEAP32[$6 + 4 >> 2];
      $7 = $33;
      HEAP32[$7 >> 2] = $30;
      HEAP32[$7 + 4 >> 2] = $4;
      $6 = $9 + 28 | 0;
      $30 = HEAP32[$6 >> 2];
      $7 = HEAP32[$6 + 4 >> 2];
      $4 = $20;
      HEAP32[$4 >> 2] = $30;
      HEAP32[$4 + 4 >> 2] = $7;
      $4 = $19;
      HEAP32[$4 >> 2] = $48;
      HEAP32[$4 + 4 >> 2] = $15;
      HEAP32[$5 + 200 >> 2] = $49;
      HEAP32[$5 + 204 >> 2] = $10;
      $6 = $9 + 36 | 0;
      $10 = HEAP32[$6 >> 2];
      $4 = HEAP32[$6 + 4 >> 2];
      $7 = $28;
      HEAP32[$7 >> 2] = $10;
      HEAP32[$7 + 4 >> 2] = $4;
      $6 = $9 + 44 | 0;
      $10 = HEAP32[$6 >> 2];
      $7 = HEAP32[$6 + 4 >> 2];
      $4 = $11;
      HEAP32[$4 >> 2] = $10;
      HEAP32[$4 + 4 >> 2] = $7;
      btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const($0, $5 + 264 | 0, $8, $5 + 200 | 0, $5 + 320 | 0, Math_fround(0.0));
      $12 = HEAPF32[$5 + 324 >> 2];
      if (!!($12 < Math_fround(1.0))) {
       $13 = HEAPF32[$9 + 60 >> 2];
       $14 = HEAPF32[$9 + 56 >> 2];
       $16 = HEAPF32[$9 + 52 >> 2];
       $17 = HEAPF32[$5 + 376 >> 2];
       $23 = HEAPF32[$5 + 488 >> 2];
       $24 = HEAPF32[$5 + 372 >> 2];
       $25 = HEAPF32[$5 + 484 >> 2];
       $26 = HEAPF32[$5 + 368 >> 2];
       $27 = HEAPF32[$5 + 480 >> 2];
       $8 = HEAP32[$0 + 24 >> 2];
       $20 = FUNCTION_TABLE[HEAP32[HEAP32[$8 >> 2] + 12 >> 2]]($8, $9, HEAP32[$5 + 400 >> 2]) | 0;
       $21 = Math_fround($12 * Math_fround($25 - $14));
       $14 = Math_fround($12 * Math_fround($27 - $16));
       $37 = Math_fround($12 * Math_fround($23 - $13));
       $16 = Math_fround(Math_fround(Math_fround(-Math_fround($24 * $21)) - Math_fround($26 * $14)) - Math_fround($17 * $37));
       $11 = HEAP32[$0 + 324 >> 2];
       label$7 : {
        if (($11 | 0) != HEAP32[$0 + 328 >> 2]) {
         break label$7
        }
        $4 = $11 ? $11 << 1 : 1;
        if (($11 | 0) >= ($4 | 0)) {
         break label$7
        }
        label$8 : {
         if (!$4) {
          $19 = 0;
          break label$8;
         }
         $19 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
         $11 = HEAP32[$0 + 324 >> 2];
        }
        if (($11 | 0) >= 1) {
         $8 = 0;
         $10 = $11;
         while (1) {
          HEAP32[$8 + $19 >> 2] = HEAP32[$8 + HEAP32[$0 + 332 >> 2] >> 2];
          $8 = $8 + 4 | 0;
          $10 = $10 + -1 | 0;
          if ($10) {
           continue
          }
          break;
         };
        }
        $8 = HEAP32[$0 + 332 >> 2];
        if ($8) {
         if (HEAPU8[$0 + 336 | 0]) {
          btAlignedFreeInternal_28void__29($8);
          $11 = HEAP32[$0 + 324 >> 2];
         }
         HEAP32[$0 + 332 >> 2] = 0;
        }
        HEAP32[$0 + 332 >> 2] = $19;
        HEAP8[$0 + 336 | 0] = 1;
        HEAP32[$0 + 328 >> 2] = $4;
       }
       HEAP32[HEAP32[$0 + 332 >> 2] + ($11 << 2) >> 2] = $20;
       HEAP32[$0 + 324 >> 2] = $11 + 1;
       $8 = HEAP32[$5 + 400 >> 2];
       $23 = HEAPF32[$8 + 20 >> 2];
       $24 = HEAPF32[$8 + 36 >> 2];
       $25 = HEAPF32[$8 + 40 >> 2];
       $26 = HEAPF32[$8 + 8 >> 2];
       $27 = HEAPF32[$8 + 24 >> 2];
       $12 = HEAPF32[$8 + 60 >> 2];
       $50 = HEAPF32[$8 + 52 >> 2];
       $13 = HEAPF32[$8 + 56 >> 2];
       $38 = HEAPF32[$8 + 44 >> 2];
       $39 = HEAPF32[$8 + 12 >> 2];
       $40 = HEAPF32[$8 + 28 >> 2];
       $41 = HEAPF32[$8 + 4 >> 2];
       $17 = HEAPF32[$9 + 60 >> 2];
       $51 = HEAPF32[$9 + 52 >> 2];
       $52 = HEAPF32[$9 + 56 >> 2];
       $4 = $5 + 16 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $42;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $4 + 8 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $22;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $4 + 8 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $22 + 16 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $22 + 24 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       $4 = $22 + 32 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       HEAP32[$22 + 40 >> 2] = 0;
       $6 = $44;
       $10 = HEAP32[$6 >> 2];
       $4 = HEAP32[$6 + 4 >> 2];
       $7 = $43;
       HEAP32[$7 >> 2] = $10;
       HEAP32[$7 + 4 >> 2] = $4;
       $6 = $6 + 8 | 0;
       $10 = HEAP32[$6 >> 2];
       $4 = $7 + 8 | 0;
       $7 = HEAP32[$6 + 4 >> 2];
       HEAP32[$4 >> 2] = $10;
       HEAP32[$4 + 4 >> 2] = $7;
       HEAP32[$5 + 8 >> 2] = 0;
       HEAP32[$5 + 12 >> 2] = 0;
       HEAP32[$5 + 36 >> 2] = 0;
       HEAPF32[$5 + 88 >> 2] = $16;
       $14 = Math_fround($14 + $51);
       $16 = Math_fround($21 + $52);
       $17 = Math_fround($37 + $17);
       $21 = Math_fround(-$50);
       HEAPF32[$5 + 32 >> 2] = Math_fround(Math_fround(Math_fround($39 * $14) + Math_fround($40 * $16)) + Math_fround($38 * $17)) + Math_fround(Math_fround(Math_fround($39 * $21) - Math_fround($40 * $13)) - Math_fround($38 * $12));
       HEAPF32[$5 + 28 >> 2] = Math_fround(Math_fround(Math_fround($14 * $26) + Math_fround($16 * $27)) + Math_fround($17 * $25)) + Math_fround(Math_fround(Math_fround($26 * $21) - Math_fround($27 * $13)) - Math_fround($25 * $12));
       HEAPF32[$5 + 24 >> 2] = Math_fround(Math_fround(Math_fround($14 * $41) + Math_fround($16 * $23)) + Math_fround($17 * $24)) + Math_fround(Math_fround(Math_fround($41 * $21) - Math_fround($23 * $13)) - Math_fround($24 * $12));
       $8 = Math_imul(btPersistentManifold__addManifoldPoint_28btManifoldPoint_20const__2c_20bool_29($20, $5 + 8 | 0), 192) + $20 | 0;
       HEAP32[$8 + 100 >> 2] = 0;
       HEAPF32[$8 + 88 >> 2] = Math_min(Math_fround(Math_max(Math_fround(HEAPF32[$9 + 228 >> 2] * HEAPF32[HEAP32[$5 + 400 >> 2] + 228 >> 2]), Math_fround(-10.0))), Math_fround(10.0));
       $6 = $18;
       $18 = HEAP32[$6 >> 2];
       $4 = HEAP32[$6 + 4 >> 2];
       $7 = $8 + 52 | 0;
       HEAP32[$7 >> 2] = $18;
       HEAP32[$7 + 4 >> 2] = $4;
       $6 = $36;
       $18 = HEAP32[$6 >> 2];
       $7 = HEAP32[$6 + 4 >> 2];
       $4 = $8 + 60 | 0;
       HEAP32[$4 >> 2] = $18;
       HEAP32[$4 + 4 >> 2] = $7;
       HEAP32[$8 + 48 >> 2] = 0;
       HEAPF32[$8 + 44 >> 2] = $17;
       HEAPF32[$8 + 40 >> 2] = $16;
       HEAPF32[$8 + 36 >> 2] = $14;
      }
     }
     CProfileSample___CProfileSample_28_29();
    }
    $29 = $29 + 1 | 0;
    if (($2 | 0) != ($29 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $5 + 496 | 0;
 }
 
 function btDiscreteDynamicsWorld__createPredictiveContacts_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  CProfileSample__CProfileSample_28char_20const__29($3, 23388);
  CProfileSample__CProfileSample_28char_20const__29($3 + 8 | 0, 23351);
  $4 = HEAP32[$0 + 332 >> 2];
  if (HEAP32[$0 + 324 >> 2] >= 1) {
   while (1) {
    $5 = HEAP32[$0 + 24 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, HEAP32[$2 + $4 >> 2]);
    $2 = $2 + 4 | 0;
    $4 = HEAP32[$0 + 332 >> 2];
    $6 = $6 + 1 | 0;
    if (($6 | 0) < HEAP32[$0 + 324 >> 2]) {
     continue
    }
    break;
   }
  }
  if ($4) {
   if (HEAPU8[$0 + 336 | 0]) {
    btAlignedFreeInternal_28void__29($4)
   }
   HEAP32[$0 + 332 >> 2] = 0;
  }
  HEAP32[$0 + 332 >> 2] = 0;
  HEAP32[$0 + 324 >> 2] = 0;
  HEAP32[$0 + 328 >> 2] = 0;
  HEAP8[$0 + 336 | 0] = 1;
  CProfileSample___CProfileSample_28_29();
  $2 = HEAP32[$0 + 248 >> 2];
  if (($2 | 0) >= 1) {
   btDiscreteDynamicsWorld__createPredictiveContactsInternal_28btRigidBody___2c_20int_2c_20float_29($0, HEAP32[$0 + 256 >> 2], $2, $1)
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $3 + 16 | 0;
 }
 
 function btDiscreteDynamicsWorld__integrateTransformsInternal_28btRigidBody___2c_20int_2c_20float_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = Math_fround(0), $28 = 0, $29 = 0, $30 = 0;
  $5 = global$0 - 304 | 0;
  global$0 = $5;
  if (($2 | 0) >= 1) {
   $17 = $5 + 56 | 0;
   $14 = $5 + 40 | 0;
   $18 = $5 + 272 | 0;
   $19 = $5 + 24 | 0;
   $24 = $5 + 256 | 0;
   $20 = $5 + 100 | 0;
   $25 = $5 + 160 | 0;
   $26 = $5 + 144 | 0;
   $21 = $5 + 288 | 0;
   while (1) {
    $9 = HEAP32[$1 >> 2];
    HEAP32[$9 + 268 >> 2] = 1065353216;
    label$3 : {
     label$4 : {
      $12 = HEAP32[$9 + 220 >> 2] + -2 | 0;
      if ($12 >>> 0 > 3) {
       break label$4
      }
      switch ($12 - 1 | 0) {
      case 0:
      case 1:
       break label$4;
      default:
       break label$3;
      };
     }
     if (HEAPU8[$9 + 204 | 0] & 3) {
      break label$3
     }
     btRigidBody__predictIntegratedTransform_28float_2c_20btTransform__29($9, $3, $5 + 240 | 0);
     label$5 : {
      if (!HEAPU8[$0 + 44 | 0]) {
       break label$5
      }
      $10 = HEAPF32[$9 + 276 >> 2];
      $10 = Math_fround($10 * $10);
      if ($10 == Math_fround(0.0)) {
       break label$5
      }
      $27 = $10;
      $8 = $9 + 52 | 0;
      $10 = Math_fround(HEAPF32[$5 + 288 >> 2] - HEAPF32[$8 >> 2]);
      $15 = Math_fround($10 * $10);
      $10 = Math_fround(HEAPF32[$5 + 292 >> 2] - HEAPF32[$9 + 56 >> 2]);
      $15 = Math_fround($15 + Math_fround($10 * $10));
      $10 = Math_fround(HEAPF32[$5 + 296 >> 2] - HEAPF32[$9 + 60 >> 2]);
      if (!($27 < Math_fround($15 + Math_fround($10 * $10)))) {
       break label$5
      }
      CProfileSample__CProfileSample_28char_20const__29($5 + 232 | 0, 23413);
      label$6 : {
       if (HEAP32[HEAP32[$9 + 192 >> 2] + 4 >> 2] <= 19) {
        $12 = 0;
        HEAP32[702] = HEAP32[702] + 1;
        $11 = HEAP32[$0 + 68 >> 2];
        $11 = FUNCTION_TABLE[HEAP32[HEAP32[$11 >> 2] + 36 >> 2]]($11) | 0;
        $4 = $8;
        $8 = HEAP32[$4 >> 2];
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $26;
        HEAP32[$7 >> 2] = $8;
        HEAP32[$7 + 4 >> 2] = $6;
        $4 = $4 + 8 | 0;
        $8 = HEAP32[$4 >> 2];
        $6 = $7 + 8 | 0;
        $7 = HEAP32[$4 + 4 >> 2];
        HEAP32[$6 >> 2] = $8;
        HEAP32[$6 + 4 >> 2] = $7;
        $4 = $21;
        $8 = HEAP32[$4 >> 2];
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $25;
        HEAP32[$7 >> 2] = $8;
        HEAP32[$7 + 4 >> 2] = $6;
        $13 = $4 + 8 | 0;
        $4 = $13;
        $8 = HEAP32[$4 >> 2];
        $6 = $7 + 8 | 0;
        $7 = HEAP32[$4 + 4 >> 2];
        HEAP32[$6 >> 2] = $8;
        HEAP32[$6 + 4 >> 2] = $7;
        HEAP32[$5 + 140 >> 2] = -1;
        HEAP32[$5 + 132 >> 2] = 1065353216;
        HEAP32[$5 + 136 >> 2] = 1;
        HEAP32[$5 + 128 >> 2] = 23736;
        HEAP32[$5 + 208 >> 2] = 0;
        HEAP32[$5 + 216 >> 2] = 0;
        HEAP32[$5 + 224 >> 2] = HEAP32[$0 + 24 >> 2];
        HEAP32[$5 + 220 >> 2] = $11;
        HEAP32[$5 + 212 >> 2] = $9;
        $8 = HEAP32[$9 + 272 >> 2];
        btConvexInternalShape__btConvexInternalShape_28_29($5 + 72 | 0);
        $6 = $20;
        HEAP32[$6 >> 2] = 0;
        HEAP32[$6 + 4 >> 2] = 0;
        $6 = $6 + 8 | 0;
        HEAP32[$6 >> 2] = 0;
        HEAP32[$6 + 4 >> 2] = 0;
        HEAP32[$20 + 16 >> 2] = 0;
        HEAP32[$5 + 96 >> 2] = 1065353216;
        HEAP32[$5 + 88 >> 2] = 1065353216;
        HEAP32[$5 + 92 >> 2] = 1065353216;
        HEAP32[$5 + 76 >> 2] = 8;
        HEAP32[$5 + 72 >> 2] = 9852;
        HEAP32[$5 + 124 >> 2] = 0;
        HEAP32[$5 + 120 >> 2] = $8;
        HEAP32[$5 + 104 >> 2] = $8;
        HEAP32[$5 + 216 >> 2] = HEAP32[$0 + 56 >> 2];
        $4 = HEAP32[$9 + 188 >> 2];
        $7 = HEAP32[$4 + 4 >> 2];
        $6 = HEAP32[$4 + 8 >> 2];
        HEAP32[$5 + 136 >> 2] = $7;
        HEAP32[$5 + 140 >> 2] = $6;
        $4 = $5 + 248 | 0;
        $8 = HEAP32[$4 >> 2];
        $7 = HEAP32[$4 + 4 >> 2];
        $11 = $5 + 16 | 0;
        $6 = $11;
        HEAP32[$6 >> 2] = $8;
        HEAP32[$6 + 4 >> 2] = $7;
        $4 = $21;
        $8 = HEAP32[$4 >> 2];
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $17;
        HEAP32[$7 >> 2] = $8;
        HEAP32[$7 + 4 >> 2] = $6;
        $4 = $18 + 8 | 0;
        $8 = HEAP32[$4 >> 2];
        $7 = HEAP32[$4 + 4 >> 2];
        $22 = $14 + 8 | 0;
        $6 = $22;
        HEAP32[$6 >> 2] = $8;
        HEAP32[$6 + 4 >> 2] = $7;
        $4 = $18;
        $8 = HEAP32[$4 >> 2];
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $14;
        HEAP32[$7 >> 2] = $8;
        HEAP32[$7 + 4 >> 2] = $6;
        $4 = $24;
        $8 = HEAP32[$4 >> 2];
        $7 = HEAP32[$4 + 4 >> 2];
        $6 = $19;
        HEAP32[$6 >> 2] = $8;
        HEAP32[$6 + 4 >> 2] = $7;
        $4 = $4 + 8 | 0;
        $8 = HEAP32[$4 >> 2];
        $23 = $6 + 8 | 0;
        $7 = $23;
        $6 = HEAP32[$4 + 4 >> 2];
        HEAP32[$7 >> 2] = $8;
        HEAP32[$7 + 4 >> 2] = $6;
        $4 = $13;
        $8 = HEAP32[$4 >> 2];
        $7 = HEAP32[$4 + 4 >> 2];
        $6 = $17 + 8 | 0;
        HEAP32[$6 >> 2] = $8;
        HEAP32[$6 + 4 >> 2] = $7;
        $6 = HEAP32[$5 + 244 >> 2];
        HEAP32[$5 + 8 >> 2] = HEAP32[$5 + 240 >> 2];
        HEAP32[$5 + 12 >> 2] = $6;
        $8 = $9 + 4 | 0;
        $4 = $8 + 8 | 0;
        $28 = HEAP32[$4 >> 2];
        $13 = HEAP32[$4 + 4 >> 2];
        $4 = $8;
        $29 = HEAP32[$4 >> 2];
        $30 = HEAP32[$4 + 4 >> 2];
        $4 = $9 + 20 | 0;
        $16 = HEAP32[$4 >> 2];
        $7 = HEAP32[$4 + 4 >> 2];
        $6 = $19;
        HEAP32[$6 >> 2] = $16;
        HEAP32[$6 + 4 >> 2] = $7;
        $4 = $9 + 28 | 0;
        $16 = HEAP32[$4 >> 2];
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $23;
        HEAP32[$7 >> 2] = $16;
        HEAP32[$7 + 4 >> 2] = $6;
        $7 = $11;
        HEAP32[$7 >> 2] = $28;
        HEAP32[$7 + 4 >> 2] = $13;
        HEAP32[$5 + 8 >> 2] = $29;
        HEAP32[$5 + 12 >> 2] = $30;
        $4 = $9 + 36 | 0;
        $11 = HEAP32[$4 >> 2];
        $7 = HEAP32[$4 + 4 >> 2];
        $6 = $14;
        HEAP32[$6 >> 2] = $11;
        HEAP32[$6 + 4 >> 2] = $7;
        $4 = $9 + 44 | 0;
        $11 = HEAP32[$4 >> 2];
        $6 = HEAP32[$4 + 4 >> 2];
        $7 = $22;
        HEAP32[$7 >> 2] = $11;
        HEAP32[$7 + 4 >> 2] = $6;
        btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const($0, $5 + 72 | 0, $8, $5 + 8 | 0, $5 + 128 | 0, Math_fround(0.0));
        $10 = HEAPF32[$5 + 132 >> 2];
        if (!!($10 < Math_fround(1.0))) {
         HEAPF32[$9 + 268 >> 2] = $10;
         btRigidBody__predictIntegratedTransform_28float_2c_20btTransform__29($9, Math_fround($10 * $3), $5 + 240 | 0);
         HEAP32[$9 + 268 >> 2] = 0;
         btRigidBody__proceedToTransform_28btTransform_20const__29($9, $5 + 240 | 0);
         $12 = 4;
        }
        if ($12) {
         break label$6
        }
       }
       $12 = 0;
      }
      CProfileSample___CProfileSample_28_29();
      if ($12) {
       break label$3
      }
     }
     btRigidBody__proceedToTransform_28btTransform_20const__29($9, $5 + 240 | 0);
    }
    $1 = $1 + 4 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  global$0 = $5 + 304 | 0;
 }
 
 function btDiscreteDynamicsWorld__integrateTransforms_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0);
  $2 = global$0 - 80 | 0;
  global$0 = $2;
  CProfileSample__CProfileSample_28char_20const__29($2 + 72 | 0, 23433);
  $3 = HEAP32[$0 + 248 >> 2];
  if (($3 | 0) >= 1) {
   btDiscreteDynamicsWorld__integrateTransformsInternal_28btRigidBody___2c_20int_2c_20float_29($0, HEAP32[$0 + 256 >> 2], $3, $1)
  }
  if (HEAPU8[$0 + 291 | 0]) {
   CProfileSample__CProfileSample_28char_20const__29($2 - -64 | 0, 23453);
   if (HEAP32[$0 + 324 >> 2] >= 1) {
    while (1) {
     $7 = HEAP32[HEAP32[$0 + 332 >> 2] + ($11 << 2) >> 2];
     label$5 : {
      if (HEAP32[$7 + 780 >> 2] < 1) {
       break label$5
      }
      $3 = HEAP32[$7 + 776 >> 2];
      $4 = HEAP32[$3 + 252 >> 2] << 30 >> 31 & $3;
      $3 = HEAP32[$7 + 772 >> 2];
      $5 = HEAP32[$3 + 252 >> 2] << 30 >> 31 & $3;
      if ($5) {
       $3 = $7 + 128 | 0;
       $8 = 0;
       while (1) {
        $1 = btManifoldResult__calculateCombinedRestitution_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($5, $4);
        label$8 : {
         if (!($1 > Math_fround(0.0))) {
          break label$8
         }
         $6 = HEAPF32[$3 >> 2];
         if ($6 == Math_fround(0.0)) {
          break label$8
         }
         $12 = HEAPF32[$3 + -60 >> 2];
         $9 = HEAPF32[$3 + -56 >> 2];
         $10 = HEAPF32[$3 + -52 >> 2];
         HEAP32[$2 + 60 >> 2] = 0;
         HEAPF32[$2 + 56 >> 2] = -Math_fround($1 * Math_fround($10 * $6));
         HEAPF32[$2 + 52 >> 2] = -Math_fround($1 * Math_fround($9 * $6));
         HEAPF32[$2 + 48 >> 2] = -Math_fround($1 * Math_fround($12 * $6));
         HEAP32[$2 + 44 >> 2] = 0;
         HEAPF32[$2 + 40 >> 2] = HEAPF32[$3 + -68 >> 2] - HEAPF32[$5 + 60 >> 2];
         HEAPF32[$2 + 36 >> 2] = HEAPF32[$3 + -72 >> 2] - HEAPF32[$5 + 56 >> 2];
         HEAPF32[$2 + 32 >> 2] = HEAPF32[$3 + -76 >> 2] - HEAPF32[$5 + 52 >> 2];
         HEAP32[$2 + 28 >> 2] = 0;
         HEAPF32[$2 + 24 >> 2] = HEAPF32[$3 + -84 >> 2] - HEAPF32[$4 + 60 >> 2];
         HEAPF32[$2 + 20 >> 2] = HEAPF32[$3 + -88 >> 2] - HEAPF32[$4 + 56 >> 2];
         HEAPF32[$2 + 16 >> 2] = HEAPF32[$3 + -92 >> 2] - HEAPF32[$4 + 52 >> 2];
         btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29($5, $2 + 48 | 0, $2 + 32 | 0);
         HEAP32[$2 + 12 >> 2] = 0;
         HEAPF32[$2 + 8 >> 2] = -HEAPF32[$2 + 56 >> 2];
         HEAPF32[$2 + 4 >> 2] = -HEAPF32[$2 + 52 >> 2];
         HEAPF32[$2 >> 2] = -HEAPF32[$2 + 48 >> 2];
         btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29($4, $2, $2 + 16 | 0);
        }
        $3 = $3 + 192 | 0;
        $8 = $8 + 1 | 0;
        if (($8 | 0) < HEAP32[$7 + 780 >> 2]) {
         continue
        }
        break;
       };
       break label$5;
      }
      $3 = $7 + 68 | 0;
      $8 = 0;
      while (1) {
       $1 = btManifoldResult__calculateCombinedRestitution_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($5, $4);
       label$10 : {
        if (!($1 > Math_fround(0.0))) {
         break label$10
        }
        $6 = HEAPF32[$3 + 60 >> 2];
        if ($6 == Math_fround(0.0)) {
         break label$10
        }
        $12 = HEAPF32[$3 + 4 >> 2];
        $9 = HEAPF32[$3 + 8 >> 2];
        $10 = HEAPF32[$3 >> 2];
        HEAP32[$2 + 60 >> 2] = 0;
        $10 = Math_fround($1 * Math_fround($10 * $6));
        HEAPF32[$2 + 48 >> 2] = -$10;
        $9 = Math_fround($1 * Math_fround($9 * $6));
        HEAPF32[$2 + 56 >> 2] = -$9;
        $1 = Math_fround($1 * Math_fround($12 * $6));
        HEAPF32[$2 + 52 >> 2] = -$1;
        HEAP32[$2 + 44 >> 2] = 0;
        HEAPF32[$2 + 40 >> 2] = HEAPF32[$3 + -8 >> 2] - HEAPF32[$5 + 60 >> 2];
        HEAPF32[$2 + 36 >> 2] = HEAPF32[$3 + -12 >> 2] - HEAPF32[$5 + 56 >> 2];
        HEAPF32[$2 + 32 >> 2] = HEAPF32[$3 + -16 >> 2] - HEAPF32[$5 + 52 >> 2];
        HEAP32[$2 + 28 >> 2] = 0;
        HEAPF32[$2 + 24 >> 2] = HEAPF32[$3 + -24 >> 2] - HEAPF32[$4 + 60 >> 2];
        HEAPF32[$2 + 20 >> 2] = HEAPF32[$3 + -28 >> 2] - HEAPF32[$4 + 56 >> 2];
        HEAPF32[$2 + 16 >> 2] = HEAPF32[$3 + -32 >> 2] - HEAPF32[$4 + 52 >> 2];
        HEAP32[$2 + 12 >> 2] = 0;
        HEAPF32[$2 + 8 >> 2] = $9;
        HEAPF32[$2 + 4 >> 2] = $1;
        HEAPF32[$2 >> 2] = $10;
        btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29($4, $2, $2 + 16 | 0);
       }
       $3 = $3 + 192 | 0;
       $8 = $8 + 1 | 0;
       if (($8 | 0) < HEAP32[$7 + 780 >> 2]) {
        continue
       }
       break;
      };
     }
     $11 = $11 + 1 | 0;
     if (($11 | 0) < HEAP32[$0 + 324 >> 2]) {
      continue
     }
     break;
    }
   }
   CProfileSample___CProfileSample_28_29();
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $2 + 80 | 0;
 }
 
 function btDiscreteDynamicsWorld__predictUnconstraintMotion_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  CProfileSample__CProfileSample_28char_20const__29($3 + 8 | 0, 23491);
  $4 = HEAP32[$0 + 248 >> 2];
  if (($4 | 0) >= 1) {
   while (1) {
    $2 = HEAP32[$5 + HEAP32[$0 + 256 >> 2] >> 2];
    if (!(HEAPU8[$2 + 204 | 0] & 3)) {
     btRigidBody__applyDamping_28float_29($2, $1);
     btRigidBody__predictIntegratedTransform_28float_2c_20btTransform__29($2, $1, $2 + 68 | 0);
     $4 = HEAP32[$0 + 248 >> 2];
    }
    $5 = $5 + 4 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) < ($4 | 0)) {
     continue
    }
    break;
   }
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $3 + 16 | 0;
 }
 
 function btDiscreteDynamicsWorld__debugDrawConstraint_28btTypedConstraint__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0), $24 = Math_fround(0), $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = 0, $35 = Math_fround(0), $36 = Math_fround(0), $37 = Math_fround(0), $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = Math_fround(0), $44 = Math_fround(0), $45 = Math_fround(0), $46 = 0;
  $2 = global$0 - 176 | 0;
  global$0 = $2;
  $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  $6 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 56 >> 2]]($7) | 0;
  $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
  $7 = FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 56 >> 2]]($7) | 0;
  $29 = HEAPF32[$1 + 40 >> 2];
  label$1 : {
   if ($29 <= Math_fround(0.0)) {
    break label$1
   }
   $8 = HEAP32[$1 + 4 >> 2] + -3 | 0;
   if ($8 >>> 0 > 9) {
    break label$1
   }
   $6 = $6 & 2048;
   $7 = $7 & 4096;
   label$2 : {
    switch ($8 - 1 | 0) {
    default:
     $8 = $2 + 172 | 0;
     HEAP32[$8 >> 2] = 0;
     $22 = $2 + 164 | 0;
     $4 = $22;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     $4 = $2 + 156 | 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     $4 = $2 + 124 | 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     $4 = $2 + 136 | 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$2 + 132 >> 2] = 1065353216;
     HEAP32[$2 + 152 >> 2] = 1065353216;
     HEAP32[$2 + 116 >> 2] = 0;
     HEAP32[$2 + 120 >> 2] = 0;
     HEAP32[$2 + 144 >> 2] = 0;
     HEAP32[$2 + 148 >> 2] = 0;
     HEAP32[$2 + 112 >> 2] = 1065353216;
     $7 = HEAP32[$1 + 28 >> 2];
     $13 = HEAPF32[$7 + 52 >> 2];
     $14 = HEAPF32[$7 + 8 >> 2];
     $15 = HEAPF32[$7 + 12 >> 2];
     $16 = HEAPF32[$7 + 56 >> 2];
     $17 = HEAPF32[$7 + 28 >> 2];
     $18 = HEAPF32[$7 + 20 >> 2];
     $21 = HEAPF32[$7 + 24 >> 2];
     $20 = HEAPF32[$7 + 60 >> 2];
     $23 = HEAPF32[$7 + 44 >> 2];
     $11 = HEAPF32[$7 + 36 >> 2];
     $10 = HEAPF32[$7 + 40 >> 2];
     $24 = HEAPF32[$7 + 4 >> 2];
     HEAP32[$8 >> 2] = 0;
     $25 = $2 + 168 | 0;
     $12 = HEAPF32[$1 + 300 >> 2];
     $19 = Math_fround($11 * $12);
     $11 = HEAPF32[$1 + 304 >> 2];
     $19 = Math_fround($19 + Math_fround($10 * $11));
     $10 = HEAPF32[$1 + 308 >> 2];
     HEAPF32[$25 >> 2] = $20 + Math_fround($19 + Math_fround($23 * $10));
     HEAPF32[$22 >> 2] = $16 + Math_fround(Math_fround(Math_fround($12 * $18) + Math_fround($11 * $21)) + Math_fround($10 * $17));
     HEAPF32[$2 + 160 >> 2] = $13 + Math_fround(Math_fround(Math_fround($12 * $24) + Math_fround($11 * $14)) + Math_fround($10 * $15));
     $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 64 >> 2]]($7, $2 + 112 | 0, $29);
     $7 = HEAP32[$1 + 32 >> 2];
     $13 = HEAPF32[$7 + 52 >> 2];
     $14 = HEAPF32[$7 + 8 >> 2];
     $15 = HEAPF32[$7 + 12 >> 2];
     $16 = HEAPF32[$7 + 56 >> 2];
     $17 = HEAPF32[$7 + 28 >> 2];
     $18 = HEAPF32[$7 + 20 >> 2];
     $21 = HEAPF32[$7 + 24 >> 2];
     $20 = HEAPF32[$7 + 60 >> 2];
     $23 = HEAPF32[$7 + 44 >> 2];
     $11 = HEAPF32[$7 + 36 >> 2];
     $10 = HEAPF32[$7 + 40 >> 2];
     $24 = HEAPF32[$7 + 4 >> 2];
     HEAP32[$8 >> 2] = 0;
     $12 = HEAPF32[$1 + 316 >> 2];
     $19 = Math_fround($11 * $12);
     $11 = HEAPF32[$1 + 320 >> 2];
     $19 = Math_fround($19 + Math_fround($10 * $11));
     $10 = HEAPF32[$1 + 324 >> 2];
     HEAPF32[$25 >> 2] = $20 + Math_fround($19 + Math_fround($23 * $10));
     HEAPF32[$22 >> 2] = $16 + Math_fround(Math_fround(Math_fround($12 * $18) + Math_fround($11 * $21)) + Math_fround($10 * $17));
     HEAPF32[$2 + 160 >> 2] = $13 + Math_fround(Math_fround(Math_fround($12 * $24) + Math_fround($11 * $14)) + Math_fround($10 * $15));
     if (!$6) {
      break label$1
     }
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 64 >> 2]]($1, $2 + 112 | 0, $29);
     break label$1;
    case 0:
     $8 = HEAP32[$1 + 28 >> 2];
     $35 = HEAPF32[$8 + 52 >> 2];
     $12 = HEAPF32[$8 + 8 >> 2];
     $11 = HEAPF32[$8 + 12 >> 2];
     $21 = HEAPF32[$1 + 584 >> 2];
     $20 = HEAPF32[$1 + 552 >> 2];
     $23 = HEAPF32[$1 + 568 >> 2];
     $36 = HEAPF32[$8 + 56 >> 2];
     $37 = HEAPF32[$8 + 60 >> 2];
     $24 = HEAPF32[$1 + 608 >> 2];
     $33 = HEAPF32[$1 + 600 >> 2];
     $19 = HEAPF32[$1 + 604 >> 2];
     $10 = HEAPF32[$8 + 28 >> 2];
     $13 = HEAPF32[$8 + 20 >> 2];
     $14 = HEAPF32[$8 + 24 >> 2];
     $26 = HEAPF32[$1 + 588 >> 2];
     $27 = HEAPF32[$1 + 556 >> 2];
     $28 = HEAPF32[$1 + 572 >> 2];
     $30 = HEAPF32[$1 + 592 >> 2];
     $15 = HEAPF32[$8 + 44 >> 2];
     $31 = HEAPF32[$1 + 560 >> 2];
     $16 = HEAPF32[$8 + 36 >> 2];
     $32 = HEAPF32[$1 + 576 >> 2];
     $17 = HEAPF32[$8 + 40 >> 2];
     $18 = HEAPF32[$8 + 4 >> 2];
     HEAP32[$2 + 172 >> 2] = 0;
     HEAP32[$2 + 156 >> 2] = 0;
     HEAP32[$2 + 140 >> 2] = 0;
     HEAPF32[$2 + 152 >> 2] = Math_fround(Math_fround($31 * $16) + Math_fround($32 * $17)) + Math_fround($30 * $15);
     HEAPF32[$2 + 148 >> 2] = Math_fround(Math_fround($27 * $16) + Math_fround($28 * $17)) + Math_fround($26 * $15);
     HEAPF32[$2 + 136 >> 2] = Math_fround(Math_fround($31 * $13) + Math_fround($32 * $14)) + Math_fround($30 * $10);
     HEAPF32[$2 + 132 >> 2] = Math_fround(Math_fround($27 * $13) + Math_fround($28 * $14)) + Math_fround($26 * $10);
     HEAPF32[$2 + 168 >> 2] = $37 + Math_fround(Math_fround(Math_fround($16 * $33) + Math_fround($17 * $19)) + Math_fround($15 * $24));
     HEAPF32[$2 + 164 >> 2] = $36 + Math_fround(Math_fround(Math_fround($13 * $33) + Math_fround($14 * $19)) + Math_fround($10 * $24));
     HEAP32[$2 + 124 >> 2] = 0;
     HEAPF32[$2 + 144 >> 2] = Math_fround(Math_fround($20 * $16) + Math_fround($23 * $17)) + Math_fround($21 * $15);
     HEAPF32[$2 + 128 >> 2] = Math_fround(Math_fround($20 * $13) + Math_fround($23 * $14)) + Math_fround($21 * $10);
     HEAPF32[$2 + 120 >> 2] = Math_fround(Math_fround($18 * $31) + Math_fround($12 * $32)) + Math_fround($11 * $30);
     HEAPF32[$2 + 116 >> 2] = Math_fround(Math_fround($18 * $27) + Math_fround($12 * $28)) + Math_fround($11 * $26);
     HEAPF32[$2 + 112 >> 2] = Math_fround(Math_fround($20 * $18) + Math_fround($23 * $12)) + Math_fround($21 * $11);
     HEAPF32[$2 + 160 >> 2] = $35 + Math_fround(Math_fround(Math_fround($18 * $33) + Math_fround($12 * $19)) + Math_fround($11 * $24));
     label$8 : {
      if ($6) {
       $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $29);
       $6 = HEAP32[$1 + 32 >> 2];
       $35 = HEAPF32[$6 + 52 >> 2];
       $12 = HEAPF32[$6 + 8 >> 2];
       $11 = HEAPF32[$6 + 12 >> 2];
       $36 = HEAPF32[$6 + 56 >> 2];
       $37 = HEAPF32[$6 + 60 >> 2];
       $21 = HEAPF32[$1 + 672 >> 2];
       $20 = HEAPF32[$1 + 664 >> 2];
       $23 = HEAPF32[$1 + 668 >> 2];
       $10 = HEAPF32[$6 + 28 >> 2];
       $13 = HEAPF32[$6 + 20 >> 2];
       $14 = HEAPF32[$6 + 24 >> 2];
       $24 = HEAPF32[$1 + 648 >> 2];
       $33 = HEAPF32[$1 + 616 >> 2];
       $19 = HEAPF32[$1 + 632 >> 2];
       $26 = HEAPF32[$1 + 652 >> 2];
       $27 = HEAPF32[$1 + 620 >> 2];
       $28 = HEAPF32[$1 + 636 >> 2];
       $30 = HEAPF32[$1 + 656 >> 2];
       $15 = HEAPF32[$6 + 44 >> 2];
       $31 = HEAPF32[$1 + 624 >> 2];
       $16 = HEAPF32[$6 + 36 >> 2];
       $32 = HEAPF32[$1 + 640 >> 2];
       $17 = HEAPF32[$6 + 40 >> 2];
       $18 = HEAPF32[$6 + 4 >> 2];
       HEAP32[$2 + 172 >> 2] = 0;
       HEAP32[$2 + 156 >> 2] = 0;
       HEAP32[$2 + 140 >> 2] = 0;
       HEAPF32[$2 + 152 >> 2] = Math_fround(Math_fround($31 * $16) + Math_fround($32 * $17)) + Math_fround($30 * $15);
       HEAPF32[$2 + 148 >> 2] = Math_fround(Math_fround($27 * $16) + Math_fround($28 * $17)) + Math_fround($26 * $15);
       HEAPF32[$2 + 144 >> 2] = Math_fround(Math_fround($33 * $16) + Math_fround($19 * $17)) + Math_fround($24 * $15);
       HEAPF32[$2 + 136 >> 2] = Math_fround(Math_fround($31 * $13) + Math_fround($32 * $14)) + Math_fround($30 * $10);
       HEAPF32[$2 + 132 >> 2] = Math_fround(Math_fround($27 * $13) + Math_fround($28 * $14)) + Math_fround($26 * $10);
       HEAPF32[$2 + 168 >> 2] = $37 + Math_fround(Math_fround(Math_fround($16 * $20) + Math_fround($17 * $23)) + Math_fround($15 * $21));
       HEAPF32[$2 + 164 >> 2] = $36 + Math_fround(Math_fround(Math_fround($13 * $20) + Math_fround($14 * $23)) + Math_fround($10 * $21));
       HEAPF32[$2 + 160 >> 2] = $35 + Math_fround(Math_fround(Math_fround($18 * $20) + Math_fround($12 * $23)) + Math_fround($11 * $21));
       HEAP32[$2 + 124 >> 2] = 0;
       HEAPF32[$2 + 128 >> 2] = Math_fround(Math_fround($33 * $13) + Math_fround($19 * $14)) + Math_fround($24 * $10);
       HEAPF32[$2 + 120 >> 2] = Math_fround(Math_fround($18 * $31) + Math_fround($12 * $32)) + Math_fround($11 * $30);
       HEAPF32[$2 + 116 >> 2] = Math_fround(Math_fround($18 * $27) + Math_fround($12 * $28)) + Math_fround($11 * $26);
       HEAPF32[$2 + 112 >> 2] = Math_fround(Math_fround($33 * $18) + Math_fround($19 * $12)) + Math_fround($24 * $11);
       $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $29);
       break label$8;
      }
      $6 = HEAP32[$1 + 32 >> 2];
      $35 = HEAPF32[$6 + 52 >> 2];
      $36 = HEAPF32[$6 + 56 >> 2];
      $37 = HEAPF32[$6 + 60 >> 2];
      $21 = HEAPF32[$1 + 672 >> 2];
      $20 = HEAPF32[$1 + 664 >> 2];
      $23 = HEAPF32[$1 + 668 >> 2];
      $12 = HEAPF32[$6 + 8 >> 2];
      $11 = HEAPF32[$6 + 12 >> 2];
      $10 = HEAPF32[$6 + 28 >> 2];
      $13 = HEAPF32[$6 + 20 >> 2];
      $14 = HEAPF32[$6 + 24 >> 2];
      $24 = HEAPF32[$1 + 648 >> 2];
      $33 = HEAPF32[$1 + 616 >> 2];
      $19 = HEAPF32[$1 + 632 >> 2];
      $26 = HEAPF32[$1 + 652 >> 2];
      $27 = HEAPF32[$1 + 620 >> 2];
      $28 = HEAPF32[$1 + 636 >> 2];
      $30 = HEAPF32[$1 + 656 >> 2];
      $15 = HEAPF32[$6 + 44 >> 2];
      $31 = HEAPF32[$1 + 624 >> 2];
      $16 = HEAPF32[$6 + 36 >> 2];
      $32 = HEAPF32[$1 + 640 >> 2];
      $17 = HEAPF32[$6 + 40 >> 2];
      $18 = HEAPF32[$6 + 4 >> 2];
      HEAP32[$2 + 172 >> 2] = 0;
      HEAP32[$2 + 156 >> 2] = 0;
      HEAP32[$2 + 140 >> 2] = 0;
      HEAP32[$2 + 124 >> 2] = 0;
      HEAPF32[$2 + 152 >> 2] = Math_fround(Math_fround($31 * $16) + Math_fround($32 * $17)) + Math_fround($30 * $15);
      HEAPF32[$2 + 148 >> 2] = Math_fround(Math_fround($27 * $16) + Math_fround($28 * $17)) + Math_fround($26 * $15);
      HEAPF32[$2 + 144 >> 2] = Math_fround(Math_fround($33 * $16) + Math_fround($19 * $17)) + Math_fround($24 * $15);
      HEAPF32[$2 + 136 >> 2] = Math_fround(Math_fround($31 * $13) + Math_fround($32 * $14)) + Math_fround($30 * $10);
      HEAPF32[$2 + 132 >> 2] = Math_fround(Math_fround($27 * $13) + Math_fround($28 * $14)) + Math_fround($26 * $10);
      HEAPF32[$2 + 128 >> 2] = Math_fround(Math_fround($33 * $13) + Math_fround($19 * $14)) + Math_fround($24 * $10);
      HEAPF32[$2 + 120 >> 2] = Math_fround(Math_fround($18 * $31) + Math_fround($12 * $32)) + Math_fround($11 * $30);
      HEAPF32[$2 + 116 >> 2] = Math_fround(Math_fround($18 * $27) + Math_fround($12 * $28)) + Math_fround($11 * $26);
      HEAPF32[$2 + 112 >> 2] = Math_fround(Math_fround($33 * $18) + Math_fround($19 * $12)) + Math_fround($24 * $11);
      HEAPF32[$2 + 168 >> 2] = $37 + Math_fround(Math_fround(Math_fround($16 * $20) + Math_fround($17 * $23)) + Math_fround($15 * $21));
      HEAPF32[$2 + 164 >> 2] = $36 + Math_fround(Math_fround(Math_fround($13 * $20) + Math_fround($14 * $23)) + Math_fround($10 * $21));
      HEAPF32[$2 + 160 >> 2] = $35 + Math_fround(Math_fround(Math_fround($18 * $20) + Math_fround($12 * $23)) + Math_fround($11 * $21));
     }
     $6 = $1 + 688 | 0;
     $12 = btAngularLimit__getLow_28_29_20const($6);
     $11 = btAngularLimit__getHigh_28_29_20const($6);
     if ($12 == $11) {
      break label$1
     }
     if (!$7) {
      break label$1
     }
     $10 = HEAPF32[$1 + 692 >> 2];
     HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 120 >> 2];
     HEAP32[$2 + 100 >> 2] = HEAP32[$2 + 136 >> 2];
     HEAP32[$2 + 108 >> 2] = 0;
     HEAP32[$2 + 104 >> 2] = HEAP32[$2 + 152 >> 2];
     HEAP32[$2 + 80 >> 2] = HEAP32[$2 + 112 >> 2];
     HEAP32[$2 + 84 >> 2] = HEAP32[$2 + 128 >> 2];
     HEAP32[$2 + 92 >> 2] = 0;
     HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 144 >> 2];
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $4 = $2 + 72 | 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$2 + 64 >> 2] = 0;
     HEAP32[$2 + 68 >> 2] = 0;
     $0 = $10 > Math_fround(0.0);
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($1, $2 + 160 | 0, $2 + 96 | 0, $2 + 80 | 0, $29, $29, $0 ? $12 : Math_fround(0.0), $0 ? $11 : Math_fround(6.2831854820251465), $2 - -64 | 0, $0, Math_fround(10.0));
     break label$1;
    case 1:
     $8 = HEAP32[$1 + 28 >> 2];
     $35 = HEAPF32[$8 + 52 >> 2];
     $12 = HEAPF32[$8 + 8 >> 2];
     $11 = HEAPF32[$8 + 12 >> 2];
     $21 = HEAPF32[$1 + 332 >> 2];
     $20 = HEAPF32[$1 + 300 >> 2];
     $23 = HEAPF32[$1 + 316 >> 2];
     $36 = HEAPF32[$8 + 56 >> 2];
     $37 = HEAPF32[$8 + 60 >> 2];
     $24 = HEAPF32[$1 + 356 >> 2];
     $33 = HEAPF32[$1 + 348 >> 2];
     $19 = HEAPF32[$1 + 352 >> 2];
     $10 = HEAPF32[$8 + 28 >> 2];
     $13 = HEAPF32[$8 + 20 >> 2];
     $14 = HEAPF32[$8 + 24 >> 2];
     $26 = HEAPF32[$1 + 336 >> 2];
     $27 = HEAPF32[$1 + 304 >> 2];
     $28 = HEAPF32[$1 + 320 >> 2];
     $30 = HEAPF32[$1 + 340 >> 2];
     $15 = HEAPF32[$8 + 44 >> 2];
     $31 = HEAPF32[$1 + 308 >> 2];
     $16 = HEAPF32[$8 + 36 >> 2];
     $32 = HEAPF32[$1 + 324 >> 2];
     $17 = HEAPF32[$8 + 40 >> 2];
     $18 = HEAPF32[$8 + 4 >> 2];
     HEAP32[$2 + 172 >> 2] = 0;
     HEAP32[$2 + 156 >> 2] = 0;
     HEAP32[$2 + 140 >> 2] = 0;
     HEAPF32[$2 + 152 >> 2] = Math_fround(Math_fround($31 * $16) + Math_fround($32 * $17)) + Math_fround($30 * $15);
     HEAPF32[$2 + 148 >> 2] = Math_fround(Math_fround($27 * $16) + Math_fround($28 * $17)) + Math_fround($26 * $15);
     HEAPF32[$2 + 136 >> 2] = Math_fround(Math_fround($31 * $13) + Math_fround($32 * $14)) + Math_fround($30 * $10);
     HEAPF32[$2 + 132 >> 2] = Math_fround(Math_fround($27 * $13) + Math_fround($28 * $14)) + Math_fround($26 * $10);
     HEAPF32[$2 + 168 >> 2] = $37 + Math_fround(Math_fround(Math_fround($16 * $33) + Math_fround($17 * $19)) + Math_fround($15 * $24));
     HEAPF32[$2 + 164 >> 2] = $36 + Math_fround(Math_fround(Math_fround($13 * $33) + Math_fround($14 * $19)) + Math_fround($10 * $24));
     HEAP32[$2 + 124 >> 2] = 0;
     HEAPF32[$2 + 144 >> 2] = Math_fround(Math_fround($20 * $16) + Math_fround($23 * $17)) + Math_fround($21 * $15);
     HEAPF32[$2 + 128 >> 2] = Math_fround(Math_fround($20 * $13) + Math_fround($23 * $14)) + Math_fround($21 * $10);
     HEAPF32[$2 + 120 >> 2] = Math_fround(Math_fround($18 * $31) + Math_fround($12 * $32)) + Math_fround($11 * $30);
     HEAPF32[$2 + 116 >> 2] = Math_fround(Math_fround($18 * $27) + Math_fround($12 * $28)) + Math_fround($11 * $26);
     HEAPF32[$2 + 112 >> 2] = Math_fround(Math_fround($20 * $18) + Math_fround($23 * $12)) + Math_fround($21 * $11);
     HEAPF32[$2 + 160 >> 2] = $35 + Math_fround(Math_fround(Math_fround($18 * $33) + Math_fround($12 * $19)) + Math_fround($11 * $24));
     label$10 : {
      if ($6) {
       $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $29);
       $6 = HEAP32[$1 + 32 >> 2];
       $35 = HEAPF32[$6 + 52 >> 2];
       $12 = HEAPF32[$6 + 8 >> 2];
       $11 = HEAPF32[$6 + 12 >> 2];
       $36 = HEAPF32[$6 + 56 >> 2];
       $37 = HEAPF32[$6 + 60 >> 2];
       $21 = HEAPF32[$1 + 420 >> 2];
       $20 = HEAPF32[$1 + 412 >> 2];
       $23 = HEAPF32[$1 + 416 >> 2];
       $10 = HEAPF32[$6 + 28 >> 2];
       $13 = HEAPF32[$6 + 20 >> 2];
       $14 = HEAPF32[$6 + 24 >> 2];
       $24 = HEAPF32[$1 + 396 >> 2];
       $33 = HEAPF32[$1 + 364 >> 2];
       $19 = HEAPF32[$1 + 380 >> 2];
       $26 = HEAPF32[$1 + 400 >> 2];
       $27 = HEAPF32[$1 + 368 >> 2];
       $28 = HEAPF32[$1 + 384 >> 2];
       $30 = HEAPF32[$1 + 404 >> 2];
       $15 = HEAPF32[$6 + 44 >> 2];
       $31 = HEAPF32[$1 + 372 >> 2];
       $16 = HEAPF32[$6 + 36 >> 2];
       $32 = HEAPF32[$1 + 388 >> 2];
       $17 = HEAPF32[$6 + 40 >> 2];
       $18 = HEAPF32[$6 + 4 >> 2];
       HEAP32[$2 + 172 >> 2] = 0;
       HEAP32[$2 + 156 >> 2] = 0;
       HEAP32[$2 + 140 >> 2] = 0;
       HEAPF32[$2 + 152 >> 2] = Math_fround(Math_fround($31 * $16) + Math_fround($32 * $17)) + Math_fround($30 * $15);
       HEAPF32[$2 + 148 >> 2] = Math_fround(Math_fround($27 * $16) + Math_fround($28 * $17)) + Math_fround($26 * $15);
       HEAPF32[$2 + 144 >> 2] = Math_fround(Math_fround($33 * $16) + Math_fround($19 * $17)) + Math_fround($24 * $15);
       HEAPF32[$2 + 136 >> 2] = Math_fround(Math_fround($31 * $13) + Math_fround($32 * $14)) + Math_fround($30 * $10);
       HEAPF32[$2 + 132 >> 2] = Math_fround(Math_fround($27 * $13) + Math_fround($28 * $14)) + Math_fround($26 * $10);
       HEAPF32[$2 + 168 >> 2] = $37 + Math_fround(Math_fround(Math_fround($16 * $20) + Math_fround($17 * $23)) + Math_fround($15 * $21));
       HEAPF32[$2 + 164 >> 2] = $36 + Math_fround(Math_fround(Math_fround($13 * $20) + Math_fround($14 * $23)) + Math_fround($10 * $21));
       HEAPF32[$2 + 160 >> 2] = $35 + Math_fround(Math_fround(Math_fround($18 * $20) + Math_fround($12 * $23)) + Math_fround($11 * $21));
       HEAP32[$2 + 124 >> 2] = 0;
       HEAPF32[$2 + 128 >> 2] = Math_fround(Math_fround($33 * $13) + Math_fround($19 * $14)) + Math_fround($24 * $10);
       HEAPF32[$2 + 120 >> 2] = Math_fround(Math_fround($18 * $31) + Math_fround($12 * $32)) + Math_fround($11 * $30);
       HEAPF32[$2 + 116 >> 2] = Math_fround(Math_fround($18 * $27) + Math_fround($12 * $28)) + Math_fround($11 * $26);
       HEAPF32[$2 + 112 >> 2] = Math_fround(Math_fround($33 * $18) + Math_fround($19 * $12)) + Math_fround($24 * $11);
       $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $29);
       break label$10;
      }
      $6 = HEAP32[$1 + 32 >> 2];
      $35 = HEAPF32[$6 + 52 >> 2];
      $36 = HEAPF32[$6 + 56 >> 2];
      $37 = HEAPF32[$6 + 60 >> 2];
      $21 = HEAPF32[$1 + 420 >> 2];
      $20 = HEAPF32[$1 + 412 >> 2];
      $23 = HEAPF32[$1 + 416 >> 2];
      $12 = HEAPF32[$6 + 8 >> 2];
      $11 = HEAPF32[$6 + 12 >> 2];
      $10 = HEAPF32[$6 + 28 >> 2];
      $13 = HEAPF32[$6 + 20 >> 2];
      $14 = HEAPF32[$6 + 24 >> 2];
      $24 = HEAPF32[$1 + 396 >> 2];
      $33 = HEAPF32[$1 + 364 >> 2];
      $19 = HEAPF32[$1 + 380 >> 2];
      $26 = HEAPF32[$1 + 400 >> 2];
      $27 = HEAPF32[$1 + 368 >> 2];
      $28 = HEAPF32[$1 + 384 >> 2];
      $30 = HEAPF32[$1 + 404 >> 2];
      $15 = HEAPF32[$6 + 44 >> 2];
      $31 = HEAPF32[$1 + 372 >> 2];
      $16 = HEAPF32[$6 + 36 >> 2];
      $32 = HEAPF32[$1 + 388 >> 2];
      $17 = HEAPF32[$6 + 40 >> 2];
      $18 = HEAPF32[$6 + 4 >> 2];
      HEAP32[$2 + 172 >> 2] = 0;
      HEAP32[$2 + 156 >> 2] = 0;
      HEAP32[$2 + 140 >> 2] = 0;
      HEAP32[$2 + 124 >> 2] = 0;
      HEAPF32[$2 + 152 >> 2] = Math_fround(Math_fround($31 * $16) + Math_fround($32 * $17)) + Math_fround($30 * $15);
      HEAPF32[$2 + 148 >> 2] = Math_fround(Math_fround($27 * $16) + Math_fround($28 * $17)) + Math_fround($26 * $15);
      HEAPF32[$2 + 144 >> 2] = Math_fround(Math_fround($33 * $16) + Math_fround($19 * $17)) + Math_fround($24 * $15);
      HEAPF32[$2 + 136 >> 2] = Math_fround(Math_fround($31 * $13) + Math_fround($32 * $14)) + Math_fround($30 * $10);
      HEAPF32[$2 + 132 >> 2] = Math_fround(Math_fround($27 * $13) + Math_fround($28 * $14)) + Math_fround($26 * $10);
      HEAPF32[$2 + 128 >> 2] = Math_fround(Math_fround($33 * $13) + Math_fround($19 * $14)) + Math_fround($24 * $10);
      HEAPF32[$2 + 120 >> 2] = Math_fround(Math_fround($18 * $31) + Math_fround($12 * $32)) + Math_fround($11 * $30);
      HEAPF32[$2 + 116 >> 2] = Math_fround(Math_fround($18 * $27) + Math_fround($12 * $28)) + Math_fround($11 * $26);
      HEAPF32[$2 + 112 >> 2] = Math_fround(Math_fround($33 * $18) + Math_fround($19 * $12)) + Math_fround($24 * $11);
      HEAPF32[$2 + 168 >> 2] = $37 + Math_fround(Math_fround(Math_fround($16 * $20) + Math_fround($17 * $23)) + Math_fround($15 * $21));
      HEAPF32[$2 + 164 >> 2] = $36 + Math_fround(Math_fround(Math_fround($13 * $20) + Math_fround($14 * $23)) + Math_fround($10 * $21));
      HEAPF32[$2 + 160 >> 2] = $35 + Math_fround(Math_fround(Math_fround($18 * $20) + Math_fround($12 * $23)) + Math_fround($11 * $21));
     }
     if (!$7) {
      break label$1
     }
     btConeTwistConstraint__GetPointForAngle_28float_2c_20float_29_20const($2 + 96 | 0, $1, Math_fround(6.0868353843688965), $29);
     HEAP32[$2 + 108 >> 2] = 0;
     $12 = HEAPF32[$2 + 96 >> 2];
     $11 = HEAPF32[$2 + 100 >> 2];
     $10 = HEAPF32[$2 + 104 >> 2];
     HEAPF32[$2 + 104 >> 2] = Math_fround(Math_fround(Math_fround($12 * HEAPF32[$2 + 144 >> 2]) + Math_fround($11 * HEAPF32[$2 + 148 >> 2])) + Math_fround($10 * HEAPF32[$2 + 152 >> 2])) + HEAPF32[$2 + 168 >> 2];
     HEAPF32[$2 + 100 >> 2] = Math_fround(Math_fround(Math_fround($12 * HEAPF32[$2 + 128 >> 2]) + Math_fround($11 * HEAPF32[$2 + 132 >> 2])) + Math_fround($10 * HEAPF32[$2 + 136 >> 2])) + HEAPF32[$2 + 164 >> 2];
     HEAPF32[$2 + 96 >> 2] = Math_fround(Math_fround(Math_fround($12 * HEAPF32[$2 + 112 >> 2]) + Math_fround($11 * HEAPF32[$2 + 116 >> 2])) + Math_fround($10 * HEAPF32[$2 + 120 >> 2])) + HEAPF32[$2 + 160 >> 2];
     $22 = $2 + 160 | 0;
     $8 = $2 + 72 | 0;
     $7 = 0;
     while (1) {
      btConeTwistConstraint__GetPointForAngle_28float_2c_20float_29_20const($2 + 80 | 0, $1, Math_fround(Math_fround(Math_fround($7 | 0) * Math_fround(6.283185005187988)) * Math_fround(.03125)), $29);
      HEAP32[$2 + 92 >> 2] = 0;
      $12 = HEAPF32[$2 + 80 >> 2];
      $11 = HEAPF32[$2 + 84 >> 2];
      $10 = HEAPF32[$2 + 88 >> 2];
      HEAPF32[$2 + 88 >> 2] = Math_fround(Math_fround(Math_fround($12 * HEAPF32[$2 + 144 >> 2]) + Math_fround($11 * HEAPF32[$2 + 148 >> 2])) + Math_fround($10 * HEAPF32[$2 + 152 >> 2])) + HEAPF32[$2 + 168 >> 2];
      HEAPF32[$2 + 84 >> 2] = Math_fround(Math_fround(Math_fround($12 * HEAPF32[$2 + 128 >> 2]) + Math_fround($11 * HEAPF32[$2 + 132 >> 2])) + Math_fround($10 * HEAPF32[$2 + 136 >> 2])) + HEAPF32[$2 + 164 >> 2];
      HEAPF32[$2 + 80 >> 2] = Math_fround(Math_fround(Math_fround($12 * HEAPF32[$2 + 112 >> 2]) + Math_fround($11 * HEAPF32[$2 + 116 >> 2])) + Math_fround($10 * HEAPF32[$2 + 120 >> 2])) + HEAPF32[$2 + 160 >> 2];
      $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      $4 = $8;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      HEAP32[$2 + 64 >> 2] = 0;
      HEAP32[$2 + 68 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 16 >> 2]]($6, $2 + 96 | 0, $2 + 80 | 0, $2 - -64 | 0);
      if (!($7 & 3)) {
       $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       HEAP32[$2 + 64 >> 2] = 0;
       HEAP32[$2 + 68 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 16 >> 2]]($6, $22, $2 + 80 | 0, $2 - -64 | 0);
      }
      $3 = $2 + 88 | 0;
      $25 = HEAP32[$3 >> 2];
      $4 = HEAP32[$3 + 4 >> 2];
      $5 = $2 + 104 | 0;
      HEAP32[$5 >> 2] = $25;
      HEAP32[$5 + 4 >> 2] = $4;
      $5 = HEAP32[$2 + 84 >> 2];
      HEAP32[$2 + 96 >> 2] = HEAP32[$2 + 80 >> 2];
      HEAP32[$2 + 100 >> 2] = $5;
      $7 = $7 + 1 | 0;
      if (($7 | 0) != 32) {
       continue
      }
      break;
     };
     $12 = HEAPF32[$1 + 512 >> 2];
     $11 = HEAPF32[$1 + 452 >> 2];
     $7 = HEAP32[$1 + 32 >> 2];
     label$14 : {
      if (HEAPF32[$7 + 404 >> 2] > Math_fround(0.0)) {
       $13 = HEAPF32[$7 + 36 >> 2];
       $10 = HEAPF32[$1 + 412 >> 2];
       $14 = HEAPF32[$7 + 40 >> 2];
       $18 = HEAPF32[$1 + 416 >> 2];
       $23 = Math_fround(Math_fround($13 * $10) + Math_fround($14 * $18));
       $15 = HEAPF32[$7 + 20 >> 2];
       $16 = HEAPF32[$7 + 24 >> 2];
       $17 = HEAPF32[$7 + 28 >> 2];
       $30 = HEAPF32[$1 + 420 >> 2];
       $24 = Math_fround(Math_fround(Math_fround($15 * $10) + Math_fround($16 * $18)) + Math_fround($17 * $30));
       $19 = HEAPF32[$7 + 4 >> 2];
       $26 = HEAPF32[$7 + 8 >> 2];
       $27 = HEAPF32[$7 + 12 >> 2];
       $33 = Math_fround(Math_fround(Math_fround($19 * $10) + Math_fround($26 * $18)) + Math_fround($27 * $30));
       $20 = HEAPF32[$1 + 372 >> 2];
       $31 = HEAPF32[$1 + 388 >> 2];
       $32 = HEAPF32[$1 + 404 >> 2];
       $28 = HEAPF32[$7 + 44 >> 2];
       $18 = Math_fround(Math_fround(Math_fround($20 * $13) + Math_fround($31 * $14)) + Math_fround($32 * $28));
       $35 = HEAPF32[$1 + 368 >> 2];
       $36 = HEAPF32[$1 + 384 >> 2];
       $37 = HEAPF32[$1 + 400 >> 2];
       $10 = Math_fround(Math_fround(Math_fround($35 * $13) + Math_fround($36 * $14)) + Math_fround($37 * $28));
       $43 = HEAPF32[$1 + 364 >> 2];
       $44 = HEAPF32[$1 + 380 >> 2];
       $45 = HEAPF32[$1 + 396 >> 2];
       $13 = Math_fround(Math_fround(Math_fround($43 * $13) + Math_fround($44 * $14)) + Math_fround($45 * $28));
       $21 = Math_fround(Math_fround(Math_fround($20 * $15) + Math_fround($31 * $16)) + Math_fround($32 * $17));
       $14 = Math_fround(Math_fround(Math_fround($35 * $15) + Math_fround($36 * $16)) + Math_fround($37 * $17));
       $15 = Math_fround(Math_fround(Math_fround($43 * $15) + Math_fround($44 * $16)) + Math_fround($45 * $17));
       $20 = Math_fround(Math_fround(Math_fround($19 * $20) + Math_fround($26 * $31)) + Math_fround($27 * $32));
       $16 = Math_fround(Math_fround(Math_fround($19 * $35) + Math_fround($26 * $36)) + Math_fround($27 * $37));
       $17 = Math_fround(Math_fround(Math_fround($43 * $19) + Math_fround($44 * $26)) + Math_fround($45 * $27));
       $19 = Math_fround($28 * $30);
       break label$14;
      }
      $7 = HEAP32[$1 + 28 >> 2];
      $13 = HEAPF32[$7 + 36 >> 2];
      $10 = HEAPF32[$1 + 348 >> 2];
      $14 = HEAPF32[$7 + 40 >> 2];
      $18 = HEAPF32[$1 + 352 >> 2];
      $23 = Math_fround(Math_fround($13 * $10) + Math_fround($14 * $18));
      $15 = HEAPF32[$7 + 20 >> 2];
      $16 = HEAPF32[$7 + 24 >> 2];
      $17 = HEAPF32[$7 + 28 >> 2];
      $30 = HEAPF32[$1 + 356 >> 2];
      $24 = Math_fround(Math_fround(Math_fround($15 * $10) + Math_fround($16 * $18)) + Math_fround($17 * $30));
      $19 = HEAPF32[$7 + 4 >> 2];
      $26 = HEAPF32[$7 + 8 >> 2];
      $27 = HEAPF32[$7 + 12 >> 2];
      $33 = Math_fround(Math_fround(Math_fround($19 * $10) + Math_fround($26 * $18)) + Math_fround($27 * $30));
      $20 = HEAPF32[$1 + 308 >> 2];
      $31 = HEAPF32[$1 + 324 >> 2];
      $32 = HEAPF32[$1 + 340 >> 2];
      $28 = HEAPF32[$7 + 44 >> 2];
      $18 = Math_fround(Math_fround(Math_fround($20 * $13) + Math_fround($31 * $14)) + Math_fround($32 * $28));
      $35 = HEAPF32[$1 + 304 >> 2];
      $36 = HEAPF32[$1 + 320 >> 2];
      $37 = HEAPF32[$1 + 336 >> 2];
      $10 = Math_fround(Math_fround(Math_fround($35 * $13) + Math_fround($36 * $14)) + Math_fround($37 * $28));
      $43 = HEAPF32[$1 + 300 >> 2];
      $44 = HEAPF32[$1 + 316 >> 2];
      $45 = HEAPF32[$1 + 332 >> 2];
      $13 = Math_fround(Math_fround(Math_fround($43 * $13) + Math_fround($44 * $14)) + Math_fround($45 * $28));
      $21 = Math_fround(Math_fround(Math_fround($20 * $15) + Math_fround($31 * $16)) + Math_fround($32 * $17));
      $14 = Math_fround(Math_fround(Math_fround($35 * $15) + Math_fround($36 * $16)) + Math_fround($37 * $17));
      $15 = Math_fround(Math_fround(Math_fround($43 * $15) + Math_fround($44 * $16)) + Math_fround($45 * $17));
      $20 = Math_fround(Math_fround(Math_fround($19 * $20) + Math_fround($26 * $31)) + Math_fround($27 * $32));
      $16 = Math_fround(Math_fround(Math_fround($19 * $35) + Math_fround($26 * $36)) + Math_fround($27 * $37));
      $17 = Math_fround(Math_fround(Math_fround($43 * $19) + Math_fround($44 * $26)) + Math_fround($45 * $27));
      $19 = Math_fround($28 * $30);
     }
     HEAP32[$2 + 156 >> 2] = 0;
     HEAPF32[$2 + 152 >> 2] = $18;
     HEAPF32[$2 + 148 >> 2] = $10;
     HEAPF32[$2 + 144 >> 2] = $13;
     HEAP32[$2 + 140 >> 2] = 0;
     HEAPF32[$2 + 136 >> 2] = $21;
     HEAPF32[$2 + 132 >> 2] = $14;
     HEAPF32[$2 + 128 >> 2] = $15;
     HEAP32[$2 + 124 >> 2] = 0;
     HEAPF32[$2 + 120 >> 2] = $20;
     HEAPF32[$2 + 116 >> 2] = $16;
     HEAPF32[$2 + 112 >> 2] = $17;
     $18 = HEAPF32[$7 + 52 >> 2];
     $21 = HEAPF32[$7 + 56 >> 2];
     $20 = HEAPF32[$7 + 60 >> 2];
     HEAP32[$2 + 172 >> 2] = 0;
     HEAPF32[$2 + 168 >> 2] = $20 + Math_fround($23 + $19);
     HEAPF32[$2 + 164 >> 2] = $24 + $21;
     HEAPF32[$2 + 160 >> 2] = $18 + $33;
     $3 = $22 + 8 | 0;
     $1 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $2 + 88 | 0;
     HEAP32[$5 >> 2] = $1;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $22;
     $1 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 80 >> 2] = $1;
     HEAP32[$2 + 84 >> 2] = $5;
     HEAP32[$2 + 76 >> 2] = 0;
     HEAPF32[$2 + 72 >> 2] = $13;
     HEAPF32[$2 + 68 >> 2] = $15;
     HEAPF32[$2 + 64 >> 2] = $17;
     HEAP32[$2 + 60 >> 2] = 0;
     HEAPF32[$2 + 56 >> 2] = $10;
     HEAPF32[$2 + 52 >> 2] = $14;
     HEAPF32[$2 + 48 >> 2] = $16;
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $4 = $2 + 40 | 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$2 + 32 >> 2] = 0;
     HEAP32[$2 + 36 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 68 >> 2]]($1, $2 + 80 | 0, $2 - -64 | 0, $2 + 48 | 0, $29, $29, Math_fround(Math_fround(-$12) - $11), Math_fround($11 - $12), $2 + 32 | 0, 1, Math_fround(10.0));
     break label$1;
    case 2:
    case 5:
     $3 = $1 + 1072 | 0;
     $8 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $9 = $2 + 120 | 0;
     $5 = $9;
     HEAP32[$5 >> 2] = $8;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 1088 | 0;
     $8 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $2 + 136 | 0;
     HEAP32[$4 >> 2] = $8;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $1 + 1104 | 0;
     $8 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $2 + 152 | 0;
     HEAP32[$5 >> 2] = $8;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 1120 | 0;
     $8 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $2 + 168 | 0;
     HEAP32[$4 >> 2] = $8;
     HEAP32[$4 + 4 >> 2] = $5;
     $34 = $1 + 1064 | 0;
     $3 = $34;
     $5 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 112 >> 2] = $5;
     HEAP32[$2 + 116 >> 2] = $4;
     $38 = $1 + 1080 | 0;
     $3 = $38;
     $4 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 128 >> 2] = $4;
     HEAP32[$2 + 132 >> 2] = $5;
     $39 = $1 + 1096 | 0;
     $3 = $39;
     $5 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 144 >> 2] = $5;
     HEAP32[$2 + 148 >> 2] = $4;
     $40 = $1 + 1112 | 0;
     $3 = $40;
     $4 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 160 >> 2] = $4;
     HEAP32[$2 + 164 >> 2] = $5;
     $8 = $2 + 160 | 0;
     $22 = $2 + 144 | 0;
     $25 = $2 + 128 | 0;
     label$16 : {
      if ($6) {
       $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $29);
       $3 = $1 + 1184 | 0;
       $6 = HEAP32[$3 >> 2];
       $4 = HEAP32[$3 + 4 >> 2];
       $5 = $8 + 8 | 0;
       HEAP32[$5 >> 2] = $6;
       HEAP32[$5 + 4 >> 2] = $4;
       $3 = $1 + 1176 | 0;
       $6 = HEAP32[$3 >> 2];
       $5 = HEAP32[$3 + 4 >> 2];
       $4 = $8;
       HEAP32[$4 >> 2] = $6;
       HEAP32[$4 + 4 >> 2] = $5;
       $3 = $1 + 1144 | 0;
       $6 = HEAP32[$3 >> 2];
       $4 = HEAP32[$3 + 4 >> 2];
       $5 = $25;
       HEAP32[$5 >> 2] = $6;
       HEAP32[$5 + 4 >> 2] = $4;
       $3 = $1 + 1152 | 0;
       $6 = HEAP32[$3 >> 2];
       $4 = $5 + 8 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       HEAP32[$4 >> 2] = $6;
       HEAP32[$4 + 4 >> 2] = $5;
       $3 = $1 + 1160 | 0;
       $6 = HEAP32[$3 >> 2];
       $4 = HEAP32[$3 + 4 >> 2];
       $5 = $22;
       HEAP32[$5 >> 2] = $6;
       HEAP32[$5 + 4 >> 2] = $4;
       $3 = $1 + 1168 | 0;
       $6 = HEAP32[$3 >> 2];
       $4 = $5 + 8 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       HEAP32[$4 >> 2] = $6;
       HEAP32[$4 + 4 >> 2] = $5;
       $3 = $1 + 1136 | 0;
       $6 = HEAP32[$3 >> 2];
       $4 = HEAP32[$3 + 4 >> 2];
       $5 = $9;
       HEAP32[$5 >> 2] = $6;
       HEAP32[$5 + 4 >> 2] = $4;
       $3 = $1 + 1128 | 0;
       $4 = HEAP32[$3 >> 2];
       $5 = HEAP32[$3 + 4 >> 2];
       HEAP32[$2 + 112 >> 2] = $4;
       HEAP32[$2 + 116 >> 2] = $5;
       $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $29);
       break label$16;
      }
      $3 = $1 + 1136 | 0;
      $6 = HEAP32[$3 >> 2];
      $4 = HEAP32[$3 + 4 >> 2];
      $5 = $9;
      HEAP32[$5 >> 2] = $6;
      HEAP32[$5 + 4 >> 2] = $4;
      $3 = $1 + 1144 | 0;
      $9 = HEAP32[$3 >> 2];
      $5 = HEAP32[$3 + 4 >> 2];
      $4 = $25;
      HEAP32[$4 >> 2] = $9;
      HEAP32[$4 + 4 >> 2] = $5;
      $3 = $1 + 1152 | 0;
      $9 = HEAP32[$3 >> 2];
      $5 = $4 + 8 | 0;
      $4 = HEAP32[$3 + 4 >> 2];
      HEAP32[$5 >> 2] = $9;
      HEAP32[$5 + 4 >> 2] = $4;
      $3 = $1 + 1160 | 0;
      $9 = HEAP32[$3 >> 2];
      $5 = HEAP32[$3 + 4 >> 2];
      $4 = $22;
      HEAP32[$4 >> 2] = $9;
      HEAP32[$4 + 4 >> 2] = $5;
      $3 = $1 + 1168 | 0;
      $9 = HEAP32[$3 >> 2];
      $5 = $4 + 8 | 0;
      $4 = HEAP32[$3 + 4 >> 2];
      HEAP32[$5 >> 2] = $9;
      HEAP32[$5 + 4 >> 2] = $4;
      $3 = $1 + 1176 | 0;
      $9 = HEAP32[$3 >> 2];
      $5 = HEAP32[$3 + 4 >> 2];
      $4 = $8;
      HEAP32[$4 >> 2] = $9;
      HEAP32[$4 + 4 >> 2] = $5;
      $3 = $1 + 1184 | 0;
      $9 = HEAP32[$3 >> 2];
      $5 = $4 + 8 | 0;
      $4 = HEAP32[$3 + 4 >> 2];
      HEAP32[$5 >> 2] = $9;
      HEAP32[$5 + 4 >> 2] = $4;
      $3 = $1 + 1128 | 0;
      $4 = HEAP32[$3 >> 2];
      $5 = HEAP32[$3 + 4 >> 2];
      HEAP32[$2 + 112 >> 2] = $4;
      HEAP32[$2 + 116 >> 2] = $5;
     }
     if (!$7) {
      break label$1
     }
     $3 = $38;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $25;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $39;
     $9 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $22;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $40;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $8;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $34 + 8 | 0;
     $6 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $9 = $2 + 120 | 0;
     $4 = $9;
     HEAP32[$4 >> 2] = $6;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $38 + 8 | 0;
     $41 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $46 = $25 + 8 | 0;
     $5 = $46;
     HEAP32[$5 >> 2] = $41;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $39 + 8 | 0;
     $42 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $41 = $22 + 8 | 0;
     $4 = $41;
     HEAP32[$4 >> 2] = $42;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $40 + 8 | 0;
     $7 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $42 = $8 + 8 | 0;
     $5 = $42;
     HEAP32[$5 >> 2] = $7;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $34;
     $4 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 112 >> 2] = $4;
     HEAP32[$2 + 116 >> 2] = $5;
     HEAP32[$2 + 96 >> 2] = $6;
     HEAP32[$2 + 100 >> 2] = HEAP32[$2 + 136 >> 2];
     HEAP32[$2 + 108 >> 2] = 0;
     HEAP32[$2 + 104 >> 2] = HEAP32[$2 + 152 >> 2];
     HEAP32[$2 + 80 >> 2] = HEAP32[$2 + 112 >> 2];
     HEAP32[$2 + 84 >> 2] = HEAP32[$2 + 128 >> 2];
     HEAP32[$2 + 92 >> 2] = 0;
     HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 144 >> 2];
     $12 = HEAPF32[$1 + 932 >> 2];
     $11 = HEAPF32[$1 + 936 >> 2];
     $10 = HEAPF32[$1 + 996 >> 2];
     $13 = HEAPF32[$1 + 1e3 >> 2];
     $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $4 = $2 + 72 | 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$2 + 64 >> 2] = 0;
     HEAP32[$2 + 68 >> 2] = 0;
     $6 = $1 + 1176 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 72 >> 2]]($7, $6, $2 + 96 | 0, $2 + 80 | 0, Math_fround($29 * Math_fround(.8999999761581421)), $12, $11, $10, $13, $2 - -64 | 0, Math_fround(10.0), 1);
     HEAP32[$2 + 92 >> 2] = 0;
     HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 148 >> 2];
     HEAP32[$2 + 84 >> 2] = HEAP32[$2 + 132 >> 2];
     HEAP32[$2 + 80 >> 2] = HEAP32[$2 + 116 >> 2];
     $10 = btGeneric6DofConstraint__getAngle_28int_29_20const($1, 1);
     $13 = btGeneric6DofConstraint__getAngle_28int_29_20const($1, 2);
     $3 = $1 + 1136 | 0;
     $7 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $9;
     HEAP32[$5 >> 2] = $7;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 1144 | 0;
     $9 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $25;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $1 + 1152 | 0;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $46;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 1160 | 0;
     $9 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $22;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $1 + 1168 | 0;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $41;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 1128 | 0;
     $4 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 112 >> 2] = $4;
     HEAP32[$2 + 116 >> 2] = $5;
     $12 = sinf($13);
     $11 = HEAPF32[$2 + 80 >> 2];
     $13 = cosf($13);
     $14 = HEAPF32[$2 + 84 >> 2];
     HEAPF32[$2 + 68 >> 2] = Math_fround($13 * $14) - Math_fround($12 * $11);
     $15 = sinf($10);
     $10 = cosf($10);
     $16 = HEAPF32[$2 + 88 >> 2];
     HEAPF32[$2 + 72 >> 2] = Math_fround(Math_fround($11 * Math_fround($13 * $15)) + Math_fround($14 * Math_fround($15 * $12))) + Math_fround($10 * $16);
     HEAPF32[$2 + 64 >> 2] = Math_fround(Math_fround($11 * Math_fround($10 * $13)) + Math_fround($14 * Math_fround($10 * $12))) - Math_fround($15 * $16);
     $3 = $1 + 1184 | 0;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $42;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $6;
     $9 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $8;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $5;
     HEAP32[$2 + 60 >> 2] = 0;
     HEAPF32[$2 + 56 >> 2] = -HEAPF32[$2 + 144 >> 2];
     HEAPF32[$2 + 52 >> 2] = -HEAPF32[$2 + 128 >> 2];
     HEAPF32[$2 + 48 >> 2] = -HEAPF32[$2 + 112 >> 2];
     $12 = HEAPF32[$1 + 868 >> 2];
     $11 = HEAPF32[$1 + 872 >> 2];
     label$18 : {
      if (!!($12 > $11)) {
       $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       $4 = $2 + 40 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       HEAP32[$2 + 32 >> 2] = 0;
       HEAP32[$2 + 36 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 68 >> 2]]($7, $6, $2 + 48 | 0, $2 - -64 | 0, $29, $29, Math_fround(-3.1415927410125732), Math_fround(3.1415927410125732), $2 + 32 | 0, 0, Math_fround(10.0));
       break label$18;
      }
      if (!($12 < $11)) {
       break label$18
      }
      $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      $4 = $2 + 40 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      HEAP32[$2 + 32 >> 2] = 0;
      HEAP32[$2 + 36 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 68 >> 2]]($7, $6, $2 + 48 | 0, $2 - -64 | 0, $29, $29, $12, $11, $2 + 32 | 0, 1, Math_fround(10.0));
     }
     $3 = $38;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $25;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $39;
     $9 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $22;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $40;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $8;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $34 + 8 | 0;
     $9 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $2 + 120 | 0;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $38 + 8 | 0;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $25 + 8 | 0;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $39 + 8 | 0;
     $25 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $22 + 8 | 0;
     HEAP32[$4 >> 2] = $25;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $40 + 8 | 0;
     $22 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $8 + 8 | 0;
     HEAP32[$5 >> 2] = $22;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $34;
     $4 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 112 >> 2] = $4;
     HEAP32[$2 + 116 >> 2] = $5;
     $3 = $1 + 688 | 0;
     $8 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $2 + 40 | 0;
     HEAP32[$5 >> 2] = $8;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 680 | 0;
     $4 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 32 >> 2] = $4;
     HEAP32[$2 + 36 >> 2] = $5;
     $3 = $1 + 704 | 0;
     $8 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $2 + 24 | 0;
     HEAP32[$5 >> 2] = $8;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 696 | 0;
     $1 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 16 >> 2] = $1;
     HEAP32[$2 + 20 >> 2] = $5;
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $4 = $2 + 8 | 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 80 >> 2]]($1, $2 + 32 | 0, $2 + 16 | 0, $2 + 112 | 0, $2);
     break label$1;
    case 8:
     $3 = $1 + 1244 | 0;
     $8 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $9 = $2 + 120 | 0;
     $5 = $9;
     HEAP32[$5 >> 2] = $8;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 1260 | 0;
     $8 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $2 + 136 | 0;
     HEAP32[$4 >> 2] = $8;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $1 + 1276 | 0;
     $8 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $2 + 152 | 0;
     HEAP32[$5 >> 2] = $8;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 1292 | 0;
     $8 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $2 + 168 | 0;
     HEAP32[$4 >> 2] = $8;
     HEAP32[$4 + 4 >> 2] = $5;
     $34 = $1 + 1236 | 0;
     $3 = $34;
     $5 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 112 >> 2] = $5;
     HEAP32[$2 + 116 >> 2] = $4;
     $38 = $1 + 1252 | 0;
     $3 = $38;
     $4 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 128 >> 2] = $4;
     HEAP32[$2 + 132 >> 2] = $5;
     $39 = $1 + 1268 | 0;
     $3 = $39;
     $5 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 144 >> 2] = $5;
     HEAP32[$2 + 148 >> 2] = $4;
     $40 = $1 + 1284 | 0;
     $3 = $40;
     $4 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 160 >> 2] = $4;
     HEAP32[$2 + 164 >> 2] = $5;
     $8 = $2 + 160 | 0;
     $22 = $2 + 144 | 0;
     $25 = $2 + 128 | 0;
     label$20 : {
      if ($6) {
       $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $29);
       $3 = $1 + 1356 | 0;
       $6 = HEAP32[$3 >> 2];
       $4 = HEAP32[$3 + 4 >> 2];
       $5 = $8 + 8 | 0;
       HEAP32[$5 >> 2] = $6;
       HEAP32[$5 + 4 >> 2] = $4;
       $3 = $1 + 1348 | 0;
       $6 = HEAP32[$3 >> 2];
       $5 = HEAP32[$3 + 4 >> 2];
       $4 = $8;
       HEAP32[$4 >> 2] = $6;
       HEAP32[$4 + 4 >> 2] = $5;
       $3 = $1 + 1316 | 0;
       $6 = HEAP32[$3 >> 2];
       $4 = HEAP32[$3 + 4 >> 2];
       $5 = $25;
       HEAP32[$5 >> 2] = $6;
       HEAP32[$5 + 4 >> 2] = $4;
       $3 = $1 + 1324 | 0;
       $6 = HEAP32[$3 >> 2];
       $4 = $5 + 8 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       HEAP32[$4 >> 2] = $6;
       HEAP32[$4 + 4 >> 2] = $5;
       $3 = $1 + 1332 | 0;
       $6 = HEAP32[$3 >> 2];
       $4 = HEAP32[$3 + 4 >> 2];
       $5 = $22;
       HEAP32[$5 >> 2] = $6;
       HEAP32[$5 + 4 >> 2] = $4;
       $3 = $1 + 1340 | 0;
       $6 = HEAP32[$3 >> 2];
       $4 = $5 + 8 | 0;
       $5 = HEAP32[$3 + 4 >> 2];
       HEAP32[$4 >> 2] = $6;
       HEAP32[$4 + 4 >> 2] = $5;
       $3 = $1 + 1308 | 0;
       $6 = HEAP32[$3 >> 2];
       $4 = HEAP32[$3 + 4 >> 2];
       $5 = $9;
       HEAP32[$5 >> 2] = $6;
       HEAP32[$5 + 4 >> 2] = $4;
       $3 = $1 + 1300 | 0;
       $4 = HEAP32[$3 >> 2];
       $5 = HEAP32[$3 + 4 >> 2];
       HEAP32[$2 + 112 >> 2] = $4;
       HEAP32[$2 + 116 >> 2] = $5;
       $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $29);
       break label$20;
      }
      $3 = $1 + 1308 | 0;
      $6 = HEAP32[$3 >> 2];
      $4 = HEAP32[$3 + 4 >> 2];
      $5 = $9;
      HEAP32[$5 >> 2] = $6;
      HEAP32[$5 + 4 >> 2] = $4;
      $3 = $1 + 1316 | 0;
      $9 = HEAP32[$3 >> 2];
      $5 = HEAP32[$3 + 4 >> 2];
      $4 = $25;
      HEAP32[$4 >> 2] = $9;
      HEAP32[$4 + 4 >> 2] = $5;
      $3 = $1 + 1324 | 0;
      $9 = HEAP32[$3 >> 2];
      $5 = $4 + 8 | 0;
      $4 = HEAP32[$3 + 4 >> 2];
      HEAP32[$5 >> 2] = $9;
      HEAP32[$5 + 4 >> 2] = $4;
      $3 = $1 + 1332 | 0;
      $9 = HEAP32[$3 >> 2];
      $5 = HEAP32[$3 + 4 >> 2];
      $4 = $22;
      HEAP32[$4 >> 2] = $9;
      HEAP32[$4 + 4 >> 2] = $5;
      $3 = $1 + 1340 | 0;
      $9 = HEAP32[$3 >> 2];
      $5 = $4 + 8 | 0;
      $4 = HEAP32[$3 + 4 >> 2];
      HEAP32[$5 >> 2] = $9;
      HEAP32[$5 + 4 >> 2] = $4;
      $3 = $1 + 1348 | 0;
      $9 = HEAP32[$3 >> 2];
      $5 = HEAP32[$3 + 4 >> 2];
      $4 = $8;
      HEAP32[$4 >> 2] = $9;
      HEAP32[$4 + 4 >> 2] = $5;
      $3 = $1 + 1356 | 0;
      $9 = HEAP32[$3 >> 2];
      $5 = $4 + 8 | 0;
      $4 = HEAP32[$3 + 4 >> 2];
      HEAP32[$5 >> 2] = $9;
      HEAP32[$5 + 4 >> 2] = $4;
      $3 = $1 + 1300 | 0;
      $4 = HEAP32[$3 >> 2];
      $5 = HEAP32[$3 + 4 >> 2];
      HEAP32[$2 + 112 >> 2] = $4;
      HEAP32[$2 + 116 >> 2] = $5;
     }
     if (!$7) {
      break label$1
     }
     $3 = $38;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $25;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $39;
     $9 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $22;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $40;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $8;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $34 + 8 | 0;
     $6 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $9 = $2 + 120 | 0;
     $4 = $9;
     HEAP32[$4 >> 2] = $6;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $38 + 8 | 0;
     $41 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $46 = $25 + 8 | 0;
     $5 = $46;
     HEAP32[$5 >> 2] = $41;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $39 + 8 | 0;
     $42 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $41 = $22 + 8 | 0;
     $4 = $41;
     HEAP32[$4 >> 2] = $42;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $40 + 8 | 0;
     $7 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $42 = $8 + 8 | 0;
     $5 = $42;
     HEAP32[$5 >> 2] = $7;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $34;
     $4 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 112 >> 2] = $4;
     HEAP32[$2 + 116 >> 2] = $5;
     HEAP32[$2 + 96 >> 2] = $6;
     HEAP32[$2 + 100 >> 2] = HEAP32[$2 + 136 >> 2];
     HEAP32[$2 + 108 >> 2] = 0;
     HEAP32[$2 + 104 >> 2] = HEAP32[$2 + 152 >> 2];
     HEAP32[$2 + 80 >> 2] = HEAP32[$2 + 112 >> 2];
     HEAP32[$2 + 84 >> 2] = HEAP32[$2 + 128 >> 2];
     HEAP32[$2 + 92 >> 2] = 0;
     HEAP32[$2 + 88 >> 2] = HEAP32[$2 + 144 >> 2];
     $12 = HEAPF32[$1 + 1060 >> 2];
     $11 = HEAPF32[$1 + 1144 >> 2];
     $10 = HEAPF32[$1 + 1148 >> 2];
     $13 = HEAPF32[$1 + 1056 >> 2];
     $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $4 = $2 + 72 | 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$2 + 64 >> 2] = 0;
     HEAP32[$2 + 68 >> 2] = 0;
     $6 = $1 + 1348 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 72 >> 2]]($7, $6, $2 + 96 | 0, $2 + 80 | 0, Math_fround($29 * Math_fround(.8999999761581421)), $13, $12, $11, $10, $2 - -64 | 0, Math_fround(10.0), 1);
     HEAP32[$2 + 92 >> 2] = 0;
     $5 = $2 + 148 | 0;
     $16 = HEAPF32[$5 >> 2];
     $7 = HEAP32[$5 >> 2];
     HEAP32[$2 + 88 >> 2] = $7;
     $5 = $2 + 132 | 0;
     $13 = HEAPF32[$5 >> 2];
     HEAP32[$2 + 84 >> 2] = HEAP32[$5 >> 2];
     $14 = HEAPF32[$2 + 116 >> 2];
     HEAP32[$2 + 80 >> 2] = HEAP32[$2 + 116 >> 2];
     $11 = HEAPF32[$1 + 1368 >> 2];
     $10 = HEAPF32[$1 + 1372 >> 2];
     $3 = $1 + 1308 | 0;
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $9;
     HEAP32[$5 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 1316 | 0;
     $9 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $25;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $1 + 1324 | 0;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $46;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 1332 | 0;
     $9 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $22;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $1 + 1340 | 0;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $41;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $6;
     $9 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $8;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $1 + 1356 | 0;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $42;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 1300 | 0;
     $4 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 112 >> 2] = $4;
     HEAP32[$2 + 116 >> 2] = $5;
     $12 = sinf($10);
     $10 = cosf($10);
     HEAPF32[$2 + 68 >> 2] = Math_fround($10 * $13) - Math_fround($12 * $14);
     $15 = sinf($11);
     $11 = cosf($11);
     HEAPF32[$2 + 72 >> 2] = Math_fround(Math_fround(Math_fround($10 * $15) * $14) + Math_fround(Math_fround($15 * $12) * $13)) + Math_fround($11 * $16);
     HEAPF32[$2 + 64 >> 2] = Math_fround(Math_fround(Math_fround($11 * $10) * $14) + Math_fround(Math_fround($11 * $12) * $13)) - Math_fround($15 * $16);
     HEAP32[$2 + 60 >> 2] = 0;
     HEAPF32[$2 + 56 >> 2] = -HEAPF32[$2 + 144 >> 2];
     HEAPF32[$2 + 52 >> 2] = -HEAPF32[$2 + 128 >> 2];
     HEAPF32[$2 + 48 >> 2] = -HEAPF32[$2 + 112 >> 2];
     $12 = HEAPF32[$1 + 968 >> 2];
     $11 = HEAPF32[$1 + 972 >> 2];
     label$22 : {
      if (!!($12 > $11)) {
       $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
       $4 = $2 + 40 | 0;
       HEAP32[$4 >> 2] = 0;
       HEAP32[$4 + 4 >> 2] = 0;
       HEAP32[$2 + 32 >> 2] = 0;
       HEAP32[$2 + 36 >> 2] = 0;
       FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 68 >> 2]]($7, $6, $2 + 48 | 0, $2 - -64 | 0, $29, $29, Math_fround(-3.1415927410125732), Math_fround(3.1415927410125732), $2 + 32 | 0, 0, Math_fround(10.0));
       break label$22;
      }
      if (!($12 < $11)) {
       break label$22
      }
      $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
      $4 = $2 + 40 | 0;
      HEAP32[$4 >> 2] = 0;
      HEAP32[$4 + 4 >> 2] = 0;
      HEAP32[$2 + 32 >> 2] = 0;
      HEAP32[$2 + 36 >> 2] = 0;
      FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 68 >> 2]]($7, $6, $2 + 48 | 0, $2 - -64 | 0, $29, $29, $12, $11, $2 + 32 | 0, 1, Math_fround(10.0));
     }
     $3 = $38;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $25;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $39;
     $9 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $22;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $40;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $8;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $34 + 8 | 0;
     $9 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $2 + 120 | 0;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $38 + 8 | 0;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $25 + 8 | 0;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $39 + 8 | 0;
     $25 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $22 + 8 | 0;
     HEAP32[$4 >> 2] = $25;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $40 + 8 | 0;
     $22 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $8 + 8 | 0;
     HEAP32[$5 >> 2] = $22;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $34;
     $4 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 112 >> 2] = $4;
     HEAP32[$2 + 116 >> 2] = $5;
     $3 = $1 + 688 | 0;
     $8 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $2 + 40 | 0;
     HEAP32[$5 >> 2] = $8;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 680 | 0;
     $4 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 32 >> 2] = $4;
     HEAP32[$2 + 36 >> 2] = $5;
     $3 = $1 + 704 | 0;
     $8 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $2 + 24 | 0;
     HEAP32[$5 >> 2] = $8;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 696 | 0;
     $1 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 16 >> 2] = $1;
     HEAP32[$2 + 20 >> 2] = $5;
     $1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     $4 = $2 + 8 | 0;
     HEAP32[$4 >> 2] = 0;
     HEAP32[$4 + 4 >> 2] = 0;
     HEAP32[$2 >> 2] = 0;
     HEAP32[$2 + 4 >> 2] = 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 80 >> 2]]($1, $2 + 32 | 0, $2 + 16 | 0, $2 + 112 | 0, $2);
     break label$1;
    case 4:
    case 6:
    case 7:
     break label$1;
    case 3:
     break label$2;
    };
   }
   $3 = $1 + 832 | 0;
   $8 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   $34 = $2 + 120 | 0;
   $5 = $34;
   HEAP32[$5 >> 2] = $8;
   HEAP32[$5 + 4 >> 2] = $4;
   $3 = $1 + 848 | 0;
   $8 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $4 = $2 + 136 | 0;
   HEAP32[$4 >> 2] = $8;
   HEAP32[$4 + 4 >> 2] = $5;
   $3 = $1 + 864 | 0;
   $8 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   $5 = $2 + 152 | 0;
   HEAP32[$5 >> 2] = $8;
   HEAP32[$5 + 4 >> 2] = $4;
   $3 = $1 + 880 | 0;
   $8 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $4 = $2 + 168 | 0;
   HEAP32[$4 >> 2] = $8;
   HEAP32[$4 + 4 >> 2] = $5;
   $38 = $1 + 824 | 0;
   $3 = $38;
   $5 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 + 112 >> 2] = $5;
   HEAP32[$2 + 116 >> 2] = $4;
   $3 = $1 + 840 | 0;
   $4 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 + 128 >> 2] = $4;
   HEAP32[$2 + 132 >> 2] = $5;
   $3 = $1 + 856 | 0;
   $5 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 + 144 >> 2] = $5;
   HEAP32[$2 + 148 >> 2] = $4;
   $3 = $1 + 872 | 0;
   $4 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   HEAP32[$2 + 160 >> 2] = $4;
   HEAP32[$2 + 164 >> 2] = $5;
   $8 = $2 + 160 | 0;
   $22 = $2 + 144 | 0;
   $25 = $2 + 128 | 0;
   label$24 : {
    if ($6) {
     $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $29);
     $3 = $1 + 944 | 0;
     $9 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $8 + 8 | 0;
     HEAP32[$5 >> 2] = $9;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 936 | 0;
     $9 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     $4 = $8;
     HEAP32[$4 >> 2] = $9;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $1 + 904 | 0;
     $8 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $25;
     HEAP32[$5 >> 2] = $8;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 912 | 0;
     $8 = HEAP32[$3 >> 2];
     $4 = $5 + 8 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$4 >> 2] = $8;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $1 + 920 | 0;
     $8 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $22;
     HEAP32[$5 >> 2] = $8;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 928 | 0;
     $8 = HEAP32[$3 >> 2];
     $4 = $5 + 8 | 0;
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$4 >> 2] = $8;
     HEAP32[$4 + 4 >> 2] = $5;
     $3 = $1 + 896 | 0;
     $8 = HEAP32[$3 >> 2];
     $4 = HEAP32[$3 + 4 >> 2];
     $5 = $34;
     HEAP32[$5 >> 2] = $8;
     HEAP32[$5 + 4 >> 2] = $4;
     $3 = $1 + 888 | 0;
     $4 = HEAP32[$3 >> 2];
     $5 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2 + 112 >> 2] = $4;
     HEAP32[$2 + 116 >> 2] = $5;
     $6 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 64 >> 2]]($6, $2 + 112 | 0, $29);
     break label$24;
    }
    $3 = $1 + 896 | 0;
    $9 = HEAP32[$3 >> 2];
    $4 = HEAP32[$3 + 4 >> 2];
    $5 = $34;
    HEAP32[$5 >> 2] = $9;
    HEAP32[$5 + 4 >> 2] = $4;
    $3 = $1 + 904 | 0;
    $34 = HEAP32[$3 >> 2];
    $5 = HEAP32[$3 + 4 >> 2];
    $4 = $25;
    HEAP32[$4 >> 2] = $34;
    HEAP32[$4 + 4 >> 2] = $5;
    $3 = $1 + 912 | 0;
    $25 = HEAP32[$3 >> 2];
    $5 = $4 + 8 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    HEAP32[$5 >> 2] = $25;
    HEAP32[$5 + 4 >> 2] = $4;
    $3 = $1 + 920 | 0;
    $25 = HEAP32[$3 >> 2];
    $5 = HEAP32[$3 + 4 >> 2];
    $4 = $22;
    HEAP32[$4 >> 2] = $25;
    HEAP32[$4 + 4 >> 2] = $5;
    $3 = $1 + 928 | 0;
    $22 = HEAP32[$3 >> 2];
    $5 = $4 + 8 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    HEAP32[$5 >> 2] = $22;
    HEAP32[$5 + 4 >> 2] = $4;
    $3 = $1 + 936 | 0;
    $22 = HEAP32[$3 >> 2];
    $5 = HEAP32[$3 + 4 >> 2];
    $4 = $8;
    HEAP32[$4 >> 2] = $22;
    HEAP32[$4 + 4 >> 2] = $5;
    $3 = $1 + 944 | 0;
    $8 = HEAP32[$3 >> 2];
    $5 = $4 + 8 | 0;
    $4 = HEAP32[$3 + 4 >> 2];
    HEAP32[$5 >> 2] = $8;
    HEAP32[$5 + 4 >> 2] = $4;
    $3 = $1 + 888 | 0;
    $4 = HEAP32[$3 >> 2];
    $5 = HEAP32[$3 + 4 >> 2];
    HEAP32[$2 + 112 >> 2] = $4;
    HEAP32[$2 + 116 >> 2] = $5;
   }
   if (!$7) {
    break label$1
   }
   $34 = HEAPU8[$1 + 180 | 0];
   $7 = $34 ? $38 : $1 + 888 | 0;
   $12 = HEAPF32[$7 + 48 >> 2];
   $14 = HEAPF32[$7 + 8 >> 2];
   $19 = HEAPF32[$7 + 4 >> 2];
   $6 = HEAP32[$7 + 4 >> 2];
   $11 = HEAPF32[$7 + 52 >> 2];
   $15 = HEAPF32[$7 + 24 >> 2];
   $20 = HEAPF32[$7 + 16 >> 2];
   $8 = HEAP32[$7 + 16 >> 2];
   $21 = HEAPF32[$7 + 20 >> 2];
   $22 = HEAP32[$7 + 20 >> 2];
   $10 = HEAPF32[$7 + 56 >> 2];
   $13 = HEAPF32[$7 + 40 >> 2];
   $18 = HEAPF32[$7 + 32 >> 2];
   $25 = HEAP32[$7 + 32 >> 2];
   $17 = HEAPF32[$7 + 36 >> 2];
   $7 = HEAP32[$7 + 36 >> 2];
   $5 = ($34 ? 824 : 888) + $1 | 0;
   $24 = HEAPF32[$5 >> 2];
   $34 = HEAP32[$5 >> 2];
   HEAP32[$2 + 108 >> 2] = 0;
   $16 = Math_fround($13 * Math_fround(0.0));
   $17 = Math_fround($17 * Math_fround(0.0));
   $13 = HEAPF32[$1 + 184 >> 2];
   HEAPF32[$2 + 104 >> 2] = $10 + Math_fround($16 + Math_fround($17 + Math_fround($13 * $18)));
   $15 = Math_fround($15 * Math_fround(0.0));
   $21 = Math_fround($21 * Math_fround(0.0));
   HEAPF32[$2 + 100 >> 2] = $11 + Math_fround($15 + Math_fround($21 + Math_fround($13 * $20)));
   $14 = Math_fround($14 * Math_fround(0.0));
   $23 = Math_fround($19 * Math_fround(0.0));
   HEAPF32[$2 + 96 >> 2] = $12 + Math_fround($14 + Math_fround($23 + Math_fround($13 * $24)));
   HEAP32[$2 + 92 >> 2] = 0;
   $13 = HEAPF32[$1 + 188 >> 2];
   HEAPF32[$2 + 88 >> 2] = $10 + Math_fround($16 + Math_fround($17 + Math_fround($13 * $18)));
   HEAPF32[$2 + 84 >> 2] = $11 + Math_fround($15 + Math_fround($21 + Math_fround($13 * $20)));
   HEAPF32[$2 + 80 >> 2] = $12 + Math_fround($14 + Math_fround($23 + Math_fround($13 * $24)));
   $38 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   $4 = $2 + 72 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$2 + 64 >> 2] = 0;
   HEAP32[$2 + 68 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$38 >> 2] + 16 >> 2]]($38, $2 + 96 | 0, $2 + 80 | 0, $2 - -64 | 0);
   HEAP32[$2 + 76 >> 2] = 0;
   HEAP32[$2 + 72 >> 2] = $25;
   HEAP32[$2 + 68 >> 2] = $8;
   HEAP32[$2 + 64 >> 2] = $34;
   HEAP32[$2 + 60 >> 2] = 0;
   HEAP32[$2 + 56 >> 2] = $7;
   HEAP32[$2 + 52 >> 2] = $22;
   HEAP32[$2 + 48 >> 2] = $6;
   $12 = HEAPF32[$1 + 196 >> 2];
   $11 = HEAPF32[$1 + 192 >> 2];
   $0 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 20 >> 2]]($0) | 0;
   $4 = $2 + 40 | 0;
   HEAP32[$4 >> 2] = 0;
   HEAP32[$4 + 4 >> 2] = 0;
   HEAP32[$2 + 32 >> 2] = 0;
   HEAP32[$2 + 36 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0, $1 + 936 | 0, $2 - -64 | 0, $2 + 48 | 0, $29, $29, $11, $12, $2 + 32 | 0, 1, Math_fround(10.0));
  }
  global$0 = $2 + 176 | 0;
 }
 
 function btDiscreteDynamicsWorld__setConstraintSolver_28btConstraintSolver__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (HEAPU8[$0 + 289 | 0]) {
   btAlignedFreeInternal_28void__29(HEAP32[$0 + 216 >> 2])
  }
  HEAP32[$0 + 216 >> 2] = $1;
  HEAP8[$0 + 289 | 0] = 0;
  HEAP32[HEAP32[$0 + 212 >> 2] + 8 >> 2] = $1;
 }
 
 function btDiscreteDynamicsWorld__getConstraintSolver_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 216 >> 2];
 }
 
 function btDiscreteDynamicsWorld__getNumConstraints_28_29_20const($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 228 >> 2];
 }
 
 function btDiscreteDynamicsWorld__getConstraint_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return HEAP32[HEAP32[$0 + 236 >> 2] + ($1 << 2) >> 2];
 }
 
 function btDiscreteDynamicsWorld__serializeRigidBodies_28btSerializer__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $3 = HEAP32[$0 + 8 >> 2];
  if (($3 | 0) >= 1) {
   while (1) {
    $2 = HEAP32[$4 + HEAP32[$0 + 16 >> 2] >> 2];
    if (HEAPU8[$2 + 252 | 0] & 2) {
     $3 = ((((wasm2js_i32$1 = $1, wasm2js_i32$2 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 16 >> 2]]($2) | 0), wasm2js_i32$3 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0) | 0);
     (((((wasm2js_i32$3 = $1, wasm2js_i32$2 = $3), wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 20 >> 2]]($2, HEAP32[$3 + 8 >> 2], $1) | 0), wasm2js_i32$4 = 1497645650), wasm2js_i32$5 = $2), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$3 | 0, wasm2js_i32$2 | 0, wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0);
     $3 = HEAP32[$0 + 8 >> 2];
    }
    $4 = $4 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < ($3 | 0)) {
     continue
    }
    break;
   }
  }
  if (HEAP32[$0 + 228 >> 2] >= 1) {
   $4 = 0;
   $5 = 0;
   while (1) {
    $2 = HEAP32[$4 + HEAP32[$0 + 236 >> 2] >> 2];
    $3 = ((((wasm2js_i32$5 = $1, wasm2js_i32$4 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 36 >> 2]]($2) | 0), wasm2js_i32$1 = 1), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 16 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$5 | 0, wasm2js_i32$4 | 0, wasm2js_i32$1 | 0) | 0);
    (((((wasm2js_i32$1 = $1, wasm2js_i32$4 = $3), wasm2js_i32$5 = FUNCTION_TABLE[HEAP32[HEAP32[$2 >> 2] + 40 >> 2]]($2, HEAP32[$3 + 8 >> 2], $1) | 0), wasm2js_i32$2 = 1397641027), wasm2js_i32$3 = $2), wasm2js_i32$0 = HEAP32[HEAP32[$1 >> 2] + 20 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$4 | 0, wasm2js_i32$5 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0);
    $4 = $4 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < HEAP32[$0 + 228 >> 2]) {
     continue
    }
    break;
   };
  }
 }
 
 function btDiscreteDynamicsWorld__serialize_28btSerializer__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 32 >> 2]]($1);
  $5 = FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, 104, 1) | 0;
  $2 = memset(HEAP32[$5 + 8 >> 2], 0, 104);
  HEAP32[$2 + 88 >> 2] = HEAP32[$0 + 264 >> 2];
  HEAP32[$2 + 92 >> 2] = HEAP32[$0 + 268 >> 2];
  HEAP32[$2 + 96 >> 2] = HEAP32[$0 + 272 >> 2];
  HEAP32[$2 + 100 >> 2] = HEAP32[$0 + 276 >> 2];
  $3 = $0 + 124 | 0;
  $4 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 28 >> 2] = $4;
  HEAP32[$2 + 32 >> 2] = $3;
  $3 = $0 + 104 | 0;
  $4 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 12 >> 2] = $4;
  HEAP32[$2 + 16 >> 2] = $3;
  $3 = $0 + 116 | 0;
  $4 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 20 >> 2] = $4;
  HEAP32[$2 + 24 >> 2] = $3;
  $3 = $0 + 96 | 0;
  $4 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 4 >> 2] = $4;
  HEAP32[$2 + 8 >> 2] = $3;
  HEAP32[$2 >> 2] = HEAP32[$0 + 92 >> 2];
  HEAP32[$2 + 36 >> 2] = HEAP32[$0 + 132 >> 2];
  HEAP32[$2 + 40 >> 2] = HEAP32[$0 + 148 >> 2];
  HEAP32[$2 + 44 >> 2] = HEAP32[$0 + 152 >> 2];
  HEAP32[$2 + 48 >> 2] = HEAP32[$0 + 156 >> 2];
  HEAP32[$2 + 52 >> 2] = HEAP32[$0 + 160 >> 2];
  HEAP32[$2 + 56 >> 2] = HEAP32[$0 + 176 >> 2];
  HEAP32[$2 + 60 >> 2] = HEAP32[$0 + 180 >> 2];
  HEAP32[$2 + 64 >> 2] = HEAP32[$0 + 112 >> 2];
  HEAP32[$2 + 68 >> 2] = HEAP32[$0 + 164 >> 2];
  HEAP32[$2 + 72 >> 2] = HEAP32[$0 + 168 >> 2];
  HEAP32[$2 + 76 >> 2] = HEAP32[$0 + 172 >> 2];
  $3 = HEAP32[$0 + 144 >> 2];
  HEAP32[$2 + 84 >> 2] = 0;
  HEAP32[$2 + 80 >> 2] = $3;
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 20 >> 2]]($1, $5, 23517, 1145853764, $2);
  btCollisionWorld__serializeCollisionObjects_28btSerializer__29($0, $1);
  btDiscreteDynamicsWorld__serializeRigidBodies_28btSerializer__29($0, $1);
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1);
 }
 
 function btDiscreteDynamicsWorld__updateVehicles_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = global$0 - 16 | 0;
  global$0 = $2;
  CProfileSample__CProfileSample_28char_20const__29($2 + 8 | 0, 23244);
  if (HEAP32[$0 + 296 >> 2] >= 1) {
   while (1) {
    $4 = HEAP32[$3 + HEAP32[$0 + 304 >> 2] >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, $0, $1);
    $3 = $3 + 4 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < HEAP32[$0 + 296 >> 2]) {
     continue
    }
    break;
   }
  }
  CProfileSample___CProfileSample_28_29();
  global$0 = $2 + 16 | 0;
 }
 
 function InplaceSolverIslandCallback___InplaceSolverIslandCallback_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 23620;
  $1 = HEAP32[$0 + 80 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 84 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 80 >> 2] = 0;
  }
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP8[$0 + 84 | 0] = 1;
  $1 = HEAP32[$0 + 60 >> 2];
  if ($1) {
   if (HEAPU8[$0 - -64 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 60 >> 2] = 0;
  }
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $1 = HEAP32[$0 + 40 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 44 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 40 >> 2] = 0;
  }
  HEAP32[$0 + 40 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP8[$0 + 44 | 0] = 1;
  return $0 | 0;
 }
 
 function InplaceSolverIslandCallback___InplaceSolverIslandCallback_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 23620;
  $1 = HEAP32[$0 + 80 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 84 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 80 >> 2] = 0;
  }
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP8[$0 + 84 | 0] = 1;
  $1 = HEAP32[$0 + 60 >> 2];
  if ($1) {
   if (HEAPU8[$0 - -64 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 60 >> 2] = 0;
  }
  HEAP32[$0 + 60 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP8[$0 - -64 | 0] = 1;
  $1 = HEAP32[$0 + 40 >> 2];
  label$5 : {
   if (!$1) {
    break label$5
   }
   if (!HEAPU8[$0 + 44 | 0]) {
    break label$5
   }
   btAlignedFreeInternal_28void__29($1);
  }
  operator_20delete_28void__29($0);
 }
 
 function InplaceSolverIslandCallback__processIsland_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  label$1 : {
   label$2 : {
    if (($5 | 0) >= 0) {
     $8 = HEAP32[$0 + 16 >> 2];
     label$4 : {
      if (($8 | 0) >= 1) {
       $11 = HEAP32[$0 + 12 >> 2];
       while (1) {
        $9 = HEAP32[$11 >> 2];
        $6 = HEAP32[HEAP32[$9 + 28 >> 2] + 208 >> 2];
        if (($6 | 0) <= -1) {
         $6 = HEAP32[HEAP32[$9 + 32 >> 2] + 208 >> 2]
        }
        if (($6 | 0) == ($5 | 0)) {
         break label$4
        }
        $11 = $11 + 4 | 0;
        $7 = $7 + 1 | 0;
        if (($7 | 0) < ($8 | 0)) {
         continue
        }
        break;
       };
      }
      $11 = 0;
     }
     if (($7 | 0) < ($8 | 0)) {
      $9 = $8 - $7 | 0;
      $6 = HEAP32[$0 + 12 >> 2] + ($7 << 2) | 0;
      while (1) {
       $8 = HEAP32[$6 >> 2];
       $7 = HEAP32[HEAP32[$8 + 28 >> 2] + 208 >> 2];
       if (($7 | 0) <= -1) {
        $7 = HEAP32[HEAP32[$8 + 32 >> 2] + 208 >> 2]
       }
       $6 = $6 + 4 | 0;
       $13 = (($5 | 0) == ($7 | 0)) + $13 | 0;
       $9 = $9 + -1 | 0;
       if ($9) {
        continue
       }
       break;
      };
     }
     $6 = HEAP32[$0 + 4 >> 2];
     if (HEAP32[$6 + 80 >> 2] < 2) {
      break label$1
     }
     if (($2 | 0) < 1) {
      break label$2
     }
     $6 = HEAP32[$0 + 36 >> 2];
     $7 = HEAP32[$0 + 32 >> 2];
     $8 = 0;
     while (1) {
      $12 = ($8 << 2) + $1 | 0;
      label$12 : {
       if (($6 | 0) != ($7 | 0)) {
        $5 = $7;
        break label$12;
       }
       $10 = $6 ? $6 << 1 : 1;
       if (($6 | 0) >= ($10 | 0)) {
        $5 = $6;
        break label$12;
       }
       label$15 : {
        if (!$10) {
         $9 = 0;
         $5 = $6;
         break label$15;
        }
        $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10 << 2);
        $5 = HEAP32[$0 + 32 >> 2];
       }
       if (($5 | 0) >= 1) {
        $6 = 0;
        $7 = $5;
        while (1) {
         HEAP32[$6 + $9 >> 2] = HEAP32[$6 + HEAP32[$0 + 40 >> 2] >> 2];
         $6 = $6 + 4 | 0;
         $7 = $7 + -1 | 0;
         if ($7) {
          continue
         }
         break;
        };
       }
       $6 = HEAP32[$0 + 40 >> 2];
       if ($6) {
        if (HEAPU8[$0 + 44 | 0]) {
         btAlignedFreeInternal_28void__29($6);
         $5 = HEAP32[$0 + 32 >> 2];
        }
        HEAP32[$0 + 40 >> 2] = 0;
       }
       HEAP32[$0 + 40 >> 2] = $9;
       HEAP8[$0 + 44 | 0] = 1;
       HEAP32[$0 + 36 >> 2] = $10;
       $6 = $10;
      }
      $7 = $5 + 1 | 0;
      HEAP32[$0 + 32 >> 2] = $7;
      HEAP32[HEAP32[$0 + 40 >> 2] + ($5 << 2) >> 2] = HEAP32[$12 >> 2];
      $8 = $8 + 1 | 0;
      if (($2 | 0) != ($8 | 0)) {
       continue
      }
      break;
     };
     break label$2;
    }
    $6 = HEAP32[$0 + 8 >> 2];
    Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$6 >> 2] + 12 >> 2]]($6, $1, $2, $3, $4, HEAP32[$0 + 12 >> 2], HEAP32[$0 + 16 >> 2], HEAP32[$0 + 4 >> 2], HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]));
    return;
   }
   if (($4 | 0) >= 1) {
    $6 = HEAP32[$0 + 56 >> 2];
    $7 = HEAP32[$0 + 52 >> 2];
    $8 = 0;
    while (1) {
     $12 = ($8 << 2) + $3 | 0;
     label$23 : {
      if (($6 | 0) != ($7 | 0)) {
       $5 = $7;
       break label$23;
      }
      $10 = $6 ? $6 << 1 : 1;
      if (($6 | 0) >= ($10 | 0)) {
       $5 = $6;
       break label$23;
      }
      label$26 : {
       if (!$10) {
        $9 = 0;
        $5 = $6;
        break label$26;
       }
       $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10 << 2);
       $5 = HEAP32[$0 + 52 >> 2];
      }
      if (($5 | 0) >= 1) {
       $6 = 0;
       $7 = $5;
       while (1) {
        HEAP32[$6 + $9 >> 2] = HEAP32[$6 + HEAP32[$0 + 60 >> 2] >> 2];
        $6 = $6 + 4 | 0;
        $7 = $7 + -1 | 0;
        if ($7) {
         continue
        }
        break;
       };
      }
      $6 = HEAP32[$0 + 60 >> 2];
      if ($6) {
       if (HEAPU8[$0 + 64 | 0]) {
        btAlignedFreeInternal_28void__29($6);
        $5 = HEAP32[$0 + 52 >> 2];
       }
       HEAP32[$0 + 60 >> 2] = 0;
      }
      HEAP32[$0 + 60 >> 2] = $9;
      HEAP8[$0 + 64 | 0] = 1;
      HEAP32[$0 + 56 >> 2] = $10;
      $6 = $10;
     }
     $7 = $5 + 1 | 0;
     HEAP32[$0 + 52 >> 2] = $7;
     HEAP32[HEAP32[$0 + 60 >> 2] + ($5 << 2) >> 2] = HEAP32[$12 >> 2];
     $8 = $8 + 1 | 0;
     if (($4 | 0) != ($8 | 0)) {
      continue
     }
     break;
    };
   }
   label$32 : {
    if (!$13) {
     $7 = HEAP32[$0 + 72 >> 2];
     break label$32;
    }
    $6 = HEAP32[$0 + 76 >> 2];
    $7 = HEAP32[$0 + 72 >> 2];
    $8 = 0;
    while (1) {
     $12 = ($8 << 2) + $11 | 0;
     label$35 : {
      if (($6 | 0) != ($7 | 0)) {
       $5 = $7;
       break label$35;
      }
      $10 = $6 ? $6 << 1 : 1;
      if (($6 | 0) >= ($10 | 0)) {
       $5 = $6;
       break label$35;
      }
      label$38 : {
       if (!$10) {
        $9 = 0;
        $5 = $6;
        break label$38;
       }
       $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10 << 2);
       $5 = HEAP32[$0 + 72 >> 2];
      }
      if (($5 | 0) >= 1) {
       $6 = 0;
       $7 = $5;
       while (1) {
        HEAP32[$6 + $9 >> 2] = HEAP32[$6 + HEAP32[$0 + 80 >> 2] >> 2];
        $6 = $6 + 4 | 0;
        $7 = $7 + -1 | 0;
        if ($7) {
         continue
        }
        break;
       };
      }
      $6 = HEAP32[$0 + 80 >> 2];
      if ($6) {
       if (HEAPU8[$0 + 84 | 0]) {
        btAlignedFreeInternal_28void__29($6);
        $5 = HEAP32[$0 + 72 >> 2];
       }
       HEAP32[$0 + 80 >> 2] = 0;
      }
      HEAP32[$0 + 80 >> 2] = $9;
      HEAP8[$0 + 84 | 0] = 1;
      HEAP32[$0 + 76 >> 2] = $10;
      $6 = $10;
     }
     $7 = $5 + 1 | 0;
     HEAP32[$0 + 72 >> 2] = $7;
     HEAP32[HEAP32[$0 + 80 >> 2] + ($5 << 2) >> 2] = HEAP32[$12 >> 2];
     $8 = $8 + 1 | 0;
     if (($13 | 0) != ($8 | 0)) {
      continue
     }
     break;
    };
   }
   if (($7 + HEAP32[$0 + 52 >> 2] | 0) > HEAP32[HEAP32[$0 + 4 >> 2] + 80 >> 2]) {
    InplaceSolverIslandCallback__processConstraints_28_29($0)
   }
   return;
  }
  $7 = HEAP32[$0 + 8 >> 2];
  Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$7 >> 2] + 12 >> 2]]($7, $1, $2, $3, $4, $11, $13, $6, HEAP32[$0 + 20 >> 2], HEAP32[$0 + 24 >> 2]));
 }
 
 function btClosestNotMeConvexResultCallback__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[$1 >> 2];
  $3 = HEAP32[$0 + 84 >> 2];
  label$1 : {
   if (($2 | 0) == ($3 | 0)) {
    break label$1
   }
   if (!(HEAP32[$0 + 12 >> 2] & HEAP32[$1 + 4 >> 2])) {
    break label$1
   }
   if (!(HEAP32[$1 + 8 >> 2] & HEAP32[$0 + 8 >> 2])) {
    break label$1
   }
   $0 = HEAP32[$0 + 96 >> 2];
   $4 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $3, $2) | 0;
  }
  return $4 | 0;
 }
 
 function btClosestNotMeConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0);
  $5 = Math_fround(1.0);
  $3 = HEAP32[$1 >> 2];
  label$1 : {
   if (($3 | 0) == HEAP32[$0 + 84 >> 2]) {
    break label$1
   }
   if (HEAPU8[$3 + 204 | 0] & 4) {
    break label$1
   }
   if (Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 32 >> 2] - HEAPF32[$0 + 16 >> 2]) * HEAPF32[$1 + 8 >> 2]) + Math_fround(Math_fround(HEAPF32[$0 + 36 >> 2] - HEAPF32[$0 + 20 >> 2]) * HEAPF32[$1 + 12 >> 2])) + Math_fround(Math_fround(HEAPF32[$0 + 40 >> 2] - HEAPF32[$0 + 24 >> 2]) * HEAPF32[$1 + 16 >> 2])) >= Math_fround(-HEAPF32[$0 + 88 >> 2])) {
    break label$1
   }
   HEAP32[$0 + 80 >> 2] = $3;
   HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 40 >> 2];
   label$2 : {
    if ($2) {
     $3 = $1 + 8 | 0;
     $4 = HEAP32[$3 + 4 >> 2];
     HEAP32[$0 + 48 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$0 + 52 >> 2] = $4;
     $2 = $3 + 8 | 0;
     $3 = HEAP32[$2 >> 2];
     $2 = HEAP32[$2 + 4 >> 2];
     $4 = $0 + 56 | 0;
     HEAP32[$4 >> 2] = $3;
     HEAP32[$4 + 4 >> 2] = $2;
     break label$2;
    }
    $8 = HEAPF32[$3 + 12 >> 2];
    $9 = HEAPF32[$3 + 8 >> 2];
    $10 = HEAPF32[$3 + 28 >> 2];
    $11 = HEAPF32[$3 + 20 >> 2];
    $12 = HEAPF32[$3 + 24 >> 2];
    $13 = HEAPF32[$3 + 44 >> 2];
    $14 = HEAPF32[$3 + 36 >> 2];
    $15 = HEAPF32[$3 + 40 >> 2];
    $16 = HEAPF32[$3 + 4 >> 2];
    $5 = HEAPF32[$1 + 16 >> 2];
    $6 = HEAPF32[$1 + 8 >> 2];
    $7 = HEAPF32[$1 + 12 >> 2];
    HEAP32[$0 + 60 >> 2] = 0;
    HEAPF32[$0 + 56 >> 2] = Math_fround(Math_fround($6 * $14) + Math_fround($7 * $15)) + Math_fround($5 * $13);
    HEAPF32[$0 + 52 >> 2] = Math_fround(Math_fround($6 * $11) + Math_fround($7 * $12)) + Math_fround($5 * $10);
    HEAPF32[$0 + 48 >> 2] = Math_fround(Math_fround($16 * $6) + Math_fround($9 * $7)) + Math_fround($8 * $5);
   }
   $4 = HEAP32[$1 + 28 >> 2];
   HEAP32[$0 + 64 >> 2] = HEAP32[$1 + 24 >> 2];
   HEAP32[$0 + 68 >> 2] = $4;
   $2 = $1 + 32 | 0;
   $3 = HEAP32[$2 >> 2];
   $2 = HEAP32[$2 + 4 >> 2];
   $4 = $0 + 72 | 0;
   HEAP32[$4 >> 2] = $3;
   HEAP32[$4 + 4 >> 2] = $2;
   $5 = HEAPF32[$1 + 40 >> 2];
  }
  return Math_fround($5);
 }
 
 function btGhostObject___btGhostObject_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 23812;
  $1 = HEAP32[$0 + 336 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 340 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 336 >> 2] = 0;
  }
  HEAP32[$0 + 336 >> 2] = 0;
  HEAP32[$0 + 328 >> 2] = 0;
  HEAP32[$0 + 332 >> 2] = 0;
  HEAP8[$0 + 340 | 0] = 1;
  btCollisionObject___btCollisionObject_28_29($0);
  return $0 | 0;
 }
 
 function btGhostObject___btGhostObject_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 23812;
  $1 = HEAP32[$0 + 336 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 340 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 336 >> 2] = 0;
  }
  HEAP32[$0 + 336 >> 2] = 0;
  HEAP32[$0 + 328 >> 2] = 0;
  HEAP32[$0 + 332 >> 2] = 0;
  HEAP8[$0 + 340 | 0] = 1;
  btCollisionObject___btCollisionObject_28_29($0);
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btGhostObject__addOverlappingObjectInternal_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = HEAP32[$1 >> 2];
  $2 = HEAP32[$0 + 328 >> 2];
  label$1 : {
   label$2 : {
    if (($2 | 0) < 1) {
     break label$2
    }
    $1 = HEAP32[$0 + 336 >> 2];
    $3 = $2;
    while (1) {
     if (HEAP32[$1 >> 2] != ($5 | 0)) {
      $1 = $1 + 4 | 0;
      $3 = $3 + -1 | 0;
      if ($3) {
       continue
      }
      break label$2;
     }
     break;
    };
    if ($3) {
     break label$1
    }
   }
   label$5 : {
    if (HEAP32[$0 + 332 >> 2] != ($2 | 0)) {
     break label$5
    }
    $4 = $2 ? $2 << 1 : 1;
    if (($2 | 0) >= ($4 | 0)) {
     break label$5
    }
    label$6 : {
     if (!$4) {
      break label$6
     }
     $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
     $2 = HEAP32[$0 + 328 >> 2];
    }
    if (($2 | 0) >= 1) {
     $1 = 0;
     $3 = $2;
     while (1) {
      HEAP32[$1 + $6 >> 2] = HEAP32[$1 + HEAP32[$0 + 336 >> 2] >> 2];
      $1 = $1 + 4 | 0;
      $3 = $3 + -1 | 0;
      if ($3) {
       continue
      }
      break;
     };
    }
    $1 = HEAP32[$0 + 336 >> 2];
    if ($1) {
     if (HEAPU8[$0 + 340 | 0]) {
      btAlignedFreeInternal_28void__29($1);
      $2 = HEAP32[$0 + 328 >> 2];
     }
     HEAP32[$0 + 336 >> 2] = 0;
    }
    HEAP32[$0 + 336 >> 2] = $6;
    HEAP32[$0 + 332 >> 2] = $4;
    HEAP8[$0 + 340 | 0] = 1;
   }
   HEAP32[$0 + 328 >> 2] = $2 + 1;
   HEAP32[HEAP32[$0 + 336 >> 2] + ($2 << 2) >> 2] = $5;
  }
 }
 
 function btGhostObject__removeOverlappingObjectInternal_28btBroadphaseProxy__2c_20btDispatcher__2c_20btBroadphaseProxy__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $3 = HEAP32[$0 + 328 >> 2];
  label$1 : {
   if (($3 | 0) < 1) {
    break label$1
   }
   $5 = HEAP32[$1 >> 2];
   $2 = 0;
   $4 = HEAP32[$0 + 336 >> 2];
   $1 = $4;
   while (1) {
    if (HEAP32[$1 >> 2] != ($5 | 0)) {
     $1 = $1 + 4 | 0;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue
     }
     break label$1;
    }
    break;
   };
   if (($2 | 0) >= ($3 | 0)) {
    break label$1
   }
   $2 = $3 + -1 | 0;
   HEAP32[$0 + 328 >> 2] = $2;
   HEAP32[$1 >> 2] = HEAP32[($2 << 2) + $4 >> 2];
  }
 }
 
 function btPairCachingGhostObject__btPairCachingGhostObject_28_29($0) {
  var $1 = 0;
  btCollisionObject__btCollisionObject_28_29($0);
  HEAP32[$0 + 336 >> 2] = 0;
  HEAP8[$0 + 340 | 0] = 1;
  $1 = $0 + 328 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 252 >> 2] = 4;
  HEAP32[$0 >> 2] = 23856;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(72);
  btHashedOverlappingPairCache__btHashedOverlappingPairCache_28_29($1);
  HEAP32[$0 + 344 >> 2] = $1;
 }
 
 function btPairCachingGhostObject___btPairCachingGhostObject_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 23856;
  $1 = HEAP32[$0 + 344 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 344 >> 2]);
  HEAP32[$0 >> 2] = 23812;
  $1 = HEAP32[$0 + 336 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 340 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 336 >> 2] = 0;
  }
  HEAP32[$0 + 336 >> 2] = 0;
  HEAP32[$0 + 328 >> 2] = 0;
  HEAP32[$0 + 332 >> 2] = 0;
  HEAP8[$0 + 340 | 0] = 1;
  btCollisionObject___btCollisionObject_28_29($0);
  return $0 | 0;
 }
 
 function btPairCachingGhostObject___btPairCachingGhostObject_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 23856;
  $1 = HEAP32[$0 + 344 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] >> 2]]($1) | 0;
  btAlignedFreeInternal_28void__29(HEAP32[$0 + 344 >> 2]);
  HEAP32[$0 >> 2] = 23812;
  $1 = HEAP32[$0 + 336 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 340 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 336 >> 2] = 0;
  }
  HEAP32[$0 + 336 >> 2] = 0;
  HEAP32[$0 + 328 >> 2] = 0;
  HEAP32[$0 + 332 >> 2] = 0;
  HEAP8[$0 + 340 | 0] = 1;
  btCollisionObject___btCollisionObject_28_29($0);
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btPairCachingGhostObject__addOverlappingObjectInternal_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $2 = $2 ? $2 : HEAP32[$0 + 188 >> 2];
  $7 = HEAP32[$1 >> 2];
  $4 = HEAP32[$0 + 328 >> 2];
  label$2 : {
   label$3 : {
    if (($4 | 0) < 1) {
     break label$3
    }
    $3 = HEAP32[$0 + 336 >> 2];
    $5 = $4;
    while (1) {
     if (HEAP32[$3 >> 2] != ($7 | 0)) {
      $3 = $3 + 4 | 0;
      $5 = $5 + -1 | 0;
      if ($5) {
       continue
      }
      break label$3;
     }
     break;
    };
    if ($5) {
     break label$2
    }
   }
   label$6 : {
    if (HEAP32[$0 + 332 >> 2] != ($4 | 0)) {
     break label$6
    }
    $6 = $4 ? $4 << 1 : 1;
    if (($4 | 0) >= ($6 | 0)) {
     break label$6
    }
    label$7 : {
     if (!$6) {
      break label$7
     }
     $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($6 << 2);
     $4 = HEAP32[$0 + 328 >> 2];
    }
    if (($4 | 0) >= 1) {
     $3 = 0;
     $5 = $4;
     while (1) {
      HEAP32[$3 + $8 >> 2] = HEAP32[$3 + HEAP32[$0 + 336 >> 2] >> 2];
      $3 = $3 + 4 | 0;
      $5 = $5 + -1 | 0;
      if ($5) {
       continue
      }
      break;
     };
    }
    $3 = HEAP32[$0 + 336 >> 2];
    if ($3) {
     if (HEAPU8[$0 + 340 | 0]) {
      btAlignedFreeInternal_28void__29($3);
      $4 = HEAP32[$0 + 328 >> 2];
     }
     HEAP32[$0 + 336 >> 2] = 0;
    }
    HEAP32[$0 + 336 >> 2] = $8;
    HEAP32[$0 + 332 >> 2] = $6;
    HEAP8[$0 + 340 | 0] = 1;
   }
   HEAP32[HEAP32[$0 + 336 >> 2] + ($4 << 2) >> 2] = $7;
   HEAP32[$0 + 328 >> 2] = $4 + 1;
   $3 = HEAP32[$0 + 344 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 8 >> 2]]($3, $2, $1) | 0;
  }
 }
 
 function btPairCachingGhostObject__removeOverlappingObjectInternal_28btBroadphaseProxy__2c_20btDispatcher__2c_20btBroadphaseProxy__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $8 = HEAP32[$1 >> 2];
  $3 = $3 ? $3 : HEAP32[$0 + 188 >> 2];
  $6 = HEAP32[$0 + 328 >> 2];
  label$2 : {
   if (($6 | 0) < 1) {
    break label$2
   }
   $7 = HEAP32[$0 + 336 >> 2];
   $4 = $7;
   while (1) {
    if (HEAP32[$4 >> 2] != ($8 | 0)) {
     $4 = $4 + 4 | 0;
     $5 = $5 + 1 | 0;
     if (($5 | 0) != ($6 | 0)) {
      continue
     }
     break label$2;
    }
    break;
   };
   if (($5 | 0) >= ($6 | 0)) {
    break label$2
   }
   $5 = $6 + -1 | 0;
   HEAP32[$4 >> 2] = HEAP32[($5 << 2) + $7 >> 2];
   HEAP32[$0 + 328 >> 2] = $5;
   $4 = HEAP32[$0 + 344 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 12 >> 2]]($4, $3, $1, $2) | 0;
  }
 }
 
 function btGhostObject__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0);
  $6 = global$0 - 272 | 0;
  global$0 = $6;
  $7 = $2 + 8 | 0;
  $12 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $9 = $6 + 216 | 0;
  HEAP32[$9 >> 2] = $12;
  HEAP32[$9 + 4 >> 2] = $8;
  $7 = $2 + 24 | 0;
  $12 = HEAP32[$7 >> 2];
  $9 = HEAP32[$7 + 4 >> 2];
  $8 = $6 + 232 | 0;
  HEAP32[$8 >> 2] = $12;
  HEAP32[$8 + 4 >> 2] = $9;
  $7 = $2 + 40 | 0;
  $12 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $9 = $6 + 248 | 0;
  HEAP32[$9 >> 2] = $12;
  HEAP32[$9 + 4 >> 2] = $8;
  $7 = $2 + 56 | 0;
  $10 = HEAP32[$7 >> 2];
  $9 = HEAP32[$7 + 4 >> 2];
  $12 = $6 + 264 | 0;
  $8 = $12;
  HEAP32[$8 >> 2] = $10;
  HEAP32[$8 + 4 >> 2] = $9;
  $7 = $3 + 8 | 0;
  $10 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $9 = $6 + 152 | 0;
  HEAP32[$9 >> 2] = $10;
  HEAP32[$9 + 4 >> 2] = $8;
  $7 = $2;
  $8 = HEAP32[$7 >> 2];
  $9 = HEAP32[$7 + 4 >> 2];
  HEAP32[$6 + 208 >> 2] = $8;
  HEAP32[$6 + 212 >> 2] = $9;
  $8 = HEAP32[$7 + 20 >> 2];
  HEAP32[$6 + 224 >> 2] = HEAP32[$7 + 16 >> 2];
  HEAP32[$6 + 228 >> 2] = $8;
  $9 = HEAP32[$7 + 36 >> 2];
  HEAP32[$6 + 240 >> 2] = HEAP32[$7 + 32 >> 2];
  HEAP32[$6 + 244 >> 2] = $9;
  $8 = HEAP32[$7 + 52 >> 2];
  HEAP32[$6 + 256 >> 2] = HEAP32[$7 + 48 >> 2];
  HEAP32[$6 + 260 >> 2] = $8;
  $7 = $3;
  $8 = HEAP32[$7 >> 2];
  $9 = HEAP32[$7 + 4 >> 2];
  HEAP32[$6 + 144 >> 2] = $8;
  HEAP32[$6 + 148 >> 2] = $9;
  $7 = $7 + 24 | 0;
  $10 = HEAP32[$7 >> 2];
  $8 = HEAP32[$7 + 4 >> 2];
  $9 = $6 + 168 | 0;
  HEAP32[$9 >> 2] = $10;
  HEAP32[$9 + 4 >> 2] = $8;
  $7 = $3 + 40 | 0;
  $10 = HEAP32[$7 >> 2];
  $9 = HEAP32[$7 + 4 >> 2];
  $8 = $6 + 184 | 0;
  HEAP32[$8 >> 2] = $10;
  HEAP32[$8 + 4 >> 2] = $9;
  $7 = $3 + 56 | 0;
  $8 = HEAP32[$7 + 4 >> 2];
  $10 = $6 + 200 | 0;
  $9 = $10;
  HEAP32[$9 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$9 + 4 >> 2] = $8;
  $7 = $3;
  $8 = HEAP32[$7 + 16 >> 2];
  $9 = HEAP32[$7 + 20 >> 2];
  HEAP32[$6 + 160 >> 2] = $8;
  HEAP32[$6 + 164 >> 2] = $9;
  $8 = HEAP32[$7 + 36 >> 2];
  HEAP32[$6 + 176 >> 2] = HEAP32[$7 + 32 >> 2];
  HEAP32[$6 + 180 >> 2] = $8;
  $9 = HEAP32[$7 + 52 >> 2];
  HEAP32[$6 + 192 >> 2] = HEAP32[$7 + 48 >> 2];
  HEAP32[$6 + 196 >> 2] = $9;
  HEAP32[$6 + 108 >> 2] = 0;
  HEAPF32[$6 + 104 >> 2] = HEAPF32[$10 >> 2] - HEAPF32[$12 >> 2];
  HEAPF32[$6 + 100 >> 2] = HEAPF32[$6 + 196 >> 2] - HEAPF32[$6 + 260 >> 2];
  HEAPF32[$6 + 96 >> 2] = HEAPF32[$6 + 192 >> 2] - HEAPF32[$6 + 256 >> 2];
  btTransformUtil__calculateDiffAxisAngle_28btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20float__29($6 + 208 | 0, $6 + 144 | 0, $6 + 16 | 0, $6 + 128 | 0);
  HEAP32[$6 + 92 >> 2] = 0;
  $11 = HEAPF32[$6 + 128 >> 2];
  HEAPF32[$6 + 88 >> 2] = $11 * HEAPF32[$6 + 24 >> 2];
  HEAPF32[$6 + 84 >> 2] = $11 * HEAPF32[$6 + 20 >> 2];
  HEAPF32[$6 + 80 >> 2] = $11 * HEAPF32[$6 + 16 >> 2];
  $8 = $6 + 72 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  $8 = $6 - -64 | 0;
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  btMatrix3x3__getRotation_28btQuaternion__29_20const($6 + 208 | 0, $6 + 128 | 0);
  HEAP32[$6 + 60 >> 2] = 0;
  HEAP32[$6 + 44 >> 2] = 0;
  $11 = HEAPF32[$6 + 128 >> 2];
  $13 = HEAPF32[$6 + 132 >> 2];
  $16 = HEAPF32[$6 + 136 >> 2];
  $14 = HEAPF32[$6 + 140 >> 2];
  $17 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($11 * $11) + Math_fround($13 * $13)) + Math_fround($16 * $16)) + Math_fround($14 * $14)));
  $19 = Math_fround($16 * $17);
  $15 = Math_fround($13 * $19);
  $18 = Math_fround($11 * $17);
  $20 = Math_fround($14 * $18);
  HEAPF32[$6 + 52 >> 2] = $15 + $20;
  HEAPF32[$6 + 40 >> 2] = $15 - $20;
  $15 = Math_fround($11 * $18);
  $17 = Math_fround($13 * $17);
  $13 = Math_fround($13 * $17);
  HEAPF32[$6 + 56 >> 2] = Math_fround(1.0) - Math_fround($15 + $13);
  $16 = Math_fround($16 * $19);
  HEAPF32[$6 + 36 >> 2] = Math_fround(1.0) - Math_fround($15 + $16);
  HEAP32[$6 + 28 >> 2] = 0;
  $15 = Math_fround($11 * $19);
  $18 = Math_fround($14 * $17);
  HEAPF32[$6 + 48 >> 2] = $15 - $18;
  $11 = Math_fround($11 * $17);
  $14 = Math_fround($14 * $19);
  HEAPF32[$6 + 32 >> 2] = $11 + $14;
  HEAPF32[$6 + 24 >> 2] = $15 + $18;
  HEAPF32[$6 + 20 >> 2] = $11 - $14;
  HEAPF32[$6 + 16 >> 2] = Math_fround(1.0) - Math_fround($13 + $16);
  btCollisionShape__calculateTemporalAabb_28btTransform_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20btVector3__2c_20btVector3__29_20const($1, $6 + 16 | 0, $6 + 96 | 0, $6 + 80 | 0, $6 + 128 | 0, $6 + 112 | 0);
  if (HEAP32[$0 + 328 >> 2] >= 1) {
   $8 = $3 + 48 | 0;
   $9 = $2 + 48 | 0;
   $3 = 0;
   $12 = 0;
   while (1) {
    $2 = HEAP32[$3 + HEAP32[$0 + 336 >> 2] >> 2];
    label$3 : {
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 8 >> 2]]($4, HEAP32[$2 + 188 >> 2])) {
      break label$3
     }
     $10 = HEAP32[$2 + 192 >> 2];
     $7 = $2 + 4 | 0;
     FUNCTION_TABLE[HEAP32[HEAP32[$10 >> 2] + 8 >> 2]]($10, $7, $6 + 16 | 0, $6 + 96 | 0);
     HEAP32[$6 + 28 >> 2] = 0;
     HEAP32[$6 + 108 >> 2] = 0;
     HEAPF32[$6 + 24 >> 2] = HEAPF32[$6 + 24 >> 2] + HEAPF32[$6 + 136 >> 2];
     HEAPF32[$6 + 20 >> 2] = HEAPF32[$6 + 20 >> 2] + HEAPF32[$6 + 132 >> 2];
     HEAPF32[$6 + 16 >> 2] = HEAPF32[$6 + 16 >> 2] + HEAPF32[$6 + 128 >> 2];
     HEAPF32[$6 + 96 >> 2] = HEAPF32[$6 + 96 >> 2] + HEAPF32[$6 + 112 >> 2];
     HEAPF32[$6 + 100 >> 2] = HEAPF32[$6 + 100 >> 2] + HEAPF32[$6 + 116 >> 2];
     HEAPF32[$6 + 104 >> 2] = HEAPF32[$6 + 104 >> 2] + HEAPF32[$6 + 120 >> 2];
     HEAP32[$6 + 12 >> 2] = 1065353216;
     if (!btRayAabb_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float__2c_20btVector3__29($9, $8, $6 + 16 | 0, $6 + 96 | 0, $6 + 12 | 0, $6 + 80 | 0)) {
      break label$3
     }
     btCollisionWorld__objectQuerySingle_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObject__2c_20btCollisionShape_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29($1, $6 + 208 | 0, $6 + 144 | 0, $2, HEAP32[$2 + 192 >> 2], $7, $4, $5);
    }
    $3 = $3 + 4 | 0;
    $12 = $12 + 1 | 0;
    if (($12 | 0) < HEAP32[$0 + 328 >> 2]) {
     continue
    }
    break;
   };
  }
  global$0 = $6 + 272 | 0;
 }
 
 function btRayAabb_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20float__2c_20btVector3__29($0, $1, $2, $3, $4, $5) {
  var $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = Math_fround(0), $25 = 0, $26 = 0, $27 = 0, $28 = 0;
  $7 = global$0 - 16 | 0;
  $6 = HEAPF32[$3 >> 2];
  $9 = HEAPF32[$2 >> 2];
  $13 = Math_fround(Math_fround($6 + $9) * Math_fround(.5));
  $10 = Math_fround(HEAPF32[$1 >> 2] - $13);
  $6 = Math_fround($6 - $9);
  $19 = Math_fround($6 * Math_fround(.5));
  $20 = $10 > $19;
  $9 = Math_fround($6 * Math_fround(-.5));
  $21 = $10 < $9;
  $6 = HEAPF32[$3 + 4 >> 2];
  $15 = HEAPF32[$2 + 4 >> 2];
  $11 = Math_fround(Math_fround($6 + $15) * Math_fround(.5));
  $12 = Math_fround(HEAPF32[$1 + 4 >> 2] - $11);
  $6 = Math_fround($6 - $15);
  $18 = Math_fround($6 * Math_fround(-.5));
  $22 = $12 < $18;
  $15 = Math_fround($6 * Math_fround(.5));
  $23 = $12 > $15;
  $6 = HEAPF32[$3 + 8 >> 2];
  $16 = HEAPF32[$2 + 8 >> 2];
  $14 = Math_fround(Math_fround($6 + $16) * Math_fround(.5));
  $17 = Math_fround(HEAPF32[$1 + 8 >> 2] - $14);
  $6 = Math_fround($6 - $16);
  $24 = Math_fround($6 * Math_fround(-.5));
  $25 = $17 < $24;
  $16 = Math_fround($6 * Math_fround(.5));
  $26 = $20 << 3 | $21 | $22 << 1 | $23 << 4 | $25 << 2 | ($17 > $16) << 5;
  $6 = Math_fround(HEAPF32[$0 >> 2] - $13);
  $1 = $6 > $19;
  $3 = $6 < $9;
  $9 = Math_fround(HEAPF32[$0 + 4 >> 2] - $11);
  $2 = $9 < $18;
  $27 = $9 > $15;
  $13 = Math_fround(HEAPF32[$0 + 8 >> 2] - $14);
  $0 = $13 < $24;
  $28 = $1 << 3 | $3 | $2 << 1 | $27 << 4 | $0 << 2 | ($13 > $16) << 5;
  $8 = 0;
  label$1 : {
   if ($26 & $28) {
    break label$1
   }
   $11 = HEAPF32[$4 >> 2];
   $8 = $7 + 8 | 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 0;
   HEAP32[$7 >> 2] = 0;
   HEAP32[$7 + 4 >> 2] = 0;
   $18 = Math_fround($10 - $6);
   label$2 : {
    if (!!$3) {
     $10 = Math_fround(Math_fround(Math_fround(-$6) - $19) / $18);
     if (!($10 >= Math_fround(0.0))) {
      $10 = Math_fround(0.0);
      break label$2;
     }
     HEAP32[$7 + 12 >> 2] = 0;
     HEAP32[$7 + 4 >> 2] = 0;
     HEAP32[$7 + 8 >> 2] = 0;
     HEAP32[$7 >> 2] = 1065353216;
     break label$2;
    }
    $10 = Math_fround(0.0);
    if (!$21) {
     break label$2
    }
    $14 = Math_fround(Math_fround(Math_fround(-$6) - $19) / $18);
    if (!($14 < $11)) {
     break label$2
    }
    $11 = $14;
   }
   $14 = Math_fround($12 - $9);
   label$5 : {
    label$6 : {
     if ($2) {
      $12 = Math_fround(Math_fround(Math_fround(-$9) - $15) / $14);
      if (!($10 <= $12)) {
       break label$6
      }
      $8 = $7 + 8 | 0;
      HEAP32[$8 >> 2] = 0;
      HEAP32[$8 + 4 >> 2] = 0;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 1065353216;
      break label$5;
     }
     if (!$22) {
      break label$6
     }
     $12 = Math_fround(Math_fround(Math_fround(-$9) - $15) / $14);
     if (!($12 < $11)) {
      break label$6
     }
     $11 = $12;
    }
    $12 = $10;
   }
   $17 = Math_fround($17 - $13);
   label$8 : {
    label$9 : {
     if (!!$0) {
      $10 = Math_fround(Math_fround(Math_fround(-$13) - $16) / $17);
      if (!($12 <= $10)) {
       break label$9
      }
      $8 = $7 + 8 | 0;
      HEAP32[$8 >> 2] = 1065353216;
      HEAP32[$8 + 4 >> 2] = 0;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      break label$8;
     }
     if (!$25) {
      break label$9
     }
     $10 = Math_fround(Math_fround(Math_fround(-$13) - $16) / $17);
     if (!($10 < $11)) {
      break label$9
     }
     $11 = $10;
    }
    $10 = $12;
   }
   label$11 : {
    label$12 : {
     if (!!$1) {
      $6 = Math_fround(Math_fround($19 - $6) / $18);
      if (!($10 <= $6)) {
       break label$12
      }
      HEAP32[$7 + 12 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      HEAP32[$7 + 8 >> 2] = 0;
      HEAP32[$7 >> 2] = -1082130432;
      break label$11;
     }
     if (!$20) {
      break label$12
     }
     $6 = Math_fround(Math_fround($19 - $6) / $18);
     if (!($6 < $11)) {
      break label$12
     }
     $11 = $6;
    }
    $6 = $10;
   }
   label$14 : {
    label$15 : {
     if (!!$27) {
      $9 = Math_fround(Math_fround($15 - $9) / $14);
      if (!($6 <= $9)) {
       break label$15
      }
      $8 = $7 + 8 | 0;
      HEAP32[$8 >> 2] = 0;
      HEAP32[$8 + 4 >> 2] = 0;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = -1082130432;
      break label$14;
     }
     if (!$23) {
      break label$15
     }
     $9 = Math_fround(Math_fround($15 - $9) / $14);
     if (!($9 < $11)) {
      break label$15
     }
     $11 = $9;
    }
    $9 = $6;
   }
   label$17 : {
    label$18 : {
     if ($28 & 32) {
      $6 = Math_fround(Math_fround($16 - $13) / $17);
      if (!($9 <= $6)) {
       break label$18
      }
      $8 = $7 + 8 | 0;
      HEAP32[$8 >> 2] = -1082130432;
      HEAP32[$8 + 4 >> 2] = 0;
      HEAP32[$7 >> 2] = 0;
      HEAP32[$7 + 4 >> 2] = 0;
      break label$17;
     }
     if (!($26 & 32)) {
      break label$18
     }
     $6 = Math_fround(Math_fround($16 - $13) / $17);
     if (!($6 < $11)) {
      break label$18
     }
     $11 = $6;
    }
    $6 = $9;
   }
   $8 = 0;
   if (!($6 <= $11)) {
    break label$1
   }
   HEAPF32[$4 >> 2] = $6;
   $8 = HEAP32[$7 + 4 >> 2];
   HEAP32[$5 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$5 + 4 >> 2] = $8;
   $7 = $7 + 8 | 0;
   $0 = HEAP32[$7 >> 2];
   $8 = $5 + 8 | 0;
   $5 = HEAP32[$7 + 4 >> 2];
   HEAP32[$8 >> 2] = $0;
   HEAP32[$8 + 4 >> 2] = $5;
   $8 = 1;
  }
  return $8;
 }
 
 function btKinematicCharacterController__btKinematicCharacterController_28btPairCachingGhostObject__2c_20btConvexShape__2c_20float_2c_20btVector3_20const__29($0, $1, $2, $3, $4) {
  var $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
  $6 = global$0 - 16 | 0;
  global$0 = $6;
  HEAP32[$0 >> 2] = 23968;
  HEAP32[$0 + 272 >> 2] = 0;
  HEAP32[$0 + 276 >> 2] = 0;
  HEAP32[$0 + 256 >> 2] = 0;
  HEAP32[$0 + 260 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = $1;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 64 >> 2] = 1017370378;
  HEAP32[$0 + 100 >> 2] = 0;
  HEAP32[$0 + 104 >> 2] = 0;
  HEAP16[$0 + 250 >> 1] = 257;
  HEAP32[$0 + 56 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = $2;
  HEAP32[$0 + 252 >> 2] = 0;
  HEAP8[$0 + 216 | 0] = 1;
  HEAP32[$0 + 212 >> 2] = 0;
  $1 = $0 + 204 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 280 | 0;
  HEAP32[$1 >> 2] = 1065353216;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 264 | 0;
  HEAP32[$1 >> 2] = 1065353216;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 76 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 108 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$0 + 52 >> 2] = 1105933107;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP16[$0 + 248 >> 1] = 0;
  HEAP32[$0 + 28 >> 2] = 1113325568;
  HEAP32[$0 + 32 >> 2] = 1092616192;
  HEAP32[$0 + 36 >> 2] = 1092616192;
  HEAP32[$0 + 148 >> 2] = 0;
  HEAP8[$0 + 289 | 0] = 0;
  HEAP8[$0 + 290 | 0] = 0;
  HEAP32[$0 + 16 >> 2] = 1045220557;
  HEAP32[$0 + 240 >> 2] = 0;
  HEAP32[$0 + 244 >> 2] = 0;
  HEAP8[$0 + 288 | 0] = 1;
  $7 = HEAPF32[$4 >> 2];
  $8 = HEAPF32[$4 + 4 >> 2];
  $9 = HEAPF32[$4 + 8 >> 2];
  $5 = Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8)) + Math_fround($9 * $9));
  label$1 : {
   if (!!($5 > Math_fround(0.0))) {
    $5 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($5)));
    $9 = Math_fround(Math_fround($9 * $5) * Math_fround(-29.399999618530273));
    $7 = Math_fround(Math_fround($7 * $5) * Math_fround(-29.399999618530273));
    $8 = Math_fround(Math_fround($8 * $5) * Math_fround(-29.399999618530273));
    $5 = Math_fround(Math_fround($9 * $9) + Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8)));
    if (!!($5 > Math_fround(0.0))) {
     HEAP32[$6 + 12 >> 2] = 0;
     HEAPF32[$6 + 8 >> 2] = -$9;
     HEAPF32[$6 + 4 >> 2] = -$8;
     HEAPF32[$6 >> 2] = -$7;
     btKinematicCharacterController__setUpVector_28btVector3_20const__29($0, $6);
    }
    HEAPF32[$0 + 52 >> 2] = Math_sqrt($5);
    break label$1;
   }
   btKinematicCharacterController__setUpVector_28btVector3_20const__29($0, $4);
  }
  HEAP32[$0 + 44 >> 2] = 1061752795;
  HEAP32[$0 + 48 >> 2] = 1060439283;
  HEAPF32[$0 + 60 >> 2] = $3;
  global$0 = $6 + 16 | 0;
 }
 
 function btKinematicCharacterController__setUpVector_28btVector3_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
  $3 = global$0 - 80 | 0;
  global$0 = $3;
  $16 = $0 + 256 | 0;
  $11 = HEAPF32[$0 + 264 >> 2];
  $6 = HEAPF32[$1 + 8 >> 2];
  $4 = HEAPF32[$1 + 12 >> 2];
  label$1 : {
   label$2 : {
    if (HEAPF32[$0 + 268 >> 2] != $4) {
     break label$2
    }
    if ($11 != $6) {
     break label$2
    }
    if (HEAPF32[$0 + 260 >> 2] != HEAPF32[$1 + 4 >> 2]) {
     break label$2
    }
    if (HEAPF32[$16 >> 2] == HEAPF32[$1 >> 2]) {
     break label$1
    }
   }
   $9 = HEAPF32[$0 + 260 >> 2];
   $14 = HEAPF32[$0 + 256 >> 2];
   $7 = HEAPF32[$1 >> 2];
   $5 = HEAPF32[$1 + 4 >> 2];
   $10 = Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($5 * $5)) + Math_fround($6 * $6));
   label$3 : {
    if (!!($10 > Math_fround(0.0))) {
     HEAPF32[$0 + 268 >> 2] = $4;
     $4 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($10)));
     $13 = Math_fround($6 * $4);
     HEAPF32[$0 + 264 >> 2] = $13;
     $6 = Math_fround($5 * $4);
     HEAPF32[$0 + 260 >> 2] = $6;
     $12 = Math_fround($7 * $4);
     HEAPF32[$0 + 256 >> 2] = $12;
     break label$3;
    }
    $8 = $16;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    $8 = $8 + 8 | 0;
    HEAP32[$8 >> 2] = 0;
    HEAP32[$8 + 4 >> 2] = 0;
    $6 = Math_fround(0.0);
   }
   $1 = HEAP32[$0 + 8 >> 2];
   if (!$1) {
    break label$1
   }
   $15 = Math_fround(Math_fround(Math_fround($12 * $12) + Math_fround($6 * $6)) + Math_fround($13 * $13));
   label$5 : {
    if ($15 == Math_fround(0.0)) {
     break label$5
    }
    $20 = Math_fround(Math_fround(Math_fround($14 * $14) + Math_fround($9 * $9)) + Math_fround($11 * $11));
    if ($20 == Math_fround(0.0)) {
     break label$5
    }
    $5 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($15)));
    $7 = Math_fround($13 * $5);
    HEAPF32[$0 + 264 >> 2] = $7;
    $6 = Math_fround($6 * $5);
    HEAPF32[$0 + 260 >> 2] = $6;
    $5 = Math_fround($12 * $5);
    HEAPF32[$0 + 256 >> 2] = $5;
    $4 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($20)));
    $10 = Math_fround($11 * $4);
    $13 = Math_fround($9 * $4);
    $11 = Math_fround($14 * $4);
    $4 = Math_fround(Math_fround($10 * $7) + Math_fround(Math_fround($13 * $6) + Math_fround($11 * $5)));
    if (!!($4 < Math_fround(-.9999998807907104))) {
     if (!!(Math_fround(Math_abs($7)) > Math_fround(.7071067690849304))) {
      $5 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($6 * $6) + Math_fround($7 * $7)))));
      $4 = Math_fround($6 * $5);
      $5 = Math_fround(-Math_fround($7 * $5));
      $7 = Math_fround(0.0);
      $10 = Math_fround(0.0);
      break label$5;
     }
     $7 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($6 * $6) + Math_fround($5 * $5)))));
     $5 = Math_fround($5 * $7);
     $7 = Math_fround(-Math_fround($6 * $7));
     $4 = Math_fround(0.0);
     $10 = Math_fround(0.0);
     break label$5;
    }
    $4 = Math_fround($4 + Math_fround(1.0));
    $9 = Math_fround(Math_sqrt(Math_fround($4 + $4)));
    $12 = Math_fround(Math_fround(1.0) / $9);
    $4 = Math_fround(Math_fround(Math_fround($13 * $5) - Math_fround($11 * $6)) * $12);
    $5 = Math_fround(Math_fround(Math_fround($11 * $7) - Math_fround($10 * $5)) * $12);
    $7 = Math_fround(Math_fround(Math_fround($10 * $6) - Math_fround($13 * $7)) * $12);
    $10 = Math_fround($9 * Math_fround(.5));
   }
   $2 = $1 + 12 | 0;
   $19 = HEAP32[$2 >> 2];
   $8 = HEAP32[$2 + 4 >> 2];
   $16 = $3 + 24 | 0;
   $2 = $16;
   HEAP32[$2 >> 2] = $19;
   HEAP32[$2 + 4 >> 2] = $8;
   $2 = $1 + 20 | 0;
   $21 = HEAP32[$2 >> 2];
   $22 = HEAP32[$2 + 4 >> 2];
   $2 = $1 + 36 | 0;
   $23 = HEAP32[$2 >> 2];
   $24 = HEAP32[$2 + 4 >> 2];
   $2 = $1 + 28 | 0;
   $25 = HEAP32[$2 >> 2];
   $26 = HEAP32[$2 + 4 >> 2];
   $2 = $1 + 44 | 0;
   $27 = HEAP32[$2 >> 2];
   $17 = HEAP32[$2 + 4 >> 2];
   $28 = HEAP32[$1 + 4 >> 2];
   $29 = HEAP32[$1 + 8 >> 2];
   $2 = $1 + 60 | 0;
   $18 = HEAP32[$2 >> 2];
   $8 = HEAP32[$2 + 4 >> 2];
   $19 = $3 + 72 | 0;
   $2 = $19;
   HEAP32[$2 >> 2] = $18;
   HEAP32[$2 + 4 >> 2] = $8;
   $18 = $3 + 56 | 0;
   $2 = $18;
   HEAP32[$2 >> 2] = $27;
   HEAP32[$2 + 4 >> 2] = $17;
   $17 = $3 + 40 | 0;
   $2 = $17;
   HEAP32[$2 >> 2] = $25;
   HEAP32[$2 + 4 >> 2] = $26;
   HEAP32[$3 + 16 >> 2] = $28;
   HEAP32[$3 + 20 >> 2] = $29;
   $2 = $1 + 52 | 0;
   $1 = HEAP32[$2 >> 2];
   $2 = HEAP32[$2 + 4 >> 2];
   HEAP32[$3 + 64 >> 2] = $1;
   HEAP32[$3 + 68 >> 2] = $2;
   HEAP32[$3 + 48 >> 2] = $23;
   HEAP32[$3 + 52 >> 2] = $24;
   HEAP32[$3 + 32 >> 2] = $21;
   HEAP32[$3 + 36 >> 2] = $22;
   btMatrix3x3__getRotation_28btQuaternion__29_20const($3 + 16 | 0, $3);
   $11 = HEAPF32[$3 >> 2];
   $12 = HEAPF32[$3 + 12 >> 2];
   $9 = HEAPF32[$3 + 8 >> 2];
   $14 = HEAPF32[$3 + 4 >> 2];
   $6 = Math_fround(Math_fround(Math_fround(Math_fround($10 * $11) - Math_fround($12 * $7)) - Math_fround($9 * $5)) + Math_fround($14 * $4));
   $15 = Math_fround(Math_fround(Math_fround(Math_fround($10 * $9) - Math_fround($12 * $4)) - Math_fround($14 * $7)) + Math_fround($11 * $5));
   $13 = Math_fround(Math_fround(Math_fround(Math_fround($10 * $12) + Math_fround($11 * $7)) + Math_fround($14 * $5)) + Math_fround($9 * $4));
   $7 = Math_fround(Math_fround(Math_fround(Math_fround($10 * $14) - Math_fround($12 * $5)) - Math_fround($11 * $4)) + Math_fround($9 * $7));
   $4 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround($13 * $13) + Math_fround(Math_fround($15 * $15) + Math_fround(Math_fround($6 * $6) + Math_fround($7 * $7)))));
   $5 = Math_fround($15 * $4);
   $11 = Math_fround($6 * $5);
   $10 = Math_fround($7 * $4);
   $12 = Math_fround($13 * $10);
   HEAPF32[$16 >> 2] = $11 + $12;
   HEAP32[$3 + 60 >> 2] = 0;
   HEAP32[$3 + 44 >> 2] = 0;
   $9 = Math_fround($7 * $5);
   $4 = Math_fround($6 * $4);
   $14 = Math_fround($13 * $4);
   HEAPF32[$3 + 52 >> 2] = $9 + $14;
   HEAPF32[$17 >> 2] = $9 - $14;
   $4 = Math_fround($6 * $4);
   $7 = Math_fround($7 * $10);
   HEAPF32[$18 >> 2] = Math_fround(1.0) - Math_fround($4 + $7);
   $9 = Math_fround($15 * $5);
   HEAPF32[$3 + 36 >> 2] = Math_fround(1.0) - Math_fround($4 + $9);
   HEAP32[$3 + 28 >> 2] = 0;
   HEAPF32[$3 + 48 >> 2] = $11 - $12;
   $6 = Math_fround($6 * $10);
   $5 = Math_fround($13 * $5);
   HEAPF32[$3 + 32 >> 2] = $6 + $5;
   HEAPF32[$3 + 20 >> 2] = $6 - $5;
   $2 = $16;
   $1 = HEAP32[$2 >> 2];
   $8 = HEAP32[$2 + 4 >> 2];
   $0 = HEAP32[$0 + 8 >> 2];
   $2 = $0 + 12 | 0;
   HEAP32[$2 >> 2] = $1;
   HEAP32[$2 + 4 >> 2] = $8;
   HEAPF32[$3 + 16 >> 2] = Math_fround(1.0) - Math_fround($7 + $9);
   $2 = HEAP32[$3 + 20 >> 2];
   HEAP32[$0 + 4 >> 2] = HEAP32[$3 + 16 >> 2];
   HEAP32[$0 + 8 >> 2] = $2;
   $8 = HEAP32[$3 + 36 >> 2];
   $2 = $0 + 20 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 + 32 >> 2];
   HEAP32[$2 + 4 >> 2] = $8;
   $2 = $17;
   $1 = HEAP32[$2 >> 2];
   $2 = HEAP32[$2 + 4 >> 2];
   $8 = $0 + 28 | 0;
   HEAP32[$8 >> 2] = $1;
   HEAP32[$8 + 4 >> 2] = $2;
   HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
   $8 = HEAP32[$3 + 52 >> 2];
   $2 = $0 + 36 | 0;
   HEAP32[$2 >> 2] = HEAP32[$3 + 48 >> 2];
   HEAP32[$2 + 4 >> 2] = $8;
   $2 = $18;
   $1 = HEAP32[$2 >> 2];
   $2 = HEAP32[$2 + 4 >> 2];
   $8 = $0 + 44 | 0;
   HEAP32[$8 >> 2] = $1;
   HEAP32[$8 + 4 >> 2] = $2;
   $2 = $19;
   $1 = HEAP32[$2 >> 2];
   $8 = HEAP32[$2 + 4 >> 2];
   $2 = $0 + 60 | 0;
   HEAP32[$2 >> 2] = $1;
   HEAP32[$2 + 4 >> 2] = $8;
   $2 = HEAP32[$3 + 68 >> 2];
   $8 = $0 + 52 | 0;
   HEAP32[$8 >> 2] = HEAP32[$3 + 64 >> 2];
   HEAP32[$8 + 4 >> 2] = $2;
  }
  global$0 = $3 + 80 | 0;
 }
 
 function btKinematicCharacterController___btKinematicCharacterController_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 23968;
  $1 = HEAP32[$0 + 212 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 216 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 212 >> 2] = 0;
  }
  HEAP32[$0 + 212 >> 2] = 0;
  HEAP32[$0 + 204 >> 2] = 0;
  HEAP32[$0 + 208 >> 2] = 0;
  HEAP8[$0 + 216 | 0] = 1;
  return $0 | 0;
 }
 
 function btKinematicCharacterController___btKinematicCharacterController_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 23968;
  $1 = HEAP32[$0 + 212 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 216 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 212 >> 2] = 0;
  }
  HEAP32[$0 + 212 >> 2] = 0;
  HEAP32[$0 + 204 >> 2] = 0;
  HEAP32[$0 + 208 >> 2] = 0;
  HEAP8[$0 + 216 | 0] = 1;
  btAlignedFreeInternal_28void__29($0);
 }
 
 function btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0;
  $6 = global$0 - 96 | 0;
  global$0 = $6;
  $5 = HEAP32[$0 + 12 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 8 >> 2]]($5, HEAP32[$0 + 8 >> 2] + 4 | 0, $6 + 80 | 0, $6 - -64 | 0);
  $5 = HEAP32[$1 + 68 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 16 >> 2]]($5, HEAP32[HEAP32[$0 + 8 >> 2] + 188 >> 2], $6 + 80 | 0, $6 - -64 | 0, HEAP32[$1 + 24 >> 2]);
  $5 = HEAP32[$1 + 24 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$5 >> 2] + 32 >> 2]]($5, HEAP32[HEAP32[$0 + 8 >> 2] + 344 >> 2], $1 + 28 | 0, $5);
  $1 = HEAP32[$0 + 8 >> 2];
  $4 = $1 + 52 | 0;
  $3 = HEAP32[$4 >> 2];
  $2 = HEAP32[$4 + 4 >> 2];
  HEAP32[$0 + 132 >> 2] = $3;
  HEAP32[$0 + 136 >> 2] = $2;
  $4 = $1 + 60 | 0;
  $7 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $2 = $0 + 140 | 0;
  HEAP32[$2 >> 2] = $7;
  HEAP32[$2 + 4 >> 2] = $3;
  $16 = $0 + 132 | 0;
  $1 = HEAP32[$1 + 344 >> 2];
  label$1 : {
   if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0) < 1) {
    break label$1
   }
   $11 = $0 + 200 | 0;
   while (1) {
    $1 = HEAP32[$0 + 204 >> 2];
    if (($1 | 0) <= -1) {
     if (HEAP32[$0 + 208 >> 2] <= -1) {
      $5 = HEAP32[$0 + 212 >> 2];
      if ($5) {
       if (HEAPU8[$0 + 216 | 0]) {
        btAlignedFreeInternal_28void__29($5)
       }
       HEAP32[$0 + 212 >> 2] = 0;
      }
      HEAP8[$0 + 216 | 0] = 1;
      HEAP32[$0 + 208 >> 2] = 0;
      HEAP32[$0 + 212 >> 2] = 0;
     }
     $5 = $1 << 2;
     while (1) {
      HEAP32[$5 + HEAP32[$0 + 212 >> 2] >> 2] = 0;
      $5 = $5 + 4 | 0;
      $7 = $1 + 1 | 0;
      $8 = $7 >>> 0 >= $1 >>> 0;
      $1 = $7;
      if ($8) {
       continue
      }
      break;
     };
    }
    HEAP32[$0 + 204 >> 2] = 0;
    $1 = HEAP32[HEAP32[$0 + 8 >> 2] + 344 >> 2];
    $5 = HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1) | 0) + 12 >> 2] + ($9 << 4) | 0;
    $1 = HEAP32[HEAP32[$5 + 4 >> 2] >> 2];
    $7 = HEAP32[HEAP32[$5 >> 2] >> 2];
    label$9 : {
     if (HEAPU8[$7 + 204 | 0] & 4 ? $7 : 0) {
      break label$9
     }
     if (HEAPU8[$1 + 204 | 0] & 4 ? $1 : 0) {
      break label$9
     }
     if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $7, $1)) {
      break label$9
     }
     $1 = HEAP32[$5 + 8 >> 2];
     if ($1) {
      FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 16 >> 2]]($1, $11)
     }
     $10 = HEAP32[$0 + 204 >> 2];
     if (($10 | 0) < 1) {
      break label$9
     }
     $12 = HEAP32[$0 + 8 >> 2];
     $13 = HEAP32[$0 + 212 >> 2];
     $8 = 0;
     while (1) {
      $1 = HEAP32[($8 << 2) + $13 >> 2];
      $7 = HEAP32[$1 + 780 >> 2];
      if (($7 | 0) >= 1) {
       $15 = ($12 | 0) == HEAP32[$1 + 772 >> 2] ? Math_fround(-1.0) : Math_fround(1.0);
       $1 = $1 + 84 | 0;
       $17 = Math_fround(-HEAPF32[$0 + 16 >> 2]);
       $5 = 0;
       while (1) {
        $14 = HEAPF32[$1 >> 2];
        if (!!($14 < $17)) {
         $18 = HEAPF32[$1 + -8 >> 2];
         $19 = HEAPF32[$1 + -12 >> 2];
         HEAPF32[$0 + 132 >> 2] = Math_fround(Math_fround($14 * Math_fround($15 * HEAPF32[$1 + -16 >> 2])) * Math_fround(.20000000298023224)) + HEAPF32[$0 + 132 >> 2];
         HEAPF32[$0 + 136 >> 2] = Math_fround(Math_fround($14 * Math_fround($15 * $19)) * Math_fround(.20000000298023224)) + HEAPF32[$0 + 136 >> 2];
         HEAPF32[$0 + 140 >> 2] = Math_fround(Math_fround($14 * Math_fround($15 * $18)) * Math_fround(.20000000298023224)) + HEAPF32[$0 + 140 >> 2];
         $20 = 1;
        }
        $1 = $1 + 192 | 0;
        $5 = $5 + 1 | 0;
        if (($5 | 0) < ($7 | 0)) {
         continue
        }
        break;
       };
      }
      $8 = $8 + 1 | 0;
      if (($8 | 0) < ($10 | 0)) {
       continue
      }
      break;
     };
    }
    $9 = $9 + 1 | 0;
    $1 = HEAP32[HEAP32[$0 + 8 >> 2] + 344 >> 2];
    if (($9 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 36 >> 2]]($1) | 0)) {
     continue
    }
    break;
   };
  }
  $4 = $16 + 8 | 0;
  $1 = HEAP32[$4 >> 2];
  $2 = HEAP32[$4 + 4 >> 2];
  $5 = $6 + 56 | 0;
  $3 = $5;
  HEAP32[$3 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = HEAP32[$0 + 8 >> 2];
  $0 = $1 + 12 | 0;
  $8 = HEAP32[$0 >> 2];
  $3 = HEAP32[$0 + 4 >> 2];
  $7 = $6 + 8 | 0;
  $2 = $7;
  HEAP32[$2 >> 2] = $8;
  HEAP32[$2 + 4 >> 2] = $3;
  $10 = $1 + 28 | 0;
  $4 = $10;
  $9 = HEAP32[$4 >> 2];
  $2 = HEAP32[$4 + 4 >> 2];
  $8 = $6 + 24 | 0;
  $3 = $8;
  HEAP32[$3 >> 2] = $9;
  HEAP32[$3 + 4 >> 2] = $2;
  $12 = $1 + 44 | 0;
  $4 = $12;
  $9 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  $13 = $6 + 40 | 0;
  $2 = $13;
  HEAP32[$2 >> 2] = $9;
  HEAP32[$2 + 4 >> 2] = $3;
  $4 = $16;
  $3 = HEAP32[$4 >> 2];
  $2 = HEAP32[$4 + 4 >> 2];
  $4 = $3;
  HEAP32[$1 + 304 >> 2] = HEAP32[$1 + 304 >> 2] + 1;
  HEAP32[$6 + 48 >> 2] = $4;
  HEAP32[$6 + 52 >> 2] = $2;
  $3 = HEAP32[$1 + 8 >> 2];
  HEAP32[$6 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$6 + 4 >> 2] = $3;
  $9 = $1 + 20 | 0;
  $4 = $9;
  $3 = HEAP32[$4 >> 2];
  $2 = HEAP32[$4 + 4 >> 2];
  HEAP32[$6 + 16 >> 2] = $3;
  HEAP32[$6 + 20 >> 2] = $2;
  $11 = $1 + 36 | 0;
  $4 = $11;
  $2 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$6 + 32 >> 2] = $2;
  HEAP32[$6 + 36 >> 2] = $3;
  $2 = HEAP32[$6 + 4 >> 2];
  HEAP32[$1 + 4 >> 2] = HEAP32[$6 >> 2];
  HEAP32[$1 + 8 >> 2] = $2;
  $4 = $7;
  $2 = HEAP32[$4 >> 2];
  $3 = HEAP32[$4 + 4 >> 2];
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $3;
  $4 = $8;
  $0 = HEAP32[$4 >> 2];
  $2 = HEAP32[$4 + 4 >> 2];
  $3 = $10;
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $2;
  $3 = HEAP32[$6 + 20 >> 2];
  $2 = $9;
  HEAP32[$2 >> 2] = HEAP32[$6 + 16 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $4 = $13;
  $0 = HEAP32[$4 >> 2];
  $2 = HEAP32[$4 + 4 >> 2];
  $3 = $12;
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $2;
  $3 = HEAP32[$6 + 36 >> 2];
  $2 = $11;
  HEAP32[$2 >> 2] = HEAP32[$6 + 32 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  $4 = $5;
  $0 = HEAP32[$4 >> 2];
  $2 = HEAP32[$4 + 4 >> 2];
  $3 = $1 + 60 | 0;
  HEAP32[$3 >> 2] = $0;
  HEAP32[$3 + 4 >> 2] = $2;
  $3 = HEAP32[$6 + 52 >> 2];
  $2 = $1 + 52 | 0;
  HEAP32[$2 >> 2] = HEAP32[$6 + 48 >> 2];
  HEAP32[$2 + 4 >> 2] = $3;
  global$0 = $6 + 96 | 0;
  return $20;
 }
 
 function btKinematicCharacterController__stepUp_28btCollisionWorld__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = 0, $25 = 0, $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = 0;
  $3 = global$0 - 240 | 0;
  global$0 = $3;
  if (!!(HEAPF32[$0 + 20 >> 2] < Math_fround(0.0))) {
   $23 = HEAPF32[$0 + 60 >> 2]
  }
  $16 = $3 + 200 | 0;
  $2 = $16;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $14 = $3 + 196 | 0;
  HEAP32[$14 >> 2] = 1065353216;
  $19 = $3 + 216 | 0;
  $2 = $19;
  HEAP32[$2 >> 2] = 1065353216;
  HEAP32[$2 + 4 >> 2] = 0;
  $20 = $3 + 136 | 0;
  $2 = $20;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $21 = $3 + 132 | 0;
  HEAP32[$21 >> 2] = 1065353216;
  $25 = $3 + 152 | 0;
  $2 = $25;
  HEAP32[$2 >> 2] = 1065353216;
  HEAP32[$2 + 4 >> 2] = 0;
  $15 = $0 + 140 | 0;
  $4 = $15;
  $7 = HEAP32[$4 >> 2];
  $2 = HEAP32[$4 + 4 >> 2];
  $5 = $3 + 232 | 0;
  HEAP32[$5 >> 2] = $7;
  HEAP32[$5 + 4 >> 2] = $2;
  HEAP32[$3 + 180 >> 2] = 0;
  HEAP32[$3 + 184 >> 2] = 0;
  HEAP32[$3 + 176 >> 2] = 1065353216;
  HEAP32[$3 + 188 >> 2] = 0;
  HEAP32[$3 + 192 >> 2] = 0;
  HEAP32[$3 + 208 >> 2] = 0;
  HEAP32[$3 + 212 >> 2] = 0;
  HEAP32[$3 + 116 >> 2] = 0;
  HEAP32[$3 + 120 >> 2] = 0;
  HEAP32[$3 + 112 >> 2] = 1065353216;
  HEAP32[$3 + 124 >> 2] = 0;
  HEAP32[$3 + 128 >> 2] = 0;
  HEAP32[$3 + 144 >> 2] = 0;
  HEAP32[$3 + 148 >> 2] = 0;
  $5 = HEAP32[$0 + 136 >> 2];
  HEAP32[$3 + 224 >> 2] = HEAP32[$0 + 132 >> 2];
  HEAP32[$3 + 228 >> 2] = $5;
  $26 = HEAPF32[$0 + 256 >> 2];
  $6 = HEAPF32[$0 + 24 >> 2];
  $6 = $6 > Math_fround(0.0) ? $6 : Math_fround(0.0);
  HEAPF32[$0 + 152 >> 2] = Math_fround(Math_fround($23 * $26) + HEAPF32[$0 + 132 >> 2]) + Math_fround(HEAPF32[$0 + 272 >> 2] * $6);
  $27 = HEAPF32[$0 + 260 >> 2];
  HEAPF32[$0 + 156 >> 2] = Math_fround(Math_fround($23 * $27) + HEAPF32[$0 + 136 >> 2]) + Math_fround($6 * HEAPF32[$0 + 276 >> 2]);
  HEAP32[$0 + 164 >> 2] = 0;
  $4 = $0 + 160 | 0;
  $28 = HEAPF32[$0 + 264 >> 2];
  HEAPF32[$4 >> 2] = Math_fround(Math_fround($23 * $28) + HEAPF32[$15 >> 2]) + Math_fround($6 * HEAPF32[$0 + 280 >> 2]);
  $2 = HEAP32[$0 + 156 >> 2];
  $7 = $2;
  $24 = HEAP32[$0 + 152 >> 2];
  HEAP32[$0 + 132 >> 2] = $24;
  HEAP32[$0 + 136 >> 2] = $2;
  $29 = HEAP32[$4 >> 2];
  $5 = HEAP32[$4 + 4 >> 2];
  $4 = $5;
  $2 = $15;
  HEAP32[$2 >> 2] = $29;
  HEAP32[$2 + 4 >> 2] = $4;
  $2 = $3 + 168 | 0;
  HEAP32[$2 >> 2] = $29;
  HEAP32[$2 + 4 >> 2] = $4;
  HEAP32[$3 + 160 >> 2] = $24;
  HEAP32[$3 + 164 >> 2] = $7;
  $8 = HEAPF32[$0 + 180 >> 2];
  $12 = HEAPF32[$0 + 176 >> 2];
  $10 = HEAPF32[$0 + 172 >> 2];
  $6 = HEAPF32[$0 + 168 >> 2];
  HEAP32[$3 + 220 >> 2] = 0;
  HEAP32[$3 + 204 >> 2] = 0;
  $13 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($10 * $10)) + Math_fround($12 * $12)) + Math_fround($8 * $8)));
  $18 = Math_fround($12 * $13);
  $11 = Math_fround($10 * $18);
  $17 = Math_fround($6 * $13);
  $22 = Math_fround($8 * $17);
  HEAPF32[$3 + 212 >> 2] = $11 + $22;
  HEAPF32[$16 >> 2] = $11 - $22;
  $11 = Math_fround($6 * $17);
  $13 = Math_fround($10 * $13);
  $10 = Math_fround($10 * $13);
  HEAPF32[$19 >> 2] = Math_fround(1.0) - Math_fround($11 + $10);
  $12 = Math_fround($12 * $18);
  HEAPF32[$14 >> 2] = Math_fround(1.0) - Math_fround($11 + $12);
  HEAP32[$3 + 188 >> 2] = 0;
  $11 = Math_fround($6 * $18);
  $17 = Math_fround($8 * $13);
  HEAPF32[$3 + 208 >> 2] = $11 - $17;
  $6 = Math_fround($6 * $13);
  $8 = Math_fround($8 * $18);
  HEAPF32[$3 + 192 >> 2] = $6 + $8;
  HEAPF32[$3 + 184 >> 2] = $11 + $17;
  HEAPF32[$3 + 180 >> 2] = $6 - $8;
  HEAPF32[$3 + 176 >> 2] = Math_fround(1.0) - Math_fround($10 + $12);
  $8 = HEAPF32[$0 + 196 >> 2];
  $12 = HEAPF32[$0 + 192 >> 2];
  $10 = HEAPF32[$0 + 188 >> 2];
  $6 = HEAPF32[$0 + 184 >> 2];
  HEAP32[$3 + 156 >> 2] = 0;
  HEAP32[$3 + 140 >> 2] = 0;
  $13 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($10 * $10)) + Math_fround($12 * $12)) + Math_fround($8 * $8)));
  $18 = Math_fround($12 * $13);
  $11 = Math_fround($10 * $18);
  $17 = Math_fround($6 * $13);
  $22 = Math_fround($8 * $17);
  HEAPF32[$3 + 148 >> 2] = $11 + $22;
  HEAPF32[$20 >> 2] = $11 - $22;
  $11 = Math_fround($6 * $17);
  $13 = Math_fround($10 * $13);
  $10 = Math_fround($10 * $13);
  HEAPF32[$25 >> 2] = Math_fround(1.0) - Math_fround($11 + $10);
  $12 = Math_fround($12 * $18);
  HEAPF32[$21 >> 2] = Math_fround(1.0) - Math_fround($11 + $12);
  HEAP32[$3 + 124 >> 2] = 0;
  $11 = Math_fround($6 * $18);
  $17 = Math_fround($8 * $13);
  HEAPF32[$3 + 144 >> 2] = $11 - $17;
  $6 = Math_fround($6 * $13);
  $8 = Math_fround($8 * $18);
  HEAPF32[$3 + 128 >> 2] = $6 + $8;
  HEAPF32[$3 + 120 >> 2] = $11 + $17;
  HEAPF32[$3 + 116 >> 2] = $6 - $8;
  HEAPF32[$3 + 112 >> 2] = Math_fround(1.0) - Math_fround($10 + $12);
  $2 = $3 + 24 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $3 + 32 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  $2 = $3 + 40 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$3 + 100 >> 2] = 0;
  HEAPF32[$3 + 96 >> 2] = -$28;
  HEAPF32[$3 + 92 >> 2] = -$27;
  HEAP32[$3 + 16 >> 2] = 0;
  HEAP32[$3 + 20 >> 2] = 0;
  HEAPF32[$3 + 88 >> 2] = -$26;
  HEAP32[$3 + 80 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 1065353216;
  HEAP32[$3 >> 2] = 24172;
  $15 = HEAP32[$0 + 8 >> 2];
  HEAP32[$3 + 84 >> 2] = $15;
  HEAP32[$3 + 104 >> 2] = HEAP32[$0 + 48 >> 2];
  $16 = HEAP32[$15 + 188 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$16 + 4 >> 2];
  HEAP32[$3 + 12 >> 2] = HEAP32[$16 + 8 >> 2];
  label$2 : {
   if (HEAPU8[$0 + 250 | 0]) {
    btGhostObject__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const($15, HEAP32[$0 + 12 >> 2], $3 + 176 | 0, $3 + 112 | 0, $3, HEAPF32[$1 + 56 >> 2]);
    break label$2;
   }
   btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const($1, HEAP32[$0 + 12 >> 2], $3 + 176 | 0, $3 + 112 | 0, $3, HEAPF32[$1 + 56 >> 2]);
  }
  $16 = $0 + 152 | 0;
  $15 = $0 + 132 | 0;
  label$4 : {
   label$5 : {
    label$6 : {
     label$7 : {
      if (!(HEAPF32[$3 + 4 >> 2] < Math_fround(1.0))) {
       break label$7
      }
      $14 = HEAP32[$0 + 8 >> 2];
      if (HEAPU8[$14 + 204 | 0] & 4) {
       break label$7
      }
      if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $14, HEAP32[$3 + 80 >> 2])) {
       break label$7
      }
      label$8 : {
       if (!(Math_fround(Math_fround(Math_fround(HEAPF32[$3 + 48 >> 2] * HEAPF32[$0 + 256 >> 2]) + Math_fround(HEAPF32[$3 + 52 >> 2] * HEAPF32[$0 + 260 >> 2])) + Math_fround(HEAPF32[$3 + 56 >> 2] * HEAPF32[$0 + 264 >> 2])) > Math_fround(0.0))) {
        break label$8
       }
       $6 = HEAPF32[$3 + 4 >> 2];
       HEAPF32[$0 + 148 >> 2] = $23 * $6;
       if (HEAPU8[$0 + 288 | 0]) {
        $8 = Math_fround(Math_fround(1.0) - $6);
        HEAPF32[$0 + 132 >> 2] = Math_fround($8 * HEAPF32[$0 + 132 >> 2]) + Math_fround($6 * HEAPF32[$0 + 152 >> 2]);
        HEAPF32[$0 + 136 >> 2] = Math_fround($8 * HEAPF32[$0 + 136 >> 2]) + Math_fround($6 * HEAPF32[$0 + 156 >> 2]);
        HEAPF32[$0 + 140 >> 2] = Math_fround($8 * HEAPF32[$0 + 140 >> 2]) + Math_fround($6 * HEAPF32[$0 + 160 >> 2]);
        break label$8;
       }
       $4 = $16;
       $9 = HEAP32[$4 >> 2];
       $2 = HEAP32[$4 + 4 >> 2];
       $5 = $15;
       HEAP32[$5 >> 2] = $9;
       HEAP32[$5 + 4 >> 2] = $2;
       $4 = $4 + 8 | 0;
       $9 = HEAP32[$4 >> 2];
       $2 = $5 + 8 | 0;
       $5 = HEAP32[$4 + 4 >> 2];
       HEAP32[$2 >> 2] = $9;
       HEAP32[$2 + 4 >> 2] = $5;
      }
      $20 = $15 + 8 | 0;
      $4 = $20;
      $9 = HEAP32[$4 >> 2];
      $2 = HEAP32[$4 + 4 >> 2];
      $14 = HEAP32[$0 + 8 >> 2];
      $19 = $14 + 60 | 0;
      $5 = $19;
      HEAP32[$5 >> 2] = $9;
      HEAP32[$5 + 4 >> 2] = $2;
      $4 = $15;
      $9 = HEAP32[$4 >> 2];
      $5 = HEAP32[$4 + 4 >> 2];
      $21 = $14 + 52 | 0;
      $2 = $21;
      HEAP32[$2 >> 2] = $9;
      HEAP32[$2 + 4 >> 2] = $5;
      $9 = HEAP32[$0 + 8 >> 2];
      HEAP32[$9 + 304 >> 2] = HEAP32[$9 + 304 >> 2] + 1;
      $4 = $14 + 12 | 0;
      $7 = HEAP32[$4 >> 2];
      $2 = HEAP32[$4 + 4 >> 2];
      $5 = $9 + 12 | 0;
      HEAP32[$5 >> 2] = $7;
      HEAP32[$5 + 4 >> 2] = $2;
      $4 = $14;
      $7 = HEAP32[$4 + 4 >> 2];
      $5 = HEAP32[$4 + 8 >> 2];
      $2 = $9;
      HEAP32[$2 + 4 >> 2] = $7;
      HEAP32[$2 + 8 >> 2] = $5;
      $4 = $4 + 28 | 0;
      $7 = HEAP32[$4 >> 2];
      $5 = $2 + 28 | 0;
      $2 = HEAP32[$4 + 4 >> 2];
      HEAP32[$5 >> 2] = $7;
      HEAP32[$5 + 4 >> 2] = $2;
      $4 = $14 + 20 | 0;
      $7 = HEAP32[$4 >> 2];
      $5 = HEAP32[$4 + 4 >> 2];
      $2 = $9 + 20 | 0;
      HEAP32[$2 >> 2] = $7;
      HEAP32[$2 + 4 >> 2] = $5;
      $4 = $14 + 44 | 0;
      $7 = HEAP32[$4 >> 2];
      $2 = HEAP32[$4 + 4 >> 2];
      $5 = $9 + 44 | 0;
      HEAP32[$5 >> 2] = $7;
      HEAP32[$5 + 4 >> 2] = $2;
      $4 = $14 + 36 | 0;
      $7 = HEAP32[$4 >> 2];
      $5 = HEAP32[$4 + 4 >> 2];
      $2 = $9 + 36 | 0;
      HEAP32[$2 >> 2] = $7;
      HEAP32[$2 + 4 >> 2] = $5;
      $4 = $21;
      $7 = HEAP32[$4 >> 2];
      $2 = HEAP32[$4 + 4 >> 2];
      $5 = $9 + 52 | 0;
      HEAP32[$5 >> 2] = $7;
      HEAP32[$5 + 4 >> 2] = $2;
      $4 = $19;
      $7 = HEAP32[$4 >> 2];
      $5 = HEAP32[$4 + 4 >> 2];
      $2 = $9 + 60 | 0;
      HEAP32[$2 >> 2] = $7;
      HEAP32[$2 + 4 >> 2] = $5;
      HEAP8[$0 + 220 | 0] = 0;
      if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__29($0, $1)) {
       break label$5
      }
      HEAP8[$0 + 220 | 0] = 1;
      if (btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__29($0, $1)) {
       break label$6
      }
      break label$5;
     }
     HEAP32[$0 + 148 >> 2] = $9;
     $4 = $16;
     $0 = HEAP32[$4 >> 2];
     $2 = HEAP32[$4 + 4 >> 2];
     $5 = $15;
     HEAP32[$5 >> 2] = $0;
     HEAP32[$5 + 4 >> 2] = $2;
     $4 = $4 + 8 | 0;
     $0 = HEAP32[$4 >> 2];
     $2 = $5 + 8 | 0;
     $5 = HEAP32[$4 + 4 >> 2];
     HEAP32[$2 >> 2] = $0;
     HEAP32[$2 + 4 >> 2] = $5;
     break label$4;
    }
    HEAP8[$0 + 220 | 0] = 1;
    if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__29($0, $1)) {
     break label$5
    }
    HEAP8[$0 + 220 | 0] = 1;
    if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__29($0, $1)) {
     break label$5
    }
    HEAP8[$0 + 220 | 0] = 1;
    if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__29($0, $1)) {
     break label$5
    }
    HEAP8[$0 + 220 | 0] = 1;
   }
   $1 = HEAP32[$0 + 8 >> 2];
   $9 = $1 + 52 | 0;
   $4 = $9;
   $7 = HEAP32[$4 >> 2];
   $2 = HEAP32[$4 + 4 >> 2];
   $5 = $16;
   HEAP32[$5 >> 2] = $7;
   HEAP32[$5 + 4 >> 2] = $2;
   $16 = $1 + 60 | 0;
   $4 = $16;
   $1 = HEAP32[$4 >> 2];
   $2 = $5 + 8 | 0;
   $5 = HEAP32[$4 + 4 >> 2];
   HEAP32[$2 >> 2] = $1;
   HEAP32[$2 + 4 >> 2] = $5;
   $4 = $9;
   $24 = HEAP32[$4 >> 2];
   $7 = HEAP32[$4 + 4 >> 2];
   $4 = $16;
   $1 = HEAP32[$4 >> 2];
   $5 = HEAP32[$4 + 4 >> 2];
   $2 = $20;
   HEAP32[$2 >> 2] = $1;
   HEAP32[$2 + 4 >> 2] = $5;
   $2 = $15;
   HEAP32[$2 >> 2] = $24;
   HEAP32[$2 + 4 >> 2] = $7;
   if (!(HEAPF32[$0 + 24 >> 2] > Math_fround(0.0))) {
    break label$4
   }
   HEAP32[$0 + 20 >> 2] = 0;
   HEAP32[$0 + 24 >> 2] = 0;
   HEAP32[$0 + 148 >> 2] = HEAP32[$0 + 60 >> 2];
  }
  global$0 = $3 + 240 | 0;
 }
 
 function btKinematicCharacterController__needsCollision_28btCollisionObject_20const__2c_20btCollisionObject_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $2 = HEAP32[$2 + 188 >> 2];
  $1 = HEAP32[$1 + 188 >> 2];
  if (!(HEAP32[$2 + 8 >> 2] & HEAP32[$1 + 4 >> 2])) {
   return 0
  }
  return (HEAP32[$1 + 8 >> 2] & HEAP32[$2 + 4 >> 2]) != 0 | 0;
 }
 
 function btKinematicCharacterController__updateTargetPositionBasedOnCollision_28btVector3_20const__2c_20float_2c_20float_29($0, $1) {
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0);
  $2 = Math_fround(HEAPF32[$0 + 152 >> 2] - HEAPF32[$0 + 132 >> 2]);
  $3 = Math_fround(HEAPF32[$0 + 156 >> 2] - HEAPF32[$0 + 136 >> 2]);
  $4 = Math_fround(HEAPF32[$0 + 160 >> 2] - HEAPF32[$0 + 140 >> 2]);
  $5 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($2 * $2) + Math_fround($3 * $3)) + Math_fround($4 * $4))));
  if (!!($5 > Math_fround(1.1920928955078125e-07))) {
   $7 = HEAPF32[$1 + 8 >> 2];
   $8 = HEAPF32[$1 >> 2];
   $9 = HEAPF32[$1 + 4 >> 2];
   $10 = $0 + 132 | 0;
   $6 = $10;
   $11 = HEAP32[$6 >> 2];
   $6 = HEAP32[$6 + 4 >> 2];
   $1 = $0 + 152 | 0;
   HEAP32[$1 >> 2] = $11;
   HEAP32[$1 + 4 >> 2] = $6;
   $6 = $10 + 8 | 0;
   $10 = HEAP32[$6 >> 2];
   $11 = HEAP32[$6 + 4 >> 2];
   $6 = $1 + 8 | 0;
   HEAP32[$6 >> 2] = $10;
   HEAP32[$6 + 4 >> 2] = $11;
   $12 = $5;
   $5 = Math_fround(Math_fround(1.0) / $5);
   $2 = Math_fround($2 * $5);
   $14 = $2;
   $13 = Math_fround($3 * $5);
   $4 = Math_fround($4 * $5);
   $2 = Math_fround(Math_fround(Math_fround($2 * $8) + Math_fround($13 * $9)) + Math_fround($4 * $7));
   $2 = Math_fround($2 + $2);
   $3 = Math_fround($14 - Math_fround($8 * $2));
   $5 = $3;
   $4 = Math_fround($4 - Math_fround($7 * $2));
   $2 = Math_fround($13 - Math_fround($9 * $2));
   $3 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround($4 * $4) + Math_fround(Math_fround($3 * $3) + Math_fround($2 * $2))))));
   $5 = Math_fround($5 * $3);
   $4 = Math_fround($4 * $3);
   $3 = Math_fround($2 * $3);
   $2 = Math_fround(Math_fround($7 * $4) + Math_fround(Math_fround($8 * $5) + Math_fround($9 * $3)));
   HEAPF32[$0 + 152 >> 2] = Math_fround($12 * Math_fround($5 - Math_fround($8 * $2))) + HEAPF32[$0 + 152 >> 2];
   HEAPF32[$0 + 156 >> 2] = Math_fround($12 * Math_fround($3 - Math_fround($9 * $2))) + HEAPF32[$0 + 156 >> 2];
   HEAPF32[$0 + 160 >> 2] = Math_fround($12 * Math_fround($4 - Math_fround($7 * $2))) + HEAPF32[$0 + 160 >> 2];
  }
 }
 
 function btKinematicCharacterController__stepForwardAndStrafe_28btCollisionWorld__2c_20btVector3_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = Math_fround(0), $32 = Math_fround(0);
  $3 = global$0 - 240 | 0;
  global$0 = $3;
  $4 = $3 + 188 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 200 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$3 + 196 >> 2] = 1065353216;
  HEAP32[$3 + 216 >> 2] = 1065353216;
  $5 = HEAPF32[$2 >> 2];
  $6 = HEAPF32[$2 + 4 >> 2];
  $7 = HEAPF32[$2 + 8 >> 2];
  HEAP32[$0 + 164 >> 2] = 0;
  HEAPF32[$0 + 160 >> 2] = $7 + HEAPF32[$0 + 140 >> 2];
  HEAPF32[$0 + 156 >> 2] = $6 + HEAPF32[$0 + 136 >> 2];
  HEAPF32[$0 + 152 >> 2] = $5 + HEAPF32[$0 + 132 >> 2];
  HEAP32[$3 + 180 >> 2] = 0;
  HEAP32[$3 + 184 >> 2] = 0;
  HEAP32[$3 + 176 >> 2] = 1065353216;
  HEAP32[$3 + 208 >> 2] = 0;
  HEAP32[$3 + 212 >> 2] = 0;
  HEAP32[$3 + 236 >> 2] = 0;
  $4 = $3 + 228 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 220 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$3 + 112 >> 2] = 1065353216;
  $4 = $3 + 124 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$3 + 116 >> 2] = 0;
  HEAP32[$3 + 120 >> 2] = 0;
  HEAP32[$3 + 132 >> 2] = 1065353216;
  $4 = $3 + 136 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$3 + 144 >> 2] = 0;
  HEAP32[$3 + 148 >> 2] = 0;
  HEAP32[$3 + 152 >> 2] = 1065353216;
  HEAP32[$3 + 172 >> 2] = 0;
  $4 = $3 + 164 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $4 = $3 + 156 | 0;
  HEAP32[$4 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  $19 = $0 + 152 | 0;
  $20 = $0 + 132 | 0;
  $26 = $3 + 48 | 0;
  $2 = $3 + 16 | 0;
  $23 = $3 + 160 | 0;
  $24 = $3 + 224 | 0;
  $4 = -11;
  $21 = Math_fround(1.0);
  while (1) {
   $25 = $4 + 1 | 0;
   label$1 : {
    if ($25 >>> 0 < $4 >>> 0) {
     break label$1
    }
    $4 = $20;
    $14 = HEAP32[$4 >> 2];
    $4 = HEAP32[$4 + 4 >> 2];
    $8 = $24;
    HEAP32[$8 >> 2] = $14;
    HEAP32[$8 + 4 >> 2] = $4;
    $4 = $19;
    $14 = HEAP32[$4 >> 2];
    $8 = HEAP32[$4 + 4 >> 2];
    $4 = $23;
    HEAP32[$4 >> 2] = $14;
    HEAP32[$4 + 4 >> 2] = $8;
    $14 = $20 + 8 | 0;
    $4 = $14;
    $15 = HEAP32[$4 >> 2];
    $4 = HEAP32[$4 + 4 >> 2];
    $8 = $24 + 8 | 0;
    HEAP32[$8 >> 2] = $15;
    HEAP32[$8 + 4 >> 2] = $4;
    $15 = $19 + 8 | 0;
    $4 = $15;
    $22 = HEAP32[$4 >> 2];
    $8 = HEAP32[$4 + 4 >> 2];
    $4 = $23 + 8 | 0;
    HEAP32[$4 >> 2] = $22;
    HEAP32[$4 + 4 >> 2] = $8;
    $27 = HEAPF32[$0 + 132 >> 2];
    $28 = HEAPF32[$0 + 152 >> 2];
    $29 = HEAPF32[$0 + 136 >> 2];
    $30 = HEAPF32[$0 + 156 >> 2];
    $31 = HEAPF32[$0 + 140 >> 2];
    $32 = HEAPF32[$0 + 160 >> 2];
    $6 = HEAPF32[$0 + 180 >> 2];
    $11 = HEAPF32[$0 + 176 >> 2];
    $5 = HEAPF32[$0 + 168 >> 2];
    $7 = HEAPF32[$0 + 172 >> 2];
    HEAP32[$3 + 220 >> 2] = 0;
    HEAP32[$3 + 204 >> 2] = 0;
    HEAP32[$3 + 188 >> 2] = 0;
    HEAP32[$3 + 156 >> 2] = 0;
    HEAP32[$3 + 140 >> 2] = 0;
    HEAP32[$3 + 124 >> 2] = 0;
    $10 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($7 * $7)) + Math_fround($11 * $11)) + Math_fround($6 * $6)));
    $9 = Math_fround($11 * $10);
    $12 = Math_fround($7 * $9);
    $13 = Math_fround($5 * $10);
    $16 = Math_fround($6 * $13);
    HEAPF32[$3 + 212 >> 2] = $12 + $16;
    $17 = Math_fround($5 * $9);
    $10 = Math_fround($7 * $10);
    $18 = Math_fround($6 * $10);
    HEAPF32[$3 + 208 >> 2] = $17 - $18;
    HEAPF32[$3 + 200 >> 2] = $12 - $16;
    $12 = Math_fround($5 * $10);
    $6 = Math_fround($6 * $9);
    HEAPF32[$3 + 192 >> 2] = $12 + $6;
    HEAPF32[$3 + 184 >> 2] = $17 + $18;
    HEAPF32[$3 + 180 >> 2] = $12 - $6;
    $5 = Math_fround($5 * $13);
    $6 = Math_fround($7 * $10);
    HEAPF32[$3 + 216 >> 2] = Math_fround(1.0) - Math_fround($5 + $6);
    $7 = Math_fround($11 * $9);
    HEAPF32[$3 + 196 >> 2] = Math_fround(1.0) - Math_fround($5 + $7);
    HEAPF32[$3 + 176 >> 2] = Math_fround(1.0) - Math_fround($6 + $7);
    $5 = HEAPF32[$0 + 184 >> 2];
    $6 = HEAPF32[$0 + 188 >> 2];
    $11 = HEAPF32[$0 + 192 >> 2];
    $7 = HEAPF32[$0 + 196 >> 2];
    $10 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($6 * $6)) + Math_fround($11 * $11)) + Math_fround($7 * $7)));
    $12 = Math_fround($6 * $10);
    $13 = Math_fround($5 * $12);
    $9 = Math_fround($11 * $10);
    $16 = Math_fround($7 * $9);
    HEAPF32[$3 + 116 >> 2] = $13 - $16;
    $17 = Math_fround($5 * $9);
    $18 = Math_fround($7 * $12);
    HEAPF32[$3 + 120 >> 2] = $17 + $18;
    HEAPF32[$3 + 128 >> 2] = $13 + $16;
    $13 = Math_fround($6 * $9);
    $10 = Math_fround($5 * $10);
    $7 = Math_fround($7 * $10);
    HEAPF32[$3 + 136 >> 2] = $13 - $7;
    HEAPF32[$3 + 144 >> 2] = $17 - $18;
    HEAPF32[$3 + 148 >> 2] = $13 + $7;
    $6 = Math_fround($6 * $12);
    $7 = Math_fround($11 * $9);
    HEAPF32[$3 + 112 >> 2] = Math_fround(1.0) - Math_fround($6 + $7);
    $5 = Math_fround($5 * $10);
    HEAPF32[$3 + 132 >> 2] = Math_fround(1.0) - Math_fround($5 + $7);
    HEAPF32[$3 + 152 >> 2] = Math_fround(1.0) - Math_fround($5 + $6);
    $4 = $2 + 24 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $2 + 16 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $2 + 8 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $2;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    HEAP32[$3 + 100 >> 2] = 0;
    HEAP32[$3 + 104 >> 2] = 0;
    HEAPF32[$3 + 96 >> 2] = $31 - $32;
    HEAPF32[$3 + 92 >> 2] = $29 - $30;
    HEAPF32[$3 + 88 >> 2] = $27 - $28;
    HEAP32[$3 + 80 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 1065353216;
    HEAP32[$3 >> 2] = 24172;
    $4 = HEAP32[$0 + 8 >> 2];
    HEAP32[$3 + 84 >> 2] = $4;
    $4 = HEAP32[$4 + 188 >> 2];
    $8 = HEAP32[$4 + 4 >> 2];
    $4 = HEAP32[$4 + 8 >> 2];
    HEAP32[$3 + 8 >> 2] = $8;
    HEAP32[$3 + 12 >> 2] = $4;
    $4 = HEAP32[$0 + 12 >> 2];
    $5 = Math_fround(FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 48 >> 2]]($4));
    $4 = HEAP32[$0 + 12 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 44 >> 2]]($4, Math_fround($5 + HEAPF32[$0 + 64 >> 2]));
    label$3 : {
     label$4 : {
      if (HEAPF32[$3 + 176 >> 2] != HEAPF32[$3 + 112 >> 2]) {
       break label$4
      }
      if (HEAPF32[$3 + 192 >> 2] != HEAPF32[$3 + 128 >> 2]) {
       break label$4
      }
      if (HEAPF32[$3 + 208 >> 2] != HEAPF32[$3 + 144 >> 2]) {
       break label$4
      }
      if (HEAPF32[$3 + 180 >> 2] != HEAPF32[$3 + 116 >> 2]) {
       break label$4
      }
      if (HEAPF32[$3 + 196 >> 2] != HEAPF32[$3 + 132 >> 2]) {
       break label$4
      }
      if (HEAPF32[$3 + 212 >> 2] != HEAPF32[$3 + 148 >> 2]) {
       break label$4
      }
      if (HEAPF32[$3 + 184 >> 2] != HEAPF32[$3 + 120 >> 2]) {
       break label$4
      }
      if (HEAPF32[$3 + 200 >> 2] != HEAPF32[$3 + 136 >> 2]) {
       break label$4
      }
      if (HEAPF32[$3 + 216 >> 2] != HEAPF32[$3 + 152 >> 2]) {
       break label$4
      }
      if (HEAPF32[$3 + 236 >> 2] != HEAPF32[$3 + 172 >> 2]) {
       break label$4
      }
      if (HEAPF32[$3 + 232 >> 2] != HEAPF32[$3 + 168 >> 2]) {
       break label$4
      }
      if (HEAPF32[$3 + 228 >> 2] != HEAPF32[$3 + 164 >> 2]) {
       break label$4
      }
      if (HEAPF32[$3 + 224 >> 2] == HEAPF32[$3 + 160 >> 2]) {
       break label$3
      }
     }
     if (HEAPU8[$0 + 250 | 0]) {
      btGhostObject__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], $3 + 176 | 0, $3 + 112 | 0, $3, HEAPF32[$1 + 56 >> 2]);
      break label$3;
     }
     btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const($1, HEAP32[$0 + 12 >> 2], $3 + 176 | 0, $3 + 112 | 0, $3, HEAPF32[$1 + 56 >> 2]);
    }
    $4 = HEAP32[$0 + 12 >> 2];
    FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 44 >> 2]]($4, $5);
    label$6 : {
     label$7 : {
      $5 = HEAPF32[$3 + 4 >> 2];
      if (!($5 < Math_fround(1.0))) {
       break label$7
      }
      $4 = HEAP32[$0 + 8 >> 2];
      if (HEAPU8[$4 + 204 | 0] & 4) {
       break label$7
      }
      if (!FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $4, HEAP32[$3 + 80 >> 2])) {
       break label$7
      }
      btKinematicCharacterController__updateTargetPositionBasedOnCollision_28btVector3_20const__2c_20float_2c_20float_29($0, $26);
      $6 = Math_fround(HEAPF32[$0 + 152 >> 2] - HEAPF32[$0 + 132 >> 2]);
      $7 = Math_fround(HEAPF32[$0 + 156 >> 2] - HEAPF32[$0 + 136 >> 2]);
      $11 = Math_fround(HEAPF32[$0 + 160 >> 2] - HEAPF32[$0 + 140 >> 2]);
      $9 = Math_fround(Math_fround(Math_fround($6 * $6) + Math_fround($7 * $7)) + Math_fround($11 * $11));
      if (!($9 > Math_fround(1.1920928955078125e-07))) {
       break label$1
      }
      $9 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($9)));
      if (!(Math_fround(Math_fround(Math_fround(Math_fround($6 * $9) * HEAPF32[$0 + 84 >> 2]) + Math_fround(Math_fround($7 * $9) * HEAPF32[$0 + 88 >> 2])) + Math_fround(Math_fround($11 * $9) * HEAPF32[$0 + 92 >> 2])) <= Math_fround(0.0))) {
       break label$6
      }
      break label$1;
     }
     $4 = $19;
     $22 = HEAP32[$4 >> 2];
     $8 = HEAP32[$4 + 4 >> 2];
     $4 = $20;
     HEAP32[$4 >> 2] = $22;
     HEAP32[$4 + 4 >> 2] = $8;
     $4 = $15;
     $15 = HEAP32[$4 >> 2];
     $4 = HEAP32[$4 + 4 >> 2];
     $8 = $14;
     HEAP32[$8 >> 2] = $15;
     HEAP32[$8 + 4 >> 2] = $4;
    }
    $4 = $25;
    $21 = Math_fround($21 - $5);
    if ($21 > Math_fround(.009999999776482582)) {
     continue
    }
   }
   break;
  };
  global$0 = $3 + 240 | 0;
 }
 
 function btKinematicCharacterController__stepDown_28btCollisionWorld__2c_20float_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = 0;
  $3 = global$0 - 432 | 0;
  global$0 = $3;
  $9 = $0 + 160 | 0;
  $13 = HEAP32[$9 >> 2];
  $6 = HEAP32[$9 + 4 >> 2];
  $4 = $3 + 232 | 0;
  HEAP32[$4 >> 2] = $13;
  HEAP32[$4 + 4 >> 2] = $6;
  $4 = HEAP32[$0 + 156 >> 2];
  HEAP32[$3 + 224 >> 2] = HEAP32[$0 + 152 >> 2];
  HEAP32[$3 + 228 >> 2] = $4;
  $5 = HEAPF32[$0 + 20 >> 2];
  label$1 : {
   if ($5 > Math_fround(0.0)) {
    break label$1
   }
   $5 = Math_fround(($5 < Math_fround(0.0) ? Math_fround(-$5) : Math_fround(0.0)) * $2);
   label$2 : {
    if (!($5 > Math_fround(0.0))) {
     break label$2
    }
    $8 = HEAPF32[$0 + 28 >> 2];
    if (!($5 > $8)) {
     break label$2
    }
    if (HEAPU8[$0 + 249 | 0] ? !HEAPU8[$0 + 248 | 0] : 0) {
     break label$2
    }
    $5 = $8;
   }
   $13 = $0 + 152 | 0;
   $5 = Math_fround($5 + HEAPF32[$0 + 148 >> 2]);
   $20 = Math_fround(HEAPF32[$0 + 256 >> 2] * $5);
   HEAPF32[$0 + 152 >> 2] = HEAPF32[$0 + 152 >> 2] - $20;
   $7 = $0 + 156 | 0;
   $21 = Math_fround($5 * HEAPF32[$0 + 260 >> 2]);
   HEAPF32[$7 >> 2] = HEAPF32[$7 >> 2] - $21;
   $7 = $0 + 160 | 0;
   $4 = $7;
   $8 = HEAPF32[$7 >> 2];
   $7 = $0 + 264 | 0;
   $22 = Math_fround($5 * HEAPF32[$7 >> 2]);
   HEAPF32[$4 >> 2] = $8 - $22;
   $6 = $3 + 136 | 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   $6 = $3 + 144 | 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   $6 = $3 + 152 | 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   $6 = HEAP32[$7 + 4 >> 2];
   $4 = $3 + 208 | 0;
   HEAP32[$4 >> 2] = HEAP32[$7 >> 2];
   HEAP32[$4 + 4 >> 2] = $6;
   HEAP32[$3 + 128 >> 2] = 0;
   HEAP32[$3 + 132 >> 2] = 0;
   $4 = HEAP32[$0 + 260 >> 2];
   HEAP32[$3 + 200 >> 2] = HEAP32[$0 + 256 >> 2];
   HEAP32[$3 + 204 >> 2] = $4;
   HEAP32[$3 + 192 >> 2] = 0;
   HEAP32[$3 + 116 >> 2] = 1065353216;
   HEAP32[$3 + 112 >> 2] = 24172;
   $19 = HEAP32[$0 + 8 >> 2];
   HEAP32[$3 + 196 >> 2] = $19;
   $23 = HEAP32[$0 + 48 >> 2];
   HEAP32[$3 + 216 >> 2] = $23;
   $14 = HEAP32[$19 + 188 >> 2];
   HEAP32[$3 + 120 >> 2] = HEAP32[$14 + 4 >> 2];
   HEAP32[$3 + 124 >> 2] = HEAP32[$14 + 8 >> 2];
   $6 = $3 + 24 | 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   $6 = $3 + 32 | 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   $6 = $3 + 40 | 0;
   HEAP32[$6 >> 2] = 0;
   HEAP32[$6 + 4 >> 2] = 0;
   $9 = $7;
   $7 = HEAP32[$9 >> 2];
   $6 = HEAP32[$9 + 4 >> 2];
   $4 = $3 + 96 | 0;
   HEAP32[$4 >> 2] = $7;
   HEAP32[$4 + 4 >> 2] = $6;
   HEAP32[$3 + 80 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 1065353216;
   HEAP32[$3 + 16 >> 2] = 0;
   HEAP32[$3 + 20 >> 2] = 0;
   HEAP32[$3 + 84 >> 2] = $19;
   $4 = HEAP32[$0 + 260 >> 2];
   HEAP32[$3 + 88 >> 2] = HEAP32[$0 + 256 >> 2];
   HEAP32[$3 + 92 >> 2] = $4;
   HEAP32[$3 >> 2] = 24172;
   HEAP32[$3 + 104 >> 2] = $23;
   $9 = $14;
   $4 = HEAP32[$9 + 4 >> 2];
   $6 = HEAP32[$9 + 8 >> 2];
   HEAP32[$3 + 8 >> 2] = $4;
   HEAP32[$3 + 12 >> 2] = $6;
   $19 = $0 + 132 | 0;
   $23 = $3 + 352 | 0;
   $31 = $3 + 416 | 0;
   $25 = $3 + 264 | 0;
   $26 = $3 + 240 | 4;
   $27 = $3 + 328 | 0;
   $24 = $3 + 284 | 0;
   $32 = $24 + 16 | 0;
   $14 = 0;
   while (1) {
    $4 = $27;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $26;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $25;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $24;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $27 + 8 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $26 + 8 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $25 + 8 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    $4 = $24 + 8 | 0;
    HEAP32[$4 >> 2] = 0;
    HEAP32[$4 + 4 >> 2] = 0;
    HEAP32[$32 >> 2] = 0;
    $9 = $19;
    $7 = HEAP32[$9 >> 2];
    $4 = HEAP32[$9 + 4 >> 2];
    $6 = $31;
    HEAP32[$6 >> 2] = $7;
    HEAP32[$6 + 4 >> 2] = $4;
    $9 = $9 + 8 | 0;
    $7 = HEAP32[$9 >> 2];
    $4 = $6 + 8 | 0;
    $6 = HEAP32[$9 + 4 >> 2];
    HEAP32[$4 >> 2] = $7;
    HEAP32[$4 + 4 >> 2] = $6;
    HEAP32[$3 + 324 >> 2] = 1065353216;
    HEAP32[$3 + 316 >> 2] = 0;
    HEAP32[$3 + 320 >> 2] = 0;
    HEAP32[$3 + 344 >> 2] = 1065353216;
    HEAP32[$3 + 348 >> 2] = 0;
    HEAP32[$3 + 240 >> 2] = 1065353216;
    HEAP32[$3 + 260 >> 2] = 1065353216;
    HEAP32[$3 + 280 >> 2] = 1065353216;
    $28 = $13 + 8 | 0;
    $9 = $28;
    $7 = HEAP32[$9 >> 2];
    $4 = HEAP32[$9 + 4 >> 2];
    $6 = $23 + 8 | 0;
    HEAP32[$6 >> 2] = $7;
    HEAP32[$6 + 4 >> 2] = $4;
    $9 = $13;
    $7 = HEAP32[$9 >> 2];
    $6 = HEAP32[$9 + 4 >> 2];
    $4 = $23;
    HEAP32[$4 >> 2] = $7;
    HEAP32[$4 + 4 >> 2] = $6;
    HEAP32[$3 + 412 >> 2] = 0;
    HEAP32[$3 + 396 >> 2] = 0;
    HEAP32[$3 + 380 >> 2] = 0;
    $5 = HEAPF32[$0 + 168 >> 2];
    $8 = HEAPF32[$0 + 172 >> 2];
    $15 = HEAPF32[$0 + 176 >> 2];
    $10 = HEAPF32[$0 + 180 >> 2];
    $12 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($8 * $8)) + Math_fround($15 * $15)) + Math_fround($10 * $10)));
    $18 = Math_fround($8 * $12);
    $11 = Math_fround($5 * $18);
    $16 = Math_fround($15 * $12);
    $17 = Math_fround($10 * $16);
    HEAPF32[$3 + 372 >> 2] = $11 - $17;
    $29 = Math_fround($5 * $16);
    $30 = Math_fround($10 * $18);
    HEAPF32[$3 + 376 >> 2] = $29 + $30;
    HEAPF32[$3 + 384 >> 2] = $11 + $17;
    $11 = Math_fround($8 * $16);
    $12 = Math_fround($5 * $12);
    $10 = Math_fround($10 * $12);
    HEAPF32[$3 + 392 >> 2] = $11 - $10;
    HEAPF32[$3 + 400 >> 2] = $29 - $30;
    HEAPF32[$3 + 404 >> 2] = $11 + $10;
    $8 = Math_fround($8 * $18);
    $10 = Math_fround($15 * $16);
    HEAPF32[$3 + 368 >> 2] = Math_fround(1.0) - Math_fround($8 + $10);
    $5 = Math_fround($5 * $12);
    HEAPF32[$3 + 388 >> 2] = Math_fround(1.0) - Math_fround($5 + $10);
    HEAPF32[$3 + 408 >> 2] = Math_fround(1.0) - Math_fround($5 + $8);
    HEAP32[$3 + 316 >> 2] = 0;
    HEAP32[$3 + 332 >> 2] = 0;
    HEAP32[$3 + 348 >> 2] = 0;
    $5 = HEAPF32[$0 + 184 >> 2];
    $8 = HEAPF32[$0 + 188 >> 2];
    $15 = HEAPF32[$0 + 192 >> 2];
    $10 = HEAPF32[$0 + 196 >> 2];
    $12 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($8 * $8)) + Math_fround($15 * $15)) + Math_fround($10 * $10)));
    $18 = Math_fround($8 * $12);
    $11 = Math_fround($5 * $18);
    $16 = Math_fround($15 * $12);
    $17 = Math_fround($10 * $16);
    HEAPF32[$3 + 320 >> 2] = $11 + $17;
    HEAPF32[$3 + 308 >> 2] = $11 - $17;
    $11 = Math_fround($5 * $16);
    $17 = Math_fround($10 * $18);
    HEAPF32[$3 + 336 >> 2] = $11 - $17;
    HEAPF32[$3 + 312 >> 2] = $11 + $17;
    $11 = Math_fround($8 * $16);
    $12 = Math_fround($5 * $12);
    $10 = Math_fround($10 * $12);
    HEAPF32[$3 + 340 >> 2] = $11 + $10;
    HEAPF32[$3 + 328 >> 2] = $11 - $10;
    $8 = Math_fround($8 * $18);
    $10 = Math_fround($15 * $16);
    HEAPF32[$3 + 304 >> 2] = Math_fround(1.0) - Math_fround($8 + $10);
    $5 = Math_fround($5 * $12);
    HEAPF32[$3 + 344 >> 2] = Math_fround(1.0) - Math_fround($5 + $8);
    HEAPF32[$3 + 324 >> 2] = Math_fround(1.0) - Math_fround($5 + $10);
    $5 = HEAPF32[$0 + 152 >> 2];
    $8 = HEAPF32[$0 + 156 >> 2];
    $10 = HEAPF32[$0 + 160 >> 2];
    HEAP32[$3 + 300 >> 2] = 0;
    HEAPF32[$3 + 296 >> 2] = $10 - $22;
    HEAPF32[$3 + 292 >> 2] = $8 - $21;
    HEAPF32[$3 + 288 >> 2] = $5 - $20;
    label$5 : {
     if (HEAPU8[$0 + 250 | 0]) {
      btGhostObject__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const(HEAP32[$0 + 8 >> 2], HEAP32[$0 + 12 >> 2], $3 + 368 | 0, $3 + 304 | 0, $3 + 112 | 0, HEAPF32[$1 + 56 >> 2]);
      if (HEAPF32[$3 + 116 >> 2] < Math_fround(1.0)) {
       break label$5
      }
      $7 = HEAP32[$0 + 8 >> 2];
      if (HEAPU8[$7 + 204 | 0] & 4) {
       break label$5
      }
      btGhostObject__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const($7, HEAP32[$0 + 12 >> 2], $3 + 368 | 0, $3 + 240 | 0, $3, HEAPF32[$1 + 56 >> 2]);
      break label$5;
     }
     btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const($1, HEAP32[$0 + 12 >> 2], $3 + 368 | 0, $3 + 304 | 0, $3 + 112 | 0, HEAPF32[$1 + 56 >> 2]);
     if (HEAPF32[$3 + 116 >> 2] < Math_fround(1.0)) {
      break label$5
     }
     if (HEAPU8[HEAP32[$0 + 8 >> 2] + 204 | 0] & 4) {
      break label$5
     }
     btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const($1, HEAP32[$0 + 12 >> 2], $3 + 368 | 0, $3 + 240 | 0, $3, HEAPF32[$1 + 56 >> 2]);
    }
    $5 = HEAPF32[$0 + 20 >> 2];
    $5 = $5 < Math_fround(0.0) ? Math_fround(-$5) : Math_fround(0.0);
    label$7 : {
     if (HEAPU8[$0 + 290 | 0]) {
      $7 = 0;
      if (HEAPF32[$3 + 4 >> 2] < Math_fround(1.0) ^ 1 ? !(HEAPF32[$3 + 116 >> 2] < Math_fround(1.0)) : 0) {
       break label$7
      }
      $4 = HEAP32[$0 + 8 >> 2];
      if (HEAPU8[$4 + 204 | 0] & 4) {
       break label$7
      }
      $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $4, HEAP32[$3 + 192 >> 2]) | 0;
      break label$7;
     }
     $7 = 0;
     if (!(HEAPF32[$3 + 4 >> 2] < Math_fround(1.0))) {
      break label$7
     }
     $4 = HEAP32[$0 + 8 >> 2];
     if (HEAPU8[$4 + 204 | 0] & 4) {
      break label$7
     }
     $7 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $4, HEAP32[$3 + 80 >> 2]) | 0;
    }
    $8 = Math_fround($5 * $2);
    $5 = Math_fround(0.0);
    label$11 : {
     label$12 : {
      $5 = HEAPF32[$0 + 20 >> 2] < Math_fround(0.0) ^ 1 ? $5 : HEAPF32[$0 + 60 >> 2];
      if (!(($8 > Math_fround(0.0) ^ -1 | $8 < $5 ^ -1 | $7 ^ -1 | $14) & 1)) {
       if (HEAPU8[$0 + 248 | 0]) {
        break label$12
       }
       if (!HEAPU8[$0 + 249 | 0]) {
        break label$12
       }
       $14 = 0;
      }
      label$14 : {
       label$15 : {
        $7 = HEAP32[$0 + 8 >> 2];
        if (HEAPU8[$7 + 204 | 0] & 4) {
         break label$15
        }
        if (!(HEAPF32[$3 + 116 >> 2] < Math_fround(1.0))) {
         break label$15
        }
        if ((FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 56 >> 2]]($0, $7, HEAP32[$3 + 192 >> 2]) | $14) & 1) {
         break label$14
        }
        break label$11;
       }
       if (!($14 & 1)) {
        break label$11
       }
      }
      $10 = HEAPF32[$0 + 136 >> 2];
      if (HEAPU8[$0 + 290 | 0]) {
       $5 = HEAPU8[$0 + 289 | 0] ? HEAPF32[$3 + 116 >> 2] : Math_fround(Math_fround($10 - HEAPF32[$3 + 180 >> 2]) * Math_fround(.5))
      } else {
       $5 = HEAPF32[$3 + 116 >> 2]
      }
      HEAP8[$0 + 289 | 0] = 0;
      HEAP8[$0 + 249 | 0] = 0;
      HEAP32[$0 + 20 >> 2] = 0;
      HEAP32[$0 + 24 >> 2] = 0;
      $8 = Math_fround(Math_fround(1.0) - $5);
      HEAPF32[$0 + 132 >> 2] = Math_fround($8 * HEAPF32[$0 + 132 >> 2]) + Math_fround($5 * HEAPF32[$0 + 152 >> 2]);
      HEAPF32[$0 + 136 >> 2] = Math_fround($10 * $8) + Math_fround($5 * HEAPF32[$0 + 156 >> 2]);
      $13 = $0 + 140 | 0;
      HEAPF32[$13 >> 2] = Math_fround($8 * HEAPF32[$13 >> 2]) + Math_fround($5 * HEAPF32[$0 + 160 >> 2]);
      break label$1;
     }
     $4 = HEAP32[$3 + 228 >> 2];
     $6 = $13;
     HEAP32[$6 >> 2] = HEAP32[$3 + 224 >> 2];
     HEAP32[$6 + 4 >> 2] = $4;
     $9 = $3 + 232 | 0;
     $7 = HEAP32[$9 >> 2];
     $6 = HEAP32[$9 + 4 >> 2];
     $4 = $28;
     HEAP32[$4 >> 2] = $7;
     HEAP32[$4 + 4 >> 2] = $6;
     $5 = Math_fround($5 + HEAPF32[$0 + 148 >> 2]);
     $20 = Math_fround(HEAPF32[$0 + 256 >> 2] * $5);
     HEAPF32[$0 + 152 >> 2] = HEAPF32[$0 + 152 >> 2] - $20;
     $21 = Math_fround($5 * HEAPF32[$0 + 260 >> 2]);
     HEAPF32[$0 + 156 >> 2] = HEAPF32[$0 + 156 >> 2] - $21;
     $22 = Math_fround($5 * HEAPF32[$0 + 264 >> 2]);
     HEAPF32[$0 + 160 >> 2] = HEAPF32[$0 + 160 >> 2] - $22;
     $14 = 1;
     continue;
    }
    break;
   };
   HEAP8[$0 + 289 | 0] = 1;
   label$18 : {
    if (!HEAPU8[$0 + 290 | 0]) {
     break label$18
    }
    $5 = HEAPF32[$0 + 20 >> 2];
    $2 = Math_fround(($5 < Math_fround(0.0) ? Math_fround(-$5) : Math_fround(0.0)) * $2);
    $5 = HEAPF32[$0 + 28 >> 2];
    if (!($2 > $5)) {
     break label$18
    }
    if (HEAPU8[$0 + 249 | 0] ? !HEAPU8[$0 + 248 | 0] : 0) {
     break label$18
    }
    $5 = Math_fround($5 + HEAPF32[$0 + 148 >> 2]);
    HEAPF32[$0 + 160 >> 2] = Math_fround($22 + HEAPF32[$0 + 160 >> 2]) - Math_fround($5 * HEAPF32[$0 + 264 >> 2]);
    HEAPF32[$0 + 156 >> 2] = Math_fround($21 + HEAPF32[$0 + 156 >> 2]) - Math_fround($5 * HEAPF32[$0 + 260 >> 2]);
    HEAPF32[$0 + 152 >> 2] = Math_fround($20 + HEAPF32[$0 + 152 >> 2]) - Math_fround(HEAPF32[$0 + 256 >> 2] * $5);
   }
   $0 = HEAP32[$13 >> 2];
   $4 = HEAP32[$9 + 4 >> 2];
   $6 = $19;
   HEAP32[$6 >> 2] = $0;
   HEAP32[$6 + 4 >> 2] = $4;
   $9 = $9 + 8 | 0;
   $0 = HEAP32[$9 >> 2];
   $4 = $6 + 8 | 0;
   $6 = HEAP32[$9 + 4 >> 2];
   HEAP32[$4 >> 2] = $0;
   HEAP32[$4 + 4 >> 2] = $6;
  }
  global$0 = $3 + 432 | 0;
 }
 
 function btKinematicCharacterController__setWalkDirection_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0;
  HEAP8[$0 + 251 | 0] = 1;
  $6 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 68 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 72 >> 2] = $6;
  $1 = $1 + 8 | 0;
  $7 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $6 = $0 + 76 | 0;
  HEAP32[$6 >> 2] = $7;
  HEAP32[$6 + 4 >> 2] = $1;
  $2 = HEAPF32[$0 + 68 >> 2];
  $3 = HEAPF32[$0 + 72 >> 2];
  $4 = HEAPF32[$6 >> 2];
  $5 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($2 * $2) + Math_fround($3 * $3)) + Math_fround($4 * $4))));
  label$1 : {
   if (!($5 > Math_fround(1.1920928955078125e-07))) {
    $2 = Math_fround(0.0);
    $3 = Math_fround(0.0);
    $4 = Math_fround(0.0);
    $1 = 0;
    break label$1;
   }
   $5 = Math_fround(Math_fround(1.0) / $5);
   $4 = Math_fround($4 * $5);
   $3 = Math_fround($3 * $5);
   $2 = Math_fround($2 * $5);
   $1 = HEAP32[$0 + 80 >> 2];
  }
  HEAPF32[$0 + 84 >> 2] = $2;
  HEAP32[$0 + 96 >> 2] = $1;
  HEAPF32[$0 + 92 >> 2] = $4;
  HEAPF32[$0 + 88 >> 2] = $3;
 }
 
 function btKinematicCharacterController__setVelocityForTimeInterval_28btVector3_20const__2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0;
  HEAP8[$0 + 251 | 0] = 0;
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 68 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 72 >> 2] = $3;
  $1 = $1 + 8 | 0;
  $9 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 76 | 0;
  HEAP32[$3 >> 2] = $9;
  HEAP32[$3 + 4 >> 2] = $1;
  $1 = $0;
  $5 = HEAPF32[$0 + 68 >> 2];
  $6 = HEAPF32[$0 + 72 >> 2];
  $7 = HEAPF32[$3 >> 2];
  $8 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($5 * $5) + Math_fround($6 * $6)) + Math_fround($7 * $7))));
  if (!!($8 > Math_fround(1.1920928955078125e-07))) {
   $4 = Math_fround(Math_fround(1.0) / $8);
   $10 = Math_fround($7 * $4);
   $11 = Math_fround($6 * $4);
   $12 = HEAP32[$0 + 80 >> 2];
   $4 = Math_fround($5 * $4);
  }
  HEAPF32[$1 + 84 >> 2] = $4;
  HEAP32[$0 + 96 >> 2] = $12;
  HEAPF32[$0 + 92 >> 2] = $10;
  HEAPF32[$0 + 88 >> 2] = $11;
  HEAPF32[$0 + 252 >> 2] = HEAPF32[$0 + 252 >> 2] + $2;
 }
 
 function btKinematicCharacterController__setAngularVelocity_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 100 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 104 >> 2] = $2;
  $1 = $1 + 8 | 0;
  $2 = $0 + 108 | 0;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
 }
 
 function btKinematicCharacterController__getAngularVelocity_28_29_20const($0) {
  $0 = $0 | 0;
  return $0 + 100 | 0;
 }
 
 function btKinematicCharacterController__setLinearVelocity_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
  $4 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 68 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 72 >> 2] = $4;
  $2 = $1 + 8 | 0;
  $9 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $4 = $0 + 76 | 0;
  HEAP32[$4 >> 2] = $9;
  HEAP32[$4 + 4 >> 2] = $2;
  $10 = HEAPF32[$0 + 68 >> 2];
  $5 = HEAPF32[$0 + 72 >> 2];
  $6 = HEAPF32[$4 >> 2];
  $11 = Math_fround(Math_fround(Math_fround($10 * $10) + Math_fround($5 * $5)) + Math_fround($6 * $6));
  label$1 : {
   if (!!($11 > Math_fround(0.0))) {
    $12 = HEAPF32[$0 + 264 >> 2];
    $3 = HEAPF32[$1 + 8 >> 2];
    $15 = $3;
    $7 = HEAPF32[$1 >> 2];
    $8 = HEAPF32[$1 + 4 >> 2];
    $3 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8)) + Math_fround($3 * $3)))));
    $13 = HEAPF32[$0 + 256 >> 2];
    $14 = HEAPF32[$0 + 260 >> 2];
    $3 = Math_fround(Math_fround($12 * Math_fround($15 * $3)) + Math_fround(Math_fround($13 * Math_fround($7 * $3)) + Math_fround($14 * Math_fround($8 * $3))));
    if ($3 == Math_fround(0.0)) {
     break label$1
    }
    $7 = Math_fround(Math_fround(Math_sqrt($11)) * sinf(Math_fround(Math_fround(1.5707963705062866) - acosf(Math_fround(Math_min(Math_fround(Math_max($3, Math_fround(-1.0))), Math_fround(1.0)))))));
    $8 = Math_fround($12 * $7);
    HEAPF32[$0 + 76 >> 2] = $6 - $8;
    $6 = Math_fround($14 * $7);
    HEAPF32[$0 + 72 >> 2] = $5 - $6;
    $5 = Math_fround($13 * $7);
    HEAPF32[$0 + 68 >> 2] = $10 - $5;
    HEAPF32[$0 + 20 >> 2] = ($3 < Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) * Math_fround(Math_sqrt(Math_fround(Math_fround($8 * $8) + Math_fround(Math_fround($5 * $5) + Math_fround($6 * $6)))));
    if (!($3 > Math_fround(0.0))) {
     break label$1
    }
    HEAP8[$0 + 249 | 0] = 1;
    $1 = HEAP32[$0 + 8 >> 2];
    $2 = $1 + 52 | 0;
    $9 = HEAP32[$2 >> 2];
    $4 = HEAP32[$2 + 4 >> 2];
    HEAP32[$0 + 116 >> 2] = $9;
    HEAP32[$0 + 120 >> 2] = $4;
    $2 = $1 + 60 | 0;
    $1 = HEAP32[$2 >> 2];
    $2 = HEAP32[$2 + 4 >> 2];
    $4 = $0 + 124 | 0;
    HEAP32[$4 >> 2] = $1;
    HEAP32[$4 + 4 >> 2] = $2;
    return;
   }
   HEAP32[$0 + 20 >> 2] = 0;
  }
 }
 
 function btKinematicCharacterController__getLinearVelocity_28_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0);
  HEAP32[$0 + 12 >> 2] = 0;
  $2 = HEAPF32[$1 + 20 >> 2];
  HEAPF32[$0 >> 2] = Math_fround(HEAPF32[$1 + 256 >> 2] * $2) + HEAPF32[$1 + 68 >> 2];
  HEAPF32[$0 + 8 >> 2] = Math_fround($2 * HEAPF32[$1 + 264 >> 2]) + HEAPF32[$1 + 76 >> 2];
  HEAPF32[$0 + 4 >> 2] = Math_fround($2 * HEAPF32[$1 + 260 >> 2]) + HEAPF32[$1 + 72 >> 2];
 }
 
 function btKinematicCharacterController__reset_28btCollisionWorld__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
  HEAP32[$0 + 68 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  $2 = $0 + 76 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 252 >> 2] = 0;
  HEAP16[$0 + 248 >> 1] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  $0 = HEAP32[HEAP32[$0 + 8 >> 2] + 344 >> 2];
  if (HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0) + 4 >> 2] >= 1) {
   while (1) {
    ((((wasm2js_i32$1 = $0, wasm2js_i32$2 = HEAP32[HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0) + 12 >> 2] >> 2]), wasm2js_i32$3 = HEAP32[HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0) + 12 >> 2] + 4 >> 2]), wasm2js_i32$4 = HEAP32[$1 + 24 >> 2]), wasm2js_i32$0 = HEAP32[HEAP32[$0 >> 2] + 12 >> 2]), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0) | 0;
    if (HEAP32[(FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0) + 4 >> 2] > 0) {
     continue
    }
    break;
   }
  }
 }
 
 function btKinematicCharacterController__warp_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = $1 + 8 | 0;
  $3 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $4 = HEAP32[$1 >> 2];
  $5 = HEAP32[$1 + 4 >> 2];
  $1 = HEAP32[$0 + 8 >> 2];
  $0 = $1 + 44 | 0;
  HEAP32[$0 >> 2] = 1065353216;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $1 + 36 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$1 + 24 >> 2] = 1065353216;
  $0 = $1 + 28 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $1 + 16 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 1065353216;
  $0 = $1 + 8 | 0;
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  $0 = $1 + 60 | 0;
  HEAP32[$0 >> 2] = $3;
  HEAP32[$0 + 4 >> 2] = $2;
  $0 = $1 + 52 | 0;
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $5;
  HEAP32[$1 + 304 >> 2] = HEAP32[$1 + 304 >> 2] + 1;
 }
 
 function btKinematicCharacterController__preStep_28btCollisionWorld__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $6 = global$0 - 16 | 0;
  global$0 = $6;
  $4 = HEAP32[$0 + 8 >> 2];
  $5 = $4 + 52 | 0;
  $1 = $5;
  $2 = HEAP32[$1 >> 2];
  $3 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 132 >> 2] = $2;
  HEAP32[$0 + 136 >> 2] = $3;
  $7 = $4 + 60 | 0;
  $1 = $7;
  $8 = HEAP32[$1 >> 2];
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 140 | 0;
  HEAP32[$3 >> 2] = $8;
  HEAP32[$3 + 4 >> 2] = $2;
  $1 = $5;
  $8 = HEAP32[$1 >> 2];
  $5 = HEAP32[$1 + 4 >> 2];
  $1 = $7;
  $7 = HEAP32[$1 >> 2];
  $2 = HEAP32[$1 + 4 >> 2];
  $3 = $0 + 160 | 0;
  HEAP32[$3 >> 2] = $7;
  HEAP32[$3 + 4 >> 2] = $2;
  HEAP32[$0 + 152 >> 2] = $8;
  HEAP32[$0 + 156 >> 2] = $5;
  btMatrix3x3__getRotation_28btQuaternion__29_20const($4 + 4 | 0, $6);
  $1 = $6 + 8 | 0;
  $5 = HEAP32[$1 >> 2];
  $3 = HEAP32[$1 + 4 >> 2];
  $4 = $0 + 176 | 0;
  $2 = $4;
  HEAP32[$2 >> 2] = $5;
  HEAP32[$2 + 4 >> 2] = $3;
  $1 = $6;
  $3 = HEAP32[$1 >> 2];
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 168 >> 2] = $3;
  HEAP32[$0 + 172 >> 2] = $2;
  $1 = $4;
  $4 = HEAP32[$1 >> 2];
  $3 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 192 | 0;
  HEAP32[$2 >> 2] = $4;
  HEAP32[$2 + 4 >> 2] = $3;
  $2 = HEAP32[$0 + 172 >> 2];
  HEAP32[$0 + 184 >> 2] = HEAP32[$0 + 168 >> 2];
  HEAP32[$0 + 188 >> 2] = $2;
  global$0 = $6 + 16 | 0;
 }
 
 function btKinematicCharacterController__playerStep_28btCollisionWorld__2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = global$0 - 80 | 0;
  global$0 = $6;
  $7 = HEAPF32[$0 + 100 >> 2];
  $9 = HEAPF32[$0 + 104 >> 2];
  $11 = HEAPF32[$0 + 108 >> 2];
  $12 = Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($9 * $9)) + Math_fround($11 * $11));
  if (!!($12 > Math_fround(0.0))) {
   $12 = powf(Math_fround(Math_fround(1.0) - HEAPF32[$0 + 244 >> 2]), $2);
   $11 = Math_fround($11 * $12);
   HEAPF32[$0 + 108 >> 2] = $11;
   $9 = Math_fround($9 * $12);
   HEAPF32[$0 + 104 >> 2] = $9;
   $7 = Math_fround($7 * $12);
   HEAPF32[$0 + 100 >> 2] = $7;
   $12 = Math_fround(Math_fround(Math_fround($7 * $7) + Math_fround($9 * $9)) + Math_fround($11 * $11));
  }
  if (!!($12 > Math_fround(0.0))) {
   $8 = HEAP32[$0 + 8 >> 2];
   $3 = $8 + 12 | 0;
   $23 = HEAP32[$3 >> 2];
   $17 = HEAP32[$3 + 4 >> 2];
   $3 = $8;
   $25 = HEAP32[$3 + 4 >> 2];
   $26 = HEAP32[$3 + 8 >> 2];
   $3 = $3 + 28 | 0;
   $13 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $10 = $6 + 40 | 0;
   $4 = $10;
   HEAP32[$4 >> 2] = $13;
   HEAP32[$4 + 4 >> 2] = $5;
   $13 = $6 + 24 | 0;
   $4 = $13;
   HEAP32[$4 >> 2] = $23;
   HEAP32[$4 + 4 >> 2] = $17;
   $3 = $8 + 36 | 0;
   $23 = HEAP32[$3 >> 2];
   $17 = HEAP32[$3 + 4 >> 2];
   $3 = $8 + 20 | 0;
   $27 = HEAP32[$3 >> 2];
   $28 = HEAP32[$3 + 4 >> 2];
   $3 = $8 + 44 | 0;
   $29 = HEAP32[$3 >> 2];
   $30 = HEAP32[$3 + 4 >> 2];
   $3 = $8 + 60 | 0;
   $21 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $24 = $6 + 72 | 0;
   $4 = $24;
   HEAP32[$4 >> 2] = $21;
   HEAP32[$4 + 4 >> 2] = $5;
   $21 = $6 + 56 | 0;
   $4 = $21;
   HEAP32[$4 >> 2] = $29;
   HEAP32[$4 + 4 >> 2] = $30;
   HEAP32[$6 + 16 >> 2] = $25;
   HEAP32[$6 + 20 >> 2] = $26;
   HEAP32[$6 + 32 >> 2] = $27;
   HEAP32[$6 + 36 >> 2] = $28;
   $3 = $8 + 52 | 0;
   $5 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   HEAP32[$6 + 64 >> 2] = $5;
   HEAP32[$6 + 68 >> 2] = $4;
   HEAP32[$6 + 48 >> 2] = $23;
   HEAP32[$6 + 52 >> 2] = $17;
   $14 = Math_fround(Math_sqrt($12));
   $18 = Math_fround(Math_fround($14 * $2) * Math_fround(.5));
   $19 = sinf($18);
   btMatrix3x3__getRotation_28btQuaternion__29_20const($6 + 16 | 0, $6);
   $12 = HEAPF32[$6 + 12 >> 2];
   $15 = HEAPF32[$6 >> 2];
   $18 = cosf($18);
   $14 = Math_fround(Math_fround(1.0) / $14);
   $7 = Math_fround($7 * $14);
   $22 = $7;
   $16 = Math_fround($11 * $14);
   $20 = Math_fround($7 * $7);
   $7 = Math_fround($9 * $14);
   $9 = Math_fround($19 / Math_fround(Math_sqrt(Math_fround(Math_fround($16 * $16) + Math_fround($20 + Math_fround($7 * $7))))));
   $11 = Math_fround($22 * $9);
   $14 = Math_fround($7 * $9);
   $19 = HEAPF32[$6 + 8 >> 2];
   $16 = Math_fround($16 * $9);
   $20 = HEAPF32[$6 + 4 >> 2];
   $7 = Math_fround(Math_fround(Math_fround(Math_fround($15 * $18) + Math_fround($12 * $11)) + Math_fround($14 * $19)) - Math_fround($16 * $20));
   $22 = Math_fround(Math_fround(Math_fround(Math_fround($16 * $12) + Math_fround($18 * $19)) + Math_fround($11 * $20)) - Math_fround($14 * $15));
   $9 = Math_fround(Math_fround(Math_fround(Math_fround($18 * $12) - Math_fround($11 * $15)) - Math_fround($14 * $20)) - Math_fround($16 * $19));
   $11 = Math_fround(Math_fround(Math_fround($16 * $15) + Math_fround(Math_fround($14 * $12) + Math_fround($18 * $20))) - Math_fround($11 * $19));
   $15 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround($9 * $9) + Math_fround(Math_fround($22 * $22) + Math_fround(Math_fround($7 * $7) + Math_fround($11 * $11)))));
   $12 = Math_fround($22 * $15);
   $14 = Math_fround($7 * $12);
   $18 = Math_fround($11 * $15);
   $19 = Math_fround($9 * $18);
   HEAPF32[$13 >> 2] = $14 + $19;
   HEAP32[$6 + 60 >> 2] = 0;
   HEAP32[$6 + 44 >> 2] = 0;
   $16 = Math_fround($11 * $12);
   $15 = Math_fround($7 * $15);
   $20 = Math_fround($9 * $15);
   HEAPF32[$6 + 52 >> 2] = $16 + $20;
   HEAPF32[$10 >> 2] = $16 - $20;
   $15 = Math_fround($7 * $15);
   $11 = Math_fround($11 * $18);
   HEAPF32[$21 >> 2] = Math_fround(1.0) - Math_fround($15 + $11);
   $16 = Math_fround($22 * $12);
   HEAPF32[$6 + 36 >> 2] = Math_fround(1.0) - Math_fround($15 + $16);
   HEAP32[$6 + 28 >> 2] = 0;
   HEAPF32[$6 + 48 >> 2] = $14 - $19;
   $7 = Math_fround($7 * $18);
   $9 = Math_fround($9 * $12);
   HEAPF32[$6 + 32 >> 2] = $7 + $9;
   HEAPF32[$6 + 20 >> 2] = $7 - $9;
   $3 = $13;
   $13 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $8 = HEAP32[$0 + 8 >> 2];
   $4 = $8 + 12 | 0;
   HEAP32[$4 >> 2] = $13;
   HEAP32[$4 + 4 >> 2] = $5;
   HEAPF32[$6 + 16 >> 2] = Math_fround(1.0) - Math_fround($11 + $16);
   $4 = HEAP32[$6 + 20 >> 2];
   $5 = $8;
   HEAP32[$5 + 4 >> 2] = HEAP32[$6 + 16 >> 2];
   HEAP32[$5 + 8 >> 2] = $4;
   $4 = $5 + 20 | 0;
   $5 = HEAP32[$6 + 36 >> 2];
   HEAP32[$4 >> 2] = HEAP32[$6 + 32 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   $3 = $10;
   $10 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   $5 = $8 + 28 | 0;
   HEAP32[$5 >> 2] = $10;
   HEAP32[$5 + 4 >> 2] = $4;
   HEAP32[$8 + 304 >> 2] = HEAP32[$8 + 304 >> 2] + 1;
   $5 = HEAP32[$6 + 52 >> 2];
   $4 = $8 + 36 | 0;
   HEAP32[$4 >> 2] = HEAP32[$6 + 48 >> 2];
   HEAP32[$4 + 4 >> 2] = $5;
   $3 = $21;
   $10 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   $5 = $8 + 44 | 0;
   HEAP32[$5 >> 2] = $10;
   HEAP32[$5 + 4 >> 2] = $4;
   $3 = $24;
   $10 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $4 = $8 + 60 | 0;
   HEAP32[$4 >> 2] = $10;
   HEAP32[$4 + 4 >> 2] = $5;
   $4 = HEAP32[$6 + 68 >> 2];
   $5 = $8 + 52 | 0;
   HEAP32[$5 >> 2] = HEAP32[$6 + 64 >> 2];
   HEAP32[$5 + 4 >> 2] = $4;
   $8 = HEAP32[$0 + 8 >> 2];
   $10 = $8 + 52 | 0;
   $3 = $10;
   $4 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   HEAP32[$0 + 132 >> 2] = $4;
   HEAP32[$0 + 136 >> 2] = $5;
   $13 = $8 + 60 | 0;
   $3 = $13;
   $17 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   $5 = $0 + 140 | 0;
   HEAP32[$5 >> 2] = $17;
   HEAP32[$5 + 4 >> 2] = $4;
   $3 = $10;
   $23 = HEAP32[$3 >> 2];
   $17 = HEAP32[$3 + 4 >> 2];
   $3 = $13;
   $10 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   $5 = $0 + 160 | 0;
   HEAP32[$5 >> 2] = $10;
   HEAP32[$5 + 4 >> 2] = $4;
   HEAP32[$0 + 152 >> 2] = $23;
   HEAP32[$0 + 156 >> 2] = $17;
   btMatrix3x3__getRotation_28btQuaternion__29_20const($8 + 4 | 0, $6);
   $3 = $6 + 8 | 0;
   $10 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $8 = $0 + 176 | 0;
   $4 = $8;
   HEAP32[$4 >> 2] = $10;
   HEAP32[$4 + 4 >> 2] = $5;
   $4 = HEAP32[$6 + 4 >> 2];
   HEAP32[$0 + 168 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$0 + 172 >> 2] = $4;
   $3 = $8;
   $8 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $4 = $0 + 192 | 0;
   HEAP32[$4 >> 2] = $8;
   HEAP32[$4 + 4 >> 2] = $5;
   $4 = HEAP32[$0 + 172 >> 2];
   HEAP32[$0 + 184 >> 2] = HEAP32[$0 + 168 >> 2];
   HEAP32[$0 + 188 >> 2] = $4;
  }
  label$3 : {
   if (HEAPF32[$0 + 252 >> 2] <= Math_fround(0.0) ? !HEAPU8[$0 + 251 | 0] : 0) {
    break label$3
   }
   (wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0) | 0), HEAP8[wasm2js_i32$0 + 248 | 0] = wasm2js_i32$1;
   $7 = HEAPF32[$0 + 72 >> 2];
   $9 = HEAPF32[$0 + 68 >> 2];
   $11 = HEAPF32[$0 + 76 >> 2];
   $12 = powf(Math_fround(Math_fround(1.0) - HEAPF32[$0 + 240 >> 2]), $2);
   if (!!(Math_fround(Math_fround(Math_fround($9 * $9) + Math_fround($7 * $7)) + Math_fround($11 * $11)) > Math_fround(0.0))) {
    HEAPF32[$0 + 76 >> 2] = $11 * $12;
    HEAPF32[$0 + 72 >> 2] = $7 * $12;
    HEAPF32[$0 + 68 >> 2] = $9 * $12;
   }
   $7 = Math_fround(Math_fround(HEAPF32[$0 + 20 >> 2] * $12) - Math_fround(HEAPF32[$0 + 52 >> 2] * $2));
   HEAPF32[$0 + 20 >> 2] = $7;
   label$6 : {
    if (!($7 > Math_fround(0.0))) {
     break label$6
    }
    $9 = HEAPF32[$0 + 32 >> 2];
    if (!($7 > $9)) {
     break label$6
    }
    HEAPF32[$0 + 20 >> 2] = $9;
    $7 = $9;
   }
   label$7 : {
    if (!($7 < Math_fround(0.0))) {
     break label$7
    }
    $9 = Math_fround(Math_abs(HEAPF32[$0 + 28 >> 2]));
    if (!(Math_fround(Math_abs($7)) > $9)) {
     break label$7
    }
    $7 = Math_fround(-$9);
    HEAPF32[$0 + 20 >> 2] = $7;
   }
   HEAPF32[$0 + 24 >> 2] = $7 * $2;
   $8 = HEAP32[$0 + 8 >> 2];
   $3 = $8 + 12 | 0;
   $10 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $4 = $6 + 24 | 0;
   HEAP32[$4 >> 2] = $10;
   HEAP32[$4 + 4 >> 2] = $5;
   $3 = $8 + 28 | 0;
   $10 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   $5 = $6 + 40 | 0;
   HEAP32[$5 >> 2] = $10;
   HEAP32[$5 + 4 >> 2] = $4;
   $3 = $8 + 44 | 0;
   $10 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $4 = $6 + 56 | 0;
   HEAP32[$4 >> 2] = $10;
   HEAP32[$4 + 4 >> 2] = $5;
   $3 = $8 + 60 | 0;
   $10 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   $5 = $6 + 72 | 0;
   HEAP32[$5 >> 2] = $10;
   HEAP32[$5 + 4 >> 2] = $4;
   $3 = $8;
   $4 = HEAP32[$3 + 4 >> 2];
   $5 = HEAP32[$3 + 8 >> 2];
   HEAP32[$6 + 16 >> 2] = $4;
   HEAP32[$6 + 20 >> 2] = $5;
   $3 = $3 + 20 | 0;
   $5 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   HEAP32[$6 + 32 >> 2] = $5;
   HEAP32[$6 + 36 >> 2] = $4;
   $3 = $8 + 36 | 0;
   $4 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   HEAP32[$6 + 48 >> 2] = $4;
   HEAP32[$6 + 52 >> 2] = $5;
   $3 = $8 + 52 | 0;
   $5 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   HEAP32[$6 + 64 >> 2] = $5;
   HEAP32[$6 + 68 >> 2] = $4;
   btKinematicCharacterController__stepUp_28btCollisionWorld__29($0, $1);
   $10 = $6 - -64 | 0;
   $13 = $6 + 48 | 0;
   $21 = $6 + 32 | 0;
   label$8 : {
    if (HEAPU8[$0 + 251 | 0]) {
     btKinematicCharacterController__stepForwardAndStrafe_28btCollisionWorld__2c_20btVector3_20const__29($0, $1, $0 + 68 | 0);
     break label$8;
    }
    $7 = HEAPF32[$0 + 252 >> 2];
    HEAPF32[$0 + 252 >> 2] = $7 - $2;
    HEAP32[$6 + 12 >> 2] = 0;
    $7 = $7 > $2 ? $2 : $7;
    HEAPF32[$6 + 8 >> 2] = $7 * HEAPF32[$0 + 76 >> 2];
    HEAPF32[$6 + 4 >> 2] = $7 * HEAPF32[$0 + 72 >> 2];
    HEAPF32[$6 >> 2] = $7 * HEAPF32[$0 + 68 >> 2];
    btKinematicCharacterController__stepForwardAndStrafe_28btCollisionWorld__2c_20btVector3_20const__29($0, $1, $6);
   }
   btKinematicCharacterController__stepDown_28btCollisionWorld__2c_20float_29($0, $1, $2);
   $3 = $0 + 140 | 0;
   $8 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $24 = $10 + 8 | 0;
   $4 = $24;
   HEAP32[$4 >> 2] = $8;
   HEAP32[$4 + 4 >> 2] = $5;
   $4 = HEAP32[$0 + 136 >> 2];
   $5 = $10;
   HEAP32[$5 >> 2] = HEAP32[$0 + 132 >> 2];
   HEAP32[$5 + 4 >> 2] = $4;
   $5 = HEAP32[$6 + 20 >> 2];
   $8 = HEAP32[$0 + 8 >> 2];
   $4 = $8;
   HEAP32[$4 + 4 >> 2] = HEAP32[$6 + 16 >> 2];
   HEAP32[$4 + 8 >> 2] = $5;
   $3 = $21;
   $17 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   $5 = $8 + 20 | 0;
   HEAP32[$5 >> 2] = $17;
   HEAP32[$5 + 4 >> 2] = $4;
   $3 = $3 + 8 | 0;
   $17 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $4 = $8 + 28 | 0;
   HEAP32[$4 >> 2] = $17;
   HEAP32[$4 + 4 >> 2] = $5;
   $3 = $13;
   $13 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   $5 = $8 + 36 | 0;
   HEAP32[$5 >> 2] = $13;
   HEAP32[$5 + 4 >> 2] = $4;
   $3 = $3 + 8 | 0;
   $13 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $4 = $8 + 44 | 0;
   HEAP32[$4 >> 2] = $13;
   HEAP32[$4 + 4 >> 2] = $5;
   $3 = $6 + 24 | 0;
   $13 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   $5 = $8 + 12 | 0;
   HEAP32[$5 >> 2] = $13;
   HEAP32[$5 + 4 >> 2] = $4;
   HEAP32[$8 + 304 >> 2] = HEAP32[$8 + 304 >> 2] + 1;
   $3 = $10;
   $10 = HEAP32[$3 >> 2];
   $5 = HEAP32[$3 + 4 >> 2];
   $4 = $8 + 52 | 0;
   HEAP32[$4 >> 2] = $10;
   HEAP32[$4 + 4 >> 2] = $5;
   $3 = $24;
   $10 = HEAP32[$3 >> 2];
   $4 = HEAP32[$3 + 4 >> 2];
   $5 = $8 + 60 | 0;
   HEAP32[$5 >> 2] = $10;
   HEAP32[$5 + 4 >> 2] = $4;
   HEAP8[$0 + 220 | 0] = 0;
   if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__29($0, $1)) {
    break label$3
   }
   HEAP8[$0 + 220 | 0] = 1;
   if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__29($0, $1)) {
    break label$3
   }
   HEAP8[$0 + 220 | 0] = 1;
   if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__29($0, $1)) {
    break label$3
   }
   HEAP8[$0 + 220 | 0] = 1;
   if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__29($0, $1)) {
    break label$3
   }
   HEAP8[$0 + 220 | 0] = 1;
   if (!btKinematicCharacterController__recoverFromPenetration_28btCollisionWorld__29($0, $1)) {
    break label$3
   }
   HEAP8[$0 + 220 | 0] = 1;
  }
  global$0 = $6 + 80 | 0;
 }
 
 function btKinematicCharacterController__canJump_28_29_20const($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 48 >> 2]]($0) | 0;
 }
 
 function btKinematicCharacterController__jump_28btVector3_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0;
  $4 = $0;
  $2 = HEAPF32[$1 >> 2];
  $3 = Math_fround($2 * $2);
  $2 = HEAPF32[$1 + 4 >> 2];
  $3 = Math_fround($3 + Math_fround($2 * $2));
  $2 = HEAPF32[$1 + 8 >> 2];
  $2 = Math_fround($3 + Math_fround($2 * $2));
  $3 = HEAPF32[$0 + 36 >> 2];
  label$1 : {
   if ($2 == Math_fround(0.0)) {
    break label$1
   }
   $3 = Math_fround(Math_sqrt($2));
  }
  $2 = $3;
  HEAPF32[$4 + 20 >> 2] = $2;
  HEAPF32[$0 + 32 >> 2] = $2;
  HEAP8[$0 + 249 | 0] = 1;
  $4 = $0 + 284 | 0;
  $2 = HEAPF32[$1 >> 2];
  $5 = HEAPF32[$1 + 4 >> 2];
  $6 = HEAPF32[$1 + 8 >> 2];
  $3 = Math_fround(Math_fround(Math_fround($2 * $2) + Math_fround($5 * $5)) + Math_fround($6 * $6));
  label$3 : {
   if ($3 == Math_fround(0.0)) {
    $6 = HEAPF32[$0 + 264 >> 2];
    $5 = HEAPF32[$0 + 260 >> 2];
    $2 = HEAPF32[$0 + 256 >> 2];
    $1 = $0 + 268 | 0;
    break label$3;
   }
   $3 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($3)));
   $6 = Math_fround($6 * $3);
   $5 = Math_fround($5 * $3);
   $2 = Math_fround($2 * $3);
   $1 = $1 + 12 | 0;
  }
  HEAP32[$4 >> 2] = HEAP32[$1 >> 2];
  HEAPF32[$0 + 280 >> 2] = $6;
  HEAPF32[$0 + 276 >> 2] = $5;
  HEAPF32[$0 + 272 >> 2] = $2;
  $1 = HEAP32[$0 + 8 >> 2];
  $7 = $1 + 52 | 0;
  $4 = HEAP32[$7 + 4 >> 2];
  HEAP32[$0 + 116 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$0 + 120 >> 2] = $4;
  $7 = $1 + 60 | 0;
  $1 = HEAP32[$7 >> 2];
  $4 = $0 + 124 | 0;
  $0 = HEAP32[$7 + 4 >> 2];
  HEAP32[$4 >> 2] = $1;
  HEAP32[$4 + 4 >> 2] = $0;
 }
 
 function btKinematicCharacterController__setGravity_28btVector3_20const__29($0, $1) {
  var $2 = Math_fround(0), $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $7 = $0;
  $2 = HEAPF32[$1 >> 2];
  $5 = HEAPF32[$1 + 4 >> 2];
  $6 = HEAPF32[$1 + 8 >> 2];
  $4 = Math_fround(Math_fround(Math_fround($2 * $2) + Math_fround($5 * $5)) + Math_fround($6 * $6));
  if (!!($4 > Math_fround(0.0))) {
   HEAP32[$3 + 12 >> 2] = 0;
   HEAPF32[$3 + 8 >> 2] = -$6;
   HEAPF32[$3 + 4 >> 2] = -$5;
   HEAPF32[$3 >> 2] = -$2;
   btKinematicCharacterController__setUpVector_28btVector3_20const__29($0, $3);
   $2 = HEAPF32[$1 >> 2];
   $4 = Math_fround($2 * $2);
   $2 = HEAPF32[$1 + 4 >> 2];
   $4 = Math_fround($4 + Math_fround($2 * $2));
   $2 = HEAPF32[$1 + 8 >> 2];
   $4 = Math_fround($4 + Math_fround($2 * $2));
  }
  HEAPF32[$7 + 52 >> 2] = Math_sqrt($4);
  global$0 = $3 + 16 | 0;
 }
 
 function btKinematicCharacterController__onGround_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  return (Math_fround(Math_abs(HEAPF32[$0 + 20 >> 2])) < Math_fround(1.1920928955078125e-07) ^ 1 ? $1 : Math_fround(Math_abs(HEAPF32[$0 + 24 >> 2])) < Math_fround(1.1920928955078125e-07)) | 0;
 }
 
 function btKinematicCharacterController__setUpInterpolate_28bool_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP8[$0 + 288 | 0] = $1;
 }
 
 function btKinematicCharacterController__updateAction_28btCollisionWorld__2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, $2);
 }
 
 function btKinematicClosestNotMeConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0);
  $5 = Math_fround(1.0);
  $3 = HEAP32[$1 >> 2];
  label$1 : {
   if (($3 | 0) == HEAP32[$0 + 84 >> 2]) {
    break label$1
   }
   if (HEAPU8[$3 + 204 | 0] & 4) {
    break label$1
   }
   label$2 : {
    if ($2) {
     $6 = HEAPF32[$1 + 16 >> 2];
     $7 = HEAPF32[$1 + 12 >> 2];
     $4 = HEAPF32[$1 + 8 >> 2];
     break label$2;
    }
    $4 = HEAPF32[$1 + 8 >> 2];
    $8 = HEAPF32[$1 + 12 >> 2];
    $9 = HEAPF32[$1 + 16 >> 2];
    $6 = Math_fround(Math_fround(Math_fround($4 * HEAPF32[$3 + 36 >> 2]) + Math_fround($8 * HEAPF32[$3 + 40 >> 2])) + Math_fround($9 * HEAPF32[$3 + 44 >> 2]));
    $7 = Math_fround(Math_fround(Math_fround($4 * HEAPF32[$3 + 20 >> 2]) + Math_fround($8 * HEAPF32[$3 + 24 >> 2])) + Math_fround($9 * HEAPF32[$3 + 28 >> 2]));
    $4 = Math_fround(Math_fround(Math_fround(HEAPF32[$3 + 4 >> 2] * $4) + Math_fround(HEAPF32[$3 + 8 >> 2] * $8)) + Math_fround(HEAPF32[$3 + 12 >> 2] * $9));
   }
   if (Math_fround(Math_fround(Math_fround($4 * HEAPF32[$0 + 88 >> 2]) + Math_fround($7 * HEAPF32[$0 + 92 >> 2])) + Math_fround($6 * HEAPF32[$0 + 96 >> 2])) < HEAPF32[$0 + 104 >> 2]) {
    break label$1
   }
   HEAP32[$0 + 80 >> 2] = $3;
   HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 40 >> 2];
   label$4 : {
    if ($2) {
     $3 = HEAP32[$1 + 12 >> 2];
     HEAP32[$0 + 48 >> 2] = HEAP32[$1 + 8 >> 2];
     HEAP32[$0 + 52 >> 2] = $3;
     $2 = $1 + 16 | 0;
     $10 = HEAP32[$2 >> 2];
     $2 = HEAP32[$2 + 4 >> 2];
     $3 = $0 + 56 | 0;
     HEAP32[$3 >> 2] = $10;
     HEAP32[$3 + 4 >> 2] = $2;
     break label$4;
    }
    $4 = HEAPF32[$3 + 8 >> 2];
    $8 = HEAPF32[$3 + 12 >> 2];
    $9 = HEAPF32[$3 + 20 >> 2];
    $11 = HEAPF32[$3 + 24 >> 2];
    $12 = HEAPF32[$3 + 28 >> 2];
    $13 = HEAPF32[$3 + 36 >> 2];
    $14 = HEAPF32[$3 + 40 >> 2];
    $5 = HEAPF32[$1 + 12 >> 2];
    $15 = HEAPF32[$3 + 44 >> 2];
    $6 = HEAPF32[$1 + 16 >> 2];
    $16 = HEAPF32[$3 + 4 >> 2];
    $7 = HEAPF32[$1 + 8 >> 2];
    HEAP32[$0 + 60 >> 2] = 0;
    HEAPF32[$0 + 56 >> 2] = Math_fround(Math_fround($7 * $13) + Math_fround($5 * $14)) + Math_fround($6 * $15);
    HEAPF32[$0 + 52 >> 2] = Math_fround(Math_fround($7 * $9) + Math_fround($5 * $11)) + Math_fround($6 * $12);
    HEAPF32[$0 + 48 >> 2] = Math_fround(Math_fround($16 * $7) + Math_fround($4 * $5)) + Math_fround($8 * $6);
   }
   $3 = HEAP32[$1 + 28 >> 2];
   HEAP32[$0 + 64 >> 2] = HEAP32[$1 + 24 >> 2];
   HEAP32[$0 + 68 >> 2] = $3;
   $2 = $1 + 32 | 0;
   $10 = HEAP32[$2 >> 2];
   $2 = HEAP32[$2 + 4 >> 2];
   $3 = $0 + 72 | 0;
   HEAP32[$3 >> 2] = $10;
   HEAP32[$3 + 4 >> 2] = $2;
   $5 = HEAPF32[$1 + 40 >> 2];
  }
  return Math_fround($5);
 }
 
 function btGImpactCollisionAlgorithm_RegisterAlgorithm($0) {
  $0 = $0 | 0;
  btGImpactCollisionAlgorithm__registerAlgorithm_28btCollisionDispatcher__29($0);
 }
 
 function btVector3_create($0, $1, $2) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  var $3 = 0;
  $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(16);
  HEAP32[$3 + 12 >> 2] = 0;
  HEAPF32[$3 + 8 >> 2] = $2;
  HEAPF32[$3 + 4 >> 2] = $1;
  HEAPF32[$3 >> 2] = $0;
  return $3 | 0;
 }
 
 function btVector3_setValue($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  HEAP32[$0 + 12 >> 2] = 0;
  HEAPF32[$0 + 8 >> 2] = $3;
  HEAPF32[$0 + 4 >> 2] = $2;
  HEAPF32[$0 >> 2] = $1;
 }
 
 function btVector3_x($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 >> 2]);
 }
 
 function btVector3_y($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 4 >> 2]);
 }
 
 function btVector3_z($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 8 >> 2]);
 }
 
 function btVector4_create($0, $1, $2, $3) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  var $4 = 0;
  $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(16);
  HEAPF32[$4 + 12 >> 2] = $3;
  HEAPF32[$4 + 8 >> 2] = $2;
  HEAPF32[$4 + 4 >> 2] = $1;
  HEAPF32[$4 >> 2] = $0;
  return $4 | 0;
 }
 
 function btVector4_setValue($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  HEAPF32[$0 + 12 >> 2] = $4;
  HEAPF32[$0 + 8 >> 2] = $3;
  HEAPF32[$0 + 4 >> 2] = $2;
  HEAPF32[$0 >> 2] = $1;
 }
 
 function btQuaternion_create($0, $1, $2, $3) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  var $4 = 0;
  $4 = operator_20new_28unsigned_20long_29(16);
  HEAPF32[$4 + 12 >> 2] = $3;
  HEAPF32[$4 + 8 >> 2] = $2;
  HEAPF32[$4 + 4 >> 2] = $1;
  HEAPF32[$4 >> 2] = $0;
  return $4 | 0;
 }
 
 function btQuaternion_w($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 12 >> 2]);
 }
 
 function btTransform_create() {
  return operator_20new_28unsigned_20long_29(64) | 0;
 }
 
 function btTransform_setOrigin($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 48 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 52 >> 2] = $2;
  $1 = $1 + 8 | 0;
  $2 = $0 + 56 | 0;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
 }
 
 function btTransform_setRotation($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0);
  $2 = HEAPF32[$1 + 12 >> 2];
  $7 = HEAPF32[$1 + 8 >> 2];
  $3 = HEAPF32[$1 >> 2];
  $4 = HEAPF32[$1 + 4 >> 2];
  HEAP32[$0 + 44 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  $5 = Math_fround(Math_fround(2.0) / Math_fround(Math_fround(Math_fround(Math_fround($3 * $3) + Math_fround($4 * $4)) + Math_fround($7 * $7)) + Math_fround($2 * $2)));
  $8 = Math_fround($7 * $5);
  $6 = Math_fround($4 * $8);
  $9 = Math_fround($3 * $5);
  $10 = Math_fround($2 * $9);
  HEAPF32[$0 + 36 >> 2] = $6 + $10;
  $11 = Math_fround($3 * $8);
  $5 = Math_fround($4 * $5);
  $12 = Math_fround($2 * $5);
  HEAPF32[$0 + 32 >> 2] = $11 - $12;
  HEAPF32[$0 + 24 >> 2] = $6 - $10;
  $6 = Math_fround($3 * $5);
  $2 = Math_fround($2 * $8);
  HEAPF32[$0 + 16 >> 2] = $6 + $2;
  HEAPF32[$0 + 8 >> 2] = $11 + $12;
  HEAPF32[$0 + 4 >> 2] = $6 - $2;
  $3 = Math_fround($3 * $9);
  $2 = Math_fround($4 * $5);
  HEAPF32[$0 + 40 >> 2] = Math_fround(1.0) - Math_fround($3 + $2);
  $4 = Math_fround($7 * $8);
  HEAPF32[$0 + 20 >> 2] = Math_fround(1.0) - Math_fround($3 + $4);
  HEAPF32[$0 >> 2] = Math_fround(1.0) - Math_fround($2 + $4);
 }
 
 function btTransform_getOrigin($0) {
  $0 = $0 | 0;
  return $0 + 48 | 0;
 }
 
 function btTransform_getRotation($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  btMatrix3x3__getRotation_28btQuaternion__29_20const($0, $1);
  $0 = $1 + 8 | 0;
  $3 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[0 + 2836 >> 2] = $3;
  HEAP32[$2 + 2840 >> 2] = $0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = 0;
  HEAP32[$0 + 2828 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 2832 >> 2] = $2;
  global$0 = $1 + 16 | 0;
  return 2828;
 }
 
 function btMatrix3x3__getRotation_28btQuaternion__29_20const($0, $1) {
  var $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0;
  $3 = global$0 - 16 | 0;
  $13 = $1;
  $2 = HEAPF32[$0 >> 2];
  $8 = HEAPF32[$0 + 20 >> 2];
  $5 = HEAPF32[$0 + 40 >> 2];
  $12 = Math_fround(Math_fround($2 + $8) + $5);
  label$1 : {
   if (!!($12 > Math_fround(0.0))) {
    $8 = Math_fround(Math_sqrt(Math_fround($12 + Math_fround(1.0))));
    $2 = Math_fround(Math_fround(.5) / $8);
    $5 = Math_fround($2 * Math_fround(HEAPF32[$0 + 16 >> 2] - HEAPF32[$0 + 4 >> 2]));
    HEAPF32[$3 + 8 >> 2] = $5;
    $4 = (wasm2js_scratch_store_f32($5), wasm2js_scratch_load_i32(0));
    $5 = Math_fround($2 * Math_fround(HEAPF32[$0 + 8 >> 2] - HEAPF32[$0 + 32 >> 2]));
    HEAPF32[$3 + 4 >> 2] = $5;
    $6 = (wasm2js_scratch_store_f32($5), wasm2js_scratch_load_i32(0));
    $2 = Math_fround($2 * Math_fround(HEAPF32[$0 + 36 >> 2] - HEAPF32[$0 + 24 >> 2]));
    HEAPF32[$3 >> 2] = $2;
    $0 = (wasm2js_scratch_store_f32($2), wasm2js_scratch_load_i32(0));
    $2 = Math_fround($8 * Math_fround(.5));
    HEAPF32[$3 + 12 >> 2] = $2;
    $9 = (wasm2js_scratch_store_f32($2), wasm2js_scratch_load_i32(0));
    break label$1;
   }
   $4 = $2 < $8 ? ($8 < $5 ? 2 : 1) : ($2 < $5) << 1;
   $6 = $4 << 2;
   $10 = ($4 << 4) + $0 | 0;
   $7 = ($4 + 1 >>> 0) % 3 | 0;
   $11 = ($7 << 4) + $0 | 0;
   $7 = $7 << 2;
   $9 = $0;
   $0 = ($4 + 2 >>> 0) % 3 | 0;
   $4 = $9 + ($0 << 4) | 0;
   $0 = $0 << 2;
   $2 = Math_fround(Math_sqrt(Math_fround(Math_fround(Math_fround(HEAPF32[$6 + $10 >> 2] - HEAPF32[$11 + $7 >> 2]) - HEAPF32[$4 + $0 >> 2]) + Math_fround(1.0))));
   HEAPF32[($6 | $3) >> 2] = $2 * Math_fround(.5);
   $2 = Math_fround(Math_fround(.5) / $2);
   HEAPF32[$3 + 12 >> 2] = Math_fround(HEAPF32[$4 + $7 >> 2] - HEAPF32[$0 + $11 >> 2]) * $2;
   HEAPF32[($3 | $7) >> 2] = $2 * Math_fround(HEAPF32[$6 + $11 >> 2] + HEAPF32[$7 + $10 >> 2]);
   HEAPF32[($0 | $3) >> 2] = $2 * Math_fround(HEAPF32[$4 + $6 >> 2] + HEAPF32[$0 + $10 >> 2]);
   $4 = HEAP32[$3 + 8 >> 2];
   $6 = HEAP32[$3 + 4 >> 2];
   $0 = HEAP32[$3 >> 2];
   $9 = HEAP32[$3 + 12 >> 2];
  }
  HEAP32[$13 + 12 >> 2] = $9;
  HEAP32[$1 + 8 >> 2] = $4;
  HEAP32[$1 + 4 >> 2] = $6;
  HEAP32[$1 >> 2] = $0;
 }
 
 function LayaMotionState_create() {
  var $0 = 0;
  $0 = operator_20new_28unsigned_20long_29(8);
  HEAP32[$0 >> 2] = 0;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 >> 2] = 24256;
  return $0 | 0;
 }
 
 function layaMotionState_set_rigidBodyID($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 4 >> 2] = $1;
 }
 
 function btCollisionObject_create() {
  var $0 = 0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(324);
  btCollisionObject__btCollisionObject_28_29($0);
  return $0 | 0;
 }
 
 function btCollisionObject_setContactProcessingThreshold($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAPF32[$0 + 184 >> 2] = $1 | 0;
 }
 
 function btCollisionObject_setActivationState($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  btCollisionObject__setActivationState_28int_29_20const($0, $1);
 }
 
 function btCollisionObject_forceActivationState($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 220 >> 2] = $1;
 }
 
 function btCollisionObject_activate($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  btCollisionObject__activate_28bool_29_20const($0, $1);
 }
 
 function btCollisionObject_isActive($0) {
  $0 = $0 | 0;
  $0 = HEAP32[$0 + 220 >> 2];
  return ($0 | 0) != 2 & ($0 | 0) != 5;
 }
 
 function btCollisionObject_setRestitution($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  HEAPF32[$0 + 232 >> 2] = $1;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
 }
 
 function btCollisionObject_setFriction($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  HEAPF32[$0 + 228 >> 2] = $1;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
 }
 
 function btCollisionObject_setRollingFriction($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  HEAPF32[$0 + 236 >> 2] = $1;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
 }
 
 function btCollisionObject_getCollisionFlags($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 204 >> 2];
 }
 
 function btCollisionObject_setCollisionFlags($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 204 >> 2] = $1;
 }
 
 function btCollisionObject_setCollisionShape($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 8 >> 2]]($0, $1);
 }
 
 function btCollisionObject_getCcdMotionThreshold($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 276 >> 2]);
 }
 
 function btCollisionObject_setCcdMotionThreshold($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  HEAPF32[$0 + 276 >> 2] = $1;
 }
 
 function btCollisionObject_getCcdSweptSphereRadius($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 272 >> 2]);
 }
 
 function btCollisionObject_setCcdSweptSphereRadius($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  HEAPF32[$0 + 272 >> 2] = $1;
 }
 
 function btCollisionObject_getUserIndex($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 264 >> 2];
 }
 
 function btCollisionObject_setUserIndex($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 264 >> 2] = $1;
 }
 
 function btCollisionObject_getActivationState($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 220 >> 2];
 }
 
 function btCollisionObject_setInterpolationAngularVelocity($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 148 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 152 >> 2] = $2;
  $1 = $1 + 8 | 0;
  $2 = $0 + 156 | 0;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
 }
 
 function btCollisionObject_setInterpolationLinearVelocity($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 132 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 136 >> 2] = $2;
  $1 = $1 + 8 | 0;
  $2 = $0 + 140 | 0;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
 }
 
 function RayResultCallback_hasHit($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 8 >> 2] != 0 | 0;
 }
 
 function RayResultCallback_set_m_collisionFilterGroup($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 12 >> 2] = $1;
 }
 
 function RayResultCallback_set_m_collisionFilterMask($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 16 >> 2] = $1;
 }
 
 function RayResultCallback_get_m_closestHitFraction($0) {
  $0 = $0 | 0;
  var $1 = Math_fround(0);
  $1 = HEAPF32[$0 + 4 >> 2];
  if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
   return ~~$1 | 0
  }
  return -2147483648;
 }
 
 function RayResultCallback_set_m_closestHitFraction($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAPF32[$0 + 4 >> 2] = $1 | 0;
 }
 
 function RayResultCallback_set_m_collisionObject($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 8 >> 2] = $1;
 }
 
 function ClosestRayResultCallback_create($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = operator_20new_28unsigned_20long_29(88);
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 1;
  HEAP32[$2 + 16 >> 2] = -1;
  HEAP32[$2 + 4 >> 2] = 1065353216;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 >> 2] = 24336;
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 24 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 28 >> 2] = $3;
  $0 = $0 + 8 | 0;
  $4 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $3 = $2 + 32 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $0;
  $0 = $1;
  $1 = HEAP32[$0 >> 2];
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 40 >> 2] = $1;
  HEAP32[$2 + 44 >> 2] = $3;
  $0 = $0 + 8 | 0;
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $3 = $2 + 48 | 0;
  HEAP32[$3 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $0;
  return $2 | 0;
 }
 
 function ClosestRayResultCallback_get_m_rayFromWorld($0) {
  $0 = $0 | 0;
  return $0 + 24 | 0;
 }
 
 function ClosestRayResultCallback_set_m_rayFromWorld($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 24 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 28 >> 2] = $2;
  $1 = $1 + 8 | 0;
  $2 = $0 + 32 | 0;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
 }
 
 function ClosestRayResultCallback_get_m_rayToWorld($0) {
  $0 = $0 | 0;
  return $0 + 40 | 0;
 }
 
 function ClosestRayResultCallback_set_m_rayToWorld($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 40 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 44 >> 2] = $2;
  $1 = $1 + 8 | 0;
  $2 = $0 + 48 | 0;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
 }
 
 function tBtCollisionObjectArray_size($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 4 >> 2];
 }
 
 function tBtCollisionObjectArray_at($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return HEAP32[HEAP32[$0 + 12 >> 2] + ($1 << 2) >> 2];
 }
 
 function tBtCollisionObjectArray_clear($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[$0 + 12 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 16 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 12 >> 2] = 0;
  }
  HEAP32[$0 + 12 >> 2] = 0;
  HEAP8[$0 + 16 | 0] = 1;
  HEAP32[$0 + 4 >> 2] = 0;
  HEAP32[$0 + 8 >> 2] = 0;
 }
 
 function tVector3Array_at($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return HEAP32[$0 + 12 >> 2] + ($1 << 4) | 0;
 }
 
 function tScalarArray_at($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0);
  $2 = HEAPF32[HEAP32[$0 + 12 >> 2] + ($1 << 2) >> 2];
  if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
   return ~~$2 | 0
  }
  return -2147483648;
 }
 
 function AllHitsRayResultCallback_create($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = operator_20new_28unsigned_20long_29(136);
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = 1;
  HEAP32[$2 + 16 >> 2] = -1;
  HEAP32[$2 + 4 >> 2] = 1065353216;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP8[$2 + 40 | 0] = 1;
  HEAP32[$2 >> 2] = 24468;
  HEAP32[$2 + 36 >> 2] = 0;
  HEAP32[$2 + 28 >> 2] = 0;
  HEAP32[$2 + 32 >> 2] = 0;
  HEAP8[$2 + 92 | 0] = 1;
  HEAP32[$2 + 88 >> 2] = 0;
  $3 = $0;
  $4 = HEAP32[$3 >> 2];
  $0 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 44 >> 2] = $4;
  HEAP32[$2 + 48 >> 2] = $0;
  $3 = $3 + 8 | 0;
  $4 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $0 = $2 + 52 | 0;
  HEAP32[$0 >> 2] = $4;
  HEAP32[$0 + 4 >> 2] = $3;
  $3 = $1;
  $1 = HEAP32[$3 >> 2];
  $0 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2 + 60 >> 2] = $1;
  HEAP32[$2 + 64 >> 2] = $0;
  $3 = $3 + 8 | 0;
  $1 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  $0 = $2 + 68 | 0;
  HEAP32[$0 >> 2] = $1;
  HEAP32[$0 + 4 >> 2] = $3;
  HEAP8[$2 + 112 | 0] = 1;
  HEAP32[$2 + 80 >> 2] = 0;
  HEAP32[$2 + 84 >> 2] = 0;
  HEAP32[$2 + 108 >> 2] = 0;
  HEAP32[$2 + 100 >> 2] = 0;
  HEAP32[$2 + 104 >> 2] = 0;
  HEAP8[$2 + 132 | 0] = 1;
  HEAP32[$2 + 128 >> 2] = 0;
  HEAP32[$2 + 120 >> 2] = 0;
  HEAP32[$2 + 124 >> 2] = 0;
  return $2 | 0;
 }
 
 function AllHitsRayResultCallback_get_m_rayFromWorld($0) {
  $0 = $0 | 0;
  return $0 + 44 | 0;
 }
 
 function AllHitsRayResultCallback_set_m_rayFromWorld($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 44 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 48 >> 2] = $2;
  $1 = $1 + 8 | 0;
  $2 = $0 + 52 | 0;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
 }
 
 function AllHitsRayResultCallback_get_m_rayToWorld($0) {
  $0 = $0 | 0;
  return $0 + 60 | 0;
 }
 
 function AllHitsRayResultCallback_set_m_rayToWorld($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 60 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 64 >> 2] = $2;
  $1 = $1 + 8 | 0;
  $2 = $0 + 68 | 0;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
 }
 
 function AllHitsRayResultCallback_get_m_hitPointWorld($0) {
  $0 = $0 | 0;
  return $0 + 96 | 0;
 }
 
 function AllHitsRayResultCallback_get_m_hitNormalWorld($0) {
  $0 = $0 | 0;
  return $0 + 76 | 0;
 }
 
 function AllHitsRayResultCallback_get_m_hitFractions($0) {
  $0 = $0 | 0;
  return $0 + 116 | 0;
 }
 
 function btManifoldPoint_get_m_positionWorldOnB($0) {
  $0 = $0 | 0;
  return $0 + 32 | 0;
 }
 
 function btManifoldPoint_get_m_normalWorldOnB($0) {
  $0 = $0 | 0;
  return $0 - -64 | 0;
 }
 
 function btManifoldPoint_getDistance($0) {
  $0 = $0 | 0;
  var $1 = Math_fround(0);
  $1 = HEAPF32[$0 + 80 >> 2];
  if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
   return ~~$1 | 0
  }
  return -2147483648;
 }
 
 function ConvexResultCallback_hasHit($0) {
  $0 = $0 | 0;
  return HEAPF32[$0 + 4 >> 2] < Math_fround(1.0) | 0;
 }
 
 function ClosestConvexResultCallback_create($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = operator_20new_28unsigned_20long_29(84);
  HEAP32[$2 + 12 >> 2] = -1;
  HEAP32[$2 + 4 >> 2] = 1065353216;
  HEAP32[$2 + 8 >> 2] = 1;
  HEAP32[$2 >> 2] = 24552;
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 16 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 20 >> 2] = $3;
  $0 = $0 + 8 | 0;
  $4 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $3 = $2 + 24 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $0;
  $0 = $1;
  $1 = HEAP32[$0 >> 2];
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 32 >> 2] = $1;
  HEAP32[$2 + 36 >> 2] = $3;
  $0 = $0 + 8 | 0;
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $3 = $2 + 40 | 0;
  HEAP32[$3 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $0;
  HEAP32[$2 + 80 >> 2] = 0;
  return $2 | 0;
 }
 
 function ClosestConvexResultCallback_get_m_hitCollisionObject($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 80 >> 2];
 }
 
 function ClosestConvexResultCallback_set_m_hitCollisionObject($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 80 >> 2] = $1;
 }
 
 function AllConvexResultCallback_create($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = operator_20new_28unsigned_20long_29(128);
  HEAP32[$2 + 20 >> 2] = 0;
  HEAP32[$2 + 24 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = -1;
  HEAP32[$2 + 4 >> 2] = 1065353216;
  HEAP32[$2 + 8 >> 2] = 1;
  HEAP8[$2 + 32 | 0] = 1;
  HEAP32[$2 >> 2] = 24692;
  HEAP32[$2 + 28 >> 2] = 0;
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 36 >> 2] = HEAP32[$0 >> 2];
  HEAP32[$2 + 40 >> 2] = $3;
  $0 = $0 + 8 | 0;
  $4 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  $3 = $2 + 44 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $0;
  $0 = $1;
  $1 = HEAP32[$0 >> 2];
  $3 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 52 >> 2] = $1;
  HEAP32[$2 + 56 >> 2] = $3;
  $0 = $0 + 8 | 0;
  $1 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[$2 + 80 >> 2] = 0;
  HEAP32[$2 + 72 >> 2] = 0;
  HEAP32[$2 + 76 >> 2] = 0;
  HEAP32[$2 + 100 >> 2] = 0;
  HEAP32[$2 + 112 >> 2] = 0;
  HEAP32[$2 + 116 >> 2] = 0;
  HEAP32[$2 + 120 >> 2] = 0;
  HEAP8[$2 + 124 | 0] = 1;
  HEAP8[$2 + 104 | 0] = 1;
  HEAP8[$2 + 84 | 0] = 1;
  HEAP32[$2 + 92 >> 2] = 0;
  HEAP32[$2 + 96 >> 2] = 0;
  $3 = $2 + 60 | 0;
  HEAP32[$3 >> 2] = $1;
  HEAP32[$3 + 4 >> 2] = $0;
  return $2 | 0;
 }
 
 function AllConvexResultCallback_get_m_hitNormalWorld($0) {
  $0 = $0 | 0;
  return $0 + 68 | 0;
 }
 
 function AllConvexResultCallback_get_m_hitPointWorld($0) {
  $0 = $0 | 0;
  return $0 + 88 | 0;
 }
 
 function AllConvexResultCallback_get_m_hitFractions($0) {
  $0 = $0 | 0;
  return $0 + 108 | 0;
 }
 
 function btCollisionShape_getLocalScaling($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0) | 0;
 }
 
 function btCollisionShape_setLocalScaling($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 24 >> 2]]($0, $1);
 }
 
 function btCollisionShape_calculateLocalInertia($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1, $2);
 }
 
 function btBoxShape_create($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(60);
  btBoxShape__btBoxShape_28btVector3_20const__29($1, $0);
  return $1 | 0;
 }
 
 function btCapsuleShape_create($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  var $2 = 0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(60);
  btCapsuleShape__btCapsuleShape_28float_2c_20float_29($2, $0, $1);
  return $2 | 0;
 }
 
 function btCapsuleShapeX_create($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  var $2 = 0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(60);
  btCapsuleShapeX__btCapsuleShapeX_28float_2c_20float_29($2, $0, $1);
  return $2 | 0;
 }
 
 function btCapsuleShapeZ_create($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  var $2 = 0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(60);
  btCapsuleShapeZ__btCapsuleShapeZ_28float_2c_20float_29($2, $0, $1);
  return $2 | 0;
 }
 
 function btCylinderShape_create($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(60);
  btCylinderShape__btCylinderShape_28btVector3_20const__29($1, $0);
  return $1 | 0;
 }
 
 function btCylinderShapeX_create($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(60);
  btCylinderShapeX__btCylinderShapeX_28btVector3_20const__29($1, $0);
  return $1 | 0;
 }
 
 function btCylinderShapeZ_create($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(60);
  btCylinderShapeZ__btCylinderShapeZ_28btVector3_20const__29($1, $0);
  return $1 | 0;
 }
 
 function btSphereShape_create($0) {
  $0 = Math_fround($0);
  var $1 = 0, $2 = 0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(56);
  btConvexInternalShape__btConvexInternalShape_28_29($1);
  HEAP32[$1 + 28 >> 2] = 0;
  HEAP32[$1 + 32 >> 2] = 0;
  HEAP32[$1 + 24 >> 2] = 1065353216;
  HEAP32[$1 + 16 >> 2] = 1065353216;
  HEAP32[$1 + 20 >> 2] = 1065353216;
  HEAP32[$1 + 4 >> 2] = 8;
  HEAP32[$1 >> 2] = 9852;
  $2 = $1 + 36 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$1 + 44 >> 2] = 0;
  HEAP32[$1 + 52 >> 2] = 0;
  HEAPF32[$1 + 48 >> 2] = $0;
  HEAPF32[$1 + 32 >> 2] = $0;
  return $1 | 0;
 }
 
 function btConeShape_create($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  var $2 = 0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(80);
  btConeShape__btConeShape_28float_2c_20float_29($2, $0, $1);
  return $2 | 0;
 }
 
 function btConeShapeX_create($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  var $2 = 0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(80);
  btConeShapeX__btConeShapeX_28float_2c_20float_29($2, $0, $1);
  return $2 | 0;
 }
 
 function btConeShapeZ_create($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  var $2 = 0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(80);
  btConeShapeZ__btConeShapeZ_28float_2c_20float_29($2, $0, $1);
  return $2 | 0;
 }
 
 function btStaticPlaneShape_create($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0;
  $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(88);
  btStaticPlaneShape__btStaticPlaneShape_28btVector3_20const__2c_20float_29($2, $0, $1);
  return $2 | 0;
 }
 
 function btGImpactShapeInterface_updateBound($0) {
  $0 = $0 | 0;
  if (HEAPU8[$0 + 52 | 0]) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 68 >> 2]]($0);
   HEAP8[$0 + 52 | 0] = 0;
  }
 }
 
 function btGImpactMeshShape_create($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(172);
  btGImpactMeshShape__btGImpactMeshShape_28btStridingMeshInterface__29($1, $0);
  return $1 | 0;
 }
 
 function btGImpactMeshShape__btGImpactMeshShape_28btStridingMeshInterface__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  btConcaveShape__btConcaveShape_28_29($0);
  $2 = $0 - -64 | 0;
  HEAP32[$2 >> 2] = 1065353216;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 56 >> 2] = 1065353216;
  HEAP32[$0 + 60 >> 2] = 1065353216;
  $2 = $0 + 36 | 0;
  HEAP32[$2 >> 2] = -8388609;
  HEAP32[$2 + 4 >> 2] = -8388609;
  HEAP32[$0 + 20 >> 2] = 2139095039;
  HEAP32[$0 + 24 >> 2] = 2139095039;
  HEAP32[$0 >> 2] = 10820;
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP8[$0 + 92 | 0] = 1;
  $2 = $0 + 80 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 144 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP8[$0 + 52 | 0] = 1;
  HEAP32[$0 + 44 >> 2] = -8388609;
  HEAP32[$0 + 28 >> 2] = 2139095039;
  HEAP32[$0 + 4 >> 2] = 25;
  HEAP8[$0 + 168 | 0] = 1;
  HEAP32[$0 + 164 >> 2] = 0;
  $2 = $0 + 156 | 0;
  HEAP32[$2 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$0 + 148 >> 2] = $1;
  if ((FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1) | 0) >= 1) {
   while (1) {
    $8 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(216);
    btGImpactMeshShapePart__btGImpactMeshShapePart_28btStridingMeshInterface__2c_20int_29($8, $1, $5);
    $2 = HEAP32[$0 + 156 >> 2];
    label$3 : {
     if (($2 | 0) != HEAP32[$0 + 160 >> 2]) {
      break label$3
     }
     $4 = $2 ? $2 << 1 : 1;
     if (($2 | 0) >= ($4 | 0)) {
      break label$3
     }
     label$4 : {
      if (!$4) {
       $6 = 0;
       break label$4;
      }
      $6 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($4 << 2);
      $2 = HEAP32[$0 + 156 >> 2];
     }
     if (($2 | 0) >= 1) {
      $3 = 0;
      $7 = $2;
      while (1) {
       HEAP32[$3 + $6 >> 2] = HEAP32[$3 + HEAP32[$0 + 164 >> 2] >> 2];
       $3 = $3 + 4 | 0;
       $7 = $7 + -1 | 0;
       if ($7) {
        continue
       }
       break;
      };
     }
     $3 = HEAP32[$0 + 164 >> 2];
     if ($3) {
      if (HEAPU8[$0 + 168 | 0]) {
       btAlignedFreeInternal_28void__29($3);
       $2 = HEAP32[$0 + 156 >> 2];
      }
      HEAP32[$0 + 164 >> 2] = 0;
     }
     HEAP32[$0 + 164 >> 2] = $6;
     HEAP8[$0 + 168 | 0] = 1;
     HEAP32[$0 + 160 >> 2] = $4;
    }
    HEAP32[$0 + 156 >> 2] = $2 + 1;
    HEAP32[HEAP32[$0 + 164 >> 2] + ($2 << 2) >> 2] = $8;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < (FUNCTION_TABLE[HEAP32[HEAP32[$1 >> 2] + 28 >> 2]]($1) | 0)) {
     continue
    }
    break;
   }
  }
 }
 
 function btCompoundShape_create($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(96);
  btCompoundShape__btCompoundShape_28bool_2c_20int_29($1, $0);
  return $1 | 0;
 }
 
 function btCompoundShape_addChildShape($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  btCompoundShape__addChildShape_28btTransform_20const__2c_20btCollisionShape__29($0, $1, $2);
 }
 
 function btCompoundShape_removeChildShapeByIndex($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  btCompoundShape__removeChildShapeByIndex_28int_29($0, $1);
 }
 
 function btCompoundShape_getChildShape($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return HEAP32[(HEAP32[$0 + 28 >> 2] + Math_imul($1, 80) | 0) + 64 >> 2];
 }
 
 function btCompoundShape_updateChildTransform($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  btCompoundShape__updateChildTransform_28int_2c_20btTransform_20const__2c_20bool_29($0, $1, $2, $3);
 }
 
 function btTriangleMesh_create() {
  var $0 = 0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(172);
  btTriangleMesh__btTriangleMesh_28bool_2c_20bool_29($0);
  return $0 | 0;
 }
 
 function btTriangleMesh_addTriangle($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  btTriangleMesh__addTriangle_28btVector3_20const__2c_20btVector3_20const__2c_20btVector3_20const__2c_20bool_29($0, $1, $2, $3, $4);
 }
 
 function btDefaultCollisionConfiguration_create() {
  var $0 = 0, $1 = 0;
  $0 = global$0 - 32 | 0;
  global$0 = $0;
  $1 = operator_20new_28unsigned_20long_29(88);
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 1;
  HEAP32[$0 + 16 >> 2] = 4096;
  HEAP32[$0 + 20 >> 2] = 4096;
  HEAP32[$0 + 8 >> 2] = 0;
  HEAP32[$0 + 12 >> 2] = 0;
  btDefaultCollisionConfiguration__btDefaultCollisionConfiguration_28btDefaultCollisionConstructionInfo_20const__29($1, $0 + 8 | 0);
  global$0 = $0 + 32 | 0;
  return $1 | 0;
 }
 
 function btPersistentManifold_getBody0($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 772 >> 2];
 }
 
 function btPersistentManifold_getBody1($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 776 >> 2];
 }
 
 function btPersistentManifold_getNumContacts($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 780 >> 2];
 }
 
 function btPersistentManifold_getContactPoint($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return (Math_imul($1, 192) + $0 | 0) + 4 | 0;
 }
 
 function btDispatcher_getNumManifolds($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0) | 0;
 }
 
 function btDispatcher_getManifoldByIndexInternal($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $1) | 0;
 }
 
 function btCollisionDispatcher_create($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = operator_20new_28unsigned_20long_29(10448);
  btCollisionDispatcher__btCollisionDispatcher_28btCollisionConfiguration__29($1, $0);
  return $1 | 0;
 }
 
 function btOverlappingPairCache_setInternalGhostPairCallback($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 60 >> 2]]($0, $1);
 }
 
 function btDbvtBroadphase_create() {
  var $0 = 0;
  $0 = operator_20new_28unsigned_20long_29(176);
  btDbvtBroadphase__btDbvtBroadphase_28btOverlappingPairCache__29($0);
  return $0 | 0;
 }
 
 function btRigidBodyConstructionInfo_create($0, $1, $2, $3) {
  $0 = Math_fround($0);
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = operator_20new_28unsigned_20long_29(144);
  HEAP32[$4 + 72 >> 2] = $2;
  HEAP32[$4 + 4 >> 2] = $1;
  HEAPF32[$4 >> 2] = $0;
  $1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4 + 76 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4 + 80 >> 2] = $1;
  $3 = $3 + 8 | 0;
  $2 = HEAP32[$3 + 4 >> 2];
  $1 = $4 + 84 | 0;
  HEAP32[$1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1 + 4 >> 2] = $2;
  HEAP32[$4 + 136 >> 2] = 1008981770;
  HEAP32[$4 + 140 >> 2] = 1008981770;
  HEAP32[$4 + 128 >> 2] = 1000593162;
  HEAP32[$4 + 132 >> 2] = 1008981770;
  HEAP8[$4 + 124 | 0] = 0;
  HEAP32[$4 + 116 >> 2] = 1061997773;
  HEAP32[$4 + 120 >> 2] = 1065353216;
  HEAP32[$4 + 108 >> 2] = 0;
  HEAP32[$4 + 112 >> 2] = 0;
  HEAP32[$4 + 100 >> 2] = 1056964608;
  HEAP32[$4 + 104 >> 2] = 0;
  HEAP32[$4 + 92 >> 2] = 0;
  HEAP32[$4 + 96 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 1065353216;
  $1 = $4 + 20 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$4 + 12 >> 2] = 0;
  HEAP32[$4 + 16 >> 2] = 0;
  HEAP32[$4 + 28 >> 2] = 1065353216;
  $1 = $4 + 40 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$4 + 32 >> 2] = 0;
  HEAP32[$4 + 36 >> 2] = 0;
  HEAP32[$4 + 48 >> 2] = 1065353216;
  HEAP32[$4 + 68 >> 2] = 0;
  $1 = $4 + 60 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$4 + 52 >> 2] = 0;
  HEAP32[$4 + 56 >> 2] = 0;
  return $4 | 0;
 }
 
 function btRigidBodyConstructionInfo_destroy($0) {
  $0 = $0 | 0;
  if ($0) {
   operator_20delete_28void__29($0)
  }
 }
 
 function btRigidBody_create($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(676);
  btRigidBody__btRigidBody_28btRigidBody__btRigidBodyConstructionInfo_20const__29($1, $0);
  return $1 | 0;
 }
 
 function btRigidBody_setSleepingThresholds($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  HEAPF32[$0 + 536 >> 2] = $2;
  HEAPF32[$0 + 532 >> 2] = $1;
 }
 
 function btRigidBody_getLinearSleepingThreshold($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 532 >> 2]);
 }
 
 function btRigidBody_getAngularSleepingThreshold($0) {
  $0 = $0 | 0;
  return Math_fround(HEAPF32[$0 + 536 >> 2]);
 }
 
 function btRigidBody_setDamping($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  btRigidBody__setDamping_28float_2c_20float_29($0, $1, $2);
 }
 
 function btRigidBody_setMassProps($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  btRigidBody__setMassProps_28float_2c_20btVector3_20const__29($0, $1, $2);
 }
 
 function btRigidBody_setLinearFactor($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = Math_fround(0), $4 = 0;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 408 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 412 >> 2] = $2;
  $1 = $1 + 8 | 0;
  $4 = HEAP32[$1 >> 2];
  $1 = HEAP32[$1 + 4 >> 2];
  $2 = $0 + 416 | 0;
  HEAP32[$2 >> 2] = $4;
  HEAP32[$2 + 4 >> 2] = $1;
  HEAP32[$0 + 632 >> 2] = 0;
  $3 = HEAPF32[$0 + 404 >> 2];
  HEAPF32[$0 + 624 >> 2] = $3 * HEAPF32[$0 + 412 >> 2];
  HEAPF32[$0 + 620 >> 2] = $3 * HEAPF32[$0 + 408 >> 2];
  HEAPF32[$0 + 628 >> 2] = $3 * HEAPF32[$2 >> 2];
 }
 
 function btRigidBody_applyTorque($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = Math_fround(0);
  $2 = HEAPF32[$1 + 8 >> 2];
  $3 = HEAPF32[$1 + 4 >> 2];
  HEAPF32[$0 + 488 >> 2] = Math_fround(HEAPF32[$1 >> 2] * HEAPF32[$0 + 604 >> 2]) + HEAPF32[$0 + 488 >> 2];
  $1 = $0 + 492 | 0;
  HEAPF32[$1 >> 2] = Math_fround($3 * HEAPF32[$0 + 608 >> 2]) + HEAPF32[$1 >> 2];
  $1 = $0 + 496 | 0;
  HEAPF32[$1 >> 2] = Math_fround($2 * HEAPF32[$0 + 612 >> 2]) + HEAPF32[$1 >> 2];
 }
 
 function btRigidBody_applyForce($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  $7 = HEAPF32[$1 + 8 >> 2];
  $3 = HEAPF32[$1 + 4 >> 2];
  $4 = HEAPF32[$0 + 408 >> 2];
  HEAPF32[$0 + 472 >> 2] = Math_fround(HEAPF32[$1 >> 2] * $4) + HEAPF32[$0 + 472 >> 2];
  $5 = $0 + 476 | 0;
  $6 = HEAPF32[$0 + 412 >> 2];
  HEAPF32[$5 >> 2] = Math_fround($3 * $6) + HEAPF32[$5 >> 2];
  $5 = $0 + 480 | 0;
  $3 = HEAPF32[$0 + 416 >> 2];
  HEAPF32[$5 >> 2] = Math_fround($7 * $3) + HEAPF32[$5 >> 2];
  $10 = HEAPF32[$1 >> 2];
  $7 = HEAPF32[$2 >> 2];
  $8 = HEAPF32[$2 + 4 >> 2];
  $3 = Math_fround($3 * HEAPF32[$1 + 8 >> 2]);
  $6 = Math_fround($6 * HEAPF32[$1 + 4 >> 2]);
  $9 = HEAPF32[$2 + 8 >> 2];
  HEAPF32[$0 + 488 >> 2] = Math_fround(Math_fround(Math_fround($8 * $3) - Math_fround($6 * $9)) * HEAPF32[$0 + 604 >> 2]) + HEAPF32[$0 + 488 >> 2];
  $11 = HEAPF32[$0 + 612 >> 2];
  $1 = $0 + 492 | 0;
  $4 = Math_fround($4 * $10);
  HEAPF32[$1 >> 2] = Math_fround(Math_fround(Math_fround($9 * $4) - Math_fround($3 * $7)) * HEAPF32[$0 + 608 >> 2]) + HEAPF32[$1 >> 2];
  $0 = $0 + 496 | 0;
  HEAPF32[$0 >> 2] = Math_fround($11 * Math_fround(Math_fround($6 * $7) - Math_fround($4 * $8))) + HEAPF32[$0 >> 2];
 }
 
 function btRigidBody_applyCentralForce($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = Math_fround(0);
  $2 = HEAPF32[$1 + 8 >> 2];
  $3 = HEAPF32[$1 + 4 >> 2];
  HEAPF32[$0 + 472 >> 2] = Math_fround(HEAPF32[$1 >> 2] * HEAPF32[$0 + 408 >> 2]) + HEAPF32[$0 + 472 >> 2];
  $1 = $0 + 476 | 0;
  HEAPF32[$1 >> 2] = Math_fround($3 * HEAPF32[$0 + 412 >> 2]) + HEAPF32[$1 >> 2];
  $1 = $0 + 480 | 0;
  HEAPF32[$1 >> 2] = Math_fround($2 * HEAPF32[$0 + 416 >> 2]) + HEAPF32[$1 >> 2];
 }
 
 function btRigidBody_applyTorqueImpulse($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0);
  $2 = HEAPF32[$1 >> 2];
  $3 = HEAPF32[$1 + 4 >> 2];
  $4 = HEAPF32[$1 + 8 >> 2];
  HEAPF32[$0 + 388 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 324 >> 2] * $2) + Math_fround(HEAPF32[$0 + 328 >> 2] * $3)) + Math_fround(HEAPF32[$0 + 332 >> 2] * $4)) * HEAPF32[$0 + 604 >> 2]) + HEAPF32[$0 + 388 >> 2];
  $1 = $0 + 392 | 0;
  HEAPF32[$1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($2 * HEAPF32[$0 + 340 >> 2]) + Math_fround($3 * HEAPF32[$0 + 344 >> 2])) + Math_fround($4 * HEAPF32[$0 + 348 >> 2])) * HEAPF32[$0 + 608 >> 2]) + HEAPF32[$1 >> 2];
  $1 = $0 + 396 | 0;
  HEAPF32[$1 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround($2 * HEAPF32[$0 + 356 >> 2]) + Math_fround($3 * HEAPF32[$0 + 360 >> 2])) + Math_fround($4 * HEAPF32[$0 + 364 >> 2])) * HEAPF32[$0 + 612 >> 2]) + HEAPF32[$1 >> 2];
 }
 
 function btRigidBody_applyImpulse($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29($0, $1, $2);
 }
 
 function btRigidBody__applyImpulse_28btVector3_20const__2c_20btVector3_20const__29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0);
  $4 = HEAPF32[$0 + 404 >> 2];
  if ($4 != Math_fround(0.0)) {
   $5 = HEAPF32[$1 + 8 >> 2];
   $3 = HEAPF32[$1 + 4 >> 2];
   $7 = HEAPF32[$0 + 408 >> 2];
   HEAPF32[$0 + 372 >> 2] = Math_fround($4 * Math_fround(HEAPF32[$1 >> 2] * $7)) + HEAPF32[$0 + 372 >> 2];
   $8 = $0 + 376 | 0;
   $6 = HEAPF32[$0 + 412 >> 2];
   HEAPF32[$8 >> 2] = Math_fround($4 * Math_fround($3 * $6)) + HEAPF32[$8 >> 2];
   $8 = $0 + 380 | 0;
   $3 = HEAPF32[$0 + 416 >> 2];
   HEAPF32[$8 >> 2] = Math_fround($4 * Math_fround($5 * $3)) + HEAPF32[$8 >> 2];
   $10 = HEAPF32[$0 + 612 >> 2];
   $11 = HEAPF32[$0 + 364 >> 2];
   $12 = HEAPF32[$0 + 356 >> 2];
   $13 = HEAPF32[$0 + 360 >> 2];
   $14 = HEAPF32[$0 + 608 >> 2];
   $15 = HEAPF32[$0 + 348 >> 2];
   $16 = HEAPF32[$0 + 340 >> 2];
   $17 = HEAPF32[$0 + 344 >> 2];
   $9 = HEAPF32[$2 + 4 >> 2];
   $5 = Math_fround($3 * HEAPF32[$1 + 8 >> 2]);
   $3 = Math_fround($6 * HEAPF32[$1 + 4 >> 2]);
   $6 = HEAPF32[$2 + 8 >> 2];
   $4 = Math_fround(Math_fround($9 * $5) - Math_fround($3 * $6));
   $7 = Math_fround($7 * HEAPF32[$1 >> 2]);
   $18 = Math_fround($7 * $6);
   $6 = HEAPF32[$2 >> 2];
   $5 = Math_fround($18 - Math_fround($5 * $6));
   $3 = Math_fround(Math_fround($3 * $6) - Math_fround($7 * $9));
   HEAPF32[$0 + 388 >> 2] = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0 + 324 >> 2] * $4) + Math_fround(HEAPF32[$0 + 328 >> 2] * $5)) + Math_fround($3 * HEAPF32[$0 + 332 >> 2])) * HEAPF32[$0 + 604 >> 2]) + HEAPF32[$0 + 388 >> 2];
   $1 = $0 + 392 | 0;
   HEAPF32[$1 >> 2] = Math_fround($14 * Math_fround(Math_fround(Math_fround($4 * $16) + Math_fround($5 * $17)) + Math_fround($3 * $15))) + HEAPF32[$1 >> 2];
   $0 = $0 + 396 | 0;
   HEAPF32[$0 >> 2] = Math_fround($10 * Math_fround(Math_fround(Math_fround($4 * $12) + Math_fround($5 * $13)) + Math_fround($3 * $11))) + HEAPF32[$0 >> 2];
  }
 }
 
 function btRigidBody_applyCentralImpulse($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0);
  $3 = HEAPF32[$1 + 8 >> 2];
  $4 = HEAPF32[$1 + 4 >> 2];
  $2 = HEAPF32[$0 + 404 >> 2];
  HEAPF32[$0 + 372 >> 2] = Math_fround(Math_fround(HEAPF32[$1 >> 2] * HEAPF32[$0 + 408 >> 2]) * $2) + HEAPF32[$0 + 372 >> 2];
  $1 = $0 + 376 | 0;
  HEAPF32[$1 >> 2] = Math_fround($2 * Math_fround($4 * HEAPF32[$0 + 412 >> 2])) + HEAPF32[$1 >> 2];
  $1 = $0 + 380 | 0;
  HEAPF32[$1 >> 2] = Math_fround($2 * Math_fround($3 * HEAPF32[$0 + 416 >> 2])) + HEAPF32[$1 >> 2];
 }
 
 function btRigidBody_updateInertiaTensor($0) {
  $0 = $0 | 0;
  btRigidBody__updateInertiaTensor_28_29($0);
 }
 
 function btRigidBody_getLinearVelocity($0) {
  $0 = $0 | 0;
  return $0 + 372 | 0;
 }
 
 function btRigidBody_getAngularVelocity($0) {
  $0 = $0 | 0;
  return $0 + 388 | 0;
 }
 
 function btRigidBody_setLinearVelocity($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 372 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 376 >> 2] = $2;
  $1 = $1 + 8 | 0;
  $2 = $0 + 380 | 0;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
 }
 
 function btRigidBody_setAngularVelocity($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 388 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 392 >> 2] = $2;
  $1 = $1 + 8 | 0;
  $2 = $0 + 396 | 0;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
 }
 
 function btRigidBody_setAngularFactor($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  HEAP32[$0 + 304 >> 2] = HEAP32[$0 + 304 >> 2] + 1;
  $2 = HEAP32[$1 + 4 >> 2];
  HEAP32[$0 + 604 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 608 >> 2] = $2;
  $1 = $1 + 8 | 0;
  $2 = $0 + 612 | 0;
  $0 = HEAP32[$1 + 4 >> 2];
  HEAP32[$2 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$2 + 4 >> 2] = $0;
 }
 
 function btRigidBody_getGravity($0) {
  $0 = $0 | 0;
  return $0 + 440 | 0;
 }
 
 function btRigidBody_setGravity($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  btRigidBody__setGravity_28btVector3_20const__29($0, $1);
 }
 
 function btRigidBody_getTotalForce($0) {
  $0 = $0 | 0;
  return $0 + 472 | 0;
 }
 
 function btRigidBody_getTotalTorque($0) {
  $0 = $0 | 0;
  return $0 + 488 | 0;
 }
 
 function btRigidBody_getFlags($0) {
  $0 = $0 | 0;
  return HEAP32[$0 + 564 >> 2];
 }
 
 function btRigidBody_setFlags($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP32[$0 + 564 >> 2] = $1;
 }
 
 function btRigidBody_clearForces($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 + 472 >> 2] = 0;
  HEAP32[$0 + 476 >> 2] = 0;
  $1 = $0 + 496 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 488 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  $1 = $0 + 480 | 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
 }
 
 function btSequentialImpulseConstraintSolver_create() {
  var $0 = 0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(236);
  btSequentialImpulseConstraintSolver__btSequentialImpulseConstraintSolver_28_29($0);
  return $0 | 0;
 }
 
 function btCollisionWorld_get_m_useContinuous($0) {
  $0 = $0 | 0;
  return HEAPU8[$0 + 16 | 0];
 }
 
 function btCollisionWorld_set_m_useContinuous($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP8[$0 + 16 | 0] = $1;
 }
 
 function btCollisionWorld_rayTest($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1, $2, $3);
 }
 
 function btCollisionWorld_getDispatchInfo($0) {
  $0 = $0 | 0;
  return $0 + 28 | 0;
 }
 
 function btCollisionWorld_addCollisionObject($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 36 >> 2]]($0, $1, $2, $3);
 }
 
 function btCollisionWorld_removeCollisionObject($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 40 >> 2]]($0, $1);
 }
 
 function btCollisionWorld_convexSweepTest($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = Math_fround($5);
  btCollisionWorld__convexSweepTest_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29_20const($0, $1, $2, $3, $4, $5);
 }
 
 function btDynamicsWorld_getSolverInfo($0) {
  $0 = $0 | 0;
  return $0 + 92 | 0;
 }
 
 function btDiscreteDynamicsWorld_create($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $3 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(344);
  btDiscreteDynamicsWorld__btDiscreteDynamicsWorld_28btDispatcher__2c_20btBroadphaseInterface__2c_20btConstraintSolver__2c_20btCollisionConfiguration__29($3, $0, $1, $2);
  return $3 | 0;
 }
 
 function btDiscreteDynamicsWorld_setGravity($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 72 >> 2]]($0, $1);
 }
 
 function btDiscreteDynamicsWorld_getGravity($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = global$0 - 16 | 0;
  global$0 = $1;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 76 >> 2]]($1, $0);
  $0 = $1 + 8 | 0;
  $3 = HEAP32[$0 >> 2];
  $0 = HEAP32[$0 + 4 >> 2];
  HEAP32[0 + 2820 >> 2] = $3;
  HEAP32[$2 + 2824 >> 2] = $0;
  $2 = HEAP32[$1 + 4 >> 2];
  $0 = 0;
  HEAP32[$0 + 2812 >> 2] = HEAP32[$1 >> 2];
  HEAP32[$0 + 2816 >> 2] = $2;
  global$0 = $1 + 16 | 0;
  return 2812;
 }
 
 function btDiscreteDynamicsWorld_addRigidBody($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 88 >> 2]]($0, $1, $2, $3);
 }
 
 function btDiscreteDynamicsWorld_removeRigidBody($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 92 >> 2]]($0, $1);
 }
 
 function btDiscreteDynamicsWorld_stepSimulation($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  $3 = Math_fround($3);
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 52 >> 2]]($0, $1, $2, $3) | 0;
 }
 
 function btDiscreteDynamicsWorld_clearForces($0) {
  $0 = $0 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 120 >> 2]]($0);
 }
 
 function btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP8[$0 + 291 | 0] = $1;
 }
 
 function btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution($0) {
  $0 = $0 | 0;
  return HEAPU8[$0 + 291 | 0];
 }
 
 function btKinematicCharacterController_create($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  var $4 = 0;
  $4 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(292);
  btKinematicCharacterController__btKinematicCharacterController_28btPairCachingGhostObject__2c_20btConvexShape__2c_20float_2c_20btVector3_20const__29($4, $0, $1, $2, $3);
  return $4 | 0;
 }
 
 function btKinematicCharacterController_setWalkDirection($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 16 >> 2]]($0, $1);
 }
 
 function btKinematicCharacterController_setFallSpeed($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  HEAPF32[$0 + 28 >> 2] = $1;
 }
 
 function btKinematicCharacterController_setJumpSpeed($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  HEAPF32[$0 + 36 >> 2] = $1;
  HEAPF32[$0 + 32 >> 2] = $1;
 }
 
 function btKinematicCharacterController_setMaxSlope($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  HEAPF32[$0 + 44 >> 2] = $1;
  (wasm2js_i32$0 = $0, wasm2js_f32$0 = cosf($1)), HEAPF32[wasm2js_i32$0 + 48 >> 2] = wasm2js_f32$0;
 }
 
 function btKinematicCharacterController_jump($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 44 >> 2]]($0, $1);
 }
 
 function btKinematicCharacterController_setGravity($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  btKinematicCharacterController__setGravity_28btVector3_20const__29($0, $1);
 }
 
 function btPairCachingGhostObject_create() {
  var $0 = 0;
  $0 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29(348);
  btPairCachingGhostObject__btPairCachingGhostObject_28_29($0);
  return $0 | 0;
 }
 
 function btGhostPairCallback_create() {
  var $0 = 0;
  $0 = operator_20new_28unsigned_20long_29(4);
  HEAP32[$0 >> 2] = 24776;
  return $0 | 0;
 }
 
 function LayaMotionState__getWorldTransform_28btTransform__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  layaMotionStateGetWorldTransform(HEAP32[$0 + 4 >> 2], $1 | 0);
 }
 
 function LayaMotionState__setWorldTransform_28btTransform_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  layaMotionStateSetWorldTransform(HEAP32[$0 + 4 >> 2], $1 | 0);
 }
 
 function btCollisionWorld__RayResultCallback__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (!(HEAP32[$0 + 16 >> 2] & HEAP32[$1 + 4 >> 2])) {
   return 0
  }
  return (HEAP32[$1 + 8 >> 2] & HEAP32[$0 + 12 >> 2]) != 0 | 0;
 }
 
 function btCollisionWorld__ClosestRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0);
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 24 >> 2];
  $3 = HEAP32[$1 >> 2];
  HEAP32[$0 + 8 >> 2] = $3;
  label$1 : {
   if ($2) {
    $3 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 56 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 60 >> 2] = $3;
    $2 = $1 + 16 | 0;
    $7 = HEAP32[$2 >> 2];
    $2 = HEAP32[$2 + 4 >> 2];
    $3 = $0 - -64 | 0;
    HEAP32[$3 >> 2] = $7;
    HEAP32[$3 + 4 >> 2] = $2;
    break label$1;
   }
   $8 = HEAPF32[$3 + 8 >> 2];
   $9 = HEAPF32[$3 + 12 >> 2];
   $10 = HEAPF32[$3 + 20 >> 2];
   $11 = HEAPF32[$3 + 24 >> 2];
   $12 = HEAPF32[$3 + 28 >> 2];
   $13 = HEAPF32[$3 + 36 >> 2];
   $14 = HEAPF32[$3 + 40 >> 2];
   $4 = HEAPF32[$1 + 12 >> 2];
   $15 = HEAPF32[$3 + 44 >> 2];
   $5 = HEAPF32[$1 + 16 >> 2];
   $16 = HEAPF32[$3 + 4 >> 2];
   $6 = HEAPF32[$1 + 8 >> 2];
   HEAP32[$0 + 68 >> 2] = 0;
   HEAPF32[$0 - -64 >> 2] = Math_fround(Math_fround($6 * $13) + Math_fround($4 * $14)) + Math_fround($5 * $15);
   HEAPF32[$0 + 60 >> 2] = Math_fround(Math_fround($6 * $10) + Math_fround($4 * $11)) + Math_fround($5 * $12);
   HEAPF32[$0 + 56 >> 2] = Math_fround(Math_fround($16 * $6) + Math_fround($8 * $4)) + Math_fround($9 * $5);
  }
  $4 = HEAPF32[$1 + 24 >> 2];
  $5 = Math_fround(Math_fround(1.0) - $4);
  HEAPF32[$0 + 72 >> 2] = Math_fround($5 * HEAPF32[$0 + 24 >> 2]) + Math_fround($4 * HEAPF32[$0 + 40 >> 2]);
  HEAPF32[$0 + 76 >> 2] = Math_fround($5 * HEAPF32[$0 + 28 >> 2]) + Math_fround($4 * HEAPF32[$0 + 44 >> 2]);
  HEAPF32[$0 + 80 >> 2] = Math_fround($5 * HEAPF32[$0 + 32 >> 2]) + Math_fround($4 * HEAPF32[$0 + 48 >> 2]);
  return Math_fround(HEAPF32[$1 + 24 >> 2]);
 }
 
 function btCollisionWorld__AllHitsRayResultCallback___AllHitsRayResultCallback_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 24468;
  $1 = HEAP32[$0 + 128 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 132 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 128 >> 2] = 0;
  }
  HEAP32[$0 + 128 >> 2] = 0;
  HEAP32[$0 + 120 >> 2] = 0;
  HEAP32[$0 + 124 >> 2] = 0;
  HEAP8[$0 + 132 | 0] = 1;
  $1 = HEAP32[$0 + 108 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 112 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 108 >> 2] = 0;
  }
  HEAP32[$0 + 108 >> 2] = 0;
  HEAP32[$0 + 100 >> 2] = 0;
  HEAP32[$0 + 104 >> 2] = 0;
  HEAP8[$0 + 112 | 0] = 1;
  $1 = HEAP32[$0 + 88 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 92 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 88 >> 2] = 0;
  }
  HEAP32[$0 + 88 >> 2] = 0;
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 84 >> 2] = 0;
  HEAP8[$0 + 92 | 0] = 1;
  $1 = HEAP32[$0 + 36 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 40 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 36 >> 2] = 0;
  }
  HEAP32[$0 + 36 >> 2] = 0;
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 32 >> 2] = 0;
  HEAP8[$0 + 40 | 0] = 1;
  return $0 | 0;
 }
 
 function btCollisionWorld__AllHitsRayResultCallback___AllHitsRayResultCallback_28_29_1($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(btCollisionWorld__AllHitsRayResultCallback___AllHitsRayResultCallback_28_29($0));
 }
 
 function btCollisionWorld__AllHitsRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0;
  HEAP32[$0 + 8 >> 2] = HEAP32[$1 >> 2];
  $4 = HEAP32[$0 + 28 >> 2];
  label$1 : {
   if (($4 | 0) != HEAP32[$0 + 32 >> 2]) {
    break label$1
   }
   $7 = $4 ? $4 << 1 : 1;
   if (($4 | 0) >= ($7 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$7) {
     break label$2
    }
    $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 2);
    $4 = HEAP32[$0 + 28 >> 2];
   }
   if (($4 | 0) >= 1) {
    $5 = $4;
    while (1) {
     HEAP32[$3 + $9 >> 2] = HEAP32[$3 + HEAP32[$0 + 36 >> 2] >> 2];
     $3 = $3 + 4 | 0;
     $5 = $5 + -1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   $3 = HEAP32[$0 + 36 >> 2];
   if ($3) {
    if (HEAPU8[$0 + 40 | 0]) {
     btAlignedFreeInternal_28void__29($3);
     $4 = HEAP32[$0 + 28 >> 2];
    }
    HEAP32[$0 + 36 >> 2] = 0;
   }
   HEAP32[$0 + 36 >> 2] = $9;
   HEAP32[$0 + 32 >> 2] = $7;
   HEAP8[$0 + 40 | 0] = 1;
  }
  HEAP32[$0 + 28 >> 2] = $4 + 1;
  HEAP32[HEAP32[$0 + 36 >> 2] + ($4 << 2) >> 2] = HEAP32[$1 >> 2];
  label$8 : {
   if ($2) {
    $12 = HEAPF32[$1 + 16 >> 2];
    $13 = HEAPF32[$1 + 12 >> 2];
    $11 = HEAPF32[$1 + 8 >> 2];
    $8 = HEAPF32[$1 + 20 >> 2];
    break label$8;
   }
   $8 = HEAPF32[$1 + 8 >> 2];
   $3 = HEAP32[$0 + 8 >> 2];
   $11 = HEAPF32[$1 + 12 >> 2];
   $14 = HEAPF32[$1 + 16 >> 2];
   $12 = Math_fround(Math_fround(Math_fround($8 * HEAPF32[$3 + 36 >> 2]) + Math_fround($11 * HEAPF32[$3 + 40 >> 2])) + Math_fround($14 * HEAPF32[$3 + 44 >> 2]));
   $13 = Math_fround(Math_fround(Math_fround($8 * HEAPF32[$3 + 20 >> 2]) + Math_fround($11 * HEAPF32[$3 + 24 >> 2])) + Math_fround($14 * HEAPF32[$3 + 28 >> 2]));
   $11 = Math_fround(Math_fround(Math_fround(HEAPF32[$3 + 4 >> 2] * $8) + Math_fround(HEAPF32[$3 + 8 >> 2] * $11)) + Math_fround(HEAPF32[$3 + 12 >> 2] * $14));
   $8 = Math_fround(0.0);
  }
  $5 = HEAP32[$0 + 80 >> 2];
  label$10 : {
   if (($5 | 0) != HEAP32[$0 + 84 >> 2]) {
    break label$10
   }
   $7 = $5 ? $5 << 1 : 1;
   if (($5 | 0) >= ($7 | 0)) {
    break label$10
   }
   label$11 : {
    if (!$7) {
     $2 = 0;
     break label$11;
    }
    $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 4);
    $5 = HEAP32[$0 + 80 >> 2];
   }
   if (($5 | 0) >= 1) {
    $3 = 0;
    while (1) {
     $4 = $3 + HEAP32[$0 + 88 >> 2] | 0;
     $15 = HEAP32[$4 >> 2];
     $10 = HEAP32[$4 + 4 >> 2];
     $9 = $2 + $3 | 0;
     $6 = $9;
     HEAP32[$6 >> 2] = $15;
     HEAP32[$6 + 4 >> 2] = $10;
     $6 = $4 + 8 | 0;
     $4 = HEAP32[$6 >> 2];
     $6 = HEAP32[$6 + 4 >> 2];
     $10 = $9 + 8 | 0;
     HEAP32[$10 >> 2] = $4;
     HEAP32[$10 + 4 >> 2] = $6;
     $3 = $3 + 16 | 0;
     $5 = $5 + -1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   $3 = HEAP32[$0 + 88 >> 2];
   if ($3) {
    if (HEAPU8[$0 + 92 | 0]) {
     btAlignedFreeInternal_28void__29($3)
    }
    HEAP32[$0 + 88 >> 2] = 0;
   }
   HEAP32[$0 + 88 >> 2] = $2;
   HEAP32[$0 + 84 >> 2] = $7;
   HEAP8[$0 + 92 | 0] = 1;
   $5 = HEAP32[$0 + 80 >> 2];
  }
  $3 = HEAP32[$0 + 88 >> 2] + ($5 << 4) | 0;
  HEAPF32[$3 + 12 >> 2] = $8;
  HEAPF32[$3 + 8 >> 2] = $12;
  HEAPF32[$3 + 4 >> 2] = $13;
  HEAPF32[$3 >> 2] = $11;
  HEAP32[$0 + 80 >> 2] = HEAP32[$0 + 80 >> 2] + 1;
  $8 = HEAPF32[$1 + 24 >> 2];
  $12 = Math_fround(Math_fround(1.0) - $8);
  $13 = Math_fround(Math_fround($12 * HEAPF32[$0 + 52 >> 2]) + Math_fround($8 * HEAPF32[$0 + 68 >> 2]));
  $11 = Math_fround(Math_fround($12 * HEAPF32[$0 + 48 >> 2]) + Math_fround($8 * HEAPF32[$0 - -64 >> 2]));
  $8 = Math_fround(Math_fround($12 * HEAPF32[$0 + 44 >> 2]) + Math_fround($8 * HEAPF32[$0 + 60 >> 2]));
  $5 = HEAP32[$0 + 100 >> 2];
  label$17 : {
   if (($5 | 0) != HEAP32[$0 + 104 >> 2]) {
    break label$17
   }
   $7 = $5 ? $5 << 1 : 1;
   if (($5 | 0) >= ($7 | 0)) {
    break label$17
   }
   label$18 : {
    if (!$7) {
     $2 = 0;
     break label$18;
    }
    $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 4);
    $5 = HEAP32[$0 + 100 >> 2];
   }
   if (($5 | 0) >= 1) {
    $3 = 0;
    while (1) {
     $4 = $3 + HEAP32[$0 + 108 >> 2] | 0;
     $15 = HEAP32[$4 >> 2];
     $10 = HEAP32[$4 + 4 >> 2];
     $9 = $2 + $3 | 0;
     $6 = $9;
     HEAP32[$6 >> 2] = $15;
     HEAP32[$6 + 4 >> 2] = $10;
     $6 = $4 + 8 | 0;
     $4 = HEAP32[$6 >> 2];
     $6 = HEAP32[$6 + 4 >> 2];
     $10 = $9 + 8 | 0;
     HEAP32[$10 >> 2] = $4;
     HEAP32[$10 + 4 >> 2] = $6;
     $3 = $3 + 16 | 0;
     $5 = $5 + -1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   $3 = HEAP32[$0 + 108 >> 2];
   if ($3) {
    if (HEAPU8[$0 + 112 | 0]) {
     btAlignedFreeInternal_28void__29($3)
    }
    HEAP32[$0 + 108 >> 2] = 0;
   }
   HEAP32[$0 + 108 >> 2] = $2;
   HEAP32[$0 + 104 >> 2] = $7;
   HEAP8[$0 + 112 | 0] = 1;
   $5 = HEAP32[$0 + 100 >> 2];
  }
  $3 = HEAP32[$0 + 108 >> 2] + ($5 << 4) | 0;
  HEAPF32[$3 + 8 >> 2] = $13;
  HEAPF32[$3 + 4 >> 2] = $11;
  HEAPF32[$3 >> 2] = $8;
  HEAP32[$0 + 100 >> 2] = HEAP32[$0 + 100 >> 2] + 1;
  $4 = HEAP32[$0 + 120 >> 2];
  label$24 : {
   if (($4 | 0) != HEAP32[$0 + 124 >> 2]) {
    break label$24
   }
   $2 = $4 ? $4 << 1 : 1;
   if (($4 | 0) >= ($2 | 0)) {
    break label$24
   }
   label$25 : {
    if (!$2) {
     $7 = 0;
     break label$25;
    }
    $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($2 << 2);
    $4 = HEAP32[$0 + 120 >> 2];
   }
   $6 = HEAP32[$0 + 128 >> 2];
   label$27 : {
    label$28 : {
     if (($4 | 0) >= 1) {
      $3 = $7;
      $5 = $6;
      $9 = $4;
      while (1) {
       HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
       $3 = $3 + 4 | 0;
       $5 = $5 + 4 | 0;
       $9 = $9 + -1 | 0;
       if ($9) {
        continue
       }
       break;
      };
      break label$28;
     }
     if (!$6) {
      break label$27
     }
    }
    if (HEAPU8[$0 + 132 | 0]) {
     btAlignedFreeInternal_28void__29($6);
     $4 = HEAP32[$0 + 120 >> 2];
    }
    HEAP32[$0 + 128 >> 2] = 0;
   }
   HEAP32[$0 + 128 >> 2] = $7;
   HEAP32[$0 + 124 >> 2] = $2;
   HEAP8[$0 + 132 | 0] = 1;
  }
  HEAP32[HEAP32[$0 + 128 >> 2] + ($4 << 2) >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$0 + 120 >> 2] = $4 + 1;
  return Math_fround(HEAPF32[$0 + 4 >> 2]);
 }
 
 function btCollisionWorld__ConvexResultCallback__needsCollision_28btBroadphaseProxy__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  if (!(HEAP32[$0 + 12 >> 2] & HEAP32[$1 + 4 >> 2])) {
   return 0
  }
  return (HEAP32[$1 + 8 >> 2] & HEAP32[$0 + 8 >> 2]) != 0 | 0;
 }
 
 function btCollisionWorld__ClosestConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0);
  HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 40 >> 2];
  $3 = HEAP32[$1 >> 2];
  HEAP32[$0 + 80 >> 2] = $3;
  label$1 : {
   if ($2) {
    $3 = HEAP32[$1 + 12 >> 2];
    HEAP32[$0 + 48 >> 2] = HEAP32[$1 + 8 >> 2];
    HEAP32[$0 + 52 >> 2] = $3;
    $2 = $1 + 16 | 0;
    $4 = HEAP32[$2 >> 2];
    $2 = HEAP32[$2 + 4 >> 2];
    $3 = $0 + 56 | 0;
    HEAP32[$3 >> 2] = $4;
    HEAP32[$3 + 4 >> 2] = $2;
    break label$1;
   }
   $8 = HEAPF32[$3 + 8 >> 2];
   $9 = HEAPF32[$3 + 12 >> 2];
   $10 = HEAPF32[$3 + 20 >> 2];
   $11 = HEAPF32[$3 + 24 >> 2];
   $12 = HEAPF32[$3 + 28 >> 2];
   $13 = HEAPF32[$3 + 36 >> 2];
   $14 = HEAPF32[$3 + 40 >> 2];
   $5 = HEAPF32[$1 + 12 >> 2];
   $15 = HEAPF32[$3 + 44 >> 2];
   $6 = HEAPF32[$1 + 16 >> 2];
   $16 = HEAPF32[$3 + 4 >> 2];
   $7 = HEAPF32[$1 + 8 >> 2];
   HEAP32[$0 + 60 >> 2] = 0;
   HEAPF32[$0 + 56 >> 2] = Math_fround(Math_fround($7 * $13) + Math_fround($5 * $14)) + Math_fround($6 * $15);
   HEAPF32[$0 + 52 >> 2] = Math_fround(Math_fround($7 * $10) + Math_fround($5 * $11)) + Math_fround($6 * $12);
   HEAPF32[$0 + 48 >> 2] = Math_fround(Math_fround($16 * $7) + Math_fround($8 * $5)) + Math_fround($9 * $6);
  }
  $3 = HEAP32[$1 + 28 >> 2];
  HEAP32[$0 + 64 >> 2] = HEAP32[$1 + 24 >> 2];
  HEAP32[$0 + 68 >> 2] = $3;
  $2 = $1 + 32 | 0;
  $4 = HEAP32[$2 >> 2];
  $2 = HEAP32[$2 + 4 >> 2];
  $3 = $0 + 72 | 0;
  HEAP32[$3 >> 2] = $4;
  HEAP32[$3 + 4 >> 2] = $2;
  return Math_fround(HEAPF32[$1 + 40 >> 2]);
 }
 
 function btCollisionWorld__AllConvexResultCallback___AllConvexResultCallback_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  HEAP32[$0 >> 2] = 24692;
  $1 = HEAP32[$0 + 120 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 124 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 120 >> 2] = 0;
  }
  HEAP32[$0 + 120 >> 2] = 0;
  HEAP32[$0 + 112 >> 2] = 0;
  HEAP32[$0 + 116 >> 2] = 0;
  HEAP8[$0 + 124 | 0] = 1;
  $1 = HEAP32[$0 + 100 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 104 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 100 >> 2] = 0;
  }
  HEAP32[$0 + 100 >> 2] = 0;
  HEAP32[$0 + 92 >> 2] = 0;
  HEAP32[$0 + 96 >> 2] = 0;
  HEAP8[$0 + 104 | 0] = 1;
  $1 = HEAP32[$0 + 80 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 84 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 80 >> 2] = 0;
  }
  HEAP32[$0 + 80 >> 2] = 0;
  HEAP32[$0 + 72 >> 2] = 0;
  HEAP32[$0 + 76 >> 2] = 0;
  HEAP8[$0 + 84 | 0] = 1;
  $1 = HEAP32[$0 + 28 >> 2];
  if ($1) {
   if (HEAPU8[$0 + 32 | 0]) {
    btAlignedFreeInternal_28void__29($1)
   }
   HEAP32[$0 + 28 >> 2] = 0;
  }
  HEAP32[$0 + 28 >> 2] = 0;
  HEAP32[$0 + 20 >> 2] = 0;
  HEAP32[$0 + 24 >> 2] = 0;
  HEAP8[$0 + 32 | 0] = 1;
  return $0 | 0;
 }
 
 function btCollisionWorld__AllConvexResultCallback___AllConvexResultCallback_28_29_1($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29(btCollisionWorld__AllConvexResultCallback___AllConvexResultCallback_28_29($0));
 }
 
 function btCollisionWorld__AllConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
  $4 = HEAP32[$0 + 20 >> 2];
  label$1 : {
   if (($4 | 0) != HEAP32[$0 + 24 >> 2]) {
    break label$1
   }
   $7 = $4 ? $4 << 1 : 1;
   if (($4 | 0) >= ($7 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$7) {
     break label$2
    }
    $9 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 2);
    $4 = HEAP32[$0 + 20 >> 2];
   }
   if (($4 | 0) >= 1) {
    $5 = $4;
    while (1) {
     HEAP32[$3 + $9 >> 2] = HEAP32[$3 + HEAP32[$0 + 28 >> 2] >> 2];
     $3 = $3 + 4 | 0;
     $5 = $5 + -1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   $3 = HEAP32[$0 + 28 >> 2];
   if ($3) {
    if (HEAPU8[$0 + 32 | 0]) {
     btAlignedFreeInternal_28void__29($3);
     $4 = HEAP32[$0 + 20 >> 2];
    }
    HEAP32[$0 + 28 >> 2] = 0;
   }
   HEAP32[$0 + 28 >> 2] = $9;
   HEAP32[$0 + 24 >> 2] = $7;
   HEAP8[$0 + 32 | 0] = 1;
  }
  HEAP32[$0 + 20 >> 2] = $4 + 1;
  HEAP32[HEAP32[$0 + 28 >> 2] + ($4 << 2) >> 2] = HEAP32[$1 >> 2];
  label$8 : {
   if ($2) {
    $14 = HEAPF32[$1 + 16 >> 2];
    $15 = HEAPF32[$1 + 12 >> 2];
    $11 = HEAPF32[$1 + 8 >> 2];
    $12 = HEAPF32[$1 + 20 >> 2];
    break label$8;
   }
   $12 = HEAPF32[$1 + 8 >> 2];
   $3 = HEAP32[$1 >> 2];
   $11 = HEAPF32[$1 + 12 >> 2];
   $13 = HEAPF32[$1 + 16 >> 2];
   $14 = Math_fround(Math_fround(Math_fround($12 * HEAPF32[$3 + 36 >> 2]) + Math_fround($11 * HEAPF32[$3 + 40 >> 2])) + Math_fround($13 * HEAPF32[$3 + 44 >> 2]));
   $15 = Math_fround(Math_fround(Math_fround($12 * HEAPF32[$3 + 20 >> 2]) + Math_fround($11 * HEAPF32[$3 + 24 >> 2])) + Math_fround($13 * HEAPF32[$3 + 28 >> 2]));
   $11 = Math_fround(Math_fround(Math_fround(HEAPF32[$3 + 4 >> 2] * $12) + Math_fround(HEAPF32[$3 + 8 >> 2] * $11)) + Math_fround(HEAPF32[$3 + 12 >> 2] * $13));
   $12 = Math_fround(0.0);
  }
  $5 = HEAP32[$0 + 72 >> 2];
  label$10 : {
   if (($5 | 0) != HEAP32[$0 + 76 >> 2]) {
    break label$10
   }
   $7 = $5 ? $5 << 1 : 1;
   if (($5 | 0) >= ($7 | 0)) {
    break label$10
   }
   label$11 : {
    if (!$7) {
     $2 = 0;
     break label$11;
    }
    $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($7 << 4);
    $5 = HEAP32[$0 + 72 >> 2];
   }
   if (($5 | 0) >= 1) {
    $3 = 0;
    while (1) {
     $4 = $3 + HEAP32[$0 + 80 >> 2] | 0;
     $10 = HEAP32[$4 >> 2];
     $8 = HEAP32[$4 + 4 >> 2];
     $9 = $2 + $3 | 0;
     $6 = $9;
     HEAP32[$6 >> 2] = $10;
     HEAP32[$6 + 4 >> 2] = $8;
     $6 = $4 + 8 | 0;
     $4 = HEAP32[$6 >> 2];
     $6 = HEAP32[$6 + 4 >> 2];
     $8 = $9 + 8 | 0;
     HEAP32[$8 >> 2] = $4;
     HEAP32[$8 + 4 >> 2] = $6;
     $3 = $3 + 16 | 0;
     $5 = $5 + -1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   $3 = HEAP32[$0 + 80 >> 2];
   if ($3) {
    if (HEAPU8[$0 + 84 | 0]) {
     btAlignedFreeInternal_28void__29($3)
    }
    HEAP32[$0 + 80 >> 2] = 0;
   }
   HEAP32[$0 + 80 >> 2] = $2;
   HEAP32[$0 + 76 >> 2] = $7;
   HEAP8[$0 + 84 | 0] = 1;
   $5 = HEAP32[$0 + 72 >> 2];
  }
  $3 = HEAP32[$0 + 80 >> 2] + ($5 << 4) | 0;
  HEAPF32[$3 + 12 >> 2] = $12;
  HEAPF32[$3 + 8 >> 2] = $14;
  HEAPF32[$3 + 4 >> 2] = $15;
  HEAPF32[$3 >> 2] = $11;
  HEAP32[$0 + 72 >> 2] = HEAP32[$0 + 72 >> 2] + 1;
  $7 = $1 + 24 | 0;
  $5 = HEAP32[$0 + 92 >> 2];
  label$17 : {
   if (($5 | 0) != HEAP32[$0 + 96 >> 2]) {
    break label$17
   }
   $10 = $5 ? $5 << 1 : 1;
   if (($5 | 0) >= ($10 | 0)) {
    break label$17
   }
   label$18 : {
    if (!$10) {
     $2 = 0;
     break label$18;
    }
    $2 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($10 << 4);
    $5 = HEAP32[$0 + 92 >> 2];
   }
   if (($5 | 0) >= 1) {
    $3 = 0;
    while (1) {
     $4 = $3 + HEAP32[$0 + 100 >> 2] | 0;
     $8 = HEAP32[$4 + 4 >> 2];
     $9 = $2 + $3 | 0;
     $6 = $9;
     HEAP32[$6 >> 2] = HEAP32[$4 >> 2];
     HEAP32[$6 + 4 >> 2] = $8;
     $6 = $4 + 8 | 0;
     $4 = HEAP32[$6 >> 2];
     $6 = HEAP32[$6 + 4 >> 2];
     $8 = $9 + 8 | 0;
     HEAP32[$8 >> 2] = $4;
     HEAP32[$8 + 4 >> 2] = $6;
     $3 = $3 + 16 | 0;
     $5 = $5 + -1 | 0;
     if ($5) {
      continue
     }
     break;
    };
   }
   $3 = HEAP32[$0 + 100 >> 2];
   if ($3) {
    if (HEAPU8[$0 + 104 | 0]) {
     btAlignedFreeInternal_28void__29($3)
    }
    HEAP32[$0 + 100 >> 2] = 0;
   }
   HEAP32[$0 + 100 >> 2] = $2;
   HEAP32[$0 + 96 >> 2] = $10;
   HEAP8[$0 + 104 | 0] = 1;
   $5 = HEAP32[$0 + 92 >> 2];
  }
  $8 = HEAP32[$7 + 4 >> 2];
  $3 = HEAP32[$0 + 100 >> 2] + ($5 << 4) | 0;
  HEAP32[$3 >> 2] = HEAP32[$7 >> 2];
  HEAP32[$3 + 4 >> 2] = $8;
  $6 = $7 + 8 | 0;
  $2 = HEAP32[$6 >> 2];
  $6 = HEAP32[$6 + 4 >> 2];
  $8 = $3 + 8 | 0;
  HEAP32[$8 >> 2] = $2;
  HEAP32[$8 + 4 >> 2] = $6;
  HEAP32[$0 + 92 >> 2] = HEAP32[$0 + 92 >> 2] + 1;
  $4 = HEAP32[$0 + 112 >> 2];
  label$24 : {
   if (($4 | 0) != HEAP32[$0 + 116 >> 2]) {
    break label$24
   }
   $2 = $4 ? $4 << 1 : 1;
   if (($4 | 0) >= ($2 | 0)) {
    break label$24
   }
   label$25 : {
    if (!$2) {
     $7 = 0;
     break label$25;
    }
    $7 = btAlignedAllocInternal_28unsigned_20long_2c_20int_29($2 << 2);
    $4 = HEAP32[$0 + 112 >> 2];
   }
   $10 = HEAP32[$0 + 120 >> 2];
   label$27 : {
    label$28 : {
     if (($4 | 0) >= 1) {
      $3 = $7;
      $5 = $10;
      $9 = $4;
      while (1) {
       HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
       $3 = $3 + 4 | 0;
       $5 = $5 + 4 | 0;
       $9 = $9 + -1 | 0;
       if ($9) {
        continue
       }
       break;
      };
      break label$28;
     }
     if (!$10) {
      break label$27
     }
    }
    if (HEAPU8[$0 + 124 | 0]) {
     btAlignedFreeInternal_28void__29($10);
     $4 = HEAP32[$0 + 112 >> 2];
    }
    HEAP32[$0 + 120 >> 2] = 0;
   }
   HEAP32[$0 + 120 >> 2] = $7;
   HEAP32[$0 + 116 >> 2] = $2;
   HEAP8[$0 + 124 | 0] = 1;
  }
  HEAP32[HEAP32[$0 + 120 >> 2] + ($4 << 2) >> 2] = HEAP32[$1 + 40 >> 2];
  HEAP32[$0 + 112 >> 2] = $4 + 1;
  return Math_fround(HEAPF32[$0 + 4 >> 2]);
 }
 
 function btGhostPairCallback__addOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $0 = HEAP32[$2 >> 2];
  $0 = HEAP32[$0 + 252 >> 2] == 4 ? $0 : 0;
  $3 = HEAP32[$1 >> 2];
  label$1 : {
   if (!$3) {
    break label$1
   }
   if (HEAP32[$3 + 252 >> 2] != 4) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$3 >> 2] + 28 >> 2]]($3, $2, $1);
  }
  if ($0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 28 >> 2]]($0, $1, $2)
  }
  return 0;
 }
 
 function btGhostPairCallback__removeOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__2c_20btDispatcher__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $0 = HEAP32[$2 >> 2];
  $0 = HEAP32[$0 + 252 >> 2] == 4 ? $0 : 0;
  $4 = HEAP32[$1 >> 2];
  label$1 : {
   if (!$4) {
    break label$1
   }
   if (HEAP32[$4 + 252 >> 2] != 4) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$4 >> 2] + 32 >> 2]]($4, $2, $3, $1);
  }
  if ($0) {
   FUNCTION_TABLE[HEAP32[HEAP32[$0 >> 2] + 32 >> 2]]($0, $1, $3, $2)
  }
  return 0;
 }
 
 function legalfunc$__wasi_fd_seek($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0;
  $6 = $0;
  $7 = $1;
  $5 = 32;
  $0 = $5 & 31;
  if (32 <= $5 >>> 0) {
   $0 = $2 >>> $0
  } else {
   $0 = ((1 << $0) - 1 & $2) << 32 - $0 | $1 >>> $0
  }
  return legalimport$__wasi_fd_seek($6 | 0, $7 | 0, $0 | 0, $3 | 0, $4 | 0) | 0;
 }
 
 function legalfunc$wasm2js_scratch_store_i64($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = $0;
  $4 = $0;
  $2 = 32;
  $0 = $2 & 31;
  if (32 <= $2 >>> 0) {
   $0 = $1 >>> $0
  } else {
   $0 = ((1 << $0) - 1 & $1) << 32 - $0 | $4 >>> $0
  }
  legalimport$wasm2js_scratch_store_i64($3 | 0, $0 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $5 = $2;
  $8 = $5 >>> 16;
  $6 = $0;
  $9 = $6 >>> 16;
  $10 = Math_imul($8, $9);
  $7 = 32;
  $4 = $7 & 31;
  if (32 <= $7 >>> 0) {
   $0 = $1 >>> $4
  } else {
   $0 = ((1 << $4) - 1 & $1) << 32 - $4 | $0 >>> $4
  }
  $0 = $10 + Math_imul($0, $5) | 0;
  $1 = $2;
  $4 = 0;
  if (32 <= $7 >>> 0) {
   $1 = $3 >>> $4
  } else {
   $1 = ((1 << $4) - 1 & $3) << 32 - $4 | $1 >>> $4
  }
  $0 = $0 + Math_imul($1, $6) | 0;
  $5 = $5 & 65535;
  $6 = $6 & 65535;
  $2 = Math_imul($5, $6);
  $5 = ($2 >>> 16) + Math_imul($5, $9) | 0;
  $0 = $0 + ($5 >>> 16) | 0;
  $5 = Math_imul($6, $8) + ($5 & 65535) | 0;
  $1 = $0 + ($5 >>> 16) | 0;
  $0 = 0;
  $3 = $1;
  $4 = 0;
  if (32 <= $7 >>> 0) {
   $1 = $3 << $4;
   $0 = 0;
  } else {
   $1 = (1 << $4) - 1 & $3 >>> 32 - $4 | $0 << $4;
   $0 = $3 << $4;
  }
  i64toi32_i32$HIGH_BITS = $1;
  return $2 & 65535 | $5 << 16 | $0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$9 : {
          label$11 : {
           $4 = $1;
           if ($4) {
            $3 = $2;
            if (!$3) {
             break label$11
            }
            break label$9;
           }
           $4 = $0;
           $3 = $2;
           $4 = ($4 >>> 0) / ($3 >>> 0) | 0;
           legalfunc$wasm2js_scratch_store_i64($0 - Math_imul($4, $3) | 0, 0);
           i64toi32_i32$HIGH_BITS = 0;
           return $4;
          }
          if (!$0) {
           break label$7
          }
          break label$6;
         }
         $9 = $3 + -1 | 0;
         if (!($3 & $9)) {
          break label$5
         }
         $4 = (Math_clz32($3) + 33 | 0) - Math_clz32($4) | 0;
         $3 = 0 - $4 | 0;
         break label$3;
        }
        $9 = ($4 >>> 0) / 0 | 0;
        legalfunc$wasm2js_scratch_store_i64(0, $4 - Math_imul($9, 0) | 0);
        i64toi32_i32$HIGH_BITS = 0;
        return $9;
       }
       $4 = 32 - Math_clz32($4) | 0;
       if ($4 >>> 0 < 31) {
        break label$4
       }
       break label$2;
      }
      legalfunc$wasm2js_scratch_store_i64($0 & $9, 0);
      if (($3 | 0) == 1) {
       break label$1
      }
      $7 = $1;
      $6 = $0;
      if ($3) {
       $8 = 31 - Math_clz32($3 ^ $3 + -1) | 0
      } else {
       $8 = 32
      }
      $5 = $8 & 31;
      if (32 <= ($8 & 63) >>> 0) {
       $6 = $7 >>> $5
      } else {
       $10 = $7 >>> $5;
       $6 = ((1 << $5) - 1 & $7) << 32 - $5 | $6 >>> $5;
      }
      i64toi32_i32$HIGH_BITS = $10;
      return $6;
     }
     $3 = 63 - $4 | 0;
     $4 = $4 + 1 | 0;
    }
    $6 = $1;
    $7 = $0;
    $8 = $4 & 63;
    $5 = $8 & 31;
    if (32 <= ($8 & 63) >>> 0) {
     $11 = $6 >>> $5
    } else {
     $10 = $6 >>> $5;
     $11 = ((1 << $5) - 1 & $6) << 32 - $5 | $7 >>> $5;
    }
    $9 = $10;
    $10 = $1;
    $6 = $0;
    $8 = $3 & 63;
    $5 = $8 & 31;
    if (32 <= ($8 & 63) >>> 0) {
     $7 = $6 << $5;
     $0 = 0;
    } else {
     $7 = (1 << $5) - 1 & $6 >>> 32 - $5 | $10 << $5;
     $0 = $6 << $5;
    }
    $1 = $7;
    if ($4) {
     $3 = -1;
     $5 = $2 + -1 | 0;
     if ($5 >>> 0 < 4294967295) {
      $3 = 0
     }
     $13 = $5;
     $14 = $3;
     while (1) {
      $7 = $11;
      $10 = $9 << 1 | $7 >>> 31;
      $11 = $7 << 1 | $1 >>> 31;
      $6 = $11;
      $7 = $13;
      $3 = $10;
      $5 = $14 - ($3 + ($7 >>> 0 < $6 >>> 0) | 0) | 0;
      $12 = $5 >> 31;
      $8 = $12 & $2;
      $11 = $6 - $8 | 0;
      $9 = $3 - ($6 >>> 0 < $8 >>> 0) | 0;
      $3 = $0;
      $7 = $1 << 1 | $3 >>> 31;
      $0 = $15 | $3 << 1;
      $1 = $7;
      $12 = $12 & 1;
      $15 = $12;
      $4 = $4 + -1 | 0;
      if ($4) {
       continue
      }
      break;
     };
    }
    legalfunc$wasm2js_scratch_store_i64($11, $9);
    $3 = $0;
    i64toi32_i32$HIGH_BITS = $1 << 1 | $3 >>> 31;
    return $12 | $3 << 1;
   }
   legalfunc$wasm2js_scratch_store_i64($0, $1);
   $0 = 0;
   $1 = 0;
  }
  i64toi32_i32$HIGH_BITS = $1;
  return $0;
 }
 
 function __wasm_i64_mul($0, $1, $2, $3) {
  $3 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE($0, $1, $2, $3);
  return $3;
 }
 
 function __wasm_i64_udiv($0, $1, $2) {
  return _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E($0, $1, $2);
 }
 
 function __wasm_rotl_i32($0) {
  var $1 = 0;
  $1 = $0 & 31;
  $0 = 0 - $0 & 31;
  return (-1 >>> $1 & -2) << $1 | (-1 << $0 & -2) >>> $0;
 }
 
 var FUNCTION_TABLE = [null, __stdio_close, __stdio_write, __stdio_seek, __cxxabiv1____class_type_info_____class_type_info_28_29, __cxxabiv1____si_class_type_info_____si_class_type_info_28_29, __cxxabiv1____si_class_type_info_____si_class_type_info_28_29, __cxxabiv1____class_type_info_____class_type_info_28_29_1, __cxxabiv1____shim_type_info__noop1_28_29_20const, __cxxabiv1____shim_type_info__noop1_28_29_20const, __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____si_class_type_info_____si_class_type_info_28_29_1, __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29_1, __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, __cxa_pure_virtual, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btAlignedAllocDefault_28unsigned_20long_2c_20int_29, btAlignedFreeDefault_28void__29, btAllocDefault_28unsigned_20long_29, btFreeDefault_28void__29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btCollisionShape__getBoundingSphere_28btVector3__2c_20float__29_20const, btCollisionShape__getAngularMotionDisc_28_29_20const, btCollisionShape__getContactBreakingThreshold_28float_29_20const, btCollisionShape__getAnisotropicRollingFrictionDirection_28_29_20const, btCollisionShape__calculateSerializeBufferSize_28_29_20const, btCollisionShape__serialize_28void__2c_20btSerializer__29_20const, btCollisionShape__serializeSingleShape_28btSerializer__29_20const, btConvexShape__project_28btTransform_20const__2c_20btVector3_20const__2c_20float__2c_20float__2c_20btVector3__2c_20btVector3__29_20const, btCapsuleShape___btCapsuleShape_28_29, btCapsuleShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btCapsuleShape__setLocalScaling_28btVector3_20const__29, btConvexInternalShape__getLocalScaling_28_29_20const, btCapsuleShape__calculateLocalInertia_28float_2c_20btVector3__29_20const, btCapsuleShape__getName_28_29_20const, btCapsuleShape__getAnisotropicRollingFrictionDirection_28_29_20const, btCapsuleShape__setMargin_28float_29, btConvexInternalShape__getMargin_28_29_20const, btCapsuleShape__calculateSerializeBufferSize_28_29_20const, btCapsuleShape__serialize_28void__2c_20btSerializer__29_20const, btConvexInternalShape__localGetSupportingVertex_28btVector3_20const__29_20const, btCapsuleShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btCapsuleShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btConvexInternalShape__getAabbSlow_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btCapsuleShape___btCapsuleShape_28_29, btCapsuleShapeX__getName_28_29_20const, btCapsuleShape___btCapsuleShape_28_29, btCapsuleShapeZ__getName_28_29_20const, btCapsuleShape___btCapsuleShape_28_29, btConvexInternalShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btConeShape__setLocalScaling_28btVector3_20const__29, btConeShape__calculateLocalInertia_28float_2c_20btVector3__29_20const, btConeShape__getName_28_29_20const, btConeShape__getAnisotropicRollingFrictionDirection_28_29_20const, btConvexInternalShape__setMargin_28float_29, btCapsuleShape__calculateSerializeBufferSize_28_29_20const, btConeShape__serialize_28void__2c_20btSerializer__29_20const, btConeShape__localGetSupportingVertex_28btVector3_20const__29_20const, btConeShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btConeShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btCapsuleShape___btCapsuleShape_28_29, btConeShapeZ__getName_28_29_20const, btConeShapeZ__getAnisotropicRollingFrictionDirection_28_29_20const, btCapsuleShape___btCapsuleShape_28_29, btConeShapeX__getName_28_29_20const, btConeShapeX__getAnisotropicRollingFrictionDirection_28_29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btConvexInternalShape__setLocalScaling_28btVector3_20const__29, btConvexInternalShape__calculateSerializeBufferSize_28_29_20const, btConvexInternalShape__serialize_28void__2c_20btSerializer__29_20const, btConvexPolyhedron___btConvexPolyhedron_28_29, btConvexPolyhedron___btConvexPolyhedron_28_29_1, btPolyhedralConvexShape___btPolyhedralConvexShape_28_29_1, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btPolyhedralConvexShape__calculateLocalInertia_28float_2c_20btVector3__29_20const, btPolyhedralConvexShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btPolyhedralConvexShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btPolyhedralConvexShape__initializePolyhedralFeatures_28int_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btPolyhedralConvexAabbCachingShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btPolyhedralConvexAabbCachingShape__setLocalScaling_28btVector3_20const__29, btBU_Simplex1to4___btBU_Simplex1to4_28_29, btBU_Simplex1to4__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btBU_Simplex1to4__getName_28_29_20const, btBU_Simplex1to4__getNumVertices_28_29_20const, btBU_Simplex1to4__getNumEdges_28_29_20const, btBU_Simplex1to4__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const, btBU_Simplex1to4__getVertex_28int_2c_20btVector3__29_20const, btBU_Simplex1to4__getNumPlanes_28_29_20const, btBU_Simplex1to4__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const, btBU_Simplex1to4__isInside_28btVector3_20const__2c_20float_29_20const, btBU_Simplex1to4__getIndex_28int_29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btManifoldResult__setShapeIdentifiersA_28int_2c_20int_29, btManifoldResult__setShapeIdentifiersB_28int_2c_20int_29, btManifoldResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29, btCollisionDispatcher__defaultNearCallback_28btBroadphasePair__2c_20btCollisionDispatcher__2c_20btDispatcherInfo_20const__29, btCollisionDispatcher___btCollisionDispatcher_28_29, btCollisionDispatcher___btCollisionDispatcher_28_29_1, btCollisionDispatcher__findAlgorithm_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btPersistentManifold__2c_20ebtDispatcherQueryType_29, btCollisionDispatcher__getNewManifold_28btCollisionObject_20const__2c_20btCollisionObject_20const__29, btCollisionDispatcher__releaseManifold_28btPersistentManifold__29, btCollisionDispatcher__clearManifold_28btPersistentManifold__29, btCollisionDispatcher__needsCollision_28btCollisionObject_20const__2c_20btCollisionObject_20const__29, btCollisionDispatcher__needsResponse_28btCollisionObject_20const__2c_20btCollisionObject_20const__29, btCollisionDispatcher__dispatchAllCollisionPairs_28btOverlappingPairCache__2c_20btDispatcherInfo_20const__2c_20btDispatcher__29, btCollisionDispatcher__getNumManifolds_28_29_20const, btCollisionDispatcher__getManifoldByIndexInternal_28int_29, btCollisionDispatcher__getInternalManifoldPointer_28_29, btCollisionDispatcher__getInternalManifoldPool_28_29, btCollisionDispatcher__getInternalManifoldPool_28_29, btCollisionDispatcher__allocateCollisionAlgorithm_28int_29, btCollisionDispatcher__freeCollisionAlgorithm_28void__29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btCollisionPairCallback__processOverlap_28btBroadphasePair__29, btGImpactCollisionAlgorithm___btGImpactCollisionAlgorithm_28_29, btGImpactCollisionAlgorithm___btGImpactCollisionAlgorithm_28_29_1, btGImpactCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btGImpactCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btGImpactCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btBU_Simplex1to4___btBU_Simplex1to4_28_29, btTriangleShapeEx__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btTriangleShape__calculateLocalInertia_28float_2c_20btVector3__29_20const, btTriangleShape__getName_28_29_20const, btTriangleShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btTriangleShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btTriangleShape__getNumPreferredPenetrationDirections_28_29_20const, btTriangleShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btTriangleShape__getNumVertices_28_29_20const, btTriangleShape__getNumVertices_28_29_20const, btTriangleShape__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const, btTriangleShape__getVertex_28int_2c_20btVector3__29_20const, btTriangleShape__getNumPlanes_28_29_20const, btTriangleShape__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const, btTriangleShape__isInside_28btVector3_20const__2c_20float_29_20const, btTriangleShape__getPlaneEquation_28int_2c_20btVector3__2c_20btVector3__29_20const, btBU_Simplex1to4___btBU_Simplex1to4_28_29, GIM_ShapeRetriever__ChildShapeRetriever__getChildShape_28int_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, GIM_ShapeRetriever__TriangleShapeRetriever__getChildShape_28int_29, btManifoldResult___btManifoldResult_28_29, GIM_ShapeRetriever__TetraShapeRetriever__getChildShape_28int_29, btManifoldResult___btManifoldResult_28_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btGImpactTriangleCallback__processTriangle_28btVector3__2c_20int_2c_20int_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btGImpactCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btCollisionObject___btCollisionObject_28_29, btCollisionObject___btCollisionObject_28_29_1, btCollisionObject__setCollisionShape_28btCollisionShape__29, btCollisionObject__checkCollideWithOverride_28btCollisionObject_20const__29_20const, btCollisionObject__calculateSerializeBufferSize_28_29_20const, btCollisionObject__serialize_28void__2c_20btSerializer__29_20const, btCollisionObject__serializeSingleObject_28btSerializer__29_20const, btBU_Simplex1to4___btBU_Simplex1to4_28_29, btBoxShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btBoxShape__setLocalScaling_28btVector3_20const__29, btBoxShape__calculateLocalInertia_28float_2c_20btVector3__29_20const, btBoxShape__getName_28_29_20const, btBoxShape__setMargin_28float_29, btBoxShape__localGetSupportingVertex_28btVector3_20const__29_20const, btBoxShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btBoxShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btBoxShape__getNumPreferredPenetrationDirections_28_29_20const, btBoxShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btBoxShape__getNumVertices_28_29_20const, btCollisionShape__calculateSerializeBufferSize_28_29_20const, btBoxShape__getEdge_28int_2c_20btVector3__2c_20btVector3__29_20const, btBoxShape__getVertex_28int_2c_20btVector3__29_20const, btBoxShape__getNumPreferredPenetrationDirections_28_29_20const, btBoxShape__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const, btBoxShape__isInside_28btVector3_20const__2c_20float_29_20const, btBoxShape__getPlaneEquation_28btVector4__2c_20int_29_20const, btCapsuleShape___btCapsuleShape_28_29, btBoxShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btBoxShape__setLocalScaling_28btVector3_20const__29, btCylinderShape__calculateLocalInertia_28float_2c_20btVector3__29_20const, btCylinderShape__getName_28_29_20const, btCapsuleShape__getAnisotropicRollingFrictionDirection_28_29_20const, btBoxShape__setMargin_28float_29, btCapsuleShape__calculateSerializeBufferSize_28_29_20const, btCylinderShape__serialize_28void__2c_20btSerializer__29_20const, btCylinderShape__localGetSupportingVertex_28btVector3_20const__29_20const, btCylinderShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btCylinderShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btCylinderShape__getRadius_28_29_20const, btCapsuleShape___btCapsuleShape_28_29, btCylinderShapeX__getName_28_29_20const, btCylinderShapeX__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btCylinderShapeX__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btCylinderShapeX__getRadius_28_29_20const, btCapsuleShape___btCapsuleShape_28_29, btCylinderShapeZ__getName_28_29_20const, btCylinderShapeZ__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btCylinderShapeZ__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btCylinderShape__getRadius_28_29_20const, btCapsuleShape___btCapsuleShape_28_29, btSphereShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btSphereShape__calculateLocalInertia_28float_2c_20btVector3__29_20const, btSphereShape__getName_28_29_20const, btConvexInternalShape__setMargin_28float_29, btSphereShape__getMargin_28_29_20const, btSphereShape__localGetSupportingVertex_28btVector3_20const__29_20const, btSphereShape__localGetSupportingVertexWithoutMargin_28btVector3_20const__29_20const, btSphereShape__batchedUnitVectorGetSupportingVertexWithoutMargin_28btVector3_20const__2c_20btVector3__2c_20int_29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btBvhTriangleMeshShape__performRaycast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29__MyNodeOverlapCallback__processNode_28int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btBvhTriangleMeshShape__performRaycast_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29__MyNodeOverlapCallback__processNode_28int_2c_20int_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btConcaveShape__setMargin_28float_29, btConcaveShape__getMargin_28_29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btCapsuleShape___btCapsuleShape_28_29, btStaticPlaneShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btStaticPlaneShape__setLocalScaling_28btVector3_20const__29, btStaticPlaneShape__getLocalScaling_28_29_20const, btTriangleShape__calculateLocalInertia_28float_2c_20btVector3__29_20const, btStaticPlaneShape__getName_28_29_20const, btConvexInternalShape__calculateSerializeBufferSize_28_29_20const, btStaticPlaneShape__serialize_28void__2c_20btSerializer__29_20const, btStaticPlaneShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const, btGImpactMeshShapePart___btGImpactMeshShapePart_28_29, btGImpactMeshShapePart___btGImpactMeshShapePart_28_29_1, btGImpactShapeInterface__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btGImpactMeshShapePart__setLocalScaling_28btVector3_20const__29, btGImpactMeshShapePart__getLocalScaling_28_29_20const, btGImpactMeshShapePart__calculateLocalInertia_28float_2c_20btVector3__29_20const, btGImpactMeshShapePart__getName_28_29_20const, btGImpactMeshShapePart__setMargin_28float_29, btGImpactMeshShapePart__getMargin_28_29_20const, btGImpactMeshShapePart__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const, btGImpactShapeInterface__calcLocalAABB_28_29, btGImpactShapeInterface__postUpdate_28_29, btGImpactShapeInterface__getShapeType_28_29_20const, btTriangleShape__getNumPlanes_28_29_20const, btGImpactMeshShapePart__getPrimitiveManager_28_29_20const, btGImpactMeshShapePart__getNumChildShapes_28_29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btTriangleShape__getNumPlanes_28_29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btGImpactMeshShapePart__getBulletTriangle_28int_2c_20btTriangleShapeEx__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btGImpactMeshShapePart__lockChildShapes_28_29_20const, btGImpactMeshShapePart__unlockChildShapes_28_29_20const, btGImpactShapeInterface__getChildAabb_28int_2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btBU_Simplex1to4__getIndex_28int_29_20const, btBU_Simplex1to4__getIndex_28int_29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btBU_Simplex1to4__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const, btGImpactMeshShapePart__processAllTrianglesRay_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const, btGImpactMeshShape___btGImpactMeshShape_28_29, btGImpactMeshShape___btGImpactMeshShape_28_29_1, btGImpactMeshShape__setLocalScaling_28btVector3_20const__29, btGImpactShapeInterface__getLocalScaling_28_29_20const, btGImpactMeshShape__calculateLocalInertia_28float_2c_20btVector3__29_20const, btGImpactMeshShape__getName_28_29_20const, btGImpactMeshShape__setMargin_28float_29, btGImpactMeshShape__calculateSerializeBufferSize_28_29_20const, btGImpactMeshShape__serialize_28void__2c_20btSerializer__29_20const, btGImpactMeshShape__processAllTriangles_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const, btGImpactMeshShape__calcLocalAABB_28_29, btGImpactMeshShape__postUpdate_28_29, btTriangleShape__getNumPreferredPenetrationDirections_28_29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btGImpactShapeInterface__lockChildShapes_28_29_20const, btGImpactShapeInterface__lockChildShapes_28_29_20const, btGImpactMeshShape__getChildAabb_28int_2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btBU_Simplex1to4__getIndex_28int_29_20const, btBU_Simplex1to4__getIndex_28int_29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btBU_Simplex1to4__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const, btGImpactMeshShape__processAllTrianglesRay_28btTriangleCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const, btGImpactMeshShapePart___btGImpactMeshShapePart_28_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btGImpactShapeInterface__setLocalScaling_28btVector3_20const__29, btGImpactShapeInterface__setMargin_28float_29, btBU_Simplex1to4__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const, btGImpactShapeInterface__lockChildShapes_28_29_20const, btGImpactShapeInterface__lockChildShapes_28_29_20const, btBU_Simplex1to4__getPlane_28btVector3__2c_20btVector3__2c_20int_29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btTriangleShape__getNumPlanes_28_29_20const, btGImpactMeshShapePart__TrimeshPrimitiveManager__get_primitive_count_28_29_20const, btGImpactMeshShapePart__TrimeshPrimitiveManager__get_primitive_box_28int_2c_20btAABB__29_20const, btGImpactMeshShapePart__TrimeshPrimitiveManager__get_primitive_triangle_28int_2c_20btPrimitiveTriangle__29_20const, btCompoundShape___btCompoundShape_28_29, btCompoundShape___btCompoundShape_28_29_1, btCompoundShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btCompoundShape__setLocalScaling_28btVector3_20const__29, btCompoundShape__getLocalScaling_28_29_20const, btCompoundShape__calculateLocalInertia_28float_2c_20btVector3__29_20const, btCompoundShape__getName_28_29_20const, btCompoundShape__setMargin_28float_29, btCompoundShape__getMargin_28_29_20const, btCompoundShape__calculateSerializeBufferSize_28_29_20const, btCompoundShape__serialize_28void__2c_20btSerializer__29_20const, btCompoundShape__removeChildShape_28btCollisionShape__29, btCompoundShape__recalculateLocalAabb_28_29, btTriangleIndexVertexArray___btTriangleIndexVertexArray_28_29, btTriangleIndexVertexArray___btTriangleIndexVertexArray_28_29_1, btStridingMeshInterface__InternalProcessAllTriangles_28btInternalTriangleIndexCallback__2c_20btVector3_20const__2c_20btVector3_20const__29_20const, btTriangleIndexVertexArray__getLockedVertexIndexBase_28unsigned_20char___2c_20int__2c_20PHY_ScalarType__2c_20int__2c_20unsigned_20char___2c_20int__2c_20int__2c_20PHY_ScalarType__2c_20int_29, btTriangleIndexVertexArray__getLockedVertexIndexBase_28unsigned_20char___2c_20int__2c_20PHY_ScalarType__2c_20int__2c_20unsigned_20char___2c_20int__2c_20int__2c_20PHY_ScalarType__2c_20int_29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btTriangleIndexVertexArray__getNumSubParts_28_29_20const, btTriangleIndexVertexArray__preallocateVertices_28int_29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btTriangleIndexVertexArray__hasPremadeAabb_28_29_20const, btTriangleIndexVertexArray__setPremadeAabb_28btVector3_20const__2c_20btVector3_20const__29_20const, btTriangleIndexVertexArray__getPremadeAabb_28btVector3__2c_20btVector3__29_20const, btStridingMeshInterface__calculateSerializeBufferSize_28_29_20const, btStridingMeshInterface__serialize_28void__2c_20btSerializer__29_20const, btTriangleMesh___btTriangleMesh_28_29, btTriangleMesh___btTriangleMesh_28_29_1, btTriangleMesh__preallocateVertices_28int_29, btTriangleMesh__preallocateIndices_28int_29, btConvexShape__localGetSupportVertexWithoutMarginNonVirtual_28btVector3_20const__29_20const, btConvexShape__localGetSupportVertexNonVirtual_28btVector3_20const__29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btGjkEpaPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btGjkPairDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29, btManifoldResult___btManifoldResult_28_29, btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29, btManifoldResult___btManifoldResult_28_29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btMinkowskiPenetrationDepthSolver__calcPenDepth_28btVoronoiSimplexSolver__2c_20btConvexShape_20const__2c_20btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__2c_20btVector3__2c_20btIDebugDraw__29__btIntermediateResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btGjkConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29, btManifoldResult___btManifoldResult_28_29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btPointCollector__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btConvexConvexAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btConvexConvexAlgorithm___btConvexConvexAlgorithm_28_29, btConvexConvexAlgorithm___btConvexConvexAlgorithm_28_29_1, btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btConvexConvexAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btConvexConvexAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btManifoldResult___btManifoldResult_28_29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btDummyResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29, btManifoldResult___btManifoldResult_28_29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btConvexConvexAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__btWithoutMarginResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29, btManifoldResult___btManifoldResult_28_29, btPerturbedContactResult__addContactPoint_28btVector3_20const__2c_20btVector3_20const__2c_20float_29, btCapsuleShape__setMargin_28float_29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btGImpactShapeInterface__lockChildShapes_28_29_20const, btLeaveProfileZoneDefault_28_29, btManifoldResult___btManifoldResult_28_29, btSubsimplexConvexCast__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29, btConvexConcaveCollisionAlgorithm___btConvexConcaveCollisionAlgorithm_28_29, btConvexConcaveCollisionAlgorithm___btConvexConcaveCollisionAlgorithm_28_29_1, btConvexConcaveCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btConvexConcaveCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btConvexConcaveCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btConvexTriangleCallback___btConvexTriangleCallback_28_29, btConvexTriangleCallback___btConvexTriangleCallback_28_29_1, btConvexTriangleCallback__processTriangle_28btVector3__2c_20int_2c_20int_29, btBU_Simplex1to4___btBU_Simplex1to4_28_29, btConvexInternalShape__getAabb_28btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btManifoldResult___btManifoldResult_28_29, btConvexConcaveCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29__LocalTriangleSphereCastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29, btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29, btCompoundCollisionAlgorithm___btCompoundCollisionAlgorithm_28_29_1, btCompoundCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btCompoundCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btCompoundCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btCompoundLeafCallback__Process_28btDbvtNode_20const__29, btDbvt__ICollide__Process_28btDbvtNode_20const__2c_20float_29, btDbvt__ICollide__Descent_28btDbvtNode_20const__29, btDbvt__ICollide__Descent_28btDbvtNode_20const__29, btHashedSimplePairCache___btHashedSimplePairCache_28_29, btHashedSimplePairCache___btHashedSimplePairCache_28_29_1, btHashedSimplePairCache__removeOverlappingPair_28int_2c_20int_29, btHashedSimplePairCache__addOverlappingPair_28int_2c_20int_29, btHashedSimplePairCache__getOverlappingPairArrayPtr_28_29, btCompoundCompoundCollisionAlgorithm___btCompoundCompoundCollisionAlgorithm_28_29, btCompoundCompoundCollisionAlgorithm___btCompoundCompoundCollisionAlgorithm_28_29_1, btCompoundCompoundCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btCompoundCompoundCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btCompoundCompoundCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btManifoldResult___btManifoldResult_28_29, btCompoundCompoundLeafCallback__Process_28btDbvtNode_20const__2c_20btDbvtNode_20const__29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btManifoldResult___btManifoldResult_28_29, btGImpactMeshShape__getChildAabb_28int_2c_20btTransform_20const__2c_20btVector3__2c_20btVector3__29_20const, btGImpactCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btSphereSphereCollisionAlgorithm___btSphereSphereCollisionAlgorithm_28_29, btSphereSphereCollisionAlgorithm___btSphereSphereCollisionAlgorithm_28_29_1, btSphereSphereCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btGImpactCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btSphereSphereCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btManifoldResult___btManifoldResult_28_29, SphereTriangleDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29, btSphereTriangleCollisionAlgorithm___btSphereTriangleCollisionAlgorithm_28_29, btSphereTriangleCollisionAlgorithm___btSphereTriangleCollisionAlgorithm_28_29_1, btSphereTriangleCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btGImpactCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btSphereSphereCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btManifoldResult___btManifoldResult_28_29, btBoxBoxDetector__getClosestPoints_28btDiscreteCollisionDetectorInterface__ClosestPointInput_20const__2c_20btDiscreteCollisionDetectorInterface__Result__2c_20btIDebugDraw__2c_20bool_29, btBoxBoxCollisionAlgorithm___btBoxBoxCollisionAlgorithm_28_29, btBoxBoxCollisionAlgorithm___btBoxBoxCollisionAlgorithm_28_29_1, btBoxBoxCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btGImpactCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btSphereSphereCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btConvexPlaneCollisionAlgorithm___btConvexPlaneCollisionAlgorithm_28_29, btConvexPlaneCollisionAlgorithm___btConvexPlaneCollisionAlgorithm_28_29_1, btConvexPlaneCollisionAlgorithm__processCollision_28btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btGImpactCollisionAlgorithm__calculateTimeOfImpact_28btCollisionObject__2c_20btCollisionObject__2c_20btDispatcherInfo_20const__2c_20btManifoldResult__29, btSphereSphereCollisionAlgorithm__getAllContactManifolds_28btAlignedObjectArray_btPersistentManifold____29, btDefaultCollisionConfiguration___btDefaultCollisionConfiguration_28_29, btDefaultCollisionConfiguration___btDefaultCollisionConfiguration_28_29_1, btDefaultCollisionConfiguration__getPersistentManifoldPool_28_29, btDefaultCollisionConfiguration__getCollisionAlgorithmPool_28_29, btDefaultCollisionConfiguration__getCollisionAlgorithmCreateFunc_28int_2c_20int_29, btDefaultCollisionConfiguration__getClosestPointsAlgorithmCreateFunc_28int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btConvexConcaveCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btConvexConcaveCollisionAlgorithm__SwappedCreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btCompoundCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btCompoundCompoundCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btCompoundCollisionAlgorithm__SwappedCreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btEmptyAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btSphereSphereCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btSphereTriangleCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btBoxBoxCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btManifoldResult___btManifoldResult_28_29, btConvexPlaneCollisionAlgorithm__CreateFunc__CreateCollisionAlgorithm_28btCollisionAlgorithmConstructionInfo__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionObjectWrapper_20const__29, btHashedOverlappingPairCache___btHashedOverlappingPairCache_28_29, btHashedOverlappingPairCache___btHashedOverlappingPairCache_28_29_1, btHashedOverlappingPairCache__addOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29, btHashedOverlappingPairCache__removeOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__2c_20btDispatcher__29, btHashedOverlappingPairCache__removeOverlappingPairsContainingProxy_28btBroadphaseProxy__2c_20btDispatcher__29, btHashedSimplePairCache__getOverlappingPairArrayPtr_28_29, btHashedSimplePairCache__getOverlappingPairArrayPtr_28_29, btHashedOverlappingPairCache__getOverlappingPairArray_28_29, btHashedOverlappingPairCache__cleanOverlappingPair_28btBroadphasePair__2c_20btDispatcher__29, btHashedOverlappingPairCache__getNumOverlappingPairs_28_29_20const, btHashedOverlappingPairCache__cleanProxyFromPairs_28btBroadphaseProxy__2c_20btDispatcher__29, btHashedOverlappingPairCache__setOverlapFilterCallback_28btOverlapFilterCallback__29, btHashedOverlappingPairCache__processAllOverlappingPairs_28btOverlapCallback__2c_20btDispatcher__29, btHashedOverlappingPairCache__findPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29, btConvexInternalShape__getNumPreferredPenetrationDirections_28_29_20const, btHashedOverlappingPairCache__setInternalGhostPairCallback_28btOverlappingPairCallback__29, btHashedOverlappingPairCache__sortOverlappingPairs_28btDispatcher__29, btManifoldResult___btManifoldResult_28_29, btHashedOverlappingPairCache__cleanProxyFromPairs_28btBroadphaseProxy__2c_20btDispatcher__29__CleanPairCallback__processOverlap_28btBroadphasePair__29, btManifoldResult___btManifoldResult_28_29, btHashedOverlappingPairCache__removeOverlappingPairsContainingProxy_28btBroadphaseProxy__2c_20btDispatcher__29__RemovePairCallback__processOverlap_28btBroadphasePair__29, btDbvtBroadphase___btDbvtBroadphase_28_29, btDbvtBroadphase___btDbvtBroadphase_28_29_1, btDbvtBroadphase__createProxy_28btVector3_20const__2c_20btVector3_20const__2c_20int_2c_20void__2c_20int_2c_20int_2c_20btDispatcher__29, btDbvtBroadphase__destroyProxy_28btBroadphaseProxy__2c_20btDispatcher__29, btDbvtBroadphase__setAabb_28btBroadphaseProxy__2c_20btVector3_20const__2c_20btVector3_20const__2c_20btDispatcher__29, btDbvtBroadphase__getAabb_28btBroadphaseProxy__2c_20btVector3__2c_20btVector3__29_20const, btDbvtBroadphase__rayTest_28btVector3_20const__2c_20btVector3_20const__2c_20btBroadphaseRayCallback__2c_20btVector3_20const__2c_20btVector3_20const__29, btDbvtBroadphase__aabbTest_28btVector3_20const__2c_20btVector3_20const__2c_20btBroadphaseAabbCallback__29, btDbvtBroadphase__calculateOverlappingPairs_28btDispatcher__29, btBU_Simplex1to4__getNumVertices_28_29_20const, btBU_Simplex1to4__getNumVertices_28_29_20const, btDbvtBroadphase__getBroadphaseAabb_28btVector3__2c_20btVector3__29_20const, btDbvtBroadphase__resetPool_28btDispatcher__29, btGImpactShapeInterface__lockChildShapes_28_29_20const, btManifoldResult___btManifoldResult_28_29, btDbvtTreeCollider__Process_28btDbvtNode_20const__2c_20btDbvtNode_20const__29, btDbvtTreeCollider__Process_28btDbvtNode_20const__29, btManifoldResult___btManifoldResult_28_29, BroadphaseRayTester__Process_28btDbvtNode_20const__29, btManifoldResult___btManifoldResult_28_29, BroadphaseRayTester__Process_28btDbvtNode_20const__29, btRigidBody___btRigidBody_28_29, btRigidBody___btRigidBody_28_29_1, btRigidBody__calculateSerializeBufferSize_28_29_20const, btRigidBody__serialize_28void__2c_20btSerializer__29_20const, btRigidBody__serializeSingleObject_28btSerializer__29_20const, gResolveSingleConstraintRowGeneric_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29, gResolveSingleConstraintRowLowerLimit_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29, gResolveSplitPenetrationImpulse_scalar_reference_28btSolverBody__2c_20btSolverBody__2c_20btSolverConstraint_20const__29, btSequentialImpulseConstraintSolver___btSequentialImpulseConstraintSolver_28_29, btSequentialImpulseConstraintSolver___btSequentialImpulseConstraintSolver_28_29_1, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btSequentialImpulseConstraintSolver__solveGroup_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__2c_20btDispatcher__29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const, btSequentialImpulseConstraintSolver__reset_28_29, btTriangleShape__getNumPlanes_28_29_20const, btSequentialImpulseConstraintSolver__convertContacts_28btPersistentManifold___2c_20int_2c_20btContactSolverInfo_20const__29, btSequentialImpulseConstraintSolver__solveGroupCacheFriendlySplitImpulseIterations_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29, btSequentialImpulseConstraintSolver__solveGroupCacheFriendlyFinish_28btCollisionObject___2c_20int_2c_20btContactSolverInfo_20const__29, btSequentialImpulseConstraintSolver__solveSingleIteration_28int_2c_20btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29, btSequentialImpulseConstraintSolver__solveGroupCacheFriendlySetup_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29, btSequentialImpulseConstraintSolver__solveGroupCacheFriendlyIterations_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20btTypedConstraint___2c_20int_2c_20btContactSolverInfo_20const__2c_20btIDebugDraw__29, btManifoldResult___btManifoldResult_28_29, btContinuousConvexCollision__calcTimeOfImpact_28btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btConvexCast__CastResult__29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btTriangleRaycastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29_1, btTriangleConvexcastCallback__processTriangle_28btVector3__2c_20int_2c_20int_29, btCollisionWorld___btCollisionWorld_28_29, btCollisionWorld___btCollisionWorld_28_29_1, btCollisionWorld__updateAabbs_28_29, btCollisionWorld__computeOverlappingPairs_28_29, btCollisionWorld__setDebugDrawer_28btIDebugDraw__29, btCollisionDispatcher__getInternalManifoldPool_28_29, btCollisionWorld__debugDrawWorld_28_29, btCollisionWorld__debugDrawObject_28btTransform_20const__2c_20btCollisionShape_20const__2c_20btVector3_20const__29, btCollisionWorld__rayTest_28btVector3_20const__2c_20btVector3_20const__2c_20btCollisionWorld__RayResultCallback__29_20const, btCollisionWorld__addCollisionObject_28btCollisionObject__2c_20int_2c_20int_29, btCollisionWorld__removeCollisionObject_28btCollisionObject__29, btCollisionWorld__performDiscreteCollisionDetection_28_29, btCollisionWorld__serialize_28btSerializer__29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__BridgeTriangleRaycastCallback__reportHit_28btVector3_20const__2c_20float_2c_20int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__BridgeTriangleRaycastCallback__reportHit_28btVector3_20const__2c_20float_2c_20int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__RayTester__Process_28btDbvtNode_20const__29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__LocalInfoAdder2__needsCollision_28btBroadphaseProxy__29_20const, btCollisionWorld__rayTestSingleInternal_28btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__RayResultCallback__29__LocalInfoAdder2__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__BridgeTriangleConvexcastCallback__reportHit_28btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__BridgeTriangleConvexcastCallback__reportHit_28btVector3_20const__2c_20btVector3_20const__2c_20float_2c_20int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback__Process_28btDbvtNode_20const__29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback__ProcessChild_28int_2c_20btTransform_20const__2c_20btCollisionShape_20const__29__LocalInfoAdder__needsCollision_28btBroadphaseProxy__29_20const, btCollisionWorld__objectQuerySingleInternal_28btConvexShape_20const__2c_20btTransform_20const__2c_20btTransform_20const__2c_20btCollisionObjectWrapper_20const__2c_20btCollisionWorld__ConvexResultCallback__2c_20float_29__btCompoundLeafCallback__ProcessChild_28int_2c_20btTransform_20const__2c_20btCollisionShape_20const__29__LocalInfoAdder__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btSingleRayCallback__process_28btBroadphaseProxy_20const__29, btManifoldResult___btManifoldResult_28_29, btSingleSweepCallback__process_28btBroadphaseProxy_20const__29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, DebugDrawcallback__processTriangle_28btVector3__2c_20int_2c_20int_29, DebugDrawcallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29, non_virtual_20thunk_20to_20DebugDrawcallback___DebugDrawcallback_28_29, non_virtual_20thunk_20to_20DebugDrawcallback___DebugDrawcallback_28_29_1, non_virtual_20thunk_20to_20DebugDrawcallback__internalProcessTriangleIndex_28btVector3__2c_20int_2c_20int_29, btSimulationIslandManager___btSimulationIslandManager_28_29, btSimulationIslandManager___btSimulationIslandManager_28_29_1, btSimulationIslandManager__updateActivationState_28btCollisionWorld__2c_20btDispatcher__29, btSimulationIslandManager__storeIslandActivationState_28btCollisionWorld__29, btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29, btDiscreteDynamicsWorld___btDiscreteDynamicsWorld_28_29_1, btDiscreteDynamicsWorld__debugDrawWorld_28_29, btDiscreteDynamicsWorld__addCollisionObject_28btCollisionObject__2c_20int_2c_20int_29, btDiscreteDynamicsWorld__removeCollisionObject_28btCollisionObject__29, btDiscreteDynamicsWorld__serialize_28btSerializer__29, btDiscreteDynamicsWorld__stepSimulation_28float_2c_20int_2c_20float_29, btDiscreteDynamicsWorld__addConstraint_28btTypedConstraint__2c_20bool_29, btDiscreteDynamicsWorld__removeConstraint_28btTypedConstraint__29, btDiscreteDynamicsWorld__addAction_28btActionInterface__29, btDiscreteDynamicsWorld__removeAction_28btActionInterface__29, btDiscreteDynamicsWorld__setGravity_28btVector3_20const__29, btDiscreteDynamicsWorld__getGravity_28_29_20const, btDiscreteDynamicsWorld__synchronizeMotionStates_28_29, btDiscreteDynamicsWorld__addRigidBody_28btRigidBody__29, btDiscreteDynamicsWorld__addRigidBody_28btRigidBody__2c_20int_2c_20int_29, btDiscreteDynamicsWorld__removeRigidBody_28btRigidBody__29, btDiscreteDynamicsWorld__setConstraintSolver_28btConstraintSolver__29, btDiscreteDynamicsWorld__getConstraintSolver_28_29, btDiscreteDynamicsWorld__getNumConstraints_28_29_20const, btDiscreteDynamicsWorld__getConstraint_28int_29, btDiscreteDynamicsWorld__getConstraint_28int_29, btTriangleShape__getNumPreferredPenetrationDirections_28_29_20const, btDiscreteDynamicsWorld__clearForces_28_29, btDiscreteDynamicsWorld__addVehicle_28btActionInterface__29, btDiscreteDynamicsWorld__removeVehicle_28btActionInterface__29, btDiscreteDynamicsWorld__addVehicle_28btActionInterface__29, btDiscreteDynamicsWorld__removeVehicle_28btActionInterface__29, btDiscreteDynamicsWorld__predictUnconstraintMotion_28float_29, btDiscreteDynamicsWorld__integrateTransforms_28float_29, btDiscreteDynamicsWorld__calculateSimulationIslands_28_29, btDiscreteDynamicsWorld__solveConstraints_28btContactSolverInfo__29, btDiscreteDynamicsWorld__updateActivationState_28float_29, btDiscreteDynamicsWorld__internalSingleStepSimulation_28float_29, btDiscreteDynamicsWorld__createPredictiveContacts_28float_29, btDiscreteDynamicsWorld__saveKinematicState_28float_29, btDiscreteDynamicsWorld__debugDrawConstraint_28btTypedConstraint__29, btDiscreteDynamicsWorld__applyGravity_28_29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btDiscreteDynamicsWorld__updateVehicles_28float_29, InplaceSolverIslandCallback___InplaceSolverIslandCallback_28_29, InplaceSolverIslandCallback___InplaceSolverIslandCallback_28_29_1, InplaceSolverIslandCallback__processIsland_28btCollisionObject___2c_20int_2c_20btPersistentManifold___2c_20int_2c_20int_29, btManifoldResult___btManifoldResult_28_29, btClosestNotMeConvexResultCallback__needsCollision_28btBroadphaseProxy__29_20const, btClosestNotMeConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29, btGhostObject___btGhostObject_28_29, btGhostObject___btGhostObject_28_29_1, btGhostObject__addOverlappingObjectInternal_28btBroadphaseProxy__2c_20btBroadphaseProxy__29, btGhostObject__removeOverlappingObjectInternal_28btBroadphaseProxy__2c_20btDispatcher__2c_20btBroadphaseProxy__29, btPairCachingGhostObject___btPairCachingGhostObject_28_29, btPairCachingGhostObject___btPairCachingGhostObject_28_29_1, btPairCachingGhostObject__addOverlappingObjectInternal_28btBroadphaseProxy__2c_20btBroadphaseProxy__29, btPairCachingGhostObject__removeOverlappingObjectInternal_28btBroadphaseProxy__2c_20btDispatcher__2c_20btBroadphaseProxy__29, btKinematicCharacterController___btKinematicCharacterController_28_29, btKinematicCharacterController___btKinematicCharacterController_28_29_1, btKinematicCharacterController__updateAction_28btCollisionWorld__2c_20float_29, btTriangleIndexVertexArray__preallocateVertices_28int_29, btKinematicCharacterController__setWalkDirection_28btVector3_20const__29, btKinematicCharacterController__setVelocityForTimeInterval_28btVector3_20const__2c_20float_29, btKinematicCharacterController__reset_28btCollisionWorld__29, btKinematicCharacterController__warp_28btVector3_20const__29, btKinematicCharacterController__preStep_28btCollisionWorld__29, btKinematicCharacterController__playerStep_28btCollisionWorld__2c_20float_29, btKinematicCharacterController__canJump_28_29_20const, btKinematicCharacterController__jump_28btVector3_20const__29, btKinematicCharacterController__onGround_28_29_20const, btKinematicCharacterController__setUpInterpolate_28bool_29, btKinematicCharacterController__needsCollision_28btCollisionObject_20const__2c_20btCollisionObject_20const__29, btKinematicCharacterController__setAngularVelocity_28btVector3_20const__29, btKinematicCharacterController__getAngularVelocity_28_29_20const, btKinematicCharacterController__setLinearVelocity_28btVector3_20const__29, btKinematicCharacterController__getLinearVelocity_28_29_20const, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__ConvexResultCallback__needsCollision_28btBroadphaseProxy__29_20const, btKinematicClosestNotMeConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, LayaMotionState__getWorldTransform_28btTransform__29, LayaMotionState__setWorldTransform_28btTransform_20const__29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__RayResultCallback__needsCollision_28btBroadphaseProxy__29_20const, btCollisionWorld__ClosestRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29, btCollisionWorld__AllHitsRayResultCallback___AllHitsRayResultCallback_28_29, btCollisionWorld__AllHitsRayResultCallback___AllHitsRayResultCallback_28_29_1, btCollisionWorld__AllHitsRayResultCallback__addSingleResult_28btCollisionWorld__LocalRayResult__2c_20bool_29, btManifoldResult___btManifoldResult_28_29, btCollisionWorld__ClosestConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29, btCollisionWorld__AllConvexResultCallback___AllConvexResultCallback_28_29, btCollisionWorld__AllConvexResultCallback___AllConvexResultCallback_28_29_1, btCollisionWorld__AllConvexResultCallback__addSingleResult_28btCollisionWorld__LocalConvexResult__2c_20bool_29, btCollisionAlgorithm___btCollisionAlgorithm_28_29, btManifoldResult___btManifoldResult_28_29, btGhostPairCallback__addOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__29, btGhostPairCallback__removeOverlappingPair_28btBroadphaseProxy__2c_20btBroadphaseProxy__2c_20btDispatcher__29, btConvexInternalShape__getPreferredPenetrationDirection_28int_2c_20btVector3__29_20const];
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new global.Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = newHEAP8;
   HEAP8 = new global.Int8Array(newBuffer);
   HEAP16 = new global.Int16Array(newBuffer);
   HEAP32 = new global.Int32Array(newBuffer);
   HEAPU8 = new global.Uint8Array(newBuffer);
   HEAPU16 = new global.Uint16Array(newBuffer);
   HEAPU32 = new global.Uint32Array(newBuffer);
   HEAPF32 = new global.Float32Array(newBuffer);
   HEAPF64 = new global.Float64Array(newBuffer);
   buffer = newBuffer;
   //memory.buffer = newBuffer;
  }
  return oldPages;
 }
 
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "btGImpactCollisionAlgorithm_RegisterAlgorithm": btGImpactCollisionAlgorithm_RegisterAlgorithm, 
  "btVector3_create": btVector3_create, 
  "btVector3_setValue": btVector3_setValue, 
  "btVector3_x": btVector3_x, 
  "btVector3_y": btVector3_y, 
  "btVector3_z": btVector3_z, 
  "btVector4_create": btVector4_create, 
  "btVector4_setValue": btVector4_setValue, 
  "btQuaternion_create": btQuaternion_create, 
  "btQuaternion_setValue": btVector4_setValue, 
  "btQuaternion_x": btVector3_x, 
  "btQuaternion_y": btVector3_y, 
  "btQuaternion_z": btVector3_z, 
  "btQuaternion_w": btQuaternion_w, 
  "btTransform_create": btTransform_create, 
  "btTransform_setOrigin": btTransform_setOrigin, 
  "btTransform_setRotation": btTransform_setRotation, 
  "btTransform_getOrigin": btTransform_getOrigin, 
  "btTransform_getRotation": btTransform_getRotation, 
  "LayaMotionState_create": LayaMotionState_create, 
  "layaMotionState_set_rigidBodyID": layaMotionState_set_rigidBodyID, 
  "btCollisionObject_create": btCollisionObject_create, 
  "btCollisionObject_setContactProcessingThreshold": btCollisionObject_setContactProcessingThreshold, 
  "btCollisionObject_setActivationState": btCollisionObject_setActivationState, 
  "btCollisionObject_forceActivationState": btCollisionObject_forceActivationState, 
  "btCollisionObject_activate": btCollisionObject_activate, 
  "btCollisionObject_isActive": btCollisionObject_isActive, 
  "btCollisionObject_setRestitution": btCollisionObject_setRestitution, 
  "btCollisionObject_setFriction": btCollisionObject_setFriction, 
  "btCollisionObject_setRollingFriction": btCollisionObject_setRollingFriction, 
  "btCollisionObject_getCollisionFlags": btCollisionObject_getCollisionFlags, 
  "btCollisionObject_setCollisionFlags": btCollisionObject_setCollisionFlags, 
  "btCollisionObject_getWorldTransform": btHashedOverlappingPairCache__getOverlappingPairArray_28_29, 
  "btCollisionObject_setCollisionShape": btCollisionObject_setCollisionShape, 
  "btCollisionObject_getCcdMotionThreshold": btCollisionObject_getCcdMotionThreshold, 
  "btCollisionObject_setCcdMotionThreshold": btCollisionObject_setCcdMotionThreshold, 
  "btCollisionObject_getCcdSweptSphereRadius": btCollisionObject_getCcdSweptSphereRadius, 
  "btCollisionObject_setCcdSweptSphereRadius": btCollisionObject_setCcdSweptSphereRadius, 
  "btCollisionObject_getUserIndex": btCollisionObject_getUserIndex, 
  "btCollisionObject_setUserIndex": btCollisionObject_setUserIndex, 
  "btCollisionObject_getActivationState": btCollisionObject_getActivationState, 
  "btCollisionObject_setInterpolationAngularVelocity": btCollisionObject_setInterpolationAngularVelocity, 
  "btCollisionObject_setInterpolationLinearVelocity": btCollisionObject_setInterpolationLinearVelocity, 
  "RayResultCallback_hasHit": RayResultCallback_hasHit, 
  "RayResultCallback_set_m_collisionFilterGroup": RayResultCallback_set_m_collisionFilterGroup, 
  "RayResultCallback_set_m_collisionFilterMask": RayResultCallback_set_m_collisionFilterMask, 
  "RayResultCallback_get_m_closestHitFraction": RayResultCallback_get_m_closestHitFraction, 
  "RayResultCallback_set_m_closestHitFraction": RayResultCallback_set_m_closestHitFraction, 
  "RayResultCallback_get_m_collisionObject": btDefaultCollisionConfiguration__getPersistentManifoldPool_28_29, 
  "RayResultCallback_set_m_collisionObject": RayResultCallback_set_m_collisionObject, 
  "ClosestRayResultCallback_create": ClosestRayResultCallback_create, 
  "ClosestRayResultCallback_get_m_rayFromWorld": ClosestRayResultCallback_get_m_rayFromWorld, 
  "ClosestRayResultCallback_set_m_rayFromWorld": ClosestRayResultCallback_set_m_rayFromWorld, 
  "ClosestRayResultCallback_get_m_rayToWorld": ClosestRayResultCallback_get_m_rayToWorld, 
  "ClosestRayResultCallback_set_m_rayToWorld": ClosestRayResultCallback_set_m_rayToWorld, 
  "ClosestRayResultCallback_get_m_hitNormalWorld": btGImpactShapeInterface__getLocalScaling_28_29_20const, 
  "ClosestRayResultCallback_get_m_hitPointWorld": btStaticPlaneShape__getLocalScaling_28_29_20const, 
  "tBtCollisionObjectArray_size": tBtCollisionObjectArray_size, 
  "tBtCollisionObjectArray_at": tBtCollisionObjectArray_at, 
  "tBtCollisionObjectArray_clear": tBtCollisionObjectArray_clear, 
  "tVector3Array_at": tVector3Array_at, 
  "tVector3Array_clear": tBtCollisionObjectArray_clear, 
  "tScalarArray_at": tScalarArray_at, 
  "tScalarArray_clear": tBtCollisionObjectArray_clear, 
  "AllHitsRayResultCallback_create": AllHitsRayResultCallback_create, 
  "AllHitsRayResultCallback_get_m_rayFromWorld": AllHitsRayResultCallback_get_m_rayFromWorld, 
  "AllHitsRayResultCallback_set_m_rayFromWorld": AllHitsRayResultCallback_set_m_rayFromWorld, 
  "AllHitsRayResultCallback_get_m_rayToWorld": AllHitsRayResultCallback_get_m_rayToWorld, 
  "AllHitsRayResultCallback_set_m_rayToWorld": AllHitsRayResultCallback_set_m_rayToWorld, 
  "AllHitsRayResultCallback_get_m_hitPointWorld": AllHitsRayResultCallback_get_m_hitPointWorld, 
  "AllHitsRayResultCallback_get_m_hitNormalWorld": AllHitsRayResultCallback_get_m_hitNormalWorld, 
  "AllHitsRayResultCallback_get_m_collisionObjects": ClosestRayResultCallback_get_m_rayFromWorld, 
  "AllHitsRayResultCallback_get_m_hitFractions": AllHitsRayResultCallback_get_m_hitFractions, 
  "btManifoldPoint_get_m_positionWorldOnA": btTransform_getOrigin, 
  "btManifoldPoint_get_m_positionWorldOnB": btManifoldPoint_get_m_positionWorldOnB, 
  "btManifoldPoint_get_m_normalWorldOnB": btManifoldPoint_get_m_normalWorldOnB, 
  "btManifoldPoint_getDistance": btManifoldPoint_getDistance, 
  "ConvexResultCallback_hasHit": ConvexResultCallback_hasHit, 
  "ConvexResultCallback_set_m_collisionFilterGroup": RayResultCallback_set_m_collisionObject, 
  "ConvexResultCallback_set_m_collisionFilterMask": RayResultCallback_set_m_collisionObject, 
  "ConvexResultCallback_get_m_closestHitFraction": btVector3_y, 
  "ConvexResultCallback_set_m_closestHitFraction": RayResultCallback_set_m_closestHitFraction, 
  "ClosestConvexResultCallback_create": ClosestConvexResultCallback_create, 
  "ClosestConvexResultCallback_get_m_hitNormalWorld": btTransform_getOrigin, 
  "ClosestConvexResultCallback_get_m_hitPointWorld": btManifoldPoint_get_m_normalWorldOnB, 
  "ClosestConvexResultCallback_get_m_hitCollisionObject": ClosestConvexResultCallback_get_m_hitCollisionObject, 
  "ClosestConvexResultCallback_set_m_hitCollisionObject": ClosestConvexResultCallback_set_m_hitCollisionObject, 
  "AllConvexResultCallback_create": AllConvexResultCallback_create, 
  "AllConvexResultCallback_get_m_hitNormalWorld": AllConvexResultCallback_get_m_hitNormalWorld, 
  "AllConvexResultCallback_get_m_hitPointWorld": AllConvexResultCallback_get_m_hitPointWorld, 
  "AllConvexResultCallback_get_m_hitFractions": AllConvexResultCallback_get_m_hitFractions, 
  "AllConvexResultCallback_get_m_collisionObjects": btConvexInternalShape__getLocalScaling_28_29_20const, 
  "btCollisionShape_getLocalScaling": btCollisionShape_getLocalScaling, 
  "btCollisionShape_setLocalScaling": btCollisionShape_setLocalScaling, 
  "btCollisionShape_calculateLocalInertia": btCollisionShape_calculateLocalInertia, 
  "btBoxShape_create": btBoxShape_create, 
  "btCapsuleShape_create": btCapsuleShape_create, 
  "btCapsuleShapeX_create": btCapsuleShapeX_create, 
  "btCapsuleShapeZ_create": btCapsuleShapeZ_create, 
  "btCylinderShape_create": btCylinderShape_create, 
  "btCylinderShapeX_create": btCylinderShapeX_create, 
  "btCylinderShapeZ_create": btCylinderShapeZ_create, 
  "btSphereShape_create": btSphereShape_create, 
  "btConeShape_create": btConeShape_create, 
  "btConeShapeX_create": btConeShapeX_create, 
  "btConeShapeZ_create": btConeShapeZ_create, 
  "btStaticPlaneShape_create": btStaticPlaneShape_create, 
  "btGImpactShapeInterface_updateBound": btGImpactShapeInterface_updateBound, 
  "btGImpactMeshShape_create": btGImpactMeshShape_create, 
  "btCompoundShape_create": btCompoundShape_create, 
  "btCompoundShape_addChildShape": btCompoundShape_addChildShape, 
  "btCompoundShape_removeChildShapeByIndex": btCompoundShape_removeChildShapeByIndex, 
  "btCompoundShape_getChildShape": btCompoundShape_getChildShape, 
  "btCompoundShape_updateChildTransform": btCompoundShape_updateChildTransform, 
  "btTriangleMesh_create": btTriangleMesh_create, 
  "btTriangleMesh_addTriangle": btTriangleMesh_addTriangle, 
  "btDefaultCollisionConfiguration_create": btDefaultCollisionConfiguration_create, 
  "btPersistentManifold_getBody0": btPersistentManifold_getBody0, 
  "btPersistentManifold_getBody1": btPersistentManifold_getBody1, 
  "btPersistentManifold_getNumContacts": btPersistentManifold_getNumContacts, 
  "btPersistentManifold_getContactPoint": btPersistentManifold_getContactPoint, 
  "btDispatcher_getNumManifolds": btDispatcher_getNumManifolds, 
  "btDispatcher_getManifoldByIndexInternal": btDispatcher_getManifoldByIndexInternal, 
  "btCollisionDispatcher_create": btCollisionDispatcher_create, 
  "btOverlappingPairCache_setInternalGhostPairCallback": btOverlappingPairCache_setInternalGhostPairCallback, 
  "btDbvtBroadphase_create": btDbvtBroadphase_create, 
  "btDbvtBroadphase_getOverlappingPairCache": btDispatcher_getNumManifolds, 
  "btRigidBodyConstructionInfo_create": btRigidBodyConstructionInfo_create, 
  "btRigidBodyConstructionInfo_destroy": btRigidBodyConstructionInfo_destroy, 
  "btRigidBody_create": btRigidBody_create, 
  "btRigidBody_setCenterOfMassTransform": btRigidBody__proceedToTransform_28btTransform_20const__29, 
  "btRigidBody_setSleepingThresholds": btRigidBody_setSleepingThresholds, 
  "btRigidBody_getLinearSleepingThreshold": btRigidBody_getLinearSleepingThreshold, 
  "btRigidBody_getAngularSleepingThreshold": btRigidBody_getAngularSleepingThreshold, 
  "btRigidBody_setDamping": btRigidBody_setDamping, 
  "btRigidBody_setMassProps": btRigidBody_setMassProps, 
  "btRigidBody_setLinearFactor": btRigidBody_setLinearFactor, 
  "btRigidBody_applyTorque": btRigidBody_applyTorque, 
  "btRigidBody_applyForce": btRigidBody_applyForce, 
  "btRigidBody_applyCentralForce": btRigidBody_applyCentralForce, 
  "btRigidBody_applyTorqueImpulse": btRigidBody_applyTorqueImpulse, 
  "btRigidBody_applyImpulse": btRigidBody_applyImpulse, 
  "btRigidBody_applyCentralImpulse": btRigidBody_applyCentralImpulse, 
  "btRigidBody_updateInertiaTensor": btRigidBody_updateInertiaTensor, 
  "btRigidBody_getLinearVelocity": btRigidBody_getLinearVelocity, 
  "btRigidBody_getAngularVelocity": btRigidBody_getAngularVelocity, 
  "btRigidBody_setLinearVelocity": btRigidBody_setLinearVelocity, 
  "btRigidBody_setAngularVelocity": btRigidBody_setAngularVelocity, 
  "btRigidBody_setAngularFactor": btRigidBody_setAngularFactor, 
  "btRigidBody_getGravity": btRigidBody_getGravity, 
  "btRigidBody_setGravity": btRigidBody_setGravity, 
  "btRigidBody_getTotalForce": btRigidBody_getTotalForce, 
  "btRigidBody_getTotalTorque": btRigidBody_getTotalTorque, 
  "btRigidBody_getFlags": btRigidBody_getFlags, 
  "btRigidBody_setFlags": btRigidBody_setFlags, 
  "btRigidBody_clearForces": btRigidBody_clearForces, 
  "btSequentialImpulseConstraintSolver_create": btSequentialImpulseConstraintSolver_create, 
  "btCollisionWorld_get_m_useContinuous": btCollisionWorld_get_m_useContinuous, 
  "btCollisionWorld_set_m_useContinuous": btCollisionWorld_set_m_useContinuous, 
  "btCollisionWorld_rayTest": btCollisionWorld_rayTest, 
  "btCollisionWorld_getDispatchInfo": btCollisionWorld_getDispatchInfo, 
  "btCollisionWorld_addCollisionObject": btCollisionWorld_addCollisionObject, 
  "btCollisionWorld_removeCollisionObject": btCollisionWorld_removeCollisionObject, 
  "btCollisionWorld_convexSweepTest": btCollisionWorld_convexSweepTest, 
  "btDynamicsWorld_addAction": btDiscreteDynamicsWorld__addVehicle_28btActionInterface__29, 
  "btDynamicsWorld_removeAction": btDiscreteDynamicsWorld__removeVehicle_28btActionInterface__29, 
  "btDynamicsWorld_getSolverInfo": btDynamicsWorld_getSolverInfo, 
  "btDiscreteDynamicsWorld_create": btDiscreteDynamicsWorld_create, 
  "btDiscreteDynamicsWorld_setGravity": btDiscreteDynamicsWorld_setGravity, 
  "btDiscreteDynamicsWorld_getGravity": btDiscreteDynamicsWorld_getGravity, 
  "btDiscreteDynamicsWorld_addRigidBody": btDiscreteDynamicsWorld_addRigidBody, 
  "btDiscreteDynamicsWorld_removeRigidBody": btDiscreteDynamicsWorld_removeRigidBody, 
  "btDiscreteDynamicsWorld_stepSimulation": btDiscreteDynamicsWorld_stepSimulation, 
  "btDiscreteDynamicsWorld_clearForces": btDiscreteDynamicsWorld_clearForces, 
  "btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution": btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution, 
  "btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution": btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution, 
  "btKinematicCharacterController_create": btKinematicCharacterController_create, 
  "btKinematicCharacterController_setWalkDirection": btKinematicCharacterController_setWalkDirection, 
  "btKinematicCharacterController_setFallSpeed": btKinematicCharacterController_setFallSpeed, 
  "btKinematicCharacterController_setJumpSpeed": btKinematicCharacterController_setJumpSpeed, 
  "btKinematicCharacterController_setMaxSlope": btKinematicCharacterController_setMaxSlope, 
  "btKinematicCharacterController_onGround": btKinematicCharacterController__canJump_28_29_20const, 
  "btKinematicCharacterController_jump": btKinematicCharacterController_jump, 
  "btKinematicCharacterController_setGravity": btKinematicCharacterController_setGravity, 
  "btPairCachingGhostObject_create": btPairCachingGhostObject_create, 
  "btGhostPairCallback_create": btGhostPairCallback_create
 };
}

var memasmFunc = new ArrayBuffer(initialMemory);
var assignasmFunc = (
    function(mem) {
      var _mem = new Uint8Array(mem);
      return function(offset, s) {
        var bytes;
        if (typeof Buffer === 'undefined') {
          bytes = atob(s);
          for (var i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes.charCodeAt(i);
        } else {
          bytes = Buffer.from(s, 'base64');
          for (var i = 0; i < bytes.length; i++)
            _mem[offset + i] = bytes[i];
        }
      }
    }
  )(memasmFunc);
assignasmFunc(2848, "BQ==");
assignasmFunc(2860, "AQ==");
assignasmFunc(2880, "AgAAAAMAAAAMBA==");
assignasmFunc(2904, "AgAAAAAAAAD/////");
assignasmFunc(2960, "GwAAABwAAAAdAAAAHgAAAArXozwBAAAAbxKDOgEAAACIAQAAiQEAAAAAAEA=");
assignasmFunc(3008, "IAs=");
assignasmFunc(3025, "GRJEOwI/LEcUPTMwChsGRktFNw9JDhcDQB08KzYfSi0cASAlKSEIDBUWIi4QOD4LNDEYL0EJOREjQzJCOgUEJignDSoeNQcaSBMkTP8AAFN1Y2Nlc3MASWxsZWdhbCBieXRlIHNlcXVlbmNlAERvbWFpbiBlcnJvcgBSZXN1bHQgbm90IHJlcHJlc2VudGFibGUATm90IGEgdHR5AFBlcm1pc3Npb24gZGVuaWVkAE9wZXJhdGlvbiBub3QgcGVybWl0dGVkAE5vIHN1Y2ggZmlsZSBvciBkaXJlY3RvcnkATm8gc3VjaCBwcm9jZXNzAEZpbGUgZXhpc3RzAFZhbHVlIHRvbyBsYXJnZSBmb3IgZGF0YSB0eXBlAE5vIHNwYWNlIGxlZnQgb24gZGV2aWNlAE91dCBvZiBtZW1vcnkAUmVzb3VyY2UgYnVzeQBJbnRlcnJ1cHRlZCBzeXN0ZW0gY2FsbABSZXNvdXJjZSB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZQBJbnZhbGlkIHNlZWsAQ3Jvc3MtZGV2aWNlIGxpbmsAUmVhZC1vbmx5IGZpbGUgc3lzdGVtAERpcmVjdG9yeSBub3QgZW1wdHkAQ29ubmVjdGlvbiByZXNldCBieSBwZWVyAE9wZXJhdGlvbiB0aW1lZCBvdXQAQ29ubmVjdGlvbiByZWZ1c2VkAEhvc3QgaXMgdW5yZWFjaGFibGUAQWRkcmVzcyBpbiB1c2UAQnJva2VuIHBpcGUASS9PIGVycm9yAE5vIHN1Y2ggZGV2aWNlIG9yIGFkZHJlc3MATm8gc3VjaCBkZXZpY2UATm90IGEgZGlyZWN0b3J5AElzIGEgZGlyZWN0b3J5AFRleHQgZmlsZSBidXN5AEV4ZWMgZm9ybWF0IGVycm9yAEludmFsaWQgYXJndW1lbnQAQXJndW1lbnQgbGlzdCB0b28gbG9uZwBTeW1ib2xpYyBsaW5rIGxvb3AARmlsZW5hbWUgdG9vIGxvbmcAVG9vIG1hbnkgb3BlbiBmaWxlcyBpbiBzeXN0ZW0ATm8gZmlsZSBkZXNjcmlwdG9ycyBhdmFpbGFibGUAQmFkIGZpbGUgZGVzY3JpcHRvcgBObyBjaGlsZCBwcm9jZXNzAEJhZCBhZGRyZXNzAEZpbGUgdG9vIGxhcmdlAFRvbyBtYW55IGxpbmtzAE5vIGxvY2tzIGF2YWlsYWJsZQBSZXNvdXJjZSBkZWFkbG9jayB3b3VsZCBvY2N1cgBTdGF0ZSBub3QgcmVjb3ZlcmFibGUAUHJldmlvdXMgb3duZXIgZGllZABPcGVyYXRpb24gY2FuY2VsZWQARnVuY3Rpb24gbm90IGltcGxlbWVudGVkAE5vIG1lc3NhZ2Ugb2YgZGVzaXJlZCB0eXBlAElkZW50aWZpZXIgcmVtb3ZlZABMaW5rIGhhcyBiZWVuIHNldmVyZWQAUHJvdG9jb2wgZXJyb3IAQmFkIG1lc3NhZ2UATm90IGEgc29ja2V0AERlc3RpbmF0aW9uIGFkZHJlc3MgcmVxdWlyZWQATWVzc2FnZSB0b28gbGFyZ2UAUHJvdG9jb2wgd3JvbmcgdHlwZSBmb3Igc29ja2V0AFByb3RvY29sIG5vdCBhdmFpbGFibGUAUHJvdG9jb2wgbm90IHN1cHBvcnRlZABOb3Qgc3VwcG9ydGVkAEFkZHJlc3MgZmFtaWx5IG5vdCBzdXBwb3J0ZWQgYnkgcHJvdG9jb2wAQWRkcmVzcyBub3QgYXZhaWxhYmxlAE5ldHdvcmsgaXMgZG93bgBOZXR3b3JrIHVucmVhY2hhYmxlAENvbm5lY3Rpb24gcmVzZXQgYnkgbmV0d29yawBDb25uZWN0aW9uIGFib3J0ZWQATm8gYnVmZmVyIHNwYWNlIGF2YWlsYWJsZQBTb2NrZXQgaXMgY29ubmVjdGVkAFNvY2tldCBub3QgY29ubmVjdGVkAE9wZXJhdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzAE9wZXJhdGlvbiBpbiBwcm9ncmVzcwBTdGFsZSBmaWxlIGhhbmRsZQBRdW90YSBleGNlZWRlZABNdWx0aWhvcCBhdHRlbXB0ZWQAQ2FwYWJpbGl0aWVzIGluc3VmZmljaWVudABObyBlcnJvciBpbmZvcm1hdGlvbgAALSsgICAwWDB4AChudWxsKQ==");
assignasmFunc(4704, "GQAKABkZGQAAAAAFAAAAAAAACQAAAAAL");
assignasmFunc(4736, "GQARChkZGQMKBwABGwkLGAAACQYLAAALAAYZAAAAGRkZ");
assignasmFunc(4785, "Dg==");
assignasmFunc(4794, "GQAKDRkZGQANAAACAAkOAAAACQAOAAAO");
assignasmFunc(4843, "DA==");
assignasmFunc(4855, "EwAAAAATAAAAAAkMAAAAAAAMAAAM");
assignasmFunc(4901, "EA==");
assignasmFunc(4913, "DwAAAAQPAAAAAAkQAAAAAAAQAAAQ");
assignasmFunc(4959, "Eg==");
assignasmFunc(4971, "EQAAAAARAAAAAAkSAAAAAAASAAASAAAaAAAAGhoa");
assignasmFunc(5026, "GgAAABoaGgAAAAAAAAk=");
assignasmFunc(5075, "FA==");
assignasmFunc(5087, "FwAAAAAXAAAAAAkUAAAAAAAUAAAU");
assignasmFunc(5133, "Fg==");
assignasmFunc(5145, "FQAAAAAVAAAAAAkWAAAAAAAWAAAWAABTdXBwb3J0IGZvciBmb3JtYXR0aW5nIGxvbmcgZG91YmxlIHZhbHVlcyBpcyBjdXJyZW50bHkgZGlzYWJsZWQuClRvIGVuYWJsZSBpdCwgYWRkIC1sYy1wcmludHNjYW4tbG9uZy1kb3VibGUgdG8gdGhlIGxpbmsgY29tbWFuZC4K");
assignasmFunc(5312, "MDEyMzQ1Njc4OUFCQ0RFRi0wWCswWCAwWC0weCsweCAweABpbmYASU5GAG5hbgBOQU4ALgAKAFB1cmUgdmlydHVhbCBmdW5jdGlvbiBjYWxsZWQhAFN0OXR5cGVfaW5mbwAAAJQVAAAVFQAATjEwX19jeHhhYml2MTE2X19zaGltX3R5cGVfaW5mb0UAAAAAvBUAACwVAAAkFQAATjEwX19jeHhhYml2MTE3X19jbGFzc190eXBlX2luZm9FAAAAvBUAAFwVAABQFQAAAAAAAIAVAAAEAAAABwAAAAgAAAAJAAAACgAAAAsAAAAMAAAADQAAAAAAAAAEFgAABQAAAA4AAAAIAAAACQAAAAoAAAAPAAAAEAAAABEAAABOMTBfX2N4eGFiaXYxMjBfX3NpX2NsYXNzX3R5cGVfaW5mb0UAAAAAvBUAANwVAACAFQAAAAAAAGAWAAAGAAAAEgAAAAgAAAAJAAAACgAAABMAAAAUAAAAFQAAAE4xMF9fY3h4YWJpdjEyMV9fdm1pX2NsYXNzX3R5cGVfaW5mb0UAAAC8FQAAOBYAAIAVAAAAAAAA3BYAABYAAAAXAAAAGAAAABgAAAAYAAAAAAAAAOQWAAAZAAAAGgAAABgAAAAYAAAAGAAAADMwYnRBY3RpdmF0aW5nQ29sbGlzaW9uQWxnb3JpdGhtADIwYnRDb2xsaXNpb25BbGdvcml0aG0AlBUAAMUWAAC8FQAApBYAANwWAABidENvbGxpc2lvblNoYXBlRGF0YQAxNmJ0Q29sbGlzaW9uU2hhcGUAlBUAAAUXAAAAAAAAlBcAAB8AAAAgAAAAGAAAACEAAAAiAAAAIwAAABgAAAAYAAAAGAAAABgAAAAkAAAAGAAAABgAAAAlAAAAJgAAACcAAAAYAAAAGAAAACgAAAAYAAAAGAAAABgAAAAYAAAAMTNidENvbnZleFNoYXBlALwVAACEFwAAGBcAAAAAAADgGAAAHwAAACkAAAAqAAAAIQAAACIAAAAjAAAAKwAAACwAAAAtAAAALgAAAC8AAAAwAAAAMQAAADIAAAAzAAAAJwAAADQAAAA1AAAAKAAAADYAAAA3AAAAOAAAADk=");
assignasmFunc(6153, "GQAAHwAAADoAAAAqAAAAIQAAACIAAAAjAAAAKwAAACwAAAAtAAAAOwAAAC8AAAAwAAAAMQAAADIAAAAzAAAAJwAAADQAAAA1AAAAKAAAADYAAAA3AAAAOAAAADkAAAAAAAAAIBkAAB8AAAA8AAAAKgAAACEAAAAiAAAAIwAAACsAAAAsAAAALQAAAD0AAAAvAAAAMAAAADEAAAAyAAAAMwAAACcAAAA0AAAANQAAACgAAAA2AAAANwAAADgAAAA5AAAAMTRidENhcHN1bGVTaGFwZQAAAAC8FQAAzBgAAIAbAAAxNWJ0Q2Fwc3VsZVNoYXBlWAAAALwVAADsGAAA4BgAADE1YnRDYXBzdWxlU2hhcGVaAAAAvBUAAAwZAADgGAAAQ2Fwc3VsZVNoYXBlAGJ0Q2Fwc3VsZVNoYXBlRGF0YQBDYXBzdWxlWABDYXBzdWxlWgAAAAAAAACcGgAAHwAAAD4AAAA/AAAAIQAAACIAAAAjAAAAQAAAACwAAABBAAAAQgAAAEMAAABEAAAAMQAAAEUAAABGAAAAJwAAAEcAAABIAAAAKAAAAEkAAAA3AAAAOAAAADkAAAAAAAAAuBoAAB8AAABKAAAAPwAAACEAAAAiAAAAIwAAAEAAAAAsAAAAQQAAAEsAAABMAAAARAAAADEAAABFAAAARgAAACcAAABHAAAASAAAACgAAABJAAAANwAAADgAAAA5AAAAAAAAANQaAAAfAAAATQAAAD8AAAAhAAAAIgAAACMAAABAAAAALAAAAEEAAABOAAAATwAAAEQAAAAxAAAARQAAAEYAAAAnAAAARwAAAEgAAAAoAAAASQAAADcAAAA4AAAAOQAAADExYnRDb25lU2hhcGUAAAC8FQAAjBoAAIAbAAAxMmJ0Q29uZVNoYXBlWgAAvBUAAKgaAACcGgAAMTJidENvbmVTaGFwZVgAALwVAADEGgAAnBoAAENvbmUAYnRDb25lU2hhcGVEYXRhAENvbmVaAENvbmVY");
assignasmFunc(6920, "gBsAAB8AAABQAAAAPwAAACEAAAAiAAAAIwAAAFEAAAAsAAAAGAAAABgAAAAkAAAARAAAADEAAABSAAAAUwAAACcAAAA0AAAAGAAAACgAAAAYAAAANwAAADgAAAA5AAAAMjFidENvbnZleEludGVybmFsU2hhcGUAvBUAAGgbAACUFwAAAAAAALQbAABUAAAAVQAAADE4YnRDb252ZXhQb2x5aGVkcm9uAAAAAJQVAACcGwAAAAAAAOAcAABWAAAAVwAAAD8AAAAhAAAAIgAAACMAAABRAAAALAAAAFgAAAAYAAAAJAAAAEQAAAAxAAAAUgAAAFMAAAAnAAAANAAAAFkAAAAoAAAAWgAAADcAAAA4AAAAOQAAAFsAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAAAAAABQdAABWAAAAXAAAAF0AAAAhAAAAIgAAACMAAABeAAAALAAAAFgAAAAYAAAAJAAAAEQAAAAxAAAAUgAAAFMAAAAnAAAANAAAAFkAAAAoAAAAWgAAADcAAAA4AAAAOQAAAFsAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAMjNidFBvbHloZWRyYWxDb252ZXhTaGFwZQAAALwVAADEHAAAgBsAADM0YnRQb2x5aGVkcmFsQ29udmV4QWFiYkNhY2hpbmdTaGFwZQAAAAC8FQAA7BwAAOAcAAAAAAAAvB0AAFYAAABfAAAAYAAAACEAAAAiAAAAIwAAAF4AAAAsAAAAWAAAAGEAAAAkAAAARAAAADEAAABSAAAAUwAAACcAAAA0AAAAWQAAACgAAABaAAAANwAAADgAAAA5AAAAWwAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAMTZidEJVX1NpbXBsZXgxdG80AAC8FQAAqB0AABQdAAABAAAAAwAAAAYAAAAxOGJ0VHJpYW5nbGVDYWxsYmFjawAAAACUFQAA1B0AADMxYnRJbnRlcm5hbFRyaWFuZ2xlSW5kZXhDYWxsYmFjawAAAJQVAAD0HQAAAAAAAIgeAABqAAAAawAAAGwAAABtAAAAbgAAADE2YnRNYW5pZm9sZFJlc3VsdABOMzZidERpc2NyZXRlQ29sbGlzaW9uRGV0ZWN0b3JJbnRlcmZhY2U2UmVzdWx0RQAAlBUAAE8eAAC8FQAAPB4AAIAeAAAxMmJ0RGlzcGF0Y2hlcgAAlBUAAJQeAAAAAAAADB8AAHAAAABxAAAAcgAAAHMAAAB0AAAAdQAAAHYAAAB3AAAAeAAAAHkAAAB6AAAAewAAAHwAAAB9AAAAfgAAAH8AAAAyMWJ0Q29sbGlzaW9uRGlzcGF0Y2hlcgC8FQAA9B4AAKQeAAAAAAAAZB8AAIAAAACBAAAAggAAADIzYnRDb2xsaXNpb25QYWlyQ2FsbGJhY2sAMTdidE92ZXJsYXBDYWxsYmFjawAAAJQVAABGHwAAvBUAACwfAABcHwAAAAAAAKwfAACDAAAAhAAAAIUAAACGAAAAhwAAADI3YnRHSW1wYWN0Q29sbGlzaW9uQWxnb3JpdGhtAAAAvBUAAIwfAADkFgAAAAAAAHQgAABWAAAAiAAAAIkAAAAhAAAAIgAAACMAAABRAAAALAAAAIoAAACLAAAAJAAAAEQAAAAxAAAAUgAAAFMAAAAnAAAANAAAAIwAAAAoAAAAjQAAADcAAACOAAAAjwAAAFsAAACQAAAAkQAAAJIAAACTAAAAlAAAAJUAAACWAAAAlwAAADE3YnRUcmlhbmdsZVNoYXBlRXgAMTVidFRyaWFuZ2xlU2hhcGUAAAC8FQAAVCAAAOAcAAC8FQAAQCAAAGggAABUcmlhbmdsZQBidENvbnZleEludGVybmFsU2hhcGVEYXRhAAAAAAAARCEAAFYAAACYAAAAYAAAACEAAAAiAAAAIwAAAF4AAAAsAAAAWAAAAGEAAAAkAAAARAAAADEAAABSAAAAUwAAACcAAAA0AAAAWQAAACgAAABaAAAANwAAADgAAAA5AAAAWwAAAGIAAABjAAAAZAAAAGUAAABmAAAAZwAAAGgAAABpAAAAMjBidFRldHJhaGVkcm9uU2hhcGVFeAAAvBUAACwhAAC8HQAAYnRCVV9TaW1wbGV4MXRvNA==");
assignasmFunc(8552, "pCEAAJkAAACaAAAAmwAAAE4xOEdJTV9TaGFwZVJldHJpZXZlcjE5Q2hpbGRTaGFwZVJldHJpZXZlckUAlBUAAHghAAAAAAAA8CEAAJwAAACaAAAAnQAAAE4xOEdJTV9TaGFwZVJldHJpZXZlcjIyVHJpYW5nbGVTaGFwZVJldHJpZXZlckUAALwVAADAIQAApCEAAAAAAAA8IgAAngAAAJoAAACfAAAATjE4R0lNX1NoYXBlUmV0cmlldmVyMTlUZXRyYVNoYXBlUmV0cmlldmVyRQC8FQAAECIAAKQhAAAAAAAAeCIAAKAAAAChAAAAogAAADI1YnRHSW1wYWN0VHJpYW5nbGVDYWxsYmFjawC8FQAAXCIAAOwdAAAAAAAA8CIAAKMAAACkAAAApQAAAE4yN2J0R0ltcGFjdENvbGxpc2lvbkFsZ29yaXRobTEwQ3JlYXRlRnVuY0UAMzBidENvbGxpc2lvbkFsZ29yaXRobUNyZWF0ZUZ1bmMAAAAAlBUAAMQiAAC8FQAAmCIAAOgiAAAAAAAAUCMAAKYAAACnAAAAqAAAAKkAAACqAAAAqwAAAKwAAABidENvbGxpc2lvbk9iamVjdEZsb2F0RGF0YQAxN2J0Q29sbGlzaW9uT2JqZWN0AACUFQAAOyMAAAAAAADwIwAAVgAAAK0AAACuAAAAIQAAACIAAAAjAAAArwAAACwAAACwAAAAsQAAACQAAACyAAAAMQAAAFIAAABTAAAAJwAAALMAAAC0AAAAKAAAALUAAAA3AAAAtgAAALcAAABbAAAAuAAAALkAAAC6AAAAuwAAALwAAAC9AAAAvgAAAL8AAAAxMGJ0Qm94U2hhcGUAAAAAvBUAAOAjAADgHAAAQm94AAAAgD8AAIC/");
assignasmFunc(9250, "gD8AAIC/");
assignasmFunc(9282, "gD8AAIC/");
assignasmFunc(9296, "AQAAAAIAAAAAAAAAAQAAAAIAAAADAAAABAAAAAQAAAAFAAAABgAAAAEAAAACAAAAAwAAAAMAAAAEAAAABQAAAAYAAAAHAAAABQAAAAYAAAAHAAAABwAAAAAAAAD0JQAAHwAAAMAAAADBAAAAIQAAACIAAAAjAAAAwgAAACwAAADDAAAAxAAAAMUAAADGAAAAMQAAAMcAAADIAAAAJwAAAMkAAADKAAAAKAAAAMsAAAA3AAAAOAAAADkAAADMAAAAAAAAABQmAAAfAAAAzQAAAMEAAAAhAAAAIgAAACMAAADCAAAALAAAAMMAAADOAAAAxQAAAMYAAAAxAAAAxwAAAMgAAAAnAAAAyQAAAM8AAAAoAAAA0AAAADcAAAA4AAAAOQAAANEAAAAAAAAANCYAAB8AAADSAAAAwQAAACEAAAAiAAAAIwAAAMIAAAAsAAAAwwAAANMAAADFAAAAxgAAADEAAADHAAAAyAAAACcAAADJAAAA1AAAACgAAADVAAAANwAAADgAAAA5AAAA1gAAADE1YnRDeWxpbmRlclNoYXBlAAAAvBUAAOAlAACAGwAAMTZidEN5bGluZGVyU2hhcGVYAAC8FQAAACYAAPQlAAAxNmJ0Q3lsaW5kZXJTaGFwZVoAALwVAAAgJgAA9CUAAEN5bGluZGVyWQBidEN5bGluZGVyU2hhcGVEYXRhAEN5bGluZGVyWABDeWxpbmRlcloAAAAAAAAA6CYAAB8AAADXAAAA2AAAACEAAAAiAAAAIwAAAFEAAAAsAAAA2QAAANoAAAAkAAAA2wAAANwAAABSAAAAUwAAACcAAADdAAAA3gAAACgAAADfAAAANwAAADgAAAA5AAAAMTNidFNwaGVyZVNoYXBlALwVAADYJgAAgBsAAFNQSEVSRQAAAAAAAJgnAADgAAAA4QAAAOIAAABaTjIyYnRCdmhUcmlhbmdsZU1lc2hTaGFwZTE0cGVyZm9ybVJheWNhc3RFUDE4YnRUcmlhbmdsZUNhbGxiYWNrUks5YnRWZWN0b3IzUzRfRTIxTXlOb2RlT3ZlcmxhcENhbGxiYWNrADIxYnROb2RlT3ZlcmxhcENhbGxiYWNrAJQVAAB4JwAAvBUAABAnAACQJwAAAAAAACwoAADgAAAA4wAAAOQAAABaTjIyYnRCdmhUcmlhbmdsZU1lc2hTaGFwZTE3cGVyZm9ybUNvbnZleGNhc3RFUDE4YnRUcmlhbmdsZUNhbGxiYWNrUks5YnRWZWN0b3IzUzRfUzRfUzRfRTIxTXlOb2RlT3ZlcmxhcENhbGxiYWNrAAAAALwVAAC4JwAAkCcAAAAAAACYKAAA5QAAAOYAAAAYAAAAIQAAACIAAAAjAAAAGAAAABgAAAAYAAAAGAAAACQAAADnAAAA6AAAACUAAAAmAAAAJwAAABgAAAAxNGJ0Q29uY2F2ZVNoYXBlAAAAALwVAACEKAAAGBcAAAAAAAAIKQAA6QAAAOoAAADrAAAAIQAAACIAAAAjAAAA7AAAAO0AAADuAAAA7wAAACQAAADnAAAA6AAAAPAAAADxAAAAJwAAAPIAAAAxOGJ0U3RhdGljUGxhbmVTaGFwZQAAAAC8FQAA8CgAAJgoAABTVEFUSUNQTEFORQBidFN0YXRpY1BsYW5lU2hhcGVEYXRhAAAAAAAAMCoAAPMAAAD0AAAA9QAAACEAAAAiAAAAIwAAAPYAAAD3AAAA+AAAAPkAAAAkAAAA+gAAAPsAAAAlAAAAJgAAACcAAAD8AAAA/QAAAP4AAAD/AAAAAAEAAAEBAAACAQAAAwEAAAQBAAAFAQAABgEAAAcBAAAIAQAACQEAAAoBAAALAQAADAEAAA0BAAAOAQAADwEAABABAABidEdJbXBhY3RNZXNoU2hhcGVEYXRhADIzYnRHSW1wYWN0U2hhcGVJbnRlcmZhY2UAAAAAvBUAAOspAACYKAAAMjJidEdJbXBhY3RNZXNoU2hhcGVQYXJ0AAAAALwVAAAUKgAACCoAAAAAAADwKgAAEQEAABIBAAD1AAAAIQAAACIAAAAjAAAAEwEAABQBAAAVAQAAFgEAACQAAAAXAQAA6AAAABgBAAAZAQAAJwAAABoBAAAbAQAAHAEAAP8AAAAdAQAAHgEAAB8BAAAgAQAAIQEAACIBAAAjAQAAJAEAACUBAAAmAQAAJwEAACgBAAApAQAAKgEAACsBAAAsAQAALQEAADE4YnRHSW1wYWN0TWVzaFNoYXBlAAAAALwVAADYKgAACCoAAAAAAAAIKgAALgEAAC8BAAD1AAAAIQAAACIAAAAjAAAAMAEAABQBAAAYAAAAGAAAACQAAAAxAQAA6AAAACUAAAAmAAAAJwAAADIBAAD9AAAA/gAAAP8AAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAADMBAAA0AQAACgEAABgAAAAYAAAAGAAAABgAAAAPAQAANQEAAAAAAAAQLAAANgEAADcBAAA4AQAAOQEAADoBAAA7AQAATjIyYnRHSW1wYWN0TWVzaFNoYXBlUGFydDIzVHJpbWVzaFByaW1pdGl2ZU1hbmFnZXJFADIyYnRQcmltaXRpdmVNYW5hZ2VyQmFzZQAAAACUFQAA7CsAALwVAAC4KwAACCwAAEdJbXBhY3RNZXNoU2hhcGVQYXJ0AEdJbXBhY3RNZXNoAE42YnREYnZ0OElDb2xsaWRlRQCUFQAAPSw=");
assignasmFunc(11360, "AwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA");
assignasmFunc(14147, "QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNQAAAAAQOAAAPAEAAD0BAAA+AQAAIQAAACIAAAAjAAAAPwEAAEABAABBAQAAQgEAACQAAABDAQAARAEAAEUBAABGAQAAJwAAAEcBAABIAQAAYnRDb21wb3VuZFNoYXBlQ2hpbGREYXRhAGJ0Q29tcG91bmRTaGFwZURhdGEAMTVidENvbXBvdW5kU2hhcGUAALwVAAD9NwAAGBcAAENvbXBvdW5kAGJ0SW50SW5kZXhEYXRhAGJ0U2hvcnRJbnRJbmRleFRyaXBsZXREYXRhAGJ0Q2hhckluZGV4VHJpcGxldERhdGEAYnRWZWN0b3IzRmxvYXREYXRhAGJ0VmVjdG9yM0RvdWJsZURhdGEAYnRNZXNoUGFydERhdGEAYnRTdHJpZGluZ01lc2hJbnRlcmZhY2VEYXRhADIzYnRTdHJpZGluZ01lc2hJbnRlcmZhY2UAAACUFQAAuDgAAAAAAABAOQAASQEAAEoBAABLAQAATAEAAE0BAABOAQAATwEAAFABAABRAQAAUgEAAFMBAABUAQAAVQEAAFYBAABXAQAAMjZidFRyaWFuZ2xlSW5kZXhWZXJ0ZXhBcnJheQAAAAC8FQAAIDkAANQ4AAAAAAAApDkAAFgBAABZAQAASwEAAEwBAABNAQAATgEAAE8BAABQAQAAWgEAAFsBAABTAQAAVAEAAFUBAABWAQAAVwEAADE0YnRUcmlhbmdsZU1lc2gAAAAAvBUAAJA5AABAOQAAAQAAAAIAAAAAAAAAAgAAAAAAAAABAAAAAAAAACg6AABeAQAAXwEAAGABAAAzMGJ0R2prRXBhUGVuZXRyYXRpb25EZXB0aFNvbHZlcgAzMGJ0Q29udmV4UGVuZXRyYXRpb25EZXB0aFNvbHZlcgAAAJQVAAD9OQAAvBUAANw5AAAgOgAAAAAAAIw6AABhAQAAYgEAAGMBAAAxN2J0R2prUGFpckRldGVjdG9yADM2YnREaXNjcmV0ZUNvbGxpc2lvbkRldGVjdG9ySW50ZXJmYWNlAACUFQAAXDoAALwVAABIOgAAhDoAAAAAAADQOgAAXgEAAGQBAABlAQAAMzNidE1pbmtvd3NraVBlbmV0cmF0aW9uRGVwdGhTb2x2ZXIAvBUAAKw6AAAgOgAAAAAAAKQ7AABqAAAAZgEAAGcBAABoAQAAaQEAAFpOMzNidE1pbmtvd3NraVBlbmV0cmF0aW9uRGVwdGhTb2x2ZXIxMmNhbGNQZW5EZXB0aEVSMjJidFZvcm9ub2lTaW1wbGV4U29sdmVyUEsxM2J0Q29udmV4U2hhcGVTNF9SSzExYnRUcmFuc2Zvcm1TN19SOWJ0VmVjdG9yM1M5X1M5X1AxMmJ0SURlYnVnRHJhd0UyMGJ0SW50ZXJtZWRpYXRlUmVzdWx0AAC8FQAA+DoAAIAeAAAxMmJ0Q29udmV4Q2FzdAAAlBUAALA7AAAAAAAA8DsAAGoBAABrAQAAbAEAADE1YnRHamtDb252ZXhDYXN0AAAAvBUAANw7AADAOwAAAAAAACw8AABqAAAAbQEAAG4BAABvAQAAcAEAADE2YnRQb2ludENvbGxlY3RvcgAAvBUAABg8AACAHgAAAAAAAJA8AABxAQAAcgEAAHMBAAAAAAAAuDwAAHQBAAB1AQAAdgEAAHcBAAB4AQAATjIzYnRDb252ZXhDb252ZXhBbGdvcml0aG0xMENyZWF0ZUZ1bmNFALwVAABoPAAA6CIAADIzYnRDb252ZXhDb252ZXhBbGdvcml0aG0AAAC8FQAAnDwAAOQWAAAAAAAAaD0AAGoAAAB5AQAAegEAAHsBAAB8AQAAWk4yM2J0Q29udmV4Q29udmV4QWxnb3JpdGhtMTZwcm9jZXNzQ29sbGlzaW9uRVBLMjRidENvbGxpc2lvbk9iamVjdFdyYXBwZXJTMl9SSzE2YnREaXNwYXRjaGVySW5mb1AxNmJ0TWFuaWZvbGRSZXN1bHRFMTNidER1bW15UmVzdWx0AAAAALwVAADgPAAAgB4AAAAAAAAgPgAAagAAAH0BAAB+AQAAfwEAAIABAABaTjIzYnRDb252ZXhDb252ZXhBbGdvcml0aG0xNnByb2Nlc3NDb2xsaXNpb25FUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclMyX1JLMTZidERpc3BhdGNoZXJJbmZvUDE2YnRNYW5pZm9sZFJlc3VsdEUyMWJ0V2l0aG91dE1hcmdpblJlc3VsdAAAAAC8FQAAkD0AAIAeAAAAAAAAZD4AAGoAAACBAQAAbAAAAG0AAACCAQAAMjRidFBlcnR1cmJlZENvbnRhY3RSZXN1bHQAALwVAABIPgAAiB4AAAAAAACsPgAAgwEAAIQBAACFAQAAhgEAAIcBAABOMTJidENvbnZleENhc3QxMENhc3RSZXN1bHRFAAAAAJQVAACMPgAAAAAAAOQ+AABqAQAAigEAAIsBAAAyMmJ0U3Vic2ltcGxleENvbnZleENhc3QAAAAAvBUAAMg+AADAOwAAAAAAAKQ/AACMAQAAjQEAAI4BAACPAQAAkAEAAAAAAADMPwAAkQEAAJIBAACTAQAAYnRDb252ZXhUcmlhbmdsZUNhbGxiYWNrOjpwcm9jZXNzVHJpYW5nbGUAYnRDb252ZXhDb25jYXZlQ29sbGlzaW9uQWxnb3JpdGhtOjpwcm9jZXNzQ29sbGlzaW9uADMzYnRDb252ZXhDb25jYXZlQ29sbGlzaW9uQWxnb3JpdGhtAAAAvBUAAH4/AADkFgAAMjRidENvbnZleFRyaWFuZ2xlQ2FsbGJhY2sAALwVAACwPwAA7B0AAAAAAABoIAAAVgAAAJQBAACVAQAAIQAAACIAAAAjAAAAUQAAACwAAACKAAAAiwAAACQAAABEAAAAMQAAAFIAAABTAAAAJwAAADQAAACMAAAAKAAAAI0AAAA3AAAAjgAAAI8AAABbAAAAkAAAAJEAAACSAAAAkwAAAJQAAACVAAAAlgAAAJcAAAAAAAAAFEEAAKAAAACWAQAAlwEAAFpOMzNidENvbnZleENvbmNhdmVDb2xsaXNpb25BbGdvcml0aG0yMWNhbGN1bGF0ZVRpbWVPZkltcGFjdEVQMTdidENvbGxpc2lvbk9iamVjdFMxX1JLMTZidERpc3BhdGNoZXJJbmZvUDE2YnRNYW5pZm9sZFJlc3VsdEUzMUxvY2FsVHJpYW5nbGVTcGhlcmVDYXN0Q2FsbGJhY2sAAAC8FQAAdEAAAOwdAABwcm9jZXNzVHJpYW5nbGUAAAAAAGxBAACYAQAAmQEAAJoBAACbAQAAnAEAADI4YnRDb21wb3VuZENvbGxpc2lvbkFsZ29yaXRobQAAvBUAAExBAADkFgAAAAAAALhBAACdAQAAngEAAJ8BAACgAQAAoQEAAKIBAACjAQAAMjJidENvbXBvdW5kTGVhZkNhbGxiYWNrAAAAALwVAACcQQAAUCwAAAAAAAD8QQAApAEAAKUBAACmAQAApwEAAKgBAAAyM2J0SGFzaGVkU2ltcGxlUGFpckNhY2hlAAAAlBUAAOBBAAAAAAAASEIAAKkBAACqAQAAqwEAAKwBAACtAQAAMzZidENvbXBvdW5kQ29tcG91bmRDb2xsaXNpb25BbGdvcml0aG0AALwVAAAgQgAAbEEAAAAAAACcQgAAnQEAAK4BAACvAQAAsAEAAKEBAACiAQAAowEAADMwYnRDb21wb3VuZENvbXBvdW5kTGVhZkNhbGxiYWNrAAAAALwVAAB4QgAAUCwAAGJ0Q29tcG91bmRDb21wb3VuZExlYWZDYWxsYmFjazo6UHJvY2VzcwAAAAAAAEMAABYAAACxAQAAsgEAALMBAAC0AQAAMTZidEVtcHR5QWxnb3JpdGhtAAC8FQAA7EIAANwWAAAAAAAATEMAALUBAAC2AQAAtwEAALgBAAC5AQAAMzJidFNwaGVyZVNwaGVyZUNvbGxpc2lvbkFsZ29yaXRobQAAvBUAAChDAADkFgAAAAAAAIhDAABhAQAAugEAALsBAAAyMlNwaGVyZVRyaWFuZ2xlRGV0ZWN0b3IAAAAAvBUAAGxDAACEOgAAAAAAANhDAAC8AQAAvQEAAL4BAAC/AQAAwAEAADM0YnRTcGhlcmVUcmlhbmdsZUNvbGxpc2lvbkFsZ29yaXRobQAAAAC8FQAAsEMAAOQW");
assignasmFunc(17392, "OGPtPtoPST9emHs/2g/JP2k3rDFoISIztA8UM2ghojPbD0k/2w9Jv+TLFkDkyxbAAAAAAAAAAIDbD0lA2w9JwAAAAABYRAAAYQEAAMEBAADCAQAAMTZidEJveEJveERldGVjdG9yAAC8FQAAREQAAIQ6AAAAAAAAoEQAAMMBAADEAQAAxQEAAMYBAADHAQAAMjZidEJveEJveENvbGxpc2lvbkFsZ29yaXRobQAAAAC8FQAAgEQAAOQWAAAAAAAA7EQAAMgBAADJAQAAygEAAMsBAADMAQAAMzFidENvbnZleFBsYW5lQ29sbGlzaW9uQWxnb3JpdGhtAAAAvBUAAMhEAADcFgAAAAAAAGBFAADNAQAAzgEAAM8BAADQAQAA0QEAANIBAAAzMWJ0RGVmYXVsdENvbGxpc2lvbkNvbmZpZ3VyYXRpb24AMjRidENvbGxpc2lvbkNvbmZpZ3VyYXRpb24AAAAAlBUAADpFAAC8FQAAGEUAAFhFAAAAAAAAtEUAAKMAAADTAQAA1AEAAE4zM2J0Q29udmV4Q29uY2F2ZUNvbGxpc2lvbkFsZ29yaXRobTEwQ3JlYXRlRnVuY0UAAAC8FQAAgEUAAOgiAAAAAAAAEEYAAKMAAADVAQAA1gEAAE4zM2J0Q29udmV4Q29uY2F2ZUNvbGxpc2lvbkFsZ29yaXRobTE3U3dhcHBlZENyZWF0ZUZ1bmNFAAAAALwVAADURQAA6CIAAAAAAABgRgAAowAAANcBAADYAQAATjI4YnRDb21wb3VuZENvbGxpc2lvbkFsZ29yaXRobTEwQ3JlYXRlRnVuY0UAAAAAvBUAADBGAADoIgAAAAAAALhGAACjAAAA2QEAANoBAABOMzZidENvbXBvdW5kQ29tcG91bmRDb2xsaXNpb25BbGdvcml0aG0xMENyZWF0ZUZ1bmNFAAAAALwVAACARgAA6CIAAAAAAAAMRwAAowAAANsBAADcAQAATjI4YnRDb21wb3VuZENvbGxpc2lvbkFsZ29yaXRobTE3U3dhcHBlZENyZWF0ZUZ1bmNFALwVAADYRgAA6CIAAAAAAABQRwAAowAAAN0BAADeAQAATjE2YnRFbXB0eUFsZ29yaXRobTEwQ3JlYXRlRnVuY0UAAAAAvBUAACxHAADoIgAAAAAAAKRHAACjAAAA3wEAAOABAABOMzJidFNwaGVyZVNwaGVyZUNvbGxpc2lvbkFsZ29yaXRobTEwQ3JlYXRlRnVuY0UAAAAAvBUAAHBHAADoIgAAAAAAAPhHAACjAAAA4QEAAOIBAABOMzRidFNwaGVyZVRyaWFuZ2xlQ29sbGlzaW9uQWxnb3JpdGhtMTBDcmVhdGVGdW5jRQAAvBUAAMRHAADoIgAAAAAAAERIAACjAAAA4wEAAOQBAABOMjZidEJveEJveENvbGxpc2lvbkFsZ29yaXRobTEwQ3JlYXRlRnVuY0UAALwVAAAYSAAA6CIAAAAAAACUSAAAowAAAOUBAADmAQAATjMxYnRDb252ZXhQbGFuZUNvbGxpc2lvbkFsZ29yaXRobTEwQ3JlYXRlRnVuY0UAvBUAAGRIAADoIgAAAAAAAGxJAADnAQAA6AEAAOkBAADqAQAA6wEAAOwBAADtAQAA7gEAAO8BAADwAQAA8QEAAPIBAADzAQAA9AEAAPUBAAD2AQAA9wEAAGJ0SGFzaGVkT3ZlcmxhcHBpbmdQYWlyQ2FjaGU6OnByb2Nlc3NBbGxPdmVybGFwcGluZ1BhaXJzADI4YnRIYXNoZWRPdmVybGFwcGluZ1BhaXJDYWNoZQAyMmJ0T3ZlcmxhcHBpbmdQYWlyQ2FjaGUAAAAAvBUAAERJAAAQYQAAvBUAACVJAABgSQAAAAAAAPxJAACAAAAA+AEAAPkBAABaTjI4YnRIYXNoZWRPdmVybGFwcGluZ1BhaXJDYWNoZTE5Y2xlYW5Qcm94eUZyb21QYWlyc0VQMTdidEJyb2FkcGhhc2VQcm94eVAxMmJ0RGlzcGF0Y2hlckUxN0NsZWFuUGFpckNhbGxiYWNrAAAAvBUAAIxJAABcHwAAAAAAAKBKAACAAAAA+gEAAPsBAABaTjI4YnRIYXNoZWRPdmVybGFwcGluZ1BhaXJDYWNoZTM3cmVtb3ZlT3ZlcmxhcHBpbmdQYWlyc0NvbnRhaW5pbmdQcm94eUVQMTdidEJyb2FkcGhhc2VQcm94eVAxMmJ0RGlzcGF0Y2hlckUxOFJlbW92ZVBhaXJDYWxsYmFjawAAAAC8FQAAHEoAAFwfAAAAAAAAIEsAAPwBAAD9AQAA/gEAAP8BAAAAAgAAAQIAAAICAAADAgAABAIAAAUCAAAGAgAABwIAAAgCAAAJAgAAMTZidERidnRCcm9hZHBoYXNlADIxYnRCcm9hZHBoYXNlSW50ZXJmYWNlAACUFQAA/0oAALwVAADsSgAAGEsAAAAAAABoSwAAnQEAAAoCAAALAgAADAIAAKEBAACiAQAAowEAADE4YnREYnZ0VHJlZUNvbGxpZGVyAAAAALwVAABQSwAAUCwAAAAAAACwSwAAnQEAAA0CAACfAQAADgIAAKEBAACiAQAAowEAADE5QnJvYWRwaGFzZVJheVRlc3RlcgAAALwVAACYSwAAUCwAAAAAAAD4SwAAnQEAAA8CAACfAQAAEAIAAKEBAACiAQAAowEAADIwQnJvYWRwaGFzZUFhYmJUZXN0ZXIAALwVAADgSwAAUCwAAAAAAAC+8/h57GH2PxkwllvG/t6/PYivSu1x9T+k/NQyaAvbv7AQ8PA5lfQ/e7cfCotB17+FA7iwlcnzP3vPbRrpndO/pWSIDBkN8z8xtvLzmx3Qv6COC3siXvI/8Ho7Gx18yb8/NBpKSrvxP588r5Pj+cK/uuWK8Fgj8T9cjXi/y2C5v6cAmUE/lfA/zl9Htp1vqr8AAAAAAADwPw==");
assignasmFunc(19624, "rEea/Yxg7j899SSfyjizP6BqAh+zpOw/upE4VKl2xD/m/GpXNiDrP9LkxEoLhM4/LaqhY9HC6T8cZcbwRQbUP+1BeAPmhug/+J8bLJyO2D9iSFP13GfnP8x7sU6k4Nw/C25JyRZ20j96xnWgaRnXv926p2wKx94/yPa+SEcV578ruCplRxX3PwAAAAAAAPA/dIUV07DZ7z8PiflsWLXvP1FbEtABk+8/e1F9PLhy7z+quWgxh1TvPzhidW56OO8/4d4f9Z0e7z8VtzEK/gbvP8upOjen8e4/IjQSTKbe7j8tiWFgCM7uPycqNtXav+4/gk+dViu07j8pVEjdB6vuP4VVOrB+pO4/zTt/Zp6g7j90X+zodZ/uP4cB63MUoe4/E85MmYml7j/boCpC5azuP+XFzbA3t+4/kPCjgpHE7j9dJT6yA9XuP63TWpmf6O4/R1778nb/7j+cUoXdmxnvP2mQ79wgN+8/h6T73BhY7z9fm3szl3zvP9qQpKKvpO8/QEVuW3bQ7z8AAAAAAADoQpQjkUv4aqw/88T6UM6/zj/WUgz/Qi7mPwAAAAAAADhD/oIrZUcVR0CUI5FL+Gq8PvPE+lDOvy4/1lIM/0Iulj8AAAAAwE4AABECAAASAgAAqAAAAKkAAAATAgAAFAIAABUCAABidFJpZ2lkQm9keUZsb2F0RGF0YQAxMWJ0UmlnaWRCb2R5AAC8FQAAsU4AAFAjAAAAAAAAmE8AABkCAAAaAgAAGwIAABwCAAAdAgAAHgIAAB8CAAAgAgAAIQIAACICAAAjAgAAJAIAACUCAABzb2x2ZUdyb3VwQ2FjaGVGcmllbmRseVNldHVwAHNvbHZlR3JvdXBDYWNoZUZyaWVuZGx5SXRlcmF0aW9ucwBzb2x2ZUdyb3VwADM1YnRTZXF1ZW50aWFsSW1wdWxzZUNvbnN0cmFpbnRTb2x2ZXIAMThidENvbnN0cmFpbnRTb2x2ZXIAAAAAlBUAAHhPAAC8FQAAUk8AAJBPAAAAAAAA2E8AAGoBAAAmAgAAJwIAADI3YnRDb250aW51b3VzQ29udmV4Q29sbGlzaW9uAAAAvBUAALhPAADAOwAAAAAAADBQAACgAAAAKAIAACkCAAAYAAAAAAAAAFxQAACgAAAAKgIAACsCAAAYAAAAMjVidFRyaWFuZ2xlUmF5Y2FzdENhbGxiYWNrALwVAAAUUAAA7B0AADI4YnRUcmlhbmdsZUNvbnZleGNhc3RDYWxsYmFjawAAvBUAADxQAADsHQAAAAAAAPxRAAAsAgAALQIAAC4CAAAvAgAAMAIAADECAAAyAgAAMwIAADQCAAA1AgAANgIAADcCAAA4AgAAT3ZlcmZsb3cgaW4gQUFCQiwgb2JqZWN0IHJlbW92ZWQgZnJvbSBzaW11bGF0aW9uAElmIHlvdSBjYW4gcmVwcm9kdWNlIHRoaXMsIHBsZWFzZSBlbWFpbCBidWdzQGNvbnRpbnVvdXNwaHlzaWNzLmNvbQoAUGxlYXNlIGluY2x1ZGUgYWJvdmUgaW5mb3JtYXRpb24sIHlvdXIgUGxhdGZvcm0sIHZlcnNpb24gb2YgT1MuCgBUaGFua3MuCgB1cGRhdGVBYWJicwBjYWxjdWxhdGVPdmVybGFwcGluZ1BhaXJzAHBlcmZvcm1EaXNjcmV0ZUNvbGxpc2lvbkRldGVjdGlvbgBkaXNwYXRjaEFsbENvbGxpc2lvblBhaXJzAGNvbnZleFN3ZWVwQ29tcG91bmQAY29udmV4U3dlZXBUZXN0ADE2YnRDb2xsaXNpb25Xb3JsZACUFQAA6VEAAAAAAACwUgAAoAAAADkCAAApAgAAOgIAAFpOMTZidENvbGxpc2lvbldvcmxkMjFyYXlUZXN0U2luZ2xlSW50ZXJuYWxFUksxMWJ0VHJhbnNmb3JtUzJfUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclJOU18xN1JheVJlc3VsdENhbGxiYWNrRUUyOUJyaWRnZVRyaWFuZ2xlUmF5Y2FzdENhbGxiYWNrAAC8FQAAHFIAADBQAAAAAAAAbFMAAKAAAAA7AgAAKQIAADwCAABaTjE2YnRDb2xsaXNpb25Xb3JsZDIxcmF5VGVzdFNpbmdsZUludGVybmFsRVJLMTFidFRyYW5zZm9ybVMyX1BLMjRidENvbGxpc2lvbk9iamVjdFdyYXBwZXJSTlNfMTdSYXlSZXN1bHRDYWxsYmFja0VFMjlCcmlkZ2VUcmlhbmdsZVJheWNhc3RDYWxsYmFja18wAAAAALwVAADUUgAAMFAAAAAAAAAcVAAAnQEAAD0CAACfAQAAPgIAAKEBAACiAQAAowEAAFpOMTZidENvbGxpc2lvbldvcmxkMjFyYXlUZXN0U2luZ2xlSW50ZXJuYWxFUksxMWJ0VHJhbnNmb3JtUzJfUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclJOU18xN1JheVJlc3VsdENhbGxiYWNrRUU5UmF5VGVzdGVyAAAAvBUAAJxTAABQLAAAAAAAAMhUAAA/AgAAQAIAAEECAABCAgAAWk4xNmJ0Q29sbGlzaW9uV29ybGQyMXJheVRlc3RTaW5nbGVJbnRlcm5hbEVSSzExYnRUcmFuc2Zvcm1TMl9QSzI0YnRDb2xsaXNpb25PYmplY3RXcmFwcGVyUk5TXzE3UmF5UmVzdWx0Q2FsbGJhY2tFRTE1TG9jYWxJbmZvQWRkZXIyAAAAALwVAABAVAAAeF8AAAAAAACcVQAAoAAAAEMCAAArAgAARAIAAFpOMTZidENvbGxpc2lvbldvcmxkMjVvYmplY3RRdWVyeVNpbmdsZUludGVybmFsRVBLMTNidENvbnZleFNoYXBlUksxMWJ0VHJhbnNmb3JtUzVfUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclJOU18yMENvbnZleFJlc3VsdENhbGxiYWNrRWZFMzJCcmlkZ2VUcmlhbmdsZUNvbnZleGNhc3RDYWxsYmFjawAAvBUAAOxUAABcUAAAAAAAAHRWAACgAAAARQIAACsCAABGAgAAWk4xNmJ0Q29sbGlzaW9uV29ybGQyNW9iamVjdFF1ZXJ5U2luZ2xlSW50ZXJuYWxFUEsxM2J0Q29udmV4U2hhcGVSSzExYnRUcmFuc2Zvcm1TNV9QSzI0YnRDb2xsaXNpb25PYmplY3RXcmFwcGVyUk5TXzIwQ29udmV4UmVzdWx0Q2FsbGJhY2tFZkUzMkJyaWRnZVRyaWFuZ2xlQ29udmV4Y2FzdENhbGxiYWNrXzAAAAAAvBUAAMBVAABcUAAAAAAAAExXAACdAQAARwIAAJ8BAABIAgAAoQEAAKIBAACjAQAAWk4xNmJ0Q29sbGlzaW9uV29ybGQyNW9iamVjdFF1ZXJ5U2luZ2xlSW50ZXJuYWxFUEsxM2J0Q29udmV4U2hhcGVSSzExYnRUcmFuc2Zvcm1TNV9QSzI0YnRDb2xsaXNpb25PYmplY3RXcmFwcGVyUk5TXzIwQ29udmV4UmVzdWx0Q2FsbGJhY2tFZkUyMmJ0Q29tcG91bmRMZWFmQ2FsbGJhY2sAAAAAvBUAAKRWAABQLAAAAAAAAFBYAABJAgAASgIAAEsCAABMAgAAWlpOMTZidENvbGxpc2lvbldvcmxkMjVvYmplY3RRdWVyeVNpbmdsZUludGVybmFsRVBLMTNidENvbnZleFNoYXBlUksxMWJ0VHJhbnNmb3JtUzVfUEsyNGJ0Q29sbGlzaW9uT2JqZWN0V3JhcHBlclJOU18yMENvbnZleFJlc3VsdENhbGxiYWNrRWZFTjIyYnRDb21wb3VuZExlYWZDYWxsYmFjazEyUHJvY2Vzc0NoaWxkRWlTNV9QSzE2YnRDb2xsaXNpb25TaGFwZUUxNExvY2FsSW5mb0FkZGVyAAC8FQAAcFcAAFhgAAAAAAAA0FgAAE0CAABOAgAATwIAADE5YnRTaW5nbGVSYXlDYWxsYmFjawAyM2J0QnJvYWRwaGFzZVJheUNhbGxiYWNrADI0YnRCcm9hZHBoYXNlQWFiYkNhbGxiYWNrAACUFQAAoFgAALwVAACGWAAAvFgAALwVAABwWAAAxFgAAAAAAAAIWQAATQIAAFACAABRAgAAMjFidFNpbmdsZVN3ZWVwQ2FsbGJhY2sAvBUAAPBYAADEWAAAAAAAAFRZAABSAgAAUwIAAFQCAABVAgAA/P///1RZAABWAgAAVwIAAFgCAAAxN0RlYnVnRHJhd2NhbGxiYWNrABgWAABAWQAAAAAAAAIAAADsHQAAAgAAABgeAAACBAAAAAAAANRZAABZAgAAWgIAAFsCAABcAgAAaXNsYW5kVW5pb25GaW5kQW5kUXVpY2tTb3J0AHByb2Nlc3NJc2xhbmRzADI1YnRTaW11bGF0aW9uSXNsYW5kTWFuYWdlcgAAlBUAALdZAAAAAAAAMFwAAF0CAABeAgAALgIAAC8CAAAwAgAAMQIAAF8CAAAzAgAANAIAAGACAABhAgAANwIAAGICAABjAgAAZAIAAGUCAABmAgAAZwIAAGgCAABpAgAAagIAAGsCAABsAgAAbQIAAG4CAABvAgAAcAIAAHECAAByAgAAcwIAAHQCAAB1AgAAdgIAAHcCAAB4AgAAeQIAAHoCAAB7AgAAfAIAAH0CAAB+AgAAfwIAAIACAACBAgAAggIAAIMCAACEAgAAZGVidWdEcmF3V29ybGQAaW50ZXJuYWxTaW5nbGVTdGVwU2ltdWxhdGlvbgB1cGRhdGVBY3Rpb25zAHVwZGF0ZUFjdGl2YXRpb25TdGF0ZQBzb2x2ZUNvbnN0cmFpbnRzAGNhbGN1bGF0ZVNpbXVsYXRpb25Jc2xhbmRzAHByZWRpY3RpdmUgY29udmV4U3dlZXBUZXN0AHJlbGVhc2UgcHJlZGljdGl2ZSBjb250YWN0IG1hbmlmb2xkcwBjcmVhdGVQcmVkaWN0aXZlQ29udGFjdHMAQ0NEIG1vdGlvbiBjbGFtcGluZwBpbnRlZ3JhdGVUcmFuc2Zvcm1zAGFwcGx5IHNwZWN1bGF0aXZlIGNvbnRhY3QgcmVzdGl0dXRpb24AcHJlZGljdFVuY29uc3RyYWludE1vdGlvbgBidER5bmFtaWNzV29ybGRGbG9hdERhdGEAMjNidERpc2NyZXRlRHluYW1pY3NXb3JsZAAxNWJ0RHluYW1pY3NXb3JsZAAAALwVAAAQXAAA/FEAALwVAAD2WwAAJFwAAAAAAACkXAAAhQIAAIYCAACHAgAAMjdJbnBsYWNlU29sdmVySXNsYW5kQ2FsbGJhY2sATjI1YnRTaW11bGF0aW9uSXNsYW5kTWFuYWdlcjE0SXNsYW5kQ2FsbGJhY2tFAJQVAABuXAAAvBUAAFBcAACcXAAAAAAAAPBcAABJAgAAiAIAAIkCAACKAgAAMzRidENsb3Nlc3ROb3RNZUNvbnZleFJlc3VsdENhbGxiYWNrAAAAALwVAADIXAAAYGAAAAAAAABkXQAAiwIAAIwCAACoAAAAqQAAAKoAAACrAAAArAAAAI0CAACOAgAAAAAAAIxdAACPAgAAkAIAAKgAAACpAAAAqgAAAKsAAACsAAAAkQIAAJICAAAxM2J0R2hvc3RPYmplY3QAvBUAAFRdAABQIwAAMjRidFBhaXJDYWNoaW5nR2hvc3RPYmplY3QAALwVAABwXQAAZF0AAAAAAABYXgAAkwIAAJQCAACVAgAAlgIAAJcCAACYAgAAmQIAAJoCAACbAgAAnAIAAJ0CAACeAgAAnwIAAKACAAChAgAAogIAAKMCAACkAgAApQIAADMwYnRLaW5lbWF0aWNDaGFyYWN0ZXJDb250cm9sbGVyADMwYnRDaGFyYWN0ZXJDb250cm9sbGVySW50ZXJmYWNlADE3YnRBY3Rpb25JbnRlcmZhY2UAAACUFQAALl4AALwVAAANXgAARF4AALwVAADsXQAATF4AAAAAAACsXgAASQIAAKYCAACnAgAAqAIAADQzYnRLaW5lbWF0aWNDbG9zZXN0Tm90TWVDb252ZXhSZXN1bHRDYWxsYmFjawAAALwVAAB8XgAAYGAAAAAAAAD8XgAAqQIAAKoCAACrAgAArAIAADE1TGF5YU1vdGlvblN0YXRlADEzYnRNb3Rpb25TdGF0ZQAAAJQVAADiXgAAvBUAANBeAAD0XgAAAAAAAIBfAAA/AgAArQIAAK4CAACvAgAATjE2YnRDb2xsaXNpb25Xb3JsZDI0Q2xvc2VzdFJheVJlc3VsdENhbGxiYWNrRQBOMTZidENvbGxpc2lvbldvcmxkMTdSYXlSZXN1bHRDYWxsYmFja0UAAJQVAABPXwAAvBUAACBfAAB4XwAAAAAAANRfAACwAgAAsQIAAK4CAACyAgAATjE2YnRDb2xsaXNpb25Xb3JsZDI0QWxsSGl0c1JheVJlc3VsdENhbGxiYWNrRQAAvBUAAKRfAAB4XwAAAAAAAGBgAABJAgAAswIAAKcCAAC0AgAATjE2YnRDb2xsaXNpb25Xb3JsZDI3Q2xvc2VzdENvbnZleFJlc3VsdENhbGxiYWNrRQBOMTZidENvbGxpc2lvbldvcmxkMjBDb252ZXhSZXN1bHRDYWxsYmFja0UAAAAAlBUAACpgAAC8FQAA+F8AAFhgAAAAAAAAtGAAALUCAAC2AgAApwIAALcCAABOMTZidENvbGxpc2lvbldvcmxkMjNBbGxDb252ZXhSZXN1bHRDYWxsYmFja0UAAAC8FQAAhGAAAFhgAAAAAAAAGGEAALgCAAC5AgAAugIAALsCAAC8AgAAMTlidEdob3N0UGFpckNhbGxiYWNrADI1YnRPdmVybGFwcGluZ1BhaXJDYWxsYmFjawAAAJQVAADyYAAAvBUAANxgAAAQYQ==");
var retasmFunc = asmFunc({Math,Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array,NaN,Infinity}, {abort:function() { throw new Error('abort'); },fd_close,fd_write,getWorldTransform,setWorldTransform,fd_seek},memasmFunc);
exports.btGImpactCollisionAlgorithm_RegisterAlgorithm = retasmFunc.btGImpactCollisionAlgorithm_RegisterAlgorithm;
exports.btVector3_create = retasmFunc.btVector3_create;
exports.btVector3_setValue = retasmFunc.btVector3_setValue;
exports.btVector3_x = retasmFunc.btVector3_x;
exports.btVector3_y = retasmFunc.btVector3_y;
exports.btVector3_z = retasmFunc.btVector3_z;
exports.btVector4_create = retasmFunc.btVector4_create;
exports.btVector4_setValue = retasmFunc.btVector4_setValue;
exports.btQuaternion_create = retasmFunc.btQuaternion_create;
exports.btQuaternion_setValue = retasmFunc.btQuaternion_setValue;
exports.btQuaternion_x = retasmFunc.btQuaternion_x;
exports.btQuaternion_y = retasmFunc.btQuaternion_y;
exports.btQuaternion_z = retasmFunc.btQuaternion_z;
exports.btQuaternion_w = retasmFunc.btQuaternion_w;
exports.btTransform_create = retasmFunc.btTransform_create;
exports.btTransform_setOrigin = retasmFunc.btTransform_setOrigin;
exports.btTransform_setRotation = retasmFunc.btTransform_setRotation;
exports.btTransform_getOrigin = retasmFunc.btTransform_getOrigin;
exports.btTransform_getRotation = retasmFunc.btTransform_getRotation;
exports.LayaMotionState_create = retasmFunc.LayaMotionState_create;
exports.layaMotionState_set_rigidBodyID = retasmFunc.layaMotionState_set_rigidBodyID;
exports.btCollisionObject_create = retasmFunc.btCollisionObject_create;
exports.btCollisionObject_setContactProcessingThreshold = retasmFunc.btCollisionObject_setContactProcessingThreshold;
exports.btCollisionObject_setActivationState = retasmFunc.btCollisionObject_setActivationState;
exports.btCollisionObject_forceActivationState = retasmFunc.btCollisionObject_forceActivationState;
exports.btCollisionObject_activate = retasmFunc.btCollisionObject_activate;
exports.btCollisionObject_isActive = retasmFunc.btCollisionObject_isActive;
exports.btCollisionObject_setRestitution = retasmFunc.btCollisionObject_setRestitution;
exports.btCollisionObject_setFriction = retasmFunc.btCollisionObject_setFriction;
exports.btCollisionObject_setRollingFriction = retasmFunc.btCollisionObject_setRollingFriction;
exports.btCollisionObject_getCollisionFlags = retasmFunc.btCollisionObject_getCollisionFlags;
exports.btCollisionObject_setCollisionFlags = retasmFunc.btCollisionObject_setCollisionFlags;
exports.btCollisionObject_getWorldTransform = retasmFunc.btCollisionObject_getWorldTransform;
exports.btCollisionObject_setCollisionShape = retasmFunc.btCollisionObject_setCollisionShape;
exports.btCollisionObject_getCcdMotionThreshold = retasmFunc.btCollisionObject_getCcdMotionThreshold;
exports.btCollisionObject_setCcdMotionThreshold = retasmFunc.btCollisionObject_setCcdMotionThreshold;
exports.btCollisionObject_getCcdSweptSphereRadius = retasmFunc.btCollisionObject_getCcdSweptSphereRadius;
exports.btCollisionObject_setCcdSweptSphereRadius = retasmFunc.btCollisionObject_setCcdSweptSphereRadius;
exports.btCollisionObject_getUserIndex = retasmFunc.btCollisionObject_getUserIndex;
exports.btCollisionObject_setUserIndex = retasmFunc.btCollisionObject_setUserIndex;
exports.btCollisionObject_getActivationState = retasmFunc.btCollisionObject_getActivationState;
exports.btCollisionObject_setInterpolationAngularVelocity = retasmFunc.btCollisionObject_setInterpolationAngularVelocity;
exports.btCollisionObject_setInterpolationLinearVelocity = retasmFunc.btCollisionObject_setInterpolationLinearVelocity;
exports.RayResultCallback_hasHit = retasmFunc.RayResultCallback_hasHit;
exports.RayResultCallback_set_m_collisionFilterGroup = retasmFunc.RayResultCallback_set_m_collisionFilterGroup;
exports.RayResultCallback_set_m_collisionFilterMask = retasmFunc.RayResultCallback_set_m_collisionFilterMask;
exports.RayResultCallback_get_m_closestHitFraction = retasmFunc.RayResultCallback_get_m_closestHitFraction;
exports.RayResultCallback_set_m_closestHitFraction = retasmFunc.RayResultCallback_set_m_closestHitFraction;
exports.RayResultCallback_get_m_collisionObject = retasmFunc.RayResultCallback_get_m_collisionObject;
exports.RayResultCallback_set_m_collisionObject = retasmFunc.RayResultCallback_set_m_collisionObject;
exports.ClosestRayResultCallback_create = retasmFunc.ClosestRayResultCallback_create;
exports.ClosestRayResultCallback_get_m_rayFromWorld = retasmFunc.ClosestRayResultCallback_get_m_rayFromWorld;
exports.ClosestRayResultCallback_set_m_rayFromWorld = retasmFunc.ClosestRayResultCallback_set_m_rayFromWorld;
exports.ClosestRayResultCallback_get_m_rayToWorld = retasmFunc.ClosestRayResultCallback_get_m_rayToWorld;
exports.ClosestRayResultCallback_set_m_rayToWorld = retasmFunc.ClosestRayResultCallback_set_m_rayToWorld;
exports.ClosestRayResultCallback_get_m_hitNormalWorld = retasmFunc.ClosestRayResultCallback_get_m_hitNormalWorld;
exports.ClosestRayResultCallback_get_m_hitPointWorld = retasmFunc.ClosestRayResultCallback_get_m_hitPointWorld;
exports.tBtCollisionObjectArray_size = retasmFunc.tBtCollisionObjectArray_size;
exports.tBtCollisionObjectArray_at = retasmFunc.tBtCollisionObjectArray_at;
exports.tBtCollisionObjectArray_clear = retasmFunc.tBtCollisionObjectArray_clear;
exports.tVector3Array_at = retasmFunc.tVector3Array_at;
exports.tVector3Array_clear = retasmFunc.tVector3Array_clear;
exports.tScalarArray_at = retasmFunc.tScalarArray_at;
exports.tScalarArray_clear = retasmFunc.tScalarArray_clear;
exports.AllHitsRayResultCallback_create = retasmFunc.AllHitsRayResultCallback_create;
exports.AllHitsRayResultCallback_get_m_rayFromWorld = retasmFunc.AllHitsRayResultCallback_get_m_rayFromWorld;
exports.AllHitsRayResultCallback_set_m_rayFromWorld = retasmFunc.AllHitsRayResultCallback_set_m_rayFromWorld;
exports.AllHitsRayResultCallback_get_m_rayToWorld = retasmFunc.AllHitsRayResultCallback_get_m_rayToWorld;
exports.AllHitsRayResultCallback_set_m_rayToWorld = retasmFunc.AllHitsRayResultCallback_set_m_rayToWorld;
exports.AllHitsRayResultCallback_get_m_hitPointWorld = retasmFunc.AllHitsRayResultCallback_get_m_hitPointWorld;
exports.AllHitsRayResultCallback_get_m_hitNormalWorld = retasmFunc.AllHitsRayResultCallback_get_m_hitNormalWorld;
exports.AllHitsRayResultCallback_get_m_collisionObjects = retasmFunc.AllHitsRayResultCallback_get_m_collisionObjects;
exports.AllHitsRayResultCallback_get_m_hitFractions = retasmFunc.AllHitsRayResultCallback_get_m_hitFractions;
exports.btManifoldPoint_get_m_positionWorldOnA = retasmFunc.btManifoldPoint_get_m_positionWorldOnA;
exports.btManifoldPoint_get_m_positionWorldOnB = retasmFunc.btManifoldPoint_get_m_positionWorldOnB;
exports.btManifoldPoint_get_m_normalWorldOnB = retasmFunc.btManifoldPoint_get_m_normalWorldOnB;
exports.btManifoldPoint_getDistance = retasmFunc.btManifoldPoint_getDistance;
exports.ConvexResultCallback_hasHit = retasmFunc.ConvexResultCallback_hasHit;
exports.ConvexResultCallback_set_m_collisionFilterGroup = retasmFunc.ConvexResultCallback_set_m_collisionFilterGroup;
exports.ConvexResultCallback_set_m_collisionFilterMask = retasmFunc.ConvexResultCallback_set_m_collisionFilterMask;
exports.ConvexResultCallback_get_m_closestHitFraction = retasmFunc.ConvexResultCallback_get_m_closestHitFraction;
exports.ConvexResultCallback_set_m_closestHitFraction = retasmFunc.ConvexResultCallback_set_m_closestHitFraction;
exports.ClosestConvexResultCallback_create = retasmFunc.ClosestConvexResultCallback_create;
exports.ClosestConvexResultCallback_get_m_hitNormalWorld = retasmFunc.ClosestConvexResultCallback_get_m_hitNormalWorld;
exports.ClosestConvexResultCallback_get_m_hitPointWorld = retasmFunc.ClosestConvexResultCallback_get_m_hitPointWorld;
exports.ClosestConvexResultCallback_get_m_hitCollisionObject = retasmFunc.ClosestConvexResultCallback_get_m_hitCollisionObject;
exports.ClosestConvexResultCallback_set_m_hitCollisionObject = retasmFunc.ClosestConvexResultCallback_set_m_hitCollisionObject;
exports.AllConvexResultCallback_create = retasmFunc.AllConvexResultCallback_create;
exports.AllConvexResultCallback_get_m_hitNormalWorld = retasmFunc.AllConvexResultCallback_get_m_hitNormalWorld;
exports.AllConvexResultCallback_get_m_hitPointWorld = retasmFunc.AllConvexResultCallback_get_m_hitPointWorld;
exports.AllConvexResultCallback_get_m_hitFractions = retasmFunc.AllConvexResultCallback_get_m_hitFractions;
exports.AllConvexResultCallback_get_m_collisionObjects = retasmFunc.AllConvexResultCallback_get_m_collisionObjects;
exports.btCollisionShape_getLocalScaling = retasmFunc.btCollisionShape_getLocalScaling;
exports.btCollisionShape_setLocalScaling = retasmFunc.btCollisionShape_setLocalScaling;
exports.btCollisionShape_calculateLocalInertia = retasmFunc.btCollisionShape_calculateLocalInertia;
exports.btBoxShape_create = retasmFunc.btBoxShape_create;
exports.btCapsuleShape_create = retasmFunc.btCapsuleShape_create;
exports.btCapsuleShapeX_create = retasmFunc.btCapsuleShapeX_create;
exports.btCapsuleShapeZ_create = retasmFunc.btCapsuleShapeZ_create;
exports.btCylinderShape_create = retasmFunc.btCylinderShape_create;
exports.btCylinderShapeX_create = retasmFunc.btCylinderShapeX_create;
exports.btCylinderShapeZ_create = retasmFunc.btCylinderShapeZ_create;
exports.btSphereShape_create = retasmFunc.btSphereShape_create;
exports.btConeShape_create = retasmFunc.btConeShape_create;
exports.btConeShapeX_create = retasmFunc.btConeShapeX_create;
exports.btConeShapeZ_create = retasmFunc.btConeShapeZ_create;
exports.btStaticPlaneShape_create = retasmFunc.btStaticPlaneShape_create;
exports.btGImpactShapeInterface_updateBound = retasmFunc.btGImpactShapeInterface_updateBound;
exports.btGImpactMeshShape_create = retasmFunc.btGImpactMeshShape_create;
exports.btCompoundShape_create = retasmFunc.btCompoundShape_create;
exports.btCompoundShape_addChildShape = retasmFunc.btCompoundShape_addChildShape;
exports.btCompoundShape_removeChildShapeByIndex = retasmFunc.btCompoundShape_removeChildShapeByIndex;
exports.btCompoundShape_getChildShape = retasmFunc.btCompoundShape_getChildShape;
exports.btCompoundShape_updateChildTransform = retasmFunc.btCompoundShape_updateChildTransform;
exports.btTriangleMesh_create = retasmFunc.btTriangleMesh_create;
exports.btTriangleMesh_addTriangle = retasmFunc.btTriangleMesh_addTriangle;
exports.btDefaultCollisionConfiguration_create = retasmFunc.btDefaultCollisionConfiguration_create;
exports.btPersistentManifold_getBody0 = retasmFunc.btPersistentManifold_getBody0;
exports.btPersistentManifold_getBody1 = retasmFunc.btPersistentManifold_getBody1;
exports.btPersistentManifold_getNumContacts = retasmFunc.btPersistentManifold_getNumContacts;
exports.btPersistentManifold_getContactPoint = retasmFunc.btPersistentManifold_getContactPoint;
exports.btDispatcher_getNumManifolds = retasmFunc.btDispatcher_getNumManifolds;
exports.btDispatcher_getManifoldByIndexInternal = retasmFunc.btDispatcher_getManifoldByIndexInternal;
exports.btCollisionDispatcher_create = retasmFunc.btCollisionDispatcher_create;
exports.btOverlappingPairCache_setInternalGhostPairCallback = retasmFunc.btOverlappingPairCache_setInternalGhostPairCallback;
exports.btDbvtBroadphase_create = retasmFunc.btDbvtBroadphase_create;
exports.btDbvtBroadphase_getOverlappingPairCache = retasmFunc.btDbvtBroadphase_getOverlappingPairCache;
exports.btRigidBodyConstructionInfo_create = retasmFunc.btRigidBodyConstructionInfo_create;
exports.btRigidBodyConstructionInfo_destroy = retasmFunc.btRigidBodyConstructionInfo_destroy;
exports.btRigidBody_create = retasmFunc.btRigidBody_create;
exports.btRigidBody_setCenterOfMassTransform = retasmFunc.btRigidBody_setCenterOfMassTransform;
exports.btRigidBody_setSleepingThresholds = retasmFunc.btRigidBody_setSleepingThresholds;
exports.btRigidBody_getLinearSleepingThreshold = retasmFunc.btRigidBody_getLinearSleepingThreshold;
exports.btRigidBody_getAngularSleepingThreshold = retasmFunc.btRigidBody_getAngularSleepingThreshold;
exports.btRigidBody_setDamping = retasmFunc.btRigidBody_setDamping;
exports.btRigidBody_setMassProps = retasmFunc.btRigidBody_setMassProps;
exports.btRigidBody_setLinearFactor = retasmFunc.btRigidBody_setLinearFactor;
exports.btRigidBody_applyTorque = retasmFunc.btRigidBody_applyTorque;
exports.btRigidBody_applyForce = retasmFunc.btRigidBody_applyForce;
exports.btRigidBody_applyCentralForce = retasmFunc.btRigidBody_applyCentralForce;
exports.btRigidBody_applyTorqueImpulse = retasmFunc.btRigidBody_applyTorqueImpulse;
exports.btRigidBody_applyImpulse = retasmFunc.btRigidBody_applyImpulse;
exports.btRigidBody_applyCentralImpulse = retasmFunc.btRigidBody_applyCentralImpulse;
exports.btRigidBody_updateInertiaTensor = retasmFunc.btRigidBody_updateInertiaTensor;
exports.btRigidBody_getLinearVelocity = retasmFunc.btRigidBody_getLinearVelocity;
exports.btRigidBody_getAngularVelocity = retasmFunc.btRigidBody_getAngularVelocity;
exports.btRigidBody_setLinearVelocity = retasmFunc.btRigidBody_setLinearVelocity;
exports.btRigidBody_setAngularVelocity = retasmFunc.btRigidBody_setAngularVelocity;
exports.btRigidBody_setAngularFactor = retasmFunc.btRigidBody_setAngularFactor;
exports.btRigidBody_getGravity = retasmFunc.btRigidBody_getGravity;
exports.btRigidBody_setGravity = retasmFunc.btRigidBody_setGravity;
exports.btRigidBody_getTotalForce = retasmFunc.btRigidBody_getTotalForce;
exports.btRigidBody_getTotalTorque = retasmFunc.btRigidBody_getTotalTorque;
exports.btRigidBody_getFlags = retasmFunc.btRigidBody_getFlags;
exports.btRigidBody_setFlags = retasmFunc.btRigidBody_setFlags;
exports.btRigidBody_clearForces = retasmFunc.btRigidBody_clearForces;
exports.btSequentialImpulseConstraintSolver_create = retasmFunc.btSequentialImpulseConstraintSolver_create;
exports.btCollisionWorld_get_m_useContinuous = retasmFunc.btCollisionWorld_get_m_useContinuous;
exports.btCollisionWorld_set_m_useContinuous = retasmFunc.btCollisionWorld_set_m_useContinuous;
exports.btCollisionWorld_rayTest = retasmFunc.btCollisionWorld_rayTest;
exports.btCollisionWorld_getDispatchInfo = retasmFunc.btCollisionWorld_getDispatchInfo;
exports.btCollisionWorld_addCollisionObject = retasmFunc.btCollisionWorld_addCollisionObject;
exports.btCollisionWorld_removeCollisionObject = retasmFunc.btCollisionWorld_removeCollisionObject;
exports.btCollisionWorld_convexSweepTest = retasmFunc.btCollisionWorld_convexSweepTest;
exports.btDynamicsWorld_addAction = retasmFunc.btDynamicsWorld_addAction;
exports.btDynamicsWorld_removeAction = retasmFunc.btDynamicsWorld_removeAction;
exports.btDynamicsWorld_getSolverInfo = retasmFunc.btDynamicsWorld_getSolverInfo;
exports.btDiscreteDynamicsWorld_create = retasmFunc.btDiscreteDynamicsWorld_create;
exports.btDiscreteDynamicsWorld_setGravity = retasmFunc.btDiscreteDynamicsWorld_setGravity;
exports.btDiscreteDynamicsWorld_getGravity = retasmFunc.btDiscreteDynamicsWorld_getGravity;
exports.btDiscreteDynamicsWorld_addRigidBody = retasmFunc.btDiscreteDynamicsWorld_addRigidBody;
exports.btDiscreteDynamicsWorld_removeRigidBody = retasmFunc.btDiscreteDynamicsWorld_removeRigidBody;
exports.btDiscreteDynamicsWorld_stepSimulation = retasmFunc.btDiscreteDynamicsWorld_stepSimulation;
exports.btDiscreteDynamicsWorld_clearForces = retasmFunc.btDiscreteDynamicsWorld_clearForces;
exports.btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution = retasmFunc.btDiscreteDynamicsWorld_setApplySpeculativeContactRestitution;
exports.btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution = retasmFunc.btDiscreteDynamicsWorld_getApplySpeculativeContactRestitution;
exports.btKinematicCharacterController_create = retasmFunc.btKinematicCharacterController_create;
exports.btKinematicCharacterController_setWalkDirection = retasmFunc.btKinematicCharacterController_setWalkDirection;
exports.btKinematicCharacterController_setFallSpeed = retasmFunc.btKinematicCharacterController_setFallSpeed;
exports.btKinematicCharacterController_setJumpSpeed = retasmFunc.btKinematicCharacterController_setJumpSpeed;
exports.btKinematicCharacterController_setMaxSlope = retasmFunc.btKinematicCharacterController_setMaxSlope;
exports.btKinematicCharacterController_onGround = retasmFunc.btKinematicCharacterController_onGround;
exports.btKinematicCharacterController_jump = retasmFunc.btKinematicCharacterController_jump;
exports.btKinematicCharacterController_setGravity = retasmFunc.btKinematicCharacterController_setGravity;
exports.btPairCachingGhostObject_create = retasmFunc.btPairCachingGhostObject_create;
exports.btGhostPairCallback_create = retasmFunc.btGhostPairCallback_create;
}
var physics3D=window.Physics3D={};
physics3D.then=(completeFun)=>{
  completeFun(physics3D);
}
init(pages*64*1024,interactive,physics3D);
return physics3D;
}
