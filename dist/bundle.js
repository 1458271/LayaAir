/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/debug/Main1.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/core/Config.ts":
/*!****************************!*\
  !*** ./src/core/Config.ts ***!
  \****************************/
/*! exports provided: Config */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Config\", function() { return Config; });\n/**\r\n     *  Config 用于配置一些全局参数。如需更改，请在初始化引擎之前设置。\r\n     */\r\nclass Config {\r\n}\r\n/**\r\n * 动画 Animation 的默认播放时间间隔，单位为毫秒。\r\n */\r\nConfig.animationInterval = 50;\r\n/**\r\n * 设置是否抗锯齿，只对2D(WebGL)、3D有效。\r\n */\r\nConfig.isAntialias = false;\r\n/**\r\n * 设置画布是否透明，只对2D(WebGL)、3D有效。\r\n */\r\nConfig.isAlpha = false;\r\n/**\r\n * 设置画布是否预乘，只对2D(WebGL)、3D有效。\r\n */\r\nConfig.premultipliedAlpha = true;\r\n/**\r\n * 设置画布的是否开启模板缓冲，只对2D(WebGL)、3D有效。\r\n */\r\nConfig.isStencil = true;\r\n/**\r\n * 是否强制WebGL同步刷新。\r\n */\r\nConfig.preserveDrawingBuffer = false;\r\n/**\r\n * 当使用webGL渲染2d的时候，每次创建vb是否直接分配足够64k个顶点的缓存。这样可以提高效率。\r\n */\r\nConfig.webGL2D_MeshAllocMaxMem = true;\r\n/**\r\n * 是否强制使用像素采样。适用于像素风格游戏\r\n */\r\nConfig.is2DPixelArtGame = false;\r\n/**\r\n * 是否使用webgl2\r\n */\r\nConfig.useWebGL2 = false;\r\nConfig.useRetinalCanvas = false;\r\n\n\n//# sourceURL=webpack:///./src/core/Config.ts?");

/***/ }),

/***/ "./src/core/Laya.ts":
/*!**************************!*\
  !*** ./src/core/Laya.ts ***!
  \**************************/
/*! exports provided: Laya */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Laya\", function() { return Laya; });\n/* harmony import */ var _laya_display_Input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./laya/display/Input */ \"./src/core/laya/display/Input.ts\");\n/* harmony import */ var _laya_display_Stage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./laya/display/Stage */ \"./src/core/laya/display/Stage.ts\");\n/* harmony import */ var _laya_events_KeyBoardManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./laya/events/KeyBoardManager */ \"./src/core/laya/events/KeyBoardManager.ts\");\n/* harmony import */ var _laya_events_MouseManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./laya/events/MouseManager */ \"./src/core/laya/events/MouseManager.ts\");\n/* harmony import */ var _laya_media_SoundManager__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./laya/media/SoundManager */ \"./src/core/laya/media/SoundManager.ts\");\n/* harmony import */ var _laya_net_LoaderManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./laya/net/LoaderManager */ \"./src/core/laya/net/LoaderManager.ts\");\n/* harmony import */ var _laya_net_URL__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./laya/net/URL */ \"./src/core/laya/net/URL.ts\");\n/* harmony import */ var _laya_renders_Render__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./laya/renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _laya_renders_RenderSprite__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./laya/renders/RenderSprite */ \"./src/core/laya/renders/RenderSprite.ts\");\n/* harmony import */ var _laya_utils_Browser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./laya/utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _laya_utils_CacheManger__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./laya/utils/CacheManger */ \"./src/core/laya/utils/CacheManger.ts\");\n/* harmony import */ var _laya_utils_RunDriver__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./laya/utils/RunDriver */ \"./src/core/laya/utils/RunDriver.ts\");\n/* harmony import */ var _laya_utils_Timer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./laya/utils/Timer */ \"./src/core/laya/utils/Timer.ts\");\n/* harmony import */ var _laya_webgl_WebGL__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./laya/webgl/WebGL */ \"./src/core/laya/webgl/WebGL.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * <code>Laya</code> 是全局对象的引用入口集。\r\n * Laya类引用了一些常用的全局对象，比如Laya.stage：舞台，Laya.timer：时间管理器，Laya.loader：加载管理器，使用时注意大小写。\r\n */\r\nclass Laya {\r\n    /**\r\n     * 初始化引擎。使用引擎需要先初始化引擎，否则可能会报错。\r\n     * @param\twidth 初始化的游戏窗口宽度，又称设计宽度。\r\n     * @param\theight\t初始化的游戏窗口高度，又称设计高度。\r\n     * @param\tplugins 插件列表，比如 WebGL（使用WebGL方式渲染）。\r\n     * @return\t返回原生canvas引用，方便对canvas属性进行修改\r\n     */\r\n    static init(width, height, ...plugins) {\r\n        if (Laya._isinit)\r\n            return;\r\n        Laya._isinit = true;\r\n        ArrayBuffer.prototype.slice || (ArrayBuffer.prototype.slice = Laya._arrayBufferSlice);\r\n        _laya_utils_Browser__WEBPACK_IMPORTED_MODULE_9__[\"Browser\"].__init__();\r\n        Laya.systemTimer = new _laya_utils_Timer__WEBPACK_IMPORTED_MODULE_12__[\"Timer\"](false);\r\n        Laya.startTimer = new _laya_utils_Timer__WEBPACK_IMPORTED_MODULE_12__[\"Timer\"](false);\r\n        Laya.physicsTimer = new _laya_utils_Timer__WEBPACK_IMPORTED_MODULE_12__[\"Timer\"](false);\r\n        Laya.updateTimer = new _laya_utils_Timer__WEBPACK_IMPORTED_MODULE_12__[\"Timer\"](false);\r\n        Laya.lateTimer = new _laya_utils_Timer__WEBPACK_IMPORTED_MODULE_12__[\"Timer\"](false);\r\n        Laya.timer = new _laya_utils_Timer__WEBPACK_IMPORTED_MODULE_12__[\"Timer\"](false);\r\n        Laya.loader = new _laya_net_LoaderManager__WEBPACK_IMPORTED_MODULE_5__[\"LoaderManager\"]();\r\n        _laya_webgl_WebGL__WEBPACK_IMPORTED_MODULE_13__[\"WebGL\"].inner_enable();\r\n        for (var i = 0, n = plugins.length; i < n; i++) {\r\n            if (plugins[i] && plugins[i].enable) {\r\n                plugins[i].enable();\r\n            }\r\n        }\r\n        if (_laya_renders_Render__WEBPACK_IMPORTED_MODULE_7__[\"Render\"].isConchApp) {\r\n            _laya_utils_RunDriver__WEBPACK_IMPORTED_MODULE_11__[\"RunDriver\"].enableNative();\r\n        }\r\n        _laya_utils_CacheManger__WEBPACK_IMPORTED_MODULE_10__[\"CacheManger\"].beginCheck();\r\n        Laya._currentStage = Laya.stage = new _laya_display_Stage__WEBPACK_IMPORTED_MODULE_1__[\"Stage\"]();\r\n        _laya_net_URL__WEBPACK_IMPORTED_MODULE_6__[\"URL\"].rootPath = _laya_net_URL__WEBPACK_IMPORTED_MODULE_6__[\"URL\"]._basePath = Laya._getUrlPath();\r\n        Laya.render = new _laya_renders_Render__WEBPACK_IMPORTED_MODULE_7__[\"Render\"](0, 0);\r\n        Laya.stage.size(width, height);\r\n        window.stage = Laya.stage;\r\n        _laya_renders_RenderSprite__WEBPACK_IMPORTED_MODULE_8__[\"RenderSprite\"].__init__();\r\n        _laya_events_KeyBoardManager__WEBPACK_IMPORTED_MODULE_2__[\"KeyBoardManager\"].__init__();\r\n        _laya_events_MouseManager__WEBPACK_IMPORTED_MODULE_3__[\"MouseManager\"].instance.__init__(Laya.stage, _laya_renders_Render__WEBPACK_IMPORTED_MODULE_7__[\"Render\"].canvas);\r\n        _laya_display_Input__WEBPACK_IMPORTED_MODULE_0__[\"Input\"].__init__();\r\n        _laya_media_SoundManager__WEBPACK_IMPORTED_MODULE_4__[\"SoundManager\"].autoStopMusic = true;\r\n        return _laya_renders_Render__WEBPACK_IMPORTED_MODULE_7__[\"Render\"].canvas;\r\n    }\r\n    /**@private */\r\n    static _getUrlPath() {\r\n        var location = _laya_utils_Browser__WEBPACK_IMPORTED_MODULE_9__[\"Browser\"].window.location;\r\n        var pathName = location.pathname;\r\n        // 索引为2的字符如果是':'就是windows file协议\r\n        pathName = pathName.charAt(2) == ':' ? pathName.substring(1) : pathName;\r\n        return _laya_net_URL__WEBPACK_IMPORTED_MODULE_6__[\"URL\"].getPath(location.protocol == \"file:\" ? pathName : location.protocol + \"//\" + location.host + location.pathname);\r\n    }\r\n    /**@private */\r\n    static _arrayBufferSlice(start, end) {\r\n        var arr = this;\r\n        var arrU8List = new Uint8Array(arr, start, end - start);\r\n        var newU8List = new Uint8Array(arrU8List.length);\r\n        newU8List.set(arrU8List);\r\n        return newU8List.buffer;\r\n    }\r\n    /**\r\n     * 表示是否捕获全局错误并弹出提示。默认为false。\r\n     * 适用于移动设备等不方便调试的时候，设置为true后，如有未知错误，可以弹窗抛出详细错误堆栈。\r\n     */\r\n    static set alertGlobalError(value) {\r\n        var erralert = 0;\r\n        if (value) {\r\n            _laya_utils_Browser__WEBPACK_IMPORTED_MODULE_9__[\"Browser\"].window.onerror = function (msg, url, line, column, detail) {\r\n                if (erralert++ < 5 && detail)\r\n                    this.alert(\"出错啦，请把此信息截图给研发商\\n\" + msg + \"\\n\" + detail.stack);\r\n            };\r\n        }\r\n        else {\r\n            _laya_utils_Browser__WEBPACK_IMPORTED_MODULE_9__[\"Browser\"].window.onerror = null;\r\n        }\r\n    }\r\n    /**@private */\r\n    static _runScript(script) {\r\n        return _laya_utils_Browser__WEBPACK_IMPORTED_MODULE_9__[\"Browser\"].window[Laya._evcode](script);\r\n    }\r\n    /**\r\n     * 开启DebugPanel\r\n     * @param\tdebugJsPath laya.debugtool.js文件路径\r\n     */\r\n    static enableDebugPanel(debugJsPath = \"libs/laya.debugtool.js\") {\r\n        if (!Laya[\"DebugPanel\"]) {\r\n            var script = _laya_utils_Browser__WEBPACK_IMPORTED_MODULE_9__[\"Browser\"].createElement(\"script\");\r\n            script.onload = function () {\r\n                Laya[\"DebugPanel\"].enable();\r\n            };\r\n            script.src = debugJsPath;\r\n            _laya_utils_Browser__WEBPACK_IMPORTED_MODULE_9__[\"Browser\"].document.body.appendChild(script);\r\n        }\r\n        else {\r\n            Laya[\"DebugPanel\"].enable();\r\n        }\r\n    }\r\n}\r\n/*[COMPILER OPTIONS:normal]*/\r\n/** 舞台对象的引用。*/\r\nLaya.stage = null;\r\n/**@private 系统时钟管理器，引擎内部使用*/\r\nLaya.systemTimer = null;\r\n/**@private 组件的start时钟管理器*/\r\nLaya.startTimer = null;\r\n/**@private 组件的物理时钟管理器*/\r\nLaya.physicsTimer = null;\r\n/**@private 组件的update时钟管理器*/\r\nLaya.updateTimer = null;\r\n/**@private 组件的lateUpdate时钟管理器*/\r\nLaya.lateTimer = null;\r\n/**游戏主时针，同时也是管理场景，动画，缓动等效果时钟，通过控制本时针缩放，达到快进慢播效果*/\r\nLaya.timer = null;\r\n/** 加载管理器的引用。*/\r\nLaya.loader = null;\r\n/** 当前引擎版本。*/\r\nLaya.version = \"2.1.0beta\";\r\n/**@private */\r\nLaya._isinit = false;\r\n/**是否是微信小游戏子域，默认为false**/\r\nLaya.isWXOpenDataContext = false;\r\n/**微信小游戏是否需要在主域中自动将加载的文本数据自动传递到子域，默认 false**/\r\nLaya.isWXPosMsg = false;\r\nLaya._evcode = \"eva\" + \"l\";\r\n\n\n//# sourceURL=webpack:///./src/core/Laya.ts?");

/***/ }),

/***/ "./src/core/laya/Const.ts":
/*!********************************!*\
  !*** ./src/core/laya/Const.ts ***!
  \********************************/
/*! exports provided: Const */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Const\", function() { return Const; });\n/**\r\n     * @private\r\n     * 静态常量集合\r\n     */\r\nclass Const {\r\n}\r\nConst.NOT_ACTIVE = 0x01;\r\nConst.ACTIVE_INHIERARCHY = 0x02;\r\nConst.AWAKED = 0x04;\r\nConst.NOT_READY = 0x08;\r\nConst.DISPLAY = 0x10;\r\nConst.HAS_ZORDER = 0x20;\r\nConst.HAS_MOUSE = 0x40;\r\nConst.DISPLAYED_INSTAGE = 0x80;\r\nConst.DRAWCALL_OPTIMIZE = 0x100;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/Const.ts?");

/***/ }),

/***/ "./src/core/laya/components/Component.ts":
/*!***********************************************!*\
  !*** ./src/core/laya/components/Component.ts ***!
  \***********************************************/
/*! exports provided: Component */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Component\", function() { return Component; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Utils */ \"./src/core/laya/utils/Utils.ts\");\n\r\n\r\n/**\r\n * <code>Component</code> 类用于创建组件的基类。\r\n */\r\nclass Component {\r\n    /**\r\n     * 创建一个新的 <code>Component</code> 实例。\r\n     */\r\n    constructor() {\r\n        this._id = _utils_Utils__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].getGID();\r\n        this._resetComp();\r\n    }\r\n    /**\r\n     * 获取唯一标识ID。\r\n     */\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    /**\r\n     * 获取是否启用组件。\r\n     */\r\n    get enabled() {\r\n        return this._enabled;\r\n    }\r\n    set enabled(value) {\r\n        this._enabled = value;\r\n        if (this.owner) {\r\n            if (value)\r\n                this.owner.activeInHierarchy && this._onEnable();\r\n            else\r\n                this.owner.activeInHierarchy && this._onDisable();\r\n        }\r\n    }\r\n    /**\r\n     * 获取是否为单实例组件。\r\n     */\r\n    get isSingleton() {\r\n        return true;\r\n    }\r\n    /**\r\n     * 获取是否已经销毁 。\r\n     */\r\n    get destroyed() {\r\n        //[实现IListPool接口]\r\n        return this._destroyed;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _isScript() {\r\n        return false;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _resetComp() {\r\n        this._indexInList = -1;\r\n        this._enabled = true;\r\n        this._awaked = false;\r\n        this.owner = null;\r\n    }\r\n    /**\r\n     * [实现IListPool接口]\r\n     * @private\r\n     */\r\n    _getIndexInList() {\r\n        return this._indexInList;\r\n    }\r\n    /**\r\n     * [实现IListPool接口]\r\n     * @private\r\n     */\r\n    _setIndexInList(index) {\r\n        this._indexInList = index;\r\n    }\r\n    /**\r\n     * 被添加到节点后调用，可根据需要重写此方法\r\n     * @private\r\n     */\r\n    _onAdded() {\r\n        //override it.\r\n    }\r\n    /**\r\n     * 被激活后调用，可根据需要重写此方法\r\n     * @private\r\n     */\r\n    _onAwake() {\r\n        //override it.\r\n    }\r\n    /**\r\n     * 被激活后调用，可根据需要重写此方法\r\n     * @private\r\n     */\r\n    _onEnable() {\r\n        //override it.\r\n    }\r\n    /**\r\n     * 被禁用时调用，可根据需要重写此方法\r\n     * @private\r\n     */\r\n    _onDisable() {\r\n        //override it.\r\n    }\r\n    /**\r\n     * 被添加到Scene后调用，无论Scene是否在舞台上，可根据需要重写此方法\r\n     * @private\r\n     */\r\n    _onEnableInScene() {\r\n        //override it.\r\n    }\r\n    /**\r\n     * 从Scene移除后调用，无论Scene是否在舞台上，可根据需要重写此方法\r\n     * @private\r\n     */\r\n    _onDisableInScene() {\r\n        //override it.\r\n    }\r\n    /**\r\n     * 被销毁时调用，可根据需要重写此方法\r\n     * @private\r\n     */\r\n    _onDestroy() {\r\n        //override it.\r\n    }\r\n    /**\r\n     * 重置组件参数到默认值，如果实现了这个函数，则组件会被重置并且自动回收到对象池，方便下次复用\r\n     * 如果没有重置，则不进行回收复用\r\n     * 此方法为虚方法，使用时重写覆盖即可\r\n     */\r\n    onReset() {\r\n        //override it.\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _parse(data) {\r\n        //override it.\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _cloneTo(dest) {\r\n        //override it.\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _setActive(value) {\r\n        if (value) {\r\n            if (!this._awaked) {\r\n                this._awaked = true;\r\n                this._onAwake();\r\n            }\r\n            this._enabled && this._onEnable();\r\n        }\r\n        else {\r\n            this._enabled && this._onDisable();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _setActiveInScene(value) {\r\n        if (value)\r\n            this._onEnableInScene();\r\n        else\r\n            this._onDisableInScene();\r\n    }\r\n    /**\r\n     * 销毁组件\r\n     */\r\n    destroy() {\r\n        if (this.owner)\r\n            this.owner._destroyComponent(this);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _destroy() {\r\n        if (this.owner.activeInHierarchy && this._enabled) {\r\n            this._setActive(false);\r\n            (this._isScript()) && (this.onDisable());\r\n        }\r\n        this.owner._scene && this._setActiveInScene(false);\r\n        this._onDestroy();\r\n        this._destroyed = true;\r\n        if (this.onReset !== Component.prototype.onReset) {\r\n            this.onReset();\r\n            this._resetComp();\r\n            _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recoverByClass(this);\r\n        }\r\n        else {\r\n            this._resetComp();\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/components/Component.ts?");

/***/ }),

/***/ "./src/core/laya/components/Prefab.ts":
/*!********************************************!*\
  !*** ./src/core/laya/components/Prefab.ts ***!
  \********************************************/
/*! exports provided: Prefab */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Prefab\", function() { return Prefab; });\n/* harmony import */ var _utils_SceneUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/SceneUtils */ \"./src/core/laya/utils/SceneUtils.ts\");\n\r\n/**\r\n * 模板，预制件\r\n */\r\nclass Prefab {\r\n    /**\r\n     * 通过预制创建实例\r\n     */\r\n    create() {\r\n        if (this.json)\r\n            return _utils_SceneUtils__WEBPACK_IMPORTED_MODULE_0__[\"SceneUtils\"].createByData(null, this.json);\r\n        return null;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/components/Prefab.ts?");

/***/ }),

/***/ "./src/core/laya/display/AnimationBase.ts":
/*!************************************************!*\
  !*** ./src/core/laya/display/AnimationBase.ts ***!
  \************************************************/
/*! exports provided: AnimationBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AnimationBase\", function() { return AnimationBase; });\n/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Sprite */ \"./src/core/laya/display/Sprite.ts\");\n/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../Config */ \"./src/core/Config.ts\");\n/* harmony import */ var _Const__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Const */ \"./src/core/laya/Const.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n\r\n\r\n\r\n\r\n/**\r\n * 动画播放完毕后调度。\r\n * @eventType Event.COMPLETE\r\n */\r\n/*[Event(name = \"complete\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 播放到某标签后调度。\r\n * @eventType Event.LABEL\r\n */\r\n/*[Event(name = \"label\", type = \"laya.events.Event\")]*/\r\n/**\r\n * <p>动画基类，提供了基础的动画播放控制方法和帧标签事件相关功能。</p>\r\n * <p>可以继承此类，但不要直接实例化此类，因为有些方法需要由子类实现。</p>\r\n */\r\nclass AnimationBase extends _Sprite__WEBPACK_IMPORTED_MODULE_0__[\"Sprite\"] {\r\n    /**\r\n     * 可以继承此类，但不要直接实例化此类，因为有些方法需要由子类实现。\r\n     */\r\n    constructor() {\r\n        super();\r\n        /**播放顺序类型：AnimationBase.WRAP_POSITIVE为正序播放(默认值)，AnimationBase.WRAP_REVERSE为倒序播放，AnimationBase.WRAP_PINGPONG为pingpong播放(当按指定顺序播放完结尾后，如果继续播发，则会改变播放顺序)。*/\r\n        this.wrapMode = 0;\r\n        /**@private 播放间隔(单位：毫秒)。*/\r\n        this._interval = _Config__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].animationInterval;\r\n        /**是否是逆序播放*/\r\n        this._isReverse = false;\r\n        /**@private */\r\n        this._frameRateChanged = false;\r\n        this._setBitUp(_Const__WEBPACK_IMPORTED_MODULE_2__[\"Const\"].DISPLAY);\r\n    }\r\n    /**\r\n     * <p>开始播放动画。play(...)方法被设计为在创建实例后的任何时候都可以被调用，当相应的资源加载完毕、调用动画帧填充方法(set frames)或者将实例显示在舞台上时，会判断是否正在播放中，如果是，则进行播放。</p>\r\n     * <p>配合wrapMode属性，可设置动画播放顺序类型。</p>\r\n     * @param\tstart\t（可选）指定动画播放开始的索引(int)或帧标签(String)。帧标签可以通过addLabel(...)和removeLabel(...)进行添加和删除。\r\n     * @param\tloop\t（可选）是否循环播放。\r\n     * @param\tname\t（可选）动画名称。\r\n     */\r\n    play(start = 0, loop = true, name = \"\") {\r\n        this._isPlaying = true;\r\n        this._actionName = name;\r\n        this.index = (start instanceof String) ? this._getFrameByLabel(start) : start;\r\n        this.loop = loop;\r\n        this._isReverse = this.wrapMode === AnimationBase.WRAP_REVERSE;\r\n        if (this.index == 0 && this._isReverse) {\r\n            this.index = this.count - 1;\r\n        }\r\n        if (this.interval > 0)\r\n            this.timerLoop(this.interval, this, this._frameLoop, null, true, true);\r\n    }\r\n    /**\r\n     * <p>动画播放的帧间隔时间(单位：毫秒)。默认值依赖于Config.animationInterval=50，通过Config.animationInterval可以修改默认帧间隔时间。</p>\r\n     * <p>要想为某动画设置独立的帧间隔时间，可以使用set interval，注意：如果动画正在播放，设置后会重置帧循环定时器的起始时间为当前时间，也就是说，如果频繁设置interval，会导致动画帧更新的时间间隔会比预想的要慢，甚至不更新。</p>\r\n     */\r\n    get interval() {\r\n        return this._interval;\r\n    }\r\n    set interval(value) {\r\n        if (this._interval != value) {\r\n            this._frameRateChanged = true;\r\n            this._interval = value;\r\n            if (this._isPlaying && value > 0) {\r\n                this.timerLoop(value, this, this._frameLoop, null, true, true);\r\n            }\r\n        }\r\n    }\r\n    /**@private */\r\n    _getFrameByLabel(label) {\r\n        for (var i = 0; i < this._count; i++) {\r\n            var item = this._labels[i];\r\n            if (item && item.indexOf(label) > -1)\r\n                return i;\r\n        }\r\n        return 0;\r\n    }\r\n    /**@private */\r\n    _frameLoop() {\r\n        if (this._isReverse) {\r\n            this._index--;\r\n            if (this._index < 0) {\r\n                if (this.loop) {\r\n                    if (this.wrapMode == AnimationBase.WRAP_PINGPONG) {\r\n                        this._index = this._count > 0 ? 1 : 0;\r\n                        this._isReverse = false;\r\n                    }\r\n                    else {\r\n                        this._index = this._count - 1;\r\n                    }\r\n                    this.event(_events_Event__WEBPACK_IMPORTED_MODULE_3__[\"Event\"].COMPLETE);\r\n                }\r\n                else {\r\n                    this._index = 0;\r\n                    this.stop();\r\n                    this.event(_events_Event__WEBPACK_IMPORTED_MODULE_3__[\"Event\"].COMPLETE);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._index++;\r\n            if (this._index >= this._count) {\r\n                if (this.loop) {\r\n                    if (this.wrapMode == AnimationBase.WRAP_PINGPONG) {\r\n                        this._index = this._count - 2 >= 0 ? this._count - 2 : 0;\r\n                        this._isReverse = true;\r\n                    }\r\n                    else {\r\n                        this._index = 0;\r\n                    }\r\n                    this.event(_events_Event__WEBPACK_IMPORTED_MODULE_3__[\"Event\"].COMPLETE);\r\n                }\r\n                else {\r\n                    this._index--;\r\n                    this.stop();\r\n                    this.event(_events_Event__WEBPACK_IMPORTED_MODULE_3__[\"Event\"].COMPLETE);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        this.index = this._index;\r\n    }\r\n    /**@private */\r\n    _setControlNode(node) {\r\n        if (this._controlNode) {\r\n            this._controlNode.off(_events_Event__WEBPACK_IMPORTED_MODULE_3__[\"Event\"].DISPLAY, this, this._resumePlay);\r\n            this._controlNode.off(_events_Event__WEBPACK_IMPORTED_MODULE_3__[\"Event\"].UNDISPLAY, this, this._resumePlay);\r\n        }\r\n        this._controlNode = node;\r\n        if (node && node != this) {\r\n            node.on(_events_Event__WEBPACK_IMPORTED_MODULE_3__[\"Event\"].DISPLAY, this, this._resumePlay);\r\n            node.on(_events_Event__WEBPACK_IMPORTED_MODULE_3__[\"Event\"].UNDISPLAY, this, this._resumePlay);\r\n        }\r\n    }\r\n    /**@private */\r\n    /*override*/ _setDisplay(value) {\r\n        super._setDisplay(value);\r\n        this._resumePlay();\r\n    }\r\n    /**@private */\r\n    _resumePlay() {\r\n        if (this._isPlaying) {\r\n            if (this._controlNode.displayedInStage)\r\n                this.play(this._index, this.loop, this._actionName);\r\n            else\r\n                this.clearTimer(this, this._frameLoop);\r\n        }\r\n    }\r\n    /**\r\n     * 停止动画播放。\r\n     */\r\n    stop() {\r\n        this._isPlaying = false;\r\n        this.clearTimer(this, this._frameLoop);\r\n    }\r\n    /**\r\n     * 是否正在播放中。\r\n     */\r\n    get isPlaying() {\r\n        return this._isPlaying;\r\n    }\r\n    /**\r\n     * 增加一个帧标签到指定索引的帧上。当动画播放到此索引的帧时会派发Event.LABEL事件，派发事件是在完成当前帧画面更新之后。\r\n     * @param\tlabel\t帧标签名称\r\n     * @param\tindex\t帧索引\r\n     */\r\n    addLabel(label, index) {\r\n        if (!this._labels)\r\n            this._labels = {};\r\n        if (!this._labels[index])\r\n            this._labels[index] = [];\r\n        this._labels[index].push(label);\r\n    }\r\n    /**\r\n     * 删除指定的帧标签。\r\n     * @param\tlabel 帧标签名称。注意：如果为空，则删除所有帧标签！\r\n     */\r\n    removeLabel(label) {\r\n        if (!label)\r\n            this._labels = null;\r\n        else if (this._labels) {\r\n            for (var name in this._labels) {\r\n                this._removeLabelFromList(this._labels[name], label);\r\n            }\r\n        }\r\n    }\r\n    /**@private */\r\n    _removeLabelFromList(list, label) {\r\n        if (!list)\r\n            return;\r\n        for (var i = list.length - 1; i >= 0; i--) {\r\n            if (list[i] == label) {\r\n                list.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 将动画切换到指定帧并停在那里。\r\n     * @param\tposition 帧索引或帧标签\r\n     */\r\n    gotoAndStop(position) {\r\n        this.index = (position instanceof String) ? this._getFrameByLabel(position) : position;\r\n        this.stop();\r\n    }\r\n    /**\r\n     * 动画当前帧的索引。\r\n     */\r\n    get index() {\r\n        return this._index;\r\n    }\r\n    set index(value) {\r\n        this._index = value;\r\n        this._displayToIndex(value);\r\n        if (this._labels && this._labels[value]) {\r\n            var tArr = this._labels[value];\r\n            for (var i = 0, len = tArr.length; i < len; i++) {\r\n                this.event(_events_Event__WEBPACK_IMPORTED_MODULE_3__[\"Event\"].LABEL, tArr[i]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 显示到某帧\r\n     * @param value 帧索引\r\n     */\r\n    _displayToIndex(value) {\r\n    }\r\n    /**\r\n     * 当前动画中帧的总数。\r\n     */\r\n    get count() {\r\n        return this._count;\r\n    }\r\n    /**\r\n     * 停止动画播放，并清理对象属性。之后可存入对象池，方便对象复用。\r\n     * @return 返回对象本身\r\n     */\r\n    clear() {\r\n        this.stop();\r\n        this._labels = null;\r\n        return this;\r\n    }\r\n}\r\n/**动画播放顺序类型：正序播放。 */\r\nAnimationBase.WRAP_POSITIVE = 0;\r\n/**动画播放顺序类型：逆序播放。 */\r\nAnimationBase.WRAP_REVERSE = 1;\r\n/**动画播放顺序类型：pingpong播放(当按指定顺序播放完结尾后，如果继续播放，则会改变播放顺序)。 */\r\nAnimationBase.WRAP_PINGPONG = 2;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/AnimationBase.ts?");

/***/ }),

/***/ "./src/core/laya/display/BitmapFont.ts":
/*!*********************************************!*\
  !*** ./src/core/laya/display/BitmapFont.ts ***!
  \*********************************************/
/*! exports provided: BitmapFont */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BitmapFont\", function() { return BitmapFont; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _maths_Rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../maths/Rectangle */ \"./src/core/laya/maths/Rectangle.ts\");\n/* harmony import */ var _net_Loader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../net/Loader */ \"./src/core/laya/net/Loader.ts\");\n/* harmony import */ var _resource_Texture__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../resource/Texture */ \"./src/core/laya/resource/Texture.ts\");\n/* harmony import */ var _utils_Handler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Handler */ \"./src/core/laya/utils/Handler.ts\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * <code>BitmapFont</code> 是位图字体类，用于定义位图字体信息。\r\n * 字体制作及使用方法，请参考文章\r\n * @see http://ldc2.layabox.com/doc/?nav=ch-js-1-2-5\r\n */\r\nclass BitmapFont {\r\n    constructor() {\r\n        this._fontCharDic = {};\r\n        this._fontWidthMap = {};\r\n        this._maxWidth = 0;\r\n        this._spaceWidth = 10;\r\n        /**当前位图字体字号，使用时，如果字号和设置不同，并且autoScaleSize=true，则按照设置字号比率进行缩放显示。*/\r\n        this.fontSize = 12;\r\n        /**表示是否根据实际使用的字体大小缩放位图字体大小。*/\r\n        this.autoScaleSize = false;\r\n        /**字符间距（以像素为单位）。*/\r\n        this.letterSpacing = 0;\r\n    }\r\n    /**\r\n     * 通过指定位图字体文件路径，加载位图字体文件，加载完成后会自动解析。\r\n     * @param\tpath\t\t位图字体文件的路径。\r\n     * @param\tcomplete\t加载并解析完成的回调。\r\n     */\r\n    loadFont(path, complete) {\r\n        this._path = path;\r\n        this._complete = complete;\r\n        if (!path || path.indexOf(\".fnt\") === -1) {\r\n            console.error('Bitmap font configuration information must be a \".fnt\" file');\r\n            return;\r\n        }\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].loader.load([{ url: path, type: _net_Loader__WEBPACK_IMPORTED_MODULE_2__[\"Loader\"].XML }, { url: path.replace(\".fnt\", \".png\"), type: _net_Loader__WEBPACK_IMPORTED_MODULE_2__[\"Loader\"].IMAGE }], _utils_Handler__WEBPACK_IMPORTED_MODULE_4__[\"Handler\"].create(this, this._onLoaded));\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _onLoaded() {\r\n        this.parseFont(_net_Loader__WEBPACK_IMPORTED_MODULE_2__[\"Loader\"].getRes(this._path), _net_Loader__WEBPACK_IMPORTED_MODULE_2__[\"Loader\"].getRes(this._path.replace(\".fnt\", \".png\")));\r\n        this._complete && this._complete.run();\r\n    }\r\n    /**\r\n     * 解析字体文件。\r\n     * @param\txml\t\t\t字体文件XML。\r\n     * @param\ttexture\t\t字体的纹理。\r\n     */\r\n    parseFont(xml, texture) {\r\n        if (xml == null || texture == null)\r\n            return;\r\n        this._texture = texture;\r\n        var tX = 0;\r\n        var tScale = 1;\r\n        var tInfo = xml.getElementsByTagName(\"info\");\r\n        if (!tInfo[0].getAttributeNode) {\r\n            return this.parseFont2(xml, texture);\r\n        }\r\n        this.fontSize = parseInt(tInfo[0].getAttributeNode(\"size\").nodeValue);\r\n        var tPadding = tInfo[0].getAttributeNode(\"padding\").nodeValue;\r\n        var tPaddingArray = tPadding.split(\",\");\r\n        this._padding = [parseInt(tPaddingArray[0]), parseInt(tPaddingArray[1]), parseInt(tPaddingArray[2]), parseInt(tPaddingArray[3])];\r\n        var chars = xml.getElementsByTagName(\"char\");\r\n        var i = 0;\r\n        for (i = 0; i < chars.length; i++) {\r\n            var tAttribute = chars[i];\r\n            var tId = parseInt(tAttribute.getAttributeNode(\"id\").nodeValue);\r\n            var xOffset = parseInt(tAttribute.getAttributeNode(\"xoffset\").nodeValue) / tScale;\r\n            var yOffset = parseInt(tAttribute.getAttributeNode(\"yoffset\").nodeValue) / tScale;\r\n            var xAdvance = parseInt(tAttribute.getAttributeNode(\"xadvance\").nodeValue) / tScale;\r\n            var region = new _maths_Rectangle__WEBPACK_IMPORTED_MODULE_1__[\"Rectangle\"]();\r\n            region.x = parseInt(tAttribute.getAttributeNode(\"x\").nodeValue);\r\n            region.y = parseInt(tAttribute.getAttributeNode(\"y\").nodeValue);\r\n            region.width = parseInt(tAttribute.getAttributeNode(\"width\").nodeValue);\r\n            region.height = parseInt(tAttribute.getAttributeNode(\"height\").nodeValue);\r\n            var tTexture = _resource_Texture__WEBPACK_IMPORTED_MODULE_3__[\"Texture\"].create(texture, region.x, region.y, region.width, region.height, xOffset, yOffset);\r\n            this._maxWidth = Math.max(this._maxWidth, xAdvance + this.letterSpacing);\r\n            this._fontCharDic[tId] = tTexture;\r\n            this._fontWidthMap[tId] = xAdvance;\r\n        }\r\n    }\r\n    /**\r\n     * 解析字体文件。\r\n     * @param\txml\t\t\t字体文件XML。\r\n     * @param\ttexture\t\t字体的纹理。\r\n     */\r\n    parseFont2(xml, texture) {\r\n        if (xml == null || texture == null)\r\n            return;\r\n        this._texture = texture;\r\n        var tX = 0;\r\n        var tScale = 1;\r\n        var tInfo = xml.getElementsByTagName(\"info\");\r\n        this.fontSize = parseInt(tInfo[0].attributes[\"size\"].nodeValue);\r\n        var tPadding = tInfo[0].attributes[\"padding\"].nodeValue;\r\n        var tPaddingArray = tPadding.split(\",\");\r\n        this._padding = [parseInt(tPaddingArray[0]), parseInt(tPaddingArray[1]), parseInt(tPaddingArray[2]), parseInt(tPaddingArray[3])];\r\n        var chars = xml.getElementsByTagName(\"char\");\r\n        var i = 0;\r\n        for (i = 0; i < chars.length; i++) {\r\n            var tAttribute = chars[i].attributes;\r\n            var tId = parseInt(tAttribute[\"id\"].nodeValue);\r\n            var xOffset = parseInt(tAttribute[\"xoffset\"].nodeValue) / tScale;\r\n            var yOffset = parseInt(tAttribute[\"yoffset\"].nodeValue) / tScale;\r\n            var xAdvance = parseInt(tAttribute[\"xadvance\"].nodeValue) / tScale;\r\n            var region = new _maths_Rectangle__WEBPACK_IMPORTED_MODULE_1__[\"Rectangle\"]();\r\n            region.x = parseInt(tAttribute[\"x\"].nodeValue);\r\n            region.y = parseInt(tAttribute[\"y\"].nodeValue);\r\n            region.width = parseInt(tAttribute[\"width\"].nodeValue);\r\n            region.height = parseInt(tAttribute[\"height\"].nodeValue);\r\n            var tTexture = _resource_Texture__WEBPACK_IMPORTED_MODULE_3__[\"Texture\"].create(texture, region.x, region.y, region.width, region.height, xOffset, yOffset);\r\n            this._maxWidth = Math.max(this._maxWidth, xAdvance + this.letterSpacing);\r\n            this._fontCharDic[tId] = tTexture;\r\n            this._fontWidthMap[tId] = xAdvance;\r\n        }\r\n    }\r\n    /**\r\n     * 获取指定字符的字体纹理对象。\r\n     * @param\tchar 字符。\r\n     * @return 指定的字体纹理对象。\r\n     */\r\n    getCharTexture(char) {\r\n        return this._fontCharDic[char.charCodeAt(0)];\r\n    }\r\n    /**\r\n     * 销毁位图字体，调用Text.unregisterBitmapFont 时，默认会销毁。\r\n     */\r\n    destroy() {\r\n        if (this._texture) {\r\n            for (var p in this._fontCharDic) {\r\n                var tTexture = this._fontCharDic[p];\r\n                if (tTexture)\r\n                    tTexture.destroy();\r\n            }\r\n            this._texture.destroy();\r\n            this._fontCharDic = null;\r\n            this._fontWidthMap = null;\r\n            this._texture = null;\r\n            this._complete = null;\r\n            this._padding = null;\r\n        }\r\n    }\r\n    /**\r\n     * 设置空格的宽（如果字体库有空格，这里就可以不用设置了）。\r\n     * @param\tspaceWidth 宽度，单位为像素。\r\n     */\r\n    setSpaceWidth(spaceWidth) {\r\n        this._spaceWidth = spaceWidth;\r\n    }\r\n    /**\r\n     * 获取指定字符的宽度。\r\n     * @param\tchar 字符。\r\n     * @return  宽度。\r\n     */\r\n    getCharWidth(char) {\r\n        var code = char.charCodeAt(0);\r\n        if (this._fontWidthMap[code])\r\n            return this._fontWidthMap[code] + this.letterSpacing;\r\n        if (char === \" \")\r\n            return this._spaceWidth + this.letterSpacing;\r\n        return 0;\r\n    }\r\n    /**\r\n     * 获取指定文本内容的宽度。\r\n     * @param\ttext 文本内容。\r\n     * @return  宽度。\r\n     */\r\n    getTextWidth(text) {\r\n        var tWidth = 0;\r\n        for (var i = 0, n = text.length; i < n; i++) {\r\n            tWidth += this.getCharWidth(text.charAt(i));\r\n        }\r\n        return tWidth;\r\n    }\r\n    /**\r\n     * 获取最大字符宽度。\r\n     */\r\n    getMaxWidth() {\r\n        return this._maxWidth;\r\n    }\r\n    /**\r\n     * 获取最大字符高度。\r\n     */\r\n    getMaxHeight() {\r\n        return this.fontSize;\r\n    }\r\n    /**\r\n     * @private\r\n     * 将指定的文本绘制到指定的显示对象上。\r\n     */\r\n    _drawText(text, sprite, drawX, drawY, align, width) {\r\n        var tWidth = this.getTextWidth(text);\r\n        var tTexture;\r\n        var dx = 0;\r\n        align === \"center\" && (dx = (width - tWidth) / 2);\r\n        align === \"right\" && (dx = (width - tWidth));\r\n        var tx = 0;\r\n        for (var i = 0, n = text.length; i < n; i++) {\r\n            tTexture = this.getCharTexture(text.charAt(i));\r\n            if (tTexture) {\r\n                sprite.graphics.drawImage(tTexture, drawX + tx + dx, drawY);\r\n                tx += this.getCharWidth(text.charAt(i));\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/BitmapFont.ts?");

/***/ }),

/***/ "./src/core/laya/display/FrameAnimation.ts":
/*!*************************************************!*\
  !*** ./src/core/laya/display/FrameAnimation.ts ***!
  \*************************************************/
/*! exports provided: FrameAnimation */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FrameAnimation\", function() { return FrameAnimation; });\n/* harmony import */ var _AnimationBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././AnimationBase */ \"./src/core/laya/display/AnimationBase.ts\");\n/* harmony import */ var _maths_MathUtil__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../maths/MathUtil */ \"./src/core/laya/maths/MathUtil.ts\");\n/* harmony import */ var _utils_Ease__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Ease */ \"./src/core/laya/utils/Ease.ts\");\n\r\n\r\n\r\n/**\r\n * 动画播放完毕后调度。\r\n * @eventType Event.COMPLETE\r\n */\r\n/*[Event(name = \"complete\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 播放到某标签后调度。\r\n * @eventType Event.LABEL\r\n */\r\n/*[Event(name = \"label\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 节点关键帧动画播放类。解析播放IDE内制作的节点动画。\r\n */\r\nclass FrameAnimation extends _AnimationBase__WEBPACK_IMPORTED_MODULE_0__[\"AnimationBase\"] {\r\n    constructor() {\r\n        super();\r\n        if (FrameAnimation._sortIndexFun === null) {\r\n            FrameAnimation._sortIndexFun = _maths_MathUtil__WEBPACK_IMPORTED_MODULE_1__[\"MathUtil\"].sortByKey(\"index\", false, true);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 初始化动画数据\r\n     * @param targetDic 节点ID索引\r\n     * @param animationData 动画数据\r\n     */\r\n    _setUp(targetDic, animationData) {\r\n        this._targetDic = targetDic;\r\n        this._animationData = animationData;\r\n        this.interval = 1000 / animationData.frameRate;\r\n        if (animationData.parsed) {\r\n            this._count = animationData.count;\r\n            this._labels = animationData.labels;\r\n            this._usedFrames = animationData.animationNewFrames;\r\n        }\r\n        else {\r\n            this._usedFrames = [];\r\n            this._calculateDatas();\r\n            animationData.parsed = true;\r\n            animationData.labels = this._labels;\r\n            animationData.count = this._count;\r\n            animationData.animationNewFrames = this._usedFrames;\r\n        }\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ clear() {\r\n        super.clear();\r\n        this._targetDic = null;\r\n        this._animationData = null;\r\n        return this;\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ _displayToIndex(value) {\r\n        if (!this._animationData)\r\n            return;\r\n        if (value < 0)\r\n            value = 0;\r\n        if (value > this._count)\r\n            value = this._count;\r\n        var nodes = this._animationData.nodes, i, len = nodes.length;\r\n        for (i = 0; i < len; i++) {\r\n            this._displayNodeToFrame(nodes[i], value);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 将节点设置到某一帧的状态\r\n     * @param node 节点ID\r\n     * @param frame\r\n     * @param targetDic 节点表\r\n     */\r\n    _displayNodeToFrame(node, frame, targetDic = null) {\r\n        if (!targetDic)\r\n            targetDic = this._targetDic;\r\n        var target = targetDic[node.target];\r\n        if (!target) {\r\n            //trace(\"loseTarget:\",node.target);\r\n            return;\r\n        }\r\n        var frames = node.frames, key, propFrames, value;\r\n        var keys = node.keys, i, len = keys.length;\r\n        for (i = 0; i < len; i++) {\r\n            key = keys[i];\r\n            propFrames = frames[key];\r\n            if (propFrames.length > frame) {\r\n                value = propFrames[frame];\r\n            }\r\n            else {\r\n                value = propFrames[propFrames.length - 1];\r\n            }\r\n            target[key] = value;\r\n        }\r\n        var funkeys = node.funkeys;\r\n        len = funkeys.length;\r\n        var funFrames;\r\n        if (len == 0)\r\n            return;\r\n        for (i = 0; i < len; i++) {\r\n            key = funkeys[i];\r\n            funFrames = frames[key];\r\n            if (funFrames[frame] !== undefined) {\r\n                target[key] && target[key].apply(target, funFrames[frame]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 计算帧数据\r\n     */\r\n    _calculateDatas() {\r\n        if (!this._animationData)\r\n            return;\r\n        var nodes = this._animationData.nodes, i, len = nodes.length, tNode;\r\n        this._count = 0;\r\n        for (i = 0; i < len; i++) {\r\n            tNode = nodes[i];\r\n            this._calculateKeyFrames(tNode);\r\n        }\r\n        this._count += 1;\r\n    }\r\n    /**\r\n     * @private\r\n     * 计算某个节点的帧数据\r\n     */\r\n    _calculateKeyFrames(node) {\r\n        var keyFrames = node.keyframes, key, tKeyFrames, target = node.target;\r\n        if (!node.frames)\r\n            node.frames = {};\r\n        if (!node.keys)\r\n            node.keys = [];\r\n        else\r\n            node.keys.length = 0;\r\n        if (!node.funkeys)\r\n            node.funkeys = [];\r\n        else\r\n            node.funkeys.length = 0;\r\n        if (!node.initValues)\r\n            node.initValues = {};\r\n        for (key in keyFrames) {\r\n            var isFun = key.indexOf(\"()\") != -1;\r\n            tKeyFrames = keyFrames[key];\r\n            if (isFun)\r\n                key = key.substr(0, key.length - 2);\r\n            if (!node.frames[key]) {\r\n                node.frames[key] = [];\r\n            }\r\n            if (!isFun) {\r\n                if (this._targetDic && this._targetDic[target]) {\r\n                    node.initValues[key] = this._targetDic[target][key];\r\n                }\r\n                tKeyFrames.sort(FrameAnimation._sortIndexFun);\r\n                node.keys.push(key);\r\n                this._calculateNodePropFrames(tKeyFrames, node.frames[key], key, target);\r\n            }\r\n            else {\r\n                node.funkeys.push(key);\r\n                var map = node.frames[key];\r\n                for (var i = 0; i < tKeyFrames.length; i++) {\r\n                    var temp = tKeyFrames[i];\r\n                    map[temp.index] = temp.value;\r\n                    if (temp.index > this._count)\r\n                        this._count = temp.index;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 重置节点，使节点恢复到动画之前的状态，方便其他动画控制\r\n     */\r\n    resetNodes() {\r\n        if (!this._targetDic)\r\n            return;\r\n        if (!this._animationData)\r\n            return;\r\n        var nodes = this._animationData.nodes, i, len = nodes.length;\r\n        var tNode;\r\n        var initValues;\r\n        for (i = 0; i < len; i++) {\r\n            tNode = nodes[i];\r\n            initValues = tNode.initValues;\r\n            if (!initValues)\r\n                continue;\r\n            var target = this._targetDic[tNode.target];\r\n            if (!target)\r\n                continue;\r\n            var key;\r\n            for (key in initValues) {\r\n                target[key] = initValues[key];\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 计算节点某个属性的帧数据\r\n     */\r\n    _calculateNodePropFrames(keyframes, frames, key, target) {\r\n        var i, len = keyframes.length - 1;\r\n        frames.length = keyframes[len].index + 1;\r\n        for (i = 0; i < len; i++) {\r\n            this._dealKeyFrame(keyframes[i]);\r\n            this._calculateFrameValues(keyframes[i], keyframes[i + 1], frames);\r\n        }\r\n        if (len == 0) {\r\n            frames[0] = keyframes[0].value;\r\n            if (this._usedFrames)\r\n                this._usedFrames[keyframes[0].index] = true;\r\n        }\r\n        this._dealKeyFrame(keyframes[i]);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _dealKeyFrame(keyFrame) {\r\n        if (keyFrame.label && keyFrame.label != \"\")\r\n            this.addLabel(keyFrame.label, keyFrame.index);\r\n    }\r\n    /**\r\n     * @private\r\n     * 计算两个关键帧直接的帧数据\r\n     */\r\n    _calculateFrameValues(startFrame, endFrame, result) {\r\n        var i, easeFun;\r\n        var start = startFrame.index, end = endFrame.index;\r\n        var startValue = startFrame.value;\r\n        var dValue = endFrame.value - startFrame.value;\r\n        var dLen = end - start;\r\n        var frames = this._usedFrames;\r\n        if (end > this._count)\r\n            this._count = end;\r\n        if (startFrame.tween) {\r\n            easeFun = _utils_Ease__WEBPACK_IMPORTED_MODULE_2__[\"Ease\"][startFrame.tweenMethod];\r\n            if (easeFun == null)\r\n                easeFun = _utils_Ease__WEBPACK_IMPORTED_MODULE_2__[\"Ease\"].linearNone;\r\n            for (i = start; i < end; i++) {\r\n                result[i] = easeFun(i - start, startValue, dValue, dLen);\r\n                if (frames)\r\n                    frames[i] = true;\r\n            }\r\n        }\r\n        else {\r\n            for (i = start; i < end; i++) {\r\n                result[i] = startValue;\r\n            }\r\n        }\r\n        if (frames) {\r\n            frames[startFrame.index] = true;\r\n            frames[endFrame.index] = true;\r\n        }\r\n        result[endFrame.index] = endFrame.value;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/FrameAnimation.ts?");

/***/ }),

/***/ "./src/core/laya/display/Graphics.ts":
/*!*******************************************!*\
  !*** ./src/core/laya/display/Graphics.ts ***!
  \*******************************************/
/*! exports provided: Graphics */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Graphics\", function() { return Graphics; });\n/* harmony import */ var _GraphicsBounds__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././GraphicsBounds */ \"./src/core/laya/display/GraphicsBounds.ts\");\n/* harmony import */ var _SpriteConst__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././SpriteConst */ \"./src/core/laya/display/SpriteConst.ts\");\n/* harmony import */ var _Text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ././Text */ \"./src/core/laya/display/Text.ts\");\n/* harmony import */ var _cmd_AlphaCmd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cmd/AlphaCmd */ \"./src/core/laya/display/cmd/AlphaCmd.ts\");\n/* harmony import */ var _cmd_ClipRectCmd__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cmd/ClipRectCmd */ \"./src/core/laya/display/cmd/ClipRectCmd.ts\");\n/* harmony import */ var _cmd_Draw9GridTexture__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cmd/Draw9GridTexture */ \"./src/core/laya/display/cmd/Draw9GridTexture.ts\");\n/* harmony import */ var _cmd_DrawCircleCmd__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cmd/DrawCircleCmd */ \"./src/core/laya/display/cmd/DrawCircleCmd.ts\");\n/* harmony import */ var _cmd_DrawCurvesCmd__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cmd/DrawCurvesCmd */ \"./src/core/laya/display/cmd/DrawCurvesCmd.ts\");\n/* harmony import */ var _cmd_DrawImageCmd__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cmd/DrawImageCmd */ \"./src/core/laya/display/cmd/DrawImageCmd.ts\");\n/* harmony import */ var _cmd_DrawLineCmd__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./cmd/DrawLineCmd */ \"./src/core/laya/display/cmd/DrawLineCmd.ts\");\n/* harmony import */ var _cmd_DrawLinesCmd__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./cmd/DrawLinesCmd */ \"./src/core/laya/display/cmd/DrawLinesCmd.ts\");\n/* harmony import */ var _cmd_DrawPathCmd__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./cmd/DrawPathCmd */ \"./src/core/laya/display/cmd/DrawPathCmd.ts\");\n/* harmony import */ var _cmd_DrawPieCmd__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./cmd/DrawPieCmd */ \"./src/core/laya/display/cmd/DrawPieCmd.ts\");\n/* harmony import */ var _cmd_DrawPolyCmd__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./cmd/DrawPolyCmd */ \"./src/core/laya/display/cmd/DrawPolyCmd.ts\");\n/* harmony import */ var _cmd_DrawRectCmd__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./cmd/DrawRectCmd */ \"./src/core/laya/display/cmd/DrawRectCmd.ts\");\n/* harmony import */ var _cmd_DrawTextureCmd__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./cmd/DrawTextureCmd */ \"./src/core/laya/display/cmd/DrawTextureCmd.ts\");\n/* harmony import */ var _cmd_DrawTexturesCmd__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./cmd/DrawTexturesCmd */ \"./src/core/laya/display/cmd/DrawTexturesCmd.ts\");\n/* harmony import */ var _cmd_DrawTrianglesCmd__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./cmd/DrawTrianglesCmd */ \"./src/core/laya/display/cmd/DrawTrianglesCmd.ts\");\n/* harmony import */ var _cmd_FillBorderTextCmd__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./cmd/FillBorderTextCmd */ \"./src/core/laya/display/cmd/FillBorderTextCmd.ts\");\n/* harmony import */ var _cmd_FillBorderWordsCmd__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./cmd/FillBorderWordsCmd */ \"./src/core/laya/display/cmd/FillBorderWordsCmd.ts\");\n/* harmony import */ var _cmd_FillTextCmd__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./cmd/FillTextCmd */ \"./src/core/laya/display/cmd/FillTextCmd.ts\");\n/* harmony import */ var _cmd_FillTextureCmd__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./cmd/FillTextureCmd */ \"./src/core/laya/display/cmd/FillTextureCmd.ts\");\n/* harmony import */ var _cmd_FillWordsCmd__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./cmd/FillWordsCmd */ \"./src/core/laya/display/cmd/FillWordsCmd.ts\");\n/* harmony import */ var _cmd_RestoreCmd__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./cmd/RestoreCmd */ \"./src/core/laya/display/cmd/RestoreCmd.ts\");\n/* harmony import */ var _cmd_RotateCmd__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./cmd/RotateCmd */ \"./src/core/laya/display/cmd/RotateCmd.ts\");\n/* harmony import */ var _cmd_SaveCmd__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./cmd/SaveCmd */ \"./src/core/laya/display/cmd/SaveCmd.ts\");\n/* harmony import */ var _cmd_ScaleCmd__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./cmd/ScaleCmd */ \"./src/core/laya/display/cmd/ScaleCmd.ts\");\n/* harmony import */ var _cmd_StrokeTextCmd__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./cmd/StrokeTextCmd */ \"./src/core/laya/display/cmd/StrokeTextCmd.ts\");\n/* harmony import */ var _cmd_TransformCmd__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./cmd/TransformCmd */ \"./src/core/laya/display/cmd/TransformCmd.ts\");\n/* harmony import */ var _cmd_TranslateCmd__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./cmd/TranslateCmd */ \"./src/core/laya/display/cmd/TranslateCmd.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _maths_Point__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../maths/Point */ \"./src/core/laya/maths/Point.ts\");\n/* harmony import */ var _net_Loader__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../net/Loader */ \"./src/core/laya/net/Loader.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _resource_Texture__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../resource/Texture */ \"./src/core/laya/resource/Texture.ts\");\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../utils/Utils */ \"./src/core/laya/utils/Utils.ts\");\n/* harmony import */ var _utils_VectorGraphManager__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../utils/VectorGraphManager */ \"./src/core/laya/utils/VectorGraphManager.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * <code>Graphics</code> 类用于创建绘图显示对象。Graphics可以同时绘制多个位图或者矢量图，还可以结合save，restore，transform，scale，rotate，translate，alpha等指令对绘图效果进行变化。\r\n * Graphics以命令流方式存储，可以通过cmds属性访问所有命令流。Graphics是比Sprite更轻量级的对象，合理使用能提高应用性能(比如把大量的节点绘图改为一个节点的Graphics命令集合，能减少大量节点创建消耗)。\r\n * @see laya.display.Sprite#graphics\r\n */\r\nclass Graphics {\r\n    constructor() {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        /**@private */\r\n        this._sp = null;\r\n        /**@private */\r\n        this._one = null;\r\n        /**@private */\r\n        this._render = this._renderEmpty;\r\n        /**@private */\r\n        this._cmds = null;\r\n        /**@private */\r\n        this._vectorgraphArray = null;\r\n        /**@private */\r\n        this._graphicBounds = null;\r\n        /**@private */\r\n        this.autoDestroy = false;\r\n        this._createData();\r\n    }\r\n    /**@private */\r\n    _createData() {\r\n    }\r\n    /**@private */\r\n    _clearData() {\r\n    }\r\n    /**@private */\r\n    _destroyData() {\r\n    }\r\n    /**\r\n     * <p>销毁此对象。</p>\r\n     */\r\n    destroy() {\r\n        this.clear(true);\r\n        if (this._graphicBounds)\r\n            this._graphicBounds.destroy();\r\n        this._graphicBounds = null;\r\n        this._vectorgraphArray = null;\r\n        if (this._sp) {\r\n            this._sp._renderType = 0;\r\n            this._sp._setRenderType(0);\r\n            this._sp = null;\r\n        }\r\n        this._destroyData();\r\n    }\r\n    /**\r\n     * <p>清空绘制命令。</p>\r\n     * @param recoverCmds 是否回收绘图指令数组，设置为true，则对指令数组进行回收以节省内存开销，建议设置为true进行回收，但如果手动引用了数组，不建议回收\r\n     */\r\n    clear(recoverCmds = true) {\r\n        //TODO:内存回收all\r\n        if (recoverCmds) {\r\n            var tCmd = this._one;\r\n            if (this._cmds) {\r\n                var i, len = this._cmds.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tCmd = this._cmds[i];\r\n                    tCmd.recover();\r\n                }\r\n                this._cmds.length = 0;\r\n            }\r\n            else if (tCmd) {\r\n                tCmd.recover();\r\n            }\r\n        }\r\n        else {\r\n            this._cmds = null;\r\n        }\r\n        this._one = null;\r\n        this._render = this._renderEmpty;\r\n        this._clearData();\r\n        //_sp && (_sp._renderType &= ~SpriteConst.IMAGE);\r\n        if (this._sp) {\r\n            this._sp._renderType &= ~_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].GRAPHICS;\r\n            this._sp._setRenderType(this._sp._renderType);\r\n        }\r\n        this._repaint();\r\n        if (this._vectorgraphArray) {\r\n            for (i = 0, len = this._vectorgraphArray.length; i < len; i++) {\r\n                _utils_VectorGraphManager__WEBPACK_IMPORTED_MODULE_36__[\"VectorGraphManager\"].getInstance().deleteShape(this._vectorgraphArray[i]);\r\n            }\r\n            this._vectorgraphArray.length = 0;\r\n        }\r\n    }\r\n    /**@private */\r\n    _clearBoundsCache() {\r\n        if (this._graphicBounds)\r\n            this._graphicBounds.reset();\r\n    }\r\n    /**@private */\r\n    _initGraphicBounds() {\r\n        if (!this._graphicBounds) {\r\n            this._graphicBounds = _GraphicsBounds__WEBPACK_IMPORTED_MODULE_0__[\"GraphicsBounds\"].create();\r\n            this._graphicBounds._graphics = this;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 重绘此对象。\r\n     */\r\n    _repaint() {\r\n        this._clearBoundsCache();\r\n        this._sp && this._sp.repaint();\r\n    }\r\n    /**@private */\r\n    //TODO:coverage\r\n    _isOnlyOne() {\r\n        return !this._cmds || this._cmds.length === 0;\r\n    }\r\n    /**\r\n     * @private\r\n     * 命令流。存储了所有绘制命令。\r\n     */\r\n    get cmds() {\r\n        //TODO:单命令不对\r\n        return this._cmds;\r\n    }\r\n    set cmds(value) {\r\n        if (this._sp) {\r\n            this._sp._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].GRAPHICS;\r\n            this._sp._setRenderType(this._sp._renderType);\r\n        }\r\n        this._cmds = value;\r\n        this._render = this._renderAll;\r\n        this._repaint();\r\n    }\r\n    /**\r\n     * 获取位置及宽高信息矩阵(比较耗CPU，频繁使用会造成卡顿，尽量少用)。\r\n     * @param realSize\t（可选）使用图片的真实大小，默认为false\r\n     * @return 位置与宽高组成的 一个 Rectangle 对象。\r\n     */\r\n    getBounds(realSize = false) {\r\n        this._initGraphicBounds();\r\n        return this._graphicBounds.getBounds(realSize);\r\n    }\r\n    /**\r\n     * @private\r\n     * @param realSize\t（可选）使用图片的真实大小，默认为false\r\n     * 获取端点列表。\r\n     */\r\n    getBoundPoints(realSize = false) {\r\n        this._initGraphicBounds();\r\n        return this._graphicBounds.getBoundPoints(realSize);\r\n    }\r\n    /**\r\n     * 绘制单独图片\r\n     * @param texture\t\t纹理。\r\n     * @param x \t\t（可选）X轴偏移量。\r\n     * @param y \t\t（可选）Y轴偏移量。\r\n     * @param width\t\t（可选）宽度。\r\n     * @param height\t（可选）高度。\r\n     */\r\n    drawImage(texture, x = 0, y = 0, width = 0, height = 0) {\r\n        if (!texture)\r\n            return null;\r\n        if (!width)\r\n            width = texture.sourceWidth;\r\n        if (!height)\r\n            height = texture.sourceHeight;\r\n        if (texture.getIsReady()) {\r\n            var wRate = width / texture.sourceWidth;\r\n            var hRate = height / texture.sourceHeight;\r\n            width = texture.width * wRate;\r\n            height = texture.height * hRate;\r\n            if (width <= 0 || height <= 0)\r\n                return null;\r\n            x += texture.offsetX * wRate;\r\n            y += texture.offsetY * hRate;\r\n        }\r\n        if (this._sp) {\r\n            this._sp._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].GRAPHICS;\r\n            this._sp._setRenderType(this._sp._renderType);\r\n        }\r\n        var args = _cmd_DrawImageCmd__WEBPACK_IMPORTED_MODULE_8__[\"DrawImageCmd\"].create.call(this, texture, x, y, width, height);\r\n        if (this._one == null) {\r\n            this._one = args;\r\n            this._render = this._renderOneImg;\r\n            //if(_sp)_sp._renderType |= SpriteConst.IMAGE;\r\n        }\r\n        else {\r\n            this._saveToCmd(null, args);\r\n        }\r\n        //if (!tex.loaded) {\r\n        //tex.once(Event.LOADED, this, _textureLoaded, [tex, args]);\r\n        //}\r\n        this._repaint();\r\n        return args;\r\n    }\r\n    /**\r\n     * 绘制纹理，相比drawImage功能更强大，性能会差一些\r\n     * @param texture\t\t纹理。\r\n     * @param x \t\t（可选）X轴偏移量。\r\n     * @param y \t\t（可选）Y轴偏移量。\r\n     * @param width\t\t（可选）宽度。\r\n     * @param height\t（可选）高度。\r\n     * @param matrix\t（可选）矩阵信息。\r\n     * @param alpha\t\t（可选）透明度。\r\n     * @param color\t\t（可选）颜色滤镜。\r\n     * @param blendMode （可选）混合模式。\r\n     */\r\n    drawTexture(texture, x = 0, y = 0, width = 0, height = 0, matrix = null, alpha = 1, color = null, blendMode = null) {\r\n        if (!texture || alpha < 0.01)\r\n            return null;\r\n        if (!texture.getIsReady())\r\n            return null;\r\n        if (!width)\r\n            width = texture.sourceWidth;\r\n        if (!height)\r\n            height = texture.sourceHeight;\r\n        if (texture.getIsReady()) {\r\n            var wRate = width / texture.sourceWidth;\r\n            var hRate = height / texture.sourceHeight;\r\n            width = texture.width * wRate;\r\n            height = texture.height * hRate;\r\n            if (width <= 0 || height <= 0)\r\n                return null;\r\n            x += texture.offsetX * wRate;\r\n            y += texture.offsetY * hRate;\r\n        }\r\n        if (this._sp) {\r\n            this._sp._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].GRAPHICS;\r\n            this._sp._setRenderType(this._sp._renderType);\r\n        }\r\n        // canvas 模式不支持\r\n        var args = _cmd_DrawTextureCmd__WEBPACK_IMPORTED_MODULE_15__[\"DrawTextureCmd\"].create.call(this, texture, x, y, width, height, matrix, alpha, color, blendMode);\r\n        this._repaint();\r\n        return this._saveToCmd(null, args);\r\n    }\r\n    /**\r\n     * 批量绘制同样纹理。\r\n     * @param texture 纹理。\r\n     * @param pos 绘制次数和坐标。\r\n     */\r\n    drawTextures(texture, pos) {\r\n        if (!texture)\r\n            return null;\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context.drawTextures, _cmd_DrawTexturesCmd__WEBPACK_IMPORTED_MODULE_16__[\"DrawTexturesCmd\"].create.call(this, texture, pos));\r\n    }\r\n    /**\r\n     * 绘制一组三角形\r\n     * @param texture\t纹理。\r\n     * @param x\t\t\tX轴偏移量。\r\n     * @param y\t\t\tY轴偏移量。\r\n     * @param vertices  顶点数组。\r\n     * @param indices\t顶点索引。\r\n     * @param uvData\tUV数据。\r\n     * @param matrix\t缩放矩阵。\r\n     * @param alpha\t\talpha\r\n     * @param color\t\t颜色变换\r\n     * @param blendMode\tblend模式\r\n     */\r\n    drawTriangles(texture, x, y, vertices, uvs, indices, matrix = null, alpha = 1, color = null, blendMode = null) {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context.drawTriangles, _cmd_DrawTrianglesCmd__WEBPACK_IMPORTED_MODULE_17__[\"DrawTrianglesCmd\"].create.call(this, texture, x, y, vertices, uvs, indices, matrix, alpha, color, blendMode));\r\n    }\r\n    /**\r\n     * 用texture填充。\r\n     * @param texture\t\t纹理。\r\n     * @param x\t\t\tX轴偏移量。\r\n     * @param y\t\t\tY轴偏移量。\r\n     * @param width\t\t（可选）宽度。\r\n     * @param height\t（可选）高度。\r\n     * @param type\t\t（可选）填充类型 repeat|repeat-x|repeat-y|no-repeat\r\n     * @param offset\t（可选）贴图纹理偏移\r\n     *\r\n     */\r\n    fillTexture(texture, x, y, width = 0, height = 0, type = \"repeat\", offset = null) {\r\n        if (texture && texture.getIsReady())\r\n            return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context._fillTexture, _cmd_FillTextureCmd__WEBPACK_IMPORTED_MODULE_21__[\"FillTextureCmd\"].create.call(this, texture, x, y, width, height, type, offset || _maths_Point__WEBPACK_IMPORTED_MODULE_31__[\"Point\"].EMPTY, {}));\r\n        else\r\n            return null;\r\n    }\r\n    /**\r\n     * @private\r\n     * 保存到命令流。\r\n     */\r\n    _saveToCmd(fun, args) {\r\n        if (this._sp) {\r\n            this._sp._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].GRAPHICS;\r\n            this._sp._setRenderType(this._sp._renderType);\r\n        }\r\n        if (this._one == null) {\r\n            this._one = args;\r\n            this._render = this._renderOne;\r\n        }\r\n        else {\r\n            //_sp && (_sp._renderType &= ~SpriteConst.IMAGE);\r\n            this._render = this._renderAll;\r\n            (this._cmds || (this._cmds = [])).length === 0 && this._cmds.push(this._one);\r\n            this._cmds.push(args);\r\n        }\r\n        this._repaint();\r\n        return args;\r\n    }\r\n    /**\r\n     * 设置剪裁区域，超出剪裁区域的坐标不显示。\r\n     * @param x X 轴偏移量。\r\n     * @param y Y 轴偏移量。\r\n     * @param width 宽度。\r\n     * @param height 高度。\r\n     */\r\n    clipRect(x, y, width, height) {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context.clipRect, _cmd_ClipRectCmd__WEBPACK_IMPORTED_MODULE_4__[\"ClipRectCmd\"].create.call(this, x, y, width, height));\r\n    }\r\n    /**\r\n     * 在画布上绘制文本。\r\n     * @param text 在画布上输出的文本。\r\n     * @param x 开始绘制文本的 x 坐标位置（相对于画布）。\r\n     * @param y 开始绘制文本的 y 坐标位置（相对于画布）。\r\n     * @param font 定义字号和字体，比如\"20px Arial\"。\r\n     * @param color 定义文本颜色，比如\"#ff0000\"。\r\n     * @param textAlign 文本对齐方式，可选值：\"left\"，\"center\"，\"right\"。\r\n     */\r\n    fillText(text, x, y, font, color, textAlign) {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context.fillText, _cmd_FillTextCmd__WEBPACK_IMPORTED_MODULE_20__[\"FillTextCmd\"].create.call(this, text, x, y, font || _Text__WEBPACK_IMPORTED_MODULE_2__[\"Text\"].defaultFontStr(), color, textAlign));\r\n    }\r\n    /**\r\n     * 在画布上绘制“被填充且镶边的”文本。\r\n     * @param text\t\t\t在画布上输出的文本。\r\n     * @param x\t\t\t\t开始绘制文本的 x 坐标位置（相对于画布）。\r\n     * @param y\t\t\t\t开始绘制文本的 y 坐标位置（相对于画布）。\r\n     * @param font\t\t\t定义字体和字号，比如\"20px Arial\"。\r\n     * @param fillColor\t\t定义文本颜色，比如\"#ff0000\"。\r\n     * @param borderColor\t定义镶边文本颜色。\r\n     * @param lineWidth\t\t镶边线条宽度。\r\n     * @param textAlign\t\t文本对齐方式，可选值：\"left\"，\"center\"，\"right\"。\r\n     */\r\n    fillBorderText(text, x, y, font, fillColor, borderColor, lineWidth, textAlign) {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context.fillBorderText, _cmd_FillBorderTextCmd__WEBPACK_IMPORTED_MODULE_18__[\"FillBorderTextCmd\"].create.call(this, text, x, y, font || _Text__WEBPACK_IMPORTED_MODULE_2__[\"Text\"].defaultFontStr(), fillColor, borderColor, lineWidth, textAlign));\r\n    }\r\n    /*** @private */\r\n    fillWords(words, x, y, font, color) {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context.fillWords, _cmd_FillWordsCmd__WEBPACK_IMPORTED_MODULE_22__[\"FillWordsCmd\"].create.call(this, words, x, y, font || _Text__WEBPACK_IMPORTED_MODULE_2__[\"Text\"].defaultFontStr(), color));\r\n    }\r\n    /*** @private */\r\n    fillBorderWords(words, x, y, font, fillColor, borderColor, lineWidth) {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context.fillBorderWords, _cmd_FillBorderWordsCmd__WEBPACK_IMPORTED_MODULE_19__[\"FillBorderWordsCmd\"].create.call(this, words, x, y, font || _Text__WEBPACK_IMPORTED_MODULE_2__[\"Text\"].defaultFontStr(), fillColor, borderColor, lineWidth));\r\n    }\r\n    /**\r\n     * 在画布上绘制文本（没有填色）。文本的默认颜色是黑色。\r\n     * @param text\t\t在画布上输出的文本。\r\n     * @param x\t\t\t开始绘制文本的 x 坐标位置（相对于画布）。\r\n     * @param y\t\t\t开始绘制文本的 y 坐标位置（相对于画布）。\r\n     * @param font\t\t定义字体和字号，比如\"20px Arial\"。\r\n     * @param color\t\t定义文本颜色，比如\"#ff0000\"。\r\n     * @param lineWidth\t线条宽度。\r\n     * @param textAlign\t文本对齐方式，可选值：\"left\"，\"center\"，\"right\"。\r\n     */\r\n    strokeText(text, x, y, font, color, lineWidth, textAlign) {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context.fillBorderText, _cmd_StrokeTextCmd__WEBPACK_IMPORTED_MODULE_27__[\"StrokeTextCmd\"].create.call(this, text, x, y, font || _Text__WEBPACK_IMPORTED_MODULE_2__[\"Text\"].defaultFontStr(), null, color, lineWidth, textAlign));\r\n    }\r\n    /**\r\n     * 设置透明度。\r\n     * @param value 透明度。\r\n     */\r\n    alpha(alpha) {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context.alpha, _cmd_AlphaCmd__WEBPACK_IMPORTED_MODULE_3__[\"AlphaCmd\"].create.call(this, alpha));\r\n    }\r\n    /**\r\n     * 替换绘图的当前转换矩阵。\r\n     * @param mat 矩阵。\r\n     * @param pivotX\t（可选）水平方向轴心点坐标。\r\n     * @param pivotY\t（可选）垂直方向轴心点坐标。\r\n     */\r\n    transform(matrix, pivotX = 0, pivotY = 0) {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context._transform, _cmd_TransformCmd__WEBPACK_IMPORTED_MODULE_28__[\"TransformCmd\"].create.call(this, matrix, pivotX, pivotY));\r\n    }\r\n    /**\r\n     * 旋转当前绘图。(推荐使用transform，性能更高)\r\n     * @param angle\t\t旋转角度，以弧度计。\r\n     * @param pivotX\t（可选）水平方向轴心点坐标。\r\n     * @param pivotY\t（可选）垂直方向轴心点坐标。\r\n     */\r\n    rotate(angle, pivotX = 0, pivotY = 0) {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context._rotate, _cmd_RotateCmd__WEBPACK_IMPORTED_MODULE_24__[\"RotateCmd\"].create.call(this, angle, pivotX, pivotY));\r\n    }\r\n    /**\r\n     * 缩放当前绘图至更大或更小。(推荐使用transform，性能更高)\r\n     * @param scaleX\t水平方向缩放值。\r\n     * @param scaleY\t垂直方向缩放值。\r\n     * @param pivotX\t（可选）水平方向轴心点坐标。\r\n     * @param pivotY\t（可选）垂直方向轴心点坐标。\r\n     */\r\n    scale(scaleX, scaleY, pivotX = 0, pivotY = 0) {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context._scale, _cmd_ScaleCmd__WEBPACK_IMPORTED_MODULE_26__[\"ScaleCmd\"].create.call(this, scaleX, scaleY, pivotX, pivotY));\r\n    }\r\n    /**\r\n     * 重新映射画布上的 (0,0) 位置。\r\n     * @param x 添加到水平坐标（x）上的值。\r\n     * @param y 添加到垂直坐标（y）上的值。\r\n     */\r\n    translate(tx, ty) {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context.translate, _cmd_TranslateCmd__WEBPACK_IMPORTED_MODULE_29__[\"TranslateCmd\"].create.call(this, tx, ty));\r\n    }\r\n    /**\r\n     * 保存当前环境的状态。\r\n     */\r\n    save() {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context._save, _cmd_SaveCmd__WEBPACK_IMPORTED_MODULE_25__[\"SaveCmd\"].create.call(this));\r\n    }\r\n    /**\r\n     * 返回之前保存过的路径状态和属性。\r\n     */\r\n    restore() {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context.restore, _cmd_RestoreCmd__WEBPACK_IMPORTED_MODULE_23__[\"RestoreCmd\"].create.call(this));\r\n    }\r\n    /**\r\n     * @private\r\n     * 替换文本内容。\r\n     * @param text 文本内容。\r\n     * @return 替换成功则值为true，否则值为flase。\r\n     */\r\n    replaceText(text) {\r\n        this._repaint();\r\n        //todo 该函数现在加速器应该不对\r\n        var cmds = this._cmds;\r\n        if (!cmds) {\r\n            if (this._one && this._isTextCmd(this._one)) {\r\n                this._one.text = text;\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            for (var i = cmds.length - 1; i > -1; i--) {\r\n                if (this._isTextCmd(cmds[i])) {\r\n                    cmds[i].text = text;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**@private */\r\n    _isTextCmd(cmd) {\r\n        var cmdID = cmd.cmdID;\r\n        return cmdID == _cmd_FillTextCmd__WEBPACK_IMPORTED_MODULE_20__[\"FillTextCmd\"].ID || cmdID == _cmd_StrokeTextCmd__WEBPACK_IMPORTED_MODULE_27__[\"StrokeTextCmd\"].ID || cmdID == _cmd_FillBorderTextCmd__WEBPACK_IMPORTED_MODULE_18__[\"FillBorderTextCmd\"].ID;\r\n    }\r\n    /**\r\n     * @private\r\n     * 替换文本颜色。\r\n     * @param color 颜色。\r\n     */\r\n    replaceTextColor(color) {\r\n        this._repaint();\r\n        var cmds = this._cmds;\r\n        if (!cmds) {\r\n            if (this._one && this._isTextCmd(this._one)) {\r\n                this._setTextCmdColor(this._one, color);\r\n            }\r\n        }\r\n        else {\r\n            for (var i = cmds.length - 1; i > -1; i--) {\r\n                if (this._isTextCmd(cmds[i])) {\r\n                    this._setTextCmdColor(cmds[i], color);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**@private */\r\n    _setTextCmdColor(cmdO, color) {\r\n        var cmdID = cmdO.cmdID;\r\n        switch (cmdID) {\r\n            case _cmd_FillTextCmd__WEBPACK_IMPORTED_MODULE_20__[\"FillTextCmd\"].ID:\r\n            case _cmd_StrokeTextCmd__WEBPACK_IMPORTED_MODULE_27__[\"StrokeTextCmd\"].ID:\r\n                cmdO.color = color;\r\n                break;\r\n            case _cmd_FillBorderTextCmd__WEBPACK_IMPORTED_MODULE_18__[\"FillBorderTextCmd\"].ID:\r\n            case _cmd_FillBorderWordsCmd__WEBPACK_IMPORTED_MODULE_19__[\"FillBorderWordsCmd\"].ID:\r\n            case _cmd_FillBorderTextCmd__WEBPACK_IMPORTED_MODULE_18__[\"FillBorderTextCmd\"].ID:\r\n                cmdO.fillColor = color;\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * 加载并显示一个图片。\r\n     * @param url\t\t图片地址。\r\n     * @param x\t\t\t（可选）显示图片的x位置。\r\n     * @param y\t\t\t（可选）显示图片的y位置。\r\n     * @param width\t\t（可选）显示图片的宽度，设置为0表示使用图片默认宽度。\r\n     * @param height\t（可选）显示图片的高度，设置为0表示使用图片默认高度。\r\n     * @param complete\t（可选）加载完成回调。\r\n     */\r\n    loadImage(url, x = 0, y = 0, width = 0, height = 0, complete = null) {\r\n        var tex = _net_Loader__WEBPACK_IMPORTED_MODULE_32__[\"Loader\"].getRes(url);\r\n        if (!tex) {\r\n            tex = new _resource_Texture__WEBPACK_IMPORTED_MODULE_34__[\"Texture\"]();\r\n            tex.load(url);\r\n            _net_Loader__WEBPACK_IMPORTED_MODULE_32__[\"Loader\"].cacheRes(url, tex);\r\n            tex.once(_events_Event__WEBPACK_IMPORTED_MODULE_30__[\"Event\"].READY, this, this.drawImage, [tex, x, y, width, height]);\r\n        }\r\n        else {\r\n            if (!tex.getIsReady()) {\r\n                tex.once(_events_Event__WEBPACK_IMPORTED_MODULE_30__[\"Event\"].READY, this, this.drawImage, [tex, x, y, width, height]);\r\n            }\r\n            else\r\n                this.drawImage(tex, x, y, width, height);\r\n        }\r\n        if (complete != null) {\r\n            tex.getIsReady() ? complete.call(this._sp) : tex.on(_events_Event__WEBPACK_IMPORTED_MODULE_30__[\"Event\"].READY, this._sp, complete);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _renderEmpty(sprite, context, x, y) {\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _renderAll(sprite, context, x, y) {\r\n        var cmds = this._cmds;\r\n        for (var i = 0, n = cmds.length; i < n; i++) {\r\n            cmds[i].run(context, x, y);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _renderOne(sprite, context, x, y) {\r\n        context.sprite = sprite;\r\n        this._one.run(context, x, y);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _renderOneImg(sprite, context, x, y) {\r\n        context.sprite = sprite;\r\n        this._one.run(context, x, y);\r\n    }\r\n    /**\r\n     * 绘制一条线。\r\n     * @param fromX\t\tX轴开始位置。\r\n     * @param fromY\t\tY轴开始位置。\r\n     * @param toX\t\tX轴结束位置。\r\n     * @param toY\t\tY轴结束位置。\r\n     * @param lineColor\t颜色。\r\n     * @param lineWidth\t（可选）线条宽度。\r\n     */\r\n    drawLine(fromX, fromY, toX, toY, lineColor, lineWidth = 1) {\r\n        var offset = (lineWidth < 1 || lineWidth % 2 === 0) ? 0 : 0.5;\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context._drawLine, _cmd_DrawLineCmd__WEBPACK_IMPORTED_MODULE_9__[\"DrawLineCmd\"].create.call(this, fromX + offset, fromY + offset, toX + offset, toY + offset, lineColor, lineWidth, 0));\r\n    }\r\n    /**\r\n     * 绘制一系列线段。\r\n     * @param x\t\t\t开始绘制的X轴位置。\r\n     * @param y\t\t\t开始绘制的Y轴位置。\r\n     * @param points\t线段的点集合。格式:[x1,y1,x2,y2,x3,y3...]。\r\n     * @param lineColor\t线段颜色，或者填充绘图的渐变对象。\r\n     * @param lineWidth\t（可选）线段宽度。\r\n     */\r\n    drawLines(x, y, points, lineColor, lineWidth = 1) {\r\n        if (!points || points.length < 4)\r\n            return null;\r\n        var offset = (lineWidth < 1 || lineWidth % 2 === 0) ? 0 : 0.5;\r\n        //TODO 线段需要缓存\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context._drawLines, _cmd_DrawLinesCmd__WEBPACK_IMPORTED_MODULE_10__[\"DrawLinesCmd\"].create.call(this, x + offset, y + offset, points, lineColor, lineWidth, 0));\r\n    }\r\n    /**\r\n     * 绘制一系列曲线。\r\n     * @param x\t\t\t开始绘制的 X 轴位置。\r\n     * @param y\t\t\t开始绘制的 Y 轴位置。\r\n     * @param points\t线段的点集合，格式[controlX, controlY, anchorX, anchorY...]。\r\n     * @param lineColor\t线段颜色，或者填充绘图的渐变对象。\r\n     * @param lineWidth\t（可选）线段宽度。\r\n     */\r\n    drawCurves(x, y, points, lineColor, lineWidth = 1) {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context.drawCurves, _cmd_DrawCurvesCmd__WEBPACK_IMPORTED_MODULE_7__[\"DrawCurvesCmd\"].create.call(this, x, y, points, lineColor, lineWidth));\r\n    }\r\n    /**\r\n     * 绘制矩形。\r\n     * @param x\t\t\t开始绘制的 X 轴位置。\r\n     * @param y\t\t\t开始绘制的 Y 轴位置。\r\n     * @param width\t\t矩形宽度。\r\n     * @param height\t矩形高度。\r\n     * @param fillColor\t填充颜色，或者填充绘图的渐变对象。\r\n     * @param lineColor\t（可选）边框颜色，或者填充绘图的渐变对象。\r\n     * @param lineWidth\t（可选）边框宽度。\r\n     */\r\n    drawRect(x, y, width, height, fillColor, lineColor = null, lineWidth = 1) {\r\n        var offset = (lineWidth >= 1 && lineColor) ? lineWidth / 2 : 0;\r\n        var lineOffset = lineColor ? lineWidth : 0;\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context.drawRect, _cmd_DrawRectCmd__WEBPACK_IMPORTED_MODULE_14__[\"DrawRectCmd\"].create.call(this, x + offset, y + offset, width - lineOffset, height - lineOffset, fillColor, lineColor, lineWidth));\r\n    }\r\n    /**\r\n     * 绘制圆形。\r\n     * @param x\t\t\t圆点X 轴位置。\r\n     * @param y\t\t\t圆点Y 轴位置。\r\n     * @param radius\t半径。\r\n     * @param fillColor\t填充颜色，或者填充绘图的渐变对象。\r\n     * @param lineColor\t（可选）边框颜色，或者填充绘图的渐变对象。\r\n     * @param lineWidth\t（可选）边框宽度。\r\n     */\r\n    drawCircle(x, y, radius, fillColor, lineColor = null, lineWidth = 1) {\r\n        var offset = (lineWidth >= 1 && lineColor) ? lineWidth / 2 : 0;\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context._drawCircle, _cmd_DrawCircleCmd__WEBPACK_IMPORTED_MODULE_6__[\"DrawCircleCmd\"].create.call(this, x, y, radius - offset, fillColor, lineColor, lineWidth, 0));\r\n    }\r\n    /**\r\n     * 绘制扇形。\r\n     * @param x\t\t\t\t开始绘制的 X 轴位置。\r\n     * @param y\t\t\t\t开始绘制的 Y 轴位置。\r\n     * @param radius\t\t扇形半径。\r\n     * @param startAngle\t开始角度。\r\n     * @param endAngle\t\t结束角度。\r\n     * @param fillColor\t\t填充颜色，或者填充绘图的渐变对象。\r\n     * @param lineColor\t\t（可选）边框颜色，或者填充绘图的渐变对象。\r\n     * @param lineWidth\t\t（可选）边框宽度。\r\n     */\r\n    drawPie(x, y, radius, startAngle, endAngle, fillColor, lineColor = null, lineWidth = 1) {\r\n        var offset = (lineWidth >= 1 && lineColor) ? lineWidth / 2 : 0;\r\n        var lineOffset = lineColor ? lineWidth : 0;\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context._drawPie, _cmd_DrawPieCmd__WEBPACK_IMPORTED_MODULE_12__[\"DrawPieCmd\"].create.call(this, x + offset, y + offset, radius - lineOffset, _utils_Utils__WEBPACK_IMPORTED_MODULE_35__[\"Utils\"].toRadian(startAngle), _utils_Utils__WEBPACK_IMPORTED_MODULE_35__[\"Utils\"].toRadian(endAngle), fillColor, lineColor, lineWidth, 0));\r\n    }\r\n    /**\r\n     * 绘制多边形。\r\n     * @param x\t\t\t开始绘制的 X 轴位置。\r\n     * @param y\t\t\t开始绘制的 Y 轴位置。\r\n     * @param points\t多边形的点集合。\r\n     * @param fillColor\t填充颜色，或者填充绘图的渐变对象。\r\n     * @param lineColor\t（可选）边框颜色，或者填充绘图的渐变对象。\r\n     * @param lineWidth\t（可选）边框宽度。\r\n     */\r\n    drawPoly(x, y, points, fillColor, lineColor = null, lineWidth = 1) {\r\n        var tIsConvexPolygon = false;\r\n        //这里加入多加形是否是凸边形\r\n        if (points.length > 6) {\r\n            tIsConvexPolygon = false;\r\n        }\r\n        else {\r\n            tIsConvexPolygon = true;\r\n        }\r\n        var offset = (lineWidth >= 1 && lineColor) ? (lineWidth % 2 === 0 ? 0 : 0.5) : 0;\r\n        //TODO 非凸多边形需要缓存\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context._drawPoly, _cmd_DrawPolyCmd__WEBPACK_IMPORTED_MODULE_13__[\"DrawPolyCmd\"].create.call(this, x + offset, y + offset, points, fillColor, lineColor, lineWidth, tIsConvexPolygon, 0));\r\n    }\r\n    /**\r\n     * 绘制路径。\r\n     * @param x\t\t开始绘制的 X 轴位置。\r\n     * @param y\t\t开始绘制的 Y 轴位置。\r\n     * @param paths\t路径集合，路径支持以下格式：[[\"moveTo\",x,y],[\"lineTo\",x,y],[\"arcTo\",x1,y1,x2,y2,r],[\"closePath\"]]。\r\n     * @param brush\t（可选）刷子定义，支持以下设置{fillStyle:\"#FF0000\"}。\r\n     * @param pen\t（可选）画笔定义，支持以下设置{strokeStyle,lineWidth,lineJoin:\"bevel|round|miter\",lineCap:\"butt|round|square\",miterLimit}。\r\n     */\r\n    drawPath(x, y, paths, brush = null, pen = null) {\r\n        return this._saveToCmd(_renders_Render__WEBPACK_IMPORTED_MODULE_33__[\"Render\"]._context._drawPath, _cmd_DrawPathCmd__WEBPACK_IMPORTED_MODULE_11__[\"DrawPathCmd\"].create.call(this, x, y, paths, brush, pen));\r\n    }\r\n    /**\r\n     * @private\r\n     * 绘制带九宫格的图片\r\n     * @param\ttexture\r\n     * @param\tx\r\n     * @param\ty\r\n     * @param\twidth\r\n     * @param\theight\r\n     * @param\tsizeGrid\r\n     */\r\n    draw9Grid(texture, x = 0, y = 0, width = 0, height = 0, sizeGrid = null) {\r\n        this._saveToCmd(null, _cmd_Draw9GridTexture__WEBPACK_IMPORTED_MODULE_5__[\"Draw9GridTexture\"].create(texture, x, y, width, height, sizeGrid));\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/Graphics.ts?");

/***/ }),

/***/ "./src/core/laya/display/GraphicsBounds.ts":
/*!*************************************************!*\
  !*** ./src/core/laya/display/GraphicsBounds.ts ***!
  \*************************************************/
/*! exports provided: GraphicsBounds */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GraphicsBounds\", function() { return GraphicsBounds; });\n/* harmony import */ var _cmd_AlphaCmd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cmd/AlphaCmd */ \"./src/core/laya/display/cmd/AlphaCmd.ts\");\n/* harmony import */ var _cmd_DrawCircleCmd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cmd/DrawCircleCmd */ \"./src/core/laya/display/cmd/DrawCircleCmd.ts\");\n/* harmony import */ var _cmd_DrawCurvesCmd__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cmd/DrawCurvesCmd */ \"./src/core/laya/display/cmd/DrawCurvesCmd.ts\");\n/* harmony import */ var _cmd_DrawImageCmd__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cmd/DrawImageCmd */ \"./src/core/laya/display/cmd/DrawImageCmd.ts\");\n/* harmony import */ var _cmd_DrawLineCmd__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cmd/DrawLineCmd */ \"./src/core/laya/display/cmd/DrawLineCmd.ts\");\n/* harmony import */ var _cmd_DrawLinesCmd__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cmd/DrawLinesCmd */ \"./src/core/laya/display/cmd/DrawLinesCmd.ts\");\n/* harmony import */ var _cmd_DrawPathCmd__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cmd/DrawPathCmd */ \"./src/core/laya/display/cmd/DrawPathCmd.ts\");\n/* harmony import */ var _cmd_DrawPieCmd__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cmd/DrawPieCmd */ \"./src/core/laya/display/cmd/DrawPieCmd.ts\");\n/* harmony import */ var _cmd_DrawPolyCmd__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cmd/DrawPolyCmd */ \"./src/core/laya/display/cmd/DrawPolyCmd.ts\");\n/* harmony import */ var _cmd_DrawRectCmd__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./cmd/DrawRectCmd */ \"./src/core/laya/display/cmd/DrawRectCmd.ts\");\n/* harmony import */ var _cmd_DrawTextureCmd__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./cmd/DrawTextureCmd */ \"./src/core/laya/display/cmd/DrawTextureCmd.ts\");\n/* harmony import */ var _cmd_FillTextureCmd__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./cmd/FillTextureCmd */ \"./src/core/laya/display/cmd/FillTextureCmd.ts\");\n/* harmony import */ var _cmd_RestoreCmd__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./cmd/RestoreCmd */ \"./src/core/laya/display/cmd/RestoreCmd.ts\");\n/* harmony import */ var _cmd_RotateCmd__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./cmd/RotateCmd */ \"./src/core/laya/display/cmd/RotateCmd.ts\");\n/* harmony import */ var _cmd_ScaleCmd__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./cmd/ScaleCmd */ \"./src/core/laya/display/cmd/ScaleCmd.ts\");\n/* harmony import */ var _cmd_TransformCmd__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./cmd/TransformCmd */ \"./src/core/laya/display/cmd/TransformCmd.ts\");\n/* harmony import */ var _cmd_TranslateCmd__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./cmd/TranslateCmd */ \"./src/core/laya/display/cmd/TranslateCmd.ts\");\n/* harmony import */ var _maths_Bezier__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../maths/Bezier */ \"./src/core/laya/maths/Bezier.ts\");\n/* harmony import */ var _maths_GrahamScan__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../maths/GrahamScan */ \"./src/core/laya/maths/GrahamScan.ts\");\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n/* harmony import */ var _maths_Point__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../maths/Point */ \"./src/core/laya/maths/Point.ts\");\n/* harmony import */ var _maths_Rectangle__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../maths/Rectangle */ \"./src/core/laya/maths/Rectangle.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../utils/Utils */ \"./src/core/laya/utils/Utils.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * Graphic bounds数据类\r\n */\r\nclass GraphicsBounds {\r\n    constructor() {\r\n        /**@private */\r\n        this._cacheBoundsType = false;\r\n    }\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy() {\r\n        this._graphics = null;\r\n        this._cacheBoundsType = false;\r\n        if (this._temp)\r\n            this._temp.length = 0;\r\n        if (this._rstBoundPoints)\r\n            this._rstBoundPoints.length = 0;\r\n        if (this._bounds)\r\n            this._bounds.recover();\r\n        this._bounds = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_23__[\"Pool\"].recover(\"GraphicsBounds\", this);\r\n    }\r\n    /**\r\n     * 创建\r\n     */\r\n    static create() {\r\n        return _utils_Pool__WEBPACK_IMPORTED_MODULE_23__[\"Pool\"].getItemByClass(\"GraphicsBounds\", GraphicsBounds);\r\n    }\r\n    /**\r\n     * 重置数据\r\n     */\r\n    reset() {\r\n        this._temp && (this._temp.length = 0);\r\n    }\r\n    /**\r\n     * 获取位置及宽高信息矩阵(比较耗CPU，频繁使用会造成卡顿，尽量少用)。\r\n     * @param realSize\t（可选）使用图片的真实大小，默认为false\r\n     * @return 位置与宽高组成的 一个 Rectangle 对象。\r\n     */\r\n    getBounds(realSize = false) {\r\n        if (!this._bounds || !this._temp || this._temp.length < 1 || realSize != this._cacheBoundsType) {\r\n            this._bounds = _maths_Rectangle__WEBPACK_IMPORTED_MODULE_21__[\"Rectangle\"]._getWrapRec(this.getBoundPoints(realSize), this._bounds);\r\n        }\r\n        this._cacheBoundsType = realSize;\r\n        return this._bounds;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param realSize\t（可选）使用图片的真实大小，默认为false\r\n     * 获取端点列表。\r\n     */\r\n    getBoundPoints(realSize = false) {\r\n        if (!this._temp || this._temp.length < 1 || realSize != this._cacheBoundsType)\r\n            this._temp = this._getCmdPoints(realSize);\r\n        this._cacheBoundsType = realSize;\r\n        return this._rstBoundPoints = _utils_Utils__WEBPACK_IMPORTED_MODULE_24__[\"Utils\"].copyArray(this._rstBoundPoints, this._temp);\r\n    }\r\n    _getCmdPoints(realSize = false) {\r\n        var context = _renders_Render__WEBPACK_IMPORTED_MODULE_22__[\"Render\"]._context;\r\n        var cmds = this._graphics.cmds;\r\n        var rst;\r\n        rst = this._temp || (this._temp = []);\r\n        rst.length = 0;\r\n        if (!cmds && this._graphics._one != null) {\r\n            GraphicsBounds._tempCmds.length = 0;\r\n            GraphicsBounds._tempCmds.push(this._graphics._one);\r\n            cmds = GraphicsBounds._tempCmds;\r\n        }\r\n        if (!cmds)\r\n            return rst;\r\n        var matrixs = GraphicsBounds._tempMatrixArrays;\r\n        matrixs.length = 0;\r\n        var tMatrix = GraphicsBounds._initMatrix;\r\n        tMatrix.identity();\r\n        var tempMatrix = GraphicsBounds._tempMatrix;\r\n        var cmd;\r\n        var tex;\r\n        for (var i = 0, n = cmds.length; i < n; i++) {\r\n            cmd = cmds[i];\r\n            switch (cmd.cmdID) {\r\n                case _cmd_AlphaCmd__WEBPACK_IMPORTED_MODULE_0__[\"AlphaCmd\"].ID: //save //TODO:是否还需要\r\n                    matrixs.push(tMatrix);\r\n                    tMatrix = tMatrix.clone();\r\n                    break;\r\n                case _cmd_RestoreCmd__WEBPACK_IMPORTED_MODULE_12__[\"RestoreCmd\"].ID: //restore\r\n                    tMatrix = matrixs.pop();\r\n                    break;\r\n                case _cmd_ScaleCmd__WEBPACK_IMPORTED_MODULE_14__[\"ScaleCmd\"].ID: //scale\r\n                    tempMatrix.identity();\r\n                    tempMatrix.translate(-cmd.pivotX, -cmd.pivotY);\r\n                    tempMatrix.scale(cmd.scaleX, cmd.scaleY);\r\n                    tempMatrix.translate(cmd.pivotX, cmd.pivotY);\r\n                    this._switchMatrix(tMatrix, tempMatrix);\r\n                    break;\r\n                case _cmd_RotateCmd__WEBPACK_IMPORTED_MODULE_13__[\"RotateCmd\"].ID: //case context._rotate: \r\n                    tempMatrix.identity();\r\n                    tempMatrix.translate(-cmd.pivotX, -cmd.pivotY);\r\n                    tempMatrix.rotate(cmd.angle);\r\n                    tempMatrix.translate(cmd.pivotX, cmd.pivotY);\r\n                    this._switchMatrix(tMatrix, tempMatrix);\r\n                    break;\r\n                case _cmd_TranslateCmd__WEBPACK_IMPORTED_MODULE_16__[\"TranslateCmd\"].ID: //translate\r\n                    tempMatrix.identity();\r\n                    tempMatrix.translate(cmd.tx, cmd.ty);\r\n                    this._switchMatrix(tMatrix, tempMatrix);\r\n                    break;\r\n                case _cmd_TransformCmd__WEBPACK_IMPORTED_MODULE_15__[\"TransformCmd\"].ID: //context._transform:\r\n                    tempMatrix.identity();\r\n                    tempMatrix.translate(-cmd.pivotX, -cmd.pivotY);\r\n                    tempMatrix.concat(cmd.matrix);\r\n                    tempMatrix.translate(cmd.pivotX, cmd.pivotY);\r\n                    this._switchMatrix(tMatrix, tempMatrix);\r\n                    break;\r\n                case _cmd_DrawImageCmd__WEBPACK_IMPORTED_MODULE_3__[\"DrawImageCmd\"].ID: //case context._drawTexture: \r\n                case _cmd_FillTextureCmd__WEBPACK_IMPORTED_MODULE_11__[\"FillTextureCmd\"].ID: //case context._fillTexture\r\n                    GraphicsBounds._addPointArrToRst(rst, _maths_Rectangle__WEBPACK_IMPORTED_MODULE_21__[\"Rectangle\"]._getBoundPointS(cmd.x, cmd.y, cmd.width, cmd.height), tMatrix);\r\n                    break;\r\n                case _cmd_DrawTextureCmd__WEBPACK_IMPORTED_MODULE_10__[\"DrawTextureCmd\"].ID: //case context._drawTextureTransform: \r\n                    tMatrix.copyTo(tempMatrix);\r\n                    if (cmd.matrix)\r\n                        tempMatrix.concat(cmd.matrix);\r\n                    GraphicsBounds._addPointArrToRst(rst, _maths_Rectangle__WEBPACK_IMPORTED_MODULE_21__[\"Rectangle\"]._getBoundPointS(cmd.x, cmd.y, cmd.width, cmd.height), tempMatrix);\r\n                    break;\r\n                case _cmd_DrawImageCmd__WEBPACK_IMPORTED_MODULE_3__[\"DrawImageCmd\"].ID:\r\n                    tex = cmd.texture;\r\n                    if (realSize) {\r\n                        if (cmd.width && cmd.height) {\r\n                            GraphicsBounds._addPointArrToRst(rst, _maths_Rectangle__WEBPACK_IMPORTED_MODULE_21__[\"Rectangle\"]._getBoundPointS(cmd.x, cmd.y, cmd.width, cmd.height), tMatrix);\r\n                        }\r\n                        else {\r\n                            GraphicsBounds._addPointArrToRst(rst, _maths_Rectangle__WEBPACK_IMPORTED_MODULE_21__[\"Rectangle\"]._getBoundPointS(cmd.x, cmd.y, tex.width, tex.height), tMatrix);\r\n                        }\r\n                    }\r\n                    else {\r\n                        var wRate = (cmd.width || tex.sourceWidth) / tex.width;\r\n                        var hRate = (cmd.height || tex.sourceHeight) / tex.height;\r\n                        var oWidth = wRate * tex.sourceWidth;\r\n                        var oHeight = hRate * tex.sourceHeight;\r\n                        var offX = tex.offsetX > 0 ? tex.offsetX : 0;\r\n                        var offY = tex.offsetY > 0 ? tex.offsetY : 0;\r\n                        offX *= wRate;\r\n                        offY *= hRate;\r\n                        GraphicsBounds._addPointArrToRst(rst, _maths_Rectangle__WEBPACK_IMPORTED_MODULE_21__[\"Rectangle\"]._getBoundPointS(cmd.x - offX, cmd.y - offY, oWidth, oHeight), tMatrix);\r\n                    }\r\n                    break;\r\n                case _cmd_FillTextureCmd__WEBPACK_IMPORTED_MODULE_11__[\"FillTextureCmd\"].ID:\r\n                    if (cmd.width && cmd.height) {\r\n                        GraphicsBounds._addPointArrToRst(rst, _maths_Rectangle__WEBPACK_IMPORTED_MODULE_21__[\"Rectangle\"]._getBoundPointS(cmd.x, cmd.y, cmd.width, cmd.height), tMatrix);\r\n                    }\r\n                    else {\r\n                        tex = cmd.texture;\r\n                        GraphicsBounds._addPointArrToRst(rst, _maths_Rectangle__WEBPACK_IMPORTED_MODULE_21__[\"Rectangle\"]._getBoundPointS(cmd.x, cmd.y, tex.width, tex.height), tMatrix);\r\n                    }\r\n                    break;\r\n                case _cmd_DrawTextureCmd__WEBPACK_IMPORTED_MODULE_10__[\"DrawTextureCmd\"].ID:\r\n                    var drawMatrix;\r\n                    if (cmd.matrix) {\r\n                        tMatrix.copyTo(tempMatrix);\r\n                        tempMatrix.concat(cmd.matrix);\r\n                        drawMatrix = tempMatrix;\r\n                    }\r\n                    else {\r\n                        drawMatrix = tMatrix;\r\n                    }\r\n                    if (realSize) {\r\n                        if (cmd.width && cmd.height) {\r\n                            GraphicsBounds._addPointArrToRst(rst, _maths_Rectangle__WEBPACK_IMPORTED_MODULE_21__[\"Rectangle\"]._getBoundPointS(cmd.x, cmd.y, cmd.width, cmd.height), drawMatrix);\r\n                        }\r\n                        else {\r\n                            tex = cmd.texture;\r\n                            GraphicsBounds._addPointArrToRst(rst, _maths_Rectangle__WEBPACK_IMPORTED_MODULE_21__[\"Rectangle\"]._getBoundPointS(cmd.x, cmd.y, tex.width, tex.height), drawMatrix);\r\n                        }\r\n                    }\r\n                    else {\r\n                        tex = cmd.texture;\r\n                        wRate = (cmd.width || tex.sourceWidth) / tex.width;\r\n                        hRate = (cmd.height || tex.sourceHeight) / tex.height;\r\n                        oWidth = wRate * tex.sourceWidth;\r\n                        oHeight = hRate * tex.sourceHeight;\r\n                        offX = tex.offsetX > 0 ? tex.offsetX : 0;\r\n                        offY = tex.offsetY > 0 ? tex.offsetY : 0;\r\n                        offX *= wRate;\r\n                        offY *= hRate;\r\n                        GraphicsBounds._addPointArrToRst(rst, _maths_Rectangle__WEBPACK_IMPORTED_MODULE_21__[\"Rectangle\"]._getBoundPointS(cmd.x - offX, cmd.y - offY, oWidth, oHeight), drawMatrix);\r\n                    }\r\n                    break;\r\n                case _cmd_DrawRectCmd__WEBPACK_IMPORTED_MODULE_9__[\"DrawRectCmd\"].ID: //case context._drawRect:\r\n                    GraphicsBounds._addPointArrToRst(rst, _maths_Rectangle__WEBPACK_IMPORTED_MODULE_21__[\"Rectangle\"]._getBoundPointS(cmd.x, cmd.y, cmd.width, cmd.height), tMatrix);\r\n                    break;\r\n                case _cmd_DrawCircleCmd__WEBPACK_IMPORTED_MODULE_1__[\"DrawCircleCmd\"].ID: //case context._drawCircle\r\n                    GraphicsBounds._addPointArrToRst(rst, _maths_Rectangle__WEBPACK_IMPORTED_MODULE_21__[\"Rectangle\"]._getBoundPointS(cmd.x - cmd.radius, cmd.y - cmd.radius, cmd.radius + cmd.radius, cmd.radius + cmd.radius), tMatrix);\r\n                    break;\r\n                case _cmd_DrawLineCmd__WEBPACK_IMPORTED_MODULE_4__[\"DrawLineCmd\"].ID: //drawLine\r\n                    GraphicsBounds._tempPoints.length = 0;\r\n                    var lineWidth;\r\n                    lineWidth = cmd.lineWidth * 0.5;\r\n                    if (cmd.fromX == cmd.toX) {\r\n                        GraphicsBounds._tempPoints.push(cmd.fromX + lineWidth, cmd.fromY, cmd.toX + lineWidth, cmd.toY, cmd.fromX - lineWidth, cmd.fromY, cmd.toX - lineWidth, cmd.toY);\r\n                    }\r\n                    else if (cmd.fromY == cmd.toY) {\r\n                        GraphicsBounds._tempPoints.push(cmd.fromX, cmd.fromY + lineWidth, cmd.toX, cmd.toY + lineWidth, cmd.fromX, cmd.fromY - lineWidth, cmd.toX, cmd.toY - lineWidth);\r\n                    }\r\n                    else {\r\n                        GraphicsBounds._tempPoints.push(cmd.fromX, cmd.fromY, cmd.toX, cmd.toY);\r\n                    }\r\n                    GraphicsBounds._addPointArrToRst(rst, GraphicsBounds._tempPoints, tMatrix);\r\n                    break;\r\n                case _cmd_DrawCurvesCmd__WEBPACK_IMPORTED_MODULE_2__[\"DrawCurvesCmd\"].ID: //context._drawCurves:\t\t\t\t\t\r\n                    GraphicsBounds._addPointArrToRst(rst, _maths_Bezier__WEBPACK_IMPORTED_MODULE_17__[\"Bezier\"].I.getBezierPoints(cmd.points), tMatrix, cmd.x, cmd.y);\r\n                    break;\r\n                case _cmd_DrawLinesCmd__WEBPACK_IMPORTED_MODULE_5__[\"DrawLinesCmd\"].ID: //drawpoly\r\n                case _cmd_DrawPolyCmd__WEBPACK_IMPORTED_MODULE_8__[\"DrawPolyCmd\"].ID: //drawpoly\r\n                    GraphicsBounds._addPointArrToRst(rst, cmd.points, tMatrix, cmd.x, cmd.y);\r\n                    break;\r\n                case _cmd_DrawPathCmd__WEBPACK_IMPORTED_MODULE_6__[\"DrawPathCmd\"].ID: //drawPath\r\n                    GraphicsBounds._addPointArrToRst(rst, this._getPathPoints(cmd.paths), tMatrix, cmd.x, cmd.y);\r\n                    break;\r\n                case _cmd_DrawPieCmd__WEBPACK_IMPORTED_MODULE_7__[\"DrawPieCmd\"].ID: //drawPie\r\n                    GraphicsBounds._addPointArrToRst(rst, this._getPiePoints(cmd.x, cmd.y, cmd.radius, cmd.startAngle, cmd.endAngle), tMatrix);\r\n                    break;\r\n            }\r\n        }\r\n        if (rst.length > 200) {\r\n            rst = _utils_Utils__WEBPACK_IMPORTED_MODULE_24__[\"Utils\"].copyArray(rst, _maths_Rectangle__WEBPACK_IMPORTED_MODULE_21__[\"Rectangle\"]._getWrapRec(rst)._getBoundPoints());\r\n        }\r\n        else if (rst.length > 8)\r\n            rst = _maths_GrahamScan__WEBPACK_IMPORTED_MODULE_18__[\"GrahamScan\"].scanPList(rst);\r\n        return rst;\r\n    }\r\n    _switchMatrix(tMatix, tempMatrix) {\r\n        tempMatrix.concat(tMatix);\r\n        tempMatrix.copyTo(tMatix);\r\n    }\r\n    static _addPointArrToRst(rst, points, matrix, dx = 0, dy = 0) {\r\n        var i, len;\r\n        len = points.length;\r\n        for (i = 0; i < len; i += 2) {\r\n            GraphicsBounds._addPointToRst(rst, points[i] + dx, points[i + 1] + dy, matrix);\r\n        }\r\n    }\r\n    static _addPointToRst(rst, x, y, matrix) {\r\n        var _tempPoint = _maths_Point__WEBPACK_IMPORTED_MODULE_20__[\"Point\"].TEMP;\r\n        _tempPoint.setTo(x ? x : 0, y ? y : 0);\r\n        matrix.transformPoint(_tempPoint);\r\n        rst.push(_tempPoint.x, _tempPoint.y);\r\n    }\r\n    /**\r\n     * 获得drawPie命令可能的产生的点。注意 这里只假设用在包围盒计算上。\r\n     * @param\tx\r\n     * @param\ty\r\n     * @param\tradius\r\n     * @param\tstartAngle\r\n     * @param\tendAngle\r\n     * @return\r\n     */\r\n    _getPiePoints(x, y, radius, startAngle, endAngle) {\r\n        var rst = GraphicsBounds._tempPoints;\r\n        GraphicsBounds._tempPoints.length = 0;\r\n        var k = Math.PI / 180;\r\n        var d1 = endAngle - startAngle;\r\n        if (d1 >= 360 || d1 <= -360) {\r\n            // 如果满了一圈了\r\n            rst.push(x - radius, y - radius);\r\n            rst.push(x + radius, y - radius);\r\n            rst.push(x + radius, y + radius);\r\n            rst.push(x - radius, y + radius);\r\n            return rst;\r\n        }\r\n        // \r\n        rst.push(x, y); // 中心\r\n        var delta = d1 % 360;\r\n        if (delta < 0)\r\n            delta += 360;\r\n        // 一定增加，且在360以内的end\r\n        var end1 = startAngle + delta;\r\n        // 转成弧度\r\n        var st = startAngle * k;\r\n        var ed = end1 * k;\r\n        // 起点\r\n        rst.push(x + radius * Math.cos(st), y + radius * Math.sin(st));\r\n        // 终点\r\n        rst.push(x + radius * Math.cos(ed), y + radius * Math.sin(ed));\r\n        // 圆形的四个边界点\r\n        // 按照90度对齐，看看会经历几个90度\r\n        var s1 = Math.ceil(startAngle / 90) * 90; //开始的。start的下一个90度\r\n        var s2 = Math.floor(end1 / 90) * 90; //结束。end的上一个90度\r\n        for (var cs = s1; cs <= s2; cs += 90) {\r\n            var csr = cs * k;\r\n            rst.push(x + radius * Math.cos(csr), y + radius * Math.sin(csr));\r\n        }\r\n        return rst;\r\n        /*\r\n        var segnum:int = 32;\r\n        var step:Number = delta / segnum;\r\n        var i:Number;\r\n        var angle:Number = startAngle;\r\n        for (i = 0; i <= segnum; i++) {\r\n            rst.push(x + radius * Math.cos(angle), y + radius * Math.sin(angle));\r\n            angle += step;\r\n        }\r\n        */\r\n    }\r\n    _getPathPoints(paths) {\r\n        var i, len;\r\n        var rst = GraphicsBounds._tempPoints;\r\n        rst.length = 0;\r\n        len = paths.length;\r\n        var tCMD;\r\n        for (i = 0; i < len; i++) {\r\n            tCMD = paths[i];\r\n            if (tCMD.length > 1) {\r\n                rst.push(tCMD[1], tCMD[2]);\r\n                if (tCMD.length > 3) {\r\n                    rst.push(tCMD[3], tCMD[4]);\r\n                }\r\n            }\r\n        }\r\n        return rst;\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n/**@private */\r\nGraphicsBounds._tempMatrix = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_19__[\"Matrix\"]();\r\n/**@private */\r\nGraphicsBounds._initMatrix = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_19__[\"Matrix\"]();\r\n/**@private */\r\nGraphicsBounds._tempPoints = [];\r\n/**@private */\r\nGraphicsBounds._tempMatrixArrays = [];\r\n/**@private */\r\nGraphicsBounds._tempCmds = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/GraphicsBounds.ts?");

/***/ }),

/***/ "./src/core/laya/display/Input.ts":
/*!****************************************!*\
  !*** ./src/core/laya/display/Input.ts ***!
  \****************************************/
/*! exports provided: Input */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Input\", function() { return Input; });\n/* harmony import */ var _Text__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Text */ \"./src/core/laya/display/Text.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Utils */ \"./src/core/laya/utils/Utils.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 用户输入一个或多个文本字符时后调度。\r\n * @eventType Event.INPUT\r\n * */\r\n/*[Event(name = \"input\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 文本发生变化后调度。\r\n * @eventType Event.CHANGE\r\n * */\r\n/*[Event(name = \"change\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 用户在输入框内敲回车键后，将会调度 <code>enter</code> 事件。\r\n * @eventType Event.ENTER\r\n * */\r\n/*[Event(name = \"enter\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 显示对象获得焦点后调度。\r\n * @eventType Event.FOCUS\r\n * */\r\n/*[Event(name = \"focus\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 显示对象失去焦点后调度。\r\n * @eventType Event.BLUR\r\n * */\r\n/*[Event(name = \"blur\", type = \"laya.events.Event\")]*/\r\n/**\r\n * <p><code>Input</code> 类用于创建显示对象以显示和输入文本。</p>\r\n * <p>Input 类封装了原生的文本输入框，由于不同浏览器的差异，会导致此对象的默认文本的位置与用户点击输入时的文本的位置有少许的偏差。</p>\r\n */\r\nclass Input extends _Text__WEBPACK_IMPORTED_MODULE_0__[\"Text\"] {\r\n    /**创建一个新的 <code>Input</code> 类实例。*/\r\n    constructor() {\r\n        super();\r\n        /**@private */\r\n        this._multiline = false;\r\n        /**@private */\r\n        this._editable = true;\r\n        /**@private */\r\n        this._maxChars = 1E5;\r\n        this._type = \"text\";\r\n        /**输入提示符。*/\r\n        this._prompt = '';\r\n        /**输入提示符颜色。*/\r\n        this._promptColor = \"#A9A9A9\";\r\n        this._originColor = \"#000000\";\r\n        this._content = '';\r\n        this._width = 100;\r\n        this._height = 20;\r\n        this.multiline = false;\r\n        this.overflow = _Text__WEBPACK_IMPORTED_MODULE_0__[\"Text\"].SCROLL;\r\n        this.on(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].MOUSE_DOWN, this, this._onMouseDown);\r\n        this.on(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].UNDISPLAY, this, this._onUnDisplay);\r\n    }\r\n    /**@private */\r\n    static __init__() {\r\n        Input._createInputElement();\r\n        // 移动端通过画布的touchend调用focus\r\n        if (_utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].onMobile) {\r\n            var isTrue = false;\r\n            if (_utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].onMiniGame || _utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].onBDMiniGame) {\r\n                isTrue = true;\r\n            }\r\n            _renders_Render__WEBPACK_IMPORTED_MODULE_3__[\"Render\"].canvas.addEventListener(Input.IOS_IFRAME ? (isTrue ? \"touchend\" : \"click\") : \"touchend\", Input._popupInputMethod);\r\n        }\r\n    }\r\n    // 移动平台在单击事件触发后弹出输入法\r\n    static _popupInputMethod(e) {\r\n        //e.preventDefault();\r\n        if (!Input.isInputting)\r\n            return;\r\n        var input = Input.inputElement;\r\n        // 弹出输入法。\r\n        input.focus();\r\n    }\r\n    static _createInputElement() {\r\n        Input._initInput(Input.area = _utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].createElement(\"textarea\"));\r\n        Input._initInput(Input.input = _utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].createElement(\"input\"));\r\n        Input.inputContainer = _utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].createElement(\"div\");\r\n        Input.inputContainer.style.position = \"absolute\";\r\n        Input.inputContainer.style.zIndex = 1E5;\r\n        _utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].container.appendChild(Input.inputContainer);\r\n        Input.inputContainer.setPos = function (x, y) {\r\n            Input.inputContainer.style.left = x + 'px';\r\n            Input.inputContainer.style.top = y + 'px';\r\n        };\r\n    }\r\n    static _initInput(input) {\r\n        var style = input.style;\r\n        style.cssText = \"position:absolute;overflow:hidden;resize:none;transform-origin:0 0;-webkit-transform-origin:0 0;-moz-transform-origin:0 0;-o-transform-origin:0 0;\";\r\n        style.resize = 'none';\r\n        style.backgroundColor = 'transparent';\r\n        style.border = 'none';\r\n        style.outline = 'none';\r\n        style.zIndex = 1;\r\n        input.addEventListener('input', Input._processInputting);\r\n        input.addEventListener('mousemove', Input._stopEvent);\r\n        input.addEventListener('mousedown', Input._stopEvent);\r\n        input.addEventListener('touchmove', Input._stopEvent);\r\n        /*[IF-SCRIPT-BEGIN]\r\n           input.setFontFace = function(fontFace:String):void { input.style.fontFamily = fontFace; };\r\n           if(!Render.isConchApp)\r\n           {\r\n            input.setColor = function(color:String):void { input.style.color = color; };\r\n            input.setFontSize = function(fontSize:int):void { input.style.fontSize = fontSize + 'px'; };\r\n           }\r\n           [IF-SCRIPT-END]*/\r\n    }\r\n    static _processInputting(e) {\r\n        var input = Input.inputElement.target;\r\n        if (!input)\r\n            return;\r\n        var value = Input.inputElement.value;\r\n        // 对输入字符进行限制\r\n        if (input._restrictPattern) {\r\n            // 部分输入法兼容\r\n            value = value.replace(/\\u2006|\\x27/g, \"\");\r\n            if (input._restrictPattern.test(value)) {\r\n                value = value.replace(input._restrictPattern, \"\");\r\n                Input.inputElement.value = value;\r\n            }\r\n        }\r\n        input._text = value;\r\n        input.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].INPUT);\r\n    }\r\n    static _stopEvent(e) {\r\n        if (e.type == 'touchmove')\r\n            e.preventDefault();\r\n        e.stopPropagation && e.stopPropagation();\r\n    }\r\n    /**\r\n     * 设置光标位置和选取字符。\r\n     * @param\tstartIndex\t光标起始位置。\r\n     * @param\tendIndex\t光标结束位置。\r\n     */\r\n    setSelection(startIndex, endIndex) {\r\n        this.focus = true;\r\n        Input.inputElement.selectionStart = startIndex;\r\n        Input.inputElement.selectionEnd = endIndex;\r\n    }\r\n    /**表示是否是多行输入框。*/\r\n    get multiline() {\r\n        return this._multiline;\r\n    }\r\n    set multiline(value) {\r\n        this._multiline = value;\r\n        this.valign = value ? \"top\" : \"middle\";\r\n    }\r\n    /**\r\n     * 获取对输入框的引用实例。\r\n     */\r\n    get nativeInput() {\r\n        return this._multiline ? Input.area : Input.input;\r\n    }\r\n    _onUnDisplay(e = null) {\r\n        this.focus = false;\r\n    }\r\n    _onMouseDown(e) {\r\n        this.focus = true;\r\n    }\r\n    /**\r\n     * 在输入期间，如果 Input 实例的位置改变，调用_syncInputTransform同步输入框的位置。\r\n     */\r\n    _syncInputTransform() {\r\n        var inputElement = this.nativeInput;\r\n        var transform = _utils_Utils__WEBPACK_IMPORTED_MODULE_5__[\"Utils\"].getTransformRelativeToWindow(this, this.padding[3], this.padding[0]);\r\n        var inputWid = this._width - this.padding[1] - this.padding[3];\r\n        var inputHei = this._height - this.padding[0] - this.padding[2];\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_3__[\"Render\"].isConchApp) {\r\n            inputElement.setScale(transform.scaleX, transform.scaleY);\r\n            inputElement.setSize(inputWid, inputHei);\r\n            inputElement.setPos(transform.x, transform.y);\r\n        }\r\n        else {\r\n            Input.inputContainer.style.transform = Input.inputContainer.style.webkitTransform = \"scale(\" + transform.scaleX + \",\" + transform.scaleY + \") rotate(\" + (_Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.canvasDegree) + \"deg)\";\r\n            inputElement.style.width = inputWid + 'px';\r\n            inputElement.style.height = inputHei + 'px';\r\n            Input.inputContainer.style.left = transform.x + 'px';\r\n            Input.inputContainer.style.top = transform.y + 'px';\r\n        }\r\n    }\r\n    /**选中当前实例的所有文本。*/\r\n    select() {\r\n        this.nativeInput.select();\r\n    }\r\n    /**\r\n     * 表示焦点是否在此实例上。\r\n     */\r\n    get focus() {\r\n        return this._focus;\r\n    }\r\n    // 移动平台最后单击画布才会调用focus\r\n    // 因此 调用focus接口是无法都在移动平台立刻弹出键盘的\r\n    set focus(value) {\r\n        var input = this.nativeInput;\r\n        if (this._focus !== value) {\r\n            if (value) {\r\n                if (input.target) {\r\n                    input.target._focusOut();\r\n                }\r\n                else {\r\n                    this._setInputMethod();\r\n                }\r\n                input.target = this;\r\n                this._focusIn();\r\n            }\r\n            else {\r\n                input.target = null;\r\n                this._focusOut();\r\n                _utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].document.body.scrollTop = 0;\r\n                input.blur();\r\n                if (_renders_Render__WEBPACK_IMPORTED_MODULE_3__[\"Render\"].isConchApp)\r\n                    input.setPos(-10000, -10000);\r\n                else if (Input.inputContainer.contains(input))\r\n                    Input.inputContainer.removeChild(input);\r\n            }\r\n        }\r\n    }\r\n    _setInputMethod() {\r\n        Input.input.parentElement && (Input.inputContainer.removeChild(Input.input));\r\n        Input.area.parentElement && (Input.inputContainer.removeChild(Input.area));\r\n        Input.inputElement = (this._multiline ? Input.area : Input.input);\r\n        Input.inputContainer.appendChild(Input.inputElement);\r\n        if (_Text__WEBPACK_IMPORTED_MODULE_0__[\"Text\"].RightToLeft) {\r\n            Input.inputElement.style.direction = \"rtl\";\r\n        }\r\n    }\r\n    _focusIn() {\r\n        Input.isInputting = true;\r\n        var input = this.nativeInput;\r\n        this._focus = true;\r\n        var cssStyle = input.style;\r\n        cssStyle.whiteSpace = (this.wordWrap ? \"pre-wrap\" : \"nowrap\");\r\n        this._setPromptColor();\r\n        input.readOnly = !this._editable;\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_3__[\"Render\"].isConchApp) {\r\n            input.setType(this._type);\r\n            input.setForbidEdit(!this._editable);\r\n        }\r\n        input.maxLength = this._maxChars;\r\n        var padding = this.padding;\r\n        input.type = this._type;\r\n        input.value = this._content;\r\n        input.placeholder = this._prompt;\r\n        _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.off(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].KEY_DOWN, this, this._onKeyDown);\r\n        _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.on(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].KEY_DOWN, this, this._onKeyDown);\r\n        _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.focus = this;\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].FOCUS);\r\n        // PC端直接调用focus进入焦点。\r\n        if (_utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].onPC)\r\n            input.focus();\r\n        // PC浏览器隐藏文字\r\n        if (!_utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].onMiniGame && !_utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].onBDMiniGame) {\r\n            var temp = this._text;\r\n            this._text = null;\r\n        }\r\n        this.typeset();\r\n        // PC同步输入框外观。\r\n        input.setColor(this._originColor);\r\n        input.setFontSize(this.fontSize);\r\n        input.setFontFace(_utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].onIPhone ? (_Text__WEBPACK_IMPORTED_MODULE_0__[\"Text\"].fontFamilyMap[this.font] || this.font) : this.font);\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_3__[\"Render\"].isConchApp) {\r\n            input.setMultiAble && input.setMultiAble(this._multiline);\r\n        }\r\n        cssStyle.lineHeight = (this.leading + this.fontSize) + \"px\";\r\n        cssStyle.fontStyle = (this.italic ? \"italic\" : \"normal\");\r\n        cssStyle.fontWeight = (this.bold ? \"bold\" : \"normal\");\r\n        cssStyle.textAlign = this.align;\r\n        cssStyle.padding = \"0 0\";\r\n        // 输入框重定位。\r\n        this._syncInputTransform();\r\n        if (!_renders_Render__WEBPACK_IMPORTED_MODULE_3__[\"Render\"].isConchApp && _utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].onPC)\r\n            _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.frameLoop(1, this, this._syncInputTransform);\r\n    }\r\n    // 设置DOM输入框提示符颜色。\r\n    _setPromptColor() {\r\n        // 创建style标签\r\n        Input.promptStyleDOM = _utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].getElementById(\"promptStyle\");\r\n        if (!Input.promptStyleDOM) {\r\n            Input.promptStyleDOM = _utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].createElement(\"style\");\r\n            Input.promptStyleDOM.setAttribute(\"id\", \"promptStyle\");\r\n            _utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].document.head.appendChild(Input.promptStyleDOM);\r\n        }\r\n        // 设置style标签\r\n        Input.promptStyleDOM.innerText = \"input::-webkit-input-placeholder, textarea::-webkit-input-placeholder {\" + \"color:\" + this._promptColor + \"}\" + \"input:-moz-placeholder, textarea:-moz-placeholder {\" + \"color:\" + this._promptColor + \"}\" + \"input::-moz-placeholder, textarea::-moz-placeholder {\" + \"color:\" + this._promptColor + \"}\" + \"input:-ms-input-placeholder, textarea:-ms-input-placeholder {\" + \"color:\" + this._promptColor + \"}\";\r\n    }\r\n    /**@private */\r\n    _focusOut() {\r\n        Input.isInputting = false;\r\n        this._focus = false;\r\n        this._text = null;\r\n        this._content = this.nativeInput.value;\r\n        if (!this._content) {\r\n            super.set_text(this._prompt);\r\n            super.set_color(this._promptColor);\r\n        }\r\n        else {\r\n            super.set_text(this._content);\r\n            super.set_color(this._originColor);\r\n        }\r\n        _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.off(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].KEY_DOWN, this, this._onKeyDown);\r\n        _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.focus = null;\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].BLUR);\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].CHANGE);\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_3__[\"Render\"].isConchApp)\r\n            this.nativeInput.blur();\r\n        // 只有PC会注册此事件。\r\n        _utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].onPC && _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.clear(this, this._syncInputTransform);\r\n    }\r\n    /**@private */\r\n    _onKeyDown(e) {\r\n        if (e.keyCode === 13) {\r\n            // 移动平台单行输入状态下点击回车收回输入法。 \r\n            if (_utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].onMobile && !this._multiline)\r\n                this.focus = false;\r\n            this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].ENTER);\r\n        }\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ set text(value) {\r\n        super.set_color(this._originColor);\r\n        value += '';\r\n        if (this._focus) {\r\n            this.nativeInput.value = value || '';\r\n            this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].CHANGE);\r\n        }\r\n        else {\r\n            // 单行时不允许换行\r\n            if (!this._multiline)\r\n                value = value.replace(/\\r?\\n/g, '');\r\n            this._content = value;\r\n            if (value)\r\n                super.set_text(value);\r\n            else {\r\n                super.set_text(this._prompt);\r\n                super.set_color(this.promptColor);\r\n            }\r\n        }\r\n    }\r\n    /*override*/ get text() {\r\n        if (this._focus)\r\n            return this.nativeInput.value;\r\n        else\r\n            return this._content || \"\";\r\n    }\r\n    /*override*/ changeText(text) {\r\n        this._content = text;\r\n        if (this._focus) {\r\n            this.nativeInput.value = text || '';\r\n            this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].CHANGE);\r\n        }\r\n        else\r\n            super.changeText(text);\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ set color(value) {\r\n        if (this._focus)\r\n            this.nativeInput.setColor(value);\r\n        super.set_color(this._content ? value : this._promptColor);\r\n        this._originColor = value;\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ set bgColor(value) {\r\n        super.set_bgColor(value);\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_3__[\"Render\"].isConchApp)\r\n            this.nativeInput.setBgColor(value);\r\n    }\r\n    /**限制输入的字符。*/\r\n    get restrict() {\r\n        if (this._restrictPattern) {\r\n            return this._restrictPattern.source;\r\n        }\r\n        return \"\";\r\n    }\r\n    set restrict(pattern) {\r\n        // H5保存RegExp\r\n        if (pattern) {\r\n            pattern = \"[^\" + pattern + \"]\";\r\n            // 如果pattern为^\\00-\\FF，则我们需要的正则表达式是\\00-\\FF\r\n            if (pattern.indexOf(\"^^\") > -1)\r\n                pattern = pattern.replace(\"^^\", \"\");\r\n            this._restrictPattern = new RegExp(pattern, \"g\");\r\n        }\r\n        else\r\n            this._restrictPattern = null;\r\n    }\r\n    /**\r\n     * 是否可编辑。\r\n     */\r\n    set editable(value) {\r\n        this._editable = value;\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_3__[\"Render\"].isConchApp) {\r\n            Input.input.setForbidEdit(!value);\r\n        }\r\n    }\r\n    get editable() {\r\n        return this._editable;\r\n    }\r\n    /**\r\n     * <p>字符数量限制，默认为10000。</p>\r\n     * <p>设置字符数量限制时，小于等于0的值将会限制字符数量为10000。</p>\r\n     */\r\n    get maxChars() {\r\n        return this._maxChars;\r\n    }\r\n    set maxChars(value) {\r\n        if (value <= 0)\r\n            value = 1E5;\r\n        this._maxChars = value;\r\n    }\r\n    /**\r\n     * 设置输入提示符。\r\n     */\r\n    get prompt() {\r\n        return this._prompt;\r\n    }\r\n    set prompt(value) {\r\n        if (!this._text && value)\r\n            super.set_color(this._promptColor);\r\n        this.promptColor = this._promptColor;\r\n        if (this._text)\r\n            super.set_text((this._text == this._prompt) ? value : this._text);\r\n        else\r\n            super.set_text(value);\r\n        this._prompt = _Text__WEBPACK_IMPORTED_MODULE_0__[\"Text\"].langPacks && _Text__WEBPACK_IMPORTED_MODULE_0__[\"Text\"].langPacks[value] ? _Text__WEBPACK_IMPORTED_MODULE_0__[\"Text\"].langPacks[value] : value;\r\n    }\r\n    /**\r\n     * 设置输入提示符颜色。\r\n     */\r\n    get promptColor() {\r\n        return this._promptColor;\r\n    }\r\n    set promptColor(value) {\r\n        this._promptColor = value;\r\n        if (!this._content)\r\n            super.set_color(value);\r\n    }\r\n    /**\r\n     * <p>输入框类型为Input静态常量之一。</p>\r\n     * <ul>\r\n     * <li>TYPE_TEXT</li>\r\n     * <li>TYPE_PASSWORD</li>\r\n     * <li>TYPE_EMAIL</li>\r\n     * <li>TYPE_URL</li>\r\n     * <li>TYPE_NUMBER</li>\r\n     * <li>TYPE_RANGE</li>\r\n     * <li>TYPE_DATE</li>\r\n     * <li>TYPE_MONTH</li>\r\n     * <li>TYPE_WEEK</li>\r\n     * <li>TYPE_TIME</li>\r\n     * <li>TYPE_DATE_TIME</li>\r\n     * <li>TYPE_DATE_TIME_LOCAL</li>\r\n     * </ul>\r\n     * <p>平台兼容性参见http://www.w3school.com.cn/html5/html_5_form_input_types.asp。</p>\r\n     */\r\n    get type() {\r\n        return this._type;\r\n    }\r\n    set type(value) {\r\n        if (value === \"password\")\r\n            this._getTextStyle().asPassword = true;\r\n        else\r\n            this._getTextStyle().asPassword = false;\r\n        this._type = value;\r\n    }\r\n}\r\n/** 常规文本域。*/\r\nInput.TYPE_TEXT = \"text\";\r\n/** password 类型用于密码域输入。*/\r\nInput.TYPE_PASSWORD = \"password\";\r\n/** email 类型用于应该包含 e-mail 地址的输入域。*/\r\nInput.TYPE_EMAIL = \"email\";\r\n/** url 类型用于应该包含 URL 地址的输入域。*/\r\nInput.TYPE_URL = \"url\";\r\n/** number 类型用于应该包含数值的输入域。*/\r\nInput.TYPE_NUMBER = \"number\";\r\n/**\r\n * <p>range 类型用于应该包含一定范围内数字值的输入域。</p>\r\n * <p>range 类型显示为滑动条。</p>\r\n * <p>您还能够设定对所接受的数字的限定。</p>\r\n */\r\nInput.TYPE_RANGE = \"range\";\r\n/**  选取日、月、年。*/\r\nInput.TYPE_DATE = \"date\";\r\n/** month - 选取月、年。*/\r\nInput.TYPE_MONTH = \"month\";\r\n/** week - 选取周和年。*/\r\nInput.TYPE_WEEK = \"week\";\r\n/** time - 选取时间（小时和分钟）。*/\r\nInput.TYPE_TIME = \"time\";\r\n/** datetime - 选取时间、日、月、年（UTC 时间）。*/\r\nInput.TYPE_DATE_TIME = \"datetime\";\r\n/** datetime-local - 选取时间、日、月、年（本地时间）。*/\r\nInput.TYPE_DATE_TIME_LOCAL = \"datetime-local\";\r\n/**\r\n * <p>search 类型用于搜索域，比如站点搜索或 Google 搜索。</p>\r\n * <p>search 域显示为常规的文本域。</p>\r\n */\r\nInput.TYPE_SEARCH = \"search\";\r\n/**@private */\r\nInput.IOS_IFRAME = (_utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].onIOS && _utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].window.top != _utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].window.self);\r\nInput.inputHeight = 45;\r\n/**表示是否处于输入状态。*/\r\nInput.isInputting = false;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/Input.ts?");

/***/ }),

/***/ "./src/core/laya/display/Node.ts":
/*!***************************************!*\
  !*** ./src/core/laya/display/Node.ts ***!
  \***************************************/
/*! exports provided: Node */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Node\", function() { return Node; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _Const__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Const */ \"./src/core/laya/Const.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/EventDispatcher */ \"./src/core/laya/events/EventDispatcher.ts\");\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n/* harmony import */ var _utils_Stat__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Stat */ \"./src/core/laya/utils/Stat.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 添加到父对象后调度。\r\n * @eventType Event.ADDED\r\n */\r\n/*[Event(name = \"added\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 被父对象移除后调度。\r\n * @eventType Event.REMOVED\r\n */\r\n/*[Event(name = \"removed\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 加入节点树时调度。\r\n * @eventType Event.DISPLAY\r\n */\r\n/*[Event(name = \"display\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 从节点树移除时调度。\r\n * @eventType Event.UNDISPLAY\r\n */\r\n/*[Event(name = \"undisplay\", type = \"laya.events.Event\")]*/\r\n/**\r\n *  <code>Node</code> 类是可放在显示列表中的所有对象的基类。该显示列表管理 Laya 运行时中显示的所有对象。使用 Node 类排列显示列表中的显示对象。Node 对象可以有子显示对象。\r\n */\r\nclass Node extends _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_3__[\"EventDispatcher\"] {\r\n    constructor() {\r\n        super();\r\n        /**@private */\r\n        this._bits = 0;\r\n        /**@private 子对象集合，请不要直接修改此对象。*/\r\n        this._children = Node.ARRAY_EMPTY;\r\n        /**@private 仅仅用来处理输入事件的,并不是真正意义上的子对象 */\r\n        this._extUIChild = Node.ARRAY_EMPTY;\r\n        /**@private 父节点对象*/\r\n        this._parent = null;\r\n        /**节点名称。*/\r\n        this.name = \"\";\r\n        /**[只读]是否已经销毁。对象销毁后不能再使用。*/\r\n        this.destroyed = false;\r\n        this.createGLBuffer();\r\n    }\r\n    /**@private */\r\n    createGLBuffer() {\r\n    }\r\n    /**@private */\r\n    _setBit(type, value) {\r\n        if (type === _Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAY) {\r\n            var preValue = this._getBit(type);\r\n            if (preValue != value)\r\n                this._updateDisplayedInstage();\r\n        }\r\n        if (value)\r\n            this._bits |= type;\r\n        else\r\n            this._bits &= ~type;\r\n    }\r\n    /**@private */\r\n    _getBit(type) {\r\n        return (this._bits & type) != 0;\r\n    }\r\n    /**@private */\r\n    _setUpNoticeChain() {\r\n        if (this._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAY))\r\n            this._setBitUp(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAY);\r\n    }\r\n    /**@private */\r\n    _setBitUp(type) {\r\n        var ele = this;\r\n        ele._setBit(type, true);\r\n        ele = ele._parent;\r\n        while (ele) {\r\n            if (ele._getBit(type))\r\n                return;\r\n            ele._setBit(type, true);\r\n            ele = ele._parent;\r\n        }\r\n    }\r\n    /**\r\n     * <p>增加事件侦听器，以使侦听器能够接收事件通知。</p>\r\n     * <p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>\r\n     * @param\ttype\t\t事件的类型。\r\n     * @param\tcaller\t\t事件侦听函数的执行域。\r\n     * @param\tlistener\t事件侦听函数。\r\n     * @param\targs\t\t（可选）事件侦听函数的回调参数。\r\n     * @return 此 EventDispatcher 对象。\r\n     */\r\n    /*override*/ on(type, caller, listener, args = null) {\r\n        if (type === _events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].DISPLAY || type === _events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].UNDISPLAY) {\r\n            if (!this._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAY))\r\n                this._setBitUp(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAY);\r\n        }\r\n        return this._createListener(type, caller, listener, args, false);\r\n    }\r\n    /**\r\n     * <p>增加事件侦听器，以使侦听器能够接收事件通知，此侦听事件响应一次后则自动移除侦听。</p>\r\n     * <p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>\r\n     * @param\ttype\t\t事件的类型。\r\n     * @param\tcaller\t\t事件侦听函数的执行域。\r\n     * @param\tlistener\t事件侦听函数。\r\n     * @param\targs\t\t（可选）事件侦听函数的回调参数。\r\n     * @return 此 EventDispatcher 对象。\r\n     */\r\n    /*override*/ once(type, caller, listener, args = null) {\r\n        if (type === _events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].DISPLAY || type === _events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].UNDISPLAY) {\r\n            if (!this._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAY))\r\n                this._setBitUp(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAY);\r\n        }\r\n        return this._createListener(type, caller, listener, args, true);\r\n    }\r\n    /**\r\n     * <p>销毁此对象。destroy对象默认会把自己从父节点移除，并且清理自身引用关系，等待js自动垃圾回收机制回收。destroy后不能再使用。</p>\r\n     * <p>destroy时会移除自身的事情监听，自身的timer监听，移除子对象及从父节点移除自己。</p>\r\n     * @param destroyChild\t（可选）是否同时销毁子节点，若值为true,则销毁子节点，否则不销毁子节点。\r\n     */\r\n    destroy(destroyChild = true) {\r\n        this.destroyed = true;\r\n        this._destroyAllComponent();\r\n        this._parent && this._parent.removeChild(this);\r\n        //销毁子节点\r\n        if (this._children) {\r\n            if (destroyChild)\r\n                this.destroyChildren();\r\n            else\r\n                this.removeChildren();\r\n        }\r\n        this.onDestroy();\r\n        this._children = null;\r\n        //移除所有事件监听\r\n        this.offAll();\r\n        //移除所有timer\r\n        //this.timer.clearAll(this);\t\t\t\r\n    }\r\n    /**\r\n     * 销毁时执行\r\n     * 此方法为虚方法，使用时重写覆盖即可\r\n     */\r\n    onDestroy() {\r\n        //trace(\"onDestroy node\", this.name);\r\n    }\r\n    /**\r\n     * 销毁所有子对象，不销毁自己本身。\r\n     */\r\n    destroyChildren() {\r\n        //销毁子节点\r\n        if (this._children) {\r\n            //为了保持销毁顺序，所以需要正序销毁\r\n            for (var i = 0, n = this._children.length; i < n; i++) {\r\n                this._children[0].destroy(true);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 添加子节点。\r\n     * @param\tnode 节点对象\r\n     * @return\t返回添加的节点\r\n     */\r\n    addChild(node) {\r\n        if (!node || this.destroyed || node === this)\r\n            return node;\r\n        if (node._zOrder)\r\n            this._setBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].HAS_ZORDER, true);\r\n        if (node._parent === this) {\r\n            var index = this.getChildIndex(node);\r\n            if (index !== this._children.length - 1) {\r\n                this._children.splice(index, 1);\r\n                this._children.push(node);\r\n                this._childChanged();\r\n            }\r\n        }\r\n        else {\r\n            node._parent && node._parent.removeChild(node);\r\n            this._children === Node.ARRAY_EMPTY && (this._children = []);\r\n            this._children.push(node);\r\n            node._setParent(this);\r\n            this._childChanged();\r\n        }\r\n        return node;\r\n    }\r\n    addInputChild(node) {\r\n        if (this._extUIChild == Node.ARRAY_EMPTY) {\r\n            this._extUIChild = [node];\r\n        }\r\n        else {\r\n            if (this._extUIChild.indexOf(node) >= 0) {\r\n                return null;\r\n            }\r\n            this._extUIChild.push(node);\r\n        }\r\n        return null;\r\n    }\r\n    removeInputChild(node) {\r\n        var idx = this._extUIChild.indexOf(node);\r\n        if (idx >= 0) {\r\n            this._extUIChild.splice(idx, 1);\r\n        }\r\n    }\r\n    /**\r\n     * 批量增加子节点\r\n     * @param\t...args 无数子节点。\r\n     */\r\n    addChildren(...args) {\r\n        var i = 0, n = args.length;\r\n        while (i < n) {\r\n            this.addChild(args[i++]);\r\n        }\r\n    }\r\n    /**\r\n     * 添加子节点到指定的索引位置。\r\n     * @param\tnode 节点对象。\r\n     * @param\tindex 索引位置。\r\n     * @return\t返回添加的节点。\r\n     */\r\n    addChildAt(node, index) {\r\n        if (!node || this.destroyed || node === this)\r\n            return node;\r\n        if (node._zOrder)\r\n            this._setBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].HAS_ZORDER, true);\r\n        if (index >= 0 && index <= this._children.length) {\r\n            if (node._parent === this) {\r\n                var oldIndex = this.getChildIndex(node);\r\n                this._children.splice(oldIndex, 1);\r\n                this._children.splice(index, 0, node);\r\n                this._childChanged();\r\n            }\r\n            else {\r\n                node._parent && node._parent.removeChild(node);\r\n                this._children === Node.ARRAY_EMPTY && (this._children = []);\r\n                this._children.splice(index, 0, node);\r\n                node._setParent(this);\r\n            }\r\n            return node;\r\n        }\r\n        else {\r\n            throw new Error(\"appendChildAt:The index is out of bounds\");\r\n        }\r\n    }\r\n    /**\r\n     * 根据子节点对象，获取子节点的索引位置。\r\n     * @param\tnode 子节点。\r\n     * @return\t子节点所在的索引位置。\r\n     */\r\n    getChildIndex(node) {\r\n        return this._children.indexOf(node);\r\n    }\r\n    /**\r\n     * 根据子节点的名字，获取子节点对象。\r\n     * @param\tname 子节点的名字。\r\n     * @return\t节点对象。\r\n     */\r\n    getChildByName(name) {\r\n        var nodes = this._children;\r\n        if (nodes) {\r\n            for (var i = 0, n = nodes.length; i < n; i++) {\r\n                var node = nodes[i];\r\n                if (node.name === name)\r\n                    return node;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * 根据子节点的索引位置，获取子节点对象。\r\n     * @param\tindex 索引位置\r\n     * @return\t子节点\r\n     */\r\n    getChildAt(index) {\r\n        return this._children[index] || null;\r\n    }\r\n    /**\r\n     * 设置子节点的索引位置。\r\n     * @param\tnode 子节点。\r\n     * @param\tindex 新的索引。\r\n     * @return\t返回子节点本身。\r\n     */\r\n    setChildIndex(node, index) {\r\n        var childs = this._children;\r\n        if (index < 0 || index >= childs.length) {\r\n            throw new Error(\"setChildIndex:The index is out of bounds.\");\r\n        }\r\n        var oldIndex = this.getChildIndex(node);\r\n        if (oldIndex < 0)\r\n            throw new Error(\"setChildIndex:node is must child of this object.\");\r\n        childs.splice(oldIndex, 1);\r\n        childs.splice(index, 0, node);\r\n        this._childChanged();\r\n        return node;\r\n    }\r\n    /**\r\n     * 子节点发生改变。\r\n     * @private\r\n     * @param\tchild 子节点。\r\n     */\r\n    _childChanged(child = null) {\r\n    }\r\n    /**\r\n     * 删除子节点。\r\n     * @param\tnode 子节点\r\n     * @return\t被删除的节点\r\n     */\r\n    removeChild(node) {\r\n        if (!this._children)\r\n            return node;\r\n        var index = this._children.indexOf(node);\r\n        return this.removeChildAt(index);\r\n    }\r\n    /**\r\n     * 从父容器删除自己，如已经被删除不会抛出异常。\r\n     * @return 当前节点（ Node ）对象。\r\n     */\r\n    removeSelf() {\r\n        this._parent && this._parent.removeChild(this);\r\n        return this;\r\n    }\r\n    /**\r\n     * 根据子节点名字删除对应的子节点对象，如果找不到不会抛出异常。\r\n     * @param\tname 对象名字。\r\n     * @return 查找到的节点（ Node ）对象。\r\n     */\r\n    removeChildByName(name) {\r\n        var node = this.getChildByName(name);\r\n        node && this.removeChild(node);\r\n        return node;\r\n    }\r\n    /**\r\n     * 根据子节点索引位置，删除对应的子节点对象。\r\n     * @param\tindex 节点索引位置。\r\n     * @return\t被删除的节点。\r\n     */\r\n    removeChildAt(index) {\r\n        var node = this.getChildAt(index);\r\n        if (node) {\r\n            this._children.splice(index, 1);\r\n            node._setParent(null);\r\n        }\r\n        return node;\r\n    }\r\n    /**\r\n     * 删除指定索引区间的所有子对象。\r\n     * @param\tbeginIndex 开始索引。\r\n     * @param\tendIndex 结束索引。\r\n     * @return 当前节点对象。\r\n     */\r\n    removeChildren(beginIndex = 0, endIndex = 0x7fffffff) {\r\n        if (this._children && this._children.length > 0) {\r\n            var childs = this._children;\r\n            if (beginIndex === 0 && endIndex >= childs.length - 1) {\r\n                var arr = childs;\r\n                this._children = Node.ARRAY_EMPTY;\r\n            }\r\n            else {\r\n                arr = childs.splice(beginIndex, endIndex - beginIndex);\r\n            }\r\n            for (var i = 0, n = arr.length; i < n; i++) {\r\n                arr[i]._setParent(null);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * 替换子节点。\r\n     * @internal 将传入的新节点对象替换到已有子节点索引位置处。\r\n     * @param\tnewNode 新节点。\r\n     * @param\toldNode 老节点。\r\n     * @return\t返回新节点。\r\n     */\r\n    replaceChild(newNode, oldNode) {\r\n        var index = this._children.indexOf(oldNode);\r\n        if (index > -1) {\r\n            this._children.splice(index, 1, newNode);\r\n            oldNode._setParent(null);\r\n            newNode._setParent(this);\r\n            return newNode;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * 子对象数量。\r\n     */\r\n    get numChildren() {\r\n        return this._children.length;\r\n    }\r\n    /**父节点。*/\r\n    get parent() {\r\n        return this._parent;\r\n    }\r\n    /**@private */\r\n    _setParent(value) {\r\n        if (this._parent !== value) {\r\n            if (value) {\r\n                this._parent = value;\r\n                //如果父对象可见，则设置子对象可见\r\n                this._onAdded();\r\n                this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].ADDED);\r\n                if (this._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAY)) {\r\n                    this._setUpNoticeChain();\r\n                    value.displayedInStage && this._displayChild(this, true);\r\n                }\r\n                value._childChanged(this);\r\n            }\r\n            else {\r\n                //设置子对象不可见\r\n                this._onRemoved();\r\n                this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].REMOVED);\r\n                this._parent._childChanged();\r\n                if (this._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAY))\r\n                    this._displayChild(this, false);\r\n                this._parent = value;\r\n            }\r\n        }\r\n    }\r\n    /**表示是否在显示列表中显示。*/\r\n    get displayedInStage() {\r\n        if (this._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAY))\r\n            return this._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAYED_INSTAGE);\r\n        this._setBitUp(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAY);\r\n        return this._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAYED_INSTAGE);\r\n    }\r\n    /**@private */\r\n    _updateDisplayedInstage() {\r\n        var ele;\r\n        ele = this;\r\n        var stage = _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage;\r\n        var displayedInStage = false;\r\n        while (ele) {\r\n            if (ele._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAY)) {\r\n                displayedInStage = ele._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAYED_INSTAGE);\r\n                break;\r\n            }\r\n            if (ele === stage || ele._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAYED_INSTAGE)) {\r\n                displayedInStage = true;\r\n                break;\r\n            }\r\n            ele = ele._parent;\r\n        }\r\n        this._setBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAYED_INSTAGE, displayedInStage);\r\n    }\r\n    /**@private */\r\n    _setDisplay(value) {\r\n        if (this._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAYED_INSTAGE) !== value) {\r\n            this._setBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAYED_INSTAGE, value);\r\n            if (value)\r\n                this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].DISPLAY);\r\n            else\r\n                this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].UNDISPLAY);\r\n        }\r\n    }\r\n    /**\r\n     * 设置指定节点对象是否可见(是否在渲染列表中)。\r\n     * @private\r\n     * @param\tnode 节点。\r\n     * @param\tdisplay 是否可见。\r\n     */\r\n    _displayChild(node, display) {\r\n        var childs = node._children;\r\n        if (childs) {\r\n            for (var i = 0, n = childs.length; i < n; i++) {\r\n                var child = childs[i];\r\n                if (!child._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DISPLAY))\r\n                    continue;\r\n                if (child._children.length > 0) {\r\n                    this._displayChild(child, display);\r\n                }\r\n                else {\r\n                    child._setDisplay(display);\r\n                }\r\n            }\r\n        }\r\n        node._setDisplay(display);\r\n    }\r\n    /**\r\n     * 当前容器是否包含指定的 <code>Node</code> 节点对象 。\r\n     * @param\tnode  指定的 <code>Node</code> 节点对象 。\r\n     * @return\t一个布尔值表示是否包含指定的 <code>Node</code> 节点对象 。\r\n     */\r\n    contains(node) {\r\n        if (node === this)\r\n            return true;\r\n        while (node) {\r\n            if (node._parent === this)\r\n                return true;\r\n            node = node._parent;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * 定时重复执行某函数。功能同Laya.timer.timerLoop()。\r\n     * @param\tdelay\t\t间隔时间(单位毫秒)。\r\n     * @param\tcaller\t\t执行域(this)。\r\n     * @param\tmethod\t\t结束时的回调方法。\r\n     * @param\targs\t\t（可选）回调参数。\r\n     * @param\tcoverBefore\t（可选）是否覆盖之前的延迟执行，默认为true。\r\n     * @param\tjumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次\r\n     */\r\n    timerLoop(delay, caller, method, args = null, coverBefore = true, jumpFrame = false) {\r\n        var timer = this.scene ? this.scene.timer : _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].timer;\r\n        timer.loop(delay, caller, method, args, coverBefore, jumpFrame);\r\n    }\r\n    /**\r\n     * 定时执行某函数一次。功能同Laya.timer.timerOnce()。\r\n     * @param\tdelay\t\t延迟时间(单位毫秒)。\r\n     * @param\tcaller\t\t执行域(this)。\r\n     * @param\tmethod\t\t结束时的回调方法。\r\n     * @param\targs\t\t（可选）回调参数。\r\n     * @param\tcoverBefore\t（可选）是否覆盖之前的延迟执行，默认为true。\r\n     */\r\n    timerOnce(delay, caller, method, args = null, coverBefore = true) {\r\n        var timer = this.scene ? this.scene.timer : _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].timer;\r\n        timer._create(false, false, delay, caller, method, args, coverBefore);\r\n    }\r\n    /**\r\n     * 定时重复执行某函数(基于帧率)。功能同Laya.timer.frameLoop()。\r\n     * @param\tdelay\t\t间隔几帧(单位为帧)。\r\n     * @param\tcaller\t\t执行域(this)。\r\n     * @param\tmethod\t\t结束时的回调方法。\r\n     * @param\targs\t\t（可选）回调参数。\r\n     * @param\tcoverBefore\t（可选）是否覆盖之前的延迟执行，默认为true。\r\n     */\r\n    frameLoop(delay, caller, method, args = null, coverBefore = true) {\r\n        var timer = this.scene ? this.scene.timer : _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].timer;\r\n        timer._create(true, true, delay, caller, method, args, coverBefore);\r\n    }\r\n    /**\r\n     * 定时执行一次某函数(基于帧率)。功能同Laya.timer.frameOnce()。\r\n     * @param\tdelay\t\t延迟几帧(单位为帧)。\r\n     * @param\tcaller\t\t执行域(this)\r\n     * @param\tmethod\t\t结束时的回调方法\r\n     * @param\targs\t\t（可选）回调参数\r\n     * @param\tcoverBefore\t（可选）是否覆盖之前的延迟执行，默认为true\r\n     */\r\n    frameOnce(delay, caller, method, args = null, coverBefore = true) {\r\n        var timer = this.scene ? this.scene.timer : _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].timer;\r\n        timer._create(true, false, delay, caller, method, args, coverBefore);\r\n    }\r\n    /**\r\n     * 清理定时器。功能同Laya.timer.clearTimer()。\r\n     * @param\tcaller 执行域(this)。\r\n     * @param\tmethod 结束时的回调方法。\r\n     */\r\n    clearTimer(caller, method) {\r\n        var timer = this.scene ? this.scene.timer : _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].timer;\r\n        timer.clear(caller, method);\r\n    }\r\n    /**\r\n     * <p>延迟运行指定的函数。</p>\r\n     * <p>在控件被显示在屏幕之前调用，一般用于延迟计算数据。</p>\r\n     * @param method 要执行的函数的名称。例如，functionName。\r\n     * @param args 传递给 <code>method</code> 函数的可选参数列表。\r\n     *\r\n     * @see #runCallLater()\r\n     */\r\n    callLater(method, args = null) {\r\n        var timer = this.scene ? this.scene.timer : _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].timer;\r\n        timer.callLater(this, method, args);\r\n    }\r\n    /**\r\n     * <p>如果有需要延迟调用的函数（通过 <code>callLater</code> 函数设置），则立即执行延迟调用函数。</p>\r\n     * @param method 要执行的函数名称。例如，functionName。\r\n     * @see #callLater()\r\n     */\r\n    runCallLater(method) {\r\n        var timer = this.scene ? this.scene.timer : _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].timer;\r\n        timer.runCallLater(this, method);\r\n    }\r\n    /**\r\n     * 获得所属场景。\r\n     * @return\t场景。\r\n     */\r\n    get scene() {\r\n        return this._scene;\r\n    }\r\n    /**\r\n     * 获取自身是否激活。\r\n     *   @return\t自身是否激活。\r\n     */\r\n    get active() {\r\n        return !this._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].NOT_READY) && !this._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].NOT_ACTIVE);\r\n    }\r\n    /**\r\n     * 设置是否激活。\r\n     * @param\tvalue 是否激活。\r\n     */\r\n    set active(value) {\r\n        value = !!value;\r\n        if (!this._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].NOT_ACTIVE) !== value) {\r\n            if (this._activeChangeScripts && this._activeChangeScripts.length !== 0) {\r\n                if (value)\r\n                    throw \"Node: can't set the main inActive node active in hierarchy,if the operate is in main inActive node or it's children script's onDisable Event.\";\r\n                else\r\n                    throw \"Node: can't set the main active node inActive in hierarchy,if the operate is in main active node or it's children script's onEnable Event.\";\r\n            }\r\n            else {\r\n                this._setBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].NOT_ACTIVE, !value);\r\n                if (this._parent) {\r\n                    if (this._parent.activeInHierarchy) {\r\n                        if (value)\r\n                            this._processActive();\r\n                        else\r\n                            this._processInActive();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 获取在场景中是否激活。\r\n     *   @return\t在场景中是否激活。\r\n     */\r\n    get activeInHierarchy() {\r\n        return this._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].ACTIVE_INHIERARCHY);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _onActive() {\r\n        _utils_Stat__WEBPACK_IMPORTED_MODULE_5__[\"Stat\"].spriteCount++;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _onInActive() {\r\n        _utils_Stat__WEBPACK_IMPORTED_MODULE_5__[\"Stat\"].spriteCount--;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _onActiveInScene() {\r\n        //override it.\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _onInActiveInScene() {\r\n        //override it.\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _parse(data, spriteMap) {\r\n        //override it.\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _setBelongScene(scene) {\r\n        if (!this._scene) {\r\n            this._scene = scene;\r\n            if (this._components) {\r\n                for (var i = 0, n = this._components.length; i < n; i++)\r\n                    this._components[i]._setActiveInScene(true);\r\n            }\r\n            this._onActiveInScene();\r\n            for (i = 0, n = this._children.length; i < n; i++)\r\n                this._children[i]._setBelongScene(scene);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _setUnBelongScene() {\r\n        if (this._scene !== this) { //移除节点本身是scene不继续派发\r\n            this._onInActiveInScene();\r\n            if (this._components) {\r\n                for (var i = 0, n = this._components.length; i < n; i++)\r\n                    this._components[i]._setActiveInScene(false);\r\n            }\r\n            this._scene = null;\r\n            for (i = 0, n = this._children.length; i < n; i++)\r\n                this._children[i]._setUnBelongScene();\r\n        }\r\n    }\r\n    /**\r\n     * 组件被激活后执行，此时所有节点和组件均已创建完毕，次方法只执行一次\r\n     * 此方法为虚方法，使用时重写覆盖即可\r\n     */\r\n    onAwake() {\r\n        //this.name  && trace(\"onAwake node \", this.name);\r\n    }\r\n    /**\r\n     * 组件被启用后执行，比如节点被添加到舞台后\r\n     * 此方法为虚方法，使用时重写覆盖即可\r\n     */\r\n    onEnable() {\r\n        //this.name  && trace(\"onEnable node \", this.name);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _processActive() {\r\n        (this._activeChangeScripts) || (this._activeChangeScripts = []);\r\n        this._activeHierarchy(this._activeChangeScripts); //处理属性,保证属性的正确性和即时性\r\n        this._activeScripts(); //延时处理组件\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _activeHierarchy(activeChangeScripts) {\r\n        this._setBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].ACTIVE_INHIERARCHY, true);\r\n        if (this._components) {\r\n            for (var i = 0, n = this._components.length; i < n; i++) {\r\n                var comp = this._components[i];\r\n                comp._setActive(true);\r\n                (comp._isScript() && comp._enabled) && (activeChangeScripts.push(comp));\r\n            }\r\n        }\r\n        this._onActive();\r\n        for (i = 0, n = this._children.length; i < n; i++) {\r\n            var child = this._children[i];\r\n            (!child._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].NOT_ACTIVE)) && (child._activeHierarchy(activeChangeScripts));\r\n        }\r\n        if (!this._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].AWAKED)) {\r\n            this._setBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].AWAKED, true);\r\n            this.onAwake();\r\n        }\r\n        this.onEnable();\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _activeScripts() {\r\n        for (var i = 0, n = this._activeChangeScripts.length; i < n; i++)\r\n            this._activeChangeScripts[i].onEnable();\r\n        this._activeChangeScripts.length = 0;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _processInActive() {\r\n        (this._activeChangeScripts) || (this._activeChangeScripts = []);\r\n        this._inActiveHierarchy(this._activeChangeScripts); //处理属性,保证属性的正确性和即时性\r\n        this._inActiveScripts(); //延时处理组件\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _inActiveHierarchy(activeChangeScripts) {\r\n        this._onInActive();\r\n        if (this._components) {\r\n            for (var i = 0, n = this._components.length; i < n; i++) {\r\n                var comp = this._components[i];\r\n                comp._setActive(false);\r\n                (comp._isScript() && comp._enabled) && (activeChangeScripts.push(comp));\r\n            }\r\n        }\r\n        this._setBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].ACTIVE_INHIERARCHY, false);\r\n        for (i = 0, n = this._children.length; i < n; i++) {\r\n            var child = this._children[i];\r\n            (child && !child._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].NOT_ACTIVE)) && (child._inActiveHierarchy(activeChangeScripts));\r\n        }\r\n        this.onDisable();\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _inActiveScripts() {\r\n        for (var i = 0, n = this._activeChangeScripts.length; i < n; i++)\r\n            this._activeChangeScripts[i].onDisable();\r\n        this._activeChangeScripts.length = 0;\r\n    }\r\n    /**\r\n     * 组件被禁用时执行，比如从节点从舞台移除后\r\n     * 此方法为虚方法，使用时重写覆盖即可\r\n     */\r\n    onDisable() {\r\n        //trace(\"onDisable node\", this.name);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _onAdded() {\r\n        if (this._activeChangeScripts && this._activeChangeScripts.length !== 0) {\r\n            throw \"Node: can't set the main inActive node active in hierarchy,if the operate is in main inActive node or it's children script's onDisable Event.\";\r\n        }\r\n        else {\r\n            var parentScene = this._parent.scene;\r\n            parentScene && this._setBelongScene(parentScene);\r\n            (this._parent.activeInHierarchy && this.active) && this._processActive();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _onRemoved() {\r\n        if (this._activeChangeScripts && this._activeChangeScripts.length !== 0) {\r\n            throw \"Node: can't set the main active node inActive in hierarchy,if the operate is in main active node or it's children script's onEnable Event.\";\r\n        }\r\n        else {\r\n            (this._parent.activeInHierarchy && this.active) && this._processInActive();\r\n            this._parent.scene && this._setUnBelongScene();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _addComponentInstance(comp) {\r\n        this._components = this._components || [];\r\n        this._components.push(comp);\r\n        comp.owner = this;\r\n        comp._onAdded();\r\n        if (this.activeInHierarchy) {\r\n            comp._setActive(true);\r\n            (comp._isScript() && comp._enabled) && (comp.onEnable());\r\n        }\r\n        this._scene && comp._setActiveInScene(true);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _destroyComponent(comp) {\r\n        if (this._components) {\r\n            for (var i = 0, n = this._components.length; i < n; i++) {\r\n                var item = this._components[i];\r\n                if (item === comp) {\r\n                    item._destroy();\r\n                    this._components.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _destroyAllComponent() {\r\n        if (this._components) {\r\n            for (var i = 0, n = this._components.length; i < n; i++) {\r\n                var item = this._components[i];\r\n                item._destroy();\r\n            }\r\n            this._components.length = 0;\r\n        }\r\n    }\r\n    /**\r\n     * @private 克隆。\r\n     * @param\tdestObject 克隆源。\r\n     */\r\n    _cloneTo(destObject, srcRoot, dstRoot) {\r\n        var destNode = destObject;\r\n        if (this._components) {\r\n            for (var i = 0, n = this._components.length; i < n; i++) {\r\n                var destComponent = destNode.addComponent(this._components[i].constructor);\r\n                this._components[i]._cloneTo(destComponent);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 添加组件实例。\r\n     * @param\tcomp 组件实例。\r\n     * @return\t组件。\r\n     */\r\n    addComponentIntance(comp) {\r\n        if (comp.owner)\r\n            throw \"Node:the component has belong to other node.\";\r\n        if (comp.isSingleton && this.getComponent(comp.constructor))\r\n            throw \"Node:the component is singleton,can't add the second one.\";\r\n        this._addComponentInstance(comp);\r\n        return comp;\r\n    }\r\n    /**\r\n     * 添加组件。\r\n     * @param\ttype 组件类型。\r\n     * @return\t组件。\r\n     */\r\n    addComponent(type) {\r\n        var comp = _utils_Pool__WEBPACK_IMPORTED_MODULE_4__[\"Pool\"].createByClass(type);\r\n        comp._destroyed = false;\r\n        if (comp.isSingleton && this.getComponent(type))\r\n            throw \"无法实例\" + type + \"组件\" + \"，\" + type + \"组件已存在！\";\r\n        this._addComponentInstance(comp);\r\n        return comp;\r\n    }\r\n    /**\r\n     * 获得组件实例，如果没有则返回为null\r\n     * @param\tclas 组建类型\r\n     * @return\t返回组件\r\n     */\r\n    getComponent(clas) {\r\n        if (this._components) {\r\n            for (var i = 0, n = this._components.length; i < n; i++) {\r\n                var comp = this._components[i];\r\n                if (comp instanceof clas)\r\n                    return comp;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * 获得组件实例，如果没有则返回为null\r\n     * @param\tclas 组建类型\r\n     * @return\t返回组件数组\r\n     */\r\n    getComponents(clas) {\r\n        var arr;\r\n        if (this._components) {\r\n            for (var i = 0, n = this._components.length; i < n; i++) {\r\n                var comp = this._components[i];\r\n                if (comp instanceof clas) {\r\n                    arr = arr || [];\r\n                    arr.push(comp);\r\n                }\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n    /**\r\n     * @private\r\n     * 获取timer\r\n     */\r\n    get timer() {\r\n        return this.scene ? this.scene.timer : _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].timer;\r\n    }\r\n}\r\n/**@private */\r\nNode.ARRAY_EMPTY = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/Node.ts?");

/***/ }),

/***/ "./src/core/laya/display/Scene.ts":
/*!****************************************!*\
  !*** ./src/core/laya/display/Scene.ts ***!
  \****************************************/
/*! exports provided: Scene */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Scene\", function() { return Scene; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _Node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././Node */ \"./src/core/laya/display/Node.ts\");\n/* harmony import */ var _Const__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Const */ \"./src/core/laya/Const.ts\");\n/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Sprite */ \"./src/core/laya/display/Sprite.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _net_Loader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../net/Loader */ \"./src/core/laya/net/Loader.ts\");\n/* harmony import */ var _net_SceneLoader__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../net/SceneLoader */ \"./src/core/laya/net/SceneLoader.ts\");\n/* harmony import */ var _resource_Resource__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../resource/Resource */ \"./src/core/laya/resource/Resource.ts\");\n/* harmony import */ var _utils_ClassUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/ClassUtils */ \"./src/core/laya/utils/ClassUtils.ts\");\n/* harmony import */ var _utils_Handler__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/Handler */ \"./src/core/laya/utils/Handler.ts\");\n/* harmony import */ var _utils_SceneUtils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/SceneUtils */ \"./src/core/laya/utils/SceneUtils.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 场景类，负责场景创建，加载，销毁等功能\r\n * 场景被从节点移除后，并不会被自动垃圾机制回收，如果想回收，请调用destroy接口，可以通过unDestroyedScenes属性查看还未被销毁的场景列表\r\n */\r\nclass Scene extends _Sprite__WEBPACK_IMPORTED_MODULE_3__[\"Sprite\"] {\r\n    constructor() {\r\n        super();\r\n        /**场景被关闭后，是否自动销毁（销毁节点和使用到的资源），默认为false*/\r\n        this.autoDestroyAtClosed = false;\r\n        /**场景地址*/\r\n        this.url = null;\r\n        /**@private */\r\n        this._viewCreated = false;\r\n        /**@private */\r\n        this._$componentType = \"Scene\";\r\n        this._setBit(_Const__WEBPACK_IMPORTED_MODULE_2__[\"Const\"].NOT_READY, true);\r\n        Scene.unDestroyedScenes.push(this);\r\n        this._scene = this;\r\n        this.createChildren();\r\n    }\r\n    /**\r\n     * @private 兼容老项目\r\n     */\r\n    createChildren() {\r\n    }\r\n    /**\r\n     * @private 兼容老项目\r\n     * 装载场景视图。用于加载模式。\r\n     * @param path 场景地址。\r\n     */\r\n    loadScene(path) {\r\n        var url = path.indexOf(\".\") > -1 ? path : path + \".scene\";\r\n        var view = _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].loader.getRes(url);\r\n        if (view) {\r\n            this.createView(view);\r\n        }\r\n        else {\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].loader.resetProgress();\r\n            var loader = new _net_SceneLoader__WEBPACK_IMPORTED_MODULE_6__[\"SceneLoader\"]();\r\n            loader.on(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].COMPLETE, this, this._onSceneLoaded, [url]);\r\n            loader.load(url);\r\n            //Laya.loader.load(url, Handler.create(this, createView), null, Loader.JSON);\r\n        }\r\n    }\r\n    _onSceneLoaded(url) {\r\n        this.createView(_net_Loader__WEBPACK_IMPORTED_MODULE_5__[\"Loader\"].getRes(url));\r\n    }\r\n    /**\r\n     * @private 兼容老项目\r\n     * 通过视图数据创建视图。\r\n     * @param uiView 视图数据信息。\r\n     */\r\n    createView(view) {\r\n        if (view && !this._viewCreated) {\r\n            this._viewCreated = true;\r\n            _utils_SceneUtils__WEBPACK_IMPORTED_MODULE_10__[\"SceneUtils\"].createByData(this, view);\r\n        }\r\n    }\r\n    /**\r\n     * 根据IDE内的节点id，获得节点实例\r\n     */\r\n    getNodeByID(id) {\r\n        if (this._idMap)\r\n            return this._idMap[id];\r\n        return null;\r\n    }\r\n    /**\r\n     * 打开场景。【注意】被关闭的场景，如果没有设置autoDestroyAtRemoved=true，则资源可能不能被回收，需要自己手动回收\r\n     * @param\tcloseOther\t是否关闭其他场景，默认为true（可选）\r\n     * @param\tparam\t\t打开页面的参数，会传递给onOpened方法（可选）\r\n     */\r\n    open(closeOther = true, param = null) {\r\n        if (closeOther)\r\n            Scene.closeAll();\r\n        Scene.root.addChild(this);\r\n        this.onOpened(param);\r\n    }\r\n    /**场景打开完成后，调用此方法（如果有弹出动画，则在动画完成后执行）*/\r\n    onOpened(param) {\r\n        //trace(\"onOpened\");\r\n    }\r\n    /**\r\n     * 关闭场景\r\n     * 【注意】被关闭的场景，如果没有设置autoDestroyAtRemoved=true，则资源可能不能被回收，需要自己手动回收\r\n     * @param type 关闭的原因，会传递给onClosed函数\r\n     */\r\n    close(type = null) {\r\n        this.onClosed(type);\r\n        if (this.autoDestroyAtClosed)\r\n            this.destroy();\r\n        else\r\n            this.removeSelf();\r\n    }\r\n    /**关闭完成后，调用此方法（如果有关闭动画，则在动画完成后执行）\r\n     * @param type 如果是点击默认关闭按钮触发，则传入关闭按钮的名字(name)，否则为null。\r\n     */\r\n    onClosed(type = null) {\r\n        //trace(\"onClosed\");\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ destroy(destroyChild = true) {\r\n        this._idMap = null;\r\n        super.destroy(destroyChild);\r\n        var list = Scene.unDestroyedScenes;\r\n        for (var i = list.length - 1; i > -1; i--) {\r\n            if (list[i] === this) {\r\n                list.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ set scaleX(value) {\r\n        if (super.scaleX == value)\r\n            return;\r\n        super.scaleX = value;\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].RESIZE);\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ set scaleY(value) {\r\n        if (super.scaleY == value)\r\n            return;\r\n        super.scaleY = value;\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].RESIZE);\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ get width() {\r\n        if (this._width)\r\n            return this._width;\r\n        var max = 0;\r\n        for (var i = this.numChildren - 1; i > -1; i--) {\r\n            var comp = this.getChildAt(i);\r\n            if (comp._visible) {\r\n                max = Math.max(comp._x + comp.width * comp.scaleX, max);\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ set width(value) {\r\n        if (super.width == value)\r\n            return;\r\n        super.width = value;\r\n        this.callLater(this._sizeChanged);\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ get height() {\r\n        if (this._height)\r\n            return this._height;\r\n        var max = 0;\r\n        for (var i = this.numChildren - 1; i > -1; i--) {\r\n            var comp = this.getChildAt(i);\r\n            if (comp._visible) {\r\n                max = Math.max(comp._y + comp.height * comp.scaleY, max);\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ set height(value) {\r\n        if (super.height == value)\r\n            return;\r\n        super.height = value;\r\n        this.callLater(this._sizeChanged);\r\n    }\r\n    /**@private */\r\n    _sizeChanged() {\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].RESIZE);\r\n    }\r\n    //////////////////////////////////////静态方法//////////////////////////////////////////\r\n    /**获取场景根容器*/\r\n    static get root() {\r\n        if (!Scene._root) {\r\n            Scene._root = _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.addChild(new _Sprite__WEBPACK_IMPORTED_MODULE_3__[\"Sprite\"]());\r\n            Scene._root.name = \"root\";\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.on(\"resize\", null, resize);\r\n            function resize() {\r\n                Scene._root.size(_Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.width, _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.height);\r\n                Scene._root.event(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].RESIZE);\r\n            }\r\n            resize();\r\n        }\r\n        return Scene._root;\r\n    }\r\n    /**场景时钟*/\r\n    /*override*/ get timer() {\r\n        return this._timer || _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].timer;\r\n    }\r\n    set timer(value) {\r\n        this._timer = value;\r\n    }\r\n    /**\r\n     * 加载场景及场景使用到的资源\r\n     * @param\turl\t\t\t场景地址\r\n     * @param\tcomplete\t加载完成回调，返回场景实例（可选）\r\n     * @param\tprogress\t加载进度回调（可选）\r\n     */\r\n    static load(url, complete = null, progress = null) {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].loader.resetProgress();\r\n        var loader = new _net_SceneLoader__WEBPACK_IMPORTED_MODULE_6__[\"SceneLoader\"]();\r\n        loader.on(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].PROGRESS, null, onProgress);\r\n        loader.once(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].COMPLETE, null, create);\r\n        loader.load(url);\r\n        function onProgress(value) {\r\n            if (Scene._loadPage)\r\n                Scene._loadPage.event(\"progress\", value);\r\n            progress && progress.runWith(value);\r\n        }\r\n        function create() {\r\n            loader.off(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].PROGRESS, null, onProgress);\r\n            var obj = _net_Loader__WEBPACK_IMPORTED_MODULE_5__[\"Loader\"].getRes(url);\r\n            if (!obj)\r\n                throw \"Can not find scene:\" + url;\r\n            if (!obj.props)\r\n                throw \"Scene data is error:\" + url;\r\n            var runtime = obj.props.runtime ? obj.props.runtime : obj.type;\r\n            var clas = _utils_ClassUtils__WEBPACK_IMPORTED_MODULE_8__[\"ClassUtils\"].getClass(runtime);\r\n            if (obj.props.renderType == \"instance\") {\r\n                var scene = clas.instance || (clas.instance = new clas());\r\n            }\r\n            else {\r\n                scene = new clas();\r\n            }\r\n            if (scene && scene instanceof _Node__WEBPACK_IMPORTED_MODULE_1__[\"Node\"]) {\r\n                scene.url = url;\r\n                if (!scene._getBit(_Const__WEBPACK_IMPORTED_MODULE_2__[\"Const\"].NOT_READY)) {\r\n                    complete && complete.runWith(scene);\r\n                }\r\n                else {\r\n                    scene.on(\"onViewCreated\", null, function () {\r\n                        complete && complete.runWith(scene);\r\n                    });\r\n                    scene.createView(obj);\r\n                }\r\n                Scene.hideLoadingPage();\r\n            }\r\n            else {\r\n                throw \"Can not find scene:\" + runtime;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 加载并打开场景\r\n     * @param\turl\t\t\t场景地址\r\n     * @param\tcloseOther\t是否关闭其他场景，默认为true（可选），【注意】被关闭的场景，如果没有设置autoDestroyAtRemoved=true，则资源可能不能被回收，需要自己手动回收\r\n     * @param\tparam\t\t打开页面的参数，会传递给onOpened方法（可选）\r\n     * @param\tcomplete\t打开完成回调，返回场景实例（可选）\r\n     * @param\tprogress\t加载进度回调（可选）\r\n     */\r\n    static open(url, closeOther = true, param = null, complete = null, progress = null) {\r\n        //兼容处理\r\n        if (param instanceof _utils_Handler__WEBPACK_IMPORTED_MODULE_9__[\"Handler\"]) {\r\n            var temp = complete;\r\n            complete = param;\r\n            param = temp;\r\n        }\r\n        Scene.showLoadingPage();\r\n        Scene.load(url, _utils_Handler__WEBPACK_IMPORTED_MODULE_9__[\"Handler\"].create(null, this._onSceneLoaded, [closeOther, complete, param]), progress);\r\n    }\r\n    /**@private */\r\n    static _onSceneLoaded(closeOther, complete, param, scene) {\r\n        scene.open(closeOther, param);\r\n        if (complete)\r\n            complete.runWith(scene);\r\n    }\r\n    /**\r\n     * 根据地址，关闭场景（包括对话框）\r\n     * @param\turl\t\t场景地址\r\n     * @param\tname\t如果name不为空，name必须相同才能关闭\r\n     * @return\t返回是否关闭成功，如果url找不到，则不成功\r\n     */\r\n    static close(url, name = \"\") {\r\n        var flag = false;\r\n        var list = Scene.unDestroyedScenes;\r\n        for (var i = 0, n = list.length; i < n; i++) {\r\n            var scene = list[i];\r\n            if (scene && scene.parent && scene.url === url && scene.name == name) {\r\n                scene.close();\r\n                flag = true;\r\n            }\r\n        }\r\n        return flag;\r\n    }\r\n    /**\r\n     * 关闭所有场景，不包括对话框，如果关闭对话框，请使用Dialog.closeAll()\r\n     * 【注意】被关闭的场景，如果没有设置autoDestroyAtRemoved=true，则资源可能不能被回收，需要自己手动回收\r\n     */\r\n    static closeAll() {\r\n        var root = Scene.root;\r\n        for (var i = 0, n = root.numChildren; i < n; i++) {\r\n            var scene = (root.getChildAt(0));\r\n            if (scene instanceof Scene)\r\n                scene.close();\r\n            else\r\n                scene.removeSelf();\r\n        }\r\n    }\r\n    /**\r\n     * 根据地址，销毁场景（包括对话框）\r\n     * @param\turl\t\t场景地址\r\n     * @param\tname\t如果name不为空，name必须相同才能关闭\r\n     * @return\t返回是否销毁成功，如果url找不到，则不成功\r\n     */\r\n    static destroy(url, name = \"\") {\r\n        var flag = false;\r\n        var list = Scene.unDestroyedScenes;\r\n        for (var i = 0, n = list.length; i < n; i++) {\r\n            var scene = list[i];\r\n            if (scene.url === url && scene.name == name) {\r\n                scene.destroy();\r\n                flag = true;\r\n            }\r\n        }\r\n        return flag;\r\n    }\r\n    /**\r\n     * 销毁当前没有被使用的资源,该函数会忽略lock=true的资源。\r\n     */\r\n    static gc() {\r\n        _resource_Resource__WEBPACK_IMPORTED_MODULE_7__[\"Resource\"].destroyUnusedResources();\r\n    }\r\n    /**\r\n     * 设置loading界面，引擎会在调用open方法后，延迟打开loading界面，在页面添加到舞台之后，关闭loading界面\r\n     * @param\tloadPage \tload界面实例\r\n     */\r\n    static setLoadingPage(loadPage) {\r\n        if (Scene._loadPage != loadPage) {\r\n            Scene._loadPage = loadPage;\r\n        }\r\n    }\r\n    /**\r\n     * 显示loading界面\r\n     * @param\tparam 打开参数，如果是scene，则会传递给onOpened方法\r\n     * @param\tdelay 延迟打开时间，默认500毫秒\r\n     */\r\n    static showLoadingPage(param = null, delay = 500) {\r\n        if (Scene._loadPage) {\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].systemTimer.clear(null, Scene._showLoading);\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].systemTimer.clear(null, Scene._hideLoading);\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].systemTimer.once(delay, null, Scene._showLoading, [param], false);\r\n        }\r\n    }\r\n    static _showLoading(param) {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.addChild(Scene._loadPage);\r\n        Scene._loadPage.onOpened(param);\r\n    }\r\n    static _hideLoading() {\r\n        Scene._loadPage.close();\r\n    }\r\n    /**\r\n     * 隐藏loading界面\r\n     * @param\tdelay 延迟关闭时间，默认500毫秒\r\n     */\r\n    static hideLoadingPage(delay = 500) {\r\n        if (Scene._loadPage) {\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].systemTimer.clear(null, Scene._showLoading);\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].systemTimer.clear(null, Scene._hideLoading);\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].systemTimer.once(delay, null, Scene._hideLoading);\r\n        }\r\n    }\r\n}\r\n/**创建后，还未被销毁的场景列表，方便查看还未被销毁的场景列表，方便内存管理，本属性只读，请不要直接修改*/\r\nScene.unDestroyedScenes = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/Scene.ts?");

/***/ }),

/***/ "./src/core/laya/display/Sprite.ts":
/*!*****************************************!*\
  !*** ./src/core/laya/display/Sprite.ts ***!
  \*****************************************/
/*! exports provided: Sprite */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Sprite\", function() { return Sprite; });\n/* harmony import */ var _Node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Node */ \"./src/core/laya/display/Node.ts\");\n/* harmony import */ var _SpriteConst__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././SpriteConst */ \"./src/core/laya/display/SpriteConst.ts\");\n/* harmony import */ var _Graphics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ././Graphics */ \"./src/core/laya/display/Graphics.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _Const__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Const */ \"./src/core/laya/Const.ts\");\n/* harmony import */ var _css_BoundsStyle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./css/BoundsStyle */ \"./src/core/laya/display/css/BoundsStyle.ts\");\n/* harmony import */ var _css_CacheStyle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./css/CacheStyle */ \"./src/core/laya/display/css/CacheStyle.ts\");\n/* harmony import */ var _css_SpriteStyle__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./css/SpriteStyle */ \"./src/core/laya/display/css/SpriteStyle.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _events_MouseManager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../events/MouseManager */ \"./src/core/laya/events/MouseManager.ts\");\n/* harmony import */ var _filters_ColorFilter__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../filters/ColorFilter */ \"./src/core/laya/filters/ColorFilter.ts\");\n/* harmony import */ var _filters_Filter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../filters/Filter */ \"./src/core/laya/filters/Filter.ts\");\n/* harmony import */ var _maths_GrahamScan__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../maths/GrahamScan */ \"./src/core/laya/maths/GrahamScan.ts\");\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n/* harmony import */ var _maths_Point__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../maths/Point */ \"./src/core/laya/maths/Point.ts\");\n/* harmony import */ var _maths_Rectangle__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../maths/Rectangle */ \"./src/core/laya/maths/Rectangle.ts\");\n/* harmony import */ var _net_Loader__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../net/Loader */ \"./src/core/laya/net/Loader.ts\");\n/* harmony import */ var _renders_RenderSprite__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../renders/RenderSprite */ \"./src/core/laya/renders/RenderSprite.ts\");\n/* harmony import */ var _resource_Texture__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../resource/Texture */ \"./src/core/laya/resource/Texture.ts\");\n/* harmony import */ var _utils_Dragging__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../utils/Dragging */ \"./src/core/laya/utils/Dragging.ts\");\n/* harmony import */ var _utils_RunDriver__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../utils/RunDriver */ \"./src/core/laya/utils/RunDriver.ts\");\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../utils/Utils */ \"./src/core/laya/utils/Utils.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**在显示对象上按下后调度。\r\n * @eventType Event.MOUSE_DOWN\r\n * */\r\n/*[Event(name = \"mousedown\", type = \"laya.events.Event\")]*/\r\n/**在显示对象抬起后调度。\r\n * @eventType Event.MOUSE_UP\r\n * */\r\n/*[Event(name = \"mouseup\", type = \"laya.events.Event\")]*/\r\n/**鼠标在对象身上进行移动后调度\r\n * @eventType Event.MOUSE_MOVE\r\n * */\r\n/*[Event(name = \"mousemove\", type = \"laya.events.Event\")]*/\r\n/**鼠标经过对象后调度。\r\n * @eventType Event.MOUSE_OVER\r\n * */\r\n/*[Event(name = \"mouseover\", type = \"laya.events.Event\")]*/\r\n/**鼠标离开对象后调度。\r\n * @eventType Event.MOUSE_OUT\r\n * */\r\n/*[Event(name = \"mouseout\", type = \"laya.events.Event\")]*/\r\n/**鼠标点击对象后调度。\r\n * @eventType Event.CLICK\r\n * */\r\n/*[Event(name = \"click\", type = \"laya.events.Event\")]*/\r\n/**开始拖动后调度。\r\n * @eventType Event.DRAG_START\r\n * */\r\n/*[Event(name = \"dragstart\", type = \"laya.events.Event\")]*/\r\n/**拖动中调度。\r\n * @eventType Event.DRAG_MOVE\r\n * */\r\n/*[Event(name = \"dragmove\", type = \"laya.events.Event\")]*/\r\n/**拖动结束后调度。\r\n * @eventType Event.DRAG_END\r\n * */\r\n/*[Event(name = \"dragend\", type = \"laya.events.Event\")]*/\r\n/**\r\n * <p> <code>Sprite</code> 是基本的显示图形的显示列表节点。 <code>Sprite</code> 默认没有宽高，默认不接受鼠标事件。通过 <code>graphics</code> 可以绘制图片或者矢量图，支持旋转，缩放，位移等操作。<code>Sprite</code>同时也是容器类，可用来添加多个子节点。</p>\r\n * <p>注意： <code>Sprite</code> 默认没有宽高，可以通过<code>getBounds</code>函数获取；也可手动设置宽高；还可以设置<code>autoSize=true</code>，然后再获取宽高。<code>Sprite</code>的宽高一般用于进行碰撞检测和排版，并不影响显示图像大小，如果需要更改显示图像大小，请使用 <code>scaleX</code> ， <code>scaleY</code> ， <code>scale</code>。</p>\r\n * <p> <code>Sprite</code> 默认不接受鼠标事件，即<code>mouseEnabled=false</code>，但是只要对其监听任意鼠标事件，会自动打开自己以及所有父对象的<code>mouseEnabled=true</code>。所以一般也无需手动设置<code>mouseEnabled</code>。</p>\r\n * <p>LayaAir引擎API设计精简巧妙。核心显示类只有一个<code>Sprite</code>。<code>Sprite</code>针对不同的情况做了渲染优化，所以保证一个类实现丰富功能的同时，又达到高性能。</p>\r\n *\r\n * @example <caption>创建了一个 <code>Sprite</code> 实例。</caption>\r\n * package\r\n * {\r\n * \timport laya.display.Sprite;\r\n * \timport laya.events.Event;\r\n *\r\n * \tpublic class Sprite_Example\r\n * \t{\r\n * \t\tprivate var sprite:Sprite;\r\n * \t\tprivate var shape:Sprite\r\n * \t\tpublic function Sprite_Example()\r\n * \t\t{\r\n * \t\t\tLaya.init(640, 800);//设置游戏画布宽高、渲染模式。\r\n * \t\t\tLaya.stage.bgColor = \"#efefef\";//设置画布的背景颜色。\r\n * \t\t\tonInit();\r\n * \t\t}\r\n * \t\tprivate function onInit():void\r\n * \t\t{\r\n * \t\t\tsprite = new Sprite();//创建一个 Sprite 类的实例对象 sprite 。\r\n * \t\t\tsprite.loadImage(\"resource/ui/bg.png\");//加载并显示图片。\r\n * \t\t\tsprite.x = 200;//设置 sprite 对象相对于父容器的水平方向坐标值。\r\n * \t\t\tsprite.y = 200;//设置 sprite 对象相对于父容器的垂直方向坐标值。\r\n * \t\t\tsprite.pivotX = 0;//设置 sprite 对象的水平方法轴心点坐标。\r\n * \t\t\tsprite.pivotY = 0;//设置 sprite 对象的垂直方法轴心点坐标。\r\n * \t\t\tLaya.stage.addChild(sprite);//将此 sprite 对象添加到显示列表。\r\n * \t\t\tsprite.on(Event.CLICK, this, onClickSprite);//给 sprite 对象添加点击事件侦听。\r\n\r\n * \t\t\tshape = new Sprite();//创建一个 Sprite 类的实例对象 sprite 。\r\n * \t\t\tshape.graphics.drawRect(0, 0, 100, 100, \"#ccff00\", \"#ff0000\", 2);//绘制一个有边框的填充矩形。\r\n * \t\t\tshape.x = 400;//设置 shape 对象相对于父容器的水平方向坐标值。\r\n * \t\t\tshape.y = 200;//设置 shape 对象相对于父容器的垂直方向坐标值。\r\n * \t\t\tshape.width = 100;//设置 shape 对象的宽度。\r\n * \t\t\tshape.height = 100;//设置 shape 对象的高度。\r\n * \t\t\tshape.pivotX = 50;//设置 shape 对象的水平方法轴心点坐标。\r\n * \t\t\tshape.pivotY = 50;//设置 shape 对象的垂直方法轴心点坐标。\r\n * \t\t\tLaya.stage.addChild(shape);//将此 shape 对象添加到显示列表。\r\n * \t\t\tshape.on(Event.CLICK, this, onClickShape);//给 shape 对象添加点击事件侦听。\r\n * \t\t}\r\n * \t\tprivate function onClickSprite():void\r\n * \t\t{\r\n * \t\t\ttrace(\"点击 sprite 对象。\");\r\n * \t\t\tsprite.rotation += 5;//旋转 sprite 对象。\r\n * \t\t}\r\n * \t\tprivate function onClickShape():void\r\n * \t\t{\r\n * \t\t\ttrace(\"点击 shape 对象。\");\r\n * \t\t\tshape.rotation += 5;//旋转 shape 对象。\r\n * \t\t}\r\n * \t}\r\n * }\r\n *\r\n * @example\r\n * var sprite;\r\n * var shape;\r\n * Sprite_Example();\r\n * function Sprite_Example()\r\n * {\r\n *     Laya.init(640, 800);//设置游戏画布宽高、渲染模式。\r\n *     Laya.stage.bgColor = \"#efefef\";//设置画布的背景颜色。\r\n *     onInit();\r\n * }\r\n * function onInit()\r\n * {\r\n *     sprite = new laya.display.Sprite();//创建一个 Sprite 类的实例对象 sprite 。\r\n *     sprite.loadImage(\"resource/ui/bg.png\");//加载并显示图片。\r\n *     sprite.x = 200;//设置 sprite 对象相对于父容器的水平方向坐标值。\r\n *     sprite.y = 200;//设置 sprite 对象相对于父容器的垂直方向坐标值。\r\n *     sprite.pivotX = 0;//设置 sprite 对象的水平方法轴心点坐标。\r\n *     sprite.pivotY = 0;//设置 sprite 对象的垂直方法轴心点坐标。\r\n *     Laya.stage.addChild(sprite);//将此 sprite 对象添加到显示列表。\r\n *     sprite.on(Event.CLICK, this, onClickSprite);//给 sprite 对象添加点击事件侦听。\r\n\r\n *     shape = new laya.display.Sprite();//创建一个 Sprite 类的实例对象 sprite 。\r\n *     shape.graphics.drawRect(0, 0, 100, 100, \"#ccff00\", \"#ff0000\", 2);//绘制一个有边框的填充矩形。\r\n *     shape.x = 400;//设置 shape 对象相对于父容器的水平方向坐标值。\r\n *     shape.y = 200;//设置 shape 对象相对于父容器的垂直方向坐标值。\r\n *     shape.width = 100;//设置 shape 对象的宽度。\r\n *     shape.height = 100;//设置 shape 对象的高度。\r\n *     shape.pivotX = 50;//设置 shape 对象的水平方法轴心点坐标。\r\n *     shape.pivotY = 50;//设置 shape 对象的垂直方法轴心点坐标。\r\n *     Laya.stage.addChild(shape);//将此 shape 对象添加到显示列表。\r\n *     shape.on(laya.events.Event.CLICK, this, onClickShape);//给 shape 对象添加点击事件侦听。\r\n * }\r\n * function onClickSprite()\r\n * {\r\n *     console.log(\"点击 sprite 对象。\");\r\n *     sprite.rotation += 5;//旋转 sprite 对象。\r\n * }\r\n * function onClickShape()\r\n * {\r\n *     console.log(\"点击 shape 对象。\");\r\n *     shape.rotation += 5;//旋转 shape 对象。\r\n * }\r\n *\r\n * @example\r\n * import Sprite = laya.display.Sprite;\r\n * class Sprite_Example {\r\n *     private sprite: Sprite;\r\n *     private shape: Sprite\r\n *     public Sprite_Example() {\r\n *         Laya.init(640, 800);//设置游戏画布宽高、渲染模式。\r\n *         Laya.stage.bgColor = \"#efefef\";//设置画布的背景颜色。\r\n *         this.onInit();\r\n *     }\r\n *     private onInit(): void {\r\n *         this.sprite = new Sprite();//创建一个 Sprite 类的实例对象 sprite 。\r\n *         this.sprite.loadImage(\"resource/ui/bg.png\");//加载并显示图片。\r\n *         this.sprite.x = 200;//设置 sprite 对象相对于父容器的水平方向坐标值。\r\n *         this.sprite.y = 200;//设置 sprite 对象相对于父容器的垂直方向坐标值。\r\n *         this.sprite.pivotX = 0;//设置 sprite 对象的水平方法轴心点坐标。\r\n *         this.sprite.pivotY = 0;//设置 sprite 对象的垂直方法轴心点坐标。\r\n *         Laya.stage.addChild(this.sprite);//将此 sprite 对象添加到显示列表。\r\n *         this.sprite.on(laya.events.Event.CLICK, this, this.onClickSprite);//给 sprite 对象添加点击事件侦听。\r\n\r\n *         this.shape = new Sprite();//创建一个 Sprite 类的实例对象 sprite 。\r\n *         this.shape.graphics.drawRect(0, 0, 100, 100, \"#ccff00\", \"#ff0000\", 2);//绘制一个有边框的填充矩形。\r\n *         this.shape.x = 400;//设置 shape 对象相对于父容器的水平方向坐标值。\r\n *         this.shape.y = 200;//设置 shape 对象相对于父容器的垂直方向坐标值。\r\n *         this.shape.width = 100;//设置 shape 对象的宽度。\r\n *         this.shape.height = 100;//设置 shape 对象的高度。\r\n *         this.shape.pivotX = 50;//设置 shape 对象的水平方法轴心点坐标。\r\n *         this.shape.pivotY = 50;//设置 shape 对象的垂直方法轴心点坐标。\r\n *         Laya.stage.addChild(this.shape);//将此 shape 对象添加到显示列表。\r\n *         this.shape.on(laya.events.Event.CLICK, this, this.onClickShape);//给 shape 对象添加点击事件侦听。\r\n *     }\r\n *     private onClickSprite(): void {\r\n *         console.log(\"点击 sprite 对象。\");\r\n *         this.sprite.rotation += 5;//旋转 sprite 对象。\r\n *     }\r\n *     private onClickShape(): void {\r\n *         console.log(\"点击 shape 对象。\");\r\n *         this.shape.rotation += 5;//旋转 shape 对象。\r\n *     }\r\n * }\r\n */\r\nclass Sprite extends _Node__WEBPACK_IMPORTED_MODULE_0__[\"Node\"] {\r\n    constructor() {\r\n        super();\r\n        /**@private */\r\n        this._x = 0;\r\n        /**@private */\r\n        this._y = 0;\r\n        /**@private */\r\n        this._width = 0;\r\n        /**@private */\r\n        this._height = 0;\r\n        /**@private */\r\n        this._visible = true;\r\n        /**@private 鼠标状态，0:auto,1:mouseEnabled=false,2:mouseEnabled=true。*/\r\n        this._mouseState = 0;\r\n        /**@private z排序，数值越大越靠前。*/\r\n        this._zOrder = 0;\r\n        /**@private */\r\n        this._renderType = 0;\r\n        /**@private */\r\n        this._transform = null;\r\n        /**@private */\r\n        this._tfChanged = false;\r\n        /**@private */\r\n        this._repaint = _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_NONE;\r\n        /**@private */\r\n        this._texture = null;\r\n        //以下变量为系统调用，请不要直接使用\r\n        /**@private */\r\n        this._style = _css_SpriteStyle__WEBPACK_IMPORTED_MODULE_7__[\"SpriteStyle\"].EMPTY;\r\n        /**@private */\r\n        this._cacheStyle = _css_CacheStyle__WEBPACK_IMPORTED_MODULE_6__[\"CacheStyle\"].EMPTY;\r\n        /**@private */\r\n        this._boundStyle = null;\r\n        /**@private */\r\n        this._graphics = null;\r\n        /**\r\n         * <p>鼠标事件与此对象的碰撞检测是否可穿透。碰撞检测发生在鼠标事件的捕获阶段，此阶段引擎会从stage开始递归检测stage及其子对象，直到找到命中的目标对象或者未命中任何对象。</p>\r\n         * <p>穿透表示鼠标事件发生的位置处于本对象绘图区域内时，才算命中，而与对象宽高和值为Rectangle对象的hitArea属性无关。如果sprite.hitArea值是HitArea对象，表示显式声明了此对象的鼠标事件响应区域，而忽略对象的宽高、mouseThrough属性。</p>\r\n         * <p>影响对象鼠标事件响应区域的属性为：width、height、hitArea，优先级顺序为：hitArea(type:HitArea)>hitArea(type:Rectangle)>width/height。</p>\r\n         * @default false\t不可穿透，此对象的鼠标响应区域由width、height、hitArea属性决定。</p>\r\n         */\r\n        this.mouseThrough = false;\r\n        /**\r\n         * <p>指定是否自动计算宽高数据。默认值为 false 。</p>\r\n         * <p>Sprite宽高默认为0，并且不会随着绘制内容的变化而变化，如果想根据绘制内容获取宽高，可以设置本属性为true，或者通过getBounds方法获取。设置为true，对性能有一定影响。</p>\r\n         */\r\n        this.autoSize = false;\r\n        /**\r\n         * <p>指定鼠标事件检测是优先检测自身，还是优先检测其子对象。鼠标事件检测发生在鼠标事件的捕获阶段，此阶段引擎会从stage开始递归检测stage及其子对象，直到找到命中的目标对象或者未命中任何对象。</p>\r\n         * <p>如果为false，优先检测子对象，当有子对象被命中时，中断检测，获得命中目标。如果未命中任何子对象，最后再检测此对象；如果为true，则优先检测本对象，如果本对象没有被命中，直接中断检测，表示没有命中目标；如果本对象被命中，则进一步递归检测其子对象，以确认最终的命中目标。</p>\r\n         * <p>合理使用本属性，能减少鼠标事件检测的节点，提高性能。可以设置为true的情况：开发者并不关心此节点的子节点的鼠标事件检测结果，也就是以此节点作为其子节点的鼠标事件检测依据。</p>\r\n         * <p>Stage对象和UI的View组件默认为true。</p>\r\n         * @default false\t优先检测此对象的子对象，当递归检测完所有子对象后，仍然没有找到目标对象，最后再检测此对象。\r\n         */\r\n        this.hitTestPrior = false;\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ destroy(destroyChild = true) {\r\n        super.destroy(destroyChild);\r\n        this._style && this._style.recover();\r\n        this._cacheStyle && this._cacheStyle.recover();\r\n        this._boundStyle && this._boundStyle.recover();\r\n        this._style = null;\r\n        this._cacheStyle = null;\r\n        this._boundStyle = null;\r\n        this._transform = null;\r\n        if (this._graphics && this._graphics.autoDestroy) {\r\n            this._graphics.destroy();\r\n        }\r\n        this._graphics = null;\r\n        this.texture = null;\r\n    }\r\n    /**根据zOrder进行重新排序。*/\r\n    updateZOrder() {\r\n        _utils_Utils__WEBPACK_IMPORTED_MODULE_21__[\"Utils\"].updateOrder(this._children) && this.repaint();\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _getBoundsStyle() {\r\n        if (!this._boundStyle)\r\n            this._boundStyle = _css_BoundsStyle__WEBPACK_IMPORTED_MODULE_5__[\"BoundsStyle\"].create();\r\n        return this._boundStyle;\r\n    }\r\n    /**@private */\r\n    _setCustomRender() {\r\n    }\r\n    /**\r\n     * 设置是否开启自定义渲染，只有开启自定义渲染，才能使用customRender函数渲染。\r\n     */\r\n    set customRenderEnable(b) {\r\n        if (b) {\r\n            this._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].CUSTOM;\r\n            this._setRenderType(this._renderType);\r\n            this._setCustomRender();\r\n        }\r\n    }\r\n    /**\r\n     * <p>指定显示对象是否缓存为静态图像，cacheAs时，子对象发生变化，会自动重新缓存，同时也可以手动调用reCache方法更新缓存。</p>\r\n     * <p>建议把不经常变化的“复杂内容”缓存为静态图像，能极大提高渲染性能。cacheAs有\"none\"，\"normal\"和\"bitmap\"三个值可选。\r\n     * <li>默认为\"none\"，不做任何缓存。</li>\r\n     * <li>当值为\"normal\"时，canvas模式下进行画布缓存，webgl模式下进行命令缓存。</li>\r\n     * <li>当值为\"bitmap\"时，canvas模式下进行依然是画布缓存，webgl模式下使用renderTarget缓存。</li></p>\r\n     * <p>webgl下renderTarget缓存模式缺点：会额外创建renderTarget对象，增加内存开销，缓存面积有最大2048限制，不断重绘时会增加CPU开销。优点：大幅减少drawcall，渲染性能最高。\r\n     * webgl下命令缓存模式缺点：只会减少节点遍历及命令组织，不会减少drawcall数，性能中等。优点：没有额外内存开销，无需renderTarget支持。</p>\r\n     */\r\n    get cacheAs() {\r\n        return this._cacheStyle.cacheAs;\r\n    }\r\n    /**@private */\r\n    _setCacheAs(value) {\r\n        //_dataf32[SpriteConst.POSCACHE] = value == \"bitmap\"?2:(value == \"normal\"?1:0);\r\n    }\r\n    set cacheAs(value) {\r\n        if (value === this._cacheStyle.userSetCache)\r\n            return;\r\n        if (this.mask && value === 'normal')\r\n            return;\r\n        this._setCacheAs(value);\r\n        this._getCacheStyle().userSetCache = value;\r\n        this._checkCanvasEnable();\r\n        this.repaint();\r\n    }\r\n    /**\r\n     * 更新_cnavas相关的状态\r\n     */\r\n    _checkCanvasEnable() {\r\n        var tEnable = this._cacheStyle.needEnableCanvasRender();\r\n        this._getCacheStyle().enableCanvasRender = tEnable;\r\n        if (tEnable) {\r\n            if (this._cacheStyle.needBitmapCache()) {\r\n                this._cacheStyle.cacheAs = \"bitmap\";\r\n            }\r\n            else {\r\n                this._cacheStyle.cacheAs = this._cacheStyle.userSetCache;\r\n            }\r\n            this._cacheStyle.reCache = true;\r\n            this._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].CANVAS;\r\n        }\r\n        else {\r\n            this._cacheStyle.cacheAs = \"none\";\r\n            this._cacheStyle.releaseContext();\r\n            this._renderType &= ~_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].CANVAS;\r\n        }\r\n        this._setCacheAs(this._cacheStyle.cacheAs);\r\n        this._setRenderType(this._renderType);\r\n    }\r\n    /**设置cacheAs为非空时此值才有效，staticCache=true时，子对象变化时不会自动更新缓存，只能通过调用reCache方法手动刷新。*/\r\n    get staticCache() {\r\n        return this._cacheStyle.staticCache;\r\n    }\r\n    set staticCache(value) {\r\n        this._getCacheStyle().staticCache = value;\r\n        if (!value)\r\n            this.reCache();\r\n    }\r\n    /**在设置cacheAs的情况下，调用此方法会重新刷新缓存。*/\r\n    reCache() {\r\n        this._cacheStyle.reCache = true;\r\n        this._repaint |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_CACHE;\r\n    }\r\n    getRepaint() {\r\n        return this._repaint;\r\n    }\r\n    /**@private */\r\n    _setX(value) {\r\n        this._x = value;\r\n    }\r\n    /**@private */\r\n    _setY(value) {\r\n        this._y = value;\r\n    }\r\n    /**@private */\r\n    _setWidth(texture, value) {\r\n    }\r\n    /**@private */\r\n    _setHeight(texture, value) {\r\n    }\r\n    /**表示显示对象相对于父容器的水平方向坐标值。*/\r\n    get x() {\r\n        return this._x;\r\n    }\r\n    set x(value) {\r\n        if (this.destroyed)\r\n            return;\r\n        if (this._x !== value) {\r\n            this._setX(value);\r\n            //_setTranformChange();\r\n            this.parentRepaint(_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_CACHE);\r\n            var p = this._cacheStyle.maskParent;\r\n            if (p) {\r\n                p.repaint(_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_CACHE);\r\n            }\r\n        }\r\n    }\r\n    /**表示显示对象相对于父容器的垂直方向坐标值。*/\r\n    get y() {\r\n        return this._y;\r\n    }\r\n    set y(value) {\r\n        if (this.destroyed)\r\n            return;\r\n        if (this._y !== value) {\r\n            this._setY(value);\r\n            //_setTranformChange();\r\n            this.parentRepaint(_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_CACHE);\r\n            var p = this._cacheStyle.maskParent;\r\n            if (p) {\r\n                p.repaint(_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_CACHE);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * <p>显示对象的宽度，单位为像素，默认为0。</p>\r\n     * <p>此宽度用于鼠标碰撞检测，并不影响显示对象图像大小。需要对显示对象的图像进行缩放，请使用scale、scaleX、scaleY。</p>\r\n     * <p>可以通过getbounds获取显示对象图像的实际宽度。</p>\r\n     */\r\n    get width() {\r\n        if (!this.autoSize)\r\n            return this._width || (this.texture ? this.texture.width : 0);\r\n        if (this.texture)\r\n            return this.texture.width;\r\n        if (!this._graphics && this._children.length === 0)\r\n            return 0;\r\n        return this.getSelfBounds().width;\r\n    }\r\n    set width(value) {\r\n        if (this._width !== value) {\r\n            this._width = value;\r\n            this._setWidth(this.texture, value);\r\n            this._setTranformChange();\r\n            //repaint();\r\n        }\r\n    }\r\n    // for ts\r\n    set_width(v) {\r\n        this.width = v;\r\n    }\r\n    get_width() {\r\n        return this.width;\r\n    }\r\n    /**\r\n     * <p>显示对象的高度，单位为像素，默认为0。</p>\r\n     * <p>此高度用于鼠标碰撞检测，并不影响显示对象图像大小。需要对显示对象的图像进行缩放，请使用scale、scaleX、scaleY。</p>\r\n     * <p>可以通过getbounds获取显示对象图像的实际高度。</p>\r\n     */\r\n    get height() {\r\n        if (!this.autoSize)\r\n            return this._height || (this.texture ? this.texture.height : 0);\r\n        if (this.texture)\r\n            return this.texture.height;\r\n        if (!this._graphics && this._children.length === 0)\r\n            return 0;\r\n        return this.getSelfBounds().height;\r\n    }\r\n    set height(value) {\r\n        if (this._height !== value) {\r\n            this._height = value;\r\n            this._setHeight(this.texture, value);\r\n            this._setTranformChange();\r\n            //repaint();\r\n        }\r\n    }\r\n    // for ts\r\n    set_height(v) {\r\n        this.height = v;\r\n    }\r\n    get_height() {\r\n        return this.height;\r\n    }\r\n    /**\r\n     * <p>对象的显示宽度（以像素为单位）。</p>\r\n     */\r\n    get displayWidth() {\r\n        return this.width * this.scaleX;\r\n    }\r\n    /**\r\n     * <p>对象的显示高度（以像素为单位）。</p>\r\n     */\r\n    get displayHeight() {\r\n        return this.height * this.scaleY;\r\n    }\r\n    /**\r\n     * 设置对象bounds大小，如果有设置，则不再通过getBounds计算，合理使用能提高性能。\r\n     * @param\tbound bounds矩形区域\r\n     */\r\n    setSelfBounds(bound) {\r\n        this._getBoundsStyle().userBounds = bound;\r\n    }\r\n    /**\r\n     * <p>获取本对象在父容器坐标系的矩形显示区域。</p>\r\n     * <p><b>注意：</b>计算量较大，尽量少用。</p>\r\n     * @return 矩形区域。\r\n     */\r\n    getBounds() {\r\n        return this._getBoundsStyle().bounds = _maths_Rectangle__WEBPACK_IMPORTED_MODULE_15__[\"Rectangle\"]._getWrapRec(this._boundPointsToParent());\r\n    }\r\n    /**\r\n     * 获取本对象在自己坐标系的矩形显示区域。\r\n     * <p><b>注意：</b>计算量较大，尽量少用。</p>\r\n     * @return 矩形区域。\r\n     */\r\n    getSelfBounds() {\r\n        if (this._boundStyle && this._boundStyle.userBounds)\r\n            return this._boundStyle.userBounds;\r\n        if (!this._graphics && this._children.length === 0 && !this._texture)\r\n            return _maths_Rectangle__WEBPACK_IMPORTED_MODULE_15__[\"Rectangle\"].TEMP.setTo(0, 0, 0, 0);\r\n        //if (_renderType === (SpriteConst.IMAGE | SpriteConst.GRAPHICS)) {\r\n        //_getBoundsStyle();\r\n        //if (!_boundStyle.bounds) _boundStyle.bounds = Rectangle.create();\r\n        //var tDrawCmd:Array = _graphics._one;\r\n        //return _boundStyle.bounds.setTo(tDrawCmd[1], tDrawCmd[2], tDrawCmd[3], tDrawCmd[4]);\r\n        //}\r\n        return this._getBoundsStyle().bounds = _maths_Rectangle__WEBPACK_IMPORTED_MODULE_15__[\"Rectangle\"]._getWrapRec(this._getBoundPointsM(false));\r\n    }\r\n    /**\r\n     * @private\r\n     * 获取本对象在父容器坐标系的显示区域多边形顶点列表。\r\n     * 当显示对象链中有旋转时，返回多边形顶点列表，无旋转时返回矩形的四个顶点。\r\n     * @param ifRotate\t（可选）之前的对象链中是否有旋转。\r\n     * @return 顶点列表。结构：[x1,y1,x2,y2,x3,y3,...]。\r\n     */\r\n    _boundPointsToParent(ifRotate = false) {\r\n        var pX = 0, pY = 0;\r\n        if (this._style) {\r\n            pX = this.pivotX;\r\n            pY = this.pivotY;\r\n            ifRotate = ifRotate || (this._style.rotation !== 0);\r\n            if (this._style.scrollRect) {\r\n                pX += this._style.scrollRect.x;\r\n                pY += this._style.scrollRect.y;\r\n            }\r\n        }\r\n        var pList = this._getBoundPointsM(ifRotate);\r\n        if (!pList || pList.length < 1)\r\n            return pList;\r\n        if (pList.length != 8) {\r\n            pList = ifRotate ? _maths_GrahamScan__WEBPACK_IMPORTED_MODULE_12__[\"GrahamScan\"].scanPList(pList) : _maths_Rectangle__WEBPACK_IMPORTED_MODULE_15__[\"Rectangle\"]._getWrapRec(pList, _maths_Rectangle__WEBPACK_IMPORTED_MODULE_15__[\"Rectangle\"].TEMP)._getBoundPoints();\r\n        }\r\n        if (!this.transform) {\r\n            _utils_Utils__WEBPACK_IMPORTED_MODULE_21__[\"Utils\"].transPointList(pList, this._x - pX, this._y - pY);\r\n            return pList;\r\n        }\r\n        var tPoint = _maths_Point__WEBPACK_IMPORTED_MODULE_14__[\"Point\"].TEMP;\r\n        var i, len = pList.length;\r\n        for (i = 0; i < len; i += 2) {\r\n            tPoint.x = pList[i];\r\n            tPoint.y = pList[i + 1];\r\n            this.toParentPoint(tPoint);\r\n            pList[i] = tPoint.x;\r\n            pList[i + 1] = tPoint.y;\r\n        }\r\n        return pList;\r\n    }\r\n    /**\r\n     * 返回此实例中的绘图对象（ <code>Graphics</code> ）的显示区域，不包括子对象。\r\n     * @param realSize\t（可选）使用图片的真实大小，默认为false\r\n     * @return 一个 Rectangle 对象，表示获取到的显示区域。\r\n     */\r\n    getGraphicBounds(realSize = false) {\r\n        if (!this._graphics)\r\n            return _maths_Rectangle__WEBPACK_IMPORTED_MODULE_15__[\"Rectangle\"].TEMP.setTo(0, 0, 0, 0);\r\n        return this._graphics.getBounds(realSize);\r\n    }\r\n    /**\r\n     * @private\r\n     * 获取自己坐标系的显示区域多边形顶点列表\r\n     * @param ifRotate\t（可选）当前的显示对象链是否由旋转\r\n     * @return 顶点列表。结构：[x1,y1,x2,y2,x3,y3,...]。\r\n     */\r\n    _getBoundPointsM(ifRotate = false) {\r\n        if (this._boundStyle && this._boundStyle.userBounds)\r\n            return this._boundStyle.userBounds._getBoundPoints();\r\n        if (!this._boundStyle)\r\n            this._getBoundsStyle();\r\n        if (!this._boundStyle.temBM)\r\n            this._boundStyle.temBM = [];\r\n        if (this._style.scrollRect) {\r\n            var rst = _utils_Utils__WEBPACK_IMPORTED_MODULE_21__[\"Utils\"].clearArray(this._boundStyle.temBM);\r\n            var rec = _maths_Rectangle__WEBPACK_IMPORTED_MODULE_15__[\"Rectangle\"].TEMP;\r\n            rec.copyFrom(this._style.scrollRect);\r\n            _utils_Utils__WEBPACK_IMPORTED_MODULE_21__[\"Utils\"].concatArray(rst, rec._getBoundPoints());\r\n            return rst;\r\n        }\r\n        var pList;\r\n        if (this._graphics) {\r\n            pList = this._graphics.getBoundPoints();\r\n        }\r\n        else {\r\n            pList = _utils_Utils__WEBPACK_IMPORTED_MODULE_21__[\"Utils\"].clearArray(this._boundStyle.temBM);\r\n            if (this._texture) {\r\n                rec = _maths_Rectangle__WEBPACK_IMPORTED_MODULE_15__[\"Rectangle\"].TEMP;\r\n                rec.setTo(0, 0, this.width || this._texture.width, this.height || this._texture.height);\r\n                _utils_Utils__WEBPACK_IMPORTED_MODULE_21__[\"Utils\"].concatArray(pList, rec._getBoundPoints());\r\n            }\r\n        }\r\n        //处理子对象区域\r\n        var child;\r\n        var cList;\r\n        var __childs;\r\n        __childs = this._children;\r\n        for (var i = 0, n = __childs.length; i < n; i++) {\r\n            //child = getChildAt(i) as Sprite; \r\n            child = __childs[i];\r\n            if (child instanceof Sprite && child._visible === true) {\r\n                cList = child._boundPointsToParent(ifRotate);\r\n                if (cList)\r\n                    pList = pList ? _utils_Utils__WEBPACK_IMPORTED_MODULE_21__[\"Utils\"].concatArray(pList, cList) : cList;\r\n            }\r\n        }\r\n        return pList;\r\n    }\r\n    /**\r\n     * @private\r\n     * 获取cache数据。\r\n     * @return  cache数据 CacheStyle 。\r\n     */\r\n    _getCacheStyle() {\r\n        this._cacheStyle === _css_CacheStyle__WEBPACK_IMPORTED_MODULE_6__[\"CacheStyle\"].EMPTY && (this._cacheStyle = _css_CacheStyle__WEBPACK_IMPORTED_MODULE_6__[\"CacheStyle\"].create());\r\n        return this._cacheStyle;\r\n    }\r\n    /**\r\n     * @private\r\n     * 获取样式。\r\n     * @return  样式 Style 。\r\n     */\r\n    getStyle() {\r\n        this._style === _css_SpriteStyle__WEBPACK_IMPORTED_MODULE_7__[\"SpriteStyle\"].EMPTY && (this._style = _css_SpriteStyle__WEBPACK_IMPORTED_MODULE_7__[\"SpriteStyle\"].create());\r\n        return this._style;\r\n    }\r\n    /**\r\n     * @private\r\n     * 设置样式。\r\n     * @param\tvalue 样式。\r\n     */\r\n    setStyle(value) {\r\n        this._style = value;\r\n    }\r\n    /**X轴缩放值，默认值为1。设置为负数，可以实现水平反转效果，比如scaleX=-1。*/\r\n    get scaleX() {\r\n        return this._style.scaleX;\r\n    }\r\n    set scaleX(value) {\r\n        var style = this.getStyle();\r\n        if (style.scaleX !== value) {\r\n            this._setScaleX(value);\r\n            this._setTranformChange();\r\n        }\r\n    }\r\n    /**@private */\r\n    _setScaleX(value) {\r\n        this._style.scaleX = value;\r\n    }\r\n    /**Y轴缩放值，默认值为1。设置为负数，可以实现垂直反转效果，比如scaleX=-1。*/\r\n    get scaleY() {\r\n        return this._style.scaleY;\r\n    }\r\n    set scaleY(value) {\r\n        var style = this.getStyle();\r\n        if (style.scaleY !== value) {\r\n            this._setScaleY(value);\r\n            this._setTranformChange();\r\n        }\r\n    }\r\n    /**@private */\r\n    _setScaleY(value) {\r\n        this._style.scaleY = value;\r\n    }\r\n    /**旋转角度，默认值为0。以角度为单位。*/\r\n    get rotation() {\r\n        return this._style.rotation;\r\n    }\r\n    set rotation(value) {\r\n        var style = this.getStyle();\r\n        if (style.rotation !== value) {\r\n            this._setRotation(value);\r\n            this._setTranformChange();\r\n        }\r\n    }\r\n    /**@private */\r\n    _setRotation(value) {\r\n        this._style.rotation = value;\r\n    }\r\n    /**水平倾斜角度，默认值为0。以角度为单位。*/\r\n    get skewX() {\r\n        return this._style.skewX;\r\n    }\r\n    set skewX(value) {\r\n        var style = this.getStyle();\r\n        if (style.skewX !== value) {\r\n            this._setSkewX(value);\r\n            this._setTranformChange();\r\n        }\r\n    }\r\n    /**@private */\r\n    _setSkewX(value) {\r\n        this._style.skewX = value;\r\n    }\r\n    /**垂直倾斜角度，默认值为0。以角度为单位。*/\r\n    get skewY() {\r\n        return this._style.skewY;\r\n    }\r\n    set skewY(value) {\r\n        var style = this.getStyle();\r\n        if (style.skewY !== value) {\r\n            this._setSkewY(value);\r\n            this._setTranformChange();\r\n        }\r\n    }\r\n    /**@private */\r\n    _setSkewY(value) {\r\n        this._style.skewY = value;\r\n    }\r\n    /**@private */\r\n    _createTransform() {\r\n        return _maths_Matrix__WEBPACK_IMPORTED_MODULE_13__[\"Matrix\"].create();\r\n    }\r\n    /**@private */\r\n    _adjustTransform() {\r\n        this._tfChanged = false;\r\n        var style = this._style;\r\n        var sx = style.scaleX, sy = style.scaleY;\r\n        var sskx = style.skewX;\r\n        var ssky = style.skewY;\r\n        var rot = style.rotation;\r\n        var m = this._transform || (this._transform = this._createTransform());\r\n        if (rot || sx !== 1 || sy !== 1 || sskx !== 0 || ssky !== 0) {\r\n            m._bTransform = true;\r\n            var skx = (rot - sskx) * 0.0174532922222222; //laya.CONST.PI180;\r\n            var sky = (rot + ssky) * 0.0174532922222222;\r\n            var cx = Math.cos(sky);\r\n            var ssx = Math.sin(sky);\r\n            var cy = Math.sin(skx);\r\n            var ssy = Math.cos(skx);\r\n            m.a = sx * cx;\r\n            m.b = sx * ssx;\r\n            m.c = -sy * cy;\r\n            m.d = sy * ssy;\r\n            m.tx = m.ty = 0;\r\n        }\r\n        else {\r\n            m.identity();\r\n            this._renderType &= ~_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].TRANSFORM;\r\n            this._setRenderType(this._renderType);\r\n        }\r\n        return m;\r\n    }\r\n    /**@private */\r\n    _setTransform(value) {\r\n    }\r\n    /**\r\n     * <p>对象的矩阵信息。通过设置矩阵可以实现节点旋转，缩放，位移效果。</p>\r\n     * <p>矩阵更多信息请参考 <code>Matrix</code></p>\r\n     */\r\n    get transform() {\r\n        return this._tfChanged ? this._adjustTransform() : this._transform;\r\n    }\r\n    set transform(value) {\r\n        this._tfChanged = false;\r\n        var m = this._transform || (this._transform = this._createTransform());\r\n        value.copyTo(m);\r\n        this._setTransform(m);\r\n        //设置transform时重置x,y\r\n        if (value) {\r\n            this._x = m.tx;\r\n            this._y = m.ty;\r\n            m.tx = m.ty = 0;\r\n        }\r\n        if (value)\r\n            this._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].TRANSFORM;\r\n        else {\r\n            this._renderType &= ~_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].TRANSFORM;\r\n        }\r\n        this._setRenderType(this._renderType);\r\n        this.parentRepaint();\r\n    }\r\n    /**@private */\r\n    _setPivotX(value) {\r\n        var style = this.getStyle();\r\n        style.pivotX = value;\r\n    }\r\n    /**@private */\r\n    _getPivotX() {\r\n        return this._style.pivotX;\r\n    }\r\n    /**@private */\r\n    _setPivotY(value) {\r\n        var style = this.getStyle();\r\n        style.pivotY = value;\r\n    }\r\n    /**@private */\r\n    _getPivotY() {\r\n        return this._style.pivotY;\r\n    }\r\n    /**X轴 轴心点的位置，单位为像素，默认为0。轴心点会影响对象位置，缩放中心，旋转中心。*/\r\n    get pivotX() {\r\n        return this._getPivotX();\r\n    }\r\n    set pivotX(value) {\r\n        this._setPivotX(value);\r\n        this.repaint();\r\n    }\r\n    /**Y轴 轴心点的位置，单位为像素，默认为0。轴心点会影响对象位置，缩放中心，旋转中心。*/\r\n    get pivotY() {\r\n        return this._getPivotY();\r\n    }\r\n    set pivotY(value) {\r\n        this._setPivotY(value);\r\n        this.repaint();\r\n    }\r\n    /**@private */\r\n    _setAlpha(value) {\r\n        if (this._style.alpha !== value) {\r\n            var style = this.getStyle();\r\n            style.alpha = value;\r\n            if (value !== 1)\r\n                this._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].ALPHA;\r\n            else\r\n                this._renderType &= ~_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].ALPHA;\r\n            this._setRenderType(this._renderType);\r\n            this.parentRepaint();\r\n        }\r\n    }\r\n    /**@private */\r\n    _getAlpha() {\r\n        return this._style.alpha;\r\n    }\r\n    /**透明度，值为0-1，默认值为1，表示不透明。更改alpha值会影响drawcall。*/\r\n    get alpha() {\r\n        return this._getAlpha();\r\n    }\r\n    set alpha(value) {\r\n        value = value < 0 ? 0 : (value > 1 ? 1 : value);\r\n        this._setAlpha(value);\r\n    }\r\n    /**表示是否可见，默认为true。如果设置不可见，节点将不被渲染。*/\r\n    get visible() {\r\n        return this._visible;\r\n    }\r\n    set visible(value) {\r\n        if (this._visible !== value) {\r\n            this._visible = value;\r\n            this.parentRepaint(_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_ALL);\r\n        }\r\n    }\r\n    /**@private */\r\n    _setBlendMode(value) {\r\n    }\r\n    /**指定要使用的混合模式。目前只支持\"lighter\"。*/\r\n    get blendMode() {\r\n        return this._style.blendMode;\r\n    }\r\n    set blendMode(value) {\r\n        this._setBlendMode(value);\r\n        this.getStyle().blendMode = value;\r\n        if (value && value != \"source-over\")\r\n            this._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].BLEND;\r\n        else\r\n            this._renderType &= ~_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].BLEND;\r\n        this._setRenderType(this._renderType);\r\n        this.parentRepaint();\r\n    }\r\n    /**绘图对象。封装了绘制位图和矢量图的接口，Sprite所有的绘图操作都通过Graphics来实现的。*/\r\n    get graphics() {\r\n        if (!this._graphics) {\r\n            this.graphics = new _Graphics__WEBPACK_IMPORTED_MODULE_2__[\"Graphics\"]();\r\n            this._graphics.autoDestroy = true;\r\n        }\r\n        return this._graphics;\r\n    }\r\n    /**@private */\r\n    _setGraphics(value) {\r\n    }\r\n    /**@private */\r\n    _setGraphicsCallBack() {\r\n    }\r\n    set graphics(value) {\r\n        if (this._graphics)\r\n            this._graphics._sp = null;\r\n        this._graphics = value;\r\n        if (value) {\r\n            this._setGraphics(value);\r\n            this._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].GRAPHICS;\r\n            value._sp = this;\r\n        }\r\n        else {\r\n            this._renderType &= ~_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].GRAPHICS;\r\n        }\r\n        this._setRenderType(this._renderType);\r\n        this.repaint();\r\n    }\r\n    /**\r\n     * <p>显示对象的滚动矩形范围，具有裁剪效果(如果只想限制子对象渲染区域，请使用viewport)</p>\r\n     * <p> srollRect和viewport的区别：<br/>\r\n     * 1.srollRect自带裁剪效果，viewport只影响子对象渲染是否渲染，不具有裁剪效果（性能更高）。<br/>\r\n     * 2.设置rect的x,y属性均能实现区域滚动效果，但scrollRect会保持0,0点位置不变。</p>\r\n     */\r\n    get scrollRect() {\r\n        return this._style.scrollRect;\r\n    }\r\n    /**@private */\r\n    _setScrollRect(value) {\r\n    }\r\n    set scrollRect(value) {\r\n        this.getStyle().scrollRect = value;\r\n        this._setScrollRect(value);\r\n        //viewport = value;\r\n        this.repaint();\r\n        if (value) {\r\n            this._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].CLIP;\r\n        }\r\n        else {\r\n            this._renderType &= ~_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].CLIP;\r\n        }\r\n        this._setRenderType(this._renderType);\r\n    }\r\n    /**\r\n     * <p>设置坐标位置。相当于分别设置x和y属性。</p>\r\n     * <p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.pos(...).scale(...);</p>\r\n     * @param\tx\t\t\tX轴坐标。\r\n     * @param\ty\t\t\tY轴坐标。\r\n     * @param \tspeedMode\t（可选）是否极速模式，正常是调用this.x=value进行赋值，极速模式直接调用内部函数处理，如果未重写x,y属性，建议设置为急速模式性能更高。\r\n     * @return\t返回对象本身。\r\n     */\r\n    pos(x, y, speedMode = false) {\r\n        if (this._x !== x || this._y !== y) {\r\n            if (this.destroyed)\r\n                return this;\r\n            if (speedMode) {\r\n                this._setX(x);\r\n                this._setY(y);\r\n                this.parentRepaint(_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_CACHE);\r\n                var p = this._cacheStyle.maskParent;\r\n                if (p) {\r\n                    p.repaint(_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_CACHE);\r\n                }\r\n            }\r\n            else {\r\n                this.x = x;\r\n                this.y = y;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * <p>设置轴心点。相当于分别设置pivotX和pivotY属性。</p>\r\n     * <p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.pivot(...).pos(50, 100);</p>\r\n     * @param\tx X轴心点。\r\n     * @param\ty Y轴心点。\r\n     * @return\t返回对象本身。\r\n     */\r\n    pivot(x, y) {\r\n        this.pivotX = x;\r\n        this.pivotY = y;\r\n        return this;\r\n    }\r\n    /**\r\n     * <p>设置宽高。相当于分别设置width和height属性。</p>\r\n     * <p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.size(...).pos(50, 100);</p>\r\n     * @param\twidth 宽度值。\r\n     * @param\thegiht 高度值。\r\n     * @return\t返回对象本身。\r\n     */\r\n    size(width, height) {\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n    /**\r\n     * <p>设置缩放。相当于分别设置scaleX和scaleY属性。</p>\r\n     * <p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.scale(...).pos(50, 100);</p>\r\n     * @param\tscaleX\t\tX轴缩放比例。\r\n     * @param\tscaleY\t\tY轴缩放比例。\r\n     * @param \tspeedMode\t（可选）是否极速模式，正常是调用this.scaleX=value进行赋值，极速模式直接调用内部函数处理，如果未重写scaleX,scaleY属性，建议设置为急速模式性能更高。\r\n     * @return\t返回对象本身。\r\n     */\r\n    scale(scaleX, scaleY, speedMode = false) {\r\n        var style = this.getStyle();\r\n        if (style.scaleX != scaleX || style.scaleY != scaleY) {\r\n            if (this.destroyed)\r\n                return this;\r\n            if (speedMode) {\r\n                this._setScaleX(scaleX);\r\n                this._setScaleY(scaleY);\r\n                this._setTranformChange();\r\n            }\r\n            else {\r\n                this.scaleX = scaleX;\r\n                this.scaleY = scaleY;\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * <p>设置倾斜角度。相当于分别设置skewX和skewY属性。</p>\r\n     * <p>因为返回值为Sprite对象本身，所以可以使用如下语法：spr.skew(...).pos(50, 100);</p>\r\n     * @param\tskewX 水平倾斜角度。\r\n     * @param\tskewY 垂直倾斜角度。\r\n     * @return\t返回对象本身\r\n     */\r\n    skew(skewX, skewY) {\r\n        this.skewX = skewX;\r\n        this.skewY = skewY;\r\n        return this;\r\n    }\r\n    /**\r\n     * 更新、呈现显示对象。由系统调用。\r\n     * @param\tcontext 渲染的上下文引用。\r\n     * @param\tx X轴坐标。\r\n     * @param\ty Y轴坐标。\r\n     */\r\n    render(ctx, x, y) {\r\n        _renders_RenderSprite__WEBPACK_IMPORTED_MODULE_17__[\"RenderSprite\"].renders[this._renderType]._fun(this, ctx, x + this._x, y + this._y);\r\n        /*\r\n        var rt:int = _renderType;\r\n        var style:SpriteStyle = _style;\r\n        var oldAlpha:Number = ctx.globalAlpha;\r\n        var save:Boolean = false;\r\n        if (rt & SpriteConst.TRANSFORM ) {\r\n            ctx.save();\r\n            save = true;\r\n            ctx.transform(transform.a, transform.b, transform.c, transform.d, transform.tx + x+_x, transform.ty + y+_y);\r\n        }\r\n        \r\n        if ( rt & SpriteConst.ALPHA) {\r\n            var alpha:Number = style.alpha;\r\n            if (alpha > 0.01 || _needRepaint()) {\r\n                //var temp:Number = context.globalAlpha;\r\n                ctx.globalAlpha *= alpha;\r\n                //context.globalAlpha = temp;\r\n            }\r\n        }\r\n        \r\n        if ( rt & SpriteConst.TEXTURE ) {\r\n            var tex:Texture = texture;\r\n            ctx.drawTexture(tex, x-pivotX+_x, y-pivotY+_y, tex.width, tex.height);\r\n        }\r\n        \r\n        if ( rt & SpriteConst.GRAPHICS) {\r\n            _graphics && _graphics._render(this, ctx, x-pivotX+_x, y-pivotY+_y);\r\n        }\r\n        \r\n        if (_children.length) {\r\n            _children.forEach(function(c:Sprite) {\r\n                c._visible && c.render(ctx, x - pivotX+_x, y - pivotY+_y);\r\n            } );\r\n        }\r\n        ctx.globalAlpha = oldAlpha;//TODO 可能慢\r\n        if (save) {\r\n            ctx.restore();\r\n        }\r\n        */\r\n        this._repaint = 0;\r\n    }\r\n    /**\r\n     * <p>绘制 当前<code>Sprite</code> 到 <code>Canvas</code> 上，并返回一个HtmlCanvas。</p>\r\n     * <p>绘制的结果可以当作图片源，再次绘制到其他Sprite里面，示例：</p>\r\n     *\r\n     * var htmlCanvas:HTMLCanvas = sprite.drawToCanvas(100, 100, 0, 0);//把精灵绘制到canvas上面\r\n     * var sp:Sprite = new Sprite();//创建精灵\r\n     * sp.graphics.drawTexture(htmlCanvas.getTexture());//把截图绘制到精灵上\r\n     * Laya.stage.addChild(sp);//把精灵显示到舞台\r\n     *\r\n     * <p>也可以获取原始图片数据，分享到网上，从而实现截图效果，示例：</p>\r\n     *\r\n     * var htmlCanvas:HTMLCanvas = sprite.drawToCanvas(100, 100, 0, 0);//把精灵绘制到canvas上面\r\n     * htmlCanvas.toBase64(\"image/png\",0.9);//打印图片base64信息，可以发给服务器或者保存为图片\r\n     *\r\n     * @param\tcanvasWidth 画布宽度。\r\n     * @param\tcanvasHeight 画布高度。\r\n     * @param\tx 绘制的 X 轴偏移量。\r\n     * @param\ty 绘制的 Y 轴偏移量。\r\n     * @return  HTMLCanvas 对象。\r\n     */\r\n    drawToCanvas(canvasWidth, canvasHeight, offsetX, offsetY) {\r\n        //console.log('drawToCanvas is deprecated, please use drawToTexture');\r\n        return _utils_RunDriver__WEBPACK_IMPORTED_MODULE_20__[\"RunDriver\"].drawToCanvas(this, this._renderType, canvasWidth, canvasHeight, offsetX, offsetY);\r\n    }\r\n    drawToTexture(canvasWidth, canvasHeight, offsetX, offsetY) {\r\n        return _utils_RunDriver__WEBPACK_IMPORTED_MODULE_20__[\"RunDriver\"].drawToTexture(this, this._renderType, canvasWidth, canvasHeight, offsetX, offsetY);\r\n    }\r\n    /**\r\n     * <p>自定义更新、呈现显示对象。一般用来扩展渲染模式，请合理使用，可能会导致在加速器上无法渲染。</p>\r\n     * <p><b>注意</b>不要在此函数内增加或删除树节点，否则会对树节点遍历造成影响。</p>\r\n     * @param\tcontext  渲染的上下文引用。\r\n     * @param\tx X轴坐标。\r\n     * @param\ty Y轴坐标。\r\n     */\r\n    customRender(context, x, y) {\r\n        //_renderType |= SpriteConst.CUSTOM;\r\n        //_setRenderType(_renderType);\r\n        this._repaint = _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_ALL;\r\n    }\r\n    /**\r\n     * @private\r\n     * 应用滤镜。\r\n     */\r\n    _applyFilters() {\r\n        // canvas 模式不支持\r\n    }\r\n    /**滤镜集合。可以设置多个滤镜组合。*/\r\n    get filters() {\r\n        return this._cacheStyle.filters;\r\n    }\r\n    /**@private */\r\n    _setColorFilter(value) { }\r\n    set filters(value) {\r\n        value && value.length === 0 && (value = null);\r\n        if (this._cacheStyle.filters == value)\r\n            return;\r\n        this._getCacheStyle().filters = value ? value.slice() : null;\r\n        if (value && value.length) {\r\n            //temp TODO \r\n            this._setColorFilter(value[0]);\r\n            this._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].FILTERS;\r\n        }\r\n        else {\r\n            this._setColorFilter(null);\r\n            this._renderType &= ~_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].FILTERS;\r\n        }\r\n        this._setRenderType(this._renderType);\r\n        if (value && value.length > 0) {\r\n            if (!this._getBit(_Const__WEBPACK_IMPORTED_MODULE_4__[\"Const\"].DISPLAY))\r\n                this._setBitUp(_Const__WEBPACK_IMPORTED_MODULE_4__[\"Const\"].DISPLAY);\r\n            if (!(value.length == 1 && (value[0] instanceof _filters_ColorFilter__WEBPACK_IMPORTED_MODULE_10__[\"ColorFilter\"]))) {\r\n                this._getCacheStyle().cacheForFilters = true;\r\n                this._checkCanvasEnable();\r\n            }\r\n        }\r\n        else {\r\n            if (this._cacheStyle.cacheForFilters) {\r\n                this._cacheStyle.cacheForFilters = false;\r\n                this._checkCanvasEnable();\r\n            }\r\n        }\r\n        this._getCacheStyle().hasGlowFilter = this._isHaveGlowFilter();\r\n        this.repaint();\r\n    }\r\n    /**\r\n     * @private\r\n     * 查看当前原件中是否包含发光滤镜。\r\n     * @return 一个 Boolean 值，表示当前原件中是否包含发光滤镜。\r\n     */\r\n    _isHaveGlowFilter() {\r\n        var i, len;\r\n        if (this.filters) {\r\n            for (i = 0; i < this.filters.length; i++) {\r\n                if (this.filters[i].type == _filters_Filter__WEBPACK_IMPORTED_MODULE_11__[\"Filter\"].GLOW) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        for (i = 0, len = this._children.length; i < len; i++) {\r\n            if (this._children[i]._isHaveGlowFilter()) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * 把本地坐标转换为相对stage的全局坐标。\r\n     * @param point\t\t\t\t本地坐标点。\r\n     * @param createNewPoint\t（可选）是否创建一个新的Point对象作为返回值，默认为false，使用输入的point对象返回，减少对象创建开销。\r\n     * @param globalNode\t\tglobal节点，默认为Laya.stage\r\n     * @return 转换后的坐标的点。\r\n     */\r\n    localToGlobal(point, createNewPoint = false, globalNode = null) {\r\n        //if (!_displayedInStage || !point) return point;\r\n        if (createNewPoint === true) {\r\n            point = new _maths_Point__WEBPACK_IMPORTED_MODULE_14__[\"Point\"](point.x, point.y);\r\n        }\r\n        var ele = this;\r\n        globalNode = globalNode || _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].stage;\r\n        while (ele && !ele.destroyed) {\r\n            if (ele == globalNode)\r\n                break;\r\n            point = ele.toParentPoint(point);\r\n            ele = ele.parent;\r\n        }\r\n        return point;\r\n    }\r\n    /**\r\n     * 把stage的全局坐标转换为本地坐标。\r\n     * @param point\t\t\t\t全局坐标点。\r\n     * @param createNewPoint\t（可选）是否创建一个新的Point对象作为返回值，默认为false，使用输入的point对象返回，减少对象创建开销。\r\n     * @param globalNode\t\tglobal节点，默认为Laya.stage\r\n     * @return 转换后的坐标的点。\r\n     */\r\n    globalToLocal(point, createNewPoint = false, globalNode = null) {\r\n        //if (!_displayedInStage || !point) return point;\r\n        if (createNewPoint) {\r\n            point = new _maths_Point__WEBPACK_IMPORTED_MODULE_14__[\"Point\"](point.x, point.y);\r\n        }\r\n        var ele = this;\r\n        var list = [];\r\n        globalNode = globalNode || _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].stage;\r\n        while (ele && !ele.destroyed) {\r\n            if (ele == globalNode)\r\n                break;\r\n            list.push(ele);\r\n            ele = ele.parent;\r\n        }\r\n        var i = list.length - 1;\r\n        while (i >= 0) {\r\n            ele = list[i];\r\n            point = ele.fromParentPoint(point);\r\n            i--;\r\n        }\r\n        return point;\r\n    }\r\n    /**\r\n     * 将本地坐标系坐标转转换到父容器坐标系。\r\n     * @param point 本地坐标点。\r\n     * @return  转换后的点。\r\n     */\r\n    toParentPoint(point) {\r\n        if (!point)\r\n            return point;\r\n        point.x -= this.pivotX;\r\n        point.y -= this.pivotY;\r\n        if (this.transform) {\r\n            this._transform.transformPoint(point);\r\n        }\r\n        point.x += this._x;\r\n        point.y += this._y;\r\n        var scroll = this._style.scrollRect;\r\n        if (scroll) {\r\n            point.x -= scroll.x;\r\n            point.y -= scroll.y;\r\n        }\r\n        return point;\r\n    }\r\n    /**\r\n     * 将父容器坐标系坐标转换到本地坐标系。\r\n     * @param point 父容器坐标点。\r\n     * @return  转换后的点。\r\n     */\r\n    fromParentPoint(point) {\r\n        if (!point)\r\n            return point;\r\n        point.x -= this._x;\r\n        point.y -= this._y;\r\n        var scroll = this._style.scrollRect;\r\n        if (scroll) {\r\n            point.x += scroll.x;\r\n            point.y += scroll.y;\r\n        }\r\n        if (this.transform) {\r\n            //_transform.setTranslate(0,0);\r\n            this._transform.invertTransformPoint(point);\r\n        }\r\n        point.x += this.pivotX;\r\n        point.y += this.pivotY;\r\n        return point;\r\n    }\r\n    /**\r\n     * 将Stage坐标系坐标转换到本地坐标系。\r\n     * @param point 父容器坐标点。\r\n     * @return  转换后的点。\r\n     */\r\n    fromStagePoint(point) {\r\n        // TODO 没做\r\n        return point;\r\n    }\r\n    /**\r\n     * <p>增加事件侦听器，以使侦听器能够接收事件通知。</p>\r\n     * <p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>\r\n     * @param type\t\t事件的类型。\r\n     * @param caller\t事件侦听函数的执行域。\r\n     * @param listener\t事件侦听函数。\r\n     * @param args\t\t（可选）事件侦听函数的回调参数。\r\n     * @return 此 EventDispatcher 对象。\r\n     */\r\n    /*override*/ on(type, caller, listener, args = null) {\r\n        //如果是鼠标事件，则设置自己和父对象为可接受鼠标交互事件\r\n        if (this._mouseState !== 1 && this.isMouseEvent(type)) {\r\n            this.mouseEnabled = true;\r\n            this._setBit(_Const__WEBPACK_IMPORTED_MODULE_4__[\"Const\"].HAS_MOUSE, true);\r\n            if (this._parent) {\r\n                this._onDisplay();\r\n            }\r\n            return this._createListener(type, caller, listener, args, false);\r\n        }\r\n        return super.on(type, caller, listener, args);\r\n    }\r\n    /**\r\n     * <p>增加事件侦听器，以使侦听器能够接收事件通知，此侦听事件响应一次后则自动移除侦听。</p>\r\n     * <p>如果侦听鼠标事件，则会自动设置自己和父亲节点的属性 mouseEnabled 的值为 true(如果父节点mouseEnabled=false，则停止设置父节点mouseEnabled属性)。</p>\r\n     * @param type\t\t事件的类型。\r\n     * @param caller\t事件侦听函数的执行域。\r\n     * @param listener\t事件侦听函数。\r\n     * @param args\t\t（可选）事件侦听函数的回调参数。\r\n     * @return 此 EventDispatcher 对象。\r\n     */\r\n    /*override*/ once(type, caller, listener, args = null) {\r\n        //如果是鼠标事件，则设置自己和父对象为可接受鼠标交互事件\r\n        if (this._mouseState !== 1 && this.isMouseEvent(type)) {\r\n            this.mouseEnabled = true;\r\n            this._setBit(_Const__WEBPACK_IMPORTED_MODULE_4__[\"Const\"].HAS_MOUSE, true);\r\n            if (this._parent) {\r\n                this._onDisplay();\r\n            }\r\n            return this._createListener(type, caller, listener, args, true);\r\n        }\r\n        return super.once(type, caller, listener, args);\r\n    }\r\n    /** @private */\r\n    _onDisplay() {\r\n        if (this._mouseState !== 1) {\r\n            var ele = this;\r\n            ele = ele.parent;\r\n            while (ele && ele._mouseState !== 1) {\r\n                if (ele._getBit(_Const__WEBPACK_IMPORTED_MODULE_4__[\"Const\"].HAS_MOUSE))\r\n                    break;\r\n                ele.mouseEnabled = true;\r\n                ele._setBit(_Const__WEBPACK_IMPORTED_MODULE_4__[\"Const\"].HAS_MOUSE, true);\r\n                ele = ele.parent;\r\n            }\r\n        }\r\n    }\r\n    /**@private */\r\n    /*override*/ _setParent(value) {\r\n        super._setParent(value);\r\n        if (value && this._getBit(_Const__WEBPACK_IMPORTED_MODULE_4__[\"Const\"].HAS_MOUSE)) {\r\n            this._onDisplay();\r\n        }\r\n    }\r\n    /**\r\n     * <p>加载并显示一个图片。相当于加载图片后，设置texture属性</p>\r\n     * <p>注意：2.0改动：多次调用，只会显示一个图片（1.0会显示多个图片）,x,y,width,height参数取消。</p>\r\n     * @param url\t\t图片地址。\r\n     * @param complete\t（可选）加载完成回调。\r\n     * @return\t返回精灵对象本身。\r\n     */\r\n    loadImage(url, complete = null) {\r\n        if (url == null) {\r\n            this.texture = null;\r\n            loaded();\r\n        }\r\n        else {\r\n            var tex = _net_Loader__WEBPACK_IMPORTED_MODULE_16__[\"Loader\"].getRes(url);\r\n            if (!tex) {\r\n                tex = new _resource_Texture__WEBPACK_IMPORTED_MODULE_18__[\"Texture\"]();\r\n                tex.load(url);\r\n                _net_Loader__WEBPACK_IMPORTED_MODULE_16__[\"Loader\"].cacheRes(url, tex);\r\n            }\r\n            this.texture = tex;\r\n            if (!tex.getIsReady())\r\n                tex.once(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].READY, null, loaded);\r\n            else\r\n                loaded();\r\n        }\r\n        function loaded() {\r\n            this.repaint(_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_ALL);\r\n            complete && complete.run();\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * 根据图片地址创建一个新的 <code>Sprite</code> 对象用于加载并显示此图片。\r\n     * @param\turl 图片地址。\r\n     * @return\t返回新的 <code>Sprite</code> 对象。\r\n     */\r\n    static fromImage(url) {\r\n        return new Sprite().loadImage(url);\r\n    }\r\n    /**cacheAs后，设置自己和父对象缓存失效。*/\r\n    repaint(type = _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_CACHE) {\r\n        if (!(this._repaint & type)) {\r\n            this._repaint |= type;\r\n            this.parentRepaint(type);\r\n        }\r\n        if (this._cacheStyle && this._cacheStyle.maskParent) {\r\n            this._cacheStyle.maskParent.repaint(type);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 获取是否重新缓存。\r\n     * @return 如果重新缓存值为 true，否则值为 false。\r\n     */\r\n    _needRepaint() {\r\n        return (this._repaint & _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_CACHE) && this._cacheStyle.enableCanvasRender && this._cacheStyle.reCache;\r\n    }\r\n    /**@private\t*/\r\n    /*override*/ _childChanged(child = null) {\r\n        if (this._children.length)\r\n            this._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].CHILDS;\r\n        else\r\n            this._renderType &= ~_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].CHILDS;\r\n        this._setRenderType(this._renderType);\r\n        if (child && this._getBit(_Const__WEBPACK_IMPORTED_MODULE_4__[\"Const\"].HAS_ZORDER))\r\n            _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].systemTimer.callLater(this, this.updateZOrder);\r\n        this.repaint(_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_ALL);\r\n    }\r\n    /**cacheAs时，设置所有父对象缓存失效。 */\r\n    parentRepaint(type = _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_CACHE) {\r\n        var p = this._parent;\r\n        if (p && !(p._repaint & type)) {\r\n            p._repaint |= type;\r\n            p.parentRepaint(type);\r\n        }\r\n    }\r\n    /**对舞台 <code>stage</code> 的引用。*/\r\n    get stage() {\r\n        return _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].stage;\r\n    }\r\n    /**\r\n     * <p>可以设置一个Rectangle区域作为点击区域，或者设置一个<code>HitArea</code>实例作为点击区域，HitArea内可以设置可点击和不可点击区域。</p>\r\n     * <p>如果不设置hitArea，则根据宽高形成的区域进行碰撞。</p>\r\n     */\r\n    get hitArea() {\r\n        return this._style.hitArea;\r\n    }\r\n    set hitArea(value) {\r\n        this.getStyle().hitArea = value;\r\n    }\r\n    /**@private */\r\n    _setMask(value) {\r\n    }\r\n    /**\r\n     * <p>遮罩，可以设置一个对象(支持位图和矢量图)，根据对象形状进行遮罩显示。</p>\r\n     * <p>【注意】遮罩对象坐标系是相对遮罩对象本身的，和Flash机制不同</p>\r\n     */\r\n    get mask() {\r\n        return this._cacheStyle.mask;\r\n    }\r\n    set mask(value) {\r\n        if (value && this.mask && this.mask._cacheStyle.maskParent)\r\n            return;\r\n        this._getCacheStyle().mask = value;\r\n        this._setMask(value);\r\n        this._checkCanvasEnable();\r\n        if (value) {\r\n            value._getCacheStyle().maskParent = this;\r\n        }\r\n        else {\r\n            if (this.mask) {\r\n                this.mask._getCacheStyle().maskParent = null;\r\n            }\r\n        }\r\n        this._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].MASK;\r\n        this._setRenderType(this._renderType);\r\n        this.parentRepaint(_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_ALL);\r\n    }\r\n    /**\r\n     * 是否接受鼠标事件。\r\n     * 默认为false，如果监听鼠标事件，则会自动设置本对象及父节点的属性 mouseEnable 的值都为 true（如果父节点手动设置为false，则不会更改）。\r\n     * */\r\n    get mouseEnabled() {\r\n        return this._mouseState > 1;\r\n    }\r\n    set mouseEnabled(value) {\r\n        this._mouseState = value ? 2 : 1;\r\n    }\r\n    /**\r\n     * 开始拖动此对象。\r\n     * @param area\t\t\t\t（可选）拖动区域，此区域为当前对象注册点活动区域（不包括对象宽高），可选。\r\n     * @param hasInertia\t\t（可选）鼠标松开后，是否还惯性滑动，默认为false，可选。\r\n     * @param elasticDistance\t（可选）橡皮筋效果的距离值，0为无橡皮筋效果，默认为0，可选。\r\n     * @param elasticBackTime\t（可选）橡皮筋回弹时间，单位为毫秒，默认为300毫秒，可选。\r\n     * @param data\t\t\t\t（可选）拖动事件携带的数据，可选。\r\n     * @param disableMouseEvent\t（可选）禁用其他对象的鼠标检测，默认为false，设置为true能提高性能。\r\n     * @param ratio\t\t\t\t（可选）惯性阻尼系数，影响惯性力度和时长。\r\n     */\r\n    startDrag(area = null, hasInertia = false, elasticDistance = 0, elasticBackTime = 300, data = null, disableMouseEvent = false, ratio = 0.92) {\r\n        this._style.dragging || (this.getStyle().dragging = new _utils_Dragging__WEBPACK_IMPORTED_MODULE_19__[\"Dragging\"]());\r\n        this._style.dragging.start(this, area, hasInertia, elasticDistance, elasticBackTime, data, disableMouseEvent, ratio);\r\n    }\r\n    /**停止拖动此对象。*/\r\n    stopDrag() {\r\n        this._style.dragging && this._style.dragging.stop();\r\n    }\r\n    /**@private */\r\n    /*override*/ _setDisplay(value) {\r\n        if (!value) {\r\n            if (this._cacheStyle) {\r\n                this._cacheStyle.releaseContext();\r\n                this._cacheStyle.releaseFilterCache();\r\n                if (this._cacheStyle.hasGlowFilter) {\r\n                    this._cacheStyle.hasGlowFilter = false;\r\n                }\r\n            }\r\n        }\r\n        super._setDisplay(value);\r\n    }\r\n    /**\r\n     * 检测某个点是否在此对象内。\r\n     * @param\tx 全局x坐标。\r\n     * @param\ty 全局y坐标。\r\n     * @return  表示是否在对象内。\r\n     */\r\n    hitTestPoint(x, y) {\r\n        var point = this.globalToLocal(_maths_Point__WEBPACK_IMPORTED_MODULE_14__[\"Point\"].TEMP.setTo(x, y));\r\n        x = point.x;\r\n        y = point.y;\r\n        var rect = this._style.hitArea ? this._style.hitArea : (this._width > 0 && this._height > 0) ? _maths_Rectangle__WEBPACK_IMPORTED_MODULE_15__[\"Rectangle\"].TEMP.setTo(0, 0, this._width, this._height) : this.getSelfBounds();\r\n        return rect.contains(x, y);\r\n    }\r\n    /**获得相对于本对象上的鼠标坐标信息。*/\r\n    getMousePoint() {\r\n        return this.globalToLocal(_maths_Point__WEBPACK_IMPORTED_MODULE_14__[\"Point\"].TEMP.setTo(_Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].stage.mouseX, _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].stage.mouseY));\r\n    }\r\n    /**\r\n     * 获得相对于stage的全局X轴缩放值（会叠加父亲节点的缩放值）。\r\n     */\r\n    get globalScaleX() {\r\n        var scale = 1;\r\n        var ele = this;\r\n        while (ele) {\r\n            if (ele === _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].stage)\r\n                break;\r\n            scale *= ele.scaleX;\r\n            ele = ele.parent;\r\n        }\r\n        return scale;\r\n    }\r\n    /**\r\n     * 获得相对于stage的全局旋转值（会叠加父亲节点的旋转值）。\r\n     */\r\n    get globalRotation() {\r\n        var angle = 0;\r\n        var ele = this;\r\n        while (ele) {\r\n            if (ele === _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].stage)\r\n                break;\r\n            angle += ele.rotation;\r\n            ele = ele.parent;\r\n        }\r\n        return angle;\r\n    }\r\n    /**\r\n     * 获得相对于stage的全局Y轴缩放值（会叠加父亲节点的缩放值）。\r\n     */\r\n    get globalScaleY() {\r\n        var scale = 1;\r\n        var ele = this;\r\n        while (ele) {\r\n            if (ele === _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].stage)\r\n                break;\r\n            scale *= ele.scaleY;\r\n            ele = ele.parent;\r\n        }\r\n        return scale;\r\n    }\r\n    /**\r\n     * 返回鼠标在此对象坐标系上的 X 轴坐标信息。\r\n     */\r\n    get mouseX() {\r\n        return this.getMousePoint().x;\r\n    }\r\n    /**\r\n     * 返回鼠标在此对象坐标系上的 Y 轴坐标信息。\r\n     */\r\n    get mouseY() {\r\n        return this.getMousePoint().y;\r\n    }\r\n    /**z排序，更改此值，则会按照值的大小对同一容器的所有对象重新排序。值越大，越靠上。默认为0，则根据添加顺序排序。*/\r\n    get zOrder() {\r\n        return this._zOrder;\r\n    }\r\n    set zOrder(value) {\r\n        if (this._zOrder != value) {\r\n            this._zOrder = value;\r\n            if (this._parent) {\r\n                value && this._parent._setBit(_Const__WEBPACK_IMPORTED_MODULE_4__[\"Const\"].HAS_ZORDER, true);\r\n                _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].systemTimer.callLater(this._parent, this.updateZOrder);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 设置一个Texture实例，并显示此图片（如果之前有其他绘制，则会被清除掉）。\r\n     * 等同于graphics.clear();graphics.drawImage()，但性能更高\r\n     * 还可以赋值一个图片地址，则会自动加载图片，然后显示\r\n     */\r\n    get texture() {\r\n        return this._texture;\r\n    }\r\n    /**@private */\r\n    _setTexture(value) {\r\n    }\r\n    set texture(value) {\r\n        if (value instanceof String) {\r\n            this.loadImage(value);\r\n        }\r\n        else if (this._texture != value) {\r\n            this._texture && this._texture._removeReference();\r\n            this._texture = value;\r\n            value && value._addReference();\r\n            this._setTexture(value);\r\n            this._setWidth(this._texture, this.width);\r\n            this._setHeight(this._texture, this.height);\r\n            if (value)\r\n                this._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].TEXTURE;\r\n            else\r\n                this._renderType &= ~_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].TEXTURE;\r\n            this._setRenderType(this._renderType);\r\n            this.repaint();\r\n        }\r\n    }\r\n    /**\r\n     * <p>视口大小，视口外的子对象，将不被渲染(如果想实现裁剪效果，请使用srollRect)，合理使用能提高渲染性能。比如由一个个小图片拼成的地图块，viewport外面的小图片将不渲染</p>\r\n     * <p>srollRect和viewport的区别：<br/>\r\n     * 1. srollRect自带裁剪效果，viewport只影响子对象渲染是否渲染，不具有裁剪效果（性能更高）。<br/>\r\n     * 2. 设置rect的x,y属性均能实现区域滚动效果，但scrollRect会保持0,0点位置不变。</p>\r\n     * @default null\r\n     */\r\n    get viewport() {\r\n        return this._style.viewport;\r\n    }\r\n    set viewport(value) {\r\n        if (value instanceof String) {\r\n            var recArr;\r\n            recArr = value.split(\",\");\r\n            if (recArr.length > 3) {\r\n                value = new _maths_Rectangle__WEBPACK_IMPORTED_MODULE_15__[\"Rectangle\"](parseFloat(recArr[0]), parseFloat(recArr[1]), parseFloat(recArr[2]), parseFloat(recArr[3]));\r\n            }\r\n        }\r\n        this.getStyle().viewport = value;\r\n    }\r\n    /**@private */\r\n    _setRenderType(type) {\r\n    }\r\n    /**@private */\r\n    _setTranformChange() {\r\n        this._tfChanged = true;\r\n        this._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].TRANSFORM;\r\n        this.parentRepaint(_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].REPAINT_CACHE);\r\n    }\r\n    /**@private */\r\n    _setBgStyleColor(x, y, width, height, fillColor) {\r\n    }\r\n    /**@private */\r\n    _setBorderStyleColor(x, y, width, height, fillColor, borderWidth) {\r\n    }\r\n    /**@private */\r\n    captureMouseEvent(exclusive) {\r\n        _events_MouseManager__WEBPACK_IMPORTED_MODULE_9__[\"MouseManager\"].instance.setCapture(this, exclusive);\r\n    }\r\n    /**@private */\r\n    releaseMouseEvent() {\r\n        _events_MouseManager__WEBPACK_IMPORTED_MODULE_9__[\"MouseManager\"].instance.releaseCapture();\r\n    }\r\n    set drawCallOptimize(value) {\r\n        this._setBit(_Const__WEBPACK_IMPORTED_MODULE_4__[\"Const\"].DRAWCALL_OPTIMIZE, value);\r\n    }\r\n    get drawCallOptimize() {\r\n        return this._getBit(_Const__WEBPACK_IMPORTED_MODULE_4__[\"Const\"].DRAWCALL_OPTIMIZE);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/Sprite.ts?");

/***/ }),

/***/ "./src/core/laya/display/SpriteConst.ts":
/*!**********************************************!*\
  !*** ./src/core/laya/display/SpriteConst.ts ***!
  \**********************************************/
/*! exports provided: SpriteConst */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SpriteConst\", function() { return SpriteConst; });\n/**\r\n     * @private\r\n     */\r\nclass SpriteConst {\r\n}\r\n/** @private */\r\nSpriteConst.ALPHA = 0x01;\r\n/** @private */\r\nSpriteConst.TRANSFORM = 0x02;\r\n/** @private */\r\nSpriteConst.BLEND = 0x04;\r\n/** @private */\r\nSpriteConst.CANVAS = 0x08;\r\n/** @private */\r\nSpriteConst.FILTERS = 0x10;\r\n/** @private */\r\nSpriteConst.MASK = 0x20;\r\n/** @private */\r\nSpriteConst.CLIP = 0x40;\r\n/** @private */\r\nSpriteConst.STYLE = 0x80;\r\n/** @private */\r\nSpriteConst.TEXTURE = 0x100;\r\n/** @private */\r\nSpriteConst.GRAPHICS = 0x200;\r\n/** @private */\r\nSpriteConst.LAYAGL3D = 0x400;\r\n/** @private */\r\nSpriteConst.CUSTOM = 0x800;\r\n/** @private */\r\nSpriteConst.ONECHILD = 0x1000;\r\n/** @private */\r\nSpriteConst.CHILDS = 0x2000;\r\n/** @private */\r\nSpriteConst.REPAINT_NONE = 0;\r\n/** @private */\r\nSpriteConst.REPAINT_NODE = 0x01;\r\n/** @private */\r\nSpriteConst.REPAINT_CACHE = 0x02;\r\n/** @private */\r\nSpriteConst.REPAINT_ALL = 0x03;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/SpriteConst.ts?");

/***/ }),

/***/ "./src/core/laya/display/Stage.ts":
/*!****************************************!*\
  !*** ./src/core/laya/display/Stage.ts ***!
  \****************************************/
/*! exports provided: Stage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Stage\", function() { return Stage; });\n/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Sprite */ \"./src/core/laya/display/Sprite.ts\");\n/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../Config */ \"./src/core/Config.ts\");\n/* harmony import */ var _Input__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ././Input */ \"./src/core/laya/display/Input.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _SpriteConst__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ././SpriteConst */ \"./src/core/laya/display/SpriteConst.ts\");\n/* harmony import */ var _Const__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Const */ \"./src/core/laya/Const.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _events_MouseManager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../events/MouseManager */ \"./src/core/laya/events/MouseManager.ts\");\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n/* harmony import */ var _maths_Point__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../maths/Point */ \"./src/core/laya/maths/Point.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _utils_CallLater__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../utils/CallLater */ \"./src/core/laya/utils/CallLater.ts\");\n/* harmony import */ var _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../utils/ColorUtils */ \"./src/core/laya/utils/ColorUtils.ts\");\n/* harmony import */ var _utils_RunDriver__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utils/RunDriver */ \"./src/core/laya/utils/RunDriver.ts\");\n/* harmony import */ var _utils_Stat__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utils/Stat */ \"./src/core/laya/utils/Stat.ts\");\n/* harmony import */ var _utils_VectorGraphManager__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../utils/VectorGraphManager */ \"./src/core/laya/utils/VectorGraphManager.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * stage大小经过重新调整时进行调度。\r\n * @eventType Event.RESIZE\r\n */\r\n/*[Event(name = \"resize\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 舞台获得焦点时调度。比如浏览器或者当前标签处于后台，重新切换回来时进行调度。\r\n * @eventType Event.FOCUS\r\n */\r\n/*[Event(name = \"focus\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 舞台失去焦点时调度。比如浏览器或者当前标签被切换到后台后调度。\r\n * @eventType Event.BLUR\r\n */\r\n/*[Event(name = \"blur\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 舞台焦点变化时调度，使用Laya.stage.isFocused可以获取当前舞台是否获得焦点。\r\n * @eventType Event.FOCUS_CHANGE\r\n */\r\n/*[Event(name = \"focuschange\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 舞台可见性发生变化时调度（比如浏览器或者当前标签被切换到后台后调度），使用Laya.stage.isVisibility可以获取当前是否处于显示状态。\r\n * @eventType Event.VISIBILITY_CHANGE\r\n */\r\n/*[Event(name = \"visibilitychange\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 浏览器全屏更改时调度，比如进入全屏或者退出全屏。\r\n * @eventType Event.FULL_SCREEN_CHANGE\r\n */\r\n/*[Event(name = \"fullscreenchange\", type = \"laya.events.Event\")]*/\r\n/**\r\n * <p> <code>Stage</code> 是舞台类，显示列表的根节点，所有显示对象都在舞台上显示。通过 Laya.stage 单例访问。</p>\r\n * <p>Stage提供几种适配模式，不同的适配模式会产生不同的画布大小，画布越大，渲染压力越大，所以要选择合适的适配方案。</p>\r\n * <p>Stage提供不同的帧率模式，帧率越高，渲染压力越大，越费电，合理使用帧率甚至动态更改帧率有利于改进手机耗电。</p>\r\n */\r\nclass Stage extends _Sprite__WEBPACK_IMPORTED_MODULE_0__[\"Sprite\"] {\r\n    /**场景类，引擎中只有一个stage实例，此实例可以通过Laya.stage访问。*/\r\n    constructor() {\r\n        super();\r\n        /**@private 相对浏览器左上角的偏移，弃用，请使用_canvasTransform。*/\r\n        this.offset = new _maths_Point__WEBPACK_IMPORTED_MODULE_9__[\"Point\"]();\r\n        /**帧率类型，支持三种模式：fast-60帧(默认)，slow-30帧，mouse-30帧（鼠标活动后会自动加速到60，鼠标不动2秒后降低为30帧，以节省消耗），sleep-1帧。*/\r\n        this._frameRate = \"fast\";\r\n        /**设计宽度（初始化时设置的宽度Laya.init(width,height)）*/\r\n        this.designWidth = 0;\r\n        /**设计高度（初始化时设置的高度Laya.init(width,height)）*/\r\n        this.designHeight = 0;\r\n        /**画布是否发生翻转。*/\r\n        this.canvasRotation = false;\r\n        /**画布的旋转角度。*/\r\n        this.canvasDegree = 0;\r\n        /**\r\n         * <p>设置是否渲染，设置为false，可以停止渲染，画面会停留到最后一次渲染上，减少cpu消耗，此设置不影响时钟。</p>\r\n         * <p>比如非激活状态，可以设置renderingEnabled=false以节省消耗。</p>\r\n         * */\r\n        this.renderingEnabled = true;\r\n        /**是否启用屏幕适配，可以适配后，在某个时候关闭屏幕适配，防止某些操作导致的屏幕意外改变*/\r\n        this.screenAdaptationEnabled = true;\r\n        /**@private */\r\n        this._canvasTransform = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_8__[\"Matrix\"]();\r\n        /**@private */\r\n        this._screenMode = \"none\";\r\n        /**@private */\r\n        this._scaleMode = \"noscale\";\r\n        /**@private */\r\n        this._alignV = \"top\";\r\n        /**@private */\r\n        this._alignH = \"left\";\r\n        /**@private */\r\n        this._bgColor = \"black\";\r\n        /**@private */\r\n        this._mouseMoveTime = 0;\r\n        /**@private */\r\n        this._renderCount = 0;\r\n        /**@private */\r\n        this._safariOffsetY = 0;\r\n        /**@private */\r\n        this._frameStartTime = 0;\r\n        /**@private */\r\n        this._previousOrientation = _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].window.orientation;\r\n        /**@private webgl Color*/\r\n        this._wgColor = [0, 0, 0, 1];\r\n        /**@private */\r\n        this._scene3Ds = [];\r\n        /**@private */\r\n        this._globalRepaintSet = false; // 设置全局重画标志。这个是给IDE用的。IDE的Image无法在onload的时候通知对应的sprite重画。\r\n        /**@private */\r\n        this._globalRepaintGet = false; // 一个get一个set是为了把标志延迟到下一帧的开始，防止部分对象接收不到。\r\n        /**@private */\r\n        this._3dUI = [];\r\n        /**@private */\r\n        this._curUIBase = null; // 给鼠标事件capture用的。用来找到自己的根。因为3d界面的根不是stage（界面链会被3d对象打断）\r\n        /**使用物理分辨率作为canvas大小，会改进渲染效果，但是会降低性能*/\r\n        this.useRetinalCanvas = false;\r\n        //重置默认值，请不要修改\r\n        this.mouseEnabled = true;\r\n        this.hitTestPrior = true;\r\n        this.autoSize = false;\r\n        this._setBit(_Const__WEBPACK_IMPORTED_MODULE_5__[\"Const\"].DISPLAYED_INSTAGE, true);\r\n        this._setBit(_Const__WEBPACK_IMPORTED_MODULE_5__[\"Const\"].ACTIVE_INHIERARCHY, true);\r\n        this._isFocused = true;\r\n        this._isVisibility = true;\r\n        //this.drawCallOptimize=true;\r\n        this.useRetinalCanvas = _Config__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].useRetinalCanvas;\r\n        var window = _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].window;\r\n        var _me = this; //for TS 。 TS的_this是有特殊用途的\r\n        window.addEventListener(\"focus\", function () {\r\n            this._isFocused = true;\r\n            _me.event(_events_Event__WEBPACK_IMPORTED_MODULE_6__[\"Event\"].FOCUS);\r\n            _me.event(_events_Event__WEBPACK_IMPORTED_MODULE_6__[\"Event\"].FOCUS_CHANGE);\r\n        });\r\n        window.addEventListener(\"blur\", function () {\r\n            this._isFocused = false;\r\n            _me.event(_events_Event__WEBPACK_IMPORTED_MODULE_6__[\"Event\"].BLUR);\r\n            _me.event(_events_Event__WEBPACK_IMPORTED_MODULE_6__[\"Event\"].FOCUS_CHANGE);\r\n            if (_me._isInputting())\r\n                _Input__WEBPACK_IMPORTED_MODULE_2__[\"Input\"][\"inputElement\"].target.focus = false;\r\n        });\r\n        // 各种浏览器兼容\r\n        var hidden = \"hidden\", state = \"visibilityState\", visibilityChange = \"visibilitychange\";\r\n        var document = window.document;\r\n        if (typeof document.hidden !== \"undefined\") {\r\n            visibilityChange = \"visibilitychange\";\r\n            state = \"visibilityState\";\r\n        }\r\n        else if (typeof document.mozHidden !== \"undefined\") {\r\n            visibilityChange = \"mozvisibilitychange\";\r\n            state = \"mozVisibilityState\";\r\n        }\r\n        else if (typeof document.msHidden !== \"undefined\") {\r\n            visibilityChange = \"msvisibilitychange\";\r\n            state = \"msVisibilityState\";\r\n        }\r\n        else if (typeof document.webkitHidden !== \"undefined\") {\r\n            visibilityChange = \"webkitvisibilitychange\";\r\n            state = \"webkitVisibilityState\";\r\n        }\r\n        window.document.addEventListener(visibilityChange, visibleChangeFun);\r\n        function visibleChangeFun() {\r\n            if (_utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].document[state] == \"hidden\") {\r\n                this._isVisibility = false;\r\n                if (_me._isInputting())\r\n                    _Input__WEBPACK_IMPORTED_MODULE_2__[\"Input\"][\"inputElement\"].target.focus = false;\r\n            }\r\n            else {\r\n                this._isVisibility = true;\r\n            }\r\n            this.renderingEnabled = this._isVisibility;\r\n            _me.event(_events_Event__WEBPACK_IMPORTED_MODULE_6__[\"Event\"].VISIBILITY_CHANGE);\r\n        }\r\n        window.addEventListener(\"resize\", function () {\r\n            // 处理屏幕旋转。旋转后收起输入法。\r\n            var orientation = _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].window.orientation;\r\n            if (orientation != null && orientation != this._previousOrientation && _me._isInputting()) {\r\n                _Input__WEBPACK_IMPORTED_MODULE_2__[\"Input\"][\"inputElement\"].target.focus = false;\r\n            }\r\n            this._previousOrientation = orientation;\r\n            // 弹出输入法不应对画布进行resize。\r\n            if (_me._isInputting())\r\n                return;\r\n            // Safari横屏工具栏偏移\r\n            if (_utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].onSafari)\r\n                _me._safariOffsetY = (_utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].window.__innerHeight || _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].document.body.clientHeight || _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].document.documentElement.clientHeight) - _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].window.innerHeight;\r\n            _me._resetCanvas();\r\n        });\r\n        // 微信的iframe不触发orientationchange。\r\n        window.addEventListener(\"orientationchange\", function (e) {\r\n            _me._resetCanvas();\r\n        });\r\n        this.on(_events_Event__WEBPACK_IMPORTED_MODULE_6__[\"Event\"].MOUSE_MOVE, this, this._onmouseMove);\r\n        if (_utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].onMobile)\r\n            this.on(_events_Event__WEBPACK_IMPORTED_MODULE_6__[\"Event\"].MOUSE_DOWN, this, this._onmouseMove);\r\n    }\r\n    /**\r\n     * @private\r\n     * 在移动端输入时，输入法弹出期间不进行画布尺寸重置。\r\n     */\r\n    _isInputting() {\r\n        return (_utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].onMobile && _Input__WEBPACK_IMPORTED_MODULE_2__[\"Input\"].isInputting);\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ set width(value) {\r\n        this.designWidth = value;\r\n        super.width = value;\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].systemTimer.callLater(this, this._changeCanvasSize);\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ set height(value) {\r\n        this.designHeight = value;\r\n        super.height = value;\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].systemTimer.callLater(this, this._changeCanvasSize);\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ get transform() {\r\n        if (this._tfChanged)\r\n            this._adjustTransform();\r\n        return (this._transform = this._transform || this._createTransform());\r\n    }\r\n    /**\r\n     * 舞台是否获得焦点。\r\n     */\r\n    get isFocused() {\r\n        return this._isFocused;\r\n    }\r\n    /**\r\n     * 舞台是否处于可见状态(是否进入后台)。\r\n     */\r\n    get isVisibility() {\r\n        return this._isVisibility;\r\n    }\r\n    /**@private */\r\n    _changeCanvasSize() {\r\n        this.setScreenSize(_utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].clientWidth * _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].pixelRatio, _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].clientHeight * _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].pixelRatio);\r\n    }\r\n    /**@private */\r\n    _resetCanvas() {\r\n        if (!this.screenAdaptationEnabled)\r\n            return;\r\n        //var canvas:HTMLCanvas = Render._mainCanvas;\r\n        //var canvasStyle:* = canvas.source.style;\r\n        //canvas.size(1, 1);\r\n        //canvasStyle.transform = canvasStyle.webkitTransform = canvasStyle.msTransform = canvasStyle.mozTransform = canvasStyle.oTransform = \"\";\r\n        //visible = false;\r\n        //Laya.timer.once(100, this, this._changeCanvasSize);\r\n        this._changeCanvasSize();\r\n    }\r\n    /**\r\n     * 设置屏幕大小，场景会根据屏幕大小进行适配。可以动态调用此方法，来更改游戏显示的大小。\r\n     * @param\tscreenWidth\t\t屏幕宽度。\r\n     * @param\tscreenHeight\t屏幕高度。\r\n     */\r\n    setScreenSize(screenWidth, screenHeight) {\r\n        //计算是否旋转\r\n        var rotation = false;\r\n        if (this._screenMode !== Stage.SCREEN_NONE) {\r\n            var screenType = screenWidth / screenHeight < 1 ? Stage.SCREEN_VERTICAL : Stage.SCREEN_HORIZONTAL;\r\n            rotation = screenType !== this._screenMode;\r\n            if (rotation) {\r\n                //宽高互换\r\n                var temp = screenHeight;\r\n                screenHeight = screenWidth;\r\n                screenWidth = temp;\r\n            }\r\n        }\r\n        this.canvasRotation = rotation;\r\n        var canvas = _renders_Render__WEBPACK_IMPORTED_MODULE_10__[\"Render\"]._mainCanvas;\r\n        var canvasStyle = canvas.source.style;\r\n        var mat = this._canvasTransform.identity();\r\n        var scaleMode = this._scaleMode;\r\n        var scaleX = screenWidth / this.designWidth;\r\n        var scaleY = screenHeight / this.designHeight;\r\n        var canvasWidth = this.useRetinalCanvas ? screenWidth : this.designWidth;\r\n        var canvasHeight = this.useRetinalCanvas ? screenHeight : this.designHeight;\r\n        var realWidth = screenWidth;\r\n        var realHeight = screenHeight;\r\n        var pixelRatio = _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].pixelRatio;\r\n        this._width = this.designWidth;\r\n        this._height = this.designHeight;\r\n        //处理缩放模式\r\n        switch (scaleMode) {\r\n            case Stage.SCALE_NOSCALE:\r\n                scaleX = scaleY = 1;\r\n                realWidth = this.designWidth;\r\n                realHeight = this.designHeight;\r\n                break;\r\n            case Stage.SCALE_SHOWALL:\r\n                scaleX = scaleY = Math.min(scaleX, scaleY);\r\n                canvasWidth = realWidth = Math.round(this.designWidth * scaleX);\r\n                canvasHeight = realHeight = Math.round(this.designHeight * scaleY);\r\n                break;\r\n            case Stage.SCALE_NOBORDER:\r\n                scaleX = scaleY = Math.max(scaleX, scaleY);\r\n                realWidth = Math.round(this.designWidth * scaleX);\r\n                realHeight = Math.round(this.designHeight * scaleY);\r\n                break;\r\n            case Stage.SCALE_FULL:\r\n                scaleX = scaleY = 1;\r\n                this._width = canvasWidth = screenWidth;\r\n                this._height = canvasHeight = screenHeight;\r\n                break;\r\n            case Stage.SCALE_FIXED_WIDTH:\r\n                scaleY = scaleX;\r\n                this._height = canvasHeight = Math.round(screenHeight / scaleX);\r\n                break;\r\n            case Stage.SCALE_FIXED_HEIGHT:\r\n                scaleX = scaleY;\r\n                this._width = canvasWidth = Math.round(screenWidth / scaleY);\r\n                break;\r\n            case Stage.SCALE_FIXED_AUTO:\r\n                if ((screenWidth / screenHeight) < (this.designWidth / this.designHeight)) {\r\n                    scaleY = scaleX;\r\n                    this._height = canvasHeight = Math.round(screenHeight / scaleX);\r\n                }\r\n                else {\r\n                    scaleX = scaleY;\r\n                    this._width = canvasWidth = Math.round(screenWidth / scaleY);\r\n                }\r\n                break;\r\n        }\r\n        if (this.useRetinalCanvas) {\r\n            canvasWidth = screenWidth;\r\n            canvasHeight = screenHeight;\r\n        }\r\n        //根据不同尺寸缩放stage画面\r\n        scaleX *= this.scaleX;\r\n        scaleY *= this.scaleY;\r\n        if (scaleX === 1 && scaleY === 1) {\r\n            this.transform.identity();\r\n        }\r\n        else {\r\n            this.transform.a = this._formatData(scaleX / (realWidth / canvasWidth));\r\n            this.transform.d = this._formatData(scaleY / (realHeight / canvasHeight));\r\n        }\r\n        //处理canvas大小\t\t\t\r\n        canvas.size(canvasWidth, canvasHeight);\r\n        _utils_RunDriver__WEBPACK_IMPORTED_MODULE_14__[\"RunDriver\"].changeWebGLSize(canvasWidth, canvasHeight);\r\n        mat.scale(realWidth / canvasWidth / pixelRatio, realHeight / canvasHeight / pixelRatio);\r\n        //处理水平对齐\r\n        if (this._alignH === Stage.ALIGN_LEFT)\r\n            this.offset.x = 0;\r\n        else if (this._alignH === Stage.ALIGN_RIGHT)\r\n            this.offset.x = screenWidth - realWidth;\r\n        else\r\n            this.offset.x = (screenWidth - realWidth) * 0.5 / pixelRatio;\r\n        //处理垂直对齐\r\n        if (this._alignV === Stage.ALIGN_TOP)\r\n            this.offset.y = 0;\r\n        else if (this._alignV === Stage.ALIGN_BOTTOM)\r\n            this.offset.y = screenHeight - realHeight;\r\n        else\r\n            this.offset.y = (screenHeight - realHeight) * 0.5 / pixelRatio;\r\n        //处理用户自行设置的画布偏移\r\n        this.offset.x = Math.round(this.offset.x);\r\n        this.offset.y = Math.round(this.offset.y);\r\n        mat.translate(this.offset.x, this.offset.y);\r\n        if (this._safariOffsetY)\r\n            mat.translate(0, this._safariOffsetY);\r\n        //处理横竖屏\r\n        this.canvasDegree = 0;\r\n        if (rotation) {\r\n            if (this._screenMode === Stage.SCREEN_HORIZONTAL) {\r\n                mat.rotate(Math.PI / 2);\r\n                mat.translate(screenHeight / pixelRatio, 0);\r\n                this.canvasDegree = 90;\r\n            }\r\n            else {\r\n                mat.rotate(-Math.PI / 2);\r\n                mat.translate(0, screenWidth / pixelRatio);\r\n                this.canvasDegree = -90;\r\n            }\r\n        }\r\n        mat.a = this._formatData(mat.a);\r\n        mat.d = this._formatData(mat.d);\r\n        mat.tx = this._formatData(mat.tx);\r\n        mat.ty = this._formatData(mat.ty);\r\n        super.transform = this.transform;\r\n        canvasStyle.transformOrigin = canvasStyle.webkitTransformOrigin = canvasStyle.msTransformOrigin = canvasStyle.mozTransformOrigin = canvasStyle.oTransformOrigin = \"0px 0px 0px\";\r\n        canvasStyle.transform = canvasStyle.webkitTransform = canvasStyle.msTransform = canvasStyle.mozTransform = canvasStyle.oTransform = \"matrix(\" + mat.toString() + \")\";\r\n        //修正用户自行设置的偏移\r\n        if (this._safariOffsetY)\r\n            mat.translate(0, -this._safariOffsetY);\r\n        mat.translate(parseInt(canvasStyle.left) || 0, parseInt(canvasStyle.top) || 0);\r\n        this.visible = true;\r\n        this._repaint |= _SpriteConst__WEBPACK_IMPORTED_MODULE_4__[\"SpriteConst\"].REPAINT_CACHE;\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_6__[\"Event\"].RESIZE);\r\n    }\r\n    /**@private */\r\n    _formatData(value) {\r\n        if (Math.abs(value) < 0.000001)\r\n            return 0;\r\n        if (Math.abs(1 - value) < 0.001)\r\n            return value > 0 ? 1 : -1;\r\n        return value;\r\n    }\r\n    /**\r\n     * <p>缩放模式。默认值为 \"noscale\"。</p>\r\n     * <p><ul>取值范围：\r\n     * <li>\"noscale\" ：不缩放；</li>\r\n     * <li>\"exactfit\" ：全屏不等比缩放；</li>\r\n     * <li>\"showall\" ：最小比例缩放；</li>\r\n     * <li>\"noborder\" ：最大比例缩放；</li>\r\n     * <li>\"full\" ：不缩放，stage的宽高等于屏幕宽高；</li>\r\n     * <li>\"fixedwidth\" ：宽度不变，高度根据屏幕比缩放；</li>\r\n     * <li>\"fixedheight\" ：高度不变，宽度根据屏幕比缩放；</li>\r\n     * <li>\"fixedauto\" ：根据宽高比，自动选择使用fixedwidth或fixedheight；</li>\r\n     * </ul></p>\r\n     */\r\n    get scaleMode() {\r\n        return this._scaleMode;\r\n    }\r\n    set scaleMode(value) {\r\n        this._scaleMode = value;\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].systemTimer.callLater(this, this._changeCanvasSize);\r\n    }\r\n    /**\r\n     * <p>水平对齐方式。默认值为\"left\"。</p>\r\n     * <p><ul>取值范围：\r\n     * <li>\"left\" ：居左对齐；</li>\r\n     * <li>\"center\" ：居中对齐；</li>\r\n     * <li>\"right\" ：居右对齐；</li>\r\n     * </ul></p>\r\n     */\r\n    get alignH() {\r\n        return this._alignH;\r\n    }\r\n    set alignH(value) {\r\n        this._alignH = value;\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].systemTimer.callLater(this, this._changeCanvasSize);\r\n    }\r\n    /**\r\n     * <p>垂直对齐方式。默认值为\"top\"。</p>\r\n     * <p><ul>取值范围：\r\n     * <li>\"top\" ：居顶部对齐；</li>\r\n     * <li>\"middle\" ：居中对齐；</li>\r\n     * <li>\"bottom\" ：居底部对齐；</li>\r\n     * </ul></p>\r\n     */\r\n    get alignV() {\r\n        return this._alignV;\r\n    }\r\n    set alignV(value) {\r\n        this._alignV = value;\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].systemTimer.callLater(this, this._changeCanvasSize);\r\n    }\r\n    /**舞台的背景颜色，默认为黑色，null为透明。*/\r\n    get bgColor() {\r\n        return this._bgColor;\r\n    }\r\n    set bgColor(value) {\r\n        this._bgColor = value;\r\n        if (value)\r\n            this._wgColor = _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_13__[\"ColorUtils\"].create(value).arrColor;\r\n        else\r\n            this._wgColor = null;\r\n        if (_utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].onLimixiu) {\r\n            this._wgColor = _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_13__[\"ColorUtils\"].create(value).arrColor;\r\n        }\r\n        else if (value) {\r\n            _renders_Render__WEBPACK_IMPORTED_MODULE_10__[\"Render\"].canvas.style.background = value;\r\n        }\r\n        else {\r\n            _renders_Render__WEBPACK_IMPORTED_MODULE_10__[\"Render\"].canvas.style.background = \"none\";\r\n        }\r\n    }\r\n    /**鼠标在 Stage 上的 X 轴坐标。*/\r\n    /*override*/ get mouseX() {\r\n        return Math.round(_events_MouseManager__WEBPACK_IMPORTED_MODULE_7__[\"MouseManager\"].instance.mouseX / this.clientScaleX);\r\n    }\r\n    /**鼠标在 Stage 上的 Y 轴坐标。*/\r\n    /*override*/ get mouseY() {\r\n        return Math.round(_events_MouseManager__WEBPACK_IMPORTED_MODULE_7__[\"MouseManager\"].instance.mouseY / this.clientScaleY);\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ getMousePoint() {\r\n        return _maths_Point__WEBPACK_IMPORTED_MODULE_9__[\"Point\"].TEMP.setTo(this.mouseX, this.mouseY);\r\n    }\r\n    /**当前视窗由缩放模式导致的 X 轴缩放系数。*/\r\n    get clientScaleX() {\r\n        return this._transform ? this._transform.getScaleX() : 1;\r\n    }\r\n    /**当前视窗由缩放模式导致的 Y 轴缩放系数。*/\r\n    get clientScaleY() {\r\n        return this._transform ? this._transform.getScaleY() : 1;\r\n    }\r\n    /**\r\n     * <p>场景布局类型。</p>\r\n     * <p><ul>取值范围：\r\n     * <li>\"none\" ：不更改屏幕</li>\r\n     * <li>\"horizontal\" ：自动横屏</li>\r\n     * <li>\"vertical\" ：自动竖屏</li>\r\n     * </ul></p>\r\n     */\r\n    get screenMode() {\r\n        return this._screenMode;\r\n    }\r\n    set screenMode(value) {\r\n        this._screenMode = value;\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ repaint(type = _SpriteConst__WEBPACK_IMPORTED_MODULE_4__[\"SpriteConst\"].REPAINT_CACHE) {\r\n        this._repaint |= type;\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ parentRepaint(type = _SpriteConst__WEBPACK_IMPORTED_MODULE_4__[\"SpriteConst\"].REPAINT_CACHE) {\r\n    }\r\n    /**@private */\r\n    _loop() {\r\n        this._globalRepaintGet = this._globalRepaintSet;\r\n        this._globalRepaintSet = false;\r\n        this.render(_renders_Render__WEBPACK_IMPORTED_MODULE_10__[\"Render\"]._context, 0, 0);\r\n        return true;\r\n    }\r\n    /**@private */\r\n    getFrameTm() {\r\n        return this._frameStartTime;\r\n    }\r\n    /**@private */\r\n    _onmouseMove(e) {\r\n        this._mouseMoveTime = _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].now();\r\n    }\r\n    /**\r\n     * <p>获得距当前帧开始后，过了多少时间，单位为毫秒。</p>\r\n     * <p>可以用来判断函数内时间消耗，通过合理控制每帧函数处理消耗时长，避免一帧做事情太多，对复杂计算分帧处理，能有效降低帧率波动。</p>\r\n     */\r\n    getTimeFromFrameStart() {\r\n        return _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].now() - this._frameStartTime;\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ set visible(value) {\r\n        if (this.visible !== value) {\r\n            super.visible = value;\r\n            var style = _renders_Render__WEBPACK_IMPORTED_MODULE_10__[\"Render\"]._mainCanvas.source.style;\r\n            style.visibility = value ? \"visible\" : \"hidden\";\r\n        }\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ render(context, x, y) {\r\n        //临时\r\n        Stage._dbgSprite.graphics.clear();\r\n        if (this._frameRate === Stage.FRAME_SLEEP) {\r\n            var now = _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].now();\r\n            if (now - this._frameStartTime >= 1000)\r\n                this._frameStartTime = now;\r\n            else\r\n                return;\r\n        }\r\n        else {\r\n            if (!this._visible) {\r\n                this._renderCount++;\r\n                if (this._renderCount % 5 === 0) {\r\n                    _utils_CallLater__WEBPACK_IMPORTED_MODULE_12__[\"CallLater\"].I._update();\r\n                    _utils_Stat__WEBPACK_IMPORTED_MODULE_15__[\"Stat\"].loopCount++;\r\n                    this._updateTimers();\r\n                }\r\n                return;\r\n            }\r\n            this._frameStartTime = _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].now();\r\n        }\r\n        this._renderCount++;\r\n        var frameMode = this._frameRate === Stage.FRAME_MOUSE ? (((this._frameStartTime - this._mouseMoveTime) < 2000) ? Stage.FRAME_FAST : Stage.FRAME_SLOW) : this._frameRate;\r\n        var isFastMode = (frameMode !== Stage.FRAME_SLOW);\r\n        var isDoubleLoop = (this._renderCount % 2 === 0);\r\n        _utils_Stat__WEBPACK_IMPORTED_MODULE_15__[\"Stat\"].renderSlow = !isFastMode;\r\n        if (isFastMode || isDoubleLoop) {\r\n            _utils_CallLater__WEBPACK_IMPORTED_MODULE_12__[\"CallLater\"].I._update();\r\n            _utils_Stat__WEBPACK_IMPORTED_MODULE_15__[\"Stat\"].loopCount++;\r\n            if (this.renderingEnabled) {\r\n                for (var i = 0, n = this._scene3Ds.length; i < n; i++) //更新3D场景,必须提出来,否则在脚本中移除节点会导致BUG\r\n                    this._scene3Ds[i]._update();\r\n                context.clear();\r\n                super.render(context, x, y);\r\n                _utils_Stat__WEBPACK_IMPORTED_MODULE_15__[\"Stat\"]._show && _utils_Stat__WEBPACK_IMPORTED_MODULE_15__[\"Stat\"]._sp && _utils_Stat__WEBPACK_IMPORTED_MODULE_15__[\"Stat\"]._sp.render(context, x, y);\r\n            }\r\n        }\r\n        Stage._dbgSprite.render(context, 0, 0);\r\n        if (isFastMode || !isDoubleLoop) {\r\n            if (this.renderingEnabled) {\r\n                _utils_RunDriver__WEBPACK_IMPORTED_MODULE_14__[\"RunDriver\"].clear(this._bgColor);\r\n                context.flush();\r\n                _utils_VectorGraphManager__WEBPACK_IMPORTED_MODULE_16__[\"VectorGraphManager\"].instance && _utils_VectorGraphManager__WEBPACK_IMPORTED_MODULE_16__[\"VectorGraphManager\"].getInstance().endDispose();\r\n            }\r\n            this._updateTimers();\r\n        }\r\n    }\r\n    renderToNative(context, x, y) {\r\n        this._renderCount++;\r\n        if (!this._visible) {\r\n            if (this._renderCount % 5 === 0) {\r\n                _utils_CallLater__WEBPACK_IMPORTED_MODULE_12__[\"CallLater\"].I._update();\r\n                _utils_Stat__WEBPACK_IMPORTED_MODULE_15__[\"Stat\"].loopCount++;\r\n                this._updateTimers();\r\n            }\r\n            return;\r\n        }\r\n        //update\r\n        _utils_CallLater__WEBPACK_IMPORTED_MODULE_12__[\"CallLater\"].I._update();\r\n        _utils_Stat__WEBPACK_IMPORTED_MODULE_15__[\"Stat\"].loopCount++;\r\n        //render\r\n        if (this.renderingEnabled) {\r\n            for (var i = 0, n = this._scene3Ds.length; i < n; i++) //更新3D场景,必须提出来,否则在脚本中移除节点会导致BUG\r\n                this._scene3Ds[i]._update();\r\n            context.clear();\r\n            super.render(context, x, y);\r\n            _utils_Stat__WEBPACK_IMPORTED_MODULE_15__[\"Stat\"]._show && _utils_Stat__WEBPACK_IMPORTED_MODULE_15__[\"Stat\"]._sp && _utils_Stat__WEBPACK_IMPORTED_MODULE_15__[\"Stat\"]._sp.render(context, x, y);\r\n        }\r\n        //commit submit\r\n        if (this.renderingEnabled) {\r\n            _utils_RunDriver__WEBPACK_IMPORTED_MODULE_14__[\"RunDriver\"].clear(this._bgColor);\r\n            context.flush();\r\n            _utils_VectorGraphManager__WEBPACK_IMPORTED_MODULE_16__[\"VectorGraphManager\"].instance && _utils_VectorGraphManager__WEBPACK_IMPORTED_MODULE_16__[\"VectorGraphManager\"].getInstance().endDispose();\r\n        }\r\n        this._updateTimers();\r\n    }\r\n    _updateTimers() {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].systemTimer._update();\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].startTimer._update();\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].physicsTimer._update();\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].updateTimer._update();\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].lateTimer._update();\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].timer._update();\r\n    }\r\n    /**\r\n     * <p>是否开启全屏，用户点击后进入全屏。</p>\r\n     * <p>兼容性提示：部分浏览器不允许点击进入全屏，比如Iphone等。</p>\r\n     */\r\n    set fullScreenEnabled(value) {\r\n        var document = _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].document;\r\n        var canvas = _renders_Render__WEBPACK_IMPORTED_MODULE_10__[\"Render\"].canvas;\r\n        if (value) {\r\n            canvas.addEventListener('mousedown', this._requestFullscreen);\r\n            canvas.addEventListener('touchstart', this._requestFullscreen);\r\n            document.addEventListener(\"fullscreenchange\", this._fullScreenChanged);\r\n            document.addEventListener(\"mozfullscreenchange\", this._fullScreenChanged);\r\n            document.addEventListener(\"webkitfullscreenchange\", this._fullScreenChanged);\r\n            document.addEventListener(\"msfullscreenchange\", this._fullScreenChanged);\r\n        }\r\n        else {\r\n            canvas.removeEventListener('mousedown', this._requestFullscreen);\r\n            canvas.removeEventListener('touchstart', this._requestFullscreen);\r\n            document.removeEventListener(\"fullscreenchange\", this._fullScreenChanged);\r\n            document.removeEventListener(\"mozfullscreenchange\", this._fullScreenChanged);\r\n            document.removeEventListener(\"webkitfullscreenchange\", this._fullScreenChanged);\r\n            document.removeEventListener(\"msfullscreenchange\", this._fullScreenChanged);\r\n        }\r\n    }\r\n    get frameRate() {\r\n        if (!_renders_Render__WEBPACK_IMPORTED_MODULE_10__[\"Render\"].isConchApp) {\r\n            return this._frameRate;\r\n        }\r\n        else {\r\n            return this._frameRateNative;\r\n        }\r\n    }\r\n    set frameRate(value) {\r\n        if (!_renders_Render__WEBPACK_IMPORTED_MODULE_10__[\"Render\"].isConchApp) {\r\n            this._frameRate = value;\r\n        }\r\n        else {\r\n            var c = window.conch;\r\n            switch (value) {\r\n                case Stage.FRAME_FAST:\r\n                    c.config.setLimitFPS(60);\r\n                    break;\r\n                case Stage.FRAME_MOUSE:\r\n                    c.config.setMouseFrame(2000);\r\n                    break;\r\n                case Stage.FRAME_SLOW:\r\n                    c.config.setSlowFrame(true);\r\n                    break;\r\n                case Stage.FRAME_SLEEP:\r\n                    c.config.setLimitFPS(1);\r\n                    break;\r\n            }\r\n            this._frameRateNative = value;\r\n        }\r\n    }\r\n    /**@private */\r\n    _requestFullscreen() {\r\n        var element = _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].document.documentElement;\r\n        if (element.requestFullscreen) {\r\n            element.requestFullscreen();\r\n        }\r\n        else if (element.mozRequestFullScreen) {\r\n            element.mozRequestFullScreen();\r\n        }\r\n        else if (element.webkitRequestFullscreen) {\r\n            element.webkitRequestFullscreen();\r\n        }\r\n        else if (element.msRequestFullscreen) {\r\n            element.msRequestFullscreen();\r\n        }\r\n    }\r\n    /**@private */\r\n    _fullScreenChanged() {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].stage.event(_events_Event__WEBPACK_IMPORTED_MODULE_6__[\"Event\"].FULL_SCREEN_CHANGE);\r\n    }\r\n    /**退出全屏模式*/\r\n    exitFullscreen() {\r\n        var document = _utils_Browser__WEBPACK_IMPORTED_MODULE_11__[\"Browser\"].document;\r\n        if (document.exitFullscreen) {\r\n            document.exitFullscreen();\r\n        }\r\n        else if (document.mozCancelFullScreen) {\r\n            document.mozCancelFullScreen();\r\n        }\r\n        else if (document.webkitExitFullscreen) {\r\n            document.webkitExitFullscreen();\r\n        }\r\n    }\r\n    /**@private */\r\n    isGlobalRepaint() {\r\n        return this._globalRepaintGet;\r\n    }\r\n    /**@private */\r\n    setGlobalRepaint() {\r\n        this._globalRepaintSet = true;\r\n    }\r\n    /**@private */\r\n    add3DUI(uibase) {\r\n        var uiroot = uibase.rootView;\r\n        if (this._3dUI.indexOf(uiroot) >= 0)\r\n            return;\r\n        this._3dUI.push(uiroot);\r\n    }\r\n    /**@private */\r\n    remove3DUI(uibase) {\r\n        var uiroot = uibase.rootView;\r\n        var p = this._3dUI.indexOf(uiroot);\r\n        if (p >= 0) {\r\n            this._3dUI.splice(p, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n/**应用保持设计宽高不变，不缩放不变形，stage的宽高等于设计宽高。*/\r\nStage.SCALE_NOSCALE = \"noscale\";\r\n/**应用根据屏幕大小铺满全屏，非等比缩放会变形，stage的宽高等于设计宽高。*/\r\nStage.SCALE_EXACTFIT = \"exactfit\";\r\n/**应用显示全部内容，按照最小比率缩放，等比缩放不变形，一边可能会留空白，stage的宽高等于设计宽高。*/\r\nStage.SCALE_SHOWALL = \"showall\";\r\n/**应用按照最大比率缩放显示，宽或高方向会显示一部分，等比缩放不变形，stage的宽高等于设计宽高。*/\r\nStage.SCALE_NOBORDER = \"noborder\";\r\n/**应用保持设计宽高不变，不缩放不变形，stage的宽高等于屏幕宽高。*/\r\nStage.SCALE_FULL = \"full\";\r\n/**应用保持设计宽度不变，高度根据屏幕比缩放，stage的宽度等于设计高度，高度根据屏幕比率大小而变化*/\r\nStage.SCALE_FIXED_WIDTH = \"fixedwidth\";\r\n/**应用保持设计高度不变，宽度根据屏幕比缩放，stage的高度等于设计宽度，宽度根据屏幕比率大小而变化*/\r\nStage.SCALE_FIXED_HEIGHT = \"fixedheight\";\r\n/**应用保持设计比例不变，全屏显示全部内容(类似showall，但showall非全屏，会有黑边)，根据屏幕长宽比，自动选择使用SCALE_FIXED_WIDTH或SCALE_FIXED_HEIGHT*/\r\nStage.SCALE_FIXED_AUTO = \"fixedauto\";\r\n/**画布水平居左对齐。*/\r\nStage.ALIGN_LEFT = \"left\";\r\n/**画布水平居右对齐。*/\r\nStage.ALIGN_RIGHT = \"right\";\r\n/**画布水平居中对齐。*/\r\nStage.ALIGN_CENTER = \"center\";\r\n/**画布垂直居上对齐。*/\r\nStage.ALIGN_TOP = \"top\";\r\n/**画布垂直居中对齐。*/\r\nStage.ALIGN_MIDDLE = \"middle\";\r\n/**画布垂直居下对齐。*/\r\nStage.ALIGN_BOTTOM = \"bottom\";\r\n/**不更改屏幕。*/\r\nStage.SCREEN_NONE = \"none\";\r\n/**自动横屏。*/\r\nStage.SCREEN_HORIZONTAL = \"horizontal\";\r\n/**自动竖屏。*/\r\nStage.SCREEN_VERTICAL = \"vertical\";\r\n/**全速模式，以60的帧率运行。*/\r\nStage.FRAME_FAST = \"fast\";\r\n/**慢速模式，以30的帧率运行。*/\r\nStage.FRAME_SLOW = \"slow\";\r\n/**自动模式，以30的帧率运行，但鼠标活动后会自动加速到60，鼠标不动2秒后降低为30帧，以节省消耗。*/\r\nStage.FRAME_MOUSE = \"mouse\";\r\n/**休眠模式，以1的帧率运行*/\r\nStage.FRAME_SLEEP = \"sleep\";\r\n/**@private */\r\nStage._dbgSprite = new _Sprite__WEBPACK_IMPORTED_MODULE_0__[\"Sprite\"]();\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/Stage.ts?");

/***/ }),

/***/ "./src/core/laya/display/Text.ts":
/*!***************************************!*\
  !*** ./src/core/laya/display/Text.ts ***!
  \***************************************/
/*! exports provided: Text */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Text\", function() { return Text; });\n/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Sprite */ \"./src/core/laya/display/Sprite.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _SpriteConst__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ././SpriteConst */ \"./src/core/laya/display/SpriteConst.ts\");\n/* harmony import */ var _css_TextStyle__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./css/TextStyle */ \"./src/core/laya/display/css/TextStyle.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _maths_Point__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../maths/Point */ \"./src/core/laya/maths/Point.ts\");\n/* harmony import */ var _maths_Rectangle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../maths/Rectangle */ \"./src/core/laya/maths/Rectangle.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _utils_WordText__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/WordText */ \"./src/core/laya/utils/WordText.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 文本内容发生改变后调度。\r\n * @eventType Event.CHANGE\r\n */\r\n/*[Event(name = \"change\", type = \"laya.events.Event\")]*/\r\n/**\r\n * <p> <code>Text</code> 类用于创建显示对象以显示文本。</p>\r\n * <p>\r\n * 注意：如果运行时系统找不到设定的字体，则用系统默认的字体渲染文字，从而导致显示异常。(通常电脑上显示正常，在一些移动端因缺少设置的字体而显示异常)。\r\n * </p>\r\n * @example\r\n * package\r\n * {\r\n * \timport laya.display.Text;\r\n * \tpublic class Text_Example\r\n * \t{\r\n * \t\tpublic function Text_Example()\r\n * \t\t{\r\n * \t\t\tLaya.init(640, 800);//设置游戏画布宽高、渲染模式。\r\n * \t\t\tLaya.stage.bgColor = \"#efefef\";//设置画布的背景颜色。\r\n * \t\t\tonInit();\r\n * \t\t}\r\n * \t\tprivate function onInit():void\r\n * \t\t{\r\n * \t\t\tvar text:Text = new Text();//创建一个 Text 类的实例对象 text 。\r\n * \t\t\ttext.text = \"这个是一个 Text 文本示例。\";\r\n * \t\t\ttext.color = \"#008fff\";//设置 text 的文本颜色。\r\n * \t\t\ttext.font = \"Arial\";//设置 text 的文本字体。\r\n * \t\t\ttext.bold = true;//设置 text 的文本显示为粗体。\r\n * \t\t\ttext.fontSize = 30;//设置 text 的字体大小。\r\n * \t\t\ttext.wordWrap = true;//设置 text 的文本自动换行。\r\n * \t\t\ttext.x = 100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。\r\n * \t\t\ttext.y = 100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。\r\n * \t\t\ttext.width = 300;//设置 text 的宽度。\r\n * \t\t\ttext.height = 200;//设置 text 的高度。\r\n * \t\t\ttext.italic = true;//设置 text 的文本显示为斜体。\r\n * \t\t\ttext.borderColor = \"#fff000\";//设置 text 的文本边框颜色。\r\n * \t\t\tLaya.stage.addChild(text);//将 text 添加到显示列表。\r\n * \t\t}\r\n * \t}\r\n * }\r\n * @example\r\n * Text_Example();\r\n * function Text_Example()\r\n * {\r\n *     Laya.init(640, 800);//设置游戏画布宽高、渲染模式。\r\n *     Laya.stage.bgColor = \"#efefef\";//设置画布的背景颜色。\r\n *     onInit();\r\n * }\r\n * function onInit()\r\n * {\r\n *     var text = new laya.display.Text();//创建一个 Text 类的实例对象 text 。\r\n *     text.text = \"这个是一个 Text 文本示例。\";\r\n *     text.color = \"#008fff\";//设置 text 的文本颜色。\r\n *     text.font = \"Arial\";//设置 text 的文本字体。\r\n *     text.bold = true;//设置 text 的文本显示为粗体。\r\n *     text.fontSize = 30;//设置 text 的字体大小。\r\n *     text.wordWrap = true;//设置 text 的文本自动换行。\r\n *     text.x = 100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。\r\n *     text.y = 100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。\r\n *     text.width = 300;//设置 text 的宽度。\r\n *     text.height = 200;//设置 text 的高度。\r\n *     text.italic = true;//设置 text 的文本显示为斜体。\r\n *     text.borderColor = \"#fff000\";//设置 text 的文本边框颜色。\r\n *     Laya.stage.addChild(text);//将 text 添加到显示列表。\r\n * }\r\n * @example\r\n * class Text_Example {\r\n *     constructor() {\r\n *         Laya.init(640, 800);//设置游戏画布宽高、渲染模式。\r\n *         Laya.stage.bgColor = \"#efefef\";//设置画布的背景颜色。\r\n *         this.onInit();\r\n *     }\r\n *     private onInit(): void {\r\n *         var text: laya.display.Text = new laya.display.Text();//创建一个 Text 类的实例对象 text 。\r\n *         text.text = \"这个是一个 Text 文本示例。\";\r\n *         text.color = \"#008fff\";//设置 text 的文本颜色。\r\n *         text.font = \"Arial\";//设置 text 的文本字体。\r\n *         text.bold = true;//设置 text 的文本显示为粗体。\r\n *         text.fontSize = 30;//设置 text 的字体大小。\r\n *         text.wordWrap = true;//设置 text 的文本自动换行。\r\n *         text.x = 100;//设置 text 对象的属性 x 的值，用于控制 text 对象的显示位置。\r\n *         text.y = 100;//设置 text 对象的属性 y 的值，用于控制 text 对象的显示位置。\r\n *         text.width = 300;//设置 text 的宽度。\r\n *         text.height = 200;//设置 text 的高度。\r\n *         text.italic = true;//设置 text 的文本显示为斜体。\r\n *         text.borderColor = \"#fff000\";//设置 text 的文本边框颜色。\r\n *         Laya.stage.addChild(text);//将 text 添加到显示列表。\r\n *     }\r\n * }\r\n */\r\nclass Text extends _Sprite__WEBPACK_IMPORTED_MODULE_0__[\"Sprite\"] {\r\n    /**\r\n     * 创建一个新的 <code>Text</code> 实例。\r\n     */\r\n    constructor() {\r\n        super();\r\n        /**@private 表示文本的宽度，以像素为单位。*/\r\n        this._textWidth = 0;\r\n        /**@private 表示文本的高度，以像素为单位。*/\r\n        this._textHeight = 0;\r\n        /**@private 存储文字行数信息。*/\r\n        this._lines = [];\r\n        /**@private 保存每行宽度*/\r\n        this._lineWidths = [];\r\n        /**@private 文本的内容位置 X 轴信息。*/\r\n        this._startX = 0;\r\n        /**@private 文本的内容位置X轴信息。 */\r\n        this._startY = 0;\r\n        /**@private */\r\n        this._charSize = {};\r\n        /**@private */\r\n        this._valign = \"top\";\r\n        /**@private */\r\n        this._fontSize = Text.defaultFontSize;\r\n        /**@private */\r\n        this._font = Text.defaultFont;\r\n        /**@private */\r\n        this._color = \"#000000\";\r\n        /**@private */\r\n        this._singleCharRender = false; // 拆分渲染\r\n        /**\r\n         * <p>overflow 指定文本超出文本域后的行为。其值为\"hidden\"、\"visible\"和\"scroll\"之一。</p>\r\n         * <p>性能从高到低依次为：hidden > visible > scroll。</p>\r\n         */\r\n        this.overflow = Text.VISIBLE;\r\n        this._style = _css_TextStyle__WEBPACK_IMPORTED_MODULE_3__[\"TextStyle\"].EMPTY;\r\n    }\r\n    /**@private */\r\n    static defaultFontStr() {\r\n        return Text.defaultFontSize + \"px \" + Text.defaultFont;\r\n    }\r\n    /**\r\n     * @private\r\n     * 获取样式。\r\n     * @return  样式 Style 。\r\n     */\r\n    /*override*/ getStyle() {\r\n        this._style === _css_TextStyle__WEBPACK_IMPORTED_MODULE_3__[\"TextStyle\"].EMPTY && (this._style = _css_TextStyle__WEBPACK_IMPORTED_MODULE_3__[\"TextStyle\"].create());\r\n        return this._style;\r\n    }\r\n    _getTextStyle() {\r\n        if (this._style === _css_TextStyle__WEBPACK_IMPORTED_MODULE_3__[\"TextStyle\"].EMPTY) {\r\n            this._style = _css_TextStyle__WEBPACK_IMPORTED_MODULE_3__[\"TextStyle\"].create();\r\n        }\r\n        return this._style;\r\n    }\r\n    /**\r\n     * 注册位图字体。\r\n     * @param\tname\t\t位图字体的名称。\r\n     * @param\tbitmapFont\t位图字体文件。\r\n     */\r\n    static registerBitmapFont(name, bitmapFont) {\r\n        Text._bitmapFonts || (Text._bitmapFonts = {});\r\n        Text._bitmapFonts[name] = bitmapFont;\r\n    }\r\n    /**\r\n     * 移除注册的位图字体文件。\r\n     * @param\tname\t\t位图字体的名称。\r\n     * @param\tdestroy\t\t是否销毁指定的字体文件。\r\n     */\r\n    static unregisterBitmapFont(name, destroy = true) {\r\n        if (Text._bitmapFonts && Text._bitmapFonts[name]) {\r\n            var tBitmapFont = Text._bitmapFonts[name];\r\n            if (destroy)\r\n                tBitmapFont.destroy();\r\n            delete Text._bitmapFonts[name];\r\n        }\r\n    }\r\n    /**@inheritDoc */\r\n    /*override*/ destroy(destroyChild = true) {\r\n        super.destroy(destroyChild);\r\n        this._clipPoint = null;\r\n        this._lines = null;\r\n        this._lineWidths = null;\r\n        // 注意_words是一个数组（例如有换行）\r\n        this._words && this._words.forEach(function (w) {\r\n            w.cleanCache();\r\n        });\r\n        this._words = null;\r\n        this._charSize = null;\r\n    }\r\n    /**\r\n     * @private\r\n     * @inheritDoc\r\n     */\r\n    /*override*/ _getBoundPointsM(ifRotate = false) {\r\n        var rec = _maths_Rectangle__WEBPACK_IMPORTED_MODULE_6__[\"Rectangle\"].TEMP;\r\n        rec.setTo(0, 0, this.width, this.height);\r\n        return rec._getBoundPoints();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    /*override*/ getGraphicBounds(realSize = false) {\r\n        var rec = _maths_Rectangle__WEBPACK_IMPORTED_MODULE_6__[\"Rectangle\"].TEMP;\r\n        rec.setTo(0, 0, this.width, this.height);\r\n        return rec;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    /*override*/ get width() {\r\n        if (this._width)\r\n            return this._width;\r\n        return this.textWidth + this.padding[1] + this.padding[3];\r\n    }\r\n    /*override*/ set width(value) {\r\n        if (value != this._width) {\r\n            super.set_width(value);\r\n            this.isChanged = true;\r\n            if (this.borderColor) {\r\n                this._setBorderStyleColor(0, 0, this.width, this.height, this.borderColor, 1);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _getCSSStyle() {\r\n        return this._style;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    /*override*/ get height() {\r\n        if (this._height)\r\n            return this._height;\r\n        return this.textHeight;\r\n    }\r\n    /*override*/ set height(value) {\r\n        if (value != this._height) {\r\n            super.set_height(value);\r\n            this.isChanged = true;\r\n            if (this.borderColor) {\r\n                this._setBorderStyleColor(0, 0, this.width, this.height, this.borderColor, 1);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 表示文本的宽度，以像素为单位。\r\n     */\r\n    get textWidth() {\r\n        this._isChanged && _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.runCallLater(this, this.typeset);\r\n        return this._textWidth;\r\n    }\r\n    /**\r\n     * 表示文本的高度，以像素为单位。\r\n     */\r\n    get textHeight() {\r\n        this._isChanged && _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.runCallLater(this, this.typeset);\r\n        return this._textHeight;\r\n    }\r\n    /** 当前文本的内容字符串。*/\r\n    get text() {\r\n        return this._text || \"\";\r\n    }\r\n    // 为了转ts。ts不支持super.get set\r\n    get_text() {\r\n        return this._text || \"\";\r\n    }\r\n    set_text(v) {\r\n        this.text = v;\r\n    }\r\n    set text(value) {\r\n        if (this._text !== value) {\r\n            this.lang(value + \"\");\r\n            this.isChanged = true;\r\n            this.event(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].CHANGE);\r\n            if (this.borderColor) {\r\n                this._setBorderStyleColor(0, 0, this.width, this.height, this.borderColor, 1);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * <p>根据指定的文本，从语言包中取当前语言的文本内容。并对此文本中的{i}文本进行替换。</p>\r\n     * <p>设置Text.langPacks语言包后，即可使用lang获取里面的语言</p>\r\n     * <p>例如：\r\n     * <li>（1）text 的值为“我的名字”，先取到这个文本对应的当前语言版本里的值“My name”，将“My name”设置为当前文本的内容。</li>\r\n     * <li>（2）text 的值为“恭喜你赢得{0}个钻石，{1}经验。”，arg1 的值为100，arg2 的值为200。\r\n     * \t\t\t则先取到这个文本对应的当前语言版本里的值“Congratulations on your winning {0} diamonds, {1} experience.”，\r\n     * \t\t\t然后将文本里的{0}、{1}，依据括号里的数字从0开始替换为 arg1、arg2 的值。\r\n     * \t\t\t将替换处理后的文本“Congratulations on your winning 100 diamonds, 200 experience.”设置为当前文本的内容。\r\n     * </li>\r\n     * </p>\r\n     * @param\ttext 文本内容。\r\n     * @param\t...args 文本替换参数。\r\n     */\r\n    lang(text, arg1 = null, arg2 = null, arg3 = null, arg4 = null, arg5 = null, arg6 = null, arg7 = null, arg8 = null, arg9 = null, arg10 = null) {\r\n        text = Text.langPacks && Text.langPacks[text] ? Text.langPacks[text] : text;\r\n        if (arguments.length < 2) {\r\n            this._text = text;\r\n        }\r\n        else {\r\n            for (var i = 0, n = arguments.length; i < n; i++) {\r\n                text = text.replace(\"{\" + i + \"}\", arguments[i + 1]);\r\n            }\r\n            this._text = text;\r\n        }\r\n    }\r\n    /**\r\n     * <p>文本的字体名称，以字符串形式表示。</p>\r\n     * <p>默认值为：\"Arial\"，可以通过Text.defaultFont设置默认字体。</p>\r\n     * <p>如果运行时系统找不到设定的字体，则用系统默认的字体渲染文字，从而导致显示异常。(通常电脑上显示正常，在一些移动端因缺少设置的字体而显示异常)。</p>\r\n     * @see laya.display.Text#defaultFont\r\n     */\r\n    get font() {\r\n        return this._font;\r\n    }\r\n    set font(value) {\r\n        if (this._style.currBitmapFont) {\r\n            this._getTextStyle().currBitmapFont = null;\r\n            this.scale(1, 1);\r\n        }\r\n        if (Text._bitmapFonts && Text._bitmapFonts[value]) {\r\n            this._getTextStyle().currBitmapFont = Text._bitmapFonts[value];\r\n        }\r\n        this._font = value;\r\n        this.isChanged = true;\r\n    }\r\n    /**\r\n     * <p>指定文本的字体大小（以像素为单位）。</p>\r\n     * <p>默认为20像素，可以通过 <code>Text.defaultFontSize</code> 设置默认大小。</p>\r\n     */\r\n    get fontSize() {\r\n        return this._fontSize;\r\n    }\r\n    set fontSize(value) {\r\n        if (this._fontSize != value) {\r\n            this._fontSize = value;\r\n            this.isChanged = true;\r\n        }\r\n    }\r\n    /**\r\n     * <p>指定文本是否为粗体字。</p>\r\n     * <p>默认值为 false，这意味着不使用粗体字。如果值为 true，则文本为粗体字。</p>\r\n     */\r\n    get bold() {\r\n        return this._style.bold;\r\n    }\r\n    set bold(value) {\r\n        this._getTextStyle().bold = value;\r\n        this.isChanged = true;\r\n    }\r\n    /**\r\n     * <p>表示文本的颜色值。可以通过 <code>Text.defaultColor</code> 设置默认颜色。</p>\r\n     * <p>默认值为黑色。</p>\r\n     */\r\n    get color() {\r\n        return this._color;\r\n    }\r\n    set color(value) {\r\n        if (this._color != value) {\r\n            this._color = value;\r\n            //如果仅仅更新颜色，无需重新排版\r\n            if (!this._isChanged && this._graphics) {\r\n                this._graphics.replaceTextColor(this.color);\r\n            }\r\n            else {\r\n                this.isChanged = true;\r\n            }\r\n        }\r\n    }\r\n    // for转ts。 ts不支持 super.get/set\r\n    get_color() {\r\n        return this._color;\r\n    }\r\n    set_color(v) {\r\n        this.color = v;\r\n    }\r\n    /**\r\n     * <p>表示使用此文本格式的文本是否为斜体。</p>\r\n     * <p>默认值为 false，这意味着不使用斜体。如果值为 true，则文本为斜体。</p>\r\n     */\r\n    get italic() {\r\n        return this._style.italic;\r\n    }\r\n    set italic(value) {\r\n        this._getTextStyle().italic = value;\r\n        this.isChanged = true;\r\n    }\r\n    /**\r\n     * <p>表示文本的水平显示方式。</p>\r\n     * <p><b>取值：</b>\r\n     * <li>\"left\"： 居左对齐显示。</li>\r\n     * <li>\"center\"： 居中对齐显示。</li>\r\n     * <li>\"right\"： 居右对齐显示。</li>\r\n     * </p>\r\n     */\r\n    get align() {\r\n        return this._style.align;\r\n    }\r\n    set align(value) {\r\n        this._getTextStyle().align = value;\r\n        this.isChanged = true;\r\n    }\r\n    /**\r\n     * <p>表示文本的垂直显示方式。</p>\r\n     * <p><b>取值：</b>\r\n     * <li>\"top\"： 居顶部对齐显示。</li>\r\n     * <li>\"middle\"： 居中对齐显示。</li>\r\n     * <li>\"bottom\"： 居底部对齐显示。</li>\r\n     * </p>\r\n     */\r\n    get valign() {\r\n        return this._valign;\r\n    }\r\n    set valign(value) {\r\n        this._valign = value;\r\n        this.isChanged = true;\r\n    }\r\n    /**\r\n     * <p>表示文本是否自动换行，默认为false。</p>\r\n     * <p>若值为true，则自动换行；否则不自动换行。</p>\r\n     */\r\n    get wordWrap() {\r\n        return this._style.wordWrap;\r\n    }\r\n    set wordWrap(value) {\r\n        this._getTextStyle().wordWrap = value;\r\n        this.isChanged = true;\r\n    }\r\n    /**\r\n     * 垂直行间距（以像素为单位）。\r\n     */\r\n    get leading() {\r\n        return this._style.leading;\r\n    }\r\n    set leading(value) {\r\n        this._getTextStyle().leading = value;\r\n        this.isChanged = true;\r\n    }\r\n    /**\r\n     * <p>边距信息。</p>\r\n     * <p>数据格式：[上边距，右边距，下边距，左边距]（边距以像素为单位）。</p>\r\n     */\r\n    get padding() {\r\n        return this._style.padding;\r\n    }\r\n    set padding(value) {\r\n        if (value instanceof String) {\r\n            var arr;\r\n            arr = value.split(\",\");\r\n            var i, len;\r\n            len = arr.length;\r\n            while (arr.length < 4) {\r\n                arr.push(0);\r\n            }\r\n            for (i = 0; i < len; i++) {\r\n                arr[i] = parseFloat(arr[i]) || 0;\r\n            }\r\n            value = arr;\r\n        }\r\n        this._getTextStyle().padding = value;\r\n        this.isChanged = true;\r\n    }\r\n    /**\r\n     * 文本背景颜色，以字符串表示。\r\n     */\r\n    get bgColor() {\r\n        return this._style.bgColor;\r\n    }\r\n    set bgColor(value) {\r\n        this._getTextStyle().bgColor = value;\r\n        this._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].STYLE;\r\n        this._setBgStyleColor(0, 0, this.width, this.height, value);\r\n        this._setRenderType(this._renderType);\r\n        this.isChanged = true;\r\n    }\r\n    // fot ts\r\n    set_bgColor(v) {\r\n        this.bgColor = v;\r\n    }\r\n    get_bgColor() {\r\n        return this.bgColor;\r\n    }\r\n    /**\r\n     * 文本边框背景颜色，以字符串表示。\r\n     */\r\n    get borderColor() {\r\n        return this._style.borderColor;\r\n    }\r\n    set borderColor(value) {\r\n        this._getTextStyle().borderColor = value;\r\n        this._renderType |= _SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].STYLE;\r\n        this._setBorderStyleColor(0, 0, this.width, this.height, value, 1);\r\n        this._setRenderType(this._renderType);\r\n        this.isChanged = true;\r\n    }\r\n    /**\r\n     * <p>描边宽度（以像素为单位）。</p>\r\n     * <p>默认值0，表示不描边。</p>\r\n     */\r\n    get stroke() {\r\n        return this._style.stroke;\r\n    }\r\n    set stroke(value) {\r\n        this._getTextStyle().stroke = value;\r\n        this.isChanged = true;\r\n    }\r\n    /**\r\n     * <p>描边颜色，以字符串表示。</p>\r\n     * <p>默认值为 \"#000000\"（黑色）;</p>\r\n     */\r\n    get strokeColor() {\r\n        return this._style.strokeColor;\r\n    }\r\n    set strokeColor(value) {\r\n        this._getTextStyle().strokeColor = value;\r\n        this.isChanged = true;\r\n    }\r\n    /**\r\n     * @private\r\n     * 一个布尔值，表示文本的属性是否有改变。若为true表示有改变。\r\n     */\r\n    set isChanged(value) {\r\n        if (this._isChanged !== value) {\r\n            this._isChanged = value;\r\n            value && _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.callLater(this, this.typeset);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _getContextFont() {\r\n        return (this.italic ? \"italic \" : \"\") + (this.bold ? \"bold \" : \"\") + this.fontSize + \"px \" + (_utils_Browser__WEBPACK_IMPORTED_MODULE_8__[\"Browser\"].onIPhone ? (Text.fontFamilyMap[this.font] || this.font) : this.font);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _isPassWordMode() {\r\n        var style = this._style;\r\n        var password = style.asPassword;\r\n        if ((\"prompt\" in this) && this['prompt'] == this._text)\r\n            password = false;\r\n        return password;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _getPassWordTxt(txt) {\r\n        var len = txt.length;\r\n        var word;\r\n        word = \"\";\r\n        for (var j = len; j > 0; j--) {\r\n            word += \"●\";\r\n        }\r\n        return word;\r\n    }\r\n    /**\r\n     * @private\r\n     * 渲染文字。\r\n     * @param\tbegin 开始渲染的行索引。\r\n     * @param\tvisibleLineCount 渲染的行数。\r\n     */\r\n    _renderText() {\r\n        var padding = this.padding;\r\n        var visibleLineCount = this._lines.length;\r\n        // overflow为scroll或visible时会截行\r\n        if (this.overflow != Text.VISIBLE) {\r\n            visibleLineCount = Math.min(visibleLineCount, Math.floor((this.height - padding[0] - padding[2]) / (this.leading + this._charSize.height)) + 1);\r\n        }\r\n        var beginLine = this.scrollY / (this._charSize.height + this.leading) | 0;\r\n        var graphics = this.graphics;\r\n        graphics.clear(true);\r\n        var ctxFont = this._getContextFont();\r\n        _utils_Browser__WEBPACK_IMPORTED_MODULE_8__[\"Browser\"].context.font = ctxFont;\r\n        //处理垂直对齐\r\n        var startX = padding[3];\r\n        var textAlgin = \"left\";\r\n        var lines = this._lines;\r\n        var lineHeight = this.leading + this._charSize.height;\r\n        var tCurrBitmapFont = this._style.currBitmapFont;\r\n        if (tCurrBitmapFont) {\r\n            lineHeight = this.leading + tCurrBitmapFont.getMaxHeight();\r\n        }\r\n        var startY = padding[0];\r\n        //处理水平对齐\r\n        if ((!tCurrBitmapFont) && this._width > 0 && this._textWidth <= this._width) {\r\n            if (this.align == \"right\") {\r\n                textAlgin = \"right\";\r\n                startX = this._width - padding[1];\r\n            }\r\n            else if (this.align == \"center\") {\r\n                textAlgin = \"center\";\r\n                startX = this._width * 0.5 + padding[3] - padding[1];\r\n            }\r\n        }\r\n        if (this._height > 0) {\r\n            var tempVAlign = (this._textHeight > this._height) ? \"top\" : this.valign;\r\n            if (tempVAlign === \"middle\")\r\n                startY = (this._height - visibleLineCount * lineHeight) * 0.5 + padding[0] - padding[2];\r\n            else if (tempVAlign === \"bottom\")\r\n                startY = this._height - visibleLineCount * lineHeight - padding[2];\r\n        }\r\n        var style = this._style;\r\n        //drawBg(style);\r\n        if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize) {\r\n            var bitmapScale = tCurrBitmapFont.fontSize / this.fontSize;\r\n        }\r\n        //渲染\r\n        if (this._clipPoint) {\r\n            graphics.save();\r\n            if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize) {\r\n                var tClipWidth;\r\n                var tClipHeight;\r\n                this._width ? tClipWidth = (this._width - padding[3] - padding[1]) : tClipWidth = this._textWidth;\r\n                this._height ? tClipHeight = (this._height - padding[0] - padding[2]) : tClipHeight = this._textHeight;\r\n                tClipWidth *= bitmapScale;\r\n                tClipHeight *= bitmapScale;\r\n                graphics.clipRect(padding[3], padding[0], tClipWidth, tClipHeight);\r\n            }\r\n            else {\r\n                graphics.clipRect(padding[3], padding[0], this._width ? (this._width - padding[3] - padding[1]) : this._textWidth, this._height ? (this._height - padding[0] - padding[2]) : this._textHeight);\r\n            }\r\n            this.repaint();\r\n        }\r\n        var password = style.asPassword;\r\n        // 输入框的prompt始终显示明文\r\n        if ((\"prompt\" in this) && this['prompt'] == this._text)\r\n            password = false;\r\n        var x = 0, y = 0;\r\n        var end = Math.min(this._lines.length, visibleLineCount + beginLine) || 1;\r\n        for (var i = beginLine; i < end; i++) {\r\n            var word = lines[i];\r\n            var _word;\r\n            if (password) {\r\n                var len = word.length;\r\n                word = \"\";\r\n                for (var j = len; j > 0; j--) {\r\n                    word += \"●\";\r\n                }\r\n            }\r\n            if (word == null)\r\n                word = \"\";\r\n            x = startX - (this._clipPoint ? this._clipPoint.x : 0);\r\n            y = startY + lineHeight * i - (this._clipPoint ? this._clipPoint.y : 0);\r\n            this.underline && this._drawUnderline(textAlgin, x, y, i);\r\n            if (tCurrBitmapFont) {\r\n                var tWidth = this.width;\r\n                if (tCurrBitmapFont.autoScaleSize) {\r\n                    tWidth = this.width * bitmapScale;\r\n                }\r\n                tCurrBitmapFont._drawText(word, this, x, y, this.align, tWidth);\r\n            }\r\n            else {\r\n                this._words || (this._words = []);\r\n                if (this._words.length > (i - beginLine)) {\r\n                    _word = this._words[i - beginLine];\r\n                }\r\n                else {\r\n                    _word = new _utils_WordText__WEBPACK_IMPORTED_MODULE_9__[\"WordText\"]();\r\n                    this._words.push(_word);\r\n                }\r\n                _word.setText(word);\r\n                _word.splitRender = this._singleCharRender;\r\n                style.stroke ? graphics.fillBorderText(_word, x, y, ctxFont, this.color, style.strokeColor, style.stroke, textAlgin) : graphics.fillText(_word, x, y, ctxFont, this.color, textAlgin);\r\n            }\r\n        }\r\n        if (tCurrBitmapFont && tCurrBitmapFont.autoScaleSize) {\r\n            var tScale = 1 / bitmapScale;\r\n            this.scale(tScale, tScale);\r\n        }\r\n        if (this._clipPoint)\r\n            graphics.restore();\r\n        this._startX = startX;\r\n        this._startY = startY;\r\n    }\r\n    /**\r\n     * @private\r\n     * 绘制下划线\r\n     * @param\tx 本行坐标\r\n     * @param\ty 本行坐标\r\n     * @param\tlineIndex 本行索引\r\n     */\r\n    _drawUnderline(align, x, y, lineIndex) {\r\n        var lineWidth = this._lineWidths[lineIndex];\r\n        switch (align) {\r\n            case 'center':\r\n                x -= lineWidth / 2;\r\n                break;\r\n            case 'right':\r\n                x -= lineWidth;\r\n                break;\r\n            case 'left':\r\n            default:\r\n                break;\r\n        }\r\n        y += this._charSize.height;\r\n        this._graphics.drawLine(x, y, x + lineWidth, y, this.underlineColor || this.color, 1);\r\n    }\r\n    /**\r\n     * <p>排版文本。</p>\r\n     * <p>进行宽高计算，渲染、重绘文本。</p>\r\n     */\r\n    typeset() {\r\n        this._isChanged = false;\r\n        if (!this._text) {\r\n            this._clipPoint = null;\r\n            this._textWidth = this._textHeight = 0;\r\n            this.graphics.clear(true);\r\n            return;\r\n        }\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_7__[\"Render\"].isConchApp) {\r\n            window.conchTextCanvas.font = this._getContextFont();\r\n            ;\r\n        }\r\n        else {\r\n            _utils_Browser__WEBPACK_IMPORTED_MODULE_8__[\"Browser\"].context.font = this._getContextFont();\r\n        }\r\n        this._lines.length = 0;\r\n        this._lineWidths.length = 0;\r\n        if (this._isPassWordMode()) //如果是password显示状态应该使用密码符号计算\r\n         {\r\n            this._parseLines(this._getPassWordTxt(this._text));\r\n        }\r\n        else\r\n            this._parseLines(this._text);\r\n        this._evalTextSize();\r\n        //启用Viewport\r\n        if (this._checkEnabledViewportOrNot())\r\n            this._clipPoint || (this._clipPoint = new _maths_Point__WEBPACK_IMPORTED_MODULE_5__[\"Point\"](0, 0));\r\n        //否则禁用Viewport\r\n        else\r\n            this._clipPoint = null;\r\n        this._renderText();\r\n    }\r\n    /**@private */\r\n    _evalTextSize() {\r\n        var nw, nh;\r\n        nw = Math.max.apply(this, this._lineWidths);\r\n        //计算textHeight\r\n        if (this._style.currBitmapFont)\r\n            nh = this._lines.length * (this._style.currBitmapFont.getMaxHeight() + this.leading) + this.padding[0] + this.padding[2];\r\n        else\r\n            nh = this._lines.length * (this._charSize.height + this.leading) + this.padding[0] + this.padding[2];\r\n        if (nw != this._textWidth || nh != this._textHeight) {\r\n            this._textWidth = nw;\r\n            this._textHeight = nh;\r\n            //TODO:\r\n            //if (!_width || !_height)\r\n            //conchModel && conchModel.size(_width || _textWidth, _height || _textHeight);\r\n        }\r\n    }\r\n    /**@private */\r\n    _checkEnabledViewportOrNot() {\r\n        return this.overflow == Text.SCROLL && ((this._width > 0 && this._textWidth > this._width) || (this._height > 0 && this._textHeight > this._height)); // 设置了宽高并且超出了\r\n    }\r\n    /**\r\n     * <p>快速更改显示文本。不进行排版计算，效率较高。</p>\r\n     * <p>如果只更改文字内容，不更改文字样式，建议使用此接口，能提高效率。</p>\r\n     * @param text 文本内容。\r\n     */\r\n    changeText(text) {\r\n        if (this._text !== text) {\r\n            this.lang(text + \"\");\r\n            if (this._graphics && this._graphics.replaceText(this._text)) {\r\n                //repaint();\r\n            }\r\n            else {\r\n                this.typeset();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 分析文本换行。\r\n     */\r\n    _parseLines(text) {\r\n        //自动换行和HIDDEN都需要计算换行位置或截断位置\r\n        var needWordWrapOrTruncate = this.wordWrap || this.overflow == Text.HIDDEN;\r\n        if (needWordWrapOrTruncate) {\r\n            var wordWrapWidth = this._getWordWrapWidth();\r\n        }\r\n        var bitmapFont = this._style.currBitmapFont;\r\n        if (bitmapFont) {\r\n            this._charSize.width = bitmapFont.getMaxWidth();\r\n            this._charSize.height = bitmapFont.getMaxHeight();\r\n        }\r\n        else {\r\n            var measureResult = null;\r\n            if (_renders_Render__WEBPACK_IMPORTED_MODULE_7__[\"Render\"].isConchApp) {\r\n                measureResult = window.conchTextCanvas.measureText(Text._testWord);\r\n            }\r\n            else {\r\n                measureResult = _utils_Browser__WEBPACK_IMPORTED_MODULE_8__[\"Browser\"].context.measureText(Text._testWord);\r\n            }\r\n            if (!measureResult)\r\n                measureResult = { width: 100 };\r\n            this._charSize.width = measureResult.width;\r\n            this._charSize.height = (measureResult.height || this.fontSize);\r\n        }\r\n        var lines = text.replace(/\\r\\n/g, \"\\n\").split(\"\\n\");\r\n        for (var i = 0, n = lines.length; i < n; i++) {\r\n            var line = lines[i];\r\n            // 开启了自动换行需要计算换行位置\r\n            // overflow为hidden需要计算截断位置\r\n            if (needWordWrapOrTruncate)\r\n                this._parseLine(line, wordWrapWidth);\r\n            else {\r\n                this._lineWidths.push(this._getTextWidth(line));\r\n                this._lines.push(line);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 解析行文本。\r\n     * @param\tline 某行的文本。\r\n     * @param\twordWrapWidth 文本的显示宽度。\r\n     */\r\n    _parseLine(line, wordWrapWidth) {\r\n        var lines = this._lines;\r\n        var maybeIndex = 0;\r\n        var charsWidth;\r\n        var wordWidth;\r\n        var startIndex;\r\n        charsWidth = this._getTextWidth(line);\r\n        //优化1，如果一行小于宽度，则直接跳过遍历\r\n        if (charsWidth <= wordWrapWidth) {\r\n            lines.push(line);\r\n            this._lineWidths.push(charsWidth);\r\n            return;\r\n        }\r\n        charsWidth = this._charSize.width;\r\n        //优化2，预算第几个字符会超出，减少遍历及字符宽度度量\r\n        maybeIndex = Math.floor(wordWrapWidth / charsWidth);\r\n        (maybeIndex == 0) && (maybeIndex = 1);\r\n        charsWidth = this._getTextWidth(line.substring(0, maybeIndex));\r\n        wordWidth = charsWidth;\r\n        for (var j = maybeIndex, m = line.length; j < m; j++) {\r\n            // 逐字符测量后加入到总宽度中，在某些情况下自动换行不准确。\r\n            // 目前已知在全是字符1的自动换行就会出现这种情况。\r\n            // 考虑性能，保留这种非方式。\r\n            charsWidth = this._getTextWidth(line.charAt(j));\r\n            wordWidth += charsWidth;\r\n            if (wordWidth > wordWrapWidth) {\r\n                if (this.wordWrap) {\r\n                    //截断换行单词\r\n                    var newLine = line.substring(startIndex, j);\r\n                    if (newLine.charCodeAt(newLine.length - 1) < 255) {\r\n                        //按照英文单词字边界截取 因此将会无视中文\r\n                        let execResult = /(?:\\w|-)+$/.exec(newLine);\r\n                        if (execResult) {\r\n                            j = execResult.index + startIndex;\r\n                            //此行只够容纳这一个单词 强制换行\r\n                            if (execResult.index == 0)\r\n                                j += newLine.length;\r\n                            //此行有多个单词 按单词分行\r\n                            else\r\n                                newLine = line.substring(startIndex, j);\r\n                        }\r\n                    }\r\n                    //如果自动换行，则另起一行\r\n                    lines.push(newLine);\r\n                    this._lineWidths.push(wordWidth - charsWidth);\r\n                    //如果非自动换行，则只截取字符串\r\n                    startIndex = j;\r\n                    if (j + maybeIndex < m) {\r\n                        j += maybeIndex;\r\n                        charsWidth = this._getTextWidth(line.substring(startIndex, j));\r\n                        wordWidth = charsWidth;\r\n                        j--;\r\n                    }\r\n                    else {\r\n                        //此处执行将不会在循环结束后再push一次\r\n                        lines.push(line.substring(startIndex, m));\r\n                        this._lineWidths.push(this._getTextWidth(lines[lines.length - 1]));\r\n                        startIndex = -1;\r\n                        break;\r\n                    }\r\n                }\r\n                else if (this.overflow == Text.HIDDEN) {\r\n                    lines.push(line.substring(0, j));\r\n                    this._lineWidths.push(this._getTextWidth(lines[lines.length - 1]));\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        if (this.wordWrap && startIndex != -1) {\r\n            lines.push(line.substring(startIndex, m));\r\n            this._lineWidths.push(this._getTextWidth(lines[lines.length - 1]));\r\n        }\r\n    }\r\n    /**@private */\r\n    _getTextWidth(text) {\r\n        var bitmapFont = this._style.currBitmapFont;\r\n        if (bitmapFont)\r\n            return bitmapFont.getTextWidth(text);\r\n        else {\r\n            if (_renders_Render__WEBPACK_IMPORTED_MODULE_7__[\"Render\"].isConchApp) {\r\n                return window.conchTextCanvas.measureText(text).width;\r\n                ;\r\n            }\r\n            else\r\n                return _utils_Browser__WEBPACK_IMPORTED_MODULE_8__[\"Browser\"].context.measureText(text).width;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 获取换行所需的宽度。\r\n     */\r\n    _getWordWrapWidth() {\r\n        var p = this.padding;\r\n        var w;\r\n        var bitmapFont = this._style.currBitmapFont;\r\n        if (bitmapFont && bitmapFont.autoScaleSize)\r\n            w = this._width * (bitmapFont.fontSize / this.fontSize);\r\n        else\r\n            w = this._width;\r\n        if (w <= 0) {\r\n            w = this.wordWrap ? 100 : _utils_Browser__WEBPACK_IMPORTED_MODULE_8__[\"Browser\"].width;\r\n        }\r\n        w <= 0 && (w = 100);\r\n        return w - p[3] - p[1];\r\n    }\r\n    /**\r\n     * 返回字符在本类实例的父坐标系下的坐标。\r\n     * @param charIndex\t索引位置。\r\n     * @param out\t\t（可选）输出的Point引用。\r\n     * @return Point 字符在本类实例的父坐标系下的坐标。如果out参数不为空，则将结果赋值给指定的Point对象，否则创建一个新的Point对象返回。建议使用Point.TEMP作为out参数，可以省去Point对象创建和垃圾回收的开销，尤其是在需要频繁执行的逻辑中，比如帧循环和MOUSE_MOVE事件回调函数里面。\r\n     */\r\n    getCharPoint(charIndex, out = null) {\r\n        this._isChanged && _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.runCallLater(this, this.typeset);\r\n        var len = 0, lines = this._lines, startIndex = 0;\r\n        for (var i = 0, n = lines.length; i < n; i++) {\r\n            len += lines[i].length;\r\n            if (charIndex < len) {\r\n                var line = i;\r\n                break;\r\n            }\r\n            startIndex = len;\r\n        }\r\n        //计算字符的宽度\r\n        var ctxFont = (this.italic ? \"italic \" : \"\") + (this.bold ? \"bold \" : \"\") + this.fontSize + \"px \" + this.font;\r\n        _utils_Browser__WEBPACK_IMPORTED_MODULE_8__[\"Browser\"].context.font = ctxFont;\r\n        var width = this._getTextWidth(this._text.substring(startIndex, charIndex));\r\n        var point = out || new _maths_Point__WEBPACK_IMPORTED_MODULE_5__[\"Point\"]();\r\n        return point.setTo(this._startX + width - (this._clipPoint ? this._clipPoint.x : 0), this._startY + line * (this._charSize.height + this.leading) - (this._clipPoint ? this._clipPoint.y : 0));\r\n    }\r\n    /**\r\n     * <p>设置横向滚动量。</p>\r\n     * <p>即使设置超出滚动范围的值，也会被自动限制在可能的最大值处。</p>\r\n     */\r\n    set scrollX(value) {\r\n        if (this.overflow != Text.SCROLL || (this.textWidth < this._width || !this._clipPoint))\r\n            return;\r\n        value = value < this.padding[3] ? this.padding[3] : value;\r\n        var maxScrollX = this._textWidth - this._width;\r\n        value = value > maxScrollX ? maxScrollX : value;\r\n        this._clipPoint.x = value;\r\n        this._renderText();\r\n    }\r\n    /**\r\n     * 获取横向滚动量。\r\n     */\r\n    get scrollX() {\r\n        if (!this._clipPoint)\r\n            return 0;\r\n        return this._clipPoint.x;\r\n    }\r\n    /**\r\n     * 设置纵向滚动量（px)。即使设置超出滚动范围的值，也会被自动限制在可能的最大值处。\r\n     */\r\n    set scrollY(value) {\r\n        if (this.overflow != Text.SCROLL || (this.textHeight < this._height || !this._clipPoint))\r\n            return;\r\n        value = value < this.padding[0] ? this.padding[0] : value;\r\n        var maxScrollY = this._textHeight - this._height;\r\n        value = value > maxScrollY ? maxScrollY : value;\r\n        this._clipPoint.y = value;\r\n        this._renderText();\r\n    }\r\n    /**\r\n     * 获取纵向滚动量。\r\n     */\r\n    get scrollY() {\r\n        if (!this._clipPoint)\r\n            return 0;\r\n        return this._clipPoint.y;\r\n    }\r\n    /**\r\n     * 获取横向可滚动最大值。\r\n     */\r\n    get maxScrollX() {\r\n        return (this.textWidth < this._width) ? 0 : this._textWidth - this._width;\r\n    }\r\n    /**\r\n     * 获取纵向可滚动最大值。\r\n     */\r\n    get maxScrollY() {\r\n        return (this.textHeight < this._height) ? 0 : this._textHeight - this._height;\r\n    }\r\n    /**返回文字行信息*/\r\n    get lines() {\r\n        if (this._isChanged)\r\n            this.typeset();\r\n        return this._lines;\r\n    }\r\n    /**下划线的颜色，为null则使用字体颜色。*/\r\n    get underlineColor() {\r\n        return this._style.underlineColor;\r\n    }\r\n    set underlineColor(value) {\r\n        this._getTextStyle().underlineColor = value;\r\n        if (!this._isChanged)\r\n            this._renderText();\r\n    }\r\n    /**是否显示下划线。*/\r\n    get underline() {\r\n        return this._style.underline;\r\n    }\r\n    set underline(value) {\r\n        this._getTextStyle().underline = value;\r\n    }\r\n    /** 设置是否单个字符渲染，如果Textd的内容一直改变，例如是一个增加的数字，就设置这个，防止无效占用缓存 */\r\n    set singleCharRender(value) {\r\n        this._singleCharRender = value;\r\n    }\r\n    get singleCharRender() {\r\n        return this._singleCharRender;\r\n    }\r\n}\r\n/**visible不进行任何裁切。*/\r\nText.VISIBLE = \"visible\";\r\n/**scroll 不显示文本域外的字符像素，并且支持 scroll 接口。*/\r\nText.SCROLL = \"scroll\";\r\n/**hidden 不显示超出文本域的字符。*/\r\nText.HIDDEN = \"hidden\";\r\n/**默认文本大小，默认为12*/\r\nText.defaultFontSize = 12;\r\n/**默认文本字体，默认为Arial*/\r\nText.defaultFont = \"Arial\";\r\n/**WebGL下，文字会被拆分为单个字符进行渲染，一些语系不能拆开显示，比如阿拉伯文，这时可以设置isComplexText=true，禁用文字拆分。*/\r\nText.isComplexText = false;\r\n/**在IOS下，一些字体会找不到，引擎提供了字体映射功能，比如默认会把 \"黑体\" 映射为 \"黑体-简\"，更多映射，可以自己添加*/\r\nText.fontFamilyMap = { \"报隶\": \"报隶-简\", \"黑体\": \"黑体-简\", \"楷体\": \"楷体-简\", \"兰亭黑\": \"兰亭黑-简\", \"隶变\": \"隶变-简\", \"凌慧体\": \"凌慧体-简\", \"翩翩体\": \"翩翩体-简\", \"苹方\": \"苹方-简\", \"手札体\": \"手札体-简\", \"宋体\": \"宋体-简\", \"娃娃体\": \"娃娃体-简\", \"魏碑\": \"魏碑-简\", \"行楷\": \"行楷-简\", \"雅痞\": \"雅痞-简\", \"圆体\": \"圆体-简\" };\r\n/**@private 预测长度的文字，用来提升计算效率，不同语言找一个最大的字符即可*/\r\nText._testWord = \"游\";\r\n//TODO:\r\nText.CharacterCache = true;\r\n/**是否是从右向左的显示顺序*/\r\nText.RightToLeft = false;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/Text.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/AlphaCmd.ts":
/*!***********************************************!*\
  !*** ./src/core/laya/display/cmd/AlphaCmd.ts ***!
  \***********************************************/
/*! exports provided: AlphaCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AlphaCmd\", function() { return AlphaCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 透明命令\r\n */\r\nclass AlphaCmd {\r\n    /**@private */\r\n    static create(alpha) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"AlphaCmd\", AlphaCmd);\r\n        cmd.alpha = alpha;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"AlphaCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.alpha(this.alpha);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return AlphaCmd.ID;\r\n    }\r\n}\r\nAlphaCmd.ID = \"Alpha\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/AlphaCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/ClipRectCmd.ts":
/*!**************************************************!*\
  !*** ./src/core/laya/display/cmd/ClipRectCmd.ts ***!
  \**************************************************/
/*! exports provided: ClipRectCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ClipRectCmd\", function() { return ClipRectCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 裁剪命令\r\n */\r\nclass ClipRectCmd {\r\n    /**@private */\r\n    static create(x, y, width, height) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"ClipRectCmd\", ClipRectCmd);\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.width = width;\r\n        cmd.height = height;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"ClipRectCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.clipRect(this.x + gx, this.y + gy, this.width, this.height);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return ClipRectCmd.ID;\r\n    }\r\n}\r\nClipRectCmd.ID = \"ClipRect\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/ClipRectCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/Draw9GridTexture.ts":
/*!*******************************************************!*\
  !*** ./src/core/laya/display/cmd/Draw9GridTexture.ts ***!
  \*******************************************************/
/*! exports provided: Draw9GridTexture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Draw9GridTexture\", function() { return Draw9GridTexture; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 绘制带九宫格信息的图片\r\n * @private\r\n */\r\nclass Draw9GridTexture {\r\n    constructor() {\r\n    }\r\n    /**@private */\r\n    static create(texture, x, y, width, height, sizeGrid) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"Draw9GridTexture\", Draw9GridTexture);\r\n        cmd.texture = texture;\r\n        texture._addReference();\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.width = width;\r\n        cmd.height = height;\r\n        cmd.sizeGrid = sizeGrid;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.texture._removeReference();\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"Draw9GridTexture\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.drawTextureWithSizeGrid(this.texture, this.x, this.y, this.width, this.height, this.sizeGrid, gx, gy);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return Draw9GridTexture.ID;\r\n    }\r\n}\r\nDraw9GridTexture.ID = \"Draw9GridTexture\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/Draw9GridTexture.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/DrawCircleCmd.ts":
/*!****************************************************!*\
  !*** ./src/core/laya/display/cmd/DrawCircleCmd.ts ***!
  \****************************************************/
/*! exports provided: DrawCircleCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawCircleCmd\", function() { return DrawCircleCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 绘制圆形\r\n */\r\nclass DrawCircleCmd {\r\n    /**@private */\r\n    static create(x, y, radius, fillColor, lineColor, lineWidth, vid) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"DrawCircleCmd\", DrawCircleCmd);\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.radius = radius;\r\n        cmd.fillColor = fillColor;\r\n        cmd.lineColor = lineColor;\r\n        cmd.lineWidth = lineWidth;\r\n        cmd.vid = vid;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.fillColor = null;\r\n        this.lineColor = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"DrawCircleCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context._drawCircle(this.x + gx, this.y + gy, this.radius, this.fillColor, this.lineColor, this.lineWidth, this.vid);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return DrawCircleCmd.ID;\r\n    }\r\n}\r\nDrawCircleCmd.ID = \"DrawCircle\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/DrawCircleCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/DrawCurvesCmd.ts":
/*!****************************************************!*\
  !*** ./src/core/laya/display/cmd/DrawCurvesCmd.ts ***!
  \****************************************************/
/*! exports provided: DrawCurvesCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawCurvesCmd\", function() { return DrawCurvesCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 绘制曲线\r\n */\r\nclass DrawCurvesCmd {\r\n    /**@private */\r\n    static create(x, y, points, lineColor, lineWidth) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"DrawCurvesCmd\", DrawCurvesCmd);\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.points = points;\r\n        cmd.lineColor = lineColor;\r\n        cmd.lineWidth = lineWidth;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.points = null;\r\n        this.lineColor = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"DrawCurvesCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.drawCurves(this.x + gx, this.y + gy, this.points, this.lineColor, this.lineWidth);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return DrawCurvesCmd.ID;\r\n    }\r\n}\r\nDrawCurvesCmd.ID = \"DrawCurves\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/DrawCurvesCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/DrawImageCmd.ts":
/*!***************************************************!*\
  !*** ./src/core/laya/display/cmd/DrawImageCmd.ts ***!
  \***************************************************/
/*! exports provided: DrawImageCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawImageCmd\", function() { return DrawImageCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 绘制图片\r\n */\r\nclass DrawImageCmd {\r\n    /**@private */\r\n    static create(texture, x, y, width, height) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"DrawImageCmd\", DrawImageCmd);\r\n        cmd.texture = texture;\r\n        texture._addReference();\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.width = width;\r\n        cmd.height = height;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.texture._removeReference();\r\n        this.texture = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"DrawImageCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.drawTexture(this.texture, this.x + gx, this.y + gy, this.width, this.height);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return DrawImageCmd.ID;\r\n    }\r\n}\r\nDrawImageCmd.ID = \"DrawImage\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/DrawImageCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/DrawLineCmd.ts":
/*!**************************************************!*\
  !*** ./src/core/laya/display/cmd/DrawLineCmd.ts ***!
  \**************************************************/
/*! exports provided: DrawLineCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawLineCmd\", function() { return DrawLineCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 绘制单条曲线\r\n */\r\nclass DrawLineCmd {\r\n    /**@private */\r\n    static create(fromX, fromY, toX, toY, lineColor, lineWidth, vid) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"DrawLineCmd\", DrawLineCmd);\r\n        cmd.fromX = fromX;\r\n        cmd.fromY = fromY;\r\n        cmd.toX = toX;\r\n        cmd.toY = toY;\r\n        cmd.lineColor = lineColor;\r\n        cmd.lineWidth = lineWidth;\r\n        cmd.vid = vid;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"DrawLineCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context._drawLine(gx, gy, this.fromX, this.fromY, this.toX, this.toY, this.lineColor, this.lineWidth, this.vid);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return DrawLineCmd.ID;\r\n    }\r\n}\r\nDrawLineCmd.ID = \"DrawLine\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/DrawLineCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/DrawLinesCmd.ts":
/*!***************************************************!*\
  !*** ./src/core/laya/display/cmd/DrawLinesCmd.ts ***!
  \***************************************************/
/*! exports provided: DrawLinesCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawLinesCmd\", function() { return DrawLinesCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 绘制连续曲线\r\n */\r\nclass DrawLinesCmd {\r\n    /**@private */\r\n    static create(x, y, points, lineColor, lineWidth, vid) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"DrawLinesCmd\", DrawLinesCmd);\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.points = points;\r\n        cmd.lineColor = lineColor;\r\n        cmd.lineWidth = lineWidth;\r\n        cmd.vid = vid;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.points = null;\r\n        this.lineColor = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"DrawLinesCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context._drawLines(this.x + gx, this.y + gy, this.points, this.lineColor, this.lineWidth, this.vid);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return DrawLinesCmd.ID;\r\n    }\r\n}\r\nDrawLinesCmd.ID = \"DrawLines\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/DrawLinesCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/DrawPathCmd.ts":
/*!**************************************************!*\
  !*** ./src/core/laya/display/cmd/DrawPathCmd.ts ***!
  \**************************************************/
/*! exports provided: DrawPathCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawPathCmd\", function() { return DrawPathCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 根据路径绘制矢量图形\r\n */\r\nclass DrawPathCmd {\r\n    /**@private */\r\n    static create(x, y, paths, brush, pen) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"DrawPathCmd\", DrawPathCmd);\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.paths = paths;\r\n        cmd.brush = brush;\r\n        cmd.pen = pen;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.paths = null;\r\n        this.brush = null;\r\n        this.pen = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"DrawPathCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context._drawPath(this.x + gx, this.y + gy, this.paths, this.brush, this.pen);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return DrawPathCmd.ID;\r\n    }\r\n}\r\nDrawPathCmd.ID = \"DrawPath\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/DrawPathCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/DrawPieCmd.ts":
/*!*************************************************!*\
  !*** ./src/core/laya/display/cmd/DrawPieCmd.ts ***!
  \*************************************************/
/*! exports provided: DrawPieCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawPieCmd\", function() { return DrawPieCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 绘制扇形\r\n */\r\nclass DrawPieCmd {\r\n    /**@private */\r\n    static create(x, y, radius, startAngle, endAngle, fillColor, lineColor, lineWidth, vid) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"DrawPieCmd\", DrawPieCmd);\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.radius = radius;\r\n        cmd._startAngle = startAngle;\r\n        cmd._endAngle = endAngle;\r\n        cmd.fillColor = fillColor;\r\n        cmd.lineColor = lineColor;\r\n        cmd.lineWidth = lineWidth;\r\n        cmd.vid = vid;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.fillColor = null;\r\n        this.lineColor = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"DrawPieCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context._drawPie(this.x + gx, this.y + gy, this.radius, this._startAngle, this._endAngle, this.fillColor, this.lineColor, this.lineWidth, this.vid);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return DrawPieCmd.ID;\r\n    }\r\n    /**\r\n     * 开始角度。\r\n     */\r\n    get startAngle() {\r\n        return this._startAngle * 180 / Math.PI;\r\n    }\r\n    set startAngle(value) {\r\n        this._startAngle = value * Math.PI / 180;\r\n    }\r\n    /**\r\n     * 结束角度。\r\n     */\r\n    get endAngle() {\r\n        return this._endAngle * 180 / Math.PI;\r\n    }\r\n    set endAngle(value) {\r\n        this._endAngle = value * Math.PI / 180;\r\n    }\r\n}\r\nDrawPieCmd.ID = \"DrawPie\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/DrawPieCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/DrawPolyCmd.ts":
/*!**************************************************!*\
  !*** ./src/core/laya/display/cmd/DrawPolyCmd.ts ***!
  \**************************************************/
/*! exports provided: DrawPolyCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawPolyCmd\", function() { return DrawPolyCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 绘制多边形\r\n */\r\nclass DrawPolyCmd {\r\n    /**@private */\r\n    static create(x, y, points, fillColor, lineColor, lineWidth, isConvexPolygon, vid) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"DrawPolyCmd\", DrawPolyCmd);\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.points = points;\r\n        cmd.fillColor = fillColor;\r\n        cmd.lineColor = lineColor;\r\n        cmd.lineWidth = lineWidth;\r\n        cmd.isConvexPolygon = isConvexPolygon;\r\n        cmd.vid = vid;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.points = null;\r\n        this.fillColor = null;\r\n        this.lineColor = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"DrawPolyCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context._drawPoly(this.x + gx, this.y + gy, this.points, this.fillColor, this.lineColor, this.lineWidth, this.isConvexPolygon, this.vid);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return DrawPolyCmd.ID;\r\n    }\r\n}\r\nDrawPolyCmd.ID = \"DrawPoly\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/DrawPolyCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/DrawRectCmd.ts":
/*!**************************************************!*\
  !*** ./src/core/laya/display/cmd/DrawRectCmd.ts ***!
  \**************************************************/
/*! exports provided: DrawRectCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawRectCmd\", function() { return DrawRectCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 绘制矩形\r\n */\r\nclass DrawRectCmd {\r\n    /**@private */\r\n    static create(x, y, width, height, fillColor, lineColor, lineWidth) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"DrawRectCmd\", DrawRectCmd);\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.width = width;\r\n        cmd.height = height;\r\n        cmd.fillColor = fillColor;\r\n        cmd.lineColor = lineColor;\r\n        cmd.lineWidth = lineWidth;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.fillColor = null;\r\n        this.lineColor = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"DrawRectCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.drawRect(this.x + gx, this.y + gy, this.width, this.height, this.fillColor, this.lineColor, this.lineWidth);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return DrawRectCmd.ID;\r\n    }\r\n}\r\nDrawRectCmd.ID = \"DrawRect\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/DrawRectCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/DrawTextureCmd.ts":
/*!*****************************************************!*\
  !*** ./src/core/laya/display/cmd/DrawTextureCmd.ts ***!
  \*****************************************************/
/*! exports provided: DrawTextureCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawTextureCmd\", function() { return DrawTextureCmd; });\n/* harmony import */ var _filters_ColorFilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../filters/ColorFilter */ \"./src/core/laya/filters/ColorFilter.ts\");\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n\r\n/**\r\n * 绘制单个贴图\r\n */\r\nclass DrawTextureCmd {\r\n    constructor() {\r\n        this.colorFlt = null;\r\n    }\r\n    /**@private */\r\n    static create(texture, x, y, width, height, matrix, alpha, color, blendMode) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_1__[\"Pool\"].getItemByClass(\"DrawTextureCmd\", DrawTextureCmd);\r\n        cmd.texture = texture;\r\n        texture._addReference();\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.width = width;\r\n        cmd.height = height;\r\n        cmd.matrix = matrix;\r\n        cmd.alpha = alpha;\r\n        cmd.color = color;\r\n        cmd.blendMode = blendMode;\r\n        if (color) {\r\n            cmd.colorFlt = new _filters_ColorFilter__WEBPACK_IMPORTED_MODULE_0__[\"ColorFilter\"]();\r\n            cmd.colorFlt.setColor(color);\r\n        }\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.texture._removeReference();\r\n        this.texture = null;\r\n        this.matrix = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_1__[\"Pool\"].recover(\"DrawTextureCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.drawTextureWithTransform(this.texture, this.x, this.y, this.width, this.height, this.matrix, gx, gy, this.alpha, this.blendMode, this.colorFlt);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return DrawTextureCmd.ID;\r\n    }\r\n}\r\nDrawTextureCmd.ID = \"DrawTexture\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/DrawTextureCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/DrawTexturesCmd.ts":
/*!******************************************************!*\
  !*** ./src/core/laya/display/cmd/DrawTexturesCmd.ts ***!
  \******************************************************/
/*! exports provided: DrawTexturesCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawTexturesCmd\", function() { return DrawTexturesCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 根据坐标集合绘制多个贴图\r\n */\r\nclass DrawTexturesCmd {\r\n    /**@private */\r\n    static create(texture, pos) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"DrawTexturesCmd\", DrawTexturesCmd);\r\n        cmd.texture = texture;\r\n        texture._addReference();\r\n        cmd.pos = pos;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.texture._removeReference();\r\n        this.texture = null;\r\n        this.pos = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"DrawTexturesCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.drawTextures(this.texture, this.pos, gx, gy);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return DrawTexturesCmd.ID;\r\n    }\r\n}\r\nDrawTexturesCmd.ID = \"DrawTextures\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/DrawTexturesCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/DrawTrianglesCmd.ts":
/*!*******************************************************!*\
  !*** ./src/core/laya/display/cmd/DrawTrianglesCmd.ts ***!
  \*******************************************************/
/*! exports provided: DrawTrianglesCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawTrianglesCmd\", function() { return DrawTrianglesCmd; });\n/* harmony import */ var _filters_ColorFilter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../filters/ColorFilter */ \"./src/core/laya/filters/ColorFilter.ts\");\n/* harmony import */ var _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ColorUtils */ \"./src/core/laya/utils/ColorUtils.ts\");\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n\r\n\r\n/**\r\n * 绘制三角形命令\r\n */\r\nclass DrawTrianglesCmd {\r\n    /**@private */\r\n    static create(texture, x, y, vertices, uvs, indices, matrix, alpha, color, blendMode) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_2__[\"Pool\"].getItemByClass(\"DrawTrianglesCmd\", DrawTrianglesCmd);\r\n        cmd.texture = texture;\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.vertices = vertices;\r\n        cmd.uvs = uvs;\r\n        cmd.indices = indices;\r\n        cmd.matrix = matrix;\r\n        cmd.alpha = alpha;\r\n        if (color) {\r\n            cmd.color = new _filters_ColorFilter__WEBPACK_IMPORTED_MODULE_0__[\"ColorFilter\"]();\r\n            var c = _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_1__[\"ColorUtils\"].create(color).arrColor;\r\n            cmd.color.color(c[0] * 255, c[1] * 255, c[2] * 255, c[3] * 255); //TODO 这个好像设置的是加色，这样并不合理\r\n        }\r\n        cmd.blendMode = blendMode;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.texture = null;\r\n        this.vertices = null;\r\n        this.uvs = null;\r\n        this.indices = null;\r\n        this.matrix = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_2__[\"Pool\"].recover(\"DrawTrianglesCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.drawTriangles(this.texture, this.x + gx, this.y + gy, this.vertices, this.uvs, this.indices, this.matrix, this.alpha, this.color, this.blendMode);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return DrawTrianglesCmd.ID;\r\n    }\r\n}\r\nDrawTrianglesCmd.ID = \"DrawTriangles\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/DrawTrianglesCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/FillBorderTextCmd.ts":
/*!********************************************************!*\
  !*** ./src/core/laya/display/cmd/FillBorderTextCmd.ts ***!
  \********************************************************/
/*! exports provided: FillBorderTextCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FillBorderTextCmd\", function() { return FillBorderTextCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 绘制文本边框\r\n */\r\nclass FillBorderTextCmd {\r\n    /**@private */\r\n    static create(text, x, y, font, fillColor, borderColor, lineWidth, textAlign) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"FillBorderTextCmd\", FillBorderTextCmd);\r\n        cmd.text = text;\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.font = font;\r\n        cmd.fillColor = fillColor;\r\n        cmd.borderColor = borderColor;\r\n        cmd.lineWidth = lineWidth;\r\n        cmd.textAlign = textAlign;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"FillBorderTextCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.fillBorderText(this.text, this.x + gx, this.y + gy, this.font, this.fillColor, this.borderColor, this.lineWidth, this.textAlign);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return FillBorderTextCmd.ID;\r\n    }\r\n}\r\nFillBorderTextCmd.ID = \"FillBorderText\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/FillBorderTextCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/FillBorderWordsCmd.ts":
/*!*********************************************************!*\
  !*** ./src/core/laya/display/cmd/FillBorderWordsCmd.ts ***!
  \*********************************************************/
/*! exports provided: FillBorderWordsCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FillBorderWordsCmd\", function() { return FillBorderWordsCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 绘制边框\r\n * @private\r\n */\r\nclass FillBorderWordsCmd {\r\n    /**@private */\r\n    static create(words, x, y, font, fillColor, borderColor, lineWidth) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"FillBorderWordsCmd\", FillBorderWordsCmd);\r\n        cmd.words = words;\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.font = font;\r\n        cmd.fillColor = fillColor;\r\n        cmd.borderColor = borderColor;\r\n        cmd.lineWidth = lineWidth;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.words = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"FillBorderWordsCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.fillBorderWords(this.words, this.x + gx, this.y + gy, this.font, this.fillColor, this.borderColor, this.lineWidth);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return FillBorderWordsCmd.ID;\r\n    }\r\n}\r\nFillBorderWordsCmd.ID = \"FillBorderWords\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/FillBorderWordsCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/FillTextCmd.ts":
/*!**************************************************!*\
  !*** ./src/core/laya/display/cmd/FillTextCmd.ts ***!
  \**************************************************/
/*! exports provided: FillTextCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FillTextCmd\", function() { return FillTextCmd; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _resource_Context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../resource/Context */ \"./src/core/laya/resource/Context.ts\");\n/* harmony import */ var _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/ColorUtils */ \"./src/core/laya/utils/ColorUtils.ts\");\n/* harmony import */ var _utils_FontInfo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/FontInfo */ \"./src/core/laya/utils/FontInfo.ts\");\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n/* harmony import */ var _utils_WordText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/WordText */ \"./src/core/laya/utils/WordText.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 绘制文字\r\n */\r\nclass FillTextCmd {\r\n    constructor() {\r\n        /**@private */\r\n        this._textIsWorldText = false;\r\n        this._fontColor = 0xffffffff;\r\n        this._strokeColor = 0;\r\n        this._fontObj = FillTextCmd._defFontObj;\r\n        this._nTexAlign = 0;\r\n    }\r\n    /**@private */\r\n    static create(text, x, y, font, color, textAlign) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_4__[\"Pool\"].getItemByClass(\"FillTextCmd\", FillTextCmd);\r\n        cmd.text = text;\r\n        cmd._textIsWorldText = text instanceof _utils_WordText__WEBPACK_IMPORTED_MODULE_5__[\"WordText\"];\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.font = font;\r\n        cmd.color = color;\r\n        cmd.textAlign = textAlign;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_4__[\"Pool\"].recover(\"FillTextCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        if (_Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.isGlobalRepaint()) {\r\n            this._textIsWorldText && this._text.cleanCache();\r\n        }\r\n        if (this._textIsWorldText) {\r\n            context._fast_filltext(this._text, this.x + gx, this.y + gy, this._fontObj, this._color, null, 0, this._nTexAlign, 0);\r\n        }\r\n        else {\r\n            context.drawText(this._text, this.x + gx, this.y + gy, this._font, this._color, this._textAlign);\r\n        }\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return FillTextCmd.ID;\r\n    }\r\n    /**\r\n     * 在画布上输出的文本。\r\n     */\r\n    get text() {\r\n        return this._text;\r\n    }\r\n    set text(value) {\r\n        //TODO 问题。 怎么通知native\r\n        this._text = value;\r\n        this._textIsWorldText = value instanceof _utils_WordText__WEBPACK_IMPORTED_MODULE_5__[\"WordText\"];\r\n        this._textIsWorldText && this._text.cleanCache();\r\n    }\r\n    /**\r\n     * 定义字号和字体，比如\"20px Arial\"。\r\n     */\r\n    get font() {\r\n        return this._font;\r\n    }\r\n    set font(value) {\r\n        this._font = value;\r\n        this._fontObj = _utils_FontInfo__WEBPACK_IMPORTED_MODULE_3__[\"FontInfo\"].Parse(value);\r\n        this._textIsWorldText && this._text.cleanCache();\r\n    }\r\n    /**\r\n     * 定义文本颜色，比如\"#ff0000\"。\r\n     */\r\n    get color() {\r\n        return this._color;\r\n    }\r\n    set color(value) {\r\n        this._color = value;\r\n        this._fontColor = _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_2__[\"ColorUtils\"].create(value).numColor;\r\n        this._textIsWorldText && this._text.cleanCache();\r\n    }\r\n    /**\r\n     * 文本对齐方式，可选值：\"left\"，\"center\"，\"right\"。\r\n     */\r\n    get textAlign() {\r\n        return this._textAlign;\r\n    }\r\n    set textAlign(value) {\r\n        this._textAlign = value;\r\n        switch (value) {\r\n            case 'center':\r\n                this._nTexAlign = _resource_Context__WEBPACK_IMPORTED_MODULE_1__[\"Context\"].ENUM_TEXTALIGN_CENTER;\r\n                break;\r\n            case 'right':\r\n                this._nTexAlign = _resource_Context__WEBPACK_IMPORTED_MODULE_1__[\"Context\"].ENUM_TEXTALIGN_RIGHT;\r\n                break;\r\n            default:\r\n                this._nTexAlign = _resource_Context__WEBPACK_IMPORTED_MODULE_1__[\"Context\"].ENUM_TEXTALIGN_DEFAULT;\r\n        }\r\n        this._textIsWorldText && this._text.cleanCache();\r\n    }\r\n}\r\nFillTextCmd.ID = \"FillText\";\r\nFillTextCmd._defFontObj = new _utils_FontInfo__WEBPACK_IMPORTED_MODULE_3__[\"FontInfo\"](null);\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/FillTextCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/FillTextureCmd.ts":
/*!*****************************************************!*\
  !*** ./src/core/laya/display/cmd/FillTextureCmd.ts ***!
  \*****************************************************/
/*! exports provided: FillTextureCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FillTextureCmd\", function() { return FillTextureCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 填充贴图\r\n */\r\nclass FillTextureCmd {\r\n    /**@private */\r\n    static create(texture, x, y, width, height, type, offset, other) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"FillTextureCmd\", FillTextureCmd);\r\n        cmd.texture = texture;\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.width = width;\r\n        cmd.height = height;\r\n        cmd.type = type;\r\n        cmd.offset = offset;\r\n        cmd.other = other;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.texture = null;\r\n        this.offset = null;\r\n        this.other = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"FillTextureCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.fillTexture(this.texture, this.x + gx, this.y + gy, this.width, this.height, this.type, this.offset, this.other);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return FillTextureCmd.ID;\r\n    }\r\n}\r\nFillTextureCmd.ID = \"FillTexture\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/FillTextureCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/FillWordsCmd.ts":
/*!***************************************************!*\
  !*** ./src/core/laya/display/cmd/FillWordsCmd.ts ***!
  \***************************************************/
/*! exports provided: FillWordsCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FillWordsCmd\", function() { return FillWordsCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 填充文字命令\r\n * @private\r\n */\r\nclass FillWordsCmd {\r\n    /**@private */\r\n    static create(words, x, y, font, color) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"FillWordsCmd\", FillWordsCmd);\r\n        cmd.words = words;\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.font = font;\r\n        cmd.color = color;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.words = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"FillWordsCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.fillWords(this.words, this.x + gx, this.y + gy, this.font, this.color);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return FillWordsCmd.ID;\r\n    }\r\n}\r\nFillWordsCmd.ID = \"FillWords\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/FillWordsCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/RestoreCmd.ts":
/*!*************************************************!*\
  !*** ./src/core/laya/display/cmd/RestoreCmd.ts ***!
  \*************************************************/
/*! exports provided: RestoreCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RestoreCmd\", function() { return RestoreCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 恢复命令，和save配套使用\r\n */\r\nclass RestoreCmd {\r\n    /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n    /**@private */\r\n    static create() {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"RestoreCmd\", RestoreCmd);\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"RestoreCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.restore();\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return RestoreCmd.ID;\r\n    }\r\n}\r\nRestoreCmd.ID = \"Restore\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/RestoreCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/RotateCmd.ts":
/*!************************************************!*\
  !*** ./src/core/laya/display/cmd/RotateCmd.ts ***!
  \************************************************/
/*! exports provided: RotateCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RotateCmd\", function() { return RotateCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 旋转命令\r\n */\r\nclass RotateCmd {\r\n    /**@private */\r\n    static create(angle, pivotX, pivotY) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"RotateCmd\", RotateCmd);\r\n        cmd.angle = angle;\r\n        cmd.pivotX = pivotX;\r\n        cmd.pivotY = pivotY;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"RotateCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context._rotate(this.angle, this.pivotX + gx, this.pivotY + gy);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return RotateCmd.ID;\r\n    }\r\n}\r\nRotateCmd.ID = \"Rotate\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/RotateCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/SaveCmd.ts":
/*!**********************************************!*\
  !*** ./src/core/laya/display/cmd/SaveCmd.ts ***!
  \**********************************************/
/*! exports provided: SaveCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SaveCmd\", function() { return SaveCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 存储命令，和restore配套使用\r\n */\r\nclass SaveCmd {\r\n    /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n    /**@private */\r\n    static create() {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"SaveCmd\", SaveCmd);\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"SaveCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.save();\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return SaveCmd.ID;\r\n    }\r\n}\r\nSaveCmd.ID = \"Save\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/SaveCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/ScaleCmd.ts":
/*!***********************************************!*\
  !*** ./src/core/laya/display/cmd/ScaleCmd.ts ***!
  \***********************************************/
/*! exports provided: ScaleCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ScaleCmd\", function() { return ScaleCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 缩放命令\r\n */\r\nclass ScaleCmd {\r\n    /**@private */\r\n    static create(scaleX, scaleY, pivotX, pivotY) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"ScaleCmd\", ScaleCmd);\r\n        cmd.scaleX = scaleX;\r\n        cmd.scaleY = scaleY;\r\n        cmd.pivotX = pivotX;\r\n        cmd.pivotY = pivotY;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"ScaleCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context._scale(this.scaleX, this.scaleY, this.pivotX + gx, this.pivotY + gy);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return ScaleCmd.ID;\r\n    }\r\n}\r\nScaleCmd.ID = \"Scale\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/ScaleCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/StrokeTextCmd.ts":
/*!****************************************************!*\
  !*** ./src/core/laya/display/cmd/StrokeTextCmd.ts ***!
  \****************************************************/
/*! exports provided: StrokeTextCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StrokeTextCmd\", function() { return StrokeTextCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 绘制描边文字\r\n */\r\nclass StrokeTextCmd {\r\n    /**@private */\r\n    static create(text, x, y, font, color, lineWidth, textAlign) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"StrokeTextCmd\", StrokeTextCmd);\r\n        cmd.text = text;\r\n        cmd.x = x;\r\n        cmd.y = y;\r\n        cmd.font = font;\r\n        cmd.color = color;\r\n        cmd.lineWidth = lineWidth;\r\n        cmd.textAlign = textAlign;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"StrokeTextCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.strokeWord(this.text, this.x + gx, this.y + gy, this.font, this.color, this.lineWidth, this.textAlign);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return StrokeTextCmd.ID;\r\n    }\r\n}\r\nStrokeTextCmd.ID = \"StrokeText\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/StrokeTextCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/TransformCmd.ts":
/*!***************************************************!*\
  !*** ./src/core/laya/display/cmd/TransformCmd.ts ***!
  \***************************************************/
/*! exports provided: TransformCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TransformCmd\", function() { return TransformCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 矩阵命令\r\n */\r\nclass TransformCmd {\r\n    /**@private */\r\n    static create(matrix, pivotX, pivotY) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"TransformCmd\", TransformCmd);\r\n        cmd.matrix = matrix;\r\n        cmd.pivotX = pivotX;\r\n        cmd.pivotY = pivotY;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        this.matrix = null;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"TransformCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context._transform(this.matrix, this.pivotX + gx, this.pivotY + gy);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return TransformCmd.ID;\r\n    }\r\n}\r\nTransformCmd.ID = \"Transform\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/TransformCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/cmd/TranslateCmd.ts":
/*!***************************************************!*\
  !*** ./src/core/laya/display/cmd/TranslateCmd.ts ***!
  \***************************************************/
/*! exports provided: TranslateCmd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TranslateCmd\", function() { return TranslateCmd; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * 位移命令\r\n */\r\nclass TranslateCmd {\r\n    /**@private */\r\n    static create(tx, ty) {\r\n        var cmd = _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"TranslateCmd\", TranslateCmd);\r\n        cmd.tx = tx;\r\n        cmd.ty = ty;\r\n        return cmd;\r\n    }\r\n    /**\r\n     * 回收到对象池\r\n     */\r\n    recover() {\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"TranslateCmd\", this);\r\n    }\r\n    /**@private */\r\n    run(context, gx, gy) {\r\n        context.translate(this.tx, this.ty);\r\n    }\r\n    /**@private */\r\n    get cmdID() {\r\n        return TranslateCmd.ID;\r\n    }\r\n}\r\nTranslateCmd.ID = \"Translate\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/cmd/TranslateCmd.ts?");

/***/ }),

/***/ "./src/core/laya/display/css/BoundsStyle.ts":
/*!**************************************************!*\
  !*** ./src/core/laya/display/css/BoundsStyle.ts ***!
  \**************************************************/
/*! exports provided: BoundsStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BoundsStyle\", function() { return BoundsStyle; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * @private\r\n * Graphic bounds数据类\r\n */\r\nclass BoundsStyle {\r\n    /**\r\n     * 重置\r\n     */\r\n    reset() {\r\n        if (this.bounds)\r\n            this.bounds.recover();\r\n        if (this.userBounds)\r\n            this.userBounds.recover();\r\n        this.bounds = null;\r\n        this.userBounds = null;\r\n        this.temBM = null;\r\n        return this;\r\n    }\r\n    /**\r\n     * 回收\r\n     */\r\n    recover() {\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"BoundsStyle\", this.reset());\r\n    }\r\n    /**\r\n     * 创建\r\n     */\r\n    static create() {\r\n        return _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"BoundsStyle\", BoundsStyle);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/css/BoundsStyle.ts?");

/***/ }),

/***/ "./src/core/laya/display/css/CacheStyle.ts":
/*!*************************************************!*\
  !*** ./src/core/laya/display/css/CacheStyle.ts ***!
  \*************************************************/
/*! exports provided: CacheStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CacheStyle\", function() { return CacheStyle; });\n/* harmony import */ var _maths_Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../maths/Point */ \"./src/core/laya/maths/Point.ts\");\n/* harmony import */ var _maths_Rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../maths/Rectangle */ \"./src/core/laya/maths/Rectangle.ts\");\n/* harmony import */ var _resource_HTMLCanvas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../resource/HTMLCanvas */ \"./src/core/laya/resource/HTMLCanvas.ts\");\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * 存储cache相关\r\n */\r\nclass CacheStyle {\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n    /**\r\n     * 是否需要Bitmap缓存\r\n     * @return\r\n     */\r\n    needBitmapCache() {\r\n        return this.cacheForFilters || !!this.mask;\r\n    }\r\n    /**\r\n     * 是否需要开启canvas渲染\r\n     */\r\n    needEnableCanvasRender() {\r\n        return this.userSetCache != \"none\" || this.cacheForFilters || !!this.mask;\r\n    }\r\n    /**\r\n     * 释放cache的资源\r\n     */\r\n    releaseContext() {\r\n        if (this.canvas && this.canvas.size) {\r\n            _utils_Pool__WEBPACK_IMPORTED_MODULE_3__[\"Pool\"].recover(\"CacheCanvas\", this.canvas);\r\n            this.canvas.size(0, 0);\r\n            // 微信在iphone8和mate20上个bug，size存在但是不起作用，可能是canvas对象不是我们的。\r\n            // 为了避免canvas不消失，再强制设置宽高为0 TODO 没有测试\r\n            this.canvas.width = 0;\r\n            this.canvas.height = 0;\r\n        }\r\n        this.canvas = null;\r\n    }\r\n    createContext() {\r\n        if (!this.canvas) {\r\n            this.canvas = _utils_Pool__WEBPACK_IMPORTED_MODULE_3__[\"Pool\"].getItem(\"CacheCanvas\") || new _resource_HTMLCanvas__WEBPACK_IMPORTED_MODULE_2__[\"HTMLCanvas\"](false);\r\n            var tx = this.canvas.context;\r\n            if (!tx) {\r\n                tx = this.canvas.getContext('2d'); //如果是webGL的话，这个会返回WebGLContext2D\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 释放滤镜资源\r\n     */\r\n    releaseFilterCache() {\r\n        var fc = this.filterCache;\r\n        if (fc) {\r\n            fc.destroy();\r\n            fc.recycle();\r\n            this.filterCache = null;\r\n        }\r\n    }\r\n    /**\r\n     * 回收\r\n     */\r\n    recover() {\r\n        if (this === CacheStyle.EMPTY)\r\n            return;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_3__[\"Pool\"].recover(\"SpriteCache\", this.reset());\r\n    }\r\n    /**\r\n     * 重置\r\n     */\r\n    reset() {\r\n        this.releaseContext();\r\n        this.releaseFilterCache();\r\n        this.cacheAs = \"none\";\r\n        this.enableCanvasRender = false;\r\n        this.userSetCache = \"none\";\r\n        this.cacheForFilters = false;\r\n        this.staticCache = false;\r\n        this.reCache = true;\r\n        this.mask = null;\r\n        this.maskParent = null;\r\n        this.filterCache = null;\r\n        this.filters = null;\r\n        this.hasGlowFilter = false;\r\n        if (this.cacheRect)\r\n            this.cacheRect.recover();\r\n        this.cacheRect = null;\r\n        return this;\r\n    }\r\n    /**\r\n     * 创建一个SpriteCache\r\n     */\r\n    static create() {\r\n        return _utils_Pool__WEBPACK_IMPORTED_MODULE_3__[\"Pool\"].getItemByClass(\"SpriteCache\", CacheStyle);\r\n    }\r\n    _calculateCacheRect(sprite, tCacheType, x, y) {\r\n        var _cacheStyle = sprite._cacheStyle;\r\n        if (!_cacheStyle.cacheRect)\r\n            _cacheStyle.cacheRect = _maths_Rectangle__WEBPACK_IMPORTED_MODULE_1__[\"Rectangle\"].create();\r\n        var tRec;\r\n        //计算显示对象的绘图区域\r\n        if (tCacheType === \"bitmap\") {\r\n            tRec = sprite.getSelfBounds();\r\n            tRec.width = tRec.width + CacheStyle.CANVAS_EXTEND_EDGE * 2;\r\n            tRec.height = tRec.height + CacheStyle.CANVAS_EXTEND_EDGE * 2;\r\n            tRec.x = tRec.x - sprite.pivotX;\r\n            tRec.y = tRec.y - sprite.pivotY;\r\n            tRec.x = tRec.x - CacheStyle.CANVAS_EXTEND_EDGE;\r\n            tRec.y = tRec.y - CacheStyle.CANVAS_EXTEND_EDGE;\r\n            tRec.x = Math.floor(tRec.x + x) - x;\r\n            tRec.y = Math.floor(tRec.y + y) - y;\r\n            tRec.width = Math.floor(tRec.width);\r\n            tRec.height = Math.floor(tRec.height);\r\n            _cacheStyle.cacheRect.copyFrom(tRec);\r\n        }\r\n        else {\r\n            _cacheStyle.cacheRect.setTo(-sprite._style.pivotX, -sprite._style.pivotY, 1, 1);\r\n        }\r\n        tRec = _cacheStyle.cacheRect;\r\n        //处理显示对象的scrollRect偏移\r\n        if (sprite._style.scrollRect) {\r\n            var scrollRect = sprite._style.scrollRect;\r\n            tRec.x -= scrollRect.x;\r\n            tRec.y -= scrollRect.y;\r\n        }\r\n        CacheStyle._scaleInfo.setTo(1, 1);\r\n        return CacheStyle._scaleInfo;\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\nCacheStyle.EMPTY = new CacheStyle();\r\nCacheStyle._scaleInfo = new _maths_Point__WEBPACK_IMPORTED_MODULE_0__[\"Point\"]();\r\nCacheStyle.CANVAS_EXTEND_EDGE = 16;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/css/CacheStyle.ts?");

/***/ }),

/***/ "./src/core/laya/display/css/SpriteStyle.ts":
/*!**************************************************!*\
  !*** ./src/core/laya/display/css/SpriteStyle.ts ***!
  \**************************************************/
/*! exports provided: SpriteStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SpriteStyle\", function() { return SpriteStyle; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * @private\r\n * 元素样式\r\n */\r\nclass SpriteStyle {\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n    /**\r\n     * 重置，方便下次复用\r\n     */\r\n    reset() {\r\n        this.scaleX = this.scaleY = 1;\r\n        this.skewX = this.skewY = 0;\r\n        this.pivotX = this.pivotY = this.rotation = 0;\r\n        this.alpha = 1;\r\n        if (this.scrollRect)\r\n            this.scrollRect.recover();\r\n        this.scrollRect = null;\r\n        if (this.viewport)\r\n            this.viewport.recover();\r\n        this.viewport = null;\r\n        this.hitArea = null;\r\n        this.dragging = null;\r\n        this.blendMode = null;\r\n        return this;\r\n    }\r\n    /**\r\n     * 回收\r\n     */\r\n    recover() {\r\n        if (this === SpriteStyle.EMPTY)\r\n            return;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"SpriteStyle\", this.reset());\r\n    }\r\n    /**\r\n     * 从对象池中创建\r\n     */\r\n    static create() {\r\n        return _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"SpriteStyle\", SpriteStyle);\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\nSpriteStyle.EMPTY = new SpriteStyle();\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/css/SpriteStyle.ts?");

/***/ }),

/***/ "./src/core/laya/display/css/TextStyle.ts":
/*!************************************************!*\
  !*** ./src/core/laya/display/css/TextStyle.ts ***!
  \************************************************/
/*! exports provided: TextStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextStyle\", function() { return TextStyle; });\n/* harmony import */ var _SpriteStyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././SpriteStyle */ \"./src/core/laya/display/css/SpriteStyle.ts\");\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n\r\n/**\r\n * 文本的样式类\r\n */\r\nclass TextStyle extends _SpriteStyle__WEBPACK_IMPORTED_MODULE_0__[\"SpriteStyle\"] {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * 表示使用此文本格式的文本是否为斜体。\r\n         * @default false\r\n         */\r\n        this.italic = false;\r\n    }\r\n    /*override*/ reset() {\r\n        super.reset();\r\n        this.italic = false;\r\n        this.align = \"left\";\r\n        this.wordWrap = false;\r\n        this.leading = 0;\r\n        this.padding = [0, 0, 0, 0];\r\n        this.bgColor = null;\r\n        this.borderColor = null;\r\n        this.asPassword = false;\r\n        this.stroke = 0;\r\n        this.strokeColor = \"#000000\";\r\n        this.bold = false;\r\n        this.underline = false;\r\n        this.underlineColor = null;\r\n        this.currBitmapFont = null;\r\n        return this;\r\n    }\r\n    /*override*/ recover() {\r\n        if (this === TextStyle.EMPTY)\r\n            return;\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_1__[\"Pool\"].recover(\"TextStyle\", this.reset());\r\n    }\r\n    /**\r\n     * 从对象池中创建\r\n     */\r\n    static create() {\r\n        return _utils_Pool__WEBPACK_IMPORTED_MODULE_1__[\"Pool\"].getItemByClass(\"TextStyle\", TextStyle);\r\n    }\r\n    /**@inheritDoc\t */\r\n    render(sprite, context, x, y) {\r\n        (this.bgColor || this.borderColor) && context.drawRect(x, y, sprite.width, sprite.height, this.bgColor, this.borderColor, 1);\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/ /**\r\n * 一个已初始化的 <code>TextStyle</code> 实例。\r\n */\r\nTextStyle.EMPTY = new TextStyle();\r\n\n\n//# sourceURL=webpack:///./src/core/laya/display/css/TextStyle.ts?");

/***/ }),

/***/ "./src/core/laya/events/Event.ts":
/*!***************************************!*\
  !*** ./src/core/laya/events/Event.ts ***!
  \***************************************/
/*! exports provided: Event */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Event\", function() { return Event; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _maths_Point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../maths/Point */ \"./src/core/laya/maths/Point.ts\");\n\r\n\r\n/**\r\n * <code>Event</code> 是事件类型的集合。一般当发生事件时，<code>Event</code> 对象将作为参数传递给事件侦听器。\r\n */\r\nclass Event {\r\n    /**\r\n     * 设置事件数据。\r\n     * @param\ttype 事件类型。\r\n     * @param\tcurrentTarget 事件目标触发对象。\r\n     * @param\ttarget 事件当前冒泡对象。\r\n     * @return 返回当前 Event 对象。\r\n     */\r\n    setTo(type, currentTarget, target) {\r\n        this.type = type;\r\n        this.currentTarget = currentTarget;\r\n        this.target = target;\r\n        return this;\r\n    }\r\n    /**\r\n     * 阻止对事件流中当前节点的后续节点中的所有事件侦听器进行处理。此方法不会影响当前节点 (currentTarget) 中的任何事件侦听器。\r\n     */\r\n    stopPropagation() {\r\n        this._stoped = true;\r\n    }\r\n    /**\r\n     * 触摸点列表。\r\n     */\r\n    get touches() {\r\n        if (!this.nativeEvent)\r\n            return null;\r\n        var arr = this.nativeEvent.touches;\r\n        if (arr) {\r\n            var stage = _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage;\r\n            for (var i = 0, n = arr.length; i < n; i++) {\r\n                var e = arr[i];\r\n                var point = _maths_Point__WEBPACK_IMPORTED_MODULE_1__[\"Point\"].TEMP;\r\n                point.setTo(e.clientX, e.clientY);\r\n                stage._canvasTransform.invertTransformPoint(point);\r\n                stage.transform.invertTransformPoint(point);\r\n                e.stageX = point.x;\r\n                e.stageY = point.y;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n    /**\r\n     * 表示 Alt 键是处于活动状态 (true) 还是非活动状态 (false)。\r\n     */\r\n    get altKey() {\r\n        return this.nativeEvent.altKey;\r\n    }\r\n    /**\r\n     * 表示 Ctrl 键是处于活动状态 (true) 还是非活动状态 (false)。\r\n     */\r\n    get ctrlKey() {\r\n        return this.nativeEvent.ctrlKey;\r\n    }\r\n    /**\r\n     * 表示 Shift 键是处于活动状态 (true) 还是非活动状态 (false)。\r\n     */\r\n    get shiftKey() {\r\n        return this.nativeEvent.shiftKey;\r\n    }\r\n    /**\r\n     * 包含按下或释放的键的字符代码值。字符代码值为英文键盘值。\r\n     */\r\n    get charCode() {\r\n        return this.nativeEvent.charCode;\r\n    }\r\n    /**\r\n     * 表示键在键盘上的位置。这对于区分在键盘上多次出现的键非常有用。<br>\r\n     * 例如，您可以根据此属性的值来区分左 Shift 键和右 Shift 键：左 Shift 键的值为 KeyLocation.LEFT，右 Shift 键的值为 KeyLocation.RIGHT。另一个示例是区分标准键盘 (KeyLocation.STANDARD) 与数字键盘 (KeyLocation.NUM_PAD) 上按下的数字键。\r\n     */\r\n    get keyLocation() {\r\n        return this.nativeEvent.location || this.nativeEvent.keyLocation;\r\n    }\r\n    /**鼠标在 Stage 上的 X 轴坐标*/\r\n    get stageX() {\r\n        return _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.mouseX;\r\n    }\r\n    /**鼠标在 Stage 上的 Y 轴坐标*/\r\n    get stageY() {\r\n        return _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.mouseY;\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n/** 一个空的 Event 对象。用于事件派发中转使用。*/\r\nEvent.EMPTY = new Event();\r\n/** 定义 mousedown 事件对象的 type 属性值。*/\r\nEvent.MOUSE_DOWN = \"mousedown\";\r\n/** 定义 mouseup 事件对象的 type 属性值。*/\r\nEvent.MOUSE_UP = \"mouseup\";\r\n/** 定义 click 事件对象的 type 属性值。*/\r\nEvent.CLICK = \"click\";\r\n/** 定义 rightmousedown 事件对象的 type 属性值。*/\r\nEvent.RIGHT_MOUSE_DOWN = \"rightmousedown\";\r\n/** 定义 rightmouseup 事件对象的 type 属性值。*/\r\nEvent.RIGHT_MOUSE_UP = \"rightmouseup\";\r\n/** 定义 rightclick 事件对象的 type 属性值。*/\r\nEvent.RIGHT_CLICK = \"rightclick\";\r\n/** 定义 mousemove 事件对象的 type 属性值。*/\r\nEvent.MOUSE_MOVE = \"mousemove\";\r\n/** 定义 mouseover 事件对象的 type 属性值。*/\r\nEvent.MOUSE_OVER = \"mouseover\";\r\n/** 定义 mouseout 事件对象的 type 属性值。*/\r\nEvent.MOUSE_OUT = \"mouseout\";\r\n/** 定义 mousewheel 事件对象的 type 属性值。*/\r\nEvent.MOUSE_WHEEL = \"mousewheel\";\r\n/** 定义 mouseover 事件对象的 type 属性值。*/\r\nEvent.ROLL_OVER = \"mouseover\";\r\n/** 定义 mouseout 事件对象的 type 属性值。*/\r\nEvent.ROLL_OUT = \"mouseout\";\r\n/** 定义 doubleclick 事件对象的 type 属性值。*/\r\nEvent.DOUBLE_CLICK = \"doubleclick\";\r\n/** 定义 change 事件对象的 type 属性值。*/\r\nEvent.CHANGE = \"change\";\r\n/** 定义 changed 事件对象的 type 属性值。*/\r\nEvent.CHANGED = \"changed\";\r\n/** 定义 resize 事件对象的 type 属性值。*/\r\nEvent.RESIZE = \"resize\";\r\n/** 定义 added 事件对象的 type 属性值。*/\r\nEvent.ADDED = \"added\";\r\n/** 定义 removed 事件对象的 type 属性值。*/\r\nEvent.REMOVED = \"removed\";\r\n/** 定义 display 事件对象的 type 属性值。*/\r\nEvent.DISPLAY = \"display\";\r\n/** 定义 undisplay 事件对象的 type 属性值。*/\r\nEvent.UNDISPLAY = \"undisplay\";\r\n/** 定义 error 事件对象的 type 属性值。*/\r\nEvent.ERROR = \"error\";\r\n/** 定义 complete 事件对象的 type 属性值。*/\r\nEvent.COMPLETE = \"complete\";\r\n/** 定义 loaded 事件对象的 type 属性值。*/\r\nEvent.LOADED = \"loaded\";\r\n/** 定义 loaded 事件对象的 type 属性值。*/\r\nEvent.READY = \"ready\";\r\n/** 定义 progress 事件对象的 type 属性值。*/\r\nEvent.PROGRESS = \"progress\";\r\n/** 定义 input 事件对象的 type 属性值。*/\r\nEvent.INPUT = \"input\";\r\n/** 定义 render 事件对象的 type 属性值。*/\r\nEvent.RENDER = \"render\";\r\n/** 定义 open 事件对象的 type 属性值。*/\r\nEvent.OPEN = \"open\";\r\n/** 定义 message 事件对象的 type 属性值。*/\r\nEvent.MESSAGE = \"message\";\r\n/** 定义 close 事件对象的 type 属性值。*/\r\nEvent.CLOSE = \"close\";\r\n/** 定义 keydown 事件对象的 type 属性值。*/\r\nEvent.KEY_DOWN = \"keydown\";\r\n/** 定义 keypress 事件对象的 type 属性值。*/\r\nEvent.KEY_PRESS = \"keypress\";\r\n/** 定义 keyup 事件对象的 type 属性值。*/\r\nEvent.KEY_UP = \"keyup\";\r\n/** 定义 frame 事件对象的 type 属性值。*/\r\nEvent.FRAME = \"enterframe\";\r\n/** 定义 dragstart 事件对象的 type 属性值。*/\r\nEvent.DRAG_START = \"dragstart\";\r\n/** 定义 dragmove 事件对象的 type 属性值。*/\r\nEvent.DRAG_MOVE = \"dragmove\";\r\n/** 定义 dragend 事件对象的 type 属性值。*/\r\nEvent.DRAG_END = \"dragend\";\r\n/** 定义 enter 事件对象的 type 属性值。*/\r\nEvent.ENTER = \"enter\";\r\n/** 定义 select 事件对象的 type 属性值。*/\r\nEvent.SELECT = \"select\";\r\n/** 定义 blur 事件对象的 type 属性值。*/\r\nEvent.BLUR = \"blur\";\r\n/** 定义 focus 事件对象的 type 属性值。*/\r\nEvent.FOCUS = \"focus\";\r\n/** 定义 visibilitychange 事件对象的 type 属性值。*/\r\nEvent.VISIBILITY_CHANGE = \"visibilitychange\";\r\n/** 定义 focuschange 事件对象的 type 属性值。*/\r\nEvent.FOCUS_CHANGE = \"focuschange\";\r\n/** 定义 played 事件对象的 type 属性值。*/\r\nEvent.PLAYED = \"played\";\r\n/** 定义 paused 事件对象的 type 属性值。*/\r\nEvent.PAUSED = \"paused\";\r\n/** 定义 stopped 事件对象的 type 属性值。*/\r\nEvent.STOPPED = \"stopped\";\r\n/** 定义 start 事件对象的 type 属性值。*/\r\nEvent.START = \"start\";\r\n/** 定义 end 事件对象的 type 属性值。*/\r\nEvent.END = \"end\";\r\n/** 定义 componentadded 事件对象的 type 属性值。*/\r\nEvent.COMPONENT_ADDED = \"componentadded\";\r\n/** 定义 componentremoved 事件对象的 type 属性值。*/\r\nEvent.COMPONENT_REMOVED = \"componentremoved\";\r\n/** 定义 released 事件对象的 type 属性值。*/\r\nEvent.RELEASED = \"released\";\r\n/** 定义 link 事件对象的 type 属性值。*/\r\nEvent.LINK = \"link\";\r\n/** 定义 label 事件对象的 type 属性值。*/\r\nEvent.LABEL = \"label\";\r\n/**浏览器全屏更改时触发*/\r\nEvent.FULL_SCREEN_CHANGE = \"fullscreenchange\";\r\n/**显卡设备丢失时触发*/\r\nEvent.DEVICE_LOST = \"devicelost\";\r\n/**世界矩阵更新时触发。*/\r\nEvent.TRANSFORM_CHANGED = \"transformchanged\";\r\n/**更换动作时触发。*/\r\nEvent.ANIMATION_CHANGED = \"animationchanged\";\r\n/**拖尾渲染节点改变时触发。*/\r\nEvent.TRAIL_FILTER_CHANGE = \"trailfilterchange\";\r\n/**物理碰撞开始*/\r\nEvent.TRIGGER_ENTER = \"triggerenter\";\r\n/**物理碰撞持续*/\r\nEvent.TRIGGER_STAY = \"triggerstay\";\r\n/**物理碰撞结束*/\r\nEvent.TRIGGER_EXIT = \"triggerexit\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/events/Event.ts?");

/***/ }),

/***/ "./src/core/laya/events/EventDispatcher.ts":
/*!*************************************************!*\
  !*** ./src/core/laya/events/EventDispatcher.ts ***!
  \*************************************************/
/*! exports provided: EventDispatcher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventDispatcher\", function() { return EventDispatcher; });\n/* harmony import */ var _utils_Handler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Handler */ \"./src/core/laya/utils/Handler.ts\");\n\r\n/**\r\n * <code>EventDispatcher</code> 类是可调度事件的所有类的基类。\r\n */\r\nclass EventDispatcher {\r\n    //[IF-JS]Object.defineProperty(EventDispatcher.prototype, \"_events\", {enumerable: false,writable:true});\r\n    /**\r\n     * 检查 EventDispatcher 对象是否为特定事件类型注册了任何侦听器。\r\n     * @param\ttype 事件的类型。\r\n     * @return 如果指定类型的侦听器已注册，则值为 true；否则，值为 false。\r\n     */\r\n    hasListener(type) {\r\n        var listener = this._events && this._events[type];\r\n        return !!listener;\r\n    }\r\n    /**\r\n     * 派发事件。\r\n     * @param type\t事件类型。\r\n     * @param data\t（可选）回调数据。<b>注意：</b>如果是需要传递多个参数 p1,p2,p3,...可以使用数组结构如：[p1,p2,p3,...] ；如果需要回调单个参数 p ，且 p 是一个数组，则需要使用结构如：[p]，其他的单个参数 p ，可以直接传入参数 p。\r\n     * @return 此事件类型是否有侦听者，如果有侦听者则值为 true，否则值为 false。\r\n     */\r\n    event(type, data = null) {\r\n        if (!this._events || !this._events[type])\r\n            return false;\r\n        var listeners = this._events[type];\r\n        if (listeners.run) {\r\n            if (listeners.once)\r\n                delete this._events[type];\r\n            data != null ? listeners.runWith(data) : listeners.run();\r\n        }\r\n        else {\r\n            for (var i = 0, n = listeners.length; i < n; i++) {\r\n                var listener = listeners[i];\r\n                if (listener) {\r\n                    (data != null) ? listener.runWith(data) : listener.run();\r\n                }\r\n                if (!listener || listener.once) {\r\n                    listeners.splice(i, 1);\r\n                    i--;\r\n                    n--;\r\n                }\r\n            }\r\n            if (listeners.length === 0 && this._events)\r\n                delete this._events[type];\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * 使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知。\r\n     * @param type\t\t事件的类型。\r\n     * @param caller\t事件侦听函数的执行域。\r\n     * @param listener\t事件侦听函数。\r\n     * @param args\t\t（可选）事件侦听函数的回调参数。\r\n     * @return 此 EventDispatcher 对象。\r\n     */\r\n    on(type, caller, listener, args = null) {\r\n        return this._createListener(type, caller, listener, args, false);\r\n    }\r\n    /**\r\n     * 使用 EventDispatcher 对象注册指定类型的事件侦听器对象，以使侦听器能够接收事件通知，此侦听事件响应一次后自动移除。\r\n     * @param type\t\t事件的类型。\r\n     * @param caller\t事件侦听函数的执行域。\r\n     * @param listener\t事件侦听函数。\r\n     * @param args\t\t（可选）事件侦听函数的回调参数。\r\n     * @return 此 EventDispatcher 对象。\r\n     */\r\n    once(type, caller, listener, args = null) {\r\n        return this._createListener(type, caller, listener, args, true);\r\n    }\r\n    /**@private */\r\n    _createListener(type, caller, listener, args, once, offBefore = true) {\r\n        //移除之前相同的监听\r\n        offBefore && this.off(type, caller, listener, once);\r\n        //使用对象池进行创建回收\r\n        var handler = EventHandler.create(caller || this, listener, args, once);\r\n        this._events || (this._events = {});\r\n        var events = this._events;\r\n        //默认单个，每个对象只有多个监听才用数组，节省一个数组的消耗\r\n        if (!events[type])\r\n            events[type] = handler;\r\n        else {\r\n            if (!events[type].run)\r\n                events[type].push(handler);\r\n            else\r\n                events[type] = [events[type], handler];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * 从 EventDispatcher 对象中删除侦听器。\r\n     * @param type\t\t事件的类型。\r\n     * @param caller\t事件侦听函数的执行域。\r\n     * @param listener\t事件侦听函数。\r\n     * @param onceOnly\t（可选）如果值为 true ,则只移除通过 once 方法添加的侦听器。\r\n     * @return 此 EventDispatcher 对象。\r\n     */\r\n    off(type, caller, listener, onceOnly = false) {\r\n        if (!this._events || !this._events[type])\r\n            return this;\r\n        var listeners = this._events[type];\r\n        if (listeners != null) {\r\n            if (listeners.run) {\r\n                if ((!caller || listeners.caller === caller) && (listener == null || listeners.method === listener) && (!onceOnly || listeners.once)) {\r\n                    delete this._events[type];\r\n                    listeners.recover();\r\n                }\r\n            }\r\n            else {\r\n                var count = 0;\r\n                for (var i = 0, n = listeners.length; i < n; i++) {\r\n                    var item = listeners[i];\r\n                    if (!item) {\r\n                        count++;\r\n                        continue;\r\n                    }\r\n                    if (item && (!caller || item.caller === caller) && (listener == null || item.method === listener) && (!onceOnly || item.once)) {\r\n                        count++;\r\n                        listeners[i] = null;\r\n                        item.recover();\r\n                    }\r\n                }\r\n                //如果全部移除，则删除索引\r\n                if (count === n)\r\n                    delete this._events[type];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * 从 EventDispatcher 对象中删除指定事件类型的所有侦听器。\r\n     * @param type\t（可选）事件类型，如果值为 null，则移除本对象所有类型的侦听器。\r\n     * @return 此 EventDispatcher 对象。\r\n     */\r\n    offAll(type = null) {\r\n        var events = this._events;\r\n        if (!events)\r\n            return this;\r\n        if (type) {\r\n            this._recoverHandlers(events[type]);\r\n            delete events[type];\r\n        }\r\n        else {\r\n            for (var name in events) {\r\n                this._recoverHandlers(events[name]);\r\n            }\r\n            this._events = null;\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * 移除caller为target的所有事件监听\r\n     * @param\tcaller caller对象\r\n     */\r\n    offAllCaller(caller) {\r\n        if (caller && this._events) {\r\n            for (var name in this._events) {\r\n                this.off(name, caller, null);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    _recoverHandlers(arr) {\r\n        if (!arr)\r\n            return;\r\n        if (arr.run) {\r\n            arr.recover();\r\n        }\r\n        else {\r\n            for (var i = arr.length - 1; i > -1; i--) {\r\n                if (arr[i]) {\r\n                    arr[i].recover();\r\n                    arr[i] = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 检测指定事件类型是否是鼠标事件。\r\n     * @param\ttype 事件的类型。\r\n     * @return\t如果是鼠标事件，则值为 true;否则，值为 false。\r\n     */\r\n    isMouseEvent(type) {\r\n        return EventDispatcher.MOUSE_EVENTS[type] || false;\r\n    }\r\n}\r\n/**@private */\r\nEventDispatcher.MOUSE_EVENTS = { \"rightmousedown\": true, \"rightmouseup\": true, \"rightclick\": true, \"mousedown\": true, \"mouseup\": true, \"mousemove\": true, \"mouseover\": true, \"mouseout\": true, \"click\": true, \"doubleclick\": true };\r\n/**@private */\r\nclass EventHandler extends _utils_Handler__WEBPACK_IMPORTED_MODULE_0__[\"Handler\"] {\r\n    constructor(caller, method, args, once) {\r\n        super(caller, method, args, once);\r\n    }\r\n    /*override*/ recover() {\r\n        if (this._id > 0) {\r\n            this._id = 0;\r\n            EventHandler._pool.push(this.clear());\r\n        }\r\n    }\r\n    /**\r\n     * 从对象池内创建一个Handler，默认会执行一次回收，如果不需要自动回收，设置once参数为false。\r\n     * @param caller\t执行域(this)。\r\n     * @param method\t回调方法。\r\n     * @param args\t\t（可选）携带的参数。\r\n     * @param once\t\t（可选）是否只执行一次，如果为true，回调后执行recover()进行回收，默认为true。\r\n     * @return 返回创建的handler实例。\r\n     */\r\n    static create(caller, method, args = null, once = true) {\r\n        if (EventHandler._pool.length)\r\n            return EventHandler._pool.pop().setTo(caller, method, args, once);\r\n        return new EventHandler(caller, method, args, once);\r\n    }\r\n}\r\n/**@private handler对象池*/\r\nEventHandler._pool = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/events/EventDispatcher.ts?");

/***/ }),

/***/ "./src/core/laya/events/KeyBoardManager.ts":
/*!*************************************************!*\
  !*** ./src/core/laya/events/KeyBoardManager.ts ***!
  \*************************************************/
/*! exports provided: KeyBoardManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"KeyBoardManager\", function() { return KeyBoardManager; });\n/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n\r\n\r\n\r\n/**\r\n * <p><code>KeyBoardManager</code> 是键盘事件管理类。该类从浏览器中接收键盘事件，并派发该事件。</p>\r\n * <p>派发事件时若 Stage.focus 为空则只从 Stage 上派发该事件，否则将从 Stage.focus 对象开始一直冒泡派发该事件。所以在 Laya.stage 上监听键盘事件一定能够收到，如果在其他地方监听，则必须处在Stage.focus的冒泡链上才能收到该事件。</p>\r\n * <p>用户可以通过代码 Laya.stage.focus=someNode 的方式来设置focus对象。</p>\r\n * <p>用户可统一的根据事件对象中 e.keyCode 来判断按键类型，该属性兼容了不同浏览器的实现。</p>\r\n */\r\nclass KeyBoardManager {\r\n    /**@private */\r\n    static __init__() {\r\n        KeyBoardManager._addEvent(\"keydown\");\r\n        KeyBoardManager._addEvent(\"keypress\");\r\n        KeyBoardManager._addEvent(\"keyup\");\r\n    }\r\n    static _addEvent(type) {\r\n        _utils_Browser__WEBPACK_IMPORTED_MODULE_2__[\"Browser\"].document.addEventListener(type, function (e) {\r\n            KeyBoardManager._dispatch(e, type);\r\n        }, true);\r\n    }\r\n    static _dispatch(e, type) {\r\n        if (!KeyBoardManager.enabled)\r\n            return;\r\n        KeyBoardManager._event._stoped = false;\r\n        KeyBoardManager._event.nativeEvent = e;\r\n        KeyBoardManager._event.keyCode = e.keyCode || e.which || e.charCode;\r\n        //判断同时按下的键\r\n        if (type === \"keydown\")\r\n            KeyBoardManager._pressKeys[KeyBoardManager._event.keyCode] = true;\r\n        else if (type === \"keyup\")\r\n            KeyBoardManager._pressKeys[KeyBoardManager._event.keyCode] = null;\r\n        var target = (_Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.focus && (_Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.focus.event != null) && _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.focus.displayedInStage) ? _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.focus : _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage;\r\n        var ct = target;\r\n        while (ct) {\r\n            ct.event(type, KeyBoardManager._event.setTo(type, ct, target));\r\n            ct = ct.parent;\r\n        }\r\n    }\r\n    /**\r\n     * 返回指定键是否被按下。\r\n     * @param\tkey 键值。\r\n     * @return 是否被按下。\r\n     */\r\n    static hasKeyDown(key) {\r\n        return KeyBoardManager._pressKeys[key];\r\n    }\r\n}\r\nKeyBoardManager._pressKeys = {};\r\n/**是否开启键盘事件，默认为true*/\r\nKeyBoardManager.enabled = true;\r\n/**@private */\r\nKeyBoardManager._event = new _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"]();\r\n\n\n//# sourceURL=webpack:///./src/core/laya/events/KeyBoardManager.ts?");

/***/ }),

/***/ "./src/core/laya/events/MouseManager.ts":
/*!**********************************************!*\
  !*** ./src/core/laya/events/MouseManager.ts ***!
  \**********************************************/
/*! exports provided: MouseManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MouseManager\", function() { return MouseManager; });\n/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _TouchManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././TouchManager */ \"./src/core/laya/events/TouchManager.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _display_Input__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../display/Input */ \"./src/core/laya/display/Input.ts\");\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n/* harmony import */ var _maths_Point__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../maths/Point */ \"./src/core/laya/maths/Point.ts\");\n/* harmony import */ var _maths_Rectangle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../maths/Rectangle */ \"./src/core/laya/maths/Rectangle.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * <p><code>MouseManager</code> 是鼠标、触摸交互管理器。</p>\r\n * <p>鼠标事件流包括捕获阶段、目标阶段、冒泡阶段。<br/>\r\n * 捕获阶段：此阶段引擎会从stage开始递归检测stage及其子对象，直到找到命中的目标对象或者未命中任何对象；<br/>\r\n * 目标阶段：找到命中的目标对象；<br/>\r\n * 冒泡阶段：事件离开目标对象，按节点层级向上逐层通知，直到到达舞台的过程。</p>\r\n */\r\nclass MouseManager {\r\n    constructor() {\r\n        /** canvas 上的鼠标X坐标。*/\r\n        this.mouseX = 0;\r\n        /** canvas 上的鼠标Y坐标。*/\r\n        this.mouseY = 0;\r\n        /** 是否禁用除 stage 以外的鼠标事件检测。*/\r\n        this.disableMouseEvent = false;\r\n        /** 鼠标按下的时间。单位为毫秒。*/\r\n        this.mouseDownTime = 0;\r\n        /** 鼠标移动精度。*/\r\n        this.mouseMoveAccuracy = 2;\r\n        this._event = new _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"]();\r\n        /** @private 希望capture鼠标事件的对象。*/\r\n        this._captureSp = null;\r\n        /** @private 现在不支持直接把绝对坐标转到本地坐标，只能一级一级做下去，因此记录一下这个链*/\r\n        this._captureChain = [];\r\n        /** @private capture对象独占消息 */\r\n        this._captureExlusiveMode = false;\r\n        /** @private 在发送事件的过程中，是否发送给了_captureSp */\r\n        this._hitCaputreSp = false;\r\n        this._matrix = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_4__[\"Matrix\"]();\r\n        this._point = new _maths_Point__WEBPACK_IMPORTED_MODULE_5__[\"Point\"]();\r\n        this._rect = new _maths_Rectangle__WEBPACK_IMPORTED_MODULE_6__[\"Rectangle\"]();\r\n        this._lastMoveTimer = 0;\r\n        this._prePoint = new _maths_Point__WEBPACK_IMPORTED_MODULE_5__[\"Point\"]();\r\n        this._touchIDs = {};\r\n        this._curTouchID = NaN;\r\n        this._id = 1;\r\n    }\r\n    /**\r\n     * @private\r\n     * 初始化。\r\n     */\r\n    __init__(stage, canvas) {\r\n        this._stage = stage;\r\n        var _this = this;\r\n        //var canvas:* = Render.canvas;\r\n        canvas.oncontextmenu = function (e) {\r\n            if (MouseManager.enabled)\r\n                return false;\r\n        };\r\n        canvas.addEventListener('mousedown', function (e) {\r\n            if (MouseManager.enabled) {\r\n                if (!_utils_Browser__WEBPACK_IMPORTED_MODULE_7__[\"Browser\"].onIE)\r\n                    e.preventDefault();\r\n                _this.mouseDownTime = _utils_Browser__WEBPACK_IMPORTED_MODULE_7__[\"Browser\"].now();\r\n                this.runEvent(e);\r\n            }\r\n        });\r\n        canvas.addEventListener('mouseup', function (e) {\r\n            if (MouseManager.enabled) {\r\n                e.preventDefault();\r\n                _this.mouseDownTime = -_utils_Browser__WEBPACK_IMPORTED_MODULE_7__[\"Browser\"].now();\r\n                this.runEvent(e);\r\n            }\r\n        }, true);\r\n        canvas.addEventListener('mousemove', function (e) {\r\n            if (MouseManager.enabled) {\r\n                e.preventDefault();\r\n                var now = _utils_Browser__WEBPACK_IMPORTED_MODULE_7__[\"Browser\"].now();\r\n                if (now - _this._lastMoveTimer < 10)\r\n                    return;\r\n                _this._lastMoveTimer = now;\r\n                this.runEvent(e);\r\n            }\r\n        }, true);\r\n        canvas.addEventListener(\"mouseout\", function (e) {\r\n            if (MouseManager.enabled)\r\n                this.runEvent(e);\r\n        });\r\n        canvas.addEventListener(\"mouseover\", function (e) {\r\n            if (MouseManager.enabled)\r\n                this.runEvent(e);\r\n        });\r\n        canvas.addEventListener(\"touchstart\", function (e) {\r\n            if (MouseManager.enabled) {\r\n                if (!MouseManager._isFirstTouch && !_display_Input__WEBPACK_IMPORTED_MODULE_3__[\"Input\"].isInputting)\r\n                    e.preventDefault();\r\n                _this.mouseDownTime = _utils_Browser__WEBPACK_IMPORTED_MODULE_7__[\"Browser\"].now();\r\n                this.runEvent(e);\r\n            }\r\n        });\r\n        canvas.addEventListener(\"touchend\", function (e) {\r\n            if (MouseManager.enabled) {\r\n                if (!MouseManager._isFirstTouch && !_display_Input__WEBPACK_IMPORTED_MODULE_3__[\"Input\"].isInputting)\r\n                    e.preventDefault();\r\n                MouseManager._isFirstTouch = false;\r\n                _this.mouseDownTime = -_utils_Browser__WEBPACK_IMPORTED_MODULE_7__[\"Browser\"].now();\r\n                this.runEvent(e);\r\n            }\r\n            else {\r\n                this._curTouchID = NaN;\r\n            }\r\n        }, true);\r\n        canvas.addEventListener(\"touchmove\", function (e) {\r\n            if (MouseManager.enabled) {\r\n                e.preventDefault();\r\n                this.runEvent(e);\r\n            }\r\n        }, true);\r\n        canvas.addEventListener(\"touchcancel\", function (e) {\r\n            if (MouseManager.enabled) {\r\n                e.preventDefault();\r\n                this.runEvent(e);\r\n            }\r\n            else {\r\n                this._curTouchID = NaN;\r\n            }\r\n        }, true);\r\n        canvas.addEventListener('mousewheel', function (e) {\r\n            if (MouseManager.enabled)\r\n                this.runEvent(e);\r\n        });\r\n        canvas.addEventListener('DOMMouseScroll', function (e) {\r\n            if (MouseManager.enabled)\r\n                this.runEvent(e);\r\n        });\r\n    }\r\n    initEvent(e, nativeEvent = null) {\r\n        var _this = this;\r\n        _this._event._stoped = false;\r\n        _this._event.nativeEvent = nativeEvent || e;\r\n        _this._target = null;\r\n        this._point.setTo(e.pageX || e.clientX, e.pageY || e.clientY);\r\n        if (this._stage._canvasTransform) {\r\n            this._stage._canvasTransform.invertTransformPoint(this._point);\r\n            _this.mouseX = this._point.x;\r\n            _this.mouseY = this._point.y;\r\n        }\r\n        _this._event.touchId = e.identifier || 0;\r\n        this._tTouchID = _this._event.touchId;\r\n        var evt;\r\n        evt = _TouchManager__WEBPACK_IMPORTED_MODULE_1__[\"TouchManager\"].I._event;\r\n        evt._stoped = false;\r\n        evt.nativeEvent = _this._event.nativeEvent;\r\n        evt.touchId = _this._event.touchId;\r\n    }\r\n    checkMouseWheel(e) {\r\n        this._event.delta = e.wheelDelta ? e.wheelDelta * 0.025 : -e.detail;\r\n        var _lastOvers = _TouchManager__WEBPACK_IMPORTED_MODULE_1__[\"TouchManager\"].I.getLastOvers();\r\n        for (var i = 0, n = _lastOvers.length; i < n; i++) {\r\n            var ele = _lastOvers[i];\r\n            ele.event(_Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].MOUSE_WHEEL, this._event.setTo(_Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].MOUSE_WHEEL, ele, this._target));\r\n        }\r\n        //\t\t\t_stage.event(Event.MOUSE_WHEEL, _event.setTo(Event.MOUSE_WHEEL, _stage, _target));\r\n    }\r\n    onMouseMove(ele) {\r\n        _TouchManager__WEBPACK_IMPORTED_MODULE_1__[\"TouchManager\"].I.onMouseMove(ele, this._tTouchID);\r\n    }\r\n    onMouseDown(ele) {\r\n        if (_display_Input__WEBPACK_IMPORTED_MODULE_3__[\"Input\"].isInputting && _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage.focus && _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage.focus[\"focus\"] && !_Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage.focus.contains(this._target)) {\r\n            // 从UI Input组件中取得Input引用\r\n            // _tf 是TextInput的属性\r\n            var pre_input = _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage.focus['_tf'] || _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage.focus;\r\n            var new_input = ele['_tf'] || ele;\r\n            // 新的焦点是Input的情况下，不需要blur；\r\n            // 不过如果是Input和TextArea之间的切换，还是需要重新弹出输入法；\r\n            if (new_input instanceof _display_Input__WEBPACK_IMPORTED_MODULE_3__[\"Input\"] && new_input.multiline == pre_input.multiline)\r\n                pre_input['_focusOut']();\r\n            else\r\n                pre_input.focus = false;\r\n        }\r\n        _TouchManager__WEBPACK_IMPORTED_MODULE_1__[\"TouchManager\"].I.onMouseDown(ele, this._tTouchID, this._isLeftMouse);\r\n    }\r\n    onMouseUp(ele) {\r\n        _TouchManager__WEBPACK_IMPORTED_MODULE_1__[\"TouchManager\"].I.onMouseUp(ele, this._tTouchID, this._isLeftMouse);\r\n    }\r\n    check(sp, mouseX, mouseY, callBack) {\r\n        this._point.setTo(mouseX, mouseY);\r\n        sp.fromParentPoint(this._point);\r\n        mouseX = this._point.x;\r\n        mouseY = this._point.y;\r\n        //如果有裁剪，则先判断是否在裁剪范围内\r\n        var scrollRect = sp._style.scrollRect;\r\n        if (scrollRect) {\r\n            this._rect.setTo(scrollRect.x, scrollRect.y, scrollRect.width, scrollRect.height);\r\n            if (!this._rect.contains(mouseX, mouseY))\r\n                return false;\r\n        }\r\n        //先判定子对象是否命中\r\n        if (!this.disableMouseEvent) {\r\n            //优先判断父对象\r\n            //默认情况下，hitTestPrior=mouseThrough=false，也就是优先check子对象\r\n            //$NEXTBIG:下个重大版本将sp.mouseThrough从此逻辑中去除，从而使得sp.mouseThrough只负责目标对象的穿透\r\n            if (sp.hitTestPrior && !sp.mouseThrough && !this.hitTest(sp, mouseX, mouseY)) {\r\n                return false;\r\n            }\r\n            for (var i = sp._children.length - 1; i > -1; i--) {\r\n                var child = sp._children[i];\r\n                //只有接受交互事件的，才进行处理\r\n                if (!child.destroyed && child._mouseState > 1 && child._visible) {\r\n                    if (this.check(child, mouseX, mouseY, callBack))\r\n                        return true;\r\n                }\r\n            }\r\n            // 检查逻辑子对象\r\n            for (i = sp._extUIChild.length - 1; i >= 0; i--) {\r\n                var c = sp._extUIChild[i];\r\n                if (!c.destroyed && c._mouseState > 1 && c._visible) {\r\n                    if (this.check(c, mouseX, mouseY, callBack))\r\n                        return true;\r\n                }\r\n            }\r\n        }\r\n        //避免重复进行碰撞检测，考虑了判断条件的命中率。\r\n        var isHit = (sp.hitTestPrior && !sp.mouseThrough && !this.disableMouseEvent) ? true : this.hitTest(sp, mouseX, mouseY);\r\n        if (isHit) {\r\n            this._target = sp;\r\n            callBack.call(this, sp);\r\n            if (this._target == this._hitCaputreSp) {\r\n                this._hitCaputreSp = true;\r\n            }\r\n        }\r\n        else if (callBack === this.onMouseUp && sp === this._stage) {\r\n            //如果stage外mouseUP\r\n            this._target = this._stage;\r\n            callBack.call(this, this._target);\r\n        }\r\n        return isHit;\r\n    }\r\n    hitTest(sp, mouseX, mouseY) {\r\n        var isHit = false;\r\n        if (sp.scrollRect) {\r\n            mouseX -= sp._style.scrollRect.x;\r\n            mouseY -= sp._style.scrollRect.y;\r\n        }\r\n        var hitArea = sp._style.hitArea;\r\n        if (hitArea && hitArea._hit) {\r\n            return hitArea.contains(mouseX, mouseY);\r\n        }\r\n        if (sp.width > 0 && sp.height > 0 || sp.mouseThrough || hitArea) {\r\n            //判断是否在矩形区域内\r\n            if (!sp.mouseThrough) {\r\n                //MOD by liuzihao: saved call of 'hitRect' and 'this._rect' when 'sp.hitArea' is not null.\r\n                isHit = (hitArea ? hitArea : this._rect.setTo(0, 0, sp.width, sp.height)).contains(mouseX, mouseY);\r\n            }\r\n            else {\r\n                //如果可穿透，则根据子对象实际大小进行碰撞\r\n                isHit = sp.getGraphicBounds().contains(mouseX, mouseY);\r\n            }\r\n        }\r\n        return isHit;\r\n    }\r\n    _checkAllBaseUI(mousex, mousey, callback) {\r\n        var ret = this.handleExclusiveCapture(this.mouseX, this.mouseY, callback);\r\n        if (ret)\r\n            return true;\r\n        ret = this.check(this._stage, this.mouseX, this.mouseY, callback);\r\n        //ret = check3DUI(mousex,mousey,callback) || ret;\t\t//在这里调结果不对，好像不会调用click\r\n        return this.handleCapture(this.mouseX, this.mouseY, callback) || ret;\r\n    }\r\n    /**\r\n     * 处理3d界面。\r\n     * @param\tmousex\r\n     * @param\tmousey\r\n     * @param\tcallback\r\n     * @return\r\n     */\r\n    check3DUI(mousex, mousey, callback) {\r\n        var uis = this._stage._3dUI;\r\n        var i = 0;\r\n        var ret = false;\r\n        for (; i < uis.length; i++) {\r\n            var curui = uis[i];\r\n            this._stage._curUIBase = curui;\r\n            if (!curui.destroyed && curui._mouseState > 1 && curui._visible) {\r\n                ret = ret || this.check(curui, this.mouseX, this.mouseY, callback);\r\n            }\r\n        }\r\n        this._stage._curUIBase = this._stage;\r\n        return ret;\r\n    }\r\n    handleExclusiveCapture(mousex, mousey, callback) {\r\n        if (this._captureExlusiveMode && this._captureSp && this._captureChain.length > 0) {\r\n            var cursp;\r\n            // 坐标转到capture对象的相对坐标\r\n            this._point.setTo(mousex, mousey);\r\n            for (var i = 0; i < this._captureChain.length; i++) {\r\n                cursp = this._captureChain[i];\r\n                cursp.fromParentPoint(this._point);\r\n            }\r\n            this._target = cursp;\r\n            callback.call(this, cursp);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    handleCapture(mousex, mousey, callback) {\r\n        if (!this._hitCaputreSp && this._captureSp && this._captureChain.length > 0) {\r\n            var cursp;\r\n            // 坐标转到capture对象的相对坐标\r\n            this._point.setTo(mousex, mousey);\r\n            for (var i = 0; i < this._captureChain.length; i++) {\r\n                cursp = this._captureChain[i];\r\n                cursp.fromParentPoint(this._point);\r\n            }\r\n            this._target = cursp;\r\n            callback.call(this, cursp);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * 执行事件处理。\r\n     */\r\n    runEvent(evt) {\r\n        var _this = this;\r\n        var i, n, touch;\r\n        if (evt.type !== 'mousemove')\r\n            this._prePoint.x = this._prePoint.y = -1000000;\r\n        switch (evt.type) {\r\n            case 'mousedown':\r\n                this._touchIDs[0] = this._id++;\r\n                if (!MouseManager._isTouchRespond) {\r\n                    this._isLeftMouse = evt.button === 0;\r\n                    this.initEvent(evt);\r\n                    this._checkAllBaseUI(this.mouseX, this.mouseY, this.onMouseDown);\r\n                }\r\n                else\r\n                    MouseManager._isTouchRespond = false;\r\n                break;\r\n            case 'mouseup':\r\n                this._isLeftMouse = evt.button === 0;\r\n                this.initEvent(evt);\r\n                this._checkAllBaseUI(this.mouseX, this.mouseY, this.onMouseUp);\r\n                break;\r\n            case 'mousemove':\r\n                if ((Math.abs(this._prePoint.x - evt.clientX) + Math.abs(this._prePoint.y - evt.clientY)) >= this.mouseMoveAccuracy) {\r\n                    this._prePoint.x = evt.clientX;\r\n                    this._prePoint.y = evt.clientY;\r\n                    this.initEvent(evt);\r\n                    this._checkAllBaseUI(this.mouseX, this.mouseY, this.onMouseMove);\r\n                    //\t\t\t\t\t\tcheckMouseOut();\r\n                }\r\n                break;\r\n            case \"touchstart\":\r\n                MouseManager._isTouchRespond = true;\r\n                this._isLeftMouse = true;\r\n                var touches = evt.changedTouches;\r\n                for (i = 0, n = touches.length; i < n; i++) {\r\n                    touch = touches[i];\r\n                    //是否禁用多点触控\r\n                    if (MouseManager.multiTouchEnabled || isNaN(this._curTouchID)) {\r\n                        this._curTouchID = touch.identifier;\r\n                        //200次点击清理一下id资源\r\n                        if (this._id % 200 === 0)\r\n                            this._touchIDs = {};\r\n                        this._touchIDs[touch.identifier] = this._id++;\r\n                        this.initEvent(touch, evt);\r\n                        this._checkAllBaseUI(this.mouseX, this.mouseY, this.onMouseDown);\r\n                    }\r\n                }\r\n                break;\r\n            case \"touchend\":\r\n            case \"touchcancel\":\r\n                MouseManager._isTouchRespond = true;\r\n                this._isLeftMouse = true;\r\n                var touchends = evt.changedTouches;\r\n                for (i = 0, n = touchends.length; i < n; i++) {\r\n                    touch = touchends[i];\r\n                    //是否禁用多点触控\r\n                    if (MouseManager.multiTouchEnabled || touch.identifier == this._curTouchID) {\r\n                        this._curTouchID = NaN;\r\n                        this.initEvent(touch, evt);\r\n                        var isChecked;\r\n                        isChecked = this._checkAllBaseUI(this.mouseX, this.mouseY, this.onMouseUp);\r\n                        if (!isChecked) {\r\n                            this.onMouseUp(null);\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case \"touchmove\":\r\n                var touchemoves = evt.changedTouches;\r\n                for (i = 0, n = touchemoves.length; i < n; i++) {\r\n                    touch = touchemoves[i];\r\n                    //是否禁用多点触控\r\n                    if (MouseManager.multiTouchEnabled || touch.identifier == this._curTouchID) {\r\n                        this.initEvent(touch, evt);\r\n                        this._checkAllBaseUI(this.mouseX, this.mouseY, this.onMouseMove);\r\n                    }\r\n                }\r\n                break;\r\n            case \"wheel\":\r\n            case \"mousewheel\":\r\n            case \"DOMMouseScroll\":\r\n                this.checkMouseWheel(evt);\r\n                break;\r\n            case \"mouseout\":\r\n                //_stage.event(Event.MOUSE_OUT, _event.setTo(Event.MOUSE_OUT, _stage, _stage));\r\n                _TouchManager__WEBPACK_IMPORTED_MODULE_1__[\"TouchManager\"].I.stageMouseOut();\r\n                break;\r\n            case \"mouseover\":\r\n                this._stage.event(_Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].MOUSE_OVER, this._event.setTo(_Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].MOUSE_OVER, this._stage, this._stage));\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param\tsp\r\n     * @param\texlusive  是否是独占模式\r\n     */\r\n    setCapture(sp, exclusive = false) {\r\n        this._captureSp = sp;\r\n        this._captureExlusiveMode = exclusive;\r\n        this._captureChain.length = 0;\r\n        this._captureChain.push(sp);\r\n        var cursp = sp;\r\n        while (true) {\r\n            if (cursp == _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage)\r\n                break;\r\n            if (cursp == _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage._curUIBase)\r\n                break;\r\n            cursp = cursp.parent;\r\n            if (!cursp)\r\n                break;\r\n            this._captureChain.splice(0, 0, cursp);\r\n        }\r\n    }\r\n    releaseCapture() {\r\n        console.log('release capture');\r\n        this._captureSp = null;\r\n    }\r\n}\r\n/**\r\n * MouseManager 单例引用。\r\n */\r\nMouseManager.instance = new MouseManager();\r\n/**是否开启鼠标检测，默认为true*/\r\nMouseManager.enabled = true;\r\n/**是否开启多点触控*/\r\nMouseManager.multiTouchEnabled = true;\r\nMouseManager._isFirstTouch = true;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/events/MouseManager.ts?");

/***/ }),

/***/ "./src/core/laya/events/TouchManager.ts":
/*!**********************************************!*\
  !*** ./src/core/laya/events/TouchManager.ts ***!
  \**********************************************/
/*! exports provided: TouchManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TouchManager\", function() { return TouchManager; });\n/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * Touch事件管理类，处理多点触控下的鼠标事件\r\n */\r\nclass TouchManager {\r\n    constructor() {\r\n        /**\r\n         * 当前over的touch表\r\n         */\r\n        this.preOvers = [];\r\n        /**\r\n         * 当前down的touch表\r\n         */\r\n        this.preDowns = [];\r\n        this.preRightDowns = [];\r\n        /**\r\n         * 是否启用\r\n         */\r\n        this.enable = true;\r\n        /**\r\n         * 用于派发事件用的Event对象\r\n         */\r\n        this._event = new _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"]();\r\n        this._lastClickTime = 0;\r\n    }\r\n    _clearTempArrs() {\r\n        TouchManager._oldArr.length = 0;\r\n        TouchManager._newArr.length = 0;\r\n        TouchManager._tEleArr.length = 0;\r\n    }\r\n    /**\r\n     * 从touch表里查找对应touchID的数据\r\n     * @param touchID touch ID\r\n     * @param arr touch表\r\n     * @return\r\n     *\r\n     */\r\n    getTouchFromArr(touchID, arr) {\r\n        var i, len;\r\n        len = arr.length;\r\n        var tTouchO;\r\n        for (i = 0; i < len; i++) {\r\n            tTouchO = arr[i];\r\n            if (tTouchO.id == touchID) {\r\n                return tTouchO;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * 从touch表里移除一个元素\r\n     * @param touchID touch ID\r\n     * @param arr touch表\r\n     *\r\n     */\r\n    removeTouchFromArr(touchID, arr) {\r\n        //DebugTxt.dTrace(\"removeTouch:\"+touchID);\r\n        var i;\r\n        for (i = arr.length - 1; i >= 0; i--) {\r\n            if (arr[i].id == touchID) {\r\n                //DebugTxt.dTrace(\"removeedTouch:\"+touchID);\r\n                arr.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 创建一个touch数据\r\n     * @param ele 当前的根节点\r\n     * @param touchID touchID\r\n     * @return\r\n     *\r\n     */\r\n    createTouchO(ele, touchID) {\r\n        var rst;\r\n        rst = _utils_Pool__WEBPACK_IMPORTED_MODULE_3__[\"Pool\"].getItem(\"TouchData\") || {};\r\n        rst.id = touchID;\r\n        rst.tar = ele;\r\n        return rst;\r\n    }\r\n    /**\r\n     * 处理touchStart\r\n     * @param ele\t\t根节点\r\n     * @param touchID\ttouchID\r\n     * @param isLeft\t（可选）是否为左键\r\n     */\r\n    onMouseDown(ele, touchID, isLeft = false) {\r\n        if (!this.enable)\r\n            return;\r\n        var preO;\r\n        var tO;\r\n        var arrs;\r\n        preO = this.getTouchFromArr(touchID, this.preOvers);\r\n        arrs = this.getEles(ele, null, TouchManager._tEleArr);\r\n        if (!preO) {\r\n            tO = this.createTouchO(ele, touchID);\r\n            this.preOvers.push(tO);\r\n        }\r\n        else {\r\n            //理论上不会发生，相同触摸事件必然不会在end之前再次出发\r\n            preO.tar = ele;\r\n        }\r\n        if (_utils_Browser__WEBPACK_IMPORTED_MODULE_2__[\"Browser\"].onMobile)\r\n            this.sendEvents(arrs, _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].MOUSE_OVER);\r\n        var preDowns;\r\n        preDowns = isLeft ? this.preDowns : this.preRightDowns;\r\n        preO = this.getTouchFromArr(touchID, preDowns);\r\n        if (!preO) {\r\n            tO = this.createTouchO(ele, touchID);\r\n            preDowns.push(tO);\r\n        }\r\n        else {\r\n            //理论上不会发生，相同触摸事件必然不会在end之前再次出发\r\n            preO.tar = ele;\r\n        }\r\n        this.sendEvents(arrs, isLeft ? _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].MOUSE_DOWN : _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].RIGHT_MOUSE_DOWN);\r\n        this._clearTempArrs();\r\n    }\r\n    /**\r\n     * 派发事件。\r\n     * @param eles\t\t对象列表。\r\n     * @param type\t\t事件类型。\r\n     */\r\n    sendEvents(eles, type) {\r\n        var i, len;\r\n        len = eles.length;\r\n        this._event._stoped = false;\r\n        var _target;\r\n        _target = eles[0];\r\n        var tE;\r\n        for (i = 0; i < len; i++) {\r\n            tE = eles[i];\r\n            if (tE.destroyed)\r\n                return;\r\n            tE.event(type, this._event.setTo(type, tE, _target));\r\n            if (this._event._stoped)\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * 获取对象列表。\r\n     * @param start\t起始节点。\r\n     * @param end\t结束节点。\r\n     * @param rst\t返回值。如果此值不为空，则将其赋值为计算结果，从而避免创建新数组；如果此值为空，则创建新数组返回。\r\n     * @return Array 返回节点列表。\r\n     */\r\n    getEles(start, end = null, rst = null) {\r\n        if (!rst) {\r\n            rst = [];\r\n        }\r\n        else {\r\n            rst.length = 0;\r\n        }\r\n        while (start && start != end) {\r\n            rst.push(start);\r\n            start = start.parent;\r\n        }\r\n        return rst;\r\n    }\r\n    /**\r\n     * touchMove时处理out事件和over时间。\r\n     * @param eleNew\t新的根节点。\r\n     * @param elePre\t旧的根节点。\r\n     * @param touchID\t（可选）touchID，默认为0。\r\n     */\r\n    checkMouseOutAndOverOfMove(eleNew, elePre, touchID = 0) {\r\n        if (elePre == eleNew)\r\n            return;\r\n        var tar;\r\n        var arrs;\r\n        var i, len;\r\n        if (elePre.contains(eleNew)) {\r\n            arrs = this.getEles(eleNew, elePre, TouchManager._tEleArr);\r\n            this.sendEvents(arrs, _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].MOUSE_OVER);\r\n        }\r\n        else if (eleNew.contains(elePre)) {\r\n            arrs = this.getEles(elePre, eleNew, TouchManager._tEleArr);\r\n            this.sendEvents(arrs, _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].MOUSE_OUT);\r\n        }\r\n        else {\r\n            //arrs = getEles(elePre);\r\n            arrs = TouchManager._tEleArr;\r\n            arrs.length = 0;\r\n            var oldArr;\r\n            oldArr = this.getEles(elePre, null, TouchManager._oldArr);\r\n            var newArr;\r\n            newArr = this.getEles(eleNew, null, TouchManager._newArr);\r\n            len = oldArr.length;\r\n            var tIndex;\r\n            for (i = 0; i < len; i++) {\r\n                tar = oldArr[i];\r\n                tIndex = newArr.indexOf(tar);\r\n                if (tIndex >= 0) {\r\n                    newArr.splice(tIndex, newArr.length - tIndex);\r\n                    break;\r\n                }\r\n                else {\r\n                    arrs.push(tar);\r\n                }\r\n            }\r\n            if (arrs.length > 0) {\r\n                this.sendEvents(arrs, _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].MOUSE_OUT);\r\n            }\r\n            if (newArr.length > 0) {\r\n                this.sendEvents(newArr, _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].MOUSE_OVER);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 处理TouchMove事件\r\n     * @param ele 根节点\r\n     * @param touchID touchID\r\n     *\r\n     */\r\n    onMouseMove(ele, touchID) {\r\n        if (!this.enable)\r\n            return;\r\n        //DebugTxt.dTrace(\"onMouseMove:\"+touchID);\r\n        var preO;\r\n        preO = this.getTouchFromArr(touchID, this.preOvers);\r\n        var arrs;\r\n        var tO;\r\n        if (!preO) {\r\n            //理论上不会发生，因为必然先有touchstart再有touchMove\r\n            arrs = this.getEles(ele, null, TouchManager._tEleArr);\r\n            this.sendEvents(arrs, _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].MOUSE_OVER);\r\n            this.preOvers.push(this.createTouchO(ele, touchID));\r\n        }\r\n        else {\r\n            this.checkMouseOutAndOverOfMove(ele, preO.tar);\r\n            preO.tar = ele;\r\n            arrs = this.getEles(ele, null, TouchManager._tEleArr);\r\n        }\r\n        this.sendEvents(arrs, _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].MOUSE_MOVE);\r\n        this._clearTempArrs();\r\n    }\r\n    getLastOvers() {\r\n        TouchManager._tEleArr.length = 0;\r\n        if (this.preOvers.length > 0 && this.preOvers[0].tar) {\r\n            return this.getEles(this.preOvers[0].tar, null, TouchManager._tEleArr);\r\n        }\r\n        TouchManager._tEleArr.push(_Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage);\r\n        return TouchManager._tEleArr;\r\n    }\r\n    stageMouseOut() {\r\n        var lastOvers;\r\n        lastOvers = this.getLastOvers();\r\n        this.preOvers.length = 0;\r\n        this.sendEvents(lastOvers, _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].MOUSE_OUT);\r\n    }\r\n    /**\r\n     * 处理TouchEnd事件\r\n     * @param ele\t\t根节点\r\n     * @param touchID\ttouchID\r\n     * @param isLeft\t是否为左键\r\n     */\r\n    onMouseUp(ele, touchID, isLeft = false) {\r\n        if (!this.enable)\r\n            return;\r\n        var preO;\r\n        var tO;\r\n        var arrs;\r\n        var oldArr;\r\n        var i, len;\r\n        var tar;\r\n        var sendArr;\r\n        var onMobile = _utils_Browser__WEBPACK_IMPORTED_MODULE_2__[\"Browser\"].onMobile;\r\n        //处理up\r\n        arrs = this.getEles(ele, null, TouchManager._tEleArr);\r\n        this.sendEvents(arrs, isLeft ? _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].MOUSE_UP : _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].RIGHT_MOUSE_UP);\r\n        //处理click\r\n        var preDowns;\r\n        preDowns = isLeft ? this.preDowns : this.preRightDowns;\r\n        preO = this.getTouchFromArr(touchID, preDowns);\r\n        if (!preO) {\r\n        }\r\n        else {\r\n            var isDouble;\r\n            var now = _utils_Browser__WEBPACK_IMPORTED_MODULE_2__[\"Browser\"].now();\r\n            isDouble = now - this._lastClickTime < 300;\r\n            this._lastClickTime = now;\r\n            if (ele == preO.tar) {\r\n                sendArr = arrs;\r\n            }\r\n            else {\r\n                oldArr = this.getEles(preO.tar, null, TouchManager._oldArr);\r\n                sendArr = TouchManager._newArr;\r\n                sendArr.length = 0;\r\n                len = oldArr.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tar = oldArr[i];\r\n                    if (arrs.indexOf(tar) >= 0) {\r\n                        sendArr.push(tar);\r\n                    }\r\n                }\r\n            }\r\n            if (sendArr.length > 0) {\r\n                this.sendEvents(sendArr, isLeft ? _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].CLICK : _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].RIGHT_CLICK);\r\n            }\r\n            if (isLeft && isDouble) {\r\n                this.sendEvents(sendArr, _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].DOUBLE_CLICK);\r\n            }\r\n            this.removeTouchFromArr(touchID, preDowns);\r\n            preO.tar = null;\r\n            _utils_Pool__WEBPACK_IMPORTED_MODULE_3__[\"Pool\"].recover(\"TouchData\", preO);\r\n        }\r\n        //处理out\r\n        preO = this.getTouchFromArr(touchID, this.preOvers);\r\n        if (!preO) {\r\n            //理论上不会发生，因为必然先有touchstart再有touchEnd\r\n        }\r\n        else {\r\n            if (onMobile) {\r\n                sendArr = this.getEles(preO.tar, null, sendArr);\r\n                if (sendArr && sendArr.length > 0) {\r\n                    this.sendEvents(sendArr, _Event__WEBPACK_IMPORTED_MODULE_0__[\"Event\"].MOUSE_OUT);\r\n                }\r\n                this.removeTouchFromArr(touchID, this.preOvers);\r\n                preO.tar = null;\r\n                _utils_Pool__WEBPACK_IMPORTED_MODULE_3__[\"Pool\"].recover(\"TouchData\", preO);\r\n            }\r\n        }\r\n        this._clearTempArrs();\r\n    }\r\n}\r\nTouchManager.I = new TouchManager();\r\nTouchManager._oldArr = [];\r\nTouchManager._newArr = [];\r\nTouchManager._tEleArr = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/events/TouchManager.ts?");

/***/ }),

/***/ "./src/core/laya/filters/ColorFilter.ts":
/*!**********************************************!*\
  !*** ./src/core/laya/filters/ColorFilter.ts ***!
  \**********************************************/
/*! exports provided: ColorFilter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColorFilter\", function() { return ColorFilter; });\n/* harmony import */ var _Filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Filter */ \"./src/core/laya/filters/Filter.ts\");\n/* harmony import */ var _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ColorUtils */ \"./src/core/laya/utils/ColorUtils.ts\");\n\r\n\r\n/**\r\n * <p><code>ColorFilter</code> 是颜色滤镜。使用 ColorFilter 类可以将 4 x 5 矩阵转换应用于输入图像上的每个像素的 RGBA 颜色和 Alpha 值，以生成具有一组新的 RGBA 颜色和 Alpha 值的结果。该类允许饱和度更改、色相旋转、亮度转 Alpha 以及各种其他效果。您可以将滤镜应用于任何显示对象（即，从 Sprite 类继承的对象）。</p>\r\n * <p>注意：对于 RGBA 值，最高有效字节代表红色通道值，其后的有效字节分别代表绿色、蓝色和 Alpha 通道值。</p>\r\n */\r\nclass ColorFilter extends _Filter__WEBPACK_IMPORTED_MODULE_0__[\"Filter\"] {\r\n    /**\r\n     * 创建一个 <code>ColorFilter</code> 实例。\r\n     * @param mat\t（可选）由 20 个项目（排列成 4 x 5 矩阵）组成的数组，用于颜色转换。\r\n     */\r\n    constructor(mat = null) {\r\n        super();\r\n        if (!mat)\r\n            mat = this._copyMatrix(ColorFilter.IDENTITY_MATRIX);\r\n        this._mat = new Float32Array(16);\r\n        this._alpha = new Float32Array(4);\r\n        this.setByMatrix(mat);\r\n    }\r\n    /**\r\n     * 设置为灰色滤镜\r\n     */\r\n    gray() {\r\n        return this.setByMatrix(ColorFilter.GRAY_MATRIX);\r\n    }\r\n    /**\r\n     * 设置为变色滤镜\r\n     * @param red 红色增量,范围:0~255\r\n     * @param green 绿色增量,范围:0~255\r\n     * @param blue 蓝色增量,范围:0~255\r\n     * @param alpha alpha,范围:0~1\r\n     */\r\n    color(red = 0, green = 0, blue = 0, alpha = 1) {\r\n        return this.setByMatrix([1, 0, 0, 0, red, 0, 1, 0, 0, green, 0, 0, 1, 0, blue, 0, 0, 0, 1, alpha]);\r\n    }\r\n    /**\r\n     * 设置滤镜色\r\n     * @param\tcolor 颜色值\r\n     */\r\n    setColor(color) {\r\n        var arr = _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_1__[\"ColorUtils\"].create(color).arrColor;\r\n        var mt = [0, 0, 0, 0, 256 * arr[0], 0, 0, 0, 0, 256 * arr[1], 0, 0, 0, 0, 256 * arr[2], 0, 0, 0, 1, 0];\r\n        return this.setByMatrix(mt);\r\n    }\r\n    /**\r\n     * 设置矩阵数据\r\n     * @param matrix 由 20 个项目（排列成 4 x 5 矩阵）组成的数组\r\n     * @return this\r\n     */\r\n    setByMatrix(matrix) {\r\n        if (this._matrix != matrix)\r\n            this._copyMatrix(matrix);\r\n        var j = 0;\r\n        var z = 0;\r\n        for (var i = 0; i < 20; i++) {\r\n            if (i % 5 != 4) {\r\n                this._mat[j++] = matrix[i];\r\n            }\r\n            else {\r\n                this._alpha[z++] = matrix[i];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**@private */\r\n    /*override*/ get type() {\r\n        return _Filter__WEBPACK_IMPORTED_MODULE_0__[\"Filter\"].COLOR;\r\n    }\r\n    /**\r\n     * 调整颜色，包括亮度，对比度，饱和度和色调\r\n     * @param brightness 亮度,范围:-100~100\r\n     * @param contrast 对比度,范围:-100~100\r\n     * @param saturation 饱和度,范围:-100~100\r\n     * @param hue 色调,范围:-180~180\r\n     * @return this\r\n     */\r\n    adjustColor(brightness, contrast, saturation, hue) {\r\n        this.adjustHue(hue);\r\n        this.adjustContrast(contrast);\r\n        this.adjustBrightness(brightness);\r\n        this.adjustSaturation(saturation);\r\n        return this;\r\n    }\r\n    /**\r\n     * 调整亮度\r\n     * @param brightness 亮度,范围:-100~100\r\n     * @return this\r\n     */\r\n    adjustBrightness(brightness) {\r\n        brightness = this._clampValue(brightness, 100);\r\n        if (brightness == 0 || isNaN(brightness))\r\n            return this;\r\n        return this._multiplyMatrix([1, 0, 0, 0, brightness, 0, 1, 0, 0, brightness, 0, 0, 1, 0, brightness, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);\r\n    }\r\n    /**\r\n     * 调整对比度\r\n     * @param contrast 对比度,范围:-100~100\r\n     * @return this\r\n     */\r\n    adjustContrast(contrast) {\r\n        contrast = this._clampValue(contrast, 100);\r\n        if (contrast == 0 || isNaN(contrast))\r\n            return this;\r\n        var x;\r\n        if (contrast < 0) {\r\n            x = 127 + contrast / 100 * 127;\r\n        }\r\n        else {\r\n            x = contrast % 1;\r\n            if (x == 0) {\r\n                x = ColorFilter.DELTA_INDEX[contrast];\r\n            }\r\n            else {\r\n                x = ColorFilter.DELTA_INDEX[(contrast << 0)] * (1 - x) + ColorFilter.DELTA_INDEX[(contrast << 0) + 1] * x;\r\n            }\r\n            x = x * 127 + 127;\r\n        }\r\n        var x1 = x / 127;\r\n        var x2 = (127 - x) * 0.5;\r\n        return this._multiplyMatrix([x1, 0, 0, 0, x2, 0, x1, 0, 0, x2, 0, 0, x1, 0, x2, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);\r\n    }\r\n    /**\r\n     * 调整饱和度\r\n     * @param saturation 饱和度,范围:-100~100\r\n     * @return this\r\n     */\r\n    adjustSaturation(saturation) {\r\n        saturation = this._clampValue(saturation, 100);\r\n        if (saturation == 0 || isNaN(saturation))\r\n            return this;\r\n        var x = 1 + ((saturation > 0) ? 3 * saturation / 100 : saturation / 100);\r\n        var dx = 1 - x;\r\n        var r = 0.3086 * dx;\r\n        var g = 0.6094 * dx;\r\n        var b = 0.0820 * dx;\r\n        return this._multiplyMatrix([r + x, g, b, 0, 0, r, g + x, b, 0, 0, r, g, b + x, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);\r\n    }\r\n    /**\r\n     * 调整色调\r\n     * @param hue 色调,范围:-180~180\r\n     * @return this\r\n     */\r\n    adjustHue(hue) {\r\n        hue = this._clampValue(hue, 180) / 180 * Math.PI;\r\n        if (hue == 0 || isNaN(hue))\r\n            return this;\r\n        var cos = Math.cos(hue);\r\n        var sin = Math.sin(hue);\r\n        var r = 0.213;\r\n        var g = 0.715;\r\n        var b = 0.072;\r\n        return this._multiplyMatrix([r + cos * (1 - r) + sin * (-r), g + cos * (-g) + sin * (-g), b + cos * (-b) + sin * (1 - b), 0, 0, r + cos * (-r) + sin * (0.143), g + cos * (1 - g) + sin * (0.140), b + cos * (-b) + sin * (-0.283), 0, 0, r + cos * (-r) + sin * (-(1 - r)), g + cos * (-g) + sin * (g), b + cos * (1 - b) + sin * (b), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);\r\n    }\r\n    /**\r\n     * 重置成单位矩阵，去除滤镜效果\r\n     */\r\n    reset() {\r\n        return this.setByMatrix(this._copyMatrix(ColorFilter.IDENTITY_MATRIX));\r\n    }\r\n    /**\r\n     * 矩阵乘法\r\n     * @param matrix\r\n     * @return this\r\n     */\r\n    _multiplyMatrix(matrix) {\r\n        var col = [];\r\n        this._matrix = this._fixMatrix(this._matrix);\r\n        for (var i = 0; i < 5; i++) {\r\n            for (var j = 0; j < 5; j++) {\r\n                col[j] = this._matrix[j + i * 5];\r\n            }\r\n            for (j = 0; j < 5; j++) {\r\n                var val = 0;\r\n                for (var k = 0; k < 5; k++) {\r\n                    val += matrix[j + k * 5] * col[k];\r\n                }\r\n                this._matrix[j + i * 5] = val;\r\n            }\r\n        }\r\n        return this.setByMatrix(this._matrix);\r\n    }\r\n    /**\r\n     * 规范值的范围\r\n     * @param val 当前值\r\n     * @param limit 值的范围-limit~limit\r\n     */\r\n    _clampValue(val, limit) {\r\n        return Math.min(limit, Math.max(-limit, val));\r\n    }\r\n    /**\r\n     * 规范矩阵,将矩阵调整到正确的大小\r\n     * @param matrix 需要调整的矩阵\r\n     */\r\n    _fixMatrix(matrix = null) {\r\n        if (matrix == null)\r\n            return ColorFilter.IDENTITY_MATRIX;\r\n        if (matrix.length < ColorFilter.LENGTH)\r\n            matrix = matrix.slice(0, matrix.length).concat(ColorFilter.IDENTITY_MATRIX.slice(matrix.length, ColorFilter.LENGTH));\r\n        else if (matrix.length > ColorFilter.LENGTH)\r\n            matrix = matrix.slice(0, ColorFilter.LENGTH);\r\n        return matrix;\r\n    }\r\n    /**\r\n     * 复制矩阵\r\n     */\r\n    _copyMatrix(matrix) {\r\n        var len = ColorFilter.LENGTH;\r\n        if (!this._matrix)\r\n            this._matrix = [];\r\n        for (var i = 0; i < len; i++) {\r\n            this._matrix[i] = matrix[i];\r\n        }\r\n        return this._matrix;\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n/**对比度列表*/\r\nColorFilter.DELTA_INDEX = [0, 0.01, 0.02, 0.04, 0.05, 0.06, 0.07, 0.08, 0.1, 0.11, 0.12, 0.14, 0.15, 0.16, 0.17, 0.18, 0.20, 0.21, 0.22, 0.24, 0.25, 0.27, 0.28, 0.30, 0.32, 0.34, 0.36, 0.38, 0.40, 0.42, 0.44, 0.46, 0.48, 0.5, 0.53, 0.56, 0.59, 0.62, 0.65, 0.68, 0.71, 0.74, 0.77, 0.80, 0.83, 0.86, 0.89, 0.92, 0.95, 0.98, 1.0, 1.06, 1.12, 1.18, 1.24, 1.30, 1.36, 1.42, 1.48, 1.54, 1.60, 1.66, 1.72, 1.78, 1.84, 1.90, 1.96, 2.0, 2.12, 2.25, 2.37, 2.50, 2.62, 2.75, 2.87, 3.0, 3.2, 3.4, 3.6, 3.8, 4.0, 4.3, 4.7, 4.9, 5.0, 5.5, 6.0, 6.5, 6.8, 7.0, 7.3, 7.5, 7.8, 8.0, 8.4, 8.7, 9.0, 9.4, 9.6, 9.8, 10.0];\r\n/**灰色矩阵*/\r\nColorFilter.GRAY_MATRIX = [0.3086, 0.6094, 0.082, 0, 0, 0.3086, 0.6094, 0.082, 0, 0, 0.3086, 0.6094, 0.082, 0, 0, 0, 0, 0, 1, 0];\r\n/**单位矩阵,表示什么效果都没有*/\r\nColorFilter.IDENTITY_MATRIX = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];\r\n/**标准矩阵长度*/\r\nColorFilter.LENGTH = 25;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/filters/ColorFilter.ts?");

/***/ }),

/***/ "./src/core/laya/filters/Filter.ts":
/*!*****************************************!*\
  !*** ./src/core/laya/filters/Filter.ts ***!
  \*****************************************/
/*! exports provided: Filter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Filter\", function() { return Filter; });\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n/* harmony import */ var _maths_Point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../maths/Point */ \"./src/core/laya/maths/Point.ts\");\n/* harmony import */ var _maths_Rectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../maths/Rectangle */ \"./src/core/laya/maths/Rectangle.ts\");\n/* harmony import */ var _resource_RenderTexture2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../resource/RenderTexture2D */ \"./src/core/laya/resource/RenderTexture2D.ts\");\n/* harmony import */ var _resource_WebGLRTMgr__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../resource/WebGLRTMgr */ \"./src/core/laya/resource/WebGLRTMgr.ts\");\n/* harmony import */ var _webgl_canvas_BlendMode__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../webgl/canvas/BlendMode */ \"./src/core/laya/webgl/canvas/BlendMode.ts\");\n/* harmony import */ var _webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../webgl/shader/d2/ShaderDefines2D */ \"./src/core/laya/webgl/shader/d2/ShaderDefines2D.ts\");\n/* harmony import */ var _webgl_shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../webgl/shader/d2/value/Value2D */ \"./src/core/laya/webgl/shader/d2/value/Value2D.ts\");\n/* harmony import */ var _webgl_submit_SubmitCMD__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../webgl/submit/SubmitCMD */ \"./src/core/laya/webgl/submit/SubmitCMD.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * <code>Filter</code> 是滤镜基类。\r\n */\r\nclass Filter {\r\n    /**\r\n     * 创建一个 <code>Filter</code> 实例。\r\n     * */\r\n    constructor() { }\r\n    /**@private 滤镜类型。*/\r\n    get type() { return -1; }\r\n}\r\n/**@private 模糊滤镜。*/\r\nFilter.BLUR = 0x10;\r\n/**@private 颜色滤镜。*/\r\nFilter.COLOR = 0x20;\r\n/**@private 发光滤镜。*/\r\nFilter.GLOW = 0x08;\r\nFilter._filter = function (sprite, context, x, y) {\r\n    var webglctx = context;\r\n    var next = this._next;\r\n    if (next) {\r\n        var filters = sprite.filters, len = filters.length;\r\n        //如果只有一个滤镜，那么还用原来的方式\r\n        if (len == 1 && (filters[0].type == Filter.COLOR)) {\r\n            context.save();\r\n            context.setColorFilter(filters[0]);\r\n            next._fun.call(next, sprite, context, x, y);\r\n            context.restore();\r\n            return;\r\n        }\r\n        //思路：依次遍历滤镜，每次滤镜都画到out的RenderTarget上，然后把out画取src的RenderTarget做原图，去叠加新的滤镜\r\n        var svCP = _webgl_shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_7__[\"Value2D\"].create(_webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_6__[\"ShaderDefines2D\"].TEXTURE2D, 0); //拷贝用shaderValue\r\n        var b;\r\n        var p = _maths_Point__WEBPACK_IMPORTED_MODULE_1__[\"Point\"].TEMP;\r\n        var tMatrix = webglctx._curMat;\r\n        var mat = _maths_Matrix__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"].create();\r\n        tMatrix.copyTo(mat);\r\n        var tPadding = 0; //给glow用\r\n        var tHalfPadding = 0;\r\n        var tIsHaveGlowFilter = false;\r\n        //这里判断是否存储了out，如果存储了直接用;\r\n        var source = null;\r\n        var out = sprite._cacheStyle.filterCache || null;\r\n        if (!out || sprite.getRepaint() != 0) {\r\n            tIsHaveGlowFilter = sprite._isHaveGlowFilter();\r\n            //glow需要扩展边缘\r\n            if (tIsHaveGlowFilter) {\r\n                tPadding = 50;\r\n                tHalfPadding = 25;\r\n            }\r\n            b = new _maths_Rectangle__WEBPACK_IMPORTED_MODULE_2__[\"Rectangle\"]();\r\n            b.copyFrom(sprite.getSelfBounds());\r\n            b.x += sprite.x;\r\n            b.y += sprite.y;\r\n            b.x -= sprite.pivotX + 4; //blur \r\n            b.y -= sprite.pivotY + 4; //blur\r\n            var tSX = b.x;\r\n            var tSY = b.y;\r\n            //重新计算宽和高\r\n            b.width += (tPadding + 8); //增加宽度 blur  由于blur系数为9\r\n            b.height += (tPadding + 8); //增加高度 blur\r\n            p.x = b.x * mat.a + b.y * mat.c;\r\n            p.y = b.y * mat.d + b.x * mat.b;\r\n            b.x = p.x;\r\n            b.y = p.y;\r\n            p.x = b.width * mat.a + b.height * mat.c;\r\n            p.y = b.height * mat.d + b.width * mat.b;\r\n            b.width = p.x;\r\n            b.height = p.y;\r\n            if (b.width <= 0 || b.height <= 0) {\r\n                return;\r\n            }\r\n            out && _resource_WebGLRTMgr__WEBPACK_IMPORTED_MODULE_4__[\"WebGLRTMgr\"].releaseRT(out); // out.recycle();\r\n            source = _resource_WebGLRTMgr__WEBPACK_IMPORTED_MODULE_4__[\"WebGLRTMgr\"].getRT(b.width, b.height);\r\n            var outRT = out = _resource_WebGLRTMgr__WEBPACK_IMPORTED_MODULE_4__[\"WebGLRTMgr\"].getRT(b.width, b.height);\r\n            sprite._getCacheStyle().filterCache = out;\r\n            //使用RT\r\n            webglctx.pushRT();\r\n            webglctx.useRT(source);\r\n            var tX = sprite.x - tSX + tHalfPadding;\r\n            var tY = sprite.y - tSY + tHalfPadding;\r\n            //执行节点的渲染\r\n            next._fun.call(next, sprite, context, tX, tY);\r\n            webglctx.useRT(outRT);\r\n            for (var i = 0; i < len; i++) {\r\n                if (i != 0) {\r\n                    //把out往src上画。这只是一个拷贝的过程，下面draw(src) to outRT 才是真正的应用filter\r\n                    //由于是延迟执行，不能直接在这里swap。 TODO 改成延迟swap\r\n                    webglctx.useRT(source);\r\n                    webglctx.drawTarget(outRT, 0, 0, b.width, b.height, _maths_Matrix__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"].TEMP.identity(), svCP, null, _webgl_canvas_BlendMode__WEBPACK_IMPORTED_MODULE_5__[\"BlendMode\"].TOINT.overlay);\r\n                    webglctx.useRT(outRT);\r\n                }\r\n                var fil = filters[i];\r\n                //把src往out上画\r\n                switch (fil.type) {\r\n                    case Filter.BLUR:\r\n                        fil._glRender && fil._glRender.render(source, context, b.width, b.height, fil);\r\n                        //BlurFilterGLRender.render(source, context, b.width, b.height, fil as BlurFilter);\r\n                        break;\r\n                    case Filter.GLOW:\r\n                        //GlowFilterGLRender.render(source, context, b.width, b.height, fil as GlowFilter);\r\n                        fil._glRender && fil._glRender.render(source, context, b.width, b.height, fil);\r\n                        break;\r\n                    case Filter.COLOR:\r\n                        webglctx.setColorFilter(fil);\r\n                        webglctx.drawTarget(source, 0, 0, b.width, b.height, _maths_Matrix__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"].EMPTY.identity(), _webgl_shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_7__[\"Value2D\"].create(_webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_6__[\"ShaderDefines2D\"].TEXTURE2D, 0));\r\n                        webglctx.setColorFilter(null);\r\n                        break;\r\n                }\r\n            }\r\n            webglctx.popRT();\r\n        }\r\n        else {\r\n            tIsHaveGlowFilter = sprite._cacheStyle.hasGlowFilter || false;\r\n            if (tIsHaveGlowFilter) {\r\n                tPadding = 50;\r\n                tHalfPadding = 25;\r\n            }\r\n            b = sprite.getBounds();\r\n            if (b.width <= 0 || b.height <= 0) {\r\n                return;\r\n            }\r\n            b.width += tPadding;\r\n            b.height += tPadding;\r\n            p.x = b.x * mat.a + b.y * mat.c;\r\n            p.y = b.y * mat.d + b.x * mat.b;\r\n            b.x = p.x;\r\n            b.y = p.y;\r\n            p.x = b.width * mat.a + b.height * mat.c;\r\n            p.y = b.height * mat.d + b.width * mat.b;\r\n            b.width = p.x;\r\n            b.height = p.y;\r\n            //scope.addValue(\"out\", out);\r\n        }\r\n        x = x - tHalfPadding - sprite.x;\r\n        y = y - tHalfPadding - sprite.y;\r\n        p.setTo(x, y);\r\n        mat.transformPoint(p);\r\n        x = p.x + b.x;\r\n        y = p.y + b.y;\r\n        //把最后的out纹理画出来\r\n        webglctx._drawRenderTexture(out, x, y, b.width, b.height, _maths_Matrix__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"].TEMP.identity(), 1.0, _resource_RenderTexture2D__WEBPACK_IMPORTED_MODULE_3__[\"RenderTexture2D\"].defuv);\r\n        //把对象放回池子中\r\n        //var submit:SubmitCMD = SubmitCMD.create([scope], Filter._recycleScope, this);\r\n        if (source) {\r\n            var submit = _webgl_submit_SubmitCMD__WEBPACK_IMPORTED_MODULE_8__[\"SubmitCMD\"].create([source], function (s) {\r\n                s.destroy();\r\n            }, this);\r\n            source = null;\r\n            context.addRenderObject(submit);\r\n        }\r\n        mat.destroy();\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./src/core/laya/filters/Filter.ts?");

/***/ }),

/***/ "./src/core/laya/layagl/CommandEncoder.ts":
/*!************************************************!*\
  !*** ./src/core/laya/layagl/CommandEncoder.ts ***!
  \************************************************/
/*! exports provided: CommandEncoder */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CommandEncoder\", function() { return CommandEncoder; });\n/**\r\n * @private\r\n * CommandEncoder\r\n */\r\nclass CommandEncoder {\r\n    //TODO:coverage\r\n    constructor(layagl, reserveSize, adjustSize, isSyncToRenderThread) {\r\n        this._idata = [];\r\n    }\r\n    //TODO:coverage\r\n    getArrayData() {\r\n        return this._idata;\r\n    }\r\n    //TODO:coverage\r\n    getPtrID() {\r\n        return 0;\r\n    }\r\n    beginEncoding() {\r\n    }\r\n    endEncoding() {\r\n    }\r\n    //TODO:coverage\r\n    clearEncoding() {\r\n        this._idata.length = 0;\r\n    }\r\n    //TODO:coverage\r\n    getCount() {\r\n        return this._idata.length;\r\n    }\r\n    //TODO:coverage\r\n    add_ShaderValue(o) {\r\n        this._idata.push(o);\r\n    }\r\n    //TODO:coverage\r\n    addShaderUniform(one) {\r\n        this.add_ShaderValue(one);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/layagl/CommandEncoder.ts?");

/***/ }),

/***/ "./src/core/laya/layagl/LayaGL.ts":
/*!****************************************!*\
  !*** ./src/core/laya/layagl/LayaGL.ts ***!
  \****************************************/
/*! exports provided: LayaGL */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LayaGL\", function() { return LayaGL; });\n/* harmony import */ var _CommandEncoder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././CommandEncoder */ \"./src/core/laya/layagl/CommandEncoder.ts\");\n\r\n/**\r\n * @private\r\n * 封装GL命令\r\n */\r\nclass LayaGL {\r\n    //TODO:coverage\r\n    createCommandEncoder(reserveSize = 128, adjustSize = 64, isSyncToRenderThread = false) {\r\n        return new _CommandEncoder__WEBPACK_IMPORTED_MODULE_0__[\"CommandEncoder\"](this, reserveSize, adjustSize, isSyncToRenderThread);\r\n    }\r\n    beginCommandEncoding(commandEncoder) {\r\n    }\r\n    endCommandEncoding() {\r\n    }\r\n    //TODO:coverage\r\n    static getFrameCount() {\r\n        return 0;\r\n    }\r\n    static syncBufferToRenderThread(value, index = 0) {\r\n    }\r\n    static createArrayBufferRef(arrayBuffer, type, syncRender) {\r\n    }\r\n    static createArrayBufferRefs(arrayBuffer, type, syncRender, refType) {\r\n    }\r\n    matrix4x4Multiply(m1, m2, out) {\r\n    }\r\n    evaluateClipDatasRealTime(nodes, playCurTime, realTimeCurrentFrameIndexs, addtive) {\r\n    }\r\n}\r\n//-------------------------------------------------------------------------------------\r\nLayaGL.EXECUTE_JS_THREAD_BUFFER = 0; //直接执行JS线程中的buffer\r\nLayaGL.EXECUTE_RENDER_THREAD_BUFFER = 1; //直接执行渲染线程的buffer\r\nLayaGL.EXECUTE_COPY_TO_RENDER = 2; //拷贝buffer到渲染线程\r\nLayaGL.EXECUTE_COPY_TO_RENDER3D = 3; //拷贝3Dbuffer到渲染线程\r\n//-------------------------------------------------------------------------------------\r\nLayaGL.ARRAY_BUFFER_TYPE_DATA = 0; //创建ArrayBuffer时的类型为Data\r\nLayaGL.ARRAY_BUFFER_TYPE_CMD = 1; //创建ArrayBuffer时的类型为Command\r\nLayaGL.ARRAY_BUFFER_REF_REFERENCE = 0; //创建ArrayBuffer时的类型为引用\r\nLayaGL.ARRAY_BUFFER_REF_COPY = 1; //创建ArrayBuffer时的类型为拷贝\r\nLayaGL.UPLOAD_SHADER_UNIFORM_TYPE_ID = 0; //data按照ID传入\r\nLayaGL.UPLOAD_SHADER_UNIFORM_TYPE_DATA = 1; //data按照数据传入\r\n\n\n//# sourceURL=webpack:///./src/core/laya/layagl/LayaGL.ts?");

/***/ }),

/***/ "./src/core/laya/layagl/LayaGLRunner.ts":
/*!**********************************************!*\
  !*** ./src/core/laya/layagl/LayaGLRunner.ts ***!
  \**********************************************/
/*! exports provided: LayaGLRunner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LayaGLRunner\", function() { return LayaGLRunner; });\n/* harmony import */ var _LayaGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LayaGL */ \"./src/core/laya/layagl/LayaGL.ts\");\n\r\n/**\r\n * @private\r\n * 普通命令执行器\r\n */\r\nclass LayaGLRunner {\r\n    /**\r\n     * @private\r\n     * 批量上传ShaderUniforms。\r\n     */\r\n    static uploadShaderUniforms(layaGL, commandEncoder, shaderData, uploadUnTexture) {\r\n        var data = shaderData._data;\r\n        var shaderUniform = commandEncoder.getArrayData();\r\n        var shaderCall = 0;\r\n        for (var i = 0, n = shaderUniform.length; i < n; i++) {\r\n            var one = shaderUniform[i];\r\n            if (uploadUnTexture || one.textureID !== -1) { //如uniform为纹理切换Shader时需要重新上传\r\n                var value = data[one.dataOffset];\r\n                if (value != null)\r\n                    shaderCall += one.fun.call(one.caller, one, value);\r\n            }\r\n        }\r\n        return shaderCall;\r\n    }\r\n    /**\r\n     * @private\r\n     * 上传ShaderUniform。\r\n     */\r\n    static uploadCustomUniform(layaGL, custom, index, data) {\r\n        var shaderCall = 0;\r\n        var one = custom[index];\r\n        if (one && data != null)\r\n            shaderCall += one.fun.call(one.caller, one, data);\r\n        return shaderCall;\r\n    }\r\n    /**\r\n     * @private\r\n     * 批量上传ShaderUniforms。\r\n     */\r\n    static uploadShaderUniformsForNative(layaGL, commandEncoder, shaderData) {\r\n        var nType = _LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].UPLOAD_SHADER_UNIFORM_TYPE_ID;\r\n        if (shaderData._runtimeCopyValues.length > 0) {\r\n            nType = _LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].UPLOAD_SHADER_UNIFORM_TYPE_DATA;\r\n        }\r\n        var data = shaderData._data;\r\n        return layaGL.uploadShaderUniforms(commandEncoder, data, nType);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/layagl/LayaGLRunner.ts?");

/***/ }),

/***/ "./src/core/laya/maths/Bezier.ts":
/*!***************************************!*\
  !*** ./src/core/laya/maths/Bezier.ts ***!
  \***************************************/
/*! exports provided: Bezier */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Bezier\", function() { return Bezier; });\n/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Point */ \"./src/core/laya/maths/Point.ts\");\n\r\n/**\r\n     * @private\r\n     * 计算贝塞尔曲线的工具类。\r\n     */\r\nclass Bezier {\r\n    constructor() {\r\n        /** @private */\r\n        this._controlPoints = [new _Point__WEBPACK_IMPORTED_MODULE_0__[\"Point\"](), new _Point__WEBPACK_IMPORTED_MODULE_0__[\"Point\"](), new _Point__WEBPACK_IMPORTED_MODULE_0__[\"Point\"]()];\r\n        /** @private */\r\n        this._calFun = this.getPoint2;\r\n    }\r\n    /** @private */\r\n    _switchPoint(x, y) {\r\n        var tPoint = this._controlPoints.shift();\r\n        tPoint.setTo(x, y);\r\n        this._controlPoints.push(tPoint);\r\n    }\r\n    /**\r\n     * 计算二次贝塞尔点。\r\n     */\r\n    getPoint2(t, rst) {\r\n        //二次贝塞尔曲线公式\r\n        var p1 = this._controlPoints[0];\r\n        var p2 = this._controlPoints[1];\r\n        var p3 = this._controlPoints[2];\r\n        var lineX = Math.pow((1 - t), 2) * p1.x + 2 * t * (1 - t) * p2.x + Math.pow(t, 2) * p3.x;\r\n        var lineY = Math.pow((1 - t), 2) * p1.y + 2 * t * (1 - t) * p2.y + Math.pow(t, 2) * p3.y;\r\n        rst.push(lineX, lineY);\r\n    }\r\n    /**\r\n     * 计算三次贝塞尔点\r\n     */\r\n    getPoint3(t, rst) {\r\n        //三次贝塞尔曲线公式\r\n        var p1 = this._controlPoints[0];\r\n        var p2 = this._controlPoints[1];\r\n        var p3 = this._controlPoints[2];\r\n        var p4 = this._controlPoints[3];\r\n        var lineX = Math.pow((1 - t), 3) * p1.x + 3 * p2.x * t * (1 - t) * (1 - t) + 3 * p3.x * t * t * (1 - t) + p4.x * Math.pow(t, 3);\r\n        var lineY = Math.pow((1 - t), 3) * p1.y + 3 * p2.y * t * (1 - t) * (1 - t) + 3 * p3.y * t * t * (1 - t) + p4.y * Math.pow(t, 3);\r\n        rst.push(lineX, lineY);\r\n    }\r\n    /**\r\n     * 计算贝塞尔点序列\r\n     */\r\n    insertPoints(count, rst) {\r\n        var i;\r\n        count = count > 0 ? count : 5;\r\n        var dLen;\r\n        dLen = 1 / count;\r\n        for (i = 0; i <= 1; i += dLen) {\r\n            this._calFun(i, rst);\r\n        }\r\n    }\r\n    /**\r\n     * 获取贝塞尔曲线上的点。\r\n     * @param pList 控制点[x0,y0,x1,y1...]\r\n     * @param inSertCount 每次曲线的插值数量\r\n     */\r\n    getBezierPoints(pList, inSertCount = 5, count = 2) {\r\n        var i, len;\r\n        len = pList.length;\r\n        if (len < (count + 1) * 2)\r\n            return [];\r\n        var rst = [];\r\n        switch (count) {\r\n            case 2:\r\n                this._calFun = this.getPoint2;\r\n                break;\r\n            case 3:\r\n                this._calFun = this.getPoint3;\r\n                break;\r\n            default:\r\n                return [];\r\n        }\r\n        while (this._controlPoints.length <= count) {\r\n            this._controlPoints.push(_Point__WEBPACK_IMPORTED_MODULE_0__[\"Point\"].create());\r\n        }\r\n        for (i = 0; i < count * 2; i += 2) {\r\n            this._switchPoint(pList[i], pList[i + 1]);\r\n        }\r\n        for (i = count * 2; i < len; i += 2) {\r\n            this._switchPoint(pList[i], pList[i + 1]);\r\n            if ((i / 2) % count == 0)\r\n                this.insertPoints(inSertCount, rst);\r\n        }\r\n        return rst;\r\n    }\r\n}\r\n/**\r\n * 工具类单例\r\n */\r\nBezier.I = new Bezier();\r\n\n\n//# sourceURL=webpack:///./src/core/laya/maths/Bezier.ts?");

/***/ }),

/***/ "./src/core/laya/maths/GrahamScan.ts":
/*!*******************************************!*\
  !*** ./src/core/laya/maths/GrahamScan.ts ***!
  \*******************************************/
/*! exports provided: GrahamScan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"GrahamScan\", function() { return GrahamScan; });\n/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Point */ \"./src/core/laya/maths/Point.ts\");\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Utils */ \"./src/core/laya/utils/Utils.ts\");\n\r\n\r\n/**\r\n * @private\r\n * 凸包算法。\r\n */\r\nclass GrahamScan {\r\n    static multiply(p1, p2, p0) {\r\n        return ((p1.x - p0.x) * (p2.y - p0.y) - (p2.x - p0.x) * (p1.y - p0.y));\r\n    }\r\n    /**\r\n     * 计算两个点的距离。\r\n     * @param\tp1\r\n     * @param\tp2\r\n     * @return\r\n     */\r\n    static dis(p1, p2) {\r\n        return (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);\r\n    }\r\n    static _getPoints(count, tempUse = false, rst = null) {\r\n        if (!GrahamScan._mPointList)\r\n            GrahamScan._mPointList = [];\r\n        while (GrahamScan._mPointList.length < count)\r\n            GrahamScan._mPointList.push(new _Point__WEBPACK_IMPORTED_MODULE_0__[\"Point\"]());\r\n        if (!rst)\r\n            rst = [];\r\n        rst.length = 0;\r\n        if (tempUse) {\r\n            //\t\t\t\trst=_mPointList.slice(0,count);\r\n            GrahamScan.getFrom(rst, GrahamScan._mPointList, count);\r\n        }\r\n        else {\r\n            //\t\t\t\trst=_mPointList.splice(0,count);\r\n            GrahamScan.getFromR(rst, GrahamScan._mPointList, count);\r\n        }\r\n        return rst;\r\n    }\r\n    /**\r\n     * 将数组 src 从索引0位置 依次取 cout 个项添加至 tst 数组的尾部。\r\n     * @param\trst 原始数组，用于添加新的子元素。\r\n     * @param\tsrc 用于取子元素的数组。\r\n     * @param\tcount 需要取得子元素个数。\r\n     * @return 添加完子元素的 rst 对象。\r\n     */\r\n    static getFrom(rst, src, count) {\r\n        var i;\r\n        for (i = 0; i < count; i++) {\r\n            rst.push(src[i]);\r\n        }\r\n        return rst;\r\n    }\r\n    /**\r\n     * 将数组 src 从末尾索引位置往头部索引位置方向 依次取 cout 个项添加至 tst 数组的尾部。\r\n     * @param\trst 原始数组，用于添加新的子元素。\r\n     * @param\tsrc 用于取子元素的数组。\r\n     * @param\tcount 需要取得子元素个数。\r\n     * @return 添加完子元素的 rst 对象。\r\n     */\r\n    static getFromR(rst, src, count) {\r\n        var i;\r\n        for (i = 0; i < count; i++) {\r\n            rst.push(src.pop());\r\n        }\r\n        return rst;\r\n    }\r\n    /**\r\n     *  [x,y...]列表 转 Point列表\r\n     * @param pList Point列表\r\n     * @return [x,y...]列表\r\n     */\r\n    static pListToPointList(pList, tempUse = false) {\r\n        var i, len = pList.length / 2, rst = GrahamScan._getPoints(len, tempUse, GrahamScan._tempPointList);\r\n        for (i = 0; i < len; i++) {\r\n            rst[i].setTo(pList[i + i], pList[i + i + 1]);\r\n        }\r\n        return rst;\r\n    }\r\n    /**\r\n     * Point列表转[x,y...]列表\r\n     * @param pointList Point列表\r\n     * @return [x,y...]列表\r\n     */\r\n    static pointListToPlist(pointList) {\r\n        var i, len = pointList.length, rst = GrahamScan._temPList, tPoint;\r\n        rst.length = 0;\r\n        for (i = 0; i < len; i++) {\r\n            tPoint = pointList[i];\r\n            rst.push(tPoint.x, tPoint.y);\r\n        }\r\n        return rst;\r\n    }\r\n    /**\r\n     *  寻找包括所有点的最小多边形顶点集合\r\n     * @param pList 形如[x0,y0,x1,y1...]的点列表\r\n     * @return  最小多边形顶点集合\r\n     */\r\n    static scanPList(pList) {\r\n        return _utils_Utils__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].copyArray(pList, GrahamScan.pointListToPlist(GrahamScan.scan(GrahamScan.pListToPointList(pList, true))));\r\n    }\r\n    /**\r\n     * 寻找包括所有点的最小多边形顶点集合\r\n     * @param PointSet Point列表\r\n     * @return 最小多边形顶点集合\r\n     */\r\n    static scan(PointSet) {\r\n        var i, j, k = 0, top = 2, tmp, n = PointSet.length, ch;\r\n        var _tmpDic = {};\r\n        var key;\r\n        ch = GrahamScan._temArr;\r\n        ch.length = 0;\r\n        n = PointSet.length;\r\n        for (i = n - 1; i >= 0; i--) {\r\n            tmp = PointSet[i];\r\n            key = tmp.x + \"_\" + tmp.y;\r\n            if (!_tmpDic.hasOwnProperty(key)) {\r\n                _tmpDic[key] = true;\r\n                ch.push(tmp);\r\n            }\r\n        }\r\n        n = ch.length;\r\n        _utils_Utils__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].copyArray(PointSet, ch);\r\n        //\t\t\tPointSet=ch;\r\n        //\t\t\tn=PointSet.length;\r\n        //找到最下且偏左的那个点  \r\n        for (i = 1; i < n; i++)\r\n            if ((PointSet[i].y < PointSet[k].y) || ((PointSet[i].y == PointSet[k].y) && (PointSet[i].x < PointSet[k].x)))\r\n                k = i;\r\n        //将这个点指定为PointSet[0]  \r\n        tmp = PointSet[0];\r\n        PointSet[0] = PointSet[k];\r\n        PointSet[k] = tmp;\r\n        //按极角从小到大,距离偏短进行排序  \r\n        for (i = 1; i < n - 1; i++) {\r\n            k = i;\r\n            for (j = i + 1; j < n; j++)\r\n                if ((GrahamScan.multiply(PointSet[j], PointSet[k], PointSet[0]) > 0) || ((GrahamScan.multiply(PointSet[j], PointSet[k], PointSet[0]) == 0) && (GrahamScan.dis(PointSet[0], PointSet[j]) < GrahamScan.dis(PointSet[0], PointSet[k]))))\r\n                    k = j; //k保存极角最小的那个点,或者相同距离原点最近  \r\n            tmp = PointSet[i];\r\n            PointSet[i] = PointSet[k];\r\n            PointSet[k] = tmp;\r\n        }\r\n        //第三个点先入栈  \r\n        ch = GrahamScan._temArr;\r\n        ch.length = 0;\r\n        //trace(\"scan:\",PointSet[0],PointSet[1],PointSet[2]);\r\n        if (PointSet.length < 3) {\r\n            return _utils_Utils__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].copyArray(ch, PointSet);\r\n        }\r\n        ch.push(PointSet[0], PointSet[1], PointSet[2]);\r\n        //ch=[PointSet[0],PointSet[1],PointSet[2]];\r\n        //判断与其余所有点的关系  \r\n        for (i = 3; i < n; i++) {\r\n            //不满足向左转的关系,栈顶元素出栈  \r\n            while (ch.length >= 2 && GrahamScan.multiply(PointSet[i], ch[ch.length - 1], ch[ch.length - 2]) >= 0)\r\n                ch.pop();\r\n            //当前点与栈内所有点满足向左关系,因此入栈.  \r\n            PointSet[i] && ch.push(PointSet[i]);\r\n        }\r\n        return ch;\r\n    }\r\n}\r\nGrahamScan._tempPointList = [];\r\nGrahamScan._temPList = [];\r\nGrahamScan._temArr = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/maths/GrahamScan.ts?");

/***/ }),

/***/ "./src/core/laya/maths/MathUtil.ts":
/*!*****************************************!*\
  !*** ./src/core/laya/maths/MathUtil.ts ***!
  \*****************************************/
/*! exports provided: MathUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MathUtil\", function() { return MathUtil; });\n/**\r\n     * @private\r\n     * <code>MathUtil</code> 是一个数据处理工具类。\r\n     */\r\nclass MathUtil {\r\n    static subtractVector3(l, r, o) {\r\n        o[0] = l[0] - r[0];\r\n        o[1] = l[1] - r[1];\r\n        o[2] = l[2] - r[2];\r\n    }\r\n    static lerp(left, right, amount) {\r\n        return left * (1 - amount) + right * amount;\r\n    }\r\n    static scaleVector3(f, b, e) {\r\n        e[0] = f[0] * b;\r\n        e[1] = f[1] * b;\r\n        e[2] = f[2] * b;\r\n    }\r\n    static lerpVector3(l, r, t, o) {\r\n        var ax = l[0], ay = l[1], az = l[2];\r\n        o[0] = ax + t * (r[0] - ax);\r\n        o[1] = ay + t * (r[1] - ay);\r\n        o[2] = az + t * (r[2] - az);\r\n    }\r\n    static lerpVector4(l, r, t, o) {\r\n        var ax = l[0], ay = l[1], az = l[2], aw = l[3];\r\n        o[0] = ax + t * (r[0] - ax);\r\n        o[1] = ay + t * (r[1] - ay);\r\n        o[2] = az + t * (r[2] - az);\r\n        o[3] = aw + t * (r[3] - aw);\r\n    }\r\n    static slerpQuaternionArray(a, Offset1, b, Offset2, t, out, Offset3) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        var ax = a[Offset1 + 0], ay = a[Offset1 + 1], az = a[Offset1 + 2], aw = a[Offset1 + 3], bx = b[Offset2 + 0], by = b[Offset2 + 1], bz = b[Offset2 + 2], bw = b[Offset2 + 3];\r\n        var omega, cosom, sinom, scale0, scale1;\r\n        // calc cosine \r\n        cosom = ax * bx + ay * by + az * bz + aw * bw;\r\n        // adjust signs (if necessary) \r\n        if (cosom < 0.0) {\r\n            cosom = -cosom;\r\n            bx = -bx;\r\n            by = -by;\r\n            bz = -bz;\r\n            bw = -bw;\r\n        }\r\n        // calculate coefficients \r\n        if ((1.0 - cosom) > 0.000001) {\r\n            // standard case (slerp) \r\n            omega = Math.acos(cosom);\r\n            sinom = Math.sin(omega);\r\n            scale0 = Math.sin((1.0 - t) * omega) / sinom;\r\n            scale1 = Math.sin(t * omega) / sinom;\r\n        }\r\n        else {\r\n            // \"from\" and \"to\" quaternions are very close  \r\n            //  ... so we can do a linear interpolation \r\n            scale0 = 1.0 - t;\r\n            scale1 = t;\r\n        }\r\n        // calculate final values \r\n        out[Offset3 + 0] = scale0 * ax + scale1 * bx;\r\n        out[Offset3 + 1] = scale0 * ay + scale1 * by;\r\n        out[Offset3 + 2] = scale0 * az + scale1 * bz;\r\n        out[Offset3 + 3] = scale0 * aw + scale1 * bw;\r\n        return out;\r\n    }\r\n    /**\r\n     * 获取指定的两个点组成的线段的弧度值。\r\n     * @param\tx0 点一的 X 轴坐标值。\r\n     * @param\ty0 点一的 Y 轴坐标值。\r\n     * @param\tx1 点二的 X 轴坐标值。\r\n     * @param\ty1 点二的 Y 轴坐标值。\r\n     * @return 弧度值。\r\n     */\r\n    static getRotation(x0, y0, x1, y1) {\r\n        return Math.atan2(y1 - y0, x1 - x0) / Math.PI * 180;\r\n    }\r\n    /**\r\n     * 一个用来确定数组元素排序顺序的比较函数。\r\n     * @param\ta 待比较数字。\r\n     * @param\tb 待比较数字。\r\n     * @return 如果a等于b 则值为0；如果b>a则值为1；如果b<则值为-1。\r\n     */\r\n    static sortBigFirst(a, b) {\r\n        if (a == b)\r\n            return 0;\r\n        return b > a ? 1 : -1;\r\n    }\r\n    /**\r\n     * 一个用来确定数组元素排序顺序的比较函数。\r\n     * @param\ta 待比较数字。\r\n     * @param\tb 待比较数字。\r\n     * @return 如果a等于b 则值为0；如果b>a则值为-1；如果b<则值为1。\r\n     */\r\n    static sortSmallFirst(a, b) {\r\n        if (a == b)\r\n            return 0;\r\n        return b > a ? -1 : 1;\r\n    }\r\n    /**\r\n     * 将指定的元素转为数字进行比较。\r\n     * @param\ta 待比较元素。\r\n     * @param\tb 待比较元素。\r\n     * @return b、a转化成数字的差值 (b-a)。\r\n     */\r\n    static sortNumBigFirst(a, b) {\r\n        return parseFloat(b) - parseFloat(a);\r\n    }\r\n    /**\r\n     * 将指定的元素转为数字进行比较。\r\n     * @param\ta 待比较元素。\r\n     * @param\tb 待比较元素。\r\n     * @return a、b转化成数字的差值 (a-b)。\r\n     */\r\n    static sortNumSmallFirst(a, b) {\r\n        return parseFloat(a) - parseFloat(b);\r\n    }\r\n    /**\r\n     * 返回根据对象指定的属性进行排序的比较函数。\r\n     * @param\tkey 排序要依据的元素属性名。\r\n     * @param\tbigFirst 如果值为true，则按照由大到小的顺序进行排序，否则按照由小到大的顺序进行排序。\r\n     * @param\tforceNum 如果值为true，则将排序的元素转为数字进行比较。\r\n     * @return 排序函数。\r\n     */\r\n    static sortByKey(key, bigFirst = false, forceNum = true) {\r\n        var _sortFun;\r\n        if (bigFirst) {\r\n            _sortFun = forceNum ? MathUtil.sortNumBigFirst : MathUtil.sortBigFirst;\r\n        }\r\n        else {\r\n            _sortFun = forceNum ? MathUtil.sortNumSmallFirst : MathUtil.sortSmallFirst;\r\n        }\r\n        return function (a, b) {\r\n            return _sortFun(a[key], b[key]);\r\n        };\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/maths/MathUtil.ts?");

/***/ }),

/***/ "./src/core/laya/maths/Matrix.ts":
/*!***************************************!*\
  !*** ./src/core/laya/maths/Matrix.ts ***!
  \***************************************/
/*! exports provided: Matrix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Matrix\", function() { return Matrix; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * <p> <code>Matrix</code> 类表示一个转换矩阵，它确定如何将点从一个坐标空间映射到另一个坐标空间。</p>\r\n * <p>您可以对一个显示对象执行不同的图形转换，方法是设置 Matrix 对象的属性，将该 Matrix 对象应用于 Transform 对象的 matrix 属性，然后应用该 Transform 对象作为显示对象的 transform 属性。这些转换函数包括平移（x 和 y 重新定位）、旋转、缩放和倾斜。</p>\r\n */\r\nclass Matrix {\r\n    /**\r\n     * 使用指定参数创建新的 <code>Matrix</code> 对象。\r\n     * @param a\t\t（可选）缩放或旋转图像时影响像素沿 x 轴定位的值。\r\n     * @param b\t\t（可选）旋转或倾斜图像时影响像素沿 y 轴定位的值。\r\n     * @param c\t\t（可选）旋转或倾斜图像时影响像素沿 x 轴定位的值。\r\n     * @param d\t\t（可选）缩放或旋转图像时影响像素沿 y 轴定位的值。\r\n     * @param tx\t（可选）沿 x 轴平移每个点的距离。\r\n     * @param ty\t（可选）沿 y 轴平移每个点的距离。\r\n     */\r\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0, nums = 0) {\r\n        /**@private 是否有旋转缩放操作*/\r\n        this._bTransform = false;\r\n        if (Matrix._createFun != null) {\r\n            return Matrix._createFun(a, b, c, d, tx, ty, nums);\r\n        }\r\n        this.a = a;\r\n        this.b = b;\r\n        this.c = c;\r\n        this.d = d;\r\n        this.tx = tx;\r\n        this.ty = ty;\r\n        this._checkTransform();\r\n    }\r\n    /**\r\n     * 将本矩阵设置为单位矩阵。\r\n     * @return 返回当前矩形。\r\n     */\r\n    identity() {\r\n        this.a = this.d = 1;\r\n        this.b = this.tx = this.ty = this.c = 0;\r\n        this._bTransform = false;\r\n        return this;\r\n    }\r\n    /**@private */\r\n    _checkTransform() {\r\n        return this._bTransform = (this.a !== 1 || this.b !== 0 || this.c !== 0 || this.d !== 1);\r\n    }\r\n    /**\r\n     * 设置沿 x 、y 轴平移每个点的距离。\r\n     * @param\tx 沿 x 轴平移每个点的距离。\r\n     * @param\ty 沿 y 轴平移每个点的距离。\r\n     * @return\t返回对象本身\r\n     */\r\n    setTranslate(x, y) {\r\n        this.tx = x;\r\n        this.ty = y;\r\n        return this;\r\n    }\r\n    /**\r\n     * 沿 x 和 y 轴平移矩阵，平移的变化量由 x 和 y 参数指定。\r\n     * @param\tx 沿 x 轴向右移动的量（以像素为单位）。\r\n     * @param\ty 沿 y 轴向下移动的量（以像素为单位）。\r\n     * @return 返回此矩形对象。\r\n     */\r\n    translate(x, y) {\r\n        this.tx += x;\r\n        this.ty += y;\r\n        return this;\r\n    }\r\n    /**\r\n     * 对矩阵应用缩放转换。\r\n     * @param\tx 用于沿 x 轴缩放对象的乘数。\r\n     * @param\ty 用于沿 y 轴缩放对象的乘数。\r\n     * @return\t返回矩阵对象本身\r\n     */\r\n    scale(x, y) {\r\n        this.a *= x;\r\n        this.d *= y;\r\n        this.c *= x;\r\n        this.b *= y;\r\n        this.tx *= x;\r\n        this.ty *= y;\r\n        this._bTransform = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * 对 Matrix 对象应用旋转转换。\r\n     * @param\tangle 以弧度为单位的旋转角度。\r\n     * @return\t返回矩阵对象本身\r\n     */\r\n    rotate(angle) {\r\n        var cos = Math.cos(angle);\r\n        var sin = Math.sin(angle);\r\n        var a1 = this.a;\r\n        var c1 = this.c;\r\n        var tx1 = this.tx;\r\n        this.a = a1 * cos - this.b * sin;\r\n        this.b = a1 * sin + this.b * cos;\r\n        this.c = c1 * cos - this.d * sin;\r\n        this.d = c1 * sin + this.d * cos;\r\n        this.tx = tx1 * cos - this.ty * sin;\r\n        this.ty = tx1 * sin + this.ty * cos;\r\n        this._bTransform = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * 对 Matrix 对象应用倾斜转换。\r\n     * @param\tx 沿着 X 轴的 2D 倾斜弧度。\r\n     * @param\ty 沿着 Y 轴的 2D 倾斜弧度。\r\n     * @return 当前 Matrix 对象。\r\n     */\r\n    skew(x, y) {\r\n        var tanX = Math.tan(x);\r\n        var tanY = Math.tan(y);\r\n        var a1 = this.a;\r\n        var b1 = this.b;\r\n        this.a += tanY * this.c;\r\n        this.b += tanY * this.d;\r\n        this.c += tanX * a1;\r\n        this.d += tanX * b1;\r\n        return this;\r\n    }\r\n    /**\r\n     * 对指定的点应用当前矩阵的逆转化并返回此点。\r\n     * @param\tout 待转化的点 Point 对象。\r\n     * @return\t返回out\r\n     */\r\n    invertTransformPoint(out) {\r\n        var a1 = this.a;\r\n        var b1 = this.b;\r\n        var c1 = this.c;\r\n        var d1 = this.d;\r\n        var tx1 = this.tx;\r\n        var n = a1 * d1 - b1 * c1;\r\n        var a2 = d1 / n;\r\n        var b2 = -b1 / n;\r\n        var c2 = -c1 / n;\r\n        var d2 = a1 / n;\r\n        var tx2 = (c1 * this.ty - d1 * tx1) / n;\r\n        var ty2 = -(a1 * this.ty - b1 * tx1) / n;\r\n        return out.setTo(a2 * out.x + c2 * out.y + tx2, b2 * out.x + d2 * out.y + ty2);\r\n    }\r\n    /**\r\n     * 将 Matrix 对象表示的几何转换应用于指定点。\r\n     * @param\tout 用来设定输出结果的点。\r\n     * @return\t返回out\r\n     */\r\n    transformPoint(out) {\r\n        return out.setTo(this.a * out.x + this.c * out.y + this.tx, this.b * out.x + this.d * out.y + this.ty);\r\n    }\r\n    /**\r\n     * 将 Matrix 对象表示的几何转换应用于指定点，忽略tx、ty。\r\n     * @param\tout 用来设定输出结果的点。\r\n     * @return\t返回out\r\n     */\r\n    transformPointN(out) {\r\n        return out.setTo(this.a * out.x + this.c * out.y /*+ tx*/, this.b * out.x + this.d * out.y /*+ ty*/);\r\n    }\r\n    /**\r\n     * 获取 X 轴缩放值。\r\n     * @return  X 轴缩放值。\r\n     */\r\n    getScaleX() {\r\n        return this.b === 0 ? this.a : Math.sqrt(this.a * this.a + this.b * this.b);\r\n    }\r\n    /**\r\n     * 获取 Y 轴缩放值。\r\n     * @return Y 轴缩放值。\r\n     */\r\n    getScaleY() {\r\n        return this.c === 0 ? this.d : Math.sqrt(this.c * this.c + this.d * this.d);\r\n    }\r\n    /**\r\n     * 执行原始矩阵的逆转换。\r\n     * @return 当前矩阵对象。\r\n     */\r\n    invert() {\r\n        var a1 = this.a;\r\n        var b1 = this.b;\r\n        var c1 = this.c;\r\n        var d1 = this.d;\r\n        var tx1 = this.tx;\r\n        var n = a1 * d1 - b1 * c1;\r\n        this.a = d1 / n;\r\n        this.b = -b1 / n;\r\n        this.c = -c1 / n;\r\n        this.d = a1 / n;\r\n        this.tx = (c1 * this.ty - d1 * tx1) / n;\r\n        this.ty = -(a1 * this.ty - b1 * tx1) / n;\r\n        return this;\r\n    }\r\n    /**\r\n     *  将 Matrix 的成员设置为指定值。\r\n     * @param\ta 缩放或旋转图像时影响像素沿 x 轴定位的值。\r\n     * @param\tb 旋转或倾斜图像时影响像素沿 y 轴定位的值。\r\n     * @param\tc 旋转或倾斜图像时影响像素沿 x 轴定位的值。\r\n     * @param\td 缩放或旋转图像时影响像素沿 y 轴定位的值。\r\n     * @param\ttx 沿 x 轴平移每个点的距离。\r\n     * @param\tty 沿 y 轴平移每个点的距离。\r\n     * @return 当前矩阵对象。\r\n     */\r\n    setTo(a, b, c, d, tx, ty) {\r\n        this.a = a, this.b = b, this.c = c, this.d = d, this.tx = tx, this.ty = ty;\r\n        return this;\r\n    }\r\n    /**\r\n     * 将指定矩阵与当前矩阵连接，从而将这两个矩阵的几何效果有效地结合在一起。\r\n     * @param\tmatrix 要连接到源矩阵的矩阵。\r\n     * @return\t当前矩阵。\r\n     */\r\n    concat(matrix) {\r\n        var a = this.a;\r\n        var c = this.c;\r\n        var tx = this.tx;\r\n        this.a = a * matrix.a + this.b * matrix.c;\r\n        this.b = a * matrix.b + this.b * matrix.d;\r\n        this.c = c * matrix.a + this.d * matrix.c;\r\n        this.d = c * matrix.b + this.d * matrix.d;\r\n        this.tx = tx * matrix.a + this.ty * matrix.c + matrix.tx;\r\n        this.ty = tx * matrix.b + this.ty * matrix.d + matrix.ty;\r\n        return this;\r\n    }\r\n    /**\r\n     * 将指定的两个矩阵相乘后的结果赋值给指定的输出对象。\r\n     * @param\tm1 矩阵一。\r\n     * @param\tm2 矩阵二。\r\n     * @param\tout 输出对象。\r\n     * @return\t结果输出对象 out。\r\n     */\r\n    static mul(m1, m2, out) {\r\n        var aa = m1.a, ab = m1.b, ac = m1.c, ad = m1.d, atx = m1.tx, aty = m1.ty;\r\n        var ba = m2.a, bb = m2.b, bc = m2.c, bd = m2.d, btx = m2.tx, bty = m2.ty;\r\n        if (bb !== 0 || bc !== 0) {\r\n            out.a = aa * ba + ab * bc;\r\n            out.b = aa * bb + ab * bd;\r\n            out.c = ac * ba + ad * bc;\r\n            out.d = ac * bb + ad * bd;\r\n            out.tx = ba * atx + bc * aty + btx;\r\n            out.ty = bb * atx + bd * aty + bty;\r\n        }\r\n        else {\r\n            out.a = aa * ba;\r\n            out.b = ab * bd;\r\n            out.c = ac * ba;\r\n            out.d = ad * bd;\r\n            out.tx = ba * atx + btx;\r\n            out.ty = bd * aty + bty;\r\n        }\r\n        return out;\r\n    }\r\n    /**\r\n     * 将指定的两个矩阵相乘，结果赋值给指定的输出数组，长度为16。\r\n     * @param m1\t矩阵一。\r\n     * @param m2\t矩阵二。\r\n     * @param out\t输出对象Array。\r\n     * @return 结果输出对象 out。\r\n     */\r\n    static mul16(m1, m2, out) {\r\n        var aa = m1.a, ab = m1.b, ac = m1.c, ad = m1.d, atx = m1.tx, aty = m1.ty;\r\n        var ba = m2.a, bb = m2.b, bc = m2.c, bd = m2.d, btx = m2.tx, bty = m2.ty;\r\n        if (bb !== 0 || bc !== 0) {\r\n            out[0] = aa * ba + ab * bc;\r\n            out[1] = aa * bb + ab * bd;\r\n            out[4] = ac * ba + ad * bc;\r\n            out[5] = ac * bb + ad * bd;\r\n            out[12] = ba * atx + bc * aty + btx;\r\n            out[13] = bb * atx + bd * aty + bty;\r\n        }\r\n        else {\r\n            out[0] = aa * ba;\r\n            out[1] = ab * bd;\r\n            out[4] = ac * ba;\r\n            out[5] = ad * bd;\r\n            out[12] = ba * atx + btx;\r\n            out[13] = bd * aty + bty;\r\n        }\r\n        return out;\r\n    }\r\n    /**\r\n     * @private\r\n     * 对矩阵应用缩放转换。反向相乘\r\n     * @param\tx 用于沿 x 轴缩放对象的乘数。\r\n     * @param\ty 用于沿 y 轴缩放对象的乘数。\r\n     */\r\n    scaleEx(x, y) {\r\n        var ba = this.a, bb = this.b, bc = this.c, bd = this.d;\r\n        if (bb !== 0 || bc !== 0) {\r\n            this.a = x * ba;\r\n            this.b = x * bb;\r\n            this.c = y * bc;\r\n            this.d = y * bd;\r\n        }\r\n        else {\r\n            this.a = x * ba;\r\n            this.b = 0 * bd;\r\n            this.c = 0 * ba;\r\n            this.d = y * bd;\r\n        }\r\n        this._bTransform = true;\r\n    }\r\n    /**\r\n     * @private\r\n     * 对 Matrix 对象应用旋转转换。反向相乘\r\n     * @param\tangle 以弧度为单位的旋转角度。\r\n     */\r\n    rotateEx(angle) {\r\n        var cos = Math.cos(angle);\r\n        var sin = Math.sin(angle);\r\n        var ba = this.a, bb = this.b, bc = this.c, bd = this.d;\r\n        if (bb !== 0 || bc !== 0) {\r\n            this.a = cos * ba + sin * bc;\r\n            this.b = cos * bb + sin * bd;\r\n            this.c = -sin * ba + cos * bc;\r\n            this.d = -sin * bb + cos * bd;\r\n        }\r\n        else {\r\n            this.a = cos * ba;\r\n            this.b = sin * bd;\r\n            this.c = -sin * ba;\r\n            this.d = cos * bd;\r\n        }\r\n        this._bTransform = true;\r\n    }\r\n    /**\r\n     * 返回此 Matrix 对象的副本。\r\n     * @return 与原始实例具有完全相同的属性的新 Matrix 实例。\r\n     */\r\n    clone() {\r\n        var dec = Matrix.create();\r\n        dec.a = this.a;\r\n        dec.b = this.b;\r\n        dec.c = this.c;\r\n        dec.d = this.d;\r\n        dec.tx = this.tx;\r\n        dec.ty = this.ty;\r\n        dec._bTransform = this._bTransform;\r\n        return dec;\r\n    }\r\n    /**\r\n     * 将当前 Matrix 对象中的所有矩阵数据复制到指定的 Matrix 对象中。\r\n     * @param\tdec 要复制当前矩阵数据的 Matrix 对象。\r\n     * @return\t已复制当前矩阵数据的 Matrix 对象。\r\n     */\r\n    copyTo(dec) {\r\n        dec.a = this.a;\r\n        dec.b = this.b;\r\n        dec.c = this.c;\r\n        dec.d = this.d;\r\n        dec.tx = this.tx;\r\n        dec.ty = this.ty;\r\n        dec._bTransform = this._bTransform;\r\n        return dec;\r\n    }\r\n    /**\r\n     * 返回列出该 Matrix 对象属性的文本值。\r\n     * @return 一个字符串，它包含 Matrix 对象的属性值：a、b、c、d、tx 和 ty。\r\n     */\r\n    toString() {\r\n        return this.a + \",\" + this.b + \",\" + this.c + \",\" + this.d + \",\" + this.tx + \",\" + this.ty;\r\n    }\r\n    /**\r\n     * 销毁此对象。\r\n     */\r\n    destroy() {\r\n        this.recover();\r\n    }\r\n    /**\r\n     * 回收到对象池，方便复用\r\n     */\r\n    recover() {\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"Matrix\", this.identity());\r\n    }\r\n    /**\r\n     * 从对象池中创建一个 <code>Matrix</code> 对象。\r\n     * @return <code>Matrix</code> 对象。\r\n     */\r\n    static create() {\r\n        return _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"Matrix\", Matrix);\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n/**@private 一个初始化的 <code>Matrix</code> 对象，不允许修改此对象内容。*/\r\nMatrix.EMPTY = new Matrix();\r\n/**用于中转使用的 <code>Matrix</code> 对象。*/\r\nMatrix.TEMP = new Matrix();\r\n/**@private */\r\nMatrix._createFun = null;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/maths/Matrix.ts?");

/***/ }),

/***/ "./src/core/laya/maths/Point.ts":
/*!**************************************!*\
  !*** ./src/core/laya/maths/Point.ts ***!
  \**************************************/
/*! exports provided: Point */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Point\", function() { return Point; });\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n/**\r\n * <code>Point</code> 对象表示二维坐标系统中的某个位置，其中 x 表示水平轴，y 表示垂直轴。\r\n */\r\nclass Point {\r\n    /**\r\n     * 根据指定坐标，创建一个新的 <code>Point</code> 对象。\r\n     * @param x\t（可选）水平坐标。\r\n     * @param y\t（可选）垂直坐标。\r\n     */\r\n    constructor(x = 0, y = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    /**\r\n     * 从对象池创建\r\n     */\r\n    static create() {\r\n        return _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"Point\", Point);\r\n    }\r\n    /**\r\n     * 将 <code>Point</code> 的成员设置为指定值。\r\n     * @param\tx 水平坐标。\r\n     * @param\ty 垂直坐标。\r\n     * @return 当前 Point 对象。\r\n     */\r\n    setTo(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n        return this;\r\n    }\r\n    /**\r\n     * 重置\r\n     */\r\n    reset() {\r\n        this.x = this.y = 0;\r\n        return this;\r\n    }\r\n    /**\r\n     * 回收到对象池，方便复用\r\n     */\r\n    recover() {\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"Point\", this.reset());\r\n    }\r\n    /**\r\n     * 计算当前点和目标点(x，y)的距离。\r\n     * @param\tx 水平坐标。\r\n     * @param\ty 垂直坐标。\r\n     * @return\t返回当前点和目标点之间的距离。\r\n     */\r\n    distance(x, y) {\r\n        return Math.sqrt((this.x - x) * (this.x - x) + (this.y - y) * (this.y - y));\r\n    }\r\n    /**返回包含 x 和 y 坐标的值的字符串。*/\r\n    toString() {\r\n        return this.x + \",\" + this.y;\r\n    }\r\n    /**\r\n     * 标准化向量。\r\n     */\r\n    normalize() {\r\n        var d = Math.sqrt(this.x * this.x + this.y * this.y);\r\n        if (d > 0) {\r\n            var id = 1.0 / d;\r\n            this.x *= id;\r\n            this.y *= id;\r\n        }\r\n    }\r\n    /**\r\n     * copy point坐标\r\n     * @param\tpoint 需要被copy的point\r\n     */\r\n    copy(point) {\r\n        return this.setTo(point.x, point.y);\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n/**临时使用的公用对象。*/\r\nPoint.TEMP = new Point();\r\n/**@private 全局空的point对象(x=0，y=0)，不允许修改此对象内容*/\r\nPoint.EMPTY = new Point();\r\n\n\n//# sourceURL=webpack:///./src/core/laya/maths/Point.ts?");

/***/ }),

/***/ "./src/core/laya/maths/Rectangle.ts":
/*!******************************************!*\
  !*** ./src/core/laya/maths/Rectangle.ts ***!
  \******************************************/
/*! exports provided: Rectangle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Rectangle\", function() { return Rectangle; });\n/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Point */ \"./src/core/laya/maths/Point.ts\");\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n\r\n/**\r\n * <p><code>Rectangle</code> 对象是按其位置（由它左上角的点 (x, y) 确定）以及宽度和高度定义的区域。</p>\r\n * <p>Rectangle 类的 x、y、width 和 height 属性相互独立；更改一个属性的值不会影响其他属性。</p>\r\n */\r\nclass Rectangle {\r\n    /**\r\n     * 创建一个 <code>Rectangle</code> 对象。\r\n     * @param\tx 矩形左上角的 X 轴坐标。\r\n     * @param\ty 矩形左上角的 Y 轴坐标。\r\n     * @param\twidth 矩形的宽度。\r\n     * @param\theight 矩形的高度。\r\n     */\r\n    constructor(x = 0, y = 0, width = 0, height = 0) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n    /** 此矩形右侧的 X 轴坐标。 x 和 width 属性的和。*/\r\n    get right() {\r\n        return this.x + this.width;\r\n    }\r\n    /** 此矩形底端的 Y 轴坐标。y 和 height 属性的和。*/\r\n    get bottom() {\r\n        return this.y + this.height;\r\n    }\r\n    /**\r\n     * 将 Rectangle 的属性设置为指定值。\r\n     * @param\tx\tx 矩形左上角的 X 轴坐标。\r\n     * @param\ty\tx 矩形左上角的 Y 轴坐标。\r\n     * @param\twidth\t矩形的宽度。\r\n     * @param\theight\t矩形的高。\r\n     * @return\t返回属性值修改后的矩形对象本身。\r\n     */\r\n    setTo(x, y, width, height) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n        return this;\r\n    }\r\n    /**\r\n     * 重置\r\n     */\r\n    reset() {\r\n        this.x = this.y = this.width = this.height = 0;\r\n        return this;\r\n    }\r\n    /**\r\n     * 回收\r\n     */\r\n    recover() {\r\n        if (this == Rectangle.TEMP || this == Rectangle.EMPTY) {\r\n            console.log(\"recover Temp or Empty:\", this);\r\n            return;\r\n        }\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_1__[\"Pool\"].recover(\"Rectangle\", this.reset());\r\n    }\r\n    /**\r\n     * 创建\r\n     */\r\n    static create() {\r\n        return _utils_Pool__WEBPACK_IMPORTED_MODULE_1__[\"Pool\"].getItemByClass(\"Rectangle\", Rectangle);\r\n    }\r\n    /**\r\n     * 复制 source 对象的属性值到此矩形对象中。\r\n     * @param\tsourceRect\t源 Rectangle 对象。\r\n     * @return\t返回属性值修改后的矩形对象本身。\r\n     */\r\n    copyFrom(source) {\r\n        this.x = source.x;\r\n        this.y = source.y;\r\n        this.width = source.width;\r\n        this.height = source.height;\r\n        return this;\r\n    }\r\n    /**\r\n     * 确定由此 Rectangle 对象定义的矩形区域内是否包含指定的点。\r\n     * @param x\t点的 X 轴坐标值（水平位置）。\r\n     * @param y\t点的 Y 轴坐标值（垂直位置）。\r\n     * @return\t如果 Rectangle 对象包含指定的点，则值为 true；否则为 false。\r\n     */\r\n    contains(x, y) {\r\n        if (this.width <= 0 || this.height <= 0)\r\n            return false;\r\n        if (x >= this.x && x < this.right) {\r\n            if (y >= this.y && y < this.bottom) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * 确定在 rect 参数中指定的对象是否与此 Rectangle 对象相交。此方法检查指定的 Rectangle 对象的 x、y、width 和 height 属性，以查看它是否与此 Rectangle 对象相交。\r\n     * @param\trect Rectangle 对象。\r\n     * @return\t如果传入的矩形对象与此对象相交，则返回 true 值，否则返回 false。\r\n     */\r\n    intersects(rect) {\r\n        return !(rect.x > (this.x + this.width) || (rect.x + rect.width) < this.x || rect.y > (this.y + this.height) || (rect.y + rect.height) < this.y);\r\n    }\r\n    /**\r\n     * 如果在 rect 参数中指定的 Rectangle 对象与此 Rectangle 对象相交，则返回交集区域作为 Rectangle 对象。如果矩形不相交，则此方法返回null。\r\n     * @param rect\t待比较的矩形区域。\r\n     * @param out\t（可选）待输出的矩形区域。如果为空则创建一个新的。建议：尽量复用对象，减少对象创建消耗。\r\n     * @return\t返回相交的矩形区域对象。\r\n     */\r\n    intersection(rect, out = null) {\r\n        if (!this.intersects(rect))\r\n            return null;\r\n        out || (out = new Rectangle());\r\n        out.x = Math.max(this.x, rect.x);\r\n        out.y = Math.max(this.y, rect.y);\r\n        out.width = Math.min(this.right, rect.right) - out.x;\r\n        out.height = Math.min(this.bottom, rect.bottom) - out.y;\r\n        return out;\r\n    }\r\n    /**\r\n     * <p>矩形联合，通过填充两个矩形之间的水平和垂直空间，将这两个矩形组合在一起以创建一个新的 Rectangle 对象。</p>\r\n     * <p>注意：union() 方法忽略高度或宽度值为 0 的矩形，如：var rect2:Rectangle = new Rectangle(300,300,50,0);</p>\r\n     * @param\t要添加到此 Rectangle 对象的 Rectangle 对象。\r\n     * @param\tout\t用于存储输出结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。Rectangle.TEMP对象用于对象复用。\r\n     * @return\t充当两个矩形的联合的新 Rectangle 对象。\r\n     */\r\n    union(source, out = null) {\r\n        out || (out = new Rectangle());\r\n        this.clone(out);\r\n        if (source.width <= 0 || source.height <= 0)\r\n            return out;\r\n        out.addPoint(source.x, source.y);\r\n        out.addPoint(source.right, source.bottom);\r\n        return this;\r\n    }\r\n    /**\r\n     * 返回一个 Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。\r\n     * @param out\t（可选）用于存储结果的矩形对象。如果为空，则创建一个新的。建议：尽量复用对象，减少对象创建消耗。。Rectangle.TEMP对象用于对象复用。\r\n     * @return Rectangle 对象，其 x、y、width 和 height 属性的值与当前 Rectangle 对象的对应值相同。\r\n     */\r\n    clone(out = null) {\r\n        out || (out = new Rectangle());\r\n        out.x = this.x;\r\n        out.y = this.y;\r\n        out.width = this.width;\r\n        out.height = this.height;\r\n        return out;\r\n    }\r\n    /**\r\n     * 当前 Rectangle 对象的水平位置 x 和垂直位置 y 以及高度 width 和宽度 height 以逗号连接成的字符串。\r\n     */\r\n    toString() {\r\n        return this.x + \",\" + this.y + \",\" + this.width + \",\" + this.height;\r\n    }\r\n    /**\r\n     * 检测传入的 Rectangle 对象的属性是否与当前 Rectangle 对象的属性 x、y、width、height 属性值都相等。\r\n     * @param\trect 待比较的 Rectangle 对象。\r\n     * @return\t如果判断的属性都相等，则返回 true ,否则返回 false。\r\n     */\r\n    equals(rect) {\r\n        if (!rect || rect.x !== this.x || rect.y !== this.y || rect.width !== this.width || rect.height !== this.height)\r\n            return false;\r\n        return true;\r\n    }\r\n    /**\r\n     * <p>为当前矩形对象加一个点，以使当前矩形扩展为包含当前矩形和此点的最小矩形。</p>\r\n     * <p>此方法会修改本对象。</p>\r\n     * @param x\t点的 X 坐标。\r\n     * @param y\t点的 Y 坐标。\r\n     * @return 返回此 Rectangle 对象。\r\n     */\r\n    addPoint(x, y) {\r\n        this.x > x && (this.width += this.x - x, this.x = x); //左边界比较\r\n        this.y > y && (this.height += this.y - y, this.y = y); //上边界比较\r\n        if (this.width < x - this.x)\r\n            this.width = x - this.x; //右边界比较\r\n        if (this.height < y - this.y)\r\n            this.height = y - this.y; //下边界比较\r\n        return this;\r\n    }\r\n    /**\r\n     * @private\r\n     * 返回代表当前矩形的顶点数据。\r\n     * @return 顶点数据。\r\n     */\r\n    _getBoundPoints() {\r\n        var rst = Rectangle._temB;\r\n        rst.length = 0;\r\n        if (this.width == 0 || this.height == 0)\r\n            return rst;\r\n        rst.push(this.x, this.y, this.x + this.width, this.y, this.x, this.y + this.height, this.x + this.width, this.y + this.height);\r\n        return rst;\r\n    }\r\n    /**\r\n     * @private\r\n     * 返回矩形的顶点数据。\r\n     */\r\n    static _getBoundPointS(x, y, width, height) {\r\n        var rst = Rectangle._temA;\r\n        rst.length = 0;\r\n        if (width == 0 || height == 0)\r\n            return rst;\r\n        rst.push(x, y, x + width, y, x, y + height, x + width, y + height);\r\n        return rst;\r\n    }\r\n    /**\r\n     * @private\r\n     * 返回包含所有点的最小矩形。\r\n     * @param pointList 点列表。\r\n     * @return 包含所有点的最小矩形矩形对象。\r\n     */\r\n    static _getWrapRec(pointList, rst = null) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        if (!pointList || pointList.length < 1)\r\n            return rst ? rst.setTo(0, 0, 0, 0) : Rectangle.TEMP.setTo(0, 0, 0, 0);\r\n        rst = rst ? rst : Rectangle.create();\r\n        var i, len = pointList.length, minX, maxX, minY, maxY, tPoint = _Point__WEBPACK_IMPORTED_MODULE_0__[\"Point\"].TEMP;\r\n        minX = minY = 99999;\r\n        maxX = maxY = -minX;\r\n        for (i = 0; i < len; i += 2) {\r\n            tPoint.x = pointList[i];\r\n            tPoint.y = pointList[i + 1];\r\n            minX = minX < tPoint.x ? minX : tPoint.x;\r\n            minY = minY < tPoint.y ? minY : tPoint.y;\r\n            maxX = maxX > tPoint.x ? maxX : tPoint.x;\r\n            maxY = maxY > tPoint.y ? maxY : tPoint.y;\r\n        }\r\n        return rst.setTo(minX, minY, maxX - minX, maxY - minY);\r\n    }\r\n    /**\r\n     * 确定此 Rectangle 对象是否为空。\r\n     * @return 如果 Rectangle 对象的宽度或高度小于等于 0，则返回 true 值，否则返回 false。\r\n     */\r\n    isEmpty() {\r\n        if (this.width <= 0 || this.height <= 0)\r\n            return true;\r\n        return false;\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n/**@private 全局空的矩形区域x=0,y=0,width=0,height=0，不允许修改此对象内容*/\r\nRectangle.EMPTY = new Rectangle();\r\n/**全局临时的矩形区域，此对象用于全局复用，以减少对象创建*/\r\nRectangle.TEMP = new Rectangle();\r\n/** @private */\r\nRectangle._temB = [];\r\n/** @private */\r\nRectangle._temA = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/maths/Rectangle.ts?");

/***/ }),

/***/ "./src/core/laya/media/SoundChannel.ts":
/*!*********************************************!*\
  !*** ./src/core/laya/media/SoundChannel.ts ***!
  \*********************************************/
/*! exports provided: SoundChannel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SoundChannel\", function() { return SoundChannel; });\n/* harmony import */ var _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/EventDispatcher */ \"./src/core/laya/events/EventDispatcher.ts\");\n\r\n/**\r\n * <p> <code>SoundChannel</code> 用来控制程序中的声音。每个声音均分配给一个声道，而且应用程序可以具有混合在一起的多个声道。</p>\r\n * <p> <code>SoundChannel</code> 类包含控制声音的播放、暂停、停止、音量的方法，以及获取声音的播放状态、总时间、当前播放时间、总循环次数、播放地址等信息的方法。</p>\r\n */\r\nclass SoundChannel extends _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_0__[\"EventDispatcher\"] {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * 表示声音是否已暂停。\r\n         */\r\n        this.isStopped = false;\r\n    }\r\n    /**\r\n     * 音量范围从 0（静音）至 1（最大音量）。\r\n     */\r\n    set volume(v) {\r\n    }\r\n    get volume() {\r\n        return 1;\r\n    }\r\n    /**\r\n     * 获取当前播放时间，单位是秒。\r\n     */\r\n    get position() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * 获取总时间，单位是秒。\r\n     */\r\n    get duration() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * 播放声音。\r\n     */\r\n    play() {\r\n    }\r\n    /**\r\n     * 停止播放。\r\n     */\r\n    stop() {\r\n        if (this.completeHandler)\r\n            this.completeHandler.run();\r\n    }\r\n    /**\r\n     * 暂停播放。\r\n     */\r\n    pause() {\r\n    }\r\n    /**\r\n     * 继续播放。\r\n     */\r\n    resume() {\r\n    }\r\n    /**\r\n     * private\r\n     */\r\n    __runComplete(handler) {\r\n        if (handler) {\r\n            handler.run();\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/media/SoundChannel.ts?");

/***/ }),

/***/ "./src/core/laya/media/SoundManager.ts":
/*!*********************************************!*\
  !*** ./src/core/laya/media/SoundManager.ts ***!
  \*********************************************/
/*! exports provided: SoundManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SoundManager\", function() { return SoundManager; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _h5audio_AudioSound__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./h5audio/AudioSound */ \"./src/core/laya/media/h5audio/AudioSound.ts\");\n/* harmony import */ var _webaudio_WebAudioSound__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./webaudio/WebAudioSound */ \"./src/core/laya/media/webaudio/WebAudioSound.ts\");\n/* harmony import */ var _net_Loader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../net/Loader */ \"./src/core/laya/net/Loader.ts\");\n/* harmony import */ var _net_URL__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../net/URL */ \"./src/core/laya/net/URL.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/Utils */ \"./src/core/laya/utils/Utils.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * <code>SoundManager</code> 是一个声音管理类。提供了对背景音乐、音效的播放控制方法。\r\n * 引擎默认有两套声音方案：WebAudio和H5Audio\r\n * 播放音效，优先使用WebAudio播放声音，如果WebAudio不可用，则用H5Audio播放，H5Audio在部分机器上有兼容问题（比如不能混音，播放有延迟等）。\r\n * 播放背景音乐，则使用H5Audio播放（使用WebAudio会增加特别大的内存，并且要等加载完毕后才能播放，有延迟）\r\n * 建议背景音乐用mp3类型，音效用wav或者mp3类型（如果打包为app，音效只能用wav格式）。\r\n * 详细教程及声音格式请参考：http://ldc2.layabox.com/doc/?nav=ch-as-1-7-0\r\n */\r\nclass SoundManager {\r\n    /**@private */\r\n    static __init__() {\r\n        var win = _utils_Browser__WEBPACK_IMPORTED_MODULE_7__[\"Browser\"].window;\r\n        var supportWebAudio = win[\"AudioContext\"] || win[\"webkitAudioContext\"] || win[\"mozAudioContext\"] ? true : false;\r\n        if (supportWebAudio)\r\n            _webaudio_WebAudioSound__WEBPACK_IMPORTED_MODULE_3__[\"WebAudioSound\"].initWebAudio();\r\n        SoundManager._soundClass = supportWebAudio ? _webaudio_WebAudioSound__WEBPACK_IMPORTED_MODULE_3__[\"WebAudioSound\"] : _h5audio_AudioSound__WEBPACK_IMPORTED_MODULE_2__[\"AudioSound\"];\r\n        _h5audio_AudioSound__WEBPACK_IMPORTED_MODULE_2__[\"AudioSound\"]._initMusicAudio();\r\n        SoundManager._musicClass = _h5audio_AudioSound__WEBPACK_IMPORTED_MODULE_2__[\"AudioSound\"];\r\n        return supportWebAudio;\r\n    }\r\n    /**\r\n     * 添加播放的声音实例。\r\n     * @param channel <code>SoundChannel</code> 对象。\r\n     */\r\n    static addChannel(channel) {\r\n        if (SoundManager._channels.indexOf(channel) >= 0)\r\n            return;\r\n        SoundManager._channels.push(channel);\r\n    }\r\n    /**\r\n     * 移除播放的声音实例。\r\n     * @param channel <code>SoundChannel</code> 对象。\r\n     */\r\n    static removeChannel(channel) {\r\n        var i;\r\n        for (i = SoundManager._channels.length - 1; i >= 0; i--) {\r\n            if (SoundManager._channels[i] == channel) {\r\n                SoundManager._channels.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    /**@private */\r\n    static disposeSoundLater(url) {\r\n        SoundManager._lastSoundUsedTimeDic[url] = _utils_Browser__WEBPACK_IMPORTED_MODULE_7__[\"Browser\"].now();\r\n        if (!SoundManager._isCheckingDispose) {\r\n            SoundManager._isCheckingDispose = true;\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].timer.loop(5000, null, SoundManager._checkDisposeSound);\r\n        }\r\n    }\r\n    /**@private */\r\n    static _checkDisposeSound() {\r\n        var key;\r\n        var tTime = _utils_Browser__WEBPACK_IMPORTED_MODULE_7__[\"Browser\"].now();\r\n        var hasCheck = false;\r\n        for (key in SoundManager._lastSoundUsedTimeDic) {\r\n            if (tTime - SoundManager._lastSoundUsedTimeDic[key] > 30000) {\r\n                delete SoundManager._lastSoundUsedTimeDic[key];\r\n                SoundManager.disposeSoundIfNotUsed(key);\r\n            }\r\n            else {\r\n                hasCheck = true;\r\n            }\r\n        }\r\n        if (!hasCheck) {\r\n            SoundManager._isCheckingDispose = false;\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].timer.clear(null, SoundManager._checkDisposeSound);\r\n        }\r\n    }\r\n    /**@private */\r\n    static disposeSoundIfNotUsed(url) {\r\n        var i;\r\n        for (i = SoundManager._channels.length - 1; i >= 0; i--) {\r\n            if (SoundManager._channels[i].url == url) {\r\n                return;\r\n            }\r\n        }\r\n        SoundManager.destroySound(url);\r\n    }\r\n    /**\r\n     * 失去焦点后是否自动停止背景音乐。\r\n     * @param v Boolean 失去焦点后是否自动停止背景音乐。\r\n     *\r\n     */\r\n    static set autoStopMusic(v) {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.off(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].BLUR, null, SoundManager._stageOnBlur);\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.off(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].FOCUS, null, SoundManager._stageOnFocus);\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.off(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].VISIBILITY_CHANGE, null, SoundManager._visibilityChange);\r\n        SoundManager._autoStopMusic = v;\r\n        if (v) {\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.on(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].BLUR, null, SoundManager._stageOnBlur);\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.on(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].FOCUS, null, SoundManager._stageOnFocus);\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.on(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].VISIBILITY_CHANGE, null, SoundManager._visibilityChange);\r\n        }\r\n    }\r\n    /**\r\n     * 失去焦点后是否自动停止背景音乐。\r\n     */\r\n    static get autoStopMusic() {\r\n        return SoundManager._autoStopMusic;\r\n    }\r\n    static _visibilityChange() {\r\n        if (_Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.isVisibility) {\r\n            SoundManager._stageOnFocus();\r\n        }\r\n        else {\r\n            SoundManager._stageOnBlur();\r\n        }\r\n    }\r\n    static _stageOnBlur() {\r\n        SoundManager._isActive = false;\r\n        if (SoundManager._musicChannel) {\r\n            if (!SoundManager._musicChannel.isStopped) {\r\n                SoundManager._blurPaused = true;\r\n                SoundManager._musicChannel.pause();\r\n            }\r\n        }\r\n        SoundManager.stopAllSound();\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.once(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].MOUSE_DOWN, null, SoundManager._stageOnFocus);\r\n    }\r\n    static _recoverWebAudio() {\r\n        if (_webaudio_WebAudioSound__WEBPACK_IMPORTED_MODULE_3__[\"WebAudioSound\"].ctx && _webaudio_WebAudioSound__WEBPACK_IMPORTED_MODULE_3__[\"WebAudioSound\"].ctx.state != \"running\" && _webaudio_WebAudioSound__WEBPACK_IMPORTED_MODULE_3__[\"WebAudioSound\"].ctx.resume)\r\n            _webaudio_WebAudioSound__WEBPACK_IMPORTED_MODULE_3__[\"WebAudioSound\"].ctx.resume();\r\n    }\r\n    static _stageOnFocus() {\r\n        SoundManager._isActive = true;\r\n        SoundManager._recoverWebAudio();\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.off(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].MOUSE_DOWN, null, SoundManager._stageOnFocus);\r\n        if (SoundManager._blurPaused) {\r\n            if (SoundManager._musicChannel && SoundManager._musicChannel.isStopped) {\r\n                SoundManager._blurPaused = false;\r\n                SoundManager._musicChannel.resume();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 背景音乐和所有音效是否静音。\r\n     */\r\n    static set muted(value) {\r\n        if (value == SoundManager._muted)\r\n            return;\r\n        if (value) {\r\n            SoundManager.stopAllSound();\r\n        }\r\n        SoundManager.musicMuted = value;\r\n        SoundManager._muted = value;\r\n    }\r\n    static get muted() {\r\n        return SoundManager._muted;\r\n    }\r\n    /**\r\n     * 所有音效（不包括背景音乐）是否静音。\r\n     */\r\n    static set soundMuted(value) {\r\n        SoundManager._soundMuted = value;\r\n    }\r\n    static get soundMuted() {\r\n        return SoundManager._soundMuted;\r\n    }\r\n    /**\r\n     * 背景音乐（不包括音效）是否静音。\r\n     */\r\n    static set musicMuted(value) {\r\n        if (value == SoundManager._musicMuted)\r\n            return;\r\n        if (value) {\r\n            if (SoundManager._bgMusic) {\r\n                if (SoundManager._musicChannel && !SoundManager._musicChannel.isStopped) {\r\n                    if (_renders_Render__WEBPACK_IMPORTED_MODULE_6__[\"Render\"].isConchApp) {\r\n                        if (SoundManager._musicChannel._audio)\r\n                            SoundManager._musicChannel._audio.muted = true;\r\n                        ;\r\n                    }\r\n                    else {\r\n                        SoundManager._musicChannel.pause();\r\n                    }\r\n                }\r\n                else {\r\n                    SoundManager._musicChannel = null;\r\n                }\r\n            }\r\n            else {\r\n                SoundManager._musicChannel = null;\r\n            }\r\n            SoundManager._musicMuted = value;\r\n        }\r\n        else {\r\n            SoundManager._musicMuted = value;\r\n            if (SoundManager._bgMusic) {\r\n                if (SoundManager._musicChannel) {\r\n                    if (_renders_Render__WEBPACK_IMPORTED_MODULE_6__[\"Render\"].isConchApp) {\r\n                        if (SoundManager._musicChannel._audio)\r\n                            SoundManager._musicChannel._audio.muted = false;\r\n                        ;\r\n                    }\r\n                    else {\r\n                        SoundManager._musicChannel.resume();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static get musicMuted() {\r\n        return SoundManager._musicMuted;\r\n    }\r\n    static get useAudioMusic() {\r\n        return SoundManager._useAudioMusic;\r\n    }\r\n    static set useAudioMusic(value) {\r\n        SoundManager._useAudioMusic = value;\r\n        if (value) {\r\n            SoundManager._musicClass = _h5audio_AudioSound__WEBPACK_IMPORTED_MODULE_2__[\"AudioSound\"];\r\n        }\r\n        else {\r\n            SoundManager._musicClass = null;\r\n        }\r\n    }\r\n    /**\r\n     * 播放音效。音效可以同时播放多个。\r\n     * @param url\t\t\t声音文件地址。\r\n     * @param loops\t\t\t循环次数,0表示无限循环。\r\n     * @param complete\t\t声音播放完成回调  Handler对象。\r\n     * @param soundClass\t使用哪个声音类进行播放，null表示自动选择。\r\n     * @param startTime\t\t声音播放起始时间。\r\n     * @return SoundChannel对象，通过此对象可以对声音进行控制，以及获取声音信息。\r\n     */\r\n    static playSound(url, loops = 1, complete = null, soundClass = null, startTime = 0) {\r\n        if (!SoundManager._isActive || !url)\r\n            return null;\r\n        if (SoundManager._muted)\r\n            return null;\r\n        SoundManager._recoverWebAudio();\r\n        url = _net_URL__WEBPACK_IMPORTED_MODULE_5__[\"URL\"].formatURL(url);\r\n        if (url == SoundManager._bgMusic) {\r\n            if (SoundManager._musicMuted)\r\n                return null;\r\n        }\r\n        else {\r\n            if (_renders_Render__WEBPACK_IMPORTED_MODULE_6__[\"Render\"].isConchApp) {\r\n                var ext = _utils_Utils__WEBPACK_IMPORTED_MODULE_8__[\"Utils\"].getFileExtension(url);\r\n                if (ext != \"wav\" && ext != \"ogg\") {\r\n                    alert(\"The sound only supports wav or ogg format,for optimal performance reason,please refer to the official website document.\");\r\n                    return null;\r\n                }\r\n            }\r\n            if (SoundManager._soundMuted)\r\n                return null;\r\n        }\r\n        var tSound;\r\n        if (!_utils_Browser__WEBPACK_IMPORTED_MODULE_7__[\"Browser\"].onMiniGame) {\r\n            tSound = _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].loader.getRes(url);\r\n        }\r\n        if (!soundClass)\r\n            soundClass = SoundManager._soundClass;\r\n        if (!tSound) {\r\n            tSound = new soundClass();\r\n            tSound.load(url);\r\n            if (!_utils_Browser__WEBPACK_IMPORTED_MODULE_7__[\"Browser\"].onMiniGame) {\r\n                _net_Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].cacheRes(url, tSound);\r\n            }\r\n        }\r\n        var channel;\r\n        channel = tSound.play(startTime, loops);\r\n        if (!channel)\r\n            return null;\r\n        channel.url = url;\r\n        channel.volume = (url == SoundManager._bgMusic) ? SoundManager.musicVolume : SoundManager.soundVolume;\r\n        channel.completeHandler = complete;\r\n        return channel;\r\n    }\r\n    /**\r\n     * 释放声音资源。\r\n     * @param url\t声音播放地址。\r\n     */\r\n    static destroySound(url) {\r\n        var tSound = _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].loader.getRes(url);\r\n        if (tSound) {\r\n            _net_Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].clearRes(url);\r\n            tSound.dispose();\r\n        }\r\n    }\r\n    /**\r\n     * 播放背景音乐。背景音乐同时只能播放一个，如果在播放背景音乐时再次调用本方法，会先停止之前的背景音乐，再播发当前的背景音乐。\r\n     * @param url\t\t声音文件地址。\r\n     * @param loops\t\t循环次数,0表示无限循环。\r\n     * @param complete\t声音播放完成回调。\r\n     * @param startTime\t声音播放起始时间。\r\n     * @return SoundChannel对象，通过此对象可以对声音进行控制，以及获取声音信息。\r\n     */\r\n    static playMusic(url, loops = 0, complete = null, startTime = 0) {\r\n        url = _net_URL__WEBPACK_IMPORTED_MODULE_5__[\"URL\"].formatURL(url);\r\n        SoundManager._bgMusic = url;\r\n        if (SoundManager._musicChannel)\r\n            SoundManager._musicChannel.stop();\r\n        return SoundManager._musicChannel = SoundManager.playSound(url, loops, complete, SoundManager._musicClass, startTime);\r\n    }\r\n    /**\r\n     * 停止声音播放。此方法能够停止任意声音的播放（包括背景音乐和音效），只需传入对应的声音播放地址。\r\n     * @param url  声音文件地址。\r\n     */\r\n    static stopSound(url) {\r\n        url = _net_URL__WEBPACK_IMPORTED_MODULE_5__[\"URL\"].formatURL(url);\r\n        var i;\r\n        var channel;\r\n        for (i = SoundManager._channels.length - 1; i >= 0; i--) {\r\n            channel = SoundManager._channels[i];\r\n            if (channel.url == url) {\r\n                channel.stop();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 停止播放所有声音（包括背景音乐和音效）。\r\n     */\r\n    static stopAll() {\r\n        SoundManager._bgMusic = null;\r\n        var i;\r\n        var channel;\r\n        for (i = SoundManager._channels.length - 1; i >= 0; i--) {\r\n            channel = SoundManager._channels[i];\r\n            channel.stop();\r\n        }\r\n    }\r\n    /**\r\n     * 停止播放所有音效（不包括背景音乐）。\r\n     */\r\n    static stopAllSound() {\r\n        var i;\r\n        var channel;\r\n        for (i = SoundManager._channels.length - 1; i >= 0; i--) {\r\n            channel = SoundManager._channels[i];\r\n            if (channel.url != SoundManager._bgMusic) {\r\n                channel.stop();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 停止播放背景音乐（不包括音效）。\r\n     * @param url  声音文件地址。\r\n     */\r\n    static stopMusic() {\r\n        if (SoundManager._musicChannel)\r\n            SoundManager._musicChannel.stop();\r\n        SoundManager._bgMusic = null;\r\n    }\r\n    /**\r\n     * 设置声音音量。根据参数不同，可以分别设置指定声音（背景音乐或音效）音量或者所有音效（不包括背景音乐）音量。\r\n     * @param volume\t音量。初始值为1。音量范围从 0（静音）至 1（最大音量）。\r\n     * @param url\t\t(default = null)声音播放地址。默认为null。为空表示设置所有音效（不包括背景音乐）的音量，不为空表示设置指定声音（背景音乐或音效）的音量。\r\n     */\r\n    static setSoundVolume(volume, url = null) {\r\n        if (url) {\r\n            url = _net_URL__WEBPACK_IMPORTED_MODULE_5__[\"URL\"].formatURL(url);\r\n            SoundManager._setVolume(url, volume);\r\n        }\r\n        else {\r\n            SoundManager.soundVolume = volume;\r\n            var i;\r\n            var channel;\r\n            for (i = SoundManager._channels.length - 1; i >= 0; i--) {\r\n                channel = SoundManager._channels[i];\r\n                if (channel.url != SoundManager._bgMusic) {\r\n                    channel.volume = volume;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 设置背景音乐音量。音量范围从 0（静音）至 1（最大音量）。\r\n     * @param volume\t音量。初始值为1。音量范围从 0（静音）至 1（最大音量）。\r\n     */\r\n    static setMusicVolume(volume) {\r\n        SoundManager.musicVolume = volume;\r\n        SoundManager._setVolume(SoundManager._bgMusic, volume);\r\n    }\r\n    /**\r\n     * 设置指定声音的音量。\r\n     * @param url\t\t声音文件url\r\n     * @param volume\t音量。初始值为1。\r\n     */\r\n    static _setVolume(url, volume) {\r\n        url = _net_URL__WEBPACK_IMPORTED_MODULE_5__[\"URL\"].formatURL(url);\r\n        var i;\r\n        var channel;\r\n        for (i = SoundManager._channels.length - 1; i >= 0; i--) {\r\n            channel = SoundManager._channels[i];\r\n            if (channel.url == url) {\r\n                channel.volume = volume;\r\n            }\r\n        }\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n/**\r\n * 背景音乐音量。\r\n * @default 1\r\n */\r\nSoundManager.musicVolume = 1;\r\n/**\r\n * 音效音量。\r\n * @default 1\r\n */\r\nSoundManager.soundVolume = 1;\r\n/**\r\n * 声音播放速率。\r\n * @default 1\r\n */\r\nSoundManager.playbackRate = 1;\r\n/**\r\n * 背景音乐使用Audio标签播放。\r\n * @default true\r\n */\r\nSoundManager._useAudioMusic = true;\r\n/**@private 是否静音，默认为false。*/\r\nSoundManager._muted = false;\r\n/**@private 是否音效静音，默认为false。*/\r\nSoundManager._soundMuted = false;\r\n/**@private 是否背景音乐静音，默认为false。*/\r\nSoundManager._musicMuted = false;\r\n/**@private 当前背景音乐url。*/\r\nSoundManager._bgMusic = null;\r\n/**@private 当前背景音乐声道。*/\r\nSoundManager._musicChannel = null;\r\n/**@private 当前播放的Channel列表。*/\r\nSoundManager._channels = [];\r\n/**@private */\r\nSoundManager._blurPaused = false;\r\n/**@private */\r\nSoundManager._isActive = true;\r\n/**@private */\r\nSoundManager._lastSoundUsedTimeDic = {};\r\n/**@private */\r\nSoundManager._isCheckingDispose = false;\r\n/**\r\n * 音效播放后自动删除。\r\n * @default true\r\n */\r\nSoundManager.autoReleaseSound = true;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/media/SoundManager.ts?");

/***/ }),

/***/ "./src/core/laya/media/h5audio/AudioSound.ts":
/*!***************************************************!*\
  !*** ./src/core/laya/media/h5audio/AudioSound.ts ***!
  \***************************************************/
/*! exports provided: AudioSound */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AudioSound\", function() { return AudioSound; });\n/* harmony import */ var _AudioSoundChannel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././AudioSoundChannel */ \"./src/core/laya/media/h5audio/AudioSoundChannel.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/EventDispatcher */ \"./src/core/laya/events/EventDispatcher.ts\");\n/* harmony import */ var _SoundManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../SoundManager */ \"./src/core/laya/media/SoundManager.ts\");\n/* harmony import */ var _net_URL__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../net/URL */ \"./src/core/laya/net/URL.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _utils_Pool__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/Pool */ \"./src/core/laya/utils/Pool.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * 使用Audio标签播放声音\r\n */\r\nclass AudioSound extends _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_2__[\"EventDispatcher\"] {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * 是否已加载完成\r\n         */\r\n        this.loaded = false;\r\n    }\r\n    /**\r\n     * 释放声音\r\n     *\r\n     */\r\n    dispose() {\r\n        var ad = AudioSound._audioCache[this.url];\r\n        _utils_Pool__WEBPACK_IMPORTED_MODULE_7__[\"Pool\"].clearBySign(\"audio:\" + this.url);\r\n        if (ad) {\r\n            if (!_renders_Render__WEBPACK_IMPORTED_MODULE_5__[\"Render\"].isConchApp) {\r\n                ad.src = \"\";\r\n            }\r\n            delete AudioSound._audioCache[this.url];\r\n        }\r\n    }\r\n    /**@private */\r\n    static _initMusicAudio() {\r\n        if (AudioSound._musicAudio)\r\n            return;\r\n        if (!AudioSound._musicAudio)\r\n            AudioSound._musicAudio = _utils_Browser__WEBPACK_IMPORTED_MODULE_6__[\"Browser\"].createElement(\"audio\");\r\n        if (!_renders_Render__WEBPACK_IMPORTED_MODULE_5__[\"Render\"].isConchApp) {\r\n            _utils_Browser__WEBPACK_IMPORTED_MODULE_6__[\"Browser\"].document.addEventListener(\"mousedown\", AudioSound._makeMusicOK);\r\n        }\r\n    }\r\n    /**@private */\r\n    static _makeMusicOK() {\r\n        _utils_Browser__WEBPACK_IMPORTED_MODULE_6__[\"Browser\"].document.removeEventListener(\"mousedown\", AudioSound._makeMusicOK);\r\n        if (!AudioSound._musicAudio.src) {\r\n            AudioSound._musicAudio.src = \"\";\r\n            AudioSound._musicAudio.load();\r\n        }\r\n        else {\r\n            AudioSound._musicAudio.play();\r\n        }\r\n    }\r\n    /**\r\n     * 加载声音\r\n     * @param url\r\n     *\r\n     */\r\n    load(url) {\r\n        url = _net_URL__WEBPACK_IMPORTED_MODULE_4__[\"URL\"].formatURL(url);\r\n        this.url = url;\r\n        var ad;\r\n        if (url == _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"]._bgMusic) {\r\n            AudioSound._initMusicAudio();\r\n            ad = AudioSound._musicAudio;\r\n            if (ad.src != url) {\r\n                AudioSound._audioCache[ad.src] = null;\r\n                ad = null;\r\n            }\r\n        }\r\n        else {\r\n            ad = AudioSound._audioCache[url];\r\n        }\r\n        if (ad && ad.readyState >= 2) {\r\n            this.event(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].COMPLETE);\r\n            return;\r\n        }\r\n        if (!ad) {\r\n            if (url == _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"]._bgMusic) {\r\n                AudioSound._initMusicAudio();\r\n                ad = AudioSound._musicAudio;\r\n            }\r\n            else {\r\n                ad = _utils_Browser__WEBPACK_IMPORTED_MODULE_6__[\"Browser\"].createElement(\"audio\");\r\n            }\r\n            AudioSound._audioCache[url] = ad;\r\n            ad.src = url;\r\n        }\r\n        ad.addEventListener(\"canplaythrough\", onLoaded);\r\n        ad.addEventListener(\"error\", onErr);\r\n        var me = this;\r\n        function onLoaded() {\r\n            offs();\r\n            me.loaded = true;\r\n            me.event(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].COMPLETE);\r\n        }\r\n        function onErr() {\r\n            ad.load = null;\r\n            offs();\r\n            me.event(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].ERROR);\r\n        }\r\n        function offs() {\r\n            ad.removeEventListener(\"canplaythrough\", onLoaded);\r\n            ad.removeEventListener(\"error\", onErr);\r\n        }\r\n        this.audio = ad;\r\n        if (ad.load) {\r\n            ad.load();\r\n        }\r\n        else {\r\n            onErr();\r\n        }\r\n    }\r\n    /**\r\n     * 播放声音\r\n     * @param startTime 起始时间\r\n     * @param loops 循环次数\r\n     * @return\r\n     *\r\n     */\r\n    play(startTime = 0, loops = 0) {\r\n        //trace(\"playAudioSound\");\r\n        if (!this.url)\r\n            return null;\r\n        var ad;\r\n        if (this.url == _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"]._bgMusic) {\r\n            ad = AudioSound._musicAudio;\r\n        }\r\n        else {\r\n            ad = AudioSound._audioCache[this.url];\r\n        }\r\n        if (!ad)\r\n            return null;\r\n        var tAd;\r\n        tAd = _utils_Pool__WEBPACK_IMPORTED_MODULE_7__[\"Pool\"].getItem(\"audio:\" + this.url);\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_5__[\"Render\"].isConchApp) {\r\n            if (!tAd) {\r\n                tAd = _utils_Browser__WEBPACK_IMPORTED_MODULE_6__[\"Browser\"].createElement(\"audio\");\r\n                tAd.src = this.url;\r\n            }\r\n        }\r\n        else {\r\n            if (this.url == _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"]._bgMusic) {\r\n                AudioSound._initMusicAudio();\r\n                tAd = AudioSound._musicAudio;\r\n                tAd.src = this.url;\r\n            }\r\n            else {\r\n                tAd = tAd ? tAd : ad.cloneNode(true);\r\n            }\r\n        }\r\n        var channel = new _AudioSoundChannel__WEBPACK_IMPORTED_MODULE_0__[\"AudioSoundChannel\"](tAd);\r\n        channel.url = this.url;\r\n        channel.loops = loops;\r\n        channel.startTime = startTime;\r\n        channel.play();\r\n        _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].addChannel(channel);\r\n        return channel;\r\n    }\r\n    /**\r\n     * 获取总时间。\r\n     */\r\n    get duration() {\r\n        var ad;\r\n        ad = AudioSound._audioCache[this.url];\r\n        if (!ad)\r\n            return 0;\r\n        return ad.duration;\r\n    }\r\n}\r\n/**@private */\r\nAudioSound._audioCache = {};\r\n\n\n//# sourceURL=webpack:///./src/core/laya/media/h5audio/AudioSound.ts?");

/***/ }),

/***/ "./src/core/laya/media/h5audio/AudioSoundChannel.ts":
/*!**********************************************************!*\
  !*** ./src/core/laya/media/h5audio/AudioSoundChannel.ts ***!
  \**********************************************************/
/*! exports provided: AudioSoundChannel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AudioSoundChannel\", function() { return AudioSoundChannel; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _SoundChannel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../SoundChannel */ \"./src/core/laya/media/SoundChannel.ts\");\n/* harmony import */ var _SoundManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../SoundManager */ \"./src/core/laya/media/SoundManager.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * audio标签播放声音的音轨控制\r\n */\r\nclass AudioSoundChannel extends _SoundChannel__WEBPACK_IMPORTED_MODULE_2__[\"SoundChannel\"] {\r\n    constructor(audio) {\r\n        super();\r\n        /**\r\n         * 播放用的audio标签\r\n         */\r\n        this._audio = null;\r\n        this._onEnd = this.__onEnd.bind(this);\r\n        this._resumePlay = this.__resumePlay.bind(this);\r\n        audio.addEventListener(\"ended\", this._onEnd);\r\n        this._audio = audio;\r\n    }\r\n    __onEnd(evt) {\r\n        if (this.loops == 1) {\r\n            if (this.completeHandler) {\r\n                _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].systemTimer.once(10, this, this.__runComplete, [this.completeHandler], false);\r\n                this.completeHandler = null;\r\n            }\r\n            this.stop();\r\n            this.event(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].COMPLETE);\r\n            return;\r\n        }\r\n        if (this.loops > 0) {\r\n            this.loops--;\r\n        }\r\n        this.startTime = 0;\r\n        this.play();\r\n    }\r\n    __resumePlay() {\r\n        if (this._audio)\r\n            this._audio.removeEventListener(\"canplay\", this._resumePlay);\r\n        if (this.isStopped)\r\n            return;\r\n        try {\r\n            this._audio.currentTime = this.startTime;\r\n            _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].container.appendChild(this._audio);\r\n            this._audio.play();\r\n        }\r\n        catch (e) {\r\n            //this.audio.play();\r\n            this.event(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].ERROR);\r\n        }\r\n    }\r\n    /**\r\n     * 播放\r\n     */\r\n    /*override*/ play() {\r\n        this.isStopped = false;\r\n        try {\r\n            this._audio.playbackRate = _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].playbackRate;\r\n            this._audio.currentTime = this.startTime;\r\n        }\r\n        catch (e) {\r\n            this._audio.addEventListener(\"canplay\", this._resumePlay);\r\n            return;\r\n        }\r\n        _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].addChannel(this);\r\n        _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].container.appendChild(this._audio);\r\n        if (\"play\" in this._audio)\r\n            this._audio.play();\r\n    }\r\n    /**\r\n     * 当前播放到的位置\r\n     * @return\r\n     *\r\n     */\r\n    /*override*/ get position() {\r\n        if (!this._audio)\r\n            return 0;\r\n        return this._audio.currentTime;\r\n    }\r\n    /**\r\n     * 获取总时间。\r\n     */\r\n    /*override*/ get duration() {\r\n        if (!this._audio)\r\n            return 0;\r\n        return this._audio.duration;\r\n    }\r\n    /**\r\n     * 停止播放\r\n     *\r\n     */\r\n    /*override*/ stop() {\r\n        //trace(\"stop and remove event\");\r\n        super.stop();\r\n        this.isStopped = true;\r\n        _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].removeChannel(this);\r\n        this.completeHandler = null;\r\n        if (!this._audio)\r\n            return;\r\n        if (\"pause\" in this._audio)\r\n            //理论上应该全部使用stop，但是不知为什么，使用pause，为了安全我只修改在加速器模式下再调用一次stop\r\n            if (_renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp) {\r\n                this._audio.stop();\r\n            }\r\n        this._audio.pause();\r\n        this._audio.removeEventListener(\"ended\", this._onEnd);\r\n        this._audio.removeEventListener(\"canplay\", this._resumePlay);\r\n        //ie下使用对象池可能会导致后面的声音播放不出来\r\n        _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].removeElement(this._audio);\r\n        this._audio = null;\r\n    }\r\n    /*override*/ pause() {\r\n        this.isStopped = true;\r\n        _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].removeChannel(this);\r\n        if (\"pause\" in this._audio)\r\n            this._audio.pause();\r\n    }\r\n    /*override*/ resume() {\r\n        if (!this._audio)\r\n            return;\r\n        this.isStopped = false;\r\n        _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].addChannel(this);\r\n        if (\"play\" in this._audio)\r\n            this._audio.play();\r\n    }\r\n    /**\r\n     * 设置音量\r\n     * @param v\r\n     *\r\n     */\r\n    /*override*/ set volume(v) {\r\n        if (!this._audio)\r\n            return;\r\n        this._audio.volume = v;\r\n    }\r\n    /**\r\n     * 获取音量\r\n     * @return\r\n     *\r\n     */\r\n    /*override*/ get volume() {\r\n        if (!this._audio)\r\n            return 1;\r\n        return this._audio.volume;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/media/h5audio/AudioSoundChannel.ts?");

/***/ }),

/***/ "./src/core/laya/media/webaudio/WebAudioSound.ts":
/*!*******************************************************!*\
  !*** ./src/core/laya/media/webaudio/WebAudioSound.ts ***!
  \*******************************************************/
/*! exports provided: WebAudioSound */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WebAudioSound\", function() { return WebAudioSound; });\n/* harmony import */ var _WebAudioSoundChannel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././WebAudioSoundChannel */ \"./src/core/laya/media/webaudio/WebAudioSoundChannel.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../events/EventDispatcher */ \"./src/core/laya/events/EventDispatcher.ts\");\n/* harmony import */ var _SoundManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../SoundManager */ \"./src/core/laya/media/SoundManager.ts\");\n/* harmony import */ var _net_URL__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../net/URL */ \"./src/core/laya/net/URL.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * web audio api方式播放声音\r\n */\r\nclass WebAudioSound extends _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_2__[\"EventDispatcher\"] {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * 是否已加载完成\r\n         */\r\n        this.loaded = false;\r\n        /**\r\n         * @private\r\n         */\r\n        this._disposed = false;\r\n    }\r\n    /**\r\n     * 解码声音文件\r\n     *\r\n     */\r\n    static decode() {\r\n        if (WebAudioSound.buffs.length <= 0 || WebAudioSound.isDecoding) {\r\n            return;\r\n        }\r\n        WebAudioSound.isDecoding = true;\r\n        WebAudioSound.tInfo = WebAudioSound.buffs.shift();\r\n        WebAudioSound.ctx.decodeAudioData(WebAudioSound.tInfo[\"buffer\"], WebAudioSound._done, WebAudioSound._fail);\r\n    }\r\n    /**\r\n     * 解码成功回调\r\n     * @param audioBuffer\r\n     *\r\n     */\r\n    static _done(audioBuffer) {\r\n        WebAudioSound.e.event(\"loaded:\" + WebAudioSound.tInfo.url, audioBuffer);\r\n        WebAudioSound.isDecoding = false;\r\n        WebAudioSound.decode();\r\n    }\r\n    /**\r\n     * 解码失败回调\r\n     * @return\r\n     *\r\n     */\r\n    static _fail() {\r\n        WebAudioSound.e.event(\"err:\" + WebAudioSound.tInfo.url, null);\r\n        WebAudioSound.isDecoding = false;\r\n        WebAudioSound.decode();\r\n    }\r\n    /**\r\n     * 播放声音以解锁IOS的声音\r\n     *\r\n     */\r\n    static _playEmptySound() {\r\n        if (WebAudioSound.ctx == null) {\r\n            return;\r\n        }\r\n        var source = WebAudioSound.ctx.createBufferSource();\r\n        source.buffer = WebAudioSound._miniBuffer;\r\n        source.connect(WebAudioSound.ctx.destination);\r\n        source.start(0, 0, 0);\r\n    }\r\n    /**\r\n     * 尝试解锁声音\r\n     *\r\n     */\r\n    static _unlock() {\r\n        if (WebAudioSound._unlocked) {\r\n            return;\r\n        }\r\n        WebAudioSound._playEmptySound();\r\n        if (WebAudioSound.ctx.state == \"running\") {\r\n            _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].document.removeEventListener(\"mousedown\", WebAudioSound._unlock, true);\r\n            _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].document.removeEventListener(\"touchend\", WebAudioSound._unlock, true);\r\n            _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].document.removeEventListener(\"touchstart\", WebAudioSound._unlock, true);\r\n            WebAudioSound._unlocked = true;\r\n        }\r\n    }\r\n    /*;*/\r\n    static initWebAudio() {\r\n        if (WebAudioSound.ctx.state != \"running\") {\r\n            WebAudioSound._unlock(); // When played inside of a touch event, this will enable audio on iOS immediately.\r\n            _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].document.addEventListener(\"mousedown\", WebAudioSound._unlock, true);\r\n            _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].document.addEventListener(\"touchend\", WebAudioSound._unlock, true);\r\n            _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].document.addEventListener(\"touchstart\", WebAudioSound._unlock, true);\r\n        }\r\n    }\r\n    /**\r\n     * 加载声音\r\n     * @param url\r\n     *\r\n     */\r\n    load(url) {\r\n        var me = this;\r\n        url = _net_URL__WEBPACK_IMPORTED_MODULE_4__[\"URL\"].formatURL(url);\r\n        this.url = url;\r\n        this.audioBuffer = WebAudioSound._dataCache[url];\r\n        if (this.audioBuffer) {\r\n            this._loaded(this.audioBuffer);\r\n            return;\r\n        }\r\n        WebAudioSound.e.on(\"loaded:\" + url, this, this._loaded);\r\n        WebAudioSound.e.on(\"err:\" + url, this, this._err);\r\n        if (WebAudioSound.__loadingSound[url]) {\r\n            return;\r\n        }\r\n        WebAudioSound.__loadingSound[url] = true;\r\n        var request = new _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].window.XMLHttpRequest();\r\n        request.open(\"GET\", url, true);\r\n        request.responseType = \"arraybuffer\";\r\n        request.onload = function () {\r\n            if (me._disposed) {\r\n                me._removeLoadEvents();\r\n                return;\r\n            }\r\n            me.data = request.response;\r\n            WebAudioSound.buffs.push({ \"buffer\": me.data, \"url\": me.url });\r\n            WebAudioSound.decode();\r\n        };\r\n        request.onerror = function (e) {\r\n            me._err();\r\n        };\r\n        request.send();\r\n    }\r\n    _err() {\r\n        this._removeLoadEvents();\r\n        WebAudioSound.__loadingSound[this.url] = false;\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].ERROR);\r\n    }\r\n    _loaded(audioBuffer) {\r\n        this._removeLoadEvents();\r\n        if (this._disposed) {\r\n            return;\r\n        }\r\n        this.audioBuffer = audioBuffer;\r\n        WebAudioSound._dataCache[this.url] = this.audioBuffer;\r\n        this.loaded = true;\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].COMPLETE);\r\n    }\r\n    _removeLoadEvents() {\r\n        WebAudioSound.e.off(\"loaded:\" + this.url, this, this._loaded);\r\n        WebAudioSound.e.off(\"err:\" + this.url, this, this._err);\r\n    }\r\n    __playAfterLoaded() {\r\n        if (!this.__toPlays)\r\n            return;\r\n        var i, len;\r\n        var toPlays;\r\n        toPlays = this.__toPlays;\r\n        len = toPlays.length;\r\n        var tParams;\r\n        for (i = 0; i < len; i++) {\r\n            tParams = toPlays[i];\r\n            if (tParams[2] && !tParams[2].isStopped) {\r\n                this.play(tParams[0], tParams[1], tParams[2]);\r\n            }\r\n        }\r\n        this.__toPlays.length = 0;\r\n    }\r\n    /**\r\n     * 播放声音\r\n     * @param startTime 起始时间\r\n     * @param loops 循环次数\r\n     * @return\r\n     *\r\n     */\r\n    play(startTime = 0, loops = 0, channel = null) {\r\n        channel = channel ? channel : new _WebAudioSoundChannel__WEBPACK_IMPORTED_MODULE_0__[\"WebAudioSoundChannel\"]();\r\n        if (!this.audioBuffer) {\r\n            if (this.url) {\r\n                if (!this.__toPlays)\r\n                    this.__toPlays = [];\r\n                this.__toPlays.push([startTime, loops, channel]);\r\n                this.once(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].COMPLETE, this, this.__playAfterLoaded);\r\n                this.load(this.url);\r\n            }\r\n        }\r\n        channel.url = this.url;\r\n        channel.loops = loops;\r\n        channel[\"audioBuffer\"] = this.audioBuffer;\r\n        channel.startTime = startTime;\r\n        channel.play();\r\n        _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].addChannel(channel);\r\n        return channel;\r\n    }\r\n    get duration() {\r\n        if (this.audioBuffer) {\r\n            return this.audioBuffer.duration;\r\n        }\r\n        return 0;\r\n    }\r\n    dispose() {\r\n        this._disposed = true;\r\n        delete WebAudioSound._dataCache[this.url];\r\n        delete WebAudioSound.__loadingSound[this.url];\r\n        this.audioBuffer = null;\r\n        this.data = null;\r\n        this.__toPlays = [];\r\n    }\r\n}\r\nWebAudioSound.window = _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].window;\r\nWebAudioSound._dataCache = {};\r\n/**\r\n * 是否支持web audio api\r\n */\r\nWebAudioSound.webAudioEnabled = WebAudioSound.window[\"AudioContext\"] || WebAudioSound.window[\"webkitAudioContext\"] || WebAudioSound.window[\"mozAudioContext\"];\r\n/**\r\n * 播放设备\r\n */\r\nWebAudioSound.ctx = WebAudioSound.webAudioEnabled ? new (WebAudioSound.window[\"AudioContext\"] || WebAudioSound.window[\"webkitAudioContext\"] || WebAudioSound.window[\"mozAudioContext\"])() : undefined;\r\n/**\r\n * 当前要解码的声音文件列表\r\n */\r\nWebAudioSound.buffs = [];\r\n/**\r\n * 是否在解码中\r\n */\r\nWebAudioSound.isDecoding = false;\r\n/**\r\n * 用于播放解锁声音以及解决Ios9版本的内存释放\r\n */\r\nWebAudioSound._miniBuffer = WebAudioSound.ctx.createBuffer(1, 1, 22050);\r\n/**\r\n * 事件派发器，用于处理加载解码完成事件的广播\r\n */\r\nWebAudioSound.e = new _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_2__[\"EventDispatcher\"]();\r\n/**\r\n * 是否已解锁声音播放\r\n */\r\nWebAudioSound._unlocked = false;\r\nWebAudioSound.__loadingSound = {};\r\n\n\n//# sourceURL=webpack:///./src/core/laya/media/webaudio/WebAudioSound.ts?");

/***/ }),

/***/ "./src/core/laya/media/webaudio/WebAudioSoundChannel.ts":
/*!**************************************************************!*\
  !*** ./src/core/laya/media/webaudio/WebAudioSoundChannel.ts ***!
  \**************************************************************/
/*! exports provided: WebAudioSoundChannel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WebAudioSoundChannel\", function() { return WebAudioSoundChannel; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _SoundChannel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../SoundChannel */ \"./src/core/laya/media/SoundChannel.ts\");\n/* harmony import */ var _SoundManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../SoundManager */ \"./src/core/laya/media/SoundManager.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/Utils */ \"./src/core/laya/utils/Utils.ts\");\n/* harmony import */ var _WebAudioSound__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./WebAudioSound */ \"./src/core/laya/media/webaudio/WebAudioSound.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * web audio api方式播放声音的音轨控制\r\n */\r\nclass WebAudioSoundChannel extends _SoundChannel__WEBPACK_IMPORTED_MODULE_2__[\"SoundChannel\"] {\r\n    constructor() {\r\n        super();\r\n        /**\r\n         * 播放用的数据\r\n         */\r\n        this.bufferSource = null;\r\n        /**\r\n         * 当前时间\r\n         */\r\n        this._currentTime = 0;\r\n        /**\r\n         * 当前音量\r\n         */\r\n        this._volume = 1;\r\n        /**\r\n         * 播放开始时的时间戳\r\n         */\r\n        this._startTime = 0;\r\n        this._pauseTime = 0;\r\n        /**\r\n         * 播放设备\r\n         */\r\n        this.context = _WebAudioSound__WEBPACK_IMPORTED_MODULE_6__[\"WebAudioSound\"].ctx;\r\n        this._onPlayEnd = _utils_Utils__WEBPACK_IMPORTED_MODULE_5__[\"Utils\"].bind(this.__onPlayEnd, this);\r\n        if (this.context[\"createGain\"]) {\r\n            this.gain = this.context[\"createGain\"]();\r\n        }\r\n        else {\r\n            this.gain = this.context[\"createGainNode\"]();\r\n        }\r\n    }\r\n    /**\r\n     * 播放声音\r\n     */\r\n    /*override*/ play() {\r\n        _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].addChannel(this);\r\n        this.isStopped = false;\r\n        this._clearBufferSource();\r\n        if (!this.audioBuffer)\r\n            return;\r\n        var context = this.context;\r\n        var gain = this.gain;\r\n        var bufferSource = context.createBufferSource();\r\n        this.bufferSource = bufferSource;\r\n        bufferSource.buffer = this.audioBuffer;\r\n        bufferSource.connect(gain);\r\n        if (gain)\r\n            gain.disconnect();\r\n        gain.connect(context.destination);\r\n        bufferSource.onended = this._onPlayEnd;\r\n        if (this.startTime >= this.duration)\r\n            this.startTime = 0;\r\n        this._startTime = _utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].now();\r\n        if (this.gain.gain.setTargetAtTime) {\r\n            this.gain.gain.setTargetAtTime(this._volume, this.context.currentTime, WebAudioSoundChannel.SetTargetDelay);\r\n        }\r\n        else\r\n            this.gain.gain.value = this._volume;\r\n        if (this.loops == 0) {\r\n            bufferSource.loop = true;\r\n        }\r\n        if (bufferSource.playbackRate.setTargetAtTime) {\r\n            bufferSource.playbackRate.setTargetAtTime(_SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].playbackRate, this.context.currentTime, WebAudioSoundChannel.SetTargetDelay);\r\n        }\r\n        else\r\n            bufferSource.playbackRate.value = _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].playbackRate;\r\n        bufferSource.start(0, this.startTime);\r\n        this._currentTime = 0;\r\n    }\r\n    __onPlayEnd() {\r\n        if (this.loops == 1) {\r\n            if (this.completeHandler) {\r\n                _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].timer.once(10, this, this.__runComplete, [this.completeHandler], false);\r\n                this.completeHandler = null;\r\n            }\r\n            this.stop();\r\n            this.event(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].COMPLETE);\r\n            return;\r\n        }\r\n        if (this.loops > 0) {\r\n            this.loops--;\r\n        }\r\n        this.startTime = 0;\r\n        this.play();\r\n    }\r\n    /**\r\n     * 获取当前播放位置\r\n     */\r\n    /*override*/ get position() {\r\n        if (this.bufferSource) {\r\n            return (_utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].now() - this._startTime) / 1000 + this.startTime;\r\n        }\r\n        return 0;\r\n    }\r\n    /*override*/ get duration() {\r\n        if (this.audioBuffer) {\r\n            return this.audioBuffer.duration;\r\n        }\r\n        return 0;\r\n    }\r\n    _clearBufferSource() {\r\n        if (this.bufferSource) {\r\n            var sourceNode = this.bufferSource;\r\n            if (sourceNode.stop) {\r\n                sourceNode.stop(0);\r\n            }\r\n            else {\r\n                sourceNode.noteOff(0);\r\n            }\r\n            sourceNode.disconnect(0);\r\n            sourceNode.onended = null;\r\n            if (!WebAudioSoundChannel._tryCleanFailed)\r\n                this._tryClearBuffer(sourceNode);\r\n            this.bufferSource = null;\r\n        }\r\n    }\r\n    _tryClearBuffer(sourceNode) {\r\n        if (!_utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].onMac) {\r\n            try {\r\n                sourceNode.buffer = null;\r\n            }\r\n            catch (e) {\r\n                WebAudioSoundChannel._tryCleanFailed = true;\r\n            }\r\n            return;\r\n        }\r\n        try {\r\n            sourceNode.buffer = _WebAudioSound__WEBPACK_IMPORTED_MODULE_6__[\"WebAudioSound\"]._miniBuffer;\r\n        }\r\n        catch (e) {\r\n            WebAudioSoundChannel._tryCleanFailed = true;\r\n        }\r\n    }\r\n    /**\r\n     * 停止播放\r\n     */\r\n    /*override*/ stop() {\r\n        super.stop();\r\n        this._clearBufferSource();\r\n        this.audioBuffer = null;\r\n        if (this.gain)\r\n            this.gain.disconnect();\r\n        this.isStopped = true;\r\n        _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].removeChannel(this);\r\n        this.completeHandler = null;\r\n        if (_SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].autoReleaseSound)\r\n            _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].disposeSoundLater(this.url);\r\n    }\r\n    /*override*/ pause() {\r\n        if (!this.isStopped) {\r\n            this._pauseTime = this.position;\r\n        }\r\n        this._clearBufferSource();\r\n        if (this.gain)\r\n            this.gain.disconnect();\r\n        this.isStopped = true;\r\n        _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].removeChannel(this);\r\n        if (_SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].autoReleaseSound)\r\n            _SoundManager__WEBPACK_IMPORTED_MODULE_3__[\"SoundManager\"].disposeSoundLater(this.url);\r\n    }\r\n    /*override*/ resume() {\r\n        this.startTime = this._pauseTime;\r\n        this.play();\r\n    }\r\n    /**\r\n     * 设置音量\r\n     */\r\n    /*override*/ set volume(v) {\r\n        this._volume = v;\r\n        if (this.isStopped) {\r\n            return;\r\n        }\r\n        if (this.gain.gain.setTargetAtTime) {\r\n            this.gain.gain.setTargetAtTime(v, this.context.currentTime, WebAudioSoundChannel.SetTargetDelay);\r\n        }\r\n        else\r\n            this.gain.gain.value = v;\r\n    }\r\n    /**\r\n     * 获取音量\r\n     */\r\n    /*override*/ get volume() {\r\n        return this._volume;\r\n    }\r\n}\r\nWebAudioSoundChannel._tryCleanFailed = false;\r\nWebAudioSoundChannel.SetTargetDelay = 0.001;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/media/webaudio/WebAudioSoundChannel.ts?");

/***/ }),

/***/ "./src/core/laya/net/AtlasInfoManager.ts":
/*!***********************************************!*\
  !*** ./src/core/laya/net/AtlasInfoManager.ts ***!
  \***********************************************/
/*! exports provided: AtlasInfoManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AtlasInfoManager\", function() { return AtlasInfoManager; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _Loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././Loader */ \"./src/core/laya/net/Loader.ts\");\n/* harmony import */ var _utils_Handler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Handler */ \"./src/core/laya/utils/Handler.ts\");\n\r\n\r\n\r\n/**\r\n * @private\r\n */\r\nclass AtlasInfoManager {\r\n    static enable(infoFile, callback = null) {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].loader.load(infoFile, _utils_Handler__WEBPACK_IMPORTED_MODULE_2__[\"Handler\"].create(null, AtlasInfoManager._onInfoLoaded, [callback]), null, _Loader__WEBPACK_IMPORTED_MODULE_1__[\"Loader\"].JSON);\r\n    }\r\n    /**@private */\r\n    static _onInfoLoaded(callback, data) {\r\n        var tKey;\r\n        var tPrefix;\r\n        var tArr;\r\n        var i, len;\r\n        for (tKey in data) {\r\n            tArr = data[tKey];\r\n            tPrefix = tArr[0];\r\n            tArr = tArr[1];\r\n            len = tArr.length;\r\n            for (i = 0; i < len; i++) {\r\n                AtlasInfoManager._fileLoadDic[tPrefix + tArr[i]] = tKey;\r\n            }\r\n        }\r\n        callback && callback.run();\r\n    }\r\n    static getFileLoadPath(file) {\r\n        return AtlasInfoManager._fileLoadDic[file] || file;\r\n    }\r\n}\r\nAtlasInfoManager._fileLoadDic = {};\r\n\n\n//# sourceURL=webpack:///./src/core/laya/net/AtlasInfoManager.ts?");

/***/ }),

/***/ "./src/core/laya/net/HttpRequest.ts":
/*!******************************************!*\
  !*** ./src/core/laya/net/HttpRequest.ts ***!
  \******************************************/
/*! exports provided: HttpRequest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HttpRequest\", function() { return HttpRequest; });\n/* harmony import */ var _URL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././URL */ \"./src/core/laya/net/URL.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/EventDispatcher */ \"./src/core/laya/events/EventDispatcher.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Utils */ \"./src/core/laya/utils/Utils.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 请求进度改变时调度。\r\n * @eventType Event.PROGRESS\r\n * */\r\n/*[Event(name = \"progress\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 请求结束后调度。\r\n * @eventType Event.COMPLETE\r\n * */\r\n/*[Event(name = \"complete\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 请求出错时调度。\r\n * @eventType Event.ERROR\r\n * */\r\n/*[Event(name = \"error\", type = \"laya.events.Event\")]*/\r\n/**\r\n * <p> <code>HttpRequest</code> 通过封装 HTML <code>XMLHttpRequest</code> 对象提供了对 HTTP 协议的完全的访问，包括做出 POST 和 HEAD 请求以及普通的 GET 请求的能力。 <code>HttpRequest</code> 只提供以异步的形式返回 Web 服务器的响应，并且能够以文本或者二进制的形式返回内容。</p>\r\n * <p><b>注意：</b>建议每次请求都使用新的 <code>HttpRequest</code> 对象，因为每次调用该对象的send方法时，都会清空之前设置的数据，并重置 HTTP 请求的状态，这会导致之前还未返回响应的请求被重置，从而得不到之前请求的响应结果。</p>\r\n */\r\nclass HttpRequest extends _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_2__[\"EventDispatcher\"] {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**@private */\r\n        this._http = new _utils_Browser__WEBPACK_IMPORTED_MODULE_4__[\"Browser\"].window.XMLHttpRequest();\r\n    }\r\n    /**\r\n     * 发送 HTTP 请求。\r\n     * @param\turl\t\t\t\t请求的地址。大多数浏览器实施了一个同源安全策略，并且要求这个 URL 与包含脚本的文本具有相同的主机名和端口。\r\n     * @param\tdata\t\t\t(default = null)发送的数据。\r\n     * @param\tmethod\t\t\t(default = \"get\")用于请求的 HTTP 方法。值包括 \"get\"、\"post\"、\"head\"。\r\n     * @param\tresponseType\t(default = \"text\")Web 服务器的响应类型，可设置为 \"text\"、\"json\"、\"xml\"、\"arraybuffer\"。\r\n     * @param\theaders\t\t\t(default = null) HTTP 请求的头部信息。参数形如key-value数组：key是头部的名称，不应该包括空白、冒号或换行；value是头部的值，不应该包括换行。比如[\"Content-Type\", \"application/json\"]。\r\n     */\r\n    send(url, data = null, method = \"get\", responseType = \"text\", headers = null) {\r\n        this._responseType = responseType;\r\n        this._data = null;\r\n        this._url = url;\r\n        var _this = this;\r\n        var http = this._http;\r\n        //临时，因为微信不支持以下文件格式\r\n        url = _URL__WEBPACK_IMPORTED_MODULE_0__[\"URL\"].getAdptedFilePath(url);\r\n        http.open(method, url, true);\r\n        if (headers) {\r\n            for (var i = 0; i < headers.length; i++) {\r\n                http.setRequestHeader(headers[i++], headers[i]);\r\n            }\r\n        }\r\n        else if (!_renders_Render__WEBPACK_IMPORTED_MODULE_3__[\"Render\"].isConchApp) {\r\n            if (!data || data instanceof String)\r\n                http.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\r\n            else\r\n                http.setRequestHeader(\"Content-Type\", \"application/json\");\r\n        }\r\n        http.responseType = responseType !== \"arraybuffer\" ? \"text\" : \"arraybuffer\";\r\n        http.onerror = function (e) {\r\n            _this._onError(e);\r\n        };\r\n        http.onabort = function (e) {\r\n            _this._onAbort(e);\r\n        };\r\n        http.onprogress = function (e) {\r\n            _this._onProgress(e);\r\n        };\r\n        http.onload = function (e) {\r\n            _this._onLoad(e);\r\n        };\r\n        http.send(data);\r\n    }\r\n    /**\r\n     * @private\r\n     * 请求进度的侦听处理函数。\r\n     * @param\te 事件对象。\r\n     */\r\n    _onProgress(e) {\r\n        if (e && e.lengthComputable)\r\n            this.event(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].PROGRESS, e.loaded / e.total);\r\n    }\r\n    /**\r\n     * @private\r\n     * 请求中断的侦听处理函数。\r\n     * @param\te 事件对象。\r\n     */\r\n    _onAbort(e) {\r\n        this.error(\"Request was aborted by user\");\r\n    }\r\n    /**\r\n     * @private\r\n     * 请求出错侦的听处理函数。\r\n     * @param\te 事件对象。\r\n     */\r\n    _onError(e) {\r\n        this.error(\"Request failed Status:\" + this._http.status + \" text:\" + this._http.statusText);\r\n    }\r\n    /**\r\n     * @private\r\n     * 请求消息返回的侦听处理函数。\r\n     * @param\te 事件对象。\r\n     */\r\n    _onLoad(e) {\r\n        var http = this._http;\r\n        var status = http.status !== undefined ? http.status : 200;\r\n        if (status === 200 || status === 204 || status === 0) {\r\n            this.complete();\r\n        }\r\n        else {\r\n            this.error(\"[\" + http.status + \"]\" + http.statusText + \":\" + http.responseURL);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 请求错误的处理函数。\r\n     * @param\tmessage 错误信息。\r\n     */\r\n    error(message) {\r\n        this.clear();\r\n        console.warn(this.url, message);\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].ERROR, message);\r\n    }\r\n    /**\r\n     * @private\r\n     * 请求成功完成的处理函数。\r\n     */\r\n    complete() {\r\n        this.clear();\r\n        var flag = true;\r\n        try {\r\n            if (this._responseType === \"json\") {\r\n                this._data = JSON.parse(this._http.responseText);\r\n            }\r\n            else if (this._responseType === \"xml\") {\r\n                this._data = _utils_Utils__WEBPACK_IMPORTED_MODULE_5__[\"Utils\"].parseXMLFromString(this._http.responseText);\r\n            }\r\n            else {\r\n                this._data = this._http.response || this._http.responseText;\r\n            }\r\n        }\r\n        catch (e) {\r\n            flag = false;\r\n            this.error(e.message);\r\n        }\r\n        flag && this.event(_events_Event__WEBPACK_IMPORTED_MODULE_1__[\"Event\"].COMPLETE, this._data instanceof Array ? [this._data] : this._data);\r\n    }\r\n    /**\r\n     * @private\r\n     * 清除当前请求。\r\n     */\r\n    clear() {\r\n        var http = this._http;\r\n        http.onerror = http.onabort = http.onprogress = http.onload = null;\r\n    }\r\n    /** 请求的地址。*/\r\n    get url() {\r\n        return this._url;\r\n    }\r\n    /** 返回的数据。*/\r\n    get data() {\r\n        return this._data;\r\n    }\r\n    /**\r\n     * 本对象所封装的原生 XMLHttpRequest 引用。\r\n     */\r\n    get http() {\r\n        return this._http;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/net/HttpRequest.ts?");

/***/ }),

/***/ "./src/core/laya/net/Loader.ts":
/*!*************************************!*\
  !*** ./src/core/laya/net/Loader.ts ***!
  \*************************************/
/*! exports provided: Loader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Loader\", function() { return Loader; });\n/* harmony import */ var _HttpRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././HttpRequest */ \"./src/core/laya/net/HttpRequest.ts\");\n/* harmony import */ var _URL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././URL */ \"./src/core/laya/net/URL.ts\");\n/* harmony import */ var _WorkerLoader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ././WorkerLoader */ \"./src/core/laya/net/WorkerLoader.ts\");\n/* harmony import */ var _TTFLoader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ././TTFLoader */ \"./src/core/laya/net/TTFLoader.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _components_Prefab__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/Prefab */ \"./src/core/laya/components/Prefab.ts\");\n/* harmony import */ var _display_BitmapFont__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../display/BitmapFont */ \"./src/core/laya/display/BitmapFont.ts\");\n/* harmony import */ var _display_Text__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../display/Text */ \"./src/core/laya/display/Text.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../events/EventDispatcher */ \"./src/core/laya/events/EventDispatcher.ts\");\n/* harmony import */ var _media_SoundManager__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../media/SoundManager */ \"./src/core/laya/media/SoundManager.ts\");\n/* harmony import */ var _resource_BaseTexture__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../resource/BaseTexture */ \"./src/core/laya/resource/BaseTexture.ts\");\n/* harmony import */ var _resource_Texture__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../resource/Texture */ \"./src/core/laya/resource/Texture.ts\");\n/* harmony import */ var _resource_Texture2D__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../resource/Texture2D */ \"./src/core/laya/resource/Texture2D.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _utils_Byte__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../utils/Byte */ \"./src/core/laya/utils/Byte.ts\");\n/* harmony import */ var _utils_Handler__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../utils/Handler */ \"./src/core/laya/utils/Handler.ts\");\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../utils/Utils */ \"./src/core/laya/utils/Utils.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 加载进度发生改变时调度。\r\n * @eventType Event.PROGRESS\r\n * */\r\n/*[Event(name = \"progress\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 加载完成后调度。\r\n * @eventType Event.COMPLETE\r\n * */\r\n/*[Event(name = \"complete\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 加载出错时调度。\r\n * @eventType Event.ERROR\r\n * */\r\n/*[Event(name = \"error\", type = \"laya.events.Event\")]*/\r\n/**\r\n * <code>Loader</code> 类可用来加载文本、JSON、XML、二进制、图像等资源。\r\n */\r\nclass Loader extends _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_9__[\"EventDispatcher\"] {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**@private 自定义解析不派发complete事件，但会派发loaded事件，手动调用endLoad方法再派发complete事件*/\r\n        this._customParse = false;\r\n    }\r\n    /**\r\n     * 加载资源。加载错误会派发 Event.ERROR 事件，参数为错误信息。\r\n     * @param\turl\t\t\t资源地址。\r\n     * @param\ttype\t\t(default = null)资源类型。可选值为：Loader.TEXT、Loader.JSON、Loader.XML、Loader.BUFFER、Loader.IMAGE、Loader.SOUND、Loader.ATLAS、Loader.FONT。如果为null，则根据文件后缀分析类型。\r\n     * @param\tcache\t\t(default = true)是否缓存数据。\r\n     * @param\tgroup\t\t(default = null)分组名称。\r\n     * @param\tignoreCache (default = false)是否忽略缓存，强制重新加载。\r\n     * @param\tuseWorkerLoader(default = false)是否使用worker加载（只针对IMAGE类型和ATLAS类型，并且浏览器支持的情况下生效）\r\n     */\r\n    load(url, type = null, cache = true, group = null, ignoreCache = false, useWorkerLoader = false) {\r\n        if (!url) {\r\n            this.onLoaded(null);\r\n            return;\r\n        }\r\n        Loader.setGroup(url, \"666\");\r\n        this._url = url;\r\n        if (url.indexOf(\"data:image\") === 0)\r\n            type = Loader.IMAGE;\r\n        else\r\n            url = _URL__WEBPACK_IMPORTED_MODULE_1__[\"URL\"].formatURL(url);\r\n        this._type = type || (type = Loader.getTypeFromUrl(this._url));\r\n        this._cache = cache;\r\n        this._useWorkerLoader = useWorkerLoader;\r\n        this._data = null;\r\n        if (useWorkerLoader)\r\n            _WorkerLoader__WEBPACK_IMPORTED_MODULE_2__[\"WorkerLoader\"].enableWorkerLoader();\r\n        if (!ignoreCache && Loader.loadedMap[url]) {\r\n            this._data = Loader.loadedMap[url];\r\n            this.event(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].PROGRESS, 1);\r\n            this.event(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].COMPLETE, this._data);\r\n            return;\r\n        }\r\n        if (group)\r\n            Loader.setGroup(url, group);\r\n        //如果自定义了解析器，则自己解析，自定义解析不派发complete事件，但会派发loaded事件，手动调用endLoad方法再派发complete事件\r\n        if (Loader.parserMap[type] != null) {\r\n            this._customParse = true;\r\n            if (Loader.parserMap[type] instanceof _utils_Handler__WEBPACK_IMPORTED_MODULE_16__[\"Handler\"])\r\n                Loader.parserMap[type].runWith(this);\r\n            else\r\n                Loader.parserMap[type].call(null, this);\r\n            return;\r\n        }\r\n        //htmlimage和nativeimage为内部类型\r\n        if (type === Loader.IMAGE || type === \"htmlimage\" || type === \"nativeimage\")\r\n            return this._loadImage(url);\r\n        if (type === Loader.SOUND)\r\n            return this._loadSound(url);\r\n        if (type === Loader.TTF)\r\n            return this._loadTTF(url);\r\n        var contentType;\r\n        switch (type) {\r\n            case Loader.ATLAS:\r\n            case Loader.PREFAB:\r\n            case Loader.PLF:\r\n                contentType = Loader.JSON;\r\n                break;\r\n            case Loader.FONT:\r\n                contentType = Loader.XML;\r\n                break;\r\n            case Loader.PLFB:\r\n                contentType = Loader.BUFFER;\r\n                break;\r\n            default:\r\n                contentType = type;\r\n        }\r\n        if (Loader.preLoadedMap[url]) {\r\n            this.onLoaded(Loader.preLoadedMap[url]);\r\n        }\r\n        else {\r\n            if (!this._http) {\r\n                this._http = new _HttpRequest__WEBPACK_IMPORTED_MODULE_0__[\"HttpRequest\"]();\r\n                this._http.on(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].PROGRESS, this, this.onProgress);\r\n                this._http.on(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].ERROR, this, this.onError);\r\n                this._http.on(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].COMPLETE, this, this.onLoaded);\r\n            }\r\n            this._http.send(url, null, \"get\", contentType);\r\n        }\r\n    }\r\n    /**\r\n     * 获取指定资源地址的数据类型。\r\n     * @param\turl 资源地址。\r\n     * @return 数据类型。\r\n     */\r\n    static getTypeFromUrl(url) {\r\n        var type = _utils_Utils__WEBPACK_IMPORTED_MODULE_17__[\"Utils\"].getFileExtension(url);\r\n        if (type)\r\n            return Loader.typeMap[type];\r\n        console.warn(\"Not recognize the resources suffix\", url);\r\n        return \"text\";\r\n    }\r\n    /**\r\n     * @private\r\n     * 加载TTF资源。\r\n     * @param\turl 资源地址。\r\n     */\r\n    _loadTTF(url) {\r\n        url = _URL__WEBPACK_IMPORTED_MODULE_1__[\"URL\"].formatURL(url);\r\n        var ttfLoader = new _TTFLoader__WEBPACK_IMPORTED_MODULE_3__[\"TTFLoader\"]();\r\n        ttfLoader.complete = _utils_Handler__WEBPACK_IMPORTED_MODULE_16__[\"Handler\"].create(this, this.onLoaded);\r\n        ttfLoader.load(url);\r\n    }\r\n    /**\r\n     * @private\r\n     * 加载图片资源。\r\n     * @param\turl 资源地址。\r\n     */\r\n    _loadImage(url) {\r\n        url = _URL__WEBPACK_IMPORTED_MODULE_1__[\"URL\"].formatURL(url);\r\n        var _this = this;\r\n        var image;\r\n        function clear() {\r\n            var img = image;\r\n            if (img) {\r\n                img.onload = null;\r\n                img.onerror = null;\r\n                delete Loader._imgCache[url];\r\n            }\r\n        }\r\n        var onerror = function () {\r\n            clear();\r\n            _this.event(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].ERROR, \"Load image failed\");\r\n        };\r\n        if (this._type === \"nativeimage\") {\r\n            var onload = function () {\r\n                clear();\r\n                _this.onLoaded(image);\r\n            };\r\n            image = new _utils_Browser__WEBPACK_IMPORTED_MODULE_14__[\"Browser\"].window.Image();\r\n            image.crossOrigin = \"\";\r\n            image.onload = onload;\r\n            image.onerror = onerror;\r\n            image.src = url;\r\n            //增加引用，防止垃圾回收\r\n            Loader._imgCache[url] = image;\r\n        }\r\n        else {\r\n            var ext = _utils_Utils__WEBPACK_IMPORTED_MODULE_17__[\"Utils\"].getFileExtension(url);\r\n            if (ext === \"ktx\" || ext === \"pvr\") {\r\n                onload = function (imageData) {\r\n                    var format;\r\n                    switch (ext) {\r\n                        case \"ktx\":\r\n                            format = /*BaseTexture.FORMAT_ETC1RGB*/ 5;\r\n                            break;\r\n                        case \"pvr\":\r\n                            format = /*BaseTexture.FORMAT_PVRTCRGBA_4BPPV*/ 12;\r\n                            break;\r\n                    }\r\n                    image = new _resource_Texture2D__WEBPACK_IMPORTED_MODULE_13__[\"Texture2D\"](0, 0, format, false, false);\r\n                    image.wrapModeU = _resource_BaseTexture__WEBPACK_IMPORTED_MODULE_11__[\"BaseTexture\"].WARPMODE_CLAMP;\r\n                    image.wrapModeV = _resource_BaseTexture__WEBPACK_IMPORTED_MODULE_11__[\"BaseTexture\"].WARPMODE_CLAMP;\r\n                    image.setCompressData(imageData);\r\n                    image._setCreateURL(url);\r\n                    clear();\r\n                    _this.onLoaded(image);\r\n                };\r\n                var tempHttp;\r\n                //if (!_http) {\r\n                tempHttp = new _HttpRequest__WEBPACK_IMPORTED_MODULE_0__[\"HttpRequest\"]();\r\n                tempHttp.on(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].ERROR, null, onerror);\r\n                tempHttp.on(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].COMPLETE, null, onload);\r\n                //}\r\n                tempHttp.send(url, null, \"get\", Loader.BUFFER);\r\n            }\r\n            else {\r\n                var imageSource = new _utils_Browser__WEBPACK_IMPORTED_MODULE_14__[\"Browser\"].window.Image();\r\n                onload = function () {\r\n                    var tex = new _resource_Texture2D__WEBPACK_IMPORTED_MODULE_13__[\"Texture2D\"](imageSource.width, imageSource.height, 1, false, false);\r\n                    tex.wrapModeU = _resource_BaseTexture__WEBPACK_IMPORTED_MODULE_11__[\"BaseTexture\"].WARPMODE_CLAMP;\r\n                    tex.wrapModeV = _resource_BaseTexture__WEBPACK_IMPORTED_MODULE_11__[\"BaseTexture\"].WARPMODE_CLAMP;\r\n                    tex.loadImageSource(imageSource, true);\r\n                    tex._setCreateURL(url);\r\n                    clear();\r\n                    _this.onLoaded(tex);\r\n                };\r\n                imageSource.crossOrigin = \"\";\r\n                imageSource.onload = onload;\r\n                imageSource.onerror = onerror;\r\n                imageSource.src = url;\r\n                //image = imageSource;\r\n                Loader._imgCache[url] = imageSource; //增加引用，防止垃圾回收\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 加载声音资源。\r\n     * @param\turl 资源地址。\r\n     */\r\n    _loadSound(url) {\r\n        var sound = (new _media_SoundManager__WEBPACK_IMPORTED_MODULE_10__[\"SoundManager\"]._soundClass());\r\n        var _this = this;\r\n        sound.on(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].COMPLETE, this, soundOnload);\r\n        sound.on(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].ERROR, this, soundOnErr);\r\n        sound.load(url);\r\n        function soundOnload() {\r\n            clear();\r\n            _this.onLoaded(sound);\r\n        }\r\n        function soundOnErr() {\r\n            clear();\r\n            sound.dispose();\r\n            _this.event(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].ERROR, \"Load sound failed\");\r\n        }\r\n        function clear() {\r\n            sound.offAll();\r\n        }\r\n    }\r\n    /**@private */\r\n    onProgress(value) {\r\n        if (this._type === Loader.ATLAS)\r\n            this.event(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].PROGRESS, value * 0.3);\r\n        else\r\n            this.event(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].PROGRESS, value);\r\n    }\r\n    /**@private */\r\n    onError(message) {\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].ERROR, message);\r\n    }\r\n    /**\r\n     * 资源加载完成的处理函数。\r\n     * @param\tdata 数据。\r\n     */\r\n    onLoaded(data = null) {\r\n        var type = this._type;\r\n        if (type == Loader.PLFB) {\r\n            this.parsePLFBData(data);\r\n            this.complete(data);\r\n        }\r\n        else if (type == Loader.PLF) {\r\n            this.parsePLFData(data);\r\n            this.complete(data);\r\n        }\r\n        else if (type === Loader.IMAGE) {\r\n            var tex = new _resource_Texture__WEBPACK_IMPORTED_MODULE_12__[\"Texture\"](data);\r\n            tex.url = this._url;\r\n            this.complete(tex);\r\n        }\r\n        else if (type === Loader.SOUND || type === \"htmlimage\" || type === \"nativeimage\") {\r\n            this.complete(data);\r\n        }\r\n        else if (type === Loader.ATLAS) {\r\n            //处理图集\r\n            if (!data.url && !data._setContext) {\r\n                if (!this._data) {\r\n                    this._data = data;\r\n                    //构造加载图片信息\r\n                    if (data.meta && data.meta.image) {\r\n                        //带图片信息的类型\r\n                        var toloadPics = data.meta.image.split(\",\");\r\n                        var split = this._url.indexOf(\"/\") >= 0 ? \"/\" : \"\\\\\";\r\n                        var idx = this._url.lastIndexOf(split);\r\n                        var folderPath = idx >= 0 ? this._url.substr(0, idx + 1) : \"\";\r\n                        var changeType;\r\n                        if (_utils_Browser__WEBPACK_IMPORTED_MODULE_14__[\"Browser\"].onAndroid && data.meta.compressTextureAndroid) {\r\n                            changeType = \".ktx\";\r\n                        }\r\n                        if (_utils_Browser__WEBPACK_IMPORTED_MODULE_14__[\"Browser\"].onIOS && data.meta.compressTextureIOS) {\r\n                            changeType = \".pvr\";\r\n                        }\r\n                        //idx = _url.indexOf(\"?\");\r\n                        //var ver:String;\r\n                        //ver = idx >= 0 ? _url.substr(idx) : \"\";\r\n                        for (var i = 0, len = toloadPics.length; i < len; i++) {\r\n                            if (changeType) {\r\n                                toloadPics[i] = folderPath + toloadPics[i].replace(\".png\", changeType);\r\n                            }\r\n                            else {\r\n                                toloadPics[i] = folderPath + toloadPics[i];\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        //不带图片信息\r\n                        toloadPics = [this._url.replace(\".json\", \".png\")];\r\n                    }\r\n                    //保证图集的正序加载\r\n                    toloadPics.reverse();\r\n                    data.toLoads = toloadPics;\r\n                    data.pics = [];\r\n                }\r\n                this.event(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].PROGRESS, 0.3 + 1 / toloadPics.length * 0.6);\r\n                return this._loadImage(toloadPics.pop());\r\n            }\r\n            else {\r\n                this._data.pics.push(data);\r\n                if (this._data.toLoads.length > 0) {\r\n                    this.event(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].PROGRESS, 0.3 + 1 / this._data.toLoads.length * 0.6);\r\n                    //有图片未加载\r\n                    return this._loadImage(this._data.toLoads.pop());\r\n                }\r\n                var frames = this._data.frames;\r\n                var cleanUrl = this._url.split(\"?\")[0];\r\n                var directory = (this._data.meta && this._data.meta.prefix) ? this._data.meta.prefix : cleanUrl.substring(0, cleanUrl.lastIndexOf(\".\")) + \"/\";\r\n                var pics = this._data.pics;\r\n                var atlasURL = _URL__WEBPACK_IMPORTED_MODULE_1__[\"URL\"].formatURL(this._url);\r\n                var map = Loader.atlasMap[atlasURL] || (Loader.atlasMap[atlasURL] = []);\r\n                map.dir = directory;\r\n                var scaleRate = 1;\r\n                if (this._data.meta && this._data.meta.scale && this._data.meta.scale != 1) {\r\n                    scaleRate = parseFloat(this._data.meta.scale);\r\n                    for (var name in frames) {\r\n                        var obj = frames[name]; //取对应的图\r\n                        var tPic = pics[obj.frame.idx ? obj.frame.idx : 0]; //是否释放\r\n                        var url = _URL__WEBPACK_IMPORTED_MODULE_1__[\"URL\"].formatURL(directory + name);\r\n                        tPic.scaleRate = scaleRate;\r\n                        var tTexture;\r\n                        tTexture = _resource_Texture__WEBPACK_IMPORTED_MODULE_12__[\"Texture\"]._create(tPic, obj.frame.x, obj.frame.y, obj.frame.w, obj.frame.h, obj.spriteSourceSize.x, obj.spriteSourceSize.y, obj.sourceSize.w, obj.sourceSize.h, Loader.getRes(url));\r\n                        Loader.cacheRes(url, tTexture);\r\n                        tTexture.url = url;\r\n                        map.push(url);\r\n                    }\r\n                }\r\n                else {\r\n                    for (name in frames) {\r\n                        obj = frames[name]; //取对应的图\r\n                        tPic = pics[obj.frame.idx ? obj.frame.idx : 0]; //是否释放\r\n                        url = _URL__WEBPACK_IMPORTED_MODULE_1__[\"URL\"].formatURL(directory + name);\r\n                        tTexture = _resource_Texture__WEBPACK_IMPORTED_MODULE_12__[\"Texture\"]._create(tPic, obj.frame.x, obj.frame.y, obj.frame.w, obj.frame.h, obj.spriteSourceSize.x, obj.spriteSourceSize.y, obj.sourceSize.w, obj.sourceSize.h, Loader.getRes(url));\r\n                        Loader.cacheRes(url, tTexture);\r\n                        tTexture.url = url;\r\n                        map.push(url);\r\n                    }\r\n                }\r\n                delete this._data.pics;\r\n                this.complete(this._data);\r\n            }\r\n        }\r\n        else if (type === Loader.FONT) {\r\n            //处理位图字体\r\n            if (!data._source) {\r\n                this._data = data;\r\n                this.event(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].PROGRESS, 0.5);\r\n                return this._loadImage(this._url.replace(\".fnt\", \".png\"));\r\n            }\r\n            else {\r\n                var bFont = new _display_BitmapFont__WEBPACK_IMPORTED_MODULE_6__[\"BitmapFont\"]();\r\n                bFont.parseFont(this._data, new _resource_Texture__WEBPACK_IMPORTED_MODULE_12__[\"Texture\"](data));\r\n                var tArr = this._url.split(\".fnt\")[0].split(\"/\");\r\n                var fontName = tArr[tArr.length - 1];\r\n                _display_Text__WEBPACK_IMPORTED_MODULE_7__[\"Text\"].registerBitmapFont(fontName, bFont);\r\n                this._data = bFont;\r\n                this.complete(this._data);\r\n            }\r\n        }\r\n        else if (type === Loader.PREFAB) {\r\n            var prefab = new _components_Prefab__WEBPACK_IMPORTED_MODULE_5__[\"Prefab\"]();\r\n            prefab.json = data;\r\n            this.complete(prefab);\r\n        }\r\n        else {\r\n            this.complete(data);\r\n        }\r\n    }\r\n    parsePLFData(plfData) {\r\n        var type;\r\n        var filePath;\r\n        var fileDic;\r\n        for (type in plfData) {\r\n            fileDic = plfData[type];\r\n            switch (type) {\r\n                case \"json\":\r\n                case \"text\":\r\n                    for (filePath in fileDic) {\r\n                        Loader.preLoadedMap[_URL__WEBPACK_IMPORTED_MODULE_1__[\"URL\"].formatURL(filePath)] = fileDic[filePath];\r\n                    }\r\n                    break;\r\n                default:\r\n                    for (filePath in fileDic) {\r\n                        Loader.preLoadedMap[_URL__WEBPACK_IMPORTED_MODULE_1__[\"URL\"].formatURL(filePath)] = fileDic[filePath];\r\n                    }\r\n            }\r\n        }\r\n    }\r\n    parsePLFBData(plfData) {\r\n        var byte;\r\n        byte = new _utils_Byte__WEBPACK_IMPORTED_MODULE_15__[\"Byte\"](plfData);\r\n        var i, len;\r\n        len = byte.getInt32();\r\n        for (i = 0; i < len; i++) {\r\n            this.parseOnePLFBFile(byte);\r\n        }\r\n    }\r\n    parseOnePLFBFile(byte) {\r\n        var fileLen;\r\n        var fileName;\r\n        var fileData;\r\n        fileName = byte.getUTFString();\r\n        fileLen = byte.getInt32();\r\n        fileData = byte.readArrayBuffer(fileLen);\r\n        Loader.preLoadedMap[_URL__WEBPACK_IMPORTED_MODULE_1__[\"URL\"].formatURL(fileName)] = fileData;\r\n    }\r\n    /**\r\n     * 加载完成。\r\n     * @param\tdata 加载的数据。\r\n     */\r\n    complete(data) {\r\n        this._data = data;\r\n        if (this._customParse) {\r\n            this.event(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].LOADED, data instanceof Array ? [data] : data);\r\n        }\r\n        else {\r\n            Loader._loaders.push(this);\r\n            if (!Loader._isWorking)\r\n                Loader.checkNext();\r\n        }\r\n    }\r\n    /**@private */\r\n    static checkNext() {\r\n        Loader._isWorking = true;\r\n        var startTimer = _utils_Browser__WEBPACK_IMPORTED_MODULE_14__[\"Browser\"].now();\r\n        var thisTimer = startTimer;\r\n        while (Loader._startIndex < Loader._loaders.length) {\r\n            thisTimer = _utils_Browser__WEBPACK_IMPORTED_MODULE_14__[\"Browser\"].now();\r\n            Loader._loaders[Loader._startIndex].endLoad();\r\n            Loader._startIndex++;\r\n            if (_utils_Browser__WEBPACK_IMPORTED_MODULE_14__[\"Browser\"].now() - startTimer > Loader.maxTimeOut) {\r\n                console.warn(\"loader callback cost a long time:\" + (_utils_Browser__WEBPACK_IMPORTED_MODULE_14__[\"Browser\"].now() - startTimer) + \" url=\" + Loader._loaders[Loader._startIndex - 1].url);\r\n                _Laya__WEBPACK_IMPORTED_MODULE_4__[\"Laya\"].systemTimer.frameOnce(1, null, Loader.checkNext);\r\n                return;\r\n            }\r\n        }\r\n        Loader._loaders.length = 0;\r\n        Loader._startIndex = 0;\r\n        Loader._isWorking = false;\r\n    }\r\n    /**\r\n     * 结束加载，处理是否缓存及派发完成事件 <code>Event.COMPLETE</code> 。\r\n     * @param\tcontent 加载后的数据\r\n     */\r\n    endLoad(content = null) {\r\n        content && (this._data = content);\r\n        if (this._cache)\r\n            Loader.cacheRes(this._url, this._data);\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].PROGRESS, 1);\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_8__[\"Event\"].COMPLETE, this.data instanceof Array ? [this.data] : this.data);\r\n    }\r\n    /**加载地址。*/\r\n    get url() {\r\n        return this._url;\r\n    }\r\n    /**加载类型。*/\r\n    get type() {\r\n        return this._type;\r\n    }\r\n    /**是否缓存。*/\r\n    get cache() {\r\n        return this._cache;\r\n    }\r\n    /**返回的数据。*/\r\n    get data() {\r\n        return this._data;\r\n    }\r\n    /**\r\n     * 清理指定资源地址的缓存。\r\n     * @param\turl 资源地址。\r\n     */\r\n    static clearRes(url) {\r\n        url = _URL__WEBPACK_IMPORTED_MODULE_1__[\"URL\"].formatURL(url);\r\n        //删除图集\r\n        var arr = Loader.getAtlas(url);\r\n        if (arr) {\r\n            for (var i = 0, n = arr.length; i < n; i++) {\r\n                var resUrl = arr[i];\r\n                var tex = Loader.getRes(resUrl);\r\n                delete Loader.loadedMap[resUrl];\r\n                if (tex)\r\n                    tex.destroy();\r\n            }\r\n            arr.length = 0;\r\n            delete Loader.atlasMap[url];\r\n            delete Loader.loadedMap[url];\r\n        }\r\n        else {\r\n            var res = Loader.loadedMap[url];\r\n            if (res) {\r\n                delete Loader.loadedMap[url];\r\n                if (res instanceof _resource_Texture__WEBPACK_IMPORTED_MODULE_12__[\"Texture\"] && res.bitmap)\r\n                    res.destroy();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 销毁Texture使用的图片资源，保留texture壳，如果下次渲染的时候，发现texture使用的图片资源不存在，则会自动恢复\r\n     * 相比clearRes，clearTextureRes只是清理texture里面使用的图片资源，并不销毁texture，再次使用到的时候会自动恢复图片资源\r\n     * 而clearRes会彻底销毁texture，导致不能再使用；clearTextureRes能确保立即销毁图片资源，并且不用担心销毁错误，clearRes则采用引用计数方式销毁\r\n     * 【注意】如果图片本身在自动合集里面（默认图片小于512*512），内存是不能被销毁的，此图片被大图合集管理器管理\r\n     * @param\turl\t图集地址或者texture地址，比如 Loader.clearTextureRes(\"res/atlas/comp.atlas\"); Loader.clearTextureRes(\"hall/bg.jpg\");\r\n     */\r\n    static clearTextureRes(url) {\r\n        url = _URL__WEBPACK_IMPORTED_MODULE_1__[\"URL\"].formatURL(url);\r\n        //删除图集\r\n        var arr = Loader.getAtlas(url);\r\n        var res = (arr && arr.length > 0) ? Loader.getRes(arr[0]) : Loader.getRes(url);\r\n        if (res instanceof _resource_Texture__WEBPACK_IMPORTED_MODULE_12__[\"Texture\"])\r\n            res.disposeBitmap();\r\n    }\r\n    /**\r\n     * 获取指定资源地址的资源。\r\n     * @param\turl 资源地址。\r\n     * @return\t返回资源。\r\n     */\r\n    static getRes(url) {\r\n        return Loader.loadedMap[_URL__WEBPACK_IMPORTED_MODULE_1__[\"URL\"].formatURL(url)];\r\n    }\r\n    /**\r\n     * 获取指定资源地址的图集地址列表。\r\n     * @param\turl 图集地址。\r\n     * @return\t返回地址集合。\r\n     */\r\n    static getAtlas(url) {\r\n        return Loader.atlasMap[_URL__WEBPACK_IMPORTED_MODULE_1__[\"URL\"].formatURL(url)];\r\n    }\r\n    /**\r\n     * 缓存资源。\r\n     * @param\turl 资源地址。\r\n     * @param\tdata 要缓存的内容。\r\n     */\r\n    static cacheRes(url, data) {\r\n        url = _URL__WEBPACK_IMPORTED_MODULE_1__[\"URL\"].formatURL(url);\r\n        if (Loader.loadedMap[url] != null) {\r\n            console.warn(\"Resources already exist,is repeated loading:\", url);\r\n        }\r\n        else {\r\n            Loader.loadedMap[url] = data;\r\n        }\r\n    }\r\n    /**\r\n     * 设置资源分组。\r\n     * @param url 资源地址。\r\n     * @param group 分组名。\r\n     */\r\n    static setGroup(url, group) {\r\n        if (!Loader.groupMap[group])\r\n            Loader.groupMap[group] = [];\r\n        Loader.groupMap[group].push(url);\r\n    }\r\n    /**\r\n     * 根据分组清理资源。\r\n     * @param group 分组名。\r\n     */\r\n    static clearResByGroup(group) {\r\n        if (!Loader.groupMap[group])\r\n            return;\r\n        var arr = Loader.groupMap[group], i, len = arr.length;\r\n        for (i = 0; i < len; i++) {\r\n            Loader.clearRes(arr[i]);\r\n        }\r\n        arr.length = 0;\r\n    }\r\n}\r\n/**文本类型，加载完成后返回文本。*/\r\nLoader.TEXT = \"text\";\r\n/**JSON 类型，加载完成后返回json数据。*/\r\nLoader.JSON = \"json\";\r\n/**prefab 类型，加载完成后返回Prefab实例。*/\r\nLoader.PREFAB = \"prefab\";\r\n/**XML 类型，加载完成后返回domXML。*/\r\nLoader.XML = \"xml\";\r\n/**二进制类型，加载完成后返回arraybuffer二进制数据。*/\r\nLoader.BUFFER = \"arraybuffer\";\r\n/**纹理类型，加载完成后返回Texture。*/\r\nLoader.IMAGE = \"image\";\r\n/**声音类型，加载完成后返回sound。*/\r\nLoader.SOUND = \"sound\";\r\n/**图集类型，加载完成后返回图集json信息(并创建图集内小图Texture)。*/\r\nLoader.ATLAS = \"atlas\";\r\n/**位图字体类型，加载完成后返回BitmapFont，加载后，会根据文件名自动注册为位图字体。*/\r\nLoader.FONT = \"font\";\r\n/** TTF字体类型，加载完成后返回null。*/\r\nLoader.TTF = \"ttf\";\r\n/** 预加载文件类型，加载完成后自动解析到preLoadedMap。*/\r\nLoader.PLF = \"plf\";\r\n/** 二进制预加载文件类型，加载完成后自动解析到preLoadedMap。*/\r\nLoader.PLFB = \"plfb\";\r\n/**Hierarchy资源。*/\r\nLoader.HIERARCHY = \"HIERARCHY\";\r\n/**Mesh资源。*/\r\nLoader.MESH = \"MESH\";\r\n/**Material资源。*/\r\nLoader.MATERIAL = \"MATERIAL\";\r\n/**Texture2D资源。*/\r\nLoader.TEXTURE2D = \"TEXTURE2D\";\r\n/**TextureCube资源。*/\r\nLoader.TEXTURECUBE = \"TEXTURECUBE\";\r\n/**AnimationClip资源。*/\r\nLoader.ANIMATIONCLIP = \"ANIMATIONCLIP\";\r\n/**Avatar资源。*/\r\nLoader.AVATAR = \"AVATAR\";\r\n/**Terrain资源。*/\r\nLoader.TERRAINHEIGHTDATA = \"TERRAINHEIGHTDATA\";\r\n/**Terrain资源。*/\r\nLoader.TERRAINRES = \"TERRAIN\";\r\n/**文件后缀和类型对应表。*/\r\nLoader.typeMap = { \"ttf\": \"ttf\", \"png\": \"image\", \"jpg\": \"image\", \"jpeg\": \"image\", \"ktx\": \"image\", \"pvr\": \"image\", \"txt\": \"text\", \"json\": \"json\", \"prefab\": \"prefab\", \"xml\": \"xml\", \"als\": \"atlas\", \"atlas\": \"atlas\", \"mp3\": \"sound\", \"ogg\": \"sound\", \"wav\": \"sound\", \"part\": \"json\", \"fnt\": \"font\", \"plf\": \"plf\", \"plfb\": \"plfb\", \"scene\": \"json\", \"ani\": \"json\", \"sk\": \"arraybuffer\" };\r\n/**资源解析函数对应表，用来扩展更多类型的资源加载解析。*/\r\nLoader.parserMap = {};\r\n/**每帧加载完成回调使用的最大超时时间，如果超时，则下帧再处理，防止帧卡顿。*/\r\nLoader.maxTimeOut = 100;\r\n/**资源分组对应表。*/\r\nLoader.groupMap = {};\r\n/**已加载的资源池。*/\r\nLoader.loadedMap = {};\r\n/**已加载的图集资源池。*/\r\nLoader.atlasMap = {};\r\n/** @private 已加载的数据文件。*/\r\nLoader.preLoadedMap = {};\r\n/**@private 引用image对象，防止垃圾回收*/\r\nLoader._imgCache = {};\r\n/**@private */\r\nLoader._loaders = [];\r\n/**@private */\r\nLoader._isWorking = false;\r\n/**@private */\r\nLoader._startIndex = 0;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/net/Loader.ts?");

/***/ }),

/***/ "./src/core/laya/net/LoaderManager.ts":
/*!********************************************!*\
  !*** ./src/core/laya/net/LoaderManager.ts ***!
  \********************************************/
/*! exports provided: LoaderManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LoaderManager\", function() { return LoaderManager; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _AtlasInfoManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././AtlasInfoManager */ \"./src/core/laya/net/AtlasInfoManager.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/EventDispatcher */ \"./src/core/laya/events/EventDispatcher.ts\");\n/* harmony import */ var _Loader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Loader */ \"./src/core/laya/net/Loader.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _resource_Resource__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../resource/Resource */ \"./src/core/laya/resource/Resource.ts\");\n/* harmony import */ var _resource_Texture__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../resource/Texture */ \"./src/core/laya/resource/Texture.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _utils_Handler__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/Handler */ \"./src/core/laya/utils/Handler.ts\");\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/Utils */ \"./src/core/laya/utils/Utils.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 所有资源加载完成时调度。\r\n * @eventType Event.COMPLETE\r\n * */\r\n/*[Event(name = \"complete\", type = \"laya.events.Event\")]*/\r\n/**\r\n * 任何资源加载出错时调度。\r\n * @eventType Event.ERROR\r\n * */\r\n/*[Event(name = \"error\", type = \"laya.events.Event\")]*/\r\n/**\r\n * <p> <code>LoaderManager</code> 类用于用于批量加载资源。此类是单例，不要手动实例化此类，请通过Laya.loader访问。</p>\r\n * <p>全部队列加载完成，会派发 Event.COMPLETE 事件；如果队列中任意一个加载失败，会派发 Event.ERROR 事件，事件回调参数值为加载出错的资源地址。</p>\r\n * <p> <code>LoaderManager</code> 类提供了以下几种功能：<br/>\r\n * 多线程：默认5个加载线程，可以通过maxLoader属性修改线程数量；<br/>\r\n * 多优先级：有0-4共5个优先级，优先级高的优先加载。0最高，4最低；<br/>\r\n * 重复过滤：自动过滤重复加载（不会有多个相同地址的资源同时加载）以及复用缓存资源，防止重复加载；<br/>\r\n * 错误重试：资源加载失败后，会重试加载（以最低优先级插入加载队列），retryNum设定加载失败后重试次数，retryDelay设定加载重试的时间间隔。</p>\r\n * @see laya.net.Loader\r\n */\r\nclass LoaderManager extends _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_3__[\"EventDispatcher\"] {\r\n    /**\r\n     * <p>创建一个新的 <code>LoaderManager</code> 实例。</p>\r\n     * <p><b>注意：</b>请使用Laya.loader加载资源，这是一个单例，不要手动实例化此类，否则会导致不可预料的问题。</p>\r\n     */\r\n    constructor() {\r\n        super();\r\n        /** 加载出错后的重试次数，默认重试一次*/\r\n        this.retryNum = 1;\r\n        /** 延迟时间多久再进行错误重试，默认立即重试*/\r\n        this.retryDelay = 0;\r\n        /** 最大下载线程，默认为5个*/\r\n        this.maxLoader = 5;\r\n        /**@private */\r\n        this._loaders = [];\r\n        /**@private */\r\n        this._loaderCount = 0;\r\n        /**@private */\r\n        this._resInfos = [];\r\n        /**@private */\r\n        this._infoPool = [];\r\n        /**@private */\r\n        this._maxPriority = 5;\r\n        /**@private */\r\n        this._failRes = {};\r\n        /**@private */\r\n        this._statInfo = { count: 1, loaded: 1 };\r\n        for (var i = 0; i < this._maxPriority; i++)\r\n            this._resInfos[i] = [];\r\n    }\r\n    /**@private */\r\n    getProgress() {\r\n        return this._statInfo.loaded / this._statInfo.count;\r\n    }\r\n    /**@private */\r\n    resetProgress() {\r\n        this._statInfo.count = this._statInfo.loaded = 1;\r\n    }\r\n    /**\r\n     * <p>根据clas类型创建一个未初始化资源的对象，随后进行异步加载，资源加载完成后，初始化对象的资源，并通过此对象派发 Event.LOADED 事件，事件回调参数值为此对象本身。套嵌资源的子资源会保留资源路径\"?\"后的部分。</p>\r\n     * <p>如果url为数组，返回true；否则返回指定的资源类对象，可以通过侦听此对象的 Event.LOADED 事件来判断资源是否已经加载完毕。</p>\r\n     * <p><b>注意：</b>cache参数只能对文件后缀为atlas的资源进行缓存控制，其他资源会忽略缓存，强制重新加载。</p>\r\n     * @param\turl\t\t\t资源地址或者数组。如果url和clas同时指定了资源类型，优先使用url指定的资源类型。参数形如：[{url:xx,clas:xx,priority:xx,params:xx},{url:xx,clas:xx,priority:xx,params:xx}]。\r\n     * @param\tcomplete\t加载结束回调。根据url类型不同分为2种情况：1. url为String类型，也就是单个资源地址，如果加载成功，则回调参数值为加载完成的资源，否则为null；2. url为数组类型，指定了一组要加载的资源，如果全部加载成功，则回调参数值为true，否则为false。\r\n     * @param\tprogress\t资源加载进度回调，回调参数值为当前资源加载的进度信息(0-1)。\r\n     * @param\ttype\t资源类型。\r\n     * @param\tconstructParams\t\t资源构造函数参数。\r\n     * @param\tpropertyParams\t\t资源属性参数。\r\n     * @param\tpriority\t(default = 1)加载的优先级，优先级高的优先加载。有0-4共5个优先级，0最高，4最低。\r\n     * @param\tcache\t\t是否缓存加载的资源。\r\n     * @return\t如果url为数组，返回true；否则返回指定的资源类对象。\r\n     */\r\n    create(url, complete = null, progress = null, type = null, constructParams = null, propertyParams = null, priority = 1, cache = true) {\r\n        this._create(url, true, complete, progress, type, constructParams, propertyParams, priority, cache);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _create(url, mainResou, complete = null, progress = null, type = null, constructParams = null, propertyParams = null, priority = 1, cache = true) {\r\n        if (url instanceof Array) {\r\n            var allScuess = true;\r\n            var items = url;\r\n            var itemCount = items.length;\r\n            var loadedCount = 0;\r\n            if (progress) {\r\n                var progress2 = _utils_Handler__WEBPACK_IMPORTED_MODULE_9__[\"Handler\"].create(progress.caller, progress.method, progress.args, false);\r\n            }\r\n            for (var i = 0; i < itemCount; i++) {\r\n                var item = items[i];\r\n                if (item instanceof String)\r\n                    item = items[i] = { url: item };\r\n                item.progress = 0;\r\n            }\r\n            for (i = 0; i < itemCount; i++) {\r\n                item = items[i];\r\n                var progressHandler = progress ? _utils_Handler__WEBPACK_IMPORTED_MODULE_9__[\"Handler\"].create(null, onProgress, [item], false) : null;\r\n                var completeHandler = (progress || complete) ? _utils_Handler__WEBPACK_IMPORTED_MODULE_9__[\"Handler\"].create(null, onComplete, [item]) : null;\r\n                this._createOne(item.url, mainResou, completeHandler, progressHandler, item.type || type, item.constructParams || constructParams, item.propertyParams || propertyParams, item.priority || priority, cache);\r\n            }\r\n            function onComplete(item, content = null) {\r\n                loadedCount++;\r\n                item.progress = 1;\r\n                content || (allScuess = false); //资源加载失败\r\n                if (loadedCount === itemCount && complete) {\r\n                    complete.runWith(allScuess);\r\n                }\r\n            }\r\n            function onProgress(item, value) {\r\n                item.progress = value;\r\n                var num = 0;\r\n                for (var j = 0; j < itemCount; j++) {\r\n                    var item1 = items[j];\r\n                    num += item1.progress;\r\n                }\r\n                var v = num / itemCount;\r\n                progress2.runWith(v);\r\n            }\r\n        }\r\n        else {\r\n            this._createOne(url, mainResou, complete, progress, type, constructParams, propertyParams, priority, cache);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _createOne(url, mainResou, complete = null, progress = null, type = null, constructParams = null, propertyParams = null, priority = 1, cache = true) {\r\n        var item = this.getRes(url);\r\n        if (!item) {\r\n            var extension = _utils_Utils__WEBPACK_IMPORTED_MODULE_10__[\"Utils\"].getFileExtension(url);\r\n            (type) || (type = LoaderManager.createMap[extension] ? LoaderManager.createMap[extension][0] : null);\r\n            if (!type) {\r\n                this.load(url, complete, progress, type, priority, cache);\r\n                return;\r\n            }\r\n            var parserMap = _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].parserMap;\r\n            if (!parserMap[type]) { //not custom parse type\r\n                this.load(url, complete, progress, type, priority, cache);\r\n                return;\r\n            }\r\n            this._createLoad(url, _utils_Handler__WEBPACK_IMPORTED_MODULE_9__[\"Handler\"].create(null, onLoaded), progress, type, constructParams, propertyParams, priority, cache, true);\r\n            function onLoaded(createRes) {\r\n                if (createRes) {\r\n                    if (!mainResou && createRes instanceof _resource_Resource__WEBPACK_IMPORTED_MODULE_6__[\"Resource\"])\r\n                        createRes._addReference();\r\n                    createRes._setCreateURL(url);\r\n                }\r\n                complete && complete.runWith(createRes);\r\n                _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].loader.event(url);\r\n            }\r\n            ;\r\n        }\r\n        else {\r\n            if (!mainResou && item instanceof _resource_Resource__WEBPACK_IMPORTED_MODULE_6__[\"Resource\"])\r\n                item._addReference();\r\n            progress && progress.runWith(1);\r\n            complete && complete.runWith(item);\r\n        }\r\n    }\r\n    /**\r\n     * <p>加载资源。资源加载错误时，本对象会派发 Event.ERROR 事件，事件回调参数值为加载出错的资源地址。</p>\r\n     * <p>因为返回值为 LoaderManager 对象本身，所以可以使用如下语法：loaderManager.load(...).load(...);</p>\r\n     * @param\turl\t\t\t要加载的单个资源地址或资源信息数组。比如：简单数组：[\"a.png\",\"b.png\"]；复杂数组[{url:\"a.png\",type:Loader.IMAGE,size:100,priority:1},{url:\"b.json\",type:Loader.JSON,size:50,priority:1}]。\r\n     * @param\tcomplete\t加载结束回调。根据url类型不同分为2种情况：1. url为String类型，也就是单个资源地址，如果加载成功，则回调参数值为加载完成的资源，否则为null；2. url为数组类型，指定了一组要加载的资源，如果全部加载成功，则回调参数值为true，否则为false。\r\n     * @param\tprogress\t加载进度回调。回调参数值为当前资源的加载进度信息(0-1)。\r\n     * @param\ttype\t\t资源类型。比如：Loader.IMAGE。\r\n     * @param\tpriority\t(default = 1)加载的优先级，优先级高的优先加载。有0-4共5个优先级，0最高，4最低。\r\n     * @param\tcache\t\t是否缓存加载结果。\r\n     * @param\tgroup\t\t分组，方便对资源进行管理。\r\n     * @param\tignoreCache\t是否忽略缓存，强制重新加载。\r\n     * @param\tuseWorkerLoader(default = false)是否使用worker加载（只针对IMAGE类型和ATLAS类型，并且浏览器支持的情况下生效）\r\n     * @return 此 LoaderManager 对象本身。\r\n     */\r\n    load(url, complete = null, progress = null, type = null, priority = 1, cache = true, group = null, ignoreCache = false, useWorkerLoader = false) {\r\n        if (url instanceof Array)\r\n            return this._loadAssets(url, complete, progress, type, priority, cache, group);\r\n        var content = _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].getRes(url);\r\n        if (!ignoreCache && content != null) {\r\n            //增加延迟回掉，防止快速回掉导致执行顺序错误\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].systemTimer.frameOnce(1, null, function () {\r\n                progress && progress.runWith(1);\r\n                complete && complete.runWith(content instanceof Array ? [content] : content);\r\n                //判断是否全部加载，如果是则抛出complete事件\r\n                this._loaderCount || this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].COMPLETE);\r\n            });\r\n        }\r\n        else {\r\n            var original;\r\n            original = url;\r\n            url = _AtlasInfoManager__WEBPACK_IMPORTED_MODULE_1__[\"AtlasInfoManager\"].getFileLoadPath(url);\r\n            if (url != original && type !== \"nativeimage\") {\r\n                type = _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].ATLAS;\r\n            }\r\n            else {\r\n                original = null;\r\n            }\r\n            var info = LoaderManager._resMap[url];\r\n            if (!info) {\r\n                info = this._infoPool.length ? this._infoPool.pop() : new ResInfo();\r\n                info.url = url;\r\n                info.type = type;\r\n                info.cache = cache;\r\n                info.group = group;\r\n                info.ignoreCache = ignoreCache;\r\n                info.useWorkerLoader = useWorkerLoader;\r\n                info.originalUrl = original;\r\n                complete && info.on(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].COMPLETE, complete.caller, complete.method, complete.args);\r\n                progress && info.on(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].PROGRESS, progress.caller, progress.method, progress.args);\r\n                LoaderManager._resMap[url] = info;\r\n                priority = priority < this._maxPriority ? priority : this._maxPriority - 1;\r\n                this._resInfos[priority].push(info);\r\n                this._statInfo.count++;\r\n                this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].PROGRESS, this.getProgress());\r\n                this._next();\r\n            }\r\n            else {\r\n                if (complete) {\r\n                    if (original) {\r\n                        complete && info._createListener(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].COMPLETE, this, this._resInfoLoaded, [original, complete], false, false);\r\n                    }\r\n                    else {\r\n                        complete && info._createListener(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].COMPLETE, complete.caller, complete.method, complete.args, false, false);\r\n                    }\r\n                }\r\n                progress && info._createListener(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].PROGRESS, progress.caller, progress.method, progress.args, false, false);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    _resInfoLoaded(original, complete) {\r\n        complete.runWith(_Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].getRes(original));\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _createLoad(url, complete = null, progress = null, type = null, constructParams = null, propertyParams = null, priority = 1, cache = true, ignoreCache = false) {\r\n        if (url instanceof Array)\r\n            return this._loadAssets(url, complete, progress, type, priority, cache);\r\n        var content = _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].getRes(url);\r\n        if (content != null) {\r\n            //增加延迟回掉\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].systemTimer.frameOnce(1, null, function () {\r\n                progress && progress.runWith(1);\r\n                complete && complete.runWith(content);\r\n                //判断是否全部加载，如果是则抛出complete事件\r\n                this._loaderCount || this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].COMPLETE);\r\n            });\r\n        }\r\n        else {\r\n            var info = LoaderManager._resMap[url];\r\n            if (!info) {\r\n                info = this._infoPool.length ? this._infoPool.pop() : new ResInfo();\r\n                info.url = url;\r\n                info.type = type;\r\n                info.cache = false;\r\n                info.ignoreCache = ignoreCache;\r\n                info.originalUrl = null;\r\n                info.createCache = cache;\r\n                info.createConstructParams = constructParams;\r\n                info.createPropertyParams = propertyParams;\r\n                complete && info.on(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].COMPLETE, complete.caller, complete.method, complete.args);\r\n                progress && info.on(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].PROGRESS, progress.caller, progress.method, progress.args);\r\n                LoaderManager._resMap[url] = info;\r\n                priority = priority < this._maxPriority ? priority : this._maxPriority - 1;\r\n                this._resInfos[priority].push(info);\r\n                this._statInfo.count++;\r\n                this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].PROGRESS, this.getProgress());\r\n                this._next();\r\n            }\r\n            else {\r\n                complete && info._createListener(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].COMPLETE, complete.caller, complete.method, complete.args, false, false);\r\n                progress && info._createListener(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].PROGRESS, progress.caller, progress.method, progress.args, false, false);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    _next() {\r\n        if (this._loaderCount >= this.maxLoader)\r\n            return;\r\n        for (var i = 0; i < this._maxPriority; i++) {\r\n            var infos = this._resInfos[i];\r\n            while (infos.length > 0) {\r\n                var info = infos.shift();\r\n                if (info)\r\n                    return this._doLoad(info);\r\n            }\r\n        }\r\n        this._loaderCount || this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].COMPLETE);\r\n    }\r\n    _doLoad(resInfo) {\r\n        this._loaderCount++;\r\n        var loader = this._loaders.length ? this._loaders.pop() : new _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"]();\r\n        loader.on(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].COMPLETE, null, onLoaded);\r\n        loader.on(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].PROGRESS, null, function (num) {\r\n            resInfo.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].PROGRESS, num);\r\n        });\r\n        loader.on(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].ERROR, null, function (msg) {\r\n            onLoaded(null);\r\n        });\r\n        var _me = this;\r\n        function onLoaded(data = null) {\r\n            loader.offAll();\r\n            loader._data = null;\r\n            loader._customParse = false;\r\n            _me._loaders.push(loader);\r\n            _me._endLoad(resInfo, data instanceof Array ? [data] : data);\r\n            _me._loaderCount--;\r\n            _me._next();\r\n        }\r\n        loader._constructParams = resInfo.createConstructParams;\r\n        loader._propertyParams = resInfo.createPropertyParams;\r\n        loader._createCache = resInfo.createCache;\r\n        loader.load(resInfo.url, resInfo.type, resInfo.cache, resInfo.group, resInfo.ignoreCache, resInfo.useWorkerLoader);\r\n    }\r\n    _endLoad(resInfo, content) {\r\n        //如果加载后为空，放入队列末尾重试\r\n        var url = resInfo.url;\r\n        if (content == null) {\r\n            var errorCount = this._failRes[url] || 0;\r\n            if (errorCount < this.retryNum) {\r\n                console.warn(\"[warn]Retry to load:\", url);\r\n                this._failRes[url] = errorCount + 1;\r\n                _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].systemTimer.once(this.retryDelay, this, this._addReTry, [resInfo], false);\r\n                return;\r\n            }\r\n            else {\r\n                _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].clearRes(url); //使用create加载失败需要清除资源\r\n                console.warn(\"[error]Failed to load:\", url);\r\n                this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].ERROR, url);\r\n            }\r\n        }\r\n        if (this._failRes[url])\r\n            this._failRes[url] = 0;\r\n        delete LoaderManager._resMap[url];\r\n        if (resInfo.originalUrl) {\r\n            content = _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].getRes(resInfo.originalUrl);\r\n        }\r\n        resInfo.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].COMPLETE, content);\r\n        resInfo.offAll();\r\n        this._infoPool.push(resInfo);\r\n        this._statInfo.loaded++;\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].PROGRESS, this.getProgress());\r\n    }\r\n    _addReTry(resInfo) {\r\n        this._resInfos[this._maxPriority - 1].push(resInfo);\r\n        this._next();\r\n    }\r\n    /**\r\n     * 清理指定资源地址缓存。\r\n     * @param\turl 资源地址。\r\n     */\r\n    clearRes(url) {\r\n        _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].clearRes(url);\r\n    }\r\n    /**\r\n     * 销毁Texture使用的图片资源，保留texture壳，如果下次渲染的时候，发现texture使用的图片资源不存在，则会自动恢复\r\n     * 相比clearRes，clearTextureRes只是清理texture里面使用的图片资源，并不销毁texture，再次使用到的时候会自动恢复图片资源\r\n     * 而clearRes会彻底销毁texture，导致不能再使用；clearTextureRes能确保立即销毁图片资源，并且不用担心销毁错误，clearRes则采用引用计数方式销毁\r\n     * 【注意】如果图片本身在自动合集里面（默认图片小于512*512），内存是不能被销毁的，此图片被大图合集管理器管理\r\n     * @param\turl\t图集地址或者texture地址，比如 Loader.clearTextureRes(\"res/atlas/comp.atlas\"); Loader.clearTextureRes(\"hall/bg.jpg\");\r\n     */\r\n    clearTextureRes(url) {\r\n        _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].clearTextureRes(url);\r\n    }\r\n    /**\r\n     * 获取指定资源地址的资源。\r\n     * @param\turl 资源地址。\r\n     * @return\t返回资源。\r\n     */\r\n    getRes(url) {\r\n        return _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].getRes(url);\r\n    }\r\n    /**\r\n     * 缓存资源。\r\n     * @param\turl 资源地址。\r\n     * @param\tdata 要缓存的内容。\r\n     */\r\n    cacheRes(url, data) {\r\n        _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].cacheRes(url, data);\r\n    }\r\n    /**\r\n     * 设置资源分组。\r\n     * @param url 资源地址。\r\n     * @param group 分组名\r\n     */\r\n    setGroup(url, group) {\r\n        _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].setGroup(url, group);\r\n    }\r\n    /**\r\n     * 根据分组清理资源。\r\n     * @param group 分组名\r\n     */\r\n    clearResByGroup(group) {\r\n        _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].clearResByGroup(group);\r\n    }\r\n    /**\r\n     * @private\r\n     * 缓存资源。\r\n     * @param\turl 资源地址。\r\n     * @param\tdata 要缓存的内容。\r\n     */\r\n    static cacheRes(url, data) {\r\n        _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].cacheRes(url, data);\r\n    }\r\n    /** 清理当前未完成的加载，所有未加载的内容全部停止加载。*/\r\n    clearUnLoaded() {\r\n        //回收Handler\r\n        for (var i = 0; i < this._maxPriority; i++) {\r\n            var infos = this._resInfos[i];\r\n            for (var j = infos.length - 1; j > -1; j--) {\r\n                var info = infos[j];\r\n                if (info) {\r\n                    info.offAll();\r\n                    this._infoPool.push(info);\r\n                }\r\n            }\r\n            infos.length = 0;\r\n        }\r\n        this._loaderCount = 0;\r\n        LoaderManager._resMap = {};\r\n    }\r\n    /**\r\n     * 根据地址集合清理掉未加载的内容\r\n     * @param\turls 资源地址集合\r\n     */\r\n    cancelLoadByUrls(urls) {\r\n        if (!urls)\r\n            return;\r\n        for (var i = 0, n = urls.length; i < n; i++) {\r\n            this.cancelLoadByUrl(urls[i]);\r\n        }\r\n    }\r\n    /**\r\n     * 根据地址清理掉未加载的内容\r\n     * @param\turl 资源地址\r\n     */\r\n    cancelLoadByUrl(url) {\r\n        for (var i = 0; i < this._maxPriority; i++) {\r\n            var infos = this._resInfos[i];\r\n            for (var j = infos.length - 1; j > -1; j--) {\r\n                var info = infos[j];\r\n                if (info && info.url === url) {\r\n                    infos[j] = null;\r\n                    info.offAll();\r\n                    this._infoPool.push(info);\r\n                }\r\n            }\r\n        }\r\n        if (LoaderManager._resMap[url])\r\n            delete LoaderManager._resMap[url];\r\n    }\r\n    /**\r\n     * @private\r\n     * 加载数组里面的资源。\r\n     * @param arr 简单：[\"a.png\",\"b.png\"]，复杂[{url:\"a.png\",type:Loader.IMAGE,size:100,priority:1,useWorkerLoader:true},{url:\"b.json\",type:Loader.JSON,size:50,priority:1}]*/\r\n    _loadAssets(arr, complete = null, progress = null, type = null, priority = 1, cache = true, group = null) {\r\n        var itemCount = arr.length;\r\n        var loadedCount = 0;\r\n        var totalSize = 0;\r\n        var items = [];\r\n        var success = true;\r\n        for (var i = 0; i < itemCount; i++) {\r\n            var item = arr[i];\r\n            if (item instanceof String)\r\n                item = { url: item, type: type, size: 1, priority: priority };\r\n            if (!item.size)\r\n                item.size = 1;\r\n            item.progress = 0;\r\n            totalSize += item.size;\r\n            items.push(item);\r\n            var progressHandler = progress ? _utils_Handler__WEBPACK_IMPORTED_MODULE_9__[\"Handler\"].create(null, loadProgress, [item], false) : null;\r\n            var completeHandler = (complete || progress) ? _utils_Handler__WEBPACK_IMPORTED_MODULE_9__[\"Handler\"].create(null, loadComplete, [item]) : null;\r\n            this.load(item.url, completeHandler, progressHandler, item.type, item.priority || 1, cache, item.group || group, false, item.useWorkerLoader);\r\n        }\r\n        function loadComplete(item, content = null) {\r\n            loadedCount++;\r\n            item.progress = 1;\r\n            if (!content)\r\n                success = false;\r\n            if (loadedCount === itemCount && complete) {\r\n                complete.runWith(success);\r\n            }\r\n        }\r\n        function loadProgress(item, value) {\r\n            if (progress != null) {\r\n                item.progress = value;\r\n                var num = 0;\r\n                for (var j = 0; j < items.length; j++) {\r\n                    var item1 = items[j];\r\n                    num += item1.size * item1.progress;\r\n                }\r\n                var v = num / totalSize;\r\n                progress.runWith(v);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * 解码Texture或者图集\r\n     * @param\turls texture地址或者图集地址集合\r\n     */\r\n    //TODO:TESTs\r\n    decodeBitmaps(urls) {\r\n        var i, len = urls.length;\r\n        var ctx;\r\n        //ctx = Browser.context;\r\n        ctx = _renders_Render__WEBPACK_IMPORTED_MODULE_5__[\"Render\"]._context;\r\n        //经测试需要画到主画布上才能只解码一次\r\n        //当前用法下webgl模式会报错\r\n        for (i = 0; i < len; i++) {\r\n            var atlas;\r\n            atlas = _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].getAtlas(urls[i]);\r\n            if (atlas) {\r\n                this._decodeTexture(atlas[0], ctx);\r\n            }\r\n            else {\r\n                var tex;\r\n                tex = this.getRes(urls[i]);\r\n                if (tex && tex instanceof _resource_Texture__WEBPACK_IMPORTED_MODULE_7__[\"Texture\"]) {\r\n                    this._decodeTexture(tex, ctx);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _decodeTexture(tex, ctx) {\r\n        var bitmap = tex.bitmap;\r\n        if (!tex || !bitmap)\r\n            return;\r\n        var tImg = bitmap.source || bitmap.image;\r\n        if (!tImg)\r\n            return;\r\n        if (tImg instanceof _utils_Browser__WEBPACK_IMPORTED_MODULE_8__[\"Browser\"].window.HTMLImageElement) {\r\n            ctx.drawImage(tImg, 0, 0, 1, 1);\r\n            var info = ctx.getImageData(0, 0, 1, 1);\r\n        }\r\n    }\r\n}\r\n/**@private */\r\nLoaderManager._resMap = {};\r\n/**@private */\r\nLoaderManager.createMap = { atlas: [null, _Loader__WEBPACK_IMPORTED_MODULE_4__[\"Loader\"].ATLAS] };\r\nclass ResInfo extends _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_3__[\"EventDispatcher\"] {\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/net/LoaderManager.ts?");

/***/ }),

/***/ "./src/core/laya/net/LocalStorage.ts":
/*!*******************************************!*\
  !*** ./src/core/laya/net/LocalStorage.ts ***!
  \*******************************************/
/*! exports provided: LocalStorage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LocalStorage\", function() { return LocalStorage; });\n/**\r\n     * <p> <code>LocalStorage</code> 类用于没有时间限制的数据存储。</p>\r\n     */\r\nclass LocalStorage {\r\n    static __init__() {\r\n        if (!LocalStorage._baseClass) {\r\n            LocalStorage._baseClass = Storage;\r\n            Storage.init();\r\n        }\r\n        Storage.items;\r\n        LocalStorage.items = LocalStorage._baseClass.items;\r\n        LocalStorage.support = LocalStorage._baseClass.support;\r\n        return LocalStorage.support;\r\n    }\r\n    /**\r\n     * 存储指定键名和键值，字符串类型。\r\n     * @param key 键名。\r\n     * @param value 键值。\r\n     */\r\n    static setItem(key, value) {\r\n        LocalStorage._baseClass.setItem(key, value);\r\n    }\r\n    /**\r\n     * 获取指定键名的值。\r\n     * @param key 键名。\r\n     * @return 字符串型值。\r\n     */\r\n    static getItem(key) {\r\n        return LocalStorage._baseClass.getItem(key);\r\n    }\r\n    /**\r\n     * 存储指定键名及其对应的 <code>Object</code> 类型值。\r\n     * @param key 键名。\r\n     * @param value 键值。是 <code>Object</code> 类型，此致会被转化为 JSON 字符串存储。\r\n     */\r\n    static setJSON(key, value) {\r\n        LocalStorage._baseClass.setJSON(key, value);\r\n    }\r\n    /**\r\n     * 获取指定键名对应的 <code>Object</code> 类型值。\r\n     * @param key 键名。\r\n     * @return <code>Object</code> 类型值\r\n     */\r\n    static getJSON(key) {\r\n        return LocalStorage._baseClass.getJSON(key);\r\n    }\r\n    /**\r\n     * 删除指定键名的信息。\r\n     * @param key 键名。\r\n     */\r\n    static removeItem(key) {\r\n        LocalStorage._baseClass.removeItem(key);\r\n    }\r\n    /**\r\n     * 清除本地存储信息。\r\n     */\r\n    static clear() {\r\n        LocalStorage._baseClass.clear();\r\n    }\r\n}\r\n/**\r\n * 表示是否支持  <code>LocalStorage</code>。\r\n */\r\nLocalStorage.support = false;\r\nclass Storage {\r\n    static init() {\r\n        try {\r\n            Storage.support = true;\r\n            Storage.items = window.localStorage;\r\n            Storage.setItem('laya', '1');\r\n            Storage.removeItem('laya');\r\n        }\r\n        catch (e) {\r\n            Storage.support = false;\r\n        }\r\n        if (!Storage.support)\r\n            console.log('LocalStorage is not supprot or browser is private mode.');\r\n    }\r\n    /**\r\n     * 存储指定键名和键值，字符串类型。\r\n     * @param key 键名。\r\n     * @param value 键值。\r\n     */\r\n    static setItem(key, value) {\r\n        try {\r\n            Storage.support && Storage.items.setItem(key, value);\r\n        }\r\n        catch (e) {\r\n            console.warn(\"set localStorage failed\", e);\r\n        }\r\n    }\r\n    /**\r\n     * 获取指定键名的值。\r\n     * @param key 键名。\r\n     * @return 字符串型值。\r\n     */\r\n    static getItem(key) {\r\n        return Storage.support ? Storage.items.getItem(key) : null;\r\n    }\r\n    /**\r\n     * 存储指定键名和它的 <code>Object</code> 类型值。\r\n     * @param key 键名。\r\n     * @param value 键值。是 <code>Object</code> 类型，此致会被转化为 JSON 字符串存储。\r\n     */\r\n    static setJSON(key, value) {\r\n        try {\r\n            Storage.support && Storage.items.setItem(key, JSON.stringify(value));\r\n        }\r\n        catch (e) {\r\n            console.warn(\"set localStorage failed\", e);\r\n        }\r\n    }\r\n    /**\r\n     * 获取指定键名的 <code>Object</code> 类型值。\r\n     * @param key 键名。\r\n     * @return <code>Object</code> 类型值\r\n     */\r\n    static getJSON(key) {\r\n        return JSON.parse(Storage.support ? Storage.items.getItem(key) : null);\r\n    }\r\n    /**\r\n     * 删除指定键名的信息。\r\n     * @param key 键名。\r\n     */\r\n    static removeItem(key) {\r\n        Storage.support && Storage.items.removeItem(key);\r\n    }\r\n    /**\r\n     * 清除本地存储信息。\r\n     */\r\n    static clear() {\r\n        Storage.support && Storage.items.clear();\r\n    }\r\n}\r\n/**\r\n * 表示是否支持  <code>LocalStorage</code>。\r\n */\r\nStorage.support = false;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/net/LocalStorage.ts?");

/***/ }),

/***/ "./src/core/laya/net/SceneLoader.ts":
/*!******************************************!*\
  !*** ./src/core/laya/net/SceneLoader.ts ***!
  \******************************************/
/*! exports provided: SceneLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SceneLoader\", function() { return SceneLoader; });\n/* harmony import */ var _Loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Loader */ \"./src/core/laya/net/Loader.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _AtlasInfoManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ././AtlasInfoManager */ \"./src/core/laya/net/AtlasInfoManager.ts\");\n/* harmony import */ var _LoaderManager__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ././LoaderManager */ \"./src/core/laya/net/LoaderManager.ts\");\n/* harmony import */ var _components_Prefab__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/Prefab */ \"./src/core/laya/components/Prefab.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../events/EventDispatcher */ \"./src/core/laya/events/EventDispatcher.ts\");\n/* harmony import */ var _utils_Handler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/Handler */ \"./src/core/laya/utils/Handler.ts\");\n/* harmony import */ var _utils_Utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/Utils */ \"./src/core/laya/utils/Utils.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * 场景资源加载器\r\n */\r\nclass SceneLoader extends _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_6__[\"EventDispatcher\"] {\r\n    constructor() {\r\n        super();\r\n        this._completeHandler = new _utils_Handler__WEBPACK_IMPORTED_MODULE_7__[\"Handler\"](this, this.onOneLoadComplete);\r\n        this.reset();\r\n    }\r\n    reset() {\r\n        this._toLoadList = [];\r\n        this._isLoading = false;\r\n        this.totalCount = 0;\r\n    }\r\n    get leftCount() {\r\n        if (this._isLoading)\r\n            return this._toLoadList.length + 1;\r\n        return this._toLoadList.length;\r\n    }\r\n    get loadedCount() {\r\n        return this.totalCount - this.leftCount;\r\n    }\r\n    load(url, is3D = false, ifCheck = true) {\r\n        if (url instanceof Array) {\r\n            var i, len;\r\n            len = url.length;\r\n            for (i = 0; i < len; i++) {\r\n                this._addToLoadList(url[i], is3D);\r\n            }\r\n        }\r\n        else {\r\n            this._addToLoadList(url, is3D);\r\n        }\r\n        if (ifCheck)\r\n            this._checkNext();\r\n    }\r\n    _addToLoadList(url, is3D = false) {\r\n        if (this._toLoadList.indexOf(url) >= 0)\r\n            return;\r\n        if (_Loader__WEBPACK_IMPORTED_MODULE_0__[\"Loader\"].getRes(url))\r\n            return;\r\n        if (is3D) {\r\n            this._toLoadList.push({ url: url });\r\n        }\r\n        else\r\n            this._toLoadList.push(url);\r\n        this.totalCount++;\r\n    }\r\n    _checkNext() {\r\n        if (!this._isLoading) {\r\n            if (this._toLoadList.length == 0) {\r\n                this.event(_events_Event__WEBPACK_IMPORTED_MODULE_5__[\"Event\"].COMPLETE);\r\n                return;\r\n            }\r\n            var tItem;\r\n            tItem = this._toLoadList.pop();\r\n            if (tItem instanceof String) {\r\n                this.loadOne(tItem);\r\n            }\r\n            else {\r\n                this.loadOne(tItem.url, true);\r\n            }\r\n        }\r\n    }\r\n    loadOne(url, is3D = false) {\r\n        this._curUrl = url;\r\n        var type = _utils_Utils__WEBPACK_IMPORTED_MODULE_8__[\"Utils\"].getFileExtension(this._curUrl);\r\n        if (is3D) {\r\n            _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].loader.create(url, this._completeHandler);\r\n        }\r\n        else if (SceneLoader.LoadableExtensions[type]) {\r\n            _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].loader.load(url, this._completeHandler, null, SceneLoader.LoadableExtensions[type]);\r\n        }\r\n        else if (url != _AtlasInfoManager__WEBPACK_IMPORTED_MODULE_2__[\"AtlasInfoManager\"].getFileLoadPath(url) || SceneLoader.No3dLoadTypes[type] || !_LoaderManager__WEBPACK_IMPORTED_MODULE_3__[\"LoaderManager\"].createMap[type]) {\r\n            _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].loader.load(url, this._completeHandler);\r\n        }\r\n        else {\r\n            _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].loader.create(url, this._completeHandler);\r\n        }\r\n    }\r\n    onOneLoadComplete() {\r\n        this._isLoading = false;\r\n        if (!_Loader__WEBPACK_IMPORTED_MODULE_0__[\"Loader\"].getRes(this._curUrl)) {\r\n            console.log(\"Fail to load:\", this._curUrl);\r\n        }\r\n        var type = _utils_Utils__WEBPACK_IMPORTED_MODULE_8__[\"Utils\"].getFileExtension(this._curUrl);\r\n        if (SceneLoader.LoadableExtensions[type]) {\r\n            var dataO;\r\n            dataO = _Loader__WEBPACK_IMPORTED_MODULE_0__[\"Loader\"].getRes(this._curUrl);\r\n            if (dataO && (dataO instanceof _components_Prefab__WEBPACK_IMPORTED_MODULE_4__[\"Prefab\"])) {\r\n                dataO = dataO.json;\r\n            }\r\n            if (dataO) {\r\n                if (dataO.loadList) {\r\n                    this.load(dataO.loadList, false, false);\r\n                }\r\n                if (dataO.loadList3D) {\r\n                    this.load(dataO.loadList3D, true, false);\r\n                }\r\n            }\r\n        }\r\n        if (type == \"sk\") {\r\n            this.load(this._curUrl.replace(\".sk\", \".png\"), false, false);\r\n        }\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_5__[\"Event\"].PROGRESS, this.getProgress());\r\n        this._checkNext();\r\n    }\r\n    getProgress() {\r\n        return this.loadedCount / this.totalCount;\r\n    }\r\n}\r\nSceneLoader.LoadableExtensions = { \"scene\": _Loader__WEBPACK_IMPORTED_MODULE_0__[\"Loader\"].JSON, \"scene3d\": _Loader__WEBPACK_IMPORTED_MODULE_0__[\"Loader\"].JSON, \"ani\": _Loader__WEBPACK_IMPORTED_MODULE_0__[\"Loader\"].JSON, \"ui\": _Loader__WEBPACK_IMPORTED_MODULE_0__[\"Loader\"].JSON, \"prefab\": _Loader__WEBPACK_IMPORTED_MODULE_0__[\"Loader\"].PREFAB };\r\nSceneLoader.No3dLoadTypes = { \"png\": true, \"jpg\": true, \"txt\": true };\r\n\n\n//# sourceURL=webpack:///./src/core/laya/net/SceneLoader.ts?");

/***/ }),

/***/ "./src/core/laya/net/TTFLoader.ts":
/*!****************************************!*\
  !*** ./src/core/laya/net/TTFLoader.ts ***!
  \****************************************/
/*! exports provided: TTFLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TTFLoader\", function() { return TTFLoader; });\n/* harmony import */ var _HttpRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././HttpRequest */ \"./src/core/laya/net/HttpRequest.ts\");\n/* harmony import */ var _Loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././Loader */ \"./src/core/laya/net/Loader.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _utils_RunDriver__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/RunDriver */ \"./src/core/laya/utils/RunDriver.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n */\r\nclass TTFLoader {\r\n    //TODO:coverage\r\n    load(fontPath) {\r\n        this._url = fontPath;\r\n        var tArr = fontPath.split(\".ttf\")[0].split(\"/\");\r\n        this.fontName = tArr[tArr.length - 1];\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp) {\r\n            this._loadConch();\r\n        }\r\n        else if (_utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].window.FontFace) {\r\n            this._loadWithFontFace();\r\n        }\r\n        else {\r\n            this._loadWithCSS();\r\n        }\r\n    }\r\n    //TODO:coverage\r\n    _loadConch() {\r\n        this._http = new _HttpRequest__WEBPACK_IMPORTED_MODULE_0__[\"HttpRequest\"]();\r\n        this._http.on(_events_Event__WEBPACK_IMPORTED_MODULE_3__[\"Event\"].ERROR, this, this._onErr);\r\n        this._http.on(_events_Event__WEBPACK_IMPORTED_MODULE_3__[\"Event\"].COMPLETE, this, this._onHttpLoaded);\r\n        this._http.send(this._url, null, \"get\", _Loader__WEBPACK_IMPORTED_MODULE_1__[\"Loader\"].BUFFER);\r\n    }\r\n    //TODO:coverage\r\n    _onHttpLoaded(data = null) {\r\n        _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].window[\"conchTextCanvas\"].setFontFaceFromBuffer(this.fontName, data);\r\n        this._clearHttp();\r\n        this._complete();\r\n    }\r\n    //TODO:coverage\r\n    _clearHttp() {\r\n        if (this._http) {\r\n            this._http.off(_events_Event__WEBPACK_IMPORTED_MODULE_3__[\"Event\"].ERROR, this, this._onErr);\r\n            this._http.off(_events_Event__WEBPACK_IMPORTED_MODULE_3__[\"Event\"].COMPLETE, this, this._onHttpLoaded);\r\n            this._http = null;\r\n        }\r\n    }\r\n    //TODO:coverage\r\n    _onErr() {\r\n        this._clearHttp();\r\n        if (this.err) {\r\n            this.err.runWith(\"fail:\" + this._url);\r\n            this.err = null;\r\n        }\r\n    }\r\n    //TODO:coverage\r\n    _complete() {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].systemTimer.clear(this, this._complete);\r\n        _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].systemTimer.clear(this, this._checkComplete);\r\n        if (this._div && this._div.parentNode) {\r\n            this._div.parentNode.removeChild(this._div);\r\n            this._div = null;\r\n        }\r\n        if (this.complete) {\r\n            this.complete.runWith(this);\r\n            this.complete = null;\r\n        }\r\n    }\r\n    //TODO:coverage\r\n    _checkComplete() {\r\n        if (_utils_RunDriver__WEBPACK_IMPORTED_MODULE_6__[\"RunDriver\"].measureText(TTFLoader._testString, this._fontTxt).width != this._txtWidth) {\r\n            this._complete();\r\n        }\r\n    }\r\n    //TODO:coverage\r\n    _loadWithFontFace() {\r\n        var fontFace = new _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].window.FontFace(this.fontName, \"url('\" + this._url + \"')\");\r\n        _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].window.document.fonts.add(fontFace);\r\n        var self = this;\r\n        fontFace.loaded.then((function () {\r\n            self._complete();\r\n        }));\r\n        //_createDiv();\r\n        fontFace.load();\r\n    }\r\n    //TODO:coverage\r\n    _createDiv() {\r\n        this._div = _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].createElement(\"div\");\r\n        this._div.innerHTML = \"laya\";\r\n        var _style = this._div.style;\r\n        _style.fontFamily = this.fontName;\r\n        _style.position = \"absolute\";\r\n        _style.left = \"-100px\";\r\n        _style.top = \"-100px\";\r\n        _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].document.body.appendChild(this._div);\r\n    }\r\n    //TODO:coverage\r\n    _loadWithCSS() {\r\n        var fontStyle = _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].createElement(\"style\");\r\n        fontStyle.type = \"text/css\";\r\n        _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].document.body.appendChild(fontStyle);\r\n        fontStyle.textContent = \"@font-face { font-family:'\" + this.fontName + \"'; src:url('\" + this._url + \"');}\";\r\n        this._fontTxt = \"40px \" + this.fontName;\r\n        this._txtWidth = _utils_RunDriver__WEBPACK_IMPORTED_MODULE_6__[\"RunDriver\"].measureText(TTFLoader._testString, this._fontTxt).width;\r\n        var self = this;\r\n        fontStyle.onload = function () {\r\n            _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].systemTimer.once(10000, self, this._complete);\r\n        };\r\n        _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].systemTimer.loop(20, this, this._checkComplete);\r\n        this._createDiv();\r\n    }\r\n}\r\nTTFLoader._testString = \"LayaTTFFont\";\r\n\n\n//# sourceURL=webpack:///./src/core/laya/net/TTFLoader.ts?");

/***/ }),

/***/ "./src/core/laya/net/URL.ts":
/*!**********************************!*\
  !*** ./src/core/laya/net/URL.ts ***!
  \**********************************/
/*! exports provided: URL */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"URL\", function() { return URL; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n\r\n\r\n/**\r\n * <p><code>URL</code> 提供URL格式化，URL版本管理的类。</p>\r\n * <p>引擎加载资源的时候，会自动调用formatURL函数格式化URL路径</p>\r\n * <p>通过basePath属性可以设置网络基础路径</p>\r\n * <p>通过设置customFormat函数，可以自定义URL格式化的方式</p>\r\n * <p>除了默认的通过增加后缀的格式化外，通过VersionManager类，可以开启IDE提供的，基于目录的管理方式来替代 \"?v=\" 的管理方式</p>\r\n * @see laya.net.VersionManager\r\n */\r\nclass URL {\r\n    /**创建一个新的 <code>URL</code> 实例。*/\r\n    constructor(url) {\r\n        this._url = URL.formatURL(url);\r\n        this._path = URL.getPath(url);\r\n    }\r\n    /**格式化后的地址。*/\r\n    get url() {\r\n        return this._url;\r\n    }\r\n    /**地址的文件夹路径（不包括文件名）。*/\r\n    get path() {\r\n        return this._path;\r\n    }\r\n    static set basePath(value) {\r\n        URL._basePath = _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"]._getUrlPath(); //还原BaseURL为Index目录\r\n        URL._basePath = URL.formatURL(value);\r\n    }\r\n    /**基础路径。如果不设置，默认为当前网页的路径。最终地址将被格式化为 basePath+相对URL地址，*/\r\n    static get basePath() {\r\n        return URL._basePath;\r\n    }\r\n    /**\r\n     * 格式化指定的地址并返回。\r\n     * @param\turl 地址。\r\n     * @param\tbase 基础路径，如果没有，则使用basePath。\r\n     * @return\t格式化处理后的地址。\r\n     */\r\n    static formatURL(url) {\r\n        if (!url)\r\n            return \"null path\";\r\n        //如果是全路径，直接返回，提高性能\r\n        if (url.indexOf(\":\") > 0)\r\n            return url;\r\n        //自定义路径格式化\r\n        if (URL.customFormat != null)\r\n            url = URL.customFormat(url);\r\n        //如果是全路径，直接返回，提高性能\r\n        if (url.indexOf(\":\") > 0)\r\n            return url;\r\n        var char1 = url.charAt(0);\r\n        if (char1 === \".\") {\r\n            return URL._formatRelativePath(URL._basePath + url);\r\n        }\r\n        else if (char1 === '~') {\r\n            return URL.rootPath + url.substring(1);\r\n        }\r\n        else if (char1 === \"d\") {\r\n            if (url.indexOf(\"data:image\") === 0)\r\n                return url;\r\n        }\r\n        else if (char1 === \"/\") {\r\n            return url;\r\n        }\r\n        return URL._basePath + url;\r\n    }\r\n    /**\r\n     * @private\r\n     * 格式化相对路径。\r\n     */\r\n    static _formatRelativePath(value) {\r\n        var parts = value.split(\"/\");\r\n        for (var i = 0, len = parts.length; i < len; i++) {\r\n            if (parts[i] == '..') {\r\n                parts.splice(i - 1, 2);\r\n                i -= 2;\r\n            }\r\n        }\r\n        return parts.join('/');\r\n    }\r\n    /**\r\n     * 获取指定 URL 的文件夹路径（不包括文件名）。\r\n     * <p><b>注意：</b>末尾有斜杠（/）。</p>\r\n     * @param\turl url地址。\r\n     * @return  返回文件夹路径。\r\n     */\r\n    static getPath(url) {\r\n        var ofs = url.lastIndexOf('/');\r\n        return ofs > 0 ? url.substr(0, ofs + 1) : \"\";\r\n    }\r\n    /**\r\n     * 获取指定 URL 的文件名。\r\n     * @param\turl 地址。\r\n     * @return \t返回文件名。\r\n     */\r\n    static getFileName(url) {\r\n        var ofs = url.lastIndexOf('/');\r\n        return ofs > 0 ? url.substr(ofs + 1) : url;\r\n    }\r\n    /**\r\n     * @private 兼容微信\r\n     */\r\n    static getAdptedFilePath(url) {\r\n        if (!URL.exportSceneToJson || !url)\r\n            return url;\r\n        var i, len;\r\n        len = URL._adpteTypeList.length;\r\n        var tArr;\r\n        for (i = 0; i < len; i++) {\r\n            tArr = URL._adpteTypeList[i];\r\n            url = url.replace(tArr[0], tArr[1]);\r\n        }\r\n        return url;\r\n    }\r\n}\r\n/**URL地址版本映射表，比如{\"aaa/bb.png\":99,\"aaa/bb.png\":12}，默认情况下，通过formatURL格式化后，会自动生成为\"aaa/bb.png?v=99\"的一个地址*/\r\nURL.version = {};\r\n/**兼容微信不支持加载scene后缀场景，设置为true，则会把scene加载替换为json*/\r\nURL.exportSceneToJson = false;\r\n/**基础路径。如果不设置，默认为当前网页的路径。最终地址将被格式化为 basePath+相对URL地址，*/\r\nURL._basePath = \"\";\r\n/**root路径。只针对'~'类型的url路径有效*/\r\nURL.rootPath = \"\";\r\n/** 自定义URL格式化的方式。例如： customFormat = function(url:String):String{} */\r\nURL.customFormat = function (url) {\r\n    var newUrl = URL.version[url];\r\n    if (!_renders_Render__WEBPACK_IMPORTED_MODULE_1__[\"Render\"].isConchApp && newUrl)\r\n        url += \"?v=\" + newUrl;\r\n    return url;\r\n};\r\n/**\r\n * @private\r\n */\r\nURL._adpteTypeList = [[\".scene3d\", \".json\"], [\".scene\", \".json\"], [\".taa\", \".json\"], [\".prefab\", \".json\"]];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/net/URL.ts?");

/***/ }),

/***/ "./src/core/laya/net/WorkerLoader.ts":
/*!*******************************************!*\
  !*** ./src/core/laya/net/WorkerLoader.ts ***!
  \*******************************************/
/*! exports provided: WorkerLoader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WorkerLoader\", function() { return WorkerLoader; });\n/* harmony import */ var _Loader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Loader */ \"./src/core/laya/net/Loader.ts\");\n/* harmony import */ var _URL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././URL */ \"./src/core/laya/net/URL.ts\");\n/* harmony import */ var _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/EventDispatcher */ \"./src/core/laya/events/EventDispatcher.ts\");\n/* harmony import */ var _resource_HTMLCanvas__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../resource/HTMLCanvas */ \"./src/core/laya/resource/HTMLCanvas.ts\");\n/* harmony import */ var _resource_Texture2D__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../resource/Texture2D */ \"./src/core/laya/resource/Texture2D.ts\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * Worker Image加载器\r\n */\r\nclass WorkerLoader extends _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_2__[\"EventDispatcher\"] {\r\n    constructor() {\r\n        super();\r\n        this.worker = new Worker(WorkerLoader.workerPath);\r\n        this.worker.onmessage = function (evt) {\r\n            //接收worker传过来的数据函数\r\n            this.workerMessage(evt.data);\r\n        };\r\n    }\r\n    /**\r\n     * 尝试使用Work加载Image\r\n     * @return 是否启动成功\r\n     */\r\n    static __init__() {\r\n        if (WorkerLoader._preLoadFun != null)\r\n            return false;\r\n        if (!Worker)\r\n            return false;\r\n        WorkerLoader._preLoadFun = _Loader__WEBPACK_IMPORTED_MODULE_0__[\"Loader\"][\"prototype\"][\"_loadImage\"];\r\n        _Loader__WEBPACK_IMPORTED_MODULE_0__[\"Loader\"][\"prototype\"][\"_loadImage\"] = WorkerLoader[\"prototype\"][\"_loadImage\"];\r\n        if (!WorkerLoader.I)\r\n            WorkerLoader.I = new WorkerLoader();\r\n        return true;\r\n    }\r\n    /**\r\n     * 是否支持worker\r\n     * @return 是否支持worker\r\n     */\r\n    static workerSupported() {\r\n        return Worker ? true : false;\r\n    }\r\n    /**\r\n     * 尝试启用WorkerLoader,只有第一次调用有效\r\n     */\r\n    static enableWorkerLoader() {\r\n        if (!WorkerLoader._tryEnabled) {\r\n            WorkerLoader.enable = true;\r\n            WorkerLoader._tryEnabled = true;\r\n        }\r\n    }\r\n    /**\r\n     * 是否启用。\r\n     */\r\n    static set enable(value) {\r\n        if (WorkerLoader._enable != value) {\r\n            WorkerLoader._enable = value;\r\n            if (value && WorkerLoader._preLoadFun == null)\r\n                WorkerLoader._enable = WorkerLoader.__init__();\r\n        }\r\n    }\r\n    static get enable() {\r\n        return WorkerLoader._enable;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    workerMessage(data) {\r\n        if (data) {\r\n            switch (data.type) {\r\n                case \"Image\":\r\n                    this.imageLoaded(data);\r\n                    break;\r\n                case \"Disable\":\r\n                    WorkerLoader.enable = false;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    imageLoaded(data) {\r\n        if (!data.dataType || data.dataType != \"imageBitmap\") {\r\n            this.event(data.url, null);\r\n            return;\r\n        }\r\n        //TODO:\r\n        var canvas = new _resource_HTMLCanvas__WEBPACK_IMPORTED_MODULE_3__[\"HTMLCanvas\"](true);\r\n        var ctx = canvas.source.getContext(\"2d\");\r\n        switch (data.dataType) {\r\n            case \"imageBitmap\":\r\n                var imageData = data.imageBitmap;\r\n                canvas.size(imageData.width, imageData.height);\r\n                ctx.drawImage(imageData, 0, 0);\r\n                break;\r\n        }\r\n        console.log(\"load:\", data.url);\r\n        //避免被计算两次\r\n        canvas._setGPUMemory(0);\r\n        var tex = new _resource_Texture2D__WEBPACK_IMPORTED_MODULE_4__[\"Texture2D\"]();\r\n        tex.loadImageSource(canvas.source);\r\n        //canvas = tex;\r\n        this.event(data.url, tex);\r\n    }\r\n    /**\r\n     * 加载图片\r\n     * @param\turl 图片地址\r\n     */\r\n    loadImage(url) {\r\n        this.worker.postMessage(url);\r\n    }\r\n    /**\r\n     * @private\r\n     * 加载图片资源。\r\n     * @param\turl 资源地址。\r\n     */\r\n    _loadImage(url) {\r\n        var _this = this;\r\n        if (!this._useWorkerLoader || !WorkerLoader._enable) {\r\n            WorkerLoader._preLoadFun.call(_this, url);\r\n            return;\r\n        }\r\n        url = _URL__WEBPACK_IMPORTED_MODULE_1__[\"URL\"].formatURL(url);\r\n        function clear() {\r\n            WorkerLoader.I.off(url, _this, onload);\r\n        }\r\n        var onload = function (image) {\r\n            clear();\r\n            if (image) {\r\n                _this[\"onLoaded\"](image);\r\n            }\r\n            else {\r\n                //失败之后使用原版的加载函数加载重试\r\n                WorkerLoader._preLoadFun.call(_this, url);\r\n            }\r\n        };\r\n        WorkerLoader.I.on(url, _this, onload);\r\n        WorkerLoader.I.loadImage(url);\r\n    }\r\n}\r\n/**worker.js的路径 */\r\nWorkerLoader.workerPath = \"libs/workerloader.js\";\r\n/**@private */\r\nWorkerLoader._enable = false;\r\n/**@private */\r\nWorkerLoader._tryEnabled = false;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/net/WorkerLoader.ts?");

/***/ }),

/***/ "./src/core/laya/renders/LayaGLQuickRunner.ts":
/*!****************************************************!*\
  !*** ./src/core/laya/renders/LayaGLQuickRunner.ts ***!
  \****************************************************/
/*! exports provided: LayaGLQuickRunner */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LayaGLQuickRunner\", function() { return LayaGLQuickRunner; });\n/* harmony import */ var _Const__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Const */ \"./src/core/laya/Const.ts\");\n/* harmony import */ var _display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../display/SpriteConst */ \"./src/core/laya/display/SpriteConst.ts\");\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n\r\n\r\n\r\n/**\r\n * @private\r\n * 快速节点命令执行器\r\n * 多个指令组合才有意义，单个指令没必要在下面加\r\n */\r\nclass LayaGLQuickRunner {\r\n    static __init__() {\r\n        /*\r\n           glQuickMap[\"drawNode;\"] = drawNode;\r\n           glQuickMap[\"drawNodes;\"] = drawNodes;\r\n           glQuickMap[\"drawLayaGL;\"] = drawLayaGL;\r\n           glQuickMap[\"drawLayaGL;drawNodes;\"] = drawLayaGL_drawNodes;\r\n           glQuickMap[\"save;alpha;drawNode;restore;\"] = save_alpha_drawNode_restore;\r\n           glQuickMap[\"save;alpha;drawLayaGL;restore;\"] = save_alpha_drawLayaGL_restore;\r\n         */\r\n        //glQuickMap[\"save;alpha;drawTextureWithGr;restore;\"] = save_alpha_drawTextureWithGr_restore;\r\n        //glQuickMap[\"save;transform;drawTextureWithGr;restore;\"] = save_alpha_transform_drawTextureWithGr_restore;\r\n        //glQuickMap[\"save;alpha;transform;drawTextureWithGr;restore;\"] = save_alpha_transform_drawTextureWithGr_restore;\r\n        //glQuickMap[\"drawTextureWithGr;\"] = drawTextureWithGr;\r\n        //glQuickMap[\"save;transform;drawNodes;restore;\"] = save_transform_drawNodes_restore;\r\n        //glQuickMap[\"save;transform;drawLayaGL;restore;\"] = save_alpha_transform_drawLayaGL_restore;\r\n        //glQuickMap[\"save;alpha;transform;drawLayaGL;restore;\"] = save_alpha_transform_drawLayaGL_restore;\r\n        //glQuickMap[\"save;alpha;transform;drawLayaGL;restore;\"] = save_alpha_transform_drawLayaGL_restore;\r\n        //map[SpriteConst.TEXTURE] = _drawTexture;\r\n        LayaGLQuickRunner.map[_display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].ALPHA | _display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].TRANSFORM | _display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].GRAPHICS] = LayaGLQuickRunner.alpha_transform_drawLayaGL;\r\n        //map[ SpriteConst.GRAPHICS] = _drawLayaGL;\r\n        LayaGLQuickRunner.map[_display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].ALPHA | _display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].GRAPHICS] = LayaGLQuickRunner.alpha_drawLayaGL;\r\n        LayaGLQuickRunner.map[_display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].TRANSFORM | _display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].GRAPHICS] = LayaGLQuickRunner.transform_drawLayaGL;\r\n        LayaGLQuickRunner.map[_display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].TRANSFORM | _display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].CHILDS] = LayaGLQuickRunner.transform_drawNodes;\r\n        LayaGLQuickRunner.map[_display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].ALPHA | _display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].TRANSFORM | _display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].TEXTURE] = LayaGLQuickRunner.alpha_transform_drawTexture;\r\n        LayaGLQuickRunner.map[_display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].ALPHA | _display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].TEXTURE] = LayaGLQuickRunner.alpha_drawTexture;\r\n        LayaGLQuickRunner.map[_display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].TRANSFORM | _display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].TEXTURE] = LayaGLQuickRunner.transform_drawTexture;\r\n        LayaGLQuickRunner.map[_display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].GRAPHICS | _display_SpriteConst__WEBPACK_IMPORTED_MODULE_1__[\"SpriteConst\"].CHILDS] = LayaGLQuickRunner.drawLayaGL_drawNodes;\r\n    }\r\n    static transform_drawTexture(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        var tex = sprite.texture;\r\n        /*\r\n        var ctx:WebGLContext2D = context as WebGLContext2D;\r\n        var ctxm:Matrix = ctx._curMat;\r\n        ctxm.copyTo(curMat);\r\n        //context.saveTransform(curMat);\r\n        ctx.transformByMatrixNoSave(sprite.getTransform(), x, y);\r\n        ctx.drawTexture(tex, -style.pivotX, -style.pivotY, sprite._width || tex.width, sprite._height || tex.height);\r\n        curMat.copyTo(ctxm);\r\n        //ctx.restoreTransform(curMat);\r\n        */\r\n        context.saveTransform(LayaGLQuickRunner.curMat);\r\n        context.transformByMatrix(sprite.transform, x, y);\r\n        context.drawTexture(tex, -sprite.pivotX, -sprite.pivotY, sprite._width || tex.width, sprite._height || tex.height);\r\n        context.restoreTransform(LayaGLQuickRunner.curMat);\r\n        /*\r\n        context.saveTransform(curMat);\r\n        var w:int = sprite._width || tex.width;\r\n        var h:int = sprite._height || tex.height;\r\n        var mat:Matrix = sprite.transform;// (sprite as Object)._tfChanged?(sprite as Object)._adjustTransform():(sprite as Object)._transform;\r\n        mat.tx += x; mat.ty += y;\r\n        //(context as WebGLContext2D).drawTextureWithTransform(tex, -style.pivotX, -style.pivotY, w, h,mat,x,y,1,null,null);\r\n        \r\n        var ctx:WebGLContext2D = context;\r\n        var curMat:Matrix = ctx._curMat;\r\n        var tmpMat:Matrix = ctx._tmpMatrix;\r\n        var transform = mat;\r\n        //克隆transform,因为要应用tx，ty，这里不能修改原始的transform\r\n        tmpMat.a = transform.a; tmpMat.b = transform.b; tmpMat.c = transform.c; tmpMat.d = transform.d; tmpMat.tx = transform.tx + x; tmpMat.ty = transform.ty + y;\r\n        tmpMat._bTransform = transform._bTransform;\r\n        if (transform && curMat._bTransform) {\r\n            Matrix.mul(tmpMat, curMat, tmpMat);\r\n            transform = tmpMat;\r\n            transform._bTransform = true;\r\n        }else {\r\n            //如果curmat没有旋转。\r\n            transform = tmpMat;\r\n        }\r\n        ctx._drawTextureM(tex, x, y, w,h, mat, 1,null);\r\n        \r\n        //var st = __JS__(\"performance.now()\");\r\n        //Laya.stage.perfdt += (__JS__(\"performance.now()\")-st);\r\n        context.restoreTransform(curMat);\r\n        */\r\n    }\r\n    //static public function _drawTexture(sprite:Sprite, context:Context, x:Number, y:Number):void {\r\n    //var tex:Texture = sprite.texture;\r\n    //context.drawTexture(tex, x-sprite.pivotX, y-sprite.pivotY, sprite._width || tex.width, sprite._height || tex.height);\r\n    //}\r\n    static alpha_drawTexture(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        var alpha;\r\n        var tex = sprite.texture;\r\n        if ((alpha = style.alpha) > 0.01 || sprite._needRepaint()) {\r\n            var temp = context.globalAlpha;\r\n            context.globalAlpha *= alpha;\r\n            context.drawTexture(tex, x - style.pivotX + tex.offsetX, y - style.pivotY + tex.offsetY, sprite._width || tex.width, sprite._height || tex.height);\r\n            context.globalAlpha = temp;\r\n        }\r\n    }\r\n    static alpha_transform_drawTexture(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        var alpha;\r\n        var tex = sprite.texture;\r\n        if ((alpha = style.alpha) > 0.01 || sprite._needRepaint()) {\r\n            var temp = context.globalAlpha;\r\n            context.globalAlpha *= alpha;\r\n            context.saveTransform(LayaGLQuickRunner.curMat);\r\n            context.transformByMatrix(sprite.transform, x, y);\r\n            context.drawTexture(tex, -style.pivotX + tex.offsetX, -style.pivotY + tex.offsetY, sprite._width || tex.width, sprite._height || tex.height);\r\n            context.restoreTransform(LayaGLQuickRunner.curMat);\r\n            context.globalAlpha = temp;\r\n        }\r\n    }\r\n    static alpha_transform_drawLayaGL(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        var alpha;\r\n        if ((alpha = style.alpha) > 0.01 || sprite._needRepaint()) {\r\n            var temp = context.globalAlpha;\r\n            context.globalAlpha *= alpha;\r\n            context.saveTransform(LayaGLQuickRunner.curMat);\r\n            context.transformByMatrix(sprite.transform, x, y);\r\n            sprite._graphics && sprite._graphics._render(sprite, context, -style.pivotX, -style.pivotY);\r\n            context.restoreTransform(LayaGLQuickRunner.curMat);\r\n            context.globalAlpha = temp;\r\n        }\r\n    }\r\n    static alpha_drawLayaGL(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        var alpha;\r\n        if ((alpha = style.alpha) > 0.01 || sprite._needRepaint()) {\r\n            var temp = context.globalAlpha;\r\n            context.globalAlpha *= alpha;\r\n            sprite._graphics && sprite._graphics._render(sprite, context, x - style.pivotX, y - style.pivotY);\r\n            context.globalAlpha = temp;\r\n        }\r\n    }\r\n    //static public function _drawLayaGL(sprite:Sprite, context:Context, x:Number, y:Number):void {\r\n    //sprite._graphics._render(sprite, context, x, y);\r\n    //}\t\t\r\n    static transform_drawLayaGL(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        //var transform:Matrix = sprite.transform;\r\n        //临时\r\n        //if (transform) {\r\n        context.saveTransform(LayaGLQuickRunner.curMat);\r\n        context.transformByMatrix(sprite.transform, x, y);\r\n        sprite._graphics && sprite._graphics._render(sprite, context, -style.pivotX, -style.pivotY);\r\n        context.restoreTransform(LayaGLQuickRunner.curMat);\r\n        //}else {\r\n        //sprite._graphics && sprite._graphics._render(sprite, context, -style.pivotX, -style.pivotY);\r\n        //}\t\t\t\r\n    }\r\n    static transform_drawNodes(sprite, context, x, y) {\r\n        //var transform:Matrix = sprite.transform;\r\n        var textLastRender = sprite._getBit(_Const__WEBPACK_IMPORTED_MODULE_0__[\"Const\"].DRAWCALL_OPTIMIZE) && context.drawCallOptimize(true);\r\n        var style = sprite._style;\r\n        context.saveTransform(LayaGLQuickRunner.curMat);\r\n        context.transformByMatrix(sprite.transform, x, y);\r\n        //x = x-style.pivotX;\r\n        //y = y - style.pivotY;\r\n        x = -style.pivotX;\r\n        y = -style.pivotY;\r\n        var childs = sprite._children, n = childs.length, ele;\r\n        if (style.viewport) {\r\n            var rect = style.viewport;\r\n            var left = rect.x;\r\n            var top = rect.y;\r\n            var right = rect.right;\r\n            var bottom = rect.bottom;\r\n            var _x, _y;\r\n            for (i = 0; i < n; ++i) {\r\n                if ((ele = childs[i])._visible && ((_x = ele._x) < right && (_x + ele.width) > left && (_y = ele._y) < bottom && (_y + ele.height) > top)) {\r\n                    ele.render(context, x, y);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < n; ++i)\r\n                (ele = childs[i])._visible && ele.render(context, x, y);\r\n        }\r\n        context.restoreTransform(LayaGLQuickRunner.curMat);\r\n        textLastRender && context.drawCallOptimize(false);\r\n    }\r\n    static drawLayaGL_drawNodes(sprite, context, x, y) {\r\n        var textLastRender = sprite._getBit(_Const__WEBPACK_IMPORTED_MODULE_0__[\"Const\"].DRAWCALL_OPTIMIZE) && context.drawCallOptimize(true);\r\n        var style = sprite._style;\r\n        x = x - style.pivotX;\r\n        y = y - style.pivotY;\r\n        sprite._graphics && sprite._graphics._render(sprite, context, x, y);\r\n        var childs = sprite._children, n = childs.length, ele;\r\n        if (style.viewport) {\r\n            var rect = style.viewport;\r\n            var left = rect.x;\r\n            var top = rect.y;\r\n            var right = rect.right;\r\n            var bottom = rect.bottom;\r\n            var _x, _y;\r\n            for (i = 0; i < n; ++i) {\r\n                if ((ele = childs[i])._visible && ((_x = ele._x) < right && (_x + ele.width) > left && (_y = ele._y) < bottom && (_y + ele.height) > top)) {\r\n                    ele.render(context, x, y);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < n; ++i)\r\n                (ele = childs[i])._visible && ele.render(context, x, y);\r\n        }\r\n        textLastRender && context.drawCallOptimize(false);\r\n    }\r\n}\r\n/*[FILEINDEX:10000]*/\r\nLayaGLQuickRunner.map = {};\r\nLayaGLQuickRunner.curMat = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_2__[\"Matrix\"]();\r\n\n\n//# sourceURL=webpack:///./src/core/laya/renders/LayaGLQuickRunner.ts?");

/***/ }),

/***/ "./src/core/laya/renders/Render.ts":
/*!*****************************************!*\
  !*** ./src/core/laya/renders/Render.ts ***!
  \*****************************************/
/*! exports provided: Render */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Render\", function() { return Render; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../Config */ \"./src/core/Config.ts\");\n/* harmony import */ var _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../layagl/LayaGL */ \"./src/core/laya/layagl/LayaGL.ts\");\n/* harmony import */ var _resource_Context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../resource/Context */ \"./src/core/laya/resource/Context.ts\");\n/* harmony import */ var _system_System__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../system/System */ \"./src/core/laya/system/System.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _webgl_WebGL__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../webgl/WebGL */ \"./src/core/laya/webgl/WebGL.ts\");\n/* harmony import */ var _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../webgl/WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n/* harmony import */ var _webgl_canvas_BlendMode__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../webgl/canvas/BlendMode */ \"./src/core/laya/webgl/canvas/BlendMode.ts\");\n/* harmony import */ var _webgl_shader_d2_Shader2D__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../webgl/shader/d2/Shader2D */ \"./src/core/laya/webgl/shader/d2/Shader2D.ts\");\n/* harmony import */ var _webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../webgl/shader/d2/ShaderDefines2D */ \"./src/core/laya/webgl/shader/d2/ShaderDefines2D.ts\");\n/* harmony import */ var _webgl_shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../webgl/shader/d2/value/Value2D */ \"./src/core/laya/webgl/shader/d2/value/Value2D.ts\");\n/* harmony import */ var _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../webgl/submit/SubmitBase */ \"./src/core/laya/webgl/submit/SubmitBase.ts\");\n/* harmony import */ var _webgl_utils_Buffer2D__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../webgl/utils/Buffer2D */ \"./src/core/laya/webgl/utils/Buffer2D.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * <code>Render</code> 是渲染管理类。它是一个单例，可以使用 Laya.render 访问。\r\n */\r\nclass Render {\r\n    /**\r\n     * 初始化引擎。\r\n     * @param\twidth 游戏窗口宽度。\r\n     * @param\theight\t游戏窗口高度。\r\n     */\r\n    constructor(width, height) {\r\n        /**@private */\r\n        this._timeId = 0;\r\n        //创建主画布。改到Browser中了，因为为了runtime，主画布必须是第一个\r\n        Render._mainCanvas.source.id = \"layaCanvas\";\r\n        Render._mainCanvas.source.width = width;\r\n        Render._mainCanvas.source.height = height;\r\n        if (Render.isConchApp) {\r\n            _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].document.body.appendChild(Render._mainCanvas.source);\r\n        }\r\n        else {\r\n            if (!_utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].onKGMiniGame) {\r\n                _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].container.appendChild(Render._mainCanvas.source); //xiaosong add\r\n            }\r\n        }\r\n        this.initRender(Render._mainCanvas, width, height);\r\n        _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].window.requestAnimationFrame(loop);\r\n        function loop(stamp) {\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage._loop();\r\n            _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].window.requestAnimationFrame(loop);\r\n        }\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.on(\"visibilitychange\", this, this._onVisibilitychange);\r\n    }\r\n    /**@private */\r\n    _onVisibilitychange() {\r\n        if (!_Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.isVisibility) {\r\n            this._timeId = _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].window.setInterval(this._enterFrame, 1000);\r\n        }\r\n        else if (this._timeId != 0) {\r\n            _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].window.clearInterval(this._timeId);\r\n        }\r\n    }\r\n    initRender(canvas, w, h) {\r\n        function getWebGLContext(canvas) {\r\n            var gl;\r\n            var names = [\"webgl2\", \"webgl\", \"experimental-webgl\", \"webkit-3d\", \"moz-webgl\"];\r\n            if (!_Config__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].useWebGL2) {\r\n                names.shift();\r\n            }\r\n            for (var i = 0; i < names.length; i++) {\r\n                try {\r\n                    gl = canvas.getContext(names[i], { stencil: _Config__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].isStencil, alpha: _Config__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].isAlpha, antialias: _Config__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].isAntialias, premultipliedAlpha: _Config__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].premultipliedAlpha, preserveDrawingBuffer: _Config__WEBPACK_IMPORTED_MODULE_1__[\"Config\"].preserveDrawingBuffer }); //antialias为true,premultipliedAlpha为false,IOS和部分安卓QQ浏览器有黑屏或者白屏底色BUG\r\n                }\r\n                catch (e) {\r\n                }\r\n                if (gl) {\r\n                    (names[i] === 'webgl2') && (_webgl_WebGL__WEBPACK_IMPORTED_MODULE_6__[\"WebGL\"]._isWebGL2 = true);\r\n                    new _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_2__[\"LayaGL\"]();\r\n                    return gl;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_2__[\"LayaGL\"].instance = _webgl_WebGL__WEBPACK_IMPORTED_MODULE_6__[\"WebGL\"].mainContext = getWebGLContext(Render._mainCanvas.source);\r\n        if (!gl)\r\n            return false;\r\n        canvas.size(w, h); //在ctx之后调用。\r\n        _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].__init__(gl);\r\n        _resource_Context__WEBPACK_IMPORTED_MODULE_3__[\"Context\"].__init__();\r\n        _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_12__[\"SubmitBase\"].__init__();\r\n        var ctx = new _resource_Context__WEBPACK_IMPORTED_MODULE_3__[\"Context\"]();\r\n        ctx.isMain = true;\r\n        Render._context = ctx;\r\n        canvas._setContext(ctx);\r\n        _webgl_WebGL__WEBPACK_IMPORTED_MODULE_6__[\"WebGL\"].shaderHighPrecision = false;\r\n        try { //某些浏览器中未实现此函数，使用try catch增强兼容性。\r\n            var precisionFormat = gl.getShaderPrecisionFormat(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].FRAGMENT_SHADER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].HIGH_FLOAT);\r\n            precisionFormat.precision ? _webgl_WebGL__WEBPACK_IMPORTED_MODULE_6__[\"WebGL\"].shaderHighPrecision = true : _webgl_WebGL__WEBPACK_IMPORTED_MODULE_6__[\"WebGL\"].shaderHighPrecision = false;\r\n        }\r\n        catch (e) {\r\n        }\r\n        //TODO 现在有个问题是 gl.deleteTexture并没有走WebGLContex封装的\r\n        _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_2__[\"LayaGL\"].instance = gl;\r\n        _system_System__WEBPACK_IMPORTED_MODULE_4__[\"System\"].__init__();\r\n        _webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_10__[\"ShaderDefines2D\"].__init__();\r\n        _webgl_shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_11__[\"Value2D\"].__init__();\r\n        _webgl_shader_d2_Shader2D__WEBPACK_IMPORTED_MODULE_9__[\"Shader2D\"].__init__();\r\n        _webgl_utils_Buffer2D__WEBPACK_IMPORTED_MODULE_13__[\"Buffer2D\"].__int__(gl);\r\n        _webgl_canvas_BlendMode__WEBPACK_IMPORTED_MODULE_8__[\"BlendMode\"]._init_(gl);\r\n        return true;\r\n    }\r\n    /**@private */\r\n    _enterFrame(e = null) {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage._loop();\r\n    }\r\n    /** 目前使用的渲染器。*/\r\n    static get context() {\r\n        return Render._context;\r\n    }\r\n    /** 渲染使用的原生画布引用。 */\r\n    static get canvas() {\r\n        return Render._mainCanvas.source;\r\n    }\r\n}\r\nRender.supportWebGLPlusCulling = false;\r\nRender.supportWebGLPlusAnimation = false;\r\nRender.supportWebGLPlusRendering = false;\r\n/**是否是加速器 只读*/\r\nRender.isConchApp = false;\r\n{\r\n    Render.isConchApp = (window.conch != null);\r\n    if (Render.isConchApp) {\r\n        Render.supportWebGLPlusCulling = true;\r\n        Render.supportWebGLPlusAnimation = true;\r\n        Render.supportWebGLPlusRendering = true;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/renders/Render.ts?");

/***/ }),

/***/ "./src/core/laya/renders/RenderSprite.ts":
/*!***********************************************!*\
  !*** ./src/core/laya/renders/RenderSprite.ts ***!
  \***********************************************/
/*! exports provided: RenderSprite */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RenderSprite\", function() { return RenderSprite; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _Const__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Const */ \"./src/core/laya/Const.ts\");\n/* harmony import */ var _display_SpriteConst__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../display/SpriteConst */ \"./src/core/laya/display/SpriteConst.ts\");\n/* harmony import */ var _filters_Filter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../filters/Filter */ \"./src/core/laya/filters/Filter.ts\");\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n/* harmony import */ var _maths_Rectangle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../maths/Rectangle */ \"./src/core/laya/maths/Rectangle.ts\");\n/* harmony import */ var _LayaGLQuickRunner__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./LayaGLQuickRunner */ \"./src/core/laya/renders/LayaGLQuickRunner.ts\");\n/* harmony import */ var _resource_Texture__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../resource/Texture */ \"./src/core/laya/resource/Texture.ts\");\n/* harmony import */ var _utils_Stat__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/Stat */ \"./src/core/laya/utils/Stat.ts\");\n/* harmony import */ var _webgl_WebGL__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../webgl/WebGL */ \"./src/core/laya/webgl/WebGL.ts\");\n/* harmony import */ var _webgl_canvas_BlendMode__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../webgl/canvas/BlendMode */ \"./src/core/laya/webgl/canvas/BlendMode.ts\");\n/* harmony import */ var _resource_WebGLRTMgr__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../resource/WebGLRTMgr */ \"./src/core/laya/resource/WebGLRTMgr.ts\");\n/* harmony import */ var _webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../webgl/shader/d2/ShaderDefines2D */ \"./src/core/laya/webgl/shader/d2/ShaderDefines2D.ts\");\n/* harmony import */ var _webgl_shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../webgl/shader/d2/value/Value2D */ \"./src/core/laya/webgl/shader/d2/value/Value2D.ts\");\n/* harmony import */ var _webgl_submit_SubmitCMD__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../webgl/submit/SubmitCMD */ \"./src/core/laya/webgl/submit/SubmitCMD.ts\");\n/* harmony import */ var _webgl_canvas_WebGLCacheAsNormalCanvas__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../webgl/canvas/WebGLCacheAsNormalCanvas */ \"./src/core/laya/webgl/canvas/WebGLCacheAsNormalCanvas.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * 精灵渲染器\r\n */\r\nclass RenderSprite {\r\n    constructor(type, next) {\r\n        if (_LayaGLQuickRunner__WEBPACK_IMPORTED_MODULE_6__[\"LayaGLQuickRunner\"].map[type]) {\r\n            this._fun = _LayaGLQuickRunner__WEBPACK_IMPORTED_MODULE_6__[\"LayaGLQuickRunner\"].map[type];\r\n            this._next = RenderSprite.NORENDER;\r\n            return;\r\n        }\r\n        this._next = next || RenderSprite.NORENDER;\r\n        switch (type) {\r\n            case 0:\r\n                this._fun = this._no;\r\n                return;\r\n            //case SpriteConst.IMAGE: \r\n            //_fun = this._image;\r\n            //return;\r\n            case _display_SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].ALPHA:\r\n                this._fun = this._alpha;\r\n                return;\r\n            case _display_SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].TRANSFORM:\r\n                this._fun = this._transform;\r\n                return;\r\n            case _display_SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].BLEND:\r\n                this._fun = this._blend;\r\n                return;\r\n            case _display_SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].CANVAS:\r\n                this._fun = this._canvas;\r\n                return;\r\n            case _display_SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].MASK:\r\n                this._fun = this._mask;\r\n                return;\r\n            case _display_SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].CLIP:\r\n                this._fun = this._clip;\r\n                return;\r\n            case _display_SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].STYLE:\r\n                this._fun = this._style;\r\n                return;\r\n            case _display_SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].GRAPHICS:\r\n                this._fun = this._graphics;\r\n                return;\r\n            case _display_SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].CHILDS:\r\n                this._fun = this._children;\r\n                return;\r\n            case _display_SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].CUSTOM:\r\n                this._fun = this._custom;\r\n                return;\r\n            case _display_SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].TEXTURE:\r\n                this._fun = this._texture;\r\n                return;\r\n            //case SpriteConst.IMAGE | SpriteConst.GRAPHICS: \r\n            //_fun = this._image2;\r\n            //return;\r\n            //case SpriteConst.IMAGE | SpriteConst.TRANSFORM | SpriteConst.GRAPHICS: \r\n            //_fun = this._image2;\r\n            //return;\r\n            case _display_SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].FILTERS:\r\n                this._fun = _filters_Filter__WEBPACK_IMPORTED_MODULE_3__[\"Filter\"]._filter;\r\n                return;\r\n            case RenderSprite.INIT:\r\n                this._fun = RenderSprite._initRenderFun;\r\n                return;\r\n        }\r\n        this.onCreate(type);\r\n    }\r\n    static __init__() {\r\n        _LayaGLQuickRunner__WEBPACK_IMPORTED_MODULE_6__[\"LayaGLQuickRunner\"].__init__();\r\n        var i, len;\r\n        var initRender;\r\n        initRender = new RenderSprite(RenderSprite.INIT, null);\r\n        len = RenderSprite.renders.length = _display_SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].CHILDS * 2;\r\n        for (i = 0; i < len; i++)\r\n            RenderSprite.renders[i] = initRender;\r\n        RenderSprite.renders[0] = new RenderSprite(0, null);\r\n        function _initSame(value, o) {\r\n            var n = 0;\r\n            for (var i = 0; i < value.length; i++) {\r\n                n |= value[i];\r\n                RenderSprite.renders[n] = o;\r\n            }\r\n        }\r\n        //_initSame([SpriteConst.IMAGE, SpriteConst.GRAPHICS, SpriteConst.TRANSFORM, SpriteConst.ALPHA], RunDriver.createRenderSprite(SpriteConst.IMAGE, null));\r\n        //\r\n        //renders[SpriteConst.IMAGE | SpriteConst.GRAPHICS] = RunDriver.createRenderSprite(SpriteConst.IMAGE | SpriteConst.GRAPHICS, null);\r\n        //\r\n        //renders[SpriteConst.IMAGE | SpriteConst.TRANSFORM | SpriteConst.GRAPHICS] = RunDriver.createRenderSprite(SpriteConst.IMAGE | SpriteConst.TRANSFORM | SpriteConst.GRAPHICS, null);\r\n    }\r\n    static _initRenderFun(sprite, context, x, y) {\r\n        var type = sprite._renderType;\r\n        var r = RenderSprite.renders[type] = RenderSprite._getTypeRender(type);\r\n        r._fun(sprite, context, x, y);\r\n    }\r\n    static _getTypeRender(type) {\r\n        if (_LayaGLQuickRunner__WEBPACK_IMPORTED_MODULE_6__[\"LayaGLQuickRunner\"].map[type])\r\n            return new RenderSprite(type, null);\r\n        var rst = null;\r\n        var tType = _display_SpriteConst__WEBPACK_IMPORTED_MODULE_2__[\"SpriteConst\"].CHILDS;\r\n        while (tType > 0) {\r\n            if (tType & type)\r\n                rst = new RenderSprite(tType, rst);\r\n            tType = tType >> 1;\r\n        }\r\n        return rst;\r\n    }\r\n    onCreate(type) {\r\n    }\r\n    _style(sprite, context, x, y) {\r\n        //现在只有Text会走这里，Html已经不走这里了\r\n        var style = sprite._style;\r\n        if (style.render != null)\r\n            style.render(sprite, context, x, y);\r\n        var next = this._next;\r\n        next._fun.call(next, sprite, context, x, y);\r\n    }\r\n    _no(sprite, context, x, y) {\r\n    }\r\n    //TODO:coverage\r\n    _custom(sprite, context, x, y) {\r\n        sprite.customRender(context, x, y);\r\n        this._next._fun.call(this._next, sprite, context, x - sprite.pivotX, y - sprite.pivotY);\r\n    }\r\n    _clip(sprite, context, x, y) {\r\n        var next = this._next;\r\n        if (next == RenderSprite.NORENDER)\r\n            return;\r\n        var r = sprite._style.scrollRect;\r\n        context.save();\r\n        context.clipRect(x, y, r.width, r.height);\r\n        next._fun.call(next, sprite, context, x - r.x, y - r.y);\r\n        context.restore();\r\n    }\r\n    /*\r\n    public function _mask(sprite:Sprite, context:Context, x:Number, y:Number):void {\r\n        var next:RenderSprite = this._next;\r\n        next._fun.call(next, sprite, context, x, y);\r\n        var mask:Sprite = sprite.mask;\r\n        if (mask) {\r\n            context.globalCompositeOperation = \"destination-in\";\r\n            if (mask.numChildren > 0 || !mask.graphics._isOnlyOne()) {\r\n                mask.cacheAs = \"bitmap\";\r\n            }\r\n            mask.render(context, x - sprite._style.pivotX, y - sprite._style.pivotY);\r\n        }\r\n        context.globalCompositeOperation = \"source-over\";\r\n    }\r\n    */\r\n    _texture(sprite, context, x, y) {\r\n        var tex = sprite.texture;\r\n        if (tex._getSource())\r\n            context.drawTexture(tex, x - sprite.pivotX + tex.offsetX, y - sprite.pivotY + tex.offsetY, sprite._width || tex.width, sprite._height || tex.height);\r\n        var next = this._next;\r\n        if (next != RenderSprite.NORENDER)\r\n            next._fun.call(next, sprite, context, x, y);\r\n    }\r\n    _graphics(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        var g = sprite._graphics;\r\n        g && g._render(sprite, context, x - style.pivotX, y - style.pivotY);\r\n        var next = this._next;\r\n        if (next != RenderSprite.NORENDER)\r\n            next._fun.call(next, sprite, context, x, y);\r\n    }\r\n    //TODO:coverage\r\n    _image(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        context.drawTexture2(x, y, style.pivotX, style.pivotY, sprite.transform, sprite._graphics._one);\r\n    }\r\n    //TODO:coverage\r\n    _image2(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        context.drawTexture2(x, y, style.pivotX, style.pivotY, sprite.transform, sprite._graphics._one);\r\n    }\r\n    //TODO:coverage\r\n    _alpha(sprite, context, x, y) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        var style = sprite._style;\r\n        var alpha;\r\n        if ((alpha = style.alpha) > 0.01 || sprite._needRepaint()) {\r\n            var temp = context.globalAlpha;\r\n            context.globalAlpha *= alpha;\r\n            var next = this._next;\r\n            next._fun.call(next, sprite, context, x, y);\r\n            context.globalAlpha = temp;\r\n        }\r\n    }\r\n    _transform(sprite, context, x, y) {\r\n        var transform = sprite.transform, _next = this._next;\r\n        var style = sprite._style;\r\n        if (transform && _next != RenderSprite.NORENDER) {\r\n            context.save();\r\n            context.transform(transform.a, transform.b, transform.c, transform.d, transform.tx + x, transform.ty + y);\r\n            _next._fun.call(_next, sprite, context, 0, 0);\r\n            context.restore();\r\n        }\r\n        else {\r\n            if (_next != RenderSprite.NORENDER)\r\n                _next._fun.call(_next, sprite, context, x, y);\r\n        }\r\n    }\r\n    _children(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        var childs = sprite._children, n = childs.length, ele;\r\n        x = x - sprite.pivotX;\r\n        y = y - sprite.pivotY;\r\n        var textLastRender = sprite._getBit(_Const__WEBPACK_IMPORTED_MODULE_1__[\"Const\"].DRAWCALL_OPTIMIZE) && context.drawCallOptimize(true);\r\n        if (style.viewport) {\r\n            var rect = style.viewport;\r\n            var left = rect.x;\r\n            var top = rect.y;\r\n            var right = rect.right;\r\n            var bottom = rect.bottom;\r\n            var _x, _y;\r\n            for (i = 0; i < n; ++i) {\r\n                if ((ele = childs[i])._visible && ((_x = ele._x) < right && (_x + ele.width) > left && (_y = ele._y) < bottom && (_y + ele.height) > top)) {\r\n                    ele.render(context, x, y);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < n; ++i)\r\n                (ele = childs[i])._visible && ele.render(context, x, y);\r\n        }\r\n        textLastRender && context.drawCallOptimize(false);\r\n    }\r\n    _canvas(sprite, context, x, y) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        var _cacheStyle = sprite._cacheStyle;\r\n        var _next = this._next;\r\n        if (!_cacheStyle.enableCanvasRender) {\r\n            _next._fun.call(_next, sprite, context, x, y);\r\n            return;\r\n        }\r\n        _cacheStyle.cacheAs === 'bitmap' ? (_utils_Stat__WEBPACK_IMPORTED_MODULE_8__[\"Stat\"].canvasBitmap++) : (_utils_Stat__WEBPACK_IMPORTED_MODULE_8__[\"Stat\"].canvasNormal++);\r\n        //检查保存的文字是否失效了\r\n        var cacheNeedRebuild = false;\r\n        var textNeedRestore = false;\r\n        if (_cacheStyle.canvas) {\r\n            // 检查文字是否被释放了，以及clip是否改变了，需要重新cache了\r\n            var canv = _cacheStyle.canvas;\r\n            var ctx = canv.context;\r\n            var charRIs = canv.touches;\r\n            if (charRIs) {\r\n                for (var ci = 0; ci < charRIs.length; ci++) {\r\n                    if (charRIs[ci].deleted) {\r\n                        textNeedRestore = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            cacheNeedRebuild = canv.isCacheValid && !canv.isCacheValid();\r\n        }\r\n        if (sprite._needRepaint() || (!_cacheStyle.canvas) || textNeedRestore || cacheNeedRebuild || _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.isGlobalRepaint()) {\r\n            if (_cacheStyle.cacheAs === 'normal') {\r\n                if (context._targets) { // 如果有target说明父节点已经是一个cacheas bitmap了，就不再走cacheas normal的流程了\r\n                    _next._fun.call(_next, sprite, context, x, y);\r\n                    return; //不再继续\r\n                }\r\n                else {\r\n                    this._canvas_webgl_normal_repaint(sprite, context);\r\n                }\r\n            }\r\n            else {\r\n                this._canvas_repaint(sprite, context, x, y);\r\n            }\r\n        }\r\n        var tRec = _cacheStyle.cacheRect;\r\n        //Stage._dbgSprite.graphics.drawRect(x, y, 30,30, null, 'red');\r\n        context.drawCanvas(_cacheStyle.canvas, x + tRec.x, y + tRec.y, tRec.width, tRec.height);\r\n    }\r\n    _canvas_repaint(sprite, context, x, y) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        var _cacheStyle = sprite._cacheStyle;\r\n        var _next = this._next;\r\n        var tx;\r\n        var canvas = _cacheStyle.canvas;\r\n        var left;\r\n        var top;\r\n        var tRec;\r\n        var tCacheType = _cacheStyle.cacheAs;\r\n        var w, h;\r\n        var scaleX, scaleY;\r\n        var scaleInfo;\r\n        scaleInfo = _cacheStyle._calculateCacheRect(sprite, tCacheType, x, y);\r\n        scaleX = scaleInfo.x;\r\n        scaleY = scaleInfo.y;\r\n        //显示对象实际的绘图区域\r\n        tRec = _cacheStyle.cacheRect;\r\n        //计算cache画布的大小\r\n        w = tRec.width * scaleX;\r\n        h = tRec.height * scaleY;\r\n        left = tRec.x;\r\n        top = tRec.y;\r\n        if (tCacheType === 'bitmap' && (w > 2048 || h > 2048)) {\r\n            console.warn(\"cache bitmap size larger than 2048,cache ignored\");\r\n            _cacheStyle.releaseContext();\r\n            _next._fun.call(_next, sprite, context, x, y);\r\n            return;\r\n        }\r\n        if (!canvas) {\r\n            _cacheStyle.createContext();\r\n            canvas = _cacheStyle.canvas;\r\n        }\r\n        tx = canvas.context;\r\n        //WebGL用\r\n        tx.sprite = sprite;\r\n        (canvas.width != w || canvas.height != h) && canvas.size(w, h); //asbitmap需要合理的大小，所以size放到前面\r\n        if (tCacheType === 'bitmap')\r\n            tx.asBitmap = true;\r\n        else if (tCacheType === 'normal')\r\n            tx.asBitmap = false;\r\n        //清理画布。之前记录的submit会被全部清掉\r\n        tx.clear();\r\n        //TODO:测试webgl下是否有缓存模糊\r\n        if (scaleX != 1 || scaleY != 1) {\r\n            var ctx = tx;\r\n            ctx.save();\r\n            ctx.scale(scaleX, scaleY);\r\n            _next._fun.call(_next, sprite, tx, -left, -top);\r\n            ctx.restore();\r\n            sprite._applyFilters();\r\n        }\r\n        else {\r\n            ctx = tx;\r\n            _next._fun.call(_next, sprite, tx, -left, -top);\r\n            sprite._applyFilters();\r\n        }\r\n        if (_cacheStyle.staticCache)\r\n            _cacheStyle.reCache = false;\r\n        _utils_Stat__WEBPACK_IMPORTED_MODULE_8__[\"Stat\"].canvasReCache++;\r\n    }\r\n    _canvas_webgl_normal_repaint(sprite, context) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        var _cacheStyle = sprite._cacheStyle;\r\n        var _next = this._next;\r\n        var canvas = _cacheStyle.canvas;\r\n        var tCacheType = _cacheStyle.cacheAs;\r\n        var scaleInfo = _cacheStyle._calculateCacheRect(sprite, tCacheType, 0, 0);\r\n        if (!canvas) {\r\n            canvas = _cacheStyle.canvas = new _webgl_canvas_WebGLCacheAsNormalCanvas__WEBPACK_IMPORTED_MODULE_15__[\"WebGLCacheAsNormalCanvas\"](context, sprite);\r\n        }\r\n        var tx = canvas.context;\r\n        canvas['startRec']();\r\n        _next._fun.call(_next, sprite, tx, sprite.pivotX, sprite.pivotY); // 由于后面的渲染会减去pivot，而cacheas normal并不希望这样，只希望创建一个原始的图像。所以在这里补偿。\r\n        sprite._applyFilters();\r\n        _utils_Stat__WEBPACK_IMPORTED_MODULE_8__[\"Stat\"].canvasReCache++;\r\n        canvas['endRec']();\r\n        //context.drawCanvas(canvas, x , y , 1, 1); // 这种情况下宽高没用\r\n    }\r\n    _blend(sprite, context, x, y) {\r\n        var style = sprite._style;\r\n        var next = this._next;\r\n        if (style.blendMode) {\r\n            context.save();\r\n            context.globalCompositeOperation = style.blendMode;\r\n            next._fun.call(next, sprite, context, x, y);\r\n            context.restore();\r\n        }\r\n        else {\r\n            next._fun.call(next, sprite, context, x, y);\r\n        }\r\n    }\r\n    /**\r\n     * mask的渲染。 sprite有mask属性的情况下，来渲染这个sprite\r\n     * @param\tsprite\r\n     * @param\tcontext\r\n     * @param\tx\r\n     * @param\ty\r\n     */\r\n    _mask(sprite, context, x, y) {\r\n        var next = this._next;\r\n        var mask = sprite.mask;\r\n        var submitCMD;\r\n        var ctx = context;\r\n        if (mask) {\r\n            ctx.save();\r\n            var preBlendMode = ctx.globalCompositeOperation;\r\n            var tRect = new _maths_Rectangle__WEBPACK_IMPORTED_MODULE_5__[\"Rectangle\"]();\r\n            //裁剪范围是根据mask来定的\r\n            tRect.copyFrom(mask.getBounds());\r\n            tRect.width = Math.round(tRect.width);\r\n            tRect.height = Math.round(tRect.height);\r\n            tRect.x = Math.round(tRect.x);\r\n            tRect.y = Math.round(tRect.y);\r\n            if (tRect.width > 0 && tRect.height > 0) {\r\n                var w = tRect.width;\r\n                var h = tRect.height;\r\n                var tmpRT = _resource_WebGLRTMgr__WEBPACK_IMPORTED_MODULE_11__[\"WebGLRTMgr\"].getRT(w, h);\r\n                ctx.breakNextMerge();\r\n                //先把mask画到tmpTarget上\r\n                ctx.pushRT();\r\n                ctx.addRenderObject(_webgl_submit_SubmitCMD__WEBPACK_IMPORTED_MODULE_14__[\"SubmitCMD\"].create([ctx, tmpRT, w, h], RenderSprite.tmpTarget, this));\r\n                mask.render(ctx, -tRect.x, -tRect.y);\r\n                ctx.breakNextMerge();\r\n                ctx.popRT();\r\n                //设置裁剪为mask的大小。要考虑pivot。有pivot的话，可能要从负的开始\r\n                ctx.save();\r\n                ctx.clipRect(x + tRect.x - sprite.getStyle().pivotX, y + tRect.y - sprite.getStyle().pivotY, w, h);\r\n                //画出本节点的内容\r\n                next._fun.call(next, sprite, ctx, x, y);\r\n                ctx.restore();\r\n                //设置混合模式\r\n                preBlendMode = ctx.globalCompositeOperation;\r\n                ctx.addRenderObject(_webgl_submit_SubmitCMD__WEBPACK_IMPORTED_MODULE_14__[\"SubmitCMD\"].create([\"mask\"], RenderSprite.setBlendMode, this));\r\n                var shaderValue = _webgl_shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_13__[\"Value2D\"].create(_webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_12__[\"ShaderDefines2D\"].TEXTURE2D, 0);\r\n                var uv = _resource_Texture__WEBPACK_IMPORTED_MODULE_7__[\"Texture\"].INV_UV;\r\n                //这个地方代码不要删除，为了解决在iphone6-plus上的诡异问题\r\n                //renderTarget + StencilBuffer + renderTargetSize < 32 就会变得超级卡\r\n                //所以增加的限制。王亚伟\r\n                //  180725 本段限制代码已经删除，如果出了问题再找王亚伟\r\n                ctx.drawTarget(tmpRT, x + tRect.x - sprite.getStyle().pivotX, y + tRect.y - sprite.getStyle().pivotY, w, h, _maths_Matrix__WEBPACK_IMPORTED_MODULE_4__[\"Matrix\"].TEMP.identity(), shaderValue, uv, 6);\r\n                ctx.addRenderObject(_webgl_submit_SubmitCMD__WEBPACK_IMPORTED_MODULE_14__[\"SubmitCMD\"].create([tmpRT], RenderSprite.recycleTarget, this));\r\n                //恢复混合模式\r\n                ctx.addRenderObject(_webgl_submit_SubmitCMD__WEBPACK_IMPORTED_MODULE_14__[\"SubmitCMD\"].create([preBlendMode], RenderSprite.setBlendMode, this));\r\n            }\r\n            ctx.restore();\r\n        }\r\n        else {\r\n            next._fun.call(next, sprite, context, x, y);\r\n        }\r\n    }\r\n    static tmpTarget(ctx, rt, w, h) {\r\n        rt.start();\r\n        rt.clear(0, 0, 0, 0);\r\n    }\r\n    static recycleTarget(rt) {\r\n        _resource_WebGLRTMgr__WEBPACK_IMPORTED_MODULE_11__[\"WebGLRTMgr\"].releaseRT(rt);\r\n    }\r\n    static setBlendMode(blendMode) {\r\n        var gl = _webgl_WebGL__WEBPACK_IMPORTED_MODULE_9__[\"WebGL\"].mainContext;\r\n        _webgl_canvas_BlendMode__WEBPACK_IMPORTED_MODULE_10__[\"BlendMode\"].targetFns[_webgl_canvas_BlendMode__WEBPACK_IMPORTED_MODULE_10__[\"BlendMode\"].TOINT[blendMode]](gl);\r\n    }\r\n}\r\n/** @private */\r\n//public static const IMAGE:int = 0x01;\r\n/** @private */\r\n//public static const ALPHA:int = 0x02;\r\n/** @private */\r\n//public static const TRANSFORM:int = 0x04;\r\n/** @private */\r\n//public static const BLEND:int = 0x08;\r\n/** @private */\r\n//public static const CANVAS:int = 0x10;\r\n/** @private */\r\n//public static const FILTERS:int = 0x20;\r\n/** @private */\r\n//public static const MASK:int = 0x40;\r\n/** @private */\r\n//public static const CLIP:int = 0x80;\r\n/** @private */\r\n//public static const STYLE:int = 0x100;\r\n/** @private */\r\n//public static const GRAPHICS:int = 0x200;\r\n/** @private */\r\n//public static const CUSTOM:int = 0x400;\r\n/** @private */\r\n//public static const CHILDS:int = 0x800;\r\n/** @private */\r\nRenderSprite.INIT = 0x11111;\r\n/** @private */\r\nRenderSprite.renders = [];\r\n/** @private */\r\nRenderSprite.NORENDER = new RenderSprite(0, null);\r\nRenderSprite.tempUV = new Array(8);\r\n\n\n//# sourceURL=webpack:///./src/core/laya/renders/RenderSprite.ts?");

/***/ }),

/***/ "./src/core/laya/resource/BaseTexture.ts":
/*!***********************************************!*\
  !*** ./src/core/laya/resource/BaseTexture.ts ***!
  \***********************************************/
/*! exports provided: BaseTexture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BaseTexture\", function() { return BaseTexture; });\n/* harmony import */ var _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../layagl/LayaGL */ \"./src/core/laya/layagl/LayaGL.ts\");\n/* harmony import */ var _Bitmap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Bitmap */ \"./src/core/laya/resource/Bitmap.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../webgl/WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n\r\n\r\n\r\n\r\n/**\r\n * <code>BaseTexture</code> 纹理的父类，抽象类，不允许实例。\r\n */\r\nclass BaseTexture extends _Bitmap__WEBPACK_IMPORTED_MODULE_1__[\"Bitmap\"] {\r\n    /**\r\n     * 创建一个 <code>BaseTexture</code> 实例。\r\n     */\r\n    constructor(format, mipMap) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        super();\r\n        this._wrapModeU = BaseTexture.WARPMODE_REPEAT;\r\n        this._wrapModeV = BaseTexture.WARPMODE_REPEAT;\r\n        this._filterMode = BaseTexture.FILTERMODE_BILINEAR;\r\n        this._readyed = false;\r\n        this._width = -1;\r\n        this._height = -1;\r\n        this._format = format;\r\n        this._mipmap = mipMap;\r\n        this._anisoLevel = 1;\r\n        this._glTexture = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.createTexture();\r\n    }\r\n    /**\r\n     * 是否使用mipLevel\r\n     */\r\n    get mipmap() {\r\n        return this._mipmap;\r\n    }\r\n    /**\r\n     * 纹理格式\r\n     */\r\n    get format() {\r\n        return this._format;\r\n    }\r\n    /**\r\n     * 获取纹理横向循环模式。\r\n     */\r\n    get wrapModeU() {\r\n        return this._wrapModeU;\r\n    }\r\n    /**\r\n     * 设置纹理横向循环模式。\r\n     */\r\n    set wrapModeU(value) {\r\n        if (this._wrapModeU !== value) {\r\n            this._wrapModeU = value;\r\n            (this._width !== -1) && (this._setWarpMode(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].TEXTURE_WRAP_S, value));\r\n        }\r\n    }\r\n    /**\r\n     * 获取纹理纵向循环模式。\r\n     */\r\n    get wrapModeV() {\r\n        return this._wrapModeV;\r\n    }\r\n    /**\r\n     * 设置纹理纵向循环模式。\r\n     */\r\n    set wrapModeV(value) {\r\n        if (this._wrapModeV !== value) {\r\n            this._wrapModeV = value;\r\n            (this._height !== -1) && (this._setWarpMode(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].TEXTURE_WRAP_T, value));\r\n        }\r\n    }\r\n    /**\r\n     * 缩小过滤器\r\n     */\r\n    get filterMode() {\r\n        return this._filterMode;\r\n    }\r\n    /**\r\n     * 缩小过滤器\r\n     */\r\n    set filterMode(value) {\r\n        if (value !== this._filterMode) {\r\n            this._filterMode = value;\r\n            ((this._width !== -1) && (this._height !== -1)) && (this._setFilterMode(value));\r\n        }\r\n    }\r\n    /**\r\n     * 各向异性等级\r\n     */\r\n    get anisoLevel() {\r\n        return this._anisoLevel;\r\n    }\r\n    /**\r\n     * 各向异性等级\r\n     */\r\n    set anisoLevel(value) {\r\n        if (value !== this._anisoLevel) {\r\n            this._anisoLevel = Math.max(1, Math.min(16, value));\r\n            ((this._width !== -1) && (this._height !== -1)) && (this._setAnisotropy(value));\r\n        }\r\n    }\r\n    /**\r\n     * 获取默认纹理资源。\r\n     */\r\n    get defaulteTexture() {\r\n        throw \"BaseTexture:must override it.\";\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _isPot(size) {\r\n        return (size & (size - 1)) === 0;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _getGLFormat() {\r\n        var glFormat;\r\n        switch (this._format) {\r\n            case BaseTexture.FORMAT_R8G8B8:\r\n                glFormat = _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].RGB;\r\n                break;\r\n            case BaseTexture.FORMAT_R8G8B8A8:\r\n                glFormat = _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].RGBA;\r\n                break;\r\n            case BaseTexture.FORMAT_ALPHA8:\r\n                glFormat = _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].ALPHA;\r\n                break;\r\n            case BaseTexture.FORMAT_DXT1:\r\n                if (_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"]._compressedTextureS3tc)\r\n                    glFormat = _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"]._compressedTextureS3tc.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n                else\r\n                    throw \"BaseTexture: not support DXT1 format.\";\r\n                break;\r\n            case BaseTexture.FORMAT_DXT5:\r\n                if (_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"]._compressedTextureS3tc)\r\n                    glFormat = _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"]._compressedTextureS3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n                else\r\n                    throw \"BaseTexture: not support DXT5 format.\";\r\n                break;\r\n            case BaseTexture.FORMAT_ETC1RGB:\r\n                if (_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"]._compressedTextureEtc1)\r\n                    glFormat = _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"]._compressedTextureEtc1.COMPRESSED_RGB_ETC1_WEBGL;\r\n                else\r\n                    throw \"BaseTexture: not support ETC1RGB format.\";\r\n                break;\r\n            case BaseTexture.FORMAT_PVRTCRGB_2BPPV:\r\n                if (_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"]._compressedTexturePvrtc)\r\n                    glFormat = _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"]._compressedTexturePvrtc.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n                else\r\n                    throw \"BaseTexture: not support PVRTCRGB_2BPPV format.\";\r\n                break;\r\n            case BaseTexture.FORMAT_PVRTCRGBA_2BPPV:\r\n                if (_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"]._compressedTexturePvrtc)\r\n                    glFormat = _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"]._compressedTexturePvrtc.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n                else\r\n                    throw \"BaseTexture: not support PVRTCRGBA_2BPPV format.\";\r\n                break;\r\n            case BaseTexture.FORMAT_PVRTCRGB_4BPPV:\r\n                if (_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"]._compressedTexturePvrtc)\r\n                    glFormat = _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"]._compressedTexturePvrtc.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n                else\r\n                    throw \"BaseTexture: not support PVRTCRGB_4BPPV format.\";\r\n                break;\r\n            case BaseTexture.FORMAT_PVRTCRGBA_4BPPV:\r\n                if (_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"]._compressedTexturePvrtc)\r\n                    glFormat = _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"]._compressedTexturePvrtc.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n                else\r\n                    throw \"BaseTexture: not support PVRTCRGBA_4BPPV format.\";\r\n                break;\r\n            default:\r\n                throw \"BaseTexture: unknown texture format.\";\r\n        }\r\n        return glFormat;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _setFilterMode(value) {\r\n        var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance;\r\n        _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].bindTexture(gl, this._glTextureType, this._glTexture);\r\n        switch (value) {\r\n            case BaseTexture.FILTERMODE_POINT:\r\n                if (this._mipmap)\r\n                    gl.texParameteri(this._glTextureType, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].TEXTURE_MIN_FILTER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].NEAREST_MIPMAP_NEAREST);\r\n                else\r\n                    gl.texParameteri(this._glTextureType, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].TEXTURE_MIN_FILTER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].NEAREST);\r\n                gl.texParameteri(this._glTextureType, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].TEXTURE_MAG_FILTER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].NEAREST);\r\n                break;\r\n            case BaseTexture.FILTERMODE_BILINEAR:\r\n                if (this._mipmap)\r\n                    gl.texParameteri(this._glTextureType, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].TEXTURE_MIN_FILTER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].LINEAR_MIPMAP_NEAREST);\r\n                else\r\n                    gl.texParameteri(this._glTextureType, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].TEXTURE_MIN_FILTER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].LINEAR);\r\n                gl.texParameteri(this._glTextureType, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].TEXTURE_MAG_FILTER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].LINEAR);\r\n                break;\r\n            case BaseTexture.FILTERMODE_TRILINEAR:\r\n                if (this._mipmap)\r\n                    gl.texParameteri(this._glTextureType, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].TEXTURE_MIN_FILTER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].LINEAR_MIPMAP_LINEAR);\r\n                else\r\n                    gl.texParameteri(this._glTextureType, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].TEXTURE_MIN_FILTER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].LINEAR);\r\n                gl.texParameteri(this._glTextureType, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].TEXTURE_MAG_FILTER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].LINEAR);\r\n                break;\r\n            default:\r\n                throw new Error(\"BaseTexture:unknown filterMode value.\");\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _setWarpMode(orientation, mode) {\r\n        var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance;\r\n        _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].bindTexture(gl, this._glTextureType, this._glTexture);\r\n        if (this._isPot(this._width) && this._isPot(this._height)) {\r\n            switch (mode) {\r\n                case BaseTexture.WARPMODE_REPEAT:\r\n                    gl.texParameteri(this._glTextureType, orientation, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].REPEAT);\r\n                    break;\r\n                case BaseTexture.WARPMODE_CLAMP:\r\n                    gl.texParameteri(this._glTextureType, orientation, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].CLAMP_TO_EDGE);\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            gl.texParameteri(this._glTextureType, orientation, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].CLAMP_TO_EDGE);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _setAnisotropy(value) {\r\n        var anisotropic = _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"]._extTextureFilterAnisotropic;\r\n        if (anisotropic && !_utils_Browser__WEBPACK_IMPORTED_MODULE_2__[\"Browser\"].onLimixiu) {\r\n            value = Math.max(value, 1);\r\n            var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance;\r\n            _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].bindTexture(gl, this._glTextureType, this._glTexture);\r\n            value = Math.min(gl.getParameter(anisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT), value);\r\n            gl.texParameterf(this._glTextureType, anisotropic.TEXTURE_MAX_ANISOTROPY_EXT, value);\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    /*override*/ _disposeResource() {\r\n        if (this._glTexture) {\r\n            _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.deleteTexture(this._glTexture);\r\n            this._glTexture = null;\r\n            this._setGPUMemory(0);\r\n        }\r\n    }\r\n    /**\r\n     * 获取纹理资源。\r\n     */\r\n    /*override*/ _getSource() {\r\n        if (this._readyed)\r\n            return this._glTexture;\r\n        else\r\n            return null;\r\n    }\r\n    /**\r\n     * 通过基础数据生成mipMap。\r\n     */\r\n    generateMipmap() {\r\n        if (this._isPot(this.width) && this._isPot(this.height))\r\n            _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.generateMipmap(this._glTextureType);\r\n    }\r\n}\r\n/** @private */\r\nBaseTexture.WARPMODE_REPEAT = 0;\r\n/** @private */\r\nBaseTexture.WARPMODE_CLAMP = 1;\r\n/**寻址模式_重复。*/\r\nBaseTexture.FILTERMODE_POINT = 0;\r\n/**寻址模式_不循环。*/\r\nBaseTexture.FILTERMODE_BILINEAR = 1;\r\n/**寻址模式_不循环。*/\r\nBaseTexture.FILTERMODE_TRILINEAR = 2;\r\n/**纹理格式_R8G8B8。*/\r\nBaseTexture.FORMAT_R8G8B8 = 0;\r\n/**纹理格式_R8G8B8A8。*/\r\nBaseTexture.FORMAT_R8G8B8A8 = 1;\r\n/**纹理格式_ALPHA8。*/\r\nBaseTexture.FORMAT_ALPHA8 = 2;\r\n/**纹理格式_DXT1。*/\r\nBaseTexture.FORMAT_DXT1 = 3;\r\n/**纹理格式_DXT5。*/\r\nBaseTexture.FORMAT_DXT5 = 4;\r\n/**纹理格式_ETC2RGB。*/\r\nBaseTexture.FORMAT_ETC1RGB = 5;\r\n///**纹理格式_ETC2RGB。*/\r\n//public static const FORMAT_ETC2RGB:int = 6;\r\n///**纹理格式_ETC2RGBA。*/\r\n//public static const FORMAT_ETC2RGBA:int = 7;\r\n/**纹理格式_ETC2RGB_PUNCHTHROUGHALPHA。*/\r\n//public static const FORMAT_ETC2RGB_PUNCHTHROUGHALPHA:int = 8;\r\n/**纹理格式_PVRTCRGB_2BPPV。*/\r\nBaseTexture.FORMAT_PVRTCRGB_2BPPV = 9;\r\n/**纹理格式_PVRTCRGBA_2BPPV。*/\r\nBaseTexture.FORMAT_PVRTCRGBA_2BPPV = 10;\r\n/**纹理格式_PVRTCRGB_4BPPV。*/\r\nBaseTexture.FORMAT_PVRTCRGB_4BPPV = 11;\r\n/**纹理格式_PVRTCRGBA_4BPPV。*/\r\nBaseTexture.FORMAT_PVRTCRGBA_4BPPV = 12;\r\n/**深度格式_DEPTH_16。*/\r\nBaseTexture.FORMAT_DEPTH_16 = 0;\r\n/**深度格式_STENCIL_8。*/\r\nBaseTexture.FORMAT_STENCIL_8 = 1;\r\n/**深度格式_DEPTHSTENCIL_16_8。*/\r\nBaseTexture.FORMAT_DEPTHSTENCIL_16_8 = 2;\r\n/**深度格式_DEPTHSTENCIL_NONE。*/\r\nBaseTexture.FORMAT_DEPTHSTENCIL_NONE = 3;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/resource/BaseTexture.ts?");

/***/ }),

/***/ "./src/core/laya/resource/Bitmap.ts":
/*!******************************************!*\
  !*** ./src/core/laya/resource/Bitmap.ts ***!
  \******************************************/
/*! exports provided: Bitmap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Bitmap\", function() { return Bitmap; });\n/* harmony import */ var _Resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Resource */ \"./src/core/laya/resource/Resource.ts\");\n\r\n/**\r\n     * @private\r\n     * <code>Bitmap</code> 图片资源类。\r\n     */\r\nclass Bitmap extends _Resource__WEBPACK_IMPORTED_MODULE_0__[\"Resource\"] {\r\n    /**\r\n     * 获取宽度。\r\n     */\r\n    get width() {\r\n        return this._width;\r\n    }\r\n    /***\r\n     * 获取高度。\r\n     */\r\n    get height() {\r\n        return this._height;\r\n    }\r\n    /**\r\n     * 创建一个 <code>Bitmap</code> 实例。\r\n     */\r\n    constructor() {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        super();\r\n        this._width = -1;\r\n        this._height = -1;\r\n    }\r\n    /**\r\n     * @private\r\n     * 获取纹理资源。\r\n     */\r\n    //TODO:coverage\r\n    _getSource() {\r\n        throw \"Bitmap: must override it.\";\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/resource/Bitmap.ts?");

/***/ }),

/***/ "./src/core/laya/resource/Context.ts":
/*!*******************************************!*\
  !*** ./src/core/laya/resource/Context.ts ***!
  \*******************************************/
/*! exports provided: Context */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Context\", function() { return Context; });\n/* harmony import */ var _Texture__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Texture */ \"./src/core/laya/resource/Texture.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../layagl/LayaGL */ \"./src/core/laya/layagl/LayaGL.ts\");\n/* harmony import */ var _maths_Bezier__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../maths/Bezier */ \"./src/core/laya/maths/Bezier.ts\");\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n/* harmony import */ var _maths_Point__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../maths/Point */ \"./src/core/laya/maths/Point.ts\");\n/* harmony import */ var _maths_Rectangle__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../maths/Rectangle */ \"./src/core/laya/maths/Rectangle.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/ColorUtils */ \"./src/core/laya/utils/ColorUtils.ts\");\n/* harmony import */ var _utils_Stat__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/Stat */ \"./src/core/laya/utils/Stat.ts\");\n/* harmony import */ var _webgl_WebGL__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../webgl/WebGL */ \"./src/core/laya/webgl/WebGL.ts\");\n/* harmony import */ var _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../webgl/WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n/* harmony import */ var _webgl_canvas_BlendMode__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../webgl/canvas/BlendMode */ \"./src/core/laya/webgl/canvas/BlendMode.ts\");\n/* harmony import */ var _webgl_canvas_DrawStyle__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../webgl/canvas/DrawStyle */ \"./src/core/laya/webgl/canvas/DrawStyle.ts\");\n/* harmony import */ var _webgl_canvas_Path__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../webgl/canvas/Path */ \"./src/core/laya/webgl/canvas/Path.ts\");\n/* harmony import */ var _webgl_canvas_WebGLCacheAsNormalCanvas__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../webgl/canvas/WebGLCacheAsNormalCanvas */ \"./src/core/laya/webgl/canvas/WebGLCacheAsNormalCanvas.ts\");\n/* harmony import */ var _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../webgl/canvas/save/SaveBase */ \"./src/core/laya/webgl/canvas/save/SaveBase.ts\");\n/* harmony import */ var _webgl_canvas_save_SaveClipRect__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../webgl/canvas/save/SaveClipRect */ \"./src/core/laya/webgl/canvas/save/SaveClipRect.ts\");\n/* harmony import */ var _webgl_canvas_save_SaveMark__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../webgl/canvas/save/SaveMark */ \"./src/core/laya/webgl/canvas/save/SaveMark.ts\");\n/* harmony import */ var _webgl_canvas_save_SaveTransform__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../webgl/canvas/save/SaveTransform */ \"./src/core/laya/webgl/canvas/save/SaveTransform.ts\");\n/* harmony import */ var _webgl_canvas_save_SaveTranslate__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../webgl/canvas/save/SaveTranslate */ \"./src/core/laya/webgl/canvas/save/SaveTranslate.ts\");\n/* harmony import */ var _BaseTexture__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./BaseTexture */ \"./src/core/laya/resource/BaseTexture.ts\");\n/* harmony import */ var _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../webgl/submit/SubmitBase */ \"./src/core/laya/webgl/submit/SubmitBase.ts\");\n/* harmony import */ var _RenderTexture2D__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./RenderTexture2D */ \"./src/core/laya/resource/RenderTexture2D.ts\");\n/* harmony import */ var _Texture2D__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./Texture2D */ \"./src/core/laya/resource/Texture2D.ts\");\n/* harmony import */ var _webgl_shader_BaseShader__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../webgl/shader/BaseShader */ \"./src/core/laya/webgl/shader/BaseShader.ts\");\n/* harmony import */ var _webgl_shader_d2_Shader2D__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../webgl/shader/d2/Shader2D */ \"./src/core/laya/webgl/shader/d2/Shader2D.ts\");\n/* harmony import */ var _webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../webgl/shader/d2/ShaderDefines2D */ \"./src/core/laya/webgl/shader/d2/ShaderDefines2D.ts\");\n/* harmony import */ var _webgl_shader_d2_skinAnishader_SkinMeshBuffer__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../webgl/shader/d2/skinAnishader/SkinMeshBuffer */ \"./src/core/laya/webgl/shader/d2/skinAnishader/SkinMeshBuffer.ts\");\n/* harmony import */ var _webgl_shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../webgl/shader/d2/value/Value2D */ \"./src/core/laya/webgl/shader/d2/value/Value2D.ts\");\n/* harmony import */ var _webgl_shapes_BasePoly__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../webgl/shapes/BasePoly */ \"./src/core/laya/webgl/shapes/BasePoly.ts\");\n/* harmony import */ var _webgl_shapes_Earcut__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../webgl/shapes/Earcut */ \"./src/core/laya/webgl/shapes/Earcut.ts\");\n/* harmony import */ var _webgl_submit_Submit__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../webgl/submit/Submit */ \"./src/core/laya/webgl/submit/Submit.ts\");\n/* harmony import */ var _webgl_submit_SubmitCMD__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../webgl/submit/SubmitCMD */ \"./src/core/laya/webgl/submit/SubmitCMD.ts\");\n/* harmony import */ var _webgl_submit_SubmitCanvas__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../webgl/submit/SubmitCanvas */ \"./src/core/laya/webgl/submit/SubmitCanvas.ts\");\n/* harmony import */ var _webgl_submit_SubmitKey__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../webgl/submit/SubmitKey */ \"./src/core/laya/webgl/submit/SubmitKey.ts\");\n/* harmony import */ var _webgl_submit_SubmitTarget__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../webgl/submit/SubmitTarget */ \"./src/core/laya/webgl/submit/SubmitTarget.ts\");\n/* harmony import */ var _webgl_submit_SubmitTexture__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../webgl/submit/SubmitTexture */ \"./src/core/laya/webgl/submit/SubmitTexture.ts\");\n/* harmony import */ var _webgl_text_CharSubmitCache__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../webgl/text/CharSubmitCache */ \"./src/core/laya/webgl/text/CharSubmitCache.ts\");\n/* harmony import */ var _webgl_text_TextRender__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../webgl/text/TextRender */ \"./src/core/laya/webgl/text/TextRender.ts\");\n/* harmony import */ var _webgl_utils_MeshQuadTexture__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../webgl/utils/MeshQuadTexture */ \"./src/core/laya/webgl/utils/MeshQuadTexture.ts\");\n/* harmony import */ var _webgl_utils_MeshTexture__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../webgl/utils/MeshTexture */ \"./src/core/laya/webgl/utils/MeshTexture.ts\");\n/* harmony import */ var _webgl_utils_MeshVG__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../webgl/utils/MeshVG */ \"./src/core/laya/webgl/utils/MeshVG.ts\");\n/* harmony import */ var _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../webgl/utils/RenderState2D */ \"./src/core/laya/webgl/utils/RenderState2D.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * Context扩展类\r\n */\r\nclass Context {\r\n    constructor() {\r\n        this._tmpMatrix = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_4__[\"Matrix\"](); // chrome下静态的访问比从this访问要慢\r\n        this._drawTexToDrawTri_Vert = new Float32Array(8); // 从速度考虑，不做成static了\r\n        this._drawTexToDrawTri_Index = new Uint16Array([0, 1, 2, 0, 2, 3]);\r\n        this._tempUV = new Float32Array(8);\r\n        this._drawTriUseAbsMatrix = false; //drawTriange函数的矩阵是全局的，不用再乘以当前矩阵了。这是一个补丁。\r\n        this._id = ++Context._COUNT;\r\n        this._other = null;\r\n        this._renderNextSubmitIndex = 0;\r\n        this._path = null;\r\n        this._drawCount = 1;\r\n        this._width = Context._MAXSIZE;\r\n        this._height = Context._MAXSIZE;\r\n        this._renderCount = 0;\r\n        this._isConvexCmd = true; //arc等是convex的，moveTo,linTo就不是了\r\n        this._submits = null;\r\n        this._curSubmit = null;\r\n        this._submitKey = new _webgl_submit_SubmitKey__WEBPACK_IMPORTED_MODULE_35__[\"SubmitKey\"](); //当前将要使用的设置。用来跟上一次的_curSubmit比较\r\n        this._mesh = null; //用Mesh2D代替_vb,_ib. 当前使用的mesh\r\n        this._pathMesh = null; //矢量专用mesh。\r\n        this._triangleMesh = null; //drawTriangles专用mesh。由于ib不固定，所以不能与_mesh通用\r\n        this.meshlist = []; //本context用到的mesh\r\n        //public var _vbs:Array = [];\t//双buffer管理。TODO 临时删掉，需要mesh中加上\r\n        this._transedPoints = new Array(8); //临时的数组，用来计算4个顶点的转换后的位置。\r\n        this._temp4Points = new Array(8); //临时数组。用来保存4个顶点的位置。\r\n        this._clipRect = Context.MAXCLIPRECT;\r\n        //public var _transedClipInfo:Array = [0, 0, Context._MAXSIZE, 0, 0, Context._MAXSIZE];\t//应用矩阵后的clip。ox,oy, xx,xy,yx,yy \txx,xy等是缩放*宽高\r\n        this._globalClipMatrix = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_4__[\"Matrix\"](Context._MAXSIZE, 0, 0, Context._MAXSIZE, 0, 0); //用矩阵描述的clip信息。最终的点投影到这个矩阵上，在0~1之间就可见。\r\n        this._clipInCache = false; // 当前记录的clipinfo是在cacheas normal后赋值的，因为cacheas normal会去掉当前矩阵的tx，ty，所以需要记录一下，以便在是shader中恢复\r\n        this._clipInfoID = 0; //用来区分是不是clipinfo已经改变了\r\n        this._curMat = null;\r\n        //计算矩阵缩放的缓存\r\n        this._lastMatScaleX = 1.0;\r\n        this._lastMatScaleY = 1.0;\r\n        this._lastMat_a = 1.0;\r\n        this._lastMat_b = 0.0;\r\n        this._lastMat_c = 0.0;\r\n        this._lastMat_d = 1.0;\r\n        this._nBlendType = 0;\r\n        this._save = null;\r\n        this._targets = null;\r\n        this._charSubmitCache = null;\r\n        this._saveMark = null;\r\n        this._shader2D = new _webgl_shader_d2_Shader2D__WEBPACK_IMPORTED_MODULE_26__[\"Shader2D\"](); //\r\n        /**\r\n         * 所cacheAs精灵\r\n         * 对于cacheas bitmap的情况，如果图片还没准备好，需要有机会重画，所以要保存sprite。例如在图片\r\n         * 加载完成后，调用repaint\r\n         */\r\n        this.sprite = null;\r\n        this._italicDeg = 0; //文字的倾斜角度\r\n        this._lastTex = null; //上次使用的texture。主要是给fillrect用，假装自己也是一个drawtexture\r\n        this._fillColor = 0;\r\n        this._flushCnt = 0;\r\n        this.defTexture = null; //给fillrect用\r\n        this._colorFiler = null;\r\n        this.drawTexAlign = false; // 按照像素对齐\r\n        this._incache = false; // 正处在cacheas normal过程中\r\n        this.isMain = false; // 是否是主context\r\n        Context._contextcount++;\r\n        //_ib = IndexBuffer2D.QuadrangleIB;\r\n        if (!this.defTexture) {\r\n            var defTex2d = new _Texture2D__WEBPACK_IMPORTED_MODULE_24__[\"Texture2D\"](2, 2);\r\n            defTex2d.setPixels(new Uint8Array(16));\r\n            defTex2d.lock = true;\r\n            this.defTexture = new _Texture__WEBPACK_IMPORTED_MODULE_0__[\"Texture\"](defTex2d);\r\n        }\r\n        this._lastTex = this.defTexture;\r\n        this.clear();\r\n    }\r\n    static __init__() {\r\n        Context.MAXCLIPRECT = new _maths_Rectangle__WEBPACK_IMPORTED_MODULE_6__[\"Rectangle\"](0, 0, Context._MAXSIZE, Context._MAXSIZE);\r\n        ContextParams.DEFAULT = new ContextParams();\r\n        _webgl_canvas_WebGLCacheAsNormalCanvas__WEBPACK_IMPORTED_MODULE_15__[\"WebGLCacheAsNormalCanvas\"];\r\n    }\r\n    /**@private */\r\n    drawImage(...args) {\r\n    }\r\n    /**@private */\r\n    getImageData(...args) {\r\n    }\r\n    /**@private */\r\n    measureText(text) {\r\n        return null;\r\n    }\r\n    /**@private */\r\n    setTransform(...args) {\r\n    }\r\n    /**@private */\r\n    $transform(a, b, c, d, tx, ty) {\r\n    }\r\n    /**@private */\r\n    get lineJoin() {\r\n        return null;\r\n    }\r\n    /**@private */\r\n    set lineJoin(value) {\r\n    }\r\n    /**@private */\r\n    get lineCap() {\r\n        return null;\r\n    }\r\n    /**@private */\r\n    set lineCap(value) {\r\n    }\r\n    /**@private */\r\n    get miterLimit() {\r\n        return null;\r\n    }\r\n    /**@private */\r\n    set miterLimit(value) {\r\n    }\r\n    /**@private */\r\n    clearRect(x, y, width, height) {\r\n    }\r\n    /**@private */\r\n    //TODO:coverage\r\n    _drawRect(x, y, width, height, style) {\r\n        _utils_Stat__WEBPACK_IMPORTED_MODULE_9__[\"Stat\"].renderBatches++;\r\n        style && (this.fillStyle = style);\r\n        this.fillRect(x, y, width, height, null);\r\n    }\r\n    ///**@private */\r\n    //public function transformByMatrix(value:Matrix):void {\r\n    //this.transform(value.a, value.b, value.c, value.d, value.tx, value.ty);\r\n    //}\r\n    /**@private */\r\n    //TODO:coverage\r\n    //public function setTransformByMatrix(value:Matrix):void {\r\n    //\tthis.setTransform(value.a, value.b, value.c, value.d, value.tx, value.ty);\r\n    //}\r\n    /**@private */\r\n    //TODO:coverage\r\n    drawTexture2(x, y, pivotX, pivotY, m, args2) {\r\n    }\r\n    //=============新增==================\r\n    transformByMatrix(matrix, tx, ty) {\r\n        this.transform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx + tx, matrix.ty + ty);\r\n    }\r\n    saveTransform(matrix) {\r\n        this.save();\r\n    }\r\n    restoreTransform(matrix) {\r\n        this.restore();\r\n    }\r\n    drawRect(x, y, width, height, fillColor, lineColor, lineWidth) {\r\n        var ctx = this;\r\n        //填充矩形\r\n        if (fillColor != null) {\r\n            ctx.fillStyle = fillColor;\r\n            ctx.fillRect(x, y, width, height);\r\n        }\r\n        //绘制矩形边框\r\n        if (lineColor != null) {\r\n            ctx.strokeStyle = lineColor;\r\n            ctx.lineWidth = lineWidth;\r\n            ctx.strokeRect(x, y, width, height);\r\n        }\r\n    }\r\n    alpha(value) {\r\n        this.globalAlpha *= value;\r\n    }\r\n    //TODO:coverage\r\n    _transform(mat, pivotX, pivotY) {\r\n        this.translate(pivotX, pivotY);\r\n        this.transform(mat.a, mat.b, mat.c, mat.d, mat.tx, mat.ty);\r\n        this.translate(-pivotX, -pivotY);\r\n    }\r\n    _rotate(angle, pivotX, pivotY) {\r\n        this.translate(pivotX, pivotY);\r\n        this.rotate(angle);\r\n        this.translate(-pivotX, -pivotY);\r\n    }\r\n    _scale(scaleX, scaleY, pivotX, pivotY) {\r\n        this.translate(pivotX, pivotY);\r\n        this.scale(scaleX, scaleY);\r\n        this.translate(-pivotX, -pivotY);\r\n    }\r\n    _drawLine(x, y, fromX, fromY, toX, toY, lineColor, lineWidth, vid) {\r\n        this.beginPath();\r\n        this.strokeStyle = lineColor;\r\n        this.lineWidth = lineWidth;\r\n        this.moveTo(x + fromX, y + fromY);\r\n        this.lineTo(x + toX, y + toY);\r\n        this.stroke();\r\n    }\r\n    _drawLines(x, y, points, lineColor, lineWidth, vid) {\r\n        this.beginPath();\r\n        //x += args[0], y += args[1];\r\n        this.strokeStyle = lineColor;\r\n        this.lineWidth = lineWidth;\r\n        //var points:Array = args[2];\r\n        var i = 2, n = points.length;\r\n        this.addPath(points.slice(), false, false, x, y);\r\n        this.stroke();\r\n    }\r\n    drawCurves(x, y, points, lineColor, lineWidth) {\r\n        this.beginPath();\r\n        this.strokeStyle = lineColor;\r\n        this.lineWidth = lineWidth;\r\n        //var points:Array = args[2];\r\n        //x += args[0], y += args[1];\r\n        this.moveTo(x + points[0], y + points[1]);\r\n        var i = 2, n = points.length;\r\n        while (i < n) {\r\n            this.quadraticCurveTo(x + points[i++], y + points[i++], x + points[i++], y + points[i++]);\r\n        }\r\n        this.stroke();\r\n    }\r\n    _fillAndStroke(fillColor, strokeColor, lineWidth, isConvexPolygon = false) {\r\n        //绘制填充区域\r\n        if (fillColor != null) {\r\n            this.fillStyle = fillColor;\r\n            this.fill();\r\n        }\r\n        //绘制边框\r\n        if (strokeColor != null && lineWidth > 0) {\r\n            this.strokeStyle = strokeColor;\r\n            this.lineWidth = lineWidth;\r\n            this.stroke();\r\n        }\r\n    }\r\n    _drawCircle(x, y, radius, fillColor, lineColor, lineWidth, vid) {\r\n        _utils_Stat__WEBPACK_IMPORTED_MODULE_9__[\"Stat\"].renderBatches++;\r\n        this.beginPath(true);\r\n        this.arc(x, y, radius, 0, Context.PI2);\r\n        this.closePath();\r\n        //绘制\r\n        this._fillAndStroke(fillColor, lineColor, lineWidth);\r\n    }\r\n    //矢量方法\t\t\r\n    _drawPie(x, y, radius, startAngle, endAngle, fillColor, lineColor, lineWidth, vid) {\r\n        //移动中心点\r\n        //ctx.translate(x + args[0], y + args[1]);\r\n        //形成路径\r\n        this.beginPath();\r\n        this.moveTo(x, y);\r\n        this.arc(x, y, radius, startAngle, endAngle);\r\n        this.closePath();\r\n        //绘制\r\n        this._fillAndStroke(fillColor, lineColor, lineWidth);\r\n        //恢复中心点\r\n        //ctx.translate(-x - args[0], -y - args[1]);\r\n    }\r\n    _drawPoly(x, y, points, fillColor, lineColor, lineWidth, isConvexPolygon, vid) {\r\n        //var points:Array = args[2];\r\n        var i = 2, n = points.length;\r\n        this.beginPath();\r\n        //poly一定是close的\r\n        this.addPath(points.slice(), true, isConvexPolygon, x, y);\r\n        this.closePath();\r\n        this._fillAndStroke(fillColor, lineColor, lineWidth, isConvexPolygon);\r\n    }\r\n    _drawPath(x, y, paths, brush, pen) {\r\n        //形成路径\r\n        this.beginPath();\r\n        //x += args[0], y += args[1];\r\n        //var paths:Array = args[2];\r\n        for (var i = 0, n = paths.length; i < n; i++) {\r\n            var path = paths[i];\r\n            switch (path[0]) {\r\n                case \"moveTo\":\r\n                    this.moveTo(x + path[1], y + path[2]);\r\n                    break;\r\n                case \"lineTo\":\r\n                    this.lineTo(x + path[1], y + path[2]);\r\n                    break;\r\n                case \"arcTo\":\r\n                    this.arcTo(x + path[1], y + path[2], x + path[3], y + path[4], path[5]);\r\n                    break;\r\n                case \"closePath\":\r\n                    this.closePath();\r\n                    break;\r\n            }\r\n        }\r\n        //var brush:Object = args[3];\r\n        if (brush != null) {\r\n            this.fillStyle = brush.fillStyle;\r\n            this.fill();\r\n        }\r\n        //var pen:Object = args[4];\r\n        if (pen != null) {\r\n            this.strokeStyle = pen.strokeStyle;\r\n            this.lineWidth = pen.lineWidth || 1;\r\n            this.lineJoin = pen.lineJoin;\r\n            this.lineCap = pen.lineCap;\r\n            this.miterLimit = pen.miterLimit;\r\n            this.stroke();\r\n        }\r\n    }\r\n    static set2DRenderConfig() {\r\n        var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_2__[\"LayaGL\"].instance;\r\n        _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_11__[\"WebGLContext\"].setBlend(gl, true); //还原2D设置\r\n        _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_11__[\"WebGLContext\"].setBlendFunc(gl, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_11__[\"WebGLContext\"].ONE, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_11__[\"WebGLContext\"].ONE_MINUS_SRC_ALPHA);\r\n        _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_11__[\"WebGLContext\"].setDepthTest(gl, false);\r\n        _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_11__[\"WebGLContext\"].setCullFace(gl, false);\r\n        _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_11__[\"WebGLContext\"].setDepthMask(gl, true);\r\n        _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_11__[\"WebGLContext\"].setFrontFace(gl, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_11__[\"WebGLContext\"].CCW);\r\n        gl.viewport(0, 0, _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].width, _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].height); //还原2D视口\r\n    }\r\n    clearBG(r, g, b, a) {\r\n        var gl = _webgl_WebGL__WEBPACK_IMPORTED_MODULE_10__[\"WebGL\"].mainContext;\r\n        gl.clearColor(r, g, b, a);\r\n        gl.clear(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_11__[\"WebGLContext\"].COLOR_BUFFER_BIT);\r\n    }\r\n    //TODO:coverage\r\n    _getSubmits() {\r\n        return this._submits;\r\n    }\r\n    /**\r\n     * 释放占用内存\r\n     * @param\tkeepRT  是否保留rendertarget\r\n     */\r\n    _releaseMem(keepRT = false) {\r\n        if (!this._submits)\r\n            return;\r\n        this._curMat.destroy();\r\n        this._curMat = null;\r\n        this._shader2D.destroy();\r\n        this._shader2D = null;\r\n        this._charSubmitCache.clear();\r\n        for (var i = 0, n = this._submits._length; i < n; i++) {\r\n            this._submits[i].releaseRender();\r\n        }\r\n        this._submits.length = 0;\r\n        this._submits._length = 0;\r\n        this._submits = null;\r\n        this._curSubmit = null;\r\n        this._path = null;\r\n        //_other && (_other.font = null);\r\n        this._save = null;\r\n        var sz;\r\n        for (i = 0, sz = this.meshlist.length; i < sz; i++) {\r\n            var curm = this.meshlist[i];\r\n            curm.destroy();\r\n        }\r\n        this.meshlist.length = 0;\r\n        this.sprite = null;\r\n        if (!keepRT) {\r\n            this._targets && (this._targets.destroy());\r\n            this._targets = null;\r\n        }\r\n        //TODO mesh 暂时releaseMem了\r\n    }\r\n    /**\r\n     * 释放所有资源\r\n     * @param\tkeepRT  是否保留rendertarget\r\n     */\r\n    destroy(keepRT = false) {\r\n        --Context._contextcount;\r\n        this.sprite = null;\r\n        this._releaseMem(keepRT);\r\n        this._charSubmitCache.destroy();\r\n        //_ib && (_ib != IndexBuffer2D.QuadrangleIB) && _ib.releaseResource();\r\n        this._mesh.destroy();\r\n        if (!keepRT) {\r\n            this._targets && this._targets.destroy(); //用回收么？可能没什么重复利用的价值\r\n            this._targets = null;\r\n        }\r\n    }\r\n    clear() {\r\n        if (!this._submits) { //第一次\r\n            this._other = ContextParams.DEFAULT;\r\n            this._curMat = _maths_Matrix__WEBPACK_IMPORTED_MODULE_4__[\"Matrix\"].create();\r\n            this._charSubmitCache = new _webgl_text_CharSubmitCache__WEBPACK_IMPORTED_MODULE_38__[\"CharSubmitCache\"]();\r\n            //_vb = _vbs[0] = VertexBuffer2D.create( -1);\r\n            this._mesh = _webgl_utils_MeshQuadTexture__WEBPACK_IMPORTED_MODULE_40__[\"MeshQuadTexture\"].getAMesh(this.isMain);\r\n            this.meshlist.push(this._mesh);\r\n            this._pathMesh = _webgl_utils_MeshVG__WEBPACK_IMPORTED_MODULE_42__[\"MeshVG\"].getAMesh(this.isMain);\r\n            this.meshlist.push(this._pathMesh);\r\n            this._triangleMesh = _webgl_utils_MeshTexture__WEBPACK_IMPORTED_MODULE_41__[\"MeshTexture\"].getAMesh(this.isMain);\r\n            this.meshlist.push(this._triangleMesh);\r\n            //if(Config.smartCache) _vbs[1] = VertexBuffer2D.create( -1);\r\n            this._submits = [];\r\n            this._save = [_webgl_canvas_save_SaveMark__WEBPACK_IMPORTED_MODULE_18__[\"SaveMark\"].Create(this)];\r\n            this._save.length = 10;\r\n            this._shader2D = new _webgl_shader_d2_Shader2D__WEBPACK_IMPORTED_MODULE_26__[\"Shader2D\"]();\r\n        }\r\n        this._submitKey.clear();\r\n        //_vb = _vbs[_renderCount%2];\r\n        //_vb.clear();\r\n        this._mesh.clearVB();\r\n        this._renderCount++;\r\n        //_targets && (_targets.repaint = true);\r\n        this._drawCount = 1;\r\n        this._other = ContextParams.DEFAULT;\r\n        this._other.lineWidth = this._shader2D.ALPHA = 1.0;\r\n        this._nBlendType = 0;\r\n        this._clipRect = Context.MAXCLIPRECT;\r\n        this._curSubmit = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE;\r\n        _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE._ref = 0xFFFFFF;\r\n        _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE._numEle = 0;\r\n        this._shader2D.fillStyle = this._shader2D.strokeStyle = _webgl_canvas_DrawStyle__WEBPACK_IMPORTED_MODULE_13__[\"DrawStyle\"].DEFAULT;\r\n        for (var i = 0, n = this._submits._length; i < n; i++)\r\n            this._submits[i].releaseRender();\r\n        this._submits._length = 0;\r\n        this._curMat.identity();\r\n        this._other.clear();\r\n        this._saveMark = this._save[0];\r\n        this._save._length = 1;\r\n    }\r\n    /**\r\n     * 设置ctx的size，这个不允许直接设置，必须是canvas调过来的。所以这个函数里也不用考虑canvas相关的东西\r\n     * @param\tw\r\n     * @param\th\r\n     */\r\n    size(w, h) {\r\n        if (this._width != w || this._height != h) {\r\n            this._width = w;\r\n            this._height = h;\r\n            //TODO 问题：如果是rendertarget 计算内存会有问题，即canvas算一次，rt又算一次,所以这里要修改\r\n            //这种情况下canvas应该不占内存\r\n            if (this._targets) {\r\n                this._targets.destroy();\r\n                this._targets = new _RenderTexture2D__WEBPACK_IMPORTED_MODULE_23__[\"RenderTexture2D\"](w, h, _BaseTexture__WEBPACK_IMPORTED_MODULE_21__[\"BaseTexture\"].FORMAT_R8G8B8A8, -1);\r\n            }\r\n            //如果是主画布，要记录窗口大小\r\n            //如果不是 TODO\r\n            if (_renders_Render__WEBPACK_IMPORTED_MODULE_7__[\"Render\"]._context == this) {\r\n                _webgl_WebGL__WEBPACK_IMPORTED_MODULE_10__[\"WebGL\"].mainContext.viewport(0, 0, w, h);\r\n                _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].width = w;\r\n                _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].height = h;\r\n            }\r\n        }\r\n        if (w === 0 && h === 0)\r\n            this._releaseMem();\r\n    }\r\n    /**\r\n     * 当前canvas请求保存渲染结果。\r\n     * 实现：\r\n     * 如果value==true，就要给_target赋值\r\n     * @param value {Boolean}\r\n     */\r\n    set asBitmap(value) {\r\n        if (value) {\r\n            //缺省的RGB没有a，不合理把。况且没必要自定义一个常量。\r\n            //深度格式为-1表示不用深度缓存。\r\n            this._targets || (this._targets = new _RenderTexture2D__WEBPACK_IMPORTED_MODULE_23__[\"RenderTexture2D\"](this._width, this._height, _BaseTexture__WEBPACK_IMPORTED_MODULE_21__[\"BaseTexture\"].FORMAT_R8G8B8A8, -1));\r\n            if (!this._width || !this._height)\r\n                throw Error(\"asBitmap no size!\");\r\n        }\r\n        else {\r\n            this._targets && this._targets.destroy();\r\n            this._targets = null;\r\n        }\r\n    }\r\n    /**\r\n     * 获得当前矩阵的缩放值\r\n     * 避免每次都计算getScaleX\r\n     * @return\r\n     */\r\n    getMatScaleX() {\r\n        if (this._lastMat_a == this._curMat.a && this._lastMat_b == this._curMat.b)\r\n            return this._lastMatScaleX;\r\n        this._lastMatScaleX = this._curMat.getScaleX();\r\n        this._lastMat_a = this._curMat.a;\r\n        this._lastMat_b = this._curMat.b;\r\n        return this._lastMatScaleX;\r\n    }\r\n    getMatScaleY() {\r\n        if (this._lastMat_c == this._curMat.c && this._lastMat_d == this._curMat.d)\r\n            return this._lastMatScaleY;\r\n        this._lastMatScaleY = this._curMat.getScaleY();\r\n        this._lastMat_c = this._curMat.c;\r\n        this._lastMat_d = this._curMat.d;\r\n        return this._lastMatScaleY;\r\n    }\r\n    //TODO\r\n    setFillColor(color) {\r\n        this._fillColor = color;\r\n    }\r\n    getFillColor() {\r\n        return this._fillColor;\r\n    }\r\n    set fillStyle(value) {\r\n        if (!this._shader2D.fillStyle.equal(value)) {\r\n            _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].save(this, _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].TYPE_FILESTYLE, this._shader2D, false);\r\n            this._shader2D.fillStyle = _webgl_canvas_DrawStyle__WEBPACK_IMPORTED_MODULE_13__[\"DrawStyle\"].create(value);\r\n            this._submitKey.other = -this._shader2D.fillStyle.toInt();\r\n        }\r\n    }\r\n    get fillStyle() {\r\n        return this._shader2D.fillStyle;\r\n    }\r\n    set globalAlpha(value) {\r\n        value = Math.floor(value * 1000) / 1000;\r\n        if (value != this._shader2D.ALPHA) {\r\n            _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].save(this, _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].TYPE_ALPHA, this._shader2D, false);\r\n            this._shader2D.ALPHA = value;\r\n        }\r\n    }\r\n    get globalAlpha() {\r\n        return this._shader2D.ALPHA;\r\n    }\r\n    set textAlign(value) {\r\n        (this._other.textAlign === value) || (this._other = this._other.make(), _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].save(this, _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].TYPE_TEXTALIGN, this._other, false), this._other.textAlign = value);\r\n    }\r\n    get textAlign() {\r\n        return this._other.textAlign;\r\n    }\r\n    set textBaseline(value) {\r\n        (this._other.textBaseline === value) || (this._other = this._other.make(), _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].save(this, _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].TYPE_TEXTBASELINE, this._other, false), this._other.textBaseline = value);\r\n    }\r\n    get textBaseline() {\r\n        return this._other.textBaseline;\r\n    }\r\n    set globalCompositeOperation(value) {\r\n        var n = _webgl_canvas_BlendMode__WEBPACK_IMPORTED_MODULE_12__[\"BlendMode\"].TOINT[value];\r\n        n == null || (this._nBlendType === n) || (_webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].save(this, _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].TYPE_GLOBALCOMPOSITEOPERATION, this, true), this._curSubmit = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE, this._nBlendType = n /*, _shader2D.ALPHA = 1*/);\r\n    }\r\n    get globalCompositeOperation() {\r\n        return _webgl_canvas_BlendMode__WEBPACK_IMPORTED_MODULE_12__[\"BlendMode\"].NAMES[this._nBlendType];\r\n    }\r\n    set strokeStyle(value) {\r\n        this._shader2D.strokeStyle.equal(value) || (_webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].save(this, _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].TYPE_STROKESTYLE, this._shader2D, false), this._shader2D.strokeStyle = _webgl_canvas_DrawStyle__WEBPACK_IMPORTED_MODULE_13__[\"DrawStyle\"].create(value), this._submitKey.other = -this._shader2D.strokeStyle.toInt());\r\n    }\r\n    get strokeStyle() {\r\n        return this._shader2D.strokeStyle;\r\n    }\r\n    translate(x, y) {\r\n        if (x !== 0 || y !== 0) {\r\n            _webgl_canvas_save_SaveTranslate__WEBPACK_IMPORTED_MODULE_20__[\"SaveTranslate\"].save(this);\r\n            if (this._curMat._bTransform) {\r\n                _webgl_canvas_save_SaveTransform__WEBPACK_IMPORTED_MODULE_19__[\"SaveTransform\"].save(this);\r\n                //_curMat.transformPointN(Point.TEMP.setTo(x, y));\r\n                //x = Point.TEMP.x;\r\n                //y = Point.TEMP.y;\r\n                //translate的话，相当于在当前坐标系下移动x,y，所以直接修改_curMat,然后x,y就消失了。\r\n                this._curMat.tx += (x * this._curMat.a + y * this._curMat.c);\r\n                this._curMat.ty += (x * this._curMat.b + y * this._curMat.d);\r\n            }\r\n            else {\r\n                this._curMat.tx = x;\r\n                this._curMat.ty = y;\r\n            }\r\n        }\r\n    }\r\n    set lineWidth(value) {\r\n        (this._other.lineWidth === value) || (this._other = this._other.make(), _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].save(this, _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].TYPE_LINEWIDTH, this._other, false), this._other.lineWidth = value);\r\n    }\r\n    get lineWidth() {\r\n        return this._other.lineWidth;\r\n    }\r\n    save() {\r\n        this._save[this._save._length++] = _webgl_canvas_save_SaveMark__WEBPACK_IMPORTED_MODULE_18__[\"SaveMark\"].Create(this);\r\n    }\r\n    restore() {\r\n        var sz = this._save._length;\r\n        var lastBlend = this._nBlendType;\r\n        if (sz < 1)\r\n            return;\r\n        for (var i = sz - 1; i >= 0; i--) {\r\n            var o = this._save[i];\r\n            o.restore(this);\r\n            if (o.isSaveMark()) {\r\n                this._save._length = i;\r\n                return;\r\n            }\r\n        }\r\n        if (lastBlend != this._nBlendType) {\r\n            //阻止合并\r\n            this._curSubmit = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE;\r\n        }\r\n    }\r\n    set font(str) {\r\n        //if (str == _other.font.toString())\r\n        //\treturn;\r\n        this._other = this._other.make();\r\n        _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].save(this, _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].TYPE_FONT, this._other, false);\r\n        //_other.font === FontInContext.EMPTY ? (_other.font = new FontInContext(str)) : (_other.font.setFont(str));\r\n    }\r\n    //TODO:coverage\r\n    fillText(txt, x, y, fontStr, color, align) {\r\n        this._fillText(txt, null, x, y, fontStr, color, null, 0, null);\r\n    }\r\n    /**\r\n     *\r\n     * @param\ttxt\r\n     * @param\twords\t\tHTMLChar 数组，是已经在外面排好版的一个数组\r\n     * @param\tx\r\n     * @param\ty\r\n     * @param\tfontStr\r\n     * @param\tcolor\r\n     * @param\tstrokeColor\r\n     * @param\tlineWidth\r\n     * @param\ttextAlign\r\n     * @param\tunderLine\r\n     */\r\n    _fillText(txt, words, x, y, fontStr, color, strokeColor, lineWidth, textAlign, underLine = 0) {\r\n        /*\r\n        if (!window.testft) {\r\n            //测试文字\r\n            var teststr = 'a丠両丢丣两严並丧丨丩个丫丬中丮丯';\r\n            _charBook.filltext(this, teststr, 0, 0, 'normal 100 66px 华文行楷', '#ff0000');\r\n            window.testft = true;\r\n        }\r\n        */\r\n        if (txt)\r\n            Context._textRender.filltext(this, txt, x, y, fontStr, color, strokeColor, lineWidth, textAlign, underLine);\r\n        else if (words)\r\n            Context._textRender.fillWords(this, words, x, y, fontStr, color, strokeColor, lineWidth);\r\n    }\r\n    _fast_filltext(data, x, y, fontObj, color, strokeColor, lineWidth, textAlign, underLine = 0) {\r\n        Context._textRender._fast_filltext(this, data, null, x, y, fontObj, color, strokeColor, lineWidth, textAlign, underLine);\r\n    }\r\n    //TODO:coverage\r\n    fillWords(words, x, y, fontStr, color) {\r\n        this._fillText(null, words, x, y, fontStr, color, null, -1, null, 0);\r\n    }\r\n    //TODO:coverage\r\n    fillBorderWords(words, x, y, font, color, borderColor, lineWidth) {\r\n        this._fillBorderText(null, words, x, y, font, color, borderColor, lineWidth, null);\r\n    }\r\n    drawText(text, x, y, font, color, textAlign) {\r\n        this._fillText(text, null, x, y, font, _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_8__[\"ColorUtils\"].create(color).strColor, null, -1, textAlign);\r\n    }\r\n    //public function fillText(txt:*, x:Number, y:Number, fontStr:String, color:String, textAlign:String):void {\r\n    //_fillText(txt, null, x, y, fontStr, color, null, -1, textAlign);\r\n    //}\r\n    /**\r\n     * 只画边框\r\n     * @param\ttext\r\n     * @param\tx\r\n     * @param\ty\r\n     * @param\tfont\r\n     * @param\tcolor\r\n     * @param\tlineWidth\r\n     * @param\ttextAlign\r\n     */\r\n    strokeWord(text, x, y, font, color, lineWidth, textAlign) {\r\n        //webgl绘制不了，需要解决\r\n        this._fillText(text, null, x, y, font, null, _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_8__[\"ColorUtils\"].create(color).strColor, lineWidth || 1, textAlign);\r\n    }\r\n    /**\r\n     * 即画文字又画边框\r\n     * @param\ttxt\r\n     * @param\tx\r\n     * @param\ty\r\n     * @param\tfontStr\r\n     * @param\tfillColor\r\n     * @param\tborderColor\r\n     * @param\tlineWidth\r\n     * @param\ttextAlign\r\n     */\r\n    fillBorderText(txt, x, y, fontStr, fillColor, borderColor, lineWidth, textAlign) {\r\n        //webgl绘制不了，需要解决\r\n        this._fillBorderText(txt, null, x, y, fontStr, _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_8__[\"ColorUtils\"].create(fillColor).strColor, _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_8__[\"ColorUtils\"].create(borderColor).strColor, lineWidth, textAlign);\r\n    }\r\n    _fillBorderText(txt, words, x, y, fontStr, fillColor, borderColor, lineWidth, textAlign) {\r\n        this._fillText(txt, words, x, y, fontStr, fillColor, borderColor, lineWidth || 1, textAlign);\r\n    }\r\n    _fillRect(x, y, width, height, rgba) {\r\n        var submit = this._curSubmit;\r\n        var sameKey = submit && (submit._key.submitType === _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].KEY_DRAWTEXTURE && submit._key.blendShader === this._nBlendType);\r\n        if (this._mesh.vertNum + 4 > Context._MAXVERTNUM) {\r\n            this._mesh = _webgl_utils_MeshQuadTexture__WEBPACK_IMPORTED_MODULE_40__[\"MeshQuadTexture\"].getAMesh(this.isMain); //创建新的mesh  TODO 如果_mesh不是常见格式，这里就不能这么做了。以后把_mesh单独表示成常用模式 \r\n            this.meshlist.push(this._mesh);\r\n            sameKey = false;\r\n        }\r\n        //clipinfo\r\n        sameKey && (sameKey = sameKey && this.isSameClipInfo(submit));\r\n        this.transformQuad(x, y, width, height, 0, this._curMat, this._transedPoints);\r\n        if (!this.clipedOff(this._transedPoints)) {\r\n            this._mesh.addQuad(this._transedPoints, _Texture__WEBPACK_IMPORTED_MODULE_0__[\"Texture\"].NO_UV, rgba, false);\r\n            //if (GlUtils.fillRectImgVb(_mesh._vb, _clipRect, x, y, width, height, Texture.DEF_UV, _curMat, rgba,this)){\r\n            if (!sameKey) {\r\n                submit = this._curSubmit = _webgl_submit_SubmitTexture__WEBPACK_IMPORTED_MODULE_37__[\"SubmitTexture\"].create(this, this._mesh, _webgl_shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_29__[\"Value2D\"].create(_webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_27__[\"ShaderDefines2D\"].TEXTURE2D, 0));\r\n                this._submits[this._submits._length++] = submit;\r\n                this._copyClipInfo(submit, this._globalClipMatrix);\r\n                submit.shaderValue.textureHost = this._lastTex;\r\n                //这里有一个问题。例如 clip1, drawTex(tex1), clip2, fillRect, drawTex(tex2)\t会被分成3个submit，\r\n                //submit._key.copyFrom2(_submitKey, SubmitBase.KEY_DRAWTEXTURE, (_lastTex && _lastTex.bitmap)?_lastTex.bitmap.id: -1);\r\n                submit._key.other = (this._lastTex && this._lastTex.bitmap) ? this._lastTex.bitmap.id : -1;\r\n                submit._renderType = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].TYPE_TEXTURE;\r\n            }\r\n            this._curSubmit._numEle += 6;\r\n            this._mesh.indexNum += 6;\r\n            this._mesh.vertNum += 4;\r\n        }\r\n    }\r\n    fillRect(x, y, width, height, fillStyle) {\r\n        var drawstyle = fillStyle ? _webgl_canvas_DrawStyle__WEBPACK_IMPORTED_MODULE_13__[\"DrawStyle\"].create(fillStyle) : this._shader2D.fillStyle;\r\n        //var rgb = drawstyle.toInt() ;\r\n        //由于显卡的格式是 rgba，所以需要处理一下\r\n        //var rgba:uint = ((rgb & 0xff0000) >> 16) | (rgb & 0x00ff00) | ((rgb & 0xff) << 16) | (_shader2D.ALPHA * 255) << 24;\r\n        var rgba = this.mixRGBandAlpha(drawstyle.toInt());\r\n        this._fillRect(x, y, width, height, rgba);\r\n    }\r\n    //TODO:coverage\r\n    fillTexture(texture, x, y, width, height, type, offset, other) {\r\n        //test\r\n        /*\r\n        var aa = 95 / 274, bb = 136 / 341, cc = (95 + 41) / 274, dd = (136 + 48) / 341;\r\n        texture.uv = [aa,bb, cc,bb, cc,dd, aa,dd];\r\n        texture.width = 41;\r\n        texture.height = 48;\r\n        */\r\n        //test\r\n        if (!texture._getSource()) {\r\n            this.sprite && _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.callLater(this, this._repaintSprite);\r\n            return;\r\n        }\r\n        this._fillTexture(texture, texture.width, texture.height, texture.uvrect, x, y, width, height, type, offset.x, offset.y);\r\n    }\r\n    _fillTexture(texture, texw, texh, texuvRect, x, y, width, height, type, offsetx, offsety) {\r\n        var submit = this._curSubmit;\r\n        var sameKey = false;\r\n        if (this._mesh.vertNum + 4 > Context._MAXVERTNUM) {\r\n            this._mesh = _webgl_utils_MeshQuadTexture__WEBPACK_IMPORTED_MODULE_40__[\"MeshQuadTexture\"].getAMesh(this.isMain);\r\n            this.meshlist.push(this._mesh);\r\n            sameKey = false;\r\n        }\r\n        //filltexture相关逻辑。计算rect大小以及对应的uv\r\n        var repeatx = true;\r\n        var repeaty = true;\r\n        switch (type) {\r\n            case \"repeat\": break;\r\n            case \"repeat-x\":\r\n                repeaty = false;\r\n                break;\r\n            case \"repeat-y\":\r\n                repeatx = false;\r\n                break;\r\n            case \"no-repeat\":\r\n                repeatx = repeaty = false;\r\n                break;\r\n            default: break;\r\n        }\r\n        //用 _temp4Points 来存计算出来的顶点的uv。这里的uv用0到1表示纹理的uv区域。这样便于计算，直到shader中才真的转成了实际uv\r\n        var uv = this._temp4Points;\r\n        var stu = 0; //uv起点\r\n        var stv = 0;\r\n        var stx = 0, sty = 0, edx = 0, edy = 0;\r\n        if (offsetx < 0) {\r\n            stx = x;\r\n            stu = (-offsetx % texw) / texw; //有偏移的情况下的u不是从头开始\r\n        }\r\n        else {\r\n            stx = x + offsetx;\r\n        }\r\n        if (offsety < 0) {\r\n            sty = y;\r\n            stv = (-offsety % texh) / texh; //有偏移的情况下的v不是从头开始\r\n        }\r\n        else {\r\n            sty = y + offsety;\r\n        }\r\n        edx = x + width;\r\n        edy = y + height;\r\n        (!repeatx) && (edx = Math.min(edx, x + offsetx + texw)); //x不重复的话，最多只画一个\r\n        (!repeaty) && (edy = Math.min(edy, y + offsety + texh)); //y不重复的话，最多只画一个\r\n        if (edx < x || edy < y)\r\n            return;\r\n        if (stx > edx || sty > edy)\r\n            return;\r\n        //计算最大uv\r\n        var edu = (edx - x - offsetx) / texw;\r\n        var edv = (edy - y - offsety) / texh;\r\n        this.transformQuad(stx, sty, edx - stx, edy - sty, 0, this._curMat, this._transedPoints);\r\n        //四个点对应的uv。必须在transformQuad后面，因为共用了_temp4Points\r\n        uv[0] = stu;\r\n        uv[1] = stv;\r\n        uv[2] = edu;\r\n        uv[3] = stv;\r\n        uv[4] = edu;\r\n        uv[5] = edv;\r\n        uv[6] = stu;\r\n        uv[7] = edv;\r\n        if (!this.clipedOff(this._transedPoints)) {\r\n            //不依赖于wrapmode了，都走filltexture流程，自己修改纹理坐标\r\n            //tex2d.wrapModeU = BaseTexture.WARPMODE_REPEAT;\t//这里会有重复判断\r\n            //tex2d.wrapModeV = BaseTexture.WARPMODE_REPEAT;\r\n            //var rgba:int = mixRGBandAlpha(0xffffffff);\r\n            //rgba = _mixRGBandAlpha(rgba, alpha);\t这个函数有问题，不能连续调用，输出作为输入\r\n            var rgba = this._mixRGBandAlpha(0xffffffff, this._shader2D.ALPHA);\r\n            this._mesh.addQuad(this._transedPoints, uv, rgba, true);\r\n            var sv = _webgl_shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_29__[\"Value2D\"].create(_webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_27__[\"ShaderDefines2D\"].TEXTURE2D, 0);\r\n            //这个优化先不要了，因为没太弄明白wrapmode的设置，总是不起作用。\r\n            //if(texture.uvrect[2]<1.0||texture.uvrect[3]<1.0)//这表示是大图集中的一部分，只有这时候才用特殊shader\r\n            sv.defines.add(_webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_27__[\"ShaderDefines2D\"].FILLTEXTURE);\r\n            sv.u_TexRange = texuvRect;\r\n            submit = this._curSubmit = _webgl_submit_SubmitTexture__WEBPACK_IMPORTED_MODULE_37__[\"SubmitTexture\"].create(this, this._mesh, sv);\r\n            this._submits[this._submits._length++] = submit;\r\n            this._copyClipInfo(submit, this._globalClipMatrix);\r\n            submit.shaderValue.textureHost = texture;\r\n            submit._renderType = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].TYPE_TEXTURE;\r\n            this._curSubmit._numEle += 6;\r\n            this._mesh.indexNum += 6;\r\n            this._mesh.vertNum += 4;\r\n        }\r\n        this.breakNextMerge(); //暂不合并\r\n    }\r\n    /**\r\n     * 反正只支持一种filter，就不要叫setFilter了，直接叫setColorFilter\r\n     * @param\tvalue\r\n     */\r\n    setColorFilter(filter) {\r\n        _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].save(this, _webgl_canvas_save_SaveBase__WEBPACK_IMPORTED_MODULE_16__[\"SaveBase\"].TYPE_COLORFILTER, this, true);\r\n        //_shader2D.filters = value;\r\n        this._colorFiler = filter;\r\n        this._curSubmit = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE;\r\n        //_reCalculateBlendShader();\r\n    }\r\n    drawTexture(tex, x, y, width, height) {\r\n        this._drawTextureM(tex, x, y, width, height, null, 1, null);\r\n    }\r\n    drawTextures(tex, pos, tx, ty) {\r\n        if (!tex._getSource()) //source内调用tex.active();\r\n         {\r\n            this.sprite && _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.callLater(this, this._repaintSprite);\r\n            return;\r\n        }\r\n        //TODO 还没实现\r\n        var n = pos.length / 2;\r\n        var ipos = 0;\r\n        var bmpid = tex.bitmap.id;\r\n        for (var i = 0; i < n; i++) {\r\n            this._inner_drawTexture(tex, bmpid, pos[ipos++] + tx, pos[ipos++] + ty, 0, 0, null, null, 1.0, false);\r\n        }\r\n        /*\r\n        var pre:Rectangle = _clipRect;\r\n        _clipRect = MAXCLIPRECT;\r\n        if (!_drawTextureM(tex, pos[0], pos[1], tex.width, tex.height,null, 1)) {\r\n            throw \"drawTextures err\";\r\n            return;\r\n        }\r\n        _clipRect = pre;\r\n        \r\n        Stat.drawCall++;//= pos.length / 2;\r\n        \r\n        if (pos.length < 4)\r\n            return;\r\n        \r\n        var finalVB:VertexBuffer2D = _curSubmit._vb || _vb;\r\n        var sx:Number = _curMat.a, sy:Number = _curMat.d;\r\n        var vpos:int = finalVB._byteLength >> 2;// + Context._RECTVBSIZE;\r\n        finalVB.byteLength = finalVB._byteLength + (pos.length / 2 - 1) * Context._RECTVBSIZEBYTE;\r\n        var vbdata:Float32Array = finalVB.getFloat32Array();\r\n        for (var i:int = 2, sz:int = pos.length; i < sz; i += 2) {\r\n            GlUtils.copyPreImgVb(finalVB,vpos, (pos[i] - pos[i - 2]) * sx, (pos[i + 1] - pos[i - 1]) * sy,vbdata);\r\n            _curSubmit._numEle += 6;\r\n            vpos += Context._RECTVBSIZE;\r\n        }\r\n        */\r\n    }\r\n    /**\r\n     * 为drawTexture添加一个新的submit。类型是 SubmitTexture\r\n     * @param\tvbSize\r\n     * @param\talpha\r\n     * @param\twebGLImg\r\n     * @param\ttex\r\n     */\r\n    //TODO:coverage\r\n    _drawTextureAddSubmit(imgid, tex) {\r\n        //var alphaBack:Number = shader.ALPHA;\r\n        //shader.ALPHA *= alpha;\r\n        var submit = null;\r\n        submit = _webgl_submit_SubmitTexture__WEBPACK_IMPORTED_MODULE_37__[\"SubmitTexture\"].create(this, this._mesh, _webgl_shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_29__[\"Value2D\"].create(_webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_27__[\"ShaderDefines2D\"].TEXTURE2D, 0));\r\n        this._submits[this._submits._length++] = submit;\r\n        submit.shaderValue.textureHost = tex;\r\n        //submit._key.copyFrom2(_submitKey, SubmitBase.KEY_DRAWTEXTURE, imgid);\r\n        submit._key.other = imgid;\r\n        //submit._key.alpha = shader.ALPHA;\r\n        submit._renderType = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].TYPE_TEXTURE;\r\n        this._curSubmit = submit;\r\n        //shader.ALPHA = alphaBack;\r\n    }\r\n    _drawTextureM(tex, x, y, width, height, m, alpha, uv) {\r\n        // 注意sprite要保存，因为后面会被冲掉\r\n        var cs = this.sprite;\r\n        if (!tex._getSource(function () {\r\n            if (cs) {\r\n                cs.repaint(); // 原来是calllater，callater对于cacheas normal是没有机会执行的\r\n            }\r\n        })) { //source内调用tex.active();\r\n            return false;\r\n        }\r\n        return this._inner_drawTexture(tex, tex.bitmap.id, x, y, width, height, m, uv, alpha, false);\r\n    }\r\n    _drawRenderTexture(tex, x, y, width, height, m, alpha, uv) {\r\n        return this._inner_drawTexture(tex, -1, x, y, width, height, m, uv, 1.0, false);\r\n    }\r\n    //TODO:coverage\r\n    submitDebugger() {\r\n        this._submits[this._submits._length++] = _webgl_submit_SubmitCMD__WEBPACK_IMPORTED_MODULE_33__[\"SubmitCMD\"].create([], function () { debugger; }, this);\r\n    }\r\n    /*\r\n    private function copyClipInfo(submit:Submit, clipInfo:Array):void {\r\n        var cd:Array = submit.shaderValue.clipDir;\r\n        cd[0] = clipInfo[2]; cd[1] = clipInfo[3]; cd[2] = clipInfo[4]; cd[3] = clipInfo[5];\r\n        var cp:Array = submit.shaderValue.clipRect;\r\n        cp[0] = clipInfo[0]; cp[1] = clipInfo[1];\r\n        submit.clipInfoID = this._clipInfoID;\r\n    }\r\n    */\r\n    _copyClipInfo(submit, clipInfo) {\r\n        var cm = submit.shaderValue.clipMatDir;\r\n        cm[0] = clipInfo.a;\r\n        cm[1] = clipInfo.b;\r\n        cm[2] = clipInfo.c;\r\n        cm[3] = clipInfo.d;\r\n        var cmp = submit.shaderValue.clipMatPos;\r\n        cmp[0] = clipInfo.tx;\r\n        cmp[1] = clipInfo.ty;\r\n        submit.clipInfoID = this._clipInfoID;\r\n        if (this._clipInCache) {\r\n            submit.shaderValue.clipOff[0] = 1;\r\n        }\r\n    }\r\n    isSameClipInfo(submit) {\r\n        return (submit.clipInfoID === this._clipInfoID);\r\n        /*\r\n        var cd:Array = submit.shaderValue.clipDir;\r\n        var cp:Array = submit.shaderValue.clipRect;\r\n        \r\n        if (clipInfo[0] != cp[0] || clipInfo[1] != cp[1] || clipInfo[2] != cd[0] || clipInfo[3] != cd[1] || clipInfo[4] != cd[2] || clipInfo[5] != cd[3] )\r\n            return false;\r\n        return true;\r\n        */\r\n    }\r\n    /**\r\n     * 这个还是会检查是否合并\r\n     * @param\ttex\r\n     * @param\tminVertNum\r\n     */\r\n    _useNewTex2DSubmit(tex, minVertNum) {\r\n        //var sameKey:Boolean = tex.bitmap.id >= 0 && preKey.submitType === SubmitBase.KEY_DRAWTEXTURE && preKey.other === tex.bitmap.id ;\r\n        if (this._mesh.vertNum + minVertNum > Context._MAXVERTNUM) {\r\n            this._mesh = _webgl_utils_MeshQuadTexture__WEBPACK_IMPORTED_MODULE_40__[\"MeshQuadTexture\"].getAMesh(this.isMain); //创建新的mesh  TODO 如果_mesh不是常见格式，这里就不能这么做了。以后把_mesh单独表示成常用模式 \r\n            this.meshlist.push(this._mesh);\r\n            //sameKey = false;\r\n        }\r\n        var submit = _webgl_submit_SubmitTexture__WEBPACK_IMPORTED_MODULE_37__[\"SubmitTexture\"].create(this, this._mesh, _webgl_shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_29__[\"Value2D\"].create(_webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_27__[\"ShaderDefines2D\"].TEXTURE2D, 0));\r\n        this._submits[this._submits._length++] = this._curSubmit = submit;\r\n        submit.shaderValue.textureHost = tex;\r\n        this._copyClipInfo(submit, this._globalClipMatrix);\r\n    }\r\n    /**\r\n     * 使用上面的设置（texture，submit，alpha，clip），画一个rect\r\n     */\r\n    _drawTexRect(x, y, w, h, uv) {\r\n        this.transformQuad(x, y, w, h, this._italicDeg, this._curMat, this._transedPoints);\r\n        //这个是给文字用的，为了清晰，必须要按照屏幕像素对齐，并且四舍五入。\r\n        var ops = this._transedPoints;\r\n        ops[0] = (ops[0] + 0.5) | 0;\r\n        ops[1] = (ops[1] + 0.5) | 0;\r\n        ops[2] = (ops[2] + 0.5) | 0;\r\n        ops[3] = (ops[3] + 0.5) | 0;\r\n        ops[4] = (ops[4] + 0.5) | 0;\r\n        ops[5] = (ops[5] + 0.5) | 0;\r\n        ops[6] = (ops[6] + 0.5) | 0;\r\n        ops[7] = (ops[7] + 0.5) | 0;\r\n        if (!this.clipedOff(this._transedPoints)) {\r\n            this._mesh.addQuad(this._transedPoints, uv, this._fillColor, true);\r\n            this._curSubmit._numEle += 6;\r\n            this._mesh.indexNum += 6;\r\n            this._mesh.vertNum += 4;\r\n        }\r\n    }\r\n    drawCallOptimize(enbale) {\r\n        this._charSubmitCache.enable(enbale, this);\r\n        return enbale;\r\n    }\r\n    /**\r\n     *\r\n     * @param\ttex {Texture | RenderTexture }\r\n     * @param  imgid 图片id用来比较合并的\r\n     * @param\tx\r\n     * @param\ty\r\n     * @param\twidth\r\n     * @param\theight\r\n     * @param\tm\r\n     * @param\talpha\r\n     * @param\tuv\r\n     * @return\r\n     */\r\n    _inner_drawTexture(tex, imgid, x, y, width, height, m, uv, alpha, lastRender) {\r\n        var preKey = this._curSubmit._key;\r\n        uv = uv || tex._uv;\r\n        //为了优化，如果上次是画三角形，并且贴图相同，会认为他们是一组的，把这个也转成三角形，以便合并。\r\n        //因为好多动画是drawTexture和drawTriangle混用的\r\n        if (preKey.submitType === _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].KEY_TRIANGLES && preKey.other === imgid) {\r\n            var tv = this._drawTexToDrawTri_Vert;\r\n            tv[0] = x;\r\n            tv[1] = y;\r\n            tv[2] = x + width, tv[3] = y, tv[4] = x + width, tv[5] = y + height, tv[6] = x, tv[7] = y + height;\r\n            this._drawTriUseAbsMatrix = true;\r\n            var tuv = this._tempUV;\r\n            tuv[0] = uv[0];\r\n            tuv[1] = uv[1];\r\n            tuv[2] = uv[2];\r\n            tuv[3] = uv[3];\r\n            tuv[4] = uv[4];\r\n            tuv[5] = uv[5];\r\n            tuv[6] = uv[6];\r\n            tuv[7] = uv[7];\r\n            this.drawTriangles(tex, 0, 0, tv, tuv, this._drawTexToDrawTri_Index, m, alpha, null, null); //用tuv而不是uv会提高效率\r\n            this._drawTriUseAbsMatrix = false;\r\n            return true;\r\n        }\r\n        var mesh = this._mesh;\r\n        var submit = this._curSubmit;\r\n        var ops = lastRender ? this._charSubmitCache.getPos() : this._transedPoints;\r\n        //凡是这个都是在_mesh上操作，不用考虑samekey\r\n        this.transformQuad(x, y, width || tex.width, height || tex.height, this._italicDeg, m || this._curMat, ops);\r\n        if (this.drawTexAlign) {\r\n            var round = Math.round;\r\n            ops[0] = round(ops[0]); //  (ops[0] + 0.5) | 0;\t// 这么计算负的时候会有问题\r\n            ops[1] = round(ops[1]);\r\n            ops[2] = round(ops[2]);\r\n            ops[3] = round(ops[3]);\r\n            ops[4] = round(ops[4]);\r\n            ops[5] = round(ops[5]);\r\n            ops[6] = round(ops[6]);\r\n            ops[7] = round(ops[7]);\r\n            this.drawTexAlign = false; //一次性的\r\n        }\r\n        var rgba = this._mixRGBandAlpha(0xffffffff, this._shader2D.ALPHA * alpha);\r\n        //lastRender = false;\r\n        if (lastRender) {\r\n            this._charSubmitCache.add(this, tex, imgid, ops, uv, rgba);\r\n            return true;\r\n        }\r\n        this._drawCount++;\r\n        var sameKey = imgid >= 0 && preKey.submitType === _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].KEY_DRAWTEXTURE && preKey.other === imgid;\r\n        //clipinfo\r\n        sameKey && (sameKey = sameKey && this.isSameClipInfo(submit));\r\n        this._lastTex = tex;\r\n        if (mesh.vertNum + 4 > Context._MAXVERTNUM) {\r\n            mesh = this._mesh = _webgl_utils_MeshQuadTexture__WEBPACK_IMPORTED_MODULE_40__[\"MeshQuadTexture\"].getAMesh(this.isMain); //创建新的mesh  TODO 如果_mesh不是常见格式，这里就不能这么做了。以后把_mesh单独表示成常用模式 \r\n            this.meshlist.push(mesh);\r\n            sameKey = false; //新的mesh不能算samekey了\r\n        }\r\n        {\r\n            mesh.addQuad(ops, uv, rgba, true);\r\n            if (!sameKey) {\r\n                this._submits[this._submits._length++] = this._curSubmit = submit = _webgl_submit_SubmitTexture__WEBPACK_IMPORTED_MODULE_37__[\"SubmitTexture\"].create(this, mesh, _webgl_shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_29__[\"Value2D\"].create(_webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_27__[\"ShaderDefines2D\"].TEXTURE2D, 0));\r\n                submit.shaderValue.textureHost = tex;\r\n                submit._key.other = imgid;\r\n                this._copyClipInfo(submit, this._globalClipMatrix);\r\n            }\r\n            submit._numEle += 6;\r\n            mesh.indexNum += 6;\r\n            mesh.vertNum += 4;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * 转换4个顶点。为了效率这个不做任何检查。需要调用者的配合。\r\n     * @param\ta\t\t输入。8个元素表示4个点\r\n     * @param\tout\t\t输出\r\n     */\r\n    transform4Points(a, m, out) {\r\n        /*\r\n            out[0] = 846;\r\n            out[1] = 656;\r\n            out[2] = 881;\r\n            out[3] = 657;\r\n            out[4] = 880;\r\n            out[5] = 732;\r\n            out[6] = 844;\r\n            out[7] = 731;\r\n            return ;\r\n        */\r\n        //var m:Matrix = _curMat;\r\n        var tx = m.tx;\r\n        var ty = m.ty;\r\n        var ma = m.a;\r\n        var mb = m.b;\r\n        var mc = m.c;\r\n        var md = m.d;\r\n        var a0 = a[0];\r\n        var a1 = a[1];\r\n        var a2 = a[2];\r\n        var a3 = a[3];\r\n        var a4 = a[4];\r\n        var a5 = a[5];\r\n        var a6 = a[6];\r\n        var a7 = a[7];\r\n        if (m._bTransform) {\r\n            out[0] = a0 * ma + a1 * mc + tx;\r\n            out[1] = a0 * mb + a1 * md + ty;\r\n            out[2] = a2 * ma + a3 * mc + tx;\r\n            out[3] = a2 * mb + a3 * md + ty;\r\n            out[4] = a4 * ma + a5 * mc + tx;\r\n            out[5] = a4 * mb + a5 * md + ty;\r\n            out[6] = a6 * ma + a7 * mc + tx;\r\n            out[7] = a6 * mb + a7 * md + ty;\r\n        }\r\n        else {\r\n            out[0] = a0 + tx;\r\n            out[1] = a1 + ty;\r\n            out[2] = a2 + tx;\r\n            out[3] = a3 + ty;\r\n            out[4] = a4 + tx;\r\n            out[5] = a5 + ty;\r\n            out[6] = a6 + tx;\r\n            out[7] = a7 + ty;\r\n        }\r\n    }\r\n    /**\r\n     * pt所描述的多边形完全在clip外边，整个被裁掉了\r\n     * @param\tpt\r\n     * @return\r\n     */\r\n    clipedOff(pt) {\r\n        //TODO\r\n        if (this._clipRect.width <= 0 || this._clipRect.height <= 0)\r\n            return true;\r\n        return false;\r\n    }\r\n    /**\r\n     * 应用当前矩阵。把转换后的位置放到输出数组中。\r\n     * @param\tx\r\n     * @param\ty\r\n     * @param\tw\r\n     * @param\th\r\n     * @param   italicDeg 倾斜角度，单位是度。0度无，目前是下面不动。以后要做成可调的\r\n     */\r\n    transformQuad(x, y, w, h, italicDeg, m, out) {\r\n        /*\r\n        out[0] = 100.1; out[1] = 100.1;\r\n        out[2] = 101.1; out[3] = 100.1;\r\n        out[4] = 101.1; out[5] = 101.1;\r\n        out[6] = 100.1; out[7] = 101.1;\r\n        return;\r\n        */\r\n        var xoff = 0;\r\n        if (italicDeg != 0) {\r\n            xoff = Math.tan(italicDeg * Math.PI / 180) * h;\r\n        }\r\n        var maxx = x + w;\r\n        var maxy = y + h;\r\n        var tx = m.tx;\r\n        var ty = m.ty;\r\n        var ma = m.a;\r\n        var mb = m.b;\r\n        var mc = m.c;\r\n        var md = m.d;\r\n        var a0 = x + xoff;\r\n        var a1 = y;\r\n        var a2 = maxx + xoff;\r\n        var a3 = y;\r\n        var a4 = maxx;\r\n        var a5 = maxy;\r\n        var a6 = x;\r\n        var a7 = maxy;\r\n        if (m._bTransform) {\r\n            out[0] = a0 * ma + a1 * mc + tx;\r\n            out[1] = a0 * mb + a1 * md + ty;\r\n            out[2] = a2 * ma + a3 * mc + tx;\r\n            out[3] = a2 * mb + a3 * md + ty;\r\n            out[4] = a4 * ma + a5 * mc + tx;\r\n            out[5] = a4 * mb + a5 * md + ty;\r\n            out[6] = a6 * ma + a7 * mc + tx;\r\n            out[7] = a6 * mb + a7 * md + ty;\r\n        }\r\n        else {\r\n            out[0] = a0 + tx;\r\n            out[1] = a1 + ty;\r\n            out[2] = a2 + tx;\r\n            out[3] = a3 + ty;\r\n            out[4] = a4 + tx;\r\n            out[5] = a5 + ty;\r\n            out[6] = a6 + tx;\r\n            out[7] = a7 + ty;\r\n        }\r\n    }\r\n    pushRT() {\r\n        this.addRenderObject(_webgl_submit_SubmitCMD__WEBPACK_IMPORTED_MODULE_33__[\"SubmitCMD\"].create(null, _RenderTexture2D__WEBPACK_IMPORTED_MODULE_23__[\"RenderTexture2D\"].pushRT, this));\r\n    }\r\n    popRT() {\r\n        this.addRenderObject(_webgl_submit_SubmitCMD__WEBPACK_IMPORTED_MODULE_33__[\"SubmitCMD\"].create(null, _RenderTexture2D__WEBPACK_IMPORTED_MODULE_23__[\"RenderTexture2D\"].popRT, this));\r\n        this.breakNextMerge();\r\n    }\r\n    //TODO:coverage\r\n    useRT(rt) {\r\n        //这里并没有做cliprect的保存恢复。因为认为调用这个函数的话，就是完全不走context流程了，完全自己控制。\r\n        function _use(rt) {\r\n            if (!rt) {\r\n                throw 'error useRT';\r\n            }\r\n            else {\r\n                rt.start();\r\n                rt.clear(0, 0, 0, 0);\r\n            }\r\n        }\r\n        this.addRenderObject(_webgl_submit_SubmitCMD__WEBPACK_IMPORTED_MODULE_33__[\"SubmitCMD\"].create([rt], _use, this));\r\n        this.breakNextMerge();\r\n    }\r\n    /**\r\n     * 异步执行rt的restore函数\r\n     * @param\trt\r\n     */\r\n    //TODO:coverage\r\n    RTRestore(rt) {\r\n        function _restore(rt) {\r\n            rt.restore();\r\n        }\r\n        this.addRenderObject(_webgl_submit_SubmitCMD__WEBPACK_IMPORTED_MODULE_33__[\"SubmitCMD\"].create([rt], _restore, this));\r\n        this.breakNextMerge();\r\n    }\r\n    /**\r\n     * 强制拒绝submit合并\r\n     * 例如切换rt的时候\r\n     */\r\n    breakNextMerge() {\r\n        this._curSubmit = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE;\r\n    }\r\n    //TODO:coverage\r\n    _repaintSprite() {\r\n        this.sprite && this.sprite.repaint();\r\n    }\r\n    /**\r\n     *\r\n     * @param\ttex\r\n     * @param\tx\r\n     * @param\ty\r\n     * @param\twidth\r\n     * @param\theight\r\n     * @param\ttransform\t图片本身希望的矩阵\r\n     * @param\ttx\t\t\t节点的位置\r\n     * @param\tty\r\n     * @param\talpha\r\n     */\r\n    drawTextureWithTransform(tex, x, y, width, height, transform, tx, ty, alpha, blendMode, colorfilter = null) {\r\n        var oldcomp = null;\r\n        var curMat = this._curMat;\r\n        if (blendMode) {\r\n            oldcomp = this.globalCompositeOperation;\r\n            this.globalCompositeOperation = blendMode;\r\n        }\r\n        var oldColorFilter = this._colorFiler;\r\n        if (colorfilter) {\r\n            this.setColorFilter(colorfilter);\r\n        }\r\n        if (!transform) {\r\n            this._drawTextureM(tex, x + tx, y + ty, width, height, curMat, alpha, null);\r\n            if (blendMode) {\r\n                this.globalCompositeOperation = oldcomp;\r\n            }\r\n            if (colorfilter) {\r\n                this.setColorFilter(oldColorFilter);\r\n            }\r\n            return;\r\n        }\r\n        var tmpMat = this._tmpMatrix;\r\n        //克隆transform,因为要应用tx，ty，这里不能修改原始的transform\r\n        tmpMat.a = transform.a;\r\n        tmpMat.b = transform.b;\r\n        tmpMat.c = transform.c;\r\n        tmpMat.d = transform.d;\r\n        tmpMat.tx = transform.tx + tx;\r\n        tmpMat.ty = transform.ty + ty;\r\n        tmpMat._bTransform = transform._bTransform;\r\n        if (transform && curMat._bTransform) {\r\n            // 如果当前矩阵不是只有平移，则只能用mul的方式\r\n            _maths_Matrix__WEBPACK_IMPORTED_MODULE_4__[\"Matrix\"].mul(tmpMat, curMat, tmpMat);\r\n            transform = tmpMat;\r\n            transform._bTransform = true;\r\n        }\r\n        else {\r\n            //如果curmat没有旋转。\r\n            tmpMat.tx += curMat.tx;\r\n            tmpMat.ty += curMat.ty;\r\n            transform = tmpMat;\r\n        }\r\n        this._drawTextureM(tex, x, y, width, height, transform, alpha, null);\r\n        if (blendMode) {\r\n            this.globalCompositeOperation = oldcomp;\r\n        }\r\n        if (colorfilter) {\r\n            this.setColorFilter(oldColorFilter);\r\n        }\r\n    }\r\n    /**\r\n     * * 把ctx中的submits提交。结果渲染到target上\r\n     * @param\tctx\r\n     * @param\ttarget\r\n     */\r\n    _flushToTarget(context, target) {\r\n        //if (target._destroy) return;\r\n        //var preworldClipRect:Rectangle = RenderState2D.worldClipRect;\r\n        //裁剪不用考虑，现在是在context内部自己维护，不会乱窜\r\n        _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].worldScissorTest = false;\r\n        _webgl_WebGL__WEBPACK_IMPORTED_MODULE_10__[\"WebGL\"].mainContext.disable(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_11__[\"WebGLContext\"].SCISSOR_TEST);\r\n        var preAlpha = _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].worldAlpha;\r\n        var preMatrix4 = _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].worldMatrix4;\r\n        var preMatrix = _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].worldMatrix;\r\n        var preShaderDefines = _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].worldShaderDefines;\r\n        _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].worldMatrix = _maths_Matrix__WEBPACK_IMPORTED_MODULE_4__[\"Matrix\"].EMPTY;\r\n        _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].restoreTempArray();\r\n        _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].worldMatrix4 = _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].TEMPMAT4_ARRAY;\r\n        _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].worldAlpha = 1;\r\n        //RenderState2D.worldFilters = null;\r\n        //RenderState2D.worldShaderDefines = null;\r\n        _webgl_shader_BaseShader__WEBPACK_IMPORTED_MODULE_25__[\"BaseShader\"].activeShader = null;\r\n        target.start();\r\n        // 如果没有命令就不要clear。这么改是因为嵌套cacheas出问题了\r\n        // 如果一个sprite cacheas normal ，他的子节点有cacheas bitmap的（包括mask等）就会不断的执行 _flushToTarget和drawCamvase,从而把target上的内容清掉\r\n        // 由于cacheas normal 导致 RenderSprite没有机会执行 _cacheStyle.canvas 存在的分支。在\r\n        if (context._submits._length > 0)\r\n            target.clear(0, 0, 0, 0);\r\n        context._curSubmit = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE;\r\n        context.flush();\r\n        context.clear();\r\n        target.restore();\r\n        context._curSubmit = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE;\r\n        //context._canvas\r\n        _webgl_shader_BaseShader__WEBPACK_IMPORTED_MODULE_25__[\"BaseShader\"].activeShader = null;\r\n        _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].worldAlpha = preAlpha;\r\n        _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].worldMatrix4 = preMatrix4;\r\n        _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_43__[\"RenderState2D\"].worldMatrix = preMatrix;\r\n        //RenderState2D.worldFilters = preFilters;\r\n        //RenderState2D.worldShaderDefines = preShaderDefines;\r\n    }\r\n    drawCanvas(canvas, x, y, width, height) {\r\n        if (!canvas)\r\n            return;\r\n        var src = canvas.context;\r\n        var submit;\r\n        if (src._targets) {\r\n            //生成渲染结果到src._targets上\r\n            /*\r\n            this._submits[this._submits._length++] = SubmitCanvas.create(src, 0, null);\r\n            _curSubmit = SubmitBase.RENDERBASE;\r\n            //画出src._targets\r\n            //drawTexture(src._targets.target.getTexture(), x, y, width, height, 0, 0);\r\n            */\r\n            //应用并清空canvas中的指令。如果内容需要重画，RenderSprite会给他重新加入submit\r\n            if (src._submits._length > 0) {\r\n                submit = _webgl_submit_SubmitCMD__WEBPACK_IMPORTED_MODULE_33__[\"SubmitCMD\"].create([src, src._targets], this._flushToTarget, this);\r\n                this._submits[this._submits._length++] = submit;\r\n            }\r\n            //在这之前就已经渲染出结果了。\r\n            this._drawRenderTexture(src._targets, x, y, width, height, null, 1.0, _RenderTexture2D__WEBPACK_IMPORTED_MODULE_23__[\"RenderTexture2D\"].flipyuv);\r\n            this._curSubmit = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE;\r\n            /*\r\n            this._submits[this._submits._length++] = SubmitCanvas.create(src, 0, null);\r\n            //src._targets.flush(src);\r\n            _curSubmit = SubmitBase.RENDERBASE;\r\n            //src._targets.drawTo(this, x, y, width, height);\r\n            //drawTexture(src._targets.target.getTexture(), x, y, width, height, 0, 0);\r\n            _drawRenderTexture(src._targets, x, y, width, height,null,1.0, RenderTexture.flipyuv);\r\n            */\r\n        }\r\n        else {\r\n            var canv = canvas;\r\n            if (canv.touches) {\r\n                canv.touches.forEach(function (v) { v.touch(); });\r\n            }\r\n            submit = _webgl_submit_SubmitCanvas__WEBPACK_IMPORTED_MODULE_34__[\"SubmitCanvas\"].create(canvas, this._shader2D.ALPHA, this._shader2D.filters);\r\n            this._submits[this._submits._length++] = submit;\r\n            submit._key.clear();\r\n            //var sx:Number = width / canvas.width;\r\n            //var sy:Number = height / canvas.height;\r\n            var mat = submit._matrix;\r\n            this._curMat.copyTo(mat);\r\n            //sx != 1 && sy != 1 && mat.scale(sx, sy);\r\n            // 先加上位置，最后再乘逆\r\n            var tx = mat.tx, ty = mat.ty;\r\n            mat.tx = mat.ty = 0;\r\n            mat.transformPoint(_maths_Point__WEBPACK_IMPORTED_MODULE_5__[\"Point\"].TEMP.setTo(x, y)); // 用当前矩阵变换 (x,y)\r\n            mat.translate(_maths_Point__WEBPACK_IMPORTED_MODULE_5__[\"Point\"].TEMP.x + tx, _maths_Point__WEBPACK_IMPORTED_MODULE_5__[\"Point\"].TEMP.y + ty); // 加上原来的 (tx,ty)\r\n            _maths_Matrix__WEBPACK_IMPORTED_MODULE_4__[\"Matrix\"].mul(canv.invMat, mat, mat);\r\n            this._curSubmit = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE;\r\n        }\r\n    }\r\n    drawTarget(rt, x, y, width, height, m, shaderValue, uv = null, blend = -1) {\r\n        this._drawCount++;\r\n        var rgba = 0xffffffff;\r\n        if (this._mesh.vertNum + 4 > Context._MAXVERTNUM) {\r\n            this._mesh = _webgl_utils_MeshQuadTexture__WEBPACK_IMPORTED_MODULE_40__[\"MeshQuadTexture\"].getAMesh(this.isMain); //创建新的mesh  TODO 如果_mesh不是常见格式，这里就不能这么做了。以后把_mesh单独表示成常用模式 \r\n            this.meshlist.push(this._mesh);\r\n        }\r\n        //凡是这个都是在_mesh上操作，不用考虑samekey\r\n        this.transformQuad(x, y, width, height, 0, m || this._curMat, this._transedPoints);\r\n        if (!this.clipedOff(this._transedPoints)) {\r\n            this._mesh.addQuad(this._transedPoints, uv || _Texture__WEBPACK_IMPORTED_MODULE_0__[\"Texture\"].DEF_UV, 0xffffffff, true);\r\n            //if (GlUtils.fillRectImgVb( _mesh._vb, _clipRect, x, y, width , height , uv || Texture.DEF_UV, m || _curMat, rgba, this)) {\r\n            var submit = this._curSubmit = _webgl_submit_SubmitTarget__WEBPACK_IMPORTED_MODULE_36__[\"SubmitTarget\"].create(this, this._mesh, shaderValue, rt);\r\n            submit.blendType = (blend == -1) ? this._nBlendType : blend;\r\n            this._copyClipInfo(submit, this._globalClipMatrix);\r\n            submit._numEle = 6;\r\n            this._mesh.indexNum += 6;\r\n            this._mesh.vertNum += 4;\r\n            this._submits[this._submits._length++] = submit;\r\n            //暂时drawTarget不合并\r\n            this._curSubmit = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE;\r\n            return true;\r\n        }\r\n        //暂时drawTarget不合并\r\n        this._curSubmit = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE;\r\n        return false;\r\n    }\r\n    drawTriangles(tex, x, y, vertices, uvs, indices, matrix, alpha, color, blendMode) {\r\n        if (!tex._getSource()) { //source内调用tex.active();\r\n            if (this.sprite) {\r\n                _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.callLater(this, this._repaintSprite);\r\n            }\r\n            return;\r\n        }\r\n        this._drawCount++;\r\n        // 为了提高效率，把一些变量放到这里\r\n        var tmpMat = this._tmpMatrix;\r\n        var triMesh = this._triangleMesh;\r\n        var oldColorFilter = null;\r\n        var needRestorFilter = false;\r\n        if (color) {\r\n            oldColorFilter = this._colorFiler;\r\n            //这个不用save，直接修改就行\r\n            this._colorFiler = color;\r\n            this._curSubmit = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE;\r\n            needRestorFilter = oldColorFilter != color;\r\n        }\r\n        var webGLImg = tex.bitmap;\r\n        var preKey = this._curSubmit._key;\r\n        var sameKey = preKey.submitType === _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].KEY_TRIANGLES && preKey.other === webGLImg.id && preKey.blendShader == this._nBlendType;\r\n        //var rgba:int = mixRGBandAlpha(0xffffffff);\r\n        //rgba = _mixRGBandAlpha(rgba, alpha);\t这个函数有问题，不能连续调用，输出作为输入\r\n        if (triMesh.vertNum + vertices.length / 2 > Context._MAXVERTNUM) {\r\n            triMesh = this._triangleMesh = _webgl_utils_MeshTexture__WEBPACK_IMPORTED_MODULE_41__[\"MeshTexture\"].getAMesh(this.isMain); //创建新的mesh  TODO 如果_mesh不是常见格式，这里就不能这么做了。以后把_mesh单独表示成常用模式 \r\n            this.meshlist.push(triMesh);\r\n            sameKey = false; //新的mesh不能算samekey了\r\n        }\r\n        if (!sameKey) {\r\n            //添加一个新的submit\r\n            var submit = this._curSubmit = _webgl_submit_SubmitTexture__WEBPACK_IMPORTED_MODULE_37__[\"SubmitTexture\"].create(this, triMesh, _webgl_shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_29__[\"Value2D\"].create(_webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_27__[\"ShaderDefines2D\"].TEXTURE2D, 0));\r\n            submit.shaderValue.textureHost = tex;\r\n            submit._renderType = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].TYPE_TEXTURE;\r\n            submit._key.submitType = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].KEY_TRIANGLES;\r\n            submit._key.other = webGLImg.id;\r\n            this._copyClipInfo(submit, this._globalClipMatrix);\r\n            this._submits[this._submits._length++] = submit;\r\n        }\r\n        var rgba = this._mixRGBandAlpha(0xffffffff, this._shader2D.ALPHA * alpha);\r\n        if (!this._drawTriUseAbsMatrix) {\r\n            if (!matrix) {\r\n                tmpMat.a = 1;\r\n                tmpMat.b = 0;\r\n                tmpMat.c = 0;\r\n                tmpMat.d = 1;\r\n                tmpMat.tx = x;\r\n                tmpMat.ty = y;\r\n            }\r\n            else {\r\n                tmpMat.a = matrix.a;\r\n                tmpMat.b = matrix.b;\r\n                tmpMat.c = matrix.c;\r\n                tmpMat.d = matrix.d;\r\n                tmpMat.tx = matrix.tx + x;\r\n                tmpMat.ty = matrix.ty + y;\r\n            }\r\n            _maths_Matrix__WEBPACK_IMPORTED_MODULE_4__[\"Matrix\"].mul(tmpMat, this._curMat, tmpMat);\r\n            triMesh.addData(vertices, uvs, indices, tmpMat, rgba);\r\n        }\r\n        else {\r\n            // 这种情况是drawtexture转成的drawTriangle，直接使用matrix就行，传入的xy都是0\r\n            triMesh.addData(vertices, uvs, indices, matrix, rgba);\r\n        }\r\n        this._curSubmit._numEle += indices.length;\r\n        if (needRestorFilter) {\r\n            this._colorFiler = oldColorFilter;\r\n            this._curSubmit = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE;\r\n        }\r\n        //return true;\r\n    }\r\n    transform(a, b, c, d, tx, ty) {\r\n        _webgl_canvas_save_SaveTransform__WEBPACK_IMPORTED_MODULE_19__[\"SaveTransform\"].save(this);\r\n        _maths_Matrix__WEBPACK_IMPORTED_MODULE_4__[\"Matrix\"].mul(_maths_Matrix__WEBPACK_IMPORTED_MODULE_4__[\"Matrix\"].TEMP.setTo(a, b, c, d, tx, ty), this._curMat, this._curMat); //TODO 这里会有效率问题。一堆的set\r\n        this._curMat._checkTransform();\r\n    }\r\n    //TODO:coverage\r\n    _transformByMatrix(matrix, tx, ty) {\r\n        matrix.setTranslate(tx, ty);\r\n        _maths_Matrix__WEBPACK_IMPORTED_MODULE_4__[\"Matrix\"].mul(matrix, this._curMat, this._curMat);\r\n        matrix.setTranslate(0, 0);\r\n        this._curMat._bTransform = true;\r\n    }\r\n    //TODO:coverage\r\n    setTransformByMatrix(value) {\r\n        value.copyTo(this._curMat);\r\n    }\r\n    rotate(angle) {\r\n        _webgl_canvas_save_SaveTransform__WEBPACK_IMPORTED_MODULE_19__[\"SaveTransform\"].save(this);\r\n        this._curMat.rotateEx(angle);\r\n    }\r\n    scale(scaleX, scaleY) {\r\n        _webgl_canvas_save_SaveTransform__WEBPACK_IMPORTED_MODULE_19__[\"SaveTransform\"].save(this);\r\n        this._curMat.scaleEx(scaleX, scaleY);\r\n    }\r\n    clipRect(x, y, width, height) {\r\n        _webgl_canvas_save_SaveClipRect__WEBPACK_IMPORTED_MODULE_17__[\"SaveClipRect\"].save(this);\r\n        if (this._clipRect == Context.MAXCLIPRECT) {\r\n            this._clipRect = new _maths_Rectangle__WEBPACK_IMPORTED_MODULE_6__[\"Rectangle\"](x, y, width, height);\r\n        }\r\n        else {\r\n            this._clipRect.width = width;\r\n            this._clipRect.height = height;\r\n            //把xy转换到当前矩阵空间。宽高不用转换，这样在shader中计算的时候就不用把方向normalize了\r\n            this._clipRect.x = x;\r\n            this._clipRect.y = y;\r\n        }\r\n        Context._clipID_Gen++;\r\n        Context._clipID_Gen %= 10000;\r\n        this._clipInfoID = Context._clipID_Gen;\r\n        var cm = this._globalClipMatrix;\r\n        //TEMP 处理clip交集问题，这里有点问题，无法处理旋转，翻转 是临时瞎写的\r\n        var minx = cm.tx;\r\n        var miny = cm.ty;\r\n        var maxx = minx + cm.a;\r\n        var maxy = miny + cm.d;\r\n        //TEMP end\r\n        if (this._clipRect.width >= Context._MAXSIZE) {\r\n            cm.a = cm.d = Context._MAXSIZE;\r\n            cm.b = cm.c = cm.tx = cm.ty = 0;\r\n        }\r\n        else {\r\n            //其实就是矩阵相乘\r\n            if (this._curMat._bTransform) {\r\n                cm.tx = this._clipRect.x * this._curMat.a + this._clipRect.y * this._curMat.c + this._curMat.tx;\r\n                cm.ty = this._clipRect.x * this._curMat.b + this._clipRect.y * this._curMat.d + this._curMat.ty;\r\n                cm.a = this._clipRect.width * this._curMat.a;\r\n                cm.b = this._clipRect.width * this._curMat.b;\r\n                cm.c = this._clipRect.height * this._curMat.c;\r\n                cm.d = this._clipRect.height * this._curMat.d;\r\n            }\r\n            else {\r\n                cm.tx = this._clipRect.x + this._curMat.tx;\r\n                cm.ty = this._clipRect.y + this._curMat.ty;\r\n                cm.a = this._clipRect.width;\r\n                cm.b = cm.c = 0;\r\n                cm.d = this._clipRect.height;\r\n            }\r\n            if (this._incache) {\r\n                this._clipInCache = true;\r\n            }\r\n        }\r\n        //TEMP 处理clip交集问题，这里有点问题，无法处理旋转,翻转\r\n        if (cm.a > 0 && cm.d > 0) {\r\n            var cmaxx = cm.tx + cm.a;\r\n            var cmaxy = cm.ty + cm.d;\r\n            if (cmaxx <= minx || cmaxy <= miny || cm.tx >= maxx || cm.ty >= maxy) {\r\n                //超出范围了\r\n                cm.a = -0.1;\r\n                cm.d = -0.1;\r\n            }\r\n            else {\r\n                if (cm.tx < minx) {\r\n                    cm.a -= (minx - cm.tx);\r\n                    cm.tx = minx;\r\n                }\r\n                if (cmaxx > maxx) {\r\n                    cm.a -= (cmaxx - maxx);\r\n                }\r\n                if (cm.ty < miny) {\r\n                    cm.d -= (miny - cm.ty);\r\n                    cm.ty = miny;\r\n                }\r\n                if (cmaxy > maxy) {\r\n                    cm.d -= (cmaxy - maxy);\r\n                }\r\n                if (cm.a <= 0)\r\n                    cm.a = -0.1;\r\n                if (cm.d <= 0)\r\n                    cm.d = -0.1;\r\n            }\r\n        }\r\n        //TEMP end\r\n    }\r\n    /**\r\n     * 从setIBVB改为drawMesh\r\n     * type 参数不知道是干什么的，先删掉。offset好像跟attribute有关，删掉\r\n     * @param\tx\r\n     * @param\ty\r\n     * @param\tib\r\n     * @param\tvb\r\n     * @param\tnumElement\r\n     * @param\tmat\r\n     * @param\tshader\r\n     * @param\tshaderValues\r\n     * @param\tstartIndex\r\n     * @param\toffset\r\n     */\r\n    //TODO:coverage\r\n    drawMesh(x, y, ib, vb, numElement, mat, shader, shaderValues, startIndex = 0) {\r\n        ;\r\n    }\r\n    addRenderObject(o) {\r\n        this._submits[this._submits._length++] = o;\r\n    }\r\n    /**\r\n     *\r\n     * @param\tstart\r\n     * @param\tend\r\n     */\r\n    submitElement(start, end) {\r\n        //_ib._bind_upload() || _ib._bind();\r\n        //_vb._bind_upload() || _vb._bind();\r\n        var mainCtx = _renders_Render__WEBPACK_IMPORTED_MODULE_7__[\"Render\"]._context === this;\r\n        var renderList = this._submits;\r\n        var ret = renderList._length;\r\n        end < 0 && (end = renderList._length);\r\n        var submit = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE;\r\n        while (start < end) {\r\n            this._renderNextSubmitIndex = start + 1;\r\n            if (renderList[start] === _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE) {\r\n                start++;\r\n                continue;\r\n            }\r\n            _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].preRender = submit;\r\n            submit = renderList[start];\r\n            //只有submitscissor才会返回多个\r\n            start += submit.renderSubmit();\r\n            //本来做了个优化，如果是主画布，用完立即releaseRender. 但是实际没有什么效果，且由于submit需要用来对比，即使用完也不能修改，所以这个优化又去掉了\r\n        }\r\n        return ret;\r\n    }\r\n    flush() {\r\n        var ret = this.submitElement(0, this._submits._length);\r\n        this._path && this._path.reset();\r\n        _webgl_shader_d2_skinAnishader_SkinMeshBuffer__WEBPACK_IMPORTED_MODULE_28__[\"SkinMeshBuffer\"].instance && _webgl_shader_d2_skinAnishader_SkinMeshBuffer__WEBPACK_IMPORTED_MODULE_28__[\"SkinMeshBuffer\"].getInstance().reset();\r\n        //Stat.mesh2DNum += meshlist.length;\r\n        this._curSubmit = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].RENDERBASE;\r\n        for (var i = 0, sz = this.meshlist.length; i < sz; i++) {\r\n            var curm = this.meshlist[i];\r\n            curm.canReuse ? (curm.releaseMesh()) : (curm.destroy());\r\n        }\r\n        this.meshlist.length = 0;\r\n        this._mesh = _webgl_utils_MeshQuadTexture__WEBPACK_IMPORTED_MODULE_40__[\"MeshQuadTexture\"].getAMesh(this.isMain); //TODO 不要这样。\r\n        this._pathMesh = _webgl_utils_MeshVG__WEBPACK_IMPORTED_MODULE_42__[\"MeshVG\"].getAMesh(this.isMain);\r\n        this._triangleMesh = _webgl_utils_MeshTexture__WEBPACK_IMPORTED_MODULE_41__[\"MeshTexture\"].getAMesh(this.isMain);\r\n        this.meshlist.push(this._mesh, this._pathMesh, this._triangleMesh);\r\n        this._flushCnt++;\r\n        //charbook gc\r\n        if (this._flushCnt % 60 == 0 && _renders_Render__WEBPACK_IMPORTED_MODULE_7__[\"Render\"]._context == this) {\r\n            if (_webgl_text_TextRender__WEBPACK_IMPORTED_MODULE_39__[\"TextRender\"].textRenderInst) {\r\n                _webgl_text_TextRender__WEBPACK_IMPORTED_MODULE_39__[\"TextRender\"].textRenderInst.GC();\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n    /*******************************************start矢量绘制***************************************************/\r\n    beginPath(convex = false) {\r\n        var tPath = this._getPath();\r\n        tPath.beginPath(convex);\r\n    }\r\n    closePath() {\r\n        //_path.closePath = true;\r\n        this._path.closePath();\r\n    }\r\n    /**\r\n     * 添加一个path。\r\n     * @param\tpoints [x,y,x,y....]\t这个会被保存下来，所以调用者需要注意复制。\r\n     * @param\tclose\t是否闭合\r\n     * @param   convex 是否是凸多边形。convex的优先级是这个最大。fill的时候的次之。其实fill的时候不应该指定convex，因为可以多个path\r\n     * @param\tdx  需要添加的平移。这个需要在应用矩阵之前应用。\r\n     * @param\tdy\r\n     */\r\n    addPath(points, close, convex, dx, dy) {\r\n        var ci = 0;\r\n        for (var i = 0, sz = points.length / 2; i < sz; i++) {\r\n            var x1 = points[ci] + dx, y1 = points[ci + 1] + dy;\r\n            points[ci] = x1;\r\n            points[ci + 1] = y1;\r\n            ci += 2;\r\n        }\r\n        this._getPath().push(points, convex);\r\n    }\r\n    fill() {\r\n        var m = this._curMat;\r\n        var tPath = this._getPath();\r\n        var submit = this._curSubmit;\r\n        var sameKey = (submit._key.submitType === _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].KEY_VG && submit._key.blendShader === this._nBlendType);\r\n        sameKey && (sameKey = sameKey && this.isSameClipInfo(submit));\r\n        if (!sameKey) {\r\n            this._curSubmit = this.addVGSubmit(this._pathMesh);\r\n        }\r\n        var rgba = this.mixRGBandAlpha(this.fillStyle.toInt());\r\n        var curEleNum = 0;\r\n        var idx;\r\n        //如果有多个path的话，要一起填充mesh，使用相同的颜色和alpha\r\n        for (var i = 0, sz = tPath.paths.length; i < sz; i++) {\r\n            var p = tPath.paths[i];\r\n            var vertNum = p.path.length / 2;\r\n            if (vertNum < 3 || (vertNum == 3 && !p.convex))\r\n                continue;\r\n            var cpath = p.path.concat();\r\n            // 应用矩阵转换顶点\r\n            var pi = 0;\r\n            var xp, yp;\r\n            var _x, _y;\r\n            if (m._bTransform) {\r\n                for (pi = 0; pi < vertNum; pi++) {\r\n                    xp = pi << 1;\r\n                    yp = xp + 1;\r\n                    _x = cpath[xp];\r\n                    _y = cpath[yp];\r\n                    cpath[xp] = m.a * _x + m.c * _y + m.tx;\r\n                    cpath[yp] = m.b * _x + m.d * _y + m.ty;\r\n                }\r\n            }\r\n            else {\r\n                for (pi = 0; pi < vertNum; pi++) {\r\n                    xp = pi << 1;\r\n                    yp = xp + 1;\r\n                    _x = cpath[xp];\r\n                    _y = cpath[yp];\r\n                    cpath[xp] = _x + m.tx;\r\n                    cpath[yp] = _y + m.ty;\r\n                }\r\n            }\r\n            if (this._pathMesh.vertNum + vertNum > Context._MAXVERTNUM) {\r\n                //;\r\n                //顶点数超了，要先提交一次\r\n                this._curSubmit._numEle += curEleNum;\r\n                curEleNum = 0;\r\n                //然后用新的mesh，和新的submit。\r\n                this._pathMesh = _webgl_utils_MeshVG__WEBPACK_IMPORTED_MODULE_42__[\"MeshVG\"].getAMesh(this.isMain);\r\n                this._curSubmit = this.addVGSubmit(this._pathMesh);\r\n            }\r\n            var curvert = this._pathMesh.vertNum;\r\n            //生成 ib\r\n            if (p.convex) { //convex的ib比较容易\r\n                var faceNum = vertNum - 2;\r\n                idx = new Array(faceNum * 3);\r\n                var idxpos = 0;\r\n                for (var fi = 0; fi < faceNum; fi++) {\r\n                    idx[idxpos++] = curvert;\r\n                    idx[idxpos++] = fi + 1 + curvert;\r\n                    idx[idxpos++] = fi + 2 + curvert;\r\n                }\r\n            }\r\n            else {\r\n                idx = _webgl_shapes_Earcut__WEBPACK_IMPORTED_MODULE_31__[\"Earcut\"].earcut(cpath, null, 2); //返回索引\r\n                if (curvert > 0) {\r\n                    //修改ib\r\n                    for (var ii = 0; ii < idx.length; ii++) {\r\n                        idx[ii] += curvert;\r\n                    }\r\n                }\r\n            }\r\n            //填充mesh\r\n            this._pathMesh.addVertAndIBToMesh(this, cpath, rgba, idx);\r\n            curEleNum += idx.length;\r\n        }\r\n        this._curSubmit._numEle += curEleNum;\r\n    }\r\n    addVGSubmit(mesh) {\r\n        //elenum设为0，后面再加\r\n        var submit = _webgl_submit_Submit__WEBPACK_IMPORTED_MODULE_32__[\"Submit\"].createShape(this, mesh, 0, _webgl_shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_29__[\"Value2D\"].create(_webgl_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_27__[\"ShaderDefines2D\"].PRIMITIVE, 0));\r\n        //submit._key.clear();\r\n        //submit._key.blendShader = _submitKey.blendShader;\t//TODO 这个在哪里赋值的啊\r\n        submit._key.submitType = _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].KEY_VG;\r\n        this._submits[this._submits._length++] = submit;\r\n        this._copyClipInfo(submit, this._globalClipMatrix);\r\n        return submit;\r\n    }\r\n    stroke() {\r\n        if (this.lineWidth > 0) {\r\n            var rgba = this.mixRGBandAlpha(this.strokeStyle._color.numColor);\r\n            var tPath = this._getPath();\r\n            var submit = this._curSubmit;\r\n            var sameKey = (submit._key.submitType === _webgl_submit_SubmitBase__WEBPACK_IMPORTED_MODULE_22__[\"SubmitBase\"].KEY_VG && submit._key.blendShader === this._nBlendType);\r\n            sameKey && (sameKey = sameKey && this.isSameClipInfo(submit));\r\n            if (!sameKey) {\r\n                this._curSubmit = this.addVGSubmit(this._pathMesh);\r\n            }\r\n            var curEleNum = 0;\r\n            //如果有多个path的话，要一起填充mesh，使用相同的颜色和alpha\r\n            for (var i = 0, sz = tPath.paths.length; i < sz; i++) {\r\n                var p = tPath.paths[i];\r\n                if (p.path.length <= 0)\r\n                    continue;\r\n                var idx = [];\r\n                var vertex = []; //x,y\r\n                //p.path.loop;\r\n                //填充vbib\r\n                var maxVertexNum = p.path.length * 2; //最大可能产生的顶点数。这个需要考虑考虑\r\n                if (maxVertexNum < 2)\r\n                    continue;\r\n                if (this._pathMesh.vertNum + maxVertexNum > Context._MAXVERTNUM) {\r\n                    //;\r\n                    //顶点数超了，要先提交一次\r\n                    this._curSubmit._numEle += curEleNum;\r\n                    curEleNum = 0;\r\n                    //然后用新的mesh，和新的submit。\r\n                    this._pathMesh = _webgl_utils_MeshVG__WEBPACK_IMPORTED_MODULE_42__[\"MeshVG\"].getAMesh(this.isMain);\r\n                    this.meshlist.push(this._pathMesh);\r\n                    this._curSubmit = this.addVGSubmit(this._pathMesh);\r\n                }\r\n                //这个需要放在创建新的mesh的后面，因为需要mesh.vertNum,否则如果先调用这个，再创建mesh，那么ib就不对了\r\n                _webgl_shapes_BasePoly__WEBPACK_IMPORTED_MODULE_30__[\"BasePoly\"].createLine2(p.path, idx, this.lineWidth, this._pathMesh.vertNum, vertex, p.loop); //_pathMesh.vertNum 是要加到生成的ib上的\r\n                // 变换所有的点\r\n                var ptnum = vertex.length / 2;\r\n                var m = this._curMat;\r\n                var pi = 0;\r\n                var xp, yp;\r\n                var _x, _y;\r\n                if (m._bTransform) {\r\n                    for (pi = 0; pi < ptnum; pi++) {\r\n                        xp = pi << 1;\r\n                        yp = xp + 1;\r\n                        _x = vertex[xp];\r\n                        _y = vertex[yp];\r\n                        vertex[xp] = m.a * _x + m.c * _y + m.tx;\r\n                        vertex[yp] = m.b * _x + m.d * _y + m.ty;\r\n                    }\r\n                }\r\n                else {\r\n                    for (pi = 0; pi < ptnum; pi++) {\r\n                        xp = pi << 1;\r\n                        yp = xp + 1;\r\n                        _x = vertex[xp];\r\n                        _y = vertex[yp];\r\n                        vertex[xp] = _x + m.tx;\r\n                        vertex[yp] = _y + m.ty;\r\n                    }\r\n                }\r\n                //this.drawPoly(0, 0, p.path, fillStyle._color.numColor, 0, 0, p.convex);\r\n                //填充mesh\r\n                this._pathMesh.addVertAndIBToMesh(this, vertex, rgba, idx);\r\n                curEleNum += idx.length;\r\n            }\r\n            this._curSubmit._numEle += curEleNum;\r\n        }\r\n    }\r\n    moveTo(x, y) {\r\n        var tPath = this._getPath();\r\n        tPath.newPath();\r\n        tPath._lastOriX = x;\r\n        tPath._lastOriY = y;\r\n        tPath.addPoint(x, y);\r\n    }\r\n    /**\r\n     *\r\n     * @param\tx\r\n     * @param\ty\r\n     * @param\tb 是否应用矩阵\r\n     */\r\n    lineTo(x, y) {\r\n        var tPath = this._getPath();\r\n        if (Math.abs(x - tPath._lastOriX) < 1e-3 && Math.abs(y - tPath._lastOriY) < 1e-3) //不判断的话，下面的画线算法受不了\r\n            return;\r\n        tPath._lastOriX = x;\r\n        tPath._lastOriY = y;\r\n        tPath.addPoint(x, y);\r\n    }\r\n    /*\r\n    public function drawCurves(x:Number, y:Number,points:Array, lineColor:*, lineWidth:Number = 1):void {\r\n        //setPathId(-1);\r\n        beginPath();\r\n        strokeStyle = lineColor;\r\n        this.lineWidth = lineWidth;\r\n        var points:Array = points;\r\n        //movePath(x, y); TODO 这个被去掉了\r\n        moveTo(points[0], points[1]);\r\n        var i:int = 2, n:int = points.length;\r\n        while (i < n) {\r\n            quadraticCurveTo(points[i++], points[i++], points[i++], points[i++]);\r\n        }\r\n        stroke();\r\n    }\r\n    */\r\n    arcTo(x1, y1, x2, y2, r) {\r\n        /*\r\n        if (mId != -1) {\r\n            if (mHaveKey) {\r\n                return;\r\n            }\r\n        }\r\n        */\r\n        var i = 0;\r\n        var x = 0, y = 0;\r\n        var dx = this._path._lastOriX - x1;\r\n        var dy = this._path._lastOriY - y1;\r\n        var len1 = Math.sqrt(dx * dx + dy * dy);\r\n        if (len1 <= 0.000001) {\r\n            return;\r\n        }\r\n        var ndx = dx / len1;\r\n        var ndy = dy / len1;\r\n        var dx2 = x2 - x1;\r\n        var dy2 = y2 - y1;\r\n        var len22 = dx2 * dx2 + dy2 * dy2;\r\n        var len2 = Math.sqrt(len22);\r\n        if (len2 <= 0.000001) {\r\n            return;\r\n        }\r\n        var ndx2 = dx2 / len2;\r\n        var ndy2 = dy2 / len2;\r\n        var odx = ndx + ndx2;\r\n        var ody = ndy + ndy2;\r\n        var olen = Math.sqrt(odx * odx + ody * ody);\r\n        if (olen <= 0.000001) {\r\n            return;\r\n        }\r\n        var nOdx = odx / olen;\r\n        var nOdy = ody / olen;\r\n        var alpha = Math.acos(nOdx * ndx + nOdy * ndy);\r\n        var halfAng = Math.PI / 2 - alpha;\r\n        len1 = r / Math.tan(halfAng);\r\n        var ptx1 = len1 * ndx + x1;\r\n        var pty1 = len1 * ndy + y1;\r\n        var orilen = Math.sqrt(len1 * len1 + r * r);\r\n        //圆心\r\n        var orix = x1 + nOdx * orilen;\r\n        var oriy = y1 + nOdy * orilen;\r\n        var ptx2 = len1 * ndx2 + x1;\r\n        var pty2 = len1 * ndy2 + y1;\r\n        var dir = ndx * ndy2 - ndy * ndx2;\r\n        var fChgAng = 0;\r\n        var sinx = 0.0;\r\n        var cosx = 0.0;\r\n        if (dir >= 0) {\r\n            fChgAng = halfAng * 2;\r\n            var fda = fChgAng / Context.SEGNUM;\r\n            sinx = Math.sin(fda);\r\n            cosx = Math.cos(fda);\r\n        }\r\n        else {\r\n            fChgAng = -halfAng * 2;\r\n            fda = fChgAng / Context.SEGNUM;\r\n            sinx = Math.sin(fda);\r\n            cosx = Math.cos(fda);\r\n        }\r\n        //x = _curMat.a * ptx1 + _curMat.c * pty1 /*+ _curMat.tx*/;\r\n        //y = _curMat.b * ptx1 + _curMat.d * pty1 /*+ _curMat.ty*/;\r\n        var lastx = this._path._lastOriX, lasty = this._path._lastOriY; //没有矩阵转换的上一个点\r\n        var _x1 = ptx1, _y1 = pty1;\r\n        if (Math.abs(_x1 - this._path._lastOriX) > 0.1 || Math.abs(_y1 - this._path._lastOriY) > 0.1) {\r\n            x = _x1; // _curMat.a * _x1 + _curMat.c * _y1 + _curMat.tx;\r\n            y = _y1; //_curMat.b * _x1 + _curMat.d * _y1 + _curMat.ty;\r\n            lastx = _x1;\r\n            lasty = _y1;\r\n            this._path.addPoint(x, y);\r\n        }\r\n        var cvx = ptx1 - orix;\r\n        var cvy = pty1 - oriy;\r\n        var tx = 0.0;\r\n        var ty = 0.0;\r\n        for (i = 0; i < Context.SEGNUM; i++) {\r\n            var cx = cvx * cosx + cvy * sinx;\r\n            var cy = -cvx * sinx + cvy * cosx;\r\n            x = cx + orix;\r\n            y = cy + oriy;\r\n            //x1 = _curMat.a * x + _curMat.c * y /*+ _curMat.tx*/;\r\n            //y1 = _curMat.b * x + _curMat.d * y /*+ _curMat.ty*/;\r\n            //x = x1;\r\n            //y = y1;\r\n            if (Math.abs(lastx - x) > 0.1 || Math.abs(lasty - y) > 0.1) {\r\n                //var _tx1:Number = x, _ty1:Number = y;\r\n                //x = _curMat.a * _tx1 + _curMat.c * _ty1 + _curMat.tx;\r\n                //y = _curMat.b * _tx1 + _curMat.d * _ty1 + _curMat.ty;\r\n                this._path.addPoint(x, y);\r\n                lastx = x;\r\n                lasty = y;\r\n            }\r\n            cvx = cx;\r\n            cvy = cy;\r\n        }\r\n    }\r\n    arc(cx, cy, r, startAngle, endAngle, counterclockwise = false, b = true) {\r\n        /* TODO 缓存还没想好\r\n        if (mId != -1) {\r\n            var tShape:IShape = VectorGraphManager.getInstance().shapeDic[this.mId];\r\n            if (tShape) {\r\n                if (mHaveKey && !tShape.needUpdate(_curMat))\r\n                    return;\r\n            }\r\n            cx = 0;\r\n            cy = 0;\r\n        }\r\n        */\r\n        var a = 0, da = 0, hda = 0, kappa = 0;\r\n        var dx = 0, dy = 0, x = 0, y = 0, tanx = 0, tany = 0;\r\n        var px = 0, py = 0, ptanx = 0, ptany = 0;\r\n        var i, ndivs, nvals;\r\n        // Clamp angles\r\n        da = endAngle - startAngle;\r\n        if (!counterclockwise) {\r\n            if (Math.abs(da) >= Math.PI * 2) {\r\n                da = Math.PI * 2;\r\n            }\r\n            else {\r\n                while (da < 0.0) {\r\n                    da += Math.PI * 2;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (Math.abs(da) >= Math.PI * 2) {\r\n                da = -Math.PI * 2;\r\n            }\r\n            else {\r\n                while (da > 0.0) {\r\n                    da -= Math.PI * 2;\r\n                }\r\n            }\r\n        }\r\n        var sx = this.getMatScaleX();\r\n        var sy = this.getMatScaleY();\r\n        var sr = r * (sx > sy ? sx : sy);\r\n        var cl = 2 * Math.PI * sr;\r\n        ndivs = (Math.max(cl / 10, 10)) | 0;\r\n        hda = (da / ndivs) / 2.0;\r\n        kappa = Math.abs(4 / 3 * (1 - Math.cos(hda)) / Math.sin(hda));\r\n        if (counterclockwise)\r\n            kappa = -kappa;\r\n        nvals = 0;\r\n        var tPath = this._getPath();\r\n        var _x1, _y1;\r\n        for (i = 0; i <= ndivs; i++) {\r\n            a = startAngle + da * (i / ndivs);\r\n            dx = Math.cos(a);\r\n            dy = Math.sin(a);\r\n            x = cx + dx * r;\r\n            y = cy + dy * r;\r\n            if (x != this._path._lastOriX || y != this._path._lastOriY) {\r\n                //var _tx1:Number = x, _ty1:Number = y;\r\n                //x = _curMat.a * _tx1 + _curMat.c * _ty1 + _curMat.tx;\r\n                //y = _curMat.b * _tx1 + _curMat.d * _ty1 + _curMat.ty;\r\n                tPath.addPoint(x, y);\r\n            }\r\n        }\r\n        dx = Math.cos(endAngle);\r\n        dy = Math.sin(endAngle);\r\n        x = cx + dx * r;\r\n        y = cy + dy * r;\r\n        if (x != this._path._lastOriX || y != this._path._lastOriY) {\r\n            //var _x2:Number = x, _y2:Number = y;\r\n            //x = _curMat.a * _x2 + _curMat.c * _y2 + _curMat.tx;\r\n            //y = _curMat.b * _x2 + _curMat.d * _y2 + _curMat.ty;\r\n            tPath.addPoint(x, y);\r\n        }\r\n    }\r\n    quadraticCurveTo(cpx, cpy, x, y) {\r\n        var tBezier = _maths_Bezier__WEBPACK_IMPORTED_MODULE_3__[\"Bezier\"].I;\r\n        var tResultArray = [];\r\n        //var _x1:Number = x, _y1:Number = y;\r\n        //x = _curMat.a * _x1 + _curMat.c * _y1 ;// + _curMat.tx;\r\n        //y = _curMat.b * _x1 + _curMat.d * _y1;// + _curMat.ty;\r\n        //_x1 = cpx, _y1 = cpy;\r\n        //cpx = _curMat.a * _x1 + _curMat.c * _y1;// + _curMat.tx;\r\n        //cpy = _curMat.b * _x1 + _curMat.d * _y1;// + _curMat.ty;\r\n        var tArray = tBezier.getBezierPoints([this._path._lastOriX, this._path._lastOriY, cpx, cpy, x, y], 30, 2);\r\n        for (var i = 0, n = tArray.length / 2; i < n; i++) {\r\n            this.lineTo(tArray[i * 2], tArray[i * 2 + 1]);\r\n        }\r\n        this.lineTo(x, y);\r\n    }\r\n    /**\r\n     * 把颜色跟当前设置的alpha混合\r\n     * @return\r\n     */\r\n    mixRGBandAlpha(color) {\r\n        return this._mixRGBandAlpha(color, this._shader2D.ALPHA);\r\n    }\r\n    _mixRGBandAlpha(color, alpha) {\r\n        if (alpha >= 1) {\r\n            return color;\r\n        }\r\n        var a = ((color & 0xff000000) >>> 24);\r\n        //TODO 这里容易出问题，例如颜色的alpha部分虽然为0，但是他的意义就是0，不能假设是没有设置alpha。例如级联多个alpha就会生成这种结果\r\n        if (a != 0) {\r\n            a *= alpha;\r\n        }\r\n        else {\r\n            a = alpha * 255;\r\n        }\r\n        return (color & 0x00ffffff) | (a << 24);\r\n    }\r\n    strokeRect(x, y, width, height, parameterLineWidth) {\r\n        var tW = parameterLineWidth * 0.5;\r\n        //line(x - tW, y, x + width + tW, y, parameterLineWidth, _curMat);\r\n        //line(x + width, y, x + width, y + height, parameterLineWidth, _curMat);\r\n        //line(x, y, x, y + height, parameterLineWidth, _curMat);\r\n        //line(x - tW, y + height, x + width + tW, y + height, parameterLineWidth, _curMat);\r\n        /**\r\n         * p1-------------------------------p2\r\n         * |  x,y                      x+w,y|\r\n         * |     p4--------------------p3   |\r\n         * |     |                     |    |\r\n         * |     p6--------------------p7   |\r\n         * |  x,y+h                  x+w,y+h|\r\n         * p5-------------------------------p8\r\n         *\r\n         * 不用了\r\n         * 这个其实用4个fillrect拼起来更好，能与fillrect合并。虽然多了几个点。\r\n         */\r\n        //TODO 这里能不能与下面的stroke合并一下\r\n        if (this.lineWidth > 0) {\r\n            var rgba = this.mixRGBandAlpha(this.strokeStyle._color.numColor);\r\n            var hw = this.lineWidth / 2;\r\n            this._fillRect(x - hw, y - hw, width + this.lineWidth, this.lineWidth, rgba); //上\r\n            this._fillRect(x - hw, y - hw + height, width + this.lineWidth, this.lineWidth, rgba); //下\r\n            this._fillRect(x - hw, y + hw, this.lineWidth, height - this.lineWidth, rgba); //左\r\n            this._fillRect(x - hw + width, y + hw, this.lineWidth, height - this.lineWidth, rgba); //右\r\n        }\r\n    }\r\n    clip() {\r\n    }\r\n    /*******************************************end矢量绘制***************************************************/\r\n    //TODO:coverage\r\n    drawParticle(x, y, pt) {\r\n        pt.x = x;\r\n        pt.y = y;\r\n        this._submits[this._submits._length++] = pt;\r\n    }\r\n    _getPath() {\r\n        return this._path || (this._path = new _webgl_canvas_Path__WEBPACK_IMPORTED_MODULE_14__[\"Path\"]());\r\n    }\r\n    /**获取canvas*/\r\n    //注意这个是对外接口\r\n    get canvas() {\r\n        return this._canvas;\r\n    }\r\n    /**\r\n     * 专用函数。通过循环创建来水平填充\r\n     * @param\ttex\r\n     * @param\tbmpid\r\n     * @param\tuv\t\t希望循环的部分的uv\r\n     * @param\toriw\r\n     * @param\torih\r\n     * @param\tx\r\n     * @param\ty\r\n     * @param\tw\r\n     */\r\n    _fillTexture_h(tex, imgid, uv, oriw, orih, x, y, w) {\r\n        var stx = x;\r\n        var num = Math.floor(w / oriw);\r\n        var left = w % oriw;\r\n        for (var i = 0; i < num; i++) {\r\n            this._inner_drawTexture(tex, imgid, stx, y, oriw, orih, this._curMat, uv, 1, false);\r\n            stx += oriw;\r\n        }\r\n        // 最后剩下的\r\n        if (left > 0) {\r\n            var du = uv[2] - uv[0];\r\n            var uvr = uv[0] + du * (left / oriw);\r\n            var tuv = Context.tmpuv1;\r\n            tuv[0] = uv[0];\r\n            tuv[1] = uv[1];\r\n            tuv[2] = uvr;\r\n            tuv[3] = uv[3];\r\n            tuv[4] = uvr;\r\n            tuv[5] = uv[5];\r\n            tuv[6] = uv[6];\r\n            tuv[7] = uv[7];\r\n            this._inner_drawTexture(tex, imgid, stx, y, left, orih, this._curMat, tuv, 1, false);\r\n        }\r\n    }\r\n    /**\r\n     * 专用函数。通过循环创建来垂直填充\r\n     * @param\ttex\r\n     * @param\timgid\r\n     * @param\tuv\r\n     * @param\toriw\r\n     * @param\torih\r\n     * @param\tx\r\n     * @param\ty\r\n     * @param\th\r\n     */\r\n    _fillTexture_v(tex, imgid, uv, oriw, orih, x, y, h) {\r\n        var sty = y;\r\n        var num = Math.floor(h / orih);\r\n        var left = h % orih;\r\n        for (var i = 0; i < num; i++) {\r\n            this._inner_drawTexture(tex, imgid, x, sty, oriw, orih, this._curMat, uv, 1, false);\r\n            sty += orih;\r\n        }\r\n        // 最后剩下的\r\n        if (left > 0) {\r\n            var dv = uv[7] - uv[1];\r\n            var uvb = uv[1] + dv * (left / orih);\r\n            var tuv = Context.tmpuv1;\r\n            tuv[0] = uv[0];\r\n            tuv[1] = uv[1];\r\n            tuv[2] = uv[2];\r\n            tuv[3] = uv[3];\r\n            tuv[4] = uv[4];\r\n            tuv[5] = uvb;\r\n            tuv[6] = uv[6];\r\n            tuv[7] = uvb;\r\n            this._inner_drawTexture(tex, imgid, x, sty, oriw, left, this._curMat, tuv, 1, false);\r\n        }\r\n    }\r\n    drawTextureWithSizeGrid(tex, tx, ty, width, height, sizeGrid, gx, gy) {\r\n        if (!tex._getSource())\r\n            return;\r\n        tx += gx;\r\n        ty += gy;\r\n        var uv = tex.uv, w = tex.bitmap.width, h = tex.bitmap.height;\r\n        var top = sizeGrid[0];\r\n        var left = sizeGrid[3];\r\n        var d_top = top / h;\r\n        var d_left = left / w;\r\n        var right = sizeGrid[1];\r\n        var bottom = sizeGrid[2];\r\n        var d_right = right / w;\r\n        var d_bottom = bottom / h;\r\n        var repeat = sizeGrid[4];\r\n        var needClip = false;\r\n        if (width == w) {\r\n            left = right = 0;\r\n        }\r\n        if (height == h) {\r\n            top = bottom = 0;\r\n        }\r\n        //处理进度条不好看的问题\r\n        if (left + right > width) {\r\n            var clipWidth = width;\r\n            needClip = true;\r\n            width = left + right;\r\n            this.save();\r\n            this.clipRect(0 + tx, 0 + ty, clipWidth, height);\r\n        }\r\n        var imgid = tex.bitmap.id;\r\n        var mat = this._curMat;\r\n        var tuv = this._tempUV;\r\n        // 整图的uv\r\n        // 一定是方的，所以uv只要左上右下就行\r\n        var uvl = uv[0];\r\n        var uvt = uv[1];\r\n        var uvr = uv[4];\r\n        var uvb = uv[5];\r\n        // 小图的uv\r\n        var uvl_ = uvl;\r\n        var uvt_ = uvt;\r\n        var uvr_ = uvr;\r\n        var uvb_ = uvb;\r\n        //绘制四个角\r\n        // 构造uv\r\n        if (left && top) {\r\n            uvr_ = uvl + d_left;\r\n            uvb_ = uvt + d_top;\r\n            tuv[0] = uvl, tuv[1] = uvt, tuv[2] = uvr_, tuv[3] = uvt,\r\n                tuv[4] = uvr_, tuv[5] = uvb_, tuv[6] = uvl, tuv[7] = uvb_;\r\n            this._inner_drawTexture(tex, imgid, tx, ty, left, top, mat, tuv, 1, false);\r\n        }\r\n        if (right && top) {\r\n            uvl_ = uvr - d_right;\r\n            uvt_ = uvt;\r\n            uvr_ = uvr;\r\n            uvb_ = uvt + d_top;\r\n            tuv[0] = uvl_, tuv[1] = uvt_, tuv[2] = uvr_, tuv[3] = uvt_,\r\n                tuv[4] = uvr_, tuv[5] = uvb_, tuv[6] = uvl_, tuv[7] = uvb_;\r\n            this._inner_drawTexture(tex, imgid, width - right + tx, 0 + ty, right, top, mat, tuv, 1, false);\r\n        }\r\n        if (left && bottom) {\r\n            uvl_ = uvl;\r\n            uvt_ = uvb - d_bottom;\r\n            uvr_ = uvl + d_left;\r\n            uvb_ = uvb;\r\n            tuv[0] = uvl_, tuv[1] = uvt_, tuv[2] = uvr_, tuv[3] = uvt_,\r\n                tuv[4] = uvr_, tuv[5] = uvb_, tuv[6] = uvl_, tuv[7] = uvb_;\r\n            this._inner_drawTexture(tex, imgid, 0 + tx, height - bottom + ty, left, bottom, mat, tuv, 1, false);\r\n        }\r\n        if (right && bottom) {\r\n            uvl_ = uvr - d_right;\r\n            uvt_ = uvb - d_bottom;\r\n            uvr_ = uvr;\r\n            uvb_ = uvb;\r\n            tuv[0] = uvl_, tuv[1] = uvt_, tuv[2] = uvr_, tuv[3] = uvt_,\r\n                tuv[4] = uvr_, tuv[5] = uvb_, tuv[6] = uvl_, tuv[7] = uvb_;\r\n            this._inner_drawTexture(tex, imgid, width - right + tx, height - bottom + ty, right, bottom, mat, tuv, 1, false);\r\n        }\r\n        //绘制上下两个边\r\n        if (top) {\r\n            uvl_ = uvl + d_left;\r\n            uvt_ = uvt;\r\n            uvr_ = uvr - d_right;\r\n            uvb_ = uvt + d_top;\r\n            tuv[0] = uvl_, tuv[1] = uvt_, tuv[2] = uvr_, tuv[3] = uvt_,\r\n                tuv[4] = uvr_, tuv[5] = uvb_, tuv[6] = uvl_, tuv[7] = uvb_;\r\n            if (repeat) {\r\n                this._fillTexture_h(tex, imgid, tuv, tex.width - left - right, top, left + tx, ty, width - left - right);\r\n            }\r\n            else {\r\n                this._inner_drawTexture(tex, imgid, left + tx, ty, width - left - right, top, mat, tuv, 1, false);\r\n            }\r\n        }\r\n        if (bottom) {\r\n            uvl_ = uvl + d_left;\r\n            uvt_ = uvb - d_bottom;\r\n            uvr_ = uvr - d_right;\r\n            uvb_ = uvb;\r\n            tuv[0] = uvl_, tuv[1] = uvt_, tuv[2] = uvr_, tuv[3] = uvt_,\r\n                tuv[4] = uvr_, tuv[5] = uvb_, tuv[6] = uvl_, tuv[7] = uvb_;\r\n            if (repeat) {\r\n                this._fillTexture_h(tex, imgid, tuv, tex.width - left - right, bottom, left + tx, height - bottom + ty, width - left - right);\r\n            }\r\n            else {\r\n                this._inner_drawTexture(tex, imgid, left + tx, height - bottom + ty, width - left - right, bottom, mat, tuv, 1, false);\r\n            }\r\n        }\r\n        //绘制左右两边\r\n        if (left) {\r\n            uvl_ = uvl;\r\n            uvt_ = uvt + d_top;\r\n            uvr_ = uvl + d_left;\r\n            uvb_ = uvb - d_bottom;\r\n            tuv[0] = uvl_, tuv[1] = uvt_, tuv[2] = uvr_, tuv[3] = uvt_,\r\n                tuv[4] = uvr_, tuv[5] = uvb_, tuv[6] = uvl_, tuv[7] = uvb_;\r\n            if (repeat) {\r\n                this._fillTexture_v(tex, imgid, tuv, left, tex.height - top - bottom, tx, top + ty, height - top - bottom);\r\n            }\r\n            else {\r\n                this._inner_drawTexture(tex, imgid, tx, top + ty, left, height - top - bottom, mat, tuv, 1, false);\r\n            }\r\n        }\r\n        if (right) {\r\n            uvl_ = uvr - d_right;\r\n            uvt_ = uvt + d_top;\r\n            uvr_ = uvr;\r\n            uvb_ = uvb - d_bottom;\r\n            tuv[0] = uvl_, tuv[1] = uvt_, tuv[2] = uvr_, tuv[3] = uvt_,\r\n                tuv[4] = uvr_, tuv[5] = uvb_, tuv[6] = uvl_, tuv[7] = uvb_;\r\n            if (repeat) {\r\n                this._fillTexture_v(tex, imgid, tuv, right, tex.height - top - bottom, width - right + tx, top + ty, height - top - bottom);\r\n            }\r\n            else {\r\n                this._inner_drawTexture(tex, imgid, width - right + tx, top + ty, right, height - top - bottom, mat, tuv, 1, false);\r\n            }\r\n        }\r\n        //绘制中间\r\n        uvl_ = uvl + d_left;\r\n        uvt_ = uvt + d_top;\r\n        uvr_ = uvr - d_right;\r\n        uvb_ = uvb - d_bottom;\r\n        tuv[0] = uvl_, tuv[1] = uvt_, tuv[2] = uvr_, tuv[3] = uvt_,\r\n            tuv[4] = uvr_, tuv[5] = uvb_, tuv[6] = uvl_, tuv[7] = uvb_;\r\n        if (repeat) {\r\n            var tuvr = Context.tmpUVRect;\r\n            tuvr[0] = uvl_;\r\n            tuvr[1] = uvt_;\r\n            tuvr[2] = uvr_ - uvl_;\r\n            tuvr[3] = uvb_ - uvt_;\r\n            // 这个如果用重复的可能比较多，所以采用filltexture的方法，注意这样会打断合并\r\n            this._fillTexture(tex, tex.width - left - right, tex.height - top - bottom, tuvr, left + tx, top + ty, width - left - right, height - top - bottom, 'repeat', 0, 0);\r\n        }\r\n        else {\r\n            this._inner_drawTexture(tex, imgid, left + tx, top + ty, width - left - right, height - top - bottom, mat, tuv, 1, false);\r\n        }\r\n        if (needClip)\r\n            this.restore();\r\n    }\r\n}\r\nContext.ENUM_TEXTALIGN_DEFAULT = 0;\r\nContext.ENUM_TEXTALIGN_CENTER = 1;\r\nContext.ENUM_TEXTALIGN_RIGHT = 2;\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\nContext._SUBMITVBSIZE = 32000;\r\nContext._MAXSIZE = 99999999;\r\nContext._MAXVERTNUM = 65535;\r\nContext.MAXCLIPRECT = null;\r\nContext._COUNT = 0;\r\nContext.SEGNUM = 32;\r\nContext._contextcount = 0;\r\n/**Math.PI*2的结果缓存 */\r\nContext.PI2 = 2 * Math.PI;\r\nContext._clipID_Gen = 0; //生成clipid的，原来是  _clipInfoID=++_clipInfoID 这样会有问题，导致兄弟clip的id都相同\r\nContext._textRender = new _webgl_text_TextRender__WEBPACK_IMPORTED_MODULE_39__[\"TextRender\"]();\r\n//=============新增==================\t\r\n/* 下面的方式是有bug的。canvas是直接save，restore，现在是为了优化，但是有bug，所以先不重载了\r\npublic function saveTransform(matrix:Matrix):void {\r\n    this._curMat.copyTo(matrix);\r\n}\r\n\r\npublic function restoreTransform(matrix:Matrix):void {\r\n    matrix.copyTo(this._curMat);\r\n}\r\n\r\npublic function transformByMatrix(matrix:Matrix,tx:Number,ty:Number):void {\r\n    var mat:Matrix = _curMat;\r\n    matrix.setTranslate(tx, ty);\r\n    Matrix.mul(matrix, mat, mat);\r\n    matrix.setTranslate(0, 0);\r\n    mat._bTransform = true;\r\n}\r\n*/\r\n/* 下面的是错误的。位置没有被缩放\r\npublic function transformByMatrix(matrix:Matrix, tx:Number, ty:Number):void {\r\n    SaveTransform.save(this);\r\n    Matrix.mul(matrix, _curMat, _curMat);\r\n    _curMat.tx += tx;\r\n    _curMat.ty += ty;\r\n    _curMat._checkTransform();\r\n}\r\n        \r\npublic function transformByMatrixNoSave(matrix:Matrix, tx:Number, ty:Number):void {\r\n    Matrix.mul(matrix, _curMat, _curMat);\r\n    _curMat.tx += tx;\r\n    _curMat.ty += ty;\r\n    _curMat._checkTransform();\r\n}\r\n*/\r\nContext.tmpuv1 = [0, 0, 0, 0, 0, 0, 0, 0];\r\nContext.tmpUV = [0, 0, 0, 0, 0, 0, 0, 0];\r\nContext.tmpUVRect = [0, 0, 0, 0];\r\nclass ContextParams {\r\n    constructor() {\r\n        this.lineWidth = 1;\r\n    }\r\n    clear() {\r\n        this.lineWidth = 1;\r\n        this.textAlign = this.textBaseline = null;\r\n    }\r\n    make() {\r\n        return this === ContextParams.DEFAULT ? new ContextParams() : this;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/resource/Context.ts?");

/***/ }),

/***/ "./src/core/laya/resource/HTMLCanvas.ts":
/*!**********************************************!*\
  !*** ./src/core/laya/resource/HTMLCanvas.ts ***!
  \**********************************************/
/*! exports provided: HTMLCanvas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HTMLCanvas\", function() { return HTMLCanvas; });\n/* harmony import */ var _Bitmap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Bitmap */ \"./src/core/laya/resource/Bitmap.ts\");\n/* harmony import */ var _Texture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././Texture */ \"./src/core/laya/resource/Texture.ts\");\n/* harmony import */ var _Context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ././Context */ \"./src/core/laya/resource/Context.ts\");\n/* harmony import */ var _Texture2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ././Texture2D */ \"./src/core/laya/resource/Texture2D.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * <code>HTMLCanvas</code> 是 Html Canvas 的代理类，封装了 Canvas 的属性和方法。\r\n */\r\nclass HTMLCanvas extends _Bitmap__WEBPACK_IMPORTED_MODULE_0__[\"Bitmap\"] {\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    get source() {\r\n        return this._source;\r\n    }\r\n    /*override*/ _getSource() {\r\n        return this._source;\r\n    }\r\n    /**\r\n     * 根据指定的类型，创建一个 <code>HTMLCanvas</code> 实例。\r\n     */\r\n    constructor(createCanvas = false) {\r\n        super();\r\n        if (createCanvas) //webgl模式下不建立。除非强制指，例如绘制文字部分\r\n            this._source = _utils_Browser__WEBPACK_IMPORTED_MODULE_5__[\"Browser\"].createElement(\"canvas\");\r\n        else {\r\n            this._source = this;\r\n        }\r\n        this.lock = true;\r\n    }\r\n    /**\r\n     * 清空画布内容。\r\n     */\r\n    clear() {\r\n        this._ctx && this._ctx.clear && this._ctx.clear();\r\n        if (this._texture) {\r\n            this._texture.destroy();\r\n            this._texture = null;\r\n        }\r\n    }\r\n    /**\r\n     * 销毁。\r\n     */\r\n    /*override*/ destroy() {\r\n        super.destroy();\r\n        this._setCPUMemory(0);\r\n        this._ctx && this._ctx.destroy();\r\n        this._ctx = null;\r\n    }\r\n    /**\r\n     * 释放。\r\n     */\r\n    release() {\r\n    }\r\n    /**\r\n     * Canvas 渲染上下文。\r\n     */\r\n    get context() {\r\n        if (this._ctx)\r\n            return this._ctx;\r\n        if (this._source == this) { //是webgl并且不是真的画布。如果是真的画布，可能真的想要2d context\r\n            this._ctx = new _Context__WEBPACK_IMPORTED_MODULE_2__[\"Context\"]();\r\n        }\r\n        else {\r\n            this._ctx = this._source.getContext(_renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp ? 'layagl' : '2d');\r\n        }\r\n        this._ctx._canvas = this;\r\n        //if(!Browser.onLimixiu) _ctx.size = function(w:Number, h:Number):void {};\t这个是干什么的，会导致ctx的size不好使\r\n        return this._ctx;\r\n    }\r\n    /**\r\n     * @private\r\n     * 设置 Canvas 渲染上下文。是webgl用来替换_ctx用的\r\n     * @param\tcontext Canvas 渲染上下文。\r\n     */\r\n    _setContext(context) {\r\n        this._ctx = context;\r\n    }\r\n    /**\r\n     * 获取 Canvas 渲染上下文。\r\n     * @param\tcontextID 上下文ID.\r\n     * @param\tother\r\n     * @return  Canvas 渲染上下文 Context 对象。\r\n     */\r\n    getContext(contextID, other = null) {\r\n        return this.context;\r\n    }\r\n    /**\r\n     * 获取内存大小。\r\n     * @return 内存大小。\r\n     */\r\n    //TODO:coverage\r\n    getMemSize() {\r\n        return 0; //TODO:待调整\r\n    }\r\n    /**\r\n     * 设置宽高。\r\n     * @param\tw 宽度。\r\n     * @param\th 高度。\r\n     */\r\n    size(w, h) {\r\n        if (this._width != w || this._height != h || (this._source && (this._source.width != w || this._source.height != h))) {\r\n            this._width = w;\r\n            this._height = h;\r\n            this._setCPUMemory(w * h * 4);\r\n            this._ctx && this._ctx.size && this._ctx.size(w, h);\r\n            this._source && (this._source.height = h, this._source.width = w);\r\n            if (this._texture) {\r\n                this._texture.destroy();\r\n                this._texture = null;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 获取texture实例\r\n     */\r\n    getTexture() {\r\n        if (!this._texture) {\r\n            var bitmap = new _Texture2D__WEBPACK_IMPORTED_MODULE_3__[\"Texture2D\"]();\r\n            bitmap.loadImageSource(this.source);\r\n            this._texture = new _Texture__WEBPACK_IMPORTED_MODULE_1__[\"Texture\"](bitmap);\r\n        }\r\n        return this._texture;\r\n    }\r\n    /**\r\n     * 把图片转换为base64信息\r\n     * @param\ttype \"image/png\"\r\n     * @param\tencoderOptions\t质量参数，取值范围为0-1\r\n     */\r\n    toBase64(type, encoderOptions) {\r\n        if (this._source) {\r\n            if (_renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp) {\r\n                var win = window;\r\n                if (win.conchConfig.threadMode == 2) {\r\n                    throw \"native 2 thread mode use toBase64Async\";\r\n                }\r\n                var width = this._ctx._targets.sourceWidth;\r\n                var height = this._ctx._targets.sourceHeight;\r\n                var data = this._ctx._targets.getData(0, 0, width, height);\r\n                return win.conchToBase64FlipY ? win.conchToBase64FlipY(type, encoderOptions, data.buffer, width, height) : win.conchToBase64(type, encoderOptions, data.buffer, width, height);\r\n            }\r\n            else {\r\n                return this._source.toDataURL(type, encoderOptions);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    //native多线程\r\n    toBase64Async(type, encoderOptions, callBack) {\r\n        var width = this._ctx._targets.sourceWidth;\r\n        var height = this._ctx._targets.sourceHeight;\r\n        this._ctx._targets.getDataAsync(0, 0, width, height, function (data) {\r\n            let win = window;\r\n            var base64 = win.conchToBase64FlipY ? win.conchToBase64FlipY(type, encoderOptions, data.buffer, width, height) : win.conchToBase64(type, encoderOptions, data.buffer, width, height);\r\n            callBack(base64);\r\n        });\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/resource/HTMLCanvas.ts?");

/***/ }),

/***/ "./src/core/laya/resource/RenderTexture2D.ts":
/*!***************************************************!*\
  !*** ./src/core/laya/resource/RenderTexture2D.ts ***!
  \***************************************************/
/*! exports provided: RenderTexture2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RenderTexture2D\", function() { return RenderTexture2D; });\n/* harmony import */ var _Texture2D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Texture2D */ \"./src/core/laya/resource/Texture2D.ts\");\n/* harmony import */ var _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layagl/LayaGL */ \"./src/core/laya/layagl/LayaGL.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _BaseTexture__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BaseTexture */ \"./src/core/laya/resource/BaseTexture.ts\");\n/* harmony import */ var _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../webgl/WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n/* harmony import */ var _webgl_shader_BaseShader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../webgl/shader/BaseShader */ \"./src/core/laya/webgl/shader/BaseShader.ts\");\n/* harmony import */ var _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../webgl/utils/RenderState2D */ \"./src/core/laya/webgl/utils/RenderState2D.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * <code>RenderTexture</code> 类用于创建渲染目标。\r\n */\r\nclass RenderTexture2D extends _BaseTexture__WEBPACK_IMPORTED_MODULE_3__[\"BaseTexture\"] {\r\n    /**\r\n     * @param width  宽度。\r\n     * @param height 高度。\r\n     * @param format 纹理格式。\r\n     * @param depthStencilFormat 深度格式。\r\n     * 创建一个 <code>RenderTexture</code> 实例。\r\n     */\r\n    constructor(width, height, format = _BaseTexture__WEBPACK_IMPORTED_MODULE_3__[\"BaseTexture\"].FORMAT_R8G8B8, depthStencilFormat = _BaseTexture__WEBPACK_IMPORTED_MODULE_3__[\"BaseTexture\"].FORMAT_DEPTH_16) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        super(format, false);\r\n        this._mgrKey = 0; //给WebGLRTMgr用的\r\n        this._glTextureType = _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].TEXTURE_2D;\r\n        this._width = width;\r\n        this._height = height;\r\n        this._depthStencilFormat = depthStencilFormat;\r\n        this._create(width, height);\r\n        this.lock = true;\r\n    }\r\n    /**\r\n     * 获取当前激活的Rendertexture\r\n     */\r\n    static get currentActive() {\r\n        return RenderTexture2D._currentActive;\r\n    }\r\n    /**\r\n     * 获取深度格式。\r\n     *@return 深度格式。\r\n     */\r\n    get depthStencilFormat() {\r\n        return this._depthStencilFormat;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    /*override*/ get defaulteTexture() {\r\n        return _Texture2D__WEBPACK_IMPORTED_MODULE_0__[\"Texture2D\"].grayTexture;\r\n    }\r\n    getIsReady() {\r\n        return true;\r\n    }\r\n    /**\r\n     * 获取宽度。\r\n     */\r\n    get sourceWidth() {\r\n        return this._width;\r\n    }\r\n    /***\r\n     * 获取高度。\r\n     */\r\n    get sourceHeight() {\r\n        return this._height;\r\n    }\r\n    /**\r\n     * 获取offsetX。\r\n     */\r\n    get offsetX() {\r\n        return 0;\r\n    }\r\n    /***\r\n     * 获取offsetY\r\n     */\r\n    get offsetY() {\r\n        return 0;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _create(width, height) {\r\n        var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance;\r\n        this._frameBuffer = gl.createFramebuffer();\r\n        _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].bindTexture(gl, this._glTextureType, this._glTexture);\r\n        var glFormat = this._getGLFormat();\r\n        gl.texImage2D(this._glTextureType, 0, glFormat, width, height, 0, glFormat, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].UNSIGNED_BYTE, null);\r\n        this._setGPUMemory(width * height * 4);\r\n        gl.bindFramebuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER, this._frameBuffer);\r\n        gl.framebufferTexture2D(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].COLOR_ATTACHMENT0, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].TEXTURE_2D, this._glTexture, 0);\r\n        if (this._depthStencilFormat !== _BaseTexture__WEBPACK_IMPORTED_MODULE_3__[\"BaseTexture\"].FORMAT_DEPTHSTENCIL_NONE) {\r\n            this._depthStencilBuffer = gl.createRenderbuffer();\r\n            gl.bindRenderbuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].RENDERBUFFER, this._depthStencilBuffer);\r\n            switch (this._depthStencilFormat) {\r\n                case _BaseTexture__WEBPACK_IMPORTED_MODULE_3__[\"BaseTexture\"].FORMAT_DEPTH_16:\r\n                    gl.renderbufferStorage(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].RENDERBUFFER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].DEPTH_COMPONENT16, width, height);\r\n                    gl.framebufferRenderbuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].DEPTH_ATTACHMENT, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].RENDERBUFFER, this._depthStencilBuffer);\r\n                    break;\r\n                case _BaseTexture__WEBPACK_IMPORTED_MODULE_3__[\"BaseTexture\"].FORMAT_STENCIL_8:\r\n                    gl.renderbufferStorage(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].RENDERBUFFER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].STENCIL_INDEX8, width, height);\r\n                    gl.framebufferRenderbuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].STENCIL_ATTACHMENT, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].RENDERBUFFER, this._depthStencilBuffer);\r\n                    break;\r\n                case _BaseTexture__WEBPACK_IMPORTED_MODULE_3__[\"BaseTexture\"].FORMAT_DEPTHSTENCIL_16_8:\r\n                    gl.renderbufferStorage(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].RENDERBUFFER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].DEPTH_STENCIL, width, height);\r\n                    gl.framebufferRenderbuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].DEPTH_STENCIL_ATTACHMENT, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].RENDERBUFFER, this._depthStencilBuffer);\r\n                    break;\r\n                default:\r\n                //console.log(\"RenderTexture: unkonw depth format.\");//2d并不需要depthbuffer\r\n            }\r\n        }\r\n        gl.bindFramebuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER, null);\r\n        gl.bindRenderbuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].RENDERBUFFER, null);\r\n        this._setWarpMode(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].TEXTURE_WRAP_S, this._wrapModeU);\r\n        this._setWarpMode(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].TEXTURE_WRAP_T, this._wrapModeV);\r\n        this._setFilterMode(this._filterMode);\r\n        this._setAnisotropy(this._anisoLevel);\r\n        this._readyed = true;\r\n        this._activeResource();\r\n    }\r\n    /**\r\n     * 生成mipMap。\r\n     */\r\n    /*override*/ generateMipmap() {\r\n        if (this._isPot(this.width) && this._isPot(this.height)) {\r\n            this._mipmap = true;\r\n            _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance.generateMipmap(this._glTextureType);\r\n            this._setFilterMode(this._filterMode);\r\n            this._setGPUMemory(this.width * this.height * 4 * (1 + 1 / 3));\r\n        }\r\n        else {\r\n            this._mipmap = false;\r\n            this._setGPUMemory(this.width * this.height * 4);\r\n        }\r\n    }\r\n    /**\r\n     * 保存当前的RT信息。\r\n     */\r\n    static pushRT() {\r\n        RenderTexture2D.rtStack.push({ rt: RenderTexture2D._currentActive, w: _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_6__[\"RenderState2D\"].width, h: _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_6__[\"RenderState2D\"].height });\r\n    }\r\n    /**\r\n     * 恢复上次保存的RT信息\r\n     */\r\n    static popRT() {\r\n        var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance;\r\n        var top = RenderTexture2D.rtStack.pop();\r\n        if (top) {\r\n            if (RenderTexture2D._currentActive != top.rt) {\r\n                _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance.bindFramebuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER, top.rt ? top.rt._frameBuffer : null);\r\n                RenderTexture2D._currentActive = top.rt;\r\n            }\r\n            gl.viewport(0, 0, top.w, top.h);\r\n            _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_6__[\"RenderState2D\"].width = top.w;\r\n            _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_6__[\"RenderState2D\"].height = top.h;\r\n        }\r\n    }\r\n    /**\r\n     * 开始绑定。\r\n     */\r\n    start() {\r\n        var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance;\r\n        //(memorySize == 0) && recreateResource();\r\n        _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance.bindFramebuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER, this._frameBuffer);\r\n        this._lastRT = RenderTexture2D._currentActive;\r\n        RenderTexture2D._currentActive = this;\r\n        this._readyed = true;\r\n        //var gl:LayaGL = LayaGL.instance;//TODO:这段代码影响2D、3D混合\r\n        ////(memorySize == 0) && recreateResource();\r\n        //LayaGL.instance.bindFramebuffer(WebGLContext.FRAMEBUFFER, _frameBuffer);\r\n        //_lastRT = _currentActive;\r\n        //_currentActive = this;\r\n        ////_readyed = false;  \r\n        //_readyed = true;\t//这个没什么用。还会影响流程，比如我有时候并不调用end。所以直接改成true\r\n        //\r\n        ////if (_type == TYPE2D) {\r\n        gl.viewport(0, 0, this._width, this._height); //外部设置\r\n        this._lastWidth = _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_6__[\"RenderState2D\"].width;\r\n        this._lastHeight = _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_6__[\"RenderState2D\"].height;\r\n        _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_6__[\"RenderState2D\"].width = this._width;\r\n        _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_6__[\"RenderState2D\"].height = this._height;\r\n        _webgl_shader_BaseShader__WEBPACK_IMPORTED_MODULE_5__[\"BaseShader\"].activeShader = null;\r\n        ////}\r\n    }\r\n    /**\r\n     * 结束绑定。\r\n     */\r\n    end() {\r\n        _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance.bindFramebuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER, null);\r\n        RenderTexture2D._currentActive = null;\r\n        this._readyed = true;\r\n    }\r\n    /**\r\n     * 恢复上一次的RenderTarge.由于使用自己保存的，所以如果被外面打断了的话，会出错。\r\n     */\r\n    restore() {\r\n        var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance;\r\n        if (this._lastRT != RenderTexture2D._currentActive) {\r\n            _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance.bindFramebuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER, this._lastRT ? this._lastRT._frameBuffer : null);\r\n            RenderTexture2D._currentActive = this._lastRT;\r\n        }\r\n        this._readyed = true;\r\n        //if (_type == TYPE2D)//待调整\r\n        //{\r\n        gl.viewport(0, 0, this._lastWidth, this._lastHeight);\r\n        _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_6__[\"RenderState2D\"].width = this._lastWidth;\r\n        _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_6__[\"RenderState2D\"].height = this._lastHeight;\r\n        _webgl_shader_BaseShader__WEBPACK_IMPORTED_MODULE_5__[\"BaseShader\"].activeShader = null;\r\n        //} else \r\n        //\tgl.viewport(0, 0, Laya.stage.width, Laya.stage.height);\r\n    }\r\n    clear(r = 0.0, g = 0.0, b = 0.0, a = 1.0) {\r\n        var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance;\r\n        gl.clearColor(r, g, b, a);\r\n        var clearFlag = _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].COLOR_BUFFER_BIT;\r\n        switch (this._depthStencilFormat) {\r\n            //case WebGLContext.DEPTH_COMPONENT: \r\n            case _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].DEPTH_COMPONENT16:\r\n                clearFlag |= _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].DEPTH_BUFFER_BIT;\r\n                break;\r\n            //case WebGLContext.STENCIL_INDEX:\r\n            case _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].STENCIL_INDEX8:\r\n                clearFlag |= _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].STENCIL_BUFFER_BIT;\r\n                break;\r\n            case _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].DEPTH_STENCIL:\r\n                clearFlag |= _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].DEPTH_BUFFER_BIT;\r\n                clearFlag |= _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].STENCIL_BUFFER_BIT;\r\n                break;\r\n        }\r\n        gl.clear(clearFlag);\r\n    }\r\n    /**\r\n     * 获得像素数据。\r\n     * @param x X像素坐标。\r\n     * @param y Y像素坐标。\r\n     * @param width 宽度。\r\n     * @param height 高度。\r\n     * @return 像素数据。\r\n     */\r\n    getData(x, y, width, height) {\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_2__[\"Render\"].isConchApp && window.conchConfig.threadMode == 2) {\r\n            throw \"native 2 thread mode use getDataAsync\";\r\n        }\r\n        var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance;\r\n        gl.bindFramebuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER, this._frameBuffer);\r\n        var canRead = (gl.checkFramebufferStatus(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER) === _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER_COMPLETE);\r\n        if (!canRead) {\r\n            gl.bindFramebuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER, null);\r\n            return null;\r\n        }\r\n        var pixels = new Uint8Array(this._width * this._height * 4);\r\n        var glFormat = this._getGLFormat();\r\n        gl.readPixels(x, y, width, height, glFormat, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].UNSIGNED_BYTE, pixels);\r\n        gl.bindFramebuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER, null);\r\n        return pixels;\r\n    }\r\n    /**\r\n     * native多线程\r\n     */\r\n    getDataAsync(x, y, width, height, callBack) {\r\n        var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance;\r\n        gl.bindFramebuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER, this._frameBuffer);\r\n        gl.readPixelsAsync(x, y, width, height, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].RGBA, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].UNSIGNED_BYTE, function (data) {\r\n            callBack(new Uint8Array(data));\r\n        });\r\n        gl.bindFramebuffer(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAMEBUFFER, null);\r\n    }\r\n    recycle() {\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    /*override*/ _disposeResource() {\r\n        if (this._frameBuffer) {\r\n            var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance;\r\n            gl.deleteTexture(this._glTexture);\r\n            gl.deleteFramebuffer(this._frameBuffer);\r\n            gl.deleteRenderbuffer(this._depthStencilBuffer);\r\n            this._glTexture = null;\r\n            this._frameBuffer = null;\r\n            this._depthStencilBuffer = null;\r\n            this._setGPUMemory(0);\r\n        }\r\n    }\r\n}\r\n//为push,pop 用的。以后和上面只保留一份。\r\n//由于可能递归，所以不能简单的用save，restore\r\nRenderTexture2D.rtStack = []; //rt:RenderTexture，w:int，h:int\r\nRenderTexture2D.defuv = [0, 0, 1, 0, 1, 1, 0, 1];\r\nRenderTexture2D.flipyuv = [0, 1, 1, 1, 1, 0, 0, 0];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/resource/RenderTexture2D.ts?");

/***/ }),

/***/ "./src/core/laya/resource/Resource.ts":
/*!********************************************!*\
  !*** ./src/core/laya/resource/Resource.ts ***!
  \********************************************/
/*! exports provided: Resource */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Resource\", function() { return Resource; });\n/* harmony import */ var _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/EventDispatcher */ \"./src/core/laya/events/EventDispatcher.ts\");\n/* harmony import */ var _net_Loader__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../net/Loader */ \"./src/core/laya/net/Loader.ts\");\n/* harmony import */ var _net_URL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../net/URL */ \"./src/core/laya/net/URL.ts\");\n\r\n\r\n\r\n/**\r\n * @private\r\n * <code>Resource</code> 资源存取类。\r\n */\r\nclass Resource extends _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_0__[\"EventDispatcher\"] {\r\n    /**\r\n     * 创建一个 <code>Resource</code> 实例。\r\n     */\r\n    constructor() {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        super();\r\n        /**@private */\r\n        this._id = 0;\r\n        /**@private */\r\n        this._url = null;\r\n        /**@private */\r\n        this._cpuMemory = 0;\r\n        /**@private */\r\n        this._gpuMemory = 0;\r\n        /**@private */\r\n        this._destroyed = false;\r\n        /**@private */\r\n        this._referenceCount = 0;\r\n        /**是否加锁，如果true为不能使用自动释放机制。*/\r\n        this.lock = false;\r\n        /**名称。 */\r\n        this.name = null;\r\n        this._id = ++Resource._uniqueIDCounter;\r\n        this._destroyed = false;\r\n        this._referenceCount = 0;\r\n        Resource._idResourcesMap[this.id] = this;\r\n        this.lock = false;\r\n    }\r\n    /**\r\n     * 当前内存，以字节为单位。\r\n     */\r\n    static get cpuMemory() {\r\n        return Resource._cpuMemory;\r\n    }\r\n    /**\r\n     * 当前显存，以字节为单位。\r\n     */\r\n    static get gpuMemory() {\r\n        return Resource._gpuMemory;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _addCPUMemory(size) {\r\n        Resource._cpuMemory += size;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _addGPUMemory(size) {\r\n        Resource._gpuMemory += size;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _addMemory(cpuSize, gpuSize) {\r\n        Resource._cpuMemory += cpuSize;\r\n        Resource._gpuMemory += gpuSize;\r\n    }\r\n    /**\r\n     * 通过资源ID返回已载入资源。\r\n     * @param id 资源ID\r\n     * @return 资源 <code>Resource</code> 对象。\r\n     */\r\n    static getResourceByID(id) {\r\n        return Resource._idResourcesMap[id];\r\n    }\r\n    /**\r\n     * 通过url返回已载入资源。\r\n     * @param url 资源URL\r\n     * @param index 索引\r\n     * @return 资源 <code>Resource</code> 对象。\r\n     */\r\n    static getResourceByURL(url, index = 0) {\r\n        return Resource._urlResourcesMap[url][index];\r\n    }\r\n    /**\r\n     * 销毁当前没有被使用的资源,该函数会忽略lock=true的资源。\r\n     * @param group 指定分组。\r\n     */\r\n    static destroyUnusedResources() {\r\n        for (var k in Resource._idResourcesMap) {\r\n            var res = Resource._idResourcesMap[k];\r\n            if (!res.lock && res._referenceCount === 0)\r\n                res.destroy();\r\n        }\r\n    }\r\n    /**\r\n     * 获取唯一标识ID,通常用于识别。\r\n     */\r\n    get id() {\r\n        return this._id;\r\n    }\r\n    /**\r\n     * 获取资源的URL地址。\r\n     * @return URL地址。\r\n     */\r\n    get url() {\r\n        return this._url;\r\n    }\r\n    /**\r\n     * 内存大小。\r\n     */\r\n    get cpuMemory() {\r\n        return Resource._cpuMemory;\r\n    }\r\n    /**\r\n     * 显存大小。\r\n     */\r\n    get gpuMemory() {\r\n        return Resource._gpuMemory;\r\n    }\r\n    /**\r\n     * 是否已处理。\r\n     */\r\n    get destroyed() {\r\n        return this._destroyed;\r\n    }\r\n    /**\r\n     * 获取资源的引用计数。\r\n     */\r\n    get referenceCount() {\r\n        return this._referenceCount;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _setCPUMemory(value) {\r\n        var offsetValue = value - Resource._cpuMemory;\r\n        Resource._cpuMemory = value;\r\n        Resource._addCPUMemory(offsetValue);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _setGPUMemory(value) {\r\n        var offsetValue = value - Resource._gpuMemory;\r\n        Resource._gpuMemory = value;\r\n        Resource._addGPUMemory(offsetValue);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _setCreateURL(url) {\r\n        url = _net_URL__WEBPACK_IMPORTED_MODULE_2__[\"URL\"].formatURL(url); //需要序列化为绝对路径\r\n        if (this._url !== url) {\r\n            var resList;\r\n            if (this._url) {\r\n                resList = Resource._urlResourcesMap[this._url];\r\n                resList.splice(resList.indexOf(this), 1);\r\n                (resList.length === 0) && (delete Resource._urlResourcesMap[this._url]);\r\n            }\r\n            if (url) {\r\n                resList = Resource._urlResourcesMap[url];\r\n                (resList) || (Resource._urlResourcesMap[url] = resList = []);\r\n                resList.push(this);\r\n            }\r\n            this._url = url;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _addReference(count = 1) {\r\n        this._referenceCount += count;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _removeReference(count = 1) {\r\n        this._referenceCount -= count;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _clearReference() {\r\n        this._referenceCount = 0;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _recoverResource() {\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _disposeResource() {\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _activeResource() {\r\n    }\r\n    /**\r\n     * 销毁资源,销毁后资源不能恢复。\r\n     */\r\n    destroy() {\r\n        if (this._destroyed)\r\n            return;\r\n        this._destroyed = true;\r\n        this.lock = false; //解锁资源，强制清理\r\n        this._disposeResource();\r\n        delete Resource._idResourcesMap[this.id];\r\n        var resList;\r\n        if (this._url) {\r\n            resList = Resource._urlResourcesMap[this._url];\r\n            if (resList) {\r\n                resList.splice(resList.indexOf(this), 1);\r\n                (resList.length === 0) && (delete Resource._urlResourcesMap[this._url]);\r\n            }\r\n            var resou = _net_Loader__WEBPACK_IMPORTED_MODULE_1__[\"Loader\"].getRes(this._url);\r\n            (resou == this) && (delete _net_Loader__WEBPACK_IMPORTED_MODULE_1__[\"Loader\"].loadedMap[this._url]);\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nResource._uniqueIDCounter = 0;\r\n/** @private */\r\nResource._idResourcesMap = {};\r\n/** @private */\r\nResource._urlResourcesMap = {};\r\n/** @private 以字节为单位。*/\r\nResource._cpuMemory = 0;\r\n/** @private 以字节为单位。*/\r\nResource._gpuMemory = 0;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/resource/Resource.ts?");

/***/ }),

/***/ "./src/core/laya/resource/Texture.ts":
/*!*******************************************!*\
  !*** ./src/core/laya/resource/Texture.ts ***!
  \*******************************************/
/*! exports provided: Texture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Texture\", function() { return Texture; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _Context__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././Context */ \"./src/core/laya/resource/Context.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/EventDispatcher */ \"./src/core/laya/events/EventDispatcher.ts\");\n/* harmony import */ var _maths_Rectangle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../maths/Rectangle */ \"./src/core/laya/maths/Rectangle.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _utils_Handler__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/Handler */ \"./src/core/laya/utils/Handler.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 资源加载完成后调度。\r\n * @eventType Event.READY\r\n */\r\n/*[Event(name = \"ready\", type = \"laya.events.Event\")]*/\r\n/**\r\n * <code>Texture</code> 是一个纹理处理类。\r\n */\r\nclass Texture extends _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_3__[\"EventDispatcher\"] {\r\n    /**\r\n     * 创建一个 <code>Texture</code> 实例。\r\n     * @param\tbitmap 位图资源。\r\n     * @param\tuv UV 数据信息。\r\n     */\r\n    constructor(bitmap = null, uv = null, sourceWidth = 0, sourceHeight = 0) {\r\n        super();\r\n        /**@private uv的范围*/\r\n        this.uvrect = [0, 0, 1, 1]; //startu,startv, urange,vrange\r\n        /**@private */\r\n        this._destroyed = false;\r\n        /**@private */\r\n        this._referenceCount = 0;\r\n        /**@private 唯一ID*/\r\n        this.$_GID = 0;\r\n        /**沿 X 轴偏移量。*/\r\n        this.offsetX = 0;\r\n        /**沿 Y 轴偏移量。*/\r\n        this.offsetY = 0;\r\n        /** @private */\r\n        this._w = 0;\r\n        /** @private */\r\n        this._h = 0;\r\n        /**原始宽度（包括被裁剪的透明区域）。*/\r\n        this.sourceWidth = 0;\r\n        /**原始高度（包括被裁剪的透明区域）。*/\r\n        this.sourceHeight = 0;\r\n        /**图片地址*/\r\n        this.url = null;\r\n        /** @private */\r\n        this.scaleRate = 1;\r\n        this.setTo(bitmap, uv, sourceWidth, sourceHeight);\r\n    }\r\n    /**\r\n     * 平移 UV。\r\n     * @param offsetX 沿 X 轴偏移量。\r\n     * @param offsetY 沿 Y 轴偏移量。\r\n     * @param uv 需要平移操作的的 UV。\r\n     * @return 平移后的UV。\r\n     */\r\n    static moveUV(offsetX, offsetY, uv) {\r\n        for (var i = 0; i < 8; i += 2) {\r\n            uv[i] += offsetX;\r\n            uv[i + 1] += offsetY;\r\n        }\r\n        return uv;\r\n    }\r\n    /**\r\n     *  根据指定资源和坐标、宽高、偏移量等创建 <code>Texture</code> 对象。\r\n     * @param\tsource 绘图资源 Texture2D 或者 Texture对象。\r\n     * @param\tx 起始绝对坐标 x 。\r\n     * @param\ty 起始绝对坐标 y 。\r\n     * @param\twidth 宽绝对值。\r\n     * @param\theight 高绝对值。\r\n     * @param\toffsetX X 轴偏移量（可选）。\t就是[x,y]相对于原始小图片的位置。一般都是正的，表示裁掉了空白边的大小，如果是负的一般表示加了保护边\r\n     * @param\toffsetY Y 轴偏移量（可选）。\r\n     * @param\tsourceWidth 原始宽度，包括被裁剪的透明区域（可选）。\r\n     * @param\tsourceHeight 原始高度，包括被裁剪的透明区域（可选）。\r\n     * @return  <code>Texture</code> 对象。\r\n     */\r\n    static create(source, x, y, width, height, offsetX = 0, offsetY = 0, sourceWidth = 0, sourceHeight = 0) {\r\n        return Texture._create(source, x, y, width, height, offsetX, offsetY, sourceWidth, sourceHeight);\r\n    }\r\n    /**\r\n     * @private\r\n     * 根据指定资源和坐标、宽高、偏移量等创建 <code>Texture</code> 对象。\r\n     * @param\tsource 绘图资源 Texture2D 或者 Texture 对象。\r\n     * @param\tx 起始绝对坐标 x 。\r\n     * @param\ty 起始绝对坐标 y 。\r\n     * @param\twidth 宽绝对值。\r\n     * @param\theight 高绝对值。\r\n     * @param\toffsetX X 轴偏移量（可选）。\r\n     * @param\toffsetY Y 轴偏移量（可选）。\r\n     * @param\tsourceWidth 原始宽度，包括被裁剪的透明区域（可选）。\r\n     * @param\tsourceHeight 原始高度，包括被裁剪的透明区域（可选）。\r\n     * @param\toutTexture 返回的Texture对象。\r\n     * @return  <code>Texture</code> 对象。\r\n     */\r\n    static _create(source, x, y, width, height, offsetX = 0, offsetY = 0, sourceWidth = 0, sourceHeight = 0, outTexture = null) {\r\n        var btex = source instanceof Texture;\r\n        var uv = btex ? source.uv : Texture.DEF_UV;\r\n        var bitmap = btex ? source.bitmap : source;\r\n        if (bitmap.width && (x + width) > bitmap.width)\r\n            width = bitmap.width - x;\r\n        if (bitmap.height && (y + height) > bitmap.height)\r\n            height = bitmap.height - y;\r\n        var tex;\r\n        if (outTexture) {\r\n            tex = outTexture;\r\n            tex.setTo(bitmap, null, sourceWidth || width, sourceHeight || height);\r\n        }\r\n        else {\r\n            tex = new Texture(bitmap, null, sourceWidth || width, sourceHeight || height);\r\n        }\r\n        tex.width = width;\r\n        tex.height = height;\r\n        tex.offsetX = offsetX;\r\n        tex.offsetY = offsetY;\r\n        var dwidth = 1 / bitmap.width;\r\n        var dheight = 1 / bitmap.height;\r\n        x *= dwidth;\r\n        y *= dheight;\r\n        width *= dwidth;\r\n        height *= dheight;\r\n        var u1 = tex.uv[0], v1 = tex.uv[1], u2 = tex.uv[4], v2 = tex.uv[5];\r\n        var inAltasUVWidth = (u2 - u1), inAltasUVHeight = (v2 - v1);\r\n        var oriUV = Texture.moveUV(uv[0], uv[1], [x, y, x + width, y, x + width, y + height, x, y + height]);\r\n        tex.uv = new Float32Array([u1 + oriUV[0] * inAltasUVWidth, v1 + oriUV[1] * inAltasUVHeight,\r\n            u2 - (1 - oriUV[2]) * inAltasUVWidth, v1 + oriUV[3] * inAltasUVHeight,\r\n            u2 - (1 - oriUV[4]) * inAltasUVWidth, v2 - (1 - oriUV[5]) * inAltasUVHeight,\r\n            u1 + oriUV[6] * inAltasUVWidth, v2 - (1 - oriUV[7]) * inAltasUVHeight]);\r\n        var bitmapScale = bitmap.scaleRate;\r\n        if (bitmapScale && bitmapScale != 1) {\r\n            tex.sourceWidth /= bitmapScale;\r\n            tex.sourceHeight /= bitmapScale;\r\n            tex.width /= bitmapScale;\r\n            tex.height /= bitmapScale;\r\n            tex.scaleRate = bitmapScale;\r\n        }\r\n        else {\r\n            tex.scaleRate = 1;\r\n        }\r\n        return tex;\r\n    }\r\n    /**\r\n     * 截取Texture的一部分区域，生成新的Texture，如果两个区域没有相交，则返回null。\r\n     * @param\ttexture\t目标Texture。\r\n     * @param\tx\t\t相对于目标Texture的x位置。\r\n     * @param\ty\t\t相对于目标Texture的y位置。\r\n     * @param\twidth\t截取的宽度。\r\n     * @param\theight\t截取的高度。\r\n     * @return 返回一个新的Texture。\r\n     */\r\n    static createFromTexture(texture, x, y, width, height) {\r\n        var texScaleRate = texture.scaleRate;\r\n        if (texScaleRate != 1) {\r\n            x *= texScaleRate;\r\n            y *= texScaleRate;\r\n            width *= texScaleRate;\r\n            height *= texScaleRate;\r\n        }\r\n        var rect = _maths_Rectangle__WEBPACK_IMPORTED_MODULE_4__[\"Rectangle\"].TEMP.setTo(x - texture.offsetX, y - texture.offsetY, width, height);\r\n        var result = rect.intersection(Texture._rect1.setTo(0, 0, texture.width, texture.height), Texture._rect2);\r\n        if (result)\r\n            var tex = Texture.create(texture, result.x, result.y, result.width, result.height, result.x - rect.x, result.y - rect.y, width, height);\r\n        else\r\n            return null;\r\n        return tex;\r\n    }\r\n    get uv() {\r\n        return this._uv;\r\n    }\r\n    set uv(value) {\r\n        this.uvrect[0] = Math.min(value[0], value[2], value[4], value[6]);\r\n        this.uvrect[1] = Math.min(value[1], value[3], value[5], value[7]);\r\n        this.uvrect[2] = Math.max(value[0], value[2], value[4], value[6]) - this.uvrect[0];\r\n        this.uvrect[3] = Math.max(value[1], value[3], value[5], value[7]) - this.uvrect[1];\r\n        this._uv = value;\r\n    }\r\n    /** 实际宽度。*/\r\n    get width() {\r\n        if (this._w)\r\n            return this._w;\r\n        if (!this.bitmap)\r\n            return 0;\r\n        return (this.uv && this.uv !== Texture.DEF_UV) ? (this.uv[2] - this.uv[0]) * this.bitmap.width : this.bitmap.width;\r\n    }\r\n    set width(value) {\r\n        this._w = value;\r\n        this.sourceWidth || (this.sourceWidth = value);\r\n    }\r\n    /** 实际高度。*/\r\n    get height() {\r\n        if (this._h)\r\n            return this._h;\r\n        if (!this.bitmap)\r\n            return 0;\r\n        return (this.uv && this.uv !== Texture.DEF_UV) ? (this.uv[5] - this.uv[1]) * this.bitmap.height : this.bitmap.height;\r\n    }\r\n    set height(value) {\r\n        this._h = value;\r\n        this.sourceHeight || (this.sourceHeight = value);\r\n    }\r\n    /**\r\n     * 获取位图。\r\n     * @return 位图。\r\n     */\r\n    get bitmap() {\r\n        return this._bitmap;\r\n    }\r\n    /**\r\n     * 设置位图。\r\n     * @param 位图。\r\n     */\r\n    set bitmap(value) {\r\n        this._bitmap && this._bitmap._removeReference(this._referenceCount);\r\n        this._bitmap = value;\r\n        value && (value._addReference(this._referenceCount));\r\n    }\r\n    /**\r\n     * 获取是否已经销毁。\r\n     * @return 是否已经销毁。\r\n     */\r\n    get destroyed() {\r\n        return this._destroyed;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _addReference() {\r\n        this._bitmap && this._bitmap._addReference();\r\n        this._referenceCount++;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _removeReference() {\r\n        this._bitmap && this._bitmap._removeReference();\r\n        this._referenceCount--;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _getSource(cb = null) {\r\n        if (this._destroyed || !this._bitmap)\r\n            return null;\r\n        this.recoverBitmap(cb);\r\n        return this._bitmap.destroyed ? null : this.bitmap._getSource();\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _onLoaded(complete, context) {\r\n        if (!context) {\r\n        }\r\n        else if (context == this) {\r\n        }\r\n        else if (context instanceof Texture) {\r\n            var tex = context;\r\n            Texture._create(context, 0, 0, tex.width, tex.height, 0, 0, tex.sourceWidth, tex.sourceHeight, this);\r\n        }\r\n        else {\r\n            this.bitmap = context;\r\n            this.sourceWidth = this._w = context.width;\r\n            this.sourceHeight = this._h = context.height;\r\n        }\r\n        complete && complete.run();\r\n        this.event(_events_Event__WEBPACK_IMPORTED_MODULE_2__[\"Event\"].READY, this);\r\n    }\r\n    /**\r\n     * 获取是否可以使用。\r\n     */\r\n    getIsReady() {\r\n        return this._destroyed ? false : (this._bitmap ? true : false);\r\n    }\r\n    /**\r\n     * 设置此对象的位图资源、UV数据信息。\r\n     * @param\tbitmap 位图资源\r\n     * @param\tuv UV数据信息\r\n     */\r\n    setTo(bitmap = null, uv = null, sourceWidth = 0, sourceHeight = 0) {\r\n        this.bitmap = bitmap;\r\n        this.sourceWidth = sourceWidth;\r\n        this.sourceHeight = sourceHeight;\r\n        if (bitmap) {\r\n            this._w = bitmap.width;\r\n            this._h = bitmap.height;\r\n            this.sourceWidth = this.sourceWidth || bitmap.width;\r\n            this.sourceHeight = this.sourceHeight || bitmap.height;\r\n        }\r\n        this.uv = uv || Texture.DEF_UV;\r\n    }\r\n    /**\r\n     * 加载指定地址的图片。\r\n     * @param\turl 图片地址。\r\n     * @param\tcomplete 加载完成回调\r\n     */\r\n    load(url, complete = null) {\r\n        if (!this._destroyed)\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].loader.load(url, _utils_Handler__WEBPACK_IMPORTED_MODULE_6__[\"Handler\"].create(this, this._onLoaded, [complete]), null, \"htmlimage\", 1, false, null, true);\r\n    }\r\n    getTexturePixels(x, y, width, height) {\r\n        var st, dst, i;\r\n        var tex2d = this.bitmap;\r\n        var texw = tex2d.width;\r\n        var texh = tex2d.height;\r\n        if (x + width > texw)\r\n            width -= (x + width) - texw;\r\n        if (y + height > texh)\r\n            height -= (y + height) - texh;\r\n        if (width <= 0 || height <= 0)\r\n            return null;\r\n        var wstride = width * 4;\r\n        var pix = null;\r\n        try {\r\n            pix = tex2d.getPixels();\r\n        }\r\n        catch (e) {\r\n        }\r\n        if (pix) {\r\n            if (x == 0 && y == 0 && width == texw && height == texh)\r\n                return pix;\r\n            //否则只取一部分\r\n            var ret = new Uint8Array(width * height * 4);\r\n            wstride = texw * 4;\r\n            st = x * 4;\r\n            dst = (y + height - 1) * wstride + x * 4;\r\n            for (i = height - 1; i >= 0; i--) {\r\n                ret.set(dt.slice(dst, dst + width * 4), st);\r\n                st += wstride;\r\n                dst -= wstride;\r\n            }\r\n            return ret;\r\n        }\r\n        // 如果无法直接获取，只能先渲染出来\r\n        var ctx = new _Context__WEBPACK_IMPORTED_MODULE_1__[\"Context\"]();\r\n        ctx.size(width, height);\r\n        ctx.asBitmap = true;\r\n        var uv = null;\r\n        if (x != 0 || y != 0 || width != texw || height != texh) {\r\n            uv = uv.concat(); // 复制一份uv\r\n            var stu = uv[0];\r\n            var stv = uv[1];\r\n            var uvw = uv[2] - stu;\r\n            var uvh = uv[7] - stv;\r\n            var uk = uvw / texw;\r\n            var vk = uvh / texh;\r\n            uv = [stu + x * uk, stv + y * vk,\r\n                stu + (x + width) * uk, stv + y * vk,\r\n                stu + (x + width) * uk, stv + (y + height) * vk,\r\n                stu + x * uk, stv + (y + height) * vk];\r\n        }\r\n        ctx._drawTextureM(this, 0, 0, width, height, null, 1.0, uv);\r\n        //ctx.drawTexture(value, -x, -y, x + width, y + height);\r\n        ctx._targets.start();\r\n        ctx.flush();\r\n        ctx._targets.end();\r\n        ctx._targets.restore();\r\n        var dt = ctx._targets.getData(0, 0, width, height);\r\n        ctx.destroy();\r\n        // 上下颠倒一下\r\n        ret = new Uint8Array(width * height * 4);\r\n        st = 0;\r\n        dst = (height - 1) * wstride;\r\n        for (i = height - 1; i >= 0; i--) {\r\n            ret.set(dt.slice(dst, dst + wstride), st);\r\n            st += wstride;\r\n            dst -= wstride;\r\n        }\r\n        return ret;\r\n    }\r\n    /**\r\n     * 获取Texture上的某个区域的像素点\r\n     * @param\tx\r\n     * @param\ty\r\n     * @param\twidth\r\n     * @param\theight\r\n     * @return  返回像素点集合\r\n     */\r\n    getPixels(x, y, width, height) {\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_5__[\"Render\"].isConchApp) {\r\n            return this._nativeObj.getImageData(x, y, width, height);\r\n        }\r\n        else {\r\n            return this.getTexturePixels(x, y, width, height);\r\n        } // canvas 不支持\r\n    }\r\n    /**\r\n     * 通过url强制恢复bitmap。\r\n     */\r\n    recoverBitmap(onok = null) {\r\n        var url = this._bitmap.url;\r\n        if (!this._destroyed && (!this._bitmap || this._bitmap.destroyed) && url) {\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].loader.load(url, _utils_Handler__WEBPACK_IMPORTED_MODULE_6__[\"Handler\"].create(this, function (bit) {\r\n                this.bitmap = bit;\r\n                onok && onok();\r\n            }), null, \"htmlimage\", 1, false, null, true);\r\n        }\r\n    }\r\n    /**\r\n     * 强制释放Bitmap,无论是否被引用。\r\n     */\r\n    disposeBitmap() {\r\n        if (!this._destroyed && this._bitmap) {\r\n            this._bitmap.destroy();\r\n        }\r\n    }\r\n    /**\r\n     * 销毁纹理。\r\n     */\r\n    destroy(force = false) {\r\n        if (!this._destroyed) {\r\n            this._destroyed = true;\r\n            var bit = this._bitmap;\r\n            if (bit) {\r\n                bit._removeReference(this._referenceCount);\r\n                if (bit.referenceCount === 0 || force)\r\n                    bit.destroy();\r\n                bit = null;\r\n            }\r\n            if (this.url && this === _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].loader.getRes(this.url))\r\n                _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].loader.clearRes(this.url);\r\n        }\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n/**@private 默认 UV 信息。*/\r\nTexture.DEF_UV = new Float32Array([0, 0, 1.0, 0, 1.0, 1.0, 0, 1.0]);\r\n/**@private */\r\nTexture.NO_UV = new Float32Array([0, 0, 0, 0, 0, 0, 0, 0]);\r\n/**@private 反转 UV 信息。*/\r\nTexture.INV_UV = new Float32Array([0, 1, 1.0, 1, 1.0, 0.0, 0, 0.0]);\r\n/**@private */\r\nTexture._rect1 = new _maths_Rectangle__WEBPACK_IMPORTED_MODULE_4__[\"Rectangle\"]();\r\n/**@private */\r\nTexture._rect2 = new _maths_Rectangle__WEBPACK_IMPORTED_MODULE_4__[\"Rectangle\"]();\r\n\n\n//# sourceURL=webpack:///./src/core/laya/resource/Texture.ts?");

/***/ }),

/***/ "./src/core/laya/resource/Texture2D.ts":
/*!*********************************************!*\
  !*** ./src/core/laya/resource/Texture2D.ts ***!
  \*********************************************/
/*! exports provided: Texture2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Texture2D\", function() { return Texture2D; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../layagl/LayaGL */ \"./src/core/laya/layagl/LayaGL.ts\");\n/* harmony import */ var _net_Loader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../net/Loader */ \"./src/core/laya/net/Loader.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _BaseTexture__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BaseTexture */ \"./src/core/laya/resource/BaseTexture.ts\");\n/* harmony import */ var _HTMLCanvas__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./HTMLCanvas */ \"./src/core/laya/resource/HTMLCanvas.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../webgl/WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * <code>Texture2D</code> 类用于生成2D纹理。\r\n */\r\nclass Texture2D extends _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"] {\r\n    /**\r\n     * 创建一个 <code>Texture2D</code> 实例。\r\n     * @param\twidth 宽。\r\n     * @param\theight 高。\r\n     * @param\tformat 贴图格式。\r\n     * @param\tmipmap 是否生成mipmap。\r\n     * @param\tcanRead 是否可读像素,如果为true,会在内存保留像素数据。\r\n     */\r\n    constructor(width = 0, height = 0, format = _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_R8G8B8A8, mipmap = true, canRead = false) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        super(format, mipmap);\r\n        this._glTextureType = _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_2D;\r\n        this._width = width;\r\n        this._height = height;\r\n        this._canRead = canRead;\r\n        this._setWarpMode(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_WRAP_S, this._wrapModeU); //TODO:重置宽高需要调整\r\n        this._setWarpMode(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_WRAP_T, this._wrapModeV); //TODO:重置宽高需要调整\r\n        this._setFilterMode(this._filterMode); //TODO:重置宽高需要调整\r\n        this._setAnisotropy(this._anisoLevel);\r\n        if (this._mipmap) {\r\n            this._mipmapCount = Math.max(Math.ceil(Math.log2(width)) + 1, Math.ceil(Math.log2(2)) + 1);\r\n            for (var i = 0; i < this._mipmapCount; i++)\r\n                this._setPixels(null, i, Math.max(width >> i, 1), Math.max(height >> i, 1)); //初始化各级mipmap\r\n            this._setGPUMemory(width * height * 4 * (1 + 1 / 3));\r\n        }\r\n        else {\r\n            this._mipmapCount = 1;\r\n            this._setGPUMemory(width * height * 4);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static __init__() {\r\n        var pixels = new Uint8Array(3);\r\n        pixels[0] = 128;\r\n        pixels[1] = 128;\r\n        pixels[2] = 128;\r\n        Texture2D.grayTexture = new Texture2D(1, 1, _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_R8G8B8, false, false);\r\n        Texture2D.grayTexture.setPixels(pixels);\r\n        Texture2D.grayTexture.lock = true; //锁住资源防止被资源管理释放\r\n        pixels[0] = 255;\r\n        pixels[1] = 255;\r\n        pixels[2] = 255;\r\n        Texture2D.whiteTexture = new Texture2D(1, 1, _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_R8G8B8, false, false);\r\n        Texture2D.whiteTexture.setPixels(pixels);\r\n        Texture2D.whiteTexture.lock = true; //锁住资源防止被资源管理释放\r\n        pixels[0] = 0;\r\n        pixels[1] = 0;\r\n        pixels[2] = 0;\r\n        Texture2D.blackTexture = new Texture2D(1, 1, _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_R8G8B8, false, false);\r\n        Texture2D.blackTexture.setPixels(pixels);\r\n        Texture2D.blackTexture.lock = true; //锁住资源防止被资源管理释放\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    static _parse(data, propertyParams = null, constructParams = null) {\r\n        var texture = constructParams ? new Texture2D(constructParams[0], constructParams[1], constructParams[2], constructParams[3], constructParams[4]) : new Texture2D(0, 0);\r\n        if (propertyParams) {\r\n            texture.wrapModeU = propertyParams.wrapModeU;\r\n            texture.wrapModeV = propertyParams.wrapModeV;\r\n            texture.filterMode = propertyParams.filterMode;\r\n            texture.anisoLevel = propertyParams.anisoLevel;\r\n        }\r\n        switch (texture._format) {\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_R8G8B8:\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_R8G8B8A8:\r\n                texture.loadImageSource(data);\r\n                break;\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_DXT1:\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_DXT5:\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_ETC1RGB:\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGB_2BPPV:\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGBA_2BPPV:\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGB_4BPPV:\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGBA_4BPPV:\r\n                texture.setCompressData(data);\r\n                break;\r\n            default:\r\n                throw \"Texture2D:unkonwn format.\";\r\n        }\r\n        return texture;\r\n    }\r\n    /**\r\n     * 加载Texture2D。\r\n     * @param url Texture2D地址。\r\n     * @param complete 完成回掉。\r\n     */\r\n    static load(url, complete) {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].loader.create(url, complete, null, _net_Loader__WEBPACK_IMPORTED_MODULE_2__[\"Loader\"].TEXTURE2D);\r\n    }\r\n    /**\r\n     * 获取mipmap数量。\r\n     */\r\n    get mipmapCount() {\r\n        return this._mipmapCount;\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    /*override*/ get defaulteTexture() {\r\n        return Texture2D.grayTexture;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _getFormatByteCount() {\r\n        switch (this._format) {\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_R8G8B8:\r\n                return 3;\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_R8G8B8A8:\r\n                return 4;\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_ALPHA8:\r\n                return 1;\r\n            default:\r\n                throw \"Texture2D: unknown format.\";\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _setPixels(pixels, miplevel, width, height) {\r\n        var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance;\r\n        var textureType = this._glTextureType;\r\n        var glFormat = this._getGLFormat();\r\n        _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].bindTexture(gl, textureType, this._glTexture);\r\n        if (this.format === _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_R8G8B8) {\r\n            gl.pixelStorei(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNPACK_ALIGNMENT, 1); //字节对齐\r\n            gl.texImage2D(textureType, miplevel, glFormat, width, height, 0, glFormat, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNSIGNED_BYTE, pixels);\r\n            gl.pixelStorei(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNPACK_ALIGNMENT, 4);\r\n        }\r\n        else {\r\n            gl.texImage2D(textureType, miplevel, glFormat, width, height, 0, glFormat, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNSIGNED_BYTE, pixels);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _calcualatesCompressedDataSize(format, width, height) {\r\n        switch (format) {\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_DXT1:\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_ETC1RGB:\r\n                return ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_DXT5:\r\n                return ((width + 3) >> 2) * ((height + 3) >> 2) * 16;\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGB_4BPPV:\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGBA_4BPPV:\r\n                return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGB_2BPPV:\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGBA_2BPPV:\r\n                return Math.floor((Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8);\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _pharseDDS(arrayBuffer) {\r\n        const FOURCC_DXT1 = 827611204;\r\n        const FOURCC_DXT5 = 894720068;\r\n        const DDPF_FOURCC = 0x4;\r\n        const DDSD_MIPMAPCOUNT = 0x20000;\r\n        const DDS_MAGIC = 0x20534444;\r\n        const DDS_HEADER_LENGTH = 31;\r\n        const DDS_HEADER_MAGIC = 0;\r\n        const DDS_HEADER_SIZE = 1;\r\n        const DDS_HEADER_FLAGS = 2;\r\n        const DDS_HEADER_HEIGHT = 3;\r\n        const DDS_HEADER_WIDTH = 4;\r\n        const DDS_HEADER_MIPMAPCOUNT = 7;\r\n        const DDS_HEADER_PF_FLAGS = 20;\r\n        const DDS_HEADER_PF_FOURCC = 21;\r\n        var header = new Int32Array(arrayBuffer, 0, DDS_HEADER_LENGTH);\r\n        if (header[DDS_HEADER_MAGIC] != DDS_MAGIC)\r\n            throw \"Invalid magic number in DDS header\";\r\n        if (!(header[DDS_HEADER_PF_FLAGS] & DDPF_FOURCC))\r\n            throw \"Unsupported format, must contain a FourCC code\";\r\n        var compressedFormat = header[DDS_HEADER_PF_FOURCC];\r\n        switch (this._format) {\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_DXT1:\r\n                if (compressedFormat !== FOURCC_DXT1)\r\n                    throw \"the FourCC code is not same with texture format.\";\r\n                break;\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_DXT5:\r\n                if (compressedFormat !== FOURCC_DXT5)\r\n                    throw \"the FourCC code is not same with texture format.\";\r\n                break;\r\n            default:\r\n                throw \"unknown texture format.\";\r\n        }\r\n        var mipLevels = 1;\r\n        if (header[DDS_HEADER_FLAGS] & DDSD_MIPMAPCOUNT) {\r\n            mipLevels = Math.max(1, header[DDS_HEADER_MIPMAPCOUNT]);\r\n            if (!this._mipmap)\r\n                throw \"the mipmap is not same with Texture2D.\";\r\n        }\r\n        else {\r\n            if (this._mipmap)\r\n                throw \"the mipmap is not same with Texture2D.\";\r\n        }\r\n        var width = header[DDS_HEADER_WIDTH];\r\n        var height = header[DDS_HEADER_HEIGHT];\r\n        this._width = width;\r\n        this._height = height;\r\n        var dataOffset = header[DDS_HEADER_SIZE] + 4;\r\n        this._upLoadCompressedTexImage2D(arrayBuffer, width, height, mipLevels, dataOffset, 0);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _pharseKTX(arrayBuffer) {\r\n        const ETC_HEADER_LENGTH = 13;\r\n        const ETC_HEADER_FORMAT = 4;\r\n        const ETC_HEADER_HEIGHT = 7;\r\n        const ETC_HEADER_WIDTH = 6;\r\n        const ETC_HEADER_MIPMAPCOUNT = 11;\r\n        const ETC_HEADER_METADATA = 12;\r\n        var id = new Uint8Array(arrayBuffer, 0, 12);\r\n        if (id[0] != 0xAB || id[1] != 0x4B || id[2] != 0x54 || id[3] != 0x58 || id[4] != 0x20 || id[5] != 0x31 || id[6] != 0x31 || id[7] != 0xBB || id[8] != 0x0D || id[9] != 0x0A || id[10] != 0x1A || id[11] != 0x0A)\r\n            throw (\"Invalid fileIdentifier in KTX header\");\r\n        var header = new Int32Array(id.buffer, id.length, ETC_HEADER_LENGTH);\r\n        var compressedFormat = header[ETC_HEADER_FORMAT];\r\n        switch (compressedFormat) {\r\n            case _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"]._compressedTextureEtc1.COMPRESSED_RGB_ETC1_WEBGL:\r\n                this._format = _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_ETC1RGB;\r\n                break;\r\n            default:\r\n                throw \"unknown texture format.\";\r\n        }\r\n        var mipLevels = header[ETC_HEADER_MIPMAPCOUNT];\r\n        var width = header[ETC_HEADER_WIDTH];\r\n        var height = header[ETC_HEADER_HEIGHT];\r\n        this._width = width;\r\n        this._height = height;\r\n        var dataOffset = 64 + header[ETC_HEADER_METADATA];\r\n        this._upLoadCompressedTexImage2D(arrayBuffer, width, height, mipLevels, dataOffset, 4);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _pharsePVR(arrayBuffer) {\r\n        const PVR_FORMAT_2BPP_RGB = 0;\r\n        const PVR_FORMAT_2BPP_RGBA = 1;\r\n        const PVR_FORMAT_4BPP_RGB = 2;\r\n        const PVR_FORMAT_4BPP_RGBA = 3;\r\n        const PVR_MAGIC = 0x03525650;\r\n        const PVR_HEADER_LENGTH = 13;\r\n        const PVR_HEADER_MAGIC = 0;\r\n        const PVR_HEADER_FORMAT = 2;\r\n        const PVR_HEADER_HEIGHT = 6;\r\n        const PVR_HEADER_WIDTH = 7;\r\n        const PVR_HEADER_MIPMAPCOUNT = 11;\r\n        const PVR_HEADER_METADATA = 12;\r\n        var header = new Int32Array(arrayBuffer, 0, PVR_HEADER_LENGTH);\r\n        if (header[PVR_HEADER_MAGIC] != PVR_MAGIC)\r\n            throw (\"Invalid magic number in PVR header\");\r\n        var compressedFormat = header[PVR_HEADER_FORMAT];\r\n        switch (compressedFormat) {\r\n            case PVR_FORMAT_2BPP_RGB:\r\n                this._format = _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGB_2BPPV;\r\n                break;\r\n            case PVR_FORMAT_4BPP_RGB:\r\n                this._format = _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGB_4BPPV;\r\n                break;\r\n            case PVR_FORMAT_2BPP_RGBA:\r\n                this._format = _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGBA_2BPPV;\r\n                break;\r\n            case PVR_FORMAT_4BPP_RGBA:\r\n                this._format = _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGBA_4BPPV;\r\n                break;\r\n            default:\r\n                throw \"Texture2D:unknown PVR format.\";\r\n        }\r\n        var mipLevels = header[PVR_HEADER_MIPMAPCOUNT];\r\n        var width = header[PVR_HEADER_WIDTH];\r\n        var height = header[PVR_HEADER_HEIGHT];\r\n        this._width = width;\r\n        this._height = height;\r\n        var dataOffset = header[PVR_HEADER_METADATA] + 52;\r\n        this._upLoadCompressedTexImage2D(arrayBuffer, width, height, mipLevels, dataOffset, 0);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _upLoadCompressedTexImage2D(data, width, height, miplevelCount, dataOffset, imageSizeOffset) {\r\n        var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance;\r\n        var textureType = this._glTextureType;\r\n        _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].bindTexture(gl, textureType, this._glTexture);\r\n        var glFormat = this._getGLFormat();\r\n        var offset = dataOffset;\r\n        for (var i = 0; i < miplevelCount; i++) {\r\n            offset += imageSizeOffset;\r\n            var mipDataSize = this._calcualatesCompressedDataSize(this._format, width, height);\r\n            var mipData = new Uint8Array(data, offset, mipDataSize);\r\n            gl.compressedTexImage2D(textureType, i, glFormat, width, height, 0, mipData);\r\n            width = Math.max(width >> 1, 1.0);\r\n            height = Math.max(height >> 1, 1.0);\r\n            offset += mipDataSize;\r\n        }\r\n        var memory = offset;\r\n        this._setGPUMemory(memory);\r\n        //if (_canRead)\r\n        //_pixels = pixels;\r\n        this._readyed = true;\r\n        this._activeResource();\r\n    }\r\n    /**\r\n     * 通过图片源填充纹理,可为HTMLImageElement、HTMLCanvasElement、HTMLVideoElement、ImageBitmap、ImageData,\r\n     * 设置之后纹理宽高可能会发生变化。\r\n     */\r\n    loadImageSource(source, premultiplyAlpha = false) {\r\n        var width = source.width;\r\n        var height = source.height;\r\n        this._width = width;\r\n        this._height = height;\r\n        if (!(this._isPot(width) && this._isPot(height)))\r\n            this._mipmap = false;\r\n        this._setWarpMode(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_WRAP_S, this._wrapModeU); //宽高变化后需要重新设置\r\n        this._setWarpMode(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_WRAP_T, this._wrapModeV); //宽高变化后需要重新设置\r\n        this._setFilterMode(this._filterMode); //宽高变化后需要重新设置\r\n        var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance;\r\n        _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].bindTexture(gl, this._glTextureType, this._glTexture);\r\n        var glFormat = this._getGLFormat();\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_3__[\"Render\"].isConchApp) { //[NATIVE]临时\r\n            if (source instanceof _HTMLCanvas__WEBPACK_IMPORTED_MODULE_5__[\"HTMLCanvas\"]) {\r\n                //todo premultiply alpha\r\n                gl.texImage2D(this._glTextureType, 0, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].RGBA, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].RGBA, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNSIGNED_BYTE, source);\r\n            }\r\n            else {\r\n                source.setPremultiplyAlpha(premultiplyAlpha);\r\n                gl.texImage2D(this._glTextureType, 0, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].RGBA, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].RGBA, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNSIGNED_BYTE, source);\r\n            }\r\n        }\r\n        else {\r\n            (premultiplyAlpha) && (gl.pixelStorei(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNPACK_PREMULTIPLY_ALPHA_WEBGL, true));\r\n            gl.texImage2D(this._glTextureType, 0, glFormat, glFormat, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNSIGNED_BYTE, source);\r\n            (premultiplyAlpha) && (gl.pixelStorei(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNPACK_PREMULTIPLY_ALPHA_WEBGL, false));\r\n        }\r\n        if (this._mipmap) {\r\n            gl.generateMipmap(this._glTextureType);\r\n            this._setGPUMemory(width * height * 4 * (1 + 1 / 3));\r\n        }\r\n        else {\r\n            this._setGPUMemory(width * height * 4);\r\n        }\r\n        if (this._canRead) { //TODO:是否所有图源都可以\r\n            if (_renders_Render__WEBPACK_IMPORTED_MODULE_3__[\"Render\"].isConchApp) {\r\n                this._pixels = new Uint8Array(source._nativeObj.getImageData(0, 0, width, height)); //TODO:如果为RGB,会错误\r\n            }\r\n            else {\r\n                _utils_Browser__WEBPACK_IMPORTED_MODULE_6__[\"Browser\"].canvas.size(width, height);\r\n                _utils_Browser__WEBPACK_IMPORTED_MODULE_6__[\"Browser\"].canvas.clear();\r\n                _utils_Browser__WEBPACK_IMPORTED_MODULE_6__[\"Browser\"].context.drawImage(source, 0, 0, width, height);\r\n                this._pixels = new Uint8Array(_utils_Browser__WEBPACK_IMPORTED_MODULE_6__[\"Browser\"].context.getImageData(0, 0, width, height).data.buffer); //TODO:如果为RGB,会错误\r\n            }\r\n        }\r\n        this._readyed = true;\r\n        this._activeResource();\r\n    }\r\n    /**\r\n     * 通过像素填充纹理。\r\n     * @param\tpixels 像素。\r\n     * @param   miplevel 层级。\r\n     */\r\n    setPixels(pixels, miplevel = 0) {\r\n        if (!pixels)\r\n            throw \"Texture2D:pixels can't be null.\";\r\n        var width = Math.max(this._width >> miplevel, 1);\r\n        var height = Math.max(this._height >> miplevel, 1);\r\n        var pixelsCount = width * height * this._getFormatByteCount();\r\n        if (pixels.length < pixelsCount)\r\n            throw \"Texture2D:pixels length should at least \" + pixelsCount + \".\";\r\n        this._setPixels(pixels, miplevel, width, height);\r\n        if (this._canRead)\r\n            this._pixels = pixels;\r\n        this._readyed = true;\r\n        this._activeResource();\r\n    }\r\n    /**\r\n     * 通过像素填充部分纹理。\r\n     * @param  x X轴像素起点。\r\n     * @param  y Y轴像素起点。\r\n     * @param  width 像素宽度。\r\n     * @param  height 像素高度。\r\n     * @param  pixels 像素数组。\r\n     * @param  miplevel 层级。\r\n     */\r\n    setSubPixels(x, y, width, height, pixels, miplevel = 0) {\r\n        if (!pixels)\r\n            throw \"Texture2D:pixels can't be null.\";\r\n        var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance;\r\n        var textureType = this._glTextureType;\r\n        _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].bindTexture(gl, textureType, this._glTexture);\r\n        var glFormat = this._getGLFormat();\r\n        if (this._format === _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_R8G8B8) {\r\n            gl.pixelStorei(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNPACK_ALIGNMENT, 1); //字节对齐\r\n            gl.texSubImage2D(textureType, miplevel, x, y, width, height, glFormat, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNSIGNED_BYTE, pixels);\r\n            gl.pixelStorei(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNPACK_ALIGNMENT, 4);\r\n        }\r\n        else {\r\n            gl.texSubImage2D(textureType, miplevel, x, y, width, height, glFormat, _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNSIGNED_BYTE, pixels);\r\n        }\r\n        //if (_canRead)\r\n        //_pixels = pixels;//TODO:\r\n        this._readyed = true;\r\n        this._activeResource();\r\n    }\r\n    /**\r\n     * 通过压缩数据填充纹理。\r\n     * @param\tdata 压缩数据。\r\n     * @param   miplevel 层级。\r\n     */\r\n    setCompressData(data) {\r\n        switch (this._format) {\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_DXT1:\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_DXT5:\r\n                this._pharseDDS(data);\r\n                break;\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_ETC1RGB:\r\n                this._pharseKTX(data);\r\n                break;\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGB_2BPPV:\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGBA_2BPPV:\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGB_4BPPV:\r\n            case _BaseTexture__WEBPACK_IMPORTED_MODULE_4__[\"BaseTexture\"].FORMAT_PVRTCRGBA_4BPPV:\r\n                this._pharsePVR(data);\r\n                break;\r\n            default:\r\n                throw \"Texture2D:unkonwn format.\";\r\n        }\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    /*override*/ _recoverResource() {\r\n        //TODO:补充\r\n    }\r\n    /**\r\n     * 返回图片像素。\r\n     * @return 图片像素。\r\n     */\r\n    getPixels() {\r\n        if (this._canRead)\r\n            return this._pixels;\r\n        else\r\n            throw new Error(\"Texture2D: must set texture canRead is true.\");\r\n    }\r\n}\r\n/**纯灰色纹理。*/\r\nTexture2D.grayTexture = null;\r\n/**纯白色纹理。*/\r\nTexture2D.whiteTexture = null;\r\n/**纯黑色纹理。*/\r\nTexture2D.blackTexture = null;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/resource/Texture2D.ts?");

/***/ }),

/***/ "./src/core/laya/resource/WebGLRTMgr.ts":
/*!**********************************************!*\
  !*** ./src/core/laya/resource/WebGLRTMgr.ts ***!
  \**********************************************/
/*! exports provided: WebGLRTMgr */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WebGLRTMgr\", function() { return WebGLRTMgr; });\n/* harmony import */ var _BaseTexture__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BaseTexture */ \"./src/core/laya/resource/BaseTexture.ts\");\n/* harmony import */ var _RenderTexture2D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RenderTexture2D */ \"./src/core/laya/resource/RenderTexture2D.ts\");\n\r\n\r\n/**\r\n * WebGLRTMgr 管理WebGLRenderTarget的创建和回收\r\n */\r\nclass WebGLRTMgr {\r\n    /**\r\n     * 获得一个renderTarget\r\n     * 暂时先按照严格大小判断。\r\n     *\r\n     * @param\tw\r\n     * @param\th\r\n     * @return\r\n     */\r\n    static getRT(w, h) {\r\n        w = w | 0;\r\n        h = h | 0;\r\n        if (w >= 10000) {\r\n            console.error('getRT error! w too big');\r\n        }\r\n        var key = h * 10000 + w;\r\n        var sw = WebGLRTMgr.dict[key];\r\n        var ret;\r\n        if (sw) {\r\n            if (sw.length > 0) {\r\n                ret = sw.pop();\r\n                ret._mgrKey = key; //只有不再mgr中的才有key\r\n                return ret;\r\n            }\r\n        }\r\n        ret = new _RenderTexture2D__WEBPACK_IMPORTED_MODULE_1__[\"RenderTexture2D\"](w, h, _BaseTexture__WEBPACK_IMPORTED_MODULE_0__[\"BaseTexture\"].FORMAT_R8G8B8A8, -1);\r\n        ret._mgrKey = key;\r\n        return ret;\r\n    }\r\n    /**\r\n     * 回收一个renderTarget\r\n     * @param\trt\r\n     */\r\n    static releaseRT(rt) {\r\n        //如果_mgrKey<=0表示已经加进来了。\r\n        if (rt._mgrKey <= 0)\r\n            return;\r\n        var sw = WebGLRTMgr.dict[rt._mgrKey];\r\n        !sw && (sw = [], WebGLRTMgr.dict[rt._mgrKey] = sw);\r\n        rt._mgrKey = 0;\r\n        sw.push(rt);\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\nWebGLRTMgr.dict = {}; //key=h*10000+w\r\n\n\n//# sourceURL=webpack:///./src/core/laya/resource/WebGLRTMgr.ts?");

/***/ }),

/***/ "./src/core/laya/system/System.ts":
/*!****************************************!*\
  !*** ./src/core/laya/system/System.ts ***!
  \****************************************/
/*! exports provided: System */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"System\", function() { return System; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n\r\n/**\r\n * @private\r\n */\r\nclass System {\r\n    /**\r\n     * 替换指定名称的定义。用来动态更改类的定义。\r\n     * @param\tname 属性名。\r\n     * @param\tclassObj 属性值。\r\n     */\r\n    //TODO:coverage\r\n    static changeDefinition(name, classObj) {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"][name] = classObj;\r\n        var str = name + \"=classObj\";\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"]._runScript(str);\r\n    }\r\n    /**\r\n     * @private\r\n     * 初始化。\r\n     */\r\n    static __init__() {\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/system/System.ts?");

/***/ }),

/***/ "./src/core/laya/utils/Browser.ts":
/*!****************************************!*\
  !*** ./src/core/laya/utils/Browser.ts ***!
  \****************************************/
/*! exports provided: Browser */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Browser\", function() { return Browser; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _media_SoundManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../media/SoundManager */ \"./src/core/laya/media/SoundManager.ts\");\n/* harmony import */ var _net_LocalStorage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../net/LocalStorage */ \"./src/core/laya/net/LocalStorage.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _resource_HTMLCanvas__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../resource/HTMLCanvas */ \"./src/core/laya/resource/HTMLCanvas.ts\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * <code>Browser</code> 是浏览器代理类。封装浏览器及原生 js 提供的一些功能。\r\n */\r\nclass Browser {\r\n    /**@private */\r\n    static __init__() {\r\n        if (Browser._window)\r\n            return Browser._window;\r\n        var win = Browser._window = window;\r\n        var doc = Browser._document = win.document;\r\n        var u = Browser.userAgent = win.navigator.userAgent;\r\n        //初始化引擎库\r\n        var libs = win._layalibs;\r\n        if (libs) {\r\n            libs.sort(function (a, b) {\r\n                return a.i - b.i;\r\n            });\r\n            for (var j = 0; j < libs.length; j++) {\r\n                libs[j].f(win, doc, _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"]);\r\n            }\r\n        }\r\n        //微信小游戏\r\n        if (u.indexOf(\"MiniGame\") > -1 && Browser.window.hasOwnProperty(\"wx\")) {\r\n            if (!_Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"][\"MiniAdpter\"]) {\r\n                console.error(\"请先添加小游戏适配库,详细教程：https://ldc2.layabox.com/doc/?nav=zh-ts-5-0-0\");\r\n                //TODO 教程要改\r\n            }\r\n            else {\r\n                _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"][\"MiniAdpter\"].enable();\r\n            }\r\n        }\r\n        //百度小游戏\r\n        if (u.indexOf(\"SwanGame\") > -1) {\r\n            if (!_Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"][\"BMiniAdapter\"]) {\r\n                console.error(\"请先添加百度小游戏适配库,详细教程：https://ldc2.layabox.com/doc/?nav=zh-ts-5-0-0\");\r\n                //TODO 教程要改\r\n            }\r\n            else {\r\n                _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"][\"BMiniAdapter\"].enable();\r\n            }\r\n        }\r\n        //小米小游戏\r\n        if (window.getApp instanceof Function) {\r\n            if (!_Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"][\"KGMiniAdapter\"]) {\r\n                console.error(\"请先添加小米小游戏适配库,详细教程：https://ldc2.layabox.com/doc/?nav=zh-ts-5-0-0\");\r\n                //TODO 教程要改\r\n            }\r\n            else {\r\n                _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"][\"KGMiniAdapter\"].enable();\r\n            }\r\n        }\r\n        //OPPO小游戏\r\n        if (u.indexOf('OPPO') > -1 && u.indexOf('MiniGame') > -1) {\r\n            if (!_Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"][\"QGMiniAdapter\"]) {\r\n                console.error(\"请先添加OPPO小游戏适配库\");\r\n                //TODO 教程要改\r\n            }\r\n            else {\r\n                _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"][\"QGMiniAdapter\"].enable();\r\n            }\r\n        }\r\n        //新增trace的支持\r\n        win.trace = console.log;\r\n        //兼容requestAnimationFrame\r\n        win.requestAnimationFrame = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || function (fun) {\r\n            return win.setTimeout(fun, 1000 / 60);\r\n        };\r\n        //强制修改body样式\r\n        var bodyStyle = doc.body.style;\r\n        bodyStyle.margin = 0;\r\n        bodyStyle.overflow = 'hidden';\r\n        bodyStyle['-webkit-user-select'] = 'none';\r\n        bodyStyle['-webkit-tap-highlight-color'] = 'rgba(200,200,200,0)';\r\n        //强制修改meta标签，防止开发者写错\r\n        var metas = doc.getElementsByTagName('meta');\r\n        var i = 0, flag = false, content = 'width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no';\r\n        while (i < metas.length) {\r\n            var meta = metas[i];\r\n            if (meta.name == 'viewport') {\r\n                meta.content = content;\r\n                flag = true;\r\n                break;\r\n            }\r\n            i++;\r\n        }\r\n        if (!flag) {\r\n            meta = doc.createElement('meta');\r\n            meta.name = 'viewport', meta.content = content;\r\n            doc.getElementsByTagName('head')[0].appendChild(meta);\r\n        }\r\n        //处理兼容性\t\t\t\r\n        Browser.onMobile = window.isConchApp ? true : u.indexOf(\"Mobile\") > -1;\r\n        Browser.onIOS = !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/);\r\n        Browser.onIPhone = u.indexOf(\"iPhone\") > -1;\r\n        Browser.onMac = /*[STATIC SAFE]*/ u.indexOf(\"Mac OS X\") > -1;\r\n        Browser.onIPad = u.indexOf(\"iPad\") > -1;\r\n        Browser.onAndroid = u.indexOf('Android') > -1 || u.indexOf('Adr') > -1;\r\n        Browser.onWP = u.indexOf(\"Windows Phone\") > -1;\r\n        Browser.onQQBrowser = u.indexOf(\"QQBrowser\") > -1;\r\n        Browser.onMQQBrowser = u.indexOf(\"MQQBrowser\") > -1 || (u.indexOf(\"Mobile\") > -1 && u.indexOf(\"QQ\") > -1);\r\n        Browser.onIE = !!win.ActiveXObject || \"ActiveXObject\" in win;\r\n        Browser.onWeiXin = u.indexOf('MicroMessenger') > -1;\r\n        Browser.onSafari = /*[STATIC SAFE]*/ u.indexOf(\"Safari\") > -1;\r\n        Browser.onPC = !Browser.onMobile;\r\n        Browser.onMiniGame = /*[STATIC SAFE]*/ u.indexOf('MiniGame') > -1;\r\n        Browser.onBDMiniGame = /*[STATIC SAFE]*/ u.indexOf('SwanGame') > -1;\r\n        if (u.indexOf('OPPO') > -1 && u.indexOf('MiniGame') > -1) {\r\n            Browser.onQGMiniGame = true; //OPPO环境判断\r\n            Browser.onMiniGame = false;\r\n        }\r\n        Browser.onLimixiu = /*[STATIC SAFE]*/ u.indexOf('limixiu') > -1;\r\n        //小米运行环境判断\r\n        Browser.onKGMiniGame = /*[STATIC SAFE]*/ u.indexOf('QuickGame') > -1; //小米环境判断\r\n        //处理LocalStorage兼容\r\n        Browser.supportLocalStorage = _net_LocalStorage__WEBPACK_IMPORTED_MODULE_2__[\"LocalStorage\"].__init__();\r\n        //处理声音兼容性\r\n        Browser.supportWebAudio = _media_SoundManager__WEBPACK_IMPORTED_MODULE_1__[\"SoundManager\"].__init__();\r\n        //这个其实在Render中感觉更合理，但是runtime要求第一个canvas是主画布，所以必须在下面的那个离线画布之前\r\n        _renders_Render__WEBPACK_IMPORTED_MODULE_3__[\"Render\"]._mainCanvas = new _resource_HTMLCanvas__WEBPACK_IMPORTED_MODULE_4__[\"HTMLCanvas\"](true);\r\n        var style = _renders_Render__WEBPACK_IMPORTED_MODULE_3__[\"Render\"]._mainCanvas.source.style;\r\n        style.position = 'absolute';\r\n        style.top = style.left = \"0px\";\r\n        style.background = \"#000000\";\r\n        //创建离线画布\r\n        Browser.canvas = new _resource_HTMLCanvas__WEBPACK_IMPORTED_MODULE_4__[\"HTMLCanvas\"](true);\r\n        Browser.context = Browser.canvas.getContext('2d');\r\n        //测试是否支持webgl\r\n        var tmpCanv = new _resource_HTMLCanvas__WEBPACK_IMPORTED_MODULE_4__[\"HTMLCanvas\"](true);\r\n        if (Browser.onQGMiniGame)\r\n            tmpCanv = _renders_Render__WEBPACK_IMPORTED_MODULE_3__[\"Render\"]._mainCanvas; //xiaosong add\r\n        var names = [\"webgl\", \"experimental-webgl\", \"webkit-3d\", \"moz-webgl\"];\r\n        var gl = null;\r\n        for (i = 0; i < names.length; i++) {\r\n            try {\r\n                gl = tmpCanv.source.getContext(names[i]);\r\n            }\r\n            catch (e) {\r\n            }\r\n            if (gl) {\r\n                Browser._supportWebGL = true;\r\n                break;\r\n            }\r\n        }\r\n        return win;\r\n    }\r\n    /**\r\n     * 创建浏览器原生节点。\r\n     * @param\ttype 节点类型。\r\n     * @return\t创建的节点对象的引用。\r\n     */\r\n    static createElement(type) {\r\n        Browser.__init__();\r\n        return Browser._document.createElement(type);\r\n    }\r\n    /**\r\n     * 返回 Document 对象中拥有指定 id 的第一个对象的引用。\r\n     * @param\ttype 节点id。\r\n     * @return\t节点对象。\r\n     */\r\n    static getElementById(type) {\r\n        Browser.__init__();\r\n        return Browser._document.getElementById(type);\r\n    }\r\n    /**\r\n     * 移除指定的浏览器原生节点对象。\r\n     * @param\ttype 节点对象。\r\n     */\r\n    static removeElement(ele) {\r\n        if (ele && ele.parentNode)\r\n            ele.parentNode.removeChild(ele);\r\n    }\r\n    /**\r\n     * 获取浏览器当前时间戳，单位为毫秒。\r\n     */\r\n    static now() {\r\n        return Date.now();\r\n        ;\r\n    }\r\n    /**\r\n     * 浏览器窗口可视宽度。\r\n     * 通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerWidth(包含滚动条宽度) > document.body.clientWidth(不包含滚动条宽度)，如果前者为0或为空，则选择后者。\r\n     */\r\n    static get clientWidth() {\r\n        Browser.__init__();\r\n        return Browser._window.innerWidth || Browser._document.body.clientWidth;\r\n    }\r\n    /**\r\n     * 浏览器窗口可视高度。\r\n     * 通过分析浏览器信息获得。浏览器多个属性值优先级为：window.innerHeight(包含滚动条高度) > document.body.clientHeight(不包含滚动条高度) > document.documentElement.clientHeight(不包含滚动条高度)，如果前者为0或为空，则选择后者。\r\n     */\r\n    static get clientHeight() {\r\n        Browser.__init__();\r\n        return Browser._window.innerHeight || Browser._document.body.clientHeight || Browser._document.documentElement.clientHeight;\r\n    }\r\n    /** 浏览器窗口物理宽度。考虑了设备像素比。*/\r\n    static get width() {\r\n        Browser.__init__();\r\n        return ((_Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage && _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.canvasRotation) ? Browser.clientHeight : Browser.clientWidth) * Browser.pixelRatio;\r\n    }\r\n    /** 浏览器窗口物理高度。考虑了设备像素比。*/\r\n    static get height() {\r\n        Browser.__init__();\r\n        return ((_Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage && _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage.canvasRotation) ? Browser.clientWidth : Browser.clientHeight) * Browser.pixelRatio;\r\n    }\r\n    /** 获得设备像素比。*/\r\n    static get pixelRatio() {\r\n        if (Browser._pixelRatio < 0) {\r\n            Browser.__init__();\r\n            if (Browser.userAgent.indexOf(\"Mozilla/6.0(Linux; Android 6.0; HUAWEI NXT-AL10 Build/HUAWEINXT-AL10)\") > -1)\r\n                Browser._pixelRatio = 2;\r\n            else {\r\n                var ctx = Browser.context;\r\n                var backingStore = ctx.backingStorePixelRatio || ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\r\n                Browser._pixelRatio = (Browser._window.devicePixelRatio || 1) / backingStore;\r\n                if (Browser._pixelRatio < 1)\r\n                    Browser._pixelRatio = 1;\r\n            }\r\n        }\r\n        return Browser._pixelRatio;\r\n    }\r\n    /**画布容器，用来盛放画布的容器。方便对画布进行控制*/\r\n    static get container() {\r\n        if (!Browser._container) {\r\n            Browser.__init__();\r\n            Browser._container = Browser.createElement(\"div\");\r\n            Browser._container.id = \"layaContainer\";\r\n            Browser._document.body.appendChild(Browser._container);\r\n        }\r\n        return Browser._container;\r\n    }\r\n    static set container(value) {\r\n        Browser._container = value;\r\n    }\r\n    /**浏览器原生 window 对象的引用。*/\r\n    static get window() {\r\n        return Browser._window || Browser.__init__();\r\n    }\r\n    /**浏览器原生 document 对象的引用。*/\r\n    static get document() {\r\n        Browser.__init__();\r\n        return Browser._document;\r\n    }\r\n}\r\n/** @private */\r\nBrowser._pixelRatio = -1;\r\n/** @private */\r\nBrowser._supportWebGL = false;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/Browser.ts?");

/***/ }),

/***/ "./src/core/laya/utils/Byte.ts":
/*!*************************************!*\
  !*** ./src/core/laya/utils/Byte.ts ***!
  \*************************************/
/*! exports provided: Byte */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Byte\", function() { return Byte; });\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n\r\n/**\r\n * <p> <code>Byte</code> 类提供用于优化读取、写入以及处理二进制数据的方法和属性。</p>\r\n * <p> <code>Byte</code> 类适用于需要在字节层访问数据的高级开发人员。</p>\r\n */\r\nclass Byte {\r\n    /**\r\n     * 创建一个 <code>Byte</code> 类的实例。\r\n     * @param\tdata\t用于指定初始化的元素数目，或者用于初始化的TypedArray对象、ArrayBuffer对象。如果为 null ，则预分配一定的内存空间，当可用空间不足时，优先使用这部分内存，如果还不够，则重新分配所需内存。\r\n     */\r\n    constructor(data = null) {\r\n        /**@private 是否为小端数据。*/\r\n        this._xd_ = true;\r\n        /**@private */\r\n        this._allocated_ = 8;\r\n        /**@private */\r\n        this._pos_ = 0;\r\n        /**@private */\r\n        this._length = 0;\r\n        if (data) {\r\n            this._u8d_ = new Uint8Array(data);\r\n            this._d_ = new DataView(this._u8d_.buffer);\r\n            this._length = this._d_.byteLength;\r\n        }\r\n        else {\r\n            this._resizeBuffer(this._allocated_);\r\n        }\r\n    }\r\n    /**\r\n     * <p>获取当前主机的字节序。</p>\r\n     * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。</p>\r\n     * <p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>\r\n     * <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>\r\n     * @return 当前系统的字节序。\r\n     */\r\n    static getSystemEndian() {\r\n        if (!Byte._sysEndian) {\r\n            var buffer = new ArrayBuffer(2);\r\n            new DataView(buffer).setInt16(0, 256, true);\r\n            Byte._sysEndian = (new Int16Array(buffer))[0] === 256 ? Byte.LITTLE_ENDIAN : Byte.BIG_ENDIAN;\r\n        }\r\n        return Byte._sysEndian;\r\n    }\r\n    /**\r\n     * 获取此对象的 ArrayBuffer 数据，数据只包含有效数据部分。\r\n     */\r\n    get buffer() {\r\n        var rstBuffer = this._d_.buffer;\r\n        if (rstBuffer.byteLength === this._length)\r\n            return rstBuffer;\r\n        return rstBuffer.slice(0, this._length);\r\n    }\r\n    /**\r\n     * <p> <code>Byte</code> 实例的字节序。取值为：<code>BIG_ENDIAN</code> 或 <code>BIG_ENDIAN</code> 。</p>\r\n     * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>\r\n     * <p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>\r\n     *  <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>\r\n     */\r\n    get endian() {\r\n        return this._xd_ ? Byte.LITTLE_ENDIAN : Byte.BIG_ENDIAN;\r\n    }\r\n    set endian(value) {\r\n        this._xd_ = (value === Byte.LITTLE_ENDIAN);\r\n    }\r\n    /**\r\n     * <p> <code>Byte</code> 对象的长度（以字节为单位）。</p>\r\n     * <p>如果将长度设置为大于当前长度的值，则用零填充字节数组的右侧；如果将长度设置为小于当前长度的值，将会截断该字节数组。</p>\r\n     * <p>如果要设置的长度大于当前已分配的内存空间的字节长度，则重新分配内存空间，大小为以下两者较大者：要设置的长度、当前已分配的长度的2倍，并将原有数据拷贝到新的内存空间中；如果要设置的长度小于当前已分配的内存空间的字节长度，也会重新分配内存空间，大小为要设置的长度，并将原有数据从头截断为要设置的长度存入新的内存空间中。</p>\r\n     */\r\n    set length(value) {\r\n        if (this._allocated_ < value)\r\n            this._resizeBuffer(this._allocated_ = Math.floor(Math.max(value, this._allocated_ * 2)));\r\n        else if (this._allocated_ > value)\r\n            this._resizeBuffer(this._allocated_ = value);\r\n        this._length = value;\r\n    }\r\n    get length() {\r\n        return this._length;\r\n    }\r\n    /**@private */\r\n    _resizeBuffer(len) {\r\n        try {\r\n            var newByteView = new Uint8Array(len);\r\n            if (this._u8d_ != null) {\r\n                if (this._u8d_.length <= len)\r\n                    newByteView.set(this._u8d_);\r\n                else\r\n                    newByteView.set(this._u8d_.subarray(0, len));\r\n            }\r\n            this._u8d_ = newByteView;\r\n            this._d_ = new DataView(newByteView.buffer);\r\n        }\r\n        catch (err) {\r\n            throw \"Invalid typed array length:\" + len;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * <p>常用于解析固定格式的字节流。</p>\r\n     * <p>先从字节流的当前字节偏移位置处读取一个 <code>Uint16</code> 值，然后以此值为长度，读取此长度的字符串。</p>\r\n     * @return 读取的字符串。\r\n     */\r\n    getString() {\r\n        return this.readString();\r\n    }\r\n    /**\r\n     * <p>常用于解析固定格式的字节流。</p>\r\n     * <p>先从字节流的当前字节偏移位置处读取一个 <code>Uint16</code> 值，然后以此值为长度，读取此长度的字符串。</p>\r\n     * @return 读取的字符串。\r\n     */\r\n    readString() {\r\n        return this._rUTF(this.getUint16());\r\n    }\r\n    /**\r\n     * @private\r\n     * <p>从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Float32Array</code> 对象并返回此对象。</p>\r\n     * <p><b>注意：</b>返回的 Float32Array 对象，在 JavaScript 环境下，是原生的 HTML5 Float32Array 对象，对此对象的读取操作都是基于运行此程序的当前主机字节序，此顺序可能与实际数据的字节序不同，如果使用此对象进行读取，需要用户知晓实际数据的字节序和当前主机字节序，如果相同，可正常读取，否则需要用户对实际数据(Float32Array.buffer)包装一层 DataView ，使用 DataView 对象可按照指定的字节序进行读取。</p>\r\n     * @param\tstart\t开始位置。\r\n     * @param\tlen\t\t需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。\r\n     * @return  读取的 Float32Array 对象。\r\n     */\r\n    getFloat32Array(start, len) {\r\n        return this.readFloat32Array(start, len);\r\n    }\r\n    /**\r\n     * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Float32Array</code> 对象并返回此对象。\r\n     * @param\tstart\t开始位置。\r\n     * @param\tlen\t\t需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。\r\n     * @return  读取的 Float32Array 对象。\r\n     */\r\n    readFloat32Array(start, len) {\r\n        var end = start + len;\r\n        end = (end > this._length) ? this._length : end;\r\n        var v = new Float32Array(this._d_.buffer.slice(start, end));\r\n        this._pos_ = end;\r\n        return v;\r\n    }\r\n    /**\r\n     * @private\r\n     * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Uint8Array</code> 对象并返回此对象。\r\n     * @param\tstart\t开始位置。\r\n     * @param\tlen\t\t需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。\r\n     * @return  读取的 Uint8Array 对象。\r\n     */\r\n    getUint8Array(start, len) {\r\n        return this.readUint8Array(start, len);\r\n    }\r\n    /**\r\n     * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Uint8Array</code> 对象并返回此对象。\r\n     * @param\tstart\t开始位置。\r\n     * @param\tlen\t\t需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。\r\n     * @return  读取的 Uint8Array 对象。\r\n     */\r\n    readUint8Array(start, len) {\r\n        var end = start + len;\r\n        end = (end > this._length) ? this._length : end;\r\n        var v = new Uint8Array(this._d_.buffer.slice(start, end));\r\n        this._pos_ = end;\r\n        return v;\r\n    }\r\n    /**\r\n     * @private\r\n     * <p>从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Int16Array</code> 对象并返回此对象。</p>\r\n     * <p><b>注意：</b>返回的 Int16Array 对象，在 JavaScript 环境下，是原生的 HTML5 Int16Array 对象，对此对象的读取操作都是基于运行此程序的当前主机字节序，此顺序可能与实际数据的字节序不同，如果使用此对象进行读取，需要用户知晓实际数据的字节序和当前主机字节序，如果相同，可正常读取，否则需要用户对实际数据(Int16Array.buffer)包装一层 DataView ，使用 DataView 对象可按照指定的字节序进行读取。</p>\r\n     * @param\tstart\t开始读取的字节偏移量位置。\r\n     * @param\tlen\t\t需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。\r\n     * @return  读取的 Int16Array 对象。\r\n     */\r\n    getInt16Array(start, len) {\r\n        return this.readInt16Array(start, len);\r\n    }\r\n    /**\r\n     * 从字节流中 <code>start</code> 参数指定的位置开始，读取 <code>len</code> 参数指定的字节数的数据，用于创建一个 <code>Int16Array</code> 对象并返回此对象。\r\n     * @param\tstart\t开始读取的字节偏移量位置。\r\n     * @param\tlen\t\t需要读取的字节长度。如果要读取的长度超过可读取范围，则只返回可读范围内的值。\r\n     * @return  读取的 Uint8Array 对象。\r\n     */\r\n    readInt16Array(start, len) {\r\n        var end = start + len;\r\n        end = (end > this._length) ? this._length : end;\r\n        var v = new Int16Array(this._d_.buffer.slice(start, end));\r\n        this._pos_ = end;\r\n        return v;\r\n    }\r\n    /**\r\n     * @private\r\n     * 从字节流的当前字节偏移位置处读取一个 IEEE 754 单精度（32 位）浮点数。\r\n     * @return 单精度（32 位）浮点数。\r\n     */\r\n    getFloat32() {\r\n        return this.readFloat32();\r\n    }\r\n    /**\r\n     * 从字节流的当前字节偏移位置处读取一个 IEEE 754 单精度（32 位）浮点数。\r\n     * @return 单精度（32 位）浮点数。\r\n     */\r\n    readFloat32() {\r\n        if (this._pos_ + 4 > this._length)\r\n            throw \"getFloat32 error - Out of bounds\";\r\n        var v = this._d_.getFloat32(this._pos_, this._xd_);\r\n        this._pos_ += 4;\r\n        return v;\r\n    }\r\n    /**\r\n     * @private\r\n     * 从字节流的当前字节偏移量位置处读取一个 IEEE 754 双精度（64 位）浮点数。\r\n     * @return 双精度（64 位）浮点数。\r\n     */\r\n    getFloat64() {\r\n        return this.readFloat64();\r\n    }\r\n    /**\r\n     * 从字节流的当前字节偏移量位置处读取一个 IEEE 754 双精度（64 位）浮点数。\r\n     * @return 双精度（64 位）浮点数。\r\n     */\r\n    readFloat64() {\r\n        if (this._pos_ + 8 > this._length)\r\n            throw \"getFloat64 error - Out of bounds\";\r\n        var v = this._d_.getFloat64(this._pos_, this._xd_);\r\n        this._pos_ += 8;\r\n        return v;\r\n    }\r\n    /**\r\n     * 在字节流的当前字节偏移量位置处写入一个 IEEE 754 单精度（32 位）浮点数。\r\n     * @param\tvalue\t单精度（32 位）浮点数。\r\n     */\r\n    writeFloat32(value) {\r\n        this._ensureWrite(this._pos_ + 4);\r\n        this._d_.setFloat32(this._pos_, value, this._xd_);\r\n        this._pos_ += 4;\r\n    }\r\n    /**\r\n     * 在字节流的当前字节偏移量位置处写入一个 IEEE 754 双精度（64 位）浮点数。\r\n     * @param\tvalue\t双精度（64 位）浮点数。\r\n     */\r\n    writeFloat64(value) {\r\n        this._ensureWrite(this._pos_ + 8);\r\n        this._d_.setFloat64(this._pos_, value, this._xd_);\r\n        this._pos_ += 8;\r\n    }\r\n    /**\r\n     * @private\r\n     * 从字节流的当前字节偏移量位置处读取一个 Int32 值。\r\n     * @return Int32 值。\r\n     */\r\n    getInt32() {\r\n        return this.readInt32();\r\n    }\r\n    /**\r\n     * 从字节流的当前字节偏移量位置处读取一个 Int32 值。\r\n     * @return Int32 值。\r\n     */\r\n    readInt32() {\r\n        if (this._pos_ + 4 > this._length)\r\n            throw \"getInt32 error - Out of bounds\";\r\n        var float = this._d_.getInt32(this._pos_, this._xd_);\r\n        this._pos_ += 4;\r\n        return float;\r\n    }\r\n    /**\r\n     * @private\r\n     * 从字节流的当前字节偏移量位置处读取一个 Uint32 值。\r\n     * @return Uint32 值。\r\n     */\r\n    getUint32() {\r\n        return this.readUint32();\r\n    }\r\n    /**\r\n     * 从字节流的当前字节偏移量位置处读取一个 Uint32 值。\r\n     * @return Uint32 值。\r\n     */\r\n    readUint32() {\r\n        if (this._pos_ + 4 > this._length)\r\n            throw \"getUint32 error - Out of bounds\";\r\n        var v = this._d_.getUint32(this._pos_, this._xd_);\r\n        this._pos_ += 4;\r\n        return v;\r\n    }\r\n    /**\r\n     * 在字节流的当前字节偏移量位置处写入指定的 Int32 值。\r\n     * @param\tvalue\t需要写入的 Int32 值。\r\n     */\r\n    writeInt32(value) {\r\n        this._ensureWrite(this._pos_ + 4);\r\n        this._d_.setInt32(this._pos_, value, this._xd_);\r\n        this._pos_ += 4;\r\n    }\r\n    /**\r\n     * 在字节流的当前字节偏移量位置处写入 Uint32 值。\r\n     * @param\tvalue\t需要写入的 Uint32 值。\r\n     */\r\n    writeUint32(value) {\r\n        this._ensureWrite(this._pos_ + 4);\r\n        this._d_.setUint32(this._pos_, value, this._xd_);\r\n        this._pos_ += 4;\r\n    }\r\n    /**\r\n     * @private\r\n     * 从字节流的当前字节偏移量位置处读取一个 Int16 值。\r\n     * @return Int16 值。\r\n     */\r\n    getInt16() {\r\n        return this.readInt16();\r\n    }\r\n    /**\r\n     * 从字节流的当前字节偏移量位置处读取一个 Int16 值。\r\n     * @return Int16 值。\r\n     */\r\n    readInt16() {\r\n        if (this._pos_ + 2 > this._length)\r\n            throw \"getInt16 error - Out of bounds\";\r\n        var us = this._d_.getInt16(this._pos_, this._xd_);\r\n        this._pos_ += 2;\r\n        return us;\r\n    }\r\n    /**\r\n     * @private\r\n     * 从字节流的当前字节偏移量位置处读取一个 Uint16 值。\r\n     * @return Uint16 值。\r\n     */\r\n    getUint16() {\r\n        return this.readUint16();\r\n    }\r\n    /**\r\n     * 从字节流的当前字节偏移量位置处读取一个 Uint16 值。\r\n     * @return Uint16 值。\r\n     */\r\n    readUint16() {\r\n        if (this._pos_ + 2 > this._length)\r\n            throw \"getUint16 error - Out of bounds\";\r\n        var us = this._d_.getUint16(this._pos_, this._xd_);\r\n        this._pos_ += 2;\r\n        return us;\r\n    }\r\n    /**\r\n     * 在字节流的当前字节偏移量位置处写入指定的 Uint16 值。\r\n     * @param\tvalue\t需要写入的Uint16 值。\r\n     */\r\n    writeUint16(value) {\r\n        this._ensureWrite(this._pos_ + 2);\r\n        this._d_.setUint16(this._pos_, value, this._xd_);\r\n        this._pos_ += 2;\r\n    }\r\n    /**\r\n     * 在字节流的当前字节偏移量位置处写入指定的 Int16 值。\r\n     * @param\tvalue\t需要写入的 Int16 值。\r\n     */\r\n    writeInt16(value) {\r\n        this._ensureWrite(this._pos_ + 2);\r\n        this._d_.setInt16(this._pos_, value, this._xd_);\r\n        this._pos_ += 2;\r\n    }\r\n    /**\r\n     * @private\r\n     * 从字节流的当前字节偏移量位置处读取一个 Uint8 值。\r\n     * @return Uint8 值。\r\n     */\r\n    getUint8() {\r\n        return this.readUint8();\r\n    }\r\n    /**\r\n     * 从字节流的当前字节偏移量位置处读取一个 Uint8 值。\r\n     * @return Uint8 值。\r\n     */\r\n    readUint8() {\r\n        if (this._pos_ + 1 > this._length)\r\n            throw \"getUint8 error - Out of bounds\";\r\n        return this._u8d_[this._pos_++];\r\n    }\r\n    /**\r\n     * 在字节流的当前字节偏移量位置处写入指定的 Uint8 值。\r\n     * @param\tvalue\t需要写入的 Uint8 值。\r\n     */\r\n    writeUint8(value) {\r\n        this._ensureWrite(this._pos_ + 1);\r\n        this._d_.setUint8(this._pos_, value);\r\n        this._pos_++;\r\n    }\r\n    /**\r\n     * @private\r\n     * 从字节流的指定字节偏移量位置处读取一个 Uint8 值。\r\n     * @param\tpos\t字节读取位置。\r\n     * @return Uint8 值。\r\n     */\r\n    //TODO:coverage\r\n    _getUInt8(pos) {\r\n        return this._readUInt8(pos);\r\n    }\r\n    /**\r\n     * @private\r\n     * 从字节流的指定字节偏移量位置处读取一个 Uint8 值。\r\n     * @param\tpos\t字节读取位置。\r\n     * @return Uint8 值。\r\n     */\r\n    //TODO:coverage\r\n    _readUInt8(pos) {\r\n        return this._d_.getUint8(pos);\r\n    }\r\n    /**\r\n     * @private\r\n     * 从字节流的指定字节偏移量位置处读取一个 Uint16 值。\r\n     * @param\tpos\t字节读取位置。\r\n     * @return Uint16 值。\r\n     */\r\n    //TODO:coverage\r\n    _getUint16(pos) {\r\n        return this._readUint16(pos);\r\n    }\r\n    /**\r\n     * @private\r\n     * 从字节流的指定字节偏移量位置处读取一个 Uint16 值。\r\n     * @param\tpos\t字节读取位置。\r\n     * @return Uint16 值。\r\n     */\r\n    //TODO:coverage\r\n    _readUint16(pos) {\r\n        return this._d_.getUint16(pos, this._xd_);\r\n    }\r\n    /**\r\n     * @private\r\n     * 使用 getFloat32() 读取6个值，用于创建并返回一个 Matrix 对象。\r\n     * @return  Matrix 对象。\r\n     */\r\n    //TODO:coverage\r\n    _getMatrix() {\r\n        return this._readMatrix();\r\n    }\r\n    /**\r\n     * @private\r\n     * 使用 getFloat32() 读取6个值，用于创建并返回一个 Matrix 对象。\r\n     * @return  Matrix 对象。\r\n     */\r\n    //TODO:coverage\r\n    _readMatrix() {\r\n        var rst = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"](this.getFloat32(), this.getFloat32(), this.getFloat32(), this.getFloat32(), this.getFloat32(), this.getFloat32());\r\n        return rst;\r\n    }\r\n    /**\r\n     * @private\r\n     * 读取指定长度的 UTF 型字符串。\r\n     * @param\tlen 需要读取的长度。\r\n     * @return 读取的字符串。\r\n     */\r\n    _rUTF(len) {\r\n        var v = \"\", max = this._pos_ + len, c, c2, c3, f = String.fromCharCode;\r\n        var u = this._u8d_, i = 0;\r\n        var strs = [];\r\n        var n = 0;\r\n        strs.length = 1000;\r\n        while (this._pos_ < max) {\r\n            c = u[this._pos_++];\r\n            if (c < 0x80) {\r\n                if (c != 0)\r\n                    //v += f(c);\\\r\n                    strs[n++] = f(c);\r\n            }\r\n            else if (c < 0xE0) {\r\n                //v += f(((c & 0x3F) << 6) | (u[_pos_++] & 0x7F));\r\n                strs[n++] = f(((c & 0x3F) << 6) | (u[this._pos_++] & 0x7F));\r\n            }\r\n            else if (c < 0xF0) {\r\n                c2 = u[this._pos_++];\r\n                //v += f(((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (u[_pos_++] & 0x7F));\r\n                strs[n++] = f(((c & 0x1F) << 12) | ((c2 & 0x7F) << 6) | (u[this._pos_++] & 0x7F));\r\n            }\r\n            else {\r\n                c2 = u[this._pos_++];\r\n                c3 = u[this._pos_++];\r\n                //v += f(((c & 0x0F) << 18) | ((c2 & 0x7F) << 12) | ((c3 << 6) & 0x7F) | (u[_pos_++] & 0x7F));\r\n                strs[n++] = f(((c & 0x0F) << 18) | ((c2 & 0x7F) << 12) | ((c3 << 6) & 0x7F) | (u[this._pos_++] & 0x7F));\r\n            }\r\n            i++;\r\n        }\r\n        strs.length = n;\r\n        return strs.join('');\r\n        //return v;\r\n    }\r\n    /**\r\n     * @private\r\n     * 读取 <code>len</code> 参数指定的长度的字符串。\r\n     * @param\tlen\t要读取的字符串的长度。\r\n     * @return 指定长度的字符串。\r\n     */\r\n    //TODO:coverage\r\n    getCustomString(len) {\r\n        return this.readCustomString(len);\r\n    }\r\n    /**\r\n     * @private\r\n     * 读取 <code>len</code> 参数指定的长度的字符串。\r\n     * @param\tlen\t要读取的字符串的长度。\r\n     * @return 指定长度的字符串。\r\n     */\r\n    //TODO:coverage\r\n    readCustomString(len) {\r\n        var v = \"\", ulen = 0, c, c2, f = String.fromCharCode;\r\n        var u = this._u8d_, i = 0;\r\n        while (len > 0) {\r\n            c = u[this._pos_];\r\n            if (c < 0x80) {\r\n                v += f(c);\r\n                this._pos_++;\r\n                len--;\r\n            }\r\n            else {\r\n                ulen = c - 0x80;\r\n                this._pos_++;\r\n                len -= ulen;\r\n                while (ulen > 0) {\r\n                    c = u[this._pos_++];\r\n                    c2 = u[this._pos_++];\r\n                    v += f((c2 << 8) | c);\r\n                    ulen--;\r\n                }\r\n            }\r\n        }\r\n        return v;\r\n    }\r\n    /**\r\n     * 移动或返回 Byte 对象的读写指针的当前位置（以字节为单位）。下一次调用读取方法时将在此位置开始读取，或者下一次调用写入方法时将在此位置开始写入。\r\n     */\r\n    get pos() {\r\n        return this._pos_;\r\n    }\r\n    set pos(value) {\r\n        this._pos_ = value;\r\n        //$MOD byteOffset是只读的，这里进行赋值没有意义。\r\n        //_d_.byteOffset = value;\r\n    }\r\n    /**\r\n     * 可从字节流的当前位置到末尾读取的数据的字节数。\r\n     */\r\n    get bytesAvailable() {\r\n        return this._length - this._pos_;\r\n    }\r\n    /**\r\n     * 清除字节数组的内容，并将 length 和 pos 属性重置为 0。调用此方法将释放 Byte 实例占用的内存。\r\n     */\r\n    clear() {\r\n        this._pos_ = 0;\r\n        this.length = 0;\r\n    }\r\n    /**\r\n     * @private\r\n     * 获取此对象的 ArrayBuffer 引用。\r\n     * @return\r\n     */\r\n    __getBuffer() {\r\n        //this._d_.buffer.byteLength = this.length;\r\n        return this._d_.buffer;\r\n    }\r\n    /**\r\n     * <p>将 UTF-8 字符串写入字节流。类似于 writeUTF() 方法，但 writeUTFBytes() 不使用 16 位长度的字为字符串添加前缀。</p>\r\n     * <p>对应的读取方法为： getUTFBytes 。</p>\r\n     * @param value 要写入的字符串。\r\n     */\r\n    writeUTFBytes(value) {\r\n        // utf8-decode\r\n        value = value + \"\";\r\n        for (var i = 0, sz = value.length; i < sz; i++) {\r\n            var c = value.charCodeAt(i);\r\n            if (c <= 0x7F) {\r\n                this.writeByte(c);\r\n            }\r\n            else if (c <= 0x7FF) {\r\n                //优化为直接写入多个字节，而不必重复调用writeByte，免去额外的调用和逻辑开销。\r\n                this._ensureWrite(this._pos_ + 2);\r\n                this._u8d_.set([0xC0 | (c >> 6), 0x80 | (c & 0x3F)], this._pos_);\r\n                this._pos_ += 2;\r\n            }\r\n            else if (c <= 0xFFFF) {\r\n                this._ensureWrite(this._pos_ + 3);\r\n                this._u8d_.set([0xE0 | (c >> 12), 0x80 | ((c >> 6) & 0x3F), 0x80 | (c & 0x3F)], this._pos_);\r\n                this._pos_ += 3;\r\n            }\r\n            else {\r\n                this._ensureWrite(this._pos_ + 4);\r\n                this._u8d_.set([0xF0 | (c >> 18), 0x80 | ((c >> 12) & 0x3F), 0x80 | ((c >> 6) & 0x3F), 0x80 | (c & 0x3F)], this._pos_);\r\n                this._pos_ += 4;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * <p>将 UTF-8 字符串写入字节流。先写入以字节表示的 UTF-8 字符串长度（作为 16 位整数），然后写入表示字符串字符的字节。</p>\r\n     * <p>对应的读取方法为： getUTFString 。</p>\r\n     * @param\tvalue 要写入的字符串值。\r\n     */\r\n    writeUTFString(value) {\r\n        var tPos = this.pos;\r\n        this.writeUint16(1);\r\n        this.writeUTFBytes(value);\r\n        var dPos = this.pos - tPos - 2;\r\n        //trace(\"writeLen:\",dPos,\"pos:\",tPos);\r\n        this._d_.setUint16(tPos, dPos, this._xd_);\r\n    }\r\n    /**\r\n     * @private\r\n     * 读取 UTF-8 字符串。\r\n     * @return 读取的字符串。\r\n     */\r\n    readUTFString() {\r\n        //var tPos:int = pos;\r\n        //var len:int = getUint16();\r\n        ////trace(\"readLen:\"+len,\"pos,\",tPos);\r\n        return this.readUTFBytes(this.getUint16());\r\n    }\r\n    /**\r\n     * <p>从字节流中读取一个 UTF-8 字符串。假定字符串的前缀是一个无符号的短整型（以此字节表示要读取的长度）。</p>\r\n     * <p>对应的写入方法为： writeUTFString 。</p>\r\n     * @return 读取的字符串。\r\n     */\r\n    getUTFString() {\r\n        return this.readUTFString();\r\n    }\r\n    /**\r\n     * @private\r\n     * 读字符串，必须是 writeUTFBytes 方法写入的字符串。\r\n     * @param len\t要读的buffer长度，默认将读取缓冲区全部数据。\r\n     * @return 读取的字符串。\r\n     */\r\n    readUTFBytes(len = -1) {\r\n        if (len === 0)\r\n            return \"\";\r\n        var lastBytes = this.bytesAvailable;\r\n        if (len > lastBytes)\r\n            throw \"readUTFBytes error - Out of bounds\";\r\n        len = len > 0 ? len : lastBytes;\r\n        return this._rUTF(len);\r\n    }\r\n    /**\r\n     * <p>从字节流中读取一个由 length 参数指定的长度的 UTF-8 字节序列，并返回一个字符串。</p>\r\n     * <p>一般读取的是由 writeUTFBytes 方法写入的字符串。</p>\r\n     * @param len\t要读的buffer长度，默认将读取缓冲区全部数据。\r\n     * @return 读取的字符串。\r\n     */\r\n    getUTFBytes(len = -1) {\r\n        return this.readUTFBytes(len);\r\n    }\r\n    /**\r\n     * <p>在字节流中写入一个字节。</p>\r\n     * <p>使用参数的低 8 位。忽略高 24 位。</p>\r\n     * @param\tvalue\r\n     */\r\n    writeByte(value) {\r\n        this._ensureWrite(this._pos_ + 1);\r\n        this._d_.setInt8(this._pos_, value);\r\n        this._pos_ += 1;\r\n    }\r\n    /**\r\n     * <p>从字节流中读取带符号的字节。</p>\r\n     * <p>返回值的范围是从 -128 到 127。</p>\r\n     * @return 介于 -128 和 127 之间的整数。\r\n     */\r\n    readByte() {\r\n        if (this._pos_ + 1 > this._length)\r\n            throw \"readByte error - Out of bounds\";\r\n        return this._d_.getInt8(this._pos_++);\r\n    }\r\n    /**\r\n     * @private\r\n     * 从字节流中读取带符号的字节。\r\n     */\r\n    getByte() {\r\n        return this.readByte();\r\n    }\r\n    /**\r\n     * @private\r\n     * <p>保证该字节流的可用长度不小于 <code>lengthToEnsure</code> 参数指定的值。</p>\r\n     * @param\tlengthToEnsure\t指定的长度。\r\n     */\r\n    _ensureWrite(lengthToEnsure) {\r\n        if (this._length < lengthToEnsure)\r\n            this._length = lengthToEnsure;\r\n        if (this._allocated_ < lengthToEnsure)\r\n            this.length = lengthToEnsure;\r\n    }\r\n    /**\r\n     * <p>将指定 arraybuffer 对象中的以 offset 为起始偏移量， length 为长度的字节序列写入字节流。</p>\r\n     * <p>如果省略 length 参数，则使用默认长度 0，该方法将从 offset 开始写入整个缓冲区；如果还省略了 offset 参数，则写入整个缓冲区。</p>\r\n     * <p>如果 offset 或 length 小于0，本函数将抛出异常。</p>\r\n     * @param\tarraybuffer\t需要写入的 Arraybuffer 对象。\r\n     * @param\toffset\t\tArraybuffer 对象的索引的偏移量（以字节为单位）\r\n     * @param\tlength\t\t从 Arraybuffer 对象写入到 Byte 对象的长度（以字节为单位）\r\n     */\r\n    writeArrayBuffer(arraybuffer, offset = 0, length = 0) {\r\n        if (offset < 0 || length < 0)\r\n            throw \"writeArrayBuffer error - Out of bounds\";\r\n        if (length == 0)\r\n            length = arraybuffer.byteLength - offset;\r\n        this._ensureWrite(this._pos_ + length);\r\n        var uint8array = new Uint8Array(arraybuffer);\r\n        this._u8d_.set(uint8array.subarray(offset, offset + length), this._pos_);\r\n        this._pos_ += length;\r\n    }\r\n    /**\r\n     * 读取ArrayBuffer数据\r\n     * @param\tlength\r\n     * @return\r\n     */\r\n    readArrayBuffer(length) {\r\n        var rst;\r\n        rst = this._u8d_.buffer.slice(this._pos_, this._pos_ + length);\r\n        this._pos_ = this._pos_ + length;\r\n        return rst;\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n/**\r\n * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>\r\n * <p> <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。<br/>\r\n * <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。</p>\r\n */\r\nByte.BIG_ENDIAN = \"bigEndian\";\r\n/**\r\n * <p>主机字节序，是 CPU 存放数据的两种不同顺序，包括小端字节序和大端字节序。通过 <code>getSystemEndian</code> 可以获取当前系统的字节序。</p>\r\n * <p> <code>LITTLE_ENDIAN</code> ：小端字节序，地址低位存储值的低位，地址高位存储值的高位。<br/>\r\n * <code>BIG_ENDIAN</code> ：大端字节序，地址低位存储值的高位，地址高位存储值的低位。有时也称之为网络字节序。</p>\r\n */\r\nByte.LITTLE_ENDIAN = \"littleEndian\";\r\n/**@private */\r\nByte._sysEndian = null;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/Byte.ts?");

/***/ }),

/***/ "./src/core/laya/utils/CacheManger.ts":
/*!********************************************!*\
  !*** ./src/core/laya/utils/CacheManger.ts ***!
  \********************************************/
/*! exports provided: CacheManger */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CacheManger\", function() { return CacheManger; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _Browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././Browser */ \"./src/core/laya/utils/Browser.ts\");\n\r\n\r\n/**\r\n     * @private\r\n     * 对象缓存统一管理类\r\n     */\r\nclass CacheManger {\r\n    constructor() {\r\n    }\r\n    /**\r\n     * 注册cache管理函数\r\n     * @param disposeFunction 释放函数 fun(force:Boolean)\r\n     * @param getCacheListFunction 获取cache列表函数fun():Array\r\n     *\r\n     */\r\n    static regCacheByFunction(disposeFunction, getCacheListFunction) {\r\n        CacheManger.unRegCacheByFunction(disposeFunction, getCacheListFunction);\r\n        var cache;\r\n        cache = { tryDispose: disposeFunction, getCacheList: getCacheListFunction };\r\n        CacheManger._cacheList.push(cache);\r\n    }\r\n    /**\r\n     * 移除cache管理函数\r\n     * @param disposeFunction 释放函数 fun(force:Boolean)\r\n     * @param getCacheListFunction 获取cache列表函数fun():Array\r\n     *\r\n     */\r\n    static unRegCacheByFunction(disposeFunction, getCacheListFunction) {\r\n        var i, len;\r\n        len = CacheManger._cacheList.length;\r\n        for (i = 0; i < len; i++) {\r\n            if (CacheManger._cacheList[i].tryDispose == disposeFunction && CacheManger._cacheList[i].getCacheList == getCacheListFunction) {\r\n                CacheManger._cacheList.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 强制清理所有管理器\r\n     *\r\n     */\r\n    //TODO:coverage\r\n    static forceDispose() {\r\n        var i, len = CacheManger._cacheList.length;\r\n        for (i = 0; i < len; i++) {\r\n            CacheManger._cacheList[i].tryDispose(true);\r\n        }\r\n    }\r\n    /**\r\n     * 开始检测循环\r\n     * @param waitTime 检测间隔时间\r\n     *\r\n     */\r\n    static beginCheck(waitTime = 15000) {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].systemTimer.loop(waitTime, null, CacheManger._checkLoop);\r\n    }\r\n    /**\r\n     * 停止检测循环\r\n     *\r\n     */\r\n    //TODO:coverage\r\n    static stopCheck() {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].systemTimer.clear(null, CacheManger._checkLoop);\r\n    }\r\n    /**\r\n     * @private\r\n     * 检测函数\r\n     */\r\n    static _checkLoop() {\r\n        var cacheList = CacheManger._cacheList;\r\n        if (cacheList.length < 1)\r\n            return;\r\n        var tTime = _Browser__WEBPACK_IMPORTED_MODULE_1__[\"Browser\"].now();\r\n        var count;\r\n        var len;\r\n        len = count = cacheList.length;\r\n        while (count > 0) {\r\n            CacheManger._index++;\r\n            CacheManger._index = CacheManger._index % len;\r\n            cacheList[CacheManger._index].tryDispose(false);\r\n            if (_Browser__WEBPACK_IMPORTED_MODULE_1__[\"Browser\"].now() - tTime > CacheManger.loopTimeLimit)\r\n                break;\r\n            count--;\r\n        }\r\n    }\r\n}\r\n//TODO:\r\n/**\r\n * 单次清理检测允许执行的时间，单位ms。\r\n */\r\nCacheManger.loopTimeLimit = 2;\r\n/**\r\n * @private\r\n */\r\nCacheManger._cacheList = [];\r\n/**\r\n * @private\r\n * 当前检测的索引\r\n */\r\nCacheManger._index = 0;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/CacheManger.ts?");

/***/ }),

/***/ "./src/core/laya/utils/CallLater.ts":
/*!******************************************!*\
  !*** ./src/core/laya/utils/CallLater.ts ***!
  \******************************************/
/*! exports provided: CallLater */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CallLater\", function() { return CallLater; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Utils */ \"./src/core/laya/utils/Utils.ts\");\n/* harmony import */ var _Timer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././Timer */ \"./src/core/laya/utils/Timer.ts\");\n\r\n\r\n/**\r\n     * @private\r\n     */\r\nclass CallLater {\r\n    constructor() {\r\n        /**@private */\r\n        this._pool = [];\r\n        /**@private */\r\n        this._map = [];\r\n        /**@private */\r\n        this._laters = [];\r\n    }\r\n    /**\r\n     * @private\r\n     * 帧循环处理函数。\r\n     */\r\n    _update() {\r\n        var laters = this._laters;\r\n        var len = laters.length;\r\n        if (len > 0) {\r\n            for (var i = 0, n = len - 1; i <= n; i++) {\r\n                var handler = laters[i];\r\n                this._map[handler.key] = null;\r\n                if (handler.method !== null) {\r\n                    handler.run();\r\n                    handler.clear();\r\n                }\r\n                this._pool.push(handler);\r\n                i === n && (n = laters.length - 1);\r\n            }\r\n            laters.length = 0;\r\n        }\r\n    }\r\n    /** @private */\r\n    _getHandler(caller, method) {\r\n        var cid = caller ? caller.$_GID || (caller.$_GID = _Utils__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getGID()) : 0;\r\n        var mid = method.$_TID || (method.$_TID = (_Timer__WEBPACK_IMPORTED_MODULE_1__[\"Timer\"]._mid++) * 100000);\r\n        return this._map[cid + mid];\r\n    }\r\n    /**\r\n     * 延迟执行。\r\n     * @param\tcaller 执行域(this)。\r\n     * @param\tmethod 定时器回调函数。\r\n     * @param\targs 回调参数。\r\n     */\r\n    callLater(caller, method, args = null) {\r\n        if (this._getHandler(caller, method) == null) {\r\n            if (this._pool.length)\r\n                var handler = this._pool.pop();\r\n            else\r\n                handler = new LaterHandler();\r\n            //设置属性\r\n            handler.caller = caller;\r\n            handler.method = method;\r\n            handler.args = args;\r\n            //索引handler\r\n            var cid = caller ? caller.$_GID : 0;\r\n            var mid = method[\"$_TID\"];\r\n            handler.key = cid + mid;\r\n            this._map[handler.key] = handler;\r\n            //插入队列\r\n            this._laters.push(handler);\r\n        }\r\n    }\r\n    /**\r\n     * 立即执行 callLater 。\r\n     * @param\tcaller 执行域(this)。\r\n     * @param\tmethod 定时器回调函数。\r\n     */\r\n    runCallLater(caller, method) {\r\n        var handler = this._getHandler(caller, method);\r\n        if (handler && handler.method != null) {\r\n            this._map[handler.key] = null;\r\n            handler.run();\r\n            handler.clear();\r\n        }\r\n    }\r\n}\r\nCallLater.I = new CallLater();\r\n/** @private */\r\nclass LaterHandler {\r\n    clear() {\r\n        this.caller = null;\r\n        this.method = null;\r\n        this.args = null;\r\n    }\r\n    run() {\r\n        var caller = this.caller;\r\n        if (caller && caller.destroyed)\r\n            return this.clear();\r\n        var method = this.method;\r\n        var args = this.args;\r\n        if (method == null)\r\n            return;\r\n        args ? method.apply(caller, args) : method.call(caller);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/CallLater.ts?");

/***/ }),

/***/ "./src/core/laya/utils/ClassUtils.ts":
/*!*******************************************!*\
  !*** ./src/core/laya/utils/ClassUtils.ts ***!
  \*******************************************/
/*! exports provided: ClassUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ClassUtils\", function() { return ClassUtils; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _HitArea__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././HitArea */ \"./src/core/laya/utils/HitArea.ts\");\n/* harmony import */ var _display_Graphics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../display/Graphics */ \"./src/core/laya/display/Graphics.ts\");\n/* harmony import */ var _display_Scene__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../display/Scene */ \"./src/core/laya/display/Scene.ts\");\n/* harmony import */ var _display_Sprite__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../display/Sprite */ \"./src/core/laya/display/Sprite.ts\");\n/* harmony import */ var _display_Text__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../display/Text */ \"./src/core/laya/display/Text.ts\");\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n/* harmony import */ var _net_Loader__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../net/Loader */ \"./src/core/laya/net/Loader.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * <code>ClassUtils</code> 是一个类工具类。\r\n */\r\nclass ClassUtils {\r\n    /**\r\n     * 注册 Class 映射，方便在class反射时获取。\r\n     * @param\tclassName 映射的名字或者别名。\r\n     * @param\tclassDef 类的全名或者类的引用，全名比如:\"laya.display.Sprite\"。\r\n     */\r\n    static regClass(className, classDef) {\r\n        ClassUtils._classMap[className] = classDef;\r\n    }\r\n    /**\r\n     * 根据类名短名字注册类，比如传入[Sprite]，功能同regClass(\"Sprite\",Sprite);\r\n     * @param\tclasses 类数组\r\n     */\r\n    static regShortClassName(classes) {\r\n        for (var i = 0; i < classes.length; i++) {\r\n            var classDef = classes[i];\r\n            var className = classDef.name;\r\n            ClassUtils._classMap[className] = classDef;\r\n        }\r\n    }\r\n    /**\r\n     * 返回注册的 Class 映射。\r\n     * @param\tclassName 映射的名字。\r\n     */\r\n    static getRegClass(className) {\r\n        return ClassUtils._classMap[className];\r\n    }\r\n    /**\r\n     * 根据名字返回类对象。\r\n     * @param\tclassName 类名(比如laya.display.Sprite)或者注册的别名(比如Sprite)。\r\n     * @return 类对象\r\n     */\r\n    static getClass(className) {\r\n        var classObject = ClassUtils._classMap[className] || className;\r\n        if (classObject instanceof String)\r\n            return (_Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"][\"__classmap\"][classObject] || _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"][className]);\r\n        return classObject;\r\n    }\r\n    /**\r\n     * 根据名称创建 Class 实例。\r\n     * @param\tclassName 类名(比如laya.display.Sprite)或者注册的别名(比如Sprite)。\r\n     * @return\t返回类的实例。\r\n     */\r\n    static getInstance(className) {\r\n        var compClass = ClassUtils.getClass(className);\r\n        if (compClass)\r\n            return new compClass();\r\n        else\r\n            console.warn(\"[error] Undefined class:\", className);\r\n        return null;\r\n    }\r\n    /**\r\n     * 根据指定的 json 数据创建节点对象。\r\n     * 比如:\r\n     * {\r\n     * \t\"type\":\"Sprite\",\r\n     * \t\"props\":{\r\n     * \t\t\"x\":100,\r\n     * \t\t\"y\":50,\r\n     * \t\t\"name\":\"item1\",\r\n     * \t\t\"scale\":[2,2]\r\n     * \t},\r\n     * \t\"customProps\":{\r\n     * \t\t\"x\":100,\r\n     * \t\t\"y\":50,\r\n     * \t\t\"name\":\"item1\",\r\n     * \t\t\"scale\":[2,2]\r\n     * \t},\r\n     * \t\"child\":[\r\n     * \t\t{\r\n     * \t\t\t\"type\":\"Text\",\r\n     * \t\t\t\"props\":{\r\n     * \t\t\t\t\"text\":\"this is a test\",\r\n     * \t\t\t\t\"var\":\"label\",\r\n     * \t\t\t\t\"rumtime\":\"\"\r\n     * \t\t\t}\r\n     * \t\t}\r\n     * \t]\r\n     * }\r\n     * @param\tjson json字符串或者Object对象。\r\n     * @param\tnode node节点，如果为空，则新创建一个。\r\n     * @param\troot 根节点，用来设置var定义。\r\n     * @return\t生成的节点。\r\n     */\r\n    static createByJson(json, node = null, root = null, customHandler = null, instanceHandler = null) {\r\n        if (json instanceof String)\r\n            json = JSON.parse(json);\r\n        var props = json.props;\r\n        if (!node) {\r\n            node = instanceHandler ? instanceHandler.runWith(json) : ClassUtils.getInstance(props.runtime || json.type);\r\n            if (!node)\r\n                return null;\r\n        }\r\n        var child = json.child;\r\n        if (child) {\r\n            for (var i = 0, n = child.length; i < n; i++) {\r\n                var data = child[i];\r\n                if ((data.props.name === \"render\" || data.props.renderType === \"render\") && node[\"_$set_itemRender\"])\r\n                    node.itemRender = data;\r\n                else {\r\n                    if (data.type == \"Graphic\") {\r\n                        ClassUtils._addGraphicsToSprite(data, node);\r\n                    }\r\n                    else if (ClassUtils._isDrawType(data.type)) {\r\n                        ClassUtils._addGraphicToSprite(data, node, true);\r\n                    }\r\n                    else {\r\n                        var tChild = ClassUtils.createByJson(data, null, root, customHandler, instanceHandler);\r\n                        if (data.type === \"Script\") {\r\n                            if (tChild.hasOwnProperty(\"owner\")) {\r\n                                tChild[\"owner\"] = node;\r\n                            }\r\n                            else if (tChild.hasOwnProperty(\"target\")) {\r\n                                tChild[\"target\"] = node;\r\n                            }\r\n                        }\r\n                        else if (data.props.renderType == \"mask\") {\r\n                            node.mask = tChild;\r\n                        }\r\n                        else {\r\n                            node.addChild(tChild);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (props) {\r\n            for (var prop in props) {\r\n                var value = props[prop];\r\n                if (prop === \"var\" && root) {\r\n                    root[value] = node;\r\n                }\r\n                else if (value instanceof Array && node[prop] instanceof Function) {\r\n                    node[prop].apply(node, value);\r\n                }\r\n                else {\r\n                    node[prop] = value;\r\n                }\r\n            }\r\n        }\r\n        if (customHandler && json.customProps) {\r\n            customHandler.runWith([node, json]);\r\n        }\r\n        if (node[\"created\"])\r\n            node.created();\r\n        return node;\r\n    }\r\n    /**\r\n     * @private\r\n     * 将graphic对象添加到Sprite上\r\n     * @param graphicO graphic对象描述\r\n     */\r\n    static _addGraphicsToSprite(graphicO, sprite) {\r\n        var graphics = graphicO.child;\r\n        if (!graphics || graphics.length < 1)\r\n            return;\r\n        var g = ClassUtils._getGraphicsFromSprite(graphicO, sprite);\r\n        var ox = 0;\r\n        var oy = 0;\r\n        if (graphicO.props) {\r\n            ox = ClassUtils._getObjVar(graphicO.props, \"x\", 0);\r\n            oy = ClassUtils._getObjVar(graphicO.props, \"y\", 0);\r\n        }\r\n        if (ox != 0 && oy != 0) {\r\n            g.translate(ox, oy);\r\n        }\r\n        var i, len;\r\n        len = graphics.length;\r\n        for (i = 0; i < len; i++) {\r\n            ClassUtils._addGraphicToGraphics(graphics[i], g);\r\n        }\r\n        if (ox != 0 && oy != 0) {\r\n            g.translate(-ox, -oy);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 将graphic绘图指令添加到sprite上\r\n     * @param graphicO 绘图指令描述\r\n     */\r\n    static _addGraphicToSprite(graphicO, sprite, isChild = false) {\r\n        var g = isChild ? ClassUtils._getGraphicsFromSprite(graphicO, sprite) : sprite.graphics;\r\n        ClassUtils._addGraphicToGraphics(graphicO, g);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _getGraphicsFromSprite(dataO, sprite) {\r\n        if (!dataO || !dataO.props)\r\n            return sprite.graphics;\r\n        var propsName = dataO.props.renderType;\r\n        if (propsName === \"hit\" || propsName === \"unHit\") {\r\n            var hitArea = sprite._style.hitArea || (sprite.hitArea = new _HitArea__WEBPACK_IMPORTED_MODULE_1__[\"HitArea\"]());\r\n            if (!hitArea[propsName]) {\r\n                hitArea[propsName] = new _display_Graphics__WEBPACK_IMPORTED_MODULE_2__[\"Graphics\"]();\r\n            }\r\n            var g = hitArea[propsName];\r\n        }\r\n        if (!g)\r\n            g = sprite.graphics;\r\n        return g;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _getTransformData(propsO) {\r\n        var m;\r\n        if (propsO.hasOwnProperty(\"pivotX\") || propsO.hasOwnProperty(\"pivotY\")) {\r\n            m = m || new _maths_Matrix__WEBPACK_IMPORTED_MODULE_6__[\"Matrix\"]();\r\n            m.translate(-ClassUtils._getObjVar(propsO, \"pivotX\", 0), -ClassUtils._getObjVar(propsO, \"pivotY\", 0));\r\n        }\r\n        var sx = ClassUtils._getObjVar(propsO, \"scaleX\", 1), sy = ClassUtils._getObjVar(propsO, \"scaleY\", 1);\r\n        var rotate = ClassUtils._getObjVar(propsO, \"rotation\", 0);\r\n        var skewX = ClassUtils._getObjVar(propsO, \"skewX\", 0);\r\n        var skewY = ClassUtils._getObjVar(propsO, \"skewY\", 0);\r\n        if (sx != 1 || sy != 1 || rotate != 0) {\r\n            m = m || new _maths_Matrix__WEBPACK_IMPORTED_MODULE_6__[\"Matrix\"]();\r\n            m.scale(sx, sy);\r\n            m.rotate(rotate * 0.0174532922222222);\r\n        }\r\n        return m;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _addGraphicToGraphics(graphicO, graphic) {\r\n        var propsO;\r\n        propsO = graphicO.props;\r\n        if (!propsO)\r\n            return;\r\n        var drawConfig;\r\n        drawConfig = ClassUtils.DrawTypeDic[graphicO.type];\r\n        if (!drawConfig)\r\n            return;\r\n        var g = graphic;\r\n        var params = ClassUtils._getParams(propsO, drawConfig[1], drawConfig[2], drawConfig[3]);\r\n        var m = ClassUtils._tM;\r\n        if (m || ClassUtils._alpha != 1) {\r\n            g.save();\r\n            if (m)\r\n                g.transform(m);\r\n            if (ClassUtils._alpha != 1)\r\n                g.alpha(ClassUtils._alpha);\r\n        }\r\n        g[drawConfig[0]].apply(g, params);\r\n        if (m || ClassUtils._alpha != 1) {\r\n            g.restore();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _adptLineData(params) {\r\n        params[2] = parseFloat(params[0]) + parseFloat(params[2]);\r\n        params[3] = parseFloat(params[1]) + parseFloat(params[3]);\r\n        return params;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _adptTextureData(params) {\r\n        params[0] = _net_Loader__WEBPACK_IMPORTED_MODULE_7__[\"Loader\"].getRes(params[0]);\r\n        return params;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _adptLinesData(params) {\r\n        params[2] = ClassUtils._getPointListByStr(params[2]);\r\n        return params;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _isDrawType(type) {\r\n        if (type === \"Image\")\r\n            return false;\r\n        return ClassUtils.DrawTypeDic.hasOwnProperty(type);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _getParams(obj, params, xPos = 0, adptFun = null) {\r\n        var rst = ClassUtils._temParam;\r\n        rst.length = params.length;\r\n        var i, len;\r\n        len = params.length;\r\n        for (i = 0; i < len; i++) {\r\n            rst[i] = ClassUtils._getObjVar(obj, params[i][0], params[i][1]);\r\n        }\r\n        ClassUtils._alpha = ClassUtils._getObjVar(obj, \"alpha\", 1);\r\n        var m;\r\n        m = ClassUtils._getTransformData(obj);\r\n        if (m) {\r\n            if (!xPos)\r\n                xPos = 0;\r\n            m.translate(rst[xPos], rst[xPos + 1]);\r\n            rst[xPos] = rst[xPos + 1] = 0;\r\n            ClassUtils._tM = m;\r\n        }\r\n        else {\r\n            ClassUtils._tM = null;\r\n        }\r\n        if (adptFun && ClassUtils[adptFun]) {\r\n            rst = ClassUtils[adptFun](rst);\r\n        }\r\n        return rst;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _getPointListByStr(str) {\r\n        var pointArr = str.split(\",\");\r\n        var i, len;\r\n        len = pointArr.length;\r\n        for (i = 0; i < len; i++) {\r\n            pointArr[i] = parseFloat(pointArr[i]);\r\n        }\r\n        return pointArr;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _getObjVar(obj, key, noValue) {\r\n        if (obj.hasOwnProperty(key)) {\r\n            return obj[key];\r\n        }\r\n        return noValue;\r\n    }\r\n}\r\n/**@private */\r\nClassUtils.DrawTypeDic = { \"Rect\": [\"drawRect\", [[\"x\", 0], [\"y\", 0], [\"width\", 0], [\"height\", 0], [\"fillColor\", null], [\"lineColor\", null], [\"lineWidth\", 1]]], \"Circle\": [\"drawCircle\", [[\"x\", 0], [\"y\", 0], [\"radius\", 0], [\"fillColor\", null], [\"lineColor\", null], [\"lineWidth\", 1]]], \"Pie\": [\"drawPie\", [[\"x\", 0], [\"y\", 0], [\"radius\", 0], [\"startAngle\", 0], [\"endAngle\", 0], [\"fillColor\", null], [\"lineColor\", null], [\"lineWidth\", 1]]], \"Image\": [\"drawTexture\", [[\"x\", 0], [\"y\", 0], [\"width\", 0], [\"height\", 0]]], \"Texture\": [\"drawTexture\", [[\"skin\", null], [\"x\", 0], [\"y\", 0], [\"width\", 0], [\"height\", 0]], 1, \"_adptTextureData\"], \"FillTexture\": [\"fillTexture\", [[\"skin\", null], [\"x\", 0], [\"y\", 0], [\"width\", 0], [\"height\", 0], [\"repeat\", null]], 1, \"_adptTextureData\"], \"FillText\": [\"fillText\", [[\"text\", \"\"], [\"x\", 0], [\"y\", 0], [\"font\", null], [\"color\", null], [\"textAlign\", null]], 1], \"Line\": [\"drawLine\", [[\"x\", 0], [\"y\", 0], [\"toX\", 0], [\"toY\", 0], [\"lineColor\", null], [\"lineWidth\", 0]], 0, \"_adptLineData\"], \"Lines\": [\"drawLines\", [[\"x\", 0], [\"y\", 0], [\"points\", \"\"], [\"lineColor\", null], [\"lineWidth\", 0]], 0, \"_adptLinesData\"], \"Curves\": [\"drawCurves\", [[\"x\", 0], [\"y\", 0], [\"points\", \"\"], [\"lineColor\", null], [\"lineWidth\", 0]], 0, \"_adptLinesData\"], \"Poly\": [\"drawPoly\", [[\"x\", 0], [\"y\", 0], [\"points\", \"\"], [\"fillColor\", null], [\"lineColor\", null], [\"lineWidth\", 1]], 0, \"_adptLinesData\"] };\r\n/**@private */\r\nClassUtils._temParam = [];\r\n/**@private */\r\nClassUtils._classMap = { 'Sprite': _display_Sprite__WEBPACK_IMPORTED_MODULE_4__[\"Sprite\"], 'Scene': _display_Scene__WEBPACK_IMPORTED_MODULE_3__[\"Scene\"], 'Text': _display_Text__WEBPACK_IMPORTED_MODULE_5__[\"Text\"], 'Animation': 'laya.display.Animation', 'Skeleton': 'laya.ani.bone.Skeleton', 'Particle2D': 'laya.particle.Particle2D', 'div': 'laya.html.dom.HTMLDivParser', 'p': 'laya.html.dom.HTMLElement', 'img': 'laya.html.dom.HTMLImageElement', 'span': 'laya.html.dom.HTMLElement', 'br': 'laya.html.dom.HTMLBrElement', 'style': 'laya.html.dom.HTMLStyleElement', 'font': 'laya.html.dom.HTMLElement', 'a': 'laya.html.dom.HTMLElement', '#text': 'laya.html.dom.HTMLElement', 'link': 'laya.html.dom.HTMLLinkElement' };\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/ClassUtils.ts?");

/***/ }),

/***/ "./src/core/laya/utils/ColorUtils.ts":
/*!*******************************************!*\
  !*** ./src/core/laya/utils/ColorUtils.ts ***!
  \*******************************************/
/*! exports provided: ColorUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ColorUtils\", function() { return ColorUtils; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ \"./src/core/laya/utils/Utils.ts\");\n\r\n/**\r\n * @private\r\n * <code>ColorUtils</code> 是一个颜色值处理类。\r\n */\r\nclass ColorUtils {\r\n    /**\r\n     * 根据指定的属性值，创建一个 <code>Color</code> 类的实例。\r\n     * @param\tvalue 颜色值，可以是字符串：\"#ff0000\"或者16进制颜色 0xff0000。\r\n     */\r\n    constructor(value) {\r\n        /**rgba 取值范围0-1*/\r\n        //TODO:delete？\r\n        this.arrColor = [];\r\n        if (value == null) {\r\n            this.strColor = \"#00000000\";\r\n            this.numColor = 0;\r\n            this.arrColor = [0, 0, 0, 0];\r\n            return;\r\n        }\r\n        var i, len;\r\n        var color;\r\n        if (typeof (value) == 'string') {\r\n            if (value.indexOf(\"rgba(\") >= 0 || value.indexOf(\"rgb(\") >= 0) {\r\n                var tStr = value;\r\n                var beginI, endI;\r\n                beginI = tStr.indexOf(\"(\");\r\n                endI = tStr.indexOf(\")\");\r\n                tStr = tStr.substring(beginI + 1, endI);\r\n                this.arrColor = tStr.split(\",\");\r\n                len = this.arrColor.length;\r\n                for (i = 0; i < len; i++) {\r\n                    this.arrColor[i] = parseFloat(this.arrColor[i]);\r\n                    if (i < 3) {\r\n                        this.arrColor[i] = Math.round(this.arrColor[i]);\r\n                    }\r\n                }\r\n                if (this.arrColor.length == 4) {\r\n                    color = ((this.arrColor[0] * 256 + this.arrColor[1]) * 256 + this.arrColor[2]) * 256 + Math.round(this.arrColor[3] * 255);\r\n                }\r\n                else {\r\n                    color = ((this.arrColor[0] * 256 + this.arrColor[1]) * 256 + this.arrColor[2]);\r\n                }\r\n                this.strColor = value;\r\n            }\r\n            else {\r\n                this.strColor = value;\r\n                value.charAt(0) === '#' && (value = value.substr(1));\r\n                len = value.length;\r\n                if (len === 3 || len === 4) {\r\n                    var temp = \"\";\r\n                    for (i = 0; i < len; i++) {\r\n                        temp += (value[i] + value[i]);\r\n                    }\r\n                    value = temp;\r\n                }\r\n                color = parseInt(value, 16);\r\n            }\r\n        }\r\n        else {\r\n            color = value;\r\n            this.strColor = _Utils__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].toHexColor(color);\r\n        }\r\n        if (this.strColor.indexOf(\"rgba\") >= 0 || this.strColor.length === 9) {\r\n            //color:0xrrggbbaa numColor此时为负数\r\n            this.arrColor = [((0xFF000000 & color) >>> 24) / 255, ((0xFF0000 & color) >> 16) / 255, ((0xFF00 & color) >> 8) / 255, (0xFF & color) / 255];\r\n            this.numColor = (0xff000000 & color) >>> 24 | (color & 0xff0000) >> 8 | (color & 0x00ff00) << 8 | ((color & 0xff) << 24); //to 0xffbbggrr\r\n        }\r\n        else {\r\n            this.arrColor = [((0xFF0000 & color) >> 16) / 255, ((0xFF00 & color) >> 8) / 255, (0xFF & color) / 255, 1];\r\n            this.numColor = 0xff000000 | (color & 0xff0000) >> 16 | (color & 0x00ff00) | (color & 0xff) << 16; //to 0xffbbggrr\r\n        }\r\n        this.arrColor.__id = ++ColorUtils._COLODID;\r\n    }\r\n    /**@private */\r\n    static _initDefault() {\r\n        ColorUtils._DEFAULT = {};\r\n        for (var i in ColorUtils._COLOR_MAP)\r\n            ColorUtils._SAVE[i] = ColorUtils._DEFAULT[i] = new ColorUtils(ColorUtils._COLOR_MAP[i]);\r\n        return ColorUtils._DEFAULT;\r\n    }\r\n    /**@private 缓存太大，则清理缓存*/\r\n    static _initSaveMap() {\r\n        ColorUtils._SAVE_SIZE = 0;\r\n        ColorUtils._SAVE = {};\r\n        for (var i in ColorUtils._DEFAULT)\r\n            ColorUtils._SAVE[i] = ColorUtils._DEFAULT[i];\r\n    }\r\n    /**\r\n     * 根据指定的属性值，创建并返回一个 <code>Color</code> 类的实例。\r\n     * @param\tvalue 颜色值，可以是字符串：\"#ff0000\"或者16进制颜色 0xff0000。\r\n     * @return 一个 <code>Color</code> 类的实例。\r\n     */\r\n    static create(value) {\r\n        var key = value + \"\";\r\n        var color = ColorUtils._SAVE[key];\r\n        if (color != null)\r\n            return color;\r\n        if (ColorUtils._SAVE_SIZE < 1000)\r\n            ColorUtils._initSaveMap();\r\n        return ColorUtils._SAVE[key] = new ColorUtils(value);\r\n    }\r\n}\r\n/*[FILEINDEX:10000]*/\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n/**@private */\r\nColorUtils._SAVE = {};\r\n/**@private */\r\nColorUtils._SAVE_SIZE = 0;\r\n/**@private */\r\nColorUtils._COLOR_MAP = { \"purple\": \"#800080\", \"orange\": \"#ffa500\", \"white\": '#FFFFFF', \"red\": '#FF0000', \"green\": '#00FF00', \"blue\": '#0000FF', \"black\": '#000000', \"yellow\": '#FFFF00', 'gray': '#808080' };\r\n/**@private */\r\nColorUtils._DEFAULT = ColorUtils._initDefault();\r\n/**@private */\r\nColorUtils._COLODID = 1;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/ColorUtils.ts?");

/***/ }),

/***/ "./src/core/laya/utils/Dragging.ts":
/*!*****************************************!*\
  !*** ./src/core/laya/utils/Dragging.ts ***!
  \*****************************************/
/*! exports provided: Dragging */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Dragging\", function() { return Dragging; });\n/* harmony import */ var _Tween__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Tween */ \"./src/core/laya/utils/Tween.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _Ease__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ././Ease */ \"./src/core/laya/utils/Ease.ts\");\n/* harmony import */ var _Handler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ././Handler */ \"./src/core/laya/utils/Handler.ts\");\n/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../events/Event */ \"./src/core/laya/events/Event.ts\");\n/* harmony import */ var _events_MouseManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../events/MouseManager */ \"./src/core/laya/events/MouseManager.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * <code>Dragging</code> 类是触摸滑动控件。\r\n */\r\nclass Dragging {\r\n    constructor() {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        /** 缓动衰减系数。*/\r\n        this.ratio = 0.92;\r\n        /** 单帧最大偏移量。*/\r\n        this.maxOffset = 60;\r\n        this._dragging = false;\r\n        this._clickOnly = true;\r\n    }\r\n    /**\r\n     * 开始拖拽。\r\n     * @param\ttarget 待拖拽的 <code>Sprite</code> 对象。\r\n     * @param\tarea 滑动范围。\r\n     * @param\thasInertia 拖动是否有惯性。\r\n     * @param\telasticDistance 橡皮筋最大值。\r\n     * @param\telasticBackTime 橡皮筋回弹时间，单位为毫秒。\r\n     * @param\tdata 事件携带数据。\r\n     * @param\tdisableMouseEvent 鼠标事件是否有效。\r\n     * @param\tratio 惯性阻尼系数\r\n     */\r\n    start(target, area, hasInertia, elasticDistance, elasticBackTime, data, disableMouseEvent, ratio = 0.92) {\r\n        this.clearTimer();\r\n        this.target = target;\r\n        this.area = area;\r\n        this.hasInertia = hasInertia;\r\n        this.elasticDistance = area ? elasticDistance : 0;\r\n        this.elasticBackTime = elasticBackTime;\r\n        this.data = data;\r\n        this._disableMouseEvent = disableMouseEvent;\r\n        this.ratio = ratio;\r\n        this._parent = target.parent;\r\n        this._clickOnly = true;\r\n        this._dragging = true;\r\n        this._elasticRateX = this._elasticRateY = 1;\r\n        this._lastX = this._parent.mouseX;\r\n        this._lastY = this._parent.mouseY;\r\n        _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.on(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].MOUSE_UP, this, this.onStageMouseUp);\r\n        _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.on(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].MOUSE_OUT, this, this.onStageMouseUp);\r\n        //Laya.stage.on(Event.MOUSE_MOVE, this, onStageMouseMove);\r\n        _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.frameLoop(1, this, this.loop);\r\n    }\r\n    /**\r\n     * 清除计时器。\r\n     */\r\n    clearTimer() {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.clear(this, this.loop);\r\n        _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.clear(this, this.tweenMove);\r\n        if (this._tween) {\r\n            this._tween.recover();\r\n            this._tween = null;\r\n        }\r\n    }\r\n    /**\r\n     * 停止拖拽。\r\n     */\r\n    stop() {\r\n        if (this._dragging) {\r\n            _events_MouseManager__WEBPACK_IMPORTED_MODULE_5__[\"MouseManager\"].instance.disableMouseEvent = false;\r\n            _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.off(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].MOUSE_UP, this, this.onStageMouseUp);\r\n            _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.off(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].MOUSE_OUT, this, this.onStageMouseUp);\r\n            this._dragging = false;\r\n            this.target && this.area && this.backToArea();\r\n            this.clear();\r\n        }\r\n    }\r\n    /**\r\n     * 拖拽的循环处理函数。\r\n     */\r\n    loop() {\r\n        var point = this._parent.getMousePoint();\r\n        var mouseX = point.x;\r\n        var mouseY = point.y;\r\n        var offsetX = mouseX - this._lastX;\r\n        var offsetY = mouseY - this._lastY;\r\n        if (this._clickOnly) {\r\n            if (Math.abs(offsetX * _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage._canvasTransform.getScaleX()) > 1 || Math.abs(offsetY * _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage._canvasTransform.getScaleY()) > 1) {\r\n                this._clickOnly = false;\r\n                this._offsets || (this._offsets = []);\r\n                this._offsets.length = 0;\r\n                this.target.event(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].DRAG_START, this.data);\r\n                _events_MouseManager__WEBPACK_IMPORTED_MODULE_5__[\"MouseManager\"].instance.disableMouseEvent = this._disableMouseEvent;\r\n                //TODO:\r\n                //target._set$P(\"$_MOUSEDOWN\", false);\r\n            }\r\n            else\r\n                return;\r\n        }\r\n        else {\r\n            this._offsets.push(offsetX, offsetY);\r\n        }\r\n        if (offsetX === 0 && offsetY === 0)\r\n            return;\r\n        this._lastX = mouseX;\r\n        this._lastY = mouseY;\r\n        this.target.x += offsetX * this._elasticRateX;\r\n        this.target.y += offsetY * this._elasticRateY;\r\n        this.area && this.checkArea();\r\n        this.target.event(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].DRAG_MOVE, this.data);\r\n    }\r\n    /**\r\n     * 拖拽区域检测。\r\n     */\r\n    checkArea() {\r\n        if (this.elasticDistance <= 0) {\r\n            this.backToArea();\r\n        }\r\n        else {\r\n            if (this.target._x < this.area.x) {\r\n                var offsetX = this.area.x - this.target._x;\r\n            }\r\n            else if (this.target._x > this.area.x + this.area.width) {\r\n                offsetX = this.target._x - this.area.x - this.area.width;\r\n            }\r\n            else {\r\n                offsetX = 0;\r\n            }\r\n            this._elasticRateX = Math.max(0, 1 - (offsetX / this.elasticDistance));\r\n            if (this.target._y < this.area.y) {\r\n                var offsetY = this.area.y - this.target.y;\r\n            }\r\n            else if (this.target._y > this.area.y + this.area.height) {\r\n                offsetY = this.target._y - this.area.y - this.area.height;\r\n            }\r\n            else {\r\n                offsetY = 0;\r\n            }\r\n            this._elasticRateY = Math.max(0, 1 - (offsetY / this.elasticDistance));\r\n        }\r\n    }\r\n    /**\r\n     * 移动至设定的拖拽区域。\r\n     */\r\n    backToArea() {\r\n        this.target.x = Math.min(Math.max(this.target._x, this.area.x), this.area.x + this.area.width);\r\n        this.target.y = Math.min(Math.max(this.target._y, this.area.y), this.area.y + this.area.height);\r\n    }\r\n    /**\r\n     * 舞台的抬起事件侦听函数。\r\n     * @param\te Event 对象。\r\n     */\r\n    onStageMouseUp(e) {\r\n        _events_MouseManager__WEBPACK_IMPORTED_MODULE_5__[\"MouseManager\"].instance.disableMouseEvent = false;\r\n        _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.off(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].MOUSE_UP, this, this.onStageMouseUp);\r\n        _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.off(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].MOUSE_OUT, this, this.onStageMouseUp);\r\n        //Laya.stage.off(Event.MOUSE_MOVE, this, onStageMouseMove);\r\n        _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.clear(this, this.loop);\r\n        if (this._clickOnly || !this.target)\r\n            return;\r\n        //target.mouseEnabled = true;\r\n        if (this.hasInertia) {\r\n            //计算平均值\r\n            if (this._offsets.length < 1) {\r\n                this._offsets.push(this._parent.mouseX - this._lastX, this._parent.mouseY - this._lastY);\r\n            }\r\n            this._offsetX = this._offsetY = 0;\r\n            var len = this._offsets.length;\r\n            var n = Math.min(len, 6);\r\n            var m = this._offsets.length - n;\r\n            for (var i = len - 1; i > m; i--) {\r\n                this._offsetY += this._offsets[i--];\r\n                this._offsetX += this._offsets[i];\r\n            }\r\n            this._offsetX = this._offsetX / n * 2;\r\n            this._offsetY = this._offsetY / n * 2;\r\n            if (Math.abs(this._offsetX) > this.maxOffset)\r\n                this._offsetX = this._offsetX > 0 ? this.maxOffset : -this.maxOffset;\r\n            if (Math.abs(this._offsetY) > this.maxOffset)\r\n                this._offsetY = this._offsetY > 0 ? this.maxOffset : -this.maxOffset;\r\n            _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.frameLoop(1, this, this.tweenMove);\r\n        }\r\n        else if (this.elasticDistance > 0) {\r\n            this.checkElastic();\r\n        }\r\n        else {\r\n            this.clear();\r\n        }\r\n    }\r\n    /**\r\n     * 橡皮筋效果检测。\r\n     */\r\n    checkElastic() {\r\n        var tx = NaN;\r\n        var ty = NaN;\r\n        if (this.target.x < this.area.x)\r\n            tx = this.area.x;\r\n        else if (this.target._x > this.area.x + this.area.width)\r\n            tx = this.area.x + this.area.width;\r\n        if (this.target.y < this.area.y)\r\n            ty = this.area.y;\r\n        else if (this.target._y > this.area.y + this.area.height)\r\n            ty = this.area.y + this.area.height;\r\n        if (!isNaN(tx) || !isNaN(ty)) {\r\n            var obj = {};\r\n            if (!isNaN(tx))\r\n                obj.x = tx;\r\n            if (!isNaN(ty))\r\n                obj.y = ty;\r\n            this._tween = _Tween__WEBPACK_IMPORTED_MODULE_0__[\"Tween\"].to(this.target, obj, this.elasticBackTime, _Ease__WEBPACK_IMPORTED_MODULE_2__[\"Ease\"].sineOut, _Handler__WEBPACK_IMPORTED_MODULE_3__[\"Handler\"].create(this, this.clear), 0, false, false);\r\n        }\r\n        else {\r\n            this.clear();\r\n        }\r\n    }\r\n    /**\r\n     * 移动。\r\n     */\r\n    tweenMove() {\r\n        this._offsetX *= this.ratio * this._elasticRateX;\r\n        this._offsetY *= this.ratio * this._elasticRateY;\r\n        this.target.x += this._offsetX;\r\n        this.target.y += this._offsetY;\r\n        this.area && this.checkArea();\r\n        this.target.event(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].DRAG_MOVE, this.data);\r\n        if ((Math.abs(this._offsetX) < 1 && Math.abs(this._offsetY) < 1) || this._elasticRateX < 0.5 || this._elasticRateY < 0.5) {\r\n            _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.clear(this, this.tweenMove);\r\n            if (this.elasticDistance > 0)\r\n                this.checkElastic();\r\n            else\r\n                this.clear();\r\n        }\r\n    }\r\n    /**\r\n     * 结束拖拽。\r\n     */\r\n    clear() {\r\n        if (this.target) {\r\n            this.clearTimer();\r\n            var sp = this.target;\r\n            this.target = null;\r\n            this._parent = null;\r\n            sp.event(_events_Event__WEBPACK_IMPORTED_MODULE_4__[\"Event\"].DRAG_END, this.data);\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/Dragging.ts?");

/***/ }),

/***/ "./src/core/laya/utils/Ease.ts":
/*!*************************************!*\
  !*** ./src/core/laya/utils/Ease.ts ***!
  \*************************************/
/*! exports provided: Ease */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Ease\", function() { return Ease; });\n/**\r\n     * <code>Ease</code> 类定义了缓动函数，以便实现 <code>Tween</code> 动画的缓动效果。\r\n     */\r\nclass Ease {\r\n    /**\r\n     * 定义无加速持续运动。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static linearNone(t, b, c, d) {\r\n        return c * t / d + b;\r\n    }\r\n    /**\r\n     * 定义无加速持续运动。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static linearIn(t, b, c, d) {\r\n        return c * t / d + b;\r\n    }\r\n    /**\r\n     * 定义无加速持续运动。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static linearInOut(t, b, c, d) {\r\n        return c * t / d + b;\r\n    }\r\n    /**\r\n     * 定义无加速持续运动。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static linearOut(t, b, c, d) {\r\n        return c * t / d + b;\r\n    }\r\n    /**\r\n     * 方法以零速率开始运动，然后在执行时加快运动速度。\r\n     * 它的运动是类似一个球落向地板又弹起后，几次逐渐减小的回弹运动。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static bounceIn(t, b, c, d) {\r\n        return c - Ease.bounceOut(d - t, 0, c, d) + b;\r\n    }\r\n    /**\r\n     * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。\r\n     * 它的运动是类似一个球落向地板又弹起后，几次逐渐减小的回弹运动。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static bounceInOut(t, b, c, d) {\r\n        if (t < d * 0.5)\r\n            return Ease.bounceIn(t * 2, 0, c, d) * .5 + b;\r\n        else\r\n            return Ease.bounceOut(t * 2 - d, 0, c, d) * .5 + c * .5 + b;\r\n    }\r\n    /**\r\n     * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。\r\n     * 它的运动是类似一个球落向地板又弹起后，几次逐渐减小的回弹运动。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static bounceOut(t, b, c, d) {\r\n        if ((t /= d) < (1 / 2.75))\r\n            return c * (7.5625 * t * t) + b;\r\n        else if (t < (2 / 2.75))\r\n            return c * (7.5625 * (t -= (1.5 / 2.75)) * t + .75) + b;\r\n        else if (t < (2.5 / 2.75))\r\n            return c * (7.5625 * (t -= (2.25 / 2.75)) * t + .9375) + b;\r\n        else\r\n            return c * (7.5625 * (t -= (2.625 / 2.75)) * t + .984375) + b;\r\n    }\r\n    /**\r\n     * 开始时往后运动，然后反向朝目标移动。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @param\ts 指定过冲量，此处数值越大，过冲越大。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static backIn(t, b, c, d, s = 1.70158) {\r\n        return c * (t /= d) * t * ((s + 1) * t - s) + b;\r\n    }\r\n    /**\r\n     * 开始运动时是向后跟踪，再倒转方向并朝目标移动，稍微过冲目标，然后再次倒转方向，回来朝目标移动。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @param\ts 指定过冲量，此处数值越大，过冲越大。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static backInOut(t, b, c, d, s = 1.70158) {\r\n        if ((t /= d * 0.5) < 1)\r\n            return c * 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b;\r\n        return c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\r\n    }\r\n    /**\r\n     * 开始运动时是朝目标移动，稍微过冲，再倒转方向回来朝着目标。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @param\ts 指定过冲量，此处数值越大，过冲越大。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static backOut(t, b, c, d, s = 1.70158) {\r\n        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\r\n    }\r\n    /**\r\n     * 方法以零速率开始运动，然后在执行时加快运动速度。\r\n     * 其中的运动由按照指数方式衰减的正弦波来定义。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @param\ta 指定正弦波的幅度。\r\n     * @param\tp 指定正弦波的周期。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static elasticIn(t, b, c, d, a = 0, p = 0) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        var s;\r\n        if (t == 0)\r\n            return b;\r\n        if ((t /= d) == 1)\r\n            return b + c;\r\n        if (!p)\r\n            p = d * .3;\r\n        if (!a || (c > 0 && a < c) || (c < 0 && a < -c)) {\r\n            a = c;\r\n            s = p / 4;\r\n        }\r\n        else\r\n            s = p / Ease.PI2 * Math.asin(c / a);\r\n        return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * Ease.PI2 / p)) + b;\r\n    }\r\n    /**\r\n     * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。\r\n     * 其中的运动由按照指数方式衰减的正弦波来定义。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @param\ta 指定正弦波的幅度。\r\n     * @param\tp 指定正弦波的周期。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static elasticInOut(t, b, c, d, a = 0, p = 0) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        var s;\r\n        if (t == 0)\r\n            return b;\r\n        if ((t /= d * 0.5) == 2)\r\n            return b + c;\r\n        if (!p)\r\n            p = d * (.3 * 1.5);\r\n        if (!a || (c > 0 && a < c) || (c < 0 && a < -c)) {\r\n            a = c;\r\n            s = p / 4;\r\n        }\r\n        else\r\n            s = p / Ease.PI2 * Math.asin(c / a);\r\n        if (t < 1)\r\n            return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * Ease.PI2 / p)) + b;\r\n        return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * Ease.PI2 / p) * .5 + c + b;\r\n    }\r\n    /**\r\n     * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。\r\n     * 其中的运动由按照指数方式衰减的正弦波来定义。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @param\ta 指定正弦波的幅度。\r\n     * @param\tp 指定正弦波的周期。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static elasticOut(t, b, c, d, a = 0, p = 0) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        var s;\r\n        if (t == 0)\r\n            return b;\r\n        if ((t /= d) == 1)\r\n            return b + c;\r\n        if (!p)\r\n            p = d * .3;\r\n        if (!a || (c > 0 && a < c) || (c < 0 && a < -c)) {\r\n            a = c;\r\n            s = p / 4;\r\n        }\r\n        else\r\n            s = p / Ease.PI2 * Math.asin(c / a);\r\n        return (a * Math.pow(2, -10 * t) * Math.sin((t * d - s) * Ease.PI2 / p) + c + b);\r\n    }\r\n    /**\r\n     * 以零速率开始运动，然后在执行时加快运动速度。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static strongIn(t, b, c, d) {\r\n        return c * (t /= d) * t * t * t * t + b;\r\n    }\r\n    /**\r\n     * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static strongInOut(t, b, c, d) {\r\n        if ((t /= d * 0.5) < 1)\r\n            return c * 0.5 * t * t * t * t * t + b;\r\n        return c * 0.5 * ((t -= 2) * t * t * t * t + 2) + b;\r\n    }\r\n    /**\r\n     * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static strongOut(t, b, c, d) {\r\n        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\r\n    }\r\n    /**\r\n     * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。\r\n     * Sine 缓动方程中的运动加速度小于 Quad 方程中的运动加速度。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static sineInOut(t, b, c, d) {\r\n        return -c * 0.5 * (Math.cos(Math.PI * t / d) - 1) + b;\r\n    }\r\n    /**\r\n     * 以零速率开始运动，然后在执行时加快运动速度。\r\n     * Sine 缓动方程中的运动加速度小于 Quad 方程中的运动加速度。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static sineIn(t, b, c, d) {\r\n        return -c * Math.cos(t / d * Ease.HALF_PI) + c + b;\r\n    }\r\n    /**\r\n     * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。\r\n     * Sine 缓动方程中的运动加速度小于 Quad 方程中的运动加速度。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static sineOut(t, b, c, d) {\r\n        return c * Math.sin(t / d * Ease.HALF_PI) + b;\r\n    }\r\n    /**\r\n     * 以零速率开始运动，然后在执行时加快运动速度。\r\n     * Quint 缓动方程的运动加速大于 Quart 缓动方程。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static quintIn(t, b, c, d) {\r\n        return c * (t /= d) * t * t * t * t + b;\r\n    }\r\n    /**\r\n     * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。\r\n     * Quint 缓动方程的运动加速大于 Quart 缓动方程。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static quintInOut(t, b, c, d) {\r\n        if ((t /= d * 0.5) < 1)\r\n            return c * 0.5 * t * t * t * t * t + b;\r\n        return c * 0.5 * ((t -= 2) * t * t * t * t + 2) + b;\r\n    }\r\n    /**\r\n     * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。\r\n     * Quint 缓动方程的运动加速大于 Quart 缓动方程。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static quintOut(t, b, c, d) {\r\n        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\r\n    }\r\n    /**\r\n     * 方法以零速率开始运动，然后在执行时加快运动速度。\r\n     * Quart 缓动方程的运动加速大于 Cubic 缓动方程。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static quartIn(t, b, c, d) {\r\n        return c * (t /= d) * t * t * t + b;\r\n    }\r\n    /**\r\n     * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。\r\n     * Quart 缓动方程的运动加速大于 Cubic 缓动方程。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static quartInOut(t, b, c, d) {\r\n        if ((t /= d * 0.5) < 1)\r\n            return c * 0.5 * t * t * t * t + b;\r\n        return -c * 0.5 * ((t -= 2) * t * t * t - 2) + b;\r\n    }\r\n    /**\r\n     * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。\r\n     * Quart 缓动方程的运动加速大于 Cubic 缓动方程。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static quartOut(t, b, c, d) {\r\n        return -c * ((t = t / d - 1) * t * t * t - 1) + b;\r\n    }\r\n    /**\r\n     * 方法以零速率开始运动，然后在执行时加快运动速度。\r\n     * Cubic 缓动方程的运动加速大于 Quad 缓动方程。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static cubicIn(t, b, c, d) {\r\n        return c * (t /= d) * t * t + b;\r\n    }\r\n    /**\r\n     * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。\r\n     * Cubic 缓动方程的运动加速大于 Quad 缓动方程。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static cubicInOut(t, b, c, d) {\r\n        if ((t /= d * 0.5) < 1)\r\n            return c * 0.5 * t * t * t + b;\r\n        return c * 0.5 * ((t -= 2) * t * t + 2) + b;\r\n    }\r\n    /**\r\n     * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。\r\n     * Cubic 缓动方程的运动加速大于 Quad 缓动方程。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static cubicOut(t, b, c, d) {\r\n        return c * ((t = t / d - 1) * t * t + 1) + b;\r\n    }\r\n    /**\r\n     * 方法以零速率开始运动，然后在执行时加快运动速度。\r\n     * Quad 缓动方程中的运动加速度等于 100% 缓动的时间轴补间的运动加速度，并且显著小于 Cubic 缓动方程中的运动加速度。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static quadIn(t, b, c, d) {\r\n        return c * (t /= d) * t + b;\r\n    }\r\n    /**\r\n     * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。\r\n     * Quad 缓动方程中的运动加速度等于 100% 缓动的时间轴补间的运动加速度，并且显著小于 Cubic 缓动方程中的运动加速度。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static quadInOut(t, b, c, d) {\r\n        if ((t /= d * 0.5) < 1)\r\n            return c * 0.5 * t * t + b;\r\n        return -c * 0.5 * ((--t) * (t - 2) - 1) + b;\r\n    }\r\n    /**\r\n     * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。\r\n     * Quad 缓动方程中的运动加速度等于 100% 缓动的时间轴补间的运动加速度，并且显著小于 Cubic 缓动方程中的运动加速度。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static quadOut(t, b, c, d) {\r\n        return -c * (t /= d) * (t - 2) + b;\r\n    }\r\n    /**\r\n     * 方法以零速率开始运动，然后在执行时加快运动速度。\r\n     * 其中每个时间间隔是剩余距离减去一个固定比例部分。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static expoIn(t, b, c, d) {\r\n        return (t == 0) ? b : c * Math.pow(2, 10 * (t / d - 1)) + b - c * 0.001;\r\n    }\r\n    /**\r\n     * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。\r\n     * 其中每个时间间隔是剩余距离减去一个固定比例部分。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static expoInOut(t, b, c, d) {\r\n        if (t == 0)\r\n            return b;\r\n        if (t == d)\r\n            return b + c;\r\n        if ((t /= d * 0.5) < 1)\r\n            return c * 0.5 * Math.pow(2, 10 * (t - 1)) + b;\r\n        return c * 0.5 * (-Math.pow(2, -10 * --t) + 2) + b;\r\n    }\r\n    /**\r\n     * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。\r\n     * 其中每个时间间隔是剩余距离减去一个固定比例部分。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static expoOut(t, b, c, d) {\r\n        return (t == d) ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\r\n    }\r\n    /**\r\n     * 方法以零速率开始运动，然后在执行时加快运动速度。\r\n     * 缓动方程的运动加速会产生突然的速率变化。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static circIn(t, b, c, d) {\r\n        return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;\r\n    }\r\n    /**\r\n     * 开始运动时速率为零，先对运动进行加速，再减速直到速率为零。\r\n     * 缓动方程的运动加速会产生突然的速率变化。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static circInOut(t, b, c, d) {\r\n        if ((t /= d * 0.5) < 1)\r\n            return -c * 0.5 * (Math.sqrt(1 - t * t) - 1) + b;\r\n        return c * 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;\r\n    }\r\n    /**\r\n     * 以较快速度开始运动，然后在执行时减慢运动速度，直至速率为零。\r\n     * 缓动方程的运动加速会产生突然的速率变化。\r\n     * @param\tt 指定当前时间，介于 0 和持续时间之间（包括二者）。\r\n     * @param\tb 指定动画属性的初始值。\r\n     * @param\tc 指定动画属性的更改总计。\r\n     * @param\td 指定运动的持续时间。\r\n     * @return 指定时间的插补属性的值。\r\n     */\r\n    static circOut(t, b, c, d) {\r\n        return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;\r\n    }\r\n}\r\n/**@private */\r\nEase.HALF_PI = Math.PI * 0.5;\r\n/**@private */\r\nEase.PI2 = Math.PI * 2;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/Ease.ts?");

/***/ }),

/***/ "./src/core/laya/utils/FontInfo.ts":
/*!*****************************************!*\
  !*** ./src/core/laya/utils/FontInfo.ts ***!
  \*****************************************/
/*! exports provided: FontInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"FontInfo\", function() { return FontInfo; });\nclass FontInfo {\r\n    constructor(font) {\r\n        this._font = \"14px Arial\";\r\n        this._family = \"Arial\";\r\n        this._size = 14;\r\n        this._italic = false;\r\n        this._bold = false;\r\n        this._id = FontInfo._gfontID++;\r\n        this.setFont(font || this._font);\r\n    }\r\n    static Parse(font) {\r\n        if (font === FontInfo._lastFont) {\r\n            return FontInfo._lastFontInfo;\r\n        }\r\n        var r = FontInfo._cache[font];\r\n        if (!r) {\r\n            r = FontInfo._cache[font] = new FontInfo(font);\r\n        }\r\n        FontInfo._lastFont = font;\r\n        FontInfo._lastFontInfo = r;\r\n        return r;\r\n    }\r\n    setFont(value) {\r\n        this._font = value;\r\n        var _words = value.split(' ');\r\n        var l = _words.length;\r\n        if (l < 2) {\r\n            if (l == 1) {\r\n                if (_words[0].indexOf('px') > 0) {\r\n                    this._size = parseInt(_words[0]);\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        var szpos = -1;\r\n        //由于字体可能有空格，例如Microsoft YaHei 所以不能直接取倒数第二个，要先找到px\r\n        for (var i = 0; i < l; i++) {\r\n            if (_words[i].indexOf('px') > 0 || _words[i].indexOf('pt') > 0) {\r\n                szpos = i;\r\n                this._size = parseInt(_words[i]);\r\n                if (this._size <= 0) {\r\n                    console.error('font parse error:' + value);\r\n                    this._size = 14;\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        //最后一个是用逗号分开的family\r\n        var fpos = szpos + 1;\r\n        var familys = _words[fpos];\r\n        fpos++; //下一个\r\n        for (; fpos < l; fpos++) {\r\n            familys += ' ' + _words[fpos];\r\n        }\r\n        this._family = (familys.split(','))[0];\r\n        this._italic = _words.indexOf('italic') >= 0;\r\n        this._bold = _words.indexOf('bold') >= 0;\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\nFontInfo.EMPTY = new FontInfo(null);\r\nFontInfo._cache = {};\r\nFontInfo._gfontID = 0;\r\nFontInfo._lastFont = '';\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/FontInfo.ts?");

/***/ }),

/***/ "./src/core/laya/utils/Handler.ts":
/*!****************************************!*\
  !*** ./src/core/laya/utils/Handler.ts ***!
  \****************************************/
/*! exports provided: Handler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Handler\", function() { return Handler; });\n/**\r\n     * <p><code>Handler</code> 是事件处理器类。</p>\r\n     * <p>推荐使用 Handler.create() 方法从对象池创建，减少对象创建消耗。创建的 Handler 对象不再使用后，可以使用 Handler.recover() 将其回收到对象池，回收后不要再使用此对象，否则会导致不可预料的错误。</p>\r\n     * <p><b>注意：</b>由于鼠标事件也用本对象池，不正确的回收及调用，可能会影响鼠标事件的执行。</p>\r\n     */\r\nclass Handler {\r\n    /**\r\n     * 根据指定的属性值，创建一个 <code>Handler</code> 类的实例。\r\n     * @param\tcaller 执行域。\r\n     * @param\tmethod 处理函数。\r\n     * @param\targs 函数参数。\r\n     * @param\tonce 是否只执行一次。\r\n     */\r\n    constructor(caller = null, method = null, args = null, once = false) {\r\n        /** 表示是否只执行一次。如果为true，回调后执行recover()进行回收，回收后会被再利用，默认为false 。*/\r\n        this.once = false;\r\n        /**@private */\r\n        this._id = 0;\r\n        this.setTo(caller, method, args, once);\r\n    }\r\n    /**\r\n     * 设置此对象的指定属性值。\r\n     * @param\tcaller 执行域(this)。\r\n     * @param\tmethod 回调方法。\r\n     * @param\targs 携带的参数。\r\n     * @param\tonce 是否只执行一次，如果为true，执行后执行recover()进行回收。\r\n     * @return  返回 handler 本身。\r\n     */\r\n    setTo(caller, method, args, once) {\r\n        this._id = Handler._gid++;\r\n        this.caller = caller;\r\n        this.method = method;\r\n        this.args = args;\r\n        this.once = once;\r\n        return this;\r\n    }\r\n    /**\r\n     * 执行处理器。\r\n     */\r\n    run() {\r\n        if (this.method == null)\r\n            return null;\r\n        var id = this._id;\r\n        var result = this.method.apply(this.caller, this.args);\r\n        this._id === id && this.once && this.recover();\r\n        return result;\r\n    }\r\n    /**\r\n     * 执行处理器，并携带额外数据。\r\n     * @param\tdata 附加的回调数据，可以是单数据或者Array(作为多参)。\r\n     */\r\n    runWith(data) {\r\n        if (this.method == null)\r\n            return null;\r\n        var id = this._id;\r\n        if (data == null)\r\n            var result = this.method.apply(this.caller, this.args);\r\n        else if (!this.args && !data.unshift)\r\n            result = this.method.call(this.caller, data);\r\n        else if (this.args)\r\n            result = this.method.apply(this.caller, this.args.concat(data));\r\n        else\r\n            result = this.method.apply(this.caller, data);\r\n        this._id === id && this.once && this.recover();\r\n        return result;\r\n    }\r\n    /**\r\n     * 清理对象引用。\r\n     */\r\n    clear() {\r\n        this.caller = null;\r\n        this.method = null;\r\n        this.args = null;\r\n        return this;\r\n    }\r\n    /**\r\n     * 清理并回收到 Handler 对象池内。\r\n     */\r\n    recover() {\r\n        if (this._id > 0) {\r\n            this._id = 0;\r\n            Handler._pool.push(this.clear());\r\n        }\r\n    }\r\n    /**\r\n     * 从对象池内创建一个Handler，默认会执行一次并立即回收，如果不需要自动回收，设置once参数为false。\r\n     * @param\tcaller 执行域(this)。\r\n     * @param\tmethod 回调方法。\r\n     * @param\targs 携带的参数。\r\n     * @param\tonce 是否只执行一次，如果为true，回调后执行recover()进行回收，默认为true。\r\n     * @return  返回创建的handler实例。\r\n     */\r\n    static create(caller, method, args = null, once = true) {\r\n        if (Handler._pool.length)\r\n            return Handler._pool.pop().setTo(caller, method, args, once);\r\n        return new Handler(caller, method, args, once);\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n/**@private handler对象池*/\r\nHandler._pool = [];\r\n/**@private */\r\nHandler._gid = 1;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/Handler.ts?");

/***/ }),

/***/ "./src/core/laya/utils/HitArea.ts":
/*!****************************************!*\
  !*** ./src/core/laya/utils/HitArea.ts ***!
  \****************************************/
/*! exports provided: HitArea */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HitArea\", function() { return HitArea; });\n/* harmony import */ var _display_Graphics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../display/Graphics */ \"./src/core/laya/display/Graphics.ts\");\n/* harmony import */ var _maths_Point__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../maths/Point */ \"./src/core/laya/maths/Point.ts\");\n/* harmony import */ var _maths_Rectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../maths/Rectangle */ \"./src/core/laya/maths/Rectangle.ts\");\n\r\n\r\n\r\n/**\r\n * 鼠标点击区域，可以设置绘制一系列矢量图作为点击区域和非点击区域（目前只支持圆形，矩形，多边形）\r\n *\r\n */\r\nclass HitArea {\r\n    /**\r\n     * 检测对象是否包含指定的点。\r\n     * @param\tx\t点的 X 轴坐标值（水平位置）。\r\n     * @param\ty\t点的 Y 轴坐标值（垂直位置）。\r\n     * @return\t如果包含指定的点，则值为 true；否则为 false。\r\n     */\r\n    contains(x, y) {\r\n        if (!HitArea._isHitGraphic(x, y, this.hit))\r\n            return false;\r\n        return !HitArea._isHitGraphic(x, y, this.unHit);\r\n    }\r\n    /**\r\n     * @private\r\n     * 是否击中Graphic\r\n     */\r\n    static _isHitGraphic(x, y, graphic) {\r\n        if (!graphic)\r\n            return false;\r\n        var cmds = graphic.cmds;\r\n        if (!cmds && graphic._one) {\r\n            cmds = HitArea._cmds;\r\n            cmds.length = 1;\r\n            cmds[0] = graphic._one;\r\n        }\r\n        if (!cmds)\r\n            return false;\r\n        var i, len;\r\n        len = cmds.length;\r\n        var cmd;\r\n        for (i = 0; i < len; i++) {\r\n            cmd = cmds[i];\r\n            if (!cmd)\r\n                continue;\r\n            switch (cmd.cmdID) {\r\n                case \"Translate\":\r\n                    x -= cmd.tx;\r\n                    y -= cmd.ty;\r\n            }\r\n            if (HitArea._isHitCmd(x, y, cmd))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @private\r\n     * 是否击中绘图指令\r\n     */\r\n    static _isHitCmd(x, y, cmd) {\r\n        if (!cmd)\r\n            return false;\r\n        var rst = false;\r\n        switch (cmd.cmdID) {\r\n            case \"DrawRect\":\r\n                HitArea._rect.setTo(cmd.x, cmd.y, cmd.width, cmd.height);\r\n                rst = HitArea._rect.contains(x, y);\r\n                break;\r\n            case \"DrawCircle\":\r\n                var d;\r\n                x -= cmd.x;\r\n                y -= cmd.y;\r\n                d = x * x + y * y;\r\n                rst = d < cmd.radius * cmd.radius;\r\n                break;\r\n            case \"DrawPoly\":\r\n                x -= cmd.x;\r\n                y -= cmd.y;\r\n                rst = HitArea._ptInPolygon(x, y, cmd.points);\r\n                break;\r\n        }\r\n        return rst;\r\n    }\r\n    /**\r\n     * @private\r\n     * 坐标是否在多边形内\r\n     */\r\n    static _ptInPolygon(x, y, areaPoints) {\r\n        var p = HitArea._ptPoint;\r\n        p.setTo(x, y);\r\n        // 交点个数\r\n        var nCross = 0;\r\n        var p1x, p1y, p2x, p2y;\r\n        var len;\r\n        len = areaPoints.length;\r\n        for (var i = 0; i < len; i += 2) {\r\n            p1x = areaPoints[i];\r\n            p1y = areaPoints[i + 1];\r\n            p2x = areaPoints[(i + 2) % len];\r\n            p2y = areaPoints[(i + 3) % len];\r\n            //var p1:Point = areaPoints[i];\r\n            //var p2:Point = areaPoints[(i + 1) % areaPoints.length]; // 最后一个点与第一个点连线\r\n            if (p1y == p2y)\r\n                continue;\r\n            if (p.y < Math.min(p1y, p2y))\r\n                continue;\r\n            if (p.y >= Math.max(p1y, p2y))\r\n                continue;\r\n            // 求交点的x坐标\r\n            var tx = (p.y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x;\r\n            // 只统计p1p2与p向右射线的交点\r\n            if (tx > p.x)\r\n                nCross++;\r\n        }\r\n        // 交点为偶数，点在多边形之外\r\n        return (nCross % 2 == 1);\r\n    }\r\n    /**\r\n     * 可点击区域，可以设置绘制一系列矢量图作为点击区域（目前只支持圆形，矩形，多边形）\r\n     */\r\n    get hit() {\r\n        if (!this._hit)\r\n            this._hit = new _display_Graphics__WEBPACK_IMPORTED_MODULE_0__[\"Graphics\"]();\r\n        return this._hit;\r\n    }\r\n    set hit(value) {\r\n        this._hit = value;\r\n    }\r\n    /**\r\n     * 不可点击区域，可以设置绘制一系列矢量图作为非点击区域（目前只支持圆形，矩形，多边形）\r\n     */\r\n    get unHit() {\r\n        if (!this._unHit)\r\n            this._unHit = new _display_Graphics__WEBPACK_IMPORTED_MODULE_0__[\"Graphics\"]();\r\n        return this._unHit;\r\n    }\r\n    set unHit(value) {\r\n        this._unHit = value;\r\n    }\r\n}\r\n/**@private */\r\nHitArea._cmds = [];\r\n/**@private */\r\nHitArea._rect = new _maths_Rectangle__WEBPACK_IMPORTED_MODULE_2__[\"Rectangle\"]();\r\n/**@private */\r\nHitArea._ptPoint = new _maths_Point__WEBPACK_IMPORTED_MODULE_1__[\"Point\"]();\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/HitArea.ts?");

/***/ }),

/***/ "./src/core/laya/utils/Pool.ts":
/*!*************************************!*\
  !*** ./src/core/laya/utils/Pool.ts ***!
  \*************************************/
/*! exports provided: Pool */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Pool\", function() { return Pool; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Utils */ \"./src/core/laya/utils/Utils.ts\");\n\r\n/**\r\n     * <p> <code>Pool</code> 是对象池类，用于对象的存储、重复使用。</p>\r\n     * <p>合理使用对象池，可以有效减少对象创建的开销，避免频繁的垃圾回收，从而优化游戏流畅度。</p>\r\n     */\r\nclass Pool {\r\n    /**\r\n     * 根据对象类型标识字符，获取对象池。\r\n     * @param sign 对象类型标识字符。\r\n     * @return 对象池。\r\n     */\r\n    static getPoolBySign(sign) {\r\n        return Pool._poolDic[sign] || (Pool._poolDic[sign] = []);\r\n    }\r\n    /**\r\n     * 清除对象池的对象。\r\n     * @param sign 对象类型标识字符。\r\n     */\r\n    static clearBySign(sign) {\r\n        if (Pool._poolDic[sign])\r\n            Pool._poolDic[sign].length = 0;\r\n    }\r\n    /**\r\n     * 将对象放到对应类型标识的对象池中。\r\n     * @param sign 对象类型标识字符。\r\n     * @param item 对象。\r\n     */\r\n    static recover(sign, item) {\r\n        if (item[Pool.POOLSIGN])\r\n            return;\r\n        item[Pool.POOLSIGN] = true;\r\n        Pool.getPoolBySign(sign).push(item);\r\n    }\r\n    /**\r\n     * 根据类名进行回收，如果类有类名才进行回收，没有则不回收\r\n     * @param\tinstance 类的具体实例\r\n     */\r\n    static recoverByClass(instance) {\r\n        if (instance) {\r\n            var className = instance[\"__className\"] || instance.constructor._$gid;\r\n            if (className)\r\n                Pool.recover(className, instance);\r\n        }\r\n    }\r\n    /**\r\n     * 返回类的唯一标识\r\n     */\r\n    static _getClassSign(cla) {\r\n        var className = cla[\"__className\"] || cla[\"_$gid\"];\r\n        if (!className) {\r\n            cla[\"_$gid\"] = className = _Utils__WEBPACK_IMPORTED_MODULE_0__[\"Utils\"].getGID() + \"\";\r\n        }\r\n        return className;\r\n    }\r\n    /**\r\n     * 根据类名回收类的实例\r\n     * @param\tinstance 类的具体实例\r\n     */\r\n    static createByClass(cls) {\r\n        return Pool.getItemByClass(Pool._getClassSign(cls), cls);\r\n    }\r\n    /**\r\n     * <p>根据传入的对象类型标识字符，获取对象池中此类型标识的一个对象实例。</p>\r\n     * <p>当对象池中无此类型标识的对象时，则根据传入的类型，创建一个新的对象返回。</p>\r\n     * @param sign 对象类型标识字符。\r\n     * @param cls 用于创建该类型对象的类。\r\n     * @return 此类型标识的一个对象。\r\n     */\r\n    static getItemByClass(sign, cls) {\r\n        if (!Pool._poolDic[sign])\r\n            return new cls();\r\n        var pool = Pool.getPoolBySign(sign);\r\n        if (pool.length) {\r\n            var rst = pool.pop();\r\n            rst[Pool.POOLSIGN] = false;\r\n        }\r\n        else {\r\n            rst = new cls();\r\n        }\r\n        return rst;\r\n    }\r\n    /**\r\n     * <p>根据传入的对象类型标识字符，获取对象池中此类型标识的一个对象实例。</p>\r\n     * <p>当对象池中无此类型标识的对象时，则使用传入的创建此类型对象的函数，新建一个对象返回。</p>\r\n     * @param sign 对象类型标识字符。\r\n     * @param createFun 用于创建该类型对象的方法。\r\n     * @param caller this对象\r\n     * @return 此类型标识的一个对象。\r\n     */\r\n    static getItemByCreateFun(sign, createFun, caller = null) {\r\n        var pool = Pool.getPoolBySign(sign);\r\n        var rst = pool.length ? pool.pop() : createFun.call(caller);\r\n        rst[Pool.POOLSIGN] = false;\r\n        return rst;\r\n    }\r\n    /**\r\n     * 根据传入的对象类型标识字符，获取对象池中已存储的此类型的一个对象，如果对象池中无此类型的对象，则返回 null 。\r\n     * @param sign 对象类型标识字符。\r\n     * @return 对象池中此类型的一个对象，如果对象池中无此类型的对象，则返回 null 。\r\n     */\r\n    static getItem(sign) {\r\n        var pool = Pool.getPoolBySign(sign);\r\n        var rst = pool.length ? pool.pop() : null;\r\n        if (rst) {\r\n            rst[Pool.POOLSIGN] = false;\r\n        }\r\n        return rst;\r\n    }\r\n}\r\n/**@private */\r\nPool.POOLSIGN = \"__InPool\";\r\n/**@private  对象存放池。*/\r\nPool._poolDic = {};\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/Pool.ts?");

/***/ }),

/***/ "./src/core/laya/utils/RunDriver.ts":
/*!******************************************!*\
  !*** ./src/core/laya/utils/RunDriver.ts ***!
  \******************************************/
/*! exports provided: RunDriver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RunDriver\", function() { return RunDriver; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _Browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../Config */ \"./src/core/Config.ts\");\n/* harmony import */ var _ColorUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ././ColorUtils */ \"./src/core/laya/utils/ColorUtils.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _renders_RenderSprite__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../renders/RenderSprite */ \"./src/core/laya/renders/RenderSprite.ts\");\n/* harmony import */ var _resource_Context__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../resource/Context */ \"./src/core/laya/resource/Context.ts\");\n/* harmony import */ var _resource_HTMLCanvas__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../resource/HTMLCanvas */ \"./src/core/laya/resource/HTMLCanvas.ts\");\n/* harmony import */ var _resource_Texture__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../resource/Texture */ \"./src/core/laya/resource/Texture.ts\");\n/* harmony import */ var _webgl_WebGL__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../webgl/WebGL */ \"./src/core/laya/webgl/WebGL.ts\");\n/* harmony import */ var _webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../webgl/WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n/* harmony import */ var _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../webgl/utils/RenderState2D */ \"./src/core/laya/webgl/utils/RenderState2D.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n */\r\nclass RunDriver {\r\n}\r\n//TODO:coverage\r\nRunDriver.createShaderCondition = function (conditionScript) {\r\n    var fn = \"(function() {return \" + conditionScript + \";})\";\r\n    return _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"]._runScript(fn); //生成条件判断函数\r\n};\r\nRunDriver.hanzi = new RegExp(\"^[\\u4E00-\\u9FA5]$\");\r\nRunDriver.fontMap = [];\r\nRunDriver.measureText = function (txt, font) {\r\n    var isChinese = RunDriver.hanzi.test(txt);\r\n    if (isChinese && RunDriver.fontMap[font]) {\r\n        return RunDriver.fontMap[font];\r\n    }\r\n    var ctx = _Browser__WEBPACK_IMPORTED_MODULE_1__[\"Browser\"].context;\r\n    ctx.font = font;\r\n    var r = ctx.measureText(txt);\r\n    if (isChinese)\r\n        RunDriver.fontMap[font] = r;\r\n    return r;\r\n};\r\n/**\r\n * @private\r\n * 绘制到画布。\r\n */\r\nRunDriver.drawToCanvas = function (sprite, _renderType, canvasWidth, canvasHeight, offsetX, offsetY) {\r\n    offsetX -= sprite.x;\r\n    offsetY -= sprite.y;\r\n    offsetX |= 0;\r\n    offsetY |= 0;\r\n    canvasWidth |= 0;\r\n    canvasHeight |= 0;\r\n    var ctx = new _resource_Context__WEBPACK_IMPORTED_MODULE_6__[\"Context\"]();\r\n    ctx.size(canvasWidth, canvasHeight);\r\n    ctx.asBitmap = true;\r\n    ctx._targets.start();\r\n    _renders_RenderSprite__WEBPACK_IMPORTED_MODULE_5__[\"RenderSprite\"].renders[_renderType]._fun(sprite, ctx, offsetX, offsetY);\r\n    ctx.flush();\r\n    ctx._targets.end();\r\n    ctx._targets.restore();\r\n    var dt = ctx._targets.getData(0, 0, canvasWidth, canvasHeight);\r\n    ctx.destroy();\r\n    var imgdata = new ImageData(canvasWidth, canvasHeight);\r\n    ; //创建空的imagedata。因为下面要翻转，所以不直接设置内容\r\n    //翻转getData的结果。\r\n    var lineLen = canvasWidth * 4;\r\n    var temp = new Uint8Array(lineLen);\r\n    var dst = imgdata.data;\r\n    var y = canvasHeight - 1;\r\n    var off = y * lineLen;\r\n    var srcoff = 0;\r\n    for (; y >= 0; y--) {\r\n        dst.set(dt.subarray(srcoff, srcoff + lineLen), off);\r\n        off -= lineLen;\r\n        srcoff += lineLen;\r\n    }\r\n    //imgdata.data.set(dt);\r\n    //画到2d画布上\r\n    var canv = new _resource_HTMLCanvas__WEBPACK_IMPORTED_MODULE_7__[\"HTMLCanvas\"](true);\r\n    canv.size(canvasWidth, canvasHeight);\r\n    var ctx2d = canv.getContext('2d');\r\n    ctx2d.putImageData(imgdata, 0, 0);\r\n    ;\r\n    return canv;\r\n};\r\nRunDriver.drawToTexture = function (sprite, _renderType, canvasWidth, canvasHeight, offsetX, offsetY) {\r\n    offsetX -= sprite.x;\r\n    offsetY -= sprite.y;\r\n    offsetX |= 0;\r\n    offsetY |= 0;\r\n    canvasWidth |= 0;\r\n    canvasHeight |= 0;\r\n    var ctx = new _resource_Context__WEBPACK_IMPORTED_MODULE_6__[\"Context\"]();\r\n    ctx.size(canvasWidth, canvasHeight);\r\n    ctx.asBitmap = true;\r\n    ctx._targets.start();\r\n    _renders_RenderSprite__WEBPACK_IMPORTED_MODULE_5__[\"RenderSprite\"].renders[_renderType]._fun(sprite, ctx, offsetX, offsetY);\r\n    ctx.flush();\r\n    ctx._targets.end();\r\n    ctx._targets.restore();\r\n    var rtex = new _resource_Texture__WEBPACK_IMPORTED_MODULE_8__[\"Texture\"](ctx._targets, _resource_Texture__WEBPACK_IMPORTED_MODULE_8__[\"Texture\"].INV_UV);\r\n    ctx.destroy(true); // 保留 _targets\r\n    return rtex;\r\n};\r\n/**\r\n * 用于改变 WebGL宽高信息。\r\n */\r\nRunDriver.changeWebGLSize = function (w, h) {\r\n    _webgl_WebGL__WEBPACK_IMPORTED_MODULE_9__[\"WebGL\"].onStageResize(w, h);\r\n};\r\n/** @private */\r\nRunDriver.clear = function (value) {\r\n    //修改需要同步到上面的native实现中\r\n    _resource_Context__WEBPACK_IMPORTED_MODULE_6__[\"Context\"].set2DRenderConfig(); //渲染2D前要还原2D状态,否则可能受3D影响\r\n    _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_11__[\"RenderState2D\"].worldScissorTest && _webgl_WebGL__WEBPACK_IMPORTED_MODULE_9__[\"WebGL\"].mainContext.disable(_webgl_WebGLContext__WEBPACK_IMPORTED_MODULE_10__[\"WebGLContext\"].SCISSOR_TEST);\r\n    var ctx = _renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].context;\r\n    //兼容浏览器\r\n    var c = (ctx._submits._length == 0 || _Config__WEBPACK_IMPORTED_MODULE_2__[\"Config\"].preserveDrawingBuffer) ? _ColorUtils__WEBPACK_IMPORTED_MODULE_3__[\"ColorUtils\"].create(value).arrColor : _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].stage._wgColor;\r\n    if (c)\r\n        ctx.clearBG(c[0], c[1], c[2], c[3]);\r\n    else\r\n        ctx.clearBG(0, 0, 0, 0);\r\n    _webgl_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_11__[\"RenderState2D\"].clear();\r\n};\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/RunDriver.ts?");

/***/ }),

/***/ "./src/core/laya/utils/SceneUtils.ts":
/*!*******************************************!*\
  !*** ./src/core/laya/utils/SceneUtils.ts ***!
  \*******************************************/
/*! exports provided: SceneUtils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SceneUtils\", function() { return SceneUtils; });\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _Pool__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././Pool */ \"./src/core/laya/utils/Pool.ts\");\n/* harmony import */ var _Const__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Const */ \"./src/core/laya/Const.ts\");\n/* harmony import */ var _components_Component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/Component */ \"./src/core/laya/components/Component.ts\");\n/* harmony import */ var _display_FrameAnimation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../display/FrameAnimation */ \"./src/core/laya/display/FrameAnimation.ts\");\n/* harmony import */ var _display_Node__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../display/Node */ \"./src/core/laya/display/Node.ts\");\n/* harmony import */ var _ClassUtils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ClassUtils */ \"./src/core/laya/utils/ClassUtils.ts\");\n/* harmony import */ var _WeakObject__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./WeakObject */ \"./src/core/laya/utils/WeakObject.ts\");\n/* harmony import */ var _net_Loader__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../net/Loader */ \"./src/core/laya/net/Loader.ts\");\n/* harmony import */ var _Handler__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Handler */ \"./src/core/laya/utils/Handler.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private 场景辅助类\r\n */\r\nclass SceneUtils {\r\n    /**\r\n     * @private 根据字符串，返回函数表达式\r\n     */\r\n    //TODO:coverage\r\n    static getBindFun(value) {\r\n        var fun = SceneUtils._funMap.get(value);\r\n        if (fun == null) {\r\n            var temp = \"\\\"\" + value + \"\\\"\";\r\n            temp = temp.replace(/^\"\\${|}\"$/g, \"\").replace(/\\${/g, \"\\\"+\").replace(/}/g, \"+\\\"\");\r\n            var str = \"(function(data){if(data==null)return;with(data){try{\\nreturn \" + temp + \"\\n}catch(e){}}})\";\r\n            fun = _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"]._runScript(str);\r\n            SceneUtils._funMap.set(value, fun);\r\n        }\r\n        return fun;\r\n    }\r\n    /**\r\n     * @private\r\n     * 通过视图数据创建视图。\r\n     * @param uiView 视图数据信息。\r\n     */\r\n    //TODO:coverage\r\n    static createByData(root, uiView) {\r\n        var tInitTool = InitTool.create();\r\n        //递归创建节点\r\n        root = SceneUtils.createComp(uiView, root, root, null, tInitTool);\r\n        root._setBit(_Const__WEBPACK_IMPORTED_MODULE_2__[\"Const\"].NOT_READY, true);\r\n        if (root.hasOwnProperty(\"_idMap\")) {\r\n            root[\"_idMap\"] = tInitTool._idMap;\r\n        }\r\n        //处理动画信息\r\n        if (uiView.animations) {\r\n            var anilist = [];\r\n            var animations = uiView.animations;\r\n            var i, len = animations.length;\r\n            var tAni;\r\n            var tAniO;\r\n            for (i = 0; i < len; i++) {\r\n                tAni = new _display_FrameAnimation__WEBPACK_IMPORTED_MODULE_4__[\"FrameAnimation\"]();\r\n                tAniO = animations[i];\r\n                tAni._setUp(tInitTool._idMap, tAniO);\r\n                root[tAniO.name] = tAni;\r\n                tAni._setControlNode(root);\r\n                switch (tAniO.action) {\r\n                    case 1:\r\n                        tAni.play(0, false);\r\n                        break;\r\n                    case 2:\r\n                        tAni.play(0, true);\r\n                        break;\r\n                }\r\n                anilist.push(tAni);\r\n            }\r\n            root._aniList = anilist;\r\n        }\r\n        //设置页面穿透\r\n        if (root._$componentType === \"Scene\" && root._width > 0 && uiView.props.hitTestPrior == null && !root.mouseThrough)\r\n            root.hitTestPrior = true;\r\n        //设置组件\r\n        tInitTool.beginLoad(root);\r\n        return root;\r\n    }\r\n    static createInitTool() {\r\n        return InitTool.create();\r\n    }\r\n    /**\r\n     * 根据UI数据实例化组件。\r\n     * @param uiView UI数据。\r\n     * @param comp 组件本体，如果为空，会新创建一个。\r\n     * @param view 组件所在的视图实例，用来注册var全局变量，如果值为空则不注册。\r\n     * @return 一个 Component 对象。\r\n     */\r\n    static createComp(uiView, comp = null, view = null, dataMap = null, initTool = null) {\r\n        if (uiView.type == \"Scene3D\" || uiView.type == \"Sprite3D\") {\r\n            var outBatchSprits = [];\r\n            var scene3D = _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"][\"Utils3D\"]._createSceneByJsonForMaker(uiView, outBatchSprits, initTool);\r\n            if (uiView.type == \"Sprite3D\")\r\n                _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"][\"StaticBatchManager\"].combine(scene3D, outBatchSprits);\r\n            else\r\n                _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"][\"StaticBatchManager\"].combine(null, outBatchSprits);\r\n            return scene3D;\r\n        }\r\n        comp = comp || SceneUtils.getCompInstance(uiView);\r\n        if (!comp) {\r\n            if (uiView.props && uiView.props.runtime)\r\n                console.warn(\"runtime not found:\" + uiView.props.runtime);\r\n            else\r\n                console.warn(\"can not create:\" + uiView.type);\r\n            return null;\r\n        }\r\n        var child = uiView.child;\r\n        if (child) {\r\n            var isList = comp[\"_$componentType\"] == \"List\";\r\n            for (var i = 0, n = child.length; i < n; i++) {\r\n                var node = child[i];\r\n                if (comp.hasOwnProperty(\"itemRender\") && (node.props.name == \"render\" || node.props.renderType === \"render\")) {\r\n                    //如果list的itemRender\r\n                    comp[\"itemRender\"] = node;\r\n                }\r\n                else if (node.type == \"Graphic\") {\r\n                    //绘制矢量图\r\n                    _ClassUtils__WEBPACK_IMPORTED_MODULE_6__[\"ClassUtils\"]._addGraphicsToSprite(node, comp);\r\n                }\r\n                else if (_ClassUtils__WEBPACK_IMPORTED_MODULE_6__[\"ClassUtils\"]._isDrawType(node.type)) {\r\n                    _ClassUtils__WEBPACK_IMPORTED_MODULE_6__[\"ClassUtils\"]._addGraphicToSprite(node, comp, true);\r\n                }\r\n                else {\r\n                    if (isList) {\r\n                        //收集数据绑定信息\r\n                        var arr = [];\r\n                        var tChild = SceneUtils.createComp(node, null, view, arr, initTool);\r\n                        if (arr.length)\r\n                            tChild[\"_$bindData\"] = arr;\r\n                    }\r\n                    else {\r\n                        tChild = SceneUtils.createComp(node, null, view, dataMap, initTool);\r\n                    }\r\n                    //处理脚本\r\n                    if (node.type == \"Script\") {\r\n                        if (tChild instanceof _components_Component__WEBPACK_IMPORTED_MODULE_3__[\"Component\"]) {\r\n                            comp._addComponentInstance(tChild);\r\n                        }\r\n                        else {\r\n                            //兼容老版本\r\n                            if (\"owner\" in tChild) {\r\n                                tChild[\"owner\"] = comp;\r\n                            }\r\n                            else if (\"target\" in tChild) {\r\n                                tChild[\"target\"] = comp;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (node.props.renderType == \"mask\" || node.props.name == \"mask\") {\r\n                        comp.mask = tChild;\r\n                    }\r\n                    else {\r\n                        tChild instanceof _display_Node__WEBPACK_IMPORTED_MODULE_5__[\"Node\"] && comp.addChild(tChild);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        var props = uiView.props;\r\n        for (var prop in props) {\r\n            var value = props[prop];\r\n            if (value instanceof String && (value.indexOf(\"@node:\") >= 0 || value.indexOf(\"@Prefab:\") >= 0)) {\r\n                if (initTool) {\r\n                    initTool.addNodeRef(comp, prop, value);\r\n                }\r\n            }\r\n            else\r\n                SceneUtils.setCompValue(comp, prop, value, view, dataMap);\r\n        }\r\n        if (comp._afterInited) {\r\n            //if (initTool) {\r\n            //initTool.addInitItem(comp);\r\n            //} else {\r\n            comp._afterInited();\r\n            //}\r\n        }\r\n        if (uiView.compId && initTool && initTool._idMap) {\r\n            initTool._idMap[uiView.compId] = comp;\r\n        }\r\n        return comp;\r\n    }\r\n    /**\r\n     * @private\r\n     * 设置组件的属性值。\r\n     * @param comp 组件实例。\r\n     * @param prop 属性名称。\r\n     * @param value 属性值。\r\n     * @param view 组件所在的视图实例，用来注册var全局变量，如果值为空则不注册。\r\n     */\r\n    static setCompValue(comp, prop, value, view = null, dataMap = null) {\r\n        //处理数据绑定\r\n        if (value instanceof String && value.indexOf(\"${\") > -1) {\r\n            SceneUtils._sheet || (SceneUtils._sheet = _ClassUtils__WEBPACK_IMPORTED_MODULE_6__[\"ClassUtils\"].getClass(\"laya.data.Table\"));\r\n            if (!SceneUtils._sheet) {\r\n                console.warn(\"Can not find class Sheet\");\r\n                return;\r\n            }\r\n            //list的item处理\r\n            if (dataMap) {\r\n                dataMap.push(comp, prop, value);\r\n            }\r\n            else if (view) {\r\n                if (value.indexOf(\"].\") == -1) {\r\n                    //TODO\r\n                    value = value.replace(\".\", \"[0].\");\r\n                }\r\n                var watcher = new DataWatcher(comp, prop, value);\r\n                //执行第一次数据赋值\r\n                watcher.exe(view);\r\n                var one, temp;\r\n                var str = value.replace(/\\[.*?\\]\\./g, \".\");\r\n                while ((one = SceneUtils._parseWatchData.exec(str)) != null) {\r\n                    var key1 = one[1];\r\n                    while ((temp = SceneUtils._parseKeyWord.exec(key1)) != null) {\r\n                        var key2 = temp[0];\r\n                        var arr = (view._watchMap[key2] || (view._watchMap[key2] = []));\r\n                        arr.push(watcher);\r\n                        //监听数据变化\r\n                        SceneUtils._sheet.I.notifer.on(key2, view, view.changeData, [key2]);\r\n                    }\r\n                    //TODO\r\n                    arr = (view._watchMap[key1] || (view._watchMap[key1] = []));\r\n                    arr.push(watcher);\r\n                    SceneUtils._sheet.I.notifer.on(key1, view, view.changeData, [key1]);\r\n                }\r\n                //trace(view._watchMap);\r\n            }\r\n            return;\r\n        }\r\n        if (prop === \"var\" && view) {\r\n            view[value] = comp;\r\n        }\r\n        else {\r\n            comp[prop] = (value === \"true\" ? true : (value === \"false\" ? false : value));\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 通过组建UI数据，获取组件实例。\r\n     * @param json UI数据。\r\n     * @return Component 对象。\r\n     */\r\n    static getCompInstance(json) {\r\n        if (json.type == \"UIView\") {\r\n            if (json.props && json.props.pageData) {\r\n                return SceneUtils.createByData(null, json.props.pageData);\r\n            }\r\n        }\r\n        var runtime = (json.props && json.props.runtime) || json.type;\r\n        var compClass = _ClassUtils__WEBPACK_IMPORTED_MODULE_6__[\"ClassUtils\"].getClass(runtime);\r\n        if (!compClass)\r\n            throw \"Can not find class \" + runtime;\r\n        if (json.type === \"Script\" && compClass.prototype._doAwake) {\r\n            var comp = _Pool__WEBPACK_IMPORTED_MODULE_1__[\"Pool\"].createByClass(compClass);\r\n            comp._destroyed = false;\r\n            return comp;\r\n        }\r\n        if (json.props && json.props.hasOwnProperty(\"renderType\") && json.props[\"renderType\"] == \"instance\") {\r\n            if (!compClass[\"instance\"])\r\n                compClass[\"instance\"] = new compClass();\r\n            return compClass[\"instance\"];\r\n        }\r\n        return new compClass();\r\n    }\r\n}\r\n/**@private */\r\nSceneUtils._funMap = new _WeakObject__WEBPACK_IMPORTED_MODULE_7__[\"WeakObject\"]();\r\n/**@private */\r\nSceneUtils._parseWatchData = /\\${(.*?)}/g;\r\n/**@private */\r\nSceneUtils._parseKeyWord = /[a-zA-Z_][a-zA-Z0-9_]*(?:(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)+)/g;\r\n\r\n\r\n/**\r\n * @private 场景辅助类\r\n */\r\nclass DataWatcher {\r\n    //TODO:coverage\r\n    constructor(comp, prop, value) {\r\n        this.comp = comp;\r\n        this.prop = prop;\r\n        this.value = value;\r\n    }\r\n    exe(view) {\r\n        var fun = SceneUtils.getBindFun(this.value);\r\n        this.comp[this.prop] = fun.call(this, view);\r\n    }\r\n}\r\n/**\r\n * @private 场景辅助类\r\n */\r\nclass InitTool {\r\n    //TODO:coverage\r\n    reset() {\r\n        this._nodeRefList = null;\r\n        this._initList = null;\r\n        this._idMap = null;\r\n        this._loadList = null;\r\n        this._scene = null;\r\n    }\r\n    //TODO:coverage\r\n    recover() {\r\n        this.reset();\r\n        _Pool__WEBPACK_IMPORTED_MODULE_1__[\"Pool\"].recover(\"InitTool\", this);\r\n    }\r\n    static create() {\r\n        var tool = _Pool__WEBPACK_IMPORTED_MODULE_1__[\"Pool\"].getItemByClass(\"InitTool\", InitTool);\r\n        tool._idMap = [];\r\n        return tool;\r\n    }\r\n    //TODO:coverage\r\n    addLoadRes(url, type = null) {\r\n        if (!this._loadList)\r\n            this._loadList = [];\r\n        if (!type) {\r\n            this._loadList.push(url);\r\n        }\r\n        else {\r\n            this._loadList.push({ url: url, type: type });\r\n        }\r\n    }\r\n    /**@private */\r\n    //TODO:coverage\r\n    addNodeRef(node, prop, referStr) {\r\n        if (!this._nodeRefList)\r\n            this._nodeRefList = [];\r\n        this._nodeRefList.push([node, prop, referStr]);\r\n        if (referStr.indexOf(\"@Prefab:\") >= 0) {\r\n            this.addLoadRes(referStr.replace(\"@Prefab:\", \"\"), _net_Loader__WEBPACK_IMPORTED_MODULE_8__[\"Loader\"].PREFAB);\r\n        }\r\n    }\r\n    /**@private */\r\n    //TODO:coverage\r\n    setNodeRef() {\r\n        if (!this._nodeRefList)\r\n            return;\r\n        if (!this._idMap) {\r\n            this._nodeRefList = null;\r\n            return;\r\n        }\r\n        var i, len;\r\n        len = this._nodeRefList.length;\r\n        var tRefInfo;\r\n        for (i = 0; i < len; i++) {\r\n            tRefInfo = this._nodeRefList[i];\r\n            tRefInfo[0][tRefInfo[1]] = this.getReferData(tRefInfo[2]);\r\n        }\r\n        this._nodeRefList = null;\r\n    }\r\n    /**@private */\r\n    //TODO:coverage\r\n    getReferData(referStr) {\r\n        if (referStr.indexOf(\"@Prefab:\") >= 0) {\r\n            var prefab;\r\n            prefab = _net_Loader__WEBPACK_IMPORTED_MODULE_8__[\"Loader\"].getRes(referStr.replace(\"@Prefab:\", \"\"));\r\n            return prefab;\r\n        }\r\n        else if (referStr.indexOf(\"@arr:\") >= 0) {\r\n            referStr = referStr.replace(\"@arr:\", \"\");\r\n            var list;\r\n            list = referStr.split(\",\");\r\n            var i, len;\r\n            var tStr;\r\n            len = list.length;\r\n            for (i = 0; i < len; i++) {\r\n                tStr = list[i];\r\n                if (tStr) {\r\n                    list[i] = this._idMap[tStr.replace(\"@node:\", \"\")];\r\n                }\r\n                else {\r\n                    list[i] = null;\r\n                }\r\n            }\r\n            return list;\r\n        }\r\n        else {\r\n            return this._idMap[referStr.replace(\"@node:\", \"\")];\r\n        }\r\n    }\r\n    /**@private */\r\n    //TODO:coverage\r\n    addInitItem(item) {\r\n        if (!this._initList)\r\n            this._initList = [];\r\n        this._initList.push(item);\r\n    }\r\n    /**@private */\r\n    //TODO:coverage\r\n    doInits() {\r\n        if (!this._initList)\r\n            return;\r\n        this._initList = null;\r\n    }\r\n    /**@private */\r\n    //TODO:coverage\r\n    finish() {\r\n        this.setNodeRef();\r\n        this.doInits();\r\n        this._scene._setBit(_Const__WEBPACK_IMPORTED_MODULE_2__[\"Const\"].NOT_READY, false);\r\n        if (this._scene.parent && this._scene.parent.activeInHierarchy && this._scene.active)\r\n            this._scene._processActive();\r\n        this._scene.event(\"onViewCreated\");\r\n        this.recover();\r\n    }\r\n    /**@private */\r\n    //TODO:coverage\r\n    beginLoad(scene) {\r\n        this._scene = scene;\r\n        if (!this._loadList || this._loadList.length < 1) {\r\n            this.finish();\r\n        }\r\n        else {\r\n            _Laya__WEBPACK_IMPORTED_MODULE_0__[\"Laya\"].loader.load(this._loadList, _Handler__WEBPACK_IMPORTED_MODULE_9__[\"Handler\"].create(this, this.finish));\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/SceneUtils.ts?");

/***/ }),

/***/ "./src/core/laya/utils/Stat.ts":
/*!*************************************!*\
  !*** ./src/core/laya/utils/Stat.ts ***!
  \*************************************/
/*! exports provided: Stat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Stat\", function() { return Stat; });\n/* harmony import */ var _Browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _display_Sprite__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../display/Sprite */ \"./src/core/laya/display/Sprite.ts\");\n/* harmony import */ var _display_Text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../display/Text */ \"./src/core/laya/display/Text.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _resource_HTMLCanvas__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../resource/HTMLCanvas */ \"./src/core/laya/resource/HTMLCanvas.ts\");\n/* harmony import */ var _resource_Resource__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../resource/Resource */ \"./src/core/laya/resource/Resource.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * <p> <code>Stat</code> 是一个性能统计面板，可以实时更新相关的性能参数。</p>\r\n * <p>参与统计的性能参数如下（所有参数都是每大约1秒进行更新）：<br/>\r\n * FPS(Canvas)/FPS(WebGL)：Canvas 模式或者 WebGL 模式下的帧频，也就是每秒显示的帧数，值越高、越稳定，感觉越流畅；<br/>\r\n * Sprite：统计所有渲染节点（包括容器）数量，它的大小会影响引擎进行节点遍历、数据组织和渲染的效率。其值越小，游戏运行效率越高；<br/>\r\n * DrawCall：此值是决定性能的重要指标，其值越小，游戏运行效率越高。Canvas模式下表示每大约1秒的图像绘制次数；WebGL模式下表示每大约1秒的渲染提交批次，每次准备数据并通知GPU渲染绘制的过程称为1次DrawCall，在每次DrawCall中除了在通知GPU的渲染上比较耗时之外，切换材质与shader也是非常耗时的操作；<br/>\r\n * CurMem：Canvas模式下，表示内存占用大小，值越小越好，过高会导致游戏闪退；WebGL模式下，表示内存与显存的占用，值越小越好；<br/>\r\n * Shader：是 WebGL 模式独有的性能指标，表示每大约1秒 Shader 提交次数，值越小越好；<br/>\r\n * Canvas：由三个数值组成，只有设置 CacheAs 后才会有值，默认为0/0/0。从左到右数值的意义分别为：每帧重绘的画布数量 / 缓存类型为\"normal\"类型的画布数量 / 缓存类型为\"bitmap\"类型的画布数量。</p>\r\n */\r\nclass Stat {\r\n    /**\r\n     * 显示性能统计信息。\r\n     * @param\tx X轴显示位置。\r\n     * @param\ty Y轴显示位置。\r\n     */\r\n    static show(x = 0, y = 0) {\r\n        if (!_Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].onMiniGame && !_Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].onLimixiu && !_renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp && !_Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].onBDMiniGame && !_Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].onKGMiniGame && !_Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].onQGMiniGame)\r\n            Stat._useCanvas = true;\r\n        Stat._show = true;\r\n        Stat._fpsData.length = 60;\r\n        Stat._view[0] = { title: \"FPS(Canvas)\", value: \"_fpsStr\", color: \"yellow\", units: \"int\" };\r\n        Stat._view[1] = { title: \"Sprite\", value: \"_spriteStr\", color: \"white\", units: \"int\" };\r\n        Stat._view[2] = { title: \"RenderBatches\", value: \"renderBatches\", color: \"white\", units: \"int\" };\r\n        Stat._view[3] = { title: \"SavedRenderBatches\", value: \"savedRenderBatches\", color: \"white\", units: \"int\" };\r\n        Stat._view[4] = { title: \"CPUMemory\", value: \"cpuMemory\", color: \"yellow\", units: \"M\" };\r\n        Stat._view[5] = { title: \"GPUMemory\", value: \"gpuMemory\", color: \"yellow\", units: \"M\" };\r\n        Stat._view[6] = { title: \"Shader\", value: \"shaderCall\", color: \"white\", units: \"int\" };\r\n        if (!_renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].is3DMode) {\r\n            Stat._view[0].title = \"FPS(WebGL)\";\r\n            Stat._view[7] = { title: \"Canvas\", value: \"_canvasStr\", color: \"white\", units: \"int\" };\r\n        }\r\n        else {\r\n            Stat._view[0].title = \"FPS(3D)\";\r\n            Stat._view[7] = { title: \"TriFaces\", value: \"trianglesFaces\", color: \"white\", units: \"int\" };\r\n            Stat._view[8] = { title: \"FrustumCulling\", value: \"frustumCulling\", color: \"white\", units: \"int\" };\r\n            Stat._view[9] = { title: \"OctreeNodeCulling\", value: \"octreeNodeCulling\", color: \"white\", units: \"int\" };\r\n        }\r\n        if (Stat._useCanvas) {\r\n            Stat.createUIPre(x, y);\r\n        }\r\n        else\r\n            Stat.createUI(x, y);\r\n        Stat.enable();\r\n    }\r\n    static createUIPre(x, y) {\r\n        var pixel = _Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].pixelRatio;\r\n        Stat._width = pixel * 180;\r\n        Stat._vx = pixel * 120;\r\n        Stat._height = pixel * (Stat._view.length * 12 + 3 * pixel) + 4;\r\n        Stat._fontSize = 12 * pixel;\r\n        for (var i = 0; i < Stat._view.length; i++) {\r\n            Stat._view[i].x = 4;\r\n            Stat._view[i].y = i * Stat._fontSize + 2 * pixel;\r\n        }\r\n        if (!Stat._canvas) {\r\n            Stat._canvas = new _resource_HTMLCanvas__WEBPACK_IMPORTED_MODULE_5__[\"HTMLCanvas\"](true);\r\n            Stat._canvas.size(Stat._width, Stat._height);\r\n            Stat._ctx = Stat._canvas.getContext('2d');\r\n            Stat._ctx.textBaseline = \"top\";\r\n            Stat._ctx.font = Stat._fontSize + \"px Arial\";\r\n            Stat._canvas.source.style.cssText = \"pointer-events:none;background:rgba(150,150,150,0.8);z-index:100000;position: absolute;direction:ltr;left:\" + x + \"px;top:\" + y + \"px;width:\" + (Stat._width / pixel) + \"px;height:\" + (Stat._height / pixel) + \"px;\";\r\n        }\r\n        if (!_Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].onKGMiniGame) {\r\n            _Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].container.appendChild(Stat._canvas.source);\r\n        }\r\n        Stat._first = true;\r\n        Stat.loop();\r\n        Stat._first = false;\r\n    }\r\n    static createUI(x, y) {\r\n        var stat = Stat._sp;\r\n        var pixel = _Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].pixelRatio;\r\n        if (!stat) {\r\n            stat = new _display_Sprite__WEBPACK_IMPORTED_MODULE_2__[\"Sprite\"]();\r\n            Stat._leftText = new _display_Text__WEBPACK_IMPORTED_MODULE_3__[\"Text\"]();\r\n            Stat._leftText.pos(5, 5);\r\n            Stat._leftText.color = \"#ffffff\";\r\n            stat.addChild(Stat._leftText);\r\n            Stat._txt = new _display_Text__WEBPACK_IMPORTED_MODULE_3__[\"Text\"]();\r\n            Stat._txt.pos(80 * pixel, 5);\r\n            Stat._txt.color = \"#ffffff\";\r\n            stat.addChild(Stat._txt);\r\n            Stat._sp = stat;\r\n        }\r\n        stat.pos(x, y);\r\n        var text = \"\";\r\n        for (var i = 0; i < Stat._view.length; i++) {\r\n            var one = Stat._view[i];\r\n            text += one.title + \"\\n\";\r\n        }\r\n        Stat._leftText.text = text;\r\n        //调整为合适大小和字体\t\t\t\r\n        var width = pixel * 138;\r\n        var height = pixel * (Stat._view.length * 12 + 3 * pixel) + 4;\r\n        Stat._txt.fontSize = Stat._fontSize * pixel;\r\n        Stat._leftText.fontSize = Stat._fontSize * pixel;\r\n        stat.size(width, height);\r\n        stat.graphics.clear();\r\n        stat.graphics.alpha(0.5);\r\n        stat.graphics.drawRect(0, 0, width, height, \"#999999\");\r\n        stat.graphics.alpha(2);\r\n        Stat.loop();\r\n    }\r\n    /**激活性能统计*/\r\n    static enable() {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.frameLoop(1, Stat, Stat.loop);\r\n    }\r\n    /**\r\n     * 隐藏性能统计信息。\r\n     */\r\n    static hide() {\r\n        Stat._show = false;\r\n        _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.clear(Stat, Stat.loop);\r\n        if (Stat._canvas) {\r\n            _Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].removeElement(Stat._canvas.source);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 清零性能统计计算相关的数据。\r\n     */\r\n    static clear() {\r\n        Stat.trianglesFaces = Stat.renderBatches = Stat.savedRenderBatches = Stat.shaderCall = Stat.spriteRenderUseCacheCount = Stat.frustumCulling = Stat.octreeNodeCulling = Stat.canvasNormal = Stat.canvasBitmap = Stat.canvasReCache = 0;\r\n    }\r\n    /**\r\n     * 点击性能统计显示区域的处理函数。\r\n     */\r\n    static set onclick(fn) {\r\n        if (Stat._sp) {\r\n            Stat._sp.on(\"click\", Stat._sp, fn);\r\n        }\r\n        if (Stat._canvas) {\r\n            Stat._canvas.source.onclick = fn;\r\n            Stat._canvas.source.style.pointerEvents = '';\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * 性能统计参数计算循环处理函数。\r\n     */\r\n    static loop() {\r\n        Stat._count++;\r\n        var timer = _Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].now();\r\n        if (timer - Stat._timer < 1000)\r\n            return;\r\n        var count = Stat._count;\r\n        //计算更精确的FPS值\r\n        Stat.FPS = Math.round((count * 1000) / (timer - Stat._timer));\r\n        if (Stat._show) {\r\n            //计算平均值\r\n            Stat.trianglesFaces = Math.round(Stat.trianglesFaces / count);\r\n            if (!Stat._useCanvas) {\r\n                Stat.renderBatches = Math.round(Stat.renderBatches / count) - 1;\r\n            }\r\n            else {\r\n                Stat.renderBatches = Math.round(Stat.renderBatches / count);\r\n            }\r\n            Stat.savedRenderBatches = Math.round(Stat.savedRenderBatches / count);\r\n            Stat.shaderCall = Math.round(Stat.shaderCall / count);\r\n            Stat.spriteRenderUseCacheCount = Math.round(Stat.spriteRenderUseCacheCount / count);\r\n            Stat.canvasNormal = Math.round(Stat.canvasNormal / count);\r\n            Stat.canvasBitmap = Math.round(Stat.canvasBitmap / count);\r\n            Stat.canvasReCache = Math.ceil(Stat.canvasReCache / count);\r\n            Stat.frustumCulling = Math.round(Stat.frustumCulling / count);\r\n            Stat.octreeNodeCulling = Math.round(Stat.octreeNodeCulling / count);\r\n            var delay = Stat.FPS > 0 ? Math.floor(1000 / Stat.FPS).toString() : \" \";\r\n            Stat._fpsStr = Stat.FPS + (Stat.renderSlow ? \" slow\" : \"\") + \" \" + delay;\r\n            if (Stat._useCanvas)\r\n                Stat._spriteStr = (Stat.spriteCount - 1) + (Stat.spriteRenderUseCacheCount ? (\"/\" + Stat.spriteRenderUseCacheCount) : '');\r\n            else\r\n                Stat._spriteStr = (Stat.spriteCount - 4) + (Stat.spriteRenderUseCacheCount ? (\"/\" + Stat.spriteRenderUseCacheCount) : '');\r\n            Stat._canvasStr = Stat.canvasReCache + \"/\" + Stat.canvasNormal + \"/\" + Stat.canvasBitmap;\r\n            Stat.cpuMemory = _resource_Resource__WEBPACK_IMPORTED_MODULE_6__[\"Resource\"].cpuMemory;\r\n            Stat.gpuMemory = _resource_Resource__WEBPACK_IMPORTED_MODULE_6__[\"Resource\"].gpuMemory;\r\n            if (Stat._useCanvas) {\r\n                Stat.renderInfoPre();\r\n            }\r\n            else\r\n                Stat.renderInfo();\r\n            Stat.clear();\r\n        }\r\n        Stat._count = 0;\r\n        Stat._timer = timer;\r\n    }\r\n    static renderInfoPre() {\r\n        var i = 0;\r\n        var one;\r\n        var value;\r\n        if (Stat._canvas) {\r\n            var ctx = Stat._ctx;\r\n            ctx.clearRect(Stat._first ? 0 : Stat._vx, 0, Stat._width, Stat._height);\r\n            for (i = 0; i < Stat._view.length; i++) {\r\n                one = Stat._view[i];\r\n                //只有第一次才渲染标题文字，减少文字渲染次数\r\n                if (Stat._first) {\r\n                    ctx.fillStyle = \"white\";\r\n                    ctx.fillText(one.title, one.x, one.y);\r\n                }\r\n                ctx.fillStyle = one.color;\r\n                value = Stat[one.value];\r\n                (one.units == \"M\") && (value = Math.floor(value / (1024 * 1024) * 100) / 100 + \" M\");\r\n                ctx.fillText(value + \"\", one.x + Stat._vx, one.y);\r\n            }\r\n        }\r\n    }\r\n    static renderInfo() {\r\n        var text = \"\";\r\n        for (var i = 0; i < Stat._view.length; i++) {\r\n            var one = Stat._view[i];\r\n            var value = Stat[one.value];\r\n            (one.units == \"M\") && (value = Math.floor(value / (1024 * 1024) * 100) / 100 + \" M\");\r\n            (one.units == \"K\") && (value = Math.floor(value / (1024) * 100) / 100 + \" K\");\r\n            text += value + \"\\n\";\r\n        }\r\n        Stat._txt.text = text;\r\n    }\r\n}\r\n/** 每秒帧数。*/\r\nStat.FPS = 0;\r\n/**主舞台 <code>Stage</code> 渲染次数计数。 */\r\nStat.loopCount = 0;\r\n/** 着色器请求次数。*/\r\nStat.shaderCall = 0;\r\n/** 渲染批次。*/\r\nStat.renderBatches = 0;\r\n/** 节省的渲染批次。*/\r\nStat.savedRenderBatches = 0;\r\n/** 三角形面数。*/\r\nStat.trianglesFaces = 0;\r\n/** 精灵<code>Sprite</code> 的数量。*/\r\nStat.spriteCount = 0;\r\n/** 精灵渲染使用缓存<code>Sprite</code> 的数量。*/\r\nStat.spriteRenderUseCacheCount = 0;\r\n/** 视锥剔除次数。*/\r\nStat.frustumCulling = 0;\r\n/**\t八叉树节点剔除次数。*/\r\nStat.octreeNodeCulling = 0;\r\n/** 画布 canvas 使用标准渲染的次数。*/\r\nStat.canvasNormal = 0;\r\n/** 画布 canvas 使用位图渲染的次数。*/\r\nStat.canvasBitmap = 0;\r\n/** 画布 canvas 缓冲区重绘次数。*/\r\nStat.canvasReCache = 0;\r\n/** 表示当前使用的是否为慢渲染模式。*/\r\nStat.renderSlow = false;\r\nStat._fpsData = [];\r\nStat._timer = 0;\r\nStat._count = 0;\r\nStat._view = [];\r\nStat._fontSize = 12;\r\n/**@private */\r\nStat._show = false;\r\nStat._useCanvas = false;\r\nStat._height = 100;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/Stat.ts?");

/***/ }),

/***/ "./src/core/laya/utils/StringKey.ts":
/*!******************************************!*\
  !*** ./src/core/laya/utils/StringKey.ts ***!
  \******************************************/
/*! exports provided: StringKey */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"StringKey\", function() { return StringKey; });\n/**\r\n     * @private\r\n     * <code>StringKey</code> 类用于存取字符串对应的数字。\r\n     */\r\nclass StringKey {\r\n    constructor() {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        this._strsToID = {};\r\n        this._idToStrs = [];\r\n        this._length = 0;\r\n    }\r\n    //TODO:\r\n    /**\r\n     * 添加一个字符。\r\n     * @param\tstr 字符，将作为key 存储相应生成的数字。\r\n     * @return 此字符对应的数字。\r\n     */\r\n    //TODO:coverage\r\n    add(str) {\r\n        var index = this._strsToID[str];\r\n        if (index != null)\r\n            return index;\r\n        this._idToStrs[this._length] = str;\r\n        return this._strsToID[str] = this._length++;\r\n    }\r\n    /**\r\n     * 获取指定字符对应的ID。\r\n     * @param\tstr 字符。\r\n     * @return 此字符对应的ID。\r\n     */\r\n    //TODO:coverage\r\n    getID(str) {\r\n        var index = this._strsToID[str];\r\n        return index == null ? -1 : index;\r\n    }\r\n    /**\r\n     * 根据指定ID获取对应字符。\r\n     * @param  id ID。\r\n     * @return 此id对应的字符。\r\n     */\r\n    //TODO:coverage\r\n    getName(id) {\r\n        var str = this._idToStrs[id];\r\n        return str == null ? undefined : str;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/StringKey.ts?");

/***/ }),

/***/ "./src/core/laya/utils/Timer.ts":
/*!**************************************!*\
  !*** ./src/core/laya/utils/Timer.ts ***!
  \**************************************/
/*! exports provided: Timer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Timer\", function() { return Timer; });\n/* harmony import */ var _Browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ././Utils */ \"./src/core/laya/utils/Utils.ts\");\n/* harmony import */ var _CallLater__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ././CallLater */ \"./src/core/laya/utils/CallLater.ts\");\n\r\n\r\n\r\n\r\n/**\r\n     * <code>Timer</code> 是时钟管理类。它是一个单例，不要手动实例化此类，应该通过 Laya.timer 访问。\r\n     */\r\nclass Timer {\r\n    /**\r\n     * 创建 <code>Timer</code> 类的一个实例。\r\n     */\r\n    constructor(autoActive = true) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        /** 时针缩放。*/\r\n        this.scale = 1;\r\n        /** 当前帧开始的时间。*/\r\n        this.currTimer = _Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].now();\r\n        /** 当前的帧数。*/\r\n        this.currFrame = 0;\r\n        /**@private 两帧之间的时间间隔,单位毫秒。*/\r\n        this._delta = 0;\r\n        /**@private */\r\n        this._lastTimer = _Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].now();\r\n        /**@private */\r\n        this._map = [];\r\n        /**@private */\r\n        this._handlers = [];\r\n        /**@private */\r\n        this._temp = [];\r\n        /**@private */\r\n        this._count = 0;\r\n        autoActive && _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer && _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.frameLoop(1, this, this._update);\r\n    }\r\n    /**两帧之间的时间间隔,单位毫秒。*/\r\n    get delta() {\r\n        return this._delta;\r\n    }\r\n    /**\r\n     * @private\r\n     * 帧循环处理函数。\r\n     */\r\n    _update() {\r\n        if (this.scale <= 0) {\r\n            this._lastTimer = _Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].now();\r\n            return;\r\n        }\r\n        var frame = this.currFrame = this.currFrame + this.scale;\r\n        var now = _Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].now();\r\n        this._delta = (now - this._lastTimer) * this.scale;\r\n        var timer = this.currTimer = this.currTimer + this._delta;\r\n        this._lastTimer = now;\r\n        //处理handler\r\n        var handlers = this._handlers;\r\n        this._count = 0;\r\n        for (var i = 0, n = handlers.length; i < n; i++) {\r\n            var handler = handlers[i];\r\n            if (handler.method !== null) {\r\n                var t = handler.userFrame ? frame : timer;\r\n                if (t >= handler.exeTime) {\r\n                    if (handler.repeat) {\r\n                        if (!handler.jumpFrame) {\r\n                            handler.exeTime += handler.delay;\r\n                            handler.run(false);\r\n                            if (t > handler.exeTime) {\r\n                                //如果执行一次后还能再执行，做跳出处理，如果想用多次执行，需要设置jumpFrame=true\r\n                                handler.exeTime += Math.ceil((t - handler.exeTime) / handler.delay) * handler.delay;\r\n                            }\r\n                        }\r\n                        else {\r\n                            while (t >= handler.exeTime) {\r\n                                handler.exeTime += handler.delay;\r\n                                handler.run(false);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        handler.run(true);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this._count++;\r\n            }\r\n        }\r\n        if (this._count > 30 || frame % 200 === 0)\r\n            this._clearHandlers();\r\n    }\r\n    /** @private */\r\n    _clearHandlers() {\r\n        var handlers = this._handlers;\r\n        for (var i = 0, n = handlers.length; i < n; i++) {\r\n            var handler = handlers[i];\r\n            if (handler.method !== null)\r\n                this._temp.push(handler);\r\n            else\r\n                this._recoverHandler(handler);\r\n        }\r\n        this._handlers = this._temp;\r\n        handlers.length = 0;\r\n        this._temp = handlers;\r\n    }\r\n    /** @private */\r\n    _recoverHandler(handler) {\r\n        if (this._map[handler.key] == handler)\r\n            this._map[handler.key] = null;\r\n        handler.clear();\r\n        Timer._pool.push(handler);\r\n    }\r\n    /** @private */\r\n    _create(useFrame, repeat, delay, caller, method, args, coverBefore) {\r\n        //如果延迟为0，则立即执行\r\n        if (!delay) {\r\n            method.apply(caller, args);\r\n            return null;\r\n        }\r\n        //先覆盖相同函数的计时\r\n        if (coverBefore) {\r\n            var handler = this._getHandler(caller, method);\r\n            if (handler) {\r\n                handler.repeat = repeat;\r\n                handler.userFrame = useFrame;\r\n                handler.delay = delay;\r\n                handler.caller = caller;\r\n                handler.method = method;\r\n                handler.args = args;\r\n                handler.exeTime = delay + (useFrame ? this.currFrame : this.currTimer + _Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].now() - this._lastTimer);\r\n                return handler;\r\n            }\r\n        }\r\n        //找到一个空闲的timerHandler\r\n        handler = Timer._pool.length > 0 ? Timer._pool.pop() : new TimerHandler();\r\n        handler.repeat = repeat;\r\n        handler.userFrame = useFrame;\r\n        handler.delay = delay;\r\n        handler.caller = caller;\r\n        handler.method = method;\r\n        handler.args = args;\r\n        handler.exeTime = delay + (useFrame ? this.currFrame : this.currTimer + _Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].now() - this._lastTimer);\r\n        //索引handler\r\n        this._indexHandler(handler);\r\n        //插入数组\r\n        this._handlers.push(handler);\r\n        return handler;\r\n    }\r\n    /** @private */\r\n    _indexHandler(handler) {\r\n        var caller = handler.caller;\r\n        var method = handler.method;\r\n        var cid = caller ? caller.$_GID || (caller.$_GID = _Utils__WEBPACK_IMPORTED_MODULE_2__[\"Utils\"].getGID()) : 0;\r\n        var mid = method.$_TID || (method.$_TID = (Timer._mid++) * 100000);\r\n        handler.key = cid + mid;\r\n        this._map[handler.key] = handler;\r\n    }\r\n    /**\r\n     * 定时执行一次。\r\n     * @param\tdelay\t延迟时间(单位为毫秒)。\r\n     * @param\tcaller\t执行域(this)。\r\n     * @param\tmethod\t定时器回调函数。\r\n     * @param\targs\t回调参数。\r\n     * @param\tcoverBefore\t是否覆盖之前的延迟执行，默认为 true 。\r\n     */\r\n    once(delay, caller, method, args = null, coverBefore = true) {\r\n        this._create(false, false, delay, caller, method, args, coverBefore);\r\n    }\r\n    /**\r\n     * 定时重复执行。\r\n     * @param\tdelay\t间隔时间(单位毫秒)。\r\n     * @param\tcaller\t执行域(this)。\r\n     * @param\tmethod\t定时器回调函数。\r\n     * @param\targs\t回调参数。\r\n     * @param\tcoverBefore\t是否覆盖之前的延迟执行，默认为 true 。\r\n     * @param\tjumpFrame 时钟是否跳帧。基于时间的循环回调，单位时间间隔内，如能执行多次回调，出于性能考虑，引擎默认只执行一次，设置jumpFrame=true后，则回调会连续执行多次\r\n     */\r\n    loop(delay, caller, method, args = null, coverBefore = true, jumpFrame = false) {\r\n        var handler = this._create(false, true, delay, caller, method, args, coverBefore);\r\n        if (handler)\r\n            handler.jumpFrame = jumpFrame;\r\n    }\r\n    /**\r\n     * 定时执行一次(基于帧率)。\r\n     * @param\tdelay\t延迟几帧(单位为帧)。\r\n     * @param\tcaller\t执行域(this)。\r\n     * @param\tmethod\t定时器回调函数。\r\n     * @param\targs\t回调参数。\r\n     * @param\tcoverBefore\t是否覆盖之前的延迟执行，默认为 true 。\r\n     */\r\n    frameOnce(delay, caller, method, args = null, coverBefore = true) {\r\n        this._create(true, false, delay, caller, method, args, coverBefore);\r\n    }\r\n    /**\r\n     * 定时重复执行(基于帧率)。\r\n     * @param\tdelay\t间隔几帧(单位为帧)。\r\n     * @param\tcaller\t执行域(this)。\r\n     * @param\tmethod\t定时器回调函数。\r\n     * @param\targs\t回调参数。\r\n     * @param\tcoverBefore\t是否覆盖之前的延迟执行，默认为 true 。\r\n     */\r\n    frameLoop(delay, caller, method, args = null, coverBefore = true) {\r\n        this._create(true, true, delay, caller, method, args, coverBefore);\r\n    }\r\n    /** 返回统计信息。*/\r\n    toString() {\r\n        return \" handlers:\" + this._handlers.length + \" pool:\" + Timer._pool.length;\r\n    }\r\n    /**\r\n     * 清理定时器。\r\n     * @param\tcaller 执行域(this)。\r\n     * @param\tmethod 定时器回调函数。\r\n     */\r\n    clear(caller, method) {\r\n        var handler = this._getHandler(caller, method);\r\n        if (handler) {\r\n            this._map[handler.key] = null;\r\n            handler.key = 0;\r\n            handler.clear();\r\n        }\r\n    }\r\n    /**\r\n     * 清理对象身上的所有定时器。\r\n     * @param\tcaller 执行域(this)。\r\n     */\r\n    clearAll(caller) {\r\n        if (!caller)\r\n            return;\r\n        for (var i = 0, n = this._handlers.length; i < n; i++) {\r\n            var handler = this._handlers[i];\r\n            if (handler.caller === caller) {\r\n                this._map[handler.key] = null;\r\n                handler.key = 0;\r\n                handler.clear();\r\n            }\r\n        }\r\n    }\r\n    /** @private */\r\n    _getHandler(caller, method) {\r\n        var cid = caller ? caller.$_GID || (caller.$_GID = _Utils__WEBPACK_IMPORTED_MODULE_2__[\"Utils\"].getGID()) : 0;\r\n        var mid = method.$_TID || (method.$_TID = (Timer._mid++) * 100000);\r\n        return this._map[cid + mid];\r\n    }\r\n    /**\r\n     * 延迟执行。\r\n     * @param\tcaller 执行域(this)。\r\n     * @param\tmethod 定时器回调函数。\r\n     * @param\targs 回调参数。\r\n     */\r\n    callLater(caller, method, args = null) {\r\n        _CallLater__WEBPACK_IMPORTED_MODULE_3__[\"CallLater\"].I.callLater(caller, method, args);\r\n    }\r\n    /**\r\n     * 立即执行 callLater 。\r\n     * @param\tcaller 执行域(this)。\r\n     * @param\tmethod 定时器回调函数。\r\n     */\r\n    runCallLater(caller, method) {\r\n        _CallLater__WEBPACK_IMPORTED_MODULE_3__[\"CallLater\"].I.runCallLater(caller, method);\r\n    }\r\n    /**\r\n     * 立即提前执行定时器，执行之后从队列中删除\r\n     * @param\tcaller 执行域(this)。\r\n     * @param\tmethod 定时器回调函数。\r\n     */\r\n    runTimer(caller, method) {\r\n        var handler = this._getHandler(caller, method);\r\n        if (handler && handler.method != null) {\r\n            this._map[handler.key] = null;\r\n            handler.run(true);\r\n        }\r\n    }\r\n    /**\r\n     * 暂停时钟\r\n     */\r\n    pause() {\r\n        this.scale = 0;\r\n    }\r\n    /**\r\n     * 恢复时钟\r\n     */\r\n    resume() {\r\n        this.scale = 1;\r\n    }\r\n}\r\n/**@private */\r\nTimer._pool = [];\r\n/**@private */\r\nTimer._mid = 1;\r\n/** @private */\r\nclass TimerHandler {\r\n    clear() {\r\n        this.caller = null;\r\n        this.method = null;\r\n        this.args = null;\r\n    }\r\n    run(withClear) {\r\n        var caller = this.caller;\r\n        if (caller && caller.destroyed)\r\n            return this.clear();\r\n        var method = this.method;\r\n        var args = this.args;\r\n        withClear && this.clear();\r\n        if (method == null)\r\n            return;\r\n        args ? method.apply(caller, args) : method.call(caller);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/Timer.ts?");

/***/ }),

/***/ "./src/core/laya/utils/Tween.ts":
/*!**************************************!*\
  !*** ./src/core/laya/utils/Tween.ts ***!
  \**************************************/
/*! exports provided: Tween */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Tween\", function() { return Tween; });\n/* harmony import */ var _Pool__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Pool */ \"./src/core/laya/utils/Pool.ts\");\n/* harmony import */ var _Browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ././Utils */ \"./src/core/laya/utils/Utils.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n\r\n\r\n\r\n\r\n/**\r\n     * <code>Tween</code>  是一个缓动类。使用此类能够实现对目标对象属性的渐变。\r\n     */\r\nclass Tween {\r\n    constructor() {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        /**@private 唯一标识，TimeLintLite用到*/\r\n        this.gid = 0;\r\n        /**重播次数，如果repeat=0，则表示无限循环播放*/\r\n        this.repeat = 1;\r\n        /**当前播放次数*/\r\n        this._count = 0;\r\n    }\r\n    /**\r\n     * 缓动对象的props属性到目标值。\r\n     * @param\ttarget 目标对象(即将更改属性值的对象)。\r\n     * @param\tprops 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。\r\n     * @param\tduration 花费的时间，单位毫秒。\r\n     * @param\tease 缓动类型，默认为匀速运动。\r\n     * @param\tcomplete 结束回调函数。\r\n     * @param\tdelay 延迟执行时间。\r\n     * @param\tcoverBefore 是否覆盖之前的缓动。\r\n     * @param\tautoRecover 是否自动回收，默认为true，缓动结束之后自动回收到对象池。\r\n     * @return\t返回Tween对象。\r\n     */\r\n    static to(target, props, duration, ease = null, complete = null, delay = 0, coverBefore = false, autoRecover = true) {\r\n        return _Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"tween\", Tween)._create(target, props, duration, ease, complete, delay, coverBefore, true, autoRecover, true);\r\n    }\r\n    /**\r\n     * 从props属性，缓动到当前状态。\r\n     * @param\ttarget 目标对象(即将更改属性值的对象)。\r\n     * @param\tprops 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。\r\n     * @param\tduration 花费的时间，单位毫秒。\r\n     * @param\tease 缓动类型，默认为匀速运动。\r\n     * @param\tcomplete 结束回调函数。\r\n     * @param\tdelay 延迟执行时间。\r\n     * @param\tcoverBefore 是否覆盖之前的缓动。\r\n     * @param\tautoRecover 是否自动回收，默认为true，缓动结束之后自动回收到对象池。\r\n     * @return\t返回Tween对象。\r\n     */\r\n    static from(target, props, duration, ease = null, complete = null, delay = 0, coverBefore = false, autoRecover = true) {\r\n        return _Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].getItemByClass(\"tween\", Tween)._create(target, props, duration, ease, complete, delay, coverBefore, false, autoRecover, true);\r\n    }\r\n    /**\r\n     * 缓动对象的props属性到目标值。\r\n     * @param\ttarget 目标对象(即将更改属性值的对象)。\r\n     * @param\tprops 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。\r\n     * @param\tduration 花费的时间，单位毫秒。\r\n     * @param\tease 缓动类型，默认为匀速运动。\r\n     * @param\tcomplete 结束回调函数。\r\n     * @param\tdelay 延迟执行时间。\r\n     * @param\tcoverBefore 是否覆盖之前的缓动。\r\n     * @return\t返回Tween对象。\r\n     */\r\n    to(target, props, duration, ease = null, complete = null, delay = 0, coverBefore = false) {\r\n        return this._create(target, props, duration, ease, complete, delay, coverBefore, true, false, true);\r\n    }\r\n    /**\r\n     * 从props属性，缓动到当前状态。\r\n     * @param\ttarget 目标对象(即将更改属性值的对象)。\r\n     * @param\tprops 变化的属性列表，比如{x:100,y:20,ease:Ease.backOut,complete:Handler.create(this,onComplete),update:new Handler(this,onComplete)}。\r\n     * @param\tduration 花费的时间，单位毫秒。\r\n     * @param\tease 缓动类型，默认为匀速运动。\r\n     * @param\tcomplete 结束回调函数。\r\n     * @param\tdelay 延迟执行时间。\r\n     * @param\tcoverBefore 是否覆盖之前的缓动。\r\n     * @return\t返回Tween对象。\r\n     */\r\n    from(target, props, duration, ease = null, complete = null, delay = 0, coverBefore = false) {\r\n        return this._create(target, props, duration, ease, complete, delay, coverBefore, false, false, true);\r\n    }\r\n    /** @private */\r\n    _create(target, props, duration, ease, complete, delay, coverBefore, isTo, usePool, runNow) {\r\n        if (!target)\r\n            throw new Error(\"Tween:target is null\");\r\n        this._target = target;\r\n        this._duration = duration;\r\n        this._ease = ease || props.ease || Tween.easeNone;\r\n        this._complete = complete || props.complete;\r\n        this._delay = delay;\r\n        this._props = [];\r\n        this._usedTimer = 0;\r\n        this._startTimer = _Browser__WEBPACK_IMPORTED_MODULE_1__[\"Browser\"].now();\r\n        this._usedPool = usePool;\r\n        this._delayParam = null;\r\n        this.update = props.update;\r\n        //判断是否覆盖\t\t\t\r\n        var gid = (target.$_GID || (target.$_GID = _Utils__WEBPACK_IMPORTED_MODULE_2__[\"Utils\"].getGID()));\r\n        if (!Tween.tweenMap[gid]) {\r\n            Tween.tweenMap[gid] = [this];\r\n        }\r\n        else {\r\n            if (coverBefore)\r\n                Tween.clearTween(target);\r\n            Tween.tweenMap[gid].push(this);\r\n        }\r\n        if (runNow) {\r\n            if (delay <= 0)\r\n                this.firstStart(target, props, isTo);\r\n            else {\r\n                this._delayParam = [target, props, isTo];\r\n                _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].timer.once(delay, this, this.firstStart, this._delayParam);\r\n            }\r\n        }\r\n        else {\r\n            this._initProps(target, props, isTo);\r\n        }\r\n        return this;\r\n    }\r\n    firstStart(target, props, isTo) {\r\n        this._delayParam = null;\r\n        if (target.destroyed) {\r\n            this.clear();\r\n            return;\r\n        }\r\n        this._initProps(target, props, isTo);\r\n        this._beginLoop();\r\n    }\r\n    _initProps(target, props, isTo) {\r\n        //初始化属性\r\n        for (var p in props) {\r\n            if (target[p] instanceof Number) {\r\n                var start = isTo ? target[p] : props[p];\r\n                var end = isTo ? props[p] : target[p];\r\n                this._props.push([p, start, end - start]);\r\n                if (!isTo)\r\n                    target[p] = start;\r\n            }\r\n        }\r\n    }\r\n    _beginLoop() {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].timer.frameLoop(1, this, this._doEase);\r\n    }\r\n    /**执行缓动**/\r\n    _doEase() {\r\n        this._updateEase(_Browser__WEBPACK_IMPORTED_MODULE_1__[\"Browser\"].now());\r\n    }\r\n    /**@private */\r\n    _updateEase(time) {\r\n        var target = this._target;\r\n        if (!target)\r\n            return;\r\n        //如果对象被销毁，则立即停止缓动\r\n        if (target.destroyed)\r\n            return Tween.clearTween(target);\r\n        var usedTimer = this._usedTimer = time - this._startTimer - this._delay;\r\n        if (usedTimer < 0)\r\n            return;\r\n        if (usedTimer >= this._duration)\r\n            return this.complete();\r\n        var ratio = usedTimer > 0 ? this._ease(usedTimer, 0, 1, this._duration) : 0;\r\n        var props = this._props;\r\n        for (var i, n = props.length; i < n; i++) {\r\n            var prop = props[i];\r\n            target[prop[0]] = prop[1] + (ratio * prop[2]);\r\n        }\r\n        if (this.update)\r\n            this.update.run();\r\n    }\r\n    /**设置当前执行比例**/\r\n    set progress(v) {\r\n        var uTime = v * this._duration;\r\n        this._startTimer = _Browser__WEBPACK_IMPORTED_MODULE_1__[\"Browser\"].now() - this._delay - uTime;\r\n    }\r\n    /**\r\n     * 立即结束缓动并到终点。\r\n     */\r\n    complete() {\r\n        if (!this._target)\r\n            return;\r\n        //立即执行初始化\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].timer.runTimer(this, this.firstStart);\r\n        //缓存当前属性\r\n        var target = this._target;\r\n        var props = this._props;\r\n        var handler = this._complete;\r\n        //设置终点属性\r\n        for (var i, n = props.length; i < n; i++) {\r\n            var prop = props[i];\r\n            target[prop[0]] = prop[1] + prop[2];\r\n        }\r\n        if (this.update)\r\n            this.update.run();\r\n        this._count++;\r\n        if (this.repeat != 0 && this._count >= this.repeat) {\r\n            //清理\r\n            this.clear();\r\n            //回调\r\n            handler && handler.run();\r\n        }\r\n        else {\r\n            this.restart();\r\n        }\r\n    }\r\n    /**\r\n     * 暂停缓动，可以通过resume或restart重新开始。\r\n     */\r\n    pause() {\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].timer.clear(this, this._beginLoop);\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].timer.clear(this, this._doEase);\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].timer.clear(this, this.firstStart);\r\n        var time = _Browser__WEBPACK_IMPORTED_MODULE_1__[\"Browser\"].now();\r\n        var dTime;\r\n        dTime = time - this._startTimer - this._delay;\r\n        if (dTime < 0) {\r\n            this._usedTimer = dTime;\r\n        }\r\n    }\r\n    /**\r\n     * 设置开始时间。\r\n     * @param\tstartTime 开始时间。\r\n     */\r\n    setStartTime(startTime) {\r\n        this._startTimer = startTime;\r\n    }\r\n    /**\r\n     * 清理指定目标对象上的所有缓动。\r\n     * @param\ttarget 目标对象。\r\n     */\r\n    static clearAll(target) {\r\n        if (!target || !target.$_GID)\r\n            return;\r\n        var tweens = Tween.tweenMap[target.$_GID];\r\n        if (tweens) {\r\n            for (var i, n = tweens.length; i < n; i++) {\r\n                tweens[i]._clear();\r\n            }\r\n            tweens.length = 0;\r\n        }\r\n    }\r\n    /**\r\n     * 清理某个缓动。\r\n     * @param\ttween 缓动对象。\r\n     */\r\n    static clear(tween) {\r\n        tween.clear();\r\n    }\r\n    /**@private 同clearAll，废弃掉，尽量别用。*/\r\n    static clearTween(target) {\r\n        Tween.clearAll(target);\r\n    }\r\n    /**\r\n     * 停止并清理当前缓动。\r\n     */\r\n    clear() {\r\n        if (this._target) {\r\n            this._remove();\r\n            this._clear();\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _clear() {\r\n        this.pause();\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].timer.clear(this, this.firstStart);\r\n        this._complete = null;\r\n        this._target = null;\r\n        this._ease = null;\r\n        this._props = null;\r\n        this._delayParam = null;\r\n        if (this._usedPool) {\r\n            this.update = null;\r\n            _Pool__WEBPACK_IMPORTED_MODULE_0__[\"Pool\"].recover(\"tween\", this);\r\n        }\r\n    }\r\n    /** 回收到对象池。*/\r\n    recover() {\r\n        this._usedPool = true;\r\n        this._clear();\r\n    }\r\n    _remove() {\r\n        var tweens = Tween.tweenMap[this._target.$_GID];\r\n        if (tweens) {\r\n            for (var i, n = tweens.length; i < n; i++) {\r\n                if (tweens[i] === this) {\r\n                    tweens.splice(i, 1);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 重新开始暂停的缓动。\r\n     */\r\n    restart() {\r\n        this.pause();\r\n        this._usedTimer = 0;\r\n        this._startTimer = _Browser__WEBPACK_IMPORTED_MODULE_1__[\"Browser\"].now();\r\n        if (this._delayParam) {\r\n            _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].timer.once(this._delay, this, this.firstStart, this._delayParam);\r\n            return;\r\n        }\r\n        var props = this._props;\r\n        for (var i, n = props.length; i < n; i++) {\r\n            var prop = props[i];\r\n            this._target[prop[0]] = prop[1];\r\n        }\r\n        _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].timer.once(this._delay, this, this._beginLoop);\r\n    }\r\n    /**\r\n     * 恢复暂停的缓动。\r\n     */\r\n    resume() {\r\n        if (this._usedTimer >= this._duration)\r\n            return;\r\n        this._startTimer = _Browser__WEBPACK_IMPORTED_MODULE_1__[\"Browser\"].now() - this._usedTimer - this._delay;\r\n        if (this._delayParam) {\r\n            if (this._usedTimer < 0) {\r\n                _Laya__WEBPACK_IMPORTED_MODULE_3__[\"Laya\"].timer.once(-this._usedTimer, this, this.firstStart, this._delayParam);\r\n            }\r\n            else {\r\n                this.firstStart.apply(this, this._delayParam);\r\n            }\r\n        }\r\n        else {\r\n            this._beginLoop();\r\n        }\r\n    }\r\n    static easeNone(t, b, c, d) {\r\n        return c * t / d + b;\r\n    }\r\n}\r\n/**@private */\r\nTween.tweenMap = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/Tween.ts?");

/***/ }),

/***/ "./src/core/laya/utils/Utils.ts":
/*!**************************************!*\
  !*** ./src/core/laya/utils/Utils.ts ***!
  \**************************************/
/*! exports provided: Utils */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Utils\", function() { return Utils; });\n/* harmony import */ var _RunDriver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././RunDriver */ \"./src/core/laya/utils/RunDriver.ts\");\n/* harmony import */ var _Browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _maths_Point__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../maths/Point */ \"./src/core/laya/maths/Point.ts\");\n/* harmony import */ var _maths_Rectangle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../maths/Rectangle */ \"./src/core/laya/maths/Rectangle.ts\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * <code>Utils</code> 是工具类。\r\n */\r\nclass Utils {\r\n    /**\r\n     * 角度转弧度。\r\n     * @param\tangle 角度值。\r\n     * @return\t返回弧度值。\r\n     */\r\n    static toRadian(angle) {\r\n        return angle * Utils._pi2;\r\n    }\r\n    /**\r\n     * 弧度转换为角度。\r\n     * @param\tradian 弧度值。\r\n     * @return\t返回角度值。\r\n     */\r\n    static toAngle(radian) {\r\n        return radian * Utils._pi;\r\n    }\r\n    /**\r\n     * 将传入的 uint 类型颜色值转换为字符串型颜色值。\r\n     * @param color 颜色值。\r\n     * @return 字符串型颜色值。\r\n     */\r\n    static toHexColor(color) {\r\n        if (color < 0 || isNaN(color))\r\n            return null;\r\n        var str = color.toString(16);\r\n        while (str.length < 6)\r\n            str = \"0\" + str;\r\n        return \"#\" + str;\r\n    }\r\n    /**获取一个全局唯一ID。*/\r\n    static getGID() {\r\n        return Utils._gid++;\r\n    }\r\n    /**\r\n     * @private\r\n     * <p>连接数组。和array的concat相比，此方法不创建新对象</p>\r\n     * <b>注意：</b>若 参数 a 不为空，则会改变参数 source 的值为连接后的数组。\r\n     * @param\tsource 待连接的数组目标对象。\r\n     * @param\tarray 待连接的数组对象。\r\n     * @return 连接后的数组。\r\n     */\r\n    static concatArray(source, array) {\r\n        if (!array)\r\n            return source;\r\n        if (!source)\r\n            return array;\r\n        var i, len = array.length;\r\n        for (i = 0; i < len; i++) {\r\n            source.push(array[i]);\r\n        }\r\n        return source;\r\n    }\r\n    /**\r\n     * @private\r\n     * 清空数组对象。\r\n     * @param\tarray 数组。\r\n     * @return\t清空后的 array 对象。\r\n     */\r\n    static clearArray(array) {\r\n        if (!array)\r\n            return array;\r\n        array.length = 0;\r\n        return array;\r\n    }\r\n    /**\r\n     * @private\r\n     * 清空source数组，复制array数组的值。\r\n     * @param\tsource 需要赋值的数组。\r\n     * @param\tarray 新的数组值。\r\n     * @return \t复制后的数据 source 。\r\n     */\r\n    static copyArray(source, array) {\r\n        source || (source = []);\r\n        if (!array)\r\n            return source;\r\n        source.length = array.length;\r\n        var i, len = array.length;\r\n        for (i = 0; i < len; i++) {\r\n            source[i] = array[i];\r\n        }\r\n        return source;\r\n    }\r\n    /**\r\n     * @private\r\n     * 根据传入的显示对象 <code>Sprite</code> 和此显示对象上的 两个点，返回此对象上的两个点在舞台坐标系上组成的最小的矩形区域对象。\r\n     * @param\tsprite 显示对象 <code>Sprite</code>。\r\n     * @param\tx0\t点一的 X 轴坐标点。\r\n     * @param\ty0\t点一的 Y 轴坐标点。\r\n     * @param\tx1\t点二的 X 轴坐标点。\r\n     * @param\ty1\t点二的 Y 轴坐标点。\r\n     * @return 两个点在舞台坐标系组成的矩形对象 <code>Rectangle</code>。\r\n     */\r\n    static getGlobalRecByPoints(sprite, x0, y0, x1, y1) {\r\n        var newLTPoint;\r\n        newLTPoint = _maths_Point__WEBPACK_IMPORTED_MODULE_3__[\"Point\"].create().setTo(x0, y0);\r\n        newLTPoint = sprite.localToGlobal(newLTPoint);\r\n        var newRBPoint;\r\n        newRBPoint = _maths_Point__WEBPACK_IMPORTED_MODULE_3__[\"Point\"].create().setTo(x1, y1);\r\n        newRBPoint = sprite.localToGlobal(newRBPoint);\r\n        var rst = _maths_Rectangle__WEBPACK_IMPORTED_MODULE_4__[\"Rectangle\"]._getWrapRec([newLTPoint.x, newLTPoint.y, newRBPoint.x, newRBPoint.y]);\r\n        newLTPoint.recover();\r\n        newRBPoint.recover();\r\n        return rst;\r\n    }\r\n    /**\r\n     * 计算传入的显示对象 <code>Sprite</code> 的全局坐标系的坐标和缩放值，返回 <code>Rectangle</code> 对象存放计算出的坐标X值、Y值、ScaleX值、ScaleY值。\r\n     * @param\tsprite <code>Sprite</code> 对象。\r\n     * @return  矩形对象 <code>Rectangle</code>\r\n     */\r\n    static getGlobalPosAndScale(sprite) {\r\n        return Utils.getGlobalRecByPoints(sprite, 0, 0, 1, 1);\r\n    }\r\n    /**\r\n     * 给传入的函数绑定作用域，返回绑定后的函数。\r\n     * @param\tfun 函数对象。\r\n     * @param\tscope 函数作用域。\r\n     * @return 绑定后的函数。\r\n     */\r\n    static bind(fun, scope) {\r\n        var rst = fun;\r\n        rst = fun.bind(scope);\r\n        ;\r\n        return rst;\r\n    }\r\n    /**\r\n     * 测量文本在指定样式下的宽度、高度信息。\r\n     * @param\ttxt 文本内容。\r\n     * @param\tfont 文本字体样式。\r\n     * @return 文本的宽高信息对象。如：{width:xxx,height:xxx}\r\n     */\r\n    static measureText(txt, font) {\r\n        return _RunDriver__WEBPACK_IMPORTED_MODULE_0__[\"RunDriver\"].measureText(txt, font);\r\n    }\r\n    /**\r\n     * @private\r\n     * 对传入的数组列表，根据子项的属性 Z 值进行重新排序。返回是否已重新排序的 Boolean 值。\r\n     * @param\tarray 子对象数组。\r\n     * @return\tBoolean 值，表示是否已重新排序。\r\n     */\r\n    static updateOrder(array) {\r\n        if (!array || array.length < 2)\r\n            return false;\r\n        var i = 1, j, len = array.length, key, c;\r\n        while (i < len) {\r\n            j = i;\r\n            c = array[j];\r\n            key = array[j]._zOrder;\r\n            while (--j > -1) {\r\n                if (array[j]._zOrder > key)\r\n                    array[j + 1] = array[j];\r\n                else\r\n                    break;\r\n            }\r\n            array[j + 1] = c;\r\n            i++;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @private\r\n     * 批量移动点坐标。\r\n     * @param points 坐标列表。\r\n     * @param x x轴偏移量。\r\n     * @param y y轴偏移量。\r\n     */\r\n    static transPointList(points, x, y) {\r\n        var i, len = points.length;\r\n        for (i = 0; i < len; i += 2) {\r\n            points[i] += x;\r\n            points[i + 1] += y;\r\n        }\r\n    }\r\n    /**\r\n     * 解析一个字符串，并返回一个整数。和JS原生的parseInt不同：如果str为空或者非数字，原生返回NaN，这里返回0。\r\n     * @param\tstr\t\t要被解析的字符串。\r\n     * @param\tradix\t表示要解析的数字的基数。默认值为0，表示10进制，其他值介于 2 ~ 36 之间。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。如果该参数不在上述范围内，则此方法返回 0。\r\n     * @return\t返回解析后的数字。\r\n     */\r\n    static parseInt(str, radix = 0) {\r\n        var result = _Browser__WEBPACK_IMPORTED_MODULE_1__[\"Browser\"].window.parseInt(str, radix);\r\n        if (isNaN(result))\r\n            return 0;\r\n        return result;\r\n    }\r\n    /**@private */\r\n    static getFileExtension(path) {\r\n        Utils._extReg.lastIndex = path.lastIndexOf(\".\");\r\n        var result = Utils._extReg.exec(path);\r\n        if (result && result.length > 1) {\r\n            return result[1].toLowerCase();\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * 获取指定区域内相对于窗口左上角的transform。\r\n     * @param\tcoordinateSpace\t坐标空间，不能是Stage引用\r\n     * @param\tx\t\t\t\t相对于coordinateSpace的x坐标\r\n     * @param\ty\t\t\t\t相对于coordinateSpace的y坐标\r\n     * @return\r\n     */\r\n    static getTransformRelativeToWindow(coordinateSpace, x, y) {\r\n        var stage = _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage;\r\n        // coordinateSpace的全局缩放、坐标\r\n        var globalTransform = Utils.getGlobalPosAndScale(coordinateSpace);\r\n        // canvas的transform矩阵\r\n        var canvasMatrix = stage._canvasTransform.clone();\r\n        // 在矩阵变化前前记录的canvas的坐标\r\n        var canvasLeft = canvasMatrix.tx;\r\n        var canvasTop = canvasMatrix.ty;\r\n        // 把矩阵转回0度，得到正确的画布缩放比\r\n        canvasMatrix.rotate(-Math.PI / 180 * _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage.canvasDegree);\r\n        // 组合画布缩放和舞台适配缩放\r\n        canvasMatrix.scale(_Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage.clientScaleX, _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage.clientScaleY);\r\n        // 画布是否处于正常角度的垂直角度，-90或90度\r\n        var perpendicular = (_Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage.canvasDegree % 180 != 0);\r\n        var tx, ty;\r\n        if (perpendicular) {\r\n            // 在舞台上的坐标\r\n            tx = y + globalTransform.y;\r\n            ty = x + globalTransform.x;\r\n            // 在画布上的坐标\r\n            tx *= canvasMatrix.d;\r\n            ty *= canvasMatrix.a;\r\n            // 设置了screenMode = horizontal\r\n            if (_Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage.canvasDegree == 90) {\r\n                // 在浏览器窗口上的坐标\r\n                // 此时画布的left是视觉上的right，画布的left是视觉上的top\r\n                tx = canvasLeft - tx;\r\n                ty += canvasTop;\r\n            }\r\n            // screenMode = vertical并且设备在横屏状态，画布旋转-90度\r\n            else {\r\n                // 在浏览器窗口上的坐标\r\n                // 此时画布的left是视觉上的left，画布的top是视觉上的bottom\r\n                tx += canvasLeft;\r\n                ty = canvasTop - ty;\r\n            }\r\n        }\r\n        // 没有canvas旋转\r\n        else {\r\n            // 在舞台上的坐标\r\n            tx = x + globalTransform.x;\r\n            ty = y + globalTransform.y;\r\n            // 在画布上的坐标\r\n            tx *= canvasMatrix.a;\r\n            ty *= canvasMatrix.d;\r\n            // 在浏览器窗口上的坐标\r\n            tx += canvasLeft;\r\n            ty += canvasTop;\r\n        }\r\n        // Safari兼容\r\n        ty += _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage['_safariOffsetY'];\r\n        // 组合画布缩放和舞台适配缩放以及显示对象缩放，得到DOM原因的缩放因子\r\n        var domScaleX, domScaleY;\r\n        if (perpendicular) {\r\n            domScaleX = canvasMatrix.d * globalTransform.height;\r\n            domScaleY = canvasMatrix.a * globalTransform.width;\r\n        }\r\n        else {\r\n            domScaleX = canvasMatrix.a * globalTransform.width;\r\n            domScaleY = canvasMatrix.d * globalTransform.height;\r\n        }\r\n        return { x: tx, y: ty, scaleX: domScaleX, scaleY: domScaleY };\r\n    }\r\n    /**\r\n     * 使DOM元素使用舞台内的某块区域内。\r\n     * @param\tdom\t\t\t\tDOM元素引用\r\n     * @param\tcoordinateSpace\t坐标空间，不能是Stage引用\r\n     * @param\tx\t\t\t\t相对于coordinateSpace的x坐标\r\n     * @param\ty\t\t\t\t相对于coordinateSpace的y坐标\r\n     * @param\twidth\t\t\t宽度\r\n     * @param\theight\t\t\t高度\r\n     */\r\n    static fitDOMElementInArea(dom, coordinateSpace, x, y, width, height) {\r\n        if (!dom._fitLayaAirInitialized) {\r\n            dom._fitLayaAirInitialized = true;\r\n            dom.style.transformOrigin = dom.style.webKittransformOrigin = \"left top\";\r\n            dom.style.position = \"absolute\";\r\n        }\r\n        var transform = Utils.getTransformRelativeToWindow(coordinateSpace, x, y);\r\n        // 设置dom样式\r\n        dom.style.transform = dom.style.webkitTransform = \"scale(\" + transform.scaleX + \",\" + transform.scaleY + \") rotate(\" + (_Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage.canvasDegree) + \"deg)\";\r\n        dom.style.width = width + 'px';\r\n        dom.style.height = height + 'px';\r\n        dom.style.left = transform.x + 'px';\r\n        dom.style.top = transform.y + 'px';\r\n    }\r\n    /**\r\n     * @private\r\n     * 是否是可用的Texture数组\r\n     * @param\ttextureList\r\n     * @return\r\n     */\r\n    static isOkTextureList(textureList) {\r\n        if (!textureList)\r\n            return false;\r\n        var i, len = textureList.length;\r\n        var tTexture;\r\n        for (i = 0; i < len; i++) {\r\n            tTexture = textureList[i];\r\n            if (!tTexture || !tTexture._getSource())\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @private\r\n     * 是否是可用的绘图指令数组\r\n     * @param\tcmds\r\n     * @return\r\n     */\r\n    static isOKCmdList(cmds) {\r\n        //todo 改成适应新版cmd版本\r\n        if (!cmds)\r\n            return false;\r\n        var i, len = cmds.length;\r\n        //var context:RenderContext = Render._context;\r\n        var cmd;\r\n        var tex;\r\n        for (i = 0; i < len; i++) {\r\n            cmd = cmds[i];\r\n            //switch(cmd.callee)\r\n            //{\r\n            //case context._drawTexture: \r\n            //case context._fillTexture: \r\n            //case context._drawTextureWithTransform: \r\n            //tex = cmd[0];\r\n            //if (!tex || !tex.source) return false;\r\n            //\r\n            //}\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * 获得URL参数值\r\n     * @param\tname 参数名称\r\n     * @return\t参数值\r\n     */\r\n    static getQueryString(name) {\r\n        if (_Browser__WEBPACK_IMPORTED_MODULE_1__[\"Browser\"].onMiniGame)\r\n            return null;\r\n        if (!window.location || !window.location.search)\r\n            return null;\r\n        var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\r\n        var r = window.location.search.substr(1).match(reg);\r\n        if (r != null)\r\n            return unescape(r[2]);\r\n        return null;\r\n    }\r\n}\r\n/**@private */\r\nUtils._gid = 1;\r\n/**@private */\r\nUtils._pi = 180 / Math.PI;\r\n/**@private */\r\nUtils._pi2 = Math.PI / 180;\r\n/**@private */\r\nUtils._extReg = /\\.(\\w+)\\??/g;\r\n/**\r\n * 将字符串解析成 XML 对象。\r\n * @param value 需要解析的字符串。\r\n * @return js原生的XML对象。\r\n */\r\nUtils.parseXMLFromString = function (value) {\r\n    var rst;\r\n    value = value.replace(/>\\s+</g, '><');\r\n    rst = (new DOMParser()).parseFromString(value, 'text/xml');\r\n    if (rst.firstChild.textContent.indexOf(\"This page contains the following errors\") > -1) {\r\n        throw new Error(rst.firstChild.firstChild.textContent);\r\n    }\r\n    return rst;\r\n};\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/Utils.ts?");

/***/ }),

/***/ "./src/core/laya/utils/VectorGraphManager.ts":
/*!***************************************************!*\
  !*** ./src/core/laya/utils/VectorGraphManager.ts ***!
  \***************************************************/
/*! exports provided: VectorGraphManager */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VectorGraphManager\", function() { return VectorGraphManager; });\n/* harmony import */ var _CacheManger__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CacheManger */ \"./src/core/laya/utils/CacheManger.ts\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ \"./src/core/laya/utils/Utils.ts\");\n\r\n\r\n/**\r\n * @private\r\n * TODO:\r\n */\r\nclass VectorGraphManager {\r\n    constructor() {\r\n        this.useDic = {};\r\n        this.shapeDic = {};\r\n        this.shapeLineDic = {};\r\n        this._id = 0;\r\n        this._checkKey = false;\r\n        this._freeIdArray = [];\r\n        _CacheManger__WEBPACK_IMPORTED_MODULE_0__[\"CacheManger\"].regCacheByFunction(_Utils__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].bind(this.startDispose, this), _Utils__WEBPACK_IMPORTED_MODULE_1__[\"Utils\"].bind(this.getCacheList, this));\r\n    }\r\n    static getInstance() {\r\n        return VectorGraphManager.instance = VectorGraphManager.instance || new VectorGraphManager();\r\n    }\r\n    /**\r\n     * 得到个空闲的ID\r\n     * @return\r\n     */\r\n    getId() {\r\n        //if (_freeIdArray.length > 0) {\r\n        //return _freeIdArray.pop();\r\n        //}\r\n        return this._id++;\r\n    }\r\n    /**\r\n     * 添加一个图形到列表中\r\n     * @param\tid\r\n     * @param\tshape\r\n     */\r\n    addShape(id, shape) {\r\n        this.shapeDic[id] = shape;\r\n        if (!this.useDic[id]) {\r\n            this.useDic[id] = true;\r\n        }\r\n    }\r\n    /**\r\n     * 添加一个线图形到列表中\r\n     * @param\tid\r\n     * @param\tLine\r\n     */\r\n    addLine(id, Line) {\r\n        this.shapeLineDic[id] = Line;\r\n        if (!this.shapeLineDic[id]) {\r\n            this.shapeLineDic[id] = true;\r\n        }\r\n    }\r\n    /**\r\n     * 检测一个对象是否在使用中\r\n     * @param\tid\r\n     */\r\n    getShape(id) {\r\n        if (this._checkKey) {\r\n            if (this.useDic[id] != null) {\r\n                this.useDic[id] = true;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 删除一个图形对象\r\n     * @param\tid\r\n     */\r\n    deleteShape(id) {\r\n        if (this.shapeDic[id]) {\r\n            this.shapeDic[id] = null;\r\n            delete this.shapeDic[id];\r\n        }\r\n        if (this.shapeLineDic[id]) {\r\n            this.shapeLineDic[id] = null;\r\n            delete this.shapeLineDic[id];\r\n        }\r\n        if (this.useDic[id] != null) {\r\n            delete this.useDic[id];\r\n        }\r\n        //_freeIdArray.push(id);\r\n    }\r\n    /**\r\n     * 得到缓存列表\r\n     * @return\r\n     */\r\n    getCacheList() {\r\n        var str;\r\n        var list = [];\r\n        for (str in this.shapeDic) {\r\n            list.push(this.shapeDic[str]);\r\n        }\r\n        for (str in this.shapeLineDic) {\r\n            list.push(this.shapeLineDic[str]);\r\n        }\r\n        return list;\r\n    }\r\n    /**\r\n     * 开始清理状态，准备销毁\r\n     */\r\n    startDispose(key) {\r\n        var str;\r\n        for (str in this.useDic) {\r\n            this.useDic[str] = false;\r\n        }\r\n        this._checkKey = true;\r\n    }\r\n    /**\r\n     * 确认销毁\r\n     */\r\n    endDispose() {\r\n        if (this._checkKey) {\r\n            var str;\r\n            for (str in this.useDic) {\r\n                if (!this.useDic[str]) {\r\n                    this.deleteShape(str);\r\n                }\r\n            }\r\n            this._checkKey = false;\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/VectorGraphManager.ts?");

/***/ }),

/***/ "./src/core/laya/utils/WeakObject.ts":
/*!*******************************************!*\
  !*** ./src/core/laya/utils/WeakObject.ts ***!
  \*******************************************/
/*! exports provided: WeakObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WeakObject\", function() { return WeakObject; });\n/* harmony import */ var _Browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ././Utils */ \"./src/core/laya/utils/Utils.ts\");\n\r\n\r\n\r\n/**\r\n     * 封装弱引用WeakMap\r\n     * 如果支持WeakMap，则使用WeakMap，如果不支持，则用Object代替\r\n     * 注意：如果采用Object，为了防止内存泄漏，则采用定时清理缓存策略\r\n     */\r\nclass WeakObject {\r\n    constructor() {\r\n        this._obj = WeakObject.supportWeakMap ? new _Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].window.WeakMap() : {};\r\n        if (!WeakObject.supportWeakMap)\r\n            WeakObject._maps.push(this);\r\n    }\r\n    /**@private */\r\n    static __init__() {\r\n        WeakObject.supportWeakMap = _Browser__WEBPACK_IMPORTED_MODULE_0__[\"Browser\"].window.WeakMap != null;\r\n        //如果不支持，10分钟回收一次\r\n        if (!WeakObject.supportWeakMap)\r\n            _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].systemTimer.loop(WeakObject.delInterval, null, WeakObject.clearCache);\r\n    }\r\n    /**清理缓存，回收内存*/\r\n    //TODO:coverage\r\n    static clearCache() {\r\n        for (var i = 0, n = WeakObject._maps.length; i < n; i++) {\r\n            var obj = WeakObject._maps[i];\r\n            obj._obj = {};\r\n        }\r\n    }\r\n    /**\r\n     * 设置缓存\r\n     * @param\tkey kye对象，可被回收\r\n     * @param\tvalue object对象，可被回收\r\n     */\r\n    set(key, value) {\r\n        if (key == null)\r\n            return;\r\n        if (WeakObject.supportWeakMap) {\r\n            var objKey = key;\r\n            if (key instanceof String || key instanceof Number) {\r\n                objKey = WeakObject._keys[key];\r\n                if (!objKey)\r\n                    objKey = WeakObject._keys[key] = { k: key };\r\n            }\r\n            this._obj.set(objKey, value);\r\n        }\r\n        else {\r\n            if (key instanceof String || key instanceof Number) {\r\n                this._obj[key] = value;\r\n            }\r\n            else {\r\n                key.$_GID || (key.$_GID = _Utils__WEBPACK_IMPORTED_MODULE_2__[\"Utils\"].getGID());\r\n                this._obj[key.$_GID] = value;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 获取缓存\r\n     * @param\tkey kye对象，可被回收\r\n     */\r\n    get(key) {\r\n        if (key == null)\r\n            return null;\r\n        if (WeakObject.supportWeakMap) {\r\n            var objKey = (key instanceof String || key instanceof Number) ? WeakObject._keys[key] : key;\r\n            if (!objKey)\r\n                return null;\r\n            return this._obj.get(objKey);\r\n        }\r\n        else {\r\n            if (key instanceof String || key instanceof Number)\r\n                return this._obj[key];\r\n            return this._obj[key.$_GID];\r\n        }\r\n    }\r\n    /**\r\n     * 删除缓存\r\n     */\r\n    //TODO:coverage\r\n    del(key) {\r\n        if (key == null)\r\n            return;\r\n        if (WeakObject.supportWeakMap) {\r\n            var objKey = (key instanceof String || key instanceof Number) ? WeakObject._keys[key] : key;\r\n            if (!objKey)\r\n                return;\r\n            this._obj.delete(objKey);\r\n        }\r\n        else {\r\n            if (key instanceof String || key instanceof Number)\r\n                delete this._obj[key];\r\n            else\r\n                delete this._obj[this._obj.$_GID];\r\n        }\r\n    }\r\n    /**\r\n     * 是否有缓存\r\n     */\r\n    //TODO:coverage\r\n    has(key) {\r\n        if (key == null)\r\n            return false;\r\n        if (WeakObject.supportWeakMap) {\r\n            var objKey = (key instanceof String || key instanceof Number) ? WeakObject._keys[key] : key;\r\n            return this._obj.has(objKey);\r\n        }\r\n        else {\r\n            if (key instanceof String || key instanceof Number)\r\n                return this._obj[key] != null;\r\n            return this._obj[this._obj.$_GID] != null;\r\n        }\r\n    }\r\n}\r\n/**如果不支持WeakMap，则多少时间清理一次缓存，默认10分钟清理一次*/\r\nWeakObject.delInterval = 10 * 60 * 1000;\r\n/**全局WeakObject单例*/\r\nWeakObject.I = new WeakObject();\r\n/**@private */\r\nWeakObject._keys = {};\r\n/**@private */\r\nWeakObject._maps = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/WeakObject.ts?");

/***/ }),

/***/ "./src/core/laya/utils/WordText.ts":
/*!*****************************************!*\
  !*** ./src/core/laya/utils/WordText.ts ***!
  \*****************************************/
/*! exports provided: WordText */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WordText\", function() { return WordText; });\n/**\r\n     * @private\r\n     */\r\nclass WordText {\r\n    constructor() {\r\n        this.save = [];\r\n        this.toUpperCase = null;\r\n        this.width = -1; //整个WordText的长度。-1表示没有计算还。\r\n        this.pageChars = []; //把本对象的字符按照texture分组保存的文字信息。里面又是一个数组。具体含义见使用的地方。\r\n        this.startID = 0; //上面的是个数组，但是可能前面都是空的，加个起始位置\r\n        this.startIDStroke = 0;\r\n        this.lastGCCnt = 0; //如果文字gc了，需要检查缓存是否有效，这里记录上次检查对应的gc值。\r\n        this.splitRender = false; // 强制拆分渲染\r\n    }\r\n    setText(txt) {\r\n        this.changed = true;\r\n        this._text = txt;\r\n        this.width = -1;\r\n        this.cleanCache();\r\n        //pageChars = [];//需要重新更新\r\n    }\r\n    //TODO:coverage\r\n    toString() {\r\n        return this._text;\r\n    }\r\n    get length() {\r\n        return this._text ? this._text.length : 0;\r\n    }\r\n    //TODO:coverage\r\n    charCodeAt(i) {\r\n        return this._text ? this._text.charCodeAt(i) : NaN;\r\n    }\r\n    //TODO:coverage\r\n    charAt(i) {\r\n        return this._text ? this._text.charAt(i) : null;\r\n    }\r\n    /**\r\n     * 自己主动清理缓存，需要把关联的贴图删掉\r\n     * 不做也可以，textrender会自动清理不用的\r\n     * TODO 重用\r\n     */\r\n    cleanCache() {\r\n        // 如果是独占文字贴图的，需要删掉\r\n        this.pageChars.forEach(function (p) {\r\n            var tex = p.tex;\r\n            var words = p.words;\r\n            if (p.words.length == 1 && tex && tex.ri) { // 如果有ri表示是独立贴图\r\n                tex.destroy();\r\n            }\r\n        });\r\n        this.pageChars = [];\r\n        this.startID = 0;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/utils/WordText.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/BufferState2D.ts":
/*!**********************************************!*\
  !*** ./src/core/laya/webgl/BufferState2D.ts ***!
  \**********************************************/
/*! exports provided: BufferState2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BufferState2D\", function() { return BufferState2D; });\n/* harmony import */ var _BufferStateBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././BufferStateBase */ \"./src/core/laya/webgl/BufferStateBase.ts\");\n\r\n/**\r\n     * ...\r\n     * @author ...\r\n     */\r\nclass BufferState2D extends _BufferStateBase__WEBPACK_IMPORTED_MODULE_0__[\"BufferStateBase\"] {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/BufferState2D.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/BufferStateBase.ts":
/*!************************************************!*\
  !*** ./src/core/laya/webgl/BufferStateBase.ts ***!
  \************************************************/
/*! exports provided: BufferStateBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BufferStateBase\", function() { return BufferStateBase; });\n/* harmony import */ var _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../layagl/LayaGL */ \"./src/core/laya/layagl/LayaGL.ts\");\n\r\n/**\r\n * ...\r\n * @author ...\r\n */\r\nclass BufferStateBase {\r\n    constructor() {\r\n        this._nativeVertexArrayObject = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.createVertexArray();\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    bind() {\r\n        if (BufferStateBase._curBindedBufferState !== this) {\r\n            _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.bindVertexArray(this._nativeVertexArrayObject);\r\n            BufferStateBase._curBindedBufferState = this;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    unBind() {\r\n        if (BufferStateBase._curBindedBufferState === this) {\r\n            _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.bindVertexArray(null);\r\n            BufferStateBase._curBindedBufferState = null;\r\n        }\r\n        else {\r\n            throw \"BufferState: must call bind() function first.\";\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    bindForNative() {\r\n        _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.bindVertexArray(this._nativeVertexArrayObject);\r\n        BufferStateBase._curBindedBufferState = this;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    unBindForNative() {\r\n        _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.bindVertexArray(null);\r\n        BufferStateBase._curBindedBufferState = null;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    destroy() {\r\n        _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.deleteVertexArray(this._nativeVertexArrayObject);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/BufferStateBase.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/WebGL.ts":
/*!**************************************!*\
  !*** ./src/core/laya/webgl/WebGL.ts ***!
  \**************************************/
/*! exports provided: WebGL */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WebGL\", function() { return WebGL; });\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n/* harmony import */ var _display_Stage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../display/Stage */ \"./src/core/laya/display/Stage.ts\");\n/* harmony import */ var _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../layagl/LayaGL */ \"./src/core/laya/layagl/LayaGL.ts\");\n/* harmony import */ var _layagl_LayaGLRunner__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../layagl/LayaGLRunner */ \"./src/core/laya/layagl/LayaGLRunner.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _renders_RenderSprite__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../renders/RenderSprite */ \"./src/core/laya/renders/RenderSprite.ts\");\n/* harmony import */ var _resource_Context__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../resource/Context */ \"./src/core/laya/resource/Context.ts\");\n/* harmony import */ var _resource_HTMLCanvas__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../resource/HTMLCanvas */ \"./src/core/laya/resource/HTMLCanvas.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/ColorUtils */ \"./src/core/laya/utils/ColorUtils.ts\");\n/* harmony import */ var _utils_RunDriver__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../utils/RunDriver */ \"./src/core/laya/utils/RunDriver.ts\");\n/* harmony import */ var _resource_RenderTexture2D__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../resource/RenderTexture2D */ \"./src/core/laya/resource/RenderTexture2D.ts\");\n/* harmony import */ var _shader_Shader__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./shader/Shader */ \"./src/core/laya/webgl/shader/Shader.ts\");\n/* harmony import */ var _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./utils/RenderState2D */ \"./src/core/laya/webgl/utils/RenderState2D.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n */\r\nclass WebGL {\r\n    //TODO:coverage\r\n    static _uint8ArraySlice() {\r\n        var _this = this;\r\n        var sz = _this.length;\r\n        var dec = new Uint8Array(_this.length);\r\n        for (var i = 0; i < sz; i++)\r\n            dec[i] = _this[i];\r\n        return dec;\r\n    }\r\n    //TODO:coverage\r\n    static _float32ArraySlice() {\r\n        var _this = this;\r\n        var sz = _this.length;\r\n        var dec = new Float32Array(_this.length);\r\n        for (var i = 0; i < sz; i++)\r\n            dec[i] = _this[i];\r\n        return dec;\r\n    }\r\n    //TODO:coverage\r\n    static _uint16ArraySlice(...arg) {\r\n        var _this = this;\r\n        var sz;\r\n        var dec;\r\n        var i;\r\n        if (arg.length === 0) {\r\n            sz = _this.length;\r\n            dec = new Uint16Array(sz);\r\n            for (i = 0; i < sz; i++)\r\n                dec[i] = _this[i];\r\n        }\r\n        else if (arg.length === 2) {\r\n            var start = arg[0];\r\n            var end = arg[1];\r\n            if (end > start) {\r\n                sz = end - start;\r\n                dec = new Uint16Array(sz);\r\n                for (i = start; i < end; i++)\r\n                    dec[i - start] = _this[i];\r\n            }\r\n            else {\r\n                dec = new Uint16Array(0);\r\n            }\r\n        }\r\n        return dec;\r\n    }\r\n    static _nativeRender_enable() {\r\n        if (WebGL.isNativeRender_enable)\r\n            return;\r\n        WebGL.isNativeRender_enable = true;\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].__init_native();\r\n        _shader_Shader__WEBPACK_IMPORTED_MODULE_12__[\"Shader\"].prototype.uploadTexture2D = function (value) {\r\n            var CTX = _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"];\r\n            CTX.bindTexture(WebGL.mainContext, CTX.TEXTURE_2D, value);\r\n        };\r\n        _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_13__[\"RenderState2D\"].width = _utils_Browser__WEBPACK_IMPORTED_MODULE_8__[\"Browser\"].window.innerWidth;\r\n        _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_13__[\"RenderState2D\"].height = _utils_Browser__WEBPACK_IMPORTED_MODULE_8__[\"Browser\"].window.innerHeight;\r\n        _utils_RunDriver__WEBPACK_IMPORTED_MODULE_10__[\"RunDriver\"].measureText = function (txt, font) {\r\n            window[\"conchTextCanvas\"].font = font;\r\n            return window[\"conchTextCanvas\"].measureText(txt);\r\n        };\r\n        _utils_RunDriver__WEBPACK_IMPORTED_MODULE_10__[\"RunDriver\"].enableNative = function () {\r\n            if (_renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].supportWebGLPlusRendering) {\r\n                _layagl_LayaGLRunner__WEBPACK_IMPORTED_MODULE_3__[\"LayaGLRunner\"].uploadShaderUniforms = _layagl_LayaGLRunner__WEBPACK_IMPORTED_MODULE_3__[\"LayaGLRunner\"].uploadShaderUniformsForNative;\r\n                //替换buffer的函数\r\n            }\r\n            var stage = _display_Stage__WEBPACK_IMPORTED_MODULE_1__[\"Stage\"];\r\n            stage.prototype.render = stage.prototype.renderToNative;\r\n        };\r\n        _utils_RunDriver__WEBPACK_IMPORTED_MODULE_10__[\"RunDriver\"].clear = function (color) {\r\n            _resource_Context__WEBPACK_IMPORTED_MODULE_6__[\"Context\"].set2DRenderConfig(); //渲染2D前要还原2D状态,否则可能受3D影响\r\n            var c = _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_9__[\"ColorUtils\"].create(color).arrColor;\r\n            var gl = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_2__[\"LayaGL\"].instance;\r\n            if (c)\r\n                gl.clearColor(c[0], c[1], c[2], c[3]);\r\n            gl.clear(_WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].COLOR_BUFFER_BIT | _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].DEPTH_BUFFER_BIT | _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].STENCIL_BUFFER_BIT);\r\n            _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_13__[\"RenderState2D\"].clear();\r\n        };\r\n        _utils_RunDriver__WEBPACK_IMPORTED_MODULE_10__[\"RunDriver\"].drawToCanvas = _utils_RunDriver__WEBPACK_IMPORTED_MODULE_10__[\"RunDriver\"].drawToTexture = function (sprite, _renderType, canvasWidth, canvasHeight, offsetX, offsetY) {\r\n            offsetX -= sprite.x;\r\n            offsetY -= sprite.y;\r\n            offsetX |= 0;\r\n            offsetY |= 0;\r\n            canvasWidth |= 0;\r\n            canvasHeight |= 0;\r\n            var canv = new _resource_HTMLCanvas__WEBPACK_IMPORTED_MODULE_7__[\"HTMLCanvas\"](false);\r\n            var ctx = canv.getContext('2d');\r\n            canv.size(canvasWidth, canvasHeight);\r\n            ctx.asBitmap = true;\r\n            ctx._targets.start();\r\n            _renders_RenderSprite__WEBPACK_IMPORTED_MODULE_5__[\"RenderSprite\"].renders[_renderType]._fun(sprite, ctx, offsetX, offsetY);\r\n            ctx.flush();\r\n            ctx._targets.end();\r\n            ctx._targets.restore();\r\n            return canv;\r\n        };\r\n        //RenderTexture2D.prototype._uv = RenderTexture2D.flipyuv;\r\n        Object[\"defineProperty\"](_resource_RenderTexture2D__WEBPACK_IMPORTED_MODULE_11__[\"RenderTexture2D\"].prototype, \"uv\", {\r\n            \"get\": function () {\r\n                return this._uv;\r\n            },\r\n            \"set\": function (v) {\r\n                this._uv = v;\r\n            }\r\n        });\r\n        _resource_HTMLCanvas__WEBPACK_IMPORTED_MODULE_7__[\"HTMLCanvas\"].prototype.getTexture = function () {\r\n            if (!this._texture) {\r\n                this._texture = this.context._targets;\r\n                this._texture.uv = _resource_RenderTexture2D__WEBPACK_IMPORTED_MODULE_11__[\"RenderTexture2D\"].flipyuv;\r\n                this._texture.bitmap = this._texture;\r\n            }\r\n            return this._texture;\r\n        };\r\n    }\r\n    //使用webgl渲染器\r\n    static enable() {\r\n        return true;\r\n    }\r\n    static inner_enable() {\r\n        Float32Array.prototype.slice || (Float32Array.prototype.slice = WebGL._float32ArraySlice);\r\n        Uint16Array.prototype.slice || (Uint16Array.prototype.slice = WebGL._uint16ArraySlice);\r\n        Uint8Array.prototype.slice || (Uint8Array.prototype.slice = WebGL._uint8ArraySlice);\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp) {\r\n            WebGL._nativeRender_enable();\r\n        }\r\n        return true;\r\n    }\r\n    static onStageResize(width, height) {\r\n        if (WebGL.mainContext == null)\r\n            return;\r\n        WebGL.mainContext.viewport(0, 0, width, height);\r\n        _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_13__[\"RenderState2D\"].width = width;\r\n        _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_13__[\"RenderState2D\"].height = height;\r\n    }\r\n}\r\nWebGL._isWebGL2 = false;\r\nWebGL.isNativeRender_enable = false;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/WebGL.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/WebGLContext.ts":
/*!*********************************************!*\
  !*** ./src/core/laya/webgl/WebGLContext.ts ***!
  \*********************************************/
/*! exports provided: WebGLContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WebGLContext\", function() { return WebGLContext; });\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _WebGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./WebGL */ \"./src/core/laya/webgl/WebGL.ts\");\n\r\n\r\n\r\nclass WebGLContext {\r\n    /**\r\n     * @private\r\n     */\r\n    static _forceSupportVAOPlatform() {\r\n        return (_utils_Browser__WEBPACK_IMPORTED_MODULE_1__[\"Browser\"].onMiniGame && _utils_Browser__WEBPACK_IMPORTED_MODULE_1__[\"Browser\"].onIOS) || _utils_Browser__WEBPACK_IMPORTED_MODULE_1__[\"Browser\"].onBDMiniGame || _utils_Browser__WEBPACK_IMPORTED_MODULE_1__[\"Browser\"].onQGMiniGame;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static __init__(gl) {\r\n        WebGLContext._checkExtensions(gl);\r\n        if (!_WebGL__WEBPACK_IMPORTED_MODULE_2__[\"WebGL\"]._isWebGL2 && !_renders_Render__WEBPACK_IMPORTED_MODULE_0__[\"Render\"].isConchApp) {\r\n            if (window._setupVertexArrayObject) { //兼容VAO\r\n                if (WebGLContext._forceSupportVAOPlatform())\r\n                    window._forceSetupVertexArrayObject(gl);\r\n                else\r\n                    window._setupVertexArrayObject(gl);\r\n            }\r\n            var ext = (gl.rawgl || gl).getExtension(\"OES_vertex_array_object\"); //gl.rawgl是为了个能兼容glinspector调试\r\n            if (ext) {\r\n                //console.log(\"EXT:webgl support OES_vertex_array_object！\");\t\r\n                /**\r\n                 * 创建一个vao对象。只有支持 OES_vertex_array_object 扩展或者使用polyfill的时候这个函数才有实现。\r\n                 */\r\n                var glContext = gl;\r\n                glContext.createVertexArray = function () { return ext.createVertexArrayOES(); };\r\n                glContext.bindVertexArray = function (vao) { ext.bindVertexArrayOES(vao); };\r\n                glContext.deleteVertexArray = function (vao) { ext.deleteVertexArrayOES(vao); };\r\n                glContext.isVertexArray = function (vao) { ext.isVertexArrayOES(vao); };\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _getExtension(gl, name) {\r\n        var prefixes = WebGLContext._extentionVendorPrefixes;\r\n        for (var k in prefixes) {\r\n            var ext = gl.getExtension(prefixes[k] + name);\r\n            if (ext)\r\n                return ext;\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static _checkExtensions(gl) {\r\n        WebGLContext._extTextureFilterAnisotropic = WebGLContext._getExtension(gl, \"EXT_texture_filter_anisotropic\");\r\n        WebGLContext._compressedTextureS3tc = WebGLContext._getExtension(gl, \"WEBGL_compressed_texture_s3tc\");\r\n        WebGLContext._compressedTexturePvrtc = WebGLContext._getExtension(gl, \"WEBGL_compressed_texture_pvrtc\");\r\n        WebGLContext._compressedTextureEtc1 = WebGLContext._getExtension(gl, \"WEBGL_compressed_texture_etc1\");\r\n        if (!WebGLContext._forceSupportVAOPlatform())\r\n            WebGLContext._angleInstancedArrays = WebGLContext._getExtension(gl, \"ANGLE_instanced_arrays\");\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static __init_native() {\r\n        if (!_renders_Render__WEBPACK_IMPORTED_MODULE_0__[\"Render\"].supportWebGLPlusRendering)\r\n            return;\r\n        var webGLContext = WebGLContext;\r\n        webGLContext.activeTexture = webGLContext.activeTextureForNative;\r\n        webGLContext.bindTexture = webGLContext.bindTextureForNative;\r\n        /*webGLContext.useProgram = webGLContext.useProgramForNative;\r\n        webGLContext.bindVertexArray = webGLContext.bindVertexArrayForNative;\r\n        webGLContext.setDepthTest = webGLContext.setDepthTestForNative;\r\n        webGLContext.setDepthMask = webGLContext.setDepthMaskForNative;\r\n        webGLContext.setDepthFunc = webGLContext.setDepthFuncForNative;\r\n        webGLContext.setBlend = webGLContext.setBlendForNative;\r\n        webGLContext.setBlendFunc = webGLContext.setBlendFuncForNative;\r\n        webGLContext.setCullFace = webGLContext.setCullFaceForNative;\r\n        webGLContext.setFrontFace = webGLContext.setFrontFaceForNative;*/\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static useProgram(gl, program) {\r\n        if (WebGLContext._useProgram === program)\r\n            return false;\r\n        gl.useProgram(program);\r\n        WebGLContext._useProgram = program;\r\n        return true;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static setDepthTest(gl, value) {\r\n        value !== WebGLContext._depthTest && (WebGLContext._depthTest = value, value ? gl.enable(WebGLContext.DEPTH_TEST) : gl.disable(WebGLContext.DEPTH_TEST));\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static setDepthMask(gl, value) {\r\n        value !== WebGLContext._depthMask && (WebGLContext._depthMask = value, gl.depthMask(value));\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static setDepthFunc(gl, value) {\r\n        value !== WebGLContext._depthFunc && (WebGLContext._depthFunc = value, gl.depthFunc(value));\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static setBlend(gl, value) {\r\n        value !== WebGLContext._blend && (WebGLContext._blend = value, value ? gl.enable(WebGLContext.BLEND) : gl.disable(WebGLContext.BLEND));\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static setBlendFunc(gl, sFactor, dFactor) {\r\n        (sFactor !== WebGLContext._sFactor || dFactor !== WebGLContext._dFactor) && (WebGLContext._sFactor = WebGLContext._srcAlpha = sFactor, WebGLContext._dFactor = WebGLContext._dstAlpha = dFactor, gl.blendFunc(sFactor, dFactor));\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static setBlendFuncSeperate(gl, srcRGB, dstRGB, srcAlpha, dstAlpha) {\r\n        if (srcRGB !== WebGLContext._sFactor || dstRGB !== WebGLContext._dFactor || srcAlpha !== WebGLContext._srcAlpha || dstAlpha !== WebGLContext._dstAlpha) {\r\n            WebGLContext._sFactor = srcRGB;\r\n            WebGLContext._dFactor = dstRGB;\r\n            WebGLContext._srcAlpha = srcAlpha;\r\n            WebGLContext._dstAlpha = dstAlpha;\r\n            gl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static setCullFace(gl, value) {\r\n        value !== WebGLContext._cullFace && (WebGLContext._cullFace = value, value ? gl.enable(WebGLContext.CULL_FACE) : gl.disable(WebGLContext.CULL_FACE));\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static setFrontFace(gl, value) {\r\n        value !== WebGLContext._frontFace && (WebGLContext._frontFace = value, gl.frontFace(value));\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static activeTexture(gl, textureID) {\r\n        if (WebGLContext._activedTextureID !== textureID) {\r\n            gl.activeTexture(textureID);\r\n            WebGLContext._activedTextureID = textureID;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    static bindTexture(gl, target, texture) {\r\n        if (WebGLContext._activeTextures[WebGLContext._activedTextureID - WebGLContext.TEXTURE0] !== texture) {\r\n            gl.bindTexture(target, texture);\r\n            WebGLContext._activeTextures[WebGLContext._activedTextureID - WebGLContext.TEXTURE0] = texture;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static useProgramForNative(gl, program) {\r\n        gl.useProgram(program);\r\n        return true;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static setDepthTestForNative(gl, value) {\r\n        if (value)\r\n            gl.enable(WebGLContext.DEPTH_TEST);\r\n        else\r\n            gl.disable(WebGLContext.DEPTH_TEST);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static setDepthMaskForNative(gl, value) {\r\n        gl.depthMask(value);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static setDepthFuncForNative(gl, value) {\r\n        gl.depthFunc(value);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static setBlendForNative(gl, value) {\r\n        if (value)\r\n            gl.enable(WebGLContext.BLEND);\r\n        else\r\n            gl.disable(WebGLContext.BLEND);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static setBlendFuncForNative(gl, sFactor, dFactor) {\r\n        gl.blendFunc(sFactor, dFactor);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static setCullFaceForNative(gl, value) {\r\n        if (value)\r\n            gl.enable(WebGLContext.CULL_FACE);\r\n        else\r\n            gl.disable(WebGLContext.CULL_FACE);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static setFrontFaceForNative(gl, value) {\r\n        gl.frontFace(value);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static activeTextureForNative(gl, textureID) {\r\n        gl.activeTexture(textureID);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static bindTextureForNative(gl, target, texture) {\r\n        gl.bindTexture(target, texture);\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    static bindVertexArrayForNative(gl, vertexArray) {\r\n        gl.bindVertexArray(vertexArray);\r\n    }\r\n    getContextAttributes() { return null; }\r\n    isContextLost() { }\r\n    getSupportedExtensions() { return null; }\r\n    getExtension(name) { return null; }\r\n    activeTexture(texture) { }\r\n    attachShader(program, shader) { }\r\n    bindAttribLocation(program, index, name) { }\r\n    bindBuffer(target, buffer) { }\r\n    bindFramebuffer(target, framebuffer) { }\r\n    bindRenderbuffer(target, renderbuffer) { }\r\n    bindTexture(target, texture) { }\r\n    useTexture(value) { }\r\n    blendColor(red, green, blue, alpha) { }\r\n    blendEquation(mode) { }\r\n    blendEquationSeparate(modeRGB, modeAlpha) { }\r\n    blendFunc(sfactor, dfactor) { }\r\n    blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha) { }\r\n    bufferData(target, size, usage) { }\r\n    bufferSubData(target, offset, data) { }\r\n    checkFramebufferStatus(target) { return null; }\r\n    clear(mask) { }\r\n    clearColor(red, green, blue, alpha) { }\r\n    clearDepth(depth) { }\r\n    clearStencil(s) { }\r\n    colorMask(red, green, blue, alpha) { }\r\n    compileShader(shader) { }\r\n    copyTexImage2D(target, level, internalformat, x, y, width, height, border) { }\r\n    copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height) { }\r\n    createBuffer() { }\r\n    createFramebuffer() { }\r\n    createProgram() { }\r\n    createRenderbuffer() { }\r\n    createShader(type) { }\r\n    createTexture() { return null; }\r\n    cullFace(mode) { }\r\n    deleteBuffer(buffer) { }\r\n    deleteFramebuffer(framebuffer) { }\r\n    deleteProgram(program) { }\r\n    deleteRenderbuffer(renderbuffer) { }\r\n    deleteShader(shader) { }\r\n    deleteTexture(texture) { }\r\n    depthFunc(func) { }\r\n    depthMask(flag) { }\r\n    depthRange(zNear, zFar) { }\r\n    detachShader(program, shader) { }\r\n    disable(cap) { }\r\n    disableVertexAttribArray(index) { }\r\n    drawArrays(mode, first, count) { }\r\n    drawElements(mode, count, type, offset) { }\r\n    enable(cap) { }\r\n    enableVertexAttribArray(index) { }\r\n    finish() { }\r\n    flush() { }\r\n    framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) { }\r\n    framebufferTexture2D(target, attachment, textarget, texture, level) { }\r\n    frontFace(mode) { return null; }\r\n    generateMipmap(target) { return null; }\r\n    getActiveAttrib(program, index) { return null; }\r\n    getActiveUniform(program, index) { return null; }\r\n    getAttribLocation(program, name) { return 0; }\r\n    getParameter(pname) { return null; }\r\n    getBufferParameter(target, pname) { return null; }\r\n    getError() { return null; }\r\n    getFramebufferAttachmentParameter(target, attachment, pname) { }\r\n    getProgramParameter(program, pname) { return 0; }\r\n    getProgramInfoLog(program) { return null; }\r\n    getRenderbufferParameter(target, pname) { return null; }\r\n    getShaderPrecisionFormat(...arg) { return null; }\r\n    getShaderParameter(shader, pname) { }\r\n    getShaderInfoLog(shader) { return null; }\r\n    getShaderSource(shader) { return null; }\r\n    getTexParameter(target, pname) { }\r\n    getUniform(program, location) { }\r\n    getUniformLocation(program, name) { return null; }\r\n    getVertexAttrib(index, pname) { return null; }\r\n    getVertexAttribOffset(index, pname) { return null; }\r\n    hint(target, mode) { }\r\n    isBuffer(buffer) { }\r\n    isEnabled(cap) { }\r\n    isFramebuffer(framebuffer) { }\r\n    isProgram(program) { }\r\n    isRenderbuffer(renderbuffer) { }\r\n    isShader(shader) { }\r\n    isTexture(texture) { }\r\n    lineWidth(width) { }\r\n    linkProgram(program) { }\r\n    pixelStorei(pname, param) { }\r\n    polygonOffset(factor, units) { }\r\n    readPixels(x, y, width, height, format, type, pixels) { }\r\n    renderbufferStorage(target, internalformat, width, height) { }\r\n    sampleCoverage(value, invert) { }\r\n    scissor(x, y, width, height) { }\r\n    shaderSource(shader, source) { }\r\n    stencilFunc(func, ref, mask) { }\r\n    stencilFuncSeparate(face, func, ref, mask) { }\r\n    stencilMask(mask) { }\r\n    stencilMaskSeparate(face, mask) { }\r\n    stencilOp(fail, zfail, zpass) { }\r\n    stencilOpSeparate(face, fail, zfail, zpass) { }\r\n    texImage2D(...args) { }\r\n    texParameterf(target, pname, param) { }\r\n    texParameteri(target, pname, param) { }\r\n    texSubImage2D(...args) { }\r\n    uniform1f(location, x) { }\r\n    uniform1fv(location, v) { }\r\n    uniform1i(location, x) { }\r\n    uniform1iv(location, v) { }\r\n    uniform2f(location, x, y) { }\r\n    uniform2fv(location, v) { }\r\n    uniform2i(location, x, y) { }\r\n    uniform2iv(location, v) { }\r\n    uniform3f(location, x, y, z) { }\r\n    uniform3fv(location, v) { }\r\n    uniform3i(location, x, y, z) { }\r\n    uniform3iv(location, v) { }\r\n    uniform4f(location, x, y, z, w) { }\r\n    uniform4fv(location, v) { }\r\n    uniform4i(location, x, y, z, w) { }\r\n    uniform4iv(location, v) { }\r\n    uniformMatrix2fv(location, transpose, value) { }\r\n    uniformMatrix3fv(location, transpose, value) { }\r\n    uniformMatrix4fv(location, transpose, value) { }\r\n    useProgram(program) { }\r\n    validateProgram(program) { }\r\n    vertexAttrib1f(indx, x) { }\r\n    vertexAttrib1fv(indx, values) { }\r\n    vertexAttrib2f(indx, x, y) { }\r\n    vertexAttrib2fv(indx, values) { }\r\n    vertexAttrib3f(indx, x, y, z) { }\r\n    vertexAttrib3fv(indx, values) { }\r\n    vertexAttrib4f(indx, x, y, z, w) { }\r\n    vertexAttrib4fv(indx, values) { }\r\n    vertexAttribPointer(indx, size, type, normalized, stride, offset) { }\r\n    viewport(x, y, width, height) { }\r\n    configureBackBuffer(width, height, antiAlias, enableDepthAndStencil = true, wantsBestResolution = false) { } /*;*/\r\n    compressedTexImage2D(...args) { }\r\n    //WebGL1.0下为扩展方法\r\n    //TODO:coverage\r\n    createVertexArray() {\r\n        throw \"not implemented\";\r\n    }\r\n    //TODO:coverage\r\n    bindVertexArray(vao) {\r\n        throw \"not implemented\";\r\n    }\r\n    //TODO:coverage\r\n    deleteVertexArray(vao) {\r\n        throw \"not implemented\";\r\n    }\r\n    //TODO:coverage\r\n    isVertexArray(vao) {\r\n        throw \"not implemented\";\r\n    }\r\n}\r\nWebGLContext.DEPTH_BUFFER_BIT = 0x00000100;\r\nWebGLContext.STENCIL_BUFFER_BIT = 0x00000400;\r\nWebGLContext.COLOR_BUFFER_BIT = 0x00004000;\r\nWebGLContext.POINTS = 0x0000;\r\nWebGLContext.LINES = 0x0001;\r\nWebGLContext.LINE_LOOP = 0x0002;\r\nWebGLContext.LINE_STRIP = 0x0003;\r\nWebGLContext.TRIANGLES = 0x0004;\r\nWebGLContext.TRIANGLE_STRIP = 0x0005;\r\nWebGLContext.TRIANGLE_FAN = 0x0006;\r\nWebGLContext.ZERO = 0;\r\nWebGLContext.ONE = 1;\r\nWebGLContext.SRC_COLOR = 0x0300;\r\nWebGLContext.ONE_MINUS_SRC_COLOR = 0x0301;\r\nWebGLContext.SRC_ALPHA = 0x0302;\r\nWebGLContext.ONE_MINUS_SRC_ALPHA = 0x0303;\r\nWebGLContext.DST_ALPHA = 0x0304;\r\nWebGLContext.ONE_MINUS_DST_ALPHA = 0x0305;\r\nWebGLContext.DST_COLOR = 0x0306;\r\nWebGLContext.ONE_MINUS_DST_COLOR = 0x0307;\r\nWebGLContext.SRC_ALPHA_SATURATE = 0x0308;\r\nWebGLContext.FUNC_ADD = 0x8006;\r\nWebGLContext.BLEND_EQUATION = 0x8009;\r\nWebGLContext.BLEND_EQUATION_RGB = 0x8009;\r\nWebGLContext.BLEND_EQUATION_ALPHA = 0x883D;\r\nWebGLContext.FUNC_SUBTRACT = 0x800A;\r\nWebGLContext.FUNC_REVERSE_SUBTRACT = 0x800B;\r\nWebGLContext.BLEND_DST_RGB = 0x80C8;\r\nWebGLContext.BLEND_SRC_RGB = 0x80C9;\r\nWebGLContext.BLEND_DST_ALPHA = 0x80CA;\r\nWebGLContext.BLEND_SRC_ALPHA = 0x80CB;\r\nWebGLContext.CONSTANT_COLOR = 0x8001;\r\nWebGLContext.ONE_MINUS_CONSTANT_COLOR = 0x8002;\r\nWebGLContext.CONSTANT_ALPHA = 0x8003;\r\nWebGLContext.ONE_MINUS_CONSTANT_ALPHA = 0x8004;\r\nWebGLContext.BLEND_COLOR = 0x8005;\r\nWebGLContext.ARRAY_BUFFER = 0x8892;\r\nWebGLContext.ELEMENT_ARRAY_BUFFER = 0x8893;\r\nWebGLContext.ARRAY_BUFFER_BINDING = 0x8894;\r\nWebGLContext.ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;\r\nWebGLContext.STREAM_DRAW = 0x88E0;\r\nWebGLContext.STATIC_DRAW = 0x88E4;\r\nWebGLContext.DYNAMIC_DRAW = 0x88E8;\r\nWebGLContext.BUFFER_SIZE = 0x8764;\r\nWebGLContext.BUFFER_USAGE = 0x8765;\r\nWebGLContext.CURRENT_VERTEX_ATTRIB = 0x8626;\r\nWebGLContext.FRONT = 0x0404;\r\nWebGLContext.BACK = 0x0405;\r\nWebGLContext.CULL_FACE = 0x0B44;\r\nWebGLContext.FRONT_AND_BACK = 0x0408;\r\nWebGLContext.BLEND = 0x0BE2;\r\nWebGLContext.DITHER = 0x0BD0;\r\nWebGLContext.STENCIL_TEST = 0x0B90;\r\nWebGLContext.DEPTH_TEST = 0x0B71;\r\nWebGLContext.SCISSOR_TEST = 0x0C11;\r\nWebGLContext.POLYGON_OFFSET_FILL = 0x8037;\r\nWebGLContext.SAMPLE_ALPHA_TO_COVERAGE = 0x809E;\r\nWebGLContext.SAMPLE_COVERAGE = 0x80A0;\r\nWebGLContext.NO_ERROR = 0;\r\nWebGLContext.INVALID_ENUM = 0x0500;\r\nWebGLContext.INVALID_VALUE = 0x0501;\r\nWebGLContext.INVALID_OPERATION = 0x0502;\r\nWebGLContext.OUT_OF_MEMORY = 0x0505;\r\nWebGLContext.CW = 0x0900;\r\nWebGLContext.CCW = 0x0901;\r\nWebGLContext.LINE_WIDTH = 0x0B21;\r\nWebGLContext.ALIASED_POINT_SIZE_RANGE = 0x846D;\r\nWebGLContext.ALIASED_LINE_WIDTH_RANGE = 0x846E;\r\nWebGLContext.CULL_FACE_MODE = 0x0B45;\r\nWebGLContext.FRONT_FACE = 0x0B46;\r\nWebGLContext.DEPTH_RANGE = 0x0B70;\r\nWebGLContext.DEPTH_WRITEMASK = 0x0B72;\r\nWebGLContext.DEPTH_CLEAR_VALUE = 0x0B73;\r\nWebGLContext.DEPTH_FUNC = 0x0B74;\r\nWebGLContext.STENCIL_CLEAR_VALUE = 0x0B91;\r\nWebGLContext.STENCIL_FUNC = 0x0B92;\r\nWebGLContext.STENCIL_FAIL = 0x0B94;\r\nWebGLContext.STENCIL_PASS_DEPTH_FAIL = 0x0B95;\r\nWebGLContext.STENCIL_PASS_DEPTH_PASS = 0x0B96;\r\nWebGLContext.STENCIL_REF = 0x0B97;\r\nWebGLContext.STENCIL_VALUE_MASK = 0x0B93;\r\nWebGLContext.STENCIL_WRITEMASK = 0x0B98;\r\nWebGLContext.STENCIL_BACK_FUNC = 0x8800;\r\nWebGLContext.STENCIL_BACK_FAIL = 0x8801;\r\nWebGLContext.STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;\r\nWebGLContext.STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;\r\nWebGLContext.STENCIL_BACK_REF = 0x8CA3;\r\nWebGLContext.STENCIL_BACK_VALUE_MASK = 0x8CA4;\r\nWebGLContext.STENCIL_BACK_WRITEMASK = 0x8CA5;\r\nWebGLContext.VIEWPORT = 0x0BA2;\r\nWebGLContext.SCISSOR_BOX = 0x0C10;\r\nWebGLContext.COLOR_CLEAR_VALUE = 0x0C22;\r\nWebGLContext.COLOR_WRITEMASK = 0x0C23;\r\nWebGLContext.UNPACK_ALIGNMENT = 0x0CF5;\r\nWebGLContext.PACK_ALIGNMENT = 0x0D05;\r\nWebGLContext.MAX_TEXTURE_SIZE = 0x0D33;\r\nWebGLContext.MAX_VIEWPORT_DIMS = 0x0D3A;\r\nWebGLContext.SUBPIXEL_BITS = 0x0D50;\r\nWebGLContext.RED_BITS = 0x0D52;\r\nWebGLContext.GREEN_BITS = 0x0D53;\r\nWebGLContext.BLUE_BITS = 0x0D54;\r\nWebGLContext.ALPHA_BITS = 0x0D55;\r\nWebGLContext.DEPTH_BITS = 0x0D56;\r\nWebGLContext.STENCIL_BITS = 0x0D57;\r\nWebGLContext.POLYGON_OFFSET_UNITS = 0x2A00;\r\nWebGLContext.POLYGON_OFFSET_FACTOR = 0x8038;\r\nWebGLContext.TEXTURE_BINDING_2D = 0x8069;\r\nWebGLContext.SAMPLE_BUFFERS = 0x80A8;\r\nWebGLContext.SAMPLES = 0x80A9;\r\nWebGLContext.SAMPLE_COVERAGE_VALUE = 0x80AA;\r\nWebGLContext.SAMPLE_COVERAGE_INVERT = 0x80AB;\r\nWebGLContext.NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;\r\nWebGLContext.COMPRESSED_TEXTURE_FORMATS = 0x86A3;\r\nWebGLContext.DONT_CARE = 0x1100;\r\nWebGLContext.FASTEST = 0x1101;\r\nWebGLContext.NICEST = 0x1102;\r\nWebGLContext.GENERATE_MIPMAP_HINT = 0x8192;\r\nWebGLContext.BYTE = 0x1400;\r\nWebGLContext.UNSIGNED_BYTE = 0x1401;\r\nWebGLContext.SHORT = 0x1402;\r\nWebGLContext.UNSIGNED_SHORT = 0x1403;\r\nWebGLContext.INT = 0x1404;\r\nWebGLContext.UNSIGNED_INT = 0x1405;\r\nWebGLContext.FLOAT = 0x1406;\r\nWebGLContext.DEPTH_COMPONENT = 0x1902;\r\nWebGLContext.ALPHA = 0x1906;\r\nWebGLContext.RGB = 0x1907;\r\nWebGLContext.RGBA = 0x1908;\r\nWebGLContext.LUMINANCE = 0x1909;\r\nWebGLContext.LUMINANCE_ALPHA = 0x190A;\r\nWebGLContext.UNSIGNED_SHORT_4_4_4_4 = 0x8033;\r\nWebGLContext.UNSIGNED_SHORT_5_5_5_1 = 0x8034;\r\nWebGLContext.UNSIGNED_SHORT_5_6_5 = 0x8363;\r\nWebGLContext.FRAGMENT_SHADER = 0x8B30;\r\nWebGLContext.VERTEX_SHADER = 0x8B31;\r\nWebGLContext.MAX_VERTEX_ATTRIBS = 0x8869;\r\nWebGLContext.MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;\r\nWebGLContext.MAX_VARYING_VECTORS = 0x8DFC;\r\nWebGLContext.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;\r\nWebGLContext.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;\r\nWebGLContext.MAX_TEXTURE_IMAGE_UNITS = 0x8872;\r\nWebGLContext.MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;\r\nWebGLContext.SHADER_TYPE = 0x8B4F;\r\nWebGLContext.DELETE_STATUS = 0x8B80;\r\nWebGLContext.LINK_STATUS = 0x8B82;\r\nWebGLContext.VALIDATE_STATUS = 0x8B83;\r\nWebGLContext.ATTACHED_SHADERS = 0x8B85;\r\nWebGLContext.ACTIVE_UNIFORMS = 0x8B86;\r\nWebGLContext.ACTIVE_ATTRIBUTES = 0x8B89;\r\nWebGLContext.SHADING_LANGUAGE_VERSION = 0x8B8C;\r\nWebGLContext.CURRENT_PROGRAM = 0x8B8D;\r\nWebGLContext.NEVER = 0x0200;\r\nWebGLContext.LESS = 0x0201;\r\nWebGLContext.EQUAL = 0x0202;\r\nWebGLContext.LEQUAL = 0x0203;\r\nWebGLContext.GREATER = 0x0204;\r\nWebGLContext.NOTEQUAL = 0x0205;\r\nWebGLContext.GEQUAL = 0x0206;\r\nWebGLContext.ALWAYS = 0x0207;\r\nWebGLContext.KEEP = 0x1E00;\r\nWebGLContext.REPLACE = 0x1E01;\r\nWebGLContext.INCR = 0x1E02;\r\nWebGLContext.DECR = 0x1E03;\r\nWebGLContext.INVERT = 0x150A;\r\nWebGLContext.INCR_WRAP = 0x8507;\r\nWebGLContext.DECR_WRAP = 0x8508;\r\nWebGLContext.VENDOR = 0x1F00;\r\nWebGLContext.RENDERER = 0x1F01;\r\nWebGLContext.VERSION = 0x1F02;\r\nWebGLContext.NEAREST = 0x2600;\r\nWebGLContext.LINEAR = 0x2601;\r\nWebGLContext.NEAREST_MIPMAP_NEAREST = 0x2700;\r\nWebGLContext.LINEAR_MIPMAP_NEAREST = 0x2701;\r\nWebGLContext.NEAREST_MIPMAP_LINEAR = 0x2702;\r\nWebGLContext.LINEAR_MIPMAP_LINEAR = 0x2703;\r\nWebGLContext.TEXTURE_MAG_FILTER = 0x2800;\r\nWebGLContext.TEXTURE_MIN_FILTER = 0x2801;\r\nWebGLContext.TEXTURE_WRAP_S = 0x2802;\r\nWebGLContext.TEXTURE_WRAP_T = 0x2803;\r\nWebGLContext.TEXTURE_2D = 0x0DE1;\r\nWebGLContext.TEXTURE_3D = 0x806f;\r\nWebGLContext.TEXTURE = 0x1702;\r\nWebGLContext.TEXTURE_CUBE_MAP = 0x8513;\r\nWebGLContext.TEXTURE_BINDING_CUBE_MAP = 0x8514;\r\nWebGLContext.TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;\r\nWebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;\r\nWebGLContext.TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;\r\nWebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;\r\nWebGLContext.TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;\r\nWebGLContext.TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;\r\nWebGLContext.MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;\r\nWebGLContext.TEXTURE0 = 0x84C0;\r\nWebGLContext.TEXTURE1 = 0x84C1;\r\nWebGLContext.TEXTURE2 = 0x84C2;\r\nWebGLContext.TEXTURE3 = 0x84C3;\r\nWebGLContext.TEXTURE4 = 0x84C4;\r\nWebGLContext.TEXTURE5 = 0x84C5;\r\nWebGLContext.TEXTURE6 = 0x84C6;\r\nWebGLContext.TEXTURE7 = 0x84C7;\r\nWebGLContext.TEXTURE8 = 0x84C8;\r\nWebGLContext.TEXTURE9 = 0x84C9;\r\nWebGLContext.TEXTURE10 = 0x84CA;\r\nWebGLContext.TEXTURE11 = 0x84CB;\r\nWebGLContext.TEXTURE12 = 0x84CC;\r\nWebGLContext.TEXTURE13 = 0x84CD;\r\nWebGLContext.TEXTURE14 = 0x84CE;\r\nWebGLContext.TEXTURE15 = 0x84CF;\r\nWebGLContext.TEXTURE16 = 0x84D0;\r\nWebGLContext.TEXTURE17 = 0x84D1;\r\nWebGLContext.TEXTURE18 = 0x84D2;\r\nWebGLContext.TEXTURE19 = 0x84D3;\r\nWebGLContext.TEXTURE20 = 0x84D4;\r\nWebGLContext.TEXTURE21 = 0x84D5;\r\nWebGLContext.TEXTURE22 = 0x84D6;\r\nWebGLContext.TEXTURE23 = 0x84D7;\r\nWebGLContext.TEXTURE24 = 0x84D8;\r\nWebGLContext.TEXTURE25 = 0x84D9;\r\nWebGLContext.TEXTURE26 = 0x84DA;\r\nWebGLContext.TEXTURE27 = 0x84DB;\r\nWebGLContext.TEXTURE28 = 0x84DC;\r\nWebGLContext.TEXTURE29 = 0x84DD;\r\nWebGLContext.TEXTURE30 = 0x84DE;\r\nWebGLContext.TEXTURE31 = 0x84DF;\r\nWebGLContext.ACTIVE_TEXTURE = 0x84E0;\r\nWebGLContext.REPEAT = 0x2901;\r\nWebGLContext.CLAMP_TO_EDGE = 0x812F;\r\nWebGLContext.MIRRORED_REPEAT = 0x8370;\r\nWebGLContext.FLOAT_VEC2 = 0x8B50;\r\nWebGLContext.FLOAT_VEC3 = 0x8B51;\r\nWebGLContext.FLOAT_VEC4 = 0x8B52;\r\nWebGLContext.INT_VEC2 = 0x8B53;\r\nWebGLContext.INT_VEC3 = 0x8B54;\r\nWebGLContext.INT_VEC4 = 0x8B55;\r\nWebGLContext.BOOL = 0x8B56;\r\nWebGLContext.BOOL_VEC2 = 0x8B57;\r\nWebGLContext.BOOL_VEC3 = 0x8B58;\r\nWebGLContext.BOOL_VEC4 = 0x8B59;\r\nWebGLContext.FLOAT_MAT2 = 0x8B5A;\r\nWebGLContext.FLOAT_MAT3 = 0x8B5B;\r\nWebGLContext.FLOAT_MAT4 = 0x8B5C;\r\nWebGLContext.SAMPLER_2D = 0x8B5E;\r\nWebGLContext.SAMPLER_CUBE = 0x8B60;\r\nWebGLContext.VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;\r\nWebGLContext.VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;\r\nWebGLContext.VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;\r\nWebGLContext.VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;\r\nWebGLContext.VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;\r\nWebGLContext.VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;\r\nWebGLContext.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;\r\nWebGLContext.COMPILE_STATUS = 0x8B81;\r\nWebGLContext.LOW_FLOAT = 0x8DF0;\r\nWebGLContext.MEDIUM_FLOAT = 0x8DF1;\r\nWebGLContext.HIGH_FLOAT = 0x8DF2;\r\nWebGLContext.LOW_INT = 0x8DF3;\r\nWebGLContext.MEDIUM_INT = 0x8DF4;\r\nWebGLContext.HIGH_INT = 0x8DF5;\r\nWebGLContext.FRAMEBUFFER = 0x8D40;\r\nWebGLContext.RENDERBUFFER = 0x8D41;\r\nWebGLContext.RGBA4 = 0x8056;\r\nWebGLContext.RGB5_A1 = 0x8057;\r\nWebGLContext.RGB565 = 0x8D62;\r\nWebGLContext.DEPTH_COMPONENT16 = 0x81A5;\r\nWebGLContext.STENCIL_INDEX = 0x1901;\r\nWebGLContext.STENCIL_INDEX8 = 0x8D48;\r\nWebGLContext.DEPTH_STENCIL = 0x84F9;\r\nWebGLContext.RENDERBUFFER_WIDTH = 0x8D42;\r\nWebGLContext.RENDERBUFFER_HEIGHT = 0x8D43;\r\nWebGLContext.RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;\r\nWebGLContext.RENDERBUFFER_RED_SIZE = 0x8D50;\r\nWebGLContext.RENDERBUFFER_GREEN_SIZE = 0x8D51;\r\nWebGLContext.RENDERBUFFER_BLUE_SIZE = 0x8D52;\r\nWebGLContext.RENDERBUFFER_ALPHA_SIZE = 0x8D53;\r\nWebGLContext.RENDERBUFFER_DEPTH_SIZE = 0x8D54;\r\nWebGLContext.RENDERBUFFER_STENCIL_SIZE = 0x8D55;\r\nWebGLContext.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;\r\nWebGLContext.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;\r\nWebGLContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;\r\nWebGLContext.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;\r\nWebGLContext.COLOR_ATTACHMENT0 = 0x8CE0;\r\nWebGLContext.DEPTH_ATTACHMENT = 0x8D00;\r\nWebGLContext.STENCIL_ATTACHMENT = 0x8D20;\r\nWebGLContext.DEPTH_STENCIL_ATTACHMENT = 0x821A;\r\nWebGLContext.NONE = 0;\r\nWebGLContext.FRAMEBUFFER_COMPLETE = 0x8CD5;\r\nWebGLContext.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;\r\nWebGLContext.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;\r\nWebGLContext.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;\r\nWebGLContext.FRAMEBUFFER_UNSUPPORTED = 0x8CDD;\r\nWebGLContext.FRAMEBUFFER_BINDING = 0x8CA6;\r\nWebGLContext.RENDERBUFFER_BINDING = 0x8CA7;\r\nWebGLContext.MAX_RENDERBUFFER_SIZE = 0x84E8;\r\nWebGLContext.INVALID_FRAMEBUFFER_OPERATION = 0x0506;\r\nWebGLContext.UNPACK_FLIP_Y_WEBGL = 0x9240;\r\nWebGLContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;\r\nWebGLContext.CONTEXT_LOST_WEBGL = 0x9242;\r\nWebGLContext.UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;\r\nWebGLContext.BROWSER_DEFAULT_WEBGL = 0x9244;\r\n/**@private */\r\nWebGLContext._extentionVendorPrefixes = [\"\", \"WEBKIT_\", \"MOZ_\"];\r\n/**@private */\r\nWebGLContext._activeTextures = new Array(8);\r\n/**@private */\r\nWebGLContext._glTextureIDs = [WebGLContext.TEXTURE0, WebGLContext.TEXTURE1, WebGLContext.TEXTURE2, WebGLContext.TEXTURE3, WebGLContext.TEXTURE4, WebGLContext.TEXTURE5, WebGLContext.TEXTURE6, WebGLContext.TEXTURE7];\r\n/**@private */\r\nWebGLContext._useProgram = null;\r\n/**@private */\r\nWebGLContext._depthTest = true;\r\n/**@private */\r\nWebGLContext._depthMask = true;\r\n/**@private */\r\nWebGLContext._depthFunc = WebGLContext.LESS;\r\n/**@private */\r\nWebGLContext._blend = false;\r\n/**@private */\r\nWebGLContext._sFactor = WebGLContext.ONE; //待确认\r\n/**@private */\r\nWebGLContext._dFactor = WebGLContext.ZERO; //待确认\r\n/**@private */\r\nWebGLContext._srcAlpha = WebGLContext.ONE; //待确认\r\n/**@private */\r\nWebGLContext._dstAlpha = WebGLContext.ZERO; //待确认\r\n/**@private */\r\nWebGLContext._cullFace = false;\r\n/**@private */\r\nWebGLContext._frontFace = WebGLContext.CCW;\r\n/**@private */\r\nWebGLContext._activedTextureID = WebGLContext.TEXTURE0; //默认激活纹理区为0\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/WebGLContext.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/canvas/BlendMode.ts":
/*!*************************************************!*\
  !*** ./src/core/laya/webgl/canvas/BlendMode.ts ***!
  \*************************************************/
/*! exports provided: BlendMode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BlendMode\", function() { return BlendMode; });\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n\r\nclass BlendMode {\r\n    static _init_(gl) {\r\n        BlendMode.fns = [BlendMode.BlendNormal, BlendMode.BlendAdd, BlendMode.BlendMultiply, BlendMode.BlendScreen, BlendMode.BlendOverlay, BlendMode.BlendLight, BlendMode.BlendMask, BlendMode.BlendDestinationOut];\r\n        BlendMode.targetFns = [BlendMode.BlendNormalTarget, BlendMode.BlendAddTarget, BlendMode.BlendMultiplyTarget, BlendMode.BlendScreenTarget, BlendMode.BlendOverlayTarget, BlendMode.BlendLightTarget, BlendMode.BlendMask, BlendMode.BlendDestinationOut];\r\n    }\r\n    static BlendNormal(gl) {\r\n        //为了避免黑边，和canvas作为贴图的黑边\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].setBlendFunc(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE_MINUS_SRC_ALPHA);\r\n    }\r\n    static BlendAdd(gl) {\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].setBlendFunc(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].DST_ALPHA);\r\n    }\r\n    //TODO:coverage\r\n    static BlendMultiply(gl) {\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].setBlendFunc(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].DST_COLOR, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE_MINUS_SRC_ALPHA);\r\n    }\r\n    //TODO:coverage\r\n    static BlendScreen(gl) {\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].setBlendFunc(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE);\r\n    }\r\n    //TODO:coverage\r\n    static BlendOverlay(gl) {\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].setBlendFunc(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE_MINUS_SRC_COLOR);\r\n    }\r\n    //TODO:coverage\r\n    static BlendLight(gl) {\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].setBlendFunc(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE);\r\n    }\r\n    static BlendNormalTarget(gl) {\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].setBlendFunc(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE_MINUS_SRC_ALPHA);\r\n    }\r\n    //TODO:coverage\r\n    static BlendAddTarget(gl) {\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].setBlendFunc(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].DST_ALPHA);\r\n    }\r\n    //TODO:coverage\r\n    static BlendMultiplyTarget(gl) {\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].setBlendFunc(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].DST_COLOR, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE_MINUS_SRC_ALPHA);\r\n    }\r\n    //TODO:coverage\r\n    static BlendScreenTarget(gl) {\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].setBlendFunc(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE);\r\n    }\r\n    //TODO:coverage\r\n    static BlendOverlayTarget(gl) {\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].setBlendFunc(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE_MINUS_SRC_COLOR);\r\n    }\r\n    //TODO:coverage\r\n    static BlendLightTarget(gl) {\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].setBlendFunc(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ONE);\r\n    }\r\n    static BlendMask(gl) {\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].setBlendFunc(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ZERO, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].SRC_ALPHA);\r\n    }\r\n    //TODO:coverage\r\n    static BlendDestinationOut(gl) {\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].setBlendFunc(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ZERO, _WebGLContext__WEBPACK_IMPORTED_MODULE_0__[\"WebGLContext\"].ZERO);\r\n    }\r\n}\r\nBlendMode.activeBlendFunction = null;\r\nBlendMode.NAMES = [\"normal\", \"add\", \"multiply\", \"screen\", \"overlay\", \"light\", \"mask\", \"destination-out\"];\r\nBlendMode.TOINT = { \"normal\": 0, \"add\": 1, \"multiply\": 2, \"screen\": 3, \"overlay\": 4, \"light\": 5, \"mask\": 6, \"destination-out\": 7, \"lighter\": 1 };\r\nBlendMode.NORMAL = \"normal\"; //0\r\nBlendMode.ADD = \"add\"; //1\r\nBlendMode.MULTIPLY = \"multiply\"; //2\r\nBlendMode.SCREEN = \"screen\"; //3\r\nBlendMode.OVERLAY = \"overlay\"; //4\r\nBlendMode.LIGHT = \"light\"; //5\r\nBlendMode.MASK = \"mask\"; //6\r\nBlendMode.DESTINATIONOUT = \"destination-out\"; //7\r\nBlendMode.LIGHTER = \"lighter\"; //1  等同于加色法\r\nBlendMode.fns = [];\r\nBlendMode.targetFns = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/canvas/BlendMode.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/canvas/DrawStyle.ts":
/*!*************************************************!*\
  !*** ./src/core/laya/webgl/canvas/DrawStyle.ts ***!
  \*************************************************/
/*! exports provided: DrawStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DrawStyle\", function() { return DrawStyle; });\n/* harmony import */ var _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/ColorUtils */ \"./src/core/laya/utils/ColorUtils.ts\");\n\r\nclass DrawStyle {\r\n    constructor(value) {\r\n        this.setValue(value);\r\n    }\r\n    static create(value) {\r\n        if (value) {\r\n            var color = (value instanceof _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_0__[\"ColorUtils\"]) ? value : _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_0__[\"ColorUtils\"].create(value);\r\n            return color._drawStyle || (color._drawStyle = new DrawStyle(value));\r\n        }\r\n        return DrawStyle.DEFAULT;\r\n    }\r\n    setValue(value) {\r\n        if (value) {\r\n            this._color = (value instanceof _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_0__[\"ColorUtils\"]) ? value : _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_0__[\"ColorUtils\"].create(value);\r\n        }\r\n        else\r\n            this._color = _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_0__[\"ColorUtils\"].create(\"#000000\");\r\n    }\r\n    reset() {\r\n        this._color = _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_0__[\"ColorUtils\"].create(\"#000000\");\r\n    }\r\n    toInt() {\r\n        return this._color.numColor;\r\n    }\r\n    equal(value) {\r\n        if (value instanceof String)\r\n            return this._color.strColor === value;\r\n        if (value instanceof _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_0__[\"ColorUtils\"])\r\n            return this._color.numColor === value.numColor;\r\n        return false;\r\n    }\r\n    toColorStr() {\r\n        return this._color.strColor;\r\n    }\r\n}\r\nDrawStyle.DEFAULT = new DrawStyle(\"#000000\");\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/canvas/DrawStyle.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/canvas/Path.ts":
/*!********************************************!*\
  !*** ./src/core/laya/webgl/canvas/Path.ts ***!
  \********************************************/
/*! exports provided: Path */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Path\", function() { return Path; });\nclass Path {\r\n    constructor() {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        //public var _rect:Rectangle;\r\n        this._lastOriX = 0; //moveto等的原始位置。没有经过内部矩阵变换的\r\n        this._lastOriY = 0;\r\n        this.paths = []; //所有的路径。{@type renderPath[] }\r\n        this._curPath = null;\r\n    }\r\n    beginPath(convex) {\r\n        this.paths.length = 1;\r\n        this._curPath = this.paths[0] = new renderPath();\r\n        this._curPath.convex = convex;\r\n        //_curPath.path = [];\r\n    }\r\n    closePath() {\r\n        this._curPath.loop = true;\r\n    }\r\n    newPath() {\r\n        this._curPath = new renderPath();\r\n        this.paths.push(this._curPath);\r\n    }\r\n    addPoint(pointX, pointY) {\r\n        //tempArray.push(pointX, pointY);\r\n        this._curPath.path.push(pointX, pointY);\r\n    }\r\n    //直接添加一个完整的path\r\n    push(points, convex) {\r\n        if (!this._curPath) {\r\n            this._curPath = new renderPath();\r\n            this.paths.push(this._curPath);\r\n        }\r\n        else if (this._curPath.path.length > 0) {\r\n            this._curPath = new renderPath();\r\n            this.paths.push(this._curPath);\r\n        }\r\n        var rp = this._curPath;\r\n        rp.path = points.slice(); //TODO 这个可能多次slice了\r\n        rp.convex = convex;\r\n    }\r\n    reset() {\r\n        this.paths.length = 0; //TODO 复用\r\n    }\r\n}\r\nclass renderPath {\r\n    constructor() {\r\n        this.path = []; //[x,y,x,y,....]的数组\r\n        this.loop = false;\r\n        this.convex = false;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/canvas/Path.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/canvas/WebGLCacheAsNormalCanvas.ts":
/*!****************************************************************!*\
  !*** ./src/core/laya/webgl/canvas/WebGLCacheAsNormalCanvas.ts ***!
  \****************************************************************/
/*! exports provided: WebGLCacheAsNormalCanvas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WebGLCacheAsNormalCanvas\", function() { return WebGLCacheAsNormalCanvas; });\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n/* harmony import */ var _submit_SubmitBase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../submit/SubmitBase */ \"./src/core/laya/webgl/submit/SubmitBase.ts\");\n/* harmony import */ var _utils_MeshQuadTexture__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/MeshQuadTexture */ \"./src/core/laya/webgl/utils/MeshQuadTexture.ts\");\n/* harmony import */ var _utils_MeshTexture__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/MeshTexture */ \"./src/core/laya/webgl/utils/MeshTexture.ts\");\n/* harmony import */ var _utils_MeshVG__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/MeshVG */ \"./src/core/laya/webgl/utils/MeshVG.ts\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 对象 cacheas normal的时候，本质上只是想把submit缓存起来，以后直接执行\r\n * 为了避免各种各样的麻烦，这里采用复制相应部分的submit的方法。执行环境还是在原来的context中\r\n * 否则包括clip等都非常难以处理\r\n */\r\nclass WebGLCacheAsNormalCanvas {\r\n    constructor(ctx, sp) {\r\n        this.submitStartPos = 0; // 对应的context的submit的开始的地方\r\n        this.submitEndPos = 0;\r\n        this.context = null;\r\n        this.touches = []; //记录的文字信息。cacheas normal的话，文字要能正确touch\r\n        this.submits = []; // 从context中剪切的submit\r\n        this.sprite = null; // 对应的sprite对象\r\n        this.meshlist = []; //本context用到的mesh\r\n        // cache的时候对应的clip\r\n        this.cachedClipInfo = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"](); // 用来判断是否需要把cache无效\r\n        //private var oldMatrix:Matrix = null;\t\t\t\t//本地画的时候完全不应用矩阵，所以需要先保存老的，以便恢复\t\t这样会丢失缩放信息，导致文字模糊，所以不用这种方式了\r\n        this.oldTx = 0;\r\n        this.oldTy = 0;\r\n        // 创建这个canvas的时候对应的矩阵的逆矩阵。因为要保留矩阵的缩放信息。所以采用逆矩阵的方法。\r\n        this.invMat = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"]();\r\n        this.context = ctx;\r\n        this.sprite = sp;\r\n        ctx._globalClipMatrix.copyTo(this.cachedClipInfo);\r\n    }\r\n    startRec() {\r\n        // 如果有文字优化，这里要先提交一下\r\n        if (this.context._charSubmitCache._enbale) {\r\n            this.context._charSubmitCache.enable(false, this.context);\r\n            this.context._charSubmitCache.enable(true, this.context);\r\n        }\r\n        this.context._incache = true;\r\n        this.touches.length = 0;\r\n        //记录需要touch的文字资源\r\n        this.context.touches = this.touches;\r\n        this.context._globalClipMatrix.copyTo(this.cachedClipInfo);\r\n        this.submits.length = 0;\r\n        this.submitStartPos = this.context._submits._length;\r\n        // 先把之前的释放掉\r\n        for (var i = 0, sz = this.meshlist.length; i < sz; i++) {\r\n            var curm = this.meshlist[i];\r\n            curm.canReuse ? (curm.releaseMesh()) : (curm.destroy());\r\n        }\r\n        this.meshlist.length = 0;\r\n        this._mesh = _utils_MeshQuadTexture__WEBPACK_IMPORTED_MODULE_2__[\"MeshQuadTexture\"].getAMesh(false);\r\n        this._pathMesh = _utils_MeshVG__WEBPACK_IMPORTED_MODULE_4__[\"MeshVG\"].getAMesh(false);\r\n        this._triangleMesh = _utils_MeshTexture__WEBPACK_IMPORTED_MODULE_3__[\"MeshTexture\"].getAMesh(false);\r\n        this.meshlist.push(this._mesh);\r\n        this.meshlist.push(this._pathMesh);\r\n        this.meshlist.push(this._triangleMesh);\r\n        // 打断合并\r\n        this.context._curSubmit = _submit_SubmitBase__WEBPACK_IMPORTED_MODULE_1__[\"SubmitBase\"].RENDERBASE;\r\n        // 接管context中的一些值\r\n        this._oldMesh = this.context._mesh;\r\n        this._oldPathMesh = this.context._pathMesh;\r\n        this._oldTriMesh = this.context._triangleMesh;\r\n        this._oldMeshList = this.context.meshlist;\r\n        this.context._mesh = this._mesh;\r\n        this.context._pathMesh = this._pathMesh;\r\n        this.context._triangleMesh = this._triangleMesh;\r\n        this.context.meshlist = this.meshlist;\r\n        // 要取消位置，因为以后会再传入位置。这里好乱\r\n        this.oldTx = this.context._curMat.tx;\r\n        this.oldTy = this.context._curMat.ty;\r\n        this.context._curMat.tx = 0;\r\n        this.context._curMat.ty = 0;\r\n        // 取消缩放等\r\n        this.context._curMat.copyTo(this.invMat);\r\n        this.invMat.invert();\r\n        //oldMatrix = context._curMat;\r\n        //context._curMat = matI;\r\n    }\r\n    endRec() {\r\n        // 如果有文字优化，这里要先提交一下\r\n        if (this.context._charSubmitCache._enbale) {\r\n            this.context._charSubmitCache.enable(false, this.context);\r\n            this.context._charSubmitCache.enable(true, this.context);\r\n        }\r\n        // copy submit\r\n        var parsubmits = this.context._submits;\r\n        this.submitEndPos = parsubmits._length;\r\n        var num = this.submitEndPos - this.submitStartPos;\r\n        for (var i = 0; i < num; i++) {\r\n            this.submits.push(parsubmits[this.submitStartPos + i]);\r\n        }\r\n        parsubmits._length -= num;\r\n        // 恢复原始context的值\r\n        this.context._mesh = this._oldMesh;\r\n        this.context._pathMesh = this._oldPathMesh;\r\n        this.context._triangleMesh = this._oldTriMesh;\r\n        this.context.meshlist = this._oldMeshList;\r\n        // 打断合并\r\n        this.context._curSubmit = _submit_SubmitBase__WEBPACK_IMPORTED_MODULE_1__[\"SubmitBase\"].RENDERBASE;\r\n        // 恢复matrix\r\n        //context._curMat = oldMatrix;\r\n        this.context._curMat.tx = this.oldTx;\r\n        this.context._curMat.ty = this.oldTy;\r\n        this.context.touches = null;\r\n        this.context._incache = false;\r\n    }\r\n    /**\r\n     * 当前缓存是否还有效。例如clip变了就失效了，因为clip太难自动处理\r\n     * @return\r\n     */\r\n    isCacheValid() {\r\n        var curclip = this.context._globalClipMatrix;\r\n        if (curclip.a != this.cachedClipInfo.a || curclip.b != this.cachedClipInfo.b || curclip.c != this.cachedClipInfo.c\r\n            || curclip.d != this.cachedClipInfo.d || curclip.tx != this.cachedClipInfo.tx || curclip.ty != this.cachedClipInfo.ty)\r\n            return false;\r\n        return true;\r\n    }\r\n    flushsubmit() {\r\n        var curSubmit = _submit_SubmitBase__WEBPACK_IMPORTED_MODULE_1__[\"SubmitBase\"].RENDERBASE;\r\n        this.submits.forEach(function (subm) {\r\n            if (subm == _submit_SubmitBase__WEBPACK_IMPORTED_MODULE_1__[\"SubmitBase\"].RENDERBASE)\r\n                return;\r\n            _submit_SubmitBase__WEBPACK_IMPORTED_MODULE_1__[\"SubmitBase\"].preRender = curSubmit;\r\n            curSubmit = subm;\r\n            subm.renderSubmit();\r\n        });\r\n    }\r\n    releaseMem() {\r\n    }\r\n}\r\nWebGLCacheAsNormalCanvas.matI = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"]();\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/canvas/WebGLCacheAsNormalCanvas.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/canvas/save/SaveBase.ts":
/*!*****************************************************!*\
  !*** ./src/core/laya/webgl/canvas/save/SaveBase.ts ***!
  \*****************************************************/
/*! exports provided: SaveBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SaveBase\", function() { return SaveBase; });\n/* harmony import */ var _submit_SubmitBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../submit/SubmitBase */ \"./src/core/laya/webgl/submit/SubmitBase.ts\");\n\r\nclass SaveBase {\r\n    constructor() {\r\n    }\r\n    static _createArray() {\r\n        var value = [];\r\n        value._length = 0;\r\n        return value;\r\n    }\r\n    static _init() {\r\n        var namemap = SaveBase._namemap = {};\r\n        namemap[SaveBase.TYPE_ALPHA] = \"ALPHA\";\r\n        namemap[SaveBase.TYPE_FILESTYLE] = \"fillStyle\";\r\n        namemap[SaveBase.TYPE_FONT] = \"font\";\r\n        namemap[SaveBase.TYPE_LINEWIDTH] = \"lineWidth\";\r\n        namemap[SaveBase.TYPE_STROKESTYLE] = \"strokeStyle\";\r\n        namemap[SaveBase.TYPE_ENABLEMERGE] = \"_mergeID\";\r\n        namemap[SaveBase.TYPE_MARK] = namemap[SaveBase.TYPE_TRANSFORM] = namemap[SaveBase.TYPE_TRANSLATE] = [];\r\n        namemap[SaveBase.TYPE_TEXTBASELINE] = \"textBaseline\";\r\n        namemap[SaveBase.TYPE_TEXTALIGN] = \"textAlign\";\r\n        namemap[SaveBase.TYPE_GLOBALCOMPOSITEOPERATION] = \"_nBlendType\";\r\n        namemap[SaveBase.TYPE_SHADER] = \"shader\";\r\n        namemap[SaveBase.TYPE_FILTERS] = \"filters\";\r\n        namemap[SaveBase.TYPE_COLORFILTER] = '_colorFiler';\r\n        return namemap;\r\n    }\r\n    isSaveMark() { return false; }\r\n    restore(context) {\r\n        this._dataObj[this._valueName] = this._value;\r\n        SaveBase.POOL[SaveBase.POOL._length++] = this;\r\n        this._newSubmit && (context._curSubmit = _submit_SubmitBase__WEBPACK_IMPORTED_MODULE_0__[\"SubmitBase\"].RENDERBASE);\r\n    }\r\n    static save(context, type, dataObj, newSubmit) {\r\n        if ((context._saveMark._saveuse & type) !== type) {\r\n            context._saveMark._saveuse |= type;\r\n            var cache = SaveBase.POOL;\r\n            var o = cache._length > 0 ? cache[--cache._length] : (new SaveBase());\r\n            o._value = dataObj[o._valueName = SaveBase._namemap[type]];\r\n            o._dataObj = dataObj;\r\n            o._newSubmit = newSubmit;\r\n            var _save = context._save;\r\n            _save[_save._length++] = o;\r\n        }\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n/*[FILEINDEX:1]*/\r\n/*[DISBALEOUTCONST-BEGIN]*/\r\nSaveBase.TYPE_ALPHA = 0x1;\r\nSaveBase.TYPE_FILESTYLE = 0x2;\r\nSaveBase.TYPE_FONT = 0x8;\r\nSaveBase.TYPE_LINEWIDTH = 0x100;\r\nSaveBase.TYPE_STROKESTYLE = 0x200;\r\nSaveBase.TYPE_MARK = 0x400;\r\nSaveBase.TYPE_TRANSFORM = 0x800;\r\nSaveBase.TYPE_TRANSLATE = 0x1000;\r\nSaveBase.TYPE_ENABLEMERGE = 0x2000;\r\nSaveBase.TYPE_TEXTBASELINE = 0x4000;\r\nSaveBase.TYPE_TEXTALIGN = 0x8000;\r\nSaveBase.TYPE_GLOBALCOMPOSITEOPERATION = 0x10000;\r\nSaveBase.TYPE_CLIPRECT = 0x20000;\r\nSaveBase.TYPE_CLIPRECT_STENCIL = 0x40000;\r\nSaveBase.TYPE_IBVB = 0x80000;\r\nSaveBase.TYPE_SHADER = 0x100000;\r\nSaveBase.TYPE_FILTERS = 0x200000;\r\nSaveBase.TYPE_FILTERS_TYPE = 0x400000;\r\nSaveBase.TYPE_COLORFILTER = 0x800000;\r\n/*[DISBALEOUTCONST-END]*/\r\nSaveBase.POOL = SaveBase._createArray();\r\nSaveBase._namemap = SaveBase._init();\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/canvas/save/SaveBase.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/canvas/save/SaveClipRect.ts":
/*!*********************************************************!*\
  !*** ./src/core/laya/webgl/canvas/save/SaveClipRect.ts ***!
  \*********************************************************/
/*! exports provided: SaveClipRect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SaveClipRect\", function() { return SaveClipRect; });\n/* harmony import */ var _SaveBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././SaveBase */ \"./src/core/laya/webgl/canvas/save/SaveBase.ts\");\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n/* harmony import */ var _maths_Rectangle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../maths/Rectangle */ \"./src/core/laya/maths/Rectangle.ts\");\n\r\n\r\n\r\nclass SaveClipRect {\r\n    constructor() {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        //public var _clipSaveRect:Rectangle;\r\n        //private var _transedClipInfo:Array = new Array(6);\r\n        this._globalClipMatrix = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_1__[\"Matrix\"]();\r\n        this._clipInfoID = -1;\r\n        this._clipRect = new _maths_Rectangle__WEBPACK_IMPORTED_MODULE_2__[\"Rectangle\"]();\r\n        this.incache = false;\r\n    }\r\n    isSaveMark() { return false; }\r\n    restore(context) {\r\n        /*\r\n        context._transedClipInfo[0] = _transedClipInfo[0];\r\n        context._transedClipInfo[1] = _transedClipInfo[1];\r\n        context._transedClipInfo[2] = _transedClipInfo[2];\r\n        context._transedClipInfo[3] = _transedClipInfo[3];\r\n        context._transedClipInfo[4] = _transedClipInfo[4];\r\n        context._transedClipInfo[5] = _transedClipInfo[5];\r\n        */\r\n        this._globalClipMatrix.copyTo(context._globalClipMatrix);\r\n        this._clipRect.clone(context._clipRect);\r\n        context._clipInfoID = this._clipInfoID;\r\n        //context._clipTransed = false;\t//ֱ�����¼���\r\n        SaveClipRect.POOL[SaveClipRect.POOL._length++] = this;\r\n        context._clipInCache = this.incache;\r\n        /*\r\n        context._clipRect = _clipSaveRect;\r\n        context._curSubmit = context._submits[context._submits._length++] = Submit.RENDERBASE;\r\n        context._submitKey.submitType=-1;\r\n        */\r\n    }\r\n    static save(context) {\r\n        if ((context._saveMark._saveuse & _SaveBase__WEBPACK_IMPORTED_MODULE_0__[\"SaveBase\"].TYPE_CLIPRECT) == _SaveBase__WEBPACK_IMPORTED_MODULE_0__[\"SaveBase\"].TYPE_CLIPRECT)\r\n            return;\r\n        context._saveMark._saveuse |= _SaveBase__WEBPACK_IMPORTED_MODULE_0__[\"SaveBase\"].TYPE_CLIPRECT;\r\n        var cache = SaveClipRect.POOL;\r\n        var o = cache._length > 0 ? cache[--cache._length] : (new SaveClipRect());\r\n        //o._clipSaveRect = context._clipRect;\r\n        //context._clipRect = o._clipRect.copyFrom(context._clipRect);\r\n        //o._submitScissor = submitScissor;\r\n        context._globalClipMatrix.copyTo(o._globalClipMatrix);\r\n        /*\r\n        o._transedClipInfo[0] = context._transedClipInfo[0];\r\n        o._transedClipInfo[1] = context._transedClipInfo[1];\r\n        o._transedClipInfo[2] = context._transedClipInfo[2];\r\n        o._transedClipInfo[3] = context._transedClipInfo[3];\r\n        o._transedClipInfo[4] = context._transedClipInfo[4];\r\n        o._transedClipInfo[5] = context._transedClipInfo[5];\r\n        */\r\n        context._clipRect.clone(o._clipRect);\r\n        o._clipInfoID = context._clipInfoID;\r\n        o.incache = context._clipInCache;\r\n        var _save = context._save;\r\n        _save[_save._length++] = o;\r\n    }\r\n}\r\nSaveClipRect.POOL = _SaveBase__WEBPACK_IMPORTED_MODULE_0__[\"SaveBase\"]._createArray();\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/canvas/save/SaveClipRect.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/canvas/save/SaveMark.ts":
/*!*****************************************************!*\
  !*** ./src/core/laya/webgl/canvas/save/SaveMark.ts ***!
  \*****************************************************/
/*! exports provided: SaveMark */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SaveMark\", function() { return SaveMark; });\n/* harmony import */ var _SaveBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././SaveBase */ \"./src/core/laya/webgl/canvas/save/SaveBase.ts\");\n\r\nclass SaveMark {\r\n    constructor() {\r\n        this._saveuse = 0;\r\n    }\r\n    isSaveMark() {\r\n        return true;\r\n    }\r\n    restore(context) {\r\n        context._saveMark = this._preSaveMark;\r\n        SaveMark.POOL[SaveMark.POOL._length++] = this;\r\n    }\r\n    static Create(context) {\r\n        var no = SaveMark.POOL;\r\n        var o = no._length > 0 ? no[--no._length] : (new SaveMark());\r\n        o._saveuse = 0;\r\n        o._preSaveMark = context._saveMark;\r\n        context._saveMark = o;\r\n        return o;\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\nSaveMark.POOL = _SaveBase__WEBPACK_IMPORTED_MODULE_0__[\"SaveBase\"]._createArray();\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/canvas/save/SaveMark.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/canvas/save/SaveTransform.ts":
/*!**********************************************************!*\
  !*** ./src/core/laya/webgl/canvas/save/SaveTransform.ts ***!
  \**********************************************************/
/*! exports provided: SaveTransform */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SaveTransform\", function() { return SaveTransform; });\n/* harmony import */ var _SaveBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././SaveBase */ \"./src/core/laya/webgl/canvas/save/SaveBase.ts\");\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n\r\n\r\nclass SaveTransform {\r\n    constructor() {\r\n        this._matrix = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_1__[\"Matrix\"]();\r\n    }\r\n    isSaveMark() { return false; }\r\n    restore(context) {\r\n        context._curMat = this._savematrix;\r\n        SaveTransform.POOL[SaveTransform.POOL._length++] = this;\r\n    }\r\n    static save(context) {\r\n        var _saveMark = context._saveMark;\r\n        if ((_saveMark._saveuse & _SaveBase__WEBPACK_IMPORTED_MODULE_0__[\"SaveBase\"].TYPE_TRANSFORM) === _SaveBase__WEBPACK_IMPORTED_MODULE_0__[\"SaveBase\"].TYPE_TRANSFORM)\r\n            return;\r\n        _saveMark._saveuse |= _SaveBase__WEBPACK_IMPORTED_MODULE_0__[\"SaveBase\"].TYPE_TRANSFORM;\r\n        var no = SaveTransform.POOL;\r\n        var o = no._length > 0 ? no[--no._length] : (new SaveTransform());\r\n        o._savematrix = context._curMat;\r\n        context._curMat = context._curMat.copyTo(o._matrix);\r\n        var _save = context._save;\r\n        _save[_save._length++] = o;\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\nSaveTransform.POOL = _SaveBase__WEBPACK_IMPORTED_MODULE_0__[\"SaveBase\"]._createArray();\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/canvas/save/SaveTransform.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/canvas/save/SaveTranslate.ts":
/*!**********************************************************!*\
  !*** ./src/core/laya/webgl/canvas/save/SaveTranslate.ts ***!
  \**********************************************************/
/*! exports provided: SaveTranslate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SaveTranslate\", function() { return SaveTranslate; });\n/* harmony import */ var _SaveBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././SaveBase */ \"./src/core/laya/webgl/canvas/save/SaveBase.ts\");\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n\r\n\r\nclass SaveTranslate {\r\n    constructor() {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        this._mat = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_1__[\"Matrix\"]();\r\n    }\r\n    isSaveMark() { return false; }\r\n    restore(context) {\r\n        this._mat.copyTo(context._curMat);\r\n        SaveTranslate.POOL[SaveTranslate.POOL._length++] = this;\r\n    }\r\n    static save(context) {\r\n        var no = SaveTranslate.POOL;\r\n        var o = no._length > 0 ? no[--no._length] : (new SaveTranslate());\r\n        context._curMat.copyTo(o._mat);\r\n        var _save = context._save;\r\n        _save[_save._length++] = o;\r\n    }\r\n}\r\nSaveTranslate.POOL = _SaveBase__WEBPACK_IMPORTED_MODULE_0__[\"SaveBase\"]._createArray();\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/canvas/save/SaveTranslate.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/BaseShader.ts":
/*!**************************************************!*\
  !*** ./src/core/laya/webgl/shader/BaseShader.ts ***!
  \**************************************************/
/*! exports provided: BaseShader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BaseShader\", function() { return BaseShader; });\n/* harmony import */ var _resource_Resource__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../resource/Resource */ \"./src/core/laya/resource/Resource.ts\");\n\r\n/**\r\n * ...\r\n * @author ...\r\n */\r\nclass BaseShader extends _resource_Resource__WEBPACK_IMPORTED_MODULE_0__[\"Resource\"] {\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/BaseShader.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/Shader.ts":
/*!**********************************************!*\
  !*** ./src/core/laya/webgl/shader/Shader.ts ***!
  \**********************************************/
/*! exports provided: Shader */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Shader\", function() { return Shader; });\n/* harmony import */ var _BaseShader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././BaseShader */ \"./src/core/laya/webgl/shader/BaseShader.ts\");\n/* harmony import */ var _utils_Stat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/Stat */ \"./src/core/laya/utils/Stat.ts\");\n/* harmony import */ var _utils_StringKey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/StringKey */ \"./src/core/laya/utils/StringKey.ts\");\n/* harmony import */ var _WebGL__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../WebGL */ \"./src/core/laya/webgl/WebGL.ts\");\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n/* harmony import */ var _utils_ShaderCompile__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/ShaderCompile */ \"./src/core/laya/webgl/utils/ShaderCompile.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass Shader extends _BaseShader__WEBPACK_IMPORTED_MODULE_0__[\"BaseShader\"] {\r\n    /**\r\n     * 根据vs和ps信息生成shader对象\r\n     * 把自己存储在 sharders 数组中\r\n     * @param\tvs\r\n     * @param\tps\r\n     * @param\tname:\r\n     * @param\tnameMap 帮助里要详细解释为什么需要nameMap\r\n     */\r\n    constructor(vs, ps, saveName = null, nameMap = null, bindAttrib = null) {\r\n        super();\r\n        this._attribInfo = null;\r\n        this.customCompile = false;\r\n        this._curActTexIndex = 0;\r\n        //存储一些私有变量\r\n        this.tag = {};\r\n        this._program = null;\r\n        this._params = null;\r\n        this._paramsMap = {};\r\n        if ((!vs) || (!ps))\r\n            throw \"Shader Error\";\r\n        this._attribInfo = bindAttrib;\r\n        this._id = ++Shader._count;\r\n        this._vs = vs;\r\n        this._ps = ps;\r\n        this._nameMap = nameMap ? nameMap : {};\r\n        saveName != null && (Shader.sharders[saveName] = this);\r\n        this.recreateResource();\r\n        this.lock = true;\r\n    }\r\n    //TODO:coverage\r\n    static getShader(name) {\r\n        return Shader.sharders[name];\r\n    }\r\n    //TODO:coverage\r\n    static create(vs, ps, saveName = null, nameMap = null, bindAttrib = null) {\r\n        return new Shader(vs, ps, saveName, nameMap, bindAttrib);\r\n    }\r\n    /**\r\n     * 根据宏动态生成shader文件，支持#include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";条件嵌入文件\r\n     * @param\tname\r\n     * @param\tvs\r\n     * @param\tps\r\n     * @param\tdefine 宏定义，格式:{name:value...}\r\n     * @return\r\n     */\r\n    //TODO:coverage\r\n    static withCompile(nameID, define, shaderName, createShader) {\r\n        if (shaderName && Shader.sharders[shaderName])\r\n            return Shader.sharders[shaderName];\r\n        var pre = Shader._preCompileShader[Shader.SHADERNAME2ID * nameID];\r\n        if (!pre)\r\n            throw new Error(\"withCompile shader err!\" + nameID);\r\n        return pre.createShader(define, shaderName, createShader, null);\r\n    }\r\n    /**\r\n     * 根据宏动态生成shader文件，支持#include?COLOR_FILTER \"parts/ColorFilter_ps_logic.glsl\";条件嵌入文件\r\n     * @param\tname\r\n     * @param\tvs\r\n     * @param\tps\r\n     * @param\tdefine 宏定义，格式:{name:value...}\r\n     * @return\r\n     */\r\n    static withCompile2D(nameID, mainID, define, shaderName, createShader, bindAttrib = null) {\r\n        if (shaderName && Shader.sharders[shaderName])\r\n            return Shader.sharders[shaderName];\r\n        var pre = Shader._preCompileShader[Shader.SHADERNAME2ID * nameID + mainID];\r\n        if (!pre)\r\n            throw new Error(\"withCompile shader err!\" + nameID + \" \" + mainID);\r\n        return pre.createShader(define, shaderName, createShader, bindAttrib);\r\n    }\r\n    static addInclude(fileName, txt) {\r\n        _utils_ShaderCompile__WEBPACK_IMPORTED_MODULE_5__[\"ShaderCompile\"].addInclude(fileName, txt);\r\n    }\r\n    /**\r\n     * 预编译shader文件，主要是处理宏定义\r\n     * @param\tnameID,一般是特殊宏+shaderNameID*0.0002组成的一个浮点数当做唯一标识\r\n     * @param\tvs\r\n     * @param\tps\r\n     */\r\n    //TODO:coverage\r\n    static preCompile(nameID, vs, ps, nameMap) {\r\n        var id = Shader.SHADERNAME2ID * nameID;\r\n        Shader._preCompileShader[id] = new _utils_ShaderCompile__WEBPACK_IMPORTED_MODULE_5__[\"ShaderCompile\"](vs, ps, nameMap);\r\n    }\r\n    /**\r\n     * 预编译shader文件，主要是处理宏定义\r\n     * @param\tnameID,一般是特殊宏+shaderNameID*0.0002组成的一个浮点数当做唯一标识\r\n     * @param\tvs\r\n     * @param\tps\r\n     */\r\n    static preCompile2D(nameID, mainID, vs, ps, nameMap) {\r\n        var id = Shader.SHADERNAME2ID * nameID + mainID;\r\n        Shader._preCompileShader[id] = new _utils_ShaderCompile__WEBPACK_IMPORTED_MODULE_5__[\"ShaderCompile\"](vs, ps, nameMap);\r\n    }\r\n    recreateResource() {\r\n        this._compile();\r\n        this._setGPUMemory(0); //忽略尺寸尺寸\r\n    }\r\n    //TODO:coverage\r\n    /*override*/ _disposeResource() {\r\n        _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.deleteShader(this._vshader);\r\n        _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.deleteShader(this._pshader);\r\n        _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.deleteProgram(this._program);\r\n        this._vshader = this._pshader = this._program = null;\r\n        this._params = null;\r\n        this._paramsMap = {};\r\n        this._setGPUMemory(0);\r\n        this._curActTexIndex = 0;\r\n    }\r\n    _compile() {\r\n        if (!this._vs || !this._ps || this._params)\r\n            return;\r\n        /*\r\n        trace(\"================================\");\r\n        trace(_vs);\r\n        trace(_ps);\r\n        trace(\"\\n\");\r\n        */\r\n        this._reCompile = true;\r\n        this._params = [];\r\n        var result;\r\n        if (this.customCompile)\r\n            result = _utils_ShaderCompile__WEBPACK_IMPORTED_MODULE_5__[\"ShaderCompile\"].preGetParams(this._vs, this._ps);\r\n        var gl = _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext;\r\n        this._program = gl.createProgram();\r\n        this._vshader = Shader._createShader(gl, this._vs, _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].VERTEX_SHADER);\r\n        this._pshader = Shader._createShader(gl, this._ps, _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FRAGMENT_SHADER);\r\n        gl.attachShader(this._program, this._vshader);\r\n        gl.attachShader(this._program, this._pshader);\r\n        var one, i, j, n, location;\r\n        //属性用指定location的方法，这样更灵活，更方便与vao结合。\r\n        //注意注意注意 这个必须放到link前面\r\n        var attribDescNum = this._attribInfo ? this._attribInfo.length : 0;\r\n        for (i = 0; i < attribDescNum; i += 2) {\r\n            gl.bindAttribLocation(this._program, this._attribInfo[i + 1], this._attribInfo[i]);\r\n        }\r\n        gl.linkProgram(this._program);\r\n        if (!this.customCompile && !gl.getProgramParameter(this._program, _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].LINK_STATUS)) {\r\n            throw gl.getProgramInfoLog(this._program);\r\n        }\r\n        //trace(_vs);\r\n        //trace(_ps);\r\n        /*\r\n        var attribNum:int = customCompile ? result.attributes.length : gl.getProgramParameter(_program, WebGLContext.ACTIVE_ATTRIBUTES); //得到attribute的个数\r\n        \r\n        for (i = 0; i < attribNum; i++) {\r\n            var attrib:* = customCompile ? result.attributes[i] : gl.getActiveAttrib(_program, i); //attrib对象，{name,size,type}\r\n            location = gl.getAttribLocation(_program, attrib.name); //用名字来得到location\r\n            one = {vartype: \"attribute\", glfun:null, ivartype: 0, attrib: attrib, location: location, name: attrib.name, type: attrib.type, isArray: false, isSame: false, preValue: null, indexOfParams: 0};\r\n            _params.push(one);\r\n        }\r\n        */\r\n        var nUniformNum = this.customCompile ? result.uniforms.length : gl.getProgramParameter(this._program, _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].ACTIVE_UNIFORMS); //个数\r\n        for (i = 0; i < nUniformNum; i++) {\r\n            var uniform = this.customCompile ? result.uniforms[i] : gl.getActiveUniform(this._program, i); //得到uniform对象，包括名字等信息 {name,type,size}\r\n            location = gl.getUniformLocation(this._program, uniform.name); //用名字来得到location\r\n            one = { vartype: \"uniform\", glfun: null, ivartype: 1, location: location, name: uniform.name, type: uniform.type, isArray: false, isSame: false, preValue: null, indexOfParams: 0 };\r\n            if (one.name.indexOf('[0]') > 0) {\r\n                one.name = one.name.substr(0, one.name.length - 3);\r\n                one.isArray = true;\r\n                one.location = gl.getUniformLocation(this._program, one.name);\r\n            }\r\n            this._params.push(one);\r\n        }\r\n        for (i = 0, n = this._params.length; i < n; i++) {\r\n            one = this._params[i];\r\n            one.indexOfParams = i;\r\n            one.index = 1;\r\n            one.value = [one.location, null];\r\n            one.codename = one.name;\r\n            one.name = this._nameMap[one.codename] ? this._nameMap[one.codename] : one.codename;\r\n            this._paramsMap[one.name] = one;\r\n            one._this = this;\r\n            one.uploadedValue = [];\r\n            switch (one.type) {\r\n                case _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].INT:\r\n                    one.fun = one.isArray ? this._uniform1iv : this._uniform1i;\r\n                    break;\r\n                case _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FLOAT:\r\n                    one.fun = one.isArray ? this._uniform1fv : this._uniform1f;\r\n                    break;\r\n                case _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FLOAT_VEC2:\r\n                    one.fun = one.isArray ? this._uniform_vec2v : this._uniform_vec2;\r\n                    break;\r\n                case _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FLOAT_VEC3:\r\n                    one.fun = one.isArray ? this._uniform_vec3v : this._uniform_vec3;\r\n                    break;\r\n                case _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FLOAT_VEC4:\r\n                    one.fun = one.isArray ? this._uniform_vec4v : this._uniform_vec4;\r\n                    break;\r\n                case _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].SAMPLER_2D:\r\n                    one.fun = this._uniform_sampler2D;\r\n                    break;\r\n                case _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].SAMPLER_CUBE:\r\n                    one.fun = this._uniform_samplerCube;\r\n                    break;\r\n                case _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FLOAT_MAT4:\r\n                    one.glfun = gl.uniformMatrix4fv;\r\n                    one.fun = this._uniformMatrix4fv;\r\n                    break;\r\n                case _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].BOOL:\r\n                    one.fun = this._uniform1i;\r\n                    break;\r\n                case _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FLOAT_MAT2:\r\n                case _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].FLOAT_MAT3:\r\n                    //TODO 这个有人会用的。\r\n                    throw new Error(\"compile shader err!\");\r\n                default:\r\n                    throw new Error(\"compile shader err!\");\r\n            }\r\n        }\r\n    }\r\n    static _createShader(gl, str, type) {\r\n        var shader = gl.createShader(type);\r\n        gl.shaderSource(shader, str);\r\n        gl.compileShader(shader);\r\n        if (gl.getShaderParameter(shader, _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].COMPILE_STATUS)) {\r\n            return shader;\r\n        }\r\n        else {\r\n            console.log(gl.getShaderInfoLog(shader));\r\n            return null;\r\n        }\r\n    }\r\n    /**\r\n     * 根据变量名字获得\r\n     * @param\tname\r\n     * @return\r\n     */\r\n    //TODO:coverage\r\n    getUniform(name) {\r\n        return this._paramsMap[name];\r\n    }\r\n    //TODO:coverage\r\n    _uniform1f(one, value) {\r\n        var uploadedValue = one.uploadedValue;\r\n        if (uploadedValue[0] !== value) {\r\n            _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform1f(one.location, uploadedValue[0] = value);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    //TODO:coverage\r\n    _uniform1fv(one, value) {\r\n        if (value.length < 4) {\r\n            var uploadedValue = one.uploadedValue;\r\n            if (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1] || uploadedValue[2] !== value[2] || uploadedValue[3] !== value[3]) {\r\n                _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform1fv(one.location, value);\r\n                uploadedValue[0] = value[0];\r\n                uploadedValue[1] = value[1];\r\n                uploadedValue[2] = value[2];\r\n                uploadedValue[3] = value[3];\r\n                return 1;\r\n            }\r\n            return 0;\r\n        }\r\n        else {\r\n            _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform1fv(one.location, value);\r\n            return 1;\r\n        }\r\n    }\r\n    _uniform_vec2(one, value) {\r\n        var uploadedValue = one.uploadedValue;\r\n        if (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1]) {\r\n            _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform2f(one.location, uploadedValue[0] = value[0], uploadedValue[1] = value[1]);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    //TODO:coverage\r\n    _uniform_vec2v(one, value) {\r\n        if (value.length < 2) {\r\n            var uploadedValue = one.uploadedValue;\r\n            if (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1] || uploadedValue[2] !== value[2] || uploadedValue[3] !== value[3]) {\r\n                _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform2fv(one.location, value);\r\n                uploadedValue[0] = value[0];\r\n                uploadedValue[1] = value[1];\r\n                uploadedValue[2] = value[2];\r\n                uploadedValue[3] = value[3];\r\n                return 1;\r\n            }\r\n            return 0;\r\n        }\r\n        else {\r\n            _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform2fv(one.location, value);\r\n            return 1;\r\n        }\r\n    }\r\n    //TODO:coverage\r\n    _uniform_vec3(one, value) {\r\n        var uploadedValue = one.uploadedValue;\r\n        if (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1] || uploadedValue[2] !== value[2]) {\r\n            _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform3f(one.location, uploadedValue[0] = value[0], uploadedValue[1] = value[1], uploadedValue[2] = value[2]);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    //TODO:coverage\r\n    _uniform_vec3v(one, value) {\r\n        _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform3fv(one.location, value);\r\n        return 1;\r\n    }\r\n    _uniform_vec4(one, value) {\r\n        var uploadedValue = one.uploadedValue;\r\n        if (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1] || uploadedValue[2] !== value[2] || uploadedValue[3] !== value[3]) {\r\n            _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform4f(one.location, uploadedValue[0] = value[0], uploadedValue[1] = value[1], uploadedValue[2] = value[2], uploadedValue[3] = value[3]);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    //TODO:coverage\r\n    _uniform_vec4v(one, value) {\r\n        _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform4fv(one.location, value);\r\n        return 1;\r\n    }\r\n    //TODO:coverage\r\n    _uniformMatrix2fv(one, value) {\r\n        _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniformMatrix2fv(one.location, false, value);\r\n        return 1;\r\n    }\r\n    //TODO:coverage\r\n    _uniformMatrix3fv(one, value) {\r\n        _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniformMatrix3fv(one.location, false, value);\r\n        return 1;\r\n    }\r\n    _uniformMatrix4fv(one, value) {\r\n        _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniformMatrix4fv(one.location, false, value);\r\n        return 1;\r\n    }\r\n    //TODO:coverage\r\n    _uniform1i(one, value) {\r\n        var uploadedValue = one.uploadedValue;\r\n        if (uploadedValue[0] !== value) {\r\n            _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform1i(one.location, uploadedValue[0] = value);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    //TODO:coverage\r\n    _uniform1iv(one, value) {\r\n        _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform1iv(one.location, value);\r\n        return 1;\r\n    }\r\n    //TODO:coverage\r\n    _uniform_ivec2(one, value) {\r\n        var uploadedValue = one.uploadedValue;\r\n        if (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1]) {\r\n            _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform2i(one.location, uploadedValue[0] = value[0], uploadedValue[1] = value[1]);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    //TODO:coverage\r\n    _uniform_ivec2v(one, value) {\r\n        _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform2iv(one.location, value);\r\n        return 1;\r\n    }\r\n    //TODO:coverage\r\n    _uniform_vec3i(one, value) {\r\n        var uploadedValue = one.uploadedValue;\r\n        if (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1] || uploadedValue[2] !== value[2]) {\r\n            _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform3i(one.location, uploadedValue[0] = value[0], uploadedValue[1] = value[1], uploadedValue[2] = value[2]);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    _uniform_vec3vi(one, value) {\r\n        _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform3iv(one.location, value);\r\n        return 1;\r\n    }\r\n    //TODO:coverage\r\n    _uniform_vec4i(one, value) {\r\n        var uploadedValue = one.uploadedValue;\r\n        if (uploadedValue[0] !== value[0] || uploadedValue[1] !== value[1] || uploadedValue[2] !== value[2] || uploadedValue[3] !== value[3]) {\r\n            _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform4i(one.location, uploadedValue[0] = value[0], uploadedValue[1] = value[1], uploadedValue[2] = value[2], uploadedValue[3] = value[3]);\r\n            return 1;\r\n        }\r\n        return 0;\r\n    }\r\n    //TODO:coverage\r\n    _uniform_vec4vi(one, value) {\r\n        _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext.uniform4iv(one.location, value);\r\n        return 1;\r\n    }\r\n    _uniform_sampler2D(one, value) {\r\n        var gl = _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext;\r\n        var uploadedValue = one.uploadedValue;\r\n        if (uploadedValue[0] == null) {\r\n            uploadedValue[0] = this._curActTexIndex;\r\n            gl.uniform1i(one.location, this._curActTexIndex);\r\n            _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].activeTexture(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].TEXTURE0 + this._curActTexIndex);\r\n            _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].bindTexture(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].TEXTURE_2D, value);\r\n            this._curActTexIndex++;\r\n            return 1;\r\n        }\r\n        else {\r\n            _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].activeTexture(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].TEXTURE0 + uploadedValue[0]);\r\n            _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].bindTexture(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].TEXTURE_2D, value);\r\n            return 0;\r\n        }\r\n    }\r\n    //TODO:coverage\r\n    _uniform_samplerCube(one, value) {\r\n        var gl = _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext;\r\n        var uploadedValue = one.uploadedValue;\r\n        if (uploadedValue[0] == null) {\r\n            uploadedValue[0] = this._curActTexIndex;\r\n            gl.uniform1i(one.location, this._curActTexIndex);\r\n            _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].activeTexture(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].TEXTURE0 + this._curActTexIndex);\r\n            _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].bindTexture(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].TEXTURE_CUBE_MAP, value);\r\n            this._curActTexIndex++;\r\n            return 1;\r\n        }\r\n        else {\r\n            _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].activeTexture(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].TEXTURE0 + uploadedValue[0]);\r\n            _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].bindTexture(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].TEXTURE_CUBE_MAP, value);\r\n            return 0;\r\n        }\r\n    }\r\n    //TODO:coverage\r\n    _noSetValue(one) {\r\n        console.log(\"no....:\" + one.name);\r\n        //throw new Error(\"upload shader err,must set value:\"+one.name);\r\n    }\r\n    //TODO:coverage\r\n    uploadOne(name, value) {\r\n        //activeResource();\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].useProgram(_WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext, this._program);\r\n        var one = this._paramsMap[name];\r\n        one.fun.call(this, one, value);\r\n    }\r\n    uploadTexture2D(value) {\r\n        //这个可能执行频率非常高，所以这里能省就省点\r\n        //Stat.shaderCall++;\r\n        //var gl:WebGLContext = WebGL.mainContext;\r\n        //WebGLContext.activeTexture(gl,WebGLContext.TEXTURE0);\t2d必须是active0\r\n        var CTX = _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"];\r\n        if (CTX._activeTextures[0] !== value) {\r\n            CTX.bindTexture(_WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext, CTX.TEXTURE_2D, value);\r\n            CTX._activeTextures[0] = value;\r\n        }\r\n    }\r\n    /**\r\n     * 提交shader到GPU\r\n     * @param\tshaderValue\r\n     */\r\n    upload(shaderValue, params = null) {\r\n        _BaseShader__WEBPACK_IMPORTED_MODULE_0__[\"BaseShader\"].activeShader = _BaseShader__WEBPACK_IMPORTED_MODULE_0__[\"BaseShader\"].bindShader = this;\r\n        //recreateResource();\r\n        var gl = _WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext;\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].useProgram(gl, this._program);\r\n        if (this._reCompile) {\r\n            params = this._params;\r\n            this._reCompile = false;\r\n        }\r\n        else {\r\n            params = params || this._params;\r\n        }\r\n        var one, value, n = params.length, shaderCall = 0;\r\n        for (var i = 0; i < n; i++) {\r\n            one = params[i];\r\n            if ((value = shaderValue[one.name]) !== null)\r\n                shaderCall += one.fun.call(this, one, value);\r\n            /*\r\n            one.glfun?\r\n                one.glfun.call(gl, one.location, false, value):\r\n                one.fun.call(this, one, value);*/\r\n        }\r\n        _utils_Stat__WEBPACK_IMPORTED_MODULE_1__[\"Stat\"].shaderCall += shaderCall;\r\n    }\r\n    /**\r\n     * 按数组的定义提交\r\n     * @param\tshaderValue 数组格式[name,value,...]\r\n     */\r\n    //TODO:coverage\r\n    uploadArray(shaderValue, length, _bufferUsage) {\r\n        _BaseShader__WEBPACK_IMPORTED_MODULE_0__[\"BaseShader\"].activeShader = this;\r\n        _BaseShader__WEBPACK_IMPORTED_MODULE_0__[\"BaseShader\"].bindShader = this;\r\n        //activeResource();\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].useProgram(_WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].mainContext, this._program);\r\n        var params = this._params, value;\r\n        var one, shaderCall = 0;\r\n        for (var i = length - 2; i >= 0; i -= 2) {\r\n            one = this._paramsMap[shaderValue[i]];\r\n            if (!one)\r\n                continue;\r\n            value = shaderValue[i + 1];\r\n            if (value != null) {\r\n                _bufferUsage && _bufferUsage[one.name] && _bufferUsage[one.name].bind();\r\n                shaderCall += one.fun.call(this, one, value);\r\n            }\r\n        }\r\n        _utils_Stat__WEBPACK_IMPORTED_MODULE_1__[\"Stat\"].shaderCall += shaderCall;\r\n    }\r\n    /**\r\n     * 得到编译后的变量及相关预定义\r\n     * @return\r\n     */\r\n    //TODO:coverage\r\n    getParams() {\r\n        return this._params;\r\n    }\r\n    /**\r\n     * 设置shader里面的attribute绑定到哪个location，必须与mesh2d的对应起来，\r\n     * 这个必须在编译之前设置。\r\n     * @param attribDesc 属性描述，格式是 [attributeName, location, attributeName, location ... ]\r\n     */\r\n    //TODO:coverage\r\n    setAttributesLocation(attribDesc) {\r\n        this._attribInfo = attribDesc;\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n//private static var _TEXTURES:Array = /*[STATIC SAFE]*/ [WebGLContext.TEXTURE0, WebGLContext.TEXTURE1, WebGLContext.TEXTURE2, WebGLContext.TEXTURE3, WebGLContext.TEXTURE4, WebGLContext.TEXTURE5, WebGLContext.TEXTURE6,, WebGLContext.TEXTURE7, WebGLContext.TEXTURE8];\r\nShader._count = 0;\r\nShader._preCompileShader = {}; //存储预编译结果，可以通过名字获得内容,目前不支持#ifdef嵌套和条件\r\nShader.SHADERNAME2ID = 0.0002;\r\nShader.nameKey = new _utils_StringKey__WEBPACK_IMPORTED_MODULE_2__[\"StringKey\"]();\r\nShader.sharders = new Array(0x20); // (sharders = [], sharders.length = 0x20, sharders);\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/Shader.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/ShaderDefinesBase.ts":
/*!*********************************************************!*\
  !*** ./src/core/laya/webgl/shader/ShaderDefinesBase.ts ***!
  \*********************************************************/
/*! exports provided: ShaderDefinesBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShaderDefinesBase\", function() { return ShaderDefinesBase; });\nclass ShaderDefinesBase {\r\n    constructor(name2int, int2name, int2nameMap) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        this._value = 0;\r\n        this._name2int = name2int;\r\n        this._int2name = int2name;\r\n        this._int2nameMap = int2nameMap;\r\n    }\r\n    //TODO:coverage\r\n    add(value) {\r\n        if (value instanceof String) {\r\n            this._value |= this._name2int[value];\r\n        }\r\n        else {\r\n            this._value |= value;\r\n        }\r\n        return this._value;\r\n    }\r\n    addInt(value) {\r\n        this._value |= value;\r\n        return this._value;\r\n    }\r\n    //TODO:coverage\r\n    remove(value) {\r\n        if (value instanceof String) {\r\n            this._value &= ~(this._name2int[value]);\r\n        }\r\n        else {\r\n            this._value &= (~value);\r\n        }\r\n        return this._value;\r\n    }\r\n    //TODO:coverage\r\n    isDefine(def) {\r\n        return (this._value & def) === def;\r\n    }\r\n    //TODO:coverage\r\n    getValue() {\r\n        return this._value;\r\n    }\r\n    setValue(value) {\r\n        this._value = value;\r\n    }\r\n    toNameDic() {\r\n        var r = this._int2nameMap[this._value];\r\n        return r ? r : ShaderDefinesBase._toText(this._value, this._int2name, this._int2nameMap);\r\n    }\r\n    static _reg(name, value, _name2int, _int2name) {\r\n        _name2int[name] = value;\r\n        _int2name[value] = name;\r\n    }\r\n    static _toText(value, _int2name, _int2nameMap) {\r\n        var r = _int2nameMap[value];\r\n        if (r)\r\n            return r;\r\n        var o = {};\r\n        var d = 1;\r\n        for (var i = 0; i < 32; i++) {\r\n            d = 1 << i;\r\n            if (d > value)\r\n                break;\r\n            if (value & d) {\r\n                var name = _int2name[d];\r\n                name && (o[name] = \"\");\r\n            }\r\n        }\r\n        _int2nameMap[value] = o;\r\n        return o;\r\n    }\r\n    //TODO:coverage\r\n    static _toInt(names, _name2int) {\r\n        var words = names.split('.');\r\n        var num = 0;\r\n        for (var i = 0, n = words.length; i < n; i++) {\r\n            var value = _name2int[words[i]];\r\n            if (!value)\r\n                throw new Error(\"Defines to int err:\" + names + \"/\" + words[i]);\r\n            num |= value;\r\n        }\r\n        return num;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/ShaderDefinesBase.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/d2/Shader2D.ts":
/*!***************************************************!*\
  !*** ./src/core/laya/webgl/shader/d2/Shader2D.ts ***!
  \***************************************************/
/*! exports provided: Shader2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Shader2D\", function() { return Shader2D; });\n/* harmony import */ var _ShaderDefines2D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././ShaderDefines2D */ \"./src/core/laya/webgl/shader/d2/ShaderDefines2D.ts\");\n/* harmony import */ var _canvas_DrawStyle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../canvas/DrawStyle */ \"./src/core/laya/webgl/canvas/DrawStyle.ts\");\n/* harmony import */ var _Shader__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Shader */ \"./src/core/laya/webgl/shader/Shader.ts\");\n\r\n\r\n\r\nvar texture_vs = __webpack_require__(/*! ./files/texture.vs.glsl */ \"./src/core/laya/webgl/shader/d2/files/texture.vs.glsl\");\r\nclass Shader2D {\r\n    constructor() {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        this.ALPHA = 1;\r\n        this.defines = new _ShaderDefines2D__WEBPACK_IMPORTED_MODULE_0__[\"ShaderDefines2D\"]();\r\n        this.shaderType = 0;\r\n        this.fillStyle = _canvas_DrawStyle__WEBPACK_IMPORTED_MODULE_1__[\"DrawStyle\"].DEFAULT;\r\n        this.strokeStyle = _canvas_DrawStyle__WEBPACK_IMPORTED_MODULE_1__[\"DrawStyle\"].DEFAULT;\r\n    }\r\n    destroy() {\r\n        this.defines = null;\r\n        this.filters = null;\r\n    }\r\n    static __init__() {\r\n        var vs, ps;\r\n        vs = __webpack_require__(/*! ./files/texture.vs.glsl */ \"./src/core/laya/webgl/shader/d2/files/texture.vs.glsl\");\r\n        ps = __webpack_require__(/*! ./files/texture.ps.glsl */ \"./src/core/laya/webgl/shader/d2/files/texture.ps.glsl\");\r\n        _Shader__WEBPACK_IMPORTED_MODULE_2__[\"Shader\"].preCompile2D(0, _ShaderDefines2D__WEBPACK_IMPORTED_MODULE_0__[\"ShaderDefines2D\"].TEXTURE2D, vs, ps, null);\r\n        vs = __webpack_require__(/*! ./files/primitive.vs.glsl */ \"./src/core/laya/webgl/shader/d2/files/primitive.vs.glsl\");\r\n        ps = __webpack_require__(/*! ./files/primitive.ps.glsl */ \"./src/core/laya/webgl/shader/d2/files/primitive.ps.glsl\");\r\n        _Shader__WEBPACK_IMPORTED_MODULE_2__[\"Shader\"].preCompile2D(0, _ShaderDefines2D__WEBPACK_IMPORTED_MODULE_0__[\"ShaderDefines2D\"].PRIMITIVE, vs, ps, null);\r\n        vs = __webpack_require__(/*! ./skinAnishader/skinShader.vs.glsl */ \"./src/core/laya/webgl/shader/d2/skinAnishader/skinShader.vs.glsl\");\r\n        ps = __webpack_require__(/*! ./skinAnishader/skinShader.ps.glsl */ \"./src/core/laya/webgl/shader/d2/skinAnishader/skinShader.ps.glsl\");\r\n        _Shader__WEBPACK_IMPORTED_MODULE_2__[\"Shader\"].preCompile2D(0, _ShaderDefines2D__WEBPACK_IMPORTED_MODULE_0__[\"ShaderDefines2D\"].SKINMESH, vs, ps, null);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/d2/Shader2D.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/d2/Shader2X.ts":
/*!***************************************************!*\
  !*** ./src/core/laya/webgl/shader/d2/Shader2X.ts ***!
  \***************************************************/
/*! exports provided: Shader2X */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Shader2X\", function() { return Shader2X; });\n/* harmony import */ var _Shader__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Shader */ \"./src/core/laya/webgl/shader/Shader.ts\");\n\r\nclass Shader2X extends _Shader__WEBPACK_IMPORTED_MODULE_0__[\"Shader\"] {\r\n    constructor(vs, ps, saveName = null, nameMap = null, bindAttrib = null) {\r\n        super(vs, ps, saveName, nameMap, bindAttrib);\r\n        this._params2dQuick2 = null;\r\n        this._shaderValueWidth = 0;\r\n        this._shaderValueHeight = 0;\r\n    }\r\n    //TODO:coverage\r\n    /*override*/ _disposeResource() {\r\n        super._disposeResource();\r\n        this._params2dQuick2 = null;\r\n    }\r\n    //TODO:coverage\r\n    upload2dQuick2(shaderValue) {\r\n        this.upload(shaderValue, this._params2dQuick2 || this._make2dQuick2());\r\n    }\r\n    //去掉size的所有的uniform\r\n    _make2dQuick2() {\r\n        if (!this._params2dQuick2) {\r\n            this._params2dQuick2 = [];\r\n            var params = this._params, one;\r\n            for (var i = 0, n = params.length; i < n; i++) {\r\n                one = params[i];\r\n                if (one.name !== \"size\")\r\n                    this._params2dQuick2.push(one);\r\n            }\r\n        }\r\n        return this._params2dQuick2;\r\n    }\r\n    static create(vs, ps, saveName = null, nameMap = null, bindAttrib = null) {\r\n        return new Shader2X(vs, ps, saveName, nameMap, bindAttrib);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/d2/Shader2X.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/d2/ShaderDefines2D.ts":
/*!**********************************************************!*\
  !*** ./src/core/laya/webgl/shader/d2/ShaderDefines2D.ts ***!
  \**********************************************************/
/*! exports provided: ShaderDefines2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShaderDefines2D\", function() { return ShaderDefines2D; });\n/* harmony import */ var _ShaderDefinesBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ShaderDefinesBase */ \"./src/core/laya/webgl/shader/ShaderDefinesBase.ts\");\n\r\nclass ShaderDefines2D extends _ShaderDefinesBase__WEBPACK_IMPORTED_MODULE_0__[\"ShaderDefinesBase\"] {\r\n    constructor() {\r\n        super(ShaderDefines2D.__name2int, ShaderDefines2D.__int2name, ShaderDefines2D.__int2nameMap);\r\n    }\r\n    static __init__() {\r\n        ShaderDefines2D.reg(\"TEXTURE2D\", ShaderDefines2D.TEXTURE2D);\r\n        ShaderDefines2D.reg(\"PRIMITIVE\", ShaderDefines2D.PRIMITIVE);\r\n        ShaderDefines2D.reg(\"GLOW_FILTER\", ShaderDefines2D.FILTERGLOW);\r\n        ShaderDefines2D.reg(\"BLUR_FILTER\", ShaderDefines2D.FILTERBLUR);\r\n        ShaderDefines2D.reg(\"COLOR_FILTER\", ShaderDefines2D.FILTERCOLOR);\r\n        ShaderDefines2D.reg(\"COLOR_ADD\", ShaderDefines2D.COLORADD);\r\n        ShaderDefines2D.reg(\"WORLDMAT\", ShaderDefines2D.WORLDMAT);\r\n        ShaderDefines2D.reg(\"FILLTEXTURE\", ShaderDefines2D.FILLTEXTURE);\r\n        ShaderDefines2D.reg(\"FSHIGHPRECISION\", ShaderDefines2D.SHADERDEFINE_FSHIGHPRECISION);\r\n        ShaderDefines2D.reg('MVP3D', ShaderDefines2D.MVP3D);\r\n    }\r\n    static reg(name, value) {\r\n        this._reg(name, value, ShaderDefines2D.__name2int, ShaderDefines2D.__int2name);\r\n    }\r\n    //TODO:coverage\r\n    static toText(value, int2name, int2nameMap) {\r\n        return this._toText(value, int2name, int2nameMap);\r\n    }\r\n    //TODO:coverage\r\n    static toInt(names) {\r\n        return this._toInt(names, ShaderDefines2D.__name2int);\r\n    }\r\n}\r\nShaderDefines2D.TEXTURE2D = 0x01;\r\nShaderDefines2D.PRIMITIVE = 0x04;\r\nShaderDefines2D.FILTERGLOW = 0x08;\r\nShaderDefines2D.FILTERBLUR = 0x10;\r\nShaderDefines2D.FILTERCOLOR = 0x20;\r\nShaderDefines2D.COLORADD = 0x40;\r\nShaderDefines2D.WORLDMAT = 0x80;\r\nShaderDefines2D.FILLTEXTURE = 0x100;\r\nShaderDefines2D.SKINMESH = 0x200;\r\nShaderDefines2D.SHADERDEFINE_FSHIGHPRECISION = 0x400;\r\nShaderDefines2D.MVP3D = 0x800;\r\nShaderDefines2D.NOOPTMASK = ShaderDefines2D.FILTERGLOW | ShaderDefines2D.FILTERBLUR | ShaderDefines2D.FILTERCOLOR | ShaderDefines2D.FILLTEXTURE; //有这些定义的不要优化。见submittexture\r\nShaderDefines2D.__name2int = {};\r\nShaderDefines2D.__int2name = [];\r\nShaderDefines2D.__int2nameMap = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/d2/ShaderDefines2D.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/d2/files/primitive.ps.glsl":
/*!***************************************************************!*\
  !*** ./src/core/laya/webgl/shader/d2/files/primitive.ps.glsl ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"precision mediump float;\\r\\n//precision mediump float;\\r\\nvarying vec4 color;\\r\\n//uniform float alpha;\\r\\nvarying vec2 cliped;\\r\\nvoid main(){\\r\\n\\t//vec4 a=vec4(color.r, color.g, color.b, 1);\\r\\n\\t//a.a*=alpha;\\r\\n    gl_FragColor= color;// vec4(color.r, color.g, color.b, alpha);\\r\\n\\tgl_FragColor.rgb*=color.a;\\r\\n\\tif(cliped.x<0.) discard;\\r\\n\\tif(cliped.x>1.) discard;\\r\\n\\tif(cliped.y<0.) discard;\\r\\n\\tif(cliped.y>1.) discard;\\r\\n}\"\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/d2/files/primitive.ps.glsl?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/d2/files/primitive.vs.glsl":
/*!***************************************************************!*\
  !*** ./src/core/laya/webgl/shader/d2/files/primitive.vs.glsl ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"attribute vec4 position;\\r\\nattribute vec4 attribColor;\\r\\n//attribute vec4 clipDir;\\r\\n//attribute vec2 clipRect;\\r\\nuniform vec4 clipMatDir;\\r\\nuniform vec2 clipMatPos;\\r\\n#ifdef WORLDMAT\\r\\n\\tuniform mat4 mmat;\\r\\n#endif\\r\\nuniform mat4 u_mmat2;\\r\\n//uniform vec2 u_pos;\\r\\nuniform vec2 size;\\r\\nvarying vec4 color;\\r\\n//vec4 dirxy=vec4(0.9,0.1, -0.1,0.9);\\r\\n//vec4 clip=vec4(100.,30.,300.,600.);\\r\\nvarying vec2 cliped;\\r\\nvoid main(){\\r\\n\\t\\r\\n#ifdef WORLDMAT\\r\\n\\tvec4 pos=mmat*vec4(position.xy,0.,1.);\\r\\n\\tgl_Position =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\\r\\n#else\\r\\n\\tgl_Position =vec4((position.x/size.x-0.5)*2.0,(0.5-position.y/size.y)*2.0,position.z,1.0);\\r\\n#endif\\t\\r\\n\\tfloat clipw = length(clipMatDir.xy);\\r\\n\\tfloat cliph = length(clipMatDir.zw);\\r\\n\\tvec2 clippos = position.xy - clipMatPos.xy;\\t//pos已经应用矩阵了，为了减的有意义，clip的位置也要缩放\\r\\n\\tif(clipw>20000. && cliph>20000.)\\r\\n\\t\\tcliped = vec2(0.5,0.5);\\r\\n\\telse {\\r\\n\\t\\t//clipdir是带缩放的方向，由于上面clippos是在缩放后的空间计算的，所以需要把方向先normalize一下\\r\\n\\t\\tcliped=vec2( dot(clippos,clipMatDir.xy)/clipw/clipw, dot(clippos,clipMatDir.zw)/cliph/cliph);\\r\\n\\t}\\r\\n  //pos2d.x = dot(clippos,dirx);\\r\\n  color=attribColor/255.;\\r\\n}\"\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/d2/files/primitive.vs.glsl?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/d2/files/texture.ps.glsl":
/*!*************************************************************!*\
  !*** ./src/core/laya/webgl/shader/d2/files/texture.ps.glsl ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"/*\\r\\n\\ttexture和fillrect使用的。\\r\\n*/\\r\\n#ifdef FSHIGHPRECISION\\r\\nprecision highp float;\\r\\n#else\\r\\nprecision mediump float;\\r\\n#endif\\r\\n\\r\\nvarying vec4 v_texcoordAlpha;\\r\\nvarying vec4 v_color;\\r\\nvarying float v_useTex;\\r\\nuniform sampler2D texture;\\r\\nvarying vec2 cliped;\\r\\n\\r\\n#ifdef BLUR_FILTER\\r\\nuniform vec4 strength_sig2_2sig2_gauss1;\\r\\nuniform vec2 blurInfo;\\r\\n\\r\\n#define PI 3.141593\\r\\n\\r\\nfloat getGaussian(float x, float y){\\r\\n    return strength_sig2_2sig2_gauss1.w*exp(-(x*x+y*y)/strength_sig2_2sig2_gauss1.z);\\r\\n}\\r\\n\\r\\nvec4 blur(){\\r\\n    const float blurw = 9.0;\\r\\n    vec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\\r\\n    vec2 halfsz=vec2(blurw,blurw)/2.0/blurInfo;    \\r\\n    vec2 startpos=v_texcoordAlpha.xy-halfsz;\\r\\n    vec2 ctexcoord = startpos;\\r\\n    vec2 step = 1.0/blurInfo;  //每个像素      \\r\\n    \\r\\n    for(float y = 0.0;y<=blurw; ++y){\\r\\n        ctexcoord.x=startpos.x;\\r\\n        for(float x = 0.0;x<=blurw; ++x){\\r\\n            //TODO 纹理坐标的固定偏移应该在vs中处理\\r\\n            vec4Color += texture2D(texture, ctexcoord)*getGaussian(x-blurw/2.0,y-blurw/2.0);\\r\\n            ctexcoord.x+=step.x;\\r\\n        }\\r\\n        ctexcoord.y+=step.y;\\r\\n    }\\r\\n    return vec4Color;\\r\\n}\\r\\n#endif\\r\\n\\r\\n#ifdef COLOR_FILTER\\r\\nuniform vec4 colorAlpha;\\r\\nuniform mat4 colorMat;\\r\\n#endif\\r\\n\\r\\n#ifdef GLOW_FILTER\\r\\nuniform vec4 u_color;\\r\\nuniform vec4 u_blurInfo1;\\r\\nuniform vec4 u_blurInfo2;\\r\\n#endif\\r\\n\\r\\n#ifdef COLOR_ADD\\r\\nuniform vec4 colorAdd;\\r\\n#endif\\r\\n\\r\\n#ifdef FILLTEXTURE\\t\\r\\nuniform vec4 u_TexRange;//startu,startv,urange, vrange\\r\\n#endif\\r\\nvoid main() {\\r\\n\\tif(cliped.x<0.) discard;\\r\\n\\tif(cliped.x>1.) discard;\\r\\n\\tif(cliped.y<0.) discard;\\r\\n\\tif(cliped.y>1.) discard;\\r\\n\\t\\r\\n#ifdef FILLTEXTURE\\t\\r\\n   vec4 color= texture2D(texture, fract(v_texcoordAlpha.xy)*u_TexRange.zw + u_TexRange.xy);\\r\\n#else\\r\\n   vec4 color= texture2D(texture, v_texcoordAlpha.xy);\\r\\n#endif\\r\\n\\r\\n   if(v_useTex<=0.)color = vec4(1.,1.,1.,1.);\\r\\n   color.a*=v_color.w;\\r\\n   //color.rgb*=v_color.w;\\r\\n   color.rgb*=v_color.rgb;\\r\\n   gl_FragColor=color;\\r\\n   \\r\\n   #ifdef COLOR_ADD\\r\\n\\tgl_FragColor = vec4(colorAdd.rgb,colorAdd.a*gl_FragColor.a);\\r\\n\\tgl_FragColor.xyz *= colorAdd.a;\\r\\n   #endif\\r\\n   \\r\\n   #ifdef BLUR_FILTER\\r\\n\\tgl_FragColor =   blur();\\r\\n\\tgl_FragColor.w*=v_color.w;   \\r\\n   #endif\\r\\n   \\r\\n   #ifdef COLOR_FILTER\\r\\n\\tmat4 alphaMat =colorMat;\\r\\n\\r\\n\\talphaMat[0][3] *= gl_FragColor.a;\\r\\n\\talphaMat[1][3] *= gl_FragColor.a;\\r\\n\\talphaMat[2][3] *= gl_FragColor.a;\\r\\n\\r\\n\\tgl_FragColor = gl_FragColor * alphaMat;\\r\\n\\tgl_FragColor += colorAlpha/255.0*gl_FragColor.a;\\r\\n   #endif\\r\\n   \\r\\n   #ifdef GLOW_FILTER\\r\\n\\tconst float c_IterationTime = 10.0;\\r\\n\\tfloat floatIterationTotalTime = c_IterationTime * c_IterationTime;\\r\\n\\tvec4 vec4Color = vec4(0.0,0.0,0.0,0.0);\\r\\n\\tvec2 vec2FilterDir = vec2(-(u_blurInfo1.z)/u_blurInfo2.x,-(u_blurInfo1.w)/u_blurInfo2.y);\\r\\n\\tvec2 vec2FilterOff = vec2(u_blurInfo1.x/u_blurInfo2.x/c_IterationTime * 2.0,u_blurInfo1.y/u_blurInfo2.y/c_IterationTime * 2.0);\\r\\n\\tfloat maxNum = u_blurInfo1.x * u_blurInfo1.y;\\r\\n\\tvec2 vec2Off = vec2(0.0,0.0);\\r\\n\\tfloat floatOff = c_IterationTime/2.0;\\r\\n\\tfor(float i = 0.0;i<=c_IterationTime; ++i){\\r\\n\\t\\tfor(float j = 0.0;j<=c_IterationTime; ++j){\\r\\n\\t\\t\\tvec2Off = vec2(vec2FilterOff.x * (i - floatOff),vec2FilterOff.y * (j - floatOff));\\r\\n\\t\\t\\tvec4Color += texture2D(texture, v_texcoordAlpha.xy + vec2FilterDir + vec2Off)/floatIterationTotalTime;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tgl_FragColor = vec4(u_color.rgb,vec4Color.a * u_blurInfo2.z);\\r\\n\\tgl_FragColor.rgb *= gl_FragColor.a;   \\r\\n   #endif\\r\\n   \\r\\n}\"\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/d2/files/texture.ps.glsl?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/d2/files/texture.vs.glsl":
/*!*************************************************************!*\
  !*** ./src/core/laya/webgl/shader/d2/files/texture.vs.glsl ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"/*\\r\\n\\ttexture和fillrect使用的。\\r\\n*/\\r\\nattribute vec4 posuv;\\r\\nattribute vec4 attribColor;\\r\\nattribute vec4 attribFlags;\\r\\n//attribute vec4 clipDir;\\r\\n//attribute vec2 clipRect;\\r\\nuniform vec4 clipMatDir;\\r\\nuniform vec2 clipMatPos;\\t\\t// 这个是全局的，不用再应用矩阵了。\\r\\nvarying vec2 cliped;\\r\\nuniform vec2 size;\\r\\nuniform vec2 clipOff;\\t\\t\\t// 使用要把clip偏移。cacheas normal用. 只用了[0]\\r\\n#ifdef WORLDMAT\\r\\n\\tuniform mat4 mmat;\\r\\n#endif\\r\\n#ifdef MVP3D\\r\\n\\tuniform mat4 u_MvpMatrix;\\r\\n#endif\\r\\nvarying vec4 v_texcoordAlpha;\\r\\nvarying vec4 v_color;\\r\\nvarying float v_useTex;\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\tvec4 pos = vec4(posuv.xy,0.,1.);\\r\\n#ifdef WORLDMAT\\r\\n\\tpos=mmat*pos;\\r\\n#endif\\r\\n\\tvec4 pos1  =vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,0.,1.0);\\r\\n#ifdef MVP3D\\r\\n\\tgl_Position=u_MvpMatrix*pos1;\\r\\n#else\\r\\n\\tgl_Position=pos1;\\r\\n#endif\\r\\n\\tv_texcoordAlpha.xy = posuv.zw;\\r\\n\\t//v_texcoordAlpha.z = attribColor.a/255.0;\\r\\n\\tv_color = attribColor/255.0;\\r\\n\\tv_color.xyz*=v_color.w;//反正后面也要预乘\\r\\n\\t\\r\\n\\tv_useTex = attribFlags.r/255.0;\\r\\n\\tfloat clipw = length(clipMatDir.xy);\\r\\n\\tfloat cliph = length(clipMatDir.zw);\\r\\n\\t\\r\\n\\tvec2 clpos = clipMatPos.xy;\\r\\n\\t#ifdef WORLDMAT\\r\\n\\t\\t// 如果有mmat，需要修改clipMatPos,因为 这是cacheas normal （如果不是就错了）， clipMatPos被去掉了偏移\\r\\n\\t\\tif(clipOff[0]>0.0){\\r\\n\\t\\t\\tclpos.x+=mmat[3].x;\\t//tx\\t最简单处理\\r\\n\\t\\t\\tclpos.y+=mmat[3].y;\\t//ty\\r\\n\\t\\t}\\r\\n\\t#endif\\r\\n\\tvec2 clippos = pos.xy - clpos;\\t//pos已经应用矩阵了，为了减的有意义，clip的位置也要缩放\\r\\n\\tif(clipw>20000. && cliph>20000.)\\r\\n\\t\\tcliped = vec2(0.5,0.5);\\r\\n\\telse {\\r\\n\\t\\t//转成0到1之间。/clipw/clipw 表示clippos与normalize之后的clip朝向点积之后，再除以clipw\\r\\n\\t\\tcliped=vec2( dot(clippos,clipMatDir.xy)/clipw/clipw, dot(clippos,clipMatDir.zw)/cliph/cliph);\\r\\n\\t}\\r\\n\\r\\n}\"\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/d2/files/texture.vs.glsl?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/d2/skinAnishader/SkinMeshBuffer.ts":
/*!***********************************************************************!*\
  !*** ./src/core/laya/webgl/shader/d2/skinAnishader/SkinMeshBuffer.ts ***!
  \***********************************************************************/
/*! exports provided: SkinMeshBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SkinMeshBuffer\", function() { return SkinMeshBuffer; });\n/* harmony import */ var _WebGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../WebGL */ \"./src/core/laya/webgl/WebGL.ts\");\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n/* harmony import */ var _utils_IndexBuffer2D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../utils/IndexBuffer2D */ \"./src/core/laya/webgl/utils/IndexBuffer2D.ts\");\n/* harmony import */ var _utils_VertexBuffer2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/VertexBuffer2D */ \"./src/core/laya/webgl/utils/VertexBuffer2D.ts\");\n\r\n\r\n\r\n\r\nclass SkinMeshBuffer {\r\n    //TODO:coverage\r\n    constructor() {\r\n        var gl = _WebGL__WEBPACK_IMPORTED_MODULE_0__[\"WebGL\"].mainContext;\r\n        this.ib = _utils_IndexBuffer2D__WEBPACK_IMPORTED_MODULE_2__[\"IndexBuffer2D\"].create(_WebGLContext__WEBPACK_IMPORTED_MODULE_1__[\"WebGLContext\"].DYNAMIC_DRAW);\r\n        this.vb = _utils_VertexBuffer2D__WEBPACK_IMPORTED_MODULE_3__[\"VertexBuffer2D\"].create(8);\r\n    }\r\n    //TODO:coverage\r\n    static getInstance() {\r\n        return SkinMeshBuffer.instance = SkinMeshBuffer.instance || new SkinMeshBuffer();\r\n    }\r\n    //TODO:coverage\r\n    addSkinMesh(skinMesh) {\r\n        //skinMesh.getData(vb, ib, vb.byteLength / 32);\r\n        skinMesh.getData2(this.vb, this.ib, this.vb._byteLength / 32);\r\n    }\r\n    reset() {\r\n        this.vb.clear();\r\n        this.ib.clear();\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/d2/skinAnishader/SkinMeshBuffer.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/d2/skinAnishader/SkinSV.ts":
/*!***************************************************************!*\
  !*** ./src/core/laya/webgl/shader/d2/skinAnishader/SkinSV.ts ***!
  \***************************************************************/
/*! exports provided: SkinSV */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SkinSV\", function() { return SkinSV; });\n/* harmony import */ var _ShaderDefines2D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ShaderDefines2D */ \"./src/core/laya/webgl/shader/d2/ShaderDefines2D.ts\");\n/* harmony import */ var _value_Value2D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../value/Value2D */ \"./src/core/laya/webgl/shader/d2/value/Value2D.ts\");\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n/* harmony import */ var _utils_CONST3D2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../utils/CONST3D2D */ \"./src/core/laya/webgl/utils/CONST3D2D.ts\");\n\r\n\r\n\r\n\r\nclass SkinSV extends _value_Value2D__WEBPACK_IMPORTED_MODULE_1__[\"Value2D\"] {\r\n    //TODO:coverage\r\n    constructor(type) {\r\n        super(_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_0__[\"ShaderDefines2D\"].SKINMESH, 0);\r\n        this.offsetX = 300;\r\n        this.offsetY = 0;\r\n        var _vlen = 8 * _utils_CONST3D2D__WEBPACK_IMPORTED_MODULE_3__[\"CONST3D2D\"].BYTES_PE;\r\n        this.position = [2, _WebGLContext__WEBPACK_IMPORTED_MODULE_2__[\"WebGLContext\"].FLOAT, false, _vlen, 0];\r\n        this.texcoord = [2, _WebGLContext__WEBPACK_IMPORTED_MODULE_2__[\"WebGLContext\"].FLOAT, false, _vlen, 2 * _utils_CONST3D2D__WEBPACK_IMPORTED_MODULE_3__[\"CONST3D2D\"].BYTES_PE];\r\n        this.color = [4, _WebGLContext__WEBPACK_IMPORTED_MODULE_2__[\"WebGLContext\"].FLOAT, false, _vlen, 4 * _utils_CONST3D2D__WEBPACK_IMPORTED_MODULE_3__[\"CONST3D2D\"].BYTES_PE];\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/d2/skinAnishader/SkinSV.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/d2/skinAnishader/skinShader.ps.glsl":
/*!************************************************************************!*\
  !*** ./src/core/laya/webgl/shader/d2/skinAnishader/skinShader.ps.glsl ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"precision mediump float;\\r\\nvarying vec2 v_texcoord;\\r\\nvarying vec4 v_color;\\r\\nuniform sampler2D texture;\\r\\nuniform float alpha;\\r\\nvoid main() {\\r\\n\\tvec4 t_color = texture2D(texture, v_texcoord);\\r\\n\\tgl_FragColor = t_color.rgba * v_color;\\r\\n\\tgl_FragColor *= alpha;\\r\\n}\"\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/d2/skinAnishader/skinShader.ps.glsl?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/d2/skinAnishader/skinShader.vs.glsl":
/*!************************************************************************!*\
  !*** ./src/core/laya/webgl/shader/d2/skinAnishader/skinShader.vs.glsl ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"attribute vec2 position;\\r\\nattribute vec2 texcoord;\\r\\nattribute vec4 color;\\r\\nuniform vec2 size;\\r\\nuniform float offsetX;\\r\\nuniform float offsetY;\\r\\nuniform mat4 mmat;\\r\\nuniform mat4 u_mmat2;\\r\\nvarying vec2 v_texcoord;\\r\\nvarying vec4 v_color;\\r\\nvoid main() {\\r\\n  vec4 pos=mmat*u_mmat2*vec4(offsetX+position.x,offsetY+position.y,0,1 );\\r\\n  gl_Position = vec4((pos.x/size.x-0.5)*2.0,(0.5-pos.y/size.y)*2.0,pos.z,1.0);\\r\\n  v_color = color;\\r\\n  v_color.rgb *= v_color.a;\\r\\n  v_texcoord = texcoord;  \\r\\n}\"\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/d2/skinAnishader/skinShader.vs.glsl?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/d2/value/PrimitiveSV.ts":
/*!************************************************************!*\
  !*** ./src/core/laya/webgl/shader/d2/value/PrimitiveSV.ts ***!
  \************************************************************/
/*! exports provided: PrimitiveSV */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"PrimitiveSV\", function() { return PrimitiveSV; });\n/* harmony import */ var _Value2D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Value2D */ \"./src/core/laya/webgl/shader/d2/value/Value2D.ts\");\n/* harmony import */ var _ShaderDefines2D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ShaderDefines2D */ \"./src/core/laya/webgl/shader/d2/ShaderDefines2D.ts\");\n\r\n\r\nclass PrimitiveSV extends _Value2D__WEBPACK_IMPORTED_MODULE_0__[\"Value2D\"] {\r\n    constructor(args) {\r\n        super(_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_1__[\"ShaderDefines2D\"].PRIMITIVE, 0);\r\n        this._attribLocation = ['position', 0, 'attribColor', 1]; // , 'clipDir', 2, 'clipRect', 3];\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/d2/value/PrimitiveSV.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/d2/value/TextureSV.ts":
/*!**********************************************************!*\
  !*** ./src/core/laya/webgl/shader/d2/value/TextureSV.ts ***!
  \**********************************************************/
/*! exports provided: TextureSV */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextureSV\", function() { return TextureSV; });\n/* harmony import */ var _Value2D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Value2D */ \"./src/core/laya/webgl/shader/d2/value/Value2D.ts\");\n/* harmony import */ var _WebGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../WebGL */ \"./src/core/laya/webgl/WebGL.ts\");\n/* harmony import */ var _ShaderDefines2D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ShaderDefines2D */ \"./src/core/laya/webgl/shader/d2/ShaderDefines2D.ts\");\n\r\n\r\n\r\nclass TextureSV extends _Value2D__WEBPACK_IMPORTED_MODULE_0__[\"Value2D\"] {\r\n    constructor(subID = 0) {\r\n        super(_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_2__[\"ShaderDefines2D\"].TEXTURE2D, subID);\r\n        this.strength = 0;\r\n        this.blurInfo = null;\r\n        this.colorMat = null;\r\n        this.colorAlpha = null;\r\n        this._attribLocation = ['posuv', 0, 'attribColor', 1, 'attribFlags', 2]; // , 'clipDir', 3, 'clipRect', 4];\r\n    }\r\n    /*override*/ clear() {\r\n        this.texture = null;\r\n        this.shader = null;\r\n        this.defines._value = this.subID + (_WebGL__WEBPACK_IMPORTED_MODULE_1__[\"WebGL\"].shaderHighPrecision ? _ShaderDefines2D__WEBPACK_IMPORTED_MODULE_2__[\"ShaderDefines2D\"].SHADERDEFINE_FSHIGHPRECISION : 0);\r\n        //defines.setValue(0);\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/d2/value/TextureSV.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/shader/d2/value/Value2D.ts":
/*!********************************************************!*\
  !*** ./src/core/laya/webgl/shader/d2/value/Value2D.ts ***!
  \********************************************************/
/*! exports provided: Value2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Value2D\", function() { return Value2D; });\n/* harmony import */ var _PrimitiveSV__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././PrimitiveSV */ \"./src/core/laya/webgl/shader/d2/value/PrimitiveSV.ts\");\n/* harmony import */ var _TextureSV__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././TextureSV */ \"./src/core/laya/webgl/shader/d2/value/TextureSV.ts\");\n/* harmony import */ var _resource_Context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../../resource/Context */ \"./src/core/laya/resource/Context.ts\");\n/* harmony import */ var _WebGL__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../WebGL */ \"./src/core/laya/webgl/WebGL.ts\");\n/* harmony import */ var _skinAnishader_SkinSV__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../skinAnishader/SkinSV */ \"./src/core/laya/webgl/shader/d2/skinAnishader/SkinSV.ts\");\n/* harmony import */ var _Shader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Shader */ \"./src/core/laya/webgl/shader/Shader.ts\");\n/* harmony import */ var _Shader2X__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Shader2X */ \"./src/core/laya/webgl/shader/d2/Shader2X.ts\");\n/* harmony import */ var _ShaderDefines2D__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../ShaderDefines2D */ \"./src/core/laya/webgl/shader/d2/ShaderDefines2D.ts\");\n/* harmony import */ var _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../../utils/RenderState2D */ \"./src/core/laya/webgl/utils/RenderState2D.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass Value2D {\r\n    //public var clipDir:Array = [Context._MAXSIZE, 0, 0, Context._MAXSIZE];\t\t//裁剪信息\r\n    //public var clipRect:Array = [0, 0];\t\t\t\t\t\t//裁剪位置\r\n    constructor(mainID, subID) {\r\n        this.defines = new _ShaderDefines2D__WEBPACK_IMPORTED_MODULE_7__[\"ShaderDefines2D\"]();\r\n        this.size = [0, 0];\r\n        this.alpha = 1.0; //这个目前只给setIBVB用。其他的都放到attribute的color中了\r\n        this.ALPHA = 1.0; //这个？\r\n        this.subID = 0;\r\n        this.ref = 1;\r\n        this._cacheID = 0;\r\n        this.clipMatDir = [_resource_Context__WEBPACK_IMPORTED_MODULE_2__[\"Context\"]._MAXSIZE, 0, 0, _resource_Context__WEBPACK_IMPORTED_MODULE_2__[\"Context\"]._MAXSIZE];\r\n        this.clipMatPos = [0, 0];\r\n        this.clipOff = [0, 0]; // 裁剪是否需要加上偏移，cacheas normal用\r\n        this.mainID = mainID;\r\n        this.subID = subID;\r\n        this.textureHost = null;\r\n        this.texture = null;\r\n        //this.fillStyle = null;\r\n        this.color = null;\r\n        //this.strokeStyle = null;\r\n        this.colorAdd = null;\r\n        this.u_mmat2 = null;\r\n        this._cacheID = mainID | subID;\r\n        this._inClassCache = Value2D._cache[this._cacheID];\r\n        if (mainID > 0 && !this._inClassCache) {\r\n            this._inClassCache = Value2D._cache[this._cacheID] = [];\r\n            this._inClassCache._length = 0;\r\n        }\r\n        this.clear();\r\n    }\r\n    static _initone(type, classT) {\r\n        Value2D._typeClass[type] = classT;\r\n        Value2D._cache[type] = [];\r\n        Value2D._cache[type]._length = 0;\r\n    }\r\n    static __init__() {\r\n        Value2D._initone(_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_7__[\"ShaderDefines2D\"].PRIMITIVE, _PrimitiveSV__WEBPACK_IMPORTED_MODULE_0__[\"PrimitiveSV\"]);\r\n        Value2D._initone(_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_7__[\"ShaderDefines2D\"].SKINMESH, _skinAnishader_SkinSV__WEBPACK_IMPORTED_MODULE_4__[\"SkinSV\"]);\r\n        Value2D._initone(_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_7__[\"ShaderDefines2D\"].TEXTURE2D, _TextureSV__WEBPACK_IMPORTED_MODULE_1__[\"TextureSV\"]);\r\n        Value2D._initone(_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_7__[\"ShaderDefines2D\"].TEXTURE2D | _ShaderDefines2D__WEBPACK_IMPORTED_MODULE_7__[\"ShaderDefines2D\"].FILTERGLOW, _TextureSV__WEBPACK_IMPORTED_MODULE_1__[\"TextureSV\"]);\r\n    }\r\n    setValue(value) { }\r\n    //throw new Error(\"todo in subclass\");\r\n    //不知道什么意思，这个名字太难懂，反正只有submitIBVB中用到。直接把代码拷贝到哪里\r\n    //public function refresh():ShaderValue\r\n    _ShaderWithCompile() {\r\n        var ret = _Shader__WEBPACK_IMPORTED_MODULE_5__[\"Shader\"].withCompile2D(0, this.mainID, this.defines.toNameDic(), this.mainID | this.defines._value, _Shader2X__WEBPACK_IMPORTED_MODULE_6__[\"Shader2X\"].create, this._attribLocation);\r\n        //ret.setAttributesLocation(_attribLocation); 由于上面函数的流程的修改，导致这里已经晚了\r\n        return ret;\r\n    }\r\n    upload() {\r\n        var renderstate2d = _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_8__[\"RenderState2D\"];\r\n        // 如果有矩阵的话，就设置 WORLDMAT 宏\r\n        _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_8__[\"RenderState2D\"].worldMatrix4 === _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_8__[\"RenderState2D\"].TEMPMAT4_ARRAY || this.defines.addInt(_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_7__[\"ShaderDefines2D\"].WORLDMAT);\r\n        this.mmat = renderstate2d.worldMatrix4;\r\n        if (_utils_RenderState2D__WEBPACK_IMPORTED_MODULE_8__[\"RenderState2D\"].matWVP) {\r\n            this.defines.addInt(_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_7__[\"ShaderDefines2D\"].MVP3D);\r\n            this.u_MvpMatrix = _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_8__[\"RenderState2D\"].matWVP.elements;\r\n        }\r\n        var sd = _Shader__WEBPACK_IMPORTED_MODULE_5__[\"Shader\"].sharders[this.mainID | this.defines._value] || this._ShaderWithCompile();\r\n        if (sd._shaderValueWidth !== renderstate2d.width || sd._shaderValueHeight !== renderstate2d.height) {\r\n            this.size[0] = renderstate2d.width;\r\n            this.size[1] = renderstate2d.height;\r\n            sd._shaderValueWidth = renderstate2d.width;\r\n            sd._shaderValueHeight = renderstate2d.height;\r\n            sd.upload(this, null);\r\n        }\r\n        else {\r\n            sd.upload(this, sd._params2dQuick2 || sd._make2dQuick2());\r\n        }\r\n    }\r\n    //TODO:coverage\r\n    setFilters(value) {\r\n        this.filters = value;\r\n        if (!value)\r\n            return;\r\n        var n = value.length, f;\r\n        for (var i = 0; i < n; i++) {\r\n            f = value[i];\r\n            if (f) {\r\n                this.defines.add(f.type); //搬到setValue中\r\n                f.action.setValue(this);\r\n            }\r\n        }\r\n    }\r\n    clear() {\r\n        this.defines._value = this.subID + (_WebGL__WEBPACK_IMPORTED_MODULE_3__[\"WebGL\"].shaderHighPrecision ? _ShaderDefines2D__WEBPACK_IMPORTED_MODULE_7__[\"ShaderDefines2D\"].SHADERDEFINE_FSHIGHPRECISION : 0);\r\n        this.clipOff[0] = 0;\r\n    }\r\n    release() {\r\n        if ((--this.ref) < 1) {\r\n            this._inClassCache && (this._inClassCache[this._inClassCache._length++] = this);\r\n            //this.fillStyle = null;\r\n            //this.strokeStyle = null;\r\n            this.clear();\r\n            this.filters = null;\r\n            this.ref = 1;\r\n            this.clipOff[0] = 0;\r\n        }\r\n    }\r\n    static create(mainType, subType) {\r\n        var types = Value2D._cache[mainType | subType];\r\n        if (types._length)\r\n            return types[--types._length];\r\n        else\r\n            return new Value2D._typeClass[mainType | subType](subType);\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\nValue2D._cache = [];\r\nValue2D._typeClass = [];\r\nValue2D.TEMPMAT4_ARRAY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shader/d2/value/Value2D.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/shapes/BasePoly.ts":
/*!************************************************!*\
  !*** ./src/core/laya/webgl/shapes/BasePoly.ts ***!
  \************************************************/
/*! exports provided: BasePoly */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BasePoly\", function() { return BasePoly; });\nclass BasePoly {\r\n    /**\r\n     * 构造线的三角形数据。根据一个位置数组生成vb和ib\r\n     * @param\tp\r\n     * @param\tindices\r\n     * @param\tlineWidth\r\n     * @param\tindexBase\t\t\t\t顶点开始的值，ib中的索引会加上这个\r\n     * @param\toutVertex\r\n     * @return\r\n     */\r\n    static createLine2(p, indices, lineWidth, indexBase, outVertex, loop) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        if (p.length < 4)\r\n            return null;\r\n        var points = BasePoly.tempData.length > (p.length + 2) ? BasePoly.tempData : new Array(p.length + 2); //可能有loop，所以+2\r\n        points[0] = p[0];\r\n        points[1] = p[1];\r\n        /*\r\n        var points:Array = p.concat();\r\n        if (loop) {\r\n            points.push(points[0], points[1]);\r\n        }\r\n        */\r\n        var newlen = 2; //points的下标，也是points的实际长度\r\n        var i = 0;\r\n        var length = p.length;\r\n        //先过滤一下太相近的点\r\n        for (i = 2; i < length; i += 2) {\r\n            if (Math.abs(p[i] - p[i - 2]) + Math.abs(p[i + 1] - p[i - 1]) > 0.01) { //只是判断是否重合，所以不用sqrt\r\n                points[newlen++] = p[i];\r\n                points[newlen++] = p[i + 1];\r\n            }\r\n        }\r\n        //如果终点和起点没有重合，且要求loop的情况的处理\r\n        if (loop && Math.abs(p[0] - points[newlen - 2]) + Math.abs(p[1] - points[newlen - 1]) > 0.01) {\r\n            points[newlen++] = p[0];\r\n            points[newlen++] = p[1];\r\n        }\r\n        var result = outVertex;\r\n        length = newlen / 2; //points可能有多余的点，所以要用inew来表示\r\n        var w = lineWidth / 2;\r\n        var px, py, p1x, p1y, p2x, p2y, p3x, p3y;\r\n        var perpx, perpy, perp2x, perp2y, perp3x, perp3y;\r\n        var a1, b1, c1, a2, b2, c2;\r\n        var denom, pdist, dist;\r\n        p1x = points[0];\r\n        p1y = points[1];\r\n        p2x = points[2];\r\n        p2y = points[3];\r\n        perpx = -(p1y - p2y);\r\n        perpy = p1x - p2x;\r\n        dist = Math.sqrt(perpx * perpx + perpy * perpy);\r\n        perpx = perpx / dist * w;\r\n        perpy = perpy / dist * w;\r\n        //应用矩阵。 只要旋转缩放\r\n        var tpx = perpx, tpy = perpy;\r\n        result.push(p1x - perpx, p1y - perpy, p1x + perpx, p1y + perpy);\r\n        for (i = 1; i < length - 1; i++) {\r\n            p1x = points[(i - 1) * 2];\r\n            p1y = points[(i - 1) * 2 + 1];\r\n            p2x = points[(i) * 2];\r\n            p2y = points[(i) * 2 + 1];\r\n            p3x = points[(i + 1) * 2];\r\n            p3y = points[(i + 1) * 2 + 1];\r\n            perpx = -(p1y - p2y);\r\n            perpy = p1x - p2x;\r\n            dist = Math.sqrt(perpx * perpx + perpy * perpy);\r\n            perpx = perpx / dist * w;\r\n            perpy = perpy / dist * w;\r\n            perp2x = -(p2y - p3y);\r\n            perp2y = p2x - p3x;\r\n            dist = Math.sqrt(perp2x * perp2x + perp2y * perp2y);\r\n            perp2x = perp2x / dist * w;\r\n            perp2y = perp2y / dist * w;\r\n            a1 = (-perpy + p1y) - (-perpy + p2y);\r\n            b1 = (-perpx + p2x) - (-perpx + p1x);\r\n            c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);\r\n            a2 = (-perp2y + p3y) - (-perp2y + p2y);\r\n            b2 = (-perp2x + p2x) - (-perp2x + p3x);\r\n            c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);\r\n            denom = a1 * b2 - a2 * b1;\r\n            if (Math.abs(denom) < 0.1) {\r\n                denom += 10.1;\r\n                result.push(p2x - perpx, p2y - perpy, p2x + perpx, p2y + perpy);\r\n                continue;\r\n            }\r\n            px = (b1 * c2 - b2 * c1) / denom;\r\n            py = (a2 * c1 - a1 * c2) / denom;\r\n            pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);\r\n            result.push(px, py, p2x - (px - p2x), p2y - (py - p2y));\r\n        }\r\n        p1x = points[newlen - 4];\r\n        p1y = points[newlen - 3];\r\n        p2x = points[newlen - 2];\r\n        p2y = points[newlen - 1];\r\n        perpx = -(p1y - p2y);\r\n        perpy = p1x - p2x;\r\n        dist = Math.sqrt(perpx * perpx + perpy * perpy);\r\n        perpx = perpx / dist * w;\r\n        perpy = perpy / dist * w;\r\n        result.push(p2x - perpx, p2y - perpy, p2x + perpx, p2y + perpy);\r\n        for (i = 1; i < length; i++) {\r\n            indices.push(indexBase + (i - 1) * 2, indexBase + (i - 1) * 2 + 1, indexBase + i * 2 + 1, indexBase + i * 2 + 1, indexBase + i * 2, indexBase + (i - 1) * 2);\r\n        }\r\n        return result;\r\n    }\r\n    /**\r\n     * 相邻的两段线，边界会相交，这些交点可以作为三角形的顶点。有两种可选，一种是采用左左,右右交点，一种是采用 左右，左右交点。当两段线夹角很小的时候，如果采用\r\n     * 左左，右右会产生很长很长的交点，这时候就要采用左右左右交点，相当于把尖角截断。\r\n     * 当采用左左右右交点的时候，直接用切线的垂线。采用左右左右的时候，用切线\r\n     * 切线直接采用两个方向的平均值。不能用3-1的方式，那样垂线和下一段可能都在同一方向（例如都在右方）\r\n     * 注意把重合的点去掉\r\n     * @param\tpath\r\n     * @param\tcolor\r\n     * @param\twidth\r\n     * @param\tloop\r\n     * @param\toutvb\r\n     * @param\tvbstride  顶点占用几个float,(bytelength/4)\r\n     * @param\toutib\r\n     * test:\r\n     * 横线\r\n     * [100,100, 400,100]\r\n     * 竖线\r\n     * [100,100, 100,400]\r\n     * 直角\r\n     * [100,100, 400,100, 400,400]\r\n     * 重合点\r\n     * [100,100,100,100,400,100]\r\n     * 同一直线上的点\r\n     * [100,100,100,200,100,3000]\r\n     * 像老式电视的左边不封闭的图形\r\n     * [98,176,  163,178, 95,66, 175,177, 198,178, 252,56, 209,178,  248,175,  248,266,  209,266, 227,277, 203,280, 188,271,  150,271, 140,283, 122,283, 131,268, 99,268]\r\n     *\r\n     */\r\n    //TODO:coverage\r\n    static createLineTriangle(path, color, width, loop, outvb, vbstride, outib) {\r\n        /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n        var points = path.slice();\r\n        var ptlen = points.length;\r\n        var p1x = points[0], p1y = points[1];\r\n        var p2x = points[2], p2y = points[2];\r\n        var len = 0;\r\n        var rp = 0;\r\n        var dx = 0, dy = 0;\r\n        //计算每一段的长度，取出有效数据。保存:长度，方向，拐角，切线\r\n        //x,y,len,dx,dy,tx,ty,dot\r\n        //数组中每个都表示当前点开始的长度，方向\r\n        //x,y,dx,dy\r\n        var pointnum = ptlen / 2;\r\n        if (pointnum <= 1)\r\n            return;\r\n        if (pointnum == 2) {\r\n            //TODO\r\n            return;\r\n        }\r\n        var tmpData = new Array(pointnum * 4); //TODO 做到外面\r\n        var realPtNum = 0; //去掉重复点后的实际点个数。同一直线上的点不做优化\r\n        //var segNum:int = pointnum + (loop?1:0);\r\n        var ci = 0;\r\n        for (var i = 0; i < pointnum - 1; i++) {\r\n            p1x = points[ci++], p1y = points[ci++];\r\n            p2x = points[ci++], p2y = points[ci++];\r\n            dx = p2x - p1x, dy = p2y - p1y;\r\n            if (dx != 0 && dy != 0) {\r\n                len = Math.sqrt(dx * dx + dy * dy);\r\n                if (len > 1e-3) {\r\n                    rp = realPtNum * 4;\r\n                    tmpData[rp] = p1x;\r\n                    tmpData[rp + 1] = p1y;\r\n                    tmpData[rp + 2] = dx / len;\r\n                    tmpData[rp + 3] = dy / len;\r\n                    realPtNum++;\r\n                }\r\n            }\r\n        }\r\n        if (loop) { //loop的话，需要取第一个点来算\r\n            p1x = points[ptlen - 2], p1y = points[ptlen - 1];\r\n            p2x = points[0], p2y = points[1];\r\n            dx = p2x - p1x, dy = p2y - p1y;\r\n            if (dx != 0 && dy != 0) { //如果长度为零的话，最后这个点就不用加了，上一个点就是指向了第一个点。\r\n                len = Math.sqrt(dx * dx + dy * dy);\r\n                if (len > 1e-3) {\r\n                    rp = realPtNum * 4;\r\n                    tmpData[rp] = p1x;\r\n                    tmpData[rp + 1] = p1y;\r\n                    tmpData[rp + 2] = dx / len;\r\n                    tmpData[rp + 3] = dy / len;\r\n                    realPtNum++;\r\n                }\r\n            }\r\n        }\r\n        else { //不是loop的话，直接取当前段的朝向，记录在上一个点上\r\n            rp = realPtNum * 4;\r\n            tmpData[rp] = p1x;\r\n            tmpData[rp + 1] = p1y;\r\n            tmpData[rp + 2] = dx / len;\r\n            tmpData[rp + 3] = dy / len;\r\n            realPtNum++;\r\n        }\r\n        ci = 0;\r\n        /**\r\n         * 根据前后两段的方向，计算垂线的方向，根据这个方向和任意一边的dxdy的垂线的点积为w/2可以得到长度。就可以得到增加的点\r\n         */\r\n        //如果相邻两段朝向的dot值接近-1，则表示反向了，需要改成切\r\n        for (i = 0; i < pointnum; i++) {\r\n            p1x = points[ci], p1y = points[ci + 1];\r\n            p2x = points[ci + 2], p2y = points[ci + 3];\r\n            var p3x = points[ci + 4], p3y = points[ci + 5];\r\n        }\r\n        if (loop) {\r\n        }\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\nBasePoly.tempData = new Array(256);\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shapes/BasePoly.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/shapes/Earcut.ts":
/*!**********************************************!*\
  !*** ./src/core/laya/webgl/shapes/Earcut.ts ***!
  \**********************************************/
/*! exports provided: Earcut */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Earcut\", function() { return Earcut; });\n/* harmony import */ var _EarcutNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././EarcutNode */ \"./src/core/laya/webgl/shapes/EarcutNode.ts\");\n\r\nclass Earcut {\r\n    static earcut(data, holeIndices, dim) {\r\n        dim = dim || 2;\r\n        var hasHoles = holeIndices && holeIndices.length, outerLen = hasHoles ? holeIndices[0] * dim : data.length, outerNode = Earcut.linkedList(data, 0, outerLen, dim, true), triangles = [];\r\n        if (!outerNode)\r\n            return triangles;\r\n        var minX, minY, maxX, maxY, x, y, invSize;\r\n        if (hasHoles)\r\n            outerNode = Earcut.eliminateHoles(data, holeIndices, outerNode, dim);\r\n        // if the shape is not too simple, we'll use z-order curve hash later; calculate polygon bbox\r\n        if (data.length > 80 * dim) {\r\n            minX = maxX = data[0];\r\n            minY = maxY = data[1];\r\n            for (var i = dim; i < outerLen; i += dim) {\r\n                x = data[i];\r\n                y = data[i + 1];\r\n                if (x < minX)\r\n                    minX = x;\r\n                if (y < minY)\r\n                    minY = y;\r\n                if (x > maxX)\r\n                    maxX = x;\r\n                if (y > maxY)\r\n                    maxY = y;\r\n            }\r\n            // minX, minY and invSize are later used to transform coords into integers for z-order calculation\r\n            invSize = Math.max(maxX - minX, maxY - minY);\r\n            invSize = invSize !== 0 ? 1 / invSize : 0;\r\n        }\r\n        Earcut.earcutLinked(outerNode, triangles, dim, minX, minY, invSize);\r\n        return triangles;\r\n    }\r\n    // create a circular doubly linked list from polygon points in the specified winding order\r\n    static linkedList(data, start, end, dim, clockwise) {\r\n        var i, last;\r\n        if (clockwise === (Earcut.signedArea(data, start, end, dim) > 0)) {\r\n            for (i = start; i < end; i += dim)\r\n                last = Earcut.insertNode(i, data[i], data[i + 1], last);\r\n        }\r\n        else {\r\n            for (i = end - dim; i >= start; i -= dim)\r\n                last = Earcut.insertNode(i, data[i], data[i + 1], last);\r\n        }\r\n        if (last && Earcut.equals(last, last.next)) {\r\n            Earcut.removeNode(last);\r\n            last = last.next;\r\n        }\r\n        return last;\r\n    }\r\n    // eliminate colinear or duplicate points\r\n    static filterPoints(start, end) {\r\n        if (!start)\r\n            return start;\r\n        if (!end)\r\n            end = start;\r\n        var p = start, again;\r\n        do {\r\n            again = false;\r\n            if (!p.steiner && (Earcut.equals(p, p.next) || Earcut.area(p.prev, p, p.next) === 0)) {\r\n                Earcut.removeNode(p);\r\n                p = end = p.prev;\r\n                if (p === p.next)\r\n                    break;\r\n                again = true;\r\n            }\r\n            else {\r\n                p = p.next;\r\n            }\r\n        } while (again || p !== end);\r\n        return end;\r\n    }\r\n    // main ear slicing loop which triangulates a polygon (given as a linked list)\r\n    static earcutLinked(ear, triangles, dim, minX, minY, invSize, pass = null) {\r\n        if (!ear)\r\n            return;\r\n        // interlink polygon nodes in z-order\r\n        if (!pass && invSize)\r\n            Earcut.indexCurve(ear, minX, minY, invSize);\r\n        var stop = ear, prev, next;\r\n        // iterate through ears, slicing them one by one\r\n        while (ear.prev !== ear.next) {\r\n            prev = ear.prev;\r\n            next = ear.next;\r\n            if (invSize ? Earcut.isEarHashed(ear, minX, minY, invSize) : Earcut.isEar(ear)) {\r\n                // cut off the triangle\r\n                triangles.push(prev.i / dim);\r\n                triangles.push(ear.i / dim);\r\n                triangles.push(next.i / dim);\r\n                Earcut.removeNode(ear);\r\n                // skipping the next vertice leads to less sliver triangles\r\n                ear = next.next;\r\n                stop = next.next;\r\n                continue;\r\n            }\r\n            ear = next;\r\n            // if we looped through the whole remaining polygon and can't find any more ears\r\n            if (ear === stop) {\r\n                // try filtering points and slicing again\r\n                if (!pass) {\r\n                    Earcut.earcutLinked(Earcut.filterPoints(ear, null), triangles, dim, minX, minY, invSize, 1);\r\n                    // if this didn't work, try curing all small self-intersections locally\r\n                }\r\n                else if (pass === 1) {\r\n                    ear = Earcut.cureLocalIntersections(ear, triangles, dim);\r\n                    Earcut.earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);\r\n                    // as a last resort, try splitting the remaining polygon into two\r\n                }\r\n                else if (pass === 2) {\r\n                    Earcut.splitEarcut(ear, triangles, dim, minX, minY, invSize);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // check whether a polygon node forms a valid ear with adjacent nodes\r\n    static isEar(ear) {\r\n        var a = ear.prev, b = ear, c = ear.next;\r\n        if (Earcut.area(a, b, c) >= 0)\r\n            return false; // reflex, can't be an ear\r\n        // now make sure we don't have other points inside the potential ear\r\n        var p = ear.next.next;\r\n        while (p !== ear.prev) {\r\n            if (Earcut.pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\r\n                Earcut.area(p.prev, p, p.next) >= 0)\r\n                return false;\r\n            p = p.next;\r\n        }\r\n        return true;\r\n    }\r\n    //TODO:coverage\r\n    static isEarHashed(ear, minX, minY, invSize) {\r\n        var a = ear.prev, b = ear, c = ear.next;\r\n        if (Earcut.area(a, b, c) >= 0)\r\n            return false; // reflex, can't be an ear\r\n        // triangle bbox; min & max are calculated like this for speed\r\n        var minTX = a.x < b.x ? (a.x < c.x ? a.x : c.x) : (b.x < c.x ? b.x : c.x), minTY = a.y < b.y ? (a.y < c.y ? a.y : c.y) : (b.y < c.y ? b.y : c.y), maxTX = a.x > b.x ? (a.x > c.x ? a.x : c.x) : (b.x > c.x ? b.x : c.x), maxTY = a.y > b.y ? (a.y > c.y ? a.y : c.y) : (b.y > c.y ? b.y : c.y);\r\n        // z-order range for the current triangle bbox;\r\n        var minZ = Earcut.zOrder(minTX, minTY, minX, minY, invSize), maxZ = Earcut.zOrder(maxTX, maxTY, minX, minY, invSize);\r\n        // first look for points inside the triangle in increasing z-order\r\n        var p = ear.nextZ;\r\n        while (p && p.z <= maxZ) {\r\n            if (p !== ear.prev && p !== ear.next &&\r\n                Earcut.pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\r\n                Earcut.area(p.prev, p, p.next) >= 0)\r\n                return false;\r\n            p = p.nextZ;\r\n        }\r\n        // then look for points in decreasing z-order\r\n        p = ear.prevZ;\r\n        while (p && p.z >= minZ) {\r\n            if (p !== ear.prev && p !== ear.next &&\r\n                Earcut.pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) &&\r\n                Earcut.area(p.prev, p, p.next) >= 0)\r\n                return false;\r\n            p = p.prevZ;\r\n        }\r\n        return true;\r\n    }\r\n    // go through all polygon nodes and cure small local self-intersections\r\n    //TODO:coverage\r\n    static cureLocalIntersections(start, triangles, dim) {\r\n        var p = start;\r\n        do {\r\n            var a = p.prev, b = p.next.next;\r\n            if (!Earcut.equals(a, b) && Earcut.intersects(a, p, p.next, b) && Earcut.locallyInside(a, b) && Earcut.locallyInside(b, a)) {\r\n                triangles.push(a.i / dim);\r\n                triangles.push(p.i / dim);\r\n                triangles.push(b.i / dim);\r\n                // remove two nodes involved\r\n                Earcut.removeNode(p);\r\n                Earcut.removeNode(p.next);\r\n                p = start = b;\r\n            }\r\n            p = p.next;\r\n        } while (p !== start);\r\n        return p;\r\n    }\r\n    // try splitting polygon into two and triangulate them independently\r\n    //TODO:coverage\r\n    static splitEarcut(start, triangles, dim, minX, minY, invSize) {\r\n        // look for a valid diagonal that divides the polygon into two\r\n        var a = start;\r\n        do {\r\n            var b = a.next.next;\r\n            while (b !== a.prev) {\r\n                if (a.i !== b.i && Earcut.isValidDiagonal(a, b)) {\r\n                    // split the polygon in two by the diagonal\r\n                    var c = Earcut.splitPolygon(a, b);\r\n                    // filter colinear points around the cuts\r\n                    a = Earcut.filterPoints(a, a.next);\r\n                    c = Earcut.filterPoints(c, c.next);\r\n                    // run earcut on each half\r\n                    Earcut.earcutLinked(a, triangles, dim, minX, minY, invSize);\r\n                    Earcut.earcutLinked(c, triangles, dim, minX, minY, invSize);\r\n                    return;\r\n                }\r\n                b = b.next;\r\n            }\r\n            a = a.next;\r\n        } while (a !== start);\r\n    }\r\n    // link every hole into the outer loop, producing a single-ring polygon without holes\r\n    //TODO:coverage\r\n    static eliminateHoles(data, holeIndices, outerNode, dim) {\r\n        var queue = [], i, len, start, end, list;\r\n        for (i = 0, len = holeIndices.length; i < len; i++) {\r\n            start = holeIndices[i] * dim;\r\n            end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n            list = Earcut.linkedList(data, start, end, dim, false);\r\n            if (list === list.next)\r\n                list.steiner = true;\r\n            queue.push(Earcut.getLeftmost(list));\r\n        }\r\n        queue.sort(Earcut.compareX);\r\n        // process holes from left to right\r\n        for (i = 0; i < queue.length; i++) {\r\n            Earcut.eliminateHole(queue[i], outerNode);\r\n            outerNode = Earcut.filterPoints(outerNode, outerNode.next);\r\n        }\r\n        return outerNode;\r\n    }\r\n    //TODO:coverage\r\n    static compareX(a, b) {\r\n        return a.x - b.x;\r\n    }\r\n    // find a bridge between vertices that connects hole with an outer ring and and link it\r\n    //TODO:coverage\r\n    static eliminateHole(hole, outerNode) {\r\n        outerNode = Earcut.findHoleBridge(hole, outerNode);\r\n        if (outerNode) {\r\n            var b = Earcut.splitPolygon(outerNode, hole);\r\n            Earcut.filterPoints(b, b.next);\r\n        }\r\n    }\r\n    // David Eberly's algorithm for finding a bridge between hole and outer polygon\r\n    //TODO:coverage\r\n    static findHoleBridge(hole, outerNode) {\r\n        var p = outerNode, hx = hole.x, hy = hole.y, qx = -Infinity, m;\r\n        // find a segment intersected by a ray from the hole's leftmost point to the left;\r\n        // segment's endpoint with lesser x will be potential connection point\r\n        do {\r\n            if (hy <= p.y && hy >= p.next.y && p.next.y !== p.y) {\r\n                var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);\r\n                if (x <= hx && x > qx) {\r\n                    qx = x;\r\n                    if (x === hx) {\r\n                        if (hy === p.y)\r\n                            return p;\r\n                        if (hy === p.next.y)\r\n                            return p.next;\r\n                    }\r\n                    m = p.x < p.next.x ? p : p.next;\r\n                }\r\n            }\r\n            p = p.next;\r\n        } while (p !== outerNode);\r\n        if (!m)\r\n            return null;\r\n        if (hx === qx)\r\n            return m.prev; // hole touches outer segment; pick lower endpoint\r\n        // look for points inside the triangle of hole point, segment intersection and endpoint;\r\n        // if there are no points found, we have a valid connection;\r\n        // otherwise choose the point of the minimum angle with the ray as connection point\r\n        var stop = m, mx = m.x, my = m.y, tanMin = Infinity, tan;\r\n        p = m.next;\r\n        while (p !== stop) {\r\n            if (hx >= p.x && p.x >= mx && hx !== p.x &&\r\n                Earcut.pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {\r\n                tan = Math.abs(hy - p.y) / (hx - p.x); // tangential\r\n                if ((tan < tanMin || (tan === tanMin && p.x > m.x)) && Earcut.locallyInside(p, hole)) {\r\n                    m = p;\r\n                    tanMin = tan;\r\n                }\r\n            }\r\n            p = p.next;\r\n        }\r\n        return m;\r\n    }\r\n    // interlink polygon nodes in z-order\r\n    //TODO:coverage\r\n    static indexCurve(start, minX, minY, invSize) {\r\n        var p = start;\r\n        do {\r\n            if (p.z === null)\r\n                p.z = Earcut.zOrder(p.x, p.y, minX, minY, invSize);\r\n            p.prevZ = p.prev;\r\n            p.nextZ = p.next;\r\n            p = p.next;\r\n        } while (p !== start);\r\n        p.prevZ.nextZ = null;\r\n        p.prevZ = null;\r\n        Earcut.sortLinked(p);\r\n    }\r\n    // Simon Tatham's linked list merge sort algorithm\r\n    // http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html\r\n    //TODO:coverage\r\n    static sortLinked(list) {\r\n        var i, p, q, e, tail, numMerges, pSize, qSize, inSize = 1;\r\n        do {\r\n            p = list;\r\n            list = null;\r\n            tail = null;\r\n            numMerges = 0;\r\n            while (p) {\r\n                numMerges++;\r\n                q = p;\r\n                pSize = 0;\r\n                for (i = 0; i < inSize; i++) {\r\n                    pSize++;\r\n                    q = q.nextZ;\r\n                    if (!q)\r\n                        break;\r\n                }\r\n                qSize = inSize;\r\n                while (pSize > 0 || (qSize > 0 && q)) {\r\n                    if (pSize !== 0 && (qSize === 0 || !q || p.z <= q.z)) {\r\n                        e = p;\r\n                        p = p.nextZ;\r\n                        pSize--;\r\n                    }\r\n                    else {\r\n                        e = q;\r\n                        q = q.nextZ;\r\n                        qSize--;\r\n                    }\r\n                    if (tail)\r\n                        tail.nextZ = e;\r\n                    else\r\n                        list = e;\r\n                    e.prevZ = tail;\r\n                    tail = e;\r\n                }\r\n                p = q;\r\n            }\r\n            tail.nextZ = null;\r\n            inSize *= 2;\r\n        } while (numMerges > 1);\r\n        return list;\r\n    }\r\n    // z-order of a point given coords and inverse of the longer side of data bbox\r\n    //TODO:coverage\r\n    static zOrder(x, y, minX, minY, invSize) {\r\n        // coords are transformed into non-negative 15-bit integer range\r\n        x = 32767 * (x - minX) * invSize;\r\n        y = 32767 * (y - minY) * invSize;\r\n        x = (x | (x << 8)) & 0x00FF00FF;\r\n        x = (x | (x << 4)) & 0x0F0F0F0F;\r\n        x = (x | (x << 2)) & 0x33333333;\r\n        x = (x | (x << 1)) & 0x55555555;\r\n        y = (y | (y << 8)) & 0x00FF00FF;\r\n        y = (y | (y << 4)) & 0x0F0F0F0F;\r\n        y = (y | (y << 2)) & 0x33333333;\r\n        y = (y | (y << 1)) & 0x55555555;\r\n        return x | (y << 1);\r\n    }\r\n    // find the leftmost node of a polygon ring\r\n    //TODO:coverage\r\n    static getLeftmost(start) {\r\n        var p = start, leftmost = start;\r\n        do {\r\n            if (p.x < leftmost.x)\r\n                leftmost = p;\r\n            p = p.next;\r\n        } while (p !== start);\r\n        return leftmost;\r\n    }\r\n    // check if a point lies within a convex triangle\r\n    static pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {\r\n        return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 &&\r\n            (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 &&\r\n            (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;\r\n    }\r\n    // check if a diagonal between two polygon nodes is valid (lies in polygon interior)\r\n    //TODO:coverage\r\n    static isValidDiagonal(a, b) {\r\n        return a.next.i !== b.i && a.prev.i !== b.i && !Earcut.intersectsPolygon(a, b) &&\r\n            Earcut.locallyInside(a, b) && Earcut.locallyInside(b, a) && Earcut.middleInside(a, b);\r\n    }\r\n    // signed area of a triangle\r\n    static area(p, q, r) {\r\n        return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);\r\n    }\r\n    // check if two points are equal\r\n    static equals(p1, p2) {\r\n        return p1.x === p2.x && p1.y === p2.y;\r\n    }\r\n    // check if two segments intersect\r\n    //TODO:coverage\r\n    static intersects(p1, q1, p2, q2) {\r\n        if ((Earcut.equals(p1, q1) && Earcut.equals(p2, q2)) ||\r\n            (Earcut.equals(p1, q2) && Earcut.equals(p2, q1)))\r\n            return true;\r\n        return Earcut.area(p1, q1, p2) > 0 !== Earcut.area(p1, q1, q2) > 0 &&\r\n            Earcut.area(p2, q2, p1) > 0 !== Earcut.area(p2, q2, q1) > 0;\r\n    }\r\n    // check if a polygon diagonal intersects any polygon segments\r\n    //TODO:coverage\r\n    static intersectsPolygon(a, b) {\r\n        var p = a;\r\n        do {\r\n            if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i &&\r\n                Earcut.intersects(p, p.next, a, b))\r\n                return true;\r\n            p = p.next;\r\n        } while (p !== a);\r\n        return false;\r\n    }\r\n    // check if a polygon diagonal is locally inside the polygon\r\n    //TODO:coverage\r\n    static locallyInside(a, b) {\r\n        return Earcut.area(a.prev, a, a.next) < 0 ?\r\n            Earcut.area(a, b, a.next) >= 0 && Earcut.area(a, a.prev, b) >= 0 :\r\n            Earcut.area(a, b, a.prev) < 0 || Earcut.area(a, a.next, b) < 0;\r\n    }\r\n    // check if the middle point of a polygon diagonal is inside the polygon\r\n    //TODO:coverage\r\n    static middleInside(a, b) {\r\n        var p = a, inside = false, px = (a.x + b.x) / 2, py = (a.y + b.y) / 2;\r\n        do {\r\n            if (((p.y > py) !== (p.next.y > py)) && p.next.y !== p.y &&\r\n                (px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x))\r\n                inside = !inside;\r\n            p = p.next;\r\n        } while (p !== a);\r\n        return inside;\r\n    }\r\n    // link two polygon vertices with a bridge; if the vertices belong to the same ring, it splits polygon into two;\r\n    // if one belongs to the outer ring and another to a hole, it merges it into a single ring\r\n    //TODO:coverage\r\n    static splitPolygon(a, b) {\r\n        var a2 = new _EarcutNode__WEBPACK_IMPORTED_MODULE_0__[\"EarcutNode\"](a.i, a.x, a.y), b2 = new _EarcutNode__WEBPACK_IMPORTED_MODULE_0__[\"EarcutNode\"](b.i, b.x, b.y), an = a.next, bp = b.prev;\r\n        a.next = b;\r\n        b.prev = a;\r\n        a2.next = an;\r\n        an.prev = a2;\r\n        b2.next = a2;\r\n        a2.prev = b2;\r\n        bp.next = b2;\r\n        b2.prev = bp;\r\n        return b2;\r\n    }\r\n    // create a node and optionally link it with previous one (in a circular doubly linked list)\r\n    static insertNode(i, x, y, last) {\r\n        var p = new _EarcutNode__WEBPACK_IMPORTED_MODULE_0__[\"EarcutNode\"](i, x, y);\r\n        if (!last) {\r\n            p.prev = p;\r\n            p.next = p;\r\n        }\r\n        else {\r\n            p.next = last.next;\r\n            p.prev = last;\r\n            last.next.prev = p;\r\n            last.next = p;\r\n        }\r\n        return p;\r\n    }\r\n    static removeNode(p) {\r\n        p.next.prev = p.prev;\r\n        p.prev.next = p.next;\r\n        if (p.prevZ)\r\n            p.prevZ.nextZ = p.nextZ;\r\n        if (p.nextZ)\r\n            p.nextZ.prevZ = p.prevZ;\r\n    }\r\n    // return a percentage difference between the polygon area and its triangulation area;\r\n    // used to verify correctness of triangulation\r\n    /*earcut.deviation = function (data, holeIndices, dim, triangles) {\r\n        var hasHoles = holeIndices && holeIndices.length;\r\n        var outerLen = hasHoles ? holeIndices[0] * dim : data.length;\r\n    \r\n        var polygonArea = Math.abs(signedArea(data, 0, outerLen, dim));\r\n        if (hasHoles) {\r\n            for (var i = 0, len = holeIndices.length; i < len; i++) {\r\n                var start = holeIndices[i] * dim;\r\n                var end = i < len - 1 ? holeIndices[i + 1] * dim : data.length;\r\n                polygonArea -= Math.abs(signedArea(data, start, end, dim));\r\n            }\r\n        }\r\n    \r\n        var trianglesArea = 0;\r\n        for (i = 0; i < triangles.length; i += 3) {\r\n            var a = triangles[i] * dim;\r\n            var b = triangles[i + 1] * dim;\r\n            var c = triangles[i + 2] * dim;\r\n            trianglesArea += Math.abs(\r\n                (data[a] - data[c]) * (data[b + 1] - data[a + 1]) -\r\n                (data[a] - data[b]) * (data[c + 1] - data[a + 1]));\r\n        }\r\n    \r\n        return polygonArea === 0 && trianglesArea === 0 ? 0 :\r\n            Math.abs((trianglesArea - polygonArea) / polygonArea);\r\n    };*/\r\n    static signedArea(data, start, end, dim) {\r\n        var sum = 0;\r\n        for (var i = start, j = end - dim; i < end; i += dim) {\r\n            sum += (data[j] - data[i]) * (data[i + 1] + data[j + 1]);\r\n            j = i;\r\n        }\r\n        return sum;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shapes/Earcut.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/shapes/EarcutNode.ts":
/*!**************************************************!*\
  !*** ./src/core/laya/webgl/shapes/EarcutNode.ts ***!
  \**************************************************/
/*! exports provided: EarcutNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EarcutNode\", function() { return EarcutNode; });\nclass EarcutNode {\r\n    constructor(i, x, y) {\r\n        // vertice index in coordinates array\r\n        this.i = i;\r\n        // vertex coordinates\r\n        this.x = x;\r\n        this.y = y;\r\n        // previous and next vertice nodes in a polygon ring\r\n        this.prev = null;\r\n        this.next = null;\r\n        // z-order curve value\r\n        this.z = null;\r\n        // previous and next nodes in z-order\r\n        this.prevZ = null;\r\n        this.nextZ = null;\r\n        // indicates whether this is a steiner point\r\n        this.steiner = false;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/shapes/EarcutNode.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/submit/Submit.ts":
/*!**********************************************!*\
  !*** ./src/core/laya/webgl/submit/Submit.ts ***!
  \**********************************************/
/*! exports provided: Submit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Submit\", function() { return Submit; });\n/* harmony import */ var _SubmitBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././SubmitBase */ \"./src/core/laya/webgl/submit/SubmitBase.ts\");\n/* harmony import */ var _utils_Stat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/Stat */ \"./src/core/laya/utils/Stat.ts\");\n/* harmony import */ var _WebGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../WebGL */ \"./src/core/laya/webgl/WebGL.ts\");\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n/* harmony import */ var _canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../canvas/BlendMode */ \"./src/core/laya/webgl/canvas/BlendMode.ts\");\n/* harmony import */ var _utils_CONST3D2D__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/CONST3D2D */ \"./src/core/laya/webgl/utils/CONST3D2D.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass Submit extends _SubmitBase__WEBPACK_IMPORTED_MODULE_0__[\"SubmitBase\"] {\r\n    constructor(renderType = _SubmitBase__WEBPACK_IMPORTED_MODULE_0__[\"SubmitBase\"].TYPE_2D) {\r\n        super(renderType);\r\n    }\r\n    /*override*/ renderSubmit() {\r\n        if (this._numEle === 0 || !this._mesh || this._numEle == 0)\r\n            return 1; //怎么会有_numEle是0的情况?\r\n        var _tex = this.shaderValue.textureHost;\r\n        if (_tex) {\r\n            var source = _tex._getSource();\r\n            if (!source)\r\n                return 1;\r\n            this.shaderValue.texture = source;\r\n        }\r\n        var gl = _WebGL__WEBPACK_IMPORTED_MODULE_2__[\"WebGL\"].mainContext;\r\n        this._mesh.useMesh(gl);\r\n        //_ib._bind_upload() || _ib._bind();\r\n        //_vb._bind_upload() || _vb._bind();\r\n        this.shaderValue.upload();\r\n        if (_canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__[\"BlendMode\"].activeBlendFunction !== this._blendFn) {\r\n            _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].setBlend(gl, true);\r\n            this._blendFn(gl);\r\n            _canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__[\"BlendMode\"].activeBlendFunction = this._blendFn;\r\n        }\r\n        gl.drawElements(_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].TRIANGLES, this._numEle, _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].UNSIGNED_SHORT, this._startIdx);\r\n        _utils_Stat__WEBPACK_IMPORTED_MODULE_1__[\"Stat\"].renderBatches++;\r\n        _utils_Stat__WEBPACK_IMPORTED_MODULE_1__[\"Stat\"].trianglesFaces += this._numEle / 3;\r\n        return 1;\r\n    }\r\n    /*override*/ releaseRender() {\r\n        if (_SubmitBase__WEBPACK_IMPORTED_MODULE_0__[\"SubmitBase\"].RENDERBASE == this)\r\n            return;\r\n        if ((--this._ref) < 1) {\r\n            Submit.POOL[Submit._poolSize++] = this;\r\n            this.shaderValue.release();\r\n            this.shaderValue = null;\r\n            //_vb = null;\r\n            //_mesh.destroy();\r\n            this._mesh = null;\r\n            this._parent && (this._parent.releaseRender(), this._parent = null);\r\n        }\r\n    }\r\n    /*\r\n       create方法只传对submit设置的值\r\n     */\r\n    static create(context, mesh, sv) {\r\n        var o = Submit._poolSize ? Submit.POOL[--Submit._poolSize] : new Submit();\r\n        o._ref = 1;\r\n        o._mesh = mesh;\r\n        o._key.clear();\r\n        o._startIdx = mesh.indexNum * _utils_CONST3D2D__WEBPACK_IMPORTED_MODULE_5__[\"CONST3D2D\"].BYTES_PIDX;\r\n        o._numEle = 0;\r\n        var blendType = context._nBlendType;\r\n        o._blendFn = context._targets ? _canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__[\"BlendMode\"].targetFns[blendType] : _canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__[\"BlendMode\"].fns[blendType];\r\n        o.shaderValue = sv;\r\n        o.shaderValue.setValue(context._shader2D);\r\n        var filters = context._shader2D.filters;\r\n        filters && o.shaderValue.setFilters(filters);\r\n        return o;\r\n    }\r\n    /**\r\n     * 创建一个矢量submit\r\n     * @param\tctx\r\n     * @param\tmesh\r\n     * @param\tnumEle\t\t对应drawElement的第二个参数:count\r\n     * @param\toffset\t\tdrawElement的时候的ib的偏移。\r\n     * @param\tsv\t\t\tValue2D\r\n     * @return\r\n     */\r\n    static createShape(ctx, mesh, numEle, sv) {\r\n        var o = Submit._poolSize ? Submit.POOL[--Submit._poolSize] : (new Submit());\r\n        o._mesh = mesh;\r\n        o._numEle = numEle;\r\n        o._startIdx = mesh.indexNum * 2;\r\n        o._ref = 1;\r\n        o.shaderValue = sv;\r\n        o.shaderValue.setValue(ctx._shader2D);\r\n        var blendType = ctx._nBlendType;\r\n        o._key.blendShader = blendType;\r\n        o._blendFn = ctx._targets ? _canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__[\"BlendMode\"].targetFns[blendType] : _canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__[\"BlendMode\"].fns[blendType];\r\n        return o;\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\nSubmit._poolSize = 0;\r\nSubmit.POOL = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/submit/Submit.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/submit/SubmitBase.ts":
/*!**************************************************!*\
  !*** ./src/core/laya/webgl/submit/SubmitBase.ts ***!
  \**************************************************/
/*! exports provided: SubmitBase */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SubmitBase\", function() { return SubmitBase; });\n/* harmony import */ var _SubmitKey__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././SubmitKey */ \"./src/core/laya/webgl/submit/SubmitKey.ts\");\n/* harmony import */ var _shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../shader/d2/value/Value2D */ \"./src/core/laya/webgl/shader/d2/value/Value2D.ts\");\n\r\n\r\nclass SubmitBase {\r\n    constructor(renderType = SubmitBase.TYPE_2D) {\r\n        this.clipInfoID = -1; //用来比较clipinfo\r\n        this._mesh = null; //代替 _vb,_ib\r\n        this._blendFn = null;\r\n        this._id = 0;\r\n        this._renderType = 0;\r\n        this._parent = null;\r\n        //渲染key，通过key判断是否是同一个\r\n        this._key = new _SubmitKey__WEBPACK_IMPORTED_MODULE_0__[\"SubmitKey\"]();\r\n        // 从VB中什么地方开始画，画到哪\r\n        this._startIdx = 0; //indexbuffer 的偏移，单位是byte\r\n        this._numEle = 0;\r\n        this._ref = 1; // 其实已经没有用了\r\n        this.shaderValue = null;\r\n        this._renderType = renderType;\r\n        this._id = ++SubmitBase.ID;\r\n    }\r\n    static __init__() {\r\n        var s = SubmitBase.RENDERBASE = new SubmitBase(-1);\r\n        s.shaderValue = new _shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_1__[\"Value2D\"](0, 0);\r\n        s.shaderValue.ALPHA = 1;\r\n        s._ref = 0xFFFFFFFF;\r\n    }\r\n    getID() {\r\n        return this._id;\r\n    }\r\n    getRenderType() {\r\n        return this._renderType;\r\n    }\r\n    toString() {\r\n        return \"ibindex:\" + this._startIdx + \" num:\" + this._numEle + \" key=\" + this._key;\r\n    }\r\n    renderSubmit() { return 1; }\r\n    releaseRender() { }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\nSubmitBase.TYPE_2D = 10000;\r\nSubmitBase.TYPE_CANVAS = 10003;\r\nSubmitBase.TYPE_CMDSETRT = 10004;\r\nSubmitBase.TYPE_CUSTOM = 10005;\r\nSubmitBase.TYPE_BLURRT = 10006;\r\nSubmitBase.TYPE_CMDDESTORYPRERT = 10007;\r\nSubmitBase.TYPE_DISABLESTENCIL = 10008;\r\nSubmitBase.TYPE_OTHERIBVB = 10009;\r\nSubmitBase.TYPE_PRIMITIVE = 10010;\r\nSubmitBase.TYPE_RT = 10011;\r\nSubmitBase.TYPE_BLUR_RT = 10012;\r\nSubmitBase.TYPE_TARGET = 10013;\r\nSubmitBase.TYPE_CHANGE_VALUE = 10014;\r\nSubmitBase.TYPE_SHAPE = 10015;\r\nSubmitBase.TYPE_TEXTURE = 10016;\r\nSubmitBase.TYPE_FILLTEXTURE = 10017;\r\nSubmitBase.KEY_ONCE = -1;\r\nSubmitBase.KEY_FILLRECT = 1;\r\nSubmitBase.KEY_DRAWTEXTURE = 2;\r\nSubmitBase.KEY_VG = 3;\r\nSubmitBase.KEY_TRIANGLES = 4;\r\nSubmitBase.ID = 1;\r\nSubmitBase.preRender = null; //上一个submit，主要用来比较key,以减少uniform的重复提交。\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/submit/SubmitBase.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/submit/SubmitCMD.ts":
/*!*************************************************!*\
  !*** ./src/core/laya/webgl/submit/SubmitCMD.ts ***!
  \*************************************************/
/*! exports provided: SubmitCMD */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SubmitCMD\", function() { return SubmitCMD; });\n/* harmony import */ var _SubmitKey__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././SubmitKey */ \"./src/core/laya/webgl/submit/SubmitKey.ts\");\n\r\nclass SubmitCMD {\r\n    constructor() {\r\n        this._ref = 1;\r\n        this._key = new _SubmitKey__WEBPACK_IMPORTED_MODULE_0__[\"SubmitKey\"]();\r\n    }\r\n    renderSubmit() {\r\n        this.fun.apply(this._this, this.args);\r\n        return 1;\r\n    }\r\n    getRenderType() {\r\n        return 0;\r\n    }\r\n    releaseRender() {\r\n        if ((--this._ref) < 1) {\r\n            var pool = SubmitCMD.POOL;\r\n            pool[pool._length++] = this;\r\n        }\r\n    }\r\n    static create(args, fun, thisobj) {\r\n        var o = SubmitCMD.POOL._length ? SubmitCMD.POOL[--SubmitCMD.POOL._length] : new SubmitCMD();\r\n        o.fun = fun;\r\n        o.args = args;\r\n        o._this = thisobj;\r\n        o._ref = 1;\r\n        o._key.clear();\r\n        return o;\r\n    }\r\n}\r\nSubmitCMD.POOL = []; /*[STATIC SAFE]*/\r\n{\r\n    SubmitCMD.POOL._length = 0;\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/submit/SubmitCMD.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/submit/SubmitCanvas.ts":
/*!****************************************************!*\
  !*** ./src/core/laya/webgl/submit/SubmitCanvas.ts ***!
  \****************************************************/
/*! exports provided: SubmitCanvas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SubmitCanvas\", function() { return SubmitCanvas; });\n/* harmony import */ var _SubmitBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././SubmitBase */ \"./src/core/laya/webgl/submit/SubmitBase.ts\");\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n/* harmony import */ var _shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shader/d2/value/Value2D */ \"./src/core/laya/webgl/shader/d2/value/Value2D.ts\");\n/* harmony import */ var _utils_CONST3D2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/CONST3D2D */ \"./src/core/laya/webgl/utils/CONST3D2D.ts\");\n/* harmony import */ var _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/RenderState2D */ \"./src/core/laya/webgl/utils/RenderState2D.ts\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * cache as normal 模式下的生成的canvas的渲染。\r\n */\r\nclass SubmitCanvas extends _SubmitBase__WEBPACK_IMPORTED_MODULE_0__[\"SubmitBase\"] {\r\n    constructor() {\r\n        super(_SubmitBase__WEBPACK_IMPORTED_MODULE_0__[\"SubmitBase\"].TYPE_2D);\r\n        this._matrix = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_1__[\"Matrix\"](); // 用来计算当前的世界矩阵\r\n        this._matrix4 = _utils_CONST3D2D__WEBPACK_IMPORTED_MODULE_3__[\"CONST3D2D\"].defaultMatrix4.concat();\r\n        this.shaderValue = new _shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_2__[\"Value2D\"](0, 0);\r\n    }\r\n    /*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\n    static create(canvas, alpha, filters) {\r\n        var o = (!SubmitCanvas.POOL._length) ? (new SubmitCanvas()) : SubmitCanvas.POOL[--SubmitCanvas.POOL._length];\r\n        o.canv = canvas;\r\n        o._ref = 1;\r\n        o._numEle = 0;\r\n        var v = o.shaderValue;\r\n        v.alpha = alpha;\r\n        v.defines.setValue(0);\r\n        filters && filters.length && v.setFilters(filters);\r\n        return o;\r\n    }\r\n    /*override*/ renderSubmit() {\r\n        // 下面主要是为了给canvas设置矩阵。因为canvas保存的是没有偏移的。\r\n        var preAlpha = _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldAlpha;\r\n        var preMatrix4 = _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldMatrix4;\r\n        var preMatrix = _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldMatrix;\r\n        var preFilters = _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldFilters;\r\n        var preWorldShaderDefines = _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldShaderDefines;\r\n        var v = this.shaderValue;\r\n        var m = this._matrix;\r\n        var m4 = this._matrix4;\r\n        var mout = _maths_Matrix__WEBPACK_IMPORTED_MODULE_1__[\"Matrix\"].TEMP;\r\n        _maths_Matrix__WEBPACK_IMPORTED_MODULE_1__[\"Matrix\"].mul(m, preMatrix, mout);\r\n        m4[0] = mout.a;\r\n        m4[1] = mout.b;\r\n        m4[4] = mout.c;\r\n        m4[5] = mout.d;\r\n        m4[12] = mout.tx;\r\n        m4[13] = mout.ty;\r\n        _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldMatrix = mout.clone();\r\n        _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldMatrix4 = m4;\r\n        _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldAlpha = _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldAlpha * v.alpha;\r\n        if (v.filters && v.filters.length) {\r\n            _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldFilters = v.filters;\r\n            _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldShaderDefines = v.defines;\r\n        }\r\n        this.canv['flushsubmit']();\r\n        _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldAlpha = preAlpha;\r\n        _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldMatrix4 = preMatrix4;\r\n        _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldMatrix.destroy();\r\n        _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldMatrix = preMatrix;\r\n        _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldFilters = preFilters;\r\n        _utils_RenderState2D__WEBPACK_IMPORTED_MODULE_4__[\"RenderState2D\"].worldShaderDefines = preWorldShaderDefines;\r\n        return 1;\r\n    }\r\n    /*override*/ releaseRender() {\r\n        if ((--this._ref) < 1) {\r\n            var cache = SubmitCanvas.POOL;\r\n            //_vb = null;\r\n            this._mesh = null;\r\n            cache[cache._length++] = this;\r\n        }\r\n    }\r\n    /*override*/ getRenderType() {\r\n        return _SubmitBase__WEBPACK_IMPORTED_MODULE_0__[\"SubmitBase\"].TYPE_CANVAS;\r\n    }\r\n    ;\r\n}\r\nSubmitCanvas.POOL = []; /*[STATIC SAFE]*/\r\n{\r\n    SubmitCanvas.POOL._length = 0;\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/submit/SubmitCanvas.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/submit/SubmitKey.ts":
/*!*************************************************!*\
  !*** ./src/core/laya/webgl/submit/SubmitKey.ts ***!
  \*************************************************/
/*! exports provided: SubmitKey */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SubmitKey\", function() { return SubmitKey; });\n/**\r\n     * ...\r\n     * @author xie\r\n     */\r\nclass SubmitKey {\r\n    constructor() {\r\n        this.clear();\r\n    }\r\n    clear() {\r\n        this.submitType = -1;\r\n        this.blendShader = this.other = 0;\r\n        //alpha = 1;\r\n    }\r\n    //TODO:coverage\r\n    copyFrom(src) {\r\n        this.other = src.other;\r\n        this.blendShader = src.blendShader;\r\n        this.submitType = src.submitType;\r\n        //alpha = src.alpha;\r\n    }\r\n    copyFrom2(src, submitType, other) {\r\n        //this.blendShader = src.blendShader;\r\n        //this.alpha = src.alpha;\t\t\t\r\n        this.other = other;\r\n        this.submitType = submitType;\r\n    }\r\n    //�Ƚ�3�����ⲿ�ṩ2��\r\n    //TODO:coverage\r\n    equal3_2(next, submitType, other) {\r\n        return this.submitType === submitType && this.other === other && this.blendShader === next.blendShader; // && this.alpha === alpha;\r\n    }\r\n    //ȫ�Ƚϡ��ⲿ�ṩ2��\r\n    //TODO:coverage\r\n    equal4_2(next, submitType, other) {\r\n        return this.submitType === submitType && this.other === other && this.blendShader === next.blendShader; // && alpha === next.alpha;\r\n    }\r\n    //�Ƚ�3��\r\n    //TODO:coverage\r\n    equal_3(next) {\r\n        return this.submitType === next.submitType && this.blendShader === next.blendShader; // && alpha === next.alpha;\r\n    }\r\n    //ȫ�Ƚϡ�4��\r\n    //TODO:coverage\r\n    equal(next) {\r\n        return this.other === next.other && this.submitType === next.submitType && this.blendShader === next.blendShader; // && alpha === next.alpha;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/submit/SubmitKey.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/submit/SubmitTarget.ts":
/*!****************************************************!*\
  !*** ./src/core/laya/webgl/submit/SubmitTarget.ts ***!
  \****************************************************/
/*! exports provided: SubmitTarget */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SubmitTarget\", function() { return SubmitTarget; });\n/* harmony import */ var _SubmitKey__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././SubmitKey */ \"./src/core/laya/webgl/submit/SubmitKey.ts\");\n/* harmony import */ var _utils_Stat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/Stat */ \"./src/core/laya/utils/Stat.ts\");\n/* harmony import */ var _WebGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../WebGL */ \"./src/core/laya/webgl/WebGL.ts\");\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n/* harmony import */ var _canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../canvas/BlendMode */ \"./src/core/laya/webgl/canvas/BlendMode.ts\");\n/* harmony import */ var _utils_CONST3D2D__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/CONST3D2D */ \"./src/core/laya/webgl/utils/CONST3D2D.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass SubmitTarget {\r\n    constructor() {\r\n        this.blendType = 0;\r\n        this._ref = 1;\r\n        this._key = new _SubmitKey__WEBPACK_IMPORTED_MODULE_0__[\"SubmitKey\"]();\r\n    }\r\n    renderSubmit() {\r\n        var gl = _WebGL__WEBPACK_IMPORTED_MODULE_2__[\"WebGL\"].mainContext;\r\n        this._mesh.useMesh(gl);\r\n        var target = this.srcRT;\r\n        if (target) { //??为什么会出现为空的情况\r\n            this.shaderValue.texture = target._getSource();\r\n            this.shaderValue.upload();\r\n            this.blend();\r\n            _utils_Stat__WEBPACK_IMPORTED_MODULE_1__[\"Stat\"].renderBatches++;\r\n            _utils_Stat__WEBPACK_IMPORTED_MODULE_1__[\"Stat\"].trianglesFaces += this._numEle / 3;\r\n            _WebGL__WEBPACK_IMPORTED_MODULE_2__[\"WebGL\"].mainContext.drawElements(_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].TRIANGLES, this._numEle, _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].UNSIGNED_SHORT, this._startIdx);\r\n        }\r\n        return 1;\r\n    }\r\n    blend() {\r\n        if (_canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__[\"BlendMode\"].activeBlendFunction !== _canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__[\"BlendMode\"].fns[this.blendType]) {\r\n            var gl = _WebGL__WEBPACK_IMPORTED_MODULE_2__[\"WebGL\"].mainContext;\r\n            gl.enable(_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].BLEND);\r\n            _canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__[\"BlendMode\"].fns[this.blendType](gl);\r\n            _canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__[\"BlendMode\"].activeBlendFunction = _canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__[\"BlendMode\"].fns[this.blendType];\r\n        }\r\n    }\r\n    getRenderType() {\r\n        return 0;\r\n    }\r\n    releaseRender() {\r\n        if ((--this._ref) < 1) {\r\n            var pool = SubmitTarget.POOL;\r\n            pool[pool._length++] = this;\r\n        }\r\n    }\r\n    static create(context, mesh, sv, rt) {\r\n        var o = SubmitTarget.POOL._length ? SubmitTarget.POOL[--SubmitTarget.POOL._length] : new SubmitTarget();\r\n        o._mesh = mesh;\r\n        o.srcRT = rt;\r\n        o._startIdx = mesh.indexNum * _utils_CONST3D2D__WEBPACK_IMPORTED_MODULE_5__[\"CONST3D2D\"].BYTES_PIDX;\r\n        o._ref = 1;\r\n        o._key.clear();\r\n        o._numEle = 0;\r\n        o.blendType = context._nBlendType;\r\n        o._key.blendShader = o.blendType;\r\n        o.shaderValue = sv;\r\n        o.shaderValue.setValue(context._shader2D);\r\n        if (context._colorFiler) {\r\n            var ft = context._colorFiler;\r\n            sv.defines.add(ft.type);\r\n            sv.colorMat = ft._mat;\r\n            sv.colorAlpha = ft._alpha;\r\n        }\r\n        return o;\r\n    }\r\n}\r\nSubmitTarget.POOL = [];\r\n{\r\n    SubmitTarget.POOL._length = 0;\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/submit/SubmitTarget.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/submit/SubmitTexture.ts":
/*!*****************************************************!*\
  !*** ./src/core/laya/webgl/submit/SubmitTexture.ts ***!
  \*****************************************************/
/*! exports provided: SubmitTexture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SubmitTexture\", function() { return SubmitTexture; });\n/* harmony import */ var _SubmitBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././SubmitBase */ \"./src/core/laya/webgl/submit/SubmitBase.ts\");\n/* harmony import */ var _utils_Stat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/Stat */ \"./src/core/laya/utils/Stat.ts\");\n/* harmony import */ var _WebGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../WebGL */ \"./src/core/laya/webgl/WebGL.ts\");\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n/* harmony import */ var _canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../canvas/BlendMode */ \"./src/core/laya/webgl/canvas/BlendMode.ts\");\n/* harmony import */ var _shader_BaseShader__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../shader/BaseShader */ \"./src/core/laya/webgl/shader/BaseShader.ts\");\n/* harmony import */ var _shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../shader/d2/ShaderDefines2D */ \"./src/core/laya/webgl/shader/d2/ShaderDefines2D.ts\");\n/* harmony import */ var _utils_CONST3D2D__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../utils/CONST3D2D */ \"./src/core/laya/webgl/utils/CONST3D2D.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass SubmitTexture extends _SubmitBase__WEBPACK_IMPORTED_MODULE_0__[\"SubmitBase\"] {\r\n    constructor(renderType = _SubmitBase__WEBPACK_IMPORTED_MODULE_0__[\"SubmitBase\"].TYPE_2D) {\r\n        super(renderType);\r\n    }\r\n    /*override*/ releaseRender() {\r\n        if ((--this._ref) < 1) {\r\n            SubmitTexture.POOL[SubmitTexture._poolSize++] = this;\r\n            this.shaderValue.release();\r\n            //_vb = null;\r\n            this._mesh = null; //下次create会重新赋值。既然会重新赋值，那还设置干嘛\r\n            this._parent && (this._parent.releaseRender(), this._parent = null);\r\n        }\r\n    }\r\n    /*override*/ renderSubmit() {\r\n        if (this._numEle === 0)\r\n            return 1;\r\n        var tex = this.shaderValue.textureHost;\r\n        if (tex) { //现在fillrect也用的这个submit，所以不必要求有texture\r\n            var source = tex ? tex._getSource() : null;\r\n            if (!source)\r\n                return 1;\r\n        }\r\n        var gl = _WebGL__WEBPACK_IMPORTED_MODULE_2__[\"WebGL\"].mainContext;\r\n        this._mesh.useMesh(gl);\r\n        //如果shader参数都相同，只要提交texture就行了\r\n        var lastSubmit = _SubmitBase__WEBPACK_IMPORTED_MODULE_0__[\"SubmitBase\"].preRender;\r\n        var prekey = _SubmitBase__WEBPACK_IMPORTED_MODULE_0__[\"SubmitBase\"].preRender._key;\r\n        if (this._key.blendShader === 0 && (this._key.submitType === prekey.submitType && this._key.blendShader === prekey.blendShader) && _shader_BaseShader__WEBPACK_IMPORTED_MODULE_5__[\"BaseShader\"].activeShader &&\r\n            _SubmitBase__WEBPACK_IMPORTED_MODULE_0__[\"SubmitBase\"].preRender.clipInfoID == this.clipInfoID &&\r\n            lastSubmit.shaderValue.defines._value === this.shaderValue.defines._value && //shader define要相同. \r\n            (this.shaderValue.defines._value & _shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_6__[\"ShaderDefines2D\"].NOOPTMASK) == 0 //只有基本类型的shader走这个，像blur，glow，filltexture等都不要这样优化\r\n        ) {\r\n            _shader_BaseShader__WEBPACK_IMPORTED_MODULE_5__[\"BaseShader\"].activeShader.uploadTexture2D(source);\r\n        }\r\n        else {\r\n            if (_canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__[\"BlendMode\"].activeBlendFunction !== this._blendFn) {\r\n                _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].setBlend(gl, true);\r\n                this._blendFn(gl);\r\n                _canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__[\"BlendMode\"].activeBlendFunction = this._blendFn;\r\n            }\r\n            this.shaderValue.texture = source;\r\n            this.shaderValue.upload();\r\n        }\r\n        gl.drawElements(_WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].TRIANGLES, this._numEle, _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].UNSIGNED_SHORT, this._startIdx);\r\n        _utils_Stat__WEBPACK_IMPORTED_MODULE_1__[\"Stat\"].renderBatches++;\r\n        _utils_Stat__WEBPACK_IMPORTED_MODULE_1__[\"Stat\"].trianglesFaces += this._numEle / 3;\r\n        return 1;\r\n    }\r\n    /*\r\n       create方法只传对submit设置的值\r\n     */\r\n    static create(context, mesh, sv) {\r\n        var o = SubmitTexture._poolSize ? SubmitTexture.POOL[--SubmitTexture._poolSize] : new SubmitTexture(_SubmitBase__WEBPACK_IMPORTED_MODULE_0__[\"SubmitBase\"].TYPE_TEXTURE);\r\n        o._mesh = mesh;\r\n        o._key.clear();\r\n        o._key.submitType = _SubmitBase__WEBPACK_IMPORTED_MODULE_0__[\"SubmitBase\"].KEY_DRAWTEXTURE;\r\n        o._ref = 1;\r\n        o._startIdx = mesh.indexNum * _utils_CONST3D2D__WEBPACK_IMPORTED_MODULE_7__[\"CONST3D2D\"].BYTES_PIDX;\r\n        o._numEle = 0;\r\n        var blendType = context._nBlendType;\r\n        o._key.blendShader = blendType;\r\n        o._blendFn = context._targets ? _canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__[\"BlendMode\"].targetFns[blendType] : _canvas_BlendMode__WEBPACK_IMPORTED_MODULE_4__[\"BlendMode\"].fns[blendType];\r\n        o.shaderValue = sv;\r\n        //sv.setValue(context._shader2D);\r\n        if (context._colorFiler) {\r\n            var ft = context._colorFiler;\r\n            sv.defines.add(ft.type);\r\n            sv.colorMat = ft._mat;\r\n            sv.colorAlpha = ft._alpha;\r\n        }\r\n        return o;\r\n    }\r\n}\r\nSubmitTexture._poolSize = 0;\r\nSubmitTexture.POOL = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/submit/SubmitTexture.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/text/AtlasGrid.ts":
/*!***********************************************!*\
  !*** ./src/core/laya/webgl/text/AtlasGrid.ts ***!
  \***********************************************/
/*! exports provided: AtlasGrid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AtlasGrid\", function() { return AtlasGrid; });\n// 注意长宽都不要超过256，一个是影响效率，一个是超出表达能力\r\nclass AtlasGrid {\r\n    // TODO type 是否有用\r\n    //------------------------------------------------------------------------------\r\n    constructor(width = 0, height = 0, id = 0) {\r\n        this.atlasID = 0;\r\n        this._width = 0;\r\n        this._height = 0;\r\n        this._texCount = 0;\r\n        this._rowInfo = null; // 当前行的最大长度\r\n        this._cells = null; // 每个格子的信息。{type,w,h} 相当于一个距离场. type =0 表示空闲的。不为0的情况下填充的是宽高（有什么用呢）\r\n        this._used = 0; // 使用率\r\n        this._cells = null;\r\n        this._rowInfo = null;\r\n        this.atlasID = id;\r\n        this._init(width, height);\r\n    }\r\n    //------------------------------------------------------------------\r\n    addRect(type, width, height, pt) {\r\n        //调用获得应该放在哪 返回值有三个。。bRet是否成功，nX x位置，nY y位置\r\n        if (!this._get(width, height, pt))\r\n            return false;\r\n        //根据获得的x,y填充\r\n        this._fill(pt.x, pt.y, width, height, type);\r\n        this._texCount++;\r\n        //返回是否成功，以及X位置和Y位置\r\n        return true;\r\n    }\r\n    //------------------------------------------------------------------------------\r\n    _release() {\r\n        this._cells = null;\r\n        this._rowInfo = null;\r\n    }\r\n    //------------------------------------------------------------------------------\r\n    _init(width, height) {\r\n        this._width = width;\r\n        this._height = height;\r\n        this._release();\r\n        if (this._width == 0)\r\n            return false;\r\n        this._cells = new Uint8Array(this._width * this._height * 3);\r\n        this._rowInfo = new Uint8Array(this._height);\r\n        this._used = 0;\r\n        this._clear();\r\n        return true;\r\n    }\r\n    //------------------------------------------------------------------\r\n    _get(width, height, pt) {\r\n        if (width > this._width || height > this._height) {\r\n            return false;\r\n        }\r\n        //定义返回的x,y的位置\r\n        var rx = -1;\r\n        var ry = -1;\r\n        //为了效率先保存临时变量\r\n        var nWidth = this._width;\r\n        var nHeight = this._height;\r\n        //定义一个变量为了指向 m_pCells\r\n        var pCellBox = this._cells;\r\n        //遍历查找合适的位置  //TODO 下面的方法应该可以优化\r\n        for (var y = 0; y < nHeight; y++) {\r\n            //如果该行的空白数 小于 要放入的宽度返回\r\n            if (this._rowInfo[y] < width)\r\n                continue;\r\n            for (var x = 0; x < nWidth;) {\r\n                var tm = (y * nWidth + x) * 3;\r\n                if (pCellBox[tm] != 0 || pCellBox[tm + 1] < width || pCellBox[tm + 2] < height) {\r\n                    x += pCellBox[tm + 1];\r\n                    continue;\r\n                }\r\n                rx = x;\r\n                ry = y;\r\n                // 检查当前宽度是否能完全放下，即x方向的每个位置都有足够的高度。\r\n                for (var xx = 0; xx < width; xx++) {\r\n                    if (pCellBox[3 * xx + tm + 2] < height) {\r\n                        rx = -1;\r\n                        break;\r\n                    }\r\n                }\r\n                // 不行就x继续前进\r\n                if (rx < 0) {\r\n                    x += pCellBox[tm + 1];\r\n                    continue;\r\n                }\r\n                // 找到了\r\n                pt.x = rx;\r\n                pt.y = ry;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    //------------------------------------------------------------------\r\n    _fill(x, y, w, h, type) {\r\n        //定义一些临时变量\r\n        var nWidth = this._width;\r\n        var nHeghit = this._height;\r\n        //代码检查\r\n        this._check((x + w) <= nWidth && (y + h) <= nHeghit);\r\n        //填充\r\n        for (var yy = y; yy < (h + y); ++yy) {\r\n            this._check(this._rowInfo[yy] >= w);\r\n            this._rowInfo[yy] -= w;\r\n            for (var xx = 0; xx < w; xx++) {\r\n                var tm = (x + yy * nWidth + xx) * 3;\r\n                this._check(this._cells[tm] == 0);\r\n                this._cells[tm] = type;\r\n                this._cells[tm + 1] = w;\r\n                this._cells[tm + 2] = h;\r\n            }\r\n        }\r\n        //调整我左方相邻空白格子的宽度连续信息描述\r\n        if (x > 0) {\r\n            for (yy = 0; yy < h; ++yy) {\r\n                // TODO 下面应该可以优化\r\n                var s = 0;\r\n                for (xx = x - 1; xx >= 0; --xx, ++s) {\r\n                    if (this._cells[((y + yy) * nWidth + xx) * 3] != 0)\r\n                        break;\r\n                }\r\n                for (xx = s; xx > 0; --xx) {\r\n                    this._cells[((y + yy) * nWidth + x - xx) * 3 + 1] = xx;\r\n                    this._check(xx > 0);\r\n                }\r\n            }\r\n        }\r\n        //调整我上方相邻空白格子的高度连续信息描述\r\n        if (y > 0) {\r\n            for (xx = x; xx < (x + w); ++xx) {\r\n                // TODO 下面应该可以优化\r\n                s = 0;\r\n                for (yy = y - 1; yy >= 0; --yy, s++) {\r\n                    if (this._cells[(xx + yy * nWidth) * 3] != 0)\r\n                        break;\r\n                }\r\n                for (yy = s; yy > 0; --yy) {\r\n                    this._cells[(xx + (y - yy) * nWidth) * 3 + 2] = yy;\r\n                    this._check(yy > 0);\r\n                }\r\n            }\r\n        }\r\n        this._used += (w * h) / (this._width * this._height);\r\n    }\r\n    _check(ret) {\r\n        if (ret == false) {\r\n            console.log(\"xtexMerger 错误啦\");\r\n        }\r\n    }\r\n    //------------------------------------------------------------------\r\n    _clear() {\r\n        this._texCount = 0;\r\n        for (var y = 0; y < this._height; y++) {\r\n            this._rowInfo[y] = this._width;\r\n        }\r\n        for (var i = 0; i < this._height; i++) {\r\n            for (var j = 0; j < this._width; j++) {\r\n                var tm = (i * this._width + j) * 3;\r\n                this._cells[tm] = 0;\r\n                this._cells[tm + 1] = this._width - j;\r\n                this._cells[tm + 2] = this._width - i;\r\n            }\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/text/AtlasGrid.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/text/CharRenderInfo.ts":
/*!****************************************************!*\
  !*** ./src/core/laya/webgl/text/CharRenderInfo.ts ***!
  \****************************************************/
/*! exports provided: CharRenderInfo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CharRenderInfo\", function() { return CharRenderInfo; });\n/* harmony import */ var _utils_Stat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/Stat */ \"./src/core/laya/utils/Stat.ts\");\n\r\n/**\r\n * TODO如果占用内存较大,这个结构有很多成员可以临时计算\r\n */\r\nclass CharRenderInfo {\r\n    constructor() {\r\n        this.char = ''; // 调试用\r\n        this.deleted = false; // 已经被删除了\r\n        this.uv = new Array(8); // [0, 0, 1, 1];\t\t//uv\r\n        this.pos = 0; //数组下标\r\n        this.orix = 0; // 原点位置，通常都是所在区域的左上角\r\n        this.oriy = 0;\r\n        this.touchTick = 0; //\r\n        this.isSpace = false; //是否是空格，如果是空格，则只有width有效\r\n    }\r\n    touch() {\r\n        var curLoop = _utils_Stat__WEBPACK_IMPORTED_MODULE_0__[\"Stat\"].loopCount;\r\n        if (this.touchTick != curLoop) { // 这个保证每帧只调用一次\r\n            this.tex.touchRect(this, curLoop);\r\n        }\r\n        this.touchTick = curLoop;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/text/CharRenderInfo.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/text/CharRender_Canvas.ts":
/*!*******************************************************!*\
  !*** ./src/core/laya/webgl/text/CharRender_Canvas.ts ***!
  \*******************************************************/
/*! exports provided: CharRender_Canvas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CharRender_Canvas\", function() { return CharRender_Canvas; });\n/* harmony import */ var _ICharRender__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ICharRender */ \"./src/core/laya/webgl/text/ICharRender.ts\");\n\r\nclass CharRender_Canvas extends _ICharRender__WEBPACK_IMPORTED_MODULE_0__[\"ICharRender\"] {\r\n    constructor(maxw, maxh, scalefont = true, useImageData = true, showdbg = false) {\r\n        super();\r\n        this.ctx = null;\r\n        this.lastScaleX = 1.0;\r\n        this.lastScaleY = 1.0;\r\n        this.needResetScale = false;\r\n        this.maxTexW = 0;\r\n        this.maxTexH = 0;\r\n        this.scaleFontSize = true;\r\n        this.showDbgInfo = false;\r\n        this.supportImageData = true;\r\n        this.maxTexW = maxw;\r\n        this.maxTexH = maxh;\r\n        this.scaleFontSize = scalefont;\r\n        this.supportImageData = useImageData;\r\n        this.showDbgInfo = showdbg;\r\n        if (!CharRender_Canvas.canvas) {\r\n            CharRender_Canvas.canvas = window.document.createElement('canvas');\r\n            CharRender_Canvas.canvas.width = 1024;\r\n            CharRender_Canvas.canvas.height = 512;\r\n            //这个canvas是用来获取字体渲染结果的。由于不可见canvas的字体不能小于12，所以要加到body上\r\n            //为了避免被发现，设一个在屏幕外的绝对位置。\r\n            CharRender_Canvas.canvas.style.left = \"-10000px\";\r\n            CharRender_Canvas.canvas.style.position = \"absolute\";\r\n            document.body.appendChild(CharRender_Canvas.canvas);\r\n            ;\r\n            this.ctx = CharRender_Canvas.canvas.getContext('2d');\r\n        }\r\n    }\r\n    /*override*/ get canvasWidth() {\r\n        return CharRender_Canvas.canvas.width;\r\n    }\r\n    /*override*/ set canvasWidth(w) {\r\n        if (CharRender_Canvas.canvas.width == w)\r\n            return;\r\n        CharRender_Canvas.canvas.width = w;\r\n        if (w > 2048) {\r\n            console.warn(\"画文字设置的宽度太大，超过2048了\");\r\n        }\r\n        // 重新恢复一下缩放\r\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0); // 强制清理缩放\t\t\t\r\n        this.ctx.scale(this.lastScaleX, this.lastScaleY);\r\n    }\r\n    /*override*/ getWidth(font, str) {\r\n        if (!this.ctx)\r\n            return 0;\r\n        //由于大家公用一个canvas，所以需要在选中的时候做一些配置。\r\n        if (this.ctx._lastFont != font) {\r\n            this.ctx.font = font;\r\n            this.ctx._lastFont = font;\r\n            //console.log('use font ' + font);\r\n        }\r\n        return this.ctx.measureText(str).width;\r\n    }\r\n    /*override*/ scale(sx, sy) {\r\n        if (!this.supportImageData) { // supportImageData==false表示用 getCharCanvas，这个自己管理缩放\r\n            this.lastScaleX = sx;\r\n            this.lastScaleY = sy;\r\n            return;\r\n        }\r\n        if (this.lastScaleX != sx || this.lastScaleY != sy) {\r\n            this.ctx.setTransform(sx, 0, 0, sy, 0, 0); // 强制清理缩放\t\t\t\r\n            this.lastScaleX = sx;\r\n            this.lastScaleY = sy;\r\n        }\r\n    }\r\n    /**\r\n     *TODO stroke\r\n     * @param\tchar\r\n     * @param\tfont\r\n     * @param\tcri  修改里面的width。\r\n     * @return\r\n     */\r\n    /*override*/ getCharBmp(char, font, lineWidth, colStr, strokeColStr, cri, margin_left, margin_top, margin_right, margin_bottom, rect = null) {\r\n        if (!this.supportImageData)\r\n            return this.getCharCanvas(char, font, lineWidth, colStr, strokeColStr, cri, margin_left, margin_top, margin_right, margin_bottom);\r\n        var ctx = this.ctx;\r\n        //ctx.save();\r\n        //由于大家公用一个canvas，所以需要在选中的时候做一些配置。\r\n        //跟_lastFont比较容易出错，所以比较ctx.font\r\n        if (ctx.font != font) { // ctx._lastFont != font) {\t问题：ctx.font=xx 然后ctx==xx可能返回false，例如可能会给自己加\"\",当字体有空格的时候\r\n            ctx.font = font;\r\n            ctx._lastFont = font;\r\n            //console.log('use font ' + font);\r\n        }\r\n        cri.width = ctx.measureText(char).width; //排版用的width是没有缩放的。后面会用矩阵缩放\r\n        var w = cri.width * this.lastScaleX; //w h 只是clear用的。所以要缩放\r\n        var h = cri.height * this.lastScaleY;\r\n        w += (margin_left + margin_right) * this.lastScaleX;\r\n        h += (margin_top + margin_bottom) * this.lastScaleY;\r\n        w = Math.ceil(w);\r\n        h = Math.ceil(h);\r\n        w = Math.min(w, CharRender_Canvas.canvas.width);\r\n        h = Math.min(h, CharRender_Canvas.canvas.height);\r\n        var clearW = w + lineWidth * 2 + 1;\r\n        var clearH = h + lineWidth * 2 + 1;\r\n        if (rect) { // measureText可能会小于请求的区域。 rect[2]可能为-1\r\n            clearW = Math.max(clearW, rect[0] + rect[2] + 1);\r\n            clearH = Math.max(clearH, rect[1] + rect[3] + 1);\r\n        }\r\n        ctx.clearRect(0, 0, clearW, clearH);\r\n        ctx.save();\r\n        //ctx.textAlign = \"end\";\r\n        ctx.textBaseline = \"top\";\r\n        //ctx.translate(CborderSize, CborderSize);\r\n        //ctx.scale(xs, ys);\r\n        if (lineWidth > 0) {\r\n            ctx.strokeStyle = strokeColStr;\r\n            ctx.lineWidth = lineWidth;\r\n            ctx.strokeText(char, margin_left, margin_top);\r\n        }\r\n        ctx.fillStyle = colStr;\r\n        ctx.fillText(char, margin_left, margin_top);\r\n        if (this.showDbgInfo) {\r\n            ctx.strokeStyle = '#ff0000';\r\n            ctx.strokeRect(0, 0, w, h);\r\n            ctx.strokeStyle = '#00ff00';\r\n            ctx.strokeRect(margin_left, margin_top, cri.width, cri.height); //原始大小，没有缩放的\r\n        }\r\n        //ctx.restore();\r\n        if (rect) {\r\n            if (rect[2] == -1)\r\n                rect[2] = Math.ceil((cri.width + lineWidth * 2) * this.lastScaleX); // 这个没有考虑左右margin\r\n        }\r\n        var imgdt = rect ? (ctx.getImageData(rect[0], rect[1], rect[2], rect[3])) : (ctx.getImageData(0, 0, w, h));\r\n        ctx.restore();\r\n        cri.bmpWidth = imgdt.width;\r\n        cri.bmpHeight = imgdt.height;\r\n        return imgdt;\r\n    }\r\n    getCharCanvas(char, font, lineWidth, colStr, strokeColStr, cri, margin_left, margin_top, margin_right, margin_bottom) {\r\n        var ctx = this.ctx;\r\n        //ctx.save();\r\n        //由于大家公用一个canvas，所以需要在选中的时候做一些配置。\r\n        //跟_lastFont比较容易出错，所以比较ctx.font\r\n        if (ctx.font != font) { // ctx._lastFont != font) {\t问题：ctx.font=xx 然后ctx==xx可能返回false，例如可能会给自己加\"\",当字体有空格的时候\r\n            ctx.font = font;\r\n            ctx._lastFont = font;\r\n            //console.log('use font ' + font);\r\n        }\r\n        cri.width = ctx.measureText(char).width; //排版用的width是没有缩放的。后面会用矩阵缩放\r\n        var w = cri.width * this.lastScaleX; //w h 只是clear用的。所以要缩放\r\n        var h = cri.height * this.lastScaleY;\r\n        w += (margin_left + margin_right) * this.lastScaleX;\r\n        h += ((margin_top + margin_bottom) * this.lastScaleY + 1); // 这个+1只是为了让测试能通过。确实应该加点高度，否则会被裁掉一部分，但是加多少还没找到方法。\r\n        w = Math.min(w, this.maxTexW);\r\n        h = Math.min(h, this.maxTexH);\r\n        //if (canvas.width != (w + 1) || canvas.height != (h + 1)) {\r\n        CharRender_Canvas.canvas.width = Math.min(w + 1, this.maxTexW);\r\n        CharRender_Canvas.canvas.height = Math.min(h + 1, this.maxTexH);\r\n        ctx.font = font;\r\n        //}\r\n        ctx.clearRect(0, 0, w + 1 + lineWidth, h + 1 + lineWidth);\r\n        ctx.setTransform(1, 0, 0, 1, 0, 0); // 强制清理缩放\r\n        ctx.save();\r\n        if (this.scaleFontSize) {\r\n            //这里的缩放会导致与上面的缩放同时起作用。所以上面保护\r\n            ctx.scale(this.lastScaleX, this.lastScaleY);\r\n        }\r\n        ctx.translate(margin_left, margin_top);\r\n        ctx.textAlign = \"left\";\r\n        ctx.textBaseline = \"top\";\r\n        //ctx.translate(CborderSize, CborderSize);\r\n        //ctx.scale(xs, ys);\r\n        if (lineWidth > 0) {\r\n            ctx.strokeStyle = strokeColStr;\r\n            ctx.fillStyle = colStr;\r\n            ctx.lineWidth = lineWidth;\r\n            //ctx.strokeText(char, margin_left, margin_top);\r\n            if (ctx.fillAndStrokeText) {\r\n                ctx.fillAndStrokeText(char, 0, 0);\r\n            }\r\n            else {\r\n                ctx.strokeText(char, 0, 0);\r\n                ctx.fillText(char, 0, 0);\r\n            }\r\n        }\r\n        else {\r\n            ctx.fillStyle = colStr;\r\n            ctx.fillText(char, 0, 0);\r\n        }\r\n        if (this.showDbgInfo) {\r\n            ctx.strokeStyle = '#ff0000';\r\n            ctx.strokeRect(0, 0, w, h);\r\n            ctx.strokeStyle = '#00ff00';\r\n            ctx.strokeRect(0, 0, cri.width, cri.height); //原始大小，没有缩放的\r\n        }\r\n        ctx.restore();\r\n        cri.bmpWidth = CharRender_Canvas.canvas.width;\r\n        cri.bmpHeight = CharRender_Canvas.canvas.height;\r\n        return CharRender_Canvas.canvas;\r\n    }\r\n}\r\nCharRender_Canvas.canvas = null; // HTMLCanvasElement;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/text/CharRender_Canvas.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/text/CharRender_Native.ts":
/*!*******************************************************!*\
  !*** ./src/core/laya/webgl/text/CharRender_Native.ts ***!
  \*******************************************************/
/*! exports provided: CharRender_Native */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CharRender_Native\", function() { return CharRender_Native; });\n/* harmony import */ var _ICharRender__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ICharRender */ \"./src/core/laya/webgl/text/ICharRender.ts\");\n/* harmony import */ var _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/ColorUtils */ \"./src/core/laya/utils/ColorUtils.ts\");\n\r\n\r\nclass CharRender_Native extends _ICharRender__WEBPACK_IMPORTED_MODULE_0__[\"ICharRender\"] {\r\n    //TODO:coverage\r\n    constructor() {\r\n        super();\r\n        this.lastFont = '';\r\n    }\r\n    //TODO:coverage\r\n    /*override*/ getWidth(font, str) {\r\n        if (!window.conchTextCanvas)\r\n            return 0;\r\n        //TODO 先取消判断，保证字体信息一致\r\n        //if (lastFont != font) { \r\n        window.conchTextCanvas.font = font;\r\n        this.lastFont = font;\r\n        //console.log('use font ' + font);\r\n        //}\t\t\t\t\t\r\n        //getTextBitmapData\r\n        return window.conchTextCanvas.measureText(str).width;\r\n    }\r\n    /*override*/ scale(sx, sy) {\r\n    }\r\n    /**\r\n     *TODO stroke\r\n     * @param\tchar\r\n     * @param\tfont\r\n     * @param\tsize  返回宽高\r\n     * @return\r\n     */\r\n    //TODO:coverage\r\n    /*override*/ getCharBmp(char, font, lineWidth, colStr, strokeColStr, size, margin_left, margin_top, margin_right, margin_bottom, rect = null) {\r\n        if (!window.conchTextCanvas)\r\n            return null;\r\n        //window.conchTextCanvas.getTextBitmapData();\r\n        //TODO 先取消判断，保证字体信息一致\r\n        //if(lastFont!=font){\r\n        window.conchTextCanvas.font = font;\r\n        this.lastFont = font;\r\n        //}\t\t\t\t\t\t\r\n        var w = size.width = window.conchTextCanvas.measureText(char).width;\r\n        var h = size.height;\r\n        w += (margin_left + margin_right);\r\n        h += (margin_top + margin_bottom);\r\n        var c1 = _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_1__[\"ColorUtils\"].create(strokeColStr);\r\n        var nStrokeColor = c1.numColor;\r\n        var c2 = _utils_ColorUtils__WEBPACK_IMPORTED_MODULE_1__[\"ColorUtils\"].create(colStr);\r\n        var nTextColor = c2.numColor;\r\n        var textInfo = window.conchTextCanvas.getTextBitmapData(char, nTextColor, lineWidth > 2 ? 2 : lineWidth, nStrokeColor);\r\n        //window.Laya.LayaGL.instance.texSubImage2D(1,2,0,0,textInfo.width,textInfo.height,0,0,textInfo.bitmapData);\r\n        //var ret = new ImageData();\r\n        size.bmpWidth = textInfo.width;\r\n        size.bmpHeight = textInfo.height;\r\n        return textInfo;\r\n        /*\r\n        ctx.clearRect(0,0, w, h);\r\n        //ctx.textAlign = \"end\";\r\n        ctx.textBaseline = \"top\";\r\n        if (lineWidth > 0) {\r\n            ctx.strokeStyle = colStr;\r\n            ctx.lineWidth = lineWidth;\r\n            ctx.strokeText(char, margin_left, margin_top);\r\n        } else {\r\n            ctx.fillStyle = colStr;\r\n            ctx.fillText(char, margin_left, margin_top);\r\n        }\r\n        if ( CharBook.debug) {\r\n            ctx.strokeStyle = '#ff0000';\r\n            ctx.strokeRect(0, 0, w, h);\r\n            ctx.strokeStyle = '#00ff00';\r\n            ctx.strokeRect(margin_left, margin_top, size.width, size.height);\r\n        }\r\n        //ctx.restore();\r\n        return ctx.getImageData( 0,0, w, h );\r\n        */\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/text/CharRender_Native.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/text/CharSubmitCache.ts":
/*!*****************************************************!*\
  !*** ./src/core/laya/webgl/text/CharSubmitCache.ts ***!
  \*****************************************************/
/*! exports provided: CharSubmitCache */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CharSubmitCache\", function() { return CharSubmitCache; });\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n/* harmony import */ var _utils_Stat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/Stat */ \"./src/core/laya/utils/Stat.ts\");\n/* harmony import */ var _shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../shader/d2/ShaderDefines2D */ \"./src/core/laya/webgl/shader/d2/ShaderDefines2D.ts\");\n/* harmony import */ var _shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shader/d2/value/Value2D */ \"./src/core/laya/webgl/shader/d2/value/Value2D.ts\");\n/* harmony import */ var _submit_SubmitTexture__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../submit/SubmitTexture */ \"./src/core/laya/webgl/submit/SubmitTexture.ts\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * ...\r\n * @author laoxie\r\n */\r\nclass CharSubmitCache {\r\n    constructor() {\r\n        this._data = [];\r\n        this._ndata = 0;\r\n        this._clipid = -1;\r\n        this._clipMatrix = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"]();\r\n        this._enbale = false;\r\n    }\r\n    clear() {\r\n        this._tex = null;\r\n        this._imgId = -1;\r\n        this._ndata = 0;\r\n        this._enbale = false;\r\n        this._colorFiler = null;\r\n    }\r\n    destroy() {\r\n        this.clear();\r\n        this._data.length = 0;\r\n        this._data = null;\r\n    }\r\n    add(ctx, tex, imgid, pos, uv, color) {\r\n        if (this._ndata > 0 && (this._tex != tex || this._imgId != imgid ||\r\n            (this._clipid >= 0 && this._clipid != ctx._clipInfoID))) {\r\n            this.submit(ctx);\r\n        }\r\n        this._clipid = ctx._clipInfoID;\r\n        ctx._globalClipMatrix.copyTo(this._clipMatrix);\r\n        this._tex = tex;\r\n        this._imgId = imgid;\r\n        this._colorFiler = ctx._colorFiler;\r\n        this._data[this._ndata] = pos;\r\n        this._data[this._ndata + 1] = uv;\r\n        this._data[this._ndata + 2] = color;\r\n        this._ndata += 3;\r\n    }\r\n    getPos() {\r\n        if (CharSubmitCache.__nPosPool == 0)\r\n            return new Array(8);\r\n        return CharSubmitCache.__posPool[--CharSubmitCache.__nPosPool];\r\n    }\r\n    enable(value, ctx) {\r\n        if (value === this._enbale)\r\n            return;\r\n        this._enbale = value;\r\n        this._enbale || this.submit(ctx);\r\n    }\r\n    submit(ctx) {\r\n        var n = this._ndata;\r\n        if (!n)\r\n            return;\r\n        var _mesh = ctx._mesh;\r\n        var colorFiler = ctx._colorFiler;\r\n        ctx._colorFiler = this._colorFiler;\r\n        var submit = _submit_SubmitTexture__WEBPACK_IMPORTED_MODULE_4__[\"SubmitTexture\"].create(ctx, _mesh, _shader_d2_value_Value2D__WEBPACK_IMPORTED_MODULE_3__[\"Value2D\"].create(_shader_d2_ShaderDefines2D__WEBPACK_IMPORTED_MODULE_2__[\"ShaderDefines2D\"].TEXTURE2D, 0));\r\n        ctx._submits[ctx._submits._length++] = ctx._curSubmit = submit;\r\n        submit.shaderValue.textureHost = this._tex;\r\n        submit._key.other = this._imgId;\r\n        ctx._colorFiler = colorFiler;\r\n        ctx._copyClipInfo(submit, this._clipMatrix);\r\n        submit.clipInfoID = this._clipid;\r\n        for (var i = 0; i < n; i += 3) {\r\n            _mesh.addQuad(this._data[i], this._data[i + 1], this._data[i + 2], true);\r\n            CharSubmitCache.__posPool[CharSubmitCache.__nPosPool++] = this._data[i];\r\n        }\r\n        n /= 3;\r\n        submit._numEle += n * 6;\r\n        _mesh.indexNum += n * 6;\r\n        _mesh.vertNum += n * 4;\r\n        ctx._drawCount += n;\r\n        this._ndata = 0;\r\n        if (_utils_Stat__WEBPACK_IMPORTED_MODULE_1__[\"Stat\"].loopCount % 100 == 0)\r\n            this._data.length = 0;\r\n    }\r\n}\r\nCharSubmitCache.__posPool = [];\r\nCharSubmitCache.__nPosPool = 0;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/text/CharSubmitCache.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/text/ICharRender.ts":
/*!*************************************************!*\
  !*** ./src/core/laya/webgl/text/ICharRender.ts ***!
  \*************************************************/
/*! exports provided: ICharRender */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ICharRender\", function() { return ICharRender; });\nclass ICharRender {\r\n    getWidth(font, str) { return 0; }\r\n    scale(sx, sy) {\r\n    }\r\n    get canvasWidth() {\r\n        return 0;\r\n    }\r\n    set canvasWidth(w) {\r\n    }\r\n    /**\r\n     *TODO stroke\r\n     * @param\tchar\r\n     * @param\tfont\r\n     * @param\tsize  返回宽高\r\n     * @return\r\n     */\r\n    getCharBmp(char, font, lineWidth, colStr, strokeColStr, size, margin_left, margin_top, margin_right, margin_bottom, rect = null) {\r\n        return null;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/text/ICharRender.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/text/TextAtlas.ts":
/*!***********************************************!*\
  !*** ./src/core/laya/webgl/text/TextAtlas.ts ***!
  \***********************************************/
/*! exports provided: TextAtlas */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextAtlas\", function() { return TextAtlas; });\n/* harmony import */ var _AtlasGrid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././AtlasGrid */ \"./src/core/laya/webgl/text/AtlasGrid.ts\");\n/* harmony import */ var _TextTexture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././TextTexture */ \"./src/core/laya/webgl/text/TextTexture.ts\");\n/* harmony import */ var _TextRender__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ././TextRender */ \"./src/core/laya/webgl/text/TextRender.ts\");\n\r\n\r\n\r\n/**\r\n *  文字贴图的大图集。\r\n */\r\nclass TextAtlas {\r\n    constructor() {\r\n        this.texWidth = 1024;\r\n        this.texHeight = 1024;\r\n        this.protectDist = 1;\r\n        this.texture = null;\r\n        this.charMaps = {}; // 保存文字信息的字典\r\n        this.texHeight = this.texWidth = _TextRender__WEBPACK_IMPORTED_MODULE_2__[\"TextRender\"].atlasWidth;\r\n        this.texture = _TextTexture__WEBPACK_IMPORTED_MODULE_1__[\"TextTexture\"].getTextTexture(this.texWidth, this.texHeight);\r\n        if (this.texWidth / TextAtlas.atlasGridW > 256) {\r\n            TextAtlas.atlasGridW = Math.ceil(this.texWidth / 256);\r\n        }\r\n        this.atlasgrid = new _AtlasGrid__WEBPACK_IMPORTED_MODULE_0__[\"AtlasGrid\"](this.texWidth / TextAtlas.atlasGridW, this.texHeight / TextAtlas.atlasGridW, this.texture.id);\r\n    }\r\n    setProtecteDist(d) {\r\n        this.protectDist = d;\r\n    }\r\n    /**\r\n     * 如果返回null，则表示无法加入了\r\n     * 分配的时候优先选择最接近自己高度的节点\r\n     * @param\tw\r\n     * @param\th\r\n     * @return\r\n     */\r\n    getAEmpty(w, h, pt) {\r\n        var find = this.atlasgrid.addRect(1, Math.ceil(w / TextAtlas.atlasGridW), Math.ceil(h / TextAtlas.atlasGridW), pt);\r\n        if (find) {\r\n            pt.x *= TextAtlas.atlasGridW;\r\n            pt.y *= TextAtlas.atlasGridW;\r\n        }\r\n        return find;\r\n    }\r\n    /**\r\n     * 大图集格子单元的占用率，老的也算上了。只是表示这个大图集还能插入多少东西。\r\n     */\r\n    get usedRate() {\r\n        return this.atlasgrid._used;\r\n    }\r\n    //data 也可能是canvas\r\n    /*\r\n    public function pushData(data:ImageData, node:TextAtlasNode):void {\r\n        texture.addChar(data, node.x, node.y);\r\n    }\r\n    */\r\n    destroy() {\r\n        for (var k in this.charMaps) {\r\n            var ri = this.charMaps[k];\r\n            ri.deleted = true;\r\n        }\r\n        this.texture.discard();\r\n    }\r\n    printDebugInfo() {\r\n    }\r\n}\r\nTextAtlas.atlasGridW = 16;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/text/TextAtlas.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/text/TextRender.ts":
/*!************************************************!*\
  !*** ./src/core/laya/webgl/text/TextRender.ts ***!
  \************************************************/
/*! exports provided: TextRender */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextRender\", function() { return TextRender; });\n/* harmony import */ var _TextAtlas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././TextAtlas */ \"./src/core/laya/webgl/text/TextAtlas.ts\");\n/* harmony import */ var _TextTexture__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././TextTexture */ \"./src/core/laya/webgl/text/TextTexture.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _display_Sprite__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../display/Sprite */ \"./src/core/laya/display/Sprite.ts\");\n/* harmony import */ var _maths_Point__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../maths/Point */ \"./src/core/laya/maths/Point.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _resource_Context__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../resource/Context */ \"./src/core/laya/resource/Context.ts\");\n/* harmony import */ var _resource_Texture__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../resource/Texture */ \"./src/core/laya/resource/Texture.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _utils_FontInfo__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utils/FontInfo */ \"./src/core/laya/utils/FontInfo.ts\");\n/* harmony import */ var _utils_Stat__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utils/Stat */ \"./src/core/laya/utils/Stat.ts\");\n/* harmony import */ var _utils_WordText__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utils/WordText */ \"./src/core/laya/utils/WordText.ts\");\n/* harmony import */ var _CharRenderInfo__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./CharRenderInfo */ \"./src/core/laya/webgl/text/CharRenderInfo.ts\");\n/* harmony import */ var _CharRender_Canvas__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./CharRender_Canvas */ \"./src/core/laya/webgl/text/CharRender_Canvas.ts\");\n/* harmony import */ var _CharRender_Native__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./CharRender_Native */ \"./src/core/laya/webgl/text/CharRender_Native.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass TextRender {\r\n    constructor() {\r\n        //config\r\n        /**\r\n         * fontSizeInfo\r\n         * 记录每种字体的像素的大小。标准是32px的字体。由4个byte组成，分别表示[xdist,ydist,w,h]。\r\n         * xdist,ydist 是像素起点到排版原点的距离，都是正的，表示实际数据往左和上偏多少，如果实际往右和下偏，则算作0，毕竟这个只是一个大概\r\n         * 例如 [Arial]=0x00002020, 表示宽高都是32\r\n         */\r\n        this.fontSizeInfo = {};\r\n        this.charRender = null;\r\n        this.mapFont = {}; // 把font名称映射到数字\r\n        this.fontID = 0;\r\n        this.mapColor = []; // 把color映射到数字\r\n        this.colorID = 0;\r\n        this.fontScaleX = 1.0; //临时缩放。\r\n        this.fontScaleY = 1.0;\r\n        //private var charMaps:Object = {};\t// 所有的都放到一起\r\n        this._curStrPos = 0; //解开一个字符串的时候用的。表示当前解到什么位置了\r\n        this.textAtlases = []; // 所有的大图集\r\n        this.isoTextures = []; // 所有的独立贴图\r\n        // 当前字体的测量信息。\r\n        this.lastFont = null;\r\n        this.fontSizeW = 0;\r\n        this.fontSizeH = 0;\r\n        this.fontSizeOffX = 0;\r\n        this.fontSizeOffY = 0;\r\n        this.renderPerChar = true; // 是否是单个字符渲染。这个是结果，上面的是配置\r\n        this.tmpAtlasPos = new _maths_Point__WEBPACK_IMPORTED_MODULE_4__[\"Point\"]();\r\n        this.textureMem = 0; // 当前贴图所占用的内存\r\n        var bugIOS = false; //是否是有bug的ios版本\r\n        //在微信下有时候不显示文字，所以采用canvas模式，现在测试微信好像都好了，所以去掉了。\r\n        var miniadp = _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"]['MiniAdpter'];\r\n        if (miniadp && miniadp.systemInfo && miniadp.systemInfo.system) {\r\n            bugIOS = miniadp.systemInfo.system.toLowerCase() === 'ios 10.1.1';\r\n        }\r\n        if (_utils_Browser__WEBPACK_IMPORTED_MODULE_8__[\"Browser\"].onMiniGame /*&& !Browser.onAndroid*/ && !bugIOS)\r\n            TextRender.isWan1Wan = true; //android 微信下 字边缘发黑，所以不用getImageData了\r\n        if (_utils_Browser__WEBPACK_IMPORTED_MODULE_8__[\"Browser\"].onLimixiu)\r\n            TextRender.isWan1Wan = true;\r\n        //isWan1Wan = true;\r\n        this.charRender = _renders_Render__WEBPACK_IMPORTED_MODULE_5__[\"Render\"].isConchApp ? (new _CharRender_Native__WEBPACK_IMPORTED_MODULE_14__[\"CharRender_Native\"]()) : (new _CharRender_Canvas__WEBPACK_IMPORTED_MODULE_13__[\"CharRender_Canvas\"](TextRender.atlasWidth, TextRender.atlasWidth, TextRender.scaleFontWithCtx, !TextRender.isWan1Wan, false));\r\n        TextRender.textRenderInst = this;\r\n        _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"]['textRender'] = this;\r\n        TextRender.atlasWidth2 = TextRender.atlasWidth * TextRender.atlasWidth;\r\n        //TEST\r\n        //forceSplitRender = true;\r\n        //noAtlas = true;\r\n        //forceWholeRender = true;\r\n        //TEST\r\n    }\r\n    /**\r\n     * 设置当前字体，获得字体的大小信息。\r\n     * @param\tfont\r\n     */\r\n    setFont(font) {\r\n        if (this.lastFont == font)\r\n            return;\r\n        this.lastFont = font;\r\n        var fontsz = this.getFontSizeInfo(font._family);\r\n        var offx = fontsz >> 24;\r\n        var offy = (fontsz >> 16) & 0xff;\r\n        var fw = (fontsz >> 8) & 0xff;\r\n        var fh = fontsz & 0xff;\r\n        var k = font._size / TextRender.standardFontSize;\r\n        this.fontSizeOffX = Math.ceil(offx * k);\r\n        this.fontSizeOffY = Math.ceil(offy * k);\r\n        this.fontSizeW = Math.ceil(fw * k);\r\n        this.fontSizeH = Math.ceil(fh * k);\r\n        if (font._font.indexOf('italic') >= 0) { // 先判断一下效率会高一些\r\n            this.fontStr = font._font.replace('italic', '');\r\n        }\r\n        else {\r\n            this.fontStr = font._font;\r\n        }\r\n    }\r\n    /**\r\n     * 从string中取出一个完整的char，例如emoji的话要多个\r\n     * 会修改 _curStrPos\r\n     * TODO 由于各种文字中的组合写法，这个需要能扩展，以便支持泰文等\r\n     * @param\tstr\r\n     * @param\tstart\t开始位置\r\n     */\r\n    getNextChar(str) {\r\n        var len = str.length;\r\n        var start = this._curStrPos;\r\n        if (start >= len)\r\n            return null;\r\n        var link = false; //如果是连接的话要再加一个完整字符\r\n        var i = start;\r\n        var state = 0; //0 初始化 1  正常 2 连续中\r\n        for (; i < len; i++) {\r\n            var c = str.charCodeAt(i);\r\n            if ((c >>> 11) == 0x1b) { //可能是0b110110xx或者0b110111xx。 这都表示2个u16组成一个emoji\r\n                if (state == 1)\r\n                    break; //新的字符了，要截断\r\n                state = 1; // 其他状态都转成正常读取字符状态，只是一次读两个\r\n                i++; //跨过一个。\r\n            }\r\n            else if (c === 0xfe0e || c === 0xfe0f) { //样式控制字符\r\n                // 继续。不改变状态\r\n            }\r\n            else if (c == 0x200d) { //zero width joiner\r\n                state = 2; // 继续\r\n            }\r\n            else {\r\n                if (state == 0)\r\n                    state = 1;\r\n                else if (state == 1)\r\n                    break;\r\n                else if (state == 2) {\r\n                    // 继续\r\n                }\r\n            }\r\n        }\r\n        this._curStrPos = i;\r\n        return str.substring(start, i);\r\n    }\r\n    filltext(ctx, data, x, y, fontStr, color, strokeColor, lineWidth, textAlign, underLine = 0) {\r\n        if (data.length <= 0)\r\n            return;\r\n        //以后保存到wordtext中\r\n        var font = _utils_FontInfo__WEBPACK_IMPORTED_MODULE_9__[\"FontInfo\"].Parse(fontStr);\r\n        var nTextAlign = 0;\r\n        switch (textAlign) {\r\n            case 'center':\r\n                nTextAlign = _resource_Context__WEBPACK_IMPORTED_MODULE_6__[\"Context\"].ENUM_TEXTALIGN_CENTER;\r\n                break;\r\n            case 'right':\r\n                nTextAlign = _resource_Context__WEBPACK_IMPORTED_MODULE_6__[\"Context\"].ENUM_TEXTALIGN_RIGHT;\r\n                break;\r\n        }\r\n        this._fast_filltext(ctx, data, null, x, y, font, color, strokeColor, lineWidth, nTextAlign, underLine);\r\n    }\r\n    fillWords(ctx, data, x, y, fontStr, color, strokeColor, lineWidth) {\r\n        if (!data)\r\n            return;\r\n        if (data.length <= 0)\r\n            return;\r\n        var font = _utils_FontInfo__WEBPACK_IMPORTED_MODULE_9__[\"FontInfo\"].Parse(fontStr);\r\n        this._fast_filltext(ctx, null, data, x, y, font, color, strokeColor, lineWidth, 0, 0);\r\n    }\r\n    _fast_filltext(ctx, data, htmlchars, x, y, font, color, strokeColor, lineWidth, textAlign, underLine = 0) {\r\n        if (data && data.length < 1)\r\n            return;\r\n        if (htmlchars && htmlchars.length < 1)\r\n            return;\r\n        if (lineWidth < 0)\r\n            lineWidth = 0;\r\n        this.setFont(font);\r\n        this.fontScaleX = this.fontScaleY = 1.0;\r\n        if (!_renders_Render__WEBPACK_IMPORTED_MODULE_5__[\"Render\"].isConchApp && TextRender.scaleFontWithCtx) {\r\n            var sx = 1;\r\n            var sy = 1;\r\n            if (_renders_Render__WEBPACK_IMPORTED_MODULE_5__[\"Render\"].isConchApp) {\r\n                sx = ctx._curMat.getScaleX();\r\n                sy = ctx._curMat.getScaleY();\r\n            }\r\n            else {\r\n                sx = ctx.getMatScaleX();\r\n                sy = ctx.getMatScaleY();\r\n            }\r\n            if (sx < 1e-4 || sy < 1e-1)\r\n                return;\r\n            if (sx > 1)\r\n                this.fontScaleX = sx;\r\n            if (sy > 1)\r\n                this.fontScaleY = sy;\r\n        }\r\n        font._italic && (ctx._italicDeg = 13);\r\n        //准备bmp\r\n        //拷贝到texture上,得到一个gltexture和uv\r\n        var wt = data;\r\n        var isWT = !htmlchars && (data instanceof _utils_WordText__WEBPACK_IMPORTED_MODULE_11__[\"WordText\"]);\r\n        var str = data;\r\n        var isHtmlChar = !!htmlchars;\r\n        /**\r\n         * sameTexData\r\n         * WordText 中保存了一个数组，这个数组是根据贴图排序的，目的是为了能相同的贴图合并。\r\n         * 类型是 {ri:CharRenderInfo,stx:int,sty:int,...}[文字个数][贴图分组]\r\n         */\r\n        var sameTexData = isWT ? wt.pageChars : [];\r\n        //总宽度，下面的对齐需要\r\n        var strWidth = 0;\r\n        if (isWT) {\r\n            str = wt._text;\r\n            strWidth = wt.width;\r\n            if (strWidth < 0) {\r\n                strWidth = wt.width = this.charRender.getWidth(this.fontStr, str); // 字符串长度是原始的。\r\n            }\r\n        }\r\n        else {\r\n            strWidth = str ? this.charRender.getWidth(this.fontStr, str) : 0;\r\n        }\r\n        //水平对齐方式\r\n        switch (textAlign) {\r\n            case _resource_Context__WEBPACK_IMPORTED_MODULE_6__[\"Context\"].ENUM_TEXTALIGN_CENTER:\r\n                x -= strWidth / 2;\r\n                break;\r\n            case _resource_Context__WEBPACK_IMPORTED_MODULE_6__[\"Context\"].ENUM_TEXTALIGN_RIGHT:\r\n                x -= strWidth;\r\n                break;\r\n        }\r\n        //检查保存的数据是否有的已经被释放了\r\n        if (wt && sameTexData) { // TODO 能利用lastGCCnt么\r\n            //wt.lastGCCnt = _curPage.gcCnt;\r\n            if (this.hasFreedText(sameTexData)) {\r\n                sameTexData = wt.pageChars = [];\r\n            }\r\n        }\r\n        var ri = null;\r\n        var oneTex = isWT || TextRender.forceWholeRender; // 如果能缓存的话，就用一张贴图\r\n        var splitTex = this.renderPerChar = (!isWT) || TextRender.forceSplitRender || isHtmlChar || (isWT && wt.splitRender); // 拆分字符串渲染，这个优先级高\r\n        if (!sameTexData || sameTexData.length < 1) {\r\n            // 重新构建缓存的贴图信息\r\n            // TODO 还是要ctx.scale么\r\n            if (splitTex) {\r\n                // 如果要拆分字符渲染\r\n                var stx = 0;\r\n                var sty = 0;\r\n                this._curStrPos = 0;\r\n                var curstr;\r\n                while (true) {\r\n                    if (isHtmlChar) {\r\n                        var chc = htmlchars[this._curStrPos++];\r\n                        if (chc) {\r\n                            curstr = chc.char;\r\n                            stx = chc.x;\r\n                            sty = chc.y;\r\n                        }\r\n                        else {\r\n                            curstr = null;\r\n                        }\r\n                    }\r\n                    else {\r\n                        curstr = this.getNextChar(str);\r\n                    }\r\n                    if (!curstr)\r\n                        break;\r\n                    ri = this.getCharRenderInfo(curstr, font, color, strokeColor, lineWidth, false);\r\n                    if (!ri) {\r\n                        // 没有分配到。。。\r\n                        break;\r\n                    }\r\n                    if (ri.isSpace) { // 空格什么都不做\r\n                    }\r\n                    else {\r\n                        //分组保存\r\n                        var add = sameTexData[ri.tex.id];\r\n                        if (!add) {\r\n                            var o1 = { texgen: ri.tex.genID, tex: ri.tex, words: [] }; // 根据genid来减少是否释放的判断量\r\n                            sameTexData[ri.tex.id] = o1;\r\n                            add = o1.words;\r\n                        }\r\n                        else {\r\n                            add = add.words;\r\n                        }\r\n                        //不能直接修改ri.bmpWidth, 否则会累积缩放，所以把缩放保存到独立的变量中\r\n                        if (_renders_Render__WEBPACK_IMPORTED_MODULE_5__[\"Render\"].isConchApp) {\r\n                            add.push({ ri: ri, x: stx, y: sty, w: ri.bmpWidth / this.fontScaleX, h: ri.bmpHeight / this.fontScaleY });\r\n                        }\r\n                        else {\r\n                            add.push({ ri: ri, x: stx + 1 / this.fontScaleX, y: sty, w: (ri.bmpWidth - 2) / this.fontScaleX, h: (ri.bmpHeight - 1) / this.fontScaleY }); // 为了避免边缘像素采样错误，内缩一个像素\r\n                        }\r\n                        stx += ri.width; // TODO 缩放\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // 如果要整句话渲染\r\n                var isotex = TextRender.noAtlas || strWidth * this.fontScaleX > TextRender.atlasWidth; // 独立贴图还是大图集\r\n                ri = this.getCharRenderInfo(str, font, color, strokeColor, lineWidth, isotex);\r\n                // 整句渲染，则只有一个贴图\r\n                if (_renders_Render__WEBPACK_IMPORTED_MODULE_5__[\"Render\"].isConchApp) {\r\n                    sameTexData[0] = { texgen: ri.tex.genID, tex: ri.tex, words: [{ ri: ri, x: 0, y: 0, w: ri.bmpWidth / this.fontScaleX, h: ri.bmpHeight / this.fontScaleY }] };\r\n                }\r\n                else {\r\n                    sameTexData[0] = { texgen: ri.tex.genID, tex: ri.tex, words: [{ ri: ri, x: 1 / this.fontScaleX, y: 0 / this.fontScaleY, w: (ri.bmpWidth - 2) / this.fontScaleX, h: (ri.bmpHeight - 1) / this.fontScaleY }] }; // 为了避免边缘像素采样错误，内缩一个像素\r\n                }\r\n            }\r\n            //TODO getbmp 考虑margin 字体与标准字体的关系\r\n        }\r\n        this._drawResortedWords(ctx, x, y, sameTexData);\r\n        ctx._italicDeg = 0;\r\n    }\r\n    /**\r\n     * 画出重新按照贴图顺序分组的文字。\r\n     * @param\tsamePagesData\r\n     * @param  startx 保存的数据是相对位置，所以需要加上这个偏移。用相对位置更灵活一些。\r\n     * @param y {int} 因为这个只能画在一行上所以没有必要保存y。所以这里再把y传进来\r\n     */\r\n    _drawResortedWords(ctx, startx, starty, samePagesData) {\r\n        var isLastRender = ctx._charSubmitCache && ctx._charSubmitCache._enbale;\r\n        var mat = ctx._curMat;\r\n        var slen = samePagesData.length;\r\n        for (var id = 0; id < slen; id++) {\r\n            var dt = samePagesData[id];\r\n            if (!dt)\r\n                continue;\r\n            var pri = dt.words;\r\n            var pisz = pri.length;\r\n            if (pisz <= 0)\r\n                continue;\r\n            var tex = samePagesData[id].tex;\r\n            for (var j = 0; j < pisz; j++) {\r\n                var riSaved = pri[j];\r\n                var ri = riSaved.ri;\r\n                if (ri.isSpace)\r\n                    continue;\r\n                ri.touch();\r\n                ctx.drawTexAlign = true;\r\n                //ctx._drawTextureM(ri.tex.texture as Texture, startx +riSaved.x -ri.orix / fontScaleX , starty + riSaved.y -ri.oriy / fontScaleY , riSaved.w, riSaved.h, null, 1.0, ri.uv);\r\n                if (_renders_Render__WEBPACK_IMPORTED_MODULE_5__[\"Render\"].isConchApp) {\r\n                    ctx._drawTextureM(tex.texture, startx + riSaved.x - ri.orix, starty + riSaved.y - ri.oriy, riSaved.w, riSaved.h, null, 1.0, ri.uv);\r\n                }\r\n                else {\r\n                    let t = tex;\r\n                    ctx._inner_drawTexture(t.texture, t.id, startx + riSaved.x - ri.orix, starty + riSaved.y - ri.oriy, riSaved.w, riSaved.h, mat, ri.uv, 1.0, isLastRender);\r\n                }\r\n                if (ctx.touches) {\r\n                    ctx.touches.push(ri);\r\n                }\r\n            }\r\n        }\r\n        //不要影响别人\r\n        //ctx._curSubmit._key.other = -1;\r\n    }\r\n    /**\r\n     * 检查 txts数组中有没有被释放的资源\r\n     * @param\ttxts {{ri:CharRenderInfo,...}[][]}\r\n     * @param\tstartid\r\n     * @return\r\n     */\r\n    hasFreedText(txts) {\r\n        var sz = txts.length;\r\n        for (var i = 0; i < sz; i++) {\r\n            var pri = txts[i];\r\n            if (!pri)\r\n                continue;\r\n            var tex = pri.tex;\r\n            if (tex.__destroyed || tex.genID != pri.texgen) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    getCharRenderInfo(str, font, color, strokeColor, lineWidth, isoTexture = false) {\r\n        var fid = this.mapFont[font._family];\r\n        if (fid == undefined) {\r\n            this.mapFont[font._family] = fid = this.fontID++;\r\n        }\r\n        /*\r\n        var cid:int = mapColor[color];\r\n        if (cid == undefined) {\r\n            mapColor[color] = cid = colorID++;\r\n        }\r\n        var scid:int = mapColor[strokeColor];\r\n        */\r\n        var key = str + '_' + fid + '_' + font._size + '_' + color;\r\n        if (lineWidth > 0)\r\n            key += '_' + strokeColor + lineWidth;\r\n        if (font._bold)\r\n            key += 'P';\r\n        if (this.fontScaleX != 1 || this.fontScaleY != 1) {\r\n            key += (this.fontScaleX * 20 | 0) + '_' + (this.fontScaleY * 20 | 0); // 这个精度可以控制占用资源的大小，精度越高越能细分缩放。\r\n        }\r\n        var i = 0;\r\n        // 遍历所有的大图集看是否存在\r\n        var sz = this.textAtlases.length;\r\n        var ri = null;\r\n        var atlas = null;\r\n        if (!isoTexture) {\r\n            for (i = 0; i < sz; i++) {\r\n                atlas = this.textAtlases[i];\r\n                ri = atlas.charMaps[key];\r\n                if (ri) {\r\n                    ri.touch();\r\n                    return ri;\r\n                }\r\n            }\r\n        }\r\n        // 没有找到，要创建一个\r\n        ri = new _CharRenderInfo__WEBPACK_IMPORTED_MODULE_12__[\"CharRenderInfo\"]();\r\n        this.charRender.scale(this.fontScaleX, this.fontScaleY);\r\n        ri.char = str;\r\n        ri.height = font._size;\r\n        var margin = font._size / 3 | 0; // 凑的。 注意这里不能乘以缩放，因为ctx会自动处理\r\n        // 如果不存在，就要插入已有的，或者创建新的\r\n        var imgdt = null;\r\n        // 先大约测量文字宽度 \r\n        var w1 = Math.ceil(this.charRender.getWidth(this.fontStr, str) * this.fontScaleX);\r\n        if (w1 > this.charRender.canvasWidth) {\r\n            this.charRender.canvasWidth = Math.min(2048, w1 + margin * 2);\r\n        }\r\n        if (isoTexture) {\r\n            // 独立贴图\r\n            imgdt = this.charRender.getCharBmp(str, this.fontStr, lineWidth, color, strokeColor, ri, margin, margin, margin, margin, null);\r\n            // 这里可以直接\r\n            var tex = _TextTexture__WEBPACK_IMPORTED_MODULE_1__[\"TextTexture\"].getTextTexture(imgdt.width, imgdt.height);\r\n            tex.addChar(imgdt, 0, 0, ri.uv);\r\n            ri.tex = tex;\r\n            ri.orix = margin; // 这里是原始的，不需要乘scale,因为scale的会创建一个scale之前的rect\r\n            ri.oriy = margin;\r\n            tex.ri = ri;\r\n            this.isoTextures.push(tex);\r\n        }\r\n        else {\r\n            // 大图集\r\n            var len = str.length;\r\n            if (len > 1) {\r\n                // emoji或者组合的\r\n            }\r\n            var lineExt = lineWidth * 1; // 这里，包括下面的*2 都尽量用整数。否则在取整以后可能有有偏移。\r\n            var fw = Math.ceil((this.fontSizeW + lineExt * 2) * this.fontScaleX); //本来只要 lineWidth就行，但是这样安全一些\r\n            var fh = Math.ceil((this.fontSizeH + lineExt * 2) * this.fontScaleY);\r\n            TextRender.imgdtRect[0] = ((margin - this.fontSizeOffX - lineExt) * this.fontScaleX) | 0; // 本来要 lineWidth/2 但是这样一些尖角会有问题，所以大一点\r\n            TextRender.imgdtRect[1] = ((margin - this.fontSizeOffY - lineExt) * this.fontScaleY) | 0;\r\n            if (this.renderPerChar || len == 1) {\r\n                // 单个字符的处理\r\n                TextRender.imgdtRect[2] = Math.max(w1, fw);\r\n                TextRender.imgdtRect[3] = Math.max(w1, fh); // 高度也要取大的。 例如emoji\r\n            }\r\n            else {\r\n                // 多个字符的处理\r\n                TextRender.imgdtRect[2] = -1; // -1 表示宽度要测量\r\n                TextRender.imgdtRect[3] = fh; // TODO 如果被裁剪了，可以考虑把这个加大一点点\r\n            }\r\n            imgdt = this.charRender.getCharBmp(str, this.fontStr, lineWidth, color, strokeColor, ri, margin, margin, margin, margin, TextRender.imgdtRect);\r\n            atlas = this.addBmpData(imgdt, ri);\r\n            if (TextRender.isWan1Wan) {\r\n                // 这时候 imgdtRect 是不好使的，要自己设置\r\n                ri.orix = margin; // 不要乘缩放。要不后面也要除。\r\n                ri.oriy = margin;\r\n            }\r\n            else {\r\n                // 取下来的imagedata的原点在哪\r\n                ri.orix = (this.fontSizeOffX + lineExt); // 由于是相对于imagedata的，上面会根据包边调整左上角，所以原点也要相应反向调整\r\n                ri.oriy = (this.fontSizeOffY + lineExt);\r\n            }\r\n            atlas.charMaps[key] = ri;\r\n        }\r\n        return ri;\r\n    }\r\n    /**\r\n     * 添加数据到大图集\r\n     * @param\tw\r\n     * @param\th\r\n     * @return\r\n     */\r\n    addBmpData(data, ri) {\r\n        var w = data.width;\r\n        var h = data.height;\r\n        var sz = this.textAtlases.length;\r\n        var atlas = null;\r\n        var find = false;\r\n        for (var i = 0; i < sz; i++) {\r\n            atlas = this.textAtlases[i];\r\n            find = atlas.getAEmpty(w, h, this.tmpAtlasPos);\r\n            if (find) {\r\n                break;\r\n            }\r\n        }\r\n        if (!find) {\r\n            // 创建一个新的\r\n            atlas = new _TextAtlas__WEBPACK_IMPORTED_MODULE_0__[\"TextAtlas\"]();\r\n            this.textAtlases.push(atlas);\r\n            find = atlas.getAEmpty(w, h, this.tmpAtlasPos);\r\n            if (!find) {\r\n                throw 'err1'; //TODO\r\n            }\r\n            // 清理旧的\r\n            this.cleanAtlases();\r\n        }\r\n        if (find) {\r\n            atlas.texture.addChar(data, this.tmpAtlasPos.x, this.tmpAtlasPos.y, ri.uv);\r\n            ri.tex = atlas.texture;\r\n        }\r\n        return atlas;\r\n    }\r\n    /**\r\n     * 清理利用率低的大图集\r\n     */\r\n    GC() {\r\n        var i = 0;\r\n        var sz = this.textAtlases.length;\r\n        var dt = 0;\r\n        var destroyDt = TextRender.destroyAtlasDt;\r\n        var totalUsedRate = 0; // 总使用率\r\n        var totalUsedRateAtlas = 0;\r\n        var curloop = _utils_Stat__WEBPACK_IMPORTED_MODULE_10__[\"Stat\"].loopCount;\r\n        //var minUsedRateID:int = -1;\r\n        //var minUsedRate:Number = 1;\r\n        var maxWasteRateID = -1;\r\n        var maxWasteRate = 0;\r\n        var tex = null;\r\n        var curatlas = null;\r\n        // 图集的清理\r\n        for (; i < sz; i++) {\r\n            curatlas = this.textAtlases[i];\r\n            tex = curatlas.texture;\r\n            if (tex) {\r\n                totalUsedRate += tex.curUsedCovRate;\r\n                totalUsedRateAtlas += tex.curUsedCovRateAtlas;\r\n                // 浪费掉的图集\r\n                // (已经占用的图集和当前使用的图集的差。图集不可局部重用，所以有占用的和使用的的区别)\r\n                var waste = curatlas.usedRate - tex.curUsedCovRateAtlas;\r\n                // 记录哪个图集浪费的最多\r\n                if (maxWasteRate < waste) {\r\n                    maxWasteRate = waste;\r\n                    maxWasteRateID = i;\r\n                }\r\n                /*\r\n                if (minUsedRate > tex.curUsedCovRate) {\r\n                    minUsedRate = tex.curUsedCovRate;\r\n                    minUsedRateID = i;\r\n                }\r\n                */\r\n            }\r\n            // 如果当前贴图的touch时间超出了指定的间隔（单位是帧，例如），则设置回收\r\n            // 可能同时会有多个图集被回收\r\n            dt = curloop - curatlas.texture.lastTouchTm;\r\n            if (dt > destroyDt) {\r\n                TextRender.showLog && console.log( true ? curatlas.texture.id : undefined);\r\n                curatlas.destroy();\r\n                this.textAtlases[i] = this.textAtlases[sz - 1]; // 把最后的拿过来冲掉\r\n                sz--;\r\n                i--;\r\n                maxWasteRateID = -1;\r\n            }\r\n        }\r\n        // 缩减图集数组的长度\r\n        this.textAtlases.length = sz;\r\n        // 独立贴图的清理 TODO 如果多的话，要不要分开处理\r\n        sz = this.isoTextures.length;\r\n        for (i = 0; i < sz; i++) {\r\n            tex = this.isoTextures[i];\r\n            dt = curloop - tex.lastTouchTm;\r\n            if (dt > TextRender.destroyUnusedTextureDt) {\r\n                tex.ri.deleted = true;\r\n                tex.ri.tex = null;\r\n                // 直接删除，不回收\r\n                tex.destroy();\r\n                this.isoTextures[i] = this.isoTextures[sz - 1];\r\n                sz--;\r\n                i--;\r\n            }\r\n        }\r\n        this.isoTextures.length = sz;\r\n        // 如果超出内存需要清理不常用\r\n        var needGC = this.textAtlases.length > 1 && this.textAtlases.length - totalUsedRateAtlas >= 2; // 总量浪费了超过2张\r\n        if (TextRender.atlasWidth * TextRender.atlasWidth * 4 * this.textAtlases.length > TextRender.cleanMem || needGC || TextRender.simClean) {\r\n            TextRender.simClean = false;\r\n            TextRender.showLog && console.log('清理使用率低的贴图。总使用率:', totalUsedRateAtlas, ':', this.textAtlases.length, '最差贴图:' + maxWasteRateID);\r\n            if (maxWasteRateID >= 0) {\r\n                curatlas = this.textAtlases[maxWasteRateID];\r\n                curatlas.destroy();\r\n                this.textAtlases[maxWasteRateID] = this.textAtlases[this.textAtlases.length - 1];\r\n                this.textAtlases.length = this.textAtlases.length - 1;\r\n            }\r\n        }\r\n        _TextTexture__WEBPACK_IMPORTED_MODULE_1__[\"TextTexture\"].clean();\r\n    }\r\n    /**\r\n     * 尝试清理大图集\r\n     */\r\n    cleanAtlases() {\r\n        // TODO 根据覆盖率决定是否清理\r\n    }\r\n    getCharBmp(c) {\r\n    }\r\n    /**\r\n     * 检查当前线是否存在数据\r\n     * @param\tdata\r\n     * @param\tl\r\n     * @param\tsx\r\n     * @param\tex\r\n     * @return\r\n     */\r\n    checkBmpLine(data, l, sx, ex) {\r\n        if (this.bmpData32.buffer != data.data.buffer) {\r\n            this.bmpData32 = new Uint32Array(data.data.buffer);\r\n        }\r\n        var stpos = data.width * l + sx;\r\n        for (var x = sx; x < ex; x++) {\r\n            if (this.bmpData32[stpos++] != 0)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * 根据bmp数据和当前的包围盒，更新包围盒\r\n     * 由于选择的文字是连续的，所以可以用二分法\r\n     * @param\tdata\r\n     * @param\tcurbbx \t[l,t,r,b]\r\n     * @param   onlyH 不检查左右\r\n     */\r\n    updateBbx(data, curbbx, onlyH = false) {\r\n        var w = data.width;\r\n        var h = data.height;\r\n        var x = 0;\r\n        // top\r\n        var sy = curbbx[1]; //从t到0 sy表示有数据的行\r\n        var ey = 0;\r\n        var y = sy;\r\n        if (this.checkBmpLine(data, sy, 0, w)) {\r\n            // 如果当前行有数据，就要往上找\r\n            while (true) {\r\n                y = (sy + ey) / 2 | 0; // 必须是int\r\n                if (y + 1 >= sy) { // \r\n                    // 找到了。严格来说还不知道这个是否有像素，不过这里要求不严格，可以认为有\r\n                    curbbx[1] = y;\r\n                    break;\r\n                }\r\n                if (this.checkBmpLine(data, y, 0, w)) {\r\n                    //中间线有数据，搜索上半部分\r\n                    sy = y;\r\n                }\r\n                else {\r\n                    //中间线没有有数据，搜索下半部分\r\n                    ey = y;\r\n                }\r\n            }\r\n        }\r\n        // 下半部分\r\n        if (curbbx[3] > h)\r\n            curbbx[3] = h;\r\n        else {\r\n            y = sy = curbbx[3];\r\n            ey = h;\r\n            if (this.checkBmpLine(data, sy, 0, w)) {\r\n                while (true) {\r\n                    y = (sy + ey) / 2 | 0;\r\n                    if (y - 1 <= sy) {\r\n                        curbbx[3] = y;\r\n                        break;\r\n                    }\r\n                    if (this.checkBmpLine(data, y, 0, w)) {\r\n                        sy = y;\r\n                    }\r\n                    else {\r\n                        ey = y;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (onlyH)\r\n            return;\r\n        // 左半部分\r\n        var minx = curbbx[0];\r\n        var stpos = w * curbbx[1]; //w*cy+0\r\n        for (y = curbbx[1]; y < curbbx[3]; y++) {\r\n            for (x = 0; x < minx; x++) {\r\n                if (this.bmpData32[stpos + x] != 0) {\r\n                    minx = x;\r\n                    break;\r\n                }\r\n            }\r\n            stpos += w;\r\n        }\r\n        curbbx[0] = minx;\r\n        // 右半部分\r\n        var maxx = curbbx[2];\r\n        stpos = w * curbbx[1]; //w*cy\r\n        for (y = curbbx[1]; y < curbbx[3]; y++) {\r\n            for (x = maxx; x < w; x++) {\r\n                if (this.bmpData32[stpos + x] != 0) {\r\n                    maxx = x;\r\n                    break;\r\n                }\r\n            }\r\n            stpos += w;\r\n        }\r\n        curbbx[2] = maxx;\r\n    }\r\n    getFontSizeInfo(font) {\r\n        var finfo = this.fontSizeInfo[font];\r\n        if (finfo != undefined)\r\n            return finfo;\r\n        var fontstr = 'bold ' + TextRender.standardFontSize + 'px ' + font;\r\n        if (TextRender.isWan1Wan) {\r\n            // 这时候无法获得imagedata，只能采取保险测量\r\n            this.fontSizeW = this.charRender.getWidth(fontstr, '有') * 1.5;\r\n            this.fontSizeH = TextRender.standardFontSize * 1.5;\r\n            var szinfo = this.fontSizeW << 8 | this.fontSizeH;\r\n            this.fontSizeInfo[font] = szinfo;\r\n            return szinfo;\r\n        }\r\n        // bbx初始大小\r\n        TextRender.pixelBBX[0] = TextRender.standardFontSize / 2; // 16;\r\n        TextRender.pixelBBX[1] = TextRender.standardFontSize / 2; // 16;\r\n        TextRender.pixelBBX[2] = TextRender.standardFontSize; // 32;\r\n        TextRender.pixelBBX[3] = TextRender.standardFontSize; // 32;\r\n        var orix = 16; // 左边留白，也就是x原点的位置\r\n        var oriy = 16;\r\n        var marginr = 16;\r\n        var marginb = 16;\r\n        this.charRender.scale(1, 1);\r\n        TextRender.tmpRI.height = TextRender.standardFontSize;\r\n        var bmpdt = this.charRender.getCharBmp('g', fontstr, 0, 'red', null, TextRender.tmpRI, orix, oriy, marginr, marginb);\r\n        // native 返回的是 textBitmap。 data直接是ArrayBuffer \r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_5__[\"Render\"].isConchApp) {\r\n            //bmpdt.data.buffer = bmpdt.data;\r\n            bmpdt.data = new Uint8ClampedArray(bmpdt.data);\r\n        }\r\n        this.bmpData32 = new Uint32Array(bmpdt.data.buffer);\r\n        //测量宽度是 tmpRI.width\r\n        this.updateBbx(bmpdt, TextRender.pixelBBX, false);\r\n        bmpdt = this.charRender.getCharBmp('有', fontstr, 0, 'red', null, TextRender.tmpRI, oriy, oriy, marginr, marginb); // '有'比'国'大\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_5__[\"Render\"].isConchApp) {\r\n            //bmpdt.data.buffer = bmpdt.data;\r\n            bmpdt.data = new Uint8ClampedArray(bmpdt.data);\r\n        }\r\n        this.bmpData32 = new Uint32Array(bmpdt.data.buffer);\r\n        // 国字的宽度就用系统测量的，不再用像素检测\r\n        if (TextRender.pixelBBX[2] < orix + TextRender.tmpRI.width)\r\n            TextRender.pixelBBX[2] = orix + TextRender.tmpRI.width;\r\n        this.updateBbx(bmpdt, TextRender.pixelBBX, false); //TODO 改成 true\r\n        // 原点在 16,16\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_5__[\"Render\"].isConchApp) {\r\n            //runtime 的接口好像有问题，不认orix，oriy\r\n            orix = 0;\r\n            oriy = 0;\r\n        }\r\n        var xoff = Math.max(orix - TextRender.pixelBBX[0], 0);\r\n        var yoff = Math.max(oriy - TextRender.pixelBBX[1], 0);\r\n        var bbxw = TextRender.pixelBBX[2] - TextRender.pixelBBX[0];\r\n        var bbxh = TextRender.pixelBBX[3] - TextRender.pixelBBX[1];\r\n        var sizeinfo = xoff << 24 | yoff << 16 | bbxw << 8 | bbxh;\r\n        this.fontSizeInfo[font] = sizeinfo;\r\n        return sizeinfo;\r\n    }\r\n    printDbgInfo() {\r\n        console.log('图集个数:' + this.textAtlases.length + ',每个图集大小:' + TextRender.atlasWidth + 'x' + TextRender.atlasWidth, ' 用canvas:', TextRender.isWan1Wan);\r\n        console.log('图集占用空间:' + (TextRender.atlasWidth * TextRender.atlasWidth * 4 / 1024 / 1024 * this.textAtlases.length) + 'M');\r\n        console.log('缓存用到的字体:');\r\n        for (var f in this.mapFont) {\r\n            var fontsz = this.getFontSizeInfo(f);\r\n            var offx = fontsz >> 24;\r\n            var offy = (fontsz >> 16) & 0xff;\r\n            var fw = (fontsz >> 8) & 0xff;\r\n            var fh = fontsz & 0xff;\r\n            console.log('    ' + f, ' off:', offx, offy, ' size:', fw, fh);\r\n        }\r\n        var num = 0;\r\n        console.log('缓存数据:');\r\n        var totalUsedRate = 0; // 总使用率\r\n        var totalUsedRateAtlas = 0;\r\n        this.textAtlases.forEach(function (a) {\r\n            var id = a.texture.id;\r\n            var dt = _utils_Stat__WEBPACK_IMPORTED_MODULE_10__[\"Stat\"].loopCount - a.texture.lastTouchTm;\r\n            var dtstr = dt > 0 ? ('' + dt + '帧以前') : '当前帧';\r\n            totalUsedRate += a.texture.curUsedCovRate;\r\n            totalUsedRateAtlas += a.texture.curUsedCovRateAtlas;\r\n            console.log('--图集(id:' + id + ',当前使用率:' + (a.texture.curUsedCovRate * 1000 | 0) + '‰', '当前图集使用率:', (a.texture.curUsedCovRateAtlas * 100 | 0) + '%', '图集使用率:', (a.usedRate * 100 | 0), '%, 使用于:' + dtstr + ')--:');\r\n            for (var k in a.charMaps) {\r\n                var ri = a.charMaps[k];\r\n                console.log('     off:', ri.orix, ri.oriy, ' bmp宽高:', ri.bmpWidth, ri.bmpHeight, '无效:', ri.deleted, 'touchdt:', (_utils_Stat__WEBPACK_IMPORTED_MODULE_10__[\"Stat\"].loopCount - ri.touchTick), '位置:', ri.uv[0] * TextRender.atlasWidth | 0, ri.uv[1] * TextRender.atlasWidth | 0, '字符:', ri.char, 'key:', k);\r\n                num++;\r\n            }\r\n        });\r\n        console.log('独立贴图文字(' + this.isoTextures.length + '个):');\r\n        this.isoTextures.forEach(function (tex) {\r\n            console.log('    size:', tex._texW, tex._texH, 'touch间隔:', (_utils_Stat__WEBPACK_IMPORTED_MODULE_10__[\"Stat\"].loopCount - tex.lastTouchTm), 'char:', tex.ri.char);\r\n        });\r\n        console.log('总缓存:', num, '总使用率:', totalUsedRate, '总当前图集使用率:', totalUsedRateAtlas);\r\n    }\r\n    // 在屏幕上显示某个大图集\r\n    showAtlas(n, bgcolor, x, y, w, h) {\r\n        if (!this.textAtlases[n]) {\r\n            console.log('没有这个图集');\r\n            return null;\r\n        }\r\n        var sp = new _display_Sprite__WEBPACK_IMPORTED_MODULE_3__[\"Sprite\"]();\r\n        var texttex = this.textAtlases[n].texture;\r\n        var texture = {\r\n            width: TextRender.atlasWidth,\r\n            height: TextRender.atlasWidth,\r\n            sourceWidth: TextRender.atlasWidth,\r\n            sourceHeight: TextRender.atlasWidth,\r\n            offsetX: 0,\r\n            offsetY: 0,\r\n            getIsReady: function () { return true; },\r\n            _addReference: function () { },\r\n            _removeReference: function () { },\r\n            _getSource: function () { return texttex._getSource(); },\r\n            bitmap: { id: texttex.id },\r\n            _uv: _resource_Texture__WEBPACK_IMPORTED_MODULE_7__[\"Texture\"].DEF_UV\r\n        };\r\n        sp.size = function (w, h) {\r\n            this.width = w;\r\n            this.height = h;\r\n            sp.graphics.clear();\r\n            sp.graphics.drawRect(0, 0, sp.width, sp.height, bgcolor);\r\n            sp.graphics.drawTexture(texture, 0, 0, sp.width, sp.height);\r\n            return this;\r\n        };\r\n        sp.graphics.drawRect(0, 0, w, h, bgcolor);\r\n        sp.graphics.drawTexture(texture, 0, 0, w, h);\r\n        sp.pos(x, y);\r\n        _Laya__WEBPACK_IMPORTED_MODULE_2__[\"Laya\"].stage.addChild(sp);\r\n        return sp;\r\n    }\r\n    /////// native ///////\r\n    filltext_native(ctx, data, htmlchars, x, y, fontStr, color, strokeColor, lineWidth, textAlign, underLine = 0) {\r\n        if (data && data.length <= 0)\r\n            return;\r\n        if (htmlchars && htmlchars.length < 1)\r\n            return;\r\n        var font = _utils_FontInfo__WEBPACK_IMPORTED_MODULE_9__[\"FontInfo\"].Parse(fontStr);\r\n        var nTextAlign = 0;\r\n        switch (textAlign) {\r\n            case 'center':\r\n                nTextAlign = _resource_Context__WEBPACK_IMPORTED_MODULE_6__[\"Context\"].ENUM_TEXTALIGN_CENTER;\r\n                break;\r\n            case 'right':\r\n                nTextAlign = _resource_Context__WEBPACK_IMPORTED_MODULE_6__[\"Context\"].ENUM_TEXTALIGN_RIGHT;\r\n                break;\r\n        }\r\n        return this._fast_filltext(ctx, data, htmlchars, x, y, font, color, strokeColor, lineWidth, nTextAlign, underLine);\r\n    }\r\n}\r\n//config\r\nTextRender.useOldCharBook = false;\r\nTextRender.atlasWidth = 2048;\r\nTextRender.noAtlas = false; // 一串文字用独立贴图\r\nTextRender.forceSplitRender = false; // 强制把一句话拆开渲染\r\nTextRender.forceWholeRender = false; // 强制整句话渲染\r\nTextRender.scaleFontWithCtx = true; // 如果有缩放，则修改字体，以保证清晰度\r\nTextRender.standardFontSize = 32; // 测量的时候使用的字体大小\r\nTextRender.destroyAtlasDt = 10; // 回收图集贴图的时间\r\nTextRender.checkCleanTextureDt = 2000; // 检查是否要真正删除纹理的时间。单位是ms\r\nTextRender.destroyUnusedTextureDt = 3000; // 长时间不用的纹理删除的时间。单位是ms\r\nTextRender.cleanMem = 100 * 1024 * 1024; // 多大内存触发清理图集。这时候占用率低的图集会被清理\r\nTextRender.isWan1Wan = false;\r\nTextRender.showLog = false;\r\nTextRender.debugUV = false; // 文字纹理需要保护边。当像素没有对齐的时候，可能会采样到旁边的贴图。true则填充texture为白色，模拟干扰\r\nTextRender.atlasWidth2 = 2048 * 2048;\r\nTextRender.tmpRI = new _CharRenderInfo__WEBPACK_IMPORTED_MODULE_12__[\"CharRenderInfo\"]();\r\nTextRender.pixelBBX = [0, 0, 0, 0];\r\nTextRender.textRenderInst = null; //debug\r\nTextRender.imgdtRect = [0, 0, 0, 0];\r\nTextRender.simClean = false; // 测试用。强制清理占用低的图集\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/text/TextRender.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/text/TextTexture.ts":
/*!*************************************************!*\
  !*** ./src/core/laya/webgl/text/TextTexture.ts ***!
  \*************************************************/
/*! exports provided: TextTexture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"TextTexture\", function() { return TextTexture; });\n/* harmony import */ var _TextRender__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././TextRender */ \"./src/core/laya/webgl/text/TextRender.ts\");\n/* harmony import */ var _Laya__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../../Laya */ \"./src/core/Laya.ts\");\n/* harmony import */ var _TextAtlas__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ././TextAtlas */ \"./src/core/laya/webgl/text/TextAtlas.ts\");\n/* harmony import */ var _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../layagl/LayaGL */ \"./src/core/laya/layagl/LayaGL.ts\");\n/* harmony import */ var _renders_Render__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../renders/Render */ \"./src/core/laya/renders/Render.ts\");\n/* harmony import */ var _resource_Resource__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../resource/Resource */ \"./src/core/laya/resource/Resource.ts\");\n/* harmony import */ var _WebGL__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../WebGL */ \"./src/core/laya/webgl/WebGL.ts\");\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass TextTexture extends _resource_Resource__WEBPACK_IMPORTED_MODULE_5__[\"Resource\"] {\r\n    //public var isIso:Boolean = false;\r\n    constructor(textureW, textureH) {\r\n        super();\r\n        this._texW = 0;\r\n        this._texH = 0;\r\n        this.__destroyed = false; //父类有，但是private\r\n        this._discardTm = 0; //释放的时间。超过一定时间会被真正删除\r\n        this.genID = 0; // 这个对象会重新利用，为了能让引用他的人知道自己引用的是否有效，加个id\r\n        this.bitmap = { id: 0, _glTexture: null }; //samekey的判断用的\r\n        this.curUsedCovRate = 0; // 当前使用到的使用率。根据面积算的\r\n        this.curUsedCovRateAtlas = 0; // 大图集中的占用率。由于大图集分辨率低，所以会浪费一些空间\r\n        this.lastTouchTm = 0;\r\n        this.ri = null; // 如果是独立文字贴图的话带有这个信息\r\n        this._texW = textureW || _TextRender__WEBPACK_IMPORTED_MODULE_0__[\"TextRender\"].atlasWidth;\r\n        this._texH = textureH || _TextRender__WEBPACK_IMPORTED_MODULE_0__[\"TextRender\"].atlasWidth;\r\n        this.bitmap.id = this.id;\r\n        this.lock = true; //防止被资源管理清除\r\n    }\r\n    recreateResource() {\r\n        if (this._source)\r\n            return;\r\n        var gl = _renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp ? _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_3__[\"LayaGL\"].instance.getDefaultCommandEncoder() : _WebGL__WEBPACK_IMPORTED_MODULE_6__[\"WebGL\"].mainContext;\r\n        var glTex = this._source = gl.createTexture();\r\n        this.bitmap._glTexture = glTex;\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].bindTexture(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_2D, glTex);\r\n        //gl.bindTexture(WebGLContext.TEXTURE_2D, glTex);\r\n        //var sz:int = _width * _height * 4;\r\n        //分配显存。\r\n        gl.texImage2D(_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_2D, 0, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].RGBA, this._texW, this._texH, 0, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].RGBA, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNSIGNED_BYTE, null);\r\n        gl.texParameteri(_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_2D, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_MIN_FILTER, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].LINEAR); //不能用点采样，否则旋转的时候，非常难看\r\n        gl.texParameteri(_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_2D, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_MAG_FILTER, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].LINEAR);\r\n        gl.texParameteri(_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_2D, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_WRAP_S, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].CLAMP_TO_EDGE);\r\n        gl.texParameteri(_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_2D, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_WRAP_T, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].CLAMP_TO_EDGE);\r\n        //TODO 预乘alpha\r\n        if (_TextRender__WEBPACK_IMPORTED_MODULE_0__[\"TextRender\"].debugUV) {\r\n            this.fillWhite();\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     * @param\tdata\r\n     * @param\tx\t\t\t拷贝位置。\r\n     * @param\ty\r\n     * @param  uv\r\n     * @return uv数组  如果uv不为空就返回传入的uv，否则new一个数组\r\n     */\r\n    addChar(data, x, y, uv = null) {\r\n        //if (!Render.isConchApp &&  !__JS__('(data instanceof ImageData)')) {\r\n        if (_TextRender__WEBPACK_IMPORTED_MODULE_0__[\"TextRender\"].isWan1Wan) {\r\n            return this.addCharCanvas(data, x, y, uv);\r\n        }\r\n        !this._source && this.recreateResource();\r\n        var gl = _renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp ? _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_3__[\"LayaGL\"].instance.getDefaultCommandEncoder() : _WebGL__WEBPACK_IMPORTED_MODULE_6__[\"WebGL\"].mainContext;\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].bindTexture(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_2D, this._source);\r\n        !_renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp && gl.pixelStorei(_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        var dt = data.data;\r\n        if (data.data instanceof Uint8ClampedArray)\r\n            dt = new Uint8Array(dt.buffer);\r\n        gl.texSubImage2D(_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_2D, 0, x, y, data.width, data.height, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].RGBA, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNSIGNED_BYTE, dt);\r\n        !_renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp && gl.pixelStorei(_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        var u0;\r\n        var v0;\r\n        var u1;\r\n        var v1;\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp) {\r\n            u0 = x / this._texW; // +1 表示内缩一下，反正文字总是有留白。否则会受到旁边的一个像素的影响\r\n            v0 = y / this._texH;\r\n            u1 = (x + data.width) / this._texW; // 注意是-1,不是-2\r\n            v1 = (y + data.height) / this._texH;\r\n        }\r\n        else {\r\n            u0 = (x + 1) / this._texW; // +1 表示内缩一下，反正文字总是有留白。否则会受到旁边的一个像素的影响\r\n            v0 = (y) / this._texH;\r\n            u1 = (x + data.width - 1) / this._texW; // 注意是-1,不是-2\r\n            v1 = (y + data.height - 1) / this._texH;\r\n        }\r\n        uv = uv || new Array(8);\r\n        uv[0] = u0, uv[1] = v0;\r\n        uv[2] = u1, uv[3] = v0;\r\n        uv[4] = u1, uv[5] = v1;\r\n        uv[6] = u0, uv[7] = v1;\r\n        return uv;\r\n    }\r\n    /**\r\n     * 玩一玩不支持 getImageData\r\n     * @param\tcanv\r\n     * @param\tx\r\n     * @param\ty\r\n     */\r\n    addCharCanvas(canv, x, y, uv = null) {\r\n        !this._source && this.recreateResource();\r\n        var gl = _renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp ? _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_3__[\"LayaGL\"].instance.getDefaultCommandEncoder() : _WebGL__WEBPACK_IMPORTED_MODULE_6__[\"WebGL\"].mainContext;\r\n        _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].bindTexture(gl, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_2D, this._source);\r\n        !_renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp && gl.pixelStorei(_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\r\n        gl.texSubImage2D(_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_2D, 0, x, y, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].RGBA, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNSIGNED_BYTE, canv);\r\n        !_renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp && gl.pixelStorei(_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);\r\n        var u0;\r\n        var v0;\r\n        var u1;\r\n        var v1;\r\n        if (_renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp) {\r\n            u0 = x / this._texW; // +1 表示内缩一下，反正文字总是有留白。否则会受到旁边的一个像素的影响\r\n            v0 = y / this._texH;\r\n            u1 = (x + canv.width) / this._texW;\r\n            v1 = (y + canv.height) / this._texH;\r\n        }\r\n        else {\r\n            u0 = (x + 1) / this._texW; // +1 表示内缩一下，反正文字总是有留白。否则会受到旁边的一个像素的影响\r\n            v0 = (y + 1) / this._texH;\r\n            u1 = (x + canv.width - 1) / this._texW;\r\n            v1 = (y + canv.height - 1) / this._texH;\r\n        }\r\n        uv = uv || new Array(8);\r\n        uv[0] = u0, uv[1] = v0;\r\n        uv[2] = u1, uv[3] = v0;\r\n        uv[4] = u1, uv[5] = v1;\r\n        uv[6] = u0, uv[7] = v1;\r\n        return uv;\r\n    }\r\n    /**\r\n     * 填充白色。调试用。\r\n     */\r\n    fillWhite() {\r\n        !this._source && this.recreateResource();\r\n        var gl = _renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp ? _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_3__[\"LayaGL\"].instance.getDefaultCommandEncoder() : _WebGL__WEBPACK_IMPORTED_MODULE_6__[\"WebGL\"].mainContext;\r\n        var dt = new Uint8Array(this._texW * this._texH * 4);\r\n        dt.fill(0xff);\r\n        gl.texSubImage2D(_WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].TEXTURE_2D, 0, 0, 0, this._texW, this._texH, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].RGBA, _WebGLContext__WEBPACK_IMPORTED_MODULE_7__[\"WebGLContext\"].UNSIGNED_BYTE, dt);\r\n    }\r\n    discard() {\r\n        // 非标准大小不回收。\r\n        if (this._texW != _TextRender__WEBPACK_IMPORTED_MODULE_0__[\"TextRender\"].atlasWidth || this._texH != _TextRender__WEBPACK_IMPORTED_MODULE_0__[\"TextRender\"].atlasWidth) {\r\n            this.destroy();\r\n            return;\r\n        }\r\n        this.genID++;\r\n        if (TextTexture.poolLen >= TextTexture.pool.length) {\r\n            TextTexture.pool = TextTexture.pool.concat(new Array(10));\r\n        }\r\n        this._discardTm = _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.getFrameTm();\r\n        TextTexture.pool[TextTexture.poolLen++] = this;\r\n    }\r\n    static getTextTexture(w, h) {\r\n        if (w != _TextRender__WEBPACK_IMPORTED_MODULE_0__[\"TextRender\"].atlasWidth || w != _TextRender__WEBPACK_IMPORTED_MODULE_0__[\"TextRender\"].atlasWidth)\r\n            return new TextTexture(w, h);\r\n        // 否则从回收池中取\r\n        if (TextTexture.poolLen > 0) {\r\n            var ret = TextTexture.pool[--TextTexture.poolLen];\r\n            if (TextTexture.poolLen > 0)\r\n                TextTexture.clean(); //给个clean的机会。\r\n            return ret;\r\n        }\r\n        return new TextTexture(w, h);\r\n    }\r\n    /*override*/ destroy() {\r\n        //console.log('destroy TextTexture');\r\n        this.__destroyed = true;\r\n        var gl = _renders_Render__WEBPACK_IMPORTED_MODULE_4__[\"Render\"].isConchApp ? _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_3__[\"LayaGL\"].instance.getDefaultCommandEncoder() : _WebGL__WEBPACK_IMPORTED_MODULE_6__[\"WebGL\"].mainContext;\r\n        this._source && gl.deleteTexture(this._source);\r\n        this._source = null;\r\n    }\r\n    /**\r\n     * 定期清理\r\n     * 为了简单，只有发生 getAPage 或者 discardPage的时候才检测是否需要清理\r\n     */\r\n    static clean() {\r\n        var curtm = _Laya__WEBPACK_IMPORTED_MODULE_1__[\"Laya\"].stage.getFrameTm();\r\n        if (TextTexture.cleanTm === 0)\r\n            TextTexture.cleanTm = curtm;\r\n        if (curtm - TextTexture.cleanTm >= _TextRender__WEBPACK_IMPORTED_MODULE_0__[\"TextRender\"].checkCleanTextureDt) { //每10秒看看pool中的贴图有没有很老的可以删除的\r\n            for (var i = 0; i < TextTexture.poolLen; i++) {\r\n                var p = TextTexture.pool[i];\r\n                if (curtm - p._discardTm >= _TextRender__WEBPACK_IMPORTED_MODULE_0__[\"TextRender\"].destroyUnusedTextureDt) { //超过20秒没用的删掉\r\n                    p.destroy(); //真正删除贴图\r\n                    TextTexture.pool[i] = TextTexture.pool[TextTexture.poolLen - 1];\r\n                    TextTexture.poolLen--;\r\n                    i--; //这个还要处理，用来抵消i++\r\n                }\r\n            }\r\n            TextTexture.cleanTm = curtm;\r\n        }\r\n    }\r\n    touchRect(ri, curloop) {\r\n        if (this.lastTouchTm != curloop) {\r\n            this.curUsedCovRate = 0;\r\n            this.curUsedCovRateAtlas = 0;\r\n            this.lastTouchTm = curloop;\r\n        }\r\n        var texw2 = _TextRender__WEBPACK_IMPORTED_MODULE_0__[\"TextRender\"].atlasWidth * _TextRender__WEBPACK_IMPORTED_MODULE_0__[\"TextRender\"].atlasWidth;\r\n        var gridw2 = _TextAtlas__WEBPACK_IMPORTED_MODULE_2__[\"TextAtlas\"].atlasGridW * _TextAtlas__WEBPACK_IMPORTED_MODULE_2__[\"TextAtlas\"].atlasGridW;\r\n        this.curUsedCovRate += (ri.bmpWidth * ri.bmpHeight) / texw2;\r\n        this.curUsedCovRateAtlas += (Math.ceil(ri.bmpWidth / _TextAtlas__WEBPACK_IMPORTED_MODULE_2__[\"TextAtlas\"].atlasGridW) * Math.ceil(ri.bmpHeight / _TextAtlas__WEBPACK_IMPORTED_MODULE_2__[\"TextAtlas\"].atlasGridW)) / (texw2 / gridw2);\r\n    }\r\n    // 为了与当前的文字渲染兼容的补丁\r\n    get texture() {\r\n        return this;\r\n    }\r\n    _getSource() {\r\n        return this._source;\r\n    }\r\n    // for debug\r\n    drawOnScreen(x, y) {\r\n    }\r\n}\r\nTextTexture.pool = new Array(10); // 回收用\r\nTextTexture.poolLen = 0;\r\nTextTexture.cleanTm = 0;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/text/TextTexture.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/utils/Buffer.ts":
/*!*********************************************!*\
  !*** ./src/core/laya/webgl/utils/Buffer.ts ***!
  \*********************************************/
/*! exports provided: Buffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Buffer\", function() { return Buffer; });\n/* harmony import */ var _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../layagl/LayaGL */ \"./src/core/laya/layagl/LayaGL.ts\");\n\r\nclass Buffer {\r\n    constructor() {\r\n        this._byteLength = 0;\r\n        this._glBuffer = _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.createBuffer();\r\n    }\r\n    get bufferUsage() {\r\n        return this._bufferUsage;\r\n    }\r\n    /**\r\n     * @private\r\n     * 绕过全局状态判断,例如VAO局部状态设置\r\n     */\r\n    _bindForVAO() {\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    //TODO:coverage\r\n    bind() {\r\n        return false;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    destroy() {\r\n        if (this._glBuffer) {\r\n            _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.deleteBuffer(this._glBuffer);\r\n            this._glBuffer = null;\r\n        }\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/utils/Buffer.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/utils/Buffer2D.ts":
/*!***********************************************!*\
  !*** ./src/core/laya/webgl/utils/Buffer2D.ts ***!
  \***********************************************/
/*! exports provided: Buffer2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Buffer2D\", function() { return Buffer2D; });\n/* harmony import */ var _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../layagl/LayaGL */ \"./src/core/laya/layagl/LayaGL.ts\");\n/* harmony import */ var _utils_Stat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/Stat */ \"./src/core/laya/utils/Stat.ts\");\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n/* harmony import */ var _shader_BaseShader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../shader/BaseShader */ \"./src/core/laya/webgl/shader/BaseShader.ts\");\n/* harmony import */ var _Buffer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Buffer */ \"./src/core/laya/webgl/utils/Buffer.ts\");\n\r\n\r\n\r\n\r\n\r\nclass Buffer2D extends _Buffer__WEBPACK_IMPORTED_MODULE_4__[\"Buffer\"] {\r\n    constructor() {\r\n        super();\r\n        this._maxsize = 0;\r\n        this._upload = true;\r\n        this._uploadSize = 0;\r\n        this._bufferSize = 0;\r\n        this._u8Array = null; //反正常常要拷贝老的数据，所以保留这个可以提高效率\r\n    }\r\n    static __int__(gl) {\r\n    }\r\n    get bufferLength() {\r\n        return this._buffer.byteLength;\r\n    }\r\n    set byteLength(value) {\r\n        this.setByteLength(value);\r\n    }\r\n    setByteLength(value) {\r\n        if (this._byteLength !== value) {\r\n            value <= this._bufferSize || (this._resizeBuffer(value * 2 + 256, true));\r\n            this._byteLength = value;\r\n        }\r\n    }\r\n    /**\r\n     * 在当前的基础上需要多大空间，单位是byte\r\n     * @param\tsz\r\n     * @return  增加大小之前的写位置。单位是byte\r\n     */\r\n    needSize(sz) {\r\n        var old = this._byteLength;\r\n        if (sz) {\r\n            var needsz = this._byteLength + sz;\r\n            needsz <= this._bufferSize || (this._resizeBuffer(needsz << 1, true));\r\n            this._byteLength = needsz;\r\n        }\r\n        return old;\r\n    }\r\n    _bufferData() {\r\n        this._maxsize = Math.max(this._maxsize, this._byteLength);\r\n        if (_utils_Stat__WEBPACK_IMPORTED_MODULE_1__[\"Stat\"].loopCount % 30 == 0) { //每30帧缩小一下buffer\t。TODO 这个有问题。不知道_maxsize和_byteLength是怎么维护的，这里会导致重新分配64字节\r\n            if (this._buffer.byteLength > (this._maxsize + 64)) {\r\n                //_setGPUMemory(_buffer.byteLength);\r\n                this._buffer = this._buffer.slice(0, this._maxsize + 64);\r\n                this._bufferSize = this._buffer.byteLength;\r\n                this._checkArrayUse();\r\n            }\r\n            this._maxsize = this._byteLength;\r\n        }\r\n        if (this._uploadSize < this._buffer.byteLength) {\r\n            this._uploadSize = this._buffer.byteLength;\r\n            _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.bufferData(this._bufferType, this._uploadSize, this._bufferUsage);\r\n            //_setGPUMemory(_uploadSize);\r\n        }\r\n        _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.bufferSubData(this._bufferType, 0, new Uint8Array(this._buffer, 0, this._byteLength));\r\n    }\r\n    //TODO:coverage\r\n    _bufferSubData(offset = 0, dataStart = 0, dataLength = 0) {\r\n        this._maxsize = Math.max(this._maxsize, this._byteLength);\r\n        if (_utils_Stat__WEBPACK_IMPORTED_MODULE_1__[\"Stat\"].loopCount % 30 == 0) {\r\n            if (this._buffer.byteLength > (this._maxsize + 64)) {\r\n                //_setGPUMemory(_buffer.byteLength);\r\n                this._buffer = this._buffer.slice(0, this._maxsize + 64);\r\n                this._bufferSize = this._buffer.byteLength;\r\n                this._checkArrayUse();\r\n            }\r\n            this._maxsize = this._byteLength;\r\n        }\r\n        if (this._uploadSize < this._buffer.byteLength) {\r\n            this._uploadSize = this._buffer.byteLength;\r\n            _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.bufferData(this._bufferType, this._uploadSize, this._bufferUsage);\r\n            //_setGPUMemory(_uploadSize);\r\n        }\r\n        if (dataStart || dataLength) {\r\n            var subBuffer = this._buffer.slice(dataStart, dataLength);\r\n            _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.bufferSubData(this._bufferType, offset, subBuffer);\r\n        }\r\n        else {\r\n            _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.bufferSubData(this._bufferType, offset, this._buffer);\r\n        }\r\n    }\r\n    /**\r\n     * buffer重新分配了，继承类根据需要做相应的处理。\r\n     */\r\n    _checkArrayUse() {\r\n    }\r\n    /**\r\n     * 给vao使用的 _bind_upload函数。不要与已经绑定的判断是否相同\r\n     * @return\r\n     */\r\n    _bind_uploadForVAO() {\r\n        if (!this._upload)\r\n            return false;\r\n        this._upload = false;\r\n        this._bindForVAO();\r\n        this._bufferData();\r\n        return true;\r\n    }\r\n    _bind_upload() {\r\n        if (!this._upload)\r\n            return false;\r\n        this._upload = false;\r\n        this.bind();\r\n        this._bufferData();\r\n        return true;\r\n    }\r\n    //TODO:coverage\r\n    _bind_subUpload(offset = 0, dataStart = 0, dataLength = 0) {\r\n        if (!this._upload)\r\n            return false;\r\n        this._upload = false;\r\n        this.bind();\r\n        this._bufferSubData(offset, dataStart, dataLength);\r\n        return true;\r\n    }\r\n    /**\r\n     * 重新分配buffer大小，如果nsz比原来的小则什么都不做。\r\n     * @param\tnsz\t\tbuffer大小，单位是byte。\r\n     * @param\tcopy\t是否拷贝原来的buffer的数据。\r\n     * @return\r\n     */\r\n    _resizeBuffer(nsz, copy) {\r\n        var buff = this._buffer;\r\n        if (nsz <= buff.byteLength)\r\n            return this;\r\n        var u8buf = this._u8Array;\r\n        //_setGPUMemory(nsz);\r\n        if (copy && buff && buff.byteLength > 0) {\r\n            var newbuffer = new ArrayBuffer(nsz);\r\n            var oldU8Arr = (u8buf && u8buf.buffer == buff) ? u8buf : new Uint8Array(buff);\r\n            u8buf = this._u8Array = new Uint8Array(newbuffer);\r\n            u8buf.set(oldU8Arr, 0);\r\n            buff = this._buffer = newbuffer;\r\n        }\r\n        else {\r\n            buff = this._buffer = new ArrayBuffer(nsz);\r\n            this._u8Array = null;\r\n        }\r\n        this._checkArrayUse();\r\n        this._upload = true;\r\n        this._bufferSize = buff.byteLength;\r\n        return this;\r\n    }\r\n    append(data) {\r\n        this._upload = true;\r\n        var byteLen, n;\r\n        byteLen = data.byteLength;\r\n        if (data instanceof Uint8Array) {\r\n            this._resizeBuffer(this._byteLength + byteLen, true);\r\n            n = new Uint8Array(this._buffer, this._byteLength);\r\n        }\r\n        else if (data instanceof Uint16Array) {\r\n            this._resizeBuffer(this._byteLength + byteLen, true);\r\n            n = new Uint16Array(this._buffer, this._byteLength);\r\n        }\r\n        else if (data instanceof Float32Array) {\r\n            this._resizeBuffer(this._byteLength + byteLen, true);\r\n            n = new Float32Array(this._buffer, this._byteLength);\r\n        }\r\n        n.set(data, 0);\r\n        this._byteLength += byteLen;\r\n        this._checkArrayUse();\r\n    }\r\n    /**\r\n     * 附加Uint16Array的数据。数据长度是len。byte的话要*2\r\n     * @param\tdata\r\n     * @param\tlen\r\n     */\r\n    appendU16Array(data, len) {\r\n        this._resizeBuffer(this._byteLength + len * 2, true);\r\n        //(new Uint16Array(_buffer, _byteLength, len)).set(data.slice(0, len));\r\n        //下面这种写法比上面的快多了\r\n        var u = new Uint16Array(this._buffer, this._byteLength, len); //TODO 怎么能不用new\r\n        if (len == 6) {\r\n            u[0] = data[0];\r\n            u[1] = data[1];\r\n            u[2] = data[2];\r\n            u[3] = data[3];\r\n            u[4] = data[4];\r\n            u[5] = data[5];\r\n        }\r\n        else if (len >= 100) {\r\n            u.set(new Uint16Array(data.buffer, 0, len));\r\n        }\r\n        else {\r\n            for (var i = 0; i < len; i++) {\r\n                u[i] = data[i];\r\n            }\r\n        }\r\n        this._byteLength += len * 2;\r\n        this._checkArrayUse();\r\n    }\r\n    //TODO:coverage\r\n    appendEx(data, type) {\r\n        this._upload = true;\r\n        var byteLen, n;\r\n        byteLen = data.byteLength;\r\n        this._resizeBuffer(this._byteLength + byteLen, true);\r\n        n = new type(this._buffer, this._byteLength);\r\n        n.set(data, 0);\r\n        this._byteLength += byteLen;\r\n        this._checkArrayUse();\r\n    }\r\n    //TODO:coverage\r\n    appendEx2(data, type, dataLen, perDataLen = 1) {\r\n        this._upload = true;\r\n        var byteLen, n;\r\n        byteLen = dataLen * perDataLen;\r\n        this._resizeBuffer(this._byteLength + byteLen, true);\r\n        n = new type(this._buffer, this._byteLength);\r\n        var i;\r\n        for (i = 0; i < dataLen; i++) {\r\n            n[i] = data[i];\r\n        }\r\n        this._byteLength += byteLen;\r\n        this._checkArrayUse();\r\n    }\r\n    //TODO:coverage\r\n    getBuffer() {\r\n        return this._buffer;\r\n    }\r\n    setNeedUpload() {\r\n        this._upload = true;\r\n    }\r\n    //TODO:coverage\r\n    getNeedUpload() {\r\n        return this._upload;\r\n    }\r\n    //TODO:coverage\r\n    upload() {\r\n        var scuess = this._bind_upload();\r\n        _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.bindBuffer(this._bufferType, null);\r\n        if (this._bufferType == _WebGLContext__WEBPACK_IMPORTED_MODULE_2__[\"WebGLContext\"].ARRAY_BUFFER)\r\n            _Buffer__WEBPACK_IMPORTED_MODULE_4__[\"Buffer\"]._bindedVertexBuffer = null;\r\n        if (this._bufferType == _WebGLContext__WEBPACK_IMPORTED_MODULE_2__[\"WebGLContext\"].ELEMENT_ARRAY_BUFFER)\r\n            _Buffer__WEBPACK_IMPORTED_MODULE_4__[\"Buffer\"]._bindedIndexBuffer = null;\r\n        _shader_BaseShader__WEBPACK_IMPORTED_MODULE_3__[\"BaseShader\"].activeShader = null;\r\n        return scuess;\r\n    }\r\n    //TODO:coverage\r\n    subUpload(offset = 0, dataStart = 0, dataLength = 0) {\r\n        var scuess = this._bind_subUpload();\r\n        _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_0__[\"LayaGL\"].instance.bindBuffer(this._bufferType, null);\r\n        if (this._bufferType == _WebGLContext__WEBPACK_IMPORTED_MODULE_2__[\"WebGLContext\"].ARRAY_BUFFER)\r\n            _Buffer__WEBPACK_IMPORTED_MODULE_4__[\"Buffer\"]._bindedVertexBuffer = null;\r\n        if (this._bufferType == _WebGLContext__WEBPACK_IMPORTED_MODULE_2__[\"WebGLContext\"].ELEMENT_ARRAY_BUFFER)\r\n            _Buffer__WEBPACK_IMPORTED_MODULE_4__[\"Buffer\"]._bindedIndexBuffer = null;\r\n        _shader_BaseShader__WEBPACK_IMPORTED_MODULE_3__[\"BaseShader\"].activeShader = null;\r\n        return scuess;\r\n    }\r\n    _disposeResource() {\r\n        this._upload = true;\r\n        this._uploadSize = 0;\r\n    }\r\n    /**\r\n     * 清理数据。保留ArrayBuffer\r\n     */\r\n    clear() {\r\n        this._byteLength = 0;\r\n        this._upload = true;\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\nBuffer2D.FLOAT32 = 4;\r\nBuffer2D.SHORT = 2;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/utils/Buffer2D.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/utils/CONST3D2D.ts":
/*!************************************************!*\
  !*** ./src/core/laya/webgl/utils/CONST3D2D.ts ***!
  \************************************************/
/*! exports provided: CONST3D2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"CONST3D2D\", function() { return CONST3D2D; });\nclass CONST3D2D {\r\n}\r\nCONST3D2D.BYTES_PE = 4;\r\nCONST3D2D.BYTES_PIDX = 2;\r\nCONST3D2D.defaultMatrix4 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\r\nCONST3D2D.defaultMinusYMatrix4 = [1, 0, 0, 0, 0, -1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\r\nCONST3D2D.uniformMatrix3 = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0];\r\nCONST3D2D._TMPARRAY = [];\r\nCONST3D2D._OFFSETX = 0;\r\nCONST3D2D._OFFSETY = 0;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/utils/CONST3D2D.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/utils/IndexBuffer2D.ts":
/*!****************************************************!*\
  !*** ./src/core/laya/webgl/utils/IndexBuffer2D.ts ***!
  \****************************************************/
/*! exports provided: IndexBuffer2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"IndexBuffer2D\", function() { return IndexBuffer2D; });\n/* harmony import */ var _Buffer2D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Buffer2D */ \"./src/core/laya/webgl/utils/Buffer2D.ts\");\n/* harmony import */ var _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../layagl/LayaGL */ \"./src/core/laya/layagl/LayaGL.ts\");\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n/* harmony import */ var _Buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Buffer */ \"./src/core/laya/webgl/utils/Buffer.ts\");\n\r\n\r\n\r\n\r\nclass IndexBuffer2D extends _Buffer2D__WEBPACK_IMPORTED_MODULE_0__[\"Buffer2D\"] {\r\n    constructor(bufferUsage = 0x88e4 /* WebGLContext.STATIC_DRAW*/) {\r\n        super();\r\n        this._bufferUsage = bufferUsage;\r\n        this._bufferType = _WebGLContext__WEBPACK_IMPORTED_MODULE_2__[\"WebGLContext\"].ELEMENT_ARRAY_BUFFER;\r\n        this._buffer = new ArrayBuffer(8);\r\n    }\r\n    /*override*/ _checkArrayUse() {\r\n        this._uint16Array && (this._uint16Array = new Uint16Array(this._buffer));\r\n    }\r\n    getUint16Array() {\r\n        return this._uint16Array || (this._uint16Array = new Uint16Array(this._buffer));\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    /*override*/ _bindForVAO() {\r\n        _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance.bindBuffer(_WebGLContext__WEBPACK_IMPORTED_MODULE_2__[\"WebGLContext\"].ELEMENT_ARRAY_BUFFER, this._glBuffer);\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    /*override*/ bind() {\r\n        if (_Buffer__WEBPACK_IMPORTED_MODULE_3__[\"Buffer\"]._bindedIndexBuffer !== this._glBuffer) {\r\n            _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance.bindBuffer(_WebGLContext__WEBPACK_IMPORTED_MODULE_2__[\"WebGLContext\"].ELEMENT_ARRAY_BUFFER, this._glBuffer);\r\n            _Buffer__WEBPACK_IMPORTED_MODULE_3__[\"Buffer\"]._bindedIndexBuffer = this._glBuffer;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    destory() {\r\n        this._uint16Array = null;\r\n        this._buffer = null;\r\n    }\r\n    disposeResource() {\r\n        this._disposeResource();\r\n    }\r\n}\r\nIndexBuffer2D.create = function (bufferUsage = 0x88e4 /* WebGLContext.STATIC_DRAW*/) {\r\n    return new IndexBuffer2D(bufferUsage);\r\n};\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/utils/IndexBuffer2D.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/utils/InlcudeFile.ts":
/*!**************************************************!*\
  !*** ./src/core/laya/webgl/utils/InlcudeFile.ts ***!
  \**************************************************/
/*! exports provided: InlcudeFile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InlcudeFile\", function() { return InlcudeFile; });\n/* harmony import */ var _ShaderCompile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././ShaderCompile */ \"./src/core/laya/webgl/utils/ShaderCompile.ts\");\n\r\nclass InlcudeFile {\r\n    constructor(txt) {\r\n        this.codes = {};\r\n        this.funs = {};\r\n        this.curUseID = -1;\r\n        this.funnames = \"\";\r\n        this.script = txt;\r\n        var begin = 0, ofs, end;\r\n        while (true) {\r\n            begin = txt.indexOf(\"#begin\", begin);\r\n            if (begin < 0)\r\n                break;\r\n            end = begin + 5;\r\n            while (true) {\r\n                end = txt.indexOf(\"#end\", end);\r\n                if (end < 0)\r\n                    break;\r\n                if (txt.charAt(end + 4) === 'i')\r\n                    end += 5;\r\n                else\r\n                    break;\r\n            }\r\n            if (end < 0) {\r\n                throw \"add include err,no #end:\" + txt;\r\n            }\r\n            ofs = txt.indexOf('\\n', begin);\r\n            var words = _ShaderCompile__WEBPACK_IMPORTED_MODULE_0__[\"ShaderCompile\"].splitToWords(txt.substr(begin, ofs - begin), null);\r\n            if (words[1] == 'code') {\r\n                this.codes[words[2]] = txt.substr(ofs + 1, end - ofs - 1);\r\n            }\r\n            else if (words[1] == 'function') //#begin function void test()\r\n             {\r\n                ofs = txt.indexOf(\"function\", begin);\r\n                ofs += \"function\".length;\r\n                this.funs[words[3]] = txt.substr(ofs + 1, end - ofs - 1);\r\n                this.funnames += words[3] + \";\";\r\n            }\r\n            begin = end + 1;\r\n        }\r\n    }\r\n    getWith(name = null) {\r\n        var r = name ? this.codes[name] : this.script;\r\n        if (!r) {\r\n            throw \"get with error:\" + name;\r\n        }\r\n        return r;\r\n    }\r\n    getFunsScript(funsdef) {\r\n        var r = \"\";\r\n        for (var i in this.funs) {\r\n            if (funsdef.indexOf(i + \";\") >= 0) {\r\n                r += this.funs[i];\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/utils/InlcudeFile.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/utils/Mesh2D.ts":
/*!*********************************************!*\
  !*** ./src/core/laya/webgl/utils/Mesh2D.ts ***!
  \*********************************************/
/*! exports provided: Mesh2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Mesh2D\", function() { return Mesh2D; });\n/* harmony import */ var _VertexBuffer2D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././VertexBuffer2D */ \"./src/core/laya/webgl/utils/VertexBuffer2D.ts\");\n/* harmony import */ var _IndexBuffer2D__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././IndexBuffer2D */ \"./src/core/laya/webgl/utils/IndexBuffer2D.ts\");\n/* harmony import */ var _Config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../../Config */ \"./src/core/Config.ts\");\n/* harmony import */ var _BufferState2D__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../BufferState2D */ \"./src/core/laya/webgl/BufferState2D.ts\");\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Mesh2d只是保存数据。描述attribute用的。本身不具有渲染功能。\r\n */\r\nclass Mesh2D {\r\n    /**\r\n     *\r\n     * @param\tstride\r\n     * @param\tvballoc  vb预分配的大小。主要是用来提高效率。防止不断的resizebfufer\r\n     * @param\tiballoc\r\n     */\r\n    constructor(stride, vballoc, iballoc) {\r\n        this._stride = 0; //顶点结构大小。每个mesh的顶点结构是固定的。\r\n        this.vertNum = 0; //当前的顶点的个数\r\n        this.indexNum = 0; //实际index 个数。例如一个三角形是3个。由于ib本身可能超过实际使用的数量，所以需要一个indexNum\r\n        this._applied = false; //是否已经设置给webgl了\r\n        this._quadNum = 0;\r\n        //public static var meshlist:Array = [];\t//活着的mesh对象列表。\r\n        this.canReuse = false; //用完以后，是删除还是回收。\r\n        this._stride = stride;\r\n        this._vb = new _VertexBuffer2D__WEBPACK_IMPORTED_MODULE_0__[\"VertexBuffer2D\"](stride, _WebGLContext__WEBPACK_IMPORTED_MODULE_4__[\"WebGLContext\"].DYNAMIC_DRAW);\r\n        if (vballoc) {\r\n            this._vb._resizeBuffer(vballoc, false);\r\n        }\r\n        else {\r\n            _Config__WEBPACK_IMPORTED_MODULE_2__[\"Config\"].webGL2D_MeshAllocMaxMem && this._vb._resizeBuffer(64 * 1024 * stride, false);\r\n        }\r\n        this._ib = new _IndexBuffer2D__WEBPACK_IMPORTED_MODULE_1__[\"IndexBuffer2D\"]();\r\n        if (iballoc) {\r\n            this._ib._resizeBuffer(iballoc, false);\r\n        }\r\n        //meshlist.push(this);\r\n    }\r\n    /**\r\n     * 重新创建一个mesh。复用这个对象的vertex结构，ib对象和attribinfo对象\r\n     */\r\n    //TODO:coverage\r\n    cloneWithNewVB() {\r\n        var mesh = new Mesh2D(this._stride, 0, 0);\r\n        mesh._ib = this._ib;\r\n        mesh._quadNum = this._quadNum;\r\n        mesh._attribInfo = this._attribInfo;\r\n        return mesh;\r\n    }\r\n    /**\r\n     * 创建一个mesh，使用当前对象的vertex结构。vb和ib自己提供。\r\n     * @return\r\n     */\r\n    //TODO:coverage\r\n    cloneWithNewVBIB() {\r\n        var mesh = new Mesh2D(this._stride, 0, 0);\r\n        mesh._attribInfo = this._attribInfo;\r\n        return mesh;\r\n    }\r\n    /**\r\n     * 获得一个可以写的vb对象\r\n     */\r\n    //TODO:coverage\r\n    getVBW() {\r\n        this._vb.setNeedUpload();\r\n        return this._vb;\r\n    }\r\n    /**\r\n     * 获得一个只读vb\r\n     */\r\n    //TODO:coverage\r\n    getVBR() {\r\n        return this._vb;\r\n    }\r\n    //TODO:coverage\r\n    getIBR() {\r\n        return this._ib;\r\n    }\r\n    /**\r\n     * 获得一个可写的ib\r\n     */\r\n    //TODO:coverage\r\n    getIBW() {\r\n        this._ib.setNeedUpload();\r\n        return this._ib;\r\n    }\r\n    /**\r\n     * 直接创建一个固定的ib。按照固定四边形的索引。\r\n     * @param\tvar QuadNum\r\n     */\r\n    createQuadIB(QuadNum) {\r\n        this._quadNum = QuadNum;\r\n        this._ib._resizeBuffer(QuadNum * 6 * 2, false); //short类型\r\n        this._ib.byteLength = this._ib.bufferLength; //这个我也不知道是什么意思\r\n        var bd = this._ib.getUint16Array();\r\n        var idx = 0;\r\n        var curvert = 0;\r\n        for (var i = 0; i < QuadNum; i++) {\r\n            bd[idx++] = curvert;\r\n            bd[idx++] = curvert + 2;\r\n            bd[idx++] = curvert + 1;\r\n            bd[idx++] = curvert;\r\n            bd[idx++] = curvert + 3;\r\n            bd[idx++] = curvert + 2;\r\n            curvert += 4;\r\n        }\r\n        this._ib.setNeedUpload();\r\n    }\r\n    /**\r\n     * 设置mesh的属性。每3个一组，对应的location分别是0,1,2...\r\n     * 含义是：type,size,offset\r\n     * 不允许多流。因此stride是固定的，offset只是在一个vertex之内。\r\n     * @param\tattribs\r\n     */\r\n    setAttributes(attribs) {\r\n        this._attribInfo = attribs;\r\n        if (this._attribInfo.length % 3 != 0) {\r\n            throw 'Mesh2D setAttributes error!';\r\n        }\r\n    }\r\n    /**\r\n     * 初始化VAO的配置，只需要执行一次。以后使用的时候直接bind就行\r\n     * @param\tgl\r\n     */\r\n    configVAO(gl) {\r\n        if (this._applied)\r\n            return;\r\n        this._applied = true;\r\n        if (!this._vao) {\r\n            //_vao = __JS__('gl.createVertexArray();');\r\n            this._vao = new _BufferState2D__WEBPACK_IMPORTED_MODULE_3__[\"BufferState2D\"]();\r\n            //_vao.dbgid = _gvaoid++;\r\n        }\r\n        this._vao.bind();\r\n        //gl.bindVertexArray(_vao);\r\n        this._vb._bindForVAO();\r\n        //_vb._bind(); 这个有相同优化，不适用于vao\r\n        this._ib.setNeedUpload(); //vao的话，必须要绑定ib。即使是共享的别人的。\r\n        this._ib._bind_uploadForVAO();\r\n        //gl.bindBuffer(WebGLContext.ARRAY_BUFFER,_vb);\r\n        //gl.bindBuffer(WebGLContext.ELEMENT_ARRAY_BUFFER, _ib);\r\n        var attribNum = this._attribInfo.length / 3;\r\n        var idx = 0;\r\n        for (var i = 0; i < attribNum; i++) {\r\n            var _size = this._attribInfo[idx + 1];\r\n            var _type = this._attribInfo[idx];\r\n            var _off = this._attribInfo[idx + 2];\r\n            gl.enableVertexAttribArray(i);\r\n            gl.vertexAttribPointer(i, _size, _type, false, this._stride, _off); //注意 normalize都设置为false了，想必没人要用这个功能把。\r\n            idx += 3;\r\n        }\r\n        this._vao.unBind();\r\n        //gl.bindVertexArray(null);\r\n    }\r\n    /**\r\n     * 应用这个mesh\r\n     * @param\tgl\r\n     */\r\n    useMesh(gl) {\r\n        //要先bind，在bufferData\r\n        this._applied || this.configVAO(gl);\r\n        //var attribNum:int = _attribInfo.length / 3;\r\n        //var bindedAttributeBuffer:Array = Buffer._bindedAtributeBuffer;\r\n        //for ( var i:int = 0; i < attribNum; i++) \r\n        //(bindedAttributeBuffer[i]) || (gl.enableVertexAttribArray(i), bindedAttributeBuffer[i] = _vb);\r\n        //WebGLContext.bindVertexArray(gl, null);\r\n        //gl.disableVertexAttribArray(0);\r\n        this._vao.bind();\r\n        //gl.bindVertexArray(_vao);\r\n        this._vb.bind(); //vao必须要再bind vb,否则下面的操作可能是在操作其他的mesh\r\n        this._ib._bind_upload() || this._ib.bind();\r\n        this._vb._bind_upload() || this._vb.bind();\r\n    }\r\n    //TODO:coverage\r\n    getEleNum() {\r\n        return this._ib.getBuffer().byteLength / 2;\r\n    }\r\n    /**\r\n     * 子类实现。用来把自己放到对应的回收池中，以便复用。\r\n     */\r\n    releaseMesh() { }\r\n    /**\r\n     * 释放资源。\r\n     */\r\n    destroy() {\r\n    }\r\n    /**\r\n     * 清理vb数据\r\n     */\r\n    clearVB() {\r\n        this._vb.clear();\r\n    }\r\n}\r\nMesh2D._gvaoid = 0;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/utils/Mesh2D.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/utils/MeshQuadTexture.ts":
/*!******************************************************!*\
  !*** ./src/core/laya/webgl/utils/MeshQuadTexture.ts ***!
  \******************************************************/
/*! exports provided: MeshQuadTexture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MeshQuadTexture\", function() { return MeshQuadTexture; });\n/* harmony import */ var _Mesh2D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Mesh2D */ \"./src/core/laya/webgl/utils/Mesh2D.ts\");\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n\r\n\r\n/**\r\n * drawImage，fillRect等会用到的简单的mesh。每次添加必然是一个四边形。\r\n */\r\nclass MeshQuadTexture extends _Mesh2D__WEBPACK_IMPORTED_MODULE_0__[\"Mesh2D\"] {\r\n    //private static var _num;\r\n    constructor() {\r\n        super(MeshQuadTexture.const_stride, 4, 4); //x,y,u,v,rgba\r\n        this.canReuse = true;\r\n        this.setAttributes(MeshQuadTexture._fixattriInfo);\r\n        if (!MeshQuadTexture._fixib) {\r\n            this.createQuadIB(MeshQuadTexture._maxIB); //每个quad 4个顶点。正好达到64k的索引。\r\n            MeshQuadTexture._fixib = this._ib;\r\n        }\r\n        else {\r\n            this._ib = MeshQuadTexture._fixib;\r\n            this._quadNum = MeshQuadTexture._maxIB;\r\n        }\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    static getAMesh(mainctx) {\r\n        //console.log('getmesh');\r\n        var ret = null;\r\n        if (MeshQuadTexture._POOL.length) {\r\n            ret = MeshQuadTexture._POOL.pop();\r\n        }\r\n        else\r\n            ret = new MeshQuadTexture();\r\n        // 先分配64k顶点的空间，这样可以避免浪费内存，否则后面增加内存的时候是成倍增加的，当快超过64k的时候，直接变成了128k\r\n        mainctx && ret._vb._resizeBuffer(64 * 1024 * MeshQuadTexture.const_stride, false);\r\n        return ret;\r\n    }\r\n    /**\r\n     * 把本对象放到回收池中，以便getMesh能用。\r\n     */\r\n    /*override*/ releaseMesh() {\r\n        this._vb.setByteLength(0);\r\n        this.vertNum = 0;\r\n        this.indexNum = 0;\r\n        //_applied = false;\r\n        MeshQuadTexture._POOL.push(this);\r\n    }\r\n    /*override*/ destroy() {\r\n        //_ib.destroy(); ib是公用的。\r\n        this._vb.destroy();\r\n        this._vb.deleteBuffer();\r\n    }\r\n    /**\r\n     *\r\n     * @param\tpos\r\n     * @param\tuv\r\n     * @param\tcolor\r\n     * @param\tclip   ox,oy,xx,xy,yx,yy\r\n     * @param \tuseTex 是否使用贴图。false的话是给fillRect用的\r\n     */\r\n    addQuad(pos, uv, color, useTex) {\r\n        var vb = this._vb;\r\n        var vpos = (vb._byteLength >> 2); //float数组的下标\r\n        //x,y,u,v,rgba\r\n        vb.setByteLength((vpos + MeshQuadTexture.const_stride) << 2); //是一个四边形的大小，也是这里填充的大小\r\n        var vbdata = vb._floatArray32 || vb.getFloat32Array();\r\n        var vbu32Arr = vb._uint32Array;\r\n        var cpos = vpos;\r\n        var useTexVal = useTex ? 0xff : 0;\r\n        vbdata[cpos++] = pos[0];\r\n        vbdata[cpos++] = pos[1];\r\n        vbdata[cpos++] = uv[0];\r\n        vbdata[cpos++] = uv[1];\r\n        vbu32Arr[cpos++] = color;\r\n        vbu32Arr[cpos++] = useTexVal;\r\n        vbdata[cpos++] = pos[2];\r\n        vbdata[cpos++] = pos[3];\r\n        vbdata[cpos++] = uv[2];\r\n        vbdata[cpos++] = uv[3];\r\n        vbu32Arr[cpos++] = color;\r\n        vbu32Arr[cpos++] = useTexVal;\r\n        vbdata[cpos++] = pos[4];\r\n        vbdata[cpos++] = pos[5];\r\n        vbdata[cpos++] = uv[4];\r\n        vbdata[cpos++] = uv[5];\r\n        vbu32Arr[cpos++] = color;\r\n        vbu32Arr[cpos++] = useTexVal;\r\n        vbdata[cpos++] = pos[6];\r\n        vbdata[cpos++] = pos[7];\r\n        vbdata[cpos++] = uv[6];\r\n        vbdata[cpos++] = uv[7];\r\n        vbu32Arr[cpos++] = color;\r\n        vbu32Arr[cpos++] = useTexVal;\r\n        vb._upload = true;\r\n    }\r\n}\r\nMeshQuadTexture.const_stride = 24; // 48;  24是不带clip的\r\nMeshQuadTexture._maxIB = 16 * 1024;\r\nMeshQuadTexture._fixattriInfo = [_WebGLContext__WEBPACK_IMPORTED_MODULE_1__[\"WebGLContext\"].FLOAT, 4, 0,\r\n    _WebGLContext__WEBPACK_IMPORTED_MODULE_1__[\"WebGLContext\"].UNSIGNED_BYTE, 4, 16,\r\n    _WebGLContext__WEBPACK_IMPORTED_MODULE_1__[\"WebGLContext\"].UNSIGNED_BYTE, 4, 20];\r\nMeshQuadTexture._POOL = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/utils/MeshQuadTexture.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/utils/MeshTexture.ts":
/*!**************************************************!*\
  !*** ./src/core/laya/webgl/utils/MeshTexture.ts ***!
  \**************************************************/
/*! exports provided: MeshTexture */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MeshTexture\", function() { return MeshTexture; });\n/* harmony import */ var _Mesh2D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Mesh2D */ \"./src/core/laya/webgl/utils/Mesh2D.ts\");\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n\r\n\r\n/**\r\n * 与MeshQuadTexture基本相同。不过index不是固定的\r\n */\r\nclass MeshTexture extends _Mesh2D__WEBPACK_IMPORTED_MODULE_0__[\"Mesh2D\"] {\r\n    constructor() {\r\n        super(MeshTexture.const_stride, 4, 4); //x,y,u,v,rgba\r\n        this.canReuse = true;\r\n        this.setAttributes(MeshTexture._fixattriInfo);\r\n    }\r\n    /**\r\n     *\r\n     */\r\n    static getAMesh(mainctx) {\r\n        //console.log('getmesh');\r\n        var ret;\r\n        if (MeshTexture._POOL.length) {\r\n            ret = MeshTexture._POOL.pop();\r\n        }\r\n        else\r\n            ret = new MeshTexture();\r\n        mainctx && ret._vb._resizeBuffer(64 * 1024 * MeshTexture.const_stride, false);\r\n        return ret;\r\n    }\r\n    addData(vertices, uvs, idx, matrix, rgba) {\r\n        //vb\r\n        var vb = this._vb;\r\n        var ib = this._ib;\r\n        var vertsz = vertices.length >> 1;\r\n        var startpos = vb.needSize(vertsz * MeshTexture.const_stride); //vb的起点。\t\t\t\r\n        var f32pos = startpos >> 2;\r\n        var vbdata = vb._floatArray32 || vb.getFloat32Array();\r\n        var vbu32Arr = vb._uint32Array;\r\n        var ci = 0;\r\n        var m00 = matrix.a;\r\n        var m01 = matrix.b;\r\n        var m10 = matrix.c;\r\n        var m11 = matrix.d;\r\n        var tx = matrix.tx;\r\n        var ty = matrix.ty;\r\n        var i = 0;\r\n        //var clipinfo:Array = ctx.getTransedClipInfo();\r\n        for (i = 0; i < vertsz; i++) {\r\n            var x = vertices[ci], y = vertices[ci + 1];\r\n            vbdata[f32pos] = x * m00 + y * m10 + tx;\r\n            vbdata[f32pos + 1] = x * m01 + y * m11 + ty;\r\n            vbdata[f32pos + 2] = uvs[ci];\r\n            vbdata[f32pos + 3] = uvs[ci + 1];\r\n            vbu32Arr[f32pos + 4] = rgba;\r\n            vbu32Arr[f32pos + 5] = 0xff;\r\n            f32pos += 6;\r\n            //裁剪信息。\r\n            //vbdata[f32pos++] = clipinfo[2] ; vbdata[f32pos++] = clipinfo[3]; vbdata[f32pos++] = clipinfo[4]; vbdata[f32pos++] = clipinfo[5];//cliprect的方向\r\n            //vbdata[f32pos++] = clipinfo[0]; vbdata[f32pos++] = clipinfo[1];\t//cliprect的位置\r\n            ci += 2;\r\n        }\r\n        vb.setNeedUpload();\r\n        var vertN = this.vertNum;\r\n        var sz = idx.length;\r\n        var stib = ib.needSize(idx.byteLength);\r\n        var cidx = ib.getUint16Array();\r\n        //var cidx:Uint16Array = new Uint16Array(__JS__('ib._buffer'), stib);\r\n        var stibid = stib >> 1; // indexbuffer的起始位置\r\n        if (vertN > 0) {\r\n            var end = stibid + sz;\r\n            var si = 0;\r\n            for (i = stibid; i < end; i++, si++) {\r\n                cidx[i] = idx[si] + vertN;\r\n            }\r\n        }\r\n        else {\r\n            cidx.set(idx, stibid);\r\n        }\r\n        ib.setNeedUpload();\r\n        this.vertNum += vertsz;\r\n        this.indexNum += idx.length;\r\n    }\r\n    /**\r\n     * 把本对象放到回收池中，以便getMesh能用。\r\n     */\r\n    /*override*/ releaseMesh() {\r\n        this._vb.setByteLength(0);\r\n        this._ib.setByteLength(0);\r\n        this.vertNum = 0;\r\n        this.indexNum = 0;\r\n        //_applied = false;\r\n        MeshTexture._POOL.push(this);\r\n    }\r\n    /*override*/ destroy() {\r\n        this._ib.destroy();\r\n        this._vb.destroy();\r\n        this._ib.disposeResource();\r\n        this._vb.deleteBuffer();\r\n    }\r\n}\r\nMeshTexture.const_stride = 24;\r\nMeshTexture._fixattriInfo = [_WebGLContext__WEBPACK_IMPORTED_MODULE_1__[\"WebGLContext\"].FLOAT, 4, 0,\r\n    _WebGLContext__WEBPACK_IMPORTED_MODULE_1__[\"WebGLContext\"].UNSIGNED_BYTE, 4, 16,\r\n    _WebGLContext__WEBPACK_IMPORTED_MODULE_1__[\"WebGLContext\"].UNSIGNED_BYTE, 4, 20];\r\nMeshTexture._POOL = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/utils/MeshTexture.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/utils/MeshVG.ts":
/*!*********************************************!*\
  !*** ./src/core/laya/webgl/utils/MeshVG.ts ***!
  \*********************************************/
/*! exports provided: MeshVG */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"MeshVG\", function() { return MeshVG; });\n/* harmony import */ var _Mesh2D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Mesh2D */ \"./src/core/laya/webgl/utils/Mesh2D.ts\");\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n\r\n\r\n/**\r\n * 用来画矢量的mesh。顶点格式固定为 x,y,rgba\r\n */\r\nclass MeshVG extends _Mesh2D__WEBPACK_IMPORTED_MODULE_0__[\"Mesh2D\"] {\r\n    constructor() {\r\n        super(MeshVG.const_stride, 4, 4); //x,y,rgba\r\n        this.canReuse = true;\r\n        this.setAttributes(MeshVG._fixattriInfo);\r\n    }\r\n    static getAMesh(mainctx) {\r\n        //console.log('getmeshvg');\r\n        var ret;\r\n        if (MeshVG._POOL.length) {\r\n            ret = MeshVG._POOL.pop();\r\n        }\r\n        else\r\n            ret = new MeshVG();\r\n        mainctx && ret._vb._resizeBuffer(64 * 1024 * MeshVG.const_stride, false);\r\n        return ret;\r\n    }\r\n    /**\r\n     * 往矢量mesh中添加顶点和index。会把rgba和points在mesh中合并。\r\n     * @param\tpoints\t顶点数组，只包含x,y。[x,y,x,y...]\r\n     * @param\trgba\trgba颜色\r\n     * @param\tib\t\tindex数组。\r\n     */\r\n    addVertAndIBToMesh(ctx, points, rgba, ib) {\r\n        var startpos = this._vb.needSize(points.length / 2 * MeshVG.const_stride); //vb的起点。\r\n        var f32pos = startpos >> 2;\r\n        var vbdata = this._vb._floatArray32 || this._vb.getFloat32Array();\r\n        var vbu32Arr = this._vb._uint32Array;\r\n        var ci = 0;\r\n        //vb\r\n        //var clipinfo:Array = ctx.getTransedClipInfo();\r\n        var sz = points.length / 2;\r\n        for (var i = 0; i < sz; i++) {\r\n            vbdata[f32pos++] = points[ci];\r\n            vbdata[f32pos++] = points[ci + 1];\r\n            ci += 2;\r\n            vbu32Arr[f32pos++] = rgba;\r\n            /*\r\n            //裁剪信息。\r\n            vbdata[f32pos++] = clipinfo[2] ; vbdata[f32pos++] = clipinfo[3]; vbdata[f32pos++] = clipinfo[4]; vbdata[f32pos++] = clipinfo[5];//cliprect的方向\r\n            vbdata[f32pos++] = clipinfo[0]; vbdata[f32pos++] = clipinfo[1]; //cliprect的位置\r\n            */\r\n        }\r\n        this._vb.setNeedUpload();\r\n        //ib\r\n        //TODO 现在这种添加数据的方法效率非常低。而且会引起大量的gc\r\n        this._ib.append(new Uint16Array(ib));\r\n        this._ib.setNeedUpload();\r\n        this.vertNum += sz;\r\n        this.indexNum += ib.length;\r\n    }\r\n    /**\r\n     * 把本对象放到回收池中，以便getMesh能用。\r\n     */\r\n    /*override*/ releaseMesh() {\r\n        this._vb.setByteLength(0);\r\n        this._ib.setByteLength(0);\r\n        this.vertNum = 0;\r\n        this.indexNum = 0;\r\n        //_applied = false;\r\n        MeshVG._POOL.push(this);\r\n    }\r\n    /*override*/ destroy() {\r\n        this._ib.destroy();\r\n        this._vb.destroy();\r\n        this._ib.disposeResource();\r\n        this._vb.deleteBuffer();\r\n    }\r\n}\r\nMeshVG.const_stride = 12; // 36;\r\nMeshVG._fixattriInfo = [_WebGLContext__WEBPACK_IMPORTED_MODULE_1__[\"WebGLContext\"].FLOAT, 2, 0,\r\n    _WebGLContext__WEBPACK_IMPORTED_MODULE_1__[\"WebGLContext\"].UNSIGNED_BYTE, 4, 8];\r\nMeshVG._POOL = [];\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/utils/MeshVG.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/utils/RenderState2D.ts":
/*!****************************************************!*\
  !*** ./src/core/laya/webgl/utils/RenderState2D.ts ***!
  \****************************************************/
/*! exports provided: RenderState2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RenderState2D\", function() { return RenderState2D; });\n/* harmony import */ var _maths_Matrix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../maths/Matrix */ \"./src/core/laya/maths/Matrix.ts\");\n\r\nclass RenderState2D {\r\n    /* 不知道 有什么用，删掉先\r\n    public static function getMatrArray():Array {\r\n        return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\r\n    }\r\n    */\r\n    //TODO:coverage\r\n    static mat2MatArray(mat, matArray) {\r\n        var m = mat;\r\n        var m4 = matArray;\r\n        m4[0] = m.a;\r\n        m4[1] = m.b;\r\n        m4[2] = RenderState2D.EMPTYMAT4_ARRAY[2];\r\n        m4[3] = RenderState2D.EMPTYMAT4_ARRAY[3];\r\n        m4[4] = m.c;\r\n        m4[5] = m.d;\r\n        m4[6] = RenderState2D.EMPTYMAT4_ARRAY[6];\r\n        m4[7] = RenderState2D.EMPTYMAT4_ARRAY[7];\r\n        m4[8] = RenderState2D.EMPTYMAT4_ARRAY[8];\r\n        m4[9] = RenderState2D.EMPTYMAT4_ARRAY[9];\r\n        m4[10] = RenderState2D.EMPTYMAT4_ARRAY[10];\r\n        m4[11] = RenderState2D.EMPTYMAT4_ARRAY[11];\r\n        m4[12] = m.tx;\r\n        m4[13] = m.ty;\r\n        m4[14] = RenderState2D.EMPTYMAT4_ARRAY[14];\r\n        m4[15] = RenderState2D.EMPTYMAT4_ARRAY[15];\r\n        return matArray;\r\n    }\r\n    static restoreTempArray() {\r\n        RenderState2D.TEMPMAT4_ARRAY[0] = 1;\r\n        RenderState2D.TEMPMAT4_ARRAY[1] = 0;\r\n        RenderState2D.TEMPMAT4_ARRAY[4] = 0;\r\n        RenderState2D.TEMPMAT4_ARRAY[5] = 1;\r\n        RenderState2D.TEMPMAT4_ARRAY[12] = 0;\r\n        RenderState2D.TEMPMAT4_ARRAY[13] = 0;\r\n    }\r\n    static clear() {\r\n        RenderState2D.worldScissorTest = false;\r\n        //worldFilters = null;\r\n        RenderState2D.worldAlpha = 1;\r\n        //worldClipRect.x = worldClipRect.y = 0;\r\n        //worldClipRect.width = width;\r\n        //worldClipRect.height = height;\r\n    }\r\n}\r\nRenderState2D._MAXSIZE = 99999999;\r\n/**@private 一个初始化的 <code>Matrix</code> 对象，不允许修改此对象内容。*/\r\nRenderState2D.EMPTYMAT4_ARRAY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\r\nRenderState2D.TEMPMAT4_ARRAY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\r\nRenderState2D.worldMatrix4 = RenderState2D.TEMPMAT4_ARRAY;\r\nRenderState2D.worldMatrix = new _maths_Matrix__WEBPACK_IMPORTED_MODULE_0__[\"Matrix\"]();\r\nRenderState2D.matWVP = null; // :Matrix4x4 = Matrix4x4.DEFAULT;\t\t// 3d矩阵\r\nRenderState2D.worldAlpha = 1.0;\r\nRenderState2D.worldScissorTest = false;\r\nRenderState2D.width = 0;\r\nRenderState2D.height = 0;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/utils/RenderState2D.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/utils/ShaderCompile.ts":
/*!****************************************************!*\
  !*** ./src/core/laya/webgl/utils/ShaderCompile.ts ***!
  \****************************************************/
/*! exports provided: ShaderCompile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShaderCompile\", function() { return ShaderCompile; });\n/* harmony import */ var _ShaderNode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././ShaderNode */ \"./src/core/laya/webgl/utils/ShaderNode.ts\");\n/* harmony import */ var _InlcudeFile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ././InlcudeFile */ \"./src/core/laya/webgl/utils/InlcudeFile.ts\");\n/* harmony import */ var _utils_Browser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/Browser */ \"./src/core/laya/utils/Browser.ts\");\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n/* harmony import */ var _shader_Shader__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../shader/Shader */ \"./src/core/laya/webgl/shader/Shader.ts\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @private\r\n * <code>ShaderCompile</code> 类用于实现Shader编译。\r\n */\r\nclass ShaderCompile {\r\n    constructor(vs, ps, nameMap, defs = null) {\r\n        this._clearCR = new RegExp(\"\\r\", \"g\");\r\n        function _compile(script) {\r\n            script = script.replace(this._clearCR, \"\"); //CRLF风格需要先去掉“\\r\",否则切分字符会出错导致宏定义编译错误等\r\n            var includefiles = [];\r\n            var top = new _ShaderNode__WEBPACK_IMPORTED_MODULE_0__[\"ShaderNode\"](includefiles);\r\n            this._compileToTree(top, script.split('\\n'), 0, includefiles, defs);\r\n            return top;\r\n        }\r\n        //先要去掉注释,还没有完成\r\n        var startTime = _utils_Browser__WEBPACK_IMPORTED_MODULE_2__[\"Browser\"].now();\r\n        this._VS = _compile(vs);\r\n        this._PS = _compile(ps);\r\n        this._nameMap = nameMap;\r\n        if ((_utils_Browser__WEBPACK_IMPORTED_MODULE_2__[\"Browser\"].now() - startTime) > 2)\r\n            console.log(\"ShaderCompile use time:\" + (_utils_Browser__WEBPACK_IMPORTED_MODULE_2__[\"Browser\"].now() - startTime) + \"  size:\" + vs.length + \"/\" + ps.length);\r\n    }\r\n    //TODO:coverage\r\n    static _parseOne(attributes, uniforms, words, i, word, b) {\r\n        var one = { type: ShaderCompile.shaderParamsMap[words[i + 1]], name: words[i + 2], size: isNaN(parseInt(words[i + 3])) ? 1 : parseInt(words[i + 3]) };\r\n        if (b) {\r\n            if (word == \"attribute\") {\r\n                attributes.push(one);\r\n            }\r\n            else {\r\n                uniforms.push(one);\r\n            }\r\n        }\r\n        if (words[i + 3] == ':') {\r\n            one.type = words[i + 4];\r\n            i += 2;\r\n        }\r\n        i += 2;\r\n        return i;\r\n    }\r\n    static addInclude(fileName, txt) {\r\n        if (!txt || txt.length === 0)\r\n            throw new Error(\"add shader include file err:\" + fileName);\r\n        if (ShaderCompile.includes[fileName])\r\n            throw new Error(\"add shader include file err, has add:\" + fileName);\r\n        ShaderCompile.includes[fileName] = new _InlcudeFile__WEBPACK_IMPORTED_MODULE_1__[\"InlcudeFile\"](txt);\r\n    }\r\n    //TODO:coverage\r\n    static preGetParams(vs, ps) {\r\n        var text = [vs, ps];\r\n        var result = {};\r\n        var attributes = [];\r\n        var uniforms = [];\r\n        var definesInfo = {};\r\n        var definesName = [];\r\n        result.attributes = attributes;\r\n        result.uniforms = uniforms;\r\n        result.defines = definesInfo;\r\n        var i, n, one;\r\n        for (var s = 0; s < 2; s++) {\r\n            text[s] = text[s].replace(ShaderCompile._removeAnnotation, \"\");\r\n            var words = text[s].match(ShaderCompile._reg);\r\n            var tempelse;\r\n            for (i = 0, n = words.length; i < n; i++) {\r\n                var word = words[i];\r\n                if (word != \"attribute\" && word != \"uniform\") {\r\n                    if (word == \"#define\") {\r\n                        word = words[++i];\r\n                        definesName[word] = 1;\r\n                        continue;\r\n                    }\r\n                    else if (word == \"#ifdef\") {\r\n                        tempelse = words[++i];\r\n                        var def = definesInfo[tempelse] = definesInfo[tempelse] || [];\r\n                        for (i++; i < n; i++) {\r\n                            word = words[i];\r\n                            if (word != \"attribute\" && word != \"uniform\") {\r\n                                if (word == \"#else\") {\r\n                                    for (i++; i < n; i++) {\r\n                                        word = words[i];\r\n                                        if (word != \"attribute\" && word != \"uniform\") {\r\n                                            if (word == \"#endif\") {\r\n                                                break;\r\n                                            }\r\n                                            continue;\r\n                                        }\r\n                                        i = ShaderCompile._parseOne(attributes, uniforms, words, i, word, !definesName[tempelse]);\r\n                                    }\r\n                                }\r\n                                continue;\r\n                            }\r\n                            i = ShaderCompile._parseOne(attributes, uniforms, words, i, word, definesName[tempelse]);\r\n                        }\r\n                    }\r\n                    continue;\r\n                }\r\n                i = ShaderCompile._parseOne(attributes, uniforms, words, i, word, true);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    static splitToWords(str, block) {\r\n        var out = [];\r\n        /*\r\n           var words:Array = str.split(_splitToWordExps);\r\n           trace(str);\r\n           trace(words);\r\n         */\r\n        var c;\r\n        var ofs = -1;\r\n        var word;\r\n        for (var i = 0, n = str.length; i < n; i++) {\r\n            c = str.charAt(i);\r\n            if (\" \\t=+-*/&%!<>()'\\\",;\".indexOf(c) >= 0) {\r\n                if (ofs >= 0 && (i - ofs) > 1) {\r\n                    word = str.substr(ofs, i - ofs);\r\n                    out.push(word);\r\n                }\r\n                if (c == '\"' || c == \"'\") {\r\n                    var ofs2 = str.indexOf(c, i + 1);\r\n                    if (ofs2 < 0) {\r\n                        throw \"Sharder err:\" + str;\r\n                    }\r\n                    out.push(str.substr(i + 1, ofs2 - i - 1));\r\n                    i = ofs2;\r\n                    ofs = -1;\r\n                    continue;\r\n                }\r\n                if (c == '(' && block && out.length > 0) {\r\n                    word = out[out.length - 1] + \";\";\r\n                    if (\"vec4;main;\".indexOf(word) < 0)\r\n                        block.useFuns += word;\r\n                }\r\n                ofs = -1;\r\n                continue;\r\n            }\r\n            if (ofs < 0)\r\n                ofs = i;\r\n        }\r\n        if (ofs < n && (n - ofs) > 1) {\r\n            word = str.substr(ofs, n - ofs);\r\n            out.push(word);\r\n        }\r\n        return out;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _compileToTree(parent, lines, start, includefiles, defs) {\r\n        var node, preNode;\r\n        var text, name, fname;\r\n        var ofs, words, noUseNode;\r\n        var i, n, j;\r\n        for (i = start; i < lines.length; i++) {\r\n            text = lines[i];\r\n            if (text.length < 1)\r\n                continue;\r\n            ofs = text.indexOf(\"//\");\r\n            if (ofs === 0)\r\n                continue;\r\n            if (ofs >= 0)\r\n                text = text.substr(0, ofs);\r\n            node = noUseNode || new _ShaderNode__WEBPACK_IMPORTED_MODULE_0__[\"ShaderNode\"](includefiles);\r\n            noUseNode = null;\r\n            node.text = text;\r\n            node.noCompile = true;\r\n            if ((ofs = text.indexOf(\"#\")) >= 0) {\r\n                name = \"#\";\r\n                for (j = ofs + 1, n = text.length; j < n; j++) {\r\n                    var c = text.charAt(j);\r\n                    if (c === ' ' || c === '\\t' || c === '?')\r\n                        break;\r\n                    name += c;\r\n                }\r\n                node.name = name;\r\n                switch (name) {\r\n                    case \"#ifdef\":\r\n                    case \"#ifndef\":\r\n                        node.src = text;\r\n                        node.noCompile = text.match(/[!&|()=<>]/) != null;\r\n                        if (!node.noCompile) {\r\n                            words = text.replace(/^\\s*/, '').split(/\\s+/);\r\n                            node.setCondition(words[1], name === \"#ifdef\" ? ShaderCompile.IFDEF_YES : ShaderCompile.IFDEF_ELSE);\r\n                            node.text = \"//\" + node.text;\r\n                        }\r\n                        else {\r\n                            console.log(\"function():Boolean{return \" + text.substr(ofs + node.name.length) + \"}\");\r\n                        }\r\n                        node.setParent(parent);\r\n                        parent = node;\r\n                        if (defs) {\r\n                            words = text.substr(j).split(ShaderCompile._splitToWordExps3);\r\n                            for (j = 0; j < words.length; j++) {\r\n                                text = words[j];\r\n                                text.length && (defs[text] = true);\r\n                            }\r\n                        }\r\n                        continue;\r\n                    case \"#if\":\r\n                        node.src = text;\r\n                        node.noCompile = true;\r\n                        node.setParent(parent);\r\n                        parent = node;\r\n                        if (defs) {\r\n                            words = text.substr(j).split(ShaderCompile._splitToWordExps3);\r\n                            for (j = 0; j < words.length; j++) {\r\n                                text = words[j];\r\n                                text.length && text != \"defined\" && (defs[text] = true);\r\n                            }\r\n                        }\r\n                        continue;\r\n                    case \"#else\":\r\n                        node.src = text;\r\n                        parent = parent.parent;\r\n                        preNode = parent.childs[parent.childs.length - 1];\r\n                        node.noCompile = preNode.noCompile;\r\n                        if (!node.noCompile) {\r\n                            node.condition = preNode.condition;\r\n                            node.conditionType = preNode.conditionType == ShaderCompile.IFDEF_YES ? ShaderCompile.IFDEF_ELSE : ShaderCompile.IFDEF_YES;\r\n                            node.text = \"//\" + node.text + \" \" + preNode.text + \" \" + node.conditionType;\r\n                        }\r\n                        node.setParent(parent);\r\n                        parent = node;\r\n                        continue;\r\n                    case \"#endif\":\r\n                        parent = parent.parent;\r\n                        preNode = parent.childs[parent.childs.length - 1];\r\n                        node.noCompile = preNode.noCompile;\r\n                        if (!node.noCompile) {\r\n                            node.text = \"//\" + node.text;\r\n                        }\r\n                        node.setParent(parent);\r\n                        continue;\r\n                    case \"#include\": //这里有问题,主要是空格\r\n                        words = ShaderCompile.splitToWords(text, null);\r\n                        var inlcudeFile = ShaderCompile.includes[words[1]];\r\n                        if (!inlcudeFile) {\r\n                            throw \"ShaderCompile error no this include file:\" + words[1];\r\n                        }\r\n                        if ((ofs = words[0].indexOf(\"?\")) < 0) {\r\n                            node.setParent(parent);\r\n                            text = inlcudeFile.getWith(words[2] == 'with' ? words[3] : null);\r\n                            this._compileToTree(node, text.split('\\n'), 0, includefiles, defs);\r\n                            node.text = \"\";\r\n                            continue;\r\n                        }\r\n                        node.setCondition(words[0].substr(ofs + 1), ShaderCompile.IFDEF_YES);\r\n                        node.text = inlcudeFile.getWith(words[2] == 'with' ? words[3] : null);\r\n                        break;\r\n                    case \"#import\":\r\n                        words = ShaderCompile.splitToWords(text, null);\r\n                        fname = words[1];\r\n                        includefiles.push({ node: node, file: ShaderCompile.includes[fname], ofs: node.text.length });\r\n                        continue;\r\n                }\r\n            }\r\n            else {\r\n                preNode = parent.childs[parent.childs.length - 1];\r\n                if (preNode && !preNode.name) {\r\n                    includefiles.length > 0 && ShaderCompile.splitToWords(text, preNode);\r\n                    noUseNode = node;\r\n                    preNode.text += \"\\n\" + text;\r\n                    continue;\r\n                }\r\n                includefiles.length > 0 && ShaderCompile.splitToWords(text, node);\r\n            }\r\n            node.setParent(parent);\r\n        }\r\n    }\r\n    createShader(define, shaderName, createShader, bindAttrib) {\r\n        var defMap = {};\r\n        var defineStr = \"\";\r\n        if (define) {\r\n            for (var i in define) {\r\n                defineStr += \"#define \" + i + \"\\n\";\r\n                defMap[i] = true;\r\n            }\r\n        }\r\n        var vs = this._VS.toscript(defMap, []);\r\n        var ps = this._PS.toscript(defMap, []);\r\n        return (createShader || _shader_Shader__WEBPACK_IMPORTED_MODULE_4__[\"Shader\"].create)(defineStr + vs.join('\\n'), defineStr + ps.join('\\n'), shaderName, this._nameMap, bindAttrib);\r\n    }\r\n}\r\n/*[DISABLE-ADD-VARIABLE-DEFAULT-VALUE]*/\r\nShaderCompile.IFDEF_NO = 0;\r\nShaderCompile.IFDEF_YES = 1;\r\nShaderCompile.IFDEF_ELSE = 2;\r\nShaderCompile.IFDEF_PARENT = 3;\r\nShaderCompile._removeAnnotation = new RegExp(\"(/\\\\*([^*]|[\\\\r\\\\\\n]|(\\\\*+([^*/]|[\\\\r\\\\n])))*\\\\*+/)|(//.*)\", \"g\");\r\nShaderCompile._reg = new RegExp(\"(\\\".*\\\")|('.*')|([#\\\\w\\\\*-\\\\.+/()=<>{}\\\\\\\\]+)|([,;:\\\\\\\\])\", \"g\");\r\nShaderCompile._splitToWordExps = new RegExp(\"[(\\\".*\\\")]+|[('.*')]+|([ \\\\t=\\\\+\\\\-*/&%!<>!%\\(\\),;])\", \"g\");\r\nShaderCompile.includes = {};\r\nShaderCompile.shaderParamsMap = { \"float\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].FLOAT, \"int\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].INT, \"bool\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].BOOL, \"vec2\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].FLOAT_VEC2, \"vec3\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].FLOAT_VEC3, \"vec4\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].FLOAT_VEC4, \"ivec2\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].INT_VEC2, \"ivec3\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].INT_VEC3, \"ivec4\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].INT_VEC4, \"bvec2\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].BOOL_VEC2, \"bvec3\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].BOOL_VEC3, \"bvec4\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].BOOL_VEC4, \"mat2\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].FLOAT_MAT2, \"mat3\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].FLOAT_MAT3, \"mat4\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].FLOAT_MAT4, \"sampler2D\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].SAMPLER_2D, \"samplerCube\": _WebGLContext__WEBPACK_IMPORTED_MODULE_3__[\"WebGLContext\"].SAMPLER_CUBE };\r\nShaderCompile._splitToWordExps3 = new RegExp(\"[ \\\\t=\\\\+\\\\-*/&%!<>!%\\(\\),;\\\\|]\", \"g\");\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/utils/ShaderCompile.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/utils/ShaderNode.ts":
/*!*************************************************!*\
  !*** ./src/core/laya/webgl/utils/ShaderNode.ts ***!
  \*************************************************/
/*! exports provided: ShaderNode */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ShaderNode\", function() { return ShaderNode; });\n/* harmony import */ var _ShaderCompile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ShaderCompile */ \"./src/core/laya/webgl/utils/ShaderCompile.ts\");\n\r\nclass ShaderNode {\r\n    constructor(includefiles) {\r\n        this.childs = [];\r\n        this.text = \"\";\r\n        this.useFuns = \"\";\r\n        this.z = 0;\r\n        this.includefiles = includefiles;\r\n    }\r\n    setParent(parent) {\r\n        parent.childs.push(this);\r\n        this.z = parent.z + 1;\r\n        this.parent = parent;\r\n    }\r\n    setCondition(condition, type) {\r\n        if (condition) {\r\n            this.conditionType = type;\r\n            condition = condition.replace(/(\\s*$)/g, \"\");\r\n            this.condition = function () {\r\n                return this[condition];\r\n            };\r\n            this.condition.__condition = condition;\r\n        }\r\n    }\r\n    toscript(def, out) {\r\n        return this._toscript(def, out, ++ShaderNode.__id);\r\n    }\r\n    _toscript(def, out, id) {\r\n        if (this.childs.length < 1 && !this.text)\r\n            return out;\r\n        var outIndex = out.length;\r\n        if (this.condition) {\r\n            var ifdef = !!this.condition.call(def);\r\n            this.conditionType === _ShaderCompile__WEBPACK_IMPORTED_MODULE_0__[\"ShaderCompile\"].IFDEF_ELSE && (ifdef = !ifdef);\r\n            if (!ifdef)\r\n                return out;\r\n        }\r\n        this.text && out.push(this.text);\r\n        this.childs.length > 0 && this.childs.forEach(function (o, index, arr) {\r\n            o._toscript(def, out, id);\r\n        });\r\n        if (this.includefiles.length > 0 && this.useFuns.length > 0) {\r\n            var funsCode;\r\n            for (var i = 0, n = this.includefiles.length; i < n; i++) {\r\n                //如果已经加入了，就不要再加\r\n                if (this.includefiles[i].curUseID == id) {\r\n                    continue;\r\n                }\r\n                funsCode = this.includefiles[i].file.getFunsScript(this.useFuns);\r\n                if (funsCode.length > 0) {\r\n                    this.includefiles[i].curUseID = id;\r\n                    out[0] = funsCode + out[0];\r\n                }\r\n            }\r\n        }\r\n        return out;\r\n    }\r\n}\r\nShaderNode.__id = 1;\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/utils/ShaderNode.ts?");

/***/ }),

/***/ "./src/core/laya/webgl/utils/VertexBuffer2D.ts":
/*!*****************************************************!*\
  !*** ./src/core/laya/webgl/utils/VertexBuffer2D.ts ***!
  \*****************************************************/
/*! exports provided: VertexBuffer2D */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VertexBuffer2D\", function() { return VertexBuffer2D; });\n/* harmony import */ var _Buffer2D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ././Buffer2D */ \"./src/core/laya/webgl/utils/Buffer2D.ts\");\n/* harmony import */ var _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../layagl/LayaGL */ \"./src/core/laya/layagl/LayaGL.ts\");\n/* harmony import */ var _WebGLContext__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../WebGLContext */ \"./src/core/laya/webgl/WebGLContext.ts\");\n/* harmony import */ var _Buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Buffer */ \"./src/core/laya/webgl/utils/Buffer.ts\");\n\r\n\r\n\r\n\r\nclass VertexBuffer2D extends _Buffer2D__WEBPACK_IMPORTED_MODULE_0__[\"Buffer2D\"] {\r\n    constructor(vertexStride, bufferUsage) {\r\n        super();\r\n        this._vertexStride = vertexStride;\r\n        this._bufferUsage = bufferUsage;\r\n        this._bufferType = _WebGLContext__WEBPACK_IMPORTED_MODULE_2__[\"WebGLContext\"].ARRAY_BUFFER;\r\n        this._buffer = new ArrayBuffer(8);\r\n        this._floatArray32 = new Float32Array(this._buffer);\r\n        this._uint32Array = new Uint32Array(this._buffer);\r\n    }\r\n    get vertexStride() {\r\n        return this._vertexStride;\r\n    }\r\n    getFloat32Array() {\r\n        return this._floatArray32;\r\n    }\r\n    /**\r\n     * 在当前位置插入float数组。\r\n     * @param\tdata\r\n     * @param\tpos\r\n     */\r\n    appendArray(data) {\r\n        var oldoff = this._byteLength >> 2;\r\n        this.setByteLength(this._byteLength + data.length * 4);\r\n        var vbdata = this.getFloat32Array();\r\n        vbdata.set(data, oldoff);\r\n        this._upload = true;\r\n    }\r\n    /*override*/ _checkArrayUse() {\r\n        this._floatArray32 && (this._floatArray32 = new Float32Array(this._buffer));\r\n        this._uint32Array && (this._uint32Array = new Uint32Array(this._buffer));\r\n    }\r\n    //只删除buffer，不disableVertexAttribArray\r\n    deleteBuffer() {\r\n        super._disposeResource();\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    /*override*/ _bindForVAO() {\r\n        _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance.bindBuffer(_WebGLContext__WEBPACK_IMPORTED_MODULE_2__[\"WebGLContext\"].ARRAY_BUFFER, this._glBuffer);\r\n    }\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    /*override*/ bind() {\r\n        if (_Buffer__WEBPACK_IMPORTED_MODULE_3__[\"Buffer\"]._bindedVertexBuffer !== this._glBuffer) {\r\n            _layagl_LayaGL__WEBPACK_IMPORTED_MODULE_1__[\"LayaGL\"].instance.bindBuffer(_WebGLContext__WEBPACK_IMPORTED_MODULE_2__[\"WebGLContext\"].ARRAY_BUFFER, this._glBuffer);\r\n            _Buffer__WEBPACK_IMPORTED_MODULE_3__[\"Buffer\"]._bindedVertexBuffer = this._glBuffer;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /*override*/ destroy() {\r\n        super.destroy();\r\n        this._byteLength = 0;\r\n        this._upload = true;\r\n        this._buffer = null;\r\n        this._floatArray32 = null;\r\n    }\r\n}\r\nVertexBuffer2D.create = function (vertexStride, bufferUsage = 0x88e8 /* WebGLContext.DYNAMIC_DRAW*/) {\r\n    return new VertexBuffer2D(vertexStride, bufferUsage);\r\n};\r\n\n\n//# sourceURL=webpack:///./src/core/laya/webgl/utils/VertexBuffer2D.ts?");

/***/ }),

/***/ "./src/debug/Main1.ts":
/*!****************************!*\
  !*** ./src/debug/Main1.ts ***!
  \****************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _core_laya_display_Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/laya/display/Sprite */ \"./src/core/laya/display/Sprite.ts\");\n\r\nnew _core_laya_display_Sprite__WEBPACK_IMPORTED_MODULE_0__[\"Sprite\"]();\r\n\n\n//# sourceURL=webpack:///./src/debug/Main1.ts?");

/***/ })

/******/ });